{"sha": "baac771ac4c36d411f60dbf1700626cedfb1e605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFhYzc3MWFjNGMzNmQ0MTFmNjBkYmYxNzAwNjI2Y2VkZmIxZTYwNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-24T20:39:30Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-24T20:39:30Z"}, "message": "re PR target/12721 (ICE when building a cross compiler for avr-elf)\n\n\tPR target/12721.\n\t* config/avr/avr.c: Include ggc.h.\n\t(tmp_reg_rtx): Declare with GTY.\n\t(zero_reg_rtx): Likewise.\n\t(ldi_reg_rtx): Remove.\n\t(avr_override_options): Initialize zero_reg_rtx and\n\tldi_reg_rtx.\n\t(avr_init): Remove.\n\tInclude gt-avr.h.\n\t* config/avr/avr.h (LDI_REG_REGNO): Remove.\n\tRemove externs for tmp_reg_rtx, zero_reg_rtx, and ldi_reg_rtx.\n\nFrom-SVN: r75010", "tree": {"sha": "c0b65cf986eaee3de41d21df486af67322872cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b65cf986eaee3de41d21df486af67322872cad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baac771ac4c36d411f60dbf1700626cedfb1e605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baac771ac4c36d411f60dbf1700626cedfb1e605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baac771ac4c36d411f60dbf1700626cedfb1e605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baac771ac4c36d411f60dbf1700626cedfb1e605/comments", "author": null, "committer": null, "parents": [{"sha": "2dcfc29d81c998cb414e14772fffa7868b8e685b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dcfc29d81c998cb414e14772fffa7868b8e685b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dcfc29d81c998cb414e14772fffa7868b8e685b"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "da43b7a4dad58c844b495487be13ca97d610d803", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac771ac4c36d411f60dbf1700626cedfb1e605/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac771ac4c36d411f60dbf1700626cedfb1e605/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=baac771ac4c36d411f60dbf1700626cedfb1e605", "patch": "@@ -1,3 +1,17 @@\n+2003-12-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR target/12721.\n+\t* config/avr/avr.c: Include ggc.h.\n+\t(tmp_reg_rtx): Declare with GTY.\n+\t(zero_reg_rtx): Likewise.\n+\t(ldi_reg_rtx): Remove.\n+\t(avr_override_options): Initialize zero_reg_rtx and\n+\tldi_reg_rtx.\n+\t(avr_init): Remove.\n+\tInclude gt-avr.h.\n+\t* config/avr/avr.h (LDI_REG_REGNO): Remove.\n+\tRemove externs for tmp_reg_rtx, zero_reg_rtx, and ldi_reg_rtx.\n+\n 2003-12-24  David Edelsohn  <edelsohn@gnu.org>\n \n \t* doc/md.texi: Document PowerPC vector register constraint letter."}, {"sha": "402cbca9b7381ba33b0e008a5d06776e5cfbdacd", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac771ac4c36d411f60dbf1700626cedfb1e605/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac771ac4c36d411f60dbf1700626cedfb1e605/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=baac771ac4c36d411f60dbf1700626cedfb1e605", "patch": "@@ -39,6 +39,7 @@\n #include \"obstack.h\"\n #include \"function.h\"\n #include \"recog.h\"\n+#include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -81,14 +82,10 @@ static int avr_address_cost (rtx);\n #define FIRST_CUM_REG 26\n \n /* Temporary register RTX (gen_rtx (REG,QImode,TMP_REGNO)) */\n-rtx tmp_reg_rtx;\n+static GTY(()) rtx tmp_reg_rtx;\n \n /* Zeroed register RTX (gen_rtx (REG,QImode,ZERO_REGNO)) */\n-rtx zero_reg_rtx;\n-\n-/* RTX for register which will be used for loading immediate values to\n-   r0-r15 registers.  */\n-rtx ldi_reg_rtx;\n+static GTY(()) rtx zero_reg_rtx;\n \n /* AVR register names {\"r0\", \"r1\", ..., \"r31\"} */\n static const char *const avr_regnames[] = REGISTER_NAMES;\n@@ -274,29 +271,10 @@ avr_override_options (void)\n \n   if (optimize && !TARGET_NO_TABLEJUMP)\n     avr_case_values_threshold = (!AVR_MEGA || TARGET_CALL_PROLOGUES) ? 8 : 17;\n-}\n \n-#if 0 /* Does not play nice with GC.  FIXME. */\n-/* Initialize TMP_REG_RTX and ZERO_REG_RTX */\n-void\n-avr_init_once (void)\n-{\n-  tmp_reg_rtx = xcalloc (1, sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n-  PUT_CODE (tmp_reg_rtx, REG);\n-  PUT_MODE (tmp_reg_rtx, QImode);\n-  XINT (tmp_reg_rtx, 0) = TMP_REGNO;\n-\n-  zero_reg_rtx = xcalloc (1, sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n-  PUT_CODE (zero_reg_rtx, REG);\n-  PUT_MODE (zero_reg_rtx, QImode);\n-  XINT (zero_reg_rtx, 0) = ZERO_REGNO;\n-\n-  ldi_reg_rtx = xcalloc (1, sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n-  PUT_CODE (ldi_reg_rtx, REG);\n-  PUT_MODE (ldi_reg_rtx, QImode);\n-  XINT (ldi_reg_rtx, 0) = LDI_REG_REGNO;\n+  tmp_reg_rtx  = gen_rtx_REG (QImode, TMP_REGNO);\n+  zero_reg_rtx = gen_rtx_REG (QImode, ZERO_REGNO);\n }\n-#endif\n \n /*  return register class from register number */\n \n@@ -5389,3 +5367,4 @@ avr_asm_out_dtor (rtx symbol, int priority)\n   default_dtor_section_asm_out_destructor (symbol, priority);\n }\n \n+#include \"gt-avr.h\""}, {"sha": "eae93e5e1c3ebf1f44ecaf4345a52d898a63a851", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac771ac4c36d411f60dbf1700626cedfb1e605/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac771ac4c36d411f60dbf1700626cedfb1e605/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=baac771ac4c36d411f60dbf1700626cedfb1e605", "patch": "@@ -2482,11 +2482,4 @@ extern int avr_case_values_threshold;\n /* zero register r1 */\n #define ZERO_REGNO 1\n \n-/* Temporary register which used for load immediate values to r0-r15  */\n-#define LDI_REG_REGNO 31\n-\n-extern struct rtx_def *tmp_reg_rtx;\n-extern struct rtx_def *zero_reg_rtx;\n-extern struct rtx_def *ldi_reg_rtx;\n-\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG"}]}