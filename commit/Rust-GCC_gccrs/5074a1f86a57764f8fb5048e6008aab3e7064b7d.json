{"sha": "5074a1f86a57764f8fb5048e6008aab3e7064b7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA3NGExZjg2YTU3NzY0ZjhmYjUwNDhlNjAwOGFhYjNlNzA2NGI3ZA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-05-14T20:40:44Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-05-14T20:40:44Z"}, "message": "re PR rtl-optimization/65862 ([MIPS] IRA/LRA issue: integers spilled to floating-point registers)\n\n2015-05-14  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/65862\n\t* target.def (ira_change_pseudo_allocno_class): New hook.\n\t* targhooks.c (default_ira_change_pseudo_allocno_class): Default\n\tvalue of the hook.\n\t* targhooks.h (default_ira_change_pseudo_allocno_class): New\n\textern\n\t* doc/tm.texi.in (TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS): Add the\n\thook.\n\t* ira-costs.c (find_costs_and_classes): Call the hook and change\n\tclasses when it is necessary.\n\t* doc/tm.texi: Update.\n\nFrom-SVN: r223202", "tree": {"sha": "e18b312551461a4b8aeea02f6c9b58295145119b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e18b312551461a4b8aeea02f6c9b58295145119b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5074a1f86a57764f8fb5048e6008aab3e7064b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5074a1f86a57764f8fb5048e6008aab3e7064b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5074a1f86a57764f8fb5048e6008aab3e7064b7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5074a1f86a57764f8fb5048e6008aab3e7064b7d/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f226d22967576772030669a06d5bea73a5802d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f226d22967576772030669a06d5bea73a5802d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f226d22967576772030669a06d5bea73a5802d2f"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "bf28867ac4da17f328d12ec0ea9d9ca574fc76ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5074a1f86a57764f8fb5048e6008aab3e7064b7d", "patch": "@@ -1,3 +1,17 @@\n+2015-05-14  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/65862\n+\t* target.def (ira_change_pseudo_allocno_class): New hook.\n+\t* targhooks.c (default_ira_change_pseudo_allocno_class): Default\n+\tvalue of the hook.\n+\t* targhooks.h (default_ira_change_pseudo_allocno_class): New\n+\textern\n+\t* doc/tm.texi.in (TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS): Add the\n+\thook.\n+\t* ira-costs.c (find_costs_and_classes): Call the hook and change\n+\tclasses when it is necessary.\n+\t* doc/tm.texi: Update.\n+\n 2015-05-14  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* config/i386/i386.md (sibcall_memory): Check that register with"}, {"sha": "3a89eee7933c21bfac9f71d95998e33ad0086190", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5074a1f86a57764f8fb5048e6008aab3e7064b7d", "patch": "@@ -2837,6 +2837,13 @@ as below:\n @end smallexample\n @end defmac\n \n+@deftypefn {Target Hook} reg_class_t TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS (int, @var{reg_class_t})\n+A target hook which can change allocno class for given pseudo from\n+  allocno class calculated by IRA.\n+  \n+  The default version of this target hook always returns given class.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_LRA_P (void)\n A target hook which returns true if we use LRA instead of reload pass.  It means that LRA was ported to the target.    The default version of this target hook returns always false.\n @end deftypefn"}, {"sha": "e76b8a05e906ad6a3137e8fb63fee21393950347", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=5074a1f86a57764f8fb5048e6008aab3e7064b7d", "patch": "@@ -2475,6 +2475,8 @@ as below:\n @end smallexample\n @end defmac\n \n+@hook TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS\n+\n @hook TARGET_LRA_P\n \n @hook TARGET_REGISTER_PRIORITY"}, {"sha": "b5c9bdd17c747340fa1426fa43d12973f9aa0329", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=5074a1f86a57764f8fb5048e6008aab3e7064b7d", "patch": "@@ -1636,7 +1636,7 @@ find_costs_and_classes (FILE *dump_file)\n   int i, k, start, max_cost_classes_num;\n   int pass;\n   basic_block bb;\n-  enum reg_class *regno_best_class;\n+  enum reg_class *regno_best_class, new_class;\n \n   init_recog ();\n   regno_best_class\n@@ -1878,6 +1878,18 @@ find_costs_and_classes (FILE *dump_file)\n \t      ira_assert (regno_aclass[i] != NO_REGS\n \t\t\t  && ira_reg_allocno_class_p[regno_aclass[i]]);\n \t    }\n+\t  if ((new_class\n+\t       = (reg_class) (targetm.ira_change_pseudo_allocno_class\n+\t\t\t      (i, regno_aclass[i]))) != regno_aclass[i])\n+\t    {\n+\t      regno_aclass[i] = new_class;\n+\t      if (hard_reg_set_subset_p (reg_class_contents[new_class],\n+\t\t\t\t\t reg_class_contents[best]))\n+\t\tbest = new_class;\n+\t      if (hard_reg_set_subset_p (reg_class_contents[new_class],\n+\t\t\t\t\t reg_class_contents[alt_class]))\n+\t\talt_class = new_class;\n+\t    }\n \t  if (pass == flag_expensive_optimizations)\n \t    {\n \t      if (best_cost > i_mem_cost)"}, {"sha": "f2cb81dff05162597ea48231f13333536c20d613", "filename": "gcc/target.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=5074a1f86a57764f8fb5048e6008aab3e7064b7d", "patch": "@@ -4763,6 +4763,16 @@ This is currently used only by the C and C++ front ends.\",\n  tree, (tree type, tree expr),\n  hook_tree_tree_tree_null)\n \n+/* Change pseudo allocno class calculated by IRA.  */\n+DEFHOOK\n+(ira_change_pseudo_allocno_class,\n+ \"A target hook which can change allocno class for given pseudo from\\n\\\n+  allocno class calculated by IRA.\\n\\\n+  \\n\\\n+  The default version of this target hook always returns given class.\",\n+ reg_class_t, (int, reg_class_t),\n+ default_ira_change_pseudo_allocno_class)\n+\n /* Return true if we use LRA instead of reload.  */\n DEFHOOK\n (lra_p,"}, {"sha": "44fcd9b6a1239014e32a1af663884ef06eedb346", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=5074a1f86a57764f8fb5048e6008aab3e7064b7d", "patch": "@@ -914,6 +914,13 @@ default_branch_target_register_class (void)\n   return NO_REGS;\n }\n \n+reg_class_t\n+default_ira_change_pseudo_allocno_class (int regno ATTRIBUTE_UNUSED,\n+\t\t\t\t\t reg_class_t cl)\n+{\n+  return cl;\n+}\n+\n extern bool\n default_lra_p (void)\n {"}, {"sha": "5ae991d12508ed7c8fae37e971c59fc695f7521f", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5074a1f86a57764f8fb5048e6008aab3e7064b7d/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=5074a1f86a57764f8fb5048e6008aab3e7064b7d", "patch": "@@ -140,6 +140,7 @@ extern rtx default_static_chain (const_tree, bool);\n extern void default_trampoline_init (rtx, tree, rtx);\n extern int default_return_pops_args (tree, tree, int);\n extern reg_class_t default_branch_target_register_class (void);\n+extern reg_class_t default_ira_change_pseudo_allocno_class (int, reg_class_t);\n extern bool default_lra_p (void);\n extern int default_register_priority (int);\n extern bool default_register_usage_leveling_p (void);"}]}