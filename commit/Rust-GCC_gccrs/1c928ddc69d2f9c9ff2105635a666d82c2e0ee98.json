{"sha": "1c928ddc69d2f9c9ff2105635a666d82c2e0ee98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5MjhkZGM2OWQyZjljOWZmMjEwNTYzNWE2NjZkODJjMmUwZWU5OA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-01-12T09:59:39Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-01-12T09:59:39Z"}, "message": "IPA ICF: handle correctly indirect_calls.\n\n\t* ipa-icf.c (sem_function::equals_wpa): Add indirect_calls as indication\n\tthat a function is not leaf.\n\t(sem_function::compare_polymorphic_p): Likewise.\n\nFrom-SVN: r219456", "tree": {"sha": "13b7da17f84e61fb821e0dc87f2fde1a971befe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13b7da17f84e61fb821e0dc87f2fde1a971befe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c928ddc69d2f9c9ff2105635a666d82c2e0ee98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c928ddc69d2f9c9ff2105635a666d82c2e0ee98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c928ddc69d2f9c9ff2105635a666d82c2e0ee98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c928ddc69d2f9c9ff2105635a666d82c2e0ee98/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76478bf94bb4e3027ecb132d88e416dcf5996371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76478bf94bb4e3027ecb132d88e416dcf5996371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76478bf94bb4e3027ecb132d88e416dcf5996371"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "3205cec4a95e3ffe9356bc1e0a3fb9c852cf64d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c928ddc69d2f9c9ff2105635a666d82c2e0ee98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c928ddc69d2f9c9ff2105635a666d82c2e0ee98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c928ddc69d2f9c9ff2105635a666d82c2e0ee98", "patch": "@@ -1,3 +1,9 @@\n+2015-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-icf.c (sem_function::equals_wpa): Add indirect_calls as indication\n+\tthat a function is not leaf.\n+\t(sem_function::compare_polymorphic_p): Likewise.\n+\n 2015-01-12  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* config/visium/visium.c: Add includes hashtab.h, hash-set.h,"}, {"sha": "9e2dea5397d6c5031b971428e0280b97548cdab3", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c928ddc69d2f9c9ff2105635a666d82c2e0ee98/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c928ddc69d2f9c9ff2105635a666d82c2e0ee98/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=1c928ddc69d2f9c9ff2105635a666d82c2e0ee98", "patch": "@@ -340,7 +340,8 @@ sem_function::equals_wpa (sem_item *item,\n \treturn return_false_with_msg (\"NULL argument type\");\n \n       /* Polymorphic comparison is executed just for non-leaf functions.  */\n-      bool is_not_leaf = get_node ()->callees != NULL;\n+      bool is_not_leaf = get_node ()->callees != NULL\n+\t\t\t || get_node ()->indirect_calls != NULL;\n \n       if (!func_checker::compatible_types_p (arg_types[i],\n \t\t\t\t\t     m_compared_func->arg_types[i],\n@@ -884,7 +885,9 @@ bool\n sem_function::compare_polymorphic_p (void)\n {\n   return get_node ()->callees != NULL\n-\t || m_compared_func->get_node ()->callees != NULL;\n+\t || get_node ()->indirect_calls != NULL\n+\t || m_compared_func->get_node ()->callees != NULL\n+\t || m_compared_func->get_node ()->indirect_calls != NULL;\n }\n \n /* For a given call graph NODE, the function constructs new"}]}