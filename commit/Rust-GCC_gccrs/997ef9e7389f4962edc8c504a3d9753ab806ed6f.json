{"sha": "997ef9e7389f4962edc8c504a3d9753ab806ed6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk3ZWY5ZTczODlmNDk2MmVkYzhjNTA0YTNkOTc1M2FiODA2ZWQ2Zg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-07-24T04:56:29Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-07-24T04:56:29Z"}, "message": "remove useless unused attributes in i386 code\n\ngcc/\n\n\t* config/i386/driver-i386.c: Remove names of unused arguments and\n\tunnecessary unused attributes.\n\t* config/i386/host-mingw32.c: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/i386/winnt-stubs.c: Likewise.\n\t* config/i386/winnt.c: Likewise.\n\nFrom-SVN: r212968", "tree": {"sha": "0734e39e7401737b094990b43ec0fcf3ed7dc89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0734e39e7401737b094990b43ec0fcf3ed7dc89c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/997ef9e7389f4962edc8c504a3d9753ab806ed6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997ef9e7389f4962edc8c504a3d9753ab806ed6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997ef9e7389f4962edc8c504a3d9753ab806ed6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997ef9e7389f4962edc8c504a3d9753ab806ed6f/comments", "author": null, "committer": null, "parents": [{"sha": "c9b1a29f6cc78c623d71895fcf3a0d979aefcec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b1a29f6cc78c623d71895fcf3a0d979aefcec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b1a29f6cc78c623d71895fcf3a0d979aefcec7"}], "stats": {"total": 149, "additions": 64, "deletions": 85}, "files": [{"sha": "e5651660cbb67719d166b0e872a568a2b1adc249", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=997ef9e7389f4962edc8c504a3d9753ab806ed6f", "patch": "@@ -1,3 +1,12 @@\n+2014-07-24  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* config/i386/driver-i386.c: Remove names of unused arguments and\n+\tunnecessary unused attributes.\n+\t* config/i386/host-mingw32.c: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i386/winnt-stubs.c: Likewise.\n+\t* config/i386/winnt.c: Likewise.\n+\n 2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_popwb_pair_reg)"}, {"sha": "1c6385fe4f514c5294418113ecc7c93879df2d26", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=997ef9e7389f4962edc8c504a3d9753ab806ed6f", "patch": "@@ -920,8 +920,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n    -march and -mtune \"native\" target and will leave to the newly\n    built compiler to generate code for its default target.  */\n \n-const char *host_detect_local_cpu (int argc ATTRIBUTE_UNUSED,\n-\t\t\t\t   const char **argv ATTRIBUTE_UNUSED)\n+const char *host_detect_local_cpu (int, const char **)\n {\n   return NULL;\n }"}, {"sha": "c71d25d46cf4a39e420177a3f96dff358b44efaa", "filename": "gcc/config/i386/host-mingw32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2Fconfig%2Fi386%2Fhost-mingw32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2Fconfig%2Fi386%2Fhost-mingw32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fhost-mingw32.c?ref=997ef9e7389f4962edc8c504a3d9753ab806ed6f", "patch": "@@ -83,7 +83,7 @@ mingw32_gt_pch_alloc_granularity (void)\n    open file descriptor if the host would like to probe with mmap.  */\n \n static void *\n-mingw32_gt_pch_get_address (size_t size, int fd  ATTRIBUTE_UNUSED)\n+mingw32_gt_pch_get_address (size_t size, int)\n {\n   void* res;\n   size = (size + va_granularity - 1) & ~(va_granularity - 1);"}, {"sha": "96ada8e41734b509e125ed9eac422ca67575237c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 42, "deletions": 66, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=997ef9e7389f4962edc8c504a3d9753ab806ed6f", "patch": "@@ -5228,9 +5228,8 @@ x86_elf_aligned_common (FILE *file,\n    ASM_OUTPUT_ALIGNED_BSS.  */\n \n void\n-x86_output_aligned_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n-\t\t\tconst char *name, unsigned HOST_WIDE_INT size,\n-\t\t\tint align)\n+x86_output_aligned_bss (FILE *file, tree decl, const char *name,\n+\t\t       \tunsigned HOST_WIDE_INT size, int align)\n {\n   if ((ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_MEDIUM_PIC)\n       && size > (unsigned int)ix86_section_threshold)\n@@ -5360,7 +5359,7 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n static tree\n ix86_handle_cconv_attribute (tree *node, tree name,\n \t\t\t\t   tree args,\n-\t\t\t\t   int flags ATTRIBUTE_UNUSED,\n+\t\t\t\t   int,\n \t\t\t\t   bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE\n@@ -5504,8 +5503,7 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n    attributes that we expect elsewhere.  */\n \n static tree\n-ix86_handle_tm_regparm_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n-    \t\t\t\t  tree args ATTRIBUTE_UNUSED,\n+ix86_handle_tm_regparm_attribute (tree *node, tree, tree,\n \t\t\t\t  int flags, bool *no_add_attrs)\n {\n   tree alt;\n@@ -7544,7 +7542,7 @@ ix86_function_arg (cumulative_args_t cum_v, enum machine_mode omode,\n \n static bool\n ix86_pass_by_reference (cumulative_args_t cum_v, enum machine_mode mode,\n-\t\t\tconst_tree type, bool named ATTRIBUTE_UNUSED)\n+\t\t\tconst_tree type, bool)\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n \n@@ -7973,8 +7971,7 @@ ix86_function_value_1 (const_tree valtype, const_tree fntype_or_decl,\n }\n \n static rtx\n-ix86_function_value (const_tree valtype, const_tree fntype_or_decl,\n-\t\t     bool outgoing ATTRIBUTE_UNUSED)\n+ix86_function_value (const_tree valtype, const_tree fntype_or_decl, bool)\n {\n   enum machine_mode mode, orig_mode;\n \n@@ -8021,7 +8018,7 @@ ix86_libcall_value (enum machine_mode mode)\n /* Return true iff type is returned in memory.  */\n \n static bool\n-ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n+ix86_return_in_memory (const_tree type, const_tree fntype)\n {\n #ifdef SUBTARGET_RETURN_IN_MEMORY\n   return SUBTARGET_RETURN_IN_MEMORY (type, fntype);\n@@ -8315,8 +8312,7 @@ setup_incoming_varargs_ms_64 (CUMULATIVE_ARGS *cum)\n \n static void\n ix86_setup_incoming_varargs (cumulative_args_t cum_v, enum machine_mode mode,\n-\t\t\t     tree type, int *pretend_size ATTRIBUTE_UNUSED,\n-\t\t\t     int no_rtl)\n+\t\t\t     tree type, int *, int no_rtl)\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n   CUMULATIVE_ARGS next_cum;\n@@ -11767,8 +11763,7 @@ ix86_expand_epilogue (int style)\n /* Reset from the function's potential modifications.  */\n \n static void\n-ix86_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n-\t\t\t       HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+ix86_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED, HOST_WIDE_INT)\n {\n   if (pic_offset_table_rtx)\n     SET_REGNO (pic_offset_table_rtx, REAL_PIC_OFFSET_TABLE_REGNUM);\n@@ -12390,9 +12385,7 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n    requires to two regs - that would mean more pseudos with longer\n    lifetimes.  */\n static int\n-ix86_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t   addr_space_t as ATTRIBUTE_UNUSED,\n-\t\t   bool speed ATTRIBUTE_UNUSED)\n+ix86_address_cost (rtx x, enum machine_mode, addr_space_t, bool)\n {\n   struct ix86_address parts;\n   int cost = 1;\n@@ -12459,7 +12452,7 @@ darwin_local_data_pic (rtx disp)\n    satisfies CONSTANT_P.  */\n \n static bool\n-ix86_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+ix86_legitimate_constant_p (enum machine_mode, rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -12784,10 +12777,8 @@ legitimate_pic_address_disp_p (rtx disp)\n    0 if it should not.  */\n \n bool\n-ix86_legitimize_reload_address (rtx x,\n-\t\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t\tint opnum, int type,\n-\t\t\t\tint ind_levels ATTRIBUTE_UNUSED)\n+ix86_legitimize_reload_address (rtx x, enum machine_mode, int opnum, int type,\n+\t\t\t       \tint)\n {\n   /* Reload can generate:\n \n@@ -12884,8 +12875,7 @@ ix86_validate_address_register (rtx op)\n    be recognized.  */\n \n static bool\n-ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t           rtx addr, bool strict)\n+ix86_legitimate_address_p (enum machine_mode, rtx addr, bool strict)\n {\n   struct ix86_address parts;\n   rtx base, index, disp;\n@@ -13825,8 +13815,7 @@ legitimize_pe_coff_symbol (rtx addr, bool inreg)\n    See comments by legitimize_pic_address in i386.c for details.  */\n \n static rtx\n-ix86_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n-\t\t\t enum machine_mode mode)\n+ix86_legitimize_address (rtx x, rtx, enum machine_mode mode)\n {\n   int changed = 0;\n   unsigned log;\n@@ -14742,7 +14731,7 @@ print_reg (rtx x, int code, FILE *file)\n    pattern.  */\n \n static int\n-get_some_local_dynamic_name_1 (rtx *px, void *data ATTRIBUTE_UNUSED)\n+get_some_local_dynamic_name_1 (rtx *px, void *)\n {\n   rtx x = *px;\n \n@@ -16068,7 +16057,7 @@ output_387_binary_op (rtx insn, rtx *operands)\n /* Check if a 256bit AVX register is referenced inside of EXP.   */\n \n static int\n-ix86_check_avx256_register (rtx *pexp, void *data ATTRIBUTE_UNUSED)\n+ix86_check_avx256_register (rtx *pexp, void *)\n {\n   rtx exp = *pexp;\n \n@@ -16196,7 +16185,7 @@ ix86_mode_needed (int entity, rtx insn)\n /* Check if a 256bit AVX register is referenced in stores.   */\n  \n static void\n-ix86_check_avx256_stores (rtx dest, const_rtx set ATTRIBUTE_UNUSED, void *data)\n+ix86_check_avx256_stores (rtx dest, const_rtx, void *data)\n  {\n    if (ix86_check_avx256_register (&dest, NULL))\n     {\n@@ -16324,7 +16313,7 @@ ix86_mode_exit (int entity)\n }\n \n static int\n-ix86_mode_priority (int entity ATTRIBUTE_UNUSED, int n)\n+ix86_mode_priority (int, int n)\n {\n   return n;\n }\n@@ -18577,8 +18566,8 @@ ix86_dep_by_shift_count (const_rtx set_insn, const_rtx use_insn)\n    appropriate constraints.  */\n \n bool\n-ix86_unary_operator_ok (enum rtx_code code ATTRIBUTE_UNUSED,\n-\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n+ix86_unary_operator_ok (enum rtx_code,\n+\t\t\tenum machine_mode,\n \t\t\trtx operands[2])\n {\n   /* If one of operands is memory, source and destination must match.  */\n@@ -18732,8 +18721,7 @@ ix86_expand_convert_uns_didf_sse (rtx target, rtx input)\n \n /* Not used, but eases macroization of patterns.  */\n void\n-ix86_expand_convert_uns_sixf_sse (rtx target ATTRIBUTE_UNUSED,\n-\t\t\t\t  rtx input ATTRIBUTE_UNUSED)\n+ix86_expand_convert_uns_sixf_sse (rtx, rtx)\n {\n   gcc_unreachable ();\n }\n@@ -19353,7 +19341,7 @@ ix86_expand_int_compare (enum rtx_code code, rtx op0, rtx op1)\n    Return the appropriate mode to use.  */\n \n enum machine_mode\n-ix86_fp_compare_mode (enum rtx_code code ATTRIBUTE_UNUSED)\n+ix86_fp_compare_mode (enum rtx_code)\n {\n   /* ??? In order to make all comparisons reversible, we do all comparisons\n      non-trapping when compiling for IEEE.  Once gcc is able to distinguish\n@@ -19568,7 +19556,7 @@ ix86_fp_comparison_cost (enum rtx_code code)\n    (2 bytes, vs. 3 for fnstsw+sahf and at least 5 for fnstsw+test).  */\n \n enum ix86_fpcmp_strategy\n-ix86_fp_comparison_strategy (enum rtx_code code ATTRIBUTE_UNUSED)\n+ix86_fp_comparison_strategy (enum rtx_code)\n {\n   /* Do fcomi/sahf based test when profitable.  */\n \n@@ -26531,9 +26519,7 @@ core2i7_first_cycle_multipass_fini (void *_data)\n \n /* Prepare for scheduling pass.  */\n static void\n-ix86_sched_init_global (FILE *dump ATTRIBUTE_UNUSED,\n-\t\t\tint verbose ATTRIBUTE_UNUSED,\n-\t\t\tint max_uid ATTRIBUTE_UNUSED)\n+ix86_sched_init_global (FILE *, int, int)\n {\n   /* Install scheduling hooks for current CPU.  Some of these hooks are used\n      in time-critical parts of the scheduler, so we only set them up when\n@@ -32763,7 +32749,7 @@ ix86_init_builtins (void)\n /* Return the ix86 builtin for CODE.  */\n \n static tree\n-ix86_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n+ix86_builtin_decl (unsigned code, bool)\n {\n   if (code >= IX86_BUILTIN_MAX)\n     return error_mark_node;\n@@ -36915,8 +36901,7 @@ ix86_vectorize_builtin_gather (const_tree mem_vectype,\n    reciprocal of the function, or NULL_TREE if not available.  */\n \n static tree\n-ix86_builtin_reciprocal (unsigned int fn, bool md_fn,\n-\t\t\t bool sqrt ATTRIBUTE_UNUSED)\n+ix86_builtin_reciprocal (unsigned int fn, bool md_fn, bool)\n {\n   if (! (TARGET_SSE_MATH && !optimize_insn_for_size_p ()\n \t && flag_finite_math_only && !flag_trapping_math\n@@ -38528,7 +38513,7 @@ x86_order_regs_for_local_alloc (void)\n static tree\n ix86_handle_callee_pop_aggregate_return (tree *node, tree name,\n \t\t\t\t\t      tree args,\n-\t\t\t\t\t      int flags ATTRIBUTE_UNUSED,\n+\t\t\t\t\t      int,\n \t\t\t\t\t      bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE\n@@ -38578,9 +38563,8 @@ ix86_handle_callee_pop_aggregate_return (tree *node, tree name,\n /* Handle a \"ms_abi\" or \"sysv\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n-ix86_handle_abi_attribute (tree *node, tree name,\n-\t\t\t      tree args ATTRIBUTE_UNUSED,\n-\t\t\t      int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+ix86_handle_abi_attribute (tree *node, tree name, tree, int,\n+\t\t\t   bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE\n       && TREE_CODE (*node) != METHOD_TYPE\n@@ -38619,9 +38603,8 @@ ix86_handle_abi_attribute (tree *node, tree name,\n /* Handle a \"ms_struct\" or \"gcc_struct\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n-ix86_handle_struct_attribute (tree *node, tree name,\n-\t\t\t      tree args ATTRIBUTE_UNUSED,\n-\t\t\t      int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+ix86_handle_struct_attribute (tree *node, tree name, tree, int,\n+\t\t\t      bool *no_add_attrs)\n {\n   tree *type = NULL;\n   if (DECL_P (*node))\n@@ -38653,9 +38636,8 @@ ix86_handle_struct_attribute (tree *node, tree name,\n }\n \n static tree\n-ix86_handle_fndecl_attribute (tree *node, tree name,\n-                              tree args ATTRIBUTE_UNUSED,\n-                              int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+ix86_handle_fndecl_attribute (tree *node, tree name, tree, int,\n+\t\t\t      bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n@@ -38733,9 +38715,8 @@ x86_this_parameter (tree function)\n /* Determine whether x86_output_mi_thunk can succeed.  */\n \n static bool\n-x86_can_output_mi_thunk (const_tree thunk ATTRIBUTE_UNUSED,\n-\t\t\t HOST_WIDE_INT delta ATTRIBUTE_UNUSED,\n-\t\t\t HOST_WIDE_INT vcall_offset, const_tree function)\n+x86_can_output_mi_thunk (const_tree, HOST_WIDE_INT, HOST_WIDE_INT vcall_offset,\n+\t\t\t const_tree function)\n {\n   /* 64-bit can handle anything.  */\n   if (TARGET_64BIT)\n@@ -38764,8 +38745,7 @@ x86_can_output_mi_thunk (const_tree thunk ATTRIBUTE_UNUSED,\n    *(*this + vcall_offset) should be added to THIS.  */\n \n static void\n-x86_output_mi_thunk (FILE *file,\n-\t\t     tree thunk ATTRIBUTE_UNUSED, HOST_WIDE_INT delta,\n+x86_output_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n \t\t     HOST_WIDE_INT vcall_offset, tree function)\n {\n   rtx this_param = x86_this_parameter (function);\n@@ -39419,7 +39399,7 @@ x86_extended_QIreg_mentioned_p (rtx insn)\n /* Return nonzero when P points to register encoded via REX prefix.\n    Called via for_each_rtx.  */\n static int\n-extended_reg_mentioned_1 (rtx *p, void *data ATTRIBUTE_UNUSED)\n+extended_reg_mentioned_1 (rtx *p, void *)\n {\n    unsigned int regno;\n    if (!REG_P (*p))\n@@ -41165,9 +41145,7 @@ ix86_c_mode_for_suffix (char suffix)\n    with the old cc0-based compiler.  */\n \n static tree\n-ix86_md_asm_clobbers (tree outputs ATTRIBUTE_UNUSED,\n-\t\t      tree inputs ATTRIBUTE_UNUSED,\n-\t\t      tree clobbers)\n+ix86_md_asm_clobbers (tree, tree, tree clobbers)\n {\n   clobbers = tree_cons (NULL_TREE, build_string (5, \"flags\"),\n \t\t\tclobbers);\n@@ -42374,8 +42352,7 @@ static const struct attribute_spec ix86_attribute_table[] =\n /* Implement targetm.vectorize.builtin_vectorization_cost.  */\n static int\n ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n-                                 tree vectype,\n-                                 int misalign ATTRIBUTE_UNUSED)\n+                                 tree vectype, int)\n {\n   unsigned elements;\n \n@@ -46421,8 +46398,7 @@ has_dispatch (rtx insn, int action)\n    enabled for other processors.  */\n \n static int\n-ix86_reassociation_width (unsigned int opc ATTRIBUTE_UNUSED,\n-\t\t\t  enum machine_mode mode)\n+ix86_reassociation_width (unsigned int, enum machine_mode mode)\n {\n   int res = 1;\n \n@@ -46519,7 +46495,7 @@ ix86_spill_class (reg_class_t rclass, enum machine_mode mode)\n /* Implement targetm.vectorize.init_cost.  */\n \n static void *\n-ix86_init_cost (struct loop *loop_info ATTRIBUTE_UNUSED)\n+ix86_init_cost (struct loop *)\n {\n   unsigned *cost = XNEWVEC (unsigned, 3);\n   cost[vect_prologue] = cost[vect_body] = cost[vect_epilogue] = 0;"}, {"sha": "85a314114f53f9eb3821bcff2c0482c2c809e5f7", "filename": "gcc/config/i386/winnt-stubs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2Fconfig%2Fi386%2Fwinnt-stubs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2Fconfig%2Fi386%2Fwinnt-stubs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt-stubs.c?ref=997ef9e7389f4962edc8c504a3d9753ab806ed6f", "patch": "@@ -33,19 +33,19 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n \n bool\n-i386_pe_type_dllimport_p (tree decl ATTRIBUTE_UNUSED)\n+i386_pe_type_dllimport_p (tree)\n {\n   return false;\n }\n \n \n bool\n-i386_pe_type_dllexport_p (tree decl ATTRIBUTE_UNUSED)\n+i386_pe_type_dllexport_p (tree)\n {\n   return false;\n }\n \n \n void\n-i386_pe_adjust_class_at_definition (tree t ATTRIBUTE_UNUSED)\n+i386_pe_adjust_class_at_definition (tree)\n { }"}, {"sha": "bf6e2b1fec2aebd7349ecf05b1d371e573cb6609", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ef9e7389f4962edc8c504a3d9753ab806ed6f/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=997ef9e7389f4962edc8c504a3d9753ab806ed6f", "patch": "@@ -66,9 +66,8 @@ along with GCC; see the file COPYING3.  If not see\n /* Handle a \"shared\" attribute;\n    arguments as in struct attribute_spec.handler.  */\n tree\n-ix86_handle_shared_attribute (tree *node, tree name,\n-\t\t\t      tree args ATTRIBUTE_UNUSED,\n-\t\t\t      int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+ix86_handle_shared_attribute (tree *node, tree name, tree, int,\n+\t\t\t      bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != VAR_DECL)\n     {\n@@ -83,9 +82,7 @@ ix86_handle_shared_attribute (tree *node, tree name,\n /* Handle a \"selectany\" attribute;\n    arguments as in struct attribute_spec.handler.  */\n tree\n-ix86_handle_selectany_attribute (tree *node, tree name,\n-\t\t\t         tree args ATTRIBUTE_UNUSED,\n-\t\t\t         int flags ATTRIBUTE_UNUSED,\n+ix86_handle_selectany_attribute (tree *node, tree name, tree, int,\n \t\t\t\t bool *no_add_attrs)\n {\n   /* The attribute applies only to objects that are initialized and have\n@@ -264,8 +261,7 @@ i386_pe_maybe_mangle_decl_assembler_name (tree decl, tree id)\n    user-specified visibility attributes.  */\n \n void\n-i386_pe_assemble_visibility (tree decl,\n-\t\t\t     int vis ATTRIBUTE_UNUSED)\n+i386_pe_assemble_visibility (tree decl, int)\n {\n   if (!decl\n       || !lookup_attribute (\"visibility\", DECL_ATTRIBUTES (decl)))\n@@ -292,7 +288,7 @@ i386_pe_mangle_decl_assembler_name (tree decl, tree id)\n    a file stream.  */\n \n tree\n-i386_pe_mangle_assembler_name (const char *name ATTRIBUTE_UNUSED)\n+i386_pe_mangle_assembler_name (const char *name)\n {\n   const char *skipped = name + (*name == '*' ? 1 : 0);\n   const char *stripped = targetm.strip_name_encoding (skipped);\n@@ -467,7 +463,7 @@ i386_pe_reloc_rw_mask (void)\n #define SECTION_PE_SHARED\tSECTION_MACH_DEP\n \n unsigned int\n-i386_pe_section_type_flags (tree decl, const char *name, int reloc)\n+i386_pe_section_type_flags (tree decl, const char *, int reloc)\n {\n   unsigned int flags;\n \n@@ -560,7 +556,7 @@ i386_pe_asm_named_section (const char *name, unsigned int flags,\n void\n i386_pe_asm_output_aligned_decl_common (FILE *stream, tree decl,\n \t\t\t\t\tconst char *name, HOST_WIDE_INT size,\n-\t\t\t\t\tHOST_WIDE_INT align ATTRIBUTE_UNUSED)\n+\t\t\t\t\tHOST_WIDE_INT align)\n {\n   HOST_WIDE_INT rounded;\n \n@@ -1276,8 +1272,7 @@ i386_pe_start_function (FILE *f, const char *name, tree decl)\n }\n \n void\n-i386_pe_end_function (FILE *f, const char *name ATTRIBUTE_UNUSED,\n-\t\t      tree decl ATTRIBUTE_UNUSED)\n+i386_pe_end_function (FILE *f, const char *, tree)\n {\n   i386_pe_seh_fini (f);\n }"}]}