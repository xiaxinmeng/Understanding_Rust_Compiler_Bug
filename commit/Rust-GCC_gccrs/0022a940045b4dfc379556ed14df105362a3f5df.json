{"sha": "0022a940045b4dfc379556ed14df105362a3f5df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyMmE5NDAwNDViNGRmYzM3OTU1NmVkMTRkZjEwNTM2MmEzZjVkZg==", "commit": {"author": {"name": "David Mosberger-Tang", "email": "davidm@mostang.com", "date": "1998-04-04T18:20:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-04-04T18:20:59Z"}, "message": "alpha.h (PRINT_OPERAND_PUNCT_VALID_P): Accept '(' for s/sv/svi.\n\n* alpha.h (PRINT_OPERAND_PUNCT_VALID_P): Accept '(' for s/sv/svi.\n* alpha.c (print_operand): Handle it.\n* alpha.md (fix_truncsfdi2): Use it.  Add earlyclobber pattern\nfor ALPHA_TP_INSN.\n(fix_truncdfdi2): Likewise.\n\nFrom-SVN: r18996", "tree": {"sha": "5cecfe7fd1faa6cd7e92662b7e4db125aa1a38e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cecfe7fd1faa6cd7e92662b7e4db125aa1a38e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0022a940045b4dfc379556ed14df105362a3f5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0022a940045b4dfc379556ed14df105362a3f5df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0022a940045b4dfc379556ed14df105362a3f5df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0022a940045b4dfc379556ed14df105362a3f5df/comments", "author": null, "committer": null, "parents": [{"sha": "092a4ef80c31a76cf3277019d673f4d43621a7c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092a4ef80c31a76cf3277019d673f4d43621a7c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092a4ef80c31a76cf3277019d673f4d43621a7c6"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "fc20ed2278f416b7d5891243d0ce250828874788", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0022a940045b4dfc379556ed14df105362a3f5df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0022a940045b4dfc379556ed14df105362a3f5df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0022a940045b4dfc379556ed14df105362a3f5df", "patch": "@@ -1,3 +1,11 @@\n+Sat Apr  4 18:07:16 1998  David Mosberger-Tang  (davidm@mostang.com)\n+\n+\t* alpha.h (PRINT_OPERAND_PUNCT_VALID_P): Accept '(' for s/sv/svi.\n+\t* alpha.c (print_operand): Handle it.\n+\t* alpha.md (fix_truncsfdi2): Use it.  Add earlyclobber pattern\n+\tfor ALPHA_TP_INSN.\n+\t(fix_truncdfdi2): Likewise.\n+\n Sat Apr  4 17:42:05 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* tree.h (sizetype_tab[2], sbitsizetype, ubitsizetype): Merge all"}, {"sha": "4c031e89bfa682f56814a0288315f81eb1174dbd", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0022a940045b4dfc379556ed14df105362a3f5df/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0022a940045b4dfc379556ed14df105362a3f5df/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=0022a940045b4dfc379556ed14df105362a3f5df", "patch": "@@ -2374,6 +2374,25 @@ print_operand (file, x, code)\n \tfputs (\"su\", file);\n       break;\n \n+    case '(':\n+      /* Generates trap-mode suffix for instructions that accept the\n+\t v, sv, and svi suffix.  The only instruction that needs this\n+\t is cvttq.  */\n+      switch (alpha_fptm)\n+\t{\n+\tcase ALPHA_FPTM_N:\n+\tcase ALPHA_FPTM_U:\n+\t  fputs (\"v\", file);\n+\t  break;\n+\tcase ALPHA_FPTM_SU:\n+\t  fputs (\"sv\", file);\n+\t  break;\n+\tcase ALPHA_FPTM_SUI:\n+\t  fputs (\"svi\", file);\n+\t  break;\n+\t}\n+      break;\n+\n     case ')':\n       /* Generates trap-mode suffix for instructions that accept the u, su,\n \t and sui suffix.  This is the bulk of the IEEE floating point"}, {"sha": "9c83d9975aa84d16e7b02ded9108f37468759804", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0022a940045b4dfc379556ed14df105362a3f5df/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0022a940045b4dfc379556ed14df105362a3f5df/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=0022a940045b4dfc379556ed14df105362a3f5df", "patch": "@@ -2139,6 +2139,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n    '\tGenerates trap-mode suffix for instructions that accept the\n         su suffix only (cmpt et al).\n \n+   (\tGenerates trap-mode suffix for instructions that accept the\n+\tv, sv, and svi suffix.  The only instruction that needs this\n+\tis cvttq.\n+\n    )    Generates trap-mode suffix for instructions that accept the\n \tu, su, and sui suffix.  This is the bulk of the IEEE floating\n \tpoint instructions (addt et al).\n@@ -2154,8 +2158,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n    */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n-  ((CODE) == '&' || (CODE) == '\\'' || (CODE) == ')' || (CODE) == '+'\t\\\n-   || (CODE) == ',' || (CODE) == '-')\n+  ((CODE) == '&' || (CODE) == '\\'' || (CODE) == '(' || (CODE) == ')'\t\\\n+   || (CODE) == '+' || (CODE) == ',' || (CODE) == '-')\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n "}, {"sha": "d54df8c8ee450cb14cbfea375ffec196b3e255bf", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0022a940045b4dfc379556ed14df105362a3f5df/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0022a940045b4dfc379556ed14df105362a3f5df/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=0022a940045b4dfc379556ed14df105362a3f5df", "patch": "@@ -1771,20 +1771,39 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&f\")\n+\t(fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n+  \"TARGET_FP && alpha_tp == ALPHA_TP_INSN\"\n+  \"cvt%-q%(c %R1,%0\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"trap\" \"yes\")])\n+\n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n \t(fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"cvt%-qc %R1,%0\"\n-  [(set_attr \"type\" \"fadd\")])\n+  \"cvt%-q%(c %R1,%0\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"trap\" \"yes\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&f\")\n+\t(fix:DI (float_extend:DF\n+\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))))]\n+  \"TARGET_FP && alpha_tp == ALPHA_TP_INSN\"\n+  \"cvt%-q%(c %R1,%0\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"trap\" \"yes\")])\n \n (define_insn \"fix_truncsfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n \t(fix:DI (float_extend:DF\n \t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))))]\n   \"TARGET_FP\"\n-  \"cvt%-qc %R1,%0\"\n-  [(set_attr \"type\" \"fadd\")])\n+  \"cvt%-q%(c %R1,%0\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"trap\" \"yes\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")"}]}