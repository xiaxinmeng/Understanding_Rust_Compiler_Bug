{"sha": "9f0df97afb590e40479e33806208870ad331467c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwZGY5N2FmYjU5MGU0MDQ3OWUzMzgwNjIwODg3MGFkMzMxNDY3Yw==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2004-09-07T19:39:06Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2004-09-07T19:39:06Z"}, "message": "config.gcc: Added support for --with-divide=[breaks|traps] for mips targets.\n\n2004-09-07  David Daney  <ddaney@avtrex.com>\n\n\t* config.gcc: Added support for --with-divide=[breaks|traps] for\n\tmips targets.\n\t* config/mips/mips.h (MASK_DIVIDE_BREAKS): New target_flags bit.\n\t(TARGET_DIVIDE_TRAPS): New macro.\n\t(TARGET_SWITCHES): Added -mdivide-traps and -mdivide-breaks.\n\t(OPTION_DEFAULT_SPECS): Added --with-divide= support.\n\t* config/mips/mips.c (mips_idiv_insns): Generate proper count on\n\tGENERATE_DIVIDE_TRAPS.\n\t(mips_output_division): Emit conditional trap if\n\tGENERATE_DIVIDE_TRAPS is set.\n\t* doc/install.texi: Document --with-divide.\n\t* doc/invoke.texi: Document -mdivide-traps and -mdivide-breaks.\n\nFrom-SVN: r87153", "tree": {"sha": "e327d4edd9f01ed94fe9589e1ab018e6777aba69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e327d4edd9f01ed94fe9589e1ab018e6777aba69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f0df97afb590e40479e33806208870ad331467c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0df97afb590e40479e33806208870ad331467c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0df97afb590e40479e33806208870ad331467c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0df97afb590e40479e33806208870ad331467c/comments", "author": null, "committer": null, "parents": [{"sha": "9beb1c849ed6e852b744057cddd870c0511ecafe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9beb1c849ed6e852b744057cddd870c0511ecafe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9beb1c849ed6e852b744057cddd870c0511ecafe"}], "stats": {"total": 99, "additions": 93, "deletions": 6}, "files": [{"sha": "476069b3d4f5171d2aabc2ba9d6bf99e7013b6d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0df97afb590e40479e33806208870ad331467c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0df97afb590e40479e33806208870ad331467c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f0df97afb590e40479e33806208870ad331467c", "patch": "@@ -1,3 +1,18 @@\n+2004-09-07  David Daney  <ddaney@avtrex.com>\n+\n+\t* config.gcc: Added support for --with-divide=[breaks|traps] for\n+\tmips targets.\n+\t* config/mips/mips.h (MASK_DIVIDE_BREAKS): New target_flags bit.\n+\t(TARGET_DIVIDE_TRAPS): New macro.\n+\t(TARGET_SWITCHES): Added -mdivide-traps and -mdivide-breaks.\n+\t(OPTION_DEFAULT_SPECS): Added --with-divide= support.\n+\t* config/mips/mips.c (mips_idiv_insns): Generate proper count on\n+\tGENERATE_DIVIDE_TRAPS.\n+\t(mips_output_division): Emit conditional trap if\n+\tGENERATE_DIVIDE_TRAPS is set.\n+\t* doc/install.texi: Document --with-divide.\n+\t* doc/invoke.texi: Document -mdivide-traps and -mdivide-breaks.\n+\n 2004-09-07  Caroline Tice  <ctice@apple.com>\n \n \t* cfgrtl.c (rtl_verify_flow_info_1):  Add new edge flag,"}, {"sha": "3c5b84583567da6beeb65a3848851c2e28d04027", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0df97afb590e40479e33806208870ad331467c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0df97afb590e40479e33806208870ad331467c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9f0df97afb590e40479e33806208870ad331467c", "patch": "@@ -2425,7 +2425,7 @@ fi\n \t\t;;\n \n \tmips*-*-*)\n-\t\tsupported_defaults=\"abi arch float tune\"\n+\t\tsupported_defaults=\"abi arch float tune divide\"\n \n \t\tcase ${with_float} in\n \t\t\"\" | soft | hard)\n@@ -2446,6 +2446,15 @@ fi\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n+\n+\t\tcase ${with_divide} in\n+\t\t\"\" | breaks | traps)\n+\t\t\t# OK\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unknown division check type use in --with-divide=$with_divide\" 1>&2\n+\t\t\texit 1\n+\t\tesac\n \t\t;;\n \n \tpowerpc*-*-* | rs6000-*-*)\n@@ -2687,7 +2696,7 @@ fi\n \tesac\n \n \tt=\n-\tall_defaults=\"abi cpu arch tune schedule float mode fpu\"\n+\tall_defaults=\"abi cpu arch tune schedule float mode fpu divide\"\n \tfor option in $all_defaults\n \tdo\n \t\teval \"val=\\$with_$option\""}, {"sha": "ea0eb7b41f3b1a685b5249a372676628a9ad4f9c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0df97afb590e40479e33806208870ad331467c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0df97afb590e40479e33806208870ad331467c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9f0df97afb590e40479e33806208870ad331467c", "patch": "@@ -1375,7 +1375,13 @@ mips_idiv_insns (void)\n \n   count = 1;\n   if (TARGET_CHECK_ZERO_DIV)\n-    count += 2;\n+    {\n+      if (GENERATE_DIVIDE_TRAPS)\n+        count++;\n+      else\n+        count += 2;\n+    }\n+  \n   if (TARGET_FIX_R4000 || TARGET_FIX_R4400)\n     count++;\n   return count;\n@@ -8805,6 +8811,11 @@ mips_output_division (const char *division, rtx *operands)\n \t  output_asm_insn (s, operands);\n \t  s = \"bnez\\t%2,1f\\n\\tbreak\\t7\\n1:\";\n \t}\n+      else if (GENERATE_DIVIDE_TRAPS)\n+        {\n+\t  output_asm_insn (s, operands);\n+\t  s = \"teq\\t%2,%.,7\";\n+        }\n       else\n \t{\n \t  output_asm_insn (\"%(bne\\t%2,%.,1f\", operands);"}, {"sha": "f9104bdff4d6e4d0ee23299ecc9842d5daa709ec", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0df97afb590e40479e33806208870ad331467c/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0df97afb590e40479e33806208870ad331467c/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=9f0df97afb590e40479e33806208870ad331467c", "patch": "@@ -160,7 +160,8 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define MASK_FIX_VR4120\t   0x01000000   /* Work around VR4120 errata.  */\n #define MASK_VR4130_ALIGN  0x02000000\t/* Perform VR4130 alignment opts.  */\n #define MASK_FP_EXCEPTIONS 0x04000000   /* FP exceptions are enabled.  */\n-\n+#define MASK_DIVIDE_BREAKS 0x08000000   /* Divide by zero check uses\n+                                           break instead of trap. */\n #define MASK_PAIRED_SINGLE 0x10000000   /* Support paired-single FPU.  */\n #define MASK_MIPS3D        0x20000000   /* Support MIPS-3D instructions.  */\n \n@@ -222,6 +223,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define TARGET_4300_MUL_FIX     ((target_flags & MASK_4300_MUL_FIX) != 0)\n \n #define TARGET_CHECK_ZERO_DIV   ((target_flags & MASK_NO_CHECK_ZERO_DIV) == 0)\n+#define TARGET_DIVIDE_TRAPS     ((target_flags & MASK_DIVIDE_BREAKS) == 0)\n \n #define TARGET_BRANCHLIKELY\t((target_flags & MASK_BRANCHLIKELY) != 0)\n \n@@ -632,6 +634,10 @@ extern const struct mips_cpu_info *mips_tune_info;\n      N_(\"Trap on integer divide by zero\")},\t\t\t\t\\\n   {\"no-check-zero-division\", MASK_NO_CHECK_ZERO_DIV,\t\t\t\\\n      N_(\"Don't trap on integer divide by zero\")},\t\t\t\\\n+  {\"divide-traps\", -MASK_DIVIDE_BREAKS,\t\t\t\t\t\\\n+     N_(\"Use trap to check for integer divide by zero\")},\t\t\\\n+  {\"divide-breaks\", MASK_DIVIDE_BREAKS,\t\t\t\t\t\\\n+     N_(\"Use break to check for integer divide by zero\")},\t\t\\\n   { \"branch-likely\",      MASK_BRANCHLIKELY,\t\t\t\t\\\n       N_(\"Use Branch Likely instructions, overriding default for arch\")}, \\\n   { \"no-branch-likely\",  -MASK_BRANCHLIKELY,\t\t\t\t\\\n@@ -782,13 +788,19 @@ extern const struct mips_cpu_info *mips_tune_info;\n    --with-tune is ignored if -mtune is specified.\n    --with-abi is ignored if -mabi is specified.\n    --with-float is ignored if -mhard-float or -msoft-float are\n-     specified.  */\n+     specified.\n+   --with-divide is ignored if -mdivide-traps or -mdivide-breaks are\n+     specified. */\n #define OPTION_DEFAULT_SPECS \\\n   {\"arch\", \"%{!march=*:%{mips16:-march=%(VALUE)}%{!mips*:-march=%(VALUE)}}\" }, \\\n   {\"tune\", \"%{!mtune=*:-mtune=%(VALUE)}\" }, \\\n   {\"abi\", \"%{!mabi=*:-mabi=%(VALUE)}\" }, \\\n-  {\"float\", \"%{!msoft-float:%{!mhard-float:-m%(VALUE)-float}}\" }\n+  {\"float\", \"%{!msoft-float:%{!mhard-float:-m%(VALUE)-float}}\" }, \\\n+  {\"divide\", \"%{!mdivide-traps:%{!mdivide-breaks:-mdivide-%(VALUE)}}\" }\n+\n \n+#define GENERATE_DIVIDE_TRAPS (TARGET_DIVIDE_TRAPS \\\n+                               && ISA_HAS_COND_TRAP)\n \n #define GENERATE_BRANCHLIKELY   (TARGET_BRANCHLIKELY                    \\\n \t\t\t\t && !TARGET_SR71K                       \\"}, {"sha": "01cbb47c25b294e238a74062e2077a96d8fa6baa", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0df97afb590e40479e33806208870ad331467c/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0df97afb590e40479e33806208870ad331467c/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=9f0df97afb590e40479e33806208870ad331467c", "patch": "@@ -959,6 +959,18 @@ options and for @option{-mhard-float} or @option{-msoft-float}.  As with\n @option{--with-cpu}, which switches will be accepted and acceptable values\n of the arguments depend on the target.\n \n+@item --with-divide=@var{type}\n+Specify how the compiler should generate code for checking for\n+division by zero.  This option is only supported on the MIPS target.\n+The possibilities for @var{type} are:\n+@table @code\n+@item traps\n+Division by zero checks use conditional traps (this is the default on\n+systems that support conditional traps).\n+@item breaks\n+Division by zero checks use the break instruction.\n+@end table\n+\n @item --enable-altivec\n Specify that the target supports AltiVec vector enhancements.  This\n option will adjust the ABI for AltiVec enhancements, as well as generate\n@@ -3201,6 +3213,16 @@ configure for @samp{mipsel-elf} as a workaround.  The\n @samp{mips*-*-linux*} target continues to use the MIPS II routines.  More\n work on this is expected in future releases.\n \n+MIPS systems check for division by zero (unless\n+@option{-mno-check-zero-division} is passed to the compiler) by\n+generating either a conditional trap or a break instruction.  Using\n+trap results in smaller code, but is only supported on MIPS II and\n+later.  Also, some versions of the Linux kernel have a bug that\n+prevents trap from generating the proper signal (SIGFPE).  To enable\n+the use of break, use the @option{--with-divide=breaks}\n+@command{configure} option when configuring GCC.  The default is to\n+use traps on systems that support them.\n+\n Cross-compilers for the Mips as target using the Mips assembler\n currently do not work, because the auxiliary programs\n @file{mips-tdump.c} and @file{mips-tfile.c} can't be compiled on"}, {"sha": "b757e269c27bf1c6e6de27482892f07febdd9a0b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0df97afb590e40479e33806208870ad331467c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0df97afb590e40479e33806208870ad331467c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9f0df97afb590e40479e33806208870ad331467c", "patch": "@@ -545,6 +545,7 @@ Objective-C and Objective-C++ Dialects}.\n -msplit-addresses  -mno-split-addresses  @gol\n -mexplicit-relocs  -mno-explicit-relocs  @gol\n -mcheck-zero-division  -mno-check-zero-division @gol\n+-mdivide-traps  -mdivide-breaks @gol\n -mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls @gol\n -mmad  -mno-mad  -mfused-madd  -mno-fused-madd  -nocpp @gol\n -mfix-r4000  -mno-fix-r4000  -mfix-r4400  -mno-fix-r4400 @gol\n@@ -9500,6 +9501,23 @@ to use an assembler that supports relocation operators.\n Trap (do not trap) on integer division by zero.  The default is\n @option{-mcheck-zero-division}.\n \n+@item -mdivide-traps\n+@itemx -mdivide-breaks\n+@opindex mdivide-traps\n+@opindex mdivide-breaks\n+MIPS systems check for division by zero by generating either a\n+conditional trap or a break instruction.  Using traps results in\n+smaller code, but is only supported on MIPS II and later.  Also, some\n+versions of the Linux kernel have a bug that prevents trap from\n+generating the proper signal (SIGFPE).  Use @option{-mdivide-traps} to\n+allow conditional traps on architectures that support them and\n+@option{-mdivide-breaks} to force the use of breaks.\n+\n+The default is usually @option{-mdivide-traps}, but this can be\n+overridden at configure time using @option{--with-divide=breaks}.\n+Divide-by-zero checks can be completely disabled using\n+@option{-mno-check-zero-division}.\n+\n @item -mmemcpy\n @itemx -mno-memcpy\n @opindex mmemcpy"}]}