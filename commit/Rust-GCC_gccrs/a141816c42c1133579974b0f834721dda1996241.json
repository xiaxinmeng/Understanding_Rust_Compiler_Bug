{"sha": "a141816c42c1133579974b0f834721dda1996241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE0MTgxNmM0MmMxMTMzNTc5OTc0YjBmODM0NzIxZGRhMTk5NjI0MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-10-19T18:15:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-19T18:15:49Z"}, "message": "gimple-low.c (struct lower_data): Add cannot_fallthru field.\n\n\t* gimple-low.c (struct lower_data): Add cannot_fallthru field.\n\t(lower_stmt) <GIMPLE_BIND>: Add comment.\n\t<GIMPLE_COND, GIMPLE_GOTO, GIMPLE_SWITCH>: Set cannot_fallthru to true\n\tand return.\n\t<GIMPLE_RETURN>: Remove the statement if cannot_fallthru is set.\n\tOtherwise lower it and set cannot_fallthru to true.\n\t<GIMPLE_TRY>: Update cannot_fallthru for GIMPLE_TRY_FINALLY and return.\n\t<GIMPLE_CATCH, GIMPLE_EH_FILTER>; Set cannot_fallthru to false.\n\t<GIMPLE_CALL>: Set cannot_fallthru to false for BUILT_IN_SETJMP and\n\tto true for a noreturn call.  Do not remove statements.\n\t<GIMPLE_OMP_PARALLEL, GIMPLE_OMP_TASK>: Set cannot_fallthru to false.\n\tSet cannot_fallthru to false on function exit.\n\t(gimple_stmt_may_fallthru) <GIMPLE_SWITCH>: Really return false.\n\t<GIMPLE_ASSIGN>: Remove.\n\nFrom-SVN: r152984", "tree": {"sha": "194961175bb99ae23489eb50577d4d2f4e2e31bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/194961175bb99ae23489eb50577d4d2f4e2e31bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a141816c42c1133579974b0f834721dda1996241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a141816c42c1133579974b0f834721dda1996241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a141816c42c1133579974b0f834721dda1996241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a141816c42c1133579974b0f834721dda1996241/comments", "author": null, "committer": null, "parents": [{"sha": "585ba38fd5ce6275d2dca6592867e8aa8106406b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585ba38fd5ce6275d2dca6592867e8aa8106406b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/585ba38fd5ce6275d2dca6592867e8aa8106406b"}], "stats": {"total": 128, "additions": 104, "deletions": 24}, "files": [{"sha": "9b854623228579a79ea3b616d6b4f57aada3f546", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a141816c42c1133579974b0f834721dda1996241/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a141816c42c1133579974b0f834721dda1996241/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a141816c42c1133579974b0f834721dda1996241", "patch": "@@ -1,3 +1,20 @@\n+2009-10-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple-low.c (struct lower_data): Add cannot_fallthru field.\n+\t(lower_stmt) <GIMPLE_BIND>: Add comment.\n+\t<GIMPLE_COND, GIMPLE_GOTO, GIMPLE_SWITCH>: Set cannot_fallthru to true\n+\tand return.\n+\t<GIMPLE_RETURN>: Remove the statement if cannot_fallthru is set.\n+\tOtherwise lower it and set cannot_fallthru to true.\n+\t<GIMPLE_TRY>: Update cannot_fallthru for GIMPLE_TRY_FINALLY and return.\n+\t<GIMPLE_CATCH, GIMPLE_EH_FILTER>; Set cannot_fallthru to false.\n+\t<GIMPLE_CALL>: Set cannot_fallthru to false for BUILT_IN_SETJMP and\n+\tto true for a noreturn call.  Do not remove statements.\n+\t<GIMPLE_OMP_PARALLEL, GIMPLE_OMP_TASK>: Set cannot_fallthru to false.\n+\tSet cannot_fallthru to false on function exit.\n+\t(gimple_stmt_may_fallthru) <GIMPLE_SWITCH>: Really return false.\n+\t<GIMPLE_ASSIGN>: Remove.\n+\n 2009-10-19  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (s390_z10_optimize_cmp): Don't touch FP compares."}, {"sha": "cce31e946ff543cbaa5f5eb32142699adb865a01", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 52, "deletions": 24, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a141816c42c1133579974b0f834721dda1996241/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a141816c42c1133579974b0f834721dda1996241/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=a141816c42c1133579974b0f834721dda1996241", "patch": "@@ -76,6 +76,9 @@ struct lower_data\n      of the function.  */\n   VEC(return_statements_t,heap) *return_statements;\n \n+  /* True if the current statement cannot fall through.  */\n+  bool cannot_fallthru;\n+\n   /* True if the function calls __builtin_setjmp.  */\n   bool calls_builtin_setjmp;\n };\n@@ -317,7 +320,12 @@ lower_omp_directive (gimple_stmt_iterator *gsi, struct lower_data *data)\n }\n \n \n-/* Lower statement GSI.  DATA is passed through the recursion.  */\n+/* Lower statement GSI.  DATA is passed through the recursion.  We try to\n+   track the fallthruness of statements and get rid of unreachable return\n+   statements in order to prevent the EH lowering pass from adding useless\n+   edges that can cause bogus warnings to be issued later; this guess need\n+   not be 100% accurate, simply be conservative and reset cannot_fallthru\n+   to false if we don't know.  */\n \n static void\n lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n@@ -330,36 +338,61 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n     {\n     case GIMPLE_BIND:\n       lower_gimple_bind (gsi, data);\n+      /* Propagate fallthruness.  */\n       return;\n \n     case GIMPLE_COND:\n-      /* The gimplifier has already lowered this into gotos.  */\n-      break;\n+    case GIMPLE_GOTO:\n+    case GIMPLE_SWITCH:\n+      data->cannot_fallthru = true;\n+      gsi_next (gsi);\n+      return;\n \n     case GIMPLE_RETURN:\n-      lower_gimple_return (gsi, data);\n+      if (data->cannot_fallthru)\n+\t{\n+\t  gsi_remove (gsi, false);\n+\t  /* Propagate fallthruness.  */\n+\t}\n+      else\n+\t{\n+\t  lower_gimple_return (gsi, data);\n+\t  data->cannot_fallthru = true;\n+\t}\n       return;\n \n     case GIMPLE_TRY:\n-      lower_sequence (gimple_try_eval (stmt), data);\n-      lower_sequence (gimple_try_cleanup (stmt), data);\n+      {\n+\tbool try_cannot_fallthru;\n+\tlower_sequence (gimple_try_eval (stmt), data);\n+\ttry_cannot_fallthru = data->cannot_fallthru;\n+\tdata->cannot_fallthru = false;\n+\tlower_sequence (gimple_try_cleanup (stmt), data);\n+\t/* See gimple_stmt_may_fallthru for the rationale.  */\n+\tif (gimple_try_kind (stmt) == GIMPLE_TRY_FINALLY)\n+\t  {\n+\t    data->cannot_fallthru |= try_cannot_fallthru;\n+\t    gsi_next (gsi);\n+\t    return;\n+\t  }\n+      }\n       break;\n \n     case GIMPLE_CATCH:\n+      data->cannot_fallthru = false;\n       lower_sequence (gimple_catch_handler (stmt), data);\n       break;\n \n     case GIMPLE_EH_FILTER:\n+      data->cannot_fallthru = false;\n       lower_sequence (gimple_eh_filter_failure (stmt), data);\n       break;\n \n     case GIMPLE_NOP:\n     case GIMPLE_ASM:\n     case GIMPLE_ASSIGN:\n-    case GIMPLE_GOTO:\n     case GIMPLE_PREDICT:\n     case GIMPLE_LABEL:\n-    case GIMPLE_SWITCH:\n     case GIMPLE_EH_MUST_NOT_THROW:\n     case GIMPLE_OMP_FOR:\n     case GIMPLE_OMP_SECTIONS:\n@@ -383,35 +416,33 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n \t    && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n \t    && DECL_FUNCTION_CODE (decl) == BUILT_IN_SETJMP)\n \t  {\n-\t    data->calls_builtin_setjmp = true;\n \t    lower_builtin_setjmp (gsi);\n+\t    data->cannot_fallthru = false;\n+\t    data->calls_builtin_setjmp = true;\n \t    return;\n \t  }\n \n-\t/* After a noreturn call, remove a subsequent GOTO or RETURN that might\n-\t   have been mechanically added; this will prevent the EH lowering pass\n-\t   from adding useless edges and thus complicating the initial CFG.  */\n \tif (decl && (flags_from_decl_or_type (decl) & ECF_NORETURN))\n \t  {\n+\t    data->cannot_fallthru = true;\n \t    gsi_next (gsi);\n-\t    if (!gsi_end_p (*gsi)\n-\t\t&& (gimple_code (gsi_stmt (*gsi)) == GIMPLE_GOTO\n-\t\t    || gimple_code (gsi_stmt (*gsi)) == GIMPLE_RETURN))\n-\t      gsi_remove (gsi, false);\n \t    return;\n \t  }\n       }\n       break;\n \n     case GIMPLE_OMP_PARALLEL:\n     case GIMPLE_OMP_TASK:\n+      data->cannot_fallthru = false;\n       lower_omp_directive (gsi, data);\n+      data->cannot_fallthru = false;\n       return;\n \n     default:\n       gcc_unreachable ();\n     }\n \n+  data->cannot_fallthru = false;\n   gsi_next (gsi);\n }\n \n@@ -660,9 +691,9 @@ gimple_stmt_may_fallthru (gimple stmt)\n       return false;\n \n     case GIMPLE_SWITCH:\n-      /* Switch has already been lowered and represents a\n-\t branch to a selected label and hence can not fall through.  */\n-      return true;\n+      /* Switch has already been lowered and represents a branch\n+\t to a selected label and hence can't fall through.  */\n+      return false;\n \n     case GIMPLE_COND:\n       /* GIMPLE_COND's are already lowered into a two-way branch.  They\n@@ -688,13 +719,10 @@ gimple_stmt_may_fallthru (gimple stmt)\n       return (gimple_seq_may_fallthru (gimple_try_eval (stmt))\n \t      && gimple_seq_may_fallthru (gimple_try_cleanup (stmt)));\n \n-    case GIMPLE_ASSIGN:\n-      return true;\n-\n     case GIMPLE_CALL:\n       /* Functions that do not return do not fall through.  */\n       return (gimple_call_flags (stmt) & ECF_NORETURN) == 0;\n-    \n+\n     default:\n       return true;\n     }\n@@ -744,7 +772,7 @@ lower_gimple_return (gimple_stmt_iterator *gsi, struct lower_data *data)\n   gsi_remove (gsi, false);\n }\n \n-/* Lower a __builtin_setjmp TSI.\n+/* Lower a __builtin_setjmp GSI.\n \n    __builtin_setjmp is passed a pointer to an array of five words (not\n    all will be used on all machines).  It operates similarly to the C"}, {"sha": "1437ce664decc4d87036e5ecf7b9e675c57c1489", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a141816c42c1133579974b0f834721dda1996241/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a141816c42c1133579974b0f834721dda1996241/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a141816c42c1133579974b0f834721dda1996241", "patch": "@@ -1,3 +1,7 @@\n+2009-10-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/noreturn2.ad[sb]: New test.\n+\n 2009-10-19  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41755"}, {"sha": "5caf222f29bc55ec5d294cc0e8b2d33144dcef7c", "filename": "gcc/testsuite/gnat.dg/noreturn2.adb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a141816c42c1133579974b0f834721dda1996241/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a141816c42c1133579974b0f834721dda1996241/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn2.adb?ref=a141816c42c1133579974b0f834721dda1996241", "patch": "@@ -0,0 +1,23 @@\n+-- { dg-do compile }\n+\n+package body Noreturn2 is\n+\n+   procedure Raise_Exception_No_Defer (Message : String);\n+   pragma No_Return (Raise_Exception_No_Defer);\n+\n+   procedure Raise_From (X : Exception_Occurrence) is\n+      Occurrence_Message : constant String := Exception_Message (X);\n+   begin\n+      if Occurrence_Message = \"$\" then\n+         Raise_Exception_No_Defer (Occurrence_Message);\n+      else\n+         Raise_Exception_No_Defer (\"::\" & Occurrence_Message);\n+      end if;\n+   end;\n+\n+   procedure Raise_Exception_No_Defer (Message : String) is\n+   begin\n+     raise Program_Error;\n+   end;\n+\n+end Noreturn2;"}, {"sha": "1aaf4e9744678be49e34b84a4af1f60a4af75e21", "filename": "gcc/testsuite/gnat.dg/noreturn2.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a141816c42c1133579974b0f834721dda1996241/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a141816c42c1133579974b0f834721dda1996241/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn2.ads?ref=a141816c42c1133579974b0f834721dda1996241", "patch": "@@ -0,0 +1,8 @@\n+with Ada.Exceptions; use Ada.Exceptions;\n+\n+package Noreturn2 is\n+\n+   procedure Raise_From (X : Exception_Occurrence);\n+   pragma No_Return (Raise_From);\n+\n+end Noreturn2;"}]}