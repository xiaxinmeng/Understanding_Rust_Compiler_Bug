{"sha": "1cef3039b880a21fbdf4153e6fc42026619fd4ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNlZjMwMzliODgwYTIxZmJkZjQxNTNlNmZjNDIwMjY2MTlmZDRhZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-08-16T20:22:13Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-01T14:23:05Z"}, "message": "Objective-C, NeXT: Fix messenging non-aggregate return-in-memory.\n\nWhen a method returns a type that the platform ABI says should be\nreturned in memory, and that is done by a hidden 'sret' parameter,\nthe message send calls must be adjusted to inform the runtime that\nthe sret parameter is present.  As reported in the PR, this is not\nworking for non-aggregate types that use this mechanism.  The fix\nhere is to adjust the logic such that all return values that flag\n'in memory' are considered to use the mechanism *unless* they\nprovide a struct_value_rtx *and* the return object is an aggregate.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\nPR objc/101718 - Objective-C frontend emits wrong code to call methods returning scalar types returned in memory\n\n\tPR objc/101718\n\ngcc/objc/ChangeLog:\n\n\t* objc-next-runtime-abi-02.c (build_v2_build_objc_method_call):\n\tRevise for cases where scalar objects use an sret parameter.\n\t(next_runtime_abi_02_build_objc_method_call): Likwise.", "tree": {"sha": "5fcafffb91105d298d3dc780a29a00a105ceac28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fcafffb91105d298d3dc780a29a00a105ceac28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cef3039b880a21fbdf4153e6fc42026619fd4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cef3039b880a21fbdf4153e6fc42026619fd4ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cef3039b880a21fbdf4153e6fc42026619fd4ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cef3039b880a21fbdf4153e6fc42026619fd4ad/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8433baadec88e5f31fa141b6d78094e91256079d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8433baadec88e5f31fa141b6d78094e91256079d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8433baadec88e5f31fa141b6d78094e91256079d"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "9c35738a95cf89162720289e6e15d343f1918861", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cef3039b880a21fbdf4153e6fc42026619fd4ad/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cef3039b880a21fbdf4153e6fc42026619fd4ad/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=1cef3039b880a21fbdf4153e6fc42026619fd4ad", "patch": "@@ -1739,15 +1739,16 @@ build_v2_build_objc_method_call (int super, tree method_prototype,\n   /* Param list + 2 slots for object and selector.  */\n   vec_alloc (parms, nparm + 2);\n \n-  /* If we are returning a struct in memory, and the address\n-     of that memory location is passed as a hidden first\n-     argument, then change which messenger entry point this\n-     expr will call.  NB: Note that sender_cast remains\n-     unchanged (it already has a struct return type).  */\n-  if (!targetm.calls.struct_value_rtx (0, 0)\n-      && (TREE_CODE (ret_type) == RECORD_TYPE\n-\t  || TREE_CODE (ret_type) == UNION_TYPE)\n-      && targetm.calls.return_in_memory (ret_type, 0))\n+  /* If we are returning an item that must be returned in memory, and the\n+     target ABI does this by an invisible pointer provided as the first arg,\n+     we need to adjust the message signature to include this.  The second\n+     part of this excludes targets that provide some alternate scheme for\n+     structure returns.  */\n+  if (ret_type && !VOID_TYPE_P (ret_type)\n+      && targetm.calls.return_in_memory (ret_type, 0)\n+      && !(targetm.calls.struct_value_rtx (0, 0)\n+\t   && (TREE_CODE (ret_type) == RECORD_TYPE\n+\t       || TREE_CODE (ret_type) == UNION_TYPE)))\n     {\n       if (super)\n \tsender = umsg_id_super2_stret_fixup_decl;\n@@ -1849,10 +1850,12 @@ next_runtime_abi_02_build_objc_method_call (location_t loc,\n \t     ? TREE_VALUE (TREE_TYPE (method_prototype))\n \t     : objc_object_type;\n \n-  if (!targetm.calls.struct_value_rtx (0, 0)\n-      && (TREE_CODE (ret_type) == RECORD_TYPE\n-\t  || TREE_CODE (ret_type) == UNION_TYPE)\n-      && targetm.calls.return_in_memory (ret_type, 0))\n+  /* See comment for the fixup version above.  */\n+  if (ret_type && !VOID_TYPE_P (ret_type)\n+      && targetm.calls.return_in_memory (ret_type, 0)\n+      && !(targetm.calls.struct_value_rtx (0, 0)\n+\t   && (TREE_CODE (ret_type) == RECORD_TYPE\n+\t       || TREE_CODE (ret_type) == UNION_TYPE)))\n     {\n       if (super)\n \tmessage_func_decl = umsg_id_super2_stret_fixup_decl;"}]}