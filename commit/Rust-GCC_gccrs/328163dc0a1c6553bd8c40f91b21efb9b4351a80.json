{"sha": "328163dc0a1c6553bd8c40f91b21efb9b4351a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI4MTYzZGMwYTFjNjU1M2JkOGM0MGY5MWIyMWVmYjliNDM1MWE4MA==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2004-02-19T05:52:38Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2004-02-19T05:52:38Z"}, "message": "gcc.c (LIBGCC_SPEC): If REAL_LIBGCC_SPEC is defined...\n\n\t* gcc.c (LIBGCC_SPEC): If REAL_LIBGCC_SPEC is defined, and\n\tLIBGCC_SPEC isn't, set LIBGCC_SPEC to REAL_LIBGCC_SPEC.\n\t(init_gcc_spec): Don't define or call if REAL_LIBGCC_SPEC is\n\tdefined.  Instead use REAL_LIBGCC_SPEC, unmodifed, as the libgcc\n\tspec string.\n\t* doc/tm.texi (REAL_LIBGCC_SPEC): Document.\n\nFrom-SVN: r78072", "tree": {"sha": "d63bb9e0542c8e0ca57b196860b6d085ff143344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d63bb9e0542c8e0ca57b196860b6d085ff143344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/328163dc0a1c6553bd8c40f91b21efb9b4351a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328163dc0a1c6553bd8c40f91b21efb9b4351a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328163dc0a1c6553bd8c40f91b21efb9b4351a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328163dc0a1c6553bd8c40f91b21efb9b4351a80/comments", "author": null, "committer": null, "parents": [{"sha": "23aa7aba4a93d068bc75ed006066005e82c25c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23aa7aba4a93d068bc75ed006066005e82c25c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23aa7aba4a93d068bc75ed006066005e82c25c90"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "eb59a5e47e944cb542a7d6854423aaae49ac47f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328163dc0a1c6553bd8c40f91b21efb9b4351a80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328163dc0a1c6553bd8c40f91b21efb9b4351a80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=328163dc0a1c6553bd8c40f91b21efb9b4351a80", "patch": "@@ -1,3 +1,12 @@\n+2003-02-18  Matt Austern  <austern@apple.com>\n+\n+\t* gcc.c (LIBGCC_SPEC): If REAL_LIBGCC_SPEC is defined, and\n+\tLIBGCC_SPEC isn't, set LIBGCC_SPEC to REAL_LIBGCC_SPEC.\n+\t(init_gcc_spec): Don't define or call if REAL_LIBGCC_SPEC is\n+\tdefined.  Instead use REAL_LIBGCC_SPEC, unmodifed, as the libgcc\n+\tspec string.\n+\t* doc/tm.texi (REAL_LIBGCC_SPEC): Document.\n+\t\n 2004-02-18  Zack Weinberg  <zack@codesourcery.com>\n \n \t* dwarf2out.c (loclabel_num): Move outside #ifdef"}, {"sha": "395eec808933dbaa1a5cc31402f5b610a40c00e8", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328163dc0a1c6553bd8c40f91b21efb9b4351a80/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328163dc0a1c6553bd8c40f91b21efb9b4351a80/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=328163dc0a1c6553bd8c40f91b21efb9b4351a80", "patch": "@@ -293,6 +293,18 @@ If this macro is not defined, the GCC driver provides a default that\n passes the string @option{-lgcc} to the linker.\n @end defmac\n \n+@defmac REAL_LIBGCC_SPEC\n+By default, if @code{ENABLE_SHARED_LIBGCC} is defined, the\n+@code{LIBGCC_SPEC} is not directly used by the driver program but is\n+instead modified to refer to different versions of @file{libgcc.a}\n+depending on the values of the command line flags @code{-static},\n+@code{-shared}, @code{-static-libgcc}, and @code{-shared-libgcc}.  On\n+targets where these modifications are inappropriate, define\n+@code{REAL_LIBGCC_SPEC} instead.  @code{REAL_LIBGCC_SPEC} tells the\n+driver how to place a reference to @file{libgcc} on the link command\n+line, but, unlike @code{LIBGCC_SPEC}, it is used unmodified.\n+@end defmac\n+\n @defmac STARTFILE_SPEC\n Another C string constant used much like @code{LINK_SPEC}.  The\n difference between the two is that @code{STARTFILE_SPEC} is used at"}, {"sha": "ebefeb876abf906578b6a3ac315e58136701b282", "filename": "gcc/gcc.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328163dc0a1c6553bd8c40f91b21efb9b4351a80/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328163dc0a1c6553bd8c40f91b21efb9b4351a80/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=328163dc0a1c6553bd8c40f91b21efb9b4351a80", "patch": "@@ -345,7 +345,7 @@ static int execute (void);\n static void alloc_args (void);\n static void clear_args (void);\n static void fatal_error (int);\n-#ifdef ENABLE_SHARED_LIBGCC\n+#if defined(ENABLE_SHARED_LIBGCC) && !defined(REAL_LIBGCC_SPEC)\n static void init_gcc_specs (struct obstack *, const char *, const char *,\n \t\t\t    const char *);\n #endif\n@@ -598,7 +598,9 @@ proper position among the other output files.  */\n /* config.h can define LIBGCC_SPEC to override how and when libgcc.a is\n    included.  */\n #ifndef LIBGCC_SPEC\n-#if defined(LINK_LIBGCC_SPECIAL) || defined(LINK_LIBGCC_SPECIAL_1)\n+#if defined(REAL_LIBGCC_SPEC)\n+#define LIBGCC_SPEC REAL_LIBGCC_SPEC\n+#elif defined(LINK_LIBGCC_SPECIAL) || defined(LINK_LIBGCC_SPECIAL_1)\n /* Have gcc do the search for libgcc.a.  */\n #define LIBGCC_SPEC \"libgcc.a%s\"\n #else\n@@ -1522,7 +1524,7 @@ static int processing_spec_function;\n /* Add appropriate libgcc specs to OBSTACK, taking into account\n    various permutations of -shared-libgcc, -shared, and such.  */\n \n-#ifdef ENABLE_SHARED_LIBGCC\n+#if defined(ENABLE_SHARED_LIBGCC) && !defined(REAL_LIBGCC_SPEC)\n static void\n init_gcc_specs (struct obstack *obstack, const char *shared_name,\n \t\tconst char *static_name, const char *eh_name)\n@@ -1589,7 +1591,7 @@ init_spec (void)\n       next = sl;\n     }\n \n-#ifdef ENABLE_SHARED_LIBGCC\n+#if defined(ENABLE_SHARED_LIBGCC) && !defined(REAL_LIBGCC_SPEC)\n   /* ??? If neither -shared-libgcc nor --static-libgcc was\n      seen, then we should be making an educated guess.  Some proposed\n      heuristics for ELF include:"}]}