{"sha": "ffd49b199552cec6f047e3592605bd8c542adf09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZkNDliMTk5NTUyY2VjNmYwNDdlMzU5MjYwNWJkOGM1NDJhZGYwOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-31T09:16:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-31T09:16:31Z"}, "message": "pt.c (coerce_template_parms): Refactor.\n\ncp:\n\t* pt.c (coerce_template_parms): Refactor.\n\t(fn_type_unification): Increment processing_template_decl when\n\ttsubsting an incomplete set of explicit args.\ntestsuite:\n\t* g++.dg/template/explicit3.C: New.\n\t* g++.dg/template/explicit4.C: New.\n\t* g++.dg/template/explicit5.C: New.\n\nFrom-SVN: r69995", "tree": {"sha": "627651a96158d5f69aa71b9d5501ce427f0774c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/627651a96158d5f69aa71b9d5501ce427f0774c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffd49b199552cec6f047e3592605bd8c542adf09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd49b199552cec6f047e3592605bd8c542adf09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffd49b199552cec6f047e3592605bd8c542adf09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd49b199552cec6f047e3592605bd8c542adf09/comments", "author": null, "committer": null, "parents": [{"sha": "fb5ce3c93a8f904d786aed712e5df6f0d53f0241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5ce3c93a8f904d786aed712e5df6f0d53f0241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5ce3c93a8f904d786aed712e5df6f0d53f0241"}], "stats": {"total": 95, "additions": 78, "deletions": 17}, "files": [{"sha": "bc4eaf7647a918b8dada60ea478d77ad375841df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ffd49b199552cec6f047e3592605bd8c542adf09", "patch": "@@ -1,5 +1,9 @@\n 2003-07-31  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* pt.c (coerce_template_parms): Refactor.\n+\t(fn_type_unification): Increment processing_template_decl when\n+\ttsubsting an incomplete set of explicit args.\n+\n \tPR c++/11347\n \t* pt.c (instantiate_class_template): Increment\n \tprocessing_template_decl around the tsubst of a template member"}, {"sha": "9661ea3414fcc75736d2dc9f46845f768281e53a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ffd49b199552cec6f047e3592605bd8c542adf09", "patch": "@@ -3639,24 +3639,16 @@ coerce_template_parms (tree parms,\n \t}\n       else if (i < nargs)\n \targ = TREE_VEC_ELT (inner_args, i);\n-      else\n-        /* If no template argument was supplied, look for a default\n-\t   value.  */\n+      else if (require_all_arguments)\n+\t/* There must be a default arg in this case. */\n \targ = tsubst_template_arg (TREE_PURPOSE (parm), new_args,\n \t\t\t\t   complain, in_decl);\n-\n-      /* Now, convert the Ith argument, as necessary.  */\n-      if (arg == NULL_TREE)\n-\t/* We're out of arguments.  */\n-\t{\n-\t  my_friendly_assert (!require_all_arguments, 0);\n-\t  break;\n-\t}\n-      else if (arg == error_mark_node)\n-\t{\n-\t  error (\"template argument %d is invalid\", i + 1);\n-\t  arg = error_mark_node;\n-\t}\n+      else\n+\tbreak;\n+      \n+      my_friendly_assert (arg, 20030727);\n+      if (arg == error_mark_node)\n+\terror (\"template argument %d is invalid\", i + 1);\n       else \n \targ = convert_template_argument (TREE_VALUE (parm), \n \t\t\t\t\t arg, new_args, complain, i,\n@@ -8578,6 +8570,7 @@ fn_type_unification (tree fn,\n \t template results in an invalid type, type deduction fails.  */\n       int i;\n       tree converted_args;\n+      bool incomplete;\n \n       converted_args\n \t= (coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (fn), \n@@ -8586,12 +8579,22 @@ fn_type_unification (tree fn,\n       if (converted_args == error_mark_node)\n \treturn 1;\n \n+      /* Substitute the explicit args into the function type.  This is\n+         necessary so that, for instance, explicitly declared function\n+         arguments can match null pointed constants.  If we were given\n+         an incomplete set of explicit args, we must not do semantic\n+         processing during substitution as we could create partial\n+         instantiations.  */\n+      incomplete = NUM_TMPL_ARGS (explicit_targs) != NUM_TMPL_ARGS (targs);\n+      processing_template_decl += incomplete;\n       fntype = tsubst (fntype, converted_args, tf_none, NULL_TREE);\n+      processing_template_decl -= incomplete;\n+      \n       if (fntype == error_mark_node)\n \treturn 1;\n \n       /* Place the explicitly specified arguments in TARGS.  */\n-      for (i = 0; i < TREE_VEC_LENGTH (targs); i++)\n+      for (i = NUM_TMPL_ARGS (converted_args); i--;)\n \tTREE_VEC_ELT (targs, i) = TREE_VEC_ELT (converted_args, i);\n     }\n      "}, {"sha": "b3137c3c842c2266bee0b12e7e5900af6fa4c851", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffd49b199552cec6f047e3592605bd8c542adf09", "patch": "@@ -1,5 +1,9 @@\n 2003-07-31  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* g++.dg/template/explicit3.C: New.\n+\t* g++.dg/template/explicit4.C: New.\n+\t* g++.dg/template/explicit5.C: New.\n+\n \tPR c++/11347\n \t* g++.dg/template/memtmpl1.C: New.\n "}, {"sha": "49d0689a5152c04ed42909f6d7f235a95d7beada", "filename": "gcc/testsuite/g++.dg/template/explicit3.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit3.C?ref=ffd49b199552cec6f047e3592605bd8c542adf09", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 27 Jul 2003 <nathan@codesourcery.com>\n+\n+// Failed to spot specialization using a template-id expr\n+\n+template <int n> class A {};\n+template <int m> class R {};\n+\n+template <int n, int x> struct Trait { enum {m = n}; };\n+\n+template <int n, int x> R<Trait<n,x>::m> f(A<x>);\n+template <> R<Trait<1,1>::m> f<1>(A<1>) {return R<1>();}\n+\n+void Baz ()\n+{\n+  R<Trait<1,1>::m> (*ptr) (A<1>);\n+\n+  ptr = &f<1>;\n+  \n+}"}, {"sha": "3953f8fc78de582882d00a09d4935620693d0b93", "filename": "gcc/testsuite/g++.dg/template/explicit4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit4.C?ref=ffd49b199552cec6f047e3592605bd8c542adf09", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 27 Jul 2003 <nathan@codesourcery.com>\n+\n+// Failed to spot specialization using a template-id expr\n+\n+template <typename n> class A {};\n+template <int m> class R {};\n+\n+template <int n, int x> struct Trait { enum {m = n}; };\n+\n+template <typename n, typename x> R<Trait<1,1>::m> f(A<x>);\n+template <> R<Trait<1,1>::m> f<int>(A<int>) {return R<1>();}"}, {"sha": "a0e313354543689138e295ba98e8dc2ac39b1284", "filename": "gcc/testsuite/g++.dg/template/explicit5.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd49b199552cec6f047e3592605bd8c542adf09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit5.C?ref=ffd49b199552cec6f047e3592605bd8c542adf09", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 27 Jul 2003 <nathan@codesourcery.com>\n+\n+// Failed to spot specialization using a template-id expr\n+\n+template <typename n> class A {};\n+template <int m> class R {};\n+\n+template <typename n, typename x> struct Trait { enum {m = sizeof (n)}; };\n+\n+template <typename n, typename x> R<Trait<n,x>::m> f(A<x>);\n+template <> R<Trait<char,char>::m> f<char>(A<char>) {return R<1>();}"}]}