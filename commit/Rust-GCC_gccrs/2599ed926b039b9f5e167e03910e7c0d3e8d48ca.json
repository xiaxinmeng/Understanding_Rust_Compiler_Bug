{"sha": "2599ed926b039b9f5e167e03910e7c0d3e8d48ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU5OWVkOTI2YjAzOWI5ZjVlMTY3ZTAzOTEwZTdjMGQzZThkNDhjYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-08-29T18:46:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-08-29T18:46:32Z"}, "message": "dwarf2out.c (loc_by_reference): New function.\n\n\t* dwarf2out.c (loc_by_reference): New function.\n\t(add_location_or_const_value_attribute): Use it.\n\nFrom-SVN: r139776", "tree": {"sha": "5944c333e3042e97445ce64b35bbcb1bb34ee288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5944c333e3042e97445ce64b35bbcb1bb34ee288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2599ed926b039b9f5e167e03910e7c0d3e8d48ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2599ed926b039b9f5e167e03910e7c0d3e8d48ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2599ed926b039b9f5e167e03910e7c0d3e8d48ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2599ed926b039b9f5e167e03910e7c0d3e8d48ca/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04e74e0210b5399ca47aa46502994fc446420a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e74e0210b5399ca47aa46502994fc446420a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e74e0210b5399ca47aa46502994fc446420a91"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "a2263cc987f724d9bcee1c3379838b1109c84a4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599ed926b039b9f5e167e03910e7c0d3e8d48ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599ed926b039b9f5e167e03910e7c0d3e8d48ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2599ed926b039b9f5e167e03910e7c0d3e8d48ca", "patch": "@@ -1,5 +1,8 @@\n 2008-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* dwarf2out.c (loc_by_reference): New function.\n+\t(add_location_or_const_value_attribute): Use it.\n+\n \tPR fortran/23057\n \t* dwarf2out.c (gen_variable_die): Represent Fortran COMMON vars\n \tas DW_TAG_variable children of DW_TAG_common_block rather than"}, {"sha": "3291c3f1c0d14cba593118515613a124b05777a7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599ed926b039b9f5e167e03910e7c0d3e8d48ca/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599ed926b039b9f5e167e03910e7c0d3e8d48ca/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2599ed926b039b9f5e167e03910e7c0d3e8d48ca", "patch": "@@ -11591,6 +11591,32 @@ fortran_common (tree decl, HOST_WIDE_INT *value)\n   return cvar;\n }\n \n+/* Dereference a location expression LOC if DECL is passed by invisible\n+   reference.  */\n+\n+static dw_loc_descr_ref\n+loc_by_reference (dw_loc_descr_ref loc, tree decl)\n+{\n+  HOST_WIDE_INT size;\n+  enum dwarf_location_atom op;\n+\n+  if (loc == NULL)\n+    return NULL;\n+\n+  if ((TREE_CODE (decl) != PARM_DECL && TREE_CODE (decl) != RESULT_DECL)\n+      || !DECL_BY_REFERENCE (decl))\n+    return loc;\n+\n+  size = int_size_in_bytes (TREE_TYPE (decl));\n+  if (size > DWARF2_ADDR_SIZE || size == -1)\n+    return 0;\n+  else if (size == DWARF2_ADDR_SIZE)\n+    op = DW_OP_deref;\n+  else\n+    op = DW_OP_deref_size;\n+  add_loc_descr (&loc, new_loc_descr (op, size, 0));\n+  return loc;\n+}\n \n /* Generate *either* a DW_AT_location attribute or else a DW_AT_const_value\n    data attribute for a variable or a parameter.  We generate the\n@@ -11649,8 +11675,8 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl,\n       else\n \tinitialized = VAR_INIT_STATUS_INITIALIZED;\n \n-      list = new_loc_list (loc_descriptor (varloc, initialized),\n-\t\t\t   node->label, node->next->label, secname, 1);\n+      descr = loc_by_reference (loc_descriptor (varloc, initialized), decl);\n+      list = new_loc_list (descr, node->label, node->next->label, secname, 1);\n       node = node->next;\n \n       for (; node->next; node = node->next)\n@@ -11661,8 +11687,9 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl,\n \t    enum var_init_status initialized =\n \t      NOTE_VAR_LOCATION_STATUS (node->var_loc_note);\n \t    varloc = NOTE_VAR_LOCATION (node->var_loc_note);\n-\t    add_loc_descr_to_loc_list (&list,\n-\t\t\t\t       loc_descriptor (varloc, initialized),\n+\t    descr = loc_by_reference (loc_descriptor (varloc, initialized),\n+\t\t\t\t      decl);\n+\t    add_loc_descr_to_loc_list (&list, descr,\n \t\t\t\t       node->label, node->next->label, secname);\n \t  }\n \n@@ -11683,8 +11710,9 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl,\n \t\t\t\t\t   current_function_funcdef_no);\n \t      endname = ggc_strdup (label_id);\n \t    }\n-\t  add_loc_descr_to_loc_list (&list,\n-\t\t\t\t     loc_descriptor (varloc, initialized),\n+\t  descr = loc_by_reference (loc_descriptor (varloc, initialized),\n+\t\t\t\t    decl);\n+\t  add_loc_descr_to_loc_list (&list, descr,\n \t\t\t\t     node->label, endname, secname);\n \t}\n \n@@ -11714,6 +11742,7 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl,\n       descr = loc_descriptor (NOTE_VAR_LOCATION (node->var_loc_note), status);\n       if (descr)\n \t{\n+\t  descr = loc_by_reference (descr, decl);\n \t  add_AT_location_description (die, attr, descr);\n \t  return;\n \t}\n@@ -11724,6 +11753,7 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl,\n   descr = loc_descriptor_from_tree (decl);\n   if (descr)\n     {\n+      descr = loc_by_reference (descr, decl);\n       add_AT_location_description (die, attr, descr);\n       return;\n     }"}]}