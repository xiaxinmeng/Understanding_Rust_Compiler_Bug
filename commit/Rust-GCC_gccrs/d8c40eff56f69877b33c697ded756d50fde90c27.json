{"sha": "d8c40eff56f69877b33c697ded756d50fde90c27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhjNDBlZmY1NmY2OTg3N2IzM2M2OTdkZWQ3NTZkNTBmZGU5MGMyNw==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2017-09-04T10:16:37Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2017-09-04T10:16:37Z"}, "message": "optabs: ensure atomic_load/stores have compiler barriers\n\n\tPR rtl-optimization/57448\n\tPR target/67458\n\tPR target/81316\n\t* optabs.c (expand_atomic_load): Place compiler memory barriers if\n\tusing atomic_load pattern.\n\t(expand_atomic_store): Likewise.\ntestsuite/\n\t* gcc.dg/atomic/pr80640-2.c: New testcase.\n\t* gcc.dg/atomic/pr81316.c: New testcase.\n\nFrom-SVN: r251643", "tree": {"sha": "e4a696a0929438cfbf6c366ebc3ea949267a4f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4a696a0929438cfbf6c366ebc3ea949267a4f51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8c40eff56f69877b33c697ded756d50fde90c27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c40eff56f69877b33c697ded756d50fde90c27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8c40eff56f69877b33c697ded756d50fde90c27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c40eff56f69877b33c697ded756d50fde90c27/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fda57cb2dc323c7d387ab0df9de708c0889be0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fda57cb2dc323c7d387ab0df9de708c0889be0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fda57cb2dc323c7d387ab0df9de708c0889be0d"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "5102356fcd4936cb8a649f535a5fd50f70226061", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c40eff56f69877b33c697ded756d50fde90c27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c40eff56f69877b33c697ded756d50fde90c27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8c40eff56f69877b33c697ded756d50fde90c27", "patch": "@@ -1,3 +1,12 @@\n+2017-09-04  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/57448\n+\tPR target/67458\n+\tPR target/81316\n+\t* optabs.c (expand_atomic_load): Place compiler memory barriers if\n+\tusing atomic_load pattern.\n+\t(expand_atomic_store): Likewise.\n+\n 2017-09-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/81981"}, {"sha": "b65707080eee32385e370580a3039e034b6f66ca", "filename": "gcc/optabs.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c40eff56f69877b33c697ded756d50fde90c27/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c40eff56f69877b33c697ded756d50fde90c27/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d8c40eff56f69877b33c697ded756d50fde90c27", "patch": "@@ -6344,12 +6344,20 @@ expand_atomic_load (rtx target, rtx mem, enum memmodel model)\n   if (icode != CODE_FOR_nothing)\n     {\n       struct expand_operand ops[3];\n+      rtx_insn *last = get_last_insn ();\n+      if (is_mm_seq_cst (model))\n+\texpand_asm_memory_barrier ();\n \n       create_output_operand (&ops[0], target, mode);\n       create_fixed_operand (&ops[1], mem);\n       create_integer_operand (&ops[2], model);\n       if (maybe_expand_insn (icode, 3, ops))\n-\treturn ops[0].value;\n+\t{\n+\t  if (!is_mm_relaxed (model))\n+\t    expand_asm_memory_barrier ();\n+\t  return ops[0].value;\n+\t}\n+      delete_insns_since (last);\n     }\n \n   /* If the size of the object is greater than word size on this target,\n@@ -6394,11 +6402,19 @@ expand_atomic_store (rtx mem, rtx val, enum memmodel model, bool use_release)\n   icode = direct_optab_handler (atomic_store_optab, mode);\n   if (icode != CODE_FOR_nothing)\n     {\n+      rtx_insn *last = get_last_insn ();\n+      if (!is_mm_relaxed (model))\n+\texpand_asm_memory_barrier ();\n       create_fixed_operand (&ops[0], mem);\n       create_input_operand (&ops[1], val, mode);\n       create_integer_operand (&ops[2], model);\n       if (maybe_expand_insn (icode, 3, ops))\n-\treturn const0_rtx;\n+\t{\n+\t  if (is_mm_seq_cst (model))\n+\t    expand_asm_memory_barrier ();\n+\t  return const0_rtx;\n+\t}\n+      delete_insns_since (last);\n     }\n \n   /* If using __sync_lock_release is a viable alternative, try it."}, {"sha": "20b24b6faafa10e4e070574a7ac64409ba2d63df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c40eff56f69877b33c697ded756d50fde90c27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c40eff56f69877b33c697ded756d50fde90c27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8c40eff56f69877b33c697ded756d50fde90c27", "patch": "@@ -1,3 +1,11 @@\n+2017-09-04  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/57448\n+\tPR target/67458\n+\tPR target/81316\n+\t* gcc.dg/atomic/pr80640-2.c: New testcase.\n+\t* gcc.dg/atomic/pr81316.c: New testcase.\n+\n 2017-09-04  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/82052"}, {"sha": "a735054090dc43c1a4b29867b4dfa5dc9e2856b9", "filename": "gcc/testsuite/gcc.dg/atomic/pr80640-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c40eff56f69877b33c697ded756d50fde90c27/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c40eff56f69877b33c697ded756d50fde90c27/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640-2.c?ref=d8c40eff56f69877b33c697ded756d50fde90c27", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-pthread\" } */\n+/* { dg-require-effective-target pthread } */\n+\n+#include <pthread.h>\n+\n+static volatile int sem1;\n+static _Atomic  int sem2;\n+\n+static void *f(void *va)\n+{\n+  void **p = va;\n+  if (*p) return *p;\n+  sem1 = 1;\n+  while (!__atomic_load_n(&sem2, __ATOMIC_ACQUIRE));\n+  // GCC used to RTL-CSE this and the first load, causing 0 to be returned\n+  return *p;\n+}\n+\n+int main()\n+{\n+  void *p = 0;\n+  pthread_t thr;\n+  if (pthread_create(&thr, 0, f, &p))\n+    return 2;\n+  while (!sem1);\n+  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n+  p = &p;\n+  __atomic_store_n(&sem2, 1, __ATOMIC_RELEASE);\n+  pthread_join(thr, &p);\n+  return !p;\n+}"}, {"sha": "ef10095718ef865aa70561c0fa2fb0aa5d4d2b2d", "filename": "gcc/testsuite/gcc.dg/atomic/pr81316.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c40eff56f69877b33c697ded756d50fde90c27/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr81316.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c40eff56f69877b33c697ded756d50fde90c27/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr81316.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr81316.c?ref=d8c40eff56f69877b33c697ded756d50fde90c27", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-pthread\" } */\n+/* { dg-require-effective-target pthread } */\n+\n+#include <pthread.h>\n+#include <stdlib.h>\n+\n+static _Atomic int sem1;\n+\n+static void *f(void *va)\n+{\n+  void **p = va;\n+  while (!__atomic_load_n(&sem1, __ATOMIC_ACQUIRE));\n+  exit(!*p);\n+}\n+\n+int main(int argc)\n+{\n+  void *p = 0;\n+  pthread_t thr;\n+  if (pthread_create(&thr, 0, f, &p))\n+    return 2;\n+  // GCC used to RTL-DSE this store\n+  p = &p;\n+  __atomic_store_n(&sem1, 1, __ATOMIC_RELEASE);\n+  int r = -1;\n+  while (r < 0) asm(\"\":\"+r\"(r));\n+  return r;\n+}"}]}