{"sha": "2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFlYzViN2ExMmYwNmIwZWM0YzViNzk2OWFkNWViMDJjMTljZTNmZg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-01-21T02:23:10Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-01-21T02:23:10Z"}, "message": "(num_sign_bit_copies): Can handle paradoxical subreg only\nif LOAD_EXTEND_OP is defined to SIGN_EXTEND.\n\nFrom-SVN: r8787", "tree": {"sha": "08eba94211a6eecdf437496d9c454dc444a819c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08eba94211a6eecdf437496d9c454dc444a819c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff/comments", "author": null, "committer": null, "parents": [{"sha": "3fc347fa0d8064c6c7558648af4a51d1d476f834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc347fa0d8064c6c7558648af4a51d1d476f834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc347fa0d8064c6c7558648af4a51d1d476f834"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "3a16a70f06cca979d703eb6f0fd58f4c16f2a147", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff", "patch": "@@ -7139,14 +7139,22 @@ num_sign_bit_copies (x, mode)\n \t}\n \n #ifdef WORD_REGISTER_OPERATIONS\n+#ifdef LOAD_EXTEND_OP\n       /* For paradoxical SUBREGs on machines where all register operations\n \t affect the entire register, just look inside.  Note that we are\n \t passing MODE to the recursive call, so the number of sign bit copies\n \t will remain relative to that mode, not the inner mode.  */\n \n-      if (GET_MODE_SIZE (GET_MODE (x))\n-\t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n+      /* This works only if loads sign extend.  Otherwise, if we get a\n+\t reload for the inner part, it may be loaded from the stack, and\n+\t then we lose all sign bit copies that existed before the store\n+\t to the stack.  */\n+\n+      if ((GET_MODE_SIZE (GET_MODE (x))\n+\t   > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n+\t  && LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (x))) == SIGN_EXTEND)\n \treturn num_sign_bit_copies (SUBREG_REG (x), mode);\n+#endif\n #endif\n       break;\n "}]}