{"sha": "6fc8a30a41b42eab1cac59952a7d9b0515a091f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZjOGEzMGE0MWI0MmVhYjFjYWM1OTk1MmE3ZDliMDUxNWEwOTFmNw==", "commit": {"author": {"name": "Chris Demetriou", "email": "cgd@broadcom.com", "date": "2004-05-04T23:57:42Z"}, "committer": {"name": "Chris Demetriou", "email": "cgd@gcc.gnu.org", "date": "2004-05-04T23:57:42Z"}, "message": "mips.c (override_options): Default to no generation of branch-likely operations when...\n\n2004-05-04  Chris Demetriou  <cgd@broadcom.com>\n\n        * config/mips/mips.c (override_options): Default to no\n        generation of branch-likely operations when tuning for\n        CPUs where they tend to have a negative performance impact\n        (e.g., SB-1).\n\nFrom-SVN: r81494", "tree": {"sha": "37d43480e677291eb34de4571212734b61fd9071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37d43480e677291eb34de4571212734b61fd9071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fc8a30a41b42eab1cac59952a7d9b0515a091f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc8a30a41b42eab1cac59952a7d9b0515a091f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fc8a30a41b42eab1cac59952a7d9b0515a091f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc8a30a41b42eab1cac59952a7d9b0515a091f7/comments", "author": null, "committer": null, "parents": [{"sha": "2225a42a9eb6321a92b2112a676683b12ab01b85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2225a42a9eb6321a92b2112a676683b12ab01b85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2225a42a9eb6321a92b2112a676683b12ab01b85"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "75470508f01ae85f03119799fb8b843800c28506", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc8a30a41b42eab1cac59952a7d9b0515a091f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc8a30a41b42eab1cac59952a7d9b0515a091f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fc8a30a41b42eab1cac59952a7d9b0515a091f7", "patch": "@@ -1,3 +1,10 @@\n+2004-05-04  Chris Demetriou  <cgd@broadcom.com>\n+\n+\t* config/mips/mips.c (override_options): Default to no\n+\tgeneration of branch-likely operations when tuning for\n+\tCPUs where they tend to have a negative performance impact\n+\t(e.g., SB-1).\n+\n 2004-05-04  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* expr.c (store_constructor_field): Don't call store_constructor"}, {"sha": "d26626c99a51a77087f859236a776592cba8fa19", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc8a30a41b42eab1cac59952a7d9b0515a091f7/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc8a30a41b42eab1cac59952a7d9b0515a091f7/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6fc8a30a41b42eab1cac59952a7d9b0515a091f7", "patch": "@@ -4681,17 +4681,20 @@ override_options (void)\n \t architecture.\n \n \t By default, we enable use of Branch Likely instructions on\n-\t all architectures which support them except for MIPS32 and MIPS64\n-\t (i.e., the generic MIPS32 and MIPS64 ISAs, and processors which\n-\t implement them).\n+\t all architectures which support them with the following\n+\t exceptions: when creating MIPS32 or MIPS64 code, and when\n+\t tuning for architectures where their use tends to hurt\n+\t performance.\n \n \t The MIPS32 and MIPS64 architecture specifications say \"Software\n \t is strongly encouraged to avoid use of Branch Likely\n \t instructions, as they will be removed from a future revision\n \t of the [MIPS32 and MIPS64] architecture.\"  Therefore, we do not\n \t issue those instructions unless instructed to do so by\n \t -mbranch-likely.  */\n-      if (ISA_HAS_BRANCHLIKELY && !(ISA_MIPS32 || ISA_MIPS32R2 || ISA_MIPS64))\n+      if (ISA_HAS_BRANCHLIKELY\n+\t  && !(ISA_MIPS32 || ISA_MIPS32R2 || ISA_MIPS64)\n+\t  && !(TUNE_SB1))\n \ttarget_flags |= MASK_BRANCHLIKELY;\n       else\n \ttarget_flags &= ~MASK_BRANCHLIKELY;"}]}