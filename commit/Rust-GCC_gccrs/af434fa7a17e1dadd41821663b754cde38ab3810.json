{"sha": "af434fa7a17e1dadd41821663b754cde38ab3810", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0MzRmYTdhMTdlMWRhZGQ0MTgyMTY2M2I3NTRjZGUzOGFiMzgxMA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2004-05-10T16:21:08Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2004-05-10T16:21:08Z"}, "message": "parse.y (create_class): Set TYPE_VFIELD.\n\n2004-05-10  Andrew Haley  <aph@redhat.com>\n\n\t* parse.y (create_class): Set TYPE_VFIELD.\n\t* decl.c (java_init_decl_processing): Likewise.\n\n\t* expr.c (build_invokevirtual): Remove DECL_VINDEX offset adjustment.\n\t* class.c (make_method_value): Replace DECL_VINDEX with call to\n\tget_method_index().\n\t(get_dispatch_vector): Likewise.\n\t(layout_class_method): Likewise.\n\tReplace set of DECL_VINDEX with call to set_method_index().\n\t(set_method_index): New function.\n\t(get_method_index): New function.\n\t* java-tree.h (set_method_index): New function decl.\n\t(get_method_index): New function decl.\n\nFrom-SVN: r81672", "tree": {"sha": "3371d9b0ed0043b145595a1f169b8e3a0f013876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3371d9b0ed0043b145595a1f169b8e3a0f013876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af434fa7a17e1dadd41821663b754cde38ab3810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af434fa7a17e1dadd41821663b754cde38ab3810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af434fa7a17e1dadd41821663b754cde38ab3810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af434fa7a17e1dadd41821663b754cde38ab3810/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5950a3ac274c2c85e38a959e1231c75c564c9c2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5950a3ac274c2c85e38a959e1231c75c564c9c2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5950a3ac274c2c85e38a959e1231c75c564c9c2f"}], "stats": {"total": 101, "additions": 81, "deletions": 20}, "files": [{"sha": "25594a31db140347ef8bedf1c3db7f24faedc574", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=af434fa7a17e1dadd41821663b754cde38ab3810", "patch": "@@ -1,3 +1,19 @@\n+2004-05-10  Andrew Haley  <aph@redhat.com>\n+\n+\t* parse.y (create_class): Set TYPE_VFIELD.\n+\t* decl.c (java_init_decl_processing): Likewise.\n+\n+\t* expr.c (build_invokevirtual): Remove DECL_VINDEX offset adjustment.\n+\t* class.c (make_method_value): Replace DECL_VINDEX with call to\n+\tget_method_index().\n+\t(get_dispatch_vector): Likewise.\n+\t(layout_class_method): Likewise.\n+\tReplace set of DECL_VINDEX with call to set_method_index().\n+\t(set_method_index): New function.\n+\t(get_method_index): New function.\n+\t* java-tree.h (set_method_index): New function decl.\n+\t(get_method_index): New function decl.\n+\n 2004-05-10  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* parse.y (check_pkg_class_access): Add new argument"}, {"sha": "530b56f6cd832ec491b5fc24f8cdcaa3ada5fb6c", "filename": "gcc/java/class.c", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=af434fa7a17e1dadd41821663b754cde38ab3810", "patch": "@@ -476,6 +476,7 @@ set_super_info (int access_flags, tree this_class,\n   if (super_class)\n     total_supers++;\n \n+  TYPE_VFIELD (this_class) = TYPE_VFIELD (object_type_node);\n   TYPE_BINFO_BASETYPES (this_class) = make_tree_vec (total_supers);\n   if (super_class)\n     {\n@@ -1249,13 +1250,13 @@ make_method_value (tree mdecl)\n   tree class_decl;\n #define ACC_TRANSLATED          0x4000\n   int accflags = get_access_flags_from_decl (mdecl) | ACC_TRANSLATED;\n-  \n+\n   class_decl = DECL_CONTEXT (mdecl);\n   /* For interfaces, the index field contains the dispatch index. */\n   if (CLASS_INTERFACE (TYPE_NAME (class_decl)))\n     index = build_int_2 (get_interface_method_index (mdecl, class_decl), 0);\n-  else if (!flag_indirect_dispatch && DECL_VINDEX (mdecl) != NULL_TREE)\n-    index = DECL_VINDEX (mdecl);\n+  else if (!flag_indirect_dispatch && get_method_index (mdecl) != NULL_TREE)\n+    index = get_method_index (mdecl);\n   else\n     index = integer_minus_one_node;\n \n@@ -1343,10 +1344,12 @@ get_dispatch_vector (tree type)\n \n       for (method = TYPE_METHODS (type);  method != NULL_TREE;\n \t   method = TREE_CHAIN (method))\n-\tif (DECL_VINDEX (method) != NULL_TREE\n-\t    && host_integerp (DECL_VINDEX (method), 0))\n-\t  TREE_VEC_ELT (vtable, tree_low_cst (DECL_VINDEX (method), 0))\n-\t    = method;\n+\t{\n+\t  tree method_index = get_method_index (method);\n+\t  if (method_index != NULL_TREE\n+\t      && host_integerp (method_index, 0))\n+\t    TREE_VEC_ELT (vtable, tree_low_cst (method_index, 0)) = method;\n+\t}\n     }\n \n   return vtable;\n@@ -1425,6 +1428,42 @@ get_dispatch_table (tree type, tree this_class_addr)\n \t\t\t\t\t\t   arraysize), list);\n }\n \n+\n+/* Set the method_index for a method decl.  */\n+void\n+set_method_index (tree decl, tree method_index)\n+{\n+  method_index = fold (convert (sizetype, method_index));\n+\n+  if (TARGET_VTABLE_USES_DESCRIPTORS)\n+    /* Add one to skip bogus descriptor for class and GC descriptor. */\n+    method_index = size_binop (PLUS_EXPR, method_index, size_int (1));\n+  else\n+    /* Add 1 to skip \"class\" field of dtable, and 1 to skip GC descriptor.  */\n+    method_index = size_binop (PLUS_EXPR, method_index, size_int (2));\n+\n+  DECL_VINDEX (decl) = method_index;\n+}\n+\n+/* Get the method_index for a method decl.  */\n+tree\n+get_method_index (tree decl)\n+{\n+  tree method_index = DECL_VINDEX (decl);\n+\n+  if (! method_index)\n+    return NULL;\n+\n+  if (TARGET_VTABLE_USES_DESCRIPTORS)\n+    /* Sub one to skip bogus descriptor for class and GC descriptor. */\n+    method_index = size_binop (MINUS_EXPR, method_index, size_int (1));\n+  else\n+    /* Sub 1 to skip \"class\" field of dtable, and 1 to skip GC descriptor.  */\n+    method_index = size_binop (MINUS_EXPR, method_index, size_int (2));\n+\n+  return method_index;\n+}\n+\n static int\n supers_all_compiled (tree type)\n {\n@@ -2201,8 +2240,9 @@ layout_class_method (tree this_class, tree super_class,\n \t\t\t\t\t\t  method_sig);\n       if (super_method != NULL_TREE && ! METHOD_PRIVATE (super_method))\n \t{\n-\t  DECL_VINDEX (method_decl) = DECL_VINDEX (super_method);\n-\t  if (DECL_VINDEX (method_decl) == NULL_TREE \n+\t  tree method_index = get_method_index (super_method);\n+\t  set_method_index (method_decl, method_index);\n+\t  if (method_index == NULL_TREE \n \t      && !CLASS_FROM_SOURCE_P (this_class))\n \t    error (\"%Jnon-static method '%D' overrides static method\",\n                    method_decl, method_decl);\n@@ -2212,7 +2252,7 @@ layout_class_method (tree this_class, tree super_class,\n \t       && ! CLASS_FINAL (TYPE_NAME (this_class))\n \t       && dtable_count)\n \t{\n-\t  DECL_VINDEX (method_decl) = dtable_count;\n+\t  set_method_index (method_decl, dtable_count);\n \t  dtable_count = fold (build (PLUS_EXPR, integer_type_node,\n \t\t\t\t      dtable_count, integer_one_node));\n \t}"}, {"sha": "047c0af0ee966daa428e580e331dc9a9094836c4", "filename": "gcc/java/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=af434fa7a17e1dadd41821663b754cde38ab3810", "patch": "@@ -638,6 +638,9 @@ java_init_decl_processing (void)\n   otable_ptr_type = build_pointer_type (otable_type);\n \n   PUSH_FIELD (object_type_node, field, \"vtable\", dtable_ptr_type);\n+  DECL_FCONTEXT (field) = object_type_node;\n+  TYPE_VFIELD (object_type_node) = field;\n+\n   /* This isn't exactly true, but it is what we have in the source.\n      There is an unresolved issue here, which is whether the vtable\n      should be marked by the GC.  */"}, {"sha": "11f6c94643c58ce5a451f6979ff45546180a5d95", "filename": "gcc/java/expr.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=af434fa7a17e1dadd41821663b754cde38ab3810", "patch": "@@ -1905,18 +1905,13 @@ build_invokevirtual (tree dtable, tree method)\n     }\n   else\n     {\n-      method_index = convert (sizetype, DECL_VINDEX (method));\n-\n-      if (TARGET_VTABLE_USES_DESCRIPTORS)\n-\t/* Add one to skip bogus descriptor for class and GC descriptor. */\n-\tmethod_index = size_binop (PLUS_EXPR, method_index, size_int (1));\n-      else\n-\t/* Add 1 to skip \"class\" field of dtable, and 1 to skip GC descriptor.  */\n-\tmethod_index = size_binop (PLUS_EXPR, method_index, size_int (2));\n-\n+      /* We fetch the DECL_VINDEX field directly here, rather than\n+\t using get_method_index().  DECL_VINDEX is the true offset\n+\t from the vtable base to a method, regrdless of any extra\n+\t words inserted at the start of the vtable.  */\n+      method_index = DECL_VINDEX (method);\n       method_index = size_binop (MULT_EXPR, method_index,\n \t\t\t\t TYPE_SIZE_UNIT (nativecode_ptr_ptr_type_node));\n-\n       if (TARGET_VTABLE_USES_DESCRIPTORS)\n \tmethod_index = size_binop (MULT_EXPR, method_index,\n \t\t\t\t   size_int (TARGET_VTABLE_USES_DESCRIPTORS));"}, {"sha": "faad7279cb16f0f4b1faac8c256bf1c0dd42e5ff", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=af434fa7a17e1dadd41821663b754cde38ab3810", "patch": "@@ -1238,6 +1238,8 @@ extern int enclosing_context_p (tree, tree);\n extern void complete_start_java_method (tree);\n extern tree build_result_decl (tree);\n extern void emit_handlers (void);\n+extern void set_method_index (tree decl, tree method_index);\n+extern tree get_method_index (tree decl);\n extern void make_class_data (tree);\n extern void register_class (void);\n extern int alloc_name_constant (int, tree);"}, {"sha": "3212ddaf0788b0aa2e0655672680a7e9f5b905cc", "filename": "gcc/java/parse.y", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af434fa7a17e1dadd41821663b754cde38ab3810/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=af434fa7a17e1dadd41821663b754cde38ab3810", "patch": "@@ -4037,6 +4037,11 @@ create_class (int flags, tree id, tree super, tree interfaces)\n   CLASS_COMPLETE_P (decl) = 1;\n   add_superinterfaces (decl, interfaces);\n \n+  /* TYPE_VFIELD' is a compiler-generated field used to point to\n+     virtual function tables.  In gcj, every class has a common base\n+     virtual function table in java.lang.object.  */\n+  TYPE_VFIELD (TREE_TYPE (decl)) = TYPE_VFIELD (object_type_node);\n+\n   /* Add the private this$<n> field, Replicate final locals still in\n      scope as private final fields mangled like val$<local_name>.\n      This doesn't not occur for top level (static) inner classes. */"}]}