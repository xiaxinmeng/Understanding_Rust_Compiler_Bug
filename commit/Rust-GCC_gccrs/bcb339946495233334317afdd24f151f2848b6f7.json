{"sha": "bcb339946495233334317afdd24f151f2848b6f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiMzM5OTQ2NDk1MjMzMzM0MzE3YWZkZDI0ZjE1MWYyODQ4YjZmNw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-09-14T14:37:12Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-09-14T14:37:12Z"}, "message": "Undo bogus changes from gcc2 merge\n\nFrom-SVN: r29407", "tree": {"sha": "c31a7e707f3f98eb32c6a8e293f881939e037462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c31a7e707f3f98eb32c6a8e293f881939e037462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcb339946495233334317afdd24f151f2848b6f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb339946495233334317afdd24f151f2848b6f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb339946495233334317afdd24f151f2848b6f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb339946495233334317afdd24f151f2848b6f7/comments", "author": null, "committer": null, "parents": [{"sha": "86bcc1a3b42468c406957c476c41d15e8b5ae08b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86bcc1a3b42468c406957c476c41d15e8b5ae08b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86bcc1a3b42468c406957c476c41d15e8b5ae08b"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "789fa51d16a313e622e01496e0c0d2ff3d7db2cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb339946495233334317afdd24f151f2848b6f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb339946495233334317afdd24f151f2848b6f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcb339946495233334317afdd24f151f2848b6f7", "patch": "@@ -1,3 +1,15 @@\n+Tue Sep 14 15:28:00 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\tUndo some changes from the gcc2 merge:\n+\t* rtl.def (CONSTANT_P_RTX): Fix the comment for this rtx code.\n+\t* emit-rtl.c (gen_rtx_REG): Don't test special reg rtx's for null\n+\tpointers.\n+\n+\tUndo this change:\n+\tSat Oct  3 07:20:28 1998  Stephen L Moshier  <moshier@world.std.com>\n+\t* emit-rtl.c (gen_lowpart_common): Disable optimization of\n+\tinitialized float-int union if the value is a NaN.\n+\n Tue Sep 14 04:03:44 1999  Mumit Khan  <khan@xraylith.wisc.edu>\n \n \t* gthr-win32.h: New file."}, {"sha": "70b080eb37cab109b12aaaf4d8804cb2cc0ff6cf", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb339946495233334317afdd24f151f2848b6f7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb339946495233334317afdd24f151f2848b6f7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=bcb339946495233334317afdd24f151f2848b6f7", "patch": "@@ -251,22 +251,21 @@ gen_rtx_REG (mode, regno)\n \n   if (mode == Pmode && !reload_in_progress)\n     {\n-      if (frame_pointer_rtx != 0 && regno == FRAME_POINTER_REGNUM)\n+      if (regno == FRAME_POINTER_REGNUM)\n \treturn frame_pointer_rtx;\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n-      if (hard_frame_pointer_rtx != 0 && regno == HARD_FRAME_POINTER_REGNUM)\n+      if (regno == HARD_FRAME_POINTER_REGNUM)\n \treturn hard_frame_pointer_rtx;\n #endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM && HARD_FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-      if (arg_pointer_rtx != 0 && regno == ARG_POINTER_REGNUM)\n+      if (regno == ARG_POINTER_REGNUM)\n \treturn arg_pointer_rtx;\n #endif\n #ifdef RETURN_ADDRESS_POINTER_REGNUM\n-      if (return_address_pointer_rtx != 0\n-\t  && regno == RETURN_ADDRESS_POINTER_REGNUM)\n+      if (regno == RETURN_ADDRESS_POINTER_REGNUM)\n \treturn return_address_pointer_rtx;\n #endif\n-      if (stack_pointer_rtx != 0 && regno == STACK_POINTER_REGNUM)\n+      if (regno == STACK_POINTER_REGNUM)\n \treturn stack_pointer_rtx;\n     }\n \n@@ -752,9 +751,6 @@ gen_lowpart_common (mode, x)\n \n       i = INTVAL (x);\n       r = REAL_VALUE_FROM_TARGET_SINGLE (i);\n-      /* Avoid changing the bit pattern of a NaN.  */\n-      if (REAL_VALUE_ISNAN (r))\n-\treturn 0;\n       return CONST_DOUBLE_FROM_REAL_VALUE (r, mode);\n     }\n #else\n@@ -793,8 +789,6 @@ gen_lowpart_common (mode, x)\n \ti[0] = low, i[1] = high;\n \n       r = REAL_VALUE_FROM_TARGET_DOUBLE (i);\n-      if (REAL_VALUE_ISNAN (r))\n-\treturn 0;\n       return CONST_DOUBLE_FROM_REAL_VALUE (r, mode);\n     }\n #else"}, {"sha": "cf2edac7c690a67c3751516328a3a28d56efd4ea", "filename": "gcc/rtl.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb339946495233334317afdd24f151f2848b6f7/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb339946495233334317afdd24f151f2848b6f7/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=bcb339946495233334317afdd24f151f2848b6f7", "patch": "@@ -530,13 +530,8 @@ DEF_RTL_EXPR(CONST_STRING, \"const_string\", \"s\", 'o')\n /* This is used to encapsulate an expression whose value is constant\n    (such as the sum of a SYMBOL_REF and a CONST_INT) so that it will be\n    recognized as a constant operand rather than by arithmetic instructions.  */\n-DEF_RTL_EXPR(CONST, \"const\", \"e\", 'o')\n \n-/* A unary `__builtin_constant_p' expression.  This RTL code may only be used\n-   as an operand of a CONST.  This pattern is only emitted during RTL\n-   generation and then only if optimize > 0.  It is converted by the first\n-   CSE pass into the appropriate CONST_INT.  */\n-DEF_RTL_EXPR(CONSTANT_P_RTX, \"constant_p_rtx\", \"e\", 'x')\n+DEF_RTL_EXPR(CONST, \"const\", \"e\", 'o')\n \n /* program counter.  Ordinary jumps are represented\n    by a SET whose first operand is (PC).  */\n@@ -855,6 +850,11 @@ DEF_RTL_EXPR(RANGE_VAR, \"range_var\", \"eti\", 'x')\n    0 is the live bitmap.  Operand 1 is the original block number.  */\n DEF_RTL_EXPR(RANGE_LIVE, \"range_live\", \"bi\", 'x')\n \n+/* A unary `__builtin_constant_p' expression.  These are only emitted\n+   during RTL generation, and then only if optimize > 0.  They are\n+   eliminated by the first CSE pass. */\n+DEF_RTL_EXPR(CONSTANT_P_RTX, \"constant_p_rtx\", \"e\", 'x')\n+\n /* A placeholder for a CALL_INSN which may be turned into a normal call,\n    a sibling (tail) call or tail recursion.\n "}]}