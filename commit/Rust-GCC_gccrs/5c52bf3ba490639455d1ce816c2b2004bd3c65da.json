{"sha": "5c52bf3ba490639455d1ce816c2b2004bd3c65da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM1MmJmM2JhNDkwNjM5NDU1ZDFjZTgxNmMyYjIwMDRiZDNjNjVkYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T10:00:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T10:00:49Z"}, "message": "[multiple changes]\n\n2010-06-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_attr.adb, lib-writ.ads, bindgen.adb: Minor reformatting.\n\t* einfo.adb (Related_Expression, Set_Related_Expression): Add\n\tassertions.\n\n2010-06-22  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Add_Internal_Interface_Entities): Minor code\n\treorganization to properly check if the operation has been inherited as\n\tan abstract operation.\n\n2010-06-22  Ed Falis  <falis@adacore.com>\n\n\t* s-osinte-vxworks.ads: Complete previous change.\n\nFrom-SVN: r161159", "tree": {"sha": "9bd7e03ea2f5e4ea9c071bb626f70a454deab26b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bd7e03ea2f5e4ea9c071bb626f70a454deab26b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c52bf3ba490639455d1ce816c2b2004bd3c65da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c52bf3ba490639455d1ce816c2b2004bd3c65da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c52bf3ba490639455d1ce816c2b2004bd3c65da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c52bf3ba490639455d1ce816c2b2004bd3c65da/comments", "author": null, "committer": null, "parents": [{"sha": "be5a1b93684dfdc5f647f6fae4b93dd633190d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5a1b93684dfdc5f647f6fae4b93dd633190d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be5a1b93684dfdc5f647f6fae4b93dd633190d07"}], "stats": {"total": 188, "additions": 101, "deletions": 87}, "files": [{"sha": "2791cc5b3c8e99fff26e83a5c86651378de67a12", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5c52bf3ba490639455d1ce816c2b2004bd3c65da", "patch": "@@ -1,3 +1,19 @@\n+2010-06-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_attr.adb, lib-writ.ads, bindgen.adb: Minor reformatting.\n+\t* einfo.adb (Related_Expression, Set_Related_Expression): Add\n+\tassertions.\n+\n+2010-06-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Add_Internal_Interface_Entities): Minor code\n+\treorganization to properly check if the operation has been inherited as\n+\tan abstract operation.\n+\n+2010-06-22  Ed Falis  <falis@adacore.com>\n+\n+\t* s-osinte-vxworks.ads: Complete previous change.\n+\n 2010-06-22  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_res.adb: Add comment."}, {"sha": "883c60690a842fcd6ba4e070e1c3e121d7a77d09", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 66, "deletions": 71, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=5c52bf3ba490639455d1ce816c2b2004bd3c65da", "patch": "@@ -1942,8 +1942,8 @@ package body Bindgen is\n \n       for E in Elab_Order.First .. Elab_Order.Last loop\n \n-         --  If not spec that has an associated body, then generate a\n-         --  comment giving the name of the corresponding object file.\n+         --  If not spec that has an associated body, then generate a comment\n+         --  giving the name of the corresponding object file.\n \n          if (not Units.Table (Elab_Order.Table (E)).SAL_Interface)\n            and then Units.Table (Elab_Order.Table (E)).Utype /= Is_Spec\n@@ -1952,8 +1952,8 @@ package body Bindgen is\n               (ALIs.Table\n                 (Units.Table (Elab_Order.Table (E)).My_ALI).Ofile_Full_Name);\n \n-            --  If the presence of an object file is necessary or if it\n-            --  exists, then use it.\n+            --  If the presence of an object file is necessary or if it exists,\n+            --  then use it.\n \n             if not Hostparm.Exclude_Missing_Objects\n               or else\n@@ -1975,8 +1975,7 @@ package body Bindgen is\n                   (ALIs.Table\n                    (Units.Table (Elab_Order.Table (E)).My_ALI).Sfile)\n                then\n-                  --  Special case for g-trasym.obj, which is not included\n-                  --  in libgnat.\n+                  --  Special case for g-trasym.obj (not included in libgnat)\n \n                   Get_Name_String (ALIs.Table\n                             (Units.Table (Elab_Order.Table (E)).My_ALI).Sfile);\n@@ -2010,38 +2009,36 @@ package body Bindgen is\n \n       --  This sort accomplishes two important purposes:\n \n-      --    a) All application files are sorted to the front, and all\n-      --       GNAT internal files are sorted to the end. This results\n-      --       in a well defined dividing line between the two sets of\n-      --       files, for the purpose of inserting certain standard\n-      --       library references into the linker arguments list.\n-\n-      --    b) Given two different units, we sort the linker options so\n-      --       that those from a unit earlier in the elaboration order\n-      --       comes later in the list. This is a heuristic designed\n-      --       to create a more friendly order of linker options when\n-      --       the operations appear in separate units. The idea is that\n-      --       if unit A must be elaborated before unit B, then it is\n-      --       more likely that B references libraries included by A,\n-      --       than vice versa, so we want the libraries included by\n-      --       A to come after the libraries included by B.\n-\n-      --  These two criteria are implemented by function Lt_Linker_Option.\n-      --  Note that a special case of b) is that specs are elaborated before\n-      --  bodies, so linker options from specs come after linker options\n-      --  for bodies, and again, the assumption is that libraries used by\n-      --  the body are more likely to reference libraries used by the spec,\n-      --  than vice versa.\n+      --    a) All application files are sorted to the front, and all GNAT\n+      --       internal files are sorted to the end. This results in a well\n+      --       defined dividing line between the two sets of files, for the\n+      --       purpose of inserting certain standard library references into\n+      --       the linker arguments list.\n+\n+      --    b) Given two different units, we sort the linker options so that\n+      --       those from a unit earlier in the elaboration order comes later\n+      --       in the list. This is a heuristic designed to create a more\n+      --       friendly order of linker options when the operations appear in\n+      --       separate units. The idea is that if unit A must be elaborated\n+      --       before unit B, then it is more likely that B references\n+      --       libraries included by A, than vice versa, so we want libraries\n+      --       included by A to come after libraries included by B.\n+\n+      --  These two criteria are implemented by function Lt_Linker_Option. Note\n+      --  that a special case of b) is that specs are elaborated before bodies,\n+      --  so linker options from specs come after linker options for bodies,\n+      --  and again, the assumption is that libraries used by the body are more\n+      --  likely to reference libraries used by the spec, than vice versa.\n \n       Sort\n         (Linker_Options.Last,\n          Move_Linker_Option'Access,\n          Lt_Linker_Option'Access);\n \n-      --  Write user linker options, i.e. the set of linker options that\n-      --  come from all files other than GNAT internal files, Lgnat is\n-      --  left set to point to the first entry from a GNAT internal file,\n-      --  or past the end of the entriers if there are no internal files.\n+      --  Write user linker options, i.e. the set of linker options that come\n+      --  from all files other than GNAT internal files, Lgnat is left set to\n+      --  point to the first entry from a GNAT internal file, or past the end\n+      --  of the entriers if there are no internal files.\n \n       Lgnat := Linker_Options.Last + 1;\n \n@@ -2145,9 +2142,9 @@ package body Bindgen is\n \n       Set_PSD_Pragma_Table;\n \n-      --  Override Ada_Bind_File and Bind_Main_Program for VMs since\n-      --  JGNAT only supports Ada code, and the main program is already\n-      --  generated by the compiler.\n+      --  Override Ada_Bind_File and Bind_Main_Program for VMs since JGNAT only\n+      --  supports Ada code, and the main program is already generated by the\n+      --  compiler.\n \n       if VM_Target /= No_VM then\n          Ada_Bind_File := True;\n@@ -2279,8 +2276,7 @@ package body Bindgen is\n                WBI (\"   gnat_envp : System.Address;\");\n \n                --  If the standard library is not suppressed, these variables\n-               --  are in the runtime data area for easy access from the\n-               --  runtime.\n+               --  are in the run-time data area for easy run time access.\n \n                if not Suppress_Standard_Library_On_Target then\n                   WBI (\"\");\n@@ -2475,8 +2471,8 @@ package body Bindgen is\n \n       if not Cumulative_Restrictions.Set (No_Finalization) then\n \n-         --  In the Java case, pragma Import C cannot be used, so the\n-         --  standard Ada constructs will be used instead.\n+         --  In the Java case, pragma Import C cannot be used, so the standard\n+         --  Ada constructs will be used instead.\n \n          if VM_Target = No_VM then\n             WBI (\"\");\n@@ -2631,8 +2627,8 @@ package body Bindgen is\n          WBI (\"extern void __gnat_stack_usage_initialize (int size);\");\n       end if;\n \n-      --  Initialize stack limit for the environment task if the stack\n-      --  check method is stack limit and stack check is enabled.\n+      --  Initialize stack limit for the environment task if the stack check\n+      --  method is stack limit and stack check is enabled.\n \n       if Stack_Check_Limits_On_Target\n         and then (Stack_Check_Default_On_Target or Stack_Check_Switch_Set)\n@@ -2666,8 +2662,8 @@ package body Bindgen is\n \n       if Bind_Main_Program then\n \n-         --  First deal with argc/argv/envp. In the normal case they\n-         --  are in the run-time library.\n+         --  First deal with argc/argv/envp. In the normal case they are in the\n+         --  run-time library.\n \n          if not Configurable_Run_Time_On_Target then\n             WBI (\"extern int gnat_argc;\");\n@@ -2680,8 +2676,8 @@ package body Bindgen is\n          elsif not Command_Line_Args_On_Target then\n             null;\n \n-         --  Otherwise, in the configurable run-time case they are right in\n-         --  the binder file.\n+         --  Otherwise, in the configurable run-time case they are right in the\n+         --  binder file.\n \n          else\n             WBI (\"int gnat_argc;\");\n@@ -2694,8 +2690,8 @@ package body Bindgen is\n          if not Configurable_Run_Time_On_Target then\n             WBI (\"extern int gnat_exit_status;\");\n \n-         --  If configurable run time and no exit status on target, then\n-         --  the generation of this variables is entirely suppressed.\n+         --  If configurable run time and no exit status on target, then the\n+         --  generation of this variables is entirely suppressed.\n \n          elsif not Exit_Status_Supported_On_Target then\n             null;\n@@ -2710,9 +2706,8 @@ package body Bindgen is\n          WBI (\"\");\n       end if;\n \n-      --  When suppressing the standard library, the __gnat_break_start\n-      --  routine (for the debugger to get initial control) is defined in\n-      --  this file.\n+      --  When suppressing the standard library, the __gnat_break_start routine\n+      --  (for the debugger to get initial control) is defined in this file.\n \n       if Suppress_Standard_Library_On_Target then\n          WBI (\"\");\n@@ -2736,8 +2731,8 @@ package body Bindgen is\n          Write_Statement_Buffer;\n       end if;\n \n-      --  Generate the adafinal routine. In no runtime mode, this is\n-      --  not needed, since there is no finalization to do.\n+      --  Generate the adafinal routine. In no runtime mode, this is not\n+      --  needed, since there is no finalization to do.\n \n       if not Cumulative_Restrictions.Set (No_Finalization) then\n          Gen_Adafinal_C;\n@@ -2982,9 +2977,9 @@ package body Bindgen is\n    --    unnnnn : constant Integer := 16#hhhhhhhh#;\n    --    pragma Export (C, unnnnn, unam);\n \n-   --  for each unit, where unam is the unit name suffixed by either B or\n-   --  S for body or spec, with dots replaced by double underscores, and\n-   --  hhhhhhhh is the version number, and nnnnn is a 5-digits serial number.\n+   --  for each unit, where unam is the unit name suffixed by either B or S for\n+   --  body or spec, with dots replaced by double underscores, and hhhhhhhh is\n+   --  the version number, and nnnnn is a 5-digits serial number.\n \n    procedure Gen_Versions_Ada is\n       Ubuf : String (1 .. 6) := \"u00000\";\n@@ -3054,8 +3049,8 @@ package body Bindgen is\n \n    --    unsigned unam = 0xhhhhhhhh;\n \n-   --  for each unit, where unam is the unit name suffixed by either B or\n-   --  S for body or spec, with dots replaced by double underscores.\n+   --  for each unit, where unam is the unit name suffixed by either B or S for\n+   --  body or spec, with dots replaced by double underscores.\n \n    procedure Gen_Versions_C is\n    begin\n@@ -3193,9 +3188,9 @@ package body Bindgen is\n \n          Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n \n-         --  If this is a child name, return only the name of the child,\n-         --  since we can't have dots in a nested program name. Note that\n-         --  we do not include the %b at the end of the unit name.\n+         --  If this is a child name, return only the name of the child, since\n+         --  we can't have dots in a nested program name. Note that we do not\n+         --  include the %b at the end of the unit name.\n \n          for J in reverse 1 .. Name_Len - 2 loop\n             if J = 1 or else Name_Buffer (J - 1) = '.' then\n@@ -3227,12 +3222,12 @@ package body Bindgen is\n       --  no better choice. If some other encoding is required when there is\n       --  no main, it must be set explicitly using -Wx.\n \n-      --  Note: if the ALI file always passed the wide character encoding\n-      --  of every file, then we could use the encoding of the initial\n-      --  specified file, but this information is passed only for potential\n-      --  main programs. We could fix this sometime, but it is a very minor\n-      --  point (wide character default encoding for [Wide_[Wide_]Text_IO\n-      --  when there is no main program).\n+      --  Note: if the ALI file always passed the wide character encoding of\n+      --  every file, then we could use the encoding of the initial specified\n+      --  file, but this information is passed only for potential main\n+      --  programs. We could fix this sometime, but it is a very minor point\n+      --  (wide character default encoding for [Wide_[Wide_]Text_IO when there\n+      --  is no main program).\n \n       elsif No_Main_Subprogram then\n          return 'b';\n@@ -3263,8 +3258,8 @@ package body Bindgen is\n                 Linker_Options.Table (Op2).Internal_File;\n \n       --  If both internal or both non-internal, sort according to the\n-      --  elaboration position. A unit that is elaborated later should\n-      --  come earlier in the linker options list.\n+      --  elaboration position. A unit that is elaborated later should come\n+      --  earlier in the linker options list.\n \n       else\n          return Units.Table (Linker_Options.Table (Op1).Unit).Elab_Position\n@@ -3293,9 +3288,9 @@ package body Bindgen is\n          Get_Name_String (Units.Table (Elab_Order.Table (E)).Uname);\n \n          --  This is not a perfect approach, but is the current protocol\n-         --  between the run-time and the binder to indicate that tasking\n-         --  is used: system.os_interface should always be used by any\n-         --  tasking application.\n+         --  between the run-time and the binder to indicate that tasking is\n+         --  used: system.os_interface should always be used by any tasking\n+         --  application.\n \n          if Name_Buffer (1 .. 19) = \"system.os_interface\" then\n             With_GNARL := True;"}, {"sha": "fd2eee3d03db339735f117e81600d6977ee2556e", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=5c52bf3ba490639455d1ce816c2b2004bd3c65da", "patch": "@@ -2434,7 +2434,7 @@ package body Einfo is\n \n    function Related_Expression (Id : E) return N is\n    begin\n-      pragma Assert (Is_Type (Id)\n+      pragma Assert (Ekind (Id) in Type_Kind\n                        or else Ekind_In (Id, E_Constant, E_Variable));\n       return Node24 (Id);\n    end Related_Expression;\n@@ -4893,6 +4893,8 @@ package body Einfo is\n \n    procedure Set_Related_Expression (Id : E; V : N) is\n    begin\n+      pragma Assert (Ekind (Id) in Type_Kind\n+                       or else Ekind_In (Id, E_Constant, E_Variable, E_Void));\n       Set_Node24 (Id, V);\n    end Set_Related_Expression;\n "}, {"sha": "a88cf855fd5a8e72f80813e85200d7f8efb5493b", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=5c52bf3ba490639455d1ce816c2b2004bd3c65da", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1257,8 +1257,8 @@ package body Exp_Attr is\n       --  subprogram spec or package. This sequence of code references the\n       --  the unsigned constant created in the main program by the binder.\n \n-      --  A special exception occurs for Standard, where the string\n-      --  returned is a copy of the library string in gnatvsn.ads.\n+      --  A special exception occurs for Standard, where the string returned\n+      --  is a copy of the library string in gnatvsn.ads.\n \n       when Attribute_Body_Version | Attribute_Version => Version : declare\n          E    : constant Entity_Id := Make_Temporary (Loc, 'V');"}, {"sha": "8e8e32137b590e6c6697c366ce1703cafa269bfe", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=5c52bf3ba490639455d1ce816c2b2004bd3c65da", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -610,8 +610,8 @@ package Lib.Writ is\n    ---------------------\n \n    --  The reference lines contain information about references from any of the\n-   --  units in the compilation (including, body version and version\n-   --  attributes, linker options pragmas and source dependencies.\n+   --  units in the compilation (including body version and version attributes,\n+   --  linker options pragmas and source dependencies).\n \n    --  ------------------------------------\n    --  -- E  External Version References --\n@@ -696,7 +696,7 @@ package Lib.Writ is\n    --  reference data. See the spec of Par_SCO for full details of the format.\n \n    ----------------------\n-   -- Global_Variables --\n+   -- Global variables --\n    ----------------------\n \n    --  The table structure defined here stores one entry for each"}, {"sha": "dd5f1eb1d6cc71ba672e5a45686826e70d7ed9fd", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=5c52bf3ba490639455d1ce816c2b2004bd3c65da", "patch": "@@ -155,7 +155,7 @@ package System.OS_Interface is\n    SIG_DFL : constant := 0;\n    SIG_IGN : constant := 1;\n \n-   subtype sigset_t is System.VxWorks.Ext.sigset_t;\n+   type sigset_t is private;\n \n    type struct_sigaction is record\n       sa_handler : System.Address;\n@@ -497,4 +497,5 @@ private\n    type clockid_t is new int;\n    CLOCK_REALTIME : constant clockid_t := 0;\n \n+   type sigset_t is new System.VxWorks.Ext.sigset_t;\n end System.OS_Interface;"}, {"sha": "09e5319f1c077689ef5133f3c2a013c6df9da7f2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c52bf3ba490639455d1ce816c2b2004bd3c65da/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5c52bf3ba490639455d1ce816c2b2004bd3c65da", "patch": "@@ -1567,15 +1567,15 @@ package body Sem_Ch3 is\n                              and then Alias (Prim) = Iface_Prim;\n                            Next_Elmt (El);\n                         end loop;\n-                     end;\n-                  end if;\n \n-                  --  If the operation was not explicitly overridden, it should\n-                  --  have been inherited as an abstract operation so Prim can\n-                  --  not be Empty at this stage.\n+                        --  If the operation was not explicitly overridden, it\n+                        --  should have been inherited as an abstract operation\n+                        --  so Prim can not be Empty at this stage.\n \n-                  if No (Prim) then\n-                     raise Program_Error;\n+                        if No (El) then\n+                           raise Program_Error;\n+                        end if;\n+                     end;\n                   end if;\n \n                   Derive_Subprogram"}]}