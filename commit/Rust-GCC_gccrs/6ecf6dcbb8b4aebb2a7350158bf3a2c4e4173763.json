{"sha": "6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVjZjZkY2JiOGI0YWViYjJhNzM1MDE1OGJmM2EyYzRlNDE3Mzc2Mw==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2004-12-08T00:32:39Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2004-12-08T00:32:39Z"}, "message": "io.h (open_external): Change prototype.\n\n\t* io/io.h (open_external): Change prototype.\n\t* io/unix.c (regular_file): Change prototype and set flags->action if\n\tneeded.\n\t(open_external): Ditto.\n\t* io/open.c (new_unit): Let open_external set flags->action.\n\nFrom-SVN: r91843", "tree": {"sha": "5512e79869e27dabcf560460d558f9e8776f7130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5512e79869e27dabcf560460d558f9e8776f7130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763/comments", "author": null, "committer": null, "parents": [{"sha": "1b79dc38ddc47991e1b111a238162c9f1a5282a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b79dc38ddc47991e1b111a238162c9f1a5282a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b79dc38ddc47991e1b111a238162c9f1a5282a8"}], "stats": {"total": 100, "additions": 70, "deletions": 30}, "files": [{"sha": "15c67d24b5d39a6425a5281f5c5b701d7a3cda47", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763", "patch": "@@ -1,3 +1,11 @@\n+2004-12-07  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* io/io.h (open_external): Change prototype.\n+\t* io/unix.c (regular_file): Change prototype and set flags->action if\n+\tneeded.\n+\t(open_external): Ditto.\n+\t* io/open.c (new_unit): Let open_external set flags->action.\n+\n 2004-12-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* configure.ac: Check for ieeefp.h.  Check for fabsf in libm."}, {"sha": "e30944863c73dbe32a2cd5c2574c123faa979e1f", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763", "patch": "@@ -400,7 +400,7 @@ int compare_files (stream *, stream *);\n stream *init_error_stream (void);\n \n #define open_external prefix(open_external)\n-stream *open_external (unit_action, unit_status);\n+stream *open_external (unit_flags *);\n \n #define open_internal prefix(open_internal)\n stream *open_internal (char *, int);"}, {"sha": "28a6babcd8a815289da9fc992685f615abd7328d", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763", "patch": "@@ -207,14 +207,13 @@ new_unit (unit_flags * flags)\n   stream *s;\n   char tmpname[5 /* fort. */ + 10 /* digits of unit number */ + 1 /* 0 */];\n \n-  /* Change unspecifieds to defaults.  */\n+  /* Change unspecifieds to defaults.  Leave (flags->action ==\n+     ACTION_UNSPECIFIED) alone so open_external() can set it based on\n+     what type of open actually works.  */\n \n   if (flags->access == ACCESS_UNSPECIFIED)\n     flags->access = ACCESS_SEQUENTIAL;\n \n-  if (flags->action == ACTION_UNSPECIFIED)\n-    flags->action = ACTION_READWRITE;\t/* Processor dependent.  */\n-\n   if (flags->form == FORM_UNSPECIFIED)\n     flags->form = (flags->access == ACCESS_SEQUENTIAL)\n       ? FORM_FORMATTED : FORM_UNFORMATTED;\n@@ -325,7 +324,7 @@ new_unit (unit_flags * flags)\n \n   /* Open file.  */\n \n-  s = open_external (flags->action, flags->status);\n+  s = open_external (flags);\n   if (s == NULL)\n     {\n       generate_error (ERROR_OS, NULL);"}, {"sha": "a21eb47792c682791e1dd9feb5139e66dc24259a", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 57, "deletions": 24, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=6ecf6dcbb8b4aebb2a7350158bf3a2c4e4173763", "patch": "@@ -988,45 +988,50 @@ tempfile (void)\n }\n \n \n-/* regular_file()-- Open a regular file.  Returns the descriptor, which is less than zero on error. */\n+/* regular_file()-- Open a regular file.\n+ * Change flags->action if it is ACTION_UNSPECIFIED on entry.\n+ * Returns the descriptor, which is less than zero on error. */\n \n static int\n-regular_file (unit_action action, unit_status status)\n+regular_file (unit_flags *flags)\n {\n   char path[PATH_MAX + 1];\n   struct stat statbuf;\n   int mode;\n+  int rwflag;\n+  int fd;\n \n   if (unpack_filename (path, ioparm.file, ioparm.file_len))\n     {\n       errno = ENOENT;\t\t/* Fake an OS error */\n       return -1;\n     }\n \n-  mode = 0;\n+  rwflag = 0;\n \n-  switch (action)\n+  switch (flags->action)\n     {\n     case ACTION_READ:\n-      mode = O_RDONLY;\n+      rwflag = O_RDONLY;\n       break;\n \n     case ACTION_WRITE:\n-      mode = O_WRONLY;\n+      rwflag = O_WRONLY;\n       break;\n \n     case ACTION_READWRITE:\n-      mode = O_RDWR;\n+    case ACTION_UNSPECIFIED:\n+      rwflag = O_RDWR;\n       break;\n \n     default:\n       internal_error (\"regular_file(): Bad action\");\n     }\n \n-  switch (status)\n+  switch (flags->status)\n     {\n     case STATUS_NEW:\n-      mode |= O_CREAT | O_EXCL;\n+      rwflag |= O_CREAT | O_EXCL;\n       break;\n \n     case STATUS_OLD:\t\t/* file must exist, so check for its existence */\n@@ -1036,40 +1041,74 @@ regular_file (unit_action action, unit_status status)\n \n     case STATUS_UNKNOWN:\n     case STATUS_SCRATCH:\n-      mode |= O_CREAT;\n+      rwflag |= O_CREAT;\n       break;\n \n     case STATUS_REPLACE:\n-        mode |= O_CREAT | O_TRUNC;\n+        rwflag |= O_CREAT | O_TRUNC;\n       break;\n \n     default:\n       internal_error (\"regular_file(): Bad status\");\n     }\n \n-  /* mode |= O_LARGEFILE; */\n+  /* rwflag |= O_LARGEFILE; */\n \n-  return open (path, mode,\n-\t       S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);\n+  mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n+  fd = open (path, rwflag, mode);\n+  if (flags->action == ACTION_UNSPECIFIED)\n+    {\n+      if (fd < 0)\n+        {\n+          rwflag = rwflag & !O_RDWR | O_RDONLY;\n+          fd = open (path, rwflag, mode);\n+          if (fd < 0)\n+            {\n+\t      rwflag = rwflag & !O_RDONLY | O_WRONLY;\n+              fd = open (path, rwflag, mode);\n+              if (fd < 0)\n+                flags->action = ACTION_READWRITE; /* Could not open at all.  */\n+              else\n+                flags->action = ACTION_WRITE;\n+            }\n+          else\n+            flags->action = ACTION_READ;\n+        }\n+      else\n+        flags->action = ACTION_READWRITE;\n+    }\n+  return fd;\n }\n \n \n /* open_external()-- Open an external file, unix specific version.\n+ * Change flags->action if it is ACTION_UNSPECIFIED on entry.\n  * Returns NULL on operating system error. */\n \n stream *\n-open_external (unit_action action, unit_status status)\n+open_external (unit_flags *flags)\n {\n   int fd, prot;\n \n-  fd =\n-    (status == STATUS_SCRATCH) ? tempfile () : regular_file (action, status);\n+  if (flags->status == STATUS_SCRATCH)\n+    {\n+      fd = tempfile ();\n+      if (flags->action == ACTION_UNSPECIFIED)\n+        flags->action = ACTION_READWRITE;\n+      /* We can unlink scratch files now and it will go away when closed. */\n+      unlink (ioparm.file);\n+    }\n+  else\n+    {\n+      /* regular_file resets flags->action if it is ACTION_UNSPECIFIED.  */\n+      fd = regular_file (flags);\n+    }\n \n   if (fd < 0)\n     return NULL;\n   fd = fix_fd (fd);\n \n-  switch (action)\n+  switch (flags->action)\n     {\n     case ACTION_READ:\n       prot = PROT_READ;\n@@ -1087,12 +1126,6 @@ open_external (unit_action action, unit_status status)\n       internal_error (\"open_external(): Bad action\");\n     }\n \n-  /* If this is a scratch file, we can unlink it now and the file will\n-   * go away when it is closed. */\n-\n-  if (status == STATUS_SCRATCH)\n-    unlink (ioparm.file);\n-\n   return fd_to_stream (fd, prot);\n }\n "}]}