{"sha": "0e08acbf2c5747089eb278f8b2addf161077322e", "node_id": "C_kwDOANBUbNoAKDBlMDhhY2JmMmM1NzQ3MDg5ZWIyNzhmOGIyYWRkZjE2MTA3NzMyMmU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-26T14:35:12Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-28T08:37:28Z"}, "message": "intrinsics: Cleanup error handling around atomic_store_*", "tree": {"sha": "9c466b31cb62e0a4708b1ea6797e1e654247975c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c466b31cb62e0a4708b1ea6797e1e654247975c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e08acbf2c5747089eb278f8b2addf161077322e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e08acbf2c5747089eb278f8b2addf161077322e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e08acbf2c5747089eb278f8b2addf161077322e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e08acbf2c5747089eb278f8b2addf161077322e/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1c287af3a074d40e84234be9feca904af627d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1c287af3a074d40e84234be9feca904af627d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d1c287af3a074d40e84234be9feca904af627d5"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "b0c6015bee203783e103efe49450745c75e91744", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e08acbf2c5747089eb278f8b2addf161077322e/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e08acbf2c5747089eb278f8b2addf161077322e/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=0e08acbf2c5747089eb278f8b2addf161077322e", "patch": "@@ -50,6 +50,22 @@ is_basic_integer_type (TyTy::BaseType *type)\n     }\n }\n \n+static bool\n+check_for_basic_integer_type (const std::string &intrinsic_str, Location locus,\n+\t\t\t      TyTy::BaseType *type)\n+{\n+  auto is_basic_integer = is_basic_integer_type (type);\n+  if (!is_basic_integer)\n+    {\n+      rust_error_at (\n+\tlocus,\n+\t\"%s intrinsics can only be used with basic integer types (got %qs)\",\n+\tintrinsic_str.c_str (), type->get_name ().c_str ());\n+    }\n+\n+  return is_basic_integer;\n+}\n+\n static tree\n offset_handler (Context *ctx, TyTy::FnType *fntype);\n static tree\n@@ -652,7 +668,7 @@ prefetch_data_handler (Context *ctx, TyTy::FnType *fntype, Prefetch kind)\n }\n \n static std::string\n-build_atomic_builtin_name (Location locus, tree operand_type)\n+build_atomic_builtin_name (Location locus, TyTy::BaseType *operand_type)\n {\n   static const std::map<std::string, std::string> allowed_types = {\n     {\"i8\", \"1\"},    {\"i16\", \"2\"},   {\"i32\", \"4\"},   {\"i64\", \"8\"},\n@@ -665,29 +681,18 @@ build_atomic_builtin_name (Location locus, tree operand_type)\n \n   std::string result = \"atomic_store_\";\n \n-  auto type_name = std::string (TYPE_NAME_STRING (operand_type));\n+  auto type_name = operand_type->get_name ();\n   if (type_name == \"usize\" || type_name == \"isize\")\n     {\n       rust_sorry_at (\n \tlocus, \"atomics are not yet available for size types (usize, isize)\");\n       return \"\";\n     }\n \n-  // FIXME: Can we have a better looking name here?\n-  // Instead of `<crate>::<module>::<type>`?\n-  // Maybe instead of giving the tree node, pass the resolved Tyty before it\n-  // gets compiled?\n-  //\n-  // Or should we perform this check somwhere else in the compiler?\n   auto type_size_str = allowed_types.find (type_name);\n-  if (type_size_str == allowed_types.end ())\n-    {\n-      rust_error_at (locus,\n-\t\t     \"atomic intrinsics are only available for basic integer \"\n-\t\t     \"types: got type %qs\",\n-\t\t     type_name.c_str ());\n-      return \"\";\n-    }\n+\n+  if (!check_for_basic_integer_type (\"atomic\", locus, operand_type))\n+    return \"\";\n \n   result += type_size_str->second;\n \n@@ -726,8 +731,11 @@ atomic_store_handler_inner (Context *ctx, TyTy::FnType *fntype, int ordering)\n   auto value = ctx->get_backend ()->var_expression (param_vars[1], Location ());\n   auto memorder = make_unsigned_long_tree (ctx, ordering);\n \n+  auto monomorphized_type\n+    = fntype->get_substs ()[0].get_param_ty ()->resolve ();\n+\n   auto builtin_name\n-    = build_atomic_builtin_name (fntype->get_locus (), TREE_TYPE (types[0]));\n+    = build_atomic_builtin_name (fntype->get_locus (), monomorphized_type);\n   if (builtin_name.empty ())\n     return error_mark_node;\n \n@@ -781,11 +789,9 @@ unchecked_op_inner (Context *ctx, TyTy::FnType *fntype, tree_code op)\n \n   auto *monomorphized_type\n     = fntype->get_substs ().at (0).get_param_ty ()->resolve ();\n-  if (!is_basic_integer_type (monomorphized_type))\n-    rust_error_at (fntype->get_locus (),\n-\t\t   \"unchecked operation intrinsics can only be used with \"\n-\t\t   \"basic integer types (got %qs)\",\n-\t\t   monomorphized_type->get_name ().c_str ());\n+\n+  check_for_basic_integer_type (\"unchecked operation\", fntype->get_locus (),\n+\t\t\t\tmonomorphized_type);\n \n   auto expr = build2 (op, TREE_TYPE (x), x, y);\n   auto return_statement"}, {"sha": "7fd84dcd63586c41ef97ae068d7099a0647947e7", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e08acbf2c5747089eb278f8b2addf161077322e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e08acbf2c5747089eb278f8b2addf161077322e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-5.rs?ref=0e08acbf2c5747089eb278f8b2addf161077322e", "patch": "@@ -2,8 +2,8 @@ trait Copy {}\n \n extern \"rust-intrinsic\" {\n     pub fn atomic_store_seqcst<T: Copy>(dst: *mut T, value: T);\n-    // { dg-error \"atomic intrinsics are only available for basic integer types: got type .intrinsics_5::VeryLargeType.\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"atomic intrinsics are only available for basic integer types: got type .bool.\" \"\" { target *-*-* } .-2 }\n+    // { dg-error \"atomic intrinsics can only be used with basic integer types .got .VeryLargeType..\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"atomic intrinsics can only be used with basic integer types .got .bool..\" \"\" { target *-*-* } .-2 }\n }\n \n struct VeryLargeType {"}]}