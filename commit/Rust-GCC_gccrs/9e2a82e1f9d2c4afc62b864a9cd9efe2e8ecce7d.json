{"sha": "9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyYTgyZTFmOWQyYzRhZmM2MmI4NjRhOWNkOWVmZTJlOGVjY2U3ZA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-07-09T03:24:45Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-08T04:44:50Z"}, "message": "AVX512FP16: Support vector init/broadcast/set/extract for FP16.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm_set_ph): New intrinsic.\n\t(_mm256_set_ph): Likewise.\n\t(_mm512_set_ph): Likewise.\n\t(_mm_setr_ph): Likewise.\n\t(_mm256_setr_ph): Likewise.\n\t(_mm512_setr_ph): Likewise.\n\t(_mm_set1_ph): Likewise.\n\t(_mm256_set1_ph): Likewise.\n\t(_mm512_set1_ph): Likewise.\n\t(_mm_setzero_ph): Likewise.\n\t(_mm256_setzero_ph): Likewise.\n\t(_mm512_setzero_ph): Likewise.\n\t(_mm_set_sh): Likewise.\n\t(_mm_load_sh): Likewise.\n\t(_mm_store_sh): Likewise.\n\t* config/i386/i386-builtin-types.def (V8HF): New type.\n\t(DEF_FUNCTION_TYPE (V8HF, V8HI)): New builtin function type\n\t* config/i386/i386-expand.c (ix86_expand_vector_init_duplicate):\n\tSupport vector HFmodes.\n\t(ix86_expand_vector_init_one_nonzero): Likewise.\n\t(ix86_expand_vector_init_one_var): Likewise.\n\t(ix86_expand_vector_init_interleave): Likewise.\n\t(ix86_expand_vector_init_general): Likewise.\n\t(ix86_expand_vector_set): Likewise.\n\t(ix86_expand_vector_extract): Likewise.\n\t(ix86_expand_vector_init_concat): Likewise.\n\t(ix86_expand_sse_movcc): Handle vector HFmodes.\n\t(ix86_expand_vector_set_var): Ditto.\n\t* config/i386/i386-modes.def: Add HF vector modes in comment.\n\t* config/i386/i386.c (classify_argument): Add HF vector modes.\n\t(ix86_hard_regno_mode_ok): Allow HF vector modes for AVX512FP16.\n\t(ix86_vector_mode_supported_p): Likewise.\n\t(ix86_set_reg_reg_cost): Handle vector HFmode.\n\t(ix86_get_ssemov): Handle vector HFmode.\n\t(function_arg_advance_64): Pass unamed V16HFmode and V32HFmode\n\tby stack.\n\t(function_arg_advance_32): Pass V8HF/V16HF/V32HF by sse reg for 32bit\n\tmode.\n\t(function_arg_advance_32): Ditto.\n\t* config/i386/i386.h (VALID_AVX512FP16_REG_MODE): New.\n\t(VALID_AVX256_REG_OR_OI_MODE): Rename to ..\n\t(VALID_AVX256_REG_OR_OI_VHF_MODE): .. this, and add V16HF.\n\t(VALID_SSE2_REG_VHF_MODE): New.\n\t(VALID_AVX512VL_128_REG_MODE): Add V8HF and TImode.\n\t(SSE_REG_MODE_P): Add vector HFmode.\n\t* config/i386/i386.md (mode): Add HF vector modes.\n\t(MODE_SIZE): Likewise.\n\t(ssemodesuffix): Add ph suffix for HF vector modes.\n\t* config/i386/sse.md (VFH_128): New mode iterator.\n\t(VMOVE): Adjust for HF vector modes.\n\t(V): Likewise.\n\t(V_256_512): Likewise.\n\t(avx512): Likewise.\n\t(avx512fmaskmode): Likewise.\n\t(shuffletype): Likewise.\n\t(sseinsnmode): Likewise.\n\t(ssedoublevecmode): Likewise.\n\t(ssehalfvecmode): Likewise.\n\t(ssehalfvecmodelower): Likewise.\n\t(ssePScmode): Likewise.\n\t(ssescalarmode): Likewise.\n\t(ssescalarmodelower): Likewise.\n\t(sseintprefix): Likewise.\n\t(i128): Likewise.\n\t(bcstscalarsuff): Likewise.\n\t(xtg_mode): Likewise.\n\t(VI12HF_AVX512VL): New mode_iterator.\n\t(VF_AVX512FP16): Likewise.\n\t(VIHF): Likewise.\n\t(VIHF_256): Likewise.\n\t(VIHF_AVX512BW): Likewise.\n\t(V16_256): Likewise.\n\t(V32_512): Likewise.\n\t(sseintmodesuffix): New mode_attr.\n\t(sse): Add scalar and vector HFmodes.\n\t(ssescalarmode): Add vector HFmode mapping.\n\t(ssescalarmodesuffix): Add sh suffix for HFmode.\n\t(*<sse>_vm<insn><mode>3): Use VFH_128.\n\t(*<sse>_vm<multdiv_mnemonic><mode>3): Likewise.\n\t(*ieee_<ieee_maxmin><mode>3): Likewise.\n\t(<avx512>_blendm<mode>): New define_insn.\n\t(vec_setv8hf): New define_expand.\n\t(vec_set<mode>_0): New define_insn for HF vector set.\n\t(*avx512fp16_movsh): Likewise.\n\t(avx512fp16_movsh): Likewise.\n\t(vec_extract_lo_v32hi): Rename to ...\n\t(vec_extract_lo_<mode>): ... this, and adjust to allow HF\n\tvector modes.\n\t(vec_extract_hi_v32hi): Likewise.\n\t(vec_extract_hi_<mode>): Likewise.\n\t(vec_extract_lo_v16hi): Likewise.\n\t(vec_extract_lo_<mode>): Likewise.\n\t(vec_extract_hi_v16hi): Likewise.\n\t(vec_extract_hi_<mode>): Likewise.\n\t(vec_set_hi_v16hi): Likewise.\n\t(vec_set_hi_<mode>): Likewise.\n\t(vec_set_lo_v16hi): Likewise.\n\t(vec_set_lo_<mode>): Likewise.\n\t(*vec_extract<mode>_0): New define_insn_and_split for HF\n\tvector extract.\n\t(*vec_extracthf): New define_insn.\n\t(VEC_EXTRACT_MODE): Add HF vector modes.\n\t(PINSR_MODE): Add V8HF.\n\t(sse2p4_1): Likewise.\n\t(pinsr_evex_isa): Likewise.\n\t(<sse2p4_1>_pinsr<ssemodesuffix>): Adjust to support\n\tinsert for V8HFmode.\n\t(pbroadcast_evex_isa): Add HF vector modes.\n\t(AVX2_VEC_DUP_MODE): Likewise.\n\t(VEC_INIT_MODE): Likewise.\n\t(VEC_INIT_HALF_MODE): Likewise.\n\t(avx2_pbroadcast<mode>): Adjust to support HF vector mode\n\tbroadcast.\n\t(avx2_pbroadcast<mode>_1): Likewise.\n\t(<avx512>_vec_dup<mode>_1): Likewise.\n\t(<avx512>_vec_dup<mode><mask_name>): Likewise.\n\t(<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>):\n\tLikewise.", "tree": {"sha": "7b556248d0f3eb202f661f177a0dc2947ef84e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b556248d0f3eb202f661f177a0dc2947ef84e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a68412117fa47786bd82ab79b009ec7933aef476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68412117fa47786bd82ab79b009ec7933aef476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a68412117fa47786bd82ab79b009ec7933aef476"}], "stats": {"total": 790, "additions": 658, "deletions": 132}, "files": [{"sha": "3fc0770986edba02f14ced878c52881ce46d0b90", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "patch": "@@ -45,6 +45,178 @@ typedef _Float16 __m128h __attribute__ ((__vector_size__ (16), __may_alias__));\n typedef _Float16 __m256h __attribute__ ((__vector_size__ (32), __may_alias__));\n typedef _Float16 __m512h __attribute__ ((__vector_size__ (64), __may_alias__));\n \n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_set_ph (_Float16 __A7, _Float16 __A6, _Float16 __A5,\n+\t    _Float16 __A4, _Float16 __A3, _Float16 __A2,\n+\t    _Float16 __A1, _Float16 __A0)\n+{\n+  return __extension__ (__m128h)(__v8hf){ __A0, __A1, __A2, __A3,\n+\t\t\t\t\t  __A4, __A5, __A6, __A7 };\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_set_ph (_Float16 __A15, _Float16 __A14, _Float16 __A13,\n+\t       _Float16 __A12, _Float16 __A11, _Float16 __A10,\n+\t       _Float16 __A9, _Float16 __A8, _Float16 __A7,\n+\t       _Float16 __A6, _Float16 __A5, _Float16 __A4,\n+\t       _Float16 __A3, _Float16 __A2, _Float16 __A1,\n+\t       _Float16 __A0)\n+{\n+  return __extension__ (__m256h)(__v16hf){ __A0, __A1, __A2, __A3,\n+\t\t\t\t\t   __A4, __A5, __A6, __A7,\n+\t\t\t\t\t   __A8, __A9, __A10, __A11,\n+\t\t\t\t\t   __A12, __A13, __A14, __A15 };\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_set_ph (_Float16 __A31, _Float16 __A30, _Float16 __A29,\n+\t       _Float16 __A28, _Float16 __A27, _Float16 __A26,\n+\t       _Float16 __A25, _Float16 __A24, _Float16 __A23,\n+\t       _Float16 __A22, _Float16 __A21, _Float16 __A20,\n+\t       _Float16 __A19, _Float16 __A18, _Float16 __A17,\n+\t       _Float16 __A16, _Float16 __A15, _Float16 __A14,\n+\t       _Float16 __A13, _Float16 __A12, _Float16 __A11,\n+\t       _Float16 __A10, _Float16 __A9, _Float16 __A8,\n+\t       _Float16 __A7, _Float16 __A6, _Float16 __A5,\n+\t       _Float16 __A4, _Float16 __A3, _Float16 __A2,\n+\t       _Float16 __A1, _Float16 __A0)\n+{\n+  return __extension__ (__m512h)(__v32hf){ __A0, __A1, __A2, __A3,\n+\t\t\t\t\t   __A4, __A5, __A6, __A7,\n+\t\t\t\t\t   __A8, __A9, __A10, __A11,\n+\t\t\t\t\t   __A12, __A13, __A14, __A15,\n+\t\t\t\t\t   __A16, __A17, __A18, __A19,\n+\t\t\t\t\t   __A20, __A21, __A22, __A23,\n+\t\t\t\t\t   __A24, __A25, __A26, __A27,\n+\t\t\t\t\t   __A28, __A29, __A30, __A31 };\n+}\n+\n+/* Create vectors of elements in the reversed order from _mm_set_ph,\n+   _mm256_set_ph and _mm512_set_ph functions.  */\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_setr_ph (_Float16 __A0, _Float16 __A1, _Float16 __A2,\n+\t     _Float16 __A3, _Float16 __A4, _Float16 __A5,\n+\t     _Float16 __A6, _Float16 __A7)\n+{\n+  return _mm_set_ph (__A7, __A6, __A5, __A4, __A3, __A2, __A1, __A0);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_setr_ph (_Float16 __A0, _Float16 __A1, _Float16 __A2,\n+\t\t_Float16 __A3, _Float16 __A4, _Float16 __A5,\n+\t\t_Float16 __A6, _Float16 __A7, _Float16 __A8,\n+\t\t_Float16 __A9, _Float16 __A10, _Float16 __A11,\n+\t\t_Float16 __A12, _Float16 __A13, _Float16 __A14,\n+\t\t_Float16 __A15)\n+{\n+  return _mm256_set_ph (__A15, __A14, __A13, __A12, __A11, __A10, __A9,\n+\t\t\t__A8, __A7, __A6, __A5, __A4, __A3, __A2, __A1,\n+\t\t\t__A0);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_setr_ph (_Float16 __A0, _Float16 __A1, _Float16 __A2,\n+\t\t_Float16 __A3, _Float16 __A4, _Float16 __A5,\n+\t\t_Float16 __A6, _Float16 __A7, _Float16 __A8,\n+\t\t_Float16 __A9, _Float16 __A10, _Float16 __A11,\n+\t\t_Float16 __A12, _Float16 __A13, _Float16 __A14,\n+\t\t_Float16 __A15, _Float16 __A16, _Float16 __A17,\n+\t\t_Float16 __A18, _Float16 __A19, _Float16 __A20,\n+\t\t_Float16 __A21, _Float16 __A22, _Float16 __A23,\n+\t\t_Float16 __A24, _Float16 __A25, _Float16 __A26,\n+\t\t_Float16 __A27, _Float16 __A28, _Float16 __A29,\n+\t\t_Float16 __A30, _Float16 __A31)\n+\n+{\n+  return _mm512_set_ph (__A31, __A30, __A29, __A28, __A27, __A26, __A25,\n+\t\t\t__A24, __A23, __A22, __A21, __A20, __A19, __A18,\n+\t\t\t__A17, __A16, __A15, __A14, __A13, __A12, __A11,\n+\t\t\t__A10, __A9, __A8, __A7, __A6, __A5, __A4, __A3,\n+\t\t\t__A2, __A1, __A0);\n+}\n+\n+/* Broadcast _Float16 to vector.  */\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_set1_ph (_Float16 __A)\n+{\n+  return _mm_set_ph (__A, __A, __A, __A, __A, __A, __A, __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_set1_ph (_Float16 __A)\n+{\n+  return _mm256_set_ph (__A, __A, __A, __A, __A, __A, __A, __A,\n+\t\t\t__A, __A, __A, __A, __A, __A, __A, __A);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_set1_ph (_Float16 __A)\n+{\n+  return _mm512_set_ph (__A, __A, __A, __A, __A, __A, __A, __A,\n+\t\t\t__A, __A, __A, __A, __A, __A, __A, __A,\n+\t\t\t__A, __A, __A, __A, __A, __A, __A, __A,\n+\t\t\t__A, __A, __A, __A, __A, __A, __A, __A);\n+}\n+\n+/* Create a vector with all zeros.  */\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_setzero_ph (void)\n+{\n+  return _mm_set1_ph (0.0f);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_setzero_ph (void)\n+{\n+  return _mm256_set1_ph (0.0f);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_setzero_ph (void)\n+{\n+  return _mm512_set1_ph (0.0f);\n+}\n+\n+/* Create a vector with element 0 as F and the rest zero.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_set_sh (_Float16 __F)\n+{\n+  return _mm_set_ph (0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, __F);\n+}\n+\n+/* Create a vector with element 0 as *P and the rest zero.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_load_sh (void const *__P)\n+{\n+  return _mm_set_ph (0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     *(_Float16 const *) __P);\n+}\n+\n+/* Stores the lower _Float16 value.  */\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_store_sh (void *__P, __m128h __A)\n+{\n+  *(_Float16 *) __P = ((__v8hf)__A)[0];\n+}\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "4df6ee1009dfdfb9b84e1a10f836ecf9592e4176", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "patch": "@@ -85,6 +85,7 @@ DEF_VECTOR_TYPE (V8QI, QI)\n # SSE vectors\n DEF_VECTOR_TYPE (V2DF, DOUBLE)\n DEF_VECTOR_TYPE (V4SF, FLOAT)\n+DEF_VECTOR_TYPE (V8HF, FLOAT16)\n DEF_VECTOR_TYPE (V2DI, DI)\n DEF_VECTOR_TYPE (V4SI, SI)\n DEF_VECTOR_TYPE (V8HI, HI)\n@@ -1297,4 +1298,7 @@ DEF_FUNCTION_TYPE (UINT, UINT, V2DI, V2DI, PVOID)\n DEF_FUNCTION_TYPE (UINT, UINT, V2DI, PVOID)\n DEF_FUNCTION_TYPE (VOID, V2DI, V2DI, V2DI, UINT)\n DEF_FUNCTION_TYPE (UINT8, PV2DI, V2DI, PCVOID)\n-DEF_FUNCTION_TYPE (UINT8, PV2DI, PCV2DI, PCVOID)\n\\ No newline at end of file\n+DEF_FUNCTION_TYPE (UINT8, PV2DI, PCV2DI, PCVOID)\n+\n+# FP16 builtins\n+DEF_FUNCTION_TYPE (V8HF, V8HI)"}, {"sha": "dfffbe598d456598d83e0e41e10cbb0c67641d1a", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 118, "deletions": 6, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "patch": "@@ -3989,6 +3989,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       break;\n     case E_V16QImode:\n     case E_V8HImode:\n+    case E_V8HFmode:\n     case E_V4SImode:\n     case E_V2DImode:\n       if (TARGET_SSE4_1)\n@@ -4011,6 +4012,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       break;\n     case E_V32QImode:\n     case E_V16HImode:\n+    case E_V16HFmode:\n     case E_V8SImode:\n     case E_V4DImode:\n       if (TARGET_AVX2)\n@@ -4030,6 +4032,9 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n     case E_V32HImode:\n       gen = gen_avx512bw_blendmv32hi;\n       break;\n+    case E_V32HFmode:\n+      gen = gen_avx512bw_blendmv32hf;\n+      break;\n     case E_V16SImode:\n       gen = gen_avx512f_blendmv16si;\n       break;\n@@ -14228,6 +14233,11 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, machine_mode mode,\n \t}\n       return true;\n \n+    case E_V8HFmode:\n+    case E_V16HFmode:\n+    case E_V32HFmode:\n+      return ix86_vector_duplicate_value (mode, target, val);\n+\n     default:\n       return false;\n     }\n@@ -14312,6 +14322,18 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, machine_mode mode,\n       use_vector_set = TARGET_AVX512F && TARGET_64BIT && one_var == 0;\n       gen_vec_set_0 = gen_vec_setv8di_0;\n       break;\n+    case E_V8HFmode:\n+      use_vector_set = TARGET_AVX512FP16 && one_var == 0;\n+      gen_vec_set_0 = gen_vec_setv8hf_0;\n+      break;\n+    case E_V16HFmode:\n+      use_vector_set = TARGET_AVX512FP16 && one_var == 0;\n+      gen_vec_set_0 = gen_vec_setv16hf_0;\n+      break;\n+    case E_V32HFmode:\n+      use_vector_set = TARGET_AVX512FP16 && one_var == 0;\n+      gen_vec_set_0 = gen_vec_setv32hf_0;\n+      break;\n     default:\n       break;\n     }\n@@ -14461,6 +14483,8 @@ ix86_expand_vector_init_one_var (bool mmx_ok, machine_mode mode,\n       if (!TARGET_64BIT)\n \treturn false;\n       /* FALLTHRU */\n+    case E_V8HFmode:\n+    case E_V16HFmode:\n     case E_V4DFmode:\n     case E_V8SFmode:\n     case E_V8SImode:\n@@ -14541,6 +14565,9 @@ ix86_expand_vector_init_concat (machine_mode mode,\n     case 2:\n       switch (mode)\n \t{\n+\tcase E_V32HFmode:\n+\t  half_mode = V16HFmode;\n+\t  break;\n \tcase E_V16SImode:\n \t  half_mode = V8SImode;\n \t  break;\n@@ -14553,6 +14580,9 @@ ix86_expand_vector_init_concat (machine_mode mode,\n \tcase E_V8DFmode:\n \t  half_mode = V4DFmode;\n \t  break;\n+\tcase E_V16HFmode:\n+\t  half_mode = V8HFmode;\n+\t  break;\n \tcase E_V8SImode:\n \t  half_mode = V4SImode;\n \t  break;\n@@ -14695,13 +14725,22 @@ ix86_expand_vector_init_interleave (machine_mode mode,\n {\n   machine_mode first_imode, second_imode, third_imode, inner_mode;\n   int i, j;\n-  rtx op0, op1;\n+  rtx op, op0, op1;\n   rtx (*gen_load_even) (rtx, rtx, rtx);\n   rtx (*gen_interleave_first_low) (rtx, rtx, rtx);\n   rtx (*gen_interleave_second_low) (rtx, rtx, rtx);\n \n   switch (mode)\n     {\n+    case E_V8HFmode:\n+      gen_load_even = gen_vec_setv8hf;\n+      gen_interleave_first_low = gen_vec_interleave_lowv4si;\n+      gen_interleave_second_low = gen_vec_interleave_lowv2di;\n+      inner_mode = HFmode;\n+      first_imode = V4SImode;\n+      second_imode = V2DImode;\n+      third_imode = VOIDmode;\n+      break;\n     case E_V8HImode:\n       gen_load_even = gen_vec_setv8hi;\n       gen_interleave_first_low = gen_vec_interleave_lowv4si;\n@@ -14726,9 +14765,19 @@ ix86_expand_vector_init_interleave (machine_mode mode,\n \n   for (i = 0; i < n; i++)\n     {\n+      op = ops [i + i];\n+      if (inner_mode == HFmode)\n+\t{\n+\t  /* Convert HFmode to HImode.  */\n+\t  op1 = gen_reg_rtx (HImode);\n+\t  op1 = gen_rtx_SUBREG (HImode, force_reg (HFmode, op), 0);\n+\t  op = gen_reg_rtx (HImode);\n+\t  emit_move_insn (op, op1);\n+\t}\n+\n       /* Extend the odd elment to SImode using a paradoxical SUBREG.  */\n       op0 = gen_reg_rtx (SImode);\n-      emit_move_insn (op0, gen_lowpart (SImode, ops [i + i]));\n+      emit_move_insn (op0, gen_lowpart (SImode, op));\n \n       /* Insert the SImode value as low element of V4SImode vector. */\n       op1 = gen_reg_rtx (V4SImode);\n@@ -14865,6 +14914,10 @@ ix86_expand_vector_init_general (bool mmx_ok, machine_mode mode,\n       half_mode = V8HImode;\n       goto half;\n \n+    case E_V16HFmode:\n+      half_mode = V8HFmode;\n+      goto half;\n+\n half:\n       n = GET_MODE_NUNITS (mode);\n       for (i = 0; i < n; i++)\n@@ -14888,6 +14941,11 @@ ix86_expand_vector_init_general (bool mmx_ok, machine_mode mode,\n       half_mode = V16HImode;\n       goto quarter;\n \n+    case E_V32HFmode:\n+      quarter_mode = V8HFmode;\n+      half_mode = V16HFmode;\n+      goto quarter;\n+\n quarter:\n       n = GET_MODE_NUNITS (mode);\n       for (i = 0; i < n; i++)\n@@ -14924,6 +14982,9 @@ ix86_expand_vector_init_general (bool mmx_ok, machine_mode mode,\n \t move from GPR to SSE register directly.  */\n       if (!TARGET_INTER_UNIT_MOVES_TO_VEC)\n \tbreak;\n+      /* FALLTHRU */\n+\n+    case E_V8HFmode:\n \n       n = GET_MODE_NUNITS (mode);\n       for (i = 0; i < n; i++)\n@@ -15171,6 +15232,16 @@ ix86_expand_vector_set_var (rtx target, rtx val, rtx idx)\n \tcase E_V16SFmode:\n \t  cmp_mode = V16SImode;\n \t  break;\n+\t/* TARGET_AVX512FP16 implies TARGET_AVX512BW.  */\n+\tcase E_V8HFmode:\n+\t  cmp_mode = V8HImode;\n+\t  break;\n+\tcase E_V16HFmode:\n+\t  cmp_mode = V16HImode;\n+\t  break;\n+\tcase E_V32HFmode:\n+\t  cmp_mode = V32HImode;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -15207,23 +15278,25 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n   machine_mode half_mode;\n   bool use_vec_merge = false;\n   rtx tmp;\n-  static rtx (*gen_extract[6][2]) (rtx, rtx)\n+  static rtx (*gen_extract[7][2]) (rtx, rtx)\n     = {\n \t{ gen_vec_extract_lo_v32qi, gen_vec_extract_hi_v32qi },\n \t{ gen_vec_extract_lo_v16hi, gen_vec_extract_hi_v16hi },\n \t{ gen_vec_extract_lo_v8si, gen_vec_extract_hi_v8si },\n \t{ gen_vec_extract_lo_v4di, gen_vec_extract_hi_v4di },\n \t{ gen_vec_extract_lo_v8sf, gen_vec_extract_hi_v8sf },\n-\t{ gen_vec_extract_lo_v4df, gen_vec_extract_hi_v4df }\n+\t{ gen_vec_extract_lo_v4df, gen_vec_extract_hi_v4df },\n+\t{ gen_vec_extract_lo_v16hf, gen_vec_extract_hi_v16hf }\n       };\n-  static rtx (*gen_insert[6][2]) (rtx, rtx, rtx)\n+  static rtx (*gen_insert[7][2]) (rtx, rtx, rtx)\n     = {\n \t{ gen_vec_set_lo_v32qi, gen_vec_set_hi_v32qi },\n \t{ gen_vec_set_lo_v16hi, gen_vec_set_hi_v16hi },\n \t{ gen_vec_set_lo_v8si, gen_vec_set_hi_v8si },\n \t{ gen_vec_set_lo_v4di, gen_vec_set_hi_v4di },\n \t{ gen_vec_set_lo_v8sf, gen_vec_set_hi_v8sf },\n-\t{ gen_vec_set_lo_v4df, gen_vec_set_hi_v4df }\n+\t{ gen_vec_set_lo_v4df, gen_vec_set_hi_v4df },\n+\t{ gen_vec_set_lo_v16hf, gen_vec_set_hi_v16hf },\n       };\n   int i, j, n;\n   machine_mode mmode = VOIDmode;\n@@ -15390,6 +15463,10 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t}\n       return;\n \n+    case E_V8HFmode:\n+      use_vec_merge = true;\n+      break;\n+\n     case E_V8HImode:\n     case E_V2HImode:\n       use_vec_merge = TARGET_SSE2;\n@@ -15413,6 +15490,12 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       n = 16;\n       goto half;\n \n+    case E_V16HFmode:\n+      half_mode = V8HFmode;\n+      j = 6;\n+      n = 8;\n+      goto half;\n+\n     case E_V16HImode:\n       half_mode = V8HImode;\n       j = 1;\n@@ -15493,6 +15576,13 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t}\n       break;\n \n+    case E_V32HFmode:\n+      if (TARGET_AVX512BW)\n+\t{\n+\t  mmode = SImode;\n+\t  gen_blendm = gen_avx512bw_blendmv32hf;\n+\t}\n+      break;\n     case E_V32HImode:\n       if (TARGET_AVX512BW)\n \t{\n@@ -15864,6 +15954,28 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n       ix86_expand_vector_extract (false, target, tmp, elt & 3);\n       return;\n \n+    case E_V32HFmode:\n+      tmp = gen_reg_rtx (V16HFmode);\n+      if (elt < 16)\n+\temit_insn (gen_vec_extract_lo_v32hf (tmp, vec));\n+      else\n+\temit_insn (gen_vec_extract_hi_v32hf (tmp, vec));\n+      ix86_expand_vector_extract (false, target, tmp, elt & 15);\n+      return;\n+\n+    case E_V16HFmode:\n+      tmp = gen_reg_rtx (V8HFmode);\n+      if (elt < 8)\n+\temit_insn (gen_vec_extract_lo_v16hf (tmp, vec));\n+      else\n+\temit_insn (gen_vec_extract_hi_v16hf (tmp, vec));\n+      ix86_expand_vector_extract (false, target, tmp, elt & 7);\n+      return;\n+\n+    case E_V8HFmode:\n+      use_vec_extr = true;\n+      break;\n+\n     case E_V8QImode:\n       use_vec_extr = TARGET_MMX_WITH_SSE && TARGET_SSE4_1;\n       /* ??? Could extract the appropriate HImode element and shift.  */"}, {"sha": "fcadfcd4c9404b11cdeb7e93f331a6eafa24d108", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "patch": "@@ -84,12 +84,12 @@ VECTOR_MODES (INT, 16);       /*   V16QI V8HI V4SI V2DI */\n VECTOR_MODES (INT, 32);       /*  V32QI V16HI V8SI V4DI */\n VECTOR_MODES (INT, 64);       /* V64QI V32HI V16SI V8DI */\n VECTOR_MODES (INT, 128);      /* V128QI V64HI V32SI V16DI */\n-VECTOR_MODES (FLOAT, 8);      /*                   V2SF */\n-VECTOR_MODES (FLOAT, 16);     /*              V4SF V2DF */\n-VECTOR_MODES (FLOAT, 32);     /*         V8SF V4DF V2TF */\n-VECTOR_MODES (FLOAT, 64);     /*        V16SF V8DF V4TF */\n-VECTOR_MODES (FLOAT, 128);    /*       V32SF V16DF V8TF */\n-VECTOR_MODES (FLOAT, 256);    /*      V64SF V32DF V16TF */\n+VECTOR_MODES (FLOAT, 8);      /*              V4HF V2SF */\n+VECTOR_MODES (FLOAT, 16);     /*         V8HF V4SF V2DF */\n+VECTOR_MODES (FLOAT, 32);     /*   V16HF V8SF V4DF V2TF */\n+VECTOR_MODES (FLOAT, 64);     /*  V32HF V16SF V8DF V4TF */\n+VECTOR_MODES (FLOAT, 128);    /* V64HF V32SF V16DF V8TF */\n+VECTOR_MODES (FLOAT, 256);    /* V128HF V64SF V32DF V16TF */\n VECTOR_MODE (INT, TI, 1);     /*                   V1TI */\n VECTOR_MODE (INT, DI, 1);     /*                   V1DI */\n VECTOR_MODE (INT, SI, 1);     /*                   V1SI */"}, {"sha": "dc649f96d0df29bd450641aaf96c29e7e0dca365", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "patch": "@@ -2422,6 +2422,7 @@ classify_argument (machine_mode mode, const_tree type,\n     case E_V8SFmode:\n     case E_V8SImode:\n     case E_V32QImode:\n+    case E_V16HFmode:\n     case E_V16HImode:\n     case E_V4DFmode:\n     case E_V4DImode:\n@@ -2432,6 +2433,7 @@ classify_argument (machine_mode mode, const_tree type,\n       return 4;\n     case E_V8DFmode:\n     case E_V16SFmode:\n+    case E_V32HFmode:\n     case E_V8DImode:\n     case E_V16SImode:\n     case E_V32HImode:\n@@ -2449,6 +2451,7 @@ classify_argument (machine_mode mode, const_tree type,\n     case E_V4SImode:\n     case E_V16QImode:\n     case E_V8HImode:\n+    case E_V8HFmode:\n     case E_V2DFmode:\n     case E_V2DImode:\n       classes[0] = X86_64_SSE_CLASS;\n@@ -2862,12 +2865,14 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \tbreak;\n       /* FALLTHRU */\n \n+    case E_V16HFmode:\n     case E_V8SFmode:\n     case E_V8SImode:\n     case E_V64QImode:\n     case E_V32HImode:\n     case E_V16SImode:\n     case E_V8DImode:\n+    case E_V32HFmode:\n     case E_V16SFmode:\n     case E_V8DFmode:\n     case E_V32QImode:\n@@ -2879,6 +2884,7 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n     case E_V8HImode:\n     case E_V4SImode:\n     case E_V2DImode:\n+    case E_V8HFmode:\n     case E_V4SFmode:\n     case E_V2DFmode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n@@ -2933,7 +2939,9 @@ function_arg_advance_64 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \n   /* Unnamed 512 and 256bit vector mode parameters are passed on stack.  */\n   if (!named && (VALID_AVX512F_REG_MODE (mode)\n-\t\t || VALID_AVX256_REG_MODE (mode)))\n+\t\t || VALID_AVX256_REG_MODE (mode)\n+\t\t || mode == V16HFmode\n+\t\t || mode == V32HFmode))\n     return 0;\n \n   if (!examine_argument (mode, type, 0, &int_nregs, &sse_nregs)\n@@ -3101,6 +3109,7 @@ function_arg_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n     case E_V8HImode:\n     case E_V4SImode:\n     case E_V2DImode:\n+    case E_V8HFmode:\n     case E_V4SFmode:\n     case E_V2DFmode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n@@ -3120,8 +3129,10 @@ function_arg_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n     case E_V32HImode:\n     case E_V16SImode:\n     case E_V8DImode:\n+    case E_V32HFmode:\n     case E_V16SFmode:\n     case E_V8DFmode:\n+    case E_V16HFmode:\n     case E_V8SFmode:\n     case E_V8SImode:\n     case E_V32QImode:\n@@ -3180,12 +3191,14 @@ function_arg_64 (const CUMULATIVE_ARGS *cum, machine_mode mode,\n     default:\n       break;\n \n+    case E_V16HFmode:\n     case E_V8SFmode:\n     case E_V8SImode:\n     case E_V32QImode:\n     case E_V16HImode:\n     case E_V4DFmode:\n     case E_V4DImode:\n+    case E_V32HFmode:\n     case E_V16SFmode:\n     case E_V16SImode:\n     case E_V64QImode:\n@@ -4680,12 +4693,14 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   nat_mode = type_natural_mode (type, NULL, false);\n   switch (nat_mode)\n     {\n+    case E_V16HFmode:\n     case E_V8SFmode:\n     case E_V8SImode:\n     case E_V32QImode:\n     case E_V16HImode:\n     case E_V4DFmode:\n     case E_V4DImode:\n+    case E_V32HFmode:\n     case E_V16SFmode:\n     case E_V16SImode:\n     case E_V64QImode:\n@@ -5359,7 +5374,12 @@ ix86_get_ssemov (rtx *operands, unsigned size,\n       switch (type)\n \t{\n \tcase opcode_int:\n-\t  opcode = misaligned_p ? \"vmovdqu32\" : \"vmovdqa32\";\n+\t  if (scalar_mode == E_HFmode)\n+\t    opcode = (misaligned_p\n+\t\t      ? (TARGET_AVX512BW ? \"vmovdqu16\" : \"vmovdqu64\")\n+\t\t      : \"vmovdqa64\");\n+\t  else\n+\t    opcode = misaligned_p ? \"vmovdqu32\" : \"vmovdqa32\";\n \t  break;\n \tcase opcode_float:\n \t  opcode = misaligned_p ? \"vmovups\" : \"vmovaps\";\n@@ -5373,6 +5393,11 @@ ix86_get_ssemov (rtx *operands, unsigned size,\n     {\n       switch (scalar_mode)\n \t{\n+\tcase E_HFmode:\n+\t  opcode = (misaligned_p\n+\t\t    ? (TARGET_AVX512BW ? \"vmovdqu16\" : \"vmovdqu64\")\n+\t\t    : \"vmovdqa64\");\n+\t  break;\n \tcase E_SFmode:\n \t  opcode = misaligned_p ? \"%vmovups\" : \"%vmovaps\";\n \t  break;\n@@ -19479,7 +19504,6 @@ inline_memory_move_cost (machine_mode mode, enum reg_class regclass, int in)\n       int index;\n       switch (mode)\n \t{\n-\t  case E_HFmode:\n \t  case E_SFmode:\n \t    index = 0;\n \t    break;\n@@ -19783,6 +19807,7 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \t between gpr and sse registser.  */\n       if (TARGET_AVX512F\n \t  && (mode == XImode\n+\t      || mode == V32HFmode\n \t      || VALID_AVX512F_REG_MODE (mode)\n \t      || VALID_AVX512F_SCALAR_MODE (mode)))\n \treturn true;\n@@ -19797,9 +19822,7 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n       /* TODO check for QI/HI scalars.  */\n       /* AVX512VL allows sse regs16+ for 128/256 bit modes.  */\n       if (TARGET_AVX512VL\n-\t  && (mode == OImode\n-\t      || mode == TImode\n-\t      || VALID_AVX256_REG_MODE (mode)\n+\t  && (VALID_AVX256_REG_OR_OI_VHF_MODE (mode)\n \t      || VALID_AVX512VL_128_REG_MODE (mode)))\n \treturn true;\n \n@@ -19809,9 +19832,9 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \n       /* OImode and AVX modes are available only when AVX is enabled.  */\n       return ((TARGET_AVX\n-\t       && VALID_AVX256_REG_OR_OI_MODE (mode))\n+\t       && VALID_AVX256_REG_OR_OI_VHF_MODE (mode))\n \t      || VALID_SSE_REG_MODE (mode)\n-\t      || VALID_SSE2_REG_MODE (mode)\n+\t      || VALID_SSE2_REG_VHF_MODE (mode)\n \t      || VALID_MMX_REG_MODE (mode)\n \t      || VALID_MMX_REG_MODE_3DNOW (mode));\n     }\n@@ -20022,7 +20045,8 @@ ix86_set_reg_reg_cost (machine_mode mode)\n \n     case MODE_VECTOR_INT:\n     case MODE_VECTOR_FLOAT:\n-      if ((TARGET_AVX512F && VALID_AVX512F_REG_MODE (mode))\n+      if ((TARGET_AVX512FP16 && VALID_AVX512FP16_REG_MODE (mode))\n+\t  || (TARGET_AVX512F && VALID_AVX512F_REG_MODE (mode))\n \t  || (TARGET_AVX && VALID_AVX256_REG_MODE (mode))\n \t  || (TARGET_SSE2 && VALID_SSE2_REG_MODE (mode))\n \t  || (TARGET_SSE && VALID_SSE_REG_MODE (mode))\n@@ -21935,6 +21959,8 @@ ix86_vector_mode_supported_p (machine_mode mode)\n   if ((TARGET_MMX || TARGET_MMX_WITH_SSE)\n       && VALID_MMX_REG_MODE (mode))\n     return true;\n+  if (TARGET_AVX512FP16 && VALID_AVX512FP16_REG_MODE (mode))\n+    return true;\n   if ((TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n       && VALID_MMX_REG_MODE_3DNOW (mode))\n     return true;"}, {"sha": "73237b81cf814382f65cd8fa3f5721522bf6a832", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "patch": "@@ -1002,8 +1002,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V4DImode || (MODE) == V2TImode || (MODE) == V8SFmode\t\\\n    || (MODE) == V4DFmode)\n \n-#define VALID_AVX256_REG_OR_OI_MODE(MODE)\t\t\\\n-  (VALID_AVX256_REG_MODE (MODE) || (MODE) == OImode)\n+#define VALID_AVX256_REG_OR_OI_VHF_MODE(MODE)\t\t\\\n+  (VALID_AVX256_REG_MODE (MODE) || (MODE) == OImode || (MODE) == V16HFmode)\n \n #define VALID_AVX512F_SCALAR_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == DImode || (MODE) == DFmode || (MODE) == SImode\t\t\\\n@@ -1021,13 +1021,20 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define VALID_AVX512VL_128_REG_MODE(MODE)\t\t\t\t\\\n   ((MODE) == V2DImode || (MODE) == V2DFmode || (MODE) == V16QImode\t\\\n    || (MODE) == V4SImode || (MODE) == V4SFmode || (MODE) == V8HImode\t\\\n-   || (MODE) == TFmode || (MODE) == V1TImode)\n+   || (MODE) == TFmode || (MODE) == V1TImode || (MODE) == V8HFmode\t\\\n+   || (MODE) == TImode)\n+\n+#define VALID_AVX512FP16_REG_MODE(MODE)\t\t\t\t\t\\\n+  ((MODE) == V8HFmode || (MODE) == V16HFmode || (MODE) == V32HFmode)\n \n #define VALID_SSE2_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n    || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n    || (MODE) == V2DImode || (MODE) == DFmode || (MODE) == HFmode)\n \n+#define VALID_SSE2_REG_VHF_MODE(MODE)\t\t\t\\\n+  (VALID_SSE2_REG_MODE (MODE) || (MODE) == V8HFmode)\n+\n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V1TImode || (MODE) == TImode\t\t\t\t\\\n    || (MODE) == V4SFmode || (MODE) == V4SImode\t\t\t\t\\\n@@ -1072,7 +1079,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V4DImode || (MODE) == V8SFmode || (MODE) == V4DFmode\t\\\n    || (MODE) == V2TImode || (MODE) == V8DImode || (MODE) == V64QImode\t\\\n    || (MODE) == V16SImode || (MODE) == V32HImode || (MODE) == V8DFmode\t\\\n-   || (MODE) == V16SFmode)\n+   || (MODE) == V16SFmode || VALID_AVX512FP16_REG_MODE (MODE))\n \n #define X87_FLOAT_MODE_P(MODE)\t\\\n   (TARGET_80387 && ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode))"}, {"sha": "fe36d7ede4e68033621e8cfa853ab5efaa730355", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "patch": "@@ -499,8 +499,8 @@\n \n ;; Main data type used by the insn\n (define_attr \"mode\"\n-  \"unknown,none,QI,HI,SI,DI,TI,OI,XI,HF,SF,DF,XF,TF,V16SF,V8SF,V4DF,V4SF,\n-  V2DF,V2SF,V1DF,V8DF\"\n+  \"unknown,none,QI,HI,SI,DI,TI,OI,XI,HF,SF,DF,XF,TF,V32HF,V16HF,V8HF,\n+   V16SF,V8SF,V4DF,V4SF,V2DF,V2SF,V1DF,V8DF\"\n   (const_string \"unknown\"))\n \n ;; The CPU unit operations uses.\n@@ -1105,7 +1105,8 @@\n \t\t\t     (V2DI \"16\") (V4DI \"32\") (V8DI \"64\")\n \t\t\t     (V1TI \"16\") (V2TI \"32\") (V4TI \"64\")\n \t\t\t     (V2DF \"16\") (V4DF \"32\") (V8DF \"64\")\n-\t\t\t     (V4SF \"16\") (V8SF \"32\") (V16SF \"64\")])\n+\t\t\t     (V4SF \"16\") (V8SF \"32\") (V16SF \"64\")\n+\t\t\t     (V8HF \"16\") (V16HF \"32\") (V32HF \"64\")])\n \n ;; Double word integer modes as mode attribute.\n (define_mode_attr DWI [(QI \"HI\") (HI \"SI\") (SI \"DI\") (DI \"TI\") (TI \"OI\")])\n@@ -1241,9 +1242,9 @@\n ;; SSE instruction suffix for various modes\n (define_mode_attr ssemodesuffix\n   [(HF \"sh\") (SF \"ss\") (DF \"sd\")\n-   (V16SF \"ps\") (V8DF \"pd\")\n-   (V8SF \"ps\") (V4DF \"pd\")\n-   (V4SF \"ps\") (V2DF \"pd\")\n+   (V32HF \"ph\") (V16SF \"ps\") (V8DF \"pd\")\n+   (V16HF \"ph\") (V8SF \"ps\") (V4DF \"pd\")\n+   (V8HF \"ph\") (V4SF \"ps\") (V2DF \"pd\")\n    (V16QI \"b\") (V8HI \"w\") (V4SI \"d\") (V2DI \"q\")\n    (V32QI \"b\") (V16HI \"w\") (V8SI \"d\") (V4DI \"q\")\n    (V64QI \"b\") (V32HI \"w\") (V16SI \"d\") (V8DI \"q\")])"}, {"sha": "a1ad410cb7cbe0d81f4e65939a2e8db08f009212", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 304, "deletions": 100, "changes": 404, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "patch": "@@ -222,6 +222,7 @@\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\")  (V4DI \"TARGET_AVX\") V2DI\n    (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\") V1TI\n+   (V32HF \"TARGET_AVX512F\") (V16HF \"TARGET_AVX\") V8HF\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\")  (V4DF \"TARGET_AVX\") V2DF])\n \n@@ -237,6 +238,13 @@\n   [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")\n    V32HI (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")])\n \n+(define_mode_iterator VI12HF_AVX512VL\n+  [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")\n+   V32HI (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")\n+   (V32HF \"TARGET_AVX512FP16\")\n+   (V16HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   (V8HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")])\n+\n ;; Same iterator, but without supposed TARGET_AVX512BW\n (define_mode_iterator VI12_AVX512VLBW\n   [(V64QI \"TARGET_AVX512BW\") (V16QI \"TARGET_AVX512VL\")\n@@ -252,6 +260,8 @@\n    (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\")  (V4DI \"TARGET_AVX\") V2DI\n+   (V32HF \"TARGET_AVX512FP16\") (V16HF \"TARGET_AVX512FP16\")\n+   (V8HF \"TARGET_AVX512FP16\")\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\")  (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n \n@@ -274,7 +284,8 @@\n (define_mode_iterator V_256_512\n   [V32QI V16HI V8SI V4DI V8SF V4DF\n    (V64QI \"TARGET_AVX512F\") (V32HI \"TARGET_AVX512F\") (V16SI \"TARGET_AVX512F\")\n-   (V8DI \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\") (V8DF \"TARGET_AVX512F\")])\n+   (V8DI \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\") (V8DF \"TARGET_AVX512F\")\n+   (V16HF \"TARGET_AVX512FP16\") (V32HF \"TARGET_AVX512FP16\")])\n \n ;; All vector float modes\n (define_mode_iterator VF\n@@ -318,6 +329,11 @@\n (define_mode_iterator VF_128\n   [V4SF (V2DF \"TARGET_SSE2\")])\n \n+;; All 128bit vector HF/SF/DF modes\n+(define_mode_iterator VFH_128\n+  [(V8HF \"TARGET_AVX512FP16\")\n+   V4SF (V2DF \"TARGET_SSE2\")])\n+\n ;; All 256bit vector float modes\n (define_mode_iterator VF_256\n   [V8SF V4DF])\n@@ -352,6 +368,9 @@\n (define_mode_iterator VF1_AVX512VL\n   [V16SF (V8SF \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")])\n \n+(define_mode_iterator VF_AVX512FP16\n+  [V32HF V16HF V8HF])\n+\n ;; All vector integer modes\n (define_mode_iterator VI\n   [(V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\")\n@@ -360,6 +379,16 @@\n    (V8SI \"TARGET_AVX\") V4SI\n    (V4DI \"TARGET_AVX\") V2DI])\n \n+;; All vector integer and HF modes\n+(define_mode_iterator VIHF\n+  [(V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\")\n+   (V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX\") V16QI\n+   (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX\") V8HI\n+   (V8SI \"TARGET_AVX\") V4SI\n+   (V4DI \"TARGET_AVX\") V2DI\n+   (V32HF \"TARGET_AVX512FP16\") (V16HF \"TARGET_AVX512FP16\")\n+   (V8HF \"TARGET_AVX512FP16\")])\n+\n (define_mode_iterator VI_AVX2\n   [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX2\") V16QI\n    (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX2\") V8HI\n@@ -569,6 +598,7 @@\n    (V8HI  \"avx512vl\") (V16HI  \"avx512vl\") (V32HI \"avx512bw\")\n    (V4SI  \"avx512vl\") (V8SI  \"avx512vl\") (V16SI \"avx512f\")\n    (V2DI  \"avx512vl\") (V4DI  \"avx512vl\") (V8DI \"avx512f\")\n+   (V8HF \"avx512fp16\") (V16HF \"avx512vl\") (V32HF \"avx512bw\")\n    (V4SF \"avx512vl\") (V8SF \"avx512vl\") (V16SF \"avx512f\")\n    (V2DF \"avx512vl\") (V4DF \"avx512vl\") (V8DF \"avx512f\")])\n \n@@ -629,12 +659,13 @@\n    (V8HI \"avx512vl\") (V16HI \"avx512vl\") (V32HI \"avx512bw\")])\n \n (define_mode_attr shuffletype\n-  [(V16SF \"f\") (V16SI \"i\") (V8DF \"f\") (V8DI \"i\")\n-  (V8SF \"f\") (V8SI \"i\") (V4DF \"f\") (V4DI \"i\")\n-  (V4SF \"f\") (V4SI \"i\") (V2DF \"f\") (V2DI \"i\")\n-  (V32HI \"i\") (V16HI \"i\") (V8HI \"i\")\n-  (V64QI \"i\") (V32QI \"i\") (V16QI \"i\")\n-  (V4TI \"i\") (V2TI \"i\") (V1TI \"i\")])\n+  [(V32HF \"f\") (V16HF \"f\") (V8HF \"f\")\n+   (V16SF \"f\") (V16SI \"i\") (V8DF \"f\") (V8DI \"i\")\n+   (V8SF \"f\") (V8SI \"i\") (V4DF \"f\") (V4DI \"i\")\n+   (V4SF \"f\") (V4SI \"i\") (V2DF \"f\") (V2DI \"i\")\n+   (V32HI \"i\") (V16HI \"i\") (V8HI \"i\")\n+   (V64QI \"i\") (V32QI \"i\") (V16QI \"i\")\n+   (V4TI \"i\") (V2TI \"i\") (V1TI \"i\")])\n \n (define_mode_attr ssequartermode\n   [(V16SF \"V4SF\") (V8DF \"V2DF\") (V16SI \"V4SI\") (V8DI \"V2DI\")])\n@@ -671,6 +702,8 @@\n \n ;; All 128 and 256bit vector integer modes\n (define_mode_iterator VI_128_256 [V16QI V8HI V4SI V2DI V32QI V16HI V8SI V4DI])\n+;; All 256bit vector integer and HF modes\n+(define_mode_iterator VIHF_256 [V32QI V16HI V8SI V4DI V16HF])\n \n ;; Various 128bit vector integer mode combinations\n (define_mode_iterator VI12_128 [V16QI V8HI])\n@@ -697,6 +730,9 @@\n (define_mode_iterator VI4_256_8_512 [V8SI V8DI])\n (define_mode_iterator VI_AVX512BW\n   [V16SI V8DI (V32HI \"TARGET_AVX512BW\") (V64QI \"TARGET_AVX512BW\")])\n+(define_mode_iterator VIHF_AVX512BW\n+  [V16SI V8DI (V32HI \"TARGET_AVX512BW\") (V64QI \"TARGET_AVX512BW\")\n+  (V32HF \"TARGET_AVX512FP16\")])\n \n ;; Int-float size matches\n (define_mode_iterator VI4F_128 [V4SI V4SF])\n@@ -737,6 +773,9 @@\n    (V8SF \"TARGET_AVX512VL\") (V4DF \"TARGET_AVX512VL\")\n    V16SF V8DF])\n \n+(define_mode_iterator V16_256 [V16HI V16HF])\n+(define_mode_iterator V32_512 [V32HI V32HF])\n+\n (define_mode_attr avx512bcst\n   [(V4SI \"%{1to4%}\") (V2DI \"%{1to2%}\")\n    (V8SI \"%{1to8%}\") (V4DI \"%{1to4%}\")\n@@ -747,8 +786,10 @@\n \n ;; Mapping from float mode to required SSE level\n (define_mode_attr sse\n-  [(SF \"sse\") (DF \"sse2\")\n+  [(SF \"sse\") (DF \"sse2\") (HF \"avx512fp16\")\n    (V4SF \"sse\") (V2DF \"sse2\")\n+   (V32HF \"avx512fp16\") (V16HF \"avx512fp16\")\n+   (V8HF \"avx512fp16\")\n    (V16SF \"avx512f\") (V8SF \"avx\")\n    (V8DF \"avx512f\") (V4DF \"avx\")])\n \n@@ -784,23 +825,32 @@\n    (V16SF \"V16SF\") (V8DF \"V8DF\")\n    (V8SF \"V8SF\") (V4DF \"V4DF\")\n    (V4SF \"V4SF\") (V2DF \"V2DF\")\n+   (V8HF \"TI\") (V16HF \"OI\") (V32HF \"XI\")\n    (TI \"TI\")])\n \n ;; SSE constant -1 constraint\n (define_mode_attr sseconstm1\n   [(V64QI \"BC\") (V32HI \"BC\") (V16SI \"BC\") (V8DI \"BC\") (V4TI \"BC\")\n    (V32QI \"BC\") (V16HI \"BC\") (V8SI \"BC\") (V4DI \"BC\") (V2TI \"BC\")\n    (V16QI \"BC\") (V8HI \"BC\") (V4SI \"BC\") (V2DI \"BC\") (V1TI \"BC\")\n-   (V16SF \"BF\") (V8DF \"BF\")\n-   (V8SF \"BF\") (V4DF \"BF\")\n-   (V4SF \"BF\") (V2DF \"BF\")])\n+   (V32HF \"BF\") (V16SF \"BF\") (V8DF \"BF\")\n+   (V16HF \"BF\") (V8SF \"BF\") (V4DF \"BF\")\n+   (V8HF \"BF\") (V4SF \"BF\") (V2DF \"BF\")])\n+\n+;; SSE integer instruction suffix for various modes\n+(define_mode_attr sseintmodesuffix\n+  [(V16QI \"b\") (V8HI \"w\") (V4SI \"d\") (V2DI \"q\")\n+   (V32QI \"b\") (V16HI \"w\") (V8SI \"d\") (V4DI \"q\")\n+   (V64QI \"b\") (V32HI \"w\") (V16SI \"d\") (V8DI \"q\")\n+   (V8HF \"w\") (V16HF \"w\") (V32HF \"w\")])\n \n ;; Mapping of vector modes to corresponding mask size\n (define_mode_attr avx512fmaskmode\n   [(V64QI \"DI\") (V32QI \"SI\") (V16QI \"HI\")\n    (V32HI \"SI\") (V16HI \"HI\") (V8HI  \"QI\") (V4HI \"QI\")\n    (V16SI \"HI\") (V8SI  \"QI\") (V4SI  \"QI\")\n    (V8DI  \"QI\") (V4DI  \"QI\") (V2DI  \"QI\")\n+   (V32HF \"SI\") (V16HF \"HI\") (V8HF  \"QI\")\n    (V16SF \"HI\") (V8SF  \"QI\") (V4SF  \"QI\")\n    (V8DF  \"QI\") (V4DF  \"QI\") (V2DF  \"QI\")])\n \n@@ -810,6 +860,7 @@\n    (V32HI \"si\") (V16HI \"hi\") (V8HI  \"qi\") (V4HI \"qi\")\n    (V16SI \"hi\") (V8SI  \"qi\") (V4SI  \"qi\")\n    (V8DI  \"qi\") (V4DI  \"qi\") (V2DI  \"qi\")\n+   (V32HF \"si\") (V16HF \"hi\") (V8HF  \"qi\")\n    (V16SF \"hi\") (V8SF  \"qi\") (V4SF  \"qi\")\n    (V8DF  \"qi\") (V4DF  \"qi\") (V2DF  \"qi\")])\n \n@@ -854,7 +905,8 @@\n    (V16QI \"V32QI\") (V8HI \"V16HI\") (V4SI \"V8SI\") (V2DI \"V4DI\")\n    (V16SF \"V32SF\") (V8DF \"V16DF\")\n    (V8SF \"V16SF\") (V4DF \"V8DF\")\n-   (V4SF \"V8SF\") (V2DF \"V4DF\")])\n+   (V4SF \"V8SF\") (V2DF \"V4DF\")\n+   (V32HF \"V64HF\") (V16HF \"V32HF\") (V8HF \"V16HF\")])\n \n ;; Mapping of vector modes to a vector mode of half size\n ;; instead of V1DI/V1DF, DI/DF are used for V2DI/V2DF although they are scalar.\n@@ -864,17 +916,19 @@\n    (V16QI  \"V8QI\") (V8HI   \"V4HI\") (V4SI  \"V2SI\") (V2DI \"DI\")\n    (V16SF \"V8SF\") (V8DF \"V4DF\")\n    (V8SF  \"V4SF\") (V4DF \"V2DF\")\n-   (V4SF  \"V2SF\") (V2DF \"DF\")])\n+   (V4SF  \"V2SF\") (V2DF \"DF\")\n+   (V32HF \"V16HF\") (V16HF \"V8HF\") (V8HF \"V4HF\")])\n \n (define_mode_attr ssehalfvecmodelower\n   [(V64QI \"v32qi\") (V32HI \"v16hi\") (V16SI \"v8si\") (V8DI \"v4di\") (V4TI \"v2ti\")\n    (V32QI \"v16qi\") (V16HI  \"v8hi\") (V8SI  \"v4si\") (V4DI \"v2di\")\n    (V16QI  \"v8qi\") (V8HI   \"v4hi\") (V4SI  \"v2si\")\n    (V16SF \"v8sf\") (V8DF \"v4df\")\n    (V8SF  \"v4sf\") (V4DF \"v2df\")\n-   (V4SF  \"v2sf\")])\n+   (V4SF  \"v2sf\")\n+   (V32HF \"v16hf\") (V16HF \"v8hf\") (V8HF \"v4hf\")])\n \n-;; Mapping of vector modes ti packed single mode of the same size\n+;; Mapping of vector modes to packed single mode of the same size\n (define_mode_attr ssePSmode\n   [(V16SI \"V16SF\") (V8DF \"V16SF\")\n    (V16SF \"V16SF\") (V8DI \"V16SF\")\n@@ -884,7 +938,8 @@\n    (V4DI \"V8SF\") (V2DI \"V4SF\")\n    (V4TI \"V16SF\") (V2TI \"V8SF\") (V1TI \"V4SF\")\n    (V8SF \"V8SF\") (V4SF \"V4SF\")\n-   (V4DF \"V8SF\") (V2DF \"V4SF\")])\n+   (V4DF \"V8SF\") (V2DF \"V4SF\")\n+   (V32HF \"V16SF\") (V16HF \"V8SF\") (V8HF \"V4SF\")])\n \n (define_mode_attr ssePSmode2\n   [(V8DI \"V8SF\") (V4DI \"V4SF\")])\n@@ -895,6 +950,7 @@\n    (V32HI \"HI\") (V16HI \"HI\") (V8HI \"HI\")\n    (V16SI \"SI\") (V8SI \"SI\")  (V4SI \"SI\")\n    (V8DI \"DI\")  (V4DI \"DI\")  (V2DI \"DI\")\n+   (V32HF \"HF\") (V16HF \"HF\") (V8HF \"HF\")\n    (V16SF \"SF\") (V8SF \"SF\")  (V4SF \"SF\")\n    (V8DF \"DF\")  (V4DF \"DF\")  (V2DF \"DF\")\n    (V4TI \"TI\")  (V2TI \"TI\")])\n@@ -905,6 +961,7 @@\n    (V32HI \"hi\") (V16HI \"hi\") (V8HI \"hi\")\n    (V16SI \"si\") (V8SI \"si\")  (V4SI \"si\")\n    (V8DI \"di\")  (V4DI \"di\")  (V2DI \"di\")\n+   (V32HF \"hf\") (V16HF \"hf\")  (V8HF \"hf\")\n    (V16SF \"sf\") (V8SF \"sf\")  (V4SF \"sf\")\n    (V8DF \"df\")  (V4DF \"df\")  (V2DF \"df\")\n    (V4TI \"ti\")  (V2TI \"ti\")])\n@@ -915,6 +972,7 @@\n    (V32HI \"V8HI\")  (V16HI \"V8HI\") (V8HI \"V8HI\")\n    (V16SI \"V4SI\")  (V8SI \"V4SI\")  (V4SI \"V4SI\")\n    (V8DI \"V2DI\")   (V4DI \"V2DI\")  (V2DI \"V2DI\")\n+   (V32HF \"V8HF\")  (V16HF \"V8HF\") (V8HF \"V8HF\")\n    (V16SF \"V4SF\")  (V8SF \"V4SF\")  (V4SF \"V4SF\")\n    (V8DF \"V2DF\")   (V4DF \"V2DF\")  (V2DF \"V2DF\")])\n \n@@ -935,6 +993,7 @@\n    (V16SI \"d\") (V8SI \"d\") (V4SI \"d\")\n    (V16SF \"d\") (V8SF \"d\") (V4SF \"d\")\n    (V32HI \"d\") (V16HI \"d\") (V8HI \"d\")\n+   (V32HF \"d\") (V16HF \"d\") (V8HF \"d\")\n    (V64QI \"d\") (V32QI \"d\") (V16QI \"d\")])\n \n ;; Number of scalar elements in each vector type\n@@ -959,27 +1018,28 @@\n    (V64QI \"8\") (V32QI \"8\") (V16QI \"8\")\n    (V32HI \"16\") (V16HI \"16\") (V8HI \"16\")\n    (V16SI \"32\") (V8SI \"32\") (V4SI \"32\")\n+   (V32HF \"16\") (V16HF \"16\") (V8HF \"16\")\n    (V16SF \"32\") (V8SF \"32\") (V4SF \"32\")\n    (V8DF \"64\") (V4DF \"64\") (V2DF \"64\")])\n \n-;; SSE prefix for integer vector modes\n+;; SSE prefix for integer and HF vector modes\n (define_mode_attr sseintprefix\n   [(V2DI  \"p\") (V2DF  \"\")\n    (V4DI  \"p\") (V4DF  \"\")\n    (V8DI  \"p\") (V8DF  \"\")\n    (V4SI  \"p\") (V4SF  \"\")\n    (V8SI  \"p\") (V8SF  \"\")\n    (V16SI \"p\") (V16SF \"\")\n-   (V16QI \"p\") (V8HI \"p\")\n-   (V32QI \"p\") (V16HI \"p\")\n-   (V64QI \"p\") (V32HI \"p\")])\n+   (V16QI \"p\") (V8HI \"p\") (V8HF \"p\")\n+   (V32QI \"p\") (V16HI \"p\") (V16HF \"p\")\n+   (V64QI \"p\") (V32HI \"p\") (V32HF \"p\")])\n \n ;; SSE scalar suffix for vector modes\n (define_mode_attr ssescalarmodesuffix\n-  [(SF \"ss\") (DF \"sd\")\n-   (V16SF \"ss\") (V8DF \"sd\")\n-   (V8SF \"ss\") (V4DF \"sd\")\n-   (V4SF \"ss\") (V2DF \"sd\")\n+  [(HF \"sh\") (SF \"ss\") (DF \"sd\")\n+   (V32HF \"sh\") (V16SF \"ss\") (V8DF \"sd\")\n+   (V16HF \"sh\") (V8SF \"ss\") (V4DF \"sd\")\n+   (V8HF \"sh\") (V4SF \"ss\") (V2DF \"sd\")\n    (V16SI \"d\") (V8DI \"q\")\n    (V8SI \"d\") (V4DI \"q\")\n    (V4SI \"d\") (V2DI \"q\")])\n@@ -1007,7 +1067,8 @@\n ;; i128 for integer vectors and TARGET_AVX2, f128 otherwise.\n ;; i64x4 or f64x4 for 512bit modes.\n (define_mode_attr i128\n-  [(V16SF \"f64x4\") (V8SF \"f128\") (V8DF \"f64x4\") (V4DF \"f128\")\n+  [(V16HF \"%~128\") (V32HF \"i64x4\") (V16SF \"f64x4\") (V8SF \"f128\")\n+   (V8DF \"f64x4\") (V4DF \"f128\")\n    (V64QI \"i64x4\") (V32QI \"%~128\") (V32HI \"i64x4\") (V16HI \"%~128\")\n    (V16SI \"i64x4\") (V8SI \"%~128\") (V8DI \"i64x4\") (V4DI \"%~128\")])\n \n@@ -1031,14 +1092,18 @@\n    (V32HI \"w\")  (V16HI \"w\") (V8HI \"w\")\n    (V16SI \"d\")  (V8SI \"d\")  (V4SI \"d\")\n    (V8DI \"q\")   (V4DI \"q\")  (V2DI \"q\")\n+   (V32HF \"w\")  (V16HF \"w\") (V8HF \"w\")\n    (V16SF \"ss\") (V8SF \"ss\") (V4SF \"ss\")\n    (V8DF \"sd\")  (V4DF \"sd\") (V2DF \"sd\")])\n \n ;; Tie mode of assembler operand to mode iterator\n (define_mode_attr xtg_mode\n-  [(V16QI \"x\") (V8HI \"x\") (V4SI \"x\") (V2DI \"x\") (V4SF \"x\") (V2DF \"x\")\n-   (V32QI \"t\") (V16HI \"t\") (V8SI \"t\") (V4DI \"t\") (V8SF \"t\") (V4DF \"t\")\n-   (V64QI \"g\") (V32HI \"g\") (V16SI \"g\") (V8DI \"g\") (V16SF \"g\") (V8DF \"g\")])\n+  [(V16QI \"x\") (V8HI \"x\") (V4SI \"x\") (V2DI \"x\")\n+   (V8HF \"x\") (V4SF \"x\") (V2DF \"x\")\n+   (V32QI \"t\") (V16HI \"t\") (V8SI \"t\") (V4DI \"t\")\n+   (V16HF \"t\") (V8SF \"t\") (V4DF \"t\")\n+   (V64QI \"g\") (V32HI \"g\") (V16SI \"g\") (V8DI \"g\")\n+   (V32HF \"g\") (V16SF \"g\") (V8DF \"g\")])\n \n ;; Half mask mode for unpacks\n (define_mode_attr HALFMASKMODE\n@@ -1334,6 +1399,20 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<avx512>_blendm<mode>\"\n+  [(set (match_operand:VF_AVX512FP16 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_AVX512FP16\n+\t  (match_operand:VF_AVX512FP16 2 \"nonimmediate_operand\" \"vm,vm\")\n+\t  (match_operand:VF_AVX512FP16 1 \"nonimm_or_0_operand\" \"0C,v\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n+  \"TARGET_AVX512BW\"\n+  \"@\n+    vmovdqu<ssescalarsize>\\t{%2, %0%{%3%}%N1|%0%{%3%}%N1, %2}\n+    vpblendmw\\t{%2, %1, %0%{%3%}|%0%{%3%}, %1, %2}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_store<mode>_mask\"\n   [(set (match_operand:V48_AVX512VL 0 \"memory_operand\" \"=m\")\n \t(vec_merge:V48_AVX512VL\n@@ -1963,12 +2042,12 @@\n ;; Standard scalar operation patterns which preserve the rest of the\n ;; vector for combiner.\n (define_insn \"*<sse>_vm<insn><mode>3\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_duplicate:VF_128\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=x,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_duplicate:VFH_128\n \t    (plusminus:<ssescalarmode>\n \t      (vec_select:<ssescalarmode>\n-\t        (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n+\t\t(match_operand:VFH_128 1 \"register_operand\" \"0,v\")\n \t\t(parallel [(const_int 0)]))\n \t      (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"xm,vm\")))\n \t  (match_dup 1)\n@@ -1979,7 +2058,16 @@\n    v<plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set (attr \"prefix\")\n+     (cond [(eq_attr \"alternative\" \"0\")\n+\t      (const_string \"orig\")\n+\t    (eq_attr \"alternative\" \"1\")\n+\t      (if_then_else\n+\t\t(match_test \"<MODE>mode == V8HFmode\")\n+\t\t(const_string \"evex\")\n+\t\t(const_string \"vex\"))\n+\t   ]\n+\t   (const_string \"*\")))\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"<sse>_vm<insn><mode>3<mask_scalar_name><round_scalar_name>\"\n@@ -2044,12 +2132,12 @@\n ;; Standard scalar operation patterns which preserve the rest of the\n ;; vector for combiner.\n (define_insn \"*<sse>_vm<multdiv_mnemonic><mode>3\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_duplicate:VF_128\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=x,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_duplicate:VFH_128\n \t    (multdiv:<ssescalarmode>\n \t      (vec_select:<ssescalarmode>\n-\t        (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n+\t\t(match_operand:VFH_128 1 \"register_operand\" \"0,v\")\n \t\t(parallel [(const_int 0)]))\n \t      (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"xm,vm\")))\n \t  (match_dup 1)\n@@ -2060,7 +2148,16 @@\n    v<multdiv_mnemonic><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse<multdiv_mnemonic>\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set (attr \"prefix\")\n+     (cond [(eq_attr \"alternative\" \"0\")\n+\t      (const_string \"orig\")\n+\t    (eq_attr \"alternative\" \"1\")\n+\t      (if_then_else\n+\t\t(match_test \"<MODE>mode == V8HFmode\")\n+\t\t(const_string \"evex\")\n+\t\t(const_string \"vex\"))\n+\t   ]\n+\t   (const_string \"*\")))\n    (set_attr \"btver2_decode\" \"direct,double\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -2482,12 +2579,12 @@\n ;; Standard scalar operation patterns which preserve the rest of the\n ;; vector for combiner.\n (define_insn \"*ieee_<ieee_maxmin><mode>3\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_duplicate:VF_128\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=x,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_duplicate:VFH_128\n \t    (unspec:<ssescalarmode>\n \t      [(vec_select:<ssescalarmode>\n-\t         (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n+\t\t (match_operand:VFH_128 1 \"register_operand\" \"0,v\")\n \t\t (parallel [(const_int 0)]))\n \t       (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"xm,vm\")]\n \t       IEEE_MAXMIN))\n@@ -2500,7 +2597,16 @@\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n    (set_attr \"btver2_sse_attr\" \"maxmin\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set (attr \"prefix\")\n+     (cond [(eq_attr \"alternative\" \"0\")\n+\t      (const_string \"orig\")\n+\t    (eq_attr \"alternative\" \"1\")\n+\t      (if_then_else\n+\t\t(match_test \"<MODE>mode == V8HFmode\")\n+\t\t(const_string \"evex\")\n+\t\t(const_string \"vex\"))\n+\t   ]\n+\t   (const_string \"*\")))\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"<sse>_vm<code><mode>3<mask_scalar_name><round_saeonly_scalar_name>\"\n@@ -8576,6 +8682,47 @@\n \t   ]\n \t   (symbol_ref \"true\")))])\n \n+;; vmovw clears also the higer bits\n+(define_insn \"vec_set<mode>_0\"\n+  [(set (match_operand:VF_AVX512FP16 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_AVX512FP16\n+\t  (vec_duplicate:VF_AVX512FP16\n+\t    (match_operand:HF 2 \"nonimmediate_operand\" \"r,m\"))\n+\t  (match_operand:VF_AVX512FP16 1 \"const0_operand\" \"C,C\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"@\n+   vmovw\\t{%k2, %x0|%x0, %k2}\n+   vmovw\\t{%2, %x0|%x0, %2}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n+(define_insn \"*avx512fp16_movsh\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V8HF\n+\t  (vec_duplicate:V8HF\n+\t    (match_operand:HF 2 \"register_operand\" \"v\"))\n+\t  (match_operand:V8HF 1 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vmovsh\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n+(define_insn \"avx512fp16_movsh\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V8HF\n+          (match_operand:V8HF 2 \"register_operand\" \"v\")\n+\t  (match_operand:V8HF 1 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vmovsh\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n ;; A subset is vec_setv4sf.\n (define_insn \"*vec_setv4sf_sse4_1\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=Yr,*x,v\")\n@@ -8711,6 +8858,20 @@\n   DONE;\n })\n \n+(define_expand \"vec_setv8hf\"\n+  [(match_operand:V8HF 0 \"register_operand\")\n+   (match_operand:HF 1 \"register_operand\")\n+   (match_operand 2 \"vec_setm_sse41_operand\")]\n+  \"TARGET_SSE\"\n+{\n+  if (CONST_INT_P (operands[2]))\n+    ix86_expand_vector_set (false, operands[0], operands[1],\n+\t\t\t    INTVAL (operands[2]));\n+  else\n+    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);\n+  DONE;\n+})\n+\n (define_expand \"vec_set<mode>\"\n   [(match_operand:V_256_512 0 \"register_operand\")\n    (match_operand:<ssescalarmode> 1 \"register_operand\")\n@@ -9426,10 +9587,10 @@\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn_and_split \"vec_extract_lo_v32hi\"\n-  [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=v,v,m\")\n-\t(vec_select:V16HI\n-\t  (match_operand:V32HI 1 \"nonimmediate_operand\" \"v,m,v\")\n+(define_insn_and_split \"vec_extract_lo_<mode>\"\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=v,v,m\")\n+\t(vec_select:<ssehalfvecmode>\n+\t  (match_operand:V32_512 1 \"nonimmediate_operand\" \"v,m,v\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)\n \t\t     (const_int 4) (const_int 5)\n@@ -9456,9 +9617,10 @@\n   if (!TARGET_AVX512VL\n       && REG_P (operands[0])\n       && EXT_REX_SSE_REG_P (operands[1]))\n-    operands[0] = lowpart_subreg (V32HImode, operands[0], V16HImode);\n+    operands[0] = lowpart_subreg (<MODE>mode, operands[0],\n+\t\t\t\t  <ssehalfvecmode>mode);\n   else\n-    operands[1] = gen_lowpart (V16HImode, operands[1]);\n+    operands[1] = gen_lowpart (<ssehalfvecmode>mode, operands[1]);\n }\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -9467,10 +9629,10 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"vec_extract_hi_v32hi\"\n-  [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=vm\")\n-\t(vec_select:V16HI\n-\t  (match_operand:V32HI 1 \"register_operand\" \"v\")\n+(define_insn \"vec_extract_hi_<mode>\"\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=vm\")\n+\t(vec_select:<ssehalfvecmode>\n+\t  (match_operand:V32_512 1 \"register_operand\" \"v\")\n \t  (parallel [(const_int 16) (const_int 17)\n \t\t     (const_int 18) (const_int 19)\n \t\t     (const_int 20) (const_int 21)\n@@ -9487,10 +9649,10 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn_and_split \"vec_extract_lo_v16hi\"\n-  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=v,m\")\n-\t(vec_select:V8HI\n-\t  (match_operand:V16HI 1 \"nonimmediate_operand\" \"vm,v\")\n+(define_insn_and_split \"vec_extract_lo_<mode>\"\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=v,m\")\n+\t(vec_select:<ssehalfvecmode>\n+\t  (match_operand:V16_256 1 \"nonimmediate_operand\" \"vm,v\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)\n \t\t     (const_int 4) (const_int 5)\n@@ -9499,12 +9661,12 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_lowpart (V8HImode, operands[1]);\")\n+  \"operands[1] = gen_lowpart (<ssehalfvecmode>mode, operands[1]);\")\n \n-(define_insn \"vec_extract_hi_v16hi\"\n-  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=xm,vm,vm\")\n-\t(vec_select:V8HI\n-\t  (match_operand:V16HI 1 \"register_operand\" \"x,v,v\")\n+(define_insn \"vec_extract_hi_<mode>\"\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=xm,vm,vm\")\n+\t(vec_select:<ssehalfvecmode>\n+\t  (match_operand:V16_256 1 \"register_operand\" \"x,v,v\")\n \t  (parallel [(const_int 8) (const_int 9)\n \t\t     (const_int 10) (const_int 11)\n \t\t     (const_int 12) (const_int 13)\n@@ -9640,12 +9802,41 @@\n    (set_attr \"prefix\" \"vex,evex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n+;; NB: *vec_extract<mode>_0 must be placed before *vec_extracthf.\n+;; Otherwise, it will be ignored.\n+(define_insn_and_split \"*vec_extract<mode>_0\"\n+  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=v,m,r\")\n+\t(vec_select:HF\n+\t  (match_operand:VF_AVX512FP16 1 \"nonimmediate_operand\" \"vm,v,m\")\n+\t  (parallel [(const_int 0)])))]\n+  \"TARGET_AVX512FP16 && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"operands[1] = gen_lowpart (HFmode, operands[1]);\")\n+\n+(define_insn \"*vec_extracthf\"\n+  [(set (match_operand:HF 0 \"register_sse4nonimm_operand\" \"=r,m\")\n+\t(vec_select:HF\n+\t  (match_operand:V8HF 1 \"register_operand\" \"v,v\")\n+\t  (parallel\n+\t    [(match_operand:SI 2 \"const_0_to_7_operand\")])))]\n+  \"TARGET_AVX512FP16\"\n+  \"@\n+   vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\n+   vpextrw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;; Modes handled by vec_extract patterns.\n (define_mode_iterator VEC_EXTRACT_MODE\n   [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX\") V16QI\n    (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI\n+   (V32HF \"TARGET_AVX512FP16\") (V16HF \"TARGET_AVX512FP16\")\n+   (V8HF \"TARGET_AVX512FP16\")\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") V2DF\n    (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\")])\n@@ -15360,16 +15551,16 @@\n \n ;; Modes handled by pinsr patterns.\n (define_mode_iterator PINSR_MODE\n-  [(V16QI \"TARGET_SSE4_1\") V8HI\n+  [(V16QI \"TARGET_SSE4_1\") V8HI (V8HF \"TARGET_AVX512FP16\")\n    (V4SI \"TARGET_SSE4_1\")\n    (V2DI \"TARGET_SSE4_1 && TARGET_64BIT\")])\n \n (define_mode_attr sse2p4_1\n-  [(V16QI \"sse4_1\") (V8HI \"sse2\")\n+  [(V16QI \"sse4_1\") (V8HI \"sse2\") (V8HF \"sse4_1\")\n    (V4SI \"sse4_1\") (V2DI \"sse4_1\")])\n \n (define_mode_attr pinsr_evex_isa\n-  [(V16QI \"avx512bw\") (V8HI \"avx512bw\")\n+  [(V16QI \"avx512bw\") (V8HI \"avx512bw\") (V8HF \"avx512bw\")\n    (V4SI \"avx512dq\") (V2DI \"avx512dq\")])\n \n ;; sse4_1_pinsrd must come before sse2_loadld since it is preferred.\n@@ -15397,11 +15588,19 @@\n     case 2:\n     case 4:\n       if (GET_MODE_SIZE (<ssescalarmode>mode) < GET_MODE_SIZE (SImode))\n-\treturn \"vpinsr<ssemodesuffix>\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n+\t{\n+\t  if (<MODE>mode == V8HFmode)\n+\t    return \"vpinsrw\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n+\t  else\n+\t    return \"vpinsr<ssemodesuffix>\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n+\t}\n       /* FALLTHRU */\n     case 3:\n     case 5:\n-      return \"vpinsr<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+      if (<MODE>mode == V8HFmode)\n+\treturn \"vpinsrw\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+      else\n+\treturn \"vpinsr<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n     default:\n       gcc_unreachable ();\n     }\n@@ -22151,34 +22350,35 @@\n   [(V64QI \"avx512bw\") (V32QI \"avx512bw\") (V16QI \"avx512bw\")\n    (V32HI \"avx512bw\") (V16HI \"avx512bw\") (V8HI \"avx512bw\")\n    (V16SI \"avx512f\") (V8SI \"avx512f\") (V4SI \"avx512f\")\n-   (V8DI \"avx512f\") (V4DI \"avx512f\") (V2DI \"avx512f\")])\n+   (V8DI \"avx512f\") (V4DI \"avx512f\") (V2DI \"avx512f\")\n+   (V32HF \"avx512bw\") (V16HF \"avx512bw\") (V8HF \"avx512bw\")])\n \n (define_insn \"avx2_pbroadcast<mode>\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=x,v\")\n-\t(vec_duplicate:VI\n+  [(set (match_operand:VIHF 0 \"register_operand\" \"=x,v\")\n+\t(vec_duplicate:VIHF\n \t  (vec_select:<ssescalarmode>\n \t    (match_operand:<ssexmmmode> 1 \"nonimmediate_operand\" \"xm,vm\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX2\"\n-  \"vpbroadcast<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\"\n+  \"vpbroadcast<sseintmodesuffix>\\t{%1, %0|%0, %<iptr>1}\"\n   [(set_attr \"isa\" \"*,<pbroadcast_evex_isa>\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"avx2_pbroadcast<mode>_1\"\n-  [(set (match_operand:VI_256 0 \"register_operand\" \"=x,x,v,v\")\n-\t(vec_duplicate:VI_256\n+  [(set (match_operand:VIHF_256 0 \"register_operand\" \"=x,x,v,v\")\n+\t(vec_duplicate:VIHF_256\n \t  (vec_select:<ssescalarmode>\n-\t    (match_operand:VI_256 1 \"nonimmediate_operand\" \"m,x,m,v\")\n+\t    (match_operand:VIHF_256 1 \"nonimmediate_operand\" \"m,x,m,v\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX2\"\n   \"@\n-   vpbroadcast<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\n-   vpbroadcast<ssemodesuffix>\\t{%x1, %0|%0, %x1}\n-   vpbroadcast<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\n-   vpbroadcast<ssemodesuffix>\\t{%x1, %0|%0, %x1}\"\n+   vpbroadcast<sseintmodesuffix>\\t{%1, %0|%0, %<iptr>1}\n+   vpbroadcast<sseintmodesuffix>\\t{%x1, %0|%0, %x1}\n+   vpbroadcast<sseintmodesuffix>\\t{%1, %0|%0, %<iptr>1}\n+   vpbroadcast<sseintmodesuffix>\\t{%x1, %0|%0, %x1}\"\n   [(set_attr \"isa\" \"*,*,<pbroadcast_evex_isa>,<pbroadcast_evex_isa>\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -22532,15 +22732,15 @@\n    (set_attr \"mode\" \"V4DF\")])\n \n (define_insn \"<avx512>_vec_dup<mode>_1\"\n-  [(set (match_operand:VI_AVX512BW 0 \"register_operand\" \"=v,v\")\n-\t(vec_duplicate:VI_AVX512BW\n+  [(set (match_operand:VIHF_AVX512BW 0 \"register_operand\" \"=v,v\")\n+\t(vec_duplicate:VIHF_AVX512BW\n \t  (vec_select:<ssescalarmode>\n-\t    (match_operand:VI_AVX512BW 1 \"nonimmediate_operand\" \"v,m\")\n+\t    (match_operand:VIHF_AVX512BW 1 \"nonimmediate_operand\" \"v,m\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F\"\n   \"@\n-   vpbroadcast<ssemodesuffix>\\t{%x1, %0|%0, %x1}\n-   vpbroadcast<ssemodesuffix>\\t{%x1, %0|%0, %<iptr>1}\"\n+   vpbroadcast<sseintmodesuffix>\\t{%x1, %0|%0, %x1}\n+   vpbroadcast<sseintmodesuffix>\\t{%x1, %0|%0, %<iptr>1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -22565,8 +22765,8 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<avx512>_vec_dup<mode><mask_name>\"\n-  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_duplicate:VI12_AVX512VL\n+  [(set (match_operand:VI12HF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:VI12HF_AVX512VL\n \t  (vec_select:<ssescalarmode>\n \t    (match_operand:<ssexmmmode> 1 \"nonimmediate_operand\" \"vm\")\n \t    (parallel [(const_int 0)]))))]\n@@ -22601,8 +22801,8 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>\"\n-  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v,v\")\n-\t(vec_duplicate:VI12_AVX512VL\n+  [(set (match_operand:VI12HF_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_duplicate:VI12HF_AVX512VL\n \t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"vm,r\")))]\n   \"TARGET_AVX512BW\"\n   \"@\n@@ -22697,7 +22897,7 @@\n   [(V8SF \"ss\") (V4DF \"sd\") (V8SI \"ss\") (V4DI \"sd\")])\n ;; Modes handled by AVX2 vec_dup patterns.\n (define_mode_iterator AVX2_VEC_DUP_MODE\n-  [V32QI V16QI V16HI V8HI V8SI V4SI])\n+  [V32QI V16QI V16HI V8HI V8SI V4SI V16HF V8HF])\n \n (define_insn \"*vec_dup<mode>\"\n   [(set (match_operand:AVX2_VEC_DUP_MODE 0 \"register_operand\" \"=x,x,v\")\n@@ -23253,12 +23453,12 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"vec_set_lo_v16hi\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x,v\")\n-\t(vec_concat:V16HI\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,vm\")\n-\t  (vec_select:V8HI\n-\t    (match_operand:V16HI 1 \"register_operand\" \"x,v\")\n+(define_insn \"vec_set_lo_<mode>\"\n+  [(set (match_operand:V16_256 0 \"register_operand\" \"=x,v\")\n+\t(vec_concat:V16_256\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm,vm\")\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (match_operand:V16_256 1 \"register_operand\" \"x,v\")\n \t    (parallel [(const_int 8) (const_int 9)\n \t\t       (const_int 10) (const_int 11)\n \t\t       (const_int 12) (const_int 13)\n@@ -23273,16 +23473,16 @@\n    (set_attr \"prefix\" \"vex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn \"vec_set_hi_v16hi\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x,v\")\n-\t(vec_concat:V16HI\n-\t  (vec_select:V8HI\n-\t    (match_operand:V16HI 1 \"register_operand\" \"x,v\")\n+(define_insn \"vec_set_hi_<mode>\"\n+  [(set (match_operand:V16_256 0 \"register_operand\" \"=x,v\")\n+\t(vec_concat:V16_256\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (match_operand:V16_256 1 \"register_operand\" \"x,v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)\n \t\t       (const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm,vm\")))]\n   \"TARGET_AVX\"\n   \"@\n    vinsert%~128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\n@@ -23459,6 +23659,8 @@\n    (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI\n+   (V32HF \"TARGET_AVX512FP16\") (V16HF \"TARGET_AVX512FP16\")\n+   (V8HF \"TARGET_AVX512FP16\")\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")\n    (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\")])\n@@ -23470,6 +23672,8 @@\n    (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\")\n+   (V32HF \"TARGET_AVX512FP16\") (V16HF \"TARGET_AVX512FP16\")\n+   (V8HF \"TARGET_AVX512FP16\")\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\")\n    (V4TI \"TARGET_AVX512F\")])"}]}