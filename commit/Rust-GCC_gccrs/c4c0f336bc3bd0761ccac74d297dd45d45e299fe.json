{"sha": "c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRjMGYzMzZiYzNiZDA3NjFjY2FjNzRkMjk3ZGQ0NWQ0NWUyOTlmZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-03-02T07:51:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-02T07:51:28Z"}, "message": "ipa-icf.c (sem_variable::equals): Improve debug output; get variable constructor.\n\n\n2015-02-28  Martin Liska  <mliska@suse.cz>\n\t    Jan Hubicka   <hubicka@ucw.cz>\n\n\t* ipa-icf.c (sem_variable::equals): Improve debug output;\n\tget variable constructor.\n\t(sem_variable::parse): Do not filter out too early; give up on\n\tvolatile and register vars.\n\t(sem_item_optimizer::filter_removed_items): Filter out nonreadonly\n\tvariables.\n\t* ipa-icf.h (sem_variable::init): Do not set ctor.\n\t(sem_variable::ctor): Remove.\n\ngcc/testsuite/ChangeLog:\n\n2015-02-28  Martin Liska  <mliska@suse.cz>\n\t    Jan Hubicka   <hubicka@ucw.cz>\n\n\t* gcc.dg/ipa/ipa-icf-35.c: New test.\n\t* gcc.dg/ipa/ipa-icf-36.c: New test.\n\t* gcc.dg/ipa/ipa-icf-37.c: New test.\n\nCo-Authored-By: Jan Hubicka <hubicka@ucw.cz>\n\nFrom-SVN: r221099", "tree": {"sha": "e397c5c2d53aa0aefa1972f3451f30c5fdb6453b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e397c5c2d53aa0aefa1972f3451f30c5fdb6453b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34a108c813ff0644384f4f8796797cdb30811644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a108c813ff0644384f4f8796797cdb30811644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a108c813ff0644384f4f8796797cdb30811644"}], "stats": {"total": 178, "additions": 148, "deletions": 30}, "files": [{"sha": "27b3a759276d79cd208aea5ed5afe79ef419ae02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "patch": "@@ -1,3 +1,15 @@\n+2015-02-28  Martin Liska  <mliska@suse.cz>\n+\t    Jan Hubicka   <hubicka@ucw.cz>\n+\n+\t* ipa-icf.c (sem_variable::equals): Improve debug output;\n+\tget variable constructor.\n+\t(sem_variable::parse): Do not filter out too early; give up on\n+\tvolatile and register vars.\n+\t(sem_item_optimizer::filter_removed_items): Filter out nonreadonly\n+\tvariables.\n+\t* ipa-icf.h (sem_variable::init): Do not set ctor.\n+\t(sem_variable::ctor): Remove.\n+\n 2015-03-01  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/65233"}, {"sha": "31fcbec66158f3e1d66667de235cfa3aeb282b5b", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "patch": "@@ -1448,18 +1448,29 @@ sem_variable::equals_wpa (sem_item *item,\n \n /* Returns true if the item equals to ITEM given as argument.  */\n \n+/* Returns true if the item equals to ITEM given as argument.  */\n+\n bool\n sem_variable::equals (sem_item *item,\n-\t\t      hash_map <symtab_node *, sem_item *> & ARG_UNUSED (ignored_nodes))\n+\t\t      hash_map <symtab_node *, sem_item *> &)\n {\n   gcc_assert (item->type == VAR);\n+  bool ret;\n \n-  sem_variable *v = static_cast<sem_variable *>(item);\n+  if (DECL_INITIAL (decl) == error_mark_node && in_lto_p)\n+    dyn_cast <varpool_node *>(node)->get_constructor ();\n+  if (DECL_INITIAL (item->decl) == error_mark_node && in_lto_p)\n+    dyn_cast <varpool_node *>(item->node)->get_constructor ();\n \n-  if (!ctor || !v->ctor)\n-    return return_false_with_msg (\"ctor is missing for semantic variable\");\n+  ret = sem_variable::equals (DECL_INITIAL (decl),\n+\t\t\t      DECL_INITIAL (item->node->decl));\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file,\n+\t     \"Equals called for vars:%s:%s (%u:%u) (%s:%s) with result: %s\\n\\n\",\n+\t     name(), item->name (), node->order, item->node->order, asm_name (),\n+\t     item->asm_name (), ret ? \"true\" : \"false\");\n \n-  return sem_variable::equals (ctor, v->ctor);\n+  return ret;\n }\n \n /* Compares trees T1 and T2 for semantic equality.  */\n@@ -1653,24 +1664,7 @@ sem_variable::equals (tree t1, tree t2)\n sem_variable *\n sem_variable::parse (varpool_node *node, bitmap_obstack *stack)\n {\n-  tree decl = node->decl;\n-\n-  if (node->alias)\n-    return NULL;\n-\n-  bool readonly = TYPE_P (decl) ? TYPE_READONLY (decl) : TREE_READONLY (decl);\n-  if (!readonly)\n-    return NULL;\n-\n-  bool can_handle = DECL_VIRTUAL_P (decl)\n-\t\t    || flag_merge_constants >= 2\n-\t\t    || (!TREE_ADDRESSABLE (decl) && !node->externally_visible);\n-\n-  if (!can_handle || DECL_EXTERNAL (decl))\n-    return NULL;\n-\n-  tree ctor = ctor_for_folding (decl);\n-  if (!ctor)\n+  if (TREE_THIS_VOLATILE (node->decl) || DECL_HARD_REGISTER (node->decl))\n     return NULL;\n \n   sem_variable *v = new sem_variable (node, 0, stack);\n@@ -1686,8 +1680,8 @@ hashval_t\n sem_variable::get_hash (void)\n {\n   if (hash)\n-    return hash;\n \n+    return hash;\n   /* All WPA streamed in symbols should have their hashes computed at compile\n      time.  At this point, the constructor may not be in memory at all.\n      DECL_INITIAL (decl) would be error_mark_node in that case.  */\n@@ -2155,7 +2149,14 @@ sem_item_optimizer::filter_removed_items (void)\n \t  if (!flag_ipa_icf_variables)\n \t    remove_item (item);\n \t  else\n-\t    filtered.safe_push (item);\n+\t    {\n+\t      /* Filter out non-readonly variables.  */\n+\t      tree decl = item->decl;\n+\t      if (TREE_READONLY (decl))\n+\t\tfiltered.safe_push (item);\n+\t      else\n+\t\tremove_item (item);\n+\t    }\n         }\n     }\n "}, {"sha": "e3582db89a8e2fb6e1d0300d7ba3b6329c341d9f", "filename": "gcc/ipa-icf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Fipa-icf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Fipa-icf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.h?ref=c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "patch": "@@ -393,7 +393,6 @@ class sem_variable: public sem_item\n   inline virtual void init (void)\n   {\n     decl = get_node ()->decl;\n-    ctor = ctor_for_folding (decl);\n   }\n \n   virtual hashval_t get_hash (void);\n@@ -415,9 +414,6 @@ class sem_variable: public sem_item\n   /* Parser function that visits a varpool NODE.  */\n   static sem_variable *parse (varpool_node *node, bitmap_obstack *stack);\n \n-  /* Variable constructor.  */\n-  tree ctor;\n-\n private:\n   /* Iterates though a constructor and identifies tree references\n      we are interested in semantic function equality.  */\n@@ -428,7 +424,6 @@ class sem_variable: public sem_item\n \n   /* Compare that symbol sections are either NULL or have same name.  */\n   bool compare_sections (sem_variable *alias);\n-\n }; // class sem_variable\n \n class sem_item_optimizer;"}, {"sha": "c18c5e7fb75721818b4926294fc3f02b8ad74164", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "patch": "@@ -1,3 +1,10 @@\n+2015-02-28  Martin Liska  <mliska@suse.cz>\n+\t    Jan Hubicka   <hubicka@ucw.cz>\n+\n+\t* gcc.dg/ipa/ipa-icf-35.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-36.c: New test.\n+\t* gcc.dg/ipa/ipa-icf-37.c: New test.\n+\n 2015-02-28  Martin Liska  <mliska@suse.cz>\n \t    Jan Hubicka   <hubicka@ucw.cz>\n "}, {"sha": "f91cdd784838287af68c1d5bbbbea1eb757c7a54", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-35.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-35.c?ref=c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+\n+void f1()\n+{\n+}\n+\n+void f2()\n+{\n+}\n+\n+static void (*a)(void)=&f1;\n+static void (*b)(void)=&f1;\n+static void (*c)(void)=&f2;\n+static void (*d)(void)=&f2;\n+\n+int main()\n+{\n+  a();\n+  b();\n+  c();\n+  d();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 3\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:f2->f1\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:d->c\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:b->a\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}, {"sha": "d8cd5c8567ef8e8b66317f49c51de20a7601062e", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-36.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-36.c?ref=c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf -fmerge-all-constants\"  } */\n+static int a;\n+static int b;\n+static const int c = 2;\n+static const int d = 2;\n+static char * e = \"test\";\n+static char * f = \"test\";\n+static int g[3]={1,2,3};\n+static int h[3]={1,2,3};\n+static const int *i=&c;\n+static const int *j=&c;\n+static const int *k=&d;\n+int t(int tt)\n+{\n+  switch (tt)\n+  {\n+    case 1: return a;\n+    case 2: return b;\n+    case 3: return c;\n+    case 4: return d;\n+    case 5: return e[1];\n+    case 6: return f[1];\n+    case 7: return g[1];\n+    case 8: return h[1];\n+    case 9: return i[0];\n+    case 10: return j[0];\n+    case 11: return k[0];\n+  }\n+}\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 6\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:b->a\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:d->c\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:f->e\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:h->g\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:k->i\" \"icf\"  } } */"}, {"sha": "7314697e887ff60760d375b30adf23a8e3dd6825", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-37.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c0f336bc3bd0761ccac74d297dd45d45e299fe/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-37.c?ref=c4c0f336bc3bd0761ccac74d297dd45d45e299fe", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf\"  } */\n+static int a;\n+static int b;\n+static const int c = 2;\n+static const int d = 2;\n+static char * e = \"test\";\n+static char * f = \"test\";\n+static int g[3]={1,2,3};\n+static int h[3]={1,2,3};\n+static const int *i=&c;\n+static const int *j=&c;\n+static const int *k=&d;\n+int t(int tt)\n+{\n+  switch (tt)\n+  {\n+    case 1: return a;\n+    case 2: return b;\n+    case 3: return c;\n+    case 4: return d;\n+    case 5: return e[1];\n+    case 6: return f[1];\n+    case 7: return g[1];\n+    case 8: return h[1];\n+    case 9: return i[0];\n+    case 10: return j[0];\n+    case 11: return k[0];\n+  }\n+}\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 5\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:b->a\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:d->c\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:f->e\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:h->g\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:j->i\" \"icf\"  } } */"}]}