{"sha": "dad55d7014374121fd75112014ccadcfb9653182", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFkNTVkNzAxNDM3NDEyMWZkNzUxMTIwMTRjY2FkY2ZiOTY1MzE4Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:16:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:16:41Z"}, "message": "poly_int: two-operation SLP\n\nThis patch makes two-operation SLP handle but reject variable-length\nvectors.  Adding support for this is a post-GCC8 thing.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vect-slp.c (vect_build_slp_tree_1): Handle polynomial\n\tnumbers of units.\n\t(vect_schedule_slp_instance): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256141", "tree": {"sha": "fac63e9d72df42fb9be302e5d787225855f35ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fac63e9d72df42fb9be302e5d787225855f35ffb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dad55d7014374121fd75112014ccadcfb9653182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad55d7014374121fd75112014ccadcfb9653182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad55d7014374121fd75112014ccadcfb9653182", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad55d7014374121fd75112014ccadcfb9653182/comments", "author": null, "committer": null, "parents": [{"sha": "a23644f23da672210ea6a443cefb7cd17111b160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23644f23da672210ea6a443cefb7cd17111b160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23644f23da672210ea6a443cefb7cd17111b160"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "992ad1d9bf8b275c93e3788cef2cf86927026fbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad55d7014374121fd75112014ccadcfb9653182/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad55d7014374121fd75112014ccadcfb9653182/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dad55d7014374121fd75112014ccadcfb9653182", "patch": "@@ -1,3 +1,11 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Handle polynomial\n+\tnumbers of units.\n+\t(vect_schedule_slp_instance): Likewise.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "391b3ea1d8836fe31a1b80bc3ef7b74c173b96ed", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad55d7014374121fd75112014ccadcfb9653182/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad55d7014374121fd75112014ccadcfb9653182/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=dad55d7014374121fd75112014ccadcfb9653182", "patch": "@@ -905,10 +905,19 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n \n   /* If we allowed a two-operation SLP node verify the target can cope\n      with the permute we are going to use.  */\n+  poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   if (alt_stmt_code != ERROR_MARK\n       && TREE_CODE_CLASS (alt_stmt_code) != tcc_reference)\n     {\n-      unsigned int count = TYPE_VECTOR_SUBPARTS (vectype);\n+      unsigned HOST_WIDE_INT count;\n+      if (!nunits.is_constant (&count))\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"Build SLP failed: different operations \"\n+\t\t\t     \"not allowed with variable-length SLP.\\n\");\n+\t  return false;\n+\t}\n       vec_perm_builder sel (count, count, 1);\n       for (i = 0; i < count; ++i)\n \t{\n@@ -3824,6 +3833,7 @@ vect_schedule_slp_instance (slp_tree node, slp_instance instance,\n \n   /* VECTYPE is the type of the destination.  */\n   vectype = STMT_VINFO_VECTYPE (stmt_info);\n+  poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   group_size = SLP_INSTANCE_GROUP_SIZE (instance);\n \n   if (!SLP_TREE_VEC_STMTS (node).exists ())\n@@ -3886,13 +3896,16 @@ vect_schedule_slp_instance (slp_tree node, slp_instance instance,\n \t  unsigned k = 0, l;\n \t  for (j = 0; j < v0.length (); ++j)\n \t    {\n-\t      unsigned int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n-\t      tree_vector_builder melts (mvectype, nunits, 1);\n-\t      for (l = 0; l < nunits; ++l)\n+\t      /* Enforced by vect_build_slp_tree, which rejects variable-length\n+\t\t vectors for SLP_TREE_TWO_OPERATORS.  */\n+\t      unsigned int const_nunits = nunits.to_constant ();\n+\t      tree_vector_builder melts (mvectype, const_nunits, 1);\n+\t      for (l = 0; l < const_nunits; ++l)\n \t\t{\n \t\t  if (k >= group_size)\n \t\t    k = 0;\n-\t\t  tree t = build_int_cst (meltype, mask[k++] * nunits + l);\n+\t\t  tree t = build_int_cst (meltype,\n+\t\t\t\t\t  mask[k++] * const_nunits + l);\n \t\t  melts.quick_push (t);\n \t\t}\n \t      tmask = melts.build ();"}]}