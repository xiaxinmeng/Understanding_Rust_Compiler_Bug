{"sha": "c30b4add62a69bba7271b49d6f31f43187af5cd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMwYjRhZGQ2MmE2OWJiYTcyNzFiNDlkNmYzMWY0MzE4N2FmNWNkNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-08-02T01:58:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-02T01:58:52Z"}, "message": "re PR c++/16338 (ICE when throwing a compound literal)\n\n\tPR c++/16338\n\t* cp-tree.h (DECL_INTEGRAL_CONSTANT_VAR_P): New macro.\n\t* call.c (null_ptr_cst_p): Handle variables with constant\n\tinitializers.\n\t* pt.c (convert_nontype_argument): Use\n\tDECL_INTEGRAL_CONSTANT_VAR_P.\n\t* semantics.c (finish_id_expression): Likewise.\n\n\tPR c++~/16489\n\t* decl.c (duplicate_decls): Reject duplicate namespace\n\tdeclarations.\n\n\tPR c++/16810\n\t* typeck.c (build_ptrmemfunc): Loosen assertion.\n\n\tPR c++/16338\n\t* g++.dg/init/null1.C: New test.\n\t* g++.dg/tc1/dr76.C: Adjust error marker.\n\n\tPR c++/16489\n\t* g++.dg/parse/namespace10.C: New test.\n\n\tPR c++/16810\n\t* g++.dg/inherit/ptrmem2.C: New test.\n\nFrom-SVN: r85421", "tree": {"sha": "0e2b7a7a4e1509e9c6c21c62383e3c5ac57705e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e2b7a7a4e1509e9c6c21c62383e3c5ac57705e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c30b4add62a69bba7271b49d6f31f43187af5cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c30b4add62a69bba7271b49d6f31f43187af5cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c30b4add62a69bba7271b49d6f31f43187af5cd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c30b4add62a69bba7271b49d6f31f43187af5cd6/comments", "author": null, "committer": null, "parents": [{"sha": "112ccb83bb807c18e7540748b0b3af51d6cbe6cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112ccb83bb807c18e7540748b0b3af51d6cbe6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112ccb83bb807c18e7540748b0b3af51d6cbe6cb"}], "stats": {"total": 164, "additions": 129, "deletions": 35}, "files": [{"sha": "da833d1762a688a8eda6a11df5f03340c3cbe7b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -1,3 +1,20 @@\n+2004-08-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16338\n+\t* cp-tree.h (DECL_INTEGRAL_CONSTANT_VAR_P): New macro.\n+\t* call.c (null_ptr_cst_p): Handle variables with constant\n+\tinitializers.\n+\t* pt.c (convert_nontype_argument): Use\n+\tDECL_INTEGRAL_CONSTANT_VAR_P.\n+\t* semantics.c (finish_id_expression): Likewise.\n+\n+\tPR c++~/16489\n+\t* decl.c (duplicate_decls): Reject duplicate namespace\n+\tdeclarations.\n+\n+\tPR c++/16810\n+\t* typeck.c (build_ptrmemfunc): Loosen assertion.\n+\n 2004-08-01  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* call.c (z_candidate::template_decl): Rename from template."}, {"sha": "a34eb271001bf47661fd261509352405b1268bad", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -429,20 +429,24 @@ struct z_candidate {\n   z_candidate *next;\n };\n \n+/* Returns true iff T is a null pointer constant in the sense of\n+   [conv.ptr].  */\n+\n bool\n null_ptr_cst_p (tree t)\n {\n   /* [conv.ptr]\n \n      A null pointer constant is an integral constant expression\n      (_expr.const_) rvalue of integer type that evaluates to zero.  */\n+  if (DECL_INTEGRAL_CONSTANT_VAR_P (t))\n+    t = decl_constant_value (t);\n   if (t == null_node\n       || (CP_INTEGRAL_TYPE_P (TREE_TYPE (t)) && integer_zerop (t)))\n     return true;\n   return false;\n }\n \n-\n /* Returns nonzero if PARMLIST consists of only default parms and/or\n    ellipsis.  */\n "}, {"sha": "cdb67063f3ae773260f39d98b03d8fb077ce7c54", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -1821,6 +1821,23 @@ struct lang_decl GTY(())\n #define DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P(NODE) \\\n   (TREE_LANG_FLAG_2 (VAR_DECL_CHECK (NODE)))\n \n+/* Nonzero for a VAR_DECL that can be used in an integral constant\n+   expression.    \n+\n+      [expr.const]\n+\n+      An integral constant-expression can only involve ... const\n+      variables of static or enumeration types initialized with\n+      constant expressions ...\n+  \n+   The standard does not require that the expression be non-volatile.\n+   G++ implements the proposed correction in DR 457.  */\n+#define DECL_INTEGRAL_CONSTANT_VAR_P(NODE)\t\t\\\n+  (TREE_CODE (NODE) == VAR_DECL\t\t\t\t\\\n+   && CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (NODE))\t\\\n+   && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (NODE))\t\\\n+   && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (NODE))\n+\n /* Nonzero if the DECL was initialized in the class definition itself,\n    rather than outside the class.  This is used for both static member\n    VAR_DECLS, and FUNTION_DECLS that are defined in the class.  */"}, {"sha": "c4755c0c7b042efd919cc2f94699c2ca6eef8d5b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -1407,19 +1407,32 @@ duplicate_decls (tree newdecl, tree olddecl)\n     /* One of the declarations is a template instantiation, and the\n        other is not a template at all.  That's OK.  */\n     return NULL_TREE;\n-  else if (TREE_CODE (newdecl) == NAMESPACE_DECL\n-           && DECL_NAMESPACE_ALIAS (newdecl)\n-           && DECL_NAMESPACE_ALIAS (newdecl) == DECL_NAMESPACE_ALIAS (olddecl))\n-    /* In [namespace.alias] we have:\n-\n-\t In a declarative region, a namespace-alias-definition can be\n-\t used to redefine a namespace-alias declared in that declarative\n-\t region to refer only to the namespace to which it already\n-\t refers.\n-\n-      Therefore, if we encounter a second alias directive for the same\n-      alias, we can just ignore the second directive.  */\n-    return olddecl;\n+  else if (TREE_CODE (newdecl) == NAMESPACE_DECL)\n+    {\n+      /* In [namespace.alias] we have:\n+\t \n+           In a declarative region, a namespace-alias-definition can be\n+\t   used to redefine a namespace-alias declared in that declarative\n+\t   region to refer only to the namespace to which it already\n+\t   refers.\n+\t   \n+\t Therefore, if we encounter a second alias directive for the same\n+\t alias, we can just ignore the second directive.  */\n+      if (DECL_NAMESPACE_ALIAS (newdecl)\n+\t  && (DECL_NAMESPACE_ALIAS (newdecl) \n+\t      == DECL_NAMESPACE_ALIAS (olddecl)))\n+\treturn olddecl;\n+      /* [namespace.alias]\n+\n+         A namespace-name or namespace-alias shall not be declared as\n+\t the name of any other entity in the same declarative region.\n+\t A namespace-name defined at global scope shall not be\n+\t declared as the name of any other entity in any glogal scope\n+\t of the program.  */\n+      error (\"declaration of `namespace %D' conflicts with\", newdecl);\n+      cp_error_at (\"previous declaration of `namespace %D' here\", olddecl);\n+      return error_mark_node;\n+    }\n   else\n     {\n       const char *errmsg = redeclaration_error_message (newdecl, olddecl);"}, {"sha": "ad4891049748a7910304f805c0eba403130eec28", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -3233,9 +3233,7 @@ convert_nontype_argument (tree type, tree expr)\n \t   will not return the initializer.  Handle that special case\n \t   here.  */\n \tif (expr == const_expr\n-\t    && TREE_CODE (expr) == VAR_DECL\n-\t    && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (expr)\n-\t    && CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (expr))\n+\t    && DECL_INTEGRAL_CONSTANT_VAR_P (expr)\n \t    /* DECL_INITIAL can be NULL if we are processing a\n \t       variable initialized to an expression involving itself.\n \t       We know it is initialized to a constant -- but not what"}, {"sha": "606fe5fc3f64793808e813c70b3cbbaa640a4c8e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -2564,25 +2564,15 @@ finish_id_expression (tree id_expression,\n       /* Only certain kinds of names are allowed in constant\n        expression.  Enumerators and template parameters \n        have already been handled above.  */\n-      if (integral_constant_expression_p)\n+      if (integral_constant_expression_p\n+\t  && !DECL_INTEGRAL_CONSTANT_VAR_P (decl))\n \t{\n-\t    /* Const variables or static data members of integral or\n-\t      enumeration types initialized with constant expressions\n-\t      are OK.  */\n-\t  if (TREE_CODE (decl) == VAR_DECL\n-\t      && CP_TYPE_CONST_P (TREE_TYPE (decl))\n-\t      && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (decl))\n-\t      && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl))\n-\t    ;\n-\t  else\n+\t  if (!allow_non_integral_constant_expression_p)\n \t    {\n-\t      if (!allow_non_integral_constant_expression_p)\n-\t\t{\n-\t\t  error (\"`%D' cannot appear in a constant-expression\", decl);\n-\t\t  return error_mark_node;\n-\t\t}\n-\t      *non_integral_constant_expression_p = true;\n+\t      error (\"`%D' cannot appear in a constant-expression\", decl);\n+\t      return error_mark_node;\n \t    }\n+\t  *non_integral_constant_expression_p = true;\n \t}\n       \n       if (TREE_CODE (decl) == NAMESPACE_DECL)"}, {"sha": "bc458cad8d608a35179c116d0956312027414050", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -5463,7 +5463,10 @@ build_ptrmemfunc (tree type, tree pfn, int force)\n \t}\n \n       /* Just adjust the DELTA field.  */\n-      my_friendly_assert (TREE_TYPE (delta) == ptrdiff_type_node, 20030727);\n+      my_friendly_assert \n+\t(same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (delta),\n+\t\t\t\t\t\t    ptrdiff_type_node), \n+\t 20030727);\n       if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_delta)\n \tn = cp_build_binary_op (LSHIFT_EXPR, n, integer_one_node);\n       delta = cp_build_binary_op (PLUS_EXPR, delta, n);"}, {"sha": "c6ae76c89235764f58d3eab3b2f8544d21fd2e29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -1,3 +1,15 @@\n+2004-08-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16338\n+\t* g++.dg/init/null1.C: New test.\n+\t* g++.dg/tc1/dr76.C: Adjust error marker.\n+\t\n+\tPR c++/16489\n+\t* g++.dg/parse/namespace10.C: New test.\n+\t\n+\tPR c++/16810\n+\t* g++.dg/inherit/ptrmem2.C: New test.\n+\n 2004-08-02  Ben Elliston  <bje@au.ibm.com>\n \n \tPR target/16155"}, {"sha": "a13705576a429bd5b693735aca4f622cd3f923d0", "filename": "gcc/testsuite/g++.dg/inherit/ptrmem2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fptrmem2.C?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/16810\n+\n+struct C {\n+  virtual void f() {}\n+};\n+\n+struct B {virtual ~B() {} };\n+\n+class D : public B, public C\n+{\n+public:\n+  virtual void f() {}\n+};\n+\n+typedef void ( C::*FP)();\n+typedef void ( D::*D_f)();\n+\n+int main() {\n+  D *d = new D();\n+  C *c = d;\n+\n+  const FP fptr = (FP) &D::f;;\n+  (d->* (D_f)fptr)();\n+}\n+"}, {"sha": "37a9a3e3680c4db0c8d6fbecba63b67d87bd0785", "filename": "gcc/testsuite/g++.dg/init/null1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnull1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnull1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnull1.C?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/16338\n+\n+const int NULL = 0;\n+int main() { \n+  double* p = NULL; \n+}"}, {"sha": "aeaae615bc5be9649cab082749f845699be8363a", "filename": "gcc/testsuite/g++.dg/parse/namespace10.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace10.C?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/16489\n+\n+namespace m {} // { dg-error \"\" }\n+\n+namespace n {\n+  namespace m {}\n+}\n+\n+namespace m = n::m; // { dg-error \"\" }"}, {"sha": "0859b0c730eacf23127708d915d7194f82af6f02", "filename": "gcc/testsuite/g++.dg/tc1/dr76.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr76.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30b4add62a69bba7271b49d6f31f43187af5cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr76.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr76.C?ref=c30b4add62a69bba7271b49d6f31f43187af5cd6", "patch": "@@ -5,4 +5,4 @@\n volatile const int a = 5;\n \n template <int> struct K;\n-template struct K<a>;\t// { dg-error \"non-constant\" }\n+template struct K<a>;\t// { dg-error \"\" }"}]}