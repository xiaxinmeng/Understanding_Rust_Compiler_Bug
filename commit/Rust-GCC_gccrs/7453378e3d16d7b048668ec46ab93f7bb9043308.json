{"sha": "7453378e3d16d7b048668ec46ab93f7bb9043308", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ1MzM3OGUzZDE2ZDdiMDQ4NjY4ZWM0NmFiOTNmN2JiOTA0MzMwOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-03-18T15:00:55Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-03-18T15:00:55Z"}, "message": "re PR fortran/30531 ([4.2 only] allocatable component and intent(out) yield ICE in fold_convert)\n\n2007-03-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30531\n\tPR fortran/31086\n\t* symbo.c : Add gfc_derived_types.\n\t(gfc_free_dt_list): Free derived type list gfc_derived_types.\n\t(gfc_free_namespace): Remove call to gfc_free_dt_list.\n\t(gfc_symbol_done_2): Call  gfc_free_dt_list.\n\t* gfortran.h : Declare gfc_derived_types to be external. Remove\n\tderived types field from gfc_namespace.\n\t* resolve.c (resolve_fl_derived): Refer to gfc_derived types\n\trather than namespace derived_types.\n\t(resolve_fntype): Remove special treatment for module\n\tderived type functions.\n\t* trans-types.c (gfc_get_derived_type): Remove search for like\n\tderived types.  Finish by copying back end declaration to like\n\tderived types in the derived type list gfc_derived_types.\n\n2007-03-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30531\n\t* gfortran.dg/used_types_14.f90: New test.\n\n\tPR fortran/31086\n\t* gfortran.dg/used_types_15.f90: New test.\n\nFrom-SVN: r123037", "tree": {"sha": "2d4c05dc146767b80bc9af6736a72b89f2e7c83f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d4c05dc146767b80bc9af6736a72b89f2e7c83f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7453378e3d16d7b048668ec46ab93f7bb9043308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7453378e3d16d7b048668ec46ab93f7bb9043308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7453378e3d16d7b048668ec46ab93f7bb9043308", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7453378e3d16d7b048668ec46ab93f7bb9043308/comments", "author": null, "committer": null, "parents": [{"sha": "f210f1cd67fb6a528e4c8647a41106e11320fc91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f210f1cd67fb6a528e4c8647a41106e11320fc91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f210f1cd67fb6a528e4c8647a41106e11320fc91"}], "stats": {"total": 180, "additions": 111, "deletions": 69}, "files": [{"sha": "9ba65443de3ba073f95fe8489c95c1512137f6e0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7453378e3d16d7b048668ec46ab93f7bb9043308", "patch": "@@ -1,4 +1,22 @@\n-2007-03-17  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+2007-03-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30531\n+\tPR fortran/31086\n+\t* symbo.c : Add gfc_derived_types.\n+\t(gfc_free_dt_list): Free derived type list gfc_derived_types.\n+\t(gfc_free_namespace): Remove call to gfc_free_dt_list.\n+\t(gfc_symbol_done_2): Call  gfc_free_dt_list.\n+\t* gfortran.h : Declare gfc_derived_types to be external. Remove\n+\tderived types field from gfc_namespace.\n+\t* resolve.c (resolve_fl_derived): Refer to gfc_derived types\n+\trather than namespace derived_types.\n+\t(resolve_fntype): Remove special treatment for module\n+\tderived type functions.\n+\t* trans-types.c (gfc_get_derived_type): Remove search for like\n+\tderived types.  Finish by copying back end declaration to like\n+\tderived types in the derived type list gfc_derived_types.\n+\n+\t2007-03-17  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/31120\n \t* trans-expr.c (gfc_conv_powi): Make n argument unsigned hwi."}, {"sha": "6da8a9333e573088be7d79da36cc3642a478a75f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7453378e3d16d7b048668ec46ab93f7bb9043308", "patch": "@@ -950,6 +950,8 @@ gfc_dt_list;\n \n #define gfc_get_dt_list() gfc_getmem(sizeof(gfc_dt_list))\n \n+  /* A list of all derived types.  */\n+  extern gfc_dt_list *gfc_derived_types;\n \n /* A namespace describes the contents of procedure, module or\n    interface block.  */\n@@ -1013,9 +1015,6 @@ typedef struct gfc_namespace\n   /* A list of all alternate entry points to this procedure (or NULL).  */\n   gfc_entry_list *entries;\n \n-  /* A list of all derived types in this procedure (or NULL).  */\n-  gfc_dt_list *derived_types;\n-\n   /* Set to 1 if namespace is a BLOCK DATA program unit.  */\n   int is_block_data;\n "}, {"sha": "a72047e3ffb7ef0f7e1dec18294e7e7fd1025470", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=7453378e3d16d7b048668ec46ab93f7bb9043308", "patch": "@@ -5932,16 +5932,16 @@ resolve_fl_derived (gfc_symbol *sym)\n     }\n \n   /* Add derived type to the derived type list.  */\n-  for (dt_list = sym->ns->derived_types; dt_list; dt_list = dt_list->next)\n+  for (dt_list = gfc_derived_types; dt_list; dt_list = dt_list->next)\n     if (sym == dt_list->derived)\n       break;\n \n   if (dt_list == NULL)\n     {\n       dt_list = gfc_get_dt_list ();\n-      dt_list->next = sym->ns->derived_types;\n+      dt_list->next = gfc_derived_types;\n       dt_list->derived = sym;\n-      sym->ns->derived_types = dt_list;\n+      gfc_derived_types = dt_list;\n     }\n \n   return SUCCESS;\n@@ -7154,22 +7154,7 @@ resolve_fntype (gfc_namespace *ns)\n \t\t sym->name, &sym->declared_at, sym->ts.derived->name);\n     }\n \n-  /* Make sure that the type of a module derived type function is in the\n-     module namespace, by copying it from the namespace's derived type\n-     list, if necessary.  */\n-  if (sym->ts.type == BT_DERIVED\n-      && sym->ns->proc_name->attr.flavor == FL_MODULE\n-      && sym->ts.derived->ns\n-      && sym->ns != sym->ts.derived->ns)\n-    {\n-      gfc_dt_list *dt = sym->ns->derived_types;\n-\n-      for (; dt; dt = dt->next)\n-\tif (gfc_compare_derived_types (sym->ts.derived, dt->derived))\n-\t  sym->ts.derived = dt->derived;\n-    }\n-\n-  if (ns->entries)\n+    if (ns->entries)\n     for (el = ns->entries->next; el; el = el->next)\n       {\n \tif (el->sym->result == el->sym"}, {"sha": "7bf9aecf9574726a2c0917ff8b8715e2fbb8cd1e", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=7453378e3d16d7b048668ec46ab93f7bb9043308", "patch": "@@ -91,6 +91,8 @@ gfc_gsymbol *gfc_gsym_root = NULL;\n \n static gfc_symbol *changed_syms = NULL;\n \n+gfc_dt_list *gfc_derived_types;\n+\n \n /*********** IMPLICIT NONE and IMPLICIT statement handlers ***********/\n \n@@ -2528,18 +2530,20 @@ free_sym_tree (gfc_symtree * sym_tree)\n }\n \n \n-/* Free a derived type list.  */\n+/* Free the derived type list.  */\n \n static void\n-gfc_free_dt_list (gfc_dt_list * dt)\n+gfc_free_dt_list (void)\n {\n-  gfc_dt_list *n;\n+  gfc_dt_list *dt, *n;\n \n-  for (; dt; dt = n)\n+  for (dt = gfc_derived_types; dt; dt = n)\n     {\n       n = dt->next;\n       gfc_free (dt);\n     }\n+\n+  gfc_derived_types = NULL;\n }\n \n \n@@ -2605,8 +2609,6 @@ gfc_free_namespace (gfc_namespace * ns)\n   gfc_free_equiv (ns->equiv);\n   gfc_free_equiv_lists (ns->equiv_lists);\n \n-  gfc_free_dt_list (ns->derived_types);\n-\n   for (i = GFC_INTRINSIC_BEGIN; i != GFC_INTRINSIC_END; i++)\n     gfc_free_interface (ns->operator[i]);\n \n@@ -2639,6 +2641,7 @@ gfc_symbol_done_2 (void)\n \n   gfc_free_namespace (gfc_current_ns);\n   gfc_current_ns = NULL;\n+  gfc_free_dt_list ();\n }\n \n "}, {"sha": "db93a109045cb75a2ba1fa71a57ae1f2e13ab185", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=7453378e3d16d7b048668ec46ab93f7bb9043308", "patch": "@@ -1463,7 +1463,6 @@ gfc_get_derived_type (gfc_symbol * derived)\n   tree typenode, field, field_type, fieldlist;\n   gfc_component *c;\n   gfc_dt_list *dt;\n-  gfc_namespace * ns;\n \n   gcc_assert (derived && derived->attr.flavor == FL_DERIVED);\n \n@@ -1479,39 +1478,6 @@ gfc_get_derived_type (gfc_symbol * derived)\n     }\n   else\n     {\n-      /* If an equal derived type is already available in the parent namespace,\n-\t use its backend declaration and those of its components, rather than\n-\t building anew so that potential dummy and actual arguments use the\n-\t same TREE_TYPE.  If an equal type is found without a backend_decl,\n-\t build the parent version and use it in the current namespace.  */\n-      if (derived->ns->parent)\n-\tns = derived->ns->parent;\n-      else if (derived->ns->proc_name\n-\t\t && derived->ns->proc_name->ns != derived->ns)\n-\t/* Derived types in an interface body obtain their parent reference\n-\t   through the proc_name symbol.  */\n-\tns = derived->ns->proc_name->ns;\n-      else\n-\t/* Sometimes there isn't a parent reference!  */\n-\tns = NULL;\n-\n-      for (; ns; ns = ns->parent)\n-\t{\n-\t  for (dt = ns->derived_types; dt; dt = dt->next)\n-\t    {\n-\t      if (dt->derived == derived)\n-\t\tcontinue;\n-\n-\t      if (dt->derived->backend_decl == NULL\n-\t\t    && gfc_compare_derived_types (dt->derived, derived))\n-\t\tgfc_get_derived_type (dt->derived);\n-\n-\t      if (copy_dt_decls_ifequal (dt->derived, derived))\n-\t\tbreak;\n-\t    }\n-\t  if (derived->backend_decl)\n-\t    goto other_equal_dts;\n-\t}\n \n       /* We see this derived type first time, so build the type node.  */\n       typenode = make_node (RECORD_TYPE);\n@@ -1591,12 +1557,8 @@ gfc_get_derived_type (gfc_symbol * derived)\n \n   derived->backend_decl = typenode;\n \n-other_equal_dts:\n-  /* Add this backend_decl to all the other, equal derived types and\n-     their components in this and sibling namespaces.  */\n-  ns = derived->ns->parent ? derived->ns->parent->contained : derived->ns;\n-  for (; ns; ns = ns->sibling)\n-    for (dt = ns->derived_types; dt; dt = dt->next)\n+    /* Add this backend_decl to all the other, equal derived types.  */\n+    for (dt = gfc_derived_types; dt; dt = dt->next)\n       copy_dt_decls_ifequal (derived, dt->derived);\n \n   return derived->backend_decl;"}, {"sha": "51540e3e8de670871a6e7ba19dd12ee06c6b1af3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7453378e3d16d7b048668ec46ab93f7bb9043308", "patch": "@@ -1,3 +1,11 @@\n+2007-03-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30531\n+\t* gfortran.dg/used_types_14.f90: New test.\n+\n+\tPR fortran/31086\n+\t* gfortran.dg/used_types_15.f90: New test.\n+\n 2007-03-18  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* gcc.dg/vect/no-tree-dom-vect-bug.c: New test."}, {"sha": "3316b4ad02ca93801b3b59b8c0e77f429d63a4c2", "filename": "gcc/testsuite/gfortran.dg/used_types_14.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_14.f90?ref=7453378e3d16d7b048668ec46ab93f7bb9043308", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+! Tests the fix for PR30531 in which the interface derived types\n+! was not being associated.\n+!\n+! Contributed by Salvatore Filippone  <sfilippone@uniroma2.it>\n+!\n+module foo_type_mod\n+  type foo_type\n+     integer, allocatable :: md(:)\n+  end type foo_type\n+end module foo_type_mod\n+\n+module foo_mod\n+\n+  interface\n+    subroutine foo_initvg(foo_a)\n+      use foo_type_mod\n+      Type(foo_type), intent(out) :: foo_a\n+    end subroutine foo_initvg\n+  end interface\n+\n+contains\n+\n+  subroutine foo_ext(foo_a)\n+    use foo_type_mod\n+    Type(foo_type) :: foo_a\n+\n+    call foo_initvg(foo_a)\n+  end subroutine foo_ext\n+\n+end module foo_mod\n+! { dg-final { cleanup-modules \"foo_type_mod foo_mod\" } }"}, {"sha": "7f7dbb8e1395e498d4826f3b81b86a808e193b80", "filename": "gcc/testsuite/gfortran.dg/used_types_15.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7453378e3d16d7b048668ec46ab93f7bb9043308/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_15.f90?ref=7453378e3d16d7b048668ec46ab93f7bb9043308", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! Tests the fix for PR31086 in which the chained derived types\n+! was not being associated.\n+!\n+! Contributed by Daniel Franke <dfranke@gcc.gnu.org>\n+!\n+MODULE class_dummy_atom_types\n+TYPE :: dummy_atom_list\n+  TYPE(dummy_atom), DIMENSION(:), POINTER :: table\n+END TYPE\n+\n+TYPE :: dummy_atom\n+  TYPE(dummy_atom_list) :: neighbours\n+END TYPE\n+\n+TYPE :: dummy_atom_model\n+  TYPE(dummy_atom_list) :: atoms\n+END TYPE\n+END MODULE\n+\n+MODULE test_class_intensity_private\n+CONTAINS\n+  SUBROUTINE change_phase(atom)\n+    USE class_dummy_atom_types\n+    TYPE(dummy_atom), INTENT(inout) :: atom\n+  END SUBROUTINE\n+\n+  SUBROUTINE simulate_cube()\n+    USE class_dummy_atom_types\n+    TYPE(dummy_atom)       :: atom\n+    TYPE(dummy_atom_model) :: dam\n+    atom = dam%atoms%table(1)\n+  END SUBROUTINE\n+END MODULE\n+! { dg-final { cleanup-modules \"class_dummy_atom_types test_class_intensity_private\" } }"}]}