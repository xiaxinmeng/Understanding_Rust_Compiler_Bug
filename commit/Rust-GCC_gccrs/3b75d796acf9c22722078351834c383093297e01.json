{"sha": "3b75d796acf9c22722078351834c383093297e01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I3NWQ3OTZhY2Y5YzIyNzIyMDc4MzUxODM0YzM4MzA5MzI5N2UwMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-17T00:03:14Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-17T00:03:14Z"}, "message": "c-common.c (c_estimate_num_insns_1): Handle builtin_constant_p and builtin_expect specially.\n\n\t* c-common.c (c_estimate_num_insns_1): Handle builtin_constant_p and\n\tbuiltin_expect specially.\n\t* params.def (PARAM_MAX_INLINE_INSNS_AUTO): Set to 100.\n\t(PARAM_LARGE_FUNCTION_INSNS): Set to 3000.\n\t* invoke.texi (max-inline-insns-single): Set to 100.\n\t(large-function-insns): Set to 3000.\n\nFrom-SVN: r76007", "tree": {"sha": "a45035f8d861fdcaa6b1f40eb57acaaa17897ce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a45035f8d861fdcaa6b1f40eb57acaaa17897ce2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b75d796acf9c22722078351834c383093297e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b75d796acf9c22722078351834c383093297e01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b75d796acf9c22722078351834c383093297e01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b75d796acf9c22722078351834c383093297e01/comments", "author": null, "committer": null, "parents": [{"sha": "d440f6424f307cd67843b27c9109211d1f51dcd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d440f6424f307cd67843b27c9109211d1f51dcd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d440f6424f307cd67843b27c9109211d1f51dcd1"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "8d017a1b50cc884bf9119d8c490981d6ff6fe157", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b75d796acf9c22722078351834c383093297e01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b75d796acf9c22722078351834c383093297e01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b75d796acf9c22722078351834c383093297e01", "patch": "@@ -1,3 +1,12 @@\n+2004-01-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* c-common.c (c_estimate_num_insns_1): Handle builtin_constant_p and\n+\tbuiltin_expect specially.\n+\t* params.def (PARAM_MAX_INLINE_INSNS_AUTO): Set to 100.\n+\t(PARAM_LARGE_FUNCTION_INSNS): Set to 3000.\n+\t* invoke.texi (max-inline-insns-single): Set to 100.\n+\t(large-function-insns): Set to 3000.\n+\n 2004-01-16  Eric Christopher  <echristo@redhat.com>\n \t    Chandrakala Chavva <cchavva@redhat.com>\n "}, {"sha": "87ff0536e1ecf6aeb3368fca64ed4db27d96571e", "filename": "gcc/c-common.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b75d796acf9c22722078351834c383093297e01/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b75d796acf9c22722078351834c383093297e01/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3b75d796acf9c22722078351834c383093297e01", "patch": "@@ -5780,6 +5780,24 @@ c_estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n \t  *count += ((size + MOVE_MAX_PIECES - 1) / MOVE_MAX_PIECES);\n       }\n       break;\n+    case CALL_EXPR:\n+      {\n+\ttree decl = get_callee_fndecl (x);\n+\n+\tif (decl && DECL_BUILT_IN (decl))\n+\t  switch (DECL_FUNCTION_CODE (decl))\n+\t    {\n+\t    case BUILT_IN_CONSTANT_P:\n+\t      *walk_subtrees = 0;\n+\t      return NULL_TREE;\n+\t    case BUILT_IN_EXPECT:\n+\t      return NULL_TREE;\n+\t    default:\n+\t      break;\n+\t    }\n+\t*count += 10;\n+\tbreak;\n+      }\n     /* Few special cases of expensive operations.  This is usefull\n        to avoid inlining on functions having too many of these.  */\n     case TRUNC_DIV_EXPR:\n@@ -5791,7 +5809,6 @@ c_estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case FLOOR_MOD_EXPR:\n     case ROUND_MOD_EXPR:\n     case RDIV_EXPR:\n-    case CALL_EXPR:\n       *count += 10;\n       break;\n     /* Various containers that will produce no code themselves.  */"}, {"sha": "be25392a982503fc0df18d80452d9045d78228c9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b75d796acf9c22722078351834c383093297e01/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b75d796acf9c22722078351834c383093297e01/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3b75d796acf9c22722078351834c383093297e01", "patch": "@@ -4715,15 +4715,15 @@ a lot of functions that would otherwise not be considered for inlining\n by the compiler will be investigated.  To those functions, a different\n (more restrictive) limit compared to functions declared inline can\n be applied.\n-The default value is 150.\n+The default value is 120.\n \n @item large-function-insns\n The limit specifying really large functions.  For functions greater than this\n limit inlining is constrained by @option{--param large-function-growth}.\n This parameter is useful primarily to avoid extreme compilation time caused by non-linear\n algorithms used by the backend.\n This parameter is ignored when @option{-funit-at-a-time} is not used.\n-The default value is 30000.\n+The default value is 3000.\n \n @item large-function-growth\n Specifies maximal growth of large functtion caused by inlining in percents."}, {"sha": "0d905090980b8555ff37d80a044f43487da41cdc", "filename": "gcc/params.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b75d796acf9c22722078351834c383093297e01/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b75d796acf9c22722078351834c383093297e01/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=3b75d796acf9c22722078351834c383093297e01", "patch": "@@ -63,7 +63,7 @@ DEFPARAM (PARAM_MAX_INLINE_INSNS_SINGLE,\n DEFPARAM (PARAM_MAX_INLINE_INSNS_AUTO,\n \t  \"max-inline-insns-auto\",\n \t  \"The maximum number of instructions when automatically inlining\",\n-\t  150)\n+\t  120)\n \n /* For languages that (still) use the RTL inliner, we can specify\n    limits for the RTL inliner separately.\n@@ -110,7 +110,7 @@ DEFPARAM(PARAM_MAX_PENDING_LIST_LENGTH,\n DEFPARAM(PARAM_LARGE_FUNCTION_INSNS,\n \t \"large-function-insns\",\n \t \"The size of function body to be considered large\",\n-\t 10000)\n+\t 3000)\n DEFPARAM(PARAM_LARGE_FUNCTION_GROWTH,\n \t \"large-function-growth\",\n \t \"Maximal growth due to inlining of large function (in percent)\","}]}