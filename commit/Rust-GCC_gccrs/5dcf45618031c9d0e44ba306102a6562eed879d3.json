{"sha": "5dcf45618031c9d0e44ba306102a6562eed879d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRjZjQ1NjE4MDMxYzlkMGU0NGJhMzA2MTAyYTY1NjJlZWQ4NzlkMw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-12-04T17:48:44Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-12-04T17:48:44Z"}, "message": "PR c/78668 - aligned_alloc, realloc, et al. missing attribute alloc_size\n\ngcc/ChangeLog:\n\n\tPR c/78668\n        * builtin-attrs.def (ATTR_ALLOC_SIZE, ATTR_RETURNS_NONNULL): New\n        identifier tree nodes.\n        (ATTR_ALLOCA_SIZE_1_NOTHROW_LEAF_LIST): New attribute list.\n        (ATTR_MALLOC_SIZE_1_NOTHROW_LIST): Same.\n        (ATTR_MALLOC_SIZE_1_NOTHROW_LEAF_LIST): Same.\n        (ATTR_MALLOC_SIZE_1_2_NOTHROW_LEAF_LIST): Same.\n        (ATTR_ALLOC_SIZE_2_NOTHROW_LEAF_LIST): Same.\n        * builtins.def (aligned_alloc, calloc, malloc, realloc):\n        Add attribute alloc_size.\n        (alloca): Add attribute alloc_size and returns_nonnull.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/78668\n\t* gcc.dg/builtin-alloc-size.c: New test.\n\nFrom-SVN: r243231", "tree": {"sha": "a2b92f8621a6149627fede384c04f7664300a214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2b92f8621a6149627fede384c04f7664300a214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dcf45618031c9d0e44ba306102a6562eed879d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dcf45618031c9d0e44ba306102a6562eed879d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dcf45618031c9d0e44ba306102a6562eed879d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dcf45618031c9d0e44ba306102a6562eed879d3/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b7d84532342ed038a07d850ddacf7a86106a998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b7d84532342ed038a07d850ddacf7a86106a998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b7d84532342ed038a07d850ddacf7a86106a998"}], "stats": {"total": 122, "additions": 117, "deletions": 5}, "files": [{"sha": "c33ad2f149c3dc6bde3202c88d6b0b38f14477e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcf45618031c9d0e44ba306102a6562eed879d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcf45618031c9d0e44ba306102a6562eed879d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dcf45618031c9d0e44ba306102a6562eed879d3", "patch": "@@ -1,3 +1,17 @@\n+2016-12-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/78668\n+        * builtin-attrs.def (ATTR_ALLOC_SIZE, ATTR_RETURNS_NONNULL): New\n+        identifier tree nodes.\n+        (ATTR_ALLOCA_SIZE_1_NOTHROW_LEAF_LIST): New attribute list.\n+        (ATTR_MALLOC_SIZE_1_NOTHROW_LIST): Same.\n+        (ATTR_MALLOC_SIZE_1_NOTHROW_LEAF_LIST): Same.\n+        (ATTR_MALLOC_SIZE_1_2_NOTHROW_LEAF_LIST): Same.\n+        (ATTR_ALLOC_SIZE_2_NOTHROW_LEAF_LIST): Same.\n+        * builtins.def (aligned_alloc, calloc, malloc, realloc):\n+        Add attribute alloc_size.\n+        (alloca): Add attribute alloc_size and returns_nonnull.\n+\n 2016-12-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/70322"}, {"sha": "1520d151007f6be15c2069a257556721c0edb5cf", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcf45618031c9d0e44ba306102a6562eed879d3/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcf45618031c9d0e44ba306102a6562eed879d3/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=5dcf45618031c9d0e44ba306102a6562eed879d3", "patch": "@@ -83,6 +83,7 @@ DEF_LIST_INT_INT (5,6)\n #undef DEF_LIST_INT_INT\n \n /* Construct trees for identifiers.  */\n+DEF_ATTR_IDENT (ATTR_ALLOC_SIZE, \"alloc_size\")\n DEF_ATTR_IDENT (ATTR_COLD, \"cold\")\n DEF_ATTR_IDENT (ATTR_CONST, \"const\")\n DEF_ATTR_IDENT (ATTR_FORMAT, \"format\")\n@@ -151,6 +152,26 @@ DEF_ATTR_TREE_LIST (ATTR_SENTINEL_NOTHROW_LEAF_LIST, ATTR_SENTINEL,\t\\\n DEF_ATTR_TREE_LIST (ATTR_COLD_CONST_NORETURN_NOTHROW_LEAF_LIST, ATTR_CONST,\\\n \t\t\tATTR_NULL, ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n \n+/* Allocation functions like malloc and realloc whose first argument\n+   specifies the size of the allocated object.  */\n+DEF_ATTR_TREE_LIST (ATTR_MALLOC_SIZE_1_NOTHROW_LIST, ATTR_ALLOC_SIZE,\t\\\n+\t\t\tATTR_LIST_1, ATTR_MALLOC_NOTHROW_LIST)\n+DEF_ATTR_TREE_LIST (ATTR_MALLOC_SIZE_1_NOTHROW_LEAF_LIST, ATTR_ALLOC_SIZE, \\\n+\t\t        ATTR_LIST_1, ATTR_MALLOC_NOTHROW_LEAF_LIST)\n+/* Alloca is just like malloc except that it never returns null.  */\n+DEF_ATTR_TREE_LIST (ATTR_ALLOCA_SIZE_1_NOTHROW_LEAF_LIST, ATTR_RETURNS_NONNULL,\n+\t\t    ATTR_NULL, ATTR_MALLOC_SIZE_1_NOTHROW_LEAF_LIST)\n+\n+/* Allocation functions like calloc the product of whose first two arguments\n+   specifies the size of the allocated object.  */\n+DEF_ATTR_TREE_LIST (ATTR_MALLOC_SIZE_1_2_NOTHROW_LEAF_LIST, ATTR_ALLOC_SIZE, \\\n+\t\t        ATTR_LIST_1_2, ATTR_MALLOC_NOTHROW_LEAF_LIST)\n+\n+/* Allocation functions like realloc whose second argument specifies\n+   the size of the allocated object.  */\n+DEF_ATTR_TREE_LIST (ATTR_ALLOC_SIZE_2_NOTHROW_LEAF_LIST, ATTR_ALLOC_SIZE, \\\n+\t\t        ATTR_LIST_2, ATTR_NOTHROW_LEAF_LIST)\n+\n /* Functions whose pointer parameter(s) are all nonnull.  */\n DEF_ATTR_TREE_LIST (ATTR_NONNULL_LIST, ATTR_NONNULL, ATTR_NULL, ATTR_NULL)\n /* Functions whose first parameter is a nonnull pointer.  */"}, {"sha": "9cd24e8a89ce48dd9e299f529d7176fb10ec0257", "filename": "gcc/builtins.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcf45618031c9d0e44ba306102a6562eed879d3/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcf45618031c9d0e44ba306102a6562eed879d3/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=5dcf45618031c9d0e44ba306102a6562eed879d3", "patch": "@@ -297,7 +297,7 @@ DEF_C99_BUILTIN        (BUILT_IN_ACOSH, \"acosh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHF\n DEF_C99_BUILTIN        (BUILT_IN_ACOSHF, \"acoshf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ACOSHL, \"acoshl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ACOSL, \"acosl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n-DEF_C11_BUILTIN        (BUILT_IN_ALIGNED_ALLOC, \"aligned_alloc\", BT_FN_PTR_SIZE_SIZE, ATTR_MALLOC_NOTHROW_LIST)\n+DEF_C11_BUILTIN        (BUILT_IN_ALIGNED_ALLOC, \"aligned_alloc\", BT_FN_PTR_SIZE_SIZE, ATTR_MALLOC_SIZE_1_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_ASIN, \"asin\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ASINF, \"asinf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ASINH, \"asinh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n@@ -777,15 +777,15 @@ DEF_GCC_BUILTIN        (BUILT_IN_UMULLL_OVERFLOW, \"umulll_overflow\", BT_FN_BOOL_\n DEF_LIB_BUILTIN        (BUILT_IN_ABORT, \"abort\", BT_FN_VOID, ATTR_TMPURE_NORETURN_NOTHROW_LEAF_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_ABS, \"abs\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_AGGREGATE_INCOMING_ADDRESS, \"aggregate_incoming_address\", BT_FN_PTR_VAR, ATTR_LEAF_LIST)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_ALLOCA, \"alloca\", BT_FN_PTR_SIZE, ATTR_MALLOC_NOTHROW_LEAF_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_ALLOCA, \"alloca\", BT_FN_PTR_SIZE, ATTR_ALLOCA_SIZE_1_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_APPLY, \"apply\", BT_FN_PTR_PTR_FN_VOID_VAR_PTR_SIZE, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_APPLY_ARGS, \"apply_args\", BT_FN_PTR_VAR, ATTR_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP16, \"bswap16\", BT_FN_UINT16_UINT16, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP32, \"bswap32\", BT_FN_UINT32_UINT32, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP64, \"bswap64\", BT_FN_UINT64_UINT64, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_CLEAR_CACHE, \"__clear_cache\", BT_FN_VOID_PTR_PTR, ATTR_NOTHROW_LEAF_LIST)\n /* [trans-mem]: Adjust BUILT_IN_TM_CALLOC if BUILT_IN_CALLOC is changed.  */\n-DEF_LIB_BUILTIN        (BUILT_IN_CALLOC, \"calloc\", BT_FN_PTR_SIZE_SIZE, ATTR_MALLOC_NOTHROW_LEAF_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_CALLOC, \"calloc\", BT_FN_PTR_SIZE_SIZE, ATTR_MALLOC_SIZE_1_2_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_CLASSIFY_TYPE, \"classify_type\", BT_FN_INT_VAR, ATTR_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_CLZ, \"clz\", BT_FN_INT_UINT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_CLZIMAX, \"clzimax\", BT_FN_INT_UINTMAX, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -861,7 +861,7 @@ DEF_LIB_BUILTIN        (BUILT_IN_LABS, \"labs\", BT_FN_LONG_LONG, ATTR_CONST_NOTHR\n DEF_C99_BUILTIN        (BUILT_IN_LLABS, \"llabs\", BT_FN_LONGLONG_LONGLONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_LONGJMP, \"longjmp\", BT_FN_VOID_PTR_INT, ATTR_NORETURN_NOTHROW_LIST)\n /* [trans-mem]: Adjust BUILT_IN_TM_MALLOC if BUILT_IN_MALLOC is changed.  */\n-DEF_LIB_BUILTIN        (BUILT_IN_MALLOC, \"malloc\", BT_FN_PTR_SIZE, ATTR_MALLOC_NOTHROW_LEAF_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_MALLOC, \"malloc\", BT_FN_PTR_SIZE, ATTR_MALLOC_SIZE_1_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_NEXT_ARG, \"next_arg\", BT_FN_PTR_VAR, ATTR_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_PARITY, \"parity\", BT_FN_INT_UINT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_PARITYIMAX, \"parityimax\", BT_FN_INT_UINTMAX, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -873,7 +873,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTL, \"popcountl\", BT_FN_INT_ULONG, ATTR_C\n DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTLL, \"popcountll\", BT_FN_INT_ULONGLONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_POSIX_MEMALIGN, \"posix_memalign\", BT_FN_INT_PTRPTR_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n DEF_GCC_BUILTIN        (BUILT_IN_PREFETCH, \"prefetch\", BT_FN_VOID_CONST_PTR_VAR, ATTR_NOVOPS_LEAF_LIST)\n-DEF_LIB_BUILTIN        (BUILT_IN_REALLOC, \"realloc\", BT_FN_PTR_PTR_SIZE, ATTR_NOTHROW_LEAF_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_REALLOC, \"realloc\", BT_FN_PTR_PTR_SIZE, ATTR_ALLOC_SIZE_2_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_RETURN, \"return\", BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_RETURN_ADDRESS, \"return_address\", BT_FN_PTR_UINT, ATTR_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_SAVEREGS, \"saveregs\", BT_FN_PTR_VAR, ATTR_NULL)"}, {"sha": "838fca5f1bc1a4d70e3f5810960213f7c6ef6f8a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcf45618031c9d0e44ba306102a6562eed879d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcf45618031c9d0e44ba306102a6562eed879d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5dcf45618031c9d0e44ba306102a6562eed879d3", "patch": "@@ -1,3 +1,8 @@\n+2016-12-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/78668\n+\t* gcc.dg/builtin-alloc-size.c: New test.\n+\n 2016-12-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/70322"}, {"sha": "5a40862faf844dad8ef07b5deeef05181ab4f1b6", "filename": "gcc/testsuite/gcc.dg/builtin-alloc-size.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcf45618031c9d0e44ba306102a6562eed879d3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-alloc-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcf45618031c9d0e44ba306102a6562eed879d3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-alloc-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-alloc-size.c?ref=5dcf45618031c9d0e44ba306102a6562eed879d3", "patch": "@@ -0,0 +1,72 @@\n+/* PR c/78668 - aligned_alloc, realloc, et al. missing attribute alloc_size\n+   Test to verify that memory allocation built-ins are decorated with\n+   attribute alloc_size that __builtin_object_size can make use of (or\n+   are treated as if they were for that purpose)..\n+   { dg-do compile }\n+   { dg-additional-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void sink (void*);\n+\n+unsigned size (unsigned n)\n+{\n+  return n;\n+}\n+\n+void test_aligned_alloc (unsigned a)\n+{\n+  unsigned n = size (7);\n+\n+  void *p = __builtin_aligned_alloc (n, a);\n+  if (__builtin_object_size (p, 0) != n)\n+    __builtin_abort ();\n+  sink (p);\n+}\n+\n+void test_alloca (void)\n+{\n+  unsigned n = size (13);\n+\n+  void *p = __builtin_alloca (n);\n+\n+  /* Also verify that alloca is declared with attribute returns_nonnull\n+     (or treated as it were as the case may be).  */\n+  if (!p)\n+    __builtin_abort ();\n+\n+  if (__builtin_object_size (p, 0) != n)\n+    __builtin_abort ();\n+  sink (p);\n+}\n+\n+void test_calloc (void)\n+{\n+  unsigned m = size (19);\n+  unsigned n = size (23);\n+\n+  void *p = __builtin_calloc (m, n);\n+  if (__builtin_object_size (p, 0) != m * n)\n+    __builtin_abort ();\n+  sink (p);\n+}\n+\n+void test_malloc (void)\n+{\n+  unsigned n = size (17);\n+\n+  void *p = __builtin_malloc (n);\n+  if (__builtin_object_size (p, 0) != n)\n+    __builtin_abort ();\n+  sink (p);\n+}\n+\n+void test_realloc (void *p)\n+{\n+  unsigned n = size (31);\n+\n+  p = __builtin_realloc (p, n);\n+  if (__builtin_object_size (p, 0) != n)\n+    __builtin_abort ();\n+  sink (p);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } } */"}]}