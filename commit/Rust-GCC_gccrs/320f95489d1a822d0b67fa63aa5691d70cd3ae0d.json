{"sha": "320f95489d1a822d0b67fa63aa5691d70cd3ae0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwZjk1NDg5ZDFhODIyZDBiNjdmYTYzYWE1NjkxZDcwY2QzYWUwZA==", "commit": {"author": {"name": "Felix Natter", "email": "fnatter@gmx.net", "date": "2000-08-07T19:29:19Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-08-07T19:29:19Z"}, "message": "porting-howto.html: New version.\n\n2000-08-07  Felix Natter  <fnatter@gmx.net>\n\n\t* docs/17_intro/porting-howto.html:  New version.\n\nFrom-SVN: r35555", "tree": {"sha": "8087e1fc7b8fd94118772322cff24d8bfc1f2ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8087e1fc7b8fd94118772322cff24d8bfc1f2ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/320f95489d1a822d0b67fa63aa5691d70cd3ae0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320f95489d1a822d0b67fa63aa5691d70cd3ae0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320f95489d1a822d0b67fa63aa5691d70cd3ae0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320f95489d1a822d0b67fa63aa5691d70cd3ae0d/comments", "author": {"login": "fnatter", "id": 1979118, "node_id": "MDQ6VXNlcjE5NzkxMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1979118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnatter", "html_url": "https://github.com/fnatter", "followers_url": "https://api.github.com/users/fnatter/followers", "following_url": "https://api.github.com/users/fnatter/following{/other_user}", "gists_url": "https://api.github.com/users/fnatter/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnatter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnatter/subscriptions", "organizations_url": "https://api.github.com/users/fnatter/orgs", "repos_url": "https://api.github.com/users/fnatter/repos", "events_url": "https://api.github.com/users/fnatter/events{/privacy}", "received_events_url": "https://api.github.com/users/fnatter/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10120687102bd8cff1cfb26bb904b6246f36f4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10120687102bd8cff1cfb26bb904b6246f36f4df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10120687102bd8cff1cfb26bb904b6246f36f4df"}], "stats": {"total": 803, "additions": 508, "deletions": 295}, "files": [{"sha": "df0e50a5070c8034e3db85c18c68ec68a062b806", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320f95489d1a822d0b67fa63aa5691d70cd3ae0d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320f95489d1a822d0b67fa63aa5691d70cd3ae0d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=320f95489d1a822d0b67fa63aa5691d70cd3ae0d", "patch": "@@ -1,3 +1,7 @@\n+2000-08-07  Felix Natter  <fnatter@gmx.net>\n+\n+\t* docs/17_intro/porting-howto.html:  New version.\n+\n 2000-08-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* bits/locale_facets.h (ctype::ctype): Don't name unused"}, {"sha": "4e6422e67c1af206a4738a31f884629ad9892243", "filename": "libstdc++-v3/docs/17_intro/porting-howto.html", "status": "modified", "additions": 504, "deletions": 295, "changes": 799, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320f95489d1a822d0b67fa63aa5691d70cd3ae0d/libstdc%2B%2B-v3%2Fdocs%2F17_intro%2Fporting-howto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320f95489d1a822d0b67fa63aa5691d70cd3ae0d/libstdc%2B%2B-v3%2Fdocs%2F17_intro%2Fporting-howto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2F17_intro%2Fporting-howto.html?ref=320f95489d1a822d0b67fa63aa5691d70cd3ae0d", "patch": "@@ -1,305 +1,514 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n-\n <html>\n-\n   <head>\n     <title>Libstdc++-porting-howto</title>\n+    <meta content=\"DocBook XSL Stylesheets V1.16\" name=\"generator\">\n   </head>\n-\n-  <body>\n-\n-  <h1>Porting to libstdc++-v3</h1>\n-\n-  <center>\n-  <li><a href = \"#std\">Namespaces std</a>\n-  <li><a href = \"#nocreate\">File-flags: <tt>ios::nocreate</tt> and\n-  <tt>ios::noreplace</tt></a>\n-  <li><a href = \"#headers\">The new headers</a>\n-  <li><a href = \"#iterators\">Iterator-changes</a>\n-  <li><a href = \"#macros\">Libc-macros</a>\n-  <li><a href = \"#about\">Comments, suggestions, corrections, questions...</a>\n-  </center>\n-\n-  <p>\n-In the following, when I say portable, I will refer to \"portable among ISO\n-14882-implementations\". On the other hand, if I say \"backportable\" or\n-\"conservative\", I am talking about \"compiles with older\n-libstdc++-implementations\".\n-</p>\n-\n-    <a name = \"std\">\n-\t<h2>Namespace std::</h2>\n-\t</a>\n-\t  <p>\n-The latest C++-standard (ISO-14882) requires that the standard C++-library\n-is defined in namespace std::. Thus, to use classes from the standard c++\n-library, you can do one of three things:\n-  <ul>\n-    <li>wrap your code in <tt>namespace std { ... }</tt> => This is not an\n-   option because only symbols from the standard c++-library are defined in\n-   namespace std::.\n-\n-    <li>put a kind of <dfn>using-declaration</dfn> in your source (either\n-\t<tt>using namespace std;</tt> or i.e. <tt>using std::string;</tt>)\n-\t=> works well for source-files, but cannot be used in header-files\n-\n-\t<li>use a <dfn>fully qualified name</dfn> for each libstdc++-symbol\n-\t(i.e. <tt>std::string</tt>, <tt>std::cout</tt>) => can always be used\n-  </ul>\n-</p>\n-      <p>\n-Because there are many compilers which still use an implementation that\n-does not have the standard C++-library in namespace <tt>std::</tt>, some\n-care is required to support these as well.\n-</p>\n-      <p>\n-Namespace back-portability-issues are generally not a problem with g++,\n-because versions of g++ that do not have libstdc++ in <tt>std::</tt> use\n-<tt>-fno-honor-std</tt> (ignore <tt>std::</tt>, <tt>:: = std::</tt>) by\n-default. That is, the responsibility for enabling or disabling\n-<tt>std::</tt> is on the user; the maintainer does not have to care about it.\n-This probably applies to some other compilers as well.\n-</p>\n-      <p>\n-The following sections list some possible solutions to support compilers\n-that cannot ignore std::.\n-</p> \n-      <a name = \"gtkmm\">\n-      <h3>Using <dfn>namespace composition</dfn> if the project uses a separate\n-      namespace</h3>\n-\t  </a>\n-\n-\t    <p>\n-<a href = \"http://gtkmm.sourcforge.net\">Gtk--</a> defines most of its\n-classes in namespace Gtk::. Thus, it was possible to adapt Gtk-- to\n-namespace std:: by using a C++-feature called <dfn>namespace\n-composition</dfn>. This is what happens if you put a\n-<dfn>using</dfn>-declaration into a namespace-definition: the imported\n-symbol(s) gets imported into the currently active namespace(s). For example:\n-<pre>\n-namespace Gtk {\n-\tusing std::string;\n-\tclass Window { ... }\n-}\n-</pre>\n-In this example, <tt>std::string</tt> gets imported into namespace Gtk::.\n-The result is that you don't have to use <tt>std::string</tt> in this\n-header, but still <tt>std::string</tt> does not get imported into\n-user-space (the global namespace ::) unless the user does <tt>using\n-namespace Gtk;</tt> (which is not recommended practice for Gtk--, so it is\n-not a problem).  Additionally, the <tt>using</tt>-declarations are wrapped\n-in macros that are set based on autoconf-tests to either \"\" or\n-i.e. <tt>using std::string;</tt> (depending on whether the system has\n-libstdc++ in <tt>std::</tt> or not).\n-(ideas from llewelly@dbritsch.dsl.xmission.com,\n-Karl Nelson <kenelson@ece.ucdavis.edu>)\n-</p>\n-\n-      <h3>Defining an empty namespace std</h3>\n-\t    <p>\n-By defining an (empty) namespace <tt>std::</tt> before using it, you can\n-avoid getting errors on systems where no part of the library is in\n-namespace std:\n-<pre>\n-namespace std { }\n-using namespace std;\n-</pre>\n-</p>\n-      <h3>Avoid to use fully qualified names (i.e. std::string)</h3>\n-\t    <p>\n-If some compilers complain about <tt>using std::string;</tt>, and if the\n-\"hack\" for gtk-- mentioned above does not work, then it might be a good idea\n-to define a macro <tt>NS_STD</tt>, which is defined to either \"\" or \"std\"\n-based on an autoconf-test. Then you should be able to use\n-<tt>NS_STD::string</tt>, which will evaluate to <tt>::string</tt> (\"string\n-in the global namespace\") on systems that do not put string in std::.\n-(This is untested)\n-</p>\n-\n-      <h3>How some open-source-projects deal with this</h3>\n-\t    <p>\n-\n-<table>\n-  <tr><td><a href = \"http://www.clanlib.org\">clanlib</a></td> <td>usual</td>\n-  </tr>\n-  <tr><td><a href = \"http://pingus.seul.org\">pingus</a></td> <td>usual</td>\n-  </tr>\n-  <tr><td><a href = \"http://www.mozilla.org\">mozilla</a></td> <td>usual</td>\n-  </tr>\n-  <tr><td><a href = \"http://www.mnemonic.org\">mnemonic</a></td> <td>none</td>\n-  </tr>\n-  <tr><td><a href = \"http://libsigc.sourceforge.net\">libsigc++</a></td>\n-      <td>conservative-impl</td>\n-  </tr>\n-</table>\n-\n-<table>\n-  <caption>Notations for categories</caption>\n-  <tr>\n-    <td>usual</td> <td>mostly fully qualified names and some\n-    using-declarations (but not in headers)</td>\n-  </tr>\n-  <tr>\n-    <td>none</td> <td>no namespace std at all</td>\n-  </tr>\n-  <tr>\n-    <td>conservative-impl</td> <td>wrap all namespace-handling in macros to\n-\tsupport compilers without namespace-support (no libstdc++ used in\n-\theaders)</td>\n-  </tr>\n-</table>\n-As you can see, this currently lacks an example of a project which uses\n-libstdc++-symbols in headers in a back-portable way\n-(except for the <a href = \"#gtkmm\">Gtk-- \"hack\"</a>).\n-</p>\n-    <a name = \"nocreate\">    \n-    <h2>there is no ios::nocreate/ios::noreplace in ISO 14882</h2>\n-\t</a>\n-\t  <p>\n-I have seen <tt>ios::nocreate</tt> being used for input-streams, most\n-probably because the authors thought it would be more correct to specify\n-nocreate \"explicitly\".  So you can simply leave it out for\n-input-streams.\n-</p>\n-<p>\n-For output streams, \"nocreate\" is probably the default, unless you specify\n-<tt>std::ios::trunc</tt> ? To be safe, you can open the file for\n-reading, check if it has been opened, and then decide whether you want to\n-create/replace or not. To my knowledge, even older implementations support\n-<tt>app</tt>, <tt>ate</tt> and <tt>trunc</tt> (except for <tt>app</tt> ?).\n-</p>\n-    <a name = \"attach\">    \n-\t<h2><tt>stream::attach(int fd)</tt> is not in the standard any more</h2>\n-\t</a>\n-\t  <p>\n-With libstdc++-v3, you can use\n-<pre>\n-basic_filebuf(int __fd, const char*__name, ios_base::openmode __mode)\n-</pre>\n-For a portable solution (if there is one), you need to implement\n-a subclass of <tt>streambuf</tt> which opens a file given a descriptor,\n-and then pass an instance of this to the stream-constructor (from the\n-Josuttis-book).\n-</p>\n-\t<a name = \"headers\">\n-\t<h2>The new headers</h2>\n-\t</a>\n-\t  <p>\n-The new headers can be seen in this\n-<a href = \"../../testsuite/17_intro/headers.cc\">source file</a>.\n-</p>\n-      <p>\n-I think it is a problem for libstdc++-v3 to add links or wrappers for the\n-old headers, because the implementation has changed, and the\n-header-name-changes indicate this. It might be preferable to use the new\n-headers and tell users of old compilers that they should create links\n-(which is what they will have to do sometime anyway).\n-</p>\n-\n-      <a name = \"cheaders\">\n-      <h3>New headers replacing C-headers</h3>\n-\t  </a>\n-\t    <p>\n-You should not use the C-headers (except for system-level headers) from C++\n-programs. Instead, you should use a set of headers that are named by\n-prepending 'c' and, as usual, ommiting the extension (.h). For example,\n-instead of using <tt>&lt;math.h&gt;</tt>, you should use\n-<tt>&lt;cmath&gt;</tt>. The standard specifies that if you include the\n-C-style header (<tt>&lt;math.h&gt;</tt> in this case), the symbols will be\n-available both in the global namespace and in namespace <tt>std::</tt>\n-(libstdc++-v3, version 2.90.8 currently puts them in <tt>std::</tt> only)\n-On the other hand, if you include only the new header\n-(i.e. <tt>&lt;cmath&gt;</tt>), the symbols will only be defined in\n-namespace <tt>std::</tt> (and macros will be converted to\n-inline-functions).\n-</p>\n+  <body bgcolor=\"white\" text=\"black\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\">\n+    <div class=\"article\" id=\"libstdporting\">\n+      <div class=\"titlepage\">\n+        <h1 class=\"title\">\n+          <a name=\"libstdporting\">Libstdc++-porting-howto</a>\n+        </h1>\n+        <h3 class=\"author\">Felix Natter</h3>\n         <p>\n-For more information on this, and for information on how the GNU C++\n-implementation reuses (\"shadows\") the C library-functions, have\n-a look at <a href = \"http://www.cantrip.org/cheaders.html\">www.cantrip.org</a>.\n-</p>\n-\t  \n-      <h3><tt>&lt;fstream&gt;</tt> does not define <tt>std::cout</tt>,\n-      <tt>std::cin</tt> etc.</h3>\n+\t\tThis document can be distributed under the FDL\n+\t\t(<a href=\"http://www.gnu.org\">www.gnu.org</a>)\n+\t  </p>\n+        <p class=\"pubdate\">what kind of a date ? I don't drink !</p>\n+        <div class=\"revhistory\">\n+          <table width=\"100%\" border=\"1\">\n+            <tr>\n+              <th colspan=\"3\" valign=\"top\" align=\"left\"><b>Revision History</b></th>\n+            </tr>\n+            <tr>\n+              <td align=\"left\">Revision 0.5</td><td align=\"left\">Thu Jun  1 13:06:50 2000</td><td align=\"left\">fnatter</td>\n+            </tr>\n+            <tr>\n+              <td colspan=\"3\" align=\"left\">First docbook-version.</td>\n+            </tr>\n+            <tr>\n+              <td align=\"left\">Revision 0.8</td><td align=\"left\">Sun Jul 30 20:28:40 2000</td><td align=\"left\">fnatter</td>\n+            </tr>\n+            <tr>\n+              <td colspan=\"3\" align=\"left\">First released version using docbook-xml\n+\t\t  + second upload to libstdc++-page.\n+\t\t</td>\n+            </tr>\n+          </table>\n+        </div>\n+        <div class=\"abstract\">\n+          <p>\n+            <a name=\"N2672\"></a><b>Abstract</b>\n+          </p>\n+          <p>\n+\t\tSome notes on porting applications from libstdc++-2.90 (or earlier\n+\t\tversions) to libstdc++-v3. Not speaking in terms of the GNU libstdc++\n+\t\timplementations, this means porting from earlier versions of the\n+\t\tC++-Standard to ISO 14882.\n+\t  </p>\n+        </div>\n+        <hr>\n+      </div>\n+      <div class=\"toc\">\n         <p>\n-In previous versions of the standard, <tt>&lt;fstream.h&gt;</tt>,\n-<tt>&lt;ostream.h&gt;</tt> and <tt>&lt;istream.h&gt;</tt> used to define\n-<tt>cout</tt>, <tt>cin</tt> and so on. Because of the templatized iostreams\n-in libstdc++-v3, you need to include <tt>&lt;iostream&gt;</tt> explicitly\n-to define these.\n-</p>\n-\n-    <a name = \"iterators\">\n-\t<h2>Iterators</h2>\n-\t</a>\n-      <p>\n-The following are not proper uses of iterators, but may be working fixes\n-for existing uses of iterators.\n-  <ul>\n-    <li>you cannot do <tt>ostream::operator<<(iterator)</tt> to print the\n-    address of the iterator => use <tt><< &*iterator</tt> instead ?\n-    <li>you cannot clear an iterator's reference (<tt>iterator = 0</tt>)\n-\t=> use <tt>iterator = iterator_type();</tt> ?\n-\t<li><tt>if (iterator)</tt> won't work any more\n-\t=> use <tt>if (iterator != iterator_type())</tt> ?\n-  </ul>\n-</p>\n-\n-    <a name = \"macros\">\n-\t<h2>Libc-macros (i.e. <tt>isspace</tt> from <tt>&lt;cctype&gt;</tt>)</h2>\n-\t</a>\n-\t  <p>\n-Glibc 2.0.x and 2.1.x define the <tt>&lt;ctype.h&gt;</tt>-functionality\n-as macros (isspace, isalpha etc.). Libstdc++-v3 \"shadows\" these macros\n-as described in the <a href = \"#cheaders\">section on C-headers</a>.\n-</p>\n+          <b>Table of Contents</b>\n+        </p>\n+        <dl>\n+          <dt>1. <a href=\"#sec-nsstd\">Namespace std::</a>\n+          </dt>\n+          <dd>\n+            <dl>\n+              <dt>1.1.1. <a href=\"#sec-gtkmm-hack\">Using <i>namespace\n+\t\tcomposition</i> if the project uses a separate\n+\t\tnamespace</a>\n+              </dt>\n+              <dt>1.1.2. <a href=\"#sec-emptyns\">Defining an empty namespace std</a>\n+              </dt>\n+              <dt>1.1.3. <a href=\"#sec-avoidfqn\">Avoid to use fully qualified names\n+\t  (i.e. std::string)</a>\n+              </dt>\n+              <dt>1.1.4. <a href=\"#sec-osprojects\">How some open-source-projects deal\n+\t  with this</a>\n+              </dt>\n+            </dl>\n+          </dd>\n+          <dt>2. <a href=\"#sec-nocreate\">there is no ios::nocreate/ios::noreplace\n+\t  in ISO 14882</a>\n+          </dt>\n+          <dt>3. <a href=\"#sec-stream::attach\"><b>stream::attach(int\n+\t  fd)</b> is not in the standard any more</a>\n+          </dt>\n+          <dt>4. <a href=\"#sec-headers\">The new headers</a>\n+          </dt>\n+          <dd>\n+            <dl>\n+              <dt>4.4.1. <a href=\"#sec-cheaders\">New headers replacing C-headers</a>\n+              </dt>\n+              <dt>4.4.2. <a href=\"#sec-fstream-header\">\n+\t\t<tt>&lt;fstream&gt;</tt> does\n+\t\tnot define <b>std::cout</b>,\n+\t\t<b>std::cin</b> etc.</a>\n+              </dt>\n+            </dl>\n+          </dd>\n+          <dt>5. <a href=\"#sec-iterators\">Iterators</a>\n+          </dt>\n+          <dt>6. <a href=\"#sec-macros\">\n+\t  Libc-macros (i.e. <b>isspace</b> from\n+\t  <tt>&lt;cctype&gt;</tt>)</a>\n+          </dt>\n+          <dt>7. <a href=\"#sec-about\">About...</a>\n+          </dt>\n+        </dl>\n+      </div>\n       <p>\n-Older implementations of libstdc++ (g++-2 for egcs 1.x and g++-3 for\n-gcc 2.95.2), however, keep these functions as macros, and so it is not\n-back-portable to use fully qualified names. For example:\n-<pre>\n-#include &lt;cctype&gt;\n-int main() { std::isspace('X'); }\n-</pre>\n-will result in something like this (unless using g++-v3):\n-<pre>\n-std:: (__ctype_b[(int) ( ( 'X' ) )] & (unsigned short int)   _ISspace )  ;\n-</pre>\n-Another problem arises if you put a <tt>using namespace std;</tt>\n-declaration at the top, and include <tt>&lt;ctype.h&gt;</tt>. This will\n-result in ambiguities between the definitions in the global namespace\n-(<tt>&lt;ctype.h&gt;</tt>) and the definitions in namespace <tt>std::</tt>\n-(<tt>&lt;cctype&gt;</tt>).\n-</p>\n-      <p>\n-One solution I can think of is to test for -v3 using autoconf-macros, and\n-define macros for each of the C-functions (maybe that is possible with one\n-\"wrapper\" macro as well ?).\n-</p>\n-      <p>\n-Another solution which would fix g++ is to tell the user to modify\n-a header-file so that g++-2 (egcs 1.x) and g++-3 (gcc 2.95.2)\n-enable a macro which tells &lt;ctype.h&gt; to define functions instead of\n-macros:\n-<pre>\n-// This keeps isanum, et al from being propagated as macros.\n-#if __linux__\n-#define __NO_CTYPE 1\n-#endif\n-\n-[ now include &lt;ctype.h&gt; ]\n-</pre>\n-</p>\n+\tIn the following, when I say portable, I will refer to \"portable among ISO\n+\t14882-implementations\". On the other hand, if I say \"backportable\" or\n+\t\"conservative\", I am talking about \"compiles with older\n+\tlibstdc++-implementations\".\n+  </p>\n+      <div class=\"section\" id=\"sec-nsstd\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-nsstd\"><b>1. Namespace std::</b></a>\n+        </h2>\n+        <p>\n+\t  The latest C++-standard (ISO-14882) requires that the standard\n+\t  C++-library is defined in namespace std::. Thus, in order to use\n+\t  classes from the standard C++-library, you can do one of three\n+\t  things:\n+\t  <div class=\"itemizedlist\">\n+            <ul>\n+              <li>\n+                <a name=\"N2696\"></a>\n+                <p>wrap your code in <b>namespace std {\n+\t\t\t  ... }</b> =&gt; This is not an option because only symbols\n+\t\t\tfrom the standard c++-library are defined in namespace std::.\n+\t\t  </p>\n+              </li>\n+              <li>\n+                <a name=\"N2705\"></a>\n+                <p>put a kind of\n+\t\t\t<i>using-declaration</i> in your source (either\n+\t\t\t<b>using namespace std;</b> or i.e. <b>using\n+\t\t\t  std::string;</b>) =&gt; works well for source-files, but\n+\t\t\tcannot be used in header-files.\n+\t\t  </p>\n+              </li>\n+              <li>\n+                <a name=\"N2720\"></a>\n+                <p>use a <i>fully qualified name</i> for\n+\t\t\teach libstdc++-symbol (i.e. <b>std::string</b>,\n+\t\t\t<b>std::cout</b>) =&gt; can always be used\n+\t\t  </p>\n+              </li>\n+            </ul>\n+          </div>\n+\t</p>\n+        <p>\n+\t  Because there are many compilers which still use an implementation\n+\t  that does not have the standard C++-library in namespace\n+\t  <b>std::</b>, some care is required to support these as\n+\t  well.\n+\t</p>\n+        <p>\n+\t  Namespace back-portability-issues are generally not a problem with\n+\t  g++, because versions of g++ that do not have libstdc++ in\n+\t  <b>std::</b> use <b>-fno-honor-std</b>\n+\t  (ignore <b>std::</b>, <b>:: = std::</b>) by\n+\t  default. That is, the responsibility for enabling or disabling\n+\t  <b>std::</b> is on the user; the maintainer does not have\n+\t  to care about it. This probably applies to some other compilers as\n+\t  well.\n+\t</p>\n+        <p>\n+\t  The following sections list some possible solutions to support compilers\n+\t  that cannot ignore std::.\n+\t</p>\n+        <div class=\"section\" id=\"sec-gtkmm-hack\">\n+          <h3 class=\"title\">\n+            <a name=\"sec-gtkmm-hack\"><b>1.1.1. Using <i>namespace\n+\t\tcomposition</i> if the project uses a separate\n+\t\tnamespace</b></a>\n+          </h3>\n+          <p>\n+\t\t<a href=\"http://gtkmm.sourceforge.net\">Gtk--</a> defines\n+\t\tmost of its classes in namespace Gtk::. Thus, it was possible to\n+\t\tadapt Gtk-- to namespace std:: by using a C++-feature called\n+\t\t<i>namespace composition</i>. This is what happens if\n+\t\tyou put a <i>using</i>-declaration into a\n+\t\tnamespace-definition: the imported symbol(s) gets imported into the\n+\t\tcurrently active namespace(s). For example:\n+\t\t<pre class=\"programlisting\">\n+\t\t  namespace Gtk {\n+\t\t  using std::string;\n+\t\t  class Window { ... }\n+\t\t  }\n+\t\t</pre>\n+\t\tIn this example, <b>std::string</b> gets imported into\n+\t\tnamespace Gtk::.  The result is that you don't have to use\n+\t\t<b>std::string</b> in this header, but still\n+\t\t<b>std::string</b> does not get imported into\n+\t\tuser-space (the global namespace ::) unless the user does\n+\t\t<b>using namespace Gtk;</b> (which is not recommended\n+\t\tpractice for Gtk--, so it is not a problem).  Additionally, the\n+\t\t<b>using</b>-declarations are wrapped in macros that\n+\t\tare set based on autoconf-tests to either \"\" or i.e. <b>using\n+\t\t  std::string;</b> (depending on whether the system has\n+\t\tlibstdc++ in <b>std::</b> or not).  (ideas from\n+\t\t<tt>&lt;<a href=\"mailto:llewelly@dbritsch.dsl.xmission.com\">llewelly@dbritsch.dsl.xmission.com</a>&gt;</tt>, Karl Nelson\n+\t\t<tt>&lt;<a href=\"mailto:kenelson@ece.ucdavis.edu\">kenelson@ece.ucdavis.edu</a>&gt;</tt>)\n+\t  </p>\n+        </div>\n+        <div class=\"section\" id=\"sec-emptyns\">\n+          <h3 class=\"title\">\n+            <a name=\"sec-emptyns\"><b>1.1.2. Defining an empty namespace std</b></a>\n+          </h3>\n+          <p>\n+\t\tBy defining an (empty) namespace <b>std::</b> before\n+\t\tusing it, you avoid getting errors on systems where no part of the\n+\t\tlibrary is in namespace std:\n+\t\t<pre class=\"programlisting\">\n+\t\t  namespace std { }\n+\t\t  using namespace std;\n+\t\t</pre>\n+\t  </p>\n+        </div>\n+        <div class=\"section\" id=\"sec-avoidfqn\">\n+          <h3 class=\"title\">\n+            <a name=\"sec-avoidfqn\"><b>1.1.3. Avoid to use fully qualified names\n+\t  (i.e. std::string)</b></a>\n+          </h3>\n+          <p>\n+\t\tIf some compilers complain about <b>using\n+\t\t  std::string;</b>, and if the \"hack\" for gtk-- mentioned above\n+\t\tdoes not work, then it might be a good idea to define a macro\n+\t\tNS_STD, which is defined to either \"\" or \"std\"\n+\t\tbased on an autoconf-test. Then you should be able to use\n+\t\t<b>NS_STD::string</b>, which will evaluate to\n+\t\t<b>::string</b> (\"string in the global namespace\") on\n+\t\tsystems that do not put string in std::.  (This is untested)\n+\t  </p>\n+        </div>\n+        <div class=\"section\" id=\"sec-osprojects\">\n+          <h3 class=\"title\">\n+            <a name=\"sec-osprojects\"><b>1.1.4. How some open-source-projects deal\n+\t  with this</b></a>\n+          </h3>\n+          <p>\n+\t\tThis information was gathered around May 2000. It may not be correct\n+\t\tby the time you read this.\n+\t  </p>\n+          <div class=\"table\">\n+            <p>\n+              <a name=\"N2885\"></a><b>Table 1. Namespace std:: in Open-Source programs</b>\n+            </p>\n+            <table border=\"1\">\n+              <colgroup>\n+                <col>\n+                <col>\n+              </colgroup>\n+              <tbody>\n+                <tr>\n+                  <td><a href=\"http://www.clanlib.org\">clanlib</a></td><td>usual</td>\n+                </tr>\n+                <tr>\n+                  <td><a href=\"http://pingus.seul.org\">pingus</a></td><td>usual</td>\n+                </tr>\n+                <tr>\n+                  <td><a href=\"http://www.mozilla.org\">mozilla</a></td><td>usual</td>\n+                </tr>\n+                <tr>\n+                  <td><a href=\"http://www.mnemonic.org\">mnemonic</a></td><td>none</td>\n+                </tr>\n+                <tr>\n+                  <td><a href=\"http://libsigc.sourceforge.net\">\n+\t\t\t\t  libsigc++</a></td><td>conservative-impl</td>\n+                </tr>\n+              </tbody>\n+            </table>\n+          </div>\n+          <div class=\"table\">\n+            <p>\n+              <a name=\"N2962\"></a><b>Table 2. Notations for categories</b>\n+            </p>\n+            <table border=\"1\">\n+              <colgroup>\n+                <col>\n+                <col>\n+              </colgroup>\n+              <tbody>\n+                <tr>\n+                  <td>usual</td><td>mostly fully qualified names and some\n+\t\t\t\tusing-declarations (but not in headers)</td>\n+                </tr>\n+                <tr>\n+                  <td>none</td><td>no namespace std at all</td>\n+                </tr>\n+                <tr>\n+                  <td>conservative-impl</td><td>wrap all\n+\t\t\t\tnamespace-handling in macros to support compilers without\n+\t\t\t\tnamespace-support (no libstdc++ used in headers)</td>\n+                </tr>\n+              </tbody>\n+            </table>\n+          </div>\n+          <p>\n+\t\tAs you can see, this currently lacks an example of a project which\n+\t\tuses libstdc++-symbols in headers in a back-portable way (except\n+\t\tfor Gtk--: see the <a href=\"#sec-gtkmm-hack\">section on the Gtk-- hack\n+\t</a>).\n+\t  </p>\n+        </div>\n+      </div>\n+      <div class=\"section\" id=\"sec-nocreate\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-nocreate\"><b>2. there is no ios::nocreate/ios::noreplace\n+\t  in ISO 14882</b></a>\n+        </h2>\n+        <p>\n+\t  I have seen <b>ios::nocreate</b> being used for input-streams,\n+\t  most probably because the authors thought it would be more correct\n+\t  to specify nocreate \"explicitly\".  So you can simply leave it out\n+\t  for input-streams.\n+\t</p>\n+        <p>\n+\t  For output streams, \"nocreate\" is probably the default, unless you\n+\t  specify <b>std::ios::trunc</b> ? To be safe, you can open\n+\t  the file for reading, check if it has been opened, and then decide\n+\t  whether you want to create/replace or not. To my knowledge, even\n+\t  older implementations support <b>app</b>,\n+\t  <b>ate</b> and <b>trunc</b> (except for\n+\t  <b>app</b> ?).\n+\t</p>\n+      </div>\n+      <div class=\"section\" id=\"sec-stream::attach\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-stream::attach\"><b>3. <b>stream::attach(int\n+\t  fd)</b> is not in the standard any more</b></a>\n+        </h2>\n+        <p>\n+\t  When using libstdc++-v3, you can use\n+\t  <div id=\"N3066\" class=\"funcsynopsis\">\n+            <p>\n+            </p>\n+            <a name=\"N3066\"></a>\n+            <pre class=\"funcsynopsisinfo\">\n+\t\t  #include &lt;fstream&gt;\n+\t\t</pre>\n+            <p>\n+              <code><code class=\"funcdef\">int <b class=\"fsfunc\">basic_filebuf</b></code>(<var class=\"pdparam\">__fd</var>, <var class=\"pdparam\">__name</var>, <var class=\"pdparam\">__mode</var>);<br>int <var class=\"pdparam\">__fd</var>;<br>const char* <var class=\"pdparam\">__name</var>;<br>ios_base::openmode <var class=\"pdparam\">__mode</var>;</code>\n+            </p>\n+            <p>\n+            </p>\n+          </div>\n+\t  For a portable solution (if there is one), you need to implement a\n+\t  subclass of <b>streambuf</b> which opens a file given a\n+\t  descriptor, and then pass an instance of this to the\n+\t  stream-constructor (from the Josuttis-book).\n+\t</p>\n+      </div>\n+      <div class=\"section\" id=\"sec-headers\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-headers\"><b>4. The new headers</b></a>\n+        </h2>\n+        <p>\n+\t  All new headers can be seen in this <a href=\"../../testsuite/17_intro/headers.cc\">source-code</a>.\n+\t</p>\n+        <p>\n+\t  I think it is a problem for libstdc++-v3 to add links or wrappers\n+\t  for the old headers, because the implementation has changed, and\n+\t  the header name-changes indicate this. It might be preferable to\n+\t  use the new headers and tell users of old compilers that they\n+\t  should create links (which is what they will have to do sometime\n+\t  anyway).\n+\t</p>\n+        <div class=\"section\" id=\"sec-cheaders\">\n+          <h3 class=\"title\">\n+            <a name=\"sec-cheaders\"><b>4.4.1. New headers replacing C-headers</b></a>\n+          </h3>\n+          <p>\n+\t\tYou should not use the C-headers (except for system-level headers)\n+\t\tfrom C++ programs. Instead, you should use a set of headers that\n+\t\tare named by prepending 'c' and, as usual, ommiting the extension\n+\t\t(.h). For example, instead of using <tt>&lt;math.h&gt;</tt>, you should use <tt>&lt;cmath&gt;</tt>. The standard\n+\t\tspecifies that if you include the C-style header (<tt>&lt;math.h&gt;</tt> in this case), the symbols\n+\t\twill be available both in the global namespace and in namespace\n+\t\t<b>std::</b> (libstdc++-v3, version 2.90.8 currently\n+\t\tputs them in <b>std::</b> only) On the other hand, if\n+\t\tyou include only the new header (i.e. <tt>&lt;pcmath&gt;</tt>), the symbols will only be\n+\t\tdefined in namespace <b>std::</b> (and macros will be\n+\t\tconverted to inline-functions).\n+\t  </p>\n+          <p>\n+\t\tFor more information on this, and for information on how the GNU\n+\t\tC++ implementation reuses (\"shadows\") the C library-functions, have\n+\t\ta look at <a href=\"http://www.cantrip.org/cheaders.html\">\n+\t\t  www.cantrip.org</a>.\n+\t  </p>\n+        </div>\n+        <div class=\"section\" id=\"sec-fstream-header\">\n+          <h3 class=\"title\">\n+            <a name=\"sec-fstream-header\"><b>4.4.2. \n+\t\t<tt>&lt;fstream&gt;</tt> does\n+\t\tnot define <b>std::cout</b>,\n+\t\t<b>std::cin</b> etc.</b></a>\n+          </h3>\n+          <p>\n+\t\tIn previous versions of the standard, <tt>&lt;fstream.h&gt;</tt>, <tt>&lt;ostream.h&gt;</tt> and <tt>&lt;istream.h&gt;</tt> used to define\n+\t\t<b>cout</b>, <b>cin</b> and so on. Because\n+\t\tof the templatized iostreams in libstdc++-v3, you need to include\n+\t\t<tt>&lt;iostream&gt;</tt>\n+\t\texplicitly to define these.\n+\t  </p>\n+        </div>\n+      </div>\n+      <div class=\"section\" id=\"sec-iterators\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-iterators\"><b>5. Iterators</b></a>\n+        </h2>\n+        <p>\n+\t  The following are not proper uses of iterators, but may be working\n+\t  fixes for existing uses of iterators.\n+\t  <div class=\"itemizedlist\">\n+            <ul>\n+              <li>\n+                <a name=\"N3266\"></a>\n+                <p>you cannot do\n+\t\t\t<b>ostream::operator&lt;&lt;(iterator)</b> to\n+\t\t\tprint the address of the iterator =&gt; use\n+\t\t\t<b>operator&lt;&lt; &amp;*iterator</b> instead ?\n+\t\t  </p>\n+              </li>\n+              <li>\n+                <a name=\"N3287\"></a>\n+                <p>you cannot clear an iterator's reference\n+\t\t\t(<b>iterator = 0</b>) =&gt; use\n+\t\t\t<b>iterator = iterator_type();</b> ?\n+\t\t  </p>\n+              </li>\n+              <li>\n+                <a name=\"N3300\"></a>\n+                <p>\n+                  <b>if (iterator)</b> won't work any\n+\t\t\tmore =&gt; use <b>if (iterator != iterator_type())</b>\n+\t\t\t?</p>\n+              </li>\n+            </ul>\n+          </div>\n+\t</p>\n+      </div>\n+      <div class=\"section\" id=\"sec-macros\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-macros\"><b>6. \n+\t  Libc-macros (i.e. <b>isspace</b> from\n+\t  <tt>&lt;cctype&gt;</tt>)</b></a>\n+        </h2>\n+        <p>\n+\t  Glibc 2.0.x and 2.1.x define the <tt>&lt;ctype.h&gt;</tt> -functionality as\n+\t  macros (isspace, isalpha etc.). Libstdc++-v3 \"shadows\" these macros\n+\t  as described in the <a href=\"#sec-cheaders\">section on C-headers</a>.\n+\t</p>\n+        <p>\n+\t  Older implementations of libstdc++ (g++-2 for egcs 1.x and g++-3\n+\t  for gcc 2.95.2), however, keep these functions as macros, and so it\n+\t  is not back-portable to use fully qualified names. For example:\n+\t  <pre class=\"programlisting\">\n+\t\t#include &lt;cctype&gt;\n+\t\tint main() { std::isspace('X'); }\n+\t  </pre>\n+\t  will result in something like this (unless using g++-v3):\n+\t  <pre class=\"programlisting\">\n+\t\tstd:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int)\n+\t\t_ISspace )  ;\n+\t  </pre>\n+\t  </p>\n+        <p>\n+\t  One solution I can think of is to test for -v3 using\n+\t  autoconf-macros, and define macros for each of the C-functions\n+\t  (maybe that is possible with one \"wrapper\" macro as well ?).\n+\t</p>\n+        <p>\n+\t  Another solution which would fix g++ is to tell the user to modify a\n+\t  header-file so that g++-2 (egcs 1.x) and g++-3 (gcc 2.95.2) define a\n+\t  macro which tells <tt>&lt;ctype.h&gt;</tt> to define functions\n+\t  instead of macros:\n+\t  <pre class=\"programlisting\">\n+\t\t// This keeps isalnum, et al from being propagated as macros.\n+\t\t#if __linux__\n+\t\t#define __NO_CTYPE 1\n+\t\t#endif\n \n-    <a name = \"about\">\n-\t<h2>About...</h2>\n-\t</a>\n-      <p>\n-Please send any experience, additions, corrections or questions to <a href\n-= \"mailto:fnatter@gmx.net\">fnatter@gmx.net</a> or for discussion to the\n-libstdc++-v3-mailing-list.\n-</p>\n-\t\n+\t\t[ now include &lt;ctype.h&gt; ]\n+\t  </pre>\n+\t</p>\n+        <p>\n+\t  Another problem arises if you put a <b>using namespace\n+\t\tstd;</b> declaration at the top, and include <tt>&lt;ctype.h&gt;</tt>. This will result in\n+\t\tambiguities between the definitions in the global namespace\n+\t\t(<tt>&lt;ctype.h&gt;</tt>) and the\n+\t\tdefinitions in namespace <b>std::</b>\n+\t\t(<b>&lt;cctype&gt;</b>).\n+\t</p>\n+        <p>\n+\t  The solution to this problem was posted to the libstdc++-v3\n+\t  mailing-list:\n+\t  Benjamin Kosnik <tt>&lt;<a href=\"mailto:bkoz@redhat.com\">bkoz@redhat.com</a>&gt;</tt> writes:\n+\t  \"\n+\t\t--enable-cshadow-headers is currently broken. As a result, shadow\n+\t\theaders are not being searched....\n+\t  \"\n+\t</p>\n+      </div>\n+      <div class=\"section\" id=\"sec-about\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-about\"><b>7. About...</b></a>\n+        </h2>\n+        <p>\n+\t  Please send any experience, additions, corrections or questions to\n+\t  <a href=\"mailto:fnatter@gmx.net\">fnatter@gmx.net</a> or for\n+\t  discussion to the libstdc++-v3-mailing-list.\n+\t</p>\n+      </div>\n+    </div>\n   </body>\n-\n </html>"}]}