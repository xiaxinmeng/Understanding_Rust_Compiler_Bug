{"sha": "a25a8f3be322fe0f838947b679f73d6efc2a412c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1YThmM2JlMzIyZmUwZjgzODk0N2I2NzlmNzNkNmVmYzJhNDEyYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-02-27T08:51:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-02-27T08:51:22Z"}, "message": "c-ppoutput.c (scan_translation_unit): Handle CPP_PRAGMA and CPP_PRAGMA_EOL.\n\n\t* c-ppoutput.c (scan_translation_unit): Handle CPP_PRAGMA\n\tand CPP_PRAGMA_EOL.\n\t* c-pragma.c (pragma_ns_name): New typedef.\n\t(registered_pp_pragmas): New variable.\n\t(c_pp_lookup_pragma): New function.\n\t(c_register_pragma_1): If flag_preprocess_only, do nothing\n\tfor non-expanded pragmas, for expanded ones push pragma's\n\tnamespace and name into registered_pp_pragmas vector.\n\t(c_invoke_pragma_handler): Register OpenMP pragmas even when\n\tflag_preprocess_only, don't register GCC pch_preprocess\n\tpragma if flag_preprocess_only.\n\t* c-opts.c (c_common_init): Call init_pragma even if\n\tflag_preprocess_only.\n\t* c-pragma.c (c_pp_lookup_pragma): New prototype.\n\t* config/darwin.h (DARWIN_REGISTER_TARGET_PRAGMAS): Don't call\n\tcpp_register_pragma if flag_preprocess_only.\n\n\t* gcc.dg/gomp/preprocess-1.c: New test.\n\nFrom-SVN: r132703", "tree": {"sha": "8f08c19e97ef9a3849f6682bc5e7ccb5dbe60947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f08c19e97ef9a3849f6682bc5e7ccb5dbe60947"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a25a8f3be322fe0f838947b679f73d6efc2a412c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25a8f3be322fe0f838947b679f73d6efc2a412c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25a8f3be322fe0f838947b679f73d6efc2a412c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25a8f3be322fe0f838947b679f73d6efc2a412c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cc028fa796f06b548b472d5ceeef2c1b9b3001c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc028fa796f06b548b472d5ceeef2c1b9b3001c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cc028fa796f06b548b472d5ceeef2c1b9b3001c"}], "stats": {"total": 187, "additions": 151, "deletions": 36}, "files": [{"sha": "a9720018fae50c9e0e8483b6315fd836e7090ca4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a25a8f3be322fe0f838947b679f73d6efc2a412c", "patch": "@@ -1,3 +1,22 @@\n+2008-02-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-ppoutput.c (scan_translation_unit): Handle CPP_PRAGMA\n+\tand CPP_PRAGMA_EOL.\n+\t* c-pragma.c (pragma_ns_name): New typedef.\n+\t(registered_pp_pragmas): New variable.\n+\t(c_pp_lookup_pragma): New function.\n+\t(c_register_pragma_1): If flag_preprocess_only, do nothing\n+\tfor non-expanded pragmas, for expanded ones push pragma's\n+\tnamespace and name into registered_pp_pragmas vector.\n+\t(c_invoke_pragma_handler): Register OpenMP pragmas even when\n+\tflag_preprocess_only, don't register GCC pch_preprocess\n+\tpragma if flag_preprocess_only.\n+\t* c-opts.c (c_common_init): Call init_pragma even if\n+\tflag_preprocess_only.\n+\t* c-pragma.c (c_pp_lookup_pragma): New prototype.\n+\t* config/darwin.h (DARWIN_REGISTER_TARGET_PRAGMAS): Don't call\n+\tcpp_register_pragma if flag_preprocess_only.\n+\n 2008-02-26  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR c/28800"}, {"sha": "d7409adcccc31905bcdf2b4dc49609b8f647a60f", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=a25a8f3be322fe0f838947b679f73d6efc2a412c", "patch": "@@ -1,5 +1,5 @@\n /* C/ObjC/C++ command line option handling.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Neil Booth.\n \n@@ -1239,16 +1239,16 @@ c_common_init (void)\n   if (version_flag)\n     c_common_print_pch_checksum (stderr);\n \n+  /* Has to wait until now so that cpplib has its hash table.  */\n+  init_pragma ();\n+\n   if (flag_preprocess_only)\n     {\n       finish_options ();\n       preprocess_file (parse_in);\n       return false;\n     }\n \n-  /* Has to wait until now so that cpplib has its hash table.  */\n-  init_pragma ();\n-\n   return true;\n }\n "}, {"sha": "6a251fe995cc08c80f1a11ed50d7528be84d6225", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=a25a8f3be322fe0f838947b679f73d6efc2a412c", "patch": "@@ -1,6 +1,6 @@\n /* Preprocess only, using cpplib.\n-   Copyright (C) 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007,\n+   2008 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994-95.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -177,7 +177,24 @@ scan_translation_unit (cpp_reader *pfile)\n       avoid_paste = false;\n       print.source = NULL;\n       print.prev = token;\n-      cpp_output_token (token, print.outf);\n+      if (token->type == CPP_PRAGMA)\n+\t{\n+\t  const char *space;\n+\t  const char *name;\n+\n+\t  maybe_print_line (token->src_loc);\n+\t  fputs (\"#pragma \", print.outf);\n+\t  c_pp_lookup_pragma (token->val.pragma, &space, &name);\n+\t  if (space)\n+\t    fprintf (print.outf, \"%s %s\", space, name);\n+\t  else\n+\t    fprintf (print.outf, \"%s\", name);\n+\t  print.printed = 1;\n+\t}\n+      else if (token->type == CPP_PRAGMA_EOL)\n+\tmaybe_print_line (token->src_loc);\n+      else\n+\tcpp_output_token (token, print.outf);\n \n       if (token->type == CPP_COMMENT)\n \taccount_for_newlines (token->val.str.text, token->val.str.len);"}, {"sha": "44e95b81c0a0c92f9e17d31a367d1362e4353820", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 82, "deletions": 26, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=a25a8f3be322fe0f838947b679f73d6efc2a412c", "patch": "@@ -1,6 +1,6 @@\n /* Handle #pragma, system V.4 style.  Supports #pragma weak and #pragma pack.\n    Copyright (C) 1992, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007 Free Software Foundation, Inc.\n+   2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -872,6 +872,61 @@ DEF_VEC_ALLOC_O (pragma_handler, heap);\n \n static VEC(pragma_handler, heap) *registered_pragmas;\n \n+typedef struct\n+{\n+  const char *space;\n+  const char *name;\n+} pragma_ns_name;\n+\n+DEF_VEC_O (pragma_ns_name);\n+DEF_VEC_ALLOC_O (pragma_ns_name, heap);\n+\n+static VEC(pragma_ns_name, heap) *registered_pp_pragmas;\n+\n+struct omp_pragma_def { const char *name; unsigned int id; };\n+static const struct omp_pragma_def omp_pragmas[] = {\n+  { \"atomic\", PRAGMA_OMP_ATOMIC },\n+  { \"barrier\", PRAGMA_OMP_BARRIER },\n+  { \"critical\", PRAGMA_OMP_CRITICAL },\n+  { \"flush\", PRAGMA_OMP_FLUSH },\n+  { \"for\", PRAGMA_OMP_FOR },\n+  { \"master\", PRAGMA_OMP_MASTER },\n+  { \"ordered\", PRAGMA_OMP_ORDERED },\n+  { \"parallel\", PRAGMA_OMP_PARALLEL },\n+  { \"section\", PRAGMA_OMP_SECTION },\n+  { \"sections\", PRAGMA_OMP_SECTIONS },\n+  { \"single\", PRAGMA_OMP_SINGLE },\n+  { \"threadprivate\", PRAGMA_OMP_THREADPRIVATE }\n+};\n+\n+void\n+c_pp_lookup_pragma (unsigned int id, const char **space, const char **name)\n+{\n+  const int n_omp_pragmas = sizeof (omp_pragmas) / sizeof (*omp_pragmas);\n+  int i;\n+\n+  for (i = 0; i < n_omp_pragmas; ++i)\n+    if (omp_pragmas[i].id == id)\n+      {\n+\t*space = \"omp\";\n+\t*name = omp_pragmas[i].name;\n+\treturn;\n+      }\n+\n+  if (id >= PRAGMA_FIRST_EXTERNAL\n+      && (id < PRAGMA_FIRST_EXTERNAL\n+\t  + VEC_length (pragma_ns_name, registered_pp_pragmas)))\n+    {\n+      *space = VEC_index (pragma_ns_name, registered_pp_pragmas,\n+\t\t\t  id - PRAGMA_FIRST_EXTERNAL)->space;\n+      *name = VEC_index (pragma_ns_name, registered_pp_pragmas,\n+\t\t\t id - PRAGMA_FIRST_EXTERNAL)->name;\n+      return;\n+    }\n+\n+  gcc_unreachable ();\n+}\n+\n /* Front-end wrappers for pragma registration to avoid dragging\n    cpplib.h in almost everywhere.  */\n \n@@ -881,13 +936,29 @@ c_register_pragma_1 (const char *space, const char *name,\n {\n   unsigned id;\n \n-  VEC_safe_push (pragma_handler, heap, registered_pragmas, &handler);\n-  id = VEC_length (pragma_handler, registered_pragmas);\n-  id += PRAGMA_FIRST_EXTERNAL - 1;\n+  if (flag_preprocess_only)\n+    {\n+      pragma_ns_name ns_name;\n \n-  /* The C++ front end allocates 6 bits in cp_token; the C front end\n-     allocates 7 bits in c_token.  At present this is sufficient.  */\n-  gcc_assert (id < 64);\n+      if (!allow_expansion)\n+\treturn;\n+\n+      ns_name.space = space;\n+      ns_name.name = name;\n+      VEC_safe_push (pragma_ns_name, heap, registered_pp_pragmas, &ns_name);\n+      id = VEC_length (pragma_ns_name, registered_pp_pragmas);\n+      id += PRAGMA_FIRST_EXTERNAL - 1;\n+    }\n+  else\n+    {\n+      VEC_safe_push (pragma_handler, heap, registered_pragmas, &handler);\n+      id = VEC_length (pragma_handler, registered_pragmas);\n+      id += PRAGMA_FIRST_EXTERNAL - 1;\n+\n+      /* The C++ front end allocates 6 bits in cp_token; the C front end\n+\t allocates 7 bits in c_token.  At present this is sufficient.  */\n+      gcc_assert (id < 64);\n+    }\n \n   cpp_register_deferred_pragma (parse_in, space, name, id,\n \t\t\t\tallow_expansion, false);\n@@ -921,24 +992,8 @@ c_invoke_pragma_handler (unsigned int id)\n void\n init_pragma (void)\n {\n-  if (flag_openmp && !flag_preprocess_only)\n+  if (flag_openmp)\n     {\n-      struct omp_pragma_def { const char *name; unsigned int id; };\n-      static const struct omp_pragma_def omp_pragmas[] = {\n-\t{ \"atomic\", PRAGMA_OMP_ATOMIC },\n-\t{ \"barrier\", PRAGMA_OMP_BARRIER },\n-\t{ \"critical\", PRAGMA_OMP_CRITICAL },\n-\t{ \"flush\", PRAGMA_OMP_FLUSH },\n-\t{ \"for\", PRAGMA_OMP_FOR },\n-\t{ \"master\", PRAGMA_OMP_MASTER },\n-\t{ \"ordered\", PRAGMA_OMP_ORDERED },\n-\t{ \"parallel\", PRAGMA_OMP_PARALLEL },\n-\t{ \"section\", PRAGMA_OMP_SECTION },\n-\t{ \"sections\", PRAGMA_OMP_SECTIONS },\n-\t{ \"single\", PRAGMA_OMP_SINGLE },\n-\t{ \"threadprivate\", PRAGMA_OMP_THREADPRIVATE }\n-      };\n-\n       const int n_omp_pragmas = sizeof (omp_pragmas) / sizeof (*omp_pragmas);\n       int i;\n \n@@ -947,8 +1002,9 @@ init_pragma (void)\n \t\t\t\t      omp_pragmas[i].id, true, true);\n     }\n \n-  cpp_register_deferred_pragma (parse_in, \"GCC\", \"pch_preprocess\",\n-\t\t\t\tPRAGMA_GCC_PCH_PREPROCESS, false, false);\n+  if (!flag_preprocess_only)\n+    cpp_register_deferred_pragma (parse_in, \"GCC\", \"pch_preprocess\",\n+\t\t\t\t  PRAGMA_GCC_PCH_PREPROCESS, false, false);\n \n #ifdef HANDLE_PRAGMA_PACK\n #ifdef HANDLE_PRAGMA_PACK_WITH_EXPANSION"}, {"sha": "747a053b2e8cb71fb58f22bbeca4e197f5b62b28", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=a25a8f3be322fe0f838947b679f73d6efc2a412c", "patch": "@@ -1,6 +1,6 @@\n /* Pragma related interfaces.\n    Copyright (C) 1995, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2007  Free Software Foundation, Inc.\n+   2007, 2008  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -124,4 +124,6 @@ extern enum cpp_ttype pragma_lex (tree *);\n extern enum cpp_ttype c_lex_with_flags (tree *, location_t *, unsigned char *,\n \t\t\t\t\tint);\n \n+extern void c_pp_lookup_pragma (unsigned int, const char **, const char **);\n+\n #endif /* GCC_C_PRAGMA_H */"}, {"sha": "c2685a893f6d762b92fd1af47e0c84d2ba162d0c", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=a25a8f3be322fe0f838947b679f73d6efc2a412c", "patch": "@@ -892,8 +892,9 @@ enum machopic_addr_class {\n \n #define DARWIN_REGISTER_TARGET_PRAGMAS()\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n-    cpp_register_pragma (parse_in, NULL, \"mark\",\t\t\\\n-\t\t\t darwin_pragma_ignore, false);\t\t\\\n+    if (!flag_preprocess_only)\t\t\t\t\t\\\n+      cpp_register_pragma (parse_in, NULL, \"mark\",\t\t\\\n+\t\t\t   darwin_pragma_ignore, false);\t\\\n     c_register_pragma (0, \"options\", darwin_pragma_options);\t\\\n     c_register_pragma (0, \"segment\", darwin_pragma_ignore);\t\\\n     c_register_pragma (0, \"unused\", darwin_pragma_unused);\t\\"}, {"sha": "bb3326a562d0ef7aaf1ecee4facc720b96ed6a46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a25a8f3be322fe0f838947b679f73d6efc2a412c", "patch": "@@ -1,3 +1,7 @@\n+2008-02-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/gomp/preprocess-1.c: New test.\n+\n 2008-02-26  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/bf-ms-attrib.c (main): Return 0."}, {"sha": "714c8404d8344d0c2d7109ffe8f069d3157a12dc", "filename": "gcc/testsuite/gcc.dg/gomp/preprocess-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpreprocess-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25a8f3be322fe0f838947b679f73d6efc2a412c/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpreprocess-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpreprocess-1.c?ref=a25a8f3be322fe0f838947b679f73d6efc2a412c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do preprocess } */\n+\n+void foo (void)\n+{\n+  int i1, j1, k1;\n+#define p parallel\n+#define P(x) private (x##1)\n+#define S(x) shared (x##1)\n+#define F(x) firstprivate (x##1)\n+#pragma omp p P(i) \\\n+  S(j) \\\n+  F(k)\n+  ;\n+}\n+\n+/* { dg-final { scan-file preprocess-1.i \"(^|\\n)#pragma omp parallel private \\\\(i1\\\\) shared \\\\(j1\\\\) firstprivate \\\\(k1\\\\)($|\\n)\" } } */"}]}