{"sha": "231f75463c25e2a27c21c19f31bfbda421e12f49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxZjc1NDYzYzI1ZTJhMjdjMjFjMTlmMzFiZmJkYTQyMWUxMmY0OQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-09-24T11:20:57Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-09-24T11:20:57Z"}, "message": "[PR 91831] Copy PARM_DECLs of artificial thunks\n\nHi,\n\nI am quite surprised I did not catch this before but the new\nipa-param-manipulation does not copy PARM_DECLs when creating\nartificial thinks (I think it originally did but then I somehow\nremoved during one cleanups).  Fixed by adding the capability at the\nnatural place.  It is triggered whenever context of the PARM_DECL that\nis just taken from the original function does not match the target\nfndecl rather than by some constructor parameter because in such\nsituation it is always the correct thing to do.\n\nBootstrapped and tested on x86_64-linux.  OK for trunk?\n\nThanks,\n\nMartin\n\n2019-09-24  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/91831\n\t* ipa-param-manipulation.c (carry_over_param): Make a method of\n\tipa_param_body_adjustments, remove now unnecessary argument.  Also copy\n\tin case of a context mismatch.\n\t(ipa_param_body_adjustments::common_initialization): Adjust call to\n\tcarry_over_param.\n\t* ipa-param-manipulation.h (class ipa_param_body_adjustments): Add\n\tprivate method carry_over_param.\n\n\ttestsuite/\n\t* g++.dg/ipa/pr91831.C: New test.\n\nFrom-SVN: r276094", "tree": {"sha": "200b65b22f3b2a15b3d24ad3c3b159e334152e4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/200b65b22f3b2a15b3d24ad3c3b159e334152e4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/231f75463c25e2a27c21c19f31bfbda421e12f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231f75463c25e2a27c21c19f31bfbda421e12f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231f75463c25e2a27c21c19f31bfbda421e12f49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231f75463c25e2a27c21c19f31bfbda421e12f49/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a4d0da4f5840b9829316e93710b4bd4269b9366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4d0da4f5840b9829316e93710b4bd4269b9366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4d0da4f5840b9829316e93710b4bd4269b9366"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "a44f4dbe44946b032d5b90ba308cd1b9f24e3681", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231f75463c25e2a27c21c19f31bfbda421e12f49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231f75463c25e2a27c21c19f31bfbda421e12f49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=231f75463c25e2a27c21c19f31bfbda421e12f49", "patch": "@@ -1,3 +1,14 @@\n+2019-09-24  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/91831\n+\t* ipa-param-manipulation.c (carry_over_param): Make a method of\n+\tipa_param_body_adjustments, remove now unnecessary argument.  Also copy\n+\tin case of a context mismatch.\n+\t(ipa_param_body_adjustments::common_initialization): Adjust call to\n+\tcarry_over_param.\n+\t* ipa-param-manipulation.h (class ipa_param_body_adjustments): Add\n+\tprivate method carry_over_param.\n+\n 2019-09-24  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/91832"}, {"sha": "913b96fefa434f0d8ac7a58de8d37a85b953974f", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231f75463c25e2a27c21c19f31bfbda421e12f49/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231f75463c25e2a27c21c19f31bfbda421e12f49/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=231f75463c25e2a27c21c19f31bfbda421e12f49", "patch": "@@ -906,18 +906,24 @@ ipa_param_body_adjustments::register_replacement (ipa_adjusted_param *apm,\n   m_replacements.safe_push (psr);\n }\n \n-/* Copy or not, as appropriate given ID, a pre-existing PARM_DECL T so that\n-   it can be included in the parameters of the modified function.  */\n+/* Copy or not, as appropriate given m_id and decl context, a pre-existing\n+   PARM_DECL T so that it can be included in the parameters of the modified\n+   function.  */\n \n-static tree\n-carry_over_param (tree t, struct copy_body_data *id)\n+tree\n+ipa_param_body_adjustments::carry_over_param (tree t)\n {\n   tree new_parm;\n-  if (id)\n+  if (m_id)\n     {\n-      new_parm = remap_decl (t, id);\n+      new_parm = remap_decl (t, m_id);\n       if (TREE_CODE (new_parm) != PARM_DECL)\n-\tnew_parm = id->copy_decl (t, id);\n+\tnew_parm = m_id->copy_decl (t, m_id);\n+    }\n+  else if (DECL_CONTEXT (t) != m_fndecl)\n+    {\n+      new_parm = copy_node (t);\n+      DECL_CONTEXT (new_parm) = m_fndecl;\n     }\n   else\n     new_parm = t;\n@@ -982,7 +988,7 @@ ipa_param_body_adjustments::common_initialization (tree old_fndecl,\n \t  || apm->prev_clone_adjustment)\n \t{\n \t  kept[prev_index] = true;\n-\t  new_parm = carry_over_param (m_oparms[prev_index], m_id);\n+\t  new_parm = carry_over_param (m_oparms[prev_index]);\n \t  m_new_decls.quick_push (new_parm);\n \t}\n       else if (apm->op == IPA_PARAM_OP_NEW"}, {"sha": "8e9554563e4e4f49f41be17bc08310bf9443c322", "filename": "gcc/ipa-param-manipulation.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231f75463c25e2a27c21c19f31bfbda421e12f49/gcc%2Fipa-param-manipulation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231f75463c25e2a27c21c19f31bfbda421e12f49/gcc%2Fipa-param-manipulation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.h?ref=231f75463c25e2a27c21c19f31bfbda421e12f49", "patch": "@@ -370,6 +370,7 @@ class ipa_param_body_adjustments\n private:\n   void common_initialization (tree old_fndecl, tree *vars,\n \t\t\t      vec<ipa_replace_map *, va_gc> *tree_map);\n+  tree carry_over_param (tree t);\n   unsigned get_base_index (ipa_adjusted_param *apm);\n   ipa_param_body_replacement *lookup_replacement_1 (tree base,\n \t\t\t\t\t\t    unsigned unit_offset);"}, {"sha": "11710ba145d4ca7c52dd840d61ac4e516339bfc5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231f75463c25e2a27c21c19f31bfbda421e12f49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231f75463c25e2a27c21c19f31bfbda421e12f49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=231f75463c25e2a27c21c19f31bfbda421e12f49", "patch": "@@ -1,3 +1,8 @@\n+2019-09-24  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/91831\n+\t* g++.dg/ipa/pr91831.C: New test.\n+\n 2019-09-24  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/91832"}, {"sha": "66e4b693151463760825ad634ee19459712bfa24", "filename": "gcc/testsuite/g++.dg/ipa/pr91831.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231f75463c25e2a27c21c19f31bfbda421e12f49/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr91831.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231f75463c25e2a27c21c19f31bfbda421e12f49/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr91831.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr91831.C?ref=231f75463c25e2a27c21c19f31bfbda421e12f49", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --param uninlined-thunk-insns=1000\"  } */\n+\n+struct A {\n+  virtual void m_fn1();\n+};\n+struct B {\n+  virtual void *m_fn2(int, int) = 0;\n+};\n+struct C : A, B {\n+  void *m_fn2(int, int) { return this; }\n+};\n+void *fn1(B &p1) { return p1.m_fn2(0, 0); }\n+\n+int main() {\n+  C c;\n+  fn1(c);\n+  return 0;\n+}"}]}