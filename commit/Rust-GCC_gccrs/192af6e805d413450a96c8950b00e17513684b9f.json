{"sha": "192af6e805d413450a96c8950b00e17513684b9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyYWY2ZTgwNWQ0MTM0NTBhOTZjODk1MGIwMGUxNzUxMzY4NGI5Zg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-02-28T14:04:57Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-02-28T14:04:57Z"}, "message": "[multiple changes]\n\n2012-02-28  Richard Earnshaw  <rearnsha@arm.com>\n\n\t* arm.c (aapcs_vfp_is_call_or_return_candidate): Only use the machine\n\tmode if there is no type information available.\n\n2012-02-28  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\t* gcc.target/arm/vfp1.c (dg_do run): Run on all eabi variants.\n\t* gcc.target/arm/vfp2.c: Likewise.\n\t* gcc.target/arm/vfp3.c: Likewise.\n\t* gcc.target/arm/vfp4.c: Likewise.\n\t* gcc.target/arm/vfp5.c: Likewise.\n\t* gcc.target/arm/vfp6.c: Likewise.\n\t* gcc.target/arm/vfp7.c: Likewise.\n\t* gcc.target/arm/vfp8.c: Likewise.\n\t* gcc.target/arm/vfp9.c: Likewise.\n\t* gcc.target/arm/vfp10.c: Likewise.\n\t* gcc.target/arm/vfp11.c: Likewise.\n\t* gcc.target/arm/vfp12.c: Likewise.\n\t* gcc.target/arm/vfp13.c: Likewise.\n\t* gcc.target/arm/vfp14.c: Likewise.\n\t* gcc.target/arm/vfp15.c: Likewise.\n\t* gcc.target/arm/vfp16.c: Likewise.\n\t* gcc.target/arm/vfp17.c: Likewise.\n\t* gcc.target/arm/neon-constants.h: New file.\n\t* gcc.target/arm/neon-vect1.c: New test.\n\t* gcc.target/arm/neon-vect2.c: New test.\n\t* gcc.target/arm/neon-vect3.c: New test.\n\t* gcc.target/arm/neon-vect4.c: New test.\n\t* gcc.target/arm/neon-vect5.c: New test.\n\t* gcc.target/arm/neon-vect6.c: New test.\n\t* gcc.target/arm/neon-vect7.c: New test.\n\t* gcc.target/arm/neon-vect8.c: New test.\n\nFrom-SVN: r184625", "tree": {"sha": "6850ac067217ad8d4071a06ca9286db8f4a925b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6850ac067217ad8d4071a06ca9286db8f4a925b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/192af6e805d413450a96c8950b00e17513684b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192af6e805d413450a96c8950b00e17513684b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192af6e805d413450a96c8950b00e17513684b9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192af6e805d413450a96c8950b00e17513684b9f/comments", "author": null, "committer": null, "parents": [{"sha": "7a8d8cadb3cc516c0a72f9a29fdd285195907e86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8d8cadb3cc516c0a72f9a29fdd285195907e86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8d8cadb3cc516c0a72f9a29fdd285195907e86"}], "stats": {"total": 370, "additions": 328, "deletions": 42}, "files": [{"sha": "c4852725c549f4bb9b822cf10b93cc5a0061a073", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,3 +1,8 @@\n+2012-02-28  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (aapcs_vfp_is_call_or_return_candidate): Only use the machine\n+\tmode if there is no type information available.\n+\n 2012-02-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR tree-optimization/53207"}, {"sha": "6923d8100b64e25366992b99e3307d5824bec149", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -4264,16 +4264,32 @@ use_vfp_abi (enum arm_pcs pcs_variant, bool is_double)\n \t  (TARGET_VFP_DOUBLE || !is_double));\n }\n \n+/* Return true if an argument whose type is TYPE, or mode is MODE, is\n+   suitable for passing or returning in VFP registers for the PCS\n+   variant selected.  If it is, then *BASE_MODE is updated to contain\n+   a machine mode describing each element of the argument's type and\n+   *COUNT to hold the number of such elements.  */\n static bool\n aapcs_vfp_is_call_or_return_candidate (enum arm_pcs pcs_variant,\n \t\t\t\t       enum machine_mode mode, const_tree type,\n \t\t\t\t       enum machine_mode *base_mode, int *count)\n {\n   enum machine_mode new_mode = VOIDmode;\n \n-  if (GET_MODE_CLASS (mode) == MODE_FLOAT\n-      || GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n-      || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n+  /* If we have the type information, prefer that to working things\n+     out from the mode.  */\n+  if (type)\n+    {\n+      int ag_count = aapcs_vfp_sub_candidate (type, &new_mode);\n+\n+      if (ag_count > 0 && ag_count <= 4)\n+\t*count = ag_count;\n+      else\n+\treturn false;\n+    }\n+  else if (GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t   || GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n+\t   || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n     {\n       *count = 1;\n       new_mode = mode;\n@@ -4283,15 +4299,6 @@ aapcs_vfp_is_call_or_return_candidate (enum arm_pcs pcs_variant,\n       *count = 2;\n       new_mode = (mode == DCmode ? DFmode : SFmode);\n     }\n-  else if (type && (mode == BLKmode || TREE_CODE (type) == VECTOR_TYPE))\n-    {\n-      int ag_count = aapcs_vfp_sub_candidate (type, &new_mode);\n-\n-      if (ag_count > 0 && ag_count <= 4)\n-\t*count = ag_count;\n-      else\n-\treturn false;\n-    }\n   else\n     return false;\n "}, {"sha": "09da73f681c739ed1d754027ff5830734141712a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,3 +1,32 @@\n+2012-02-28  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* gcc.target/arm/vfp1.c (dg_do run): Run on all eabi variants.\n+\t* gcc.target/arm/vfp2.c: Likewise.\n+\t* gcc.target/arm/vfp3.c: Likewise.\n+\t* gcc.target/arm/vfp4.c: Likewise.\n+\t* gcc.target/arm/vfp5.c: Likewise.\n+\t* gcc.target/arm/vfp6.c: Likewise.\n+\t* gcc.target/arm/vfp7.c: Likewise.\n+\t* gcc.target/arm/vfp8.c: Likewise.\n+\t* gcc.target/arm/vfp9.c: Likewise.\n+\t* gcc.target/arm/vfp10.c: Likewise.\n+\t* gcc.target/arm/vfp11.c: Likewise.\n+\t* gcc.target/arm/vfp12.c: Likewise.\n+\t* gcc.target/arm/vfp13.c: Likewise.\n+\t* gcc.target/arm/vfp14.c: Likewise.\n+\t* gcc.target/arm/vfp15.c: Likewise.\n+\t* gcc.target/arm/vfp16.c: Likewise.\n+\t* gcc.target/arm/vfp17.c: Likewise.\n+\t* gcc.target/arm/neon-constants.h: New file.\n+\t* gcc.target/arm/neon-vect1.c: New test.\n+\t* gcc.target/arm/neon-vect2.c: New test.\n+\t* gcc.target/arm/neon-vect3.c: New test.\n+\t* gcc.target/arm/neon-vect4.c: New test.\n+\t* gcc.target/arm/neon-vect5.c: New test.\n+\t* gcc.target/arm/neon-vect6.c: New test.\n+\t* gcc.target/arm/neon-vect7.c: New test.\n+\t* gcc.target/arm/neon-vect8.c: New test.\n+\n 2012-02-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52402"}, {"sha": "06a92c3ec8434855bc46ce19f3526074fdde452b", "filename": "gcc/testsuite/gcc.target/arm/aapcs/abitest.h", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fabitest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fabitest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fabitest.h?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,3 +1,4 @@\n+\n #define IN_FRAMEWORK\n \n #ifdef VFP\n@@ -10,6 +11,13 @@\n #define D6\t48\n #define D7\t56\n \n+#ifdef NEON\n+#define Q0      D0\n+#define Q1      D2\n+#define Q2      D4\n+#define Q3      D6\n+#endif\n+\n #define S0\t64\n #define S1\t68\n #define S2\t72\n@@ -27,23 +35,18 @@\n #define S14\t120\n #define S15\t124\n \n-#define R0\t128\n-#define R1\t132\n-#define R2\t136\n-#define R3\t140\n-\n-#define STACK\t144\n-\n+#define CORE_REG_START 128\n #else\n+#define CORE_REG_START 0\n+#endif\n \n-#define R0\t0\n-#define R1\t4\n-#define R2\t8\n-#define R3\t12\n+#define R0\tCORE_REG_START\n+#define R1\t(R0 + 4)\n+#define R2\t(R1 + 4)\n+#define R3\t(R2 + 4)\n+#define STACK\t(R3 + 4)\n \n-#define STACK   16\n \n-#endif\n \n extern void abort (void);\n "}, {"sha": "08b75f7b1a1d89d73756940b054603eeccbea9e1", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-constants.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-constants.h?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -0,0 +1,33 @@\n+\n+\n+#include \"arm_neon.h\"\n+\n+const int32x4_t i32x4_constvec1 = { 1101, 1102, 1103, 1104};\n+const int32x4_t i32x4_constvec2 = { 2101, 2102, 2103, 2104};\n+\n+#define ELEM(INDEX) .val[INDEX]\n+\n+const int32x4x2_t i32x4x2_constvec1 =   {ELEM(0) = {0xaddebccb,11,12,13}, \n+\t\t\t\t\t ELEM(1) = {14, 15, 16, 17} };\n+\n+const int32x4x2_t i32x4x2_constvec2 = { ELEM(0) = {0xaadebcca,11,12,13}, \n+\t\t\t                ELEM(1) = {140, 15, 16, 17}};\n+\n+const int32x4x3_t i32x4x3_constvec1 = { ELEM(0) = {0xabbccdde,8, 9, 10},\n+\t\t\t\t\tELEM(1) = {0xabcccdde, 26, 27, 28},\n+\t\t\t                ELEM(2) = {0xaccccddf, 29, 30, 31}};\n+\n+const int32x4x3_t i32x4x3_constvec2 = { ELEM(0) = {0xbccccdd0,8, 9, 10},\n+\t\t\t\t\tELEM(1) = {0xbdfe1000, 26, 27, 28},\n+\t\t\t                ELEM(2) = {0xaccccddf, 29, 30, 31}};\n+const float32x4x2_t f32x4x2_constvec1 =\n+  { ELEM(0) = { 7.101f, 0.201f, 0.301f, 0.401f} ,\n+    ELEM(1) = { 8.101f, 0.501f, 0.601f, 0.701f} };\n+\n+const float32x4x2_t f32x4x2_constvec2 = \n+  { ELEM(0) = { 11.99f , 11.21f, 1.27f, 8.74f},\n+    ELEM(1) = { 13.45f , 1.23f ,1.24f, 1.26f}};\n+\n+const int32x2_t i32x2_constvec1 = { 1283, 1345 };\n+const int32x2x2_t i32x2x2_constvec1 = { ELEM(0) = { 0xabcdefab, 32 },\n+\t\t\t\t\tELEM(1) = { 0xabcdefbc, 33 }};"}, {"sha": "47ae2f65fae3cc3954d53f6e7ecfdf3e4b199e58", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-vect1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect1.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -0,0 +1,27 @@\n+/* Test AAPCS layout (VFP variant for Neon types) */\n+\n+/* { dg-do run { target arm*-*-*eabi* } } */\n+/* { dg-require-effective-target arm_hard_vfp_ok  } */\n+/* { dg-require-effective-target arm_neon_ok  } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-add-options arm_neon } */\n+\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define NEON\n+#define TESTFILE \"neon-vect1.c\"\n+#include \"neon-constants.h\"\n+\n+\n+#include \"abitest.h\"\n+#else\n+\n+ARG(int32x4_t, i32x4_constvec2, Q0) /* D0, D1 */\n+ARG(float, 3.0f, S4) /* D2, Q1 */\n+ARG(int32x4x2_t, i32x4x2_constvec1, Q2) /* Q2, Q3 - D4-D6 , s5-s12 */\n+ARG(double, 12.0, D3) /* Backfill this particular argument.  */\n+ARG(int32x4x2_t, i32x4x2_constvec2, STACK) \n+ARG(float, 5.0f, STACK+sizeof(int32x4x2_t)) /* No backfill allowed.  */\n+LAST_ARG(int, 3, R0)\n+#endif"}, {"sha": "f7b532a3be1f962e5b855036d2b75262bee5e65e", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-vect2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect2.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -0,0 +1,23 @@\n+/* Test AAPCS layout (VFP variant for Neon types) */\n+\n+/* { dg-do run { target arm*-*-*eabi* } } */\n+/* { dg-require-effective-target arm_hard_vfp_ok } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-add-options arm_neon } */\n+\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define NEON\n+#define TESTFILE \"neon-vect2.c\"\n+#include \"neon-constants.h\"\n+\n+\n+#include \"abitest.h\"\n+#else\n+\n+ARG(int32x4_t, i32x4_constvec2, Q0) /* D0, D1.  */\n+ARG(float, 3.0f, S4) /* D2, Q1 occupied.  */\n+LAST_ARG(int, 3, R0)\n+#endif"}, {"sha": "e5426b0ec2bcbf00f6a57f028573ec10c4cc5c0c", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-vect3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect3.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -0,0 +1,26 @@\n+/* Test AAPCS layout (VFP variant for Neon types) */\n+\n+/* { dg-do run { target arm*-*-*eabi* } } */\n+/* { dg-require-effective-target arm_hard_vfp_ok } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-add-options arm_neon } */\n+\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define NEON\n+#define TESTFILE \"neon-vect3.c\"\n+#include \"neon-constants.h\"\n+\n+\n+#include \"abitest.h\"\n+#else\n+\n+ARG(int32x4_t, i32x4_constvec2, Q0) /* D0, D1 */\n+ARG(float, 3.0f, S4) /* D2, Q1 */\n+ARG(int32x4x2_t, i32x4x2_constvec1, Q2) /* Q2, Q3 - D4-D6 , s5-s12 */\n+ARG(int32x4x2_t, i32x4x2_constvec2, STACK) \n+ARG(double, 11.0, STACK+sizeof(int32x4x2_t)) /* No backfill in D3.  */\n+LAST_ARG(int, 3, R0)\n+#endif"}, {"sha": "96bd09c459f2f955f71be863559465644dda2f08", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-vect4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect4.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -0,0 +1,27 @@\n+/* Test AAPCS layout (VFP variant for Neon types) */\n+\n+/* { dg-do run { target arm*-*-*eabi* } } */\n+/* { dg-require-effective-target arm_hard_vfp_ok  } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-add-options arm_neon } */\n+\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define NEON\n+#define TESTFILE \"neon-vect4.c\"\n+#include \"neon-constants.h\"\n+\n+\n+#include \"abitest.h\"\n+#else\n+\n+ARG(int32x4_t, i32x4_constvec2, Q0) /* D0, D1 */\n+ARG(float, 3.0f, S4) /* D2, Q1 */\n+ARG(int32x4x2_t, i32x4x2_constvec1, Q2) /* Q2, Q3 - D4-D6 , s5-s12 */\n+ARG(double, 12.0, D3) /* Backfill this particular argument.  */\n+ARG(float, 5.0f, S5) /* Backfill in S5.  */\n+ARG(int32x4x2_t, i32x4x2_constvec2, STACK) \n+LAST_ARG(int, 3, R0)\n+#endif"}, {"sha": "59e58c96c5e2242385c02806eecc148ee4a89982", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-vect5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect5.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -0,0 +1,28 @@\n+/* Test AAPCS layout (VFP variant for Neon types) */\n+\n+/* { dg-do run { target arm*-*-*eabi* } } */\n+/* { dg-require-effective-target arm_hard_vfp_ok } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-add-options arm_neon } */\n+\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define NEON\n+#define TESTFILE \"neon-vect5.c\"\n+#include \"neon-constants.h\"\n+\n+\n+#include \"abitest.h\"\n+#else\n+\n+ARG(int32x4_t, i32x4_constvec2, Q0) /* D0, D1 */\n+ARG(float, 3.0f, S4) /* D2, Q1 */\n+ARG(float32x4x2_t, f32x4x2_constvec1, Q2) /* Q2, Q3 - D4-D6 , s5-s12 */\n+ARG(double, 12.0, D3) /* Backfill this particular argument.  */\n+ARG(int32x4x2_t, i32x4x2_constvec2, STACK) \n+ARG(float, 5.0f, STACK+sizeof(int32x4x2_t)) /* No backfill allowed.  */\n+LAST_ARG(int, 3, R0)\n+\n+#endif"}, {"sha": "fcb3998821a17fd2622d70da24cc8a573d19ccf9", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-vect6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect6.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -0,0 +1,24 @@\n+/* Test AAPCS layout (VFP variant for Neon types) */\n+\n+/* { dg-do run { target arm*-*-*eabi* } } */\n+/* { dg-require-effective-target arm_hard_vfp_ok } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-add-options arm_neon } */\n+\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define NEON\n+#define TESTFILE \"neon-vect6.c\"\n+#include \"neon-constants.h\"\n+\n+\n+#include \"abitest.h\"\n+#else\n+\n+ARG(int32x4_t, i32x4_constvec2, Q0) /* D0, D1 */\n+ARG(int32x4x3_t, i32x4x3_constvec1, Q1) /* Q1, Q2, Q3  */\n+ARG(int32x4x3_t, i32x4x3_constvec2, STACK)\n+LAST_ARG(int, 3, R0)\n+#endif"}, {"sha": "f8d1d0730078de5ace87207a58ee9a478ea7da96", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-vect7.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect7.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -0,0 +1,27 @@\n+/* Test AAPCS layout (VFP variant for Neon types) */\n+\n+/* { dg-do run { target arm*-*-*eabi* } } */\n+/* { dg-require-effective-target arm_hard_vfp_ok } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-add-options arm_neon } */\n+\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define NEON\n+#define TESTFILE \"neon-vect7.c\"\n+#include \"neon-constants.h\"\n+\n+\n+#include \"abitest.h\"\n+#else\n+\n+ARG(float, 24.3f, S0) /* S0 , D0, Q0 */\n+ARG(int32x4x3_t, i32x4x3_constvec1, Q1) /* Q1, Q2, Q3  */\n+ARG(double, 25.6, D1)\n+ARG(float, 12.67f, S1)\n+ARG(int32x4x3_t, i32x4x3_constvec2, STACK)\n+ARG(double, 2.47, STACK+sizeof(int32x4x3_t))\n+LAST_ARG(int, 3, R0)\n+#endif"}, {"sha": "f2c295d84fb70db246a519e3a61255e2676f14a9", "filename": "gcc/testsuite/gcc.target/arm/aapcs/neon-vect8.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fneon-vect8.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -0,0 +1,27 @@\n+/* Test AAPCS layout (VFP variant for Neon types) */\n+\n+/* { dg-do run { target arm*-*-*eabi* } } */\n+/* { dg-require-effective-target arm_hard_vfp_ok } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-add-options arm_neon } */\n+\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define NEON\n+#define TESTFILE \"neon-vect8.c\"\n+#include \"neon-constants.h\"\n+\n+\n+#include \"abitest.h\"\n+#else\n+\n+ARG(float, 24.3f, S0) /* S0 , D0, Q0 */\n+ARG(int32x2_t, i32x2_constvec1, D1) /* D1  */\n+ARG(double, 25.6, D2)\n+ARG(float, 12.67f, S1)\n+ARG(int32x4x3_t, i32x4x3_constvec2, STACK)\n+ARG(double, 2.47, STACK+sizeof(int32x4x3_t))\n+LAST_ARG(int, 3, R0)\n+#endif"}, {"sha": "9fb926dbdfcbb91568174bf32a045ff0017c1af6", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp1.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "c3a1b39a9491da09dc13cda45630f3c647f28ed4", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp10.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "a496a3ed5bb778d45ecac45afe2c77a53d504f6c", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp11.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "bbfa3df908261d310260db0b80e6aff8be4c12b7", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp12.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "a46361c0904d3eb3450cb5211dc4c4be1c62e3e5", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp13.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "43c19f2dd2c596593e420d0b1f4e97da50e1c0e6", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp14.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "c98ca38101d2a88e33832cc619c1dc871e2b9583", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp15.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "956bc0ab5d803124126534256fc353ea35ed3738", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp16.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "9044ec221fcd84a58e51f3a976e541dab9931a36", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp17.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "bfe90675b23d9b6c904b5ff9136b95e36634946a", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp2.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "0e645d71109bc3dc5bc6597e5b0aadf6fa416598", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp3.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "46dc4b98a7d5cb58f91d5019cb63c9e0d12af185", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp4.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "216d98ea8e327a9da611290b5cf9ff33320d4153", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp5.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "4d718da45d023ce0c799d9fe57ef36d28dc677d2", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp6.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "3e57e45c7ded62dd7c2a732cdc4adde0b5356a7f", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp7.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "e55006885c4df914ab4ef2e97c5fd22a607d58aa", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp8.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}, {"sha": "c2be6bf4b7036ac31011585ee66694a68c790e51", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192af6e805d413450a96c8950b00e17513684b9f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp9.c?ref=192af6e805d413450a96c8950b00e17513684b9f", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout (VFP variant) */\n \n-/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-do run { target arm*-*-*eabi* } } */\n /* { dg-require-effective-target arm_hard_vfp_ok } */\n /* { dg-require-effective-target arm32 } */\n /* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */"}]}