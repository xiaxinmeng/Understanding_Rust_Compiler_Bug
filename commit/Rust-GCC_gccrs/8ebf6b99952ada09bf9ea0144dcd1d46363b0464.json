{"sha": "8ebf6b99952ada09bf9ea0144dcd1d46363b0464", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGViZjZiOTk5NTJhZGEwOWJmOWVhMDE0NGRjZDFkNDYzNjNiMDQ2NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-03T13:11:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-05T07:11:23Z"}, "message": "middle-end/100394 - avoid DSE/DCE of pure call that throws\n\nThere is -fdelete-dead-exceptions now and we're tracking\nnothrow and const/pure bits separately and I do remember that\nconst or pure does _not_ imply nothrow.\n\nNow, in the light of the PR100382 fix which added a\nstmt_unremovable_because_of_non_call_eh_p guard to DSEs \"DCE\"\nI wondered how -fdelete-dead-exceptions applies to calls and\nwhether stmt_unremovable_because_of_non_call_eh_p doing\n\n  return (fun->can_throw_non_call_exceptions\n          && !fun->can_delete_dead_exceptions\n          && stmt_could_throw_p (fun, stmt));\n\nreally should conditionalize itself on\nfun->can_throw_non_call_exceptions.  In fact DCE happily elides\npure function calls that throw without a LHS (probably a\nconsistency bug).  The following testcase shows this:\n\nint x, y;\nint __attribute__((pure,noinline)) foo () { if (x) throw 1; return y; }\n\nint main()\n{\n  int a[2];\n  x = 1;\n  try {\n    int res = foo ();\n    a[0] = res;\n  } catch (...) {\n      return 0;\n  }\n  return 1;\n}\n\nnote that if you wrap foo () into another noinline\nwrap_foo () { foo (); return 1; } function then we need to make\nsure to not DCE this call either even though it only throws\nexternally.\n\n2021-05-03  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/100394\n\t* calls.c (expand_call): Preserve possibly throwing calls.\n\t* cfgexpand.c (expand_call_stmt): When a call can throw signal\n\tRTL expansion there are side-effects.\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Simplify,\n\tmark all possibly throwing stmts necessary unless we can elide\n\tdead EH.\n\t* tree-ssa-dse.c (pass_dse::execute): Preserve exceptions unless\n\t-fdelete-dead-exceptions.\n\t* tree.h (DECL_PURE_P): Add note about exceptions.\n\n\t* g++.dg/torture/pr100382.C: New testcase.", "tree": {"sha": "4c5614950602b44572548fc6f3e1be9e85584664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c5614950602b44572548fc6f3e1be9e85584664"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ebf6b99952ada09bf9ea0144dcd1d46363b0464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebf6b99952ada09bf9ea0144dcd1d46363b0464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ebf6b99952ada09bf9ea0144dcd1d46363b0464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d48b1e2b5bae1e0e5e48af296facd61617139c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61d48b1e2b5bae1e0e5e48af296facd61617139c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61d48b1e2b5bae1e0e5e48af296facd61617139c"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "f3da1839dc5a321dc9b74df55087aedb8389a0d1", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=8ebf6b99952ada09bf9ea0144dcd1d46363b0464", "patch": "@@ -3808,6 +3808,7 @@ expand_call (tree exp, rtx target, int ignore)\n      side-effects.  */\n   if ((flags & (ECF_CONST | ECF_PURE))\n       && (!(flags & ECF_LOOPING_CONST_OR_PURE))\n+      && (flags & ECF_NOTHROW)\n       && (ignore || target == const0_rtx\n \t  || TYPE_MODE (rettype) == VOIDmode))\n     {"}, {"sha": "556a0b22ed6aa17b4d154e2abb1ff4b7be46a24d", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=8ebf6b99952ada09bf9ea0144dcd1d46363b0464", "patch": "@@ -2795,7 +2795,10 @@ expand_call_stmt (gcall *stmt)\n       CALL_EXPR_ARG (exp, i) = arg;\n     }\n \n-  if (gimple_has_side_effects (stmt))\n+  if (gimple_has_side_effects (stmt)\n+      /* ???  Downstream in expand_expr_real_1 we assume that expressions\n+\t w/o side-effects do not throw so work around this here.  */\n+      || stmt_could_throw_p (cfun, stmt))\n     TREE_SIDE_EFFECTS (exp) = 1;\n \n   if (gimple_call_nothrow_p (stmt))"}, {"sha": "ffc4182cfceacf137331ae82213685c8db42c266", "filename": "gcc/testsuite/g++.dg/torture/pr100382.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr100382.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr100382.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr100382.C?ref=8ebf6b99952ada09bf9ea0144dcd1d46363b0464", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do run }\n+\n+int x, y;\n+int __attribute__((pure,noinline)) foo () { if (x) throw 1; return y; }\n+\n+int __attribute__((noinline)) bar()\n+{\n+  int a[2];\n+  x = 1;\n+  try {\n+    int res = foo ();\n+    a[0] = res;\n+  } catch (...) {\n+      return 0;\n+  }\n+  return 1;\n+}\n+\n+int main()\n+{\n+  if (bar ())\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "c091868a313523e31c5d22f3999dca83f6a34fda", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=8ebf6b99952ada09bf9ea0144dcd1d46363b0464", "patch": "@@ -199,14 +199,6 @@ mark_operand_necessary (tree op)\n static void\n mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n {\n-  /* With non-call exceptions, we have to assume that all statements could\n-     throw.  If a statement could throw, it can be deemed necessary.  */\n-  if (stmt_unremovable_because_of_non_call_eh_p (cfun, stmt))\n-    {\n-      mark_stmt_necessary (stmt, true);\n-      return;\n-    }\n-\n   /* Statements that are implicitly live.  Most function calls, asm\n      and return statements are required.  Labels and GIMPLE_BIND nodes\n      are kept because they are control flow, and we have no way of\n@@ -250,14 +242,6 @@ mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n \t    && DECL_IS_REPLACEABLE_OPERATOR_NEW_P (callee))\n \t  return;\n \n-\t/* Most, but not all function calls are required.  Function calls that\n-\t   produce no result and have no side effects (i.e. const pure\n-\t   functions) are unnecessary.  */\n-\tif (gimple_has_side_effects (stmt))\n-\t  {\n-\t    mark_stmt_necessary (stmt, true);\n-\t    return;\n-\t  }\n \t/* IFN_GOACC_LOOP calls are necessary in that they are used to\n \t   represent parameter (i.e. step, bound) of a lowered OpenACC\n \t   partitioned loop.  But this kind of partitioned loop might not\n@@ -269,8 +253,6 @@ mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n \t    mark_stmt_necessary (stmt, true);\n \t    return;\n \t  }\n-\tif (!gimple_call_lhs (stmt))\n-\t  return;\n \tbreak;\n       }\n \n@@ -312,19 +294,24 @@ mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n   /* If the statement has volatile operands, it needs to be preserved.\n      Same for statements that can alter control flow in unpredictable\n      ways.  */\n-  if (gimple_has_volatile_ops (stmt) || is_ctrl_altering_stmt (stmt))\n+  if (gimple_has_side_effects (stmt) || is_ctrl_altering_stmt (stmt))\n     {\n       mark_stmt_necessary (stmt, true);\n       return;\n     }\n \n-  if (stmt_may_clobber_global_p (stmt))\n+  /* If a statement could throw, it can be deemed necessary unless we\n+     are allowed to remove dead EH.  Test this after checking for\n+     new/delete operators since we always elide their EH.  */\n+  if (!cfun->can_delete_dead_exceptions\n+      && stmt_could_throw_p (cfun, stmt))\n     {\n       mark_stmt_necessary (stmt, true);\n       return;\n     }\n \n-  if (gimple_vdef (stmt) && keep_all_vdefs_p ())\n+  if ((gimple_vdef (stmt) && keep_all_vdefs_p ())\n+      || stmt_may_clobber_global_p (stmt))\n     {\n       mark_stmt_necessary (stmt, true);\n       return;"}, {"sha": "63c876a1ff245d48f8abc33a7d16b8acbf1ad931", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=8ebf6b99952ada09bf9ea0144dcd1d46363b0464", "patch": "@@ -1220,7 +1220,8 @@ pass_dse::execute (function *fun)\n \t      if (has_zero_uses (DEF_FROM_PTR (def_p))\n \t\t  && !gimple_has_side_effects (stmt)\n \t\t  && !is_ctrl_altering_stmt (stmt)\n-\t\t  && !stmt_unremovable_because_of_non_call_eh_p (cfun, stmt))\n+\t\t  && (!stmt_could_throw_p (fun, stmt)\n+\t\t      || fun->can_delete_dead_exceptions))\n \t\t{\n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t    {"}, {"sha": "6d3cfc4c588e945f7cb75a69974bbef2f5e7ad3b", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf6b99952ada09bf9ea0144dcd1d46363b0464/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8ebf6b99952ada09bf9ea0144dcd1d46363b0464", "patch": "@@ -3133,7 +3133,10 @@ set_function_decl_type (tree decl, function_decl_type t, bool set)\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.returns_twice_flag)\n \n /* Nonzero in a FUNCTION_DECL means this function should be treated\n-   as \"pure\" function (like const function, but may read global memory).  */\n+   as \"pure\" function (like const function, but may read global memory).\n+   Note that being pure or const for a function is orthogonal to being\n+   nothrow, i.e. it is valid to have DECL_PURE_P set and TREE_NOTHROW\n+   cleared.  */\n #define DECL_PURE_P(NODE) (FUNCTION_DECL_CHECK (NODE)->function_decl.pure_flag)\n \n /* Nonzero only if one of TREE_READONLY or DECL_PURE_P is nonzero AND"}]}