{"sha": "f0523f020a20bea82110237521681b099697150f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA1MjNmMDIwYTIwYmVhODIxMTAyMzc1MjE2ODFiMDk5Njk3MTUwZg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-25T00:21:28Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-25T00:21:28Z"}, "message": "c-tree.texi, [...]: Be more consistent about the use of \"GCC\" and related terms.\n\n\t* doc/c-tree.texi, doc/contrib.texi, doc/extend.texi,\n\tdoc/gcc.texi, doc/gcov.texi, doc/install.texi, doc/invoke.texi,\n\tdoc/md.texi, doc/rtl.texi, doc/tm.texi: Be more consistent about\n\tthe use of \"GCC\" and related terms.\n\t* doc/gcc.1, doc/gcov.1: Regenerate.\n\nFrom-SVN: r43547", "tree": {"sha": "87302f8ef83fe627cf925b4fdcb6e70da26c9e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87302f8ef83fe627cf925b4fdcb6e70da26c9e76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0523f020a20bea82110237521681b099697150f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0523f020a20bea82110237521681b099697150f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0523f020a20bea82110237521681b099697150f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0523f020a20bea82110237521681b099697150f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd819a4abafd36d64d2c80ddc0a00531685e6afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd819a4abafd36d64d2c80ddc0a00531685e6afa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd819a4abafd36d64d2c80ddc0a00531685e6afa"}], "stats": {"total": 376, "additions": 196, "deletions": 180}, "files": [{"sha": "3c6650226fe2e956c83213cb0df6184c87063a01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -1,3 +1,11 @@\n+2001-06-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/c-tree.texi, doc/contrib.texi, doc/extend.texi,\n+\tdoc/gcc.texi, doc/gcov.texi, doc/install.texi, doc/invoke.texi,\n+\tdoc/md.texi, doc/rtl.texi, doc/tm.texi: Be more consistent about\n+\tthe use of \"GCC\" and related terms.\n+\t* doc/gcc.1, doc/gcov.1: Regenerate.\n+\n 2001-06-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/extend.texi, doc/gcc.texi, doc/install-old.texi,"}, {"sha": "c87ebe04f1e646cd0b92221fe2f07f5b8940e46b", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -88,7 +88,7 @@ return trees as output.  However, most macros require a certain kinds of\n tree node as input.  In other words, there is a type-system for trees,\n but it is not reflected in the C type-system.\n \n-For safety, it is useful to configure G++ with @option{--enable-checking}.\n+For safety, it is useful to configure GCC with @option{--enable-checking}.\n Although this results in a significant performance penalty (since all\n tree types are checked at run-time), and is therefore inappropriate in a\n release version, it is extremely helpful during the development process."}, {"sha": "ea73df94e6b853cc0211e41562e8c739f819daff", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -112,7 +112,7 @@ ongoing work with the RS6000/PowerPC port, and help cleaning up Haifa\n loop changes.\n \n @item\n-Paul Eggert for random hacking all over gcc.\n+Paul Eggert for random hacking all over GCC.\n \n @item\n Mark Elbrecht for various DJGPP improvements."}, {"sha": "8ad1f514c9c52d3b7b957995aa9591e14d507f03", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -9,10 +9,10 @@\n \n @opindex pedantic\n GNU C provides several language features not found in ISO standard C.\n-(The @option{-pedantic} option directs GNU CC to print a warning message if\n+(The @option{-pedantic} option directs GCC to print a warning message if\n any of these features is used.)  To test for the availability of these\n features in conditional compilation, check for a predefined macro\n-@code{__GNUC__}, which is always defined under GNU CC.\n+@code{__GNUC__}, which is always defined under GCC.\n \n These extensions are available in C and Objective-C.  Most of them are\n also available in C++.  @xref{C++ Extensions,,Extensions to the\n@@ -427,7 +427,7 @@ but it's not wise to take the risk.  If, however, the nested function\n does not refer to anything that has gone out of scope, you should be\n safe.\n \n-GNU CC implements taking the address of a nested function using a\n+GCC implements taking the address of a nested function using a\n technique called @dfn{trampolines}.   A paper describing them is\n available as @uref{http://people.debian.org/~karlheg/Usenix88-lexic.pdf}.\n \n@@ -803,7 +803,7 @@ are open-coded on all types of machines.  Multiplication is open-coded\n if the machine supports fullword-to-doubleword a widening multiply\n instruction.  Division and shifts are open-coded only on machines that\n provide special support.  The operations that are not open-coded use\n-special library routines that come with GNU CC.\n+special library routines that come with GCC.\n \n There may be pitfalls when you use @code{long long} types for function\n arguments, unless you declare function prototypes.  If a function\n@@ -859,11 +859,11 @@ floating type, you should use the ISO C99 functions @code{conjf},\n @code{conj} and @code{conjl}, declared in @code{<complex.h>} and also\n provided as built-in functions by GCC.\n \n-GNU CC can allocate complex automatic variables in a noncontiguous\n+GCC can allocate complex automatic variables in a noncontiguous\n fashion; it's even possible for the real part to be in a register while\n the imaginary part is on the stack (or vice-versa).  None of the\n supported debugging info formats has a way to represent noncontiguous\n-allocation like this, so GNU CC describes a noncontiguous complex\n+allocation like this, so GCC describes a noncontiguous complex\n variable as if it were two separate variables of noncomplex type.\n If the variable's actual name is @code{foo}, the two fictitious\n variables are named @code{foo$real} and @code{foo$imag}.  You can\n@@ -1574,7 +1574,7 @@ attributes.\n @cindex @code{noreturn} function attribute\n @item noreturn\n A few standard library functions, such as @code{abort} and @code{exit},\n-cannot return.  GNU CC knows this automatically.  Some programs define\n+cannot return.  GCC knows this automatically.  Some programs define\n their own functions that never return.  You can declare them\n @code{noreturn} to tell the compiler this fact.  For example,\n \n@@ -1601,7 +1601,7 @@ restored before calling the @code{noreturn} function.\n It does not make sense for a @code{noreturn} function to have a return\n type other than @code{void}.\n \n-The attribute @code{noreturn} is not implemented in GNU C versions\n+The attribute @code{noreturn} is not implemented in GCC versions\n earlier than 2.5.  An alternative way to declare that a function does\n not return, which works in the current version and in some older\n versions, is as follows:\n@@ -1634,7 +1634,7 @@ Interesting non-pure functions are functions with infinite loops or those\n depending on volatile memory or other system resource, that may change between\n two consecutive calls (such as @code{feof} in a multithreading environment).\n \n-The attribute @code{pure} is not implemented in GNU C versions earlier\n+The attribute @code{pure} is not implemented in GCC versions earlier\n than 2.96.\n @cindex @code{const} function attribute\n @item const\n@@ -1650,7 +1650,7 @@ function that calls a non-@code{const} function usually must not be\n @code{const}.  It does not make sense for a @code{const} function to\n return @code{void}.\n \n-The attribute @code{const} is not implemented in GNU C versions earlier\n+The attribute @code{const} is not implemented in GCC versions earlier\n than 2.5.  An alternative way to declare that a function has no side\n effects, which works in the current version and in some older versions,\n is as follows:\n@@ -1703,7 +1703,7 @@ attribute are 2 and 3.\n \n @opindex ffreestanding\n The @code{format} attribute allows you to identify your own functions\n-which take format strings as arguments, so that GNU CC can check the\n+which take format strings as arguments, so that GCC can check the\n calls to these functions for errors.  The compiler always (unless\n @option{-ffreestanding} is used) checks formats\n for the standard library functions @code{printf}, @code{fprintf},\n@@ -1749,7 +1749,7 @@ The parameter @var{string-index} specifies which argument is the format\n string argument (starting from 1).\n \n The @code{format-arg} attribute allows you to identify your own\n-functions which modify format strings, so that GNU CC can check the\n+functions which modify format strings, so that GCC can check the\n calls to @code{printf}, @code{scanf}, @code{strftime} or @code{strfmon}\n type function whose operands are a call to one of your own function.\n The compiler always treats @code{gettext}, @code{dgettext}, and\n@@ -1801,7 +1801,7 @@ These attributes are not currently implemented for Objective-C.\n \n @item unused\n This attribute, attached to a function, means that the function is meant\n-to be possibly unused.  GNU CC will not produce a warning for this\n+to be possibly unused.  GCC will not produce a warning for this\n function.  GNU C++ does not currently support this attribute as\n definitions without parameters are valid in C++.\n \n@@ -1839,14 +1839,14 @@ Not all target machines support this attribute.\n @item no_check_memory_usage\n @cindex @code{no_check_memory_usage} function attribute\n @opindex fcheck-memory-usage\n-The @code{no_check_memory_usage} attribute causes GNU CC to omit checks\n+The @code{no_check_memory_usage} attribute causes GCC to omit checks\n of memory references when it generates code for that function.  Normally\n if you specify @option{-fcheck-memory-usage} (see @pxref{Code Gen\n-Options}), GNU CC generates calls to support routines before most memory\n+Options}), GCC generates calls to support routines before most memory\n accesses to permit support code to record usage and detect uses of\n-uninitialized or unallocated storage.  Since GNU CC cannot handle\n+uninitialized or unallocated storage.  Since GCC cannot handle\n @code{asm} statements properly they are not allowed in such functions.\n-If you declare a function with this attribute, GNU CC will not generate\n+If you declare a function with this attribute, GCC will not generate\n memory checking code for that function, permitting the use of @code{asm}\n statements without having to compile that function with different\n options.  This also allows you to write support routines of your own if\n@@ -2482,9 +2482,9 @@ or @samp{__pointer__} for the mode used to represent pointers.\n @item nocommon\n @cindex @code{nocommon} attribute\n @opindex fno-common\n-This attribute specifies requests GNU CC not to place a variable\n+This attribute specifies requests GCC not to place a variable\n ``common'' but instead to allocate space for it directly.  If you\n-specify the @option{-fno-common} flag, GNU CC will do this for all\n+specify the @option{-fno-common} flag, GCC will do this for all\n variables.\n \n Specifying the @code{nocommon} attribute for a variable provides an\n@@ -2540,7 +2540,7 @@ main()\n \n @noindent\n Use the @code{section} attribute with an @emph{initialized} definition\n-of a @emph{global} variable, as shown in the example.  GNU CC issues\n+of a @emph{global} variable, as shown in the example.  GCC issues\n a warning and otherwise ignores the @code{section} attribute in\n uninitialized variable declarations.\n \n@@ -2594,7 +2594,7 @@ applies to all function parameters with that type.\n \n @item unused\n This attribute, attached to a variable, means that the variable is meant\n-to be possibly unused.  GNU CC will not produce a warning for this\n+to be possibly unused.  GCC will not produce a warning for this\n variable.\n \n @item weak\n@@ -2807,7 +2807,7 @@ pid_t wait (wait_status_ptr_t p)\n @item unused\n When attached to a type (including a @code{union} or a @code{struct}),\n this attribute means that variables of that type are meant to appear\n-possibly unused.  GNU CC will not produce a warning for any variables of\n+possibly unused.  GCC will not produce a warning for any variables of\n that type, even if the variable appears to do nothing.  This is often\n the case with lock or thread classes, which are usually defined and then\n not referenced, but contain constructors and destructors that have\n@@ -2826,7 +2826,7 @@ packed))}.\n @cindex open coding\n @cindex macros, inline alternative\n \n-By declaring a function @code{inline}, you can direct GNU CC to\n+By declaring a function @code{inline}, you can direct GCC to\n integrate that function's code into the code for its callers.  This\n makes execution faster by eliminating the function-call overhead; in\n addition, if any of the actual argument values are constant, their known\n@@ -2874,7 +2874,7 @@ does not affect the linkage of the function.\n @cindex member fns, automatically @code{inline}\n @cindex C++ member fns, automatically @code{inline}\n @opindex fno-default-inline\n-GNU CC automatically inlines member functions defined within the class\n+GCC automatically inlines member functions defined within the class\n body of C++ programs even if they are not explicitly declared\n @code{inline}.  (You can override this with @option{-fno-default-inline};\n @pxref{C++ Dialect Options,,Options Controlling C++ Dialect}.)\n@@ -2884,7 +2884,7 @@ body of C++ programs even if they are not explicitly declared\n When a function is both inline and @code{static}, if all calls to the\n function are integrated into the caller, and the function's address is\n never used, then the function's own assembler code is never referenced.\n-In this case, GNU CC does not actually output assembler code for the\n+In this case, GCC does not actually output assembler code for the\n function, unless you specify the option @option{-fkeep-inline-functions}.\n Some calls cannot be integrated for various reasons (in particular,\n calls that precede the function's definition cannot be integrated, and\n@@ -2921,7 +2921,7 @@ existing semantics will remain available when @option{-std=gnu89} is\n specified, but eventually the default will be @option{-std=gnu99} and\n that will implement the C99 semantics, though it does not do so yet.)\n \n-GNU C does not inline any functions when not optimizing.  It is not\n+GCC does not inline any functions when not optimizing.  It is not\n clear whether it is better to inline or not, in this case, but we found\n that a correct implementation when not optimizing was difficult.  So we\n did the easy thing, and turned it off.\n@@ -2976,11 +2976,11 @@ template and does not know what it means or even whether it is valid\n assembler input.  The extended @code{asm} feature is most often used for\n machine instructions the compiler itself does not know exist.  If\n the output expression cannot be directly addressed (for example, it is a\n-bit-field), your constraint must allow a register.  In that case, GNU CC\n+bit-field), your constraint must allow a register.  In that case, GCC\n will use the register as the output of the @code{asm}, and then store\n that register into the output.\n \n-The ordinary output operands must be write-only; GNU CC will assume that\n+The ordinary output operands must be write-only; GCC will assume that\n the values in these operands before the instruction are dead and need\n not be generated.  Extended asm supports input-output or read-write\n operands.  Use the constraint character @samp{+} to indicate such an\n@@ -3017,12 +3017,12 @@ asm (\"combine %2,%0\" : \"=r\" (foo) : \"r\" (foo), \"g\" (bar));\n @end example\n \n Various optimizations or reloading could cause operands 0 and 1 to be in\n-different registers; GNU CC knows no reason not to do so.  For example, the\n+different registers; GCC knows no reason not to do so.  For example, the\n compiler might find a copy of the value of @code{foo} in one register and\n use it for operand 1, but generate the output operand 0 in a different\n register (copying it afterward to @code{foo}'s own address).  Of course,\n since the register for operand 1 is not even mentioned in the assembler\n-code, the result will not work, but GNU CC can't tell that.\n+code, the result will not work, but GCC can't tell that.\n \n Some instructions clobber specific hard registers.  To describe this,\n write a third colon after the input operands, followed by the names of\n@@ -3044,7 +3044,7 @@ operand is modified without also specifying it as an output\n operand.  Note that if all the output operands you specify are for this\n purpose (and hence unused), you will then also need to specify\n @code{volatile} for the @code{asm} construct, as described below, to\n-prevent GNU CC from deleting the @code{asm} statement as unused.\n+prevent GCC from deleting the @code{asm} statement as unused.\n \n If you refer to a particular hardware register from the assembler code,\n you will probably have to list the register after the third colon to\n@@ -3053,15 +3053,15 @@ the register names begin with @samp{%}; to produce one @samp{%} in the\n assembler code, you must write @samp{%%} in the input.\n \n If your assembler instruction can alter the condition code register, add\n-@samp{cc} to the list of clobbered registers.  GNU CC on some machines\n+@samp{cc} to the list of clobbered registers.  GCC on some machines\n represents the condition codes as a specific hardware register;\n @samp{cc} serves to name this register.  On other machines, the\n condition code is handled differently, and specifying @samp{cc} has no\n effect.  But it is valid no matter what the machine.\n \n If your assembler instruction modifies memory in an unpredictable\n fashion, add @samp{memory} to the list of clobbered registers.  This\n-will cause GNU CC to not keep memory values cached in registers across\n+will cause GCC to not keep memory values cached in registers across\n the assembler instruction.  You will also want to add the\n @code{volatile} keyword if the memory affected is not listed in the\n inputs or outputs of the @code{asm}, as the @samp{memory} clobber does\n@@ -3087,7 +3087,7 @@ asm (\"movl %0,r9\\n\\tmovl %1,r10\\n\\tcall _foo\"\n      : \"r9\", \"r10\");\n @end example\n \n-Unless an output operand has the @samp{&} constraint modifier, GNU CC\n+Unless an output operand has the @samp{&} constraint modifier, GCC\n may allocate it in the same register as an unrelated input operand, on\n the assumption the inputs are consumed before the outputs are produced.\n This assumption may be false if the assembler code actually consists of\n@@ -3137,7 +3137,7 @@ example, if the desired type were @code{int}, casting the argument to\n argument to an @code{int} variable named @code{__arg} would warn about\n using a pointer unless the caller explicitly casts it.\n \n-If an @code{asm} has output operands, GNU CC assumes for optimization\n+If an @code{asm} has output operands, GCC assumes for optimization\n purposes the instruction has no side effects except to change the output\n operands.  This does not mean instructions with a side effect cannot be\n used, but you must be careful, because the compiler may eliminate them\n@@ -3160,7 +3160,7 @@ the @code{asm}.  For example:\n @end example\n \n @noindent\n-If you write an @code{asm} instruction with no outputs, GNU CC will know\n+If you write an @code{asm} instruction with no outputs, GCC will know\n the instruction has side-effects and will not delete the instruction or\n move it outside of loops.\n \n@@ -3352,8 +3352,8 @@ func (x, y)\n \n It is up to you to make sure that the assembler names you choose do not\n conflict with any other assembler symbols.  Also, you must not use a\n-register name; that would produce completely invalid assembler code.  GNU\n-CC does not as yet have the ability to store static variables in registers.\n+register name; that would produce completely invalid assembler code.  GCC\n+does not as yet have the ability to store static variables in registers.\n Perhaps that will be added.\n \n @node Explicit Reg Vars\n@@ -3526,7 +3526,7 @@ unavailable for use in the reload pass; excessive use of this feature\n leaves the compiler too few available registers to compile certain\n functions.\n \n-This option does not guarantee that GNU CC will generate code that has\n+This option does not guarantee that GCC will generate code that has\n this variable in the register you specify at all times.  You may not\n code an explicit reference to this register in an @code{asm} statement\n and assume it will always refer to this variable.\n@@ -3601,7 +3601,7 @@ This extension is not supported by GNU C++.\n @cindex @code{__PRETTY_FUNCTION__} identifier\n @cindex @code{__func__} identifier\n \n-GNU CC predefines two magic identifiers to hold the name of the current\n+GCC predefines two magic identifiers to hold the name of the current\n function. The identifier @code{__FUNCTION__} holds the name of the function\n as it appears in the source. The identifier @code{__PRETTY_FUNCTION__}\n holds the name of the function pretty printed in a language specific\n@@ -3655,7 +3655,7 @@ On the other hand, @samp{#ifdef __FUNCTION__} does not have any special\n meaning inside a function, since the preprocessor does not do anything\n special with the identifier @code{__FUNCTION__}.\n \n-GNU CC also supports the magic word @code{__func__}, defined by the\n+GCC also supports the magic word @code{__func__}, defined by the\n ISO standard C99:\n \n @display\n@@ -3722,7 +3722,7 @@ function as well.\n @end deftypefn\n \n @node Other Builtins\n-@section Other built-in functions provided by GNU CC\n+@section Other built-in functions provided by GCC\n @cindex built-in functions\n @findex __builtin_isgreater\n @findex __builtin_isgreaterequal\n@@ -3785,7 +3785,7 @@ function as well.\n @findex strspn\n @findex strstr\n \n-GNU CC provides a large number of built-in functions other than the ones\n+GCC provides a large number of built-in functions other than the ones\n mentioned above.  Some of these are for internal use in the processing\n of exceptions or variable-length argument lists and will not be\n documented here because they may change from time to time; we do not\n@@ -3794,7 +3794,7 @@ recommend general use of these functions.\n The remaining functions are provided for optimization purposes.\n \n @opindex fno-builtin\n-GNU CC includes built-in versions of many of the functions in the\n+GCC includes built-in versions of many of the functions in the\n standard C library.  The versions prefixed with @code{__builtin_} will\n always be treated as having the same meaning as the C library function\n even if you specify the @option{-fno-builtin} (@pxref{C Dialect Options})\n@@ -3838,7 +3838,7 @@ of these functions have corresponding versions prefixed with\n @code{__builtin_}, except that the version for @code{sqrt} is called\n @code{__builtin_fsqrt}.\n \n-GNU CC provides built-in versions of the ISO C99 floating point\n+GCC provides built-in versions of the ISO C99 floating point\n comparison macros (that avoid raising exceptions for unordered\n operands): @code{__builtin_isgreater}, @code{__builtin_isgreaterequal},\n @code{__builtin_isless}, @code{__builtin_islessequal},\n@@ -3848,12 +3848,12 @@ operands): @code{__builtin_isgreater}, @code{__builtin_isgreaterequal},\n @deftypefn {Built-in Function} int __builtin_constant_p (@var{exp})\n You can use the built-in function @code{__builtin_constant_p} to\n determine if a value is known to be constant at compile-time and hence\n-that GNU CC can perform constant-folding on expressions involving that\n+that GCC can perform constant-folding on expressions involving that\n value.  The argument of the function is the value to test.  The function\n returns the integer 1 if the argument is known to be a compile-time\n constant and 0 if it is not known to be a compile-time constant.  A\n return of 0 does not indicate that the value is @emph{not} a constant,\n-but merely that GNU CC cannot prove it is a constant with the specified\n+but merely that GCC cannot prove it is a constant with the specified\n value of the @option{-O} option.\n \n You would typically use this function in an embedded application where\n@@ -3869,7 +3869,7 @@ a function if it does not.  For example:\n \n You may use this built-in function in either a macro or an inline\n function.  However, if you use it in an inlined function and pass an\n-argument of the function as the argument to the built-in, GNU CC will\n+argument of the function as the argument to the built-in, GCC will\n never return 1 when you call the inline function with a string constant\n or compound literal (@pxref{Compound Literals}) and will not return 1\n when you pass a constant numeric value to the inline function unless you\n@@ -4031,16 +4031,16 @@ volatile int *src = @var{somevalue};\n @end example\n \n With C, such expressions are rvalues, and as rvalues cause a read of\n-the object, gcc interprets this as a read of the volatile being pointed\n+the object, GCC interprets this as a read of the volatile being pointed\n to. The C++ standard specifies that such expressions do not undergo\n lvalue to rvalue conversion, and that the type of the dereferenced\n object may be incomplete. The C++ standard does not specify explicitly\n that it is this lvalue to rvalue conversion which is responsible for\n causing an access. However, there is reason to believe that it is,\n because otherwise certain simple expressions become undefined. However,\n-because it would surprise most programmers, g++ treats dereferencing a\n+because it would surprise most programmers, G++ treats dereferencing a\n pointer to volatile object of complete type in a void context as a read\n-of the object. When the object has incomplete type, g++ issues a\n+of the object. When the object has incomplete type, G++ issues a\n warning.\n \n @example\n@@ -4057,7 +4057,7 @@ causes a read of the object pointed to. If you wish to force an error on\n the first case, you must force a conversion to rvalue with, for instance\n a static cast, @code{static_cast<S>(*ptr1)}.\n \n-When using a reference to volatile, g++ does not treat equivalent\n+When using a reference to volatile, G++ does not treat equivalent\n expressions as accesses to volatiles, but instead issues a warning that\n no volatile is accessed. The rationale for this is that otherwise it\n becomes difficult to determine where volatile access occur, and not"}, {"sha": "fd33750eb2460f19490852d7a8b233f4895c37c2", "filename": "gcc/doc/gcc.1", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fgcc.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fgcc.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.1?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.16\n-.\\\" Sat Jun 16 09:19:37 2001\n+.\\\" Mon Jun 25 00:14:37 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -138,7 +138,7 @@\n .\\\" ======================================================================\n .\\\"\n .IX Title \"GCC 1\"\n-.TH GCC 1 \"gcc-3.1\" \"2001-06-16\" \"GNU\"\n+.TH GCC 1 \"gcc-3.1\" \"2001-06-25\" \"GNU\"\n .UC\n .SH \"NAME\"\n gcc \\- \\s-1GNU\\s0 project C and \\*(C+ compiler\n@@ -821,7 +821,7 @@ languages; or options that are meaningful only for \\*(C+ programs.\n .Sh \"Options Controlling C Dialect\"\n .IX Subsection \"Options Controlling C Dialect\"\n The following options control the dialect of C (or languages derived\n-from C, such as \\*(C+ and Objective C) that the compiler accepts:\n+from C, such as \\*(C+ and Objective-C) that the compiler accepts:\n .Ip \"\\fB\\-ansi\\fR\" 4\n .IX Item \"-ansi\"\n In C mode, support all \\s-1ISO\\s0 C89 programs.  In \\*(C+ mode,\n@@ -1502,14 +1502,14 @@ Traditionally, diagnostic messages have been formatted irrespective of\n the output device's aspect (e.g. its width, ...).  The options described\n below can be used to control the diagnostic messages formatting\n algorithm, e.g. how many characters per line, how often source location\n-information should be reported.  Right now, only the \\*(C+ front-end can\n+information should be reported.  Right now, only the \\*(C+ front end can\n honor these options.  However it is expected, in the near future, that\n-the remaining front-ends would be able to digest them correctly.\n+the remaining front ends would be able to digest them correctly.\n .Ip \"\\fB\\-fmessage-length=\\fR\\fIn\\fR\" 4\n .IX Item \"-fmessage-length=n\"\n Try to format error messages so that they fit on lines of about \\fIn\\fR\n characters.  The default is 72 characters for g++ and 0 for the rest of\n-the front-ends supported by \\s-1GCC\\s0.  If \\fIn\\fR is zero, then no\n+the front ends supported by \\s-1GCC\\s0.  If \\fIn\\fR is zero, then no\n line-wrapping will be done; each error message will appear on a single\n line.\n .Ip \"\\fB\\-fdiagnostics-show-location=once\\fR\" 4\n@@ -1714,7 +1714,7 @@ In C, every \\f(CW\\*(C`else\\*(C'\\fR branch belongs to the innermost possible \\f(C\n statement, which in this example is \\f(CW\\*(C`if (b)\\*(C'\\fR.  This is often not\n what the programmer expected, as illustrated in the above example by\n indentation the programmer chose.  When there is the potential for this\n-confusion, \\s-1GNU\\s0 C will issue a warning when this flag is specified.\n+confusion, \\s-1GCC\\s0 will issue a warning when this flag is specified.\n To eliminate the warning, add explicit braces around the innermost\n \\&\\f(CW\\*(C`if\\*(C'\\fR statement so there is no way the \\f(CW\\*(C`else\\*(C'\\fR could belong to\n the enclosing \\f(CW\\*(C`if\\*(C'\\fR.  The resulting code would look like this:\n@@ -3010,7 +3010,9 @@ sets \\fB\\-fno-math-errno\\fR.\n .IX Item \"-funsafe-math-optimizations\"\n Allow optimizations for floating-point arithmetic that (a) assume\n that arguments and results are valid and (b) may violate \\s-1IEEE\\s0 or\n-\\&\\s-1ANSI\\s0 standards.\n+\\&\\s-1ANSI\\s0 standards.  When used at link-time, it may include libraries\n+or startup files that change the default \\s-1FPU\\s0 control word or other\n+similar optimizations.\n .Sp\n This option should never be turned on by any \\fB\\-O\\fR option since\n it can result in incorrect output for programs which depend on\n@@ -3739,7 +3741,7 @@ and searches several directories.\n .Ip \"\\fB\\-lobjc\\fR\" 4\n .IX Item \"-lobjc\"\n You need this special case of the \\fB\\-l\\fR option in order to\n-link an Objective C program.\n+link an Objective-C program.\n .Ip \"\\fB\\-nostartfiles\\fR\" 4\n .IX Item \"-nostartfiles\"\n Do not use the standard system startup files when linking.\n@@ -5114,12 +5116,12 @@ references.  In particular, a load instruction may execute before\n a preceding store instruction.  Such reordering violates\n sequential consistency of volatile memory references, when there\n are multiple processors.   When consistency must be guaranteed,\n-\\&\\s-1GNU\\s0 C generates special instructions, as needed, to force\n+\\&\\s-1GCC\\s0 generates special instructions, as needed, to force\n execution in the proper order.\n .Sp\n The \\s-1MC88100\\s0 processor does not reorder memory references and so\n-always provides sequential consistency.  However, by default, \\s-1GNU\\s0\n-C generates the special instructions to guarantee consistency\n+always provides sequential consistency.  However, by default, \\s-1GCC\\s0\n+generates the special instructions to guarantee consistency\n even when you use \\fB\\-m88100\\fR, so that the code may be run on an\n \\&\\s-1MC88110\\s0 processor.  If you intend to run your code only on the\n \\&\\s-1MC88100\\s0 processor, you may use \\fB\\-mno-serialize-volatile\\fR.\n@@ -5165,13 +5167,13 @@ zero will be detected.  By default, detection is guaranteed.\n .Sp\n Some models of the \\s-1MC88100\\s0 processor fail to trap upon integer\n division by zero under certain conditions.  By default, when\n-compiling code that might be run on such a processor, \\s-1GNU\\s0 C\n+compiling code that might be run on such a processor, \\s-1GCC\\s0\n generates code that explicitly checks for zero-valued divisors\n and traps with exception number 503 when one is detected.  Use of\n mno-check-zero-division suppresses such checking for code\n generated to run on an \\s-1MC88100\\s0 processor.\n .Sp\n-\\&\\s-1GNU\\s0 C assumes that the \\s-1MC88110\\s0 processor correctly detects all\n+\\&\\s-1GCC\\s0 assumes that the \\s-1MC88110\\s0 processor correctly detects all\n instances of integer division by zero.  When \\fB\\-m88110\\fR is\n specified, both \\fB\\-mcheck-zero-division\\fR and\n \\&\\fB\\-mno-check-zero-division\\fR are ignored, and no explicit checks for\n@@ -5185,7 +5187,7 @@ On the \\s-1MC88100\\s0 processor the signed integer division instruction\n div) traps to the operating system on a negative operand.  The\n operating system transparently completes the operation, but at a\n large cost in execution time.  By default, when compiling code\n-that might be run on an \\s-1MC88100\\s0 processor, \\s-1GNU\\s0 C emulates signed\n+that might be run on an \\s-1MC88100\\s0 processor, \\s-1GCC\\s0 emulates signed\n integer division using the unsigned integer division instruction\n divu), thereby avoiding the large penalty of a trap to the\n operating system.  Such emulation has its own, smaller, execution\n@@ -5400,7 +5402,7 @@ these options, specify \\fB\\-mminimal-toc\\fR instead.  This option causes\n \\&\\s-1GCC\\s0 to make only one \\s-1TOC\\s0 entry for every file.  When you specify this\n option, \\s-1GCC\\s0 will produce code that is slower and larger but which\n uses extremely little \\s-1TOC\\s0 space.  You may wish to use this option\n-only on files that contain less frequently executed code. \n+only on files that contain less frequently executed code.\n .Ip \"\\fB\\-maix64\\fR\" 4\n .IX Item \"-maix64\"\n .PD 0\n@@ -7556,10 +7558,10 @@ it.\n .Ip \"\\fB\\-fexceptions\\fR\" 4\n .IX Item \"-fexceptions\"\n Enable exception handling. Generates extra code needed to propagate\n-exceptions.  For some targets, this implies \\s-1GNU\\s0 \\s-1CC\\s0 will generate frame\n+exceptions.  For some targets, this implies \\s-1GCC\\s0 will generate frame\n unwind information for all functions, which can produce significant data\n size overhead, although it does not affect execution.  If you do not\n-specify this option, \\s-1GNU\\s0 \\s-1CC\\s0 will enable it by default for languages like\n+specify this option, \\s-1GCC\\s0 will enable it by default for languages like\n \\&\\*(C+ which normally require exception handling, and disable it for\n languages like C that do not normally require it.  However, you may need\n to enable this option when compiling C code that needs to interoperate\n@@ -7765,13 +7767,13 @@ stubs for every function you call, you might have to specify\n \\&\\fB\\-fcheck-memory-usage\\fR without \\fB\\-fprefix-function-name\\fR.\n .Sp\n If you specify this option, you can not use the \\f(CW\\*(C`asm\\*(C'\\fR or\n-\\&\\f(CW\\*(C`_\\|_asm_\\|_\\*(C'\\fR keywords in functions with memory checking enabled.  \\s-1GNU\\s0\n-\\&\\s-1CC\\s0 cannot understand what the \\f(CW\\*(C`asm\\*(C'\\fR statement may do, and therefore\n+\\&\\f(CW\\*(C`_\\|_asm_\\|_\\*(C'\\fR keywords in functions with memory checking enabled.  \\s-1GCC\\s0\n+cannot understand what the \\f(CW\\*(C`asm\\*(C'\\fR statement may do, and therefore\n cannot generate the appropriate code, so it will reject it.  However, if\n-you specify the function attribute \\f(CW\\*(C`no_check_memory_usage\\*(C'\\fR, \\s-1GNU\\s0 \\s-1CC\\s0 will disable memory checking within a\n+you specify the function attribute \\f(CW\\*(C`no_check_memory_usage\\*(C'\\fR, \\s-1GCC\\s0 will disable memory checking within a\n function; you may use \\f(CW\\*(C`asm\\*(C'\\fR statements inside such functions.  You\n may have an inline expansion of a non-checked function within a checked\n-function; in that case \\s-1GNU\\s0 \\s-1CC\\s0 will not generate checks for the inlined\n+function; in that case \\s-1GCC\\s0 will not generate checks for the inlined\n function's memory accesses.\n .Sp\n If you move your \\f(CW\\*(C`asm\\*(C'\\fR statements to non-checked inline functions\n@@ -7957,7 +7959,7 @@ names of the subprograms executed by the compiler.  No slash is added\n when this prefix is combined with the name of a subprogram, but you can\n specify a prefix that ends with a slash if you wish.\n .Sp\n-If \\fB\\s-1GCC_EXEC_PREFIX\\s0\\fR is not set, \\s-1GNU\\s0 \\s-1CC\\s0 will attempt to figure out\n+If \\fB\\s-1GCC_EXEC_PREFIX\\s0\\fR is not set, \\s-1GCC\\s0 will attempt to figure out\n an appropriate prefix to use based on the pathname it was invoked with.\n .Sp\n If \\s-1GCC\\s0 cannot find the subprogram using the specified prefix, it"}, {"sha": "9c706102e8e36b32235251c28fc1407ea2478c96", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -48,6 +48,12 @@\n @c - \"built-in\" as an adjective (\"built-in function\"), or sometimes\n @c   \"built in\", not \"builtin\" (which isn't a word).\n @c - \"front end\" as a noun, \"front-end\" as an adjective.\n+@c - \"GCC\" for the GNU Compiler Collection, both generally\n+@c   and as the GNU C Compiler in the context of compiling C;\n+@c   \"G++\" for the C++ compiler; \"gcc\" and \"g++\" (lowercase),\n+@c   marked up with @command, for the commands for compilation when the\n+@c   emphasis is on those; \"GNU C\" and \"GNU C++\" for language dialects;\n+@c   and try to avoid the older term \"GNU CC\".\n \n @macro gcctabopt{body}\n @code{\\body\\}\n@@ -468,7 +474,7 @@ program using the facilities of an operating system would normally be\n in a hosted implementation.\n \n @opindex ffreestanding\n-GNU CC aims towards being usable as a conforming freestanding\n+GCC aims towards being usable as a conforming freestanding\n implementation, or as the compiler for a conforming hosted\n implementation.  By default, it will act as the compiler for a hosted\n implementation, defining @code{__STDC_HOSTED__} as @code{1} and\n@@ -482,7 +488,7 @@ kernel, you may well still need to make your own arrangements for\n linking and startup.  @xref{C Dialect Options,,Options Controlling C\n Dialect}.\n \n-GNU CC does not provide the library facilities required only of hosted\n+GCC does not provide the library facilities required only of hosted\n implementations, nor yet all the facilities required by C99 of\n freestanding implementations; to use the facilities of a hosted\n environment, you will need to find them elsewhere (for example, in the\n@@ -542,9 +548,9 @@ where people's opinions differ as to what is best.\n \t\t\t   and with certain linkers, assemblers and debuggers.\n * External Bugs::\tProblems compiling certain programs.\n * Incompatibilities::   GCC is incompatible with traditional C.\n-* Fixed Headers::       GNU C uses corrected versions of system header files.\n+* Fixed Headers::       GCC uses corrected versions of system header files.\n                            This is necessary, but doesn't always work smoothly.\n-* Standard Libraries::  GNU C uses the system C library, which might not be\n+* Standard Libraries::  GCC uses the system C library, which might not be\n                            compliant with the ISO C standard.\n * Disappointments::     Regrettable things we can't change, but not quite bugs.\n * C++ Misunderstandings::     Common misunderstandings with GNU C++.\n@@ -622,16 +628,16 @@ compile environment.\n @node Interoperation\n @section Interoperation\n \n-This section lists various difficulties encountered in using GNU C or\n-GNU C++ together with other compilers or with the assemblers, linkers,\n+This section lists various difficulties encountered in using GCC\n+together with other compilers or with the assemblers, linkers,\n libraries and debuggers on certain systems.\n \n @itemize @bullet\n @item\n Objective-C does not work on the RS/6000.\n \n @item\n-GNU C++ does not do name mangling in the same way as other C++\n+G++ does not do name mangling in the same way as other C++\n compilers.  This means that object files compiled with one compiler\n cannot be used with another.\n \n@@ -724,8 +730,8 @@ argument of type @code{double} and passes this pointer of type\n @code{double *} to a function compiled with GCC, dereferencing the\n pointer may cause a fatal signal.\n \n-One way to solve this problem is to compile your entire program with GNU\n-CC.  Another solution is to modify the function that is compiled with\n+One way to solve this problem is to compile your entire program with GCC.\n+Another solution is to modify the function that is compiled with\n Sun CC to copy the argument into a local variable; local variables\n are always properly aligned.  A third solution is to modify the function\n that uses the pointer to dereference it via the following function\n@@ -1039,7 +1045,7 @@ MALLOC=gmalloc.o\n There are several noteworthy incompatibilities between GNU C and K&R\n (non-ISO) versions of C.  The @option{-traditional} option\n eliminates many of these incompatibilities, @emph{but not all}, by\n-telling GNU C to behave like a K&R C compiler.\n+telling GCC to behave like a K&R C compiler.\n \n @itemize @bullet\n @cindex string constants\n@@ -1126,7 +1132,7 @@ in it.\n If you use the @option{-W} option with the @option{-O} option, you will\n get a warning when GCC thinks such a problem might be possible.\n \n-The @option{-traditional} option directs GNU C to put variables in\n+The @option{-traditional} option directs GCC to put variables in\n the stack by default, rather than in registers, in functions that\n call @code{setjmp}.  This results in the behavior found in\n traditional C compilers.\n@@ -1162,7 +1168,7 @@ have the same scope as any other declaration in the same place.\n In some other C compilers, a @code{extern} declaration affects all the\n rest of the file even if it happens within a block.\n \n-The @option{-traditional} option directs GNU C to treat all @code{extern}\n+The @option{-traditional} option directs GCC to treat all @code{extern}\n declarations as global, like traditional compilers.\n \n @item\n@@ -1281,11 +1287,11 @@ union returning with the option @option{-fpcc-struct-return}.\n @cindex preprocessing tokens\n @cindex preprocessing numbers\n @item\n-GNU C complains about program fragments such as @samp{0x74ae-0x4000}\n+GCC complains about program fragments such as @samp{0x74ae-0x4000}\n which appear to be two hexadecimal constants separated by the minus\n operator.  Actually, this string is a single @dfn{preprocessing token}.\n Each such token must correspond to one token in C.  Since this does not,\n-GNU C prints an error message.  Although it may appear obvious that what\n+GCC prints an error message.  Although it may appear obvious that what\n is meant is an operator and two values, the ISO C standard specifically\n requires that this be treated as erroneous.\n \n@@ -2406,7 +2412,7 @@ mailing list, @email{gcc-patches@@gcc.gnu.org}.\n \n Please follow these guidelines so we can study your patches efficiently.\n If you don't follow these guidelines, your information might still be\n-useful, but using it will take extra work.  Maintaining GNU C is a lot\n+useful, but using it will take extra work.  Maintaining GCC is a lot\n of work in the best of circumstances, and we can't keep up unless you do\n your best to help.\n \n@@ -2845,8 +2851,8 @@ and variables in such libraries using lower case; this will work on VMS,\n but is not portable to other systems.  The compiler option @samp{/NAMES}\n also provides control over global name handling.\n \n-Function and variable names are handled somewhat differently with GNU\n-C++.  The GNU C++ compiler performs @dfn{name mangling} on function\n+Function and variable names are handled somewhat differently with G++.\n+The GNU C++ compiler performs @dfn{name mangling} on function\n names, which means that it adds information to the function name to\n describe the data types of the arguments that the function takes.  One\n result of this is that the name of a function can become very long."}, {"sha": "e2f1fa9cb6d30af287d49f1ec190087d44536136", "filename": "gcc/doc/gcov.1", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fgcov.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fgcov.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.1?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.16\n-.\\\" Thu Jun 14 10:58:24 2001\n+.\\\" Mon Jun 25 00:14:36 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -138,7 +138,7 @@\n .\\\" ======================================================================\n .\\\"\n .IX Title \"GCOV 1\"\n-.TH GCOV 1 \"gcc-3.1\" \"2001-06-14\" \"GNU\"\n+.TH GCOV 1 \"gcc-3.1\" \"2001-06-25\" \"GNU\"\n .UC\n .SH \"NAME\"\n gcov \\- coverage testing tool\n@@ -147,8 +147,8 @@ gcov \\- coverage testing tool\n gcov [\\fB\\-b\\fR] [\\fB\\-c\\fR] [\\fB\\-v\\fR] [\\fB\\-n\\fR] [\\fB\\-l\\fR] [\\fB\\-f\\fR] [\\fB\\-o\\fR \\fIdirectory\\fR] \\fIsourcefile\\fR\n .SH \"DESCRIPTION\"\n .IX Header \"DESCRIPTION\"\n-\\&\\fBgcov\\fR is a test coverage program.  Use it in concert with \\s-1GNU\\s0\n-\\&\\s-1CC\\s0 to analyze your programs to help create more efficient, faster\n+\\&\\fBgcov\\fR is a test coverage program.  Use it in concert with \\s-1GCC\\s0\n+to analyze your programs to help create more efficient, faster\n running code.  You can use \\fBgcov\\fR as a profiling tool to help\n discover where your optimization efforts will best affect your code.  You\n can also use \\fBgcov\\fR along with the other profiling tool,\n@@ -196,7 +196,7 @@ in fine-tuning the performance of your programs.  \\fBgprof\\fR gives\n timing information you can use along with the information you get from\n \\&\\fBgcov\\fR.\n .PP\n-\\&\\fBgcov\\fR works only on code compiled with \\s-1GNU\\s0 \\s-1CC\\s0.  It is not\n+\\&\\fBgcov\\fR works only on code compiled with \\s-1GCC\\s0.  It is not\n compatible with any other profiling or test coverage mechanism.\n .SH \"OPTIONS\"\n .IX Header \"OPTIONS\"\n@@ -231,7 +231,7 @@ The directory where the object files live.  Gcov will search for \\fI.bb\\fR,\n \\&\\fI.bbg\\fR, and \\fI.da\\fR files in this directory.\n .PP\n When using \\fBgcov\\fR, you must first compile your program with two\n-special \\s-1GNU\\s0 \\s-1CC\\s0 options: \\fB\\-fprofile-arcs \\-ftest-coverage\\fR.\n+special \\s-1GCC\\s0 options: \\fB\\-fprofile-arcs \\-ftest-coverage\\fR.\n This tells the compiler to generate additional information needed by\n gcov (basically a flow graph of the program) and also includes\n additional code in the object files for generating the extra profiling\n@@ -352,9 +352,9 @@ counts and finally writes the data to the file.\n .Sh \"Using \\fBgcov\\fP with \\s-1GCC\\s0 Optimization\"\n .IX Subsection \"Using gcov with GCC Optimization\"\n If you plan to use \\fBgcov\\fR to help optimize your code, you must\n-first compile your program with two special \\s-1GNU\\s0 \\s-1CC\\s0 options:\n+first compile your program with two special \\s-1GCC\\s0 options:\n \\&\\fB\\-fprofile-arcs \\-ftest-coverage\\fR.  Aside from that, you can use any\n-other \\s-1GNU\\s0 \\s-1CC\\s0 options; but if you want to prove that every single line\n+other \\s-1GCC\\s0 options; but if you want to prove that every single line\n in your program was executed, you should not compile with optimization\n at the same time.  On some machines the optimizer can eliminate some\n simple code lines by combining them with other lines.  For example, code"}, {"sha": "ddd78d8a1b9ee766385cad988b2ba98c2935d604", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -29,7 +29,7 @@ English.\n @node Gcov\n @chapter @command{gcov}: a Test Coverage Program\n \n-@command{gcov} is a tool you can use in conjunction with @sc{gnu} CC to\n+@command{gcov} is a tool you can use in conjunction with GCC to\n test code coverage in your programs.\n \n This chapter describes version 1.5 of @command{gcov}.\n@@ -45,8 +45,8 @@ This chapter describes version 1.5 of @command{gcov}.\n @section Introduction to @command{gcov}\n @c man begin DESCRIPTION\n \n-@command{gcov} is a test coverage program.  Use it in concert with @sc{gnu}\n-CC to analyze your programs to help create more efficient, faster\n+@command{gcov} is a test coverage program.  Use it in concert with GCC\n+to analyze your programs to help create more efficient, faster\n running code.  You can use @command{gcov} as a profiling tool to help\n discover where your optimization efforts will best affect your code.  You\n can also use @command{gcov} along with the other profiling tool,\n@@ -99,7 +99,7 @@ in fine-tuning the performance of your programs.  @command{gprof} gives\n timing information you can use along with the information you get from\n @command{gcov}.\n \n-@command{gcov} works only on code compiled with @sc{gnu} CC.  It is not\n+@command{gcov} works only on code compiled with GCC.  It is not\n compatible with any other profiling or test coverage mechanism.\n \n @c man end\n@@ -154,7 +154,7 @@ The directory where the object files live.  Gcov will search for @file{.bb},\n \n @need 3000\n When using @command{gcov}, you must first compile your program with two\n-special @sc{gnu} CC options: @samp{-fprofile-arcs -ftest-coverage}.\n+special GCC options: @samp{-fprofile-arcs -ftest-coverage}.\n This tells the compiler to generate additional information needed by\n gcov (basically a flow graph of the program) and also includes\n additional code in the object files for generating the extra profiling\n@@ -276,9 +276,9 @@ counts and finally writes the data to the file.\n @section Using @command{gcov} with GCC Optimization\n \n If you plan to use @command{gcov} to help optimize your code, you must\n-first compile your program with two special @sc{gnu} CC options:\n+first compile your program with two special GCC options:\n @samp{-fprofile-arcs -ftest-coverage}.  Aside from that, you can use any\n-other @sc{gnu} CC options; but if you want to prove that every single line\n+other GCC options; but if you want to prove that every single line\n in your program was executed, you should not compile with optimization\n at the same time.  On some machines the optimizer can eliminate some\n simple code lines by combining them with other lines.  For example, code\n@@ -322,7 +322,7 @@ of these files are placed in the same directory as the source file, and\n contain data stored in a platform-independent method.\n \n The @file{.bb} and @file{.bbg} files are generated when the source file\n-is compiled with the @sc{gnu} CC @option{-ftest-coverage} option.  The\n+is compiled with the GCC @option{-ftest-coverage} option.  The\n @file{.bb} file contains a list of source files (including headers),\n functions within those files, and line numbers corresponding to each\n basic block in the source file.\n@@ -364,7 +364,7 @@ list of basic blocks, and to verify that the file has been read\n correctly.\n \n The @file{.da} file is generated when a program containing object files\n-built with the @sc{gnu} CC @option{-fprofile-arcs} option is executed.  A\n+built with the GCC @option{-fprofile-arcs} option is executed.  A\n separate @file{.da} file is created for each source file compiled with\n this option, and the name of the @file{.da} file is stored as an\n absolute pathname in the resulting object file.  This path name is"}, {"sha": "8acea8a8bf7c25a5605489a9d5fd9ae96dd46201", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -33,7 +33,7 @@\n @settitle Installing GCC: Binaries\n @end ifset\n \n-@comment $Id: install.texi,v 1.32 2001/06/21 19:00:08 pme Exp $\n+@comment $Id: install.texi,v 1.33 2001/06/23 23:41:59 jsm28 Exp $\n @c Copyright (C) 2001 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n@@ -249,7 +249,7 @@ where @var{srcdir} == @var{objdir} should still work, but doesn't\n get extensive testing; building where @var{objdir} is a subdirectory\n of @var{srcdir} is unsupported.\n \n-If you have built GNU CC previously in the same directory for a\n+If you have built GCC previously in the same directory for a\n different target machine, do @samp{make distclean} to delete all files\n that might be invalid.  One of the files this deletes is\n @file{Makefile}; if @samp{make distclean} complains that @file{Makefile}\n@@ -643,7 +643,7 @@ of tree node types when referencing fields of that node, and some other\n internal consistency checks.  This does not change the generated code,\n but adds error checking within the compiler.  This will slow down the\n compiler and may only work properly if you are building the compiler\n-with GNU C.  This is on by default when building from CVS or snapshots,\n+with GCC.  This is on by default when building from CVS or snapshots,\n but off for releases.  More control over the checks may be had by\n specifying @var{list}; the categories of checks available are\n @samp{misc}, @samp{tree}, @samp{gc}, @samp{rtl} and @samp{gcac}.  The\n@@ -1422,7 +1422,7 @@ not yet implemented for the 1750A.)\n The @code{as1750} assembler requires the file @file{ms1750.inc}, which is\n found in the directory @file{config/1750a}.\n \n-GNU CC produced the same sections as the Fairchild F9450 C Compiler,\n+GCC produced the same sections as the Fairchild F9450 C Compiler,\n namely:\n \n @table @code\n@@ -1442,7 +1442,7 @@ Initialization section (code to copy KREL to SREL).\n The smallest addressable unit is 16 bits (BITS_PER_UNIT is 16).  This\n means that type @code{char} is represented with a 16-bit word per character.\n The 1750A's ``Load/Store Upper/Lower Byte'' instructions are not used by\n-GNU CC.\n+GCC.\n \n @html\n </p>\n@@ -1523,7 +1523,7 @@ or you can use a copy of GCC 2.95.3 or higher built on Tru64 UNIX V4.0:\n    % CC=gcc -Wa,-oldas @var{srcdir}/configure [@var{target}] [@var{options}]\n @end example\n \n-GNU CC writes a @samp{.verstamp} directive to the assembler output file\n+GCC writes a @samp{.verstamp} directive to the assembler output file\n unless it is built as a cross-compiler.  It gets the version to use from\n the system header file @file{/usr/include/stamp.h}.  If you install a\n new version of DEC Unix, you should rebuild GCC to pick up the new version\n@@ -1548,14 +1548,14 @@ unless the comparisons fail without that option.  If you add\n @option{-save-temps}, you will have to manually delete the @samp{.i} and\n @samp{.s} files after each series of compilations.\n \n-GNU CC now supports both the native (ECOFF) debugging format used by DBX\n+GCC now supports both the native (ECOFF) debugging format used by DBX\n and GDB and an encapsulated STABS format for use only with GDB.  See the\n discussion of the @option{--with-stabs} option of @file{configure} above\n for more information on these formats and how to select them.\n \n There is a bug in DEC's assembler that produces incorrect line numbers\n for ECOFF format when the @samp{.align} directive is used.  To work\n-around this problem, GNU CC will not emit such alignment directives\n+around this problem, GCC will not emit such alignment directives\n while writing ECOFF format debugging information even if optimization is\n being performed.  Unfortunately, this has the very undesirable\n side-effect that code addresses when @option{-O} is specified are\n@@ -1714,7 +1714,7 @@ compilers, you may need to add @option{-Wf,-XNg1500 -Olimit 3000}.\n \n Please have a look at our @uref{binaries.html,,binaries page}.\n \n-You cannot install GNU C by itself on MSDOS; it will not compile under\n+You cannot install GCC by itself on MSDOS; it will not compile under\n any MSDOS compiler except itself.  You need to get the complete\n compilation package DJGPP, which includes binaries as well as sources,\n and includes all the necessary compilation tools and libraries.\n@@ -1732,7 +1732,7 @@ A port to the AT&T DSP1610 family of processors.\n @end html\n @heading @anchor{elxsi-elxsi-bsd}elxsi-elxsi-bsd\n The Elxsi's C compiler has known limitations that prevent it from\n-compiling GNU C.  Please contact @email{mrs@@cygnus.com} for more details.\n+compiling GCC.  Please contact @email{mrs@@cygnus.com} for more details.\n \n @html\n </p>\n@@ -2160,11 +2160,11 @@ These problems don't exist in operating system version 1.1.\n <hr>\n @end html\n @heading @anchor{*-lynx-lynxos}*-lynx-lynxos\n-LynxOS 2.2 and earlier comes with GNU CC 1.x already installed as\n+LynxOS 2.2 and earlier comes with GCC 1.x already installed as\n @file{/bin/gcc}.  You should compile with this instead of @file{/bin/cc}.\n-You can tell GNU CC to use the GNU assembler and linker, by specifying\n+You can tell GCC to use the GNU assembler and linker, by specifying\n @samp{--with-gnu-as --with-gnu-ld} when configuring.  These will produce\n-COFF format object files and executables;  otherwise GNU CC will use the\n+COFF format object files and executables;  otherwise GCC will use the\n installed tools, which produce @file{a.out} format executables.\n \n @html\n@@ -2261,8 +2261,8 @@ This configuration is intended for embedded systems.\n @end html\n @heading @anchor{m68000-hp-bsd}m68000-hp-bsd\n HP 9000 series 200 running BSD.  Note that the C compiler that comes\n-with this system cannot compile GNU CC; contact @email{law@@cygnus.com}\n-to get binaries of GNU CC for bootstrapping.\n+with this system cannot compile GCC; contact @email{law@@cygnus.com}\n+to get binaries of GCC for bootstrapping.\n \n @html\n </p>\n@@ -2296,12 +2296,12 @@ Also, you must fix a kernel bug.  Details in the file @file{README.ALTOS}.\n Apple Macintosh running A/UX.\n You may configure GCC  to use either the system assembler and\n linker or the GNU assembler and linker.  You should use the GNU configuration\n-if you can, especially if you also want to use GNU C++.  You enabled\n+if you can, especially if you also want to use G++.  You enabled\n that configuration with + the @option{--with-gnu-as} and @option{--with-gnu-ld}\n options to @code{configure}.\n \n Note the C compiler that comes\n-with this system cannot compile GNU CC.  You can find binaries of GNU CC\n+with this system cannot compile GCC.  You can find binaries of GCC\n for bootstrapping on @code{jagubox.gsfc.nasa.gov}.\n You will also a patched version of @file{/bin/ld} there that\n raises some of the arbitrary limits found in the original.\n@@ -2311,7 +2311,7 @@ raises some of the arbitrary limits found in the original.\n <hr>\n @end html\n @heading @anchor{m68k-att-sysv}m68k-att-sysv\n-AT&T 3b1, a.k.a. 7300 PC.  This version of GNU CC cannot\n+AT&T 3b1, a.k.a. 7300 PC.  This version of GCC cannot\n be compiled with the system C compiler, which is too buggy.\n You will need to get a previous version of GCC and use it to\n bootstrap.  Binaries are available from the OSU-CIS archive, at\n@@ -2322,7 +2322,7 @@ bootstrap.  Binaries are available from the OSU-CIS archive, at\n <hr>\n @end html\n @heading @anchor{m68k-bull-sysv}m68k-bull-sysv\n-Bull DPX/2 series 200 and 300 with BOS-2.00.45 up to BOS-2.01. GNU CC works\n+Bull DPX/2 series 200 and 300 with BOS-2.00.45 up to BOS-2.01. GCC works\n either with native assembler or GNU assembler. You can use\n GNU assembler with native coff generation by providing @option{--with-gnu-as} to\n the configure script or use GNU assembler with dbx-in-coff encapsulation\n@@ -2339,7 +2339,7 @@ Use @samp{configure unos} for building on Unos.\n \n The Unos assembler is named @code{casm} instead of @code{as}.  For some\n strange reason linking @file{/bin/as} to @file{/bin/casm} changes the\n-behavior, and does not work.  So, when installing GNU CC, you should\n+behavior, and does not work.  So, when installing GCC, you should\n install the following script as @file{as} in the subdirectory where\n the passes of GCC are installed:\n \n@@ -2349,12 +2349,12 @@ casm $*\n @end example\n \n The default Unos library is named @file{libunos.a} instead of\n-@file{libc.a}.  To allow GNU CC to function, either change all\n+@file{libc.a}.  To allow GCC to function, either change all\n references to @option{-lc} in @file{gcc.c} to @option{-lunos} or link\n @file{/lib/libc.a} to @file{/lib/libunos.a}.\n \n @cindex @code{alloca}, for Unos\n-When compiling GNU CC with the standard compiler, to overcome bugs in\n+When compiling GCC with the standard compiler, to overcome bugs in\n the support of @code{alloca}, do not use @option{-O} when making stage 2.\n Then use the stage 2 compiler with @option{-O} to make the stage 3\n compiler.  This compiler will have the same characteristics as the usual\n@@ -2376,7 +2376,7 @@ and linking from that library.\n @end html\n @heading @anchor{m68k-hp-hpux}m68k-hp-hpux\n HP 9000 series 300 or 400 running HP-UX.  HP-UX version 8.0 has a bug in\n-the assembler that prevents compilation of GNU CC.  This\n+the assembler that prevents compilation of GCC.  This\n bug manifests itself during the first stage of compilation, while\n building @file{libgcc2.a}:\n \n@@ -2528,7 +2528,7 @@ compiler.  If the stage 3 and stage 4 object files are identical, this\n suggests you encountered a problem with the standard C compiler; the\n stage 3 and 4 compilers may be usable.\n \n-It is best, however, to use an older version of GNU CC for bootstrapping\n+It is best, however, to use an older version of GCC for bootstrapping\n if you have one.\n \n @html\n@@ -2703,7 +2703,7 @@ inhibit reordering.\n The @option{-noasmopt} option can be useful for testing whether a problem\n is due to erroneous assembler reordering.  Even if a problem does not go\n away with @option{-noasmopt}, it may still be due to assembler\n-reordering---perhaps GNU CC itself was miscompiled as a result.\n+reordering---perhaps GCC itself was miscompiled as a result.\n \n To enable debugging under Irix 5, you must use GNU as 2.5 or later,\n and use the @option{--with-gnu-as} configure option when configuring gcc.\n@@ -2838,8 +2838,8 @@ Go to the Berkeley universe before compiling.\n @end html\n @heading @anchor{ns32k-utek}ns32k-utek\n UTEK ns32000 system (``merlin'').  The C compiler that comes with this\n-system cannot compile GNU CC; contact @samp{tektronix!reed!mason} to get\n-binaries of GNU CC for bootstrapping.\n+system cannot compile GCC; contact @samp{tektronix!reed!mason} to get\n+binaries of GCC for bootstrapping.\n \n \n @html\n@@ -2942,8 +2942,8 @@ switch by using the configure option @option{--with-cpu-@var{cpu_type}}.\n @end html\n @heading @anchor{romp-*-aos}romp-*-aos, romp-*-mach\n The only operating systems supported for the IBM RT PC are AOS and\n-MACH.  GNU CC does not support AIX running on the RT.  We recommend you\n-compile GNU CC with an earlier version of itself; if you compile GNU CC\n+MACH.  GCC does not support AIX running on the RT.  We recommend you\n+compile GCC with an earlier version of itself; if you compile GCC\n with @code{hc}, the Metaware compiler, it will work, but you will get\n mismatches between the stage 2 and stage 3 compilers in various files.\n These errors are minor differences in some floating-point constants and\n@@ -3212,7 +3212,7 @@ system's linker seems to be unable to handle such a large program with\n debugging information.\n \n The system's compiler runs out of capacity when compiling @file{stmt.c}\n-in GNU CC.  You can work around this by building @file{cpp} in GNU CC\n+in GCC.  You can work around this by building @file{cpp} in GCC\n first, then use that instead of the system's preprocessor with the\n system's C compiler to compile @file{stmt.c}.  Here is how:\n \n@@ -3223,7 +3223,7 @@ echo '/lib/cpp.gnu -traditional $@{1+\"$@@\"@}' > /lib/cpp\n chmod +x /lib/cpp\n @end smallexample\n \n-The system's compiler produces bad code for some of the GNU CC\n+The system's compiler produces bad code for some of the GCC\n optimization files.  So you must build the stage 2 compiler without\n optimization.  Then build a stage 3 compiler with optimization.\n That executable should work.  Here are the necessary commands:"}, {"sha": "887817cf1ee8ac0177363212c695b43a03c6e3d2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -904,7 +904,7 @@ programs that might use these names for other things.\n Functions which would normally be built in but do not have semantics\n defined by ISO C (such as @code{alloca} and @code{ffs}) are not built-in\n functions with @option{-ansi} is used.  @xref{Other Builtins,,Other\n-built-in functions provided by GNU CC}, for details of the functions\n+built-in functions provided by GCC}, for details of the functions\n affected.\n \n @item -std=\n@@ -994,7 +994,7 @@ switch only affects the @code{asm} and @code{typeof} keywords, since\n @cindex built-in functions\n Don't recognize built-in functions that do not begin with\n @samp{__builtin_} as prefix.  @xref{Other Builtins,,Other built-in\n-functions provided by GNU CC}, for details of the functions affected,\n+functions provided by GCC}, for details of the functions affected,\n including those which are not built-in functions when @option{-ansi} or\n @option{-std} options for strict ISO C conformance are used because they\n do not have an ISO standard meaning.\n@@ -1934,7 +1934,7 @@ In C, every @code{else} branch belongs to the innermost possible @code{if}\n statement, which in this example is @code{if (b)}.  This is often not\n what the programmer expected, as illustrated in the above example by\n indentation the programmer chose.  When there is the potential for this\n-confusion, GNU C will issue a warning when this flag is specified.\n+confusion, GCC will issue a warning when this flag is specified.\n To eliminate the warning, add explicit braces around the innermost\n @code{if} statement so there is no way the @code{else} could belong to\n the enclosing @code{if}.  The resulting code would look like this:\n@@ -6303,12 +6303,12 @@ references.  In particular, a load instruction may execute before\n a preceding store instruction.  Such reordering violates\n sequential consistency of volatile memory references, when there\n are multiple processors.   When consistency must be guaranteed,\n-GNU C generates special instructions, as needed, to force\n+GCC generates special instructions, as needed, to force\n execution in the proper order.\n \n The MC88100 processor does not reorder memory references and so\n-always provides sequential consistency.  However, by default, GNU\n-C generates the special instructions to guarantee consistency\n+always provides sequential consistency.  However, by default, GCC\n+generates the special instructions to guarantee consistency\n even when you use @option{-m88100}, so that the code may be run on an\n MC88110 processor.  If you intend to run your code only on the\n MC88100 processor, you may use @option{-mno-serialize-volatile}.\n@@ -6356,13 +6356,13 @@ zero will be detected.  By default, detection is guaranteed.\n \n Some models of the MC88100 processor fail to trap upon integer\n division by zero under certain conditions.  By default, when\n-compiling code that might be run on such a processor, GNU C\n+compiling code that might be run on such a processor, GCC\n generates code that explicitly checks for zero-valued divisors\n and traps with exception number 503 when one is detected.  Use of\n mno-check-zero-division suppresses such checking for code\n generated to run on an MC88100 processor.\n \n-GNU C assumes that the MC88110 processor correctly detects all\n+GCC assumes that the MC88110 processor correctly detects all\n instances of integer division by zero.  When @option{-m88110} is\n specified, both @option{-mcheck-zero-division} and\n @option{-mno-check-zero-division} are ignored, and no explicit checks for\n@@ -6378,7 +6378,7 @@ On the MC88100 processor the signed integer division instruction\n div) traps to the operating system on a negative operand.  The\n operating system transparently completes the operation, but at a\n large cost in execution time.  By default, when compiling code\n-that might be run on an MC88100 processor, GNU C emulates signed\n+that might be run on an MC88100 processor, GCC emulates signed\n integer division using the unsigned integer division instruction\n divu), thereby avoiding the large penalty of a trap to the\n operating system.  Such emulation has its own, smaller, execution\n@@ -8925,10 +8925,10 @@ it.\n @item -fexceptions\n @opindex fexceptions\n Enable exception handling. Generates extra code needed to propagate\n-exceptions.  For some targets, this implies GNU CC will generate frame\n+exceptions.  For some targets, this implies GCC will generate frame\n unwind information for all functions, which can produce significant data\n size overhead, although it does not affect execution.  If you do not\n-specify this option, GNU CC will enable it by default for languages like\n+specify this option, GCC will enable it by default for languages like\n C++ which normally require exception handling, and disable it for\n languages like C that do not normally require it.  However, you may need\n to enable this option when compiling C code that needs to interoperate\n@@ -9158,14 +9158,14 @@ stubs for every function you call, you might have to specify\n @option{-fcheck-memory-usage} without @option{-fprefix-function-name}.\n \n If you specify this option, you can not use the @code{asm} or\n-@code{__asm__} keywords in functions with memory checking enabled.  GNU\n-CC cannot understand what the @code{asm} statement may do, and therefore\n+@code{__asm__} keywords in functions with memory checking enabled.  GCC\n+cannot understand what the @code{asm} statement may do, and therefore\n cannot generate the appropriate code, so it will reject it.  However, if\n you specify the function attribute @code{no_check_memory_usage}\n-(@pxref{Function Attributes}), GNU CC will disable memory checking within a\n+(@pxref{Function Attributes}), GCC will disable memory checking within a\n function; you may use @code{asm} statements inside such functions.  You\n may have an inline expansion of a non-checked function within a checked\n-function; in that case GNU CC will not generate checks for the inlined\n+function; in that case GCC will not generate checks for the inlined\n function's memory accesses.\n \n If you move your @code{asm} statements to non-checked inline functions\n@@ -9385,7 +9385,7 @@ names of the subprograms executed by the compiler.  No slash is added\n when this prefix is combined with the name of a subprogram, but you can\n specify a prefix that ends with a slash if you wish.\n \n-If @env{GCC_EXEC_PREFIX} is not set, GNU CC will attempt to figure out\n+If @env{GCC_EXEC_PREFIX} is not set, GCC will attempt to figure out\n an appropriate prefix to use based on the pathname it was invoked with.\n \n If GCC cannot find the subprogram using the specified prefix, it\n@@ -9484,7 +9484,7 @@ recognize and translate multibyte characters.\n @node Running Protoize\n @section Running Protoize\n \n-The program @code{protoize} is an optional part of GNU C.  You can use\n+The program @code{protoize} is an optional part of GCC.  You can use\n it to add prototypes to a program, thus converting the program to ISO\n C in one respect.  The companion program @code{unprotoize} does the\n reverse: it removes argument types from any prototypes that are found."}, {"sha": "9713c909dcb2a35c9d51d1f95180d9ca851865e1", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -271,7 +271,7 @@ it is valid for mode @var{m}.\n For an operand that must be a register, @var{predicate} should be\n @code{\"register_operand\"}.  Using @code{\"general_operand\"} would be\n valid, since the reload pass would copy any non-register operands\n-through registers, but this would make GNU CC do extra work, it would\n+through registers, but this would make GCC do extra work, it would\n prevent invariant operands (such as constant) from being removed from\n loops, and it would prevent the register allocator from doing the best\n possible job.  On RISC machines, it is usually most efficient to allow\n@@ -2803,7 +2803,7 @@ the third is the address of a location where the stack is saved,\n and the last is the address of the label, to be placed in the\n location for the incoming static chain.\n \n-On most machines you need not define this pattern, since GNU CC will\n+On most machines you need not define this pattern, since GCC will\n already generate the correct code, which is to load the frame pointer\n and static chain, restore the stack (using the\n @samp{restore_stack_nonlocal} pattern, if defined), and jump indirectly\n@@ -2813,7 +2813,7 @@ not work on your machine.\n @cindex @code{nonlocal_goto_receiver} instruction pattern\n @item @samp{nonlocal_goto_receiver}\n This pattern, if defined, contains code needed at the target of a\n-nonlocal goto after the code already generated by GNU CC.  You will not\n+nonlocal goto after the code already generated by GCC.  You will not\n normally need to define this pattern.  A typical reason why you might\n need this pattern is if some value, such as a pointer to a global table,\n must be restored when the frame pointer is restored.  Note that a nonlocal\n@@ -3051,7 +3051,7 @@ generating the appropriate machine instruction.\n @cindex jump instruction patterns\n @cindex defining jump instruction patterns\n \n-For most machines, GNU CC assumes that the machine has a condition code.\n+For most machines, GCC assumes that the machine has a condition code.\n A comparison insn sets the condition code, recording the results of both\n signed and unsigned comparison of the given operands.  A separate branch\n insn tests the condition code and branches or not according its value.\n@@ -3070,7 +3070,7 @@ the RTL says that is an unsigned branch, output an unsigned compare;\n otherwise output a signed compare.  When the branch itself is output, you\n can treat signed and unsigned branches identically.\n \n-The reason you can do this is that GNU CC always generates a pair of\n+The reason you can do this is that GCC always generates a pair of\n consecutive RTL insns, possibly separated by @code{note} insns, one to\n set the condition code and one to test it, and keeps the pair inviolate\n until the end.\n@@ -3176,7 +3176,7 @@ iterations.  This avoids the need for fetching and executing a\n @samp{dbra}-like instruction and avoids pipeline stalls associated with\n the jump.\n \n-GNU CC has three special named patterns to support low overhead looping,\n+GCC has three special named patterns to support low overhead looping,\n @samp{decrement_and_branch_until_zero}, @samp{doloop_begin}, and\n @samp{doloop_end}.  The first pattern,\n @samp{decrement_and_branch_until_zero}, is not emitted during RTL\n@@ -3412,8 +3412,8 @@ is no implicit surrounding @code{PARALLEL}.\n @item\n The condition, a string containing a C expression.  This expression is\n used to express how the availability of this pattern depends on\n-subclasses of target machine, selected by command-line options when GNU\n-CC is run.  This is just like the condition of a @code{define_insn} that\n+subclasses of target machine, selected by command-line options when GCC\n+is run.  This is just like the condition of a @code{define_insn} that\n has a standard name.  Therefore, the condition (if present) may not\n depend on the data in the insn being matched, but only the\n target-machine-type flags.  The compiler needs to test these conditions\n@@ -3443,7 +3443,7 @@ is used.  In particular, it gives a predicate for each operand.\n A true operand, which needs to be specified in order to generate RTL from\n the pattern, should be described with a @code{match_operand} in its first\n occurrence in the RTL template.  This enters information on the operand's\n-predicate into the tables that record such things.  GNU CC uses the\n+predicate into the tables that record such things.  GCC uses the\n information to preload the operand into a register if that is required for\n valid RTL code.  If the operand is referred to more than once, subsequent\n references should use @code{match_dup}."}, {"sha": "50324fc9bf3e22b776b3a2dd69c7f31a7edbe666", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -546,7 +546,7 @@ field and printed as @samp{/s}.\n @item CONSTANT_POOL_ADDRESS_P (@var{x})\n Nonzero in a @code{symbol_ref} if it refers to part of the current\n function's ``constants pool''.  These are addresses close to the\n-beginning of the function, and GNU CC assumes they can be addressed\n+beginning of the function, and GCC assumes they can be addressed\n directly (perhaps with the help of base registers).  Stored in the\n @code{unchanging} field and printed as @samp{/u}.\n \n@@ -977,7 +977,7 @@ Similarly, there is only one object for the integer whose value is\n @item (const_double:@var{m} @var{addr} @var{i0} @var{i1} @dots{})\n Represents either a floating-point constant of mode @var{m} or an\n integer constant too large to fit into @code{HOST_BITS_PER_WIDE_INT}\n-bits but small enough to fit within twice that number of bits (GNU CC\n+bits but small enough to fit within twice that number of bits (GCC\n does not provide a mechanism to represent even larger constants).  In\n the latter case, @var{m} will be @code{VOIDmode}.\n \n@@ -2093,7 +2093,7 @@ insn.  However, the reload phase may allocate a register used for one of\n the inputs unless the @samp{&} constraint is specified for the selected\n alternative (@pxref{Modifiers}).  You can clobber either a specific hard\n register, a pseudo register, or a @code{scratch} expression; in the\n-latter two cases, GNU CC will allocate a hard register that is available\n+latter two cases, GCC will allocate a hard register that is available\n there for use as a temporary.\n \n For instructions that require a temporary register, you should use\n@@ -3189,14 +3189,14 @@ problem since reading RTL occurs only as part of building the\n compiler.\n \n People frequently have the idea of using RTL stored as text in a file as\n-an interface between a language front end and the bulk of GNU CC.  This\n+an interface between a language front end and the bulk of GCC.  This\n idea is not feasible.\n \n-GNU CC was designed to use RTL internally only.  Correct RTL for a given\n+GCC was designed to use RTL internally only.  Correct RTL for a given\n program is very dependent on the particular target machine.  And the RTL\n does not contain all the information about the program.\n \n-The proper way to interface GNU CC to a new language front end is with\n+The proper way to interface GCC to a new language front end is with\n the ``tree'' data structure, described in the files @file{tree.h} and\n @file{tree.def}.  The documentation for this structure (@pxref{Trees})\n is incomplete."}, {"sha": "68064458dd326ef88439265fc85433bc5a81d204", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0523f020a20bea82110237521681b099697150f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f0523f020a20bea82110237521681b099697150f", "patch": "@@ -6816,8 +6816,8 @@ fprintf (@var{stream}, \"\\t.word L%d-L%d\\n\",\n @end example\n \n You must provide this macro on machines where the addresses in a\n-dispatch table are relative to the table's own address.  If defined, GNU\n-CC will also use this macro on all machines when producing PIC.\n+dispatch table are relative to the table's own address.  If defined, GCC\n+will also use this macro on all machines when producing PIC.\n @var{body} is the body of the ADDR_DIFF_VEC; it is provided so that the\n mode and flags can be read.\n \n@@ -7256,14 +7256,14 @@ first.\n @item DBX_BLOCKS_FUNCTION_RELATIVE\n Define this macro if the value of a symbol describing the scope of a\n block (@code{N_LBRAC} or @code{N_RBRAC}) should be relative to the start\n-of the enclosing function.  Normally, GNU C uses an absolute address.\n+of the enclosing function.  Normally, GCC uses an absolute address.\n \n @findex DBX_USE_BINCL\n @item DBX_USE_BINCL\n-Define this macro if GNU C should generate @code{N_BINCL} and\n+Define this macro if GCC should generate @code{N_BINCL} and\n @code{N_EINCL} stabs for included header files, as on Sun systems.  This\n-macro also directs GNU C to output a type number as a pair of a file\n-number and a type number within the file.  Normally, GNU C does not\n+macro also directs GCC to output a type number as a pair of a file\n+number and a type number within the file.  Normally, GCC does not\n generate @code{N_BINCL} or @code{N_EINCL} stabs, and it outputs a single\n number for a type number.\n @end table"}]}