{"sha": "8998be203171c0f305386fa12306aa282ddb5d06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5OGJlMjAzMTcxYzBmMzA1Mzg2ZmExMjMwNmFhMjgyZGRiNWQwNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2006-11-15T15:46:42Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2006-11-15T15:46:42Z"}, "message": "re PR fortran/27546 (IMPORT is broken)\n\nfortran/\n2006-11-15  Tobias Burnus  <burnus@net-b.de>\n\n       PR fortran/27546\n       * decl.c (gfc_match_import,variable_decl):\n         Add IMPORT support.\n         (gfc_match_kind_spec): Fix typo in gfc_error.\n       * gfortran.h (gfc_namespace, gfc_statement):\n         Add IMPORT support.\n       * parse.c (decode_statement,gfc_ascii_statement,\n         verify_st_order): Add IMPORT support.\n       * match.h: Add gfc_match_import.\n       * gfortran.texi: Add IMPORT to the supported\n         Fortran 2003 features.\n\ntestsuite/\n 2006-11-15  Tobias Burnus  <burnus@net-b.de>\n\n       PR fortran/27546\n       * gfortran.dg/import.f90: New test.\n       * gfortran.dg/import2.f90: New test.\n       * gfortran.dg/import3.f90: New test.\n\nFrom-SVN: r118857", "tree": {"sha": "72938501a423f4774c1cefa48f17941af90b4ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72938501a423f4774c1cefa48f17941af90b4ee7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8998be203171c0f305386fa12306aa282ddb5d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8998be203171c0f305386fa12306aa282ddb5d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8998be203171c0f305386fa12306aa282ddb5d06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8998be203171c0f305386fa12306aa282ddb5d06/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd5f63f83e862faee09a5a02bd417438a81ef8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd5f63f83e862faee09a5a02bd417438a81ef8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd5f63f83e862faee09a5a02bd417438a81ef8a1"}], "stats": {"total": 293, "additions": 287, "deletions": 6}, "files": [{"sha": "b91b64b9f7dead8422d20b8ad7c238f4c65e3f0c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8998be203171c0f305386fa12306aa282ddb5d06", "patch": "@@ -1,3 +1,17 @@\n+2006-11-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/27546\n+\t* decl.c (gfc_match_import,variable_decl):\n+\t  Add IMPORT support.\n+\t  (gfc_match_kind_spec): Fix typo in gfc_error.\n+\t* gfortran.h (gfc_namespace, gfc_statement):\n+\t  Add IMPORT support.\n+\t* parse.c (decode_statement,gfc_ascii_statement,\n+\t  verify_st_order): Add IMPORT support.\n+\t* match.h: Add gfc_match_import.\n+\t* gfortran.texi: Add IMPORT to the supported\n+\t  Fortran 2003 features.\n+\n 2006-11-15  Tobias Burnus  <burnus@net-b.de>\n \t    Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n "}, {"sha": "ae4271c9cc2a3c9e852aaa649fbf88879cc8737f", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 93, "deletions": 2, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=8998be203171c0f305386fa12306aa282ddb5d06", "patch": "@@ -1220,7 +1220,8 @@ variable_decl (int elem)\n   if (current_ts.type == BT_DERIVED\n \t&& gfc_current_ns->proc_name\n \t&& gfc_current_ns->proc_name->attr.if_source == IFSRC_IFBODY\n-\t&& current_ts.derived->ns != gfc_current_ns)\n+\t&& current_ts.derived->ns != gfc_current_ns\n+\t&& !gfc_current_ns->has_import_set)\n     {\n       gfc_error (\"the type of '%s' at %C has not been declared within the \"\n \t\t \"interface\", name);\n@@ -1483,7 +1484,7 @@ gfc_match_kind_spec (gfc_typespec * ts)\n \n   if (gfc_match_char (')') != MATCH_YES)\n     {\n-      gfc_error (\"Missing right paren at %C\");\n+      gfc_error (\"Missing right parenthesis at %C\");\n       goto no_match;\n     }\n \n@@ -2005,6 +2006,96 @@ gfc_match_implicit (void)\n   return MATCH_ERROR;\n }\n \n+match\n+gfc_match_import (void)\n+{\n+  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  match m;\n+  gfc_symbol *sym;\n+  gfc_symtree *st;\n+\n+  if (gfc_current_ns->proc_name == NULL ||\n+      gfc_current_ns->proc_name->attr.if_source != IFSRC_IFBODY)\n+    {\n+      gfc_error (\"IMPORT statement at %C only permitted in \"\n+\t\t \"an INTERFACE body\");\n+      return MATCH_ERROR;\n+    }\n+\n+  if (gfc_notify_std (GFC_STD_F2003, \n+\t\t      \"Fortran 2003: IMPORT statement at %C\")\n+      == FAILURE)\n+    return MATCH_ERROR;\n+\n+  if (gfc_match_eos () == MATCH_YES)\n+    {\n+      /* All host variables should be imported.  */\n+      gfc_current_ns->has_import_set = 1;\n+      return MATCH_YES;\n+    }\n+\n+  if (gfc_match (\" ::\") == MATCH_YES)\n+    {\n+      if (gfc_match_eos () == MATCH_YES)\n+        {\n+           gfc_error (\"Expecting list of named entities at %C\");\n+           return MATCH_ERROR;\n+        }\n+    }\n+\n+  for(;;)\n+    {\n+      m = gfc_match (\" %n\", name);\n+      switch (m)\n+\t{\n+\tcase MATCH_YES:\n+          if (gfc_find_symbol (name, gfc_current_ns->parent, 1, &sym))\n+            {\n+               gfc_error (\"Type name '%s' at %C is ambiguous\", name);\n+               return MATCH_ERROR;\n+            }\n+\n+          if (sym == NULL)\n+            {\n+              gfc_error (\"Cannot IMPORT '%s' from host scoping unit \"\n+                         \"at %C - does not exist.\", name);\n+              return MATCH_ERROR;\n+            }\n+\n+          if (gfc_find_symtree (gfc_current_ns->sym_root,name)) \n+            {\n+              gfc_warning (\"'%s' is already IMPORTed from host scoping unit \"\n+                           \"at %C.\", name);\n+              goto next_item;\n+            }\n+\n+          st = gfc_new_symtree (&gfc_current_ns->sym_root, name);\n+          st->n.sym = sym;\n+          sym->refs++;\n+          sym->ns = gfc_current_ns;\n+\n+\t  goto next_item;\n+\n+\tcase MATCH_NO:\n+\t  break;\n+\n+\tcase MATCH_ERROR:\n+\t  return MATCH_ERROR;\n+\t}\n+\n+    next_item:\n+      if (gfc_match_eos () == MATCH_YES)\n+\tbreak;\n+      if (gfc_match_char (',') != MATCH_YES)\n+\tgoto syntax;\n+    }\n+\n+  return MATCH_YES;\n+\n+syntax:\n+  gfc_error (\"Syntax error in IMPORT statement at %C\");\n+  return MATCH_ERROR;\n+}\n \n /* Matches an attribute specification including array specs.  If\n    successful, leaves the variables current_attr and current_as"}, {"sha": "e5d32f6a6eebe6d357175b33283610f7415e343b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=8998be203171c0f305386fa12306aa282ddb5d06", "patch": "@@ -221,7 +221,7 @@ typedef enum\n   ST_END_INTERFACE, ST_END_MODULE, ST_END_PROGRAM, ST_END_SELECT,\n   ST_END_SUBROUTINE, ST_END_WHERE, ST_END_TYPE, ST_ENTRY, ST_EQUIVALENCE,\n   ST_EXIT, ST_FORALL, ST_FORALL_BLOCK, ST_FORMAT, ST_FUNCTION, ST_GOTO,\n-  ST_IF_BLOCK, ST_IMPLICIT, ST_IMPLICIT_NONE, ST_INQUIRE, ST_INTERFACE,\n+  ST_IF_BLOCK, ST_IMPLICIT, ST_IMPLICIT_NONE, ST_IMPORT, ST_INQUIRE, ST_INTERFACE,\n   ST_PARAMETER, ST_MODULE, ST_MODULE_PROC, ST_NAMELIST, ST_NULLIFY, ST_OPEN,\n   ST_PAUSE, ST_PRIVATE, ST_PROGRAM, ST_PUBLIC, ST_READ, ST_RETURN, ST_REWIND,\n   ST_STOP, ST_SUBROUTINE, ST_TYPE, ST_USE, ST_WHERE_BLOCK, ST_WHERE, ST_WRITE,\n@@ -1007,6 +1007,9 @@ typedef struct gfc_namespace\n \n   /* Set to 1 if namespace is a BLOCK DATA program unit.  */\n   int is_block_data;\n+\n+  /* Set to 1 if namespace is an interface body with \"IMPORT\" used.  */\n+  int has_import_set;\n }\n gfc_namespace;\n "}, {"sha": "023ed80819d6c1204955a0985cf23b94167bebf8", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=8998be203171c0f305386fa12306aa282ddb5d06", "patch": "@@ -1387,6 +1387,11 @@ Namelist input/output for internal files.\n @cindex @code{VOLATILE}\n The @code{VOLATILE} statement and attribute.\n \n+@item\n+@cindex @code{IMPORT}\n+The @code{IMPORT} statement, allowing to import\n+host-associated derived types.\n+\n \n @end itemize\n "}, {"sha": "8a8ab99d4371ef20aed4b565515c292e768167db", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=8998be203171c0f305386fa12306aa282ddb5d06", "patch": "@@ -136,6 +136,7 @@ void gfc_set_constant_character_len (int, gfc_expr *);\n match gfc_match_allocatable (void);\n match gfc_match_dimension (void);\n match gfc_match_external (void);\n+match gfc_match_import (void);\n match gfc_match_intent (void);\n match gfc_match_intrinsic (void);\n match gfc_match_optional (void);"}, {"sha": "cff00d5c0c303417c8c62b7d9c9aa71c50ceb999", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=8998be203171c0f305386fa12306aa282ddb5d06", "patch": "@@ -229,6 +229,7 @@ decode_statement (void)\n       match (\"inquire\", gfc_match_inquire, ST_INQUIRE);\n       match (\"implicit\", gfc_match_implicit, ST_IMPLICIT);\n       match (\"implicit% none\", gfc_match_implicit_none, ST_IMPLICIT_NONE);\n+      match (\"import\", gfc_match_import, ST_IMPORT);\n       match (\"interface\", gfc_match_interface, ST_INTERFACE);\n       match (\"intent\", gfc_match_intent, ST_ATTR_DECL);\n       match (\"intrinsic\", gfc_match_intrinsic, ST_ATTR_DECL);\n@@ -1038,6 +1039,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_IMPLIED_ENDDO:\n       p = _(\"implied END DO\");\n       break;\n+    case ST_IMPORT:\n+      p = \"IMPORT\";\n+      break;\n     case ST_INQUIRE:\n       p = \"INQUIRE\";\n       break;\n@@ -1352,7 +1356,9 @@ unexpected_statement (gfc_statement st)\n             | program  subroutine  function  module |\n             +---------------------------------------+\n             |                 use                   |\n-            |---------------------------------------+\n+            +---------------------------------------+\n+            |                 import                |\n+            +---------------------------------------+\n             |        |        implicit none         |\n             |        +-----------+------------------+\n             |        | parameter |  implicit        |\n@@ -1376,8 +1382,8 @@ unexpected_statement (gfc_statement st)\n typedef struct\n {\n   enum\n-  { ORDER_START, ORDER_USE, ORDER_IMPLICIT_NONE, ORDER_IMPLICIT,\n-    ORDER_SPEC, ORDER_EXEC\n+  { ORDER_START, ORDER_USE, ORDER_IMPORT, ORDER_IMPLICIT_NONE,\n+    ORDER_IMPLICIT, ORDER_SPEC, ORDER_EXEC\n   }\n   state;\n   gfc_statement last_statement;\n@@ -1401,6 +1407,12 @@ verify_st_order (st_state * p, gfc_statement st)\n       p->state = ORDER_USE;\n       break;\n \n+    case ST_IMPORT:\n+      if (p->state > ORDER_IMPORT)\n+\tgoto order;\n+      p->state = ORDER_IMPORT;\n+      break;\n+\n     case ST_IMPLICIT_NONE:\n       if (p->state > ORDER_IMPLICIT_NONE)\n \tgoto order;\n@@ -1820,6 +1832,7 @@ parse_spec (gfc_statement st)\n       /* Fall through */\n \n     case ST_USE:\n+    case ST_IMPORT:\n     case ST_IMPLICIT_NONE:\n     case ST_IMPLICIT:\n     case ST_PARAMETER:"}, {"sha": "00b4096473cd1c38e539f1d9ab8e0db0e73e766b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8998be203171c0f305386fa12306aa282ddb5d06", "patch": "@@ -1,3 +1,10 @@\n+2006-11-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/27546\n+\t* gfortran.dg/import.f90: New test.\n+\t* gfortran.dg/import2.f90: New test.\n+\t* gfortran.dg/import3.f90: New test.\n+\n 2006-11-15  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/27588"}, {"sha": "5d2b7149ae803cfe50df1322ac4900d0e72ead32", "filename": "gcc/testsuite/gfortran.dg/import.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport.f90?ref=8998be203171c0f305386fa12306aa282ddb5d06", "patch": "@@ -0,0 +1,56 @@\n+! { dg-do run }\n+! Test whether import works\n+! PR fortran/29601\n+\n+subroutine test(x)\n+  type myType3\n+    sequence\n+    integer :: i\n+  end type myType3\n+  type(myType3) :: x\n+  if(x%i /= 7) call abort()\n+  x%i = 1\n+end subroutine test\n+\n+\n+subroutine bar(x)\n+  type myType\n+    sequence\n+    integer :: i\n+  end type myType\n+  type(myType) :: x\n+  if(x%i /= 2) call abort()\n+  x%i = 5\n+end subroutine bar\n+\n+\n+program foo\n+  type myType\n+    sequence\n+    integer :: i\n+  end type myType\n+  type myType3\n+    sequence\n+    integer :: i\n+  end type myType3\n+  interface\n+    subroutine bar(x)\n+      import\n+      type(myType) :: x\n+    end subroutine bar\n+    subroutine test(x)\n+      import :: myType3\n+      import myType3 ! { dg-warning \"already IMPORTed from\" }\n+      type(myType3) :: x\n+    end subroutine test\n+  end interface\n+\n+  type(myType) :: y\n+  type(myType3) :: z\n+  y%i = 2\n+  call bar(y)\n+  if(y%i /= 5) call abort()\n+  z%i = 7\n+  call test(z)\n+  if(z%i /= 1) call abort()\n+end program foo"}, {"sha": "340bc5193351223e9c459463a9cc11afd8794880", "filename": "gcc/testsuite/gfortran.dg/import2.f90", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport2.f90?ref=8998be203171c0f305386fa12306aa282ddb5d06", "patch": "@@ -0,0 +1,58 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+! { dg-shouldfail \"Fortran 2003 feature with -std=f95\" }\n+! Test whether import does not work with -std=f95\n+! PR fortran/29601\n+\n+subroutine test(x)\n+  type myType3\n+    sequence\n+    integer :: i\n+  end type myType3\n+  type(myType3) :: x\n+  if(x%i /= 7) call abort()\n+  x%i = 1\n+end subroutine test\n+\n+\n+subroutine bar(x)\n+  type myType\n+    sequence\n+    integer :: i\n+  end type myType\n+  type(myType) :: x\n+  if(x%i /= 2) call abort()\n+  x%i = 5\n+end subroutine bar\n+\n+\n+program foo\n+  type myType\n+    sequence\n+    integer :: i\n+  end type myType\n+  type myType3\n+    sequence\n+    integer :: i\n+  end type myType3\n+  interface\n+    subroutine bar(x)\n+      import ! { dg-error \"Fortran 2003: IMPORT statement\" }\n+      type(myType) :: x ! { dg-error \"not been declared within the interface\" }\n+    end subroutine bar\n+    subroutine test(x)\n+      import :: myType3 ! { dg-error \"Fortran 2003: IMPORT statement\" }\n+      import myType3 ! { dg-error \"Fortran 2003: IMPORT statement\" }\n+      type(myType3) :: x ! { dg-error \"not been declared within the interface\" }\n+    end subroutine test\n+  end interface\n+\n+  type(myType) :: y\n+  type(myType3) :: z\n+  y%i = 2\n+  call bar(y) ! { dg-error \"Type/rank mismatch in argument\" }\n+  if(y%i /= 5) call abort()\n+  z%i = 7\n+  call test(z) ! { dg-error \"Type/rank mismatch in argument\" }\n+  if(z%i /= 1) call abort()\n+end program foo"}, {"sha": "911c0c86f3cd2491c049e5ea1c0c60c200b96a4a", "filename": "gcc/testsuite/gfortran.dg/import3.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8998be203171c0f305386fa12306aa282ddb5d06/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport3.f90?ref=8998be203171c0f305386fa12306aa282ddb5d06", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! { dg-shouldfail \"Invalid use of IMPORT\" }\n+! Test invalid uses of import\n+! PR fortran/29601\n+\n+subroutine test()\n+  type myType3\n+    import ! { dg-error \"only permitted in an INTERFACE body\" }\n+    sequence\n+    integer :: i\n+  end type myType3\n+end subroutine test\n+\n+program foo\n+  import ! { dg-error \"only permitted in an INTERFACE body\" }\n+  type myType\n+    sequence\n+    integer :: i\n+  end type myType\n+  type myType3\n+    sequence\n+    integer :: i\n+  end type myType3\n+  interface\n+    import ! { dg-error \"only permitted in an INTERFACE body\" }\n+    subroutine bar()\n+      import foob ! { dg-error \"Can not IMPORT 'foob' from host scoping unit\" }\n+    end subroutine bar\n+    subroutine test()\n+      import :: ! { dg-error \"Expecting list of named entities\" }\n+    end subroutine test\n+  end interface\n+end program foo"}]}