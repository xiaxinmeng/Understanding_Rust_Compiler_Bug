{"sha": "98910bc2b97f248d158b301575c24597fd12ab34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg5MTBiYzJiOTdmMjQ4ZDE1OGIzMDE1NzVjMjQ1OTdmZDEyYWIzNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2017-11-06T12:55:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-11-06T12:55:35Z"}, "message": "deduction.cc: Avoid -Wreturn-type warnings.\n\n2017-11-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/20_util/optional/cons/deduction.cc: Avoid -Wreturn-type\n\twarnings.\n\t* testsuite/20_util/pair/cons/deduction.cc: Likewise.\n\t* testsuite/20_util/pair/traits.cc: Likewise.\n\t* testsuite/20_util/tuple/cons/deduction.cc: Likewise.\n\t* testsuite/20_util/variant/compile.cc: Likewise.\n\t* testsuite/23_containers/map/modifiers/try_emplace/1.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/modifiers/try_emplace.cc:\n\tLikewise.\n\nFrom-SVN: r254450", "tree": {"sha": "e453ffbb6f6aad7da790fd4cfee3d74515323d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e453ffbb6f6aad7da790fd4cfee3d74515323d89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98910bc2b97f248d158b301575c24597fd12ab34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98910bc2b97f248d158b301575c24597fd12ab34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98910bc2b97f248d158b301575c24597fd12ab34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98910bc2b97f248d158b301575c24597fd12ab34/comments", "author": null, "committer": null, "parents": [{"sha": "6b6b9e5b90fe324eb46ea833ad16afcee437f024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6b9e5b90fe324eb46ea833ad16afcee437f024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6b9e5b90fe324eb46ea833ad16afcee437f024"}], "stats": {"total": 122, "additions": 68, "deletions": 54}, "files": [{"sha": "70061e9377956301d5ccb625fa9978e36876dccc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=98910bc2b97f248d158b301575c24597fd12ab34", "patch": "@@ -1,3 +1,15 @@\n+2017-11-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/20_util/optional/cons/deduction.cc: Avoid -Wreturn-type\n+\twarnings.\n+\t* testsuite/20_util/pair/cons/deduction.cc: Likewise.\n+\t* testsuite/20_util/pair/traits.cc: Likewise.\n+\t* testsuite/20_util/tuple/cons/deduction.cc: Likewise.\n+\t* testsuite/20_util/variant/compile.cc: Likewise.\n+\t* testsuite/23_containers/map/modifiers/try_emplace/1.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/modifiers/try_emplace.cc:\n+\tLikewise.\n+\n 2017-11-05  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/abi.xml: Move docs.oracle.com references to https."}, {"sha": "77d4ff82fc8f1528a2fe9d94d45bffcf262acde3", "filename": "libstdc++-v3/testsuite/20_util/optional/cons/deduction.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fdeduction.cc?ref=98910bc2b97f248d158b301575c24597fd12ab34", "patch": "@@ -24,8 +24,8 @@\n struct MoveOnly\n {\n   MoveOnly() = default;\n-  MoveOnly(MoveOnly&&) {}\n-  MoveOnly& operator=(MoveOnly&&) {}\n+  MoveOnly(MoveOnly&&);\n+  MoveOnly& operator=(MoveOnly&&);\n };\n \n int main()"}, {"sha": "5071b13655dbca931c8af981c5837913156bef26", "filename": "libstdc++-v3/testsuite/20_util/pair/cons/deduction.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fdeduction.cc?ref=98910bc2b97f248d158b301575c24597fd12ab34", "patch": "@@ -30,8 +30,8 @@ template<typename T, typename U>\n struct MoveOnly\n {\n   MoveOnly() = default;\n-  MoveOnly(MoveOnly&&) {}\n-  MoveOnly& operator=(MoveOnly&&) {}\n+  MoveOnly(MoveOnly&&);\n+  MoveOnly& operator=(MoveOnly&&);\n };\n \n void"}, {"sha": "69481544c7586fba5c0e6b5171731658fc9ea814", "filename": "libstdc++-v3/testsuite/20_util/pair/traits.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Ftraits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Ftraits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Ftraits.cc?ref=98910bc2b97f248d158b301575c24597fd12ab34", "patch": "@@ -31,8 +31,8 @@ struct Poison\n \n struct ThrowingCopy\n {\n-  ThrowingCopy(const ThrowingCopy&) {}\n-  ThrowingCopy& operator=(const ThrowingCopy&) {}\n+  ThrowingCopy(const ThrowingCopy&);\n+  ThrowingCopy& operator=(const ThrowingCopy&);\n };\n \n int main()"}, {"sha": "2ca97098ee3048ad4c3991c2ea76ba5d98a2a084", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/deduction.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc?ref=98910bc2b97f248d158b301575c24597fd12ab34", "patch": "@@ -30,8 +30,8 @@ template<typename T, typename U>\n struct MoveOnly\n {\n   MoveOnly() = default;\n-  MoveOnly(MoveOnly&&) {}\n-  MoveOnly& operator=(MoveOnly&&) {}\n+  MoveOnly(MoveOnly&&);\n+  MoveOnly& operator=(MoveOnly&&);\n };\n \n void"}, {"sha": "2aeec7d26962103696fd2fbf8e4022f9988e3fd4", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=98910bc2b97f248d158b301575c24597fd12ab34", "patch": "@@ -481,37 +481,37 @@ void test_triviality()\n     static_assert(MA_VAL == is_trivially_move_assignable_v<variant<A>>, \"\"); \\\n   }\n   TEST_TEMPLATE(=default, =default, =default, =default, =default,  true,  true,  true,  true)\n-  TEST_TEMPLATE(=default, =default, =default, =default,       {},  true,  true,  true, false)\n-  TEST_TEMPLATE(=default, =default, =default,       {}, =default,  true,  true, false,  true)\n-  TEST_TEMPLATE(=default, =default, =default,       {},       {},  true,  true, false, false)\n-  TEST_TEMPLATE(=default, =default,       {}, =default, =default,  true, false,  true,  true)\n-  TEST_TEMPLATE(=default, =default,       {}, =default,       {},  true, false,  true, false)\n-  TEST_TEMPLATE(=default, =default,       {},       {}, =default,  true, false, false,  true)\n-  TEST_TEMPLATE(=default, =default,       {},       {},       {},  true, false, false, false)\n-  TEST_TEMPLATE(=default,       {}, =default, =default, =default, false,  true,  true,  true)\n-  TEST_TEMPLATE(=default,       {}, =default, =default,       {}, false,  true,  true, false)\n-  TEST_TEMPLATE(=default,       {}, =default,       {}, =default, false,  true, false,  true)\n-  TEST_TEMPLATE(=default,       {}, =default,       {},       {}, false,  true, false, false)\n-  TEST_TEMPLATE(=default,       {},       {}, =default, =default, false, false,  true,  true)\n-  TEST_TEMPLATE(=default,       {},       {}, =default,       {}, false, false,  true, false)\n-  TEST_TEMPLATE(=default,       {},       {},       {}, =default, false, false, false,  true)\n-  TEST_TEMPLATE(=default,       {},       {},       {},       {}, false, false, false, false)\n-  TEST_TEMPLATE(      {}, =default, =default, =default, =default, false, false, false, false)\n-  TEST_TEMPLATE(      {}, =default, =default, =default,       {}, false, false, false, false)\n-  TEST_TEMPLATE(      {}, =default, =default,       {}, =default, false, false, false, false)\n-  TEST_TEMPLATE(      {}, =default, =default,       {},       {}, false, false, false, false)\n-  TEST_TEMPLATE(      {}, =default,       {}, =default, =default, false, false, false, false)\n-  TEST_TEMPLATE(      {}, =default,       {}, =default,       {}, false, false, false, false)\n-  TEST_TEMPLATE(      {}, =default,       {},       {}, =default, false, false, false, false)\n-  TEST_TEMPLATE(      {}, =default,       {},       {},       {}, false, false, false, false)\n-  TEST_TEMPLATE(      {},       {}, =default, =default, =default, false, false, false, false)\n-  TEST_TEMPLATE(      {},       {}, =default, =default,       {}, false, false, false, false)\n-  TEST_TEMPLATE(      {},       {}, =default,       {}, =default, false, false, false, false)\n-  TEST_TEMPLATE(      {},       {}, =default,       {},       {}, false, false, false, false)\n-  TEST_TEMPLATE(      {},       {},       {}, =default, =default, false, false, false, false)\n-  TEST_TEMPLATE(      {},       {},       {}, =default,       {}, false, false, false, false)\n-  TEST_TEMPLATE(      {},       {},       {},       {}, =default, false, false, false, false)\n-  TEST_TEMPLATE(      {},       {},       {},       {},       {}, false, false, false, false)\n+  TEST_TEMPLATE(=default, =default, =default, =default,         ,  true,  true,  true, false)\n+  TEST_TEMPLATE(=default, =default, =default,         , =default,  true,  true, false,  true)\n+  TEST_TEMPLATE(=default, =default, =default,         ,         ,  true,  true, false, false)\n+  TEST_TEMPLATE(=default, =default,         , =default, =default,  true, false,  true,  true)\n+  TEST_TEMPLATE(=default, =default,         , =default,         ,  true, false,  true, false)\n+  TEST_TEMPLATE(=default, =default,         ,         , =default,  true, false, false,  true)\n+  TEST_TEMPLATE(=default, =default,         ,         ,         ,  true, false, false, false)\n+  TEST_TEMPLATE(=default,         , =default, =default, =default, false,  true,  true,  true)\n+  TEST_TEMPLATE(=default,         , =default, =default,         , false,  true,  true, false)\n+  TEST_TEMPLATE(=default,         , =default,         , =default, false,  true, false,  true)\n+  TEST_TEMPLATE(=default,         , =default,         ,         , false,  true, false, false)\n+  TEST_TEMPLATE(=default,         ,         , =default, =default, false, false,  true,  true)\n+  TEST_TEMPLATE(=default,         ,         , =default,         , false, false,  true, false)\n+  TEST_TEMPLATE(=default,         ,         ,         , =default, false, false, false,  true)\n+  TEST_TEMPLATE(=default,         ,         ,         ,         , false, false, false, false)\n+  TEST_TEMPLATE(        , =default, =default, =default, =default, false, false, false, false)\n+  TEST_TEMPLATE(        , =default, =default, =default,         , false, false, false, false)\n+  TEST_TEMPLATE(        , =default, =default,         , =default, false, false, false, false)\n+  TEST_TEMPLATE(        , =default, =default,         ,         , false, false, false, false)\n+  TEST_TEMPLATE(        , =default,         , =default, =default, false, false, false, false)\n+  TEST_TEMPLATE(        , =default,         , =default,         , false, false, false, false)\n+  TEST_TEMPLATE(        , =default,         ,         , =default, false, false, false, false)\n+  TEST_TEMPLATE(        , =default,         ,         ,         , false, false, false, false)\n+  TEST_TEMPLATE(        ,         , =default, =default, =default, false, false, false, false)\n+  TEST_TEMPLATE(        ,         , =default, =default,         , false, false, false, false)\n+  TEST_TEMPLATE(        ,         , =default,         , =default, false, false, false, false)\n+  TEST_TEMPLATE(        ,         , =default,         ,         , false, false, false, false)\n+  TEST_TEMPLATE(        ,         ,         , =default, =default, false, false, false, false)\n+  TEST_TEMPLATE(        ,         ,         , =default,         , false, false, false, false)\n+  TEST_TEMPLATE(        ,         ,         ,         , =default, false, false, false, false)\n+  TEST_TEMPLATE(        ,         ,         ,         ,         , false, false, false, false)\n #undef TEST_TEMPLATE\n \n #define TEST_TEMPLATE(CC, MC, CA, MA) \\\n@@ -529,21 +529,21 @@ void test_triviality()\n     static_assert(!is_trivially_move_assignable_v<variant<AllDeleted, A>>, \"\"); \\\n   }\n   TEST_TEMPLATE(=default, =default, =default, =default)\n-  TEST_TEMPLATE(=default, =default, =default,       {})\n-  TEST_TEMPLATE(=default, =default,       {}, =default)\n-  TEST_TEMPLATE(=default, =default,       {},       {})\n-  TEST_TEMPLATE(=default,       {}, =default, =default)\n-  TEST_TEMPLATE(=default,       {}, =default,       {})\n-  TEST_TEMPLATE(=default,       {},       {}, =default)\n-  TEST_TEMPLATE(=default,       {},       {},       {})\n-  TEST_TEMPLATE(      {}, =default, =default, =default)\n-  TEST_TEMPLATE(      {}, =default, =default,       {})\n-  TEST_TEMPLATE(      {}, =default,       {}, =default)\n-  TEST_TEMPLATE(      {}, =default,       {},       {})\n-  TEST_TEMPLATE(      {},       {}, =default, =default)\n-  TEST_TEMPLATE(      {},       {}, =default,       {})\n-  TEST_TEMPLATE(      {},       {},       {}, =default)\n-  TEST_TEMPLATE(      {},       {},       {},       {})\n+  TEST_TEMPLATE(=default, =default, =default,         )\n+  TEST_TEMPLATE(=default, =default,         , =default)\n+  TEST_TEMPLATE(=default, =default,         ,         )\n+  TEST_TEMPLATE(=default,         , =default, =default)\n+  TEST_TEMPLATE(=default,         , =default,         )\n+  TEST_TEMPLATE(=default,         ,         , =default)\n+  TEST_TEMPLATE(=default,         ,         ,         )\n+  TEST_TEMPLATE(        , =default, =default, =default)\n+  TEST_TEMPLATE(        , =default, =default,         )\n+  TEST_TEMPLATE(        , =default,         , =default)\n+  TEST_TEMPLATE(        , =default,         ,         )\n+  TEST_TEMPLATE(        ,         , =default, =default)\n+  TEST_TEMPLATE(        ,         , =default,         )\n+  TEST_TEMPLATE(        ,         ,         , =default)\n+  TEST_TEMPLATE(        ,         ,         ,         )\n #undef TEST_TEMPLATE\n \n   static_assert(is_trivially_copy_constructible_v<variant<DefaultNoexcept, int, char, float, double>>, \"\");"}, {"sha": "22aa9d4234e77af5f60b02f297095d4e08acd94c", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/try_emplace/1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ftry_emplace%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ftry_emplace%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ftry_emplace%2F1.cc?ref=98910bc2b97f248d158b301575c24597fd12ab34", "patch": "@@ -39,6 +39,7 @@ struct Val\n   {\n     val = other.val;\n     other.moved_from_assign = true;\n+    return *this;\n   }\n };\n "}, {"sha": "b07d44ba9bb82630ad1300d1eefaa8f9f6027e5b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/modifiers/try_emplace.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fmodifiers%2Ftry_emplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98910bc2b97f248d158b301575c24597fd12ab34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fmodifiers%2Ftry_emplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fmodifiers%2Ftry_emplace.cc?ref=98910bc2b97f248d158b301575c24597fd12ab34", "patch": "@@ -39,6 +39,7 @@ struct Val\n   {\n     val = other.val;\n     other.moved_from_assign = true;\n+    return *this;\n   }\n };\n "}]}