{"sha": "0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2M2E4ZWU5MTY4ZDRkM2NiMGU3Yjk3Yjc4ZTMyNGY2NWUxYTIyYQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2019-02-13T14:04:41Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2019-02-13T14:04:41Z"}, "message": "AArch64: Allow any offset for SVE addressing modes before reload.\n\nOn AArch64 aarch64_classify_address has a case for when it's non-strict\nthat will allow it to accept any byte offset from a reg when validating\nan address in a given addressing mode.\n\nThis because reload would later make the address valid. SVE however requires\nthe address always be valid, but currently allows any address when a MEM +\noffset is used.  This causes an ICE as nothing later forces the address to be\nlegitimate.\n\nThe patch forces aarch64_emit_sve_pred_move via expand_insn to ensure that\nthe addressing mode is valid for any loads/stores it creates, which follows\nthe SVE way of handling address classifications.\n\ngcc/ChangeLog:\n\n\tPR target/88847\n\t* config/aarch64/aarch64-sve.md (*pred_mov<mode>, pred_mov<mode>):\n\tExpose as @aarch64_pred_mov.\n\t* config/aarch64/aarch64.c (aarch64_classify_address):\n\tUse expand_insn which legitimizes operands.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/88847\n\t* gcc.target/aarch64/sve/pr88847.c: New test.\n\nFrom-SVN: r268845", "tree": {"sha": "59c4c9c332df1e868221e1341e8dbdaee4c6712a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59c4c9c332df1e868221e1341e8dbdaee4c6712a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbcdd5612f98d84c4d37769944af28b8d89a1aa3"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "76cef68bed12ed50b7db5c120dcc85bb19a41dd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a", "patch": "@@ -1,3 +1,11 @@\n+2019-02-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/88847\n+\t* config/aarch64/aarch64-sve.md (*pred_mov<mode>, pred_mov<mode>):\n+\tExpose as @aarch64_pred_mov.\n+\t* config/aarch64/aarch64.c (aarch64_classify_address):\n+\tUse expand_insn which legitimizes operands.\n+\n 2019-02-13  Martin Liska  <mliska@suse.cz>\n \n \t* builtins.h (expand_builtin_with_bounds): Remove declaration."}, {"sha": "3f39c4c5b63798515ed4c109836b036573de4aad", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a", "patch": "@@ -170,7 +170,7 @@\n ;; all-true.  Note that this pattern is generated directly by\n ;; aarch64_emit_sve_pred_move, so changes to this pattern will\n ;; need changes there as well.\n-(define_insn_and_split \"*pred_mov<mode>\"\n+(define_insn_and_split \"@aarch64_pred_mov<mode>\"\n   [(set (match_operand:SVE_ALL 0 \"nonimmediate_operand\" \"=w, w, m\")\n \t(unspec:SVE_ALL\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n@@ -404,7 +404,7 @@\n \n ;; Predicated structure moves.  This works for both endiannesses but in\n ;; practice is only useful for big-endian.\n-(define_insn_and_split \"pred_mov<mode>\"\n+(define_insn_and_split \"@aarch64_pred_mov<mode>\"\n   [(set (match_operand:SVE_STRUCT 0 \"aarch64_sve_struct_nonimmediate_operand\" \"=w, w, Utx\")\n \t(unspec:SVE_STRUCT\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")"}, {"sha": "1fa28fe82fefe23c8f89ecbd8923de248c028d84", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a", "patch": "@@ -3414,9 +3414,12 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm,\n void\n aarch64_emit_sve_pred_move (rtx dest, rtx pred, rtx src)\n {\n-  emit_insn (gen_rtx_SET (dest, gen_rtx_UNSPEC (GET_MODE (dest),\n-\t\t\t\t\t\tgen_rtvec (2, pred, src),\n-\t\t\t\t\t\tUNSPEC_MERGE_PTRUE)));\n+  expand_operand ops[3];\n+  machine_mode mode = GET_MODE (dest);\n+  create_output_operand (&ops[0], dest, mode);\n+  create_input_operand (&ops[1], pred, GET_MODE(pred));\n+  create_input_operand (&ops[2], src, mode);\n+  expand_insn (code_for_aarch64_pred_mov (mode), 3, ops);\n }\n \n /* Expand a pre-RA SVE data move from SRC to DEST in which at least one"}, {"sha": "5f220ccae10fc60ec3acbc94bb9612dcd498924b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a", "patch": "@@ -1,3 +1,8 @@\n+2019-02-13  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/88847\n+\t* gcc.target/aarch64/sve/pr88847.c: New test.\n+\n 2019-02-13  Jonathan Wakely  <jwakely@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "b7504add9a9f2eedf9421328a87b75b53d492860", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr88847.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr88847.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr88847.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr88847.c?ref=0c63a8ee9168d4d3cb0e7b97b78e324f65e1a22a", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-additional-options \"-O0 -msve-vector-bits=256 -mbig-endian --save-temps\" } */\n+\n+typedef struct _b {\n+  __attribute__((__vector_size__(32))) int a[2];\n+} b;\n+\n+b *c;\n+\n+void\n+foo (void)\n+{\n+  char *p = '\\0';\n+  b e = c[0];\n+}\n+\n+/* { dg-final { scan-assembler {\\tld1w\\tz[0-9]+.s, p[0-9]+/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz[0-9]+.s, p[0-9]+/z, \\[x[0-9]+, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz[0-9]+.s, p[0-9]+, \\[(sp|x[0-9]+)\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz[0-9]+.s, p[0-9]+, \\[(sp|x[0-9]+), #1, mul vl\\]\\n} } } */\n+"}]}