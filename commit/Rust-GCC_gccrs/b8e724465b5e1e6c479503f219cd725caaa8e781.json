{"sha": "b8e724465b5e1e6c479503f219cd725caaa8e781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlNzI0NDY1YjVlMWU2YzQ3OTUwM2YyMTljZDcyNWNhYWE4ZTc4MQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2019-11-21T16:14:21Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2019-11-21T16:14:21Z"}, "message": "Fix failures on Solaris with -fno-common default\n\n\tgcc/testsuite:\n\t* gcc.c-torture/execute/20030913-1.c: Rename glob to g.\n\t* gcc.c-torture/execute/960218-1.c: Rename glob to gl.\n\t* gcc.c-torture/execute/complex-6.c: Rename err to e.\n\t* gcc.dg/torture/ssa-pta-fn-1.c: Rename glob to g.\n\n\tlibgomp:\n\t* testsuite/libgomp.c/pr39591-1.c: Rename err to e.\n\t* testsuite/libgomp.c/pr39591-2.c: Likewise.\n\t* testsuite/libgomp.c/pr39591-3.c: Likewise.\n\t* testsuite/libgomp.c/private-1.c: Likewise.\n\t* testsuite/libgomp.c/task-1.c: Likewise.\n\t* testsuite/libgomp.c/task-5.c: Renamed err to serr.\n\nFrom-SVN: r278571", "tree": {"sha": "80ea08df40416098c9c352c30eea51cf708c21ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80ea08df40416098c9c352c30eea51cf708c21ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8e724465b5e1e6c479503f219cd725caaa8e781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e724465b5e1e6c479503f219cd725caaa8e781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e724465b5e1e6c479503f219cd725caaa8e781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e724465b5e1e6c479503f219cd725caaa8e781/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "523cfd52a29d496a5c0445e5307e9ffc05242b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/523cfd52a29d496a5c0445e5307e9ffc05242b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/523cfd52a29d496a5c0445e5307e9ffc05242b20"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "a075a6fbd246056f87b3f70af72f09cfdf6ab603", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -1,3 +1,10 @@\n+2019-11-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc.c-torture/execute/20030913-1.c: Rename glob to g.\n+\t* gcc.c-torture/execute/960218-1.c: Rename glob to gl.\n+\t* gcc.c-torture/execute/complex-6.c: Rename err to e.\n+\t* gcc.dg/torture/ssa-pta-fn-1.c: Rename glob to g.\n+\n 2019-11-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92450 - ICE with invalid nested name specifier."}, {"sha": "ed8724bc2441d76170a03ba450371dd683a125b1", "filename": "gcc/testsuite/gcc.c-torture/execute/20030913-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030913-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030913-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030913-1.c?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -1,12 +1,12 @@\n /* Assignments via pointers pointing to global variables were being killed\n    by SSA-DCE.  Test contributed by Paul Brook <paul@nowt.org>  */\n \n-int glob; \n+int g;\n  \n void \n fn2(int ** q) \n { \n-  *q = &glob; \n+  *q = &g;\n } \n  \n void test() \n@@ -21,6 +21,6 @@ void test()\n int main() \n { \n   test(); \n-  if (glob != 42) abort(); \n+  if (g != 42) abort();\n   exit (0); \n }"}, {"sha": "dc94734a81f98749b5cd1e4d2006f88b6ea8d279", "filename": "gcc/testsuite/gcc.c-torture/execute/960218-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F960218-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F960218-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F960218-1.c?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -1,8 +1,8 @@\n-int glob;\n+int gl;\n \n g (x)\n {\n-  glob = x;\n+  gl = x;\n   return 0;\n }\n \n@@ -16,7 +16,7 @@ f (x)\n main ()\n {\n   f (3);\n-  if (glob != -4)\n+  if (gl != -4)\n     abort ();\n   exit (0);\n }"}, {"sha": "75f9210808868f0c39234bbaefa3598292243400", "filename": "gcc/testsuite/gcc.c-torture/execute/complex-6.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fcomplex-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fcomplex-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fcomplex-6.c?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -6,7 +6,7 @@\n #include <stdlib.h>\n #include <stdio.h>\n \n-int err;\n+int e;\n \n #define TEST(TYPE, FUNC)\t\t\t\t\t\\\n __complex__ TYPE\t\t\t\t\t\t\\\n@@ -31,7 +31,7 @@ test_ ## FUNC (void)\t\t\t\t\t\t\\\n   if (res != 1.0 - 2.0i)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       printf (\"test_\" #FUNC \" failed\\n\");\t\t\t\\\n-      ++err;\t\t\t\t\t\t\t\\\n+      ++e;\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n@@ -46,15 +46,15 @@ int\n main (void)\n {\n \n-  err = 0;\n+  e = 0;\n \n   test_float ();\n   test_double ();\n   test_long_double ();\n   test_int ();\n   test_long_int ();\n \n-  if (err != 0)\n+  if (e != 0)\n     abort ();\n \n   return 0;"}, {"sha": "1f30467b98e73fd2e0a486bf1038143d1143c223", "filename": "gcc/testsuite/gcc.dg/torture/ssa-pta-fn-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-pta-fn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-pta-fn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-pta-fn-1.c?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -3,7 +3,7 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-fno-fat-lto-objects\" } { \"\" } } */\n \n extern void abort (void);\n-int *glob;\n+int *g;\n int dummy;\n \n int * __attribute__((noinline,const))\n@@ -13,7 +13,7 @@ int * __attribute__((noinline,pure))\n foo_pure(int *p) { return p + dummy; }\n \n int * __attribute__((noinline))\n-foo_normal(int *p) { glob = p; return p; }\n+foo_normal(int *p) { g = p; return p; }\n \n void test_const(void)\n {"}, {"sha": "65478302ba8defb9e7afccbb7de05c1f855dbabe", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -1,3 +1,12 @@\n+2019-11-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* testsuite/libgomp.c/pr39591-1.c: Rename err to e.\n+\t* testsuite/libgomp.c/pr39591-2.c: Likewise.\n+\t* testsuite/libgomp.c/pr39591-3.c: Likewise.\n+\t* testsuite/libgomp.c/private-1.c: Likewise.\n+\t* testsuite/libgomp.c/task-1.c: Likewise.\n+\t* testsuite/libgomp.c/task-5.c: Renamed err to serr.\n+\n 2019-11-20  Julian Brown  <julian@codesourcery.com>\n \n \t* plugin/plugin-gcn.c (wait_for_queue_nonfull): Don't lock/unlock"}, {"sha": "a22bc337819949df1cc451a522b0f9f2c695d95c", "filename": "libgomp/testsuite/libgomp.c/pr39591-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-1.c?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -3,7 +3,7 @@\n \n extern void abort (void);\n \n-int err;\n+int e;\n \n int\n main (void)\n@@ -23,10 +23,10 @@ main (void)\n \tfor (j = 0; j < sizeof array / sizeof array[0]; j++)\n \t  if (array[j] != 0x55555555)\n #pragma omp atomic\n-\t    err++;\n+\t    e++;\n       }\n   }\n-  if (err)\n+  if (e)\n     abort ();\n   return 0;\n }"}, {"sha": "ba8b862f49ca4d8dc6e5a7d63a243fd2b2dde5f6", "filename": "libgomp/testsuite/libgomp.c/pr39591-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-2.c?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -3,7 +3,7 @@\n \n extern void abort (void);\n \n-int err;\n+int e;\n \n void __attribute__((noinline))\n foo (int *array)\n@@ -14,7 +14,7 @@ foo (int *array)\n     for (j = 0; j < 40; j++)\n       if (array[j] != 0x55555555)\n #pragma omp atomic\n-\terr++;\n+\te++;\n   }\n }\n \n@@ -32,7 +32,7 @@ main (void)\n     for (i = 0; i < 50; i++)\n       foo (array);\n   }\n-  if (err)\n+  if (e)\n     abort ();\n   return 0;\n }"}, {"sha": "590553437ea0c9a3c9052f63160a52ad23326301", "filename": "libgomp/testsuite/libgomp.c/pr39591-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-3.c?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -3,7 +3,7 @@\n \n extern void abort (void);\n \n-int err, a[40];\n+int e, a[40];\n \n void __attribute__((noinline))\n foo (int *array)\n@@ -14,7 +14,7 @@ foo (int *array)\n     for (j = 0; j < 40; j++)\n       if (array[j] != 0x55555555)\n #pragma omp atomic\n-\terr++;\n+\te++;\n   }\n }\n \n@@ -33,7 +33,7 @@ main (void)\n     for (i = 0; i < 50; i++)\n       foo (a);\n   }\n-  if (err)\n+  if (e)\n     abort ();\n   return 0;\n }"}, {"sha": "10c092a12c60571278e7eaaee495ae4efc1a3ede", "filename": "libgomp/testsuite/libgomp.c/private-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Fprivate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Fprivate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fprivate-1.c?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -20,7 +20,7 @@ f1 (int i, int j, int k)\n }\n \n int v1 = 1, v2 = 2, v5 = 5;\n-int err;\n+int e;\n \n void\n f2 (void)\n@@ -35,11 +35,11 @@ f2 (void)\n       #pragma omp parallel num_threads(1) firstprivate(v1, v2, v3, v4)\n \t{\n \t  if (++v1 != 8 || ++v2 != 3 || ++v3 != 4 || ++v4 != 5 || ++v5 != 6)\n-\t    err = 1;\n+\t    e = 1;\n \t}\n       if (v1 != 7 || v2 != 2 || v3 != 3 || v4 != 4 || v5 != 6)\n \tabort ();\n-      if (err)\n+      if (e)\n \tabort ();\n     }\n   }"}, {"sha": "d17c3c61c2f78180c65abe08ab10e68756febc9c", "filename": "libgomp/testsuite/libgomp.c/task-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-1.c?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -20,7 +20,7 @@ f1 (int i, int j, int k)\n }\n \n int v1 = 1, v2 = 2, v5 = 5;\n-int err;\n+int e;\n \n void\n f2 (void)\n@@ -35,12 +35,12 @@ f2 (void)\n       #pragma omp task\n \t{\n \t  if (++v1 != 8 || ++v2 != 3 || ++v3 != 4 || ++v4 != 5 || ++v5 != 6)\n-\t    err = 1;\n+\t    e = 1;\n \t}\n       #pragma omp taskwait\n       if (v1 != 7 || v2 != 2 || v3 != 3 || v4 != 4 || v5 != 6)\n \tabort ();\n-      if (err)\n+      if (e)\n \tabort ();\n     }\n   }"}, {"sha": "bf44ddd012b622e7376c3b6c4e4881761bb1bffd", "filename": "libgomp/testsuite/libgomp.c/task-5.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e724465b5e1e6c479503f219cd725caaa8e781/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-5.c?ref=b8e724465b5e1e6c479503f219cd725caaa8e781", "patch": "@@ -3,42 +3,42 @@\n #include <omp.h>\n #include <stdlib.h>\n \n-int err;\n+int serr;\n \n int\n main ()\n {\n   int e;\n-#pragma omp parallel shared(err)\n+#pragma omp parallel shared(serr)\n   {\n     if (omp_in_final ())\n       #pragma omp atomic write\n-\terr = 1;\n-    #pragma omp task if (0) shared(err)\n+\tserr = 1;\n+    #pragma omp task if (0) shared(serr)\n       {\n \tif (omp_in_final ())\n \t  #pragma omp atomic write\n-\t    err = 1;\n-\t#pragma omp task if (0) shared(err)\n+\t    serr = 1;\n+\t#pragma omp task if (0) shared(serr)\n \t  if (omp_in_final ())\n \t    #pragma omp atomic write\n-\t      err = 1;\n+\t      serr = 1;\n       }\n-    #pragma omp task final (1) shared(err)\n+    #pragma omp task final (1) shared(serr)\n       {\n \tif (!omp_in_final ())\n \t  #pragma omp atomic write\n-\t    err = 1;\n+\t    serr = 1;\n \t#pragma omp taskyield\n \t#pragma omp taskwait\n-\t#pragma omp task shared(err)\n+\t#pragma omp task shared(serr)\n \t  if (!omp_in_final ())\n \t    #pragma omp atomic write\n-\t      err = 1;\n+\t      serr = 1;\n       }\n   }\n   #pragma omp atomic read\n-    e = err;\n+    e = serr;\n   if (e)\n     abort ();\n   return 0;"}]}