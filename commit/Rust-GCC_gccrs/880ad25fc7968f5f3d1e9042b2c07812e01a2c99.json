{"sha": "880ad25fc7968f5f3d1e9042b2c07812e01a2c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgwYWQyNWZjNzk2OGY1ZjNkMWU5MDQyYjJjMDc4MTJlMDFhMmM5OQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-26T15:35:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-26T15:35:03Z"}, "message": "tree-ssa-sccvn.c (copy_nary): Adjust.\n\n2010-05-26  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (copy_nary): Adjust.\n\t(copy_phis): Rename to ...\n\t(copy_phi): ... this.  Adjust.\n\t(copy_references): Rename to ...\n\t(copy_reference): ... this.  Adjust.\n\t(process_scc): Use HTAB_FOR_EACH_ELEMENT to insert the\n\tresult into the valid table.\n\nFrom-SVN: r159877", "tree": {"sha": "49dfd9e7535f10a9f2796f115a1093d6793bf0cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49dfd9e7535f10a9f2796f115a1093d6793bf0cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/880ad25fc7968f5f3d1e9042b2c07812e01a2c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880ad25fc7968f5f3d1e9042b2c07812e01a2c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880ad25fc7968f5f3d1e9042b2c07812e01a2c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880ad25fc7968f5f3d1e9042b2c07812e01a2c99/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52642070ebe41263263531ac62661e686be97420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52642070ebe41263263531ac62661e686be97420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52642070ebe41263263531ac62661e686be97420"}], "stats": {"total": 132, "additions": 70, "deletions": 62}, "files": [{"sha": "f393a0f6b7aa729e5cdb3a7eb4f490fc532a5810", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880ad25fc7968f5f3d1e9042b2c07812e01a2c99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880ad25fc7968f5f3d1e9042b2c07812e01a2c99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=880ad25fc7968f5f3d1e9042b2c07812e01a2c99", "patch": "@@ -1,3 +1,13 @@\n+2010-05-26  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (copy_nary): Adjust.\n+\t(copy_phis): Rename to ...\n+\t(copy_phi): ... this.  Adjust.\n+\t(copy_references): Rename to ...\n+\t(copy_reference): ... this.  Adjust.\n+\t(process_scc): Use HTAB_FOR_EACH_ELEMENT to insert the\n+\tresult into the valid table.\n+\n 2010-05-26  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* config/spu/spu-c.c: Do not include function.h, rtl.h, expr.h,"}, {"sha": "8dba41b51c99b52ebb68cc780e334b5507a67346", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 60, "deletions": 62, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880ad25fc7968f5f3d1e9042b2c07812e01a2c99/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880ad25fc7968f5f3d1e9042b2c07812e01a2c99/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=880ad25fc7968f5f3d1e9042b2c07812e01a2c99", "patch": "@@ -2833,112 +2833,110 @@ sort_scc (VEC (tree, heap) *scc)\n \t compare_ops);\n }\n \n-/* Insert the no longer used nary *ENTRY to the current hash.  */\n+/* Insert the no longer used nary ONARY to the hash INFO.  */\n \n-static int\n-copy_nary (void **entry, void *data ATTRIBUTE_UNUSED)\n+static void\n+copy_nary (vn_nary_op_t onary, vn_tables_t info)\n {\n-  vn_nary_op_t onary = (vn_nary_op_t) *entry;\n   size_t size = (sizeof (struct vn_nary_op_s)\n \t\t - sizeof (tree) * (4 - onary->length));\n-  vn_nary_op_t nary = (vn_nary_op_t) obstack_alloc (&current_info->nary_obstack,\n-\t\t\t\t\t\t    size);\n+  vn_nary_op_t nary = (vn_nary_op_t) obstack_alloc (&info->nary_obstack, size);\n   void **slot;\n   memcpy (nary, onary, size);\n-  slot = htab_find_slot_with_hash (current_info->nary, nary, nary->hashcode,\n-\t\t\t\t   INSERT);\n+  slot = htab_find_slot_with_hash (info->nary, nary, nary->hashcode, INSERT);\n   gcc_assert (!*slot);\n   *slot = nary;\n-  return 1;\n }\n \n-/* Insert the no longer used phi *ENTRY to the current hash.  */\n+/* Insert the no longer used phi OPHI to the hash INFO.  */\n \n-static int\n-copy_phis (void **entry, void *data ATTRIBUTE_UNUSED)\n+static void\n+copy_phi (vn_phi_t ophi, vn_tables_t info)\n {\n-  vn_phi_t ophi = (vn_phi_t) *entry;\n-  vn_phi_t phi = (vn_phi_t) pool_alloc (current_info->phis_pool);\n+  vn_phi_t phi = (vn_phi_t) pool_alloc (info->phis_pool);\n   void **slot;\n   memcpy (phi, ophi, sizeof (*phi));\n   ophi->phiargs = NULL;\n-  slot = htab_find_slot_with_hash (current_info->phis, phi, phi->hashcode,\n-\t\t\t\t   INSERT);\n+  slot = htab_find_slot_with_hash (info->phis, phi, phi->hashcode, INSERT);\n+  gcc_assert (!*slot);\n   *slot = phi;\n-  return 1;\n }\n \n-/* Insert the no longer used reference *ENTRY to the current hash.  */\n+/* Insert the no longer used reference OREF to the hash INFO.  */\n \n-static int\n-copy_references (void **entry, void *data ATTRIBUTE_UNUSED)\n+static void\n+copy_reference (vn_reference_t oref, vn_tables_t info)\n {\n-  vn_reference_t oref = (vn_reference_t) *entry;\n   vn_reference_t ref;\n   void **slot;\n-  ref = (vn_reference_t) pool_alloc (current_info->references_pool);\n+  ref = (vn_reference_t) pool_alloc (info->references_pool);\n   memcpy (ref, oref, sizeof (*ref));\n   oref->operands = NULL;\n-  slot = htab_find_slot_with_hash (current_info->references, ref, ref->hashcode,\n+  slot = htab_find_slot_with_hash (info->references, ref, ref->hashcode,\n \t\t\t\t   INSERT);\n   if (*slot)\n     free_reference (*slot);\n   *slot = ref;\n-  return 1;\n }\n \n /* Process a strongly connected component in the SSA graph.  */\n \n static void\n process_scc (VEC (tree, heap) *scc)\n {\n-  /* If the SCC has a single member, just visit it.  */\n+  tree var;\n+  unsigned int i;\n+  unsigned int iterations = 0;\n+  bool changed = true;\n+  htab_iterator hi;\n+  vn_nary_op_t nary;\n+  vn_phi_t phi;\n+  vn_reference_t ref;\n \n+  /* If the SCC has a single member, just visit it.  */\n   if (VEC_length (tree, scc) == 1)\n     {\n       tree use = VEC_index (tree, scc, 0);\n       if (!VN_INFO (use)->use_processed)\n \tvisit_use (use);\n+      return;\n     }\n-  else\n-    {\n-      tree var;\n-      unsigned int i;\n-      unsigned int iterations = 0;\n-      bool changed = true;\n \n-      /* Iterate over the SCC with the optimistic table until it stops\n-\t changing.  */\n-      current_info = optimistic_info;\n-      while (changed)\n-\t{\n-\t  changed = false;\n-\t  iterations++;\n-\t  /* As we are value-numbering optimistically we have to\n-\t     clear the expression tables and the simplified expressions\n-\t     in each iteration until we converge.  */\n-\t  htab_empty (optimistic_info->nary);\n-\t  htab_empty (optimistic_info->phis);\n-\t  htab_empty (optimistic_info->references);\n-\t  obstack_free (&optimistic_info->nary_obstack, NULL);\n-\t  gcc_obstack_init (&optimistic_info->nary_obstack);\n-\t  empty_alloc_pool (optimistic_info->phis_pool);\n-\t  empty_alloc_pool (optimistic_info->references_pool);\n-\t  for (i = 0; VEC_iterate (tree, scc, i, var); i++)\n-\t    VN_INFO (var)->expr = NULL_TREE;\n-\t  for (i = 0; VEC_iterate (tree, scc, i, var); i++)\n-\t    changed |= visit_use (var);\n-\t}\n-\n-      statistics_histogram_event (cfun, \"SCC iterations\", iterations);\n+  /* Iterate over the SCC with the optimistic table until it stops\n+     changing.  */\n+  current_info = optimistic_info;\n+  while (changed)\n+    {\n+      changed = false;\n+      iterations++;\n+      /* As we are value-numbering optimistically we have to\n+\t clear the expression tables and the simplified expressions\n+\t in each iteration until we converge.  */\n+      htab_empty (optimistic_info->nary);\n+      htab_empty (optimistic_info->phis);\n+      htab_empty (optimistic_info->references);\n+      obstack_free (&optimistic_info->nary_obstack, NULL);\n+      gcc_obstack_init (&optimistic_info->nary_obstack);\n+      empty_alloc_pool (optimistic_info->phis_pool);\n+      empty_alloc_pool (optimistic_info->references_pool);\n+      for (i = 0; VEC_iterate (tree, scc, i, var); i++)\n+\tVN_INFO (var)->expr = NULL_TREE;\n+      for (i = 0; VEC_iterate (tree, scc, i, var); i++)\n+\tchanged |= visit_use (var);\n+    }\n+\n+  statistics_histogram_event (cfun, \"SCC iterations\", iterations);\n+\n+  /* Finally, copy the contents of the no longer used optimistic\n+     table to the valid table.  */\n+  FOR_EACH_HTAB_ELEMENT (optimistic_info->nary, nary, vn_nary_op_t, hi)\n+    copy_nary (nary, valid_info);\n+  FOR_EACH_HTAB_ELEMENT (optimistic_info->phis, phi, vn_phi_t, hi)\n+    copy_phi (phi, valid_info);\n+  FOR_EACH_HTAB_ELEMENT (optimistic_info->references, ref, vn_reference_t, hi)\n+    copy_reference (ref, valid_info);\n \n-      /* Finally, copy the contents of the no longer used optimistic\n-\t table to the valid table.  */\n-      current_info = valid_info;\n-      htab_traverse (optimistic_info->nary, copy_nary, NULL);\n-      htab_traverse (optimistic_info->phis, copy_phis, NULL);\n-      htab_traverse (optimistic_info->references, copy_references, NULL);\n-    }\n+  current_info = valid_info;\n }\n \n DEF_VEC_O(ssa_op_iter);"}]}