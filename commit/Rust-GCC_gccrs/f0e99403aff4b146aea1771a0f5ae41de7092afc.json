{"sha": "f0e99403aff4b146aea1771a0f5ae41de7092afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlOTk0MDNhZmY0YjE0NmFlYTE3NzFhMGY1YWU0MWRlNzA5MmFmYw==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-06-19T12:50:00Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-06-19T12:50:00Z"}, "message": "Fix openmp global state fortran regression\n\n\tPR fortran/66549\ngcc/fortran/\n\t* resolve.c (resolve_global_procedure): Don't save and restore\n\tOpenMP state around the call to gfc_resolve.\n\t(gfc_resolve): Save OpenMP state on entry and restore it on return.\ngcc/testsuite/\n\t* gfortran.dg/gomp/omp_parallel_1.f90: New file.\n\nFrom-SVN: r224648", "tree": {"sha": "c2b9734d7e03d872604656f71cb305cb1698f759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2b9734d7e03d872604656f71cb305cb1698f759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0e99403aff4b146aea1771a0f5ae41de7092afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e99403aff4b146aea1771a0f5ae41de7092afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e99403aff4b146aea1771a0f5ae41de7092afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e99403aff4b146aea1771a0f5ae41de7092afc/comments", "author": null, "committer": null, "parents": [{"sha": "3fc4f5cd9345bf1fcf348fa46afccde67dbd398d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc4f5cd9345bf1fcf348fa46afccde67dbd398d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc4f5cd9345bf1fcf348fa46afccde67dbd398d"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "148bc80cb1369d44fd8f719985d8fc69a2e95351", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e99403aff4b146aea1771a0f5ae41de7092afc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e99403aff4b146aea1771a0f5ae41de7092afc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f0e99403aff4b146aea1771a0f5ae41de7092afc", "patch": "@@ -1,3 +1,10 @@\n+2015-06-19  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/66549\n+\t* resolve.c (resolve_global_procedure): Don't save and restore\n+\tOpenMP state around the call to gfc_resolve.\n+\t(gfc_resolve): Save OpenMP state on entry and restore it on return.\n+\n 2015-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* convert.c: Do not include input.h, line-map.h or is-a.h."}, {"sha": "e332095ea9d6b9a1462ed49125b69d3c53a9b7a1", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e99403aff4b146aea1771a0f5ae41de7092afc/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e99403aff4b146aea1771a0f5ae41de7092afc/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f0e99403aff4b146aea1771a0f5ae41de7092afc", "patch": "@@ -2384,14 +2384,11 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n       if (!gsym->ns->resolved)\n \t{\n \t  gfc_dt_list *old_dt_list;\n-\t  struct gfc_omp_saved_state old_omp_state;\n \n \t  /* Stash away derived types so that the backend_decls do not\n \t     get mixed up.  */\n \t  old_dt_list = gfc_derived_types;\n \t  gfc_derived_types = NULL;\n-\t  /* And stash away openmp state.  */\n-\t  gfc_omp_save_and_clear_state (&old_omp_state);\n \n \t  gfc_resolve (gsym->ns);\n \n@@ -2401,8 +2398,6 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \n \t  /* Restore the derived types of this namespace.  */\n \t  gfc_derived_types = old_dt_list;\n-\t  /* And openmp state.  */\n-\t  gfc_omp_restore_state (&old_omp_state);\n \t}\n \n       /* Make sure that translation for the gsymbol occurs before\n@@ -15091,6 +15086,7 @@ gfc_resolve (gfc_namespace *ns)\n {\n   gfc_namespace *old_ns;\n   code_stack *old_cs_base;\n+  struct gfc_omp_saved_state old_omp_state;\n \n   if (ns->resolved)\n     return;\n@@ -15099,6 +15095,11 @@ gfc_resolve (gfc_namespace *ns)\n   old_ns = gfc_current_ns;\n   old_cs_base = cs_base;\n \n+  /* As gfc_resolve can be called during resolution of an OpenMP construct\n+     body, we should clear any state associated to it, so that say NS's\n+     DO loops are not interpreted as OpenMP loops.  */\n+  gfc_omp_save_and_clear_state (&old_omp_state);\n+\n   resolve_types (ns);\n   component_assignment_level = 0;\n   resolve_codes (ns);\n@@ -15108,4 +15109,6 @@ gfc_resolve (gfc_namespace *ns)\n   ns->resolved = 1;\n \n   gfc_run_passes (ns);\n+\n+  gfc_omp_restore_state (&old_omp_state);\n }"}, {"sha": "3b3962a1584cf7421f80f2791c1d63c77511b9b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e99403aff4b146aea1771a0f5ae41de7092afc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e99403aff4b146aea1771a0f5ae41de7092afc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0e99403aff4b146aea1771a0f5ae41de7092afc", "patch": "@@ -1,3 +1,8 @@\n+2015-06-19  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/66549\n+\t* gfortran.dg/gomp/omp_parallel_1.f90: New file.\n+\n 2015-06-19  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* gcc.target/i386/mpx/pr66581.c: New test."}, {"sha": "4bcb5631b7ca996a2728bacc1f54b6c95cd3aee3", "filename": "gcc/testsuite/gfortran.dg/gomp/omp_parallel_1.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e99403aff4b146aea1771a0f5ae41de7092afc/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fomp_parallel_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e99403aff4b146aea1771a0f5ae41de7092afc/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fomp_parallel_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fomp_parallel_1.f90?ref=f0e99403aff4b146aea1771a0f5ae41de7092afc", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/66549\n+! The resolution of CVN in the middle CLWF's OpenMP construct was\n+! making the DO loop (wrongly) interpreted as an OpenMP-managed loop, leading\n+! to an ICE.\n+!\n+! Contributed by Andrew Benson <abensonca@gmail.com>.\n+\n+module smfa\n+  type :: sgc\n+   contains\n+     procedure :: sla => sa\n+  end type sgc\n+  class(sgc), pointer :: sg_\n+  double precision, allocatable, dimension(:) :: vni \n+contains\n+  double precision function sa(self,i)\n+    class(sgc), intent(in   ) :: self\n+  end function sa\n+  subroutine cvn(sg_,vn)\n+    class(sgc), intent(inout) :: sg_\n+    double precision, intent(  out), dimension(:) :: vn\n+    integer :: i\n+    do i=1,2\n+       vn(i)= sg_%sla(i)\n+    end do\n+  end subroutine cvn\n+  subroutine clwf()\n+    !$omp parallel\n+    call cvn(sg_,vni)\n+    !$omp end parallel\n+  end subroutine clwf\n+end module smfa\n+\n+! { dg-final { scan-tree-dump-times \"#pragma\\\\s+omp\\\\s+parallel\\\\n\" 1 \"original\" } }"}]}