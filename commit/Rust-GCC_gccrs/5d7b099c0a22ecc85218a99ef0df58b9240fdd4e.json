{"sha": "5d7b099c0a22ecc85218a99ef0df58b9240fdd4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3YjA5OWMwYTIyZWNjODUyMThhOTllZjBkZjU4YjkyNDBmZGQ0ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-22T14:44:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-22T14:44:13Z"}, "message": "tree-inline.c (optimize_inline_calls): Schedule cleanups only if we inlined something.\n\n2010-09-22  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-inline.c (optimize_inline_calls): Schedule cleanups\n\tonly if we inlined something.  Block compaction and conditional\n\tfolding are done by cfg cleanup.  Schedule update-address-taken.\n\t(tree_function_versioning): Remove redundant call to number_blocks.\n\t* tree-optimize.c (execute_cleanup_cfg_post_optimizing): Conditional\n\tfolding is done by cfg cleanup.\n\t* passes.c (init_optimization_passes): Remove update-address-taken\n\tpass after IPA inlining.\n\nFrom-SVN: r164525", "tree": {"sha": "81fd9fa9af57c0df9a156c97930d408557c285c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81fd9fa9af57c0df9a156c97930d408557c285c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27d5e204ca7d3fa62230529cad888df0d866a10f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d5e204ca7d3fa62230529cad888df0d866a10f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d5e204ca7d3fa62230529cad888df0d866a10f"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "cff05f21abf9b0383131c90482d734c49988a258", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d7b099c0a22ecc85218a99ef0df58b9240fdd4e", "patch": "@@ -1,3 +1,14 @@\n+2010-09-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-inline.c (optimize_inline_calls): Schedule cleanups\n+\tonly if we inlined something.  Block compaction and conditional\n+\tfolding are done by cfg cleanup.  Schedule update-address-taken.\n+\t(tree_function_versioning): Remove redundant call to number_blocks.\n+\t* tree-optimize.c (execute_cleanup_cfg_post_optimizing): Conditional\n+\tfolding is done by cfg cleanup.\n+\t* passes.c (init_optimization_passes): Remove update-address-taken\n+\tpass after IPA inlining.\n+\n 2010-09-22  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* postreload.c (move2add_note_store): Add reg_symbol_ref[] checks"}, {"sha": "c61a1d2f75d56acd3527381cc6a8dba299bede71", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=5d7b099c0a22ecc85218a99ef0df58b9240fdd4e", "patch": "@@ -836,7 +836,6 @@ init_optimization_passes (void)\n       /* Initial scalar cleanups before alias computation.\n \t They ensure memory accesses are not indirect wherever possible.  */\n       NEXT_PASS (pass_strip_predict_hints);\n-      NEXT_PASS (pass_update_address_taken);\n       NEXT_PASS (pass_rename_ssa_copies);\n       NEXT_PASS (pass_complete_unrolli);\n       NEXT_PASS (pass_ccp);"}, {"sha": "8a53d5ed2b0cf7eda476f5ddd897c42ba6c43316", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=5d7b099c0a22ecc85218a99ef0df58b9240fdd4e", "patch": "@@ -4162,6 +4162,7 @@ optimize_inline_calls (tree fn)\n   basic_block bb;\n   int last = n_basic_blocks;\n   struct gimplify_ctx gctx;\n+  bool inlined_p = false;\n \n   /* There is no point in performing inlining if errors have already\n      occurred -- and we might crash if we try to inline invalid\n@@ -4201,7 +4202,7 @@ optimize_inline_calls (tree fn)\n      follow it; we'll trudge through them, processing their CALL_EXPRs\n      along the way.  */\n   FOR_EACH_BB (bb)\n-    gimple_expand_calls_inline (bb, &id);\n+    inlined_p |= gimple_expand_calls_inline (bb, &id);\n \n   pop_gimplify_context (NULL);\n \n@@ -4217,18 +4218,19 @@ optimize_inline_calls (tree fn)\n     }\n #endif\n \n-  /* Fold the statements before compacting/renumbering the basic blocks.  */\n+  /* Fold queued statements.  */\n   fold_marked_statements (last, id.statements_to_fold);\n   pointer_set_destroy (id.statements_to_fold);\n \n   gcc_assert (!id.debug_stmts);\n \n-  /* Renumber the (code) basic_blocks consecutively.  */\n-  compact_blocks ();\n+  /* If we didn't inline into the function there is nothing to do.  */\n+  if (!inlined_p)\n+    return 0;\n+\n   /* Renumber the lexical scoping (non-code) blocks consecutively.  */\n   number_blocks (fn);\n \n-  fold_cond_expr_cond ();\n   delete_unreachable_blocks_update_callgraph (&id);\n #ifdef ENABLE_CHECKING\n   verify_cgraph_node (id.dst_node);\n@@ -4241,6 +4243,7 @@ optimize_inline_calls (tree fn)\n   return (TODO_update_ssa\n \t  | TODO_cleanup_cfg\n \t  | (gimple_in_ssa_p (cfun) ? TODO_remove_unused_locals : 0)\n+\t  | (gimple_in_ssa_p (cfun) ? TODO_update_address_taken : 0)\n \t  | (profile_status != PROFILE_ABSENT ? TODO_rebuild_frequencies : 0));\n }\n \n@@ -5118,9 +5121,6 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \n   DECL_INITIAL (new_decl) = remap_blocks (DECL_INITIAL (id.src_fn), &id);\n \n-  /* Renumber the lexical scoping (non-code) blocks consecutively.  */\n-  number_blocks (id.dst_fn);\n-\n   declare_inline_vars (DECL_INITIAL (new_decl), vars);\n \n   if (!VEC_empty (tree, DECL_STRUCT_FUNCTION (old_decl)->local_decls))"}, {"sha": "9b4973f3bb04524d8aea29dd6244fe04f4eb955c", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7b099c0a22ecc85218a99ef0df58b9240fdd4e/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=5d7b099c0a22ecc85218a99ef0df58b9240fdd4e", "patch": "@@ -158,7 +158,6 @@ struct gimple_opt_pass pass_all_early_optimizations =\n static unsigned int\n execute_cleanup_cfg_post_optimizing (void)\n {\n-  fold_cond_expr_cond ();\n   cleanup_tree_cfg ();\n   cleanup_dead_labels ();\n   group_case_labels ();"}]}