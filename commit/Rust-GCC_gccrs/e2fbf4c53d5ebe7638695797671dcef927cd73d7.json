{"sha": "e2fbf4c53d5ebe7638695797671dcef927cd73d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJmYmY0YzUzZDVlYmU3NjM4Njk1Nzk3NjcxZGNlZjkyN2NkNzNkNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-10-23T19:16:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-10-23T19:16:37Z"}, "message": "LWG 2165\n\n\tLWG 2165\n\t* method.c (defaulted_late_check): Delete on eh-spec mismatch.\n\t(maybe_explain_implicit_delete): Explain it.\n\nFrom-SVN: r203989", "tree": {"sha": "11fd15b0df7169b1fc707ebcb47bb2b102072e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11fd15b0df7169b1fc707ebcb47bb2b102072e22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2fbf4c53d5ebe7638695797671dcef927cd73d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2fbf4c53d5ebe7638695797671dcef927cd73d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2fbf4c53d5ebe7638695797671dcef927cd73d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2fbf4c53d5ebe7638695797671dcef927cd73d7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f04b1bb6b124028008630fd791cdbd38925470c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f04b1bb6b124028008630fd791cdbd38925470c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f04b1bb6b124028008630fd791cdbd38925470c"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "123200bd929989c4249f1c9c888e77081b49bbb4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2fbf4c53d5ebe7638695797671dcef927cd73d7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2fbf4c53d5ebe7638695797671dcef927cd73d7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2fbf4c53d5ebe7638695797671dcef927cd73d7", "patch": "@@ -1,5 +1,9 @@\n 2013-10-23  Jason Merrill  <jason@redhat.com>\n \n+\tLWG 2165\n+\t* method.c (defaulted_late_check): Delete on eh-spec mismatch.\n+\t(maybe_explain_implicit_delete): Explain it.\n+\n \t* error.c (eh_spec_to_string): New.\n \t(cp_printer): Use it for %X.\n "}, {"sha": "594a004f947e8645ea7b3dcbc58f6f083e047c9d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2fbf4c53d5ebe7638695797671dcef927cd73d7/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2fbf4c53d5ebe7638695797671dcef927cd73d7/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=e2fbf4c53d5ebe7638695797671dcef927cd73d7", "patch": "@@ -1466,13 +1466,34 @@ maybe_explain_implicit_delete (tree decl)\n \t  tree parms = FUNCTION_FIRST_USER_PARMTYPE (decl);\n \t  tree parm_type = TREE_VALUE (parms);\n \t  bool const_p = CP_TYPE_CONST_P (non_reference (parm_type));\n+\t  tree raises = NULL_TREE;\n+\t  bool deleted_p = false;\n \t  tree scope = push_scope (ctype);\n-\t  inform (0, \"%q+#D is implicitly deleted because the default \"\n-\t\t \"definition would be ill-formed:\", decl);\n-\t  pop_scope (scope);\n+\n \t  synthesized_method_walk (ctype, sfk, const_p,\n-\t\t\t\t   NULL, NULL, NULL, NULL, true,\n+\t\t\t\t   &raises, NULL, &deleted_p, NULL, false,\n \t\t\t\t   DECL_INHERITED_CTOR_BASE (decl), parms);\n+\t  if (deleted_p)\n+\t    {\n+\t      inform (0, \"%q+#D is implicitly deleted because the default \"\n+\t\t      \"definition would be ill-formed:\", decl);\n+\t      synthesized_method_walk (ctype, sfk, const_p,\n+\t\t\t\t       NULL, NULL, NULL, NULL, true,\n+\t\t\t\t       DECL_INHERITED_CTOR_BASE (decl), parms);\n+\t    }\n+\t  else if (!comp_except_specs\n+\t\t   (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (decl)),\n+\t\t    raises, ce_normal))\n+\t    inform (DECL_SOURCE_LOCATION (decl), \"%q#F is implicitly \"\n+\t\t    \"deleted because its exception-specification does not \"\n+\t\t    \"match the implicit exception-specification %qX\",\n+\t\t    decl, raises);\n+#ifdef ENABLE_CHECKING\n+\t  else\n+\t    gcc_unreachable ();\n+#endif\n+\n+\t  pop_scope (scope);\n \t}\n \n       input_location = loc;\n@@ -1782,9 +1803,10 @@ defaulted_late_check (tree fn)\n \t\t\t      eh_spec, ce_normal))\n \t{\n \t  if (DECL_DEFAULTED_IN_CLASS_P (fn))\n-\t    error (\"function %q+D defaulted on its first declaration \"\n-\t\t   \"with an exception-specification that differs from \"\n-\t\t   \"the implicit declaration %q#D\", fn, implicit_fn);\n+\t    {\n+\t      DECL_DELETED_FN (fn) = true;\n+\t      eh_spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn));\n+\t    }\n \t  else\n \t    error (\"function %q+D defaulted on its redeclaration \"\n \t\t   \"with an exception-specification that differs from \""}, {"sha": "be2fd2fbf906dbef714832fd7e7b326528e8345d", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted23.C", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2fbf4c53d5ebe7638695797671dcef927cd73d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2fbf4c53d5ebe7638695797671dcef927cd73d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C?ref=e2fbf4c53d5ebe7638695797671dcef927cd73d7", "patch": "@@ -6,22 +6,32 @@ struct A\n   A() noexcept = default;\n };\n \n+A a;\n+\n struct B\n {\n-  B() throw (int) = default; // { dg-error \"exception-specification that differs from the implicit declaration\" }\n+  B() throw (int) = default; // { dg-message \"exception-specification\" }\n };\n \n+B b;\t\t\t\t// { dg-error \"deleted\" }\n+\n struct C\n {\n   C() throw (int) { }\n };\n \n+C c;\n+\n struct D: C\n {\n   D() throw (int) = default;\n };\n \n+D d;\n+\n struct E\n {\n   E() = default;\n };\n+\n+E e;"}, {"sha": "f2846fe390c7b07987c555dfff6a3f7900e30b2d", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted43.C", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2fbf4c53d5ebe7638695797671dcef927cd73d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2fbf4c53d5ebe7638695797671dcef927cd73d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted43.C?ref=e2fbf4c53d5ebe7638695797671dcef927cd73d7", "patch": "@@ -7,6 +7,8 @@ struct T\n   ~T() noexcept(false) { }\n };\n \n+T t;\n+\n struct A\n {\n   A() noexcept;\n@@ -24,6 +26,8 @@ struct U\n   ~U() noexcept(false) { }\n };\n \n+U u;\n+\n struct B\n {\n   B() noexcept(false);\n@@ -35,16 +39,22 @@ struct B\n B::B() noexcept(false) = default;\n B::~B() noexcept(false) = default;\n \n+B b;\n+\n struct V\n {\n   V() noexcept(false) { }\n   ~V() noexcept(false) { }\n };\n \n+V v;\n+\n struct C\n {\n-  C() noexcept = default;     // { dg-error \"defaulted\" }\n-  ~C() noexcept = default;    // { dg-error \"defaulted\" }\n+  C() noexcept = default;\t// { dg-message \"exception-specification\" }\n+  ~C() noexcept = default;\t// { dg-message \"exception-specification\" }\n \n   V v;\n };\n+\n+C c;\t\t\t\t// { dg-error \"deleted\" }"}]}