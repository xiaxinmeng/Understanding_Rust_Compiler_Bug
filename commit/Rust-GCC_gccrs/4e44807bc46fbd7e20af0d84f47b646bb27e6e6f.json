{"sha": "4e44807bc46fbd7e20af0d84f47b646bb27e6e6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU0NDgwN2JjNDZmYmQ3ZTIwYWYwZDg0ZjQ3YjY0NmJiMjdlNmU2Zg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-12-28T00:22:13Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-12-28T00:22:13Z"}, "message": "stmt.c (expand_cleanups): Add third parameter so that we can avoid marking a cleanup region if...\n\n\t* stmt.c (expand_cleanups): Add third parameter so that we can\n\tavoid marking a cleanup region if this cleanup is part of a fixup\n\tstyle goto.\n\t(expand_goto_internal): Pass a 1 to expand_cleanups.\n\t(bc_expand_goto_internal): Ditto.\n\t(fixup_gotos): Ditto.\n\t(expand_end_bindings): Pass a 0 to expand_cleanups.\n\nFrom-SVN: r8694", "tree": {"sha": "bfbb572518bb9f7e4ca2d1450956815dec8c92b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfbb572518bb9f7e4ca2d1450956815dec8c92b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e44807bc46fbd7e20af0d84f47b646bb27e6e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e44807bc46fbd7e20af0d84f47b646bb27e6e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e44807bc46fbd7e20af0d84f47b646bb27e6e6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e44807bc46fbd7e20af0d84f47b646bb27e6e6f/comments", "author": null, "committer": null, "parents": [{"sha": "808cfea199c97196c7d641ad144459fde7b245a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808cfea199c97196c7d641ad144459fde7b245a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/808cfea199c97196c7d641ad144459fde7b245a1"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "f96534cccfb0903d8885b76f4f7981ad303c60c3", "filename": "gcc/stmt.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e44807bc46fbd7e20af0d84f47b646bb27e6e6f/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e44807bc46fbd7e20af0d84f47b646bb27e6e6f/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=4e44807bc46fbd7e20af0d84f47b646bb27e6e6f", "patch": "@@ -449,7 +449,7 @@ static void bc_expand_variable_local_init PROTO((tree));\n static void bc_expand_decl_init\t\tPROTO((tree));\n static void expand_null_return_1\tPROTO((rtx, int));\n static int tail_recursion_args\t\tPROTO((tree, tree));\n-static void expand_cleanups\t\tPROTO((tree, tree));\n+static void expand_cleanups\t\tPROTO((tree, tree, int));\n static void bc_expand_start_case\tPROTO((struct nesting *, tree,\n \t\t\t\t\t       tree, char *));\n static int bc_pushcase\t\t\tPROTO((tree, tree));\n@@ -804,7 +804,7 @@ expand_goto_internal (body, label, last_insn)\n \t  /* Execute the cleanups for blocks we are exiting.  */\n \t  if (block->data.block.cleanups != 0)\n \t    {\n-\t      expand_cleanups (block->data.block.cleanups, NULL_TREE);\n+\t      expand_cleanups (block->data.block.cleanups, NULL_TREE, 1);\n \t      do_pending_stack_adjust ();\n \t    }\n \t}\n@@ -868,7 +868,7 @@ bc_expand_goto_internal (opcode, label, body)\n \t  /* Execute the cleanups for blocks we are exiting.  */\n \t  if (block->data.block.cleanups != 0)\n \t    {\n-\t      expand_cleanups (block->data.block.cleanups, NULL_TREE);\n+\t      expand_cleanups (block->data.block.cleanups, NULL_TREE, 1);\n \t      do_pending_stack_adjust ();\n \t    }\n \t}\n@@ -1181,7 +1181,7 @@ fixup_gotos (thisblock, stack_level, cleanup_list, first_insn, dont_jump_in)\n \t\tif (TREE_ADDRESSABLE (lists)\n \t\t    && TREE_VALUE (lists) != 0)\n \t\t  {\n-\t\t    expand_cleanups (TREE_VALUE (lists), 0);\n+\t\t    expand_cleanups (TREE_VALUE (lists), NULL_TREE, 1);\n \t\t    /* Pop any pushes done in the cleanups,\n \t\t       in case function is about to return.  */\n \t\t    do_pending_stack_adjust ();\n@@ -3102,7 +3102,7 @@ expand_end_bindings (vars, mark_ends, dont_jump_in)\n \t  expr_stmts_for_value = 0;\n \n \t  /* Do the cleanups.  */\n-\t  expand_cleanups (thisblock->data.block.cleanups, NULL_TREE);\n+\t  expand_cleanups (thisblock->data.block.cleanups, NULL_TREE, 0);\n \t  do_pending_stack_adjust ();\n \n \t  expr_stmts_for_value = old_expr_stmts_for_value;\n@@ -3679,22 +3679,27 @@ expand_anon_union_decl (decl, cleanup, decl_elts)\n    If DONT_DO is nonnull, then any list-element\n    whose TREE_PURPOSE matches DONT_DO is omitted.\n    This is sometimes used to avoid a cleanup associated with\n-   a value that is being returned out of the scope.  */\n+   a value that is being returned out of the scope.\n+\n+   If IN_FIXUP is non-zero, we are generating this cleanup for a fixup\n+   goto and handle protection regions specially in that case.  */\n \n static void\n-expand_cleanups (list, dont_do)\n+expand_cleanups (list, dont_do, in_fixup)\n      tree list;\n      tree dont_do;\n+     int in_fixup;\n {\n   tree tail;\n   for (tail = list; tail; tail = TREE_CHAIN (tail))\n     if (dont_do == 0 || TREE_PURPOSE (tail) != dont_do)\n       {\n \tif (TREE_CODE (TREE_VALUE (tail)) == TREE_LIST)\n-\t  expand_cleanups (TREE_VALUE (tail), dont_do);\n+\t  expand_cleanups (TREE_VALUE (tail), dont_do, in_fixup);\n \telse\n \t  {\n-\t    (*interim_eh_hook) (TREE_VALUE (tail));\n+\t    if (! in_fixup)\n+\t      (*interim_eh_hook) (TREE_VALUE (tail));\n \n \t    /* Cleanups may be run multiple times.  For example,\n \t       when exiting a binding contour, we expand the"}]}