{"sha": "60fdce11dc9e5ddf671b07a3fc6ed70476860b22", "node_id": "C_kwDOANBUbNoAKDYwZmRjZTExZGM5ZTVkZGY2NzFiMDdhM2ZjNmVkNzA0NzY4NjBiMjI", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-07T20:15:49Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-18T14:34:30Z"}, "message": "c, c++: -Wswitch warning on [[maybe_unused]] enumerator [PR105497]\n\nThis PR complains that we emit the \"enumeration value not handled in\nswitch\" warning even though the enumerator was marked with the\n[[maybe_unused]] attribute.\n\nI couldn't just check TREE_USED, because the enumerator could have been\nused earlier in the function, which doesn't play well with the\nc_do_switch_warnings warning.  Instead, I had to check the attributes on\nthe CONST_DECL.  This is easy since the TYPE_VALUES of an enum type are\nnow consistent between C and C++, both of which store the CONST_DECL in\nits TREE_VALUE.\n\n\tPR c++/105497\n\ngcc/c-family/ChangeLog:\n\n\t* c-warn.cc (c_do_switch_warnings): Don't warn about unhandled\n\tenumerator when it was marked with attribute unused.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Wswitch-1.c: New test.\n\t* g++.dg/warn/Wswitch-4.C: New test.", "tree": {"sha": "c8f625cb6000e14bf77d49ce48b2683660526034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8f625cb6000e14bf77d49ce48b2683660526034"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60fdce11dc9e5ddf671b07a3fc6ed70476860b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fdce11dc9e5ddf671b07a3fc6ed70476860b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60fdce11dc9e5ddf671b07a3fc6ed70476860b22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fdce11dc9e5ddf671b07a3fc6ed70476860b22/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe38b8d5dbfe3dd5209aece4ce2f7a6b303a2f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe38b8d5dbfe3dd5209aece4ce2f7a6b303a2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe38b8d5dbfe3dd5209aece4ce2f7a6b303a2f9"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "ea7335f3edfb3822a1711c906662e59cc8b82fa8", "filename": "gcc/c-family/c-warn.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fdce11dc9e5ddf671b07a3fc6ed70476860b22/gcc%2Fc-family%2Fc-warn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fdce11dc9e5ddf671b07a3fc6ed70476860b22/gcc%2Fc-family%2Fc-warn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.cc?ref=60fdce11dc9e5ddf671b07a3fc6ed70476860b22", "patch": "@@ -1738,8 +1738,8 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n   for (chain = TYPE_VALUES (type); chain; chain = TREE_CHAIN (chain))\n     {\n       tree value = TREE_VALUE (chain);\n-      if (TREE_CODE (value) == CONST_DECL)\n-\tvalue = DECL_INITIAL (value);\n+      tree attrs = DECL_ATTRIBUTES (value);\n+      value = DECL_INITIAL (value);\n       node = splay_tree_lookup (cases, (splay_tree_key) value);\n       if (node)\n \t{\n@@ -1769,6 +1769,13 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n       /* We've now determined that this enumerated literal isn't\n \t handled by the case labels of the switch statement.  */\n \n+      /* Don't warn if the enumerator was marked as unused.  We can't use\n+\t TREE_USED here: it could have been set on the enumerator if the\n+\t enumerator was used earlier.  */\n+      if (lookup_attribute (\"unused\", attrs)\n+\t  || lookup_attribute (\"maybe_unused\", attrs))\n+\tcontinue;\n+\n       /* If the switch expression is a constant, we only really care\n \t about whether that constant is handled by the switch.  */\n       if (cond && tree_int_cst_compare (cond, value))"}, {"sha": "de9ee03b0a3465931d33e4f2b7c9520cfcc1d49b", "filename": "gcc/testsuite/c-c++-common/Wswitch-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fdce11dc9e5ddf671b07a3fc6ed70476860b22/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWswitch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fdce11dc9e5ddf671b07a3fc6ed70476860b22/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWswitch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWswitch-1.c?ref=60fdce11dc9e5ddf671b07a3fc6ed70476860b22", "patch": "@@ -0,0 +1,29 @@\n+/* PR c++/105497 */\n+/* { dg-options \"-Wswitch\" } */\n+\n+enum E {\n+  A,\n+  B,\n+  C __attribute((unused)),\n+  D\n+};\n+\n+void\n+g (enum E e)\n+{\n+  switch (e)\n+    {\n+    case A:\n+    case B:\n+    case D:\n+      break;\n+    }\n+\n+  switch (e) // { dg-warning \"not handled in switch\" }\n+    {\n+    case A:\n+    case B:\n+    case C:\n+      break;\n+    }\n+}"}, {"sha": "553a57d777b5a306c0b85d0a33a8d64c71017ddf", "filename": "gcc/testsuite/g++.dg/warn/Wswitch-4.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fdce11dc9e5ddf671b07a3fc6ed70476860b22/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fdce11dc9e5ddf671b07a3fc6ed70476860b22/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-4.C?ref=60fdce11dc9e5ddf671b07a3fc6ed70476860b22", "patch": "@@ -0,0 +1,52 @@\n+// PR c++/105497\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wswitch\" }\n+\n+enum class Button\n+{\n+    Left,\n+    Right,\n+    Middle,\n+    NumberOfButtons [[maybe_unused]]\n+};\n+\n+enum class Sound\n+{\n+  Bark,\n+  Meow,\n+  Hiss,\n+  Moo __attribute((unused))\n+};\n+\n+enum class Chordata\n+{\n+  Urochordata,\n+  Cephalochordata,\n+  Vertebrata\n+};\n+\n+int main()\n+{\n+  Button b = Button::Left;\n+  switch (b) { // { dg-bogus \"not handled\" }\n+        case Button::Left:\n+        case Button::Right:\n+        case Button::Middle:\n+            break;\n+    }\n+\n+  Sound s = Sound::Bark;\n+  switch (s) { // { dg-bogus \"not handled\" }\n+    case Sound::Bark:\n+    case Sound::Meow:\n+    case Sound::Hiss:\n+      break;\n+  }\n+\n+  Chordata c = Chordata::Vertebrata;\n+  switch (c) { // { dg-warning \"not handled\" }\n+    case Chordata::Cephalochordata:\n+    case Chordata::Vertebrata:\n+      break;\n+  }\n+}"}]}