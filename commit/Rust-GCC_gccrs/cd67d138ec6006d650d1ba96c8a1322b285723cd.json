{"sha": "cd67d138ec6006d650d1ba96c8a1322b285723cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q2N2QxMzhlYzYwMDZkNjUwZDFiYTk2YzhhMTMyMmIyODU3MjNjZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-26T11:06:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-26T11:41:28Z"}, "message": "libstdc++: Make Networking TS headers more portable [PR100285]\n\nAdd more preprocessor conditions to check for constants being defined\nbefore using them, so that the Networking TS headers can be compiled on\na wider range of platforms.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100285\n\t* configure.ac: Check for O_NONBLOCK.\n\t* configure: Regenerate.\n\t* include/experimental/internet: Include <ws2tcpip.h> for\n\tWindows.  Use preprocessor conditions around more constants.\n\t* include/experimental/socket: Use preprocessor conditions\n\taround more constants.\n\t* testsuite/experimental/net/internet/resolver/base.cc: Only use\n\tconstants when the corresponding C macro is defined.\n\t* testsuite/experimental/net/socket/basic_socket.cc: Likewise.\n\t* testsuite/experimental/net/socket/socket_base.cc: Likewise.\n\tMake preprocessor checks more fine-grained.", "tree": {"sha": "886adb8089eadb3fb25be227526f90ca9e12de82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/886adb8089eadb3fb25be227526f90ca9e12de82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd67d138ec6006d650d1ba96c8a1322b285723cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd67d138ec6006d650d1ba96c8a1322b285723cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd67d138ec6006d650d1ba96c8a1322b285723cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd67d138ec6006d650d1ba96c8a1322b285723cd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e370a2482d41fd382055695b9a0a638ce75e1038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e370a2482d41fd382055695b9a0a638ce75e1038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e370a2482d41fd382055695b9a0a638ce75e1038"}], "stats": {"total": 149, "additions": 128, "deletions": 21}, "files": [{"sha": "138b99f42c4bcdc0f464d759a7436e474eeb65a7", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 74, "deletions": 8, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=cd67d138ec6006d650d1ba96c8a1322b285723cd", "patch": "@@ -2701,6 +2701,52 @@ $as_echo \"$ac_res\" >&6; }\n   eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n \n } # ac_fn_cxx_check_type\n+\n+# ac_fn_c_check_decl LINENO SYMBOL VAR INCLUDES\n+# ---------------------------------------------\n+# Tests whether SYMBOL is declared in INCLUDES, setting cache variable VAR\n+# accordingly.\n+ac_fn_c_check_decl ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  as_decl_name=`echo $2|sed 's/ *(.*//'`\n+  as_decl_use=`echo $2|sed -e 's/(/((/' -e 's/)/) 0&/' -e 's/,/) 0& (/g'`\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $as_decl_name is declared\" >&5\n+$as_echo_n \"checking whether $as_decl_name is declared... \" >&6; }\n+if eval \\${$3+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+#ifndef $as_decl_name\n+#ifdef __cplusplus\n+  (void) $as_decl_use;\n+#else\n+  (void) $as_decl_name;\n+#endif\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  eval \"$3=yes\"\n+else\n+  eval \"$3=no\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+\n+} # ac_fn_c_check_decl\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -12130,7 +12176,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12133 \"configure\"\n+#line 12179 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12236,7 +12282,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12239 \"configure\"\n+#line 12285 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15918,7 +15964,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15921 \"configure\"\n+#line 15967 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15953,7 +15999,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15956 \"configure\"\n+#line 16002 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15988,7 +16034,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15991 \"configure\"\n+#line 16037 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -16024,7 +16070,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16027 \"configure\"\n+#line 16073 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16177,7 +16223,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16180 \"configure\"\n+#line 16226 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16219,7 +16265,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n   cat > conftest.$ac_ext << EOF\n-#line 16222 \"configure\"\n+#line 16268 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -76614,6 +76660,26 @@ fi\n \n done\n \n+ac_fn_c_check_decl \"$LINENO\" \"F_GETFL\" \"ac_cv_have_decl_F_GETFL\" \"fcntl.h\n+\"\n+if test \"x$ac_cv_have_decl_F_GETFL\" = xyes; then :\n+\n+fi\n+\n+ac_fn_c_check_decl \"$LINENO\" \"F_SETFL\" \"ac_cv_have_decl_F_SETFL\" \"fcntl.h\n+\"\n+if test \"x$ac_cv_have_decl_F_SETFL\" = xyes; then :\n+\n+fi\n+\n+if  \"$ac_cv_have_decl_F_GETFL$ac_cv_have_decl_F_SETFL\" = 11 ; then\n+  ac_fn_c_check_decl \"$LINENO\" \"O_NONBLOCK\" \"ac_cv_have_decl_O_NONBLOCK\" \"fcntl.h\n+\"\n+if test \"x$ac_cv_have_decl_O_NONBLOCK\" = xyes; then :\n+\n+fi\n+\n+fi\n \n # For Transactional Memory TS\n "}, {"sha": "d29efa6cb5f3026a172994f5d3f6dc7e49940340", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=cd67d138ec6006d650d1ba96c8a1322b285723cd", "patch": "@@ -481,6 +481,11 @@ GLIBCXX_CHECK_FILESYSTEM_DEPS\n \n # For Networking TS.\n AC_CHECK_HEADERS([fcntl.h sys/ioctl.h sys/socket.h sys/uio.h poll.h netdb.h arpa/inet.h netinet/in.h netinet/tcp.h])\n+AC_CHECK_DECL(F_GETFL,[],[],[fcntl.h])\n+AC_CHECK_DECL(F_SETFL,[],[],[fcntl.h])\n+if [ \"$ac_cv_have_decl_F_GETFL$ac_cv_have_decl_F_SETFL\" = 11 ]; then\n+  AC_CHECK_DECL(O_NONBLOCK,[],[],[fcntl.h])\n+fi\n \n # For Transactional Memory TS\n GLIBCXX_CHECK_SIZE_T_MANGLING"}, {"sha": "6ce070ae7759030e1f5544445ff60c2fbed674b9", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=cd67d138ec6006d650d1ba96c8a1322b285723cd", "patch": "@@ -61,6 +61,10 @@\n # include <netdb.h>\t\t// getaddrinfo etc.\n #endif\n \n+#if defined _WIN32 && __has_include(<ws2tcpip.h>)\n+# include <ws2tcpip.h>\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -263,7 +267,11 @@ namespace ip\n     _S_ntoh_32(uint32_t __n) { return __builtin_bswap32(__n); }\n #endif\n \n+#ifdef _GLIBCXX_HAVE_ARPA_INET_H\n     in_addr_t _M_addr; // network byte order\n+#else\n+    uint32_t _M_addr;\n+#endif\n   };\n \n   /// An IPv6 address.\n@@ -705,7 +713,7 @@ namespace ip\n   inline address_v4\n   make_address_v4(string_view __str, error_code& __ec) noexcept\n   {\n-    char __buf[INET_ADDRSTRLEN];\n+    char __buf[16]; // INET_ADDRSTRLEN isn't defined on Windows\n     auto __len = __str.copy(__buf, sizeof(__buf));\n     if (__len == sizeof(__buf))\n       {\n@@ -1686,9 +1694,15 @@ namespace ip\n #ifdef AI_NUMERICSERV\n     static constexpr flags numeric_service\t= (flags)AI_NUMERICSERV;\n #endif\n+#ifdef AI_V4MAPPED\n     static constexpr flags v4_mapped\t\t= (flags)AI_V4MAPPED;\n+#endif\n+#ifdef AI_ALL\n     static constexpr flags all_matching\t\t= (flags)AI_ALL;\n+#endif\n+#ifdef AI_ADDRCONFIG\n     static constexpr flags address_configured\t= (flags)AI_ADDRCONFIG;\n+#endif\n \n     friend constexpr flags\n     operator&(flags __f1, flags __f2) noexcept"}, {"sha": "942416497771df6aa3a4cf26b7888fab53784fba", "filename": "libstdc++-v3/include/experimental/socket", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket?ref=cd67d138ec6006d650d1ba96c8a1322b285723cd", "patch": "@@ -293,11 +293,14 @@ inline namespace v1\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_SNDLOWAT;\n     };\n+#endif // HAVE_SYS_SOCKET_H\n \n     enum shutdown_type : int { };\n+#if defined SHUT_RD && defined SHUT_WR && defined SHUT_RDWR\n     static constexpr shutdown_type shutdown_receive = (shutdown_type)SHUT_RD;\n     static constexpr shutdown_type shutdown_send    = (shutdown_type)SHUT_WR;\n     static constexpr shutdown_type shutdown_both    = (shutdown_type)SHUT_RDWR;\n+#endif\n \n     enum wait_type : int { };\n #ifdef _GLIBCXX_HAVE_POLL_H\n@@ -311,14 +314,20 @@ inline namespace v1\n #endif\n \n     enum message_flags : int { };\n+#if defined MSG_PEEK && defined MSG_OOB && defined MSG_DONTROUTE\n     static constexpr message_flags message_peek\n       = (message_flags)MSG_PEEK;\n     static constexpr message_flags message_out_of_band\n       = (message_flags)MSG_OOB;\n     static constexpr message_flags message_do_not_route\n       = (message_flags)MSG_DONTROUTE;\n+#endif\n \n-    static const int max_listen_connections = SOMAXCONN;\n+#ifdef SOMAXCONN\n+    static constexpr int max_listen_connections = SOMAXCONN;\n+#else\n+    static constexpr int max_listen_connections = 4;\n+#endif\n \n     // message_flags bitmask operations are defined as hidden friends.\n \n@@ -350,6 +359,7 @@ inline namespace v1\n     operator^=(message_flags& __f1, message_flags __f2) noexcept\n     { return __f1 = (__f1 ^ __f2); }\n \n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n   protected:\n     struct __msg_hdr : ::msghdr\n     {\n@@ -483,7 +493,7 @@ inline namespace v1\n     void\n     native_non_blocking(bool __mode, error_code& __ec)\n     {\n-#ifdef _GLIBCXX_HAVE_FCNTL_H\n+#if defined _GLIBCXX_HAVE_FCNTL_H && defined _GLIBCXX_HAVE_DECL_O_NONBLOCK\n       int __flags = ::fcntl(_M_sockfd, F_GETFL, 0);\n       if (__flags >= 0)\n \t{\n@@ -508,7 +518,7 @@ inline namespace v1\n     bool\n     native_non_blocking() const\n     {\n-#ifdef _GLIBCXX_HAVE_FCNTL_H\n+#if defined _GLIBCXX_HAVE_FCNTL_H && defined _GLIBCXX_HAVE_DECL_O_NONBLOCK\n       if (_M_bits.native_non_blocking == -1)\n \t{\n \t  const int __flags = ::fcntl(_M_sockfd, F_GETFL, 0);\n@@ -714,7 +724,9 @@ inline namespace v1\n \t  {\n \t    error_code __ec;\n \t    cancel(__ec);\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \t    set_option(socket_base::linger{false, chrono::seconds{}}, __ec);\n+#endif\n \t    ::close(_M_sockfd);\n \t  }\n       }\n@@ -1892,11 +1904,13 @@ inline namespace v1\n       { open(__protocol); }\n \n       basic_socket_acceptor(io_context& __ctx, const endpoint_type& __endpoint,\n-\t\t\t    bool __reuse_addr = true)\n+\t\t\t    [[__maybe_unused__]] bool __reuse_addr = true)\n       : basic_socket_acceptor(__ctx, __endpoint.protocol())\n       {\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tif (__reuse_addr)\n \t  set_option(reuse_address(true));\n+#endif\n \tbind(__endpoint);\n \tlisten();\n       }"}, {"sha": "e2167b72c0db8f75cca6b15b965ad41acb0884e2", "filename": "libstdc++-v3/testsuite/experimental/net/internet/resolver/base.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fbase.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fbase.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fbase.cc?ref=cd67d138ec6006d650d1ba96c8a1322b285723cd", "patch": "@@ -32,9 +32,15 @@ static_assert( __gnu_test::test_bitmask_values({\n #ifdef AI_NUMERICSERV\n   resolver_base::numeric_service,\n #endif\n+#ifdef AI_V4MAPPED\n   resolver_base::v4_mapped,\n+#endif\n+#ifdef AI_ALL\n   resolver_base::all_matching,\n+#endif\n+#ifdef AI_ADDRCONFIG\n   resolver_base::address_configured\n+#endif\n }), \"each bitmask element is distinct\" );\n \n static_assert( ! std::is_default_constructible<resolver_base>(), \"protected\" );"}, {"sha": "6cf11f6c305090189a3b5b7076c93a12efed672a", "filename": "libstdc++-v3/testsuite/experimental/net/socket/basic_socket.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fbasic_socket.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fbasic_socket.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fbasic_socket.cc?ref=cd67d138ec6006d650d1ba96c8a1322b285723cd", "patch": "@@ -22,10 +22,6 @@\n namespace net = std::experimental::net;\n using namespace std;\n \n-namespace test\n-{\n-}\n-\n void\n test01(net::io_context& io)\n {\n@@ -113,8 +109,10 @@ test01(net::io_context& io)\n   s.bind(e);\n   s.bind(e, ec);\n \n+#ifdef SHUT_RDWR\n   s.shutdown(net::socket_base::shutdown_both);\n   s.shutdown(net::socket_base::shutdown_both, ec);\n+#endif\n \n   e = s.local_endpoint();\n   e = s.local_endpoint(ec);"}, {"sha": "67da9dbf1131e341b816ba865d2f2406e7e2d01c", "filename": "libstdc++-v3/testsuite/experimental/net/socket/socket_base.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fsocket_base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67d138ec6006d650d1ba96c8a1322b285723cd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fsocket_base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fsocket_base.cc?ref=cd67d138ec6006d650d1ba96c8a1322b285723cd", "patch": "@@ -174,24 +174,28 @@ void test_option_types()\n \n void test_constants()\n {\n-#if __has_include(<sys/socket.h>)\n   static_assert( is_enum<S::shutdown_type>::value, \"\" );\n+#if __has_include(<sys/socket.h>) && defined SHUT_RDWR\n   static_assert( S::shutdown_receive != S::shutdown_send, \"\" );\n   static_assert( S::shutdown_receive != S::shutdown_both, \"\" );\n   static_assert( S::shutdown_send != S::shutdown_both, \"\" );\n+#endif\n \n   static_assert( is_enum<S::wait_type>::value, \"\" );\n+#if __has_include(<poll.h>) && defined POLLIN\n   static_assert( S::wait_read != S::wait_write, \"\");\n   static_assert( S::wait_read != S::wait_error, \"\");\n   static_assert( S::wait_write != S::wait_error, \"\");\n+#endif\n \n+  static_assert( is_enum<S::message_flags>::value, \"\" );\n+#if __has_include(<sys/socket.h>) && defined MSG_OOB\n   static_assert( __gnu_test::test_bitmask_values(\n \t{S::message_peek, S::message_out_of_band, S::message_do_not_route}\n \t), \"each bitmask element is distinct\" );\n-\n-  auto m = &S::max_listen_connections;\n-  static_assert( is_same<decltype(m), const int*>::value, \"\" );\n #endif\n+\n+  static_assert( is_same<decltype(S::max_listen_connections), const int>::value, \"\" );\n }\n \n int main()"}]}