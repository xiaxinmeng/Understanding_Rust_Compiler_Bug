{"sha": "14e7281244ddf777d822f1e99518f0e15b0bfea6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRlNzI4MTI0NGRkZjc3N2Q4MjJmMWU5OTUxOGYwZTE1YjBiZmVhNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-09T15:15:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-09T15:15:28Z"}, "message": "fold-const.c (tree_swap_operands_p): Remove unused arg.\n\n2016-11-09  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (tree_swap_operands_p): Remove unused arg.\n\t* fold-const.c (tree_swap_operands_p): Likewise.\n\t(fold_binary_loc): Adjust.\n\t(fold_ternary_loc): Likewise.\n\t* genmatch.c (dt_operand::gen_gimple_exp): Likewise.\n\t* gimple-fold.c (fold_stmt_1): Likewise.\n\t* gimple-match-head.c (gimple_resimplify2): Likewise.\n\t(gimple_resimplify3): Likewise.\n\t(gimple_simplify): Likewise.\n\t* tree-ssa-dom.c (record_equality): Likewise.\n\t* tree-ssa-reassoc.c (optimize_range_tests_var_bound): Likewise.\n\t* tree-ssa-sccvn.c (vn_nary_op_compute_hash): Likewise.\n\t* tree-ssa-threadedge.c (simplify_control_stmt_condition_1): Likewise.\n\nFrom-SVN: r242004", "tree": {"sha": "73df188c516c30ba22babcd35c5781b2add0a224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73df188c516c30ba22babcd35c5781b2add0a224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14e7281244ddf777d822f1e99518f0e15b0bfea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e7281244ddf777d822f1e99518f0e15b0bfea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e7281244ddf777d822f1e99518f0e15b0bfea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e7281244ddf777d822f1e99518f0e15b0bfea6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c49f22a484e13d6fceeb2af6ea045c17ece466b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c49f22a484e13d6fceeb2af6ea045c17ece466b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c49f22a484e13d6fceeb2af6ea045c17ece466b"}], "stats": {"total": 52, "additions": 34, "deletions": 18}, "files": [{"sha": "2188dbfe5e360a4ae234e1daeeb30188e0b3aea6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14e7281244ddf777d822f1e99518f0e15b0bfea6", "patch": "@@ -1,3 +1,19 @@\n+2016-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (tree_swap_operands_p): Remove unused arg.\n+\t* fold-const.c (tree_swap_operands_p): Likewise.\n+\t(fold_binary_loc): Adjust.\n+\t(fold_ternary_loc): Likewise.\n+\t* genmatch.c (dt_operand::gen_gimple_exp): Likewise.\n+\t* gimple-fold.c (fold_stmt_1): Likewise.\n+\t* gimple-match-head.c (gimple_resimplify2): Likewise.\n+\t(gimple_resimplify3): Likewise.\n+\t(gimple_simplify): Likewise.\n+\t* tree-ssa-dom.c (record_equality): Likewise.\n+\t* tree-ssa-reassoc.c (optimize_range_tests_var_bound): Likewise.\n+\t* tree-ssa-sccvn.c (vn_nary_op_compute_hash): Likewise.\n+\t* tree-ssa-threadedge.c (simplify_control_stmt_condition_1): Likewise.\n+\n 2016-11-09  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-dom.c (canonicalize_comparison): Remove."}, {"sha": "e14471ed8d35c66d97223b70bfd21973cd1b29d0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=14e7281244ddf777d822f1e99518f0e15b0bfea6", "patch": "@@ -6758,7 +6758,7 @@ fold_single_bit_test (location_t loc, enum tree_code code,\n    isn't.  */\n \n bool\n-tree_swap_operands_p (const_tree arg0, const_tree arg1, bool)\n+tree_swap_operands_p (const_tree arg0, const_tree arg1)\n {\n   if (CONSTANT_CLASS_P (arg1))\n     return 0;\n@@ -9132,13 +9132,13 @@ fold_binary_loc (location_t loc,\n   /* If this is a commutative operation, and ARG0 is a constant, move it\n      to ARG1 to reduce the number of tests below.  */\n   if (commutative_tree_code (code)\n-      && tree_swap_operands_p (arg0, arg1, true))\n+      && tree_swap_operands_p (arg0, arg1))\n     return fold_build2_loc (loc, code, type, op1, op0);\n \n   /* Likewise if this is a comparison, and ARG0 is a constant, move it\n      to ARG1 to reduce the number of tests below.  */\n   if (kind == tcc_comparison\n-      && tree_swap_operands_p (arg0, arg1, true))\n+      && tree_swap_operands_p (arg0, arg1))\n     return fold_build2_loc (loc, swap_tree_comparison (code), type, op1, op0);\n \n   tem = generic_simplify (loc, code, type, op0, op1);\n@@ -11242,7 +11242,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n   /* If this is a commutative operation, and OP0 is a constant, move it\n      to OP1 to reduce the number of tests below.  */\n   if (commutative_ternary_tree_code (code)\n-      && tree_swap_operands_p (op0, op1, true))\n+      && tree_swap_operands_p (op0, op1))\n     return fold_build3_loc (loc, code, type, op1, op0, op2);\n \n   tem = generic_simplify (loc, code, type, op0, op1, op2);\n@@ -11371,7 +11371,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n       /* If the second operand is simpler than the third, swap them\n \t since that produces better jump optimization results.  */\n       if (truth_value_p (TREE_CODE (arg0))\n-\t  && tree_swap_operands_p (op1, op2, false))\n+\t  && tree_swap_operands_p (op1, op2))\n \t{\n \t  location_t loc0 = expr_location_or (arg0, loc);\n \t  /* See if this can be inverted.  If it can't, possibly because"}, {"sha": "46dcd2878296877a712845afb5a02018a26b9ca7", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=14e7281244ddf777d822f1e99518f0e15b0bfea6", "patch": "@@ -124,7 +124,7 @@ extern tree build_invariant_address (tree, tree, HOST_WIDE_INT);\n extern tree constant_boolean_node (bool, tree);\n extern tree div_if_zero_remainder (const_tree, const_tree);\n \n-extern bool tree_swap_operands_p (const_tree, const_tree, bool);\n+extern bool tree_swap_operands_p (const_tree, const_tree);\n extern enum tree_code swap_tree_comparison (enum tree_code);\n \n extern bool ptr_difference_const (tree, tree, HOST_WIDE_INT *);"}, {"sha": "41951c57940e6d4384f74a9f6711895b16902941", "filename": "gcc/genmatch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=14e7281244ddf777d822f1e99518f0e15b0bfea6", "patch": "@@ -2701,7 +2701,7 @@ dt_operand::gen_gimple_expr (FILE *f, int indent)\n \t  gen_opname (child_opname0, 0);\n \t  gen_opname (child_opname1, 1);\n \t  fprintf_indent (f, indent,\n-\t\t\t  \"if (tree_swap_operands_p (%s, %s, false))\\n\",\n+\t\t\t  \"if (tree_swap_operands_p (%s, %s))\\n\",\n \t\t\t  child_opname0, child_opname1);\n \t  fprintf_indent (f, indent,\n \t\t\t  \"  std::swap (%s, %s);\\n\","}, {"sha": "aabc8ff2a7192b088e0258e07ef61f8c699d9059", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=14e7281244ddf777d822f1e99518f0e15b0bfea6", "patch": "@@ -4166,7 +4166,7 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n \t    {\n \t      tree rhs1 = gimple_assign_rhs1 (stmt);\n \t      tree rhs2 = gimple_assign_rhs2 (stmt);\n-\t      if (tree_swap_operands_p (rhs1, rhs2, false))\n+\t      if (tree_swap_operands_p (rhs1, rhs2))\n \t\t{\n \t\t  gimple_assign_set_rhs1 (stmt, rhs2);\n \t\t  gimple_assign_set_rhs2 (stmt, rhs1);\n@@ -4232,7 +4232,7 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n \t/* Canonicalize operand order.  */\n \ttree lhs = gimple_cond_lhs (stmt);\n \ttree rhs = gimple_cond_rhs (stmt);\n-\tif (tree_swap_operands_p (lhs, rhs, false))\n+\tif (tree_swap_operands_p (lhs, rhs))\n \t  {\n \t    gcond *gc = as_a <gcond *> (stmt);\n \t    gimple_cond_set_lhs (gc, rhs);"}, {"sha": "09f729f62fd42c53170a64530a0eda8bd514ee2f", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=14e7281244ddf777d822f1e99518f0e15b0bfea6", "patch": "@@ -151,7 +151,7 @@ gimple_resimplify2 (gimple_seq *seq,\n   if (res_code->is_tree_code ()\n       && (TREE_CODE_CLASS ((enum tree_code) *res_code) == tcc_comparison\n \t  || commutative_tree_code (*res_code))\n-      && tree_swap_operands_p (res_ops[0], res_ops[1], false))\n+      && tree_swap_operands_p (res_ops[0], res_ops[1]))\n     {\n       std::swap (res_ops[0], res_ops[1]);\n       if (TREE_CODE_CLASS ((enum tree_code) *res_code) == tcc_comparison)\n@@ -212,7 +212,7 @@ gimple_resimplify3 (gimple_seq *seq,\n   bool canonicalized = false;\n   if (res_code->is_tree_code ()\n       && commutative_ternary_tree_code (*res_code)\n-      && tree_swap_operands_p (res_ops[0], res_ops[1], false))\n+      && tree_swap_operands_p (res_ops[0], res_ops[1]))\n     {\n       std::swap (res_ops[0], res_ops[1]);\n       canonicalized = true;\n@@ -432,7 +432,7 @@ gimple_simplify (enum tree_code code, tree type,\n      generation.  */\n   if ((commutative_tree_code (code)\n        || TREE_CODE_CLASS (code) == tcc_comparison)\n-      && tree_swap_operands_p (op0, op1, false))\n+      && tree_swap_operands_p (op0, op1))\n     {\n       std::swap (op0, op1);\n       if (TREE_CODE_CLASS (code) == tcc_comparison)\n@@ -466,7 +466,7 @@ gimple_simplify (enum tree_code code, tree type,\n   /* Canonicalize operand order both for matching and fallback stmt\n      generation.  */\n   if (commutative_ternary_tree_code (code)\n-      && tree_swap_operands_p (op0, op1, false))\n+      && tree_swap_operands_p (op0, op1))\n     std::swap (op0, op1);\n \n   code_helper rcode;"}, {"sha": "1839c8a20e53a01e45070cb5a9369a673efd4efd", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=14e7281244ddf777d822f1e99518f0e15b0bfea6", "patch": "@@ -1136,7 +1136,7 @@ record_equality (tree x, tree y, class const_and_copies *const_and_copies)\n {\n   tree prev_x = NULL, prev_y = NULL;\n \n-  if (tree_swap_operands_p (x, y, false))\n+  if (tree_swap_operands_p (x, y))\n     std::swap (x, y);\n \n   /* Most of the time tree_swap_operands_p does what we want.  But there"}, {"sha": "f781c5ff28c4f3aee0e7cfd3aae31f403dd28795", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=14e7281244ddf777d822f1e99518f0e15b0bfea6", "patch": "@@ -2980,7 +2980,7 @@ optimize_range_tests_var_bound (enum tree_code opcode, int first, int length,\n       gimple_set_uid (g, uid);\n       rhs2 = gimple_assign_lhs (g);\n       gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n-      if (tree_swap_operands_p (rhs1, rhs2, false))\n+      if (tree_swap_operands_p (rhs1, rhs2))\n \t{\n \t  std::swap (rhs1, rhs2);\n \t  ccode = swap_tree_comparison (ccode);"}, {"sha": "e25f07066d1e6aab1b14178e4120b52976c24ffb", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=14e7281244ddf777d822f1e99518f0e15b0bfea6", "patch": "@@ -2580,10 +2580,10 @@ vn_nary_op_compute_hash (const vn_nary_op_t vno1)\n \t&& commutative_tree_code (vno1->opcode))\n        || (vno1->length == 3\n \t   && commutative_ternary_tree_code (vno1->opcode)))\n-      && tree_swap_operands_p (vno1->op[0], vno1->op[1], false))\n+      && tree_swap_operands_p (vno1->op[0], vno1->op[1]))\n     std::swap (vno1->op[0], vno1->op[1]);\n   else if (TREE_CODE_CLASS (vno1->opcode) == tcc_comparison\n-\t   && tree_swap_operands_p (vno1->op[0], vno1->op[1], false))\n+\t   && tree_swap_operands_p (vno1->op[0], vno1->op[1]))\n     {\n       std::swap (vno1->op[0], vno1->op[1]);\n       vno1->opcode = swap_tree_comparison  (vno1->opcode);"}, {"sha": "534292c19e5a4ce3c6b0ae129adcacdc9635bc89", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e7281244ddf777d822f1e99518f0e15b0bfea6/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=14e7281244ddf777d822f1e99518f0e15b0bfea6", "patch": "@@ -564,7 +564,7 @@ simplify_control_stmt_condition_1 (edge e,\n      example, op0 might be a constant while op1 is an\n      SSA_NAME.  Failure to canonicalize will cause us to\n      miss threading opportunities.  */\n-  if (tree_swap_operands_p (op0, op1, false))\n+  if (tree_swap_operands_p (op0, op1))\n     {\n       cond_code = swap_tree_comparison (cond_code);\n       std::swap (op0, op1);"}]}