{"sha": "5efb104680a4b5552fec02cb1a69804682cbe42f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmYjEwNDY4MGE0YjU1NTJmZWMwMmNiMWE2OTgwNDY4MmNiZTQyZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-04T20:27:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-04T20:27:12Z"}, "message": "alpha.c, [...]: Revert the replacements of \"FALLTHRU\" with \"Fall through\" done in the previous...\n\n\t* config/alpha/alpha.c, config/arc/arc.c, config/avr/avr.c,\n\tconfig/i386/i386.c, config/i386/i386.h, config/i386/i386.md,\n\tconfig/ia64/ia64.c, config/ia64/unwind-ia64.c,\n\tconfig/m32r/m32r.c, config/ns32k/ns32k.c, config/pa/pa.c,\n\tconfig/pdp11/pdp11.c, config/rs6000/rs6000.c,\n\tconfig/sparc/sparc.c, config/vax/vax.c: Revert the\n\treplacements of \"FALLTHRU\" with \"Fall through\" done in the\n\tprevious patch.\n\nFrom-SVN: r77269", "tree": {"sha": "b4b574cb116de0b0298e990793f11668b650aac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4b574cb116de0b0298e990793f11668b650aac4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5efb104680a4b5552fec02cb1a69804682cbe42f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efb104680a4b5552fec02cb1a69804682cbe42f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efb104680a4b5552fec02cb1a69804682cbe42f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efb104680a4b5552fec02cb1a69804682cbe42f/comments", "author": null, "committer": null, "parents": [{"sha": "ff482c8d4dcefe197b218b574edbe655fb775733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff482c8d4dcefe197b218b574edbe655fb775733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff482c8d4dcefe197b218b574edbe655fb775733"}], "stats": {"total": 89, "additions": 50, "deletions": 39}, "files": [{"sha": "db2f9aed92dc621bba225f417b0252a1f2c38829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -1,3 +1,14 @@\n+2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/alpha/alpha.c, config/arc/arc.c, config/avr/avr.c,\n+\tconfig/i386/i386.c, config/i386/i386.h, config/i386/i386.md,\n+\tconfig/ia64/ia64.c, config/ia64/unwind-ia64.c,\n+\tconfig/m32r/m32r.c, config/ns32k/ns32k.c, config/pa/pa.c,\n+\tconfig/pdp11/pdp11.c, config/rs6000/rs6000.c,\n+\tconfig/sparc/sparc.c, config/vax/vax.c: Revert the\n+\treplacements of \"FALLTHRU\" with \"Fall through\" done in the\n+\tprevious patch.\n+\n 2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/darwin.c, config/darwin.h, config/freebsd-spec.h,"}, {"sha": "b1eb7f69b4f764bf055a6f36e8ceb3fcb475973d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -2112,7 +2112,7 @@ alpha_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = 0;\n \t  return true;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case CONST_DOUBLE:\n       if (x == CONST0_RTX (mode))\n@@ -2170,7 +2170,7 @@ alpha_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = COSTS_N_INSNS (1);\n \t  return false;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case ASHIFTRT:\n     case LSHIFTRT:\n@@ -2206,15 +2206,15 @@ alpha_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = COSTS_N_INSNS (1);\n \t  return false;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case ABS:\n       if (! float_mode_p)\n \t{\n \t  *total = COSTS_N_INSNS (1) + alpha_rtx_cost_data[alpha_cpu].int_cmov;\n \t  return false;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case FLOAT:\n     case UNSIGNED_FLOAT:\n@@ -3275,7 +3275,7 @@ alpha_emit_setcc (enum rtx_code code)\n     case NE:\n       if (!fp_p && op1 == const0_rtx)\n \tbreak;\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case ORDERED:\n       cmp_code = reverse_condition (code);\n@@ -3708,7 +3708,7 @@ alpha_emit_xfloating_libcall (const char *func, rtx target, rtx operands[],\n \tcase VOIDmode:\n \t  if (GET_CODE (operands[i]) != CONST_INT)\n \t    abort ();\n-\t  /* Fall through.  */\n+\t  /* FALLTHRU */\n \tcase DImode:\n \t  reg = gen_rtx_REG (DImode, regno);\n \t  regno += 1;\n@@ -6081,7 +6081,7 @@ function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n     case MODE_INT:\n       /* Do the same thing as PROMOTE_MODE.  */\n       mode = DImode;\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case MODE_COMPLEX_INT:\n     case MODE_VECTOR_INT:"}, {"sha": "e8e40199177f493e807f282faef337d3fb639380", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -834,7 +834,7 @@ arc_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n \t  *total = 0;\n \t  return true;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case CONST:\n     case LABEL_REF:"}, {"sha": "331f7cdfa648e0063415ff3aea11f01b11e964dc", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -4825,7 +4825,7 @@ avr_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = 2;\n \t  return true;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case CONST:\n     case LABEL_REF:"}, {"sha": "6a0701cbfebc261981ea542b6965d790bdefbfd8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -2573,7 +2573,7 @@ function_arg (CUMULATIVE_ARGS *cum,\t/* current arg information */\n       case BLKmode:\n \tif (bytes < 0)\n \t  break;\n-\t/* Fall through.  */\n+\t/* FALLTHRU */\n       case DImode:\n       case SImode:\n       case HImode:\n@@ -5836,7 +5836,7 @@ legitimate_pic_operand_p (rtx x)\n \t  default:\n \t    return false;\n \t  }\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -6712,7 +6712,7 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n \n     case LABEL_REF:\n       x = XEXP (x, 0);\n-      /* Fall through.  */\n+      /* FALLTHRU */\n     case CODE_LABEL:\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (x));\n       assemble_name (asm_out_file, buf);\n@@ -7100,13 +7100,13 @@ print_reg (rtx x, int code, FILE *file)\n \t  fputs (\"st(0)\", file);\n \t  break;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n     case 8:\n     case 4:\n     case 12:\n       if (! ANY_FP_REG_P (x))\n \tputc (code == 8 && TARGET_64BIT ? 'r' : 'e', file);\n-      /* Fall through.  */\n+      /* FALLTHRU */\n     case 16:\n     case 2:\n     normal:\n@@ -8630,15 +8630,15 @@ ix86_match_ccmode (rtx insn, enum machine_mode req_mode)\n     case CCmode:\n       if (req_mode == CCGCmode)\n \treturn 0;\n-      /* Fall through.  */\n+      /* FALLTHRU */\n     case CCGCmode:\n       if (req_mode == CCGOCmode || req_mode == CCNOmode)\n \treturn 0;\n-      /* Fall through.  */\n+      /* FALLTHRU */\n     case CCGOCmode:\n       if (req_mode == CCZmode)\n \treturn 0;\n-      /* Fall through.  */\n+      /* FALLTHRU */\n     case CCZmode:\n       break;\n \n@@ -14653,7 +14653,7 @@ ix86_force_to_memory (enum machine_mode mode, rtx operand)\n \tcase HImode:\n \tcase SImode:\n \t  operand = gen_lowpart (DImode, operand);\n-\t  /* Fall through.  */\n+\t  /* FALLTHRU */\n \tcase DImode:\n \t  emit_insn (\n \t\t      gen_rtx_SET (VOIDmode,\n@@ -14693,7 +14693,7 @@ ix86_force_to_memory (enum machine_mode mode, rtx operand)\n \t  /* It is better to store HImodes as SImodes.  */\n \t  if (!TARGET_PARTIAL_REG_STALL)\n \t    operand = gen_lowpart (SImode, operand);\n-\t  /* Fall through.  */\n+\t  /* FALLTHRU */\n \tcase SImode:\n \t  emit_insn (\n \t\t      gen_rtx_SET (VOIDmode,\n@@ -15058,7 +15058,7 @@ ix86_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t      return false;\n \t    }\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case ROTATE:\n     case ASHIFTRT:\n@@ -15166,15 +15166,15 @@ ix86_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t      return true;\n \t    }\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case MINUS:\n       if (FLOAT_MODE_P (mode))\n \t{\n \t  *total = COSTS_N_INSNS (ix86_cost->fadd);\n \t  return false;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case AND:\n     case IOR:\n@@ -15188,15 +15188,15 @@ ix86_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t               << (GET_MODE (XEXP (x, 1)) != DImode)));\n \t  return true;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case NEG:\n       if (FLOAT_MODE_P (mode))\n \t{\n \t  *total = COSTS_N_INSNS (ix86_cost->fchs);\n \t  return false;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case NOT:\n       if (!TARGET_64BIT && mode == DImode)"}, {"sha": "46bb52277ed8df4b7f86a7dbb1e9672cdee6467c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -580,7 +580,7 @@ extern int x86_prefetch_sse;\n \t    {\t\t\t\t\t\t\t\\\n \t    case '3':\t\t\t\t\t\t\\\n \t      builtin_define (\"__tune_pentium3__\");\t\t\\\n-\t      /* Fall through.  */\t\t\t\t\\\n+\t      /* FALLTHRU */\t\t\t\t\t\\\n \t    case '2':\t\t\t\t\t\t\\\n \t      builtin_define (\"__tune_pentium2__\");\t\t\\\n \t      break;\t\t\t\t\t\t\\"}, {"sha": "2c7bbb4a1ffe79b7ec79accbb89087416e8c0218", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -1955,7 +1955,7 @@\n     case TYPE_SSEMOV:\n       if (get_attr_mode (insn) == MODE_TI)\n \t  return \"movdqa\\t{%1, %0|%0, %1}\";\n-      /* Fall through.  */\n+      /* FALLTHRU */\n     case TYPE_MMXMOV:\n       /* Moves from and into integer register is done using movd opcode with\n  \t REX prefix.  */\n@@ -2005,7 +2005,7 @@\n     case TYPE_SSEMOV:\n       if (get_attr_mode (insn) == MODE_TI)\n \t  return \"movdqa\\t{%1, %0|%0, %1}\";\n-      /* Fall through.  */\n+      /* FALLTHRU */\n     case TYPE_MMXMOV:\n       return \"movq\\t{%1, %0|%0, %1}\";\n     case TYPE_MULTI:"}, {"sha": "449b136341db20ed1d1afe3d8eb9f967a3600fb2", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -425,7 +425,7 @@ sdata_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \t  || GET_CODE (XEXP (XEXP (op, 0), 0)) != SYMBOL_REF)\n \tbreak;\n       op = XEXP (XEXP (op, 0), 0);\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case SYMBOL_REF:\n       if (CONSTANT_POOL_ADDRESS_P (op))\n@@ -5299,7 +5299,7 @@ rtx_needs_barrier (rtx x, struct reg_flags flags, int pred)\n \n     case SUBREG:\n       x = SUBREG_REG (x);\n-      /* Fall through.  */\n+      /* FALLTHRU */\n     case REG:\n       if (REGNO (x) == AR_UNAT_REGNUM)\n \t{\n@@ -5550,7 +5550,7 @@ group_barrier_needed_p (rtx insn)\n \t  need_barrier = 1;\n \t  break;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case INSN:\n       if (GET_CODE (PATTERN (insn)) == USE"}, {"sha": "29c63fa13a7d2e5e301d3206a4f7ad714bd5e738", "filename": "gcc/config/ia64/unwind-ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -1614,7 +1614,7 @@ unw_access_gr (struct _Unwind_Context *info, int regnum,\n \t\t  *nat = 1;\n \t\t  return;\n \t\t}\n-\t      /* Fall through.  */\n+\t      /* FALLTHRU */\n \n \t    case UNW_NAT_NONE:\n \t      dummy_nat = 0;"}, {"sha": "849c73f3a60421fe5c8da27df1f1490b1bacc867", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -1689,7 +1689,7 @@ m32r_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n \t  *total = 0;\n \t  return true;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case CONST:\n     case LABEL_REF:"}, {"sha": "5b633ec0233c68405f909ac531ed73c317bc340e", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -598,7 +598,7 @@ ns32k_address_cost (rtx operand)\n \n     case MULT:\n       cost += 2;\n-      /* Fall through.  */\n+      /* FALLTHRU */\n     case PLUS:\n       cost += ns32k_address_cost (XEXP (operand, 0));\n       cost += ns32k_address_cost (XEXP (operand, 1));"}, {"sha": "0cce6a9e376e46df16b5211e5bb1376b87570726", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -1432,7 +1432,7 @@ hppa_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = COSTS_N_INSNS (14);\n \t  return true;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case UDIV:\n     case MOD:"}, {"sha": "9102dcdd3a002a2d8777e818215ebcad55614853", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -1084,7 +1084,7 @@ pdp11_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n \t  *total = 0;\n \t  return true;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case CONST:\n     case LABEL_REF:"}, {"sha": "27aef803b72a77921268053c36be6a9409c39a2c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -8974,7 +8974,7 @@ print_operand (FILE *file, rtx x, int code)\n     case 'Q':\n       if (TARGET_MFCRF)\n \tfputc (',',file);\n-        /* Fall through.  */\n+        /* FALLTHRU */\n       else\n \treturn;\n \n@@ -15581,7 +15581,7 @@ rs6000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n \t  *total = COSTS_N_INSNS (2);\n \t  return true;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case UDIV:\n     case UMOD:"}, {"sha": "29b6744fd3f86daa45e4ba7b29139f53bf78e056", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -8440,7 +8440,7 @@ sparc_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = 0;\n \t  return true;\n \t}\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case HIGH:\n       *total = 2;"}, {"sha": "7695d6964f833e7703fb59bc7079772834f3e493", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb104680a4b5552fec02cb1a69804682cbe42f/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=5efb104680a4b5552fec02cb1a69804682cbe42f", "patch": "@@ -557,7 +557,7 @@ vax_rtx_costs_1 (register rtx x, enum rtx_code code, enum rtx_code outer_code)\n         return 1;\n       if (outer_code == PLUS && (unsigned HOST_WIDE_INT) -INTVAL (x) <= 077)\n         return 1;\n-      /* Fall through.  */\n+      /* FALLTHRU */\n \n     case CONST:\n     case LABEL_REF:"}]}