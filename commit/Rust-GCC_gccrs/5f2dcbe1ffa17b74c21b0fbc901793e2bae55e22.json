{"sha": "5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyZGNiZTFmZmExN2I3NGMyMWIwZmJjOTAxNzkzZTJiYWU1NWUyMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-06-28T12:08:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-06-28T12:08:20Z"}, "message": "tree-pretty-print.c (dump_function_declaration): New.\n\n\t* tree-pretty-print.c (dump_function_declaration): New.\n\t(dump_generic_node, case FUNCTION_TYPE): Call it.\n\t(dump_generic_node, case RECORD_TYPE): Don't output dup semicolon.\n\t(dump_generic_node, case DECL_EXPR): New case.\n\t(dump_generic_node, case PLACEHOLDER_EXPR): Handle.\n\t(print_declaration): Handle type and function declarations.\n\nFrom-SVN: r83782", "tree": {"sha": "13e3e10d4216ca6266ab69d2aebec1579f117b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13e3e10d4216ca6266ab69d2aebec1579f117b4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22/comments", "author": null, "committer": null, "parents": [{"sha": "70883f7262c96220e2586ea15024ec545bb3acd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70883f7262c96220e2586ea15024ec545bb3acd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70883f7262c96220e2586ea15024ec545bb3acd7"}], "stats": {"total": 96, "additions": 66, "deletions": 30}, "files": [{"sha": "a102ca073cc16abbfa410897d125d67e84f8060a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22", "patch": "@@ -1,5 +1,12 @@\n 2004-06-28  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* tree-pretty-print.c (dump_function_declaration): New.\n+\t(dump_generic_node, case FUNCTION_TYPE): Call it.\n+\t(dump_generic_node, case RECORD_TYPE): Don't output dup semicolon.\n+\t(dump_generic_node, case DECL_EXPR): New case.\n+\t(dump_generic_node, case PLACEHOLDER_EXPR): Handle.\n+\t(print_declaration): Handle type and function declarations.\n+\t\n \t* tree-nested.c (create_tmp_var_for): Allow ARRAY_TYPE.\n \t(convert_nonlocal_reference, convert_local_reference): Properly\n \tconvert nest of handled component references."}, {"sha": "9eb478caaac73a7fe267b25037030ae2f70132fc", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 59, "deletions": 30, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=5f2dcbe1ffa17b74c21b0fbc901793e2bae55e22", "patch": "@@ -168,6 +168,40 @@ dump_decl_name (pretty_printer *buffer, tree node, int flags)\n     }\n }\n \n+/* Dump a function declaration.  NODE is the FUNCTION_TYPE.  BUFFER, SPC and\n+   FLAGS are as in dump_generic_node.  */\n+\n+static void\n+dump_function_declaration (pretty_printer *buffer, tree node,\n+\t\t\t   int spc, int flags)\n+{\n+  bool wrote_arg = false;\n+  tree arg;\n+\n+  pp_space (buffer);\n+  pp_character (buffer, '(');\n+\n+  /* Print the argument types.  The last element in the list is a VOID_TYPE.\n+     The following avoids printing the last element.  */\n+  arg = TYPE_ARG_TYPES (node);\n+  while (arg && TREE_CHAIN (arg) && arg != error_mark_node)\n+    {\n+      wrote_arg = true;\n+      dump_generic_node (buffer, TREE_VALUE (arg), spc, flags, false);\n+      arg = TREE_CHAIN (arg);\n+      if (TREE_CHAIN (arg) && TREE_CODE (TREE_CHAIN (arg)) == TREE_LIST)\n+\t{\n+\t  pp_character (buffer, ',');\n+\t  pp_space (buffer);\n+\t}\n+    }\n+\n+  if (!wrote_arg)\n+    pp_string (buffer, \"void\");\n+\n+  pp_character (buffer, ')');\n+}\n+\n /* Dump the node NODE on the pretty_printer BUFFER, SPC spaces of indent.\n    FLAGS specifies details to show in the dump (see TDF_* in tree.h).  If\n    IS_STMT is true, the object printed is considered to be a statement\n@@ -179,7 +213,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n {\n   tree type;\n   tree op0, op1;\n-  const char* str;\n+  const char *str;\n   bool is_expr;\n \n   if (node == NULL_TREE)\n@@ -296,6 +330,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       if (TREE_CODE (TREE_TYPE (node)) == FUNCTION_TYPE)\n         {\n \t  tree fnode = TREE_TYPE (node);\n+\n \t  dump_generic_node (buffer, TREE_TYPE (fnode), spc, flags, false);\n \t  pp_space (buffer);\n \t  pp_character (buffer, '(');\n@@ -306,24 +341,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t    pp_printf (buffer, \"<T%x>\", TYPE_UID (node));\n \n \t  pp_character (buffer, ')');\n-          pp_space (buffer);\n-\t  pp_character (buffer, '(');\n-\t  /* Print the argument types.  The last element in the list is a\n-\t     VOID_TYPE.  The following avoid to print the last element.  */\n-\t  {\n-\t    tree tmp = TYPE_ARG_TYPES (fnode);\n-\t    while (tmp && TREE_CHAIN (tmp) && tmp != error_mark_node)\n-\t      {\n-\t\tdump_generic_node (buffer, TREE_VALUE (tmp), spc, flags, false);\n-\t\ttmp = TREE_CHAIN (tmp);\n-\t\tif (TREE_CHAIN (tmp) && TREE_CODE (TREE_CHAIN (tmp)) == TREE_LIST)\n-\t\t  {\n-\t\t    pp_character (buffer, ',');\n-\t\t    pp_space (buffer);\n-\t\t  }\n-\t      }\n-\t  }\n-\t  pp_character (buffer, ')');\n+\t  dump_function_declaration (buffer, fnode, spc, flags);\n \t}\n       else\n         {\n@@ -544,9 +562,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  break;\n \t}\n       if (DECL_NAME (node))\n-\t{\n-\t  dump_decl_name (buffer, node, flags);\n-\t}\n+\tdump_decl_name (buffer, node, flags);\n       else\n \t{\n \t  if ((TREE_CODE (TREE_TYPE (node)) == RECORD_TYPE\n@@ -560,10 +576,10 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t    }\n \t  else\n \t    {\n-\t      pp_string (buffer, \"struct \");\n+\t      pp_string (buffer,\n+\t\t\t (TREE_CODE (TREE_TYPE (node)) == UNION_TYPE\n+\t\t\t  ? \"union\" : \"struct \"));\n \t      dump_generic_node (buffer, TREE_TYPE (node), spc, flags, false);\n-\t      pp_character (buffer, ';');\n-\t      pp_newline (buffer);\n \t    }\n \t}\n       break;\n@@ -766,6 +782,11 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       pp_character (buffer, '>');\n       break;\n \n+    case DECL_EXPR:\n+      print_declaration (buffer, DECL_EXPR_DECL (node), spc, flags);\n+      is_stmt = false;\n+      break;\n+\n     case COND_EXPR:\n       if (TREE_TYPE (node) == NULL || TREE_TYPE (node) == void_type_node)\n \t{\n@@ -884,7 +905,9 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       break;\n \n     case PLACEHOLDER_EXPR:\n-      NIY;\n+      pp_string (buffer, \"<PLACEHOLDER_EXPR \");\n+      dump_generic_node (buffer, TREE_TYPE (node), spc, flags, false);\n+      pp_character (buffer, '>');\n       break;\n \n       /* Binary arithmetic and logic expressions.  */\n@@ -1423,12 +1446,11 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n static void\n print_declaration (pretty_printer *buffer, tree t, int spc, int flags)\n {\n-  /* Don't print type declarations.  */\n-  if (TREE_CODE (t) == TYPE_DECL)\n-    return;\n-\n   INDENT (spc);\n \n+  if (TREE_CODE (t) == TYPE_DECL)\n+    pp_string (buffer, \"typedef \");\n+\n   if (DECL_REGISTER (t))\n     pp_string (buffer, \"register \");\n \n@@ -1471,6 +1493,13 @@ print_declaration (pretty_printer *buffer, tree t, int spc, int flags)\n \t  tmp = TREE_TYPE (tmp);\n \t}\n     }\n+  else if (TREE_CODE (t) == FUNCTION_DECL)\n+    {\n+      dump_generic_node (buffer, TREE_TYPE (TREE_TYPE (t)), spc, flags, false);\n+      pp_space (buffer);\n+      dump_decl_name (buffer, t, flags);\n+      dump_function_declaration (buffer, TREE_TYPE (t), spc, flags);\n+    }\n   else\n     {\n       /* Print type declaration.  */"}]}