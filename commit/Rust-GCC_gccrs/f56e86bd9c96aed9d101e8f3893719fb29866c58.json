{"sha": "f56e86bd9c96aed9d101e8f3893719fb29866c58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU2ZTg2YmQ5Yzk2YWVkOWQxMDFlOGYzODkzNzE5ZmIyOTg2NmM1OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-01-09T11:03:00Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-01-09T11:03:00Z"}, "message": "re PR target/8343 ([m68k] [3.2 regression] m68k-elf/rtems ICE at instantiate_virtual_regs_1)\n\n\t* i386.md (*mul*): FIx constraints; remove confused comment; fix\n\tathlon_decode attributes\n\t(imul/k8 optimization peep2s): New.\n\n\t* athlon.md (athlon_ssecmp*): Handle ssecomi as well.\n\t* i386.md (type attribute): Add ssecomi.\n\t(unit, memory, prefix attributes): Handle ssecomi.\n\t(cvt?2? patterns): Fix athlon_decode attribute\n\t(comi patterns): Set attribute to ssecomi.\n\n\tPR target/8343\n\t* m68k.md (umulsidi, mulsidi expanders): Use register operand.\n\nFrom-SVN: r61098", "tree": {"sha": "851a8ce28037f8e5813aa8af5eba3d11f02f7df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/851a8ce28037f8e5813aa8af5eba3d11f02f7df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f56e86bd9c96aed9d101e8f3893719fb29866c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56e86bd9c96aed9d101e8f3893719fb29866c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f56e86bd9c96aed9d101e8f3893719fb29866c58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56e86bd9c96aed9d101e8f3893719fb29866c58/comments", "author": null, "committer": null, "parents": [{"sha": "98c29f719c19ac2a166f19f14518f748952296d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c29f719c19ac2a166f19f14518f748952296d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c29f719c19ac2a166f19f14518f748952296d6"}], "stats": {"total": 443, "additions": 323, "deletions": 120}, "files": [{"sha": "4055fa12832aa413f1d76d311f3d70cb162c2a76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56e86bd9c96aed9d101e8f3893719fb29866c58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56e86bd9c96aed9d101e8f3893719fb29866c58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f56e86bd9c96aed9d101e8f3893719fb29866c58", "patch": "@@ -1,3 +1,18 @@\n+Thu Jan  9 12:00:36 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (*mul*): FIx constraints; remove confused comment; fix\n+\tathlon_decode attributes\n+\t(imul/k8 optimization peep2s): New.\n+\n+\t* athlon.md (athlon_ssecmp*): Handle ssecomi as well.\n+\t* i386.md (type attribute): Add ssecomi.\n+\t(unit, memory, prefix attributes): Handle ssecomi.\n+\t(cvt?2? patterns): Fix athlon_decode attribute\n+\t(comi patterns): Set attribute to ssecomi.\n+\n+\tPR target/8343\n+\t* m68k.md (umulsidi, mulsidi expanders): Use register operand.\n+\n 2003-01-09  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (PREDICATE_CODES): Add ADDRESSOF for predicates"}, {"sha": "375aa5b26ff73be5afc1376587540894695bdd64", "filename": "gcc/config/i386/athlon.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56e86bd9c96aed9d101e8f3893719fb29866c58/gcc%2Fconfig%2Fi386%2Fathlon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56e86bd9c96aed9d101e8f3893719fb29866c58/gcc%2Fconfig%2Fi386%2Fathlon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fathlon.md?ref=f56e86bd9c96aed9d101e8f3893719fb29866c58", "patch": "@@ -17,7 +17,7 @@\n ;; The load/store queue unit is not attached to the schedulers but\n ;; communicates with all the execution units separately instead.\n \n-(define_attr \"athlon_decode\" \"direct,vector\"\n+(define_attr \"athlon_decode\" \"direct,vector,double\"\n   (cond [(eq_attr \"type\" \"call,imul,idiv,other,multi,fcmov,fpspc,str,pop,cld,leave\")\n \t   (const_string \"vector\")\n          (and (eq_attr \"type\" \"push\")\n@@ -496,32 +496,32 @@\n \t\t\t \"athlon-double,athlon-fmul\")\n (define_insn_reservation \"athlon_ssecmp_load\" 5\n \t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n-\t\t\t      (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t      (and (eq_attr \"type\" \"ssecmp,ssecomi\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-vector,athlon-load,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecmp\" 2\n \t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n-\t\t\t      (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t      (and (eq_attr \"type\" \"ssecmp,ssecomi\")\n \t\t\t\t   (eq_attr \"mode\" \"SF,DF\")))\n \t\t\t \"athlon-direct,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecmpvector_load\" 6\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n-\t\t\t      (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t      (and (eq_attr \"type\" \"ssecmp,ssecomi\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecmpvector_load_k8\" 5\n \t\t\t (and (eq_attr \"cpu\" \"k8\")\n-\t\t\t      (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t      (and (eq_attr \"type\" \"ssecmp,ssecomi\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecmpvector\" 3\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n-\t\t\t      (eq_attr \"type\" \"ssecmp\"))\n+\t\t\t      (eq_attr \"type\" \"ssecmp,ssecomi\"))\n \t\t\t \"athlon-vector,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecmpvector_k8\" 3\n \t\t\t (and (eq_attr \"cpu\" \"k8\")\n-\t\t\t      (eq_attr \"type\" \"ssecmp\"))\n+\t\t\t      (eq_attr \"type\" \"ssecmp,ssecomi\"))\n \t\t\t \"athlon-double,athlon-fadd\")\n (define_insn_reservation \"athlon_sseadd_load\" 7\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")"}, {"sha": "03af61d957b507689f71314e7954df4cc1a5fdad", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 287, "deletions": 106, "changes": 393, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56e86bd9c96aed9d101e8f3893719fb29866c58/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56e86bd9c96aed9d101e8f3893719fb29866c58/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f56e86bd9c96aed9d101e8f3893719fb29866c58", "patch": "@@ -147,7 +147,7 @@\n    str,cld,\n    fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,\n    sselog,sseiadd,sseishft,sseimul,\n-   sse,ssemov,sseadd,ssemul,ssecmp,ssecvt,ssediv,\n+   sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,sseicvt,ssediv,\n    mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\"\n   (const_string \"other\"))\n \n@@ -161,7 +161,7 @@\n   (cond [(eq_attr \"type\" \"fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp\")\n \t   (const_string \"i387\")\n \t (eq_attr \"type\" \"sselog,sseiadd,sseishft,sseimul,\n-\t\t\t  sse,ssemov,sseadd,ssemul,ssecmp,ssecvt,ssediv\")\n+\t\t\t  sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,ssediv\")\n \t   (const_string \"sse\")\n \t (eq_attr \"type\" \"mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\")\n \t   (const_string \"mmx\")\n@@ -228,7 +228,7 @@\n     (eq_attr \"type\" \n              \"imovx,setcc,icmov,\n               sselog,sseiadd,sseishft,sseimul,\n-              sse,ssemov,sseadd,ssemul,ssecmp,ssecvt,ssediv,\n+              sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,ssediv,\n               mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\")\n     (const_int 1)\n     (const_int 0)))\n@@ -319,7 +319,7 @@\n \t   (if_then_else (match_operand 0 \"memory_operand\" \"\")\n \t     (const_string \"store\")\n \t     (const_string \"none\"))\n-\t (eq_attr \"type\" \"icmp,test,ssecmp,mmxcmp,fcmp\")\n+\t (eq_attr \"type\" \"icmp,test,ssecmp,ssecomi,mmxcmp,fcmp\")\n \t   (if_then_else (ior (match_operand 0 \"memory_operand\" \"\")\n \t\t\t      (match_operand 1 \"memory_operand\" \"\"))\n \t     (const_string \"load\")\n@@ -350,7 +350,7 @@\n \t\t \"!alu1,negnot,\n \t\t   imov,imovx,icmp,test,\n \t\t   fmov,fcmp,fsgn,\n-\t\t   sse,ssemov,ssecmp,ssecvt,\n+\t\t   sse,ssemov,ssecmp,ssecomi,ssecvt,\n \t\t   mmx,mmxmov,mmxcmp,mmxcvt\")\n \t      (match_operand 2 \"memory_operand\" \"\"))\n \t   (const_string \"load\")\n@@ -3845,17 +3845,18 @@\n    (set_attr \"mode\" \"SF,SF,SF,SF,DF\")])\n \n (define_insn \"*truncdfsf2_2\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=Y,!m\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=Y,Y,!m\")\n \t(float_truncate:SF\n-\t (match_operand:DF 1 \"nonimmediate_operand\" \"mY,f#Y\")))]\n+\t (match_operand:DF 1 \"nonimmediate_operand\" \"Y,mY,f#Y\")))]\n   \"TARGET_80387 && TARGET_SSE2 && !TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"cvtsd2ss\\t{%1, %0|%0, %1}\";\n     case 1:\n+      return \"cvtsd2ss\\t{%1, %0|%0, %1}\";\n+    case 2:\n       if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n \treturn \"fstp%z0\\t%y0\";\n       else\n@@ -3864,8 +3865,9 @@\n       abort ();\n     }\n }\n-  [(set_attr \"type\" \"ssecvt,fmov\")\n-   (set_attr \"mode\" \"DF,SF\")])\n+  [(set_attr \"type\" \"ssecvt,ssecvt,fmov\")\n+   (set_attr \"athlon_decode\" \"vector,double,*\")\n+   (set_attr \"mode\" \"DF,DF,SF\")])\n \n (define_insn \"*truncdfsf2_2_nooverlap\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=&Y,!m\")\n@@ -3905,12 +3907,13 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"truncdfsf2_sse_only\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=Y\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=Y,Y\")\n \t(float_truncate:SF\n-\t (match_operand:DF 1 \"nonimmediate_operand\" \"mY\")))]\n+\t (match_operand:DF 1 \"nonimmediate_operand\" \"Y,mY\")))]\n   \"!TARGET_80387 && TARGET_SSE2 && !TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS\"\n   \"cvtsd2ss\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*truncdfsf2_sse_only_nooverlap\"\n@@ -4372,18 +4375,20 @@\n \n ;; When SSE available, it is always faster to use it!\n (define_insn \"fix_truncsfdi_sse\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(fix:DI (match_operand:SF 1 \"nonimmediate_operand\" \"xm\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(fix:DI (match_operand:SF 1 \"nonimmediate_operand\" \"x,xm\")))]\n   \"TARGET_64BIT && TARGET_SSE\"\n   \"cvttss2si{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")])\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,vector\")])\n \n (define_insn \"fix_truncdfdi_sse\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(fix:DI (match_operand:DF 1 \"nonimmediate_operand\" \"Ym\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(fix:DI (match_operand:DF 1 \"nonimmediate_operand\" \"Y,Ym\")))]\n   \"TARGET_64BIT && TARGET_SSE2\"\n   \"cvttsd2si{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")])\n+  [(set_attr \"type\" \"sseicvt,sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,vector\")])\n \n ;; Signed conversion to SImode.\n \n@@ -4480,18 +4485,20 @@\n \n ;; When SSE available, it is always faster to use it!\n (define_insn \"fix_truncsfsi_sse\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(fix:SI (match_operand:SF 1 \"nonimmediate_operand\" \"xm\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(fix:SI (match_operand:SF 1 \"nonimmediate_operand\" \"x,xm\")))]\n   \"TARGET_SSE\"\n   \"cvttss2si\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")])\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,vector\")])\n \n (define_insn \"fix_truncdfsi_sse\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(fix:SI (match_operand:DF 1 \"nonimmediate_operand\" \"Ym\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(fix:SI (match_operand:DF 1 \"nonimmediate_operand\" \"Y,Ym\")))]\n   \"TARGET_SSE2\"\n   \"cvttsd2si\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")])\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,vector\")])\n \n (define_split \n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -4664,24 +4671,27 @@\n   \"\")\n \n (define_insn \"*floatsisf2_i387\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f#x,?f#x,x#f\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r,mr\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f#x,?f#x,x#f,x#f\")\n+\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r,r,mr\")))]\n   \"TARGET_80387 && (!TARGET_SSE || TARGET_MIX_SSE_I387)\"\n   \"@\n    fild%z1\\t%1\n    #\n+   cvtsi2ss\\t{%1, %0|%0, %1}\n    cvtsi2ss\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fmov,multi,ssecvt\")\n+  [(set_attr \"type\" \"fmov,multi,sseicvt,sseicvt\")\n    (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"*,*,vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_insn \"*floatsisf2_sse\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"mr\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n+\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"r,mr\")))]\n   \"TARGET_SSE\"\n   \"cvtsi2ss\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n ; Avoid possible reformatting penalty on the destination by first\n@@ -4718,24 +4728,27 @@\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_insn \"*floatdisf2_i387\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f#x,?f#x,x#f\")\n-\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,mr\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f#x,?f#x,x#f,x#f\")\n+\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,r,mr\")))]\n   \"TARGET_64BIT && TARGET_80387 && (!TARGET_SSE || TARGET_MIX_SSE_I387)\"\n   \"@\n    fild%z1\\t%1\n    #\n+   cvtsi2ss{q}\\t{%1, %0|%0, %1}\n    cvtsi2ss{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fmov,multi,ssecvt\")\n+  [(set_attr \"type\" \"fmov,multi,sseicvt,sseicvt\")\n    (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"*,*,vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_insn \"*floatdisf2_sse\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"mr\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n+\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"r,mr\")))]\n   \"TARGET_64BIT && TARGET_SSE\"\n   \"cvtsi2ss{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n ; Avoid possible reformatting penalty on the destination by first\n@@ -4772,24 +4785,27 @@\n   \"\")\n \n (define_insn \"*floatsidf2_i387\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,?f#Y,Y#f\")\n-\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r,mr\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,?f#Y,Y#f,Y#f\")\n+\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r,r,mr\")))]\n   \"TARGET_80387 && (!TARGET_SSE2 || TARGET_MIX_SSE_I387)\"\n   \"@\n    fild%z1\\t%1\n    #\n+   cvtsi2sd\\t{%1, %0|%0, %1}\n    cvtsi2sd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fmov,multi,ssecvt\")\n+  [(set_attr \"type\" \"fmov,multi,sseicvt,sseicvt\")\n    (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"*,*,double,direct\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_insn \"*floatsidf2_sse\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n-\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"mr\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=Y,Y\")\n+\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"r,mr\")))]\n   \"TARGET_SSE2\"\n   \"cvtsi2sd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"double,direct\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_expand \"floatdidf2\"\n@@ -4810,24 +4826,27 @@\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_insn \"*floatdidf2_i387\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,?f#Y,Y#f\")\n-\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,mr\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,?f#Y,Y#f,Y#f\")\n+\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,r,mr\")))]\n   \"TARGET_64BIT && TARGET_80387 && (!TARGET_SSE2 || TARGET_MIX_SSE_I387)\"\n   \"@\n    fild%z1\\t%1\n    #\n+   cvtsi2sd{q}\\t{%1, %0|%0, %1}\n    cvtsi2sd{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fmov,multi,ssecvt\")\n+  [(set_attr \"type\" \"fmov,multi,sseicvt,sseicvt\")\n    (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"*,*,double,direct\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_insn \"*floatdidf2_sse\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n-\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"mr\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=Y,Y\")\n+\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"r,mr\")))]\n   \"TARGET_SSE2\"\n   \"cvtsi2sd{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"double,direct\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_insn \"floathixf2\"\n@@ -6958,7 +6977,7 @@\n \n (define_insn \"*muldi3_1_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n-\t(mult:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%rm,0,0\")\n+\t(mult:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%rm,rm,0\")\n \t\t (match_operand:DI 2 \"x86_64_general_operand\" \"K,e,mr\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT\n@@ -6969,6 +6988,15 @@\n    imul{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"prefix_0f\" \"0,0,1\")\n+   (set (attr \"athlon_decode\")\n+\t(cond [(eq_attr \"cpu\" \"athlon\")\n+\t\t  (const_string \"vector\")\n+\t       (eq_attr \"alternative\" \"1\")\n+\t\t  (const_string \"vector\")\n+\t       (and (eq_attr \"alternative\" \"2\")\n+\t\t    (match_operand 1 \"memory_operand\" \"\"))\n+\t\t  (const_string \"vector\")]\n+\t      (const_string \"direct\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mulsi3\"\n@@ -6981,56 +7009,50 @@\n \n (define_insn \"*mulsi3_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n-\t(mult:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%rm,0,0\")\n+\t(mult:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%rm,rm,0\")\n \t\t (match_operand:SI 2 \"general_operand\" \"K,i,mr\")))\n    (clobber (reg:CC 17))]\n   \"GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM\"\n-  ; For the {r,0,i} alternative (i.e., register <- register * immediate),\n-  ; there are two ways of writing the exact same machine instruction\n-  ; in assembly language.  One, for example, is:\n-  ;\n-  ;   imul $12, %eax\n-  ;\n-  ; while the other is:\n-  ;\n-  ;   imul $12, %eax, %eax\n-  ;\n-  ; The first is simply short-hand for the latter.  But, some assemblers,\n-  ; like the SCO OSR5 COFF assembler, don't handle the first form.\n   \"@\n    imul{l}\\t{%2, %1, %0|%0, %1, %2}\n    imul{l}\\t{%2, %1, %0|%0, %1, %2}\n    imul{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"prefix_0f\" \"0,0,1\")\n+   (set (attr \"athlon_decode\")\n+\t(cond [(eq_attr \"cpu\" \"athlon\")\n+\t\t  (const_string \"vector\")\n+\t       (eq_attr \"alternative\" \"1\")\n+\t\t  (const_string \"vector\")\n+\t       (and (eq_attr \"alternative\" \"2\")\n+\t\t    (match_operand 1 \"memory_operand\" \"\"))\n+\t\t  (const_string \"vector\")]\n+\t      (const_string \"direct\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*mulsi3_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n \t(zero_extend:DI\n-\t  (mult:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%rm,0,0\")\n+\t  (mult:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%rm,rm,0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"K,i,mr\"))))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n-  ; For the {r,0,i} alternative (i.e., register <- register * immediate),\n-  ; there are two ways of writing the exact same machine instruction\n-  ; in assembly language.  One, for example, is:\n-  ;\n-  ;   imul $12, %eax\n-  ;\n-  ; while the other is:\n-  ;\n-  ;   imul $12, %eax, %eax\n-  ;\n-  ; The first is simply short-hand for the latter.  But, some assemblers,\n-  ; like the SCO OSR5 COFF assembler, don't handle the first form.\n   \"@\n    imul{l}\\t{%2, %1, %k0|%k0, %1, %2}\n    imul{l}\\t{%2, %1, %k0|%k0, %1, %2}\n    imul{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"prefix_0f\" \"0,0,1\")\n+   (set (attr \"athlon_decode\")\n+\t(cond [(eq_attr \"cpu\" \"athlon\")\n+\t\t  (const_string \"vector\")\n+\t       (eq_attr \"alternative\" \"1\")\n+\t\t  (const_string \"vector\")\n+\t       (and (eq_attr \"alternative\" \"2\")\n+\t\t    (match_operand 1 \"memory_operand\" \"\"))\n+\t\t  (const_string \"vector\")]\n+\t      (const_string \"direct\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_expand \"mulhi3\"\n@@ -7043,18 +7065,22 @@\n \n (define_insn \"*mulhi3_1\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r\")\n-\t(mult:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%rm,0,0\")\n+\t(mult:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%rm,rm,0\")\n \t\t (match_operand:HI 2 \"general_operand\" \"K,i,mr\")))\n    (clobber (reg:CC 17))]\n   \"GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM\"\n-  ; %%% There was a note about \"Assembler has weird restrictions\",\n-  ; concerning alternative 1 when op1 == op0.  True?\n   \"@\n    imul{w}\\t{%2, %1, %0|%0, %1, %2}\n    imul{w}\\t{%2, %1, %0|%0, %1, %2}\n    imul{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"prefix_0f\" \"0,0,1\")\n+   (set (attr \"athlon_decode\")\n+\t(cond [(eq_attr \"cpu\" \"athlon\")\n+\t\t  (const_string \"vector\")\n+\t       (eq_attr \"alternative\" \"1,2\")\n+\t\t  (const_string \"vector\")]\n+\t      (const_string \"direct\")))\n    (set_attr \"mode\" \"HI\")])\n \n (define_expand \"mulqi3\"\n@@ -7075,6 +7101,10 @@\n   \"mul{b}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"direct\")))\n    (set_attr \"mode\" \"QI\")])\n \n (define_expand \"umulqihi3\"\n@@ -7097,6 +7127,10 @@\n   \"mul{b}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"direct\")))\n    (set_attr \"mode\" \"QI\")])\n \n (define_expand \"mulqihi3\"\n@@ -7117,6 +7151,10 @@\n   \"imul{b}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"direct\")))\n    (set_attr \"mode\" \"QI\")])\n \n (define_expand \"umulditi3\"\n@@ -7140,6 +7178,10 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"double\")))\n    (set_attr \"mode\" \"DI\")])\n \n ;; We can't use this pattern in 64bit mode, since it results in two separate 32bit registers\n@@ -7164,6 +7206,10 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"double\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_expand \"mulditi3\"\n@@ -7186,6 +7232,10 @@\n   \"imul{q}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"double\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mulsidi3\"\n@@ -7208,6 +7258,10 @@\n   \"imul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"double\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_expand \"umuldi3_highpart\"\n@@ -7241,6 +7295,10 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"double\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"umulsi3_highpart\"\n@@ -7273,6 +7331,10 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"double\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*umulsi3_highpart_zext\"\n@@ -7292,6 +7354,10 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"double\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_expand \"smuldi3_highpart\"\n@@ -7324,6 +7390,10 @@\n   \"imul{q}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"double\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"smulsi3_highpart\"\n@@ -7355,6 +7425,10 @@\n   \"imul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"double\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*smulsi3_highpart_zext\"\n@@ -7373,6 +7447,10 @@\n   \"imul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+        (const_string \"vector\")\n+        (const_string \"double\")))\n    (set_attr \"mode\" \"SI\")])\n \n ;; The patterns that match these are at the end of this file.\n@@ -18125,6 +18203,102 @@\n \t      (set (reg:DI 7) (plus:DI (reg:DI 7) (const_int 8)))])]\n   \"\")\n \f\n+;; Imul $32bit_imm, mem, reg is vector decoded, while\n+;; imul $32bit_imm, reg, reg is direct decoded.\n+(define_peephole2\n+  [(match_scratch:DI 3 \"r\")\n+   (parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (mult:DI (match_operand:DI 1 \"memory_operand\" \"\")\n+\t\t\t    (match_operand:DI 2 \"immediate_operand\" \"\")))\n+\t      (clobber (reg:CC 17))])]\n+  \"TARGET_K8 && !optimize_size\n+   && (GET_CODE (operands[2]) != CONST_INT\n+       || !CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K'))\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (parallel [(set (match_dup 0) (mult:DI (match_dup 3) (match_dup 2)))\n+\t      (clobber (reg:CC 17))])]\n+\"\")\n+\n+(define_peephole2\n+  [(match_scratch:SI 3 \"r\")\n+   (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (mult:SI (match_operand:SI 1 \"memory_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"immediate_operand\" \"\")))\n+\t      (clobber (reg:CC 17))])]\n+  \"TARGET_K8 && !optimize_size\n+   && (GET_CODE (operands[2]) != CONST_INT\n+       || !CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K'))\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (parallel [(set (match_dup 0) (mult:SI (match_dup 3) (match_dup 2)))\n+\t      (clobber (reg:CC 17))])]\n+\"\")\n+\n+(define_peephole2\n+  [(match_scratch:SI 3 \"r\")\n+   (parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (zero_extend:DI\n+\t\t     (mult:SI (match_operand:SI 1 \"memory_operand\" \"\")\n+\t\t\t      (match_operand:SI 2 \"immediate_operand\" \"\"))))\n+\t      (clobber (reg:CC 17))])]\n+  \"TARGET_K8 && !optimize_size\n+   && (GET_CODE (operands[2]) != CONST_INT\n+       || !CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K'))\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (parallel [(set (match_dup 0) (zero_extend:DI (mult:SI (match_dup 3) (match_dup 2))))\n+\t      (clobber (reg:CC 17))])]\n+\"\")\n+\n+;; imul $8/16bit_imm, regmem, reg is vector decoded.\n+;; Convert it into imul reg, reg\n+;; It would be better to force assembler to encode instruction using long\n+;; immediate, but there is apparently no way to do so.\n+(define_peephole2\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (mult:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n+\t\t\t    (match_operand:DI 2 \"const_int_operand\" \"\")))\n+\t      (clobber (reg:CC 17))])\n+   (match_scratch:DI 3 \"r\")]\n+  \"TARGET_K8 && !optimize_size\n+   && CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K')\"\n+  [(set (match_dup 3) (match_dup 2))\n+   (parallel [(set (match_dup 0) (mult:DI (match_dup 0) (match_dup 3)))\n+\t      (clobber (reg:CC 17))])]\n+{\n+  if (!rtx_equal_p (operands[0], operands[1]))\n+    emit_move_insn (operands[0], operands[1]);\n+})\n+\n+(define_peephole2\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (mult:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"const_int_operand\" \"\")))\n+\t      (clobber (reg:CC 17))])\n+   (match_scratch:SI 3 \"r\")]\n+  \"TARGET_K8 && !optimize_size\n+   && CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K')\"\n+  [(set (match_dup 3) (match_dup 2))\n+   (parallel [(set (match_dup 0) (mult:SI (match_dup 0) (match_dup 3)))\n+\t      (clobber (reg:CC 17))])]\n+{\n+  if (!rtx_equal_p (operands[0], operands[1]))\n+    emit_move_insn (operands[0], operands[1]);\n+})\n+\n+(define_peephole2\n+  [(parallel [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t   (mult:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n+\t\t\t    (match_operand:HI 2 \"immediate_operand\" \"\")))\n+\t      (clobber (reg:CC 17))])\n+   (match_scratch:HI 3 \"r\")]\n+  \"TARGET_K8 && !optimize_size\"\n+  [(set (match_dup 3) (match_dup 2))\n+   (parallel [(set (match_dup 0) (mult:HI (match_dup 0) (match_dup 3)))\n+\t      (clobber (reg:CC 17))])]\n+{\n+  if (!rtx_equal_p (operands[0], operands[1]))\n+    emit_move_insn (operands[0], operands[1]);\n+})\n+\f\n ;; Call-value patterns last so that the wildcard operand does not\n ;; disrupt insn-recog's switch tables.\n \n@@ -19733,49 +19907,53 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"cvtsi2ss\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V4SF\n-\t (match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t (match_operand:V4SF 1 \"register_operand\" \"0,0\")\n \t (vec_duplicate:V4SF\n-\t  (float:SF (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n+\t  (float:SF (match_operand:SI 2 \"nonimmediate_operand\" \"r,rm\")))\n \t (const_int 14)))]\n   \"TARGET_SSE\"\n   \"cvtsi2ss\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"cvtsi2ssq\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V4SF\n-\t (match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t (match_operand:V4SF 1 \"register_operand\" \"0,0\")\n \t (vec_duplicate:V4SF\n-\t  (float:SF (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")))\n+\t  (float:SF (match_operand:DI 2 \"nonimmediate_operand\" \"r,rm\")))\n \t (const_int 14)))]\n   \"TARGET_SSE && TARGET_64BIT\"\n   \"cvtsi2ssq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"cvtss2si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(vec_select:SI\n-\t (fix:V4SI (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\"))\n+\t (fix:V4SI (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,m\"))\n \t (parallel [(const_int 0)])))]\n   \"TARGET_SSE\"\n   \"cvtss2si\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"cvttss2si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(vec_select:SI\n-\t (unspec:V4SI [(match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")]\n+\t (unspec:V4SI [(match_operand:V4SF 1 \"nonimmediate_operand\" \"x,xm\")]\n \t\t      UNSPEC_FIX)\n \t (parallel [(const_int 0)])))]\n   \"TARGET_SSE\"\n   \"cvttss2si\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"mode\" \"SF\")])\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"double,vector\")])\n \n \n ;; MMX insns\n@@ -21352,42 +21530,45 @@\n \t\t\t       (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2\"\n   \"cvtsd2si\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"cvttsd2si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI [(vec_select:DF (match_operand:V2DF 1 \"register_operand\" \"xm\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(unspec:SI [(vec_select:DF (match_operand:V2DF 1 \"register_operand\" \"x,xm\")\n \t\t\t\t   (parallel [(const_int 0)]))] UNSPEC_FIX))]\n   \"TARGET_SSE2\"\n   \"cvttsd2si\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"mode\" \"SI\")])\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"SI\")\n+   (set_attr \"athlon_decode\" \"double,vector\")])\n \n (define_insn \"cvtsi2sd\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n-\t(vec_merge:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n+\t(vec_merge:V2DF (match_operand:V2DF 1 \"register_operand\" \"0,0\")\n \t \t\t(vec_duplicate:V2DF\n \t\t\t  (float:DF\n-\t\t\t    (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n+\t\t\t    (match_operand:SI 2 \"nonimmediate_operand\" \"r,rm\")))\n \t\t\t(const_int 2)))]\n   \"TARGET_SSE2\"\n   \"cvtsi2sd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"mode\" \"DF\")])\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"double,direct\")])\n \n ;; Conversions between SF and DF\n \n (define_insn \"cvtsd2ss\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n-\t(vec_merge:V4SF (match_operand:V4SF 1 \"register_operand\" \"0\")\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n+\t(vec_merge:V4SF (match_operand:V4SF 1 \"register_operand\" \"0,0\")\n \t \t\t(vec_duplicate:V4SF\n \t\t\t  (float_truncate:V2SF\n-\t\t\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")))\n+\t\t\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,xm\")))\n \t\t\t(const_int 14)))]\n   \"TARGET_SSE2\"\n   \"cvtsd2ss\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"cvtss2sd\""}, {"sha": "67b099218d8089da22f35b4fed287b9b44edf389", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56e86bd9c96aed9d101e8f3893719fb29866c58/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56e86bd9c96aed9d101e8f3893719fb29866c58/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=f56e86bd9c96aed9d101e8f3893719fb29866c58", "patch": "@@ -3122,7 +3122,7 @@\n   [(parallel\n     [(set (subreg:SI (match_operand:DI 0 \"register_operand\" \"\") 4)\n \t  (mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n+\t\t   (match_operand:SI 2 \"register_operand\" \"\")))\n      (set (subreg:SI (match_dup 0) 0)\n \t  (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n \t\t\t\t\t     (zero_extend:DI (match_dup 2)))\n@@ -3161,7 +3161,7 @@\n   [(parallel\n     [(set (subreg:SI (match_operand:DI 0 \"register_operand\" \"\") 4)\n \t  (mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n+\t\t   (match_operand:SI 2 \"register_operand\" \"\")))\n      (set (subreg:SI (match_dup 0) 0)\n \t  (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n \t\t\t\t\t     (sign_extend:DI (match_dup 2)))"}, {"sha": "2f85f17a62bd259315592c71832b08d27f057cff", "filename": "gcc/java/keyword.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56e86bd9c96aed9d101e8f3893719fb29866c58/gcc%2Fjava%2Fkeyword.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56e86bd9c96aed9d101e8f3893719fb29866c58/gcc%2Fjava%2Fkeyword.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fkeyword.h?ref=f56e86bd9c96aed9d101e8f3893719fb29866c58", "patch": "@@ -1,7 +1,8 @@\n-/* C code produced by gperf version 2.7 */\n-/* Command-line: gperf -L C -C -F , 0 -p -t -j1 -i 1 -g -o -N java_keyword -k1,4,$ keyword.gperf  */\n+/* C code produced by gperf version 2.7.2 */\n+/* Command-line: gperf -L C -C -F ', 0' -p -t -j1 -i 1 -g -o -N java_keyword -k'1,4,$' keyword.gperf  */\n /* Keyword definition for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1997, 1998, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 2001, 2002, 2003\n+   Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GCC.\n@@ -44,6 +45,10 @@ const struct java_keyword *java_keyword\tPARAMS ((const char *, unsigned int));\n \n #ifdef __GNUC__\n __inline\n+#else\n+#ifdef __cplusplus\n+inline\n+#endif\n #endif\n static unsigned int\n hash (str, len)\n@@ -105,7 +110,8 @@ java_keyword (str, len)\n {\n   static const struct java_keyword wordlist[] =\n     {\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0},\n       {\"else\", ELSE_TK},\n       {\"true\", TRUE_TK},\n       {\"case\", CASE_TK},\n@@ -163,8 +169,9 @@ java_keyword (str, len)\n       {\"\", 0},\n       {\"finally\", FINALLY_TK},\n       {\"throw\", THROW_TK},\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n       {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0},\n       {\"strictfp\", STRICT_TK},\n       {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n       {\"private\", PRIVATE_TK}"}]}