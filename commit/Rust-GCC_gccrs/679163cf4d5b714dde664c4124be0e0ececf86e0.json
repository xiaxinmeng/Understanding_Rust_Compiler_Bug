{"sha": "679163cf4d5b714dde664c4124be0e0ececf86e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc5MTYzY2Y0ZDViNzE0ZGRlNjY0YzQxMjRiZTBlMGVjZWNmODZlMA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-17T20:13:01Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-17T20:13:01Z"}, "message": "expr.c (expand_expr, [...]): Move from the C++ frontend to the backend where it belongs.\n\n\t* expr.c (expand_expr, cond UNSAVE_EXPR): Move from the C++\n\tfrontend to the backend where it belongs.\n\t* tree.c (unsave_expr): Ditto.\n\t(unsave_expr_now): Ditto.\n\t* tree.def (UNSAVE_EXPR): Ditto.\n\t* tree.h (unsave_expr): Ditto.\n\t(unsave_expr_now): Ditto.\n\nFrom-SVN: r12015", "tree": {"sha": "984e0626a1a5e2e8f7ff306f11134448208ba86c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/984e0626a1a5e2e8f7ff306f11134448208ba86c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/679163cf4d5b714dde664c4124be0e0ececf86e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679163cf4d5b714dde664c4124be0e0ececf86e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/679163cf4d5b714dde664c4124be0e0ececf86e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679163cf4d5b714dde664c4124be0e0ececf86e0/comments", "author": null, "committer": null, "parents": [{"sha": "520e7ff5c74212d49b6b88b6808565300082691c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520e7ff5c74212d49b6b88b6808565300082691c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520e7ff5c74212d49b6b88b6808565300082691c"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "c10ff7b90e939ef6a5359abf57af04ba3954f5fd", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679163cf4d5b714dde664c4124be0e0ececf86e0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679163cf4d5b714dde664c4124be0e0ececf86e0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=679163cf4d5b714dde664c4124be0e0ececf86e0", "patch": "@@ -4905,6 +4905,14 @@ expand_expr (exp, target, tmode, modifier)\n \n       return SAVE_EXPR_RTL (exp);\n \n+    case UNSAVE_EXPR:\n+      {\n+\trtx temp;\n+\ttemp = expand_expr (TREE_OPERAND (exp, 0), target, tmode, modifier);\n+\tTREE_OPERAND (exp, 0) = unsave_expr_now (TREE_OPERAND (exp, 0));\n+\treturn temp;\n+      }\n+\n     case PLACEHOLDER_EXPR:\n       /* If there is an object on the head of the placeholder list,\n \t see if some object in it's references is of type TYPE.  For"}, {"sha": "fc4c983568a147f2968b2e959a663866ca3a04d6", "filename": "gcc/tree.c", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679163cf4d5b714dde664c4124be0e0ececf86e0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679163cf4d5b714dde664c4124be0e0ececf86e0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=679163cf4d5b714dde664c4124be0e0ececf86e0", "patch": "@@ -2156,6 +2156,91 @@ save_expr (expr)\n   TREE_SIDE_EFFECTS (t) = 1;\n   return t;\n }\n+\n+/* Arrange for an expression to be expanded multiple independent\n+   times.  This is useful for cleanup actions, as the backend can\n+   expand them multiple times in different places.  */\n+tree\n+unsave_expr (expr)\n+     tree expr;\n+{\n+  tree t;\n+\n+  /* If this is already protected, no sense in protecting it again.  */\n+  if (TREE_CODE (expr) == UNSAVE_EXPR)\n+    return expr;\n+\n+  t = build1 (UNSAVE_EXPR, TREE_TYPE (expr), expr);\n+  TREE_SIDE_EFFECTS (t) = TREE_SIDE_EFFECTS (expr);\n+  return t;\n+}\n+\n+/* Modify a tree in place so that all the evaluate only once things\n+   are cleared out.  Return the EXPR given.  */\n+tree\n+unsave_expr_now (expr)\n+     tree expr;\n+{\n+  enum tree_code code;\n+  register int i;\n+\n+  if (expr == NULL_TREE)\n+    return expr;\n+\n+  code = TREE_CODE (expr);\n+  switch (code)\n+    {\n+    case SAVE_EXPR:\n+      SAVE_EXPR_RTL (expr) = NULL_RTX;\n+      break;\n+\n+    case TARGET_EXPR:\n+      sorry (\"TARGET_EXPR reused inside UNSAVE_EXPR\");\n+      break;\n+      \n+    case RTL_EXPR:\n+      warning (\"RTL_EXPR reused inside UNSAVE_EXPR\");\n+      RTL_EXPR_SEQUENCE (expr) = NULL_RTX;\n+      break;\n+\n+    case CALL_EXPR:\n+      CALL_EXPR_RTL (expr) = NULL_RTX;\n+      if (TREE_OPERAND (expr, 1)\n+\t  && TREE_CODE (TREE_OPERAND (expr, 1)) == TREE_LIST)\n+\t{\n+\t  tree exp = TREE_OPERAND (expr, 1);\n+\t  while (exp)\n+\t    {\n+\t      unsave_expr_now (TREE_VALUE (exp));\n+\t      exp = TREE_CHAIN (exp);\n+\t    }\n+\t}\n+      break;\n+    }\n+\n+  switch (TREE_CODE_CLASS (code))\n+    {\n+    case 'c':  /* a constant */\n+    case 't':  /* a type node */\n+    case 'x':  /* something random, like an identifier or an ERROR_MARK.  */\n+    case 'd':  /* A decl node */\n+    case 'b':  /* A block node */\n+      return expr;\n+\n+    case 'e':  /* an expression */\n+    case 'r':  /* a reference */\n+    case 's':  /* an expression with side effects */\n+    case '<':  /* a comparison expression */\n+    case '2':  /* a binary arithmetic expression */\n+    case '1':  /* a unary arithmetic expression */\n+      for (i = tree_code_length[(int) code] - 1; i >= 0; i--)\n+\tunsave_expr_now (TREE_OPERAND (expr, i));\n+      return expr;\n+\n+    default:\n+      abort ();\n+    }\n+}\n \f\n /* Return 1 if EXP contains a PLACEHOLDER_EXPR; i.e., if it represents a size\n    or offset that depends on a field within a record."}, {"sha": "61f06a94a68f69e963a67b9d0c286f14f9186221", "filename": "gcc/tree.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679163cf4d5b714dde664c4124be0e0ececf86e0/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679163cf4d5b714dde664c4124be0e0ececf86e0/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=679163cf4d5b714dde664c4124be0e0ececf86e0", "patch": "@@ -646,6 +646,15 @@ DEFTREECODE (NON_LVALUE_EXPR, \"non_lvalue_expr\", \"1\", 1)\n    nonzero only after the expression has been computed.  */\n DEFTREECODE (SAVE_EXPR, \"save_expr\", \"e\", 3)\n \n+/* For a UNSAVE_EXPR, operand 0 is the value to unsave.  By unsave, we\n+   mean that all _EXPRs such as TARGET_EXPRs, SAVE_EXPRs,\n+   CALL_EXPRs and RTL_EXPRs, that are protected\n+   from being evaluated more than once should be reset so that a new\n+   expand_expr call of this expr will cause those to be re-evaluated.\n+   This is useful when we want to reuse a tree in different places,\n+   but where we must re-expand.  */\n+DEFTREECODE (UNSAVE_EXPR, \"unsave_expr\", \"e\", 1)\n+\n /* Represents something whose RTL has already been expanded\n    as a sequence which should be emitted when this expression is expanded.\n    The first operand is the RTL to emit.  It is the first of a chain of insns."}, {"sha": "ab2df453a5d4c3e897846f4321c79419acd75625", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679163cf4d5b714dde664c4124be0e0ececf86e0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679163cf4d5b714dde664c4124be0e0ececf86e0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=679163cf4d5b714dde664c4124be0e0ececf86e0", "patch": "@@ -1436,6 +1436,17 @@ extern int lvalue_or_else\t\tPROTO((tree, char *));\n \n extern tree save_expr\t\t\tPROTO((tree));\n \n+/* unsave_expr (EXP) returns an expression equivalent to EXP but it\n+   can be used multiple times and will evaluate EXP, in it's entirety\n+   each time.  */\n+\n+extern tree unsave_expr\t\t\tPROTO((tree));\n+\n+/* unsave_expr_now (EXP) resets EXP in place, so that it can be\n+   expanded again.  */\n+\n+extern tree unsave_expr_now\t\tPROTO((tree));\n+\n /* Return 1 if EXP contains a PLACEHOLDER_EXPR; i.e., if it represents a size\n    or offset that depends on a field within a record.\n "}]}