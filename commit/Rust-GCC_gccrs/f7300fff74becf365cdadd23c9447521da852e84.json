{"sha": "f7300fff74becf365cdadd23c9447521da852e84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjczMDBmZmY3NGJlY2YzNjVjZGFkZDIzYzk0NDc1MjFkYTg1MmU4NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-11-29T14:38:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-11-29T14:38:06Z"}, "message": "re PR tree-optimization/83202 (Try joining operations on consecutive array elements during tree vectorization)\n\n2017-11-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/83202\n\t* tree-vect-slp.c (scalar_stmts_set_t): New typedef.\n\t(bst_fail): Use it.\n\t(vect_analyze_slp_cost_1): Add visited set, do not account SLP\n\tnodes vectorized to the same stmts multiple times.\n\t(vect_analyze_slp_cost): Allocate a visited set and pass it down.\n\t(vect_analyze_slp_instance): Adjust.\n\t(scalar_stmts_to_slp_tree_map_t): New typedef.\n\t(vect_schedule_slp_instance): Add a map recording the SLP node\n\trepresenting the vectorized stmts for a set of scalar stmts.\n\tAvoid code-generating redundancies.\n\t(vect_schedule_slp): Allocate map and pass it down.\n\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr83202.c: New testcase.\n\nFrom-SVN: r255233", "tree": {"sha": "db9b2a10fc6481be1fda9bfc85276cb2c9e9f376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db9b2a10fc6481be1fda9bfc85276cb2c9e9f376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7300fff74becf365cdadd23c9447521da852e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7300fff74becf365cdadd23c9447521da852e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7300fff74becf365cdadd23c9447521da852e84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7300fff74becf365cdadd23c9447521da852e84/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5ed6a87ed359a8706bdfcc6853dacc881249fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ed6a87ed359a8706bdfcc6853dacc881249fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ed6a87ed359a8706bdfcc6853dacc881249fec"}], "stats": {"total": 81, "additions": 72, "deletions": 9}, "files": [{"sha": "003b6b161e5a25d839bd58cfdc80ba4bd102e380", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7300fff74becf365cdadd23c9447521da852e84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7300fff74becf365cdadd23c9447521da852e84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7300fff74becf365cdadd23c9447521da852e84", "patch": "@@ -1,3 +1,18 @@\n+2017-11-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83202\n+\t* tree-vect-slp.c (scalar_stmts_set_t): New typedef.\n+\t(bst_fail): Use it.\n+\t(vect_analyze_slp_cost_1): Add visited set, do not account SLP\n+\tnodes vectorized to the same stmts multiple times.\n+\t(vect_analyze_slp_cost): Allocate a visited set and pass it down.\n+\t(vect_analyze_slp_instance): Adjust.\n+\t(scalar_stmts_to_slp_tree_map_t): New typedef.\n+\t(vect_schedule_slp_instance): Add a map recording the SLP node\n+\trepresenting the vectorized stmts for a set of scalar stmts.\n+\tAvoid code-generating redundancies.\n+\t(vect_schedule_slp): Allocate map and pass it down.\n+\n 2017-11-29  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/83187"}, {"sha": "bf1e37444ba8d0cbf2cd207a4e30f4ae7d16d935", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7300fff74becf365cdadd23c9447521da852e84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7300fff74becf365cdadd23c9447521da852e84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7300fff74becf365cdadd23c9447521da852e84", "patch": "@@ -1,3 +1,8 @@\n+2017-11-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83202\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr83202.c: New testcase.\n+\n 2017-11-29  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/83187"}, {"sha": "bdec20fea2bc1c9b7137b4447b94a44b626464ad", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-pr83202.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7300fff74becf365cdadd23c9447521da852e84/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr83202.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7300fff74becf365cdadd23c9447521da852e84/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr83202.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr83202.c?ref=f7300fff74becf365cdadd23c9447521da852e84", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+\n+void test(double data[4][2])\n+{\n+  for (int i = 0; i < 4; i++)\n+    {\n+      data[i][0] = data[i][0] * data[i][0];\n+      data[i][1] = data[i][1] * data[i][1];\n+    }\n+}\n+\n+/* We should vectorize this with SLP and V2DF vectors.  */\n+/* { dg-final { scan-tree-dump \"vectorizing stmts using SLP\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */"}, {"sha": "19f2ac43fd638113327426f4fe76ecdd986f3c54", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7300fff74becf365cdadd23c9447521da852e84/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7300fff74becf365cdadd23c9447521da852e84/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=f7300fff74becf365cdadd23c9447521da852e84", "patch": "@@ -961,7 +961,8 @@ bst_traits::equal (value_type existing, value_type candidate)\n   return true;\n }\n \n-static hash_set <vec <gimple *>, bst_traits> *bst_fail;\n+typedef hash_set <vec <gimple *>, bst_traits> scalar_stmts_set_t;\n+static scalar_stmts_set_t *bst_fail;\n \n static slp_tree\n vect_build_slp_tree_2 (vec_info *vinfo,\n@@ -1674,19 +1675,27 @@ static void\n vect_analyze_slp_cost_1 (slp_instance instance, slp_tree node,\n \t\t\t stmt_vector_for_cost *prologue_cost_vec,\n \t\t\t stmt_vector_for_cost *body_cost_vec,\n-\t\t\t unsigned ncopies_for_cost)\n+\t\t\t unsigned ncopies_for_cost,\n+\t\t\t scalar_stmts_set_t* visited)\n {\n   unsigned i, j;\n   slp_tree child;\n   gimple *stmt;\n   stmt_vec_info stmt_info;\n   tree lhs;\n \n+  /* If we already costed the exact same set of scalar stmts we're done.\n+     We share the generated vector stmts for those.  */\n+  if (visited->contains (SLP_TREE_SCALAR_STMTS (node)))\n+    return;\n+\n+  visited->add (SLP_TREE_SCALAR_STMTS (node).copy ());\n+\n   /* Recurse down the SLP tree.  */\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n     if (SLP_TREE_DEF_TYPE (child) == vect_internal_def)\n       vect_analyze_slp_cost_1 (instance, child, prologue_cost_vec,\n-\t\t\t       body_cost_vec, ncopies_for_cost);\n+\t\t\t       body_cost_vec, ncopies_for_cost, visited);\n \n   /* Look at the first scalar stmt to determine the cost.  */\n   stmt = SLP_TREE_SCALAR_STMTS (node)[0];\n@@ -1871,9 +1880,11 @@ vect_analyze_slp_cost (slp_instance instance, void *data)\n \n   prologue_cost_vec.create (10);\n   body_cost_vec.create (10);\n+  scalar_stmts_set_t *visited = new scalar_stmts_set_t ();\n   vect_analyze_slp_cost_1 (instance, SLP_INSTANCE_TREE (instance),\n \t\t\t   &prologue_cost_vec, &body_cost_vec,\n-\t\t\t   ncopies_for_cost);\n+\t\t\t   ncopies_for_cost, visited);\n+  delete visited;\n \n   /* Record the prologue costs, which were delayed until we were\n      sure that SLP was successful.  */\n@@ -2037,7 +2048,7 @@ vect_analyze_slp_instance (vec_info *vinfo,\n   /* Build the tree for the SLP instance.  */\n   bool *matches = XALLOCAVEC (bool, group_size);\n   unsigned npermutes = 0;\n-  bst_fail = new hash_set <vec <gimple *>, bst_traits> ();\n+  bst_fail = new scalar_stmts_set_t ();\n   node = vect_build_slp_tree (vinfo, scalar_stmts, group_size,\n \t\t\t\t   &max_nunits, &loads, matches, &npermutes,\n \t\t\t      NULL, max_tree_size);\n@@ -3702,12 +3713,15 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n   return true;\n }\n \n-\n+typedef hash_map <vec <gimple *>, slp_tree,\n+\t\t  simple_hashmap_traits <bst_traits, slp_tree> >\n+  scalar_stmts_to_slp_tree_map_t;\n \n /* Vectorize SLP instance tree in postorder.  */\n \n static bool\n-vect_schedule_slp_instance (slp_tree node, slp_instance instance)\n+vect_schedule_slp_instance (slp_tree node, slp_instance instance,\n+\t\t\t    scalar_stmts_to_slp_tree_map_t *bst_map)\n {\n   gimple *stmt;\n   bool grouped_store, is_store;\n@@ -3721,8 +3735,19 @@ vect_schedule_slp_instance (slp_tree node, slp_instance instance)\n   if (SLP_TREE_DEF_TYPE (node) != vect_internal_def)\n     return false;\n \n+  /* See if we have already vectorized the same set of stmts and reuse their\n+     vectorized stmts.  */\n+  slp_tree &leader\n+    = bst_map->get_or_insert (SLP_TREE_SCALAR_STMTS (node).copy ());\n+  if (leader)\n+    {\n+      SLP_TREE_VEC_STMTS (node).safe_splice (SLP_TREE_VEC_STMTS (leader));\n+      return false;\n+    }\n+\n+  leader = node;\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n-    vect_schedule_slp_instance (child, instance);\n+    vect_schedule_slp_instance (child, instance, bst_map);\n \n   /* Push SLP node def-type to stmts.  */\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n@@ -3894,8 +3919,11 @@ vect_schedule_slp (vec_info *vinfo)\n   FOR_EACH_VEC_ELT (slp_instances, i, instance)\n     {\n       /* Schedule the tree of INSTANCE.  */\n+      scalar_stmts_to_slp_tree_map_t *bst_map\n+\t= new scalar_stmts_to_slp_tree_map_t ();\n       is_store = vect_schedule_slp_instance (SLP_INSTANCE_TREE (instance),\n-                                             instance);\n+                                             instance, bst_map);\n+      delete bst_map;\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n                          \"vectorizing stmts using SLP.\\n\");"}]}