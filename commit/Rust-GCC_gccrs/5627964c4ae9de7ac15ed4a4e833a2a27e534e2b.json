{"sha": "5627964c4ae9de7ac15ed4a4e833a2a27e534e2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYyNzk2NGM0YWU5ZGU3YWMxNWVkNGE0ZTgzM2EyYTI3ZTUzNGUyYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-29T15:32:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-29T15:32:42Z"}, "message": "[multiple changes]\n\n2014-01-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb Flag264 is now unused.\n\t(Has_Body_References): Removed.\n\t(Set_Has_Body_References): Removed.\n\t(Write_Entity_Flags): Remove the output for flag Has_Body_References.\n\t* einfo.ads Update the comment on usage of attribute\n\tBody_References. Remove attribute Has_Body_References and its\n\tusage in nodes.\n\t(Has_Body_References): Removed along with pragma Inline.\n\t(Set_Has_Body_References): Removed along with pragma Inline.\n\t* sem_prag.adb (Analyze_Global_Item): Move the call to\n\tRecord_Possible_Body_Reference in the state related checks\n\tsection. Add a comment intended function.\n\t(Analyze_Input_Output): Move the call to Record_Possible_Body_Reference\n\tin the state related checks section. Add a comment intended function.\n\t(Analyze_Refinement_Clause): Cleanup the illegal body reference\n\treporting. Add a comment on timing of error reporting.\n\t(Record_Possible_Body_Reference): Reimplement the routine.\n\n2014-01-29  Vincent Celier  <celier@adacore.com>\n\n\t* makeutl.adb (Mains.Find_File_Add_Extension): Only look for specs for\n\tunit-based languages.\n\t(Mains.Complete_Mains.Do_Complete): Use the source file project\n\ttree when calling Find_File_Add_Extension. Use the correct\n\tproject name when reporting an error.\n\nFrom-SVN: r207252", "tree": {"sha": "4ce74672c4eaa4ed8aab543e4cb09646b1e79712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ce74672c4eaa4ed8aab543e4cb09646b1e79712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/comments", "author": null, "committer": null, "parents": [{"sha": "d7af5ea5e1fa0a97b4cd7decf14cbcc9686b1524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7af5ea5e1fa0a97b4cd7decf14cbcc9686b1524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7af5ea5e1fa0a97b4cd7decf14cbcc9686b1524"}], "stats": {"total": 196, "additions": 126, "deletions": 70}, "files": [{"sha": "86168ba5186f6838b3cbe1c8a85d8e3118c93c0f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5627964c4ae9de7ac15ed4a4e833a2a27e534e2b", "patch": "@@ -1,3 +1,31 @@\n+2014-01-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb Flag264 is now unused.\n+\t(Has_Body_References): Removed.\n+\t(Set_Has_Body_References): Removed.\n+\t(Write_Entity_Flags): Remove the output for flag Has_Body_References.\n+\t* einfo.ads Update the comment on usage of attribute\n+\tBody_References. Remove attribute Has_Body_References and its\n+\tusage in nodes.\n+\t(Has_Body_References): Removed along with pragma Inline.\n+\t(Set_Has_Body_References): Removed along with pragma Inline.\n+\t* sem_prag.adb (Analyze_Global_Item): Move the call to\n+\tRecord_Possible_Body_Reference in the state related checks\n+\tsection. Add a comment intended function.\n+\t(Analyze_Input_Output): Move the call to Record_Possible_Body_Reference\n+\tin the state related checks section. Add a comment intended function.\n+\t(Analyze_Refinement_Clause): Cleanup the illegal body reference\n+\treporting. Add a comment on timing of error reporting.\n+\t(Record_Possible_Body_Reference): Reimplement the routine.\n+\n+2014-01-29  Vincent Celier  <celier@adacore.com>\n+\n+\t* makeutl.adb (Mains.Find_File_Add_Extension): Only look for specs for\n+\tunit-based languages.\n+\t(Mains.Complete_Mains.Do_Complete): Use the source file project\n+\ttree when calling Find_File_Add_Extension. Use the correct\n+\tproject name when reporting an error.\n+\n 2014-01-29  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* aspects.adb Add an entry for aspect Part_Of in table"}, {"sha": "cd592113d4540d9a36a573140fbb91fd42b389d0", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=5627964c4ae9de7ac15ed4a4e833a2a27e534e2b", "patch": "@@ -552,14 +552,14 @@ package body Einfo is\n    --    Has_Delayed_Rep_Aspects         Flag261\n    --    May_Inherit_Delayed_Rep_Aspects Flag262\n    --    Has_Visible_Refinement          Flag263\n-   --    Has_Body_References             Flag264\n    --    SPARK_Pragma_Inherited          Flag265\n    --    SPARK_Aux_Pragma_Inherited      Flag266\n \n    --    (unused)                        Flag1\n    --    (unused)                        Flag2\n    --    (unused)                        Flag3\n \n+   --    (unused)                        Flag264\n    --    (unused)                        Flag267\n    --    (unused)                        Flag268\n    --    (unused)                        Flag269\n@@ -1334,12 +1334,6 @@ package body Einfo is\n       return Flag139 (Id);\n    end Has_Biased_Representation;\n \n-   function Has_Body_References (Id : E) return B is\n-   begin\n-      pragma Assert (Ekind (Id) = E_Abstract_State);\n-      return Flag264 (Id);\n-   end Has_Body_References;\n-\n    function Has_Completion (Id : E) return B is\n    begin\n       return Flag26 (Id);\n@@ -4007,12 +4001,6 @@ package body Einfo is\n       Set_Flag139 (Id, V);\n    end Set_Has_Biased_Representation;\n \n-   procedure Set_Has_Body_References (Id : E; V : B := True) is\n-   begin\n-      pragma Assert (Ekind (Id) = E_Abstract_State);\n-      Set_Flag264 (Id, V);\n-   end Set_Has_Body_References;\n-\n    procedure Set_Has_Completion (Id : E; V : B := True) is\n    begin\n       Set_Flag26 (Id, V);\n@@ -8109,7 +8097,6 @@ package body Einfo is\n       W (\"Has_Anonymous_Master\",            Flag253 (Id));\n       W (\"Has_Atomic_Components\",           Flag86  (Id));\n       W (\"Has_Biased_Representation\",       Flag139 (Id));\n-      W (\"Has_Body_References\",             Flag264 (Id));\n       W (\"Has_Completion\",                  Flag26  (Id));\n       W (\"Has_Completion_In_Body\",          Flag71  (Id));\n       W (\"Has_Complex_Representation\",      Flag140 (Id));"}, {"sha": "eec27081422baa63292243d4fc45e5021c91584f", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=5627964c4ae9de7ac15ed4a4e833a2a27e534e2b", "patch": "@@ -494,10 +494,10 @@ package Einfo is\n --       when the unit is part of a standalone library.\n \n --    Body_References (Elist16)\n---       Defined in abstract state entities. Only set if Has_Body_References\n---       flag is set True, in which case it contains an element list of global\n---       references (identifiers) in the current package body to this abstract\n---       state that are illegal if the abstract state has a visible refinement.\n+--       Defined in abstract state entities. Contains an element list of\n+--       references (identifiers) that appear in a package body whose spec\n+--       defines the related state. If the body refines the said state, all\n+--       references on this list are illegal due to the visible refinement.\n \n --    C_Pass_By_Copy (Flag125) [implementation base type only]\n --       Defined in record types. Set if a pragma Convention for the record\n@@ -1407,10 +1407,6 @@ package Einfo is\n --       size of the type, forcing biased representation for the object, but\n --       the subtype is still an unbiased type.\n \n---    Has_Body_References (Flag264)\n---       Defined in entities for abstract states. Set if Body_References has\n---       at least one entry.\n-\n --    Has_Completion (Flag26)\n --       Defined in all entities that require a completion (functions,\n --       procedures, private types, limited private types, incomplete types,\n@@ -5155,7 +5151,6 @@ package Einfo is\n    --    Body_References                     (Elist16)\n    --    Non_Limited_View                    (Node17)\n    --    From_Limited_With                   (Flag159)\n-   --    Has_Body_References                 (Flag264)\n    --    Has_Visible_Refinement              (Flag263)\n    --    Has_Non_Null_Refinement             (synth)\n    --    Has_Null_Refinement                 (synth)\n@@ -6378,7 +6373,6 @@ package Einfo is\n    function Has_Anonymous_Master                (Id : E) return B;\n    function Has_Atomic_Components               (Id : E) return B;\n    function Has_Biased_Representation           (Id : E) return B;\n-   function Has_Body_References                 (Id : E) return B;\n    function Has_Completion                      (Id : E) return B;\n    function Has_Completion_In_Body              (Id : E) return B;\n    function Has_Complex_Representation          (Id : E) return B;\n@@ -6999,7 +6993,6 @@ package Einfo is\n    procedure Set_Has_Anonymous_Master            (Id : E; V : B := True);\n    procedure Set_Has_Atomic_Components           (Id : E; V : B := True);\n    procedure Set_Has_Biased_Representation       (Id : E; V : B := True);\n-   procedure Set_Has_Body_References             (Id : E; V : B := True);\n    procedure Set_Has_Completion                  (Id : E; V : B := True);\n    procedure Set_Has_Completion_In_Body          (Id : E; V : B := True);\n    procedure Set_Has_Complex_Representation      (Id : E; V : B := True);\n@@ -7731,7 +7724,6 @@ package Einfo is\n    pragma Inline (Has_Anonymous_Master);\n    pragma Inline (Has_Atomic_Components);\n    pragma Inline (Has_Biased_Representation);\n-   pragma Inline (Has_Body_References);\n    pragma Inline (Has_Completion);\n    pragma Inline (Has_Completion_In_Body);\n    pragma Inline (Has_Complex_Representation);\n@@ -8199,7 +8191,6 @@ package Einfo is\n    pragma Inline (Set_Has_Anonymous_Master);\n    pragma Inline (Set_Has_Atomic_Components);\n    pragma Inline (Set_Has_Biased_Representation);\n-   pragma Inline (Set_Has_Body_References);\n    pragma Inline (Set_Has_Completion);\n    pragma Inline (Set_Has_Completion_In_Body);\n    pragma Inline (Set_Has_Complex_Representation);"}, {"sha": "c54693150850ab18553d0a2ac45c3f2da4df9a3d", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=5627964c4ae9de7ac15ed4a4e833a2a27e534e2b", "patch": "@@ -1654,9 +1654,11 @@ package body Makeutl is\n                      end if;\n                   end if;\n \n-               elsif Source.Kind = Spec then\n-                  --  A spec needs to be taken into account unless there is\n-                  --  also a body. So we delay the decision for them.\n+               elsif Source.Kind = Spec\n+                 and then Source.Language.Config.Kind = Unit_Based\n+               then\n+                  --  An Ada spec needs to be taken into account unless there\n+                  --  is also a body. So we delay the decision for them.\n \n                   Get_Name_String (Source.File);\n \n@@ -1785,7 +1787,7 @@ package body Makeutl is\n \n                         if Source = No_Source then\n                            Source := Find_File_Add_Extension\n-                             (Tree, Get_Name_String (Main_Id));\n+                             (File.Tree, Get_Name_String (Main_Id));\n                         end if;\n \n                         if Is_Absolute\n@@ -1852,10 +1854,10 @@ package body Makeutl is\n                            --  reported later.\n \n                            Error_Msg_File_1 := Main_Id;\n-                           Error_Msg_Name_1 := Root_Project.Name;\n+                           Error_Msg_Name_1 := File.Project.Name;\n                            Prj.Err.Error_Msg\n                              (Flags, \"{ is not a source of project %%\",\n-                              File.Location, Project);\n+                              File.Location, File.Project);\n                         end if;\n                      end if;\n                   end;"}, {"sha": "e0d275e58d4a2bb99636a305bcc774bf33df54d7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 85, "deletions": 37, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5627964c4ae9de7ac15ed4a4e833a2a27e534e2b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5627964c4ae9de7ac15ed4a4e833a2a27e534e2b", "patch": "@@ -280,11 +280,13 @@ package body Sem_Prag is\n    --  spec expressions (i.e. similar to a default expression).\n \n    procedure Record_Possible_Body_Reference\n-     (Item    : Node_Id;\n-      Item_Id : Entity_Id);\n-   --  Given an entity reference (Item) and the corresponding Entity (Item_Id),\n-   --  determines if we have a body reference to an abstract state, which may\n-   --  be illegal if the state is refined within the body.\n+     (State_Id : Entity_Id;\n+      Ref      : Node_Id);\n+   --  Subsidiary to the analysis of pragmas [Refined_]Depends and [Refined_]\n+   --  Global. Given an abstract state denoted by State_Id and a reference Ref\n+   --  to it, determine whether the reference appears in a package body that\n+   --  will eventually refine the state. If this is the case, record the\n+   --  reference for future checks (see Analyze_Refined_State_In_Decls).\n \n    procedure Resolve_State (N : Node_Id);\n    --  Handle the overloading of state names by functions. When N denotes a\n@@ -799,8 +801,6 @@ package body Sem_Prag is\n                Item_Id := Entity_Of (Item);\n \n                if Present (Item_Id) then\n-                  Record_Possible_Body_Reference (Item, Item_Id);\n-\n                   if Ekind_In (Item_Id, E_Abstract_State,\n                                         E_In_Parameter,\n                                         E_In_Out_Parameter,\n@@ -842,14 +842,28 @@ package body Sem_Prag is\n                         Add_Item (Item_Id, All_Inputs_Seen);\n                      end if;\n \n-                     if Ekind (Item_Id) = E_Abstract_State\n-                       and then Has_Visible_Refinement (Item_Id)\n-                     then\n-                        Error_Msg_NE\n-                          (\"cannot mention state & in global refinement, use \"\n-                           & \"its constituents instead (SPARK RM 6.1.5(3))\",\n-                           Item, Item_Id);\n-                        return;\n+                     --  State related checks\n+\n+                     if Ekind (Item_Id) = E_Abstract_State then\n+                        if Has_Visible_Refinement (Item_Id) then\n+                           Error_Msg_NE\n+                             (\"cannot mention state & in global refinement\",\n+                              Item, Item_Id);\n+                           Error_Msg_N\n+                              (\"\\use its constituents instead (SPARK RM \"\n+                               & \"6.1.5(3))\", Item);\n+                           return;\n+\n+                        --  If the reference to the abstract state appears in\n+                        --  an enclosing package body that will eventually\n+                        --  refine the state, record the reference for future\n+                        --  checks.\n+\n+                        else\n+                           Record_Possible_Body_Reference\n+                             (State_Id => Item_Id,\n+                              Ref      => Item);\n+                        end if;\n                      end if;\n \n                      --  When the item renames an entire object, replace the\n@@ -1871,7 +1885,6 @@ package body Sem_Prag is\n             Item_Id := Entity_Of (Item);\n \n             if Present (Item_Id) then\n-               Record_Possible_Body_Reference (Item, Item_Id);\n \n                --  A global item may denote a formal parameter of an enclosing\n                --  subprogram. Do this check first to provide a better error\n@@ -1917,6 +1930,15 @@ package body Sem_Prag is\n                         & \"constituents instead (SPARK RM 6.1.4(8))\",\n                         Item, Item_Id);\n                      return;\n+\n+                  --  If the reference to the abstract state appears in an\n+                  --  enclosing package body that will eventually refine the\n+                  --  state, record the reference for future checks.\n+\n+                  else\n+                     Record_Possible_Body_Reference\n+                       (State_Id => Item_Id,\n+                        Ref      => Item);\n                   end if;\n \n                --  Variable related checks\n@@ -22786,7 +22808,7 @@ package body Sem_Prag is\n \n                procedure Collect_Constituent is\n                begin\n-                  --  Add the constituent to the lis of processed items to aid\n+                  --  Add the constituent to the list of processed items to aid\n                   --  with the detection of duplicates.\n \n                   Add_Item (Constit_Id, Constituents_Seen);\n@@ -23077,10 +23099,10 @@ package body Sem_Prag is\n \n                   if Ekind (Constit_Id) = E_Abstract_State then\n                      Error_Msg_NE\n-                       (\"\\  abstract state & defined #\", State, Constit_Id);\n+                       (\"\\\\  abstract state & defined #\", State, Constit_Id);\n                   else\n                      Error_Msg_NE\n-                       (\"\\  variable & defined #\", State, Constit_Id);\n+                       (\"\\\\  variable & defined #\", State, Constit_Id);\n                   end if;\n \n                   Next_Elmt (Constit_Elmt);\n@@ -23122,18 +23144,20 @@ package body Sem_Prag is\n                return;\n             end if;\n \n-            --  A global item cannot denote a state abstraction whose\n-            --  refinement is visible, in other words a state abstraction\n-            --  cannot be named within its enclosing package's body other than\n-            --  in its refinement.\n+            --  References to a state with visible refinement are illegal. In\n+            --  the case where nested packages are involved, detecting such\n+            --  references is tricky because pragma Refined_State is analyzed\n+            --  later than the offending pragma Depends or Global. References\n+            --  that occur in such nested context are stored in a list. Emit\n+            --  errors for all references found in Body_References.\n \n-            if Has_Body_References (State_Id) then\n+            if Present (Body_References (State_Id)) then\n                Body_Ref_Elmt := First_Elmt (Body_References (State_Id));\n                while Present (Body_Ref_Elmt) loop\n                   Body_Ref := Node (Body_Ref_Elmt);\n \n                   Error_Msg_N\n-                    (\"global reference to & not allowed (SPARK RM 6.1.4(8))\",\n+                    (\"reference to & not allowed (SPARK RM 6.1.4(8))\",\n                      Body_Ref);\n                   Error_Msg_Sloc := Sloc (State);\n                   Error_Msg_N (\"\\refinement of & is visible#\", Body_Ref);\n@@ -23389,9 +23413,10 @@ package body Sem_Prag is\n \n                if Ekind (State_Id) = E_Abstract_State then\n                   Error_Msg_NE\n-                    (\"\\  abstract state & defined #\", Body_Id, State_Id);\n+                    (\"\\\\  abstract state & defined #\", Body_Id, State_Id);\n                else\n-                  Error_Msg_NE (\"\\  variable & defined #\", Body_Id, State_Id);\n+                  Error_Msg_NE\n+                    (\"\\\\  variable & defined #\", Body_Id, State_Id);\n                end if;\n \n                Next_Elmt (State_Elmt);\n@@ -25072,20 +25097,43 @@ package body Sem_Prag is\n    ------------------------------------\n \n    procedure Record_Possible_Body_Reference\n-     (Item    : Node_Id;\n-      Item_Id : Entity_Id)\n+     (State_Id : Entity_Id;\n+      Ref      : Node_Id)\n    is\n+      Context : Node_Id;\n+      Spec_Id : Entity_Id;\n+\n    begin\n-      if Is_Body_Name (Unit_Name (Get_Source_Unit (Item)))\n-        and then Ekind (Item_Id) = E_Abstract_State\n-      then\n-         if not Has_Body_References (Item_Id) then\n-            Set_Has_Body_References (Item_Id, True);\n-            Set_Body_References (Item_Id, New_Elmt_List);\n+      --  Ensure that we are dealing with a reference to a state\n+\n+      pragma Assert (Ekind (State_Id) = E_Abstract_State);\n+\n+      --  Climb the tree starting from the reference looking for a package body\n+      --  whose spec declares the referenced state. This criteria automatically\n+      --  excludes references in package specs which are legal. Note that it is\n+      --  not wise to emit an error now as the package body may lack pragma\n+      --  Refined_State or the referenced state may not be mentioned in the\n+      --  refinement. This approach avoids the generation of misleading errors.\n+\n+      Context := Ref;\n+      while Present (Context) loop\n+         if Nkind (Context) = N_Package_Body then\n+            Spec_Id := Corresponding_Spec (Context);\n+\n+            if Present (Abstract_States (Spec_Id))\n+              and then Contains (Abstract_States (Spec_Id), State_Id)\n+            then\n+               if No (Body_References (State_Id)) then\n+                  Set_Body_References (State_Id, New_Elmt_List);\n+               end if;\n+\n+               Append_Elmt (Ref, Body_References (State_Id));\n+               exit;\n+            end if;\n          end if;\n \n-         Append_Elmt (Item, Body_References (Item_Id));\n-      end if;\n+         Context := Parent (Context);\n+      end loop;\n    end Record_Possible_Body_Reference;\n \n    ------------------------------"}]}