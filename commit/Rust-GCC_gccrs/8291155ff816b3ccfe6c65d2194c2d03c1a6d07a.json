{"sha": "8291155ff816b3ccfe6c65d2194c2d03c1a6d07a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI5MTE1NWZmODE2YjNjY2ZlNmM2NWQyMTk0YzJkMDNjMWE2ZDA3YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-29T13:53:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-29T13:53:04Z"}, "message": "Initial revision\n\nFrom-SVN: r10199", "tree": {"sha": "6f793c4af229a4024721ba951f6be03f69b7f73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f793c4af229a4024721ba951f6be03f69b7f73a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8291155ff816b3ccfe6c65d2194c2d03c1a6d07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8291155ff816b3ccfe6c65d2194c2d03c1a6d07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8291155ff816b3ccfe6c65d2194c2d03c1a6d07a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8291155ff816b3ccfe6c65d2194c2d03c1a6d07a/comments", "author": null, "committer": null, "parents": [{"sha": "53c8870f929b6803d3427812cb5360f1453df86f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c8870f929b6803d3427812cb5360f1453df86f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c8870f929b6803d3427812cb5360f1453df86f"}], "stats": {"total": 365, "additions": 365, "deletions": 0}, "files": [{"sha": "980d08f72f9b999262092af89827050db476e967", "filename": "gcc/config/m68k/linux-aout.h", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8291155ff816b3ccfe6c65d2194c2d03c1a6d07a/gcc%2Fconfig%2Fm68k%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8291155ff816b3ccfe6c65d2194c2d03c1a6d07a/gcc%2Fconfig%2Fm68k%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux-aout.h?ref=8291155ff816b3ccfe6c65d2194c2d03c1a6d07a", "patch": "@@ -0,0 +1,75 @@\n+/* Definitions for Motorola m68k running Linux\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 1, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include <m68k/m68k.h>\n+#include <linux-aout.h>\n+\n+/* 68020 with 68881 */\n+#define TARGET_DEFAULT 7\n+\n+#define DBX_DEBUGGING_INFO\n+\n+#define CPP_PREDEFINES \\\n+  \"-Dunix -Dmc68000 -Dmc68020 -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(m68k) -Amachine(m68k)\"\n+\n+#undef CPP_SPEC\n+#if TARGET_DEFAULT & 2\n+#define CPP_SPEC \\\n+  \"%{!msoft-float:-D__HAVE_68881__} %{posix:-D_POSIX_SOURCE}\"\n+#else\n+#define CPP_SPEC \\\n+  \"%{m68881:-D__HAVE_68881__} %{posix:-D_POSIX_SOURCE}\"\n+#endif\n+\n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES\t{\"ieee-fp\", 0},\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+  \"%{m68030} %{m68040} %{fpic:-k} %{fPIC:-k}\"\n+\n+#undef LIB_SPEC\n+#if 1\n+/* We no longer link with libc_p.a or libg.a by default.  If you want\n+   to profile or debug the Linux C library, please add -lc_p or -ggdb\n+   to LDFLAGS at the link time, respectively.  */\n+#define LIB_SPEC \\\n+  \"%{mieee-fp:-lieee} %{p:-lgmon} %{pg:-lgmon} %{!ggdb:-lc} %{ggdb:-lg}\"\n+#else\n+#define LIB_SPEC \\\n+  \"%{mieee-fp:-lieee} %{p:-lgmon -lc_p} %{pg:-lgmon -lc_p} %{!p:%{!pg:%{!g*:-lc} %{g*:-lg}}}\"\n+#endif\n+\n+/* We want to pass -v to linker */\n+#undef LINK_SPEC\n+#define LINK_SPEC\t\"-m m68klinux %{v:-dll-verbose}\"\n+\n+#define SIZE_TYPE \"unsigned int\"\n+#define PTRDIFF_TYPE \"int\"\n+\n+/* Generate calls to memcpy, memcmp and memset.  */\n+#define TARGET_MEM_FUNCTIONS\n+\n+/* Don't default to pcc-struct-return, because gcc is the only compiler.  */\n+#undef PCC_STATIC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Allow folding division by zero.  */\n+#define REAL_INFINITY"}, {"sha": "589b361932e4971a45b097d18a8a3d0cabe70f70", "filename": "gcc/config/m68k/linux.h", "status": "added", "additions": 285, "deletions": 0, "changes": 285, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8291155ff816b3ccfe6c65d2194c2d03c1a6d07a/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8291155ff816b3ccfe6c65d2194c2d03c1a6d07a/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=8291155ff816b3ccfe6c65d2194c2d03c1a6d07a", "patch": "@@ -0,0 +1,285 @@\n+/* Definitions for Motorola 68k running Linux with ELF format.\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 1, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#define LINUX_DEFAULT_ELF\n+#define MOTOROLA\t\t/* Use Motorola syntax */\n+#define USE_GAS\t\t\t/* But GAS wants jbsr instead of jsr */\n+\n+#include <m68k/m68k.h>\n+#include <linux.h>\t\t/* some common stuff */\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (68k Linux/ELF)\");\n+\n+/* 68020 with 68881 */\n+#define TARGET_DEFAULT 7\n+\n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES\t{\"ieee-fp\", 0},\n+\n+/* Here are four prefixes that are used by asm_fprintf to\n+   facilitate customization for alternate assembler syntaxes.\n+   Machines with no likelihood of an alternate syntax need not\n+   define these and need not use asm_fprintf.  */\n+\n+/* The prefix for register names.  Note that REGISTER_NAMES\n+   is supposed to include this prefix. Also note that this is NOT an\n+   fprintf format string, it is a literal string */\n+\n+#undef REGISTER_PREFIX\n+#define REGISTER_PREFIX \"%\"\n+\n+/* The prefix for local (compiler generated) labels.\n+   These labels will not appear in the symbol table. */\n+\n+#undef LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX \".\"\n+\n+/* The prefix to add to user-visible assembler symbols. */\n+\n+#undef USER_LABEL_PREFIX\n+#define USER_LABEL_PREFIX \"\"\n+\n+/* How to refer to registers in assembler output.\n+   This sequence is indexed by compiler's hard-register-number.\n+   Motorola format uses different register names than defined in m68k.h. */\n+\n+#undef REGISTER_NAMES\n+\n+#ifndef SUPPORT_SUN_FPA\n+\n+#define REGISTER_NAMES \\\n+{\"%d0\", \"%d1\", \"%d2\", \"%d3\", \"%d4\", \"%d5\", \"%d6\", \"%d7\", \\\n+ \"%a0\", \"%a1\", \"%a2\", \"%a3\", \"%a4\", \"%a5\", \"%a6\", \"%sp\", \\\n+ \"%fp0\", \"%fp1\", \"%fp2\", \"%fp3\", \"%fp4\", \"%fp5\", \"%fp6\", \"%fp7\" }\n+\n+#else /* SUPPORTED_SUN_FPA */\n+\n+#define REGISTER_NAMES \\\n+{\"%d0\", \"%d1\", \"%d2\", \"%d3\", \"%d4\", \"%d5\", \"%d6\", \"%d7\", \\\n+ \"%a0\", \"%a1\", \"%a2\", \"%a3\", \"%a4\", \"%a5\", \"%a6\", \"%sp\", \\\n+ \"%fp0\", \"%fp1\", \"%fp2\", \"%fp3\", \"%fp4\", \"%fp5\", \"%fp6\", \"%fp7\", \\\n+ \"%fpa0\", \"%fpa1\", \"%fpa2\", \"%fpa3\", \"%fpa4\", \"%fpa5\", \"%fpa6\", \"%fpa7\", \\\n+ \"%fpa8\", \"%fpa9\", \"%fpa10\",\"%fpa11\",\"%fpa12\",\"%fpa13\",\"%fpa14\",\"%fpa15\", \\\n+ \"%fpa16\",\"%fpa17\",\"%fpa18\",\"%fpa19\",\"%fpa20\",\"%fpa21\",\"%fpa22\",\"%fpa23\", \\\n+ \"%fpa24\",\"%fpa25\",\"%fpa26\",\"%fpa27\",\"%fpa28\",\"%fpa29\",\"%fpa30\",\"%fpa31\" }\n+\n+#endif /* defined SUPPORT_SUN_FPA */\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+ \n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+  \n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+   \n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"%{m68030} %{m68040} %{fpic:-k} %{fPIC:-k}\"\n+\n+#define CPP_PREDEFINES \\\n+  \"-D__ELF__ -Dunix -Dmc68000 -Dmc68020 -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(m68k) -Amachine(m68k)\"\n+\n+#undef CPP_SPEC\n+#if TARGET_DEFAULT & 2\n+#define CPP_SPEC \\\n+  \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{!msoft-float:-D__HAVE_68881__} %{posix:-D_POSIX_SOURCE}\"\n+#else\n+#define CPP_SPEC \\\n+  \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{m68881:-D__HAVE_68881__} %{posix:-D_POSIX_SOURCE}\"\n+#endif\n+\n+#undef\tLIB_SPEC\n+#if 1\n+/* We no longer link with libc_p.a or libg.a by default.  If you want\n+   to profile or debug the Linux C library, please add -lc_p or -ggdb\n+   to LDFLAGS at the link time, respectively.  */\n+#define LIB_SPEC \\\n+  \"%{!shared:%{!symbolic: %{mieee-fp:-lieee} %{p:-lgmon} %{pg:-lgmon} \\\n+     %{!ggdb:-lc} %{ggdb:-lg}}}\"\n+#else\n+#define LIB_SPEC \\\n+  \"%{!shared:%{!symbolic: \\\n+     %{mieee-fp:-lieee} %{p:-lgmon -lc_p} %{pg:-lgmon -lc_p} \\\n+     %{!p:%{!pg:%{!g*:-lc} %{g*:-lg}}}}}\"\n+#endif\n+\n+/* Provide a LINK_SPEC appropriate for Linux.  Here we provide support\n+   for the special GCC options -static and -shared, which allow us to\n+   link things in one of these three modes by applying the appropriate\n+   combinations of options at link-time.  We like to support here for\n+   as many of the other GNU linker options as possible.  But I don't\n+   have the time to search for those flags.  I am sure how to add\n+   support for -soname shared_object_name. H.J.\n+\n+   I took out %{v:%{!V:-V}}.  It is too much :-(.  They can use\n+   -Wl,-V.\n+\n+   When the -shared link option is used a final link is not being\n+   done.  */\n+\n+/* If ELF is the default format, we should not use /lib/elf. */\n+\n+#undef\tLINK_SPEC\n+#ifndef LINUX_DEFAULT_ELF\n+#define LINK_SPEC \"-m m68kelf %{shared} %{symbolic:-shared -Bsymbolic} \\\n+  %{!shared:%{!symbolic: \\\n+    %{!static: \\\n+      %{rdynamic:-export-dynamic} \\\n+      %{!dynamic-linker*:-dynamic-linker /lib/elf/ld-linux.so.1} \\\n+      %{!rpath*:-rpath /lib/elf/}} %{static}}}\"\n+#else\n+#define LINK_SPEC \"-m m68kelf %{shared} %{symbolic:-shared -Bsymbolic} \\\n+  %{!shared:%{!symbolic: \\\n+    %{!static: \\\n+      %{rdynamic:-export-dynamic} \\\n+      %{!dynamic-linker*:-dynamic-linker /lib/ld-linux.so.1}} \\\n+    %{static}}}\"\n+#endif\n+\n+/* For compatibility with linux/a.out */\n+\n+#undef PCC_BITFIELD_TYPE_MATTERS\n+\n+/* Currently, JUMP_TABLES_IN_TEXT_SECTION must be defined in order to\n+   keep switch tables in the text section.  */\n+   \n+#define JUMP_TABLES_IN_TEXT_SECTION 1\n+\n+/* Use the default action for outputting the case label.  */\n+#undef ASM_OUTPUT_CASE_LABEL\n+\n+#define ASM_RETURN_CASE_JUMP \\\n+  return \"jmp (2,%%pc,%0.w)\"\n+\n+/* This is how to output an assembler line that says to advance the\n+   location counter to a multiple of 2**LOG bytes.  */\n+\n+#undef ASM_OUTPUT_ALIGN\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\t\t\t\\\n+  if ((LOG) > 0)\t\t\t\t\t\t\\\n+    fprintf ((FILE), \"\\t%s \\t%u\\n\", ALIGN_ASM_OP, 1 << (LOG));\n+\n+/* Output assembler code to FILE to increment profiler label # LABELNO\n+   for profiling a function entry.  */\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO) \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  asm_fprintf (FILE, \"\\tlea (%LLP%d,%Rpc),%Ra1\\n\", (LABELNO));\t\t\\\n+  if (flag_pic)\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tbsr.l _mcount@PLTPC\\n\");\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tjbsr _mcount\\n\");\t\t\t\t\t\\\n+}\n+\n+/* How to renumber registers for dbx and gdb.\n+   On the Sun-3, the floating point registers have numbers\n+   18 to 25, not 16 to 23 as they do in the compiler.  */\n+\n+#define DBX_REGISTER_NUMBER(REGNO) ((REGNO) < 16 ? (REGNO) : (REGNO) + 2)\n+\n+/* Do not break .stabs pseudos into continuations.  */\n+\n+#define DBX_CONTIN_LENGTH 0\n+\n+/* Allow folding division by zero.  */\n+#define REAL_INFINITY\n+\n+/* 1 if N is a possible register number for a function value.  For\n+   m68k/SVR4 allow d0, a0, or fp0 as return registers, for integral,\n+   pointer, or floating types, respectively.  Reject fp0 if not using\n+   a 68881 coprocessor.  */\n+\n+#undef FUNCTION_VALUE_REGNO_P\n+#define FUNCTION_VALUE_REGNO_P(N) \\\n+  ((N) == 0 || (N) == 8 || (TARGET_68881 && (N) == 16))\n+\n+/* Define this to be true when FUNCTION_VALUE_REGNO_P is true for\n+   more than one register.  */\n+\n+#undef NEEDS_UNTYPED_CALL\n+#define NEEDS_UNTYPED_CALL 1\n+\n+/* Define how to generate (in the callee) the output value of a\n+   function and how to find (in the caller) the value returned by a\n+   function.  VALTYPE is the data type of the value (as a tree).  If\n+   the precise function being called is known, FUNC is its\n+   FUNCTION_DECL; otherwise, FUNC is 0.  For m68k/SVR4 generate the\n+   result in d0, a0, or fp0 as appropriate. */\n+   \n+#undef FUNCTION_VALUE\n+#define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\t\\\n+  (TREE_CODE (VALTYPE) == REAL_TYPE && TARGET_68881\t\t\t\\\n+   ? gen_rtx (REG, TYPE_MODE (VALTYPE), 16)\t\t\t\t\\\n+   : (POINTER_TYPE_P (VALTYPE)\t\t\t\t\t\t\\\n+      ? gen_rtx (REG, TYPE_MODE (VALTYPE), 8)\t\t\t\t\\\n+      : gen_rtx (REG, TYPE_MODE (VALTYPE), 0)))\n+\n+/* For compatibility with the large body of existing code which does\n+   not always properly declare external functions returning pointer\n+   types, the m68k/SVR4 convention is to copy the value returned for\n+   pointer functions from a0 to d0 in the function epilogue, so that\n+   callers that have neglected to properly declare the callee can\n+   still find the correct return value.  */\n+\n+extern int current_function_returns_pointer;\n+#define FUNCTION_EXTRA_EPILOGUE(FILE, SIZE)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if ((current_function_returns_pointer) && \t\t\t\t\\\n+      ! find_equiv_reg (0, get_last_insn (), 0, 0, 0, 8, Pmode))\t\\\n+    asm_fprintf (FILE, \"\\tmove.l %Ra0,%Rd0\\n\");\t\t\t\t\\\n+} while (0);\n+\n+/* Define how to find the value returned by a library function\n+   assuming the value has mode MODE.\n+   For m68k/SVR4 look for integer values in d0, pointer values in d0\n+   (returned in both d0 and a0), and floating values in fp0.  */\n+\n+#undef LIBCALL_VALUE\n+#define LIBCALL_VALUE(MODE)\t\t\t\t\t\t\\\n+  (((MODE) == SFmode || (MODE) == DFmode) && TARGET_68881\t\t\\\n+   ? gen_rtx (REG, (MODE), 16)\t\t\t\t\t\t\\\n+   : gen_rtx (REG, (MODE), 0))\n+\n+/* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is\n+   an operand of a function call. */\n+#undef LEGITIMATE_PIC_OPERAND_P\n+#define LEGITIMATE_PIC_OPERAND_P(X) \\\n+  (! symbolic_operand (X, VOIDmode) \\\n+   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X)))\n+\n+/* Turn off function cse if we are doing PIC. We always want function\n+   call to be done as `bsr foo@PLTPC', so it will force the assembler\n+   to create the PLT entry for `foo'.  Doing function cse will cause\n+   the address of `foo' to be loaded into a register, which is exactly\n+   what we want to avoid when we are doing PIC on svr4 m68k.  */\n+#undef SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS \\\n+  if (flag_pic) flag_no_function_cse = 1;\n+\n+/* For m68k SVR4, structures are returned using the reentrant\n+   technique. */\n+#undef PCC_STATIC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 0"}, {"sha": "85f13a7f1ed11b6fd810a858e01582caa5e7ad1d", "filename": "gcc/config/m68k/t-linux", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8291155ff816b3ccfe6c65d2194c2d03c1a6d07a/gcc%2Fconfig%2Fm68k%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8291155ff816b3ccfe6c65d2194c2d03c1a6d07a/gcc%2Fconfig%2Fm68k%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-linux?ref=8291155ff816b3ccfe6c65d2194c2d03c1a6d07a", "patch": "@@ -0,0 +1,5 @@\n+# Don't make libgcc1.a\n+LIBGCC1 =\n+CROSS_LIBGCC1 =\n+# On Linux we can print long double\n+ENQUIRE_CFLAGS = -DNO_MEM -O0"}]}