{"sha": "0241901b0cd82e9d0ba06fa050dad3f051711eb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI0MTkwMWIwY2Q4MmU5ZDBiYTA2ZmEwNTBkYWQzZjA1MTcxMWViNA==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-05-24T23:12:16Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-05-24T23:12:16Z"}, "message": "re PR target/90530 (Invalid SUBREG insn generated by reload)\n\n\tPR target/90530\n\t* config/pa/pa.c (pa_can_change_mode_class): Accept mode changes from\n\tDImode to SImode in floating-point registers on 64-bit target.\n\t* config/pa/pa.md (umulsidi3): Change nonimmediate_operand to\n\tregister_operand in xmpyu patterns.\n\nFrom-SVN: r271611", "tree": {"sha": "6739bb16d4dda32e1d6040649e91baa67f30a876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6739bb16d4dda32e1d6040649e91baa67f30a876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0241901b0cd82e9d0ba06fa050dad3f051711eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0241901b0cd82e9d0ba06fa050dad3f051711eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0241901b0cd82e9d0ba06fa050dad3f051711eb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0241901b0cd82e9d0ba06fa050dad3f051711eb4/comments", "author": null, "committer": null, "parents": [{"sha": "6c7ae8c56f9341f180e097d5eb7ba05cb8eec413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7ae8c56f9341f180e097d5eb7ba05cb8eec413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7ae8c56f9341f180e097d5eb7ba05cb8eec413"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "19c6095c83b0b8b6c76596cf060e9c2cd3908b37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0241901b0cd82e9d0ba06fa050dad3f051711eb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0241901b0cd82e9d0ba06fa050dad3f051711eb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0241901b0cd82e9d0ba06fa050dad3f051711eb4", "patch": "@@ -1,3 +1,11 @@\n+2019-05-24  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR target/90530\n+\t* config/pa/pa.c (pa_can_change_mode_class): Accept mode changes from\n+\tDImode to SImode in floating-point registers on 64-bit target.\n+\t* config/pa/pa.md (umulsidi3): Change nonimmediate_operand to\n+\tregister_operand in xmpyu patterns.\n+\n 2019-05-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE__CONDTEMP_."}, {"sha": "aa8e346ccea9342e833663ece2a1d9be8dc953aa", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0241901b0cd82e9d0ba06fa050dad3f051711eb4/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0241901b0cd82e9d0ba06fa050dad3f051711eb4/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=0241901b0cd82e9d0ba06fa050dad3f051711eb4", "patch": "@@ -10011,10 +10011,11 @@ pa_can_change_mode_class (machine_mode from, machine_mode to,\n   /* There is no way to load QImode or HImode values directly from memory\n      to a FP register.  SImode loads to the FP registers are not zero\n      extended.  On the 64-bit target, this conflicts with the definition\n-     of LOAD_EXTEND_OP.  Thus, we can't allow changing between modes with\n-     different sizes in the floating-point registers.  */\n+     of LOAD_EXTEND_OP.  Thus, we reject all mode changes in the FP registers\n+     except for DImode to SImode on the 64-bit target.  It is handled by\n+     register renaming in pa_print_operand.  */\n   if (MAYBE_FP_REG_CLASS_P (rclass))\n-    return false;\n+    return TARGET_64BIT && from == DImode && to == SImode;\n \n   /* TARGET_HARD_REGNO_MODE_OK places modes with sizes larger than a word\n      in specific sets of registers.  Thus, we cannot allow changing"}, {"sha": "8308b37461df89200f35f6ec7dbee4798375b9ea", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0241901b0cd82e9d0ba06fa050dad3f051711eb4/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0241901b0cd82e9d0ba06fa050dad3f051711eb4/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=0241901b0cd82e9d0ba06fa050dad3f051711eb4", "patch": "@@ -5319,16 +5319,16 @@\n \n (define_insn \"umulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"f\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"f\"))))]\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"f\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"f\"))))]\n   \"TARGET_PA_11 && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT\"\n   \"xmpyu %1,%2,%0\"\n   [(set_attr \"type\" \"fpmuldbl\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"f\"))\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"f\"))\n \t\t (match_operand:DI 2 \"uint32_operand\" \"f\")))]\n   \"TARGET_PA_11 && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT && !TARGET_64BIT\"\n   \"xmpyu %1,%R2,%0\"\n@@ -5337,7 +5337,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"f\"))\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"f\"))\n \t\t (match_operand:DI 2 \"uint32_operand\" \"f\")))]\n   \"TARGET_PA_11 && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT && TARGET_64BIT\"\n   \"xmpyu %1,%2R,%0\""}]}