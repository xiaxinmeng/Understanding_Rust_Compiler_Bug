{"sha": "b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYxM2NjMmU5MTIwZWEwMDJmOGEwODU1ZDI2MjBlZTRiYThmYmZlNQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@linux-m68k.org", "date": "2018-02-22T19:49:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-22T19:49:04Z"}, "message": "re PR go/84484 (libgo configure tests fail to find -latomic)\n\n\tPR go/84484\n    libgo: add support for riscv64\n    \n    Patch by Andreas Schwab.\n    \n    Reviewed-on: https://go-review.googlesource.com/96377\n\n\t* go.test/go-test.exp (go-set-goarch): Recognize riscv64-*-*.\n\nFrom-SVN: r257914", "tree": {"sha": "fe6e2b231c5bbdbf9cce56311aa923363bc736b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe6e2b231c5bbdbf9cce56311aa923363bc736b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "afedc99bd2e1f2c8b64e3deaf5ef4e1231a756af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afedc99bd2e1f2c8b64e3deaf5ef4e1231a756af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afedc99bd2e1f2c8b64e3deaf5ef4e1231a756af"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "2097d800c5efa0c3755e4b65d8d08c451019700d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -1,3 +1,7 @@\n+2018-02-22  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\t* go.test/go-test.exp (go-set-goarch): Recognize riscv64-*-*.\n+\n 2018-02-22  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/84480"}, {"sha": "cab0d0e2fbb770ad5cf26cef600dbd9bda62e82c", "filename": "gcc/testsuite/go.test/go-test.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -246,6 +246,9 @@ proc go-set-goarch { } {\n \t\t}\n \t    }\n \t}\n+\t\"riscv64-*-*\" {\n+\t    set goarch \"riscv64\"\n+\t}\n \t\"s390*-*-*\" {\n \t    if [check_effective_target_ilp32] {\n \t\tset goarch \"s390\""}, {"sha": "c5f8e8a37637219730e105c306187eaa10ce47ec", "filename": "libgo/configure", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -13653,10 +13653,10 @@ esac\n #   - libgo/go/syscall/endian_XX.go\n #   - possibly others\n # - possibly update files in libgo/go/internal/syscall/unix\n-ALLGOARCH=\"386 alpha amd64 amd64p32 arm armbe arm64 arm64be ia64 m68k mips mipsle mips64 mips64le mips64p32 mips64p32le ppc ppc64 ppc64le s390 s390x sh shbe sparc sparc64\"\n+ALLGOARCH=\"386 alpha amd64 amd64p32 arm armbe arm64 arm64be ia64 m68k mips mipsle mips64 mips64le mips64p32 mips64p32le ppc ppc64 ppc64le riscv64 s390 s390x sh shbe sparc sparc64\"\n \n # All known GOARCH family values.\n-ALLGOARCHFAMILY=\"I386 ALPHA AMD64 ARM ARM64 IA64 M68K MIPS MIPS64 PPC PPC64 S390 S390X SH SPARC SPARC64\"\n+ALLGOARCHFAMILY=\"I386 ALPHA AMD64 ARM ARM64 IA64 M68K MIPS MIPS64 PPC PPC64 RISCV64 S390 S390X SH SPARC SPARC64\"\n \n GOARCH=unknown\n case ${host} in\n@@ -13773,6 +13773,9 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     ;;\n+  riscv64-*-*)\n+    GOARCH=riscv64\n+    ;;\n   s390*-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */"}, {"sha": "eabe294afa92b54057187f03330efba2fb12b625", "filename": "libgo/configure.ac", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -224,10 +224,10 @@ AC_SUBST(USE_DEJAGNU)\n #   - libgo/go/syscall/endian_XX.go\n #   - possibly others\n # - possibly update files in libgo/go/internal/syscall/unix\n-ALLGOARCH=\"386 alpha amd64 amd64p32 arm armbe arm64 arm64be ia64 m68k mips mipsle mips64 mips64le mips64p32 mips64p32le ppc ppc64 ppc64le s390 s390x sh shbe sparc sparc64\"\n+ALLGOARCH=\"386 alpha amd64 amd64p32 arm armbe arm64 arm64be ia64 m68k mips mipsle mips64 mips64le mips64p32 mips64p32le ppc ppc64 ppc64le riscv64 s390 s390x sh shbe sparc sparc64\"\n \n # All known GOARCH family values.\n-ALLGOARCHFAMILY=\"I386 ALPHA AMD64 ARM ARM64 IA64 M68K MIPS MIPS64 PPC PPC64 S390 S390X SH SPARC SPARC64\"\n+ALLGOARCHFAMILY=\"I386 ALPHA AMD64 ARM ARM64 IA64 M68K MIPS MIPS64 PPC PPC64 RISCV64 S390 S390X SH SPARC SPARC64\"\n \n GOARCH=unknown\n case ${host} in\n@@ -304,6 +304,9 @@ AC_COMPILE_IFELSE([\n [GOARCH=ppc64le],\n [GOARCH=ppc64])])\n     ;;\n+  riscv64-*-*)\n+    GOARCH=riscv64\n+    ;;\n   s390*-*-*)\n     AC_COMPILE_IFELSE([\n #if defined(__s390x__)"}, {"sha": "6baabfd1336691ea9079d9f9388ef945fa08d852", "filename": "libgo/go/cmd/cgo/main.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fcmd%2Fcgo%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fcmd%2Fcgo%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fcgo%2Fmain.go?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -168,6 +168,7 @@ var ptrSizeMap = map[string]int64{\n \t\"ppc\":         4,\n \t\"ppc64\":       8,\n \t\"ppc64le\":     8,\n+\t\"riscv64\":     8,\n \t\"s390\":        4,\n \t\"s390x\":       8,\n \t\"sh\":          4,\n@@ -192,6 +193,7 @@ var intSizeMap = map[string]int64{\n \t\"ppc\":         4,\n \t\"ppc64\":       8,\n \t\"ppc64le\":     8,\n+\t\"riscv64\":     8,\n \t\"s390\":        4,\n \t\"s390x\":       8,\n \t\"sh\":          4,"}, {"sha": "679d195025e276539aff47dc8a0a23a0e1375abf", "filename": "libgo/go/go/build/syslist.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -5,4 +5,4 @@\n package build\n \n const goosList = \"aix android darwin dragonfly freebsd linux nacl netbsd openbsd plan9 solaris windows zos \"\n-const goarchList = \"386 amd64 amd64p32 arm armbe arm64 arm64be alpha m68k ppc64 ppc64le mips mipsle mips64 mips64le mips64p32 mips64p32le ppc s390 s390x sh shbe sparc sparc64\"\n+const goarchList = \"386 amd64 amd64p32 arm armbe arm64 arm64be alpha m68k ppc64 ppc64le mips mipsle mips64 mips64le mips64p32 mips64p32le ppc riscv64 s390 s390x sh shbe sparc sparc64\""}, {"sha": "d6af3dea8d72b5305b17b0606c903a4849d95e72", "filename": "libgo/go/internal/syscall/unix/getrandom_linux_generic.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_generic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_generic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_generic.go?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build arm64\n+// +build arm64 riscv64\n \n package unix\n "}, {"sha": "74775a88f269768d52738f68c4987371b4ab9d4d", "filename": "libgo/go/runtime/hash64.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fruntime%2Fhash64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fruntime%2Fhash64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fhash64.go?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -6,7 +6,7 @@\n //   xxhash: https://code.google.com/p/xxhash/\n // cityhash: https://code.google.com/p/cityhash/\n \n-// +build amd64 amd64p32 arm64 mips64 mips64le ppc64 ppc64le s390x alpha arm64be ia64 mips64p32 mips64p32le sparc64\n+// +build amd64 amd64p32 arm64 mips64 mips64le ppc64 ppc64le s390x alpha arm64be ia64 mips64p32 mips64p32le sparc64 riscv64\n \n package runtime\n "}, {"sha": "dca17181e3e06bdc367a5371729dd534db663d51", "filename": "libgo/go/runtime/lfstack_64bit.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fruntime%2Flfstack_64bit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fruntime%2Flfstack_64bit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Flfstack_64bit.go?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build amd64 arm64 mips64 mips64le ppc64 ppc64le s390x arm64be alpha sparc64 ia64\n+// +build amd64 arm64 mips64 mips64le ppc64 ppc64le s390x arm64be alpha sparc64 ia64 riscv64\n \n package runtime\n "}, {"sha": "2f5b63a4c7c0f1bbf5e12ec6e8bc21f2f42388d3", "filename": "libgo/go/runtime/unaligned1.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fruntime%2Funaligned1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fruntime%2Funaligned1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Funaligned1.go?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build 386 amd64 amd64p32 arm64 ppc64 ppc64le s390x ppc s390 arm64be\n+// +build 386 amd64 amd64p32 arm64 ppc64 ppc64le s390x ppc s390 arm64be riscv64\n \n package runtime\n "}, {"sha": "4a7312198f5bde8e05a1008555d34058c36bdb9a", "filename": "libgo/go/syscall/endian_little.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fsyscall%2Fendian_little.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fsyscall%2Fendian_little.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fendian_little.go?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n //\n-// +build 386 amd64 amd64p32 arm arm64 ppc64le mips64le mipsle alpha ia64 mips64p32le sh\n+// +build 386 amd64 amd64p32 arm arm64 ppc64le mips64le mipsle alpha ia64 mips64p32le sh riscv64\n \n package syscall\n "}, {"sha": "3aff344f25c05a90084bbfa2c339813ba3e5e26b", "filename": "libgo/go/syscall/libcall_linux_ustat.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fsyscall%2Flibcall_linux_ustat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgo%2Fsyscall%2Flibcall_linux_ustat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux_ustat.go?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -4,7 +4,7 @@\n \n // GNU/Linux library ustat call.\n // This is not supported on some kernels, such as arm64.\n-// +build !arm64\n+// +build !arm64,!riscv64\n \n package syscall\n "}, {"sha": "c63cbbaa76b4d55d1007696303900e4443f9bb60", "filename": "libgo/goarch.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgoarch.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fgoarch.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgoarch.sh?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -146,6 +146,10 @@ case $goarch in\n \t\t;;\n \tesac\n \t;;\n+    riscv64)\n+\tfamily=RISCV64\n+\tpcquantum=2\n+\t;;\n     s390)\n \tfamily=S390\n \tbigendian=true"}, {"sha": "9247ec6f40d0b45e6f5d47f48bc79594e0657e5a", "filename": "libgo/match.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fmatch.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fmatch.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmatch.sh?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -116,7 +116,7 @@ for f in $gofiles; do\n \taix | android | darwin | dragonfly | freebsd | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t    tag1=nonmatchingtag\n \t    ;;\n-\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | ppc | s390 | s390x | sh | shbe | sparc | sparc64)\n+\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | ppc | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64)\n \t    tag1=nonmatchingtag\n \t    ;;\n     esac\n@@ -128,7 +128,7 @@ for f in $gofiles; do\n \taix | android | darwin | dragonfly | freebsd | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t    tag2=nonmatchingtag\n \t    ;;\n-\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | ppc | s390 | s390x | sh | shbe | sparc | sparc64)\n+\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | ppc | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64)\n \t    tag2=nonmatchingtag\n \t    ;;\n     esac"}, {"sha": "d343aa54d9a8779450092461213c8d748d26fb84", "filename": "libgo/misc/cgo/testcshared/src/libgo2/dup2.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Fsrc%2Flibgo2%2Fdup2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Fsrc%2Flibgo2%2Fdup2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Fsrc%2Flibgo2%2Fdup2.go?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux,!arm64 netbsd openbsd\n+// +build darwin dragonfly freebsd linux,!arm64,!riscv64 netbsd openbsd\n \n package main\n "}, {"sha": "459f0dc196874fbf53db87bf2d976f21d18c4043", "filename": "libgo/misc/cgo/testcshared/src/libgo2/dup3.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Fsrc%2Flibgo2%2Fdup3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Fsrc%2Flibgo2%2Fdup3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Fsrc%2Flibgo2%2Fdup3.go?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build linux,arm64\n+// +build linux,arm64 linux,riscv64\n \n package main\n "}, {"sha": "06848fdb1f0b0da0306c59af19c7c169508929d5", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "patch": "@@ -314,7 +314,7 @@ x)\n \t    aix | android | darwin | dragonfly | freebsd | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t\ttag1=nonmatchingtag\n \t\t;;\n-\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | ppc | s390 | s390x | sh | shbe | sparc | sparc64)\n+\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | ppc | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64)\n \t\ttag1=nonmatchingtag\n \t\t;;\n \t    esac\n@@ -326,7 +326,7 @@ x)\n \t    aix | android | darwin | dragonfly | freebsd | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t\ttag2=nonmatchingtag\n \t\t;;\n-\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | ppc | s390 | s390x | sh | shbe | sparc | sparc64)\n+\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | ppc | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64)\n \t\ttag2=nonmatchingtag\n \t\t;;\n \t    esac"}]}