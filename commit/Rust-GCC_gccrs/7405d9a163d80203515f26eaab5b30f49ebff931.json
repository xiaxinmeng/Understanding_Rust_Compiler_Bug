{"sha": "7405d9a163d80203515f26eaab5b30f49ebff931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQwNWQ5YTE2M2Q4MDIwMzUxNWYyNmVhYWI1YjMwZjQ5ZWJmZjkzMQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-10-24T14:19:32Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-10-24T14:19:32Z"}, "message": "- update record_reg_classes change to be consistent with\n  Kenner's change to gcc.\n\nFrom-SVN: r23275", "tree": {"sha": "28927c2c62e7fb7becd1f824fd97fd482c7d29e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28927c2c62e7fb7becd1f824fd97fd482c7d29e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7405d9a163d80203515f26eaab5b30f49ebff931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7405d9a163d80203515f26eaab5b30f49ebff931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7405d9a163d80203515f26eaab5b30f49ebff931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7405d9a163d80203515f26eaab5b30f49ebff931/comments", "author": null, "committer": null, "parents": [{"sha": "c60f1599b1a33d22b79e2888f48643566bd81d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60f1599b1a33d22b79e2888f48643566bd81d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60f1599b1a33d22b79e2888f48643566bd81d34"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "ef1dce2bdeaeda12cdd9e4d27d4a0d379ca515d3", "filename": "gcc/regclass.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7405d9a163d80203515f26eaab5b30f49ebff931/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7405d9a163d80203515f26eaab5b30f49ebff931/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=7405d9a163d80203515f26eaab5b30f49ebff931", "patch": "@@ -1200,6 +1200,9 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t  int win = 0;\n \t  unsigned char c;\n \n+\t  /* Initially show we know nothing about the register class.  */\n+\t  classes[i] = NO_REGS;\n+\n \t  /* If this operand has no constraints at all, we can conclude \n \t     nothing about it since anything is valid.  */\n \n@@ -1211,8 +1214,11 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t      continue;\n \t    }\n \n-\t  /* Ascertain modifiers for line and skip any modifiers that might\n-\t     occur before first constraint.  */\n+\t  /* If this alternative is only relevant when this operand\n+\t     matches a previous operand, we do different things depending\n+\t     on whether this operand is a pseudo-reg or not.  We must process\n+\t     any modifiers for the operand before we can make this test.  */\n+\n \t  while (*p == '%' || *p == '=' || *p == '+' || *p == '&')\n \t    {\n \t      if (*p == '=')\n@@ -1223,12 +1229,6 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t      p++;\n \t    }\n \n-\t  classes[i] = NO_REGS;\n-\n-\t  /* If this alternative is only relevant when this operand\n-\t     matches a previous operand, we do different things depending\n-\t     on whether this operand is a pseudo-reg or not.  */\n-\n \t  if (p[0] >= '0' && p[0] <= '0' + i && (p[1] == ',' || p[1] == 0))\n \t    {\n \t      j = p[0] - '0';"}]}