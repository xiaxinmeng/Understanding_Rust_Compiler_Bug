{"sha": "58a9d876fccd9c28dd4d5eb346cd2c695a3406fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhOWQ4NzZmY2NkOWMyOGRkNGQ1ZWIzNDZjZDJjNjk1YTM0MDZmYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:11:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:11:19Z"}, "message": "[multiple changes]\n\n2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb (Expand_Subtype_From_Expr): use the\n\tunderlying_record_view when available, to create the proper constrained\n\tsubtype for an object of a derived type with unknown discriminants.\n\n2009-04-20  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch6.ad (Expand_Inlined_Call): Avoid generation of temporaries for\n\tformals that have pragma unreferenced.\n\nFrom-SVN: r146414", "tree": {"sha": "8f0bf6a3ca5791313cc3d1ce65c0e64c487a9581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f0bf6a3ca5791313cc3d1ce65c0e64c487a9581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc/comments", "author": null, "committer": null, "parents": [{"sha": "e34ca162e700cb23aa7a247b394bfbf17135498b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34ca162e700cb23aa7a247b394bfbf17135498b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e34ca162e700cb23aa7a247b394bfbf17135498b"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "65cd4e8e5dd76808abb16ddf01e1f3092b77a96d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=58a9d876fccd9c28dd4d5eb346cd2c695a3406fc", "patch": "@@ -1,3 +1,14 @@\n+2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Expand_Subtype_From_Expr): use the\n+\tunderlying_record_view when available, to create the proper constrained\n+\tsubtype for an object of a derived type with unknown discriminants.\n+\n+2009-04-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Inlined_Call): Avoid generation of temporaries for\n+\tformals that have pragma unreferenced.\n+\n 2009-04-20  Pascal Obry  <obry@adacore.com>\n \n \t* a-direct.adb (To_Lower_If_Case_Insensitive): Removed."}, {"sha": "989dc1acdb5689793e2c0e5b2f04591a500283eb", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=58a9d876fccd9c28dd4d5eb346cd2c695a3406fc", "patch": "@@ -3670,6 +3670,16 @@ package body Exp_Ch6 is\n             return;\n          end if;\n \n+         --  Avoid generation of temporaries for unreferenced formals\n+\n+         --  What is going on here ??? test below is for *PRAGMA* unreferenced\n+         --  not for an unreferenced formal. Is this a bug fix, or simply an\n+         --  optimization. Needs comment fix and explanation ???\n+\n+         if Has_Pragma_Unreferenced (F) then\n+            goto Continue;\n+         end if;\n+\n          --  If the argument may be a controlling argument in a call within\n          --  the inlined body, we must preserve its classwide nature to insure\n          --  that dynamic dispatching take place subsequently. If the formal\n@@ -3790,6 +3800,7 @@ package body Exp_Ch6 is\n             Set_Renamed_Object (F, Temp);\n          end if;\n \n+         <<Continue>>\n          Next_Formal (F);\n          Next_Actual (A);\n       end loop;"}, {"sha": "8e5479738c8d7c1ffd7a59ac26515c3ecac1306e", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=58a9d876fccd9c28dd4d5eb346cd2c695a3406fc", "patch": "@@ -1328,15 +1328,28 @@ package body Exp_Util is\n       then\n          null;\n \n-      --  Nothing to be done for derived types with unknown discriminants if\n-      --  the parent type also has unknown discriminants.\n+      --  Case of derived type with unknown discriminants where the parent type\n+      --  also has unknown discriminants.\n \n       elsif Is_Record_Type (Unc_Type)\n         and then not Is_Class_Wide_Type (Unc_Type)\n         and then Has_Unknown_Discriminants (Unc_Type)\n         and then Has_Unknown_Discriminants (Underlying_Type (Unc_Type))\n       then\n-         null;\n+         --  Nothing to be done if no underlying record view available\n+\n+         if No (Underlying_Record_View (Unc_Type)) then\n+            null;\n+\n+         --  Otherwise use the Underlying_Record_View to create the proper\n+         --  constrained subtype for an object of a derived type with unknown\n+         --  discriminants.\n+\n+         else\n+            Remove_Side_Effects (Exp);\n+            Rewrite (Subtype_Indic,\n+              Make_Subtype_From_Expr (Exp, Underlying_Record_View (Unc_Type)));\n+         end if;\n \n       --  In Ada95, Nothing to be done if the type of the expression is\n       --  limited, because in this case the expression cannot be copied,"}]}