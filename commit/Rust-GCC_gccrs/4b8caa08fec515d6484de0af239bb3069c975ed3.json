{"sha": "4b8caa08fec515d6484de0af239bb3069c975ed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4Y2FhMDhmZWM1MTVkNjQ4NGRlMGFmMjM5YmIzMDY5Yzk3NWVkMw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2018-12-04T04:22:37Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2018-12-04T04:22:37Z"}, "message": "re PR c/59039 (Undocumented __builtin_longjmp/__builtin_setjmp)\n\n2018-12-03  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR c/59039\n\n\tgcc/\n\t* doc/extend.texi (Nonlocal gotos): New section.\n\nFrom-SVN: r266770", "tree": {"sha": "eb7b5c71459f98c435d2d91f0b866328a65a68c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb7b5c71459f98c435d2d91f0b866328a65a68c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b8caa08fec515d6484de0af239bb3069c975ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8caa08fec515d6484de0af239bb3069c975ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8caa08fec515d6484de0af239bb3069c975ed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8caa08fec515d6484de0af239bb3069c975ed3/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1c3e06f2c56d5098978cb4d506fdf078d5a38b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c3e06f2c56d5098978cb4d506fdf078d5a38b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c3e06f2c56d5098978cb4d506fdf078d5a38b3"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "19d130bb4508ecccf0e8cbd5690eeea3f904c309", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8caa08fec515d6484de0af239bb3069c975ed3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8caa08fec515d6484de0af239bb3069c975ed3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b8caa08fec515d6484de0af239bb3069c975ed3", "patch": "@@ -1,3 +1,8 @@\n+2018-12-03  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR c/59039\n+\t* doc/extend.texi (Nonlocal gotos): New section.\n+\n 2018-12-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (vec_concatv2df): Change (v,xm,C)"}, {"sha": "e0f9b38f1b21021abab07c2df2de318e3a789677", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8caa08fec515d6484de0af239bb3069c975ed3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8caa08fec515d6484de0af239bb3069c975ed3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4b8caa08fec515d6484de0af239bb3069c975ed3", "patch": "@@ -27,6 +27,7 @@ extensions, accepted by GCC in C90 mode and in C++.\n * Local Labels::        Labels local to a block.\n * Labels as Values::    Getting pointers to labels, and computed gotos.\n * Nested Functions::    Nested function in GNU C.\n+* Nonlocal Gotos::      Nonlocal gotos.\n * Constructing Calls::  Dispatching a call to another function.\n * Typeof::              @code{typeof}: referring to the type of an expression.\n * Conditionals::        Omitting the middle operand of a @samp{?:} expression.\n@@ -520,6 +521,61 @@ bar (int *array, int offset, int size)\n @}\n @end smallexample\n \n+@node Nonlocal Gotos\n+@section Nonlocal Gotos\n+@cindex nonlocal gotos\n+\n+GCC provides the built-in functions @code{__builtin_setjmp} and\n+@code{__builtin_longjmp} which are similar to, but not interchangeable\n+with, the C library functions @code{setjmp} and @code{longjmp}.  \n+The built-in versions are used internally by GCC's libraries\n+to implement exception handling on some targets.  You should use the \n+standard C library functions declared in @code{<setjmp.h>} in user code\n+instead of the builtins.\n+\n+The built-in versions of these functions use GCC's normal\n+mechanisms to save and restore registers using the stack on function\n+entry and exit.  The jump buffer argument @var{buf} holds only the\n+information needed to restore the stack frame, rather than the entire \n+set of saved register values.  \n+\n+An important caveat is that GCC arranges to save and restore only\n+those registers known to the specific architecture variant being\n+compiled for.  This can make @code{__builtin_setjmp} and\n+@code{__builtin_longjmp} more efficient than their library\n+counterparts in some cases, but it can also cause incorrect and\n+mysterious behavior when mixing with code that uses the full register\n+set.\n+\n+You should declare the jump buffer argument @var{buf} to the\n+built-in functions as:\n+\n+@smallexample\n+#include <stdint.h>\n+intptr_t @var{buf}[5];\n+@end smallexample\n+\n+@deftypefn {Built-in Function} {int} __builtin_setjmp (intptr_t *@var{buf})\n+This function saves the current stack context in @var{buf}.  \n+@code{__builtin_setjmp} returns 0 when returning directly,\n+and 1 when returning from @code{__builtin_longjmp} using the same\n+@var{buf}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} {void} __builtin_longjmp (intptr_t *@var{buf}, int @var{val})\n+This function restores the stack context in @var{buf}, \n+saved by a previous call to @code{__builtin_setjmp}.  After\n+@code{__builtin_longjmp} is finished, the program resumes execution as\n+if the matching @code{__builtin_setjmp} returns the value @var{val},\n+which must be 1.\n+\n+Because @code{__builtin_longjmp} depends on the function return\n+mechanism to restore the stack context, it cannot be called\n+from the same function calling @code{__builtin_setjmp} to\n+initialize @var{buf}.  It can only be called from a function called\n+(directly or indirectly) from the function calling @code{__builtin_setjmp}.\n+@end deftypefn\n+\n @node Constructing Calls\n @section Constructing Function Calls\n @cindex constructing calls"}]}