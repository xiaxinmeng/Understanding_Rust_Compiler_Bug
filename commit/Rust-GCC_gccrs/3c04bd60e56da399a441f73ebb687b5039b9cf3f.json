{"sha": "3c04bd60e56da399a441f73ebb687b5039b9cf3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwNGJkNjBlNTZkYTM5OWE0NDFmNzNlYmI2ODdiNTAzOWI5Y2YzZg==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-08-18T19:48:56Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-08-18T19:48:56Z"}, "message": "PR fortran/96613,96686 - Fix type/kind issues, temporaries evaluating MIN/MAX\n\nWhen evaluating functions of the MIN/MAX variety inline, use a temporary\nof appropriate type and kind, and convert to the result type at the end.\nIn the case of allowing for the GNU extensions to MIN/MAX, derive the\nresult kind consistently during simplificaton.\n\nFurthermore, the Fortran standard requires type and kind of arguments to\nthe MIN/MAX intrinsics to all have the same type and kind.  While a GNU\nextension accepts kind differences for integer and real arguments which\nseems to have been used in legacy code, there is no reason to allow\ndifferent character kinds.  We now reject the latter unconditionally.\n\ngcc/fortran/ChangeLog:\n\n\t* check.c (check_rest): Reject MIN/MAX character arguments of\n\tdifferent kind.\n\t* simplify.c (min_max_choose): The simplification result shall\n\thave the highest kind value of the arguments.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax): Choose type and\n\tkind of intermediate by looking at all arguments, not the result.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/minmax_char_3.f90: New test.\n\t* gfortran.dg/min_max_kind.f90: New test.\n\t* gfortran.dg/pr96613.f90: New test.", "tree": {"sha": "8f863119f3885d7792bfcb269c2d084c3b96d845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f863119f3885d7792bfcb269c2d084c3b96d845"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c04bd60e56da399a441f73ebb687b5039b9cf3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c04bd60e56da399a441f73ebb687b5039b9cf3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c04bd60e56da399a441f73ebb687b5039b9cf3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c04bd60e56da399a441f73ebb687b5039b9cf3f/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd9716398302920ac28a13d745424ff871e528b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd9716398302920ac28a13d745424ff871e528b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd9716398302920ac28a13d745424ff871e528b"}], "stats": {"total": 77, "additions": 69, "deletions": 8}, "files": [{"sha": "65b46cd3f85bc26827ae1b38616f0ead52918fff", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=3c04bd60e56da399a441f73ebb687b5039b9cf3f", "patch": "@@ -3693,6 +3693,11 @@ check_rest (bt type, int kind, gfc_actual_arglist *arglist)\n \t{\n \t  if (x->ts.type == type)\n \t    {\n+\t      if (x->ts.type == BT_CHARACTER)\n+\t\t{\n+\t\t  gfc_error (\"Different character kinds at %L\", &x->where);\n+\t\t  return false;\n+\t\t}\n \t      if (!gfc_notify_std (GFC_STD_GNU, \"Different type \"\n \t\t\t\t   \"kinds at %L\", &x->where))\n \t\treturn false;"}, {"sha": "074b50c2e6889678bc56a10457b26640376731ce", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=3c04bd60e56da399a441f73ebb687b5039b9cf3f", "patch": "@@ -4924,13 +4924,17 @@ min_max_choose (gfc_expr *arg, gfc_expr *extremum, int sign, bool back_val)\n   switch (arg->ts.type)\n     {\n       case BT_INTEGER:\n+\tif (extremum->ts.kind < arg->ts.kind)\n+\t  extremum->ts.kind = arg->ts.kind;\n \tret = mpz_cmp (arg->value.integer,\n \t\t       extremum->value.integer) * sign;\n \tif (ret > 0)\n \t  mpz_set (extremum->value.integer, arg->value.integer);\n \tbreak;\n \n       case BT_REAL:\n+\tif (extremum->ts.kind < arg->ts.kind)\n+\t  extremum->ts.kind = arg->ts.kind;\n \tif (mpfr_nan_p (extremum->value.real))\n \t  {\n \t    ret = 1;"}, {"sha": "2483f016d8e9ecf92c5092d9c6a5542d690ecddd", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=3c04bd60e56da399a441f73ebb687b5039b9cf3f", "patch": "@@ -4073,6 +4073,7 @@ gfc_conv_intrinsic_minmax (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   tree val;\n   tree *args;\n   tree type;\n+  tree argtype;\n   gfc_actual_arglist *argexpr;\n   unsigned int i, nargs;\n \n@@ -4082,16 +4083,24 @@ gfc_conv_intrinsic_minmax (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   gfc_conv_intrinsic_function_args (se, expr, args, nargs);\n   type = gfc_typenode_for_spec (&expr->ts);\n \n-  argexpr = expr->value.function.actual;\n-  if (TREE_TYPE (args[0]) != type)\n-    args[0] = convert (type, args[0]);\n   /* Only evaluate the argument once.  */\n   if (!VAR_P (args[0]) && !TREE_CONSTANT (args[0]))\n     args[0] = gfc_evaluate_now (args[0], &se->pre);\n \n-  mvar = gfc_create_var (type, \"M\");\n-  gfc_add_modify (&se->pre, mvar, args[0]);\n+  /* Determine suitable type of temporary, as a GNU extension allows\n+     different argument kinds.  */\n+  argtype = TREE_TYPE (args[0]);\n+  argexpr = expr->value.function.actual;\n+  for (i = 1, argexpr = argexpr->next; i < nargs; i++, argexpr = argexpr->next)\n+    {\n+      tree tmptype = TREE_TYPE (args[i]);\n+      if (TYPE_PRECISION (tmptype) > TYPE_PRECISION (argtype))\n+\targtype = tmptype;\n+    }\n+  mvar = gfc_create_var (argtype, \"M\");\n+  gfc_add_modify (&se->pre, mvar, convert (argtype, args[0]));\n \n+  argexpr = expr->value.function.actual;\n   for (i = 1, argexpr = argexpr->next; i < nargs; i++, argexpr = argexpr->next)\n     {\n       tree cond = NULL_TREE;\n@@ -4119,16 +4128,19 @@ gfc_conv_intrinsic_minmax (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \t Also, there is no consensus among other tested compilers.  In\n \t short, it's a mess.  So lets just do whatever is fastest.  */\n       tree_code code = op == GT_EXPR ? MAX_EXPR : MIN_EXPR;\n-      calc = fold_build2_loc (input_location, code, type,\n-\t\t\t      convert (type, val), mvar);\n+      calc = fold_build2_loc (input_location, code, argtype,\n+\t\t\t      convert (argtype, val), mvar);\n       tmp = build2_v (MODIFY_EXPR, mvar, calc);\n \n       if (cond != NULL_TREE)\n \ttmp = build3_v (COND_EXPR, cond, tmp,\n \t\t\tbuild_empty_stmt (input_location));\n       gfc_add_expr_to_block (&se->pre, tmp);\n     }\n-  se->expr = mvar;\n+  if (TREE_CODE (type) == INTEGER_TYPE)\n+    se->expr = fold_build1_loc (input_location, FIX_TRUNC_EXPR, type, mvar);\n+  else\n+    se->expr = convert (type, mvar);\n }\n \n "}, {"sha": "b22691e1ffe9ec2e26b2833a49250f2f709238ac", "filename": "gcc/testsuite/gfortran.dg/min_max_kind.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_kind.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_kind.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_kind.f90?ref=3c04bd60e56da399a441f73ebb687b5039b9cf3f", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! { dg-options \"-O2 -std=gnu\" }\n+! Verify that the GNU extensions to MIN/MAX handle mixed kinds properly.\n+\n+program p\n+  implicit none\n+  integer(1), parameter :: i1 = 1\n+  integer(2), parameter :: i2 = 2\n+  real(4),    parameter :: r4 = 4\n+  real(8),    parameter :: r8 = 8\n+  if (kind (min (i1, i2)) /= kind (i2)) stop 1\n+  if (kind (min (i2, i1)) /= kind (i2)) stop 2\n+  if (kind (min (r4, r8)) /= kind (r8)) stop 3\n+  if (kind (min (r8, r4)) /= kind (r8)) stop 4\n+end program p"}, {"sha": "291ba1fd1e950c11e4a004dddb4b6cb158a2a6d6", "filename": "gcc/testsuite/gfortran.dg/minmax_char_3.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmax_char_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmax_char_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmax_char_3.f90?ref=3c04bd60e56da399a441f73ebb687b5039b9cf3f", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! PR96686: MIN/MAX should reject character arguments of different kind\n+\n+program p\n+  implicit none\n+  character(kind=1) :: c1 = \"1\"\n+  character(kind=4) :: c4 = 4_\"4\"\n+  print *, min (c1, c4) ! { dg-error \"Different character kinds\" }\n+  print *, min (c4, c1) ! { dg-error \"Different character kinds\" }\n+end program p"}, {"sha": "2043c25fe1c4d32e25ff8c7dc2dd6b181eab4aef", "filename": "gcc/testsuite/gfortran.dg/pr96613.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96613.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c04bd60e56da399a441f73ebb687b5039b9cf3f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96613.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96613.f90?ref=3c04bd60e56da399a441f73ebb687b5039b9cf3f", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! { dg-options \"-O2 -std=gnu\" }\n+! PR fortran/96613 - Fix type/kind of temporaries evaluating MIN/MAX\n+\n+program test\n+  implicit none\n+  real :: x = 7.7643945e+09\n+  real :: y = 6000.\n+  integer :: ix\n+\n+  ix = min1 (5000.0, x)\n+  if (ix /= 5000) stop 1\n+  ix = min1 (y, x, 5555.d0)\n+  if (ix /= 5555) stop 2\n+end program"}]}