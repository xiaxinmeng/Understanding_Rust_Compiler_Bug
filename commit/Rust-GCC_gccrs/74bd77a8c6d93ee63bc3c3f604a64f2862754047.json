{"sha": "74bd77a8c6d93ee63bc3c3f604a64f2862754047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiZDc3YThjNmQ5M2VlNjNiYzNjM2Y2MDRhNjRmMjg2Mjc1NDA0Nw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-16T19:03:06Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-16T19:03:06Z"}, "message": "entered into RCS\n\nFrom-SVN: r1594", "tree": {"sha": "da4671f6cf3e9cd5aa7f831833b3cbf6b76f14cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da4671f6cf3e9cd5aa7f831833b3cbf6b76f14cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74bd77a8c6d93ee63bc3c3f604a64f2862754047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74bd77a8c6d93ee63bc3c3f604a64f2862754047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74bd77a8c6d93ee63bc3c3f604a64f2862754047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74bd77a8c6d93ee63bc3c3f604a64f2862754047/comments", "author": null, "committer": null, "parents": [{"sha": "8d7bbe5f87bd33d7d4c03376767c8856ca266e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d7bbe5f87bd33d7d4c03376767c8856ca266e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d7bbe5f87bd33d7d4c03376767c8856ca266e50"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "37a0f47a0c836e81d9d1ad0051d5e820c393a0fe", "filename": "gcc/function.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bd77a8c6d93ee63bc3c3f604a64f2862754047/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bd77a8c6d93ee63bc3c3f604a64f2862754047/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=74bd77a8c6d93ee63bc3c3f604a64f2862754047", "patch": "@@ -2804,14 +2804,8 @@ assign_parms (fndecl, second_time)\n \t    }\n \t  DECL_RTL (parm) = stack_parm;\n \t}\n-      else if (! (\n-#if 0 /* This change was turned off because it makes compilation bigger.  */\n-\t\t  !optimize\n-#else /* It's not clear why the following was replaced.  */\n-\t\t  /* Obsoleted by preceding line. */\n-\t\t  (obey_regdecls && ! DECL_REGISTER (parm)\n+      else if (! ((obey_regdecls && ! DECL_REGISTER (parm)\n \t\t   && ! DECL_INLINE (fndecl))\n-#endif\n \t\t  /* layout_decl may set this.  */\n \t\t  || TREE_ADDRESSABLE (parm)\n \t\t  || TREE_SIDE_EFFECTS (parm)\n@@ -2858,6 +2852,24 @@ assign_parms (fndecl, second_time)\n \t  else\n \t    emit_move_insn (parmreg, validize_mem (entry_parm));\n \n+\t  /* If we were passed a pointer but the actual value\n+\t     can safely live in a register, put it in one.  */\n+\t  if (passed_pointer && nominal_mode != BLKmode\n+\t      && ! ((obey_regdecls && ! DECL_REGISTER (parm)\n+\t\t     && ! DECL_INLINE (fndecl))\n+\t\t    /* layout_decl may set this.  */\n+\t\t    || TREE_ADDRESSABLE (parm)\n+\t\t    || TREE_SIDE_EFFECTS (parm)\n+\t\t    /* If -ffloat-store specified, don't put explicit\n+\t\t       float variables into registers.  */\n+\t\t    || (flag_float_store\n+\t\t\t&& TREE_CODE (TREE_TYPE (parm)) == REAL_TYPE)))\n+\t    {\n+\t      parmreg = gen_reg_rtx (nominal_mode);\n+\t      emit_move_insn (parmreg, DECL_RTL (parm));\n+\t      DECL_RTL (parm) = parmreg;\n+\t    }\n+\n \t  /* In any case, record the parm's desired stack location\n \t     in case we later discover it must live in the stack.  */\n \t  if (REGNO (parmreg) >= nparmregs)"}]}