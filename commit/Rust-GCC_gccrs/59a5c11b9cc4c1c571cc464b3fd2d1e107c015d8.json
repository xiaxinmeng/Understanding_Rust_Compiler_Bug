{"sha": "59a5c11b9cc4c1c571cc464b3fd2d1e107c015d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlhNWMxMWI5Y2M0YzFjNTcxY2M0NjRiM2ZkMmQxZTEwN2MwMTVkOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-09T05:09:05Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-09T05:09:05Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r293", "tree": {"sha": "eb5acd6674af37cca80d894b1efa71029d08d088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb5acd6674af37cca80d894b1efa71029d08d088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59a5c11b9cc4c1c571cc464b3fd2d1e107c015d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a5c11b9cc4c1c571cc464b3fd2d1e107c015d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a5c11b9cc4c1c571cc464b3fd2d1e107c015d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a5c11b9cc4c1c571cc464b3fd2d1e107c015d8/comments", "author": null, "committer": null, "parents": [{"sha": "c3878c43bd8ffe17a6a41796a289309432822314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3878c43bd8ffe17a6a41796a289309432822314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3878c43bd8ffe17a6a41796a289309432822314"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "97531d0f72895de575afa5a41b7f20f484da24dd", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a5c11b9cc4c1c571cc464b3fd2d1e107c015d8/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a5c11b9cc4c1c571cc464b3fd2d1e107c015d8/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=59a5c11b9cc4c1c571cc464b3fd2d1e107c015d8", "patch": "@@ -70,23 +70,17 @@ extern int target_flags;\n \n #define TARGET_DEFAULT 3\n \n-/* Define this to change the optimizations peformed by default.  */\n+/* Define this to change the optimizations peformed by default.\n \n-#define OPTIMIZATION_OPTIONS(LEVEL) \n+   This used to depend on the value of write_symbols,\n+   but that is contrary to the general plan for GCC options.  */\n \n-/* Define this to modify the options specified by the user.\n-\n-   On the ROMP, we turn on various flags if optimization is selected.\n-   More get turned on if debugging is off.  */\n-\n-#define OVERRIDE_OPTIONS\t\t\\\n+#define OPTIMIZATION_OPTIONS(LEVEL)\t\\\n {\t\t\t\t\t\\\n-  if (optimize)\t\t\t\t\\\n+  if ((LEVEL) > 0)\t\t\t\\\n     {\t\t\t\t\t\\\n       flag_force_addr = 1;\t\t\\\n       flag_force_mem = 1;\t\t\\\n-      if (write_symbols == NO_DEBUG)\t\\\n-\tflag_omit_frame_pointer = 1;\t\\\n     }\t\t\t\t\t\\\n }\n \f\n@@ -986,14 +980,14 @@ struct rt_cargs {int gregs, fregs; };\n   ((LEGITIMATE_ADDRESS_CONSTANT_P (X)\t\t\\\n     || GET_CODE (X) == CONST_INT\t\t\\\n     || GET_CODE (X) == CONST_DOUBLE)\t\t\\\n-   && ! (GET_CODE (X) == SYMBOL_REF && (X)->integrated))\n+   && ! (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X)))\n \n /* For no good reason, we do the same as the other RT compilers and load\n    the addresses of data areas for a function from our data area.  That means\n    that we need to mark such SYMBOL_REFs.  We do so here.  */\n-#define ENCODE_SEGMENT_INFO(DECL)\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL)\t\t\t\\\n   if (TREE_CODE (TREE_TYPE (DECL)) == FUNCTION_TYPE)\t\\\n-    XEXP (DECL_RTL (DECL), 0)->integrated = 1;\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class."}]}