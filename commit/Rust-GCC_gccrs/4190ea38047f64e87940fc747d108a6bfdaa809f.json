{"sha": "4190ea38047f64e87940fc747d108a6bfdaa809f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5MGVhMzgwNDdmNjRlODc5NDBmYzc0N2QxMDhhNmJmZGFhODA5Zg==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-11-21T15:28:24Z"}, "committer": {"name": "Ilya Tocar", "email": "tocarip@gcc.gnu.org", "date": "2014-11-21T15:28:24Z"}, "message": "Add avx512ifma instructions.\n\ngcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512IFMA_SET,\n\tOPTION_MASK_ISA_AVX512IFMA_UNSET): New.\n\t(ix86_handle_option): Handle OPT_mavx512ifma.\n\t* config.gcc: Add avx512ifmaintrin.h, avx512ifmavlintrin.h.\n\t* config/i386/avx512ifmaintrin.h: New file.\n\t* config/i386/avx512ifmaivlntrin.h: Ditto.\n\t* config/i386/cpuid.h (bit_AVX512IFMA): New.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n\tavx512ifma.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__AVX512IFMA__.\n\t* config/i386/i386.c (ix86_target_string): Add -mavx512ifma.\n\t(PTA_AVX512IFMA): Define.\n\t(ix86_option_override_internal): Handle new options.\n\t(ix86_valid_target_attribute_inner_p): Add avx512ifma.\n\t(ix86_builtins): Add IX86_BUILTIN_VPMADD52LUQ512,\n\tIX86_BUILTIN_VPMADD52HUQ512, IX86_BUILTIN_VPMADD52LUQ256,\n\tIX86_BUILTIN_VPMADD52HUQ256, IX86_BUILTIN_VPMADD52LUQ128,\n\tIX86_BUILTIN_VPMADD52HUQ128, IX86_BUILTIN_VPMADD52LUQ512_MASKZ,\n\tIX86_BUILTIN_VPMADD52HUQ512_MASKZ, IX86_BUILTIN_VPMADD52LUQ256_MASKZ,\n\tIX86_BUILTIN_VPMADD52HUQ256_MASKZ, IX86_BUILTIN_VPMADD52LUQ128_MASKZ,\n\tIX86_BUILTIN_VPMADD52HUQ128_MASKZ.\n\t(bdesc_special_args): Add __builtin_ia32_vpmadd52luq512_mask,\n\t__builtin_ia32_vpmadd52luq512_maskz,\n\t__builtin_ia32_vpmadd52huq512_mask,\n\t__builtin_ia32_vpmadd52huq512_maskx,\n\t__builtin_ia32_vpmadd52luq256_mask,\n\t__builtin_ia32_vpmadd52luq256_maskz,\n\t__builtin_ia32_vpmadd52huq256_mask,\n\t__builtin_ia32_vpmadd52huq256_maskz,\n\t__builtin_ia32_vpmadd52luq128_mask,\n\t__builtin_ia32_vpmadd52luq128_maskz,\n\t__builtin_ia32_vpmadd52huq128_mask,\n\t__builtin_ia32_vpmadd52huq128_maskz,\n\t* config/i386/i386.h (TARGET_AVX512IFMA, TARGET_AVX512IFMA_P): Define.\n\t* config/i386/i386.opt: Add mavx512ifma.\n\t* config/i386/immintrin.h: Include avx512ifmaintrin.h,\n\tavx512ifmavlintrin.h.\n\t* config/i386/sse.md (unspec): Add UNSPEC_VPMADD52LUQ,\n\tUNSPEC_VPMADD52HUQ.\n\t(VPMADD52): New iterator.\n\t(vpmadd52type): New attribute.\n\t(vpamdd52huq<mode>_maskz): New.\n\t(vpamdd52luq<mode>_maskz): Ditto.\n\t(vpamdd52<vpmadd52type><mode><sd_maskz_name>): Ditto.\n\t(vpamdd52<vpmadd52type><mode>_mask): Ditto.\n\ngcc/testsuite/\n\n\t* g++.dg/other/i386-2.C: Add -mavx512ifma.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/avx512f-helper.h: Add avx512ifma-check.h.\n\t* gcc.target/i386/avx512ifma-check.h: New.\n\t* gcc.target/i386/avx512ifma-vpmaddhuq-1.c: Ditto.\n\t* gcc.target/i386/avx512ifma-vpmaddhuq-2.c: Ditto.\n\t* gcc.target/i386/avx512ifma-vpmaddluq-1.c: Ditto.\n\t* gcc.target/i386/avx512ifma-vpmaddluq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaddhuq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaddluq-2.c: Ditto.\n\t* gcc.target/i386/i386.exp (check_effective_target_avx512ifma): New.\n\t* gcc.target/i386/sse-12.c: Add new options.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\n2014-11-21  Georg-Johann Lay  <avr@gjlay.de>\n\nFrom-SVN: r217928", "tree": {"sha": "a6bead7812796093605b9518a2a51ff78851d83c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6bead7812796093605b9518a2a51ff78851d83c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4190ea38047f64e87940fc747d108a6bfdaa809f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4190ea38047f64e87940fc747d108a6bfdaa809f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4190ea38047f64e87940fc747d108a6bfdaa809f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4190ea38047f64e87940fc747d108a6bfdaa809f/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f399c3e858884a5d0b7f2bc1df162b01acd84e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f399c3e858884a5d0b7f2bc1df162b01acd84e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f399c3e858884a5d0b7f2bc1df162b01acd84e3"}], "stats": {"total": 767, "additions": 756, "deletions": 11}, "files": [{"sha": "4a4597877f3babaa5e5fcae5e7edf8ec9768914c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -1,3 +1,52 @@\n+2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512IFMA_SET,\n+\tOPTION_MASK_ISA_AVX512IFMA_UNSET): New.\n+\t(ix86_handle_option): Handle OPT_mavx512ifma.\n+\t* config.gcc: Add avx512ifmaintrin.h, avx512ifmavlintrin.h.\n+\t* config/i386/avx512ifmaintrin.h: New file.\n+\t* config/i386/avx512ifmaivlntrin.h: Ditto.\n+\t* config/i386/cpuid.h (bit_AVX512IFMA): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\tavx512ifma.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__AVX512IFMA__.\n+\t* config/i386/i386.c (ix86_target_string): Add -mavx512ifma.\n+\t(PTA_AVX512IFMA): Define.\n+\t(ix86_option_override_internal): Handle new options.\n+\t(ix86_valid_target_attribute_inner_p): Add avx512ifma.\n+\t(ix86_builtins): Add IX86_BUILTIN_VPMADD52LUQ512,\n+\tIX86_BUILTIN_VPMADD52HUQ512, IX86_BUILTIN_VPMADD52LUQ256,\n+\tIX86_BUILTIN_VPMADD52HUQ256, IX86_BUILTIN_VPMADD52LUQ128,\n+\tIX86_BUILTIN_VPMADD52HUQ128, IX86_BUILTIN_VPMADD52LUQ512_MASKZ,\n+\tIX86_BUILTIN_VPMADD52HUQ512_MASKZ, IX86_BUILTIN_VPMADD52LUQ256_MASKZ,\n+\tIX86_BUILTIN_VPMADD52HUQ256_MASKZ, IX86_BUILTIN_VPMADD52LUQ128_MASKZ,\n+\tIX86_BUILTIN_VPMADD52HUQ128_MASKZ.\n+\t(bdesc_special_args): Add __builtin_ia32_vpmadd52luq512_mask,\n+\t__builtin_ia32_vpmadd52luq512_maskz,\n+\t__builtin_ia32_vpmadd52huq512_mask,\n+\t__builtin_ia32_vpmadd52huq512_maskx,\n+\t__builtin_ia32_vpmadd52luq256_mask,\n+\t__builtin_ia32_vpmadd52luq256_maskz,\n+\t__builtin_ia32_vpmadd52huq256_mask,\n+\t__builtin_ia32_vpmadd52huq256_maskz,\n+\t__builtin_ia32_vpmadd52luq128_mask,\n+\t__builtin_ia32_vpmadd52luq128_maskz,\n+\t__builtin_ia32_vpmadd52huq128_mask,\n+\t__builtin_ia32_vpmadd52huq128_maskz,\n+\t* config/i386/i386.h (TARGET_AVX512IFMA, TARGET_AVX512IFMA_P): Define.\n+\t* config/i386/i386.opt: Add mavx512ifma.\n+\t* config/i386/immintrin.h: Include avx512ifmaintrin.h,\n+\tavx512ifmavlintrin.h.\n+\t* config/i386/sse.md (unspec): Add UNSPEC_VPMADD52LUQ,\n+\tUNSPEC_VPMADD52HUQ.\n+\t(VPMADD52): New iterator.\n+\t(vpmadd52type): New attribute.\n+\t(vpamdd52huq<mode>_maskz): New.\n+\t(vpamdd52luq<mode>_maskz): Ditto.\n+\t(vpamdd52<vpmadd52type><mode><sd_maskz_name>): Ditto.\n+\t(vpamdd52<vpmadd52type><mode>_mask): Ditto.\n+\n 2014-11-21  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tRevert:"}, {"sha": "73044a07c2518437668a052c9bc0311708f74e79", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -71,6 +71,8 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_AVX512VL_SET \\\n   (OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512F_SET)\n+#define OPTION_MASK_ISA_AVX512IFMA_SET \\\n+  (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n@@ -167,6 +169,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX512DQ_UNSET OPTION_MASK_ISA_AVX512DQ\n #define OPTION_MASK_ISA_AVX512BW_UNSET OPTION_MASK_ISA_AVX512BW\n #define OPTION_MASK_ISA_AVX512VL_UNSET OPTION_MASK_ISA_AVX512VL\n+#define OPTION_MASK_ISA_AVX512IFMA_UNSET OPTION_MASK_ISA_AVX512IFMA\n #define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_UNSET OPTION_MASK_ISA_RDSEED\n@@ -443,6 +446,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavx512ifma:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512IFMA_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512IFMA_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX512IFMA_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512IFMA_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "dbf4191c1ab4a1b5d416791e2e2d3067f49fec35", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -367,7 +367,8 @@ i[34567]86-*-*)\n \t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\n \t\t       shaintrin.h clflushoptintrin.h xsavecintrin.h\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n-\t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\"\n+\t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n+\t\t       avx512ifmaintrin.h avx512ifmavlintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -386,7 +387,8 @@ x86_64-*-*)\n \t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\n \t\t       shaintrin.h clflushoptintrin.h xsavecintrin.h\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n-\t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\"\n+\t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n+\t\t       avx512ifmaintrin.h avx512ifmavlintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "45b08297e469994cf9eea827cea024525eb26f18", "filename": "gcc/config/i386/avx512ifmaintrin.h", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Favx512ifmaintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Favx512ifmaintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512ifmaintrin.h?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -0,0 +1,104 @@\n+/* Copyright (C) 2013-2014 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512ifmaintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512IFMAINTRIN_H_INCLUDED\n+#define _AVX512IFMAINTRIN_H_INCLUDED\n+\n+#ifndef __AVX512IFMA__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512ifma\")\n+#define __DISABLE_AVX512IFMA__\n+#endif /* __AVX512IFMA__ */\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_madd52lo_epu64 (__m512i __X, __m512i __Y, __m512i __Z)\n+{\n+  return (__m512i) __builtin_ia32_vpmadd52luq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t       (__v8di) __Y,\n+\t\t\t\t\t\t       (__v8di) __Z,\n+\t\t\t\t\t\t       (__mmask8) - 1);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_madd52hi_epu64 (__m512i __X, __m512i __Y, __m512i __Z)\n+{\n+  return (__m512i) __builtin_ia32_vpmadd52huq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t       (__v8di) __Y,\n+\t\t\t\t\t\t       (__v8di) __Z,\n+\t\t\t\t\t\t       (__mmask8) - 1);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_madd52lo_epu64 (__m512i __W, __mmask8 __M, __m512i __X,\n+\t\t\t    __m512i __Y)\n+{\n+  return (__m512i) __builtin_ia32_vpmadd52luq512_mask ((__v8di) __W,\n+\t\t\t\t\t\t       (__v8di) __X,\n+\t\t\t\t\t\t       (__v8di) __Y,\n+\t\t\t\t\t\t       (__mmask8) __M);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_madd52hi_epu64 (__m512i __W, __mmask8 __M, __m512i __X,\n+\t\t\t    __m512i __Y)\n+{\n+  return (__m512i) __builtin_ia32_vpmadd52huq512_mask ((__v8di) __W,\n+\t\t\t\t\t\t       (__v8di) __X,\n+\t\t\t\t\t\t       (__v8di) __Y,\n+\t\t\t\t\t\t       (__mmask8) __M);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_madd52lo_epu64 (__mmask8 __M, __m512i __X, __m512i __Y, __m512i __Z)\n+{\n+  return (__m512i) __builtin_ia32_vpmadd52luq512_maskz ((__v8di) __X,\n+\t\t\t\t\t\t\t(__v8di) __Y,\n+\t\t\t\t\t\t\t(__v8di) __Z,\n+\t\t\t\t\t\t\t(__mmask8) __M);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_madd52hi_epu64 (__mmask8 __M, __m512i __X, __m512i __Y, __m512i __Z)\n+{\n+  return (__m512i) __builtin_ia32_vpmadd52huq512_maskz ((__v8di) __X,\n+\t\t\t\t\t\t\t(__v8di) __Y,\n+\t\t\t\t\t\t\t(__v8di) __Z,\n+\t\t\t\t\t\t\t(__mmask8) __M);\n+}\n+\n+#ifdef __DISABLE_AVX512IFMA__\n+#undef __DISABLE_AVX512IFMA__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512IFMA__ */\n+\n+#endif /* _AVX512IFMAINTRIN_H_INCLUDED */"}, {"sha": "7c858ba0fffcd21c5d16211cf44a917132f1cbf4", "filename": "gcc/config/i386/avx512ifmavlintrin.h", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Favx512ifmavlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Favx512ifmavlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512ifmavlintrin.h?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -0,0 +1,164 @@\n+/* Copyright (C) 2013-2014 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512ifmavlintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512IFMAVLINTRIN_H_INCLUDED\n+#define _AVX512IFMAVLINTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VL__) || !defined(__AVX512IFMA__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512ifma,avx512vl\")\n+#define __DISABLE_AVX512IFMAVL__\n+#endif /* __AVX512IFMAVL__ */\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_madd52lo_epu64 (__m128i __X, __m128i __Y, __m128i __Z)\n+{\n+  return (__m128i) __builtin_ia32_vpmadd52luq128_mask ((__v2di) __X,\n+\t\t\t\t\t\t       (__v2di) __Y,\n+\t\t\t\t\t\t       (__v2di) __Z,\n+\t\t\t\t\t\t       (__mmask8) - 1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_madd52hi_epu64 (__m128i __X, __m128i __Y, __m128i __Z)\n+{\n+  return (__m128i) __builtin_ia32_vpmadd52huq128_mask ((__v2di) __X,\n+\t\t\t\t\t\t       (__v2di) __Y,\n+\t\t\t\t\t\t       (__v2di) __Z,\n+\t\t\t\t\t\t       (__mmask8) - 1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_madd52lo_epu64 (__m256i __X, __m256i __Y, __m256i __Z)\n+{\n+  return (__m256i) __builtin_ia32_vpmadd52luq256_mask ((__v4di) __X,\n+\t\t\t\t\t\t       (__v4di) __Y,\n+\t\t\t\t\t\t       (__v4di) __Z,\n+\t\t\t\t\t\t       (__mmask8) - 1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_madd52hi_epu64 (__m256i __X, __m256i __Y, __m256i __Z)\n+{\n+  return (__m256i) __builtin_ia32_vpmadd52huq256_mask ((__v4di) __X,\n+\t\t\t\t\t\t       (__v4di) __Y,\n+\t\t\t\t\t\t       (__v4di) __Z,\n+\t\t\t\t\t\t       (__mmask8) - 1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_madd52lo_epu64 (__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_vpmadd52luq128_mask ((__v2di) __W,\n+\t\t\t\t\t\t       (__v2di) __X,\n+\t\t\t\t\t\t       (__v2di) __Y,\n+\t\t\t\t\t\t       (__mmask8) __M);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_madd52hi_epu64 (__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_vpmadd52huq128_mask ((__v2di) __W,\n+\t\t\t\t\t\t       (__v2di) __X,\n+\t\t\t\t\t\t       (__v2di) __Y,\n+\t\t\t\t\t\t       (__mmask8) __M);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_madd52lo_epu64 (__m256i __W, __mmask8 __M, __m256i __X,\n+\t\t\t    __m256i __Y)\n+{\n+  return (__m256i) __builtin_ia32_vpmadd52luq256_mask ((__v4di) __W,\n+\t\t\t\t\t\t       (__v4di) __X,\n+\t\t\t\t\t\t       (__v4di) __Y,\n+\t\t\t\t\t\t       (__mmask8) __M);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_madd52hi_epu64 (__m256i __W, __mmask8 __M, __m256i __X,\n+\t\t\t    __m256i __Y)\n+{\n+  return (__m256i) __builtin_ia32_vpmadd52huq256_mask ((__v4di) __W,\n+\t\t\t\t\t\t       (__v4di) __X,\n+\t\t\t\t\t\t       (__v4di) __Y,\n+\t\t\t\t\t\t       (__mmask8) __M);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_madd52lo_epu64 (__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z)\n+{\n+  return (__m128i) __builtin_ia32_vpmadd52luq128_maskz ((__v2di) __X,\n+\t\t\t\t\t\t\t(__v2di) __Y,\n+\t\t\t\t\t\t\t(__v2di) __Z,\n+\t\t\t\t\t\t\t(__mmask8) __M);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_madd52hi_epu64 (__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z)\n+{\n+  return (__m128i) __builtin_ia32_vpmadd52huq128_maskz ((__v2di) __X,\n+\t\t\t\t\t\t\t(__v2di) __Y,\n+\t\t\t\t\t\t\t(__v2di) __Z,\n+\t\t\t\t\t\t\t(__mmask8) __M);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_madd52lo_epu64 (__mmask8 __M, __m256i __X, __m256i __Y, __m256i __Z)\n+{\n+  return (__m256i) __builtin_ia32_vpmadd52luq256_maskz ((__v4di) __X,\n+\t\t\t\t\t\t\t(__v4di) __Y,\n+\t\t\t\t\t\t\t(__v4di) __Z,\n+\t\t\t\t\t\t\t(__mmask8) __M);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_madd52hi_epu64 (__mmask8 __M, __m256i __X, __m256i __Y, __m256i __Z)\n+{\n+  return (__m256i) __builtin_ia32_vpmadd52huq256_maskz ((__v4di) __X,\n+\t\t\t\t\t\t\t(__v4di) __Y,\n+\t\t\t\t\t\t\t(__v4di) __Z,\n+\t\t\t\t\t\t\t(__mmask8) __M);\n+}\n+\n+#ifdef __DISABLE_AVX512IFMAVL__\n+#undef __DISABLE_AVX512IFMAVL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512IFMAVL__ */\n+\n+#endif /* _AVX512IFMAVLINTRIN_H_INCLUDED */"}, {"sha": "e3e1ed6ea550cc2bd3bb8e9b0bc4d406ab311e4f", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -76,6 +76,7 @@\n #define bit_AVX512DQ\t(1 << 17)\n #define bit_RDSEED\t(1 << 18)\n #define bit_ADX\t(1 << 19)\n+#define bit_AVX512IFMA\t(1 << 21)\n #define bit_CLFLUSHOPT\t(1 << 23)\n #define bit_AVX512PF\t(1 << 26)\n #define bit_AVX512ER\t(1 << 27)"}, {"sha": "cb82945f4b9de05c6909d2f8a226fc13e78b12ad", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -412,6 +412,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_avx512f = 0, has_sha = 0, has_prefetchwt1 = 0;\n   unsigned int has_clflushopt = 0, has_xsavec = 0, has_xsaves = 0;\n   unsigned int has_avx512dq = 0, has_avx512bw = 0, has_avx512vl = 0;\n+  unsigned int has_avx512ifma = 0;\n \n   bool arch;\n \n@@ -493,6 +494,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512dq = ebx & bit_AVX512DQ;\n       has_avx512bw = ebx & bit_AVX512BW;\n       has_avx512vl = ebx & bit_AVX512VL;\n+      has_avx512vl = ebx & bit_AVX512IFMA;\n \n       has_prefetchwt1 = ecx & bit_PREFETCHWT1;\n     }\n@@ -925,6 +927,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx512dq = has_avx512dq ? \" -mavx512dq\" : \" -mno-avx512dq\";\n       const char *avx512bw = has_avx512bw ? \" -mavx512bw\" : \" -mno-avx512bw\";\n       const char *avx512vl = has_avx512vl ? \" -mavx512vl\" : \" -mno-avx512vl\";\n+      const char *avx512ifma = has_avx512ifma ? \" -mavx512ifma\" : \" -mno-avx512ifma\";\n \n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n@@ -934,7 +937,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tfxsr, xsave, xsaveopt, avx512f, avx512er,\n \t\t\tavx512cd, avx512pf, prefetchwt1, clflushopt,\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n-\t\t\tNULL);\n+\t\t\tavx512ifma, NULL);\n     }\n \n done:"}, {"sha": "bf993d1857007d68a7e3ce0ed59ae01f4a38c1a4", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -351,6 +351,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVX512BW__\");\n   if (isa_flag & OPTION_MASK_ISA_AVX512VL)\n     def_or_undef (parse_in, \"__AVX512VL__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512IFMA)\n+    def_or_undef (parse_in, \"__AVX512IFMA__\");\n   if (isa_flag & OPTION_MASK_ISA_FMA)\n     def_or_undef (parse_in, \"__FMA__\");\n   if (isa_flag & OPTION_MASK_ISA_RTM)"}, {"sha": "55c57dd1adfd21b6f0832f0ba5a1a68a1ef9ee05", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -2618,6 +2618,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mavx512dq\",\tOPTION_MASK_ISA_AVX512DQ },\n     { \"-mavx512bw\",\tOPTION_MASK_ISA_AVX512BW },\n     { \"-mavx512vl\",\tOPTION_MASK_ISA_AVX512VL },\n+    { \"-mavx512ifma\",\tOPTION_MASK_ISA_AVX512IFMA },\n     { \"-msse4a\",\tOPTION_MASK_ISA_SSE4A },\n     { \"-msse4.2\",\tOPTION_MASK_ISA_SSE4_2 },\n     { \"-msse4.1\",\tOPTION_MASK_ISA_SSE4_1 },\n@@ -3153,6 +3154,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_AVX512DQ\t\t(HOST_WIDE_INT_1 << 50)\n #define PTA_AVX512BW\t\t(HOST_WIDE_INT_1 << 51)\n #define PTA_AVX512VL\t\t(HOST_WIDE_INT_1 << 52)\n+#define PTA_AVX512IFMA\t\t(HOST_WIDE_INT_1 << 53)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -3733,6 +3735,9 @@ ix86_option_override_internal (bool main_args_p,\n         if (processor_alias_table[i].flags & PTA_MPX\n             && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MPX))\n           opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MPX;\n+\tif (processor_alias_table[i].flags & PTA_AVX512IFMA\n+\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512IFMA))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512IFMA;\n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n \n@@ -4655,6 +4660,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"clflushopt\",\tOPT_mclflushopt),\n     IX86_ATTR_ISA (\"xsavec\",\tOPT_mxsavec),\n     IX86_ATTR_ISA (\"xsaves\",\tOPT_mxsaves),\n+    IX86_ATTR_ISA (\"avx512ifma\",\tOPT_mavx512ifma),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -30076,6 +30082,20 @@ enum ix86_builtins\n   IX86_BUILTIN_RSQRT28SD,\n   IX86_BUILTIN_RSQRT28SS,\n \n+  /* AVX-512IFMA */\n+  IX86_BUILTIN_VPMADD52LUQ512,\n+  IX86_BUILTIN_VPMADD52HUQ512,\n+  IX86_BUILTIN_VPMADD52LUQ256,\n+  IX86_BUILTIN_VPMADD52HUQ256,\n+  IX86_BUILTIN_VPMADD52LUQ128,\n+  IX86_BUILTIN_VPMADD52HUQ128,\n+  IX86_BUILTIN_VPMADD52LUQ512_MASKZ,\n+  IX86_BUILTIN_VPMADD52HUQ512_MASKZ,\n+  IX86_BUILTIN_VPMADD52LUQ256_MASKZ,\n+  IX86_BUILTIN_VPMADD52HUQ256_MASKZ,\n+  IX86_BUILTIN_VPMADD52LUQ128_MASKZ,\n+  IX86_BUILTIN_VPMADD52HUQ128_MASKZ,\n+\n   /* SHA builtins.  */\n   IX86_BUILTIN_SHA1MSG1,\n   IX86_BUILTIN_SHA1MSG2,\n@@ -32746,6 +32766,21 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX512BW, CODE_FOR_avx512bw_cmpv32hi3_mask, \"__builtin_ia32_cmpw512_mask\", IX86_BUILTIN_CMPW512, UNKNOWN, (int) SI_FTYPE_V32HI_V32HI_INT_SI },\n   { OPTION_MASK_ISA_AVX512BW, CODE_FOR_avx512bw_ucmpv64qi3_mask, \"__builtin_ia32_ucmpb512_mask\", IX86_BUILTIN_UCMPB512, UNKNOWN, (int) DI_FTYPE_V64QI_V64QI_INT_DI },\n   { OPTION_MASK_ISA_AVX512BW, CODE_FOR_avx512bw_ucmpv32hi3_mask, \"__builtin_ia32_ucmpw512_mask\", IX86_BUILTIN_UCMPW512, UNKNOWN, (int) SI_FTYPE_V32HI_V32HI_INT_SI },\n+\n+  /* AVX512IFMA */\n+  { OPTION_MASK_ISA_AVX512IFMA, CODE_FOR_vpamdd52luqv8di_mask, \"__builtin_ia32_vpmadd52luq512_mask\", IX86_BUILTIN_VPMADD52LUQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA, CODE_FOR_vpamdd52luqv8di_maskz, \"__builtin_ia32_vpmadd52luq512_maskz\", IX86_BUILTIN_VPMADD52LUQ512_MASKZ, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA, CODE_FOR_vpamdd52huqv8di_mask, \"__builtin_ia32_vpmadd52huq512_mask\", IX86_BUILTIN_VPMADD52HUQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA, CODE_FOR_vpamdd52huqv8di_maskz, \"__builtin_ia32_vpmadd52huq512_maskz\", IX86_BUILTIN_VPMADD52HUQ512_MASKZ, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpamdd52luqv4di_mask, \"__builtin_ia32_vpmadd52luq256_mask\", IX86_BUILTIN_VPMADD52LUQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpamdd52luqv4di_maskz, \"__builtin_ia32_vpmadd52luq256_maskz\", IX86_BUILTIN_VPMADD52LUQ256_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpamdd52huqv4di_mask, \"__builtin_ia32_vpmadd52huq256_mask\", IX86_BUILTIN_VPMADD52HUQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpamdd52huqv4di_maskz, \"__builtin_ia32_vpmadd52huq256_maskz\", IX86_BUILTIN_VPMADD52HUQ256_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpamdd52luqv2di_mask, \"__builtin_ia32_vpmadd52luq128_mask\", IX86_BUILTIN_VPMADD52LUQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpamdd52luqv2di_maskz, \"__builtin_ia32_vpmadd52luq128_maskz\", IX86_BUILTIN_VPMADD52LUQ128_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpamdd52huqv2di_mask, \"__builtin_ia32_vpmadd52huq128_mask\", IX86_BUILTIN_VPMADD52HUQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_QI },\n+  { OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpamdd52huqv2di_maskz, \"__builtin_ia32_vpmadd52huq128_maskz\", IX86_BUILTIN_VPMADD52HUQ128_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_QI },\n+\n };\n \n /* Builtins with rounding support.  */"}, {"sha": "481d68c609e815f18763f038a2ebaa905c2441ba", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -77,6 +77,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AVX512BW_P(x)\tTARGET_ISA_AVX512BW_P(x)\n #define TARGET_AVX512VL\tTARGET_ISA_AVX512VL\n #define TARGET_AVX512VL_P(x)\tTARGET_ISA_AVX512VL_P(x)\n+#define TARGET_AVX512IFMA\tTARGET_ISA_AVX512IFMA\n+#define TARGET_AVX512IFMA_P(x)\tTARGET_ISA_AVX512IFMA_P(x)\n #define TARGET_FMA\tTARGET_ISA_FMA\n #define TARGET_FMA_P(x)\tTARGET_ISA_FMA_P(x)\n #define TARGET_SSE4A\tTARGET_ISA_SSE4A"}, {"sha": "012ff8dafc2eadf0b78d38f59c1daeca99dc696f", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -653,6 +653,10 @@ mavx512vl\n Target Report Mask(ISA_AVX512VL) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512VL built-in functions and code generation\n \n+mavx512ifma\n+Target Report Mask(ISA_AVX512IFMA) Var(ix86_isa_flags) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512IFMA built-in functions and code generation\n+\n mfma\n Target Report Mask(ISA_FMA) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation"}, {"sha": "5f11432f07b0c44f72f28df87c853ed511b763a2", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -60,6 +60,10 @@\n \n #include <avx512vldqintrin.h>\n \n+#include <avx512ifmaintrin.h>\n+\n+#include <avx512ifmavlintrin.h>\n+\n #include <shaintrin.h>\n \n #include <lzcntintrin.h>"}, {"sha": "61cc904f37250011d9092ea9ae7b5cdc811798fc", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -141,6 +141,10 @@\n   UNSPEC_REDUCE\n   UNSPEC_FPCLASS\n   UNSPEC_RANGE\n+\n+  ;; For AVX512IFMA support\n+  UNSPEC_VPMADD52LUQ\n+  UNSPEC_VPMADD52HUQ\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -18450,3 +18454,68 @@\n   emit_move_insn (op0, op1);\n   DONE;\n })\n+\n+(define_int_iterator VPMADD52\n+\t[UNSPEC_VPMADD52LUQ\n+\t UNSPEC_VPMADD52HUQ])\n+\n+(define_int_attr vpmadd52type\n+  [(UNSPEC_VPMADD52LUQ \"luq\") (UNSPEC_VPMADD52HUQ \"huq\")])\n+\n+(define_expand \"vpamdd52huq<mode>_maskz\"\n+  [(match_operand:VI8_AVX512VL 0 \"register_operand\")\n+   (match_operand:VI8_AVX512VL 1 \"register_operand\")\n+   (match_operand:VI8_AVX512VL 2 \"register_operand\")\n+   (match_operand:VI8_AVX512VL 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512IFMA\"\n+{\n+  emit_insn (gen_vpamdd52huq<mode>_maskz_1 (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_expand \"vpamdd52luq<mode>_maskz\"\n+  [(match_operand:VI8_AVX512VL 0 \"register_operand\")\n+   (match_operand:VI8_AVX512VL 1 \"register_operand\")\n+   (match_operand:VI8_AVX512VL 2 \"register_operand\")\n+   (match_operand:VI8_AVX512VL 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512IFMA\"\n+{\n+  emit_insn (gen_vpamdd52luq<mode>_maskz_1 (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"vpamdd52<vpmadd52type><mode><sd_maskz_name>\"\n+  [(set (match_operand:VI8_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI8_AVX512VL\n+\t  [(match_operand:VI8_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI8_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI8_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+\t  VPMADD52))]\n+  \"TARGET_AVX512IFMA\"\n+  \"vpmadd52<vpmadd52type>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vpamdd52<vpmadd52type><mode>_mask\"\n+  [(set (match_operand:VI8_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI8_AVX512VL\n+\t  (unspec:VI8_AVX512VL\n+\t    [(match_operand:VI8_AVX512VL 1 \"register_operand\" \"0\")\n+\t     (match_operand:VI8_AVX512VL 2 \"register_operand\" \"v\")\n+\t     (match_operand:VI8_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+\t    VPMADD52)\n+\t  (match_dup 1)\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512IFMA\"\n+  \"vpmadd52<vpmadd52type>\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+"}, {"sha": "4d4560be5e19a0a1fcb9e9651c9500b0b9e64f26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -1,3 +1,22 @@\n+2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mavx512ifma.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/avx512f-helper.h: Add avx512ifma-check.h.\n+\t* gcc.target/i386/avx512ifma-check.h: New.\n+\t* gcc.target/i386/avx512ifma-vpmaddhuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512ifma-vpmaddhuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512ifma-vpmaddluq-1.c: Ditto.\n+\t* gcc.target/i386/avx512ifma-vpmaddluq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaddhuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaddluq-2.c: Ditto.\n+\t* gcc.target/i386/i386.exp (check_effective_target_avx512ifma): New.\n+\t* gcc.target/i386/sse-12.c: Add new options.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\n 2014-11-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \tForward-port from 2014-10-30 4_9-branch r216934"}, {"sha": "a69a5e331d0f0fab240b61be4cd70dd85377dc9f", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "d3a5bbd29ca328adef3264c16b183729121f531b", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "d17742917551363feee9eb1ac6da99549b9db8fa", "filename": "gcc/testsuite/gcc.target/i386/avx512f-helper.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -20,6 +20,8 @@\n #include \"avx512bw-check.h\"\n #elif defined (AVX512VL)\n #include \"avx512vl-check.h\"\n+#elif defined (AVX512IFMA)\n+#include \"avx512ifma-check.h\"\n #endif\n \n /* Macros expansion.  */\n@@ -125,6 +127,9 @@ avx512bw_test (void) { test_512 (); }\n #elif defined (AVX512VL)\n void\n avx512vl_test (void) { test_256 (); test_128 (); }\n+#elif defined (AVX512IFMA)\n+void\n+avx512ifma_test (void) { test_512 (); }\n #endif\n \n #endif /* AVX512F_HELPER_INCLUDED */"}, {"sha": "9c17a549ce77f3e3f69604fba51cc5b536106612", "filename": "gcc/testsuite/gcc.target/i386/avx512ifma-check.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-check.h?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -0,0 +1,46 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+#include \"m512-check.h\"\n+#include \"avx512f-os-support.h\"\n+\n+static void avx512ifma_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  avx512ifma_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))\n+    {\n+      if (__get_cpuid_max (0, NULL) < 7)\n+\treturn 0;\n+\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+      if ((avx512f_os_support ()) && ((ebx & bit_AVX512IFMA) == bit_AVX512IFMA))\n+\t{\n+\t  do_test ();\n+#ifdef DEBUG\n+\t  printf (\"PASSED\\n\");\n+#endif\n+\t  return 0;\n+\t}\n+#ifdef DEBUG\n+      printf (\"SKIPPED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "5bc3311643a8ae45cb27fc962625e291060d9cac", "filename": "gcc/testsuite/gcc.target/i386/avx512ifma-vpmaddhuq-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-1.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512ifma -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i _x1, _y1, _z1;\n+volatile __m256i _x2, _y2, _z2;\n+volatile __m128i _x3, _y3, _z3;\n+\n+void extern\n+avx512ifma_test (void)\n+{\n+  _x3 = _mm_madd52hi_epu64 (_x3, _y3, _z3);\n+  _x3 = _mm_mask_madd52hi_epu64 (_x3, 2, _y3, _z3);\n+  _x3 = _mm_maskz_madd52hi_epu64 (2, _x3, _y3, _z3);\n+  _x2 = _mm256_madd52hi_epu64 (_x2, _y2, _z2);\n+  _x2 = _mm256_mask_madd52hi_epu64 (_x2, 3, _y2, _z2);\n+  _x2 = _mm256_maskz_madd52hi_epu64 (3, _x2, _y2, _z2);\n+  _x1 = _mm512_madd52hi_epu64 (_x1, _y1, _z1);\n+  _x1 = _mm512_mask_madd52hi_epu64 (_x1, 3, _y1, _z1);\n+  _x1 = _mm512_maskz_madd52hi_epu64 (3, _x1, _y1, _z1);\n+}"}, {"sha": "edb28cb74fca207d4666dc5b60df18b123e8cc77", "filename": "gcc/testsuite/gcc.target/i386/avx512ifma-vpmaddhuq-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-2.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512ifma -DAVX512IFMA\" } */\n+/* { dg-require-effective-target avx512ifma } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (long long *r, long long *s1, long long *s2, long long *s3)\n+{\n+  int i;\n+  long long a, b;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      /* Simulate higher 52 bits out of 104 bit,\n+\t by shifting opernads with 0 in lower 26 bits.  */\n+      a = s2[i] >> 26;\n+      b = s3[i] >> 26;\n+      r[i] = a * b + s1[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2, dst1, dst2, dst3;\n+  long long dst_ref[SIZE];\n+  int i;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 15 + 3467 * i;\n+      src2.a[i] = 9217 + i;\n+      src1.a[i] = src1.a[i] << 26;\n+      src1.a[i] = src1.a[i] << 26;\n+      src1.a[i] &= ((1LL << 52) - 1);\n+      src2.a[i] &= ((1LL << 52) - 1);\n+      dst1.a[i] = DEFAULT_VALUE;\n+      dst2.a[i] = DEFAULT_VALUE;\n+      dst3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (dst_ref, dst1.a, src1.a, src2.a);\n+  dst1.x = INTRINSIC (_madd52hi_epu64) (dst1.x, src1.x, src2.x);\n+  dst2.x = INTRINSIC (_mask_madd52hi_epu64) (dst2.x, mask, src1.x, src2.x);\n+  dst3.x = INTRINSIC (_maskz_madd52hi_epu64) (mask, dst3.x, src1.x, src2.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (dst1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (dst2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (dst3, dst_ref))\n+    abort ();\n+}"}, {"sha": "5a17cf1b4fb259a82ff714cfb1085d98d50dfb1b", "filename": "gcc/testsuite/gcc.target/i386/avx512ifma-vpmaddluq-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-1.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512ifma -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i _x1, _y1, _z1;\n+volatile __m256i _x2, _y2, _z2;\n+volatile __m128i _x3, _y3, _z3;\n+\n+void extern\n+avx512ifma_test (void)\n+{\n+  _x3 = _mm_madd52lo_epu64 (_x3, _y3, _z3);\n+  _x3 = _mm_mask_madd52lo_epu64 (_x3, 2, _y3, _z3);\n+  _x3 = _mm_maskz_madd52lo_epu64 (2, _x3, _y3, _z3);\n+  _x2 = _mm256_madd52lo_epu64 (_x2, _y2, _z2);\n+  _x2 = _mm256_mask_madd52lo_epu64 (_x2, 3, _y2, _z2);\n+  _x2 = _mm256_maskz_madd52lo_epu64 (3, _x2, _y2, _z2);\n+  _x1 = _mm512_madd52lo_epu64 (_x1, _y1, _z1);\n+  _x1 = _mm512_mask_madd52lo_epu64 (_x1, 3, _y1, _z1);\n+  _x1 = _mm512_maskz_madd52lo_epu64 (3, _x1, _y1, _z1);\n+}"}, {"sha": "6937d1334f1cbb35c72532c27778d64f47780bb4", "filename": "gcc/testsuite/gcc.target/i386/avx512ifma-vpmaddluq-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-2.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512ifma -DAVX512IFMA\" } */\n+/* { dg-require-effective-target avx512ifma } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned long long *r, unsigned long long *s1,\n+      unsigned long long *s2, unsigned long long *s3)\n+{\n+  int i;\n+\n+  /* Valid, because values are less than 1 << 26.  */\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = s2[i] * s3[i] + s1[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2, dst1, dst2, dst3;\n+  unsigned long long dst_ref[SIZE];\n+  int i;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i + 50;\n+      src2.a[i] = i + 100;\n+      dst1.a[i] = DEFAULT_VALUE;\n+      dst2.a[i] = DEFAULT_VALUE;\n+      dst3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (dst_ref, dst1.a, src1.a, src2.a);\n+  dst1.x = INTRINSIC (_madd52lo_epu64) (dst1.x, src1.x, src2.x);\n+  dst2.x = INTRINSIC (_mask_madd52lo_epu64) (dst2.x, mask, src1.x, src2.x);\n+  dst3.x = INTRINSIC (_maskz_madd52lo_epu64) (mask, dst3.x, src1.x, src2.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (dst1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (dst2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (dst3, dst_ref))\n+    abort ();\n+}"}, {"sha": "92d1bf7d1e0f7cc00c885013a78c800e383eb312", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpmaddhuq-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpmaddhuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpmaddhuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpmaddhuq-2.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512ifma -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512ifma-vpmaddhuq-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512ifma-vpmaddhuq-2.c\""}, {"sha": "6698ad2fb962aed06d96d597e31ed31661642a7b", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpmaddluq-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpmaddluq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpmaddluq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpmaddluq-2.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512ifma -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512ifma-vpmaddluq-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512ifma-vpmaddluq-2.c\""}, {"sha": "060eed30c6b59f91bcfc90428960552c786aa828", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -350,6 +350,21 @@ proc check_effective_target_avx512bw { } {\n     } \"-mavx512bw\" ]\n }\n \n+# Return 1 if avx512ifma instructions can be compiled.\n+proc check_effective_target_avx512ifma { } {\n+    return [check_no_compiler_messages avx512ifma object {\n+\ttypedef long long __v8di __attribute__ ((__vector_size__ (64)));\n+\t__v8di\n+\t_mm512_madd52lo_epu64 (__v8di __X, __v8di __Y, __v8di __Z)\n+\t{\n+\t  return (__v8di) __builtin_ia32_vpmadd52luq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t\t       (__v8di) __Y,\n+\t\t\t\t\t\t               (__v8di) __Z,\n+\t\t\t\t\t\t               -1);\n+\t}\n+    } \"-mavx512ifma\" ]\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}, {"sha": "1d8fa82b20b0669f28a5004dfdf1e67a2fe1bf35", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512ifma\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "878c47577f7c4e58583516505a3fc091af059c88", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512ifma\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "4d3acb49304ca8eb05d18f8f129d6bae072c4a3d", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "7861cf54f9eb6a655d97fa87feffd0f398b08aa2", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -100,7 +100,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512ifma\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -215,7 +215,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "85d403e9f71363ee80cd0c1ed14896a641c9eaeb", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4190ea38047f64e87940fc747d108a6bfdaa809f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=4190ea38047f64e87940fc747d108a6bfdaa809f", "patch": "@@ -594,7 +594,7 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512ifma\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}