{"sha": "17838af989014f5e90e3a7ab4e519d495c03e726", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc4MzhhZjk4OTAxNGY1ZTkwZTNhN2FiNGU1MTlkNDk1YzAzZTcyNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-04-05T02:50:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-04-05T02:50:18Z"}, "message": "PR c++/86986 - ICE with TTP with parameter pack.\n\nThree separate issues were breaking this testcase.  One, we were trying to\nlook at the type of a template template parameter to see if it's a valid\nnon-type template parameter.  Two, we were treating a parameter pack named\nin the type of a template parameter pack of a TTP pack as being one of the\npacks expanded by the outer pack.  Three, we weren't supplying all the\nnecessary levels of template arguments when TTP matching.\n\n\t* pt.c (coerce_template_parameter_pack): Only look at the type of a\n\tnon-type parameter pack.\n\t(fixed_parameter_pack_p_1): Don't recurse into the type of a\n\tnon-type parameter pack.\n\t(coerce_template_template_parms): Call add_outermost_template_args.\n\nFrom-SVN: r270159", "tree": {"sha": "8def1b616fe168adc3282df46025aa35527f612e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8def1b616fe168adc3282df46025aa35527f612e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17838af989014f5e90e3a7ab4e519d495c03e726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17838af989014f5e90e3a7ab4e519d495c03e726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17838af989014f5e90e3a7ab4e519d495c03e726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17838af989014f5e90e3a7ab4e519d495c03e726/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70604b02254efb0cb9fc3750135227ae9ebd6ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70604b02254efb0cb9fc3750135227ae9ebd6ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70604b02254efb0cb9fc3750135227ae9ebd6ec9"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "55a083fab6ff1b10ffc3e41c3dae1b12fd74e577", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17838af989014f5e90e3a7ab4e519d495c03e726/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17838af989014f5e90e3a7ab4e519d495c03e726/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=17838af989014f5e90e3a7ab4e519d495c03e726", "patch": "@@ -1,3 +1,12 @@\n+2019-04-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86986 - ICE with TTP with parameter pack.\n+\t* pt.c (coerce_template_parameter_pack): Only look at the type of a\n+\tnon-type parameter pack.\n+\t(fixed_parameter_pack_p_1): Don't recurse into the type of a\n+\tnon-type parameter pack.\n+\t(coerce_template_template_parms): Call add_outermost_template_args.\n+\n 2019-04-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/89974"}, {"sha": "20647be587ac0f706728d76ce2d8c34257bf26ae", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17838af989014f5e90e3a7ab4e519d495c03e726/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17838af989014f5e90e3a7ab4e519d495c03e726/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=17838af989014f5e90e3a7ab4e519d495c03e726", "patch": "@@ -5116,7 +5116,13 @@ fixed_parameter_pack_p_1 (tree parm, struct find_parameter_pack_data *ppd)\n \n   tree vec = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (parm));\n   for (int i = 0; i < TREE_VEC_LENGTH (vec); ++i)\n-    fixed_parameter_pack_p_1 (TREE_VALUE (TREE_VEC_ELT (vec, i)), ppd);\n+    {\n+      tree p = TREE_VALUE (TREE_VEC_ELT (vec, i));\n+      if (template_parameter_pack_p (p))\n+\t/* Any packs in the type are expanded by this parameter.  */;\n+      else\n+\tfixed_parameter_pack_p_1 (p, ppd);\n+    }\n }\n \n /* PARM is a template parameter pack.  Return any parameter packs used in\n@@ -7554,6 +7560,7 @@ coerce_template_template_parms (tree parm_parms,\n \t args and the converted args.  If that succeeds, A is at least as\n \t specialized as P, so they match.*/\n       tree pargs = template_parms_level_to_args (parm_parms);\n+      pargs = add_outermost_template_args (outer_args, pargs);\n       ++processing_template_decl;\n       pargs = coerce_template_parms (arg_parms, pargs, NULL_TREE, tf_none,\n \t\t\t\t     /*require_all*/true, /*use_default*/true);\n@@ -8184,8 +8191,9 @@ coerce_template_parameter_pack (tree parms,\n           int j, len = TREE_VEC_LENGTH (packed_parms);\n           for (j = 0; j < len; ++j)\n             {\n-              tree t = TREE_TYPE (TREE_VEC_ELT (packed_parms, j));\n-              if (invalid_nontype_parm_type_p (t, complain))\n+              tree t = TREE_VEC_ELT (packed_parms, j);\n+              if (TREE_CODE (t) == PARM_DECL\n+\t\t  && invalid_nontype_parm_type_p (TREE_TYPE (t), complain))\n                 return error_mark_node;\n             }\n \t  /* We don't know how many args we have yet, just"}, {"sha": "63e3f2684aae8494a2c3996ef5834090d4e4a314", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ttp9.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17838af989014f5e90e3a7ab4e519d495c03e726/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17838af989014f5e90e3a7ab4e519d495c03e726/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp9.C?ref=17838af989014f5e90e3a7ab4e519d495c03e726", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/86986\n+// { dg-do compile { target c++11 } }\n+\n+template<class... T>\n+struct X {\n+    template<template<T...> class...>\n+    struct Y { };\n+};\n+\n+using type = X<int>::Y<>;"}]}