{"sha": "a2c314c72b070a170ade9858c6a0ece2105c4508", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjMzE0YzcyYjA3MGExNzBhZGU5ODU4YzZhMGVjZTIxMDVjNDUwOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T13:26:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T13:26:11Z"}, "message": "[multiple changes]\n\n2015-10-26  Bob Duff  <duff@adacore.com>\n\n\t* snames.ads-tmpl, aspects.adb, aspects.ads: Add the aspect and\n\tpragma names and enter into relevant tables.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Analyze aspect\n\tPredicate_Failure.\n\t* sem_prag.adb (Predicate_Failure): Analyze pragma Predicate_Failure.\n\t* exp_util.adb (Make_Predicate_Check): When building the Check\n\tpragma, if Predicate_Failure has been specified, add the relevant\n\tString argument to the pragma.\n\t* par-prag.adb (Prag): Add Predicate_Failure to list of pragmas\n\thandled during semantic analysis.\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Assignment): If the left-hand side\n\tis an indexed component with generalized indexing, discard\n\tinterpretation that yields a reference type, which is not\n\tassignable. This prevent spurious ambiguities when the right-hand\n\tside is an aggregate which does not provide a target type.\n\nFrom-SVN: r229358", "tree": {"sha": "009f50ecfd2e3c00060714be3a86ffa02c6b0482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/009f50ecfd2e3c00060714be3a86ffa02c6b0482"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2c314c72b070a170ade9858c6a0ece2105c4508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c314c72b070a170ade9858c6a0ece2105c4508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c314c72b070a170ade9858c6a0ece2105c4508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c314c72b070a170ade9858c6a0ece2105c4508/comments", "author": null, "committer": null, "parents": [{"sha": "75b87c163fccf0fb5ae07c0d34678949c90414f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b87c163fccf0fb5ae07c0d34678949c90414f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b87c163fccf0fb5ae07c0d34678949c90414f6"}], "stats": {"total": 168, "additions": 153, "deletions": 15}, "files": [{"sha": "c4097993ea5940f9c6349f57677c5d7ebd04a574", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a2c314c72b070a170ade9858c6a0ece2105c4508", "patch": "@@ -1,3 +1,24 @@\n+2015-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* snames.ads-tmpl, aspects.adb, aspects.ads: Add the aspect and\n+\tpragma names and enter into relevant tables.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Analyze aspect\n+\tPredicate_Failure.\n+\t* sem_prag.adb (Predicate_Failure): Analyze pragma Predicate_Failure.\n+\t* exp_util.adb (Make_Predicate_Check): When building the Check\n+\tpragma, if Predicate_Failure has been specified, add the relevant\n+\tString argument to the pragma.\n+\t* par-prag.adb (Prag): Add Predicate_Failure to list of pragmas\n+\thandled during semantic analysis.\n+\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): If the left-hand side\n+\tis an indexed component with generalized indexing, discard\n+\tinterpretation that yields a reference type, which is not\n+\tassignable. This prevent spurious ambiguities when the right-hand\n+\tside is an aggregate which does not provide a target type.\n+\n 2015-10-26  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch7.adb, exp_ch6.adb: Minor comment fix."}, {"sha": "4398f9228051e03d0dddd9e87228d66c8835eff0", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=a2c314c72b070a170ade9858c6a0ece2105c4508", "patch": "@@ -582,6 +582,7 @@ package body Aspects is\n     Aspect_Pre                          => Aspect_Pre,\n     Aspect_Precondition                 => Aspect_Pre,\n     Aspect_Predicate                    => Aspect_Predicate,\n+    Aspect_Predicate_Failure            => Aspect_Predicate_Failure,\n     Aspect_Preelaborate                 => Aspect_Preelaborate,\n     Aspect_Preelaborable_Initialization => Aspect_Preelaborable_Initialization,\n     Aspect_Priority                     => Aspect_Priority,"}, {"sha": "5e042ada03edcffbefbfddb34c8704980f5ff0ad", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=a2c314c72b070a170ade9858c6a0ece2105c4508", "patch": "@@ -125,6 +125,7 @@ package Aspects is\n       Aspect_Pre,\n       Aspect_Precondition,\n       Aspect_Predicate,                     -- GNAT\n+      Aspect_Predicate_Failure,\n       Aspect_Priority,\n       Aspect_Read,\n       Aspect_Refined_Depends,               -- GNAT\n@@ -361,6 +362,7 @@ package Aspects is\n       Aspect_Pre                        => Expression,\n       Aspect_Precondition               => Expression,\n       Aspect_Predicate                  => Expression,\n+      Aspect_Predicate_Failure          => Expression,\n       Aspect_Priority                   => Expression,\n       Aspect_Read                       => Name,\n       Aspect_Refined_Depends            => Expression,\n@@ -472,6 +474,7 @@ package Aspects is\n       Aspect_Pre                          => Name_Pre,\n       Aspect_Precondition                 => Name_Precondition,\n       Aspect_Predicate                    => Name_Predicate,\n+      Aspect_Predicate_Failure            => Name_Predicate_Failure,\n       Aspect_Preelaborable_Initialization => Name_Preelaborable_Initialization,\n       Aspect_Preelaborate                 => Name_Preelaborate,\n       Aspect_Priority                     => Name_Priority,\n@@ -587,7 +590,7 @@ package Aspects is\n    --  constructs. To handle forward references in such aspects, the compiler\n    --  delays the analysis of their respective pragmas by collecting them in\n    --  N_Contract nodes. The pragmas are then analyzed at the end of the\n-   --  declarative region which contains the related construct. For details,\n+   --  declarative region containing the related construct. For details,\n    --  see routines Analyze_xxx_In_Decl_Part.\n \n    --  The following shows which aspects are delayed. There are three cases:\n@@ -676,6 +679,7 @@ package Aspects is\n       Aspect_Pre                          => Always_Delay,\n       Aspect_Precondition                 => Always_Delay,\n       Aspect_Predicate                    => Always_Delay,\n+      Aspect_Predicate_Failure            => Always_Delay,\n       Aspect_Preelaborable_Initialization => Always_Delay,\n       Aspect_Preelaborate                 => Always_Delay,\n       Aspect_Priority                     => Always_Delay,"}, {"sha": "d546fa8d77356a1969540d95616f9c895927f835", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a2c314c72b070a170ade9858c6a0ece2105c4508", "patch": "@@ -6507,8 +6507,9 @@ package body Exp_Util is\n      (Typ  : Entity_Id;\n       Expr : Node_Id) return Node_Id\n    is\n-      Loc : constant Source_Ptr := Sloc (Expr);\n-      Nam : Name_Id;\n+      Loc      : constant Source_Ptr := Sloc (Expr);\n+      Nam      : Name_Id;\n+      Arg_List : List_Id;\n \n    begin\n       --  If predicate checks are suppressed, then return a null statement.\n@@ -6537,14 +6538,24 @@ package body Exp_Util is\n          Nam := Name_Predicate;\n       end if;\n \n+      Arg_List := New_List (\n+        Make_Pragma_Argument_Association (Loc,\n+          Expression => Make_Identifier (Loc, Nam)),\n+        Make_Pragma_Argument_Association (Loc,\n+          Expression => Make_Predicate_Call (Typ, Expr)));\n+\n+      if Has_Aspect (Typ, Aspect_Predicate_Failure) then\n+         Append_To (Arg_List,\n+           Make_Pragma_Argument_Association (Loc,\n+             Expression =>\n+               New_Copy_Tree (Expression\n+                 (Find_Aspect (Typ, Aspect_Predicate_Failure)))));\n+      end if;\n+\n       return\n         Make_Pragma (Loc,\n           Pragma_Identifier            => Make_Identifier (Loc, Name_Check),\n-          Pragma_Argument_Associations => New_List (\n-            Make_Pragma_Argument_Association (Loc,\n-              Expression => Make_Identifier (Loc, Nam)),\n-            Make_Pragma_Argument_Association (Loc,\n-              Expression => Make_Predicate_Call (Typ, Expr))));\n+          Pragma_Argument_Associations => Arg_List);\n    end Make_Predicate_Check;\n \n    ----------------------------\n@@ -9427,7 +9438,8 @@ package body Exp_Util is\n \n       return Present (S)\n         and then Get_TSS_Name (S) /= TSS_Null\n-        and then not Is_Predicate_Function (S);\n+        and then not Is_Predicate_Function (S)\n+        and then not Is_Predicate_Function_M (S);\n    end Within_Internal_Subprogram;\n \n    ----------------------------"}, {"sha": "c317949d7c290ce110e9b1d6bc93fd426e4d6c87", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=a2c314c72b070a170ade9858c6a0ece2105c4508", "patch": "@@ -1421,6 +1421,7 @@ begin\n            Pragma_Pre                            |\n            Pragma_Precondition                   |\n            Pragma_Predicate                      |\n+           Pragma_Predicate_Failure              |\n            Pragma_Preelaborate                   |\n            Pragma_Pre_Class                      |\n            Pragma_Priority                       |"}, {"sha": "36eb7ad54906200e3ae7865e6271a4595ba20852", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a2c314c72b070a170ade9858c6a0ece2105c4508", "patch": "@@ -1642,7 +1642,7 @@ package body Sem_Ch13 is\n                end if;\n \n                Set_Corresponding_Aspect (Aitem, Aspect);\n-               Set_From_Aspect_Specification (Aitem, True);\n+               Set_From_Aspect_Specification (Aitem);\n             end Make_Aitem_Pragma;\n \n          --  Start of processing for Analyze_One_Aspect\n@@ -1979,7 +1979,7 @@ package body Sem_Ch13 is\n                          Expression => Ent),\n                        Make_Pragma_Argument_Association (Sloc (Expr),\n                          Expression => Relocate_Node (Expr))),\n-                     Pragma_Name                  => Name_Predicate);\n+                     Pragma_Name => Name_Predicate);\n \n                   --  Mark type has predicates, and remember what kind of\n                   --  aspect lead to this predicate (we need this to access\n@@ -2010,6 +2010,46 @@ package body Sem_Ch13 is\n                      Ensure_Freeze_Node (Full_View (E));\n                   end if;\n \n+               --  Predicate_Failure\n+\n+               when Aspect_Predicate_Failure =>\n+\n+                  --  This aspect applies only to subtypes\n+\n+                  if not Is_Type (E) then\n+                     Error_Msg_N\n+                       (\"predicate can only be specified for a subtype\",\n+                        Aspect);\n+                     goto Continue;\n+\n+                  elsif Is_Incomplete_Type (E) then\n+                     Error_Msg_N\n+                       (\"predicate cannot apply to incomplete view\", Aspect);\n+                     goto Continue;\n+                  end if;\n+\n+                  --  Construct the pragma\n+\n+                  Make_Aitem_Pragma\n+                    (Pragma_Argument_Associations => New_List (\n+                       Make_Pragma_Argument_Association (Sloc (Ent),\n+                         Expression => Ent),\n+                       Make_Pragma_Argument_Association (Sloc (Expr),\n+                         Expression => Relocate_Node (Expr))),\n+                     Pragma_Name => Name_Predicate_Failure);\n+\n+                  Set_Has_Predicates (E);\n+\n+                  --  If the type is private, indicate that its completion\n+                  --  has a freeze node, because that is the one that will\n+                  --  be visible at freeze time.\n+\n+                  if Is_Private_Type (E) and then Present (Full_View (E)) then\n+                     Set_Has_Predicates (Full_View (E));\n+                     Set_Has_Delayed_Aspects (Full_View (E));\n+                     Ensure_Freeze_Node (Full_View (E));\n+                  end if;\n+\n                --  Case 2b: Aspects corresponding to pragmas with two\n                --  arguments, where the second argument is a local name\n                --  referring to the entity, and the first argument is the\n@@ -7670,7 +7710,7 @@ package body Sem_Ch13 is\n    --  Start of processing for Build_Discrete_Static_Predicate\n \n    begin\n-      --  Establish  bounds for the predicate\n+      --  Establish bounds for the predicate\n \n       if Compile_Time_Known_Value (Type_Low_Bound (Typ)) then\n          TLo := Expr_Value (Type_Low_Bound (Typ));\n@@ -9373,6 +9413,9 @@ package body Sem_Ch13 is\n               Aspect_Type_Invariant    =>\n             T := Standard_Boolean;\n \n+         when Aspect_Predicate_Failure =>\n+            T := Standard_String;\n+\n          --  Here is the list of aspects that don't require delay analysis\n \n          when Aspect_Abstract_State             |\n@@ -12509,9 +12552,10 @@ package body Sem_Ch13 is\n             case A_Id is\n                --  For now we only deal with aspects that do not generate\n                --  subprograms, or that may mention current instances of\n-               --  types. These will require special handling (TBD).\n+               --  types. These will require special handling (???TBD).\n \n                when Aspect_Predicate |\n+                    Aspect_Predicate_Failure |\n                     Aspect_Invariant |\n                     Aspect_Static_Predicate |\n                     Aspect_Dynamic_Predicate =>"}, {"sha": "0c9c56e2e2e2a10f37eb24028db767b3408f823d", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=a2c314c72b070a170ade9858c6a0ece2105c4508", "patch": "@@ -316,7 +316,18 @@ package body Sem_Ch5 is\n             Get_First_Interp (Lhs, I, It);\n \n             while Present (It.Typ) loop\n-               if Has_Compatible_Type (Rhs, It.Typ) then\n+               --  An indexed component with generalized indexing is always\n+               --  overloaded with the corresponding dereference. Discard\n+               --  the interpretation that yields a reference type, which\n+               --  is not assignable.\n+\n+               if Nkind (Lhs) = N_Indexed_Component\n+                 and then Present (Generalized_Indexing (Lhs))\n+                 and then Has_Implicit_Dereference (It.Typ)\n+               then\n+                  null;\n+\n+               elsif Has_Compatible_Type (Rhs, It.Typ) then\n                   if T1 /= Any_Type then\n \n                      --  An explicit dereference is overloaded if the prefix"}, {"sha": "cd5f9d03bddfd68c0dd4a1544d94638daf6ef7e3", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a2c314c72b070a170ade9858c6a0ece2105c4508", "patch": "@@ -18243,6 +18243,47 @@ package body Sem_Prag is\n             Discard := Rep_Item_Too_Late (Typ, N, FOnly => True);\n          end Predicate;\n \n+         -----------------------\n+         -- Predicate_Failure --\n+         -----------------------\n+\n+         --  pragma Predicate_Failure\n+         --    ([Entity  =>] type_LOCAL_NAME,\n+         --     [Message =>] string_EXPRESSION);\n+\n+         when Pragma_Predicate_Failure => Predicate_Failure : declare\n+            Discard : Boolean;\n+            Typ     : Entity_Id;\n+            Type_Id : Node_Id;\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_Arg_Count (2);\n+            Check_Optional_Identifier (Arg1, Name_Entity);\n+            Check_Optional_Identifier (Arg2, Name_Message);\n+\n+            Check_Arg_Is_Local_Name (Arg1);\n+\n+            Type_Id := Get_Pragma_Arg (Arg1);\n+            Find_Type (Type_Id);\n+            Typ := Entity (Type_Id);\n+\n+            if Typ = Any_Type then\n+               return;\n+            end if;\n+\n+            --  A pragma that applies to a Ghost entity becomes Ghost for the\n+            --  purposes of legality checks and removal of ignored Ghost code.\n+\n+            Mark_Pragma_As_Ghost (N, Typ);\n+\n+            --  The remaining processing is simply to link the pragma on to\n+            --  the rep item chain, for processing when the type is frozen.\n+            --  This is accomplished by a call to Rep_Item_Too_Late.\n+\n+            Discard := Rep_Item_Too_Late (Typ, N, FOnly => True);\n+         end Predicate_Failure;\n+\n          ------------------\n          -- Preelaborate --\n          ------------------\n@@ -27291,7 +27332,7 @@ package body Sem_Prag is\n    --  0   indicates that appearance in any argument is not significant\n    --  +n  indicates that appearance as argument n is significant, but all\n    --      other arguments are not significant\n-   --  9n  arguments from n on are significant, before n inisignificant\n+   --  9n  arguments from n on are significant, before n insignificant\n \n    Sig_Flags : constant array (Pragma_Id) of Int :=\n      (Pragma_Abort_Defer                    => -1,\n@@ -27446,6 +27487,7 @@ package body Sem_Prag is\n       Pragma_Pre                            => -1,\n       Pragma_Precondition                   => -1,\n       Pragma_Predicate                      => -1,\n+      Pragma_Predicate_Failure              => -1,\n       Pragma_Preelaborable_Initialization   => -1,\n       Pragma_Preelaborate                   =>  0,\n       Pragma_Pre_Class                      => -1,"}, {"sha": "76d8028252cbd44ef448113a21f072fc334a7b6c", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c314c72b070a170ade9858c6a0ece2105c4508/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=a2c314c72b070a170ade9858c6a0ece2105c4508", "patch": "@@ -570,6 +570,7 @@ package Snames is\n    Name_Pre                            : constant Name_Id := N + $; -- GNAT\n    Name_Precondition                   : constant Name_Id := N + $; -- GNAT\n    Name_Predicate                      : constant Name_Id := N + $; -- GNAT\n+   Name_Predicate_Failure              : constant Name_Id := N + $; -- Ada 12\n    Name_Preelaborable_Initialization   : constant Name_Id := N + $; -- Ada 05\n    Name_Preelaborate                   : constant Name_Id := N + $;\n    Name_Pre_Class                      : constant Name_Id := N + $; -- GNAT\n@@ -1895,6 +1896,7 @@ package Snames is\n       Pragma_Pre,\n       Pragma_Precondition,\n       Pragma_Predicate,\n+      Pragma_Predicate_Failure,\n       Pragma_Preelaborable_Initialization,\n       Pragma_Preelaborate,\n       Pragma_Pre_Class,"}]}