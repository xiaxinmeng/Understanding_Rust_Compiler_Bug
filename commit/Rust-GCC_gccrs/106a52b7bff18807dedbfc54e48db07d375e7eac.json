{"sha": "106a52b7bff18807dedbfc54e48db07d375e7eac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA2YTUyYjdiZmYxODgwN2RlZGJmYzU0ZTQ4ZGIwN2QzNzVlN2VhYw==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2014-12-19T04:47:18Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2014-12-19T04:47:18Z"}, "message": "* [SH] Add -mlra option.\n\nFrom-SVN: r218888", "tree": {"sha": "e32b6978997b2ab87c56e6b930228d8776fc7237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e32b6978997b2ab87c56e6b930228d8776fc7237"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/106a52b7bff18807dedbfc54e48db07d375e7eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106a52b7bff18807dedbfc54e48db07d375e7eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/106a52b7bff18807dedbfc54e48db07d375e7eac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106a52b7bff18807dedbfc54e48db07d375e7eac/comments", "author": null, "committer": null, "parents": [{"sha": "14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "fd92d5220579184597b046b834f3e78dc87a9277", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106a52b7bff18807dedbfc54e48db07d375e7eac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106a52b7bff18807dedbfc54e48db07d375e7eac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=106a52b7bff18807dedbfc54e48db07d375e7eac", "patch": "@@ -1,3 +1,10 @@\n+2014-12-19  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (sh_lra_p): New function.\n+\t(TARGET_LRA_P): Define.\n+\t(sh_legitimize_reload_address): Return false if sh_lra_p is true.\n+\t* config/sh/sh.opt (mlra): New option.\n+\n 2014-12-19  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* lra-constraints.c (process_address_1): Try if target can split"}, {"sha": "e586f48c5ea4c529e279f23df6792b09097230cd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106a52b7bff18807dedbfc54e48db07d375e7eac/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106a52b7bff18807dedbfc54e48db07d375e7eac/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=106a52b7bff18807dedbfc54e48db07d375e7eac", "patch": "@@ -222,6 +222,7 @@ static int sh_mode_after (int, int, rtx_insn *);\n static int sh_mode_entry (int);\n static int sh_mode_exit (int);\n static int sh_mode_priority (int entity, int n);\n+static bool sh_lra_p (void);\n \n static rtx mark_constant_pool_use (rtx);\n static tree sh_handle_interrupt_handler_attribute (tree *, tree, tree,\n@@ -620,6 +621,9 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO\tsh_encode_section_info\n \n+#undef TARGET_LRA_P\n+#define TARGET_LRA_P sh_lra_p\n+\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD sh_secondary_reload\n \n@@ -10484,6 +10488,9 @@ sh_legitimize_reload_address (rtx *p, machine_mode mode, int opnum,\n   enum reload_type type = (enum reload_type) itype;\n   const int mode_sz = GET_MODE_SIZE (mode);\n \n+  if (sh_lra_p ())\n+    return false;\n+\n   if (! ALLOW_INDEXED_ADDRESS\n       && GET_CODE (*p) == PLUS\n       && REG_P (XEXP (*p, 0)) && REG_P (XEXP (*p, 1)))\n@@ -13774,6 +13781,13 @@ sh_mode_priority (int entity ATTRIBUTE_UNUSED, int n)\n   return ((TARGET_FPU_SINGLE != 0) ^ (n) ? FP_MODE_SINGLE : FP_MODE_DOUBLE);\n }\n \n+/* Return true if we use LRA instead of reload pass.  */\n+static bool\n+sh_lra_p (void)\n+{\n+  return sh_lra_flag;\n+}\n+\n /* Implement TARGET_USE_BY_PIECES_INFRASTRUCTURE_P.  */\n \n static bool"}, {"sha": "375bb88d741e2396d3643e4a7bb2d7819de4ea64", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106a52b7bff18807dedbfc54e48db07d375e7eac/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106a52b7bff18807dedbfc54e48db07d375e7eac/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=106a52b7bff18807dedbfc54e48db07d375e7eac", "patch": "@@ -360,3 +360,6 @@ mfsrra\n Target Var(TARGET_FSRRA)\n Enable the use of the fsrra instruction\n \n+mlra\n+Target Report Var(sh_lra_flag) Init(0) Save\n+Use LRA instead of reload (transitional)"}]}