{"sha": "f21757eb8fa74ad8a6f64cd7f9137b07f4714e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIxNzU3ZWI4ZmE3NGFkOGE2ZjY0Y2Q3ZjkxMzdiMDdmNDcxNGUxMQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T04:41:03Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T05:23:41Z"}, "message": "Remove ad-hoc range canonicalization from determine_block_size.\n\nAnti ranges of ~[MIN,X] are automatically canonicalized to [X+1,MAX],\nat creation time.  There is no need to handle them specially.\n\nTested by adding a gcc_unreachable and bootstrapping/testing.\n\ngcc/ChangeLog:\n\n\t* builtins.c (determine_block_size): Remove ad-hoc range canonicalization.", "tree": {"sha": "2e924ea454b57fdf2851bfe284decff3dfc3e1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e924ea454b57fdf2851bfe284decff3dfc3e1ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f21757eb8fa74ad8a6f64cd7f9137b07f4714e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21757eb8fa74ad8a6f64cd7f9137b07f4714e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21757eb8fa74ad8a6f64cd7f9137b07f4714e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21757eb8fa74ad8a6f64cd7f9137b07f4714e11/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "265d817b1eb4644c7a9613ad6920315d98e2e0a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265d817b1eb4644c7a9613ad6920315d98e2e0a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265d817b1eb4644c7a9613ad6920315d98e2e0a4"}], "stats": {"total": 8, "additions": 1, "deletions": 7}, "files": [{"sha": "beb56e06d8a3d9240412762df621f05a96e255cb", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21757eb8fa74ad8a6f64cd7f9137b07f4714e11/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21757eb8fa74ad8a6f64cd7f9137b07f4714e11/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f21757eb8fa74ad8a6f64cd7f9137b07f4714e11", "patch": "@@ -3287,12 +3287,6 @@ determine_block_size (tree len, rtx len_rtx,\n \t}\n       else if (range_type == VR_ANTI_RANGE)\n \t{\n-\t  /* Anti range 0...N lets us to determine minimal size to N+1.  */\n-\t  if (min == 0)\n-\t    {\n-\t      if (wi::fits_uhwi_p (max) && max.to_uhwi () + 1 != 0)\n-\t\t*min_size = max.to_uhwi () + 1;\n-\t    }\n \t  /* Code like\n \n \t     int n;\n@@ -3302,7 +3296,7 @@ determine_block_size (tree len, rtx len_rtx,\n \t     Produce anti range allowing negative values of N.  We still\n \t     can use the information and make a guess that N is not negative.\n \t     */\n-\t  else if (!wi::leu_p (max, 1 << 30) && wi::fits_uhwi_p (min))\n+\t  if (!wi::leu_p (max, 1 << 30) && wi::fits_uhwi_p (min))\n \t    *probable_max_size = min.to_uhwi () - 1;\n \t}\n     }"}]}