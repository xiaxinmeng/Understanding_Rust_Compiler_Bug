{"sha": "cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303", "node_id": "C_kwDOANBUbNoAKGNlZjNmNjljMmY0Y2JjMDVhYTNlYzAwZjJmZGJhY2ZhOGNhMWQzMDM", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@suse.com", "date": "2022-06-07T08:24:53Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@suse.com", "date": "2022-06-07T08:24:53Z"}, "message": "Revert \"configure: arrange to use appropriate objcopy\"\n\nThis reverts commit 6124f4248888484f419671f4f7bd40d253d3de06.\nIt lacks pieces to work with system binutils.", "tree": {"sha": "e2c2f494b1ae2f5a0c60122b6614ca4cd7091ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2c2f494b1ae2f5a0c60122b6614ca4cd7091ee6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303/comments", "author": {"login": "jbeulich", "id": 5610135, "node_id": "MDQ6VXNlcjU2MTAxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeulich", "html_url": "https://github.com/jbeulich", "followers_url": "https://api.github.com/users/jbeulich/followers", "following_url": "https://api.github.com/users/jbeulich/following{/other_user}", "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions", "organizations_url": "https://api.github.com/users/jbeulich/orgs", "repos_url": "https://api.github.com/users/jbeulich/repos", "events_url": "https://api.github.com/users/jbeulich/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeulich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbeulich", "id": 5610135, "node_id": "MDQ6VXNlcjU2MTAxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeulich", "html_url": "https://github.com/jbeulich", "followers_url": "https://api.github.com/users/jbeulich/followers", "following_url": "https://api.github.com/users/jbeulich/following{/other_user}", "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions", "organizations_url": "https://api.github.com/users/jbeulich/orgs", "repos_url": "https://api.github.com/users/jbeulich/repos", "events_url": "https://api.github.com/users/jbeulich/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeulich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03b71406323ddc065b1d7837d8b43b17e4b048b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b71406323ddc065b1d7837d8b43b17e4b048b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b71406323ddc065b1d7837d8b43b17e4b048b5"}], "stats": {"total": 120, "additions": 1, "deletions": 119}, "files": [{"sha": "b6dcc45a58aeba9c812520242ffce5a874721f17", "filename": "gcc/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303", "patch": "@@ -499,7 +499,6 @@ RANLIB_FOR_TARGET := $(shell \\\n ORIGINAL_LD_FOR_TARGET = @ORIGINAL_LD_FOR_TARGET@\n ORIGINAL_NM_FOR_TARGET = @ORIGINAL_NM_FOR_TARGET@\n NM_FOR_TARGET = ./nm\n-ORIGINAL_OBJCOPY_FOR_TARGET = @ORIGINAL_OBJCOPY_FOR_TARGET@\n STRIP_FOR_TARGET := $(shell \\\n   if [ -f $(objdir)/../binutils/strip-new ] ; then \\\n     echo $(objdir)/../binutils/strip-new ; \\"}, {"sha": "f43dc989d02bd7ea72aadda49f0bf5e82ed4d71e", "filename": "gcc/configure", "status": "modified", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303", "patch": "@@ -731,8 +731,6 @@ gcc_cv_dsymutil\n gcc_cv_otool\n gcc_cv_readelf\n gcc_cv_objdump\n-ORIGINAL_OBJCOPY_FOR_TARGET\n-gcc_cv_objcopy\n ORIGINAL_NM_FOR_TARGET\n gcc_cv_nm\n ORIGINAL_LD_GOLD_FOR_TARGET\n@@ -23438,83 +23436,6 @@ case \"$ORIGINAL_NM_FOR_TARGET\" in\n  ;;\n esac\n \n-# Figure out what objcopy we will be using.\n-if ${gcc_cv_objcopy+:} false; then :\n-\n-else\n-\n-if test -f $gcc_cv_binutils_srcdir/configure.ac \\\n-     && test -f ../binutils/Makefile \\\n-     && test x$build = x$host; then\n-\tgcc_cv_objcopy=../binutils/objcopy$build_exeext\n-elif test -x objcopy$build_exeext; then\n-\tgcc_cv_objcopy=./objcopy$build_exeext\n-elif ( set dummy $OBJCOPY_FOR_TARGET; test -x $2 ); then\n-        gcc_cv_objcopy=\"$OBJCOPY_FOR_TARGET\"\n-else\n-        # Extract the first word of \"$OBJCOPY_FOR_TARGET\", so it can be a program name with args.\n-set dummy $OBJCOPY_FOR_TARGET; ac_word=$2\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n-$as_echo_n \"checking for $ac_word... \" >&6; }\n-if ${ac_cv_path_gcc_cv_objcopy+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  case $gcc_cv_objcopy in\n-  [\\\\/]* | ?:[\\\\/]*)\n-  ac_cv_path_gcc_cv_objcopy=\"$gcc_cv_objcopy\" # Let the user override the test with a path.\n-  ;;\n-  *)\n-  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\n-for as_dir in $PATH\n-do\n-  IFS=$as_save_IFS\n-  test -z \"$as_dir\" && as_dir=.\n-    for ac_exec_ext in '' $ac_executable_extensions; do\n-  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n-    ac_cv_path_gcc_cv_objcopy=\"$as_dir/$ac_word$ac_exec_ext\"\n-    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n-    break 2\n-  fi\n-done\n-  done\n-IFS=$as_save_IFS\n-\n-  ;;\n-esac\n-fi\n-gcc_cv_objcopy=$ac_cv_path_gcc_cv_objcopy\n-if test -n \"$gcc_cv_objcopy\"; then\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_objcopy\" >&5\n-$as_echo \"$gcc_cv_objcopy\" >&6; }\n-else\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n-$as_echo \"no\" >&6; }\n-fi\n-\n-\n-fi\n-fi\n-\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking what objcopy to use\" >&5\n-$as_echo_n \"checking what objcopy to use... \" >&6; }\n-if test \"$gcc_cv_objcopy\" = ../binutils/objcopy$build_exeext; then\n-\t# Single tree build which includes binutils.\n-\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: newly built objcopy\" >&5\n-$as_echo \"newly built objcopy\" >&6; }\n-\tin_tree_objcopy=yes\n-else\n-\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_objcopy\" >&5\n-$as_echo \"$gcc_cv_objcopy\" >&6; }\n-\tin_tree_objcopy=no\n-fi\n-\n-ORIGINAL_OBJCOPY_FOR_TARGET=$gcc_cv_objcopy\n-\n-case \"$ORIGINAL_OBJCOPY_FOR_TARGET\" in\n-  ./objcopy | ./objcopy$build_exeext) ;;\n-  *) ac_config_files=\"$ac_config_files objcopy:exec-tool.in\"\n- ;;\n-esac\n \n # Figure out what objdump we will be using.\n if ${gcc_cv_objdump+:} false; then :\n@@ -33293,7 +33214,6 @@ do\n     \"as\") CONFIG_FILES=\"$CONFIG_FILES as:exec-tool.in\" ;;\n     \"collect-ld\") CONFIG_FILES=\"$CONFIG_FILES collect-ld:exec-tool.in\" ;;\n     \"nm\") CONFIG_FILES=\"$CONFIG_FILES nm:exec-tool.in\" ;;\n-    \"objcopy\") CONFIG_FILES=\"$CONFIG_FILES objcopy:exec-tool.in\" ;;\n     \"dsymutil\") CONFIG_FILES=\"$CONFIG_FILES dsymutil:exec-tool.in\" ;;\n     \"clearcap.map\") CONFIG_LINKS=\"$CONFIG_LINKS clearcap.map:${srcdir}/config/$clearcap_map\" ;;\n     \"$all_outputs\") CONFIG_FILES=\"$CONFIG_FILES $all_outputs\" ;;\n@@ -33929,7 +33849,6 @@ $as_echo \"$as_me: executing $ac_file commands\" >&6;}\n     \"as\":F) chmod +x as ;;\n     \"collect-ld\":F) chmod +x collect-ld ;;\n     \"nm\":F) chmod +x nm ;;\n-    \"objcopy\":F) chmod +x objcopy ;;\n     \"dsymutil\":F) chmod +x dsymutil ;;\n     \"default\":C)\n case ${CONFIG_HEADERS} in"}, {"sha": "80bdd8ceef9bc50769ce59e656b95bb9ef257157", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303", "patch": "@@ -2815,36 +2815,6 @@ case \"$ORIGINAL_NM_FOR_TARGET\" in\n   *) AC_CONFIG_FILES(nm:exec-tool.in, [chmod +x nm]) ;;\n esac\n \n-# Figure out what objcopy we will be using.\n-AS_VAR_SET_IF(gcc_cv_objcopy,, [\n-if test -f $gcc_cv_binutils_srcdir/configure.ac \\\n-     && test -f ../binutils/Makefile \\\n-     && test x$build = x$host; then\n-\tgcc_cv_objcopy=../binutils/objcopy$build_exeext\n-elif test -x objcopy$build_exeext; then\n-\tgcc_cv_objcopy=./objcopy$build_exeext\n-elif ( set dummy $OBJCOPY_FOR_TARGET; test -x $[2] ); then\n-        gcc_cv_objcopy=\"$OBJCOPY_FOR_TARGET\"\n-else\n-        AC_PATH_PROG(gcc_cv_objcopy, $OBJCOPY_FOR_TARGET)\n-fi])\n-\n-AC_MSG_CHECKING(what objcopy to use)\n-if test \"$gcc_cv_objcopy\" = ../binutils/objcopy$build_exeext; then\n-\t# Single tree build which includes binutils.\n-\tAC_MSG_RESULT(newly built objcopy)\n-\tin_tree_objcopy=yes\n-else\n-\tAC_MSG_RESULT($gcc_cv_objcopy)\n-\tin_tree_objcopy=no\n-fi\n-\n-ORIGINAL_OBJCOPY_FOR_TARGET=$gcc_cv_objcopy\n-AC_SUBST(ORIGINAL_OBJCOPY_FOR_TARGET)\n-case \"$ORIGINAL_OBJCOPY_FOR_TARGET\" in\n-  ./objcopy | ./objcopy$build_exeext) ;;\n-  *) AC_CONFIG_FILES(objcopy:exec-tool.in, [chmod +x objcopy]) ;;\n-esac\n \n # Figure out what objdump we will be using.\n AS_VAR_SET_IF(gcc_cv_objdump,, ["}, {"sha": "cf7222745fb58c625fd6a930ecca7b979cff7b4f", "filename": "gcc/exec-tool.in", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303/gcc%2Fexec-tool.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303/gcc%2Fexec-tool.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexec-tool.in?ref=cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303", "patch": "@@ -17,15 +17,14 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Invoke as, ld, nm, or objcopy from the build tree.\n+# Invoke as, ld or nm from the build tree.\n \n ORIGINAL_AS_FOR_TARGET=\"@ORIGINAL_AS_FOR_TARGET@\"\n ORIGINAL_LD_FOR_TARGET=\"@ORIGINAL_LD_FOR_TARGET@\"\n ORIGINAL_LD_BFD_FOR_TARGET=\"@ORIGINAL_LD_BFD_FOR_TARGET@\"\n ORIGINAL_LD_GOLD_FOR_TARGET=\"@ORIGINAL_LD_GOLD_FOR_TARGET@\"\n ORIGINAL_PLUGIN_LD_FOR_TARGET=\"@ORIGINAL_PLUGIN_LD_FOR_TARGET@\"\n ORIGINAL_NM_FOR_TARGET=\"@ORIGINAL_NM_FOR_TARGET@\"\n-ORIGINAL_OBJCOPY_FOR_TARGET=\"@ORIGINAL_OBJCOPY_FOR_TARGET@\"\n ORIGINAL_DSYMUTIL_FOR_TARGET=\"@ORIGINAL_DSYMUTIL_FOR_TARGET@\"\n exeext=@host_exeext@\n fast_install=@enable_fast_install@\n@@ -73,11 +72,6 @@ case \"$invoked\" in\n     prog=nm-new$exeext\n     dir=binutils\n     ;;\n-  objcopy)\n-    original=$ORIGINAL_OBJCOPY_FOR_TARGET\n-    prog=objcopy$exeext\n-    dir=binutils\n-    ;;\n   dsymutil)\n     original=$ORIGINAL_DSYMUTIL_FOR_TARGET\n     # We do not build this in tree - but still want to be able to execute"}]}