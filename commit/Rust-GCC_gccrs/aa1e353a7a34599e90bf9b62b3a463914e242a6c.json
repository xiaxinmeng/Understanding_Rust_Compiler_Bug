{"sha": "aa1e353a7a34599e90bf9b62b3a463914e242a6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWExZTM1M2E3YTM0NTk5ZTkwYmY5YjYyYjNhNDYzOTE0ZTI0MmE2Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T12:44:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T12:44:24Z"}, "message": "[multiple changes]\n\n2011-08-02  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): issue an error in formal\n\tmode on initialization expression which does not respect SPARK\n\trestrictions.\n\t* sem_util.adb, sem_util.ads (Is_SPARK_Initialization_Expr): determines\n\tif the tree referenced by its argument represents an initialization\n\texpression in SPARK, suitable for initializing an object in an object\n\tdeclaration.\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch9.adb (Expand_Access_Protected_Subprogram_Type): Link the\n\tinternally generated access to subprogram with its associated protected\n\tsubprogram type.\n\t* einfo.ads, einfo.adb (Original_Access_Type): New attribute.\n\nFrom-SVN: r177139", "tree": {"sha": "4fc1ecf4afd6bd62ddd97bdb5cc4cda7d0acd82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fc1ecf4afd6bd62ddd97bdb5cc4cda7d0acd82b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa1e353a7a34599e90bf9b62b3a463914e242a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa1e353a7a34599e90bf9b62b3a463914e242a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa1e353a7a34599e90bf9b62b3a463914e242a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa1e353a7a34599e90bf9b62b3a463914e242a6c/comments", "author": null, "committer": null, "parents": [{"sha": "15b682ca9298dda6bc78a98ae4bba04dab2a9d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b682ca9298dda6bc78a98ae4bba04dab2a9d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b682ca9298dda6bc78a98ae4bba04dab2a9d26"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "f478f3c20070d77ceb8e47ee8aa578f90886c2cc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aa1e353a7a34599e90bf9b62b3a463914e242a6c", "patch": "@@ -1,3 +1,20 @@\n+2011-08-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): issue an error in formal\n+\tmode on initialization expression which does not respect SPARK\n+\trestrictions.\n+\t* sem_util.adb, sem_util.ads (Is_SPARK_Initialization_Expr): determines\n+\tif the tree referenced by its argument represents an initialization\n+\texpression in SPARK, suitable for initializing an object in an object\n+\tdeclaration.\n+\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_Access_Protected_Subprogram_Type): Link the\n+\tinternally generated access to subprogram with its associated protected\n+\tsubprogram type.\n+\t* einfo.ads, einfo.adb (Original_Access_Type): New attribute.\n+\n 2011-08-02  Geert Bosch  <bosch@adacore.com>\n \n \t* cstand.adb (Register_Float_Type): Print information about type to"}, {"sha": "42217f5420f301ee1b6daed5fefcade3407baad1", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=aa1e353a7a34599e90bf9b62b3a463914e242a6c", "patch": "@@ -181,6 +181,7 @@ package body Einfo is\n    --    Default_Expr_Function           Node21\n    --    Discriminant_Constraint         Elist21\n    --    Interface_Name                  Node21\n+   --    Original_Access_Type            Node21\n    --    Original_Array_Type             Node21\n    --    Small_Value                     Ureal21\n \n@@ -2353,6 +2354,12 @@ package body Einfo is\n       return Flag242 (Id);\n    end Optimize_Alignment_Time;\n \n+   function Original_Access_Type (Id : E) return E is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Access_Subprogram_Type);\n+      return Node21 (Id);\n+   end Original_Access_Type;\n+\n    function Original_Array_Type (Id : E) return E is\n    begin\n       pragma Assert (Is_Array_Type (Id) or else Is_Modular_Integer_Type (Id));\n@@ -4852,6 +4859,12 @@ package body Einfo is\n       Set_Flag242 (Id, V);\n    end Set_Optimize_Alignment_Time;\n \n+   procedure Set_Original_Access_Type (Id : E; V : E) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Access_Subprogram_Type);\n+      Set_Node21 (Id, V);\n+   end Set_Original_Access_Type;\n+\n    procedure Set_Original_Array_Type (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Array_Type (Id) or else Is_Modular_Integer_Type (Id));\n@@ -8332,6 +8345,9 @@ package body Einfo is\n          when Fixed_Point_Kind                             =>\n             Write_Str (\"Small_Value\");\n \n+         when E_Access_Subprogram_Type                     =>\n+            Write_Str (\"Original_Access_Type\");\n+\n          when E_In_Parameter                               =>\n             Write_Str (\"Default_Expr_Function\");\n "}, {"sha": "0366dbeb604bccf49600520bcef0a09ad4f1da69", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=aa1e353a7a34599e90bf9b62b3a463914e242a6c", "patch": "@@ -3206,6 +3206,12 @@ package Einfo is\n --       Optimize_Alignment (Off) mode applies to the type/object, then neither\n --       of the flags Optimize_Alignment_Space/Optimize_Alignment_Time is set.\n \n+--    Original_Access_Type (Node21)\n+--       Present in E_Access_Subprogram_Type entities. Set only if the access\n+--       type was generated by the expander as part of processing an access\n+--       to protected subprogram type. Points to the access to protected\n+--       subprogram type.\n+\n --    Original_Array_Type (Node21)\n --       Present in modular types and array types and subtypes. Set only\n --       if the Is_Packed_Array_Type flag is set, indicating that the type\n@@ -4876,6 +4882,7 @@ package Einfo is\n    --  E_Access_Subprogram_Type\n    --    Equivalent_Type                     (Node18)   (remote types only)\n    --    Directly_Designated_Type            (Node20)\n+   --    Original_Access_Type                (Node21)\n    --    Needs_No_Actuals                    (Flag22)\n    --    Can_Use_Internal_Rep                (Flag229)\n    --    (plus type attributes)\n@@ -6223,6 +6230,7 @@ package Einfo is\n    function OK_To_Reorder_Components            (Id : E) return B;\n    function Optimize_Alignment_Space            (Id : E) return B;\n    function Optimize_Alignment_Time             (Id : E) return B;\n+   function Original_Access_Type                (Id : E) return E;\n    function Original_Array_Type                 (Id : E) return E;\n    function Original_Record_Component           (Id : E) return E;\n    function Overlays_Constant                   (Id : E) return B;\n@@ -6812,6 +6820,7 @@ package Einfo is\n    procedure Set_OK_To_Reorder_Components        (Id : E; V : B := True);\n    procedure Set_Optimize_Alignment_Space        (Id : E; V : B := True);\n    procedure Set_Optimize_Alignment_Time         (Id : E; V : B := True);\n+   procedure Set_Original_Access_Type            (Id : E; V : E);\n    procedure Set_Original_Array_Type             (Id : E; V : E);\n    procedure Set_Original_Record_Component       (Id : E; V : E);\n    procedure Set_Overlays_Constant               (Id : E; V : B := True);\n@@ -7546,6 +7555,7 @@ package Einfo is\n    pragma Inline (OK_To_Reorder_Components);\n    pragma Inline (Optimize_Alignment_Space);\n    pragma Inline (Optimize_Alignment_Time);\n+   pragma Inline (Original_Access_Type);\n    pragma Inline (Original_Array_Type);\n    pragma Inline (Original_Record_Component);\n    pragma Inline (Overlays_Constant);\n@@ -7943,6 +7953,7 @@ package Einfo is\n    pragma Inline (Set_OK_To_Rename);\n    pragma Inline (Set_Optimize_Alignment_Space);\n    pragma Inline (Set_Optimize_Alignment_Time);\n+   pragma Inline (Set_Original_Access_Type);\n    pragma Inline (Set_Original_Array_Type);\n    pragma Inline (Set_Original_Record_Component);\n    pragma Inline (Set_Overlays_Constant);"}, {"sha": "6a15dd532e56874054e4761ddc5e2e3ba32c7b94", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=aa1e353a7a34599e90bf9b62b3a463914e242a6c", "patch": "@@ -5067,6 +5067,12 @@ package body Exp_Ch9 is\n       Insert_After (N, Decl1);\n       Analyze (Decl1);\n \n+      --  Associate the access to subprogram with its original access to\n+      --  protected subprogram type. Needed by the backend to know that this\n+      --  type corresponds with an access to protected subprogram type.\n+\n+      Set_Original_Access_Type (D_T2, T);\n+\n       --  Create Equivalent_Type, a record with two components for an access to\n       --  object and an access to subprogram.\n "}, {"sha": "5e937249b5829c6f5461567102de14c6a82c1153", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=aa1e353a7a34599e90bf9b62b3a463914e242a6c", "patch": "@@ -3168,6 +3168,15 @@ package body Sem_Ch3 is\n \n          Apply_Scalar_Range_Check (E, T);\n          Apply_Static_Length_Check (E, T);\n+\n+         if Nkind (Original_Node (N)) = N_Object_Declaration\n+           and then Comes_From_Source (Original_Node (N))\n+           and then Formal_Verification_Mode  --  only call test if needed\n+           and then not Is_SPARK_Initialization_Expr (E)\n+         then\n+            Check_Formal_Restriction\n+              (\"initialization expression is not appropriate\", E);\n+         end if;\n       end if;\n \n       --  If the No_Streams restriction is set, check that the type of the"}, {"sha": "feddff824e5e33c8af5e463468b9e7dc92f57580", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=aa1e353a7a34599e90bf9b62b3a463914e242a6c", "patch": "@@ -7368,6 +7368,118 @@ package body Sem_Util is\n       end if;\n    end Is_Selector_Name;\n \n+   ----------------------------------\n+   -- Is_SPARK_Initialization_Expr --\n+   ----------------------------------\n+\n+   function Is_SPARK_Initialization_Expr (N : Node_Id) return Boolean is\n+      Is_Ok : Boolean;\n+\n+      Expr, Comp_Assn, Choice : Node_Id;\n+   begin\n+      Is_Ok := True;\n+\n+      pragma Assert (Nkind (N) in N_Subexpr);\n+\n+      case Nkind (N) is\n+         when N_Character_Literal |\n+              N_Integer_Literal   |\n+              N_Real_Literal      |\n+              N_String_Literal    |\n+              N_Expanded_Name     |\n+              N_Membership_Test   =>\n+            null;\n+\n+         when N_Identifier =>\n+            if Is_Entity_Name (N)\n+              and then Present (Entity (N))  --  needed in some cases\n+            then\n+               case Ekind (Entity (N)) is\n+                  when E_Constant            |\n+                       E_Enumeration_Literal |\n+                       E_Named_Integer       |\n+                       E_Named_Real          =>\n+                     null;\n+                  when others =>\n+                     Is_Ok := False;\n+               end case;\n+            end if;\n+\n+         when N_Qualified_Expression |\n+              N_Type_Conversion      =>\n+            Is_Ok := Is_SPARK_Initialization_Expr (Expression (N));\n+\n+         when N_Unary_Op =>\n+            Is_Ok := Is_SPARK_Initialization_Expr (Right_Opnd (N));\n+\n+         when N_Binary_Op | N_Short_Circuit =>\n+            Is_Ok := Is_SPARK_Initialization_Expr (Left_Opnd (N))\n+              and then Is_SPARK_Initialization_Expr (Right_Opnd (N));\n+\n+         when N_Aggregate           |\n+              N_Extension_Aggregate =>\n+            if Nkind (N) = N_Extension_Aggregate then\n+               Is_Ok := Is_SPARK_Initialization_Expr (Ancestor_Part (N));\n+            end if;\n+\n+            Expr := First (Expressions (N));\n+            while Present (Expr) loop\n+               if not Is_SPARK_Initialization_Expr (Expr) then\n+                  Is_Ok := False;\n+                  goto Done;\n+               end if;\n+\n+               Next (Expr);\n+            end loop;\n+\n+            Comp_Assn := First (Component_Associations (N));\n+            while Present (Comp_Assn) loop\n+               Choice := First (Choices (Comp_Assn));\n+               while Present (Choice) loop\n+                  if Nkind (Choice) in N_Subexpr\n+                    and then not Is_SPARK_Initialization_Expr (Choice)\n+                  then\n+                     Is_Ok := False;\n+                     goto Done;\n+                  end if;\n+\n+                  Next (Choice);\n+               end loop;\n+\n+               Expr := Expression (Comp_Assn);\n+               if Present (Expr)  --  needed for box association\n+                 and then not Is_SPARK_Initialization_Expr (Expr)\n+               then\n+                  Is_Ok := False;\n+                  goto Done;\n+               end if;\n+\n+               Next (Comp_Assn);\n+            end loop;\n+\n+         when N_Attribute_Reference =>\n+            if Nkind (Prefix (N)) in N_Subexpr then\n+               Is_Ok := Is_SPARK_Initialization_Expr (Prefix (N));\n+            end if;\n+\n+            Expr := First (Expressions (N));\n+            while Present (Expr) loop\n+               if not Is_SPARK_Initialization_Expr (Expr) then\n+                  Is_Ok := False;\n+                  goto Done;\n+               end if;\n+\n+               Next (Expr);\n+            end loop;\n+\n+         when others =>\n+            Is_Ok := False;\n+      end case;\n+\n+      <<Done>>\n+      return Is_Ok;\n+   end Is_SPARK_Initialization_Expr;\n+\n    -------------------------------\n    -- Is_SPARK_Object_Reference --\n    -------------------------------"}, {"sha": "6803dfb9b661753b955bb194082e73d0e70b0d67", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1e353a7a34599e90bf9b62b3a463914e242a6c/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=aa1e353a7a34599e90bf9b62b3a463914e242a6c", "patch": "@@ -828,6 +828,11 @@ package Sem_Util is\n    --  represent use of the N_Identifier node for a true identifier, when\n    --  normally such nodes represent a direct name.\n \n+   function Is_SPARK_Initialization_Expr (N : Node_Id) return Boolean;\n+   --  Determines if the tree referenced by N represents an initialization\n+   --  expression in SPARK, suitable for initializing an object in an object\n+   --  declaration.\n+\n    function Is_SPARK_Object_Reference (N : Node_Id) return Boolean;\n    --  Determines if the tree referenced by N represents an object in SPARK\n "}]}