{"sha": "06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZjYjRmNzk4OGNmZjM3NmFlYWZjMjMwZGVhOGU5YThlM2U2YzBlOQ==", "commit": {"author": {"name": "Jan Sjodin", "email": "jan.sjodin@amd.com", "date": "2007-07-31T05:01:12Z"}, "committer": {"name": "Jan Sjodin", "email": "jsjodin@gcc.gnu.org", "date": "2007-07-31T05:01:12Z"}, "message": "2007-07-30  Jan Sjodin  <jan.sjodin@amd.com>\n\n        * tree-data-ref.c\n        (split_constant_offset): Enable split_constant_offset to extract\n        constants from other statements.\n        * tree-vect-transform.c\n        (vect_create_addr_base_for_vector_ref): Generate data_ref_base\n        to a temp var. Force base_offset to be simple.\n\n2007-07-30  Jan Sjodin  <jan.sjodin@amd.com>\n\n        * gcc.dg/vect/vect-117.c: New test.\n        * gcc.dg/vect/vect-74.c: Enabled test\n        * gcc.dg/vect/vect-81.c: Enabled test\n\nFrom-SVN: r127080", "tree": {"sha": "c042b23d4ab792a0cd2a13cdac53d198671cbdbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c042b23d4ab792a0cd2a13cdac53d198671cbdbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/comments", "author": null, "committer": null, "parents": [{"sha": "a3f918441efe44c3b32606721a0e4fd35089e2dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f918441efe44c3b32606721a0e4fd35089e2dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f918441efe44c3b32606721a0e4fd35089e2dd"}], "stats": {"total": 120, "additions": 115, "deletions": 5}, "files": [{"sha": "8f7453bf1e9ebd992d2a991ed45ea3a07e56c8d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "patch": "@@ -1,3 +1,12 @@\n+2007-07-30  Jan Sjodin  <jan.sjodin@amd.com>\n+\n+\t* tree-data-ref.c\n+\t(split_constant_offset): Enable split_constant_offset to extract\n+\tconstants from other statements.\n+\t* tree-vect-transform.c\n+\t(vect_create_addr_base_for_vector_ref): Generate data_ref_base\n+\tto a temp var. Force base_offset to be simple.\n+\n 2007-07-30  Seongbae Park <seongbae.park@gmail.com>\n \n \t* df-scan.c (df_scan_verify): Remove artificial limit on"}, {"sha": "24c0d4bc50c5d9d38a6f45554aebd47a848185d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "patch": "@@ -1,3 +1,9 @@\n+2007-07-30  Jan Sjodin  <jan.sjodin@amd.com>\n+\n+\t* gcc.dg/vect/vect-117.c: New test.\n+\t* gcc.dg/vect/vect-74.c: Enabled test\n+\t* gcc.dg/vect/vect-81.c: Enabled test\n+\n 2007-07-30  Andrew Pinski  <pinskia@gmail.com>\n \n \t* gcc.dg/pragma-darwin.c: Run on all *-*-darwin* targets."}, {"sha": "b9ad93c55e969c2790d2623878ad25b68a6a2fc6", "filename": "gcc/testsuite/gcc.dg/vect/vect-117.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-117.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-117.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-117.c?ref=06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 5\n+\n+static  int a[N][N] = {{ 1, 2, 3, 4, 5},\n+\t\t       { 6, 7, 8, 9,10},\n+\t\t       {11,12,13,14,15},\n+\t\t       {16,17,18,19,20},\n+\t\t       {21,22,23,24,25}};\n+\n+static  int c[N][N] = {{ 1, 2, 3, 4, 5},\n+\t\t       { 7, 9,11, 13,15},\n+\t\t       {18,21,24,27,30},\n+\t\t       {34,38,42,46,50},\n+\t\t       {55,60,65,70,75}};\n+\n+volatile int foo;\n+\n+int main1 (int A[N][N]) \n+{\n+\n+  int i,j;\n+\n+  /* vectorizable */\n+  for (i = 1; i < N; i++)\n+  {\n+    for (j = 0; j < N; j++)\n+    {\n+      A[i][j] = A[i-1][j] + A[i][j];\n+    }\n+  }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  int i,j;\n+\n+  foo = 0;\n+  main1 (a);\n+\n+  /* check results: */\n+\n+  for (i = 0; i < N; i++)\n+   {\n+    for (j = 0; j < N; j++)\n+     {\n+       if (a[i][j] != c[i][j])\n+         abort();\n+     }\n+  }\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "e1a49653f69a3263812182369c07866ffb01ffeb", "filename": "gcc/testsuite/gcc.dg/vect/vect-74.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c?ref=06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "patch": "@@ -43,7 +43,7 @@ int main (void)\n }\n \n /* Xfail until handling restrict is refined.  See pr29145 */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* Uncomment when this testcase gets vectorized again:    \n  dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target vect_no_align } } \n  dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } "}, {"sha": "cf51df5a681b81b45e4b3d60b552d0463ee0b301", "filename": "gcc/testsuite/gcc.dg/vect/vect-80.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c?ref=06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "patch": "@@ -47,7 +47,7 @@ int main (void)\n    all three accesses (peeling to align the store will not force the\n    two loads to be aligned).  */\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* Uncomment when this testcase gets vectorized again:\n  dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } \n  dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_no_align } } "}, {"sha": "94bdacace4f2b0ca85dcd38c4067607af5a664fd", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "patch": "@@ -565,6 +565,27 @@ split_constant_offset (tree exp, tree *var, tree *off)\n \treturn;\n       }\n \n+    case SSA_NAME:\n+      {\n+\ttree def_stmt = SSA_NAME_DEF_STMT (exp);\n+\tif (TREE_CODE (def_stmt) == GIMPLE_MODIFY_STMT)\n+\t  {\n+\t    tree def_stmt_rhs = GIMPLE_STMT_OPERAND (def_stmt, 1);\n+\n+\t    if (!TREE_SIDE_EFFECTS (def_stmt_rhs) \n+\t\t&& EXPR_P (def_stmt_rhs)\n+\t\t&& !REFERENCE_CLASS_P (def_stmt_rhs))\n+\t      {\n+\t\tsplit_constant_offset (def_stmt_rhs, &var0, &off0);\n+\t\tvar0 = fold_convert (type, var0);\n+\t\t*var = var0;\n+\t\t*off = off0;\n+\t\treturn;\n+\t      }\n+\t  }\n+\tbreak;\n+      }\n+\n     default:\n       break;\n     }"}, {"sha": "0965165e81189236e8c12b3f777dc7aa417c29c0", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=06cb4f7988cff376aeafc230dea8e9a8e3e6c0e9", "patch": "@@ -711,21 +711,32 @@ vect_create_addr_base_for_vector_ref (tree stmt,\n {\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info);\n-  tree data_ref_base = unshare_expr (DR_BASE_ADDRESS (dr));\n-  tree base_name = build_fold_indirect_ref (data_ref_base);\n+  tree data_ref_base_expr = unshare_expr (DR_BASE_ADDRESS (dr));\n+  tree base_name = build_fold_indirect_ref (data_ref_base_expr);\n+  tree data_ref_base_var;\n+  tree data_ref_base;\n+  tree new_base_stmt;\n   tree vec_stmt;\n   tree addr_base, addr_expr;\n   tree dest, new_stmt;\n   tree base_offset = unshare_expr (DR_OFFSET (dr));\n   tree init = unshare_expr (DR_INIT (dr));\n   tree vect_ptr_type, addr_expr2;\n+  \n+  \n+  /* Create data_ref_base */\n+  data_ref_base_var = create_tmp_var (TREE_TYPE (data_ref_base_expr), \"batmp\");\n+  add_referenced_var (data_ref_base_var);\n+  data_ref_base = force_gimple_operand (data_ref_base_expr, &new_base_stmt,\n+\t\t\t\t\ttrue, data_ref_base_var);\n+  append_to_statement_list_force(new_base_stmt, new_stmt_list);\n \n   /* Create base_offset */\n   base_offset = size_binop (PLUS_EXPR, base_offset, init);\n   base_offset = fold_convert (sizetype, base_offset);\n   dest = create_tmp_var (TREE_TYPE (base_offset), \"base_off\");\n   add_referenced_var (dest);\n-  base_offset = force_gimple_operand (base_offset, &new_stmt, false, dest);  \n+  base_offset = force_gimple_operand (base_offset, &new_stmt, true, dest); \n   append_to_statement_list_force (new_stmt, new_stmt_list);\n \n   if (offset)"}]}