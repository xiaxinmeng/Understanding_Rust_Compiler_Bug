{"sha": "d0208f9b647dc20ca5e1cff958f81c063ff25a17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyMDhmOWI2NDdkYzIwY2E1ZTFjZmY5NThmODFjMDYzZmYyNWExNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-05-16T06:19:39Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-16T06:19:39Z"}, "message": "i386.c (ix86_expand_vector_init_general): Optimize V8HImode for SSE2 and V16QImode for SSE4.1.\n\ngcc/\n\n2008-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_expand_vector_init_general): Optimize\n\tV8HImode for SSE2 and V16QImode for SSE4.1.\n\ngcc/testsuite/\n\n2008-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.target/i386/m128-check.h: New.\n\t* gcc.target/i386/set-v16qi-1.h: Likewise.\n\t* gcc.target/i386/set-v16qi-2.h: Likewise.\n\t* gcc.target/i386/set-v8hi-1.h: Likewise.\n\t* gcc.target/i386/set-v8hi-2.h: Likewise.\n\t* gcc.target/i386/sse2-set-v16qi-1.c: Likewise.\n\t* gcc.target/i386/sse2-set-v16qi-2.c: Likewise.\n\t* gcc.target/i386/sse2-set-v8hi-1.c: Likewise.\n\t* gcc.target/i386/sse2-set-v8hi-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-set-v16qi-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-set-v16qi-2.c: Likewise.\n\n\t* gcc.target/i386/sse2-check.h: Include m128-check.h. Don't\n\tinclude <stdio.h>.\n\t* gcc.target/i386/sse4_1-check.h: Likewise.\n\nFrom-SVN: r135409", "tree": {"sha": "2c2f0120cd92b100f39e9727488dd7e30e4a0de2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c2f0120cd92b100f39e9727488dd7e30e4a0de2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0208f9b647dc20ca5e1cff958f81c063ff25a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0208f9b647dc20ca5e1cff958f81c063ff25a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0208f9b647dc20ca5e1cff958f81c063ff25a17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0208f9b647dc20ca5e1cff958f81c063ff25a17/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d93712d9ff419405a47063a9fcaeeb1c1151cdac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93712d9ff419405a47063a9fcaeeb1c1151cdac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d93712d9ff419405a47063a9fcaeeb1c1151cdac"}], "stats": {"total": 376, "additions": 373, "deletions": 3}, "files": [{"sha": "77b9620b0590e285dc8098904dae107c5da0d815", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -1,3 +1,8 @@\n+2008-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_expand_vector_init_general): Optimize\n+\tV8HImode for SSE2 and V16QImode for SSE4.1.\n+\n 2008-05-15  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* cgraph.h (compute_inline_parameters): Made public."}, {"sha": "af1e6c60b55ea8c058fb6f125d7c6ed7e919cc2b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -23892,7 +23892,142 @@ ix86_expand_vector_init_general (bool mmx_ok, enum machine_mode mode,\n       break;\n \n     case V8HImode:\n+      if (TARGET_SSE2)\n+\t{\n+\t  rtx ops[4];\n+\t  unsigned int i, j;\n+\n+\t  for (i = 0; i < ARRAY_SIZE (ops); i++)\n+\t    {\n+\t      /* Extend the odd elment from HImode to SImode using\n+\t\t a paradoxical SUBREG.  */\n+\t      op0 = gen_reg_rtx (SImode);\n+\t      emit_move_insn (op0, gen_lowpart (SImode,\n+\t\t\t\t\t\tXVECEXP (vals, 0,\n+\t\t\t\t\t\t\t i + i)));\n+\n+\t      /* Insert the SImode value as low element of V4SImode\n+\t\t vector. */\n+\t      op1 = gen_reg_rtx (V4SImode);\n+\t      op0 = gen_rtx_VEC_MERGE (V4SImode,\n+\t\t\t\t       gen_rtx_VEC_DUPLICATE (V4SImode,\n+\t\t\t\t\t\t\t      op0),\n+\t\t\t\t       CONST0_RTX (V4SImode),\n+\t\t\t\t       const1_rtx);\n+\t      emit_insn (gen_rtx_SET (VOIDmode, op1, op0));\n+\n+\t      /* Cast the V4SImode vector back to a V8HImode vector.  */\n+\t      op0 = gen_reg_rtx (mode);\n+\t      emit_move_insn (op0, gen_lowpart (mode, op1));\n+\n+\t      /* Load even HI elements into the second positon.  */\n+\t      emit_insn (gen_vec_setv8hi (op0, XVECEXP (vals, 0,\n+\t\t\t\t\t\t\ti + i + 1),\n+\t\t\t\t\t  const1_rtx));\n+\n+\t      /* Cast V8HImode vector to V4SImode vector.  */\n+\t      ops[i] = gen_reg_rtx (V4SImode);\n+\t      emit_move_insn (ops[i], gen_lowpart (V4SImode, op0));\n+\t    }\n+\n+\t  /* Interleave low V4SIs.  */\n+\t  for (i = j = 0; i < ARRAY_SIZE (ops); i += 2, j++)\n+\t    {\n+\t      op0 = gen_reg_rtx (V4SImode);\n+\t      emit_insn (gen_vec_interleave_lowv4si (op0, ops[i],\n+\t\t\t\t\t\t     ops[i + 1]));\n+\n+\t      /* Cast V4SImode vectors to V2DImode vectors.  */\n+\t      op1 = gen_reg_rtx (V2DImode);\n+\t      emit_move_insn (op1, gen_lowpart (V2DImode, op0));\n+\t      ops[j] = op1;\n+\t    }\n+\n+\t  /* Interleave low V2DIs.  */\n+\t  op0 = gen_reg_rtx (V2DImode);\n+\t  emit_insn (gen_vec_interleave_lowv2di (op0, ops[0], ops[1]));\n+\n+\t  /* Cast the V2DImode vector back to a V8HImode vector.  */\n+\t  emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t  gen_lowpart (mode, op0)));\n+\t  return;\n+\t}\n+\n     case V16QImode:\n+      if (TARGET_SSE4_1)\n+\t{\n+\t  rtx ops[8];\n+\t  unsigned int i, j;\n+\n+\t  for (i = 0; i < ARRAY_SIZE (ops); i++)\n+\t    {\n+\t      /* Extend the odd elment from QImode to SImode using\n+\t\t a paradoxical SUBREG.  */\n+\t      op0 = gen_reg_rtx (SImode);\n+\t      emit_move_insn (op0, gen_lowpart (SImode,\n+\t\t\t\t\t\tXVECEXP (vals, 0,\n+\t\t\t\t\t\t\t i + i)));\n+\n+\t      /* Insert the SImode value as low element of V4SImode\n+\t\t vector. */\n+\t      op1 = gen_reg_rtx (V4SImode);\n+\t      op0 = gen_rtx_VEC_MERGE (V4SImode,\n+\t\t\t\t       gen_rtx_VEC_DUPLICATE (V4SImode,\n+\t\t\t\t\t\t\t      op0),\n+\t\t\t\t       CONST0_RTX (V4SImode),\n+\t\t\t\t       const1_rtx);\n+\t      emit_insn (gen_rtx_SET (VOIDmode, op1, op0));\n+\n+\t      /* Cast the V4SImode vector back to a V16QImode vector.  */\n+\t      op0 = gen_reg_rtx (mode);\n+\t      emit_move_insn (op0, gen_lowpart (mode, op1));\n+\n+\t      /* Load even QI elements into the second positon.  */\n+\t      emit_insn (gen_vec_setv16qi (op0, XVECEXP (vals, 0,\n+\t\t\t\t\t\t\t i + i + 1),\n+\t\t\t\t\t   const1_rtx));\n+\n+\t      /* Cast V16QImode vector to V8HImode vector.  */\n+\t      ops[i] = gen_reg_rtx (V8HImode);\n+\t      emit_move_insn (ops[i], gen_lowpart (V8HImode, op0));\n+\t    }\n+\n+\t  /* Interleave low V8HIs.  */\n+\t  for (i = j = 0; i < ARRAY_SIZE (ops); i += 2, j++)\n+\t    {\n+\t      op0 = gen_reg_rtx (V8HImode);\n+\t      emit_insn (gen_vec_interleave_lowv8hi (op0, ops[i],\n+\t\t\t\t\t\t     ops[i + 1]));\n+\n+\t      /* Cast V8HImode vector to V4SImode vector.  */\n+\t      op1 = gen_reg_rtx (V4SImode);\n+\t      emit_move_insn (op1, gen_lowpart (V4SImode, op0));\n+\t      ops[j] = op1;\n+\t    }\n+\n+\t  /* Interleave low V4SIs.  */\n+\t  for (i = j = 0; i < ARRAY_SIZE (ops) / 2; i += 2, j++)\n+\t    {\n+\t      op0 = gen_reg_rtx (V4SImode);\n+\t      emit_insn (gen_vec_interleave_lowv4si (op0, ops[i],\n+\t\t\t\t\t\t     ops[i + 1]));\n+\n+\t      /* Cast V4SImode vectors to V2DImode vectors.  */\n+\t      op1 = gen_reg_rtx (V2DImode);\n+\t      emit_move_insn (op1, gen_lowpart (V2DImode, op0));\n+\t      ops[j] = op1;\n+\t    }\n+\n+\t  /* Interleave low V2DIs.  */\n+\t  op0 = gen_reg_rtx (V2DImode);\n+\t  emit_insn (gen_vec_interleave_lowv2di (op0, ops[0], ops[1]));\n+\n+\t  /* Cast the V2DImode vector back to a V8HImode vector.  */\n+\t  emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t  gen_lowpart (mode, op0)));\n+\t  return;\n+\t}\n+\n     case V4HImode:\n     case V8QImode:\n       break;"}, {"sha": "45ea522360956014bfe36264bbd65e342b34a331", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -1,3 +1,21 @@\n+2008-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/m128-check.h: New.\n+\t* gcc.target/i386/set-v16qi-1.h: Likewise.\n+\t* gcc.target/i386/set-v16qi-2.h: Likewise.\n+\t* gcc.target/i386/set-v8hi-1.h: Likewise.\n+\t* gcc.target/i386/set-v8hi-2.h: Likewise.\n+\t* gcc.target/i386/sse2-set-v16qi-1.c: Likewise.\n+\t* gcc.target/i386/sse2-set-v16qi-2.c: Likewise.\n+\t* gcc.target/i386/sse2-set-v8hi-1.c: Likewise.\n+\t* gcc.target/i386/sse2-set-v8hi-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-set-v16qi-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-set-v16qi-2.c: Likewise.\n+\n+\t* gcc.target/i386/sse2-check.h: Include m128-check.h. Don't\n+\tinclude <stdio.h>.\n+\t* gcc.target/i386/sse4_1-check.h: Likewise.\n+\n 2008-05-15  Adam Nemet  <anemet@caviumnetworks.com>\n \n \tPR middle-end/36194"}, {"sha": "3231c079009db7327b9a681b7dc72445c8a77b09", "filename": "gcc/testsuite/gcc.target/i386/m128-check.h", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fm128-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fm128-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fm128-check.h?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,69 @@\n+#include <stdio.h>\n+#include <emmintrin.h>\n+\n+typedef union\n+{\n+  __m128i x;\n+  char a[16];\n+} union128i_b;\n+\n+typedef union\n+{\n+  __m128i x;\n+  short a[8];\n+} union128i_w;\n+\n+typedef union\n+{\n+  __m128i x;\n+  int a[4];\n+} union128i_d;\n+\n+typedef union\n+{\n+  __m128i x;\n+  long long a[2];\n+} union128i_q;\n+\n+typedef union\n+{\n+  __m128  x;\n+  float a[4];\n+} union128;\n+\n+typedef union\n+{\n+  __m128d x;\n+  double a[2];\n+} union128d;\n+\n+#ifdef DEBUG\n+#define PRINTF printf\n+#else\n+#define PRINTF(...)\t\n+#endif\n+\n+#define CHECK_EXP(UINON_TYPE, VALUE_TYPE, FMT)\t\t\\\n+static int\t\t\t\t\t\t\\\n+__attribute__((noinline, unused))\t\t\t\\\n+check_##UINON_TYPE (UINON_TYPE u, const VALUE_TYPE *v)\t\\\n+{\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\\\n+  int err = 0;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  for (i = 0; i < sizeof (u.a) / sizeof (u.a[0]); i++)\t\\\n+    if (u.a[i] != v[i])\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\terr++;\t\t\t\t\t\t\\\n+\tPRINTF (\"%i: \" FMT \" != \" FMT \"\\n\",\t\t\\\n+\t\ti, v[i], u.a[i]);\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  return err;\t\t\t\t\t\t\\\n+}\n+\n+CHECK_EXP (union128i_b, char, \"%d\")\n+CHECK_EXP (union128i_w, short, \"%d\")\n+CHECK_EXP (union128i_d, int, \"0x%x\")\n+CHECK_EXP (union128i_q, long long, \"0x%llx\")\n+CHECK_EXP (union128, float, \"%f\")\n+CHECK_EXP (union128d, double, \"%f\")"}, {"sha": "79556e87460dc7a26a5841c5c2b2b55d0b08bdc0", "filename": "gcc/testsuite/gcc.target/i386/set-v16qi-1.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v16qi-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v16qi-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v16qi-1.h?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include CHECK_H\n+\n+static __m128i\n+__attribute__((noinline))\n+foo (char *v)\n+{\n+  return _mm_set_epi8 (v[15], v[14], v[13], v[12],\n+\t\t       v[11], v[10], v[9], v[8],\n+\t\t       v[7], v[6], v[5], v[4],\n+\t\t       v[3], v[2], v[1], v[0]);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  char v[16] =\n+    { \n+      -3, 60, 48, 104, -90, 37, -48, 78,\n+      4, 33, 81, 4, -89, 17, 8, 68\n+    };\n+  union128i_b u;\n+\n+  u.x = foo (v);\n+  if (check_union128i_b (u, v))\n+    abort ();\n+}"}, {"sha": "9768806c50caa95d34b3978068b286d3560af554", "filename": "gcc/testsuite/gcc.target/i386/set-v16qi-2.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v16qi-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v16qi-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v16qi-2.h?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,30 @@\n+#include CHECK_H\n+\n+static __m128i\n+__attribute__((noinline))\n+foo (char x1, char x2, char x3, char x4,\n+     char x5, char x6, char x7, char x8,\n+     char x9, char x10, char x11, char x12,\n+     char x13, char x14, char x15, char x16)\n+{\n+  return _mm_set_epi8 (x1, x2, x3, x4, x5, x6, x7, x8,\n+\t\t       x9, x10, x11, x12, x13, x14, x15, x16);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  char v[16] =\n+    { \n+      -3, 60, 48, 104, -90, 37, -48, 78,\n+      4, 33, 81, 4, -89, 17, 8, 68\n+    };\n+  union128i_b u;\n+\n+  u.x = foo (v[15], v[14], v[13], v[12],\n+\t     v[11], v[10], v[9], v[8],\n+\t     v[7], v[6], v[5], v[4],\n+\t     v[3], v[2], v[1], v[0]);\n+  if (check_union128i_b (u, v))\n+    abort ();\n+}"}, {"sha": "87762b82e99a5688fab71ad9a3e25f4cc701d43b", "filename": "gcc/testsuite/gcc.target/i386/set-v8hi-1.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v8hi-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v8hi-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v8hi-1.h?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,19 @@\n+#include CHECK_H\n+\n+static __m128i\n+__attribute__((noinline))\n+foo (short *v)\n+{\n+  return _mm_set_epi16 (v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  short v[8] = { -3, 6000, 48, 104, -90, 34567, -1248, 34678 };\n+  union128i_w u;\n+\n+  u.x = foo (v);\n+  if (check_union128i_w (u, v))\n+    abort ();\n+}"}, {"sha": "835e7b4d696c186b990ce397d4893e1659fdd038", "filename": "gcc/testsuite/gcc.target/i386/set-v8hi-2.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v8hi-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v8hi-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fset-v8hi-2.h?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,21 @@\n+#include CHECK_H\n+\n+__m128i\n+__attribute__((noinline))\n+foo (short x1, short x2, short x3, short x4,\n+     short x5, short x6, short x7, short x8)\n+{\n+  return _mm_set_epi16 (x1, x2, x3, x4, x5, x6, x7, x8);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  short v[8] = { -3, 2, 1, 9, 23, -173, -13, 69 };\n+  union128i_w u;\n+\n+  u.x = foo (v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union128i_w (u, v))\n+     abort ();\n+}"}, {"sha": "a69333e391a09ed05e90482b778cd3f06cdbe6b7", "filename": "gcc/testsuite/gcc.target/i386/sse2-check.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -1,7 +1,6 @@\n-#include <stdio.h>\n #include <stdlib.h>\n-\n #include \"cpuid.h\"\n+#include \"m128-check.h\"\n \n static void sse2_test (void);\n "}, {"sha": "61f19cb2b4984bad557f414fe41e00ca847c8bcb", "filename": "gcc/testsuite/gcc.target/i386/sse2-set-v16qi-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v16qi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v16qi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v16qi-1.c?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#define CHECK_H \"sse2-check.h\"\n+#define TEST sse2_test\n+\n+#include \"set-v16qi-1.h\""}, {"sha": "918fa5c9155a3f2a3791946164bb486d21cb2bf8", "filename": "gcc/testsuite/gcc.target/i386/sse2-set-v16qi-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v16qi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v16qi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v16qi-2.c?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#define CHECK_H \"sse2-check.h\"\n+#define TEST sse2_test\n+\n+#include \"set-v16qi-2.h\""}, {"sha": "cab461e3e386a86eb39f322ae973746fd4d63e1b", "filename": "gcc/testsuite/gcc.target/i386/sse2-set-v8hi-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-1.c?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#define CHECK_H \"sse2-check.h\"\n+#define TEST sse2_test\n+\n+#include \"set-v8hi-1.h\""}, {"sha": "2b4a8be728d35466c1a90f66b1e03fbed7c5e6b9", "filename": "gcc/testsuite/gcc.target/i386/sse2-set-v8hi-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-2.c?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#define CHECK_H \"sse2-check.h\"\n+#define TEST sse2_test\n+\n+#include \"set-v8hi-2.h\""}, {"sha": "2d1c4e835a343b7a46c8353401b34dc6351a2c8d", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-check.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-check.h?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -1,7 +1,7 @@\n-#include <stdio.h>\n #include <stdlib.h>\n \n #include \"cpuid.h\"\n+#include \"m128-check.h\"\n \n static void sse4_1_test (void);\n "}, {"sha": "23c0903300a59dea36aa1f6f5bce90e450fb4b62", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-v16qi-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-1.c?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#define CHECK_H \"sse4_1-check.h\"\n+#define TEST sse4_1_test\n+\n+#include \"set-v16qi-1.h\""}, {"sha": "5245870824bcad7a68c9bf709e2de98c8dc80dff", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-v16qi-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0208f9b647dc20ca5e1cff958f81c063ff25a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-2.c?ref=d0208f9b647dc20ca5e1cff958f81c063ff25a17", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#define CHECK_H \"sse4_1-check.h\"\n+#define TEST sse4_1_test\n+\n+#include \"set-v16qi-2.h\""}]}