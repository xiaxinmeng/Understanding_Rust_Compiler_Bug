{"sha": "4d1a011f56b0bf0e6d7fa70cbf09dd8ca4a0bf24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQxYTAxMWY1NmIwYmYwZTZkN2ZhNzBjYmYwOWRkOGNhNGEwYmYyNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-02T18:07:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-02T18:07:37Z"}, "message": "Add prototypes to static declarations.\n\n(PROTO): New macro.\n(dup2, putenv): Functions return integers; add type and returns.\n\nFrom-SVN: r5560", "tree": {"sha": "d1a2a9cefb0090e9868cf40853774d534699d7d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1a2a9cefb0090e9868cf40853774d534699d7d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d1a011f56b0bf0e6d7fa70cbf09dd8ca4a0bf24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1a011f56b0bf0e6d7fa70cbf09dd8ca4a0bf24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d1a011f56b0bf0e6d7fa70cbf09dd8ca4a0bf24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1a011f56b0bf0e6d7fa70cbf09dd8ca4a0bf24/comments", "author": null, "committer": null, "parents": [{"sha": "3771b9b2173ecb10fa517d522755cda6be21403c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3771b9b2173ecb10fa517d522755cda6be21403c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3771b9b2173ecb10fa517d522755cda6be21403c"}], "stats": {"total": 99, "additions": 57, "deletions": 42}, "files": [{"sha": "827f912152a8eae445e37e8e81ab9707db9c8879", "filename": "gcc/collect2.c", "status": "modified", "additions": 57, "deletions": 42, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1a011f56b0bf0e6d7fa70cbf09dd8ca4a0bf24/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1a011f56b0bf0e6d7fa70cbf09dd8ca4a0bf24/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=4d1a011f56b0bf0e6d7fa70cbf09dd8ca4a0bf24", "patch": "@@ -2,7 +2,7 @@\n    that can be traversed by C++ initialization and finalization\n    routines.\n \n-   Copyright (C) 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993 Free Software Foundation, Inc.\n    Contributed by Chris Smith (csmith@convex.com).\n    Heavily modified by Michael Meissner (meissner@osf.org),\n    Per Bothner (bothner@cygnus.com), and John Gilmore (gnu@cygnus.com).\n@@ -57,6 +57,15 @@ extern int errno;\n #define vfork fork\n #endif\n \n+/* Add prototype support.  */\n+#ifndef PROTO\n+#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n+#define PROTO(ARGS) ARGS\n+#else\n+#define PROTO(ARGS) ()\n+#endif\n+#endif\n+\n #ifndef R_OK\n #define R_OK 4\n #define W_OK 2\n@@ -207,15 +216,40 @@ static struct head destructors;\t\t/* list of destructors found */\n \n extern char *getenv ();\n extern char *mktemp ();\n-static void  add_to_list ();\n-static void  scan_prog_file ();\n-static void  fork_execute ();\n-static void  do_wait ();\n-static void  write_c_file ();\n-static void  my_exit ();\n-static void  handler ();\n-static void  maybe_unlink ();\n-static void  choose_temp_base ();\n+extern FILE *fdopen ();\n+\n+/* Structure to hold all the directories in which to search for files to\n+   execute.  */\n+\n+struct prefix_list\n+{\n+  char *prefix;               /* String to prepend to the path. */\n+  struct prefix_list *next;   /* Next in linked list. */\n+};\n+\n+struct path_prefix\n+{\n+  struct prefix_list *plist;  /* List of prefixes to try */\n+  int max_len;                /* Max length of a prefix in PLIST */\n+  char *name;                 /* Name of this list (used in config stuff) */\n+};\n+\n+static void my_exit\t\tPROTO((int));\n+static void handler\t\tPROTO((int));\n+static int is_ctor_dtor\t\tPROTO((char *));\n+static void choose_temp_base\tPROTO((void));\n+static int is_in_prefix_list\tPROTO((struct path_prefix *, char *, int));\n+static char *find_a_file\tPROTO((struct path_prefix *, char *));\n+static void add_prefix\t\tPROTO((struct path_prefix *, char *));\n+static void prefix_from_env\tPROTO((char *, struct path_prefix *));\n+static void do_wait\t\tPROTO((char *));\n+static void fork_execute\tPROTO((char *, char **));\n+static void maybe_unlink\tPROTO((char *));\n+static void add_to_list\t\tPROTO((struct head *, char *));\n+static void write_list\t\tPROTO((FILE *, char *, struct id *));\n+static void write_list_with_asm PROTO((FILE *, char *, struct id *));\n+static void write_c_file\tPROTO((FILE *, char *));\n+static void scan_prog_file\tPROTO((char *, enum pass));\n \n generic *xcalloc ();\n generic *xmalloc ();\n@@ -224,6 +258,7 @@ extern char *index ();\n extern char *rindex ();\n \f\n #ifdef NO_DUP2\n+int\n dup2 (oldfd, newfd)\n      int oldfd;\n      int newfd;\n@@ -239,6 +274,8 @@ dup2 (oldfd, newfd)\n     fdtmp[fdx++] = fd;\n   while (fdx > 0)\n     close (fdtmp[--fdx]);\n+\n+  return 0;\n }\n #endif\n \n@@ -473,6 +510,7 @@ choose_temp_base ()\n \n #ifndef HAVE_PUTENV\n \n+int\n putenv (str)\n      char *str;\n {\n@@ -501,15 +539,15 @@ putenv (str)\n       if (!strncmp (str, *envp, name_len))\n \t{\n \t  *envp = str;\n-\t  return;\n+\t  return 0;\n \t}\n     }\n \n   /* Add a new environment variable */\n   environ = (char **) xmalloc (sizeof (char *) * (num_envs+2));\n   *environ = str;\n   bcopy (old_environ, environ+1, sizeof (char *) * (num_envs+1));\n-\n+  return 0;\n #endif\t/* VMS */\n }\n \n@@ -520,22 +558,6 @@ putenv (str)\n #define PATH_SEPARATOR ':'\n #endif\n \n-/* Structure to hold all the directories in which to search for files to\n-   execute.  */\n-\n-struct prefix_list\n-{\n-  char *prefix;               /* String to prepend to the path. */\n-  struct prefix_list *next;   /* Next in linked list. */\n-};\n-\n-struct path_prefix\n-{\n-  struct prefix_list *plist;  /* List of prefixes to try */\n-  int max_len;                /* Max length of a prefix in PLIST */\n-  char *name;                 /* Name of this list (used in config stuff) */\n-};\n-\n /* We maintain two prefix lists: one from COMPILER_PATH environment variable\n    and one from the PATH variable.  */\n \n@@ -1710,21 +1732,15 @@ struct file_info\n };\n \n extern int decode_mach_o_hdr ();\n-\n extern int encode_mach_o_hdr ();\n \n-static void bad_header ();\n-\n-static void print_header ();\n-\n-static void print_load_command ();\n-\n-static void add_func_table ();\n-\n-static struct file_info\t*read_file ();\n-\n-static void end_file ();\n-\n+static void add_func_table\tPROTO((mo_header_t *, load_all_t *,\n+\t\t\t\t       symbol_info_t *, int));\n+static void print_header\tPROTO((mo_header_t *));\n+static void print_load_command\tPROTO((load_union_t*, size_t, int));\n+static void bad_header\t\tPROTO((int));\n+static struct file_info\t*read_file  PROTO((hcar *, int, int));\n+static void end_file\t\tPROTO((struct file_info *));\n \f\n /* OSF/rose specific version to scan the name list of the loaded\n    program for the symbols g++ uses for static constructors and\n@@ -2286,7 +2302,6 @@ read_file (name, fd, rw)\n \n   return p;\n }\n-\n \f\n /* Do anything necessary to write a file back from memory.  */\n "}]}