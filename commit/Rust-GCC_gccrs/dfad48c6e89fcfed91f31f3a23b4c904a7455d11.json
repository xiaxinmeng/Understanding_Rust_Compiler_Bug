{"sha": "dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhZDQ4YzZlODlmY2ZlZDkxZjMxZjNhMjNiNGM5MDRhNzQ1NWQxMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-11-12T01:14:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-11-12T01:14:34Z"}, "message": "re PR libstdc++/12875 (Weird behaviour in basic_filebuf::setbuf())\n\n2003-11-11  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/12875\n\t* include/bits/fstream.tcc (setbuf): Don't do anything\n\tafter open(), in particular don't discard data.\n\t(_M_allocate_internal_buffer): Tweak to not allocate memory\n\tin case the buffer is provided by the user via setbuf.\n\t* include/ext/stdio_filebuf.h: Tweak comment.\n\t* testsuite/27_io/basic_filebuf/setbuf/char/12875-1.cc: New.\n\t* testsuite/27_io/basic_filebuf/setbuf/char/12875-2.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/setbuf/char/2.cc: Tweak, now\n\tsetbuf does nothing after open().\n\t* testsuite/27_io/basic_filebuf/setbuf/char/3.cc: Likewise.\n\nFrom-SVN: r73477", "tree": {"sha": "7871f58252a0edac33cfa8d880d21937f3504787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7871f58252a0edac33cfa8d880d21937f3504787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/comments", "author": null, "committer": null, "parents": [{"sha": "a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5966c9ef9036294c09f0729f9950b90b1d1c3b5"}], "stats": {"total": 195, "additions": 155, "deletions": 40}, "files": [{"sha": "791cee3e85fc8931e731c610a3d5baf35cedaf53", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "patch": "@@ -1,3 +1,17 @@\n+2003-11-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/12875\n+\t* include/bits/fstream.tcc (setbuf): Don't do anything\n+\tafter open(), in particular don't discard data.\n+\t(_M_allocate_internal_buffer): Tweak to not allocate memory\n+\tin case the buffer is provided by the user via setbuf.\n+\t* include/ext/stdio_filebuf.h: Tweak comment.\n+\t* testsuite/27_io/basic_filebuf/setbuf/char/12875-1.cc: New.\n+\t* testsuite/27_io/basic_filebuf/setbuf/char/12875-2.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/setbuf/char/2.cc: Tweak, now\n+\tsetbuf does nothing after open().\n+\t* testsuite/27_io/basic_filebuf/setbuf/char/3.cc: Likewise.\n+\n 2003-11-11  Doug Gregor  <gregod@cs.rpi.edu>\n \n \t* docs/html/debug.html: Document libstdc++ debug mode."}, {"sha": "a2daab5476123b5af3075b0dfe0856c829bc4401", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "patch": "@@ -44,15 +44,15 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     _M_allocate_internal_buffer()\n     {\n-      if (!_M_buf_allocated && this->_M_buf_size)\n+      // Allocate internal buffer only if one doesn't already exist\n+      // (either allocated or provided by the user via setbuf).\n+      if (!_M_buf_allocated && !this->_M_buf)\n \t{\n-\t  // Allocate internal buffer.\n \t  this->_M_buf = new char_type[this->_M_buf_size];\n \t  _M_buf_allocated = true;\n \t}\n     }\n \n-  // Both close and setbuf need to deallocate internal buffers, if it exists.\n   template<typename _CharT, typename _Traits>\n     void\n     basic_filebuf<_CharT, _Traits>::\n@@ -213,8 +213,8 @@ namespace std\n \t  else\n \t    {\n               // Worst-case number of external bytes.\n-              // XXX Not done encoding() == -1.\n-              const int __enc = _M_codecvt->encoding();\n+\t      // XXX Not done encoding() == -1.\n+\t      const int __enc = _M_codecvt->encoding();\n \t      streamsize __blen; // Minimum buffer size.\n \t      streamsize __rlen; // Number of chars to read.\n \t      if (__enc > 0)\n@@ -539,29 +539,22 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     setbuf(char_type* __s, streamsize __n)\n     {\n-      if (!this->is_open() && __s == 0 && __n == 0)\n-\tthis->_M_buf_size = 1;\n-      else if (__s && __n > 0)\n-\t{\n-\t  // This is implementation-defined behavior, and assumes that\n-\t  // an external char_type array of length __n exists and has\n-\t  // been pre-allocated. If this is not the case, things will\n-\t  // quickly blow up. When __n > 1, __n - 1 positions will be\n-\t  // used for the get area, __n - 1 for the put area and 1\n-\t  // position to host the overflow char of a full put area.\n-\t  // When __n == 1, 1 position will be used for the get area\n-\t  // and 0 for the put area, as in the unbuffered case above.\n-\n-\t  // Step 1: Destroy the current internal array.\n-\t  _M_destroy_internal_buffer();\n-\t  \n-\t  // Step 2: Use the external array.\n-\t  this->_M_buf = __s;\n-\t  this->_M_buf_size = __n;\n-\t  _M_reading = false;\n-\t  _M_writing = false;\n-\t  _M_set_buffer(-1);\n-\t}\n+      if (!this->is_open())\n+\tif (__s == 0 && __n == 0)\n+\t  this->_M_buf_size = 1;\n+\telse if (__s && __n > 0)\n+\t  {\n+\t    // This is implementation-defined behavior, and assumes that\n+\t    // an external char_type array of length __n exists and has\n+\t    // been pre-allocated. If this is not the case, things will\n+\t    // quickly blow up. When __n > 1, __n - 1 positions will be\n+\t    // used for the get area, __n - 1 for the put area and 1\n+\t    // position to host the overflow char of a full put area.\n+\t    // When __n == 1, 1 position will be used for the get area\n+\t    // and 0 for the put area, as in the unbuffered case above.\n+\t    this->_M_buf = __s;\n+\t    this->_M_buf_size = __n;\n+\t  }\n       return this; \n     }\n   "}, {"sha": "9e04807b33e0709f7e0c159bd93d852b54f25914", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "patch": "@@ -66,9 +66,7 @@ namespace __gnu_cxx\n        *  @param  fd  An open file descriptor.\n        *  @param  mode  Same meaning as in a standard filebuf.\n        *  @param  del  Whether to close the file on destruction.\n-       *  @param  size  Optimal or preferred size of internal buffer, in bytes.\n-       *                Note that it includes a position for the overflow char,\n-       *                therefore, can't be smaller than 2.\n+       *  @param  size  Optimal or preferred size of internal buffer, in chars.\n        *\n        *  This constructor associates a file stream buffer with an open\n        *  POSIX file descriptor.  Iff @a del is true, then the associated\n@@ -80,10 +78,8 @@ namespace __gnu_cxx\n       /**\n        *  @param  f  An open @c FILE*.\n        *  @param  mode  Same meaning as in a standard filebuf.\n-       *  @param  size  Optimal or preferred size of internal buffer, in bytes.\n-       *                Defaults to system's @c BUFSIZ. Note that it includes\n-       *                a position for the overflow char, therefore, can't be\n-       *                smaller than 2.\n+       *  @param  size  Optimal or preferred size of internal buffer, in chars.\n+       *                Defaults to system's @c BUFSIZ. \n        *\n        *  This constructor associates a file stream buffer with an open\n        *  C @c FILE*.  The @c FILE* will not be automatically closed when the"}, {"sha": "5013b87fcf9138fef5abb3ccc7a7e643d5262dab", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/setbuf/char/12875-1.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F12875-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F12875-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F12875-1.cc?ref=dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <cstdio>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12875\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const char* name = \"tmp_setbuf4\";\n+  static char buf[1024];\n+  \n+  FILE* out = fopen(name, \"w\");\n+  fputs(\"Hello, world\", out);\n+  fclose(out);\n+  \n+  filebuf in;\n+  in.open(name, ios_base::in);\n+  char str[256];\n+  streamsize r = in.sgetn(str, 6);\n+  VERIFY( r == 6 );\n+  VERIFY( !memcmp(str, \"Hello,\", 6) );\n+  in.pubsetbuf(buf, 1024);\n+  r = in.sgetn(str, 6);\n+  VERIFY( r == 6 );\n+  VERIFY( !memcmp(str, \" world\", 6) );\n+  in.close();\n+}\n+\n+// libstdc++/12875\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c50a5ed4a1279d51b84af27e4111017f4101c3db", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/setbuf/char/12875-2.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F12875-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F12875-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F12875-2.cc?ref=dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <cstdio>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12875\n+void test02()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const char* name = \"tmp_setbuf5\";\n+  static char buf[1024];\n+  \n+  filebuf out;\n+  out.open(name, ios_base::out);\n+  streamsize r = out.sputn(\"Hello,\", 6);\n+  VERIFY( r == 6 );\n+  out.pubsetbuf(buf, 1024);\n+  r = out.sputn(\" world\", 6);\n+  VERIFY( r == 6 );\n+  VERIFY( out.close() );\n+  \n+  FILE* in = fopen(name, \"r\");\n+  char str[256];\n+  fgets(str, 256, in);\n+  VERIFY( !strcmp(str, \"Hello, world\") );\n+  fclose(in);\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "524935a1c84077d16eb5b81ddad3fc27aaab8f1c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/setbuf/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F2.cc?ref=dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "patch": "@@ -32,8 +32,8 @@ void test01()\n   const char* strlit = \"how to tell a story and other essays: mark twain\";\n   const size_t strlitsize = std::strlen(strlit);\n   filebuf fbuf;\n-  fbuf.open(\"tmp_setbuf2\", ios_base::out);\n   fbuf.pubsetbuf(buf, 512);\n+  fbuf.open(\"tmp_setbuf2\", ios_base::out);\n   fbuf.sputn(strlit, strlitsize);\n   VERIFY( std::strncmp(strlit, buf, strlitsize) == 0 );\n }"}, {"sha": "11702dc03365e5e3eb4d7356b05f51e17343775b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/setbuf/char/3.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfad48c6e89fcfed91f31f3a23b4c904a7455d11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F3.cc?ref=dfad48c6e89fcfed91f31f3a23b4c904a7455d11", "patch": "@@ -23,7 +23,7 @@\n #include <fstream>\n #include <testsuite_hooks.h>\n \n-void test02()\n+void test03()\n {\n   using namespace std;\n \n@@ -32,17 +32,17 @@ void test02()\n   const char* strlit = \"how to tell a story and other essays: mark twain\";\n   const size_t strlitsize = std::strlen(strlit);\n   filebuf fbuf01;\n-  fbuf01.open(\"tmp\", ios_base::out);\n-\n   // NB: +2 otherwise sputn is optimized to a direct write,\n   // bypassing the buffer.\n   fbuf01.pubsetbuf(buf, strlitsize + 2);\n+  fbuf01.open(\"tmp_setbuf3\", ios_base::out);\n+\n   fbuf01.sputn(strlit, strlitsize);\n   VERIFY( std::strncmp(strlit, buf, strlitsize) == 0 );\n }\n \n int main() \n {\n-  test02();\n+  test03();\n   return 0;\n }"}]}