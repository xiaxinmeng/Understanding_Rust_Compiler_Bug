{"sha": "350792ffaed9b3506582b471bf133459d7ea64ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUwNzkyZmZhZWQ5YjM1MDY1ODJiNDcxYmYxMzM0NTlkN2VhNjRhYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-12T07:35:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-12T07:35:49Z"}, "message": "re PR target/79671 (mapnik miscompilation on armv7hl since r235622)\n\n2017-04-12  Richard Biener  <rguenther@suse.de>\n\tBernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR middle-end/79671\n\t* alias.c (component_uses_parent_alias_set_from): Handle\n\tTYPE_TYPELESS_STORAGE.\n\t(get_alias_set): Likewise.\n\t* tree-core.h (tree_type_common): Add typeless_storage flag.\n\t* tree.h (TYPE_TYPELESS_STORAGE): New macro.\n\t* stor-layout.c (place_union_field): Set TYPE_TYPELESS_STORAGE\n\tfor types containing members with TYPE_TYPELESS_STORAGE.\n\t(place_field): Likewise.\n\t(layout_type): Likewise for ARRAY_TYPE.\n\t* lto-streamer-out.c (hash_tree): Hash TYPE_TYPELESS_STORAGE.\n\t* tree-streamer-in.c (unpack_ts_type_common_value_fields): Stream\n\tTYPE_TYPELESS_STORAGE.\n\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Likewise.\n\n\tlto/\n\t* lto.c (compare_tree_sccs_1): Compare TYPE_TYPELESS_STORAGE.\n\n\tcp/\n\t* tree.c (build_cplus_array_type): Set TYPE_TYPELESS_STORAGE\n\tfor arrays of character or std::byte type.\n\n\t* g++.dg/torture/pr79671.C: New testcase.\n\t* g++.dg/lto/pr79671_0.C: Likewise.\n\t* g++.dg/lto/pr79671_1.c: Likewise.\n\nCo-Authored-By: Bernd Edlinger <bernd.edlinger@hotmail.de>\n\nFrom-SVN: r246866", "tree": {"sha": "f06c2718f7e849e343f4476cdd4b96146c1d52d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f06c2718f7e849e343f4476cdd4b96146c1d52d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/350792ffaed9b3506582b471bf133459d7ea64ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/350792ffaed9b3506582b471bf133459d7ea64ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/350792ffaed9b3506582b471bf133459d7ea64ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/350792ffaed9b3506582b471bf133459d7ea64ab/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d62e6f1078dd62f6e8937d1f48f1f77f0a78e19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62e6f1078dd62f6e8937d1f48f1f77f0a78e19e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62e6f1078dd62f6e8937d1f48f1f77f0a78e19e"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "91a3e45c7841e1959b4c422e3cac36deb5e92bbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -1,3 +1,21 @@\n+2017-04-12  Richard Biener  <rguenther@suse.de>\n+\tBernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/79671\n+\t* alias.c (component_uses_parent_alias_set_from): Handle\n+\tTYPE_TYPELESS_STORAGE.\n+\t(get_alias_set): Likewise.\n+\t* tree-core.h (tree_type_common): Add typeless_storage flag.\n+\t* tree.h (TYPE_TYPELESS_STORAGE): New macro.\n+\t* stor-layout.c (place_union_field): Set TYPE_TYPELESS_STORAGE\n+\tfor types containing members with TYPE_TYPELESS_STORAGE.\n+\t(place_field): Likewise.\n+\t(layout_type): Likewise for ARRAY_TYPE.\n+\t* lto-streamer-out.c (hash_tree): Hash TYPE_TYPELESS_STORAGE.\n+\t* tree-streamer-in.c (unpack_ts_type_common_value_fields): Stream\n+\tTYPE_TYPELESS_STORAGE.\n+\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Likewise.\n+\n 2017-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/80349"}, {"sha": "efd89ce1679aff088dc3df20bac7b84d3727274f", "filename": "gcc/alias.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -613,6 +613,10 @@ component_uses_parent_alias_set_from (const_tree t)\n {\n   const_tree found = NULL_TREE;\n \n+  if (AGGREGATE_TYPE_P (TREE_TYPE (t))\n+      && TYPE_TYPELESS_STORAGE (TREE_TYPE (t)))\n+    return const_cast <tree> (t);\n+\n   while (handled_component_p (t))\n     {\n       switch (TREE_CODE (t))\n@@ -883,6 +887,10 @@ get_alias_set (tree t)\n      variant.  */\n   t = TYPE_MAIN_VARIANT (t);\n \n+  if (AGGREGATE_TYPE_P (t)\n+      && TYPE_TYPELESS_STORAGE (t))\n+    return 0;\n+\n   /* Always use the canonical type as well.  If this is a type that\n      requires structural comparisons to identify compatible types\n      use alias set zero.  */"}, {"sha": "9997825e8057db33325cf09199a5d65181ec5c47", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -1,3 +1,10 @@\n+2017-04-12  Richard Biener  <rguenther@suse.de>\n+\tBernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/79671\n+\t* tree.c (build_cplus_array_type): Set TYPE_TYPELESS_STORAGE\n+\tfor arrays of character or std::byte type.\n+\n 2017-04-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/80294 - ICE with constexpr and inheritance."}, {"sha": "2edd5671c08f5564d8d6ae4bdcb2b9b7e6c473c5", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -949,6 +949,13 @@ build_cplus_array_type (tree elt_type, tree index_type)\n   else\n     {\n       t = build_array_type (elt_type, index_type);\n+      if (elt_type == unsigned_char_type_node\n+\t  || elt_type == signed_char_type_node\n+\t  || elt_type == char_type_node\n+\t  || (TREE_CODE (elt_type) == ENUMERAL_TYPE\n+\t      && TYPE_CONTEXT (elt_type) == std_node\n+\t      && !strcmp (\"byte\", TYPE_NAME_STRING (elt_type))))\n+\tTYPE_TYPELESS_STORAGE (t) = 1;\n     }\n \n   /* Now check whether we already have this array variant.  */\n@@ -972,6 +979,7 @@ build_cplus_array_type (tree elt_type, tree index_type)\n \t\t as it will overwrite alignment etc. of all variants.  */\n \t      TYPE_SIZE (t) = TYPE_SIZE (m);\n \t      TYPE_SIZE_UNIT (t) = TYPE_SIZE_UNIT (m);\n+\t      TYPE_TYPELESS_STORAGE (t) = TYPE_TYPELESS_STORAGE (m);\n \t    }\n \n \t  TYPE_MAIN_VARIANT (t) = m;"}, {"sha": "b96b9df63b75dcdbaa493e47fb1e32f798980c6a", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -1143,6 +1143,8 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n \t}\n       else if (code == ARRAY_TYPE)\n \thstate.add_flag (TYPE_NONALIASED_COMPONENT (t));\n+      if (AGGREGATE_TYPE_P (t))\n+\thstate.add_flag (TYPE_TYPELESS_STORAGE (t));\n       hstate.commit_flag ();\n       hstate.add_int (TYPE_PRECISION (t));\n       hstate.add_int (TYPE_ALIGN (t));"}, {"sha": "d24dd0cfa0f43f54b2cddc48e122e1e450969af1", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -1,3 +1,9 @@\n+2017-04-12  Richard Biener  <rguenther@suse.de>\n+\tBernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/79671\n+\t* lto.c (compare_tree_sccs_1): Compare TYPE_TYPELESS_STORAGE.\n+\n 2017-02-14  Martin Liska  <mliska@suse.cz>\n \n \t* lto.c (do_stream_out): Free LTO file filename string."}, {"sha": "a7d5e450ea0b0ae025dca03a660210a1b1fd0f45", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -1162,6 +1162,8 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n \t}\n       else if (code == ARRAY_TYPE)\n \tcompare_values (TYPE_NONALIASED_COMPONENT);\n+      if (AGGREGATE_TYPE_P (t1))\n+\tcompare_values (TYPE_TYPELESS_STORAGE);\n       compare_values (TYPE_PACKED);\n       compare_values (TYPE_RESTRICT);\n       compare_values (TYPE_USER_ALIGN);"}, {"sha": "10e9a324940f4ab5f62a0808c6c09e8e6e9f4c77", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -1091,6 +1091,10 @@ place_union_field (record_layout_info rli, tree field)\n   if (TREE_CODE (TREE_TYPE (field)) == ERROR_MARK)\n     return;\n \n+  if (AGGREGATE_TYPE_P (TREE_TYPE (field))\n+      && TYPE_TYPELESS_STORAGE (TREE_TYPE (field)))\n+    TYPE_TYPELESS_STORAGE (rli->t) = 1;\n+\n   /* We assume the union's size will be a multiple of a byte so we don't\n      bother with BITPOS.  */\n   if (TREE_CODE (rli->t) == UNION_TYPE)\n@@ -1168,6 +1172,10 @@ place_field (record_layout_info rli, tree field)\n       return;\n     }\n \n+  if (AGGREGATE_TYPE_P (type)\n+      && TYPE_TYPELESS_STORAGE (type))\n+    TYPE_TYPELESS_STORAGE (rli->t) = 1;\n+\n   /* Work out the known alignment so far.  Note that A & (-A) is the\n      value of the least-significant bit in A that is one.  */\n   if (! integer_zerop (rli->bitpos))\n@@ -2340,6 +2348,8 @@ layout_type (tree type)\n \t\tSET_TYPE_MODE (type, BLKmode);\n \t      }\n \t  }\n+\tif (AGGREGATE_TYPE_P (element))\n+\t  TYPE_TYPELESS_STORAGE (type) = TYPE_TYPELESS_STORAGE (element);\n \t/* When the element size is constant, check that it is at least as\n \t   large as the element alignment.  */\n \tif (TYPE_SIZE_UNIT (element)"}, {"sha": "115e1233dc00547a0055d314c5f550fe3210a48f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -1,3 +1,11 @@\n+2017-04-12  Richard Biener  <rguenther@suse.de>\n+\tBernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/79671\n+\t* g++.dg/torture/pr79671.C: New testcase.\n+\t* g++.dg/lto/pr79671_0.C: Likewise.\n+\t* g++.dg/lto/pr79671_1.c: Likewise.\n+\n 2017-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/80349"}, {"sha": "a55a57fd79a80782beadc2d09d918020f99109bc", "filename": "gcc/testsuite/g++.dg/lto/pr79671_0.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr79671_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr79671_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr79671_0.C?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -0,0 +1,26 @@\n+// { dg-lto-do run }\n+\n+void *operator new(__SIZE_TYPE__, void *p2) { return p2; }\n+struct B { B(int i_) : i(i_) {} int i; };\n+struct X\n+{\n+  unsigned char buf[sizeof (B)];\n+};\n+\n+int __attribute__((noinline)) foo()\n+{\n+  X x alignas (B), y alignas (B);\n+  new (&x) B (0);\n+  y = x;\n+  B *q = reinterpret_cast <B *>(&y);\n+  asm volatile (\"\" : \"=r\" (q) : \"r\" (q));\n+  return q->i;\n+}\n+extern \"C\" void bar ();\n+int main()\n+{\n+  if (foo() != 0)\n+    __builtin_abort ();\n+  bar ();\n+  return 0;\n+}"}, {"sha": "934cb2d63f5d173f62a8b38f6afa30fdee91a200", "filename": "gcc/testsuite/g++.dg/lto/pr79671_1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr79671_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr79671_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr79671_1.c?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -0,0 +1,5 @@\n+struct X\n+{\n+  unsigned char buf[sizeof (int)];\n+};\n+void bar () { struct X x; *(volatile char *)x.buf = 1; }"}, {"sha": "94605851ff14f8486fae598d706d117428e0853d", "filename": "gcc/testsuite/g++.dg/torture/pr79671.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr79671.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr79671.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr79671.C?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do run }\n+\n+void *operator new(__SIZE_TYPE__, void *p2) { return p2; }\n+struct B { B(int i_) : i(i_) {} int i; };\n+struct X\n+{\n+  unsigned char buf[sizeof (B)];\n+};\n+\n+int __attribute__((noinline)) foo()\n+{\n+  X x alignas(B), y alignas(B);\n+  new (&x) B (0);\n+  y = x;\n+  B *q = reinterpret_cast <B *>(&y);\n+  asm volatile (\"\" : \"=r\" (q) : \"r\" (q));\n+  return q->i;\n+}\n+\n+int main()\n+{\n+  if (foo() != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "a646ecb5c951869fa8bfa3af11c524414c0c6c3b", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -1511,7 +1511,9 @@ struct GTY(()) tree_type_common {\n      so we need to store the value 32 (not 31, as we need the zero\n      as well), hence six bits.  */\n   unsigned align : 6;\n-  unsigned spare : 25;\n+  unsigned typeless_storage : 1;\n+  unsigned spare : 24;\n+\n   alias_set_type alias_set;\n   tree pointer_to;\n   tree reference_to;"}, {"sha": "f0099c050325b87fe55b6de91cc8d9d4cef628a5", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -376,6 +376,8 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n     }\n   else if (TREE_CODE (expr) == ARRAY_TYPE)\n     TYPE_NONALIASED_COMPONENT (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  if (AGGREGATE_TYPE_P (expr))\n+    TYPE_TYPELESS_STORAGE (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_PRECISION (expr) = bp_unpack_var_len_unsigned (bp);\n   SET_TYPE_ALIGN (expr, bp_unpack_var_len_unsigned (bp));\n #ifdef ACCEL_COMPILER"}, {"sha": "5cf904493410e78ed08b2034089473d2e25c9afd", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -328,6 +328,8 @@ pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n     }\n   else if (TREE_CODE (expr) == ARRAY_TYPE)\n     bp_pack_value (bp, TYPE_NONALIASED_COMPONENT (expr), 1);\n+  if (AGGREGATE_TYPE_P (expr))\n+    bp_pack_value (bp, TYPE_TYPELESS_STORAGE (expr), 1);\n   bp_pack_var_len_unsigned (bp, TYPE_PRECISION (expr));\n   bp_pack_var_len_unsigned (bp, TYPE_ALIGN (expr));\n }"}, {"sha": "50a674bf0fef6d216ce9d704e3b5e9e0b952c950", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350792ffaed9b3506582b471bf133459d7ea64ab/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=350792ffaed9b3506582b471bf133459d7ea64ab", "patch": "@@ -2035,6 +2035,13 @@ extern machine_mode element_mode (const_tree t);\n #define TYPE_NONALIASED_COMPONENT(NODE) \\\n   (ARRAY_TYPE_CHECK (NODE)->type_common.transparent_aggr_flag)\n \n+/* For an ARRAY_TYPE, a RECORD_TYPE, a UNION_TYPE or a QUAL_UNION_TYPE\n+   whether the array is typeless storage or the type contains a member\n+   with this flag set.  Such types are excempt from type-based alias\n+   analysis.  */\n+#define TYPE_TYPELESS_STORAGE(NODE) \\\n+  (TREE_CHECK4 (NODE, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE, ARRAY_TYPE)->type_common.typeless_storage)\n+\n /* Indicated that objects of this type should be laid out in as\n    compact a way as possible.  */\n #define TYPE_PACKED(NODE) (TYPE_CHECK (NODE)->base.u.bits.packed_flag)"}]}