{"sha": "2b4fa409a97f9d398698dff291e4e7176747d6b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI0ZmE0MDlhOTdmOWQzOTg2OThkZmYyOTFlNGU3MTc2NzQ3ZDZiNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-23T22:24:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-23T22:24:42Z"}, "message": "tm.texi (STATIC_CHAIN, [...]): Remove.\n\n        * doc/tm.texi (STATIC_CHAIN, STATIC_CHAIN_INCOMING): Remove.\n        (TARGET_STATIC_CHAIN): Mention that this hook must be used for\n        static chain passed in memory.\n        * system.h (STATIC_CHAIN, STATIC_CHAIN_INCOMING): Poison.\n        * targhooks.c (default_static_chain): Don't handle STATIC_CHAIN,\n        STATIC_CHAIN_INCOMING.  Issue a sorry if there's no\n        STATIC_CHAIN_REGNUM defined.\n\n        * config/picochip/picochip-protos.h: s/class/klass/.\n        * config/picochip/picochip.c (TARGET_STATIC_CHAIN): New.\n        (picochip_static_chain): New.\n        * config/picochip/picochip.h (STATIC_CHAIN): Remove.\n        (STATIC_CHAIN_INCOMING): Remove.\n\n        * config/xtensa/xtensa.c (TARGET_STATIC_CHAIN): New.\n        (xtensa_static_chain): New.\n        * config/xtensa/xtensa.h (STATIC_CHAIN, STATIC_CHAIN_INCOMING):\n        * Remove.\n\nFrom-SVN: r152104", "tree": {"sha": "321b9eb874c077b9b7674eb07850055b8825fc48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/321b9eb874c077b9b7674eb07850055b8825fc48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b4fa409a97f9d398698dff291e4e7176747d6b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4fa409a97f9d398698dff291e4e7176747d6b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4fa409a97f9d398698dff291e4e7176747d6b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4fa409a97f9d398698dff291e4e7176747d6b4/comments", "author": null, "committer": null, "parents": [{"sha": "9193312a099c192f134768d0567fb5d29107a796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9193312a099c192f134768d0567fb5d29107a796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9193312a099c192f134768d0567fb5d29107a796"}], "stats": {"total": 132, "additions": 77, "deletions": 55}, "files": [{"sha": "862f4bf0d9bfa791e4a70a880497049b0e388aff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b4fa409a97f9d398698dff291e4e7176747d6b4", "patch": "@@ -1,3 +1,23 @@\n+2009-09-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* doc/tm.texi (STATIC_CHAIN, STATIC_CHAIN_INCOMING): Remove.\n+\t(TARGET_STATIC_CHAIN): Mention that this hook must be used for\n+\tstatic chain passed in memory.\n+\t* system.h (STATIC_CHAIN, STATIC_CHAIN_INCOMING): Poison.\n+\t* targhooks.c (default_static_chain): Don't handle STATIC_CHAIN,\n+\tSTATIC_CHAIN_INCOMING.  Issue a sorry if there's no\n+\tSTATIC_CHAIN_REGNUM defined.\n+\n+\t* config/picochip/picochip-protos.h: s/class/klass/.\n+\t* config/picochip/picochip.c (TARGET_STATIC_CHAIN): New.\n+\t(picochip_static_chain): New.\n+\t* config/picochip/picochip.h (STATIC_CHAIN): Remove.\n+\t(STATIC_CHAIN_INCOMING): Remove.\n+\n+\t* config/xtensa/xtensa.c (TARGET_STATIC_CHAIN): New.\n+\t(xtensa_static_chain): New.\n+\t* config/xtensa/xtensa.h (STATIC_CHAIN, STATIC_CHAIN_INCOMING): Remove.\n+\n 2009-09-23  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/pa/pa.h (FUNCTION_VALUE): Remove macro."}, {"sha": "de68c81d458bb5213beeae929a19b12d319706d4", "filename": "gcc/config/picochip/picochip-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h?ref=2b4fa409a97f9d398698dff291e4e7176747d6b4", "patch": "@@ -60,7 +60,7 @@ extern CUMULATIVE_ARGS picochip_arg_advance (CUMULATIVE_ARGS cum, int mode,\n \t\t\t\t      tree type, int named);\n \n extern int picochip_regno_nregs (int regno, int mode);\n-extern int picochip_class_max_nregs (int class, int mode);\n+extern int picochip_class_max_nregs (int klass, int mode);\n \n extern void picochip_order_regs_for_local_alloc (void);\n "}, {"sha": "bf6d263994c0695b3b79b2bb4fdadbe97432428d", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=2b4fa409a97f9d398698dff291e4e7176747d6b4", "patch": "@@ -111,6 +111,8 @@ picochip_asm_named_section (const char *name,\n \t\t\t    unsigned int flags ATTRIBUTE_UNUSED,\n \t\t\t    tree decl ATTRIBUTE_UNUSED);\n \n+static rtx picochip_static_chain (const_tree, bool);\n+\n /* Lookup table mapping a register number to the earliest containing\n    class.  Used by REGNO_REG_CLASS.  */\n const enum reg_class picochip_regno_reg_class[FIRST_PSEUDO_REGISTER] =\n@@ -289,6 +291,9 @@ static char picochip_get_vliw_alu_id (void);\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY picochip_return_in_memory\n \n+#undef TARGET_STATIC_CHAIN\n+#define TARGET_STATIC_CHAIN picochip_static_chain\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n@@ -4402,3 +4407,14 @@ picochip_check_conditional_copy (rtx * operands)\n \n }\n \n+\f\n+static rtx\n+picochip_static_chain (const_tree ARG_UNUSED (fndecl), bool incoming_p)\n+{\n+  rtx addr;\n+  if (incoming_p)\n+    addr = arg_pointer_rtx;\n+  else\n+    addr = plus_constant (stack_pointer_rtx, -2 * UNITS_PER_WORD);\n+  return gen_frame_mem (Pmode, addr);\n+}"}, {"sha": "44559f22333ac1d0b706c86a641488a89fc4de19", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=2b4fa409a97f9d398698dff291e4e7176747d6b4", "patch": "@@ -391,20 +391,6 @@ extern const enum reg_class picochip_regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define FRAME_POINTER_REGNUM 18\n #define ARG_POINTER_REGNUM   19\n \n-/* Static chain is used to pass the local variables of the enclosing function.\n-   The static chain is passed in memory. The first long-word location\n-   beneath the stack pointer is used. In the presence of pretend\n-   arguments, which are written into that location, this mechanism\n-   complicates matters. */\n-\n-/* Location seen by the caller. */\n-#define STATIC_CHAIN\t\t\t\t\t\t\t\\\n-  gen_rtx_MEM (Pmode, plus_constant (stack_pointer_rtx, -2 * UNITS_PER_WORD))\n-\n-/* Location seen by the callee. */\n-#define STATIC_CHAIN_INCOMING\t\t\t\t\t\t\\\n-  gen_rtx_MEM (Pmode, plus_constant (arg_pointer_rtx, 0))\n-\n /* Eliminating Frame Pointer and Arg Pointer.  The frame and argument\n    pointers are eliminated wherever possible, by replacing them with\n    offsets from the stack pointer. */"}, {"sha": "f7b73748b7627c8f93d120e75e10c154f112da8e", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=2b4fa409a97f9d398698dff291e4e7176747d6b4", "patch": "@@ -146,6 +146,7 @@ static tree xtensa_fold_builtin (tree, tree, bool);\n static rtx xtensa_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void xtensa_va_start (tree, rtx);\n static bool xtensa_frame_pointer_required (void);\n+static rtx xtensa_static_chain (const_tree, bool);\n static void xtensa_asm_trampoline_template (FILE *);\n static void xtensa_trampoline_init (rtx, tree, rtx);\n \n@@ -231,6 +232,8 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED xtensa_frame_pointer_required\n \n+#undef TARGET_STATIC_CHAIN\n+#define TARGET_STATIC_CHAIN xtensa_static_chain\n #undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE xtensa_asm_trampoline_template\n #undef TARGET_TRAMPOLINE_INIT\n@@ -3434,6 +3437,17 @@ xtensa_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n                      outgoing ? GP_OUTGOING_RETURN : GP_RETURN);\n }\n \n+/* The static chain is passed in memory.  Provide rtx giving 'mem'\n+   expressions that denote where they are stored.  */\n+\n+static rtx\n+xtensa_static_chain (const_tree ARG_UNUSED (fndecl), bool incoming_p)\n+{\n+  rtx base = incoming_p ? arg_pointer_rtx : stack_pointer_rtx;\n+  return gen_frame_mem (Pmode, plus_constant (base, -5 * UNITS_PER_WORD));\n+}\n+\n+\n /* TRAMPOLINE_TEMPLATE: For Xtensa, the trampoline must perform an ENTRY\n    instruction with a minimal stack frame in order to get some free\n    registers.  Once the actual call target is known, the proper stack frame"}, {"sha": "b9d896a95104663b82c75b3c14fdc41a015e755f", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=2b4fa409a97f9d398698dff291e4e7176747d6b4", "patch": "@@ -383,17 +383,6 @@ extern char xtensa_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM (GP_REG_FIRST + 17)\n \n-/* If the static chain is passed in memory, these macros provide rtx\n-   giving 'mem' expressions that denote where they are stored.\n-   'STATIC_CHAIN' and 'STATIC_CHAIN_INCOMING' give the locations as\n-   seen by the calling and called functions, respectively.  */\n-\n-#define STATIC_CHAIN\t\t\t\t\t\t\t\\\n-  gen_rtx_MEM (Pmode, plus_constant (stack_pointer_rtx, -5 * UNITS_PER_WORD))\n-\n-#define STATIC_CHAIN_INCOMING\t\t\t\t\t\t\\\n-  gen_rtx_MEM (Pmode, plus_constant (arg_pointer_rtx, -5 * UNITS_PER_WORD))\n-\n /* For now we don't try to use the full set of boolean registers.  Without\n    software pipelining of FP operations, there's not much to gain and it's\n    a real pain to get them reloaded.  */"}, {"sha": "27263d91c590a1351eac2d341506d6c6f51c1942", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2b4fa409a97f9d398698dff291e4e7176747d6b4", "patch": "@@ -3661,27 +3661,7 @@ not be defined.\n The static chain register need not be a fixed register.\n \n If the static chain is passed in memory, these macros should not be\n-defined; instead, the next two macros should be defined.\n-@end defmac\n-\n-@defmac STATIC_CHAIN\n-@defmacx STATIC_CHAIN_INCOMING\n-If the static chain is passed in memory, these macros provide rtx giving\n-@code{mem} expressions that denote where they are stored.\n-@code{STATIC_CHAIN} and @code{STATIC_CHAIN_INCOMING} give the locations\n-as seen by the calling and called functions, respectively.  Often the former\n-will be at an offset from the stack pointer and the latter at an offset from\n-the frame pointer.\n-\n-@findex stack_pointer_rtx\n-@findex frame_pointer_rtx\n-@findex arg_pointer_rtx\n-The variables @code{stack_pointer_rtx}, @code{frame_pointer_rtx}, and\n-@code{arg_pointer_rtx} will have been initialized prior to the use of these\n-macros and should be used to refer to those items.\n-\n-If the static chain is passed in a register, the two previous macros should\n-be defined instead.\n+defined; instead, the @code{TARGET_STATIC_CHAIN} hook should be used.\n @end defmac\n \n @deftypefn {Target Hook} rtx TARGET_STATIC_CHAIN (const_tree @var{fndecl}, bool @var{incoming_p})\n@@ -3692,6 +3672,18 @@ attributes that affect the calling conventions of the function and\n those calling conventions use different static chain locations.\n \n The default version of this hook uses @code{STATIC_CHAIN_REGNUM} et al.\n+\n+If the static chain is passed in memory, this hook should be used to\n+provide rtx giving @code{mem} expressions that denote where they are stored.\n+Often the @code{mem} expression as seen by the caller will be at an offset\n+from the stack pointer and the @code{mem} expression as seen by the callee\n+will be at an offset from the frame pointer.\n+@findex stack_pointer_rtx\n+@findex frame_pointer_rtx\n+@findex arg_pointer_rtx\n+The variables @code{stack_pointer_rtx}, @code{frame_pointer_rtx}, and\n+@code{arg_pointer_rtx} will have been initialized and should be used\n+to refer to those items.\n @end deftypefn\n \n @defmac DWARF_FRAME_REGISTERS"}, {"sha": "0c846cfbdd63bf63e7cba964218482c9c0aac9b9", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=2b4fa409a97f9d398698dff291e4e7176747d6b4", "patch": "@@ -708,7 +708,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tFUNCTION_ARG_PARTIAL_NREGS ASM_OUTPUT_DWARF_DTPREL\t\t\\\n \tALLOCATE_INITIAL_VALUE LEGITIMIZE_ADDRESS FRAME_POINTER_REQUIRED \\\n \tCAN_ELIMINATE TRAMPOLINE_TEMPLATE INITIALIZE_TRAMPOLINE\t\t\\\n-\tTRAMPOLINE_ADJUST_ADDRESS\n+\tTRAMPOLINE_ADJUST_ADDRESS STATIC_CHAIN STATIC_CHAIN_INCOMING\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "8a2e56bab166208b9a62a5ea00866fe70e6666b2", "filename": "gcc/targhooks.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4fa409a97f9d398698dff291e4e7176747d6b4/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=2b4fa409a97f9d398698dff291e4e7176747d6b4", "patch": "@@ -636,22 +636,27 @@ default_static_chain (const_tree fndecl, bool incoming_p)\n \n   if (incoming_p)\n     {\n-#ifdef STATIC_CHAIN_INCOMING\n-      return STATIC_CHAIN_INCOMING;\n-#endif\n #ifdef STATIC_CHAIN_INCOMING_REGNUM\n       return gen_rtx_REG (Pmode, STATIC_CHAIN_INCOMING_REGNUM);\n #endif\n     }\n \n-#ifdef STATIC_CHAIN\n-  return STATIC_CHAIN;\n-#endif\n #ifdef STATIC_CHAIN_REGNUM\n   return gen_rtx_REG (Pmode, STATIC_CHAIN_REGNUM);\n #endif\n \n-  gcc_unreachable ();\n+  {\n+    static bool issued_error;\n+    if (!issued_error)\n+      {\n+\tissued_error = true;\n+\tsorry (\"nested functions not supported on this target\");\n+      }\n+\n+    /* It really doesn't matter what we return here, so long at it\n+       doesn't cause the rest of the compiler to crash.  */\n+    return gen_rtx_MEM (Pmode, stack_pointer_rtx);\n+  }\n }\n \n void"}]}