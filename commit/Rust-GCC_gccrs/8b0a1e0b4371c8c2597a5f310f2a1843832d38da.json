{"sha": "8b0a1e0b4371c8c2597a5f310f2a1843832d38da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwYTFlMGI0MzcxYzhjMjU5N2E1ZjMxMGYyYTE4NDM4MzJkMzhkYQ==", "commit": {"author": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2013-01-16T08:29:54Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2013-01-16T08:29:54Z"}, "message": "re PR target/55301 ([SH] broken sp_switch function attribute)\n\nPR target/55301\n* config/sh/sh.c (sh_expand_prologue): Postpone new_stack mem symbol.\n(broken_move): Handle UNSPECV_SP_SWITCH_B.\n* config/sh/sh.md (sp_switch_1): Use set (reg:SI SP_REG).\n\n* config/sh/sh.md (UNSPECV_SP_SWITCH_B): New.\n(UNSPECV_SP_SWITCH_E): New.\n(sp_switch_1): Change to an unspec.\n(sp_switch_2): Change to an unspec.  Don't use post-inc when we\nreplace $r15.\n\n* gcc.target/sh/sh-switch.c: New testcase.\n\nFrom-SVN: r195230", "tree": {"sha": "857fdfe16236f5fe35daa750a92b7fbbe40b29ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/857fdfe16236f5fe35daa750a92b7fbbe40b29ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b0a1e0b4371c8c2597a5f310f2a1843832d38da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0a1e0b4371c8c2597a5f310f2a1843832d38da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0a1e0b4371c8c2597a5f310f2a1843832d38da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/comments", "author": null, "committer": null, "parents": [{"sha": "19006c45f5153e69530a26b8dc35ae255aa118c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19006c45f5153e69530a26b8dc35ae255aa118c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19006c45f5153e69530a26b8dc35ae255aa118c7"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "3d1dcbdddd6a4f24931fd85a91440cef59913bee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b0a1e0b4371c8c2597a5f310f2a1843832d38da", "patch": "@@ -1,4 +1,19 @@\n-2013-01-15  Uros Bizjak  <ubizjak@gmail.com>\n+2013-01-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/55301\n+\t* config/sh/sh.c (sh_expand_prologue): Postpone new_stack mem symbol.\n+\t(broken_move): Handle UNSPECV_SP_SWITCH_B.\n+\t* config/sh/sh.md (sp_switch_1): Use set (reg:SI SP_REG).\n+\n+2013-01-16  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/sh/sh.md (UNSPECV_SP_SWITCH_B): New.\n+\t(UNSPECV_SP_SWITCH_E): New.\n+\t(sp_switch_1): Change to an unspec.\n+\t(sp_switch_2): Change to an unspec.  Don't use post-inc when we\n+\treplace $r15.\n+\n+2013-01-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* emit-rtl.c (need_atomic_barrier_p): Mask memory model argument\n \twith MEMMODEL_MASK before comparing with MEMMODEL_* memory types."}, {"sha": "0d0dcb54af0bf44181f31461306a6071ae3ab62a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=8b0a1e0b4371c8c2597a5f310f2a1843832d38da", "patch": "@@ -4926,6 +4926,8 @@ broken_move (rtx insn)\n \t     order bits end up as.  */\n \t  && GET_MODE (SET_DEST (pat)) != QImode\n \t  && (CONSTANT_P (SET_SRC (pat))\n+\t      || (GET_CODE (SET_SRC (pat)) == UNSPEC_VOLATILE\n+\t\t  && XINT (SET_SRC (pat), 1) ==  UNSPECV_SP_SWITCH_B)\n \t      /* Match mova_const.  */\n \t      || (GET_CODE (SET_SRC (pat)) == UNSPEC\n \t\t  && XINT (SET_SRC (pat), 1) == UNSPEC_MOVA\n@@ -6422,6 +6424,14 @@ sh_reorg (void)\n \t\t\t\t\t       gen_rtvec (1, newsrc),\n \t\t\t\t\t       UNSPEC_MOVA);\n \t\t    }\n+\t\t  else if (GET_CODE (src) == UNSPEC_VOLATILE\n+\t\t\t   && XINT (src, 1) == UNSPECV_SP_SWITCH_B)\n+\t\t    {\n+\t\t      newsrc = XVECEXP (src, 0, 0);\n+\t\t      XVECEXP (src, 0, 0) = gen_const_mem (mode, newsrc);\n+\t\t      INSN_CODE (scan) = -1;\n+\t\t      continue;\n+\t\t    }\n \t\t  else\n \t\t    {\n \t\t      lab = add_constant (src, mode, 0);\n@@ -7624,7 +7634,6 @@ sh_expand_prologue (void)\n \n       lab = add_constant (sp_switch, SImode, 0);\n       newsrc = gen_rtx_LABEL_REF (VOIDmode, lab);\n-      newsrc = gen_const_mem (SImode, newsrc);\n \n       emit_insn (gen_sp_switch_1 (newsrc));\n     }"}, {"sha": "02e9f990f4419e5371f1489872d9b532aa27b59b", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=8b0a1e0b4371c8c2597a5f310f2a1843832d38da", "patch": "@@ -174,6 +174,8 @@\n   (UNSPECV_CONST_END\t11)\n   (UNSPECV_EH_RETURN\t12)\n   (UNSPECV_GBR\t\t13)\n+  (UNSPECV_SP_SWITCH_B  14)\n+  (UNSPECV_SP_SWITCH_E  15)\n ])\n \n ;; -------------------------------------------------------------------------\n@@ -13587,7 +13589,8 @@ label:\n \n ;; Switch to a new stack with its address in sp_switch (a SYMBOL_REF).\n (define_insn \"sp_switch_1\"\n-  [(const_int 1) (match_operand:SI 0 \"symbol_ref_operand\" \"s\")]\n+  [(set (reg:SI SP_REG) (unspec_volatile [(match_operand:SI 0 \"\" \"\")]\n+    UNSPECV_SP_SWITCH_B))]\n   \"TARGET_SH1\"\n {\n   return       \"mov.l\tr0,@-r15\"\t\"\\n\"\n@@ -13601,10 +13604,11 @@ label:\n ;; Switch back to the original stack for interrupt functions with the\n ;; sp_switch attribute.\n (define_insn \"sp_switch_2\"\n-  [(const_int 2)]\n+  [(unspec_volatile [(const_int 0)]\n+    UNSPECV_SP_SWITCH_E)]\n   \"TARGET_SH1\"\n {\n-  return       \"mov.l\t@r15+,r15\"\t\"\\n\"\n+  return       \"mov.l\t@r15,r15\"\t\"\\n\"\n \t \"\tmov.l\t@r15+,r0\";\n }\n   [(set_attr \"length\" \"4\")])"}, {"sha": "b86f63a79aa2c9486f5375efa040ec21036a5830", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b0a1e0b4371c8c2597a5f310f2a1843832d38da", "patch": "@@ -1,3 +1,8 @@\n+2013-01-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/55301\n+\t* gcc.target/sh/sh-switch.c: New testcase.\n+\n 2013-01-15  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* gcc.dg/webizer.c: Increase the array size."}, {"sha": "1bfe6a7de69aa0a219e598cb0a6a95cae6cb038a", "filename": "gcc/testsuite/gcc.target/sh/sp-switch.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsp-switch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0a1e0b4371c8c2597a5f310f2a1843832d38da/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsp-switch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsp-switch.c?ref=8b0a1e0b4371c8c2597a5f310f2a1843832d38da", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target \"sh-*-*\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0,r15\" } } */\n+/* { dg-final { scan-assembler \".long\\t_alt_stack\" } } */\n+\n+void *alt_stack;\n+void f() __attribute__ ((interrupt_handler, sp_switch (\"alt_stack\")));\n+\n+void f()\n+{\n+}"}]}