{"sha": "cf3a120084e94614a4917f71940325cd4b537f24", "node_id": "C_kwDOANBUbNoAKGNmM2ExMjAwODRlOTQ2MTRhNDkxN2Y3MTk0MDMyNWNkNGI1MzdmMjQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-08T08:41:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-08T11:05:19Z"}, "message": "tree-optimization/106226 - move vectorizer virtual SSA update\n\nWhen we knowingly have broken virtual SSA form we need to update\nit before we eventually perform slpeel manual updating which will\ncall delete_update_ssa.  Currently that's done on-demand but\ncommunicating whether it's a known unavoidable case is broken\nthere.  The following makes that a synchronous operation but\ninstead of actually performing the update we instead recod the\nneed, clear the update SSA sub-state and force virtual renaming\nat the very end of the vectorization pass.\n\n\tPR tree-optimization/106226\n\t* tree-vect-loop-manip.cc (vect_do_peeling): Assert that\n\tno SSA update is needed.  Move virtual SSA update ...\n\t* tree-vectorizer.cc (pass_vectorize::execute): ... here,\n\tvia forced virtual renaming when TODO_update_ssa_only_virtuals\n\tis queued.\n\t(vect_transform_loops): Return TODO_update_ssa_only_virtuals\n\twhen virtual SSA update is required.\n\t(try_vectorize_loop_1): Adjust.\n\t* tree-vect-stmts.cc (vectorizable_simd_clone_call): Allow\n\tvirtual renaming if the ABI forces an aggregate return\n\tbut the original call did not have a virtual definition.\n\n\t* gfortran.dg/pr106226.f: New testcase.", "tree": {"sha": "469de3ec96aea9727c14a22ec94cb0a295693680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/469de3ec96aea9727c14a22ec94cb0a295693680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf3a120084e94614a4917f71940325cd4b537f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3a120084e94614a4917f71940325cd4b537f24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3a120084e94614a4917f71940325cd4b537f24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3a120084e94614a4917f71940325cd4b537f24/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95a234f5cbd510e6b8c8e53dd9f1003fddc84c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a234f5cbd510e6b8c8e53dd9f1003fddc84c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95a234f5cbd510e6b8c8e53dd9f1003fddc84c28"}], "stats": {"total": 85, "additions": 76, "deletions": 9}, "files": [{"sha": "19237bc5a7136f1734453ea861bbca63e2a99a4f", "filename": "gcc/testsuite/gfortran.dg/pr106226.f", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3a120084e94614a4917f71940325cd4b537f24/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr106226.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3a120084e94614a4917f71940325cd4b537f24/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr106226.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr106226.f?ref=cf3a120084e94614a4917f71940325cd4b537f24", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -std=legacy\" }\n+\n+      SUBROUTINE EFTORD(DM,CHDINT,L4)\n+      IMPLICIT DOUBLE PRECISION (A-H,O-Z)\n+      PARAMETER (MXPT=100, MXFRG=50, MXFGPT=MXPT*MXFRG)\n+      DIMENSION DM(*),CHDINT(L4)\n+      COMMON /FGRAD / DEF0,DEFT0,TORQ0\n+     *                ,ATORQ(3,MXFRG)\n+      COMMON /CSSTV / CX,CY,CZ\n+     *                EFBTRM(MXFGPT),EFATRM2(MXFGPT),EFBTRM2(MXFGPT),\n+     *                EFDIP(3,MXFGPT),EFQAD(6,MXFGPT),\n+     *                EFOCT(10,MXFGPT),FRGNME(MXFGPT)\n+      IF(NROOTS.EQ.5) CALL ROOT5\n+      IF(NROOTS.EQ.6) CALL ROOT6\n+      IF(NROOTS.GE.7) THEN\n+         CALL ABRT\n+      END IF\n+      DO 403 I = 1,IJ\n+      CHDINT(ICC)=CHDINT(ICC)-DUM*DUMY\n+      ICC=ICC+1\n+ 403  CONTINUE\n+      CHDINT(ICC)=CHDINT(ICC)-DUM*DUMY\n+      DO 550 J=MINJ,MAX\n+      LJ=LOCJ+J\n+      IF (LI-LJ) 920,940,940\n+  920 ID = LJ\n+      GO TO 960\n+  940 ID = LI\n+  960 NN = (ID*(ID-1))/2+JD\n+      DUM = DM(NN)\n+      ATORQ(1,INF)=ATORQ(1,INF)-DUM*(CHDINT(ICC+1)*EFDIP(3,IC)\n+     $           -CHDINT(ICC+2)*EFDIP(2,IC))\n+      ICC=ICC+1\n+      ICC=ICC+1\n+  550 CONTINUE\n+      END"}, {"sha": "2c2b4f7bd53fd768f22f72950e0fa7f7d78a4930", "filename": "gcc/tree-vect-loop-manip.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3a120084e94614a4917f71940325cd4b537f24/gcc%2Ftree-vect-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3a120084e94614a4917f71940325cd4b537f24/gcc%2Ftree-vect-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.cc?ref=cf3a120084e94614a4917f71940325cd4b537f24", "patch": "@@ -2696,12 +2696,11 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n   class loop *first_loop = loop;\n   bool irred_flag = loop_preheader_edge (loop)->flags & EDGE_IRREDUCIBLE_LOOP;\n \n-  /* We should not have to update virtual SSA form here but some\n-     transforms involve creating new virtual definitions which makes\n-     updating difficult.  */\n-  gcc_assert (!need_ssa_update_p (cfun)\n-\t      || loop_vinfo->any_known_not_updated_vssa);\n-  update_ssa (TODO_update_ssa_only_virtuals);\n+  /* SSA form needs to be up-to-date since we are going to manually\n+     update SSA form in slpeel_tree_duplicate_loop_to_edge_cfg and delete all\n+     update SSA state after that, so we have to make sure to not lose any\n+     pending update needs.  */\n+  gcc_assert (!need_ssa_update_p (cfun));\n \n   create_lcssa_for_virtual_phi (loop);\n "}, {"sha": "01d982eea987c63336928a92cfd390b072012b6d", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3a120084e94614a4917f71940325cd4b537f24/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3a120084e94614a4917f71940325cd4b537f24/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=cf3a120084e94614a4917f71940325cd4b537f24", "patch": "@@ -4247,6 +4247,14 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \n   if (!vec_stmt) /* transformation not required.  */\n     {\n+      /* When the original call is pure or const but the SIMD ABI dictates\n+\t an aggregate return we will have to use a virtual definition and\n+\t in a loop eventually even need to add a virtual PHI.  That's\n+\t not straight-forward so allow to fix this up via renaming.  */\n+      if (gimple_call_lhs (stmt)\n+\t  && !gimple_vdef (stmt)\n+\t  && TREE_CODE (TREE_TYPE (TREE_TYPE (bestn->decl))) == ARRAY_TYPE)\n+\tvinfo->any_known_not_updated_vssa = true;\n       STMT_VINFO_SIMD_CLONE_INFO (stmt_info).safe_push (bestn->decl);\n       for (i = 0; i < nargs; i++)\n \tif ((bestn->simdclone->args[i].arg_type"}, {"sha": "6ec49511d74bd2e0e5dd51823a6c41180f08716c", "filename": "gcc/tree-vectorizer.cc", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3a120084e94614a4917f71940325cd4b537f24/gcc%2Ftree-vectorizer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3a120084e94614a4917f71940325cd4b537f24/gcc%2Ftree-vectorizer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.cc?ref=cf3a120084e94614a4917f71940325cd4b537f24", "patch": "@@ -82,6 +82,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opt-problem.h\"\n #include \"internal-fn.h\"\n #include \"tree-ssa-sccvn.h\"\n+#include \"tree-into-ssa.h\"\n \n /* Loop or bb location, with hotness information.  */\n dump_user_location_t vect_location;\n@@ -982,7 +983,7 @@ set_uid_loop_bbs (loop_vec_info loop_vinfo, gimple *loop_vectorized_call,\n \n /* Generate vectorized code for LOOP and its epilogues.  */\n \n-static void\n+static unsigned\n vect_transform_loops (hash_table<simduid_to_vf> *&simduid_to_vf_htab,\n \t\t      loop_p loop, gimple *loop_vectorized_call,\n \t\t      function *fun)\n@@ -1020,9 +1021,25 @@ vect_transform_loops (hash_table<simduid_to_vf> *&simduid_to_vf_htab,\n \t  = simduid_to_vf_data;\n     }\n \n+  /* We should not have to update virtual SSA form here but some\n+     transforms involve creating new virtual definitions which makes\n+     updating difficult.\n+     We delay the actual update to the end of the pass but avoid\n+     confusing ourselves by forcing need_ssa_update_p () to false.  */\n+  unsigned todo = 0;\n+  if (need_ssa_update_p (cfun))\n+    {\n+      gcc_assert (loop_vinfo->any_known_not_updated_vssa);\n+      fun->gimple_df->ssa_renaming_needed = false;\n+      todo |= TODO_update_ssa_only_virtuals;\n+    }\n+  gcc_assert (!need_ssa_update_p (cfun));\n+\n   /* Epilogue of vectorized loop must be vectorized too.  */\n   if (new_loop)\n-    vect_transform_loops (simduid_to_vf_htab, new_loop, NULL, fun);\n+    todo |= vect_transform_loops (simduid_to_vf_htab, new_loop, NULL, fun);\n+\n+  return todo;\n }\n \n /* Try to vectorize LOOP.  */\n@@ -1133,7 +1150,8 @@ try_vectorize_loop_1 (hash_table<simduid_to_vf> *&simduid_to_vf_htab,\n \n   (*num_vectorized_loops)++;\n   /* Transform LOOP and its epilogues.  */\n-  vect_transform_loops (simduid_to_vf_htab, loop, loop_vectorized_call, fun);\n+  ret |= vect_transform_loops (simduid_to_vf_htab, loop,\n+\t\t\t       loop_vectorized_call, fun);\n \n   if (loop_vectorized_call)\n     {\n@@ -1332,6 +1350,11 @@ pass_vectorize::execute (function *fun)\n \n   if (num_vectorized_loops > 0)\n     {\n+      /* We are collecting some corner cases where we need to update\n+\t virtual SSA form via the TODO but delete the queued update-SSA\n+\t state.  Force renaming if we think that might be necessary.  */\n+      if (ret & TODO_update_ssa_only_virtuals)\n+\tmark_virtual_operands_for_renaming (cfun);\n       /* If we vectorized any loop only virtual SSA form needs to be updated.\n \t ???  Also while we try hard to update loop-closed SSA form we fail\n \t to properly do this in some corner-cases (see PR56286).  */"}]}