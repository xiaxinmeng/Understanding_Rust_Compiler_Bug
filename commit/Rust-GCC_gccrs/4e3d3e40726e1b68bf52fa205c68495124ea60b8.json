{"sha": "4e3d3e40726e1b68bf52fa205c68495124ea60b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUzZDNlNDA3MjZlMWI2OGJmNTJmYTIwNWM2ODQ5NTEyNGVhNjBiOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-03-18T08:13:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-03-18T08:14:48Z"}, "message": "middle-end/94188 fix fold of addr expression generation\n\nThis adds a missing type conversion to build_fold_addr_expr and adjusts\nfallout - build_fold_addr_expr was used as a convenience to build an\nADDR_EXPR but some callers do not expect the result to be simplified\nto something else.\n\n2020-03-18  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/94188\n\t* fold-const.c (build_fold_addr_expr): Convert address to\n\tcorrect type.\n\t* asan.c (maybe_create_ssa_name): Strip useless type conversions.\n\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Use build1\n\tto build the ADDR_EXPR which we don't really want to simplify.\n\t* tree-ssa-dom.c (record_equivalences_from_stmt): Likewise.\n\t* tree-ssa-loop-im.c (gather_mem_refs_stmt): Likewise.\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Likewise.\n\t(simplify_builtin_call): Strip useless type conversions.\n\t* tree-ssa-strlen.c (new_strinfo): Likewise.\n\n\t* gcc.dg/pr94188.c: New testcase.", "tree": {"sha": "c40b5b145bca1448d3196a5857b9fd30bbd77c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c40b5b145bca1448d3196a5857b9fd30bbd77c8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e3d3e40726e1b68bf52fa205c68495124ea60b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3d3e40726e1b68bf52fa205c68495124ea60b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e3d3e40726e1b68bf52fa205c68495124ea60b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3d3e40726e1b68bf52fa205c68495124ea60b8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af8656be8df68ac26840f7844430fd595255ebd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af8656be8df68ac26840f7844430fd595255ebd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af8656be8df68ac26840f7844430fd595255ebd2"}], "stats": {"total": 71, "additions": 54, "deletions": 17}, "files": [{"sha": "b4d7946a18652d3652a37d874d03a77517ad5895", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e3d3e40726e1b68bf52fa205c68495124ea60b8", "patch": "@@ -1,3 +1,17 @@\n+2020-03-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/94188\n+\t* fold-const.c (build_fold_addr_expr): Convert address to\n+\tcorrect type.\n+\t* asan.c (maybe_create_ssa_name): Strip useless type conversions.\n+\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Use build1\n+\tto build the ADDR_EXPR which we don't really want to simplify.\n+\t* tree-ssa-dom.c (record_equivalences_from_stmt): Likewise.\n+\t* tree-ssa-loop-im.c (gather_mem_refs_stmt): Likewise.\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Likewise.\n+\t(simplify_builtin_call): Strip useless type conversions.\n+\t* tree-ssa-strlen.c (new_strinfo): Likewise.\n+\n 2020-03-17  Alexey Neyman  <stilor@att.net>\n \n \tPR debug/93751"}, {"sha": "00d0e678a0ebee8856ffeef8761329042c3da1fa", "filename": "gcc/asan.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=4e3d3e40726e1b68bf52fa205c68495124ea60b8", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"fnmatch.h\"\n #include \"tree-inline.h\"\n+#include \"tree-ssa.h\"\n \n /* AddressSanitizer finds out-of-bounds and use-after-free bugs\n    with <2x slowdown on average.\n@@ -2061,10 +2062,10 @@ static tree\n maybe_create_ssa_name (location_t loc, tree base, gimple_stmt_iterator *iter,\n \t\t       bool before_p)\n {\n+  STRIP_USELESS_TYPE_CONVERSION (base);\n   if (TREE_CODE (base) == SSA_NAME)\n     return base;\n-  gimple *g = gimple_build_assign (make_ssa_name (TREE_TYPE (base)),\n-\t\t\t\t  TREE_CODE (base), base);\n+  gimple *g = gimple_build_assign (make_ssa_name (TREE_TYPE (base)), base);\n   gimple_set_location (g, loc);\n   if (before_p)\n     gsi_insert_before (iter, g, GSI_SAME_STMT);"}, {"sha": "3ab1a9adcdff9df1937991e4f3db5cbc60559e25", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4e3d3e40726e1b68bf52fa205c68495124ea60b8", "patch": "@@ -8523,7 +8523,12 @@ build_fold_addr_expr_with_type_loc (location_t loc, tree t, tree ptrtype)\n     }\n   else if (TREE_CODE (t) == MEM_REF\n \t   && integer_zerop (TREE_OPERAND (t, 1)))\n-    return TREE_OPERAND (t, 0);\n+    {\n+      t = TREE_OPERAND (t, 0);\n+\n+      if (TREE_TYPE (t) != ptrtype)\n+\tt = fold_convert_loc (loc, ptrtype, t);\n+    }\n   else if (TREE_CODE (t) == MEM_REF\n \t   && TREE_CODE (TREE_OPERAND (t, 0)) == INTEGER_CST)\n     return fold_binary (POINTER_PLUS_EXPR, ptrtype,"}, {"sha": "3f17de974ed882669042b16efdc7ad587b21acef", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=4e3d3e40726e1b68bf52fa205c68495124ea60b8", "patch": "@@ -6413,8 +6413,8 @@ gimple_fold_stmt_to_constant_1 (gimple *stmt, tree (*valueize) (tree),\n \t\t    && TREE_CODE (op1) == INTEGER_CST)\n \t\t  {\n \t\t    tree off = fold_convert (ptr_type_node, op1);\n-\t\t    return build_fold_addr_expr_loc\n-\t\t\t(loc,\n+\t\t    return build1_loc\n+\t\t\t(loc, ADDR_EXPR, TREE_TYPE (op0),\n \t\t\t fold_build2 (MEM_REF,\n \t\t\t\t      TREE_TYPE (TREE_TYPE (op0)),\n \t\t\t\t      unshare_expr (op0), off));"}, {"sha": "2c7f3505cb38eed05e7fa87b214762fc24ecebba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e3d3e40726e1b68bf52fa205c68495124ea60b8", "patch": "@@ -1,3 +1,8 @@\n+2020-03-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/94188\n+\t* gcc.dg/pr94188.c: New testcase.\n+\n 2020-03-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91759"}, {"sha": "7a73c1bc071923488fef92ea8af3d0253e47e592", "filename": "gcc/testsuite/gcc.dg/pr94188.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94188.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94188.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94188.c?ref=4e3d3e40726e1b68bf52fa205c68495124ea60b8", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+struct dm_tree_link {\n+    int list;\n+    int node;\n+};\n+void fn1(void *p)\n+{\n+  0 ? ((struct dm_tree_link *)((char *)p - (char *)&((struct dm_tree_link *)0)->list))->node : 0;\n+}"}, {"sha": "864c984f6361e2c1e698973daca47e4bc7268bf7", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=4e3d3e40726e1b68bf52fa205c68495124ea60b8", "patch": "@@ -1725,11 +1725,10 @@ record_equivalences_from_stmt (gimple *stmt, int may_optimize_p,\n       tree op0 = gimple_assign_rhs1 (stmt);\n       tree op1 = gimple_assign_rhs2 (stmt);\n       tree new_rhs\n-\t= build_fold_addr_expr (fold_build2 (MEM_REF,\n-\t\t\t\t\t     TREE_TYPE (TREE_TYPE (op0)),\n-\t\t\t\t\t     unshare_expr (op0),\n-\t\t\t\t\t     fold_convert (ptr_type_node,\n-\t\t\t\t\t\t\t   op1)));\n+\t= build1 (ADDR_EXPR, TREE_TYPE (op0),\n+\t\t  fold_build2 (MEM_REF, TREE_TYPE (TREE_TYPE (op0)),\n+\t\t\t       unshare_expr (op0), fold_convert (ptr_type_node,\n+\t\t\t\t\t\t\t\t op1)));\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"==== ASGN \");"}, {"sha": "61b4eec271b3557f2edc58fb9c12ee6e4fa3966e", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=4e3d3e40726e1b68bf52fa205c68495124ea60b8", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vec-perm-indices.h\"\n #include \"internal-fn.h\"\n #include \"cgraph.h\"\n+#include \"tree-ssa.h\"\n \n /* This pass propagates the RHS of assignment statements into use\n    sites of the LHS of the assignment.  It's basically a specialized\n@@ -732,16 +733,15 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n       if (TREE_CODE (new_def_rhs) == MEM_REF\n \t  && !is_gimple_mem_ref_addr (TREE_OPERAND (new_def_rhs, 0)))\n \treturn false;\n-      new_def_rhs = build_fold_addr_expr_with_type (new_def_rhs,\n-\t\t\t\t\t\t    TREE_TYPE (rhs));\n+      new_def_rhs = build1 (ADDR_EXPR, TREE_TYPE (rhs), new_def_rhs);\n \n       /* Recurse.  If we could propagate into all uses of lhs do not\n \t bother to replace into the current use but just pretend we did.  */\n-      if (TREE_CODE (new_def_rhs) == ADDR_EXPR\n-\t  && forward_propagate_addr_expr (lhs, new_def_rhs, single_use_p))\n+      if (forward_propagate_addr_expr (lhs, new_def_rhs, single_use_p))\n \treturn true;\n \n-      if (useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (new_def_rhs)))\n+      if (useless_type_conversion_p (TREE_TYPE (lhs),\n+\t\t\t\t     TREE_TYPE (new_def_rhs)))\n \tgimple_assign_set_rhs_with_ops (use_stmt_gsi, TREE_CODE (new_def_rhs),\n \t\t\t\t\tnew_def_rhs);\n       else if (is_gimple_min_invariant (new_def_rhs))\n@@ -1319,6 +1319,7 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t\t  || !tree_fits_shwi_p (src1))\n \t\tbreak;\n \t      ptr1 = build_fold_addr_expr (ptr1);\n+\t      STRIP_USELESS_TYPE_CONVERSION (ptr1);\n \t      callee1 = NULL_TREE;\n \t      len1 = size_one_node;\n \t      lhs1 = NULL_TREE;"}, {"sha": "273a58038bd87a46948f94e6afb481bfc078b5ae", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=4e3d3e40726e1b68bf52fa205c68495124ea60b8", "patch": "@@ -1527,7 +1527,8 @@ gather_mem_refs_stmt (class loop *loop, gimple *stmt)\n \t\t  tree ref_alias_type = reference_alias_ptr_type (*mem);\n \t\t  unsigned int ref_align = get_object_alignment (*mem);\n \t\t  tree ref_type = TREE_TYPE (*mem);\n-\t\t  tree tmp = build_fold_addr_expr (unshare_expr (mem_base));\n+\t\t  tree tmp = build1 (ADDR_EXPR, ptr_type_node,\n+\t\t\t\t     unshare_expr (mem_base));\n \t\t  if (TYPE_ALIGN (ref_type) != ref_align)\n \t\t    ref_type = build_aligned_type (ref_type, ref_align);\n \t\t  (*slot)->mem.ref"}, {"sha": "f883a1fe7d64a9a2898c317818fc6dee0ffff88c", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3d3e40726e1b68bf52fa205c68495124ea60b8/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=4e3d3e40726e1b68bf52fa205c68495124ea60b8", "patch": "@@ -57,9 +57,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"tree-ssa-loop.h\"\n #include \"tree-scalar-evolution.h\"\n-\n #include \"vr-values.h\"\n #include \"gimple-ssa-evrp-analyze.h\"\n+#include \"tree-ssa.h\"\n \n /* A vector indexed by SSA_NAME_VERSION.  0 means unknown, positive value\n    is an index into strinfo vector, negative value stands for\n@@ -679,6 +679,7 @@ new_strinfo (tree ptr, int idx, tree nonzero_chars, bool full_string_p)\n {\n   strinfo *si = strinfo_pool.allocate ();\n   si->nonzero_chars = nonzero_chars;\n+  STRIP_USELESS_TYPE_CONVERSION (ptr);\n   si->ptr = ptr;\n   si->stmt = NULL;\n   si->alloc = NULL;"}]}