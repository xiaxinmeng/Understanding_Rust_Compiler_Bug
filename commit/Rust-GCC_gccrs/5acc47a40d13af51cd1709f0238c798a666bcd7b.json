{"sha": "5acc47a40d13af51cd1709f0238c798a666bcd7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjYzQ3YTQwZDEzYWY1MWNkMTcwOWYwMjM4Yzc5OGE2NjZiY2Q3Yg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-05-12T09:56:46Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-05-12T09:56:46Z"}, "message": "[ARM] PR target/70830: Avoid POP-{reglist}^ when returning from interrupt handlers\n\n\tPR target/70830\n\t* config/arm/arm.c (arm_output_multireg_pop): Avoid POP instruction\n\twhen popping the PC and within an interrupt handler routine.\n\tAdd missing tab to output of \"ldmfd\".\n\t(output_return_instruction): Output LDMFD with SP update rather\n\tthan POP when returning from interrupt handler.\n\n\t* gcc.target/arm/interrupt-1.c: Change dg-compile to dg-assemble.\n\tAdd -save-temps to dg-options.\n\tScan for ldmfd rather than pop instruction.\n\t* gcc.target/arm/interrupt-2.c: Likewise.\n\t* gcc.target/arm/pr70830.c: New test.\n\nFrom-SVN: r236169", "tree": {"sha": "43c42f7af9755f290377e17a4c95ed428514cfc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43c42f7af9755f290377e17a4c95ed428514cfc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5acc47a40d13af51cd1709f0238c798a666bcd7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acc47a40d13af51cd1709f0238c798a666bcd7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acc47a40d13af51cd1709f0238c798a666bcd7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acc47a40d13af51cd1709f0238c798a666bcd7b/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cd638421e2d9639f68313a6b18522b31f702b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd638421e2d9639f68313a6b18522b31f702b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd638421e2d9639f68313a6b18522b31f702b04"}], "stats": {"total": 63, "additions": 49, "deletions": 14}, "files": [{"sha": "23a486928f41725d847dc36d801941278e0c2f30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5acc47a40d13af51cd1709f0238c798a666bcd7b", "patch": "@@ -1,3 +1,12 @@\n+2016-05-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/70830\n+\t* config/arm/arm.c (arm_output_multireg_pop): Avoid POP instruction\n+\twhen popping the PC and within an interrupt handler routine.\n+\tAdd missing tab to output of \"ldmfd\".\n+\t(output_return_instruction): Output LDMFD with SP update rather\n+\tthan POP when returning from interrupt handler.\n+\n 2016-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.md (isa): Add x64_avx512dq, enable if"}, {"sha": "58b04322d187ea26c45f499a6822c5af8641a905", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5acc47a40d13af51cd1709f0238c798a666bcd7b", "patch": "@@ -17755,6 +17755,7 @@ arm_output_multireg_pop (rtx *operands, bool return_pc, rtx cond, bool reverse,\n   int num_saves = XVECLEN (operands[0], 0);\n   unsigned int regno;\n   unsigned int regno_base = REGNO (operands[1]);\n+  bool interrupt_p = IS_INTERRUPT (arm_current_func_type ());\n \n   offset = 0;\n   offset += update ? 1 : 0;\n@@ -17772,7 +17773,8 @@ arm_output_multireg_pop (rtx *operands, bool return_pc, rtx cond, bool reverse,\n     }\n \n   conditional = reverse ? \"%?%D0\" : \"%?%d0\";\n-  if ((regno_base == SP_REGNUM) && update)\n+  /* Can't use POP if returning from an interrupt.  */\n+  if ((regno_base == SP_REGNUM) && !(interrupt_p && return_pc))\n     {\n       sprintf (pattern, \"pop%s\\t{\", conditional);\n     }\n@@ -17781,11 +17783,8 @@ arm_output_multireg_pop (rtx *operands, bool return_pc, rtx cond, bool reverse,\n       /* Output ldmfd when the base register is SP, otherwise output ldmia.\n          It's just a convention, their semantics are identical.  */\n       if (regno_base == SP_REGNUM)\n-\t  /* update is never true here, hence there is no need to handle\n-\t     pop here.  */\n-\tsprintf (pattern, \"ldmfd%s\", conditional);\n-\n-      if (update)\n+\tsprintf (pattern, \"ldmfd%s\\t\", conditional);\n+      else if (update)\n \tsprintf (pattern, \"ldmia%s\\t\", conditional);\n       else\n \tsprintf (pattern, \"ldm%s\\t\", conditional);\n@@ -17811,7 +17810,7 @@ arm_output_multireg_pop (rtx *operands, bool return_pc, rtx cond, bool reverse,\n \n   strcat (pattern, \"}\");\n \n-  if (IS_INTERRUPT (arm_current_func_type ()) && return_pc)\n+  if (interrupt_p && return_pc)\n     strcat (pattern, \"^\");\n \n   output_asm_insn (pattern, &cond);\n@@ -19622,8 +19621,12 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \t\t  sprintf (instr, \"ldmfd%s\\t%%|sp, {\", conditional);\n \t\t}\n \t    }\n+\t  /* For interrupt returns we have to use an LDM rather than\n+\t     a POP so that we can use the exception return variant.  */\n+\t  else if (IS_INTERRUPT (func_type))\n+\t    sprintf (instr, \"ldmfd%s\\t%%|sp!, {\", conditional);\n \t  else\n-\t      sprintf (instr, \"pop%s\\t{\", conditional);\n+\t    sprintf (instr, \"pop%s\\t{\", conditional);\n \n \t  p = instr + strlen (instr);\n "}, {"sha": "41e5d51d8a972d180eff68f8273b8bfb7dd7fcc7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5acc47a40d13af51cd1709f0238c798a666bcd7b", "patch": "@@ -1,3 +1,12 @@\n+2016-05-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/70830\n+\t* gcc.target/arm/interrupt-1.c: Change dg-compile to dg-assemble.\n+\tAdd -save-temps to dg-options.\n+\tScan for ldmfd rather than pop instruction.\n+\t* gcc.target/arm/interrupt-2.c: Likewise.\n+\t* gcc.target/arm/pr70830.c: New test.\n+\n 2016-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/avx512bw-vpextr-1.c: New test."}, {"sha": "fe94877cead7501dd73f2eba92feff395de9df2f", "filename": "gcc/testsuite/gcc.target/arm/interrupt-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-1.c?ref=5acc47a40d13af51cd1709f0238c798a666bcd7b", "patch": "@@ -1,8 +1,8 @@\n /* Verify that prologue and epilogue are correct for functions with\n    __attribute__ ((interrupt)).  */\n-/* { dg-do compile } */\n+/* { dg-do assemble } */\n /* { dg-require-effective-target arm_nothumb } */\n-/* { dg-options \"-O0 -marm\" } */\n+/* { dg-options \"-O0 -marm -save-temps\" } */\n \n /* This test is not valid when -mthumb.  */\n extern void bar (int);\n@@ -14,4 +14,4 @@ void foo ()\n }\n \n /* { dg-final { scan-assembler \"push\\t{r0, r1, r2, r3, r4, fp, ip, lr}\" } } */\n-/* { dg-final { scan-assembler \"pop\\t{r0, r1, r2, r3, r4, fp, ip, pc}\\\\^\" } } */\n+/* { dg-final { scan-assembler \"ldmfd\\tsp!, {r0, r1, r2, r3, r4, fp, ip, pc}\\\\^\" } } */"}, {"sha": "289eca0f6406bb73b029b9307cdcca6e047bcfb2", "filename": "gcc/testsuite/gcc.target/arm/interrupt-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-2.c?ref=5acc47a40d13af51cd1709f0238c798a666bcd7b", "patch": "@@ -1,8 +1,8 @@\n /* Verify that prologue and epilogue are correct for functions with\n    __attribute__ ((interrupt)).  */\n-/* { dg-do compile } */\n+/* { dg-do assemble } */\n /* { dg-require-effective-target arm_nothumb } */\n-/* { dg-options \"-O1 -marm\" } */\n+/* { dg-options \"-O1 -marm -save-temps\" } */\n \n /* This test is not valid when -mthumb.  */\n extern void bar (int);\n@@ -16,4 +16,4 @@ void test()\n }\n \n /* { dg-final { scan-assembler \"push\\t{r0, r1, r2, r3, r4, r5, ip, lr}\" } } */\n-/* { dg-final { scan-assembler \"pop\\t{r0, r1, r2, r3, r4, r5, ip, pc}\\\\^\" } } */\n+/* { dg-final { scan-assembler \"ldmfd\\tsp!, {r0, r1, r2, r3, r4, r5, ip, pc}\\\\^\" } } */"}, {"sha": "cad903b0cf2904969355022a7850fb8381bb3ddd", "filename": "gcc/testsuite/gcc.target/arm/pr70830.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr70830.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acc47a40d13af51cd1709f0238c798a666bcd7b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr70830.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr70830.c?ref=5acc47a40d13af51cd1709f0238c798a666bcd7b", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/70830.  */\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_arm_ok } */\n+/* { dg-options \"-Os -marm -save-temps\" } */\n+\n+/* This test is not valid when -mthumb.  */\n+\n+extern void prints (char *);\n+\n+void __attribute__ ((interrupt (\"IRQ\"))) dm3730_IRQHandler(void)\n+{\n+    prints(\"IRQ\" );\n+}\n+/* { dg-final { scan-assembler \"ldmfd\\tsp!, {r0, r1, r2, r3, ip, pc}\\\\^\" } } */"}]}