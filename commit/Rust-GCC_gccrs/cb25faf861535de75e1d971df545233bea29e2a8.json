{"sha": "cb25faf861535de75e1d971df545233bea29e2a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyNWZhZjg2MTUzNWRlNzVlMWQ5NzFkZjU0NTIzM2JlYTI5ZTJhOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:36:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:36:46Z"}, "message": "[multiple changes]\n\n2011-08-29  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch9.adb, s-tasren.adb, exp_sel.adb, exp_sel.ads, exp_ch11.adb,\n\ts-interr-hwint.adb, s-tpobop.adb, sem_ch13.adb: Minor reformatting.\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* par-endh.adb (Check_End): For an END where it is mandatory to repeat\n\tthe scope name, do not report a missing label as a style violation (it\n\twill be diagnosed as an illegality).\n\t* exp_dist.adb (Add_Params_For_Variant_Components): Fix handling of\n\tvariant records: Get_Enum_Lit_From_Pos already returns a usage\n\toccurrence of the literal, no need to use New_Occurrence_Of. Set Etype\n\ton Expr in Integer_Literal case so that it can be used by\n\tBuild_To_Any_Call.\n\nFrom-SVN: r178195", "tree": {"sha": "3f1cd1e641f2e80956215676101569b1390c4498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f1cd1e641f2e80956215676101569b1390c4498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb25faf861535de75e1d971df545233bea29e2a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb25faf861535de75e1d971df545233bea29e2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb25faf861535de75e1d971df545233bea29e2a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb25faf861535de75e1d971df545233bea29e2a8/comments", "author": null, "committer": null, "parents": [{"sha": "1d10f669bca9221d5e89d413f5a479bd191bdfc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d10f669bca9221d5e89d413f5a479bd191bdfc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d10f669bca9221d5e89d413f5a479bd191bdfc0"}], "stats": {"total": 273, "additions": 153, "deletions": 120}, "files": [{"sha": "2606c50891c35752979bcb27a7c4586221697489", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -1,3 +1,19 @@\n+2011-08-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch9.adb, s-tasren.adb, exp_sel.adb, exp_sel.ads, exp_ch11.adb,\n+\ts-interr-hwint.adb, s-tpobop.adb, sem_ch13.adb: Minor reformatting.\n+\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par-endh.adb (Check_End): For an END where it is mandatory to repeat\n+\tthe scope name, do not report a missing label as a style violation (it\n+\twill be diagnosed as an illegality).\n+\t* exp_dist.adb (Add_Params_For_Variant_Components): Fix handling of\n+\tvariant records: Get_Enum_Lit_From_Pos already returns a usage\n+\toccurrence of the literal, no need to use New_Occurrence_Of. Set Etype\n+\ton Expr in Integer_Literal case so that it can be used by\n+\tBuild_To_Any_Call.\n+\n 2011-08-29  Tristan Gingold  <gingold@adacore.com>\n \n \t* exp_sel.ads (Build_Abort_BLock_Handler): New function spec."}, {"sha": "c18b31ad4636ad2ba78cef69d490fd8a1f224810", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -1100,7 +1100,6 @@ package body Exp_Ch11 is\n                elsif Abort_Allowed\n                  and then Exception_Mechanism /= Back_End_Exceptions\n                then\n-\n                   --  There are some special cases in which we do not do the\n                   --  undefer. In particular a finalization (AT END) handler\n                   --  wants to operate with aborts still deferred."}, {"sha": "214bb674972ac3489fa5716befd18cbebedc405b", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -6487,8 +6487,7 @@ package body Exp_Ch9 is\n          Append_To (Stmts,\n            Make_Implicit_If_Statement (N,\n              Condition => Make_Function_Call (Loc,\n-               Name => New_Reference_To (\n-                 RTE (RE_Enqueued), Loc),\n+               Name => New_Reference_To (RTE (RE_Enqueued), Loc),\n                Parameter_Associations => New_List (\n                  New_Reference_To (Cancel_Param, Loc))),\n              Then_Statements => Astats));\n@@ -6507,9 +6506,12 @@ package body Exp_Ch9 is\n \n          if VM_Target = No_VM then\n             if Exception_Mechanism = Back_End_Exceptions then\n+\n                --  Aborts are not deferred at beginning of exception handlers\n                --  in ZCX.\n+\n                Handler_Stmt := Make_Null_Statement (Loc);\n+\n             else\n                Handler_Stmt := Make_Procedure_Call_Statement (Loc,\n                  Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc),\n@@ -6518,9 +6520,10 @@ package body Exp_Ch9 is\n          else\n             Handler_Stmt := Make_Procedure_Call_Statement (Loc,\n               Name => New_Reference_To (RTE (RE_Update_Exception), Loc),\n-              Parameter_Associations => New_List (Make_Function_Call (Loc,\n-                Name => New_Occurrence_Of (RTE (RE_Current_Target_Exception),\n-                                           Loc))));\n+              Parameter_Associations => New_List (\n+                Make_Function_Call (Loc,\n+                  Name => New_Occurrence_Of\n+                            (RTE (RE_Current_Target_Exception), Loc))));\n          end if;\n \n          Stmts := New_List ("}, {"sha": "e0c970c37cafdbca9aeed6d2fa269e1a49353ae7", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -10430,11 +10430,10 @@ package body Exp_Dist is\n                   --  A variant part\n \n                   declare\n-                     Discriminant_Type : constant Entity_Id :=\n-                                           Etype (Name (Field));\n+                     Disc_Type : constant Entity_Id := Etype (Name (Field));\n \n                      Is_Enum : constant Boolean :=\n-                                 Is_Enumeration_Type (Discriminant_Type);\n+                                 Is_Enumeration_Type (Disc_Type);\n \n                      Union_TC_Params : List_Id;\n \n@@ -10465,8 +10464,7 @@ package body Exp_Dist is\n                      -- Add_Params_For_Variant_Components --\n                      ---------------------------------------\n \n-                     procedure Add_Params_For_Variant_Components\n-                     is\n+                     procedure Add_Params_For_Variant_Components is\n                         S_Name : constant Name_Id :=\n                                    New_External_Name (U_Name, 'S', -1);\n \n@@ -10510,8 +10508,7 @@ package body Exp_Dist is\n                      --  Build union parameters\n \n                      Add_TypeCode_Parameter\n-                       (Build_TypeCode_Call\n-                          (Loc, Discriminant_Type, Decls),\n+                       (Build_TypeCode_Call (Loc, Disc_Type, Decls),\n                         Union_TC_Params);\n \n                      Add_Long_Parameter (Default, Union_TC_Params);\n@@ -10536,13 +10533,13 @@ package body Exp_Dist is\n                                  begin\n                                     while J <= H loop\n                                        if Is_Enum then\n-                                          Expr := New_Occurrence_Of (\n-                                            Get_Enum_Lit_From_Pos (\n-                                              Discriminant_Type, J, Loc), Loc);\n+                                          Expr := Get_Enum_Lit_From_Pos\n+                                                    (Disc_Type, J, Loc);\n                                        else\n                                           Expr :=\n                                             Make_Integer_Literal (Loc, J);\n                                        end if;\n+                                       Set_Etype (Expr, Disc_Type);\n                                        Append_To (Union_TC_Params,\n                                          Build_To_Any_Call (Expr, Decls));\n \n@@ -10553,11 +10550,10 @@ package body Exp_Dist is\n \n                               when N_Others_Choice =>\n \n-                                 --  This variant possess a default choice.\n-                                 --  We must therefore set the default\n-                                 --  parameter to the current choice index. The\n-                                 --  default parameter is by construction the\n-                                 --  fourth in the Union_TC_Params list.\n+                                 --  This variant has a default choice. We must\n+                                 --  therefore set the default parameter to the\n+                                 --  current choice index. This parameter is by\n+                                 --  construction the 4th in Union_TC_Params.\n \n                                  declare\n                                     Default_Node : constant Node_Id :=\n@@ -10573,25 +10569,24 @@ package body Exp_Dist is\n                                            Make_Integer_Literal\n                                              (Loc, Choice_Index)));\n                                  begin\n-                                    Insert_Before (\n-                                      Default_Node,\n-                                      New_Default_Node);\n+                                    Insert_Before\n+                                      (Default_Node, New_Default_Node);\n \n                                     Remove (Default_Node);\n                                  end;\n \n-                                 --  Add a placeholder member label\n-                                 --  for the default case.\n-                                 --  It must be of the discriminant type.\n+                                 --  Add a placeholder member label for the\n+                                 --  default case, which must have the\n+                                 --  discriminant type.\n \n                                  declare\n                                     Exp : constant Node_Id :=\n                                       Make_Attribute_Reference (Loc,\n-                                       Prefix => New_Occurrence_Of\n-                                         (Discriminant_Type, Loc),\n+                                       Prefix         => New_Occurrence_Of\n+                                                           (Disc_Type, Loc),\n                                        Attribute_Name => Name_First);\n                                  begin\n-                                    Set_Etype (Exp, Discriminant_Type);\n+                                    Set_Etype (Exp, Disc_Type);\n                                     Append_To (Union_TC_Params,\n                                       Build_To_Any_Call (Exp, Decls));\n                                  end;"}, {"sha": "27245cff50a89b47dedc6b970ced877f2e51ccd6", "filename": "gcc/ada/exp_sel.adb", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fexp_sel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fexp_sel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_sel.adb?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -57,10 +57,8 @@ package body Exp_Sel is\n               Statements =>\n                 New_List (\n                   Make_Implicit_Label_Declaration (Loc,\n-                    Defining_Identifier =>\n-                      Cln_Blk_Ent,\n-                    Label_Construct =>\n-                      Blk),\n+                    Defining_Identifier => Cln_Blk_Ent,\n+                    Label_Construct     => Blk),\n                   Blk),\n \n               Exception_Handlers =>\n@@ -71,29 +69,29 @@ package body Exp_Sel is\n    -- Build_Abort_Block_Handler --\n    -------------------------------\n \n-   function Build_Abort_Block_Handler\n-     (Loc : Source_Ptr) return Node_Id\n-   is\n+   function Build_Abort_Block_Handler (Loc : Source_Ptr) return Node_Id is\n       Stmt : Node_Id;\n+\n    begin\n       if Exception_Mechanism = Back_End_Exceptions then\n-         --  With ZCX, aborts are not defered in handlers.\n+\n+         --  With ZCX, aborts are not defered in handlers\n \n          Stmt := Make_Null_Statement (Loc);\n       else\n          --  With FE SJLJ, aborts are defered at the beginning of Abort_Signal\n          --  handlers.\n \n-         Stmt := Make_Procedure_Call_Statement (Loc,\n-           Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc),\n-           Parameter_Associations => No_List);\n+         Stmt :=\n+           Make_Procedure_Call_Statement (Loc,\n+             Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc),\n+             Parameter_Associations => No_List);\n       end if;\n \n       return Make_Implicit_Exception_Handler (Loc,\n         Exception_Choices =>\n           New_List (New_Reference_To (Stand.Abort_Signal, Loc)),\n-        Statements =>\n-          New_List (Stmt));\n+        Statements        => New_List (Stmt));\n    end Build_Abort_Block_Handler;\n \n    -------------\n@@ -143,8 +141,9 @@ package body Exp_Sel is\n    is\n       Cleanup_Block : constant Node_Id :=\n                         Make_Block_Statement (Loc,\n-                          Identifier   => New_Reference_To (Blk_Ent, Loc),\n-                          Declarations => No_List,\n+                          Identifier                 =>\n+                            New_Reference_To (Blk_Ent, Loc),\n+                          Declarations               => No_List,\n                           Handled_Statement_Sequence =>\n                             Make_Handled_Sequence_Of_Statements (Loc,\n                               Statements => Stmts),"}, {"sha": "440a0ea2c386936610f590664c502c7a3ae412f3", "filename": "gcc/ada/exp_sel.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fexp_sel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fexp_sel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_sel.ads?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -45,8 +45,7 @@ package Exp_Sel is\n    --  of the encapsulated cleanup block, Blk is the actual block name.\n    --  The exception handler code is built by Build_Abort_Block_Handler.\n \n-   function Build_Abort_Block_Handler\n-     (Loc : Source_Ptr) return Node_Id;\n+   function Build_Abort_Block_Handler (Loc : Source_Ptr) return Node_Id;\n    --  Generate if front-end exception:\n    --    when others =>\n    --      Abort_Under;"}, {"sha": "12f7015f6a5f65f6d07f3c1d3d6008a1c68e3ad2", "filename": "gcc/ada/par-endh.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fpar-endh.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fpar-endh.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-endh.adb?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -374,11 +374,16 @@ package body Endh is\n                   Set_Comes_From_Source (End_Labl, False);\n                   End_Labl_Present := False;\n \n-                  --  Do style check for missing label\n+                  --  Do style check for label permitted but not present. Note:\n+                  --  for the case of a block statement, the label is required\n+                  --  to be repeated, and this legality rule is enforced\n+                  --  independently.\n \n                   if Style_Check\n                     and then End_Type = E_Name\n                     and then Explicit_Start_Label (Scope.Last)\n+                    and then Nkind (Parent (Scope.Table (Scope.Last).Labl))\n+                               /= N_Block_Statement\n                   then\n                      Style.No_End_Name (Scope.Table (Scope.Last).Labl);\n                   end if;"}, {"sha": "b9842ae78b266f7212ec459e588ec3ede76250dc", "filename": "gcc/ada/s-interr-hwint.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fs-interr-hwint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fs-interr-hwint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-hwint.adb?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -1030,6 +1030,7 @@ package body System.Interrupts is\n          end if;\n \n          --  Flush interrupt server semaphores, so they can terminate\n+\n          Finalize_Interrupt_Servers;\n          raise;\n    end Interrupt_Manager;"}, {"sha": "0958a8dbf320fc7f532fb97c1dff251bc0d14794", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 83, "deletions": 71, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -97,16 +97,15 @@ package body System.Tasking.Rendezvous is\n    procedure Local_Undefer_Abort (Self_Id : Task_Id) renames\n      System.Tasking.Initialization.Undefer_Abort_Nestable;\n \n-   --  Florist defers abort around critical sections that\n-   --  make entry calls to the Interrupt_Manager task, which\n-   --  violates the general rule about top-level runtime system\n-   --  calls from abort-deferred regions.  It is not that this is\n-   --  unsafe, but when it occurs in \"normal\" programs it usually\n-   --  means either the user is trying to do a potentially blocking\n-   --  operation from within a protected object, or there is a\n-   --  runtime system/compiler error that has failed to undefer\n-   --  an earlier abort deferral. Thus, for debugging it may be\n-   --  wise to modify the above renamings to the non-nestable forms.\n+   --  Florist defers abort around critical sections that make entry calls\n+   --  to the Interrupt_Manager task, which violates the general rule about\n+   --  top-level runtime system calls from abort-deferred regions. It is not\n+   --  that this is unsafe, but when it occurs in \"normal\" programs it usually\n+   --  means either the user is trying to do a potentially blocking operation\n+   --  from within a protected object, or there is a runtime system/compiler\n+   --  error that has failed to undefer an earlier abort deferral. Thus, for\n+   --  debugging it may be wise to modify the above renamings to the\n+   --  non-nestable forms.\n \n    procedure Boost_Priority (Call : Entry_Call_Link; Acceptor : Task_Id);\n    pragma Inline (Boost_Priority);\n@@ -126,18 +125,17 @@ package body System.Tasking.Rendezvous is\n      (Entry_Call : Entry_Call_Link;\n       Acceptor   : Task_Id);\n    pragma Inline (Setup_For_Rendezvous_With_Body);\n-   --  Call this only with abort deferred and holding lock of Acceptor.\n-   --  When a rendezvous selected (ready for rendezvous) we need to save\n-   --  previous caller and adjust the priority. Also we need to make\n-   --  this call not Abortable (Cancellable) since the rendezvous has\n-   --  already been started.\n+   --  Call this only with abort deferred and holding lock of Acceptor. When\n+   --  a rendezvous selected (ready for rendezvous) we need to save previous\n+   --  caller and adjust the priority. Also we need to make this call not\n+   --  Abortable (Cancellable) since the rendezvous has already been started.\n \n    procedure Wait_For_Call (Self_Id : Task_Id);\n    pragma Inline (Wait_For_Call);\n-   --  Call this only with abort deferred and holding lock of Self_Id.\n-   --  An accepting task goes into Sleep by calling this routine\n-   --  waiting for a call from the caller or waiting for an abort.\n-   --  Make sure Self_Id is locked before calling this routine.\n+   --  Call this only with abort deferred and holding lock of Self_Id. An\n+   --  accepting task goes into Sleep by calling this routine waiting for a\n+   --  call from the caller or waiting for an abort. Make sure Self_Id is\n+   --  locked before calling this routine.\n \n    -----------------\n    -- Accept_Call --\n@@ -148,7 +146,7 @@ package body System.Tasking.Rendezvous is\n       Uninterpreted_Data : out System.Address)\n    is\n       Self_Id      : constant Task_Id := STPO.Self;\n-      Caller       : Task_Id := null;\n+      Caller       : Task_Id          := null;\n       Open_Accepts : aliased Accept_List (1 .. 1);\n       Entry_Call   : Entry_Call_Link;\n \n@@ -217,8 +215,8 @@ package body System.Tasking.Rendezvous is\n          end if;\n       end if;\n \n-      --  Self_Id.Common.Call should already be updated by the Caller\n-      --  On return, we will start the rendezvous.\n+      --  Self_Id.Common.Call should already be updated by the Caller. On\n+      --  return, we will start the rendezvous.\n \n       STPO.Unlock (Self_Id);\n \n@@ -239,7 +237,7 @@ package body System.Tasking.Rendezvous is\n \n    procedure Accept_Trivial (E : Task_Entry_Index) is\n       Self_Id      : constant Task_Id := STPO.Self;\n-      Caller       : Task_Id := null;\n+      Caller       : Task_Id          := null;\n       Open_Accepts : aliased Accept_List (1 .. 1);\n       Entry_Call   : Entry_Call_Link;\n \n@@ -274,6 +272,7 @@ package body System.Tasking.Rendezvous is\n       Queuing.Dequeue_Head (Self_Id.Entry_Queues (E), Entry_Call);\n \n       if Entry_Call = null then\n+\n          --  Need to wait for entry call\n \n          Open_Accepts (1).Null_Body := True;\n@@ -296,7 +295,9 @@ package body System.Tasking.Rendezvous is\n \n          STPO.Unlock (Self_Id);\n \n-      else  --  found caller already waiting\n+      --  Found caller already waiting\n+\n+      else\n          pragma Assert (Entry_Call.State < Done);\n \n          STPO.Unlock (Self_Id);\n@@ -310,8 +311,8 @@ package body System.Tasking.Rendezvous is\n       if Parameters.Runtime_Traces then\n          Send_Trace_Info (M_Accept_Complete);\n \n-         --  Fake one, since there is (???) no way\n-         --  to know that the rendezvous is over\n+         --  Fake one, since there is (???) no way to know that the rendezvous\n+         --  is over.\n \n          Send_Trace_Info (M_RDV_Complete);\n       end if;\n@@ -328,15 +329,13 @@ package body System.Tasking.Rendezvous is\n    --------------------\n \n    procedure Boost_Priority (Call : Entry_Call_Link; Acceptor : Task_Id) is\n-      Caller        : constant Task_Id := Call.Self;\n+      Caller        : constant Task_Id             := Call.Self;\n       Caller_Prio   : constant System.Any_Priority := Get_Priority (Caller);\n       Acceptor_Prio : constant System.Any_Priority := Get_Priority (Acceptor);\n-\n    begin\n       if Caller_Prio > Acceptor_Prio then\n          Call.Acceptor_Prev_Priority := Acceptor_Prio;\n          Set_Priority (Acceptor, Caller_Prio);\n-\n       else\n          Call.Acceptor_Prev_Priority := Priority_Not_Boosted;\n       end if;\n@@ -530,23 +529,23 @@ package body System.Tasking.Rendezvous is\n       use type STPE.Protection_Entries_Access;\n \n    begin\n-      --  Consider phasing out Complete_Rendezvous in favor\n-      --  of direct call to this with Ada.Exceptions.Null_ID.\n-      --  See code expansion examples for Accept_Call and Selective_Wait.\n-      --  Also consider putting an explicit re-raise after this call, in\n-      --  the generated code. That way we could eliminate the\n-      --  code here that reraises the exception.\n+      --  Consider phasing out Complete_Rendezvous in favor of direct call to\n+      --  this with Ada.Exceptions.Null_ID. See code expansion examples for\n+      --  Accept_Call and Selective_Wait. Also consider putting an explicit\n+      --  re-raise after this call, in the generated code. That way we could\n+      --  eliminate the code here that reraises the exception.\n \n-      --  The deferral level is critical here,\n-      --  since we want to raise an exception or allow abort to take\n-      --  place, if there is an exception or abort pending.\n+      --  The deferral level is critical here, since we want to raise an\n+      --  exception or allow abort to take place, if there is an exception or\n+      --  abort pending.\n \n       pragma Debug\n        (Debug.Trace (Self_Id, \"Exceptional_Complete_Rendezvous\", 'R'));\n \n       if Ex = Ada.Exceptions.Null_Id then\n-         --  The call came from normal end-of-rendezvous,\n-         --  so abort is not yet deferred.\n+\n+         --  The call came from normal end-of-rendezvous, so abort is not yet\n+         --  deferred.\n \n          if Parameters.Runtime_Traces then\n             Send_Trace_Info (M_RDV_Complete, Entry_Call.Self);\n@@ -555,13 +554,14 @@ package body System.Tasking.Rendezvous is\n          Initialization.Defer_Abort_Nestable (Self_Id);\n \n       elsif ZCX_By_Default then\n+\n          --  With ZCX, aborts are not automatically deferred in handlers\n \n          Initialization.Defer_Abort_Nestable (Self_Id);\n       end if;\n \n-      --  We need to clean up any accepts which Self may have\n-      --  been serving when it was aborted.\n+      --  We need to clean up any accepts which Self may have been serving when\n+      --  it was aborted.\n \n       if Ex = Standard'Abort_Signal'Identity then\n          if Single_Lock then\n@@ -579,8 +579,8 @@ package body System.Tasking.Rendezvous is\n             Caller := Entry_Call.Self;\n \n             --  Take write lock. This follows the lock precedence rule that\n-            --  Caller may be locked while holding lock of Acceptor.\n-            --  Complete the call abnormally, with exception.\n+            --  Caller may be locked while holding lock of Acceptor. Complete\n+            --  the call abnormally, with exception.\n \n             STPO.Write_Lock (Caller);\n             Initialization.Wakeup_Entry_Caller (Self_Id, Entry_Call, Done);\n@@ -596,13 +596,15 @@ package body System.Tasking.Rendezvous is\n          Caller := Entry_Call.Self;\n \n          if Entry_Call.Needs_Requeue then\n-            --  We dare not lock Self_Id at the same time as Caller,\n-            --  for fear of deadlock.\n+\n+            --  We dare not lock Self_Id at the same time as Caller, for fear\n+            --  of deadlock.\n \n             Entry_Call.Needs_Requeue := False;\n             Self_Id.Common.Call := Entry_Call.Acceptor_Prev_Call;\n \n             if Entry_Call.Called_Task /= null then\n+\n                --  Requeue to another task entry\n \n                if Single_Lock then\n@@ -698,6 +700,7 @@ package body System.Tasking.Rendezvous is\n       --  ??? Do we need to give precedence to Program_Error that might be\n       --  raised due to failure of finalization, over Tasking_Error from\n       --  failure of requeue?\n+\n    end Exceptional_Complete_Rendezvous;\n \n    -------------------------------------\n@@ -732,7 +735,6 @@ package body System.Tasking.Rendezvous is\n    is\n       Self_Id    : constant Task_Id := STPO.Self;\n       Entry_Call : constant Entry_Call_Link := Self_Id.Common.Call;\n-\n    begin\n       Initialization.Defer_Abort (Self_Id);\n       Entry_Call.Needs_Requeue := True;\n@@ -826,6 +828,7 @@ package body System.Tasking.Rendezvous is\n \n       case Treatment is\n          when Accept_Alternative_Selected =>\n+\n             --  Ready to rendezvous\n \n             Uninterpreted_Data := Self_Id.Common.Call.Uninterpreted_Data;\n@@ -907,6 +910,7 @@ package body System.Tasking.Rendezvous is\n             STPO.Unlock (Self_Id);\n \n          when Terminate_Selected =>\n+\n             --  Terminate alternative is open\n \n             Self_Id.Open_Accepts := Open_Accepts;\n@@ -925,13 +929,12 @@ package body System.Tasking.Rendezvous is\n             pragma Assert (Self_Id.Open_Accepts = null);\n \n             if Self_Id.Terminate_Alternative then\n-               --  An entry call should have reset this to False,\n-               --  so we must be aborted.\n-               --  We cannot be in an async. select, since that\n-               --  is not legal, so the abort must be of the entire\n-               --  task.  Therefore, we do not need to cancel the\n-               --  terminate alternative.  The cleanup will be done\n-               --  in Complete_Master.\n+\n+               --  An entry call should have reset this to False, so we must be\n+               --  aborted. We cannot be in an async. select, since that is not\n+               --  legal, so the abort must be of the entire task. Therefore,\n+               --  we do not need to cancel the terminate alternative. The\n+               --  cleanup will be done in Complete_Master.\n \n                pragma Assert (Self_Id.Pending_ATC_Level = 0);\n                pragma Assert (Self_Id.Awake_Count = 0);\n@@ -972,6 +975,7 @@ package body System.Tasking.Rendezvous is\n             STPO.Unlock (Self_Id);\n \n          when No_Alternative_Open =>\n+\n             --  In this case, Index will be No_Rendezvous on return, which\n             --  should cause a Program_Error if it is not a Delay_Mode.\n \n@@ -1008,10 +1012,13 @@ package body System.Tasking.Rendezvous is\n          Unlock_RTS;\n       end if;\n \n-      --  Caller has been chosen.\n+      --  Caller has been chosen\n+\n       --  Self_Id.Common.Call should already be updated by the Caller.\n+\n       --  Self_Id.Chosen_Index should either be updated by the Caller\n       --  or by Test_Selective_Wait.\n+\n       --  On return, we sill start rendezvous unless the accept body is\n       --  null. In the latter case, we will have already completed the RV.\n \n@@ -1087,10 +1094,10 @@ package body System.Tasking.Rendezvous is\n    begin\n       --  Find out whether Entry_Call can be accepted immediately\n \n-      --  If the Acceptor is not callable, return False.\n-      --  If the rendezvous can start, initiate it.\n-      --  If the accept-body is trivial, also complete the rendezvous.\n-      --  If the acceptor is not ready, enqueue the call.\n+      --    If the Acceptor is not callable, return False.\n+      --    If the rendezvous can start, initiate it.\n+      --    If the accept-body is trivial, also complete the rendezvous.\n+      --    If the acceptor is not ready, enqueue the call.\n \n       --  This should have a special case for Accept_Call and Accept_Trivial,\n       --  so that we don't have the loop setup overhead, below.\n@@ -1364,12 +1371,12 @@ package body System.Tasking.Rendezvous is\n             raise Tasking_Error;\n          end if;\n \n-         --  The following is special for async. entry calls.\n-         --  If the call was not queued abortably, we need to wait until\n-         --  it is before proceeding with the abortable part.\n+         --  The following is special for async. entry calls. If the call was\n+         --  not queued abortably, we need to wait until it is before\n+         --  proceeding with the abortable part.\n \n-         --  Wait_Until_Abortable can be called unconditionally here,\n-         --  but it is expensive.\n+         --  Wait_Until_Abortable can be called unconditionally here, but it is\n+         --  expensive.\n \n          if Entry_Call.State < Was_Abortable then\n             Entry_Calls.Wait_Until_Abortable (Self_Id, Entry_Call);\n@@ -1490,15 +1497,16 @@ package body System.Tasking.Rendezvous is\n \n       case Treatment is\n          when Accept_Alternative_Selected =>\n-            --  Ready to rendezvous\n-            --  In this case the accept body is not Null_Body. Defer abort\n-            --  until it gets into the accept body.\n+\n+            --  Ready to rendezvous. In this case the accept body is not\n+            --  Null_Body. Defer abort until it gets into the accept body.\n \n             Uninterpreted_Data := Self_Id.Common.Call.Uninterpreted_Data;\n             Initialization.Defer_Abort (Self_Id);\n             STPO.Unlock (Self_Id);\n \n          when Accept_Alternative_Completed =>\n+\n             --  Rendezvous is over\n \n             if Parameters.Runtime_Traces then\n@@ -1599,14 +1607,16 @@ package body System.Tasking.Rendezvous is\n             STPO.Unlock (Self_Id);\n \n          when No_Alternative_Open =>\n+\n             --  In this case, Index will be No_Rendezvous on return. We sleep\n             --  for the time we need to.\n+\n             --  Wait for a signal or timeout. A wakeup can be made\n             --  for several reasons:\n-            --  1) Delay is expired\n-            --  2) Pending_Action needs to be checked\n-            --     (Abort, Priority change)\n-            --  3) Spurious wakeup\n+            --    1) Delay is expired\n+            --    2) Pending_Action needs to be checked\n+            --       (Abort, Priority change)\n+            --    3) Spurious wakeup\n \n             Self_Id.Open_Accepts := null;\n             Self_Id.Common.State := Acceptor_Delay_Sleep;\n@@ -1619,7 +1629,9 @@ package body System.Tasking.Rendezvous is\n             STPO.Unlock (Self_Id);\n \n          when others =>\n+\n             --  Should never get here\n+\n             pragma Assert (False);\n             null;\n       end case;"}, {"sha": "8aeabc2efbba3f9cd32c8c2733706156b9f439fc", "filename": "gcc/ada/s-tpobop.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fs-tpobop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fs-tpobop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpobop.adb?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -258,9 +258,11 @@ package body System.Tasking.Protected_Objects.Operations is\n             --  enabled for its remaining life.\n \n             Self_Id := STPO.Self;\n+\n             if not ZCX_By_Default then\n                Initialization.Undefer_Abort_Nestable (Self_Id);\n             end if;\n+\n             Transfer_Occurrence\n               (Entry_Call.Self.Common.Compiler_Data.Current_Excep'Access,\n                Self_Id.Common.Compiler_Data.Current_Excep);\n@@ -272,7 +274,9 @@ package body System.Tasking.Protected_Objects.Operations is\n       end if;\n \n       if Runtime_Traces then\n+\n          --  ??? Entry_Call can be null\n+\n          Send_Trace_Info (PO_Done, Entry_Call.Self);\n       end if;\n    end Exceptional_Complete_Entry_Body;"}, {"sha": "b0ea4da08ec82c938b7883a871a287221972bc7a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25faf861535de75e1d971df545233bea29e2a8/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=cb25faf861535de75e1d971df545233bea29e2a8", "patch": "@@ -1544,7 +1544,7 @@ package body Sem_Ch13 is\n       --  has the proper type structure.\n \n       function Check_Primitive_Function (Subp : Entity_Id) return Boolean;\n-      --  Common legality check for the previoous two\n+      --  Common legality check for the previous two\n \n       -----------------------------------\n       -- Analyze_Stream_TSS_Definition --"}]}