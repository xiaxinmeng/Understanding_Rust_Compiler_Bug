{"sha": "fa41c305973315be3e7dbc10a7ae7590ccfbc62c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE0MWMzMDU5NzMzMTViZTNlN2RiYzEwYTdhZTc1OTBjY2ZiYzYyYw==", "commit": {"author": {"name": "Edmar Wienskoski", "email": "edmar@freescale.com", "date": "2008-02-24T14:38:03Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2008-02-24T14:38:03Z"}, "message": "config.gcc (powerpc*-*-*): Add new cores e300c2 and e300c3.\n\n2008-02-21  Edmar Wienskoski  <edmar@freescale.com>\n\n        * config.gcc (powerpc*-*-*): Add new cores e300c2 and e300c3.\n        * config/rs6000/e300c2c3.md: New file.\n        * config/rs6000/rs6000.c (processor_costs): Add new costs for\n        e300c2 and e300c3.\n        (rs6000_override_options): Add e300c2 and e300c3 cases to\n        processor_target_table. Do not allow usage of Altivec or Spe\n        with e300 cores. Initialize rs6000_cost for e300c2 and e300c3.\n        (rs6000_issue_rate): Set issue rate for e300c2 and e300c3.\n        * config/rs6000/rs6000.h (processor_type): Add\n        PROCESSOR_PPCE300C2 and PROCESSOR_PPCE300C3.\n        (ASM_CPU_SPEC): Add e300c2 and e300c3.\n        * config/rs6000/rs6000.md (define_attr \"cpu\"): Add ppce300c2\n        and ppce300c3. Include e300c2c3.md.\n\nFrom-SVN: r132589", "tree": {"sha": "8454006da6b5c985fa586b1d8180ba0dfd3b1e0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8454006da6b5c985fa586b1d8180ba0dfd3b1e0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa41c305973315be3e7dbc10a7ae7590ccfbc62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa41c305973315be3e7dbc10a7ae7590ccfbc62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa41c305973315be3e7dbc10a7ae7590ccfbc62c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/comments", "author": null, "committer": null, "parents": [{"sha": "a94caabf5ae9907e954fe20e4af062eebb5bbe46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94caabf5ae9907e954fe20e4af062eebb5bbe46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a94caabf5ae9907e954fe20e4af062eebb5bbe46"}], "stats": {"total": 246, "additions": 244, "deletions": 2}, "files": [{"sha": "fad5a2e1d0c3082bae61cdf5e2731f038ba555b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa41c305973315be3e7dbc10a7ae7590ccfbc62c", "patch": "@@ -1,3 +1,19 @@\n+2008-02-21  Edmar Wienskoski  <edmar@freescale.com>\n+\n+\t* config.gcc (powerpc*-*-*): Add new cores e300c2 and e300c3.\n+\t* config/rs6000/e300c2c3.md: New file.\n+\t* config/rs6000/rs6000.c (processor_costs): Add new costs for\n+\te300c2 and e300c3.\n+\t(rs6000_override_options): Add e300c2 and e300c3 cases to\n+\tprocessor_target_table. Do not allow usage of Altivec or Spe\n+\twith e300 cores. Initialize rs6000_cost for e300c2 and e300c3.\n+\t(rs6000_issue_rate): Set issue rate for e300c2 and e300c3.\n+\t* config/rs6000/rs6000.h (processor_type): Add\n+\tPROCESSOR_PPCE300C2 and PROCESSOR_PPCE300C3.\n+\t(ASM_CPU_SPEC): Add e300c2 and e300c3.\n+\t* config/rs6000/rs6000.md (define_attr \"cpu\"): Add ppce300c2\n+\tand ppce300c3. Include e300c2c3.md.\n+\n 2008-02-23  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.h (CONSTANT_ALIGNMENT): Use STRICT_ALIGNMENT"}, {"sha": "5db8237467c8ce8eb0a04604be4fa3f0d4e0fc54", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=fa41c305973315be3e7dbc10a7ae7590ccfbc62c", "patch": "@@ -3130,7 +3130,7 @@ case \"${target}\" in\n \t\t\t| rios | rios1 | rios2 | rsc | rsc1 | rs64a \\\n \t\t\t| 401 | 403 | 405 | 405fp | 440 | 440fp | 505 \\\n \t\t\t| 601 | 602 | 603 | 603e | ec603e | 604 \\\n-\t\t\t| 604e | 620 | 630 | 740 | 750 | 7400 | 7450 \\\n+\t\t\t| 604e | 620 | 630 | 740 | 750 | 7400 | 7450 | e300c[23] \\\n \t\t\t| 854[08] | 801 | 821 | 823 | 860 | 970 | G3 | G4 | G5 | cell)\n \t\t\t\t# OK\n \t\t\t\t;;"}, {"sha": "31bf14ce31422b0ad15d5c92bfbce8b2203100e6", "filename": "gcc/config/rs6000/e300c2c3.md", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md?ref=fa41c305973315be3e7dbc10a7ae7590ccfbc62c", "patch": "@@ -0,0 +1,189 @@\n+;; Pipeline description for Motorola PowerPC e300c3 core.\n+;;   Copyright (C) 2008 Free Software Foundation, Inc.\n+;;   Contributed by Edmar Wienskoski (edmar@freescale.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"ppce300c3_most,ppce300c3_long,ppce300c3_retire\")\n+(define_cpu_unit \"ppce300c3_decode_0,ppce300c3_decode_1\" \"ppce300c3_most\")\n+\n+;; We don't simulate general issue queue (GIC).  If we have SU insn\n+;; and then SU1 insn, they can not be issued on the same cycle\n+;; (although SU1 insn and then SU insn can be issued) because the SU\n+;; insn will go to SU1 from GIC0 entry.  Fortunately, the first cycle\n+;; multipass insn scheduling will find the situation and issue the SU1\n+;; insn and then the SU insn.\n+(define_cpu_unit \"ppce300c3_issue_0,ppce300c3_issue_1\"   \"ppce300c3_most\")\n+\n+;; We could describe completion buffers slots in combination with the\n+;; retirement units and the order of completion but the result\n+;; automaton would behave in the same way because we can not describe\n+;; real latency time with taking in order completion into account.\n+;; Actually we could define the real latency time by querying reserved\n+;; automaton units but the current scheduler uses latency time before\n+;; issuing insns and making any reservations.\n+;;\n+;; So our description is aimed to achieve a insn schedule in which the\n+;; insns would not wait in the completion buffer.\n+(define_cpu_unit \"ppce300c3_retire_0,ppce300c3_retire_1\" \"ppce300c3_retire\")\n+\n+;; Branch unit:\n+(define_cpu_unit \"ppce300c3_bu\" \"ppce300c3_most\")\n+\n+;; IU:\n+(define_cpu_unit \"ppce300c3_iu0_stage0,ppce300c3_iu1_stage0\" \"ppce300c3_most\")\n+\n+;; IU: This used to describe non-pipelined division.\n+(define_cpu_unit \"ppce300c3_mu_div\" \"ppce300c3_long\")\n+\n+;; SRU:\n+(define_cpu_unit \"ppce300c3_sru_stage0\" \"ppce300c3_most\")\n+\n+;; Here we simplified LSU unit description not describing the stages.\n+(define_cpu_unit \"ppce300c3_lsu\" \"ppce300c3_most\")\n+\n+;; FPU:\n+(define_cpu_unit \"ppce300c3_fpu\" \"ppce300c3_most\")\n+\n+;; The following units are used to make automata deterministic\n+(define_cpu_unit \"present_ppce300c3_decode_0\" \"ppce300c3_most\")\n+(define_cpu_unit \"present_ppce300c3_issue_0\" \"ppce300c3_most\")\n+(define_cpu_unit \"present_ppce300c3_retire_0\" \"ppce300c3_retire\")\n+(define_cpu_unit \"present_ppce300c3_iu0_stage0\" \"ppce300c3_most\")\n+\n+;; The following sets to make automata deterministic when option ndfa is used.\n+(presence_set \"present_ppce300c3_decode_0\" \"ppce300c3_decode_0\")\n+(presence_set \"present_ppce300c3_issue_0\" \"ppce300c3_issue_0\")\n+(presence_set \"present_ppce300c3_retire_0\" \"ppce300c3_retire_0\")\n+(presence_set \"present_ppce300c3_iu0_stage0\" \"ppce300c3_iu0_stage0\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"ppce300c3_decode\"\n+    \"ppce300c3_decode_0|ppce300c3_decode_1+present_ppce300c3_decode_0\")\n+(define_reservation \"ppce300c3_issue\"\n+    \"ppce300c3_issue_0|ppce300c3_issue_1+present_ppce300c3_issue_0\")\n+(define_reservation \"ppce300c3_retire\"\n+   \"ppce300c3_retire_0|ppce300c3_retire_1+present_ppce300c3_retire_0\")\n+(define_reservation \"ppce300c3_iu_stage0\"\n+   \"ppce300c3_iu0_stage0|ppce300c3_iu1_stage0+present_ppce300c3_iu0_stage0\")\n+\n+;; Compares can be executed either one of the IU or SRU\n+(define_insn_reservation \"ppce300c3_cmp\" 1\n+  (and (eq_attr \"type\" \"cmp,compare,delayed_compare,fast_compare\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+(ppce300c3_iu_stage0|ppce300c3_sru_stage0) \\\n+        +ppce300c3_retire\")\n+\n+;; Other one cycle IU insns\n+(define_insn_reservation \"ppce300c3_iu\" 1\n+  (and (eq_attr \"type\" \"integer,insert_word\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_iu_stage0+ppce300c3_retire\")\n+\n+;; Branch.  Actually this latency time is not used by the scheduler.\n+(define_insn_reservation \"ppce300c3_branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_bu,ppce300c3_retire\")\n+\n+;; Multiply is non-pipelined but can be executed in any IU\n+(define_insn_reservation \"ppce300c3_multiply\" 2\n+  (and (eq_attr \"type\" \"imul,imul2,imul3,imul_compare\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_iu_stage0, \\\n+   ppce300c3_iu_stage0+ppce300c3_retire\")\n+\n+;; Divide.  We use the average latency time here.  We omit reserving a\n+;; retire unit because of the result automata will be huge.\n+(define_insn_reservation \"ppce300c3_divide\" 20\n+  (and (eq_attr \"type\" \"idiv\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_iu_stage0+ppce300c3_mu_div,\\\n+   ppce300c3_mu_div*19\")\n+\n+;; CR logical\n+(define_insn_reservation \"ppce300c3_cr_logical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_sru_stage0+ppce300c3_retire\")\n+\n+;; Mfcr\n+(define_insn_reservation \"ppce300c3_mfcr\" 1\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_sru_stage0+ppce300c3_retire\")\n+\n+;; Mtcrf\n+(define_insn_reservation \"ppce300c3_mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_sru_stage0+ppce300c3_retire\")\n+\n+;; Mtjmpr\n+(define_insn_reservation \"ppce300c3_mtjmpr\" 1\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_sru_stage0+ppce300c3_retire\")\n+\n+;; Float point instructions\n+(define_insn_reservation \"ppce300c3_fpcompare\" 3\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,nothing,ppce300c3_retire\")\n+\n+(define_insn_reservation \"ppce300c3_fp\" 3\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,nothing,ppce300c3_retire\")\n+\n+(define_insn_reservation \"ppce300c3_dmul\" 4\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,ppce300c3_fpu,nothing,ppce300c3_retire\")\n+\n+; Divides are not pipelined\n+(define_insn_reservation \"ppce300c3_sdiv\" 18\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,ppce300c3_fpu*17\")\n+\n+(define_insn_reservation \"ppce300c3_ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,ppce300c3_fpu*32\")\n+\n+;; Loads\n+(define_insn_reservation \"ppce300c3_load\" 2\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")\n+\n+(define_insn_reservation \"ppce300c3_fpload\" 2\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")\n+\n+;; Stores.\n+(define_insn_reservation \"ppce300c3_store\" 2\n+  (and (eq_attr \"type\" \"store,store_ux,store_u\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")\n+\n+(define_insn_reservation \"ppce300c3_fpstore\" 2\n+  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")"}, {"sha": "cdb07aa41d161d8c4900f80ca98e84239c1acae1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fa41c305973315be3e7dbc10a7ae7590ccfbc62c", "patch": "@@ -669,6 +669,21 @@ struct processor_costs ppc8540_cost = {\n   1,\t\t\t/* prefetch streams /*/\n };\n \n+/* Instruction costs on E300C2 and E300C3 cores.  */\n+static const\n+struct processor_costs ppce300c2c3_cost = {\n+  COSTS_N_INSNS (4),    /* mulsi */\n+  COSTS_N_INSNS (4),    /* mulsi_const */\n+  COSTS_N_INSNS (4),    /* mulsi_const9 */\n+  COSTS_N_INSNS (4),    /* muldi */\n+  COSTS_N_INSNS (19),   /* divsi */\n+  COSTS_N_INSNS (19),   /* divdi */\n+  COSTS_N_INSNS (3),    /* fp */\n+  COSTS_N_INSNS (4),    /* dmul */\n+  COSTS_N_INSNS (18),   /* sdiv */\n+  COSTS_N_INSNS (33),   /* ddiv */\n+};\n+\n /* Instruction costs on POWER4 and POWER5 processors.  */\n static const\n struct processor_costs power4_cost = {\n@@ -1420,6 +1435,8 @@ rs6000_override_options (const char *default_cpu)\n \t {\"8540\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN},\n \t /* 8548 has a dummy entry for now.  */\n \t {\"8548\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN},\n+\t {\"e300c2\", PROCESSOR_PPCE300C2, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n+\t {\"e300c3\", PROCESSOR_PPCE300C3, POWERPC_BASE_MASK},\n \t {\"860\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n \t {\"970\", PROCESSOR_POWER4,\n \t  POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64},\n@@ -1526,6 +1543,14 @@ rs6000_override_options (const char *default_cpu)\n   if (TARGET_E500)\n     rs6000_isel = 1;\n \n+  if (rs6000_cpu == PROCESSOR_PPCE300C2 || rs6000_cpu == PROCESSOR_PPCE300C3)\n+    {\n+      if (TARGET_ALTIVEC)\n+\terror (\"AltiVec not supported in this target\");\n+      if (TARGET_SPE)\n+\terror (\"Spe not supported in this target\");\n+    }\n+\n   /* If we are optimizing big endian systems for space, use the load/store\n      multiple and string instructions.  */\n   if (BYTES_BIG_ENDIAN && optimize_size)\n@@ -1845,6 +1870,11 @@ rs6000_override_options (const char *default_cpu)\n \trs6000_cost = &ppc8540_cost;\n \tbreak;\n \n+      case PROCESSOR_PPCE300C2:\n+      case PROCESSOR_PPCE300C3:\n+\trs6000_cost = &ppce300c2c3_cost;\n+\tbreak;\n+\n       case PROCESSOR_POWER4:\n       case PROCESSOR_POWER5:\n \trs6000_cost = &power4_cost;\n@@ -18527,6 +18557,8 @@ rs6000_issue_rate (void)\n   case CPU_PPC7400:\n   case CPU_PPC8540:\n   case CPU_CELL:\n+  case CPU_PPCE300C2:\n+  case CPU_PPCE300C3:\n     return 2;\n   case CPU_RIOS2:\n   case CPU_PPC604:"}, {"sha": "f660112267e00c82c45a66c2856673abbd8e358d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=fa41c305973315be3e7dbc10a7ae7590ccfbc62c", "patch": "@@ -117,6 +117,8 @@\n %{mcpu=G5: -mpower4 -maltivec} \\\n %{mcpu=8540: -me500} \\\n %{mcpu=8548: -me500} \\\n+%{mcpu=e300c2: -me300} \\\n+%{mcpu=e300c3: -me300} \\\n %{maltivec: -maltivec} \\\n -many\"\n \n@@ -262,6 +264,8 @@ enum processor_type\n    PROCESSOR_PPC7400,\n    PROCESSOR_PPC7450,\n    PROCESSOR_PPC8540,\n+   PROCESSOR_PPCE300C2,\n+   PROCESSOR_PPCE300C3,\n    PROCESSOR_POWER4,\n    PROCESSOR_POWER5,\n    PROCESSOR_POWER6,"}, {"sha": "777a1ecf46ddacc1f5c64bf3c29caa3d7e535151", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa41c305973315be3e7dbc10a7ae7590ccfbc62c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fa41c305973315be3e7dbc10a7ae7590ccfbc62c", "patch": "@@ -133,7 +133,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,power4,power5,power6,cell\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppce300c2,ppce300c3,power4,power5,power6,cell\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n \n@@ -166,6 +166,7 @@\n (include \"7xx.md\")\n (include \"7450.md\")\n (include \"8540.md\")\n+(include \"e300c2c3.md\")\n (include \"power4.md\")\n (include \"power5.md\")\n (include \"power6.md\")"}]}