{"sha": "9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE5Zjc1OTRmZGQyZjc2ZTM5ZjJkYzIwYTE5ZjBmMWY1YTRiYzI5Yg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-07-12T23:02:23Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-07-12T23:02:23Z"}, "message": "alpha.c: Fix comment typos.\n\n\t* config/alpha/alpha.c: Fix comment typos.\n\t* config/alpha/alpha.md: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/arm/arm.md: Likewise.\n\t* config/arm/lib1funcs.asm: Likewise.\n\t* config/avr/avr.md: Likewise.\n\t* config/arm/README-interworking: Fix typos.\n\nFrom-SVN: r69277", "tree": {"sha": "3a60122c98885e0a910b8265b27201889c22bf06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a60122c98885e0a910b8265b27201889c22bf06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/comments", "author": null, "committer": null, "parents": [{"sha": "4ed432168c0acd8e572f3994ff906468954d4e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed432168c0acd8e572f3994ff906468954d4e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed432168c0acd8e572f3994ff906468954d4e1c"}], "stats": {"total": 60, "additions": 35, "deletions": 25}, "files": [{"sha": "956f9ca4e3d5216c4f454d43702b450f72ae02e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "patch": "@@ -1,3 +1,13 @@\n+2003-07-12  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/alpha/alpha.c: Fix comment typos.\n+\t* config/alpha/alpha.md: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/arm/arm.md: Likewise.\n+\t* config/arm/lib1funcs.asm: Likewise.\n+\t* config/avr/avr.md: Likewise.\n+\t* config/arm/README-interworking: Fix typos.\n+\n 2003-07-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-format.c: Fix comment formatting."}, {"sha": "92fe830b2d18282df6646cca4fa28e2d1acc3fb6", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "patch": "@@ -233,7 +233,7 @@ override_options (void)\n       flag_pic = 0;\n     }\n \n-  /* On Unicos/Mk, the native compiler consistenly generates /d suffices for \n+  /* On Unicos/Mk, the native compiler consistently generates /d suffices for \n      floating-point instructions.  Make that the default for this target.  */\n   if (TARGET_ABI_UNICOSMK)\n     alpha_fprm = ALPHA_FPRM_DYN;\n@@ -3481,7 +3481,7 @@ alpha_split_conditional_move (enum rtx_code code, rtx dest, rtx cond,\n      be shared.  */\n \n   if (f == 0 && exact_log2 (diff) > 0\n-      /* On EV6, we've got enough shifters to make non-arithmatic shifts\n+      /* On EV6, we've got enough shifters to make non-arithmetic shifts\n \t viable over a longer latency cmove.  On EV5, the E0 slot is a\n \t scarce resource, and on EV4 shift has the same latency as a cmove.  */\n       && (diff <= 8 || alpha_cpu == PROCESSOR_EV6))\n@@ -5120,7 +5120,7 @@ alpha_use_dfa_pipeline_interface (void)\n \n    For EV4, loads can be issued to either IB0 or IB1, thus we have 2\n    alternative schedules.  For EV5, we can choose between E0/E1 and\n-   FA/FM.  For EV6, an arithmatic insn can be issued to U0/U1/L0/L1.  */\n+   FA/FM.  For EV6, an arithmetic insn can be issued to U0/U1/L0/L1.  */\n \n static int\n alpha_multipass_dfa_lookahead (void)"}, {"sha": "6db16f711b297cb79e636917aceba3115ef3a417", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "patch": "@@ -120,7 +120,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \n ;; The ROUND_SUFFIX attribute marks which instructions require a\n ;; rounding-mode suffix.  The value NONE indicates no suffix,\n-;; the value NORMAL indicates a suffix controled by alpha_fprm.\n+;; the value NORMAL indicates a suffix controlled by alpha_fprm.\n \n (define_attr \"round_suffix\" \"none,normal,c\"\n   (const_string \"none\"))\n@@ -133,7 +133,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n ;;   V_SV_SVI\taccepts /v, /sv and /svi (cvttq only)\n ;;   U_SU_SUI\taccepts /u, /su and /sui (most fp instructions)\n ;;\n-;; The actual suffix emitted is controled by alpha_fptm.\n+;; The actual suffix emitted is controlled by alpha_fptm.\n \n (define_attr \"trap_suffix\" \"none,su,sui,v_sv,v_sv_svi,u_su_sui\"\n   (const_string \"none\"))"}, {"sha": "0a03cdc3c9d901e9ad0dae4165cc2f5e536f0184", "filename": "gcc/config/arm/README-interworking", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Farm%2FREADME-interworking", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Farm%2FREADME-interworking", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2FREADME-interworking?ref=9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "patch": "@@ -404,7 +404,7 @@ Instead the pseudo op is attached to a new label .real_start_of_<name>\n (where <name> is the name of the function) which indicates the start\n of the Thumb code.  This does have the interesting side effect in that\n if this function is now called from a Thumb mode piece of code\n-outsside of the current file, the linker will generate a calling stub\n+outside of the current file, the linker will generate a calling stub\n to switch from Thumb mode into ARM mode, and then this is immediately\n overridden by the function's header which switches back into Thumb\n mode. "}, {"sha": "747b93115dfc6a9f87afaf0f40e15a2a7e3e7280", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "patch": "@@ -452,7 +452,7 @@ static const struct processors all_architectures[] =\n   { NULL, 0 }\n };\n \n-/* This is a magic stucture.  The 'string' field is magically filled in\n+/* This is a magic structure.  The 'string' field is magically filled in\n    with a pointer to the value specified by the user on the command line\n    assuming that the user has specified such a value.  */\n \n@@ -10248,7 +10248,7 @@ arm_hard_regno_mode_ok (unsigned int regno, enum machine_mode mode)\n     return VALID_IWMMXT_REG_MODE (mode);\n \n   if (regno <= LAST_ARM_REGNUM)\n-    /* We allow any value to be stored in the general regisetrs.  */\n+    /* We allow any value to be stored in the general registers.  */\n     return 1;\n \n   if (   regno == FRAME_POINTER_REGNUM\n@@ -11648,7 +11648,7 @@ thumb_far_jump_used_p (int in_prologue)\n \t  && get_attr_far_jump (insn) == FAR_JUMP_YES\n \t  )\n \t{\n-\t  /* Record the fact that we have decied that\n+\t  /* Record the fact that we have decided that\n \t     the function does use far jumps.  */\n \t  cfun->machine->far_jump_used = 1;\n \t  return 1;"}, {"sha": "4a72c69ef3ca2671ed9c9d30501f2a2e710fd80b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "patch": "@@ -75,18 +75,18 @@\n    \t\t\t; and stack frame generation.  Operand 0 is the\n    \t\t\t; register to \"use\".\n    (UNSPEC_CHECK_ARCH 7); Set CCs to indicate 26-bit or 32-bit mode.\n-   (UNSPEC_WSHUFH    8) ; Used by the instrinsic form of the iWMMXt WSHUFH instruction.\n-   (UNSPEC_WACC      9) ; Used by the instrinsic form of the iWMMXt WACC instruction.\n-   (UNSPEC_TMOVMSK  10) ; Used by the instrinsic form of the iWMMXt TMOVMSK instruction.\n-   (UNSPEC_WSAD     11) ; Used by the instrinsic form of the iWMMXt WSAD instruction.\n-   (UNSPEC_WSADZ    12) ; Used by the instrinsic form of the iWMMXt WSADZ instruction.\n-   (UNSPEC_WMACS    13) ; Used by the instrinsic form of the iWMMXt WMACS instruction.\n-   (UNSPEC_WMACU    14) ; Used by the instrinsic form of the iWMMXt WMACU instruction.\n-   (UNSPEC_WMACSZ   15) ; Used by the instrinsic form of the iWMMXt WMACSZ instruction.\n-   (UNSPEC_WMACUZ   16) ; Used by the instrinsic form of the iWMMXt WMACUZ instruction.\n-   (UNSPEC_CLRDI    17) ; Used by the instrinsic form of the iWMMXt CLRDI instruction.\n-   (UNSPEC_WMADDS   18) ; Used by the instrinsic form of the iWMMXt WMADDS instruction.\n-   (UNSPEC_WMADDU   19) ; Used by the instrinsic form of the iWMMXt WMADDU instruction.\n+   (UNSPEC_WSHUFH    8) ; Used by the intrinsic form of the iWMMXt WSHUFH instruction.\n+   (UNSPEC_WACC      9) ; Used by the intrinsic form of the iWMMXt WACC instruction.\n+   (UNSPEC_TMOVMSK  10) ; Used by the intrinsic form of the iWMMXt TMOVMSK instruction.\n+   (UNSPEC_WSAD     11) ; Used by the intrinsic form of the iWMMXt WSAD instruction.\n+   (UNSPEC_WSADZ    12) ; Used by the intrinsic form of the iWMMXt WSADZ instruction.\n+   (UNSPEC_WMACS    13) ; Used by the intrinsic form of the iWMMXt WMACS instruction.\n+   (UNSPEC_WMACU    14) ; Used by the intrinsic form of the iWMMXt WMACU instruction.\n+   (UNSPEC_WMACSZ   15) ; Used by the intrinsic form of the iWMMXt WMACSZ instruction.\n+   (UNSPEC_WMACUZ   16) ; Used by the intrinsic form of the iWMMXt WMACUZ instruction.\n+   (UNSPEC_CLRDI    17) ; Used by the intrinsic form of the iWMMXt CLRDI instruction.\n+   (UNSPEC_WMADDS   18) ; Used by the intrinsic form of the iWMMXt WMADDS instruction.\n+   (UNSPEC_WMADDU   19) ; Used by the intrinsic form of the iWMMXt WMADDU instruction.\n   ]\n )\n \n@@ -243,7 +243,7 @@\n \n ; Only model the write buffer for ARM6 and ARM7.  Earlier processors don't\n ; have one.  Later ones, such as StrongARM, have write-back caches, so don't\n-; suffer blockages enough to warrent modelling this (and it can adversely\n+; suffer blockages enough to warrant modelling this (and it can adversely\n ; affect the schedule).\n (define_attr \"model_wbuf\" \"no,yes\" (const (symbol_ref \"arm_is_6_or_7\")))\n \n@@ -5106,7 +5106,7 @@\n \f\n \n ;; Compare & branch insns\n-;; The range calcualations are based as follows:\n+;; The range calculations are based as follows:\n ;; For forward branches, the address calculation returns the address of\n ;; the next instruction.  This is 2 beyond the branch instruction.\n ;; For backward branches, the address calculation returns the address of"}, {"sha": "0f35d8145c1a7f500b92e37a237b1b2e31391d9e", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "patch": "@@ -165,7 +165,7 @@ lr\t\t.req\tr14\n pc\t\t.req\tr15\n #endif\n /* ------------------------------------------------------------------------ */\n-/*\t\tBodies of the divsion and modulo routines.\t\t    */\n+/*\t\tBodies of the division and modulo routines.\t\t    */\n /* ------------------------------------------------------------------------ */\t\n .macro ARM_DIV_MOD_BODY modulo\n LSYM(Loop1):"}, {"sha": "ef449158c44c45841c6e87639606c33ad91f8a08", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=9a9f7594fdd2f76e39f2dc20a19f0f1f5a4bc29b", "patch": "@@ -2255,7 +2255,7 @@\n \n \n ;; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-;; This instructin sets Z flag\n+;; This instruction sets Z flag\n \n (define_insn \"sez\"\n   [(set (cc0) (const_int 0))]"}]}