{"sha": "ffe3a37f54ab866d85bdde48c2a32be5e09d8515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlM2EzN2Y1NGFiODY2ZDg1YmRkZTQ4YzJhMzJiZTVlMDlkODUxNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-07T18:08:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-08T08:48:03Z"}, "message": "middle-end/100951 - make sure to generate VECTOR_CST in lowering\n\nWhen vector lowering creates piecewise ops make sure to create\nVECTOR_CSTs instead of CONSTRUCTORs when possible.\n\ngcc/\n\n2021-06-07  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/100951\n\t* tree-vect-generic.c (expand_vector_piecewise): Build a\n\tVECTOR_CST if all elements are constant.\n\t(expand_vector_condition): Likewise.\n\t(lower_vec_perm): Likewise.\n\t(expand_vector_conversion): Likewise.\n\ngcc/testsuite/\n\n2021-06-07  H.J. Lu  <hjl.tools@gmail.com>\n\n\tPR middle-end/100951\n\t* gcc.target/i386/pr100951.c: New test.", "tree": {"sha": "a0539c012d9440a0fa53dc93773e625616f13082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0539c012d9440a0fa53dc93773e625616f13082"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffe3a37f54ab866d85bdde48c2a32be5e09d8515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe3a37f54ab866d85bdde48c2a32be5e09d8515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe3a37f54ab866d85bdde48c2a32be5e09d8515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe3a37f54ab866d85bdde48c2a32be5e09d8515/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec2174c6957e97bd69c001a782cd52b98e6ba2fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2174c6957e97bd69c001a782cd52b98e6ba2fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec2174c6957e97bd69c001a782cd52b98e6ba2fb"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "16d8bafa6637d9c0c5b2a4869823efb68714eeba", "filename": "gcc/testsuite/gcc.target/i386/pr100951.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe3a37f54ab866d85bdde48c2a32be5e09d8515/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100951.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe3a37f54ab866d85bdde48c2a32be5e09d8515/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100951.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100951.c?ref=ffe3a37f54ab866d85bdde48c2a32be5e09d8515", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -march=x86-64\" } */\n+\n+typedef short __attribute__((__vector_size__ (8 * sizeof (short)))) V;\n+V v, w;\n+\n+void\n+foo (void)\n+{\n+  w = __builtin_shuffle (v != v, 0 < (V) {}, (V) {192} >> 5);\n+}\n+\n+/* { dg-final { scan-assembler-not \"punpcklwd\" } } */\n+/* { dg-final { scan-assembler-not \"pshufd\" } } */\n+/* { dg-final { scan-assembler-times \"pxor\\[\\\\t \\]%xmm\\[0-9\\]+, %xmm\\[0-9\\]+\" 1 } } */"}, {"sha": "5f3f9fa005e71f97f96c37a5867015eba6fa7c1b", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe3a37f54ab866d85bdde48c2a32be5e09d8515/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe3a37f54ab866d85bdde48c2a32be5e09d8515/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=ffe3a37f54ab866d85bdde48c2a32be5e09d8515", "patch": "@@ -328,16 +328,22 @@ expand_vector_piecewise (gimple_stmt_iterator *gsi, elem_op_func f,\n   if (!ret_type)\n     ret_type = type;\n   vec_alloc (v, (nunits + delta - 1) / delta);\n+  bool constant_p = true;\n   for (i = 0; i < nunits;\n        i += delta, index = int_const_binop (PLUS_EXPR, index, part_width))\n     {\n       tree result = f (gsi, inner_type, a, b, index, part_width, code,\n \t\t       ret_type);\n+      if (!CONSTANT_CLASS_P (result))\n+\tconstant_p = false;\n       constructor_elt ce = {NULL_TREE, result};\n       v->quick_push (ce);\n     }\n \n-  return build_constructor (ret_type, v);\n+  if (constant_p)\n+    return build_vector_from_ctor (ret_type, v);\n+  else\n+    return build_constructor (ret_type, v);\n }\n \n /* Expand a vector operation to scalars with the freedom to use\n@@ -1105,6 +1111,7 @@ expand_vector_condition (gimple_stmt_iterator *gsi, bitmap dce_ssa_names)\n \n   int nunits = nunits_for_known_piecewise_op (type);\n   vec_alloc (v, nunits);\n+  bool constant_p = true;\n   for (int i = 0; i < nunits; i++)\n     {\n       tree aa, result;\n@@ -1129,6 +1136,8 @@ expand_vector_condition (gimple_stmt_iterator *gsi, bitmap dce_ssa_names)\n       else\n \taa = tree_vec_extract (gsi, cond_type, a, width, index);\n       result = gimplify_build3 (gsi, COND_EXPR, inner_type, aa, bb, cc);\n+      if (!CONSTANT_CLASS_P (result))\n+\tconstant_p = false;\n       constructor_elt ce = {NULL_TREE, result};\n       v->quick_push (ce);\n       index = int_const_binop (PLUS_EXPR, index, width);\n@@ -1138,7 +1147,10 @@ expand_vector_condition (gimple_stmt_iterator *gsi, bitmap dce_ssa_names)\n \tcomp_index = int_const_binop (PLUS_EXPR, comp_index, comp_width);\n     }\n \n-  constr = build_constructor (type, v);\n+  if (constant_p)\n+    constr = build_vector_from_ctor (type, v);\n+  else\n+    constr = build_constructor (type, v);\n   gimple_assign_set_rhs_from_tree (gsi, constr);\n   update_stmt (gsi_stmt (*gsi));\n \n@@ -1578,6 +1590,7 @@ lower_vec_perm (gimple_stmt_iterator *gsi)\n               \"vector shuffling operation will be expanded piecewise\");\n \n   vec_alloc (v, elements);\n+  bool constant_p = true;\n   for (i = 0; i < elements; i++)\n     {\n       si = size_int (i);\n@@ -1639,10 +1652,15 @@ lower_vec_perm (gimple_stmt_iterator *gsi)\n \t    t = v0_val;\n         }\n \n+      if (!CONSTANT_CLASS_P (t))\n+\tconstant_p = false;\n       CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, t);\n     }\n \n-  constr = build_constructor (vect_type, v);\n+  if (constant_p)\n+    constr = build_vector_from_ctor (vect_type, v);\n+  else\n+    constr = build_constructor (vect_type, v);\n   gimple_assign_set_rhs_from_tree (gsi, constr);\n   update_stmt (gsi_stmt (*gsi));\n }\n@@ -2014,6 +2032,7 @@ expand_vector_conversion (gimple_stmt_iterator *gsi)\n \t\t}\n \n \t      vec_alloc (v, (nunits + delta - 1) / delta * 2);\n+\t      bool constant_p = true;\n \t      for (i = 0; i < nunits;\n \t\t   i += delta, index = int_const_binop (PLUS_EXPR, index,\n \t\t\t\t\t\t\tpart_width))\n@@ -2024,12 +2043,19 @@ expand_vector_conversion (gimple_stmt_iterator *gsi)\n \t\t\t\t\t  index);\n \t\t  tree result = gimplify_build1 (gsi, code1, cretd_type, a);\n \t\t  constructor_elt ce = { NULL_TREE, result };\n+\t\t  if (!CONSTANT_CLASS_P (ce.value))\n+\t\t    constant_p = false;\n \t\t  v->quick_push (ce);\n \t\t  ce.value = gimplify_build1 (gsi, code2, cretd_type, a);\n+\t\t  if (!CONSTANT_CLASS_P (ce.value))\n+\t\t    constant_p = false;\n \t\t  v->quick_push (ce);\n \t\t}\n \n-\t      new_rhs = build_constructor (ret_type, v);\n+\t      if (constant_p)\n+\t\tnew_rhs = build_vector_from_ctor (ret_type, v);\n+\t      else\n+\t\tnew_rhs = build_constructor (ret_type, v);\n \t      g = gimple_build_assign (lhs, new_rhs);\n \t      gsi_replace (gsi, g, false);\n \t      return;"}]}