{"sha": "c199f329bdc5dd12afb76f3a58dfb8fd094577d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5OWYzMjliZGM1ZGQxMmFmYjc2ZjNhNThkZmI4ZmQwOTQ1NzdkMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-12-06T00:08:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-12-06T00:08:47Z"}, "message": "Do not clear m_vr and bits in ipa_set_jf_unknown.\n\n\t* ipa-prop.c (ipa_set_jf_unknown): Do not clear bits and m_vr.\n\t(detect_type_change_from_memory_writes): Remoe parameter JFUNC.\n\t(detect_type_change): Likewise.\n\t(detect_type_change_ssa): Likewise.\n\t(ipa_analyze_virtual_call_uses): Update.\n\nFrom-SVN: r279025", "tree": {"sha": "016e6fe04be691efea6a25ea51ad9f4bbc11ca2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/016e6fe04be691efea6a25ea51ad9f4bbc11ca2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c199f329bdc5dd12afb76f3a58dfb8fd094577d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c199f329bdc5dd12afb76f3a58dfb8fd094577d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c199f329bdc5dd12afb76f3a58dfb8fd094577d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c199f329bdc5dd12afb76f3a58dfb8fd094577d3/comments", "author": null, "committer": null, "parents": [{"sha": "81884594ce15b7117d136380c8d0661b57ab558c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81884594ce15b7117d136380c8d0661b57ab558c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81884594ce15b7117d136380c8d0661b57ab558c"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "ba64864f1d2b1bddd98a37a5e83c1f8e7b0c7c2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199f329bdc5dd12afb76f3a58dfb8fd094577d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199f329bdc5dd12afb76f3a58dfb8fd094577d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c199f329bdc5dd12afb76f3a58dfb8fd094577d3", "patch": "@@ -1,3 +1,11 @@\n+2019-12-05  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-prop.c (ipa_set_jf_unknown): Do not clear bits and m_vr.\n+\t(detect_type_change_from_memory_writes): Remoe parameter JFUNC.\n+\t(detect_type_change): Likewise.\n+\t(detect_type_change_ssa): Likewise.\n+\t(ipa_analyze_virtual_call_uses): Update.\n+\n 2019-12-05  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/nios2/linux.h (LINK_EH_SPEC): Define."}, {"sha": "547c2edef47781e5904e88d62796a3dfb4701772", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199f329bdc5dd12afb76f3a58dfb8fd094577d3/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199f329bdc5dd12afb76f3a58dfb8fd094577d3/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=c199f329bdc5dd12afb76f3a58dfb8fd094577d3", "patch": "@@ -512,8 +512,6 @@ static void\n ipa_set_jf_unknown (struct ipa_jump_func *jfunc)\n {\n   jfunc->type = IPA_JF_UNKNOWN;\n-  jfunc->bits = NULL;\n-  jfunc->m_vr = NULL;\n }\n \n /* Set JFUNC to be a copy of another jmp (to be used by jump function\n@@ -768,8 +766,7 @@ param_type_may_change_p (tree function, tree arg, gimple *call)\n \n /* Detect whether the dynamic type of ARG of COMP_TYPE has changed (before\n    callsite CALL) by looking for assignments to its virtual table pointer.  If\n-   it is, return true and fill in the jump function JFUNC with relevant type\n-   information or set it to unknown.  ARG is the object itself (not a pointer\n+   it is, return true.  ARG is the object itself (not a pointer\n    to it, unless dereferenced).  BASE is the base of the memory access as\n    returned by get_ref_base_and_extent, as is the offset. \n \n@@ -779,7 +776,6 @@ param_type_may_change_p (tree function, tree arg, gimple *call)\n static bool\n detect_type_change_from_memory_writes (ipa_func_body_info *fbi, tree arg,\n \t\t\t\t       tree base, tree comp_type, gcall *call,\n-\t\t\t\t       struct ipa_jump_func *jfunc,\n \t\t\t\t       HOST_WIDE_INT offset)\n {\n   struct prop_type_change_info tci;\n@@ -818,19 +814,17 @@ detect_type_change_from_memory_writes (ipa_func_body_info *fbi, tree arg,\n   if (walked >= 0 && !tci.type_maybe_changed)\n     return false;\n \n-  ipa_set_jf_unknown (jfunc);\n   return true;\n }\n \n /* Detect whether the dynamic type of ARG of COMP_TYPE may have changed.\n-   If it is, return true and fill in the jump function JFUNC with relevant type\n-   information or set it to unknown.  ARG is the object itself (not a pointer\n+   If it is, return true.  ARG is the object itself (not a pointer\n    to it, unless dereferenced).  BASE is the base of the memory access as\n    returned by get_ref_base_and_extent, as is the offset.  */\n \n static bool\n detect_type_change (ipa_func_body_info *fbi, tree arg, tree base,\n-\t\t    tree comp_type, gcall *call, struct ipa_jump_func *jfunc,\n+\t\t    tree comp_type, gcall *call,\n \t\t    HOST_WIDE_INT offset)\n {\n   if (!flag_devirtualize)\n@@ -842,7 +836,7 @@ detect_type_change (ipa_func_body_info *fbi, tree arg, tree base,\n \t\t\t\t   call))\n     return false;\n   return detect_type_change_from_memory_writes (fbi, arg, base, comp_type,\n-\t\t\t\t\t\tcall, jfunc, offset);\n+\t\t\t\t\t\tcall, offset);\n }\n \n /* Like detect_type_change but ARG is supposed to be a non-dereferenced pointer\n@@ -851,7 +845,7 @@ detect_type_change (ipa_func_body_info *fbi, tree arg, tree base,\n \n static bool\n detect_type_change_ssa (ipa_func_body_info *fbi, tree arg, tree comp_type,\n-\t\t\tgcall *call, struct ipa_jump_func *jfunc)\n+\t\t\tgcall *call)\n {\n   gcc_checking_assert (TREE_CODE (arg) == SSA_NAME);\n   if (!flag_devirtualize\n@@ -865,7 +859,7 @@ detect_type_change_ssa (ipa_func_body_info *fbi, tree arg, tree comp_type,\n \t\tbuild_int_cst (ptr_type_node, 0));\n \n   return detect_type_change_from_memory_writes (fbi, arg, arg, comp_type,\n-\t\t\t\t\t\tcall, jfunc, 0);\n+\t\t\t\t\t\tcall, 0);\n }\n \n /* Callback of walk_aliased_vdefs.  Flags that it has been invoked to the\n@@ -2611,20 +2605,18 @@ ipa_analyze_virtual_call_uses (struct ipa_func_body_info *fbi,\n   class ipa_node_params *info = fbi->info;\n   if (SSA_NAME_IS_DEFAULT_DEF (obj))\n     {\n-      struct ipa_jump_func jfunc;\n       if (TREE_CODE (SSA_NAME_VAR (obj)) != PARM_DECL)\n \treturn;\n \n       anc_offset = 0;\n       index = ipa_get_param_decl_index (info, SSA_NAME_VAR (obj));\n       gcc_assert (index >= 0);\n       if (detect_type_change_ssa (fbi, obj, obj_type_ref_class (target),\n-\t\t\t\t  call, &jfunc))\n+\t\t\t\t  call))\n \treturn;\n     }\n   else\n     {\n-      struct ipa_jump_func jfunc;\n       gimple *stmt = SSA_NAME_DEF_STMT (obj);\n       tree expr;\n \n@@ -2635,7 +2627,7 @@ ipa_analyze_virtual_call_uses (struct ipa_func_body_info *fbi,\n \t\t\t\t\tSSA_NAME_VAR (TREE_OPERAND (expr, 0)));\n       gcc_assert (index >= 0);\n       if (detect_type_change (fbi, obj, expr, obj_type_ref_class (target),\n-\t\t\t      call, &jfunc, anc_offset))\n+\t\t\t      call, anc_offset))\n \treturn;\n     }\n "}]}