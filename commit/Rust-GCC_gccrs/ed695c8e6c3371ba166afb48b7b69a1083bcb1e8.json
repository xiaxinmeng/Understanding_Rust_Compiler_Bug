{"sha": "ed695c8e6c3371ba166afb48b7b69a1083bcb1e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ2OTVjOGU2YzMzNzFiYTE2NmFmYjQ4YjdiNjlhMTA4M2JjYjFlOA==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2003-01-21T20:49:26Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-01-21T20:49:26Z"}, "message": "darwin.S: Add unwind info.\n\n2003-01-21  Andreas Tobler  <a.tobler@schweiz.ch>\n\n\t* src/powerpc/darwin.S: Add unwind info.\n\t* src/powerpc/darwin_closure.S: Likewise.\n\nFrom-SVN: r61568", "tree": {"sha": "24f9c08c2d545377c00db941c93e4ef6c45d9b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24f9c08c2d545377c00db941c93e4ef6c45d9b81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed695c8e6c3371ba166afb48b7b69a1083bcb1e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed695c8e6c3371ba166afb48b7b69a1083bcb1e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed695c8e6c3371ba166afb48b7b69a1083bcb1e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed695c8e6c3371ba166afb48b7b69a1083bcb1e8/comments", "author": null, "committer": null, "parents": [{"sha": "691255fb2ae21560616558637d8f838f3f1322d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691255fb2ae21560616558637d8f838f3f1322d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/691255fb2ae21560616558637d8f838f3f1322d2"}], "stats": {"total": 161, "additions": 136, "deletions": 25}, "files": [{"sha": "5517463d41fd6abc7d3df4b568de9c1fe6f5d687", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed695c8e6c3371ba166afb48b7b69a1083bcb1e8/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed695c8e6c3371ba166afb48b7b69a1083bcb1e8/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=ed695c8e6c3371ba166afb48b7b69a1083bcb1e8", "patch": "@@ -1,3 +1,8 @@\n+2003-01-21  Andreas Tobler  <a.tobler@schweiz.ch>\n+\n+\t* src/powerpc/darwin.S: Add unwind info.\n+\t* src/powerpc/darwin_closure.S: Likewise.\n+\n 2003-01-14  Andrew Haley  <aph@redhat.com>\n \n \t* src/x86/ffi64.c (ffi_prep_args): Check for void retval."}, {"sha": "c8ab3fca1e3277db6347fca0a168d528d94d3dd9", "filename": "libffi/src/powerpc/darwin.S", "status": "modified", "additions": 73, "deletions": 13, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed695c8e6c3371ba166afb48b7b69a1083bcb1e8/libffi%2Fsrc%2Fpowerpc%2Fdarwin.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed695c8e6c3371ba166afb48b7b69a1083bcb1e8/libffi%2Fsrc%2Fpowerpc%2Fdarwin.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Fdarwin.S?ref=ed695c8e6c3371ba166afb48b7b69a1083bcb1e8", "patch": "@@ -37,30 +37,34 @@\n .text\n \t.align 2\n _ffi_call_DARWIN:\n-\tmr      r12,r8 // We only need r12 until the call, so it doesn't have to be saved...\n+LFB0:\t\n+\tmr      r12,r8\t\t/* We only need r12 until the call,\n+\t\t\t\tso it doesn't have to be saved...  */\n+LFB1:\t\n \t/* Save the old stack pointer as AP.  */\n \tmr\tr8,r1\n-\n+LCFI0:\t\n \t/* Allocate the stack space we need.  */\n \tstwux\tr1,r1,r4\t\n \t\n \t/* Save registers we use.  */\n \tmflr\tr9\n \n-\tstw\tr28,-16(r8)\n+\tstw\tr28,-16(r8)\t\n \tstw\tr29,-12(r8)\n \tstw\tr30, -8(r8)\n \tstw\tr31, -4(r8)\n-\t\n-\tstw\tr9,  8(r8)\n+\n+\tstw\tr9,  8(r8)\t\n \tstw\tr2, 20(r1)\n+LCFI1:\t\n \n \t/* Save arguments over call...  */\n-\tmr\tr31,r5\t/* flags, */\n-\tmr\tr30,r6\t/* rvalue, */\n-\tmr\tr29,r7\t/* function address, */\n-\tmr\tr28,r8\t/* our AP. */\n-\t\t\n+\tmr\tr31,r5\t/* flags,  */\n+\tmr\tr30,r6\t/* rvalue,  */\n+\tmr\tr29,r7\t/* function address,  */\n+\tmr\tr28,r8\t/* our AP.  */\n+LCFI2:\t\t\n \t/* Call ffi_prep_args.  */\n \tmr\tr4,r1\n \tli\tr9,0\n@@ -143,7 +147,8 @@ L(fp_return_value):\n L(float_return_value):\n \tstfs\tf1,0(r30)\n \tb\tL(done_return_value)\n-//END(_ffi_call_DARWIN)\n+LFE1:\t\n+/* END(_ffi_call_DARWIN)  */\n \n /* Provide a null definition of _ffi_call_AIX.  */\n .text\n@@ -153,5 +158,60 @@ L(float_return_value):\n \t.align 2\n _ffi_call_AIX:\n \tblr\n-//END(_ffi_call_AIX)\n-\n+/* END(_ffi_call_AIX)  */\n+\n+.data\n+.section __TEXT,__eh_frame\n+Lframe1:\n+\t.set\tL$set$0,LECIE1-LSCIE1\n+\t.long\tL$set$0\t; Length of Common Information Entry\n+LSCIE1:\n+\t.long\t0x0\t; CIE Identifier Tag\n+\t.byte\t0x1\t; CIE Version\n+\t.ascii\t\"zR\\0\"\t; CIE Augmentation\n+\t.byte\t0x1\t; uleb128 0x1; CIE Code Alignment Factor\n+\t.byte\t0x7c\t; sleb128 -4; CIE Data Alignment Factor\n+\t.byte\t0x41\t; CIE RA Column\n+\t.byte   0x1     ; uleb128 0x1; Augmentation size\n+\t.byte   0x10    ; FDE Encoding (pcrel)\n+\t.byte\t0xc\t; DW_CFA_def_cfa\n+\t.byte\t0x1\t; uleb128 0x1\n+\t.byte\t0x0\t; uleb128 0x0\n+\t.align\t2\n+LECIE1:\n+LSFDE1:\n+\t.set\tL$set$1,LEFDE1-LASFDE1\n+\t.long\tL$set$1\t; FDE Length\n+LASFDE1:\n+\t.set\tL$set$2,LASFDE1-Lframe1\n+\t.long\tL$set$2\t; FDE CIE offset\n+\t.long\tLFB0-.\t; FDE initial location\n+\t.set\tL$set$3,LFE1-LFB0\n+\t.long\tL$set$3\t; FDE address range\n+\t.byte\t0x4\t; DW_CFA_advance_loc4\n+\t.set\tL$set$4,LCFI0-LFB1\n+\t.long\tL$set$4\n+\t.byte\t0xd\t; DW_CFA_def_cfa_register\n+\t.byte\t0x08\t; uleb128 0x08 \n+\t.byte\t0x4\t; DW_CFA_advance_loc4\n+\t.set\tL$set$5,LCFI1-LCFI0\n+\t.long\tL$set$5\n+\t.byte   0x11    ; DW_CFA_offset_extended_sf\n+\t.byte\t0x41\t; uleb128 0x41\n+\t.byte   0x7e    ; sleb128 -2\n+\t.byte\t0x9f\t; DW_CFA_offset, column 0x1f \n+\t.byte\t0x1\t; uleb128 0x1 \n+\t.byte\t0x9e\t; DW_CFA_offset, column 0x1e\n+\t.byte\t0x2\t; uleb128 0x2\n+\t.byte\t0x9d\t; DW_CFA_offset, column 0x1d \n+\t.byte\t0x3\t; uleb128 0x3 \n+\t.byte\t0x9c\t; DW_CFA_offset, column 0x1c \n+\t.byte\t0x4\t; uleb128 0x4\n+\t.byte\t0x4\t; DW_CFA_advance_loc4 \n+\t.set\tL$set$6,LCFI2-LCFI1\n+\t.long\tL$set$6\n+\t.byte\t0xd\t; DW_CFA_def_cfa_register \n+\t.byte\t0x1c\t; uleb128 0x1c \n+\t.align 2\n+LEFDE1:\n+\t"}, {"sha": "5420c77cfb559a40152babf211b8350d5883e58f", "filename": "libffi/src/powerpc/darwin_closure.S", "status": "modified", "additions": 58, "deletions": 12, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed695c8e6c3371ba166afb48b7b69a1083bcb1e8/libffi%2Fsrc%2Fpowerpc%2Fdarwin_closure.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed695c8e6c3371ba166afb48b7b69a1083bcb1e8/libffi%2Fsrc%2Fpowerpc%2Fdarwin_closure.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Fdarwin_closure.S?ref=ed695c8e6c3371ba166afb48b7b69a1083bcb1e8", "patch": "@@ -1,6 +1,6 @@\n /* -----------------------------------------------------------------------\n-   darwin_closures.S - Copyright (c) 2002 Free Software Foundation, Inc.\n-   based on ppc_closures.S\n+   darwin_closure.S - Copyright (c) 2002 2003 Free Software Foundation, \n+   Inc. based on ppc_closure.S\n  \n    PowerPC Assembly glue.\n \n@@ -37,20 +37,20 @@\n .text\n \t.align 2\n _ffi_closure_ASM:\n-\t\n-\tmflr r0\t\t\t/* extract return address */\n-\tstw r0, 8(r1)\t\t/* save the return address */\n-\t\n+LFB1:\t\t\n+\tmflr r0\t\t\t/* extract return address  */\n+\tstw r0, 8(r1)\t\t/* save the return address  */\n+LCFI0:\t\n \t/* 24 Bytes (Linkage Area) */\n \t/* 32 Bytes (outgoing parameter area, always reserved) */\n \t/* 104 Bytes (13*8 from FPR) */ \n \t/* 4 Bytes (result)\n \t/* 164 Bytes */\n \t\n-\tstwu r1,-164(r1)\t/* skip over caller save area */\n-\t\n-/* we want to build up an area for the parameters passed */\n-/* in registers (both floating point and integer) */\n+\tstwu r1,-164(r1)\t/* skip over caller save area  */\n+LCFI1:\t\t\n+\t/* we want to build up an area for the parameters passed\n+\tin registers (both floating point and integer)  */\n \t\n \t/* we store gpr 3 to gpr 10 (aligned to 4) */\n \t/* in the parents outgoing area\t\t   */\n@@ -111,7 +111,9 @@ _ffi_closure_ASM:\n \tlwzx r3,r4,r3\t\t/* get the contents of that table value */\n \tadd r3,r3,r4\t\t/* add contents of table to table address */\n \tmtctr r3\n-\tbctr\t\t\t/* jump to it */\n+\tbctr\t\t\t/* jump to it  */\n+LFE1:\n+\t.align\t2\n \n .L60:\n \t.long .L44-.L60    /* FFI_TYPE_VOID */\n@@ -185,5 +187,49 @@ _ffi_closure_ASM:\n \tmtlr r0\t\t\t/* reset link register */\n \tblr\n \t\n-/* END(ffi_closure_ASM) */\n+/* END(ffi_closure_ASM)  */\n+\n+.data\n+.section __TEXT,__eh_frame\n+Lframe1:\n+\t.set\tL$set$0,LECIE1-LSCIE1\n+\t.long\tL$set$0\t; Length of Common Information Entry\n+LSCIE1:\n+\t.long\t0x0\t; CIE Identifier Tag\n+\t.byte\t0x1\t; CIE Version\n+\t.ascii\t\"zR\\0\"\t; CIE Augmentation\n+\t.byte\t0x1\t; uleb128 0x1; CIE Code Alignment Factor\n+\t.byte\t0x7c\t; sleb128 -4; CIE Data Alignment Factor\n+\t.byte\t0x41\t; CIE RA Column\n+\t.byte\t0x1\t; uleb128 0x1; Augmentation size\n+\t.byte\t0x10\t; FDE Encoding (pcrel)\n+\t.byte\t0xc\t; DW_CFA_def_cfa\n+\t.byte\t0x1\t; uleb128 0x1\n+\t.byte\t0x0\t; uleb128 0x0\n+\t.align\t2\n+LECIE1:\n+LSFDE1:\n+\t.set\tL$set$1,LEFDE1-LASFDE1\n+\t.long\tL$set$1\t; FDE Length\n+\n+LASFDE1:\n+\t.set\tL$set$2,LASFDE1-Lframe1\n+\t.long\tL$set$2\t; FDE CIE offset\n+\t.long\tLFB1-.\t; FDE initial location\n+\t.set\tL$set$3,LFE1-LFB1\n+\t.long\tL$set$3\t; FDE address range\n+\t.byte   0x0     ; uleb128 0x0; Augmentation size\n+\t.byte\t0x4\t; DW_CFA_advance_loc4\n+\t.set\tL$set$3,LCFI1-LCFI0\n+\t.long\tL$set$3\n+\t.byte\t0xe\t; DW_CFA_def_cfa_offset\n+ \t.byte\t164,1\t; uleb128 164\n+\t.byte\t0x4\t; DW_CFA_advance_loc4\n+\t.set\tL$set$4,LCFI0-LFB1\n+\t.long\tL$set$4\n+\t.byte   0x11    ; DW_CFA_offset_extended_sf\n+\t.byte\t0x41\t; uleb128 0x41\n+\t.byte   0x7e    ; sleb128 -2\n+\t.align\t2\n+LEFDE1:\n "}]}