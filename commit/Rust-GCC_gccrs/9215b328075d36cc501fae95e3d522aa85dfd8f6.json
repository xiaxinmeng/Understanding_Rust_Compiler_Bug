{"sha": "9215b328075d36cc501fae95e3d522aa85dfd8f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIxNWIzMjgwNzVkMzZjYzUwMWZhZTk1ZTNkNTIyYWE4NWRmZDhmNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-23T06:58:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-23T06:58:39Z"}, "message": "tree-cfg.c (label_for_bb): Remove global var.\n\n2019-07-23  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfg.c (label_for_bb): Remove global var.\n\t(main_block_label): Take label_for_bb as argument.\n\t(cleanup_dead_labels_eh): Likewise, adjust.\n\t(cleanup_dead_labels): Adjust.\n\nFrom-SVN: r273716", "tree": {"sha": "382bd3911db5e724f4a745afa7d4c3e3591b12bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/382bd3911db5e724f4a745afa7d4c3e3591b12bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9215b328075d36cc501fae95e3d522aa85dfd8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9215b328075d36cc501fae95e3d522aa85dfd8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9215b328075d36cc501fae95e3d522aa85dfd8f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9215b328075d36cc501fae95e3d522aa85dfd8f6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ac608a2cb5ddbc636b8bc1983f136db1f7a7ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac608a2cb5ddbc636b8bc1983f136db1f7a7ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac608a2cb5ddbc636b8bc1983f136db1f7a7ace"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "ad612c2e4fe65cdea9eaa067176d6be39ac81784", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9215b328075d36cc501fae95e3d522aa85dfd8f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9215b328075d36cc501fae95e3d522aa85dfd8f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9215b328075d36cc501fae95e3d522aa85dfd8f6", "patch": "@@ -1,3 +1,10 @@\n+2019-07-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (label_for_bb): Remove global var.\n+\t(main_block_label): Take label_for_bb as argument.\n+\t(cleanup_dead_labels_eh): Likewise, adjust.\n+\t(cleanup_dead_labels): Adjust.\n+\n 2019-07-22  Paul A. Clarke  <pc@us.ibm.com>\n \n \t* doc/extend.texi (Basic PowerPC Built-in Functions Available on all"}, {"sha": "54ee63add4707441b565526875bcabdc6cda4166", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9215b328075d36cc501fae95e3d522aa85dfd8f6/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9215b328075d36cc501fae95e3d522aa85dfd8f6/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9215b328075d36cc501fae95e3d522aa85dfd8f6", "patch": "@@ -1437,19 +1437,19 @@ make_gimple_asm_edges (basic_block bb)\n    (almost) no new labels should be created.  */\n \n /* A map from basic block index to the leading label of that block.  */\n-static struct label_record\n+struct label_record\n {\n   /* The label.  */\n   tree label;\n \n   /* True if the label is referenced from somewhere.  */\n   bool used;\n-} *label_for_bb;\n+};\n \n /* Given LABEL return the first label in the same basic block.  */\n \n static tree\n-main_block_label (tree label)\n+main_block_label (tree label, label_record *label_for_bb)\n {\n   basic_block bb = label_to_block (cfun, label);\n   tree main_label = label_for_bb[bb->index].label;\n@@ -1468,7 +1468,7 @@ main_block_label (tree label)\n /* Clean up redundant labels within the exception tree.  */\n \n static void\n-cleanup_dead_labels_eh (void)\n+cleanup_dead_labels_eh (label_record *label_for_bb)\n {\n   eh_landing_pad lp;\n   eh_region r;\n@@ -1481,7 +1481,7 @@ cleanup_dead_labels_eh (void)\n   for (i = 1; vec_safe_iterate (cfun->eh->lp_array, i, &lp); ++i)\n     if (lp && lp->post_landing_pad)\n       {\n-\tlab = main_block_label (lp->post_landing_pad);\n+\tlab = main_block_label (lp->post_landing_pad, label_for_bb);\n \tif (lab != lp->post_landing_pad)\n \t  {\n \t    EH_LANDING_PAD_NR (lp->post_landing_pad) = 0;\n@@ -1503,15 +1503,15 @@ cleanup_dead_labels_eh (void)\n \t    {\n \t      lab = c->label;\n \t      if (lab)\n-\t\tc->label = main_block_label (lab);\n+\t\tc->label = main_block_label (lab, label_for_bb);\n \t    }\n \t}\n \tbreak;\n \n       case ERT_ALLOWED_EXCEPTIONS:\n \tlab = r->u.allowed.label;\n \tif (lab)\n-\t  r->u.allowed.label = main_block_label (lab);\n+\t  r->u.allowed.label = main_block_label (lab, label_for_bb);\n \tbreak;\n       }\n }\n@@ -1526,7 +1526,8 @@ void\n cleanup_dead_labels (void)\n {\n   basic_block bb;\n-  label_for_bb = XCNEWVEC (struct label_record, last_basic_block_for_fn (cfun));\n+  label_record *label_for_bb = XCNEWVEC (struct label_record,\n+\t\t\t\t\t last_basic_block_for_fn (cfun));\n \n   /* Find a suitable label for each block.  We use the first user-defined\n      label if there is one, or otherwise just the first label we see.  */\n@@ -1582,15 +1583,15 @@ cleanup_dead_labels (void)\n \t    label = gimple_cond_true_label (cond_stmt);\n \t    if (label)\n \t      {\n-\t\tnew_label = main_block_label (label);\n+\t\tnew_label = main_block_label (label, label_for_bb);\n \t\tif (new_label != label)\n \t\t  gimple_cond_set_true_label (cond_stmt, new_label);\n \t      }\n \n \t    label = gimple_cond_false_label (cond_stmt);\n \t    if (label)\n \t      {\n-\t\tnew_label = main_block_label (label);\n+\t\tnew_label = main_block_label (label, label_for_bb);\n \t\tif (new_label != label)\n \t\t  gimple_cond_set_false_label (cond_stmt, new_label);\n \t      }\n@@ -1607,7 +1608,7 @@ cleanup_dead_labels (void)\n \t      {\n \t\ttree case_label = gimple_switch_label (switch_stmt, i);\n \t\tlabel = CASE_LABEL (case_label);\n-\t\tnew_label = main_block_label (label);\n+\t\tnew_label = main_block_label (label, label_for_bb);\n \t\tif (new_label != label)\n \t\t  CASE_LABEL (case_label) = new_label;\n \t      }\n@@ -1622,7 +1623,7 @@ cleanup_dead_labels (void)\n \t    for (i = 0; i < n; ++i)\n \t      {\n \t\ttree cons = gimple_asm_label_op (asm_stmt, i);\n-\t\ttree label = main_block_label (TREE_VALUE (cons));\n+\t\ttree label = main_block_label (TREE_VALUE (cons), label_for_bb);\n \t\tTREE_VALUE (cons) = label;\n \t      }\n \t    break;\n@@ -1635,7 +1636,7 @@ cleanup_dead_labels (void)\n \t    {\n \t      ggoto *goto_stmt = as_a <ggoto *> (stmt);\n \t      label = gimple_goto_dest (goto_stmt);\n-\t      new_label = main_block_label (label);\n+\t      new_label = main_block_label (label, label_for_bb);\n \t      if (new_label != label)\n \t\tgimple_goto_set_dest (goto_stmt, new_label);\n \t    }\n@@ -1648,23 +1649,23 @@ cleanup_dead_labels (void)\n \t    label = gimple_transaction_label_norm (txn);\n \t    if (label)\n \t      {\n-\t\tnew_label = main_block_label (label);\n+\t\tnew_label = main_block_label (label, label_for_bb);\n \t\tif (new_label != label)\n \t\t  gimple_transaction_set_label_norm (txn, new_label);\n \t      }\n \n \t    label = gimple_transaction_label_uninst (txn);\n \t    if (label)\n \t      {\n-\t\tnew_label = main_block_label (label);\n+\t\tnew_label = main_block_label (label, label_for_bb);\n \t\tif (new_label != label)\n \t\t  gimple_transaction_set_label_uninst (txn, new_label);\n \t      }\n \n \t    label = gimple_transaction_label_over (txn);\n \t    if (label)\n \t      {\n-\t\tnew_label = main_block_label (label);\n+\t\tnew_label = main_block_label (label, label_for_bb);\n \t\tif (new_label != label)\n \t\t  gimple_transaction_set_label_over (txn, new_label);\n \t      }\n@@ -1677,7 +1678,7 @@ cleanup_dead_labels (void)\n     }\n \n   /* Do the same for the exception region tree labels.  */\n-  cleanup_dead_labels_eh ();\n+  cleanup_dead_labels_eh (label_for_bb);\n \n   /* Finally, purge dead labels.  All user-defined labels and labels that\n      can be the target of non-local gotos and labels which have their"}]}