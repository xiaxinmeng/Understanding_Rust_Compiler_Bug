{"sha": "82a19768cb55aa06dc6aac858012cf40125a3d9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhMTk3NjhjYjU1YWEwNmRjNmFhYzg1ODAxMmNmNDAxMjVhM2Q5Zg==", "commit": {"author": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2015-01-09T14:06:02Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2015-01-09T14:06:02Z"}, "message": "configure.ac: Don't add ${libgcj} for arm*-*-freebsd*.\n\ntoplevel:\n\n    * configure.ac: Don't add ${libgcj} for arm*-*-freebsd*.\n    * configure: Regenerate.\ngcc:\n    * config.gcc (arm*-*-freebsd*): New configuration.\n    * config/arm/freebsd.h: New file.\n    * config.host: Add extra components for arm*-*-freebsd*.\n    * config/arm/arm.h: Introduce MAX_SYNC_LIBFUNC_SIZE.\n    * config/arm/arm.c (arm_init_libfuncs): Use MAX_SYNC_LIBFUNC_SIZE.\n\nlibgcc:\n\n    * config.host (arm*-*-freebsd*): Add new configuration for\n    arm*-*-freebsd*.\n    * config/arm/freebsd-atomic.c: New file.\n    * config/arm/t-freebsd: Likewise.\n    * config/arm/unwind-arm.h: Add __FreeBSD__ to the list of\n    'PC-relative indirect' OS's.\n\nlibatomic:\n\n    * configure.tgt: Exclude arm*-*-freebsd* from try_ifunc.\n\nlibstdc++-v3:\n\n    * configure.host: Add arm*-*-freebsd* port_specific_symbol_files.\n\nFrom-SVN: r219388", "tree": {"sha": "b3576f34396e29e95fbfc0175227cf0b88999832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3576f34396e29e95fbfc0175227cf0b88999832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82a19768cb55aa06dc6aac858012cf40125a3d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a19768cb55aa06dc6aac858012cf40125a3d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a19768cb55aa06dc6aac858012cf40125a3d9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a19768cb55aa06dc6aac858012cf40125a3d9f/comments", "author": null, "committer": null, "parents": [{"sha": "887974fda22e2040ad8956488aa738b0bb9ad728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887974fda22e2040ad8956488aa738b0bb9ad728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/887974fda22e2040ad8956488aa738b0bb9ad728"}], "stats": {"total": 551, "additions": 535, "deletions": 16}, "files": [{"sha": "c198ddd45a755ae36ead0bcfb1fa7a6967b6f5d1", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -1,3 +1,8 @@\n+2015-01-09  Andreas Tobler  <andreast@gcc.gnu.org>\n+\n+\t* configure.ac: Don't add ${libgcj} for arm*-*-freebsd*.\n+\t* configure: Regenerate.\n+\n 2015-01-08  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* Makefile.def (dependencies) <all-target-liboffloadmic>: Depend on"}, {"sha": "33d2600145db7bae8e584393e93e71113046d10c", "filename": "configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -3433,6 +3433,9 @@ case \"${target}\" in\n   alpha*-*-*vms*)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;;\n+  arm*-*-freebsd*)\n+    noconfigdirs=\"$noconfigdirs ${libgcj}\"\n+    ;;\n   arm-wince-pe)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;;"}, {"sha": "acfae631928e7b39bc7f2ac3c12688a9bc6920ef", "filename": "configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -783,6 +783,9 @@ case \"${target}\" in\n   alpha*-*-*vms*)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;;\n+  arm*-*-freebsd*)\n+    noconfigdirs=\"$noconfigdirs ${libgcj}\"\n+    ;;\n   arm-wince-pe)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;;"}, {"sha": "f442a30652454949be8093faa72841bfeb3d7cbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -1,3 +1,11 @@\n+2015-01-09  Andreas Tobler  <andreast@gcc.gnu.org>\n+\n+\t* config.gcc (arm*-*-freebsd*): New configuration.\n+\t* config/arm/freebsd.h: New file.\n+\t* config.host: Add extra components for arm*-*-freebsd*.\n+\t* config/arm/arm.h: Introduce MAX_SYNC_LIBFUNC_SIZE.\n+\t* config/arm/arm.c (arm_init_libfuncs): Use MAX_SYNC_LIBFUNC_SIZE.\n+\n 2015-01-09  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/rs6000/rtems.h (CPP_OS_RTEMS_SPEC): Define __PPC_CPU_E6500__"}, {"sha": "0dfc08fc0f19ff27d2636db50d7fdeaf503d922b", "filename": "gcc/config.gcc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -259,7 +259,6 @@ case ${target} in\n    arm*-wince-pe*\t\t\t\\\n  | arm*-*-ecos-elf\t\t\t\\\n  | arm*-*-elf\t\t\t\t\\\n- | arm*-*-freebsd*\t\t\t\\\n  | arm*-*-linux*\t\t\t\\\n  | arm*-*-uclinux*\t\t\t\\\n  | i[34567]86-go32-*\t\t\t\\\n@@ -1010,6 +1009,27 @@ arm-wrs-vxworks)\n \textra_options=\"${extra_options} arm/vxworks.opt\"\n \ttmake_file=\"${tmake_file} arm/t-arm arm/t-vxworks\"\n \t;;\n+arm*-*-freebsd*)                # ARM FreeBSD EABI\n+\ttm_file=\"dbxelf.h elfos.h ${fbsd_tm_file} arm/elf.h\"\n+\tcase $target in\n+\tarm*b-*-freebsd*)\n+\t    tm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n+\t    ;;\n+\tesac\n+\ttmake_file=\"${tmake_file} arm/t-arm arm/t-bpabi\"\n+\ttm_file=\"${tm_file} arm/bpabi.h arm/freebsd.h arm/aout.h arm/arm.h\"\n+\tcase $target in\n+\tarmv6*-*-freebsd*)\n+\t    tm_defines=\"${tm_defines} TARGET_FREEBSD_ARMv6=1\"\n+\t    ;;\n+\tesac\n+\tcase $target in\n+\tarm*hf-*-freebsd*)\n+\t    tm_defines=\"${tm_defines} TARGET_FREEBSD_ARM_HARD_FLOAT=1\"\n+\t    ;;\n+\tesac\n+\twith_tls=${with_tls:-gnu}\n+\t;;\n arm*-*-netbsdelf*)\n \ttm_file=\"dbxelf.h elfos.h netbsd.h netbsd-elf.h arm/elf.h arm/aout.h ${tm_file} arm/netbsd-elf.h\"\n \textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt\""}, {"sha": "b0f5940c26379ebc75e0ca462cbb2cb01dabd2fa", "filename": "gcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -99,7 +99,7 @@ case ${host} in\n esac\n \n case ${host} in\n-  arm*-*-linux*)\n+  arm*-*-freebsd* | arm*-*-linux*)\n     case ${target} in\n       arm*-*-*)\n \thost_extra_gcc_objs=\"driver-arm.o\""}, {"sha": "e437543fb4d3b5549f02eb8252447c2c43b6677a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -2160,7 +2160,7 @@ arm_init_libfuncs (void)\n {\n   /* For Linux, we have access to kernel support for atomic operations.  */\n   if (arm_abi == ARM_ABI_AAPCS_LINUX)\n-    init_sync_libfuncs (2 * UNITS_PER_WORD);\n+    init_sync_libfuncs (MAX_SYNC_LIBFUNC_SIZE);\n \n   /* There are no special library functions unless we are using the\n      ARM BPABI.  */"}, {"sha": "9d60fcd1c93968265f1f97b32496a98178373d77", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -766,6 +766,11 @@ extern int arm_arch_crc;\n #define PCC_BITFIELD_TYPE_MATTERS TARGET_AAPCS_BASED\n #endif\n \n+/* The maximum size of the sync library functions supported.  */\n+#ifndef MAX_SYNC_LIBFUNC_SIZE\n+#define MAX_SYNC_LIBFUNC_SIZE (2 * UNITS_PER_WORD);\n+#endif\n+\n \f\n /* Standard register usage.  */\n "}, {"sha": "040d7c13b0dd56a9b34b7a66c97eb6f1ba80a2ad", "filename": "gcc/config/arm/freebsd.h", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fconfig%2Farm%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fconfig%2Farm%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffreebsd.h?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -0,0 +1,180 @@\n+/* Definitions of target machine for GNU compiler, FreeBSD/arm version.\n+   Copyright (C) 2002-2015 Free Software Foundation, Inc.\n+   Contributed by Wasabi Systems, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef  SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC FBSD_CPP_SPEC\n+\n+#undef  SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\\\n+  { \"subtarget_extra_asm_spec\",\tSUBTARGET_EXTRA_ASM_SPEC },\t\\\n+  { \"subtarget_asm_float_spec\", SUBTARGET_ASM_FLOAT_SPEC }, \t\\\n+  { \"fbsd_dynamic_linker\", FBSD_DYNAMIC_LINKER }\n+\n+#undef SUBTARGET_EXTRA_ASM_SPEC\n+#define SUBTARGET_EXTRA_ASM_SPEC \\\n+  \"%{mabi=apcs-gnu|mabi=atpcs:-meabi=gnu;:-meabi=5} \" TARGET_FIX_V4BX_SPEC \" \\\n+  %{fpic|fpie:-k} %{fPIC|fPIE:-k}\"\n+\n+#undef SUBTARGET_ASM_FLOAT_SPEC\n+#ifdef TARGET_FREEBSD_ARM_HARD_FLOAT\n+/* Default to full vfp if we build for arm*hf.  */\n+#define SUBTARGET_ASM_FLOAT_SPEC \"%{!mfpu=*:-mfpu=vfp}\"\n+#else\n+#define SUBTARGET_ASM_FLOAT_SPEC \"%{!mfpu=*:-mfpu=softvfp}\"\n+#endif\n+\n+#undef\tLINK_SPEC\n+#define LINK_SPEC \"\t\t\t\t\t\t\t\\\n+  %{p:%nconsider using `-pg' instead of `-p' with gprof (1) }\t\t\\\n+  %{v:-V}\t\t\t\t\t\t\t\t\\\n+  %{assert*} %{R*} %{rpath*} %{defsym*}\t\t\t\t\t\\\n+  %{shared:-Bshareable %{h*} %{soname*}}\t\t\t\t\\\n+  %{!shared:\t\t\t\t\t\t\t\t\\\n+    %{!static:\t\t\t\t\t\t\t\t\\\n+      %{rdynamic:-export-dynamic}\t\t\t\t\t\\\n+      %{!dynamic-linker:-dynamic-linker %(fbsd_dynamic_linker) }}\t\\\n+    %{static:-Bstatic}}\t\t\t\t\t\t\t\\\n+  %{!static:--hash-style=both --enable-new-dtags}\t\t\t\\\n+  %{symbolic:-Bsymbolic}\t\t\t\t\t\t\\\n+  -X %{mbig-endian:-EB} %{mlittle-endian:-EL}\"\n+\n+/* TARGET_BIG_ENDIAN_DEFAULT is set in\n+   config.gcc for big endian configurations.  */\n+#if TARGET_BIG_ENDIAN_DEFAULT\n+#define TARGET_ENDIAN_DEFAULT    MASK_BIG_END\n+#define TARGET_ENDIAN_OPTION     \"mbig-endian\"\n+#define TARGET_LINKER_EMULATION  \"armelfb_fbsd\"\n+#else\n+#define TARGET_ENDIAN_DEFAULT    0\n+#define TARGET_ENDIAN_OPTION     \"mlittle-endian\"\n+#define TARGET_LINKER_EMULATION  \"armelf_fbsd\"\n+#endif\n+\n+#undef\tSUBTARGET_EXTRA_LINK_SPEC\n+#define SUBTARGET_EXTRA_LINK_SPEC \" -m \" TARGET_LINKER_EMULATION \" -p\"\n+\n+#undef  TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS() \t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tFBSD_TARGET_OS_CPP_BUILTINS ();\t\t\\\n+\tTARGET_BPABI_CPP_BUILTINS ();\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (false)\n+\n+/* We default to a soft-float ABI so that binaries can run on all\n+   target hardware.  */\n+#undef TARGET_DEFAULT_FLOAT_ABI\n+#ifdef TARGET_FREEBSD_ARM_HARD_FLOAT\n+#define TARGET_DEFAULT_FLOAT_ABI ARM_FLOAT_ABI_HARD\n+#else\n+#define TARGET_DEFAULT_FLOAT_ABI ARM_FLOAT_ABI_SOFT\n+#endif\n+\n+#undef ARM_DEFAULT_ABI\n+\n+/* AACPS_LINUX has access to kernel atomic ops while we don't.\n+   But AACPS defaults to short_enums.  */\n+#define ARM_DEFAULT_ABI ARM_ABI_AAPCS_LINUX\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_INTERWORK | TARGET_ENDIAN_DEFAULT)\n+\n+/* We do not have any MULTILIB_OPTIONS specified, so there are no\n+   MULTILIB_DEFAULTS.  */\n+#undef  MULTILIB_DEFAULTS\n+\n+/*  Use the AAPCS type for wchar_t, override the one from config/freebsd.h.  */\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE  \"unsigned int\"\n+\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+#if defined (TARGET_FREEBSD_ARMv6)\n+#undef  SUBTARGET_CPU_DEFAULT\n+#define SUBTARGET_CPU_DEFAULT TARGET_CPU_arm1176jzs\n+#else\n+#undef  SUBTARGET_CPU_DEFAULT\n+#define SUBTARGET_CPU_DEFAULT   TARGET_CPU_arm9\n+#endif\n+\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\\\n+do {\t\t\t\t\t\t\\\n+    if (unaligned_access)\t\t\t\\\n+\tunaligned_access = 0;\t\t\t\\\n+} while (0)\n+\n+#undef MAX_SYNC_LIBFUNC_SIZE\n+#define MAX_SYNC_LIBFUNC_SIZE 4 /* UNITS_PER_WORD not defined yet.  */\n+\n+/* FreeBSD does its profiling differently to the Acorn compiler.  We\n+   don't need a word following the mcount call; and to skip it\n+   requires either an assembly stub or use of fomit-frame-pointer when\n+   compiling the profiling functions.  Since we break Acorn CC\n+   compatibility below a little more won't hurt.  */\n+\n+#undef ARM_FUNCTION_PROFILER\n+#define ARM_FUNCTION_PROFILER(STREAM,LABELNO)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  asm_fprintf (STREAM, \"\\tmov\\t%Rip, %Rlr\\n\");\t\t\\\n+  asm_fprintf (STREAM, \"\\tbl\\t__mcount%s\\n\",\t\t\\\n+\t       (TARGET_ARM && NEED_PLT_RELOC)\t\t\\\n+\t       ? \"(PLT)\" : \"\");\t\t\t\t\\\n+}\n+\n+/* Clear the instruction cache from `BEG' to `END'.  This makes a\n+   call to the ARM_SYNC_ICACHE architecture specific syscall.  */\n+#define CLEAR_INSN_CACHE(BEG, END)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    extern int sysarch (int number, void *args);\t\t\t\\\n+    struct\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tunsigned int addr;\t\t\t\t\t\t\\\n+\tint          len;\t\t\t\t\t\t\\\n+      } s;\t\t\t\t\t\t\t\t\\\n+    s.addr = (unsigned int) (BEG);\t\t\t\t\t\\\n+    s.len = (END) - (BEG);\t\t\t\t\t\t\\\n+    (void) sysarch (0, &s);\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* This is how we tell the assembler that two symbols have the same value.  */\n+#define ASM_OUTPUT_DEF(FILE, NAME1, NAME2) \\\n+  do\t\t\t\t\t   \\\n+    {\t\t\t\t\t   \\\n+     assemble_name (FILE, NAME1); \t   \\\n+     fputs (\" = \", FILE);\t\t   \\\n+     assemble_name (FILE, NAME2);\t   \\\n+     fputc ('\\n', FILE);\t\t   \\\n+    }\t\t\t\t\t   \\\n+  while (0)\n+\n+/* Add  .note.GNU-stack.  */\n+#undef NEED_INDICATE_EXEC_STACK\n+#define NEED_INDICATE_EXEC_STACK 1\n+\n+#define ARM_TARGET2_DWARF_FORMAT (DW_EH_PE_pcrel | DW_EH_PE_indirect)\n+"}, {"sha": "52118c7296738478a9861ed31330bc7ccda332ad", "filename": "gcc/ginclude/unwind-arm-common.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fginclude%2Funwind-arm-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/gcc%2Fginclude%2Funwind-arm-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Funwind-arm-common.h?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -82,7 +82,11 @@ extern \"C\" {\n \n   struct _Unwind_Control_Block\n     {\n+#ifdef __FreeBSD__\n+      unsigned exception_class __attribute__((__mode__(__DI__)));\n+#else\n       char exception_class[8];\n+#endif\n       void (*exception_cleanup)(_Unwind_Reason_Code, _Unwind_Control_Block *);\n       /* Unwinder cache, private fields for the unwinder's use */\n       struct\n@@ -181,7 +185,11 @@ extern \"C\" {\n \n   /* Support functions for the PR.  */\n #define _Unwind_Exception _Unwind_Control_Block\n+#ifdef __FreeBSD__\n+  typedef unsigned _Unwind_Exception_Class __attribute__((__mode__(__DI__)));\n+#else\n   typedef char _Unwind_Exception_Class[8];\n+#endif\n \n   void * _Unwind_GetLanguageSpecificData (_Unwind_Context *);\n   _Unwind_Ptr _Unwind_GetRegionStart (_Unwind_Context *);"}, {"sha": "b0c72d3f9522817324f330ccf11c7eb0a3177937", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -1,3 +1,7 @@\n+2015-01-09  Andreas Tobler  <andreast@gcc.gnu.org>\n+\n+\t* configure.tgt: Exclude arm*-*-freebsd* from try_ifunc.\n+\n 2015-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "3c1feddc35626b4841d99e1f76cf448ca518bc4d", "filename": "libatomic/configure.tgt", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/libatomic%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/libatomic%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure.tgt?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -37,10 +37,15 @@ case \"${target_cpu}\" in\n \n   arm*)\n \tARCH=arm\n-\t# ??? Detect when -march=armv7 is already enabled.\n-\ttry_ifunc=yes\n-\t;;\n-\n+\tcase \"${target}\" in\n+            arm*-*-freebsd*)\n+                ;;\n+            *)\n+                # ??? Detect when -march=armv7 is already enabled.\n+                try_ifunc=yes\n+                ;;\n+        esac\n+        ;;\n   sparc)\n \tcase \" ${CC} ${CFLAGS} \" in\n \t  *\" -m64 \"*)"}, {"sha": "84ebcc5c09801662cdb56133dd5272cf59ad36e5", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -1,3 +1,12 @@\n+2015-01-09  Andreas Tobler  <andreast@gcc.gnu.org>\n+\n+\t* config.host (arm*-*-freebsd*): Add new configuration for\n+\tarm*-*-freebsd*.\n+\t* config/arm/freebsd-atomic.c: New file.\n+\t* config/arm/t-freebsd: Likewise.\n+\t* config/arm/unwind-arm.h: Add __FreeBSD__ to the list of\n+\t'PC-relative indirect' OS's.\n+\n 2015-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config.host: Add Visium support."}, {"sha": "3065c8a06dbd2db590f7b721512966e5f6f05418", "filename": "libgcc/config.host", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -366,6 +366,13 @@ arm-wrs-vxworks)\n \ttmake_file=\"$tmake_file arm/t-arm arm/t-elf t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n+arm*-*-freebsd*)                # ARM FreeBSD EABI\n+\ttmake_file=\"${tmake_file} arm/t-arm t-fixedpoint-gnu-prefix arm/t-elf\"\n+\ttmake_file=\"${tmake_file} arm/t-bpabi arm/t-freebsd t-slibgcc-libgcc\"\n+\ttm_file=\"${tm_file} arm/bpabi-lib.h\"\n+\tunwind_header=config/arm/unwind-arm.h\n+\ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n+\t;;\n arm*-*-netbsdelf*)\n \ttmake_file=\"$tmake_file arm/t-arm arm/t-netbsd t-slibgcc-gld-nover\"\n \t;;"}, {"sha": "a3a55e5d8ab04786a8da04e25ec1789a8e369ee1", "filename": "libgcc/config/arm/freebsd-atomic.c", "status": "added", "additions": 224, "deletions": 0, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/libgcc%2Fconfig%2Farm%2Ffreebsd-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/libgcc%2Fconfig%2Farm%2Ffreebsd-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ffreebsd-atomic.c?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -0,0 +1,224 @@\n+/* FreeBSD specific atomic operations for ARM EABI.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include <sys/types.h>\n+\n+#define HIDDEN __attribute__ ((visibility (\"hidden\")))\n+\n+#define ARM_VECTORS_HIGH 0xffff0000U\n+#define ARM_TP_ADDRESS   (ARM_VECTORS_HIGH + 0x1000)\n+#define ARM_RAS_START    (ARM_TP_ADDRESS + 4)\n+\n+void HIDDEN\n+__sync_synchronize (void)\n+{\n+#if defined (__ARM_ARCH_6__) || defined (__ARM_ARCH_6J__)       \\\n+    || defined (__ARM_ARCH_6K__) || defined (__ARM_ARCH_6T2__)  \\\n+    || defined (__ARM_ARCH_6Z__) || defined (__ARM_ARCH_6ZK__)  \\\n+    || defined (__ARM_ARCH_7__) || defined (__ARM_ARCH_7A__)\n+#if defined (__ARM_ARCH_7__) || defined (__ARM_ARCH_7A__)\n+    __asm __volatile (\"dmb\" : : : \"memory\");\n+#else\n+    __asm __volatile (\"mcr p15, 0, r0, c7, c10, 5\" : : : \"memory\");\n+#endif\n+#else\n+    __asm __volatile (\"nop\" : : : \"memory\");\n+#endif\n+}\n+\n+#if defined (__ARM_ARCH_6__) || defined (__ARM_ARCH_6J__)        \\\n+    || defined (__ARM_ARCH_6K__) || defined (__ARM_ARCH_6T2__)   \\\n+    || defined (__ARM_ARCH_6Z__) || defined (__ARM_ARCH_6ZK__)   \\\n+    || defined (__ARM_ARCH_7__) || defined (__ARM_ARCH_7A__)\n+\n+/* These systems should be supported by the compiler.  */\n+\n+#else /* __ARM_ARCH_5__  */\n+\n+#define\tSYNC_LOCK_TEST_AND_SET_N(N, TYPE, LDR, STR)\t\t\t\\\n+TYPE HIDDEN    \t\t\t\t\t\t\t\t\\\n+__sync_lock_test_and_set_##N (TYPE *mem, TYPE val)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+        unsigned int old, temp, ras_start;                              \\\n+                                                                        \\\n+        ras_start = ARM_RAS_START;\t\t\t\t\t\\\n+        __asm volatile (\t\t\t\t\t\t\\\n+                /* Set up Restartable Atomic Sequence.  */\t\t\\\n+                \"1:\"\t\t\t\t\t\t\t\\\n+                \"\\tadr   %2, 1b\\n\"\t\t\t\t\t\\\n+                \"\\tstr   %2, [%5]\\n\"\t\t\t\t\t\\\n+                \"\\tadr   %2, 2f\\n\"\t\t\t\t\t\\\n+                \"\\tstr   %2, [%5, #4]\\n\"\t\t\t\t\\\n+                                                                        \\\n+                \"\\t\"LDR\" %0, %4\\n\"\t/* Load old value.  */\t\t\\\n+                \"\\t\"STR\" %3, %1\\n\"\t/* Store new value.  */\t\t\\\n+                                                                        \\\n+                /* Tear down Restartable Atomic Sequence.  */\t\t\\\n+                \"2:\"\t\t\t\t\t\t\t\\\n+                \"\\tmov   %2, #0x00000000\\n\"\t\t\t\t\\\n+                \"\\tstr   %2, [%5]\\n\"\t\t\t\t\t\\\n+                \"\\tmov   %2, #0xffffffff\\n\"\t\t\t\t\\\n+                \"\\tstr   %2, [%5, #4]\\n\"\t\t\t\t\\\n+                : \"=&r\" (old), \"=m\" (*mem), \"=&r\" (temp)\t\t\\\n+                : \"r\" (val), \"m\" (*mem), \"r\" (ras_start));\t\t\\\n+        return (old);\t\t\t\t\t\t\t\\\n+}\n+\n+#define SYNC_LOCK_RELEASE_N(N, TYPE)\t\t\t\t\t\\\n+void HIDDEN\t\t\t\t\t\t\t\t\\\n+__sync_lock_release_##N (TYPE *ptr)     \t\t\t\t\\\n+{\t\t\t\t\t       \t\t\t\t\\\n+    /* All writes before this point must be seen before we release\t\\\n+       the lock itself.  */\t\t\t\t\t\t\\\n+    __sync_synchronize ();     \t\t\t\t\t\t\\\n+    *ptr = 0;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define\tSYNC_VAL_CAS_N(N, TYPE, LDR, STREQ)             \t\t\\\n+TYPE HIDDEN    \t\t\t\t\t\t\t\t\\\n+__sync_val_compare_and_swap_##N (TYPE *mem, TYPE expected,\t\t\\\n+    TYPE desired)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+        unsigned int old, temp, ras_start;                              \\\n+                                                                        \\\n+        ras_start = ARM_RAS_START;\t\t\t\t\t\\\n+        __asm volatile (\t\t\t\t\t\t\\\n+                /* Set up Restartable Atomic Sequence.  */\t\t\\\n+                \"1:\"\t\t\t\t\t\t\t\\\n+                \"\\tadr   %2, 1b\\n\"\t\t\t\t\t\\\n+                \"\\tstr   %2, [%6]\\n\"\t\t\t\t\t\\\n+                \"\\tadr   %2, 2f\\n\"\t\t\t\t\t\\\n+                \"\\tstr   %2, [%6, #4]\\n\"\t\t\t\t\\\n+                                                                        \\\n+                \"\\t\"LDR\" %0, %5\\n\"     /* Load old value.  */\t\t\\\n+                \"\\tcmp   %0, %3\\n\"     /* Compare to expected value.  */\\\n+                \"\\t\"STREQ\" %4, %1\\n\"   /* Store new value.  */\t\t\\\n+                                                                        \\\n+                /* Tear down Restartable Atomic Sequence.  */\t\t\\\n+                \"2:\"\t\t\t\t\t\t\t\\\n+                \"\\tmov   %2, #0x00000000\\n\"\t\t\t\t\\\n+                \"\\tstr   %2, [%6]\\n\"\t\t\t\t\t\\\n+                \"\\tmov   %2, #0xffffffff\\n\"\t\t\t\t\\\n+                \"\\tstr   %2, [%6, #4]\\n\"\t\t\t\t\\\n+                : \"=&r\" (old), \"=m\" (*mem), \"=&r\" (temp)\t\t\\\n+                : \"r\" (expected), \"r\" (desired), \"m\" (*mem),\t\t\\\n+                  \"r\" (ras_start));\t\t\t\t\t\\\n+        return (old);\t\t\t\t\t\t\t\\\n+}\n+\n+typedef unsigned char bool;\n+\n+#define SYNC_BOOL_CAS_N(N, TYPE)                                        \\\n+bool HIDDEN\t\t\t\t\t\t\t\t\\\n+__sync_bool_compare_and_swap_##N (TYPE *ptr, TYPE oldval,\t\t\\\n+                                  TYPE newval)                          \\\n+{\t\t\t\t\t\t\t\t\t\\\n+    TYPE actual_oldval\t\t\t\t\t\t\t\\\n+      = __sync_val_compare_and_swap_##N (ptr, oldval, newval);          \\\n+    return (oldval == actual_oldval);\t\t\t\t\t\\\n+}\n+\n+#define\tSYNC_FETCH_AND_OP_N(N, TYPE, LDR, STR, NAME, OP)\t\t\\\n+TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+__sync_fetch_and_##NAME##_##N (TYPE *mem, TYPE val)\t       \t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+        unsigned int old, temp, ras_start;                              \\\n+                                                                        \\\n+        ras_start = ARM_RAS_START;\t\t\t\t\t\\\n+        __asm volatile (\t\t\t\t\t\t\\\n+                /* Set up Restartable Atomic Sequence.  */\t\t\\\n+                \"1:\"\t\t\t\t\t\t\t\\\n+                \"\\tadr   %2, 1b\\n\"\t\t\t\t\t\\\n+                \"\\tstr   %2, [%5]\\n\"\t\t\t\t\t\\\n+                \"\\tadr   %2, 2f\\n\"\t\t\t\t\t\\\n+                \"\\tstr   %2, [%5, #4]\\n\"\t\t\t\t\\\n+                                                                        \\\n+                \"\\t\"LDR\" %0, %4\\n\"\t/* Load old value.  */\t\t\\\n+                \"\\t\"OP\"  %2, %0, %3\\n\"\t/* Calculate new value.  */\t\\\n+                \"\\t\"STR\" %2, %1\\n\"\t/* Store new value.  */\t\t\\\n+                                                                        \\\n+                /* Tear down Restartable Atomic Sequence.  */\t\t\\\n+                \"2:\"\t\t\t\t\t\t\t\\\n+                \"\\tmov   %2, #0x00000000\\n\"\t\t\t\t\\\n+                \"\\tstr   %2, [%5]\\n\"\t\t\t\t\t\\\n+                \"\\tmov   %2, #0xffffffff\\n\"\t\t\t\t\\\n+                \"\\tstr   %2, [%5, #4]\\n\"\t\t\t\t\\\n+                : \"=&r\" (old), \"=m\" (*mem), \"=&r\" (temp)\t\t\\\n+                : \"r\" (val), \"m\" (*mem), \"r\" (ras_start));\t\t\\\n+        return (old);\t\t\t\t\t\t\t\\\n+}\n+\n+#define\tSYNC_OP_AND_FETCH_N(N, TYPE, LDR, STR, NAME, OP)\t\t\\\n+TYPE HIDDEN   \t\t\t\t\t\t\t\t\\\n+__sync_##NAME##_and_fetch_##N (TYPE *mem, TYPE val)\t       \t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+        unsigned int old, temp, ras_start;                              \\\n+                                                                        \\\n+        ras_start = ARM_RAS_START;\t\t\t\t\t\\\n+        __asm volatile (\t\t\t\t\t\t\\\n+                /* Set up Restartable Atomic Sequence.  */\t\t\\\n+                \"1:\"\t\t\t\t\t\t\t\\\n+                \"\\tadr   %2, 1b\\n\"\t\t\t\t\t\\\n+                \"\\tstr   %2, [%5]\\n\"\t\t\t\t\t\\\n+                \"\\tadr   %2, 2f\\n\"\t\t\t\t\t\\\n+                \"\\tstr   %2, [%5, #4]\\n\"\t\t\t\t\\\n+                                                                        \\\n+                \"\\t\"LDR\" %0, %4\\n\"\t/* Load old value.  */\t\t\\\n+                \"\\t\"OP\"  %2, %0, %3\\n\"\t/* Calculate new value.  */\t\\\n+                \"\\t\"STR\" %2, %1\\n\"\t/* Store new value.  */\t\t\\\n+                                                                        \\\n+                /* Tear down Restartable Atomic Sequence.  */\t\t\\\n+                \"2:\"\t\t\t\t\t\t\t\\\n+                \"\\tmov   %2, #0x00000000\\n\"\t\t\t\t\\\n+                \"\\tstr   %2, [%5]\\n\"\t\t\t\t\t\\\n+                \"\\tmov   %2, #0xffffffff\\n\"\t\t\t\t\\\n+                \"\\tstr   %2, [%5, #4]\\n\"\t\t\t\t\\\n+                : \"=&r\" (old), \"=m\" (*mem), \"=&r\" (temp)\t\t\\\n+                : \"r\" (val), \"m\" (*mem), \"r\" (ras_start));\t\t\\\n+        return (old);\t\t\t\t\t\t\t\\\n+}\n+\n+#define\tEMIT_ALL_OPS_N(N, TYPE, LDR, STR, STREQ)\t\t\t\\\n+SYNC_LOCK_TEST_AND_SET_N (N, TYPE, LDR, STR)\t\t\t\t\\\n+SYNC_LOCK_RELEASE_N (N, TYPE)                                           \\\n+SYNC_VAL_CAS_N (N, TYPE, LDR, STREQ)\t                \t\t\\\n+SYNC_BOOL_CAS_N (N, TYPE)                                               \\\n+SYNC_FETCH_AND_OP_N (N, TYPE, LDR, STR, add, \"add\")\t\t        \\\n+SYNC_FETCH_AND_OP_N (N, TYPE, LDR, STR, and, \"and\")\t\t        \\\n+SYNC_FETCH_AND_OP_N (N, TYPE, LDR, STR, or, \"orr\")\t\t        \\\n+SYNC_FETCH_AND_OP_N (N, TYPE, LDR, STR, sub, \"sub\")\t\t        \\\n+SYNC_FETCH_AND_OP_N (N, TYPE, LDR, STR, xor, \"eor\")                     \\\n+SYNC_OP_AND_FETCH_N (N, TYPE, LDR, STR, add, \"add\")\t\t        \\\n+SYNC_OP_AND_FETCH_N (N, TYPE, LDR, STR, and, \"and\")\t\t        \\\n+SYNC_OP_AND_FETCH_N (N, TYPE, LDR, STR, or, \"orr\")\t\t        \\\n+SYNC_OP_AND_FETCH_N (N, TYPE, LDR, STR, sub, \"sub\")\t\t        \\\n+SYNC_OP_AND_FETCH_N (N, TYPE, LDR, STR, xor, \"eor\")\n+\n+\n+\n+EMIT_ALL_OPS_N (1, unsigned char, \"ldrb\", \"strb\", \"streqb\")\n+EMIT_ALL_OPS_N (2, unsigned short, \"ldrh\", \"strh\", \"streqh\")\n+EMIT_ALL_OPS_N (4, unsigned int, \"ldr\", \"str\", \"streq\")\n+\n+#endif"}, {"sha": "45b17865443bba6a19a1fbe734a6018aebd323d3", "filename": "libgcc/config/arm/t-freebsd", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/libgcc%2Fconfig%2Farm%2Ft-freebsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/libgcc%2Fconfig%2Farm%2Ft-freebsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-freebsd?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -0,0 +1,9 @@\n+# Just for these, we omit the frame pointer since it makes such a big\n+# difference.  It is then pointless adding debugging.\n+HOST_LIBGCC2_CFLAGS += -fomit-frame-pointer\n+\n+LIB2ADD_ST += $(srcdir)/config/arm/freebsd-atomic.c\n+\n+# Use a version of div0 which raises SIGFPE.\n+LIB1ASMFUNCS := $(filter-out _dvmd_tls,$(LIB1ASMFUNCS)) _dvmd_lnx\n+"}, {"sha": "f1f789c70e5c02bddb87866022d0abc0e3037039", "filename": "libgcc/config/arm/unwind-arm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/libgcc%2Fconfig%2Farm%2Funwind-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/libgcc%2Fconfig%2Farm%2Funwind-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Funwind-arm.h?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -48,7 +48,8 @@ extern \"C\" {\n       if (!tmp)\n \treturn 0;\n \n-#if (defined(linux) && !defined(__uClinux__)) || defined(__NetBSD__)\n+#if (defined(linux) && !defined(__uClinux__)) || defined(__NetBSD__) \\\n+    || defined(__FreeBSD__)\n       /* Pc-relative indirect.  */\n #define _GLIBCXX_OVERRIDE_TTYPE_ENCODING (DW_EH_PE_pcrel | DW_EH_PE_indirect)\n       tmp += ptr;"}, {"sha": "c6184fda434f37275c37c903acaa20b7099531c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -1,3 +1,7 @@\n+2015-01-09  Andreas Tobler  <andreast@gcc.gnu.org>\n+\n+\t* configure.host: Add arm*-*-freebsd* port_specific_symbol_files.\n+\n 2015-01-09  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/64239"}, {"sha": "82ddc5240920b83c746e97c24bdef635e5bfeffb", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -366,6 +366,9 @@ case \"${host}\" in\n \t;;\n     esac\n     ;;\n+  arm*-*-freebsd*)\n+     port_specific_symbol_files=\"\\$(srcdir)/../config/os/gnu-linux/arm-eabi-extra.ver\"\n+     ;;\n   powerpc*-*-darwin*)\n     port_specific_symbol_files=\"\\$(srcdir)/../config/os/bsd/darwin/ppc-extra.ver\"\n     ;;"}, {"sha": "70f14b4d1b5195d16679c00c4311a4d998ccdcbc", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a19768cb55aa06dc6aac858012cf40125a3d9f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a19768cb55aa06dc6aac858012cf40125a3d9f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=82a19768cb55aa06dc6aac858012cf40125a3d9f", "patch": "@@ -235,7 +235,7 @@ __get_dependent_exception_from_ue (_Unwind_Exception *exc)\n   return reinterpret_cast<__cxa_dependent_exception *>(exc + 1) - 1;\n }\n \n-#ifdef __ARM_EABI_UNWINDER__\n+#if defined (__ARM_EABI_UNWINDER__) && !defined (__FreeBSD__)\n static inline bool\n __is_gxx_exception_class(_Unwind_Exception_Class c)\n {\n@@ -309,13 +309,7 @@ __GXX_INIT_FORCED_UNWIND_CLASS(_Unwind_Exception_Class c)\n   c[6] = 'R';\n   c[7] = '\\0';\n }\n-\n-static inline void*\n-__gxx_caught_object(_Unwind_Exception* eo)\n-{\n-  return (void*)eo->barrier_cache.bitpattern[0];\n-}\n-#else // !__ARM_EABI_UNWINDER__\n+#else // !__ARM_EABI_UNWINDER__ || __FreeBSD__\n // This is the primary exception class we report -- \"GNUCC++\\0\".\n const _Unwind_Exception_Class __gxx_primary_exception_class\n = ((((((((_Unwind_Exception_Class) 'G' \n@@ -339,13 +333,29 @@ const _Unwind_Exception_Class __gxx_dependent_exception_class\n     << 8 | (_Unwind_Exception_Class) '+')\n    << 8 | (_Unwind_Exception_Class) '\\x01');\n \n+const _Unwind_Exception_Class __gxx_forced_unwind_class\n+= ((((((((_Unwind_Exception_Class) 'G'\n+        << 8 | (_Unwind_Exception_Class) 'N')\n+       << 8 | (_Unwind_Exception_Class) 'U')\n+      << 8 | (_Unwind_Exception_Class) 'C')\n+     << 8 | (_Unwind_Exception_Class) 'F')\n+    << 8 | (_Unwind_Exception_Class) 'O')\n+   << 8 | (_Unwind_Exception_Class) 'R')\n+  << 8 | (_Unwind_Exception_Class) '\\0');\n+\n static inline bool\n __is_gxx_exception_class(_Unwind_Exception_Class c)\n {\n   return c == __gxx_primary_exception_class\n       || c == __gxx_dependent_exception_class;\n }\n \n+static inline bool\n+__is_gxx_forced_unwind_class(_Unwind_Exception_Class c)\n+{\n+  return c ==  __gxx_forced_unwind_class;\n+}\n+\n // Only checks for primary or dependent, but not that it is a C++ exception at\n // all.\n static inline bool\n@@ -357,6 +367,17 @@ __is_dependent_exception(_Unwind_Exception_Class c)\n #define __GXX_INIT_PRIMARY_EXCEPTION_CLASS(c) c = __gxx_primary_exception_class\n #define __GXX_INIT_DEPENDENT_EXCEPTION_CLASS(c) \\\n   c = __gxx_dependent_exception_class\n+#define __GXX_INIT_FORCED_UNWIND_CLASS(c) c = __gxx_forced_unwind_class\n+#endif // __ARM_EABI_UNWINDER__ && !__FreeBSD__\n+\n+#ifdef __ARM_EABI_UNWINDER__\n+static inline void*\n+__gxx_caught_object(_Unwind_Exception* eo)\n+{\n+    return (void*)eo->barrier_cache.bitpattern[0];\n+}\n+\n+#else // !__ARM_EABI_UNWINDER__\n \n // GNU C++ personality routine, Version 0.\n extern \"C\" _Unwind_Reason_Code __gxx_personality_v0"}]}