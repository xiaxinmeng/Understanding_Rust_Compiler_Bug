{"sha": "14fab5fb9aa6432ca59fb02b7b82ac17093f4de2", "node_id": "C_kwDOANBUbNoAKDE0ZmFiNWZiOWFhNjQzMmNhNTlmYjAyYjdiODJhYzE3MDkzZjRkZTI", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2021-12-06T10:39:03Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-23T10:22:02Z"}, "message": "[PATCH 3/15] arm: Add option -mbranch-protection\n\nAdd -mbranch-protection option.  This option enables the\ncode-generation of pointer signing and authentication instructions in\nfunction prologues and epilogues.\n\ngcc/ChangeLog:\n\n\t* config/arm/arm.cc (arm_configure_build_target): Parse and validate\n\t-mbranch-protection option and initialize appropriate data structures.\n\t* config/arm/arm.opt (-mbranch-protection): New option.\n\t* doc/invoke.texi (Arm Options): Document it.\n\nCo-Authored-By: Tejas Belagod  <tbelagod@arm.com>\nCo-Authored-By: Richard Earnshaw <Richard.Earnshaw@arm.com>", "tree": {"sha": "dc159627475e0243d89b300a265b9b7a23f112db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc159627475e0243d89b300a265b9b7a23f112db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14fab5fb9aa6432ca59fb02b7b82ac17093f4de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14fab5fb9aa6432ca59fb02b7b82ac17093f4de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14fab5fb9aa6432ca59fb02b7b82ac17093f4de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14fab5fb9aa6432ca59fb02b7b82ac17093f4de2/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c91bb7b9fc87284f5382d9fb04db0cb10f6c1fe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91bb7b9fc87284f5382d9fb04db0cb10f6c1fe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91bb7b9fc87284f5382d9fb04db0cb10f6c1fe9"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "76c6f94d6d6d83d722d2ea0eec8d6ebdc10dfecd", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14fab5fb9aa6432ca59fb02b7b82ac17093f4de2/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14fab5fb9aa6432ca59fb02b7b82ac17093f4de2/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=14fab5fb9aa6432ca59fb02b7b82ac17093f4de2", "patch": "@@ -3259,6 +3259,17 @@ arm_configure_build_target (struct arm_build_target *target,\n       tune_opts = strchr (opts->x_arm_tune_string, '+');\n     }\n \n+  if (opts->x_arm_branch_protection_string)\n+    {\n+      aarch_validate_mbranch_protection (opts->x_arm_branch_protection_string);\n+\n+      if (aarch_ra_sign_key != AARCH_KEY_A)\n+\t{\n+\t  warning (0, \"invalid key type for %<-mbranch-protection=%>\");\n+\t  aarch_ra_sign_key = AARCH_KEY_A;\n+\t}\n+    }\n+\n   if (arm_selected_arch)\n     {\n       arm_initialize_isa (target->isa, arm_selected_arch->common.isa_bits);"}, {"sha": "260700f16bcd110ae3b661b3c0ee06a99e4690de", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14fab5fb9aa6432ca59fb02b7b82ac17093f4de2/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14fab5fb9aa6432ca59fb02b7b82ac17093f4de2/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=14fab5fb9aa6432ca59fb02b7b82ac17093f4de2", "patch": "@@ -323,6 +323,10 @@ mbranch-cost=\n Target RejectNegative Joined UInteger Var(arm_branch_cost) Init(-1)\n Cost to assume for a branch insn.\n \n+mbranch-protection=\n+Target RejectNegative Joined Var(arm_branch_protection_string) Save\n+Use branch-protection features.\n+\n mgeneral-regs-only\n Target RejectNegative Mask(GENERAL_REGS_ONLY) Save\n Generate code which uses the core registers only (r0-r14)."}, {"sha": "b4a271dc37ba2088699759810e3b8b0b74a1bbf3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14fab5fb9aa6432ca59fb02b7b82ac17093f4de2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14fab5fb9aa6432ca59fb02b7b82ac17093f4de2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=14fab5fb9aa6432ca59fb02b7b82ac17093f4de2", "patch": "@@ -850,7 +850,9 @@ Objective-C and Objective-C++ Dialects}.\n -mcmse @gol\n -mfix-cmse-cve-2021-35465 @gol\n -mstack-protector-guard=@var{guard} -mstack-protector-guard-offset=@var{offset} @gol\n--mfdpic}\n+-mfdpic @gol\n+-mbranch-protection=@var{none}|@var{standard}|@var{pac-ret}[+@var{leaf}]\n+[+@var{bti}]|@var{bti}[+@var{pac-ret}[+@var{leaf}]]}\n \n @emph{AVR Options}\n @gccoptlist{-mmcu=@var{mcu}  -mabsdata  -maccumulate-args @gol\n@@ -22556,6 +22558,40 @@ The opposite @option{-mno-fdpic} option is useful (and required) to\n build the Linux kernel using the same (@code{arm-*-uclinuxfdpiceabi})\n toolchain as the one used to build the userland programs.\n \n+@item\n+-mbranch-protection=@var{none}|@var{standard}|@var{pac-ret}[+@var{leaf}][+@var{bti}]|@var{bti}[+@var{pac-ret}[+@var{leaf}]]\n+@opindex mbranch-protection\n+Enable branch protection features (armv8.1-m.main only).\n+@samp{none} generate code without branch protection or return address\n+signing.\n+@samp{standard[+@var{leaf}]} generate code with all branch protection\n+features enabled at their standard level.\n+@samp{pac-ret[+@var{leaf}]} generate code with return address signing\n+set to its standard level, which is to sign all functions that save\n+the return address to memory.\n+@samp{leaf} When return address signing is enabled, also sign leaf\n+functions even if they do not write the return address to memory.\n++@samp{bti} Add landing-pad instructions at the permitted targets of\n+indirect branch instructions.\n+\n+If the @samp{+pacbti} architecture extension is not enabled, then all\n+branch protection and return address signing operations are\n+constrained to use only the instructions defined in the\n+architectural-NOP space. The generated code will remain\n+backwards-compatible with earlier versions of the architecture, but\n+the additional security can be enabled at run time on processors that\n+support the @samp{PACBTI} extension.\n+\n+Branch target enforcement using BTI can only be enabled at runtime if\n+all code in the application has been compiled with at least\n+@samp{-mbranch-protection=bti}.\n+\n+Any setting other than @samp{none} is supported only on armv8-m.main\n+or later.\n+\n+The default is to generate code without branch protection or return\n+address signing.\n+\n @end table\n \n @node AVR Options"}]}