{"sha": "ce4b00f393b2c470b2c18e7fda1286d71408e41c", "node_id": "C_kwDOANBUbNoAKGNlNGIwMGYzOTNiMmM0NzBiMmMxOGU3ZmRhMTI4NmQ3MTQwOGU0MWM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-03T07:37:16Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-10T11:27:05Z"}, "message": "RISC-V: Add binary op vx constraint tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-1.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-10.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-11.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-12.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-13.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-14.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-15.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-16.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-17.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-18.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-19.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-2.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-20.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-21.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-22.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-23.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-24.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-25.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-26.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-27.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-28.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-29.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-3.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-30.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-31.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-32.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-33.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-34.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-35.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-36.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-37.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-38.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-39.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-4.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-40.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-41.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-42.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-43.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-44.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-45.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-46.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-47.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-48.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-49.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-5.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-50.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-51.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-52.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-53.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-54.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-55.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-56.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-57.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-58.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-59.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-6.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-60.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-61.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-62.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-63.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-64.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-65.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-66.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-67.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-68.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-69.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-7.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-70.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-71.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-72.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-73.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-74.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-75.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-76.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-77.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-78.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-79.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-8.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-80.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-81.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-82.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-83.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-84.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-85.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-86.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-87.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-88.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-89.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-9.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-90.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-91.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-92.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-93.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-94.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-95.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-96.c: New test.", "tree": {"sha": "a0234a49b6f4e1aa700e1b187a1bc0003083753f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0234a49b6f4e1aa700e1b187a1bc0003083753f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce4b00f393b2c470b2c18e7fda1286d71408e41c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4b00f393b2c470b2c18e7fda1286d71408e41c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4b00f393b2c470b2c18e7fda1286d71408e41c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4b00f393b2c470b2c18e7fda1286d71408e41c/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7bff05f5e9f0c74ae42b1c5fe657911f6708b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7bff05f5e9f0c74ae42b1c5fe657911f6708b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7bff05f5e9f0c74ae42b1c5fe657911f6708b96"}], "stats": {"total": 8359, "additions": 8359, "deletions": 0}, "files": [{"sha": "09e0e21925b58cf47d6fc0a93f95c983228aee86", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-1.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-1.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "faf5ffb47f1a986188d040209a27d14fcf33ad31", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-10.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-10.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_tu (v3, v2, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvand\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_m (mask, v3, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvand\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_tumu (mask, v3, v2, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_tu (v3, v2, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvand\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_m (mask, v3, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvand\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_tumu (mask, v3, v2, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "54fe941f6ad1b326af1c10794c120063637418cb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-11.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-11.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_tu (v3, v2, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvand\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_m (mask, v3, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvand\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_tumu (mask, v3, v2, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_tu (v3, v2, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvand\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_m (mask, v3, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvand\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_tumu (mask, v3, v2, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "8a18a1df53567bf600b0d74930b60c56f23ee1b2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-12.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-12.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_tu (v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_m (mask, v3, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_tu (v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_m (mask, v3, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "d844e1baf2fc46bcd898dfaed93d5b180244eca2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-13.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-13.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "6779dfe859a166325c4b80988b99799306185ae7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-14.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-14.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_tu (v3, v2, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_m (mask, v3, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_tumu (mask, v3, v2, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_tu (v3, v2, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_m (mask, v3, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_tumu (mask, v3, v2, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "611a86f2b1596977714f3ad3335e2e0de7f7f411", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-15.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-15.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_tu (v3, v2, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_m (mask, v3, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_tumu (mask, v3, v2, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_tu (v3, v2, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_m (mask, v3, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_tumu (mask, v3, v2, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "0a7a1e88391269a23037f90ca094867850cb2c78", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-16.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-16.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_tu (v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_m (mask, v3, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vor_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vor_vx_i32m1_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_tu (v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_m (mask, v3, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vor_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vor_vx_i8mf8_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "eeea3517e01fe8a6e24c3255cea402a72161bbf8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-17.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-17.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vmul_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vmul_vx_i32m1_tu (v3, v2, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vmul_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vmul_vx_i32m1_m (mask, v3, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vmul_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vmul_vx_i32m1_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmul_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vmul_vx_i8mf8_tu (v3, v2, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vmul_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vmul_vx_i8mf8_m (mask, v3, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmul_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vmul_vx_i8mf8_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "328564fb0299968a525eb9f9127dc70b8b918634", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-18.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-18.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vmul_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vmul_vx_i32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vmul_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vmul_vx_i32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vmul_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vmul_vx_i32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmul_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vmul_vx_i8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vmul_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vmul_vx_i8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmul\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmul\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmul_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vmul_vx_i8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "f4616b4c72b2776fb3a3e8661ce573656025fe48", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-19.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-19.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vmax_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vmax_vx_i32m1_tu (v3, v2, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vmax_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vmax_vx_i32m1_m (mask, v3, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vmax_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vmax_vx_i32m1_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmax_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vmax_vx_i8mf8_tu (v3, v2, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vmax_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vmax_vx_i8mf8_m (mask, v3, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmax_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vmax_vx_i8mf8_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "2c02c35ef5756b60c4255af4b970e0056183e2c7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-2.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-2.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_tu (v3, v2, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_m (mask, v3, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_tumu (mask, v3, v2, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_tu (v3, v2, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_m (mask, v3, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_tumu (mask, v3, v2, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "441573623ab9843242dfd0c40676d75ffec7414a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-20.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-20.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vmax_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vmax_vx_i32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vmax_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vmax_vx_i32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vmax_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vmax_vx_i32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmax_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vmax_vx_i8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vmax_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vmax_vx_i8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmax_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vmax_vx_i8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "c082f4059c3126ed229caaf2b725ba2a0855c7c0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-21.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-21.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vmin_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vmin_vx_i32m1_tu (v3, v2, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vmin_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vmin_vx_i32m1_m (mask, v3, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vmin_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vmin_vx_i32m1_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmin_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vmin_vx_i8mf8_tu (v3, v2, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vmin_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vmin_vx_i8mf8_m (mask, v3, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmin_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vmin_vx_i8mf8_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "b4813626fc1641b62539d6488417a06f941c5036", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-22.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-22.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vmin_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vmin_vx_i32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vmin_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vmin_vx_i32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vmin_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vmin_vx_i32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmin_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vmin_vx_i8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vmin_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vmin_vx_i8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vmin_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vmin_vx_i8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "fd6fd6740cae8d1fca9b96053977c6ebd4f6172b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-23.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-23.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vmaxu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vmaxu_vx_u32m1_tu (v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vmaxu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vmaxu_vx_u32m1_m (mask, v3, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vmaxu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vmaxu_vx_u32m1_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vmaxu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vmaxu_vx_u8mf8_tu (v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vmaxu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vmaxu_vx_u8mf8_m (mask, v3, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vmaxu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vmaxu_vx_u8mf8_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "d8ed5b186a42c95a296bb67559e9a7c7cc9b8c76", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-24.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-24.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, uint32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vmaxu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vmaxu_vx_u32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vmaxu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vmaxu_vx_u32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vmaxu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vmaxu_vx_u32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, uint8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vmaxu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vmaxu_vx_u8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vmaxu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vmaxu_vx_u8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vmaxu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vmaxu_vx_u8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "66891acc15a9a3bdbb18f0932cdc6d69d5e374b7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-25.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-25.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vminu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vminu_vx_u32m1_tu (v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vminu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vminu_vx_u32m1_m (mask, v3, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vminu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vminu_vx_u32m1_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vminu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vminu_vx_u8mf8_tu (v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vminu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vminu_vx_u8mf8_m (mask, v3, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vminu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vminu_vx_u8mf8_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "b70a1360b3cb70b38c126218e4e747c21bc6def8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-26.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-26.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, uint32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vminu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vminu_vx_u32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vminu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vminu_vx_u32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vminu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vminu_vx_u32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, uint8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vminu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vminu_vx_u8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vminu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vminu_vx_u8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvminu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvminu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vminu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vminu_vx_u8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "6f068296e5a36c364c0f6fc3327af2f10a20eb87", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-27.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-27.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vdiv_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vdiv_vx_i32m1_tu (v3, v2, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vdiv_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vdiv_vx_i32m1_m (mask, v3, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vdiv_vx_i32m1 (v2, 5, 4);\n+    vint32m1_t v4 = __riscv_vdiv_vx_i32m1_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vdiv_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vdiv_vx_i8mf8_tu (v3, v2, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vdiv_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vdiv_vx_i8mf8_m (mask, v3, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vdiv_vx_i8mf8 (v2, 5, 4);\n+    vint8mf8_t v4 = __riscv_vdiv_vx_i8mf8_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "a239a3380bc359c70fc6855d994467b1c80d0862", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-28.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-28.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vdiv_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vdiv_vx_i32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vdiv_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vdiv_vx_i32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vdiv_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vdiv_vx_i32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vdiv_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vdiv_vx_i8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vdiv_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vdiv_vx_i8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdiv\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdiv\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vdiv_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vdiv_vx_i8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "9424a46457e794da09d170f51ff7bf732fafa658", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-29.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-29.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_tu (v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_m (mask, v3, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_tu (v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_m (mask, v3, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "1da0cb6e5ae5cde0185493d0e5d0d67d83a6c976", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-3.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-3.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_tu (v3, v2, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_m (mask, v3, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_tumu (mask, v3, v2, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_tu (v3, v2, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_m (mask, v3, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_tumu (mask, v3, v2, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "272c0eab273b6c6622e382df9a052ab8e6ea8e30", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-30.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-30.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, uint32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, uint8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "9424a46457e794da09d170f51ff7bf732fafa658", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-31.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-31.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_tu (v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_m (mask, v3, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_tu (v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_m (mask, v3, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "272c0eab273b6c6622e382df9a052ab8e6ea8e30", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-32.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-32.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, uint32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vdivu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vdivu_vx_u32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, uint8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvdivu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvdivu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vdivu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vdivu_vx_u8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "6f2bca4b58f8d4129ac7db8f0688e1a3b2d87a69", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-33.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-33.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_tu (v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_m (mask, v3, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_tu (v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_m (mask, v3, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "45015d77d2dc248ecce6b10d780bbfc577d20b8c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-34.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-34.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, uint32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, uint8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "6f2bca4b58f8d4129ac7db8f0688e1a3b2d87a69", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-35.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-35.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_tu (v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_m (mask, v3, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, 5, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_tu (v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_m (mask, v3, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, 5, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_tumu (mask, v3, v2, 5, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "45015d77d2dc248ecce6b10d780bbfc577d20b8c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-36.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-36.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, uint32_t x)\n+{\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tu (v, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_m (mask, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, uint32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint32m1_t v = __riscv_vle32_v_u32m1 (in, 4);\n+    vuint32m1_t v2 = __riscv_vle32_v_u32m1_tumu (mask, v, in, 4);\n+    vuint32m1_t v3 = __riscv_vremu_vx_u32m1 (v2, x, 4);\n+    vuint32m1_t v4 = __riscv_vremu_vx_u32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_u32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, uint8_t x)\n+{\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tu (v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_m (mask, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvremu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvremu\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, uint8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in, 4);\n+    vuint8mf8_t v2 = __riscv_vle8_v_u8mf8_tumu (mask, v, in, 4);\n+    vuint8mf8_t v3 = __riscv_vremu_vx_u8mf8 (v2, x, 4);\n+    vuint8mf8_t v4 = __riscv_vremu_vx_u8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_u8mf8 (out, v4, 4);\n+}"}, {"sha": "34de4458198a0d34e719da7ff465732fd2d30c5b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-37.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-37.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vsub_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vsub_vx_i32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vsub_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vsub_vx_i32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vsub_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vsub_vx_i32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vsub_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vsub_vx_i8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vsub_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vsub_vx_i8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vsub_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vsub_vx_i8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "1374becb8478f77175886e24111e01725f567db0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-38.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-38.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vsub_vx_i32m1 (v2, -15, 4);\n+    vint32m1_t v4 = __riscv_vsub_vx_i32m1_tu (v3, v2, -15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vsub_vx_i32m1 (v2, -15, 4);\n+    vint32m1_t v4 = __riscv_vsub_vx_i32m1_m (mask, v3, -15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vsub_vx_i32m1 (v2, -15, 4);\n+    vint32m1_t v4 = __riscv_vsub_vx_i32m1_tumu (mask, v3, v2, -15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vsub_vx_i8mf8 (v2, -15, 4);\n+    vint8mf8_t v4 = __riscv_vsub_vx_i8mf8_tu (v3, v2, -15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vsub_vx_i8mf8 (v2, -15, 4);\n+    vint8mf8_t v4 = __riscv_vsub_vx_i8mf8_m (mask, v3, -15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vsub_vx_i8mf8 (v2, -15, 4);\n+    vint8mf8_t v4 = __riscv_vsub_vx_i8mf8_tumu (mask, v3, v2, -15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "21b77b952e045ca7e79383edca81eed6dc4e7a21", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-39.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-39.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vsub_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vsub_vx_i32m1_tu (v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vsub_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vsub_vx_i32m1_m (mask, v3, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vsub_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vsub_vx_i32m1_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vsub_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vsub_vx_i8mf8_tu (v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vsub_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vsub_vx_i8mf8_m (mask, v3, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vsub_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vsub_vx_i8mf8_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "297ed2384770e2d0195d99645a71bd87513da7fc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-4.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-4.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_tu (v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_m (mask, v3, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_tu (v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_m (mask, v3, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "653f043e47124d84564697ab5cc9109b9ecd7f29", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-40.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-40.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, 17, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_tu (v3, v2, 17, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, 17, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_m (mask, v3, 17, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vx_i32m1 (v2, 17, 4);\n+    vint32m1_t v4 = __riscv_vadd_vx_i32m1_tumu (mask, v3, v2, 17, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, 17, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_tu (v3, v2, 17, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, 17, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_m (mask, v3, 17, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vx_i8mf8 (v2, 17, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vx_i8mf8_tumu (mask, v3, v2, 17, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "4ff352bd7afdbe873c6eb5963e8cf4b3293f6b72", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-41.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-41.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "975ebe709b913a18f4c21d10dca67ef907adb1a8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-42.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-42.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_tu (v3, v2, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvrsub\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_m (mask, v3, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvrsub\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_tumu (mask, v3, v2, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_tu (v3, v2, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvrsub\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_m (mask, v3, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvrsub\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_tumu (mask, v3, v2, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "4f3e9066f1629083fe41016410328544f3949181", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-43.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-43.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_tu (v3, v2, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvrsub\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_m (mask, v3, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvrsub\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_tumu (mask, v3, v2, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_tu (v3, v2, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvrsub\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_m (mask, v3, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvrsub\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_tumu (mask, v3, v2, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "d4dc4e0fe6ce1f8a4b1a8b30d109094c03315d6a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-44.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-44.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_tu (v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_m (mask, v3, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vrsub_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vrsub_vx_i32m1_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_tu (v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_m (mask, v3, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vrsub_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vrsub_vx_i8mf8_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "2fab88009dda69c95d2696606a99cc0337c3400a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-45.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-45.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "f6726e0b0a076ca47ca137da72f6e011885c4b74", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-46.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-46.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 0xAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "5a4f58bfc1a73e05354c9e316a92fd66142f89ad", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-47.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-47.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vadd\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "dd159f1b1f9c68d047e4555ee1860776e1a95eda", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-48.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-48.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vadd\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "37e06d5781ecc97b4ea42c550cde9ac45fbba82f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-49.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-49.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vadd\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "29eab66774e57d14fee3c0da032757bd0072c988", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-5.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-5.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "3893e17511db214ea95b648f1abb3f0f8297b562", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-50.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-50.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int32_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + 1, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + i + 2, 4);\n+    vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, x, 4);\n+    vint64m1_t v4 = __riscv_vadd_vx_i64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_i64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vadd\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "9bb73586677dbc9210b71549323e971a505696c7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-51.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-51.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "905caa3817d88397e85725f4c85f79cbafd19b3b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-52.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-52.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvand\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, 0xAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "f1b214402567f9aaf5d519d509e5d7b922355871", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-53.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-53.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vand\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "3dc22db3ce34f0f082d2e7fbaa4fd794b3acee59", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-54.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-54.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vand\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "d6893951511830c48db67e273b5217b9416969d2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-55.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-55.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vand_vx_i64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vand\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "b0ea553bf8924435991d8078e7703efe7043baa2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-56.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-56.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + 1, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + i + 2, 4);\n+    vint64m1_t v3 = __riscv_vand_vx_i64m1 (v2, x, 4);\n+    vint64m1_t v4 = __riscv_vand_vx_i64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_i64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vand\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "5c34220436ebdefec96ccf811914421be9a58ab3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-57.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-57.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "0f6d6063aa094322313f01495233330b88ebea90", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-58.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-58.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, 0xAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "9186d8dc8613d1e14b58cc3b6391b4a7c516751e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-59.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-59.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "67fd655ece2eaab3bbbfa52b01b747d4d707603f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-6.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-6.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_tu (v3, v2, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvxor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_m (mask, v3, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvxor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, -16, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_tumu (mask, v3, v2, -16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_tu (v3, v2, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvxor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_m (mask, v3, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvxor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, -16, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_tumu (mask, v3, v2, -16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "f7a5f3e30c076142c99c5d28b0b4b9bfc6e909e1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-60.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-60.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-60.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-60.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "17aeeb6fca7e04648292b3c9e2f3b2020596f972", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-61.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-61.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vor_vx_i64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "350697d764ddc2cf96d5e7c3354ab047027f0acb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-62.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-62.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-62.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-62.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + 1, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + i + 2, 4);\n+    vint64m1_t v3 = __riscv_vor_vx_i64m1 (v2, x, 4);\n+    vint64m1_t v4 = __riscv_vor_vx_i64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_i64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "0d02e95c71649547ce2e4d1a6e6891aaf6b66dac", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-63.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-63.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-63.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-63.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "b424a49f55b2510bbad26789a27b71647c6a7a76", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-64.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-64.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, 0xAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "9ab9134e66d7dd29b0d96cc8066092f7031956eb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-65.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-65.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-65.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-65.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "0792458e53d0c16a059650e415b9e5eb89cd0895", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-66.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-66.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "da2cf994b0c21a8a22b611ded749c4da842fdddc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-67.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-67.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vxor_vx_i64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "0f138c5d3c6e0f0152d4c60421819e0f60e4551e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-68.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-68.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + 1, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + i + 2, 4);\n+    vint64m1_t v3 = __riscv_vxor_vx_i64m1 (v2, x, 4);\n+    vint64m1_t v4 = __riscv_vxor_vx_i64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_i64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "2761f2275e55bdb5a55a379c6b2d272a50b87726", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-69.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-69.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "71a320a161988aa55687bc2de74573cc237f73b0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-7.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-7.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_tu (v3, v2, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvxor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_m (mask, v3, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvxor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, 15, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_tumu (mask, v3, v2, 15, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_tu (v3, v2, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvxor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_m (mask, v3, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvxor\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, 15, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_tumu (mask, v3, v2, 15, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "e06d7f48a8a67f6a61d81e7f25b47800e28c55c7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-70.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-70.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmax\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, 0xAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "e4408be6a814dcedb890548f89d522598cabcdd2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-71.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-71.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-71.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-71.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmax\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "604b69a2e9b372e1d405d6d665631714297e0d62", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-72.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-72.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-72.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-72.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmax\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "42f0d5f30e44b0ff7c2b9ae03cddbc296985c389", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-73.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-73.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-73.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-73.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vmax_vx_i64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmax\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "f4cbf0953576d64b0bd081a22e83f2a79d051c60", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-74.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-74.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + 1, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + i + 2, 4);\n+    vint64m1_t v3 = __riscv_vmax_vx_i64m1 (v2, x, 4);\n+    vint64m1_t v4 = __riscv_vmax_vx_i64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_i64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmax\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "ebcefc3794c6ffccfb3d296d4638a3ee131e028d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-75.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-75.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmin_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vmin_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmin_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vmin_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmin_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vmin_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmin\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmin_vx_i64m1 (v2, 0xAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vmin_vx_i64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "fcb8dfa5e0843d19de423c3a9ba888c8789087c7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-76.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-76.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-76.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-76.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmin_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vmin_vx_i64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmin\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "6cffe86c41845fb690f8f95658fb33a98aa20ae3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-77.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-77.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-77.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-77.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmin_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vmin_vx_i64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmin\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "669fcbfa44cf07e1f65e2952182808633cb7e82d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-78.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-78.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmin_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vmin_vx_i64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmin\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "d606078e85f6d2666ab7df6081263e6c8fe611fe", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-79.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-79.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + 1, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + i + 2, 4);\n+    vint64m1_t v3 = __riscv_vmin_vx_i64m1 (v2, x, 4);\n+    vint64m1_t v4 = __riscv_vmin_vx_i64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_i64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmin\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "797abbd2cc0518a9e508ba76551630acfa0805f1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-8.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-8.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_tu (v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_m (mask, v3, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**  ...\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vxor_vx_i32m1 (v2, 16, 4);\n+    vint32m1_t v4 = __riscv_vxor_vx_i32m1_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_tu (v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**  ...\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**  ...\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_m (mask, v3, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  ...\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**  ...\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvxor\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvxor\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vxor_vx_i8mf8 (v2, 16, 4);\n+    vint8mf8_t v4 = __riscv_vxor_vx_i8mf8_tumu (mask, v3, v2, 16, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "d5316e0c1e3fa9dddc70703d41311be9aa680db4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-80.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-80.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vmaxu_vx_u64m1 (v2, -16, 4);\n+  vuint64m1_t v4 = __riscv_vmaxu_vx_u64m1 (v3, -16, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vmaxu_vx_u64m1 (v2, 15, 4);\n+  vuint64m1_t v4 = __riscv_vmaxu_vx_u64m1 (v3, 15, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vmaxu_vx_u64m1 (v2, 16, 4);\n+  vuint64m1_t v4 = __riscv_vmaxu_vx_u64m1 (v3, 16, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmaxu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vmaxu_vx_u64m1 (v2, 0xAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vmaxu_vx_u64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}"}, {"sha": "5cd8e3582fdda3a9de028e1ab814fbe3694d2a91", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-81.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-81.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-81.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-81.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vmaxu_vx_u64m1 (v2, 0xAAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vmaxu_vx_u64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmaxu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "ad27f60ef912da919cd5b28a6dfe37fe4268c566", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-82.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-82.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-82.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-82.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vmaxu_vx_u64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vmaxu_vx_u64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmaxu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "1606f882703a311a4ac6f105e28c1d95647ad5af", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-83.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-83.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-83.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-83.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vmaxu_vx_u64m1 (v2, x, 4);\n+  vuint64m1_t v4 = __riscv_vmaxu_vx_u64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmaxu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "bca55b239f9798a02a759a6156f27ac5a45ac2e8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-84.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-84.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-84.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-84.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, uint64_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vuint64m1_t v = __riscv_vle64_v_u64m1 (in + i + 1, 4);\n+    vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + i + 2, 4);\n+    vuint64m1_t v3 = __riscv_vmaxu_vx_u64m1 (v2, x, 4);\n+    vuint64m1_t v4 = __riscv_vmaxu_vx_u64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_u64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmaxu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "0a0dece934f53316635e3f36bc339d8bc65c8866", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-85.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-85.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-85.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-85.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, -15, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, -15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, 17, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, 17, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "ec73670cdca72a312928f8e6f6257233b3b88926", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-86.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-86.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-86.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-86.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, -15, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, -15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, 17, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, 17, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, 0xAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "b0c35c1c76a5f7a2735319c2e4135261bbac9b24", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-87.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-87.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "59b820459d84b770e30515354c5f267a2275fd8a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-88.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-88.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-88.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-88.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "9f57c9ca89db877a1a43d5c2c32f4398109bd1a3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-89.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-89.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vsub_vx_i64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "ce786e15244cda5dc4d14f2163bf1838b616f725", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-9.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-9.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_tu (v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_m (mask, v3, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vand_vx_i32m1 (v2, x, 4);\n+    vint32m1_t v4 = __riscv_vand_vx_i32m1_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out, int8_t x)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_tu (v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_m (mask, v3, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvand\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvand\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out, int8_t x)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vand_vx_i8mf8 (v2, x, 4);\n+    vint8mf8_t v4 = __riscv_vand_vx_i8mf8_tumu (mask, v3, v2, x, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}, {"sha": "586e26499db28bb124f1806f2a446706f391b830", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-90.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-90.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-90.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-90.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int32_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + 1, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + i + 2, 4);\n+    vint64m1_t v3 = __riscv_vsub_vx_i64m1 (v2, x, 4);\n+    vint64m1_t v4 = __riscv_vsub_vx_i64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_i64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "295c1f68a28cbe2b83f3313c214f1db971c2afec", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-91.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-91.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-91.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-91.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "cade110e8b33b09789c82a448a4723b804803b6a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-92.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-92.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-92.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-92.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvrsub\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvrsub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, 0xAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "27798098ca07550367fdf14ca770ad011ce6ce26", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-93.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-93.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-93.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-93.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "e51589c6d01ff2eef99b99abe7c811ee6ef67dd8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-94.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-94.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-94.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-94.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "e06228a0c84d58cc4b33f81c2b8f43742e23c041", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-95.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-95.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-95.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-95.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vrsub_vx_i64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "d1bbb78f5edc9e929e099793931989eebb47e8e1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-96.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-96.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4b00f393b2c470b2c18e7fda1286d71408e41c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-96.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-96.c?ref=ce4b00f393b2c470b2c18e7fda1286d71408e41c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int32_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + 1, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + i + 2, 4);\n+    vint64m1_t v3 = __riscv_vrsub_vx_i64m1 (v2, x, 4);\n+    vint64m1_t v4 = __riscv_vrsub_vx_i64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_i64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}]}