{"sha": "ed2def05fefdf59e42ad6f13262e5323030e1610", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQyZGVmMDVmZWZkZjU5ZTQyYWQ2ZjEzMjYyZTUzMjMwMzBlMTYxMA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-12-16T13:14:46Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-12-16T13:14:46Z"}, "message": "The negdi2 patterns for ARM and Thumb-2 are duplicated because Thumb-2 doesn't support RSC with an immediate.\n\nThe negdi2 patterns for ARM and Thumb-2 are duplicated because Thumb-2\ndoesn't support RSC with an immediate.  We can however emulate RSC with\nzero using a shifted SBC.  If we add this to subsi3_carryin the negdi\npatterns can be merged, simplifying things a bit.  This should generate\nidentical code in all cases.\n\n    gcc/\n        * config/arm/arm.md (subsi3_carryin): Add Thumb-2 RSC #0.\n        (arm_negdi2) Rename to negdi2_insn, allow on Thumb-2.\n        * config/arm/thumb2.md (thumb2_negdi2): Remove pattern.\n\nFrom-SVN: r243745", "tree": {"sha": "09edc8080838f8853d9e7cbeb41973402f229efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09edc8080838f8853d9e7cbeb41973402f229efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed2def05fefdf59e42ad6f13262e5323030e1610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2def05fefdf59e42ad6f13262e5323030e1610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2def05fefdf59e42ad6f13262e5323030e1610", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2def05fefdf59e42ad6f13262e5323030e1610/comments", "author": null, "committer": null, "parents": [{"sha": "c67b6f268397b2fc20e72da19e276d2b027ddee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67b6f268397b2fc20e72da19e276d2b027ddee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67b6f268397b2fc20e72da19e276d2b027ddee4"}], "stats": {"total": 54, "additions": 18, "deletions": 36}, "files": [{"sha": "bdbadd348b7ed069df7e0a68d15f72d8f5f6a1f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2def05fefdf59e42ad6f13262e5323030e1610/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2def05fefdf59e42ad6f13262e5323030e1610/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed2def05fefdf59e42ad6f13262e5323030e1610", "patch": "@@ -1,3 +1,9 @@\n+2016-12-16  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/arm/arm.md (subsi3_carryin): Add Thumb-2 RSC #0.\n+\t(arm_negdi2) Rename to negdi2_insn, allow on Thumb-2.\n+\t* config/arm/thumb2.md (thumb2_negdi2): Remove pattern.\n+\n 2016-12-16  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/arm/arm.c (thumb_core_reg_alloc_order): Swap R12 and R14."}, {"sha": "ff1f565b850d1b9e7378461c5a808e7d486936bc", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2def05fefdf59e42ad6f13262e5323030e1610/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2def05fefdf59e42ad6f13262e5323030e1610/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ed2def05fefdf59e42ad6f13262e5323030e1610", "patch": "@@ -1129,19 +1129,20 @@\n )\n \n (define_insn \"*subsi3_carryin\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-        (minus:SI (minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"r,I\")\n-                            (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n-                  (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(minus:SI (minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"r,I,Pz\")\n+\t\t\t    (match_operand:SI 2 \"s_register_operand\" \"r,r,r\"))\n+\t\t  (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n   \"TARGET_32BIT\"\n   \"@\n    sbc%?\\\\t%0, %1, %2\n-   rsc%?\\\\t%0, %2, %1\"\n+   rsc%?\\\\t%0, %2, %1\n+   sbc%?\\\\t%0, %2, %2, lsl #1\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"arch\" \"*,a\")\n+   (set_attr \"arch\" \"*,a,t2\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n-   (set_attr \"type\" \"adc_reg,adc_imm\")]\n+   (set_attr \"type\" \"adc_reg,adc_imm,alu_shift_imm\")]\n )\n \n (define_insn \"*subsi3_carryin_const\"\n@@ -4681,12 +4682,13 @@\n \n ;; The constraints here are to prevent a *partial* overlap (where %Q0 == %R1).\n ;; The first alternative allows the common case of a *full* overlap.\n-(define_insn_and_split \"*arm_negdi2\"\n+(define_insn_and_split \"*negdi2_insn\"\n   [(set (match_operand:DI         0 \"s_register_operand\" \"=r,&r\")\n \t(neg:DI (match_operand:DI 1 \"s_register_operand\"  \"0,r\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARM\"\n-  \"#\"   ; \"rsbs\\\\t%Q0, %Q1, #0\\;rsc\\\\t%R0, %R1, #0\"\n+  \"TARGET_32BIT\"\n+  \"#\"\t; rsbs %Q0, %Q1, #0; rsc %R0, %R1, #0\t       (ARM)\n+\t; negs %Q0, %Q1    ; sbc %R0, %R1, %R1, lsl #1 (Thumb-2)\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CC CC_REGNUM)\n \t\t   (compare:CC (const_int 0) (match_dup 1)))"}, {"sha": "e8fff0764a467d800ec58df91589ccf5775efee5", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2def05fefdf59e42ad6f13262e5323030e1610/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2def05fefdf59e42ad6f13262e5323030e1610/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=ed2def05fefdf59e42ad6f13262e5323030e1610", "patch": "@@ -125,32 +125,6 @@\n    (set_attr \"type\" \"multiple\")]\n )\n \n-;; Thumb-2 does not have rsc, so use a clever trick with shifter operands.\n-(define_insn_and_split \"*thumb2_negdi2\"\n-  [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,r\")\n-\t(neg:DI (match_operand:DI 1 \"s_register_operand\"  \"?r,0\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_THUMB2\"\n-  \"#\" ; negs\\\\t%Q0, %Q1\\;sbc\\\\t%R0, %R1, %R1, lsl #1\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (const_int 0) (match_dup 1)))\n-\t      (set (match_dup 0) (minus:SI (const_int 0) (match_dup 1)))])\n-   (set (match_dup 2) (minus:SI (minus:SI (match_dup 3)\n-                                          (ashift:SI (match_dup 3)\n-                                                     (const_int 1)))\n-                                (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[3] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-  }\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n (define_insn_and_split \"*thumb2_abssi2\"\n   [(set (match_operand:SI         0 \"s_register_operand\" \"=&r,l,r\")\n \t(abs:SI (match_operand:SI 1 \"s_register_operand\" \"r,0,0\")))"}]}