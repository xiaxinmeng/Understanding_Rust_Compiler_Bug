{"sha": "ce2ad8cc8f080890966b594453ff01e875605e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UyYWQ4Y2M4ZjA4MDg5MDk2NmI1OTQ0NTNmZjAxZTg3NTYwNWU2Ng==", "commit": {"author": {"name": "Wei Xiao", "email": "wei3.xiao@intel.com", "date": "2018-11-06T03:19:37Z"}, "committer": {"name": "Xuepeng Guo", "email": "xguo@gcc.gnu.org", "date": "2018-11-06T03:19:37Z"}, "message": "avx512fintrin.h: Update VFIXUPIMM* intrinsics.\n\ngcc/\n2018-11-06 Wei Xiao <wei3.xiao@intel.com>\n\n\t* config/i386/avx512fintrin.h: Update VFIXUPIMM* intrinsics.\n\t(_mm512_fixupimm_round_pd): Update parameters and builtin.\n\t(_mm512_maskz_fixupimm_round_pd): Ditto.\n\t(_mm512_fixupimm_round_ps): Ditto.\n\t(_mm512_maskz_fixupimm_round_ps): Ditto.\n\t(_mm_fixupimm_round_sd): Ditto.\n\t(_mm_maskz_fixupimm_round_sd): Ditto.\n\t(_mm_fixupimm_round_ss): Ditto.\n\t(_mm_maskz_fixupimm_round_ss): Ditto.\n\t(_mm512_fixupimm_pd): Ditto.\n\t(_mm512_maskz_fixupimm_pd): Ditto.\n\t(_mm512_fixupimm_ps): Ditto.\n\t(_mm512_maskz_fixupimm_ps): Ditto.\n\t(_mm_fixupimm_sd): Ditto.\n\t(_mm_maskz_fixupimm_sd): Ditto.\n\t(_mm_fixupimm_ss): Ditto.\n\t(_mm_maskz_fixupimm_ss): Ditto.\n\t(_mm512_mask_fixupimm_round_pd): Update builtin.\n\t(_mm512_mask_fixupimm_round_ps): Ditto.\n\t(_mm_mask_fixupimm_round_sd): Ditto.\n\t(_mm_mask_fixupimm_round_ss): Ditto.\n\t(_mm512_mask_fixupimm_pd): Ditto.\n\t(_mm512_mask_fixupimm_ps): Ditto.\n\t(_mm_mask_fixupimm_sd): Ditto.\n\t(_mm_mask_fixupimm_ss): Ditto.\n\t* config/i386/avx512vlintrin.h:\n\t(_mm256_fixupimm_pd): Update parameters and builtin.\n\t(_mm256_maskz_fixupimm_pd): Ditto.\n\t(_mm256_fixupimm_ps): Ditto.\n\t(_mm256_maskz_fixupimm_ps): Ditto.\n\t(_mm_fixupimm_pd): Ditto.\n\t(_mm_maskz_fixupimm_pd): Ditto.\n\t(_mm_fixupimm_ps): Ditto.\n\t(_mm_maskz_fixupimm_ps): Ditto.\n\t(_mm256_mask_fixupimm_pd): Update builtin.\n\t(_mm256_mask_fixupimm_ps): Ditto.\n\t(_mm_mask_fixupimm_pd): Ditto.\n\t(_mm_mask_fixupimm_ps): Ditto.\n\t* config/i386/i386-builtin-types.def: Add new types and remove useless ones.\n\t* config/i386/i386-builtin.def: Update builtin definitions.\n\t* config/i386/i386.c: Handle new builtin types and remove useless ones.\n\t* config/i386/sse.md: Update VFIXUPIMM* patterns.\n\t(<avx512>_fixupimm<mode>_maskz<round_saeonly_expand_name>): Update.\n\t(<avx512>_fixupimm<mode><sd_maskz_name><round_saeonly_name>): Update.\n\t(<avx512>_fixupimm<mode>_mask<round_saeonly_name>): Update.\n\t(avx512f_sfixupimm<mode>_maskz<round_saeonly_expand_name>): Update.\n\t(avx512f_sfixupimm<mode><sd_maskz_name><round_saeonly_name>): Update.\n\t(avx512f_sfixupimm<mode>_mask<round_saeonly_name>): Update.\n\t* config/i386/subst.md:\n\t(round_saeonly_sd_mask_operand4): Add new subst_attr.\n\t(round_saeonly_sd_mask_op4): Ditto.\n\t(round_saeonly_expand_operand5): Ditto.\n\t(round_saeonly_expand): Update.\n\ngcc/testsuite/\n2018-11-06 Wei Xiao <wei3.xiao@intel.com>\n\n\t* gcc.target/i386/avx-1.c: Update tests for VFIXUPIMM* intrinsics.\n\t* gcc.target/i386/avx512f-vfixupimmpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmss-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfixupimmpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfixupimmps-1.c: Ditto.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/testimm-10.c: Ditto.\n\t* gcc.target/i386/testround-1.c: Ditto.\n\nFrom-SVN: r265827", "tree": {"sha": "56620ed30ebc6c06530b0a065adef92e3831b8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56620ed30ebc6c06530b0a065adef92e3831b8a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce2ad8cc8f080890966b594453ff01e875605e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2ad8cc8f080890966b594453ff01e875605e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2ad8cc8f080890966b594453ff01e875605e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2ad8cc8f080890966b594453ff01e875605e66/comments", "author": {"login": "williamweixiao", "id": 23331893, "node_id": "MDQ6VXNlcjIzMzMxODkz", "avatar_url": "https://avatars.githubusercontent.com/u/23331893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/williamweixiao", "html_url": "https://github.com/williamweixiao", "followers_url": "https://api.github.com/users/williamweixiao/followers", "following_url": "https://api.github.com/users/williamweixiao/following{/other_user}", "gists_url": "https://api.github.com/users/williamweixiao/gists{/gist_id}", "starred_url": "https://api.github.com/users/williamweixiao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/williamweixiao/subscriptions", "organizations_url": "https://api.github.com/users/williamweixiao/orgs", "repos_url": "https://api.github.com/users/williamweixiao/repos", "events_url": "https://api.github.com/users/williamweixiao/events{/privacy}", "received_events_url": "https://api.github.com/users/williamweixiao/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40228b24ee571c3a8a5b76bcdfa9f0e53d2e6660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40228b24ee571c3a8a5b76bcdfa9f0e53d2e6660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40228b24ee571c3a8a5b76bcdfa9f0e53d2e6660"}], "stats": {"total": 1017, "additions": 554, "deletions": 463}, "files": [{"sha": "1bc634cd240b7b40bed30291e3053c76121aa330", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -1,3 +1,59 @@\n+2018-11-06 Wei Xiao <wei3.xiao@intel.com>\n+\n+\t* config/i386/avx512fintrin.h: Update VFIXUPIMM* intrinsics.\n+\t(_mm512_fixupimm_round_pd): Update parameters and builtin.\n+\t(_mm512_maskz_fixupimm_round_pd): Ditto.\n+\t(_mm512_fixupimm_round_ps): Ditto.\n+\t(_mm512_maskz_fixupimm_round_ps): Ditto.\n+\t(_mm_fixupimm_round_sd): Ditto.\n+\t(_mm_maskz_fixupimm_round_sd): Ditto.\n+\t(_mm_fixupimm_round_ss): Ditto.\n+\t(_mm_maskz_fixupimm_round_ss): Ditto.\n+\t(_mm512_fixupimm_pd): Ditto.\n+\t(_mm512_maskz_fixupimm_pd): Ditto.\n+\t(_mm512_fixupimm_ps): Ditto.\n+\t(_mm512_maskz_fixupimm_ps): Ditto.\n+\t(_mm_fixupimm_sd): Ditto.\n+\t(_mm_maskz_fixupimm_sd): Ditto.\n+\t(_mm_fixupimm_ss): Ditto.\n+\t(_mm_maskz_fixupimm_ss): Ditto.\n+\t(_mm512_mask_fixupimm_round_pd): Update builtin.\n+\t(_mm512_mask_fixupimm_round_ps): Ditto.\n+\t(_mm_mask_fixupimm_round_sd): Ditto.\n+\t(_mm_mask_fixupimm_round_ss): Ditto.\n+\t(_mm512_mask_fixupimm_pd): Ditto.\n+\t(_mm512_mask_fixupimm_ps): Ditto.\n+\t(_mm_mask_fixupimm_sd): Ditto.\n+\t(_mm_mask_fixupimm_ss): Ditto.\n+\t* config/i386/avx512vlintrin.h:\n+\t(_mm256_fixupimm_pd): Update parameters and builtin.\n+\t(_mm256_maskz_fixupimm_pd): Ditto.\n+\t(_mm256_fixupimm_ps): Ditto.\n+\t(_mm256_maskz_fixupimm_ps): Ditto.\n+\t(_mm_fixupimm_pd): Ditto.\n+\t(_mm_maskz_fixupimm_pd): Ditto.\n+\t(_mm_fixupimm_ps): Ditto.\n+\t(_mm_maskz_fixupimm_ps): Ditto.\n+\t(_mm256_mask_fixupimm_pd): Update builtin.\n+\t(_mm256_mask_fixupimm_ps): Ditto.\n+\t(_mm_mask_fixupimm_pd): Ditto.\n+\t(_mm_mask_fixupimm_ps): Ditto.\n+\t* config/i386/i386-builtin-types.def: Add new types and remove useless ones.\n+\t* config/i386/i386-builtin.def: Update builtin definitions.\n+\t* config/i386/i386.c: Handle new builtin types and remove useless ones.\n+\t* config/i386/sse.md: Update VFIXUPIMM* patterns.\n+\t(<avx512>_fixupimm<mode>_maskz<round_saeonly_expand_name>): Update.\n+\t(<avx512>_fixupimm<mode><sd_maskz_name><round_saeonly_name>): Update.\n+\t(<avx512>_fixupimm<mode>_mask<round_saeonly_name>): Update.\n+\t(avx512f_sfixupimm<mode>_maskz<round_saeonly_expand_name>): Update.\n+\t(avx512f_sfixupimm<mode><sd_maskz_name><round_saeonly_name>): Update.\n+\t(avx512f_sfixupimm<mode>_mask<round_saeonly_name>): Update.\n+\t* config/i386/subst.md:\n+\t(round_saeonly_sd_mask_operand4): Add new subst_attr.\n+\t(round_saeonly_sd_mask_op4): Ditto.\n+\t(round_saeonly_expand_operand5): Ditto.\n+\t(round_saeonly_expand): Update.\n+\n 2018-11-05  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/uclinux.h (XTENSA_ALWAYS_PIC): Change to 0."}, {"sha": "c749b1a3b0ecbb83700e9a95c6bfcf5ab5045ff5", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 150, "deletions": 171, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -6977,140 +6977,132 @@ _mm512_maskz_shuffle_pd (__mmask8 __U, __m512d __M, __m512d __V,\n \n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_fixupimm_round_pd (__m512d __A, __m512d __B, __m512i __C,\n+_mm512_fixupimm_round_pd (__m512d __A, __m512i __B,\n \t\t\t  const int __imm, const int __R)\n {\n-  return (__m512d) __builtin_ia32_fixupimmpd512_mask ((__v8df) __A,\n-\t\t\t\t\t\t      (__v8df) __B,\n-\t\t\t\t\t\t      (__v8di) __C,\n+  return (__m512d) __builtin_ia32_fixupimmpd512 ((__v8df) __A,\n+\t\t\t\t\t\t      (__v8di) __B,\n \t\t\t\t\t\t      __imm,\n-\t\t\t\t\t\t      (__mmask8) -1, __R);\n+\t\t\t\t\t\t      __R);\n }\n \n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_fixupimm_round_pd (__m512d __A, __mmask8 __U, __m512d __B,\n-\t\t\t       __m512i __C, const int __imm, const int __R)\n+_mm512_mask_fixupimm_round_pd (__m512d __W, __mmask8 __U, __m512d __A,\n+\t\t\t       __m512i __B, const int __imm, const int __R)\n {\n   return (__m512d) __builtin_ia32_fixupimmpd512_mask ((__v8df) __A,\n-\t\t\t\t\t\t      (__v8df) __B,\n-\t\t\t\t\t\t      (__v8di) __C,\n+\t\t\t\t\t\t      (__v8di) __B,\n \t\t\t\t\t\t      __imm,\n+\t\t\t\t\t\t      (__v8df) __W,\n \t\t\t\t\t\t      (__mmask8) __U, __R);\n }\n \n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_fixupimm_round_pd (__mmask8 __U, __m512d __A, __m512d __B,\n-\t\t\t\t__m512i __C, const int __imm, const int __R)\n+_mm512_maskz_fixupimm_round_pd (__mmask8 __U, __m512d __A,\n+\t\t\t\t__m512i __B, const int __imm, const int __R)\n {\n   return (__m512d) __builtin_ia32_fixupimmpd512_maskz ((__v8df) __A,\n-\t\t\t\t\t\t       (__v8df) __B,\n-\t\t\t\t\t\t       (__v8di) __C,\n+\t\t\t\t\t\t       (__v8di) __B,\n \t\t\t\t\t\t       __imm,\n \t\t\t\t\t\t       (__mmask8) __U, __R);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_fixupimm_round_ps (__m512 __A, __m512 __B, __m512i __C,\n+_mm512_fixupimm_round_ps (__m512 __A, __m512i __B,\n \t\t\t  const int __imm, const int __R)\n {\n-  return (__m512) __builtin_ia32_fixupimmps512_mask ((__v16sf) __A,\n-\t\t\t\t\t\t     (__v16sf) __B,\n-\t\t\t\t\t\t     (__v16si) __C,\n+  return (__m512) __builtin_ia32_fixupimmps512 ((__v16sf) __A,\n+\t\t\t\t\t\t     (__v16si) __B,\n \t\t\t\t\t\t     __imm,\n-\t\t\t\t\t\t     (__mmask16) -1, __R);\n+\t\t\t\t\t\t     __R);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_fixupimm_round_ps (__m512 __A, __mmask16 __U, __m512 __B,\n-\t\t\t       __m512i __C, const int __imm, const int __R)\n+_mm512_mask_fixupimm_round_ps (__m512 __W, __mmask16 __U, __m512 __A,\n+\t\t\t       __m512i __B, const int __imm, const int __R)\n {\n   return (__m512) __builtin_ia32_fixupimmps512_mask ((__v16sf) __A,\n-\t\t\t\t\t\t     (__v16sf) __B,\n-\t\t\t\t\t\t     (__v16si) __C,\n+\t\t\t\t\t\t     (__v16si) __B,\n \t\t\t\t\t\t     __imm,\n+\t\t\t\t\t\t     (__v16sf) __W,\n \t\t\t\t\t\t     (__mmask16) __U, __R);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_fixupimm_round_ps (__mmask16 __U, __m512 __A, __m512 __B,\n-\t\t\t\t__m512i __C, const int __imm, const int __R)\n+_mm512_maskz_fixupimm_round_ps (__mmask16 __U, __m512 __A,\n+\t\t\t\t__m512i __B, const int __imm, const int __R)\n {\n   return (__m512) __builtin_ia32_fixupimmps512_maskz ((__v16sf) __A,\n-\t\t\t\t\t\t      (__v16sf) __B,\n-\t\t\t\t\t\t      (__v16si) __C,\n+\t\t\t\t\t\t      (__v16si) __B,\n \t\t\t\t\t\t      __imm,\n \t\t\t\t\t\t      (__mmask16) __U, __R);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_fixupimm_round_sd (__m128d __A, __m128d __B, __m128i __C,\n+_mm_fixupimm_round_sd (__m128d __A, __m128i __B,\n \t\t       const int __imm, const int __R)\n {\n-  return (__m128d) __builtin_ia32_fixupimmsd_mask ((__v2df) __A,\n-\t\t\t\t\t\t   (__v2df) __B,\n-\t\t\t\t\t\t   (__v2di) __C, __imm,\n-\t\t\t\t\t\t   (__mmask8) -1, __R);\n+  return (__m128d) __builtin_ia32_fixupimmsd ((__v2df) __A,\n+\t\t\t\t\t\t   (__v2di) __B, __imm,\n+\t\t\t\t\t\t   __R);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_fixupimm_round_sd (__m128d __A, __mmask8 __U, __m128d __B,\n-\t\t\t    __m128i __C, const int __imm, const int __R)\n+_mm_mask_fixupimm_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t    __m128i __B, const int __imm, const int __R)\n {\n   return (__m128d) __builtin_ia32_fixupimmsd_mask ((__v2df) __A,\n-\t\t\t\t\t\t   (__v2df) __B,\n-\t\t\t\t\t\t   (__v2di) __C, __imm,\n+\t\t\t\t\t\t   (__v2di) __B, __imm,\n+\t\t\t\t\t\t   (__v2df) __W,\n \t\t\t\t\t\t   (__mmask8) __U, __R);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskz_fixupimm_round_sd (__mmask8 __U, __m128d __A, __m128d __B,\n-\t\t\t     __m128i __C, const int __imm, const int __R)\n+_mm_maskz_fixupimm_round_sd (__mmask8 __U, __m128d __A,\n+\t\t\t     __m128i __B, const int __imm, const int __R)\n {\n   return (__m128d) __builtin_ia32_fixupimmsd_maskz ((__v2df) __A,\n-\t\t\t\t\t\t    (__v2df) __B,\n-\t\t\t\t\t\t    (__v2di) __C,\n+\t\t\t\t\t\t    (__v2di) __B,\n \t\t\t\t\t\t    __imm,\n \t\t\t\t\t\t    (__mmask8) __U, __R);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_fixupimm_round_ss (__m128 __A, __m128 __B, __m128i __C,\n+_mm_fixupimm_round_ss (__m128 __A, __m128i __B,\n \t\t       const int __imm, const int __R)\n {\n-  return (__m128) __builtin_ia32_fixupimmss_mask ((__v4sf) __A,\n-\t\t\t\t\t\t  (__v4sf) __B,\n-\t\t\t\t\t\t  (__v4si) __C, __imm,\n-\t\t\t\t\t\t  (__mmask8) -1, __R);\n+  return (__m128) __builtin_ia32_fixupimmss ((__v4sf) __A,\n+\t\t\t\t\t\t  (__v4si) __B, __imm,\n+\t\t\t\t\t\t  __R);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_fixupimm_round_ss (__m128 __A, __mmask8 __U, __m128 __B,\n-\t\t\t    __m128i __C, const int __imm, const int __R)\n+_mm_mask_fixupimm_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t    __m128i __B, const int __imm, const int __R)\n {\n   return (__m128) __builtin_ia32_fixupimmss_mask ((__v4sf) __A,\n-\t\t\t\t\t\t  (__v4sf) __B,\n-\t\t\t\t\t\t  (__v4si) __C, __imm,\n+\t\t\t\t\t\t  (__v4si) __B, __imm,\n+\t\t\t\t\t\t  (__v4sf) __W,\n \t\t\t\t\t\t  (__mmask8) __U, __R);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskz_fixupimm_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n-\t\t\t     __m128i __C, const int __imm, const int __R)\n+_mm_maskz_fixupimm_round_ss (__mmask8 __U, __m128 __A,\n+\t\t\t     __m128i __B, const int __imm, const int __R)\n {\n   return (__m128) __builtin_ia32_fixupimmss_maskz ((__v4sf) __A,\n-\t\t\t\t\t\t   (__v4sf) __B,\n-\t\t\t\t\t\t   (__v4si) __C, __imm,\n+\t\t\t\t\t\t   (__v4si) __B, __imm,\n \t\t\t\t\t\t   (__mmask8) __U, __R);\n }\n \n@@ -7151,64 +7143,63 @@ _mm_maskz_fixupimm_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n     (__v16sf)(__m512)_mm512_setzero_ps(),\\\n     (__mmask16)(U)))\n \n-#define _mm512_fixupimm_round_pd(X, Y, Z, C, R)\t\t\t\t\t\\\n-  ((__m512d)__builtin_ia32_fixupimmpd512_mask ((__v8df)(__m512d)(X),\t\\\n-      (__v8df)(__m512d)(Y), (__v8di)(__m512i)(Z), (int)(C),\t\t\\\n-      (__mmask8)(-1), (R)))\n+#define _mm512_fixupimm_round_pd(X, Y, C, R)\t\t\t\t\t\\\n+  ((__m512d)__builtin_ia32_fixupimmpd512 ((__v8df)(__m512d)(X),\t\\\n+      (__v8di)(__m512i)(Y), (int)(C), (R)))\n \n-#define _mm512_mask_fixupimm_round_pd(X, U, Y, Z, C, R)                          \\\n+#define _mm512_mask_fixupimm_round_pd(W, U, X, Y, C, R)                          \\\n   ((__m512d)__builtin_ia32_fixupimmpd512_mask ((__v8df)(__m512d)(X),    \\\n-      (__v8df)(__m512d)(Y), (__v8di)(__m512i)(Z), (int)(C),             \\\n+      (__v8di)(__m512i)(Y), (int)(C), (__v8df)(__m512d)(W),            \\\n       (__mmask8)(U), (R)))\n \n-#define _mm512_maskz_fixupimm_round_pd(U, X, Y, Z, C, R)                         \\\n+#define _mm512_maskz_fixupimm_round_pd(U, X, Y, C, R)                         \\\n   ((__m512d)__builtin_ia32_fixupimmpd512_maskz ((__v8df)(__m512d)(X),   \\\n-      (__v8df)(__m512d)(Y), (__v8di)(__m512i)(Z), (int)(C),             \\\n+      (__v8di)(__m512i)(Y), (int)(C),             \\\n       (__mmask8)(U), (R)))\n \n-#define _mm512_fixupimm_round_ps(X, Y, Z, C, R)\t\t\t\t\t\\\n-  ((__m512)__builtin_ia32_fixupimmps512_mask ((__v16sf)(__m512)(X),\t\\\n-    (__v16sf)(__m512)(Y), (__v16si)(__m512i)(Z), (int)(C),\t\t\\\n-    (__mmask16)(-1), (R)))\n+#define _mm512_fixupimm_round_ps(X, Y, C, R)\t\t\t\t\t\\\n+  ((__m512)__builtin_ia32_fixupimmps512 ((__v16sf)(__m512)(X),\t\\\n+    (__v16si)(__m512i)(Y), (int)(C),\t\t\\\n+    (R)))\n \n-#define _mm512_mask_fixupimm_round_ps(X, U, Y, Z, C, R)                          \\\n+#define _mm512_mask_fixupimm_round_ps(W, U, X, Y, C, R)                          \\\n   ((__m512)__builtin_ia32_fixupimmps512_mask ((__v16sf)(__m512)(X),     \\\n-    (__v16sf)(__m512)(Y), (__v16si)(__m512i)(Z), (int)(C),              \\\n-    (__mmask16)(U), (R)))\n+    (__v16si)(__m512i)(Y), (int)(C),              \\\n+    (__v16sf)(__m512)(W), (__mmask16)(U), (R)))\n \n-#define _mm512_maskz_fixupimm_round_ps(U, X, Y, Z, C, R)                         \\\n+#define _mm512_maskz_fixupimm_round_ps(U, X, Y, C, R)                         \\\n   ((__m512)__builtin_ia32_fixupimmps512_maskz ((__v16sf)(__m512)(X),    \\\n-    (__v16sf)(__m512)(Y), (__v16si)(__m512i)(Z), (int)(C),              \\\n+    (__v16si)(__m512i)(Y), (int)(C),              \\\n     (__mmask16)(U), (R)))\n \n-#define _mm_fixupimm_round_sd(X, Y, Z, C, R)\t\t\t\t\t\\\n-    ((__m128d)__builtin_ia32_fixupimmsd_mask ((__v2df)(__m128d)(X),\t\\\n-      (__v2df)(__m128d)(Y), (__v2di)(__m128i)(Z), (int)(C),\t\t\\\n-      (__mmask8)(-1), (R)))\n+#define _mm_fixupimm_round_sd(X, Y, C, R)\t\t\t\t\t\\\n+    ((__m128d)__builtin_ia32_fixupimmsd ((__v2df)(__m128d)(X),\t\\\n+      (__v2di)(__m128i)(Y), (int)(C),\t\t\\\n+      (R)))\n \n-#define _mm_mask_fixupimm_round_sd(X, U, Y, Z, C, R)\t\t\t\t\\\n+#define _mm_mask_fixupimm_round_sd(W, U, X, Y, C, R)\t\t\t\t\\\n     ((__m128d)__builtin_ia32_fixupimmsd_mask ((__v2df)(__m128d)(X),\t\\\n-      (__v2df)(__m128d)(Y), (__v2di)(__m128i)(Z), (int)(C),\t\t\\\n-      (__mmask8)(U), (R)))\n+      (__v2di)(__m128i)(Y), (int)(C),\t\t\\\n+      (__v2df)(__m128d)(W), (__mmask8)(U), (R)))\n \n-#define _mm_maskz_fixupimm_round_sd(U, X, Y, Z, C, R)\t\t\t\t\\\n+#define _mm_maskz_fixupimm_round_sd(U, X, Y, C, R)\t\t\t\t\\\n     ((__m128d)__builtin_ia32_fixupimmsd_maskz ((__v2df)(__m128d)(X),\t\\\n-      (__v2df)(__m128d)(Y), (__v2di)(__m128i)(Z), (int)(C),\t\t\\\n+      (__v2di)(__m128i)(Y), (int)(C),\t\t\\\n       (__mmask8)(U), (R)))\n \n-#define _mm_fixupimm_round_ss(X, Y, Z, C, R)\t\t\t\t\t\\\n-    ((__m128)__builtin_ia32_fixupimmss_mask ((__v4sf)(__m128)(X),\t\\\n-      (__v4sf)(__m128)(Y), (__v4si)(__m128i)(Z), (int)(C),\t\t\\\n-      (__mmask8)(-1), (R)))\n+#define _mm_fixupimm_round_ss(X, Y, C, R)\t\t\t\t\t\\\n+    ((__m128)__builtin_ia32_fixupimmss ((__v4sf)(__m128)(X),\t\\\n+      (__v4si)(__m128i)(Y), (int)(C),\t\t\\\n+      (R)))\n \n-#define _mm_mask_fixupimm_round_ss(X, U, Y, Z, C, R)\t\t\t\t\\\n+#define _mm_mask_fixupimm_round_ss(W, U, X, Y, C, R)\t\t\t\t\\\n     ((__m128)__builtin_ia32_fixupimmss_mask ((__v4sf)(__m128)(X),\t\\\n-      (__v4sf)(__m128)(Y), (__v4si)(__m128i)(Z), (int)(C),\t\t\\\n-      (__mmask8)(U), (R)))\n+      (__v4si)(__m128i)(Y), (int)(C),\t\t\\\n+      (__v4sf)(__m128)(W), (__mmask8)(U), (R)))\n \n-#define _mm_maskz_fixupimm_round_ss(U, X, Y, Z, C, R)\t\t\t\t\\\n+#define _mm_maskz_fixupimm_round_ss(U, X, Y, C, R)\t\t\t\t\\\n     ((__m128)__builtin_ia32_fixupimmss_maskz ((__v4sf)(__m128)(X),\t\\\n-      (__v4sf)(__m128)(Y), (__v4si)(__m128i)(Z), (int)(C),\t\t\\\n+      (__v4si)(__m128i)(Y), (int)(C),\t\t\\\n       (__mmask8)(U), (R)))\n #endif\n \n@@ -13215,209 +13206,197 @@ _mm512_maskz_cvtepu32_ps (__mmask16 __U, __m512i __A)\n #ifdef __OPTIMIZE__\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_fixupimm_pd (__m512d __A, __m512d __B, __m512i __C, const int __imm)\n+_mm512_fixupimm_pd (__m512d __A, __m512i __B, const int __imm)\n {\n-  return (__m512d) __builtin_ia32_fixupimmpd512_mask ((__v8df) __A,\n-\t\t\t\t\t\t      (__v8df) __B,\n-\t\t\t\t\t\t      (__v8di) __C,\n+  return (__m512d) __builtin_ia32_fixupimmpd512 ((__v8df) __A,\n+\t\t\t\t\t\t      (__v8di) __B,\n \t\t\t\t\t\t      __imm,\n-\t\t\t\t\t\t      (__mmask8) -1,\n \t\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_fixupimm_pd (__m512d __A, __mmask8 __U, __m512d __B,\n-\t\t\t __m512i __C, const int __imm)\n+_mm512_mask_fixupimm_pd (__m512d __W, __mmask8 __U, __m512d __A,\n+\t\t\t __m512i __B, const int __imm)\n {\n   return (__m512d) __builtin_ia32_fixupimmpd512_mask ((__v8df) __A,\n-\t\t\t\t\t\t      (__v8df) __B,\n-\t\t\t\t\t\t      (__v8di) __C,\n+\t\t\t\t\t\t      (__v8di) __B,\n \t\t\t\t\t\t      __imm,\n+\t\t\t\t\t\t      (__v8df) __W,\n \t\t\t\t\t\t      (__mmask8) __U,\n \t\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_fixupimm_pd (__mmask8 __U, __m512d __A, __m512d __B,\n-\t\t\t  __m512i __C, const int __imm)\n+_mm512_maskz_fixupimm_pd (__mmask8 __U, __m512d __A,\n+\t\t\t  __m512i __B, const int __imm)\n {\n   return (__m512d) __builtin_ia32_fixupimmpd512_maskz ((__v8df) __A,\n-\t\t\t\t\t\t       (__v8df) __B,\n-\t\t\t\t\t\t       (__v8di) __C,\n+\t\t\t\t\t\t       (__v8di) __B,\n \t\t\t\t\t\t       __imm,\n \t\t\t\t\t\t       (__mmask8) __U,\n \t\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_fixupimm_ps (__m512 __A, __m512 __B, __m512i __C, const int __imm)\n+_mm512_fixupimm_ps (__m512 __A, __m512i __B, const int __imm)\n {\n-  return (__m512) __builtin_ia32_fixupimmps512_mask ((__v16sf) __A,\n-\t\t\t\t\t\t     (__v16sf) __B,\n-\t\t\t\t\t\t     (__v16si) __C,\n+  return (__m512) __builtin_ia32_fixupimmps512 ((__v16sf) __A,\n+\t\t\t\t\t\t     (__v16si) __B,\n \t\t\t\t\t\t     __imm,\n-\t\t\t\t\t\t     (__mmask16) -1,\n \t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_fixupimm_ps (__m512 __A, __mmask16 __U, __m512 __B,\n-\t\t\t __m512i __C, const int __imm)\n+_mm512_mask_fixupimm_ps (__m512 __W, __mmask16 __U, __m512 __A,\n+\t\t\t __m512i __B, const int __imm)\n {\n   return (__m512) __builtin_ia32_fixupimmps512_mask ((__v16sf) __A,\n-\t\t\t\t\t\t     (__v16sf) __B,\n-\t\t\t\t\t\t     (__v16si) __C,\n+\t\t\t\t\t\t     (__v16si) __B,\n \t\t\t\t\t\t     __imm,\n+\t\t\t\t\t\t     (__v16sf) __W,\n \t\t\t\t\t\t     (__mmask16) __U,\n \t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_fixupimm_ps (__mmask16 __U, __m512 __A, __m512 __B,\n-\t\t\t  __m512i __C, const int __imm)\n+_mm512_maskz_fixupimm_ps (__mmask16 __U, __m512 __A,\n+\t\t\t  __m512i __B, const int __imm)\n {\n   return (__m512) __builtin_ia32_fixupimmps512_maskz ((__v16sf) __A,\n-\t\t\t\t\t\t      (__v16sf) __B,\n-\t\t\t\t\t\t      (__v16si) __C,\n+\t\t\t\t\t\t      (__v16si) __B,\n \t\t\t\t\t\t      __imm,\n \t\t\t\t\t\t      (__mmask16) __U,\n \t\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_fixupimm_sd (__m128d __A, __m128d __B, __m128i __C, const int __imm)\n+_mm_fixupimm_sd (__m128d __A, __m128i __B, const int __imm)\n {\n-  return (__m128d) __builtin_ia32_fixupimmsd_mask ((__v2df) __A,\n-\t\t\t\t\t\t   (__v2df) __B,\n-\t\t\t\t\t\t   (__v2di) __C, __imm,\n-\t\t\t\t\t\t   (__mmask8) -1,\n+  return (__m128d) __builtin_ia32_fixupimmsd ((__v2df) __A,\n+\t\t\t\t\t\t   (__v2di) __B, __imm,\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_fixupimm_sd (__m128d __A, __mmask8 __U, __m128d __B,\n-\t\t      __m128i __C, const int __imm)\n+_mm_mask_fixupimm_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t      __m128i __B, const int __imm)\n {\n   return (__m128d) __builtin_ia32_fixupimmsd_mask ((__v2df) __A,\n-\t\t\t\t\t\t   (__v2df) __B,\n-\t\t\t\t\t\t   (__v2di) __C, __imm,\n+\t\t\t\t\t\t   (__v2di) __B, __imm,\n+\t\t\t\t\t\t   (__v2df) __W,\n \t\t\t\t\t\t   (__mmask8) __U,\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskz_fixupimm_sd (__mmask8 __U, __m128d __A, __m128d __B,\n-\t\t       __m128i __C, const int __imm)\n+_mm_maskz_fixupimm_sd (__mmask8 __U, __m128d __A,\n+\t\t       __m128i __B, const int __imm)\n {\n   return (__m128d) __builtin_ia32_fixupimmsd_maskz ((__v2df) __A,\n-\t\t\t\t\t\t    (__v2df) __B,\n-\t\t\t\t\t\t    (__v2di) __C,\n+\t\t\t\t\t\t    (__v2di) __B,\n \t\t\t\t\t\t    __imm,\n \t\t\t\t\t\t    (__mmask8) __U,\n \t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_fixupimm_ss (__m128 __A, __m128 __B, __m128i __C, const int __imm)\n+_mm_fixupimm_ss (__m128 __A, __m128i __B, const int __imm)\n {\n-  return (__m128) __builtin_ia32_fixupimmss_mask ((__v4sf) __A,\n-\t\t\t\t\t\t  (__v4sf) __B,\n-\t\t\t\t\t\t  (__v4si) __C, __imm,\n-\t\t\t\t\t\t  (__mmask8) -1,\n+  return (__m128) __builtin_ia32_fixupimmss ((__v4sf) __A,\n+\t\t\t\t\t\t  (__v4si) __B, __imm,\n \t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_fixupimm_ss (__m128 __A, __mmask8 __U, __m128 __B,\n-\t\t      __m128i __C, const int __imm)\n+_mm_mask_fixupimm_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t      __m128i __B, const int __imm)\n {\n   return (__m128) __builtin_ia32_fixupimmss_mask ((__v4sf) __A,\n-\t\t\t\t\t\t  (__v4sf) __B,\n-\t\t\t\t\t\t  (__v4si) __C, __imm,\n+\t\t\t\t\t\t  (__v4si) __B, __imm,\n+\t\t\t\t\t\t  (__v4sf) __W,\n \t\t\t\t\t\t  (__mmask8) __U,\n \t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskz_fixupimm_ss (__mmask8 __U, __m128 __A, __m128 __B,\n-\t\t       __m128i __C, const int __imm)\n+_mm_maskz_fixupimm_ss (__mmask8 __U, __m128 __A,\n+\t\t       __m128i __B, const int __imm)\n {\n   return (__m128) __builtin_ia32_fixupimmss_maskz ((__v4sf) __A,\n-\t\t\t\t\t\t   (__v4sf) __B,\n-\t\t\t\t\t\t   (__v4si) __C, __imm,\n+\t\t\t\t\t\t   (__v4si) __B, __imm,\n \t\t\t\t\t\t   (__mmask8) __U,\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n #else\n-#define _mm512_fixupimm_pd(X, Y, Z, C)\t\t\t\t\t\\\n-  ((__m512d)__builtin_ia32_fixupimmpd512_mask ((__v8df)(__m512d)(X),\t\\\n-      (__v8df)(__m512d)(Y), (__v8di)(__m512i)(Z), (int)(C),\t\t\\\n-      (__mmask8)(-1), _MM_FROUND_CUR_DIRECTION))\n+#define _mm512_fixupimm_pd(X, Y, C)\t\t\t\t\t\\\n+  ((__m512d)__builtin_ia32_fixupimmpd512((__v8df)(__m512d)(X),\t\\\n+      (__v8di)(__m512i)(Y), (int)(C),  \t\t\\\n+      _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm512_mask_fixupimm_pd(X, U, Y, Z, C)                          \\\n+#define _mm512_mask_fixupimm_pd(W, U, X, Y, C)                          \\\n   ((__m512d)__builtin_ia32_fixupimmpd512_mask ((__v8df)(__m512d)(X),    \\\n-      (__v8df)(__m512d)(Y), (__v8di)(__m512i)(Z), (int)(C),             \\\n+      (__v8di)(__m512i)(Y), (int)(C), (__v8df)(__m512d)(W),             \\\n       (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm512_maskz_fixupimm_pd(U, X, Y, Z, C)                         \\\n+#define _mm512_maskz_fixupimm_pd(U, X, Y, C)                         \\\n   ((__m512d)__builtin_ia32_fixupimmpd512_maskz ((__v8df)(__m512d)(X),   \\\n-      (__v8df)(__m512d)(Y), (__v8di)(__m512i)(Z), (int)(C),             \\\n+      (__v8di)(__m512i)(Y), (int)(C),             \\\n       (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm512_fixupimm_ps(X, Y, Z, C)\t\t\t\t\t\\\n-  ((__m512)__builtin_ia32_fixupimmps512_mask ((__v16sf)(__m512)(X),\t\\\n-    (__v16sf)(__m512)(Y), (__v16si)(__m512i)(Z), (int)(C),\t\t\\\n-    (__mmask16)(-1), _MM_FROUND_CUR_DIRECTION))\n+#define _mm512_fixupimm_ps(X, Y, C)\t\t\t\t\t\\\n+  ((__m512)__builtin_ia32_fixupimmps512 ((__v16sf)(__m512)(X),\t\\\n+    (__v16si)(__m512i)(Y), (int)(C),\t\t\\\n+    _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm512_mask_fixupimm_ps(X, U, Y, Z, C)                          \\\n+#define _mm512_mask_fixupimm_ps(W, U, X, Y, C)                          \\\n   ((__m512)__builtin_ia32_fixupimmps512_mask ((__v16sf)(__m512)(X),     \\\n-    (__v16sf)(__m512)(Y), (__v16si)(__m512i)(Z), (int)(C),              \\\n+    (__v16si)(__m512i)(Y), (int)(C), (__v16sf)(__m512)(W),             \\\n     (__mmask16)(U), _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm512_maskz_fixupimm_ps(U, X, Y, Z, C)                         \\\n+#define _mm512_maskz_fixupimm_ps(U, X, Y, C)                         \\\n   ((__m512)__builtin_ia32_fixupimmps512_maskz ((__v16sf)(__m512)(X),    \\\n-    (__v16sf)(__m512)(Y), (__v16si)(__m512i)(Z), (int)(C),              \\\n+    (__v16si)(__m512i)(Y), (int)(C),              \\\n     (__mmask16)(U), _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm_fixupimm_sd(X, Y, Z, C)\t\t\t\t\t\\\n-    ((__m128d)__builtin_ia32_fixupimmsd_mask ((__v2df)(__m128d)(X),\t\\\n-      (__v2df)(__m128d)(Y), (__v2di)(__m128i)(Z), (int)(C),\t\t\\\n-      (__mmask8)(-1), _MM_FROUND_CUR_DIRECTION))\n+#define _mm_fixupimm_sd(X, Y, C)\t\t\t\t\t\\\n+    ((__m128d)__builtin_ia32_fixupimmsd ((__v2df)(__m128d)(X),\t\\\n+      (__v2di)(__m128i)(Y), (int)(C),\t\t\\\n+      _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm_mask_fixupimm_sd(X, U, Y, Z, C)\t\t\t\t\\\n+#define _mm_mask_fixupimm_sd(W, U, X, Y, C)\t\t\t\t\\\n     ((__m128d)__builtin_ia32_fixupimmsd_mask ((__v2df)(__m128d)(X),\t\\\n-      (__v2df)(__m128d)(Y), (__v2di)(__m128i)(Z), (int)(C),\t\t\\\n+      (__v2di)(__m128i)(Y), (int)(C), (__v2df)(__m128d)(W), \t\t\\\n       (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm_maskz_fixupimm_sd(U, X, Y, Z, C)\t\t\t\t\\\n+#define _mm_maskz_fixupimm_sd(U, X, Y, C)\t\t\t\t\\\n     ((__m128d)__builtin_ia32_fixupimmsd_maskz ((__v2df)(__m128d)(X),\t\\\n-      (__v2df)(__m128d)(Y), (__v2di)(__m128i)(Z), (int)(C),\t\t\\\n+      (__v2di)(__m128i)(Y), (int)(C),\t\t\\\n       (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm_fixupimm_ss(X, Y, Z, C)\t\t\t\t\t\\\n-    ((__m128)__builtin_ia32_fixupimmss_mask ((__v4sf)(__m128)(X),\t\\\n-      (__v4sf)(__m128)(Y), (__v4si)(__m128i)(Z), (int)(C),\t\t\\\n-      (__mmask8)(-1), _MM_FROUND_CUR_DIRECTION))\n+#define _mm_fixupimm_ss(X, Y, C)\t\t\t\t\t\\\n+    ((__m128)__builtin_ia32_fixupimmss ((__v4sf)(__m128)(X),\t\\\n+      (__v4si)(__m128i)(Y), (int)(C),\t\t\\\n+      _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm_mask_fixupimm_ss(X, U, Y, Z, C)\t\t\t\t\\\n+#define _mm_mask_fixupimm_ss(W, U, X, Y, C)\t\t\t\t\\\n     ((__m128)__builtin_ia32_fixupimmss_mask ((__v4sf)(__m128)(X),\t\\\n-      (__v4sf)(__m128)(Y), (__v4si)(__m128i)(Z), (int)(C),\t\t\\\n+      (__v4si)(__m128i)(Y), (int)(C), (__v4sf)(__m128)(W), \t\\\n       (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm_maskz_fixupimm_ss(U, X, Y, Z, C)\t\t\t\t\\\n+#define _mm_maskz_fixupimm_ss(U, X, Y, C)\t\t\t\t\\\n     ((__m128)__builtin_ia32_fixupimmss_maskz ((__v4sf)(__m128)(X),\t\\\n-      (__v4sf)(__m128)(Y), (__v4si)(__m128i)(Z), (int)(C),\t\t\\\n+      (__v4si)(__m128i)(Y), (int)(C),\t\t\\\n       (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))\n #endif\n "}, {"sha": "36798bce28ed59d1d5a8de38295e7e494e07e7c1", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 76, "deletions": 92, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -10242,143 +10242,131 @@ _mm256_maskz_shuffle_f32x4 (__mmask8 __U, __m256 __A, __m256 __B,\n \n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_fixupimm_pd (__m256d __A, __m256d __B, __m256i __C,\n+_mm256_fixupimm_pd (__m256d __A, __m256i __B,\n \t\t    const int __imm)\n {\n-  return (__m256d) __builtin_ia32_fixupimmpd256_mask ((__v4df) __A,\n-\t\t\t\t\t\t      (__v4df) __B,\n-\t\t\t\t\t\t      (__v4di) __C,\n-\t\t\t\t\t\t      __imm,\n-\t\t\t\t\t\t      (__mmask8) -1);\n+  return (__m256d) __builtin_ia32_fixupimmpd256 ((__v4df) __A,\n+\t\t\t\t\t\t      (__v4di) __B,\n+\t\t\t\t\t\t      __imm);\n }\n \n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_fixupimm_pd (__m256d __A, __mmask8 __U, __m256d __B,\n-\t\t\t __m256i __C, const int __imm)\n+_mm256_mask_fixupimm_pd (__m256d __W, __mmask8 __U, __m256d __A,\n+\t\t\t __m256i __B, const int __imm)\n {\n   return (__m256d) __builtin_ia32_fixupimmpd256_mask ((__v4df) __A,\n-\t\t\t\t\t\t      (__v4df) __B,\n-\t\t\t\t\t\t      (__v4di) __C,\n+\t\t\t\t\t\t      (__v4di) __B,\n \t\t\t\t\t\t      __imm,\n+\t\t\t\t\t\t      (__v4df) __W,\n \t\t\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_maskz_fixupimm_pd (__mmask8 __U, __m256d __A, __m256d __B,\n-\t\t\t  __m256i __C, const int __imm)\n+_mm256_maskz_fixupimm_pd (__mmask8 __U, __m256d __A,\n+\t\t\t  __m256i __B, const int __imm)\n {\n   return (__m256d) __builtin_ia32_fixupimmpd256_maskz ((__v4df) __A,\n-\t\t\t\t\t\t       (__v4df) __B,\n-\t\t\t\t\t\t       (__v4di) __C,\n+\t\t\t\t\t\t       (__v4di) __B,\n \t\t\t\t\t\t       __imm,\n \t\t\t\t\t\t       (__mmask8) __U);\n }\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_fixupimm_ps (__m256 __A, __m256 __B, __m256i __C,\n+_mm256_fixupimm_ps (__m256 __A, __m256i __B,\n \t\t    const int __imm)\n {\n-  return (__m256) __builtin_ia32_fixupimmps256_mask ((__v8sf) __A,\n-\t\t\t\t\t\t     (__v8sf) __B,\n-\t\t\t\t\t\t     (__v8si) __C,\n-\t\t\t\t\t\t     __imm,\n-\t\t\t\t\t\t     (__mmask8) -1);\n+  return (__m256) __builtin_ia32_fixupimmps256 ((__v8sf) __A,\n+\t\t\t\t\t\t     (__v8si) __B,\n+\t\t\t\t\t\t     __imm);\n }\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_fixupimm_ps (__m256 __A, __mmask8 __U, __m256 __B,\n-\t\t\t __m256i __C, const int __imm)\n+_mm256_mask_fixupimm_ps (__m256 __W, __mmask8 __U, __m256 __A,\n+\t\t\t __m256i __B, const int __imm)\n {\n   return (__m256) __builtin_ia32_fixupimmps256_mask ((__v8sf) __A,\n-\t\t\t\t\t\t     (__v8sf) __B,\n-\t\t\t\t\t\t     (__v8si) __C,\n+\t\t\t\t\t\t     (__v8si) __B,\n \t\t\t\t\t\t     __imm,\n+\t\t\t\t\t\t     (__v8sf) __W,\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_maskz_fixupimm_ps (__mmask8 __U, __m256 __A, __m256 __B,\n-\t\t\t  __m256i __C, const int __imm)\n+_mm256_maskz_fixupimm_ps (__mmask8 __U, __m256 __A,\n+\t\t\t  __m256i __B, const int __imm)\n {\n   return (__m256) __builtin_ia32_fixupimmps256_maskz ((__v8sf) __A,\n-\t\t\t\t\t\t      (__v8sf) __B,\n-\t\t\t\t\t\t      (__v8si) __C,\n+\t\t\t\t\t\t      (__v8si) __B,\n \t\t\t\t\t\t      __imm,\n \t\t\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_fixupimm_pd (__m128d __A, __m128d __B, __m128i __C,\n+_mm_fixupimm_pd (__m128d __A, __m128i __B,\n \t\t const int __imm)\n {\n-  return (__m128d) __builtin_ia32_fixupimmpd128_mask ((__v2df) __A,\n-\t\t\t\t\t\t      (__v2df) __B,\n-\t\t\t\t\t\t      (__v2di) __C,\n-\t\t\t\t\t\t      __imm,\n-\t\t\t\t\t\t      (__mmask8) -1);\n+  return (__m128d) __builtin_ia32_fixupimmpd128 ((__v2df) __A,\n+\t\t\t\t\t\t      (__v2di) __B,\n+\t\t\t\t\t\t      __imm);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_fixupimm_pd (__m128d __A, __mmask8 __U, __m128d __B,\n-\t\t      __m128i __C, const int __imm)\n+_mm_mask_fixupimm_pd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t      __m128i __B, const int __imm)\n {\n   return (__m128d) __builtin_ia32_fixupimmpd128_mask ((__v2df) __A,\n-\t\t\t\t\t\t      (__v2df) __B,\n-\t\t\t\t\t\t      (__v2di) __C,\n+\t\t\t\t\t\t      (__v2di) __B,\n \t\t\t\t\t\t      __imm,\n+\t\t\t\t\t\t      (__v2df) __W,\n \t\t\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskz_fixupimm_pd (__mmask8 __U, __m128d __A, __m128d __B,\n-\t\t       __m128i __C, const int __imm)\n+_mm_maskz_fixupimm_pd (__mmask8 __U, __m128d __A,\n+\t\t       __m128i __B, const int __imm)\n {\n   return (__m128d) __builtin_ia32_fixupimmpd128_maskz ((__v2df) __A,\n-\t\t\t\t\t\t       (__v2df) __B,\n-\t\t\t\t\t\t       (__v2di) __C,\n+\t\t\t\t\t\t       (__v2di) __B,\n \t\t\t\t\t\t       __imm,\n \t\t\t\t\t\t       (__mmask8) __U);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_fixupimm_ps (__m128 __A, __m128 __B, __m128i __C, const int __imm)\n+_mm_fixupimm_ps (__m128 __A, __m128i __B, const int __imm)\n {\n-  return (__m128) __builtin_ia32_fixupimmps128_mask ((__v4sf) __A,\n-\t\t\t\t\t\t     (__v4sf) __B,\n-\t\t\t\t\t\t     (__v4si) __C,\n-\t\t\t\t\t\t     __imm,\n-\t\t\t\t\t\t     (__mmask8) -1);\n+  return (__m128) __builtin_ia32_fixupimmps128 ((__v4sf) __A,\n+\t\t\t\t\t\t     (__v4si) __B,\n+\t\t\t\t\t\t     __imm);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_fixupimm_ps (__m128 __A, __mmask8 __U, __m128 __B,\n-\t\t      __m128i __C, const int __imm)\n+_mm_mask_fixupimm_ps (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t      __m128i __B, const int __imm)\n {\n   return (__m128) __builtin_ia32_fixupimmps128_mask ((__v4sf) __A,\n-\t\t\t\t\t\t     (__v4sf) __B,\n-\t\t\t\t\t\t     (__v4si) __C,\n+\t\t\t\t\t\t     (__v4si) __B,\n \t\t\t\t\t\t     __imm,\n+\t\t\t\t\t\t     (__v4sf) __W,\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskz_fixupimm_ps (__mmask8 __U, __m128 __A, __m128 __B,\n-\t\t       __m128i __C, const int __imm)\n+_mm_maskz_fixupimm_ps (__mmask8 __U, __m128 __A,\n+\t\t       __m128i __B, const int __imm)\n {\n   return (__m128) __builtin_ia32_fixupimmps128_maskz ((__v4sf) __A,\n-\t\t\t\t\t\t      (__v4sf) __B,\n-\t\t\t\t\t\t      (__v4si) __C,\n+\t\t\t\t\t\t      (__v4si) __B,\n \t\t\t\t\t\t      __imm,\n \t\t\t\t\t\t      (__mmask8) __U);\n }\n@@ -12657,78 +12645,74 @@ _mm256_permutex_pd (__m256d __X, const int __M)\n \t\t\t\t\t   (__v4sf)(__m128)_mm_setzero_ps (),   \\\n                                            (__mmask8)(U)))\n \n-#define _mm256_fixupimm_pd(X, Y, Z, C)                                          \\\n+#define _mm256_fixupimm_pd(X, Y, C)                                          \\\n   ((__m256d)__builtin_ia32_fixupimmpd256_mask ((__v4df)(__m256d)(X),\t\t\\\n-\t\t\t\t\t       (__v4df)(__m256d)(Y),\t\t\\\n-\t\t\t\t\t       (__v4di)(__m256i)(Z), (int)(C),\t\\\n+\t\t\t\t\t       (__v4di)(__m256i)(Y), (int)(C),\t\\\n \t\t\t\t\t       (__mmask8)(-1)))\n \n-#define _mm256_mask_fixupimm_pd(X, U, Y, Z, C)                                  \\\n+#define _mm256_mask_fixupimm_pd(W, U, X, Y, C)                                  \\\n    ((__m256d)__builtin_ia32_fixupimmpd256_mask ((__v4df)(__m256d)(X),           \\\n-\t\t\t\t\t\t(__v4df)(__m256d)(Y),           \\\n-\t\t\t\t\t\t(__v4di)(__m256i)(Z), (int)(C), \\\n+\t\t\t\t\t\t(__v4di)(__m256i)(Y), (int)(C), \\\n+\t\t\t\t\t\t(__v4df)(__m256d)(W),           \\\n \t\t\t\t\t\t(__mmask8)(U)))\n \n-#define _mm256_maskz_fixupimm_pd(U, X, Y, Z, C)                                 \\\n+#define _mm256_maskz_fixupimm_pd(U, X, Y, C)                                 \\\n    ((__m256d)__builtin_ia32_fixupimmpd256_maskz ((__v4df)(__m256d)(X),          \\\n-\t\t\t\t\t\t (__v4df)(__m256d)(Y),          \\\n-\t\t\t\t\t\t (__v4di)(__m256i)(Z), (int)(C),\\\n+\t\t\t\t\t\t (__v4di)(__m256i)(Y),          \\\n+\t\t\t\t\t\t (int)(C),\\\n \t\t\t\t\t\t (__mmask8)(U)))\n \n-#define _mm256_fixupimm_ps(X, Y, Z, C)\t\t\t\t\t\t\\\n+#define _mm256_fixupimm_ps(X, Y, C)\t\t\t\t\t\t\\\n   ((__m256)__builtin_ia32_fixupimmps256_mask ((__v8sf)(__m256)(X),\t\t\\\n-\t\t\t\t\t      (__v8sf)(__m256)(Y),\t\t\\\n-\t\t\t\t\t      (__v8si)(__m256i)(Z), (int)(C),\t\\\n+\t\t\t\t\t      (__v8si)(__m256i)(Y), (int)(C),\t\\\n \t\t\t\t\t      (__mmask8)(-1)))\n \n \n-#define _mm256_mask_fixupimm_ps(X, U, Y, Z, C)                                  \\\n+#define _mm256_mask_fixupimm_ps(W, U, X, Y, C)                                  \\\n     ((__m256)__builtin_ia32_fixupimmps256_mask ((__v8sf)(__m256)(X),            \\\n-\t\t\t\t\t\t(__v8sf)(__m256)(Y),            \\\n-\t\t\t\t\t\t(__v8si)(__m256i)(Z), (int)(C), \\\n+\t\t\t\t\t\t(__v8si)(__m256i)(Y), (int)(C), \\\n+\t\t\t\t\t\t(__v8sf)(__m256)(W),            \\\n \t\t\t\t\t\t(__mmask8)(U)))\n \n-#define _mm256_maskz_fixupimm_ps(U, X, Y, Z, C)                                 \\\n+#define _mm256_maskz_fixupimm_ps(U, X, Y, C)                                 \\\n     ((__m256)__builtin_ia32_fixupimmps256_maskz ((__v8sf)(__m256)(X),           \\\n-\t\t\t\t\t\t (__v8sf)(__m256)(Y),           \\\n-\t\t\t\t\t\t (__v8si)(__m256i)(Z), (int)(C),\\\n+\t\t\t\t\t\t (__v8si)(__m256i)(Y),           \\\n+\t\t\t\t\t\t (int)(C),\\\n \t\t\t\t\t\t (__mmask8)(U)))\n \n-#define _mm_fixupimm_pd(X, Y, Z, C)\t\t\t\t\t\t\\\n+#define _mm_fixupimm_pd(X, Y, C)\t\t\t\t\t\t\\\n   ((__m128d)__builtin_ia32_fixupimmpd128_mask ((__v2df)(__m128d)(X),\t\t\\\n-\t\t\t\t\t       (__v2df)(__m128d)(Y),\t\t\\\n-\t\t\t\t\t       (__v2di)(__m128i)(Z), (int)(C), \t\\\n+\t\t\t\t\t       (__v2di)(__m128i)(Y), (int)(C), \t\\\n \t\t\t\t\t       (__mmask8)(-1)))\n \n \n-#define _mm_mask_fixupimm_pd(X, U, Y, Z, C)                                       \\\n+#define _mm_mask_fixupimm_pd(W, U, X, Y, C)                                       \\\n      ((__m128d)__builtin_ia32_fixupimmpd128_mask ((__v2df)(__m128d)(X),           \\\n-\t\t\t\t\t\t  (__v2df)(__m128d)(Y),           \\\n-\t\t\t\t\t\t  (__v2di)(__m128i)(Z), (int)(C), \\\n+\t\t\t\t\t\t  (__v2di)(__m128i)(Y), (int)(C), \\\n+\t\t\t\t\t\t  (__v2df)(__m128d)(W),           \\\n \t\t\t\t\t\t  (__mmask8)(U)))\n \n-#define _mm_maskz_fixupimm_pd(U, X, Y, Z, C)                                      \\\n+#define _mm_maskz_fixupimm_pd(U, X, Y, C)                                      \\\n      ((__m128d)__builtin_ia32_fixupimmpd128_maskz ((__v2df)(__m128d)(X),          \\\n-\t\t\t\t\t\t   (__v2df)(__m128d)(Y),          \\\n-\t\t\t\t\t\t   (__v2di)(__m128i)(Z), (int)(C),\\\n+\t\t\t\t\t\t   (__v2di)(__m128i)(Y),          \\\n+\t\t\t\t\t\t   (int)(C),\\\n \t\t\t\t\t\t   (__mmask8)(U)))\n \n-#define _mm_fixupimm_ps(X, Y, Z, C)\t\t\t\t\t\t\\\n+#define _mm_fixupimm_ps(X, Y, C)\t\t\t\t\t\t\\\n    ((__m128)__builtin_ia32_fixupimmps128_mask ((__v4sf)(__m128)(X),\t\t\\\n-\t\t\t\t\t       (__v4sf)(__m128)(Y),\t\t\\\n-\t\t\t\t\t       (__v4si)(__m128i)(Z), (int)(C), \t\\\n+\t\t\t\t\t       (__v4si)(__m128i)(Y), (int)(C), \t\\\n \t\t\t\t\t       (__mmask8)(-1)))\n \n-#define _mm_mask_fixupimm_ps(X, U, Y, Z, C)                                      \\\n+#define _mm_mask_fixupimm_ps(W, U, X, Y, C)                                      \\\n       ((__m128)__builtin_ia32_fixupimmps128_mask ((__v4sf)(__m128)(X),           \\\n-\t\t\t\t\t\t  (__v4sf)(__m128)(Y),           \\\n-\t\t\t\t\t\t  (__v4si)(__m128i)(Z), (int)(C),\\\n+\t\t\t\t\t\t  (__v4si)(__m128i)(Y), (int)(C),\\\n+\t\t\t\t\t\t  (__v4sf)(__m128)(W),           \\\n \t\t\t\t\t\t  (__mmask8)(U)))\n \n-#define _mm_maskz_fixupimm_ps(U, X, Y, Z, C)                                      \\\n+#define _mm_maskz_fixupimm_ps(U, X, Y, C)                                      \\\n       ((__m128)__builtin_ia32_fixupimmps128_maskz ((__v4sf)(__m128)(X),           \\\n-\t\t\t\t\t\t   (__v4sf)(__m128)(Y),           \\\n-\t\t\t\t\t\t   (__v4si)(__m128i)(Z), (int)(C),\\\n+\t\t\t\t\t\t   (__v4si)(__m128i)(Y),           \\\n+\t\t\t\t\t\t   (int)(C),\\\n \t\t\t\t\t\t   (__mmask8)(U)))\n \n #define _mm256_mask_srli_epi32(W, U, A, B)\t\t\t\t\\"}, {"sha": "3bead21730c66cc371f45d00ee58ff6a6251d721", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -444,21 +444,13 @@ DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, INT, V8DF, UQI)\n DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, INT, V8DF, QI, INT)\n DEF_FUNCTION_TYPE (V8DF, V8DF, INT, V8DF, UQI)\n DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, V8DI, INT)\n-DEF_FUNCTION_TYPE (V4DF, V4DF, V4DF, V4DI, INT, UQI)\n-DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DI, INT, UQI)\n-DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, V8DI, INT, QI, INT)\n DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, INT)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, INT, V16SF, UHI)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, INT, V16SF, HI, INT)\n DEF_FUNCTION_TYPE (V16SF, V16SF, INT, V16SF, UHI)\n DEF_FUNCTION_TYPE (V16SI, V16SI, V4SI, INT, V16SI, UHI)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SI, INT)\n-DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SI, INT, HI, INT)\n-DEF_FUNCTION_TYPE (V8SF, V8SF, V8SF, V8SI, INT, UQI)\n-DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SI, INT, UQI)\n-DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SI, INT, QI, INT)\n-DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DI, INT, QI, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, INT, V2DF, UQI, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, INT, V4SF, UQI, INT)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V4SF, INT)\n@@ -553,6 +545,9 @@ DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SF, V4SF, V4SF, PCV4SF, V4SF, UQI)\n DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, V16SI, V16SI, V16SI, PCV4SI, V16SI, UHI)\n DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, V16SI, V16SI, V16SI, PCV4SI)\n \n+DEF_FUNCTION_TYPE (V8SF, V8SF, V8SI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SI, INT)\n \n # Instructions returning mask\n DEF_FUNCTION_TYPE (UCHAR, UQI, UQI, PUCHAR)\n@@ -987,6 +982,15 @@ DEF_FUNCTION_TYPE (V8QI, QI, QI, QI, QI, QI, QI, QI, QI)\n DEF_FUNCTION_TYPE (UCHAR, UCHAR, UINT, UINT, PUNSIGNED)\n DEF_FUNCTION_TYPE (UCHAR, UCHAR, ULONGLONG, ULONGLONG, PULONGLONG)\n \n+DEF_FUNCTION_TYPE (V4DF, V4DF, V4DI, INT, V4DF, UQI)\n+DEF_FUNCTION_TYPE (V4DF, V4DF, V4DI, INT, UQI)\n+DEF_FUNCTION_TYPE (V8SF, V8SF, V8SI, INT, V8SF, UQI)\n+DEF_FUNCTION_TYPE (V8SF, V8SF, V8SI, INT, UQI)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DI, INT, V2DF, UQI)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DI, INT, UQI)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SI, INT, V4SF, UQI)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SI, INT, UQI)\n+\n # Instructions with rounding\n DEF_FUNCTION_TYPE (UINT64, V2DF, INT)\n DEF_FUNCTION_TYPE (UINT64, V4SF, INT)\n@@ -1120,6 +1124,19 @@ DEF_FUNCTION_TYPE (VOID, QI, V8DI, PCVOID, INT, INT)\n DEF_FUNCTION_TYPE (VOID, PV8QI, V8HI, UQI)\n DEF_FUNCTION_TYPE (VOID, PV16QI, V16HI, UHI)\n \n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DI, INT, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DI, INT, V8DF, QI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DI, INT, QI, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SI, INT, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SI, INT, V16SF, HI, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SI, INT, HI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DI, INT, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DI, INT, V2DF, QI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DI, INT, QI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SI, INT, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SI, INT, V4SF, QI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SI, INT, QI, INT)\n+\n DEF_FUNCTION_TYPE_ALIAS (V2DF_FTYPE_V2DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V4DF_FTYPE_V4DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V8DF_FTYPE_V8DF, ROUND)"}, {"sha": "f85acee85bb13fd9141795f404d3cd1d64e4b0a9", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -1797,14 +1797,18 @@ BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_getexpv8sf_mask, \"__builtin_i\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_getexpv4df_mask, \"__builtin_ia32_getexppd256_mask\", IX86_BUILTIN_GETEXPPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_getexpv4sf_mask, \"__builtin_ia32_getexpps128_mask\", IX86_BUILTIN_GETEXPPS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_getexpv2df_mask, \"__builtin_ia32_getexppd128_mask\", IX86_BUILTIN_GETEXPPD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv4df_mask, \"__builtin_ia32_fixupimmpd256_mask\", IX86_BUILTIN_FIXUPIMMPD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DI_INT_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv4df_maskz, \"__builtin_ia32_fixupimmpd256_maskz\", IX86_BUILTIN_FIXUPIMMPD256_MASKZ, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DI_INT_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv8sf_mask, \"__builtin_ia32_fixupimmps256_mask\", IX86_BUILTIN_FIXUPIMMPS256_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SI_INT_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv8sf_maskz, \"__builtin_ia32_fixupimmps256_maskz\", IX86_BUILTIN_FIXUPIMMPS256_MASKZ, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SI_INT_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv2df_mask, \"__builtin_ia32_fixupimmpd128_mask\", IX86_BUILTIN_FIXUPIMMPD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DI_INT_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv2df_maskz, \"__builtin_ia32_fixupimmpd128_maskz\", IX86_BUILTIN_FIXUPIMMPD128_MASKZ, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DI_INT_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv4sf_mask, \"__builtin_ia32_fixupimmps128_mask\", IX86_BUILTIN_FIXUPIMMPS128_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SI_INT_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv4sf_maskz, \"__builtin_ia32_fixupimmps128_maskz\", IX86_BUILTIN_FIXUPIMMPS128_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SI_INT_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv4df, \"__builtin_ia32_fixupimmpd256\", IX86_BUILTIN_FIXUPIMMPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv4df_mask, \"__builtin_ia32_fixupimmpd256_mask\", IX86_BUILTIN_FIXUPIMMPD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DI_INT_V4DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv4df_maskz, \"__builtin_ia32_fixupimmpd256_maskz\", IX86_BUILTIN_FIXUPIMMPD256_MASKZ, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DI_INT_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv8sf, \"__builtin_ia32_fixupimmps256\", IX86_BUILTIN_FIXUPIMMPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv8sf_mask, \"__builtin_ia32_fixupimmps256_mask\", IX86_BUILTIN_FIXUPIMMPS256_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SI_INT_V8SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv8sf_maskz, \"__builtin_ia32_fixupimmps256_maskz\", IX86_BUILTIN_FIXUPIMMPS256_MASKZ, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SI_INT_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv2df, \"__builtin_ia32_fixupimmpd128\", IX86_BUILTIN_FIXUPIMMPD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv2df_mask, \"__builtin_ia32_fixupimmpd128_mask\", IX86_BUILTIN_FIXUPIMMPD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DI_INT_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv2df_maskz, \"__builtin_ia32_fixupimmpd128_maskz\", IX86_BUILTIN_FIXUPIMMPD128_MASKZ, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DI_INT_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv4sf, \"__builtin_ia32_fixupimmps128\", IX86_BUILTIN_FIXUPIMMPS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv4sf_mask, \"__builtin_ia32_fixupimmps128_mask\", IX86_BUILTIN_FIXUPIMMPS128_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SI_INT_V4SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fixupimmv4sf_maskz, \"__builtin_ia32_fixupimmps128_maskz\", IX86_BUILTIN_FIXUPIMMPS128_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SI_INT_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_absv4di2_mask, \"__builtin_ia32_pabsq256_mask\", IX86_BUILTIN_PABSQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_absv2di2_mask, \"__builtin_ia32_pabsq128_mask\", IX86_BUILTIN_PABSQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_absv8si2_mask, \"__builtin_ia32_pabsd256_mask\", IX86_BUILTIN_PABSD256_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_UQI)\n@@ -2702,14 +2706,18 @@ BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmdivv2df3_round, \"__builtin_ia32_\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmdivv2df3_mask_round, \"__builtin_ia32_divsd_mask_round\", IX86_BUILTIN_DIVSD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmdivv4sf3_round, \"__builtin_ia32_divss_round\", IX86_BUILTIN_DIVSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmdivv4sf3_mask_round, \"__builtin_ia32_divss_mask_round\", IX86_BUILTIN_DIVSS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv8df_mask_round, \"__builtin_ia32_fixupimmpd512_mask\", IX86_BUILTIN_FIXUPIMMPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DI_INT_QI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv8df_maskz_round, \"__builtin_ia32_fixupimmpd512_maskz\", IX86_BUILTIN_FIXUPIMMPD512_MASKZ, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DI_INT_QI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv16sf_mask_round, \"__builtin_ia32_fixupimmps512_mask\", IX86_BUILTIN_FIXUPIMMPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SI_INT_HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv16sf_maskz_round, \"__builtin_ia32_fixupimmps512_maskz\", IX86_BUILTIN_FIXUPIMMPS512_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SI_INT_HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv2df_mask_round, \"__builtin_ia32_fixupimmsd_mask\", IX86_BUILTIN_FIXUPIMMSD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DI_INT_QI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv2df_maskz_round, \"__builtin_ia32_fixupimmsd_maskz\", IX86_BUILTIN_FIXUPIMMSD128_MASKZ, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DI_INT_QI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv4sf_mask_round, \"__builtin_ia32_fixupimmss_mask\", IX86_BUILTIN_FIXUPIMMSS128_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SI_INT_QI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv4sf_maskz_round, \"__builtin_ia32_fixupimmss_maskz\", IX86_BUILTIN_FIXUPIMMSS128_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SI_INT_QI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv8df_round, \"__builtin_ia32_fixupimmpd512\", IX86_BUILTIN_FIXUPIMMPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DI_INT_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv8df_mask_round, \"__builtin_ia32_fixupimmpd512_mask\", IX86_BUILTIN_FIXUPIMMPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DI_INT_V8DF_QI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv8df_maskz_round, \"__builtin_ia32_fixupimmpd512_maskz\", IX86_BUILTIN_FIXUPIMMPD512_MASKZ, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DI_INT_QI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv16sf_round, \"__builtin_ia32_fixupimmps512\", IX86_BUILTIN_FIXUPIMMPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SI_INT_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv16sf_mask_round, \"__builtin_ia32_fixupimmps512_mask\", IX86_BUILTIN_FIXUPIMMPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SI_INT_V16SF_HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv16sf_maskz_round, \"__builtin_ia32_fixupimmps512_maskz\", IX86_BUILTIN_FIXUPIMMPS512_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SI_INT_HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv2df_round, \"__builtin_ia32_fixupimmsd\", IX86_BUILTIN_FIXUPIMMSD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DI_INT_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv2df_mask_round, \"__builtin_ia32_fixupimmsd_mask\", IX86_BUILTIN_FIXUPIMMSD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DI_INT_V2DF_QI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv2df_maskz_round, \"__builtin_ia32_fixupimmsd_maskz\", IX86_BUILTIN_FIXUPIMMSD128_MASKZ, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DI_INT_QI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv4sf_round, \"__builtin_ia32_fixupimmss\", IX86_BUILTIN_FIXUPIMMSS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SI_INT_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv4sf_mask_round, \"__builtin_ia32_fixupimmss_mask\", IX86_BUILTIN_FIXUPIMMSS128_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SI_INT_V4SF_QI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv4sf_maskz_round, \"__builtin_ia32_fixupimmss_maskz\", IX86_BUILTIN_FIXUPIMMSS128_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SI_INT_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getexpv8df_mask_round, \"__builtin_ia32_getexppd512_mask\", IX86_BUILTIN_GETEXPPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getexpv16sf_mask_round, \"__builtin_ia32_getexpps512_mask\", IX86_BUILTIN_GETEXPPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sgetexpv2df_round, \"__builtin_ia32_getexpsd128_round\", IX86_BUILTIN_GETEXPSD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)"}, {"sha": "ae8971c82b0ab9912ec5896662385b10fb23aa0d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -34753,6 +34753,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V32HI_FTYPE_V32HI_V32HI_INT:\n     case V16SI_FTYPE_V16SI_V16SI_INT:\n     case V8DI_FTYPE_V8DI_V8DI_INT:\n+    case V4DF_FTYPE_V4DF_V4DI_INT:\n+    case V8SF_FTYPE_V8SF_V8SI_INT:\n+    case V2DF_FTYPE_V2DF_V2DI_INT:\n+    case V4SF_FTYPE_V4SF_V4SI_INT:\n       nargs = 3;\n       nargs_constant = 1;\n       break;\n@@ -34908,6 +34912,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       break;\n     case UQI_FTYPE_V8DI_V8DI_INT_UQI:\n     case UHI_FTYPE_V16SI_V16SI_INT_UHI:\n+    case V4DF_FTYPE_V4DF_V4DI_INT_UQI:\n+    case V8SF_FTYPE_V8SF_V8SI_INT_UQI:\n+    case V2DF_FTYPE_V2DF_V2DI_INT_UQI:\n+    case V4SF_FTYPE_V4SF_V4SI_INT_UQI:\n       mask_pos = 1;\n       nargs = 4;\n       nargs_constant = 1;\n@@ -34973,17 +34981,17 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8SI_FTYPE_V8SI_V4SI_INT_V8SI_UQI:\n     case V4DI_FTYPE_V4DI_V2DI_INT_V4DI_UQI:\n     case V4DF_FTYPE_V4DF_V2DF_INT_V4DF_UQI:\n+    case V4DF_FTYPE_V4DF_V4DI_INT_V4DF_UQI:\n+    case V8SF_FTYPE_V8SF_V8SI_INT_V8SF_UQI:\n+    case V2DF_FTYPE_V2DF_V2DI_INT_V2DF_UQI:\n+    case V4SF_FTYPE_V4SF_V4SI_INT_V4SF_UQI:\n       nargs = 5;\n       mask_pos = 2;\n       nargs_constant = 1;\n       break;\n     case V8DI_FTYPE_V8DI_V8DI_V8DI_INT_UQI:\n     case V16SI_FTYPE_V16SI_V16SI_V16SI_INT_UHI:\n-    case V2DF_FTYPE_V2DF_V2DF_V2DI_INT_UQI:\n-    case V4SF_FTYPE_V4SF_V4SF_V4SI_INT_UQI:\n-    case V8SF_FTYPE_V8SF_V8SF_V8SI_INT_UQI:\n     case V8SI_FTYPE_V8SI_V8SI_V8SI_INT_UQI:\n-    case V4DF_FTYPE_V4DF_V4DF_V4DI_INT_UQI:\n     case V4DI_FTYPE_V4DI_V4DI_V4DI_INT_UQI:\n     case V4SI_FTYPE_V4SI_V4SI_V4SI_INT_UQI:\n     case V2DI_FTYPE_V2DI_V2DI_V2DI_INT_UQI:\n@@ -35447,6 +35455,10 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n       break;\n     case V4SF_FTYPE_V4SF_V4SF_INT_INT:\n     case V2DF_FTYPE_V2DF_V2DF_INT_INT:\n+    case V8DF_FTYPE_V8DF_V8DI_INT_INT:\n+    case V16SF_FTYPE_V16SF_V16SI_INT_INT:\n+    case V2DF_FTYPE_V2DF_V2DI_INT_INT:\n+    case V4SF_FTYPE_V4SF_V4SI_INT_INT:\n       nargs_constant = 2;\n       nargs = 4;\n       break;\n@@ -35472,6 +35484,10 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case UQI_FTYPE_V2DF_V2DF_INT_UQI_INT:\n     case UHI_FTYPE_V16SF_V16SF_INT_UHI_INT:\n     case UQI_FTYPE_V4SF_V4SF_INT_UQI_INT:\n+    case V8DF_FTYPE_V8DF_V8DI_INT_QI_INT:\n+    case V16SF_FTYPE_V16SF_V16SI_INT_HI_INT:\n+    case V2DF_FTYPE_V2DF_V2DI_INT_QI_INT:\n+    case V4SF_FTYPE_V4SF_V4SI_INT_QI_INT:\n       nargs_constant = 3;\n       nargs = 5;\n       break;\n@@ -35481,16 +35497,13 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V2DF_FTYPE_V2DF_V2DF_INT_V2DF_QI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_INT_V2DF_UQI_INT:\n     case V4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT:\n+    case V8DF_FTYPE_V8DF_V8DI_INT_V8DF_QI_INT:\n+    case V16SF_FTYPE_V16SF_V16SI_INT_V16SF_HI_INT:\n+    case V2DF_FTYPE_V2DF_V2DI_INT_V2DF_QI_INT:\n+    case V4SF_FTYPE_V4SF_V4SI_INT_V4SF_QI_INT:\n       nargs = 6;\n       nargs_constant = 4;\n       break;\n-    case V8DF_FTYPE_V8DF_V8DF_V8DI_INT_QI_INT:\n-    case V16SF_FTYPE_V16SF_V16SF_V16SI_INT_HI_INT:\n-    case V2DF_FTYPE_V2DF_V2DF_V2DI_INT_QI_INT:\n-    case V4SF_FTYPE_V4SF_V4SF_V4SI_INT_QI_INT:\n-      nargs = 6;\n-      nargs_constant = 3;\n-      break;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "f6ef71f4c510701fe530262891caab2522bc29df", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 30, "deletions": 42, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -8812,96 +8812,84 @@\n (define_expand \"<avx512>_fixupimm<mode>_maskz<round_saeonly_expand_name>\"\n   [(match_operand:VF_AVX512VL 0 \"register_operand\")\n    (match_operand:VF_AVX512VL 1 \"register_operand\")\n-   (match_operand:VF_AVX512VL 2 \"register_operand\")\n-   (match_operand:<sseintvecmode> 3 \"<round_saeonly_expand_nimm_predicate>\")\n-   (match_operand:SI 4 \"const_0_to_255_operand\")\n-   (match_operand:<avx512fmaskmode> 5 \"register_operand\")]\n+   (match_operand:<sseintvecmode> 2 \"<round_saeonly_expand_nimm_predicate>\")\n+   (match_operand:SI 3 \"const_0_to_255_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n   emit_insn (gen_<avx512>_fixupimm<mode>_maskz_1<round_saeonly_expand_name> (\n \toperands[0], operands[1], operands[2], operands[3],\n-\toperands[4], CONST0_RTX (<MODE>mode), operands[5]\n-\t<round_saeonly_expand_operand6>));\n+\tCONST0_RTX (<MODE>mode), operands[4]\n+\t<round_saeonly_expand_operand5>));\n   DONE;\n })\n \n (define_insn \"<avx512>_fixupimm<mode><sd_maskz_name><round_saeonly_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n         (unspec:VF_AVX512VL\n-          [(match_operand:VF_AVX512VL 1 \"register_operand\" \"0\")\n-\t   (match_operand:VF_AVX512VL 2 \"register_operand\" \"v\")\n-           (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n-           (match_operand:SI 4 \"const_0_to_255_operand\")]\n+          [(match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n+           (match_operand:<sseintvecmode> 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n+           (match_operand:SI 3 \"const_0_to_255_operand\")]\n            UNSPEC_FIXUPIMM))]\n   \"TARGET_AVX512F\"\n-  \"vfixupimm<ssemodesuffix>\\t{%4, <round_saeonly_sd_mask_op5>%3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %3<round_saeonly_sd_mask_op5>, %4}\";\n+  \"vfixupimm<ssemodesuffix>\\t{%3, <round_saeonly_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_saeonly_sd_mask_op4>, %3}\";\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<avx512>_fixupimm<mode>_mask<round_saeonly_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_AVX512VL\n           (unspec:VF_AVX512VL\n-            [(match_operand:VF_AVX512VL 1 \"register_operand\" \"0\")\n-\t     (match_operand:VF_AVX512VL 2 \"register_operand\" \"v\")\n-             (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n-             (match_operand:SI 4 \"const_0_to_255_operand\")]\n+            [(match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n+             (match_operand:<sseintvecmode> 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n+             (match_operand:SI 3 \"const_0_to_255_operand\")]\n              UNSPEC_FIXUPIMM)\n-\t  (match_dup 1)\n+\t  (match_operand:VF_AVX512VL 4 \"register_operand\" \"0\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n-  \"vfixupimm<ssemodesuffix>\\t{%4, <round_saeonly_op6>%3, %2, %0%{%5%}|%0%{%5%}, %2, %3<round_saeonly_op6>, %4}\";\n+  \"vfixupimm<ssemodesuffix>\\t{%3, <round_saeonly_op6>%2, %1, %0%{%5%}|%0%{%5%}, %1, %2<round_saeonly_op6>, %3}\";\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"avx512f_sfixupimm<mode>_maskz<round_saeonly_expand_name>\"\n   [(match_operand:VF_128 0 \"register_operand\")\n    (match_operand:VF_128 1 \"register_operand\")\n-   (match_operand:VF_128 2 \"register_operand\")\n-   (match_operand:<sseintvecmode> 3 \"<round_saeonly_expand_nimm_predicate>\")\n-   (match_operand:SI 4 \"const_0_to_255_operand\")\n-   (match_operand:<avx512fmaskmode> 5 \"register_operand\")]\n+   (match_operand:<sseintvecmode> 2 \"<round_saeonly_expand_nimm_predicate>\")\n+   (match_operand:SI 3 \"const_0_to_255_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n   emit_insn (gen_avx512f_sfixupimm<mode>_maskz_1<round_saeonly_expand_name> (\n \toperands[0], operands[1], operands[2], operands[3],\n-\toperands[4], CONST0_RTX (<MODE>mode), operands[5]\n-\t<round_saeonly_expand_operand6>));\n+\tCONST0_RTX (<MODE>mode), operands[4]\n+\t<round_saeonly_expand_operand5>));\n   DONE;\n })\n \n (define_insn \"avx512f_sfixupimm<mode><sd_maskz_name><round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-          (unspec:VF_128\n-            [(match_operand:VF_128 1 \"register_operand\" \"0\")\n-\t     (match_operand:VF_128 2 \"register_operand\" \"v\")\n-\t     (match_operand:<sseintvecmode> 3 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n-\t     (match_operand:SI 4 \"const_0_to_255_operand\")]\n-\t    UNSPEC_FIXUPIMM)\n-\t  (match_dup 1)\n-\t  (const_int 1)))]\n+        (unspec:VF_128\n+          [(match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:<sseintvecmode> 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t     (match_operand:SI 3 \"const_0_to_255_operand\")]\n+\t    UNSPEC_FIXUPIMM))]\n    \"TARGET_AVX512F\"\n-   \"vfixupimm<ssescalarmodesuffix>\\t{%4, <round_saeonly_sd_mask_op5>%3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %<iptr>3<round_saeonly_sd_mask_op5>, %4}\";\n+   \"vfixupimm<ssescalarmodesuffix>\\t{%3, <round_saeonly_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %<iptr>2<round_saeonly_sd_mask_op4>, %3}\";\n    [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"avx512f_sfixupimm<mode>_mask<round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n \t    (unspec:VF_128\n-\t       [(match_operand:VF_128 1 \"register_operand\" \"0\")\n-\t\t(match_operand:VF_128 2 \"register_operand\" \"v\")\n-\t\t(match_operand:<sseintvecmode> 3 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n-\t\t(match_operand:SI 4 \"const_0_to_255_operand\")]\n+\t       [(match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t\t(match_operand:<sseintvecmode> 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t\t(match_operand:SI 3 \"const_0_to_255_operand\")]\n \t       UNSPEC_FIXUPIMM)\n-\t    (match_dup 1)\n-\t    (const_int 1))\n-\t  (match_dup 1)\n+\t  (match_operand:VF_128 4 \"register_operand\" \"0\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n-  \"vfixupimm<ssescalarmodesuffix>\\t{%4, <round_saeonly_op6>%3, %2, %0%{%5%}|%0%{%5%}, %2, %<iptr>3<round_saeonly_op6>, %4}\";\n+  \"vfixupimm<ssescalarmodesuffix>\\t{%3, <round_saeonly_op6>%2, %1, %0%{%5%}|%0%{%5%}, %1, %<iptr>2<round_saeonly_op6>, %3}\";\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n "}, {"sha": "69b01690186d61eb0a8e7b2339092b6e5f4df5fe", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -149,6 +149,7 @@\n (define_subst_attr \"round_saeonly_mask_operand3\" \"mask\" \"%r3\" \"%r5\")\n (define_subst_attr \"round_saeonly_mask_operand4\" \"mask\" \"%r4\" \"%r6\")\n (define_subst_attr \"round_saeonly_mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"%r4\" \"%r5\")\n+(define_subst_attr \"round_saeonly_sd_mask_operand4\" \"sd\" \"%r4\" \"%r6\")\n (define_subst_attr \"round_saeonly_sd_mask_operand5\" \"sd\" \"%r5\" \"%r7\")\n (define_subst_attr \"round_saeonly_op2\" \"round_saeonly\" \"\" \"%r2\")\n (define_subst_attr \"round_saeonly_op3\" \"round_saeonly\" \"\" \"%r3\")\n@@ -160,6 +161,7 @@\n (define_subst_attr \"round_saeonly_mask_op3\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand3>\")\n (define_subst_attr \"round_saeonly_mask_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand4>\")\n (define_subst_attr \"round_saeonly_mask_scalar_merge_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_merge_operand4>\")\n+(define_subst_attr \"round_saeonly_sd_mask_op4\" \"round_saeonly\" \"\" \"<round_saeonly_sd_mask_operand4>\")\n (define_subst_attr \"round_saeonly_sd_mask_op5\" \"round_saeonly\" \"\" \"<round_saeonly_sd_mask_operand5>\")\n (define_subst_attr \"round_saeonly_mask_arg3\" \"round_saeonly\" \"\" \", operands[<mask_expand_op3>]\")\n (define_subst_attr \"round_saeonly_constraint\" \"round_saeonly\" \"vm\" \"v\")\n@@ -212,23 +214,21 @@\n \n (define_subst_attr \"round_saeonly_expand_name\" \"round_saeonly_expand\" \"\" \"_round\")\n (define_subst_attr \"round_saeonly_expand_nimm_predicate\" \"round_saeonly_expand\" \"nonimmediate_operand\" \"register_operand\")\n-(define_subst_attr \"round_saeonly_expand_operand6\" \"round_saeonly_expand\" \"\" \", operands[6]\")\n+(define_subst_attr \"round_saeonly_expand_operand5\" \"round_saeonly_expand\" \"\" \", operands[5]\")\n \n (define_subst \"round_saeonly_expand\"\n  [(match_operand:SUBST_V 0)\n   (match_operand:SUBST_V 1)\n-  (match_operand:SUBST_V 2)\n-  (match_operand:SUBST_A 3)\n-  (match_operand:SI 4)\n-  (match_operand:SUBST_S 5)]\n+  (match_operand:SUBST_A 2)\n+  (match_operand:SI 3)\n+  (match_operand:SUBST_S 4)]\n   \"TARGET_AVX512F\"\n   [(match_dup 0)\n    (match_dup 1)\n    (match_dup 2)\n    (match_dup 3)\n    (match_dup 4)\n-   (match_dup 5)\n-   (unspec [(match_operand:SI 6 \"const48_operand\")] UNSPEC_EMBEDDED_ROUNDING)])\n+   (unspec [(match_operand:SI 5 \"const48_operand\")] UNSPEC_EMBEDDED_ROUNDING)])\n \n (define_subst_attr \"mask_expand4_name\" \"mask_expand4\" \"\" \"_mask\")\n (define_subst_attr \"mask_expand4_args\" \"mask_expand4\" \"\" \", operands[4], operands[5]\")"}, {"sha": "061fa46eba2414e7880120db40993b7fdb84c031", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -1,3 +1,22 @@\n+2018-11-06 Wei Xiao <wei3.xiao@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Update tests for VFIXUPIMM* intrinsics.\n+\t* gcc.target/i386/avx512f-vfixupimmpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmss-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfixupimmpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfixupimmps-1.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/testimm-10.c: Ditto.\n+\t* gcc.target/i386/testround-1.c: Ditto.\n+\n 2018-11-05  Paul Koning  <ni1d@arrl.net>\n \n \t* lib/target-supports.exp: Add check for \"inf\" effective target"}, {"sha": "c5830613011d10e6a743a9a458250d1aeaa34b3b", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -214,14 +214,18 @@\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti64x4_mask(A, E, C, D) __builtin_ia32_extracti64x4_mask(A, 1, C, D)\n-#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmpd512(A, B, C, I) __builtin_ia32_fixupimmpd512(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmpd512_maskz(B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmps512(A, B, C, I) __builtin_ia32_fixupimmps512(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmps512_maskz(B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmsd(A, B, C, I) __builtin_ia32_fixupimmsd(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmsd_maskz(B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmss(A, B, C, I) __builtin_ia32_fixupimmss(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmss_maskz(B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(B, C, 1, E, 8)\n #define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 8)\n #define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 8)\n #define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 8)\n@@ -550,14 +554,19 @@\n #define __builtin_ia32_gather3div4df(A, B, C, D, F) __builtin_ia32_gather3div4df(A, B, C, D, 1)\n #define __builtin_ia32_gather3div2di(A, B, C, D, F) __builtin_ia32_gather3div2di(A, B, C, D, 1)\n #define __builtin_ia32_gather3div2df(A, B, C, D, F) __builtin_ia32_gather3div2df(A, B, C, D, 1)\n-#define __builtin_ia32_fixupimmps256_maskz(A, B, C, F, E) __builtin_ia32_fixupimmps256_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmps256_mask(A, B, C, F, E) __builtin_ia32_fixupimmps256_mask(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmps128_maskz(A, B, C, F, E) __builtin_ia32_fixupimmps128_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmps128_mask(A, B, C, F, E) __builtin_ia32_fixupimmps128_mask(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd256_maskz(A, B, C, F, E) __builtin_ia32_fixupimmpd256_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd256_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd256_mask(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd128_maskz(A, B, C, F, E) __builtin_ia32_fixupimmpd128_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd128_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd128_mask(A, B, C, 1, E)\n+#define __builtin_ia32_fixupimmps256_maskz(B, C, F, E) __builtin_ia32_fixupimmps256_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmps256_mask(A, B, C, F, E) __builtin_ia32_fixupimmps256_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmps256(A, B, C) __builtin_ia32_fixupimmps256(A, B, 1)\n+\n+#define __builtin_ia32_fixupimmps128_maskz(B, C, F, E) __builtin_ia32_fixupimmps128_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmps128_mask(A, B, C, F, E) __builtin_ia32_fixupimmps128_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmps128(A, B, C) __builtin_ia32_fixupimmps128(A, B, 1)\n+#define __builtin_ia32_fixupimmpd256_maskz(B, C, F, E) __builtin_ia32_fixupimmpd256_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmpd256_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd256_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmpd256(A, B, C) __builtin_ia32_fixupimmpd256(A, B, 1)\n+#define __builtin_ia32_fixupimmpd128_maskz(B, C, F, E) __builtin_ia32_fixupimmpd128_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmpd128_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd128_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmpd128(A, B, C) __builtin_ia32_fixupimmpd128(A, B, 1)\n #define __builtin_ia32_extracti32x4_256_mask(A, E, C, D) __builtin_ia32_extracti32x4_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf32x4_256_mask(A, E, C, D) __builtin_ia32_extractf32x4_256_mask(A, 1, C, D)\n #define __builtin_ia32_cmpq256_mask(A, B, E, D) __builtin_ia32_cmpq256_mask(A, B, 1, D)"}, {"sha": "fc58c347b15944f8de205a3cccc30186b24117b3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmpd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-1.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -16,10 +16,10 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm512_fixupimm_pd (x1, x2, y, 3);\n+  x1 = _mm512_fixupimm_pd (x2, y, 3);\n   x1 = _mm512_mask_fixupimm_pd (x1, m, x2, y, 3);\n-  x1 = _mm512_maskz_fixupimm_pd (m, x1, x2, y, 3);\n-  x1 = _mm512_fixupimm_round_pd (x1, x2, y, 3, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fixupimm_pd (m, x2, y, 3);\n+  x1 = _mm512_fixupimm_round_pd (x2, y, 3, _MM_FROUND_NO_EXC);\n   x1 = _mm512_mask_fixupimm_round_pd (x1, m, x2, y, 3, _MM_FROUND_NO_EXC);\n-  x1 = _mm512_maskz_fixupimm_round_pd (m, x1, x2, y, 3, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fixupimm_round_pd (m, x2, y, 3, _MM_FROUND_NO_EXC);\n }"}, {"sha": "8c4e163163554d0b2ae788d9aa2bb0e3a9d0e181", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmpd-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-2.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -99,9 +99,9 @@ TEST (void)\n \t  CALC (&res_ref[j], s1.a[j], s2.a[j]);\n \t}\n \n-      res1.x = INTRINSIC (_fixupimm_pd) (res1.x, s1.x, s2.x, 0);\n+      res1.x = INTRINSIC (_fixupimm_pd) (s1.x, s2.x, 0);\n       res2.x = INTRINSIC (_mask_fixupimm_pd) (res2.x, mask, s1.x, s2.x, 0);\n-      res3.x = INTRINSIC (_maskz_fixupimm_pd) (mask, res3.x, s1.x, s2.x, 0);\n+      res3.x = INTRINSIC (_maskz_fixupimm_pd) (mask, s1.x, s2.x, 0);\n \n       if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n \tabort ();"}, {"sha": "7921a1b546b35fd24a7bc127ac23f49ded4be7d0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmps-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-1.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -16,10 +16,10 @@ volatile __mmask16 m;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm512_fixupimm_ps (x1, x2, y, 3);\n+  x1 = _mm512_fixupimm_ps (x2, y, 3);\n   x1 = _mm512_mask_fixupimm_ps (x1, m, x2, y, 3);\n-  x1 = _mm512_maskz_fixupimm_ps (m, x1, x2, y, 3);\n-  x1 = _mm512_fixupimm_round_ps (x1, x2, y, 3, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fixupimm_ps (m, x2, y, 3);\n+  x1 = _mm512_fixupimm_round_ps (x2, y, 3, _MM_FROUND_NO_EXC);\n   x1 = _mm512_mask_fixupimm_round_ps (x1, m, x2, y, 3, _MM_FROUND_NO_EXC);\n-  x1 = _mm512_maskz_fixupimm_round_ps (m, x1, x2, y, 3, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fixupimm_round_ps (m, x2, y, 3, _MM_FROUND_NO_EXC);\n }"}, {"sha": "5c60a855f93cbbfee715f5f7c357337c73797dda", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmps-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-2.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -104,9 +104,9 @@ TEST (void)\n \t  CALC (&res_ref[j], s1.a[j], s2.a[j]);\n \t}\n \n-      res1.x = INTRINSIC (_fixupimm_ps) (res1.x, s1.x, s2.x, 0);\n+      res1.x = INTRINSIC (_fixupimm_ps) (s1.x, s2.x, 0);\n       res2.x = INTRINSIC (_mask_fixupimm_ps) (res2.x, mask, s1.x, s2.x, 0);\n-      res3.x = INTRINSIC (_maskz_fixupimm_ps) (mask, res3.x, s1.x, s2.x, 0);\n+      res3.x = INTRINSIC (_maskz_fixupimm_ps) (mask, s1.x, s2.x, 0);\n \n       if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n \tabort ();"}, {"sha": "926a5dc64e3868e7d4a0b81942a2d6e3f6630d50", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmsd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-1.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -16,10 +16,10 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n-  x = _mm_fixupimm_sd (x, x, y, 3);\n+  x = _mm_fixupimm_sd (x, y, 3);\n   x = _mm_mask_fixupimm_sd (x, m, x, y, 3);\n-  x = _mm_maskz_fixupimm_sd (m, x, x, y, 3);\n-  x = _mm_fixupimm_round_sd (x, x, y, 3, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_fixupimm_sd (m, x, y, 3);\n+  x = _mm_fixupimm_round_sd (x, y, 3, _MM_FROUND_NO_EXC);\n   x = _mm_mask_fixupimm_round_sd (x, m, x, y, 3, _MM_FROUND_NO_EXC);\n-  x = _mm_maskz_fixupimm_round_sd (m, x, x, y, 3, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_fixupimm_round_sd (m, x, y, 3, _MM_FROUND_NO_EXC);\n }"}, {"sha": "e2947b34e0b7d35b3727830e3f0a74ee078bb189", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmsd-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-2.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -100,9 +100,9 @@ avx512f_test (void)\n \t  s2.a[0] = controls[j];\n \t  compute_fixupimmpd (&res_ref[0], s1.a[0], s2.a[0]);\n \n-\t  res1.x = _mm_fixupimm_sd (res1.x, s1.x, s2.x, 0);\n+\t  res1.x = _mm_fixupimm_sd (s1.x, s2.x, 0);\n \t  res2.x = _mm_mask_fixupimm_sd (res2.x, mask, s1.x, s2.x, 0);\n-\t  res3.x = _mm_maskz_fixupimm_sd (mask, res3.x, s1.x, s2.x, 0);\n+\t  res3.x = _mm_maskz_fixupimm_sd (mask, s1.x, s2.x, 0);\n \n \t  if (check_union128d (res1, res_ref))\n \t    abort ();"}, {"sha": "65ba291cca137c552fc52349bfa92f44f3611905", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmss-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-1.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -16,10 +16,10 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n-  x = _mm_fixupimm_ss (x, x, y, 3);\n+  x = _mm_fixupimm_ss (x, y, 3);\n   x = _mm_mask_fixupimm_ss (x, m, x, y, 3);\n-  x = _mm_maskz_fixupimm_ss (m, x, x, y, 3);\n-  x = _mm_fixupimm_round_ss (x, x, y, 3, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_fixupimm_ss (m, x, y, 3);\n+  x = _mm_fixupimm_round_ss (x, y, 3, _MM_FROUND_NO_EXC);\n   x = _mm_mask_fixupimm_round_ss (x, m, x, y, 3, _MM_FROUND_NO_EXC);\n-  x = _mm_maskz_fixupimm_round_ss (m, x, x, y, 3, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_fixupimm_round_ss (m, x, y, 3, _MM_FROUND_NO_EXC);\n }"}, {"sha": "2f307f6ec8d6741068afdf0f548741825843f82b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmss-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-2.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -101,9 +101,9 @@ avx512f_test (void)\n \t  s2.a[0] = controls[j];\n \t  compute_fixupimmps (&res_ref[0], s1.a[0], s2.a[0]);\n \n-\t  res1.x = _mm_fixupimm_ss (res1.x, s1.x, s2.x, 0);\n+\t  res1.x = _mm_fixupimm_ss (s1.x, s2.x, 0);\n \t  res2.x = _mm_mask_fixupimm_ss (res2.x, mask, s1.x, s2.x, 0);\n-\t  res3.x = _mm_maskz_fixupimm_ss (mask, res3.x, s1.x, s2.x, 0);\n+\t  res3.x = _mm_maskz_fixupimm_ss (mask, s1.x, s2.x, 0);\n \n \t  if (check_union128 (res1, res_ref))\n \t    abort ();"}, {"sha": "5835dbc3e5507e8019a33cff73d2760d4643151a", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vfixupimmpd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vfixupimmpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vfixupimmpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vfixupimmpd-1.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -16,10 +16,10 @@ volatile __mmask8 m;\n void extern\n avx512vl_test (void)\n {\n-  xx = _mm256_fixupimm_pd (xx, xx, yy, 3);\n+  xx = _mm256_fixupimm_pd (xx, yy, 3);\n   xx = _mm256_mask_fixupimm_pd (xx, m, xx, yy, 3);\n-  xx = _mm256_maskz_fixupimm_pd (m, xx, xx, yy, 3);\n-  x2 = _mm_fixupimm_pd (x2, x2, y2, 3);\n+  xx = _mm256_maskz_fixupimm_pd (m, xx, yy, 3);\n+  x2 = _mm_fixupimm_pd (x2, y2, 3);\n   x2 = _mm_mask_fixupimm_pd (x2, m, x2, y2, 3);\n-  x2 = _mm_maskz_fixupimm_pd (m, x2, x2, y2, 3);\n+  x2 = _mm_maskz_fixupimm_pd (m, x2, y2, 3);\n }"}, {"sha": "c195333f8779f753d4b072a6386511746b8d94a5", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vfixupimmps-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vfixupimmps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vfixupimmps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vfixupimmps-1.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -16,10 +16,10 @@ volatile __mmask8 m;\n void extern\n avx512vl_test (void)\n {\n-  xx = _mm256_fixupimm_ps (xx, xx, yy, 3);\n+  xx = _mm256_fixupimm_ps (xx, yy, 3);\n   xx = _mm256_mask_fixupimm_ps (xx, m, xx, yy, 3);\n-  xx = _mm256_maskz_fixupimm_ps (m, xx, xx, yy, 3);\n-  x2 = _mm_fixupimm_ps (x2, x2, y2, 3);\n+  xx = _mm256_maskz_fixupimm_ps (m, xx, yy, 3);\n+  x2 = _mm_fixupimm_ps (x2, y2, 3);\n   x2 = _mm_mask_fixupimm_ps (x2, m, x2, y2, 3);\n-  x2 = _mm_maskz_fixupimm_ps (m, x2, x2, y2, 3);\n+  x2 = _mm_maskz_fixupimm_ps (m, x2, y2, 3);\n }"}, {"sha": "48c009ebec466ce72cc7d9c60394d504046b63cd", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -231,14 +231,18 @@\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti64x4_mask(A, E, C, D) __builtin_ia32_extracti64x4_mask(A, 1, C, D)\n-#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmpd512(A, B, C, I) __builtin_ia32_fixupimmpd512(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmpd512_maskz(B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmps512(A, B, C, I) __builtin_ia32_fixupimmps512(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmps512_maskz(B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmsd(A, B, C, I) __builtin_ia32_fixupimmsd(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmsd_maskz(B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmss(A, B, C, I) __builtin_ia32_fixupimmss(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmss_maskz(B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(B, C, 1, E, 8)\n #define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 8)\n #define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 8)\n #define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 8)\n@@ -567,14 +571,19 @@\n #define __builtin_ia32_gather3div4df(A, B, C, D, F) __builtin_ia32_gather3div4df(A, B, C, D, 1)\n #define __builtin_ia32_gather3div2di(A, B, C, D, F) __builtin_ia32_gather3div2di(A, B, C, D, 1)\n #define __builtin_ia32_gather3div2df(A, B, C, D, F) __builtin_ia32_gather3div2df(A, B, C, D, 1)\n-#define __builtin_ia32_fixupimmps256_maskz(A, B, C, F, E) __builtin_ia32_fixupimmps256_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmps256_mask(A, B, C, F, E) __builtin_ia32_fixupimmps256_mask(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmps128_maskz(A, B, C, F, E) __builtin_ia32_fixupimmps128_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmps128_mask(A, B, C, F, E) __builtin_ia32_fixupimmps128_mask(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd256_maskz(A, B, C, F, E) __builtin_ia32_fixupimmpd256_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd256_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd256_mask(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd128_maskz(A, B, C, F, E) __builtin_ia32_fixupimmpd128_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd128_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd128_mask(A, B, C, 1, E)\n+#define __builtin_ia32_fixupimmps256_maskz(B, C, F, E) __builtin_ia32_fixupimmps256_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmps256_mask(A, B, C, F, E) __builtin_ia32_fixupimmps256_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmps256(A, B, C) __builtin_ia32_fixupimmps256(A, B, 1)\n+\n+#define __builtin_ia32_fixupimmps128_maskz(B, C, F, E) __builtin_ia32_fixupimmps128_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmps128_mask(A, B, C, F, E) __builtin_ia32_fixupimmps128_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmps128(A, B, C) __builtin_ia32_fixupimmps128(A, B, 1)\n+#define __builtin_ia32_fixupimmpd256_maskz(B, C, F, E) __builtin_ia32_fixupimmpd256_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmpd256_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd256_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmpd256(A, B, C) __builtin_ia32_fixupimmpd256(A, B, 1)\n+#define __builtin_ia32_fixupimmpd128_maskz(B, C, F, E) __builtin_ia32_fixupimmpd128_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmpd128_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd128_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmpd128(A, B, C) __builtin_ia32_fixupimmpd128(A, B, 1)\n #define __builtin_ia32_extracti32x4_256_mask(A, E, C, D) __builtin_ia32_extracti32x4_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf32x4_256_mask(A, E, C, D) __builtin_ia32_extractf32x4_256_mask(A, 1, C, D)\n #define __builtin_ia32_cmpq256_mask(A, B, E, D) __builtin_ia32_cmpq256_mask(A, B, 1, D)"}, {"sha": "6393ab424868580ba46cd380608624539a8ae0d0", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -444,8 +444,8 @@ test_3v (_mm512_i64scatter_pd, void *, __m512i, __m512d, 1)\n test_3v (_mm512_i64scatter_ps, void *, __m512i, __m256, 1)\n test_3x (_mm512_mask_roundscale_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 8)\n test_3x (_mm512_mask_roundscale_round_ps, __m512, __m512, __mmask16, __m512, 1, 8)\n-test_3x (_mm_fixupimm_round_sd, __m128d, __m128d, __m128d, __m128i, 1, 8)\n-test_3x (_mm_fixupimm_round_ss, __m128, __m128, __m128, __m128i, 1, 8)\n+test_2x (_mm_fixupimm_round_sd, __m128d, __m128d, __m128i, 1, 8)\n+test_2x (_mm_fixupimm_round_ss, __m128, __m128, __m128i, 1, 8)\n test_3x (_mm_mask_cmp_round_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1, 8)\n test_3x (_mm_mask_cmp_round_ss_mask, __mmask8, __mmask8, __m128, __m128, 1, 8)\n test_4 (_mm512_mask3_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n@@ -544,12 +544,12 @@ test_4v (_mm512_mask_i64scatter_pd, void *, __mmask8, __m512i, __m512d, 1)\n test_4v (_mm512_mask_i64scatter_ps, void *, __mmask8, __m512i, __m256, 1)\n test_4x (_mm512_mask_fixupimm_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512i, 1, 8)\n test_4x (_mm512_mask_fixupimm_round_ps, __m512, __m512, __mmask16, __m512, __m512i, 1, 8)\n-test_4x (_mm512_maskz_fixupimm_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512i, 1, 8)\n-test_4x (_mm512_maskz_fixupimm_round_ps, __m512, __mmask16, __m512, __m512, __m512i, 1, 8)\n+test_3x (_mm512_maskz_fixupimm_round_pd, __m512d, __mmask8, __m512d, __m512i, 1, 8)\n+test_3x (_mm512_maskz_fixupimm_round_ps, __m512, __mmask16, __m512, __m512i, 1, 8)\n test_4x (_mm_mask_fixupimm_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128i, 1, 8)\n test_4x (_mm_mask_fixupimm_round_ss, __m128, __m128, __mmask8, __m128, __m128i, 1, 8)\n-test_4x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128i, 1, 8)\n-test_4x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128, __m128i, 1, 8)\n+test_3x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128i, 1, 8)\n+test_3x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128i, 1, 8)\n \n /* avx512pfintrin.h */\n test_2vx (_mm512_prefetch_i32gather_ps, __m512i, void const *, 1, _MM_HINT_T0)"}, {"sha": "d21769c0de8a499a40bc1f7c95f1a7971d0de08d", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -555,8 +555,8 @@ test_3x (_mm512_mask_roundscale_round_pd, __m512d, __m512d, __mmask8, __m512d, 1\n test_3x (_mm512_mask_roundscale_round_ps, __m512, __m512, __mmask16, __m512, 1, 8)\n test_3x (_mm512_mask_cmp_round_pd_mask, __mmask8, __mmask8, __m512d, __m512d, 1, 8)\n test_3x (_mm512_mask_cmp_round_ps_mask, __mmask16, __mmask16, __m512, __m512, 1, 8)\n-test_3x (_mm_fixupimm_round_sd, __m128d, __m128d, __m128d, __m128i, 1, 8)\n-test_3x (_mm_fixupimm_round_ss, __m128, __m128, __m128, __m128i, 1, 8)\n+test_2x (_mm_fixupimm_round_sd, __m128d, __m128d, __m128i, 1, 8)\n+test_2x (_mm_fixupimm_round_ss, __m128, __m128, __m128i, 1, 8)\n test_3x (_mm_mask_cmp_round_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1, 8)\n test_3x (_mm_mask_cmp_round_ss_mask, __mmask8, __mmask8, __m128, __m128, 1, 8)\n test_4 (_mm512_mask3_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n@@ -643,12 +643,12 @@ test_4v (_mm512_mask_i64scatter_pd, void *, __mmask8, __m512i, __m512d, 1)\n test_4v (_mm512_mask_i64scatter_ps, void *, __mmask8, __m512i, __m256, 1)\n test_4x (_mm512_mask_fixupimm_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512i, 1, 8)\n test_4x (_mm512_mask_fixupimm_round_ps, __m512, __m512, __mmask16, __m512, __m512i, 1, 8)\n-test_4x (_mm512_maskz_fixupimm_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512i, 1, 8)\n-test_4x (_mm512_maskz_fixupimm_round_ps, __m512, __mmask16, __m512, __m512, __m512i, 1, 8)\n+test_3x (_mm512_maskz_fixupimm_round_pd, __m512d, __mmask8, __m512d, __m512i, 1, 8)\n+test_3x (_mm512_maskz_fixupimm_round_ps, __m512, __mmask16, __m512, __m512i, 1, 8)\n test_4x (_mm_mask_fixupimm_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128i, 1, 8)\n test_4x (_mm_mask_fixupimm_round_ss, __m128, __m128, __mmask8, __m128, __m128i, 1, 8)\n-test_4x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128i, 1, 8)\n-test_4x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128, __m128i, 1, 8)\n+test_3x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128i, 1, 8)\n+test_3x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128i, 1, 8)\n \n /* avx512pfintrin.h */\n test_2vx (_mm512_prefetch_i32gather_ps, __m512i, void const *, 1, _MM_HINT_T0)"}, {"sha": "2ca333959ec85acb30dc5290f271d380d75f031d", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -232,14 +232,18 @@\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti64x4_mask(A, E, C, D) __builtin_ia32_extracti64x4_mask(A, 1, C, D)\n-#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 8)\n-#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmpd512(A, B, C, I) __builtin_ia32_fixupimmpd512(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmpd512_maskz(B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmps512(A, B, C, I) __builtin_ia32_fixupimmps512(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmps512_maskz(B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmsd(A, B, C, I) __builtin_ia32_fixupimmsd(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmsd_maskz(B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmss(A, B, C, I) __builtin_ia32_fixupimmss(A, B, 1, 8)\n+#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, 1, I, E, 8)\n+#define __builtin_ia32_fixupimmss_maskz(B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(B, C, 1, E, 8)\n #define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 8)\n #define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 8)\n #define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 8)\n@@ -566,14 +570,19 @@\n #define __builtin_ia32_gather3div4df(A, B, C, D, F) __builtin_ia32_gather3div4df(A, B, C, D, 1)\n #define __builtin_ia32_gather3div2di(A, B, C, D, F) __builtin_ia32_gather3div2di(A, B, C, D, 1)\n #define __builtin_ia32_gather3div2df(A, B, C, D, F) __builtin_ia32_gather3div2df(A, B, C, D, 1)\n-#define __builtin_ia32_fixupimmps256_maskz(A, B, C, F, E) __builtin_ia32_fixupimmps256_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmps256_mask(A, B, C, F, E) __builtin_ia32_fixupimmps256_mask(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmps128_maskz(A, B, C, F, E) __builtin_ia32_fixupimmps128_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmps128_mask(A, B, C, F, E) __builtin_ia32_fixupimmps128_mask(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd256_maskz(A, B, C, F, E) __builtin_ia32_fixupimmpd256_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd256_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd256_mask(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd128_maskz(A, B, C, F, E) __builtin_ia32_fixupimmpd128_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_fixupimmpd128_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd128_mask(A, B, C, 1, E)\n+#define __builtin_ia32_fixupimmps256_maskz(B, C, F, E) __builtin_ia32_fixupimmps256_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmps256_mask(A, B, C, F, E) __builtin_ia32_fixupimmps256_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmps256(A, B, C) __builtin_ia32_fixupimmps256(A, B, 1)\n+\n+#define __builtin_ia32_fixupimmps128_maskz(B, C, F, E) __builtin_ia32_fixupimmps128_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmps128_mask(A, B, C, F, E) __builtin_ia32_fixupimmps128_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmps128(A, B, C) __builtin_ia32_fixupimmps128(A, B, 1)\n+#define __builtin_ia32_fixupimmpd256_maskz(B, C, F, E) __builtin_ia32_fixupimmpd256_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmpd256_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd256_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmpd256(A, B, C) __builtin_ia32_fixupimmpd256(A, B, 1)\n+#define __builtin_ia32_fixupimmpd128_maskz(B, C, F, E) __builtin_ia32_fixupimmpd128_maskz(B, C, 1, E)\n+#define __builtin_ia32_fixupimmpd128_mask(A, B, C, F, E) __builtin_ia32_fixupimmpd128_mask(A, B, 1, F, E)\n+#define __builtin_ia32_fixupimmpd128(A, B, C) __builtin_ia32_fixupimmpd128(A, B, 1)\n #define __builtin_ia32_extracti32x4_256_mask(A, E, C, D) __builtin_ia32_extracti32x4_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf32x4_256_mask(A, E, C, D) __builtin_ia32_extractf32x4_256_mask(A, 1, C, D)\n #define __builtin_ia32_cmpq256_mask(A, B, E, D) __builtin_ia32_cmpq256_mask(A, B, 1, D)"}, {"sha": "932b8902394728d9d26fd7dc873a0a8244928517", "filename": "gcc/testsuite/gcc.target/i386/testimm-10.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -69,21 +69,21 @@ test8bit (void)\n   m512  = _mm512_mask_shuffle_ps (m512, mmask16, m512, m512, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n   m512  = _mm512_maskz_shuffle_ps (mmask16, m512, m512, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n \n-  m512d = _mm512_fixupimm_pd (m512d, m512d, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m512d = _mm512_fixupimm_pd (m512d, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n   m512d = _mm512_mask_fixupimm_pd (m512d, mmask8, m512d, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n-  m512d = _mm512_maskz_fixupimm_pd (mmask8, m512d, m512d, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m512d = _mm512_maskz_fixupimm_pd (mmask8, m512d, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n \n-  m512  = _mm512_fixupimm_ps (m512, m512, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m512  = _mm512_fixupimm_ps (m512, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n   m512  = _mm512_mask_fixupimm_ps (m512, mmask16, m512, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n-  m512  = _mm512_maskz_fixupimm_ps (mmask16, m512, m512, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m512  = _mm512_maskz_fixupimm_ps (mmask16, m512, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n \n-  m128d = _mm_fixupimm_sd (m128d, m128d, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m128d = _mm_fixupimm_sd (m128d, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n   m128d = _mm_mask_fixupimm_sd (m128d, mmask8, m128d, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n-  m128d = _mm_maskz_fixupimm_sd (mmask8, m128d, m128d, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m128d = _mm_maskz_fixupimm_sd (mmask8, m128d, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n \n-  m128  = _mm_fixupimm_ss (m128, m128, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m128  = _mm_fixupimm_ss (m128, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n   m128  = _mm_mask_fixupimm_ss (m128, mmask8, m128, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n-  m128  = _mm_maskz_fixupimm_ss (mmask8, m128, m128, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m128  = _mm_maskz_fixupimm_ss (mmask8, m128, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n \n   m512i = _mm512_rol_epi32 (m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n   m512i = _mm512_mask_rol_epi32 (m512i, mmask16, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */"}, {"sha": "e51d77b09e7f22efbddaa08a140f8fe5ebd245c6", "filename": "gcc/testsuite/gcc.target/i386/testround-1.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2ad8cc8f080890966b594453ff01e875605e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c?ref=ce2ad8cc8f080890966b594453ff01e875605e66", "patch": "@@ -220,18 +220,18 @@ test_round (void)\n   m512i = _mm512_mask_cvtt_roundps_epu32 (m512i, mmask16, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512i = _mm512_maskz_cvtt_roundps_epu32 (mmask16, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n-  m512d = _mm512_fixupimm_round_pd (m512d, m512d, m512i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m512d = _mm512_fixupimm_round_pd (m512d, m512i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_fixupimm_round_pd (m512d, mmask8, m512d, m512i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n-  m512d = _mm512_maskz_fixupimm_round_pd (mmask8, m512d, m512d, m512i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n-  m512 = _mm512_fixupimm_round_ps (m512, m512, m512i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m512d = _mm512_maskz_fixupimm_round_pd (mmask8, m512d, m512i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m512 = _mm512_fixupimm_round_ps (m512, m512i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_fixupimm_round_ps (m512, mmask16, m512, m512i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n-  m512 = _mm512_maskz_fixupimm_round_ps (mmask16, m512, m512, m512i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n-  m128d = _mm_fixupimm_round_sd (m128d, m128d, m128i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m512 = _mm512_maskz_fixupimm_round_ps (mmask16, m512, m512i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_fixupimm_round_sd (m128d, m128i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_mask_fixupimm_round_sd (m128d, mmask8, m128d, m128i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n-  m128d = _mm_maskz_fixupimm_round_sd (mmask8, m128d, m128d, m128i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n-  m128 = _mm_fixupimm_round_ss (m128, m128, m128i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_fixupimm_round_sd (mmask8, m128d, m128i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_fixupimm_round_ss (m128, m128i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_mask_fixupimm_round_ss (m128, mmask8, m128, m128i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n-  m128 = _mm_maskz_fixupimm_round_ss (mmask8, m128, m128, m128i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_fixupimm_round_ss (mmask8, m128, m128i, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   ui = _mm_cvtt_roundss_u32 (m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n   i = _mm_cvtt_roundss_i32 (m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -503,18 +503,18 @@ test_sae_only (void)\n   m512i = _mm512_mask_cvtt_roundps_epu32 (m512i, mmask16, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512i = _mm512_maskz_cvtt_roundps_epu32 (mmask16, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n \n-  m512d = _mm512_fixupimm_round_pd (m512d, m512d, m512i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m512d = _mm512_fixupimm_round_pd (m512d, m512i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_fixupimm_round_pd (m512d, mmask8, m512d, m512i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n-  m512d = _mm512_maskz_fixupimm_round_pd (mmask8, m512d, m512d, m512i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n-  m512 = _mm512_fixupimm_round_ps (m512, m512, m512i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m512d = _mm512_maskz_fixupimm_round_pd (mmask8, m512d, m512i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m512 = _mm512_fixupimm_round_ps (m512, m512i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_fixupimm_round_ps (m512, mmask16, m512, m512i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n-  m512 = _mm512_maskz_fixupimm_round_ps (mmask16, m512, m512, m512i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n-  m128d = _mm_fixupimm_round_sd (m128d, m128d, m128i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m512 = _mm512_maskz_fixupimm_round_ps (mmask16, m512, m512i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_fixupimm_round_sd (m128d, m128i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_mask_fixupimm_round_sd (m128d, mmask8, m128d, m128i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n-  m128d = _mm_maskz_fixupimm_round_sd (mmask8, m128d, m128d, m128i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n-  m128 = _mm_fixupimm_round_ss (m128, m128, m128i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_fixupimm_round_sd (mmask8, m128d, m128i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_fixupimm_round_ss (m128, m128i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_mask_fixupimm_round_ss (m128, mmask8, m128, m128i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n-  m128 = _mm_maskz_fixupimm_round_ss (mmask8, m128, m128, m128i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_fixupimm_round_ss (mmask8, m128, m128i, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n \n   ui = _mm_cvtt_roundss_u32 (m128, 3); /* { dg-error \"incorrect rounding operand\" } */\n   i = _mm_cvtt_roundss_i32 (m128, 3); /* { dg-error \"incorrect rounding operand\" } */"}]}