{"sha": "00cc7cbfb534eca268ddd53a113636b5cd64948c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjYzdjYmZiNTM0ZWNhMjY4ZGRkNTNhMTEzNjM2YjVjZDY0OTQ4Yw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-09-20T16:22:24Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-09-20T16:22:24Z"}, "message": "rs6000.c (rs6000_expand_vector_init): For V4SF inits on power8 and above, use the VMRGEW instruction instead of a permute.\n\n2016-09-20  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_init): For V4SF\n\tinits on power8 and above, use the VMRGEW instruction instead of a\n\tpermute.\n\n\t* config/rs6000/altivec.md (UNSPEC_VMRGEW_DIRECT): New unspec.\n\t(p8_vmrgew_v4sf_direct): New VMRGEW insn for V4SF floating\n\tinitialization.\n\nFrom-SVN: r240272", "tree": {"sha": "9a71906cf48d36954fc14b7e6540e66ca6a416d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a71906cf48d36954fc14b7e6540e66ca6a416d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00cc7cbfb534eca268ddd53a113636b5cd64948c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cc7cbfb534eca268ddd53a113636b5cd64948c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cc7cbfb534eca268ddd53a113636b5cd64948c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cc7cbfb534eca268ddd53a113636b5cd64948c/comments", "author": null, "committer": null, "parents": [{"sha": "c55b54403ea3a3e781eaf14d3057d103bd77ade3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c55b54403ea3a3e781eaf14d3057d103bd77ade3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c55b54403ea3a3e781eaf14d3057d103bd77ade3"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "92370d182f388a8bbb5b96e81b5f294fcfd73f42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cc7cbfb534eca268ddd53a113636b5cd64948c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cc7cbfb534eca268ddd53a113636b5cd64948c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00cc7cbfb534eca268ddd53a113636b5cd64948c", "patch": "@@ -1,3 +1,13 @@\n+2016-09-20  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_init): For V4SF\n+\tinits on power8 and above, use the VMRGEW instruction instead of a\n+\tpermute.\n+\n+\t* config/rs6000/altivec.md (UNSPEC_VMRGEW_DIRECT): New unspec.\n+\t(p8_vmrgew_v4sf_direct): New VMRGEW insn for V4SF floating\n+\tinitialization.\n+\n 2016-09-20  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/arm_neon.h"}, {"sha": "541c449f79592d87b0f776e4410807d54c62c4b4", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cc7cbfb534eca268ddd53a113636b5cd64948c/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cc7cbfb534eca268ddd53a113636b5cd64948c/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=00cc7cbfb534eca268ddd53a113636b5cd64948c", "patch": "@@ -141,6 +141,7 @@\n    UNSPEC_VMRGH_DIRECT\n    UNSPEC_VMRGL_DIRECT\n    UNSPEC_VSPLT_DIRECT\n+   UNSPEC_VMRGEW_DIRECT\n    UNSPEC_VSUMSWS_DIRECT\n    UNSPEC_VADDCUQ\n    UNSPEC_VADDEUQM\n@@ -1340,6 +1341,15 @@\n }\n   [(set_attr \"type\" \"vecperm\")])\n \n+(define_insn \"p8_vmrgew_v4sf_direct\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V4SF 2 \"register_operand\" \"v\")]\n+\t\t     UNSPEC_VMRGEW_DIRECT))]\n+  \"TARGET_P8_VECTOR\"\n+  \"vmrgew %0,%1,%2\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n (define_expand \"vec_widen_umult_even_v16qi\"\n   [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n    (use (match_operand:V16QI 1 \"register_operand\" \"\"))"}, {"sha": "7dd7ee51903f88de4aa5d394621139724c363458", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cc7cbfb534eca268ddd53a113636b5cd64948c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cc7cbfb534eca268ddd53a113636b5cd64948c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=00cc7cbfb534eca268ddd53a113636b5cd64948c", "patch": "@@ -6821,11 +6821,26 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n \t  rtx op2 = force_reg (SFmode, XVECEXP (vals, 0, 2));\n \t  rtx op3 = force_reg (SFmode, XVECEXP (vals, 0, 3));\n \n-\t  emit_insn (gen_vsx_concat_v2sf (dbl_even, op0, op1));\n-\t  emit_insn (gen_vsx_concat_v2sf (dbl_odd, op2, op3));\n-\t  emit_insn (gen_vsx_xvcvdpsp (flt_even, dbl_even));\n-\t  emit_insn (gen_vsx_xvcvdpsp (flt_odd, dbl_odd));\n-\t  rs6000_expand_extract_even (target, flt_even, flt_odd);\n+\t  /* Use VMRGEW if we can instead of doing a permute.  */\n+\t  if (TARGET_P8_VECTOR)\n+\t    {\n+\t      emit_insn (gen_vsx_concat_v2sf (dbl_even, op0, op2));\n+\t      emit_insn (gen_vsx_concat_v2sf (dbl_odd, op1, op3));\n+\t      emit_insn (gen_vsx_xvcvdpsp (flt_even, dbl_even));\n+\t      emit_insn (gen_vsx_xvcvdpsp (flt_odd, dbl_odd));\n+\t      if (BYTES_BIG_ENDIAN)\n+\t\temit_insn (gen_p8_vmrgew_v4sf_direct (target, flt_even, flt_odd));\n+\t      else\n+\t\temit_insn (gen_p8_vmrgew_v4sf_direct (target, flt_odd, flt_even));\n+\t    }\n+\t  else\n+\t    {\n+\t      emit_insn (gen_vsx_concat_v2sf (dbl_even, op0, op1));\n+\t      emit_insn (gen_vsx_concat_v2sf (dbl_odd, op2, op3));\n+\t      emit_insn (gen_vsx_xvcvdpsp (flt_even, dbl_even));\n+\t      emit_insn (gen_vsx_xvcvdpsp (flt_odd, dbl_odd));\n+\t      rs6000_expand_extract_even (target, flt_even, flt_odd);\n+\t    }\n \t}\n       return;\n     }"}]}