{"sha": "e07d4821a6f45e995f275980874c8ac6050cc548", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3ZDQ4MjFhNmY0NWU5OTVmMjc1OTgwODc0YzhhYzYwNTBjYzU0OA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-07-14T20:52:04Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-07-14T20:52:04Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r69358", "tree": {"sha": "e43e7b0e8bffab7277d8bdba208155e0b669fecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e43e7b0e8bffab7277d8bdba208155e0b669fecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e07d4821a6f45e995f275980874c8ac6050cc548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e07d4821a6f45e995f275980874c8ac6050cc548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e07d4821a6f45e995f275980874c8ac6050cc548", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e07d4821a6f45e995f275980874c8ac6050cc548/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "121d69e69adb8bbbee8740962bd5636eb1f05b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121d69e69adb8bbbee8740962bd5636eb1f05b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121d69e69adb8bbbee8740962bd5636eb1f05b1a"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "ecd072f9288912956ea88e4a4107fd018680d23a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07d4821a6f45e995f275980874c8ac6050cc548/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07d4821a6f45e995f275980874c8ac6050cc548/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e07d4821a6f45e995f275980874c8ac6050cc548", "patch": "@@ -1,3 +1,8 @@\n+2003-07-14  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-pretty-print.c (pp_c_unary_expression): A CONVERT_EXPR is\n+\thandled by pp_c_cast_expression.\n+\n 2003-07-14  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_expand_prologue): Use a single insn to"}, {"sha": "63b18b3ad131c00249e04e56bdd85de8f91e6fc9", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07d4821a6f45e995f275980874c8ac6050cc548/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07d4821a6f45e995f275980874c8ac6050cc548/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=e07d4821a6f45e995f275980874c8ac6050cc548", "patch": "@@ -27,6 +27,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"c-pretty-print.h\"\n #include \"c-tree.h\"\n \n+/* The pretty-printer code is primarily designed to closely follow\n+   (GNU) C and C++ grammars.  That is to be contrasted with spaghetti\n+   codes we used to have in the past.  Following a structured\n+   approach (preferaably the official grammars) is believed to make it\n+   much easier o add extensions and nifty pretty-printing effects that\n+   takes expresssion or declaration contexts into account.  */\n+\n /* literal  */\n static void pp_c_char (c_pretty_printer, int);\n static void pp_c_character_literal (c_pretty_printer, tree);\n@@ -70,7 +77,12 @@ static void pp_c_function_specifier (c_pretty_printer, tree);\n \f\n /* Declarations.  */\n \n-/* Print out CV-qualifiers.  Take care of possible extensions.  */\n+/* Print out CV-qualifiers.  Take care of possible extensions.\n+     cv-qualifier:\n+        const\n+        volatile\n+        restrict\n+        __restrict__   */\n void\n pp_c_cv_qualifier (c_pretty_printer ppi, int cv)\n {\n@@ -82,6 +94,26 @@ pp_c_cv_qualifier (c_pretty_printer ppi, int cv)\n     pp_c_identifier (ppi, flag_isoc99 ? \"restrict\" : \"__restrict__\");\n }\n \n+/*\n+  simple-type-specifier:\n+     void\n+     char\n+     short\n+     int\n+     long\n+     float\n+     double\n+     signed\n+     unsigned\n+     _Bool                          -- C99\n+     _Complex                       -- C99\n+     _Imaginary                     -- C99\n+     typedef-name.\n+\n+  GNU extensions.\n+  simple-type-specifier:\n+      __complex__\n+      __vector__   */\n static void\n pp_c_simple_type_specifier (c_pretty_printer ppi, tree t)\n {\n@@ -149,6 +181,9 @@ pp_c_simple_type_specifier (c_pretty_printer ppi, tree t)\n     }\n }\n \n+/* specifier-qualifier-list:\n+      type-specifier specifier-qualifier-list-opt\n+      cv-qualifier specifier-qualifier-list-opt  */\n static inline void\n pp_c_specifier_qualifier_list (c_pretty_printer ppi, tree t)\n {\n@@ -688,6 +723,23 @@ pp_c_expression_list (c_pretty_printer ppi, tree e)\n     }\n }\n \n+/* unary-expression:\n+      postfix-expression\n+      ++ cast-expression\n+      -- cast-expression\n+      unary-operator cast-expression\n+      sizeof unary-expression\n+      sizeof ( type-id )\n+\n+  unary-operator: one of\n+      * &  + - ! ~\n+      \n+   GNU extensions.\n+   unary-expression:\n+      __alignof__ unary-expression\n+      __alignof__ ( type-id )\n+      __real__ unary-expression\n+      __imag__ unary-expression  */\n static void\n pp_c_unary_expression (c_pretty_printer ppi, tree e)\n {\n@@ -702,7 +754,6 @@ pp_c_unary_expression (c_pretty_printer ppi, tree e)\n \n     case ADDR_EXPR:\n     case INDIRECT_REF:\n-    case CONVERT_EXPR:\n     case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n     case TRUTH_NOT_EXPR:"}]}