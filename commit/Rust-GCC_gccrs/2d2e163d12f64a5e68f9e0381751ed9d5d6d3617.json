{"sha": "2d2e163d12f64a5e68f9e0381751ed9d5d6d3617", "node_id": "C_kwDOANBUbNoAKDJkMmUxNjNkMTJmNjRhNWU2OGY5ZTAzODE3NTFlZDlkNWQ2ZDM2MTc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-31T22:16:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-01T21:00:20Z"}, "message": "libstdc++: Fix build failures for avr\n\nThe abr-libc <errno.h> does not define EOVERFLOW, which means that\nstd::errc::value_too_large is not defined, and so <charconv> cannot be\ncompiled. Define value_too_large for avr with a value that does not\nclash with any that is defined in <errno.h>. This is a kluge to fix\nbootstrap for avr; it can be removed after PR libstdc++/104883 is\nresolved.\n\nThe avr-libc <errno.h> fails to meet the C and POSIX requirements that\neach error macro has a distinct integral value, and is usable in #if\ndirectives. Add a special case for avr to system_error.cc so that only\nthe valid errors are recognized. Also disable the errno checks in\nstd::filesystem::remove_all that assume a meaningful value for errno.\n\nOn avr-libc <unistd.h> exists but does not define the POSIX functions\nneeded by std::filesystem, so _GLIBCXX_HAVE_UNISTD_H is not sufficient\nto check for basic POSIX APIs. Check !defined __AVR__ as well as\n_GLIBCXX_HAVE_UNISTD_H before using those functions. This is a kluge and\nwe should really have a specific macro that says the required functions\nare available.\n\nlibstdc++-v3/ChangeLog:\n\n\t* config/os/generic/error_constants.h (errc::value_too_large)\n\t[__AVR__]: Define.\n\t* src/c++11/system_error.cc\n\t(system_category::default_error_condition) [__AVR__]: Only match\n\trecognize values equal to EDOM, ERANGE, ENOSYS and EINTR.\n\t* src/c++17/fs_ops.cc (fs::current_path) [__AVR__]: Do not check\n\tfor ENOENT etc. in switch.\n\t(fs::remove_all) [__AVR__]: Likewise.\n\t* src/filesystem/ops-common.h [__AVR__]: Do not use POSIX open,\n\tclose etc.", "tree": {"sha": "81576f901f6df2b481c66b5cae1531c381cf7e68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81576f901f6df2b481c66b5cae1531c381cf7e68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7314558c938245e5963494629e6436e0dccf1c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7314558c938245e5963494629e6436e0dccf1c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7314558c938245e5963494629e6436e0dccf1c8b"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "ba2795352bcc86619759839f7385ce3ccf47f531", "filename": "libstdc++-v3/config/os/generic/error_constants.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h?ref=2d2e163d12f64a5e68f9e0381751ed9d5d6d3617", "patch": "@@ -167,6 +167,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef EOVERFLOW\n       value_too_large = \t\t\tEOVERFLOW,\n+#elif defined __AVR__\n+      value_too_large = \t\t\t999,\n #endif\n \n       wrong_protocol_type = \t\t\tEPROTOTYPE"}, {"sha": "748eee941681849747cf30bbf954d3f6b0cd064b", "filename": "libstdc++-v3/src/c++11/system_error.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc?ref=2d2e163d12f64a5e68f9e0381751ed9d5d6d3617", "patch": "@@ -251,6 +251,15 @@ namespace\n \tX (WRITE_PROTECT,\t\tEROFS);\n #undef X\n \n+#elif defined __AVR__\n+      // avr-libc only defines a few distinct error numbers. Most <errno.h>\n+      // constants are not usable in #if directives and have the same value.\n+      case EDOM:\n+      case ERANGE:\n+      case ENOSYS:\n+      case EINTR:\n+      case 0:\n+\treturn std::error_condition(ev, generic_category_instance.obj);\n #else\n       // List of errno macros from [cerrno.syn].\n       // C11 only defines EDOM, EILSEQ and ERANGE, the rest are from POSIX."}, {"sha": "c94d260632f68fdeebbb1ea42deca64af0ea23b5", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=2d2e163d12f64a5e68f9e0381751ed9d5d6d3617", "patch": "@@ -736,7 +736,7 @@ fs::path\n fs::current_path(error_code& ec)\n {\n   path p;\n-#ifdef _GLIBCXX_HAVE_UNISTD_H\n+#if defined _GLIBCXX_HAVE_UNISTD_H && ! defined __AVR__\n #if defined __GLIBC__ || defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n   if (char_ptr cwd = char_ptr{posix::getcwd(nullptr, 0)})\n     {\n@@ -1302,13 +1302,15 @@ fs::remove_all(const path& p)\n     }\n     // Directory is empty now, will remove it below.\n     break;\n+#ifndef __AVR__\n   case ENOENT:\n     // Our work here is done.\n     return 0;\n   case ENOTDIR:\n   case ELOOP:\n     // Not a directory, will remove below.\n     break;\n+#endif\n   default:\n     // An error occurred.\n     _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"cannot remove all\", p, ec));\n@@ -1339,6 +1341,7 @@ fs::remove_all(const path& p, error_code& ec)\n     }\n     // Directory is empty now, will remove it below.\n     break;\n+#ifndef __AVR__\n   case ENOENT:\n     // Our work here is done.\n     ec.clear();\n@@ -1347,6 +1350,7 @@ fs::remove_all(const path& p, error_code& ec)\n   case ELOOP:\n     // Not a directory, will remove below.\n     break;\n+#endif\n   default:\n     // An error occurred.\n     return -1;"}, {"sha": "02c75be09d2060c180b2c5414f3d77cd2999005b", "filename": "libstdc++-v3/src/filesystem/ops-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2e163d12f64a5e68f9e0381751ed9d5d6d3617/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h?ref=2d2e163d12f64a5e68f9e0381751ed9d5d6d3617", "patch": "@@ -167,7 +167,7 @@ namespace __gnu_posix\n     return ret;\n   }\n   using char_type = wchar_t;\n-#elif defined _GLIBCXX_HAVE_UNISTD_H\n+#elif defined _GLIBCXX_HAVE_UNISTD_H && ! defined __AVR__\n   using ::open;\n   using ::close;\n # ifdef _GLIBCXX_HAVE_SYS_STAT_H"}]}