{"sha": "d34ac4dd68764ca5f56fddce1ac884b74ec5836e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0YWM0ZGQ2ODc2NGNhNWY1NmZkZGNlMWFjODg0Yjc0ZWM1ODM2ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-04-08T21:02:17Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-04-08T21:02:17Z"}, "message": "c99-stdint-1.c: Fix cut-and-paste mistakes in test.\n\n\t* gcc.dg/c99-stdint-1.c: Fix cut-and-paste mistakes in test.\n\t* gcc.dg/c99-stdint-7.c, gcc.dg/c99-stdint-8.c: New tests.\n\nFrom-SVN: r145778", "tree": {"sha": "ea814d89500608cc54501ffddf7653d68dfefedb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea814d89500608cc54501ffddf7653d68dfefedb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d34ac4dd68764ca5f56fddce1ac884b74ec5836e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34ac4dd68764ca5f56fddce1ac884b74ec5836e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34ac4dd68764ca5f56fddce1ac884b74ec5836e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34ac4dd68764ca5f56fddce1ac884b74ec5836e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc02c2b1b826199e7a682a7e27914dbb20fe035a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc02c2b1b826199e7a682a7e27914dbb20fe035a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc02c2b1b826199e7a682a7e27914dbb20fe035a"}], "stats": {"total": 243, "additions": 237, "deletions": 6}, "files": [{"sha": "7808aa5724a1e05741d27729628c2906f8478813", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34ac4dd68764ca5f56fddce1ac884b74ec5836e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34ac4dd68764ca5f56fddce1ac884b74ec5836e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d34ac4dd68764ca5f56fddce1ac884b74ec5836e", "patch": "@@ -1,3 +1,8 @@\n+2009-04-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c99-stdint-1.c: Fix cut-and-paste mistakes in test.\n+\t* gcc.dg/c99-stdint-7.c, gcc.dg/c99-stdint-8.c: New tests.\n+\n 2009-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/debug/dwarf2/static-data-member1.C: New test."}, {"sha": "109aed4d28479455d8136587abba77e6292c3050", "filename": "gcc/testsuite/gcc.dg/c99-stdint-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34ac4dd68764ca5f56fddce1ac884b74ec5836e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34ac4dd68764ca5f56fddce1ac884b74ec5836e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-1.c?ref=d34ac4dd68764ca5f56fddce1ac884b74ec5836e", "patch": "@@ -89,19 +89,19 @@ test_exact (void)\n   CHECK_WIDTH_EQUALS(int16_t, 16);\n   CHECK_SIGNED_LIMITS(int16_t, INT16_MIN, INT16_MAX);\n #else\n-  CHECK_WIDTH_AT_LEAST(int_least8_t, 17);\n+  CHECK_WIDTH_AT_LEAST(int_least16_t, 17);\n #endif\n #ifdef INT32_MIN\n   CHECK_WIDTH_EQUALS(int32_t, 32);\n   CHECK_SIGNED_LIMITS(int32_t, INT32_MIN, INT32_MAX);\n #else\n-  CHECK_WIDTH_AT_LEAST(int_least8_t, 33);\n+  CHECK_WIDTH_AT_LEAST(int_least32_t, 33);\n #endif\n #ifdef INT64_MIN\n   CHECK_WIDTH_EQUALS(int64_t, 64);\n   CHECK_SIGNED_LIMITS(int64_t, INT64_MIN, INT64_MAX);\n #else\n-  CHECK_WIDTH_AT_LEAST(int_least8_t, 65);\n+  CHECK_WIDTH_AT_LEAST(int_least64_t, 65);\n #endif\n #ifdef UINT8_MAX\n   CHECK_WIDTH_EQUALS(uint8_t, 8);\n@@ -113,19 +113,19 @@ test_exact (void)\n   CHECK_WIDTH_EQUALS(uint16_t, 16);\n   CHECK_UNSIGNED_LIMITS(uint16_t, UINT16_MAX);\n #else\n-  CHECK_WIDTH_AT_LEAST(uint_least8_t, 17);\n+  CHECK_WIDTH_AT_LEAST(uint_least16_t, 17);\n #endif\n #ifdef UINT32_MAX\n   CHECK_WIDTH_EQUALS(uint32_t, 32);\n   CHECK_UNSIGNED_LIMITS(uint32_t, UINT32_MAX);\n #else\n-  CHECK_WIDTH_AT_LEAST(uint_least8_t, 33);\n+  CHECK_WIDTH_AT_LEAST(uint_least32_t, 33);\n #endif\n #ifdef UINT64_MAX\n   CHECK_WIDTH_EQUALS(uint64_t, 64);\n   CHECK_UNSIGNED_LIMITS(uint64_t, UINT64_MAX);\n #else\n-  CHECK_WIDTH_AT_LEAST(uint_least8_t, 65);\n+  CHECK_WIDTH_AT_LEAST(uint_least64_t, 65);\n #endif\n }\n "}, {"sha": "777e895b506795c8a36749b66530943743a0828b", "filename": "gcc/testsuite/gcc.dg/c99-stdint-7.c", "status": "added", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34ac4dd68764ca5f56fddce1ac884b74ec5836e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34ac4dd68764ca5f56fddce1ac884b74ec5836e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-7.c?ref=d34ac4dd68764ca5f56fddce1ac884b74ec5836e", "patch": "@@ -0,0 +1,217 @@\n+/* Verify that the limits defined in <stdint.h> are those GCC expects\n+   internally to be defined and that they are usable in #if\n+   conditions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -fhosted\" } */\n+\n+#include <stdint.h>\n+\n+/* Exact-width and pointer-holding types are optional.  */\n+#if defined(INT8_MIN) != defined(__INT8_TYPE__)\n+#error \"Unexpected INT8_MIN definedness\"\n+#endif\n+#if defined(INT8_MAX) != defined(__INT8_TYPE__)\n+#error \"Unexpected INT8_MAX definedness\"\n+#endif\n+#if defined(UINT8_MAX) != defined(__UINT8_TYPE__)\n+#error \"Unexpected UINT8_MAX definedness\"\n+#endif\n+#if defined(INT16_MIN) != defined(__INT16_TYPE__)\n+#error \"Unexpected INT16_MIN definedness\"\n+#endif\n+#if defined(INT16_MAX) != defined(__INT16_TYPE__)\n+#error \"Unexpected INT16_MAX definedness\"\n+#endif\n+#if defined(UINT16_MAX) != defined(__UINT16_TYPE__)\n+#error \"Unexpected UINT16_MAX definedness\"\n+#endif\n+#if defined(INT32_MIN) != defined(__INT32_TYPE__)\n+#error \"Unexpected INT32_MIN definedness\"\n+#endif\n+#if defined(INT32_MAX) != defined(__INT32_TYPE__)\n+#error \"Unexpected INT32_MAX definedness\"\n+#endif\n+#if defined(UINT32_MAX) != defined(__UINT32_TYPE__)\n+#error \"Unexpected UINT32_MAX definedness\"\n+#endif\n+#if defined(INT64_MIN) != defined(__INT64_TYPE__)\n+#error \"Unexpected INT64_MIN definedness\"\n+#endif\n+#if defined(INT64_MAX) != defined(__INT64_TYPE__)\n+#error \"Unexpected INT64_MAX definedness\"\n+#endif\n+#if defined(UINT64_MAX) != defined(__UINT64_TYPE__)\n+#error \"Unexpected UINT64_MAX definedness\"\n+#endif\n+#if defined(INTPTR_MIN) != defined(__INTPTR_TYPE__)\n+#error \"Unexpected INTPTR_MIN definedness\"\n+#endif\n+#if defined(INTPTR_MAX) != defined(__INTPTR_TYPE__)\n+#error \"Unexpected INTPTR_MAX definedness\"\n+#endif\n+#if defined(UINTPTR_MAX) != defined(__UINTPTR_TYPE__)\n+#error \"Unexpected UINTPTR_MAX definedness\"\n+#endif\n+\n+#if defined(INT8_MIN) && INT8_MIN != -__INT8_MAX__-1\n+#error \"INT8_MIN not usable in #if or wrong value\"\n+#endif\n+#if defined(INT8_MAX) && INT8_MAX != __INT8_MAX__\n+#error \"INT8_MAX not usable in #if or wrong value\"\n+#endif\n+#if defined(UINT8_MAX) && UINT8_MAX != __UINT8_MAX__\n+#error \"UINT8_MAX not usable in #if or wrong value\"\n+#endif\n+#if defined(INT16_MIN) && INT16_MIN != -__INT16_MAX__-1\n+#error \"INT16_MIN not usable in #if or wrong value\"\n+#endif\n+#if defined(INT16_MAX) && INT16_MAX != __INT16_MAX__\n+#error \"INT16_MAX not usable in #if or wrong value\"\n+#endif\n+#if defined(UINT16_MAX) && UINT16_MAX != __UINT16_MAX__\n+#error \"UINT16_MAX not usable in #if or wrong value\"\n+#endif\n+#if defined(INT32_MIN) && INT32_MIN != -__INT32_MAX__-1\n+#error \"INT32_MIN not usable in #if or wrong value\"\n+#endif\n+#if defined(INT32_MAX) && INT32_MAX != __INT32_MAX__\n+#error \"INT32_MAX not usable in #if or wrong value\"\n+#endif\n+#if defined(UINT32_MAX) && UINT32_MAX != __UINT32_MAX__\n+#error \"UINT32_MAX not usable in #if or wrong value\"\n+#endif\n+#if defined(INT64_MIN) && INT64_MIN != -__INT64_MAX__-1\n+#error \"INT64_MIN not usable in #if or wrong value\"\n+#endif\n+#if defined(INT64_MAX) && INT64_MAX != __INT64_MAX__\n+#error \"INT64_MAX not usable in #if or wrong value\"\n+#endif\n+#if defined(UINT64_MAX) && UINT64_MAX != __UINT64_MAX__\n+#error \"UINT64_MAX not usable in #if or wrong value\"\n+#endif\n+\n+#if INT_LEAST8_MIN != -__INT_LEAST8_MAX__-1\n+#error \"INT_LEAST8_MIN not usable in #if or wrong value\"\n+#endif\n+#if INT_LEAST8_MAX != __INT_LEAST8_MAX__\n+#error \"INT_LEAST8_MAX not usable in #if or wrong value\"\n+#endif\n+#if UINT_LEAST8_MAX != __UINT_LEAST8_MAX__\n+#error \"UINT_LEAST8_MAX not usable in #if or wrong value\"\n+#endif\n+#if INT_LEAST16_MIN != -__INT_LEAST16_MAX__-1\n+#error \"INT_LEAST16_MIN not usable in #if or wrong value\"\n+#endif\n+#if INT_LEAST16_MAX != __INT_LEAST16_MAX__\n+#error \"INT_LEAST16_MAX not usable in #if or wrong value\"\n+#endif\n+#if UINT_LEAST16_MAX != __UINT_LEAST16_MAX__\n+#error \"UINT_LEAST16_MAX not usable in #if or wrong value\"\n+#endif\n+#if INT_LEAST32_MIN != -__INT_LEAST32_MAX__-1\n+#error \"INT_LEAST32_MIN not usable in #if or wrong value\"\n+#endif\n+#if INT_LEAST32_MAX != __INT_LEAST32_MAX__\n+#error \"INT_LEAST32_MAX not usable in #if or wrong value\"\n+#endif\n+#if UINT_LEAST32_MAX != __UINT_LEAST32_MAX__\n+#error \"UINT_LEAST32_MAX not usable in #if or wrong value\"\n+#endif\n+#if INT_LEAST64_MIN != -__INT_LEAST64_MAX__-1\n+#error \"INT_LEAST64_MIN not usable in #if or wrong value\"\n+#endif\n+#if INT_LEAST64_MAX != __INT_LEAST64_MAX__\n+#error \"INT_LEAST64_MAX not usable in #if or wrong value\"\n+#endif\n+#if UINT_LEAST64_MAX != __UINT_LEAST64_MAX__\n+#error \"UINT_LEAST64_MAX not usable in #if or wrong value\"\n+#endif\n+\n+#if INT_FAST8_MIN != -__INT_FAST8_MAX__-1\n+#error \"INT_FAST8_MIN not usable in #if or wrong value\"\n+#endif\n+#if INT_FAST8_MAX != __INT_FAST8_MAX__\n+#error \"INT_FAST8_MAX not usable in #if or wrong value\"\n+#endif\n+#if UINT_FAST8_MAX != __UINT_FAST8_MAX__\n+#error \"UINT_FAST8_MAX not usable in #if or wrong value\"\n+#endif\n+#if INT_FAST16_MIN != -__INT_FAST16_MAX__-1\n+#error \"INT_FAST16_MIN not usable in #if or wrong value\"\n+#endif\n+#if INT_FAST16_MAX != __INT_FAST16_MAX__\n+#error \"INT_FAST16_MAX not usable in #if or wrong value\"\n+#endif\n+#if UINT_FAST16_MAX != __UINT_FAST16_MAX__\n+#error \"UINT_FAST16_MAX not usable in #if or wrong value\"\n+#endif\n+#if INT_FAST32_MIN != -__INT_FAST32_MAX__-1\n+#error \"INT_FAST32_MIN not usable in #if or wrong value\"\n+#endif\n+#if INT_FAST32_MAX != __INT_FAST32_MAX__\n+#error \"INT_FAST32_MAX not usable in #if or wrong value\"\n+#endif\n+#if UINT_FAST32_MAX != __UINT_FAST32_MAX__\n+#error \"UINT_FAST32_MAX not usable in #if or wrong value\"\n+#endif\n+#if INT_FAST64_MIN != -__INT_FAST64_MAX__-1\n+#error \"INT_FAST64_MIN not usable in #if or wrong value\"\n+#endif\n+#if INT_FAST64_MAX != __INT_FAST64_MAX__\n+#error \"INT_FAST64_MAX not usable in #if or wrong value\"\n+#endif\n+#if UINT_FAST64_MAX != __UINT_FAST64_MAX__\n+#error \"UINT_FAST64_MAX not usable in #if or wrong value\"\n+#endif\n+\n+#if defined(INTPTR_MIN) && INTPTR_MIN != -__INTPTR_MAX__-1\n+#error \"INTPTR_MIN not usable in #if or wrong value\"\n+#endif\n+#if defined(INTPTR_MAX) && INTPTR_MAX != __INTPTR_MAX__\n+#error \"INTPTR_MAX not usable in #if or wrong value\"\n+#endif\n+#if defined(UINTPTR_MAX) && UINTPTR_MAX != __UINTPTR_MAX__\n+#error \"UINTPTR_MAX not usable in #if or wrong value\"\n+#endif\n+\n+#if INTMAX_MIN != -__INTMAX_MAX__-1\n+#error \"INTMAX_MIN not usable in #if or wrong value\"\n+#endif\n+#if INTMAX_MAX != __INTMAX_MAX__\n+#error \"INTMAX_MAX not usable in #if or wrong value\"\n+#endif\n+#if UINTMAX_MAX != __UINTMAX_MAX__\n+#error \"UINTMAX_MAX not usable in #if or wrong value\"\n+#endif\n+\n+#if PTRDIFF_MIN != -__PTRDIFF_MAX__-1\n+#error \"PTRDIFF_MIN not usable in #if or wrong value\"\n+#endif\n+#if PTRDIFF_MAX != __PTRDIFF_MAX__\n+#error \"PTRDIFF_MAX not usable in #if or wrong value\"\n+#endif\n+\n+#if SIG_ATOMIC_MIN != __SIG_ATOMIC_MIN__\n+#error \"SIG_ATOMIC_MIN not usable in #if or wrong value\"\n+#endif\n+#if SIG_ATOMIC_MAX != __SIG_ATOMIC_MAX__\n+#error \"SIG_ATOMIC_MAX not usable in #if or wrong value\"\n+#endif\n+\n+#if SIZE_MAX != __SIZE_MAX__\n+#error \"SIZE_MAX not usable in #if or wrong value\"\n+#endif\n+\n+#if WCHAR_MIN != __WCHAR_MIN__\n+#error \"WCHAR_MIN not usable in #if or wrong value\"\n+#endif\n+#if WCHAR_MAX != __WCHAR_MAX__\n+#error \"WCHAR_MAX not usable in #if or wrong value\"\n+#endif\n+\n+#if WINT_MIN != __WINT_MIN__\n+#error \"WINT_MIN not usable in #if or wrong value\"\n+#endif\n+#if WINT_MAX != __WINT_MAX__\n+#error \"WINT_MAX not usable in #if or wrong value\"\n+#endif"}, {"sha": "c64b3feb4f692c8eeceb4e01f365badfadf99cf3", "filename": "gcc/testsuite/gcc.dg/c99-stdint-8.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34ac4dd68764ca5f56fddce1ac884b74ec5836e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34ac4dd68764ca5f56fddce1ac884b74ec5836e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-8.c?ref=d34ac4dd68764ca5f56fddce1ac884b74ec5836e", "patch": "@@ -0,0 +1,9 @@\n+/* Verify that the limits defined in <stdint.h> are those GCC expects\n+   internally to be defined and that they are usable in #if\n+   conditions.  Freestanding version.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -ffreestanding\" } */\n+\n+/* The test is that there are no diagnostics, so just include the\n+   hosted version.  */\n+#include \"c99-stdint-7.c\""}]}