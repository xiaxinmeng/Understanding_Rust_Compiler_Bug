{"sha": "177cce463d56f7a0e1900c59b80307b43b1483d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc3Y2NlNDYzZDU2ZjdhMGUxOTAwYzU5YjgwMzA3YjQzYjE0ODNkOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-08-19T05:34:31Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-08-19T05:34:31Z"}, "message": "c-opts.c (sanitize_cpp_opts): Make warn_long_long be set according to warn_c90_c99_compat.\n\ngcc/c-family/\n\t* c-opts.c (sanitize_cpp_opts): Make warn_long_long be set according\n\tto warn_c90_c99_compat.\n\t* c.opt (Wc90-c99-compat, Wdeclaration-after-statement): Initialize\n\tto -1.\ngcc/c/\n\t* c-decl.c (warn_variable_length_array): Pass OPT_Wvla unconditionally\n\tto pedwarn_c90.\n\t* c-errors.c: Include \"opts.h\".\n\t(pedwarn_c90): Rewrite to handle -Wno-c90-c99-compat better.\n\t* c-parser.c (disable_extension_diagnostics): Handle negative value\n\tof warn_c90_c99_compat, too.\n\t(restore_extension_diagnostics): Likewise.\n\t(c_parser_compound_statement_nostart): Pass\n\tOPT_Wdeclaration_after_statement unconditionally to pedwarn_c90.\ngcc/testsuite/\n\t* gcc.dg/Wc90-c99-compat-4.c: Remove all dg-warnings.\n\t* gcc.dg/Wc90-c99-compat-5.c: Remove all dg-errors.\n\t* gcc.dg/Wc90-c99-compat-7.c: New test.\n\t* gcc.dg/Wc90-c99-compat-8.c: New test.\n\t* gcc.dg/Wdeclaration-after-statement-4.c: New test.\nlibcpp/\n\t* charset.c (_cpp_valid_ucn): Warn only if -Wc90-c99-compat.\n\t* lex.c (_cpp_lex_direct): Likewise.\n\t* macro.c (replace_args): Likewise.\n\t(parse_params): Likewise.\n\t* include/cpplib.h (cpp_options): Change cpp_warn_c90_c99_compat\n\tto char.\n\nFrom-SVN: r214131", "tree": {"sha": "edb34abe06088024ce40380f1b5573f991d29584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edb34abe06088024ce40380f1b5573f991d29584"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/177cce463d56f7a0e1900c59b80307b43b1483d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177cce463d56f7a0e1900c59b80307b43b1483d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177cce463d56f7a0e1900c59b80307b43b1483d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177cce463d56f7a0e1900c59b80307b43b1483d8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "010ea2883c070de96be645d43874dfd9b4b0a85b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/010ea2883c070de96be645d43874dfd9b4b0a85b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/010ea2883c070de96be645d43874dfd9b4b0a85b"}], "stats": {"total": 296, "additions": 219, "deletions": 77}, "files": [{"sha": "3fa60ab1db942ad19afb320a7280e1fdb5431de0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -1,3 +1,10 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-opts.c (sanitize_cpp_opts): Make warn_long_long be set according\n+\tto warn_c90_c99_compat.\n+\t* c.opt (Wc90-c99-compat, Wdeclaration-after-statement): Initialize\n+\tto -1.\n+\n 2014-08-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \t    Steven Bosscher  <steven@gcc.gnu.org>\n "}, {"sha": "b0cad20b4f99ac12958702421c7e74445b5a0b77", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -1299,10 +1299,13 @@ sanitize_cpp_opts (void)\n \n   /* Wlong-long is disabled by default. It is enabled by:\n       [-Wpedantic | -Wtraditional] -std=[gnu|c]++98 ; or\n-      [-Wpedantic | -Wtraditional] -std=non-c99 .\n+      [-Wpedantic | -Wtraditional] -std=non-c99 ; or\n+      -Wc90-c99-compat, if specified.\n \n       Either -Wlong-long or -Wno-long-long override any other settings.  */\n-  if (warn_long_long == -1)\n+  if (warn_long_long == -1 && warn_c90_c99_compat != -1)\n+    warn_long_long = warn_c90_c99_compat;\n+  else if (warn_long_long == -1)\n     warn_long_long = ((pedantic || warn_traditional)\n \t\t      && (c_dialect_cxx () ? cxx_dialect == cxx98 : !flag_isoc99));\n   cpp_opts->cpp_warn_long_long = warn_long_long;"}, {"sha": "087eabd1d9db5ae10ed5071581e71a61d08c24fb", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -292,7 +292,7 @@ C ObjC C++ ObjC++ Warning\n Warn when a built-in preprocessor macro is undefined or redefined\n \n Wc90-c99-compat\n-C ObjC Var(warn_c90_c99_compat) Warning\n+C ObjC Var(warn_c90_c99_compat) Init(-1) Warning\n Warn about features not present in ISO C90, but present in ISO C99\n \n Wc++-compat\n@@ -344,7 +344,7 @@ C++ ObjC++ Var(warn_ctor_dtor_privacy) Warning\n Warn when all constructors and destructors are private\n \n Wdeclaration-after-statement\n-C ObjC Var(warn_declaration_after_statement) Warning\n+C ObjC Var(warn_declaration_after_statement) Init(-1) Warning\n Warn when a declaration is found after a statement\n \n Wdelete-incomplete"}, {"sha": "4f67dec10a241bd8d7090bb334b6ab96800dd668", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -1,3 +1,15 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-decl.c (warn_variable_length_array): Pass OPT_Wvla unconditionally\n+\tto pedwarn_c90.\n+\t* c-errors.c: Include \"opts.h\".\n+\t(pedwarn_c90): Rewrite to handle -Wno-c90-c99-compat better.\n+\t* c-parser.c (disable_extension_diagnostics): Handle negative value\n+\tof warn_c90_c99_compat, too.\n+\t(restore_extension_diagnostics): Likewise.\n+\t(c_parser_compound_statement_nostart): Pass\n+\tOPT_Wdeclaration_after_statement unconditionally to pedwarn_c90.\n+\n 2014-08-12  Marek Polacek  <polacek@redhat.com>\n \n \t* c-parser.c (c_parser_postfix_expression) <case RID_FUNCTION_NAME>:"}, {"sha": "138b0142b9b10287f86526380f3357074828f9a7", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -4920,27 +4920,23 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n static void\n warn_variable_length_array (tree name, tree size)\n {\n-  int const_size = TREE_CONSTANT (size);\n-  enum opt_code opt = (warn_vla == -1 && !warn_c90_c99_compat)\n-\t\t      ? OPT_Wpedantic : OPT_Wvla;\n-\n-  if (const_size)\n+  if (TREE_CONSTANT (size))\n     {\n       if (name)\n-\tpedwarn_c90 (input_location, opt,\n+\tpedwarn_c90 (input_location, OPT_Wvla,\n \t\t     \"ISO C90 forbids array %qE whose size \"\n \t\t     \"can%'t be evaluated\", name);\n       else\n-\tpedwarn_c90 (input_location, opt, \"ISO C90 forbids array \"\n+\tpedwarn_c90 (input_location, OPT_Wvla, \"ISO C90 forbids array \"\n \t\t     \"whose size can%'t be evaluated\");\n     }\n   else\n     {\n       if (name)\n-\tpedwarn_c90 (input_location, opt,\n+\tpedwarn_c90 (input_location, OPT_Wvla,\n \t\t     \"ISO C90 forbids variable length array %qE\", name);\n       else\n-\tpedwarn_c90 (input_location, opt, \"ISO C90 forbids variable \"\n+\tpedwarn_c90 (input_location, OPT_Wvla, \"ISO C90 forbids variable \"\n \t\t     \"length array\");\n     }\n }"}, {"sha": "89393b9b44d648e5e954b8c4b33a4e584c97c7fc", "filename": "gcc/c/c-errors.c", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-errors.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"flags.h\"\n #include \"diagnostic.h\"\n+#include \"opts.h\"\n \n /* Issue an ISO C99 pedantic warning MSGID.  */\n \n@@ -56,26 +57,44 @@ pedwarn_c90 (location_t location, int opt, const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n-  bool warned = false;\n \n   va_start (ap, gmsgid);\n-  if (pedantic && !flag_isoc99)\n+  /* Warnings such as -Wvla are the most specific ones.  */\n+  if (opt != OPT_Wpedantic)\n     {\n-      diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_PEDWARN);\n-      diagnostic.option_index = opt;\n-      warned = report_diagnostic (&diagnostic);\n+      int opt_var = *(int *) option_flag_var (opt, &global_options);\n+      if (opt_var == 0)\n+        goto out;\n+      else if (opt_var > 0)\n+\t{\n+\t  diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n+\t\t\t       (pedantic && !flag_isoc99)\n+\t\t\t       ? DK_PEDWARN : DK_WARNING);\n+\t  diagnostic.option_index = opt;\n+\t  report_diagnostic (&diagnostic);\n+\t  goto out;\n+\t}\n     }\n-  else if (opt != OPT_Wpedantic)\n+  /* Maybe we want to issue the C90/C99 compat warning, which is more\n+     specific than -pedantic.  */\n+  if (warn_c90_c99_compat > 0)\n     {\n-      diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_WARNING);\n-      diagnostic.option_index = opt;\n-      warned = report_diagnostic (&diagnostic);\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n+\t\t\t   (pedantic && !flag_isoc99)\n+\t\t\t   ? DK_PEDWARN : DK_WARNING);\n+      diagnostic.option_index = OPT_Wc90_c99_compat;\n+      report_diagnostic (&diagnostic);\n     }\n-  if (warn_c90_c99_compat && !warned)\n+  /* -Wno-c90-c99-compat suppresses the pedwarns.  */\n+  else if (warn_c90_c99_compat == 0)\n+    ;\n+  /* For -pedantic outside C99, issue a pedwarn.  */\n+  else if (pedantic && !flag_isoc99)\n     {\n-      diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_WARNING);\n-      diagnostic.option_index = OPT_Wc90_c99_compat;\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_PEDWARN);\n+      diagnostic.option_index = opt;\n       report_diagnostic (&diagnostic);\n     }\n+out:\n   va_end (ap);\n }"}, {"sha": "6afe3ebf88c23b51e8b048b21add2559a3bab57e", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -1073,7 +1073,10 @@ disable_extension_diagnostics (void)\n \t     | (warn_long_long << 4)\n \t     | (warn_cxx_compat << 5)\n \t     | (warn_overlength_strings << 6)\n-\t     | (warn_c90_c99_compat << 7));\n+\t     /* warn_c90_c99_compat has three states: -1/0/1, so we must\n+\t\tplay tricks to properly restore it.  */\n+\t     | ((warn_c90_c99_compat == 1) << 7)\n+\t     | ((warn_c90_c99_compat == -1) << 8));\n   cpp_opts->cpp_pedantic = pedantic = 0;\n   warn_pointer_arith = 0;\n   cpp_opts->cpp_warn_traditional = warn_traditional = 0;\n@@ -1098,7 +1101,8 @@ restore_extension_diagnostics (int flags)\n   cpp_opts->cpp_warn_long_long = warn_long_long = (flags >> 4) & 1;\n   warn_cxx_compat = (flags >> 5) & 1;\n   warn_overlength_strings = (flags >> 6) & 1;\n-  warn_c90_c99_compat = (flags >> 7) & 1;\n+  /* See above for why is this needed.  */\n+  warn_c90_c99_compat = (flags >> 7) & 1 ? 1 : ((flags >> 8) & 1 ? -1 : 0);\n }\n \n /* Possibly kinds of declarator to parse.  */\n@@ -4570,9 +4574,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t  c_parser_declaration_or_fndef (parser, true, true, true, true,\n \t\t\t\t\t true, NULL, vNULL);\n \t  if (last_stmt)\n-\t    pedwarn_c90 (loc, (pedantic && !flag_isoc99)\n-\t\t\t       ? OPT_Wpedantic\n-\t\t\t       : OPT_Wdeclaration_after_statement,\n+\t    pedwarn_c90 (loc, OPT_Wdeclaration_after_statement,\n \t\t\t \"ISO C90 forbids mixed declarations and code\");\n \t  last_stmt = false;\n \t}\n@@ -4600,9 +4602,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t\t disable this diagnostic.  */\n \t      restore_extension_diagnostics (ext);\n \t      if (last_stmt)\n-\t\tpedwarn_c90 (loc, (pedantic && !flag_isoc99)\n-\t\t\t\t  ? OPT_Wpedantic\n-\t\t\t\t  : OPT_Wdeclaration_after_statement,\n+\t\tpedwarn_c90 (loc, OPT_Wdeclaration_after_statement,\n \t\t\t     \"ISO C90 forbids mixed declarations and code\");\n \t      last_stmt = false;\n \t    }"}, {"sha": "94f9ef0e20a52ebfba707ba946773fd740baa164", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -1,3 +1,11 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* gcc.dg/Wc90-c99-compat-4.c: Remove all dg-warnings.\n+\t* gcc.dg/Wc90-c99-compat-5.c: Remove all dg-errors.\n+\t* gcc.dg/Wc90-c99-compat-7.c: New test.\n+\t* gcc.dg/Wc90-c99-compat-8.c: New test.\n+\t* gcc.dg/Wdeclaration-after-statement-4.c: New test.\n+\n 2014-08-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \t    Steven Bosscher  <steven@gcc.gnu.org>\n "}, {"sha": "97ee84c1dc129c88005233f45a7cb14af6edae2b", "filename": "gcc/testsuite/gcc.dg/Wc90-c99-compat-4.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-4.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -1,56 +1,54 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu90 -Wpedantic -Wno-c90-c99-compat\" } */\n \n-_Bool b; /* { dg-warning \"ISO C90 does not support boolean types\" } */\n-_Complex double c = __builtin_complex (0.0, 0.0); /* { dg-warning \"ISO C90 does not support complex types\" } */\n-long long l; /* { dg-warning \"ISO C90 does not support .long long.\" } */\n-struct A { int i; char a[]; }; /* { dg-warning \"ISO C90 does not support flexible array members\" } */\n-struct { long int b: 2; } s; /* { dg-warning \"type of bit-field .b. is a GCC extension\" } */\n-const const int i; /* { dg-warning \"duplicate .const.\" } */\n-volatile volatile int v; /* { dg-warning \"duplicate .volatile.\" } */\n+_Bool b;\n+_Complex double c = __builtin_complex (0.0, 0.0);\n+long long l;\n+struct A { int i; char a[]; };\n+struct { long int b: 2; } s;\n+const const int i;\n+volatile volatile int v;\n \n struct S { int a[2]; };\n extern struct S foo (void);\n \n-#define V(v, ...) (v, __VA_ARGS) /* { dg-warning \"anonymous variadic macros were introduced in C99\" } */\n+enum { E, };\n \n-enum { E, }; /* { dg-warning \"comma at end of enumerator list\" } */\n-\n-void fn1 (char [*]); /* { dg-warning \"ISO C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators\" } */\n+void fn1 (char [*]);\n \n void\n-fn2 (char x[static 4]) /* { dg-warning \"ISO C90 does not support .static. or type qualifiers\" } */\n+fn2 (char x[static 4])\n {\n-  int i = (int) { 1 }; /* { dg-warning \"ISO C90 forbids compound literals\" } */\n-  struct A a = { .i = 3 }; /* { dg-warning \"ISO C90 forbids specifying subobject to initialize\" } */\n+  int i = (int) { 1 };\n+  struct A a = { .i = 3 };\n }\n \n void\n fn3 (int n)\n {\n   n = 3;\n-  int i; /* { dg-warning \"ISO C90 forbids mixed declarations and code\" } */\n+  int i;\n }\n \n void\n fn4 (int n)\n {\n   n = 3;\n-  __extension__ int i; /* { dg-warning \"ISO C90 forbids mixed declarations and code\" } */\n+  __extension__ int i;\n }\n \n void\n fn5 (void)\n {\n-  (foo ()).a[0]; /* { dg-warning \"ISO C90 forbids subscripting non-lvalue array\" } */\n+  (foo ()).a[0];\n }\n \n #define F(a) a\n \n void\n fn6 (void)\n {\n-  F(); /* { dg-warning \"invoking macro F argument\" } */\n+  F();\n }\n \n-void fn7 (int n, int a[n]); /* { dg-warning \"ISO C90 forbids variable length array .a.\" } */\n+void fn7 (int n, int a[n]);"}, {"sha": "f41e960d87724c6e44605f631b80ddc3e2af6aa7", "filename": "gcc/testsuite/gcc.dg/Wc90-c99-compat-5.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-5.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -1,56 +1,54 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu90 -pedantic-errors -Wno-c90-c99-compat\" } */\n \n-_Bool b; /* { dg-error \"ISO C90 does not support boolean types\" } */\n-_Complex double c = __builtin_complex (0.0, 0.0); /* { dg-error \"ISO C90 does not support complex types\" } */\n-long long l; /* { dg-error \"ISO C90 does not support .long long.\" } */\n-struct A { int i; char a[]; }; /* { dg-error \"ISO C90 does not support flexible array members\" } */\n-struct { long int b: 2; } s; /* { dg-error \"type of bit-field .b. is a GCC extension\" } */\n-const const int i; /* { dg-error \"duplicate .const.\" } */\n-volatile volatile int v; /* { dg-error \"duplicate .volatile.\" } */\n+_Bool b;\n+_Complex double c = __builtin_complex (0.0, 0.0);\n+long long l;\n+struct A { int i; char a[]; };\n+struct { long int b: 2; } s;\n+const const int i;\n+volatile volatile int v;\n \n struct S { int a[2]; };\n extern struct S foo (void);\n \n-#define V(v, ...) (v, __VA_ARGS) /* { dg-error \"anonymous variadic macros were introduced in C99\" } */\n+enum { E, };\n \n-enum { E, }; /* { dg-error \"comma at end of enumerator list\" } */\n-\n-void fn1 (char [*]); /* { dg-error \"ISO C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators\" } */\n+void fn1 (char [*]);\n \n void\n-fn2 (char x[static 4]) /* { dg-error \"ISO C90 does not support .static. or type qualifiers\" } */\n+fn2 (char x[static 4])\n {\n-  int i = (int) { 1 }; /* { dg-error \"ISO C90 forbids compound literals\" } */\n-  struct A a = { .i = 3 }; /* { dg-error \"ISO C90 forbids specifying subobject to initialize\" } */\n+  int i = (int) { 1 };\n+  struct A a = { .i = 3 };\n }\n \n void\n fn3 (int n)\n {\n   n = 3;\n-  int i; /* { dg-error \"ISO C90 forbids mixed declarations and code\" } */\n+  int i;\n }\n \n void\n fn4 (int n)\n {\n   n = 3;\n-  __extension__ int i; /* { dg-error \"ISO C90 forbids mixed declarations and code\" } */\n+  __extension__ int i;\n }\n \n void\n fn5 (void)\n {\n-  (foo ()).a[0]; /* { dg-error \"ISO C90 forbids subscripting non-lvalue array\" } */\n+  (foo ()).a[0];\n }\n \n #define F(a) a\n \n void\n fn6 (void)\n {\n-  F(); /* { dg-error \"invoking macro F argument\" } */\n+  F();\n }\n \n-void fn7 (int n, int a[n]); /* { dg-error \"ISO C90 forbids variable length array .a.\" } */\n+void fn7 (int n, int a[n]);"}, {"sha": "fbf0b0d59c6227503772cd23239a9b5df9b22b31", "filename": "gcc/testsuite/gcc.dg/Wc90-c99-compat-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-7.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu90 -Wpedantic -Wc90-c99-compat -Wno-long-long -Wno-declaration-after-statement -Wno-vla\" } */\n+\n+long long l;\n+\n+void\n+fn3 (int n)\n+{\n+  n = 3;\n+  int i;\n+}\n+\n+void fn7 (int n, int a[n]);"}, {"sha": "5e7a5725a7444755cb0638b0341a8e3bce410a1d", "filename": "gcc/testsuite/gcc.dg/Wc90-c99-compat-8.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-8.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu90 -pedantic-errors -Wc90-c99-compat\" } */\n+\n+_Bool b; /* { dg-error \"ISO C90 does not support boolean types\" } */\n+_Complex double c = __builtin_complex (0.0, 0.0); /* { dg-error \"ISO C90 does not support complex types\" } */\n+long long l; /* { dg-error \"ISO C90 does not support .long long.\" } */\n+struct A { int i; char a[]; }; /* { dg-error \"ISO C90 does not support flexible array members\" } */\n+struct { long int b: 2; } s; /* { dg-error \"type of bit-field .b. is a GCC extension\" } */\n+const const int i; /* { dg-error \"duplicate .const.\" } */\n+volatile volatile v; /* { dg-error \"duplicate .volatile.\" } */\n+\n+struct S { int a[2]; };\n+extern struct S foo (void);\n+\n+#define V(v, ...) (v, __VA_ARGS) /* { dg-error \"anonymous variadic macros were introduced in C99\" } */\n+\n+enum { E, }; /* { dg-error \"comma at end of enumerator list\" } */\n+\n+void fn1 (char [*]); /* { dg-error \"ISO C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators\" } */\n+\n+void\n+fn2 (char x[static 4]) /* { dg-error \"ISO C90 does not support .static. or type qualifiers\" } */\n+{\n+  int i = (int) { 1 }; /* { dg-error \"ISO C90 forbids compound literals\" } */\n+  struct A a = { .i = 3 }; /* { dg-error \"ISO C90 forbids specifying subobject to initialize\" } */\n+}\n+\n+void\n+fn3 (int n)\n+{\n+  n = 3;\n+  int i; /* { dg-error \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn4 (int n)\n+{\n+  n = 3;\n+  __extension__ int i; /* { dg-error \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn5 (void)\n+{\n+  (foo ()).a[0]; /* { dg-error \"ISO C90 forbids subscripting non-lvalue array\" } */\n+}\n+\n+#define F(a) a\n+\n+void\n+fn6 (void)\n+{\n+  F(); /* { dg-error \"invoking macro F argument\" } */\n+}\n+\n+void fn7 (int n, int a[n]); /* { dg-error \"ISO C90 forbids variable length array .a.\" } */"}, {"sha": "c01d8bc6cf27020c861ded2afd54867210623757", "filename": "gcc/testsuite/gcc.dg/Wdeclaration-after-statement-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-4.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c90 -pedantic -Wno-declaration-after-statement\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  int i = 0;\n+  if (i != 0)\n+    abort ();\n+  i++;\n+  if (i != 1)\n+    abort ();\n+  int j = i;\n+  if (j != 1)\n+    abort ();\n+  struct foo { int i0; } k = { 4 };\n+  if (k.i0 != 4)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "a173909b059ed226fab3ef24bfa34fe8df3b7ec5", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -1,3 +1,12 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* charset.c (_cpp_valid_ucn): Warn only if -Wc90-c99-compat.\n+\t* lex.c (_cpp_lex_direct): Likewise.\n+\t* macro.c (replace_args): Likewise.\n+\t(parse_params): Likewise.\n+\t* include/cpplib.h (cpp_options): Change cpp_warn_c90_c99_compat\n+\tto char.\n+\n 2014-08-10 Marek Polacek  <polacek@redhat.com>\n \n \tPR c/51849"}, {"sha": "07a594d4db4bd5158d39d85cdeca0a3ea1947a81", "filename": "libcpp/charset.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -995,7 +995,7 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n   if (!CPP_OPTION (pfile, cplusplus) && !CPP_OPTION (pfile, c99))\n     cpp_error (pfile, CPP_DL_WARNING,\n \t       \"universal character names are only valid in C++ and C99\");\n-  else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat)\n+  else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat) > 0\n \t   && !CPP_OPTION (pfile, cplusplus))\n     cpp_error (pfile, CPP_DL_WARNING,\n \t       \"C99's universal character names are incompatible with C90\");"}, {"sha": "b89ba200699039bb076aa0ce7ad93ef259f76381", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -467,7 +467,7 @@ struct cpp_options\n   bool restore_pch_deps;\n \n   /* True if warn about differences between C90 and C99.  */\n-  bool cpp_warn_c90_c99_compat;\n+  char cpp_warn_c90_c99_compat;\n \n   /* Dependency generation.  */\n   struct"}, {"sha": "0713f65d8da668778a653aeca86c08a65b353e40", "filename": "libcpp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -2337,7 +2337,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t      buffer->warned_cplusplus_comments = 1;\n \t    }\n \t  /* Or if specifically desired via -Wc90-c99-compat.  */\n-\t  else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat)\n+\t  else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat) > 0\n \t\t   && ! buffer->warned_cplusplus_comments)\n \t    {\n \t      cpp_error (pfile, CPP_DL_WARNING,"}, {"sha": "a1ba1373615f540cae8ac1467db84f93b36adf66", "filename": "libcpp/macro.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177cce463d56f7a0e1900c59b80307b43b1483d8/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177cce463d56f7a0e1900c59b80307b43b1483d8/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=177cce463d56f7a0e1900c59b80307b43b1483d8", "patch": "@@ -1787,15 +1787,15 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t       \" in ISO C++98\",\n \t\t       NODE_NAME (node),\n \t\t       src->val.macro_arg.arg_no);\n-\t  else\n+\t  else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat))\n \t    cpp_error (pfile, CPP_DL_PEDWARN,\n \t\t       \"invoking macro %s argument %d: \"\n \t\t       \"empty macro arguments are undefined\"\n \t\t       \" in ISO C90\",\n \t\t       NODE_NAME (node),\n \t\t       src->val.macro_arg.arg_no);\n \t}\n-      else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat)\n+      else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat) > 0\n \t       && ! macro->syshdr\n \t       && ! cpp_in_system_header (pfile)\n \t       && ! CPP_OPTION (pfile, cplusplus))\n@@ -2858,7 +2858,7 @@ parse_params (cpp_reader *pfile, cpp_macro *macro)\n \t\t\t(pfile, CPP_W_VARIADIC_MACROS,\n \t\t\t\"anonymous variadic macros were introduced in C99\");\n \t\t}\n-\t      else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat)\n+\t      else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat) > 0\n \t\t       && ! CPP_OPTION (pfile, cplusplus))\n \t\tcpp_error (pfile, CPP_DL_WARNING,\n \t\t\t   \"anonymous variadic macros were introduced in C99\");"}]}