{"sha": "3191c1f4488d1f7563b563d7ae2a102a26f16d82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE5MWMxZjQ0ODhkMWY3NTYzYjU2M2Q3YWUyYTEwMmEyNmYxNmQ4Mg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-04-14T14:07:17Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-04-14T14:14:16Z"}, "message": "IBM Z: Fix error checking for immediate builtin operands\n\nThis fixes the error checking for two of the vector builtins which\naccept irregular (e.g. non-contigiuous) ranges of values.\n\ngcc/ChangeLog:\n\n\t* config/s390/s390-builtins.def (O_M5, O_M12, ...): Add new macros\n\tfor mask operand types.\n\t(s390_vec_permi_s64, s390_vec_permi_b64, s390_vec_permi_u64)\n\t(s390_vec_permi_dbl, s390_vpdi): Use the M5 type for the immediate\n\toperand.\n\t(s390_vec_msum_u128, s390_vmslg): Use the M12 type for the\n\timmediate operand.\n\t* config/s390/s390.c (s390_const_operand_ok): Check the new\n\toperand types and generate a list of valid values.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/zvector/imm-range-error-1.c: New test.\n\t* gcc.target/s390/zvector/vec_msum_u128-1.c: New test.", "tree": {"sha": "b036944acf535a80c79c4b6034736feaafe47fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b036944acf535a80c79c4b6034736feaafe47fc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3191c1f4488d1f7563b563d7ae2a102a26f16d82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3191c1f4488d1f7563b563d7ae2a102a26f16d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3191c1f4488d1f7563b563d7ae2a102a26f16d82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3191c1f4488d1f7563b563d7ae2a102a26f16d82/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527bc0181d3ea36f11dcaa8aea7704466bd0f01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/527bc0181d3ea36f11dcaa8aea7704466bd0f01b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/527bc0181d3ea36f11dcaa8aea7704466bd0f01b"}], "stats": {"total": 191, "additions": 156, "deletions": 35}, "files": [{"sha": "f77ab750d223c41fef14dbe760d5234bf5a95d1c", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 56, "deletions": 29, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3191c1f4488d1f7563b563d7ae2a102a26f16d82/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3191c1f4488d1f7563b563d7ae2a102a26f16d82/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=3191c1f4488d1f7563b563d7ae2a102a26f16d82", "patch": "@@ -29,6 +29,9 @@\n #undef O_U16\n #undef O_U32\n \n+#undef O_M5\n+#undef O_M12\n+\n #undef O_S2\n #undef O_S3\n #undef O_S4\n@@ -37,6 +40,7 @@\n #undef O_S12\n #undef O_S16\n #undef O_S32\n+\n #undef O_ELEM\n #undef O_LIT\n \n@@ -85,6 +89,16 @@\n #undef O3_U32\n #undef O4_U32\n \n+#undef O1_M5\n+#undef O2_M5\n+#undef O3_M5\n+#undef O4_M5\n+\n+#undef O1_M12\n+#undef O2_M12\n+#undef O3_M12\n+#undef O4_M12\n+\n #undef O1_S2\n #undef O2_S2\n #undef O3_S2\n@@ -140,31 +154,34 @@\n #undef O_UIMM_P\n #undef O_SIMM_P\n \n-#define O_U1   1 /* unsigned  1 bit literal */\n-#define O_U2   2 /* unsigned  2 bit literal */\n-#define O_U3   3 /* unsigned  3 bit literal */\n-#define O_U4   4 /* unsigned  4 bit literal */\n-#define O_U5   5 /* unsigned  5 bit literal */\n-#define O_U8   6 /* unsigned  8 bit literal */\n-#define O_U12  7 /* unsigned 16 bit literal */\n-#define O_U16  8 /* unsigned 16 bit literal */\n-#define O_U32  9 /* unsigned 32 bit literal */\n-\n-#define O_S2  10 /* signed  2 bit literal */\n-#define O_S3  11 /* signed  3 bit literal */\n-#define O_S4  12 /* signed  4 bit literal */\n-#define O_S5  13 /* signed  5 bit literal */\n-#define O_S8  14 /* signed  8 bit literal */\n-#define O_S12 15 /* signed 12 bit literal */\n-#define O_S16 16 /* signed 16 bit literal */\n-#define O_S32 17 /* signed 32 bit literal */\n-\n-#define O_ELEM  18 /* Element selector requiring modulo arithmetic. */\n-#define O_LIT   19 /* Operand must be a literal fitting the target type.  */\n+#define O_U1     1 /* unsigned  1 bit literal */\n+#define O_U2     2 /* unsigned  2 bit literal */\n+#define O_U3     3 /* unsigned  3 bit literal */\n+#define O_U4     4 /* unsigned  4 bit literal */\n+#define O_U5     5 /* unsigned  5 bit literal */\n+#define O_U8     6 /* unsigned  8 bit literal */\n+#define O_U12    7 /* unsigned 16 bit literal */\n+#define O_U16    8 /* unsigned 16 bit literal */\n+#define O_U32    9 /* unsigned 32 bit literal */\n+\n+#define O_M5    10 /* matches bitmask of 5 */\n+#define O_M12   11 /* matches bitmask of 12 */\n+\n+#define O_S2    12 /* signed  2 bit literal */\n+#define O_S3    13 /* signed  3 bit literal */\n+#define O_S4    14 /* signed  4 bit literal */\n+#define O_S5    15 /* signed  5 bit literal */\n+#define O_S8    16 /* signed  8 bit literal */\n+#define O_S12   17 /* signed 12 bit literal */\n+#define O_S16   18 /* signed 16 bit literal */\n+#define O_S32   19 /* signed 32 bit literal */\n+\n+#define O_ELEM  20 /* Element selector requiring modulo arithmetic. */\n+#define O_LIT   21 /* Operand must be a literal fitting the target type.  */\n \n #define O_SHIFT 5\n \n-#define O_UIMM_P(X) ((X) >= O_U1 && (X) <= O_U32)\n+#define O_UIMM_P(X) ((X) >= O_U1 && (X) <= O_M12)\n #define O_SIMM_P(X) ((X) >= O_S2 && (X) <= O_S32)\n #define O_IMM_P(X) ((X) == O_LIT || ((X) >= O_U1 && (X) <= O_S32))\n \n@@ -213,6 +230,16 @@\n #define O3_U32 (O_U32 << (2 * O_SHIFT))\n #define O4_U32 (O_U32 << (3 * O_SHIFT))\n \n+#define O1_M5 O_M5\n+#define O2_M5 (O_M5 << O_SHIFT)\n+#define O3_M5 (O_M5 << (2 * O_SHIFT))\n+#define O4_M5 (O_M5 << (3 * O_SHIFT))\n+\n+#define O1_M12 O_M12\n+#define O2_M12 (O_M12 << O_SHIFT)\n+#define O3_M12 (O_M12 << (2 * O_SHIFT))\n+#define O4_M12 (O_M12 << (3 * O_SHIFT))\n+\n \n #define O1_S2 O_S2\n #define O2_S2 (O_S2 << O_SHIFT)\n@@ -644,12 +671,12 @@ OB_DEF_VAR (s390_vec_perm_dbl,          s390_vperm,         0,\n B_DEF      (s390_vperm,                 vec_permv16qi,      0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n \n OB_DEF     (s390_vec_permi,             s390_vec_permi_s64, s390_vec_permi_dbl, B_VX,               BT_FN_OV4SI_OV4SI_OV4SI_INT)\n-OB_DEF_VAR (s390_vec_permi_s64,         s390_vpdi,          0,                  O3_U2,              BT_OV_V2DI_V2DI_V2DI_INT)\n-OB_DEF_VAR (s390_vec_permi_b64,         s390_vpdi,          0,                  O3_U2,              BT_OV_BV2DI_BV2DI_BV2DI_INT)\n-OB_DEF_VAR (s390_vec_permi_u64,         s390_vpdi,          0,                  O3_U2,              BT_OV_UV2DI_UV2DI_UV2DI_INT)\n-OB_DEF_VAR (s390_vec_permi_dbl,         s390_vpdi,          0,                  O3_U2,              BT_OV_V2DF_V2DF_V2DF_INT)\n+OB_DEF_VAR (s390_vec_permi_s64,         s390_vpdi,          0,                  O3_M5,              BT_OV_V2DI_V2DI_V2DI_INT)\n+OB_DEF_VAR (s390_vec_permi_b64,         s390_vpdi,          0,                  O3_M5,              BT_OV_BV2DI_BV2DI_BV2DI_INT)\n+OB_DEF_VAR (s390_vec_permi_u64,         s390_vpdi,          0,                  O3_M5,              BT_OV_UV2DI_UV2DI_UV2DI_INT)\n+OB_DEF_VAR (s390_vec_permi_dbl,         s390_vpdi,          0,                  O3_M5,              BT_OV_V2DF_V2DF_V2DF_INT)\n \n-B_DEF      (s390_vpdi,                  vec_permiv2di,      0,                  B_VX,               O3_U2,              BT_FN_UV2DI_UV2DI_UV2DI_INT)\n+B_DEF      (s390_vpdi,                  vec_permiv2di,      0,                  B_VX,               O3_M5,              BT_FN_UV2DI_UV2DI_UV2DI_INT)\n \n OB_DEF     (s390_vec_splat,             s390_vec_splat2_s8, s390_vec_splat2_dbl,B_VX,               BT_FN_OV4SI_OV4SI_UCHAR)\n OB_DEF_VAR (s390_vec_splat2_s8,         s390_vrepb,         0,                  O2_U4,              BT_OV_V16QI_V16QI_UCHAR)\n@@ -2287,8 +2314,8 @@ OB_DEF_VAR (s390_vec_test_mask_dbl,     s390_vtm,           0,\n \n B_DEF      (s390_vtm,                   vec_test_mask_intv16qi,0,               B_VX,               0,                  BT_FN_INT_UV16QI_UV16QI)\n \n-B_DEF      (s390_vec_msum_u128,         vec_msumv2di,       0,                  B_VXE,              O4_U2,              BT_FN_UV16QI_UV2DI_UV2DI_UV16QI_INT)\n-B_DEF      (s390_vmslg,                 vmslg,              0,                  B_VXE,              O4_U4,              BT_FN_INT128_UV2DI_UV2DI_INT128_INT)\n+B_DEF      (s390_vec_msum_u128,         vec_msumv2di,       0,                  B_VXE,              O4_M12,             BT_FN_UV16QI_UV2DI_UV2DI_UV16QI_INT)\n+B_DEF      (s390_vmslg,                 vmslg,              0,                  B_VXE,              O4_M12,             BT_FN_INT128_UV2DI_UV2DI_INT128_INT)\n \n OB_DEF     (s390_vec_eqv,               s390_vec_eqv_b8,    s390_vec_eqv_dbl_c, B_VXE,              BT_FN_OV4SI_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_eqv_b8,            s390_vnx,           0,                  0,                  BT_OV_BV16QI_BV16QI_BV16QI)"}, {"sha": "a9c945c5ee9c37561dbc365c827d06e58d819592", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3191c1f4488d1f7563b563d7ae2a102a26f16d82/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3191c1f4488d1f7563b563d7ae2a102a26f16d82/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3191c1f4488d1f7563b563d7ae2a102a26f16d82", "patch": "@@ -734,15 +734,38 @@ s390_const_operand_ok (tree arg, int argnum, int op_flags, tree decl)\n {\n   if (O_UIMM_P (op_flags))\n     {\n-      int bitwidths[] = { 1, 2, 3, 4, 5, 8, 12, 16, 32 };\n-      int bitwidth = bitwidths[op_flags - O_U1];\n+      unsigned HOST_WIDE_INT bitwidths[] = { 1, 2, 3, 4, 5, 8, 12, 16, 32, 4,  4 };\n+      unsigned HOST_WIDE_INT bitmasks[]  = { 0, 0, 0, 0, 0, 0,  0,  0,  0, 5, 12 };\n+      unsigned HOST_WIDE_INT bitwidth = bitwidths[op_flags - O_U1];\n+      unsigned HOST_WIDE_INT bitmask = bitmasks[op_flags - O_U1];\n \n       if (!tree_fits_uhwi_p (arg)\n-\t  || tree_to_uhwi (arg) > (HOST_WIDE_INT_1U << bitwidth) - 1)\n+\t  || tree_to_uhwi (arg) > (HOST_WIDE_INT_1U << bitwidth) - 1\n+\t  || (bitmask && tree_to_uhwi (arg) & ~bitmask))\n \t{\n-\t  error (\"constant argument %d for builtin %qF is out of range \"\n-\t\t \"(0..%wu)\", argnum, decl,\n-\t\t (HOST_WIDE_INT_1U << bitwidth) - 1);\n+\t  if (bitmask)\n+\t    {\n+\t      gcc_assert (bitmask < 16);\n+\t      char values[120] = \"\";\n+\n+\t      for (unsigned HOST_WIDE_INT i = 0; i <= bitmask; i++)\n+\t\t{\n+\t\t  char buf[5];\n+\t\t  if (i & ~bitmask)\n+\t\t    continue;\n+\t\t  int ret = snprintf (buf, 5, HOST_WIDE_INT_PRINT_UNSIGNED, i & bitmask);\n+\t\t  gcc_assert (ret < 5);\n+\t\t  strcat (values, buf);\n+\t\t  if (i < bitmask)\n+\t\t    strcat (values, \", \");\n+\t\t}\n+\t      error (\"constant argument %d for builtin %qF is invalid (%s)\",\n+\t\t     argnum, decl, values);\n+\t    }\n+\t  else\n+\t    error (\"constant argument %d for builtin %qF is out of range (0..%wu)\",\n+\t\t   argnum, decl, (HOST_WIDE_INT_1U << bitwidth) - 1);\n+\n \t  return false;\n \t}\n     }"}, {"sha": "1fe68f57e4f7b0288028c45ea9547bed5e50f648", "filename": "gcc/testsuite/gcc.target/s390/zvector/imm-range-error-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3191c1f4488d1f7563b563d7ae2a102a26f16d82/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fimm-range-error-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3191c1f4488d1f7563b563d7ae2a102a26f16d82/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fimm-range-error-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fimm-range-error-1.c?ref=3191c1f4488d1f7563b563d7ae2a102a26f16d82", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z14 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+__vector unsigned char q;\n+__vector unsigned short int h;\n+__vector unsigned int s;\n+__vector unsigned long long d;\n+\n+int\n+main ()\n+{\n+  vec_msum_u128 (d, d, q, 5); /* { dg-error \"constant argument 4 for builtin '__builtin_s390_vec_msum_u128' is invalid \\\\(0, 4, 8, 12\\\\)\" } */\n+\n+  /* Using the resolved low-level builtins here makes the errors to be\n+     triggered from s390_expand_builtin.  Otherwise they would come\n+     from the parser already preventing other errors from showing\n+     up.  */\n+  __builtin_s390_vrepb (q, 17); /* { dg-error \"constant argument 2 for builtin '__builtin_s390_vrepb' is out of range \\\\(0..15\\\\)\" } */\n+  __builtin_s390_vreph (h,  8); /* { dg-error \"constant argument 2 for builtin '__builtin_s390_vreph' is out of range \\\\(0..7\\\\)\" } */\n+  __builtin_s390_vrepf (s,  4); /* { dg-error \"constant argument 2 for builtin '__builtin_s390_vrepf' is out of range \\\\(0..3\\\\)\" } */\n+  __builtin_s390_vrepg (d,  2); /* { dg-error \"constant argument 2 for builtin '__builtin_s390_vrepg' is out of range \\\\(0..1\\\\)\" } */\n+\n+  __builtin_s390_vpdi (d, d, 2); /* { dg-error \"constant argument 3 for builtin '__builtin_s390_vpdi' is invalid \\\\(0, 1, 4, 5\\\\)\" } */\n+}"}, {"sha": "2f5fbcacafea56334ac4f48566256178d526fe98", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec_msum_u128-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3191c1f4488d1f7563b563d7ae2a102a26f16d82/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_msum_u128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3191c1f4488d1f7563b563d7ae2a102a26f16d82/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_msum_u128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_msum_u128-1.c?ref=3191c1f4488d1f7563b563d7ae2a102a26f16d82", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target s390_vxe } */\n+/* { dg-options \"-O3 -mzarch -march=z14 -mzvector --save-temps\" } */\n+\n+#include <vecintrin.h>\n+\n+typedef vector unsigned char uv16qi;\n+typedef vector unsigned long long uv2di;\n+\n+uv2di a = (uv2di){ 12,  42 };\n+uv2di b = (uv2di){ 54, 120 };\n+uv2di c = (uv2di){  0, 200 };\n+\n+int\n+main ()\n+{\n+  uv2di result;\n+\n+  result = (uv2di)vec_msum_u128 (a, b, (uv16qi)c, 0);\n+\n+  if (result[1] != a[0] * b[0] + a[1] * b[1] + c[1])\n+    __builtin_abort();\n+\n+  result = (uv2di)vec_msum_u128 (a, b, (uv16qi)c, 4);\n+\n+  if (result[1] != a[0] * b[0] + a[1] * b[1] * 2 + c[1])\n+    __builtin_abort();\n+\n+  result = (uv2di)vec_msum_u128 (a, b, (uv16qi)c, 8);\n+\n+  if (result[1] != a[0] * b[0] * 2 + a[1] * b[1] + c[1])\n+    __builtin_abort();\n+\n+  result = (uv2di)vec_msum_u128 (a, b, (uv16qi)c, 12);\n+\n+  if (result[1] != a[0] * b[0] * 2 + a[1] * b[1] * 2 + c[1])\n+    __builtin_abort();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmslg\\t.*0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmslg\\t.*4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmslg\\t.*8\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmslg\\t.*12\" 1 } } */"}]}