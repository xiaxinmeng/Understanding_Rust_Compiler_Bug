{"sha": "3cce094dd9c9770f0dc751485d2f779fdb69b4db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NjZTA5NGRkOWM5NzcwZjBkYzc1MTQ4NWQyZjc3OWZkYjY5YjRkYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-03-07T20:39:10Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-03-07T20:39:10Z"}, "message": "rtl.h (rtunion_def): Constify member `rtstr'.\n\n\t* rtl.h (rtunion_def): Constify member `rtstr'.\n\t(emit_line_note_after, emit_line_note, emit_line_note_force,\n\temit_note, decode_asm_operands): Constify.\n\n\t* cse.c (canon_hash): Likewise.\n\n\t* dbxout.c (dbxout_block): Likewise.\n\n\t* diagnostic.c (file_and_line_for_asm, v_error_for_asm,\n\tv_warning_for_asm): Likewise.\n\n\t* dwarfout.c (function_start_label): Likewise.\n\n\t* emit-rtl.c (emit_line_note_after, emit_line_note, emit_note,\n\temit_line_note_force): Likewise.\n\n\t* final.c (last_filename, asm_insn_count, final_scan_insn,\n\toutput_source_line): Likewise.\n\n\t* function.h (struct emit_status): Likewise.\n\n\t* gcse.c (hash_expr_1): Likewise.\n\n\t* genattr.c (gen_attr, main): Likewise.\n\n\t* genattrtab.c (struct function_unit, current_alternative_string,\n\twrite_attr_valueq, n_comma_elts, next_comma_elt, attr_eq,\n\tattr_numeral, check_attr_test, check_attr_value,\n\tconvert_set_attr_alternative, convert_set_attr,\n\tcompute_alternative_mask, simplify_by_exploding, gen_attr,\n\tgen_unit): Likewise.\n\n\t* genflags.c (gen_insn): Likewise.\n\n\t* gengenrtl.c (type_from_format): Likewise.\n\n\t* genopinit.c (gen_insn): Likewise.\n\n\t* genoutput.c (n_occurrences, process_template, process_template):\n\tLikewise.\n\n\t* ggc-page.c (ggc_set_mark, ggc_mark_if_gcable, ggc_get_size):\n\tLikewise.\n\n\t* ggc-simple.c (ggc_set_mark, ggc_mark_if_gcable, ggc_get_size):\n\tLikewise.\n\n\t* ggc.h (ggc_mark_string, ggc_mark, ggc_mark_if_gcable,\n\tggc_set_mark, ggc_get_size): Likewise.\n\n\t* objc/objc-act.c (build_module_descriptor, finish_objc): Likewise.\n\n\t* optabs.c (init_one_libfunc): Likewise.\n\n\t* output.h (assemble_start_function): Likewise.\n\n\t* recog.c (decode_asm_operands): Likewise.\n\n\t* toplev.c (rest_of_compilation): Likewise.\n\n\t* tree.h (emit_line_note_after, emit_line_note,\n\temit_line_note_force): Likewise.\n\n\t* varasm.c (asm_output_bss, asm_output_aligned_bss,\n\tasm_emit_uninitialised, assemble_start_function,\n\tassemble_variable, const_hash, compare_constant_1,\n\tfind_pool_constant, mark_constant_pool, assemble_alias): Likewise.\n\n\t* xcoffout.h (DBX_FINISH_SYMBOL): Likewise.\n\n\t* alpha/alpha.md (call_vms, call_value_vms): Likewise.\n\n\t* arm/aof.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* arm/aout.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* arm/arm-protos.h (output_ascii_pseudo_op, arm_dllexport_name_p,\n\tarm_dllimport_name_p): Likewise.\n\n\t* arm/arm.c (arm_encode_call_attribute, output_ascii_pseudo_op):\n\tLikewise.\n\n\t* arm/arm.h (ASM_OUTPUT_MI_THUNK): Likewise.\n\n\t* arm/elf.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* arm/pe.c (arm_dllexport_name_p, arm_dllimport_name_p,\n\tarm_mark_dllexport, arm_mark_dllimport,\n\tarm_pe_encode_section_info): Likewise.\n\n\t* arm/telf.h (ASM_OUTPUT_DEF_FROM_DECLS,\n\tASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* arm/thumb.c (thumb_function_prologue): Likewise.\n\n\t* arm/thumb.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* avr/avr.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* clipper/clix.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* fx80/fx80.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* i386/cygwin.h (ASM_OUTPUT_SECTION_NAME): Likewise.\n\n\t* i386/freebsd.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* i386/i386-interix.h (ASM_OUTPUT_LIMITED_STRING,\n\tASM_OUTPUT_ASCII, ASM_OUTPUT_SECTION_NAME): Likewise.\n\n\t* i386/i386-protos.h (asm_output_function_prefix): Likewise.\n\n\t* i386/i386.c (asm_output_function_prefix): Likewise.\n\n\t* i386/i386elf.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* i386/osfrose.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* i386/ptx4-i.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* i386/sco5.h (ASM_FINISH_DECLARE_OBJECT,\n\tASM_OUTPUT_LIMITED_STRING, ASM_OUTPUT_ASCII,\n\tASM_OUTPUT_SECTION_NAME): Likewise.\n\n\t* i386/sysv4.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* i860/paragon.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* i860/sysv3.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* m32r/m32r.c (m32r_encode_section_info): Likewise.\n\n\t* mcore-elf.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* mcore/mcore.c (mcore_encode_section_info): Likewise.\n\n\t* mips/elf.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* mips/elf64.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* mips/iris6.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* mips/mips.h (ASM_OUTPUT_IDENT): Likewise.\n\n\t* mips/mips.md (movdi, movsi): Likewise.\n\n\t* mips/netbsd.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* netbsd.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* openbsd.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n\n\t* ptx4.h (ASM_FINISH_DECLARE_OBJECT, ASM_OUTPUT_LIMITED_STRING,\n\tASM_OUTPUT_ASCII): Likewise.\n\n\t* rs6000/rs6000.c (rs6000_allocate_stack_space, output_epilog,\n\toutput_mi_thunk, output_toc): Likewise.\n\n\t* rs6000/rs6000.md (movsi): Likewise.\n\n\t* rs6000/sysv4.h (ASM_OUTPUT_INT, ASM_OUTPUT_SECTION_NAME): Likewise.\n\n\t* tahoe/harris.h (ASM_OUTPUT_ASCII): Likewise.\n\n\t* v850/v850.c (print_operand, print_operand_address,\n\tv850_encode_data_area): Likewise.\n\nch:\n\t* grant.c (globalize_decl): Constify a char*.\n\ncp:\n\t* decl2.c (finish_objects): Constify a char*.\n\n\t* method.c (emit_thunk): Likewise.\n\nFrom-SVN: r32388", "tree": {"sha": "d738066e7317a3ed0f28d2b04d3d9247165ea2a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d738066e7317a3ed0f28d2b04d3d9247165ea2a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cce094dd9c9770f0dc751485d2f779fdb69b4db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cce094dd9c9770f0dc751485d2f779fdb69b4db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cce094dd9c9770f0dc751485d2f779fdb69b4db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cce094dd9c9770f0dc751485d2f779fdb69b4db/comments", "author": null, "committer": null, "parents": [{"sha": "2ba5f7745469a715f89382287ef9d40acabd4e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba5f7745469a715f89382287ef9d40acabd4e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba5f7745469a715f89382287ef9d40acabd4e9c"}], "stats": {"total": 589, "additions": 393, "deletions": 196}, "files": [{"sha": "675e24ae34563a26f897555da2dfa8bc65038d9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -1,3 +1,172 @@\n+2000-03-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* rtl.h (rtunion_def): Constify member `rtstr'.\n+\t(emit_line_note_after, emit_line_note, emit_line_note_force,\n+\temit_note, decode_asm_operands): Constify.\n+\t\n+\t* cse.c (canon_hash): Likewise.\n+\n+\t* dbxout.c (dbxout_block): Likewise.\n+\n+\t* diagnostic.c (file_and_line_for_asm, v_error_for_asm,\n+\tv_warning_for_asm): Likewise.\n+\n+\t* dwarfout.c (function_start_label): Likewise.\n+\n+\t* emit-rtl.c (emit_line_note_after, emit_line_note, emit_note,\n+\temit_line_note_force): Likewise.\n+\n+\t* final.c (last_filename, asm_insn_count, final_scan_insn,\n+\toutput_source_line): Likewise.\n+\n+\t* function.h (struct emit_status): Likewise.\n+\n+\t* gcse.c (hash_expr_1): Likewise.\n+\n+\t* genattr.c (gen_attr, main): Likewise.\n+\n+\t* genattrtab.c (struct function_unit, current_alternative_string,\n+\twrite_attr_valueq, n_comma_elts, next_comma_elt, attr_eq,\n+\tattr_numeral, check_attr_test, check_attr_value,\n+\tconvert_set_attr_alternative, convert_set_attr,\n+\tcompute_alternative_mask, simplify_by_exploding, gen_attr,\n+\tgen_unit): Likewise.\n+\n+\t* genflags.c (gen_insn): Likewise.\n+\n+\t* gengenrtl.c (type_from_format): Likewise.\n+\n+\t* genopinit.c (gen_insn): Likewise.\n+\n+\t* genoutput.c (n_occurrences, process_template, process_template):\n+\tLikewise.\n+\n+\t* ggc-page.c (ggc_set_mark, ggc_mark_if_gcable, ggc_get_size):\n+\tLikewise.\n+\n+\t* ggc-simple.c (ggc_set_mark, ggc_mark_if_gcable, ggc_get_size):\n+\tLikewise.\n+\n+\t* ggc.h (ggc_mark_string, ggc_mark, ggc_mark_if_gcable,\n+\tggc_set_mark, ggc_get_size): Likewise.\n+\n+\t* objc/objc-act.c (build_module_descriptor, finish_objc): Likewise.\n+\n+\t* optabs.c (init_one_libfunc): Likewise.\n+\n+\t* output.h (assemble_start_function): Likewise.\n+\n+\t* recog.c (decode_asm_operands): Likewise.\n+\n+\t* toplev.c (rest_of_compilation): Likewise.\n+\n+\t* tree.h (emit_line_note_after, emit_line_note,\n+\temit_line_note_force): Likewise.\n+\n+\t* varasm.c (asm_output_bss, asm_output_aligned_bss,\n+\tasm_emit_uninitialised, assemble_start_function,\n+\tassemble_variable, const_hash, compare_constant_1,\n+\tfind_pool_constant, mark_constant_pool, assemble_alias): Likewise.\n+\n+\t* xcoffout.h (DBX_FINISH_SYMBOL): Likewise.\n+\n+\t* alpha/alpha.md (call_vms, call_value_vms): Likewise.\n+\n+\t* arm/aof.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* arm/aout.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* arm/arm-protos.h (output_ascii_pseudo_op, arm_dllexport_name_p,\n+\tarm_dllimport_name_p): Likewise.\n+\n+\t* arm/arm.c (arm_encode_call_attribute, output_ascii_pseudo_op):\n+\tLikewise.\n+\n+\t* arm/arm.h (ASM_OUTPUT_MI_THUNK): Likewise.\n+\n+\t* arm/elf.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* arm/pe.c (arm_dllexport_name_p, arm_dllimport_name_p,\n+\tarm_mark_dllexport, arm_mark_dllimport,\n+\tarm_pe_encode_section_info): Likewise.\n+\n+\t* arm/telf.h (ASM_OUTPUT_DEF_FROM_DECLS,\n+\tASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* arm/thumb.c (thumb_function_prologue): Likewise.\n+\n+\t* arm/thumb.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* avr/avr.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* clipper/clix.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* fx80/fx80.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* i386/cygwin.h (ASM_OUTPUT_SECTION_NAME): Likewise.\n+\n+\t* i386/freebsd.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* i386/i386-interix.h (ASM_OUTPUT_LIMITED_STRING,\n+\tASM_OUTPUT_ASCII, ASM_OUTPUT_SECTION_NAME): Likewise.\n+\n+\t* i386/i386-protos.h (asm_output_function_prefix): Likewise.\n+\n+\t* i386/i386.c (asm_output_function_prefix): Likewise.\n+\n+\t* i386/i386elf.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* i386/osfrose.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* i386/ptx4-i.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* i386/sco5.h (ASM_FINISH_DECLARE_OBJECT,\n+\tASM_OUTPUT_LIMITED_STRING, ASM_OUTPUT_ASCII,\n+\tASM_OUTPUT_SECTION_NAME): Likewise.\n+\n+\t* i386/sysv4.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* i860/paragon.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* i860/sysv3.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* m32r/m32r.c (m32r_encode_section_info): Likewise.\n+\n+\t* mcore-elf.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* mcore/mcore.c (mcore_encode_section_info): Likewise.\n+\n+\t* mips/elf.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* mips/elf64.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* mips/iris6.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* mips/mips.h (ASM_OUTPUT_IDENT): Likewise.\n+\n+\t* mips/mips.md (movdi, movsi): Likewise.\n+\n+\t* mips/netbsd.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* netbsd.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* openbsd.h (ASM_FINISH_DECLARE_OBJECT): Likewise.\n+\n+\t* ptx4.h (ASM_FINISH_DECLARE_OBJECT, ASM_OUTPUT_LIMITED_STRING,\n+\tASM_OUTPUT_ASCII): Likewise.\n+\n+\t* rs6000/rs6000.c (rs6000_allocate_stack_space, output_epilog,\n+\toutput_mi_thunk, output_toc): Likewise.\n+\n+\t* rs6000/rs6000.md (movsi): Likewise.\n+\n+\t* rs6000/sysv4.h (ASM_OUTPUT_INT, ASM_OUTPUT_SECTION_NAME): Likewise.\n+\n+\t* tahoe/harris.h (ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* v850/v850.c (print_operand, print_operand_address,\n+\tv850_encode_data_area): Likewise.\n+\n 2000-03-07  Clinton Popetz  <cpopetz@cygnus.com>\n \t\n \t* config/mips/mips.md (zero_extendsidi2): Always force operand"}, {"sha": "3a4e22f66e3ab3efd852f00f7f7775786329babd", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -1,3 +1,7 @@\n+2000-03-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* grant.c (globalize_decl): Constify a char*.\n+\n Mon Mar  6 17:52:48 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* actions.c (chill_convert_for_assignment): INDEX is unsigned"}, {"sha": "ddd8f9364433c835e4786543e54117d1bb9dcd0d", "filename": "gcc/ch/grant.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fch%2Fgrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fch%2Fgrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgrant.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -2546,7 +2546,7 @@ globalize_decl (decl)\n     {\n       extern\tFILE\t*asm_out_file;\n       extern\tchar\t*first_global_object_name;\n-      char\t\t*name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+      const char\t*name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n \t\n       if (!first_global_object_name)\n \tfirst_global_object_name = name + (name[0] == '*');"}, {"sha": "ed4abe069a3c73e5eff211f9f20ae8d15d0a2586", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -3766,7 +3766,8 @@\n   if (GET_CODE (operands[0]) == SYMBOL_REF)\n     {\n       extern char *savealloc ();\n-      char *linksym, *symbol = XSTR (operands[0], 0);\n+      const char *symbol = XSTR (operands[0], 0);\n+      char *linksym;\n       rtx linkage;\n \n       if (*symbol == '*')\n@@ -3874,7 +3875,8 @@\n   if (GET_CODE (operands[1]) == SYMBOL_REF)\n     {\n       extern char *savealloc ();\n-      char *linksym, *symbol = XSTR (operands[1], 0);\n+      const char *symbol = XSTR (operands[1], 0);\n+      char *linksym;\n       rtx linkage;\n \n       if (*symbol == '*')"}, {"sha": "a25a311b83221870e4766a2bc0d916a3112ca74c", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -272,7 +272,7 @@ do {\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ASCII(STREAM,PTR,LEN)\t\t\\\n {\t\t\t\t\t\t\t\\\n   int i;\t\t\t\t\t\t\\\n-  char *ptr = (PTR);\t\t\t\t\t\\\n+  const char *ptr = (PTR);\t\t\t\t\\\n   fprintf ((STREAM), \"\\tDCB\");\t\t\t\t\\\n   for (i = 0; i < (LEN); i++)\t\t\t\t\\\n     fprintf ((STREAM), \" &%02x%s\", \t\t\t\\"}, {"sha": "850a681e0ffa4dd37264f403f04afe69d5a64acc", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -252,7 +252,7 @@ Boston, MA 02111-1307, USA.  */\n   fprintf (STREAM, \"\\t.byte\\t%d\\n\", VALUE)\n \n #define ASM_OUTPUT_ASCII(STREAM, PTR, LEN)  \\\n-  output_ascii_pseudo_op (STREAM, (unsigned char *)(PTR), LEN)\n+  output_ascii_pseudo_op (STREAM, (const unsigned char *)(PTR), LEN)\n \n /* Output a gap.  In fact we fill it with nulls.  */\n #define ASM_OUTPUT_SKIP(STREAM, NBYTES) \t\\"}, {"sha": "141400354c0cb01b323dfeeb7c149bfb4f6e96ec", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -30,7 +30,7 @@ extern int    arm_regno_class \t\t\tPARAMS ((int));\n extern int    arm_volatile_func\t\t\tPARAMS ((void));\n extern int    const_ok_for_arm\t\t\tPARAMS ((HOST_WIDE_INT));\n extern void   output_arm_prologue\t\tPARAMS ((FILE *, int));\n-extern void   output_ascii_pseudo_op\t\tPARAMS ((FILE *, unsigned char *, int));\n+extern void   output_ascii_pseudo_op\t\tPARAMS ((FILE *, const unsigned char *, int));\n extern void   output_func_epilogue\t\tPARAMS ((int));\n extern void   output_func_prologue\t\tPARAMS ((FILE *, int));\n extern int    use_return_insn\t\t\tPARAMS ((int));\n@@ -44,8 +44,8 @@ extern void   aof_dump_pic_table\t\tPARAMS ((FILE *));\n extern char * aof_text_section\t\t\tPARAMS ((void));\n #endif /* AOF_ASSEMBLER */\n /* Defined in pe.c */\n-extern int    arm_dllexport_name_p \t\tPARAMS ((char *));\n-extern int    arm_dllimport_name_p \t\tPARAMS ((char *));\n+extern int    arm_dllexport_name_p \t\tPARAMS ((const char *));\n+extern int    arm_dllimport_name_p \t\tPARAMS ((const char *));\n \n #define Mmode enum machine_mode\n "}, {"sha": "beabef7ca453ed1651ad765b70b078ac117724d8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -1638,7 +1638,7 @@ arm_encode_call_attribute (decl, flag)\n   tree decl;\n   char flag;\n {\n-  char * str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+  const char * str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n   int    len = strlen (str);\n   char * newstr;\n \n@@ -5544,7 +5544,7 @@ int_log2 (power)\n void\n output_ascii_pseudo_op (stream, p, len)\n      FILE * stream;\n-     unsigned char * p;\n+     const unsigned char * p;\n      int len;\n {\n   int i;"}, {"sha": "9ad97c2f04596f8b92d0dbccee0cb6a1a76b02d4", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -2240,7 +2240,7 @@ extern struct rtx_def * arm_compare_op1;\n   do\t\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\t\\\n       int mi_delta = (DELTA);\t\t\t\t\t\t\t\\\n-      char * mi_op = mi_delta < 0 ? \"sub\" : \"add\";\t\t\t\t\\\n+      const char *mi_op = mi_delta < 0 ? \"sub\" : \"add\";\t\t\t\t\\\n       int shift = 0;\t\t\t\t\t\t\t\t\\\n       int this_regno = (aggregate_value_p (TREE_TYPE (TREE_TYPE (FUNCTION)))\t\\\n \t\t        ? 1 : 0);\t\t\t\t\t\t\\"}, {"sha": "893350f04a1603d7a31de599f7b866231d47915e", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -106,7 +106,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      char * name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\\\n+      const char * name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\\\n       if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t\\\n           && ! AT_END && TOP_LEVEL\t\t\t\t\t\\\n \t  && DECL_INITIAL (DECL) == error_mark_node\t\t\t\\"}, {"sha": "bb01fd24d18d421801e8c3f9bd3e74dd2dcd0709", "filename": "gcc/config/arm/pe.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Fpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Fpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -237,7 +237,7 @@ arm_dllimport_p (decl)\n \n int\n arm_dllexport_name_p (symbol)\n-     char * symbol;\n+     const char * symbol;\n {\n   return symbol[0] == ARM_PE_FLAG_CHAR && symbol[1] == 'e' && symbol[2] == '.';\n }\n@@ -246,7 +246,7 @@ arm_dllexport_name_p (symbol)\n \n int\n arm_dllimport_name_p (symbol)\n-     char * symbol;\n+     const char * symbol;\n {\n   return symbol[0] == ARM_PE_FLAG_CHAR && symbol[1] == 'i' && symbol[2] == '.';\n }\n@@ -258,7 +258,7 @@ void\n arm_mark_dllexport (decl)\n      tree decl;\n {\n-  char * oldname;\n+  const char * oldname;\n   char * newname;\n   rtx rtlname;\n   tree idp;\n@@ -296,7 +296,7 @@ void\n arm_mark_dllimport (decl)\n      tree decl;\n {\n-  char * oldname;\n+  const char * oldname;\n   char * newname;\n   tree idp;\n   rtx rtlname, newrtl;\n@@ -395,7 +395,7 @@ arm_pe_encode_section_info (decl)\n \t   && GET_CODE (XEXP (XEXP (DECL_RTL (decl), 0), 0)) == SYMBOL_REF\n \t   && arm_dllimport_name_p (XSTR (XEXP (XEXP (DECL_RTL (decl), 0), 0), 0)))\n     {\n-      char *oldname = XSTR (XEXP (XEXP (DECL_RTL (decl), 0), 0), 0);\n+      const char *oldname = XSTR (XEXP (XEXP (DECL_RTL (decl), 0), 0), 0);\n       tree idp = get_identifier (oldname + 9);\n       rtx newrtl = gen_rtx (SYMBOL_REF, Pmode, IDENTIFIER_POINTER (idp));\n "}, {"sha": "e1a5cb1be66e32ce04c23f15ba52662f042df6ef", "filename": "gcc/config/arm/telf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Ftelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Ftelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftelf.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -175,8 +175,8 @@ extern int arm_structure_size_boundary;\n #define ASM_OUTPUT_DEF_FROM_DECLS(FILE,DECL1,DECL2)\t\t\\\n   do\t\t\t\t\t\t   \t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      char * LABEL1 = XSTR (XEXP (DECL_RTL (decl), 0), 0);\t\\\n-      char * LABEL2 = IDENTIFIER_POINTER (DECL2);\t\t\\\n+      const char * LABEL1 = XSTR (XEXP (DECL_RTL (decl), 0), 0);\\\n+      const char * LABEL2 = IDENTIFIER_POINTER (DECL2);\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TREE_CODE (DECL1) == FUNCTION_DECL)\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n@@ -427,7 +427,7 @@ dtors_section ()\t\t\t\t\t\t\\\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      char * name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\\\n+      const char * name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\\\n       if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\\\n           && ! AT_END && TOP_LEVEL\t\t\t\t\\\n \t  && DECL_INITIAL (DECL) == error_mark_node\t\t\\"}, {"sha": "79de0b6ca2dd554bbf9fdec9205d6e7b4b1ce155", "filename": "gcc/config/arm/thumb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Fthumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Fthumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -1289,7 +1289,7 @@ thumb_function_prologue (f, frame_size)\n \n   if (is_called_in_ARM_mode (current_function_decl))\n     {\n-      char * name;\n+      const char * name;\n       \n       if (GET_CODE (DECL_RTL (current_function_decl)) != MEM)\n \tabort();"}, {"sha": "4837504a3cf9a5c62235e3ff64e9b5e912ed3162", "filename": "gcc/config/arm/thumb.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Fthumb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Farm%2Fthumb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -251,7 +251,7 @@ do { char dstr[30];\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ASCII(STREAM, STRING, LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   register int i, c, len = (LEN), cur_pos = 17;\t\t\t\t\\\n-  register unsigned char *string = (unsigned char *)(STRING);\t\t\\\n+  register const unsigned char *string = (const unsigned char *)(STRING); \\\n   fprintf ((STREAM), \"\\t.ascii\\t\\\"\");\t\t\t\t\t\\\n   for (i = 0; i < len; i++)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "38e214f35931bfe41ad0a4b6c702b094d2e9db1b", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -2373,7 +2373,7 @@ do {\t\t\t\t\t\t\t\t\t  \\\n \n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\"}, {"sha": "a3e04ac5d77f1a14d3518f018fc243a04dfccb38", "filename": "gcc/config/clipper/clix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fclipper%2Fclix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fclipper%2Fclix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclix.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -35,9 +35,9 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n-  unsigned char *s;\t\t\t\t\t\\\n+  const unsigned char *s;\t\t\t\t\\\n   int i;\t\t\t\t\t\t\\\n-  for (i = 0, s = (unsigned char *)(PTR); i < (LEN); s++, i++)\t\\\n+  for (i = 0, s = (const unsigned char *)(PTR); i < (LEN); s++, i++) \\\n     {\t\t\t\t\t\t\t\\\n       if ((i % 8) == 0)\t\t\t\t\t\\\n \tfputs (\"\\n\\t.byte\\t\", (FILE));\t\t\t\\"}, {"sha": "35a9211dadcc527d10b58cbf578cad4b4f858a54", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -1118,7 +1118,7 @@ do { union { float f; long l;} tem;\t\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,SIZE)               \\\n-do { int i; unsigned char *pp = (unsigned char *) (PTR);\t\\\n+do { int i; const unsigned char *pp = (const unsigned char *) (PTR); \\\n   fprintf((FILE), \"\\t.byte %d\", (unsigned int)*pp++);\t\t\\\n   for (i = 1; i < (SIZE); ++i, ++pp) {\t\t\t\t\\\n     if ((i % 8) == 0)\t\t\t\t\t\t\\"}, {"sha": "6dd386714f2638ca151cb148416c0c448ee97fda", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -390,7 +390,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       enum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n     } *sections;\t\t\t\t\t\t\t\\\n   struct section_info *s;\t\t\t\t\t\t\\\n-  char *mode;\t\t\t\t\t\t\t\t\\\n+  const char *mode;\t\t\t\t\t\t\t\\\n   enum sect_enum type;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   for (s = sections; s; s = s->next)\t\t\t\t\t\\"}, {"sha": "b83423556039a6ad702eb3e68aa29f583e4e5f0b", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -197,7 +197,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)        \\\n do {                                                                    \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);                  \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);            \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t        \\\n          && ! AT_END && TOP_LEVEL                                       \\\n          && DECL_INITIAL (DECL) == error_mark_node                      \\"}, {"sha": "8bc43f365ad23c115b9f8c2993ba33c99ee80b47", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -152,7 +152,8 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_LIMITED_STRING(FILE, STR)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register unsigned char *_limited_str = (unsigned char *) (STR);\t\\\n+      register const unsigned char *_limited_str =\t\t\t\\\n+        (const unsigned char *) (STR);\t\t\t\t\t\\\n       register unsigned ch;\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\t%s\\t\\\"\", STRING_ASM_OP);\t\t\t\\\n       for (; (ch = *_limited_str); _limited_str++)\t\t\t\\\n@@ -187,12 +188,13 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register unsigned char *_ascii_bytes = (unsigned char *) (STR);\t\\\n-      register unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n+      register const unsigned char *_ascii_bytes =\t\t\t\\\n+        (const unsigned char *) (STR);\t\t\t\t\t\\\n+      register const unsigned char *limit = _ascii_bytes + (LENGTH);\t\\\n       register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register unsigned char *p;\t\t\t\t\t\\\n+\t  register const unsigned char *p;\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fputc ('\\n', (FILE));\t\t\t\t\t\\\n@@ -524,7 +526,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       enum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n     } *sections;\t\t\t\t\t\t\t\\\n   struct section_info *s;\t\t\t\t\t\t\\\n-  char *mode;\t\t\t\t\t\t\t\t\\\n+  const char *mode;\t\t\t\t\t\t\t\\\n   enum sect_enum type;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   for (s = sections; s; s = s->next)\t\t\t\t\t\\"}, {"sha": "d489ec9a6cb0c766adeba9cba63ccb3bb4830feb", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -26,7 +26,7 @@ extern void optimization_options PARAMS ((int, int));\n \n extern int ix86_can_use_return_insn_p PARAMS ((void));\n \n-extern void asm_output_function_prefix PARAMS ((FILE *, char *));\n+extern void asm_output_function_prefix PARAMS ((FILE *, const char *));\n extern void load_pic_register PARAMS ((void));\n extern HOST_WIDE_INT ix86_initial_elimination_offset PARAMS((int, int));\n extern void ix86_expand_prologue PARAMS ((void));"}, {"sha": "b977c32cc570f51462fef1ff499b7c561abd6a59", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -1594,7 +1594,7 @@ static char *global_offset_table_name;\n void\n asm_output_function_prefix (file, name)\n      FILE *file;\n-     char *name ATTRIBUTE_UNUSED;\n+     const char *name ATTRIBUTE_UNUSED;\n {\n   rtx xops[2];\n   int pic_reg_used = flag_pic && (current_function_uses_pic_offset_table"}, {"sha": "21712da301c095e893c19e4ffa495392396188f0", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -127,12 +127,13 @@ do { long value[3];\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register unsigned char *_ascii_bytes = (unsigned char *) (STR);\t\\\n-      register unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n+      register const unsigned char *_ascii_bytes =\t\t\t\\\n+        (const unsigned char *) (STR);\t\t\t\t\t\\\n+      register const unsigned char *limit = _ascii_bytes + (LENGTH);\t\\\n       register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register unsigned char *p;\t\t\t\t\t\\\n+\t  register const unsigned char *p;\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fputc ('\\n', (FILE));\t\t\t\t\t\\"}, {"sha": "3e0dd07e7180155e19e96b89a1ba30d104d31f0c", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -666,7 +666,7 @@ while (0)\n \n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (TARGET_ELF\t\t\t\t\t\t\t \\\n \t && !flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\"}, {"sha": "a8594a2cef0d4471691c989a47bd2bb8813ccc00", "filename": "gcc/config/i386/ptx4-i.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fptx4-i.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -121,12 +121,13 @@ do { long value[3];\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register unsigned char *_ascii_bytes = (unsigned char *) (STR);\t\\\n-      register unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n+      register const unsigned char *_ascii_bytes =\t\t\t\\\n+        (const unsigned char *) (STR);\t\t\t\t\t\\\n+      register const unsigned char *limit = _ascii_bytes + (LENGTH);\t\\\n       register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register unsigned char *p;\t\t\t\t\t\\\n+\t  register const unsigned char *p;\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fputc ('\\n', (FILE));\t\t\t\t\t\\"}, {"sha": "df40cb25914c55b1421d72ba0822e4c535892fe8", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -222,7 +222,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n   if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n@@ -313,7 +313,8 @@ asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n #define ASM_OUTPUT_LIMITED_STRING(FILE, STR)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register unsigned char *_limited_str = (unsigned char *) (STR);\t\\\n+      register const unsigned char *_limited_str =\t\t\t\\\n+        (const unsigned char *) (STR);\t\t\t\t\t\\\n       register unsigned ch;\t\t\t\t\t\t\\\n       fprintf ((FILE), \"%s\\t\\\"\", STRING_ASM_OP);\t\t\t\\\n       for (; (ch = *_limited_str); _limited_str++)\t\t\t\\\n@@ -341,12 +342,13 @@ asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-      register unsigned char *_ascii_bytes = (unsigned char *) (STR);\t\\\n-      register unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n+      register const unsigned char *_ascii_bytes =\t\t\t\\\n+        (const unsigned char *) (STR);\t\t\t\t\t\\\n+      register const unsigned char *limit = _ascii_bytes + (LENGTH);\t\\\n       register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register unsigned char *p;\t\t\t\t\t\\\n+\t  register unsigned const char *p;\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fputc ('\\n', (FILE));\t\t\t\t\t\\\n@@ -468,9 +470,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n       enum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;                \\\n     } *sections;                                                        \\\n   struct section_info *s;                                               \\\n-  char *mode;                                                           \\\n+  const char *mode;                                                     \\\n   enum sect_enum type;                                                  \\\n-  char *sname = NAME ;\t\t\t\t\t\t\t\\\n+  const char *sname = NAME ;\t\t\t\t\t\t\\\n   if (strcmp(NAME, \".gcc_except_table\") == 0) sname = \".gccexc\" ;\t\\\n                                                                         \\\n   for (s = sections; s; s = s->next)                                    \\"}, {"sha": "24dccd9a866fc9294422f08d4786adf65dd7d586", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -119,12 +119,13 @@ do { long value[3];\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register unsigned char *_ascii_bytes = (unsigned char *) (STR);\t\\\n-      register unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n+      register const unsigned char *_ascii_bytes =\t\t\t\\\n+        (const unsigned char *) (STR);\t\t\t\t\t\\\n+      register const unsigned char *limit = _ascii_bytes + (LENGTH);\t\\\n       register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register unsigned char *p;\t\t\t\t\t\\\n+\t  register const unsigned char *p;\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fputc ('\\n', (FILE));\t\t\t\t\t\\"}, {"sha": "7517f4b55ca112ee1ef7f4cc20853f9e736209bc", "filename": "gcc/config/i860/paragon.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi860%2Fparagon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi860%2Fparagon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fparagon.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -122,8 +122,8 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      register unsigned char *str = (unsigned char *) (STR);\t\\\n-      register unsigned char *limit = str + (LENGTH);\t\t\\\n+      register const unsigned char *str = (const unsigned char *) (STR); \\\n+      register const unsigned char *limit = str + (LENGTH);\t\\\n       register unsigned bytes_in_chunk = 0;\t\t\t\\\n       for (; str < limit; str++)\t\t\t\t\\\n         {\t\t\t\t\t\t\t\\"}, {"sha": "81e302510cd998607522965c68e70d31f91814a1", "filename": "gcc/config/i860/sysv3.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi860%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fi860%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv3.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -104,8 +104,8 @@ extern char *current_function_original_name;\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register unsigned char *str = (unsigned char *) (STR);\t\t\\\n-      register unsigned char *limit = str + (LENGTH);\t\t\t\\\n+      register const unsigned char *str = (const unsigned char *) (STR); \\\n+      register const unsigned char *limit = str + (LENGTH);\t\t\\\n       register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n       for (; str < limit; str++)\t\t\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\"}, {"sha": "ee0ac4cc033a40a96e58aacbc846cae8fdb0255e", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -434,7 +434,7 @@ m32r_encode_section_info (decl)\n     {\n       rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n                  ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n-      char *str = XSTR (XEXP (rtl, 0), 0);\n+      const char *str = XSTR (XEXP (rtl, 0), 0);\n       int len = strlen (str);\n       char *newstr = savealloc (len + 2);\n       strcpy (newstr + 1, str);"}, {"sha": "f7c8414eeaaf632c0da8efbb99f1685c05dae92c", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -168,7 +168,7 @@ exports_section ()\t\t\t\t\t\t\\\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)         \\\n   do                                                                     \\\n     {                                                                    \\\n-      char * name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);                 \\\n+      const char * name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);           \\\n       if (!flag_inhibit_size_directive && DECL_SIZE (DECL)               \\\n           && ! AT_END && TOP_LEVEL                                       \\\n           && DECL_INITIAL (DECL) == error_mark_node                      \\"}, {"sha": "5381269f00de41a3680f1426674ea1ab618557b3", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -3423,7 +3423,7 @@ mcore_encode_section_info (decl)\n \t   && GET_CODE (XEXP (XEXP (DECL_RTL (decl), 0), 0)) == SYMBOL_REF\n \t   && mcore_dllimport_name_p (XSTR (XEXP (XEXP (DECL_RTL (decl), 0), 0), 0)))\n     {\n-      char * oldname = XSTR (XEXP (XEXP (DECL_RTL (decl), 0), 0), 0);\n+      const char * oldname = XSTR (XEXP (XEXP (DECL_RTL (decl), 0), 0), 0);\n       tree idp = get_identifier (oldname + 9);\n       rtx newrtl = gen_rtx (SYMBOL_REF, Pmode, IDENTIFIER_POINTER (idp));\n "}, {"sha": "5a723ed70cf464d87f8498044206adeb5cb30a5c", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -161,7 +161,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\"}, {"sha": "c0c706ae2c3ede62e58bc8c49aebbe7ff71ecaaf", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -142,7 +142,7 @@ do {\t\t\t\t\t\t\t\t\\\n #undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\"}, {"sha": "2b66e4ae1099d325a458e6d9af1b4dd398fd6580", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -458,7 +458,7 @@ while (0)\n \n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\"}, {"sha": "c79ad1e7e65a9f94329ec9433402910b6a540582", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -4527,7 +4527,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Output #ident as a in the read-only data section.  */\n #define ASM_OUTPUT_IDENT(FILE, STRING)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  char *p = STRING;\t\t\t\t\t\t\t\\\n+  const char *p = STRING;\t\t\t\t\t\t\\\n   int size = strlen (p) + 1;\t\t\t\t\t\t\\\n   rdata_section ();\t\t\t\t\t\t\t\\\n   assemble_string (p, size);\t\t\t\t\t\t\\"}, {"sha": "d56e6424c796d2c49bb80935c44eb24bc61811c7", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -4775,7 +4775,7 @@ move\\\\t%0,%z4\\\\n\\\\\n       && GET_CODE (operands[1]) == SYMBOL_REF\n       && SYMBOL_REF_FLAG (operands[1]))\n     {\n-      char *name = XSTR (operands[1], 0);\n+      const char *name = XSTR (operands[1], 0);\n \n       if (name[0] != '*'\n \t  || strncmp (name + 1, LOCAL_LABEL_PREFIX,\n@@ -5197,7 +5197,7 @@ move\\\\t%0,%z4\\\\n\\\\\n       && GET_CODE (operands[1]) == SYMBOL_REF\n       && SYMBOL_REF_FLAG (operands[1]))\n     {\n-      char *name = XSTR (operands[1], 0);\n+      const char *name = XSTR (operands[1], 0);\n \n       if (name[0] != '*'\n \t  || strncmp (name + 1, LOCAL_LABEL_PREFIX,"}, {"sha": "81e5eaed488efd565d6e9857aa204745bd65f280", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -166,7 +166,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\"}, {"sha": "49ff03618f286d8247e554518066230a1067a6bb", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -169,7 +169,7 @@\n #undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\"}, {"sha": "1d813ddbda645bb53f667855a7751c5c57f33656", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -251,7 +251,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\"}, {"sha": "7701f963af677c7460cd5a258652dd2f69c8d4db", "filename": "gcc/config/ptx4.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fptx4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fptx4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fptx4.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -680,7 +680,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n@@ -764,7 +764,8 @@ do {\t\t\t\t\t\t\t\t\t \\\n #define ASM_OUTPUT_LIMITED_STRING(FILE, STR)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register unsigned char *_limited_str = (unsigned char *) (STR);\t\\\n+      register const unsigned char *_limited_str =\t\t\t\\\n+        (const unsigned char *) (STR);\t\t\t\t\t\\\n       register unsigned ch;\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\t%s\\t\\\"\", STRING_ASM_OP);\t\t\t\\\n       for (; ch = *_limited_str; _limited_str++)\t\t\t\\\n@@ -799,12 +800,13 @@ do {\t\t\t\t\t\t\t\t\t \\\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register unsigned char *_ascii_bytes = (unsigned char *) (STR);\t\\\n-      register unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n+      register const unsigned char *_ascii_bytes =\t\t\t\\\n+        (const unsigned char *) (STR);\t\t\t\t\t\\\n+      register const unsigned char *limit = _ascii_bytes + (LENGTH);\t\\\n       register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register unsigned char *p;\t\t\t\t\t\\\n+\t  register const unsigned char *p;\t\t\t\t\\\n \t  if (bytes_in_chunk >= 60)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\t\\"}, {"sha": "a408d7e5921ccd4e37792380531f2129ea10c4a9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -4209,7 +4209,7 @@ rs6000_allocate_stack_space (file, size, copy_r12)\n       else if (GET_CODE (stack_limit_rtx) == SYMBOL_REF\n \t       && (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS))\n \t{\n-\t  char * l_name = XSTR (stack_limit_rtx, 0);\n+\t  const char * l_name = XSTR (stack_limit_rtx, 0);\n \t  const char * stripped_name;\n \n \t  STRIP_NAME_ENCODING (stripped_name, l_name);\n@@ -4662,7 +4662,7 @@ output_epilog (file, size)\n      different traceback table.  */\n   if (DEFAULT_ABI == ABI_AIX && ! flag_inhibit_size_directive)\n     {\n-      char *fname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n+      const char *fname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n       int fixed_parms, float_parms, parm_info;\n       int i;\n \n@@ -4895,7 +4895,7 @@ output_mi_thunk (file, thunk_fndecl, delta, function)\n {\n   const char *this_reg = reg_names[ aggregate_value_p (TREE_TYPE (TREE_TYPE (function))) ? 4 : 3 ];\n   const char *prefix;\n-  char *fname;\n+  const char *fname;\n   const char *r0\t = reg_names[0];\n   const char *sp\t = reg_names[1];\n   const char *toc\t = reg_names[2];\n@@ -5097,7 +5097,7 @@ output_toc (file, x, labelno)\n      int labelno;\n {\n   char buf[256];\n-  char *name = buf;\n+  const char *name = buf;\n   const char *real_name;\n   rtx base = x;\n   int offset = 0;"}, {"sha": "5620eb443bffe136e9308df034774a10cf25b021", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -6018,7 +6018,7 @@\n \t  && GET_CODE (operands[1]) == SYMBOL_REF\n \t  && XSTR (operands[1], 0)[0] == '.')\n \t{\n-\t  char *name = XSTR (operands[1], 0);\n+\t  const char *name = XSTR (operands[1], 0);\n \t  rtx new_ref;\n \t  while (*name == '.')\n \t    name++;"}, {"sha": "13922045e09fe12de6bef24e2d215dfaf6604b1e", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -804,7 +804,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t   && XSTR (VALUE, 0)[0] == '.'\t\t\t\t\t\\\n \t   && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_NT))\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      char *name = XSTR (VALUE, 0);\t\t\t\t\t\\\n+      const char *name = XSTR (VALUE, 0);\t\t\t\t\\\n       while (*name == '.')\t\t\t\t\t\t\\\n \tname++;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -890,7 +890,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       enum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n     } *sections;\t\t\t\t\t\t\t\\\n   struct section_info *s;\t\t\t\t\t\t\\\n-  char *mode;\t\t\t\t\t\t\t\t\\\n+  const char *mode;\t\t\t\t\t\t\t\\\n   enum sect_enum type;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   for (s = sections; s; s = s->next)\t\t\t\t\t\\"}, {"sha": "80d05e6e67f88fd72e7ea029e044c462310816c3", "filename": "gcc/config/tahoe/harris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Ftahoe%2Fharris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Ftahoe%2Fharris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Fharris.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -67,7 +67,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_OUTPUT_ASCII(FILE, PTR, SIZE)\t\t\\\n do {\t\t\t\t\t\t\t\\\n-  unsigned char *_p = (PTR);\t\t\t\t\\\n+  const unsigned char *_p = (PTR);\t\t\t\\\n   int _thissize = (SIZE);\t\t\t\t\\\n   fprintf ((FILE), \"\\t.ascii \\\"\");\t\t\t\\\n   for (i = 0; i < _thissize; i++)\t\t\t\\"}, {"sha": "c3b6cf1dc77fe55db0aa4a89e4c99022d4b6351d", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -411,7 +411,7 @@ print_operand (file, x, code)\n     case 'O':\n       if (special_symbolref_operand (x, VOIDmode))\n         {\n-          char* name;\n+          const char *name;\n \n \t  if (GET_CODE (x) == SYMBOL_REF)\n \t    name = XSTR (x, 0);\n@@ -596,9 +596,9 @@ print_operand_address (file, addr)\n     case SYMBOL_REF:\n       if (ENCODED_NAME_P (XSTR (addr, 0)))\n         {\n-          char* name = XSTR (addr, 0);\n-          char* off_name;\n-          char* reg_name;\n+          const char *name = XSTR (addr, 0);\n+          const char *off_name;\n+          const char *reg_name;\n \n           if (ZDA_NAME_P (name))\n             {\n@@ -628,9 +628,9 @@ print_operand_address (file, addr)\n     case CONST:\n       if (special_symbolref_operand (addr, VOIDmode))\n         {\n-          char* name = XSTR (XEXP (XEXP (addr, 0), 0), 0);\n-          char* off_name;\n-          char* reg_name;\n+          const char *name = XSTR (XEXP (XEXP (addr, 0), 0), 0);\n+          const char *off_name;\n+          const char *reg_name;\n \n           if (ZDA_NAME_P (name))\n             {\n@@ -2090,7 +2090,7 @@ void\n v850_encode_data_area (decl)\n      tree decl;\n {\n-  char * str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+  const char *str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n   int    len = strlen (str);\n   char * newstr;\n \n@@ -2099,7 +2099,7 @@ v850_encode_data_area (decl)\n     {\n       if (DECL_SECTION_NAME (decl))\n \t{\n-\t  char * name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+\t  const char *name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n \t  \n \t  if (streq (name, \".zdata\") || streq (name, \".zbss\"))\n \t    v850_set_data_area (decl, DATA_AREA_ZDA);"}, {"sha": "bf8dd2aa16af8640ef77b25e7f45c7dbc56da441", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -1,3 +1,9 @@\n+2000-03-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl2.c (finish_objects): Constify a char*.\n+\n+\t* method.c (emit_thunk): Likewise.\n+\n 2000-03-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* typeck.c (dubious_conversion_warnings): Look through"}, {"sha": "7f5ba6a390183a2d9a5015cc326b613951f5d8a0", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -2840,7 +2840,7 @@ finish_objects (method_type, initp, body)\n      int method_type, initp;\n      tree body;\n {\n-  char *fnname;\n+  const char *fnname;\n   tree fn;\n \n   /* Finish up. */"}, {"sha": "6e869f1e88ca565c60919c6c5f581fc1bce7463a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -2098,7 +2098,7 @@ emit_thunk (thunk_fndecl)\n #ifdef ASM_OUTPUT_MI_THUNK\n   if (!flag_syntax_only)\n     {\n-      char *fnname;\n+      const char *fnname;\n       current_function_decl = thunk_fndecl;\n       /* Make sure we build up its RTL before we go onto the\n \t temporary obstack.  */"}, {"sha": "8c2e9fc580a0709b2fc38e33ba88e9a1bbe501de", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -2252,7 +2252,9 @@ canon_hash (x, mode)\n \t  hash += canon_hash (XVECEXP (x, i, j), 0);\n       else if (fmt[i] == 's')\n \t{\n-\t  register unsigned char *p = (unsigned char *) XSTR (x, i);\n+\t  register const unsigned char *p =\n+\t    (const unsigned char *) XSTR (x, i);\n+\n \t  if (p)\n \t    while (*p)\n \t      hash += *p++;"}, {"sha": "ada8c76a5a8796bc928c7cf6d2fb95068dfead97", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -2627,7 +2627,7 @@ dbxout_block (block, depth, args)\n   int ignored;\n \n #if DBX_BLOCKS_FUNCTION_RELATIVE\n-  char *begin_label; \n+  const char *begin_label; \n   if (current_function_func_begin_label != NULL_TREE)\n     begin_label = IDENTIFIER_POINTER (current_function_func_begin_label);\n   else"}, {"sha": "1b404625f7b1d9c32687f8262bca378484283260", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -78,7 +78,7 @@ static void notice PARAMS ((const char *s, ...)) ATTRIBUTE_PRINTF_1;\n static void v_message_with_file_and_line PARAMS ((const char *, int, int,\n \t\t\t\t\t\t  const char *, va_list));\n static void v_message_with_decl PARAMS ((tree, int, const char *, va_list));\n-static void file_and_line_for_asm PARAMS ((rtx, char **, int *));\n+static void file_and_line_for_asm PARAMS ((rtx, const char **, int *));\n static void v_error_with_file_and_line PARAMS ((const char *, int,\n \t\t\t\t\t\tconst char *, va_list));\n static void v_error_with_decl PARAMS ((tree, const char *, va_list));\n@@ -574,7 +574,7 @@ v_message_with_decl (decl, warn, msgid, ap)\n static void\n file_and_line_for_asm (insn, pfile, pline)\n      rtx insn;\n-     char **pfile;\n+     const char **pfile;\n      int *pline;\n {\n   rtx body = PATTERN (insn);\n@@ -649,7 +649,7 @@ v_error_for_asm (insn, msgid, ap)\n      const char *msgid;\n      va_list ap;\n {\n-  char *file;\n+  const char *file;\n   int line;\n \n   count_error (0);\n@@ -737,7 +737,7 @@ v_warning_for_asm (insn, msgid, ap)\n {\n   if (count_error (1))\n     {\n-      char *file;\n+      const char *file;\n       int line;\n \n       file_and_line_for_asm (insn, &file, &line);"}, {"sha": "0c0b7f28b084f064afcfd571f36ba9fcc616ae0d", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -383,7 +383,7 @@ static char *type_tag\t\t\tPARAMS ((tree));\n static inline void dienum_push\t\tPARAMS ((void));\n static inline void dienum_pop\t\tPARAMS ((void));\n static inline tree member_declared_type PARAMS ((tree));\n-static char *function_start_label\tPARAMS ((tree));\n+static const char *function_start_label\tPARAMS ((tree));\n static void output_array_type_die\tPARAMS ((void *));\n static void output_set_type_die\t\tPARAMS ((void *));\n #if 0\n@@ -3205,12 +3205,12 @@ member_declared_type (member)\n    This may be different from the DECL_NAME name used\n    in the source file.  */\n \n-static char *\n+static const char *\n function_start_label (decl)\n     register tree decl;\n {\n   rtx x;\n-  char *fnname;\n+  const char *fnname;\n \n   x = DECL_RTL (decl);\n   if (GET_CODE (x) != MEM)"}, {"sha": "3d6f73b69aca3f74c0eff4ef0cf53a046a4f11ed", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -3009,7 +3009,7 @@ emit_note_after (subtype, after)\n \n rtx\n emit_line_note_after (file, line, after)\n-     char *file;\n+     const char *file;\n      int line;\n      rtx after;\n {\n@@ -3208,7 +3208,7 @@ emit_barrier ()\n \n rtx\n emit_line_note (file, line)\n-     char *file;\n+     const char *file;\n      int line;\n {\n   set_file_and_line_for_stmt (file, line);\n@@ -3228,7 +3228,7 @@ emit_line_note (file, line)\n \n rtx\n emit_note (file, line)\n-     char *file;\n+     const char *file;\n      int line;\n {\n   register rtx note;\n@@ -3260,7 +3260,7 @@ emit_note (file, line)\n \n rtx\n emit_line_note_force (file, line)\n-     char *file;\n+     const char *file;\n      int line;\n {\n   last_linenum = -1;"}, {"sha": "01dd1ba6b8306e8d9b531e5f2b7f930cc542969c", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -147,7 +147,7 @@ static int high_block_linenum;\n static int high_function_linenum;\n \n /* Filename of last NOTE.  */\n-static char *last_filename;\n+static const char *last_filename;\n \n /* Number of basic blocks seen so far;\n    used if profile_block_flag is set.  */\n@@ -1537,7 +1537,7 @@ static int\n asm_insn_count (body)\n      rtx body;\n {\n-  char *template;\n+  const char *template;\n   int count = 1;\n \n   if (GET_CODE (body) == ASM_INPUT)\n@@ -2532,7 +2532,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t  {\n \t    unsigned int noperands = asm_noperands (body);\n \t    rtx *ops = (rtx *) alloca (noperands * sizeof (rtx));\n-\t    char *string;\n+\t    const char *string;\n \n \t    /* There's no telling what that did to the condition codes.  */\n \t    CC_STATUS_INIT;\n@@ -2972,7 +2972,7 @@ output_source_line (file, insn)\n      FILE *file ATTRIBUTE_UNUSED;\n      rtx insn;\n {\n-  register char *filename = NOTE_SOURCE_FILE (insn);\n+  register const char *filename = NOTE_SOURCE_FILE (insn);\n \n   /* Remember filename for basic block profiling.\n      Filenames are allocated on the permanent obstack"}, {"sha": "8b26ec2e371162f54b1cd37ee137f8278be65ef1", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -95,7 +95,7 @@ struct emit_status\n   /* Line number and source file of the last line-number NOTE emitted.\n      This is used to avoid generating duplicates.  */\n   int x_last_linenum;\n-  char *x_last_filename;\n+  const char *x_last_filename;\n \n   /* A vector indexed by pseudo reg number.  The allocated length\n      of this vector is regno_pointer_flag_length.  Since this"}, {"sha": "d3e00b83c204c38d474a42e787c5f7e278193de8", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -1416,7 +1416,7 @@ hash_expr_1 (x, mode, do_not_record_p)\n \t   final assembler.  This also avoids differences in the dump files\n \t   between various stages.  */\n \tunsigned int h = 0;\n-\tunsigned char *p = (unsigned char *) XSTR (x, 0);\n+\tconst unsigned char *p = (const unsigned char *) XSTR (x, 0);\n \n \twhile (*p)\n \t  h += (h << 7) + *p++; /* ??? revisit */\n@@ -1488,7 +1488,8 @@ hash_expr_1 (x, mode, do_not_record_p)\n \n       else if (fmt[i] == 's')\n \t{\n-\t  register unsigned char *p = (unsigned char *) XSTR (x, i);\n+\t  register const unsigned char *p =\n+\t    (const unsigned char *) XSTR (x, i);\n \n \t  if (p)\n \t    while (*p)"}, {"sha": "30160a443795a66ff07ca8cccebc3636e1229c7a", "filename": "gcc/genattr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -91,7 +91,7 @@ static void\n gen_attr (attr)\n      rtx attr;\n {\n-  char *p;\n+  const char *p;\n   int is_const = GET_CODE (XEXP (attr, 2)) == CONST;  \n \n   printf (\"#define HAVE_ATTR_%s\\n\", XSTR (attr, 0));\n@@ -306,7 +306,7 @@ from the machine description file `md'.  */\\n\\n\");\n \n       else if (GET_CODE (desc) == DEFINE_FUNCTION_UNIT)\n \t{\n-\t  char *name = XSTR (desc, 0);\n+\t  const char *name = XSTR (desc, 0);\n \t  int multiplicity = XINT (desc, 1);\n \t  int simultaneity = XINT (desc, 2);\n \t  int ready_cost = MAX (XINT (desc, 4), 1);"}, {"sha": "a656f1fc99588ae4020aafa87ff4b00756f92f92", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -216,7 +216,7 @@ struct function_unit_op\n \n struct function_unit\n {\n-  char *name;\t\t\t/* Function unit name.  */\n+  const char *name;\t\t/* Function unit name.  */\n   struct function_unit *next;\t/* Next function unit.  */\n   int num;\t\t\t/* Ordinal of this unit type.  */\n   int multiplicity;\t\t/* Number of units of this type.  */\n@@ -316,7 +316,7 @@ static int *insn_alternatives;\n    This is the hashed, unique string for the numeral\n    whose value is chosen alternative.  */\n \n-static char *current_alternative_string;\n+static const char *current_alternative_string;\n \n /* Used to simplify expressions.  */\n \n@@ -432,7 +432,7 @@ static void write_attr_set\tPARAMS ((struct attr_desc *, int, rtx,\n static void write_attr_case\tPARAMS ((struct attr_desc *, struct attr_value *,\n \t\t\t\t       int, const char *, const char *, int, rtx));\n static void write_unit_name\tPARAMS ((const char *, int, const char *));\n-static void write_attr_valueq\tPARAMS ((struct attr_desc *, char *));\n+static void write_attr_valueq\tPARAMS ((struct attr_desc *, const char *));\n static void write_attr_value\tPARAMS ((struct attr_desc *, rtx));\n static void write_upcase\tPARAMS ((const char *));\n static void write_indent\tPARAMS ((int));\n@@ -443,16 +443,16 @@ static void write_complex_function PARAMS ((struct function_unit *, const char *\n static int write_expr_attr_cache PARAMS ((rtx, struct attr_desc *));\n static void write_toplevel_expr\tPARAMS ((rtx));\n static void write_const_num_delay_slots PARAMS ((void));\n-static int n_comma_elts\t\tPARAMS ((char *));\n-static char *next_comma_elt\tPARAMS ((char **));\n+static int n_comma_elts\t\tPARAMS ((const char *));\n+static char *next_comma_elt\tPARAMS ((const char **));\n static struct attr_desc *find_attr PARAMS ((const char *, int));\n static void make_internal_attr\tPARAMS ((const char *, rtx, int));\n static struct attr_value *find_most_used  PARAMS ((struct attr_desc *));\n static rtx find_single_value\tPARAMS ((struct attr_desc *));\n static rtx make_numeric_value\tPARAMS ((int));\n static void extend_range\tPARAMS ((struct range *, int, int));\n-static rtx attr_eq\t\tPARAMS ((char *, char *));\n-static char *attr_numeral\tPARAMS ((int));\n+static rtx attr_eq\t\tPARAMS ((const char *, const char *));\n+static const char *attr_numeral\tPARAMS ((int));\n static int attr_equal_p\t\tPARAMS ((rtx, rtx));\n static rtx attr_copy_rtx\tPARAMS ((rtx));\n \n@@ -765,13 +765,13 @@ attr_printf VPARAMS ((register int len, const char *fmt, ...))\n \n static rtx\n attr_eq (name, value)\n-     char *name, *value;\n+     const char *name, *value;\n {\n   return attr_rtx (EQ_ATTR, attr_string (name, strlen (name)),\n \t\t   attr_string (value, strlen (value)));\n }\n \n-static char *\n+static const char *\n attr_numeral (n)\n      int n;\n {\n@@ -932,7 +932,7 @@ check_attr_test (exp, is_const)\n {\n   struct attr_desc *attr;\n   struct attr_value *av;\n-  char *name_ptr, *p;\n+  const char *name_ptr, *p;\n   rtx orexp, newexp;\n \n   switch (GET_CODE (exp))\n@@ -1079,7 +1079,7 @@ check_attr_value (exp, attr)\n      struct attr_desc *attr;\n {\n   struct attr_value *av;\n-  char *p;\n+  const char *p;\n   int i;\n \n   switch (GET_CODE (exp))\n@@ -1217,7 +1217,7 @@ convert_set_attr_alternative (exp, num_alt, insn_index)\n \n   for (i = 0; i < num_alt - 1; i++)\n     {\n-      char *p;\n+      const char *p;\n       p = attr_numeral (i);\n \n       XVECEXP (condexp, 0, 2 * i) = attr_eq (alternative_name, p);\n@@ -1245,7 +1245,7 @@ convert_set_attr (exp, num_alt, insn_index)\n      int insn_index;\n {\n   rtx newexp;\n-  char *name_ptr;\n+  const char *name_ptr;\n   char *p;\n   int n;\n \n@@ -2761,7 +2761,7 @@ compute_alternative_mask (exp, code)\n      rtx exp;\n      enum rtx_code code;\n {\n-  char *string;\n+  const char *string;\n   if (GET_CODE (exp) == code)\n     return compute_alternative_mask (XEXP (exp, 0), code)\n \t   | compute_alternative_mask (XEXP (exp, 1), code);\n@@ -3608,7 +3608,7 @@ simplify_by_exploding (exp)\n     {\n       /* Pull the first attribute value from the list and record that\n \t attribute as another dimension in the attribute space.  */\n-      char *name = XSTR (XEXP (list, 0), 0);\n+      const char *name = XSTR (XEXP (list, 0), 0);\n       rtx *prev;\n \n       if ((space[ndim].attr = find_attr (name, 0)) == 0\n@@ -4140,7 +4140,7 @@ gen_attr (exp)\n {\n   struct attr_desc *attr;\n   struct attr_value *av;\n-  char *name_ptr;\n+  const char *name_ptr;\n   char *p;\n \n   /* Make a new attribute structure.  Check for duplicate by looking at\n@@ -4374,7 +4374,7 @@ gen_unit (def)\n {\n   struct function_unit *unit;\n   struct function_unit_op *op;\n-  char *name = XSTR (def, 0);\n+  const char *name = XSTR (def, 0);\n   int multiplicity = XINT (def, 1);\n   int simultaneity = XINT (def, 2);\n   rtx condexp = XEXP (def, 3);\n@@ -5253,7 +5253,7 @@ write_unit_name (prefix, num, suffix)\n static void\n write_attr_valueq (attr, s)\n      struct attr_desc *attr;\n-     char *s;\n+     const char *s;\n {\n   if (attr->is_numeric)\n     {\n@@ -5673,7 +5673,7 @@ write_complex_function (unit, name, connection)\n \n static int\n n_comma_elts (s)\n-     char *s;\n+     const char *s;\n {\n   int n;\n \n@@ -5693,10 +5693,10 @@ n_comma_elts (s)\n \n static char *\n next_comma_elt (pstr)\n-     char **pstr;\n+     const char **pstr;\n {\n   char *out_str;\n-  char *p;\n+  const char *p;\n \n   if (**pstr == '\\0')\n     return NULL;"}, {"sha": "d1f19e08b815cf00578bac9f837a6b7d4ba55d0c", "filename": "gcc/genflags.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -134,8 +134,8 @@ static void\n gen_insn (insn)\n      rtx insn;\n {\n-  char *name = XSTR (insn, 0);\n-  char *p;\n+  const char *name = XSTR (insn, 0);\n+  const char *p;\n   struct obstack *obstack_ptr;\n   int len;\n "}, {"sha": "2eec4592699f022ada5fcce4819c02f05582b08e", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -115,7 +115,7 @@ type_from_format (c)\n       return \"HOST_WIDE_INT \";\n \n     case 's':\n-      return \"char *\";\n+      return \"const char *\";\n \n     case 'e':  case 'u':\n       return \"rtx \";"}, {"sha": "ac5debbb30f6f64bec8e02c35d2ff3982777355a", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -128,7 +128,7 @@ static void\n gen_insn (insn)\n      rtx insn;\n {\n-  char *name = XSTR (insn, 0);\n+  const char *name = XSTR (insn, 0);\n   int m1 = 0, m2 = 0, op = 0;\n   size_t pindex;\n   int i;"}, {"sha": "2935f66d4e9f3abd3becb3c2dcd9e765193252ab", "filename": "gcc/genoutput.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -103,7 +103,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static int n_occurrences PARAMS ((int, char *));\n+static int n_occurrences PARAMS ((int, const char *));\n static void strip_whitespace PARAMS ((char *));\n \n /* insns in the machine description are assigned sequential code numbers\n@@ -185,13 +185,12 @@ static void scan_operands PARAMS ((struct data *, rtx, int, int));\n static int compare_operands PARAMS ((struct operand_data *,\n \t\t\t\t   struct operand_data *));\n static void place_operands PARAMS ((struct data *));\n-static void process_template PARAMS ((struct data *, char *));\n+static void process_template PARAMS ((struct data *, const char *));\n static void validate_insn_alternatives PARAMS ((struct data *));\n static void gen_insn PARAMS ((rtx));\n static void gen_peephole PARAMS ((rtx));\n static void gen_expand PARAMS ((rtx));\n static void gen_split PARAMS ((rtx));\n-static int n_occurrences PARAMS ((int, char *));\n \f\n const char *\n get_insn_name (index)\n@@ -637,9 +636,9 @@ place_operands (d)\n static void\n process_template (d, template)\n     struct data *d;\n-    char *template;\n+    const char *template;\n {\n-  register char *cp;\n+  register const char *cp;\n   register int i;\n \n   /* Templates starting with * contain straight code to be run.  */\n@@ -969,7 +968,7 @@ main (argc, argv)\n static int\n n_occurrences (c, s)\n      int c;\n-     char *s;\n+     const char *s;\n {\n   int n = 0;\n   while (*s)"}, {"sha": "a7490f3cad15f04dac7988c7b500829282a0f39f", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -730,7 +730,7 @@ ggc_alloc_obj (size, zero)\n \n int\n ggc_set_mark (p)\n-     void *p;\n+     const void *p;\n {\n   page_entry *entry;\n   unsigned bit, word;\n@@ -746,7 +746,7 @@ ggc_set_mark (p)\n \n   /* Calculate the index of the object on the page; this is its bit\n      position in the in_use_p bitmap.  */\n-  bit = (((char *) p) - entry->page) >> entry->order;\n+  bit = (((const char *) p) - entry->page) >> entry->order;\n   word = bit / HOST_BITS_PER_LONG;\n   mask = (unsigned long) 1 << (bit % HOST_BITS_PER_LONG);\n   \n@@ -770,7 +770,7 @@ ggc_set_mark (p)\n \n void\n ggc_mark_if_gcable (p)\n-     void *p;\n+     const void *p;\n {\n   if (p && ggc_allocated_p (p))\n     ggc_set_mark (p);\n@@ -780,7 +780,7 @@ ggc_mark_if_gcable (p)\n \n size_t\n ggc_get_size (p)\n-     void *p;\n+     const void *p;\n {\n   page_entry *pe = lookup_page_table_entry (p);\n   return 1 << pe->order;"}, {"sha": "6d1545c4112f6615cb8a2479a4cc45b1903a4eea", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -217,11 +217,11 @@ ggc_alloc_obj (size, zero)\n \n int\n ggc_set_mark (p)\n-     void *p;\n+     const void *p;\n {\n   struct ggc_mem *x;\n \n-  x = (struct ggc_mem *) ((char *)p - offsetof (struct ggc_mem, u));\n+  x = (struct ggc_mem *) ((const char *)p - offsetof (struct ggc_mem, u));\n #ifdef GGC_ALWAYS_VERIFY\n   if (! tree_lookup (x))\n     abort ();\n@@ -241,14 +241,14 @@ ggc_set_mark (p)\n \n void\n ggc_mark_if_gcable (p)\n-     void *p;\n+     const void *p;\n {\n   struct ggc_mem *x;\n \n   if (p == NULL)\n     return;\n \n-  x = (struct ggc_mem *) ((char *)p - offsetof (struct ggc_mem, u));\n+  x = (struct ggc_mem *) ((const char *)p - offsetof (struct ggc_mem, u));\n   if (! tree_lookup (x))\n     return;\n \n@@ -264,10 +264,10 @@ ggc_mark_if_gcable (p)\n \n size_t\n ggc_get_size (p)\n-     void *p;\n+     const void *p;\n {\n   struct ggc_mem *x \n-    = (struct ggc_mem *) ((char *)p - offsetof (struct ggc_mem, u));\n+    = (struct ggc_mem *) ((const char *)p - offsetof (struct ggc_mem, u));\n   return x->size;\n }\n "}, {"sha": "32f40965c6e1e750982573bd698b616bd7fab4bf", "filename": "gcc/ggc.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -94,20 +94,20 @@ extern void ggc_mark_tree_children PARAMS ((union tree_node *));\n \n #define ggc_mark_string(EXPR)\t\t\t\\\n   do {\t\t\t\t\t\t\\\n-    char *s__ = (EXPR);\t\t\t\t\\\n+    const char *s__ = (EXPR);\t\t\t\\\n     if (s__ != NULL)\t\t\t\t\\\n       ggc_set_mark (s__);\t\t\t\\\n   } while (0)\n \n #define ggc_mark(EXPR)\t\t\t\t\\\n   do {\t\t\t\t\t\t\\\n-    void *a__ = (EXPR);\t\t\t\t\\\n+    const void *a__ = (EXPR);\t\t\t\\\n     if (a__ != NULL)\t\t\t\t\\\n       ggc_set_mark (a__);\t\t\t\\\n   } while (0)\n \n /* Mark, but only if it was allocated in collectable memory.  */\n-extern void ggc_mark_if_gcable PARAMS ((void *));\n+extern void ggc_mark_if_gcable PARAMS ((const void *));\n \n /* A GC implementation must provide these functions.  */\n \n@@ -151,7 +151,7 @@ void ggc_collect PARAMS ((void));\n    returns zero if the object was not previously marked; non-zero if\n    the object was already marked, or if, for any other reason,\n    pointers in this data structure should not be traversed.  */\n-int ggc_set_mark PARAMS ((void *));\n+int ggc_set_mark PARAMS ((const void *));\n \n /* Callbacks to the languages.  */\n \n@@ -200,7 +200,7 @@ typedef struct ggc_statistics\n } ggc_statistics;\n \n /* Return the number of bytes allocated at the indicated address.  */\n-size_t ggc_get_size PARAMS ((void *));\n+size_t ggc_get_size PARAMS ((const void *));\n \n /* Used by the various collectors to gather and print statistics that\n    do not depend on the collector in use.  */"}, {"sha": "1817904fdaf134e1457aa5e6779a8209e8cfd2ab", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -161,7 +161,7 @@ static void finish_objc\t\t\t\tPARAMS ((void));\n \n static void synth_module_prologue\t\tPARAMS ((void));\n static tree build_constructor\t\t\tPARAMS ((tree, tree));\n-static char *build_module_descriptor\t\tPARAMS ((void));\n+static const char *build_module_descriptor      PARAMS ((void));\n static tree init_module_descriptor\t\tPARAMS ((tree));\n static tree build_objc_method_call\t\tPARAMS ((int, tree, tree,\n \t\t\t\t\t\t       tree, tree, tree));\n@@ -1681,7 +1681,7 @@ init_module_descriptor (type)\n \n    struct objc_module { ... } _OBJC_MODULE = { ... };   */\n \n-static char *\n+static const char *\n build_module_descriptor ()\n {\n   tree decl_specs, field_decl, field_decl_chain;\n@@ -8189,7 +8189,7 @@ finish_objc ()\n       || meth_var_names_chain || meth_var_types_chain || sel_ref_chain)\n     {\n       /* Arrange for Objc data structures to be initialized at run time.  */\n-      char *init_name = build_module_descriptor ();\n+      const char *init_name = build_module_descriptor ();\n       if (init_name)\n \tassemble_constructor (init_name);\n     }"}, {"sha": "6474a533a7b94110e7e3c0d832bb3afcaffd2b71", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -4432,7 +4432,7 @@ init_one_libfunc (name)\n   if (ggc_p)\n     name = ggc_alloc_string (name, -1);\n \n-  return gen_rtx_SYMBOL_REF (Pmode, (char *) name);\n+  return gen_rtx_SYMBOL_REF (Pmode, name);\n }\n \n /* Mark ARG (which is really an OPTAB *) for GC.  */"}, {"sha": "160f1243c472f7b5a8986b721d8bd4d2b31bb906", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -251,7 +251,7 @@ extern void assemble_asm\t\tPARAMS ((tree));\n    with defining the name of the function.  DECL describes the function.\n    NAME is the function's name.  For the constant pool, we use the current\n    constant pool data.  */\n-extern void assemble_start_function\tPARAMS ((tree, char *));\n+extern void assemble_start_function\tPARAMS ((tree, const char *));\n \n /* Output assembler code associated with defining the size of the\n    function.  DECL describes the function.  NAME is the function's name.  */"}, {"sha": "56f86345b21e327cb480f9d70054c691dbc38d8e", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -1405,7 +1405,7 @@ asm_noperands (body)\n    If MODES, OPERAND_LOCS, CONSTRAINTS or OPERANDS is 0,\n    we don't store that info.  */\n \n-char *\n+const char *\n decode_asm_operands (body, operands, operand_locs, constraints, modes)\n      rtx body;\n      rtx *operands;\n@@ -1415,7 +1415,7 @@ decode_asm_operands (body, operands, operand_locs, constraints, modes)\n {\n   register int i;\n   int noperands;\n-  char *template = 0;\n+  const char *template = 0;\n \n   if (GET_CODE (body) == SET && GET_CODE (SET_SRC (body)) == ASM_OPERANDS)\n     {"}, {"sha": "7fc1a1c751f3c3063afa9bf1b8205f3e3257301b", "filename": "gcc/rtl.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -87,7 +87,7 @@ typedef union rtunion_def\n {\n   HOST_WIDE_INT rtwint;\n   int rtint;\n-  char *rtstr;\n+  const char *rtstr;\n   struct rtx_def *rtx;\n   struct rtvec_def *rtvec;\n   enum machine_mode rttype;\n@@ -1031,7 +1031,7 @@ extern rtx emit_jump_insn_after\t\tPARAMS ((rtx, rtx));\n extern rtx emit_barrier_after\t\tPARAMS ((rtx));\n extern rtx emit_label_after\t\tPARAMS ((rtx, rtx));\n extern rtx emit_note_after\t\tPARAMS ((int, rtx));\n-extern rtx emit_line_note_after\t\tPARAMS ((char *, int, rtx));\n+extern rtx emit_line_note_after\t\tPARAMS ((const char *, int, rtx));\n extern rtx emit_insn\t\t\tPARAMS ((rtx));\n extern rtx emit_insns\t\t\tPARAMS ((rtx));\n extern rtx emit_insns_before\t\tPARAMS ((rtx, rtx));\n@@ -1040,9 +1040,9 @@ extern rtx emit_jump_insn\t\tPARAMS ((rtx));\n extern rtx emit_call_insn\t\tPARAMS ((rtx));\n extern rtx emit_label\t\t\tPARAMS ((rtx));\n extern rtx emit_barrier\t\t\tPARAMS ((void));\n-extern rtx emit_line_note\t\tPARAMS ((char *, int));\n-extern rtx emit_note\t\t\tPARAMS ((char *, int));\n-extern rtx emit_line_note_force\t\tPARAMS ((char *, int));\n+extern rtx emit_line_note\t\tPARAMS ((const char *, int));\n+extern rtx emit_note\t\t\tPARAMS ((const char *, int));\n+extern rtx emit_line_note_force\t\tPARAMS ((const char *, int));\n extern rtx make_insn_raw\t\tPARAMS ((rtx));\n extern rtx previous_insn\t\tPARAMS ((rtx));\n extern rtx next_insn\t\t\tPARAMS ((rtx));\n@@ -1163,7 +1163,7 @@ extern void free_reg_info\t\tPARAMS ((void));\n \n /* recog.c */\n extern int asm_noperands\t\tPARAMS ((rtx));\n-extern char *decode_asm_operands\tPARAMS ((rtx, rtx *, rtx **,\n+extern const char *decode_asm_operands\tPARAMS ((rtx, rtx *, rtx **,\n \t\t\t\t\t       const char **,\n \t\t\t\t\t       enum machine_mode *));\n "}, {"sha": "f10e1e2f551744bdf7c8eae25809b418aebc541b", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -3683,7 +3683,7 @@ rest_of_compilation (decl)\n   TIMEVAR (final_time,\n \t   {\n \t     rtx x;\n-\t     char *fnname;\n+\t     const char *fnname;\n \n \t     /* Get the function's name, as described by its RTL.\n \t\tThis may be different from the DECL_NAME name used"}, {"sha": "635756268eba89055ae67001f609ddf1c4a186e5", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -2496,10 +2496,10 @@ extern void check_max_integer_computation_mode\tPARAMS ((tree));\n \n /* In emit-rtl.c */\n extern void start_sequence_for_rtl_expr\t\tPARAMS ((tree));\n-extern struct rtx_def *emit_line_note_after\tPARAMS ((char *, int,\n-\t\t\t\t\t\t\tstruct rtx_def *));\n-extern struct rtx_def *emit_line_note\t\tPARAMS ((char *, int));\n-extern struct rtx_def *emit_line_note_force\tPARAMS ((char *, int));\n+extern struct rtx_def *emit_line_note_after\tPARAMS ((const char *, int,\n+\t\t\t\t\t\t\t struct rtx_def *));\n+extern struct rtx_def *emit_line_note\t\tPARAMS ((const char *, int));\n+extern struct rtx_def *emit_line_note_force\tPARAMS ((const char *, int));\n \n /* In calls.c */\n extern void special_function_p\t        PARAMS ((tree, int *, int *,"}, {"sha": "7805c1d4c22c6251a7f9bc8960cdaf49e8acd0dd", "filename": "gcc/varasm.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -178,17 +178,18 @@ static void output_constructor\t\tPARAMS ((tree, int));\n static void remove_from_pending_weak_list\tPARAMS ((char *));\n #endif\n #ifdef ASM_OUTPUT_BSS\n-static void asm_output_bss\t\tPARAMS ((FILE *, tree, char *, int, int));\n+static void asm_output_bss\t\tPARAMS ((FILE *, tree, const char *, int, int));\n #endif\n #ifdef BSS_SECTION_ASM_OP\n #ifdef ASM_OUTPUT_ALIGNED_BSS\n-static void asm_output_aligned_bss\tPARAMS ((FILE *, tree, char *, int, int));\n+static void asm_output_aligned_bss\tPARAMS ((FILE *, tree, const char *,\n+\t\t\t\t\t\t int, int));\n #endif\n #endif /* BSS_SECTION_ASM_OP */\n static void mark_pool_constant          PARAMS ((struct pool_constant *));\n static void mark_pool_sym_hash_table\tPARAMS ((struct pool_sym **));\n static void mark_const_hash_entry\tPARAMS ((void *));\n-static void asm_emit_uninitialised\tPARAMS ((tree, char *, int, int));\n+static void asm_emit_uninitialised\tPARAMS ((tree, const char*, int, int));\n \f\n static enum in_section { no_section, in_text, in_data, in_named\n #ifdef BSS_SECTION_ASM_OP\n@@ -377,7 +378,7 @@ static void\n asm_output_bss (file, decl, name, size, rounded)\n      FILE *file;\n      tree decl ATTRIBUTE_UNUSED;\n-     char *name;\n+     const char *name;\n      int size ATTRIBUTE_UNUSED, rounded;\n {\n   ASM_GLOBALIZE_LABEL (file, name);\n@@ -405,7 +406,7 @@ static void\n asm_output_aligned_bss (file, decl, name, size, align)\n      FILE *file;\n      tree decl;\n-     char *name;\n+     const char *name;\n      int size, align;\n {\n   ASM_GLOBALIZE_LABEL (file, name);\n@@ -997,7 +998,7 @@ assemble_gc_entry (name)\n void\n assemble_start_function (decl, fnname)\n      tree decl;\n-     char *fnname;\n+     const char *fnname;\n {\n   int align;\n \n@@ -1239,7 +1240,7 @@ assemble_string (p, size)\n static void\n asm_emit_uninitialised (decl, name, size, rounded)\n      tree decl;\n-     char * name;\n+     const char * name;\n      int size ATTRIBUTE_UNUSED;\n      int rounded ATTRIBUTE_UNUSED;\n {\n@@ -1328,7 +1329,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n      int at_end ATTRIBUTE_UNUSED;\n      int dont_output_data;\n {\n-  register char *name;\n+  register const char *name;\n   unsigned int align;\n   tree size_tree = NULL_TREE;\n   int reloc = 0;\n@@ -2375,7 +2376,7 @@ static int\n const_hash (exp)\n      tree exp;\n {\n-  register char *p;\n+  register const char *p;\n   register int len, hi, i;\n   register enum tree_code code = TREE_CODE (exp);\n \n@@ -2406,9 +2407,12 @@ const_hash (exp)\n     case CONSTRUCTOR:\n       if (TREE_CODE (TREE_TYPE (exp)) == SET_TYPE)\n \t{\n+\t  char *tmp;\n+\n \t  len = int_size_in_bytes (TREE_TYPE (exp));\n-\t  p = (char *) alloca (len);\n-\t  get_set_constructor_bytes (exp, (unsigned char *) p, len);\n+\t  tmp = (char *) alloca (len);\n+\t  get_set_constructor_bytes (exp, (unsigned char *) tmp, len);\n+\t  p = tmp;\n \t  break;\n \t}\n       else\n@@ -2509,7 +2513,7 @@ compare_constant_1 (exp, p)\n      tree exp;\n      char *p;\n {\n-  register char *strp;\n+  register const char *strp;\n   register int len;\n   register enum tree_code code = TREE_CODE (exp);\n \n@@ -2566,9 +2570,10 @@ compare_constant_1 (exp, p)\n       if (TREE_CODE (TREE_TYPE (exp)) == SET_TYPE)\n \t{\n \t  int xlen = len = int_size_in_bytes (TREE_TYPE (exp));\n+\t  unsigned char *tmp = (unsigned char *) alloca (len);\n \n-\t  strp = (char *) alloca (len);\n-\t  get_set_constructor_bytes (exp, (unsigned char *) strp, len);\n+\t  get_set_constructor_bytes (exp, (unsigned char *) tmp, len);\n+\t  strp = tmp;\n \t  if (bcmp ((char *) &xlen, p, sizeof xlen))\n \t    return 0;\n \n@@ -3683,7 +3688,7 @@ find_pool_constant (f, addr)\n      rtx addr;\n {\n   struct pool_sym *sym;\n-  char *label = XSTR (addr, 0);\n+  const char *label = XSTR (addr, 0);\n \n   for (sym = f->varasm->x_const_rtx_sym_hash_table[SYMHASH (label)]; sym; sym = sym->next)\n     if (sym->label == label)\n@@ -3873,7 +3878,7 @@ mark_constant_pool ()\n   for (pool = first_pool; pool; pool = pool->next)\n     {\n       struct pool_sym *sym;\n-      char *label;\n+      const char *label;\n \n       /* skip unmarked entries; no insn refers to them. */\n       if (!pool->mark)\n@@ -4702,7 +4707,7 @@ void\n assemble_alias (decl, target)\n      tree decl, target ATTRIBUTE_UNUSED;\n {\n-  char *name;\n+  const char *name;\n \n   make_decl_rtl (decl, (char *) 0, 1);\n   name = XSTR (XEXP (DECL_RTL (decl), 0), 0);"}, {"sha": "5e912be2f3d0d010c11fdb176cbdd710afba0d95", "filename": "gcc/xcoffout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fxcoffout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cce094dd9c9770f0dc751485d2f779fdb69b4db/gcc%2Fxcoffout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.h?ref=3cce094dd9c9770f0dc751485d2f779fdb69b4db", "patch": "@@ -103,7 +103,7 @@ Boston, MA 02111-1307, USA.  */\n   if (current_sym_addr && current_sym_code == N_FUN\t\t\\\n       && GET_CODE (current_sym_addr) == SYMBOL_REF)\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      char *_p = XSTR (current_sym_addr, 0);\t\t\t\\\n+      const char *_p = XSTR (current_sym_addr, 0);\t\t\\\n       if (*_p == '*')\t\t\t\t\t\t\\\n \tfprintf (asmfile, \"%s\", _p+1);\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\"}]}