{"sha": "9872bd8c35be0f4d475fac739115cf5b82cdabc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3MmJkOGMzNWJlMGY0ZDQ3NWZhYzczOTExNWNmNWI4MmNkYWJjMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-24T10:24:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-24T10:24:48Z"}, "message": "df: Fix up handling of paradoxical subregs in debug insns [PR101170]\n\nThe recent addition of gcc_assert (regno < endregno); triggers during\nglibc build on m68k.\nThe problem is that RA decisions shouldn't depend on expressions in\nDEBUG_INSNs and those expressions can contain paradoxical subregs of certain\npseudos.  If RA then decides to allocate the pseudo to a register\nwith very small hard register REGNO, we can trigger the new assert,\nas (int) subreg_regno_offset may be negative on big endian and the small\nREGNO + the negative offset can wrap around.\n\nThe following patch in that case records the range from the REGNO 0 to\nendregno, before the addition of the assert as both regno and endregno are\nunsigned it wouldn't record anything at all silently.\n\n2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/101170\n\t* df-scan.c (df_ref_record): For paradoxical big-endian SUBREGs\n\twhere regno + subreg_regno_offset wraps around use 0 as starting\n\tregno.\n\n\t* gcc.dg/pr101170.c: New test.", "tree": {"sha": "ccf9f8ec9fab3fc57077c6b23da5dcbaeca6cfe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccf9f8ec9fab3fc57077c6b23da5dcbaeca6cfe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9872bd8c35be0f4d475fac739115cf5b82cdabc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9872bd8c35be0f4d475fac739115cf5b82cdabc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9872bd8c35be0f4d475fac739115cf5b82cdabc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9872bd8c35be0f4d475fac739115cf5b82cdabc0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65371066d8967560e3508af4a804e0ddb90acee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65371066d8967560e3508af4a804e0ddb90acee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65371066d8967560e3508af4a804e0ddb90acee7"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "3dbda7aa52cc7fd46371c285aa9cbca963a28440", "filename": "gcc/df-scan.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9872bd8c35be0f4d475fac739115cf5b82cdabc0/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9872bd8c35be0f4d475fac739115cf5b82cdabc0/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=9872bd8c35be0f4d475fac739115cf5b82cdabc0", "patch": "@@ -2576,9 +2576,21 @@ df_ref_record (enum df_ref_class cl,\n \n       if (GET_CODE (reg) == SUBREG)\n \t{\n-\t  regno += subreg_regno_offset (regno, GET_MODE (SUBREG_REG (reg)),\n-\t\t\t\t\tSUBREG_BYTE (reg), GET_MODE (reg));\n-\t  endregno = regno + subreg_nregs (reg);\n+\t  int off = subreg_regno_offset (regno, GET_MODE (SUBREG_REG (reg)),\n+\t\t\t\t\t SUBREG_BYTE (reg), GET_MODE (reg));\n+\t  unsigned int nregno = regno + off;\n+\t  endregno = nregno + subreg_nregs (reg);\n+\t  if (off < 0 && regno < (unsigned) -off)\n+\t    /* Deal with paradoxical SUBREGs on big endian where\n+\t       in debug insns the hard reg number might be smaller\n+\t       than -off, such as (subreg:DI (reg:SI 0 [+4 ]) 0));\n+\t       RA decisions shouldn't be affected by debug insns\n+\t       and so RA can decide to put pseudo into a hard reg\n+\t       with small REGNO, even when it is referenced in\n+\t       a paradoxical SUBREG in a debug insn.  */\n+\t    regno = 0;\n+\t  else\n+\t    regno = nregno;\n \t}\n       else\n \tendregno = END_REGNO (reg);"}, {"sha": "fc8106206b6db6a1b83df3236f5ffb62cca256ba", "filename": "gcc/testsuite/gcc.dg/pr101170.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9872bd8c35be0f4d475fac739115cf5b82cdabc0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101170.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9872bd8c35be0f4d475fac739115cf5b82cdabc0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101170.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101170.c?ref=9872bd8c35be0f4d475fac739115cf5b82cdabc0", "patch": "@@ -0,0 +1,37 @@\n+/* PR middle-end/101170 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+#include <stdarg.h>\n+\n+struct S { int a; int b[4]; } s;\n+va_list ap;\n+int i;\n+long long l;\n+\n+struct S\n+foo (int x)\n+{\n+  struct S a = {};\n+  do\n+    if (x)\n+      return a;\n+  while (1);\n+}\n+\n+__attribute__((noipa)) void\n+bar (void)\n+{\n+  for (; i; i++)\n+    l |= va_arg (ap, long long) << s.b[i];\n+  if (l)\n+    foo (l);\n+}\n+\n+void\n+baz (int v, ...)\n+{\n+  va_start (ap, v);\n+  bar ();\n+  va_end (ap);\n+}"}]}