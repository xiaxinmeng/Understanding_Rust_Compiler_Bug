{"sha": "c8ab8aab9f93380f874e199366ad1badd1dd59a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhYjhhYWI5ZjkzMzgwZjg3NGUxOTkzNjZhZDFiYWRkMWRkNTlhNA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2018-12-14T20:42:50Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2018-12-14T20:42:50Z"}, "message": "[PR88484] OpenACC wait directive without wait argument but with async clause\n\nWe don't correctly handle \"#pragma acc wait async (a)\" for \"a >= 0\", handling\nas a no-op whereas it should enqueue the appropriate wait operations on\n\"async (a)\".\n\n\tlibgomp/\n\tPR libgomp/88484\n\t* oacc-parallel.c (GOACC_wait): Correct handling for \"async >= 0\".\n\t* testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c: New file.\n\nFrom-SVN: r267151", "tree": {"sha": "8551a5c19b0097badb3aeb47da3eb46ba13afe0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8551a5c19b0097badb3aeb47da3eb46ba13afe0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8ab8aab9f93380f874e199366ad1badd1dd59a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ab8aab9f93380f874e199366ad1badd1dd59a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8ab8aab9f93380f874e199366ad1badd1dd59a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ab8aab9f93380f874e199366ad1badd1dd59a4/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1404af62dc414cc6b06e6c8c94a9922e04a7986a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1404af62dc414cc6b06e6c8c94a9922e04a7986a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1404af62dc414cc6b06e6c8c94a9922e04a7986a"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "2914066f7532833e241c232f181f1159fca4d74d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8ab8aab9f93380f874e199366ad1badd1dd59a4/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8ab8aab9f93380f874e199366ad1badd1dd59a4/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c8ab8aab9f93380f874e199366ad1badd1dd59a4", "patch": "@@ -1,5 +1,9 @@\n 2018-12-14  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR libgomp/88484\n+\t* oacc-parallel.c (GOACC_wait): Correct handling for \"async >= 0\".\n+\t* testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c: New file.\n+\n \tPR libgomp/88407\n \t* plugin/plugin-nvptx.c (nvptx_async_test, nvptx_wait)\n \t(nvptx_wait_async): Unseen async-argument is a no-op."}, {"sha": "89b6b6f6fc2b1c3b092617404ef41ea38808fbda", "filename": "libgomp/oacc-parallel.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8ab8aab9f93380f874e199366ad1badd1dd59a4/libgomp%2Foacc-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8ab8aab9f93380f874e199366ad1badd1dd59a4/libgomp%2Foacc-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-parallel.c?ref=c8ab8aab9f93380f874e199366ad1badd1dd59a4", "patch": "@@ -630,8 +630,8 @@ GOACC_wait (int async, int num_waits, ...)\n     }\n   else if (async == acc_async_sync)\n     acc_wait_all ();\n-  else if (async == acc_async_noval)\n-    goacc_thread ()->dev->openacc.async_wait_all_async_func (acc_async_noval);\n+  else\n+    acc_wait_all_async (async);\n }\n \n int"}, {"sha": "e4f627d38bc279728aee7f858101eb83a098eb82", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8ab8aab9f93380f874e199366ad1badd1dd59a4/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8ab8aab9f93380f874e199366ad1badd1dd59a4/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c?ref=c8ab8aab9f93380f874e199366ad1badd1dd59a4", "patch": "@@ -0,0 +1,78 @@\n+/* Several of the async/wait combinations invoked here are no-ops -- they don't\n+   effect anything, but are still valid.\n+\n+   This doesn't verify that the asynchronous operations synchronize correctly,\n+   but just verifies that we don't refuse any variants.  */\n+\n+#undef NDEBUG\n+#include <assert.h>\n+#include <openacc.h>\n+\n+int values[] = { acc_async_sync,\n+\t\t acc_async_noval,\n+\t\t 0,\n+\t\t 1,\n+\t\t 2,\n+\t\t 36,\n+\t\t 1982, };\n+const size_t values_n = sizeof values / sizeof values[0];\n+\n+int\n+main ()\n+{\n+  /* Explicitly initialize: it's not clear whether the following OpenACC\n+     runtime library calls implicitly initialize;\n+     <https://github.com/OpenACC/openacc-spec/issues/102>.  */\n+  acc_device_t d;\n+#if defined ACC_DEVICE_TYPE_nvidia\n+  d = acc_device_nvidia;\n+#elif defined ACC_DEVICE_TYPE_host\n+  d = acc_device_host;\n+#else\n+# error Not ported to this ACC_DEVICE_TYPE\n+#endif\n+  acc_init (d);\n+\n+\n+  for (size_t i = 0; i < values_n; ++i)\n+    assert (acc_async_test (values[i]) == 1);\n+\n+\n+  for (size_t i = 0; i < values_n; ++i)\n+    {\n+#pragma acc parallel wait (values[i])\n+      ;\n+#pragma acc wait (values[i])\n+      acc_wait (values[i]);\n+    }\n+\n+\n+  for (size_t i = 0; i < values_n; ++i)\n+    {\n+      for (size_t j = 0; j < values_n; ++j)\n+\t{\n+\t  if (values[i] == values[j])\n+\t    continue;\n+\n+#pragma acc parallel wait (values[i]) async (values[j])\n+\t  ;\n+#pragma acc wait (values[i]) async (values[j])\n+\t  acc_wait_async (values[i], values[j]);\n+\t}\n+    }\n+\n+\n+  for (size_t i = 0; i < values_n; ++i)\n+    {\n+#pragma acc parallel wait async (values[i])\n+      ;\n+#pragma acc wait async (values[i])\n+      acc_wait_all_async (values[i]);\n+    }\n+\n+\n+  /* Clean up.  */\n+  acc_wait_all ();\n+\n+  return 0;\n+}"}]}