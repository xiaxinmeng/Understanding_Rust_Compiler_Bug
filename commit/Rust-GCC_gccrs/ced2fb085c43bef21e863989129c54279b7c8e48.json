{"sha": "ced2fb085c43bef21e863989129c54279b7c8e48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkMmZiMDg1YzQzYmVmMjFlODYzOTg5MTI5YzU0Mjc5YjdjOGU0OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-08-07T01:44:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-08-07T01:44:11Z"}, "message": "re PR c++/60417 ([DR 1518] Bogus error on C++03 aggregate initialization)\n\n\tPR c++/60417\n\t* init.c (build_vec_init): Reorganize earlier change a bit.\n\nFrom-SVN: r213689", "tree": {"sha": "8df901f206f63e19bf29c57e778ffcda9b96c284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8df901f206f63e19bf29c57e778ffcda9b96c284"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ced2fb085c43bef21e863989129c54279b7c8e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ced2fb085c43bef21e863989129c54279b7c8e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ced2fb085c43bef21e863989129c54279b7c8e48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ced2fb085c43bef21e863989129c54279b7c8e48/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fb4d142f0554895b6cc03a03f6dcbded483b345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb4d142f0554895b6cc03a03f6dcbded483b345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fb4d142f0554895b6cc03a03f6dcbded483b345"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "a373ccfe95c7558a8cbc2f7fb36a37183796e2c6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced2fb085c43bef21e863989129c54279b7c8e48/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced2fb085c43bef21e863989129c54279b7c8e48/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ced2fb085c43bef21e863989129c54279b7c8e48", "patch": "@@ -1,5 +1,8 @@\n 2014-08-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/60417\n+\t* init.c (build_vec_init): Reorganize earlier change a bit.\n+\n \tPR c++/61994\n \t* init.c (build_vec_init): Leave atype an ARRAY_TYPE\n \tif we're just returning an INIT_EXPR."}, {"sha": "777e0a984e486b9896d7e6668920e2c0399237a3", "filename": "gcc/cp/init.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced2fb085c43bef21e863989129c54279b7c8e48/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced2fb085c43bef21e863989129c54279b7c8e48/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=ced2fb085c43bef21e863989129c54279b7c8e48", "patch": "@@ -3685,26 +3685,6 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t}\n     }\n \n-  /* If the initializer is {}, then all elements are initialized from T{}.\n-     But for non-classes, that's the same as value-initialization.  */\n-  if (empty_list)\n-    {\n-      if (cxx_dialect >= cxx11 && AGGREGATE_TYPE_P (type))\n-\t{\n-\t  if (BRACE_ENCLOSED_INITIALIZER_P (init)\n-\t      && CONSTRUCTOR_NELTS (init) == 0)\n-\t    /* Reuse it.  */;\n-\t  else\n-\t    init = build_constructor (init_list_type_node, NULL);\n-\t  CONSTRUCTOR_IS_DIRECT_INIT (init) = true;\n-\t}\n-      else\n-\t{\n-\t  init = NULL_TREE;\n-\t  explicit_value_init_p = true;\n-\t}\n-    }\n-\n   /* Now, default-initialize any remaining elements.  We don't need to\n      do that if a) the type does not need constructing, or b) we've\n      already initialized all the elements.\n@@ -3736,6 +3716,26 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n       to = build1 (INDIRECT_REF, type, base);\n \n+      /* If the initializer is {}, then all elements are initialized from T{}.\n+\t But for non-classes, that's the same as value-initialization.  */\n+      if (empty_list)\n+\t{\n+\t  if (cxx_dialect >= cxx11 && AGGREGATE_TYPE_P (type))\n+\t    {\n+\t      if (BRACE_ENCLOSED_INITIALIZER_P (init)\n+\t\t  && CONSTRUCTOR_NELTS (init) == 0)\n+\t\t/* Reuse it.  */;\n+\t      else\n+\t\tinit = build_constructor (init_list_type_node, NULL);\n+\t      CONSTRUCTOR_IS_DIRECT_INIT (init) = true;\n+\t    }\n+\t  else\n+\t    {\n+\t      init = NULL_TREE;\n+\t      explicit_value_init_p = true;\n+\t    }\n+\t}\n+\n       if (from_array)\n \t{\n \t  tree from;"}]}