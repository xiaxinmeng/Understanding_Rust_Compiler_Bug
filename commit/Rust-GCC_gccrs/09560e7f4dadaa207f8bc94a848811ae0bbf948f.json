{"sha": "09560e7f4dadaa207f8bc94a848811ae0bbf948f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk1NjBlN2Y0ZGFkYWEyMDdmOGJjOTRhODQ4ODExYWUwYmJmOTQ4Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-10-15T16:36:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-10-15T16:36:11Z"}, "message": "re PR c++/58707 ([C++11] A greater-than operator in square brackets should not end a template argument list)\n\n/cp\n2013-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58707\n\t* parser.c (cp_parser_postfix_open_square_expression): Set\n\tparser->greater_than_is_operator_p for the argument.\n\n/testsuite\n2013-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58707\n\t* g++.dg/cpp0x/pr58707.C: New.\n\nFrom-SVN: r203624", "tree": {"sha": "c4af60d10233b14ad5ff26eb9ae83f38709ceda0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4af60d10233b14ad5ff26eb9ae83f38709ceda0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09560e7f4dadaa207f8bc94a848811ae0bbf948f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09560e7f4dadaa207f8bc94a848811ae0bbf948f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09560e7f4dadaa207f8bc94a848811ae0bbf948f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09560e7f4dadaa207f8bc94a848811ae0bbf948f/comments", "author": null, "committer": null, "parents": [{"sha": "a1b499a31047004bb5966c835413c2f5aa16446e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b499a31047004bb5966c835413c2f5aa16446e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b499a31047004bb5966c835413c2f5aa16446e"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "ed30e1bccbb95a0c65a8286b7d7eca0a537c1f36", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09560e7f4dadaa207f8bc94a848811ae0bbf948f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09560e7f4dadaa207f8bc94a848811ae0bbf948f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=09560e7f4dadaa207f8bc94a848811ae0bbf948f", "patch": "@@ -1,3 +1,9 @@\n+2013-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58707\n+\t* parser.c (cp_parser_postfix_open_square_expression): Set\n+\tparser->greater_than_is_operator_p for the argument.\n+\n 2013-10-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58633"}, {"sha": "e33f5a278ab31705dbf31f971dc9d9a0a36e8eed", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09560e7f4dadaa207f8bc94a848811ae0bbf948f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09560e7f4dadaa207f8bc94a848811ae0bbf948f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=09560e7f4dadaa207f8bc94a848811ae0bbf948f", "patch": "@@ -6231,10 +6231,14 @@ cp_parser_postfix_open_square_expression (cp_parser *parser,\n {\n   tree index = NULL_TREE;\n   location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n+  bool saved_greater_than_is_operator_p;\n \n   /* Consume the `[' token.  */\n   cp_lexer_consume_token (parser->lexer);\n \n+  saved_greater_than_is_operator_p = parser->greater_than_is_operator_p;\n+  parser->greater_than_is_operator_p = true;\n+\n   /* Parse the index expression.  */\n   /* ??? For offsetof, there is a question of what to allow here.  If\n      offsetof is not being used in an integral constant expression context,\n@@ -6278,6 +6282,8 @@ cp_parser_postfix_open_square_expression (cp_parser *parser,\n \tindex = cp_parser_expression (parser, /*cast_p=*/false, NULL);\n     }\n \n+  parser->greater_than_is_operator_p = saved_greater_than_is_operator_p;\n+\n   /* Look for the closing `]'.  */\n   cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);\n "}, {"sha": "f290da8ac78c5fb2e47f4fcd1d70532f7aafc8de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09560e7f4dadaa207f8bc94a848811ae0bbf948f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09560e7f4dadaa207f8bc94a848811ae0bbf948f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09560e7f4dadaa207f8bc94a848811ae0bbf948f", "patch": "@@ -1,3 +1,8 @@\n+2013-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58707\n+\t* g++.dg/cpp0x/pr58707.C: New.\n+\n 2013-10-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* c-c++-common/cpp/openmp-define-3.c: Move effective target check"}, {"sha": "12f2e309788ebe0f30ab5a97de10b9aa6495a3b1", "filename": "gcc/testsuite/g++.dg/cpp0x/pr58707.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09560e7f4dadaa207f8bc94a848811ae0bbf948f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58707.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09560e7f4dadaa207f8bc94a848811ae0bbf948f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58707.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58707.C?ref=09560e7f4dadaa207f8bc94a848811ae0bbf948f", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/58707\n+// { dg-do compile { target c++11 } }\n+\n+template<int i> class TC { };\n+constexpr int foo[] = { 42 };\n+TC<foo[0 > 1]> bar;"}]}