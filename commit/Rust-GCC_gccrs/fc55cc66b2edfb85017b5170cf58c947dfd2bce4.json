{"sha": "fc55cc66b2edfb85017b5170cf58c947dfd2bce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1NWNjNjZiMmVkZmI4NTAxN2I1MTcwY2Y1OGM5NDdkZmQyYmNlNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-12T19:54:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-12T19:54:00Z"}, "message": "(unused_list): New variable.\n\n(build_tmp_function_decl): Call push_parm_decl with new format.\n(start_class): Initialize unused_list.\n(start_method_def): Call push_parm_decl with new format and mark _cmp as\npossibly unused.\n\nFrom-SVN: r9658", "tree": {"sha": "f9b6343c631ed0a655596f0246f6ebe7378abbed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9b6343c631ed0a655596f0246f6ebe7378abbed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc55cc66b2edfb85017b5170cf58c947dfd2bce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc55cc66b2edfb85017b5170cf58c947dfd2bce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc55cc66b2edfb85017b5170cf58c947dfd2bce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc55cc66b2edfb85017b5170cf58c947dfd2bce4/comments", "author": null, "committer": null, "parents": [{"sha": "f6999fed2e51fd54094e580be271d5fe86951223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6999fed2e51fd54094e580be271d5fe86951223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6999fed2e51fd54094e580be271d5fe86951223"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "c9ffd16f58f497b90e286178506b7f39bb5de21d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc55cc66b2edfb85017b5170cf58c947dfd2bce4/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc55cc66b2edfb85017b5170cf58c947dfd2bce4/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=fc55cc66b2edfb85017b5170cf58c947dfd2bce4", "patch": "@@ -357,6 +357,7 @@ static char* TAG_EXECCLASS;\n /* Some commonly used instances of \"identifier_node\".  */\n \n static tree self_id, ucmd_id;\n+static tree unused_list;\n \n static tree self_decl, umsg_decl, umsg_super_decl;\n static tree objc_get_class_decl, objc_get_meta_class_decl;\n@@ -2820,14 +2821,18 @@ build_tmp_function_decl ()\n   /* struct objc_object *objc_xxx (id, SEL, ...); */\n   pushlevel (0);\n   decl_specs = build_tree_list (NULLT, objc_object_reference);\n-  push_parm_decl (build_tree_list (decl_specs,\n-\t\t\t\t   build1 (INDIRECT_REF, NULLT, NULLT)));\n+  push_parm_decl (build_tree_list\n+\t\t  (build_tree_list (decl_specs,\n+\t\t\t\t    build1 (INDIRECT_REF, NULLT, NULLT)),\n+\t\t   build_tree_list (NULL_TREE, NULL_TREE)));\n+\t\t\t\t\t\t    \n \n   decl_specs = build_tree_list (NULLT, xref_tag (RECORD_TYPE,\n \t\t\t\t\t  get_identifier (TAG_SELECTOR)));\n   expr_decl = build1 (INDIRECT_REF, NULLT, NULLT);\n \n-  push_parm_decl (build_tree_list (decl_specs, expr_decl));\n+  push_parm_decl (build_tree_list (build_tree_list (decl_specs, expr_decl),\n+\t\t\t\t   build_tree_list (NULL_TREE, NULL_TREE)));\n   parms = get_parm_info (0);\n   poplevel (0, 0, 0);\n \n@@ -5859,10 +5864,12 @@ start_class (code, class_name, super_name, protocol_list)\n \n       /* pre-build the following entities - for speed/convenience. */\n       if (!self_id)\n-        self_id = get_identifier (\"self\");\n+\t  self_id = get_identifier (\"self\");\n       if (!ucmd_id)\n         ucmd_id = get_identifier (\"_cmd\");\n-\n+      if (!unused_list)\n+\tunused_list\n+\t  = build_tree_list (get_identifier (\"__unused__\"), NULL_TREE);\n       if (!objc_super_template)\n \tobjc_super_template = build_super_template ();\n \n@@ -5937,7 +5944,9 @@ start_class (code, class_name, super_name, protocol_list)\n         self_id = get_identifier (\"self\");\n       if (!ucmd_id)\n         ucmd_id = get_identifier (\"_cmd\");\n-\n+      if (!unused_list)\n+\tunused_list\n+\t  = build_tree_list (get_identifier (\"__unused__\"), NULL_TREE);\n       if (!objc_super_template)\n \tobjc_super_template = build_super_template ();\n \n@@ -6575,19 +6584,24 @@ start_method_def (method)\n        assign to self...which changes its type midstream.  */\n     decl_specs = build_tree_list (NULLT, objc_object_reference);\n \n-  push_parm_decl (build_tree_list (decl_specs,\n-\t\t\t\t   build1 (INDIRECT_REF, NULLT, self_id)));\n+  push_parm_decl (build_tree_list\n+\t\t  (build_tree_list (decl_specs,\n+\t\t\t\t    build1 (INDIRECT_REF, NULLT, self_id)),\n+\t\t   build_tree_list (NULL_TREE, NULL_TREE)));\n \n #ifdef OBJC_INT_SELECTORS\n   decl_specs = build_tree_list (NULLT, ridpointers[(int) RID_UNSIGNED]);\n   decl_specs = tree_cons (NULLT, ridpointers[(int) RID_INT], decl_specs);\n-  push_parm_decl (build_tree_list (decl_specs, ucmd_id));\n+  push_parm_decl (build_tree_list (build_tree_list (decl_specs, ucmd_id),\n+\t\t\t\t   build_tree_list (unused_list, NULL_TREE)));\n #else /* not OBJC_INT_SELECTORS */\n   decl_specs = build_tree_list (NULLT,\n \t\t\t\txref_tag (RECORD_TYPE,\n \t\t\t\t\t  get_identifier (TAG_SELECTOR)));\n-  push_parm_decl (build_tree_list (decl_specs,\n-\t\t\t\t   build1 (INDIRECT_REF, NULLT, ucmd_id)));\n+  push_parm_decl (build_tree_list\n+\t\t  (build_tree_list (decl_specs,\n+\t\t\t\t    build1 (INDIRECT_REF, NULLT, ucmd_id)),\n+\t\t   build_tree_list (unused_list, NULL_TREE)));\n #endif /* not OBJC_INT_SELECTORS */\n \n   /* generate argument declarations if a keyword_decl */\n@@ -6605,13 +6619,17 @@ start_method_def (method)\n \n \t      /* unite the abstract decl with its name */\n \t      TREE_OPERAND (last_expr, 0) = KEYWORD_ARG_NAME (arglist);\n-\t      push_parm_decl (build_tree_list (arg_spec, arg_decl));\n+\t      push_parm_decl (build_tree_list\n+\t\t\t      (build_tree_list (arg_spec, arg_decl),\n+\t\t\t       build_tree_list (NULL_TREE, NULL_TREE)));\n \t      /* unhook...restore the abstract declarator */\n \t      TREE_OPERAND (last_expr, 0) = NULLT;\n \t    }\n \t  else\n-\t    push_parm_decl (build_tree_list (arg_spec,\n-\t\t\t\t\t     KEYWORD_ARG_NAME (arglist)));\n+\t    push_parm_decl (build_tree_list\n+\t\t\t    (build_tree_list (arg_spec,\n+\t\t\t\t\t      KEYWORD_ARG_NAME (arglist)),\n+\t\t\t     build_tree_list (NULL_TREE, NULL_TREE)));\n \n \t  arglist = TREE_CHAIN (arglist);\n \t}"}]}