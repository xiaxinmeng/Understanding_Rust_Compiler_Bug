{"sha": "91febb0e2bb8a0f891bcb17a142d952a689c5dbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmZWJiMGUyYmI4YTBmODkxYmNiMTdhMTQyZDk1MmE2ODljNWRiYg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-11T20:21:57Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-11T20:21:57Z"}, "message": "2018-10-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/forward_list.h\n\t(_Fwd_list_iterator<>::operator==): Replace member function with inline\n\tfriend.\n\t(_Fwd_list_iterator<>::operator!=): Likewise.\n\t(_Fwd_list_const_iterator<>::operator==): Likewise.\n\t(_Fwd_list_const_iterator<>::operator!=): Likewise.\n\t(operator==(const _Fwd_list_iterator<>&,\n\tconst _Fwd_list_const_iterator<>&)): Remove.\n\t(operator!=(const _Fwd_list_iterator<>&,\n\tconst _Fwd_list_const_iterator<>&)): Remove.\n\t(forward_list<>::_Node): Take typedef from base type.\n\t(forward_list<>::iterator): Likewise.\n\t(forward_list<>::const_iterator): Likewise.\n\nFrom-SVN: r265060", "tree": {"sha": "0f4cf137a825944d5ead060aa8bc3e7bca52322a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f4cf137a825944d5ead060aa8bc3e7bca52322a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91febb0e2bb8a0f891bcb17a142d952a689c5dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91febb0e2bb8a0f891bcb17a142d952a689c5dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91febb0e2bb8a0f891bcb17a142d952a689c5dbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91febb0e2bb8a0f891bcb17a142d952a689c5dbb/comments", "author": null, "committer": null, "parents": [{"sha": "2c4f9ec16214b53c53c46dd3a0a22f18a268bc28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4f9ec16214b53c53c46dd3a0a22f18a268bc28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4f9ec16214b53c53c46dd3a0a22f18a268bc28"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "74a781e53c83ad6ad4a88f9c0f8bb141a7ef5261", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91febb0e2bb8a0f891bcb17a142d952a689c5dbb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91febb0e2bb8a0f891bcb17a142d952a689c5dbb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=91febb0e2bb8a0f891bcb17a142d952a689c5dbb", "patch": "@@ -1,3 +1,19 @@\n+2018-10-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/forward_list.h\n+\t(_Fwd_list_iterator<>::operator==): Replace member function with inline\n+\tfriend.\n+\t(_Fwd_list_iterator<>::operator!=): Likewise.\n+\t(_Fwd_list_const_iterator<>::operator==): Likewise.\n+\t(_Fwd_list_const_iterator<>::operator!=): Likewise.\n+\t(operator==(const _Fwd_list_iterator<>&,\n+\tconst _Fwd_list_const_iterator<>&)): Remove.\n+\t(operator!=(const _Fwd_list_iterator<>&,\n+\tconst _Fwd_list_const_iterator<>&)): Remove.\n+\t(forward_list<>::_Node): Take typedef from base type.\n+\t(forward_list<>::iterator): Likewise.\n+\t(forward_list<>::const_iterator): Likewise.\n+\n 2018-10-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/80538"}, {"sha": "ebec3b5c818de34ad735d54f29bb815007c70055", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91febb0e2bb8a0f891bcb17a142d952a689c5dbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91febb0e2bb8a0f891bcb17a142d952a689c5dbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=91febb0e2bb8a0f891bcb17a142d952a689c5dbb", "patch": "@@ -173,13 +173,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn __tmp;\n       }\n \n-      bool\n-      operator==(const _Self& __x) const noexcept\n-      { return _M_node == __x._M_node; }\n+      /**\n+       *  @brief  Forward list iterator equality comparison.\n+       */\n+      friend bool\n+      operator==(const _Self& __x, const _Self& __y) noexcept\n+      { return __x._M_node == __y._M_node; }\n \n-      bool\n-      operator!=(const _Self& __x) const noexcept\n-      { return _M_node != __x._M_node; }\n+\n+      /**\n+       *  @brief  Forward list iterator inequality comparison.\n+       */\n+      friend bool\n+      operator!=(const _Self& __x, const _Self& __y) noexcept\n+      { return __x._M_node != __y._M_node; }\n \n       _Self\n       _M_next() const noexcept\n@@ -244,13 +251,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn __tmp;\n       }\n \n-      bool\n-      operator==(const _Self& __x) const noexcept\n-      { return _M_node == __x._M_node; }\n+      /**\n+       *  @brief  Forward list const_iterator equality comparison.\n+       */\n+      friend bool\n+      operator==(const _Self& __x, const _Self& __y) noexcept\n+      { return __x._M_node == __y._M_node; }\n \n-      bool\n-      operator!=(const _Self& __x) const noexcept\n-      { return _M_node != __x._M_node; }\n+      /**\n+       *  @brief  Forward list const_iterator inequality comparison.\n+       */\n+      friend bool\n+      operator!=(const _Self& __x, const _Self& __y) noexcept\n+      { return __x._M_node != __y._M_node; }\n \n       _Self\n       _M_next() const noexcept\n@@ -264,24 +277,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const _Fwd_list_node_base* _M_node;\n     };\n \n-  /**\n-   *  @brief  Forward list iterator equality comparison.\n-   */\n-  template<typename _Tp>\n-    inline bool\n-    operator==(const _Fwd_list_iterator<_Tp>& __x,\n-\t       const _Fwd_list_const_iterator<_Tp>& __y) noexcept\n-    { return __x._M_node == __y._M_node; }\n-\n-  /**\n-   *  @brief  Forward list iterator inequality comparison.\n-   */\n-  template<typename _Tp>\n-    inline bool\n-    operator!=(const _Fwd_list_iterator<_Tp>& __x,\n-\t       const _Fwd_list_const_iterator<_Tp>& __y) noexcept\n-    { return __x._M_node != __y._M_node; }\n-\n   /**\n    *  @brief  Base class for %forward_list.\n    */\n@@ -433,8 +428,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n     private:\n       typedef _Fwd_list_base<_Tp, _Alloc>\t\t_Base;\n-      typedef _Fwd_list_node<_Tp>\t\t\t_Node;\n       typedef _Fwd_list_node_base\t\t\t_Node_base;\n+      typedef typename _Base::_Node\t\t\t_Node;\n       typedef typename _Base::_Node_alloc_type\t\t_Node_alloc_type;\n       typedef typename _Base::_Node_alloc_traits\t_Node_alloc_traits;\n       typedef allocator_traits<__alloc_rebind<_Alloc, _Tp>>\t_Alloc_traits;\n@@ -447,8 +442,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef value_type&\t\t\t\treference;\n       typedef const value_type&\t\t\t\tconst_reference;\n \n-      typedef _Fwd_list_iterator<_Tp>\t\t\titerator;\n-      typedef _Fwd_list_const_iterator<_Tp>\t\tconst_iterator;\n+      typedef typename _Base::iterator\t\t\titerator;\n+      typedef typename _Base::const_iterator\t\tconst_iterator;\n       typedef std::size_t\t\t\t\tsize_type;\n       typedef std::ptrdiff_t\t\t\t\tdifference_type;\n       typedef _Alloc\t\t\t\t\tallocator_type;"}]}