{"sha": "7dc3263c6918509d45d7b51be7a55e18b67f2734", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjMzI2M2M2OTE4NTA5ZDQ1ZDdiNTFiZTdhNTVlMThiNjdmMjczNA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-03-20T11:32:54Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-03-20T11:32:54Z"}, "message": "re PR target/49868 (Implement named address space to place/access data in flash memory)\n\n\tPR target/49868\n\t* gcc.target/avr/torture/addr-space-2.h: New file.\n\t* gcc.target/avr/torture/addr-space-2-g.h: New test.\n\t* gcc.target/avr/torture/addr-space-2-0.h: New test.\n\t* gcc.target/avr/torture/addr-space-2-1.h: New test.\n\t* gcc.target/avr/torture/addr-space-2-x.h: New test.\n\nFrom-SVN: r185570", "tree": {"sha": "1609f5c7e132c475c370590d58b0934f0d4f20f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1609f5c7e132c475c370590d58b0934f0d4f20f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc3263c6918509d45d7b51be7a55e18b67f2734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc3263c6918509d45d7b51be7a55e18b67f2734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc3263c6918509d45d7b51be7a55e18b67f2734", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc3263c6918509d45d7b51be7a55e18b67f2734/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b260a8c034ca3fe57bfab408065bc8dc46c4f186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b260a8c034ca3fe57bfab408065bc8dc46c4f186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b260a8c034ca3fe57bfab408065bc8dc46c4f186"}], "stats": {"total": 150, "additions": 146, "deletions": 4}, "files": [{"sha": "dfdee374764268b038b7cddade615bccce9feefa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7dc3263c6918509d45d7b51be7a55e18b67f2734", "patch": "@@ -1,3 +1,12 @@\n+2012-03-20  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/49868\n+\t* gcc.target/avr/torture/addr-space-2.h: New file.\n+\t* gcc.target/avr/torture/addr-space-2-g.h: New test.\n+\t* gcc.target/avr/torture/addr-space-2-0.h: New test.\n+\t* gcc.target/avr/torture/addr-space-2-1.h: New test.\n+\t* gcc.target/avr/torture/addr-space-2-x.h: New test.\n+\n 2012-03-20  Richard Guenther  <rguenther@suse.de>\n \n \t* gnat.dg/pack16.adb: New testcase.\n@@ -295,10 +304,10 @@\n \n \tPR target/49868\n \t* gcc.target/avr/torture/addr-space-1.h: New file.\n-\t* gcc.target/avr/torture/addr-space-g.h: New test.\n-\t* gcc.target/avr/torture/addr-space-0.h: New test.\n-\t* gcc.target/avr/torture/addr-space-1.h: New test.\n-\t* gcc.target/avr/torture/addr-space-x.h: New test.\n+\t* gcc.target/avr/torture/addr-space-1-g.h: New test.\n+\t* gcc.target/avr/torture/addr-space-1-0.h: New test.\n+\t* gcc.target/avr/torture/addr-space-1-1.h: New test.\n+\t* gcc.target/avr/torture/addr-space-1-x.h: New test.\n \n 2012-03-12  Andrew Pinski  <apinski@cavium.com>\n "}, {"sha": "d5d4f92a93f6f4dea6a46e5c9384788fcb99d890", "filename": "gcc/testsuite/gcc.target/avr/torture/addr-space-2-0.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-0.c?ref=7dc3263c6918509d45d7b51be7a55e18b67f2734", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-std=gnu99\" } */\n+/* { dg-do run } */\n+\n+#define __as __flash\n+\n+#include \"addr-space-2.h\""}, {"sha": "c8041f7d1e4c99b5932717f5bdb7e45f4f8a91f1", "filename": "gcc/testsuite/gcc.target/avr/torture/addr-space-2-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-1.c?ref=7dc3263c6918509d45d7b51be7a55e18b67f2734", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-std=gnu99 -Tavr51-flash1.x\" } */\n+/* { dg-do run } */\n+\n+#define __as __flash1\n+\n+#include \"addr-space-2.h\""}, {"sha": "ad0b2b8410e5aa6d44c2249ceca0944f90f92e89", "filename": "gcc/testsuite/gcc.target/avr/torture/addr-space-2-g.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-g.c?ref=7dc3263c6918509d45d7b51be7a55e18b67f2734", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-std=gnu99\" } */\n+/* { dg-do run } */\n+\n+#define __as\n+\n+#include \"addr-space-2.h\""}, {"sha": "846cca47dd05d3853b30b34d0761eb02011e9ee8", "filename": "gcc/testsuite/gcc.target/avr/torture/addr-space-2-x.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2-x.c?ref=7dc3263c6918509d45d7b51be7a55e18b67f2734", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-std=gnu99 -Wa,--no-warn\" } */\n+/* { dg-do run } */\n+\n+/* --no-warn because: \"assembling 24-bit address needs binutils extension\"\n+   see binutils PR13503.  */\n+\n+#define __as __memx\n+\n+#include \"addr-space-2.h\""}, {"sha": "c95a1631ab0ead1ef97971d1ee68c8ed6dd5c672", "filename": "gcc/testsuite/gcc.target/avr/torture/addr-space-2.h", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc3263c6918509d45d7b51be7a55e18b67f2734/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-2.h?ref=7dc3263c6918509d45d7b51be7a55e18b67f2734", "patch": "@@ -0,0 +1,106 @@\n+extern void exit (int);\n+extern void abort (void);\n+\n+typedef struct T\n+{\n+  char val;\n+  const __as struct T *l, *r;\n+} tree;\n+\n+/*\n+                    abcd   \n+                   /    \\\n+                 ab      cd\n+                /  \\    /  \\\n+               a    b  c    d\n+*/\n+\n+const __as tree a = { 'a', 0, 0 };\n+const __as tree b = { 'b', 0, 0 };\n+const __as tree c = { 'c', 0, 0 };\n+const __as tree d = { 'd', 0, 0 };\n+\n+const __as tree ab = { 'A', &a, &b };\n+const __as tree cd = { 'C', &c, &d };\n+\n+const __as tree abcd = { '*', &ab, &cd };\n+\n+static void\n+test1 (void)\n+{\n+  if (abcd.val != '*')\n+    abort();\n+\n+  if (abcd.l->val != 'A')\n+    abort();\n+  if (abcd.r->val != 'C')\n+    abort();\n+\n+  if (abcd.l->l->val != 'a')\n+    abort();\n+  if (abcd.l->r->val != 'b')\n+    abort();\n+  if (abcd.r->l->val != 'c')\n+    abort();\n+  if (abcd.r->r->val != 'd')\n+    abort();\n+}\n+\n+static void\n+test2 (const __as tree *t)\n+{\n+  if (t->val != '*')\n+    abort();\n+\n+  if (t->l->val != 'A')\n+    abort();\n+  if (t->r->val != 'C')\n+    abort();\n+\n+  if (t->l->l->val != 'a')\n+    abort();\n+  if (t->l->r->val != 'b')\n+    abort();\n+  if (t->r->l->val != 'c')\n+    abort();\n+  if (t->r->r->val != 'd')\n+    abort();\n+}\n+\n+static void\n+test3 (const __as tree *pt)\n+{\n+  tree t = *pt;\n+  \n+  if (t.val != '*')\n+    abort();\n+\n+  if (t.l->val != 'A')\n+    abort();\n+  if (t.r->val != 'C')\n+    abort();\n+\n+  if (t.l->l->val != 'a')\n+    abort();\n+  if (t.l->r->val != 'b')\n+    abort();\n+  if (t.r->l->val != 'c')\n+    abort();\n+  if (t.r->r->val != 'd')\n+    abort();\n+}\n+\n+int main (void)\n+{\n+  const __as tree *t = &abcd;\n+  test1();\n+  test2 (&abcd);\n+  test3 (&abcd);\n+\n+  __asm (\"\" : \"+r\" (t));\n+  test2 (t);\n+  test3 (t);\n+  \n+  exit (0);\n+  return 0;\n+}"}]}