{"sha": "67e18edbc6fcddeb11629224e53629bdb59c7ed1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdlMThlZGJjNmZjZGRlYjExNjI5MjI0ZTUzNjI5YmRiNTljN2VkMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-02-24T04:56:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-02-24T04:56:26Z"}, "message": "cp-tree.h (DECL_PARM_LEVEL): New.\n\n\t* cp-tree.h (DECL_PARM_LEVEL): New.\n\t(struct lang_decl_parm): Add level field.\n\t* name-lookup.c (function_parm_depth): New fn.\n\t* name-lookup.h: Declare it.\n\t* parser.c (cp_parser_parameter_declaration_list): Use it.\n\t* mangle.c (struct globals): Add parm_depth field.\n\t(write_bare_function_type): Adjust it.\n\t(write_expression): Include the level delta in PARM_DECL mangling\n\tfor abi >= 6.\n\n\t* semantics.c (finish_decltype_type): Remove shortcut for decltype\n\tof id-expression.\n\t* mangle.c (write_type) [DECLTYPE_TYPE]: Strip it here for abi < 6.\n\nFrom-SVN: r170459", "tree": {"sha": "d6fdd251fa53f073e7a55645ed002529e562a279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6fdd251fa53f073e7a55645ed002529e562a279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67e18edbc6fcddeb11629224e53629bdb59c7ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e18edbc6fcddeb11629224e53629bdb59c7ed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67e18edbc6fcddeb11629224e53629bdb59c7ed1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e18edbc6fcddeb11629224e53629bdb59c7ed1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a30f819c7f84dcee4987b96d7e9d8ea0177fe90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a30f819c7f84dcee4987b96d7e9d8ea0177fe90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a30f819c7f84dcee4987b96d7e9d8ea0177fe90"}], "stats": {"total": 176, "additions": 148, "deletions": 28}, "files": [{"sha": "c064b51ce647a2f72c43fc83a80feede5557d975", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -1,3 +1,7 @@\n+2011-02-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* common.opt (fabi-version): Document v5 and v6.\n+\n 2011-02-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/47849"}, {"sha": "2717b11cc1cbd845c9bb89834715281d109e14ff", "filename": "gcc/common.opt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -741,6 +741,12 @@ Driver Undocumented\n ; 4: The version of the ABI that introduces unambiguous mangling of\n ;    vector types.\n ;\n+; 5: The version of the ABI that ignores attribute const/noreturn\n+;    in function pointer mangling.\n+;\n+; 6: The version of the ABI that corrects mangling of decltype and\n+;    function parameters used in other parameters and the return type.\n+;\n ; Additional positive integers will be assigned as new versions of\n ; the ABI become the default version of the ABI.\n fabi-version="}, {"sha": "8637ee0b369aca60db7ea6045103acae6087587f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -1,3 +1,19 @@\n+2011-02-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (DECL_PARM_LEVEL): New.\n+\t(struct lang_decl_parm): Add level field.\n+\t* name-lookup.c (function_parm_depth): New fn.\n+\t* name-lookup.h: Declare it.\n+\t* parser.c (cp_parser_parameter_declaration_list): Use it.\n+\t* mangle.c (struct globals): Add parm_depth field.\n+\t(write_bare_function_type): Adjust it.\n+\t(write_expression): Include the level delta in PARM_DECL mangling\n+\tfor abi >= 6.\n+\n+\t* semantics.c (finish_decltype_type): Remove shortcut for decltype\n+\tof id-expression.\n+\t* mangle.c (write_type) [DECLTYPE_TYPE]: Strip it here for abi < 6.\n+\n 2011-02-23  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c++/46868"}, {"sha": "ee72322a3544f7eb75027fed15d5b89c2e9fd1ec", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -1914,6 +1914,7 @@ struct GTY(()) lang_decl_ns {\n \n struct GTY(()) lang_decl_parm {\n   struct lang_decl_base base;\n+  int level;\n   int index;\n };\n \n@@ -2108,6 +2109,13 @@ struct GTY((variable_size)) lang_decl {\n #define DECL_PARM_INDEX(NODE) \\\n   (LANG_DECL_PARM_CHECK (NODE)->index)\n \n+/* The level of a user-declared parameter in its function, starting at 1.\n+   A parameter of the function will have level 1; a parameter of the first\n+   nested function declarator (i.e. t in void f (void (*p)(T t))) will have\n+   level 2.  */\n+#define DECL_PARM_LEVEL(NODE) \\\n+  (LANG_DECL_PARM_CHECK (NODE)->level)\n+\n /* Nonzero if the VTT parm has been added to NODE.  */\n #define DECL_HAS_VTT_PARM_P(NODE) \\\n   (LANG_DECL_FN_CHECK (NODE)->has_vtt_parm_p)"}, {"sha": "dca8b604daa9586887317cac02efcc305d8b2572", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -96,6 +96,9 @@ typedef struct GTY(()) globals {\n   /* The entity that is being mangled.  */\n   tree GTY ((skip)) entity;\n \n+  /* How many parameter scopes we are inside.  */\n+  int parm_depth;\n+\n   /* True if the mangling will be different in a future version of the\n      ABI.  */\n   bool need_abi_warning;\n@@ -1931,6 +1934,35 @@ write_type (tree type)\n \t      gcc_assert (!DECLTYPE_FOR_LAMBDA_CAPTURE (type)\n \t\t\t  && !DECLTYPE_FOR_LAMBDA_RETURN (type));\n \n+\t      /* In ABI <6, we stripped decltype of a plain decl.  */\n+\t      if (!abi_version_at_least (6)\n+\t\t  && DECLTYPE_TYPE_ID_EXPR_OR_MEMBER_ACCESS_P (type))\n+\t\t{\n+\t\t  tree expr = DECLTYPE_TYPE_EXPR (type);\n+\t\t  tree etype = NULL_TREE;\n+\t\t  switch (TREE_CODE (expr))\n+\t\t    {\n+\t\t    case VAR_DECL:\n+\t\t    case PARM_DECL:\n+\t\t    case RESULT_DECL:\n+\t\t    case FUNCTION_DECL:\n+\t\t    case CONST_DECL:\n+\t\t    case TEMPLATE_PARM_INDEX:\n+\t\t      etype = TREE_TYPE (expr);\n+\t\t      break;\n+\n+\t\t    default:\n+\t\t      break;\n+\t\t    }\n+\n+\t\t  if (etype && !type_uses_auto (etype))\n+\t\t    {\n+\t\t      G.need_abi_warning = 1;\n+\t\t      write_type (etype);\n+\t\t      return;\n+\t\t    }\n+\t\t}\n+\n               write_char ('D');\n               if (DECLTYPE_TYPE_ID_EXPR_OR_MEMBER_ACCESS_P (type))\n                 write_char ('t');\n@@ -2270,9 +2302,11 @@ write_bare_function_type (const tree type, const int include_return_type_p,\n     write_type (TREE_TYPE (type));\n \n   /* Now mangle the types of the arguments.  */\n+  ++G.parm_depth;\n   write_method_parms (TYPE_ARG_TYPES (type),\n \t\t      TREE_CODE (type) == METHOD_TYPE,\n \t\t      decl);\n+  --G.parm_depth;\n }\n \n /* Write the mangled representation of a method parameter list of\n@@ -2458,8 +2492,28 @@ write_expression (tree expr)\n     {\n       /* A function parameter used in a late-specified return type.  */\n       int index = DECL_PARM_INDEX (expr);\n+      int level = DECL_PARM_LEVEL (expr);\n+      int delta = G.parm_depth - level + 1;\n       gcc_assert (index >= 1);\n-      write_string (\"fp\");\n+      write_char ('f');\n+      if (delta != 0)\n+\t{\n+\t  if (abi_version_at_least (6))\n+\t    {\n+\t      /* Let L be the number of function prototype scopes from the\n+\t\t innermost one (in which the parameter reference occurs) up\n+\t\t to (and including) the one containing the declaration of\n+\t\t the referenced parameter.  If the parameter declaration\n+\t\t clause of the innermost function prototype scope has been\n+\t\t completely seen, it is not counted (in that case -- which\n+\t\t is perhaps the most common -- L can be zero).  */\n+\t      write_char ('L');\n+\t      write_unsigned_number (delta - 1);\n+\t    }\n+\t  else\n+\t    G.need_abi_warning = true;\n+\t}\n+      write_char ('p');\n       write_compact_number (index - 1);\n     }\n   else if (DECL_P (expr))"}, {"sha": "4117202351dfc6d488732257aa23f589376ce085", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -1635,6 +1635,22 @@ getdecls (void)\n   return current_binding_level->names;\n }\n \n+/* Return how many function prototypes we are currently nested inside.  */\n+\n+int\n+function_parm_depth (void)\n+{\n+  int level = 0;\n+  struct cp_binding_level *b;\n+\n+  for (b = current_binding_level;\n+       b->kind == sk_function_parms;\n+       b = b->level_chain)\n+    ++level;\n+\n+  return level;\n+}\n+\n /* For debugging.  */\n static int no_print_functions = 0;\n static int no_print_builtins = 0;"}, {"sha": "bfcac69c110d10d54dd5fbac01fe6165daee8a5e", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -333,6 +333,7 @@ extern bool pushdecl_class_level (tree);\n extern tree pushdecl_namespace_level (tree, bool);\n extern bool push_class_level_binding (tree, tree);\n extern tree getdecls (void);\n+extern int function_parm_depth (void);\n extern tree cp_namespace_decls (tree);\n extern void set_decl_namespace (tree, tree, bool);\n extern void push_decl_namespace (tree);"}, {"sha": "1e8f03bddca94cdcd8284abf24b8d812fcbd09d5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -15942,6 +15942,7 @@ cp_parser_parameter_declaration_list (cp_parser* parser, bool *is_error)\n \t{\n \t  retrofit_lang_decl (decl);\n \t  DECL_PARM_INDEX (decl) = ++index;\n+\t  DECL_PARM_LEVEL (decl) = function_parm_depth ();\n \t}\n \n       /* Add the new parameter to the list.  */"}, {"sha": "8a7dd7d5e6294fb7036e6093c8ad61cbd2edcb3f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -4772,6 +4772,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n       return error_mark_node;\n     }\n \n+  /* FIXME instantiation-dependent  */\n   if (type_dependent_expression_p (expr)\n       /* In a template, a COMPONENT_REF has an IDENTIFIER_NODE for op1 even\n \t if it isn't dependent, so that we can check access control at\n@@ -4780,27 +4781,6 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n \t  && processing_template_decl\n \t  && TREE_CODE (expr) == COMPONENT_REF))\n     {\n-      if (id_expression_or_member_access_p)\n-\t{\n-\t  switch (TREE_CODE (expr))\n-\t    {\n-\t    case VAR_DECL:\n-\t    case PARM_DECL:\n-\t    case RESULT_DECL:\n-\t    case FUNCTION_DECL:\n-\t    case CONST_DECL:\n-\t    case TEMPLATE_PARM_INDEX:\n-\t      type = TREE_TYPE (expr);\n-\t      break;\n-\n-\t    default:\n-\t      break;\n-\t    }\n-\t}\n-\n-      if (type && !type_uses_auto (type))\n-\treturn type;\n-\n     treat_as_dependent:\n       type = cxx_make_type (DECLTYPE_TYPE);\n       DECLTYPE_TYPE_EXPR (type) = expr;"}, {"sha": "dc92141f8000eea8997581c4b303e0fff66954a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -1,3 +1,13 @@\n+2011-02-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/abi/mangle39.C: Adjust parm mangling.\n+\t* g++.dg/abi/mangle45.C: New.\n+\n+\t* g++.dg/cpp0x/trailing1.C: Mangle decltype.\n+\t* g++.dg/template/canon-type-9.C: Match use of decltype\n+\tbetween declaration and definition.\n+\t* g++.dg/template/canon-type-12.C: Likewise.\n+\n 2011-02-23  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/40850"}, {"sha": "272385b6de060f0c73141680c7f31eb5079a3932", "filename": "gcc/testsuite/g++.dg/abi/mangle39.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle39.C?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -1,7 +1,7 @@\n // PR c++/42338\n // { dg-options \"-std=c++0x\" }\n // { dg-final { scan-assembler \"_Z1fIPiEDTcmppfp_Li0EET_\" } }\n-// { dg-final { scan-assembler \"_Z1gIiEvRK1AIT_EDTixfp_Li0EE\" } }\n+// { dg-final { scan-assembler \"_Z1gIiEvRK1AIT_EDTixfL0p_Li0EE\" } }\n \n template<typename T>\n auto f(T t) -> decltype(++t, 0)"}, {"sha": "8e20831f1163311e0547d654a30403856ea11a42", "filename": "gcc/testsuite/g++.dg/abi/mangle45.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle45.C?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -0,0 +1,25 @@\n+// Testcase for mangling of parameters used other than in a trailing return type\n+// { dg-options -std=c++0x }\n+\n+template<class T> void f(T p, decltype(p)) { }                // L = 1\n+template<class T> void g(T p, decltype(p) (*)()) { }          // L = 1\n+// G++ incorrectly rejects these currently.\n+// template<class T> void h(T p, auto (*)()->decltype(p));    // L = 1\n+// template<class T> void i(T p, auto (*)(T q)->decltype(q)); // L = 0\n+// template<class T> void j(T p, auto (*)(decltype(p))->T);   // L = 2\n+template<class T> void k(T p, int (*(*)(T* p))[sizeof(p)]) {} // L = 1\n+\n+int garg();\n+int (*karg (int*))[sizeof(int)];\n+int main()\n+{\n+  // { dg-final { scan-assembler  \"_Z1fIiEvT_DtfL0p_E\" } }\n+  f (1,0);\n+  // { dg-final { scan-assembler  \"_Z1gIiEvT_PFDtfL0p_EvE\" } }\n+  g (1,garg);\n+  // h (1,0);\n+  // i (1,0);\n+  // j (1,0);\n+  // { dg-final { scan-assembler  \"_Z1kIiEvT_PFPAszfL0p__iPS0_E\" } }\n+  k (1,karg);\n+}"}, {"sha": "fcf65e3b01c4d7a8219f0edf28d06fa2cdfbcf5a", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing1.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing1.C?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -78,7 +78,6 @@ auto k(T t, U u, V v) -> decltype (t.U::template B<V>::MEM)\n   return t.U::template B<V>::MEM;\n }\n \n-// For these two examples we can elide the 'decltype' and just mangle the type.\n template <class T>\n auto l(T t) -> decltype (t)\n {\n@@ -111,8 +110,8 @@ int main()\n   h(a,1.0);\n   // { dg-final { scan-assembler \"_Z1kI1C1AIiE1DEDtdtfp_srNT0_1BIT1_EE3MEMET_S4_S6_\" } }\n   k( C(), A<int>(), D() );\n-  // { dg-final { scan-assembler \"_Z1lIiET_S0_\" } }\n+  // { dg-final { scan-assembler \"_Z1lIiEDtfp_ET_\" } }\n   l(1);\n-  // { dg-final { scan-assembler \"_Z1mIiLi1EET_S0_\" } }\n+  // { dg-final { scan-assembler \"_Z1mIiLi1EEDtT0_ET_\" } }\n   m<int,1>(1);\n }"}, {"sha": "08c86f0a9810a63f3b86f8ce1ec64b24460839a7", "filename": "gcc/testsuite/g++.dg/template/canon-type-12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-12.C?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -9,7 +9,7 @@ struct S\n \n template<class T, T t>\n void\n-S<T, t>::foo(T)\n+S<T, t>::foo(decltype(t))\n {\n }\n "}, {"sha": "4fcd5243534d047021fd7c45e4f50084ce7fdb15", "filename": "gcc/testsuite/g++.dg/template/canon-type-9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e18edbc6fcddeb11629224e53629bdb59c7ed1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-9.C?ref=67e18edbc6fcddeb11629224e53629bdb59c7ed1", "patch": "@@ -11,7 +11,7 @@ struct S\n };\n \n template<class T, T *u>\n-T* S<T, u>::foo(T)\n+decltype(u) S<T, u>::foo(T)\n {\n   T t;\n   return t;"}]}