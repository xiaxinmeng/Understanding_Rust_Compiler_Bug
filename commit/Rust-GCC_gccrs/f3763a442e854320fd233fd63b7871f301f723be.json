{"sha": "f3763a442e854320fd233fd63b7871f301f723be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM3NjNhNDQyZTg1NDMyMGZkMjMzZmQ2M2I3ODcxZjMwMWY3MjNiZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-10-25T17:26:52Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-10-25T17:26:52Z"}, "message": "re PR c++/6994 (ICE in find_function_data)\n\n\tPR middle-end/6994\n\n\t* c-objc-common.c (inline_forbidden_p): Can not inline\n\tfunctions containing structures or unions containing VLAs.\n\t* tree-inline.c (walk_tree): For all class 't' nodes, walk\n\tTYPE_SIZE and TYPE_SIZE_UNIT.\n\t(copy_tree_r): Copy types if they are variably modified.\n\n\t* g++.dg/ext/vla1.C, gcc.dg/vla-2.c: New tests.\n\nFrom-SVN: r58535", "tree": {"sha": "f4aabed9d6786dc267e9c2ce167b8defec608eb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4aabed9d6786dc267e9c2ce167b8defec608eb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3763a442e854320fd233fd63b7871f301f723be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3763a442e854320fd233fd63b7871f301f723be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3763a442e854320fd233fd63b7871f301f723be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3763a442e854320fd233fd63b7871f301f723be/comments", "author": null, "committer": null, "parents": [{"sha": "6eb359685e52f13a7c6236184300b43e5a4d7ca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb359685e52f13a7c6236184300b43e5a4d7ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb359685e52f13a7c6236184300b43e5a4d7ca6"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "dc01d932a05e89bf537689efb37a8d8d4b1ed703", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3763a442e854320fd233fd63b7871f301f723be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3763a442e854320fd233fd63b7871f301f723be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3763a442e854320fd233fd63b7871f301f723be", "patch": "@@ -1,3 +1,12 @@\n+2002-10-25  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR middle-end/6994\n+\t* c-objc-common.c (inline_forbidden_p): Can not inline\n+\tfunctions containing structures or unions containing VLAs.\n+\t* tree-inline.c (walk_tree): For all class 't' nodes, walk\n+\tTYPE_SIZE and TYPE_SIZE_UNIT.\n+\t(copy_tree_r): Copy types if they are variably modified.\n+\n 2002-10-25  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.md: Remove old-style peepholes."}, {"sha": "2d67b8f21c04c1248e7494c40f27695d3d58d0c3", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3763a442e854320fd233fd63b7871f301f723be/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3763a442e854320fd233fd63b7871f301f723be/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=f3763a442e854320fd233fd63b7871f301f723be", "patch": "@@ -133,6 +133,22 @@ inline_forbidden_p (nodep, walk_subtrees, fn)\n \n       break;\n \n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+      /* We cannot inline a function of the form\n+\n+\t   void F (int i) { struct S { int ar[i]; } s; }\n+\n+\t Attempting to do so produces a catch-22 in tree-inline.c.\n+\t If walk_tree examines the TYPE_FIELDS chain of RECORD_TYPE/\n+\t UNION_TYPE nodes, then it goes into infinite recursion on a\n+\t structure containing a pointer to its own type.  If it doesn't,\n+\t then the type node for S doesn't get adjusted properly when\n+\t F is inlined, and we abort in find_function_data.  */\n+      for (t = TYPE_FIELDS (node); t; t = TREE_CHAIN (t))\n+\tif (variably_modified_type_p (TREE_TYPE (t)))\n+\t  return node;\n+\n     default:\n       break;\n     }"}, {"sha": "e7e3cff5de2fc754d7490ab86cc02d5d492b298d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3763a442e854320fd233fd63b7871f301f723be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3763a442e854320fd233fd63b7871f301f723be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3763a442e854320fd233fd63b7871f301f723be", "patch": "@@ -1,3 +1,7 @@\n+2002-10-25  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* g++.dg/ext/vla1.C, gcc.dg/vla-2.c: New tests.\n+\n 2002-10-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/abi/empty9.C: New test."}, {"sha": "bac5aaca1a50cb44fa1eeabd42d7ea33bb9396c8", "filename": "gcc/testsuite/g++.dg/ext/vla1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3763a442e854320fd233fd63b7871f301f723be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3763a442e854320fd233fd63b7871f301f723be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C?ref=f3763a442e854320fd233fd63b7871f301f723be", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Crash tests from PR middle-end/6994.  See also gcc.dg/vla-2.c.\n+// A::A is acceptable extended C++ (VLA types brought over from C99);\n+// B::B is not, but is closely related to acceptable extended C, though\n+// not to acceptable C99.\n+\n+class A { A (int); };\n+\n+A::A (int i)\n+{\n+  int ar[1][i];    // { dg-error \"variable-size array\" }\n+\n+  ar[0][0] = 0;\n+}\n+\n+class B { B (int); };\n+\n+B::B (int i)\n+{\n+  struct S {\n+    int ar[1][i];  // { dg-error \"variable-size|variably modified\" }\n+  } s;\n+\n+  s.ar[0][0] = 0;  // { dg-error \"no member\" }\n+}"}, {"sha": "72c6465903054adcb2ff96fdb25932b6f715520e", "filename": "gcc/testsuite/gcc.dg/vla-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3763a442e854320fd233fd63b7871f301f723be/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3763a442e854320fd233fd63b7871f301f723be/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-2.c?ref=f3763a442e854320fd233fd63b7871f301f723be", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* These are crash tests related to PR middle-end/6994; see also\n+   g++.dg/ext/vla1.C.  Note that at present A and C cannot be inlined.  */\n+\n+static inline void A (int i)\n+{\n+  struct S { int ar[1][i]; } s;\n+\n+  s.ar[0][0] = 0;\n+}\n+\n+void B(void)\n+{\n+  A(23);\n+}\n+\n+static inline void C (int i)\n+{\n+  union U { int ar[1][i]; } u;\n+\n+  u.ar[0][0] = 0;\n+}\n+\n+void D(void)\n+{\n+  C(23);\n+}"}, {"sha": "898dacb3668d2394470b4e854e41164ae05300be", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3763a442e854320fd233fd63b7871f301f723be/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3763a442e854320fd233fd63b7871f301f723be/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=f3763a442e854320fd233fd63b7871f301f723be", "patch": "@@ -1543,6 +1543,12 @@ walk_tree (tp, func, data, htab_)\n     {\n       WALK_SUBTREE_TAIL (TREE_TYPE (*tp));\n     }\n+  else if (TREE_CODE_CLASS (code) == 't')\n+    {\n+      WALK_SUBTREE (TYPE_SIZE (*tp));\n+      WALK_SUBTREE (TYPE_SIZE_UNIT (*tp));\n+      /* Also examine various special fields, below.  */\n+    }\n \n   result = (*lang_hooks.tree_inlining.walk_subtrees) (tp, &walk_subtrees, func,\n \t\t\t\t\t\t      data, htab);\n@@ -1711,8 +1717,8 @@ copy_tree_r (tp, walk_subtrees, data)\n \tTREE_CHAIN (*tp) = chain;\n #endif /* INLINER_FOR_JAVA */\n     }\n-  else if (TREE_CODE_CLASS (code) == 't')\n-    /* There's no need to copy types, or anything beneath them.  */\n+  else if (TREE_CODE_CLASS (code) == 't' && !variably_modified_type_p (*tp))\n+    /* Types only need to be copied if they are variably modified.  */\n     *walk_subtrees = 0;\n \n   return NULL_TREE;"}]}