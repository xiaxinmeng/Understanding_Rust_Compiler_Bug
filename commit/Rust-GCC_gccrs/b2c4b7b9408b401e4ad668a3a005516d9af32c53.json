{"sha": "b2c4b7b9408b401e4ad668a3a005516d9af32c53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJjNGI3Yjk0MDhiNDAxZTRhZDY2OGEzYTAwNTUxNmQ5YWYzMmM1Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-02-17T22:36:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-17T22:36:10Z"}, "message": "compiler: Add parameter names to export information.\n\n\t* Make-lang.in (go/import.o): Add dependency on $(GO_LEX_H).\n\nFrom-SVN: r184353", "tree": {"sha": "0ee6ebaf6cb2e24a987c173ccd14c68971ead20d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ee6ebaf6cb2e24a987c173ccd14c68971ead20d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2c4b7b9408b401e4ad668a3a005516d9af32c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c4b7b9408b401e4ad668a3a005516d9af32c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c4b7b9408b401e4ad668a3a005516d9af32c53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c4b7b9408b401e4ad668a3a005516d9af32c53/comments", "author": null, "committer": null, "parents": [{"sha": "0a9115099d8f130f3649b2fad1a59535e563ac1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9115099d8f130f3649b2fad1a59535e563ac1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9115099d8f130f3649b2fad1a59535e563ac1e"}], "stats": {"total": 146, "additions": 100, "deletions": 46}, "files": [{"sha": "eb2638fd54d0cfde3e5c954e63bfac047844d3a5", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=b2c4b7b9408b401e4ad668a3a005516d9af32c53", "patch": "@@ -1,3 +1,7 @@\n+2012-02-17  Ian Lance Taylor  <iant@google.com>\n+\n+\t* Make-lang.in (go/import.o): Add dependency on $(GO_LEX_H).\n+\n 2012-02-17  Ian Lance Taylor  <iant@google.com>\n \n \t* gospec.c (lang_specific_driver): If linking, and no -o option"}, {"sha": "34e5584cc09153fd2fe0f0763b0e9b7e82166265", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=b2c4b7b9408b401e4ad668a3a005516d9af32c53", "patch": "@@ -295,7 +295,8 @@ go/gogo.o: go/gofrontend/gogo.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n \t$(GO_IMPORT_H) $(GO_EXPORT_H) go/gofrontend/backend.h $(GO_GOGO_H)\n go/import.o: go/gofrontend/import.cc $(GO_SYSTEM_H) \\\n \t$(srcdir)/../include/filenames.h $(srcdir)/../include/simple-object.h \\\n-\t$(GO_C_H) $(GO_GOGO_H) $(GO_TYPES_H) $(GO_EXPORT_H) $(GO_IMPORT_H)\n+\t$(GO_C_H) $(GO_GOGO_H) $(GO_LEX_H) $(GO_TYPES_H) $(GO_EXPORT_H) \\\n+\t$(GO_IMPORT_H)\n go/import-archive.o: go/gofrontend/import-archive.cc $(GO_SYSTEM_H) \\\n \t$(GO_IMPORT_H)\n go/lex.o: go/gofrontend/lex.cc $(GO_LEX_H) $(GO_SYSTEM_H)"}, {"sha": "1fceb3b0fdc8e44076d09022c531033cf8c0abbb", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=b2c4b7b9408b401e4ad668a3a005516d9af32c53", "patch": "@@ -229,6 +229,17 @@ Export::write_imported_init_fns(\n   this->write_c_string(\";\\n\");\n }\n \n+// Write a name to the export stream.\n+\n+void\n+Export::write_name(const std::string& name)\n+{\n+  if (name.empty())\n+    this->write_c_string(\"?\");\n+  else\n+    this->write_string(Gogo::message_name(name));\n+}\n+\n // Export a type.  We have to ensure that on import we create a single\n // Named_type node for each named type.  We do this by keeping a hash\n // table mapping named types to reference numbers.  The first time we"}, {"sha": "a558510eab3d9d06f3a8504676b2873c1fa1fb01", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=b2c4b7b9408b401e4ad668a3a005516d9af32c53", "patch": "@@ -145,6 +145,10 @@ class Export : public String_dump\n   write_bytes(const char* bytes, size_t length)\n   { this->stream_->write_bytes(bytes, length); }\n \n+  // Write a name to the export stream.  If NAME is empty, write \"?\".\n+  void\n+  write_name(const std::string& name);\n+\n   // Write out a type.  This handles references back to previous\n   // definitions.\n   void"}, {"sha": "638cacbe2c937bdaf382a4cda81d6da42e2cde01", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=b2c4b7b9408b401e4ad668a3a005516d9af32c53", "patch": "@@ -11783,7 +11783,7 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n \t   p != method_parameters->end();\n \t   ++p, ++i)\n \t{\n-\t  if (!p->name().empty() && p->name() != Import::import_marker)\n+\t  if (!p->name().empty())\n \t    parameters->push_back(*p);\n \t  else\n \t    {"}, {"sha": "b4c522ef51ba6a7c30ca0076b8b7d15624fe1320", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=b2c4b7b9408b401e4ad668a3a005516d9af32c53", "patch": "@@ -3274,7 +3274,10 @@ Function::export_func_with_type(Export* exp, const std::string& name,\n   if (fntype->is_method())\n     {\n       exp->write_c_string(\"(\");\n-      exp->write_type(fntype->receiver()->type());\n+      const Typed_identifier* receiver = fntype->receiver();\n+      exp->write_name(receiver->name());\n+      exp->write_c_string(\" \");\n+      exp->write_type(receiver->type());\n       exp->write_c_string(\") \");\n     }\n \n@@ -3294,6 +3297,8 @@ Function::export_func_with_type(Export* exp, const std::string& name,\n \t    first = false;\n \t  else\n \t    exp->write_c_string(\", \");\n+\t  exp->write_name(p->name());\n+\t  exp->write_c_string(\" \");\n \t  if (!is_varargs || p + 1 != parameters->end())\n \t    exp->write_type(p->type());\n \t  else\n@@ -3308,7 +3313,7 @@ Function::export_func_with_type(Export* exp, const std::string& name,\n   const Typed_identifier_list* results = fntype->results();\n   if (results != NULL)\n     {\n-      if (results->size() == 1)\n+      if (results->size() == 1 && results->begin()->name().empty())\n \t{\n \t  exp->write_c_string(\" \");\n \t  exp->write_type(results->begin()->type());\n@@ -3325,6 +3330,8 @@ Function::export_func_with_type(Export* exp, const std::string& name,\n \t\tfirst = false;\n \t      else\n \t\texp->write_c_string(\", \");\n+\t      exp->write_name(p->name());\n+\t      exp->write_c_string(\" \");\n \t      exp->write_type(p->type());\n \t    }\n \t  exp->write_c_string(\")\");\n@@ -3348,9 +3355,10 @@ Function::import_func(Import* imp, std::string* pname,\n   if (imp->peek_char() == '(')\n     {\n       imp->require_c_string(\"(\");\n+      std::string name = imp->read_name();\n+      imp->require_c_string(\" \");\n       Type* rtype = imp->read_type();\n-      *preceiver = new Typed_identifier(Import::import_marker, rtype,\n-\t\t\t\t\timp->location());\n+      *preceiver = new Typed_identifier(name, rtype, imp->location());\n       imp->require_c_string(\") \");\n     }\n \n@@ -3366,6 +3374,9 @@ Function::import_func(Import* imp, std::string* pname,\n       parameters = new Typed_identifier_list();\n       while (true)\n \t{\n+\t  std::string name = imp->read_name();\n+\t  imp->require_c_string(\" \");\n+\n \t  if (imp->match_c_string(\"...\"))\n \t    {\n \t      imp->advance(3);\n@@ -3375,8 +3386,8 @@ Function::import_func(Import* imp, std::string* pname,\n \t  Type* ptype = imp->read_type();\n \t  if (*is_varargs)\n \t    ptype = Type::make_array_type(ptype, NULL);\n-\t  parameters->push_back(Typed_identifier(Import::import_marker,\n-\t\t\t\t\t\t ptype, imp->location()));\n+\t  parameters->push_back(Typed_identifier(name, ptype,\n+\t\t\t\t\t\t imp->location()));\n \t  if (imp->peek_char() != ',')\n \t    break;\n \t  go_assert(!*is_varargs);\n@@ -3396,17 +3407,18 @@ Function::import_func(Import* imp, std::string* pname,\n       if (imp->peek_char() != '(')\n \t{\n \t  Type* rtype = imp->read_type();\n-\t  results->push_back(Typed_identifier(Import::import_marker, rtype,\n-\t\t\t\t\t      imp->location()));\n+\t  results->push_back(Typed_identifier(\"\", rtype, imp->location()));\n \t}\n       else\n \t{\n \t  imp->require_c_string(\"(\");\n \t  while (true)\n \t    {\n+\t      std::string name = imp->read_name();\n+\t      imp->require_c_string(\" \");\n \t      Type* rtype = imp->read_type();\n-\t      results->push_back(Typed_identifier(Import::import_marker,\n-\t\t\t\t\t\t  rtype, imp->location()));\n+\t      results->push_back(Typed_identifier(name, rtype,\n+\t\t\t\t\t\t  imp->location()));\n \t      if (imp->peek_char() != ',')\n \t\tbreak;\n \t      imp->require_c_string(\", \");"}, {"sha": "6cecf19f70b36aa5b0e1357a753a498cc7801e80", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=b2c4b7b9408b401e4ad668a3a005516d9af32c53", "patch": "@@ -11,6 +11,7 @@\n \n #include \"go-c.h\"\n #include \"gogo.h\"\n+#include \"lex.h\"\n #include \"types.h\"\n #include \"export.h\"\n #include \"import.h\"\n@@ -33,11 +34,6 @@ go_add_search_path(const char* path)\n   search_path.push_back(std::string(path));\n }\n \n-// The name used for parameters, receivers, and results in imported\n-// function types.\n-\n-const char* const Import::import_marker = \"*imported*\";\n-\n // Find import data.  This searches the file system for FILENAME and\n // returns a pointer to a Stream object to read the data that it\n // exports.  If the file is not found, it returns NULL.\n@@ -749,6 +745,21 @@ Import::read_identifier()\n   return ret;\n }\n \n+// Read a name from the stream.\n+\n+std::string\n+Import::read_name()\n+{\n+  std::string ret = this->read_identifier();\n+  if (ret == \"?\")\n+    ret.clear();\n+  else if (!Lex::is_exported_name(ret))\n+    ret = ('.' + this->package_->unique_prefix()\n+\t   + '.' + this->package_->name()\n+\t   + '.' + ret);\n+  return ret;\n+}\n+\n // Turn a string into a integer with appropriate error handling.\n \n bool"}, {"sha": "b4d203527f7dd43aadd2340b5f627277188c26f6", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=b2c4b7b9408b401e4ad668a3a005516d9af32c53", "patch": "@@ -181,14 +181,15 @@ class Import\n   std::string\n   read_identifier();\n \n+  // Read a name.  This is like read_identifier, except that a \"?\" is\n+  // returned as an empty string.  This matches Export::write_name.\n+  std::string\n+  read_name();\n+\n   // Read a type.\n   Type*\n   read_type();\n \n-  // The name used for parameters, receivers, and results in imported\n-  // function types.\n-  static const char* const import_marker;\n-\n  private:\n   static Stream*\n   try_package_in_directory(const std::string&, Location);"}, {"sha": "f8b6f1a3113f22048ffea8fdb2f0c458b2685f61", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c4b7b9408b401e4ad668a3a005516d9af32c53/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=b2c4b7b9408b401e4ad668a3a005516d9af32c53", "patch": "@@ -3111,9 +3111,7 @@ Function_type::is_valid_redeclaration(const Function_type* t,\n   // A redeclaration of a function is required to use the same names\n   // for the receiver and parameters.\n   if (this->receiver() != NULL\n-      && this->receiver()->name() != t->receiver()->name()\n-      && this->receiver()->name() != Import::import_marker\n-      && t->receiver()->name() != Import::import_marker)\n+      && this->receiver()->name() != t->receiver()->name())\n     {\n       if (reason != NULL)\n \t*reason = \"receiver name changed\";\n@@ -3129,9 +3127,7 @@ Function_type::is_valid_redeclaration(const Function_type* t,\n \t   p2 != parms2->end();\n \t   ++p2, ++p1)\n \t{\n-\t  if (p1->name() != p2->name()\n-\t      && p1->name() != Import::import_marker\n-\t      && p2->name() != Import::import_marker)\n+\t  if (p1->name() != p2->name())\n \t    {\n \t      if (reason != NULL)\n \t\t*reason = \"parameter name changed\";\n@@ -3160,9 +3156,7 @@ Function_type::is_valid_redeclaration(const Function_type* t,\n \t   res2 != results2->end();\n \t   ++res2, ++res1)\n \t{\n-\t  if (res1->name() != res2->name()\n-\t      && res1->name() != Import::import_marker\n-\t      && res2->name() != Import::import_marker)\n+\t  if (res1->name() != res2->name())\n \t    {\n \t      if (reason != NULL)\n \t\t*reason = \"result name changed\";\n@@ -3609,6 +3603,8 @@ Function_type::do_export(Export* exp) const\n \t    first = false;\n \t  else\n \t    exp->write_c_string(\", \");\n+\t  exp->write_name(p->name());\n+\t  exp->write_c_string(\" \");\n \t  if (!is_varargs || p + 1 != this->parameters_->end())\n \t    exp->write_type(p->type());\n \t  else\n@@ -3624,7 +3620,7 @@ Function_type::do_export(Export* exp) const\n   if (results != NULL)\n     {\n       exp->write_c_string(\" \");\n-      if (results->size() == 1)\n+      if (results->size() == 1 && results->begin()->name().empty())\n \texp->write_type(results->begin()->type());\n       else\n \t{\n@@ -3638,6 +3634,8 @@ Function_type::do_export(Export* exp) const\n \t\tfirst = false;\n \t      else\n \t\texp->write_c_string(\", \");\n+\t      exp->write_name(p->name());\n+\t      exp->write_c_string(\" \");\n \t      exp->write_type(p->type());\n \t    }\n \t  exp->write_c_string(\")\");\n@@ -3660,6 +3658,9 @@ Function_type::do_import(Import* imp)\n       parameters = new Typed_identifier_list();\n       while (true)\n \t{\n+\t  std::string name = imp->read_name();\n+\t  imp->require_c_string(\" \");\n+\n \t  if (imp->match_c_string(\"...\"))\n \t    {\n \t      imp->advance(3);\n@@ -3669,8 +3670,8 @@ Function_type::do_import(Import* imp)\n \t  Type* ptype = imp->read_type();\n \t  if (is_varargs)\n \t    ptype = Type::make_array_type(ptype, NULL);\n-\t  parameters->push_back(Typed_identifier(Import::import_marker,\n-\t\t\t\t\t\t ptype, imp->location()));\n+\t  parameters->push_back(Typed_identifier(name, ptype,\n+\t\t\t\t\t\t imp->location()));\n \t  if (imp->peek_char() != ',')\n \t    break;\n \t  go_assert(!is_varargs);\n@@ -3689,17 +3690,18 @@ Function_type::do_import(Import* imp)\n       if (imp->peek_char() != '(')\n \t{\n \t  Type* rtype = imp->read_type();\n-\t  results->push_back(Typed_identifier(Import::import_marker, rtype,\n-\t\t\t\t\t      imp->location()));\n+\t  results->push_back(Typed_identifier(\"\", rtype, imp->location()));\n \t}\n       else\n \t{\n \t  imp->advance(1);\n \t  while (true)\n \t    {\n+\t      std::string name = imp->read_name();\n+\t      imp->require_c_string(\" \");\n \t      Type* rtype = imp->read_type();\n-\t      results->push_back(Typed_identifier(Import::import_marker,\n-\t\t\t\t\t\t  rtype, imp->location()));\n+\t      results->push_back(Typed_identifier(name, rtype,\n+\t\t\t\t\t\t  imp->location()));\n \t      if (imp->peek_char() != ',')\n \t\tbreak;\n \t      imp->require_c_string(\", \");\n@@ -7185,7 +7187,7 @@ Interface_type::do_export(Export* exp) const\n \t{\n \t  if (pm->name().empty())\n \t    {\n-\t      exp->write_c_string(\"$ \");\n+\t      exp->write_c_string(\"? \");\n \t      exp->write_type(pm->type());\n \t    }\n \t  else\n@@ -7209,6 +7211,8 @@ Interface_type::do_export(Export* exp) const\n \t\t\tfirst = false;\n \t\t      else\n \t\t\texp->write_c_string(\", \");\n+\t\t      exp->write_name(pp->name());\n+\t\t      exp->write_c_string(\" \");\n \t\t      if (!is_varargs || pp + 1 != parameters->end())\n \t\t\texp->write_type(pp->type());\n \t\t      else\n@@ -7226,7 +7230,7 @@ Interface_type::do_export(Export* exp) const\n \t      if (results != NULL)\n \t\t{\n \t\t  exp->write_c_string(\" \");\n-\t\t  if (results->size() == 1)\n+\t\t  if (results->size() == 1 && results->begin()->name().empty())\n \t\t    exp->write_type(results->begin()->type());\n \t\t  else\n \t\t    {\n@@ -7241,6 +7245,8 @@ Interface_type::do_export(Export* exp) const\n \t\t\t    first = false;\n \t\t\t  else\n \t\t\t    exp->write_c_string(\", \");\n+\t\t\t  exp->write_name(p->name());\n+\t\t\t  exp->write_c_string(\" \");\n \t\t\t  exp->write_type(p->type());\n \t\t\t}\n \t\t      exp->write_c_string(\")\");\n@@ -7267,7 +7273,7 @@ Interface_type::do_import(Import* imp)\n     {\n       std::string name = imp->read_identifier();\n \n-      if (name == \"$\")\n+      if (name == \"?\")\n \t{\n \t  imp->require_c_string(\" \");\n \t  Type* t = imp->read_type();\n@@ -7287,6 +7293,9 @@ Interface_type::do_import(Import* imp)\n \t  parameters = new Typed_identifier_list;\n \t  while (true)\n \t    {\n+\t      std::string name = imp->read_name();\n+\t      imp->require_c_string(\" \");\n+\n \t      if (imp->match_c_string(\"...\"))\n \t\t{\n \t\t  imp->advance(3);\n@@ -7296,8 +7305,8 @@ Interface_type::do_import(Import* imp)\n \t      Type* ptype = imp->read_type();\n \t      if (is_varargs)\n \t\tptype = Type::make_array_type(ptype, NULL);\n-\t      parameters->push_back(Typed_identifier(Import::import_marker,\n-\t\t\t\t\t\t     ptype, imp->location()));\n+\t      parameters->push_back(Typed_identifier(name, ptype,\n+\t\t\t\t\t\t     imp->location()));\n \t      if (imp->peek_char() != ',')\n \t\tbreak;\n \t      go_assert(!is_varargs);\n@@ -7316,17 +7325,18 @@ Interface_type::do_import(Import* imp)\n \t  if (imp->peek_char() != '(')\n \t    {\n \t      Type* rtype = imp->read_type();\n-\t      results->push_back(Typed_identifier(Import::import_marker,\n-\t\t\t\t\t\t  rtype, imp->location()));\n+\t      results->push_back(Typed_identifier(\"\", rtype, imp->location()));\n \t    }\n \t  else\n \t    {\n \t      imp->advance(1);\n \t      while (true)\n \t\t{\n+\t\t  std::string name = imp->read_name();\n+\t\t  imp->require_c_string(\" \");\n \t\t  Type* rtype = imp->read_type();\n-\t\t  results->push_back(Typed_identifier(Import::import_marker,\n-\t\t\t\t\t\t      rtype, imp->location()));\n+\t\t  results->push_back(Typed_identifier(name, rtype,\n+\t\t\t\t\t\t      imp->location()));\n \t\t  if (imp->peek_char() != ',')\n \t\t    break;\n \t\t  imp->require_c_string(\", \");"}]}