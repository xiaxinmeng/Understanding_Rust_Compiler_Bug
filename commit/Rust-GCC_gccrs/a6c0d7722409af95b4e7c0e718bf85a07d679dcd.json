{"sha": "a6c0d7722409af95b4e7c0e718bf85a07d679dcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZjMGQ3NzIyNDA5YWY5NWI0ZTdjMGU3MThiZjg1YTA3ZDY3OWRjZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-12-06T22:11:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-06T22:11:45Z"}, "message": "re PR c++/13323 (Template code does not compile in presence of typedef)\n\n\tPR c++/13323\n\t* class.c (same_signature_p): Handle conversion operators\n\tcorrectly.\n\t(check_for_override): Likewise.\n\n\tPR c++/13323\n\t* g++.dg/inherit/operator2.C: New test.\n\nFrom-SVN: r74370", "tree": {"sha": "e8af9134037c4b519c2df775026d650d51634041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8af9134037c4b519c2df775026d650d51634041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6c0d7722409af95b4e7c0e718bf85a07d679dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c0d7722409af95b4e7c0e718bf85a07d679dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6c0d7722409af95b4e7c0e718bf85a07d679dcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c0d7722409af95b4e7c0e718bf85a07d679dcd/comments", "author": null, "committer": null, "parents": [{"sha": "9be6533af6dcbffc1f2ae91d7d108cf5171b75d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be6533af6dcbffc1f2ae91d7d108cf5171b75d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9be6533af6dcbffc1f2ae91d7d108cf5171b75d4"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "f2ec0e751bc92e908ae21262612f65fc22243e36", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c0d7722409af95b4e7c0e718bf85a07d679dcd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c0d7722409af95b4e7c0e718bf85a07d679dcd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a6c0d7722409af95b4e7c0e718bf85a07d679dcd", "patch": "@@ -1,3 +1,10 @@\n+2003-12-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13323\n+\t* class.c (same_signature_p): Handle conversion operators\n+\tcorrectly.\n+\t(check_for_override): Likewise.\n+\n 2003-12-06  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* Make-lang.in (GXX_CROSS_NAME, CXX_CROSS_NAME): Delete."}, {"sha": "72f03a254f7a8405a35ece1c23f38c7702fcf1fa", "filename": "gcc/cp/class.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c0d7722409af95b4e7c0e718bf85a07d679dcd/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c0d7722409af95b4e7c0e718bf85a07d679dcd/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a6c0d7722409af95b4e7c0e718bf85a07d679dcd", "patch": "@@ -1900,7 +1900,11 @@ same_signature_p (tree fndecl, tree base_fndecl)\n   if (DECL_DESTRUCTOR_P (base_fndecl) || DECL_DESTRUCTOR_P (fndecl))\n     return 0;\n \n-  if (DECL_NAME (fndecl) == DECL_NAME (base_fndecl))\n+  if (DECL_NAME (fndecl) == DECL_NAME (base_fndecl)\n+      || (DECL_CONV_FN_P (fndecl)\n+\t  && DECL_CONV_FN_P (base_fndecl)\n+\t  && same_type_p (DECL_CONV_FN_TYPE (fndecl),\n+\t\t\t  DECL_CONV_FN_TYPE (base_fndecl))))\n     {\n       tree types, base_types;\n       types = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n@@ -2439,7 +2443,8 @@ check_for_override (tree decl, tree ctype)\n          override a virtual function from a base class.  */\n     return;\n   if ((DECL_DESTRUCTOR_P (decl)\n-       || IDENTIFIER_VIRTUAL_P (DECL_NAME (decl)))\n+       || IDENTIFIER_VIRTUAL_P (DECL_NAME (decl))\n+       || DECL_CONV_FN_P (decl))\n       && look_for_overrides (ctype, decl)\n       && !DECL_STATIC_FUNCTION_P (decl))\n     /* Set DECL_VINDEX to a value that is neither an INTEGER_CST nor"}, {"sha": "d65ed7388145bcf17fb1719f2ad6d6098b554ef4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c0d7722409af95b4e7c0e718bf85a07d679dcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c0d7722409af95b4e7c0e718bf85a07d679dcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6c0d7722409af95b4e7c0e718bf85a07d679dcd", "patch": "@@ -1,3 +1,8 @@\n+2003-12-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13323\n+\t* g++.dg/inherit/operator2.C: New test.\n+\n 2003-12-05  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13305"}, {"sha": "09407e1b48986313e9026c89283b67eb3c498e67", "filename": "gcc/testsuite/g++.dg/inherit/operator2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c0d7722409af95b4e7c0e718bf85a07d679dcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Foperator2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c0d7722409af95b4e7c0e718bf85a07d679dcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Foperator2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Foperator2.C?ref=a6c0d7722409af95b4e7c0e718bf85a07d679dcd", "patch": "@@ -0,0 +1,22 @@\n+typedef int INT_TYPEDEF;\n+\n+template<class T>\n+class TypedIfc\n+{\n+public:\n+  virtual ~TypedIfc() { }\n+  virtual operator const T&() const = 0;\n+  virtual const T& operator= (const T& t) = 0;\n+};\n+\n+template<class Tnative>\n+class NullIfc : public TypedIfc<Tnative>\n+{\n+public:\n+  const Tnative& operator= (const Tnative& t) { return t; }\n+  operator const Tnative&() const { return *(Tnative *)0; }\n+};\n+\n+typedef TypedIfc<INT_TYPEDEF> INT_TYPEDEFIfc;\n+\n+NullIfc<int> i32;"}]}