{"sha": "f15ebf657dae6ed2812a42e5b306229197787e12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE1ZWJmNjU3ZGFlNmVkMjgxMmE0MmU1YjMwNjIyOTE5Nzc4N2UxMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@pool.informatik.rwth-aachen.de", "date": "1998-09-16T00:31:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-16T00:31:22Z"}, "message": "global.c (reg_allocno): Now static.\n\n        * global.c (reg_allocno): Now static.\n        * reload1.c (reg_allocno): Delete declaration.\n        (order_regs_for_reload): Take no arguments.  Don't treat regs\n        allocated by global differently than those allocated by local-alloc.\n\nFrom-SVN: r22446", "tree": {"sha": "e9a35627a7e4df73a67c70a1fc50623350278360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9a35627a7e4df73a67c70a1fc50623350278360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f15ebf657dae6ed2812a42e5b306229197787e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15ebf657dae6ed2812a42e5b306229197787e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f15ebf657dae6ed2812a42e5b306229197787e12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15ebf657dae6ed2812a42e5b306229197787e12/comments", "author": null, "committer": null, "parents": [{"sha": "b0e982be47fc5fe1747ce9dd1d7b08d50a511d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e982be47fc5fe1747ce9dd1d7b08d50a511d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e982be47fc5fe1747ce9dd1d7b08d50a511d94"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "ddb36b31295bb7ee9690e9820973e02ae9953762", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15ebf657dae6ed2812a42e5b306229197787e12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15ebf657dae6ed2812a42e5b306229197787e12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f15ebf657dae6ed2812a42e5b306229197787e12", "patch": "@@ -1,3 +1,10 @@\n+Wed Sep 16 01:29:12 1998  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de>\n+\n+\t* global.c (reg_allocno): Now static.\n+\t* reload1.c (reg_allocno): Delete declaration.\n+\t(order_regs_for_reload): Take no arguments.  Don't treat regs\n+\tallocated by global differently than those allocated by local-alloc.\n+\n Wed Sep 16 01:09:01 1998  Kamil Iskra  <iskra@student.uci.agh.edu.pl>\n \n \t* m68k/m68k.c (output_function_prologue): Reverse NO_ADDSUB_Q"}, {"sha": "a3d7e023283d5838ec6f438cadb84071283cb533", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15ebf657dae6ed2812a42e5b306229197787e12/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15ebf657dae6ed2812a42e5b306229197787e12/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=f15ebf657dae6ed2812a42e5b306229197787e12", "patch": "@@ -78,7 +78,7 @@ static int max_allocno;\n /* Indexed by (pseudo) reg number, gives the allocno, or -1\n    for pseudo registers which are not to be allocated.  */\n \n-int *reg_allocno;\n+static int *reg_allocno;\n \n /* Indexed by allocno, gives the reg number.  */\n "}, {"sha": "98cbae0cbc8101df6bc8fddd34903773444c0a6c", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15ebf657dae6ed2812a42e5b306229197787e12/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15ebf657dae6ed2812a42e5b306229197787e12/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f15ebf657dae6ed2812a42e5b306229197787e12", "patch": "@@ -286,9 +286,6 @@ char *reload_firstobj;\n \n /* List of labels that must never be deleted.  */\n extern rtx forced_labels;\n-\n-/* Allocation number table from global register allocation.  */\n-extern int *reg_allocno;\n \f\n /* This structure is used to record information about register eliminations.\n    Each array entry describes one possible way of eliminating a register\n@@ -374,7 +371,7 @@ static void mark_not_eliminable\t\tPROTO((rtx, rtx));\n static int spill_hard_reg\t\tPROTO((int, int, FILE *, int));\n static void scan_paradoxical_subregs\tPROTO((rtx));\n static int hard_reg_use_compare\t\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n-static void order_regs_for_reload\tPROTO((int));\n+static void order_regs_for_reload\tPROTO((void));\n static int compare_spill_regs\t\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n static void reload_as_needed\t\tPROTO((rtx, int));\n static void forget_old_reloads_1\tPROTO((rtx, rtx));\n@@ -853,7 +850,7 @@ reload (first, global, dumpfile)\n   /* Compute the order of preference for hard registers to spill.\n      Store them by decreasing preference in potential_reload_regs.  */\n \n-  order_regs_for_reload (global);\n+  order_regs_for_reload ();\n \n   /* So far, no hard regs have been spilled.  */\n   n_spills = 0;\n@@ -3926,8 +3923,7 @@ hard_reg_use_compare (p1p, p2p)\n    Store them in order of decreasing preference in potential_reload_regs.  */\n \n static void\n-order_regs_for_reload (global)\n-     int global;\n+order_regs_for_reload ()\n {\n   register int i;\n   register int o = 0;\n@@ -3956,15 +3952,7 @@ order_regs_for_reload (global)\n \t{\n \t  int lim = regno + HARD_REGNO_NREGS (regno, PSEUDO_REGNO_MODE (i));\n \t  while (regno < lim)\n-\t    {\n-\t      /* If allocated by local-alloc, show more uses since\n-\t\t we're not going to be able to reallocate it, but\n-\t\t we might if allocated by global alloc.  */\n-\t      if (global && reg_allocno[i] < 0)\n-\t\thard_reg_n_uses[regno].uses += (REG_N_REFS (i) + 1) / 2;\n-\n-\t      hard_reg_n_uses[regno++].uses += REG_N_REFS (i);\n-\t    }\n+\t    hard_reg_n_uses[regno++].uses += REG_N_REFS (i);\n \t}\n       large += REG_N_REFS (i);\n     }"}]}