{"sha": "b6121641fcd1aad93643d1f56440217ee9dc1c1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYxMjE2NDFmY2QxYWFkOTM2NDNkMWY1NjQ0MDIxN2VlOWRjMWMxYw==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2005-04-02T02:26:51Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2005-04-02T02:26:51Z"}, "message": "re PR libgcj/20090 (gij should be implemented in Java)\n\n2005-04-01  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* gcj.texi (Invoking gij): Add descriptions of new -X options.\n\tMention recognized-and-ignored compatibility options.\n\t(Memory allocation): Add descriptions of JvMalloc, JvRealloc and\n\tJvFree.\n\t(About CNI): Add Memory allocation section.\n\n2005-04-01  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\tPR libgcj/20090, PR libgcj/20526\n\t* gij.cc (nonstandard_opts_help): New function.\n\t(add_option): New function.\n\t(main): Support java options.  Set java.class.path.  Don't set\n\t_Jv_Jar_Class_Path.\n\t* prims.cc (parse_x_arg): New function.\n\t(parse_init_args): Call parse_x_arg for -X and _ options, when\n\tignoreUnrecognized is true.\n\t(new _Jv_RunMain): New vm_args variant.\n\t(old _Jv_RunMain): Call new vm_args _Jv_RunMain.\n\t(_Jv_Jar_Class_Path): Remove variable.\n\t* include/java-props.h: Likewise.\n\t* include/cni.h (JvRealloc): New function.\n\t* include/jvm.h (_Jv_RunMain): Declare vm_args variant.\n\t* java/lang/natRuntime.cc (insertSystemProperties): Remove\n\t_Jv_Jar_Class_Path logic.  Use JV_VERSION and JV_API_VERSION\n\tmacros.\n\t* configure.ac (JV_VERSION): Define.\n\t(JV_API_VERSION): Likewise.\n\t* configure: Regenerate.\n\t* include/config.h.in: Regenerate.\n\nFrom-SVN: r97429", "tree": {"sha": "de273602667841b3a2037c6f72fd0b12649073a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de273602667841b3a2037c6f72fd0b12649073a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6121641fcd1aad93643d1f56440217ee9dc1c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6121641fcd1aad93643d1f56440217ee9dc1c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6121641fcd1aad93643d1f56440217ee9dc1c1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6121641fcd1aad93643d1f56440217ee9dc1c1c/comments", "author": null, "committer": null, "parents": [{"sha": "ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8"}], "stats": {"total": 596, "additions": 472, "deletions": 124}, "files": [{"sha": "e45415e10aa1027916e6ae1160f69528b6d8a4ca", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -1,3 +1,11 @@\n+2005-04-01  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* gcj.texi (Invoking gij): Add descriptions of new -X options.\n+\tMention recognized-and-ignored compatibility options.\n+\t(Memory allocation): Add descriptions of JvMalloc, JvRealloc and\n+\tJvFree.\n+\t(About CNI): Add Memory allocation section.\n+\n 2005-04-01  Tom Tromey  <tromey@redhat.com>\n \n \t* decl.c (java_init_decl_processing): Fix types of"}, {"sha": "e71511af7708ae637e768057faf3147d2f5d26f7", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -949,16 +949,26 @@ be retrieved at runtime using the @code{java.lang.System.getProperty}\n method.\n \n @item -ms=@var{number}\n-This sets the initial heap size.\n+Equivalent to @code{-Xms}.\n \n @item -mx=@var{number}\n-This sets the maximum heap size.\n+Equivalent to @code{-Xmx}.\n \n @item -X\n @itemx -X@var{argument}\n Supplying @code{-X} by itself will cause @code{gij} to list all the\n-supported @code{-X} options.  Currently there are none.  Unrecognized\n-@code{-X} options are ignored, for compatibility with other runtimes.\n+supported @code{-X} options.  Currently these options are supported:\n+\n+@table @gcctabopt\n+@item -Xms@var{size}\n+Set the initial heap size.\n+\n+@item -Xmx@var{size}\n+Set the maximum heap size.\n+@end table\n+\n+Unrecognized @code{-X} options are ignored, for compatibility with\n+other runtimes.\n \n @item -jar\n This indicates that the name passed to @code{gij} should be interpreted\n@@ -971,6 +981,9 @@ Print help, then exit.\n @item --showversion\n Print version number and continue.\n \n+@item --fullversion\n+Print detailed version information, then exit.\n+\n @item --version\n Print version number, then exit.\n \n@@ -979,6 +992,12 @@ Print version number, then exit.\n Each time a class is initialized, print a short message on standard error.\n @end table\n \n+@code{gij} also recognizes and ignores the following options, for\n+compatibility with existing application launch scripts:\n+@code{-client}, @code{-server}, @code{-hotspot}, @code{-jrockit},\n+@code{-agentlib}, @code{-agentpath}, @code{-debug}, @code{-d32},\n+@code{-d64}, @code{-javaagent} and @code{-noclassgc}.\n+\n @c man end\n \n @node Invoking gcj-dbtool\n@@ -1250,6 +1269,7 @@ alternative to the standard JNI (Java Native Interface).\n * Objects and Classes::         C++ and Java classes.\n * Class Initialization::        How objects are initialized.\n * Object allocation::           How to create Java objects in C++.\n+* Memory allocation::           How to allocate and free memory.\n * Arrays::                      Dealing with Java arrays in C++.\n * Methods::                     Java methods in C++.\n * Strings::                     Information about Java Strings.\n@@ -1630,6 +1650,27 @@ java::util::Hashtable *ht = new java::util::Hashtable(120);\n @end example\n \n \n+@node Memory allocation\n+@section Memory allocation\n+\n+When allocting memory in @acronym{CNI} methods it is best to handle\n+out-of-memory conditions by throwing a Java exception.  These\n+functions are provided for that purpose:\n+\n+@deftypefun void* JvMalloc (jsize @var{size})\n+Calls malloc.  Throws @code{java.lang.OutOfMemoryError} if allocation\n+fails.\n+@end deftypefun\n+\n+@deftypefun void* JvRealloc (void* @var{ptr}, jsize @var{size})\n+Calls realloc.  Throws @code{java.lang.OutOfMemoryError} if\n+reallocation fails.\n+@end deftypefun\n+\n+@deftypefun void JvFree (void* @var{ptr})\n+Calls free.\n+@end deftypefun\n+\n @node Arrays\n @section Arrays\n "}, {"sha": "3492f48e1875998ec44f8b0e46acf77ab87da34b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -1,3 +1,27 @@\n+2005-04-01  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\tPR libgcj/20090, PR libgcj/20526\n+\t* gij.cc (nonstandard_opts_help): New function.\n+\t(add_option): New function.\n+\t(main): Support java options.  Set java.class.path.  Don't set\n+\t_Jv_Jar_Class_Path.\n+\t* prims.cc (parse_x_arg): New function.\n+\t(parse_init_args): Call parse_x_arg for -X and _ options, when\n+\tignoreUnrecognized is true.\n+\t(new _Jv_RunMain): New vm_args variant.\n+\t(old _Jv_RunMain): Call new vm_args _Jv_RunMain.\n+\t(_Jv_Jar_Class_Path): Remove variable.\n+\t* include/java-props.h: Likewise.\n+\t* include/cni.h (JvRealloc): New function.\n+\t* include/jvm.h (_Jv_RunMain): Declare vm_args variant.\n+\t* java/lang/natRuntime.cc (insertSystemProperties): Remove\n+\t_Jv_Jar_Class_Path logic.  Use JV_VERSION and JV_API_VERSION\n+\tmacros.\n+\t* configure.ac (JV_VERSION): Define.\n+\t(JV_API_VERSION): Likewise.\n+\t* configure: Regenerate.\n+\t* include/config.h.in: Regenerate.\n+\n 2005-04-01 Mark Anderson <mark@panonet.net>\n \n \t* java/lang/natDouble.cc (parseDouble): Handle NaN, Infinity and"}, {"sha": "20b22660b7aee3e5c66a54788e660eec13076287", "filename": "libjava/configure", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -13829,6 +13829,17 @@ _ACEOF\n \n \n \n+cat >>confdefs.h <<\\_ACEOF\n+#define JV_VERSION \"1.4.2\"\n+_ACEOF\n+\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define JV_API_VERSION \"1.4\"\n+_ACEOF\n+\n+\n+\n case \"${with_gxx_include_dir}\" in\n   yes)\n     { { echo \"$as_me:$LINENO: error: --with-gxx-include-dir=[dir] requires a directory\" >&5"}, {"sha": "2c958a9f3c98b78c6fdc7809cd7059f55d6de1dc", "filename": "libjava/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -1196,6 +1196,9 @@ GCJVERSION=$gcjversion\n AC_SUBST(GCJVERSION)\n AC_DEFINE_UNQUOTED(GCJVERSION, \"$GCJVERSION\", [Short GCJ version ID])\n \n+AC_DEFINE(JV_VERSION, \"1.4.2\", [Compatibility version string])\n+AC_DEFINE(JV_API_VERSION, \"1.4\", [API compatibility version string])\n+\n TL_AC_GXX_INCLUDE_DIR\n \n # We check for sys/filio.h because Solaris 2.5 defines FIONREAD there."}, {"sha": "b94260b8465bd53ccaec7680f823dc7a6ec2daad", "filename": "libjava/gcj/cni.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fgcj%2Fcni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fgcj%2Fcni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fcni.h?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -108,6 +108,12 @@ JvMalloc (jsize size)\n   return _Jv_Malloc (size);\n }\n \n+extern inline void *\n+JvRealloc (void *ptr, jsize size)\n+{\n+  return _Jv_Realloc (ptr, size);\n+}\n+\n extern inline void\n JvFree (void *ptr)\n {"}, {"sha": "6eee6b5a40adee7d521afedde30704f67b16da1e", "filename": "libjava/gij.cc", "status": "modified", "additions": 232, "deletions": 73, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fgij.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fgij.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgij.cc?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -1,26 +1,20 @@\n-/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004  Free Software Foundation\n+/* Copyright (C) 1999-2005  Free Software Foundation\n \n    This file is part of libgcj.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-/* Author: Kresten Krab Thorup <krab@gnu.org>  */\n+   This software is copyrighted work licensed under the terms of the\n+   Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+   details. */\n \n #include <config.h>\n \n #include <jvm.h>\n #include <gcj/cni.h>\n-#include <java-props.h>\n \n #include <stdio.h>\n #include <string.h>\n #include <stdlib.h>\n \n-#include <java/lang/System.h>\n-#include <java/util/Properties.h>\n-\n static void\n help ()\n {\n@@ -46,105 +40,262 @@ help ()\n static void\n version ()\n {\n+  printf (\"java version \" JV_VERSION \"\\n\");\n   printf (\"gij (GNU libgcj) version %s\\n\\n\", __VERSION__);\n   printf (\"Copyright (C) 2005 Free Software Foundation, Inc.\\n\");\n   printf (\"This is free software; see the source for copying conditions.  There is NO\\n\");\n   printf (\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\");\n }\n \n+static void\n+nonstandard_opts_help ()\n+{\n+  printf (\"  -Xms<size>         set initial heap size\\n\");\n+  printf (\"  -Xmx<size>         set maximum heap size\\n\");\n+  exit (0);\n+}\n+\n+static void\n+add_option (JvVMInitArgs& vm_args, char const* option, void const* extra)\n+{\n+  vm_args.options =\n+    (JvVMOption*) JvRealloc (vm_args.options,\n+                             (vm_args.nOptions + 1) * sizeof (JvVMOption));\n+\n+  vm_args.options[vm_args.nOptions].optionString = const_cast<char*> (option);\n+  vm_args.options[vm_args.nOptions].extraInfo = const_cast<void*> (extra);\n+  ++vm_args.nOptions;\n+}\n+\n int\n-main (int argc, const char **argv)\n+main (int argc, char const** argv)\n {\n-  /* We rearrange ARGV so that all the -D options appear near the\n-     beginning.  */\n-  int last_D_option = 0;\n+  JvVMInitArgs vm_args;\n   bool jar_mode = false;\n \n+  vm_args.options = NULL;\n+  vm_args.nOptions = 0;\n+  vm_args.ignoreUnrecognized = true;\n+\n+  // Command-line options always override the CLASSPATH environment\n+  // variable.\n+  char *classpath = getenv(\"CLASSPATH\");\n+\n+  if (classpath)\n+    {\n+      char* darg = (char*) JvMalloc (strlen (classpath)\n+                                     + sizeof (\"-Djava.class.path=\"));\n+      sprintf (darg, \"-Djava.class.path=%s\", classpath);\n+      add_option (vm_args, darg, NULL);\n+    }\n+\n+  // Handle arguments to the java command.  Store in vm_args arguments\n+  // handled by the invocation API.\n   int i;\n   for (i = 1; i < argc; ++i)\n     {\n-      const char *arg = argv[i];\n+      char* arg = const_cast<char*> (argv[i]);\n \n-      /* A non-option stops processing.  */\n+      // A non-option stops processing.\n       if (arg[0] != '-')\n \tbreak;\n-      /* A \"--\" stops processing.  */\n+\n+      // A \"--\" stops processing.\n       if (! strcmp (arg, \"--\"))\n \t{\n \t  ++i;\n \t  break;\n \t}\n \n-      if (! strncmp (arg, \"-D\", 2))\n-\t{\n-\t  argv[last_D_option++] = arg + 2;\n-\t  continue;\n-\t}\n-\n-      if (! strcmp (arg, \"-jar\"))\n-\t{\n-\t  jar_mode = true;\n-\t  continue;\n-\t}\n-\n-      /* Allow both single or double hyphen for all remaining\n-\t options.  */\n+      // Allow both single or double hyphen for all options.\n       if (arg[1] == '-')\n \t++arg;\n \n-      if (! strcmp (arg, \"-help\") || ! strcmp (arg, \"-?\"))\n-\thelp ();\n-      else if (! strcmp (arg, \"-version\"))\n-\t{\n-\t  version ();\n-\t  exit (0);\n-\t}\n-      else if (! strcmp (arg, \"-showversion\"))\n-\tversion ();\n-      /* FIXME: use getopt and avoid the ugliness here.\n-\t We at least need to handle the argument in a better way.  */\n-      else if (! strncmp (arg, \"-ms=\", 4))\n-\t_Jv_SetInitialHeapSize (arg + 4);\n-      else if (! strcmp (arg, \"-ms\"))\n-\t{\n-\t  if (i >= argc - 1)\n-\t    {\n+      // Ignore JIT options\n+      if (! strcmp (arg, \"-client\"))\n+        continue;\n+      else if (! strcmp (arg, \"-server\"))\n+        continue;\n+      else if (! strcmp (arg, \"-hotspot\"))\n+        continue;\n+      else if (! strcmp (arg, \"-jrockit\"))\n+        continue;\n+      // Ignore JVM Tool Interface options\n+      else if (! strncmp (arg, \"-agentlib:\", sizeof (\"-agentlib:\") - 1))\n+        continue;\n+      else if (! strncmp (arg, \"-agentpath:\", sizeof (\"-agentpath:\") - 1))\n+        continue;\n+      else if (! strcmp (arg, \"-classpath\") || ! strcmp (arg, \"-cp\"))\n+        {\n+          if (i >= argc - 1)\n+            {\n \t    no_arg:\n \t      fprintf (stderr, \"gij: option requires an argument -- `%s'\\n\",\n \t\t       argv[i]);\n \t      fprintf (stderr, \"Try `gij --help' for more information.\\n\");\n \t      exit (1);\n-\t    }\n-\t  _Jv_SetInitialHeapSize (argv[++i]);\n+            }\n+\n+          // Sun seems to translate the -classpath option into\n+          // -Djava.class.path because if both -classpath and\n+          // -Djava.class.path are specified on the java command line,\n+          // the last one always wins.\n+          char* darg = (char*) JvMalloc (strlen (argv[++i])\n+                                         + sizeof (\"-Djava.class.path=\"));\n+          sprintf (darg, \"-Djava.class.path=%s\", argv[i]);\n+          add_option (vm_args, darg, NULL);\n+        }\n+      else if (! strcmp (arg, \"-debug\"))\n+        {\n+          char* xarg = strdup (\"-Xdebug\");\n+          add_option (vm_args, xarg, NULL);\n+        }\n+      else if (! strncmp (arg, \"-D\", sizeof (\"-D\") - 1))\n+        add_option (vm_args, arg, NULL);\n+      // Ignore 32/64-bit JIT options\n+      else if (! strcmp (arg, \"-d32\") || ! strcmp (arg, \"-d64\"))\n+        continue;\n+      else if (! strcmp (arg, \"-enableassertions\") || ! strcmp (arg, \"-ea\"))\n+        {\n+          if (i >= argc - 1)\n+            goto no_arg;\n+          // FIXME: hook up assertion support\n+          ++i;\n+          continue;\n+        }\n+      else if (! strcmp (arg, \"-disableassertions\") || ! strcmp (arg, \"-da\"))\n+        {\n+          if (i >= argc - 1)\n+            goto no_arg;\n+          // FIXME\n+          ++i;\n+          continue;\n+        }\n+      else if (! strcmp (arg, \"-enablesystemassertions\")\n+               || ! strcmp (arg, \"-esa\"))\n+        {\n+          // FIXME: hook up system assertion support\n+          continue;\n+        }\n+      else if (! strcmp (arg, \"-disablesystemassertions\")\n+               || ! strcmp (arg, \"-dsa\"))\n+        {\n+          // FIXME\n+          continue;\n+        }\n+      else if (! strcmp (arg, \"-jar\"))\n+\t{\n+\t  jar_mode = true;\n+\t  continue;\n+\t}\n+      // Ignore java.lang.instrument option\n+      else if (! strncmp (arg, \"-javaagent:\", sizeof (\"-javaagent:\") - 1))\n+        continue;\n+      else if (! strcmp (arg, \"-noclassgc\"))\n+        {\n+          char* xarg = strdup (\"-Xnoclassgc\");\n+          add_option (vm_args, xarg, NULL);\n+        }\n+      // -ms=n\n+      else if (! strncmp (arg, \"-ms=\", sizeof (\"-ms=\") - 1))\n+        {\n+          arg[1] = 'X';\n+          arg[2] = 'm';\n+          arg[3] = 's';\n+          add_option (vm_args, arg, NULL);\n+        }\n+      // -ms n\n+      else if (! strcmp (arg, \"-ms\"))\n+\t{\n+\t  if (i >= argc - 1)\n+            goto no_arg;\n+\n+          char* xarg = (char*) JvMalloc (strlen (argv[++i])\n+                                         + sizeof (\"-Xms\"));\n+          sprintf (xarg, \"-Xms%s\", argv[i]);\n+          add_option (vm_args, xarg, NULL);\n+\t}\n+      // -msn\n+      else if (! strncmp (arg, \"-ms\", sizeof (\"-ms\") - 1))\n+\t{\n+          char* xarg = (char*) JvMalloc (strlen (arg) + sizeof (\"X\"));\n+          sprintf (xarg, \"-Xms%s\", arg + sizeof (\"-Xms\") - 1);\n+          add_option (vm_args, xarg, NULL);\n \t}\n-      else if (! strncmp (arg, \"-mx=\", 4))\n-\t_Jv_SetMaximumHeapSize (arg + 4);\n+      // -mx=n\n+      else if (! strncmp (arg, \"-mx=\", sizeof (\"-mx=\") - 1))\n+        {\n+          arg[1] = 'X';\n+          arg[2] = 'm';\n+          arg[3] = 'x';\n+          add_option (vm_args, arg, NULL);\n+        }\n+      // -mx n\n       else if (! strcmp (arg, \"-mx\"))\n \t{\n \t  if (i >= argc - 1)\n-\t    goto no_arg;\n-\t  _Jv_SetMaximumHeapSize (argv[++i]);\n+            goto no_arg;\n+\n+          char* xarg = (char*) JvMalloc (strlen (argv[++i])\n+                                         + sizeof (\"-Xmx\"));\n+          sprintf (xarg, \"-Xmx%s\", argv[i]);\n+          add_option (vm_args, xarg, NULL);\n+\t}\n+      // -mxn\n+      else if (! strncmp (arg, \"-mx\", sizeof (\"-mx\") - 1))\n+\t{\n+          char* xarg = (char*) JvMalloc (strlen (arg) + sizeof (\"X\"));\n+          sprintf (xarg, \"-Xmx%s\", arg + sizeof (\"-Xmx\") - 1);\n+          add_option (vm_args, xarg, NULL);\n \t}\n-      else if (! strcmp (arg, \"-cp\") || ! strcmp (arg, \"-classpath\"))\n+      // -ss=n\n+      else if (! strncmp (arg, \"-ss=\", sizeof (\"-ss=\") - 1))\n+        {\n+          arg[1] = 'X';\n+          arg[2] = 's';\n+          arg[3] = 's';\n+          add_option (vm_args, arg, NULL);\n+        }\n+      // -ss n\n+      else if (! strcmp (arg, \"-ss\"))\n \t{\n \t  if (i >= argc - 1)\n-\t    goto no_arg;\n-\t  // We set _Jv_Jar_Class_Path.  If the user specified `-jar'\n-\t  // then the jar code will override this.  This is the\n-\t  // correct behavior.\n-\t  _Jv_Jar_Class_Path = argv[++i];\n+            goto no_arg;\n+\n+          char* xarg = (char*) JvMalloc (strlen (argv[++i])\n+                                         + sizeof (\"-Xss\"));\n+          sprintf (xarg, \"-Xss%s\", argv[i]);\n+          add_option (vm_args, xarg, NULL);\n \t}\n-      else if (! strcmp (arg, \"-verbose\") || ! strcmp (arg, \"-verbose:class\"))\n-\tgcj::verbose_class_flag = true;\n-      else if (arg[1] == 'X')\n+      // -ssn\n+      else if (! strncmp (arg, \"-ss\", sizeof (\"-ss\") - 1))\n \t{\n-\t  if (arg[2] == '\\0')\n-\t    {\n-\t      printf (\"gij: currently no -X options are recognized\\n\");\n-\t      exit (0);\n-\t    }\n-\t  /* Ignore other -X options.  */\n+          char* xarg = (char*) JvMalloc (strlen (arg) + sizeof (\"X\"));\n+          sprintf (xarg, \"-Xss%s\", arg + sizeof (\"-Xss\") - 1);\n+          add_option (vm_args, xarg, NULL);\n \t}\n+      // This handles all the option variants that begin with\n+      // -verbose.\n+      else if (! strncmp (arg, \"-verbose\", 8))\n+        add_option (vm_args, arg, NULL);\n+      else if (! strcmp (arg, \"-version\"))\n+\t{\n+\t  version ();\n+\t  exit (0);\n+\t}\n+      else if (! strcmp (arg, \"-fullversion\"))\n+        {\n+          printf (\"java full version \\\"gcj-\" JV_VERSION \"\\\"\\n\");\n+          exit (0);\n+        }\n+      else if (! strcmp (arg, \"-showversion\"))\n+        version ();\n+      else if (! strcmp (arg, \"-help\") || ! strcmp (arg, \"-?\"))\n+\thelp ();\n+      else if (! strcmp (arg, \"-X\"))\n+        nonstandard_opts_help ();\n+      else if (! strncmp (arg, \"-X\", 2))\n+        add_option (vm_args, arg, NULL);\n       else\n \t{\n \t  fprintf (stderr, \"gij: unrecognized option -- `%s'\\n\", argv[i]);\n@@ -153,9 +304,6 @@ main (int argc, const char **argv)\n \t}\n     }\n \n-  argv[last_D_option] = NULL;\n-  _Jv_Compiler_Properties = argv;\n-\n   if (argc - i < 1)\n     {\n       fprintf (stderr, \"Usage: gij [OPTION] ... CLASS [ARGS] ...\\n\");\n@@ -166,5 +314,16 @@ main (int argc, const char **argv)\n       exit (1);\n     }\n \n-  _Jv_RunMain (NULL, argv[i], argc - i, argv + i, jar_mode);\n+  // -jar mode overrides all other modes of specifying class path:\n+  // -CLASSPATH, -Djava.class.path, -classpath and -cp.\n+  if (jar_mode)\n+    {\n+      char* darg = (char*) JvMalloc (strlen (argv[i])\n+                                      + sizeof (\"-Djava.class.path=\"));\n+      sprintf (darg, \"-Djava.class.path=%s\", argv[i]);\n+      add_option (vm_args, darg, NULL);\n+    }\n+\n+  _Jv_RunMain (&vm_args, NULL, argv[i], argc - i,\n+               (char const**) (argv + i), jar_mode);\n }"}, {"sha": "04f8be0b7ff9ab7d56b5a652a63beab5d02e30dd", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -364,6 +364,9 @@\n /* Define if you want a bytecode interpreter. */\n #undef INTERPRETER\n \n+/* API compatibility version string */\n+#undef JV_API_VERSION\n+\n /* Define if hash synchronization is in use */\n #undef JV_HASH_SYNCHRONIZATION\n \n@@ -373,6 +376,9 @@\n /* Indicate that linker is not able to 8-byte align static data */\n #undef JV_LINKER_CANNOT_8BYTE_ALIGN_STATICS\n \n+/* Compatibility version string */\n+#undef JV_VERSION\n+\n /* Define if we want to use debug calls into the garbage collector. */\n #undef LIBGCJ_GC_DEBUG\n "}, {"sha": "43020006e2a811e3f07bc01599e3dc5992eda7c2", "filename": "libjava/include/java-props.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Finclude%2Fjava-props.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Finclude%2Fjava-props.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-props.h?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -23,9 +23,6 @@ typedef struct\n extern const char **_Jv_Compiler_Properties;\n extern int _Jv_Properties_Count;\n \n-// The JAR file to add to the beginning of java.class.path.\n-extern const char *_Jv_Jar_Class_Path;\n-\n // Properties taken from the user's environment.\n extern property_pair *_Jv_Environment_Properties;\n "}, {"sha": "a95b7124aa853423bd25db6f6d6f03925fac52bf", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -360,6 +360,9 @@ extern \"C\" void JvRunMain (jclass klass, int argc, const char **argv);\n void _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, \n \t\t  bool is_jar);\n \n+void _Jv_RunMain (struct _Jv_VMInitArgs *vm_args, jclass klass,\n+                  const char *name, int argc, const char **argv, bool is_jar);\n+\n // Delayed until after _Jv_AllocBytes is declared.\n //\n // Note that we allocate this as unscanned memory -- the vtables"}, {"sha": "d9529e8bb317ec9f03515da9f712d548b428269b", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -369,8 +369,8 @@ java::lang::Runtime::insertSystemProperties (java::util::Properties *newprops)\n   // (introduced in 1.2), and earlier versioning properties.  Some\n   // programs rely on seeing values that they expect, so we claim to\n   // be a 1.4-ish VM for their sake.\n-  SET (\"java.version\", \"1.4.2\");\n-  SET (\"java.runtime.version\", \"1.4.2\");\n+  SET (\"java.version\", JV_VERSION);\n+  SET (\"java.runtime.version\", JV_VERSION);\n   SET (\"java.vendor\", \"Free Software Foundation, Inc.\");\n   SET (\"java.vendor.url\", \"http://gcc.gnu.org/java/\");\n   SET (\"java.class.version\", \"46.0\");\n@@ -380,7 +380,7 @@ java::lang::Runtime::insertSystemProperties (java::util::Properties *newprops)\n   SET (\"java.vm.version\", __VERSION__);\n   SET (\"java.vm.vendor\", \"Free Software Foundation, Inc.\");\n   SET (\"java.vm.name\", \"GNU libgcj\");\n-  SET (\"java.specification.version\", \"1.4\");\n+  SET (\"java.specification.version\", JV_API_VERSION);\n   SET (\"java.specification.name\", \"Java(tm) Platform API Specification\");\n   SET (\"java.specification.vendor\", \"Sun Microsystems Inc.\");\n \n@@ -569,30 +569,6 @@ java::lang::Runtime::insertSystemProperties (java::util::Properties *newprops)\n     }\n #endif\n \n-  if (_Jv_Jar_Class_Path)\n-    newprops->put(JvNewStringLatin1 (\"java.class.path\"),\n- \t\t  JvNewStringLatin1 (_Jv_Jar_Class_Path));\n-  else\n-    {\n-      // FIXME: find libgcj.zip and append its path?\n-      char *classpath = ::getenv(\"CLASSPATH\");\n-      jstring cp = newprops->getProperty (JvNewStringLatin1(\"java.class.path\"));\n-      java::lang::StringBuffer *sb = new java::lang::StringBuffer ();\n-      \n-      if (classpath)\n-\t{\n-\t  sb->append (JvNewStringLatin1 (classpath));\n-\t  sb->append (_Jv_platform_path_separator);\n-\t}\n-      if (cp != NULL)\n-\tsb->append (cp);\n-      else\n-\tsb->append ((jchar) '.');\n-      \n-      newprops->put(JvNewStringLatin1 (\"java.class.path\"),\n-\t\t      sb->toString ());\n-    }\n-\n   // The name used to invoke this process (argv[0] in C).\n   SET (\"gnu.gcj.progname\", _Jv_GetSafeArg (0));\n "}, {"sha": "7060171223819cdfdf14d1e62e595681d77996ab", "filename": "libjava/prims.cc", "status": "modified", "additions": 131, "deletions": 17, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6121641fcd1aad93643d1f56440217ee9dc1c1c/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=b6121641fcd1aad93643d1f56440217ee9dc1c1c", "patch": "@@ -85,9 +85,6 @@ static java::lang::OutOfMemoryError *no_memory;\n const char **_Jv_Compiler_Properties = NULL;\n int _Jv_Properties_Count = 0;\n \n-// The JAR file to add to the beginning of java.class.path.\n-const char *_Jv_Jar_Class_Path;\n-\n #ifndef DISABLE_GETENV_PROPERTIES\n // Property key/value pairs.\n property_pair *_Jv_Environment_Properties;\n@@ -909,9 +906,115 @@ namespace gcj\n   bool runtimeInitialized = false;\n }\n \n+// We accept all non-standard options accepted by Sun's java command,\n+// for compatibility with existing application launch scripts.\n+static jint\n+parse_x_arg (char* option_string)\n+{\n+  if (strlen (option_string) <= 0)\n+    return -1;\n+\n+  if (! strcmp (option_string, \"int\"))\n+    {\n+      // FIXME: this should cause the vm to never load shared objects\n+    }\n+  else if (! strcmp (option_string, \"mixed\"))\n+    {\n+      // FIXME: allow interpreted and native code\n+    }\n+  else if (! strcmp (option_string, \"batch\"))\n+    {\n+      // FIXME: disable background JIT'ing\n+    }\n+  else if (! strcmp (option_string, \"debug\"))\n+    {\n+      // FIXME: add JDWP/JVMDI support\n+    }\n+  else if (! strncmp (option_string, \"bootclasspath:\", 14))\n+    {\n+      // FIXME: add a parse_bootclasspath_arg function\n+    }\n+  else if (! strncmp (option_string, \"bootclasspath/a:\", 16))\n+    {\n+    }\n+  else if (! strncmp (option_string, \"bootclasspath/p:\", 16))\n+    {\n+    }\n+  else if (! strcmp (option_string, \"check:jni\"))\n+    {\n+      // FIXME: enable strict JNI checking\n+    }\n+  else if (! strcmp (option_string, \"future\"))\n+    {\n+      // FIXME: enable strict class file format checks\n+    }\n+  else if (! strcmp (option_string, \"noclassgc\"))\n+    {\n+      // FIXME: disable garbage collection for classes\n+    }\n+  else if (! strcmp (option_string, \"incgc\"))\n+    {\n+      // FIXME: incremental garbage collection\n+    }\n+  else if (! strncmp (option_string, \"loggc:\", 6))\n+    {\n+      if (option_string[6] == '\\0')\n+        {\n+          fprintf (stderr,\n+                   \"libgcj: filename argument expected for loggc option\\n\");\n+          return -1;\n+        }\n+      // FIXME: set gc logging filename\n+    }\n+  else if (! strncmp (option_string, \"ms\", 2))\n+    {\n+      // FIXME: ignore this option until PR 20699 is fixed.\n+      // _Jv_SetInitialHeapSize (option_string + 2);\n+    }\n+  else if (! strncmp (option_string, \"mx\", 2))\n+    _Jv_SetMaximumHeapSize (option_string + 2);\n+  else if (! strcmp (option_string, \"prof\"))\n+    {\n+      // FIXME: enable profiling of program running in vm\n+    }\n+  else if (! strncmp (option_string, \"runhprof:\", 9))\n+    {\n+      // FIXME: enable specific type of vm profiling.  add a\n+      // parse_runhprof_arg function\n+    }\n+  else if (! strcmp (option_string, \"rs\"))\n+    {\n+      // FIXME: reduced system signal usage.  disable thread dumps,\n+      // only terminate in response to user-initiated calls,\n+      // e.g. System.exit()\n+    }\n+  else if (! strncmp (option_string, \"ss\", 2))\n+    {\n+      // FIXME: set thread stack size\n+    }\n+  else if (! strcmp (option_string, \"X:+UseAltSigs\"))\n+    {\n+      // FIXME: use signals other than SIGUSR1 and SIGUSR2\n+    }\n+  else if (! strcmp (option_string, \"share:off\"))\n+    {\n+      // FIXME: don't share class data\n+    }\n+  else if (! strcmp (option_string, \"share:auto\"))\n+    {\n+      // FIXME: share class data where possible\n+    }\n+  else if (! strcmp (option_string, \"share:on\"))\n+    {\n+      // FIXME: fail if impossible to share class data\n+    }\n+\n+  return 0;\n+}\n+\n static jint\n parse_verbose_args (char* option_string,\n-\t\t    bool ignore_unrecognized)\n+                    bool ignore_unrecognized)\n {\n   size_t len = sizeof (\"-verbose\");\n \n@@ -1045,7 +1148,7 @@ parse_init_args (JvVMInitArgs* vm_args)\n \t\t\t  \"-verbose\", sizeof (\"-verbose\") - 1))\n \t{\n \t  jint result = parse_verbose_args (option_string,\n-\t\t\t\t\t    vm_args->ignoreUnrecognized);\n+                                            vm_args->ignoreUnrecognized);\n \t  if (result < 0)\n \t    return result;\n \t}\n@@ -1061,11 +1164,20 @@ parse_init_args (JvVMInitArgs* vm_args)\n \t  continue;\n \t}\n       else if (vm_args->ignoreUnrecognized)\n-\t{\n-\t  if (option_string[0] == '_'\n-\t      || ! strncmp (option_string, \"-X\", 2))\n-\t    continue;\n+        {\n+          if (option_string[0] == '_')\n+            parse_x_arg (option_string + 1);\n+          else if (! strncmp (option_string, \"-X\", 2))\n+            parse_x_arg (option_string + 2);\n+          else\n+            {\n+            unknown_option:\n+              fprintf (stderr, \"libgcj: unknown option: %s\\n\", option_string);\n+              return -1;\n+            }\n \t}\n+      else\n+        goto unknown_option;\n     }\n   return 0;\n }\n@@ -1167,8 +1279,8 @@ _Jv_CreateJavaVM (JvVMInitArgs* vm_args)\n }\n \n void\n-_Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, \n-\t     bool is_jar)\n+_Jv_RunMain (JvVMInitArgs *vm_args, jclass klass, const char *name, int argc,\n+             const char **argv, bool is_jar)\n {\n #ifndef DISABLE_MAIN_ARGS\n   _Jv_SetArgs (argc, argv);\n@@ -1178,12 +1290,7 @@ _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv,\n \n   try\n     {\n-      // Set this very early so that it is seen when java.lang.System\n-      // is initialized.\n-      if (is_jar)\n-\t_Jv_Jar_Class_Path = strdup (name);\n-\n-      if (_Jv_CreateJavaVM (NULL) < 0)\n+      if (_Jv_CreateJavaVM (vm_args) < 0)\n \t{\n \t  fprintf (stderr, \"libgcj: couldn't create virtual machine\\n\");\n \t  exit (1);\n@@ -1225,6 +1332,13 @@ _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv,\n   runtime->exit (status);\n }\n \n+void\n+_Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, \n+\t     bool is_jar)\n+{\n+  _Jv_RunMain (NULL, klass, name, argc, argv, is_jar);\n+}\n+\n void\n JvRunMain (jclass klass, int argc, const char **argv)\n {"}]}