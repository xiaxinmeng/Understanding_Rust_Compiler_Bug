{"sha": "bcb1f4387cbec369a0a52a0acf7a6497353597a8", "node_id": "C_kwDOANBUbNoAKGJjYjFmNDM4N2NiZWMzNjlhMGE1MmEwYWNmN2E2NDk3MzUzNTk3YTg", "commit": {"author": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2022-09-27T10:20:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-03T14:43:48Z"}, "message": "libstdc++: Filter out unconditional <stdio.h> default include\n\n_AC_INCLUDES_DEFAULT_REQUIREMENTS including <stdio.h> when checking for\nstdint.h has prevented proper detection of whether stdint.h is present,\nsince it'd poison the cache variables with test results failing due to\n<stdio.h> failing to include. As a solution, for autoconf versions under\n2.70, we filter out that bit of code from ac_includes_default.\n\nThis issue was fixed in autoconf-2.70.\nThis also applies to various other headers, but was noticed when looking\ninto why HAVE_STDINT_H was misdefined.\n\nlibstdc++-v3/ChangeLog:\n\n\t* configure.ac: Remove any lines that unconditionally include\n\t<stdio.h> from ac_includes_default, when running Autoconf <2.70.\n\t* configure: Regenerate.", "tree": {"sha": "21c3f56b13b2bebb8d9bcb7556b0c13dae576439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21c3f56b13b2bebb8d9bcb7556b0c13dae576439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcb1f4387cbec369a0a52a0acf7a6497353597a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb1f4387cbec369a0a52a0acf7a6497353597a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb1f4387cbec369a0a52a0acf7a6497353597a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb1f4387cbec369a0a52a0acf7a6497353597a8/comments", "author": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b51f68f8ac6c63e352dda8599aed01634212de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b51f68f8ac6c63e352dda8599aed01634212de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b51f68f8ac6c63e352dda8599aed01634212de"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "4f2c12f6b69136751964303d9fe8875720a88e24", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb1f4387cbec369a0a52a0acf7a6497353597a8/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb1f4387cbec369a0a52a0acf7a6497353597a8/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=bcb1f4387cbec369a0a52a0acf7a6497353597a8", "patch": "@@ -3348,6 +3348,15 @@ else\n   GLIBCXX_IS_NATIVE=true\n fi\n \n+# In the case that we're building without headers, we won't have <stdio.h>\n+# available. In these cases, we have to instruct autotools to never include\n+# <stdio.h> as a part of default headers.\n+\n+if test \"x$with_headers\" = \"xno\"; then\n+  ac_includes_default=`echo \"$ac_includes_default\" | sed '/^#include <stdio.h>$/d'`\n+fi\n+\n+\n # Sets up automake.  Must come after AC_CANONICAL_SYSTEM.  Each of the\n # following is magically included in AUTOMAKE_OPTIONS in each Makefile.am.\n #  1.x:  minimum required version\n@@ -12191,7 +12200,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12194 \"configure\"\n+#line 12203 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12297,7 +12306,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12300 \"configure\"\n+#line 12309 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15981,7 +15990,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15984 \"configure\"\n+#line 15993 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -16016,7 +16025,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16019 \"configure\"\n+#line 16028 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -16051,7 +16060,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16054 \"configure\"\n+#line 16063 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -16087,7 +16096,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16090 \"configure\"\n+#line 16099 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16243,7 +16252,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16246 \"configure\"\n+#line 16255 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16285,7 +16294,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n   cat > conftest.$ac_ext << EOF\n-#line 16288 \"configure\"\n+#line 16297 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "c05fcdda7e90119dee408e6725c789c3947a3f22", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb1f4387cbec369a0a52a0acf7a6497353597a8/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb1f4387cbec369a0a52a0acf7a6497353597a8/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=bcb1f4387cbec369a0a52a0acf7a6497353597a8", "patch": "@@ -58,6 +58,15 @@ else\n   GLIBCXX_IS_NATIVE=true\n fi\n \n+# In the case that we're building without headers, we won't have <stdio.h>\n+# available. In these cases, we have to instruct autotools to never include\n+# <stdio.h> as a part of default headers.\n+m4_version_prereq([2.70], [], [\n+if test \"x$with_headers\" = \"xno\"; then\n+  ac_includes_default=`echo \"$ac_includes_default\" | sed '/^#include <stdio.h>$/d'`\n+fi\n+])\n+\n # Sets up automake.  Must come after AC_CANONICAL_SYSTEM.  Each of the\n # following is magically included in AUTOMAKE_OPTIONS in each Makefile.am.\n #  1.x:  minimum required version"}]}