{"sha": "853c0ad7f0edc57a50c60803ea1aab588bab7561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzYzBhZDdmMGVkYzU3YTUwYzYwODAzZWExYWFiNTg4YmFiNzU2MQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-05-25T17:41:17Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-05-25T17:41:17Z"}, "message": "transfer.c (unformatted_read): Use size from front end eliminating use of size_from_real_kind.\n\n2007-05-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\t* io/transfer.c (unformatted_read): Use size from front end eliminating\n\tuse of size_from_real_kind. (unformatted_write): Ditto.\n\nFrom-SVN: r125064", "tree": {"sha": "4d991d392c31ab031e319649f3159ca64311a652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d991d392c31ab031e319649f3159ca64311a652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/853c0ad7f0edc57a50c60803ea1aab588bab7561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853c0ad7f0edc57a50c60803ea1aab588bab7561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/853c0ad7f0edc57a50c60803ea1aab588bab7561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853c0ad7f0edc57a50c60803ea1aab588bab7561/comments", "author": null, "committer": null, "parents": [{"sha": "fc6c9f75effaf7d1e793a5f5a0fa937668208972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6c9f75effaf7d1e793a5f5a0fa937668208972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6c9f75effaf7d1e793a5f5a0fa937668208972"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "38774284d24825ff4618ea53e153a70ff51bdb4b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853c0ad7f0edc57a50c60803ea1aab588bab7561/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853c0ad7f0edc57a50c60803ea1aab588bab7561/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=853c0ad7f0edc57a50c60803ea1aab588bab7561", "patch": "@@ -1,3 +1,8 @@\n+2007-05-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\t* io/transfer.c (unformatted_read): Use size from front end eliminating\n+\tuse of size_from_real_kind. (unformatted_write): Ditto.\n+\n 2007-05-23  Steve Ellcey  <sje@cup.hp.com>\n \n \t* Makefile.in: Regenerate."}, {"sha": "128b4c1be5933d805d0a73489b992a5d4a4510ff", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853c0ad7f0edc57a50c60803ea1aab588bab7561/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853c0ad7f0edc57a50c60803ea1aab588bab7561/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=853c0ad7f0edc57a50c60803ea1aab588bab7561", "patch": "@@ -695,7 +695,7 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n \n static void\n unformatted_read (st_parameter_dt *dtp, bt type,\n-\t\t  void *dest, int kind,\n+\t\t  void *dest, int kind __attribute__((unused)),\n \t\t  size_t size, size_t nelems)\n {\n   size_t i, sz;\n@@ -723,40 +723,37 @@ unformatted_read (st_parameter_dt *dtp, bt type,\n       /* By now, all complex variables have been split into their\n \t constituent reals.  */\n       \n-      if (type == BT_REAL || type == BT_COMPLEX)\n-\tsz = size_from_real_kind (kind);\n-      else\n-\tsz = kind;\n-\n       for (i=0; i<nelems; i++)\n \t{\n- \t  read_block_direct (dtp, buffer, &sz);\n- \t  reverse_memcpy (p, buffer, sz);\n+ \t  read_block_direct (dtp, buffer, &size);\n+ \t  reverse_memcpy (p, buffer, size);\n  \t  p += size;\n  \t}\n     }\n }\n \n \n-/* Master function for unformatted writes.  */\n+/* Master function for unformatted writes.  NOTE: For kind=10 the size is 16\n+   bytes on 64 bit machines.  The unused bytes are not initialized and never\n+   used, which can show an error with memory checking analyzers like\n+   valgrind.  */\n \n static void\n unformatted_write (st_parameter_dt *dtp, bt type,\n-\t\t   void *source, int kind,\n+\t\t   void *source, int kind __attribute__((unused)),\n \t\t   size_t size, size_t nelems)\n {\n   if (dtp->u.p.current_unit->flags.convert == CONVERT_NATIVE ||\n       size == 1 || type == BT_CHARACTER)\n     {\n       size *= nelems;\n-\n       write_buf (dtp, source, size);\n     }\n   else\n     {\n       char buffer[16];\n       char *p;\n-      size_t i, sz;\n+      size_t i;\n   \n       /* Break up complex into its constituent reals.  */\n       if (type == BT_COMPLEX)\n@@ -770,16 +767,12 @@ unformatted_write (st_parameter_dt *dtp, bt type,\n       /* By now, all complex variables have been split into their\n \t constituent reals.  */\n \n-      if (type == BT_REAL || type == BT_COMPLEX)\n-\tsz = size_from_real_kind (kind);\n-      else\n-\tsz = kind;\n \n       for (i=0; i<nelems; i++)\n \t{\n \t  reverse_memcpy(buffer, p, size);\n  \t  p+= size;\n-\t  write_buf (dtp, buffer, sz);\n+\t  write_buf (dtp, buffer, size);\n \t}\n     }\n }"}]}