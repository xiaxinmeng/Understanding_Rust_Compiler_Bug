{"sha": "af36a4d251dc01522e818b18e61e7bd289419654", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYzNmE0ZDI1MWRjMDE1MjJlODE4YjE4ZTYxZTdiZDI4OTQxOTY1NA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "1999-05-02T15:17:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-05-02T15:17:32Z"}, "message": "Joseph S.\n\nJoseph S. Myers  <jsm28@cam.ac.uk>\n        * pdp11.h (TARGET_SWITCHES): Fix error in previous change.\n        (ASSEMBLER_DIALECT): Define.\n        (CONDITIONAL_REGISTER_USAGE): Rename floating point registers if\n        required for the UNIX assembler.\n        (ASM_OUTPUT_INT): Remove.  The compiler will synthesise it.\n        (ASM_OUTPUT_ADDR_VEC_PROLOGUE): Remove.\n        (ASM_OPEN_PAREN, ASM_CLOSE_PAREN): Change to \"[\" and \"]\".\n        (TRAMPOLINE_TEMPLATE): Use ASM_OUTPUT_SHORT.\n        * pdp11.c (output_addr_const_pdp11): Copy of output_addr_const\n        adapted to output constants in octal.\n        * pdp11.c, pdp11.h, pdp11.md: Use output_addr_const_pdp11 instead\n        of output_addr_const.  Output constants in octal.  Use assembler\n        dialect alternatives where DEC and UNIX assemblers use different\n        instruction names.\n\nFrom-SVN: r26732", "tree": {"sha": "b681ebe0ca3766b310acec9a645332b6da07953b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b681ebe0ca3766b310acec9a645332b6da07953b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af36a4d251dc01522e818b18e61e7bd289419654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af36a4d251dc01522e818b18e61e7bd289419654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af36a4d251dc01522e818b18e61e7bd289419654", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af36a4d251dc01522e818b18e61e7bd289419654/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4014b382ea674616d0b1a981254ce7a26b9919e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4014b382ea674616d0b1a981254ce7a26b9919e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4014b382ea674616d0b1a981254ce7a26b9919e7"}], "stats": {"total": 256, "additions": 193, "deletions": 63}, "files": [{"sha": "c6c4125dbf81004b1e436d754dd6c342952b8369", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af36a4d251dc01522e818b18e61e7bd289419654/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af36a4d251dc01522e818b18e61e7bd289419654/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af36a4d251dc01522e818b18e61e7bd289419654", "patch": "@@ -1,3 +1,20 @@\n+Sun May  2 15:16:42 1999  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* pdp11.h (TARGET_SWITCHES): Fix error in previous change.\n+\t(ASSEMBLER_DIALECT): Define.\n+\t(CONDITIONAL_REGISTER_USAGE): Rename floating point registers if\n+\trequired for the UNIX assembler.\n+\t(ASM_OUTPUT_INT): Remove.  The compiler will synthesise it.\n+\t(ASM_OUTPUT_ADDR_VEC_PROLOGUE): Remove.\n+\t(ASM_OPEN_PAREN, ASM_CLOSE_PAREN): Change to \"[\" and \"]\".\n+\t(TRAMPOLINE_TEMPLATE): Use ASM_OUTPUT_SHORT.\n+\t* pdp11.c (output_addr_const_pdp11): Copy of output_addr_const\n+\tadapted to output constants in octal.\n+\t* pdp11.c, pdp11.h, pdp11.md: Use output_addr_const_pdp11 instead\n+\tof output_addr_const.  Output constants in octal.  Use assembler\n+\tdialect alternatives where DEC and UNIX assemblers use different\n+\tinstruction names.\n+\n Sun May 2 01:15:06 PDT 1999 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "2202d4b0e51b04a49ad2a2540975d12ceeac9240", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 120, "deletions": 9, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af36a4d251dc01522e818b18e61e7bd289419654/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af36a4d251dc01522e818b18e61e7bd289419654/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=af36a4d251dc01522e818b18e61e7bd289419654", "patch": "@@ -126,7 +126,7 @@ output_function_prologue(stream, size)\n \n     /* make frame */\n     if (fsize)\t\t\t\t\t\t\t\n-\tfprintf (stream, \"\\tsub $%d, sp\\n\", fsize);\t\t\t\n+\tfprintf (stream, \"\\tsub $%o, sp\\n\", fsize);\t\t\t\n \n     /* save CPU registers  */\n     for (regno = 0; regno < 8; regno++)\t\t\t\t\n@@ -213,7 +213,7 @@ output_function_epilogue(stream, size)\n \t\n \tfor (i =7 ; i >= 0 ; i--)\t\t\t\t\t\n \t    if (regs_ever_live[i] && ! call_used_regs[i])\t\t\n-\t\tfprintf(stream, \"\\tmov %d(fp), %s\\n\",-fsize-2*j--, reg_names[i]);\n+\t\tfprintf(stream, \"\\tmov %o(fp), %s\\n\",-fsize-2*j--, reg_names[i]);\n \n \t/* get ACs */\t\t\t\t\t\t\n \tvia_ac = FIRST_PSEUDO_REGISTER -1;\n@@ -231,7 +231,7 @@ output_function_epilogue(stream, size)\n \t\t&& regs_ever_live[i]\n \t\t&& ! call_used_regs[i])\n \t    {\n-\t\tfprintf(stream, \"\\tfldd %d(fp), %s\\n\", -fsize-k, reg_names[i]);\n+\t\tfprintf(stream, \"\\tfldd %o(fp), %s\\n\", -fsize-k, reg_names[i]);\n \t\tk -= 8;\n \t    }\n \t    \n@@ -242,7 +242,7 @@ output_function_epilogue(stream, size)\n \t\tif (! LOAD_FPU_REG_P(via_ac))\n \t\t    abort();\n \t\t    \n-\t\tfprintf(stream, \"\\tfldd %d(fp), %s\\n\", -fsize-k, reg_names[via_ac]);\n+\t\tfprintf(stream, \"\\tfldd %o(fp), %s\\n\", -fsize-k, reg_names[via_ac]);\n \t\tfprintf(stream, \"\\tfstd %s, %s\\n\", reg_names[via_ac], reg_names[i]);\n \t\tk -= 8;\n \t    }\n@@ -284,7 +284,7 @@ output_function_epilogue(stream, size)\n \t\tfprintf(stream, \"\\tmov (sp)+, %s\\n\", reg_names[i]);\t\n \t\t\t\t\t\t\t\t\n \tif (fsize)\t\t\t\t\t\t\n-\t    fprintf((stream), \"\\tadd $%d, sp\\n\", fsize);      \t\t\n+\t    fprintf((stream), \"\\tadd $%o, sp\\n\", fsize);      \t\t\n     }\t\t\t\n \t\t\t\t\t\n     fprintf (stream, \"\\trts pc\\n\");\t\t\t\t\t\n@@ -557,14 +557,14 @@ output_move_quad (operands)\n \t      u.i[1] = CONST_DOUBLE_HIGH (operands[1]); \n \t      \n \t      if (u.d == 0.0)\n-\t\t  return \"clrd %0\";\n+\t\t  return \"{clrd|clrf} %0\";\n \t  }\n \t      \n-\t  return \"ldd %1, %0\";\n+\t  return \"{ldd|movf} %1, %0\";\n       }\n       \n       if (FPU_REG_P(REGNO(operands[1])))\n-\t  return \"std %1, %0\";\n+\t  return \"{std|movf} %1, %0\";\n   }\n       \n   /* If one operand is decrementing and one is incrementing\n@@ -883,7 +883,7 @@ print_operand_address (file, addr)\n       break;\n \n     default:\n-      output_addr_const (file, addr);\n+      output_addr_const_pdp11 (file, addr);\n     }\n }\n \n@@ -1410,3 +1410,114 @@ legitimate_address_p (mode, address)\n \n /* #undef REG_OK_STRICT */\n }\n+\n+/* A copy of output_addr_const modified for pdp11 expression syntax.\n+   output_addr_const also gets called for %cDIGIT and %nDIGIT, which we don't\n+   use, and for debugging output, which we don't support with this port either.\n+   So this copy should get called whenever needed.\n+*/\n+void\n+output_addr_const_pdp11 (file, x)\n+     FILE *file;\n+     rtx x;\n+{\n+  char buf[256];\n+\n+ restart:\n+  switch (GET_CODE (x))\n+    {\n+    case PC:\n+      if (flag_pic)\n+\tputc ('.', file);\n+      else\n+\tabort ();\n+      break;\n+\n+    case SYMBOL_REF:\n+      assemble_name (file, XSTR (x, 0));\n+      break;\n+\n+    case LABEL_REF:\n+      ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (XEXP (x, 0)));\n+      assemble_name (file, buf);\n+      break;\n+\n+    case CODE_LABEL:\n+      ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (x));\n+      assemble_name (file, buf);\n+      break;\n+\n+    case CONST_INT:\n+      /* Should we check for constants which are too big?  Maybe cutting\n+\t them off to 16 bits is OK?  */\n+      fprintf (file, \"%ho\", (unsigned short) INTVAL (x));\n+      break;\n+\n+    case CONST:\n+      /* This used to output parentheses around the expression,\n+\t but that does not work on the 386 (either ATT or BSD assembler).  */\n+      output_addr_const_pdp11 (file, XEXP (x, 0));\n+      break;\n+\n+    case CONST_DOUBLE:\n+      if (GET_MODE (x) == VOIDmode)\n+\t{\n+\t  /* We can use %o if the number is one word and positive.  */\n+\t  if (CONST_DOUBLE_HIGH (x))\n+\t    abort (); /* Should we just silently drop the high part?  */\n+\t  else\n+\t    fprintf (file, \"%ho\", (unsigned short) CONST_DOUBLE_LOW (x));\n+\t}\n+      else\n+\t/* We can't handle floating point constants;\n+\t   PRINT_OPERAND must handle them.  */\n+\toutput_operand_lossage (\"floating constant misused\");\n+      break;\n+\n+    case PLUS:\n+      /* Some assemblers need integer constants to appear last (eg masm).  */\n+      if (GET_CODE (XEXP (x, 0)) == CONST_INT)\n+\t{\n+\t  output_addr_const_pdp11 (file, XEXP (x, 1));\n+\t  if (INTVAL (XEXP (x, 0)) >= 0)\n+\t    fprintf (file, \"+\");\n+\t  output_addr_const_pdp11 (file, XEXP (x, 0));\n+\t}\n+      else\n+\t{\n+\t  output_addr_const_pdp11 (file, XEXP (x, 0));\n+\t  if (INTVAL (XEXP (x, 1)) >= 0)\n+\t    fprintf (file, \"+\");\n+\t  output_addr_const_pdp11 (file, XEXP (x, 1));\n+\t}\n+      break;\n+\n+    case MINUS:\n+      /* Avoid outputting things like x-x or x+5-x,\n+\t since some assemblers can't handle that.  */\n+      x = simplify_subtraction (x);\n+      if (GET_CODE (x) != MINUS)\n+\tgoto restart;\n+\n+      output_addr_const_pdp11 (file, XEXP (x, 0));\n+      fprintf (file, \"-\");\n+      if (GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t  && INTVAL (XEXP (x, 1)) < 0)\n+\t{\n+\t  fprintf (file, ASM_OPEN_PAREN);\n+\t  output_addr_const_pdp11 (file, XEXP (x, 1));\n+\t  fprintf (file, ASM_CLOSE_PAREN);\n+\t}\n+      else\n+\toutput_addr_const_pdp11 (file, XEXP (x, 1));\n+      break;\n+\n+    case ZERO_EXTEND:\n+    case SIGN_EXTEND:\n+      output_addr_const_pdp11 (file, XEXP (x, 0));\n+      break;\n+\n+    default:\n+      output_operand_lossage (\"invalid expression as operand\");\n+    }\n+}"}, {"sha": "0822782db580d5d1919484ed73e619fb783a246c", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af36a4d251dc01522e818b18e61e7bd289419654/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af36a4d251dc01522e818b18e61e7bd289419654/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=af36a4d251dc01522e818b18e61e7bd289419654", "patch": "@@ -26,6 +26,7 @@ int const_immediate_operand ();\n int expand_shift_operand ();\n int legitimate_address_p ();\n void notice_update_cc_on_set ();\n+void output_addr_const_pdp11 ();\n void output_ascii ();\n void output_function_epilogue ();\n void output_function_prologue ();\n@@ -106,7 +107,7 @@ extern int target_flags;\n     { \"no-split\", -1024, \"Target does not have split I&D\" },\t\\\n /* UNIX assembler syntax?  */\t\t\t\t\t\\\n     { \"unix-asm\", 2048, \"Use UNIX assembler syntax\" },\t\t\\\n-    { \"dec-asm\", 2048, \"Use DEC assembler syntax\" },\t\t\\\n+    { \"dec-asm\", -2048, \"Use DEC assembler syntax\" },\t\t\\\n /* default */\t\t\t\\\n     { \"\", TARGET_DEFAULT, NULL}\t\\\n }\n@@ -142,6 +143,8 @@ extern int target_flags;\n #define TARGET_UNIX_ASM\t\t(target_flags & 2048)\n #define TARGET_UNIX_ASM_DEFAULT\t0\n \n+#define ASSEMBLER_DIALECT\t(TARGET_UNIX_ASM ? 1 : 0)\n+\n \f\n \n /* TYPE SIZES */\n@@ -272,7 +275,8 @@ extern int target_flags;\n /* Make sure everything's fine if we *don't* have an FPU.\n    This assumes that putting a register in fixed_regs will keep the\n    compiler's mitts completely off it.  We don't bother to zero it out\n-   of register classes.  \n+   of register classes.  Also fix incompatible register naming with\n+   the UNIX assembler.\n */\n #define CONDITIONAL_REGISTER_USAGE \\\n { \t\t\t\t\t\t\\\n@@ -288,6 +292,16 @@ extern int target_flags;\n \t\t\t\t\t\t\\\n   if (TARGET_AC0)\t\t\t\t\\\n       call_used_regs[8] = 1;\t\t\t\\\n+  if (TARGET_UNIX_ASM)\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      /* Change names of FPU registers for the UNIX assembler.  */ \\\n+      reg_names[8] = \"fr0\";\t\t\t\\\n+      reg_names[9] = \"fr1\";\t\t\t\\\n+      reg_names[10] = \"fr2\";\t\t\t\\\n+      reg_names[11] = \"fr3\";\t\t\t\\\n+      reg_names[12] = \"fr4\";\t\t\t\\\n+      reg_names[13] = \"fr5\";\t\t\t\\\n+    }\t\t\t\t\t\t\\\n }\n \n /* Return number of consecutive hard regs needed starting at reg REGNO\n@@ -1124,44 +1138,32 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n   fprintf (FILE, \"\\tfloat %.12e\\n\", (VALUE))\n \n-/* This is how to output an assembler line defining an `int' constant.  */\n-\n-#define ASM_OUTPUT_INT(FILE,VALUE)  \\\n-( fprintf (FILE, \"\\t.word \"),\t\t\t\\\n-  output_addr_const (FILE, (VALUE)),\t\t\\\n-  fprintf (FILE, \"\\n\"))\n-\n /* Likewise for `short' and `char' constants.  */\n \n #define ASM_OUTPUT_SHORT(FILE,VALUE)  \\\n-( fprintf (FILE, \"\\t.word \"),\t\t\t\\\n-  output_addr_const (FILE, (VALUE)),\t\t\\\n+( fprintf (FILE, TARGET_UNIX_ASM ? \"\\t\" : \"\\t.word \"),\t\\\n+  output_addr_const_pdp11 (FILE, (VALUE)),\t\t\\\n   fprintf (FILE, \" /*short*/\\n\"))\n \n #define ASM_OUTPUT_CHAR(FILE,VALUE)  \\\n ( fprintf (FILE, \"\\t.byte \"),\t\t\t\\\n-  output_addr_const (FILE, (VALUE)),\t\t\\\n+  output_addr_const_pdp11 (FILE, (VALUE)),\t\t\\\n   fprintf (FILE, \" /* char */\\n\"))\n \n-/* This is how to output an assembler line for a numeric constant byte.-\n-\n-   do we really NEED it ? let's output it with a comment and grep the \n-   assembly source ;-)\n+/* This is how to output an assembler line for a numeric constant byte.\n+   This won't actually be used since we define ASM_OUTPUT_CHAR.\n */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n+  fprintf (FILE, \"\\t.byte %o\\n\", (VALUE))\n \n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)  \\\n   output_ascii (FILE, P, SIZE)\n \n-#define ASM_OUTPUT_ADDR_VEC_PROLOGUE(FILE, MODE, LEN)\t\\\n-  fprintf (FILE, \"\\t/* HELP! */\\n\");\n-\n /* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n-  fprintf (FILE, \"\\t.word L_%d\\n\", VALUE)\n+  fprintf (FILE, \"\\t%sL_%d\\n\", TARGET_UNIX_ASM ? \"\" : \".word \", VALUE)\n \n /* This is how to output an element of a case-vector that is relative.\n    Don't define this if it is not supported. */\n@@ -1188,7 +1190,7 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n     }\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.=.+ %d\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.=.+ %o\\n\", (SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n@@ -1198,15 +1200,15 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n   fprintf ((FILE), \"\\n\"),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \": .=.+ %d\\n\", (ROUNDED))\t\t\\\n+  fprintf ((FILE), \": .=.+ %o\\n\", (ROUNDED))\t\t\\\n )\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( assemble_name ((FILE), (NAME)),\t\t\t\t\\\n-  fprintf ((FILE), \":\\t.=.+ %d\\n\", (ROUNDED)))\n+  fprintf ((FILE), \":\\t.=.+ %o\\n\", (ROUNDED)))\n \n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable named NAME.\n@@ -1219,8 +1221,8 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n /* Define the parentheses used to group arithmetic operations\n    in assembler code.  */\n \n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n+#define ASM_OPEN_PAREN \"[\"\n+#define ASM_CLOSE_PAREN \"]\"\n \n /* Define results of standard character escape sequences.  */\n #define TARGET_BELL 007\n@@ -1248,7 +1250,7 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n     { union { double d; int i[2]; } u;\t\t\t\t\t\\\n       u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n       fprintf (FILE, \"#%.20e\", u.d); }\t\t\t\t\t\\\n-  else { putc ('$', FILE); output_addr_const (FILE, X); }}\n+  else { putc ('$', FILE); output_addr_const_pdp11 (FILE, X); }}\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n \n@@ -1284,10 +1286,10 @@ JMP\tFUNCTION\t0x0058  0x0000 <- FUNCTION\n   if (TARGET_SPLIT)\t\t\t\\\n     abort();\t\t\t\t\\\n \t\t\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, GEN_INT (0x9400+STATIC_CHAIN_REGNUM)); \\\n-  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, GEN_INT(0x0058));\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x9400+STATIC_CHAIN_REGNUM)); \\\n+  ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT(0x0058));\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\\\n }\n \n #define TRAMPOLINE_SIZE 8"}, {"sha": "f07acefd3bdfabcdbef4fc14cbe6243e0b8ccafd", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af36a4d251dc01522e818b18e61e7bd289419654/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af36a4d251dc01522e818b18e61e7bd289419654/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=af36a4d251dc01522e818b18e61e7bd289419654", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for the pdp11 for GNU C compiler\n-;; Copyright (C) 1994, 1995, 1997 Free Software Foundation, Inc.\n+;; Copyright (C) 1994, 1995, 1997, 1999 Free Software Foundation, Inc.\n ;; Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n ;; This file is part of GNU CC.\n@@ -89,7 +89,7 @@\n   \"*\n {\n   cc_status.flags = CC_IN_FPU;\n-  return \\\"cmpd %0, %1\\;cfcc\\\";\n+  return \\\"{cmpd|cmpf} %0, %1\\;cfcc\\\";\n }\"\n   [(set_attr \"length\" \"2,3,6\")])\n \n@@ -180,7 +180,7 @@\n   \"*\n {\n   cc_status.flags = CC_IN_FPU;\n-  return \\\"tstd %0\\;cfcc\\\";\n+  return \\\"{tstd|tstf} %0\\;cfcc\\\";\n }\"\n   [(set_attr \"length\" \"2,3\")])\n \n@@ -730,16 +730,16 @@\n   \"TARGET_FPU\"\n   \"* if (which_alternative ==0)\n      {\n-       output_asm_insn(\\\"stcdf %1, -(sp)\\\", operands);\n+       output_asm_insn(\\\"{stcdf|movfo} %1, -(sp)\\\", operands);\n        output_asm_insn(\\\"mov (sp)+, %0\\\", operands);\n        operands[0] = gen_rtx(REG, HImode, REGNO (operands[0])+1);\n        output_asm_insn(\\\"mov (sp)+, %0\\\", operands);\n        return \\\"\\\";\n      }\n      else if (which_alternative == 1)\n-       return \\\"stcdf %1, %0\\\";\n+       return \\\"{stcdf|movfo} %1, %0\\\";\n      else \n-       return \\\"stcdf %1, %0\\\";\n+       return \\\"{stcdf|movfo} %1, %0\\\";\n   \"\n   [(set_attr \"length\" \"3,1,2\")])\n \n@@ -782,9 +782,9 @@\n \t(float_extend:DF (match_operand:SF 1 \"general_operand\" \"r,R,Q\")))]\n   \"TARGET_FPU\"\n   \"@\n-   mov %1, -(sp)\\;ldcfd (sp)+,%0\n-   ldcfd %1, %0\n-   ldcfd %1, %0\"\n+   mov %1, -(sp)\\;{ldcfd|movof} (sp)+,%0\n+   {ldcfd|movof} %1, %0\n+   {ldcfd|movof} %1, %0\"\n   [(set_attr \"length\" \"2,1,2\")])\n \n ;; does movb sign extend in register-to-register move?\n@@ -923,22 +923,22 @@\n        output_asm_insn(\\\"mov %1, -(sp)\\\", operands);\n        \n        output_asm_insn(\\\"setl\\\", operands);\n-       output_asm_insn(\\\"ldcld (sp)+, %0\\\", operands);\n+       output_asm_insn(\\\"{ldcld|movif} (sp)+, %0\\\", operands);\n        output_asm_insn(\\\"seti\\\", operands);\n        return \\\"\\\";\n      }\n      else if (which_alternative == 1)\n-       return \\\"setl\\;ldcld %1, %0\\;seti\\\";\n+       return \\\"setl\\;{ldcld|movif} %1, %0\\;seti\\\";\n      else \n-       return \\\"setl\\;ldcld %1, %0\\;seti\\\";\n+       return \\\"setl\\;{ldcld|movif} %1, %0\\;seti\\\";\n   \"\n   [(set_attr \"length\" \"5,3,4\")])\n \n (define_insn \"floathidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=a,a\")\n \t(float:DF (match_operand:HI 1 \"general_operand\" \"rR,Qi\")))]\n   \"TARGET_FPU\"\n-  \"ldcid %1, %0\"\n+  \"{ldcid|movif} %1, %0\"\n   [(set_attr \"length\" \"1,2\")])\n \t\n ;; cut float to int\n@@ -949,25 +949,25 @@\n   \"* if (which_alternative ==0)\n      {\n        output_asm_insn(\\\"setl\\\", operands);\n-       output_asm_insn(\\\"stcdl %1, -(sp)\\\", operands);\n+       output_asm_insn(\\\"{stcdl|movfi} %1, -(sp)\\\", operands);\n        output_asm_insn(\\\"seti\\\", operands);\n        output_asm_insn(\\\"mov (sp)+, %0\\\", operands);\n        operands[0] = gen_rtx(REG, HImode, REGNO (operands[0])+1);\n        output_asm_insn(\\\"mov (sp)+, %0\\\", operands);\n        return \\\"\\\";\n      }\n      else if (which_alternative == 1)\n-       return \\\"setl\\;stcdl %1, %0\\;seti\\\";\n+       return \\\"setl\\;{stcdl|movfi} %1, %0\\;seti\\\";\n      else \n-       return \\\"setl\\;stcdl %1, %0\\;seti\\\";\n+       return \\\"setl\\;{stcdl|movfi} %1, %0\\;seti\\\";\n   \"\n   [(set_attr \"length\" \"5,3,4\")])\n \n (define_insn \"fix_truncdfhi2\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=rR,Q\")\n \t(fix:HI (fix:DF (match_operand:DF 1 \"register_operand\" \"a,a\"))))]\n   \"TARGET_FPU\"\n-  \"stcdi %1, %0\"\n+  \"{stcdi|movfi} %1, %0\"\n   [(set_attr \"length\" \"1,2\")])\n \n \f\n@@ -979,7 +979,7 @@\n \t(plus:DF (match_operand:DF 1 \"register_operand\" \"%0,0,0\")\n \t\t (match_operand:DF 2 \"general_operand\" \"fR,Q,F\")))]\n   \"TARGET_FPU\"\n-  \"addd %2, %0\"\n+  \"{addd|addf} %2, %0\"\n   [(set_attr \"length\" \"1,2,5\")])\n \n (define_insn \"addsi3\"\n@@ -1082,7 +1082,7 @@\n \t(minus:DF (match_operand:DF 1 \"register_operand\" \"0,0\")\n \t\t  (match_operand:DF 2 \"general_operand\" \"fR,Q\")))]\n   \"TARGET_FPU\"\n-  \"subd %2, %0\"\n+  \"{subd|subf} %2, %0\"\n   [(set_attr \"length\" \"1,2\")])\n \n (define_insn \"subsi3\"\n@@ -1560,7 +1560,7 @@\n   [(set (match_operand:DF 0 \"general_operand\" \"=fR,Q\")\n \t(abs:DF (match_operand:DF 1 \"general_operand\" \"0,0\")))]\n   \"TARGET_FPU\"\n-  \"absd %0\"\n+  \"{absd|absf} %0\"\n   [(set_attr \"length\" \"1,2\")])\n \n (define_insn \"abshi2\"\n@@ -1624,7 +1624,7 @@\n   [(set (match_operand:DF 0 \"general_operand\" \"=fR,Q\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"0,0\")))]\n   \"TARGET_FPU\"\n-  \"negd %0\"\n+  \"{negd|negf} %0\"\n   [(set_attr \"length\" \"1,2\")])\n \n (define_insn \"neghi2\"\n@@ -1712,7 +1712,7 @@\n \t(mult:DF (match_operand:DF 1 \"register_operand\" \"%0,0,0\")\n \t\t (match_operand:DF 2 \"general_operand\" \"fR,Q,F\")))]\n   \"TARGET_FPU\"\n-  \"muld %2, %0\"\n+  \"{muld|mulf} %2, %0\"\n   [(set_attr \"length\" \"1,2,5\")])\n \n ;; 16 bit result multiply:\n@@ -1764,7 +1764,7 @@\n \t(div:DF (match_operand:DF 1 \"register_operand\" \"0,0,0\")\n \t\t(match_operand:DF 2 \"general_operand\" \"fR,Q,F\")))]\n   \"TARGET_FPU\"\n-  \"divd %2, %0\"\n+  \"{divd|divf} %2, %0\"\n   [(set_attr \"length\" \"1,2,5\")])\n \n \t "}]}