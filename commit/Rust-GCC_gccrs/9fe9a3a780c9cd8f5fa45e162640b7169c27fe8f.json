{"sha": "9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlOWEzYTc4MGM5Y2Q4ZjVmYTQ1ZTE2MjY0MGI3MTY5YzI3ZmU4Zg==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-07-22T09:58:50Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-07-22T09:58:50Z"}, "message": "libcaf.h: Add parameter stat to caf_get() and caf_send()'s function prototypes.\n\nlibgfortran/ChangeLog:\n\n2016-07-22  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\t* caf/libcaf.h: Add parameter stat to caf_get() and\n\tcaf_send()'s function prototypes.\n\t* caf/single.c (_gfortran_caf_get): Implement reporting\n\terror using stat instead of abort().\n\t(_gfortran_caf_send): Same.\n\t(_gfortran_caf_sendget): Use NULL for stat when calling\n\tcaf_send().\n\n\ngcc/testsuite/ChangeLog:\n\n2016-07-22  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\t* gfortran.dg/coarray_stat_2.f90: New test.\n\nFrom-SVN: r238636", "tree": {"sha": "1c0f3d1cddd27ab0187228634e40acedd23011c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c0f3d1cddd27ab0187228634e40acedd23011c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/comments", "author": null, "committer": null, "parents": [{"sha": "4971dd802d586f57d999152825d407800970be4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4971dd802d586f57d999152825d407800970be4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4971dd802d586f57d999152825d407800970be4e"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "662eda641ac4e3c66b2bf9dd26c1940d4b0d06b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f", "patch": "@@ -1,3 +1,7 @@\n+2016-07-22  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* gfortran.dg/coarray_stat_2.f90: New test.\n+\n 2016-07-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vec-extract.h: New files to check the"}, {"sha": "3bbd3fc4bfc6aa2f5799e2bdb68590f3e4875b07", "filename": "gcc/testsuite/gfortran.dg/coarray_stat_2.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_stat_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_stat_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_stat_2.f90?ref=9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+! { dg-options \"-fcoarray=lib -lcaf_single\" }\n+!\n+! Support for stat= in caf reference\n+!\n+program whitespace\n+  implicit none\n+\n+  integer :: me[*],tmp,stat\n+\n+  me = this_image()\n+  stat = 0\n+\n+  sync all(stat = stat)\n+\n+  if(stat /= 0) write(*,*) 'failure during sync'\n+\n+  stat = 42\n+\n+  tmp = me[num_images(),stat = stat]\n+  if(stat /= 0) call abort()\n+\n+end program whitespace"}, {"sha": "8b21527d0a4e15d0e810b72915af2509e2b2171c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f", "patch": "@@ -1,3 +1,13 @@\n+2016-07-22  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* caf/libcaf.h: Add parameter stat to caf_get() and\n+\tcaf_send()'s function prototypes.\n+\t* caf/single.c (_gfortran_caf_get): Implement reporting\n+\terror using stat instead of abort().\n+\t(_gfortran_caf_send): Same.\n+\t(_gfortran_caf_sendget): Use NULL for stat when calling\n+\tcaf_send().\n+\n 2016-06-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/48852"}, {"sha": "863b5b463d85afa1f8400cfda29b244dead8a1ca", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f", "patch": "@@ -121,9 +121,11 @@ void _gfortran_caf_co_reduce (gfc_descriptor_t *, void* (*) (void *, void*),\n \t\t\t      int, int, int *, char *, int, int);\n \n void _gfortran_caf_get (caf_token_t, size_t, int, gfc_descriptor_t *,\n-                        caf_vector_t *, gfc_descriptor_t *, int, int, bool);\n+\t\t\tcaf_vector_t *, gfc_descriptor_t *, int, int, bool,\n+\t\t\tint *);\n void _gfortran_caf_send (caf_token_t, size_t, int, gfc_descriptor_t *,\n-\t\t\t caf_vector_t *, gfc_descriptor_t *, int, int, bool);\n+\t\t\t caf_vector_t *, gfc_descriptor_t *, int, int, bool,\n+\t\t\t int *);\n void _gfortran_caf_sendget (caf_token_t, size_t, int, gfc_descriptor_t *,\n \t\t\t    caf_vector_t *, caf_token_t, size_t, int,\n \t\t\t    gfc_descriptor_t *, caf_vector_t *, int, int, bool);"}, {"sha": "21916d3ae6f79daf5e03c692c1b1b83dd7e92710", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=9fe9a3a780c9cd8f5fa45e162640b7169c27fe8f", "patch": "@@ -328,7 +328,7 @@ assign_char1_from_char4 (size_t dst_size, size_t src_size, unsigned char *dst,\n \n static void\n convert_type (void *dst, int dst_type, int dst_kind, void *src, int src_type,\n-\t      int src_kind)\n+\t      int src_kind, int *stat)\n {\n #ifdef HAVE_GFC_INTEGER_16\n   typedef __int128 int128t;\n@@ -581,7 +581,10 @@ convert_type (void *dst, int dst_type, int dst_kind, void *src, int src_type,\n error:\n   fprintf (stderr, \"libcaf_single RUNTIME ERROR: Cannot convert type %d kind \"\n \t   \"%d to type %d kind %d\\n\", src_type, src_kind, dst_type, dst_kind);\n-  abort();\n+  if (stat)\n+    *stat = 1;\n+  else\n+    abort ();\n }\n \n \n@@ -591,7 +594,7 @@ _gfortran_caf_get (caf_token_t token, size_t offset,\n \t\t   gfc_descriptor_t *src,\n \t\t   caf_vector_t *src_vector __attribute__ ((unused)),\n \t\t   gfc_descriptor_t *dest, int src_kind, int dst_kind,\n-\t\t   bool may_require_tmp)\n+\t\t   bool may_require_tmp, int *stat)\n {\n   /* FIXME: Handle vector subscripts.  */\n   size_t i, k, size;\n@@ -600,6 +603,9 @@ _gfortran_caf_get (caf_token_t token, size_t offset,\n   size_t src_size = GFC_DESCRIPTOR_SIZE (src);\n   size_t dst_size = GFC_DESCRIPTOR_SIZE (dest);\n \n+  if (stat)\n+    *stat = 0;\n+\n   if (rank == 0)\n     {\n       void *sr = (void *) ((char *) TOKEN (token) + offset);\n@@ -626,7 +632,7 @@ _gfortran_caf_get (caf_token_t token, size_t offset,\n \t\t\t\t sr);\n       else\n \tconvert_type (GFC_DESCRIPTOR_DATA (dest), GFC_DESCRIPTOR_TYPE (dest),\n-\t\t      dst_kind, sr, GFC_DESCRIPTOR_TYPE (src), src_kind);\n+\t\t      dst_kind, sr, GFC_DESCRIPTOR_TYPE (src), src_kind, stat);\n       return;\n     }\n \n@@ -710,7 +716,7 @@ _gfortran_caf_get (caf_token_t token, size_t offset,\n \t    assign_char4_from_char1 (dst_size, src_size, dst, sr);\n \t  else\n \t    convert_type (dst, GFC_DESCRIPTOR_TYPE (dest), dst_kind,\n-\t\t\t  sr, GFC_DESCRIPTOR_TYPE (src), src_kind);\n+\t\t\t  sr, GFC_DESCRIPTOR_TYPE (src), src_kind, stat);\n           array_offset_sr += src_size;\n \t}\n \n@@ -770,7 +776,7 @@ _gfortran_caf_get (caf_token_t token, size_t offset,\n \tassign_char4_from_char1 (dst_size, src_size, dst, sr);\n       else\n \tconvert_type (dst, GFC_DESCRIPTOR_TYPE (dest), dst_kind,\n-\t\t      sr, GFC_DESCRIPTOR_TYPE (src), src_kind);\n+\t\t      sr, GFC_DESCRIPTOR_TYPE (src), src_kind, stat);\n     }\n }\n \n@@ -781,7 +787,7 @@ _gfortran_caf_send (caf_token_t token, size_t offset,\n \t\t    gfc_descriptor_t *dest,\n \t\t    caf_vector_t *dst_vector __attribute__ ((unused)),\n \t\t    gfc_descriptor_t *src, int dst_kind, int src_kind,\n-\t\t    bool may_require_tmp)\n+\t\t    bool may_require_tmp, int *stat)\n {\n   /* FIXME: Handle vector subscripts.  */\n   size_t i, k, size;\n@@ -790,6 +796,9 @@ _gfortran_caf_send (caf_token_t token, size_t offset,\n   size_t src_size = GFC_DESCRIPTOR_SIZE (src);\n   size_t dst_size = GFC_DESCRIPTOR_SIZE (dest);\n \n+  if (stat)\n+    *stat = 0;\n+\n   if (rank == 0)\n     {\n       void *dst = (void *) ((char *) TOKEN (token) + offset);\n@@ -816,7 +825,7 @@ _gfortran_caf_send (caf_token_t token, size_t offset,\n       else\n \tconvert_type (dst, GFC_DESCRIPTOR_TYPE (dest), dst_kind,\n \t\t      GFC_DESCRIPTOR_DATA (src), GFC_DESCRIPTOR_TYPE (src),\n-\t\t      src_kind);\n+\t\t      src_kind, stat);\n       return;\n     }\n \n@@ -909,7 +918,7 @@ _gfortran_caf_send (caf_token_t token, size_t offset,\n \t    assign_char4_from_char1 (dst_size, src_size, dst, sr);\n \t  else\n \t    convert_type (dst, GFC_DESCRIPTOR_TYPE (dest), dst_kind,\n-\t\t\t  sr, GFC_DESCRIPTOR_TYPE (src), src_kind);\n+\t\t\t  sr, GFC_DESCRIPTOR_TYPE (src), src_kind, stat);\n           if (GFC_DESCRIPTOR_RANK (src))\n \t    array_offset_sr += src_size;\n \t}\n@@ -976,7 +985,7 @@ _gfortran_caf_send (caf_token_t token, size_t offset,\n \tassign_char4_from_char1 (dst_size, src_size, dst, sr);\n       else\n \tconvert_type (dst, GFC_DESCRIPTOR_TYPE (dest), dst_kind,\n-\t\t      sr, GFC_DESCRIPTOR_TYPE (src), src_kind);\n+\t\t      sr, GFC_DESCRIPTOR_TYPE (src), src_kind, stat);\n     }\n }\n \n@@ -997,7 +1006,7 @@ _gfortran_caf_sendget (caf_token_t dst_token, size_t dst_offset,\n   void *src_base = GFC_DESCRIPTOR_DATA (src);\n   GFC_DESCRIPTOR_DATA (src) = (void *) ((char *) TOKEN (src_token) + src_offset);\n   _gfortran_caf_send (dst_token, dst_offset, dst_image_index, dest, dst_vector,\n-\t\t      src, dst_kind, src_kind, may_require_tmp);\n+\t\t      src, dst_kind, src_kind, may_require_tmp, NULL);\n   GFC_DESCRIPTOR_DATA (src) = src_base;\n }\n "}]}