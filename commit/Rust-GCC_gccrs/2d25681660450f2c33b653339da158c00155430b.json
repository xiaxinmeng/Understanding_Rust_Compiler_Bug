{"sha": "2d25681660450f2c33b653339da158c00155430b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQyNTY4MTY2MDQ1MGYyYzMzYjY1MzMzOWRhMTU4YzAwMTU1NDMwYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-11-19T18:58:39Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-19T18:58:39Z"}, "message": "reduction-dbl.c: New.\n\n\t* libgomp.oacc-c-c++-common/reduction-dbl.c: New.\n\t* libgomp.oacc-c-c++-common/reduction-flt.c: New.\n\t* libgomp.oacc-c-c++-common/reduction-cplx-dbl.c: Use typedef.\n\t* libgomp.oacc-c-c++-common/reduction-cplx-flt.c: Use typedef.\n\t* libgomp.oacc-c-c++-common/reduction-2.c: Uncomment broken tests\n\tand fix.\n\t* libgomp.oacc-c-c++-common/reduction-3.c: Likewise.\n\t* libgomp.oacc-c-c++-common/reduction-4.c: Likewise.\n\nFrom-SVN: r230621", "tree": {"sha": "0801a134b9c7cf83d81b5d04a5c50a0e3c85e11b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0801a134b9c7cf83d81b5d04a5c50a0e3c85e11b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d25681660450f2c33b653339da158c00155430b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d25681660450f2c33b653339da158c00155430b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d25681660450f2c33b653339da158c00155430b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d25681660450f2c33b653339da158c00155430b/comments", "author": null, "committer": null, "parents": [{"sha": "0398c18360a7b4a4024b1cc0fee3e3fcb9293e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0398c18360a7b4a4024b1cc0fee3e3fcb9293e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0398c18360a7b4a4024b1cc0fee3e3fcb9293e09"}], "stats": {"total": 458, "additions": 295, "deletions": 163}, "files": [{"sha": "2fff11b170f6f7536175885f94bf757813bc7899", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25681660450f2c33b653339da158c00155430b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25681660450f2c33b653339da158c00155430b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2d25681660450f2c33b653339da158c00155430b", "patch": "@@ -1,3 +1,14 @@\n+2015-11-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* libgomp.oacc-c-c++-common/reduction-dbl.c: New.\n+\t* libgomp.oacc-c-c++-common/reduction-flt.c: New.\n+\t* libgomp.oacc-c-c++-common/reduction-cplx-dbl.c: Use typedef.\n+\t* libgomp.oacc-c-c++-common/reduction-cplx-flt.c: Use typedef.\n+\t* libgomp.oacc-c-c++-common/reduction-2.c: Uncomment broken tests\n+\tand fix.\n+\t* libgomp.oacc-c-c++-common/reduction-3.c: Likewise.\n+\t* libgomp.oacc-c-c++-common/reduction-4.c: Likewise.\n+\n 2015-11-18  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/reduction-cplx-flt.c: Add"}, {"sha": "8a0b0d6df60466837eb2cd3db9fdee355c18100c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-2.c", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-2.c?ref=2d25681660450f2c33b653339da158c00155430b", "patch": "@@ -50,39 +50,37 @@ main(void)\n \n   if (fabs(result - vresult) > .0001)\n     abort ();\n-//   result = 0;\n-//   vresult = 0;\n-// \n-//   /* 'max' reductions.  */\n-// #pragma acc parallel vector_length (vl)\n-// #pragma acc loop reduction (+:result)\n-//   for (i = 0; i < n; i++)\n-//       result = result > array[i] ? result : array[i];\n-// \n-//   /* Verify the reduction.  */\n-//   for (i = 0; i < n; i++)\n-//       vresult = vresult > array[i] ? vresult : array[i];\n-// \n-//   printf(\"%d != %d\\n\", result, vresult);\n-//   if (result != vresult)\n-//     abort ();\n-// \n-//   result = 0;\n-//   vresult = 0;\n-// \n-//   /* 'min' reductions.  */\n-// #pragma acc parallel vector_length (vl)\n-// #pragma acc loop reduction (+:result)\n-//   for (i = 0; i < n; i++)\n-//       result = result < array[i] ? result : array[i];\n-// \n-//   /* Verify the reduction.  */\n-//   for (i = 0; i < n; i++)\n-//       vresult = vresult < array[i] ? vresult : array[i];\n-// \n-//   printf(\"%d != %d\\n\", result, vresult);\n-//   if (result != vresult)\n-//     abort ();\n+  result = 0;\n+  vresult = 0;\n+\n+  /* 'max' reductions.  */\n+#pragma acc parallel vector_length (vl) copy(result)\n+#pragma acc loop reduction (max:result)\n+  for (i = 0; i < n; i++)\n+    result = result > array[i] ? result : array[i];\n+\n+  /* Verify the reduction.  */\n+  for (i = 0; i < n; i++)\n+    vresult = vresult > array[i] ? vresult : array[i];\n+\n+  if (result != vresult)\n+    abort ();\n+\n+  result = 0;\n+  vresult = 0;\n+\n+  /* 'min' reductions.  */\n+#pragma acc parallel vector_length (vl) copy(result)\n+#pragma acc loop reduction (min:result)\n+  for (i = 0; i < n; i++)\n+    result = result < array[i] ? result : array[i];\n+\n+  /* Verify the reduction.  */\n+  for (i = 0; i < n; i++)\n+    vresult = vresult < array[i] ? vresult : array[i];\n+\n+  if (result != vresult)\n+    abort ();\n \n   result = 5;\n   vresult = 5;"}, {"sha": "a233e29229c3924870ad6b96de7b4985fa044b1f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-3.c", "status": "modified", "additions": 9, "deletions": 42, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-3.c?ref=2d25681660450f2c33b653339da158c00155430b", "patch": "@@ -22,67 +22,34 @@ main(void)\n   result = 0;\n   vresult = 0;\n \n-  /* '+' reductions.  */\n+  /* 'max' reductions.  */\n #pragma acc parallel vector_length (vl) copy(result)\n-#pragma acc loop reduction (+:result)\n+#pragma acc loop reduction (max:result)\n   for (i = 0; i < n; i++)\n-    result += array[i];\n+    result = result > array[i] ? result : array[i];\n \n   /* Verify the reduction.  */\n   for (i = 0; i < n; i++)\n-    vresult += array[i];\n+    vresult = vresult > array[i] ? vresult : array[i];\n \n   if (result != vresult)\n     abort ();\n \n   result = 0;\n   vresult = 0;\n \n-  /* '*' reductions.  */\n+  /* 'min' reductions.  */\n #pragma acc parallel vector_length (vl) copy(result)\n-#pragma acc loop reduction (*:result)\n+#pragma acc loop reduction (min:result)\n   for (i = 0; i < n; i++)\n-    result *= array[i];\n+    result = result < array[i] ? result : array[i];\n \n   /* Verify the reduction.  */\n   for (i = 0; i < n; i++)\n-    vresult *= array[i];\n+    vresult = vresult < array[i] ? vresult : array[i];\n \n-  if (fabs(result - vresult) > .0001)\n+  if (result != vresult)\n     abort ();\n-//   result = 0;\n-//   vresult = 0;\n-// \n-//   /* 'max' reductions.  */\n-// #pragma acc parallel vector_length (vl)\n-// #pragma acc loop reduction (+:result)\n-//   for (i = 0; i < n; i++)\n-//       result = result > array[i] ? result : array[i];\n-// \n-//   /* Verify the reduction.  */\n-//   for (i = 0; i < n; i++)\n-//       vresult = vresult > array[i] ? vresult : array[i];\n-// \n-//   printf(\"%d != %d\\n\", result, vresult);\n-//   if (result != vresult)\n-//     abort ();\n-// \n-//   result = 0;\n-//   vresult = 0;\n-// \n-//   /* 'min' reductions.  */\n-// #pragma acc parallel vector_length (vl)\n-// #pragma acc loop reduction (+:result)\n-//   for (i = 0; i < n; i++)\n-//       result = result < array[i] ? result : array[i];\n-// \n-//   /* Verify the reduction.  */\n-//   for (i = 0; i < n; i++)\n-//       vresult = vresult < array[i] ? vresult : array[i];\n-// \n-//   printf(\"%d != %d\\n\", result, vresult);\n-//   if (result != vresult)\n-//     abort ();\n \n   result = 5;\n   vresult = 5;"}, {"sha": "59d49c1b7a1e93a2e1f93d6e2c1cbf20cc9564b0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-4.c", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-4.c?ref=2d25681660450f2c33b653339da158c00155430b", "patch": "@@ -23,76 +23,6 @@ main(void)\n   result = 0;\n   vresult = 0;\n \n-  /* '+' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(result)\n-#pragma acc loop reduction (+:result)\n-  for (i = 0; i < n; i++)\n-    result += array[i];\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult += array[i];\n-\n-  if (result != vresult)\n-    abort ();\n-\n-  result = 0;\n-  vresult = 0;\n-\n-  /* Needs support for complex multiplication.  */\n-\n-//   /* '*' reductions.  */\n-// #pragma acc parallel vector_length (vl)\n-// #pragma acc loop reduction (*:result)\n-//   for (i = 0; i < n; i++)\n-//     result *= array[i];\n-// \n-//   /* Verify the reduction.  */\n-//   for (i = 0; i < n; i++)\n-//     vresult *= array[i];\n-// \n-//   if (fabs(result - vresult) > .0001)\n-//     abort ();\n-//   result = 0;\n-//   vresult = 0;\n-\n-//   /* 'max' reductions.  */\n-// #pragma acc parallel vector_length (vl)\n-// #pragma acc loop reduction (+:result)\n-//   for (i = 0; i < n; i++)\n-//       result = result > array[i] ? result : array[i];\n-// \n-//   /* Verify the reduction.  */\n-//   for (i = 0; i < n; i++)\n-//       vresult = vresult > array[i] ? vresult : array[i];\n-// \n-//   printf(\"%d != %d\\n\", result, vresult);\n-//   if (result != vresult)\n-//     abort ();\n-// \n-//   result = 0;\n-//   vresult = 0;\n-// \n-//   /* 'min' reductions.  */\n-// #pragma acc parallel vector_length (vl)\n-// #pragma acc loop reduction (+:result)\n-//   for (i = 0; i < n; i++)\n-//       result = result < array[i] ? result : array[i];\n-// \n-//   /* Verify the reduction.  */\n-//   for (i = 0; i < n; i++)\n-//       vresult = vresult < array[i] ? vresult : array[i];\n-// \n-//   printf(\"%d != %d\\n\", result, vresult);\n-//   if (result != vresult)\n-//     abort ();\n-\n-  result = 5;\n-  vresult = 5;\n-\n-  lresult = false;\n-  lvresult = false;\n-\n   /* '&&' reductions.  */\n #pragma acc parallel vector_length (vl) copy(lresult)\n #pragma acc loop reduction (&&:lresult)"}, {"sha": "9c8e825df5265fedcd6c46ea306eae98e0a1632e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-cplx-dbl.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-dbl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-dbl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-dbl.c?ref=2d25681660450f2c33b653339da158c00155430b", "patch": "@@ -3,10 +3,11 @@\n \n /* Double float has 53 bits of fraction. */\n #define FRAC (1.0 / (1LL << 48))\n+typedef double _Complex Type;\n \n-int close_enough (double _Complex a, double _Complex b)\n+int close_enough (Type a, Type b)\n {\n-  double _Complex diff = a - b;\n+  Type diff = a - b;\n   double mag2_a = __real__(a) * __real__ (a) + __imag__ (a) * __imag__ (a);\n   double mag2_diff = (__real__(diff) * __real__ (diff)\n \t\t     + __imag__ (diff) * __imag__ (diff));\n@@ -17,9 +18,9 @@ int close_enough (double _Complex a, double _Complex b)\n #define N 100\n \n static int __attribute__ ((noinline))\n-vector (double _Complex ary[N], double _Complex sum, double _Complex prod)\n+vector (Type ary[N], Type sum, Type prod)\n {\n-  double _Complex tsum = 0, tprod = 1;\n+  Type tsum = 0, tprod = 1;\n \n #pragma acc parallel vector_length(32) copyin(ary[0:N]) copy (tsum, tprod)\n   {\n@@ -41,9 +42,9 @@ vector (double _Complex ary[N], double _Complex sum, double _Complex prod)\n }\n \n static int __attribute__ ((noinline))\n-worker (double _Complex ary[N], double _Complex sum, double _Complex prod)\n+worker (Type ary[N], Type sum, Type prod)\n {\n-  double _Complex tsum = 0, tprod = 1;\n+  Type tsum = 0, tprod = 1;\n \n #pragma acc parallel num_workers(32) copyin(ary[0:N]) copy (tsum, tprod)\n   {\n@@ -65,9 +66,9 @@ worker (double _Complex ary[N], double _Complex sum, double _Complex prod)\n }\n \n static int __attribute__ ((noinline))\n-gang (double _Complex ary[N], double _Complex sum, double _Complex prod)\n+gang (Type ary[N], Type sum, Type prod)\n {\n-  double _Complex tsum = 0, tprod = 1;\n+  Type tsum = 0, tprod = 1;\n \n #pragma acc parallel num_gangs (32) copyin(ary[0:N]) copy (tsum, tprod)\n   {\n@@ -90,7 +91,7 @@ gang (double _Complex ary[N], double _Complex sum, double _Complex prod)\n \n int main (void)\n {\n-  double _Complex ary[N], sum = 0, prod = 1;\n+  Type ary[N], sum = 0, prod = 1;\n \n   for (int ix = 0; ix < N;  ix++)\n     {"}, {"sha": "46bb70f27e09aa0ffe13a123b2897e7085cebbc0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-cplx-flt.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-flt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-flt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-flt.c?ref=2d25681660450f2c33b653339da158c00155430b", "patch": "@@ -3,10 +3,11 @@\n \n /* Single float has 23 bits of fraction. */\n #define FRAC (1.0f / (1 << 20))\n+typedef float _Complex Type;\n \n-int close_enough (float _Complex a, float _Complex b)\n+int close_enough (Type a, Type b)\n {\n-  float _Complex diff = a - b;\n+  Type diff = a - b;\n   float mag2_a = __real__(a) * __real__ (a) + __imag__ (a) * __imag__ (a);\n   float mag2_diff = (__real__(diff) * __real__ (diff)\n \t\t     + __imag__ (diff) * __imag__ (diff));\n@@ -17,9 +18,9 @@ int close_enough (float _Complex a, float _Complex b)\n #define N 100\n \n static int __attribute__ ((noinline))\n-vector (float _Complex ary[N], float _Complex sum, float _Complex prod)\n+vector (Type ary[N], Type sum, Type prod)\n {\n-  float _Complex tsum = 0, tprod = 1;\n+  Type tsum = 0, tprod = 1;\n \n #pragma acc parallel vector_length(32) copyin(ary[0:N]) copy (tsum, tprod)\n   {\n@@ -41,9 +42,9 @@ vector (float _Complex ary[N], float _Complex sum, float _Complex prod)\n }\n \n static int __attribute__ ((noinline))\n-worker (float _Complex ary[N], float _Complex sum, float _Complex prod)\n+worker (Type ary[N], Type sum, Type prod)\n {\n-  float _Complex tsum = 0, tprod = 1;\n+  Type tsum = 0, tprod = 1;\n \n #pragma acc parallel num_workers(32) copyin(ary[0:N]) copy (tsum, tprod)\n   {\n@@ -65,9 +66,9 @@ worker (float _Complex ary[N], float _Complex sum, float _Complex prod)\n }\n \n static int __attribute__ ((noinline))\n-gang (float _Complex ary[N], float _Complex sum, float _Complex prod)\n+gang (Type ary[N], Type sum, Type prod)\n {\n-  float _Complex tsum = 0, tprod = 1;\n+  Type tsum = 0, tprod = 1;\n \n #pragma acc parallel num_gangs (32) copyin(ary[0:N]) copy (tsum, tprod)\n   {\n@@ -90,7 +91,7 @@ gang (float _Complex ary[N], float _Complex sum, float _Complex prod)\n \n int main (void)\n {\n-  float _Complex ary[N], sum = 0, prod = 1;\n+  Type ary[N], sum = 0, prod = 1;\n \n   for (int ix = 0; ix < N;  ix++)\n     {"}, {"sha": "430b19931268dbc35a77cebb96937385e90bf2f9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-dbl.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-dbl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-dbl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-dbl.c?ref=2d25681660450f2c33b653339da158c00155430b", "patch": "@@ -0,0 +1,112 @@\n+\n+/* Double float has 53 bits of fraction. */\n+#define FRAC (1.0 / (1LL << 48))\n+typedef double Type;\n+\n+int close_enough (Type a, Type b)\n+{\n+  Type diff = a - b;\n+  if (diff < 0)\n+    diff = -diff;\n+\n+  return diff / a < FRAC;\n+}\n+\n+#define N 100\n+\n+static int __attribute__ ((noinline))\n+vector (Type ary[N], Type sum, Type prod)\n+{\n+  Type tsum = 0, tprod = 1;\n+\n+#pragma acc parallel vector_length(32) copyin(ary[0:N]) copy (tsum, tprod)\n+  {\n+#pragma acc loop vector reduction(+:tsum) reduction (*:tprod)\n+    for (int ix = 0; ix < N; ix++)\n+      {\n+\ttsum += ary[ix];\n+\ttprod *= ary[ix];\n+      }\n+  }\n+\n+  if (!close_enough (sum, tsum))\n+    return 1;\n+\n+  if (!close_enough (prod, tprod))\n+    return 1;\n+\n+  return 0;\n+}\n+\n+static int __attribute__ ((noinline))\n+worker (Type ary[N], Type sum, Type prod)\n+{\n+  Type tsum = 0, tprod = 1;\n+\n+#pragma acc parallel num_workers(32) copyin(ary[0:N]) copy (tsum, tprod)\n+  {\n+#pragma acc loop worker reduction(+:tsum) reduction (*:tprod)\n+    for (int ix = 0; ix < N; ix++)\n+      {\n+\ttsum += ary[ix];\n+\ttprod *= ary[ix];\n+      }\n+  }\n+\n+  if (!close_enough (sum, tsum))\n+    return 1;\n+\n+  if (!close_enough (prod, tprod))\n+    return 1;\n+\n+  return 0;\n+}\n+\n+static int __attribute__ ((noinline))\n+gang (Type ary[N], Type sum, Type prod)\n+{\n+  Type tsum = 0, tprod = 1;\n+\n+#pragma acc parallel num_gangs (32) copyin(ary[0:N]) copy (tsum, tprod)\n+  {\n+#pragma acc loop gang reduction(+:tsum) reduction (*:tprod)\n+    for (int ix = 0; ix < N; ix++)\n+      {\n+\ttsum += ary[ix];\n+\ttprod *= ary[ix];\n+      }\n+  }\n+\n+  if (!close_enough (sum, tsum))\n+    return 1;\n+\n+  if (!close_enough (prod, tprod))\n+    return 1;\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  Type ary[N], sum = 0, prod = 1;\n+\n+  for (int ix = 0; ix < N;  ix++)\n+    {\n+      float frac = ix * (1.0f / 1024) + 1.0f;\n+      \n+      ary[ix] = frac;\n+      sum += ary[ix];\n+      prod *= ary[ix];\n+    }\n+\n+  if (vector (ary, sum, prod))\n+    return 1;\n+  \n+  if (worker (ary, sum, prod))\n+    return 1;\n+\n+  if (gang (ary, sum, prod))\n+    return 1;\n+\n+  return 0;\n+}"}, {"sha": "e6947fa5090100a56ac3bfb84ffe0e0c8641bb2e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-flt.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-flt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25681660450f2c33b653339da158c00155430b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-flt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-flt.c?ref=2d25681660450f2c33b653339da158c00155430b", "patch": "@@ -0,0 +1,112 @@\n+\n+/* Single float has 23 bits of fraction. */\n+#define FRAC (1.0f / (1 << 20))\n+typedef float Type;\n+\n+int close_enough (Type a, Type b)\n+{\n+  Type diff = a - b;\n+  if (diff < 0)\n+    diff = -diff;\n+\n+  return diff / a < FRAC;\n+}\n+\n+#define N 100\n+\n+static int __attribute__ ((noinline))\n+vector (Type ary[N], Type sum, Type prod)\n+{\n+  Type tsum = 0, tprod = 1;\n+\n+#pragma acc parallel vector_length(32) copyin(ary[0:N]) copy (tsum, tprod)\n+  {\n+#pragma acc loop vector reduction(+:tsum) reduction (*:tprod)\n+    for (int ix = 0; ix < N; ix++)\n+      {\n+\ttsum += ary[ix];\n+\ttprod *= ary[ix];\n+      }\n+  }\n+\n+  if (!close_enough (sum, tsum))\n+    return 1;\n+\n+  if (!close_enough (prod, tprod))\n+    return 1;\n+\n+  return 0;\n+}\n+\n+static int __attribute__ ((noinline))\n+worker (Type ary[N], Type sum, Type prod)\n+{\n+  Type tsum = 0, tprod = 1;\n+\n+#pragma acc parallel num_workers(32) copyin(ary[0:N]) copy (tsum, tprod)\n+  {\n+#pragma acc loop worker reduction(+:tsum) reduction (*:tprod)\n+    for (int ix = 0; ix < N; ix++)\n+      {\n+\ttsum += ary[ix];\n+\ttprod *= ary[ix];\n+      }\n+  }\n+\n+  if (!close_enough (sum, tsum))\n+    return 1;\n+\n+  if (!close_enough (prod, tprod))\n+    return 1;\n+\n+  return 0;\n+}\n+\n+static int __attribute__ ((noinline))\n+gang (Type ary[N], Type sum, Type prod)\n+{\n+  Type tsum = 0, tprod = 1;\n+\n+#pragma acc parallel num_gangs (32) copyin(ary[0:N]) copy (tsum, tprod)\n+  {\n+#pragma acc loop gang reduction(+:tsum) reduction (*:tprod)\n+    for (int ix = 0; ix < N; ix++)\n+      {\n+\ttsum += ary[ix];\n+\ttprod *= ary[ix];\n+      }\n+  }\n+\n+  if (!close_enough (sum, tsum))\n+    return 1;\n+\n+  if (!close_enough (prod, tprod))\n+    return 1;\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  Type ary[N], sum = 0, prod = 1;\n+\n+  for (int ix = 0; ix < N;  ix++)\n+    {\n+      float frac = ix * (1.0f / 1024) + 1.0f;\n+      \n+      ary[ix] = frac;\n+      sum += ary[ix];\n+      prod *= ary[ix];\n+    }\n+\n+  if (vector (ary, sum, prod))\n+    return 1;\n+  \n+  if (worker (ary, sum, prod))\n+    return 1;\n+\n+  if (gang (ary, sum, prod))\n+    return 1;\n+\n+  return 0;\n+}"}]}