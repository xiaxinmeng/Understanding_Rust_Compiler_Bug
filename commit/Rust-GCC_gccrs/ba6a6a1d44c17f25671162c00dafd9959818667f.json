{"sha": "ba6a6a1d44c17f25671162c00dafd9959818667f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2YTZhMWQ0NGMxN2YyNTY3MTE2MmMwMGRhZmQ5OTU5ODE4NjY3Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-11-24T20:35:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-11-24T20:35:16Z"}, "message": "alias.c (get_alias_set): Before checking TYPE_ALIAS_SET_KNOWN_P double check that type is main variant.\n\n\n\t* alias.c (get_alias_set): Before checking TYPE_ALIAS_SET_KNOWN_P\n\tdouble check that type is main variant.\n\t* tree.c (build_variant_type_copy): Clear TYPE_ALIAS_SET when producing\n\tvariant.\n\t(verify_type_variant): Verify that variants have no\n\tTYPE_ALIAS_SET_KNOWN_P set\n\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Reorder\n\tstreaming so constant fields come first; stream TYPE_ALIAS_SET==0\n\tonly for main variants; stream TYPE_ALIAS_SET as a bit.\n\t* tree-streamer-in.c (unpack_ts_type_common_value_fields): Update\n\taccordingly.\n\nFrom-SVN: r230838", "tree": {"sha": "bfa02931487309252ffddfb0ef2cd4f62997167f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfa02931487309252ffddfb0ef2cd4f62997167f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba6a6a1d44c17f25671162c00dafd9959818667f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6a6a1d44c17f25671162c00dafd9959818667f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6a6a1d44c17f25671162c00dafd9959818667f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6a6a1d44c17f25671162c00dafd9959818667f/comments", "author": null, "committer": null, "parents": [{"sha": "0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "b097f4ea71ecebb975ccff1ea6a884004f1fbfa4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6a6a1d44c17f25671162c00dafd9959818667f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6a6a1d44c17f25671162c00dafd9959818667f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba6a6a1d44c17f25671162c00dafd9959818667f", "patch": "@@ -1,3 +1,17 @@\n+2015-11-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* alias.c (get_alias_set): Before checking TYPE_ALIAS_SET_KNOWN_P\n+\tdouble check that type is main variant.\n+\t* tree.c (build_variant_type_copy): Clear TYPE_ALIAS_SET when producing\n+\tvariant.\n+\t(verify_type_variant): Verify that variants have no\n+\tTYPE_ALIAS_SET_KNOWN_P set\n+\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Reorder\n+\tstreaming so constant fields come first; stream TYPE_ALIAS_SET==0\n+\tonly for main variants; stream TYPE_ALIAS_SET as a bit.\n+\t* tree-streamer-in.c (unpack_ts_type_common_value_fields): Update\n+\taccordingly.\n+\n 2015-11-24  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree.c (make_vector_type): Properly compute canonical type of the"}, {"sha": "fb7919af152e40d71e596e11825eb96f63b7ddbd", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6a6a1d44c17f25671162c00dafd9959818667f/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6a6a1d44c17f25671162c00dafd9959818667f/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=ba6a6a1d44c17f25671162c00dafd9959818667f", "patch": "@@ -888,6 +888,7 @@ get_alias_set (tree t)\n     }\n \n   /* If this is a type with a known alias set, return it.  */\n+  gcc_checking_assert (t == TYPE_MAIN_VARIANT (t));\n   if (TYPE_ALIAS_SET_KNOWN_P (t))\n     return TYPE_ALIAS_SET (t);\n \n@@ -1030,6 +1031,7 @@ get_alias_set (tree t)\n \t     We can not call get_alias_set (p) here as that would trigger\n \t     infinite recursion when p == t.  In other cases it would just\n \t     trigger unnecesary legwork of rebuilding the pointer again.  */\n+\t  gcc_checking_assert (p == TYPE_MAIN_VARIANT (p));\n \t  if (TYPE_ALIAS_SET_KNOWN_P (p))\n \t    set = TYPE_ALIAS_SET (p);\n \t  else"}, {"sha": "7eeab8a2a29ecd4c1647f9b1008185d55f5c3a73", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6a6a1d44c17f25671162c00dafd9959818667f/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6a6a1d44c17f25671162c00dafd9959818667f/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=ba6a6a1d44c17f25671162c00dafd9959818667f", "patch": "@@ -362,24 +362,24 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n   /* TYPE_NO_FORCE_BLK is private to stor-layout and need\n      no streaming.  */\n   TYPE_NEEDS_CONSTRUCTING (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  TYPE_PACKED (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  TYPE_RESTRICT (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  TYPE_USER_ALIGN (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  TYPE_READONLY (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  TYPE_ALIAS_SET (expr) = bp_unpack_value (bp, 1) ? 0 : -1;\n   if (RECORD_OR_UNION_TYPE_P (expr))\n     {\n       TYPE_TRANSPARENT_AGGR (expr) = (unsigned) bp_unpack_value (bp, 1);\n       TYPE_FINAL_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n     }\n   else if (TREE_CODE (expr) == ARRAY_TYPE)\n     TYPE_NONALIASED_COMPONENT (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  TYPE_PACKED (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  TYPE_RESTRICT (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  TYPE_USER_ALIGN (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  TYPE_READONLY (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_PRECISION (expr) = bp_unpack_var_len_unsigned (bp);\n   TYPE_ALIGN (expr) = bp_unpack_var_len_unsigned (bp);\n #ifdef ACCEL_COMPILER\n   if (TYPE_ALIGN (expr) > targetm.absolute_biggest_alignment)\n     TYPE_ALIGN (expr) = targetm.absolute_biggest_alignment;\n #endif\n-  TYPE_ALIAS_SET (expr) = bp_unpack_var_len_int (bp);\n }\n \n "}, {"sha": "ab9b747663573bc5cfa377c2255b401ee9b597d1", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6a6a1d44c17f25671162c00dafd9959818667f/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6a6a1d44c17f25671162c00dafd9959818667f/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=ba6a6a1d44c17f25671162c00dafd9959818667f", "patch": "@@ -313,24 +313,26 @@ pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n   /* TYPE_NO_FORCE_BLK is private to stor-layout and need\n      no streaming.  */\n   bp_pack_value (bp, TYPE_NEEDS_CONSTRUCTING (expr), 1);\n+  bp_pack_value (bp, TYPE_PACKED (expr), 1);\n+  bp_pack_value (bp, TYPE_RESTRICT (expr), 1);\n+  bp_pack_value (bp, TYPE_USER_ALIGN (expr), 1);\n+  bp_pack_value (bp, TYPE_READONLY (expr), 1);\n+  /* Make sure to preserve the fact whether the frontend would assign\n+     alias-set zero to this type.  Do that only for main variants, because\n+     type variants alias sets are never computed.\n+     FIXME:  This does not work for pre-streamed builtin types.  */\n+  bp_pack_value (bp, (TYPE_ALIAS_SET (expr) == 0\n+\t\t      || (!in_lto_p && TYPE_MAIN_VARIANT (expr) == expr\n+\t\t\t  && get_alias_set (expr) == 0)), 1);\n   if (RECORD_OR_UNION_TYPE_P (expr))\n     {\n       bp_pack_value (bp, TYPE_TRANSPARENT_AGGR (expr), 1);\n       bp_pack_value (bp, TYPE_FINAL_P (expr), 1);\n     }\n   else if (TREE_CODE (expr) == ARRAY_TYPE)\n     bp_pack_value (bp, TYPE_NONALIASED_COMPONENT (expr), 1);\n-  bp_pack_value (bp, TYPE_PACKED (expr), 1);\n-  bp_pack_value (bp, TYPE_RESTRICT (expr), 1);\n-  bp_pack_value (bp, TYPE_USER_ALIGN (expr), 1);\n-  bp_pack_value (bp, TYPE_READONLY (expr), 1);\n   bp_pack_var_len_unsigned (bp, TYPE_PRECISION (expr));\n   bp_pack_var_len_unsigned (bp, TYPE_ALIGN (expr));\n-  /* Make sure to preserve the fact whether the frontend would assign\n-     alias-set zero to this type.  */\n-  bp_pack_var_len_int (bp, (TYPE_ALIAS_SET (expr) == 0\n-\t\t\t    || (!in_lto_p\n-\t\t\t\t&& get_alias_set (expr) == 0)) ? 0 : -1);\n }\n \n "}, {"sha": "c8e143a545bfa2350221bb8c8405a78bd44c7fba", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6a6a1d44c17f25671162c00dafd9959818667f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6a6a1d44c17f25671162c00dafd9959818667f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ba6a6a1d44c17f25671162c00dafd9959818667f", "patch": "@@ -6727,6 +6727,8 @@ build_variant_type_copy (tree type)\n   /* Since we're building a variant, assume that it is a non-semantic\n      variant. This also propagates TYPE_STRUCTURAL_EQUALITY_P. */\n   TYPE_CANONICAL (t) = TYPE_CANONICAL (type);\n+  /* Type variants have no alias set defined.  */\n+  TYPE_ALIAS_SET (t) = -1;\n \n   /* Add the new type to the chain of variants of TYPE.  */\n   TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (m);\n@@ -13074,8 +13076,12 @@ verify_type_variant (const_tree t, tree tv)\n   if ((!in_lto_p || !TYPE_FILE_SCOPE_P (t)) && 0)\n     verify_variant_match (TYPE_CONTEXT);\n   verify_variant_match (TYPE_STRING_FLAG);\n-  if (TYPE_ALIAS_SET_KNOWN_P (t) && TYPE_ALIAS_SET_KNOWN_P (tv))\n-    verify_variant_match (TYPE_ALIAS_SET);\n+  if (TYPE_ALIAS_SET_KNOWN_P (t))\n+    {\n+      error (\"type variant with TYPE_ALIAS_SET_KNOWN_P\");\n+      debug_tree (tv);\n+      return false;\n+    }\n \n   /* tree_type_non_common checks.  */\n "}]}