{"sha": "39f88700226c8d1f91f4a4ac9d557e721618e87f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmODg3MDAyMjZjOGQxZjkxZjRhNGFjOWQ1NTdlNzIxNjE4ZTg3Zg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-12-07T09:35:10Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-12-07T09:35:10Z"}, "message": "rs6000: Don't use rs6000_cpu_attr directly\n\nIn some places in the code we currently use rs6000_cpu_attr, although\nthat is a cast from rs6000_tune.  This patch changes things to be more\nregular and clearer.  Now rs6000_cpu_attr is not used any more, and\nit is deleted.\n\n\n\t* config/rs6000/rs6000.h (rs6000_cpu_attr): Delete.\n\t* config/rs6000/rs6000.c (rs6000_variable_issue_1): Use rs6000_tune\n\tinstead of rs6000_cpu_attr.\n\t(rs6000_adjust_cost): Ditto.\n\t(is_microcoded_insn): Ditto.\n\t(rs6000_adjust_priority): Ditto.\n\t(rs6000_issue_rate): Ditto.\n\t(rs6000_use_sched_lookahead): Ditto.\n\t(rs6000_use_sched_lookahead_guard): Ditto.\n\t(rs6000_sched_reorder): Ditto.\n\t(force_new_group): Ditto.\n\t* config/rs6000/rs6000.md (cpu attribute): Ditto.\n\t(group_ending_nop): Ditto.\n\nFrom-SVN: r255463", "tree": {"sha": "22e48190057f68b7f3c22d8df5d41e6dc3d1c4f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22e48190057f68b7f3c22d8df5d41e6dc3d1c4f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f88700226c8d1f91f4a4ac9d557e721618e87f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f88700226c8d1f91f4a4ac9d557e721618e87f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f88700226c8d1f91f4a4ac9d557e721618e87f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f88700226c8d1f91f4a4ac9d557e721618e87f/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "793fa2a437cec661509c8d7b2c7d967b1b225def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793fa2a437cec661509c8d7b2c7d967b1b225def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793fa2a437cec661509c8d7b2c7d967b1b225def"}], "stats": {"total": 139, "additions": 76, "deletions": 63}, "files": [{"sha": "a12df83a5401ec81f268fe5aa95afe6a4f358632", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f88700226c8d1f91f4a4ac9d557e721618e87f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f88700226c8d1f91f4a4ac9d557e721618e87f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39f88700226c8d1f91f4a4ac9d557e721618e87f", "patch": "@@ -1,3 +1,19 @@\n+2017-12-07  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.h (rs6000_cpu_attr): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_variable_issue_1): Use rs6000_tune\n+\tinstead of rs6000_cpu_attr.\n+\t(rs6000_adjust_cost): Ditto.\n+\t(is_microcoded_insn): Ditto.\n+\t(rs6000_adjust_priority): Ditto.\n+\t(rs6000_issue_rate): Ditto.\n+\t(rs6000_use_sched_lookahead): Ditto.\n+\t(rs6000_use_sched_lookahead_guard): Ditto.\n+\t(rs6000_sched_reorder): Ditto.\n+\t(force_new_group): Ditto.\n+\t* config/rs6000/rs6000.md (cpu attribute): Ditto.\n+\t(group_ending_nop): Ditto.\n+\n 2017-12-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.opt (rs6000_tune): New variable."}, {"sha": "f4028f17fe43820b4c3c7c43b9c46ebdc477eba9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f88700226c8d1f91f4a4ac9d557e721618e87f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f88700226c8d1f91f4a4ac9d557e721618e87f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=39f88700226c8d1f91f4a4ac9d557e721618e87f", "patch": "@@ -30546,7 +30546,7 @@ rs6000_variable_issue_1 (rtx_insn *insn, int more)\n       return cached_can_issue_more;\n     }\n \n-  if (rs6000_cpu_attr == CPU_CELL && is_nonpipeline_insn (insn))\n+  if (rs6000_tune == PROCESSOR_CELL && is_nonpipeline_insn (insn))\n     return 0;\n \n   cached_can_issue_more = more - 1;\n@@ -30582,7 +30582,7 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \t   some cycles later.  */\n \n \t/* Separate a load from a narrower, dependent store.  */\n-\tif ((rs6000_sched_groups || rs6000_cpu_attr == CPU_POWER9)\n+\tif ((rs6000_sched_groups || rs6000_tune == PROCESSOR_POWER9)\n \t    && GET_CODE (PATTERN (insn)) == SET\n \t    && GET_CODE (PATTERN (dep_insn)) == SET\n \t    && GET_CODE (XEXP (PATTERN (insn), 1)) == MEM\n@@ -30605,22 +30605,22 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n           case TYPE_BRANCH:\n             /* Leave some extra cycles between a compare and its\n                dependent branch, to inhibit expensive mispredicts.  */\n-            if ((rs6000_cpu_attr == CPU_PPC603\n-                 || rs6000_cpu_attr == CPU_PPC604\n-                 || rs6000_cpu_attr == CPU_PPC604E\n-                 || rs6000_cpu_attr == CPU_PPC620\n-                 || rs6000_cpu_attr == CPU_PPC630\n-                 || rs6000_cpu_attr == CPU_PPC750\n-                 || rs6000_cpu_attr == CPU_PPC7400\n-                 || rs6000_cpu_attr == CPU_PPC7450\n-                 || rs6000_cpu_attr == CPU_PPCE5500\n-                 || rs6000_cpu_attr == CPU_PPCE6500\n-                 || rs6000_cpu_attr == CPU_POWER4\n-                 || rs6000_cpu_attr == CPU_POWER5\n-\t\t || rs6000_cpu_attr == CPU_POWER7\n-\t\t || rs6000_cpu_attr == CPU_POWER8\n-\t\t || rs6000_cpu_attr == CPU_POWER9\n-                 || rs6000_cpu_attr == CPU_CELL)\n+            if ((rs6000_tune == PROCESSOR_PPC603\n+                 || rs6000_tune == PROCESSOR_PPC604\n+                 || rs6000_tune == PROCESSOR_PPC604e\n+                 || rs6000_tune == PROCESSOR_PPC620\n+                 || rs6000_tune == PROCESSOR_PPC630\n+                 || rs6000_tune == PROCESSOR_PPC750\n+                 || rs6000_tune == PROCESSOR_PPC7400\n+                 || rs6000_tune == PROCESSOR_PPC7450\n+                 || rs6000_tune == PROCESSOR_PPCE5500\n+                 || rs6000_tune == PROCESSOR_PPCE6500\n+                 || rs6000_tune == PROCESSOR_POWER4\n+                 || rs6000_tune == PROCESSOR_POWER5\n+\t\t || rs6000_tune == PROCESSOR_POWER7\n+\t\t || rs6000_tune == PROCESSOR_POWER8\n+\t\t || rs6000_tune == PROCESSOR_POWER9\n+                 || rs6000_tune == PROCESSOR_CELL)\n                 && recog_memoized (dep_insn)\n                 && (INSN_CODE (dep_insn) >= 0))\n \n@@ -30878,7 +30878,7 @@ is_microcoded_insn (rtx_insn *insn)\n       || GET_CODE (PATTERN (insn)) == CLOBBER)\n     return false;\n \n-  if (rs6000_cpu_attr == CPU_CELL)\n+  if (rs6000_tune == PROCESSOR_CELL)\n     return get_attr_cell_micro (insn) == CELL_MICRO_ALWAYS;\n \n   if (rs6000_sched_groups\n@@ -31078,8 +31078,8 @@ rs6000_adjust_priority (rtx_insn *insn ATTRIBUTE_UNUSED, int priority)\n   if (GET_CODE (PATTERN (insn)) == USE)\n     return priority;\n \n-  switch (rs6000_cpu_attr) {\n-  case CPU_PPC750:\n+  switch (rs6000_tune) {\n+  case PROCESSOR_PPC750:\n     switch (get_attr_type (insn))\n       {\n       default:\n@@ -31165,40 +31165,40 @@ rs6000_issue_rate (void)\n   if (!reload_completed && !flag_sched_pressure)\n     return 1;\n \n-  switch (rs6000_cpu_attr) {\n-  case CPU_RS64A:\n-  case CPU_PPC601: /* ? */\n-  case CPU_PPC7450:\n+  switch (rs6000_tune) {\n+  case PROCESSOR_RS64A:\n+  case PROCESSOR_PPC601: /* ? */\n+  case PROCESSOR_PPC7450:\n     return 3;\n-  case CPU_PPC440:\n-  case CPU_PPC603:\n-  case CPU_PPC750:\n-  case CPU_PPC7400:\n-  case CPU_PPC8540:\n-  case CPU_PPC8548:\n-  case CPU_CELL:\n-  case CPU_PPCE300C2:\n-  case CPU_PPCE300C3:\n-  case CPU_PPCE500MC:\n-  case CPU_PPCE500MC64:\n-  case CPU_PPCE5500:\n-  case CPU_PPCE6500:\n-  case CPU_TITAN:\n+  case PROCESSOR_PPC440:\n+  case PROCESSOR_PPC603:\n+  case PROCESSOR_PPC750:\n+  case PROCESSOR_PPC7400:\n+  case PROCESSOR_PPC8540:\n+  case PROCESSOR_PPC8548:\n+  case PROCESSOR_CELL:\n+  case PROCESSOR_PPCE300C2:\n+  case PROCESSOR_PPCE300C3:\n+  case PROCESSOR_PPCE500MC:\n+  case PROCESSOR_PPCE500MC64:\n+  case PROCESSOR_PPCE5500:\n+  case PROCESSOR_PPCE6500:\n+  case PROCESSOR_TITAN:\n     return 2;\n-  case CPU_PPC476:\n-  case CPU_PPC604:\n-  case CPU_PPC604E:\n-  case CPU_PPC620:\n-  case CPU_PPC630:\n+  case PROCESSOR_PPC476:\n+  case PROCESSOR_PPC604:\n+  case PROCESSOR_PPC604e:\n+  case PROCESSOR_PPC620:\n+  case PROCESSOR_PPC630:\n     return 4;\n-  case CPU_POWER4:\n-  case CPU_POWER5:\n-  case CPU_POWER6:\n-  case CPU_POWER7:\n+  case PROCESSOR_POWER4:\n+  case PROCESSOR_POWER5:\n+  case PROCESSOR_POWER6:\n+  case PROCESSOR_POWER7:\n     return 5;\n-  case CPU_POWER8:\n+  case PROCESSOR_POWER8:\n     return 7;\n-  case CPU_POWER9:\n+  case PROCESSOR_POWER9:\n     return 6;\n   default:\n     return 1;\n@@ -31211,13 +31211,13 @@ rs6000_issue_rate (void)\n static int\n rs6000_use_sched_lookahead (void)\n {\n-  switch (rs6000_cpu_attr)\n+  switch (rs6000_tune)\n     {\n-    case CPU_PPC8540:\n-    case CPU_PPC8548:\n+    case PROCESSOR_PPC8540:\n+    case PROCESSOR_PPC8548:\n       return 4;\n \n-    case CPU_CELL:\n+    case PROCESSOR_CELL:\n       return (reload_completed ? 8 : 0);\n \n     default:\n@@ -31233,7 +31233,7 @@ rs6000_use_sched_lookahead_guard (rtx_insn *insn, int ready_index)\n   if (ready_index == 0)\n     return 0;\n \n-  if (rs6000_cpu_attr != CPU_CELL)\n+  if (rs6000_tune != PROCESSOR_CELL)\n     return 0;\n \n   gcc_assert (insn != NULL_RTX && INSN_P (insn));\n@@ -31624,7 +31624,7 @@ rs6000_sched_reorder (FILE *dump ATTRIBUTE_UNUSED, int sched_verbose,\n \n   /* Reorder the ready list, if the second to last ready insn\n      is a nonepipeline insn.  */\n-  if (rs6000_cpu_attr == CPU_CELL && n_ready > 1)\n+  if (rs6000_tune == PROCESSOR_CELL && n_ready > 1)\n   {\n     if (is_nonpipeline_insn (ready[n_ready - 1])\n         && (recog_memoized (ready[n_ready - 2]) > 0))\n@@ -32261,8 +32261,8 @@ force_new_group (int sched_verbose, FILE *dump, rtx *group_insns,\n \tcan_issue_more--;\n \n       /* Do we have a special group ending nop? */\n-      if (rs6000_cpu_attr == CPU_POWER6 || rs6000_cpu_attr == CPU_POWER7\n-\t  || rs6000_cpu_attr == CPU_POWER8)\n+      if (rs6000_tune == PROCESSOR_POWER6 || rs6000_tune == PROCESSOR_POWER7\n+\t  || rs6000_tune == PROCESSOR_POWER8)\n \t{\n \t  nop = gen_group_ending_nop ();\n \t  emit_insn_before (nop, next_insn);"}, {"sha": "fa4e42b0793450d51acf132554235d69359d096c", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f88700226c8d1f91f4a4ac9d557e721618e87f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f88700226c8d1f91f4a4ac9d557e721618e87f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=39f88700226c8d1f91f4a4ac9d557e721618e87f", "patch": "@@ -391,9 +391,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define TARGET_SIMPLE_FPU   0\n #define TARGET_XILINX_FPU   0\n \n-/* Recast the processor type to the cpu attribute.  */\n-#define rs6000_cpu_attr ((enum attr_cpu)rs6000_tune)\n-\n /* Define generic processor types based upon current deployment.  */\n #define PROCESSOR_COMMON    PROCESSOR_PPC601\n #define PROCESSOR_POWERPC   PROCESSOR_PPC604"}, {"sha": "6e27f1f60760b54408d6441eaff615bb3bdecc98", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f88700226c8d1f91f4a4ac9d557e721618e87f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f88700226c8d1f91f4a4ac9d557e721618e87f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=39f88700226c8d1f91f4a4ac9d557e721618e87f", "patch": "@@ -267,7 +267,7 @@\n    ppc8540,ppc8548,ppce300c2,ppce300c3,ppce500mc,ppce500mc64,ppce5500,ppce6500,\n    power4,power5,power6,power7,power8,power9,\n    rs64a,mpccore,cell,ppca2,titan\"\n-  (const (symbol_ref \"rs6000_cpu_attr\")))\n+  (const (symbol_ref \"(enum attr_cpu) rs6000_tune\")))\n \n \n ;; If this instruction is microcoded on the CELL processor\n@@ -12986,7 +12986,7 @@\n   [(unspec [(const_int 0)] UNSPEC_GRP_END_NOP)]\n   \"\"\n {\n-  if (rs6000_cpu_attr == CPU_POWER6)\n+  if (rs6000_tune == PROCESSOR_POWER6)\n     return \"ori 1,1,0\";\n   return \"ori 2,2,0\";\n })"}]}