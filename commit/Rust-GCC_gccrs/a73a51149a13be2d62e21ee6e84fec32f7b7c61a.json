{"sha": "a73a51149a13be2d62e21ee6e84fec32f7b7c61a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczYTUxMTQ5YTEzYmUyZDYyZTIxZWU2ZTg0ZmVjMzJmN2I3YzYxYQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-09-05T18:59:21Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-09-05T18:59:21Z"}, "message": "(LEGITIMIZE_ADDRESS): Define nonempty.\n\nFrom-SVN: r12691", "tree": {"sha": "183dfb179026daa975d8c2ad150561e20b5b6324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/183dfb179026daa975d8c2ad150561e20b5b6324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a73a51149a13be2d62e21ee6e84fec32f7b7c61a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73a51149a13be2d62e21ee6e84fec32f7b7c61a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73a51149a13be2d62e21ee6e84fec32f7b7c61a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73a51149a13be2d62e21ee6e84fec32f7b7c61a/comments", "author": null, "committer": null, "parents": [{"sha": "7a8940aaa951bd56c0bbd490ba4d152b34de6e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8940aaa951bd56c0bbd490ba4d152b34de6e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8940aaa951bd56c0bbd490ba4d152b34de6e65"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "8d2245453a1ae23ae68b7ae8ffa13a355994f3b4", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73a51149a13be2d62e21ee6e84fec32f7b7c61a/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73a51149a13be2d62e21ee6e84fec32f7b7c61a/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=a73a51149a13be2d62e21ee6e84fec32f7b7c61a", "patch": "@@ -1059,9 +1059,52 @@ extern struct rtx_def *sh_builtin_saveregs ();\n    GO_IF_LEGITIMATE_ADDRESS.\n \n    It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output.  */\n+   opportunities to optimize the output.\n \n-#define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN) ;\n+   For the SH, if X is almost suitable for indexing, but the offset is\n+   out of range, convert it into a normal form so that cse has a chance\n+   of reducing the number of address registers used.  */\n+\n+#define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (GET_CODE (x) == PLUS\t\t\t\t\t\\\n+      && (GET_MODE_SIZE (MODE) == 4\t\t\t\t\\\n+\t  || GET_MODE_SIZE (MODE) == 8)\t\t\t\t\\\n+      && GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\\\n+      && BASE_REGISTER_RTX_P (XEXP (X, 0))\t\t\t\\\n+      && ! (TARGET_SH3E && MODE == SFmode))\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      rtx index_rtx = XEXP (X, 1);\t\t\t\t\\\n+      HOST_WIDE_INT offset = INTVAL (index_rtx), offset_base;\t\\\n+      rtx sum;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      GO_IF_LEGITIMATE_INDEX (MODE, index_rtx, WIN);\t\t\\\n+      /* On rare occaisons, we might get an unaligned pointer\t\\\n+\t that is indexed in a way to give an aligned address.\t\\\n+\t Therefore, keep the lower two bits in offset_base.  */ \\\n+      /* Instead of offset_base 128..131 use 124..127, so that\t\\\n+\t simple add suffices.  */\t\t\t\t\\\n+      if (offset > 127)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  offset_base = ((offset + 4) & ~60) - 4;\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\toffset_base = offset & ~60;\t\t\t\t\\\n+      /* Sometimes the normal form does not suit DImode.  We\t\\\n+\t could avoid that by using smaller ranges, but that\t\\\n+\t would give less optimized code when SImode is\n+\t prevalent.  */\t\t\t\t\t\t\\\n+      if (GET_MODE_SIZE (MODE) + offset - offset_base <= 64)\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  sum = expand_binop (Pmode, add_optab, XEXP (x, 0),\t\\\n+\t\t\t      GEN_INT (offset_base), NULL_RTX, 0, \\\n+\t\t\t      OPTAB_LIB_WIDEN);\t\t\t\\\n+                                                                \\\n+\t  (X) = gen_rtx (PLUS, Pmode, sum, GEN_INT (offset - offset_base)); \\\n+\t  goto WIN;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n \n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.  */"}]}