{"sha": "eb8c2b30b947dd8a2012ee658117bea05e46bc85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI4YzJiMzBiOTQ3ZGQ4YTIwMTJlZTY1ODExN2JlYTA1ZTQ2YmM4NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-03T16:58:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-03T17:01:43Z"}, "message": "c++:  templatey type creation\n\nThis patch makes a couple of type-creation routines available to\nmodules.  That needs to create unbound template parms, and canonical\ntemplate parms.\n\n\tgcc/cp/\n\t* cp-tree.h (make_unbound_class_template_raw): Declare.\n\t(canonical_type_parameter): Declare.\n\t* decl.c (make_unbound_class_template_raw): Break out of ...\n\t(make_unboud_class_template): ... here.  Call it.\n\t* pt.c (canonical_type_parameter): Externalize.  Refactor & set\n\tstructural_equality for type parms.", "tree": {"sha": "a5a9723ff925a0da5742df39794d98de9c89f098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5a9723ff925a0da5742df39794d98de9c89f098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb8c2b30b947dd8a2012ee658117bea05e46bc85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8c2b30b947dd8a2012ee658117bea05e46bc85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb8c2b30b947dd8a2012ee658117bea05e46bc85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8c2b30b947dd8a2012ee658117bea05e46bc85/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756f55e62f73eb32787497eb9e564d4b21a6e637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/756f55e62f73eb32787497eb9e564d4b21a6e637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/756f55e62f73eb32787497eb9e564d4b21a6e637"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "69f8ed56e629eaaff8a1b48b81b8949fe5177b23", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8c2b30b947dd8a2012ee658117bea05e46bc85/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8c2b30b947dd8a2012ee658117bea05e46bc85/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=eb8c2b30b947dd8a2012ee658117bea05e46bc85", "patch": "@@ -6542,6 +6542,7 @@ extern bool check_omp_return\t\t\t(void);\n extern tree make_typename_type\t\t\t(tree, tree, enum tag_types, tsubst_flags_t);\n extern tree build_typename_type\t\t\t(tree, tree, tree, tag_types);\n extern tree make_unbound_class_template\t\t(tree, tree, tree, tsubst_flags_t);\n+extern tree make_unbound_class_template_raw\t(tree, tree, tree);\n extern tree build_library_fn_ptr\t\t(const char *, tree, int);\n extern tree build_cp_library_fn_ptr\t\t(const char *, tree, int);\n extern tree push_library_fn\t\t\t(tree, tree, tree, int);\n@@ -6880,6 +6881,7 @@ extern void maybe_show_extern_c_location (void);\n extern bool literal_integer_zerop (const_tree);\n \n /* in pt.c */\n+extern tree canonical_type_parameter\t\t(tree);\n extern void push_access_scope\t\t\t(tree);\n extern void pop_access_scope\t\t\t(tree);\n extern bool check_template_shadow\t\t(tree);"}, {"sha": "a28e7924869e59e9ccec348f95debf3e59e12ca4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8c2b30b947dd8a2012ee658117bea05e46bc85/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8c2b30b947dd8a2012ee658117bea05e46bc85/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=eb8c2b30b947dd8a2012ee658117bea05e46bc85", "patch": "@@ -4132,6 +4132,14 @@ make_unbound_class_template (tree context, tree name, tree parm_list,\n       return tmpl;\n     }\n \n+  return make_unbound_class_template_raw (context, name, parm_list);\n+}\n+\n+/* Build an UNBOUND_CLASS_TEMPLATE.  */\n+\n+tree\n+make_unbound_class_template_raw (tree context, tree name, tree parm_list)\n+{\n   /* Build the UNBOUND_CLASS_TEMPLATE.  */\n   tree t = cxx_make_type (UNBOUND_CLASS_TEMPLATE);\n   TYPE_CONTEXT (t) = FROB_CONTEXT (context);"}, {"sha": "3ca28133d942b802b51b3dae74f2847d23084e0f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8c2b30b947dd8a2012ee658117bea05e46bc85/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8c2b30b947dd8a2012ee658117bea05e46bc85/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=eb8c2b30b947dd8a2012ee658117bea05e46bc85", "patch": "@@ -4432,7 +4432,7 @@ build_template_parm_index (int index,\n    parameter.  Returns the canonical type parameter, which may be TYPE\n    if no such parameter existed.  */\n \n-static tree\n+tree\n canonical_type_parameter (tree type)\n {\n   int idx = TEMPLATE_TYPE_IDX (type);\n@@ -13212,19 +13212,24 @@ tsubst_argument_pack (tree orig_arg, tree args, tsubst_flags_t complain,\n \t\t      tree in_decl)\n {\n   /* Substitute into each of the arguments.  */\n-  tree new_arg = TYPE_P (orig_arg)\n-    ? cxx_make_type (TREE_CODE (orig_arg))\n-    : make_node (TREE_CODE (orig_arg));\n-\n   tree pack_args = tsubst_template_args (ARGUMENT_PACK_ARGS (orig_arg),\n \t\t\t\t\t args, complain, in_decl);\n-  if (pack_args == error_mark_node)\n-    new_arg = error_mark_node;\n-  else\n-    SET_ARGUMENT_PACK_ARGS (new_arg, pack_args);\n+  tree new_arg = error_mark_node;\n+  if (pack_args != error_mark_node)\n+    {\n+      if (TYPE_P (orig_arg))\n+\t{\n+\t  new_arg = cxx_make_type (TREE_CODE (orig_arg));\n+\t  SET_TYPE_STRUCTURAL_EQUALITY (new_arg);\n+\t}\n+      else\n+\t{\n+\t  new_arg = make_node (TREE_CODE (orig_arg));\n+\t  TREE_CONSTANT (new_arg) = TREE_CONSTANT (orig_arg);\n+\t}\n \n-  if (TREE_CODE (new_arg) == NONTYPE_ARGUMENT_PACK)\n-    TREE_CONSTANT (new_arg) = TREE_CONSTANT (orig_arg);\n+      SET_ARGUMENT_PACK_ARGS (new_arg, pack_args);\n+    }\n \n   return new_arg;\n }"}]}