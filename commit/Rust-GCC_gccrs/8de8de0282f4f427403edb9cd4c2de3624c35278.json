{"sha": "8de8de0282f4f427403edb9cd4c2de3624c35278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRlOGRlMDI4MmY0ZjQyNzQwM2VkYjljZDRjMmRlMzYyNGMzNTI3OA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-06-24T13:01:11Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-06-24T13:01:11Z"}, "message": "gengtype.c (srcdir_len): size_t instead of int.\n\n2008-06-24  Olivier Hainque  <hainque@adacore.com>\n            Nicolas Roche  <roche@adacore.com>\n\n\t* gengtype.c (srcdir_len): size_t instead of int.\n\t(get_file_realbasename): New function.  For F a filename, the real\n\tbasename of F, with all the path components stripped.\n\t(get_file_srcdir_relative_path): New function.  For F a filename, the\n\trelative path to F from $(srcdir).\n\t(get_file_basename): Rewrite using get_file_srcdir_relative_path and\n\tget_file_realbasename.  Adjust the head comment.\n\t(get_prefix_langdir_index): New function. For F a filename, return the\n\tlang_dir_names[] relative index of the language directory that is\n\ta prefix in F.\n\t(get_file_langdir): For F a filename, return the name of the language\n\tdirectory where F is located.\n\t(get_file_gtfilename): New function. The gt- output file name for an\n\tinput filename F.\n\t(get_output_file_with_visibility): Replace in-line computations with\n\tuses of get_file_gtfilename and get_prefix_langdir_index.\n\t* Makefile.in (GTFILES_H): Adjust to match what gengtype generates.\n\n\nCo-Authored-By: Nicolas Roche <roche@adacore.com>\n\nFrom-SVN: r137070", "tree": {"sha": "a512a887a8ef02f4ee59af14d3c87ba1222b3a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a512a887a8ef02f4ee59af14d3c87ba1222b3a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8de8de0282f4f427403edb9cd4c2de3624c35278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de8de0282f4f427403edb9cd4c2de3624c35278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de8de0282f4f427403edb9cd4c2de3624c35278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de8de0282f4f427403edb9cd4c2de3624c35278/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f02a84d9bea57d5ea8bc688a52c4ad568811d0e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f02a84d9bea57d5ea8bc688a52c4ad568811d0e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f02a84d9bea57d5ea8bc688a52c4ad568811d0e3"}], "stats": {"total": 179, "additions": 140, "deletions": 39}, "files": [{"sha": "1ee4650db49ec689f4dc22711795f3bf17dc4d09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de8de0282f4f427403edb9cd4c2de3624c35278/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de8de0282f4f427403edb9cd4c2de3624c35278/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8de8de0282f4f427403edb9cd4c2de3624c35278", "patch": "@@ -1,3 +1,24 @@\n+2008-06-24  Olivier Hainque  <hainque@adacore.com>\n+            Nicolas Roche  <roche@adacore.com>\n+\n+\t* gengtype.c (srcdir_len): size_t instead of int.\n+\t(get_file_realbasename): New function.  For F a filename, the real\n+\tbasename of F, with all the path components stripped.\n+\t(get_file_srcdir_relative_path): New function.  For F a filename, the\n+\trelative path to F from $(srcdir).\n+\t(get_file_basename): Rewrite using get_file_srcdir_relative_path and\n+\tget_file_realbasename.  Adjust the head comment.\n+\t(get_prefix_langdir_index): New function. For F a filename, return the\n+\tlang_dir_names[] relative index of the language directory that is\n+\ta prefix in F.\n+\t(get_file_langdir): For F a filename, return the name of the language\n+\tdirectory where F is located.\n+\t(get_file_gtfilename): New function. The gt- output file name for an\n+\tinput filename F.\n+\t(get_output_file_with_visibility): Replace in-line computations with\n+\tuses of get_file_gtfilename and get_prefix_langdir_index.\n+\t* Makefile.in (GTFILES_H): Adjust to match what gengtype generates.\n+\n 2008-06-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/36504"}, {"sha": "d4a88ee698af077aa9020f370ed59d11c4823293", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de8de0282f4f427403edb9cd4c2de3624c35278/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de8de0282f4f427403edb9cd4c2de3624c35278/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8de8de0282f4f427403edb9cd4c2de3624c35278", "patch": "@@ -3171,8 +3171,17 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/targhooks.c $(out_file) $(srcdir)/passes.c $(srcdir)/cgraphunit.c \\\n   @all_gtfiles@\n \n-GTFILES_H = $(subst /,-, $(patsubst $(srcdir)/%,gt-%, $(patsubst %.c,%.h, \\\n-\t\t  $(filter %.c, $(GTFILES)))))\n+# Compute the list of GT header files from the corresponding C sources,\n+# possibly nested within config or language subdirectories.  Match gengtype's\n+# behavior in this respect: gt-LANG-file.h for \"file\" anywhere within a LANG\n+# language subdir, gt-file.h otherwise (no subdir indication for config/\n+# related sources).\n+\n+GTFILES_H = $(subst /,-, \\\n+\t    $(shell echo $(patsubst $(srcdir)/%,gt-%, \\\n+\t\t\t   $(patsubst %.c,%.h, \\\n+\t\t\t     $(filter %.c, $(GTFILES)))) \\\n+\t\t\t| sed -e \"s;/[^ ]*/;/;g\" -e \"s;gt-config/;gt-;g\"))\n \n GTFILES_LANG_H = $(patsubst [%], gtype-%.h, $(filter [%], $(GTFILES)))\n ALL_GTFILES_H := $(sort $(GTFILES_H) $(GTFILES_LANG_H))"}, {"sha": "dc428a8b608e2a44893dec5b4aa4a0cd9df276e1", "filename": "gcc/gengtype.c", "status": "modified", "additions": 108, "deletions": 37, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de8de0282f4f427403edb9cd4c2de3624c35278/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de8de0282f4f427403edb9cd4c2de3624c35278/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=8de8de0282f4f427403edb9cd4c2de3624c35278", "patch": "@@ -148,10 +148,16 @@ static outf_p header_file;\n static const char *srcdir;\n \n /* Length of srcdir name.  */\n-static int srcdir_len = 0;\n+static size_t srcdir_len = 0;\n \n static outf_p create_file (const char *, const char *);\n+\n static const char * get_file_basename (const char *);\n+static const char * get_file_realbasename (const char *);\n+static const char * get_file_srcdir_relative_path (const char *);\n+\n+static int get_prefix_langdir_index (const char *);\n+static const char * get_file_langdir (const char *);\n \n \f\n /* Nonzero iff an error has occurred.  */\n@@ -1545,41 +1551,114 @@ open_base_files (void)\n   }\n }\n \n-/* Determine the pathname to F relative to $(srcdir).  */\n+/* For F a filename, return the real basename of F, with all the directory\n+   components skipped.  */\n+\n+static const char *\n+get_file_realbasename (const char *f)\n+{\n+  const char * lastslash = strrchr (f, '/');\n+  \n+  return (lastslash != NULL) ? lastslash + 1 : f;\n+}\n+\n+/* For F a filename, return the relative path to F from $(srcdir) if the\n+   latter is a prefix in F, NULL otherwise.  */\n+\n+static const char *\n+get_file_srcdir_relative_path (const char *f)\n+{\n+  if (strlen (f) > srcdir_len\n+      && IS_DIR_SEPARATOR (f[srcdir_len])\n+      && memcmp (f, srcdir, srcdir_len) == 0)\n+    return f + srcdir_len + 1;\n+  else\n+    return NULL;\n+}\n+\n+/* For F a filename, return the relative path to F from $(srcdir) if the\n+   latter is a prefix in F, or the real basename of F otherwise.  */\n \n static const char *\n get_file_basename (const char *f)\n {\n-  const char *basename;\n-  unsigned i;\n+  const char * srcdir_path = get_file_srcdir_relative_path (f);\n \n-  basename = strrchr (f, '/');\n+  return (srcdir_path != NULL) ? srcdir_path : get_file_realbasename (f);\n+}\n \n-  if (!basename)\n-    return f;\n+/* For F a filename, return the lang_dir_names relative index of the language\n+   directory that is a prefix in F, if any, -1 otherwise.  */\n \n-  basename++;\n+static int\n+get_prefix_langdir_index (const char *f)\n+{\n+  size_t f_len = strlen (f);\n+  size_t lang_index;\n \n-  for (i = 0; i < num_lang_dirs; i++)\n+  for (lang_index = 0; lang_index < num_lang_dirs; lang_index++)\n     {\n-      const char * s1;\n-      const char * s2;\n-      int l1;\n-      int l2;\n-      s1 = basename - strlen (lang_dir_names [i]) - 1;\n-      s2 = lang_dir_names [i];\n-      l1 = strlen (s1);\n-      l2 = strlen (s2);\n-      if (l1 >= l2 && IS_DIR_SEPARATOR (s1[-1]) && !memcmp (s1, s2, l2))\n-        {\n-          basename -= l2 + 1;\n-          if ((basename - f - 1) != srcdir_len)\n-\t    fatal (\"filename `%s' should be preceded by $srcdir\", f);\n-          break;\n-        }\n+      const char * langdir = lang_dir_names [lang_index];\n+      size_t langdir_len = strlen (langdir);\n+\t  \n+      if (f_len > langdir_len\n+\t  && IS_DIR_SEPARATOR (f[langdir_len])\n+\t  && memcmp (f, langdir, langdir_len) == 0)\n+\treturn lang_index;\n     }\n \n-  return basename;\n+  return -1;\n+}\n+\n+/* For F a filename, return the name of language directory where F is located,\n+   if any, NULL otherwise.  */\n+\n+static const char *\n+get_file_langdir (const char *f)\n+{\n+  /* Get the relative path to F from $(srcdir) and find the language by\n+     comparing the prefix with language directory names.  If F is not even\n+     srcdir relative, no point in looking further.  */\n+\n+  int lang_index;\n+  const char * srcdir_relative_path = get_file_srcdir_relative_path (f);\n+\n+  if (!srcdir_relative_path)\n+    return NULL;\n+\n+  lang_index = get_prefix_langdir_index (srcdir_relative_path);\n+\n+  return (lang_index >= 0) ? lang_dir_names [lang_index] : NULL;\n+}\n+\n+/* The gt- output file name for F.  */\n+\n+static const char *\n+get_file_gtfilename (const char *f)\n+{\n+  /* Cook up an initial version of the gt- file name from the file real\n+     basename and the language name, if any.  */\n+\n+  const char *basename = get_file_realbasename (f);\n+  const char *langdir = get_file_langdir (f);\n+  \n+  char * result =\n+    (langdir ? xasprintf (\"gt-%s-%s\", langdir, basename)\n+     : xasprintf (\"gt-%s\", basename));\n+\n+  /* Then replace all non alphanumerics characters by '-' and change the\n+     extenstion to \".h\".  We expect the input filename extension was at least\n+     one character long.  */\n+\n+  char *s = result;\n+\n+  for (; *s != '.'; s++)\n+    if (! ISALNUM (*s) && *s != '-')\n+      *s = '-';\n+\n+  memcpy (s, \".h\", sizeof (\".h\"));\n+\n+  return result;\n }\n \n /* An output file, suitable for definitions, that can see declarations\n@@ -1609,13 +1688,7 @@ get_output_file_with_visibility (const char *input_file)\n       || (len > 2 && memcmp (basename+len-2, \".y\", 2) == 0)\n       || (len > 3 && memcmp (basename+len-3, \".in\", 3) == 0))\n     {\n-      char *s;\n-\n-      output_name = s = xasprintf (\"gt-%s\", basename);\n-      for (; *s != '.'; s++)\n-\tif (! ISALNUM (*s) && *s != '-')\n-\t  *s = '-';\n-      memcpy (s, \".h\", sizeof (\".h\"));\n+      output_name = get_file_gtfilename (input_file); \n       for_name = basename;\n     }\n   /* Some headers get used by more than one front-end; hence, it\n@@ -1641,12 +1714,10 @@ get_output_file_with_visibility (const char *input_file)\n     output_name = \"gt-objc-objc-act.h\", for_name = \"objc/objc-act.c\";\n   else \n     {\n-      size_t i;\n+      int lang_index = get_prefix_langdir_index (basename);\n \n-      for (i = 0; i < num_lang_dirs; i++)\n-\tif (memcmp (basename, lang_dir_names[i], strlen (lang_dir_names[i])) == 0\n-\t    && basename[strlen(lang_dir_names[i])] == '/')\n-\t  return base_files[i];\n+      if (lang_index >= 0)\n+\treturn base_files[lang_index];\n \n       output_name = \"gtype-desc.c\";\n       for_name = NULL;"}]}