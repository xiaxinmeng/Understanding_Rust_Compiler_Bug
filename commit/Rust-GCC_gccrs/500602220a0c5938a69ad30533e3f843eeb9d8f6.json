{"sha": "500602220a0c5938a69ad30533e3f843eeb9d8f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwNjAyMjIwYTBjNTkzOGE2OWFkMzA1MzNlM2Y4NDNlZWI5ZDhmNg==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2012-10-12T15:15:21Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2012-10-12T15:15:21Z"}, "message": "dd the Hoyt and the arcsine distributions as extensions.\n\nFrom-SVN: r192403", "tree": {"sha": "dbf69a8262b705b96f4d0509d802d6137af11406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbf69a8262b705b96f4d0509d802d6137af11406"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/500602220a0c5938a69ad30533e3f843eeb9d8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500602220a0c5938a69ad30533e3f843eeb9d8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500602220a0c5938a69ad30533e3f843eeb9d8f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500602220a0c5938a69ad30533e3f843eeb9d8f6/comments", "author": null, "committer": null, "parents": [{"sha": "e74a506f4eec90fc1d4839f8cde506be8f99c9de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74a506f4eec90fc1d4839f8cde506be8f99c9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e74a506f4eec90fc1d4839f8cde506be8f99c9de"}], "stats": {"total": 1195, "additions": 1195, "deletions": 0}, "files": [{"sha": "adf8a241187cac7a7f42e67d72a2dc50098bb059", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 467, "deletions": 0, "changes": 467, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -1856,6 +1856,473 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const k_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n \n+\n+  /**\n+   * @brief An arcsine continuous distribution for random numbers.\n+   *\n+   * The formula for the arcsine probability density function is\n+   * @f[\n+   *     p(x|a,b) = \\frac{1}{\\pi \\sqrt{(x - a)(b - x)}}\n+   * @f]\n+   * where @f$x >= a@f$ and @f$x <= b@f$.\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$ (a + b) / 2 @f$</td></tr>\n+   * <tr><td>Variance</td><td>@f$ (b - a)^2 / 8 @f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[a, b]@f$</td></tr>\n+   * </table>\n+   */\n+  template<typename _RealType = double>\n+    class\n+    arcsine_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _RealType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\ttypedef arcsine_distribution<result_type> distribution_type;\n+\n+\tparam_type(result_type __a = result_type(0),\n+\t\t   result_type __b = result_type(1))\n+\t: _M_a(__a), _M_b(__b)\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);\n+\t}\n+\n+\tresult_type\n+\ta() const\n+\t{ return _M_a; }\n+\n+\tresult_type\n+\tb() const\n+\t{ return _M_b; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n+\n+      private:\n+\tvoid _M_initialize();\n+\n+\tresult_type _M_a;\n+\tresult_type _M_b;\n+      };\n+\n+      /**\n+       * @brief Constructors.\n+       */\n+      explicit\n+      arcsine_distribution(result_type __a = result_type(0),\n+\t\t\t   result_type __b = result_type(1))\n+      : _M_param(__a, __b),\n+\t_M_ud(-1.5707963267948966192313216916397514L,\n+ \t      +1.5707963267948966192313216916397514L)\n+      { }\n+\n+      explicit\n+      arcsine_distribution(const param_type& __p)\n+      : _M_param(__p),\n+\t_M_ud(-1.5707963267948966192313216916397514L,\n+ \t      +1.5707963267948966192313216916397514L)\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      { _M_ud.reset(); }\n+\n+      /**\n+       * @brief Return the parameters of the distribution.\n+       */\n+      result_type\n+      a() const\n+      { return _M_param.a(); }\n+\n+      result_type\n+      b() const\n+      { return _M_param.b(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      { return this->a(); }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { return this->b(); }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{\n+\t  result_type __x = std::sin(this->_M_ud(__urng));\n+\t  return (__x * (this->b() - this->a())\n+\t\t  + this->a() + this->b()) / result_type(2);\n+\t}\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+        {\n+\t  result_type __x = std::sin(this->_M_ud(__urng));\n+\t  return (__x * (__p.b() - __p.a())\n+\t\t  + __p.a() + __p.b()) / result_type(2);\n+\t}\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two arcsine distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      friend bool\n+      operator==(const arcsine_distribution& __d1,\n+\t\t const arcsine_distribution& __d2)\n+      { return (__d1.param() == __d2.param()\n+\t\t&& __d1._M_ud == __d2._M_ud); }\n+\n+      /**\n+       * @brief Inserts a %arcsine_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %arcsine_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const arcsine_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %arcsine_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %arcsine_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   arcsine_distribution<_RealType1>&);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+\n+      std::uniform_real_distribution<result_type> _M_ud;\n+    };\n+\n+  /**\n+   * @brief Return true if two arcsine distributions are not equal.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const arcsine_distribution<_RealType>& __d1,\n+\t       const arcsine_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n+\n+  /**\n+   * @brief A Hoyt continuous distribution for random numbers.\n+   *\n+   * The formula for the Hoyt probability density function is\n+   * @f[\n+   *     p(x|q,\\omega) = \\frac{(1 + q^2)x}{q\\omega}\n+   *                     \\exp\\left(-\\frac{(1 + q^2)^2 x^2}{4 q^2 \\omega}\\right)\n+   *                       I_0\\left(\\frac{(1 - q^4) x^2}{4 q^2 \\omega}\\right)\n+   * @f]\n+   * where @f$I_0(z)@f$ is the modified Bessel function of the first kind\n+   * of order 0 and @f$0 < q < 1@f$.\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$ \\sqrt{\\frac{2}{\\pi}} \\sqrt{\\frac{\\omega}{1 + q^2}}\n+   *                       E(1 - q^2) @f$</td></tr>\n+   * <tr><td>Variance</td><td>@f$ \\omega \\left(1 - \\frac{2E^2(1 - q^2)}\n+   *                                      {\\pi (1 + q^2)}\\right) @f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[0, \\infty)@f$</td></tr>\n+   * </table>\n+   * where @f$E(x)@f$ is the elliptic function of the second kind.\n+   */\n+  template<typename _RealType = double>\n+    class\n+    hoyt_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _RealType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\ttypedef hoyt_distribution<result_type> distribution_type;\n+\n+\tparam_type(result_type __q = result_type(0.5L),\n+\t\t   result_type __omega = result_type(1))\n+\t: _M_q(__q), _M_omega(__omega)\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_q > result_type(0));\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_q < result_type(1));\n+\t}\n+\n+\tresult_type\n+\tq() const\n+\t{ return _M_q; }\n+\n+\tresult_type\n+\tomega() const\n+\t{ return _M_omega; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_q == __p2._M_q\n+              && __p1._M_omega == __p2._M_omega; }\n+\n+      private:\n+\tvoid _M_initialize();\n+\n+\tresult_type _M_q;\n+\tresult_type _M_omega;\n+      };\n+\n+      /**\n+       * @brief Constructors.\n+       */\n+      explicit\n+      hoyt_distribution(result_type __q = result_type(0.5L),\n+\t\t\tresult_type __omega = result_type(1))\n+      : _M_param(__q, __omega),\n+\t_M_ad(result_type(0.5L) * (result_type(1) + __q * __q),\n+\t      result_type(0.5L) * (result_type(1) + __q * __q)\n+\t\t\t\t/ (__q * __q)),\n+\t_M_ed(result_type(1))\n+      { }\n+\n+      explicit\n+      hoyt_distribution(const param_type& __p)\n+      : _M_param(__p),\n+\t_M_ad(result_type(0.5L) * (result_type(1) + __p.q() * __p.q()),\n+\t      result_type(0.5L) * (result_type(1) + __p.q() * __p.q())\n+\t\t\t\t/ (__p.q() * __p.q())),\n+\t_M_ed(result_type(1))\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      {\n+\t_M_ad.reset();\n+\t_M_ed.reset();\n+      }\n+\n+      /**\n+       * @brief Return the parameters of the distribution.\n+       */\n+      result_type\n+      q() const\n+      { return _M_param.q(); }\n+\n+      result_type\n+      omega() const\n+      { return _M_param.omega(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      { return result_type(0); }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { return std::numeric_limits<result_type>::max(); }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng);\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p);\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two Hoyt distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      friend bool\n+      operator==(const hoyt_distribution& __d1,\n+\t\t const hoyt_distribution& __d2)\n+      { return (__d1.param() == __d2.param()\n+\t\t&& __d1._M_ad == __d2._M_ad\n+\t\t&& __d1._M_ed == __d2._M_ed); }\n+\n+      /**\n+       * @brief Inserts a %hoyt_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %hoyt_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const hoyt_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %hoyt_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %hoyt_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   hoyt_distribution<_RealType1>&);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+\n+      __gnu_cxx::arcsine_distribution<result_type> _M_ad;\n+      std::exponential_distribution<result_type> _M_ed;\n+    };\n+\n+  /**\n+   * @brief Return true if two Hoyt distributions are not equal.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const hoyt_distribution<_RealType>& __d1,\n+\t       const hoyt_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n "}, {"sha": "ba6aaf2e11107db78ed15d35908b8da6ef5bcbee", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -1015,6 +1015,178 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n+\n+  template<typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      arcsine_distribution<_RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\tresult_type __dif = __p.b() - __p.a();\n+\tresult_type __sum = __p.a() + __p.b();\n+\twhile (__f != __t)\n+\t  {\n+\t    result_type __x = std::sin(this->_M_ud(__urng));\n+\t    *__f++ = (__x * __dif + __sum) / result_type(2);\n+\t  }\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const arcsine_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      __os << __x.a() << __space << __x.b();\n+      __os << __space << __x._M_ud;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       arcsine_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __a, __b;\n+      __is >> __a >> __b;\n+      __is >> __x._M_ud;\n+      __x.param(typename arcsine_distribution<_RealType>::\n+\t\tparam_type(__a, __b));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename hoyt_distribution<_RealType>::result_type\n+      hoyt_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\tresult_type __x = this->_M_ad(__urng);\n+\tresult_type __y = this->_M_ed(__urng);\n+\treturn (result_type(2) * this->q()\n+\t\t  / (result_type(1) + this->q() * this->q()))\n+\t       * std::sqrt(this->omega() * __x * __y);\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename hoyt_distribution<_RealType>::result_type\n+      hoyt_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\tresult_type __q2 = __p.q() * __p.q();\n+\tresult_type __num = result_type(0.5L) * (result_type(1) + __q2);\n+\ttypename __gnu_cxx::arcsine_distribution<result_type>::param_type\n+\t  __pa(__num, __num / __q2);\n+\tresult_type __x = this->_M_ad(__pa, __urng);\n+\tresult_type __y = this->_M_ed(__urng);\n+\treturn (result_type(2) * __p.q() / (result_type(1) + __q2))\n+\t       * std::sqrt(__p.omega() * __x * __y);\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      hoyt_distribution<_RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\tresult_type __2q = result_type(2) * __p.q();\n+\tresult_type __q2 = __p.q() * __p.q();\n+\tresult_type __q2p1 = result_type(1) + __q2;\n+\tresult_type __num = result_type(0.5L) * __q2p1;\n+\tresult_type __omega = __p.omega();\n+\ttypename __gnu_cxx::arcsine_distribution<result_type>::param_type\n+\t  __pa(__num, __num / __q2);\n+\twhile (__f != __t)\n+\t  {\n+\t    result_type __x = this->_M_ad(__pa, __urng);\n+\t    result_type __y = this->_M_ed(__urng);\n+\t    *__f++ = (__2q / __q2p1) * std::sqrt(__omega * __x * __y);\n+\t  }\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const hoyt_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      __os << __x.q() << __space << __x.omega();\n+      __os << __space << __x._M_ad;\n+      __os << __space << __x._M_ed;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       hoyt_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __q, __omega;\n+      __is >> __q >> __omega;\n+      __is >> __x._M_ad;\n+      __is >> __x._M_ed;\n+      __x.param(typename hoyt_distribution<_RealType>::\n+\t\tparam_type(__q, __omega));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "c149bd08fc90aa32cd588d53799b26fdf2f08848", "filename": "libstdc++-v3/testsuite/ext/random/arcsine_distribution/cons/default.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fdefault.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::arcsine_distribution<> u;\n+  VERIFY( u.a() == 0.0 );\n+  VERIFY( u.b() == 1.0 );\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == 1.0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "50c5cb2c9b58fa86cfedc9d1245a57003f6aae4c", "filename": "libstdc++-v3/testsuite/ext/random/arcsine_distribution/cons/parms.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fparms.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::arcsine_distribution<> u(-1.5, 3.0);\n+  VERIFY( u.a() == -1.5 );\n+  VERIFY( u.b() == 3.0 );\n+  VERIFY( u.min() == -1.5 );\n+  VERIFY( u.max() == 3.0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "210ac1a91eb7789e5da553d76da1ca5468723786", "filename": "libstdc++-v3/testsuite/ext/random/arcsine_distribution/operators/equal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Foperators%2Fequal.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::arcsine_distribution<double> u(-2.0, 3.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fba59052e5d6f8e01c24c2ae034da5686234002a", "filename": "libstdc++-v3/testsuite/ext/random/arcsine_distribution/operators/inequal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Foperators%2Finequal.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::arcsine_distribution<double> u(-2.0, 3.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7cbed402f170078691f54ada998ff89e95e838ca", "filename": "libstdc++-v3/testsuite/ext/random/arcsine_distribution/operators/serialize.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Foperators%2Fserialize.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  __gnu_cxx::arcsine_distribution<double> u(-1.5, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "102b22f9df588be0df6e31fb5489e3f8cd5b80a2", "filename": "libstdc++-v3/testsuite/ext/random/arcsine_distribution/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2012 Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+template class __gnu_cxx::arcsine_distribution<float>;\n+template class __gnu_cxx::arcsine_distribution<double>;\n+template class __gnu_cxx::arcsine_distribution<long double>;"}, {"sha": "b4a79403922872c15df0afbcf6b11dbd5d0e6ab4", "filename": "libstdc++-v3/testsuite/ext/random/arcsine_distribution/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Frequirements%2Ftypedefs.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::arcsine_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}, {"sha": "39940facc1f60e7e4c075c359f72b80bed4692be", "filename": "libstdc++-v3/testsuite/ext/random/hoyt_distribution/cons/default.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fdefault.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::hoyt_distribution<> u;\n+  VERIFY( u.q() == 0.5 );\n+  VERIFY( u.omega() == 1.0 );\n+  VERIFY( u.min() == 0.0 );\n+  typedef __gnu_cxx::hoyt_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "22c8b66dfa9766c5a0b5da38f55e0a36358acec0", "filename": "libstdc++-v3/testsuite/ext/random/hoyt_distribution/cons/parms.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fparms.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::hoyt_distribution<> u(0.05, 3.0);\n+  VERIFY( u.q() == 0.05 );\n+  VERIFY( u.omega() == 3.0 );\n+  VERIFY( u.min() == 0.0 );\n+  typedef __gnu_cxx::hoyt_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4496be67562bf4b2f68a814820c1f7e8608578f6", "filename": "libstdc++-v3/testsuite/ext/random/hoyt_distribution/operators/equal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Foperators%2Fequal.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::hoyt_distribution<double> u(0.05, 3.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "914e8d933ae8935651a698db6a9a4c749532bd28", "filename": "libstdc++-v3/testsuite/ext/random/hoyt_distribution/operators/inequal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Foperators%2Finequal.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::hoyt_distribution<double> u(0.05, 3.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cdf2e63dc48cb8c76daf29511a3d09a3d538ca42", "filename": "libstdc++-v3/testsuite/ext/random/hoyt_distribution/operators/serialize.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Foperators%2Fserialize.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  __gnu_cxx::hoyt_distribution<double> u(0.05, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "abdc59943eb8042fd13378298a3637114c7f8a15", "filename": "libstdc++-v3/testsuite/ext/random/hoyt_distribution/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2012 Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+template class __gnu_cxx::hoyt_distribution<float>;\n+template class __gnu_cxx::hoyt_distribution<double>;\n+template class __gnu_cxx::hoyt_distribution<long double>;"}, {"sha": "846b1f31552288aeeefee39db067851b8537a4c2", "filename": "libstdc++-v3/testsuite/ext/random/hoyt_distribution/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500602220a0c5938a69ad30533e3f843eeb9d8f6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Frequirements%2Ftypedefs.cc?ref=500602220a0c5938a69ad30533e3f843eeb9d8f6", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-10-12  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::hoyt_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}]}