{"sha": "dc6c96f0707aba6c2c94f41f3ccd0713381e372c", "node_id": "C_kwDOANBUbNoAKGRjNmM5NmYwNzA3YWJhNmMyYzk0ZjQxZjNjY2QwNzEzMzgxZTM3MmM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-10T15:52:21Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-10T15:52:21Z"}, "message": "c++: Harden *_PACK_EXPANSION and *_ARGUMENT_PACK macros\n\nThis makes the accessor macros for TYPE_/EXPR_PACK_EXPANSION\nand TYPE_/NONTYPE_ARGUMENT_PACK check the tree code of the argument.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (PACK_EXPANSION_CHECK): Define.\n\t(PACK_EXPANSION_PATTERN): Use PACK_EXPANSION_CHECK.\n\t(SET_PACK_EXPANSION_PATTERN): Likewise.\n\t(PACK_EXPANSION_PARAMETER_PACKS): Likewise.\n\t(PACK_EXPANSION_EXTRA_ARGS): Likewise.\n\t(PACK_EXPANSION_LOCAL_P): Likewise.\n\t(PACK_EXPANSION_SIZEOF_P): Likewise.\n\t(PACK_EXPANSION_AUTO_P): Likewise.\n\t(PACK_EXPANSION_FORCE_EXTRA_ARGS_P): Likewise.\n\t(ARGUMENT_PACK_CHECK): Define.\n\t(ARGUMENT_PACK_ARGS): Use ARGUMENT_PACK_CHECK.\n\t(SET_ARGUMENT_PACK_ARGS): Likewise.\n\t* parser.cc (cp_parser_sizeof_pack): Check for error_mark_node\n\tbefore setting PACK_EXPANSION_SIZEOF_P.", "tree": {"sha": "bf4d7b5524538bbfdc05d989c77e5efa06677b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf4d7b5524538bbfdc05d989c77e5efa06677b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc6c96f0707aba6c2c94f41f3ccd0713381e372c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6c96f0707aba6c2c94f41f3ccd0713381e372c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6c96f0707aba6c2c94f41f3ccd0713381e372c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6c96f0707aba6c2c94f41f3ccd0713381e372c/comments", "author": null, "committer": null, "parents": [{"sha": "ca97c87758d450a946cac31b0db43da0039fabf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca97c87758d450a946cac31b0db43da0039fabf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca97c87758d450a946cac31b0db43da0039fabf1"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "29fc0e5f829bfafcf932690f1c8da0cfceb41719", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6c96f0707aba6c2c94f41f3ccd0713381e372c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6c96f0707aba6c2c94f41f3ccd0713381e372c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dc6c96f0707aba6c2c94f41f3ccd0713381e372c", "patch": "@@ -3894,24 +3894,27 @@ struct GTY(()) lang_decl {\n   (TREE_CODE (NODE) == TYPE_PACK_EXPANSION     \\\n    || TREE_CODE (NODE) == EXPR_PACK_EXPANSION)\n \n+#define PACK_EXPANSION_CHECK(NODE) \\\n+  TREE_CHECK2 (NODE, TYPE_PACK_EXPANSION, EXPR_PACK_EXPANSION)\n+\n /* Extracts the type or expression pattern from a TYPE_PACK_EXPANSION or\n    EXPR_PACK_EXPANSION.  */\n #define PACK_EXPANSION_PATTERN(NODE)                            \\\n-  (TREE_CODE (NODE) == TYPE_PACK_EXPANSION ? TREE_TYPE (NODE)    \\\n-   : TREE_OPERAND (NODE, 0))\n+  (TREE_CODE (PACK_EXPANSION_CHECK (NODE)) == TYPE_PACK_EXPANSION \\\n+   ? TREE_TYPE (NODE) : TREE_OPERAND (NODE, 0))\n \n /* Sets the type or expression pattern for a TYPE_PACK_EXPANSION or\n    EXPR_PACK_EXPANSION.  */\n #define SET_PACK_EXPANSION_PATTERN(NODE,VALUE)  \\\n-  if (TREE_CODE (NODE) == TYPE_PACK_EXPANSION)  \\\n+  if (TREE_CODE (PACK_EXPANSION_CHECK (NODE)) == TYPE_PACK_EXPANSION)  \\\n     TREE_TYPE (NODE) = VALUE;                   \\\n   else                                          \\\n     TREE_OPERAND (NODE, 0) = VALUE\n \n /* The list of parameter packs used in the PACK_EXPANSION_* node. The\n    TREE_VALUE of each TREE_LIST contains the parameter packs.  */\n #define PACK_EXPANSION_PARAMETER_PACKS(NODE)\t\t\\\n-  *(TREE_CODE (NODE) == EXPR_PACK_EXPANSION\t\t\\\n+  *(TREE_CODE (PACK_EXPANSION_CHECK (NODE)) == EXPR_PACK_EXPANSION \\\n     ? &TREE_OPERAND (NODE, 1)\t\t\t\t\\\n     : &TYPE_MIN_VALUE_RAW (TYPE_PACK_EXPANSION_CHECK (NODE)))\n \n@@ -3922,22 +3925,26 @@ struct GTY(()) lang_decl {\n    are enclosing functions that provided function parameter packs we'll need\n    to map appropriately.  */\n #define PACK_EXPANSION_EXTRA_ARGS(NODE)\t\t\\\n-  *(TREE_CODE (NODE) == TYPE_PACK_EXPANSION\t\\\n+  *(TREE_CODE (PACK_EXPANSION_CHECK (NODE)) == TYPE_PACK_EXPANSION \\\n     ? &TYPE_MAX_VALUE_RAW (NODE)\t\t\t\\\n     : &TREE_OPERAND ((NODE), 2))\n \n /* True iff this pack expansion is within a function context.  */\n-#define PACK_EXPANSION_LOCAL_P(NODE) TREE_LANG_FLAG_0 (NODE)\n+#define PACK_EXPANSION_LOCAL_P(NODE) \\\n+  TREE_LANG_FLAG_0 (PACK_EXPANSION_CHECK (NODE))\n \n /* True iff this pack expansion is for sizeof....  */\n-#define PACK_EXPANSION_SIZEOF_P(NODE) TREE_LANG_FLAG_1 (NODE)\n+#define PACK_EXPANSION_SIZEOF_P(NODE) \\\n+  TREE_LANG_FLAG_1 (PACK_EXPANSION_CHECK (NODE))\n \n /* True iff this pack expansion is for auto... in lambda init-capture.  */\n-#define PACK_EXPANSION_AUTO_P(NODE) TREE_LANG_FLAG_2 (NODE)\n+#define PACK_EXPANSION_AUTO_P(NODE) \\\n+  TREE_LANG_FLAG_2 (PACK_EXPANSION_CHECK (NODE))\n \n /* True if we must use PACK_EXPANSION_EXTRA_ARGS and avoid partial\n    instantiation of this pack expansion.  */\n-#define PACK_EXPANSION_FORCE_EXTRA_ARGS_P(NODE) TREE_LANG_FLAG_3 (NODE)\n+#define PACK_EXPANSION_FORCE_EXTRA_ARGS_P(NODE) \\\n+  TREE_LANG_FLAG_3 (PACK_EXPANSION_CHECK (NODE))\n \n /* True iff the wildcard can match a template parameter pack.  */\n #define WILDCARD_PACK_P(NODE) TREE_LANG_FLAG_0 (NODE)\n@@ -3947,16 +3954,19 @@ struct GTY(()) lang_decl {\n   (TREE_CODE (NODE) == TYPE_ARGUMENT_PACK              \\\n    || TREE_CODE (NODE) == NONTYPE_ARGUMENT_PACK)\n \n+#define ARGUMENT_PACK_CHECK(NODE) \\\n+  TREE_CHECK2 (NODE, TYPE_ARGUMENT_PACK, NONTYPE_ARGUMENT_PACK)\n+\n /* The arguments stored in an argument pack. Arguments are stored in a\n    TREE_VEC, which may have length zero.  */\n #define ARGUMENT_PACK_ARGS(NODE)                               \\\n-  (TREE_CODE (NODE) == TYPE_ARGUMENT_PACK? TREE_TYPE (NODE)    \\\n-   : TREE_OPERAND (NODE, 0))\n+  (TREE_CODE (ARGUMENT_PACK_CHECK (NODE)) == TYPE_ARGUMENT_PACK \\\n+   ? TREE_TYPE (NODE) : TREE_OPERAND (NODE, 0))\n \n /* Set the arguments stored in an argument pack. VALUE must be a\n    TREE_VEC.  */\n #define SET_ARGUMENT_PACK_ARGS(NODE,VALUE)     \\\n-  if (TREE_CODE (NODE) == TYPE_ARGUMENT_PACK)  \\\n+  if (TREE_CODE (ARGUMENT_PACK_CHECK (NODE)) == TYPE_ARGUMENT_PACK)  \\\n     TREE_TYPE (NODE) = VALUE;                           \\\n   else                                                  \\\n     TREE_OPERAND (NODE, 0) = VALUE"}, {"sha": "5071c030f53e503244364627c64273e2ca54efe7", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6c96f0707aba6c2c94f41f3ccd0713381e372c/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6c96f0707aba6c2c94f41f3ccd0713381e372c/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=dc6c96f0707aba6c2c94f41f3ccd0713381e372c", "patch": "@@ -32563,7 +32563,8 @@ cp_parser_sizeof_pack (cp_parser *parser)\n   else if (TREE_CODE (expr) == CONST_DECL)\n     expr = DECL_INITIAL (expr);\n   expr = make_pack_expansion (expr);\n-  PACK_EXPANSION_SIZEOF_P (expr) = true;\n+  if (expr != error_mark_node)\n+    PACK_EXPANSION_SIZEOF_P (expr) = true;\n \n   if (paren)\n     parens.require_close (parser);"}]}