{"sha": "234681eadf2c51d7b78270188d64601b7267330d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM0NjgxZWFkZjJjNTFkN2I3ODI3MDE4OGQ2NDYwMWI3MjY3MzMwZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-05-03T13:20:13Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-05-08T19:45:31Z"}, "message": "coroutines: Update TREE_SIDE_EFFECTS on inserted bind exprs.\n\nThere are several places where we insert bind expressions while\nmaking the coroutine AST transforms.  These should be marked as\nhaving side-effects where relevant, which had been omitted.  This\nleads to at least one failure in the cppcoros test suite, where a loop\nbody is dropped in gimplification because it is not marked.\n\ngcc/cp/ChangeLog:\n\n2020-05-08  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/95003\n\t* coroutines.cc (build_actor_fn): Ensure that bind scopes\n\tare marked as having side-effects where necessary.\n\t(replace_statement_captures): Likewise.\n\t(morph_fn_to_coro): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-08  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/95003\n\t* g++.dg/coroutines/torture/pr95003.C: New test.", "tree": {"sha": "ce8493990ed194e757ae76291a4e965858b30cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce8493990ed194e757ae76291a4e965858b30cac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/234681eadf2c51d7b78270188d64601b7267330d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234681eadf2c51d7b78270188d64601b7267330d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/234681eadf2c51d7b78270188d64601b7267330d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234681eadf2c51d7b78270188d64601b7267330d/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "810a2bd8784d745e1b446fb13ce56bee3be16b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810a2bd8784d745e1b446fb13ce56bee3be16b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810a2bd8784d745e1b446fb13ce56bee3be16b81"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "508ef7026a66738c9ef20ec2ff1acfce7a91cef0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234681eadf2c51d7b78270188d64601b7267330d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234681eadf2c51d7b78270188d64601b7267330d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=234681eadf2c51d7b78270188d64601b7267330d", "patch": "@@ -1,3 +1,11 @@\n+2020-05-08  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95003\n+\t* coroutines.cc (build_actor_fn): Ensure that bind scopes\n+\tare marked as having side-effects where necessary.\n+\t(replace_statement_captures): Likewise.\n+\t(morph_fn_to_coro): Likewise.\n+\n 2020-05-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* NEWS: Delete, it is so stale."}, {"sha": "730e6fef82a8b77d33d9cf1b893a7817700d3567", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234681eadf2c51d7b78270188d64601b7267330d/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234681eadf2c51d7b78270188d64601b7267330d/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=234681eadf2c51d7b78270188d64601b7267330d", "patch": "@@ -1973,8 +1973,6 @@ build_actor_fn (location_t loc, tree coro_frame_type, tree actor, tree fnbody,\n   current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n   tree stmt = begin_compound_stmt (BCS_FN_BODY);\n \n-  /* ??? Can we dispense with the enclosing bind if the function body does\n-     not start with a bind_expr? (i.e. there's no contained scopes).  */\n   tree actor_bind = build3 (BIND_EXPR, void_type_node, NULL, NULL, NULL);\n   tree top_block = make_node (BLOCK);\n   BIND_EXPR_BLOCK (actor_bind) = top_block;\n@@ -2425,8 +2423,8 @@ build_actor_fn (location_t loc, tree coro_frame_type, tree actor, tree fnbody,\n \t\t       continue_label, continuation, 2};\n   cp_walk_tree (&actor_body, await_statement_expander, &data, NULL);\n \n-  actor_body = pop_stmt_list (actor_body);\n-  BIND_EXPR_BODY (actor_bind) = actor_body;\n+  BIND_EXPR_BODY (actor_bind) = pop_stmt_list (actor_body);\n+  TREE_SIDE_EFFECTS (actor_bind) = true;\n \n   finish_compound_stmt (stmt);\n   DECL_SAVED_TREE (actor) = pop_stmt_list (actor_outer);\n@@ -2891,6 +2889,7 @@ replace_statement_captures (tree *stmt, void *d)\n \t}\n     }\n   BIND_EXPR_BLOCK (aw_bind) = b_block;\n+  TREE_SIDE_EFFECTS (aw_bind) = TREE_SIDE_EFFECTS (BIND_EXPR_BODY (aw_bind));\n   *stmt = aw_bind;\n }\n \n@@ -3613,10 +3612,13 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t{\n \t  tree tlist = NULL_TREE;\n \t  append_to_statement_list_force (fnbody, &tlist);\n+\t  TREE_SIDE_EFFECTS (tlist) = TREE_SIDE_EFFECTS (fnbody);\n \t  BIND_EXPR_BODY (update_body) = tlist;\n \t}\n       tree new_body_list = NULL_TREE;\n-      append_to_statement_list_force (update_body, &new_body_list);\n+      TREE_SIDE_EFFECTS (update_body) = true;\n+      append_to_statement_list (update_body, &new_body_list);\n+      TREE_SIDE_EFFECTS (new_body_list) = true;\n       fnbody = new_body_list;\n     }\n \n@@ -4323,7 +4325,9 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n   /* Finish up the ramp function.  */\n   BIND_EXPR_VARS (gro_context_bind) = gro_bind_vars;\n   BIND_EXPR_BODY (gro_context_bind) = pop_stmt_list (gro_context_body);\n+  TREE_SIDE_EFFECTS (gro_context_bind) = true;\n   BIND_EXPR_BODY (ramp_bind) = pop_stmt_list (ramp_body);\n+  TREE_SIDE_EFFECTS (ramp_bind) = true;\n \n   /* We know the \"real\" promise and have a frame layout with a slot for each\n      suspend point, so we can build an actor function (which contains the\n@@ -4442,6 +4446,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t  BLOCK_SUPERCONTEXT (replace_blk) = tcb_block;\n \t  BLOCK_SUBBLOCKS (tcb_block) = replace_blk;\n \t  BIND_EXPR_BLOCK (fnbody) = tcb_block;\n+\t  TREE_SIDE_EFFECTS (fnbody) = true;\n \t}\n     }\n   else if (pedantic)"}, {"sha": "69c3cac3d71384cbe8e64bc4ad67620d06262777", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234681eadf2c51d7b78270188d64601b7267330d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234681eadf2c51d7b78270188d64601b7267330d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=234681eadf2c51d7b78270188d64601b7267330d", "patch": "@@ -1,3 +1,8 @@\n+2020-05-08  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95003\n+\t* g++.dg/coroutines/torture/pr95003.C: New test.\n+\n 2020-05-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.dg/cpp/counter-[23].c: Move to c-c+_-common/cpp."}, {"sha": "eda785827ec2b8c1e75de57cb401869b85c16430", "filename": "gcc/testsuite/g++.dg/coroutines/torture/pr95003.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234681eadf2c51d7b78270188d64601b7267330d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fpr95003.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234681eadf2c51d7b78270188d64601b7267330d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fpr95003.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fpr95003.C?ref=234681eadf2c51d7b78270188d64601b7267330d", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do run }\n+\n+#include \"../coro.h\"\n+#include \"../coro1-ret-int-yield-int.h\"\n+\n+// This tests that, when we insert bind scopes to contain variables that\n+// have been promoted from compiler temporaries to extend their lifetimes\n+// to a containing full expression, the inserted bind scopes have their\n+// tree-side-effects set.\n+\n+struct Awaitable {\n+  int v;\n+  Awaitable (int _v) : v(_v) {}\n+  bool await_ready() { return false; }\n+  void await_suspend(std::coroutine_handle<coro1::promise_type>) {}\n+  int await_resume() { return v; }\n+  auto operator co_await() { return *this; }\n+};\n+\n+coro1\n+my_coro\n+(int x)\n+{\n+  int sum = 0;\n+  for (unsigned i = 0; i < 100; ++i) {\n+    sum += co_await Awaitable{x+1};\n+  }\n+  co_return sum;\n+}\n+\n+int main ()\n+{\n+  PRINT (\"main: create coro1\");\n+  struct coro1 f_coro = my_coro (0);\n+\n+  PRINT (\"main: OK -- looping\");\n+\n+  do {\n+    f_coro.handle.resume();\n+  } while (!f_coro.handle.done());\n+\n+  int y = f_coro.handle.promise().get_value();\n+  if (y != 100)\n+    {\n+      PRINTF (\"main: y is wrong : %d, should be 100\\n\", y);\n+      abort ();\n+    }\n+  puts (\"main: done\");\n+  return 0;\n+}"}]}