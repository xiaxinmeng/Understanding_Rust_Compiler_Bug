{"sha": "c138f3280db10430f1b9b187968e72bb5f1e026a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEzOGYzMjgwZGIxMDQzMGYxYjliMTg3OTY4ZTcyYmI1ZjFlMDI2YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-08T22:08:20Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-08T22:08:20Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r423", "tree": {"sha": "474b7fecf62e02c04e0893b9fb85bb3d8f21a516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/474b7fecf62e02c04e0893b9fb85bb3d8f21a516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c138f3280db10430f1b9b187968e72bb5f1e026a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c138f3280db10430f1b9b187968e72bb5f1e026a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c138f3280db10430f1b9b187968e72bb5f1e026a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c138f3280db10430f1b9b187968e72bb5f1e026a/comments", "author": null, "committer": null, "parents": [{"sha": "5c23c401723bd1c663709d2ae3493bbeee02f9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c23c401723bd1c663709d2ae3493bbeee02f9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c23c401723bd1c663709d2ae3493bbeee02f9d1"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "70b24ad65114cdc316f01aa66d822870131e7926", "filename": "gcc/c-decl.c", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c138f3280db10430f1b9b187968e72bb5f1e026a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c138f3280db10430f1b9b187968e72bb5f1e026a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c138f3280db10430f1b9b187968e72bb5f1e026a", "patch": "@@ -1073,13 +1073,13 @@ pushtag (name, type)\n \n       if (TYPE_NAME (type) == 0)\n \tTYPE_NAME (type) = name;\n-\n-      if (b == global_binding_level)\n-\tb->tags = perm_tree_cons (name, type, b->tags);\n-      else\n-\tb->tags = saveable_tree_cons (name, type, b->tags);\n     }\n \n+  if (b == global_binding_level)\n+    b->tags = perm_tree_cons (name, type, b->tags);\n+  else\n+    b->tags = saveable_tree_cons (name, type, b->tags);\n+\n   /* Create a fake NULL-named TYPE_DECL node whose TREE_TYPE will be the\n      tagged type we just added to the current binding level.  This fake\n      NULL-named TYPE_DECL node helps dwarfout.c to know when it needs\n@@ -4229,11 +4229,18 @@ parmlist_tags_warning ()\n   for (elt = current_binding_level->tags; elt; elt = TREE_CHAIN (elt))\n     {\n       enum tree_code code = TREE_CODE (TREE_VALUE (elt));\n-      warning (\"`%s %s' declared inside parameter list\",\n-\t       (code == RECORD_TYPE ? \"struct\"\n-\t\t: code == UNION_TYPE ? \"union\"\n-\t\t: \"enum\"),\n-\t       IDENTIFIER_POINTER (TREE_PURPOSE (elt)));\n+      if (TREE_PURPOSE (elt) != 0)\n+\twarning (\"`%s %s' declared inside parameter list\",\n+\t\t (code == RECORD_TYPE ? \"struct\"\n+\t\t  : code == UNION_TYPE ? \"union\"\n+\t\t  : \"enum\"),\n+\t\t IDENTIFIER_POINTER (TREE_PURPOSE (elt)));\n+      else\n+\twarning (\"anonymous %s declared inside parameter list\",\n+\t\t (code == RECORD_TYPE ? \"struct\"\n+\t\t  : code == UNION_TYPE ? \"union\"\n+\t\t  : \"enum\"));\n+\n       if (! already)\n \t{\n \t  warning (\"its scope is only this definition or declaration,\");\n@@ -5310,6 +5317,19 @@ store_parm_decls ()\n \t  else\n \t    actual = type;\n \n+\t  /* We are going to assign a new value for the TYPE_ACTUAL_ARG_TYPES\n+\t     of the type of this function, but we need to avoid having this\n+\t     affect the types of other similarly-typed functions, so we must\n+\t     first force the generation of an identical (but separate) type\n+\t     node for the relevant function type.  The new node we create\n+\t     will be a variant of the main variant of the original function\n+\t     type.  */\n+\n+\t  TREE_TYPE (fndecl)\n+\t    = build_type_copy (TYPE_MAIN_VARIANT (TREE_TYPE (fndecl)),\n+\t\t\t       TYPE_READONLY (TREE_TYPE (fndecl)),\n+\t\t\t       TYPE_VOLATILE (TREE_TYPE (fndecl)));\n+\n \t  TYPE_ACTUAL_ARG_TYPES (TREE_TYPE (fndecl)) = actual;\n \t}\n "}]}