{"sha": "6dad5a56316443a832b581d384e1596fad690be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRhZDVhNTYzMTY0NDNhODMyYjU4MWQzODRlMTU5NmZhZDY5MGJlMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-27T10:34:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-27T10:34:14Z"}, "message": "re PR target/6054 (GCC 3.1 for ia64 fails to restore gp after indirect call in Linux kernel)\n\n        PR target/6054\n        * config/ia64/ia64.c (ia64_expand_call): Use pic patterns for\n        TARGET_CONST_GP.  Simplify conditions.\n\n\t* gcc.dg/20020326-1.c: New.\n\nFrom-SVN: r51444", "tree": {"sha": "d54d94353c2c82dd02ebc94714b3af184e829fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d54d94353c2c82dd02ebc94714b3af184e829fe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dad5a56316443a832b581d384e1596fad690be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dad5a56316443a832b581d384e1596fad690be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dad5a56316443a832b581d384e1596fad690be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dad5a56316443a832b581d384e1596fad690be1/comments", "author": null, "committer": null, "parents": [{"sha": "59f968797461e667478c4858837fb00883c1bfb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f968797461e667478c4858837fb00883c1bfb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f968797461e667478c4858837fb00883c1bfb2"}], "stats": {"total": 79, "additions": 36, "deletions": 43}, "files": [{"sha": "79b9d5020431bd12d555361edd9d7c047bc62022", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad5a56316443a832b581d384e1596fad690be1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad5a56316443a832b581d384e1596fad690be1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dad5a56316443a832b581d384e1596fad690be1", "patch": "@@ -1,3 +1,9 @@\n+2002-03-27  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/6054\n+\t* config/ia64/ia64.c (ia64_expand_call): Use pic patterns for\n+\tTARGET_CONST_GP.  Simplify conditions.\n+\n 2002-03-27  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/freebsd.h, config/sparc/linux.h, config/sparc/linux64.h,"}, {"sha": "c78d6319d82f841d0c4de8d9a5b83d67d268da12", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 19, "deletions": 43, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad5a56316443a832b581d384e1596fad690be1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad5a56316443a832b581d384e1596fad690be1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=6dad5a56316443a832b581d384e1596fad690be1", "patch": "@@ -1144,7 +1144,8 @@ ia64_expand_call (retval, addr, nextarg, sibcall_p)\n      rtx nextarg;\n      int sibcall_p;\n {\n-  rtx insn, b0, pfs, gp_save, narg_rtx;\n+  rtx insn, b0, pfs, gp_save, narg_rtx, dest;\n+  bool indirect_p;\n   int narg;\n \n   addr = XEXP (addr, 0);\n@@ -1171,61 +1172,36 @@ ia64_expand_call (retval, addr, nextarg, sibcall_p)\n       return;\n     }\n \n-  if (sibcall_p)\n+  indirect_p = ! symbolic_operand (addr, VOIDmode);\n+\n+  if (sibcall_p || (TARGET_CONST_GP && !indirect_p))\n     gp_save = NULL_RTX;\n   else\n     gp_save = ia64_gp_save_reg (setjmp_operand (addr, VOIDmode));\n \n+  if (gp_save)\n+    emit_move_insn (gp_save, pic_offset_table_rtx);\n+\n   /* If this is an indirect call, then we have the address of a descriptor.  */\n-  if (! symbolic_operand (addr, VOIDmode))\n+  if (indirect_p)\n     {\n-      rtx dest;\n-\n-      if (! sibcall_p)\n-\temit_move_insn (gp_save, pic_offset_table_rtx);\n-\n       dest = force_reg (DImode, gen_rtx_MEM (DImode, addr));\n       emit_move_insn (pic_offset_table_rtx,\n \t\t      gen_rtx_MEM (DImode, plus_constant (addr, 8)));\n-\n-      if (sibcall_p)\n-\tinsn = gen_sibcall_pic (dest, narg_rtx, b0, pfs);\n-      else if (! retval)\n-\tinsn = gen_call_pic (dest, narg_rtx, b0);\n-      else\n-\tinsn = gen_call_value_pic (retval, dest, narg_rtx, b0);\n-      emit_call_insn (insn);\n-\n-      if (! sibcall_p)\n-\temit_move_insn (pic_offset_table_rtx, gp_save);\n-    }\n-  else if (TARGET_CONST_GP)\n-    {\n-      if (sibcall_p)\n-\tinsn = gen_sibcall_nopic (addr, narg_rtx, b0, pfs);\n-      else if (! retval)\n-\tinsn = gen_call_nopic (addr, narg_rtx, b0);\n-      else\n-\tinsn = gen_call_value_nopic (retval, addr, narg_rtx, b0);\n-      emit_call_insn (insn);\n     }\n   else\n-    {\n-      if (sibcall_p)\n-\temit_call_insn (gen_sibcall_pic (addr, narg_rtx, b0, pfs));\n-      else\n-\t{\n-\t  emit_move_insn (gp_save, pic_offset_table_rtx);\n+    dest = addr;\n \n-\t  if (! retval)\n-\t    insn = gen_call_pic (addr, narg_rtx, b0);\n-\t  else\n-\t    insn = gen_call_value_pic (retval, addr, narg_rtx, b0);\n-\t  emit_call_insn (insn);\n+  if (sibcall_p)\n+    insn = gen_sibcall_pic (dest, narg_rtx, b0, pfs);\n+  else if (! retval)\n+    insn = gen_call_pic (dest, narg_rtx, b0);\n+  else\n+    insn = gen_call_value_pic (retval, dest, narg_rtx, b0);\n+  emit_call_insn (insn);\n \n-\t  emit_move_insn (pic_offset_table_rtx, gp_save);\n-\t}\n-    }\n+  if (gp_save)\n+    emit_move_insn (pic_offset_table_rtx, gp_save);\n }\n \f\n /* Begin the assembly file.  */"}, {"sha": "4a903bc91c473d10161560a71c29112ee972204f", "filename": "gcc/testsuite/gcc.dg/20020326-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad5a56316443a832b581d384e1596fad690be1/gcc%2Ftestsuite%2Fgcc.dg%2F20020326-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad5a56316443a832b581d384e1596fad690be1/gcc%2Ftestsuite%2Fgcc.dg%2F20020326-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020326-1.c?ref=6dad5a56316443a832b581d384e1596fad690be1", "patch": "@@ -0,0 +1,11 @@\n+/* PR target/6054 */\n+/* { dg-do compile { target ia64-*-* } } */\n+/* { dg-options \"-O -mconstant-gp\" } */\n+/* { dg-final { scan-assembler \"mov r1 =\" } } */\n+\n+extern void direct (void);\n+void foo(void (*indirect) (void))\n+{\n+  indirect ();\n+  direct ();\n+}"}]}