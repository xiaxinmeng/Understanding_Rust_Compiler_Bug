{"sha": "dec21bbc9773ebe3e066109b00d1fbeee0b18581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVjMjFiYmM5NzczZWJlM2UwNjYxMDliMDBkMWZiZWVlMGIxODU4MQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-05-24T14:00:39Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-05-24T14:00:39Z"}, "message": "[ARM][3/4] Cleanup casts from INTVAL to [unsigned] HOST_WIDE_INT\n\n\t* config/arm/arm.md (ashldi3): Replace comparison of INTVAL of\n\toperands[2] against 1 with comparison against CONST1_RTX.\n\t(ashrdi3): Likewise.\n\t(lshrdi3): Likewise.\n\t(ashlsi3): Replace cast of INTVAL to unsigned HOST_WIDE_INT with\n\tUINTVAL.\n\t(ashrsi3): Likewise.\n\t(lshrsi3): Likewise.\n\t(rotrsi3): Likewise.\n\t(define_split above *compareqi_eq0): Likewise.\n\t(define_split above \"prologue\"): Likewise.\n\t* config/arm/arm.c (thumb1_size_rtx_costs): Likewise.\n\t* config/arm/predicates.md (shift_operator): Likewise.\n\t(shift_nomul_operator): Likewise.\n\t(sat_shift_operator): Likewise.\n\t(thumb1_cmp_operand): Likewise.\n\t(const_neon_scalar_shift_amount_operand): Replace manual range\n\tcheck with IN_RANGE.\n\t* config/arm/thumb1.md (define_peephole2 above *thumb_subdi3):\n\tReplace cast of INTVAL to unsigned HOST_WIDE_INT with UINTVAL.\n\nFrom-SVN: r236640", "tree": {"sha": "833b812a5232ceee4a1be5714f0becb68a93795f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/833b812a5232ceee4a1be5714f0becb68a93795f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dec21bbc9773ebe3e066109b00d1fbeee0b18581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dec21bbc9773ebe3e066109b00d1fbeee0b18581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dec21bbc9773ebe3e066109b00d1fbeee0b18581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dec21bbc9773ebe3e066109b00d1fbeee0b18581/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a04e69c0b12712bb90762dd20d7ffcd6f04e1da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a04e69c0b12712bb90762dd20d7ffcd6f04e1da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a04e69c0b12712bb90762dd20d7ffcd6f04e1da6"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "a932987aab9bf4d5eb37f6ea59a740acaaebe6d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec21bbc9773ebe3e066109b00d1fbeee0b18581/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec21bbc9773ebe3e066109b00d1fbeee0b18581/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dec21bbc9773ebe3e066109b00d1fbeee0b18581", "patch": "@@ -1,3 +1,26 @@\n+2016-05-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.md (ashldi3): Replace comparison of INTVAL of\n+\toperands[2] against 1 with comparison against CONST1_RTX.\n+\t(ashrdi3): Likewise.\n+\t(lshrdi3): Likewise.\n+\t(ashlsi3): Replace cast of INTVAL to unsigned HOST_WIDE_INT with\n+\tUINTVAL.\n+\t(ashrsi3): Likewise.\n+\t(lshrsi3): Likewise.\n+\t(rotrsi3): Likewise.\n+\t(define_split above *compareqi_eq0): Likewise.\n+\t(define_split above \"prologue\"): Likewise.\n+\t* config/arm/arm.c (thumb1_size_rtx_costs): Likewise.\n+\t* config/arm/predicates.md (shift_operator): Likewise.\n+\t(shift_nomul_operator): Likewise.\n+\t(sat_shift_operator): Likewise.\n+\t(thumb1_cmp_operand): Likewise.\n+\t(const_neon_scalar_shift_amount_operand): Replace manual range\n+\tcheck with IN_RANGE.\n+\t* config/arm/thumb1.md (define_peephole2 above *thumb_subdi3):\n+\tReplace cast of INTVAL to unsigned HOST_WIDE_INT with UINTVAL.\n+\n 2016-05-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (andsi3): Replace cast of 1 to HOST_WIDE_INT"}, {"sha": "4e453fd710112adc0cf581ea817bf17df63ac9c4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec21bbc9773ebe3e066109b00d1fbeee0b18581/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec21bbc9773ebe3e066109b00d1fbeee0b18581/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=dec21bbc9773ebe3e066109b00d1fbeee0b18581", "patch": "@@ -9061,7 +9061,7 @@ thumb1_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n     case CONST_INT:\n       if (outer == SET)\n         {\n-          if ((unsigned HOST_WIDE_INT) INTVAL (x) < 256)\n+          if (UINTVAL (x) < 256)\n             return COSTS_N_INSNS (1);\n \t  /* See split \"TARGET_THUMB1 && satisfies_constraint_J\".  */\n \t  if (INTVAL (x) >= -255 && INTVAL (x) <= -1)"}, {"sha": "451011d9486077ccbffd22518dc0837f63d087cd", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec21bbc9773ebe3e066109b00d1fbeee0b18581/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec21bbc9773ebe3e066109b00d1fbeee0b18581/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=dec21bbc9773ebe3e066109b00d1fbeee0b18581", "patch": "@@ -3747,8 +3747,7 @@\n     {\n       rtx scratch1, scratch2;\n \n-      if (CONST_INT_P (operands[2])\n-\t  && (HOST_WIDE_INT) INTVAL (operands[2]) == 1)\n+      if (operands[2] == CONST1_RTX (SImode))\n         {\n           emit_insn (gen_arm_ashldi3_1bit (operands[0], operands[1]));\n           DONE;\n@@ -3793,7 +3792,7 @@\n   \"TARGET_EITHER\"\n   \"\n   if (CONST_INT_P (operands[2])\n-      && ((unsigned HOST_WIDE_INT) INTVAL (operands[2])) > 31)\n+      && (UINTVAL (operands[2])) > 31)\n     {\n       emit_insn (gen_movsi (operands[0], const0_rtx));\n       DONE;\n@@ -3821,8 +3820,7 @@\n     {\n       rtx scratch1, scratch2;\n \n-      if (CONST_INT_P (operands[2])\n-\t  && (HOST_WIDE_INT) INTVAL (operands[2]) == 1)\n+      if (operands[2] == CONST1_RTX (SImode))\n         {\n           emit_insn (gen_arm_ashrdi3_1bit (operands[0], operands[1]));\n           DONE;\n@@ -3867,7 +3865,7 @@\n   \"TARGET_EITHER\"\n   \"\n   if (CONST_INT_P (operands[2])\n-      && ((unsigned HOST_WIDE_INT) INTVAL (operands[2])) > 31)\n+      && UINTVAL (operands[2]) > 31)\n     operands[2] = GEN_INT (31);\n   \"\n )\n@@ -3892,8 +3890,7 @@\n     {\n       rtx scratch1, scratch2;\n \n-      if (CONST_INT_P (operands[2])\n-\t  && (HOST_WIDE_INT) INTVAL (operands[2]) == 1)\n+      if (operands[2] == CONST1_RTX (SImode))\n         {\n           emit_insn (gen_arm_lshrdi3_1bit (operands[0], operands[1]));\n           DONE;\n@@ -3938,7 +3935,7 @@\n   \"TARGET_EITHER\"\n   \"\n   if (CONST_INT_P (operands[2])\n-      && ((unsigned HOST_WIDE_INT) INTVAL (operands[2])) > 31)\n+      && (UINTVAL (operands[2])) > 31)\n     {\n       emit_insn (gen_movsi (operands[0], const0_rtx));\n       DONE;\n@@ -3972,7 +3969,7 @@\n   if (TARGET_32BIT)\n     {\n       if (CONST_INT_P (operands[2])\n-          && ((unsigned HOST_WIDE_INT) INTVAL (operands[2])) > 31)\n+          && UINTVAL (operands[2]) > 31)\n         operands[2] = GEN_INT (INTVAL (operands[2]) % 32);\n     }\n   else /* TARGET_THUMB1 */\n@@ -5120,7 +5117,7 @@\n \t\t     (match_operator 5 \"subreg_lowpart_operator\"\n \t\t      [(match_operand:SI 4 \"s_register_operand\" \"\")]))))]\n   \"TARGET_32BIT\n-   && ((unsigned HOST_WIDE_INT) INTVAL (operands[3])\n+   && (UINTVAL (operands[3])\n        == (GET_MODE_MASK (GET_MODE (operands[5]))\n            & (GET_MODE_MASK (GET_MODE (operands[5]))\n \t      << (INTVAL (operands[2])))))\"\n@@ -10224,8 +10221,8 @@\n \t (match_operand 1 \"const_int_operand\" \"\")))\n    (clobber (match_scratch:SI 2 \"\"))]\n   \"TARGET_ARM\n-   && (((unsigned HOST_WIDE_INT) INTVAL (operands[1]))\n-       == (((unsigned HOST_WIDE_INT) INTVAL (operands[1])) >> 24) << 24)\"\n+   && ((UINTVAL (operands[1]))\n+       == ((UINTVAL (operands[1])) >> 24) << 24)\"\n   [(set (match_dup 2) (zero_extend:SI (match_dup 0)))\n    (set (reg:CC CC_REGNUM) (compare:CC (match_dup 2) (match_dup 1)))]\n   \""}, {"sha": "4b4b4fe9e45a0957bf8f5b19633c99b2a7b34eb8", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec21bbc9773ebe3e066109b00d1fbeee0b18581/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec21bbc9773ebe3e066109b00d1fbeee0b18581/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=dec21bbc9773ebe3e066109b00d1fbeee0b18581", "patch": "@@ -170,8 +170,7 @@\n \n (define_predicate \"const_neon_scalar_shift_amount_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"((unsigned HOST_WIDE_INT) INTVAL (op)) <= GET_MODE_BITSIZE (mode)\n-\t&& ((unsigned HOST_WIDE_INT) INTVAL (op)) > 0\")))\n+       (match_test \"IN_RANGE (UINTVAL (op), 1, GET_MODE_BITSIZE (mode))\")))\n \n (define_predicate \"ldrd_strd_offset_operand\"\n   (and (match_operand 0 \"const_int_operand\")\n@@ -285,19 +284,19 @@\n \t\t      (match_test \"power_of_two_operand (XEXP (op, 1), mode)\"))\n \t\t (and (match_code \"rotate\")\n \t\t      (match_test \"CONST_INT_P (XEXP (op, 1))\n-\t\t\t\t   && ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1))) < 32\")))\n+\t\t\t\t   && (UINTVAL (XEXP (op, 1))) < 32\")))\n \t    (and (match_code \"ashift,ashiftrt,lshiftrt,rotatert\")\n \t\t (match_test \"!CONST_INT_P (XEXP (op, 1))\n-\t\t\t      || ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1))) < 32\")))\n+\t\t\t      || (UINTVAL (XEXP (op, 1))) < 32\")))\n        (match_test \"mode == GET_MODE (op)\")))\n \n (define_special_predicate \"shift_nomul_operator\"\n   (and (ior (and (match_code \"rotate\")\n \t\t (match_test \"CONST_INT_P (XEXP (op, 1))\n-\t\t\t      && ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1))) < 32\"))\n+\t\t\t      && (UINTVAL (XEXP (op, 1))) < 32\"))\n \t    (and (match_code \"ashift,ashiftrt,lshiftrt,rotatert\")\n \t\t (match_test \"!CONST_INT_P (XEXP (op, 1))\n-\t\t\t      || ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1))) < 32\")))\n+\t\t\t      || (UINTVAL (XEXP (op, 1))) < 32\")))\n        (match_test \"mode == GET_MODE (op)\")))\n \n ;; True for shift operators which can be used with saturation instructions.\n@@ -306,7 +305,7 @@\n                  (match_test \"power_of_two_operand (XEXP (op, 1), mode)\"))\n             (and (match_code \"ashift,ashiftrt\")\n                  (match_test \"CONST_INT_P (XEXP (op, 1))\n-\t\t              && ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1)) < 32)\")))\n+\t\t              && (UINTVAL (XEXP (op, 1)) < 32)\")))\n        (match_test \"mode == GET_MODE (op)\")))\n \n ;; True for MULT, to identify which variant of shift_operator is in use.\n@@ -532,7 +531,7 @@\n   (ior (and (match_code \"reg,subreg\")\n \t    (match_operand 0 \"s_register_operand\"))\n        (and (match_code \"const_int\")\n-\t    (match_test \"((unsigned HOST_WIDE_INT) INTVAL (op)) < 256\"))))\n+\t    (match_test \"(UINTVAL (op)) < 256\"))))\n \n (define_predicate \"thumb1_cmpneg_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "c5b59bd3e1577a904a93bb8bdf7d486b086fb848", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec21bbc9773ebe3e066109b00d1fbeee0b18581/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec21bbc9773ebe3e066109b00d1fbeee0b18581/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=dec21bbc9773ebe3e066109b00d1fbeee0b18581", "patch": "@@ -114,8 +114,8 @@\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0) (reg:SI SP_REGNUM)))]\n   \"TARGET_THUMB1\n-   && (unsigned HOST_WIDE_INT) (INTVAL (operands[1])) < 1024\n-   && (INTVAL (operands[1]) & 3) == 0\"\n+   && UINTVAL (operands[1]) < 1024\n+   && (UINTVAL (operands[1]) & 3) == 0\"\n   [(set (match_dup 0) (plus:SI (reg:SI SP_REGNUM) (match_dup 1)))]\n   \"\"\n )"}]}