{"sha": "770affca79c9dce98b39390942858f4e49a531f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwYWZmY2E3OWM5ZGNlOThiMzkzOTA5NDI4NThmNGU0OWE1MzFmOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T15:42:11Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T15:42:11Z"}, "message": "expr.c: Use rtx_insn and rtx_code_label\n\ngcc/\n\t* expr.c (convert_move): Strengthen local \"insns\" from rtx to\n\trtx_insn *.\n\t(emit_block_move_via_loop): Strengthen locals \"cmp_label\" and\n\t\"top_label\" from rtx to rtx_code_label *.\n\t(move_block_to_reg): Strengthen local \"insn\", \"last\" from rtx to\n\trtx_insn *.\n\t(emit_single_push_insn): Likewise for locals \"prev\", \"last\".\n\t(store_expr): Strengthen locals \"lab1\", \"lab2\", \"label\" from rtx\n\tto rtx_code_label *.\n\t(store_constructor): Likewise for locals \"loop_start\", \"loop_end\".\n\t(expand_cond_expr_using_cmove): Strengthen local \"seq\" from rtx to\n\trtx_insn *.\n\t(expand_expr_real_2): Likewise.\n\t(expand_expr_real_1): Strengthen local \"label\" from rtx to\n\trtx_code_label *.\n\nFrom-SVN: r214324", "tree": {"sha": "1d058e3b057fc402dcfc48448e88664acab3704c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d058e3b057fc402dcfc48448e88664acab3704c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/770affca79c9dce98b39390942858f4e49a531f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770affca79c9dce98b39390942858f4e49a531f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770affca79c9dce98b39390942858f4e49a531f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770affca79c9dce98b39390942858f4e49a531f9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3f6fb16149af364b82bf6b5596bca52ca0645e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f6fb16149af364b82bf6b5596bca52ca0645e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f6fb16149af364b82bf6b5596bca52ca0645e0"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "02b5c26b199a1d8a9675415c12ceebb007aac53e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770affca79c9dce98b39390942858f4e49a531f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770affca79c9dce98b39390942858f4e49a531f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=770affca79c9dce98b39390942858f4e49a531f9", "patch": "@@ -1,3 +1,21 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* expr.c (convert_move): Strengthen local \"insns\" from rtx to\n+\trtx_insn *.\n+\t(emit_block_move_via_loop): Strengthen locals \"cmp_label\" and\n+\t\"top_label\" from rtx to rtx_code_label *.\n+\t(move_block_to_reg): Strengthen local \"insn\", \"last\" from rtx to\n+\trtx_insn *.\n+\t(emit_single_push_insn): Likewise for locals \"prev\", \"last\".\n+\t(store_expr): Strengthen locals \"lab1\", \"lab2\", \"label\" from rtx\n+\tto rtx_code_label *.\n+\t(store_constructor): Likewise for locals \"loop_start\", \"loop_end\".\n+\t(expand_cond_expr_using_cmove): Strengthen local \"seq\" from rtx to\n+\trtx_insn *.\n+\t(expand_expr_real_2): Likewise.\n+\t(expand_expr_real_1): Strengthen local \"label\" from rtx to\n+\trtx_code_label *.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* expmed.c (store_bit_field_using_insv): Strengthen local \"last\""}, {"sha": "ac375041d4d59e8fb3c09ed5f50ffea856aee03f", "filename": "gcc/expr.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770affca79c9dce98b39390942858f4e49a531f9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770affca79c9dce98b39390942858f4e49a531f9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=770affca79c9dce98b39390942858f4e49a531f9", "patch": "@@ -364,7 +364,8 @@ convert_move (rtx to, rtx from, int unsignedp)\n \n   if (to_real)\n     {\n-      rtx value, insns;\n+      rtx value;\n+      rtx_insn *insns;\n       convert_optab tab;\n \n       gcc_assert ((GET_MODE_PRECISION (from_mode)\n@@ -472,7 +473,7 @@ convert_move (rtx to, rtx from, int unsignedp)\n   if (GET_MODE_PRECISION (from_mode) < GET_MODE_PRECISION (to_mode)\n       && GET_MODE_PRECISION (to_mode) > BITS_PER_WORD)\n     {\n-      rtx insns;\n+      rtx_insn *insns;\n       rtx lowpart;\n       rtx fill_value;\n       rtx lowfrom;\n@@ -1453,7 +1454,8 @@ static void\n emit_block_move_via_loop (rtx x, rtx y, rtx size,\n \t\t\t  unsigned int align ATTRIBUTE_UNUSED)\n {\n-  rtx cmp_label, top_label, iter, x_addr, y_addr, tmp;\n+  rtx_code_label *cmp_label, *top_label;\n+  rtx iter, x_addr, y_addr, tmp;\n   enum machine_mode x_addr_mode = get_address_mode (x);\n   enum machine_mode y_addr_mode = get_address_mode (y);\n   enum machine_mode iter_mode;\n@@ -1507,7 +1509,7 @@ move_block_to_reg (int regno, rtx x, int nregs, enum machine_mode mode)\n   int i;\n #ifdef HAVE_load_multiple\n   rtx pat;\n-  rtx last;\n+  rtx_insn *last;\n #endif\n \n   if (nregs == 0)\n@@ -1553,7 +1555,7 @@ move_block_from_reg (int regno, rtx x, int nregs)\n #ifdef HAVE_store_multiple\n   if (HAVE_store_multiple)\n     {\n-      rtx last = get_last_insn ();\n+      rtx_insn *last = get_last_insn ();\n       rtx pat = gen_store_multiple (x, gen_rtx_REG (word_mode, regno),\n \t\t\t\t    GEN_INT (nregs));\n       if (pat)\n@@ -4064,8 +4066,8 @@ static void\n emit_single_push_insn (enum machine_mode mode, rtx x, tree type)\n {\n   int delta, old_delta = stack_pointer_delta;\n-  rtx prev = get_last_insn ();\n-  rtx last;\n+  rtx_insn *prev = get_last_insn ();\n+  rtx_insn *last;\n \n   emit_single_push_insn_1 (mode, x, type);\n \n@@ -5170,7 +5172,7 @@ store_expr (tree exp, rtx target, int call_param_p, bool nontemporal)\n \t side.  This avoids the creation of unnecessary temporaries.\n \t For non-BLKmode, it is more efficient not to do this.  */\n \n-      rtx lab1 = gen_label_rtx (), lab2 = gen_label_rtx ();\n+      rtx_code_label *lab1 = gen_label_rtx (), *lab2 = gen_label_rtx ();\n \n       do_pending_stack_adjust ();\n       NO_DEFER_POP;\n@@ -5405,7 +5407,7 @@ store_expr (tree exp, rtx target, int call_param_p, bool nontemporal)\n \t\t= expand_expr (copy_size, NULL_RTX, VOIDmode,\n \t\t\t       (call_param_p\n \t\t\t\t? EXPAND_STACK_PARM : EXPAND_NORMAL));\n-\t      rtx label = 0;\n+\t      rtx_code_label *label = 0;\n \n \t      /* Copy that much.  */\n \t      copy_size_rtx = convert_to_mode (pointer_mode, copy_size_rtx,\n@@ -6192,8 +6194,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t  }\n \t\telse\n \t\t  {\n-\t\t    rtx loop_start = gen_label_rtx ();\n-\t\t    rtx loop_end = gen_label_rtx ();\n+\t\t    rtx_code_label *loop_start = gen_label_rtx ();\n+\t\t    rtx_code_label *loop_end = gen_label_rtx ();\n \t\t    tree exit_cond;\n \n \t\t    expand_normal (hi_index);\n@@ -8010,7 +8012,7 @@ expand_cond_expr_using_cmove (tree treeop0 ATTRIBUTE_UNUSED,\n      and return.  */\n   if (insn)\n     {\n-      rtx seq = get_insns ();\n+      rtx_insn *seq = get_insns ();\n       end_sequence ();\n       emit_insn (seq);\n       return convert_modes (orig_mode, mode, temp, 0);\n@@ -8814,7 +8816,7 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n \t       and return.  */\n \t    if (insn)\n \t      {\n-\t\trtx seq = get_insns ();\n+\t\trtx_insn *seq = get_insns ();\n \t\tend_sequence ();\n \t\temit_insn (seq);\n \t\treturn target;\n@@ -10595,7 +10597,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    && integer_onep (DECL_SIZE (TREE_OPERAND (lhs, 1)))\n \t    && integer_onep (DECL_SIZE (TREE_OPERAND (TREE_OPERAND (rhs, 1), 1))))\n \t  {\n-\t    rtx label = gen_label_rtx ();\n+\t    rtx_code_label *label = gen_label_rtx ();\n \t    int value = TREE_CODE (rhs) == BIT_IOR_EXPR;\n \t    do_jump (TREE_OPERAND (rhs, 1),\n \t\t     value ? label : 0,"}]}