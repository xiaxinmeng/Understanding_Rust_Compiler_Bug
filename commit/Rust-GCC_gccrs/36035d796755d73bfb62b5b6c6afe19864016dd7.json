{"sha": "36035d796755d73bfb62b5b6c6afe19864016dd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYwMzVkNzk2NzU1ZDczYmZiNjJiNWI2YzZhZmUxOTg2NDAxNmRkNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2015-01-19T21:14:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2015-01-19T21:14:59Z"}, "message": "Merge with upstream libffi 3ac1610aa33c887ea9b14935208943925714a33e\n\nIncludes build fixes for Solaris and Cygwin.\n\nFrom-SVN: r219860", "tree": {"sha": "ad7e07e65bd2c97439708c0d2db4ad604cfafe32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad7e07e65bd2c97439708c0d2db4ad604cfafe32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36035d796755d73bfb62b5b6c6afe19864016dd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36035d796755d73bfb62b5b6c6afe19864016dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36035d796755d73bfb62b5b6c6afe19864016dd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36035d796755d73bfb62b5b6c6afe19864016dd7/comments", "author": null, "committer": null, "parents": [{"sha": "9789b553b4c1248b56ec41f2bda47c6bb9785f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9789b553b4c1248b56ec41f2bda47c6bb9785f2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9789b553b4c1248b56ec41f2bda47c6bb9785f2b"}], "stats": {"total": 345, "additions": 252, "deletions": 93}, "files": [{"sha": "dd8d516a42ce3f18077fddc27ea50a7f14e38abe", "filename": "libffi/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=36035d796755d73bfb62b5b6c6afe19864016dd7", "patch": "@@ -1,3 +1,7 @@\n+2015-01-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* Merge to upstream commit 3ac1610aa33c887ea9b14935208943925714a33e.\n+\n 2015-01-19  Richard Henderson  <rth@redhat.com>\n \n \tPR libffi/64607"}, {"sha": "3f483826c1ab98eb2d03b2e96a762a0216ad76c3", "filename": "libffi/src/sparc/v8.S", "status": "modified", "additions": 71, "deletions": 49, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2Fsrc%2Fsparc%2Fv8.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2Fsrc%2Fsparc%2Fv8.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsparc%2Fv8.S?ref=36035d796755d73bfb62b5b6c6afe19864016dd7", "patch": "@@ -48,7 +48,7 @@\n #ifndef __GNUC__\n         .align 8\n \t.globl\tC(ffi_flush_icache)\n-\t.type\tC(ffi_flush_icache),@function\n+\t.type\tC(ffi_flush_icache),#function\n \tFFI_HIDDEN(C(ffi_flush_icache))\n \n C(ffi_flush_icache):\n@@ -66,14 +66,15 @@ C(ffi_flush_icache):\n \t.size\tC(ffi_flush_icache), . - C(ffi_flush_icache)\n #endif\n \n-.macro E index\n-\t.align\t16\n-\t.org\t2b + \\index * 16\n-.endm\n+#if defined(__sun__) && defined(__svr4__)\n+# define E(INDEX)\t.align 16\n+#else\n+# define E(INDEX)\t.align 16; .org 2b + INDEX * 16\n+#endif\n \n         .align 8\n \t.globl\tC(ffi_call_v8)\n-\t.type\tC(ffi_call_v8),@function\n+\t.type\tC(ffi_call_v8),#function\n \tFFI_HIDDEN(C(ffi_call_v8))\n \n C(ffi_call_v8):\n@@ -82,6 +83,7 @@ C(ffi_call_v8):\n \tsave\t%sp, %o4, %sp\n \tcfi_def_cfa_register(%fp)\n \tcfi_window_save\n+\tcfi_register(%o7, %i7)\n \n \tmov\t%i0, %o0\t\t! copy cif\n \tadd\t%sp, 64+32, %o1\t\t! load args area\n@@ -114,71 +116,71 @@ C(ffi_call_v8):\n \t! Note that each entry is 4 insns, enforced by the E macro.\n \t.align\t16\n 2:\n-E SPARC_RET_VOID\n+E(SPARC_RET_VOID)\n \tret\n \t restore\n-E SPARC_RET_STRUCT\n+E(SPARC_RET_STRUCT)\n \tunimp\n-E SPARC_RET_UINT8\n+E(SPARC_RET_UINT8)\n \tand\t%o0, 0xff, %o0\n \tst\t%o0, [%i2]\n \tret\n \t restore\n-E SPARC_RET_SINT8\n+E(SPARC_RET_SINT8)\n \tsll\t%o0, 24, %o0\n \tb\t7f\n \t sra\t%o0, 24, %o0\n-E SPARC_RET_UINT16\n+E(SPARC_RET_UINT16)\n \tsll\t%o0, 16, %o0\n \tb\t7f\n \t srl\t%o0, 16, %o0\n-E SPARC_RET_SINT16\n+E(SPARC_RET_SINT16)\n \tsll\t%o0, 16, %o0\n \tb\t7f\n \t sra\t%o0, 16, %o0\n-E SPARC_RET_UINT32\n+E(SPARC_RET_UINT32)\n 7:\tst\t%o0, [%i2]\n \tret\n \t restore\n-E SP_V8_RET_CPLX16\n+E(SP_V8_RET_CPLX16)\n \tsth\t%o0, [%i2+2]\n \tb\t9f\n \t srl\t%o0, 16, %o0\n-E SPARC_RET_INT64\n+E(SPARC_RET_INT64)\n \tst\t%o0, [%i2]\n \tst\t%o1, [%i2+4]\n \tret\n \t restore\n-E SPARC_RET_INT128\n+E(SPARC_RET_INT128)\n \tstd\t%o0, [%i2]\n \tstd\t%o2, [%i2+8]\n \tret\n \t restore\n-E SPARC_RET_F_8\n+E(SPARC_RET_F_8)\n \tst\t%f7, [%i2+7*4]\n \tnop\n \tst\t%f6, [%i2+6*4]\n \tnop\n-E SPARC_RET_F_6\n+E(SPARC_RET_F_6)\n \tst\t%f5, [%i2+5*4]\n \tnop\n \tst\t%f4, [%i2+4*4]\n \tnop\n-E SPARC_RET_F_4\n+E(SPARC_RET_F_4)\n \tst\t%f3, [%i2+3*4]\n \tnop\n \tst\t%f2, [%i2+2*4]\n \tnop\n-E SPARC_RET_F_2\n+E(SPARC_RET_F_2)\n \tst\t%f1, [%i2+4]\n \tst\t%f0, [%i2]\n \tret\n \t restore\n-E SP_V8_RET_CPLX8\n+E(SP_V8_RET_CPLX8)\n \tstb\t%o0, [%i2+1]\n-\tb\t10f\n+\tb\t0f\n \t srl\t%o0, 8, %o0\n-E SPARC_RET_F_1\n+E(SPARC_RET_F_1)\n \tst\t%f0, [%i2]\n \tret\n \t restore\n@@ -188,7 +190,7 @@ E SPARC_RET_F_1\n \tret\n \t restore\n \t.align\t8\n-10:\tstb\t%o0, [%i2]\n+0:\tstb\t%o0, [%i2]\n \tret\n \t restore\n \n@@ -201,17 +203,35 @@ E SPARC_RET_F_1\n \t sll\t%l1, 2, %l0\t\t\t! size * 4\n 1:\tsll\t%l1, 4, %l1\t\t\t! size * 16\n \tadd\t%l0, %l1, %l0\t\t\t! size * 20\n-\tadd\t%o7, %l0, %o7\t\t\t! o7 = 0b + size*20\n+\tadd\t%o7, %l0, %o7\t\t\t! o7 = 8b + size*20\n \tjmp\t%o7+(2f-8b)\n \t mov\t%i5, %g2\t\t\t! load static chain\n 2:\n-.rept\t0x1000\n-\tcall\t%i1\n-\t nop\n-\tunimp\t(. - 2b) / 20\n-\tret\n+\n+/* The Sun assembler doesn't understand .rept 0x1000.  */\n+#define rept1\t\t\t\\\n+\tcall\t%i1;\t\t\\\n+\t nop;\t\t\t\\\n+\tunimp\t(. - 2b) / 20;\t\\\n+\tret;\t\t\t\\\n \t restore\n-.endr\n+\n+#define rept16\t\t\t\t\\\n+\trept1; rept1; rept1; rept1;\t\\\n+\trept1; rept1; rept1; rept1;\t\\\n+\trept1; rept1; rept1; rept1;\t\\\n+\trept1; rept1; rept1; rept1\n+\n+#define rept256\t\t\t\t\\\n+\trept16; rept16; rept16; rept16;\t\\\n+\trept16; rept16; rept16; rept16;\t\\\n+\trept16; rept16; rept16; rept16;\t\\\n+\trept16; rept16; rept16; rept16\n+\n+\trept256; rept256; rept256; rept256\n+\trept256; rept256; rept256; rept256\n+\trept256; rept256; rept256; rept256\n+\trept256; rept256; rept256; rept256\n \n \tcfi_endproc\n \t.size\tC(ffi_call_v8),. - C(ffi_call_v8)\n@@ -231,14 +251,15 @@ E SPARC_RET_F_1\n \n \t.align 8\n \t.globl\tC(ffi_go_closure_v8)\n-\t.type\tC(ffi_go_closure_v8),@function\n+\t.type\tC(ffi_go_closure_v8),#function\n \tFFI_HIDDEN(C(ffi_go_closure_v8))\n \n C(ffi_go_closure_v8):\n \tcfi_startproc\n \tsave\t%sp, -STACKFRAME, %sp\n \tcfi_def_cfa_register(%fp)\n \tcfi_window_save\n+\tcfi_register(%o7, %i7)\n \n \tld\t[%g2+4], %o0\t\t\t! load cif\n \tld\t[%g2+8], %o1\t\t\t! load fun\n@@ -249,14 +270,15 @@ C(ffi_go_closure_v8):\n \n \t.align 8\n \t.globl\tC(ffi_closure_v8)\n-\t.type\tC(ffi_closure_v8),@function\n+\t.type\tC(ffi_closure_v8),#function\n \tFFI_HIDDEN(C(ffi_closure_v8))\n \n C(ffi_closure_v8):\n \tcfi_startproc\n \tsave\t%sp, -STACKFRAME, %sp\n \tcfi_def_cfa_register(%fp)\n \tcfi_window_save\n+\tcfi_register(%o7, %i7)\n \n \tld\t[%g2+FFI_TRAMPOLINE_SIZE], %o0\t\t! load cif\n \tld\t[%g2+FFI_TRAMPOLINE_SIZE+4], %o1\t! load fun\n@@ -285,70 +307,70 @@ C(ffi_closure_v8):\n \t! Note that each entry is 4 insns, enforced by the E macro.\n \t.align\t16\n 2:\n-E SPARC_RET_VOID\n+E(SPARC_RET_VOID)\n \tret\n \t restore\n-E SPARC_RET_STRUCT\n+E(SPARC_RET_STRUCT)\n \tld\t[%i2], %i0\n \tjmp\t%i7+12\n \t restore\n-E SPARC_RET_UINT8\n+E(SPARC_RET_UINT8)\n \tldub\t[%i2+3], %i0\n \tret\n \t restore\n-E SPARC_RET_SINT8\n+E(SPARC_RET_SINT8)\n \tldsb\t[%i2+3], %i0\n \tret\n \t restore\n-E SPARC_RET_UINT16\n+E(SPARC_RET_UINT16)\n \tlduh\t[%i2+2], %i0\n \tret\n \t restore\n-E SPARC_RET_SINT16\n+E(SPARC_RET_SINT16)\n \tldsh\t[%i2+2], %i0\n \tret\n \t restore\n-E SPARC_RET_UINT32\n+E(SPARC_RET_UINT32)\n \tld\t[%i2], %i0\n \tret\n \t restore\n-E SP_V8_RET_CPLX16\n+E(SP_V8_RET_CPLX16)\n \tld\t[%i2], %i0\n \tret\n \t restore\n-E SPARC_RET_INT64\n+E(SPARC_RET_INT64)\n \tldd\t[%i2], %i0\n \tret\n \t restore\n-E SPARC_RET_INT128\n+E(SPARC_RET_INT128)\n \tldd\t[%i2], %i0\n \tldd\t[%i2+8], %i2\n \tret\n \t restore\n-E SPARC_RET_F_8\n+E(SPARC_RET_F_8)\n \tld\t[%i2+7*4], %f7\n \tnop\n \tld\t[%i2+6*4], %f6\n \tnop\n-E SPARC_RET_F_6\n+E(SPARC_RET_F_6)\n \tld\t[%i2+5*4], %f5\n \tnop\n \tld\t[%i2+4*4], %f4\n \tnop\n-E SPARC_RET_F_4\n+E(SPARC_RET_F_4)\n \tld\t[%i2+3*4], %f3\n \tnop\n \tld\t[%i2+2*4], %f2\n \tnop\n-E SPARC_RET_F_2\n+E(SPARC_RET_F_2)\n \tldd\t[%i2], %f0\n \tret\n \t restore\n-E SP_V8_RET_CPLX8\n+E(SP_V8_RET_CPLX8)\n \tlduh\t[%i2], %i0\n \tret\n \t restore\n-E SPARC_RET_F_1\n+E(SPARC_RET_F_1)\n \tld\t[%i2], %f0\n \tret\n \t restore"}, {"sha": "05ef54c3e158eefa4cb9d880ef6bc110ef38e596", "filename": "libffi/src/sparc/v9.S", "status": "modified", "additions": 43, "deletions": 39, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2Fsrc%2Fsparc%2Fv9.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2Fsrc%2Fsparc%2Fv9.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsparc%2Fv9.S?ref=36035d796755d73bfb62b5b6c6afe19864016dd7", "patch": "@@ -42,24 +42,26 @@\n #endif\n #define L(Y)\tC1(.L, Y)\n \n-.macro E index\n-\t.align\t16\n-\t.org\t2b + \\index * 16\n-.endm\n+#if defined(__sun__) && defined(__svr4__)\n+# define E(INDEX)\t.align 16\n+#else\n+# define E(INDEX)\t.align 16; .org 2b + INDEX * 16\n+#endif\n \n #define STACK_BIAS 2047\n \n \t.text\n         .align 8\n \t.globl\tC(ffi_call_v9)\n-\t.type\tC(ffi_call_v9),@function\n+\t.type\tC(ffi_call_v9),#function\n \tFFI_HIDDEN(C(ffi_call_v9))\n \n C(ffi_call_v9):\n \tcfi_startproc\n \tsave\t%sp, %o4, %sp\n \tcfi_def_cfa_register(%fp)\n \tcfi_window_save\n+\tcfi_register(%o7, %i7)\n \t\n \tmov\t%i0, %o0\t\t\t! copy cif\n \tadd\t%sp, STACK_BIAS+128+48, %o1\t! load args area\n@@ -107,73 +109,73 @@ C(ffi_call_v9):\n \n \t.align\t16\n 2:\n-E SPARC_RET_VOID\n+E(SPARC_RET_VOID)\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_STRUCT\n+E(SPARC_RET_STRUCT)\n \tadd\t%sp, STACK_BIAS-64+128+48, %l2\n \tsub\t%sp, 64, %sp\n \tb\t8f\n \t stx\t%o0, [%l2]\n-E SPARC_RET_UINT8\n+E(SPARC_RET_UINT8)\n \tand\t%o0, 0xff, %i0\n \treturn\t%i7+8\n \t  stx\t%o0, [%o2]\n-E SPARC_RET_SINT8\n+E(SPARC_RET_SINT8)\n \tsll\t%o0, 24, %o0\n \tsra\t%o0, 24, %i0\n \treturn\t%i7+8\n \t stx\t%o0, [%o2]\n-E SPARC_RET_UINT16\n+E(SPARC_RET_UINT16)\n \tsll\t%o0, 16, %o0\n \tsrl\t%o0, 16, %i0\n \treturn\t%i7+8\n \t stx\t%o0, [%o2]\n-E SPARC_RET_SINT16\n+E(SPARC_RET_SINT16)\n \tsll\t%o0, 16, %o0\n \tsra\t%o0, 16, %i0\n \treturn\t%i7+8\n \t stx\t%o0, [%o2]\n-E SPARC_RET_UINT32\n+E(SPARC_RET_UINT32)\n \tsrl\t%o0, 0, %i0\n \treturn\t%i7+8\n \t stx\t%o0, [%o2]\n-E SP_V9_RET_SINT32\n+E(SP_V9_RET_SINT32)\n \tsra\t%o0, 0, %i0\n \treturn\t%i7+8\n \t stx\t%o0, [%o2]\n-E SPARC_RET_INT64\n+E(SPARC_RET_INT64)\n \tstx\t%o0, [%i2]\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_INT128\n+E(SPARC_RET_INT128)\n \tstx\t%o0, [%i2]\n \tstx\t%o1, [%i2+8]\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_F_8\n+E(SPARC_RET_F_8)\n \tst\t%f7, [%i2+7*4]\n \tnop\n \tst\t%f6, [%i2+6*4]\n \tnop\n-E SPARC_RET_F_6\n+E(SPARC_RET_F_6)\n \tst\t%f5, [%i2+5*4]\n \tnop\n \tst\t%f4, [%i2+4*4]\n \tnop\n-E SPARC_RET_F_4\n+E(SPARC_RET_F_4)\n \tstd\t%f2, [%i2+2*4]\n \treturn\t%i7+8\n \t std\t%f0, [%o2]\n-E SPARC_RET_F_2\n+E(SPARC_RET_F_2)\n \treturn\t%i7+8\n \t std\t%f0, [%o2]\n-E SP_V9_RET_F_3\n+E(SP_V9_RET_F_3)\n \tst\t%f2, [%i2+2*4]\n \tnop\n \tst\t%f1, [%i2+1*4]\n \tnop\n-E SPARC_RET_F_1\n+E(SPARC_RET_F_1)\n \treturn\t%i7+8\n \t st\t%f0, [%o2]\n \n@@ -213,14 +215,15 @@ E SPARC_RET_F_1\n \n \t.align 8\n \t.globl\tC(ffi_go_closure_v9)\n-\t.type\tC(ffi_go_closure_v9),@function\n+\t.type\tC(ffi_go_closure_v9),#function\n \tFFI_HIDDEN(C(ffi_go_closure_v9))\n \n C(ffi_go_closure_v9):\n \tcfi_startproc\n \tsave\t%sp, -STACKFRAME, %sp\n \tcfi_def_cfa_register(%fp)\n \tcfi_window_save\n+\tcfi_register(%o7, %i7)\n \n \tldx\t[%g5+8], %o0\n \tldx\t[%g5+16], %o1\n@@ -232,14 +235,15 @@ C(ffi_go_closure_v9):\n \n \t.align 8\n \t.globl\tC(ffi_closure_v9)\n-\t.type\tC(ffi_closure_v9),@function\n+\t.type\tC(ffi_closure_v9),#function\n \tFFI_HIDDEN(C(ffi_closure_v9))\n \n C(ffi_closure_v9):\n \tcfi_startproc\n \tsave\t%sp, -STACKFRAME, %sp\n \tcfi_def_cfa_register(%fp)\n \tcfi_window_save\n+\tcfi_register(%o7, %i7)\n \n \tldx\t[%g1+FFI_TRAMPOLINE_SIZE], %o0\n \tldx\t[%g1+FFI_TRAMPOLINE_SIZE+8], %o1\n@@ -289,72 +293,72 @@ C(ffi_closure_v9):\n \t! that is deallocated by the return.\n \t.align\t16\n 2:\n-E SPARC_RET_VOID\n+E(SPARC_RET_VOID)\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_STRUCT\n+E(SPARC_RET_STRUCT)\n \tldx\t[FP-160], %i0\n \tldd\t[FP-160], %f0\n \tb\t8f\n \t ldx\t[FP-152], %i1\n-E SPARC_RET_UINT8\n+E(SPARC_RET_UINT8)\n \tldub\t[FP-160+7], %i0\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_SINT8\n+E(SPARC_RET_SINT8)\n \tldsb\t[FP-160+7], %i0\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_UINT16\n+E(SPARC_RET_UINT16)\n \tlduh\t[FP-160+6], %i0\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_SINT16\n+E(SPARC_RET_SINT16)\n \tldsh\t[FP-160+6], %i0\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_UINT32\n+E(SPARC_RET_UINT32)\n \tlduw\t[FP-160+4], %i0\n \treturn\t%i7+8\n \t nop\n-E SP_V9_RET_SINT32\n+E(SP_V9_RET_SINT32)\n \tldsw\t[FP-160+4], %i0\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_INT64\n+E(SPARC_RET_INT64)\n \tldx\t[FP-160], %i0\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_INT128\n+E(SPARC_RET_INT128)\n \tldx\t[FP-160], %i0\n \tldx\t[FP-160+8], %i1\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_F_8\n+E(SPARC_RET_F_8)\n \tld\t[FP-160+7*4], %f7\n \tnop\n \tld\t[FP-160+6*4], %f6\n \tnop\n-E SPARC_RET_F_6\n+E(SPARC_RET_F_6)\n \tld\t[FP-160+5*4], %f5\n \tnop\n \tld\t[FP-160+4*4], %f4\n \tnop\n-E SPARC_RET_F_4\n+E(SPARC_RET_F_4)\n \tldd\t[FP-160], %f0\n \tldd\t[FP-160+8], %f2\n \treturn\t%i7+8\n \t nop\n-E SPARC_RET_F_2\n+E(SPARC_RET_F_2)\n \tldd\t[FP-160], %f0\n \treturn\t%i7+8\n \t nop\n-E SP_V9_RET_F_3\n+E(SP_V9_RET_F_3)\n \tld\t[FP-160+2*4], %f2\n \tnop\n \tld\t[FP-160+1*4], %f1\n \tnop\n-E SPARC_RET_F_1\n+E(SPARC_RET_F_1)\n \tld\t[FP-160], %f0\n \treturn\t%i7+8\n \t nop"}, {"sha": "78f245bda0762dee0f1074eaaad9e33ef918645b", "filename": "libffi/src/x86/sysv.S", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2Fsrc%2Fx86%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2Fsrc%2Fx86%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fsysv.S?ref=36035d796755d73bfb62b5b6c6afe19864016dd7", "patch": "@@ -65,7 +65,7 @@\n    actual table.  The entry points into the table are all 8 bytes.\n    The use of ORG asserts that we're at the correct location.  */\n /* ??? The clang assembler doesn't handle .org with symbolic expressions.  */\n-#if defined(__clang__) || defined(__APPLE__)\n+#if defined(__clang__) || defined(__APPLE__) || (defined (__sun__) && defined(__svr4__))\n # define E(BASE, X)\t.balign 8\n #else\n # define E(BASE, X)\t.balign 8; .org BASE + X * 8\n@@ -793,7 +793,7 @@ ENDF(C(ffi_closure_raw_THISCALL))\n         .section __TEXT,__textcoal_nt,coalesced,pure_instructions;\t\\\n         .weak_definition X;\t\t\t\t\t\t\\\n         .private_extern X\n-#elif defined __ELF__\n+#elif defined __ELF__ && !(defined(__sun__) && defined(__svr4__))\n # define COMDAT(X)\t\t\t\t\t\t\t\\\n \t.section .text.X,\"axG\",@progbits,X,comdat;\t\t\t\\\n \t.globl\tX;\t\t\t\t\t\t\t\\\n@@ -822,10 +822,12 @@ ENDF(C(__x86.get_pc_thunk.dx))\n #ifdef __APPLE__\n .section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n EHFrame0:\n+#elif defined(X86_WIN32)\n+.section .eh_frame,\"r\"\n #elif defined(HAVE_AS_X86_64_UNWIND_SECTION_TYPE)\n-.section .eh_frame,\"a\",@unwind\n+.section .eh_frame,EH_FRAME_FLAGS,@unwind\n #else\n-.section .eh_frame,\"a\",@progbits\n+.section .eh_frame,EH_FRAME_FLAGS,@progbits\n #endif\n \n #ifdef HAVE_AS_X86_PCREL"}, {"sha": "c83010c75b5f37afc430de8f3e3fdec1b3b231db", "filename": "libffi/src/x86/unix64.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2Fsrc%2Fx86%2Funix64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2Fsrc%2Fx86%2Funix64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Funix64.S?ref=36035d796755d73bfb62b5b6c6afe19864016dd7", "patch": "@@ -60,7 +60,7 @@\n    actual table.  The entry points into the table are all 8 bytes.\n    The use of ORG asserts that we're at the correct location.  */\n /* ??? The clang assembler doesn't handle .org with symbolic expressions.  */\n-#if defined(__clang__) || defined(__APPLE__)\n+#if defined(__clang__) || defined(__APPLE__) || (defined (__sun__) && defined(__svr4__))\n # define E(BASE, X)\t.balign 8\n #else\n # define E(BASE, X)\t.balign 8; .org BASE + X * 8"}, {"sha": "7da1621cd663c5d3ad421dda803bbb85a0597c4e", "filename": "libffi/testsuite/libffi.call/pr1172638.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2Ftestsuite%2Flibffi.call%2Fpr1172638.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36035d796755d73bfb62b5b6c6afe19864016dd7/libffi%2Ftestsuite%2Flibffi.call%2Fpr1172638.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fpr1172638.c?ref=36035d796755d73bfb62b5b6c6afe19864016dd7", "patch": "@@ -0,0 +1,127 @@\n+/* Area:\tffi_call\n+   Purpose:\tReproduce bug found in python ctypes\n+   Limitations:\tnone.\n+   PR:\t\tFedora 1174037  */\n+\n+/* { dg-do run } */\n+#include \"ffitest.h\"\n+\n+typedef struct {\n+  long x;\n+  long y;\n+} POINT;\n+\n+typedef struct {\n+  long left;\n+  long top;\n+  long right;\n+  long bottom;\n+} RECT;\n+\n+static RECT ABI_ATTR pr_test(int i __UNUSED__, RECT ar __UNUSED__, \n+\t\t\t     RECT* br __UNUSED__, POINT cp __UNUSED__, \n+\t\t\t     RECT dr __UNUSED__, RECT *er __UNUSED__, \n+\t\t\t     POINT fp, RECT gr __UNUSED__)\n+{\n+  RECT result;\n+\n+  result.left = fp.x;\n+  result.right = fp.y;\n+  result.top = fp.x;\n+  result.bottom = fp.y;\n+\n+  return result;\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+  ffi_type *args[MAX_ARGS];\n+  void *values[MAX_ARGS];\n+  ffi_type point_type, rect_type;\n+  ffi_type *point_type_elements[3];  \n+  ffi_type *rect_type_elements[5];  \n+  \n+  int i;\n+  POINT cp, fp;\n+  RECT ar, br, dr, er, gr; \n+  RECT *p1, *p2;\n+\n+  /* This is a hack to get a properly aligned result buffer */\n+  RECT *rect_result =\n+    (RECT *) malloc (sizeof(RECT));\n+\n+  point_type.size = 0;\n+  point_type.alignment = 0;\n+  point_type.type = FFI_TYPE_STRUCT;\n+  point_type.elements = point_type_elements;\n+  point_type_elements[0] = &ffi_type_slong;\n+  point_type_elements[1] = &ffi_type_slong;\n+  point_type_elements[2] = NULL;\n+\n+  rect_type.size = 0;\n+  rect_type.alignment = 0;\n+  rect_type.type = FFI_TYPE_STRUCT;\n+  rect_type.elements = rect_type_elements;\n+  rect_type_elements[0] = &ffi_type_slong;\n+  rect_type_elements[1] = &ffi_type_slong;\n+  rect_type_elements[2] = &ffi_type_slong;\n+  rect_type_elements[3] = &ffi_type_slong;\n+  rect_type_elements[4] = NULL;\n+\n+  args[0] = &ffi_type_sint;\n+  args[1] = &rect_type;\n+  args[2] = &ffi_type_pointer;\n+  args[3] = &point_type;\n+  args[4] = &rect_type;\n+  args[5] = &ffi_type_pointer;\n+  args[6] = &point_type;\n+  args[7] = &rect_type;\n+  \n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, ABI_NUM, 8, &rect_type, args) == FFI_OK);\n+\n+  i = 1;\n+  ar.left = 2;\n+  ar.right = 3;\n+  ar.top = 4;\n+  ar.bottom = 5;\n+  br.left = 6;\n+  br.right = 7;\n+  br.top = 8;\n+  br.bottom = 9;\n+  cp.x = 10;\n+  cp.y = 11;\n+  dr.left = 12;\n+  dr.right = 13;\n+  dr.top = 14;\n+  dr.bottom = 15;\n+  er.left = 16;\n+  er.right = 17;\n+  er.top = 18;\n+  er.bottom = 19;\n+  fp.x = 20;\n+  fp.y = 21;\n+  gr.left = 22;\n+  gr.right = 23;\n+  gr.top = 24;\n+  gr.bottom = 25;\n+  \n+  values[0] = &i;\n+  values[1] = &ar;\n+  p1 = &br;\n+  values[2] = &p1;\n+  values[3] = &cp;\n+  values[4] = &dr;\n+  p2 = &er;\n+  values[5] = &p2;\n+  values[6] = &fp;\n+  values[7] = &gr;\n+\n+  ffi_call (&cif, FFI_FN(pr_test), rect_result, values);\n+  \n+  CHECK(rect_result->top == 20);\n+ \n+  free (rect_result);\n+  exit(0);\n+}"}]}