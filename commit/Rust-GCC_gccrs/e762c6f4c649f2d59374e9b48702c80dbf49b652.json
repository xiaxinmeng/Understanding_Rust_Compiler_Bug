{"sha": "e762c6f4c649f2d59374e9b48702c80dbf49b652", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc2MmM2ZjRjNjQ5ZjJkNTkzNzRlOWI0ODcwMmM4MGRiZjQ5YjY1Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-04-24T09:35:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-04-24T09:35:19Z"}, "message": "array (at): Do not use builtin_expect.\n\n\t* include/tr1_impl/array (at): Do not use builtin_expect.\n\t* include/ext/throw_allocator.h (allocate): Likewise.\n\t* include/ext/pool_allocator.h (allocate): Likweise.\n\t* include/ext/bitmap_allocator.h (allocate): Likewise.\n\t* include/ext/rc_string_base.h (_S_construct): Likewise.\n\t* include/ext/malloc_allocator.h (allocate): Likewise.\n\t* include/ext/mt_allocator.h (allocate): Likewise.\n\t* include/ext/sso_string_base.h (_M_construct): Likewise.\n\t* include/bits/basic_string.tcc (_S_construct): Likewise.\n\nFrom-SVN: r146681", "tree": {"sha": "ca7fdfbd6a54e70c271f298827f42551d7baa40a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca7fdfbd6a54e70c271f298827f42551d7baa40a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e762c6f4c649f2d59374e9b48702c80dbf49b652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e762c6f4c649f2d59374e9b48702c80dbf49b652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e762c6f4c649f2d59374e9b48702c80dbf49b652", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e762c6f4c649f2d59374e9b48702c80dbf49b652/comments", "author": null, "committer": null, "parents": [{"sha": "aa829fa1ea55388cc933daf31b4bb648ffa360b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa829fa1ea55388cc933daf31b4bb648ffa360b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa829fa1ea55388cc933daf31b4bb648ffa360b2"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "a3901bc54581dfdcb7ee5c712e13a8aeda61c40b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -1,3 +1,15 @@\n+2009-04-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* include/tr1_impl/array (at): Do not use builtin_expect.\n+\t* include/ext/throw_allocator.h (allocate): Likewise.\n+\t* include/ext/pool_allocator.h (allocate): Likweise.\n+\t* include/ext/bitmap_allocator.h (allocate): Likewise.\n+\t* include/ext/rc_string_base.h (_S_construct): Likewise.\n+\t* include/ext/malloc_allocator.h (allocate): Likewise.\n+\t* include/ext/mt_allocator.h (allocate): Likewise.\n+\t* include/ext/sso_string_base.h (_M_construct): Likewise.\n+\t* include/bits/basic_string.tcc (_S_construct): Likewise.\n+\n 2009-04-22  Jan Hubicka  <jh@suse.cz>\n \n \t* include/c_std/cstdlib (abort, exit, _Exit): Mark noreturn throw ()."}, {"sha": "ec771c66859f7846672e9cc44ef9c2816f79f415", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -129,8 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  return _S_empty_rep()._M_refdata();\n #endif\n \t// NB: Not required, but considered best practice.\n-\tif (__builtin_expect(__gnu_cxx::__is_null_pointer(__beg)\n-\t\t\t     && __beg != __end, 0))\n+\tif (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)\n \t  __throw_logic_error(__N(\"basic_string::_S_construct NULL not valid\"));\n \n \tconst size_type __dnew = static_cast<size_type>(std::distance(__beg,"}, {"sha": "f6790d00043420dc644ba7c5e79cb107a58ab3b0", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -1049,7 +1049,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       pointer \n       allocate(size_type __n)\n       {\n-\tif (__builtin_expect(__n > this->max_size(), false))\n+\tif (__n > this->max_size())\n \t  std::__throw_bad_alloc();\n \n \tif (__builtin_expect(__n == 1, true))"}, {"sha": "b432c63a61eaf9189316908ac312874f2ac1b723", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       pointer\n       allocate(size_type __n, const void* = 0)\n       {\n-\tif (__builtin_expect(__n > this->max_size(), false))\n+\tif (__n > this->max_size())\n \t  std::__throw_bad_alloc();\n \n \tpointer __ret = static_cast<_Tp*>(std::malloc(__n * sizeof(_Tp)));"}, {"sha": "e44b98d4bf700a34b52883d185b8ff0756141188", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -674,7 +674,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     __mt_alloc<_Tp, _Poolp>::\n     allocate(size_type __n, const void*)\n     {\n-      if (__builtin_expect(__n > this->max_size(), false))\n+      if (__n > this->max_size())\n \tstd::__throw_bad_alloc();\n \n       __policy_type::_S_initialize_once();"}, {"sha": "51666c3c7fdef062ea1744c9490a5c9eb9a0c942", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -83,7 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       pointer\n       allocate(size_type __n, const void* = 0)\n       { \n-\tif (__builtin_expect(__n > this->max_size(), false))\n+\tif (__n > this->max_size())\n \t  std::__throw_bad_alloc();\n \n \treturn static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));"}, {"sha": "b1e61841c0a74116ce3a3574facfd310fcabf30d", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -200,7 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       pointer __ret = 0;\n       if (__builtin_expect(__n != 0, true))\n \t{\n-\t  if (__builtin_expect(__n > this->max_size(), false))\n+\t  if (__n > this->max_size())\n \t    std::__throw_bad_alloc();\n \n \t  // If there is a race through here, assume answer from getenv\n@@ -230,7 +230,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t  *__free_list = __result->_M_free_list_link;\n \t\t  __ret = reinterpret_cast<_Tp*>(__result);\n \t\t}\n-\t      if (__builtin_expect(__ret == 0, 0))\n+\t      if (__ret == 0)\n \t\tstd::__throw_bad_alloc();\n \t    }\n \t}"}, {"sha": "6d8c430d57503e718a0958fea04cadb291c7baab", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -546,7 +546,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  return _S_empty_rep._M_refcopy();\n \n \t// NB: Not required, but considered best practice.\n-\tif (__builtin_expect(__is_null_pointer(__beg) && __beg != __end, 0))\n+\tif (__is_null_pointer(__beg) && __beg != __end)\n \t  std::__throw_logic_error(__N(\"__rc_string_base::\"\n \t\t\t\t       \"_S_construct NULL not valid\"));\n "}, {"sha": "6d2af7c46dd658f223546b3ba6ac37f84e99d7d5", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -428,7 +428,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t   std::forward_iterator_tag)\n       {\n \t// NB: Not required, but considered best practice.\n-\tif (__builtin_expect(__is_null_pointer(__beg) && __beg != __end, 0))\n+\tif (__is_null_pointer(__beg) && __beg != __end)\n \t  std::__throw_logic_error(__N(\"__sso_string_base::\"\n \t\t\t\t       \"_M_construct NULL not valid\"));\n "}, {"sha": "1303054694352722f7f5a3f1d8df4954d1f86717", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -220,7 +220,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       pointer\n       allocate(size_type __n, std::allocator<void>::const_pointer hint = 0)\n       {\n-\tif (__builtin_expect(__n > this->max_size(), false))\n+\tif (__n > this->max_size())\n \t  std::__throw_bad_alloc();\n \n \tthrow_conditionally();"}, {"sha": "7cd3db3d0f904b1bc18dd7a03d73859bf2867a50", "filename": "libstdc++-v3/include/tr1_impl/array", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e762c6f4c649f2d59374e9b48702c80dbf49b652/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray?ref=e762c6f4c649f2d59374e9b48702c80dbf49b652", "patch": "@@ -149,15 +149,15 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       reference\n       at(size_type __n)\n       {\n-\tif (__builtin_expect(__n >= _Nm, false))\n+\tif (__n >= _Nm)\n \t  std::__throw_out_of_range(__N(\"array::at\"));\n \treturn _M_instance[__n];\n       }\n \n       const_reference\n       at(size_type __n) const\n       {\n-\tif (__builtin_expect(__n >= _Nm, false))\n+\tif (__n >= _Nm)\n \t  std::__throw_out_of_range(__N(\"array::at\"));\n \treturn _M_instance[__n];\n       }"}]}