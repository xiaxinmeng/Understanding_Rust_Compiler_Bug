{"sha": "00d0458c03fc77ca4d52412d47b23a09106e3696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkMDQ1OGMwM2ZjNzdjYTRkNTI0MTJkNDdiMjNhMDkxMDZlMzY5Ng==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-07-20T19:43:19Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-07-20T19:43:19Z"}, "message": "m68hc11.md (\"movdi\", [...]): Use an expand to emit the pattern; put a REG_INC note for push/pop instructions.\n\n\t* config/m68hc11/m68hc11.md (\"movdi\", \"movdi_internal\"): Use an\n\texpand to emit the pattern; put a REG_INC note for push/pop\n\tinstructions.\n\t(\"movdf\", \"movdf_internal\"): Likewise.\n\t(\"movsi\", \"movsi_internal\"): Likewise.\n\t(\"movsf\", \"movsf_internal\"): Likewise.\n\t(\"movhi\", \"movqi\"): Emit a REG_INC note for push/pop instructions.\n\nFrom-SVN: r44208", "tree": {"sha": "20da3a6c69f1acd78c0d9a9f358a4b17371f1281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20da3a6c69f1acd78c0d9a9f358a4b17371f1281"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d0458c03fc77ca4d52412d47b23a09106e3696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d0458c03fc77ca4d52412d47b23a09106e3696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d0458c03fc77ca4d52412d47b23a09106e3696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d0458c03fc77ca4d52412d47b23a09106e3696/comments", "author": null, "committer": null, "parents": [{"sha": "d74e9142ac9b840a314530dc25d91df22f9170db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74e9142ac9b840a314530dc25d91df22f9170db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74e9142ac9b840a314530dc25d91df22f9170db"}], "stats": {"total": 127, "additions": 122, "deletions": 5}, "files": [{"sha": "b73cd6657d1849cb7154706846a2f386b96e9076", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d0458c03fc77ca4d52412d47b23a09106e3696/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d0458c03fc77ca4d52412d47b23a09106e3696/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00d0458c03fc77ca4d52412d47b23a09106e3696", "patch": "@@ -1,3 +1,13 @@\n+2001-07-20  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"movdi\", \"movdi_internal\"): Use an\n+\texpand to emit the pattern; put a REG_INC note for push/pop \n+\tinstructions.\n+\t(\"movdf\", \"movdf_internal\"): Likewise.\n+\t(\"movsi\", \"movsi_internal\"): Likewise.\n+\t(\"movsf\", \"movsf_internal\"): Likewise.\n+\t(\"movhi\", \"movqi\"): Emit a REG_INC note for push/pop instructions.\n+\n 2001-07-20  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.c (m68hc11_gen_highpart): Don't use"}, {"sha": "e75f1add31db12585ccc8a73d50c7e65e844478d", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 112, "deletions": 5, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d0458c03fc77ca4d52412d47b23a09106e3696/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d0458c03fc77ca4d52412d47b23a09106e3696/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=00d0458c03fc77ca4d52412d47b23a09106e3696", "patch": "@@ -587,7 +587,28 @@\n ;; The insn will be split in one or several memory moves (movw).\n ;; [SCz: this does not work ?? So, I switched temporary to 'd' reg]\n ;;--------------------------------------------------------------------\n-(define_insn \"movdi\"\n+(define_expand \"movdi\"\n+  [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+\t\t   (match_operand:DI 1 \"general_operand\" \"\"))\n+\t      (clobber (match_scratch:HI 2 \"\"))])]\n+  \"\"\n+  \"\n+  /* For push/pop, emit a REG_INC note to make sure the reload\n+     inheritance and reload CSE pass notice the change of the stack\n+     pointer.  */\n+  if (IS_STACK_PUSH (operands[0]) || IS_STACK_POP (operands[1]))\n+    {\n+      rtx insn;\n+\n+      insn = emit_insn (gen_movdi_internal (operands[0], operands[1]));\n+      REG_NOTES (insn) = alloc_EXPR_LIST (REG_INC,\n+\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t  REG_NOTES (insn));\n+      DONE;\n+    }\n+\")\n+\n+(define_insn \"movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=U,!u,U,m,m,!u\")\n \t(match_operand:DI 1 \"general_operand\" \"iU,iU,!u,mi,!u,!mu\"))\n    (clobber (match_scratch:HI 2 \"=&d,&d,&d,&d,&d,&d\"))]\n@@ -603,7 +624,27 @@\n   \"m68hc11_split_move (operands[0], operands[1], operands[2]);\n    DONE;\")\n \n-(define_insn \"movdf\"\n+(define_expand \"movdf\"\n+  [(parallel [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n+\t\t   (match_operand:DF 1 \"general_operand\" \"\"))\n+\t      (clobber (match_scratch:HI 2 \"\"))])]\n+  \"\"\n+  \"/* For push/pop, emit a REG_INC note to make sure the reload\n+      inheritance and reload CSE pass notice the change of the stack\n+      pointer.  */\n+  if (IS_STACK_PUSH (operands[0]) || IS_STACK_POP (operands[1]))\n+    {\n+      rtx insn;\n+\n+      insn = emit_insn (gen_movdf_internal (operands[0], operands[1]));\n+      REG_NOTES (insn) = alloc_EXPR_LIST (REG_INC,\n+\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t  REG_NOTES (insn));\n+      DONE;\n+    }\n+\")\n+\n+(define_insn \"movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=U,!u,U,m,m,!u\")\n \t(match_operand:DF 1 \"general_operand\" \"iU,iU,!u,mi,!u,!mu\"))\n    (clobber (match_scratch:HI 2 \"=&d,&d,&d,&d,&d,&d\"))]\n@@ -618,7 +659,7 @@\n   [(const_int 0)]\n   \"m68hc11_split_move (operands[0], operands[1], operands[2]);\n    DONE;\")\n-   \n+\n ;;--------------------------------------------------------------------\n ;;- 32-bit Move Operations.\n ;; The movsi and movsf patterns are identical except for the mode.\n@@ -628,7 +669,27 @@\n ;; pass does not give us a register that dies in the insn and is used\n ;; for input/output operands.\n ;;--------------------------------------------------------------------\n-(define_insn \"movsi\"\n+(define_expand \"movsi\"\n+  [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t\t   (match_operand:SI 1 \"general_operand\" \"\"))\n+\t      (clobber (match_scratch:HI 2 \"\"))])]\n+  \"\"\n+  \"/* For push/pop, emit a REG_INC note to make sure the reload\n+      inheritance and reload CSE pass notice the change of the stack\n+      pointer.  */\n+  if (IS_STACK_PUSH (operands[0]) || IS_STACK_POP (operands[1]))\n+    {\n+      rtx insn;\n+\n+      insn = emit_insn (gen_movsi_internal (operands[0], operands[1]));\n+      REG_NOTES (insn) = alloc_EXPR_LIST (REG_INC,\n+\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t  REG_NOTES (insn));\n+      DONE;\n+    }\n+\")\n+\n+(define_insn \"movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=mu,?D,m,?D,?u,?u,!u,D\")\n \t(match_operand:SI 1 \"general_operand\"      \"imu,im,?D,!u,?D,mi,!u,!D\"))\n    (clobber (match_scratch:HI 2                    \"=&d,X,X,X,X,&d,&d,X\"))]\n@@ -644,7 +705,27 @@\n   \"m68hc11_split_move (operands[0], operands[1], operands[2]);\n    DONE;\")\n \n-(define_insn \"movsf\"\n+(define_expand \"movsf\"\n+  [(parallel [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n+\t\t   (match_operand:SF 1 \"general_operand\" \"\"))\n+\t      (clobber (match_scratch:HI 2 \"\"))])]\n+  \"\"\n+  \"/* For push/pop, emit a REG_INC note to make sure the reload\n+      inheritance and reload CSE pass notice the change of the stack\n+      pointer.  */\n+  if (IS_STACK_PUSH (operands[0]) || IS_STACK_POP (operands[1]))\n+    {\n+      rtx insn;\n+\n+      insn = emit_insn (gen_movsf_internal (operands[0], operands[1]));\n+      REG_NOTES (insn) = alloc_EXPR_LIST (REG_INC,\n+\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t  REG_NOTES (insn));\n+      DONE;\n+    }\n+\")\n+\n+(define_insn \"movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,D,m,D,!u,!u,!u,D\")\n \t(match_operand:SF 1 \"general_operand\" \"im,im,D,!u,D,mi,!u,!D\"))\n    (clobber (match_scratch:HI 2 \"=&d,X,X,X,X,&d,&d,X\"))]\n@@ -739,6 +820,19 @@\n \t  operands[1] = force_reg (HImode, operands[1]);\n         }\n     }\n+  /* For push/pop, emit a REG_INC note to make sure the reload\n+     inheritance and reload CSE pass notice the change of the stack\n+     pointer.  */\n+  if (IS_STACK_PUSH (operands[0]) || IS_STACK_POP (operands[1]))\n+    {\n+      rtx insn;\n+\n+      insn = emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+      REG_NOTES (insn) = alloc_EXPR_LIST (REG_INC,\n+\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t  REG_NOTES (insn));\n+      DONE;\n+    }\n }\")\n \n (define_insn \"movhi_const0\"\n@@ -866,6 +960,19 @@\n \t  operands[1] = force_reg (QImode, operands[1]);\n         }\n     }\n+  /* For push/pop, emit a REG_INC note to make sure the reload\n+     inheritance and reload CSE pass notice the change of the stack\n+     pointer.  */\n+  if (IS_STACK_PUSH (operands[0]) || IS_STACK_POP (operands[1]))\n+    {\n+      rtx insn;\n+\n+      insn = emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+      REG_NOTES (insn) = alloc_EXPR_LIST (REG_INC,\n+\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t  REG_NOTES (insn));\n+      DONE;\n+    }\n }\")\n \n (define_insn \"*movqi_68hc12\""}]}