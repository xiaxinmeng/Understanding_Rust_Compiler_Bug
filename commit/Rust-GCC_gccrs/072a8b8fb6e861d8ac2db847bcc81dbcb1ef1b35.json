{"sha": "072a8b8fb6e861d8ac2db847bcc81dbcb1ef1b35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcyYThiOGZiNmU4NjFkOGFjMmRiODQ3YmNjODFkYmNiMWVmMWIzNQ==", "commit": {"author": {"name": "xiezhiheng", "email": "xiezhiheng@huawei.com", "date": "2020-07-31T08:52:25Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-31T08:52:25Z"}, "message": "AArch64: Add attributes according to flags in built-in functions [PR94442]\n\n2020-07-31  Zhiheng Xie  <xiezhiheng@huawei.com>\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c (aarch64_general_add_builtin):\n\tAdd new argument ATTRS.\n\t(aarch64_call_properties): New function.\n\t(aarch64_modifies_global_state_p): Likewise.\n\t(aarch64_reads_global_state_p): Likewise.\n\t(aarch64_could_trap_p): Likewise.\n\t(aarch64_add_attribute): Likewise.\n\t(aarch64_get_attributes): Likewise.\n\t(aarch64_init_simd_builtins): Add attributes for each built-in function.", "tree": {"sha": "0eed73839f7a89e49f2b2c33493baa8c6bf8c92b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eed73839f7a89e49f2b2c33493baa8c6bf8c92b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/072a8b8fb6e861d8ac2db847bcc81dbcb1ef1b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072a8b8fb6e861d8ac2db847bcc81dbcb1ef1b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/072a8b8fb6e861d8ac2db847bcc81dbcb1ef1b35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072a8b8fb6e861d8ac2db847bcc81dbcb1ef1b35/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1212cfad09378bc85860a7de22dde0cf7a19fd01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1212cfad09378bc85860a7de22dde0cf7a19fd01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1212cfad09378bc85860a7de22dde0cf7a19fd01"}], "stats": {"total": 121, "additions": 116, "deletions": 5}, "files": [{"sha": "892ef9495e1070e0cf31dc9239bb1d8b1e38eb6b", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 116, "deletions": 5, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072a8b8fb6e861d8ac2db847bcc81dbcb1ef1b35/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072a8b8fb6e861d8ac2db847bcc81dbcb1ef1b35/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=072a8b8fb6e861d8ac2db847bcc81dbcb1ef1b35", "patch": "@@ -628,14 +628,16 @@ tree aarch64_bf16_type_node = NULL_TREE;\n tree aarch64_bf16_ptr_type_node = NULL_TREE;\n \n /* Wrapper around add_builtin_function.  NAME is the name of the built-in\n-   function, TYPE is the function type, and CODE is the function subcode\n-   (relative to AARCH64_BUILTIN_GENERAL).  */\n+   function, TYPE is the function type, CODE is the function subcode\n+   (relative to AARCH64_BUILTIN_GENERAL), and ATTRS is the function\n+   attributes.  */\n static tree\n-aarch64_general_add_builtin (const char *name, tree type, unsigned int code)\n+aarch64_general_add_builtin (const char *name, tree type, unsigned int code,\n+\t\t\t     tree attrs = NULL_TREE)\n {\n   code = (code << AARCH64_BUILTIN_SHIFT) | AARCH64_BUILTIN_GENERAL;\n   return add_builtin_function (name, type, code, BUILT_IN_MD,\n-\t\t\t       NULL, NULL_TREE);\n+\t\t\t       NULL, attrs);\n }\n \n static const char *\n@@ -892,6 +894,113 @@ aarch64_init_simd_builtin_scalar_types (void)\n \t\t\t\t\t     \"__builtin_aarch64_simd_udi\");\n }\n \n+/* Return a set of FLAG_* flags that describe what the function could do,\n+   taking the command-line flags into account.  */\n+static unsigned int\n+aarch64_call_properties (aarch64_simd_builtin_datum *d)\n+{\n+  unsigned int flags = d->flags;\n+  switch (d->mode)\n+    {\n+    /* Floating-point.  */\n+    case E_BFmode:\n+    case E_V4BFmode:\n+    case E_V8BFmode:\n+    case E_HFmode:\n+    case E_V4HFmode:\n+    case E_V8HFmode:\n+    case E_SFmode:\n+    case E_V2SFmode:\n+    case E_V4SFmode:\n+    case E_DFmode:\n+    case E_V1DFmode:\n+    case E_V2DFmode:\n+      flags |= FLAG_FP;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  /* -fno-trapping-math means that we can assume any FP exceptions\n+     are not user-visible.  */\n+  if (!flag_trapping_math)\n+    flags &= ~FLAG_RAISE_FP_EXCEPTIONS;\n+\n+  return flags;\n+}\n+\n+/* Return true if calls to the function could modify some form of\n+   global state.  */\n+static bool\n+aarch64_modifies_global_state_p (aarch64_simd_builtin_datum *d)\n+{\n+  unsigned int flags = aarch64_call_properties (d);\n+\n+  if (flags & FLAG_RAISE_FP_EXCEPTIONS)\n+    return true;\n+\n+  if (flags & FLAG_PREFETCH_MEMORY)\n+    return true;\n+\n+  return flags & FLAG_WRITE_MEMORY;\n+}\n+\n+/* Return true if calls to the function could read some form of\n+   global state.  */\n+static bool\n+aarch64_reads_global_state_p (aarch64_simd_builtin_datum *d)\n+{\n+  unsigned int flags = aarch64_call_properties (d);\n+\n+  if (flags & FLAG_READ_FPCR)\n+    return true;\n+\n+  return flags & FLAG_READ_MEMORY;\n+}\n+\n+/* Return true if calls to the function could raise a signal.  */\n+static bool\n+aarch64_could_trap_p (aarch64_simd_builtin_datum *d)\n+{\n+  unsigned int flags = aarch64_call_properties (d);\n+\n+  if (flags & FLAG_RAISE_FP_EXCEPTIONS)\n+    return true;\n+\n+  if (flags & (FLAG_READ_MEMORY | FLAG_WRITE_MEMORY))\n+    return true;\n+\n+  return false;\n+}\n+\n+/* Add attribute NAME to ATTRS.  */\n+static tree\n+aarch64_add_attribute (const char *name, tree attrs)\n+{\n+  return tree_cons (get_identifier (name), NULL_TREE, attrs);\n+}\n+\n+/* Return the appropriate function attributes.  */\n+static tree\n+aarch64_get_attributes (aarch64_simd_builtin_datum *d)\n+{\n+  tree attrs = NULL_TREE;\n+\n+  if (!aarch64_modifies_global_state_p (d))\n+    {\n+      if (aarch64_reads_global_state_p (d))\n+\tattrs = aarch64_add_attribute (\"pure\", attrs);\n+      else\n+\tattrs = aarch64_add_attribute (\"const\", attrs);\n+    }\n+\n+  if (!flag_non_call_exceptions || !aarch64_could_trap_p (d))\n+    attrs = aarch64_add_attribute (\"nothrow\", attrs);\n+\n+  return aarch64_add_attribute (\"leaf\", attrs);\n+}\n+\n static bool aarch64_simd_builtins_initialized_p = false;\n \n /* Due to the architecture not providing lane variant of the lane instructions\n@@ -1045,7 +1154,9 @@ aarch64_init_simd_builtins (void)\n \tsnprintf (namebuf, sizeof (namebuf), \"__builtin_aarch64_%s\",\n \t\t  d->name);\n \n-      fndecl = aarch64_general_add_builtin (namebuf, ftype, fcode);\n+      tree attrs = aarch64_get_attributes (d);\n+\n+      fndecl = aarch64_general_add_builtin (namebuf, ftype, fcode, attrs);\n       aarch64_builtin_decls[fcode] = fndecl;\n     }\n "}]}