{"sha": "8bcefb43ccfaf402c35312dd06c234e2ec975656", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjZWZiNDNjY2ZhZjQwMmMzNTMxMmRkMDZjMjM0ZTJlYzk3NTY1Ng==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-10-23T17:13:18Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-10-23T17:13:18Z"}, "message": "langhooks.h (struct lang_hooks_for_tree_inlining): Add var_mod_type_p.\n\n\t* langhooks.h (struct lang_hooks_for_tree_inlining): Add\n\tvar_mod_type_p.\n\t* langhooks-def.h: Default for tree_inlining.var_mod_type_p is\n\thook_tree_bool_false.\n\n\t* tree.c (variably_modified_type_p): Moved here from\n\tcp/tree.c.  Use lang_hooks.tree_inlining.var_mod_type_p for\n\tlanguage-specific cases.  Due to this, must weaken some 'if\n\tand only if' checks to merely 'if'.\n\t* tree.h: Prototype variably_modified_type_p.\n\n\t* tree-inline.c (walk_tree): #undef WALK_SUBTREE_TAIL at end.\n\ncp:\n\t* cp-lang.c (cp_var_mod_type_p): New: C++ hook for\n\tvariably_modified_type_p.\n\t* cp-tree.h: Remove prototype of variably_modified_type_p.\n\t* tree.c (variably_modified_type_p): Remove; now implemented\n\tin language-independent code.\n\nFrom-SVN: r58460", "tree": {"sha": "8f64273fe292a54b0d5d5c23aa635d97a7aba7d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f64273fe292a54b0d5d5c23aa635d97a7aba7d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bcefb43ccfaf402c35312dd06c234e2ec975656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcefb43ccfaf402c35312dd06c234e2ec975656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bcefb43ccfaf402c35312dd06c234e2ec975656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcefb43ccfaf402c35312dd06c234e2ec975656/comments", "author": null, "committer": null, "parents": [{"sha": "09c68baa38cc66400b8bdb86137d8c6e1b0e663e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09c68baa38cc66400b8bdb86137d8c6e1b0e663e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09c68baa38cc66400b8bdb86137d8c6e1b0e663e"}], "stats": {"total": 190, "additions": 116, "deletions": 74}, "files": [{"sha": "114106377abc0a5c59c0c64e0987de1c5ceca1d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bcefb43ccfaf402c35312dd06c234e2ec975656", "patch": "@@ -1,3 +1,18 @@\n+2002-10-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* langhooks.h (struct lang_hooks_for_tree_inlining): Add\n+\tvar_mod_type_p.\n+\t* langhooks-def.h: Default for tree_inlining.var_mod_type_p is\n+\thook_tree_bool_false.\n+\n+\t* tree.c (variably_modified_type_p): Moved here from\n+\tcp/tree.c.  Use lang_hooks.tree_inlining.var_mod_type_p for\n+\tlanguage-specific cases.  Due to this, must weaken some 'if\n+\tand only if' checks to merely 'if'.\n+\t* tree.h: Prototype variably_modified_type_p.\n+\n+\t* tree-inline.c (walk_tree): #undef WALK_SUBTREE_TAIL at end.\n+\n 2002-10-23  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/linux.h (CC1_SPEC, CC1PLUS_SPEC): Remove.\n@@ -9,7 +24,7 @@\n \t(\"*movdi_lhi\", \"*movdi_lli\", \"*movdi_larl\"): Likewise.\n \t(\"movsi\", \"*movsi_lhi\", \"*movsi_lli\"): Likewise.\n \t(movdi_31, movdf_31 splitters): Likewise.\n-\t\n+\n \t* config/s390/s390.h (IEEE_FLOAT): Remove.\n \t(TARGET_FLOAT_FORMAT): Define in terms of TARGET_IEEE_FLOAT.\n \t(INT_REGNO_P): Rename to ...\n@@ -33,7 +48,7 @@\n \n 2002-10-23  Ulrich Weigand  <uweigand@de.ibm.com>\n \n-\t* libgcc2.c (__udiv_w_sdiv): Use attribute ((always_inline)) when \n+\t* libgcc2.c (__udiv_w_sdiv): Use attribute ((always_inline)) when\n \tinlining it into other libgcc2 routines.\n \t(__udivmoddi4): Likewise.\n \n@@ -100,7 +115,7 @@ Wed Oct 23 01:52:36 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t* config/rs6000/xcoff.h (ASM_DECLARE_FUNCTION_NAME): Don't call\n \txcoffout_declare_function when using rs6000_output_mi_thunk.\n \n-\t* config/s390/s390.c (s390_output_mi_thunk): Rename from \n+\t* config/s390/s390.c (s390_output_mi_thunk): Rename from\n \ts390_output_mi_vcall_thunk.\n \t(TARGET_ASM_OUTPUT_MI_THUNK): Remove.\n \t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n@@ -230,7 +245,7 @@ Tue Oct 22 00:04:20 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-10-21  Dale Johannesen  <dalej@apple.com>\n \n-        * config/rs6000/rs6000.c (rs6000_reverse_condition): Handle\n+\t* config/rs6000/rs6000.c (rs6000_reverse_condition): Handle\n \t    unsafe math reversals correctly for RTL generation.\n \t  (output_cbranch):  Replace rs6000_reverse_condition call\n \t    by its former definition.\n@@ -396,7 +411,7 @@ Tue Oct 22 00:04:20 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t-fsched-verbose=n, -fno-branch-count-reg and -fbounds-check.\n \n 2002-10-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n-            Mark Mitchell  <mark@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n \n \t* alpha-protos.h (alpha_output_mi_thunk_osf): Update signature to\n \tmatch target.h.\n@@ -466,7 +481,7 @@ Sun Oct 20 00:31:31 CEST 2002  Jan Hubicka  <jh@suse.cz>\n 2002-10-19  Sebastian Pop  <s.pop@laposte.net>\n \n \t* dependence.c : Removed.\n-        * Makefile.in : Remove dependence.o.\n+\t* Makefile.in : Remove dependence.o.\n \n Sat Oct 19 10:46:52 CEST 2002  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "d6f7be711d9388f830d9f9506d6b75f90bd86673", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8bcefb43ccfaf402c35312dd06c234e2ec975656", "patch": "@@ -1,3 +1,11 @@\n+2002-10-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* cp-lang.c (cp_var_mod_type_p): New: C++ hook for\n+\tvariably_modified_type_p.\n+\t* cp-tree.h: Remove prototype of variably_modified_type_p.\n+\t* tree.c (variably_modified_type_p): Remove; now implemented\n+\tin language-independent code.\n+\n 2002-10-22  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/6579\n@@ -37,7 +45,7 @@\n \t* method.c (use_thunk): Compute the vcall index as a HOST_WIDE_INT.\n \t* optimize.c (optimize_function): Replace ASM_OUTPUT_MI_THUNK with\n \tTARGET_ASM_OUTPUT_MI_THUNK in comments.\n-\t\n+\n 2002-10-18  Zack Weinberg  <zack@codesourcery.com>\n \n \t* decl.c (start_decl): Point users of the old initialized-"}, {"sha": "d89fb635d0ae748b988fb5197968141fbab183ec", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=8bcefb43ccfaf402c35312dd06c234e2ec975656", "patch": "@@ -32,6 +32,7 @@ static HOST_WIDE_INT cxx_get_alias_set PARAMS ((tree));\n static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n static bool cxx_warn_unused_global_decl PARAMS ((tree));\n static tree cp_expr_size PARAMS ((tree));\n+static bool cp_var_mod_type_p PARAMS ((tree));\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU C++\"\n@@ -126,6 +127,8 @@ static tree cp_expr_size PARAMS ((tree));\n   cp_convert_parm_for_inlining\n #undef LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P\n #define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P anon_aggr_type_p\n+#undef LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P\n+#define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P cp_var_mod_type_p\n #undef LANG_HOOKS_TREE_INLINING_START_INLINING\n #define LANG_HOOKS_TREE_INLINING_START_INLINING cp_start_inlining\n #undef LANG_HOOKS_TREE_INLINING_END_INLINING\n@@ -310,3 +313,21 @@ cp_expr_size (exp)\n     /* Use the default code.  */\n     return lhd_expr_size (exp);\n }\n+\n+/* Returns true if T is a variably modified type, in the sense of C99.\n+   This routine needs only check cases that cannot be handled by the\n+   language-independent logic in tree-inline.c.  */\n+\n+static bool\n+cp_var_mod_type_p (tree type)\n+{\n+  /* If TYPE is a pointer-to-member, it is variably modified if either\n+     the class or the member are variably modified.  */\n+  if (TYPE_PTRMEM_P (type) || TYPE_PTRMEMFUNC_P (type))\n+    return (variably_modified_type_p (TYPE_PTRMEM_CLASS_TYPE (type))\n+\t    || variably_modified_type_p (TYPE_PTRMEM_POINTED_TO_TYPE (type)));\n+\n+  /* All other types are not variably modified.  */\n+  return false;\n+}\n+"}, {"sha": "364b545c2f13c0724e2140bf56b845ced9f4b6a7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8bcefb43ccfaf402c35312dd06c234e2ec975656", "patch": "@@ -4191,7 +4191,6 @@ extern tree cxx_unsave_expr_now\t\t\tPARAMS ((tree));\n extern tree cxx_maybe_build_cleanup\t\tPARAMS ((tree));\n extern void init_tree\t\t\t        PARAMS ((void));\n extern int pod_type_p\t\t\t\tPARAMS ((tree));\n-extern bool variably_modified_type_p            (tree);\n extern int zero_init_p\t\t\t\tPARAMS ((tree));\n extern tree canonical_type_variant              PARAMS ((tree));\n extern void unshare_base_binfos\t\t\tPARAMS ((tree));"}, {"sha": "4b1142b11545a62851892cb6b2e7d888ba4ddd80", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8bcefb43ccfaf402c35312dd06c234e2ec975656", "patch": "@@ -1958,72 +1958,6 @@ pod_type_p (t)\n   return 1;\n }\n \n-/* Returns true if T is a variably modified type, in the sense of\n-   C99.\n-\n-   In C99, a struct type is never variably modified because a VLA may\n-   not appear as a structure member.  However, in GNU C code like:\n-    \n-     struct S { int i[f()]; };\n-\n-   is valid.  Even though GNU C++ does not allow that, this function\n-   may sometimes be used in the C front end, so it treats any type\n-   with variable size in the same way that C99 treats VLAs.\n-\n-   In particular, a variably modified type is one that involves a type\n-   with variable size.  */\n-\n-bool\n-variably_modified_type_p (tree type)\n-{\n-  /* If TYPE itself has variable size, it is variably modified.  \n-\n-     We do not yet have a representation of the C99 '[*]' syntax.\n-     When a representation is chosen, this function should be modified\n-     to test for that case as well.  */\n-  if (TYPE_SIZE (type) \n-      && TYPE_SIZE (type) != error_mark_node\n-      && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n-    return true;\n-\n-  /* If TYPE is a pointer or reference, it is variably modified if and\n-     only if the type pointed to is variably modified.  */\n-  if (TYPE_PTR_P (type)\n-      || TREE_CODE (type) == REFERENCE_TYPE)\n-    return variably_modified_type_p (TREE_TYPE (type));\n-  \n-  /* If TYPE is an array, it is variably modified if the array\n-     elements are.  (Note that the VLA case has alredy been checked\n-     above).  */\n-  if (TREE_CODE (type) == ARRAY_TYPE)\n-    return variably_modified_type_p (TREE_TYPE (type));\n-\n-  /* If TYPE is a pointer-to-member, it is variably modified if either\n-     the class or the member are variably modified.  */\n-  if (TYPE_PTRMEM_P (type) || TYPE_PTRMEMFUNC_P (type))\n-    return (variably_modified_type_p (TYPE_PTRMEM_CLASS_TYPE (type))\n-\t    || variably_modified_type_p (TYPE_PTRMEM_POINTED_TO_TYPE (type)));\n-\n-  /* If TYPE Is a function type, it is variably modified if any of the\n-     parameters or the return type are variably modified.  */\n-  if (TREE_CODE (type) == FUNCTION_TYPE\n-      || TREE_CODE (type) == METHOD_TYPE)\n-    {\n-      tree parm;\n-\n-      if (variably_modified_type_p (TREE_TYPE (type)))\n-\treturn true;\n-      for (parm = TYPE_ARG_TYPES (type); \n-\t   parm && parm != void_list_node; \n-\t   parm = TREE_CHAIN (parm))\n-\tif (variably_modified_type_p (TREE_VALUE (parm)))\n-\t  return true;\n-    }\n-\n-  /* All other types are not variably modified.  */\n-  return false;\n-}\n-\n /* Returns 1 iff zero initialization of type T means actually storing\n    zeros in it.  */\n "}, {"sha": "8444ef4f57535debec41cec661d302303c04cb1c", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=8bcefb43ccfaf402c35312dd06c234e2ec975656", "patch": "@@ -140,6 +140,8 @@ tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n   lhd_tree_inlining_copy_res_decl_for_inlining\n #define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n   lhd_tree_inlining_anon_aggr_type_p\n+#define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P \\\n+  hook_tree_bool_false\n #define LANG_HOOKS_TREE_INLINING_START_INLINING \\\n   lhd_tree_inlining_start_inlining\n #define LANG_HOOKS_TREE_INLINING_END_INLINING \\\n@@ -156,6 +158,7 @@ tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n   LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P, \\\n   LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING, \\\n   LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P, \\\n+  LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P, \\\n   LANG_HOOKS_TREE_INLINING_START_INLINING, \\\n   LANG_HOOKS_TREE_INLINING_END_INLINING, \\\n   LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\"}, {"sha": "09e5971007ae644fa813b66a1d29df9478c24516", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=8bcefb43ccfaf402c35312dd06c234e2ec975656", "patch": "@@ -50,6 +50,7 @@ struct lang_hooks_for_tree_inlining\n \t\t\t\t\t\t\t  void *, int *,\n \t\t\t\t\t\t\t  void *));\n   int (*anon_aggr_type_p) PARAMS ((union tree_node *));\n+  bool (*var_mod_type_p) PARAMS ((union tree_node *));\n   int (*start_inlining) PARAMS ((union tree_node *));\n   void (*end_inlining) PARAMS ((union tree_node *));\n   union tree_node *(*convert_parm_for_inlining) PARAMS ((union tree_node *,"}, {"sha": "505f0a5db8be8a5b6b9da2d9561c9d372255fe8b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=8bcefb43ccfaf402c35312dd06c234e2ec975656", "patch": "@@ -1647,6 +1647,7 @@ walk_tree (tp, func, data, htab_)\n   return NULL_TREE;\n \n #undef WALK_SUBTREE\n+#undef WALK_SUBTREE_TAIL\n }\n \n /* Like walk_tree, but does not walk duplicate nodes more than"}, {"sha": "a70b1b2daf12f4a73481a63faa536f1b4800dbe1", "filename": "gcc/tree.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8bcefb43ccfaf402c35312dd06c234e2ec975656", "patch": "@@ -4151,6 +4151,65 @@ int_fits_type_p (c, type)\n     }\n }\n \n+/* Returns true if T is, contains, or refers to a type with variable\n+   size.  This concept is more general than that of C99 'variably\n+   modified types': in C99, a struct type is never variably modified\n+   because a VLA may not appear as a structure member.  However, in\n+   GNU C code like:\n+    \n+     struct S { int i[f()]; };\n+\n+   is valid, and other languages may define similar constructs.  */\n+\n+bool\n+variably_modified_type_p (type)\n+     tree type;\n+{\n+  /* If TYPE itself has variable size, it is variably modified.  \n+\n+     We do not yet have a representation of the C99 '[*]' syntax.\n+     When a representation is chosen, this function should be modified\n+     to test for that case as well.  */\n+  if (TYPE_SIZE (type) \n+      && TYPE_SIZE (type) != error_mark_node\n+      && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n+    return true;\n+\n+  /* If TYPE is a pointer or reference, it is variably modified if \n+     the type pointed to is variably modified.  */\n+  if ((TREE_CODE (type) == POINTER_TYPE\n+       || TREE_CODE (type) == REFERENCE_TYPE)\n+      && variably_modified_type_p (TREE_TYPE (type)))\n+    return true;\n+  \n+  /* If TYPE is an array, it is variably modified if the array\n+     elements are.  (Note that the VLA case has already been checked\n+     above.)  */\n+  if (TREE_CODE (type) == ARRAY_TYPE\n+      && variably_modified_type_p (TREE_TYPE (type)))\n+    return true;\n+\n+  /* If TYPE is a function type, it is variably modified if any of the\n+     parameters or the return type are variably modified.  */\n+  if (TREE_CODE (type) == FUNCTION_TYPE\n+      || TREE_CODE (type) == METHOD_TYPE)\n+    {\n+      tree parm;\n+\n+      if (variably_modified_type_p (TREE_TYPE (type)))\n+\treturn true;\n+      for (parm = TYPE_ARG_TYPES (type); \n+\t   parm && parm != void_list_node; \n+\t   parm = TREE_CHAIN (parm))\n+\tif (variably_modified_type_p (TREE_VALUE (parm)))\n+\t  return true;\n+    }\n+\n+  /* The current language may have other cases to check, but in general,\n+     all other types are not variably modified.  */\n+  return (*lang_hooks.tree_inlining.var_mod_type_p) (type);\n+}\n+\n /* Given a DECL or TYPE, return the scope in which it was declared, or\n    NULL_TREE if there is no containing scope.  */\n "}, {"sha": "2517dd271f8ae22ae56d9a57ba59660799933214", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcefb43ccfaf402c35312dd06c234e2ec975656/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8bcefb43ccfaf402c35312dd06c234e2ec975656", "patch": "@@ -2909,6 +2909,7 @@ struct obstack;\n /* In tree.c */\n extern int really_constant_p\t\tPARAMS ((tree));\n extern int int_fits_type_p\t\tPARAMS ((tree, tree));\n+extern bool variably_modified_type_p    PARAMS ((tree));\n extern int tree_log2\t\t\tPARAMS ((tree));\n extern int tree_floor_log2\t\tPARAMS ((tree));\n extern int simple_cst_equal\t\tPARAMS ((tree, tree));"}]}