{"sha": "77cde6106be662d26b942401b92334ea5f08ae17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdjZGU2MTA2YmU2NjJkMjZiOTQyNDAxYjkyMzM0ZWE1ZjA4YWUxNw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-08-22T13:25:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T13:25:50Z"}, "message": "exp_ch7.ads: Put routines in proper alpha order\n\n2008-08-22  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch7.ads: Put routines in proper alpha order\n\nFrom-SVN: r139461", "tree": {"sha": "42092a76be88166d5d7512ca12b6e65051b5eb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42092a76be88166d5d7512ca12b6e65051b5eb7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77cde6106be662d26b942401b92334ea5f08ae17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77cde6106be662d26b942401b92334ea5f08ae17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77cde6106be662d26b942401b92334ea5f08ae17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77cde6106be662d26b942401b92334ea5f08ae17/comments", "author": null, "committer": null, "parents": [{"sha": "c1fd002c16964539fae22ca5ca69b0c8d9d75843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fd002c16964539fae22ca5ca69b0c8d9d75843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1fd002c16964539fae22ca5ca69b0c8d9d75843"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b6c3ff26c2411934e38456ed45e090529c444744", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cde6106be662d26b942401b92334ea5f08ae17/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cde6106be662d26b942401b92334ea5f08ae17/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=77cde6106be662d26b942401b92334ea5f08ae17", "patch": "@@ -57,20 +57,18 @@ package Exp_Ch7 is\n    function Controller_Component (Typ : Entity_Id) return Entity_Id;\n    --  Returns the entity of the component whose name is 'Name_uController'\n \n-   function Needs_Finalization (T : Entity_Id) return Boolean;\n-   --  True if T potentially needs finalization actions. True if T is\n-   --  controlled, or has subcomponents. Also True if T is a class-wide type,\n-   --  because some type extension might add controlled subcomponents, except\n-   --  that if pragma Restrictions (No_Finalization) applies, this is False for\n-   --  class-wide types.\n-\n    function CW_Or_Has_Controlled_Part (T : Entity_Id) return Boolean;\n    --  True if T is a class-wide type, or if it has controlled parts (\"part\"\n    --  means T or any of its subcomponents). This is the same as\n    --  Needs_Finalization, except when pragma Restrictions (No_Finalization)\n    --  applies, in which case we know that class-wide objects do not contain\n    --  controlled parts.\n \n+   procedure Expand_Ctrl_Function_Call (N : Node_Id);\n+   --  Expand a call to a function returning a controlled value. That is to\n+   --  say attach the result of the call to the current finalization list,\n+   --  which is the one of the transient scope created for such constructs.\n+\n    function Find_Final_List\n      (E   : Entity_Id;\n       Ref : Node_Id := Empty) return Node_Id;\n@@ -163,15 +161,17 @@ package Exp_Ch7 is\n    --  object but not when finalizing the target of an assignment, it is not\n    --  necessary either on scope exit.\n \n-   procedure Expand_Ctrl_Function_Call (N : Node_Id);\n-   --  Expand a call to a function returning a controlled value. That is to\n-   --  say attach the result of the call to the current finalization list,\n-   --  which is the one of the transient scope created for such constructs.\n-\n    function Make_Handler_For_Ctrl_Operation (Loc : Source_Ptr) return Node_Id;\n    --  Generate an implicit exception handler with an 'others' choice,\n    --  converting any occurrence to a raise of Program_Error.\n \n+   function Needs_Finalization (T : Entity_Id) return Boolean;\n+   --  True if T potentially needs finalization actions. True if T is\n+   --  controlled, or has subcomponents. Also True if T is a class-wide type,\n+   --  because some type extension might add controlled subcomponents, except\n+   --  that if pragma Restrictions (No_Finalization) applies, this is False for\n+   --  class-wide types.\n+\n    --------------------------------------------\n    -- Task and Protected Object finalization --\n    --------------------------------------------"}]}