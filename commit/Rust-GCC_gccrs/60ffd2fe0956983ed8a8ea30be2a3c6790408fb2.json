{"sha": "60ffd2fe0956983ed8a8ea30be2a3c6790408fb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBmZmQyZmUwOTU2OTgzZWQ4YThlYTMwYmUyYTNjNjc5MDQwOGZiMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-01-27T18:03:17Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-01-27T18:03:17Z"}, "message": "rtl.texi (Arithmetic): Rewrite entries for PLUS, SS_PLUS, US_PLUS, LO_SUM, MINUS, SS_MINUS, US_MINUS.\n\n\t* doc/rtl.texi (Arithmetic): Rewrite entries for PLUS,\n\tSS_PLUS, US_PLUS, LO_SUM, MINUS, SS_MINUS, US_MINUS.\n\nFrom-SVN: r76735", "tree": {"sha": "98e6ff3e4849debfb568ae4898a626a6b42fc419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98e6ff3e4849debfb568ae4898a626a6b42fc419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60ffd2fe0956983ed8a8ea30be2a3c6790408fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ffd2fe0956983ed8a8ea30be2a3c6790408fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60ffd2fe0956983ed8a8ea30be2a3c6790408fb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ffd2fe0956983ed8a8ea30be2a3c6790408fb2/comments", "author": null, "committer": null, "parents": [{"sha": "52ad4d7b53f0798dcf610ae25199897ede9c9719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ad4d7b53f0798dcf610ae25199897ede9c9719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ad4d7b53f0798dcf610ae25199897ede9c9719"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "e0eef50673dcef5f142630d858a47556b1962272", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ffd2fe0956983ed8a8ea30be2a3c6790408fb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ffd2fe0956983ed8a8ea30be2a3c6790408fb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60ffd2fe0956983ed8a8ea30be2a3c6790408fb2", "patch": "@@ -1,3 +1,8 @@\n+2004-01-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* doc/rtl.texi (Arithmetic): Rewrite entries for PLUS,\n+\tSS_PLUS, US_PLUS, LO_SUM, MINUS, SS_MINUS, US_MINUS.\n+\n 2004-01-27  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 7198"}, {"sha": "49af4f3add24ccd034110a2f7ecfeb9f8b2a9b9e", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ffd2fe0956983ed8a8ea30be2a3c6790408fb2/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ffd2fe0956983ed8a8ea30be2a3c6790408fb2/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=60ffd2fe0956983ed8a8ea30be2a3c6790408fb2", "patch": "@@ -1749,51 +1749,53 @@ second operand.\n \n @table @code\n @findex plus\n-@cindex RTL addition\n+@findex ss_plus\n+@findex us_plus\n @cindex RTL sum\n+@cindex RTL addition\n+@cindex RTL addition with signed saturation\n+@cindex RTL addition with unsigned saturation\n @item (plus:@var{m} @var{x} @var{y})\n-Represents the sum of the values represented by @var{x} and @var{y}\n-carried out in machine mode @var{m}.\n+@itemx (ss_plus:@var{m} @var{x} @var{y})\n+@itemx (us_plus:@var{m} @var{x} @var{y})\n \n-@findex lo_sum\n-@item (lo_sum:@var{m} @var{x} @var{y})\n-Like @code{plus}, except that it represents that sum of @var{x} and the\n-low-order bits of @var{y}.  The number of low order bits is\n-machine-dependent but is normally the number of bits in a @code{Pmode}\n-item minus the number of bits set by the @code{high} code\n-(@pxref{Constants}).\n+These three expressions all represent the sum of the values\n+represented by @var{x} and @var{y} carried out in machine mode\n+@var{m}.  They differ in their behavior on overflow of integer modes.\n+@code{plus} wraps round modulo the width of @var{m}; @code{ss_plus}\n+saturates at the maximum signed value representable in @var{m};\n+@code{us_plus} saturates at the maximum unsigned value.\n \n-@var{m} should be @code{Pmode}.\n+@c ??? What happens on overflow of floating point modes?\n \n-@findex minus\n-@cindex RTL subtraction\n-@cindex RTL difference\n-@item (minus:@var{m} @var{x} @var{y})\n-Like @code{plus} but represents subtraction.\n-\n-@findex ss_plus\n-@cindex RTL addition with signed saturation\n-@item (ss_plus:@var{m} @var{x} @var{y})\n+@findex lo_sum\n+@item (lo_sum:@var{m} @var{x} @var{y})\n \n-Like @code{plus}, but using signed saturation in case of an overflow.\n+This expression represents the sum of @var{x} and the low-order bits\n+of @var{y}.  It is used with @code{high} (@pxref{Constants}) to\n+represent the typical two-instruction sequence used in RISC machines\n+to reference a global memory location.  \n \n-@findex us_plus\n-@cindex RTL addition with unsigned saturation\n-@item (us_plus:@var{m} @var{x} @var{y})\n+The number of low order bits is machine-dependent but is\n+normally the number of bits in a @code{Pmode} item minus the number of\n+bits set by @code{high}.\n \n-Like @code{plus}, but using unsigned saturation in case of an overflow.\n+@var{m} should be @code{Pmode}.\n \n+@findex minus\n @findex ss_minus\n-@cindex RTL addition with signed saturation\n-@item (ss_minus:@var{m} @var{x} @var{y})\n-\n-Like @code{minus}, but using signed saturation in case of an overflow.\n-\n @findex us_minus\n-@cindex RTL addition with unsigned saturation\n-@item (us_minus:@var{m} @var{x} @var{y})\n+@cindex RTL difference\n+@cindex RTL subtraction\n+@cindex RTL subtraction with signed saturation\n+@cindex RTL subtraction with unsigned saturation\n+@item (minus:@var{m} @var{x} @var{y})\n+@itemx (ss_minus:@var{m} @var{x} @var{y})\n+@itemx (us_minus:@var{m} @var{x} @var{y})\n \n-Like @code{minus}, but using unsigned saturation in case of an overflow.\n+These three expressions represent the result of subtracting @var{y}\n+from @var{x}, carried out in mode @var{M}.  Behavior on overflow is\n+the same as for the three variants of @code{plus} (see above).\n \n @findex compare\n @cindex RTL comparison"}]}