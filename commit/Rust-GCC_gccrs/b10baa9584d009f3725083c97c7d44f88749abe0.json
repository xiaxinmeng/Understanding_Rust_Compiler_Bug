{"sha": "b10baa9584d009f3725083c97c7d44f88749abe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEwYmFhOTU4NGQwMDlmMzcyNTA4M2M5N2M3ZDQ0Zjg4NzQ5YWJlMA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-03-28T17:22:47Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-03-28T17:22:47Z"}, "message": "[ARM/AArch64][1/2] Crypto intrinsics tuning for Cortex-A53 - \"type\" Attribute restructuring\n\n     * config/aarch64/aarch64-simd.md (aarch64_crypto_aes<aes_op>v16qi):\n     Use crypto_aese type.\n     (aarch64_crypto_aes<aesmc_op>v16qi): Use crypto_aesmc type.\n     * config/arm/arm.md (is_neon_type): Replace crypto_aes with\n     crypto_aese, crypto_aesmc.  Move to types.md.\n     * config/arm/types.md (crypto_aes): Split into crypto_aese,\n     crypto_aesmc.\n     * config/arm/iterators.md (crypto_type): Likewise.\n\nFrom-SVN: r208908", "tree": {"sha": "a40df4bc7a2cace21557e25a5ecd80afc026c7bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a40df4bc7a2cace21557e25a5ecd80afc026c7bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b10baa9584d009f3725083c97c7d44f88749abe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10baa9584d009f3725083c97c7d44f88749abe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10baa9584d009f3725083c97c7d44f88749abe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10baa9584d009f3725083c97c7d44f88749abe0/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97b733ac56ddf5f733d9f815e3b9812e39d060eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b733ac56ddf5f733d9f815e3b9812e39d060eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b733ac56ddf5f733d9f815e3b9812e39d060eb"}], "stats": {"total": 223, "additions": 118, "deletions": 105}, "files": [{"sha": "c023b902c05a6fac5b63de1815d0585d9a0821e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10baa9584d009f3725083c97c7d44f88749abe0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10baa9584d009f3725083c97c7d44f88749abe0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b10baa9584d009f3725083c97c7d44f88749abe0", "patch": "@@ -1,3 +1,14 @@\n+2014-03-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_crypto_aes<aes_op>v16qi):\n+\tUse crypto_aese type.\n+\t(aarch64_crypto_aes<aesmc_op>v16qi): Use crypto_aesmc type.\n+\t* config/arm/arm.md (is_neon_type): Replace crypto_aes with\n+\tcrypto_aese, crypto_aesmc.  Move to types.md.\n+\t* config/arm/types.md (crypto_aes): Split into crypto_aese,\n+\tcrypto_aesmc.\n+\t* config/arm/iterators.md (crypto_type): Likewise.\n+\n 2014-03-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c: Include expr.h and tree-dfa.h."}, {"sha": "73aee2c3df09dff63e0ae5dd2f84355caf926ea5", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10baa9584d009f3725083c97c7d44f88749abe0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10baa9584d009f3725083c97c7d44f88749abe0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=b10baa9584d009f3725083c97c7d44f88749abe0", "patch": "@@ -4250,7 +4250,7 @@\n          CRYPTO_AES))]\n   \"TARGET_SIMD && TARGET_CRYPTO\"\n   \"aes<aes_op>\\\\t%0.16b, %2.16b\"\n-  [(set_attr \"type\" \"crypto_aes\")]\n+  [(set_attr \"type\" \"crypto_aese\")]\n )\n \n (define_insn \"aarch64_crypto_aes<aesmc_op>v16qi\"\n@@ -4259,7 +4259,7 @@\n \t CRYPTO_AESMC))]\n   \"TARGET_SIMD && TARGET_CRYPTO\"\n   \"aes<aesmc_op>\\\\t%0.16b, %1.16b\"\n-  [(set_attr \"type\" \"crypto_aes\")]\n+  [(set_attr \"type\" \"crypto_aesmc\")]\n )\n \n ;; sha1"}, {"sha": "4df24a236a24727cfe8104b4b0e23dc8438df3eb", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10baa9584d009f3725083c97c7d44f88749abe0/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10baa9584d009f3725083c97c7d44f88749abe0/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=b10baa9584d009f3725083c97c7d44f88749abe0", "patch": "@@ -262,105 +262,6 @@\n ; initialized by arm_option_override()\n (define_attr \"ldsched\" \"no,yes\" (const (symbol_ref \"arm_ld_sched\")))\n \n-; YES if the \"type\" attribute assigned to the insn denotes an\n-; Advanced SIMD instruction, NO otherwise.\n-(define_attr \"is_neon_type\" \"yes,no\"\n-\t (if_then_else (eq_attr \"type\"\n-\t \"neon_add, neon_add_q, neon_add_widen, neon_add_long,\\\n-          neon_qadd, neon_qadd_q, neon_add_halve, neon_add_halve_q,\\\n-          neon_add_halve_narrow_q,\\\n-          neon_sub, neon_sub_q, neon_sub_widen, neon_sub_long, neon_qsub,\\\n-          neon_qsub_q, neon_sub_halve, neon_sub_halve_q,\\\n-          neon_sub_halve_narrow_q,\\\n-          neon_abs, neon_abs_q, neon_neg, neon_neg_q, neon_qneg,\\\n-          neon_qneg_q, neon_qabs, neon_qabs_q, neon_abd, neon_abd_q,\\\n-          neon_abd_long, neon_minmax, neon_minmax_q, neon_compare,\\\n-          neon_compare_q, neon_compare_zero, neon_compare_zero_q,\\\n-          neon_arith_acc, neon_arith_acc_q, neon_reduc_add,\\\n-          neon_reduc_add_q, neon_reduc_add_long, neon_reduc_add_acc,\\\n-          neon_reduc_add_acc_q, neon_reduc_minmax, neon_reduc_minmax_q,\\\n-          neon_logic, neon_logic_q, neon_tst, neon_tst_q,\\\n-          neon_shift_imm, neon_shift_imm_q, neon_shift_imm_narrow_q,\\\n-          neon_shift_imm_long, neon_shift_reg, neon_shift_reg_q,\\\n-          neon_shift_acc, neon_shift_acc_q, neon_sat_shift_imm,\\\n-          neon_sat_shift_imm_q, neon_sat_shift_imm_narrow_q,\\\n-          neon_sat_shift_reg, neon_sat_shift_reg_q,\\\n-          neon_ins, neon_ins_q, neon_move, neon_move_q, neon_move_narrow_q,\\\n-          neon_permute, neon_permute_q, neon_zip, neon_zip_q, neon_tbl1,\\\n-          neon_tbl1_q, neon_tbl2, neon_tbl2_q, neon_tbl3, neon_tbl3_q,\\\n-          neon_tbl4, neon_tbl4_q, neon_bsl, neon_bsl_q, neon_cls,\\\n-          neon_cls_q, neon_cnt, neon_cnt_q, neon_dup, neon_dup_q,\\\n-          neon_ext, neon_ext_q, neon_rbit, neon_rbit_q,\\\n-          neon_rev, neon_rev_q, neon_mul_b, neon_mul_b_q, neon_mul_h,\\\n-          neon_mul_h_q, neon_mul_s, neon_mul_s_q, neon_mul_b_long,\\\n-          neon_mul_h_long, neon_mul_s_long, neon_mul_d_long, neon_mul_h_scalar,\\\n-          neon_mul_h_scalar_q, neon_mul_s_scalar, neon_mul_s_scalar_q,\\\n-          neon_mul_h_scalar_long, neon_mul_s_scalar_long, neon_sat_mul_b,\\\n-          neon_sat_mul_b_q, neon_sat_mul_h, neon_sat_mul_h_q,\\\n-          neon_sat_mul_s, neon_sat_mul_s_q, neon_sat_mul_b_long,\\\n-          neon_sat_mul_h_long, neon_sat_mul_s_long, neon_sat_mul_h_scalar,\\\n-          neon_sat_mul_h_scalar_q, neon_sat_mul_s_scalar,\\\n-          neon_sat_mul_s_scalar_q, neon_sat_mul_h_scalar_long,\\\n-          neon_sat_mul_s_scalar_long, neon_mla_b, neon_mla_b_q, neon_mla_h,\\\n-          neon_mla_h_q, neon_mla_s, neon_mla_s_q, neon_mla_b_long,\\\n-          neon_mla_h_long, neon_mla_s_long, neon_mla_h_scalar,\\\n-          neon_mla_h_scalar_q, neon_mla_s_scalar, neon_mla_s_scalar_q,\\\n-          neon_mla_h_scalar_long, neon_mla_s_scalar_long,\\\n-          neon_sat_mla_b_long, neon_sat_mla_h_long,\\\n-          neon_sat_mla_s_long, neon_sat_mla_h_scalar_long,\\\n-          neon_sat_mla_s_scalar_long,\\\n-          neon_to_gp, neon_to_gp_q, neon_from_gp, neon_from_gp_q,\\\n-          neon_ldr, neon_load1_1reg, neon_load1_1reg_q, neon_load1_2reg,\\\n-          neon_load1_2reg_q, neon_load1_3reg, neon_load1_3reg_q,\\\n-          neon_load1_4reg, neon_load1_4reg_q, neon_load1_all_lanes,\\\n-          neon_load1_all_lanes_q, neon_load1_one_lane, neon_load1_one_lane_q,\\\n-          neon_load2_2reg, neon_load2_2reg_q, neon_load2_4reg,\\\n-          neon_load2_4reg_q, neon_load2_all_lanes, neon_load2_all_lanes_q,\\\n-          neon_load2_one_lane, neon_load2_one_lane_q,\\\n-          neon_load3_3reg, neon_load3_3reg_q, neon_load3_all_lanes,\\\n-          neon_load3_all_lanes_q, neon_load3_one_lane, neon_load3_one_lane_q,\\\n-          neon_load4_4reg, neon_load4_4reg_q, neon_load4_all_lanes,\\\n-          neon_load4_all_lanes_q, neon_load4_one_lane, neon_load4_one_lane_q,\\\n-          neon_str, neon_store1_1reg, neon_store1_1reg_q, neon_store1_2reg,\\\n-          neon_store1_2reg_q, neon_store1_3reg, neon_store1_3reg_q,\\\n-          neon_store1_4reg, neon_store1_4reg_q, neon_store1_one_lane,\\\n-          neon_store1_one_lane_q, neon_store2_2reg, neon_store2_2reg_q,\\\n-          neon_store2_4reg, neon_store2_4reg_q, neon_store2_one_lane,\\\n-          neon_store2_one_lane_q, neon_store3_3reg, neon_store3_3reg_q,\\\n-          neon_store3_one_lane, neon_store3_one_lane_q, neon_store4_4reg,\\\n-          neon_store4_4reg_q, neon_store4_one_lane, neon_store4_one_lane_q,\\\n-          neon_fp_abd_s, neon_fp_abd_s_q, neon_fp_abd_d, neon_fp_abd_d_q,\\\n-          neon_fp_addsub_s, neon_fp_addsub_s_q, neon_fp_addsub_d,\\\n-          neon_fp_addsub_d_q, neon_fp_compare_s, neon_fp_compare_s_q,\\\n-          neon_fp_compare_d, neon_fp_compare_d_q, neon_fp_minmax_s,\\\n-          neon_fp_minmax_s_q, neon_fp_minmax_d, neon_fp_minmax_d_q,\\\n-          neon_fp_reduc_add_s, neon_fp_reduc_add_s_q, neon_fp_reduc_add_d,\\\n-          neon_fp_reduc_add_d_q, neon_fp_reduc_minmax_s,\n-          neon_fp_reduc_minmax_s_q, neon_fp_reduc_minmax_d,\\\n-          neon_fp_reduc_minmax_d_q,\\\n-          neon_fp_cvt_narrow_s_q, neon_fp_cvt_narrow_d_q,\\\n-          neon_fp_cvt_widen_h, neon_fp_cvt_widen_s, neon_fp_to_int_s,\\\n-          neon_fp_to_int_s_q, neon_int_to_fp_s, neon_int_to_fp_s_q,\\\n-          neon_fp_round_s, neon_fp_round_s_q, neon_fp_recpe_s,\\\n-          neon_fp_recpe_s_q,\\\n-          neon_fp_recpe_d, neon_fp_recpe_d_q, neon_fp_recps_s,\\\n-          neon_fp_recps_s_q, neon_fp_recps_d, neon_fp_recps_d_q,\\\n-          neon_fp_recpx_s, neon_fp_recpx_s_q, neon_fp_recpx_d,\\\n-          neon_fp_recpx_d_q, neon_fp_rsqrte_s, neon_fp_rsqrte_s_q,\\\n-          neon_fp_rsqrte_d, neon_fp_rsqrte_d_q, neon_fp_rsqrts_s,\\\n-          neon_fp_rsqrts_s_q, neon_fp_rsqrts_d, neon_fp_rsqrts_d_q,\\\n-          neon_fp_mul_s, neon_fp_mul_s_q, neon_fp_mul_s_scalar,\\\n-          neon_fp_mul_s_scalar_q, neon_fp_mul_d, neon_fp_mul_d_q,\\\n-          neon_fp_mul_d_scalar_q, neon_fp_mla_s, neon_fp_mla_s_q,\\\n-          neon_fp_mla_s_scalar, neon_fp_mla_s_scalar_q, neon_fp_mla_d,\\\n-          neon_fp_mla_d_q, neon_fp_mla_d_scalar_q, neon_fp_sqrt_s,\\\n-          neon_fp_sqrt_s_q, neon_fp_sqrt_d, neon_fp_sqrt_d_q,\\\n-          neon_fp_div_s, neon_fp_div_s_q, neon_fp_div_d, neon_fp_div_d_q, crypto_aes,\\\n-          crypto_sha1_xor, crypto_sha1_fast, crypto_sha1_slow, crypto_sha256_fast,\\\n-          crypto_sha256_slow\")\n-        (const_string \"yes\")\n-        (const_string \"no\")))\n-\n ; condition codes: this one is used by final_prescan_insn to speed up\n ; conditionalizing instructions.  It saves having to scan the rtl to see if\n ; it uses or alters the condition codes."}, {"sha": "aebab934049871b218b9c525e62afd1d703e6172", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10baa9584d009f3725083c97c7d44f88749abe0/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10baa9584d009f3725083c97c7d44f88749abe0/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=b10baa9584d009f3725083c97c7d44f88749abe0", "patch": "@@ -551,8 +551,8 @@\n                           (UNSPEC_SHA256SU1 \"sha256su1\")])\n \n (define_int_attr crypto_type\n- [(UNSPEC_AESE \"crypto_aes\") (UNSPEC_AESD \"crypto_aes\")\n- (UNSPEC_AESMC \"crypto_aes\") (UNSPEC_AESIMC \"crypto_aes\")\n+ [(UNSPEC_AESE \"crypto_aese\") (UNSPEC_AESD \"crypto_aese\")\n+ (UNSPEC_AESMC \"crypto_aesmc\") (UNSPEC_AESIMC \"crypto_aesmc\")\n  (UNSPEC_SHA1C \"crypto_sha1_slow\") (UNSPEC_SHA1P \"crypto_sha1_slow\")\n  (UNSPEC_SHA1M \"crypto_sha1_slow\") (UNSPEC_SHA1SU1 \"crypto_sha1_fast\")\n  (UNSPEC_SHA1SU0 \"crypto_sha1_xor\") (UNSPEC_SHA256H \"crypto_sha256_slow\")"}, {"sha": "efbf7a75327496a6609a8cb8d0ffc0a0f53ead29", "filename": "gcc/config/arm/types.md", "status": "modified", "additions": 103, "deletions": 2, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10baa9584d009f3725083c97c7d44f88749abe0/gcc%2Fconfig%2Farm%2Ftypes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10baa9584d009f3725083c97c7d44f88749abe0/gcc%2Fconfig%2Farm%2Ftypes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftypes.md?ref=b10baa9584d009f3725083c97c7d44f88749abe0", "patch": "@@ -524,7 +524,8 @@\n ;\n ; The classification below is for Crypto instructions.\n ;\n-; crypto_aes\n+; crypto_aese\n+; crypto_aesmc\n ; crypto_sha1_xor\n ; crypto_sha1_fast\n ; crypto_sha1_slow\n@@ -1051,7 +1052,8 @@\n   neon_fp_div_d,\\\n   neon_fp_div_d_q,\\\n \\\n-  crypto_aes,\\\n+  crypto_aese,\\\n+  crypto_aesmc,\\\n   crypto_sha1_xor,\\\n   crypto_sha1_fast,\\\n   crypto_sha1_slow,\\\n@@ -1075,3 +1077,102 @@\n      \"smlalxy,umull,umulls,umaal,umlal,umlals,smull,smulls,smlal,smlals\")\n     (const_string \"yes\")\n     (const_string \"no\")))\n+\n+; YES if the \"type\" attribute assigned to the insn denotes an\n+; Advanced SIMD instruction, NO otherwise.\n+(define_attr \"is_neon_type\" \"yes,no\"\n+\t (if_then_else (eq_attr \"type\"\n+\t \"neon_add, neon_add_q, neon_add_widen, neon_add_long,\\\n+          neon_qadd, neon_qadd_q, neon_add_halve, neon_add_halve_q,\\\n+          neon_add_halve_narrow_q,\\\n+          neon_sub, neon_sub_q, neon_sub_widen, neon_sub_long, neon_qsub,\\\n+          neon_qsub_q, neon_sub_halve, neon_sub_halve_q,\\\n+          neon_sub_halve_narrow_q,\\\n+          neon_abs, neon_abs_q, neon_neg, neon_neg_q, neon_qneg,\\\n+          neon_qneg_q, neon_qabs, neon_qabs_q, neon_abd, neon_abd_q,\\\n+          neon_abd_long, neon_minmax, neon_minmax_q, neon_compare,\\\n+          neon_compare_q, neon_compare_zero, neon_compare_zero_q,\\\n+          neon_arith_acc, neon_arith_acc_q, neon_reduc_add,\\\n+          neon_reduc_add_q, neon_reduc_add_long, neon_reduc_add_acc,\\\n+          neon_reduc_add_acc_q, neon_reduc_minmax, neon_reduc_minmax_q,\\\n+          neon_logic, neon_logic_q, neon_tst, neon_tst_q,\\\n+          neon_shift_imm, neon_shift_imm_q, neon_shift_imm_narrow_q,\\\n+          neon_shift_imm_long, neon_shift_reg, neon_shift_reg_q,\\\n+          neon_shift_acc, neon_shift_acc_q, neon_sat_shift_imm,\\\n+          neon_sat_shift_imm_q, neon_sat_shift_imm_narrow_q,\\\n+          neon_sat_shift_reg, neon_sat_shift_reg_q,\\\n+          neon_ins, neon_ins_q, neon_move, neon_move_q, neon_move_narrow_q,\\\n+          neon_permute, neon_permute_q, neon_zip, neon_zip_q, neon_tbl1,\\\n+          neon_tbl1_q, neon_tbl2, neon_tbl2_q, neon_tbl3, neon_tbl3_q,\\\n+          neon_tbl4, neon_tbl4_q, neon_bsl, neon_bsl_q, neon_cls,\\\n+          neon_cls_q, neon_cnt, neon_cnt_q, neon_dup, neon_dup_q,\\\n+          neon_ext, neon_ext_q, neon_rbit, neon_rbit_q,\\\n+          neon_rev, neon_rev_q, neon_mul_b, neon_mul_b_q, neon_mul_h,\\\n+          neon_mul_h_q, neon_mul_s, neon_mul_s_q, neon_mul_b_long,\\\n+          neon_mul_h_long, neon_mul_s_long, neon_mul_d_long, neon_mul_h_scalar,\\\n+          neon_mul_h_scalar_q, neon_mul_s_scalar, neon_mul_s_scalar_q,\\\n+          neon_mul_h_scalar_long, neon_mul_s_scalar_long, neon_sat_mul_b,\\\n+          neon_sat_mul_b_q, neon_sat_mul_h, neon_sat_mul_h_q,\\\n+          neon_sat_mul_s, neon_sat_mul_s_q, neon_sat_mul_b_long,\\\n+          neon_sat_mul_h_long, neon_sat_mul_s_long, neon_sat_mul_h_scalar,\\\n+          neon_sat_mul_h_scalar_q, neon_sat_mul_s_scalar,\\\n+          neon_sat_mul_s_scalar_q, neon_sat_mul_h_scalar_long,\\\n+          neon_sat_mul_s_scalar_long, neon_mla_b, neon_mla_b_q, neon_mla_h,\\\n+          neon_mla_h_q, neon_mla_s, neon_mla_s_q, neon_mla_b_long,\\\n+          neon_mla_h_long, neon_mla_s_long, neon_mla_h_scalar,\\\n+          neon_mla_h_scalar_q, neon_mla_s_scalar, neon_mla_s_scalar_q,\\\n+          neon_mla_h_scalar_long, neon_mla_s_scalar_long,\\\n+          neon_sat_mla_b_long, neon_sat_mla_h_long,\\\n+          neon_sat_mla_s_long, neon_sat_mla_h_scalar_long,\\\n+          neon_sat_mla_s_scalar_long,\\\n+          neon_to_gp, neon_to_gp_q, neon_from_gp, neon_from_gp_q,\\\n+          neon_ldr, neon_load1_1reg, neon_load1_1reg_q, neon_load1_2reg,\\\n+          neon_load1_2reg_q, neon_load1_3reg, neon_load1_3reg_q,\\\n+          neon_load1_4reg, neon_load1_4reg_q, neon_load1_all_lanes,\\\n+          neon_load1_all_lanes_q, neon_load1_one_lane, neon_load1_one_lane_q,\\\n+          neon_load2_2reg, neon_load2_2reg_q, neon_load2_4reg,\\\n+          neon_load2_4reg_q, neon_load2_all_lanes, neon_load2_all_lanes_q,\\\n+          neon_load2_one_lane, neon_load2_one_lane_q,\\\n+          neon_load3_3reg, neon_load3_3reg_q, neon_load3_all_lanes,\\\n+          neon_load3_all_lanes_q, neon_load3_one_lane, neon_load3_one_lane_q,\\\n+          neon_load4_4reg, neon_load4_4reg_q, neon_load4_all_lanes,\\\n+          neon_load4_all_lanes_q, neon_load4_one_lane, neon_load4_one_lane_q,\\\n+          neon_str, neon_store1_1reg, neon_store1_1reg_q, neon_store1_2reg,\\\n+          neon_store1_2reg_q, neon_store1_3reg, neon_store1_3reg_q,\\\n+          neon_store1_4reg, neon_store1_4reg_q, neon_store1_one_lane,\\\n+          neon_store1_one_lane_q, neon_store2_2reg, neon_store2_2reg_q,\\\n+          neon_store2_4reg, neon_store2_4reg_q, neon_store2_one_lane,\\\n+          neon_store2_one_lane_q, neon_store3_3reg, neon_store3_3reg_q,\\\n+          neon_store3_one_lane, neon_store3_one_lane_q, neon_store4_4reg,\\\n+          neon_store4_4reg_q, neon_store4_one_lane, neon_store4_one_lane_q,\\\n+          neon_fp_abd_s, neon_fp_abd_s_q, neon_fp_abd_d, neon_fp_abd_d_q,\\\n+          neon_fp_addsub_s, neon_fp_addsub_s_q, neon_fp_addsub_d,\\\n+          neon_fp_addsub_d_q, neon_fp_compare_s, neon_fp_compare_s_q,\\\n+          neon_fp_compare_d, neon_fp_compare_d_q, neon_fp_minmax_s,\\\n+          neon_fp_minmax_s_q, neon_fp_minmax_d, neon_fp_minmax_d_q,\\\n+          neon_fp_reduc_add_s, neon_fp_reduc_add_s_q, neon_fp_reduc_add_d,\\\n+          neon_fp_reduc_add_d_q, neon_fp_reduc_minmax_s,\n+          neon_fp_reduc_minmax_s_q, neon_fp_reduc_minmax_d,\\\n+          neon_fp_reduc_minmax_d_q,\\\n+          neon_fp_cvt_narrow_s_q, neon_fp_cvt_narrow_d_q,\\\n+          neon_fp_cvt_widen_h, neon_fp_cvt_widen_s, neon_fp_to_int_s,\\\n+          neon_fp_to_int_s_q, neon_int_to_fp_s, neon_int_to_fp_s_q,\\\n+          neon_fp_round_s, neon_fp_round_s_q, neon_fp_recpe_s,\\\n+          neon_fp_recpe_s_q,\\\n+          neon_fp_recpe_d, neon_fp_recpe_d_q, neon_fp_recps_s,\\\n+          neon_fp_recps_s_q, neon_fp_recps_d, neon_fp_recps_d_q,\\\n+          neon_fp_recpx_s, neon_fp_recpx_s_q, neon_fp_recpx_d,\\\n+          neon_fp_recpx_d_q, neon_fp_rsqrte_s, neon_fp_rsqrte_s_q,\\\n+          neon_fp_rsqrte_d, neon_fp_rsqrte_d_q, neon_fp_rsqrts_s,\\\n+          neon_fp_rsqrts_s_q, neon_fp_rsqrts_d, neon_fp_rsqrts_d_q,\\\n+          neon_fp_mul_s, neon_fp_mul_s_q, neon_fp_mul_s_scalar,\\\n+          neon_fp_mul_s_scalar_q, neon_fp_mul_d, neon_fp_mul_d_q,\\\n+          neon_fp_mul_d_scalar_q, neon_fp_mla_s, neon_fp_mla_s_q,\\\n+          neon_fp_mla_s_scalar, neon_fp_mla_s_scalar_q, neon_fp_mla_d,\\\n+          neon_fp_mla_d_q, neon_fp_mla_d_scalar_q, neon_fp_sqrt_s,\\\n+          neon_fp_sqrt_s_q, neon_fp_sqrt_d, neon_fp_sqrt_d_q,\\\n+          neon_fp_div_s, neon_fp_div_s_q, neon_fp_div_d, neon_fp_div_d_q, crypto_aese,\\\n+          crypto_aesmc, crypto_sha1_xor, crypto_sha1_fast, crypto_sha1_slow,\\\n+          crypto_sha256_fast, crypto_sha256_slow\")\n+        (const_string \"yes\")\n+        (const_string \"no\")))"}]}