{"sha": "322db86f4b4df1261308e8a02e69018d9cea98e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIyZGI4NmY0YjRkZjEyNjEzMDhlOGEwMmU2OTAxOGQ5Y2VhOThlOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-26T11:10:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-26T11:10:48Z"}, "message": "i386: Fix up *avx_vperm_broadcast_v4df [PR93430]\n\nApparently my recent patch which moved the *avx_vperm_broadcast* and\n*vpermil* patterns before vpermpd broke the following testcase, the\ndefine_insn_and_split matched always but the splitter condition only split\nit if not -mavx2 for V4DFmode, basically relying on the vpermpd pattern to\ncome first.\n\nThe following patch fixes it by moving that part of SPLIT-CONDITION into\nCONDITION, so that when it is not met, we just don't match the pattern\nand thus match the later vpermpd pattern in that case.\nExcept, for { 0, 0, 0, 0 } permutation, there is actually no reason to do\nthat, vbroadcastsd from memory seems to be slightly cheaper than vpermpd $0.\n\n2020-01-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93430\n\t* config/i386/sse.md (*avx_vperm_broadcast_<mode>): Disallow for\n\tTARGET_AVX2 and V4DFmode not in the split condition, but in the\n\tpattern condition, though allow { 0, 0, 0, 0 } broadcast always.\n\n\t* gcc.dg/pr93430.c: New test.\n\t* gcc.target/i386/avx2-pr93430.c: New test.", "tree": {"sha": "d5b27a45c12cb46dc523bd244e458689bfeea41d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5b27a45c12cb46dc523bd244e458689bfeea41d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/322db86f4b4df1261308e8a02e69018d9cea98e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/322db86f4b4df1261308e8a02e69018d9cea98e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/322db86f4b4df1261308e8a02e69018d9cea98e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/322db86f4b4df1261308e8a02e69018d9cea98e9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da11ffbba8741e085095f49037860de8e8701a1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da11ffbba8741e085095f49037860de8e8701a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da11ffbba8741e085095f49037860de8e8701a1f"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "db62a7a12ff2dce62a5787d4307627f6e20fe40d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322db86f4b4df1261308e8a02e69018d9cea98e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322db86f4b4df1261308e8a02e69018d9cea98e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=322db86f4b4df1261308e8a02e69018d9cea98e9", "patch": "@@ -1,3 +1,10 @@\n+2020-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93430\n+\t* config/i386/sse.md (*avx_vperm_broadcast_<mode>): Disallow for\n+\tTARGET_AVX2 and V4DFmode not in the split condition, but in the\n+\tpattern condition, though allow { 0, 0, 0, 0 } broadcast always.\n+\n 2020-01-25  Feng Xue  <fxue@os.amperecomputing.com>\n \n \tPR ipa/93166"}, {"sha": "04a8c5e56b94fc05bdad3324efe93f9580ee6ee3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322db86f4b4df1261308e8a02e69018d9cea98e9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322db86f4b4df1261308e8a02e69018d9cea98e9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=322db86f4b4df1261308e8a02e69018d9cea98e9", "patch": "@@ -19912,9 +19912,10 @@\n \t  (match_operand:VF_256 1 \"nonimmediate_operand\" \"m,o,?v\")\n \t  (match_parallel 2 \"avx_vbroadcast_operand\"\n \t    [(match_operand 3 \"const_int_operand\" \"C,n,n\")])))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX\n+   && (<MODE>mode != V4DFmode || !TARGET_AVX2 || operands[3] == const0_rtx)\"\n   \"#\"\n-  \"&& reload_completed && (<MODE>mode != V4DFmode || !TARGET_AVX2)\"\n+  \"&& reload_completed\"\n   [(set (match_dup 0) (vec_duplicate:VF_256 (match_dup 1)))]\n {\n   rtx op0 = operands[0], op1 = operands[1];"}, {"sha": "860d56d3420d7c3c0d8e8088bbb6fb150d0202dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322db86f4b4df1261308e8a02e69018d9cea98e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322db86f4b4df1261308e8a02e69018d9cea98e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=322db86f4b4df1261308e8a02e69018d9cea98e9", "patch": "@@ -1,5 +1,9 @@\n 2020-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93430\n+\t* gcc.dg/pr93430.c: New test.\n+\t* gcc.target/i386/avx2-pr93430.c: New test.\n+\n \tPR ipa/93166\n \t* g++.dg/pr93166.C: Move to ...\n \t* g++.dg/pr93166_0.C: ... here.  Turn it into a proper lto test."}, {"sha": "92c0b9f96aea9512ca220c60769e477b922f692d", "filename": "gcc/testsuite/gcc.dg/pr93430.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322db86f4b4df1261308e8a02e69018d9cea98e9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322db86f4b4df1261308e8a02e69018d9cea98e9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93430.c?ref=322db86f4b4df1261308e8a02e69018d9cea98e9", "patch": "@@ -0,0 +1,33 @@\n+/* PR target/93430 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-mavx -mno-avx2\" { target avx } } */\n+\n+typedef double V __attribute__((vector_size (4 * sizeof (double))));\n+typedef long long VI __attribute__((vector_size (4 * sizeof (long long))));\n+\n+#if __SIZEOF_DOUBLE__ == __SIZEOF_LONG_LONG__\n+void\n+foo (V *x, V *y)\n+{\n+  y[0] = __builtin_shuffle (x[0], x[0], (VI) { 0, 0, 0, 0 });\n+}\n+\n+void\n+bar (V *x, V *y)\n+{\n+  y[0] = __builtin_shuffle (x[0], x[0], (VI) { 1, 1, 1, 1 });\n+}\n+\n+void\n+baz (V *x, V *y)\n+{\n+  y[0] = __builtin_shuffle (x[0], x[0], (VI) { 2, 2, 2, 2 });\n+}\n+\n+void\n+qux (V *x, V *y)\n+{\n+  y[0] = __builtin_shuffle (x[0], x[0], (VI) { 3, 3, 3, 3 });\n+}\n+#endif"}, {"sha": "d7c1a5141cdc3c371cbce2cc1364c51417ea8489", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr93430.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322db86f4b4df1261308e8a02e69018d9cea98e9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr93430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322db86f4b4df1261308e8a02e69018d9cea98e9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr93430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr93430.c?ref=322db86f4b4df1261308e8a02e69018d9cea98e9", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/93430 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"../../gcc.dg/pr93430.c\""}]}