{"sha": "e83e46cd082ad4dfdced2eba3369f7e3ae3802ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzZTQ2Y2QwODJhZDRkZmRjZWQyZWJhMzM2OWY3ZTNhZTM4MDJlYw==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-20T17:21:35Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:14Z"}, "message": "add type resolution to parameters and return types of functions", "tree": {"sha": "b70a6bd90de3e082d76b65a203fc28bab2876c7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b70a6bd90de3e082d76b65a203fc28bab2876c7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e83e46cd082ad4dfdced2eba3369f7e3ae3802ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83e46cd082ad4dfdced2eba3369f7e3ae3802ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83e46cd082ad4dfdced2eba3369f7e3ae3802ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83e46cd082ad4dfdced2eba3369f7e3ae3802ec/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3601bdbe25be75a05b98f356610963b3f5557b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3601bdbe25be75a05b98f356610963b3f5557b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3601bdbe25be75a05b98f356610963b3f5557b4b"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "64296d04da4a02c97245b395ecfa4b69d175f79a", "filename": "gcc/rust/analysis/rust-type-resolution.cc", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83e46cd082ad4dfdced2eba3369f7e3ae3802ec/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83e46cd082ad4dfdced2eba3369f7e3ae3802ec/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc?ref=e83e46cd082ad4dfdced2eba3369f7e3ae3802ec", "patch": "@@ -100,6 +100,38 @@ TypeResolution::typesAreCompatible (AST::Type *lhs, AST::Type *rhs,\n       return false;\n     }\n \n+  AST::Type *val = NULL;\n+  if (!typeScope.Lookup (lhsTypeStr, &val))\n+    {\n+      rust_error_at (locus, \"unknown type\");\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n+bool\n+TypeResolution::isTypeInScope (AST::Type *type, Location locus)\n+{\n+  auto before = typeComparisonBuffer.size ();\n+  type->accept_vis (*this);\n+  if (typeComparisonBuffer.size () <= before)\n+    {\n+      rust_error_at (locus, \"unable to decipher type: %s\",\n+\t\t     type->as_string ().c_str ());\n+      return false;\n+    }\n+\n+  auto t = typeComparisonBuffer.back ();\n+  typeComparisonBuffer.pop_back ();\n+\n+  AST::Type *val = NULL;\n+  if (!typeScope.Lookup (t, &val))\n+    {\n+      rust_error_at (locus, \"unknown type\");\n+      return false;\n+    }\n+\n   return true;\n }\n \n@@ -619,6 +651,9 @@ TypeResolution::visit (AST::Function &function)\n   scope.Push ();\n   for (auto &param : function.function_params)\n     {\n+      if (!isTypeInScope (param.type.get (), param.locus))\n+\treturn;\n+\n       auto before = letPatternBuffer.size ();\n       param.param_name->accept_vis (*this);\n       if (letPatternBuffer.size () <= before)\n@@ -632,6 +667,13 @@ TypeResolution::visit (AST::Function &function)\n       scope.Insert (paramName.variable_ident, param.type.get ());\n     }\n \n+  // ensure the return type is resolved\n+  if (function.has_function_return_type ())\n+    {\n+      if (!isTypeInScope (function.return_type.get (), function.locus))\n+\treturn;\n+    }\n+\n   // walk the expression body\n   for (auto &stmt : function.function_body->statements)\n     {"}, {"sha": "115526780cfe6fe63dc2aa2302ed62222d6161f4", "filename": "gcc/rust/analysis/rust-type-resolution.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83e46cd082ad4dfdced2eba3369f7e3ae3802ec/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83e46cd082ad4dfdced2eba3369f7e3ae3802ec/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h?ref=e83e46cd082ad4dfdced2eba3369f7e3ae3802ec", "patch": "@@ -221,6 +221,7 @@ class TypeResolution : public Resolution\n   bool go () override;\n   bool typesAreCompatible (AST::Type *lhs, AST::Type *rhs, Location locus);\n   AST::Function *lookupFndecl (AST::Expr *expr);\n+  bool isTypeInScope (AST::Type *type, Location locus);\n \n   Scope<AST::Function *> functionScope;\n };"}]}