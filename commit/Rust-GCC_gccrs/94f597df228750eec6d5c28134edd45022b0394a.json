{"sha": "94f597df228750eec6d5c28134edd45022b0394a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmNTk3ZGYyMjg3NTBlZWM2ZDVjMjgxMzRlZGQ0NTAyMmIwMzk0YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-11-30T01:13:37Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-11-30T01:13:37Z"}, "message": "substring locations and # line directives (PR preprocessor/78569)\n\nThe ICE in PR preprocessor/78569 appears to be due to an attempt to\ngenerate substring locations in a .i file where the underlying .c file\nhas changed since the .i file was generated.\n\nThis can't work, so it seems safest for the on-demand substring\nlocations to be unavailable for such files, falling back to\n\"whole string\" locations for such cases.\n\ngcc/ChangeLog:\n\tPR preprocessor/78569\n\t* input.c (get_substring_ranges_for_loc): Fail gracefully if\n\tline directives were present.\n\ngcc/testsuite/ChangeLog:\n\tPR preprocessor/78569\n\t* gcc.dg/format/pr78569.c: New test case.\n\nFrom-SVN: r242990", "tree": {"sha": "977d5229cdf9b708bbd2e09cc532aab26e12f656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/977d5229cdf9b708bbd2e09cc532aab26e12f656"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94f597df228750eec6d5c28134edd45022b0394a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f597df228750eec6d5c28134edd45022b0394a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f597df228750eec6d5c28134edd45022b0394a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f597df228750eec6d5c28134edd45022b0394a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3517d13be77399582c2068eb2c26881864ed110e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3517d13be77399582c2068eb2c26881864ed110e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3517d13be77399582c2068eb2c26881864ed110e"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "2af1d979dcff8310281183e6583d0968b0401cef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f597df228750eec6d5c28134edd45022b0394a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f597df228750eec6d5c28134edd45022b0394a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94f597df228750eec6d5c28134edd45022b0394a", "patch": "@@ -1,3 +1,9 @@\n+2016-11-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/78569\n+\t* input.c (get_substring_ranges_for_loc): Fail gracefully if\n+\tline directives were present.\n+\n 2016-11-30  Matthias Klose  <doko@ubuntu.com>\n \n \t* doc/install.texi: Document configure options --enable-objc-gc"}, {"sha": "1c7228a00806d43a7af1b35300334906e81d40be", "filename": "gcc/input.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f597df228750eec6d5c28134edd45022b0394a/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f597df228750eec6d5c28134edd45022b0394a/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=94f597df228750eec6d5c28134edd45022b0394a", "patch": "@@ -1331,6 +1331,16 @@ get_substring_ranges_for_loc (cpp_reader *pfile,\n   if (cpp_get_options (pfile)->track_macro_expansion != 2)\n     return \"track_macro_expansion != 2\";\n \n+  /* If #line or # 44 \"file\"-style directives are present, then there's\n+     no guarantee that the line numbers we have can be used to locate\n+     the strings.  For example, we might have a .i file with # directives\n+     pointing back to lines within a .c file, but the .c file might\n+     have been edited since the .i file was created.\n+     In such a case, the safest course is to disable on-demand substring\n+     locations.  */\n+  if (line_table->seen_line_directive)\n+    return \"seen line directive\";\n+\n   /* If string concatenation has occurred at STRLOC, get the locations\n      of all of the literal tokens making up the compound string.\n      Otherwise, just use STRLOC.  */"}, {"sha": "aeac71a5847bcafb2fb88a151284a11bff147d47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f597df228750eec6d5c28134edd45022b0394a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f597df228750eec6d5c28134edd45022b0394a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94f597df228750eec6d5c28134edd45022b0394a", "patch": "@@ -1,3 +1,8 @@\n+2016-11-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/78569\n+\t* gcc.dg/format/pr78569.c: New test case.\n+\n 2016-11-29  Martin Sebor  <msebor@redhat.com>\n \n \tavoid false positives on ILP32 targets."}, {"sha": "e827087e1c3c09679778c1c014ae49ac6049df6e", "filename": "gcc/testsuite/gcc.dg/format/pr78569.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f597df228750eec6d5c28134edd45022b0394a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78569.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f597df228750eec6d5c28134edd45022b0394a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78569.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78569.c?ref=94f597df228750eec6d5c28134edd45022b0394a", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat-length\" } */\n+\n+/* A run of blank lines, so that we would fail the assertion in input.c:1388:\n+   gcc_assert (line_width >= (start.column - 1 + literal_length));  */\n+\n+\n+\n+\n+\n+void test (void)\n+{\n+  char tmp[128];\n+  /* Point to the run of blank lines, so that the components of the overlong\n+     string appear to be present within the run of blank lines.  */\n+# 6 \"../../../../src/gcc/testsuite/gcc.dg/format/pr78569.c\"\n+  __builtin_snprintf (tmp, sizeof(tmp),\n+\t\t      \"The Base Band sends this value as a response to a \"\n+\t\t      \"request for IMSI detach sent over the control \"\n+\t\t      \"channel uplink (see section 7.6.1).\");\n+\n+  /* { dg-warning \"output truncated\" \"\" { target *-*-* } 7 } */\n+  /* { dg-message \"format output\" \"\" { target *-*-* } 6 } */\n+}"}]}