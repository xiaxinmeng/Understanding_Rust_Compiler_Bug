{"sha": "a733dea9e7c39352ce9f72059938833eaa819467", "node_id": "C_kwDOANBUbNoAKGE3MzNkZWE5ZTdjMzkzNTJjZTlmNzIwNTk5Mzg4MzNlYWE4MTk0Njc", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-29T19:01:12Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-04T20:06:02Z"}, "message": "c++: wrong parse with functors [PR64679]\n\nConsider\n\n  struct F {\n    F(int) {}\n    F operator()(int) const { return *this; }\n  };\n\nand\n\n  F(i)(0)(0);\n\nwhere we're supposed to first call the constructor and then invoke\nthe operator() twice.  However, we parse this as an init-declarator:\n\"(i)\" looks like a perfectly valid declarator, then we see an '(' and\nthink it must be an initializer, so we commit and we're toast.  My\nfix is to look a little bit farther before deciding we've seen an\ninitializer.\n\nThis is only a half of c++/64679, the other part of the PR is unrelated:\nthere the problem is that we are calling pushdecl while parsing\ntentatively (in cp_parser_parameter_declaration_list), which is bad.\n\n\tPR c++/64679\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_parser_init_declarator): Properly handle a series of\n\toperator() calls, they are not part of an init-declarator.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/parse/functor1.C: New test.", "tree": {"sha": "ccbeda72833e32500b8619ca0db65eea7c174725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccbeda72833e32500b8619ca0db65eea7c174725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a733dea9e7c39352ce9f72059938833eaa819467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a733dea9e7c39352ce9f72059938833eaa819467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a733dea9e7c39352ce9f72059938833eaa819467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a733dea9e7c39352ce9f72059938833eaa819467/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8df7208864d863f58da55d42ff82663059930b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8df7208864d863f58da55d42ff82663059930b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8df7208864d863f58da55d42ff82663059930b1"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "b52cbe18b9af6fe2749aa736b41e30aca1184d4e", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a733dea9e7c39352ce9f72059938833eaa819467/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a733dea9e7c39352ce9f72059938833eaa819467/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=a733dea9e7c39352ce9f72059938833eaa819467", "patch": "@@ -22636,11 +22636,34 @@ cp_parser_init_declarator (cp_parser* parser,\n       return error_mark_node;\n     }\n \n-  /* An `=' or an `(', or an '{' in C++0x, indicates an initializer.  */\n+  /* An `=' or an '{' in C++11, indicate an initializer.  An '(' may indicate\n+     an initializer as well. */\n   if (token->type == CPP_EQ\n       || token->type == CPP_OPEN_PAREN\n       || token->type == CPP_OPEN_BRACE)\n     {\n+      /* Don't get fooled into thinking that F(i)(1)(2) is an initializer.\n+\t It isn't; it's an expression.  (Here '(i)' would have already been\n+\t parsed as a declarator.)   */\n+      if (token->type == CPP_OPEN_PAREN\n+\t  && cp_parser_uncommitted_to_tentative_parse_p (parser))\n+\t{\n+\t  cp_lexer_save_tokens (parser->lexer);\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  cp_parser_skip_to_closing_parenthesis (parser,\n+\t\t\t\t\t\t /*recovering*/false,\n+\t\t\t\t\t\t /*or_comma*/false,\n+\t\t\t\t\t\t /*consume_paren*/true);\n+\t  /* If this is an initializer, only a ',' or ';' can follow: either\n+\t     we have another init-declarator, or we're at the end of an\n+\t     init-declarator-list which can only be followed by a ';'.  */\n+\t  bool ok = (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON)\n+\t\t     || cp_lexer_next_token_is (parser->lexer, CPP_COMMA));\n+\t  cp_lexer_rollback_tokens (parser->lexer);\n+\t  if (__builtin_expect (!ok, 0))\n+\t    /* Not an init-declarator.  */\n+\t    return error_mark_node;\n+\t}\n       is_initialized = SD_INITIALIZED;\n       initialization_kind = token->type;\n       declarator->init_loc = token->location;"}, {"sha": "c014114c098a5d279bdfd4fa84dca99206fdd1dd", "filename": "gcc/testsuite/g++.dg/parse/functor1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a733dea9e7c39352ce9f72059938833eaa819467/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffunctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a733dea9e7c39352ce9f72059938833eaa819467/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffunctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffunctor1.C?ref=a733dea9e7c39352ce9f72059938833eaa819467", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/64679\n+// { dg-do run }\n+\n+struct F {\n+  F(int) { }\n+  F(int, int) { }\n+  F operator()(int) const { return *this; }\n+  F operator()(int, int) const { return *this; }\n+};\n+\n+int main()\n+{\n+  // Init-declarators.\n+  int i = 0;\n+  int (j)(1);\n+  // None of these is an init-declarator.\n+  F(i)(1)(2);\n+  F(i)(1, 2)(3);\n+  F(i)(1)(2, 3);\n+  F(i)(2)(3)(4)(5);\n+  F(i, j)(1)(2)(3)(4)(5)(6);\n+}"}]}