{"sha": "3d1953912dca5809d9e37fccd9ee606d5b637dc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QxOTUzOTEyZGNhNTgwOWQ5ZTM3ZmNjZDllZTYwNmQ1YjYzN2RjNA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-07-23T19:58:32Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-07-23T19:58:32Z"}, "message": "install EH code\n\nFrom-SVN: r12548", "tree": {"sha": "1c0bd0746f99e312b8963dffdd68f8232301c95b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c0bd0746f99e312b8963dffdd68f8232301c95b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d1953912dca5809d9e37fccd9ee606d5b637dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d1953912dca5809d9e37fccd9ee606d5b637dc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d1953912dca5809d9e37fccd9ee606d5b637dc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d1953912dca5809d9e37fccd9ee606d5b637dc4/comments", "author": null, "committer": null, "parents": [{"sha": "84f414bc1f23881578336f4758a00538711f1bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f414bc1f23881578336f4758a00538711f1bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f414bc1f23881578336f4758a00538711f1bbc"}], "stats": {"total": 108, "additions": 73, "deletions": 35}, "files": [{"sha": "76616a8e3cf2551759b45ebb64f002e54bfaafce", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3d1953912dca5809d9e37fccd9ee606d5b637dc4", "patch": "@@ -528,8 +528,8 @@ BC_ALL = bc-arity.h bc-opcode.h bc-opname.h\n \n # Language-independent object files.\n OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o \\\n- function.o stmt.o expr.o calls.o expmed.o explow.o optabs.o varasm.o \\\n- rtl.o print-rtl.o rtlanal.o emit-rtl.o real.o \\\n+ function.o stmt.o except.o expr.o calls.o expmed.o explow.o optabs.o \\\n+ varasm.o rtl.o print-rtl.o rtlanal.o emit-rtl.o real.o \\\n  dbxout.o sdbout.o dwarfout.o dwarf2out.o xcoffout.o \\\n  integrate.o jump.o cse.o loop.o unroll.o flow.o stupid.o combine.o \\\n  regclass.o local-alloc.o global.o reload.o reload1.o caller-save.o \\\n@@ -1209,9 +1209,12 @@ function.o : function.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n    insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \\\n    recog.h output.h bytecode.h bc-emit.h\n stmt.o : stmt.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n-   insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h loop.h \\\n-   recog.h bytecode.h bc-typecd.h bc-typecd.def bc-opcode.h bc-optab.h \\\n-   bc-emit.h\n+   insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h except.h \\\n+   loop.h recog.h bytecode.h bc-typecd.h bc-typecd.def bc-opcode.h \\\n+   bc-optab.h bc-emit.h\n+except.o : except.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n+   insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \\\n+   recog.h output.h except.h\n expr.o : expr.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h regs.h \\\n    insn-flags.h insn-codes.h expr.h insn-config.h recog.h output.h \\\n    typeclass.h bytecode.h bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h \\\n@@ -1279,7 +1282,7 @@ reorg.o : reorg.c $(CONFIG_H) $(RTL_H) conditions.h hard-reg-set.h \\\n sched.o : sched.c $(CONFIG_H) $(RTL_H) basic-block.h regs.h hard-reg-set.h \\\n    flags.h insn-config.h insn-attr.h\n final.o : final.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h regs.h \\\n-   recog.h conditions.h insn-config.h insn-attr.h real.h output.h \\\n+   recog.h conditions.h insn-config.h insn-attr.h except.h real.h output.h \\\n    hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h defaults.h\n recog.o : recog.c $(CONFIG_H) $(RTL_H)  \\\n    regs.h recog.h hard-reg-set.h flags.h insn-config.h insn-attr.h \\"}, {"sha": "5dc9bcd828e9ec3d06344713e010cd0696c14f4c", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3d1953912dca5809d9e37fccd9ee606d5b637dc4", "patch": "@@ -27,6 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n+#include \"except.h\"\n #include \"function.h\"\n #include \"insn-flags.h\"\n #include \"insn-codes.h\"\n@@ -210,7 +211,6 @@ static void do_jump_for_compare\tPROTO((rtx, rtx, rtx));\n static rtx compare\t\tPROTO((tree, enum rtx_code, enum rtx_code));\n static rtx do_store_flag\tPROTO((tree, rtx, enum machine_mode, int));\n static tree defer_cleanups_to\tPROTO((tree));\n-extern void (*interim_eh_hook)\tPROTO((tree));\n extern tree truthvalue_conversion       PROTO((tree));\n \n /* Record for each mode whether we can move a register directly to or\n@@ -5689,7 +5689,7 @@ expand_expr (exp, target, tmode, modifier)\n \t    = tree_cons (NULL_TREE, TREE_OPERAND (exp, 2), cleanups_this_call);\n \t  /* That's it for this cleanup.  */\n \t  TREE_OPERAND (exp, 2) = 0;\n-\t  (*interim_eh_hook) (NULL_TREE);\n+\t  expand_eh_region_start ();\n \t}\n       return RTL_EXPR_RTL (exp);\n \n@@ -6723,10 +6723,10 @@ expand_expr (exp, target, tmode, modifier)\n \n \t    pop_obstacks ();\n \n-\t    /* Now add in the conditionalized cleanups. */\n+\t    /* Now add in the conditionalized cleanups.  */\n \t    cleanups_this_call\n \t      = tree_cons (NULL_TREE, new_cleanups, cleanups_this_call);\n-\t    (*interim_eh_hook) (NULL_TREE);\n+\t    expand_eh_region_start ();\n \t  }\n \treturn temp;\n       }\n@@ -6815,7 +6815,7 @@ expand_expr (exp, target, tmode, modifier)\n \t    cleanups_this_call = tree_cons (NULL_TREE,\n \t\t\t\t\t    cleanups,\n \t\t\t\t\t    cleanups_this_call);\n-\t    (*interim_eh_hook) (NULL_TREE);\n+\t    expand_eh_region_start ();\n \t  }\n \t\n \treturn target;\n@@ -9731,7 +9731,7 @@ defer_cleanups_to (old_cleanups)\n \n   while (cleanups_this_call != old_cleanups)\n     {\n-      (*interim_eh_hook) (TREE_VALUE (cleanups_this_call));\n+      expand_eh_region_end (TREE_VALUE (cleanups_this_call));\n       last = cleanups_this_call;\n       cleanups_this_call = TREE_CHAIN (cleanups_this_call);\n     }      \n@@ -9774,7 +9774,7 @@ expand_cleanups_to (old_cleanups)\n {\n   while (cleanups_this_call != old_cleanups)\n     {\n-      (*interim_eh_hook) (TREE_VALUE (cleanups_this_call));\n+      expand_eh_region_end (TREE_VALUE (cleanups_this_call));\n       expand_expr (TREE_VALUE (cleanups_this_call), const0_rtx, VOIDmode, 0);\n       cleanups_this_call = TREE_CHAIN (cleanups_this_call);\n     }\n@@ -9973,10 +9973,10 @@ do_jump (exp, if_false_label, if_true_label)\n \n \t    pop_obstacks ();\n \n-\t    /* Now add in the conditionalized cleanups. */\n+\t    /* Now add in the conditionalized cleanups.  */\n \t    cleanups_this_call\n \t      = tree_cons (NULL_TREE, new_cleanups, cleanups_this_call);\n-\t    (*interim_eh_hook) (NULL_TREE);\n+\t    expand_eh_region_start ();\n \t  }\n \telse\n \t  {\n@@ -10037,10 +10037,10 @@ do_jump (exp, if_false_label, if_true_label)\n \n \t    pop_obstacks ();\n \n-\t    /* Now add in the conditionalized cleanups. */\n+\t    /* Now add in the conditionalized cleanups.  */\n \t    cleanups_this_call\n \t      = tree_cons (NULL_TREE, new_cleanups, cleanups_this_call);\n-\t    (*interim_eh_hook) (NULL_TREE);\n+\t    expand_eh_region_start ();\n \t  }\n \telse\n \t  {"}, {"sha": "c5200e8eba8630aace8268bbce51048f825af696", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=3d1953912dca5809d9e37fccd9ee606d5b637dc4", "patch": "@@ -358,6 +358,8 @@ extern rtx bcmp_libfunc;\n extern rtx memset_libfunc;\n extern rtx bzero_libfunc;\n \n+extern rtx throw_libfunc;\n+\n extern rtx eqhf2_libfunc;\n extern rtx nehf2_libfunc;\n extern rtx gthf2_libfunc;"}, {"sha": "d3e329efdb27548c409769ef22fa287606eed6d1", "filename": "gcc/final.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=3d1953912dca5809d9e37fccd9ee606d5b637dc4", "patch": "@@ -67,6 +67,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"hard-reg-set.h\"\n #include \"defaults.h\"\n #include \"output.h\"\n+#include \"except.h\"\n \n /* Get N_SLINE and N_SOL from stab.h if we can expect the file to exist.  */\n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n@@ -1196,6 +1197,8 @@ final (first, file, optimize, prescan)\n   last_ignored_compare = 0;\n   new_block = 1;\n \n+  check_exception_handler_labels ();\n+\n   /* Make a map indicating which line numbers appear in this function.\n      When producing SDB debugging info, delete troublesome line number\n      notes from inlined functions in other files as well as duplicate\n@@ -1298,6 +1301,25 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n       if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_END)\n \tbreak;\n \n+      if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG)\n+\t{\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"LEHB\", NOTE_BLOCK_NUMBER (insn));\n+\t  add_eh_table_entry (NOTE_BLOCK_NUMBER (insn));\n+#ifdef ASM_OUTPUT_EH_REGION_BEG\n+\t  ASM_OUTPUT_EH_REGION_BEG (file, NOTE_BLOCK_NUMBER (insn));\n+#endif\n+\t  break;\n+\t}\n+\n+      if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_END)\n+\t{\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"LEHE\", NOTE_BLOCK_NUMBER (insn));\n+#ifdef ASM_OUTPUT_EH_REGION_END\n+\t  ASM_OUTPUT_EH_REGION_END (file, NOTE_BLOCK_NUMBER (insn));\n+#endif\n+\t  break;\n+\t}\n+\n       if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_PROLOGUE_END)\n \t{\n #ifdef FUNCTION_END_PROLOGUE"}, {"sha": "d38e56df64ec4229d8574b0da1bacf6331dbc4f0", "filename": "gcc/flow.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=3d1953912dca5809d9e37fccd9ee606d5b637dc4", "patch": "@@ -117,6 +117,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"hard-reg-set.h\"\n #include \"flags.h\"\n #include \"output.h\"\n+#include \"except.h\"\n \n #include \"obstack.h\"\n #define obstack_chunk_alloc xmalloc\n@@ -510,6 +511,9 @@ find_basic_blocks (f, nonlocal_label_list)\n     if (! LABEL_REF_NONLOCAL_P (x))\n       block_live[BLOCK_NUM (XEXP (x, 0))] = 1;\n \n+  for (x = exception_handler_labels; x; x = XEXP (x, 1))\n+    block_live[BLOCK_NUM (XEXP (x, 0))] = 1;\n+\n   /* Record which basic blocks control can drop in to.  */\n \n   for (i = 0; i < n_basic_blocks; i++)"}, {"sha": "7a366b4e46f5a0a402e1b11551d4f50c5a89e07c", "filename": "gcc/rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=3d1953912dca5809d9e37fccd9ee606d5b637dc4", "patch": "@@ -172,7 +172,8 @@ char *note_insn_name[] = { 0                    , \"NOTE_INSN_DELETED\",\n \t\t\t   \"NOTE_INSN_FUNCTION_END\", \"NOTE_INSN_SETJMP\",\n \t\t\t   \"NOTE_INSN_LOOP_CONT\", \"NOTE_INSN_LOOP_VTOP\",\n \t\t\t   \"NOTE_INSN_PROLOGUE_END\", \"NOTE_INSN_EPILOGUE_BEG\",\n-\t\t\t   \"NOTE_INSN_DELETED_LABEL\", \"NOTE_INSN_FUNCTION_BEG\"};\n+\t\t\t   \"NOTE_INSN_DELETED_LABEL\", \"NOTE_INSN_FUNCTION_BEG\",\n+\t\t\t   \"NOTE_INSN_EH_REGION_BEG\", \"NOTE_INSN_EH_REGION_END\"};\n \n char *reg_note_name[] = { \"\", \"REG_DEAD\", \"REG_INC\", \"REG_EQUIV\", \"REG_WAS_0\",\n \t\t\t  \"REG_EQUAL\", \"REG_RETVAL\", \"REG_LIBCALL\","}, {"sha": "6c13ac748b54eef8431bb232ec19691206479345", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3d1953912dca5809d9e37fccd9ee606d5b637dc4", "patch": "@@ -384,6 +384,9 @@ extern char *reg_note_name[];\n    i.e. the point just after all of the parms have been moved into\n    their homes, etc.  */\n #define NOTE_INSN_FUNCTION_BEG -13\n+/* These note where exception handling regions begin and end.  */\n+#define NOTE_INSN_EH_REGION_BEG -14\n+#define NOTE_INSN_EH_REGION_END -15\n \n \n #if 0 /* These are not used, and I don't know what they were for. --rms.  */"}, {"sha": "a21e2d66de7914e3cc2fc8a6be92745c0b27315e", "filename": "gcc/toplev.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1953912dca5809d9e37fccd9ee606d5b637dc4/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3d1953912dca5809d9e37fccd9ee606d5b637dc4", "patch": "@@ -62,6 +62,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"bytecode.h\"\n #include \"bc-emit.h\"\n+#include \"except.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\n@@ -271,12 +272,6 @@ struct rtx_def *(*lang_expand_expr) ();\n \n void (*incomplete_decl_finalize_hook) () = 0;\n \n-/* Pointer to function for interim exception handling implementation.\n-   This interface will change, and it is only here until a better interface\n-   replaces it.  */\n-\n-void (*interim_eh_hook)\tPROTO((tree));\n-\n /* Highest label number used at the end of reload.  */\n \n int max_label_num_after_reload;\n@@ -492,8 +487,13 @@ int flag_short_temps;\n \n int flag_pic;\n \n+/* Nonzero means generate extra code for exception handling and enable\n+   exception handling.  */\n+\n+int flag_exceptions = 1;\n+\n /* Nonzero means don't place uninitialized global data in common storage\n-   by default. */\n+   by default.  */\n \n int flag_no_common;\n \n@@ -593,6 +593,7 @@ struct { char *string; int *variable; int on_value;} f_options[] =\n   {\"schedule-insns2\", &flag_schedule_insns_after_reload, 1},\n   {\"pic\", &flag_pic, 1},\n   {\"PIC\", &flag_pic, 2},\n+  {\"exceptions\", &flag_exceptions, 1},\n   {\"fast-math\", &flag_fast_math, 1},\n   {\"common\", &flag_no_common, 0},\n   {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1},\n@@ -997,15 +998,6 @@ decl_name (decl, kind)\n {\n   return IDENTIFIER_POINTER (DECL_NAME (decl));\n }\n-\n-/* This is the default interim_eh_hook function.  */\n-\n-void\n-interim_eh (finalization)\n-     tree finalization;\n-{\n-  /* Don't do anything by default.  */\n-}\n \f\n static int need_error_newline;\n \n@@ -2416,6 +2408,12 @@ compile_file (name)\n \t  }\n       }\n \n+    /* Now that all possible functions have been output, we can dump\n+       the exception table.  */\n+\n+    if (exception_table_p ())\n+      output_exception_table ();\n+\n     for (i = 0; i < len; i++)\n       {\n \tdecl = vec[i];\n@@ -2894,6 +2892,9 @@ rest_of_compilation (decl)\n     FINALIZE_PIC;\n #endif\n \n+  /* Add an unwinder for exception handling, if needed.  */\n+  emit_unwinder ();\n+\n   insns = get_insns ();\n \n   /* Copy any shared structure that should not be shared.  */\n@@ -2909,6 +2910,9 @@ rest_of_compilation (decl)\n      for all references to such slots.  */\n /*   fixup_stack_slots (); */\n \n+  /* Find all the EH handlers.  */\n+  find_exception_handler_labels ();\n+\n   /* Always do one jump optimization pass to ensure that JUMP_LABEL fields\n      are initialized and to compute whether control can drop off the end\n      of the function.  */\n@@ -3430,7 +3434,6 @@ main (argc, argv, envp)\n \n   decl_printable_name = decl_name;\n   lang_expand_expr = (struct rtx_def *(*)()) do_abort;\n-  interim_eh_hook = interim_eh;\n \n   /* Initialize whether `char' is signed.  */\n   flag_signed_char = DEFAULT_SIGNED_CHAR;"}]}