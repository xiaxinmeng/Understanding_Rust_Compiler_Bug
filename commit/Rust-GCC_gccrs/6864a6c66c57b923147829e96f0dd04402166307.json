{"sha": "6864a6c66c57b923147829e96f0dd04402166307", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg2NGE2YzY2YzU3YjkyMzE0NzgyOWU5NmYwZGQwNDQwMjE2NjMwNw==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-12-02T19:01:16Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-12-02T19:01:16Z"}, "message": "Kaveh's warning patch from 11/19\n\nFrom-SVN: r37958", "tree": {"sha": "1439094d4910509d094ac139d17d6f337d42620c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1439094d4910509d094ac139d17d6f337d42620c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6864a6c66c57b923147829e96f0dd04402166307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6864a6c66c57b923147829e96f0dd04402166307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6864a6c66c57b923147829e96f0dd04402166307", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6864a6c66c57b923147829e96f0dd04402166307/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c864b9a567408f8de4acc573074961bd5704750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c864b9a567408f8de4acc573074961bd5704750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c864b9a567408f8de4acc573074961bd5704750"}], "stats": {"total": 108, "additions": 74, "deletions": 34}, "files": [{"sha": "2dcd42f3b8f9c1064de191a0dffadfdb8c86a9c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6864a6c66c57b923147829e96f0dd04402166307/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6864a6c66c57b923147829e96f0dd04402166307/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6864a6c66c57b923147829e96f0dd04402166307", "patch": "@@ -1,3 +1,25 @@\n+2000-12-02  Bruce Korb  <bkorb@gnu.org>\n+\n+\tFrom: 2000-11-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fixfixes.c (emit_gnu_type, format_write): Prototype.\n+\t(format_write, char_macro_use_fix, char_macro_def_fix): Use gcc's\n+\tcustom uppercase ctype macros.\n+\t* fixincl.c (do_version): Make static and add ATTRIBUTE_NORETURN.\n+\tUse gcc's custom uppercase ctype macros.\n+\t(main): Prototype.\n+\t(machine_matches): Add static prototype and constify variable.\n+\t(create_file, test_test, egrep_test): Add static prototype.\n+\t(quoted_file_exists): Likewise, and constify parameters.\n+\t(extract_quoted_files, internal_fix, start_fixer, fix_applies,\n+\twrite_replacement, test_for_changes): Add static prototype.\n+\t(write_replacement, test_for_changes): Delete excess argument to\n+\t`create_file'.\n+\t* fixtests.c (test): Make static.\n+\t* server.c (load_data, sig_handler, server_setup, find_shell): Add\n+\tstatic prototype.\n+\t(sig_handler): Mark parameter with ATTRIBUTE_UNUSED.\n+\n 2000-12-02  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixnc/mkfixinc.sh(msdosdjgpp): remove from fixincludes exception list"}, {"sha": "482bb4fee37c3450b68851aa16486d909dca944c", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6864a6c66c57b923147829e96f0dd04402166307/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6864a6c66c57b923147829e96f0dd04402166307/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=6864a6c66c57b923147829e96f0dd04402166307", "patch": "@@ -138,6 +138,7 @@ print_quote( q, text )\n  *  this thing can be encountered countless times during a compile\n  *  and not cause even a warning.\n  */\n+static const char *emit_gnu_type PARAMS ((const char *, regmatch_t *));\n static const char*\n emit_gnu_type ( text, rm )\n   const char* text;\n@@ -188,6 +189,7 @@ typedef __%s_TYPE__ %s_t;\\n\\\n  *  '%' characters in other contexts and all other characters are\n  *  copied out verbatim.\n  */\n+static void format_write PARAMS ((tCC *, tCC *, regmatch_t[]));\n static void\n format_write (format, text, av)\n      tCC* format;\n@@ -212,7 +214,7 @@ format_write (format, text, av)\n      *  not emit the following character.  We will end on\n      *  a NUL and we will emit only one of a pair of '%'.\n      */\n-    if (! isdigit( c ))\n+    if (! ISDIGIT ( c ))\n       {\n         putchar( '%' );\n         switch (c) {\n@@ -373,12 +375,12 @@ FIX_PROC_HEAD( char_macro_use_fix )\n       /* Found STR on this line.  If the macro needs fixing,\n \t the next few chars will be whitespace or uppercase,\n \t then an open paren, then a single letter.  */\n-      while ((isspace (*p) || isupper (*p)) && p < limit) p++;\n+      while ((ISSPACE (*p) || ISUPPER (*p)) && p < limit) p++;\n       if (*p++ != '(')\n \tcontinue;\n-      if (!isalpha (*p))\n+      if (!ISALPHA (*p))\n \tcontinue;\n-      if (isalnum (p[1]) || p[1] == '_')\n+      if (ISALNUM (p[1]) || p[1] == '_')\n \tcontinue;\n \n       /* Splat all preceding text into the output buffer,\n@@ -450,7 +452,7 @@ FIX_PROC_HEAD( char_macro_def_fix )\n \t    goto found;\n \t  p++;\n \t}\n-      while (isalpha (*p) || isalnum (*p) || *p == '_');\n+      while (ISALPHA (*p) || ISALNUM (*p) || *p == '_');\n       /* Hit end of macro name without finding the string.  */\n       continue;\n \n@@ -459,12 +461,12 @@ FIX_PROC_HEAD( char_macro_def_fix )\n \t there may be a few uppercase letters, then there will be an\n \t open paren with _no_ intervening whitespace, and then a\n \t single letter.  */\n-      while (isupper (*p) && p < limit) p++;\n+      while (ISUPPER (*p) && p < limit) p++;\n       if (*p++ != '(')\n \tcontinue;\n-      if (!isalpha (*p))\n+      if (!ISALPHA (*p))\n \tcontinue;\n-      if (isalnum (p[1]) || p[1] == '_')\n+      if (ISALNUM (p[1]) || p[1] == '_')\n \tcontinue;\n \n       /* The character at P is the one to look for in the following\n@@ -604,10 +606,10 @@ FIX_PROC_HEAD( wrap_fix )\n   for (;;) {\n     char ch = *(pz_src++);\n \n-    if (islower(ch))\n-      *(pz_dst++) = toupper( ch );\n+    if (ISLOWER (ch))\n+      *(pz_dst++) = TOUPPER ( ch );\n \n-    else if (isalnum( ch ))\n+    else if (ISALNUM ( ch ))\n       *(pz_dst++) = ch;\n \n     else if (ch == NUL) {\n@@ -756,7 +758,7 @@ main( argc, argv )\n     char* pz = argv[1];\n     long  idx;\n \n-    if (! isdigit( *pz ))\n+    if (! ISDIGIT ( *pz ))\n       goto usage_failure;\n \n     idx = strtol( pz, &pz, 10 );"}, {"sha": "be7e9d84a3cae61e2e3a0a9aeb48063e330641fd", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6864a6c66c57b923147829e96f0dd04402166307/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6864a6c66c57b923147829e96f0dd04402166307/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=6864a6c66c57b923147829e96f0dd04402166307", "patch": "@@ -93,7 +93,7 @@ const char incl_quote_pat[] = \"^[ \\t]*#[ \\t]*include[ \\t]*\\\"[^/]\";\n tSCC z_fork_err[] = \"Error %d (%s) starting filter process for %s\\n\";\n regex_t incl_quote_re;\n \n-void do_version   PARAMS((void));\n+static void do_version   PARAMS((void)) ATTRIBUTE_NORETURN;\n char *load_file   PARAMS((const char *));\n void run_compiles PARAMS((void));\n void initialize   PARAMS((int argc,char** argv));\n@@ -107,6 +107,7 @@ void process      PARAMS((void));\n  *\n  *  MAIN ROUTINE\n  */\n+extern int main PARAMS ((int, char **));\n int\n main (argc, argv)\n      int argc;\n@@ -188,7 +189,7 @@ Altering  %5d of them\\n\";\n }\n \n \n-void\n+static void\n do_version ()\n {\n   static const char zFmt[] = \"echo '%s'\";\n@@ -258,7 +259,7 @@ ENV_TABLE\n \n #undef _ENV_\n \n-  if (isdigit( *pz_verbose ))\n+  if (ISDIGIT ( *pz_verbose ))\n     verbose_level = (te_verbose)atoi( pz_verbose );\n   else\n     switch (*pz_verbose) {\n@@ -376,7 +377,8 @@ load_file ( fname )\n   return res;\n }\n \n-int\n+static int machine_matches PARAMS ((tFixDesc *));\n+static int\n machine_matches( p_fixd )\n   tFixDesc *p_fixd;\n         {\n@@ -390,7 +392,7 @@ machine_matches( p_fixd )\n \n           const char **papz_machs = p_fixd->papz_machs;\n           char *pz;\n-          char *pz_sep = \"\";\n+          const char *pz_sep = \"\";\n           tCC *pz_if_true;\n           tCC *pz_if_false;\n           char cmd_buf[ MACH_LIST_SIZE_LIMIT ]; /* size lim from fixincl.tpl */\n@@ -547,7 +549,8 @@ run_compiles ()\n #endif\n \n \n-FILE *\n+static FILE *create_file PARAMS ((void));\n+static FILE *\n create_file ()\n {\n   int fd;\n@@ -611,7 +614,8 @@ create_file ()\n   Result: APPLY_FIX or SKIP_FIX, depending on the result of the\n           shell script we run.  */\n #ifndef __MSDOS__\n-int\n+static int test_test PARAMS ((tTestDesc *, char *));\n+static int\n test_test (p_test, pz_test_file)\n      tTestDesc *p_test;\n      char*      pz_test_file;\n@@ -666,7 +670,8 @@ fi\";\n   The caller may choose to reverse meaning if the sense of the test\n   is inverted.  */\n \n-int\n+static int egrep_test PARAMS ((char *, tTestDesc *));\n+static int\n egrep_test (pz_data, p_test)\n      char *pz_data;\n      tTestDesc *p_test;\n@@ -688,11 +693,12 @@ egrep_test (pz_data, p_test)\n   the file name.  If we emit the name, our invoking shell will try\n   to copy a non-existing file into the destination directory.  */\n \n-int\n+static int quoted_file_exists PARAMS ((const char *, const char *, const char *));\n+static int\n quoted_file_exists (pz_src_path, pz_file_path, pz_file)\n-     char* pz_src_path;\n-     char* pz_file_path;\n-     char* pz_file;\n+     const char *pz_src_path;\n+     const char *pz_file_path;\n+     const char *pz_file;\n {\n   char z[ MAXPATHLEN ];\n   char* pz;\n@@ -739,7 +745,8 @@ quoted_file_exists (pz_src_path, pz_file_path, pz_file)\n            for interpretation by the invoking shell  */\n \n \n-void\n+static void extract_quoted_files PARAMS ((char *, const char *, regmatch_t *));\n+static void\n extract_quoted_files (pz_data, pz_fixed_file, p_re_match)\n      char *pz_data;\n      const char *pz_fixed_file;\n@@ -806,7 +813,8 @@ extract_quoted_files (pz_data, pz_fixed_file, p_re_match)\n     Somebody wrote a *_fix subroutine that we must call.\n     */\n #ifndef __MSDOS__\n-int\n+static int internal_fix PARAMS ((int, tFixDesc *));\n+static int\n internal_fix (read_fd, p_fixd)\n   int read_fd;\n   tFixDesc* p_fixd;\n@@ -1012,7 +1020,8 @@ fix_with_system (p_fixd, pz_fix_file, pz_file_source, pz_temp_file)\n     for stdout.  */\n \n #else /* is *NOT* __MSDOS__ */\n-int\n+static int start_fixer PARAMS ((int, tFixDesc *, char *));\n+static int\n start_fixer (read_fd, p_fixd, pz_fix_file)\n   int read_fd;\n   tFixDesc* p_fixd;\n@@ -1086,7 +1095,8 @@ start_fixer (read_fd, p_fixd, pz_fix_file)\n    Input:  the original text of the file and the file's name\n    Result: none.  A new file may or may not be created.  */\n \n-t_bool\n+static t_bool fix_applies PARAMS ((tFixDesc *));\n+static t_bool\n fix_applies (p_fixd)\n   tFixDesc *p_fixd;\n {\n@@ -1200,7 +1210,8 @@ fix_applies (p_fixd)\n \n    Write out a replacement file  */\n \n-void\n+static void write_replacement PARAMS ((tFixDesc *));\n+static void\n write_replacement (p_fixd)\n   tFixDesc *p_fixd;\n {\n@@ -1210,7 +1221,7 @@ write_replacement (p_fixd)\n      return;\n \n    {\n-     FILE* out_fp = create_file (pz_curr_file);\n+     FILE* out_fp = create_file ();\n      fputs (pz_text, out_fp);\n      fclose (out_fp);\n    }\n@@ -1226,7 +1237,8 @@ write_replacement (p_fixd)\n     the matched text and then copy any remaining data from the\n     output of the filter chain.\n     */\n-void\n+static void test_for_changes PARAMS ((int));\n+static void\n test_for_changes (read_fd)\n   int read_fd;\n {\n@@ -1256,7 +1268,7 @@ test_for_changes (read_fd)\n       */\n       else if (ch != *pz_cmp)\n         {\n-          out_fp = create_file (pz_curr_file);\n+          out_fp = create_file ();\n \n #ifdef DO_STATS\n           altered_ct++;"}, {"sha": "75d66c1747451fc7305277e8f9f665527d7fce8b", "filename": "gcc/fixinc/fixtests.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6864a6c66c57b923147829e96f0dd04402166307/gcc%2Ffixinc%2Ffixtests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6864a6c66c57b923147829e96f0dd04402166307/gcc%2Ffixinc%2Ffixtests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixtests.c?ref=6864a6c66c57b923147829e96f0dd04402166307", "patch": "@@ -58,7 +58,7 @@ typedef struct {\n   _FT_( \"machine_name\",     machine_name_test )\n \n #define TEST_FOR_FIX_PROC_HEAD( test )          \\\n-apply_fix_p_t test PARAMS(( tCC* file, tCC* text ));  /* avoid warning */          \\\n+static apply_fix_p_t test PARAMS(( tCC* file, tCC* text ));  \\\n static apply_fix_p_t test ( fname, text )       \\\n     tCC* fname;                                 \\\n     tCC* text;"}, {"sha": "7287ed9d25dd05b51cad7ccbd0d1707cb937075e", "filename": "gcc/fixinc/server.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6864a6c66c57b923147829e96f0dd04402166307/gcc%2Ffixinc%2Fserver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6864a6c66c57b923147829e96f0dd04402166307/gcc%2Ffixinc%2Fserver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fserver.c?ref=6864a6c66c57b923147829e96f0dd04402166307", "patch": "@@ -107,6 +107,7 @@ STATIC t_pchar p_cur_dir = (char *) NULL;\n  *  The read data are stored in a malloc-ed string that is truncated\n  *  to size at the end.  Input is assumed to be an ASCII string.\n  */\n+static char *load_data PARAMS ((FILE *));\n static char *\n load_data (fp)\n      FILE *fp;\n@@ -202,9 +203,10 @@ close_server ()\n  *  to our server, and also that if the server dies, we do not\n  *  die from a sigpipe problem.\n  */\n+static void sig_handler PARAMS ((int));\n static void\n sig_handler (signo)\n-     int signo;\n+     int signo ATTRIBUTE_UNUSED;\n {\n #ifdef DEBUG\n   /* FIXME: this is illegal to do in a signal handler.  */\n@@ -222,6 +224,7 @@ sig_handler (signo)\n  *  Also establishes the current directory to give to the\n  *  server process at the start of every server command.\n  */\n+static void server_setup PARAMS ((void));\n static void\n server_setup ()\n {\n@@ -254,6 +257,7 @@ server_setup ()\n  *  override with $CONFIG_SHELL, so we do the same.\n  */\n \n+static char *find_shell PARAMS ((void));\n static char *\n find_shell ()\n {"}]}