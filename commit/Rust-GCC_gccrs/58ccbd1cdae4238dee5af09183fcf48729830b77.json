{"sha": "58ccbd1cdae4238dee5af09183fcf48729830b77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjY2JkMWNkYWU0MjM4ZGVlNWFmMDkxODNmY2Y0ODcyOTgzMGI3Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-23T08:40:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-23T08:40:19Z"}, "message": "re PR c++/83553 (compiler removes body of the for-loop, although there is a case label inside)\n\n\tPR c++/83553\n\t* fold-const.c (struct contains_label_data): New type.\n\t(contains_label_1): Return non-NULL even for CASE_LABEL_EXPR, unless\n\tinside of a SWITCH_BODY seen during the walk.\n\t(contains_label_p): Use walk_tree instead of\n\twalk_tree_without_duplicates, prepare data for contains_label_1 and\n\tprovide own pset.\n\n\t* c-c++-common/torture/pr83553.c: New test.\n\nFrom-SVN: r255987", "tree": {"sha": "25950ee9e5606ae3ad5f16ee90324afb8f864ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25950ee9e5606ae3ad5f16ee90324afb8f864ac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58ccbd1cdae4238dee5af09183fcf48729830b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ccbd1cdae4238dee5af09183fcf48729830b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58ccbd1cdae4238dee5af09183fcf48729830b77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ccbd1cdae4238dee5af09183fcf48729830b77/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3911519ed5b63c98fa5050aef291b19a40f81fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3911519ed5b63c98fa5050aef291b19a40f81fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3911519ed5b63c98fa5050aef291b19a40f81fcc"}], "stats": {"total": 85, "additions": 78, "deletions": 7}, "files": [{"sha": "f8375f7f66d4e9ae9e0dc900bc844ab26e0e2259", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ccbd1cdae4238dee5af09183fcf48729830b77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ccbd1cdae4238dee5af09183fcf48729830b77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58ccbd1cdae4238dee5af09183fcf48729830b77", "patch": "@@ -1,3 +1,13 @@\n+2017-12-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/83553\n+\t* fold-const.c (struct contains_label_data): New type.\n+\t(contains_label_1): Return non-NULL even for CASE_LABEL_EXPR, unless\n+\tinside of a SWITCH_BODY seen during the walk.\n+\t(contains_label_p): Use walk_tree instead of\n+\twalk_tree_without_duplicates, prepare data for contains_label_1 and\n+\tprovide own pset.\n+\n 2017-12-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/83547"}, {"sha": "10a67b2e5f98be628e5a09f8a690ef8949286b6f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ccbd1cdae4238dee5af09183fcf48729830b77/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ccbd1cdae4238dee5af09183fcf48729830b77/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=58ccbd1cdae4238dee5af09183fcf48729830b77", "patch": "@@ -11218,22 +11218,48 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n     } /* switch (code) */\n }\n \n+/* Used by contains_label_[p1].  */\n+\n+struct contains_label_data\n+{\n+  hash_set<tree> *pset;\n+  bool inside_switch_p;\n+};\n+\n /* Callback for walk_tree, looking for LABEL_EXPR.  Return *TP if it is\n-   a LABEL_EXPR; otherwise return NULL_TREE.  Do not check the subtrees\n-   of GOTO_EXPR.  */\n+   a LABEL_EXPR or CASE_LABEL_EXPR not inside of another SWITCH_EXPR; otherwise\n+   return NULL_TREE.  Do not check the subtrees of GOTO_EXPR.  */\n \n static tree\n-contains_label_1 (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n+contains_label_1 (tree *tp, int *walk_subtrees, void *data)\n {\n+  contains_label_data *d = (contains_label_data *) data;\n   switch (TREE_CODE (*tp))\n     {\n     case LABEL_EXPR:\n       return *tp;\n \n+    case CASE_LABEL_EXPR:\n+      if (!d->inside_switch_p)\n+\treturn *tp;\n+      return NULL_TREE;\n+\n+    case SWITCH_EXPR:\n+      if (!d->inside_switch_p)\n+\t{\n+\t  if (walk_tree (&SWITCH_COND (*tp), contains_label_1, data, d->pset))\n+\t    return *tp;\n+\t  d->inside_switch_p = true;\n+\t  if (walk_tree (&SWITCH_BODY (*tp), contains_label_1, data, d->pset))\n+\t    return *tp;\n+\t  d->inside_switch_p = false;\n+\t  *walk_subtrees = 0;\n+\t}\n+      return NULL_TREE;\n+\n     case GOTO_EXPR:\n       *walk_subtrees = 0;\n-\n-      /* fall through */\n+      return NULL_TREE;\n \n     default:\n       return NULL_TREE;\n@@ -11246,8 +11272,9 @@ contains_label_1 (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n static bool\n contains_label_p (tree st)\n {\n-  return\n-   (walk_tree_without_duplicates (&st, contains_label_1 , NULL) != NULL_TREE);\n+  hash_set<tree> pset;\n+  contains_label_data data = { &pset, false };\n+  return walk_tree (&st, contains_label_1, &data, &pset) != NULL_TREE;\n }\n \n /* Fold a ternary expression of code CODE and type TYPE with operands"}, {"sha": "6e6f67ab71c3129d9c3f9700ff151cc2246eae94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ccbd1cdae4238dee5af09183fcf48729830b77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ccbd1cdae4238dee5af09183fcf48729830b77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58ccbd1cdae4238dee5af09183fcf48729830b77", "patch": "@@ -1,3 +1,8 @@\n+2017-12-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/83553\n+\t* c-c++-common/torture/pr83553.c: New test.\n+\n 2017-12-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/83550"}, {"sha": "c12b79b9e77083101e737dcf187ed57597e83512", "filename": "gcc/testsuite/c-c++-common/torture/pr83553.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ccbd1cdae4238dee5af09183fcf48729830b77/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr83553.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ccbd1cdae4238dee5af09183fcf48729830b77/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr83553.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr83553.c?ref=58ccbd1cdae4238dee5af09183fcf48729830b77", "patch": "@@ -0,0 +1,29 @@\n+/* PR c++/83553 */\n+/* { dg-do run } */\n+\n+int a[3];\n+\n+int\n+foo (int n)\n+{\n+  switch (n)\n+    {\n+    case 0:\n+      for (n = 7, a[0]++; 0; a[2] = a[1] + 1)\n+\t{\n+    case 2:\n+\t  a[1] = a[0] + 1;\n+\t}\n+    }\n+  return n;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (0) != 7 || a[0] != 1 || a[1] || a[2])\n+    __builtin_abort ();\n+  if (foo (2) != 2 || a[0] != 1 || a[1] != 2 || a[2] != 3)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}