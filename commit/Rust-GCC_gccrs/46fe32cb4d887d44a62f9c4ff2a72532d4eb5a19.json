{"sha": "46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "node_id": "C_kwDOANBUbNoAKDQ2ZmUzMmNiNGQ4ODdkNDRhNjJmOWM0ZmYyYTcyNTMyZDRlYjVhMTk", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2023-04-08T06:49:13Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2023-04-08T06:49:13Z"}, "message": "Fortran: Fix dg directives and remove trailing whitespaces in testsuite\n\n2023-04-08   Paul Thomas  <pault@gcc.gnu.org>\n\n\t* gfortran.dg/c-interop/allocatable-optional-pointer.f90 : Fix\n\tdg directive and remove trailing whitespace.\n\t* gfortran.dg/c-interop/c407a-1.f90 : ditto\n\t* gfortran.dg/c-interop/c407b-1.f90 : ditto\n\t* gfortran.dg/c-interop/c407b-2.f90 : ditto\n\t* gfortran.dg/c-interop/c407c-1.f90 : ditto\n\t* gfortran.dg/c-interop/c535a-1.f90 : ditto\n\t* gfortran.dg/c-interop/c535a-2.f90 : ditto\n\t* gfortran.dg/c-interop/c535b-1.f90 : ditto\n\t* gfortran.dg/c-interop/c535b-2.f90 : ditto\n\t* gfortran.dg/c-interop/c535b-3.f90 : ditto\n\t* gfortran.dg/c-interop/c535c-1.f90 : ditto\n\t* gfortran.dg/c-interop/c535c-2.f90 : ditto\n\t* gfortran.dg/c-interop/deferred-character-1.f90 : ditto\n\t* gfortran.dg/c-interop/removed-restrictions-1.f90 : ditto\n\t* gfortran.dg/c-interop/removed-restrictions-2.f90 : ditto\n\t* gfortran.dg/c-interop/removed-restrictions-4.f90 : ditto\n\t* gfortran.dg/c-interop/tkr.f90 : ditto\n\t* gfortran.dg/class_result_10.f90 : ditto\n\t* gfortran.dg/dtio_35.f90 : ditto\n\t* gfortran.dg/gomp/affinity-clause-1.f90 : ditto\n\t* gfortran.dg/pr103258.f90 : ditto\n\t* gfortran.dg/pr59107.f90 : ditto\n\t* gfortran.dg/pr93835.f08 : ditto", "tree": {"sha": "477bdfa78eeee0b4d09081f360dac6b7a47c83b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/477bdfa78eeee0b4d09081f360dac6b7a47c83b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/comments", "author": null, "committer": null, "parents": [{"sha": "d8ec34a162d5424c350ed9b64200ad48a9839506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ec34a162d5424c350ed9b64200ad48a9839506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ec34a162d5424c350ed9b64200ad48a9839506"}], "stats": {"total": 144, "additions": 72, "deletions": 72}, "files": [{"sha": "7d22eb3ac8432c50655895e62035b5beb119006e", "filename": "gcc/testsuite/gfortran.dg/c-interop/allocatable-optional-pointer.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fallocatable-optional-pointer.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fallocatable-optional-pointer.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fallocatable-optional-pointer.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,9 +1,9 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! 5.3 ALLOCATABLE, OPTIONAL, and POINTER attributes\n-! The ALLOCATABLE, OPTIONAL, and POINTER attributes may be specified \n-! for a dummy argument in a procedure interface that has the BIND \n+! The ALLOCATABLE, OPTIONAL, and POINTER attributes may be specified\n+! for a dummy argument in a procedure interface that has the BIND\n ! attribute.\n \n subroutine test (a, b, c)"}, {"sha": "86a201275110973175ee748f142b184105c7731c", "filename": "gcc/testsuite/gfortran.dg/c-interop/c407a-1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407a-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407a-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407a-1.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,8 +1,8 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n-! C407a An assumed-type entity shall be a dummy variable that does not \n-! have the ALLOCATABLE, CODIMENSION, INTENT(OUT), POINTER, or VALUE \n+! C407a An assumed-type entity shall be a dummy variable that does not\n+! have the ALLOCATABLE, CODIMENSION, INTENT(OUT), POINTER, or VALUE\n ! attribute and is not an explicit-shape array.\n !\n ! This test file contains tests that are expected to all pass."}, {"sha": "a148afc5273cad43156356343bb49bab541a3ef9", "filename": "gcc/testsuite/gfortran.dg/c-interop/c407b-1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-1.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,15 +1,15 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C407b  An assumed-type variable name shall not appear in a designator\n ! or expression except as an actual argument corresponding to a dummy\n ! argument that is assumed-type, or as the first argument to any of\n-! the intrinsic and intrinsic module functions IS_CONTIGUOUS, LBOUND, \n+! the intrinsic and intrinsic module functions IS_CONTIGUOUS, LBOUND,\n ! PRESENT, RANK, SHAPE, SIZE, UBOUND, and C_LOC.\n !\n ! This test file contains tests that are expected to all pass.\n \n-! Check that passing an assumed-type variable as an actual argument \n+! Check that passing an assumed-type variable as an actual argument\n ! corresponding to an assumed-type dummy works.\n \n module m"}, {"sha": "90ae68fa7dfceb8e4338131e5df23f093cdb4a49", "filename": "gcc/testsuite/gfortran.dg/c-interop/c407b-2.f90", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-2.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,16 +1,16 @@\n ! PR 101337\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C407b  An assumed-type variable name shall not appear in a designator\n ! or expression except as an actual argument corresponding to a dummy\n ! argument that is assumed-type, or as the first argument to any of\n-! the intrinsic and intrinsic module functions IS_CONTIGUOUS, LBOUND, \n+! the intrinsic and intrinsic module functions IS_CONTIGUOUS, LBOUND,\n ! PRESENT, RANK, SHAPE, SIZE, UBOUND, and C_LOC.\n !\n ! This file contains tests that are expected to give diagnostics.\n \n-! Check that passing an assumed-type variable as an actual argument \n+! Check that passing an assumed-type variable as an actual argument\n ! corresponding to a non-assumed-type dummy gives a diagnostic.\n \n module m\n@@ -72,35 +72,35 @@ subroutine s2 (x, y)\n     type is (integer)\n       i = 0\n     type is (real)\n-      i = 1 \n+      i = 1\n     class default\n       i = -1\n   end select\n \n   ! relational operations\n   if (x & ! { dg-error \"Assumed.type\" \"pr101337\" }\n-      .eq. y) then  ! { dg-error \"Assumed.type\" } \n+      .eq. y) then  ! { dg-error \"Assumed.type\" }\n     return\n   end if\n   if (.not. (x & ! { dg-error \"Assumed.type\" \"pr101337\" }\n-             .ne. y)) then  ! { dg-error \"Assumed.type\" } \n+             .ne. y)) then  ! { dg-error \"Assumed.type\" }\n     return\n   end if\n-  if (.not. x) then  ! { dg-error \"Assumed.type\" } \n+  if (.not. x) then  ! { dg-error \"Assumed.type\" }\n     return\n   end if\n \n   ! assignment\n-  x &  ! { dg-error \"Assumed.type\" } \n-    = y  ! { dg-error \"Assumed.type\" } \n-  i = x  ! { dg-error \"Assumed.type\" } \n-  y = i  ! { dg-error \"Assumed.type\" } \n+  x &  ! { dg-error \"Assumed.type\" }\n+    = y  ! { dg-error \"Assumed.type\" }\n+  i = x  ! { dg-error \"Assumed.type\" }\n+  y = i  ! { dg-error \"Assumed.type\" }\n \n   ! arithmetic\n-  i = x + 1  ! { dg-error \"Assumed.type\" } \n-  i = -y  ! { dg-error \"Assumed.type\" } \n+  i = x + 1  ! { dg-error \"Assumed.type\" }\n+  i = -y  ! { dg-error \"Assumed.type\" }\n   i = (x & ! { dg-error \"Assumed.type\" \"pr101337\" }\n-       + y)  ! { dg-error \"Assumed.type\" } \n+       + y)  ! { dg-error \"Assumed.type\" }\n \n   ! computed go to\n   goto (10, 20, 30), x  ! { dg-error \"Assumed.type|must be a scalar integer\" }\n@@ -116,7 +116,7 @@ subroutine s2 (x, y)\n     continue\n   end do\n \n-end subroutine  \n+end subroutine\n \n ! Check that calls to disallowed intrinsic functions produce a diagnostic.\n ! Again, this isn't exhaustive, there are just too many intrinsics and\n@@ -147,4 +147,4 @@ subroutine s3 (x, y)\n \n   i = kind (x)  ! { dg-error \"Assumed.type\" }\n \n-end subroutine  \n+end subroutine"}, {"sha": "7abe33827407cfaf702825d9878c24947f6399df", "filename": "gcc/testsuite/gfortran.dg/c-interop/c407c-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407c-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407c-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407c-1.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,5 +1,5 @@\n ! PR101333\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C407c An assumed-type actual argument that corresponds to an"}, {"sha": "f933808ff895b516dae22b9de66010cd6d696a7e", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535a-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-1.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C535a  An assumed-rank entity shall be a dummy variable that does not"}, {"sha": "816e69124cee75eeecf6fd6cbfd6245858964c61", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535a-2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-2.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do compile}\n+! { dg-do compile }\n ! { dg-additional-options \"-fcoarray=single\" }\n !\n ! TS 29113\n@@ -43,7 +43,7 @@ subroutine s0 (a)\n     integer, dimension(..) :: badblocklocal2  ! { dg-error \"Assumed.rank\" }\n     integer :: badblocklocal3  ! { dg-error \"Assumed.rank\" }\n     dimension badblocklocal3(..)\n-  end block    \n+  end block\n \n end subroutine\n \n@@ -62,7 +62,7 @@ module m\n     integer, dimension(..) :: badcomponent2  ! { dg-error \"must have an explicit shape\" }\n   end type\n end module\n-  \n+\n ! Check that diagnostics are issued when dimension(..) is used in combination\n ! with the forbidden attributes.\n "}, {"sha": "f8ecabe9a027c41d7e64b207700e4785a35d0362", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535b-1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-1.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,9 +1,9 @@\n-! { dg-do compile}\n+! { dg-do compile }\n ! { dg-additional-options \"-fcoarray=single\" }\n !\n ! TS 29113\n ! C535b An assumed-rank variable name shall not appear in a designator\n-! or expression except as an actual argument corresponding to a dummy \n+! or expression except as an actual argument corresponding to a dummy\n ! argument that is assumed-rank, the argument of the C_LOC function\n ! in the ISO_C_BINDING intrinsic module, or the first argument in a\n ! reference to an intrinsic inquiry function.\n@@ -13,7 +13,7 @@\n !\n ! This test file contains tests that are expected to all pass.\n \n-! Check that passing an assumed-rank variable as an actual argument \n+! Check that passing an assumed-rank variable as an actual argument\n ! corresponding to an assumed-rank dummy works.\n \n module m"}, {"sha": "caf61fe8270298338144bae17a25df0acd1a7bd1", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535b-2.f90", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,11 +1,11 @@\n ! PR 101334\n ! PR 101337\n-! { dg-do compile}\n+! { dg-do compile }\n ! { dg-additional-options \"-fcoarray=single\" }\n !\n ! TS 29113\n ! C535b An assumed-rank variable name shall not appear in a designator\n-! or expression except as an actual argument corresponding to a dummy \n+! or expression except as an actual argument corresponding to a dummy\n ! argument that is assumed-rank, the argument of the C_LOC function\n ! in the ISO_C_BINDING intrinsic module, or the first argument in a\n ! reference to an intrinsic inquiry function.\n@@ -16,7 +16,7 @@\n ! This test file contains tests that are expected to issue diagnostics\n ! for invalid code.\n \n-! Check that passing an assumed-rank variable as an actual argument \n+! Check that passing an assumed-rank variable as an actual argument\n ! corresponding to a non-assumed-rank dummy gives a diagnostic.\n \n module m\n@@ -57,7 +57,7 @@ subroutine test_calls (x, y)\n   ! Make sure each invalid argument produces a diagnostic.\n   ! scalar dummies\n   call f (x, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" } \n+          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n   ! assumed-rank dummies\n   call g (x, y)  ! OK\n   ! assumed-size dummies\n@@ -295,15 +295,15 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = j .neqv. m  ! { dg-error \"(A|a)ssumed.rank\" }\n \n-end subroutine  \n+end subroutine\n \n ! Check that calls to disallowed intrinsic functions produce a diagnostic.\n ! There are 100+ \"elemental\" intrinsics defined in the standard, and\n ! 25+ \"transformational\" intrinsics that accept array operands, and that\n ! doesn't include intrinsics in the standard modules.  To keep the length of\n-! this test to something sane, check only a handful of these functions on \n-! the theory that related functions are probably implemented similarly and \n-! probably share the same argument-processing code.  \n+! this test to something sane, check only a handful of these functions on\n+! the theory that related functions are probably implemented similarly and\n+! probably share the same argument-processing code.\n \n subroutine test_intrinsics (i1, i2, r1, r2, c1, c2, l1, l2, s1, s2)\n   implicit none\n@@ -331,7 +331,7 @@ subroutine test_intrinsics (i1, i2, r1, r2, c1, c2, l1, l2, s1, s2)\n     = exp (r2)  ! { dg-error \"(A|a)ssumed.rank\" }\n   r1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = sinh (r2)  ! { dg-error \"(A|a)ssumed.rank\" }\n-  \n+\n   ! bit operations\n   l1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = blt (i1, &  ! { dg-error \"(A|a)ssumed.rank\" }"}, {"sha": "e882fbcfd2f441c5f6fa8dc01a9bef2b0d31cc3a", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535b-3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-3.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,10 +1,10 @@\n ! PR 101334\n-! { dg-do compile}\n+! { dg-do compile }\n ! { dg-additional-options \"-fcoarray=single\" }\n !\n ! TS 29113\n ! C535b An assumed-rank variable name shall not appear in a designator\n-! or expression except as an actual argument corresponding to a dummy \n+! or expression except as an actual argument corresponding to a dummy\n ! argument that is assumed-rank, the argument of the C_LOC function\n ! in the ISO_C_BINDING intrinsic module, or the first argument in a\n ! reference to an intrinsic inquiry function."}, {"sha": "8f0cff111db57a43bd31167470c9684cb16ef499", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535c-1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-1.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,9 +1,9 @@\n ! PR 54753\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C535c If an assumed-size or nonallocatable nonpointer assumed-rank\n-! array is an actual argument corresponding to a dummy argument that \n+! array is an actual argument corresponding to a dummy argument that\n ! is an INTENT(OUT) assumed-rank array, it shall not be polymorphic, [...].\n !\n ! This constraint is numbered C839 in the Fortran 2018 standard.\n@@ -16,7 +16,7 @@ module t\n     integer :: id\n     real :: xyz(3)\n   end type\n-end module  \n+end module\n \n module m\n   use t\n@@ -74,7 +74,7 @@ subroutine test_scalar_unlimited_polymorphic (a1, a2)\n     class(*) :: a1, a2\n     call upoly (a1, a2)\n   end subroutine\n-  \n+\n   ! The polymorphic cases for assumed-size are bad.\n   subroutine test_assumed_size_nonpolymorphic (a1, a2)\n     type(t1) :: a1(*), a2(*)"}, {"sha": "5e89f57640c2df05729d31e77a647a31ec50d1a8", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535c-2.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-2.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,10 +1,10 @@\n ! PR 54753\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C535c If an assumed-size or nonallocatable nonpointer assumed-rank\n-! array is an actual argument corresponding to a dummy argument that \n-! is an INTENT(OUT) assumed-rank array, it shall not be [...] \n+! array is an actual argument corresponding to a dummy argument that\n+! is an INTENT(OUT) assumed-rank array, it shall not be [...]\n ! finalizable [...].\n !\n ! This constraint is numbered C839 in the Fortran 2018 standard.\n@@ -44,7 +44,7 @@ subroutine test_known_size (a1, a2, n)\n   ! Calls with an assumed-size array argument should be rejected.\n   subroutine test_assumed_size (a1, a2)\n     type(t1) :: a1(*), a2(*)\n-    \n+\n     call s1 (a1, a2)  !  { dg-error \"(A|a)ssumed.rank\" }\n   end subroutine\n \n@@ -61,7 +61,7 @@ subroutine test_assumed_rank_allocatable (a1, a2)\n \n     call s1 (a1, a2)\n   end subroutine\n-  \n+\n   ! The call should be rejected with a nonallocatable nonpointer\n   ! assumed-rank actual argument.\n   subroutine test_assumed_rank_plain (a1, a2)"}, {"sha": "6a26fd0eea3c4de7a387c496ab2713f16fc239a1", "filename": "gcc/testsuite/gfortran.dg/c-interop/deferred-character-1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fdeferred-character-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fdeferred-character-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fdeferred-character-1.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,9 +1,9 @@\n ! PR92482\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! 8.7 Interoperability of procedures and procedure interfaces\n-! \n+!\n ! If a dummy argument in an interoperable interface is of type\n ! CHARACTER and is allocatable or a pointer, its character length shall\n ! be deferred."}, {"sha": "250c3970b0e65155ecc8e1048953f43ea9e2b43d", "filename": "gcc/testsuite/gfortran.dg/c-interop/removed-restrictions-1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-1.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,8 +1,8 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! 8.1 Removed restrictions on ISO_C_BINDING module procedures\n-! \n+!\n ! The subroutine C_F_POINTER from the intrinsic module ISO_C_BINDING has\n ! the restriction in ISO/IEC 1539- 1:2010 that if FPTR is an array, it\n ! shall be of interoperable type."}, {"sha": "eb0c970eb53f2d41f8dd79c5ddf3cdc5204236f6", "filename": "gcc/testsuite/gfortran.dg/c-interop/removed-restrictions-2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-2.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,8 +1,8 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! 8.1 Removed restrictions on ISO_C_BINDING module procedures\n-! \n+!\n ! The function C_F_PROCPOINTER from the intrinsic module ISO_C_BINDING\n ! has the restriction in ISO/IEC 1539-1:2010 that CPTR and FPTR shall\n ! not be the C address and interface of a noninteroperable Fortran"}, {"sha": "a582723534175d007b939aa319628af1ee9c3f48", "filename": "gcc/testsuite/gfortran.dg/c-interop/removed-restrictions-4.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-4.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,8 +1,8 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! 8.1 Removed restrictions on ISO_C_BINDING module procedures\n-! \n+!\n ! [...]\n !\n ! The function C_FUNLOC from the intrinsic module ISO_C_BINDING has"}, {"sha": "9ba7f95937a7a2f1c9a8d4f837f26eecb82150f9", "filename": "gcc/testsuite/gfortran.dg/c-interop/tkr.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftkr.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftkr.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftkr.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,12 +1,12 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n-! The definition of TKR compatible in paragraph 2 of subclause 12.4.3.4.5 \n+! The definition of TKR compatible in paragraph 2 of subclause 12.4.3.4.5\n ! of ISO/IEC 1539-1:2010 is changed to:\n !\n-! A dummy argument is type, kind, and rank compatible, or TKR compatible, \n-! with another dummy argument if the first is type compatible with the \n-! second, the kind type parameters of the first have the same values as \n+! A dummy argument is type, kind, and rank compatible, or TKR compatible,\n+! with another dummy argument if the first is type compatible with the\n+! second, the kind type parameters of the first have the same values as\n ! the corresponding kind type parameters of the second, and both have the\n ! same rank or either is assumed-rank.\n !"}, {"sha": "acfb7c35cfb23ca557c020e9828b31c76dc96248", "filename": "gcc/testsuite/gfortran.dg/class_result_10.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_10.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do run}\n+! { dg-do run }\n \n \n ! PR fortran/99585"}, {"sha": "c56fa01165509b7c483537f24088d585a3b1808c", "filename": "gcc/testsuite/gfortran.dg/dtio_35.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_35.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_35.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_35.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,4 +1,4 @@\n-! { dg-compile }\n+! { dg-do compile }\n !\n ! Reported by Vladimir Nikishkin\n ! at https://stackoverflow.com/questions/60972134/whats-wrong-with-the-following-fortran-code-gfortran-dtio-dummy-argument-at#"}, {"sha": "b8c7b5d68add076e137a1f79ecc0796593721f24", "filename": "gcc/testsuite/gfortran.dg/gomp/affinity-clause-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-1.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -24,7 +24,7 @@ subroutine foo(x)\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) jj=2:5:2, integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):b\\\\\\[.* <?i>? \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) jj=2:5:2, integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):d\\\\\\[\\\\(.*jj \\\\* 5 \\\\+ .* <?i>?\\\\) \\\\+ -6\\\\\\]\\\\)\" 1 \"original\" } }\n \n-! { dg final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):b\\\\\\[\\\\(.* <?i>? \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):d\\\\\\[\\\\(\\\\(integer\\\\(kind=8\\\\)\\\\) i \\\\+ -1\\\\) \\\\* 6\\\\\\]\\\\)\"  1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):b\\\\\\[\\\\(.* <?i>? \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):d\\\\\\[\\\\(\\\\(integer\\\\(kind=8\\\\)\\\\) i \\\\+ -1\\\\) \\\\* 6\\\\\\]\\\\)\"  1 \"original\" } }\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=1:5:1\\\\):a\\\\)\\[^ \\]\" 1 \"original\" } }\n "}, {"sha": "4a3bb6fc2e7ecc635ca55646c9e3eda13870f018", "filename": "gcc/testsuite/gfortran.dg/pr103258.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103258.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103258.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103258.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do compile}\n+! { dg-do compile }\n ! { dg-additional-options \"-Wno-pedantic\" }\n !\n ! Test from PR103258.  This used to ICE due to incorrectly marking the"}, {"sha": "969154a1537c45ee550942218da03e0baeee61b1", "filename": "gcc/testsuite/gfortran.dg/pr59107.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59107.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59107.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59107.f90?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,4 +1,4 @@\n-! { dg-compile }\n+! { dg-do compile }\n ! { dg-options \"-Wsurprising\" }\n \n ! There should be no surprising warnings"}, {"sha": "2fa1585604b9173263d91cb07d687961da279194", "filename": "gcc/testsuite/gfortran.dg/pr93835.f08", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93835.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93835.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93835.f08?ref=46fe32cb4d887d44a62f9c4ff2a72532d4eb5a19", "patch": "@@ -1,4 +1,4 @@\n-! {dg-do run }\n+! { dg-do run }\n !\n ! PR fortran/93835 - the following code resulted in an ICE\n !"}]}