{"sha": "3cbf09de66d0916b49ac237921a9707e20eae64e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NiZjA5ZGU2NmQwOTE2YjQ5YWMyMzc5MjFhOTcwN2UyMGVhZTY0ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-07-20T20:25:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-20T20:25:02Z"}, "message": "vec.h (VEC_T_length, [...]): Use unsigned, not size_t.\n\n\t* vec.h (VEC_T_length, VEC_T_index, VEC_T_iterate, VEC_T_truncate,\n\tVEC_T_replace, VEC_T_quick_insert, VEC_T_safe_insert,\n\tVEC_T_ordered_remove, VEC_T_unordered_remove): Use unsigned, not\n\tsize_t.\n\t(struct VEC): Use unsigned for num and alloc.\n\t* vec.c (struct vec_prefix): Likewise.\n\t(vec_o_reserve): Adjust.\n\nFrom-SVN: r84973", "tree": {"sha": "01ed7243126b3ab8ae00803b9245b610c7d4977d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01ed7243126b3ab8ae00803b9245b610c7d4977d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cbf09de66d0916b49ac237921a9707e20eae64e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbf09de66d0916b49ac237921a9707e20eae64e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cbf09de66d0916b49ac237921a9707e20eae64e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbf09de66d0916b49ac237921a9707e20eae64e/comments", "author": null, "committer": null, "parents": [{"sha": "5d33f41f0315ddfdec4d4a64d0cacba18fb7c072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d33f41f0315ddfdec4d4a64d0cacba18fb7c072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d33f41f0315ddfdec4d4a64d0cacba18fb7c072"}], "stats": {"total": 92, "additions": 51, "deletions": 41}, "files": [{"sha": "7d7cbd4eda0256a254750f9c6edeb94b26a846fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbf09de66d0916b49ac237921a9707e20eae64e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbf09de66d0916b49ac237921a9707e20eae64e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cbf09de66d0916b49ac237921a9707e20eae64e", "patch": "@@ -31,6 +31,14 @@\n \n 2004-07-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* vec.h (VEC_T_length, VEC_T_index, VEC_T_iterate, VEC_T_truncate,\n+\tVEC_T_replace, VEC_T_quick_insert, VEC_T_safe_insert,\n+\tVEC_T_ordered_remove, VEC_T_unordered_remove): Use unsigned, not\n+\tsize_t.\n+\t(struct VEC): Use unsigned for num and alloc.\n+\t* vec.c (struct vec_prefix): Likewise.\n+\t(vec_o_reserve): Adjust.\n+\n \t* dbxout.c (dbxout_type): Fix printf format.\n \n \t* tree.h (binfo_member): Remove."}, {"sha": "a597db6dd86395e2bed979b74abcf28222ffc002", "filename": "gcc/vec.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbf09de66d0916b49ac237921a9707e20eae64e/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbf09de66d0916b49ac237921a9707e20eae64e/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=3cbf09de66d0916b49ac237921a9707e20eae64e", "patch": "@@ -29,8 +29,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n struct vec_prefix \n {\n-  size_t num;\n-  size_t alloc;\n+  unsigned num;\n+  unsigned alloc;\n   void *vec[1];\n };\n \n@@ -57,7 +57,7 @@ vec_o_reserve (void *vec, int reserve, size_t vec_offset, size_t elt_size\n \t       MEM_STAT_DECL)\n {\n   struct vec_prefix *pfx = vec;\n-  size_t alloc = pfx ? pfx->num : 0;\n+  unsigned alloc = pfx ? pfx->num : 0;\n \n   if (reserve >= 0)\n     alloc += reserve;"}, {"sha": "885e54736107ec2b2bfa748fa83c3179ecc6dd5e", "filename": "gcc/vec.h", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbf09de66d0916b49ac237921a9707e20eae64e/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbf09de66d0916b49ac237921a9707e20eae64e/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=3cbf09de66d0916b49ac237921a9707e20eae64e", "patch": "@@ -111,7 +111,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    (by taking its address), this is noted in the descriptions.  */\n \n /* Length of vector\n-   size_t VEC_T_length(const VEC(T) *v);\n+   unsigned VEC_T_length(const VEC(T) *v);\n \n    Return the number of active elements in V.  V can be NULL, in which\n    case zero is returned.  */\n@@ -127,17 +127,17 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define VEC_last(TDEF,V)\t(VEC_OP(TDEF,last)(V VEC_CHECK_INFO))\n \n /* Index into vector\n-   T VEC_T_index(VEC(T) *v, size_t ix); // Pointer\n-   T *VEC_T_index(VEC(T) *v, size_t ix); // Object\n+   T VEC_T_index(VEC(T) *v, unsigned ix); // Pointer\n+   T *VEC_T_index(VEC(T) *v, unsigned ix); // Object\n \n    Return the IX'th element.  If IX is outside the domain of V,\n    abort.  */\n \n #define VEC_index(TDEF,V,I)\t(VEC_OP(TDEF,index)(V,I VEC_CHECK_INFO))\n \n /* Iterate over vector\n-   int VEC_T_index(VEC(T) *v, size_t ix, T &ptr); // Pointer\n-   int VEC_T_index(VEC(T) *v, size_t ix, T *&ptr); // Object\n+   int VEC_T_iterate(VEC(T) *v, unsigned ix, T &ptr); // Pointer\n+   int VEC_T_iterate(VEC(T) *v, unsigned ix, T *&ptr); // Object\n \n    Return iteration condition and update PTR to point to the IX'th\n    element.  At the end of iteration, sets PTR to NULL.  Use this to\n@@ -226,16 +226,16 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define VEC_pop(TDEF,V)\t\t\t(VEC_OP(TDEF,pop)(V VEC_CHECK_INFO))\n \n /* Truncate to specific length\n-   void VEC_T_truncate (VEC(T) *v, size_t len);\n+   void VEC_T_truncate (VEC(T) *v, unsigned len);\n    \n    Set the length as specified.  This is an O(1) operation.  */\n \n #define VEC_truncate(TDEF,V,I)\t\t\\\n \t(VEC_OP(TDEF,truncate)(V,I VEC_CHECK_INFO))\n \n /* Replace element\n-   T VEC_T_replace (VEC(T) *v, size_t ix, T val); // Pointer\n-   T *VEC_T_replace (VEC(T) *v, size_t ix, T *val);  // Object\n+   T VEC_T_replace (VEC(T) *v, unsigned ix, T val); // Pointer\n+   T *VEC_T_replace (VEC(T) *v, unsigned ix, T *val);  // Object\n    \n    Replace the IXth element of V with a new value, VAL.  For pointer\n    vectors returns the original value. For object vectors returns a\n@@ -247,8 +247,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \t(VEC_OP(TDEF,replace)(V,I,O VEC_CHECK_INFO))\n \n /* Insert object with no reallocation\n-   T *VEC_T_quick_insert (VEC(T) *v, size_t ix, T val); // Pointer\n-   T *VEC_T_quick_insert (VEC(T) *v, size_t ix, T *val); // Object\n+   T *VEC_T_quick_insert (VEC(T) *v, unsigned ix, T val); // Pointer\n+   T *VEC_T_quick_insert (VEC(T) *v, unsigned ix, T *val); // Object\n    \n    Insert an element, VAL, at the IXth position of V. Return a pointer\n    to the slot created.  For vectors of object, the new value can be\n@@ -259,8 +259,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \t(VEC_OP(TDEF,quick_insert)(V,I,O VEC_CHECK_INFO))\n \n /* Insert object with reallocation\n-   T *VEC_T_safe_insert (VEC(T) *&v, size_t ix, T val); // Pointer\n-   T *VEC_T_safe_insert (VEC(T) *&v, size_t ix, T *val); // Object\n+   T *VEC_T_safe_insert (VEC(T) *&v, unsigned ix, T val); // Pointer\n+   T *VEC_T_safe_insert (VEC(T) *&v, unsigned ix, T *val); // Object\n    \n    Insert an element, VAL, at the IXth position of V. Return a pointer\n    to the slot created.  For vectors of object, the new value can be\n@@ -271,8 +271,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \t(VEC_OP(TDEF,safe_insert)(&(V),I,O VEC_CHECK_INFO MEM_STAT_INFO))\n      \n /* Remove element retaining order\n-   T VEC_T_ordered_remove (VEC(T) *v, size_t ix); // Pointer\n-   void VEC_T_ordered_remove (VEC(T) *v, size_t ix); // Object\n+   T VEC_T_ordered_remove (VEC(T) *v, unsigned ix); // Pointer\n+   void VEC_T_ordered_remove (VEC(T) *v, unsigned ix); // Object\n    \n    Remove an element from the IXth position of V. Ordering of\n    remaining elements is preserverd.  For pointer vectors returns the\n@@ -282,8 +282,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \t(VEC_OP(TDEF,ordered_remove)(V,I VEC_CHECK_INFO))\n \n /* Remove element destroying order\n-   T VEC_T_unordered_remove (VEC(T) *v, size_t ix); // Pointer\n-   void VEC_T_unordered_remove (VEC(T) *v, size_t ix); // Object\n+   T VEC_T_unordered_remove (VEC(T) *v, unsigned ix); // Pointer\n+   void VEC_T_unordered_remove (VEC(T) *v, unsigned ix); // Object\n    \n    Remove an element from the IXth position of V. Ordering of\n    remaining elements is destroyed.  For pointer vectors returns the\n@@ -337,8 +337,8 @@ extern void vec_assert_fail (const char *, const char * VEC_CHECK_DECL)\n #define VEC_TDEF(TDEF)\t\t\t\t\t\t\t  \\\n typedef struct VEC (TDEF) GTY(())\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n-  size_t num;\t\t\t\t\t\t\t\t  \\\n-  size_t alloc;\t\t\t\t\t\t\t\t  \\\n+  unsigned num;\t\t\t\t\t\t\t\t  \\\n+  unsigned alloc;\t\t\t\t\t\t\t  \\\n   TDEF GTY ((length (\"%h.num\"))) vec[1];\t\t\t\t  \\\n } VEC (TDEF)\n \n@@ -350,7 +350,7 @@ typedef struct VEC (TDEF) GTY(())\t\t\t\t\t  \\\n #define DEF_VEC_P(TDEF)\t\t\t\t\t\t\t  \\\n VEC_TDEF (TDEF);\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n-static inline size_t VEC_OP (TDEF,length)\t\t\t\t  \\\n+static inline unsigned VEC_OP (TDEF,length)\t\t\t\t  \\\n      (const VEC (TDEF) *vec_) \t\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   return vec_ ? vec_->num : 0;\t\t\t\t\t\t  \\\n@@ -365,15 +365,15 @@ static inline TDEF VEC_OP (TDEF,last)\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF VEC_OP (TDEF,index)\t\t\t\t\t  \\\n-     (const VEC (TDEF) *vec_, size_t ix_ VEC_CHECK_DECL)\t\t  \\\n+     (const VEC (TDEF) *vec_, unsigned ix_ VEC_CHECK_DECL)\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   VEC_ASSERT (vec_ && ix_ < vec_->num, \"index\", TDEF);\t\t\t  \\\n   \t\t\t\t\t\t\t\t\t  \\\n   return vec_->vec[ix_];\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline int VEC_OP (TDEF,iterate)\t\t\t  \t     \t  \\\n-     (const VEC (TDEF) *vec_, size_t ix_, TDEF *ptr)\t\t\t  \\\n+     (const VEC (TDEF) *vec_, unsigned ix_, TDEF *ptr)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   if (vec_ && ix_ < vec_->num)\t\t\t\t\t\t  \\\n     {\t\t\t\t\t\t\t\t\t  \\\n@@ -410,7 +410,7 @@ static inline int VEC_OP (TDEF,space)\t       \t\t\t\t  \\\n      (VEC (TDEF) *vec_, int alloc_)\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   return vec_ ? ((vec_)->alloc - (vec_)->num\t\t\t\t  \\\n-\t\t < (size_t)(alloc_ < 0 ? 1 : alloc_)) : alloc_ != 0;\t  \\\n+\t\t < (unsigned)(alloc_ < 0 ? 1 : alloc_)) : alloc_ != 0;\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline int VEC_OP (TDEF,reserve)\t       \t\t\t\t  \\\n@@ -456,15 +456,15 @@ static inline TDEF VEC_OP (TDEF,pop)\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline void VEC_OP (TDEF,truncate)\t\t\t\t  \\\n-     (VEC (TDEF) *vec_, size_t size_ VEC_CHECK_DECL)\t\t\t  \\\n+     (VEC (TDEF) *vec_, unsigned size_ VEC_CHECK_DECL)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   VEC_ASSERT (vec_ ? vec_->num >= size_ : !size_, \"truncate\", TDEF);\t  \\\n   if (vec_)\t\t\t\t\t\t\t\t  \\\n     vec_->num = size_;\t\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF VEC_OP (TDEF,replace)\t\t  \t     \t  \\\n-     (VEC (TDEF) *vec_, size_t ix_, TDEF obj_ VEC_CHECK_DECL)\t\t  \\\n+     (VEC (TDEF) *vec_, unsigned ix_, TDEF obj_ VEC_CHECK_DECL)\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   TDEF old_obj_;\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n@@ -476,7 +476,7 @@ static inline TDEF VEC_OP (TDEF,replace)\t\t  \t     \t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF *VEC_OP (TDEF,quick_insert)\t\t     \t  \t  \\\n-     (VEC (TDEF) *vec_, size_t ix_, TDEF obj_ VEC_CHECK_DECL)\t\t  \\\n+     (VEC (TDEF) *vec_, unsigned ix_, TDEF obj_ VEC_CHECK_DECL)\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   TDEF *slot_;\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n@@ -490,15 +490,16 @@ static inline TDEF *VEC_OP (TDEF,quick_insert)\t\t     \t  \t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF *VEC_OP (TDEF,safe_insert)\t\t     \t  \t  \\\n-     (VEC (TDEF) **vec_, size_t ix_, TDEF obj_ VEC_CHECK_DECL MEM_STAT_DECL) \\\n+     (VEC (TDEF) **vec_, unsigned ix_, TDEF obj_ \t\t\t  \\\n+\tVEC_CHECK_DECL MEM_STAT_DECL)\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   VEC_OP (TDEF,reserve) (vec_, -1 PASS_MEM_STAT);\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n   return VEC_OP (TDEF,quick_insert) (*vec_, ix_, obj_ VEC_CHECK_PASS);\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF VEC_OP (TDEF,ordered_remove)\t\t\t\t  \\\n-     (VEC (TDEF) *vec_, size_t ix_ VEC_CHECK_DECL)\t\t\t  \\\n+     (VEC (TDEF) *vec_, unsigned ix_ VEC_CHECK_DECL)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   TDEF *slot_;\t\t\t\t\t\t\t\t  \\\n   TDEF obj_;\t\t\t\t\t\t\t\t  \\\n@@ -512,7 +513,7 @@ static inline TDEF VEC_OP (TDEF,ordered_remove)\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF VEC_OP (TDEF,unordered_remove)\t\t\t  \\\n-     (VEC (TDEF) *vec_, size_t ix_ VEC_CHECK_DECL)\t\t\t  \\\n+     (VEC (TDEF) *vec_, unsigned ix_ VEC_CHECK_DECL)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   TDEF *slot_;\t\t\t\t\t\t\t\t  \\\n   TDEF obj_;\t\t\t\t\t\t\t\t  \\\n@@ -542,7 +543,7 @@ struct vec_swallow_trailing_semi\n #define DEF_VEC_O(TDEF)\t\t\t\t\t\t\t  \\\n VEC_TDEF (TDEF);\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n-static inline size_t VEC_OP (TDEF,length)\t\t\t\t  \\\n+static inline unsigned VEC_OP (TDEF,length)\t\t\t\t  \\\n      (const VEC (TDEF) *vec_) \t\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   return vec_ ? vec_->num : 0;\t\t\t\t\t\t  \\\n@@ -557,15 +558,15 @@ static inline TDEF *VEC_OP (TDEF,last)\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF *VEC_OP (TDEF,index)\t\t\t\t\t  \\\n-     (VEC (TDEF) *vec_, size_t ix_ VEC_CHECK_DECL)\t\t\t  \\\n+     (VEC (TDEF) *vec_, unsigned ix_ VEC_CHECK_DECL)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   VEC_ASSERT (vec_ && ix_ < vec_->num, \"index\", TDEF);\t\t\t  \\\n   \t\t\t\t\t\t\t\t\t  \\\n   return &vec_->vec[ix_];\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline int VEC_OP (TDEF,iterate)\t\t\t  \t     \t  \\\n-     (VEC (TDEF) *vec_, size_t ix_, TDEF **ptr)\t\t\t\t  \\\n+     (VEC (TDEF) *vec_, unsigned ix_, TDEF **ptr)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   if (vec_ && ix_ < vec_->num)\t\t\t\t\t\t  \\\n     {\t\t\t\t\t\t\t\t\t  \\\n@@ -604,7 +605,7 @@ static inline int VEC_OP (TDEF,space)\t       \t\t\t\t  \\\n      (VEC (TDEF) *vec_, int alloc_)\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   return vec_ ? ((vec_)->alloc - (vec_)->num\t\t\t\t  \\\n-\t\t < (size_t)(alloc_ < 0 ? 1 : alloc_)) : alloc_ != 0;\t  \\\n+\t\t < (unsigned)(alloc_ < 0 ? 1 : alloc_)) : alloc_ != 0;\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline int VEC_OP (TDEF,reserve)\t   \t    \t\t\t  \\\n@@ -649,15 +650,15 @@ static inline void VEC_OP (TDEF,pop)\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline void VEC_OP (TDEF,truncate)\t\t\t\t  \\\n-     (VEC (TDEF) *vec_, size_t size_ VEC_CHECK_DECL)\t\t\t  \\\n+     (VEC (TDEF) *vec_, unsigned size_ VEC_CHECK_DECL)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   VEC_ASSERT (vec_ ? vec_->num >= size_ : !size_, \"truncate\", TDEF);\t  \\\n   if (vec_)\t\t\t\t\t\t\t\t  \\\n     vec_->num = size_;\t\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF *VEC_OP (TDEF,replace)\t\t\t\t  \\\n-     (VEC (TDEF) *vec_, size_t ix_, const TDEF *obj_ VEC_CHECK_DECL)\t  \\\n+     (VEC (TDEF) *vec_, unsigned ix_, const TDEF *obj_ VEC_CHECK_DECL)\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   TDEF *slot_;\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n@@ -670,7 +671,7 @@ static inline TDEF *VEC_OP (TDEF,replace)\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF *VEC_OP (TDEF,quick_insert)\t\t\t\t  \\\n-     (VEC (TDEF) *vec_, size_t ix_, const TDEF *obj_ VEC_CHECK_DECL)\t  \\\n+     (VEC (TDEF) *vec_, unsigned ix_, const TDEF *obj_ VEC_CHECK_DECL)\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   TDEF *slot_;\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n@@ -685,15 +686,16 @@ static inline TDEF *VEC_OP (TDEF,quick_insert)\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline TDEF *VEC_OP (TDEF,safe_insert)\t\t     \t  \t  \\\n-     (VEC (TDEF) **vec_, size_t ix_, const TDEF *obj_ VEC_CHECK_DECL MEM_STAT_DECL)  \\\n+     (VEC (TDEF) **vec_, unsigned ix_, const TDEF *obj_\t\t\t  \\\n+ \t\tVEC_CHECK_DECL MEM_STAT_DECL)\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   VEC_OP (TDEF,reserve) (vec_, -1 PASS_MEM_STAT);\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n   return VEC_OP (TDEF,quick_insert) (*vec_, ix_, obj_ VEC_CHECK_PASS);\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline void VEC_OP (TDEF,ordered_remove)\t\t\t\t  \\\n-     (VEC (TDEF) *vec_, size_t ix_ VEC_CHECK_DECL)\t\t\t  \\\n+     (VEC (TDEF) *vec_, unsigned ix_ VEC_CHECK_DECL)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   TDEF *slot_;\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n@@ -703,7 +705,7 @@ static inline void VEC_OP (TDEF,ordered_remove)\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline void VEC_OP (TDEF,unordered_remove)\t\t\t  \\\n-     (VEC (TDEF) *vec_, size_t ix_ VEC_CHECK_DECL)\t\t\t  \\\n+     (VEC (TDEF) *vec_, unsigned ix_ VEC_CHECK_DECL)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   VEC_ASSERT (ix_ < vec_->num, \"remove\", TDEF);\t\t\t\t  \\\n   vec_->vec[ix_] = vec_->vec[--vec_->num];\t\t\t\t  \\"}]}