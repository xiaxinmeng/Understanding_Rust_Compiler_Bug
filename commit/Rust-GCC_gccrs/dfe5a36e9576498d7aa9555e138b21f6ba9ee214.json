{"sha": "dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZlNWEzNmU5NTc2NDk4ZDdhYTk1NTVlMTM4YjIxZjZiYTllZTIxNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-12-28T06:38:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-12-28T06:38:52Z"}, "message": "boehm.cc: Remove stray semicolon.\n\n\t* boehm.cc: Remove stray semicolon.\n\t* interpret.cc: Likewise.\n\t* prims.cc: Likewise.\n\t* verify.cc (_Jv_BytecodeVerifier::verify_fail): Move definition\n\tearlier to ensure default arguments are processed.\n\t* gcj/array.h (JArray): Add forward declaration.\n\t(elements): Likewise.\n\t* gcj/javaprim.h: Remove stray semicolons.\n\t* include/bohm-gc.h: Likewise.\n\t* include/jni.h: Likewise.\n\t* include/jvm.h: Likewise.\n\t* java/lang/Class.h (_Jv_GetArrayClass): Declare _Jv_NewArrayClass.\n\nFrom-SVN: r60556", "tree": {"sha": "bba7de0c691d951ea3bfa44719a322941f969d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bba7de0c691d951ea3bfa44719a322941f969d38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/comments", "author": null, "committer": null, "parents": [{"sha": "239b7deaef30a58050dca4a69ca8ef34ae3f2194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239b7deaef30a58050dca4a69ca8ef34ae3f2194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239b7deaef30a58050dca4a69ca8ef34ae3f2194"}], "stats": {"total": 134, "additions": 80, "deletions": 54}, "files": [{"sha": "1d8107b206e4ca95355eee3cc8fdfab719416190", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1,3 +1,18 @@\n+2002-12-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* boehm.cc: Remove stray semicolon.\n+\t* interpret.cc: Likewise.\n+\t* prims.cc: Likewise.\n+\t* verify.cc (_Jv_BytecodeVerifier::verify_fail): Move definition\n+\tearlier to ensure default arguments are processed.\n+\t* gcj/array.h (JArray): Add forward declaration.\n+\t(elements): Likewise.\n+\t* gcj/javaprim.h: Remove stray semicolons.\n+\t* include/bohm-gc.h: Likewise.\n+\t* include/jni.h: Likewise.\n+\t* include/jvm.h: Likewise.\n+\t* java/lang/Class.h (_Jv_GetArrayClass): Declare _Jv_NewArrayClass.\n+\t\n 2002-12-23  Jeff Sturm  <jsturm@one-point.com>\n \n \t* exception.cc (PERSONALITY_FUNCTION): Clear least-significant-bit"}, {"sha": "df17ce82d9f9e0b4e254e85910e87c18b58e66be", "filename": "libjava/boehm.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -37,7 +37,7 @@ extern \"C\"\n   // These aren't declared in any Boehm GC header.\n   void GC_finalize_all (void);\n   ptr_t GC_debug_generic_malloc (size_t size, int k, GC_EXTRA_PARAMS);\n-};\n+}\n \n #define MAYBE_MARK(Obj, Top, Limit, Source, Exit)  \\\n \tTop=GC_MARK_AND_PUSH((GC_PTR)Obj, Top, Limit, (GC_PTR *)Source)"}, {"sha": "33ea038df93bb67eb62e9dee1c7c58ba09afa8f3", "filename": "libjava/gcj/array.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fgcj%2Farray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fgcj%2Farray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Farray.h?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1,6 +1,6 @@\n // array.h - Header file for CNI arrays.  -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -29,6 +29,14 @@ class __JArray : public java::lang::Object\n   friend jsize JvGetArrayLength (__JArray*);\n };\n \n+template<class T>\n+class JArray;\n+\n+template<class T>\n+inline T* elements(JArray<T>& x);\n+template<class T>\n+inline T* elements(JArray<T>* x);\n+\n template<class T>\n class JArray : public __JArray\n {\n@@ -45,7 +53,7 @@ inline T* elements(JArray<T>& x) { return x.data; }\n template<class T>\n inline T* elements(JArray<T>* x) { return x->data; }\n \n-}; // end extern \"Java\"\n+} // end extern \"Java\"\n \n /* These typesdefs match those in JNI. */\n typedef __JArray *jarray;"}, {"sha": "c6e4a00ae39ee1f33d0a5c837fff4bcaf8ef0f57", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -123,7 +123,7 @@ extern \"Java\"\n       class ValidatorAndPriority;\n       class WriteAbortedException;\n       class Writer;\n-    };\n+    }\n \n     namespace lang\n     {\n@@ -222,7 +222,7 @@ extern \"Java\"\n         class ReferenceQueue;\n         class SoftReference;\n         class WeakReference;\n-      };\n+      }\n \n       namespace reflect\n       {\n@@ -240,8 +240,8 @@ extern \"Java\"\n \tclass Proxy$ProxyType;\n         class ReflectPermission;\n \tclass UndeclaredThrowableException;\n-      };\n-    };\n+      }\n+    }\n \n     namespace util\n     {\n@@ -369,7 +369,7 @@ extern \"Java\"\n         class JarInputStream;\n         class JarOutputStream;\n         class Manifest;\n-      };\n+      }\n \n       namespace zip\n       {\n@@ -393,10 +393,10 @@ extern \"Java\"\n         class ZipFile$ZipEntryEnumeration;\n         class ZipInputStream;\n         class ZipOutputStream;\n-      };\n-    };\n-  };\n-};\n+      }\n+    }\n+  }\n+}\n   \n typedef struct java::lang::Object* jobject;\n typedef class java::lang::Class* jclass;"}, {"sha": "509900c737c3c53da9b03747560215a62cf6c063", "filename": "libjava/include/boehm-gc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Finclude%2Fboehm-gc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Finclude%2Fboehm-gc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fboehm-gc.h?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1,7 +1,7 @@\n // -*- c++ -*-\n // boehm-gc.h - Defines for Boehm collector.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -19,7 +19,7 @@ extern \"C\"\n {\n   JV_MARKOBJ_DECL;\n   JV_MARKARRAY_DECL;\n-};\n+}\n \n // Enough stuff to inline _Jv_AllocObj.  Ugly.\n #include <gcj/javaprims.h>"}, {"sha": "cab4571b094ff2e79c1670c258cd3261685e9457", "filename": "libjava/include/jni.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Finclude%2Fjni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Finclude%2Fjni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjni.h?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -211,7 +211,7 @@ extern JNIIMPEXP jint JNICALL JNI_CreateJavaVM (JavaVM **, void **, void *);\n extern JNIIMPEXP jint JNICALL JNI_GetCreatedJavaVMs(JavaVM **, jsize, jsize *);\n \n #ifdef __cplusplus\n-};\n+}\n #endif /* __cplusplus */\n \n typedef union jvalue"}, {"sha": "1e604980e0e6948af464da1e2bf08463b510fd1c", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -162,7 +162,7 @@ namespace gcj\n   \n   /* Set to true by _Jv_CreateJavaVM. */\n   extern bool runtimeInitialized;\n-};\n+}\n \n /* Type of pointer used as finalizer.  */\n typedef void _Jv_FinalizerFunc (jobject);"}, {"sha": "15fb413e8357bdaed7f4869b17e1371b8f458811", "filename": "libjava/interpret.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -91,7 +91,7 @@ static inline void dupx (_Jv_word *sp, int n, int x)\n       sp[top-(n+x)-i] = sp[top-i];\n     }\n   \n-};\n+}\n \n // Used to convert from floating types to integral types.\n template<typename TO, typename FROM>"}, {"sha": "5a56fd35c3b954ab4913f0917740361658a1683e", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -333,6 +333,9 @@ class java::lang::Class : public java::lang::Object\n   inline friend jclass\n   _Jv_GetArrayClass (jclass klass, java::lang::ClassLoader *loader)\n   {\n+    extern void _Jv_NewArrayClass (jclass element,\n+\t\t\t\t   java::lang::ClassLoader *loader,\n+\t\t\t\t   _Jv_VTable *array_vtable = 0);\n     if (__builtin_expect (!klass->arrayclass, false))\n       _Jv_NewArrayClass (klass, loader);\n     return klass->arrayclass;"}, {"sha": "61c66540831d4564673e7cfb205c983fc8346cc3", "filename": "libjava/prims.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -592,15 +592,15 @@ _Jv_NewMultiArray (jclass array_type, jint dimensions, ...)\n   _Jv_ArrayVTable _Jv_##NAME##VTable;\t\t\\\n   java::lang::Class _Jv_##NAME##Class __attribute__ ((aligned (8)));\n \n-DECLARE_PRIM_TYPE(byte);\n-DECLARE_PRIM_TYPE(short);\n-DECLARE_PRIM_TYPE(int);\n-DECLARE_PRIM_TYPE(long);\n-DECLARE_PRIM_TYPE(boolean);\n-DECLARE_PRIM_TYPE(char);\n-DECLARE_PRIM_TYPE(float);\n-DECLARE_PRIM_TYPE(double);\n-DECLARE_PRIM_TYPE(void);\n+DECLARE_PRIM_TYPE(byte)\n+DECLARE_PRIM_TYPE(short)\n+DECLARE_PRIM_TYPE(int)\n+DECLARE_PRIM_TYPE(long)\n+DECLARE_PRIM_TYPE(boolean)\n+DECLARE_PRIM_TYPE(char)\n+DECLARE_PRIM_TYPE(float)\n+DECLARE_PRIM_TYPE(double)\n+DECLARE_PRIM_TYPE(void)\n \n void\n _Jv_InitPrimClass (jclass cl, char *cname, char sig, int len, "}, {"sha": "238a3e926f1e833eca06ffa085857fbd647193d3", "filename": "libjava/verify.cc", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -128,6 +128,34 @@ class _Jv_BytecodeVerifier\n     return r;\n   }\n \n+  __attribute__ ((__noreturn__)) void verify_fail (char *s, jint pc = -1)\n+  {\n+    using namespace java::lang;\n+    StringBuffer *buf = new StringBuffer ();\n+\n+    buf->append (JvNewStringLatin1 (\"verification failed\"));\n+    if (pc == -1)\n+      pc = start_PC;\n+    if (pc != -1)\n+      {\n+\tbuf->append (JvNewStringLatin1 (\" at PC \"));\n+\tbuf->append (pc);\n+      }\n+\n+    _Jv_InterpMethod *method = current_method;\n+    buf->append (JvNewStringLatin1 (\" in \"));\n+    buf->append (current_class->getName());\n+    buf->append ((jchar) ':');\n+    buf->append (JvNewStringUTF (method->get_method()->name->data));\n+    buf->append ((jchar) '(');\n+    buf->append (JvNewStringUTF (method->get_method()->signature->data));\n+    buf->append ((jchar) ')');\n+\n+    buf->append (JvNewStringLatin1 (\": \"));\n+    buf->append (JvNewStringLatin1 (s));\n+    throw new java::lang::VerifyError (buf->toString ());\n+  }\n+\n   // This enum holds a list of tags for all the different types we\n   // need to handle.  Reference types are treated specially by the\n   // type class.\n@@ -3064,34 +3092,6 @@ class _Jv_BytecodeVerifier\n       }\n   }\n \n-  __attribute__ ((__noreturn__)) void verify_fail (char *s, jint pc = -1)\n-  {\n-    using namespace java::lang;\n-    StringBuffer *buf = new StringBuffer ();\n-\n-    buf->append (JvNewStringLatin1 (\"verification failed\"));\n-    if (pc == -1)\n-      pc = start_PC;\n-    if (pc != -1)\n-      {\n-\tbuf->append (JvNewStringLatin1 (\" at PC \"));\n-\tbuf->append (pc);\n-      }\n-\n-    _Jv_InterpMethod *method = current_method;\n-    buf->append (JvNewStringLatin1 (\" in \"));\n-    buf->append (current_class->getName());\n-    buf->append ((jchar) ':');\n-    buf->append (JvNewStringUTF (method->get_method()->name->data));\n-    buf->append ((jchar) '(');\n-    buf->append (JvNewStringUTF (method->get_method()->signature->data));\n-    buf->append ((jchar) ')');\n-\n-    buf->append (JvNewStringLatin1 (\": \"));\n-    buf->append (JvNewStringLatin1 (s));\n-    throw new java::lang::VerifyError (buf->toString ());\n-  }\n-\n public:\n \n   void verify_instructions ()"}]}