{"sha": "4e60fea9206696782e2292419da9add02d0b609c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU2MGZlYTkyMDY2OTY3ODJlMjI5MjQxOWRhOWFkZDAyZDBiNjA5Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-10T20:02:07Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-28T09:38:17Z"}, "message": "[Ada] Fix computation of Prec/Succ of zero without denormals\n\ngcc/ada/\n\n\t* libgnat/s-fatgen.adb: Add use clause for Interfaces.Unsigned_16\n\tand Interfaces.Unsigned_32.\n\t(Small16): New constant.\n\t(Small32): Likewise.\n\t(Small64): Likewise.\n\t(Small80): Likewise.\n\t(Pred): Declare a local overlay for Small and return it negated\n\tfor zero if the type does not support denormalized numbers.\n\t(Succ): Likewise, but return it directly.", "tree": {"sha": "3ddf5943f6100c84999f3d06650f760d35bd0d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ddf5943f6100c84999f3d06650f760d35bd0d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e60fea9206696782e2292419da9add02d0b609c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e60fea9206696782e2292419da9add02d0b609c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e60fea9206696782e2292419da9add02d0b609c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e60fea9206696782e2292419da9add02d0b609c/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33d1be873954bc387387c2f9462fa0139157a182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d1be873954bc387387c2f9462fa0139157a182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d1be873954bc387387c2f9462fa0139157a182"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "01493b7ab5098a1b42f17c89e34e3fbc19b64b94", "filename": "gcc/ada/libgnat/s-fatgen.adb", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e60fea9206696782e2292419da9add02d0b609c/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e60fea9206696782e2292419da9add02d0b609c/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb?ref=4e60fea9206696782e2292419da9add02d0b609c", "patch": "@@ -42,6 +42,8 @@ pragma Warnings (Off, \"non-static constant in preelaborated unit\");\n --  Every constant is static given our instantiation model\n \n package body System.Fat_Gen is\n+   use type Interfaces.Unsigned_16;\n+   use type Interfaces.Unsigned_32;\n    use type Interfaces.Unsigned_64;\n \n    pragma Assert (T'Machine_Radix = 2);\n@@ -59,6 +61,18 @@ package body System.Fat_Gen is\n    --  Small : constant T := Rad ** (T'Machine_Emin - 1);\n    --  Smallest positive normalized number\n \n+   Small16 : constant Interfaces.Unsigned_16 := 2**(Mantissa - 1);\n+   Small32 : constant Interfaces.Unsigned_32 := 2**(Mantissa - 1);\n+   Small64 : constant Interfaces.Unsigned_64 := 2**(Mantissa - 1);\n+   Small80 : constant array (1 .. 2) of Interfaces.Unsigned_64 :=\n+               (2**48 * (1 - Standard'Default_Bit_Order),\n+                1 * Standard'Default_Bit_Order);\n+   for Small80'Alignment use Standard'Maximum_Alignment;\n+   --  We cannot use the direct declaration because it cannot be translated\n+   --  into C90, as the hexadecimal floating constants were introduced in C99.\n+   --  So we work around this by using an overlay of the integer constant.\n+   --  ??? Revisit this when the new CCG technoloy is in production\n+\n    --  Tiny : constant T := Rad ** (T'Machine_Emin - Mantissa);\n    --  Smallest positive denormalized number\n \n@@ -72,6 +86,7 @@ package body System.Fat_Gen is\n    --  We cannot use the direct declaration because it cannot be translated\n    --  into C90, as the hexadecimal floating constants were introduced in C99.\n    --  So we work around this by using an overlay of the integer constant.\n+   --  ??? Revisit this when the new CCG technoloy is in production\n \n    RM1 : constant T := Rad ** (Mantissa - 1);\n    --  Smallest positive member of the large consecutive integers. It is equal\n@@ -424,6 +439,13 @@ package body System.Fat_Gen is\n    ----------\n \n    function Pred (X : T) return T is\n+      Small : constant T;\n+      pragma Import (Ada, Small);\n+      for Small'Address use (if     T'Size   = 16 then Small16'Address\n+                              elsif T'Size   = 32 then Small32'Address\n+                              elsif T'Size   = 64 then Small64'Address\n+                              elsif Mantissa = 64 then Small80'Address\n+                              else raise Program_Error);\n       Tiny : constant T;\n       pragma Import (Ada, Tiny);\n       for Tiny'Address use (if     T'Size   = 16 then Tiny16'Address\n@@ -438,7 +460,7 @@ package body System.Fat_Gen is\n       --  Zero has to be treated specially, since its exponent is zero\n \n       if X = 0.0 then\n-         return -Tiny;\n+         return -(if T'Denorm then Tiny else Small);\n \n       --  Special treatment for largest negative number: raise Constraint_Error\n \n@@ -700,6 +722,13 @@ package body System.Fat_Gen is\n    ----------\n \n    function Succ (X : T) return T is\n+      Small : constant T;\n+      pragma Import (Ada, Small);\n+      for Small'Address use (if     T'Size   = 16 then Small16'Address\n+                              elsif T'Size   = 32 then Small32'Address\n+                              elsif T'Size   = 64 then Small64'Address\n+                              elsif Mantissa = 64 then Small80'Address\n+                              else raise Program_Error);\n       Tiny : constant T;\n       pragma Import (Ada, Tiny);\n       for Tiny'Address use (if     T'Size   = 16 then Tiny16'Address\n@@ -714,7 +743,7 @@ package body System.Fat_Gen is\n       --  Treat zero specially since it has a zero exponent\n \n       if X = 0.0 then\n-         return Tiny;\n+         return (if T'Denorm then Tiny else Small);\n \n       --  Special treatment for largest positive number: raise Constraint_Error\n "}]}