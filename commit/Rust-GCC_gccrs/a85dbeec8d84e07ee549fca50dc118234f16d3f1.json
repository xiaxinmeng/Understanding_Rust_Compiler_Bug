{"sha": "a85dbeec8d84e07ee549fca50dc118234f16d3f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1ZGJlZWM4ZDg0ZTA3ZWU1NDlmY2E1MGRjMTE4MjM0ZjE2ZDNmMQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-01-11T08:55:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-01-11T08:55:57Z"}, "message": "[Ada] Prohibit concurrent types in Ghost regions\n\nThis patch ensures that single concurrent type declarations are marked as Ghost\nwhen they appear within a Ghost region. In addition, the patch verifies that no\nconcurrent type is declared within a Ghost region and issues an error.\n\n------------\n-- Source --\n------------\n\n--  types.ads\n\npackage Types with Ghost is\n   protected Prot_Obj is                                             --  Error\n   end Prot_Obj;\n\n   protected type Prot_Typ is                                        --  Error\n   end Prot_Typ;\n\n   task Task_Obj;                                                    --  Error\n\n   task type Task_Typ;                                               --  Error\nend Types;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n$ gcc -c types.ads\ntypes.ads:2:14: ghost type \"Prot_Obj\" cannot be concurrent\ntypes.ads:5:19: ghost type \"Prot_Typ\" cannot be concurrent\ntypes.ads:8:09: ghost type \"Task_Obj\" cannot be concurrent\ntypes.ads:10:14: ghost type \"Task_Typ\" cannot be concurrent\n\n2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* freeze.adb (Freeze_Entity): Ensure that a Ghost type is not\n\tconcurrent, nor effectively volatile.\n\t* ghost.adb (Check_Ghost_Type): New routine.\n\t* ghost.ads (Check_Ghost_Type): New routine.\n\t* sem_util.adb (Is_Declaration): Reimplemented. The routine can now\n\tconsider specific subsets of declarations.\n\t(Is_Declaration_Other_Than_Renaming): Removed. Its functionality is\n\treplicated by Is_Declaration.\n\t* sem_util.ads (Is_Declaration): New parameter profile. Update the\n\tcomment on usage.\n\t(Is_Declaration_Other_Than_Renaming): Removed.\n\nFrom-SVN: r256521", "tree": {"sha": "e95e75f094acff6244b15f024b594ea1975b96c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e95e75f094acff6244b15f024b594ea1975b96c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a85dbeec8d84e07ee549fca50dc118234f16d3f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85dbeec8d84e07ee549fca50dc118234f16d3f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a85dbeec8d84e07ee549fca50dc118234f16d3f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85dbeec8d84e07ee549fca50dc118234f16d3f1/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efc1c00c88b7758d628ce8e2d1e6d54d5996216"}], "stats": {"total": 225, "additions": 185, "deletions": 40}, "files": [{"sha": "1eabde4f2e31858aa82d5b727da1eeab50e4a923", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a85dbeec8d84e07ee549fca50dc118234f16d3f1", "patch": "@@ -1,3 +1,17 @@\n+2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): Ensure that a Ghost type is not\n+\tconcurrent, nor effectively volatile.\n+\t* ghost.adb (Check_Ghost_Type): New routine.\n+\t* ghost.ads (Check_Ghost_Type): New routine.\n+\t* sem_util.adb (Is_Declaration): Reimplemented. The routine can now\n+\tconsider specific subsets of declarations.\n+\t(Is_Declaration_Other_Than_Renaming): Removed. Its functionality is\n+\treplicated by Is_Declaration.\n+\t* sem_util.ads (Is_Declaration): New parameter profile. Update the\n+\tcomment on usage.\n+\t(Is_Declaration_Other_Than_Renaming): Removed.\n+\n 2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch5.adb (Analyze_Assignment): Assignments to variables that act"}, {"sha": "1e6e2575feff9d8a01946cb0ae4428e29fa79e3b", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a85dbeec8d84e07ee549fca50dc118234f16d3f1", "patch": "@@ -5517,6 +5517,11 @@ package body Freeze is\n       --  Case of a type or subtype being frozen\n \n       else\n+         --  Verify several SPARK legality rules related to Ghost types now\n+         --  that the type is frozen.\n+\n+         Check_Ghost_Type (E);\n+\n          --  We used to check here that a full type must have preelaborable\n          --  initialization if it completes a private type specified with\n          --  pragma Preelaborable_Initialization, but that missed cases where\n@@ -5567,21 +5572,6 @@ package body Freeze is\n             end if;\n          end;\n \n-         if Is_Ghost_Entity (E) then\n-\n-            --  A Ghost type cannot be concurrent (SPARK RM 6.9(19)). Verify\n-            --  this legality rule first to five a finer-grained diagnostic.\n-\n-            if Is_Concurrent_Type (E) then\n-               Error_Msg_N (\"ghost type & cannot be concurrent\", E);\n-\n-            --  A Ghost type cannot be effectively volatile (SPARK RM 6.9(7))\n-\n-            elsif Is_Effectively_Volatile (E) then\n-               Error_Msg_N (\"ghost type & cannot be volatile\", E);\n-            end if;\n-         end if;\n-\n          --  Deal with special cases of freezing for subtype\n \n          if E /= Base_Type (E) then"}, {"sha": "5997724481800b809b2e14b22888f36f9b68513d", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=a85dbeec8d84e07ee549fca50dc118234f16d3f1", "patch": "@@ -806,6 +806,42 @@ package body Ghost is\n       end if;\n    end Check_Ghost_Refinement;\n \n+   ----------------------\n+   -- Check_Ghost_Type --\n+   ----------------------\n+\n+   procedure Check_Ghost_Type (Typ : Entity_Id) is\n+      Conc_Typ : Entity_Id;\n+      Full_Typ : Entity_Id;\n+\n+   begin\n+      if Is_Ghost_Entity (Typ) then\n+         Conc_Typ := Empty;\n+         Full_Typ := Typ;\n+\n+         if Is_Single_Concurrent_Type (Typ) then\n+            Conc_Typ := Anonymous_Object (Typ);\n+            Full_Typ := Conc_Typ;\n+\n+         elsif Is_Concurrent_Type (Typ) then\n+            Conc_Typ := Typ;\n+         end if;\n+\n+         --  A Ghost type cannot be concurrent (SPARK RM 6.9(19)). Verify this\n+         --  legality rule first to give a finer-grained diagnostic.\n+\n+         if Present (Conc_Typ) then\n+            Error_Msg_N (\"ghost type & cannot be concurrent\", Conc_Typ);\n+         end if;\n+\n+         --  A Ghost type cannot be effectively volatile (SPARK RM 6.9(7))\n+\n+         if Is_Effectively_Volatile (Full_Typ) then\n+            Error_Msg_N (\"ghost type & cannot be volatile\", Full_Typ);\n+         end if;\n+      end if;\n+   end Check_Ghost_Type;\n+\n    ------------------\n    -- Ghost_Entity --\n    ------------------"}, {"sha": "8e23bcf6ac4907782743a51671383bc10c3cc729", "filename": "gcc/ada/ghost.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2Fghost.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2Fghost.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.ads?ref=a85dbeec8d84e07ee549fca50dc118234f16d3f1", "patch": "@@ -68,6 +68,10 @@ package Ghost is\n    --  Verify that the Ghost policy of constituent Constit_Id is compatible\n    --  with the Ghost policy of abstract state State_I.\n \n+   procedure Check_Ghost_Type (Typ : Entity_Id);\n+   --  Verify that Ghost type Typ is neither concurrent, nor effectively\n+   --  volatile.\n+\n    function Implements_Ghost_Interface (Typ : Entity_Id) return Boolean;\n    --  Determine whether type Typ implements at least one Ghost interface\n "}, {"sha": "5fa02ddde1c42b9914bc41f0e31d0db0ff081670", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 93, "deletions": 20, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a85dbeec8d84e07ee549fca50dc118234f16d3f1", "patch": "@@ -13368,40 +13368,113 @@ package body Sem_Util is\n    -- Is_Declaration --\n    --------------------\n \n-   function Is_Declaration (N : Node_Id) return Boolean is\n+   function Is_Declaration\n+     (N                : Node_Id;\n+      Body_OK          : Boolean := True;\n+      Concurrent_OK    : Boolean := True;\n+      Formal_OK        : Boolean := True;\n+      Generic_OK       : Boolean := True;\n+      Instantiation_OK : Boolean := True;\n+      Renaming_OK      : Boolean := True;\n+      Stub_OK          : Boolean := True;\n+      Subprogram_OK    : Boolean := True;\n+      Type_OK          : Boolean := True) return Boolean\n+   is\n    begin\n-      return\n-        Is_Declaration_Other_Than_Renaming (N)\n-          or else Is_Renaming_Declaration (N);\n-   end Is_Declaration;\n+      case Nkind (N) is\n \n-   ----------------------------------------\n-   -- Is_Declaration_Other_Than_Renaming --\n-   ----------------------------------------\n+         --  Body declarations\n+\n+         when N_Proper_Body =>\n+            return Body_OK;\n+\n+         --  Concurrent type declarations\n+\n+         when N_Protected_Type_Declaration\n+            | N_Single_Protected_Declaration\n+            | N_Single_Task_Declaration\n+            | N_Task_Type_Declaration\n+         =>\n+            return Concurrent_OK or Type_OK;\n+\n+         --  Formal declarations\n+\n+         when N_Formal_Abstract_Subprogram_Declaration\n+            | N_Formal_Concrete_Subprogram_Declaration\n+            | N_Formal_Object_Declaration\n+            | N_Formal_Package_Declaration\n+            | N_Formal_Type_Declaration\n+         =>\n+            return Formal_OK;\n+\n+         --  Generic declarations\n+\n+         when N_Generic_Package_Declaration\n+            | N_Generic_Subprogram_Declaration\n+         =>\n+            return Generic_OK;\n+\n+         --  Generic instantiations\n+\n+         when N_Function_Instantiation\n+            | N_Package_Instantiation\n+            | N_Procedure_Instantiation\n+         =>\n+            return Instantiation_OK;\n+\n+         --  Generic renaming declarations\n+\n+         when N_Generic_Renaming_Declaration =>\n+            return Generic_OK or Renaming_OK;\n+\n+         --  Renaming declarations\n+\n+         when N_Exception_Renaming_Declaration\n+            | N_Object_Renaming_Declaration\n+            | N_Package_Renaming_Declaration\n+            | N_Subprogram_Renaming_Declaration\n+         =>\n+            return Renaming_OK;\n+\n+         --  Stub declarations\n+\n+         when N_Body_Stub =>\n+            return Stub_OK;\n+\n+         --  Subprogram declarations\n \n-   function Is_Declaration_Other_Than_Renaming (N : Node_Id) return Boolean is\n-   begin\n-      case Nkind (N) is\n          when N_Abstract_Subprogram_Declaration\n-            | N_Exception_Declaration\n+            | N_Entry_Declaration\n             | N_Expression_Function\n-            | N_Full_Type_Declaration\n-            | N_Generic_Package_Declaration\n-            | N_Generic_Subprogram_Declaration\n-            | N_Number_Declaration\n-            | N_Object_Declaration\n-            | N_Package_Declaration\n+            | N_Subprogram_Declaration\n+         =>\n+            return Subprogram_OK;\n+\n+         --  Type declarations\n+\n+         when N_Full_Type_Declaration\n+            | N_Incomplete_Type_Declaration\n             | N_Private_Extension_Declaration\n             | N_Private_Type_Declaration\n-            | N_Subprogram_Declaration\n             | N_Subtype_Declaration\n+         =>\n+            return Type_OK;\n+\n+         --  Miscellaneous\n+\n+         when N_Component_Declaration\n+            | N_Exception_Declaration\n+            | N_Implicit_Label_Declaration\n+            | N_Number_Declaration\n+            | N_Object_Declaration\n+            | N_Package_Declaration\n          =>\n             return True;\n \n          when others =>\n             return False;\n       end case;\n-   end Is_Declaration_Other_Than_Renaming;\n+   end Is_Declaration;\n \n    --------------------------------\n    -- Is_Declared_Within_Variant --"}, {"sha": "3de394456b01cca9c1c5747885ffdd12e7a2f2b3", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85dbeec8d84e07ee549fca50dc118234f16d3f1/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=a85dbeec8d84e07ee549fca50dc118234f16d3f1", "patch": "@@ -1561,11 +1561,39 @@ package Sem_Util is\n    --  declarations. In Ada 2012 it also covers type and subtype declarations\n    --  with aspects: Invariant, Predicate, and Default_Initial_Condition.\n \n-   function Is_Declaration (N : Node_Id) return Boolean;\n-   --  Determine whether arbitrary node N denotes a declaration\n-\n-   function Is_Declaration_Other_Than_Renaming (N : Node_Id) return Boolean;\n-   --  Determine whether arbitrary node N denotes a non-renaming declaration\n+   function Is_Declaration\n+     (N                : Node_Id;\n+      Body_OK          : Boolean := True;\n+      Concurrent_OK    : Boolean := True;\n+      Formal_OK        : Boolean := True;\n+      Generic_OK       : Boolean := True;\n+      Instantiation_OK : Boolean := True;\n+      Renaming_OK      : Boolean := True;\n+      Stub_OK          : Boolean := True;\n+      Subprogram_OK    : Boolean := True;\n+      Type_OK          : Boolean := True) return Boolean;\n+   --  Determine whether arbitrary node N denotes a declaration depending\n+   --  on the allowed subsets of declarations. Set the following flags to\n+   --  consider specific subsets of declarations:\n+   --\n+   --    * Body_OK - body declarations\n+   --\n+   --    * Concurrent_OK - concurrent type declarations\n+   --\n+   --    * Formal_OK - formal declarations\n+   --\n+   --    * Generic_OK - generic declarations, including generic renamings\n+   --\n+   --    * Instantiation_OK - generic instantiations\n+   --\n+   --    * Renaming_OK - renaming declarations, including generic renamings\n+   --\n+   --    * Stub_OK - stub declarations\n+   --\n+   --    * Subprogram_OK - entry, expression function, and subprogram\n+   --      declarations.\n+   --\n+   --    * Type_OK - type declarations, including concurrent types\n \n    function Is_Declared_Within_Variant (Comp : Entity_Id) return Boolean;\n    --  Returns True iff component Comp is declared within a variant part"}]}