{"sha": "a475bff7f8977cfe907f6bc13e7c5e7b5c607d12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3NWJmZjdmODk3N2NmZTkwN2Y2YmMxM2U3YzVlN2I1YzYwN2QxMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-01-23T22:23:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-01-23T22:23:10Z"}, "message": "combine.c (SHIFT_COUNT_TRUNCATED): Provide default value.\n\n        * combine.c (SHIFT_COUNT_TRUNCATED): Provide default value.\n        (simplify_comparison): Don't simplify (eq (zero_extract c 1 r) 0)\n        if SHIFT_COUNT_TRUNCATED is set.\n\nFrom-SVN: r76461", "tree": {"sha": "86c29fe20bc264a3b0e4c385a484de2f24845112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86c29fe20bc264a3b0e4c385a484de2f24845112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a475bff7f8977cfe907f6bc13e7c5e7b5c607d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a475bff7f8977cfe907f6bc13e7c5e7b5c607d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a475bff7f8977cfe907f6bc13e7c5e7b5c607d12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a475bff7f8977cfe907f6bc13e7c5e7b5c607d12/comments", "author": null, "committer": null, "parents": [{"sha": "3712281f9d5275e4b0e388ad78f62df874298726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3712281f9d5275e4b0e388ad78f62df874298726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3712281f9d5275e4b0e388ad78f62df874298726"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "b080efc3e30016b21839c076704cf18156b25fba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475bff7f8977cfe907f6bc13e7c5e7b5c607d12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475bff7f8977cfe907f6bc13e7c5e7b5c607d12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a475bff7f8977cfe907f6bc13e7c5e7b5c607d12", "patch": "@@ -1,3 +1,10 @@\n+2004-01-23  Richard Henderson  <rth@redhat.com>\n+\n+        PR opt/12941\n+        * combine.c (SHIFT_COUNT_TRUNCATED): Provide default value.\n+        (simplify_comparison): Don't simplify (eq (zero_extract c 1 r) 0)\n+        if SHIFT_COUNT_TRUNCATED is set.\n+\n 2004-01-23  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.c (xtensa_va_arg): Handle complex values as"}, {"sha": "b2d776902ef3b36d6612e2406596147d67fae2dc", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475bff7f8977cfe907f6bc13e7c5e7b5c607d12/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475bff7f8977cfe907f6bc13e7c5e7b5c607d12/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=a475bff7f8977cfe907f6bc13e7c5e7b5c607d12", "patch": "@@ -91,6 +91,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"target.h\"\n \n+#ifndef SHIFT_COUNT_TRUNCATED\n+#define SHIFT_COUNT_TRUNCATED 0\n+#endif\n+\n /* It is not safe to use ordinary gen_lowpart in combine.\n    Use gen_lowpart_for_combine instead.  See comments there.  */\n #define gen_lowpart dont_use_gen_lowpart_you_dummy\n@@ -4545,16 +4549,13 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int last,\n \treturn simplify_shift_const (x, code, mode, XEXP (x, 0),\n \t\t\t\t     INTVAL (XEXP (x, 1)));\n \n-#ifdef SHIFT_COUNT_TRUNCATED\n       else if (SHIFT_COUNT_TRUNCATED && GET_CODE (XEXP (x, 1)) != REG)\n \tSUBST (XEXP (x, 1),\n \t       force_to_mode (XEXP (x, 1), GET_MODE (XEXP (x, 1)),\n \t\t\t      ((HOST_WIDE_INT) 1\n \t\t\t       << exact_log2 (GET_MODE_BITSIZE (GET_MODE (x))))\n \t\t\t      - 1,\n \t\t\t      NULL_RTX, 0));\n-#endif\n-\n       break;\n \n     case VEC_SELECT:\n@@ -9124,10 +9125,8 @@ simplify_shift_const (rtx x, enum rtx_code code,\n   /* Make sure and truncate the \"natural\" shift on the way in.  We don't\n      want to do this inside the loop as it makes it more difficult to\n      combine shifts.  */\n-#ifdef SHIFT_COUNT_TRUNCATED\n   if (SHIFT_COUNT_TRUNCATED)\n     orig_count &= GET_MODE_BITSIZE (mode) - 1;\n-#endif\n \n   /* If we were given an invalid count, don't do anything except exactly\n      what was requested.  */\n@@ -10523,8 +10522,10 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t     a constant that has only a single bit set and are comparing it\n \t     with zero, we can convert this into an equality comparison\n \t     between the position and the location of the single bit.  */\n-\n-\t  if (GET_CODE (XEXP (op0, 0)) == CONST_INT\n+\t  /* Except we can't if SHIFT_COUNT_TRUNCATED is set, since we might\n+\t     have already reduced the shift count modulo the word size.  */\n+\t  if (!SHIFT_COUNT_TRUNCATED\n+\t      && GET_CODE (XEXP (op0, 0)) == CONST_INT\n \t      && XEXP (op0, 1) == const1_rtx\n \t      && equality_comparison_p && const_op == 0\n \t      && (i = exact_log2 (INTVAL (XEXP (op0, 0)))) >= 0)"}]}