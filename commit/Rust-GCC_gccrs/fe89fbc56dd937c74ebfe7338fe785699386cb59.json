{"sha": "fe89fbc56dd937c74ebfe7338fe785699386cb59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU4OWZiYzU2ZGQ5MzdjNzRlYmZlNzMzOGZlNzg1Njk5Mzg2Y2I1OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-03-28T17:55:25Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-03-28T17:55:25Z"}, "message": "dwarf2out.c (dwarf2out_begin_prologue): Use crtl->nothrow\n\n\t* dwarf2out.c (dwarf2out_begin_prologue): Use crtl->nothrow\n\t* tree-eh.c (stmt_could_throw_p): Remove check for WEAK decls.\n\t* function.h (rtl_data): Add nothrow flag.\n\t* except.c (set_nothrow_function_flags): Use crtl->nothrow;\n\tset DECL_NOTHROW for AVAILABLE functions.\n\nFrom-SVN: r145202", "tree": {"sha": "71b5742a48b64212e619cde0a156cbe731404f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71b5742a48b64212e619cde0a156cbe731404f0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe89fbc56dd937c74ebfe7338fe785699386cb59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe89fbc56dd937c74ebfe7338fe785699386cb59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe89fbc56dd937c74ebfe7338fe785699386cb59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe89fbc56dd937c74ebfe7338fe785699386cb59/comments", "author": null, "committer": null, "parents": [{"sha": "b3bf8855c071b86fb3403f0d3e4d415702cb07ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3bf8855c071b86fb3403f0d3e4d415702cb07ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3bf8855c071b86fb3403f0d3e4d415702cb07ea"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "fcbe897da35d55a83c8a616b81e7f30b8db8ef6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe89fbc56dd937c74ebfe7338fe785699386cb59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe89fbc56dd937c74ebfe7338fe785699386cb59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe89fbc56dd937c74ebfe7338fe785699386cb59", "patch": "@@ -1,3 +1,11 @@\n+2009-03-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* dwarf2out.c (dwarf2out_begin_prologue): Use crtl->nothrow\n+\t* tree-eh.c (stmt_could_throw_p): Remove check for WEAK decls.\n+\t* function.h (rtl_data): Add nothrow flag.\n+\t* except.c (set_nothrow_function_flags): Use crtl->nothrow;\n+\tset DECL_NOTHROW for AVAILABLE functions.\n+\n 2009-03-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000-c.c (rs6000_macro_to_expand): If macro"}, {"sha": "1bc17306c099640788e634fa92031401d6918acd", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe89fbc56dd937c74ebfe7338fe785699386cb59/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe89fbc56dd937c74ebfe7338fe785699386cb59/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fe89fbc56dd937c74ebfe7338fe785699386cb59", "patch": "@@ -3231,7 +3231,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n   fde->dw_fde_end = NULL;\n   fde->dw_fde_cfi = NULL;\n   fde->funcdef_number = current_function_funcdef_no;\n-  fde->nothrow = TREE_NOTHROW (current_function_decl);\n+  fde->nothrow = crtl->nothrow;\n   fde->uses_eh_lsda = crtl->uses_eh_lsda;\n   fde->all_throwers_are_sibcalls = crtl->all_throwers_are_sibcalls;\n   fde->drap_reg = INVALID_REGNUM;"}, {"sha": "f18e78e3f48e2048b01a78a2ddd5f4363fec7cac", "filename": "gcc/except.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe89fbc56dd937c74ebfe7338fe785699386cb59/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe89fbc56dd937c74ebfe7338fe785699386cb59/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=fe89fbc56dd937c74ebfe7338fe785699386cb59", "patch": "@@ -2765,13 +2765,7 @@ set_nothrow_function_flags (void)\n {\n   rtx insn;\n \n-  /* If we don't know that this implementation of the function will\n-     actually be used, then we must not set TREE_NOTHROW, since\n-     callers must not assume that this function does not throw.  */\n-  if (DECL_REPLACEABLE_P (current_function_decl))\n-    return 0;\n-\n-  TREE_NOTHROW (current_function_decl) = 1;\n+  crtl->nothrow = 1;\n \n   /* Assume crtl->all_throwers_are_sibcalls until we encounter\n      something that can throw an exception.  We specifically exempt\n@@ -2781,13 +2775,19 @@ set_nothrow_function_flags (void)\n \n   crtl->all_throwers_are_sibcalls = 1;\n \n+  /* If we don't know that this implementation of the function will\n+     actually be used, then we must not set TREE_NOTHROW, since\n+     callers must not assume that this function does not throw.  */\n+  if (TREE_NOTHROW (current_function_decl))\n+    return 0;\n+\n   if (! flag_exceptions)\n     return 0;\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     if (can_throw_external (insn))\n       {\n-        TREE_NOTHROW (current_function_decl) = 0;\n+        crtl->nothrow = 0;\n \n \tif (!CALL_P (insn) || !SIBLING_CALL_P (insn))\n \t  {\n@@ -2800,14 +2800,18 @@ set_nothrow_function_flags (void)\n        insn = XEXP (insn, 1))\n     if (can_throw_external (insn))\n       {\n-        TREE_NOTHROW (current_function_decl) = 0;\n+        crtl->nothrow = 0;\n \n \tif (!CALL_P (insn) || !SIBLING_CALL_P (insn))\n \t  {\n \t    crtl->all_throwers_are_sibcalls = 0;\n \t    return 0;\n \t  }\n       }\n+  if (crtl->nothrow\n+      && (cgraph_function_body_availability (cgraph_node (current_function_decl))\n+          >= AVAIL_AVAILABLE))\n+    TREE_NOTHROW (current_function_decl) = 1;\n   return 0;\n }\n "}, {"sha": "70797974bf0707aa17c6ede5ad06f7795211f248", "filename": "gcc/function.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe89fbc56dd937c74ebfe7338fe785699386cb59/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe89fbc56dd937c74ebfe7338fe785699386cb59/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=fe89fbc56dd937c74ebfe7338fe785699386cb59", "patch": "@@ -441,6 +441,11 @@ struct rtl_data GTY(())\n \n   /* True if dbr_schedule has already been called for this function.  */\n   bool dbr_scheduled_p;\n+\n+  /* True if current function can not throw.  Unlike\n+     TREE_NOTHROW (current_function_decl) it is set even for overwritable\n+     function where currently compiled version of it is nothrow.  */\n+  bool nothrow;\n };\n \n #define return_label (crtl->x_return_label)"}, {"sha": "c992f6d477e506f890f2cb0ba804f793eede5315", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe89fbc56dd937c74ebfe7338fe785699386cb59/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe89fbc56dd937c74ebfe7338fe785699386cb59/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=fe89fbc56dd937c74ebfe7338fe785699386cb59", "patch": "@@ -2368,15 +2368,7 @@ stmt_could_throw_p (gimple stmt)\n   if (code == GIMPLE_ASSIGN || code == GIMPLE_COND)\n     return stmt_could_throw_1_p (stmt);\n   else if (is_gimple_call (stmt))\n-    {\n-      tree t = gimple_call_fndecl (stmt);\n-\n-      /* Assume that calls to weak functions may trap.  */\n-      if (!t || !DECL_P (t) || DECL_WEAK (t))\n-\treturn true;\n-\n-      return (gimple_call_flags (stmt) & ECF_NOTHROW) == 0;\n-    }\n+    return (gimple_call_flags (stmt) & ECF_NOTHROW) == 0;\n   else if (gimple_code (stmt) == GIMPLE_ASM)\n     return (gimple_asm_volatile_p (stmt));\n   else"}]}