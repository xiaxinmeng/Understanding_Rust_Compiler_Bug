{"sha": "b6fb793374fd887aee2b08b44145961b28533be2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZmYjc5MzM3NGZkODg3YWVlMmIwOGI0NDE0NTk2MWIyODUzM2JlMg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-08-31T13:52:31Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-08-31T13:52:31Z"}, "message": "[ARC] Improves and fixes for small data support.\n\nAdd alignment check for short load/store instructions used for sdata,\nas they request 32-bit aligned short immediate.  Use sdata symbol\nalignment information and emit scalled loads/stores whenever is\npossible. The scalled address will extend the access range for sdata\nsymbols.  Allow 64-bit datum into small data section, if double\nload/store instructions are present.\n\ngcc/\n2017-04-12  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-protos.h (compact_sda_memory_operand): Update\n\tprototype.\n\t* config/arc/arc.c (arc_print_operand): Output scalled address for\n\tsdata whenever is possible.\n\t(arc_in_small_data_p): Allow sdata for 64bit datum when double\n\tload/stores are available.\n\t(compact_sda_memory_operand): Check for the alignment required by\n\tcode density instructions.\n\t* config/arc/arc.md (movsi_insn): Use newly introduced Us0\n\tconstraint.\n\t* config/arc/constraints.md (Usd): Update constraint.\n\t(Us0): New constraint.\n\t(Usc): Update constraint.\n\ngcc/testsuite/\n2017-04-12  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/sdata-3.c: New file.\n\nFrom-SVN: r251562", "tree": {"sha": "79bcd5b426f24fa391f4e3f8e998c334ea950953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79bcd5b426f24fa391f4e3f8e998c334ea950953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6fb793374fd887aee2b08b44145961b28533be2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fb793374fd887aee2b08b44145961b28533be2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fb793374fd887aee2b08b44145961b28533be2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fb793374fd887aee2b08b44145961b28533be2/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a621861e39a42ee8b770d660b36041f2ac8bc4a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a621861e39a42ee8b770d660b36041f2ac8bc4a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a621861e39a42ee8b770d660b36041f2ac8bc4a4"}], "stats": {"total": 138, "additions": 126, "deletions": 12}, "files": [{"sha": "f0be29fc339402e0d13b9c42635e3ef76da4d6fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6fb793374fd887aee2b08b44145961b28533be2", "patch": "@@ -1,3 +1,19 @@\n+2017-08-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-protos.h (compact_sda_memory_operand): Update\n+\tprototype.\n+\t* config/arc/arc.c (arc_print_operand): Output scalled address for\n+\tsdata whenever is possible.\n+\t(arc_in_small_data_p): Allow sdata for 64bit datum when double\n+\tload/stores are available.\n+\t(compact_sda_memory_operand): Check for the alignment required by\n+\tcode density instructions.\n+\t* config/arc/arc.md (movsi_insn): Use newly introduced Us0\n+\tconstraint.\n+\t* config/arc/constraints.md (Usd): Update constraint.\n+\t(Us0): New constraint.\n+\t(Usc): Update constraint.\n+\n 2017-08-31  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/82054"}, {"sha": "1c7031c2894bafcae151ead01ec6ceb36db3593c", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=b6fb793374fd887aee2b08b44145961b28533be2", "patch": "@@ -27,7 +27,7 @@ extern struct rtx_def *gen_compare_reg (rtx, machine_mode);\n /* Declarations for various fns used in the .md file.  */\n extern void arc_output_function_epilogue (FILE *, HOST_WIDE_INT, int);\n extern const char *output_shift (rtx *);\n-extern bool compact_sda_memory_operand (rtx op,machine_mode  mode);\n+extern bool compact_sda_memory_operand (rtx, machine_mode, bool);\n extern bool arc_double_limm_p (rtx);\n extern void arc_print_operand (FILE *, rtx, int);\n extern void arc_print_operand_address (FILE *, rtx);"}, {"sha": "c77a818bc6d22d75eba1b1d5ad7bbaa4f54ab5bc", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 55, "deletions": 9, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=b6fb793374fd887aee2b08b44145961b28533be2", "patch": "@@ -3804,6 +3804,26 @@ arc_print_operand (FILE *file, rtx x, int code)\n \t\t  fputs (\".as\", file);\n \t\t  output_scaled = 1;\n \t\t}\n+\t      else if (LEGITIMATE_SMALL_DATA_ADDRESS_P (addr)\n+\t\t       && GET_MODE_SIZE (GET_MODE (x)) > 1)\n+\t\t{\n+\t\t  tree decl = NULL_TREE;\n+\t\t  int align = 0;\n+\t\t  if (GET_CODE (XEXP (addr, 1)) == SYMBOL_REF)\n+\t\t    decl = SYMBOL_REF_DECL (XEXP (addr, 1));\n+\t\t  else if (GET_CODE (XEXP (XEXP (XEXP (addr, 1), 0), 0))\n+\t\t\t   == SYMBOL_REF)\n+\t\t    decl = SYMBOL_REF_DECL (XEXP (XEXP (XEXP (addr, 1), 0), 0));\n+\t\t  if (decl)\n+\t\t    align = DECL_ALIGN (decl);\n+\t\t  align = align / BITS_PER_UNIT;\n+\t\t  if ((GET_MODE_SIZE (GET_MODE (x)) == 2)\n+\t\t      && align && ((align & 1) == 0))\n+\t\t    fputs (\".as\", file);\n+\t\t  if ((GET_MODE_SIZE (GET_MODE (x)) >= 4)\n+\t\t      && align && ((align & 3) == 0))\n+\t\t    fputs (\".as\", file);\n+\t\t}\n \t      break;\n \t    case REG:\n \t      break;\n@@ -7475,12 +7495,10 @@ arc_in_small_data_p (const_tree decl)\n {\n   HOST_WIDE_INT size;\n \n+  /* Strings and functions are never in small data area.  */\n   if (TREE_CODE (decl) == STRING_CST || TREE_CODE (decl) == FUNCTION_DECL)\n     return false;\n \n-\n-  /* We don't yet generate small-data references for -mabicalls.  See related\n-     -G handling in override_options.  */\n   if (TARGET_NO_SDATA_SET)\n     return false;\n \n@@ -7499,7 +7517,7 @@ arc_in_small_data_p (const_tree decl)\n \t  return true;\n     }\n   /* Only global variables go into sdata section for now.  */\n-  else if (1)\n+  else\n     {\n       /* Don't put constants into the small data section: we want them\n \t to be in ROM rather than RAM.  */\n@@ -7529,9 +7547,6 @@ arc_in_small_data_p (const_tree decl)\n \n   size = int_size_in_bytes (TREE_TYPE (decl));\n \n-/*   if (AGGREGATE_TYPE_P (TREE_TYPE (decl))) */\n-/*     return false; */\n-\n   /* Allow only <=4B long data types into sdata.  */\n   return (size > 0 && size <= 4);\n }\n@@ -7623,10 +7638,13 @@ small_data_pattern (rtx op, machine_mode)\n /* volatile cache option still to be handled.  */\n \n bool\n-compact_sda_memory_operand (rtx op, machine_mode mode)\n+compact_sda_memory_operand (rtx op, machine_mode mode, bool short_p)\n {\n   rtx addr;\n   int size;\n+  tree decl = NULL_TREE;\n+  int align = 0;\n+  int mask = 0;\n \n   /* Eliminate non-memory operations.  */\n   if (GET_CODE (op) != MEM)\n@@ -7644,7 +7662,35 @@ compact_sda_memory_operand (rtx op, machine_mode mode)\n   /* Decode the address now.  */\n   addr = XEXP (op, 0);\n \n-  return LEGITIMATE_SMALL_DATA_ADDRESS_P  (addr);\n+  if (!LEGITIMATE_SMALL_DATA_ADDRESS_P (addr))\n+    return false;\n+\n+  if (!short_p || size == 1)\n+    return true;\n+\n+  /* Now check for the alignment, the short loads using gp require the\n+     addresses to be aligned.  */\n+  if (GET_CODE (XEXP (addr, 1)) == SYMBOL_REF)\n+    decl = SYMBOL_REF_DECL (XEXP (addr, 1));\n+  else if (GET_CODE (XEXP (XEXP (XEXP (addr, 1), 0), 0)) == SYMBOL_REF)\n+    decl = SYMBOL_REF_DECL (XEXP (XEXP (XEXP (addr, 1), 0), 0));\n+  if (decl)\n+    align = DECL_ALIGN (decl);\n+  align = align / BITS_PER_UNIT;\n+\n+  switch (mode)\n+    {\n+    case E_HImode:\n+      mask = 1;\n+      break;\n+    default:\n+      mask = 3;\n+      break;\n+    }\n+\n+  if (align && ((align & mask) == 0))\n+    return true;\n+  return false;\n }\n \n /* Implement ASM_OUTPUT_ALIGNED_DECL_LOCAL.  */"}, {"sha": "0ad318c3dc3301979c9f9cb8de5f08c2afe95bf4", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=b6fb793374fd887aee2b08b44145961b28533be2", "patch": "@@ -355,15 +355,15 @@\n    \"@internal\n     A valid _small-data_ memory operand for ARCompact instructions\"\n    (and (match_code \"mem\")\n-\t(match_test \"compact_sda_memory_operand (op, VOIDmode)\")))\n+\t(match_test \"compact_sda_memory_operand (op, VOIDmode, true)\")))\n \n (define_memory_constraint \"Usc\"\n   \"@internal\n    A valid memory operand for storing constants\"\n   (and (match_code \"mem\")\n        (match_test \"!CONSTANT_P (XEXP (op,0))\")\n ;; ??? the assembler rejects stores of immediates to small data.\n-       (match_test \"!compact_sda_memory_operand (op, VOIDmode)\")))\n+       (match_test \"!compact_sda_memory_operand (op, VOIDmode, false)\")))\n \n (define_constraint \"Us<\"\n   \"@internal"}, {"sha": "9de87dd725b0b8ce7557297b33f81a9d98f4857a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6fb793374fd887aee2b08b44145961b28533be2", "patch": "@@ -1,3 +1,8 @@\n+2017-08-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/sdata-3.c: New file.\n+\t* gcc.target/arc/sdata-4.c: Likewise.\n+\n 2017-08-31  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/82054"}, {"sha": "cdf3b6d464ebd67fddc9ac453315e38a0e00e036", "filename": "gcc/testsuite/gcc.target/arc/sdata-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-3.c?ref=b6fb793374fd887aee2b08b44145961b28533be2", "patch": "@@ -0,0 +1,32 @@\n+/* Check if sdata access is done correctly, specially\n+   for variables which are having a different alignment\n+   than the default data type indicates.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int g_a __attribute__ ((aligned (1)));\n+int g_b;\n+short g_c;\n+char g_d;\n+\n+#define TEST(name, optype)\t\t\t\\\n+  void test_ ## name (optype x)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    g_ ## name += x;\t\t\t\t\\\n+  }\n+\n+TEST (a, int)\n+TEST (b, int)\n+TEST (c, short)\n+TEST (d, char)\n+\n+/* { dg-final { scan-assembler \"ld r2,\\\\\\[gp,@g_a@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"ld.as r2,\\\\\\[gp,@g_b@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"ld\\[hw\\]\\\\\\.as r2,\\\\\\[gp,@g_c@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"ldb r2,\\\\\\[gp,@g_d@sda\\\\\\]\" } } */\n+\n+/* { dg-final { scan-assembler \"st r0,\\\\\\[gp,@g_a@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"st_s r0,\\\\\\[gp,@g_b@sda\\\\\\]\" { target { arcem || archs } } } } */\n+/* { dg-final { scan-assembler \"st\\\\\\.as r0,\\\\\\[gp,@g_b@sda\\\\\\]\" { target { arc700 || arc6xx } } } } */\n+/* { dg-final { scan-assembler \"st\\[hw\\]\\\\\\.as r0,\\\\\\[gp,@g_c@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"stb r0,\\\\\\[gp,@g_d@sda\\\\\\]\" } } */"}, {"sha": "45fe71256763e506d9ae2e20e096e65f46d32aa5", "filename": "gcc/testsuite/gcc.target/arc/sdata-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb793374fd887aee2b08b44145961b28533be2/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-4.c?ref=b6fb793374fd887aee2b08b44145961b28533be2", "patch": "@@ -0,0 +1,15 @@\n+/* Check if sdata access is done correctly, specially\n+   for variables which are having a different alignment\n+   than the default data type indicates.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+short gA  __attribute__ ((aligned(1)));\n+\n+void foo (void)\n+{\n+  gA += gA + 3;\n+}\n+\n+/* { dg-final { scan-assembler-not \"ld\\[wh\\]_s r0,\\\\\\[gp\" } } */\n+/* { dg-final { scan-assembler-not \"st\\[wh\\]\\\\\\.as.*gp\" } } */"}]}