{"sha": "cb1758d95cc12e3f2d6c0e295288e4867c2e7197", "node_id": "C_kwDOANBUbNoAKGNiMTc1OGQ5NWNjMTJlM2YyZDZjMGUyOTUyODhlNDg2N2MyZTcxOTc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-28T15:41:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-28T15:41:49Z"}, "message": "i386: Improve ix86_expand_int_movcc\n\nWhen working on PR105338, I've noticed that in some cases we emit\nunnecessarily long sequence which has then higher seq_cost than necessary.\n\nE.g. when ix86_expand_int_movcc is called with\noperands[0] (reg/v:SI 83 [ i ])\noperands[1] (eq (reg/v:SI 83 [ i ]) (const_int 0 [0]))\noperands[2] (reg/v:SI 83 [ i ])\noperands[3] (const_int -2 [0xfffffffffffffffe])\ni.e. r83 = r83 == 0 ? r83 : -2 which with my PR105338 patch is equivalent to\nr83 = r83 == 0 ? 0 : -2, we emit:\n(insn 24 0 25 (set (reg:CC 17 flags)\n        (compare:CC (reg/v:SI 83 [ i ])\n            (const_int 1 [0x1]))) 11 {*cmpsi_1}\n     (nil))\n(insn 25 24 26 (parallel [\n            (set (reg:SI 85)\n                (if_then_else:SI (ltu:SI (reg:CC 17 flags)\n                        (const_int 0 [0]))\n                    (const_int -1 [0xffffffffffffffff])\n                    (const_int 0 [0])))\n            (clobber (reg:CC 17 flags))\n        ]) 1192 {*x86_movsicc_0_m1}\n     (nil))\n(insn 26 25 27 (set (reg:SI 85)\n        (not:SI (reg:SI 85))) 683 {*one_cmplsi2_1}\n     (nil))\n(insn 27 26 28 (parallel [\n            (set (reg:SI 85)\n                (and:SI (reg:SI 85)\n                    (const_int -2 [0xfffffffffffffffe])))\n            (clobber (reg:CC 17 flags))\n        ]) 533 {*andsi_1}\n     (nil))\n(insn 28 27 0 (set (reg/v:SI 83 [ i ])\n        (reg:SI 85)) 81 {*movsi_internal}\n     (nil))\nwhich has seq_cost (seq, true) 24.  But it could have just cost 20\nif we didn't decide to use a fresh temporary r85 and used r83 instead\n- we could avoid the copy at the end.\nThe reason for it is in the 2 reg_overlap_mentioned_p calls,\nthe destination (out) indeed overlaps op0 - it is the same register,\nbut I don't see why that is a problem, this is in a code path where\nwe've already called\nix86_expand_carry_flag_compare (code, op0, op1, &compare_op)\nearlier, so the fact that we've out overlaps op0 or op1 shouldn't matter\nbecause insn 24 above is already emitted, we should just care if\nit overlaps whatever we got from that ix86_expand_carry_flag_compare\ncall, i.e. compare_op, otherwise we can overwrite out just fine;\nwe also know at that point that the last 2 operands of ?: are constants.\n\n2022-04-28  Jakub Jelinek  <jakub@redhat.com>\n\n\t* config/i386/i386-expand.cc (ix86_expand_int_movcc): Create a\n\ttemporary only if out overlaps compare_op, not when it overlaps\n\top0 or op1.", "tree": {"sha": "2b5b868fb16c3ab12a67dbf2b712c020dea15008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b5b868fb16c3ab12a67dbf2b712c020dea15008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb1758d95cc12e3f2d6c0e295288e4867c2e7197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1758d95cc12e3f2d6c0e295288e4867c2e7197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1758d95cc12e3f2d6c0e295288e4867c2e7197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1758d95cc12e3f2d6c0e295288e4867c2e7197/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12cc2b32991c05aba200a11bda3c382564185c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12cc2b32991c05aba200a11bda3c382564185c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12cc2b32991c05aba200a11bda3c382564185c8b"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "bc806ffa283bc1b445bea419318bc36a33e1e39c", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1758d95cc12e3f2d6c0e295288e4867c2e7197/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1758d95cc12e3f2d6c0e295288e4867c2e7197/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=cb1758d95cc12e3f2d6c0e295288e4867c2e7197", "patch": "@@ -3224,8 +3224,7 @@ ix86_expand_int_movcc (rtx operands[])\n \t\t}\n \t      diff = ct - cf;\n \n-\t      if (reg_overlap_mentioned_p (out, op0)\n-\t\t  || reg_overlap_mentioned_p (out, op1))\n+\t      if (reg_overlap_mentioned_p (out, compare_op))\n \t\ttmp = gen_reg_rtx (mode);\n \n \t      if (mode == DImode)"}]}