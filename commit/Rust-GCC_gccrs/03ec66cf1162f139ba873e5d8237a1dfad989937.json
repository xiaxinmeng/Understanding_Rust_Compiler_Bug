{"sha": "03ec66cf1162f139ba873e5d8237a1dfad989937", "node_id": "C_kwDOANBUbNoAKDAzZWM2NmNmMTE2MmYxMzliYTg3M2U1ZDgyMzdhMWRmYWQ5ODk5Mzc", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-20T16:52:59Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-20T17:02:22Z"}, "message": "Remove bad has-minus flag which should be contained within AST::Literal", "tree": {"sha": "bad5e9e33366a3c8979a3aa0e22575724ab645e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bad5e9e33366a3c8979a3aa0e22575724ab645e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03ec66cf1162f139ba873e5d8237a1dfad989937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ec66cf1162f139ba873e5d8237a1dfad989937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ec66cf1162f139ba873e5d8237a1dfad989937", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ec66cf1162f139ba873e5d8237a1dfad989937/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14dbac9a8bbc7f3cf37679e91ea56e449a64bde7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14dbac9a8bbc7f3cf37679e91ea56e449a64bde7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14dbac9a8bbc7f3cf37679e91ea56e449a64bde7"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "5c6a7545d7697a3ad00e8b8bd66f3dce7a218472", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ec66cf1162f139ba873e5d8237a1dfad989937/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ec66cf1162f139ba873e5d8237a1dfad989937/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=03ec66cf1162f139ba873e5d8237a1dfad989937", "patch": "@@ -2819,12 +2819,7 @@ StructPattern::as_string () const\n std::string\n LiteralPattern::as_string () const\n {\n-  std::string str;\n-\n-  if (has_minus)\n-    str += \"-\";\n-\n-  return str + lit.as_string ();\n+  return lit.as_string ();\n }\n \n std::string"}, {"sha": "62456e89f8274b52ed31d325485bf6ae5f7ca3e5", "filename": "gcc/rust/ast/rust-pattern.h", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ec66cf1162f139ba873e5d8237a1dfad989937/gcc%2Frust%2Fast%2Frust-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ec66cf1162f139ba873e5d8237a1dfad989937/gcc%2Frust%2Fast%2Frust-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-pattern.h?ref=03ec66cf1162f139ba873e5d8237a1dfad989937", "patch": "@@ -27,31 +27,21 @@ namespace AST {\n class LiteralPattern : public Pattern\n {\n   Literal lit;\n-  /* make literal have a type given by enum, etc. rustc uses an extended form of\n-   * its literal token implementation */\n-  // TODO: literal representation - use LiteralExpr? or another thing?\n-\n-  // Minus prefixed to literal (if integer or floating-point)\n-  bool has_minus;\n-  // Actually, this might be a good place to use a template.\n-\n   Location locus;\n   NodeId node_id;\n \n public:\n   std::string as_string () const override;\n \n   // Constructor for a literal pattern\n-  LiteralPattern (Literal lit, Location locus, bool has_minus = false)\n-    : lit (std::move (lit)), has_minus (has_minus), locus (locus),\n+  LiteralPattern (Literal lit, Location locus)\n+    : lit (std::move (lit)), locus (locus),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n-  LiteralPattern (std::string val, Literal::LitType type, Location locus,\n-\t\t  bool has_minus = false)\n+  LiteralPattern (std::string val, Literal::LitType type, Location locus)\n     : lit (Literal (std::move (val), type, PrimitiveCoreType::CORETYPE_STR)),\n-      has_minus (has_minus), locus (locus),\n-      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n+      locus (locus), node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   Location get_locus () const override final { return locus; }\n@@ -62,6 +52,10 @@ class LiteralPattern : public Pattern\n \n   NodeId get_pattern_node_id () const override final { return node_id; }\n \n+  Literal &get_literal () { return lit; }\n+\n+  const Literal &get_literal () const { return lit; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -1110,7 +1104,7 @@ class TupleStructPattern : public Pattern\n   TupleStructPattern (TupleStructPattern &&other) = default;\n   TupleStructPattern &operator= (TupleStructPattern &&other) = default;\n \n-  Location get_locus () const { return path.get_locus (); }\n+  Location get_locus () const override { return path.get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "0198bfa3e55b779e7da106ea84c9ff91a1fcd60d", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ec66cf1162f139ba873e5d8237a1dfad989937/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ec66cf1162f139ba873e5d8237a1dfad989937/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=03ec66cf1162f139ba873e5d8237a1dfad989937", "patch": "@@ -10400,7 +10400,7 @@ Parser<ManagedTokenSource>::parse_literal_or_range_pattern ()\n       // literal pattern\n       return std::unique_ptr<AST::LiteralPattern> (\n \tnew AST::LiteralPattern (range_lower->get_str (), type,\n-\t\t\t\t range_lower->get_locus (), has_minus));\n+\t\t\t\t range_lower->get_locus ()));\n     }\n }\n "}]}