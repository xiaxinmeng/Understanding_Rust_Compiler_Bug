{"sha": "ff8cea7e3e94383c9fdcd3529b371b93e56e087e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4Y2VhN2UzZTk0MzgzYzlmZGNkMzUyOWIzNzFiOTNlNTZlMDg3ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-09-06T19:59:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-09-06T19:59:30Z"}, "message": "final.c (output_in_slot): Delete.\n\n\t* final.c (output_in_slot): Delete.\n\t(final_scan_insn): Revert 2004-09-03 change.\n\t(output_asm_insn): Likewise.\n\t* config/sparc/sparc.c (output_return): Likewise.\n\t(output_sibcall): Likewise.\n\nFrom-SVN: r87124", "tree": {"sha": "1108cbe9b197e77dd3ee928282adcd98c2c9dd8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1108cbe9b197e77dd3ee928282adcd98c2c9dd8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff8cea7e3e94383c9fdcd3529b371b93e56e087e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8cea7e3e94383c9fdcd3529b371b93e56e087e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff8cea7e3e94383c9fdcd3529b371b93e56e087e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8cea7e3e94383c9fdcd3529b371b93e56e087e/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8679c6494fe89fe933d9e038cd6ff2a822b7c095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8679c6494fe89fe933d9e038cd6ff2a822b7c095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8679c6494fe89fe933d9e038cd6ff2a822b7c095"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "1188b6100f7fc6eca28bcd92cad90b816c4ca481", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8cea7e3e94383c9fdcd3529b371b93e56e087e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8cea7e3e94383c9fdcd3529b371b93e56e087e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff8cea7e3e94383c9fdcd3529b371b93e56e087e", "patch": "@@ -1,3 +1,11 @@\n+2004-09-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* final.c (output_in_slot): Delete.\n+\t(final_scan_insn): Revert 2004-09-03 change.\n+\t(output_asm_insn): Likewise.\n+\t* config/sparc/sparc.c (output_return): Likewise.\n+\t(output_sibcall): Likewise.\n+\n 2004-09-06  Jan Hubicka  <jh@suse.cz>\n \n \t* loop.c (loop_dump_aux): Do not print RTL when not available."}, {"sha": "ac1a4345a0748fbcba6766515f9e7dd69e58ade8", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8cea7e3e94383c9fdcd3529b371b93e56e087e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8cea7e3e94383c9fdcd3529b371b93e56e087e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ff8cea7e3e94383c9fdcd3529b371b93e56e087e", "patch": "@@ -4707,7 +4707,7 @@ output_return (rtx insn)\n \t  if (! delay)\n \t    abort ();\n \n-\t  final_scan_insn (delay, asm_out_file, 1, 0, 2, NULL);\n+\t  final_scan_insn (delay, asm_out_file, 1, 0, 1, NULL);\n \t  PATTERN (delay) = gen_blockage ();\n \t  INSN_CODE (delay) = -1;\n \t}\n@@ -4756,7 +4756,7 @@ output_return (rtx insn)\n \t      epilogue_renumber (&pat, 0);\n \t      fprintf (asm_out_file, \"\\treturn\\t%%i7+%d\\n\",\n \t\t       sparc_skip_caller_unimp ? 12 : 8);\n-\t      final_scan_insn (delay, asm_out_file, 1, 0, 2, NULL);\n+\t      final_scan_insn (delay, asm_out_file, 1, 0, 1, NULL);\n \t    }\n \t  else\n \t    {\n@@ -4817,7 +4817,7 @@ output_sibcall (rtx insn, rtx call_operand)\n \n \t  output_asm_insn (\"sethi\\t%%hi(%a0), %%g1\", operands);\n \t  output_asm_insn (\"jmp\\t%%g1 + %%lo(%a0)\", operands);\n-\t  final_scan_insn (delay, asm_out_file, 1, 0, 2, NULL);\n+\t  final_scan_insn (delay, asm_out_file, 1, 0, 1, NULL);\n \n \t  PATTERN (delay) = gen_blockage ();\n \t  INSN_CODE (delay) = -1;"}, {"sha": "fe4eaa67371599306eabd7caf62318b3bba2766e", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8cea7e3e94383c9fdcd3529b371b93e56e087e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8cea7e3e94383c9fdcd3529b371b93e56e087e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ff8cea7e3e94383c9fdcd3529b371b93e56e087e", "patch": "@@ -200,10 +200,6 @@ static int app_on;\n \n rtx final_sequence;\n \n-/* True if we are outputting insns in a delay slot.  This is used\n-   to prettify the assembly.  */\n-static bool output_in_slot;\n-\n #ifdef ASSEMBLER_DIALECT\n \n /* Number of the assembler dialect to use, starting at 0.  */\n@@ -1667,11 +1663,8 @@ scan_ahead_for_unlikely_executed_note (rtx insn)\n    is the insn being scanned.\n    Value returned is the next insn to be scanned.\n \n-   NOPEEPHOLES is used to disallow peephole processing:\n-    - 0: peepholes are allowed,\n-    - 1: peepholes are not allowed,\n-    - 2: peepholes are not allowed and we are in the\n-         slot of a delayed branch.\n+   NOPEEPHOLES is the flag to disallow peephole processing (currently\n+   used for within delayed branch sequence output).\n \n    SEEN is used to track the end of the prologue, for emitting\n    debug information.  We force the emission of a line note after\n@@ -1681,7 +1674,8 @@ scan_ahead_for_unlikely_executed_note (rtx insn)\n \n rtx\n final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n-\t\t int prescan, int nopeepholes, int *seen)\n+\t\t int prescan, int nopeepholes ATTRIBUTE_UNUSED,\n+\t\t int *seen)\n {\n #ifdef HAVE_cc0\n   rtx set;\n@@ -2201,7 +2195,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t/* We loop in case any instruction in a delay slot gets\n \t\t   split.  */\n \t\tdo\n-\t\t  insn = final_scan_insn (insn, file, 0, prescan, 2, seen);\n+\t\t  insn = final_scan_insn (insn, file, 0, prescan, 1, seen);\n \t\twhile (insn != next);\n \t      }\n #ifdef DBR_OUTPUT_SEQEND\n@@ -2533,9 +2527,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n #endif\n \n \t/* Output assembler code from the template.  */\n-\toutput_in_slot = (nopeepholes > 1);\n \toutput_asm_insn (template, recog_data.operand);\n-\toutput_in_slot = false;\n \n \t/* If necessary, report the effect that the instruction has on\n \t   the unwind info.   We've already done this for delay slots\n@@ -2996,8 +2988,6 @@ output_asm_insn (const char *template, rtx *operands)\n   memset (opoutput, 0, sizeof opoutput);\n   p = template;\n   putc ('\\t', asm_out_file);\n-  if (output_in_slot)\n-    putc (' ', asm_out_file);\n \n #ifdef ASM_OUTPUT_OPCODE\n   ASM_OUTPUT_OPCODE (asm_out_file, p);"}]}