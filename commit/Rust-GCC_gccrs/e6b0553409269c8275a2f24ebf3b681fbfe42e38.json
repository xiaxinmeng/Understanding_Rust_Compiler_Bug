{"sha": "e6b0553409269c8275a2f24ebf3b681fbfe42e38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiMDU1MzQwOTI2OWM4Mjc1YTJmMjRlYmYzYjY4MWZiZmU0MmUzOA==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2005-07-01T01:44:12Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2005-07-01T01:44:12Z"}, "message": "objc-act.c (objc_build_volatilized_type): New function.\n\n[gcc/objc/ChangeLog]\n2005-06-30  Ziemowit Laski  <zlaski@apple.com>\n\n       * objc-act.c (objc_build_volatilized_type): New function.\n       (objc_volatilize_decl): Call objc_build_volatilized_type()\n       instead of build_qualified_type().\n\n[gcc/testsuite/ChangeLog]\n2005-06-30  Ziemowit Laski  <zlaski@apple.com>\n\n       * obj-c++.dg/try-catch-11.mm: New.\n       * objc.dg/try-catch-10.m: New.\n\nFrom-SVN: r101493", "tree": {"sha": "7f58bf31af2f4788ebcce144ba3eb984936a0960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f58bf31af2f4788ebcce144ba3eb984936a0960"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6b0553409269c8275a2f24ebf3b681fbfe42e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b0553409269c8275a2f24ebf3b681fbfe42e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b0553409269c8275a2f24ebf3b681fbfe42e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b0553409269c8275a2f24ebf3b681fbfe42e38/comments", "author": null, "committer": null, "parents": [{"sha": "cb5fee25cdedfa7e218a15f0996a73b1e8470b26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb5fee25cdedfa7e218a15f0996a73b1e8470b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb5fee25cdedfa7e218a15f0996a73b1e8470b26"}], "stats": {"total": 130, "additions": 128, "deletions": 2}, "files": [{"sha": "6963c53160a47dea054ec74f3858845f2e865f5e", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b0553409269c8275a2f24ebf3b681fbfe42e38/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b0553409269c8275a2f24ebf3b681fbfe42e38/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=e6b0553409269c8275a2f24ebf3b681fbfe42e38", "patch": "@@ -1,3 +1,9 @@\n+2005-06-30  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc-act.c (objc_build_volatilized_type): New function.\n+\t(objc_volatilize_decl): Call objc_build_volatilized_type()\n+\tinstead of build_qualified_type().\n+\n 2005-06-29  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc-act.c (objc_build_internal_const_str_type): New function."}, {"sha": "e44f8b0fbd972cd38df747bf934683b5b0e2dde6", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b0553409269c8275a2f24ebf3b681fbfe42e38/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b0553409269c8275a2f24ebf3b681fbfe42e38/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=e6b0553409269c8275a2f24ebf3b681fbfe42e38", "patch": "@@ -185,6 +185,7 @@ static tree build_protocol_initializer (tree, tree, tree, tree, tree);\n static tree get_class_ivars (tree, bool);\n static tree generate_protocol_list (tree);\n static void build_protocol_reference (tree);\n+static tree objc_build_volatilized_type (tree);\n \n #ifdef OBJCPLUS\n static void objc_generate_cxx_cdtors (void);\n@@ -868,6 +869,41 @@ objc_build_struct (tree name, tree fields, tree super_name)\n   return s;\n }\n \n+/* Build a type differing from TYPE only in that TYPE_VOLATILE is set.\n+   Unlike tree.c:build_qualified_type(), preserve TYPE_LANG_SPECIFIC in the\n+   process.  */\n+static tree\n+objc_build_volatilized_type (tree type)\n+{\n+  tree t;\n+\n+  /* Check if we have not constructed the desired variant already.  */\n+  for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n+    {\n+      /* The type qualifiers must (obviously) match up.  */\n+      if (!TYPE_VOLATILE (t)\n+\t  || (TYPE_READONLY (t) != TYPE_READONLY (type))\n+\t  || (TYPE_RESTRICT (t) != TYPE_RESTRICT (type)))\n+\tcontinue;\n+\n+      /* For pointer types, the pointees (and hence their TYPE_LANG_SPECIFIC\n+\t info, if any) must match up.  */\n+      if (POINTER_TYPE_P (t)\n+\t  && (TREE_TYPE (t) != TREE_TYPE (type)))\n+\tcontinue;\n+\n+      /* Everything matches up!  */\n+      return t;\n+    }\n+\n+  /* Ok, we could not re-use any of the pre-existing variants.  Create\n+     a new one.  */\n+  t = build_variant_type_copy (type);\n+  TYPE_VOLATILE (t) = 1;\n+  \n+  return t;\n+}\n+\n /* Mark DECL as being 'volatile' for purposes of Darwin\n    _setjmp()/_longjmp() exception handling.  Called from\n    objc_mark_locals_volatile().  */\n@@ -884,8 +920,7 @@ objc_volatilize_decl (tree decl)\n       struct volatilized_type key;\n       void **loc;\n \n-      t = build_qualified_type (t, (TYPE_QUALS (t)\n-\t\t\t\t    | TYPE_QUAL_VOLATILE));\n+      t = objc_build_volatilized_type (t);\n       key.type = t;\n       loc = htab_find_slot (volatilized_htab, &key, INSERT);\n "}, {"sha": "fe7a632ef587ecf2214797eb24c604edc2753956", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b0553409269c8275a2f24ebf3b681fbfe42e38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b0553409269c8275a2f24ebf3b681fbfe42e38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6b0553409269c8275a2f24ebf3b681fbfe42e38", "patch": "@@ -1,3 +1,8 @@\n+2005-06-30  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* obj-c++.dg/try-catch-11.mm: New.\n+\t* objc.dg/try-catch-10.m: New.\n+\n 2005-06-29  David Edelsohn  <edelsohn@gnu.org>\n \n \t* g++.dg/other/ucnid-1.C: xfail on AIX."}, {"sha": "1da1b47984a38274deada341532f3d7f632e9ab2", "filename": "gcc/testsuite/obj-c++.dg/try-catch-11.mm", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b0553409269c8275a2f24ebf3b681fbfe42e38/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b0553409269c8275a2f24ebf3b681fbfe42e38/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-11.mm?ref=e6b0553409269c8275a2f24ebf3b681fbfe42e38", "patch": "@@ -0,0 +1,40 @@\n+/* Ensure that @try/@catch blocks do not mess with types of\n+   local objects (other than their volatile bits).  */\n+\n+/* { dg-options \"-fobjc-exceptions -fnext-runtime\" } */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@protocol Proto1\n+- (int)meth1;\n+@end\n+\n+@protocol Proto2\n+- (int)meth2;\n+@end\n+\n+@interface MyClass: Object <Proto2> {\n+  int a;\n+}\n+- (int)meth2;\n+- (Object *)parm1: (id)p1 parm2: (id<Proto1>)p2;\n+@end\n+\n+MyClass *mc1, *mc2;\n+\n+@implementation MyClass\n+- (int)meth2 {\n+  return a;\n+}\n+- (Object *)parm1: (id)p1 parm2: (id<Proto1>)p2 {\n+  @try {\n+    mc2 = p2;   /* { dg-warning \"type .id <Proto1>. does not conform to the .Proto2. protocol\" } */\n+  }\n+  @catch (id exc) {\n+    return exc;\n+  }\n+  mc1 = p1;  /* no warning here! */\n+  return self;\n+}\n+@end  "}, {"sha": "1da1b47984a38274deada341532f3d7f632e9ab2", "filename": "gcc/testsuite/objc.dg/try-catch-10.m", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b0553409269c8275a2f24ebf3b681fbfe42e38/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b0553409269c8275a2f24ebf3b681fbfe42e38/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-10.m?ref=e6b0553409269c8275a2f24ebf3b681fbfe42e38", "patch": "@@ -0,0 +1,40 @@\n+/* Ensure that @try/@catch blocks do not mess with types of\n+   local objects (other than their volatile bits).  */\n+\n+/* { dg-options \"-fobjc-exceptions -fnext-runtime\" } */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@protocol Proto1\n+- (int)meth1;\n+@end\n+\n+@protocol Proto2\n+- (int)meth2;\n+@end\n+\n+@interface MyClass: Object <Proto2> {\n+  int a;\n+}\n+- (int)meth2;\n+- (Object *)parm1: (id)p1 parm2: (id<Proto1>)p2;\n+@end\n+\n+MyClass *mc1, *mc2;\n+\n+@implementation MyClass\n+- (int)meth2 {\n+  return a;\n+}\n+- (Object *)parm1: (id)p1 parm2: (id<Proto1>)p2 {\n+  @try {\n+    mc2 = p2;   /* { dg-warning \"type .id <Proto1>. does not conform to the .Proto2. protocol\" } */\n+  }\n+  @catch (id exc) {\n+    return exc;\n+  }\n+  mc1 = p1;  /* no warning here! */\n+  return self;\n+}\n+@end  "}]}