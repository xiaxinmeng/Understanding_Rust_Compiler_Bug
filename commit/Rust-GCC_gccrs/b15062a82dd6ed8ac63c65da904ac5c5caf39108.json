{"sha": "b15062a82dd6ed8ac63c65da904ac5c5caf39108", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1MDYyYTgyZGQ2ZWQ4YWM2M2M2NWRhOTA0YWM1YzVjYWYzOTEwOA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2012-07-16T13:10:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-16T13:10:02Z"}, "message": "decl.c (intrin_return_compatible_p): Map Address to void *.\n\n2012-07-16  Tristan Gingold  <gingold@adacore.com>\n\n\t* decl.c (intrin_return_compatible_p): Map Address to void *.\n\nFrom-SVN: r189536", "tree": {"sha": "6ee0e07e764406617f8f8b5651122752fcf8ea7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ee0e07e764406617f8f8b5651122752fcf8ea7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b15062a82dd6ed8ac63c65da904ac5c5caf39108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15062a82dd6ed8ac63c65da904ac5c5caf39108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15062a82dd6ed8ac63c65da904ac5c5caf39108", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15062a82dd6ed8ac63c65da904ac5c5caf39108/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d08a38d3b668199dbb2b6ebd501bb857af5da57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d08a38d3b668199dbb2b6ebd501bb857af5da57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d08a38d3b668199dbb2b6ebd501bb857af5da57"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "a8e82037ba7b0f31e47425852fd87d30d3ec131d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15062a82dd6ed8ac63c65da904ac5c5caf39108/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15062a82dd6ed8ac63c65da904ac5c5caf39108/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b15062a82dd6ed8ac63c65da904ac5c5caf39108", "patch": "@@ -1,3 +1,8 @@\n+2012-07-16  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gcc-interface/decl.c (intrin_return_compatible_p): Map Address to\n+\tvoid *.\n+\n 2012-07-16  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_ch9.adb (Ensure_Statement_Present): New subprogram."}, {"sha": "ef7c87c366e8d3a027a2f71cbe9633aef87f587b", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15062a82dd6ed8ac63c65da904ac5c5caf39108/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15062a82dd6ed8ac63c65da904ac5c5caf39108/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=b15062a82dd6ed8ac63c65da904ac5c5caf39108", "patch": "@@ -8046,6 +8046,10 @@ intrin_return_compatible_p (intrin_binding_t * inb)\n       && !VOID_TYPE_P (btin_return_type))\n     return true;\n \n+  /* If return type is Address (integer type), map it to void *.  */\n+  if (Is_Descendent_Of_Address (Etype (inb->gnat_entity)))\n+    ada_return_type = ptr_void_type_node;\n+\n   /* Check return types compatibility otherwise.  Note that this\n      handles void/void as well.  */\n   if (intrin_types_incompatible_p (btin_return_type, ada_return_type))"}]}