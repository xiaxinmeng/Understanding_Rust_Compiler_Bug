{"sha": "8f9dd1b0bdd935592ba151e9d843fddf6193afbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY5ZGQxYjBiZGQ5MzU1OTJiYTE1MWU5ZDg0M2ZkZGY2MTkzYWZiYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-19T21:36:38Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-20T00:14:29Z"}, "message": "c++: Fix wrong-code with non-constexpr constructor [PR93169]\n\nIn order to detect modifying constant objects in constexpr evaluation,\nwhich is UB, in r10-2655 I added code that sets TREE_READONLY on\nCONSTRUCTORs of const-qualified objects after they have been fully\nconstructed.  But I never made sure that what we're setting the flag\non actually is a CONSTRUCTOR.  Consequently, as this test case shows,\nwe could set TREE_READONLY on a VAR_DECL that in fact wasn't constant,\ncausing problems later.  Fixed by setting the flag on CONSTRUCTORs\nonly, and only when the evaluation produced something constant.\n\n2020-02-19  Marek Polacek  <polacek@redhat.com>\n\n\tPR c++/93169 - wrong-code with a non-constexpr constructor.\n\t* constexpr.c (cxx_eval_call_expression): Only set TREE_READONLY\n\ton constant CONSTRUCTORs.\n\n\t* g++.dg/cpp0x/constexpr-93169.C: New test.", "tree": {"sha": "e19b0e3022901799a7fae3326655494fc1ad49a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e19b0e3022901799a7fae3326655494fc1ad49a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f9dd1b0bdd935592ba151e9d843fddf6193afbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9dd1b0bdd935592ba151e9d843fddf6193afbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f9dd1b0bdd935592ba151e9d843fddf6193afbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9dd1b0bdd935592ba151e9d843fddf6193afbc/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccf86d54cb02ed24bc4568bd9fffdcdbf0bf68a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf86d54cb02ed24bc4568bd9fffdcdbf0bf68a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf86d54cb02ed24bc4568bd9fffdcdbf0bf68a8"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "e1ac5b0f29e2e36ba12295804984ef44f823a401", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9dd1b0bdd935592ba151e9d843fddf6193afbc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9dd1b0bdd935592ba151e9d843fddf6193afbc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f9dd1b0bdd935592ba151e9d843fddf6193afbc", "patch": "@@ -1,3 +1,9 @@\n+2020-02-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93169 - wrong-code with a non-constexpr constructor.\n+\t* constexpr.c (cxx_eval_call_expression): Only set TREE_READONLY\n+\ton constant CONSTRUCTORs.\n+\n 2020-02-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93710 - poor diagnostic for array initializer."}, {"sha": "128f760778bb84d5eba15c774a63aca6ae13dac0", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9dd1b0bdd935592ba151e9d843fddf6193afbc/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9dd1b0bdd935592ba151e9d843fddf6193afbc/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8f9dd1b0bdd935592ba151e9d843fddf6193afbc", "patch": "@@ -2474,7 +2474,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t\t     /*lval*/false,\n \t\t\t\t\t\t     non_constant_p,\n \t\t\t\t\t\t     overflow_p);\n-\t      TREE_READONLY (e) = true;\n+\t      if (TREE_CODE (e) == CONSTRUCTOR && !*non_constant_p)\n+\t\tTREE_READONLY (e) = true;\n \t    }\n \n \t  /* Forget the saved values of the callee's SAVE_EXPRs and"}, {"sha": "a54505ed73e5c129a7dc2a22adf2133a844e0d0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9dd1b0bdd935592ba151e9d843fddf6193afbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9dd1b0bdd935592ba151e9d843fddf6193afbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f9dd1b0bdd935592ba151e9d843fddf6193afbc", "patch": "@@ -1,3 +1,8 @@\n+2020-02-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93169 - wrong-code with a non-constexpr constructor.\n+\t* g++.dg/cpp0x/constexpr-93169.C: New test.\n+\n 2020-02-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/92128"}, {"sha": "79fd352c0c565dd682c7610fa85383cce859c8b5", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-93169.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9dd1b0bdd935592ba151e9d843fddf6193afbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-93169.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9dd1b0bdd935592ba151e9d843fddf6193afbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-93169.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-93169.C?ref=8f9dd1b0bdd935592ba151e9d843fddf6193afbc", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/93169 - Wrong-code with a non-constexpr constructor.\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O2\" }\n+\n+template <typename T> class B {\n+  struct C {\n+    T h;\n+    constexpr C() {}\n+    ~C() {}\n+  } c;\n+};\n+struct S {\n+  int g;\n+  S() { g = 2; }\n+};\n+\n+int\n+main()\n+{\n+  static const B<S> f;\n+}"}]}