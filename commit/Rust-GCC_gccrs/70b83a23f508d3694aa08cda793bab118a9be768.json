{"sha": "70b83a23f508d3694aa08cda793bab118a9be768", "node_id": "C_kwDOANBUbNoAKDcwYjgzYTIzZjUwOGQzNjk0YWEwOGNkYTc5M2JhYjExOGE5YmU3Njg", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-17T22:46:20Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-20T21:47:57Z"}, "message": "gccrs: Return resolved_node_id when possible\n\nTo enable use statement to export a name to a path such as the prelude\nexample: use option::Option::{self, None, Some} we need to get the resolved\nnode id of the self, None and Some in order to export the name of None and\nSome to their respective NodeId.\n\ngcc/rust/ChangeLog:\n\n\t* resolve/rust-ast-resolve-path.cc (ResolvePath::ResolvePath): return NodeId\n\t(ResolvePath::go): update signiture\n\t(ResolvePath::resolve_path): return resolved_node_id\n\t* resolve/rust-ast-resolve-path.h: update prototypes\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "d3771d4cb743b1e64e6426b82f604e718d4c07ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3771d4cb743b1e64e6426b82f604e718d4c07ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70b83a23f508d3694aa08cda793bab118a9be768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b83a23f508d3694aa08cda793bab118a9be768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b83a23f508d3694aa08cda793bab118a9be768", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b83a23f508d3694aa08cda793bab118a9be768/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eba43033b139581d7152f9bfc5a0ae6277f9fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eba43033b139581d7152f9bfc5a0ae6277f9fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eba43033b139581d7152f9bfc5a0ae6277f9fee"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "c5b8deaa107db3c8e485f692993c5b99b5360502", "filename": "gcc/rust/resolve/rust-ast-resolve-path.cc", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b83a23f508d3694aa08cda793bab118a9be768/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b83a23f508d3694aa08cda793bab118a9be768/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc?ref=70b83a23f508d3694aa08cda793bab118a9be768", "patch": "@@ -25,28 +25,28 @@ namespace Resolver {\n \n ResolvePath::ResolvePath () : ResolverBase () {}\n \n-void\n+NodeId\n ResolvePath::go (AST::PathInExpression *expr)\n {\n   ResolvePath resolver;\n-  resolver.resolve_path (expr);\n+  return resolver.resolve_path (expr);\n }\n \n-void\n+NodeId\n ResolvePath::go (AST::QualifiedPathInExpression *expr)\n {\n   ResolvePath resolver;\n-  resolver.resolve_path (expr);\n+  return resolver.resolve_path (expr);\n }\n \n-void\n+NodeId\n ResolvePath::go (AST::SimplePath *expr)\n {\n   ResolvePath resolver;\n-  resolver.resolve_path (expr);\n+  return resolver.resolve_path (expr);\n }\n \n-void\n+NodeId\n ResolvePath::resolve_path (AST::PathInExpression *expr)\n {\n   NodeId resolved_node_id = UNKNOWN_NODEID;\n@@ -68,7 +68,7 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n \t\t\t \"failed to resolve: %<%s%> in paths can only be used \"\n \t\t\t \"in start position\",\n \t\t\t segment.as_string ().c_str ());\n-\t  return;\n+\t  return UNKNOWN_NODEID;\n \t}\n \n       NodeId crate_scope_id = resolver->peek_crate_module_scope ();\n@@ -87,7 +87,7 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n \t    {\n \t      rust_error_at (segment.get_locus (),\n \t\t\t     \"cannot use %<super%> at the crate scope\");\n-\t      return;\n+\t      return UNKNOWN_NODEID;\n \t    }\n \n \t  module_scope_id = resolver->peek_parent_module_scope ();\n@@ -191,7 +191,7 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n \t\t  rust_error_at (segment.get_locus (),\n \t\t\t\t \"Cannot find path %<%s%> in this scope\",\n \t\t\t\t segment.as_string ().c_str ());\n-\t\t  return;\n+\t\t  return UNKNOWN_NODEID;\n \t\t}\n \t    }\n \t}\n@@ -211,7 +211,7 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n \t  rust_error_at (segment.get_locus (),\n \t\t\t \"Cannot find path %<%s%> in this scope\",\n \t\t\t segment.as_string ().c_str ());\n-\t  return;\n+\t  return UNKNOWN_NODEID;\n \t}\n     }\n \n@@ -236,9 +236,10 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n \t  gcc_unreachable ();\n \t}\n     }\n+  return resolved_node_id;\n }\n \n-void\n+NodeId\n ResolvePath::resolve_path (AST::QualifiedPathInExpression *expr)\n {\n   AST::QualifiedPathType &root_segment = expr->get_qualified_path_type ();\n@@ -254,9 +255,13 @@ ResolvePath::resolve_path (AST::QualifiedPathInExpression *expr)\n       if (segment.has_generic_args ())\n \tResolveGenericArgs::go (segment.get_generic_args ());\n     }\n+\n+  // cannot fully resolve a qualified path as it is dependant on associated\n+  // items\n+  return UNKNOWN_NODEID;\n }\n \n-void\n+NodeId\n ResolvePath::resolve_path (AST::SimplePath *expr)\n {\n   NodeId crate_scope_id = resolver->peek_crate_module_scope ();\n@@ -283,7 +288,7 @@ ResolvePath::resolve_path (AST::SimplePath *expr)\n \t    {\n \t      rust_error_at (segment.get_locus (),\n \t\t\t     \"cannot use %<super%> at the crate scope\");\n-\t      return;\n+\t      return UNKNOWN_NODEID;\n \t    }\n \n \t  module_scope_id = resolver->peek_parent_module_scope ();\n@@ -317,7 +322,7 @@ ResolvePath::resolve_path (AST::SimplePath *expr)\n \t      rust_error_at (segment.get_locus (),\n \t\t\t     \"Cannot find path %<%s%> in this scope\",\n \t\t\t     segment.as_string ().c_str ());\n-\t      return;\n+\t      return UNKNOWN_NODEID;\n \t    }\n \t}\n \n@@ -348,7 +353,7 @@ ResolvePath::resolve_path (AST::SimplePath *expr)\n \t  rust_error_at (segment.get_locus (),\n \t\t\t \"cannot find simple path segment %<%s%> in this scope\",\n \t\t\t segment.as_string ().c_str ());\n-\t  return;\n+\t  return UNKNOWN_NODEID;\n \t}\n \n       if (mappings->node_is_module (resolved_node_id))\n@@ -378,6 +383,7 @@ ResolvePath::resolve_path (AST::SimplePath *expr)\n \t  gcc_unreachable ();\n \t}\n     }\n+  return resolved_node_id;\n }\n \n } // namespace Resolver"}, {"sha": "c6d2e1a33049affd112d5e6d6cc65afc66d58c89", "filename": "gcc/rust/resolve/rust-ast-resolve-path.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b83a23f508d3694aa08cda793bab118a9be768/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b83a23f508d3694aa08cda793bab118a9be768/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h?ref=70b83a23f508d3694aa08cda793bab118a9be768", "patch": "@@ -29,16 +29,16 @@ class ResolvePath : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::PathInExpression *expr);\n-  static void go (AST::QualifiedPathInExpression *expr);\n-  static void go (AST::SimplePath *expr);\n+  static NodeId go (AST::PathInExpression *expr);\n+  static NodeId go (AST::QualifiedPathInExpression *expr);\n+  static NodeId go (AST::SimplePath *expr);\n \n private:\n   ResolvePath ();\n \n-  void resolve_path (AST::PathInExpression *expr);\n-  void resolve_path (AST::QualifiedPathInExpression *expr);\n-  void resolve_path (AST::SimplePath *expr);\n+  NodeId resolve_path (AST::PathInExpression *expr);\n+  NodeId resolve_path (AST::QualifiedPathInExpression *expr);\n+  NodeId resolve_path (AST::SimplePath *expr);\n \n   void\n   resolve_simple_path_segments (CanonicalPath prefix, size_t offs,"}]}