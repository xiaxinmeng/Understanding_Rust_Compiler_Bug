{"sha": "77785f4f7a3a06369be1847032cf14ba77699daa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3ODVmNGY3YTNhMDYzNjliZTE4NDcwMzJjZjE0YmE3NzY5OWRhYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-10-15T16:04:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-10-15T16:04:29Z"}, "message": "re PR lto/41668 (ICE in  get_alias_set, at alias.c:698)\n\n2009-10-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/41668\n\t* gimple.c (compare_type_names_p): Handle anonymous names\n\tdifferently based on new mode argument.\n\t(gimple_types_compatible_p): For structs also compare the tags.\n\t(iterative_hash_type_name): Rename to ...\n\t(iterative_hash_name): ... this.  Hash all names.\n\t(iterative_hash_gimple_type): Fix hashing the struct tag of\n\tpointer targets.  Hash field decl names.\n\nFrom-SVN: r152851", "tree": {"sha": "24a1e9bf43484053e7e4f1ab4c37fea20babe765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24a1e9bf43484053e7e4f1ab4c37fea20babe765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77785f4f7a3a06369be1847032cf14ba77699daa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77785f4f7a3a06369be1847032cf14ba77699daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77785f4f7a3a06369be1847032cf14ba77699daa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77785f4f7a3a06369be1847032cf14ba77699daa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c8160e78b39d879b01a838ab5bddc49f046816d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8160e78b39d879b01a838ab5bddc49f046816d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c8160e78b39d879b01a838ab5bddc49f046816d"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "2d6dd35637b10e9e21efcd902934fde39ef1c939", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77785f4f7a3a06369be1847032cf14ba77699daa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77785f4f7a3a06369be1847032cf14ba77699daa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77785f4f7a3a06369be1847032cf14ba77699daa", "patch": "@@ -1,3 +1,14 @@\n+2009-10-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/41668\n+\t* gimple.c (compare_type_names_p): Handle anonymous names\n+\tdifferently based on new mode argument.\n+\t(gimple_types_compatible_p): For structs also compare the tags.\n+\t(iterative_hash_type_name): Rename to ...\n+\t(iterative_hash_name): ... this.  Hash all names.\n+\t(iterative_hash_gimple_type): Fix hashing the struct tag of\n+\tpointer targets.  Hash field decl names.\n+\n 2009-10-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/41669"}, {"sha": "e953066dafbb2e9e9d5aff8d45412743e2b97d4a", "filename": "gcc/gimple.c", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77785f4f7a3a06369be1847032cf14ba77699daa/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77785f4f7a3a06369be1847032cf14ba77699daa/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=77785f4f7a3a06369be1847032cf14ba77699daa", "patch": "@@ -3119,33 +3119,38 @@ gimple_force_type_merge (tree t1, tree t2)\n }\n \n \n-/* Return true if both types have the same name.  */\n+/* Return true if T1 and T2 have the same name.  If FOR_COMPLETION_P is\n+   true then if any type has no name return false, otherwise return\n+   true if both types have no names.  */\n \n static bool\n-compare_type_names_p (tree t1, tree t2)\n+compare_type_names_p (tree t1, tree t2, bool for_completion_p)\n {\n   tree name1 = TYPE_NAME (t1);\n   tree name2 = TYPE_NAME (t2);\n \n-  /* Consider anonymous types all unique.  */\n-  if (!name1 || !name2)\n+  /* Consider anonymous types all unique for completion.  */\n+  if (for_completion_p\n+      && (!name1 || !name2))\n     return false;\n \n-  if (TREE_CODE (name1) == TYPE_DECL)\n+  if (name1 && TREE_CODE (name1) == TYPE_DECL)\n     {\n       name1 = DECL_NAME (name1);\n-      if (!name1)\n+      if (for_completion_p\n+\t  && !name1)\n \treturn false;\n     }\n-  gcc_assert (TREE_CODE (name1) == IDENTIFIER_NODE);\n+  gcc_assert (!name1 || TREE_CODE (name1) == IDENTIFIER_NODE);\n \n-  if (TREE_CODE (name2) == TYPE_DECL)\n+  if (name2 && TREE_CODE (name2) == TYPE_DECL)\n     {\n       name2 = DECL_NAME (name2);\n-      if (!name2)\n+      if (for_completion_p\n+\t  && !name2)\n \treturn false;\n     }\n-  gcc_assert (TREE_CODE (name2) == IDENTIFIER_NODE);\n+  gcc_assert (!name2 || TREE_CODE (name2) == IDENTIFIER_NODE);\n \n   /* Identifiers can be compared with pointer equality rather\n      than a string comparison.  */\n@@ -3410,7 +3415,7 @@ gimple_types_compatible_p (tree t1, tree t2)\n \t  if (TREE_CODE (TREE_TYPE (t1)) == TREE_CODE (TREE_TYPE (t2))\n \t      && (!COMPLETE_TYPE_P (TREE_TYPE (t1))\n \t\t  || !COMPLETE_TYPE_P (TREE_TYPE (t2)))\n-\t      && compare_type_names_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n+\t      && compare_type_names_p (TREE_TYPE (t1), TREE_TYPE (t2), true))\n \t    {\n \t      /* If t2 is complete we want to choose it instead of t1.  */\n \t      if (COMPLETE_TYPE_P (TREE_TYPE (t2)))\n@@ -3463,10 +3468,14 @@ gimple_types_compatible_p (tree t1, tree t2)\n     case UNION_TYPE:\n     case QUAL_UNION_TYPE:\n \t{\n-\t  /* For aggregate types, all the fields must be the same.  */\n \t  tree f1, f2;\n \n-\t  /* Compare every field.  */\n+\t  /* The struct tags shall compare equal.  */\n+\t  if (!compare_type_names_p (TYPE_MAIN_VARIANT (t1),\n+\t\t\t\t     TYPE_MAIN_VARIANT (t2), false))\n+\t    goto different_types;\n+\n+\t  /* For aggregate types, all the fields must be the same.  */\n \t  for (f1 = TYPE_FIELDS (t1), f2 = TYPE_FIELDS (t2);\n \t       f1 && f2;\n \t       f1 = TREE_CHAIN (f1), f2 = TREE_CHAIN (f2))\n@@ -3582,12 +3591,11 @@ visit (tree t, struct sccs *state, hashval_t v,\n   return v;\n }\n \n-/* Hash the name of TYPE with the previous hash value V and return it.  */\n+/* Hash NAME with the previous hash value V and return it.  */\n \n static hashval_t\n-iterative_hash_type_name (tree type, hashval_t v)\n+iterative_hash_name (tree name, hashval_t v)\n {\n-  tree name = TYPE_NAME (TYPE_MAIN_VARIANT (type));\n   if (!name)\n     return v;\n   if (TREE_CODE (name) == TYPE_DECL)\n@@ -3662,7 +3670,8 @@ iterative_hash_gimple_type (tree type, hashval_t val,\n       if (AGGREGATE_TYPE_P (TREE_TYPE (type)))\n \t{\n \t  v = iterative_hash_hashval_t (TREE_CODE (TREE_TYPE (type)), v);\n-\t  v = iterative_hash_type_name (type, v);\n+\t  v = iterative_hash_name\n+\t      (TYPE_NAME (TYPE_MAIN_VARIANT (TREE_TYPE (type))), v);\n \t}\n       else\n \tv = visit (TREE_TYPE (type), state, v,\n@@ -3707,10 +3716,11 @@ iterative_hash_gimple_type (tree type, hashval_t val,\n       unsigned nf;\n       tree f;\n \n-      v = iterative_hash_type_name (type, v);\n+      v = iterative_hash_name (TYPE_NAME (TYPE_MAIN_VARIANT (type)), v);\n \n       for (f = TYPE_FIELDS (type), nf = 0; f; f = TREE_CHAIN (f))\n \t{\n+\t  v = iterative_hash_name (DECL_NAME (f), v);\n \t  v = visit (TREE_TYPE (f), state, v,\n \t\t     sccstack, sccstate, sccstate_obstack);\n \t  nf++;"}]}