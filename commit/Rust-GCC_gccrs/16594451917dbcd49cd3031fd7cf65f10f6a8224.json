{"sha": "16594451917dbcd49cd3031fd7cf65f10f6a8224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY1OTQ0NTE5MTdkYmNkNDljZDMwMzFmZDdjZjY1ZjEwZjZhODIyNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-17T21:15:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-17T21:15:15Z"}, "message": "pa.h (IS_RELOADING_PSEUDO_P): New subroutine for EXTRA_CONSTRAINT.\n\n\t* pa.h (IS_RELOADING_PSEUDO_P): New subroutine for EXTRA_CONSTRAINT.\n\t(EXTRA_CONSTRAINT): Use IS_RELOADING_PSEUDO_P.  Accept any MEM for\n\t`Q' constraint during hte reload pass.\n\nFrom-SVN: r3769", "tree": {"sha": "537dfd77649b87f8fd1bcd27ef54364c1913faa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/537dfd77649b87f8fd1bcd27ef54364c1913faa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16594451917dbcd49cd3031fd7cf65f10f6a8224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16594451917dbcd49cd3031fd7cf65f10f6a8224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16594451917dbcd49cd3031fd7cf65f10f6a8224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16594451917dbcd49cd3031fd7cf65f10f6a8224/comments", "author": null, "committer": null, "parents": [{"sha": "04e1baeec4b5a9efb012e1d4a54c272d2efc6e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e1baeec4b5a9efb012e1d4a54c272d2efc6e35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e1baeec4b5a9efb012e1d4a54c272d2efc6e35"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "143270da318d5ae7bdb608da9e660b0184128cdb", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16594451917dbcd49cd3031fd7cf65f10f6a8224/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16594451917dbcd49cd3031fd7cf65f10f6a8224/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=16594451917dbcd49cd3031fd7cf65f10f6a8224", "patch": "@@ -1039,18 +1039,16 @@ extern union tree_node *current_function_decl;\n   (GET_MODE_CLASS (GET_MODE (X)) != MODE_FLOAT\t\\\n    || (X) == CONST0_RTX (GET_MODE (X)))\n \n-/* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n-   and check its validity for a certain class.\n-   We have two alternate definitions for each of them.\n-   The usual definition accepts all pseudo regs; the other rejects\n-   them unless they have been allocated suitable hard regs.\n-   The symbol REG_OK_STRICT causes the latter definition to be used.\n+/* Subroutine for EXTRA_CONSTRAINT.  \n \n-   Most source files want to accept pseudo regs in the hope that\n-   they will get allocated to the class that the insn wants them to be in.\n-   Source files for reload pass need to be strict.\n-   After reload, it makes no difference, since pseudo regs have\n-   been eliminated by then.  */\n+   Return 1 iff OP is a pseudo which did not get a hard register and\n+   we are running the reload pass.  */\n+\n+#define IS_RELOADING_PSEUDO_P(OP) \\\n+  ((reload_in_progress\t\t\t\t\t\\\n+    && GET_CODE (OP) == REG\t\t\t\t\\\n+    && REGNO (OP) >= FIRST_PSEUDO_REGISTER\t\t\\\n+    && reg_renumber [REGNO (OP)] < 0))\n \n /* Optional extra constraints for this machine. Borrowed from sparc.h.\n \n@@ -1060,34 +1058,48 @@ extern union tree_node *current_function_decl;\n    these things in insns and then not re-recognize the insns, causing\n    constrain_operands to fail.\n \n+   Also note `Q' accepts any memory operand during the reload pass.\n+   This includes out-of-range displacements in reg+d addressing. \n+   This makes for better code.  (??? For 2.5 address this issue).\n+\n    `R' is unused.\n \n    `S' handles constraints for calls.\n \n    `T' is for fp load and store addresses.*/\n-\n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\\\n   ((C) == 'Q' ?\t\t\t\t\t\t\\\n-   ((GET_CODE (OP) == MEM\t\t\t\t\\\n-     && memory_address_p (GET_MODE (OP), XEXP (OP, 0))\t\\\n-     && ! symbolic_memory_operand (OP, VOIDmode))\t\\\n-    || (GET_CODE (OP) == REG\t\t\t\t\\\n-\t&& REGNO (OP) >= FIRST_PSEUDO_REGISTER\t\t\\\n-\t&& reg_renumber[REGNO (OP)] < 0))\t\t\\\n-   : ((C) == 'S' ? \t\t\t\t\t\\\n+   (IS_RELOADING_PSEUDO_P (OP)\t\t\t\t\\\n+    || (GET_CODE (OP) == MEM \t\t\t\t\\\n+\t&& reload_in_progress)\t\t\t\t\\\n+    || (GET_CODE (OP) == MEM\t\t\t\t\\\n+\t&& memory_address_p (GET_MODE (OP), XEXP (OP, 0))\\\n+\t&& ! symbolic_memory_operand (OP, VOIDmode)))\t\\\n+   : ((C) == 'T' ? \t\t\t\t\t\\\n+      (IS_RELOADING_PSEUDO_P (OP)\t\t\t\\\n+       || (GET_CODE (OP) == MEM\t\t\t\t\\\n+\t   && short_memory_operand (OP, VOIDmode)))\t\\\n+   : ((C) == 'S' ?\t\t\t\t\t\\\n       ((CONSTANT_P (OP) && ! TARGET_LONG_CALLS)\t\t\\\n         || (reload_in_progress \t\t\t\t\\\n \t    ? strict_memory_address_p (Pmode, OP)\t\\\n \t    : memory_address_p (Pmode, OP))\t\t\\\n-       || (reload_in_progress\t\t\t\t\\\n-\t   && GET_CODE (OP) == REG\t\t\t\\\n-\t   && reg_renumber[REGNO (OP)] > 0))\t\t\\\n-   : ((C) == 'T' ? \t\t\t\t\t\\\n-      ((GET_CODE (OP) == MEM\t\t\t\t\\\n-\t&& short_memory_operand (OP, VOIDmode))\t\t\\\n-       || (GET_CODE (OP) == REG\t\t\t\t\\\n-\t   && REGNO (OP) >= FIRST_PSEUDO_REGISTER\t\\\n-\t   && reg_renumber[REGNO (OP)] < 0)) : 0)))\n+\t|| (reload_in_progress\t\t\t\t\\\n+\t    && GET_CODE (OP) == REG\t\t\t\\\n+\t    && reg_renumber[REGNO (OP)] > 0)) : 0)))\n+\n+/* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n+   and check its validity for a certain class.\n+   We have two alternate definitions for each of them.\n+   The usual definition accepts all pseudo regs; the other rejects\n+   them unless they have been allocated suitable hard regs.\n+   The symbol REG_OK_STRICT causes the latter definition to be used.\n+\n+   Most source files want to accept pseudo regs in the hope that\n+   they will get allocated to the class that the insn wants them to be in.\n+   Source files for reload pass need to be strict.\n+   After reload, it makes no difference, since pseudo regs have\n+   been eliminated by then.  */\n \n #ifndef REG_OK_STRICT\n "}]}