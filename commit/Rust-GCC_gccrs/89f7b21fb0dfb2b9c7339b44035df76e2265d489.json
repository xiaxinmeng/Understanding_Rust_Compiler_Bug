{"sha": "89f7b21fb0dfb2b9c7339b44035df76e2265d489", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlmN2IyMWZiMGRmYjJiOWM3MzM5YjQ0MDM1ZGY3NmUyMjY1ZDQ4OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-05T08:01:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-05T08:01:48Z"}, "message": "target-insns.def (doloop_begin, doloop_end): New targetm instruction patterns.\n\ngcc/\n\t* target-insns.def (doloop_begin, doloop_end): New targetm\n\tinstruction patterns.\n\t* loop-init.c: Include target.h.\n\t(pass_loop2::gate): Use the new targetm patterns instead of\n\tHAVE_*/gen_* interface.\n\t(pass_rtl_doloop::gate): Likewise.\n\t(pass_rtl_doloop::execute): Remove preprocessor condition.\n\t* hw-doloop.c: Build unconditionally.\n\t* loop-doloop.c: Likewise.\n\t(doloop_optimize): Use the new targetm patterns instead of\n\tHAVE_*/gen_* interface.\n\t(doloop_modify): Likewise. Change type of doloop_seq to rtx_insn *.\n\t* modulo-sched.c (doloop_register_get): Likewise.\n\nFrom-SVN: r225431", "tree": {"sha": "f95b1bc19179206a2e7d46a7587619466659f205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f95b1bc19179206a2e7d46a7587619466659f205"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89f7b21fb0dfb2b9c7339b44035df76e2265d489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f7b21fb0dfb2b9c7339b44035df76e2265d489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f7b21fb0dfb2b9c7339b44035df76e2265d489", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f7b21fb0dfb2b9c7339b44035df76e2265d489/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74"}], "stats": {"total": 98, "additions": 40, "deletions": 58}, "files": [{"sha": "3aa6ee1fddb874c8be29134906b7be2f995a7fca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89f7b21fb0dfb2b9c7339b44035df76e2265d489", "patch": "@@ -1,3 +1,19 @@\n+2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (doloop_begin, doloop_end): New targetm\n+\tinstruction patterns.\n+\t* loop-init.c: Include target.h.\n+\t(pass_loop2::gate): Use the new targetm patterns instead of\n+\tHAVE_*/gen_* interface.\n+\t(pass_rtl_doloop::gate): Likewise.\n+\t(pass_rtl_doloop::execute): Remove preprocessor condition.\n+\t* hw-doloop.c: Build unconditionally.\n+\t* loop-doloop.c: Likewise.\n+\t(doloop_optimize): Use the new targetm patterns instead of\n+\tHAVE_*/gen_* interface.\n+\t(doloop_modify): Likewise. Change type of doloop_seq to rtx_insn *.\n+\t* modulo-sched.c (doloop_register_get): Likewise.\n+\n 2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target-insns.def (clear_cache): New targetm instruction pattern."}, {"sha": "2341bc6576d0a072d2cf299d2381a6f0827442be", "filename": "gcc/hw-doloop.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2Fhw-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2Fhw-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhw-doloop.c?ref=89f7b21fb0dfb2b9c7339b44035df76e2265d489", "patch": "@@ -52,8 +52,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hw-doloop.h\"\n #include \"dumpfile.h\"\n \n-#ifdef HAVE_doloop_end\n-\n /* Dump information collected in LOOPS.  */\n static void\n dump_hwloops (hwloop_info loops)\n@@ -685,4 +683,3 @@ reorg_loops (bool do_reorder, struct hw_doloop_hooks *hooks)\n   if (dump_file)\n     print_rtl (dump_file, get_insns ());\n }\n-#endif"}, {"sha": "7da5ab322c78397e2e64050c4a0b3371a03b0220", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 13, "deletions": 38, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=89f7b21fb0dfb2b9c7339b44035df76e2265d489", "patch": "@@ -80,8 +80,6 @@ along with GCC; see the file COPYING3.  If not see\n    register cannot be used for anything else but doloop -- ??? detect these\n    cases).  */\n \n-#ifdef HAVE_doloop_end\n-\n /* Return the loop termination condition for PATTERN or zero\n    if it is not a decrement and branch jump insn.  */\n \n@@ -414,7 +412,7 @@ add_test (rtx cond, edge *e, basic_block dest)\n \n static void\n doloop_modify (struct loop *loop, struct niter_desc *desc,\n-\t       rtx doloop_seq, rtx condition, rtx count)\n+\t       rtx_insn *doloop_seq, rtx condition, rtx count)\n {\n   rtx counter_reg;\n   rtx tmp, noloop = NULL_RTX;\n@@ -562,21 +560,9 @@ doloop_modify (struct loop *loop, struct niter_desc *desc,\n \n   /* Some targets (eg, C4x) need to initialize special looping\n      registers.  */\n-#ifdef HAVE_doloop_begin\n-  {\n-    rtx init;\n-\n-    init = gen_doloop_begin (counter_reg, doloop_seq);\n-    if (init)\n-      {\n-\tstart_sequence ();\n-\temit_insn (init);\n-\tsequence = get_insns ();\n-\tend_sequence ();\n-\temit_insn_after (sequence, BB_END (loop_preheader_edge (loop)->src));\n-      }\n-  }\n-#endif\n+  if (targetm.have_doloop_begin ())\n+    if (rtx_insn *seq = targetm.gen_doloop_begin (counter_reg, doloop_seq))\n+      emit_insn_after (seq, BB_END (loop_preheader_edge (loop)->src));\n \n   /* Insert the new low-overhead looping insn.  */\n   emit_jump_insn_after (doloop_seq, BB_END (loop_end));\n@@ -612,7 +598,7 @@ static bool\n doloop_optimize (struct loop *loop)\n {\n   machine_mode mode;\n-  rtx doloop_seq, doloop_pat, doloop_reg;\n+  rtx doloop_reg;\n   rtx count;\n   widest_int iterations, iterations_max;\n   rtx_code_label *start_label;\n@@ -695,7 +681,7 @@ doloop_optimize (struct loop *loop)\n   count = copy_rtx (desc->niter_expr);\n   start_label = block_label (desc->in_edge->dest);\n   doloop_reg = gen_reg_rtx (mode);\n-  doloop_seq = gen_doloop_end (doloop_reg, start_label);\n+  rtx_insn *doloop_seq = targetm.gen_doloop_end (doloop_reg, start_label);\n \n   word_mode_size = GET_MODE_PRECISION (word_mode);\n   word_mode_max\n@@ -713,7 +699,7 @@ doloop_optimize (struct loop *loop)\n       else\n \tcount = lowpart_subreg (word_mode, count, mode);\n       PUT_MODE (doloop_reg, word_mode);\n-      doloop_seq = gen_doloop_end (doloop_reg, start_label);\n+      doloop_seq = targetm.gen_doloop_end (doloop_reg, start_label);\n     }\n   if (! doloop_seq)\n     {\n@@ -724,21 +710,12 @@ doloop_optimize (struct loop *loop)\n     }\n \n   /* If multiple instructions were created, the last must be the\n-     jump instruction.  Also, a raw define_insn may yield a plain\n-     pattern.  */\n-  doloop_pat = doloop_seq;\n-  if (INSN_P (doloop_pat))\n-    {\n-      rtx_insn *doloop_insn = as_a <rtx_insn *> (doloop_pat);\n-      while (NEXT_INSN (doloop_insn) != NULL_RTX)\n-\tdoloop_insn = NEXT_INSN (doloop_insn);\n-      if (!JUMP_P (doloop_insn))\n-\tdoloop_insn = NULL;\n-      doloop_pat = doloop_insn;\n-    }\n-\n-  if (! doloop_pat\n-      || ! (condition = doloop_condition_get (doloop_pat)))\n+     jump instruction.  */\n+  rtx_insn *doloop_insn = doloop_seq;\n+  while (NEXT_INSN (doloop_insn) != NULL_RTX)\n+    doloop_insn = NEXT_INSN (doloop_insn);\n+  if (!JUMP_P (doloop_insn)\n+      || !(condition = doloop_condition_get (doloop_insn)))\n     {\n       if (dump_file)\n \tfprintf (dump_file, \"Doloop: Unrecognizable doloop pattern!\\n\");\n@@ -767,5 +744,3 @@ doloop_optimize_loops (void)\n   verify_loop_structure ();\n #endif\n }\n-#endif /* HAVE_doloop_end */\n-"}, {"sha": "85957770b3b6a2fafa98ca8b463d644a3be4215f", "filename": "gcc/loop-init.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=89f7b21fb0dfb2b9c7339b44035df76e2265d489", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-loop-niter.h\"\n #include \"loop-unroll.h\"\n #include \"tree-scalar-evolution.h\"\n+#include \"target.h\"\n \n \f\n /* Apply FLAGS to the loop state.  */\n@@ -377,10 +378,8 @@ pass_loop2::gate (function *fun)\n       && (flag_move_loop_invariants\n \t  || flag_unswitch_loops\n \t  || flag_unroll_loops\n-#ifdef HAVE_doloop_end\n-\t  || (flag_branch_on_count_reg && HAVE_doloop_end)\n-#endif\n-      ))\n+\t  || (flag_branch_on_count_reg\n+\t      && targetm.have_doloop_end ())))\n     return true;\n   else\n     {\n@@ -644,20 +643,14 @@ class pass_rtl_doloop : public rtl_opt_pass\n bool\n pass_rtl_doloop::gate (function *)\n {\n-#ifdef HAVE_doloop_end\n-  return (flag_branch_on_count_reg && HAVE_doloop_end);\n-#else\n-  return false;\n-#endif\n+  return (flag_branch_on_count_reg && targetm.have_doloop_end ());\n }\n \n unsigned int\n-pass_rtl_doloop::execute (function *fun ATTRIBUTE_UNUSED)\n+pass_rtl_doloop::execute (function *fun)\n {\n-#ifdef HAVE_doloop_end\n   if (number_of_loops (fun) > 1)\n     doloop_optimize_loops ();\n-#endif\n   return 0;\n }\n "}, {"sha": "193fb07aefd825f33322185db9f098ffbba77610", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=89f7b21fb0dfb2b9c7339b44035df76e2265d489", "patch": "@@ -362,15 +362,17 @@ ps_num_consecutive_stages (partial_schedule_ptr ps, int id)\n    more than one occurrence in the loop besides the control part or the\n    do-loop pattern is not of the form we expect.  */\n static rtx\n-doloop_register_get (rtx_insn *head ATTRIBUTE_UNUSED, rtx_insn *tail ATTRIBUTE_UNUSED)\n+doloop_register_get (rtx_insn *head, rtx_insn *tail)\n {\n-#ifdef HAVE_doloop_end\n   rtx reg, condition;\n   rtx_insn *insn, *first_insn_not_to_check;\n \n   if (!JUMP_P (tail))\n     return NULL_RTX;\n \n+  if (!targetm.code_for_doloop_end)\n+    return NULL_RTX;\n+\n   /* TODO: Free SMS's dependence on doloop_condition_get.  */\n   condition = doloop_condition_get (tail);\n   if (! condition)\n@@ -406,9 +408,6 @@ doloop_register_get (rtx_insn *head ATTRIBUTE_UNUSED, rtx_insn *tail ATTRIBUTE_U\n       }\n \n   return reg;\n-#else\n-  return NULL_RTX;\n-#endif\n }\n \n /* Check if COUNT_REG is set to a constant in the PRE_HEADER block, so"}, {"sha": "b5b249211e7addab1180f0a19956345899356060", "filename": "gcc/target-insns.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f7b21fb0dfb2b9c7339b44035df76e2265d489/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=89f7b21fb0dfb2b9c7339b44035df76e2265d489", "patch": "@@ -38,6 +38,8 @@ DEF_TARGET_INSN (canonicalize_funcptr_for_compare, (rtx x0, rtx x1))\n DEF_TARGET_INSN (casesi, (rtx x0, rtx x1, rtx x2, rtx x3, rtx x4))\n DEF_TARGET_INSN (check_stack, (rtx x0))\n DEF_TARGET_INSN (clear_cache, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (doloop_begin, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (doloop_end, (rtx x0, rtx x1))\n DEF_TARGET_INSN (epilogue, (void))\n DEF_TARGET_INSN (exception_receiver, (void))\n DEF_TARGET_INSN (jump, (rtx x0))"}]}