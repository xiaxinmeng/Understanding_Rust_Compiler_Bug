{"sha": "27f67461842af37e9b63426b6d6ab38a016a0f70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmNjc0NjE4NDJhZjM3ZTliNjM0MjZiNmQ2YWIzOGEwMTZhMGY3MA==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2016-06-29T16:04:42Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2016-06-29T16:04:42Z"}, "message": "openmp.c (match_oacc_clause_gang): Rename to ...\n\n\tgcc/fortran/\n\t* openmp.c (match_oacc_clause_gang): Rename to ...\n\t(match_oacc_clause_gwv): this.  Add support for OpenACC worker and\n\tvector clauses.\n\t(gfc_match_omp_clauses): Use match_oacc_clause_gwv for\n\tOMP_CLAUSE_{GANG,WORKER,VECTOR}.  Propagate any MATCH_ERRORs for\n\tinvalid OMP_CLAUSE_{ASYNC,WAIT,GANG,WORKER,VECTOR} clauses.\n\t(gfc_match_oacc_wait): Propagate MATCH_ERROR for invalid\n\toacc_expr_lists.  Adjust the first and needs_space arguments to\n\tgfc_match_omp_clauses.\n\n\tgcc/testsuite/\n\t* gfortran.dg/goacc/asyncwait-2.f95: Updated expected diagnostics.\n\t* gfortran.dg/goacc/asyncwait-3.f95: Likewise.\n\t* gfortran.dg/goacc/asyncwait-4.f95: Add test coverage.\n\nFrom-SVN: r237854", "tree": {"sha": "e4b488ef67897d595ede65fd2202cb2318412b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4b488ef67897d595ede65fd2202cb2318412b04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27f67461842af37e9b63426b6d6ab38a016a0f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f67461842af37e9b63426b6d6ab38a016a0f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f67461842af37e9b63426b6d6ab38a016a0f70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f67461842af37e9b63426b6d6ab38a016a0f70/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1206d294ac3bbc2353a6f94e492423e44054059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1206d294ac3bbc2353a6f94e492423e44054059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1206d294ac3bbc2353a6f94e492423e44054059"}], "stats": {"total": 208, "additions": 146, "deletions": 62}, "files": [{"sha": "8c91f183a324cb78e3b007c436be4d0ed4a1dd84", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=27f67461842af37e9b63426b6d6ab38a016a0f70", "patch": "@@ -1,3 +1,15 @@\n+2016-06-29  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* openmp.c (match_oacc_clause_gang): Rename to ...\n+\t(match_oacc_clause_gwv): this.  Add support for OpenACC worker and\n+\tvector clauses.\n+\t(gfc_match_omp_clauses): Use match_oacc_clause_gwv for\n+\tOMP_CLAUSE_{GANG,WORKER,VECTOR}.  Propagate any MATCH_ERRORs for\n+\tinvalid OMP_CLAUSE_{ASYNC,WAIT,GANG,WORKER,VECTOR} clauses.\n+\t(gfc_match_oacc_wait): Propagate MATCH_ERROR for invalid\n+\toacc_expr_lists.  Adjust the first and needs_space arguments to\n+\tgfc_match_omp_clauses.\n+\n 2016-06-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/71002"}, {"sha": "865e0d9d5f063a2f0e5dff9d2b19ac0e46810607", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 95, "deletions": 45, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=27f67461842af37e9b63426b6d6ab38a016a0f70", "patch": "@@ -396,43 +396,67 @@ match_oacc_expr_list (const char *str, gfc_expr_list **list,\n }\n \n static match\n-match_oacc_clause_gang (gfc_omp_clauses *cp)\n+match_oacc_clause_gwv (gfc_omp_clauses *cp, unsigned gwv)\n {\n   match ret = MATCH_YES;\n \n   if (gfc_match (\" ( \") != MATCH_YES)\n     return MATCH_NO;\n \n-  /* The gang clause accepts two optional arguments, num and static.\n-     The num argument may either be explicit (num: <val>) or\n-     implicit without (<val> without num:).  */\n-\n-  while (ret == MATCH_YES)\n+  if (gwv == GOMP_DIM_GANG)\n     {\n-      if (gfc_match (\" static :\") == MATCH_YES)\n+        /* The gang clause accepts two optional arguments, num and static.\n+\t The num argument may either be explicit (num: <val>) or\n+\t implicit without (<val> without num:).  */\n+\n+      while (ret == MATCH_YES)\n \t{\n-\t  if (cp->gang_static)\n-\t    return MATCH_ERROR;\n+\t  if (gfc_match (\" static :\") == MATCH_YES)\n+\t    {\n+\t      if (cp->gang_static)\n+\t\treturn MATCH_ERROR;\n+\t      else\n+\t\tcp->gang_static = true;\n+\t      if (gfc_match_char ('*') == MATCH_YES)\n+\t\tcp->gang_static_expr = NULL;\n+\t      else if (gfc_match (\" %e \", &cp->gang_static_expr) != MATCH_YES)\n+\t\treturn MATCH_ERROR;\n+\t    }\n \t  else\n-\t    cp->gang_static = true;\n-\t  if (gfc_match_char ('*') == MATCH_YES)\n-\t    cp->gang_static_expr = NULL;\n-\t  else if (gfc_match (\" %e \", &cp->gang_static_expr) != MATCH_YES)\n-\t    return MATCH_ERROR;\n-\t}\n-      else\n-\t{\n-\t  /* This is optional.  */\n-\t  if (cp->gang_num_expr || gfc_match (\" num :\") == MATCH_ERROR)\n-\t    return MATCH_ERROR;\n-\t  else if (gfc_match (\" %e \", &cp->gang_num_expr) != MATCH_YES)\n-\t    return MATCH_ERROR;\n+\t    {\n+\t      if (cp->gang_num_expr)\n+\t\treturn MATCH_ERROR;\n+\n+\t      /* The 'num' argument is optional.  */\n+\t      gfc_match (\" num :\");\n+\n+\t      if (gfc_match (\" %e \", &cp->gang_num_expr) != MATCH_YES)\n+\t\treturn MATCH_ERROR;\n+\t    }\n+\n+\t  ret = gfc_match (\" , \");\n \t}\n+    }\n+  else if (gwv == GOMP_DIM_WORKER)\n+    {\n+      /* The 'num' argument is optional.  */\n+      gfc_match (\" num :\");\n+\n+      if (gfc_match (\" %e \", &cp->worker_expr) != MATCH_YES)\n+\treturn MATCH_ERROR;\n+    }\n+  else if (gwv == GOMP_DIM_VECTOR)\n+    {\n+      /* The 'length' argument is optional.  */\n+      gfc_match (\" length :\");\n \n-      ret = gfc_match (\" , \");\n+      if (gfc_match (\" %e \", &cp->vector_expr) != MATCH_YES)\n+\treturn MATCH_ERROR;\n     }\n+  else\n+    gfc_fatal_error (\"Unexpected OpenACC parallelism.\");\n \n-  return gfc_match (\" ) \");\n+  return gfc_match (\" )\");\n }\n \n static match\n@@ -677,14 +701,20 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, uint64_t mask,\n \t      && gfc_match (\"async\") == MATCH_YES)\n \t    {\n \t      c->async = true;\n-\t      needs_space = false;\n-\t      if (gfc_match (\" ( %e )\", &c->async_expr) != MATCH_YES)\n+\t      match m = gfc_match (\" ( %e )\", &c->async_expr);\n+\t      if (m == MATCH_ERROR)\n+\t\t{\n+\t\t  gfc_current_locus = old_loc;\n+\t\t  break;\n+\t\t}\n+\t      else if (m == MATCH_NO)\n \t\t{\n \t\t  c->async_expr\n \t\t    = gfc_get_constant_expr (BT_INTEGER,\n \t\t\t\t\t     gfc_default_integer_kind,\n \t\t\t\t\t     &gfc_current_locus);\n \t\t  mpz_set_si (c->async_expr->value.integer, GOMP_ASYNC_NOVAL);\n+\t\t  needs_space = true;\n \t\t}\n \t      continue;\n \t    }\n@@ -877,9 +907,13 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, uint64_t mask,\n \t      && gfc_match (\"gang\") == MATCH_YES)\n \t    {\n \t      c->gang = true;\n-\t      if (match_oacc_clause_gang(c) == MATCH_YES)\n-\t\tneeds_space = false;\n-\t      else\n+\t      match m = match_oacc_clause_gwv (c, GOMP_DIM_GANG);\n+\t      if (m == MATCH_ERROR)\n+\t\t{\n+\t\t  gfc_current_locus = old_loc;\n+\t\t  break;\n+\t\t}\n+\t      else if (m == MATCH_NO)\n \t\tneeds_space = true;\n \t      continue;\n \t    }\n@@ -1309,10 +1343,13 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, uint64_t mask,\n \t      && gfc_match (\"vector\") == MATCH_YES)\n \t    {\n \t      c->vector = true;\n-\t      if (gfc_match (\" ( length : %e )\", &c->vector_expr) == MATCH_YES\n-\t\t  || gfc_match (\" ( %e )\", &c->vector_expr) == MATCH_YES)\n-\t\tneeds_space = false;\n-\t      else\n+\t      match m = match_oacc_clause_gwv (c, GOMP_DIM_VECTOR);\n+\t      if (m == MATCH_ERROR)\n+\t\t{\n+\t\t  gfc_current_locus = old_loc;\n+\t\t  break;\n+\t\t}\n+\t      if (m == MATCH_NO)\n \t\tneeds_space = true;\n \t      continue;\n \t    }\n@@ -1328,18 +1365,28 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, uint64_t mask,\n \t      && gfc_match (\"wait\") == MATCH_YES)\n \t    {\n \t      c->wait = true;\n-\t      match_oacc_expr_list (\" (\", &c->wait_list, false);\n+\t      match m = match_oacc_expr_list (\" (\", &c->wait_list, false);\n+\t      if (m == MATCH_ERROR)\n+\t\t{\n+\t\t  gfc_current_locus = old_loc;\n+\t\t  break;\n+\t\t}\n+\t      else if (m == MATCH_NO)\n+\t\tneeds_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_WORKER)\n \t      && !c->worker\n \t      && gfc_match (\"worker\") == MATCH_YES)\n \t    {\n \t      c->worker = true;\n-\t      if (gfc_match (\" ( num : %e )\", &c->worker_expr) == MATCH_YES\n-\t\t  || gfc_match (\" ( %e )\", &c->worker_expr) == MATCH_YES)\n-\t\tneeds_space = false;\n-\t      else\n+\t      match m = match_oacc_clause_gwv (c, GOMP_DIM_WORKER);\n+\t      if (m == MATCH_ERROR)\n+\t\t{\n+\t\t  gfc_current_locus = old_loc;\n+\t\t  break;\n+\t\t}\n+\t      else if (m == MATCH_NO)\n \t\tneeds_space = true;\n \t      continue;\n \t    }\n@@ -1595,15 +1642,18 @@ gfc_match_oacc_wait (void)\n {\n   gfc_omp_clauses *c = gfc_get_omp_clauses ();\n   gfc_expr_list *wait_list = NULL, *el;\n+  bool space = true;\n+  match m;\n \n-  match_oacc_expr_list (\" (\", &wait_list, true);\n-  gfc_match_omp_clauses (&c, OACC_WAIT_CLAUSES, false, false, true);\n+  m = match_oacc_expr_list (\" (\", &wait_list, true);\n+  if (m == MATCH_ERROR)\n+    return m;\n+  else if (m == MATCH_YES)\n+    space = false;\n \n-  if (gfc_match_omp_eos () != MATCH_YES)\n-    {\n-      gfc_error (\"Unexpected junk in !$ACC WAIT at %C\");\n-      return MATCH_ERROR;\n-    }\n+  if (gfc_match_omp_clauses (&c, OACC_WAIT_CLAUSES, space, space, true)\n+      == MATCH_ERROR)\n+    return MATCH_ERROR;\n \n   if (wait_list)\n     for (el = wait_list; el; el = el->next)"}, {"sha": "36610f20092cf5164e3d5f98f989837401fc3a08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27f67461842af37e9b63426b6d6ab38a016a0f70", "patch": "@@ -1,3 +1,9 @@\n+2016-06-29  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/asyncwait-2.f95: Updated expected diagnostics.\n+\t* gfortran.dg/goacc/asyncwait-3.f95: Likewise.\n+\t* gfortran.dg/goacc/asyncwait-4.f95: Add test coverage.\n+\n 2016-06-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/15256"}, {"sha": "fe4e4eeed2c65c10fd0eaf7dc4d7eb6df5bac545", "filename": "gcc/testsuite/gfortran.dg/goacc/asyncwait-2.f95", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-2.f95?ref=27f67461842af37e9b63426b6d6ab38a016a0f70", "patch": "@@ -83,6 +83,18 @@ program asyncwait\n   end do\n   !$acc end parallel ! { dg-error \"Unexpected \\\\\\!\\\\\\$ACC END PARALLEL\" }\n \n+  !$acc parallel copyin (a(1:N)) copy (b(1:N)) waitasync ! { dg-error \"Unclassifiable OpenACC directive\" }\n+  do i = 1, N\n+     b(i) = a(i)\n+  end do\n+  !$acc end parallel ! { dg-error \"Unexpected \\\\\\!\\\\\\$ACC END PARALLEL\" }\n+\n+  !$acc parallel copyin (a(1:N)) copy (b(1:N)) asyncwait ! { dg-error \"Unclassifiable OpenACC directive\" }\n+  do i = 1, N\n+     b(i) = a(i)\n+  end do\n+  !$acc end parallel ! { dg-error \"Unexpected \\\\\\!\\\\\\$ACC END PARALLEL\" }\n+\n   !$acc parallel copyin (a(1:N)) copy (b(1:N)) wait\n   do i = 1, N\n      b(i) = a(i)"}, {"sha": "ed72a9ba28a5653e7a2c592b98a77db650d57775", "filename": "gcc/testsuite/gfortran.dg/goacc/asyncwait-3.f95", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-3.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-3.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-3.f95?ref=27f67461842af37e9b63426b6d6ab38a016a0f70", "patch": "@@ -11,17 +11,17 @@ program asyncwait\n   a(:) = 3.0\n   b(:) = 0.0\n \n-  !$acc wait (1 2) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait (1 2) ! { dg-error \"Syntax error in OpenACC expression list at\" }\n \n-  !$acc wait (1,) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait (1,) ! { dg-error \"Syntax error in OpenACC expression list at\" }\n \n-  !$acc wait (,1) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait (,1) ! { dg-error \"Syntax error in OpenACC expression list at\" }\n \n-  !$acc wait (1, 2, ) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait (1, 2, ) ! { dg-error \"Syntax error in OpenACC expression list at\" }\n \n-  !$acc wait (1, 2, ,) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait (1, 2, ,) ! { dg-error \"Syntax error in OpenACC expression list at\" }\n \n-  !$acc wait (1 ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait (1 ! { dg-error \"Syntax error in OpenACC expression list at\" }\n \n   !$acc wait (1, *) ! { dg-error \"Invalid argument to \\\\\\$\\\\\\!ACC WAIT\" }\n \n@@ -33,9 +33,9 @@ program asyncwait\n \n   !$acc wait (1.0) ! { dg-error \"WAIT clause at \\\\\\(1\\\\\\) requires a scalar INTEGER expression\" }\n \n-  !$acc wait 1 ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait 1 ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n-  !$acc wait N ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait N ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n   !$acc wait (1)\n end program asyncwait"}, {"sha": "df311545c52f7137741c62152a7b2dddb38cce65", "filename": "gcc/testsuite/gfortran.dg/goacc/asyncwait-4.f95", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-4.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f67461842af37e9b63426b6d6ab38a016a0f70/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-4.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-4.f95?ref=27f67461842af37e9b63426b6d6ab38a016a0f70", "patch": "@@ -11,27 +11,31 @@ program asyncwait\n   a(:) = 3.0\n   b(:) = 0.0\n \n-  !$acc wait async (1 2) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait async (1 2) ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n-  !$acc wait async (1,) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait async (1,) ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n-  !$acc wait async (,1) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait async (,1) ! { dg-error \"Invalid character in name\" }\n \n-  !$acc wait async (1, 2, ) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait async (1, 2, ) ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n-  !$acc wait async (1, 2, ,) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait async (1, 2, ,) ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n-  !$acc wait async (1 ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait async (1 ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n-  !$acc wait async (1, *) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait async (1, *) ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n-  !$acc wait async (1, a) ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait async (1, a) ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n   !$acc wait async (a) ! { dg-error \"ASYNC clause at \\\\\\(1\\\\\\) requires a scalar INTEGER expression\" }\n \n   !$acc wait async (N)\n \n   !$acc wait async (1.0) ! { dg-error \"ASYNC clause at \\\\\\(1\\\\\\) requires a scalar INTEGER expression\" }\n \n-  !$acc wait async 1 ! { dg-error \"Unexpected junk in \\\\\\!\\\\\\$ACC WAIT at\" }\n+  !$acc wait async 1 ! { dg-error \"Unclassifiable OpenACC directive\" }\n+\n+  !$acc waitasync ! { dg-error \"Unclassifiable OpenACC directive\" }\n+\n+  !$acc wait,async ! { dg-error \"Unclassifiable OpenACC directive\" }\n end program asyncwait"}]}