{"sha": "698cdd84d5f3e7436900fce56844198820c75023", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk4Y2RkODRkNWYzZTc0MzY5MDBmY2U1Njg0NDE5ODgyMGM3NTAyMw==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-02-29T22:37:10Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-02-29T22:37:10Z"}, "message": "(i386_return_pops_args): Cleanup extra argument\n\nFrom-SVN: r11389", "tree": {"sha": "cbc8acff0958f385899eac77b8a3503d68d32537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbc8acff0958f385899eac77b8a3503d68d32537"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/698cdd84d5f3e7436900fce56844198820c75023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/698cdd84d5f3e7436900fce56844198820c75023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/698cdd84d5f3e7436900fce56844198820c75023", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/698cdd84d5f3e7436900fce56844198820c75023/comments", "author": null, "committer": null, "parents": [{"sha": "4d46c3cec6dd153af7237fa518a7d1cc109404f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d46c3cec6dd153af7237fa518a7d1cc109404f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d46c3cec6dd153af7237fa518a7d1cc109404f8"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "50a8211923d946d1413ffab1eff2455dd874a689", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/698cdd84d5f3e7436900fce56844198820c75023/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/698cdd84d5f3e7436900fce56844198820c75023/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=698cdd84d5f3e7436900fce56844198820c75023", "patch": "@@ -460,31 +460,30 @@ i386_return_pops_args (fundecl, funtype, size)\n      tree fundecl;\n      tree funtype;\n      int size;\n-{\n+{ \n   int rtd = TARGET_RTD;\n \n   if (TREE_CODE (funtype) == IDENTIFIER_NODE)\n     return 0;\n \n-  /* Cdecl functions override -mrtd, and never pop the stack */\n-  if (lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (funtype)))\n+    /* Cdecl functions override -mrtd, and never pop the stack */\n+  if (!lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (funtype))) {\n+  \n+    /* Stdcall functions will pop the stack if not variable args */\n+    if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (funtype)))\n+      rtd = 1;\n+  \n+    if (rtd\n+        && (TYPE_ARG_TYPES (funtype) == NULL_TREE\n+\t    || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (funtype))) == void_type_node)))\n+      return size;\n+  }\n+  \n+  /* Lose any fake structure return argument */\n+  if (aggregate_value_p (TREE_TYPE (funtype)))\n+    return GET_MODE_SIZE (Pmode);\n+  \n     return 0;\n-\n-  /* Stdcall functions will pop the stack if not variable args */\n-  if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (funtype)))\n-    rtd = 1;\n-\n-  if (rtd)\n-    {\n-      if (TYPE_ARG_TYPES (funtype) == NULL_TREE\n-\t  || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (funtype))) == void_type_node))\n-\treturn size;\n-\n-      if (aggregate_value_p (TREE_TYPE (funtype)))\n-\treturn GET_MODE_SIZE (Pmode);\n-    }\n-\n-  return 0;\n }\n \n \f"}]}