{"sha": "0229b692f4cba2d23b960284c79384b6f5b2309a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIyOWI2OTJmNGNiYTJkMjNiOTYwMjg0Yzc5Mzg0YjZmNWIyMzA5YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-11-16T08:31:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-16T08:31:26Z"}, "message": "re PR c++/32056 (Storage classes on template parameters)\n\ncp/\n2009-11-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/32056\n\t* decl.h (enum decl_context): Add TPARM enumerator.\n\t* decl.c (grokdeclarator): Per 14.1/2, error out if a storage class\n\tis specified in a template parameter declaration.\n\t* parser.c (cp_parser_template_parameter): Call grokdeclarator with\n\tTPARM as third argument.\n\ntestsuite/\n2009-11-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/32056\n\t* testsuite/g++.dg/template/error44.C: New.\n\nFrom-SVN: r154198", "tree": {"sha": "1e489fe775913d9cc90f3d4f84139b663da9da30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e489fe775913d9cc90f3d4f84139b663da9da30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0229b692f4cba2d23b960284c79384b6f5b2309a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0229b692f4cba2d23b960284c79384b6f5b2309a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0229b692f4cba2d23b960284c79384b6f5b2309a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0229b692f4cba2d23b960284c79384b6f5b2309a/comments", "author": null, "committer": null, "parents": [{"sha": "0fc4f703e53c1282e7ff8613b235194ae815e721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc4f703e53c1282e7ff8613b235194ae815e721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fc4f703e53c1282e7ff8613b235194ae815e721"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "2b18d012b7a9bfcae5a63270d4207951e816c2d0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0229b692f4cba2d23b960284c79384b6f5b2309a", "patch": "@@ -1,3 +1,12 @@\n+2009-11-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/32056\n+\t* decl.h (enum decl_context): Add TPARM enumerator.\n+\t* decl.c (grokdeclarator): Per 14.1/2, error out if a storage class\n+\tis specified in a template parameter declaration.\n+\t* parser.c (cp_parser_template_parameter): Call grokdeclarator with\n+\tTPARM as third argument.\n+\n 2009-11-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/27425"}, {"sha": "73bf995714ff7fa55769ef51755c6f2282622222", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0229b692f4cba2d23b960284c79384b6f5b2309a", "patch": "@@ -7574,11 +7574,13 @@ check_var_type (tree identifier, tree type)\n       try to parse.\n      PARM for a parameter declaration (either within a function prototype\n       or before a function body).  Make a PARM_DECL, or return void_type_node.\n+     TPARM for a template parameter declaration.\n      CATCHPARM for a parameter declaration before a catch clause.\n      TYPENAME if for a typename (in a cast or sizeof).\n       Don't make a DECL node; just return the ..._TYPE node.\n      FIELD for a struct or union field; make a FIELD_DECL.\n      BITFIELD for a field with specified width.\n+\n    INITIALIZED is as for start_decl.\n \n    ATTRLIST is a pointer to the list of attributes, which may be NULL\n@@ -7662,6 +7664,7 @@ grokdeclarator (const cp_declarator *declarator,\n   bool type_was_error_mark_node = false;\n   bool parameter_pack_p = declarator? declarator->parameter_pack_p : false;\n   bool template_type_arg = false;\n+  bool template_parm_flag = false;\n   bool constexpr_p = declspecs->specs[(int) ds_constexpr];\n   const char *errmsg;\n \n@@ -7680,6 +7683,8 @@ grokdeclarator (const cp_declarator *declarator,\n     bitfield = 1, decl_context = FIELD;\n   else if (decl_context == TEMPLATE_TYPE_ARG)\n     template_type_arg = true, decl_context = TYPENAME;\n+  else if (decl_context == TPARM)\n+    template_parm_flag = true, decl_context = PARM;\n \n   if (initialized > 1)\n     funcdef_flag = true;\n@@ -8179,6 +8184,11 @@ grokdeclarator (const cp_declarator *declarator,\n \t  error (\"typedef declaration invalid in parameter declaration\");\n \t  return error_mark_node;\n \t}\n+      else if (template_parm_flag && storage_class != sc_none)\n+\t{\n+\t  error (\"storage class specified for template parameter %qs\", name);\n+\t  return error_mark_node;\n+\t}\n       else if (storage_class == sc_static\n \t       || storage_class == sc_extern\n \t       || thread_p)"}, {"sha": "a8a2b784c28d8d10a15f6dc27489f650137659a0", "filename": "gcc/cp/decl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Fcp%2Fdecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Fcp%2Fdecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.h?ref=0229b692f4cba2d23b960284c79384b6f5b2309a", "patch": "@@ -23,6 +23,7 @@ enum decl_context\n { NORMAL,\t\t\t/* Ordinary declaration */\n   FUNCDEF,\t\t\t/* Function definition */\n   PARM,\t\t\t\t/* Declaration of parm before function body */\n+  TPARM,                        /* Declaration of template parm */\n   CATCHPARM,\t\t\t/* Declaration of catch parm */\n   FIELD,\t\t\t/* Declaration inside struct or union */\n   BITFIELD,\t\t\t/* Likewise but with specified width */"}, {"sha": "3a4b409e738e86e393318110691b3bc2435d84eb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0229b692f4cba2d23b960284c79384b6f5b2309a", "patch": "@@ -10508,7 +10508,7 @@ cp_parser_template_parameter (cp_parser* parser, bool *is_non_type,\n \n   parm = grokdeclarator (parameter_declarator->declarator,\n \t\t\t &parameter_declarator->decl_specifiers,\n-\t\t\t PARM, /*initialized=*/0,\n+\t\t\t TPARM, /*initialized=*/0,\n \t\t\t /*attrlist=*/NULL);\n   if (parm == error_mark_node)\n     return error_mark_node;"}, {"sha": "753a8b29d0e0f87ed780bef080ea4d2960c0b5ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0229b692f4cba2d23b960284c79384b6f5b2309a", "patch": "@@ -1,3 +1,8 @@\n+2009-11-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/32056\n+\t* testsuite/g++.dg/template/error44.C: New.\n+\n 2009-11-16  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.c-torture/execute/pr41919.c: Mark chars explicitely as signed."}, {"sha": "4f732cdd7018158efabe3f6c558c338467e554e6", "filename": "gcc/testsuite/g++.dg/template/error44.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0229b692f4cba2d23b960284c79384b6f5b2309a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror44.C?ref=0229b692f4cba2d23b960284c79384b6f5b2309a", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/32056\n+\n+template <auto int T> struct A {}; // { dg-error \"storage class specified\" }\n+template <extern int T> struct B {}; // { dg-error \"storage class specified\" }\n+template <static int T> struct C {}; // { dg-error \"storage class specified\" }\n+template <register int T> struct D {}; // { dg-error \"storage class specified\" }\n+template <mutable int T> struct E {}; // { dg-error \"storage class specified\" }"}]}