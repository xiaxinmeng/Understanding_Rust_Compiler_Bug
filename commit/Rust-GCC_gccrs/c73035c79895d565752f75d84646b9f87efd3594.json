{"sha": "c73035c79895d565752f75d84646b9f87efd3594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczMDM1Yzc5ODk1ZDU2NTc1MmY3NWQ4NDY0NmI5Zjg3ZWZkMzU5NA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-17T18:13:51Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-17T18:13:51Z"}, "message": "m32r-protos.h (m32r_print_operand): Delete.\n\n\t* config/m32r/m32r-protos.h (m32r_print_operand): Delete.\n\t(m32r_print_operand_address): Delete.\n\t* config/m32r/m32r.h (m32r_punct_chars): Delete.\n\t(PRINT_OPERAND): Delete.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n\t(PRINT_OPERAND_ADDRESS): Delete.\n\t* config/m32r/m32r.c (m32r_punct_chars): Make static.\n\t(m32r_print_operand_address): Make static.\n\t(m32r_print_operand): Make static.\n\t(m32r_print_operand_punct_valid_p): New function.\n\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS):\n\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n\nFrom-SVN: r160939", "tree": {"sha": "de9108f01980dcbfcd733c4c59732cc3b41cd31b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de9108f01980dcbfcd733c4c59732cc3b41cd31b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c73035c79895d565752f75d84646b9f87efd3594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73035c79895d565752f75d84646b9f87efd3594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73035c79895d565752f75d84646b9f87efd3594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73035c79895d565752f75d84646b9f87efd3594/comments", "author": null, "committer": null, "parents": [{"sha": "bf7c1408ffa0f6baa86fa09815b0daf287b74cb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "c4483a79a45a353f6966ee9f2b5b41a1f86b2f4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73035c79895d565752f75d84646b9f87efd3594/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73035c79895d565752f75d84646b9f87efd3594/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c73035c79895d565752f75d84646b9f87efd3594", "patch": "@@ -1,3 +1,18 @@\n+2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/m32r/m32r-protos.h (m32r_print_operand): Delete.\n+\t(m32r_print_operand_address): Delete.\n+\t* config/m32r/m32r.h (m32r_punct_chars): Delete.\n+\t(PRINT_OPERAND): Delete.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n+\t(PRINT_OPERAND_ADDRESS): Delete.\n+\t* config/m32r/m32r.c (m32r_punct_chars): Make static.\n+\t(m32r_print_operand_address): Make static.\n+\t(m32r_print_operand): Make static.\n+\t(m32r_print_operand_punct_valid_p): New function.\n+\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS):\n+\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n+\n 2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/iq2000/iq2000-protos.h (print_operand): Delete."}, {"sha": "56ad708cda54825e17e0d945fc7cad3fc9691997", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73035c79895d565752f75d84646b9f87efd3594/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73035c79895d565752f75d84646b9f87efd3594/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=c73035c79895d565752f75d84646b9f87efd3594", "patch": "@@ -43,8 +43,6 @@ extern int    zero_and_one (rtx, rtx);\n extern char * emit_cond_move (rtx *, rtx);\n extern void   m32r_output_block_move (rtx, rtx *);\n extern int    m32r_expand_block_move (rtx *);\n-extern void   m32r_print_operand (FILE *, rtx, int);\n-extern void   m32r_print_operand_address (FILE *, rtx);\n extern int    m32r_not_same_reg (rtx, rtx);\n extern int    m32r_hard_regno_rename_ok (unsigned int, unsigned int);\n extern int    m32r_legitimate_pic_operand_p (rtx);"}, {"sha": "a700ec9a581bb8c5ad549a888441c13f11fa79c3", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73035c79895d565752f75d84646b9f87efd3594/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73035c79895d565752f75d84646b9f87efd3594/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=c73035c79895d565752f75d84646b9f87efd3594", "patch": "@@ -44,7 +44,7 @@\n #include \"tm-constrs.h\"\n \n /* Array of valid operand punctuation characters.  */\n-char m32r_punct_chars[256];\n+static char m32r_punct_chars[256];\n \n /* Selected code model.  */\n enum m32r_model m32r_model = M32R_MODEL_DEFAULT;\n@@ -67,6 +67,9 @@ static void  block_move_call (rtx, rtx, rtx);\n static int   m32r_is_insn (rtx);\n static rtx   m32r_legitimize_address (rtx, rtx, enum machine_mode);\n static tree  m32r_handle_model_attribute (tree *, tree, tree, int, bool *);\n+static void  m32r_print_operand (FILE *, rtx, int);\n+static void  m32r_print_operand_address (FILE *, rtx);\n+static bool  m32r_print_operand_punct_valid_p (unsigned char code);\n static void  m32r_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void  m32r_output_function_epilogue (FILE *, HOST_WIDE_INT);\n \n@@ -111,6 +114,13 @@ static const struct attribute_spec m32r_attribute_table[] =\n #undef  TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP \"\\t.word\\t\"\n \n+#undef  TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND m32r_print_operand\n+#undef  TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS m32r_print_operand_address\n+#undef  TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P m32r_print_operand_punct_valid_p\n+\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE m32r_output_function_prologue\n #undef  TARGET_ASM_FUNCTION_EPILOGUE\n@@ -216,7 +226,7 @@ m32r_init (void)\n {\n   init_reg_tables ();\n \n-  /* Initialize array for PRINT_OPERAND_PUNCT_VALID_P.  */\n+  /* Initialize array for TARGET_PRINT_OPERAND_PUNCT_VALID_P.  */\n   memset (m32r_punct_chars, 0, sizeof (m32r_punct_chars));\n   m32r_punct_chars['#'] = 1;\n   m32r_punct_chars['@'] = 1; /* ??? no longer used */\n@@ -1933,7 +1943,7 @@ m32r_file_start (void)\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */\n \n-void\n+static void\n m32r_print_operand (FILE * file, rtx x, int code)\n {\n   rtx addr;\n@@ -2160,7 +2170,7 @@ m32r_print_operand (FILE * file, rtx x, int code)\n \n /* Print a memory address as an operand to reference that memory location.  */\n \n-void\n+static void\n m32r_print_operand_address (FILE * file, rtx addr)\n {\n   rtx base;\n@@ -2248,6 +2258,12 @@ m32r_print_operand_address (FILE * file, rtx addr)\n     }\n }\n \n+static bool\n+m32r_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return m32r_punct_chars[code];\n+}\n+\n /* Return true if the operands are the constants 0 and 1.  */\n \n int"}, {"sha": "28d06a4b23cc312c9a9c6e3f1b72f8a521f84a7d", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73035c79895d565752f75d84646b9f87efd3594/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73035c79895d565752f75d84646b9f87efd3594/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=c73035c79895d565752f75d84646b9f87efd3594", "patch": "@@ -1274,24 +1274,6 @@ L2:     .word STATIC\n   SUBTARGET_ADDITIONAL_REGISTER_NAMES\t\\\n }\n \n-/* A C expression which evaluates to true if CODE is a valid\n-   punctuation character for use in the `PRINT_OPERAND' macro.  */\n-extern char m32r_punct_chars[256];\n-#define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n-  m32r_punct_chars[(unsigned char) (CHAR)]\n-\n-/* Print operand X (an rtx) in assembler syntax to file FILE.\n-   CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n-   For `%' followed by punctuation, CODE is the punctuation and X is null.  */\n-#define PRINT_OPERAND(FILE, X, CODE) \\\n-  m32r_print_operand (FILE, X, CODE)\n-\n-/* A C compound statement to output to stdio stream STREAM the\n-   assembler syntax for an instruction operand that is a memory\n-   reference whose address is ADDR.  ADDR is an RTL expression.  */\n-#define PRINT_OPERAND_ADDRESS(FILE, ADDR) \\\n-  m32r_print_operand_address (FILE, ADDR)\n-\n /* If defined, C string expressions to be used for the `%R', `%L',\n    `%U', and `%I' options of `asm_fprintf' (see `final.c').  These\n    are useful when a single `md' file must support multiple assembler"}]}