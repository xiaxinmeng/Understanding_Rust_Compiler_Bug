{"sha": "67a3773731b8a4f7a6f4f69e67d4b7ef69296136", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdhMzc3MzczMWI4YTRmN2E2ZjRmNjllNjdkNGI3ZWY2OTI5NjEzNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-30T16:58:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-30T16:58:42Z"}, "message": "(fold_rtx, case MEM): Surround TRUNCATE for jump table entry with a CONST.\n\n(fold_rtx, case '1'): Handle operand 0 of a CONST.\n(fold_rtx, case PLUS): Handle (const (minus (label_ref) (label_ref))).\n\nFrom-SVN: r7832", "tree": {"sha": "88c52a751c27dd41d2a6c69b4ce11096be18ff91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88c52a751c27dd41d2a6c69b4ce11096be18ff91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67a3773731b8a4f7a6f4f69e67d4b7ef69296136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a3773731b8a4f7a6f4f69e67d4b7ef69296136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a3773731b8a4f7a6f4f69e67d4b7ef69296136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a3773731b8a4f7a6f4f69e67d4b7ef69296136/comments", "author": null, "committer": null, "parents": [{"sha": "96c9d70dda35cd5901c6905172c44e472d49dc21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c9d70dda35cd5901c6905172c44e472d49dc21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96c9d70dda35cd5901c6905172c44e472d49dc21"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "adc99329407ca3dcd4545b1bdac30d34c9f34a5c", "filename": "gcc/cse.c", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a3773731b8a4f7a6f4f69e67d4b7ef69296136/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a3773731b8a4f7a6f4f69e67d4b7ef69296136/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=67a3773731b8a4f7a6f4f69e67d4b7ef69296136", "patch": "@@ -5001,7 +5001,11 @@ fold_rtx (x, insn)\n \t\t    if (GET_MODE (table) != Pmode)\n \t\t      new = gen_rtx (TRUNCATE, GET_MODE (table), new);\n \n-\t\t    return new;\n+\t\t    /* Indicate this is a constant.  This isn't a \n+\t\t       valid form of CONST, but it will only be used\n+\t\t       to fold the next insns and then discarded, so\n+\t\t       it should be safe.  */\n+\t\t    return gen_rtx (CONST, GET_MODE (new), new);\n \t\t  }\n \t      }\n \t  }\n@@ -5174,13 +5178,26 @@ fold_rtx (x, insn)\n   switch (GET_RTX_CLASS (code))\n     {\n     case '1':\n-      /* We can't simplify extension ops unless we know the original mode.  */\n-      if ((code == ZERO_EXTEND || code == SIGN_EXTEND)\n-\t  && mode_arg0 == VOIDmode)\n-\tbreak;\n-      new = simplify_unary_operation (code, mode,\n-\t\t\t\t      const_arg0 ? const_arg0 : folded_arg0,\n-\t\t\t\t      mode_arg0);\n+      {\n+\tint is_const = 0;\n+\n+\t/* We can't simplify extension ops unless we know the\n+\t   original mode.  */\n+\tif ((code == ZERO_EXTEND || code == SIGN_EXTEND)\n+\t    && mode_arg0 == VOIDmode)\n+\t  break;\n+\n+\t/* If we had a CONST, strip it off and put it back later if we\n+\t   fold.  */\n+\tif (const_arg0 != 0 && GET_CODE (const_arg0) == CONST)\n+\t  is_const = 1, const_arg0 = XEXP (const_arg0, 0);\n+\n+\tnew = simplify_unary_operation (code, mode,\n+\t\t\t\t\tconst_arg0 ? const_arg0 : folded_arg0,\n+\t\t\t\t\tmode_arg0);\n+\tif (new != 0 && is_const)\n+\t  new = gen_rtx (CONST, mode, new);\n+      }\n       break;\n       \n     case '<':\n@@ -5358,6 +5375,13 @@ fold_rtx (x, insn)\n \t      if (y != 0 && GET_CODE (XEXP (y, 1)) == LABEL_REF\n \t\t  && XEXP (XEXP (y, 1), 0) == XEXP (const_arg1, 0))\n \t\treturn XEXP (y, 0);\n+\n+\t      /* Now try for a CONST of a MINUS like the above.  */\n+\t      if ((y = lookup_as_function (folded_arg0, CONST)) != 0\n+\t\t  && GET_CODE (XEXP (y, 0)) == MINUS\n+\t\t  && GET_CODE (XEXP (XEXP (y, 0), 1)) == LABEL_REF\n+\t\t  && XEXP (XEXP (XEXP (y, 0),1), 0) == XEXP (const_arg1, 0))\n+\t\treturn XEXP (XEXP (y, 0), 0);\n \t    }\n \n \t  /* If second operand is a register equivalent to a negative"}]}