{"sha": "ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NkMGVkOTVhODZmMDAzNGRhYTQ1MmIwYmI4MmIxNWFiNDdiMjg0YQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-29T13:22:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-29T13:22:45Z"}, "message": "[multiple changes]\n\n2017-09-29  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Use_Package): Add sanity check to avoid\n\tcircularities in the use-clause chain.\n\n2017-09-29  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Replace_Components): Update references to discriminants\n\tlocated in variant parts inherited from the parent type.\n\n2017-09-29  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch5.adb (Expand_Assign_Record): Do not generate code to copy\n\tdiscriminants if the target is an Unchecked_Union record type.\n\n2017-09-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Record_Aggregate): Reject the use of an\n\titerated component association in an aggregate for a record type.\n\n2017-09-29  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* make.adb: Minor whitespace fixes.\n\t* libgnat/s-resfil.ads: Minor reformatting.\n\nFrom-SVN: r253288", "tree": {"sha": "0f01c43173a6cfa0996666eeddc9f0b3163f4a3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f01c43173a6cfa0996666eeddc9f0b3163f4a3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/comments", "author": null, "committer": null, "parents": [{"sha": "1dce26a11dca29ffe5c3f2e5fb97fcb5830543e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dce26a11dca29ffe5c3f2e5fb97fcb5830543e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dce26a11dca29ffe5c3f2e5fb97fcb5830543e8"}], "stats": {"total": 131, "additions": 115, "deletions": 16}, "files": [{"sha": "933d33bd32a7588249d82b9c63cd6eeaa4d6970d", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "patch": "@@ -1577,7 +1577,14 @@ package body Exp_Ch5 is\n          --  suppressed in this case). It is unnecessary but harmless in\n          --  other cases.\n \n-         if Has_Discriminants (L_Typ) then\n+         --  Special case: no copy if the target has no discriminants.\n+\n+         if Has_Discriminants (L_Typ)\n+           and then Is_Unchecked_Union (Base_Type (L_Typ))\n+         then\n+            null;\n+\n+         elsif Has_Discriminants (L_Typ) then\n             F := First_Discriminant (R_Typ);\n             while Present (F) loop\n "}, {"sha": "1a24a99b63969faecec43f86e84ca5eb5fa79fbb", "filename": "gcc/ada/libgnat/s-resfil.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Flibgnat%2Fs-resfil.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Flibgnat%2Fs-resfil.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-resfil.ads?ref=ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "patch": "@@ -29,8 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package provides facilities for getting command line arguments\n---  from a text file, called a \"response file\".\n+--  This package provides facilities for getting command-line arguments from\n+--  a text file, called a \"response file\".\n --\n --  Using a response file allow passing a set of arguments to an executable\n --  longer than the maximum allowed by the system on the command line."}, {"sha": "6f1253911957a8e469d855800fff040e6d8e1da1", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "patch": "@@ -1772,7 +1772,7 @@ package body Make is\n         (Data : out Compilation_Data;\n          OK   : out Boolean)\n       is\n-         Pid       : Process_Id;\n+         Pid : Process_Id;\n \n       begin\n          pragma Assert (Outstanding_Compiles > 0);\n@@ -1790,7 +1790,7 @@ package body Make is\n \n          for J in Running_Compile'First .. Outstanding_Compiles loop\n             if Pid = Running_Compile (J).Pid then\n-               Data    := Running_Compile (J);\n+               Data := Running_Compile (J);\n                --  If a mapping file was used by this compilation, get its file\n                --  name for reuse by a subsequent compilation.\n "}, {"sha": "ad6e1ea9a3ea98153518c1f570c82e32425b7505", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "patch": "@@ -4108,15 +4108,22 @@ package body Sem_Aggr is\n          begin\n             Assoc := First (Component_Associations (N));\n             while Present (Assoc) loop\n-               if List_Length (Choices (Assoc)) > 1 then\n-                  Check_SPARK_05_Restriction\n-                    (\"component association in record aggregate must \"\n-                     & \"contain a single choice\", Assoc);\n-               end if;\n+               if Nkind (Assoc) = N_Iterated_Component_Association then\n+                  Error_Msg_N (\"iterated component association can only \"\n+                    & \"appear in an array aggregate\", N);\n+                  raise Unrecoverable_Error;\n \n-               if Nkind (First (Choices (Assoc))) = N_Others_Choice then\n-                  Check_SPARK_05_Restriction\n-                    (\"record aggregate cannot contain OTHERS\", Assoc);\n+               else\n+                  if List_Length (Choices (Assoc)) > 1 then\n+                     Check_SPARK_05_Restriction\n+                       (\"component association in record aggregate must \"\n+                        & \"contain a single choice\", Assoc);\n+                  end if;\n+\n+                  if Nkind (First (Choices (Assoc))) = N_Others_Choice then\n+                     Check_SPARK_05_Restriction\n+                       (\"record aggregate cannot contain OTHERS\", Assoc);\n+                  end if;\n                end if;\n \n                Assoc := Next (Assoc);"}, {"sha": "f6705d672327d13db0d1713167222a50c4ef319c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "patch": "@@ -21932,6 +21932,17 @@ package body Sem_Ch3 is\n                Next_Discriminant (Comp);\n             end loop;\n \n+         elsif Nkind (N) = N_Variant_Part then\n+            Comp := First_Discriminant (Typ);\n+            while Present (Comp) loop\n+               if Chars (Comp) = Chars (Name (N)) then\n+                  Set_Entity (Name (N), Comp);\n+                  exit;\n+               end if;\n+\n+               Next_Component (Comp);\n+            end loop;\n+\n          elsif Nkind (N) = N_Component_Declaration then\n             Comp := First_Component (Typ);\n             while Present (Comp) loop"}, {"sha": "a51cc636298f429fbcc74e82c0eb16ecba30fbde", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "patch": "@@ -3782,9 +3782,10 @@ package body Sem_Ch8 is\n       --  before setting its previous use clause.\n \n       if Ekind (Pack) = E_Package\n-         and then Present (Current_Use_Clause (Pack))\n-         and then Current_Use_Clause (Pack) /= N\n-         and then No (Prev_Use_Clause (N))\n+        and then Present (Current_Use_Clause (Pack))\n+        and then Current_Use_Clause (Pack) /= N\n+        and then No (Prev_Use_Clause (N))\n+        and then Prev_Use_Clause (Current_Use_Clause (Pack)) /= N\n       then\n          Set_Prev_Use_Clause (N, Current_Use_Clause (Pack));\n       end if;"}, {"sha": "ccb6e60e7bc4c1c21fad18609c1532d7891693a9", "filename": "gcc/testsuite/gnat.dg/unchecked_union2.adb", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_union2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_union2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_union2.adb?ref=ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "patch": "@@ -0,0 +1,35 @@\n+--  { dg-do compile }\n+\n+procedure Unchecked_Union2 is\n+   type small_array is array (0 .. 2) of Integer;\n+   type big_array   is array (0 .. 3) of Integer;\n+\n+   type small_record is record\n+      field1 : aliased Integer     := 0;\n+      field2 : aliased small_array := (0, 0, 0);\n+   end record;\n+\n+   type big_record is record\n+      field1 : aliased Integer   := 0;\n+      field2 : aliased big_array := (0, 0, 0, 0);\n+   end record;\n+\n+   type myUnion (discr : Integer := 0) is record\n+      case discr is\n+         when 0 =>\n+            record1 : aliased small_record;\n+         when others =>\n+            record2 : aliased big_record;\n+      end case;\n+   end record;\n+\n+   type UU_myUnion3 (discr : Integer := 0) is new myUnion (discr); -- Test\n+   pragma Unchecked_Union (UU_myUnion3);\n+   pragma Convention (C, UU_myUnion3);\n+\n+   procedure Convert (A : in UU_myUnion3; B : out UU_myUnion3);\n+   pragma Import (C, Convert);\n+\n+begin\n+   null;\n+end Unchecked_Union2;"}, {"sha": "638861a2854e550b849693610ff6ad3178658a71", "filename": "gcc/testsuite/gnat.dg/unchecked_union3.adb", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_union3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd0ed95a86f0034daa452b0bb82b15ab47b284a/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_union3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_union3.adb?ref=ccd0ed95a86f0034daa452b0bb82b15ab47b284a", "patch": "@@ -0,0 +1,38 @@\n+--  { dg-do compile }\n+\n+procedure Unchecked_Union3 is\n+   type small_array is array (0 .. 2) of Integer;\n+   type big_array   is array (0 .. 3) of Integer;\n+\n+   type small_record is record\n+      field1 : aliased Integer     := 0;\n+      field2 : aliased small_array := (0, 0, 0);\n+   end record;\n+\n+   type big_record is record\n+      field1 : aliased Integer   := 0;\n+      field2 : aliased big_array := (0, 0, 0, 0);\n+   end record;\n+\n+   type myUnion (discr : Integer := 0) is record\n+      case discr is\n+         when 0 =>\n+            record1 : aliased small_record;\n+         when others =>\n+            record2 : aliased big_record;\n+      end case;\n+   end record;\n+\n+   type UU_myUnion1 is new myUnion;\n+   pragma Unchecked_Union (UU_myUnion1);\n+   pragma Convention (C, UU_myUnion1);\n+\n+   procedure Convert (A : in myUnion; B : out UU_myUnion1) is\n+      L : UU_myUnion1 := UU_myUnion1 (A);  --  Test\n+   begin\n+      B := L;\n+   end Convert;\n+\n+begin\n+   null;\n+end Unchecked_Union3;"}]}