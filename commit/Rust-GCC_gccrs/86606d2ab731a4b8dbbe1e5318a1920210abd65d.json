{"sha": "86606d2ab731a4b8dbbe1e5318a1920210abd65d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY2MDZkMmFiNzMxYTRiOGRiYmUxZTUzMThhMTkyMDIxMGFiZDY1ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-18T15:18:10Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-18T15:18:10Z"}, "message": "analyzer: refactor custom_event, introducing precanned_custom_event class\n\nI have followup work where a custom event's description would be better\nhandled via a vfunc rather that a precanned string, hence this\nrefactoring to make it easy to add custom_event subclasses.\n\ngcc/analyzer/ChangeLog:\n\t* checker-path.cc (class custom_event): Make abstract to allow for\n\tcustom vfuncs, splitting existing implementation into...\n\t(class precanned_custom_event): New subclass.\n\t(custom_event::get_desc): Move to...\n\t(precanned_custom_event::get_desc): ...subclass.\n\t* checker-path.h (class custom_event): Make abstract to allow for\n\tcustom vfuncs, splitting existing implementation into...\n\t(class precanned_custom_event): New subclass.\n\t* diagnostic-manager.cc (diagnostic_manager::add_events_for_eedge):\n\tUse precanned_custom_event.\n\t* engine.cc\n\t(stale_jmp_buf::maybe_add_custom_events_for_superedge): Likewise.\n\t* sm-signal.cc (signal_delivery_edge_info_t::add_events_to_path):\n\tLikewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "4911fc2b1822b68f72df6a68245438ad3e0adbe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4911fc2b1822b68f72df6a68245438ad3e0adbe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86606d2ab731a4b8dbbe1e5318a1920210abd65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86606d2ab731a4b8dbbe1e5318a1920210abd65d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86606d2ab731a4b8dbbe1e5318a1920210abd65d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86606d2ab731a4b8dbbe1e5318a1920210abd65d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0532452dcd17910dfd3d2b0df50dfe3ef1194bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0532452dcd17910dfd3d2b0df50dfe3ef1194bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0532452dcd17910dfd3d2b0df50dfe3ef1194bf7"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "e10c8e2bb7c10c4909df8ba36399143161f0af40", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86606d2ab731a4b8dbbe1e5318a1920210abd65d/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86606d2ab731a4b8dbbe1e5318a1920210abd65d/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=86606d2ab731a4b8dbbe1e5318a1920210abd65d", "patch": "@@ -162,14 +162,14 @@ debug_event::get_desc (bool) const\n   return label_text::borrow (m_desc);\n }\n \n-/* class custom_event : public checker_event.  */\n+/* class precanned_custom_event : public custom_event.  */\n \n /* Implementation of diagnostic_event::get_desc vfunc for\n-   custom_event.\n+   precanned_custom_event.\n    Use the saved string as the event's description.  */\n \n label_text\n-custom_event::get_desc (bool) const\n+precanned_custom_event::get_desc (bool) const\n {\n   return label_text::borrow (m_desc);\n }"}, {"sha": "1843c4bc7b469c28c979d8613b332dd2d0cae0b6", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86606d2ab731a4b8dbbe1e5318a1920210abd65d/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86606d2ab731a4b8dbbe1e5318a1920210abd65d/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=86606d2ab731a4b8dbbe1e5318a1920210abd65d", "patch": "@@ -56,6 +56,7 @@ extern const char *event_kind_to_string (enum event_kind ek);\n      checker_event\n        debug_event (EK_DEBUG)\n        custom_event (EK_CUSTOM)\n+\t precanned_custom_event\n        statement_event (EK_STMT)\n        function_entry_event (EK_FUNCTION_ENTRY)\n        state_change_event (EK_STATE_CHANGE)\n@@ -144,19 +145,30 @@ class debug_event : public checker_event\n   char *m_desc;\n };\n \n-/* A concrete event subclass for custom events.  These are not filtered,\n+/* An abstract event subclass for custom events.  These are not filtered,\n    as they are likely to be pertinent to the diagnostic.  */\n \n class custom_event : public checker_event\n {\n+protected:\n+  custom_event (location_t loc, tree fndecl, int depth)\n+  : checker_event (EK_CUSTOM, loc, fndecl, depth)\n+  {\n+  }\n+};\n+\n+/* A concrete custom_event subclass with a precanned message.  */\n+\n+class precanned_custom_event : public custom_event\n+{\n public:\n-  custom_event (location_t loc, tree fndecl, int depth,\n-\t\tconst char *desc)\n-  : checker_event (EK_CUSTOM, loc, fndecl, depth),\n+  precanned_custom_event (location_t loc, tree fndecl, int depth,\n+\t\t\t  const char *desc)\n+  : custom_event (loc, fndecl, depth),\n     m_desc (xstrdup (desc))\n   {\n   }\n-  ~custom_event ()\n+  ~precanned_custom_event ()\n   {\n     free (m_desc);\n   }"}, {"sha": "7eb4ed8a4f2d9148b84ae676a423908d73d73738", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86606d2ab731a4b8dbbe1e5318a1920210abd65d/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86606d2ab731a4b8dbbe1e5318a1920210abd65d/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=86606d2ab731a4b8dbbe1e5318a1920210abd65d", "patch": "@@ -1587,7 +1587,7 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \t\t \"this path would have been rejected as infeasible\"\n \t\t \" at this edge: \");\n       pb.get_feasibility_problem ()->dump_to_pp (&pp);\n-      emission_path->add_event (new custom_event\n+      emission_path->add_event (new precanned_custom_event\n \t\t\t\t(dst_point.get_location (),\n \t\t\t\t dst_point.get_fndecl (),\n \t\t\t\t dst_stack_depth,"}, {"sha": "f322fdb64976618cfdfd59ea37a4096c2010310f", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86606d2ab731a4b8dbbe1e5318a1920210abd65d/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86606d2ab731a4b8dbbe1e5318a1920210abd65d/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=86606d2ab731a4b8dbbe1e5318a1920210abd65d", "patch": "@@ -1395,7 +1395,7 @@ class stale_jmp_buf : public pending_diagnostic_subclass<dump_path_diagnostic>\n       {\n \t/* Compare with diagnostic_manager::add_events_for_superedge.  */\n \tconst int src_stack_depth = src_point.get_stack_depth ();\n-\tm_stack_pop_event = new custom_event\n+\tm_stack_pop_event = new precanned_custom_event\n \t  (src_point.get_location (),\n \t   src_point.get_fndecl (),\n \t   src_stack_depth,"}, {"sha": "42be8094997f59a6e43c496ed16acce37ac576e0", "filename": "gcc/analyzer/sm-signal.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86606d2ab731a4b8dbbe1e5318a1920210abd65d/gcc%2Fanalyzer%2Fsm-signal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86606d2ab731a4b8dbbe1e5318a1920210abd65d/gcc%2Fanalyzer%2Fsm-signal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-signal.cc?ref=86606d2ab731a4b8dbbe1e5318a1920210abd65d", "patch": "@@ -238,9 +238,10 @@ class signal_delivery_edge_info_t : public exploded_edge::custom_info_t\n     FINAL OVERRIDE\n   {\n     emission_path->add_event\n-      (new custom_event (UNKNOWN_LOCATION, NULL_TREE, 0,\n-\t\t\t \"later on,\"\n-\t\t\t \" when the signal is delivered to the process\"));\n+      (new precanned_custom_event\n+       (UNKNOWN_LOCATION, NULL_TREE, 0,\n+\t\"later on,\"\n+\t\" when the signal is delivered to the process\"));\n   }\n };\n "}]}