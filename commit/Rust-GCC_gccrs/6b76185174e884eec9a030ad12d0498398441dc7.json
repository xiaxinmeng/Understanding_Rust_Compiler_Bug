{"sha": "6b76185174e884eec9a030ad12d0498398441dc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI3NjE4NTE3NGU4ODRlZWM5YTAzMGFkMTJkMDQ5ODM5ODQ0MWRjNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-01-07T20:06:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-01-07T20:06:34Z"}, "message": "re PR target/34682 (70% slowdown with SSE enabled)\n\n        PR target/34682\n        * config/i386/i386.md (neg<mode>2): Rename from negsf2, negdf2 and\n        negxf2.  Macroize expander using X87MODEF mode iterator.  Change\n        predicates of op0 and op1 to register_operand.\n        (abs<mode>2): Rename from abssf2, absdf2 and negxf2.  Macroize expander\n        using X87MODEF mode iterator.  Change predicates of op0 and op1 to\n        register_operand.\n        (\"*absneg<mode>2_mixed\", \"*absneg<mode>2_sse\"): Rename from\n        corresponding patterns and macroize using MODEF macro.  Change\n        predicates of op0 and op1 to register_operand and remove\n        \"m\" constraint. Disparage \"r\" alternative with \"!\".\n        (\"*absneg<mode>2_i387\"): Rename from corresponding patterns and\n        macroize using X87MODEF macro.  Change predicates of op0 and op1\n        to register_operand and remove \"m\" constraint.  Disparage \"r\"\n        alternative with \"!\".\n        (absneg splitter with memory operands): Remove.\n        (\"*neg<mode>2_1\", \"*abs<mode>2_1\"): Rename from corresponding\n        patterns and macroize using X87MODEF mode iterator.\n        * config/i386/sse.md (negv4sf2, absv4sf2, neg2vdf2, absv2df2):\n        Change predicate of op1 to register_operand.\n        * config/i386/i386.c (ix86_expand_fp_absneg_operator): Remove support\n        for memory operands.\n\nFrom-SVN: r131381", "tree": {"sha": "634c717bb706c3949490f1e3c9e5cfa1413d2112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/634c717bb706c3949490f1e3c9e5cfa1413d2112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b76185174e884eec9a030ad12d0498398441dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b76185174e884eec9a030ad12d0498398441dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b76185174e884eec9a030ad12d0498398441dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b76185174e884eec9a030ad12d0498398441dc7/comments", "author": null, "committer": null, "parents": [{"sha": "5ca0373f910a2c2eeacb5447bbd24eaad12d1fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca0373f910a2c2eeacb5447bbd24eaad12d1fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ca0373f910a2c2eeacb5447bbd24eaad12d1fc7"}], "stats": {"total": 275, "additions": 79, "deletions": 196}, "files": [{"sha": "e8732d7c5e3145a86b3ed47151d150ca9b157690", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76185174e884eec9a030ad12d0498398441dc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76185174e884eec9a030ad12d0498398441dc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b76185174e884eec9a030ad12d0498398441dc7", "patch": "@@ -1,3 +1,28 @@\n+2008-01-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/34682\n+\t* config/i386/i386.md (neg<mode>2): Rename from negsf2, negdf2 and\n+\tnegxf2.  Macroize expander using X87MODEF mode iterator.  Change\n+\tpredicates of op0 and op1 to register_operand.\n+\t(abs<mode>2): Rename from abssf2, absdf2 and negxf2.  Macroize expander\n+\tusing X87MODEF mode iterator.  Change predicates of op0 and op1 to\n+\tregister_operand.\n+\t(\"*absneg<mode>2_mixed\", \"*absneg<mode>2_sse\"): Rename from\n+\tcorresponding patterns and macroize using MODEF macro.  Change\n+\tpredicates of op0 and op1 to register_operand and remove\n+\t\"m\" constraint. Disparage \"r\" alternative with \"!\".\n+\t(\"*absneg<mode>2_i387\"): Rename from corresponding patterns and\n+\tmacroize using X87MODEF macro.  Change predicates of op0 and op1\n+\tto register_operand and remove \"m\" constraint.  Disparage \"r\"\n+\talternative with \"!\".\n+\t(absneg splitter with memory operands): Remove.\n+\t(\"*neg<mode>2_1\", \"*abs<mode>2_1\"): Rename from corresponding\n+\tpatterns and macroize using X87MODEF mode iterator.\n+\t* config/i386/sse.md (negv4sf2, absv4sf2, neg2vdf2, absv2df2):\n+\tChange predicate of op1 to register_operand.\n+\t* config/i386/i386.c (ix86_expand_fp_absneg_operator): Remove support\n+\tfor memory operands.2008-01-07  Richard Guenther  <rguenther@suse.de>\n+\n 2008-01-07  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Add clause for mcpu=8548.\n@@ -17,9 +42,9 @@\n \n 2008-01-07  Sa Liu  <saliu@de.ibm.com>\n \n-\t* config/spu/spu.md (divdf3): Genetate inline code for double division. \n-\tThe implementation doesn't handle INF or NAN, therefore it only applies \n-\twhen -ffinite-math-only is given.\n+\t* config/spu/spu.md (divdf3): Genetate inline code for double\n+\tdivision.  The implementation doesn't handle INF or NAN, therefore it\n+\tonly applies when -ffinite-math-only is given.\n \n 2008-01-06  Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "0f827a6de9b2909f0bb3fda36bbe99696c9723a9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76185174e884eec9a030ad12d0498398441dc7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76185174e884eec9a030ad12d0498398441dc7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6b76185174e884eec9a030ad12d0498398441dc7", "patch": "@@ -11020,7 +11020,6 @@ ix86_expand_fp_absneg_operator (enum rtx_code code, enum machine_mode mode,\n \t\t\t\trtx operands[])\n {\n   rtx mask, set, use, clob, dst, src;\n-  bool matching_memory;\n   bool use_sse = false;\n   bool vector_mode = VECTOR_MODE_P (mode);\n   enum machine_mode elt_mode = mode;\n@@ -11045,19 +11044,6 @@ ix86_expand_fp_absneg_operator (enum rtx_code code, enum machine_mode mode,\n   dst = operands[0];\n   src = operands[1];\n \n-  /* If the destination is memory, and we don't have matching source\n-     operands or we're using the x87, do things in registers.  */\n-  matching_memory = false;\n-  if (MEM_P (dst))\n-    {\n-      if (use_sse && rtx_equal_p (dst, src))\n-\tmatching_memory = true;\n-      else\n-\tdst = gen_reg_rtx (mode);\n-    }\n-  if (MEM_P (src) && !matching_memory)\n-    src = force_reg (mode, src);\n-\n   if (vector_mode)\n     {\n       set = gen_rtx_fmt_ee (code == NEG ? XOR : AND, mode, src, mask);\n@@ -11078,9 +11064,6 @@ ix86_expand_fp_absneg_operator (enum rtx_code code, enum machine_mode mode,\n       else\n \temit_insn (set);\n     }\n-\n-  if (dst != operands[0])\n-    emit_move_insn (operands[0], dst);\n }\n \n /* Expand a copysign operation.  Special case operand 0 being a constant.  */"}, {"sha": "04d38f6497be6960e454fccca4b38740d6070ecf", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 47, "deletions": 172, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76185174e884eec9a030ad12d0498398441dc7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76185174e884eec9a030ad12d0498398441dc7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6b76185174e884eec9a030ad12d0498398441dc7", "patch": "@@ -10238,132 +10238,64 @@\n \n ;; Changing of sign for FP values is doable using integer unit too.\n \n-(define_expand \"negsf2\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n-\t(neg:SF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"ix86_expand_fp_absneg_operator (NEG, SFmode, operands); DONE;\")\n-\n-(define_expand \"abssf2\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n-\t(abs:SF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"ix86_expand_fp_absneg_operator (ABS, SFmode, operands); DONE;\")\n-\n-(define_insn \"*absnegsf2_mixed\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"    \"=x  ,x,f,rm\")\n-\t(match_operator:SF 3 \"absneg_operator\"\n-\t  [(match_operand:SF 1 \"nonimmediate_operand\" \"0   ,x,0,0 \")]))\n-   (use (match_operand:V4SF 2 \"nonimmediate_operand\"  \"xm  ,0,X,X \"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_SSE_MATH && TARGET_MIX_SSE_I387\n-   && ix86_unary_operator_ok (GET_CODE (operands[3]), SFmode, operands)\"\n-  \"#\")\n-\n-(define_insn \"*absnegsf2_sse\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"    \"=x,x,rm\")\n-\t(match_operator:SF 3 \"absneg_operator\"\n-\t  [(match_operand:SF 1 \"nonimmediate_operand\" \"0 ,x,0\")]))\n-   (use (match_operand:V4SF 2 \"nonimmediate_operand\"  \"xm,0,X\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_SSE_MATH\n-   && ix86_unary_operator_ok (GET_CODE (operands[3]), SFmode, operands)\"\n-  \"#\")\n-\n-(define_insn \"*absnegsf2_i387\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,rm\")\n-\t(match_operator:SF 3 \"absneg_operator\"\n-\t  [(match_operand:SF 1 \"nonimmediate_operand\" \"0,0\")]))\n-   (use (match_operand 2 \"\" \"\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_80387 && !TARGET_SSE_MATH\n-   && ix86_unary_operator_ok (GET_CODE (operands[3]), SFmode, operands)\"\n-  \"#\")\n-\n-(define_expand \"negdf2\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t(neg:DF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n-  \"ix86_expand_fp_absneg_operator (NEG, DFmode, operands); DONE;\")\n-\n-(define_expand \"absdf2\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t(abs:DF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n-  \"ix86_expand_fp_absneg_operator (ABS, DFmode, operands); DONE;\")\n+(define_expand \"neg<mode>2\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(neg:X87MODEF (match_operand:X87MODEF 1 \"register_operand\" \"\")))]\n+  \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n+  \"ix86_expand_fp_absneg_operator (NEG, <MODE>mode, operands); DONE;\")\n \n-(define_insn \"*absnegdf2_mixed\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\"    \"=x,x,f,rm\")\n-\t(match_operator:DF 3 \"absneg_operator\"\n-\t  [(match_operand:DF 1 \"nonimmediate_operand\" \"0 ,x,0,0\")]))\n-   (use (match_operand:V2DF 2 \"nonimmediate_operand\"  \"xm,0,X,X\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH && TARGET_MIX_SSE_I387\n-   && ix86_unary_operator_ok (GET_CODE (operands[3]), DFmode, operands)\"\n-  \"#\")\n+(define_expand \"abs<mode>2\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(abs:X87MODEF (match_operand:X87MODEF 1 \"register_operand\" \"\")))]\n+  \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n+  \"ix86_expand_fp_absneg_operator (ABS, <MODE>mode, operands); DONE;\")\n \n-(define_insn \"*absnegdf2_sse\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\"    \"=x,x,rm\")\n-\t(match_operator:DF 3 \"absneg_operator\"\n-\t  [(match_operand:DF 1 \"nonimmediate_operand\" \"0 ,x,0 \")]))\n-   (use (match_operand:V2DF 2 \"nonimmediate_operand\"  \"xm,0,X \"))\n+(define_insn \"*absneg<mode>2_mixed\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,f,!r\")\n+\t(match_operator:MODEF 3 \"absneg_operator\"\n+\t  [(match_operand:MODEF 1 \"register_operand\" \"0,x,0,0\")]))\n+   (use (match_operand:<ssevecmode> 2 \"nonimmediate_operand\" \"xm,0,X,X\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && ix86_unary_operator_ok (GET_CODE (operands[3]), DFmode, operands)\"\n+  \"TARGET_MIX_SSE_I387 && SSE_FLOAT_MODE_P (<MODE>mode)\"\n   \"#\")\n \n-(define_insn \"*absnegdf2_i387\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,rm\")\n-\t(match_operator:DF 3 \"absneg_operator\"\n-\t  [(match_operand:DF 1 \"nonimmediate_operand\" \"0,0\")]))\n-   (use (match_operand 2 \"\" \"\"))\n+(define_insn \"*absneg<mode>2_sse\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,!r\")\n+\t(match_operator:MODEF 3 \"absneg_operator\"\n+\t  [(match_operand:MODEF 1 \"register_operand\" \"0 ,x,0\")]))\n+   (use (match_operand:<ssevecmode> 2 \"register_operand\" \"xm,0,X\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_80387 && !(TARGET_SSE2 && TARGET_SSE_MATH)\n-   && ix86_unary_operator_ok (GET_CODE (operands[3]), DFmode, operands)\"\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"#\")\n \n-(define_expand \"negxf2\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n-\t(neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n-  \"ix86_expand_fp_absneg_operator (NEG, XFmode, operands); DONE;\")\n-\n-(define_expand \"absxf2\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n-\t(abs:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n-  \"ix86_expand_fp_absneg_operator (ABS, XFmode, operands); DONE;\")\n-\n-(define_insn \"*absnegxf2_i387\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,?rm\")\n-\t(match_operator:XF 3 \"absneg_operator\"\n-\t  [(match_operand:XF 1 \"nonimmediate_operand\" \"0,0\")]))\n+(define_insn \"*absneg<mode>2_i387\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,!r\")\n+\t(match_operator:X87MODEF 3 \"absneg_operator\"\n+\t  [(match_operand:X87MODEF 1 \"register_operand\" \"0,0\")]))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_80387\n-   && ix86_unary_operator_ok (GET_CODE (operands[3]), XFmode, operands)\"\n+  \"TARGET_80387 && !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n   \"#\")\n \n (define_expand \"negtf2\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(neg:TF (match_operand:TF 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+\t(neg:TF (match_operand:TF 1 \"register_operand\" \"\")))]\n   \"TARGET_64BIT\"\n   \"ix86_expand_fp_absneg_operator (NEG, TFmode, operands); DONE;\")\n \n (define_expand \"abstf2\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(abs:TF (match_operand:TF 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+\t(abs:TF (match_operand:TF 1 \"register_operand\" \"\")))]\n   \"TARGET_64BIT\"\n   \"ix86_expand_fp_absneg_operator (ABS, TFmode, operands); DONE;\")\n \n (define_insn \"*absnegtf2_sse\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\"    \"=x,x,m\")\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x,x\")\n \t(match_operator:TF 3 \"absneg_operator\"\n-\t  [(match_operand:TF 1 \"nonimmediate_operand\" \"0, x,0\")]))\n-   (use (match_operand:TF 2 \"nonimmediate_operand\"    \"xm,0,X\"))\n+\t  [(match_operand:TF 1 \"register_operand\" \"0,x\")]))\n+   (use (match_operand:TF 2 \"nonimmediate_operand\" \"xm,0\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\n-   && ix86_unary_operator_ok (GET_CODE (operands[3]), TFmode, operands)\"\n+  \"TARGET_64BIT\"\n   \"#\")\n \n ;; Splitters for fp abs and neg.\n@@ -10492,83 +10424,26 @@\n   operands[1] = tmp;\n })\n \n-(define_split\n-  [(set (match_operand 0 \"memory_operand\" \"\")\n-\t(match_operator 1 \"absneg_operator\" [(match_dup 0)]))\n-   (use (match_operand 2 \"\" \"\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed\"\n-  [(parallel [(set (match_dup 0) (match_dup 1))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-{\n-  enum machine_mode mode = GET_MODE (operands[0]);\n-  int size = mode == XFmode ? 10 : GET_MODE_SIZE (mode);\n-  rtx tmp;\n-\n-  operands[0] = adjust_address (operands[0], QImode, size - 1);\n-  if (GET_CODE (operands[1]) == ABS)\n-    {\n-      tmp = gen_int_mode (0x7f, QImode);\n-      tmp = gen_rtx_AND (QImode, operands[0], tmp);\n-    }\n-  else\n-    {\n-      tmp = gen_int_mode (0x80, QImode);\n-      tmp = gen_rtx_XOR (QImode, operands[0], tmp);\n-    }\n-  operands[1] = tmp;\n-})\n-\n ;; Conditionalize these after reload. If they match before reload, we\n ;; lose the clobber and ability to use integer instructions.\n \n-(define_insn \"*negsf2_1\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(neg:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && (reload_completed || !TARGET_SSE_MATH)\"\n-  \"fchs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*negdf2_1\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(neg:DF (match_operand:DF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && (reload_completed || !(TARGET_SSE2 && TARGET_SSE_MATH))\"\n-  \"fchs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*negxf2_1\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(neg:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387\"\n+(define_insn \"*neg<mode>2_1\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n+\t(neg:X87MODEF (match_operand:X87MODEF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_80387\n+   && (reload_completed || !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*abssf2_1\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(abs:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && (reload_completed || !TARGET_SSE_MATH)\"\n-  \"fabs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*absdf2_1\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(abs:DF (match_operand:DF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && (reload_completed || !(TARGET_SSE2 && TARGET_SSE_MATH))\"\n-  \"fabs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*absxf2_1\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(abs:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387\"\n+(define_insn \"*abs<mode>2_1\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n+\t(abs:X87MODEF (match_operand:X87MODEF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_80387\n+   && (reload_completed || !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*negextendsfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")"}, {"sha": "43f7ced8c0337eef684e08c299043014e26ed696", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76185174e884eec9a030ad12d0498398441dc7/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76185174e884eec9a030ad12d0498398441dc7/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6b76185174e884eec9a030ad12d0498398441dc7", "patch": "@@ -378,13 +378,13 @@\n \n (define_expand \"negv4sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-\t(neg:V4SF (match_operand:V4SF 1 \"nonimmediate_operand\" \"\")))]\n+\t(neg:V4SF (match_operand:V4SF 1 \"register_operand\" \"\")))]\n   \"TARGET_SSE\"\n   \"ix86_expand_fp_absneg_operator (NEG, V4SFmode, operands); DONE;\")\n \n (define_expand \"absv4sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-\t(abs:V4SF (match_operand:V4SF 1 \"nonimmediate_operand\" \"\")))]\n+\t(abs:V4SF (match_operand:V4SF 1 \"register_operand\" \"\")))]\n   \"TARGET_SSE\"\n   \"ix86_expand_fp_absneg_operator (ABS, V4SFmode, operands); DONE;\")\n \n@@ -2143,13 +2143,13 @@\n \n (define_expand \"negv2df2\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n-\t(neg:V2DF (match_operand:V2DF 1 \"nonimmediate_operand\" \"\")))]\n+\t(neg:V2DF (match_operand:V2DF 1 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\"\n   \"ix86_expand_fp_absneg_operator (NEG, V2DFmode, operands); DONE;\")\n \n (define_expand \"absv2df2\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n-\t(abs:V2DF (match_operand:V2DF 1 \"nonimmediate_operand\" \"\")))]\n+\t(abs:V2DF (match_operand:V2DF 1 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\"\n   \"ix86_expand_fp_absneg_operator (ABS, V2DFmode, operands); DONE;\")\n "}]}