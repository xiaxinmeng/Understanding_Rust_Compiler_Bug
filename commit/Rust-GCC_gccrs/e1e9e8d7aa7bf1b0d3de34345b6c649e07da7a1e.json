{"sha": "e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFlOWU4ZDdhYTdiZjFiMGQzZGUzNDM0NWI2YzY0OWUwN2RhN2ExZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-14T20:58:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-14T20:59:15Z"}, "message": "libstdc++: Fix constraints on std::compare_three_way\n\nMy \"simplification\" of std::compare_three_way's constraints in commit\nf214ffb336d582a66149068a2a96b7fcf395b5de was incorrect, because\nstd::three_way_comparable_with imposes additional restrictions beyond\nthe <=> expression being valid.\n\n\t* libsupc++/compare (compare_three_way): Fix constraint so that\n\tBUILTIN-PTR-THREE-WAY does not require three_way_comparable_with.\n\t* testsuite/18_support/comparisons/object/builtin-ptr-three-way.cc:\n\tNew test.", "tree": {"sha": "104248697a76241f95b6fe9103bfeaafb896e2e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/104248697a76241f95b6fe9103bfeaafb896e2e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "0283cf313f0d947bd0a356043ede25762a3714af", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e", "patch": "@@ -1,5 +1,10 @@\n 2020-04-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* libsupc++/compare (compare_three_way): Fix constraint so that\n+\tBUILTIN-PTR-THREE-WAY does not require three_way_comparable_with.\n+\t* testsuite/18_support/comparisons/object/builtin-ptr-three-way.cc:\n+\tNew test.\n+\n \tPR libstdc++/94562\n \t* include/bits/shared_ptr.h (operator<=>): Define for C++20.\n \t* include/bits/shared_ptr_base.h (operator<=>): Likewise."}, {"sha": "e5fb322ed9e1492db37070ada7c2ded825f905d9", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e", "patch": "@@ -481,20 +481,22 @@ namespace std\n     // BUILTIN-PTR-THREE-WAY(T, U)\n     template<typename _Tp, typename _Up>\n       concept __3way_builtin_ptr_cmp\n-\t= three_way_comparable_with<_Tp, _Up>\n+\t= requires(_Tp&& __t, _Up&& __u)\n+\t  { static_cast<_Tp&&>(__t) <=> static_cast<_Up&&>(__u); }\n \t  && convertible_to<_Tp, const volatile void*>\n \t  && convertible_to<_Up, const volatile void*>\n \t  && ! requires(_Tp&& __t, _Up&& __u)\n-\t     { operator<=>(static_cast<_Tp&&>(__t), static_cast<_Up&&>(__u)); }\n+\t  { operator<=>(static_cast<_Tp&&>(__t), static_cast<_Up&&>(__u)); }\n \t  && ! requires(_Tp&& __t, _Up&& __u)\n-\t     { static_cast<_Tp&&>(__t).operator<=>(static_cast<_Up&&>(__u)); };\n+\t  { static_cast<_Tp&&>(__t).operator<=>(static_cast<_Up&&>(__u)); };\n   } // namespace __detail\n \n   // [cmp.object], typename compare_three_way\n   struct compare_three_way\n   {\n     template<typename _Tp, typename _Up>\n       requires three_way_comparable_with<_Tp, _Up>\n+      || __detail::__3way_builtin_ptr_cmp<_Tp, _Up>\n       constexpr auto\n       operator()(_Tp&& __t, _Up&& __u) const\n       noexcept(noexcept(std::declval<_Tp>() <=> std::declval<_Up>()))"}, {"sha": "38b3c6e3211f945d05f1bdcbda5f3a7c64cab77b", "filename": "libstdc++-v3/testsuite/18_support/comparisons/object/builtin-ptr-three-way.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fobject%2Fbuiltin-ptr-three-way.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fobject%2Fbuiltin-ptr-three-way.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fobject%2Fbuiltin-ptr-three-way.cc?ref=e1e9e8d7aa7bf1b0d3de34345b6c649e07da7a1e", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <compare>\n+\n+void\n+test01()\n+{\n+  struct X\n+  {\n+    operator int() const { return 0; }\n+    operator long*() const { return nullptr; }\n+  } x;\n+\n+  // Not three-way-comparable because of ambiguous conversion to int or long*:\n+  static_assert( ! std::three_way_comparable<X> );\n+\n+  // And therefore X is not three-way-comparable-with anything else\n+  // (because std::three_way_comparable_with<X, Y> requires that both\n+  // three_way_comparable<X> and three_way_comparable<Y> are true).\n+  static_assert( ! std::three_way_comparable_with<X, long*> );\n+\n+  long l;\n+  // But <=> is valid and resolves to a builtin operator comparing pointers:\n+  auto c = &l <=> x;\n+  // So std::compare_three_way should be usable:\n+  auto c2 = std::compare_three_way()(&l, x);\n+}"}]}