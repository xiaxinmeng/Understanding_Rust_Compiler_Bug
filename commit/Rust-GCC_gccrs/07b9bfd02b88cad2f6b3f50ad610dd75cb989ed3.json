{"sha": "07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiOWJmZDAyYjg4Y2FkMmY2YjNmNTBhZDYxMGRkNzVjYjk4OWVkMw==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zh@live.com", "date": "2020-04-08T14:33:40Z"}, "committer": {"name": "Dennis Zhang", "email": "dennis.zh@live.com", "date": "2020-04-08T14:33:40Z"}, "message": "arm: CDE intrinsics using FPU/MVE S/D registers\n\nThis patch enables the ACLE intrinsics calling VCX1<A>,\nVCX2<A>, and VCX3<A> instructions who work with FPU/MVE\n32-bit/64-bit registers. This patch also enables DImode for VFP\nto support CDE with FPU.\n\ngcc/ChangeLog:\n2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n\t    Matthew Malcomson <matthew.malcomson@arm.com>\n\n\t* config/arm/arm-builtins.c (CX_IMM_QUALIFIERS): New macro.\n\t(CX_UNARY_QUALIFIERS, CX_BINARY_QUALIFIERS): Likewise.\n\t(CX_TERNARY_QUALIFIERS): Likewise.\n\t(ARM_BUILTIN_CDE_PATTERN_START): Likewise.\n\t(ARM_BUILTIN_CDE_PATTERN_END): Likewise.\n\t(arm_init_acle_builtins): Initialize CDE builtins.\n\t(arm_expand_acle_builtin): Check CDE constant operands.\n\t* config/arm/arm.h (ARM_CDE_CONST_COPROC): New macro to set the range\n\tof CDE constant operand.\n\t* config/arm/arm.c (arm_hard_regno_mode_ok): Support DImode for\n\tTARGET_VFP_BASE.\n\t(ARM_VCDE_CONST_1, ARM_VCDE_CONST_2, ARM_VCDE_CONST_3): Likewise.\n\t* config/arm/arm_cde.h (__arm_vcx1_u32): New macro of ACLE interface.\n\t(__arm_vcx1a_u32, __arm_vcx2_u32, __arm_vcx2a_u32): Likewise.\n\t(__arm_vcx3_u32, __arm_vcx3a_u32, __arm_vcx1d_u64): Likewise.\n\t(__arm_vcx1da_u64, __arm_vcx2d_u64, __arm_vcx2da_u64): Likewise.\n\t(__arm_vcx3d_u64, __arm_vcx3da_u64): Likewise.\n\t* config/arm/arm_cde_builtins.def: New file.\n\t* config/arm/iterators.md (V_reg): New attribute of SI.\n\t* config/arm/predicates.md (const_int_coproc_operand): New.\n\t(const_int_vcde1_operand, const_int_vcde2_operand): New.\n\t(const_int_vcde3_operand): New.\n\t* config/arm/unspecs.md (UNSPEC_VCDE, UNSPEC_VCDEA): New.\n\t* config/arm/vfp.md (arm_vcx1<mode>): New entry.\n\t(arm_vcx1a<mode>, arm_vcx2<mode>, arm_vcx2a<mode>): Likewise.\n\t(arm_vcx3<mode>, arm_vcx3a<mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* gcc.target/arm/acle/cde_v_1.c: New test.\n\t* gcc.target/arm/acle/cde_v_1_err.c: New test.\n\t* gcc.target/arm/acle/cde_v_1_mve.c: New test.", "tree": {"sha": "b8016cd1f03e89314d31b0c56e49b2b87548eb2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8016cd1f03e89314d31b0c56e49b2b87548eb2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/comments", "author": {"login": "solarock", "id": 109078, "node_id": "MDQ6VXNlcjEwOTA3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/109078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solarock", "html_url": "https://github.com/solarock", "followers_url": "https://api.github.com/users/solarock/followers", "following_url": "https://api.github.com/users/solarock/following{/other_user}", "gists_url": "https://api.github.com/users/solarock/gists{/gist_id}", "starred_url": "https://api.github.com/users/solarock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solarock/subscriptions", "organizations_url": "https://api.github.com/users/solarock/orgs", "repos_url": "https://api.github.com/users/solarock/repos", "events_url": "https://api.github.com/users/solarock/events{/privacy}", "received_events_url": "https://api.github.com/users/solarock/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solarock", "id": 109078, "node_id": "MDQ6VXNlcjEwOTA3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/109078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solarock", "html_url": "https://github.com/solarock", "followers_url": "https://api.github.com/users/solarock/followers", "following_url": "https://api.github.com/users/solarock/following{/other_user}", "gists_url": "https://api.github.com/users/solarock/gists{/gist_id}", "starred_url": "https://api.github.com/users/solarock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solarock/subscriptions", "organizations_url": "https://api.github.com/users/solarock/orgs", "repos_url": "https://api.github.com/users/solarock/repos", "events_url": "https://api.github.com/users/solarock/events{/privacy}", "received_events_url": "https://api.github.com/users/solarock/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12f55e030ed068d5c7b14c65a74d102db925dab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f55e030ed068d5c7b14c65a74d102db925dab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f55e030ed068d5c7b14c65a74d102db925dab2"}], "stats": {"total": 614, "additions": 609, "deletions": 5}, "files": [{"sha": "ffd4679e4ed2fa2edb1f13641bb8535467806e87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -1,3 +1,33 @@\n+2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n+\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/arm/arm-builtins.c (CX_IMM_QUALIFIERS): New macro.\n+\t(CX_UNARY_QUALIFIERS, CX_BINARY_QUALIFIERS): Likewise.\n+\t(CX_TERNARY_QUALIFIERS): Likewise.\n+\t(ARM_BUILTIN_CDE_PATTERN_START): Likewise.\n+\t(ARM_BUILTIN_CDE_PATTERN_END): Likewise.\n+\t(arm_init_acle_builtins): Initialize CDE builtins.\n+\t(arm_expand_acle_builtin): Check CDE constant operands.\n+\t* config/arm/arm.h (ARM_CDE_CONST_COPROC): New macro to set the range\n+\tof CDE constant operand.\n+\t* config/arm/arm.c (arm_hard_regno_mode_ok): Support DImode for\n+\tTARGET_VFP_BASE.\n+\t(ARM_VCDE_CONST_1, ARM_VCDE_CONST_2, ARM_VCDE_CONST_3): Likewise.\n+\t* config/arm/arm_cde.h (__arm_vcx1_u32): New macro of ACLE interface.\n+\t(__arm_vcx1a_u32, __arm_vcx2_u32, __arm_vcx2a_u32): Likewise.\n+\t(__arm_vcx3_u32, __arm_vcx3a_u32, __arm_vcx1d_u64): Likewise.\n+\t(__arm_vcx1da_u64, __arm_vcx2d_u64, __arm_vcx2da_u64): Likewise.\n+\t(__arm_vcx3d_u64, __arm_vcx3da_u64): Likewise.\n+\t* config/arm/arm_cde_builtins.def: New file.\n+\t* config/arm/iterators.md (V_reg): New attribute of SI.\n+\t* config/arm/predicates.md (const_int_coproc_operand): New.\n+\t(const_int_vcde1_operand, const_int_vcde2_operand): New.\n+\t(const_int_vcde3_operand): New.\n+\t* config/arm/unspecs.md (UNSPEC_VCDE, UNSPEC_VCDEA): New.\n+\t* config/arm/vfp.md (arm_vcx1<mode>): New entry.\n+\t(arm_vcx1a<mode>, arm_vcx2<mode>, arm_vcx2a<mode>): Likewise.\n+\t(arm_vcx3<mode>, arm_vcx3a<mode>): Likewise.\n+\n 2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* config.gcc: Add arm_cde.h."}, {"sha": "a8bad7b1ae5a102616656cf4cf35a6c570fbe349", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 96, "deletions": 3, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -305,6 +305,35 @@ arm_mrrc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define MRRC_QUALIFIERS \\\n   (arm_mrrc_qualifiers)\n \n+/* T (immediate, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_cx_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_immediate, qualifier_unsigned_immediate };\n+#define CX_IMM_QUALIFIERS (arm_cx_imm_qualifiers)\n+\n+/* T (immediate, T, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_cx_unary_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_immediate, qualifier_none,\n+      qualifier_unsigned_immediate };\n+#define CX_UNARY_QUALIFIERS (arm_cx_unary_qualifiers)\n+\n+/* T (immediate, T, T, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_cx_binary_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_immediate,\n+      qualifier_none, qualifier_none,\n+      qualifier_unsigned_immediate };\n+#define CX_BINARY_QUALIFIERS (arm_cx_binary_qualifiers)\n+\n+/* T (immediate, T, T, T, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_cx_ternary_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_immediate,\n+      qualifier_none, qualifier_none, qualifier_none,\n+      qualifier_unsigned_immediate };\n+#define CX_TERNARY_QUALIFIERS (arm_cx_ternary_qualifiers)\n+\n /* The first argument (return type) of a store should be void type,\n    which we represent with qualifier_void.  Their first operand will be\n    a DImode pointer to the location to store to, so we must use\n@@ -928,7 +957,23 @@ static arm_builtin_datum acle_builtin_data[] =\n };\n \n #undef VAR1\n+/* IMM_MAX sets the maximum valid value of the CDE immediate operand.\n+   ECF_FLAG sets the flag used for set_call_expr_flags.  */\n+#define VAR1(T, N, A, IMM_MAX, ECF_FLAG) \\\n+  {{#N #A, UP (A), CODE_FOR_arm_##N##A, 0, T##_QUALIFIERS}, IMM_MAX, ECF_FLAG},\n+\n+typedef struct {\n+  arm_builtin_datum base;\n+  unsigned int imm_max;\n+  int ecf_flag;\n+} arm_builtin_cde_datum;\n+\n+static arm_builtin_cde_datum cde_builtin_data[] =\n+{\n+#include \"arm_cde_builtins.def\"\n+};\n \n+#undef VAR1\n #define VAR1(T, N, X) \\\n   ARM_BUILTIN_NEON_##N##X,\n \n@@ -1224,6 +1269,14 @@ enum arm_builtins\n \n #include \"arm_acle_builtins.def\"\n \n+#undef VAR1\n+#define VAR1(T, N, X, ... ) \\\n+  ARM_BUILTIN_##N##X,\n+\n+  ARM_BUILTIN_CDE_BASE,\n+\n+#include \"arm_cde_builtins.def\"\n+\n   ARM_BUILTIN_MVE_BASE,\n \n #undef VAR1\n@@ -1246,6 +1299,12 @@ enum arm_builtins\n #define ARM_BUILTIN_ACLE_PATTERN_START \\\n   (ARM_BUILTIN_ACLE_BASE + 1)\n \n+#define ARM_BUILTIN_CDE_PATTERN_START \\\n+  (ARM_BUILTIN_CDE_BASE + 1)\n+\n+#define ARM_BUILTIN_CDE_PATTERN_END \\\n+  (ARM_BUILTIN_CDE_BASE + ARRAY_SIZE (cde_builtin_data))\n+\n #undef CF\n #undef VAR1\n #undef VAR2\n@@ -1774,6 +1833,15 @@ arm_init_acle_builtins (void)\n       arm_builtin_datum *d = &acle_builtin_data[i];\n       arm_init_builtin (fcode, d, \"__builtin_arm\");\n     }\n+\n+  fcode = ARM_BUILTIN_CDE_PATTERN_START;\n+  for (i = 0; i < ARRAY_SIZE (cde_builtin_data); i++, fcode++)\n+    {\n+      arm_builtin_cde_datum *cde = &cde_builtin_data[i];\n+      arm_builtin_datum *d = &cde->base;\n+      arm_init_builtin (fcode, d, \"__builtin_arm\");\n+      set_call_expr_flags (arm_builtin_decls[fcode], cde->ecf_flag);\n+    }\n }\n \n /* Set up all the MVE builtins mentioned in arm_mve_builtins.def file.  */\n@@ -2966,8 +3034,29 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n \t      if (!(*insn_data[icode].operand[opno].predicate)\n \t\t  (op[argc], mode[argc]))\n \t\t{\n-\t\t  error (\"%Kargument %d must be a constant immediate\",\n-\t\t\t exp, argc + 1);\n+\t\t  if (IN_RANGE (fcode, ARM_BUILTIN_CDE_PATTERN_START,\n+\t\t\t\tARM_BUILTIN_CDE_PATTERN_END))\n+\t\t    {\n+\t\t      if (argc == 0)\n+\t\t\t{\n+\t\t\t  unsigned int cp_bit = UINTVAL (op[argc]);\n+\t\t\t  if (IN_RANGE (cp_bit, 0, ARM_CDE_CONST_COPROC))\n+\t\t\t    error (\"%Kcoprocessor %d is not enabled \"\n+\t\t\t\t   \"with +cdecp%d\", exp, cp_bit, cp_bit);\n+\t\t\t  else\n+\t\t\t    error (\"%Kcoproc must be a constant immediate in \"\n+\t\t\t\t   \"range [0-%d] enabled with +cdecp<N>\", exp,\n+\t\t\t\t   ARM_CDE_CONST_COPROC);\n+\t\t\t}\n+\t\t      else\n+\t\t\terror (\"%Kargument %d must be a constant immediate \"\n+\t\t\t       \"in range [0-%d]\", exp, argc + 1,\n+\t\t\t       cde_builtin_data[fcode -\n+\t\t\t       ARM_BUILTIN_CDE_PATTERN_START].imm_max);\n+\t\t    }\n+\t\t  else\n+\t\t    error (\"%Kargument %d must be a constant immediate\",\n+\t\t\t   exp, argc + 1);\n \t\t  /* We have failed to expand the pattern, and are safely\n \t\t     in to invalid code.  But the mid-end will still try to\n \t\t     build an assignment for this node while it expands,\n@@ -3192,8 +3281,12 @@ arm_expand_acle_builtin (int fcode, tree exp, rtx target)\n       /* Don't generate any RTL.  */\n       return const0_rtx;\n     }\n+\n+  gcc_assert (fcode != ARM_BUILTIN_CDE_BASE);\n   arm_builtin_datum *d\n-    = &acle_builtin_data[fcode - ARM_BUILTIN_ACLE_PATTERN_START];\n+    = (fcode < ARM_BUILTIN_CDE_BASE)\n+      ? &acle_builtin_data[fcode - ARM_BUILTIN_ACLE_PATTERN_START]\n+      : &cde_builtin_data[fcode - ARM_BUILTIN_CDE_PATTERN_START].base;\n \n   return arm_expand_builtin_1 (fcode, exp, target, d);\n }"}, {"sha": "4dada07c5885f0aa22da2c76c195c7b37fc086d3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -25013,7 +25013,7 @@ arm_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \n   if (TARGET_VFP_BASE && IS_VFP_REGNUM (regno))\n     {\n-      if (mode == DFmode)\n+      if (mode == DFmode || mode == DImode)\n \treturn VFP_REGNO_OK_FOR_DOUBLE (regno);\n \n       if (mode == HFmode || mode == BFmode || mode == HImode"}, {"sha": "ca36a74cd1fa161c388961588fa0f96030b7888e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -575,6 +575,10 @@ extern int arm_arch_bf16;\n extern int arm_arch_cde;\n extern int arm_arch_cde_coproc;\n extern const int arm_arch_cde_coproc_bits[];\n+#define ARM_CDE_CONST_COPROC\t7\n+#define ARM_VCDE_CONST_1\t((1 << 11) - 1)\n+#define ARM_VCDE_CONST_2\t((1 << 6 ) - 1)\n+#define ARM_VCDE_CONST_3\t((1 << 3 ) - 1)\n \n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT  (MASK_APCS_FRAME)"}, {"sha": "4c9f7ebeed4e2abf532f53040f5891da8b1aadac", "filename": "gcc/config/arm/arm_cde.h", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Farm_cde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Farm_cde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_cde.h?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -33,6 +33,77 @@ extern \"C\" {\n \n #include <stdint.h>\n \n+#if defined (__ARM_FEATURE_CDE)\n+\n+#if defined (__ARM_FP) || defined (__ARM_FEATURE_MVE)\n+\n+/* CDE builtins using FPU/MVE registers.  */\n+\n+/* uint32_t\n+   __arm_vcx1_u32(int coproc, uint32_t imm);  */\n+#define __arm_vcx1_u32(coproc, imm) \\\n+\t__builtin_arm_vcx1si(coproc, imm)\n+\n+/* uint32_t\n+   __arm_vcx1a_u32(int coproc, uint32_t acc, uint32_t imm);  */\n+#define __arm_vcx1a_u32(coproc, acc, imm) \\\n+\t__builtin_arm_vcx1asi(coproc, acc, imm)\n+\n+/* uint32_t\n+   __arm_vcx2_u32(int coproc, uint32_t n, uint32_t imm);  */\n+#define __arm_vcx2_u32(coproc, n, imm) \\\n+\t__builtin_arm_vcx2si(coproc, n, imm)\n+\n+/* uint32_t\n+   __arm_vcx2a_u32(int coproc, uint32_t acc, uint32_t n, uint32_t imm);  */\n+#define __arm_vcx2a_u32(coproc, acc, n, imm) \\\n+\t__builtin_arm_vcx2asi(coproc, acc, n, imm)\n+\n+/* uint32_t\n+   __arm_vcx3_u32(int coproc, uint32_t n, uint32_t m, uint32_t imm);  */\n+#define __arm_vcx3_u32(coproc, n, m, imm) \\\n+\t__builtin_arm_vcx3si(coproc, n, m, imm)\n+\n+/* uint32_t\n+   __arm_vcx3a_u32(int coproc, uint32_t acc, uint32_t n, uint32_t m,\n+\t\t   uint32_t imm);  */\n+#define __arm_vcx3a_u32(coproc, acc, n, m, imm) \\\n+\t__builtin_arm_vcx3asi(coproc, acc, n, m, imm)\n+\n+/* uint64_t\n+   __arm_vcx1d_u64(int coproc, uint32_t imm);  */\n+#define __arm_vcx1d_u64(coproc, imm) \\\n+\t__builtin_arm_vcx1di(coproc, imm)\n+\n+/* uint64_t\n+   __arm_vcx1da_u64(int coproc, uint64_t acc, uint32_t imm);  */\n+#define __arm_vcx1da_u64(coproc, acc, imm) \\\n+\t__builtin_arm_vcx1adi(coproc, acc, imm)\n+\n+/* uint64_t\n+   __arm_vcx2d_u64(int coproc, uint64_t m, uint32_t imm);  */\n+#define __arm_vcx2d_u64(coproc, m, imm) \\\n+\t__builtin_arm_vcx2di(coproc, m, imm)\n+\n+/* uint64_t\n+   __arm_vcx2da_u64(int coproc, uint64_t acc, uint64_t m, uint32_t imm);  */\n+#define __arm_vcx2da_u64(coproc, acc, m, imm) \\\n+\t__builtin_arm_vcx2adi(coproc, acc, m, imm)\n+\n+/* uint64_t\n+   __arm_vcx3d_u64(int coproc, uint64_t n, uint64_t m, uint32_t imm);  */\n+#define __arm_vcx3d_u64(coproc, n, m, imm) \\\n+\t__builtin_arm_vcx3di(coproc, n, m, imm)\n+\n+/* uint64_t\n+   __arm_vcx3da_u64(int coproc, uint64_t acc, uint64_t n, uint64_t m,\n+\t\t    uint32_t imm);  */\n+#define __arm_vcx3da_u64(coproc, acc, n, m, imm) \\\n+\t__builtin_arm_vcx3adi(coproc, acc, n, m, imm)\n+\n+#endif /* __ARM_FP || __ARM_FEATURE_MVE.  */\n+#endif /* __ARM_FEATURE_CDE.  */\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "a9fea937b9650f21a26d8183572b550e39b0fe7d", "filename": "gcc/config/arm/arm_cde_builtins.def", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -0,0 +1,33 @@\n+/* Arm Custom Datapath Extension (CDE) builtin definitions.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+   Contributed by Arm Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef CDE_VAR2\n+#define CDE_VAR2(T, N, A, B, IMM_MAX, ECF_FLAG) \\\n+  VAR1 (T, N, A, IMM_MAX, ECF_FLAG) \\\n+  VAR1 (T, N, B, IMM_MAX, ECF_FLAG)\n+\n+CDE_VAR2 (CX_IMM, vcx1, si, di, ARM_VCDE_CONST_1, ECF_CONST)\n+CDE_VAR2 (CX_UNARY, vcx1a, si, di, ARM_VCDE_CONST_1, ECF_CONST)\n+CDE_VAR2 (CX_UNARY, vcx2, si, di, ARM_VCDE_CONST_2, ECF_CONST)\n+CDE_VAR2 (CX_BINARY, vcx2a, si, di, ARM_VCDE_CONST_2, ECF_CONST)\n+CDE_VAR2 (CX_BINARY, vcx3, si, di, ARM_VCDE_CONST_3, ECF_CONST)\n+CDE_VAR2 (CX_TERNARY, vcx3a, si, di, ARM_VCDE_CONST_3, ECF_CONST)\n+\n+#undef CDE_VAR2"}, {"sha": "c94198772f27dfda62886fecd37393960456c3c0", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -632,7 +632,7 @@\n \t\t\t (V2SI \"P\") (V4SI  \"q\")\n \t\t\t (V2SF \"P\") (V4SF  \"q\")\n \t\t\t (DI   \"P\") (V2DI  \"q\")\n-\t\t\t (V2HF \"\") (SF   \"\")\n+\t\t\t (V2HF \"\") (SF   \"\") (SI \"\")\n \t\t\t (DF    \"P\") (HF   \"\")])\n \n ;; Output template to select the high VFP register of a mult-register value."}, {"sha": "59cf5b67f8a0a8ac56a664711090d682a5a93ad5", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -226,6 +226,23 @@\n   (and (match_operand 0 \"const_int_operand\")\n        (match_test \"satisfies_constraint_M (op)\")))\n \n+(define_predicate \"const_int_coproc_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_CDE_CONST_COPROC)\")\n+       (match_test \"arm_arch_cde_coproc_bits[UINTVAL (op)] & arm_arch_cde_coproc\")))\n+\n+(define_predicate \"const_int_vcde1_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_VCDE_CONST_1)\")))\n+\n+(define_predicate \"const_int_vcde2_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_VCDE_CONST_2)\")))\n+\n+(define_predicate \"const_int_vcde3_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_VCDE_CONST_3)\")))\n+\n ;; This doesn't have to do much because the constant is already checked\n ;; in the shift_operator predicate.\n (define_predicate \"shift_amount_operand\""}, {"sha": "1645c32dfb2a43dde6ee947637edbca2df8f2309", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -154,6 +154,8 @@\n   UNSPEC_SMUADX\t\t; Represent the SMUADX operation.\n   UNSPEC_SSAT16\t\t; Represent the SSAT16 operation.\n   UNSPEC_USAT16\t\t; Represent the USAT16 operation.\n+  UNSPEC_VCDE\t\t; Custom Datapath Extension instruction.\n+  UNSPEC_VCDEA\t\t; Custom Datapath Extension instruction.\n ])\n \n "}, {"sha": "ef83b504ff6b3e6cec4c2c81b7bf97785f4a5492", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -2165,3 +2165,74 @@\n   DONE;\n }\n )\n+\n+;; CDE instructions using FPU/MVE S/D registers\n+\n+(define_insn \"arm_vcx1<mode>\"\n+  [(set (match_operand:SIDI 0 \"register_operand\" \"=t\")\n+\t(unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t      (match_operand:SI 2 \"const_int_vcde1_operand\" \"i\")]\n+\t UNSPEC_VCDE))]\n+  \"TARGET_CDE && (TARGET_ARM_FP || TARGET_HAVE_MVE)\"\n+  \"vcx1\\\\tp%c1, %<V_reg>0, #%c2\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_vcx1a<mode>\"\n+  [(set (match_operand:SIDI 0 \"register_operand\" \"=t\")\n+\t(unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t      (match_operand:SIDI 2 \"register_operand\" \"0\")\n+\t\t      (match_operand:SI 3 \"const_int_vcde1_operand\" \"i\")]\n+\t UNSPEC_VCDEA))]\n+  \"TARGET_CDE && (TARGET_ARM_FP || TARGET_HAVE_MVE)\"\n+  \"vcx1a\\\\tp%c1, %<V_reg>0, #%c3\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_vcx2<mode>\"\n+  [(set (match_operand:SIDI 0 \"register_operand\" \"=t\")\n+\t(unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t      (match_operand:SIDI 2 \"register_operand\" \"t\")\n+\t\t      (match_operand:SI 3 \"const_int_vcde2_operand\" \"i\")]\n+\t UNSPEC_VCDE))]\n+  \"TARGET_CDE && (TARGET_ARM_FP || TARGET_HAVE_MVE)\"\n+  \"vcx2\\\\tp%c1, %<V_reg>0, %<V_reg>2, #%c3\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_vcx2a<mode>\"\n+  [(set (match_operand:SIDI 0 \"register_operand\" \"=t\")\n+\t(unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t      (match_operand:SIDI 2 \"register_operand\" \"0\")\n+\t\t      (match_operand:SIDI 3 \"register_operand\" \"t\")\n+\t\t      (match_operand:SI 4 \"const_int_vcde2_operand\" \"i\")]\n+\t UNSPEC_VCDEA))]\n+  \"TARGET_CDE && (TARGET_ARM_FP || TARGET_HAVE_MVE)\"\n+  \"vcx2a\\\\tp%c1, %<V_reg>0, %<V_reg>3, #%c4\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_vcx3<mode>\"\n+  [(set (match_operand:SIDI 0 \"register_operand\" \"=t\")\n+\t(unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t      (match_operand:SIDI 2 \"register_operand\" \"t\")\n+\t\t      (match_operand:SIDI 3 \"register_operand\" \"t\")\n+\t\t      (match_operand:SI 4 \"const_int_vcde3_operand\" \"i\")]\n+\t UNSPEC_VCDE))]\n+  \"TARGET_CDE && (TARGET_ARM_FP || TARGET_HAVE_MVE)\"\n+  \"vcx3\\\\tp%c1, %<V_reg>0, %<V_reg>2, %<V_reg>3, #%c4\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_vcx3a<mode>\"\n+  [(set (match_operand:SIDI 0 \"register_operand\" \"=t\")\n+\t(unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t      (match_operand:SIDI 2 \"register_operand\" \"0\")\n+\t\t      (match_operand:SIDI 3 \"register_operand\" \"t\")\n+\t\t      (match_operand:SIDI 4 \"register_operand\" \"t\")\n+\t\t      (match_operand:SI 5 \"const_int_vcde3_operand\" \"i\")]\n+\t UNSPEC_VCDEA))]\n+  \"TARGET_CDE && (TARGET_ARM_FP || TARGET_HAVE_MVE)\"\n+  \"vcx3a\\\\tp%c1, %<V_reg>0, %<V_reg>3, %<V_reg>4, #%c5\"\n+  [(set_attr \"type\" \"coproc\")]\n+)"}, {"sha": "9b2d1f6272105651aa7daa289ba3877877e1e507", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -1,3 +1,9 @@\n+2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/arm/acle/cde_v_1.c: New test.\n+\t* gcc.target/arm/acle/cde_v_1_err.c: New test.\n+\t* gcc.target/arm/acle/cde_v_1_mve.c: New test.\n+\n 2020-04-08  Patrick Palka  <ppalka@redhat.com>\n \n \tCore issues 1001 and 1322"}, {"sha": "3104db4ae608365667f4b617c5a4d58c90f5f5aa", "filename": "gcc/testsuite/gcc.target/arm/acle/cde_v_1.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1.c?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -0,0 +1,94 @@\n+/* Test the CDE ACLE intrinsic.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8m_main_cde_fp_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_v8m_main_cde_fp } */\n+\n+#include \"arm_cde.h\"\n+\n+#define TEST0(T, N, C, I) \\\n+T test_arm_##N##_##C##_##I () { \\\n+  return __arm_##N (C, I); \\\n+}\n+\n+#define TEST1(T, N, C, I) \\\n+T test_arm_##N##_##C##_##I (T a) { \\\n+  return __arm_##N (C, a, I); \\\n+}\n+\n+#define TEST2(T, N, C, I) \\\n+T test_arm_##N##_##C##_##I (T a) { \\\n+  return __arm_##N (C, a, a, I); \\\n+}\n+\n+#define TEST3(T, N, C, I) \\\n+T test_arm_##N##_##C##_##I (T a) { \\\n+  return __arm_##N (C, a, a, a, I); \\\n+}\n+\n+#define TEST_ALL(C) \\\n+TEST0 (uint32_t, vcx1_u32,\tC, 0) \\\n+TEST1 (uint32_t, vcx1a_u32,\tC, 0) \\\n+TEST1 (uint32_t, vcx2_u32,\tC, 0) \\\n+TEST2 (uint32_t, vcx2a_u32,\tC, 0) \\\n+TEST2 (uint32_t, vcx3_u32,\tC, 0) \\\n+TEST3 (uint32_t, vcx3a_u32,\tC, 0) \\\n+TEST0 (uint64_t, vcx1d_u64,\tC, 0) \\\n+TEST1 (uint64_t, vcx1da_u64,\tC, 0) \\\n+TEST1 (uint64_t, vcx2d_u64,\tC, 0) \\\n+TEST2 (uint64_t, vcx2da_u64,\tC, 0) \\\n+TEST2 (uint64_t, vcx3d_u64,\tC, 0) \\\n+TEST3 (uint64_t, vcx3da_u64,\tC, 0) \\\n+TEST0 (uint32_t, vcx1_u32,\tC, 2047) \\\n+TEST1 (uint32_t, vcx1a_u32,\tC, 2047) \\\n+TEST1 (uint32_t, vcx2_u32,\tC, 63) \\\n+TEST2 (uint32_t, vcx2a_u32,\tC, 63) \\\n+TEST2 (uint32_t, vcx3_u32,\tC, 7) \\\n+TEST3 (uint32_t, vcx3a_u32,\tC, 7) \\\n+TEST0 (uint64_t, vcx1d_u64,\tC, 2047) \\\n+TEST1 (uint64_t, vcx1da_u64,\tC, 2047) \\\n+TEST1 (uint64_t, vcx2d_u64,\tC, 63) \\\n+TEST2 (uint64_t, vcx2da_u64,\tC, 63) \\\n+TEST2 (uint64_t, vcx3d_u64,\tC, 7) \\\n+TEST3 (uint64_t, vcx3da_u64,\tC, 7)\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp0+fp\")\n+TEST_ALL (0)\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp1+fp\")\n+TEST_ALL (1)\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp2+cdecp3+cdecp4+cdecp5+cdecp6+cdecp7+fp\")\n+TEST_ALL (2)\n+TEST_ALL (3)\n+TEST_ALL (4)\n+TEST_ALL (5)\n+TEST_ALL (6)\n+TEST_ALL (7)\n+#pragma GCC pop_options\n+\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp0, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp1, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp2, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp3, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp4, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp5, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp6, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp7, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp[0-7], s[0-9]+, #2047} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1a\\tp[0-7], s[0-9]+, #[0,2047]} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx2\\tp[0-7], s[0-9]+, s[0-9]+, #[0,63]} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx2a\\tp[0-7], s[0-9]+, s[0-9]+, #[0,63]} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx3\\tp[0-7], s[0-9]+, s[0-9]+, s[0-9]+, #[0,7]} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx3a\\tp[0-7], s[0-9]+, s[0-9]+, s[0-9]+, #[0,7]} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp[0-7], d[0-9]+, #[0,2047]} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1a\\tp[0-7], d[0-9]+, #[0,2047]} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx2\\tp[0-7], d[0-9]+, d[0-9]+, #[0,63]} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx2a\\tp[0-7], d[0-9]+, d[0-9]+, #[0,63]} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx3\\tp[0-7], d[0-9]+, d[0-9]+, d[0-9]+, #[0,7]} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx3a\\tp[0-7], d[0-9]+, d[0-9]+, d[0-9]+, #[0,7]} 16 } } */"}, {"sha": "023fab4ef9bf46dbf630d4698c2a0570bd2e4d14", "filename": "gcc/testsuite/gcc.target/arm/acle/cde_v_1_err.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1_err.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1_err.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1_err.c?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -0,0 +1,127 @@\n+/* Test the CDE ACLE intrinsic.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8m_main_cde_fp_ok } */\n+/* { dg-add-options arm_v8m_main_cde_fp } */\n+\n+#include \"arm_cde.h\"\n+\n+uint64_t test_coproc_range (uint32_t a, uint64_t b)\n+{\n+  uint64_t res = 0;\n+  res += __arm_vcx1_u32 (8, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx1a_u32 (8, a, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx2_u32 (8, a, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx2a_u32 (8, a, a, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx3_u32 (8, a, a, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx3a_u32 (8, a, a, a, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx1d_u64 (8, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx1da_u64 (8, a, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx2d_u64 (8, a, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx2da_u64 (8, a, a, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx3d_u64 (8, a, a, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx3da_u64 (8, a, a, a, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\]} } */\n+  return res;\n+}\n+\n+uint64_t test_imm_range (uint32_t a, uint64_t b)\n+{\n+  uint64_t res = 0;\n+  res += __arm_vcx1_u32 (0, 2048); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-2047\\]} } */\n+  res += __arm_vcx1a_u32 (0, a, 2048); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-2047\\]} } */\n+  res += __arm_vcx2_u32 (0, a, 64); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-63\\]} } */\n+  res += __arm_vcx2a_u32 (0, a, a, 64); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-63\\]} } */\n+  res += __arm_vcx3_u32 (0, a, a, 8); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx3a_u32 (0, a, a, a, 8); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx1d_u64 (0, 2048); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-2047\\]} } */\n+  res += __arm_vcx1da_u64 (0, a, 2048); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-2047\\]} } */\n+  res += __arm_vcx2d_u64 (0, a, 64); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-63\\]} } */\n+  res += __arm_vcx2da_u64 (0, a, a, 64); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-63\\]} } */\n+  res += __arm_vcx3d_u64 (0, a, a, 8); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx3da_u64 (0, a, a, a, 8); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-7\\]} } */\n+  return res;\n+}\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp1+fp\")\n+uint64_t test_coproc_match_1 (uint32_t a, uint64_t b)\n+{\n+  uint64_t res = 0;\n+  res += __arm_vcx1_u32 (0, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx1a_u32 (0, a, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx2_u32 (0, a, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx2a_u32 (0, a, a, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx3_u32 (0, a, a, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx3a_u32 (0, a, a, a, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx1d_u64 (0, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx1da_u64 (0, a, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx2d_u64 (0, a, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx2da_u64 (0, a, a, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx3d_u64 (0, a, a, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  res += __arm_vcx3da_u64 (0, a, a, a, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+  return res;\n+}\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp2+fp\")\n+uint32_t test_coproc_match_2 ()\n+{\n+  return __arm_vcx1_u32 (0, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+}\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp3+fp\")\n+uint32_t test_coproc_match_3 ()\n+{\n+  return __arm_vcx1_u32 (0, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+}\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp4+fp\")\n+uint32_t test_coproc_match_4 ()\n+{\n+  return __arm_vcx1_u32 (0, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+}\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp5+fp\")\n+uint32_t test_coproc_match_5 ()\n+{\n+  return __arm_vcx1_u32 (0, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+}\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp6+fp\")\n+uint32_t test_coproc_match_6 ()\n+{\n+  return __arm_vcx1_u32 (0, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+}\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp7+fp\")\n+uint32_t test_coproc_match_7 ()\n+{\n+  return __arm_vcx1_u32 (0, 0); /* { dg-error {coprocessor 0 is not enabled with \\+cdecp0} } */\n+}\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp0+fp\")\n+uint32_t test_coproc_match_0 ()\n+{\n+  uint64_t res = 0;\n+  res += __arm_vcx1_u32 (1, 0); /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  res += __arm_vcx1_u32 (2, 0); /* { dg-error {coprocessor 2 is not enabled with \\+cdecp2} } */\n+  res += __arm_vcx1_u32 (3, 0); /* { dg-error {coprocessor 3 is not enabled with \\+cdecp3} } */\n+  res += __arm_vcx1_u32 (4, 0); /* { dg-error {coprocessor 4 is not enabled with \\+cdecp4} } */\n+  res += __arm_vcx1_u32 (5, 0); /* { dg-error {coprocessor 5 is not enabled with \\+cdecp5} } */\n+  res += __arm_vcx1_u32 (6, 0); /* { dg-error {coprocessor 6 is not enabled with \\+cdecp6} } */\n+  res += __arm_vcx1_u32 (7, 0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  return res;\n+}\n+#pragma GCC pop_options"}, {"sha": "5140c3f521a628c4ccc4ca670876a0b0468efa37", "filename": "gcc/testsuite/gcc.target/arm/acle/cde_v_1_mve.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1_mve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1_mve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1_mve.c?ref=07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "patch": "@@ -0,0 +1,56 @@\n+/* Test the CDE ACLE intrinsic.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_1m_main_cde_mve_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_v8_1m_main_cde_mve } */\n+\n+#include \"arm_cde.h\"\n+\n+#define TEST0(T, N, C, I) \\\n+T test_arm_##N##_##C##_##I () { \\\n+  return __arm_##N (C, I); \\\n+}\n+\n+#define TEST1(T, N, C, I) \\\n+T test_arm_##N##_##C##_##I (T a) { \\\n+  return __arm_##N (C, a, I); \\\n+}\n+\n+#define TEST2(T, N, C, I) \\\n+T test_arm_##N##_##C##_##I (T a) { \\\n+  return __arm_##N (C, a, a, I); \\\n+}\n+\n+#define TEST3(T, N, C, I) \\\n+T test_arm_##N##_##C##_##I (T a) { \\\n+  return __arm_##N (C, a, a, a, I); \\\n+}\n+\n+#define TEST_ALL(C) \\\n+TEST0 (uint32_t, vcx1_u32,\tC, 0) \\\n+TEST1 (uint32_t, vcx1a_u32,\tC, 0) \\\n+TEST1 (uint32_t, vcx2_u32,\tC, 0) \\\n+TEST2 (uint32_t, vcx2a_u32,\tC, 0) \\\n+TEST2 (uint32_t, vcx3_u32,\tC, 0) \\\n+TEST3 (uint32_t, vcx3a_u32,\tC, 0) \\\n+TEST0 (uint64_t, vcx1d_u64,\tC, 0) \\\n+TEST1 (uint64_t, vcx1da_u64,\tC, 0) \\\n+TEST1 (uint64_t, vcx2d_u64,\tC, 0) \\\n+TEST2 (uint64_t, vcx2da_u64,\tC, 0) \\\n+TEST2 (uint64_t, vcx3d_u64,\tC, 0) \\\n+TEST3 (uint64_t, vcx3da_u64,\tC, 0)\n+\n+TEST_ALL (0)\n+\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp0, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1a\\tp0, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx2\\tp0, s[0-9]+, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx2a\\tp0, s[0-9]+, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx3\\tp0, s[0-9]+, s[0-9]+, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx3a\\tp0, s[0-9]+, s[0-9]+, s[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1\\tp0, d[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx1a\\tp0, d[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx2\\tp0, d[0-9]+, d[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx2a\\tp0, d[0-9]+, d[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx3\\tp0, d[0-9]+, d[0-9]+, d[0-9]+, #0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcx3a\\tp0, d[0-9]+, d[0-9]+, d[0-9]+, #0} 1 } } */"}]}