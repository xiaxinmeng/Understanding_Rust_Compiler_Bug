{"sha": "852dcbdd7834df145afa036f5d591da9429ec88a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyZGNiZGQ3ODM0ZGYxNDVhZmEwMzZmNWQ1OTFkYTk0MjllYzg4YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-31T17:58:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-31T17:58:53Z"}, "message": "class.c: Fix comment typos.\n\n\t* class.c: Fix comment typos.\n\t* decl.c: Likewise.\n\t* error.c: Likewise.\n\t* parser.c: Likewise.\n\t* pt.c: Likewise.\n\t* search.c: Likewise.\n\t* typeck.c: Likewise.\n\nFrom-SVN: r77045", "tree": {"sha": "6dc49a41a27558e4d5eacfb8dab7380f1ad76f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc49a41a27558e4d5eacfb8dab7380f1ad76f12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/852dcbdd7834df145afa036f5d591da9429ec88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852dcbdd7834df145afa036f5d591da9429ec88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852dcbdd7834df145afa036f5d591da9429ec88a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852dcbdd7834df145afa036f5d591da9429ec88a/comments", "author": null, "committer": null, "parents": [{"sha": "8de63ee0d7b3402ba05ec9ab283f287cc38f68fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de63ee0d7b3402ba05ec9ab283f287cc38f68fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de63ee0d7b3402ba05ec9ab283f287cc38f68fe"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "aafbcb04f7ebd32f757688968cf5db4f7275e79c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=852dcbdd7834df145afa036f5d591da9429ec88a", "patch": "@@ -1,3 +1,13 @@\n+2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* class.c: Fix comment typos.\n+\t* decl.c: Likewise.\n+\t* error.c: Likewise.\n+\t* parser.c: Likewise.\n+\t* pt.c: Likewise.\n+\t* search.c: Likewise.\n+\t* typeck.c: Likewise.\n+\n 2004-01-30  Richard Henderson  <rth@redhat.com>\n \n         PR c++/13693"}, {"sha": "23ca83d56db0ae8dfa3921ed5fdc2cdcc1a9c76a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=852dcbdd7834df145afa036f5d591da9429ec88a", "patch": "@@ -1197,7 +1197,7 @@ handle_using_decl (tree using_decl, tree t)\n     alter_access (t, fdecl, access);\n }\n \f\n-/* Run through the base clases of T, updating\n+/* Run through the base classes of T, updating\n    CANT_HAVE_DEFAULT_CTOR_P, CANT_HAVE_CONST_CTOR_P, and\n    NO_CONST_ASN_REF_P.  Also set flag bits in T based on properties of\n    the bases.  */"}, {"sha": "a9e0316c01dc4f4738702cdb50541803507fa21a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=852dcbdd7834df145afa036f5d591da9429ec88a", "patch": "@@ -6008,7 +6008,7 @@ check_static_variable_definition (tree decl, tree type)\n       error (\"invalid in-class initialization of static data member of non-integral type `%T'\",\n \t     type);\n       /* If we just return the declaration, crashes will sometimes\n-\t occur.  We therefore return void_type_node, as if this was a\n+\t occur.  We therefore return void_type_node, as if this were a\n \t friend declaration, to cause callers to completely ignore\n \t this declaration.  */\n       return 1;"}, {"sha": "796052e46847816300c6baeef788ee9328593fa4", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=852dcbdd7834df145afa036f5d591da9429ec88a", "patch": "@@ -941,7 +941,7 @@ dump_decl (tree t, int flags)\n \n     default:\n       pp_unsupported_tree (cxx_pp, t);\n-      /* Fallthrough to error.  */\n+      /* Fall through to error.  */\n \n     case ERROR_MARK:\n       pp_identifier (cxx_pp, \"<declaration error>\");"}, {"sha": "1348b5095e32efa76d840b8d41cbae05b7d54865", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=852dcbdd7834df145afa036f5d591da9429ec88a", "patch": "@@ -1065,7 +1065,7 @@ typedef enum cp_parser_flags\n \n typedef enum cp_parser_declarator_kind\n {\n-  /* We want an abstract declartor.  */\n+  /* We want an abstract declarator.  */\n   CP_PARSER_DECLARATOR_ABSTRACT,\n   /* We want a named declarator.  */\n   CP_PARSER_DECLARATOR_NAMED,\n@@ -12791,7 +12791,7 @@ cp_parser_base_specifier (cp_parser* parser)\n \t  break;\n \t}\n     }\n-  /* It is not uncommon to see programs mechanically, errouneously, use\n+  /* It is not uncommon to see programs mechanically, erroneously, use\n      the 'typename' keyword to denote (dependent) qualified types\n      as base classes.  */\n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TYPENAME))\n@@ -15050,7 +15050,7 @@ cp_parser_pre_parsed_nested_name_specifier (cp_parser *parser)\n   parser->object_scope = NULL_TREE;\n }\n \n-/* Add tokens to CACHE until an non-nested END token appears.  */\n+/* Add tokens to CACHE until a non-nested END token appears.  */\n \n static void\n cp_parser_cache_group (cp_parser *parser, "}, {"sha": "53206776acd92b3759f367ffd2564b36616d2b59", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=852dcbdd7834df145afa036f5d591da9429ec88a", "patch": "@@ -1092,7 +1092,7 @@ register_specialization (tree spec, tree tmpl, tree args)\n \n \t\t\t If there was a definition for the template, but\n \t\t\t not for the specialization, we want this to\n-\t\t\t look as if there is no definition, and vice\n+\t\t\t look as if there were no definition, and vice\n \t\t\t versa.  */\n \t\t      DECL_INITIAL (fn) = NULL_TREE;\n \t\t      duplicate_decls (spec, fn);\n@@ -8036,7 +8036,7 @@ tsubst_copy_and_build (tree t,\n     {\n     case USING_DECL:\n       t = DECL_NAME (t);\n-      /* Fallthrough.  */\n+      /* Fall through.  */\n     case IDENTIFIER_NODE:\n       {\n \ttree decl;"}, {"sha": "b8470af402990f3003e609f2318c85737904e1cc", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=852dcbdd7834df145afa036f5d591da9429ec88a", "patch": "@@ -210,7 +210,7 @@ lookup_base_r (tree binfo, tree base, base_access access,\n \t  \n \tcase bk_same_type:\n \t  bk = bk_proper_base;\n-\t  /* FALLTHROUGH */\n+\t  /* Fall through.  */\n \tcase bk_proper_base:\n \t  my_friendly_assert (found == bk_not_base, 20010723);\n \t  found = bk;"}, {"sha": "13380857e2cde52b6d28ff7420dfe08de3567139", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852dcbdd7834df145afa036f5d591da9429ec88a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=852dcbdd7834df145afa036f5d591da9429ec88a", "patch": "@@ -5477,7 +5477,7 @@ build_ptrmemfunc (tree type, tree pfn, int force)\n    given by CST.\n \n    ??? There is no consistency as to the types returned for the above\n-   values.  Some code acts as if its a sizetype and some as if its\n+   values.  Some code acts as if it were a sizetype and some as if it were\n    integer_type_node.  */\n \n void"}]}