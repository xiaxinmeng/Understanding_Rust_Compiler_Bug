{"sha": "0c1e1df880daa8c6093fcc907687303877f3bfe6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMxZTFkZjg4MGRhYThjNjA5M2ZjYzkwNzY4NzMwMzg3N2YzYmZlNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-12-15T11:05:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-12-15T11:05:37Z"}, "message": "re PR debug/51517 (Wrong debug information for pointers with negative strides.)\n\n\tPR debug/51517\n\t* trans-decl.c (gfc_get_symbol_decl): Don't set DECL_INITAL on span.\n\t(gfc_trans_deferred_vars): Instead add its runtime initialization\n\there.\n\n\t* tree-ssa-coalesce.c (coalesce_ssa_name): For !optimize, test\n\t!DECL_IGNORED_P instead of !DECL_ARTIFICIAL.\n\nFrom-SVN: r182362", "tree": {"sha": "6fbd9a6aa48415447b30bec3514caed5364d5d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fbd9a6aa48415447b30bec3514caed5364d5d37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c1e1df880daa8c6093fcc907687303877f3bfe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1e1df880daa8c6093fcc907687303877f3bfe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c1e1df880daa8c6093fcc907687303877f3bfe6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1e1df880daa8c6093fcc907687303877f3bfe6/comments", "author": null, "committer": null, "parents": [{"sha": "b3908fcc0def5f1d0318bd826d889e557ed4dee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3908fcc0def5f1d0318bd826d889e557ed4dee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3908fcc0def5f1d0318bd826d889e557ed4dee0"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "40c96462f57e16b2084af85cce210dea1606bb67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1e1df880daa8c6093fcc907687303877f3bfe6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1e1df880daa8c6093fcc907687303877f3bfe6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c1e1df880daa8c6093fcc907687303877f3bfe6", "patch": "@@ -1,3 +1,9 @@\n+2011-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/51517\n+\t* tree-ssa-coalesce.c (coalesce_ssa_name): For !optimize, test\n+\t!DECL_IGNORED_P instead of !DECL_ARTIFICIAL.\n+\n 2012-12-15  Richard Guenther  <rguenther@suse.de>\n \n \tRevert"}, {"sha": "40e01f33f485e9b1a0407abc4fe6e3eb777fe4fa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1e1df880daa8c6093fcc907687303877f3bfe6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1e1df880daa8c6093fcc907687303877f3bfe6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0c1e1df880daa8c6093fcc907687303877f3bfe6", "patch": "@@ -1,3 +1,10 @@\n+2011-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/51517\n+\t* trans-decl.c (gfc_get_symbol_decl): Don't set DECL_INITAL on span.\n+\t(gfc_trans_deferred_vars): Instead add its runtime initialization\n+\there.\n+\n 2011-12-11  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/50923\n@@ -15,7 +22,7 @@\n \tPR fortran/46356\n \tPR fortran/46990\n \tPR fortran/49074\n-\t* interface.c(symbol_rank): Return the rank of the _data\n+\t* interface.c (symbol_rank): Return the rank of the _data\n \tcomponent of class objects.\n \t(compare_parameter): Also compare the derived type of the class\n \t_data component for type mismatch.  Similarly, return 1 if the\n@@ -66,10 +73,10 @@\n \tAlso unset codimension.\n \t(gfc_find_derived_vtab): Make 'copy' elemental and set the\n \tintent of the arguments accordingly.: \n-\t* trans-array.h : Update prototype for gfc_array_allocate.\n+\t* trans-array.h: Update prototype for gfc_array_allocate.\n \t* array.c (gfc_array_dimen_size): Return failure if class expr.\n \t(gfc_array_size): Likewise.\n-\t* gfortran.h : New prototypes for gfc_add_class_array_ref,\n+\t* gfortran.h: New prototypes for gfc_add_class_array_ref,\n \tgfc_is_class_array_ref and gfc_is_class_scalar_expr.\n \t* trans-stmt.c (trans_associate_var): Exclude class targets\n \tfrom test. Move the allocation of the _vptr to an earlier time\n@@ -82,7 +89,7 @@\n \t* expr.c (gfc_get_corank): Fix for BT_CLASS.\n \t(gfc_is_simply_contiguous): Exclude class from test.\n \t* trans.c (gfc_build_array_ref): Include class array refs.\n-\t* trans.h : Include prototypes for class API functions that are\n+\t* trans.h: Include prototypes for class API functions that are\n \tnew in trans-expr. Define GFC_DECL_CLASS(node).\n \t* resolve.c (check_typebound_baseobject ): Remove error for\n \tnon-scalar base object.\n@@ -2428,7 +2435,7 @@\n \tchanged to GFC_ENABLE_REVERSE.\n \t* trans-array.c (gfc_init_loopinfo): GFC_CANNOT_REVERSE changed\n \tto GFC_INHIBIT_REVERSE.\n-\t* gfortran.h : Enum gfc_reverse is now GFC_ENABLE_REVERSE,\n+\t* gfortran.h: Enum gfc_reverse is now GFC_ENABLE_REVERSE,\n \tGFC_FORWARD_SET, GFC_REVERSE_SET and GFC_INHIBIT_REVERSE.\n \t* dependency.c (gfc_dep_resolver): Change names for elements of\n \tgfc_reverse as necessary. Change the logic so that forward\n@@ -3271,7 +3278,7 @@\n 2011-03-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/22572\n-\t* gfortran.h (gfc_option_t) : Add\n+\t* gfortran.h (gfc_option_t): Add\n \tflag_aggressive_function_elimination.\n \t(gfc_dep_compare_functions):  Add prototype.\n \t* lang.opt: Add faggressive-function-elimination.\n@@ -3409,7 +3416,7 @@\n \tPR fortran/44945\n \t* trans-types.c (gfc_get_derived_type): Remove code that looks\n \tfor decls in gsym and add call to gfc_get_module_backend_decl.\n-\t* trans.h : Add prototype for gfc_get_module_backend_decl.\n+\t* trans.h: Add prototype for gfc_get_module_backend_decl.\n \t* trans-decl.c (gfc_get_module_backend_decl): New function.\n \t(gfc_get_symbol_decl): Call it.\n \n@@ -3708,7 +3715,7 @@\n \tis called before reallocation, so that the length is available.\n \t(gfc_trans_asssignment): Remove error about assignment to\n \tdeferred length character variables.\n-\t* gfortran.texi : Update entry about (re)allocation on\n+\t* gfortran.texi: Update entry about (re)allocation on\n \tassignment.\n \t* trans-stmt.c (gfc_trans_allocate): Add code to handle deferred\n \tlength character variables.\n@@ -3889,7 +3896,7 @@\n \timplicit pureness of containing procedure.\n \t* decl.c (match_old_style_init, gfc_match_data): Where decl\n \twould fail in PURE procedure, set implicit_pure to zero.\n-\t* gfortran.h : Add implicit_pure to structure symbol_attr and\n+\t* gfortran.h: Add implicit_pure to structure symbol_attr and\n \tadd prototype for function gfc_implicit_pure.\n \t* expr.c (gfc_check_pointer_assign, gfc_check_vardef_context):\n \tWhere decl would fail in PURE procedure, reset implicit_pure.\n@@ -3901,7 +3908,7 @@\n \t* parse.c (decode_omp_directive): The same.\n \t(parse_contained): If not PURE, set implicit pure attribute.\n \t* resolve.c (resolve_formal_arglist, resolve_structure_cons,\n-\tresolve_function, resolve_ordinary_assign) : The same.\n+\tresolve_function, resolve_ordinary_assign): The same.\n \t(gfc_implicit_pure): New function.\n \t* module.c (mio_symbol_attribute): Introduce AB_IMPLICIT_PURE\n \tto ab_attribute enum and use it in this function."}, {"sha": "78b7011466d0eff1833b7dc82557eadd126924b3", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1e1df880daa8c6093fcc907687303877f3bfe6/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1e1df880daa8c6093fcc907687303877f3bfe6/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=0c1e1df880daa8c6093fcc907687303877f3bfe6", "patch": "@@ -1434,7 +1434,6 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n       gfc_finish_var_decl (span, sym);\n       TREE_STATIC (span) = TREE_STATIC (decl);\n       DECL_ARTIFICIAL (span) = 1;\n-      DECL_INITIAL (span) = build_int_cst (gfc_array_index_type, 0);\n \n       GFC_DECL_SPAN (decl) = span;\n       GFC_TYPE_ARRAY_SPAN (TREE_TYPE (decl)) = span;\n@@ -3577,6 +3576,17 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n       if (sym->assoc)\n \tcontinue;\n \n+      if (sym->attr.subref_array_pointer\n+\t  && GFC_DECL_SPAN (sym->backend_decl)\n+\t  && !TREE_STATIC (GFC_DECL_SPAN (sym->backend_decl)))\n+\t{\n+\t  gfc_init_block (&tmpblock);\n+\t  gfc_add_modify (&tmpblock, GFC_DECL_SPAN (sym->backend_decl),\n+\t\t\t  build_int_cst (gfc_array_index_type, 0));\n+\t  gfc_add_init_cleanup (block, gfc_finish_block (&tmpblock),\n+\t\t\t\tNULL_TREE);\n+\t}\n+\n       if (sym->attr.dimension || sym->attr.codimension)\n \t{\n           /* Assumed-size Cray pointees need to be treated as AS_EXPLICIT.  */"}, {"sha": "776e9e02e77465f22c6b0c03439e067763eca7d3", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1e1df880daa8c6093fcc907687303877f3bfe6/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1e1df880daa8c6093fcc907687303877f3bfe6/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=0c1e1df880daa8c6093fcc907687303877f3bfe6", "patch": "@@ -1,5 +1,5 @@\n /* Coalesce SSA_NAMES together for the out-of-ssa pass.\n-   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Andrew MacLeod <amacleod@redhat.com>\n \n@@ -1372,7 +1372,7 @@ coalesce_ssa_name (void)\n \n \t  if (a\n \t      && SSA_NAME_VAR (a)\n-\t      && !DECL_ARTIFICIAL (SSA_NAME_VAR (a))\n+\t      && !DECL_IGNORED_P (SSA_NAME_VAR (a))\n \t      && (!has_zero_uses (a) || !SSA_NAME_IS_DEFAULT_DEF (a)))\n \t    {\n \t      tree *slot = (tree *) htab_find_slot (ssa_name_hash, a, INSERT);"}]}