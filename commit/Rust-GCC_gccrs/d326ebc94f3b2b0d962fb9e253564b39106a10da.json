{"sha": "d326ebc94f3b2b0d962fb9e253564b39106a10da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMyNmViYzk0ZjNiMmIwZDk2MmZiOWUyNTM1NjRiMzkxMDZhMTBkYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-18T19:11:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-18T19:11:37Z"}, "message": "configury: --enable-link-serialization support\n\nWhen performing LTO bootstraps, especially when using tmpfs for /tmp,\none can run a machine to halt when using higher levels of parallelism\nand a large number of FEs, because there are too many concurrent LTO\nlink commands running at the same time and each one of them puts most of the\nmiddle-end/backend objects into /tmp.\n\nWe have --enable-link-mutex configure option, but --enable-link-mutex has\na big problem that it decreases number of available jobs by the number of\nlink commands waiting for the lock, so e.g. when doing make -j32 build with\n11 different big programs linked with $(LLINKER) we end up with just 22\neffective jobs, and with e.g. make -j8 with those 11 different big programs\nwe actually most likely serialize everything during linking onto a single job.\n\nThe following patch implements a new configure option,\n--enable-link-serialization, which implements different serialization and\nas it doesn't use the mutex, just modifying the old option to be implemented\ndifferently would be strange.  We can deprecate and later remove the old\noption.  The new option doesn't use any shell mutexes, but uses make\ndependencies.\n\nThe option is implemented inside of gcc/ configure and Makefiles,\nwhich means that even inside of gcc/ make all (as well as e.g. make lto-dump)\nwill serialize and build all previous large binaries when configured this\nway.\nOne can always make -j32 cc1 DO_LINK_SERIALIZATION=\nto avoid that.\nFurthermore, I've implemented the idea I wrote about, so that\n--enable-link-serialization\nis the same as\n--enable-link-serialization=1\nand means the large link commands are serialized, one can (the default)\n--disable-link-serialization\nwhich will cause all links to be parallelizable, but one can also\n--enable-link-serialization=3\netc. which says that at most 3 of the large link commands can run\nconcurrently.\nAnd finally I've implemented (only if the serialization is enabled) simple\nprogress bars for the linking.\nWith --enable-link-serialization and e.g. the 5 large links I have in my\ncurrent tree (cc1, cc1plus, f951, lto1 and lto-dump), before the linking it\nprints\nLinking |==--      | 20%\nand after it\nLinking |====      | 40%\n(each == characters stand for already finished links, each --\ncharacters stand for the link being started).\nWith --enable-link-serialization=3 it will change the way the start is\nprinted, one will get:\nLinking |--        | 0%\nat the start of cc1 link,\nLinking |>>--      | 0%\nat the start of the second large link and\nLinking |>>>>--    | 0%\nat the start of the third large link, where the >> characters stand for\nalready pending links.  The printing at the end of link command is\nthe same as with the full serialization, i.e. for the above 3:\nLinking |==        | 20%\nLinking |====      | 40%\nLinking |======    | 60%\nbut one could actually get them in any order depending on which of those 3\nfinishes first - to get it 100% accurate I'd need to add some directory with\nfiles representing finished links or similar, doesn't seem worth it.\n\n2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* configure.ac: Add $lang.prev rules, INDEX.$lang and SERIAL_LIST and\n\tSERIAL_COUNT variables to Make-hooks.\n\t(--enable-link-serialization): New configure option.\n\t* Makefile.in (DO_LINK_SERIALIZATION, LINK_PROGRESS): New variables.\n\t* doc/install.texi (--enable-link-serialization): Document.\n\t* configure: Regenerated.\ngcc/c/\n\t* Make-lang.in (c.serial): New goal.\n\t(.PHONY): Add c.serial c.prev.\n\t(cc1$(exeext)): Call LINK_PROGRESS.\ngcc/cp/\n\t* Make-lang.in (c++.serial): New goal.\n\t(.PHONY): Add c++.serial c++.prev.\n\t(cc1plus$(exeext)): Depend on c++.prev.  Call LINK_PROGRESS.\ngcc/fortran/\n\t* Make-lang.in (fortran.serial): New goal.\n\t(.PHONY): Add fortran.serial fortran.prev.\n\t(f951$(exeext)): Depend on fortran.prev.  Call LINK_PROGRESS.\ngcc/lto/\n\t* Make-lang.in (lto, lto1.serial, lto2.serial): New goals.\n\t(.PHONY): Add lto lto1.serial lto1.prev lto2.serial lto2.prev.\n\t(lto.all.cross, lto.start.encap): Remove dependencies.\n\t($(LTO_EXE)): Depend on lto1.prev.  Call LINK_PROGRESS.\n\t($(LTO_DUMP_EXE)): Depend on lto2.prev.  Call LINK_PROGRESS.\ngcc/objc/\n\t* Make-lang.in (objc.serial): New goal.\n\t(.PHONY): Add objc.serial objc.prev.\n\t(cc1obj$(exeext)): Depend on objc.prev.  Call LINK_PROGRESS.\ngcc/objcp/\n\t* Make-lang.in (obj-c++.serial): New goal.\n\t(.PHONY): Add obj-c++.serial obj-c++.prev.\n\t(cc1objplus$(exeext)): Depend on obj-c++.prev.  Call LINK_PROGRESS.\ngcc/ada/\n\t* gcc-interface/Make-lang.in (ada.serial): New goal.\n\t(.PHONY): Add ada.serial ada.prev.\n\t(gnat1$(exeext)): Depend on ada.prev.  Call LINK_PROGRESS.\ngcc/brig/\n\t* Make-lang.in (brig.serial): New goal.\n\t(.PHONY): Add brig.serial brig.prev.\n\t(brig1$(exeext)): Depend on brig.prev.  Call LINK_PROGRESS.\ngcc/go/\n\t* Make-lang.in (go.serial): New goal.\n\t(.PHONY): Add go.serial go.prev.\n\t(go1$(exeext)): Depend on go.prev.  Call LINK_PROGRESS.\ngcc/jit/\n\t* Make-lang.in (jit.serial): New goal.\n\t(.PHONY): Add jit.serial jit.prev.\n\t($(LIBGCCJIT_FILENAME)): Depend on jit.prev.  Call LINK_PROGRESS.\ngcc/d/\n\t* Make-lang.in (d.serial): New goal.\n\t(.PHONY): Add d.serial d.prev.\n\t(d21$(exeext)): Depend on d.prev.  Call LINK_PROGRESS.", "tree": {"sha": "88887449b888885942fa64a8bcc9a639b2f36a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88887449b888885942fa64a8bcc9a639b2f36a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d326ebc94f3b2b0d962fb9e253564b39106a10da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d326ebc94f3b2b0d962fb9e253564b39106a10da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d326ebc94f3b2b0d962fb9e253564b39106a10da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d326ebc94f3b2b0d962fb9e253564b39106a10da/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71e234a5c94ddaef4070b3a74cf6d867dfe1a24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e234a5c94ddaef4070b3a74cf6d867dfe1a24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e234a5c94ddaef4070b3a74cf6d867dfe1a24b"}], "stats": {"total": 255, "additions": 224, "deletions": 31}, "files": [{"sha": "778ec09c75d9af1cb9f2d5e7582b948c0397db65", "filename": "gcc/Makefile.in", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -1750,6 +1750,8 @@ $(FULL_DRIVER_NAME): ./xgcc$(exeext)\n # Otherwise $(SELFTEST_DEPS) is empty when used from <LANG>/Make-lang.in.\n SELFTEST_DEPS = $(GCC_PASSES) stmp-int-hdrs $(srcdir)/testsuite/selftests\n \n+DO_LINK_SERIALIZATION = @DO_LINK_SERIALIZATION@\n+\n # Language makefile fragments.\n \n # The following targets define the interface between us and the languages.\n@@ -1767,6 +1769,23 @@ SELFTEST_DEPS = $(GCC_PASSES) stmp-int-hdrs $(srcdir)/testsuite/selftests\n # language hooks, generated by configure\n @language_hooks@\n \n+ifeq ($(DO_LINK_SERIALIZATION),)\n+LINK_PROGRESS = :\n+else\n+LINK_PROGRESS = msg=\"Linking |\"; cnt=0; if test \"$(2)\" = start; then \\\n+  idx=0; cnt2=$(DO_LINK_SERIALIZATION); \\\n+  while test $$cnt2 -le $(1); do msg=\"$${msg}==\"; cnt2=`expr $$cnt2 + 1`; idx=`expr $$idx + 1`; done; \\\n+  cnt=$$idx; \\\n+  while test $$cnt -lt $(1); do msg=\"$${msg}>>\"; cnt=`expr $$cnt + 1`; done; \\\n+  msg=\"$${msg}--\"; cnt=`expr $$cnt + 1`; \\\n+  else \\\n+  idx=`expr $(1) + 1`; \\\n+  while test $$cnt -le $(1); do msg=\"$${msg}==\"; cnt=`expr $$cnt + 1`; done; \\\n+  fi; \\\n+  while test $$cnt -lt $(SERIAL_COUNT); do msg=\"$${msg}  \"; cnt=`expr $$cnt + 1`; done; \\\n+  msg=\"$${msg}| `expr 100 \\* $$idx / $(SERIAL_COUNT)`%\"; echo \"$$msg\"\n+endif\n+\n # Wire in install-gnatlib invocation with `make install' for a configuration\n # with top-level libada disabled.\n gnat_install_lib = @gnat_install_lib@"}, {"sha": "e41465761c8ebfdc066eec180dcfc84b14a18f4f", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -146,9 +146,10 @@ endif\n \n # Define the names for selecting Ada in LANGUAGES.\n ada: gnat1$(exeext) gnatbind$(exeext)\n+ada.serial: gnat1$(exeext)\n \n # Tell GNU Make to ignore these, if they exist.\n-.PHONY: ada\n+.PHONY: ada ada.serial ada.prev\n \n # Compute the FLAGS to pass for gnattools, now linked with a C++ driver as\n # we're linking against at least libcommon which contains C++ compiled code.\n@@ -667,10 +668,13 @@ ada/libgnat/s-excmac.adb: $(srcdir)/ada/libgnat/s-excmac__$(EH_MECHANISM).adb\n # Needs to be built with CC=gcc\n # Since the RTL should be built with the latest compiler, remove the\n #  stamp target in the parent directory whenever gnat1 is rebuilt\n-gnat1$(exeext): $(TARGET_ADA_SRCS) $(GNAT1_OBJS) $(ADA_BACKEND) libcommon-target.a $(LIBDEPS)\n+gnat1$(exeext): $(TARGET_ADA_SRCS) $(GNAT1_OBJS) $(ADA_BACKEND) libcommon-target.a \\\n+\t\t$(LIBDEPS) ada.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.ada),start)\n \t+$(GCC_LLINK) -o $@ $(GNAT1_OBJS) $(ADA_BACKEND) \\\n \t  libcommon-target.a $(LIBS) $(SYSLIBS) $(BACKENDLIBS) $(CFLAGS)\n \t$(RM) stamp-gnatlib2-rts stamp-tools\n+\t@$(call LINK_PROGRESS,$(INDEX.ada),end)\n \n gnatbind$(exeext): ada/b_gnatb.o $(CONFIG_H) $(GNATBIND_OBJS) ggc-none.o libcommon-target.a $(LIBDEPS)\n \t+$(GCC_LINK) -o $@ ada/b_gnatb.o $(GNATBIND_OBJS) ggc-none.o libcommon-target.a $(LIBS) $(SYSLIBS) $(CFLAGS)"}, {"sha": "dffc7503c14680b3dea3040018023bfc762d2913", "filename": "gcc/brig/Make-lang.in", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fbrig%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fbrig%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -29,8 +29,9 @@ GCCBRIG_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo gccbrig|sed \\\n \n # The name for selecting brig in LANGUAGES.\n brig: brig1$(exeext)\n+brig.serial: brig\n \n-.PHONY: brig\n+.PHONY: brig brig.serial brig.prev\n \n CFLAGS-brig/brigspec.o += $(DRIVER_DEFINES)\n \n@@ -81,15 +82,12 @@ BRIG_OBJS = \\\n \n brig_OBJS = $(BRIG_OBJS) brig/brigspec.o\n \n-# brig1$(exeext): $(BRIG_OBJS) attribs.o $(BACKEND) $(LIBDEPS)\n-# \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n-# \t      $(BRIG_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n-\n-\n-brig1$(exeext): $(BRIG_OBJS) attribs.o $(BACKEND) $(LIBDEPS)\n+brig1$(exeext): $(BRIG_OBJS) attribs.o $(BACKEND) $(LIBDEPS) brig.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.brig),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(BRIG_OBJS) attribs.o $(BACKEND) $(LIBS) \\\n \t\t  $(BACKENDLIBS)\n+\t@$(call LINK_PROGRESS,$(INDEX.brig),end)\n \n # Documentation.\n "}, {"sha": "c776ab65f05b9d3a7fd7b6125b21cc21677e9c0a", "filename": "gcc/c/Make-lang.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -37,9 +37,10 @@\n #\f\n # Define the names for selecting c in LANGUAGES.\n c: cc1$(exeext)\n+c.serial: c\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: c gcc\n+.PHONY: c gcc c.serial\n \n # The C front end driver.  This is different from the drivers for other\n # front ends, because there is no C language specific driver (i.e. nothing\n@@ -82,8 +83,10 @@ cc1-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n \tfi\n \n cc1$(exeext): $(C_OBJS) cc1-checksum.o $(BACKEND) $(LIBDEPS)\n+\t@$(call LINK_PROGRESS,$(INDEX.c),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) \\\n \t  cc1-checksum.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n+\t@$(call LINK_PROGRESS,$(INDEX.c),end)\n \n cc1.fda: ../stage1-gcc/cc1$(exeext) ../prev-gcc/$(PERF_DATA)\n \t$(CREATE_GCOV) -binary ../stage1-gcc/cc1$(exeext) -gcov cc1.fda -profile ../prev-gcc/$(PERF_DATA) -gcov_version 1"}, {"sha": "f61b815801eaf11a549ddc5aa8e57dfc53e2ed1a", "filename": "gcc/configure", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -710,6 +710,7 @@ subdirs\n dollar\n gcc_tooldir\n enable_lto\n+DO_LINK_SERIALIZATION\n DO_LINK_MUTEX\n MAINT\n zlibinc\n@@ -1013,6 +1014,7 @@ with_gc\n with_system_zlib\n enable_maintainer_mode\n enable_link_mutex\n+enable_link_serialization\n enable_version_specific_runtime_libs\n enable_plugin\n enable_host_shared\n@@ -1768,6 +1770,10 @@ Optional Features:\n                           sometimes confusing) to the casual installer\n   --enable-link-mutex     avoid linking multiple front-ends at once to avoid\n                           thrashing on the build machine\n+  --enable-link-serialization\n+                          avoid linking multiple GCC front-ends at once using\n+                          make dependencies to avoid thrashing on the build\n+                          machine\n   --enable-version-specific-runtime-libs\n                           specify that runtime libraries should be installed\n                           in a compiler-specific directory\n@@ -19030,7 +19036,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19033 \"configure\"\n+#line 19039 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19136,7 +19142,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19139 \"configure\"\n+#line 19145 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -30573,6 +30579,31 @@ else\n fi\n \n \n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to serialize linking of multiple front-ends\" >&5\n+$as_echo_n \"checking whether to serialize linking of multiple front-ends... \" >&6; }\n+  # Check whether --enable-link-serialization was given.\n+if test \"${enable_link_serialization+set}\" = set; then :\n+  enableval=$enable_link_serialization; do_link_serialization=$enableval\n+else\n+  do_link_serialization=no\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $do_link_serialization\" >&5\n+$as_echo \"$do_link_serialization\" >&6; }\n+\n+case \"$do_link_serialization\" in\n+  yes)\n+    DO_LINK_SERIALIZATION=1;;\n+  [1-9] | [1-9][0-9] | [1-9][0-9][0-9])\n+    DO_LINK_SERIALIZATION=$do_link_serialization;;\n+  no)\n+    DO_LINK_SERIALIZATION=;;\n+  *)\n+    as_fn_error $? \"bad value ${do_link_serialization} given for --enable-link-serialization\" \"$LINENO\" 5 ;;\n+esac\n+\n+\n # --------------\n # Language hooks\n # --------------\n@@ -30733,6 +30764,43 @@ do\n \techo \"lang.$t: $x\" >> Make-hooks\n done\n \n+echo \"ifeq (\\$(DO_LINK_SERIALIZATION),)\" >> Make-hooks\n+echo \"SERIAL_LIST =\" >> Make-hooks\n+echo else >> Make-hooks\n+lang_cnt=0\n+lang_list=\n+prev=c.serial\n+serialization_languages=c\n+for lang in $all_selected_languages\n+do\n+\ttest $lang = c && continue\n+\tif test $lang = lto; then\n+\t\tserialization_languages=\"$serialization_languages lto1 lto2\"\n+\telse\n+\t\tserialization_languages=\"$serialization_languages $lang\"\n+\tfi\n+done\n+for lang in $serialization_languages\n+do\n+\ttest $lang = c && continue\n+\tlang_cnt=`expr $lang_cnt + 1`\n+\tlang_list=\" $prev$lang_list\"\n+\tprev=${lang}.serial\n+done\n+echo \"SERIAL_LIST = \\$(wordlist \\$(DO_LINK_SERIALIZATION),$lang_cnt,$lang_list)\" >> Make-hooks\n+echo endif >> Make-hooks\n+echo \"SERIAL_COUNT = `expr $lang_cnt + 1`\" >> Make-hooks\n+echo \"INDEX.c = 0\" >> Make-hooks\n+lang_idx=1\n+for lang in $serialization_languages\n+do\n+\ttest $lang = c && continue\n+\techo \"$lang.prev: \\$(word $lang_cnt,\\$(SERIAL_LIST))\" >> Make-hooks\n+\techo \"INDEX.$lang = $lang_idx\" >> Make-hooks\n+\tlang_cnt=`expr $lang_cnt - 1`\n+\tlang_idx=`expr $lang_idx + 1`\n+done\n+\n # --------\n # Option include files\n # --------"}, {"sha": "b2732d17bf48d69f6b44d02d876e9b84caf1e2a8", "filename": "gcc/configure.ac", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -6676,6 +6676,29 @@ else\n fi\n AC_SUBST(DO_LINK_MUTEX)\n \n+dnl Whether to prevent multiple GCC front-ends from linking at the same time\n+\n+AC_MSG_CHECKING([whether to serialize linking of multiple front-ends])\n+  AC_ARG_ENABLE(link-serialization,\n+[AS_HELP_STRING([--enable-link-serialization],\n+\t\t[avoid linking multiple GCC front-ends at once using make\n+\t\t dependencies to avoid thrashing on the build machine])],\n+      do_link_serialization=$enableval,\n+      do_link_serialization=no)\n+AC_MSG_RESULT($do_link_serialization)\n+\n+case \"$do_link_serialization\" in\n+  yes)\n+    DO_LINK_SERIALIZATION=1;;\n+  [[1-9]] | [[1-9]][[0-9]] | [[1-9]][[0-9]][[0-9]])\n+    DO_LINK_SERIALIZATION=$do_link_serialization;;\n+  no)\n+    DO_LINK_SERIALIZATION=;;\n+  *)\n+    AC_MSG_ERROR(bad value ${do_link_serialization} given for --enable-link-serialization) ;;\n+esac\n+AC_SUBST(DO_LINK_SERIALIZATION)\n+\n # --------------\n # Language hooks\n # --------------\n@@ -6836,6 +6859,43 @@ do\n \techo \"lang.$t: $x\" >> Make-hooks\n done\n \n+echo \"ifeq (\\$(DO_LINK_SERIALIZATION),)\" >> Make-hooks\n+echo \"SERIAL_LIST =\" >> Make-hooks\n+echo else >> Make-hooks\n+lang_cnt=0\n+lang_list=\n+prev=c.serial\n+serialization_languages=c\n+for lang in $all_selected_languages\n+do\n+\ttest $lang = c && continue\n+\tif test $lang = lto; then\n+\t\tserialization_languages=\"$serialization_languages lto1 lto2\"\n+\telse\n+\t\tserialization_languages=\"$serialization_languages $lang\"\n+\tfi\n+done\n+for lang in $serialization_languages\n+do\n+\ttest $lang = c && continue\n+\tlang_cnt=`expr $lang_cnt + 1`\n+\tlang_list=\" $prev$lang_list\"\n+\tprev=${lang}.serial\n+done\n+echo \"SERIAL_LIST = \\$(wordlist \\$(DO_LINK_SERIALIZATION),$lang_cnt,$lang_list)\" >> Make-hooks\n+echo endif >> Make-hooks\n+echo \"SERIAL_COUNT = `expr $lang_cnt + 1`\" >> Make-hooks\n+echo \"INDEX.c = 0\" >> Make-hooks\n+lang_idx=1\n+for lang in $serialization_languages\n+do\n+\ttest $lang = c && continue\n+\techo \"$lang.prev: \\$(word $lang_cnt,\\$(SERIAL_LIST))\" >> Make-hooks\n+\techo \"INDEX.$lang = $lang_idx\" >> Make-hooks\n+\tlang_cnt=`expr $lang_cnt - 1`\n+\tlang_idx=`expr $lang_idx + 1`\n+done\n+\n # --------\n # Option include files\n # --------"}, {"sha": "6be4678776b6022ccea966f7bb55ed2a317306ec", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -47,9 +47,10 @@ CP_PLUGIN_HEADERS := cp-tree.h cxx-pretty-print.h name-lookup.h type-utils.h ope\n # into the C++ rule, but that needs a little bit of work\n # to do the right thing within all.cross.\n c++: cc1plus$(exeext)\n+c++.serial: c++\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: c++\n+.PHONY: c++ c++.serial c++.prev\n \n CFLAGS-cp/g++spec.o += $(DRIVER_DEFINES)\n \n@@ -116,9 +117,11 @@ cc1plus-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n \t  $(srcdir)/../move-if-change cc1plus-checksum.c.tmp cc1plus-checksum.c; \\\n \tfi\n \n-cc1plus$(exeext): $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBDEPS)\n+cc1plus$(exeext): $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBDEPS) c++.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.c++),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n+\t@$(call LINK_PROGRESS,$(INDEX.c++),end)\n \n ifeq ($(ENABLE_MAINTAINER_RULES), true)\n # Special build rule.  This is a maintainer rule, that is only"}, {"sha": "0242c9cc04e9a07cfe6ba29a47e8ac8e950006f6", "filename": "gcc/d/Make-lang.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fd%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fd%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -27,9 +27,10 @@ D_LIBPHOBOS = -DLIBPHOBOS=\\\"gphobos\\\"\n \n # The name for selecting d in LANGUAGES.\n d: d21$(exeext)\n+d.serial: d\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: d\n+.PHONY: d d.serial d.prev\n \n # Create the compiler driver for D.\n CFLAGS-d/d-spec.o += $(DRIVER_DEFINES) $(D_LIBPHOBOS)\n@@ -162,9 +163,11 @@ D_ALL_OBJS = $(D_FRONTEND_OBJS) $(D_GENERATED_OBJS) $(D_OBJS) $(D_TARGET_OBJS)\n \n d_OBJS = $(D_ALL_OBJS) d/d-spec.o\n \n-d21$(exeext): $(D_ALL_OBJS) attribs.o $(BACKEND) $(LIBDEPS)\n+d21$(exeext): $(D_ALL_OBJS) attribs.o $(BACKEND) $(LIBDEPS) d.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.d),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(D_ALL_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n+\t@$(call LINK_PROGRESS,$(INDEX.d),end)\n \n # Documentation.\n "}, {"sha": "297831fda551773d36e28409ca8726bbc6ecde3f", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -1564,6 +1564,14 @@ When building GCC, use a mutex to avoid linking the compilers for\n multiple languages at the same time, to avoid thrashing on build\n systems with limited free memory.  The default is not to use such a mutex.\n \n+@item --enable-link-serialization\n+When building GCC, use make dependencies to serialize linking the compilers for\n+multiple languages, to avoid thrashing on build\n+systems with limited free memory.  The default is not to add such\n+dependencies and thus with parallel make potentially link different\n+compilers concurrently.  If the argument is a positive integer, allow\n+that number of concurrent link processes for the large binaries.\n+\n @item --enable-maintainer-mode\n The build rules that regenerate the Autoconf and Automake output files as\n well as the GCC master message catalog @file{gcc.pot} are normally"}, {"sha": "ea2e49bc086a6688d12c64a19a03b44f16f8e14f", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -72,9 +72,10 @@ fortran_OBJS = $(F95_OBJS) fortran/gfortranspec.o\n #\f\n # Define the names for selecting gfortran in LANGUAGES.\n fortran: f951$(exeext)\n+fortran.serial: fortran\n \n # Tell GNU make to ignore files by these names if they exist.\n-.PHONY: fortran\n+.PHONY: fortran fortran.serial fortran.prev\n \n CFLAGS-fortran/gfortranspec.o += $(DRIVER_DEFINES)\n \n@@ -92,11 +93,12 @@ gfortran-cross$(exeext): gfortran$(exeext)\n \tcp gfortran$(exeext) gfortran-cross$(exeext)\n \n # The compiler itself is called f951.\n-f951$(exeext): $(F95_OBJS) \\\n-\t\t$(BACKEND) $(LIBDEPS) attribs.o\n+f951$(exeext): $(F95_OBJS) $(BACKEND) $(LIBDEPS) attribs.o fortran.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.fortran),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(F95_OBJS) $(BACKEND) $(ZLIB) $(LIBS) attribs.o \\\n \t\t$(BACKENDLIBS)\n+\t@$(call LINK_PROGRESS,$(INDEX.fortran),end)\n \n gt-fortran-trans.h    : s-gtype; @true\n #\f"}, {"sha": "7c586cbb53537b392ae906218af9a5c0bedd7171", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -27,8 +27,9 @@ GCCGO_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo gccgo|sed '$(pr\n \n # The name for selecting go in LANGUAGES.\n go: go1$(exeext)\n+go.serial: go\n \n-.PHONY: go\n+.PHONY: go go.serial go.prev\n \n CFLAGS-go/gospec.o += $(DRIVER_DEFINES)\n \n@@ -78,9 +79,11 @@ GO_OBJS = \\\n \n go_OBJS = $(GO_OBJS) go/gospec.o\n \n-go1$(exeext): $(GO_OBJS) attribs.o $(BACKEND) $(LIBDEPS)\n+go1$(exeext): $(GO_OBJS) attribs.o $(BACKEND) $(LIBDEPS) go.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.go),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(GO_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n+\t@$(call LINK_PROGRESS,$(INDEX.go),end)\n \n # Documentation.\n "}, {"sha": "012f62d830c8bcea73ad1f3f5d1b3356247a1288", "filename": "gcc/jit/Make-lang.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fjit%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fjit%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -81,8 +81,10 @@ jit: $(LIBGCCJIT_FILENAME) \\\n \t$(FULL_DRIVER_NAME)\n endif\n \n+jit.serial: $(LIBGCCJIT_FILENAME)\n+\n # Tell GNU make to ignore these if they exist.\n-.PHONY: jit\n+.PHONY: jit jit.serial jit.prev\n \n jit_OBJS = attribs.o \\\n \tjit/dummy-frontend.o \\\n@@ -117,12 +119,14 @@ $(LIBGCCJIT_FILENAME): $(jit_OBJS) \\\n \tlibbackend.a libcommon-target.a libcommon.a \\\n \t$(CPPLIB) $(LIBDECNUMBER) \\\n \t$(LIBDEPS) $(srcdir)/jit/libgccjit.map \\\n-\t$(EXTRA_GCC_OBJS)\n+\t$(EXTRA_GCC_OBJS) jit.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.jit),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ -shared \\\n \t     $(jit_OBJS) libbackend.a libcommon-target.a libcommon.a \\\n \t     $(CPPLIB) $(LIBDECNUMBER) $(EXTRA_GCC_LIBS) $(LIBS) $(BACKENDLIBS) \\\n \t     $(EXTRA_GCC_OBJS) \\\n \t     $(LIBGCCJIT_EXTRA_OPTS)\n+\t@$(call LINK_PROGRESS,$(INDEX.jit),end)\n \n # Create symlinks when not building for Windows\n ifeq (,$(findstring mingw,$(target)))"}, {"sha": "4a03f1930c43ba771e92f22936e998379015d2d9", "filename": "gcc/lto/Make-lang.in", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Flto%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Flto%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -41,10 +41,16 @@ lto_dump_OBJS = $(LTO_DUMP_OBJS)\n \n # Rules\n \n+lto: $(LTO_EXE) $(LTO_DUMP_EXE)\n+lto1.serial: $(LTO_EXE)\n+lto2.serial: $(LTO_DUMP_EXE)\n+\n+.PHONY: lto lto1.serial lto1.prev lto2.serial lto2.prev\n+\n # These hooks are used by the main GCC Makefile.  Consult that\n # Makefile for documentation.\n-lto.all.cross: $(LTO_EXE) $(LTO_DUMP_EXE)\n-lto.start.encap: $(LTO_EXE) $(LTO_DUMP_EXE)\n+lto.all.cross:\n+lto.start.encap:\n lto.rest.encap:\n lto.tags:\n lto.install-common: installdirs\n@@ -84,13 +90,17 @@ lto.stagefeedback:\n # Use strict warnings for this front end.\n lto-warn = $(STRICT_WARN)\n \n-$(LTO_EXE): $(LTO_OBJS) $(BACKEND) $(LIBDEPS)\n+$(LTO_EXE): $(LTO_OBJS) $(BACKEND) $(LIBDEPS) lto1.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.lto1),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(LTO_OBJS) $(BACKEND) $(BACKENDLIBS) $(LIBS)\n+\t@$(call LINK_PROGRESS,$(INDEX.lto1),end)\n \n-$(LTO_DUMP_EXE): $(LTO_DUMP_OBJS) $(BACKEND) $(LIBDEPS)\n+$(LTO_DUMP_EXE): $(LTO_DUMP_OBJS) $(BACKEND) $(LIBDEPS) lto2.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.lto2),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(LTO_DUMP_OBJS) $(BACKEND) $(BACKENDLIBS) $(LIBS)\n+\t@$(call LINK_PROGRESS,$(INDEX.lto2),end)\n \n lto/lto-dump.o: $(LTO_OBJS)\n "}, {"sha": "a19befb68a081da4f944551b62db3ed39dc9f9cf", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -38,9 +38,10 @@\n #\f\n # Define the names for selecting Objective-C in LANGUAGES.\n objc: cc1obj$(exeext)\n+objc.serial: objc\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: objc\n+.PHONY: objc objc.serial objc.prev\n \n # Use maximal warnings for this front end.\n objc-warn = $(STRICT_WARN)\n@@ -62,10 +63,13 @@ cc1obj-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n         $(BACKEND) $(LIBDEPS) checksum-options > cc1obj-checksum.c.tmp && \\\n \t$(srcdir)/../move-if-change cc1obj-checksum.c.tmp cc1obj-checksum.c\n \n-cc1obj$(exeext): $(OBJC_OBJS) $(C_AND_OBJC_OBJS) cc1obj-checksum.o $(BACKEND) $(LIBDEPS)\n+cc1obj$(exeext): $(OBJC_OBJS) $(C_AND_OBJC_OBJS) cc1obj-checksum.o $(BACKEND) \\\n+\t\t $(LIBDEPS) objc.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.objc),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(OBJC_OBJS) $(C_AND_OBJC_OBJS) cc1obj-checksum.o \\\n \t      $(BACKEND) $(LIBS) $(BACKENDLIBS)\n+\t@$(call LINK_PROGRESS,$(INDEX.objc),end)\n \n objc.srcextra:\n "}, {"sha": "2f6954e37c0b6d76af3052a406c6fca60671c651", "filename": "gcc/objcp/Make-lang.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fobjcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326ebc94f3b2b0d962fb9e253564b39106a10da/gcc%2Fobjcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FMake-lang.in?ref=d326ebc94f3b2b0d962fb9e253564b39106a10da", "patch": "@@ -39,9 +39,10 @@\n #\f\n # Define the names for selecting Objective-C++ in LANGUAGES.\n obj-c++: cc1objplus$(exeext)\n+obj-c++.serial: obj-c++\n \n # Tell GNU make to ignore these if they exist.\n-.PHONY: obj-c++\n+.PHONY: obj-c++ obj-c++.serial obj-c++.prev\n \n # Use maximal warnings for this front end.  Also, make ObjC and C++\n # headers accessible.\n@@ -66,9 +67,12 @@ cc1objplus-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n \t$(srcdir)/../move-if-change cc1objplus-checksum.c.tmp \\\n \tcc1objplus-checksum.c\n \n-cc1objplus$(exeext): $(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) $(LIBDEPS)\n+cc1objplus$(exeext): $(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) \\\n+\t\t     $(LIBDEPS) obj-c++.prev\n+\t@$(call LINK_PROGRESS,$(INDEX.obj-c++),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n+\t@$(call LINK_PROGRESS,$(INDEX.obj-c++),end)\n \n # Objective C++ language specific files.\n "}]}