{"sha": "f341c03203d8e8ca9965b73c5709337687d32cc2", "node_id": "C_kwDOANBUbNoAKGYzNDFjMDMyMDNkOGU4Y2E5OTY1YjczYzU3MDkzMzc2ODdkMzJjYzI", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-09T14:23:45Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:51Z"}, "message": "aarch64: Use type-qualified builtins for ADDP Neon intrinsics\n\nDeclare unsigned type-qualified builtins and use them to implement\nthe pairwise addition Neon intrinsics. This removes the need for many\ncasts in arm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-09  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def:\n\t* config/aarch64/arm_neon.h (vpaddq_u8): Use type-qualified\n\tbuiltin and remove casts.\n\t(vpaddq_u16): Likewise.\n\t(vpaddq_u32): Likewise.\n\t(vpaddq_u64): Likewise.\n\t(vpadd_u8): Likewise.\n\t(vpadd_u16): Likewise.\n\t(vpadd_u32): Likewise.\n\t(vpaddd_u64): Likewise.", "tree": {"sha": "02c52122b1f69aaf5d989008e90b6b194797b2a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02c52122b1f69aaf5d989008e90b6b194797b2a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f341c03203d8e8ca9965b73c5709337687d32cc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f341c03203d8e8ca9965b73c5709337687d32cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f341c03203d8e8ca9965b73c5709337687d32cc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f341c03203d8e8ca9965b73c5709337687d32cc2/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80ee260d5b573457cfff35279cf4895543532bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ee260d5b573457cfff35279cf4895543532bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ee260d5b573457cfff35279cf4895543532bc1"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "f09ff8dbe37f5af38ff9bc2b8bc6d9ff571ba3eb", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f341c03203d8e8ca9965b73c5709337687d32cc2/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f341c03203d8e8ca9965b73c5709337687d32cc2/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=f341c03203d8e8ca9965b73c5709337687d32cc2", "patch": "@@ -51,7 +51,9 @@\n   BUILTIN_VHSDF_HSDF (BINOP, fmulx, 0, FP)\n   BUILTIN_VHSDF_DF (UNOP, sqrt, 2, FP)\n   BUILTIN_VDQ_I (BINOP, addp, 0, NONE)\n+  BUILTIN_VDQ_I (BINOPU, addp, 0, NONE)\n   VAR1 (UNOP, addp, 0, NONE, di)\n+  VAR1 (UNOPU, addp, 0, NONE, di)\n   BUILTIN_VDQ_BHSI (UNOP, clrsb, 2, NONE)\n   BUILTIN_VDQ_BHSI (UNOP, clz, 2, NONE)\n   BUILTIN_VS (UNOP, ctz, 2, NONE)"}, {"sha": "ce0162343e6b2acb3c0dc85802b7354cbee08b18", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f341c03203d8e8ca9965b73c5709337687d32cc2/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f341c03203d8e8ca9965b73c5709337687d32cc2/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=f341c03203d8e8ca9965b73c5709337687d32cc2", "patch": "@@ -8011,32 +8011,28 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return (uint8x16_t) __builtin_aarch64_addpv16qi ((int8x16_t) __a,\n-\t\t\t\t\t\t   (int8x16_t) __b);\n+  return __builtin_aarch64_addpv16qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_addpv8hi ((int16x8_t) __a,\n-\t\t\t\t\t\t  (int16x8_t) __b);\n+  return __builtin_aarch64_addpv8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_addpv4si ((int32x4_t) __a,\n-\t\t\t\t\t\t  (int32x4_t) __b);\n+  return __builtin_aarch64_addpv4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_u64 (uint64x2_t __a, uint64x2_t __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_addpv2di ((int64x2_t) __a,\n-\t\t\t\t\t\t  (int64x2_t) __b);\n+  return __builtin_aarch64_addpv2di_uuu (__a, __b);\n }\n \n __extension__ extern __inline int16x4_t\n@@ -20293,24 +20289,21 @@ __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadd_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_addpv8qi ((int8x8_t) __a,\n-\t\t\t\t\t\t (int8x8_t) __b);\n+  return __builtin_aarch64_addpv8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadd_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_addpv4hi ((int16x4_t) __a,\n-\t\t\t\t\t\t  (int16x4_t) __b);\n+  return __builtin_aarch64_addpv4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadd_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_addpv2si ((int32x2_t) __a,\n-\t\t\t\t\t\t  (int32x2_t) __b);\n+  return __builtin_aarch64_addpv2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline float32_t\n@@ -20338,7 +20331,7 @@ __extension__ extern __inline uint64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddd_u64 (uint64x2_t __a)\n {\n-  return __builtin_aarch64_addpdi ((int64x2_t) __a);\n+  return __builtin_aarch64_addpdi_uu (__a);\n }\n \n /* vqabs */"}]}