{"sha": "7dd8177fc7f953488a096ef37329781fda227d4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RkODE3N2ZjN2Y5NTM0ODhhMDk2ZWYzNzMyOTc4MWZkYTIyN2Q0Yg==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2003-12-09T03:44:35Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2003-12-09T03:44:35Z"}, "message": "cmath.tcc, [...]: Remove trailing whitespace.\n\n\t* include/c_std/cmath.tcc, include/c_std/std_cassert.h,\n\tinclude/c_std/std_cctype.h, include/c_std/std_cmath.h,\n\tinclude/c_std/std_cstddef.h, include/c_std/std_cstdio.h,\n\tinclude/c_std/std_cstdlib.h, include/c_std/std_cstring.h,\n\tinclude/c_std/std_cwchar.h, include/c_std/std_cwctype.h:\n\tRemove trailing whitespace.\n\nFrom-SVN: r74458", "tree": {"sha": "a110b9b040ad780bdc17bc89f256eddac21f2784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a110b9b040ad780bdc17bc89f256eddac21f2784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dd8177fc7f953488a096ef37329781fda227d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd8177fc7f953488a096ef37329781fda227d4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dd8177fc7f953488a096ef37329781fda227d4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd8177fc7f953488a096ef37329781fda227d4b/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b74e24ee216ceb814968057fa16cf551b70f66c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b74e24ee216ceb814968057fa16cf551b70f66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b74e24ee216ceb814968057fa16cf551b70f66c"}], "stats": {"total": 249, "additions": 129, "deletions": 120}, "files": [{"sha": "4d21b87af35c3784bb29a0d154bc9087c2bc89fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -1,3 +1,12 @@\n+2003-12-09  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* include/c_std/cmath.tcc, include/c_std/std_cassert.h,\n+\tinclude/c_std/std_cctype.h, include/c_std/std_cmath.h,\n+\tinclude/c_std/std_cstddef.h, include/c_std/std_cstdio.h,\n+\tinclude/c_std/std_cstdlib.h, include/c_std/std_cstring.h,\n+\tinclude/c_std/std_cwchar.h, include/c_std/std_cwctype.h:\n+\tRemove trailing whitespace.\n+\n 2003-12-09  Bernardo Innocenti  <bernie@develer.com>\n \n \t* include/c/std_cctype.h, include/c/std_cmath.h,"}, {"sha": "0ff9ed74b316cc47583f26ad6ef405f1638a983c", "filename": "libstdc++-v3/include/c_std/cmath.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -32,7 +32,7 @@\n #ifndef _GLIBCXX_CMATH_TCC\n #define _GLIBCXX_CMATH_TCC 1\n \n-namespace std \n+namespace std\n {\n   template<typename _Tp>\n     _Tp"}, {"sha": "9fc1079b82a681664344b641b979ae4b46f70f56", "filename": "libstdc++-v3/include/c_std/std_cassert.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cassert.h?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 \n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free"}, {"sha": "65a4214657c9eef1c2e5808d886dd9beb16ccf9a", "filename": "libstdc++-v3/include/c_std/std_cctype.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cctype.h?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -80,4 +80,4 @@ namespace std\n   using ::toupper;\n }\n \n-#endif \n+#endif"}, {"sha": "fcac8210d08e07845f16ff4885d3f4282806789f", "filename": "libstdc++-v3/include/c_std/std_cmath.h", "status": "modified", "additions": 82, "deletions": 82, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -78,7 +78,7 @@\n #undef tanh\n \n \n-namespace std \n+namespace std\n {\n   // Forward declaration of a helper function.  This really should be\n   // an `exported' forward declaration.\n@@ -112,14 +112,14 @@ namespace std\n     {\n       return __builtin_acos(__x);\n     }\n-  \n+\n   using ::asin;\n \n-  inline float \n+  inline float\n   asin(float __x)\n   { return __builtin_asinf(__x); }\n \n-  inline long double \n+  inline long double\n   asin(long double __x)\n   { return __builtin_asinl(__x); }\n \n@@ -130,26 +130,26 @@ namespace std\n \n   using ::atan;\n \n-  inline float \n+  inline float\n   atan(float __x)\n   { return __builtin_atanf(__x); }\n \n-  inline long double \n+  inline long double\n   atan(long double __x)\n   { return __builtin_atanl(__x); }\n \n   template<typename _Tp>\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     atan(_Tp __x)\n     { return __builtin_atan(__x); }\n-  \n+\n   using ::atan2;\n \n-  inline float \n+  inline float\n   atan2(float __y, float __x)\n   { return __builtin_atan2f(__y, __x); }\n \n-  inline long double \n+  inline long double\n   atan2(long double __y, long double __x)\n   { return __builtin_atan2l(__y, __x); }\n \n@@ -161,19 +161,19 @@ namespace std\n \n   using ::ceil;\n \n-  inline float \n+  inline float\n   ceil(float __x)\n   { return __builtin_ceilf(__x); }\n \n-  inline long double \n+  inline long double\n   ceil(long double __x)\n   { return __builtin_ceill(__x); }\n \n   template<typename _Tp>\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     ceil(_Tp __x)\n     { return __builtin_ceil(__x); }\n-  \n+\n   using ::cos;\n \n   inline float\n@@ -191,11 +191,11 @@ namespace std\n \n   using ::cosh;\n \n-  inline float \n+  inline float\n   cosh(float __x)\n   { return __builtin_coshf(__x); }\n \n-  inline long double \n+  inline long double\n   cosh(long double __x)\n   { return __builtin_coshl(__x); }\n \n@@ -206,19 +206,19 @@ namespace std\n \n   using ::exp;\n \n-  inline float \n+  inline float\n   exp(float __x)\n   { return __builtin_expf(__x); }\n \n-  inline long double \n+  inline long double\n   exp(long double __x)\n   { return __builtin_expl(__x); }\n \n   template<typename _Tp>\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     exp(_Tp __x)\n     { return __builtin_exp(__x); }\n-  \n+\n   using ::fabs;\n \n   inline float\n@@ -236,51 +236,51 @@ namespace std\n \n   using ::floor;\n \n-  inline float \n+  inline float\n   floor(float __x)\n   { return __builtin_floorf(__x); }\n \n-  inline long double \n+  inline long double\n   floor(long double __x)\n   { return __builtin_floorl(__x); }\n \n   template<typename _Tp>\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     floor(_Tp __x)\n     { return __builtin_floor(__x); }\n-  \n+\n   using ::fmod;\n \n-  inline float \n+  inline float\n   fmod(float __x, float __y)\n   { return __builtin_fmodf(__x, __y); }\n \n-  inline long double \n+  inline long double\n   fmod(long double __x, long double __y)\n   { return __builtin_fmodl(__x, __y); }\n \n   using ::frexp;\n \n-  inline float \n+  inline float\n   frexp(float __x, int* __exp)\n   { return __builtin_frexpf(__x, __exp); }\n \n-  inline long double \n+  inline long double\n   frexp(long double __x, int* __exp)\n   { return __builtin_frexpl(__x, __exp); }\n \n   template<typename _Tp>\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     frexp(_Tp __x, int* __exp)\n     { return __builtin_frexp(__x, __exp); }\n-  \n+\n   using ::ldexp;\n \n-  inline float \n+  inline float\n   ldexp(float __x, int __exp)\n   { return __builtin_ldexpf(__x, __exp); }\n \n-  inline long double \n+  inline long double\n   ldexp(long double __x, int __exp)\n   { return __builtin_ldexpl(__x, __exp); }\n \n@@ -291,41 +291,41 @@ namespace std\n \n   using ::log;\n \n-  inline float \n+  inline float\n   log(float __x)\n   { return __builtin_logf(__x); }\n \n-  inline long double \n+  inline long double\n   log(long double __x)\n   { return __builtin_logl(__x); }\n \n   template<typename _Tp>\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     log(_Tp __x)\n     { return __builtin_log(__x); }\n-  \n+\n   using ::log10;\n \n-  inline float \n+  inline float\n   log10(float __x)\n   { return __builtin_log10f(__x); }\n \n-  inline long double \n+  inline long double\n   log10(long double __x)\n   { return __builtin_log10l(__x); }\n \n   template<typename _Tp>\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     log10(_Tp __x)\n     { return __builtin_log10(__x); }\n-  \n+\n   using ::modf;\n \n-  inline float \n+  inline float\n   modf(float __x, float* __iptr)\n   { return __builtin_modff(__x, __iptr); }\n \n-  inline long double \n+  inline long double\n   modf(long double __x, long double* __iptr)\n   { return __builtin_modfl(__x, __iptr); }\n \n@@ -340,23 +340,23 @@ namespace std\n \n   using ::pow;\n \n-  inline float \n+  inline float\n   pow(float __x, float __y)\n   { return __builtin_powf(__x, __y); }\n \n-  inline long double \n+  inline long double\n   pow(long double __x, long double __y)\n   { return __builtin_powl(__x, __y); }\n \n-  inline double \n+  inline double\n   pow(double __x, int __i)\n   { return __pow_helper(__x, __i); }\n \n-  inline float \n+  inline float\n   pow(float __x, int __n)\n   { return __pow_helper(__x, __n); }\n \n-  inline long double \n+  inline long double\n   pow(long double __x, int __n)\n   { return __pow_helper(__x, __n); }\n \n@@ -377,19 +377,19 @@ namespace std\n \n   using ::sinh;\n \n-  inline float \n+  inline float\n   sinh(float __x)\n   { return __builtin_sinhf(__x); }\n \n-  inline long double \n+  inline long double\n   sinh(long double __x)\n   { return __builtin_sinhl(__x); }\n \n   template<typename _Tp>\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     sinh(_Tp __x)\n     { return __builtin_sinh(__x); }\n-  \n+\n   using ::sqrt;\n \n   inline float\n@@ -404,97 +404,97 @@ namespace std\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     sqrt(_Tp __x)\n     { return __builtin_sqrt(__x); }\n-  \n+\n   using ::tan;\n \n-  inline float \n+  inline float\n   tan(float __x)\n   { return __builtin_tanf(__x); }\n \n-  inline long double \n+  inline long double\n   tan(long double __x)\n   { return __builtin_tanl(__x); }\n \n   template<typename _Tp>\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     tan(_Tp __x)\n     { return __builtin_tan(__x); }\n-  \n+\n   using ::tanh;\n \n-  inline float \n+  inline float\n   tanh(float __x)\n   { return __builtin_tanhf(__x); }\n \n-  inline long double \n+  inline long double\n   tanh(long double __x)\n   { return __builtin_tanhl(__x); }\n \n   template<typename _Tp>\n     inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n     tanh(_Tp __x)\n     { return __builtin_tanh(__x); }\n-} \n+}\n \n \n #if _GLIBCXX_USE_C99\n #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n // These are possible macros imported from C99-land. For strict\n // conformance, remove possible C99-injected names from the global\n-// namespace, and sequester them in the __gnu_cxx extension namespace. \n+// namespace, and sequester them in the __gnu_cxx extension namespace.\n namespace __gnu_cxx\n {\n   template<typename _Tp>\n-    int \n+    int\n     __capture_fpclassify(_Tp __f) { return fpclassify(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     __capture_isfinite(_Tp __f) { return isfinite(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     __capture_isinf(_Tp __f) { return isinf(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     __capture_isnan(_Tp __f) { return isnan(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     __capture_isnormal(_Tp __f) { return isnormal(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     __capture_signbit(_Tp __f) { return signbit(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     __capture_isgreater(_Tp __f1, _Tp __f2)\n     { return isgreater(__f1, __f2); }\n \n   template<typename _Tp>\n-     int \n-     __capture_isgreaterequal(_Tp __f1, _Tp __f2) \n+     int\n+     __capture_isgreaterequal(_Tp __f1, _Tp __f2)\n      { return isgreaterequal(__f1, __f2); }\n \n   template<typename _Tp>\n-     int \n+     int\n      __capture_isless(_Tp __f1, _Tp __f2) { return isless(__f1, __f2); }\n \n   template<typename _Tp>\n-     int \n-     __capture_islessequal(_Tp __f1, _Tp __f2) \n+     int\n+     __capture_islessequal(_Tp __f1, _Tp __f2)\n      { return islessequal(__f1, __f2); }\n \n   template<typename _Tp>\n-     int \n-     __capture_islessgreater(_Tp __f1, _Tp __f2) \n+     int\n+     __capture_islessgreater(_Tp __f1, _Tp __f2)\n      { return islessgreater(__f1, __f2); }\n \n   template<typename _Tp>\n-     int \n-     __capture_isunordered(_Tp __f1, _Tp __f2) \n+     int\n+     __capture_isunordered(_Tp __f1, _Tp __f2)\n      { return isunordered(__f1, __f2); }\n }\n \n@@ -527,47 +527,47 @@ namespace __gnu_cxx\n     isfinite(_Tp __f) { return __capture_isfinite(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     isinf(_Tp __f) { return __capture_isinf(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     isnan(_Tp __f) { return __capture_isnan(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     isnormal(_Tp __f) { return __capture_isnormal(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     signbit(_Tp __f) { return __capture_signbit(__f); }\n \n   template<typename _Tp>\n-    int \n+    int\n     isgreater(_Tp __f1, _Tp __f2) { return __capture_isgreater(__f1, __f2); }\n \n   template<typename _Tp>\n-    int \n-    isgreaterequal(_Tp __f1, _Tp __f2) \n+    int\n+    isgreaterequal(_Tp __f1, _Tp __f2)\n     { return __capture_isgreaterequal(__f1, __f2); }\n \n   template<typename _Tp>\n-    int \n+    int\n     isless(_Tp __f1, _Tp __f2) { return __capture_isless(__f1, __f2); }\n \n   template<typename _Tp>\n-    int \n-    islessequal(_Tp __f1, _Tp __f2) \n+    int\n+    islessequal(_Tp __f1, _Tp __f2)\n     { return __capture_islessequal(__f1, __f2); }\n \n   template<typename _Tp>\n-    int \n-    islessgreater(_Tp __f1, _Tp __f2) \n+    int\n+    islessgreater(_Tp __f1, _Tp __f2)\n     { return __capture_islessgreater(__f1, __f2); }\n \n   template<typename _Tp>\n-    int \n-    isunordered(_Tp __f1, _Tp __f2) \n+    int\n+    isunordered(_Tp __f1, _Tp __f2)\n     { return __capture_isunordered(__f1, __f2); }\n }\n \n@@ -588,7 +588,7 @@ namespace std\n }\n #endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n #endif\n-  \n+\n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include <bits/cmath.tcc>\n #endif"}, {"sha": "4fa82c6aa9b46fcc32e36c6d11716d25b243c1a7", "filename": "libstdc++-v3/include/c_std/std_cstddef.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstddef.h?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -47,7 +47,7 @@\n \n #include <stddef.h>\n \n-namespace std \n+namespace std\n {\n   using ::ptrdiff_t;\n   using ::size_t;"}, {"sha": "f31e58e6f2498bfa16ccfa0f0e36fa41e2d535c4", "filename": "libstdc++-v3/include/c_std/std_cstdio.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -94,7 +94,7 @@\n #undef vprintf\n #undef vsprintf\n \n-namespace std \n+namespace std\n {\n   using ::FILE;\n   using ::fpos_t;\n@@ -180,6 +180,6 @@ namespace std\n   using __gnu_cxx::vsnprintf;\n   using __gnu_cxx::vsscanf;\n }\n-#endif \n+#endif\n \n #endif"}, {"sha": "d2d6e37064b555540c2972226fce2c1f5749a1dd", "filename": "libstdc++-v3/include/c_std/std_cstdlib.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdlib.h?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -81,7 +81,7 @@\n #undef wcstombs\n #undef wctomb\n \n-namespace std \n+namespace std\n {\n   using ::div_t;\n   using ::ldiv_t;\n@@ -117,14 +117,14 @@ namespace std\n #ifdef _GLIBCXX_USE_WCHAR_T\n   using ::wcstombs;\n   using ::wctomb;\n-#endif // _GLIBCXX_USE_WCHAR_T \n+#endif // _GLIBCXX_USE_WCHAR_T\n \n-  inline long \n+  inline long\n   abs(long __i) { return labs(__i); }\n \n   inline ldiv_t\n   div(long __i, long __j) { return ldiv(__i, __j); }\n-} \n+}\n \n #if _GLIBCXX_USE_C99\n \n@@ -149,18 +149,18 @@ namespace __gnu_cxx\n   using ::_Exit;\n #endif\n \n-  inline long long \n+  inline long long\n   abs(long long __x) { return __x >= 0 ? __x : -__x; }\n \n-  inline long long \n+  inline long long\n   llabs(long long __x) { return __x >= 0 ? __x : -__x; }\n \n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n-  inline lldiv_t \n+  inline lldiv_t\n   div(long long __n, long long __d)\n   { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n \n-  inline lldiv_t \n+  inline lldiv_t\n   lldiv(long long __n, long long __d)\n   { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n #endif\n@@ -178,18 +178,18 @@ namespace __gnu_cxx\n   using ::strtoull;\n #endif\n   using ::strtof;\n-  using ::strtold; \n-} \n+  using ::strtold;\n+}\n \n namespace std\n {\n-#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC \n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using __gnu_cxx::lldiv_t;\n #endif\n   using __gnu_cxx::_Exit;\n   using __gnu_cxx::abs;\n-  using __gnu_cxx::llabs; \n-#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC \n+  using __gnu_cxx::llabs;\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using __gnu_cxx::div;\n   using __gnu_cxx::lldiv;\n #endif\n@@ -201,4 +201,4 @@ namespace std\n }\n #endif\n \n-#endif \n+#endif"}, {"sha": "dad40c290ad3a1857f87d6dfdd20f8aec8c6e576", "filename": "libstdc++-v3/include/c_std/std_cstring.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstring.h?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -74,7 +74,7 @@\n #undef strerror\n #undef strlen\n \n-namespace std \n+namespace std\n {\n   using ::memcpy;\n   using ::memmove;"}, {"sha": "e3b7cdd5870d90a071a47769c91a8925e9f9b82f", "filename": "libstdc++-v3/include/c_std/std_cwchar.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwchar.h?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -57,16 +57,16 @@\n // Need to do a bit of trickery here with mbstate_t as char_traits\n // assumes it is in wchar.h, regardless of wchar_t specializations.\n #ifndef _GLIBCXX_HAVE_MBSTATE_T\n-extern \"C\" \n+extern \"C\"\n {\n-  typedef struct \n+  typedef struct\n   {\n     int __fill[6];\n   } mbstate_t;\n }\n #endif\n \n-namespace std \n+namespace std\n {\n   using ::mbstate_t;\n }\n@@ -94,15 +94,15 @@ namespace std\n #undef vfwprintf\n #if _GLIBCXX_HAVE_VFWSCANF\n # undef vfwscanf\n-#endif \n+#endif\n #undef vswprintf\n #if _GLIBCXX_HAVE_VSWSCANF\n # undef vswscanf\n-#endif \n+#endif\n #undef vwprintf\n #if _GLIBCXX_HAVE_VWSCANF\n # undef vwscanf\n-#endif \n+#endif\n #undef wcrtomb\n #undef wcscat\n #undef wcschr\n@@ -123,7 +123,7 @@ namespace std\n #undef wcstod\n #if _GLIBCXX_HAVE_WCSTOF\n # undef wcstof\n-#endif \n+#endif\n #undef wcstok\n #undef wcstol\n #undef wcstoul\n@@ -164,15 +164,15 @@ namespace std\n   using ::vfwprintf;\n #if _GLIBCXX_HAVE_VFWSCANF\n   using ::vfwscanf;\n-#endif \n+#endif\n   using ::vswprintf;\n #if _GLIBCXX_HAVE_VSWSCANF\n   using ::vswscanf;\n-#endif \n+#endif\n   using ::vwprintf;\n #if _GLIBCXX_HAVE_VWSCANF\n   using ::vwscanf;\n-#endif \n+#endif\n   using ::wcrtomb;\n   using ::wcscat;\n   using ::wcscmp;\n@@ -189,7 +189,7 @@ namespace std\n   using ::wcstod;\n #if _GLIBCXX_HAVE_WCSTOF\n   using ::wcstof;\n-#endif \n+#endif\n   using ::wcstok;\n   using ::wcstol;\n   using ::wcstoul;\n@@ -270,4 +270,4 @@ namespace std\n \n #endif //_GLIBCXX_USE_WCHAR_T\n \n-#endif \n+#endif"}, {"sha": "970c53a8f3d231b3e58ad67c3dc0346b830cf368", "filename": "libstdc++-v3/include/c_std/std_cwctype.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd8177fc7f953488a096ef37329781fda227d4b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h?ref=7dd8177fc7f953488a096ef37329781fda227d4b", "patch": "@@ -57,7 +57,7 @@\n #undef iswalpha\n #if _GLIBCXX_HAVE_ISWBLANK\n # undef iswblank\n-#endif \n+#endif\n #undef iswcntrl\n #undef iswdigit\n #undef iswgraph\n@@ -68,7 +68,7 @@\n #undef iswspace\n #undef iswupper\n #undef iswxdigit\n-#undef iswctype  \n+#undef iswctype\n #undef towlower\n #undef towupper\n #undef towctrans\n@@ -78,7 +78,7 @@\n #if _GLIBCXX_USE_WCHAR_T\n namespace std\n {\n-  using ::wint_t; \t  // cwchar\n+  using ::wint_t;\t  // cwchar\n \n   using ::wctype_t;\n   using ::wctrans_t;\n@@ -87,7 +87,7 @@ namespace std\n   using ::iswalpha;\n #if _GLIBCXX_HAVE_ISWBLANK\n   using ::iswblank;\n-#endif \n+#endif\n   using ::iswcntrl;\n   using ::iswdigit;\n   using ::iswgraph;\n@@ -107,4 +107,4 @@ namespace std\n }\n #endif //_GLIBCXX_USE_WCHAR_T\n \n-#endif \n+#endif"}]}