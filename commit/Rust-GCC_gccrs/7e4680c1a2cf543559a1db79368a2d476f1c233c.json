{"sha": "7e4680c1a2cf543559a1db79368a2d476f1c233c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U0NjgwYzFhMmNmNTQzNTU5YTFkYjc5MzY4YTJkNDc2ZjFjMjMzYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-06-18T10:18:38Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-06-18T10:18:38Z"}, "message": "einfo.ads (Address_Taken): Document use for the second argument of Asm_Input and Asm_Output attributes.\n\n\t* einfo.ads (Address_Taken): Document use for the second argument of\n\tAsm_Input and Asm_Output attributes.\n\t* sem_attr.adb (Analyze_Attribute) <Attribute_Asm_Input>: If the second\n\targument is an entity name, then set Address_Taken on it.\n\t<Attribute_Asm_Output>: Likewise.\n\t* gcc-interface/trans.c (lvalue_required_for_attribute_p): Handle the\n\tAttr_Asm_Input and Attr_Asm_Output attributes explicitly.\n\t(gnat_to_gnu) <N_Code_Statement>: If an operand is going to end up in\n\tmemory and is a CONST_DECL, retrieve its corresponding VAR_DECL.\n\nFrom-SVN: r175171", "tree": {"sha": "a7356c2f1b6f9502b952ce84f57e10fc9f2fe1b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7356c2f1b6f9502b952ce84f57e10fc9f2fe1b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e4680c1a2cf543559a1db79368a2d476f1c233c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4680c1a2cf543559a1db79368a2d476f1c233c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e4680c1a2cf543559a1db79368a2d476f1c233c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4680c1a2cf543559a1db79368a2d476f1c233c/comments", "author": null, "committer": null, "parents": [{"sha": "0e27699a8a99b215173bd62e83e91f9d7128a826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e27699a8a99b215173bd62e83e91f9d7128a826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e27699a8a99b215173bd62e83e91f9d7128a826"}], "stats": {"total": 90, "additions": 78, "deletions": 12}, "files": [{"sha": "b3db7a928c38a5fc53b8c2ef0b1ab7fe82ecc0ed", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7e4680c1a2cf543559a1db79368a2d476f1c233c", "patch": "@@ -1,4 +1,16 @@\n-2010-06-16  Joern Rennecke  <joern.rennecke@embecosm.com>\n+2011-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Address_Taken): Document use for the second argument of\n+\tAsm_Input and Asm_Output attributes.\n+\t* sem_attr.adb (Analyze_Attribute) <Attribute_Asm_Input>: If the second\n+\targument is an entity name, then set Address_Taken on it.\n+\t<Attribute_Asm_Output>: Likewise.\n+\t* gcc-interface/trans.c (lvalue_required_for_attribute_p): Handle the\n+\tAttr_Asm_Input and Attr_Asm_Output attributes explicitly.\n+\t(gnat_to_gnu) <N_Code_Statement>: If an operand is going to end up in\n+\tmemory and is a CONST_DECL, retrieve its corresponding VAR_DECL.\n+\n+2011-06-16  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR middle-end/46500\n \t* gcc-interface/decl.c (gnat_to_gnu_param): Use pack_cumulative_args."}, {"sha": "577b208f4367ac5d49e6200b23f5efc275db0165", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=7e4680c1a2cf543559a1db79368a2d476f1c233c", "patch": "@@ -380,9 +380,11 @@ package Einfo is\n --    Address_Taken (Flag104)\n --       Present in all entities. Set if the Address or Unrestricted_Access\n --       attribute is applied directly to the entity, i.e. the entity is the\n---       entity of the prefix of the attribute reference. Used by Gigi to\n---       make sure that the address can be meaningfully taken, and also in\n---       the case of subprograms to control output of certain warnings.\n+--       entity of the prefix of the attribute reference. Also set if the\n+--       entity is the second argument of an Asm_Input or Asm_Output attribute,\n+--       as the construct may entail taking its address. Used by Gigi to make\n+--       sure that the address can be meaningfully taken, and also in the case\n+--       of subprograms to control output of certain warnings.\n \n --    Aft_Value (synthesized)\n --       Applies to fixed and decimal types. Computes a universal integer"}, {"sha": "8e949a89edc586e631e5f368969d27cf56ef4535", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=7e4680c1a2cf543559a1db79368a2d476f1c233c", "patch": "@@ -706,6 +706,8 @@ lvalue_required_for_attribute_p (Node_Id gnat_node)\n     case Attr_First_Bit:\n     case Attr_Last_Bit:\n     case Attr_Bit:\n+    case Attr_Asm_Input:\n+    case Attr_Asm_Output:\n     default:\n       return 1;\n     }\n@@ -5489,9 +5491,15 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t     mark it addressable.  Note that we don't test\n \t\t     allows_mem like in the input case below; this\n \t\t     is modelled on the C front-end.  */\n-\t\t  if (!allows_reg\n-\t\t      && !gnat_mark_addressable (output))\n-\t\t    output = error_mark_node;\n+\t\t  if (!allows_reg)\n+\t\t    {\n+\t\t      STRIP_NOPS (output);\n+\t\t      if (TREE_CODE (output) == CONST_DECL\n+\t\t\t  && DECL_CONST_CORRESPONDING_VAR (output))\n+\t\t\toutput = DECL_CONST_CORRESPONDING_VAR (output);\n+\t\t      if (!gnat_mark_addressable (output))\n+\t\t\toutput = error_mark_node;\n+\t\t    }\n \t\t}\n \t      else\n \t\toutput = error_mark_node;\n@@ -5511,9 +5519,15 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t{\n \t\t  /* If the operand is going to end up in memory,\n \t\t     mark it addressable.  */\n-\t\t  if (!allows_reg && allows_mem\n-\t\t      && !gnat_mark_addressable (input))\n-\t\t    input = error_mark_node;\n+\t\t  if (!allows_reg && allows_mem)\n+\t\t    {\n+\t\t      STRIP_NOPS (input);\n+\t\t      if (TREE_CODE (input) == CONST_DECL\n+\t\t\t  && DECL_CONST_CORRESPONDING_VAR (input))\n+\t\t\tinput = DECL_CONST_CORRESPONDING_VAR (input);\n+\t\t      if (!gnat_mark_addressable (input))\n+\t\t\tinput = error_mark_node;\n+\t\t    }\n \t\t}\n \t      else\n \t\tinput = error_mark_node;"}, {"sha": "b2c7a835674b81d4b69f020075e74a8878ef30e4", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=7e4680c1a2cf543559a1db79368a2d476f1c233c", "patch": "@@ -2243,6 +2243,13 @@ package body Sem_Attr is\n \n       when Attribute_Asm_Input =>\n          Check_Asm_Attribute;\n+\n+         --  The back-end may need to take the address of E2\n+\n+         if Is_Entity_Name (E2) then\n+            Set_Address_Taken (Entity (E2));\n+         end if;\n+\n          Set_Etype (N, RTE (RE_Asm_Input_Operand));\n \n       ----------------\n@@ -2263,6 +2270,13 @@ package body Sem_Attr is\n          end if;\n \n          Note_Possible_Modification (E2, Sure => True);\n+\n+         --  The back-end may need to take the address of E2\n+\n+         if Is_Entity_Name (E2) then\n+            Set_Address_Taken (Entity (E2));\n+         end if;\n+\n          Set_Etype (N, RTE (RE_Asm_Output_Operand));\n \n       ---------------"}, {"sha": "dcd4919007588ef464e445876a4f76df82dd159b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e4680c1a2cf543559a1db79368a2d476f1c233c", "patch": "@@ -1,3 +1,7 @@\n+2011-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/constant3.adb: New test.\n+\n 2011-06-18  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/48296\n@@ -75,8 +79,7 @@\n 2011-06-16  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/49343\n-\t* gnat.dg/discr31.adb: New test.\n-\t* gnat.dg/discr31.ads: Likewise.\n+\t* gnat.dg/discr31.ad[sb]: New test.\n \n 2011-06-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n "}, {"sha": "5ca1792fbd216d907e25c0f92c4e01f2d2fc73f5", "filename": "gcc/testsuite/gnat.dg/constant3.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4680c1a2cf543559a1db79368a2d476f1c233c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant3.adb?ref=7e4680c1a2cf543559a1db79368a2d476f1c233c", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O\" }\n+\n+with System.Machine_code; use System.Machine_code;\n+\n+procedure Constant3 is\n+\n+  c : Integer := -1;\n+  r : Integer;\n+\n+  procedure Conv (res : out Integer; v : Integer) is\n+    v1 : constant Integer := v;\n+  begin\n+    Asm (\"\", Integer'Asm_output (\"=m\", res), Integer'Asm_input(\"m\", v1));\n+  end;\n+\n+  pragma Inline_Always (Conv);\n+\n+begin\n+  Conv (r, c);\n+end;"}]}