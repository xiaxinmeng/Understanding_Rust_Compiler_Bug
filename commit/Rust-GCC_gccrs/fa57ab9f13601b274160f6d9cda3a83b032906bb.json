{"sha": "fa57ab9f13601b274160f6d9cda3a83b032906bb", "node_id": "C_kwDOANBUbNoAKGZhNTdhYjlmMTM2MDFiMjc0MTYwZjZkOWNkYTNhODNiMDMyOTA2YmI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-24T13:17:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-24T13:17:41Z"}, "message": "Merge #1325\n\n1325: Add const generic disambiguation r=CohenArthur a=CohenArthur\n\nCloses #1321 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "0871910af6cb18634275b4d62e4c163f5d6606ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0871910af6cb18634275b4d62e4c163f5d6606ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa57ab9f13601b274160f6d9cda3a83b032906bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitbl1CRBK7hj4Ov3rIwAABEwIAKwAbymUkPaXodVqFnUIJ66v\n66Tb2W6FlnL7mAzuXpqTbyMkElPU4ge8jwUEIX4ZXZZT/Imdj1OPCr6llvdKH0Le\nhqmVRDaYKHvV5LS/vCP3Gh5x0aCZ5vUJ0Gpgzvx6UTAm3eprPa8gpgmtLRbFecTu\nLvR7m9vQg72mZdg/ll9eYjOhgDqNyL35LPgLpunEURZXELQ2X9glIoOai9Ashw4r\nW69kbzdWcxl38I+FDax9QMyB8pqrRIL2ce79JpDymv22Pn2rJIOuSBArDLeb7PaK\nmwU0PnP2KAp0UG7VCpVDbq7ahovmhcq3bFZeLjYFVWryaUXr11poofIa0WJ4Ih0=\n=VrfY\n-----END PGP SIGNATURE-----\n", "payload": "tree 0871910af6cb18634275b4d62e4c163f5d6606ad\nparent 991186154cf463dbcc2f6dc2f087c40e6de35c49\nparent 7f5ea92bbbcd92aab3ea0692d12527eb7cac30db\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1656076661 +0000\ncommitter GitHub <noreply@github.com> 1656076661 +0000\n\nMerge #1325\n\n1325: Add const generic disambiguation r=CohenArthur a=CohenArthur\n\nCloses #1321 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa57ab9f13601b274160f6d9cda3a83b032906bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa57ab9f13601b274160f6d9cda3a83b032906bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa57ab9f13601b274160f6d9cda3a83b032906bb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "991186154cf463dbcc2f6dc2f087c40e6de35c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991186154cf463dbcc2f6dc2f087c40e6de35c49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991186154cf463dbcc2f6dc2f087c40e6de35c49"}, {"sha": "7f5ea92bbbcd92aab3ea0692d12527eb7cac30db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5ea92bbbcd92aab3ea0692d12527eb7cac30db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5ea92bbbcd92aab3ea0692d12527eb7cac30db"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "0d4d36b36cc2150b29e09b726d354ee95ea85913", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa57ab9f13601b274160f6d9cda3a83b032906bb/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa57ab9f13601b274160f6d9cda3a83b032906bb/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=fa57ab9f13601b274160f6d9cda3a83b032906bb", "patch": "@@ -4096,10 +4096,10 @@ DelimTokenTree::parse_to_meta_item () const\n \n   /* assume top-level delim token tree in attribute - convert all nested ones\n    * to token stream */\n-  std::vector<std::unique_ptr<Token> > token_stream = to_token_stream ();\n+  std::vector<std::unique_ptr<Token>> token_stream = to_token_stream ();\n \n   AttributeParser parser (std::move (token_stream));\n-  std::vector<std::unique_ptr<MetaItemInner> > meta_items (\n+  std::vector<std::unique_ptr<MetaItemInner>> meta_items (\n     parser.parse_meta_item_seq ());\n \n   return new AttrInputMetaItemContainer (std::move (meta_items));\n@@ -4282,7 +4282,7 @@ AttributeParser::parse_path_meta_item ()\n   switch (peek_token ()->get_id ())\n     {\n       case LEFT_PAREN: {\n-\tstd::vector<std::unique_ptr<MetaItemInner> > meta_items\n+\tstd::vector<std::unique_ptr<MetaItemInner>> meta_items\n \t  = parse_meta_item_seq ();\n \n \treturn std::unique_ptr<MetaItemSeq> (\n@@ -4320,11 +4320,11 @@ AttributeParser::parse_path_meta_item ()\n \n /* Parses a parenthesised sequence of meta item inners. Parentheses are\n  * required here. */\n-std::vector<std::unique_ptr<MetaItemInner> >\n+std::vector<std::unique_ptr<MetaItemInner>>\n AttributeParser::parse_meta_item_seq ()\n {\n   int vec_length = token_stream.size ();\n-  std::vector<std::unique_ptr<MetaItemInner> > meta_items;\n+  std::vector<std::unique_ptr<MetaItemInner>> meta_items;\n \n   if (peek_token ()->get_id () != LEFT_PAREN)\n     {\n@@ -4364,13 +4364,13 @@ AttributeParser::parse_meta_item_seq ()\n \n /* Collects any nested token trees into a flat token stream, suitable for\n  * parsing. */\n-std::vector<std::unique_ptr<Token> >\n+std::vector<std::unique_ptr<Token>>\n DelimTokenTree::to_token_stream () const\n {\n-  std::vector<std::unique_ptr<Token> > tokens;\n+  std::vector<std::unique_ptr<Token>> tokens;\n   for (const auto &tree : token_trees)\n     {\n-      std::vector<std::unique_ptr<Token> > stream = tree->to_token_stream ();\n+      std::vector<std::unique_ptr<Token>> stream = tree->to_token_stream ();\n \n       tokens.insert (tokens.end (), std::make_move_iterator (stream.begin ()),\n \t\t     std::make_move_iterator (stream.end ()));\n@@ -4711,12 +4711,12 @@ MetaItemPathLit::check_cfg_predicate (const Session &session) const\n \t\t\t\t\t\t\t lit.as_string ());\n }\n \n-std::vector<std::unique_ptr<Token> >\n+std::vector<std::unique_ptr<Token>>\n Token::to_token_stream () const\n {\n   /* initialisation list doesn't work as it needs copy constructor, so have to\n    * do this */\n-  std::vector<std::unique_ptr<Token> > dummy_vector;\n+  std::vector<std::unique_ptr<Token>> dummy_vector;\n   dummy_vector.reserve (1);\n   dummy_vector.push_back (std::unique_ptr<Token> (clone_token_impl ()));\n   return dummy_vector;\n@@ -4744,7 +4744,7 @@ MetaItemPath::to_attribute () const\n Attribute\n MetaItemSeq::to_attribute () const\n {\n-  std::vector<std::unique_ptr<MetaItemInner> > new_seq;\n+  std::vector<std::unique_ptr<MetaItemInner>> new_seq;\n   new_seq.reserve (seq.size ());\n   for (const auto &e : seq)\n     new_seq.push_back (e->clone_meta_item_inner ());\n@@ -4768,7 +4768,7 @@ MetaListPaths::to_attribute () const\n    * no longer known). If conversions back are required, might have to do a\n    * \"check all are paths\" pass or something. */\n \n-  std::vector<std::unique_ptr<MetaItemInner> > new_seq;\n+  std::vector<std::unique_ptr<MetaItemInner>> new_seq;\n   new_seq.reserve (paths.size ());\n   for (const auto &e : paths)\n     new_seq.push_back (std::unique_ptr<MetaItemPath> (new MetaItemPath (e)));\n@@ -4782,7 +4782,7 @@ MetaListPaths::to_attribute () const\n Attribute\n MetaListNameValueStr::to_attribute () const\n {\n-  std::vector<std::unique_ptr<MetaItemInner> > new_seq;\n+  std::vector<std::unique_ptr<MetaItemInner>> new_seq;\n   new_seq.reserve (strs.size ());\n   for (const auto &e : strs)\n     new_seq.push_back (\n@@ -5792,5 +5792,17 @@ MetaWord::accept_vis (ASTVisitor &vis)\n {\n   vis.visit (*this);\n }\n+\n+ConstGenericArg\n+ConstGenericArg::disambiguate_to_const () const\n+{\n+  rust_assert (get_kind () == Kind::Ambiguous);\n+\n+  // FIXME: is it fine to have no outer attributes?\n+  return ConstGenericArg (std::unique_ptr<Expr> (\n+\t\t\t    new IdentifierExpr (path, {}, locus)),\n+\t\t\t  locus);\n+}\n+\n } // namespace AST\n } // namespace Rust"}, {"sha": "d2d925a01ce0a94c308aa7ee8a1869b48a5bc46b", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa57ab9f13601b274160f6d9cda3a83b032906bb/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa57ab9f13601b274160f6d9cda3a83b032906bb/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=fa57ab9f13601b274160f6d9cda3a83b032906bb", "patch": "@@ -208,6 +208,12 @@ class ConstGenericArg\n     return \"\";\n   }\n \n+  /**\n+   * Disambiguate an amibguous const generic argument or generic type argument\n+   * to a const generic argument, unequivocally\n+   */\n+  ConstGenericArg disambiguate_to_const () const;\n+\n private:\n   ConstGenericArg (std::unique_ptr<AST::Expr> expression, Identifier path,\n \t\t   Kind kind, Location locus)"}, {"sha": "a36107b2319d3f4eaef4adc988600ae0d797fc65", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa57ab9f13601b274160f6d9cda3a83b032906bb/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa57ab9f13601b274160f6d9cda3a83b032906bb/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=fa57ab9f13601b274160f6d9cda3a83b032906bb", "patch": "@@ -2892,9 +2892,11 @@ Parser<ManagedTokenSource>::parse_generic_param (EndTokenPred is_end_token)\n \t\t\t     \"%<identifier%> or %<literal%>, got %qs\",\n \t\t\t     token_id_to_str (tok->get_id ()));\n \n-\t    // TODO: At this point, we *know* that we are parsing a const\n-\t    // expression. We should figure out how to disambiguate the default\n-\t    // expr in the case of `const N: usize = M`\n+\t    // At this point, we *know* that we are parsing a const\n+\t    // expression\n+\t    if (default_expr.get_kind ()\n+\t\t== AST::ConstGenericArg::Kind::Ambiguous)\n+\t      default_expr = default_expr.disambiguate_to_const ();\n \t  }\n \n \tparam = std::unique_ptr<AST::ConstGenericParam> ("}]}