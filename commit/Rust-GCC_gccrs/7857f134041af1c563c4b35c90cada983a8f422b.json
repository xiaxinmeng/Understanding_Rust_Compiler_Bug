{"sha": "7857f134041af1c563c4b35c90cada983a8f422b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1N2YxMzQwNDFhZjFjNTYzYzRiMzVjOTBjYWRhOTgzYThmNDIyYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-05-17T03:16:18Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-05-17T03:16:18Z"}, "message": "i\t* libgcc1-test.c, libgcc1.c, config/i386/perform.h: Delete file.\n\n\t* testsuite/gcc.dg/complete-port.c: New (revised version of\n\tlibgcc1-test.c)\n\t* po/POTFILES.in: Remove libgcc1-test.c and libgcc1.c.\n\n\t* Makefile.in: Delete variables: OLDCC, CCLIBFLAGS, OLDAR,\n\tOLDAR_FLAGS, LIBGCC1, LIBGCC1_TEST, CROSS_LIBGCC1,\n\tLIB1FUNCS, and LIB1FUNCS_EXTRA.  Delete rules: libgcc1-test,\n\tlibgcc1-test.o.  Clarify commentary now that libgcc1 no longer exists.\n\t* cross-make: Don't set LIBGCC1.\n\t* mklibgcc.in: Delete all code for building from libgcc1.c.\n\tAlways honor LIB1ASMFUNCS if set.\n\n\t* crtstuff.c, floatlib.c, longlong.h, config/fp-bit.c,\n\tconfig/arc/lib1funcs.asm, config/arm/lib1funcs.asm,\n\tconfig/d30v/libgcc1.asm, config/fr30/lib1funcs.asm,\n\tconfig/h8300/lib1funcs.asm, config/i386/cygwin.asm,\n\tconfig/i386/uwin.asm, config/m68hc11/larith.asm,\n\tconfig/m68k/lb1sf68.asm, config/mcore/lib1.asm,\n\tconfig/mn10200/lib1funcs.asm, config/sh/lib1funcs.asm,\n\tconfig/sparc/lb1spc.asm, config/sparc/lb1spl.asm,\n\tconfig/v850/lib1funcs.asm, config/c4x/libgcc.S:\n\tDelete or update references to libgcc1 in commentary.\n\n\t* config/t-libc-ok, config/t-linux, config/t-linux-aout,\n\tconfig/t-netbsd, config/a29k/t-a29kbare, config/a29k/t-vx29k,\n\tconfig/alpha/t-interix, config/alpha/t-osf, config/alpha/t-vms,\n\tconfig/arc/t-arc, config/arm/t-arm-aout, config/arm/t-arm-coff,\n\tconfig/arm/t-arm-elf, config/arm/t-linux, config/arm/t-pe,\n\tconfig/arm/t-semi, config/arm/t-strongarm-coff,\n\tconfig/arm/t-strongarm-elf, config/arm/t-strongarm-pe,\n\tconfig/arm/t-xscale-coff, config/arm/t-xscale-elf, config/avr/t-avr,\n\tconfig/c4x/t-c4x, config/d30v/t-d30v, config/fr30/t-fr30,\n\tconfig/h8300/t-h8300, config/i386/t-beos, config/i386/t-cygwin,\n\tconfig/i386/t-i386elf, config/i386/t-interix, config/i386/t-netware,\n\tconfig/i386/t-next, config/i386/t-rtems-i386, config/i386/t-sol2,\n\tconfig/i960/t-960bare, config/i960/t-vxworks960, config/ia64/t-ia64,\n\tconfig/m32r/t-m32r, config/m68hc11/t-m68hc11-gas, config/m68k/t-lynx,\n\tconfig/m68k/t-m68kbare, config/m68k/t-m68kelf,\n\tconfig/m68k/t-mot3300-gald, config/m68k/t-mot3300-gas,\n\tconfig/m68k/t-next, config/m68k/t-vxworks68, config/m88k/t-bug,\n\tconfig/m88k/t-dgux, config/m88k/t-dgux-gas, config/m88k/t-dguxbcs,\n\tconfig/m88k/t-luna, config/m88k/t-luna-gas, config/m88k/t-m88k,\n\tconfig/m88k/t-m88k-gas, config/m88k/t-sysv4, config/mcore/t-mcore,\n\tconfig/mcore/t-mcore-pe, config/mips/t-bsd, config/mips/t-bsd-gas,\n\tconfig/mips/t-cross64, config/mips/t-ecoff, config/mips/t-elf,\n\tconfig/mips/t-iris6, config/mips/t-r3900, config/mips/t-svr3,\n\tconfig/mips/t-svr3-gas, config/mips/t-svr4, config/mips/t-svr4-gas,\n\tconfig/mips/t-ultrix, config/mn10200/t-mn10200,\n\tconfig/mn10300/t-mn10300, config/pa/t-linux, config/pa/t-linux64,\n\tconfig/pa/t-pa, config/pa/t-pa64, config/pa/t-pro,\n\tconfig/pdp11/t-pdp11, config/pj/t-pj, config/rs6000/t-aix43,\n\tconfig/rs6000/t-beos, config/rs6000/t-darwin, config/rs6000/t-newas,\n\tconfig/rs6000/t-ppccomm, config/rs6000/t-rs6000, config/sh/t-linux,\n\tconfig/sh/t-sh, config/sparc/t-chorus-elf, config/sparc/t-elf,\n\tconfig/sparc/t-sol2, config/sparc/t-sp86x, config/sparc/t-sparcbare,\n\tconfig/sparc/t-sparclite, config/sparc/t-splet,\n\tconfig/sparc/t-sunos41, config/sparc/t-vxsparc,\n\tconfig/sparc/t-vxsparc64, config/v850/t-v850:\n\tDon't set any of LIBGCC1, CROSS_LIBGCC1, or LIBGCC1_TEST.\n\n\t* config/alpha/alpha.h, config/i386/i386.h, config/i860/i860.h:\n\tDon't set FLOAT_VALUE_TYPE, FLOAT_ARG_TYPE, INTIFY, or FLOATIFY.\n\t* config/d30v/d30v.h: Don't mention LIBGCC_NEEDS_DOUBLE,\n\tFLOAT_VALUE_TYPE, FLOAT_ARG_TYPE, FLOATIFY, INTIFY,\n\tnongcc_SI_type, nongcc_word_type, or perform_*\n\t* config/i860/fx2800: Don't define perform_umodsi3 or perform_modsi3.\n\n\t* config/i386/386bsd.h, config/i386/beos-elf.h,\n\tconfig/i386/linux-aout.h, config/i386/linux-oldld.h,\n\tconfig/i386/linux.h, config/i386/mach.h, config/i386/netbsd.h,\n\tconfig/i386/openbsd.h, config/i386/osfrose.h, config/i386/rtemself.h:\n\tDon't include i386/perform.h.\n\n\t* config/a29k/t-a29k, config/arm/t-semiaof, config/i370/t-i370,\n\tconfig/i370/t-linux, config/i370/t-mvs, config/i370/t-oe,\n\tconfig/i386/t-djgpp, config/i386/t-i386bare, config/i386/t-vsta,\n\tconfig/ia64/t-hpux, config/mips/t-mips, config/mips/t-mips-gas,\n\tconfig/mips/t-osfrose, config/sparc/t-sp64, config/sparc/t-sunos40,\n\tconfig/vax/t-openbsd, config/vax/t-vax: Delete.\n\n\t* config.gcc: Remove references to deleted files.\n\t(arm-semi-aof): Use arm/t-semi for tmake_file.\n\n\t* gcc.texi, install.texi, invoke.texi, tm.texi:\n\tDelete or rewrite text which is no longer relevant now that\n\tlibgcc1 no longer exists.\n\n\t* config/t-openbsd, config/alpha/t-interix, config/i386/t-interix:\n\tNo need to set INSTALL_ASSERT_H.  (Missed in previous sweep.)\n\nFrom-SVN: r42188", "tree": {"sha": "dbdab8a8c0d39325376980fcbc82309a2687b1e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbdab8a8c0d39325376980fcbc82309a2687b1e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7857f134041af1c563c4b35c90cada983a8f422b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7857f134041af1c563c4b35c90cada983a8f422b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7857f134041af1c563c4b35c90cada983a8f422b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7857f134041af1c563c4b35c90cada983a8f422b/comments", "author": null, "committer": null, "parents": [{"sha": "1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db"}], "stats": {"total": 2049, "additions": 201, "deletions": 1848}, "files": [{"sha": "fee0ec8a250aedb78e61c2cc78d3ed93709663d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,3 +1,93 @@\n+2001-05-16  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* libgcc1-test.c, libgcc1.c, config/i386/perform.h: Delete file.\n+\n+\t* Makefile.in: Delete variables: OLDCC, CCLIBFLAGS, OLDAR,\n+\tOLDAR_FLAGS, LIBGCC1, LIBGCC1_TEST, CROSS_LIBGCC1,\n+\tLIB1FUNCS, and LIB1FUNCS_EXTRA.  Delete rules: libgcc1-test,\n+\tlibgcc1-test.o.  Clarify commentary now that libgcc1 no longer exists.\n+\t* cross-make: Don't set LIBGCC1.\n+\t* mklibgcc.in: Delete all code for building from libgcc1.c.\n+\tAlways honor LIB1ASMFUNCS if set.\n+\n+\t* crtstuff.c, floatlib.c, longlong.h, config/fp-bit.c,\n+\tconfig/arc/lib1funcs.asm, config/arm/lib1funcs.asm,\n+\tconfig/d30v/libgcc1.asm, config/fr30/lib1funcs.asm,\n+\tconfig/h8300/lib1funcs.asm, config/i386/cygwin.asm,\n+\tconfig/i386/uwin.asm, config/m68hc11/larith.asm,\n+\tconfig/m68k/lb1sf68.asm, config/mcore/lib1.asm,\n+\tconfig/mn10200/lib1funcs.asm, config/sh/lib1funcs.asm,\n+\tconfig/sparc/lb1spc.asm, config/sparc/lb1spl.asm,\n+\tconfig/v850/lib1funcs.asm, config/c4x/libgcc.S:\n+\tDelete or update references to libgcc1 in commentary.\n+\n+\t* config/t-libc-ok, config/t-linux, config/t-linux-aout,\n+\tconfig/t-netbsd, config/a29k/t-a29kbare, config/a29k/t-vx29k,\n+\tconfig/alpha/t-interix, config/alpha/t-osf, config/alpha/t-vms,\n+\tconfig/arc/t-arc, config/arm/t-arm-aout, config/arm/t-arm-coff,\n+\tconfig/arm/t-arm-elf, config/arm/t-linux, config/arm/t-pe,\n+\tconfig/arm/t-semi, config/arm/t-strongarm-coff,\n+\tconfig/arm/t-strongarm-elf, config/arm/t-strongarm-pe,\n+\tconfig/arm/t-xscale-coff, config/arm/t-xscale-elf, config/avr/t-avr,\n+\tconfig/c4x/t-c4x, config/d30v/t-d30v, config/fr30/t-fr30,\n+\tconfig/h8300/t-h8300, config/i386/t-beos, config/i386/t-cygwin,\n+\tconfig/i386/t-i386elf, config/i386/t-interix, config/i386/t-netware,\n+\tconfig/i386/t-next, config/i386/t-rtems-i386, config/i386/t-sol2,\n+\tconfig/i960/t-960bare, config/i960/t-vxworks960, config/ia64/t-ia64,\n+\tconfig/m32r/t-m32r, config/m68hc11/t-m68hc11-gas, config/m68k/t-lynx,\n+\tconfig/m68k/t-m68kbare, config/m68k/t-m68kelf,\n+\tconfig/m68k/t-mot3300-gald, config/m68k/t-mot3300-gas,\n+\tconfig/m68k/t-next, config/m68k/t-vxworks68, config/m88k/t-bug,\n+\tconfig/m88k/t-dgux, config/m88k/t-dgux-gas, config/m88k/t-dguxbcs,\n+\tconfig/m88k/t-luna, config/m88k/t-luna-gas, config/m88k/t-m88k,\n+\tconfig/m88k/t-m88k-gas, config/m88k/t-sysv4, config/mcore/t-mcore,\n+\tconfig/mcore/t-mcore-pe, config/mips/t-bsd, config/mips/t-bsd-gas,\n+\tconfig/mips/t-cross64, config/mips/t-ecoff, config/mips/t-elf,\n+\tconfig/mips/t-iris6, config/mips/t-r3900, config/mips/t-svr3,\n+\tconfig/mips/t-svr3-gas, config/mips/t-svr4, config/mips/t-svr4-gas,\n+\tconfig/mips/t-ultrix, config/mn10200/t-mn10200,\n+\tconfig/mn10300/t-mn10300, config/pa/t-linux, config/pa/t-linux64,\n+\tconfig/pa/t-pa, config/pa/t-pa64, config/pa/t-pro,\n+\tconfig/pdp11/t-pdp11, config/pj/t-pj, config/rs6000/t-aix43,\n+\tconfig/rs6000/t-beos, config/rs6000/t-darwin, config/rs6000/t-newas,\n+\tconfig/rs6000/t-ppccomm, config/rs6000/t-rs6000, config/sh/t-linux,\n+\tconfig/sh/t-sh, config/sparc/t-chorus-elf, config/sparc/t-elf,\n+\tconfig/sparc/t-sol2, config/sparc/t-sp86x, config/sparc/t-sparcbare,\n+\tconfig/sparc/t-sparclite, config/sparc/t-splet,\n+\tconfig/sparc/t-sunos41, config/sparc/t-vxsparc,\n+\tconfig/sparc/t-vxsparc64, config/v850/t-v850:\n+\tDon't set any of LIBGCC1, CROSS_LIBGCC1, or LIBGCC1_TEST.\n+\n+\t* config/alpha/alpha.h, config/i386/i386.h, config/i860/i860.h: \n+\tDon't set FLOAT_VALUE_TYPE, FLOAT_ARG_TYPE, INTIFY, or FLOATIFY.\n+\t* config/d30v/d30v.h: Don't mention LIBGCC_NEEDS_DOUBLE,\n+\tFLOAT_VALUE_TYPE, FLOAT_ARG_TYPE, FLOATIFY, INTIFY,\n+\tnongcc_SI_type, nongcc_word_type, or perform_*\n+\t* config/i860/fx2800: Don't define perform_umodsi3 or perform_modsi3.\n+\n+\t* config/i386/386bsd.h, config/i386/beos-elf.h,\n+\tconfig/i386/linux-aout.h, config/i386/linux-oldld.h,\n+\tconfig/i386/linux.h, config/i386/mach.h, config/i386/netbsd.h,\n+\tconfig/i386/openbsd.h, config/i386/osfrose.h, config/i386/rtemself.h:\n+\tDon't include i386/perform.h.\n+\n+\t* config/a29k/t-a29k, config/arm/t-semiaof, config/i370/t-i370,\n+\tconfig/i370/t-linux, config/i370/t-mvs, config/i370/t-oe,\n+\tconfig/i386/t-djgpp, config/i386/t-i386bare, config/i386/t-vsta,\n+\tconfig/ia64/t-hpux, config/mips/t-mips, config/mips/t-mips-gas,\n+\tconfig/mips/t-osfrose, config/sparc/t-sp64, config/sparc/t-sunos40,\n+\tconfig/vax/t-openbsd, config/vax/t-vax: Delete.\n+\n+\t* config.gcc: Remove references to deleted files.\n+\t(arm-semi-aof): Use arm/t-semi for tmake_file.\n+\n+\t* gcc.texi, install.texi, invoke.texi, tm.texi:\n+\tDelete or rewrite text which is no longer relevant now that\n+\tlibgcc1 no longer exists.\n+\n+\t* config/t-openbsd, config/alpha/t-interix, config/i386/t-interix:\n+\tNo need to set INSTALL_ASSERT_H.  (Missed in previous sweep.)\n+\n 2001-05-16  Wolfgang Bangerth <wolfgang.bangerth@iwr.uni-heidelberg.de>\n \tBruce Korb <bkorb@gnu.org>\n "}, {"sha": "7a7f7009d71e46ef3cf2d209f27264fa24aafa58", "filename": "gcc/Makefile.in", "status": "modified", "additions": 8, "deletions": 65, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -152,20 +152,6 @@ ZLIBINC = @zlibinc@\n # Substitution type for target's getgroups 2nd arg.\n TARGET_GETGROUPS_T = @TARGET_GETGROUPS_T@\n \n-# Compiler to use for compiling libgcc1.a.\n-# OLDCC should not be the GNU C compiler,\n-# since that would compile typical libgcc1.a functions such as mulsi3\n-# into infinite recursions.\n-OLDCC = cc\n-\n-# CFLAGS for use with OLDCC, for compiling libgcc1.a.\n-# NOTE: -O does not work on some Unix systems!\n-CCLIBFLAGS = -O\n-\n-# Version of ar to use when compiling libgcc1.a.\n-OLDAR = ar\n-OLDAR_FLAGS = qc\n-\n # Target to use when installing include directory.  Either\n # install-headers-tar or install-headers-cpio.\n INSTALL_HEADERS_DIR = @build_install_headers_dir@\n@@ -177,7 +163,7 @@ USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/stddef.h \\\n     $(srcdir)/ginclude/stdbool.h $(srcdir)/ginclude/iso646.h \\\n     $(EXTRA_HEADERS) $(LANG_EXTRA_HEADERS)\n \n-# The GCC to use for compiling libgcc.a, enquire, and libgcc1-test.\n+# The GCC to use for compiling libgcc.a, enquire, and crt*.o.\n # Usually the one we just built.\n # Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).\n GCC_FOR_TARGET = ./xgcc -B./ -B$(build_tooldir)/bin/ -isystem $(build_tooldir)/include\n@@ -368,20 +354,11 @@ VFPRINTF=@vfprintf@\n DOPRINT=@doprint@\n STRSTR=@strstr@\n \n-# Specify the rule for actually making libgcc.a,\n+# libgcc.a may be built directly or via stmp-multilib,\n+# and installed likewise.  Overridden by t-fragment.\n LIBGCC = libgcc.a\n-# and the rule for installing it.\n INSTALL_LIBGCC = install-libgcc\n \n-# Specify the rule for actually making libgcc1.a.\n-# The value may be empty; that means to do absolutely nothing\n-# with or for libgcc1.a.\n-LIBGCC1 = libgcc1.a\n-\n-# Specify the rule for making libgcc1.a for a cross-compiler.\n-# The default rule assumes that libgcc1.a is supplied by the user.\n-CROSS_LIBGCC1 = libgcc1.cross\n-\n # Options to use when compiling libgcc2.a.\n # -g1 causes output of debug info only for file-scope entities.\n # we use this here because that should be enough, and also\n@@ -402,9 +379,6 @@ LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \\\n   $(srcdir)/unwind-sjlj.c\n LIB2ADDEHDEP = unwind.inc unwind-dw2-fde.h\n \n-# libgcc1-test target (must also be overridable for a target)\n-LIBGCC1_TEST = libgcc1-test\n-\n # nm flags to list global symbols in libgcc object files.\n SHLIB_NM_FLAGS = -pg\n \n@@ -436,16 +410,12 @@ EXTRA_HEADERS =@extra_headers_list@\n USE_COLLECT2 = @will_use_collect2@\n # If we might be using collect2, then this variable will be set to\n # -DUSE_COLLECT2.  toplev.c, collect2.c and libgcc2.c all need to\n-# if we may be using collect2.\n+# know if we may be using collect2.\n MAYBE_USE_COLLECT2 = @maybe_use_collect2@\n # It is convenient for configure to add the assignment at the beginning,\n # so don't override it here.\n USE_COLLECT2 = collect2$(exeext)\n \n-# List of extra C and assembler files to add to libgcc1.a.\n-# Assembler files should have names ending in `.asm'.\n-LIB1FUNCS_EXTRA =\n-\n # List of extra C and assembler files to add to static and shared libgcc2.\n # Assembler files should have names ending in `.asm'.\n LIB2FUNCS_EXTRA =\n@@ -776,15 +746,6 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  gcov$(exeext) *.[0-9][0-9].* *.[si] libcpp.a libbackend.a libgcc.mk \\\n  $(LANG_STAGESTUFF)\n \n-# Members of libgcc1.a.\n-LIB1FUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n-   _lshrsi3 _ashrsi3 _ashlsi3 \\\n-   _divdf3 _muldf3 _negdf2 _adddf3 _subdf3 \\\n-   _fixdfsi _fixsfsi _floatsidf _floatsisf _truncdfsf2 _extendsfdf2 \\\n-   _addsf3 _negsf2 _subsf3 _mulsf3 _divsf3 \\\n-   _eqdf2 _nedf2 _gtdf2 _gedf2 _ltdf2 _ledf2 \\\n-   _eqsf2 _nesf2 _gtsf2 _gesf2 _ltsf2 _lesf2\n-\n # Library members defined in libgcc2.c.\n LIB2FUNCS = _muldi3 _divdi3 _moddi3 _udivdi3 _umoddi3 _negdi2 \\\n      _lshrdi3 _ashldi3 _ashrdi3 _ffsdi2 _clz \\\n@@ -952,7 +913,7 @@ all.internal: start.encap rest.encap doc\n # Note that we can compile enquire using the cross-compiler just built,\n # although we can't run it on this machine.\n all.cross: native gcc-cross cpp$(exeext) specs \\\n-\t$(LIBGCC) $(LIBGCC1_TEST) $(EXTRA_PARTS) lang.all.cross doc\n+\t$(LIBGCC) $(EXTRA_PARTS) lang.all.cross doc\n # This is what to compile if making gcc with a cross-compiler.\n all.build: native xgcc$(exeext) cpp$(exeext) $(EXTRA_PARTS) lang.all.build\n # This is what must be made before installing GCC and converting libraries.\n@@ -976,15 +937,6 @@ PROTO: proto\n # This does the things that can't be done on the host machine.\n rest.cross: $(LIBGCC) specs\n \n-# Verify that it works to compile and link libgcc1-test.\n-# If it does, then there are sufficient replacements for libgcc1.a.\n-libgcc1-test: libgcc1-test.o native $(GCC_PARTS)\n-\t@echo \"Testing libgcc1.  Ignore linker warning messages.\"\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) libgcc1-test.o -o libgcc1-test \\\n-\t  -nostartfiles -nostdlib `$(GCC_FOR_TARGET) --print-libgcc-file-name`\n-libgcc1-test.o: libgcc1-test.c native xgcc$(exeext) stmp-int-hdrs\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) -c $(srcdir)/libgcc1-test.c\n-\n # Recompile all the language-independent object files.\n # This is used only if the user explicitly asks for it.\n compilations: $(BACKEND)\n@@ -1042,11 +994,7 @@ LIB2ADD_ST = $(LIB2FUNCS_STATIC_EXTRA)\n \n libgcc.mk: config.status Makefile mklibgcc $(LIB2ADD) $(LIB2ADD_ST) xgcc$(exeext)\n \tobjext='$(objext)' \\\n-\tOLDCC='$(OLDCC)' \\\n-\tLIBGCC1='$(LIBGCC1)' \\\n-\tLIB1FUNCS='$(LIB1FUNCS)' \\\n \tLIB1ASMFUNCS='$(LIB1ASMFUNCS)' \\\n-\tLIB1FUNCS_EXTRA='$(LIB1FUNCS_EXTRA)' \\\n \tLIB2FUNCS='$(LIB2FUNCS)' \\\n \tLIB2FUNCS_ST='$(LIB2FUNCS_ST)' \\\n \tLIB2ADD='$(LIB2ADD)' \\\n@@ -1071,18 +1019,17 @@ libgcc.mk: config.status Makefile mklibgcc $(LIB2ADD) $(LIB2ADD_ST) xgcc$(exeext\n \n # All the things that might cause us to want to recompile bits of libgcc.\n LIBGCC_DEPS = $(GCC_PASSES) $(LANGUAGES) stmp-int-hdrs $(STMP_FIXPROTO) \\\n-\tlibgcc.mk $(srcdir)/libgcc1.c $(srcdir)/libgcc2.c $(TCONFIG_H) \\\n+\tlibgcc.mk $(srcdir)/libgcc2.c $(TCONFIG_H) \\\n \t$(MACHMODE_H) longlong.h gbl-ctors.h config.status stmp-int-hdrs \\\n \ttsystem.h $(FPBIT) $(DPBIT) $(LIB2ADD) $(LIB2ADD_ST) $(LIB2ADDEH) \\\n-\t$(LIB2ADDEHDEP) $(EXTRA_PARTS)\n+\t$(LIB2ADDEHDEP) $(EXTRA_PARTS) $(LIB1ASMSRC)\n \n libgcc.a: $(LIBGCC_DEPS)\n \t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t  HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n \t  AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n \t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n-\t  OLDCC=\"$(OLDCC)\" CCLIBFLAGS=\"$(CCLIBFLAGS)\" \\\n \t  CFLAGS=\"$(CFLAGS) $(WARN_CFLAGS)\" \\\n \t  RANLIB_FOR_TARGET=\"$(RANLIB_FOR_TARGET)\" \\\n \t  RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n@@ -1117,7 +1064,6 @@ stmp-multilib: $(LIBGCC_DEPS)\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n \t  AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n \t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n-\t  OLDCC=\"$(OLDCC)\" CCLIBFLAGS=\"$(CCLIBFLAGS)\" \\\n \t  CFLAGS=\"$(CFLAGS) $(WARN_CFLAGS)\" \\\n \t  RANLIB_FOR_TARGET=\"$(RANLIB_FOR_TARGET)\" \\\n \t  RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n@@ -2323,8 +2269,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n \t-rm -f $(HOST_PREFIX_1)rtl.c\n \t-rm -f $(HOST_PREFIX_1)obstack.c\n # Delete the temp files made in the course of building libgcc.a.\n-\t-rm -f xlimits.h libgcc1-test\n-\tfor name in $(LIB1FUNCS); do rm -f $${name}.c; done\n+\t-rm -f xlimits.h\n # Delete other built files.\n \t-rm -f t-float.h-cross xsys-protos.hT\n # Delete the stamp and temporary files.\n@@ -2650,7 +2595,6 @@ install-libgcc: libgcc.mk libgcc.a installdirs\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n \t  AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n \t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n-\t  OLDCC=\"$(OLDCC)\" CCLIBFLAGS=\"$(CCLIBFLAGS)\" \\\n \t  CFLAGS=\"$(CFLAGS) $(WARN_CFLAGS)\" \\\n \t  RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n \t  NM_FOR_TARGET=\"$(NM_FOR_TARGET)\" AWK=\"$(AWK)\" \\\n@@ -2677,7 +2621,6 @@ install-multilib: stmp-multilib installdirs\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n \t  AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n \t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n-\t  OLDCC=\"$(OLDCC)\" CCLIBFLAGS=\"$(CCLIBFLAGS)\" \\\n \t  CFLAGS=\"$(CFLAGS) $(WARN_CFLAGS)\" \\\n \t  RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n \t  NM_FOR_TARGET=\"$(NM_FOR_TARGET)\" AWK=\"$(AWK)\" \\"}, {"sha": "f9ee01b84929e5a220ef04a198c965e90924d409", "filename": "gcc/config.gcc", "status": "modified", "additions": 19, "deletions": 49, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -517,7 +517,7 @@ arm-semi-aout | armel-semi-aout)\n \t;;\n arm-semi-aof | armel-semi-aof)\n \ttm_file=arm/semiaof.h\n-\ttmake_file=arm/t-semiaof\n+\ttmake_file=arm/t-semi\n \t;;\n arm*-*-netbsd*)\n \ttm_file=arm/netbsd.h\n@@ -866,17 +866,15 @@ i370-*-opened*)\t\t\t # IBM 360/370/390 Architecture\n \txm_defines='POSIX FATAL_EXIT_CODE=12'\n \ttm_file=i370/oe.h\n \txmake_file=i370/x-oe\n-\ttmake_file=i370/t-oe\n \t;;\n i370-*-mvs*)\n \txm_defines='POSIX FATAL_EXIT_CODE=12'\n \ttm_file=i370/mvs.h\n-\ttmake_file=i370/t-mvs\n \t;;\n i370-*-linux*)\n \txmake_file=x-linux\n \ttm_file=\"i370/linux.h ${tm_file}\"\n-\ttmake_file=\"t-linux i370/t-linux\"\n+\ttmake_file=t-linux\n \t# broken_install=yes\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \t# extra_parts=\"crtbegin.o crtend.o\"\n@@ -982,12 +980,10 @@ i386-sun-sunos*)\t\t# Sun i386 roadrunner\n \t;;\n i[34567]86-wrs-vxworks*)\n \ttm_file=i386/vxi386.h\n-\ttmake_file=i386/t-i386bare\n \tthread_file='vxworks'\n \t;;\n i[34567]86-*-aout*)\n \ttm_file=i386/i386-aout.h\n-\ttmake_file=i386/t-i386bare\n \t;;\n i[34567]86-*-beoself* | i[34567]86-*-beos*)\n \txm_defines=POSIX\n@@ -1007,11 +1003,11 @@ i[34567]86-*-bsd*)\n #\tuse_collect2=yes\n \t;;\n i[34567]86-*-freebsd[12] | i[34567]86-*-freebsd[12].* | i[34567]86-*-freebsd*aout*)\n-\ttm_file=\"i386/freebsd-aout.h i386/perform.h\"\n+\ttm_file=i386/freebsd-aout.h\n \ttmake_file=t-freebsd\n \t;;\n i[34567]86-*-freebsd*)\n-\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/freebsd.h i386/perform.h\"\n+\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/freebsd.h\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \ttmake_file=t-freebsd\n \tgas=yes\n@@ -1035,7 +1031,6 @@ i[34567]86-*-openbsd*)\n \t;;\n i[34567]86-*-coff*)\n \ttm_file=i386/i386-coff.h\n-\ttmake_file=i386/t-i386bare\n \t;;\n i[34567]86-*-isc*)\t\t# 80386 running ISC system\n \txm_defines=POSIX\n@@ -1049,7 +1044,6 @@ i[34567]86-*-isc*)\t\t# 80386 running ISC system\n \t\ttmake_file=i386/t-crtstuff\n \t\textra_parts=\"crtbegin.o crtend.o\"\n \tfi\n-\ttmake_file=\"$tmake_file i386/t-i386bare\"\n \tinstall_headers_dir=install-headers-cpio\n \t;;\n i[34567]86-*-linux*oldld*)\t# Intel 80386's running GNU/Linux\n@@ -1103,7 +1097,6 @@ i[34567]86-go32-msdos | i[34567]86-*-go32*)\n i[34567]86-pc-msdosdjgpp*)\n \txm_file=i386/xm-djgpp.h\n \ttm_file=i386/djgpp.h\n-\ttmake_file=i386/t-djgpp\n \txmake_file=i386/x-djgpp\n \tgnu_ld=yes\n \tgas=yes\n@@ -1127,7 +1120,6 @@ i[34567]86-*-lynxos*)\n \telse\n \t\ttm_file=i386/lynx-ng.h\n \tfi\n-\ttmake_file=i386/t-i386bare\n \t;;\n i[34567]86-*-mach*)\n \ttm_file=i386/mach.h\n@@ -1157,7 +1149,7 @@ i[34567]86-go32-rtems*)\n i[34567]86-*-rtemscoff*)\n \tcpu_type=i386\n \ttm_file=i386/rtems.h\n-\ttmake_file=\"i386/t-i386bare t-rtems\"\n+\ttmake_file=t-rtems\n \tif test x$enable_threads = xyes; then\n \t  thread_file='rtems'\n \tfi\n@@ -1183,7 +1175,6 @@ i[34567]86-*-sco3.2v5*)\t# 80386 running SCO Open Server 5\n \telse\n \t\ttmake_file=i386/t-sco5\n \tfi\n-\ttmake_file=\"$tmake_file i386/t-i386bare\"\n \textra_parts=\"crti.o crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n \t;;\n i[34567]86-*-solaris2*)\n@@ -1193,7 +1184,7 @@ i[34567]86-*-solaris2*)\n \t\t# Only needed if gas does not support -s\n \t\ttm_file=\"i386/sol2gas.h ${tm_file}\"\n \tfi\n-\ttmake_file=\"i386/t-i386bare i386/t-sol2\"\n+\ttmake_file=i386/t-sol2\n \textra_parts=\"crt1.o crti.o crtn.o gcrt1.o gmon.o crtbegin.o crtend.o\"\n \txmake_file=x-svr4\n \tif test x${enable_threads} = x; then\n@@ -1217,7 +1208,7 @@ i[34567]86-*-sysv5*)           # Intel x86 on System V Release 5\n        then\n                tm_file=\"${tm_file} dbx.h\"\n        fi\n-       tmake_file=\"i386/t-i386bare i386/t-crtpic\"\n+       tmake_file=i386/t-crtpic\n        xmake_file=x-svr4\n        extra_parts=\"crtbegin.o crtend.o\"\n        if test x$enable_threads = xyes; then\n@@ -1231,14 +1222,14 @@ i[34567]86-*-sysv4*)\t\t# Intel 80386's running system V.4\n \tthen\n \t\ttm_file=\"${tm_file} dbx.h\"\n \tfi\n-\ttmake_file=\"i386/t-i386bare i386/t-crtpic\"\n+\ttmake_file=i386/t-crtpic\n \txmake_file=x-svr4\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n i[34567]86-*-udk*)      # Intel x86 on SCO UW/OSR5 Dev Kit\n \txm_defines=POSIX\n \ttm_file=i386/udk.h\n-\ttmake_file=\"i386/t-i386bare i386/t-crtpic i386/t-udk\"\n+\ttmake_file=\"i386/t-crtpic i386/t-udk\"\n \txmake_file=x-svr4\n \textra_parts=\"crtbegin.o crtend.o\"\n \tinstall_headers_dir=install-headers-cpio\n@@ -1280,7 +1271,6 @@ i[34567]86-*-sysv*)\t\t# Intel 80386's running system V\n i386-*-vsta)\t\t\t# Intel 80386's running VSTa kernel\n \txm_file=i386/xm-vsta.h\n \ttm_file=i386/vsta.h\n-\ttmake_file=i386/t-vsta\n \t;;\n i[34567]86-*-win32)\n \txm_defines=POSIX\n@@ -1463,7 +1453,6 @@ ia64*-*-linux*)\n \t;;\n ia64*-*-hpux*)\n \ttm_file=\"ia64/ia64.h svr4.h ia64/sysv4.h ia64/hpux.h\"\n-\ttmake_file=\"ia64/t-ia64 ia64/t-hpux\"\n \ttarget_cpu_default=\"MASK_GNU_AS\"\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n@@ -2035,7 +2024,6 @@ mips-sni-sysv4)\n \t\ttm_file=mips/sni-svr4.h\n \tfi\n \txm_defines=POSIX\n-        tmake_file=mips/t-mips-gas\n         if test x$gnu_ld != xyes\n         then\n                 use_collect2=yes\n@@ -2056,7 +2044,6 @@ mips-sgi-irix5*)\t\t# SGI System V.4., IRIX 5\n \txm_file=mips/xm-iris5.h\n \txmake_file=mips/x-iris\n \t# mips-tfile doesn't work yet\n-\ttmake_file=mips/t-mips-gas\n \t# See comment in mips/iris5.h file.\n \tuse_collect2=yes\n #\tif test x$enable_threads = xyes; then\n@@ -2071,8 +2058,7 @@ mips-sgi-irix4loser*)\t\t# Mostly like a MIPS.\n \txm_defines=POSIX\n \txmake_file=mips/x-iris\n \tif test x$gas = xyes\n-\tthen\n-\t\ttmake_file=mips/t-mips-gas\n+\tthen\t:\n \telse\n \t\textra_passes=\"mips-tfile mips-tdump\"\n \tfi\n@@ -2092,8 +2078,7 @@ mips-sgi-irix4*)\t\t# Mostly like a MIPS.\n \txm_defines=POSIX\n \txmake_file=mips/x-iris\n \tif test x$gas = xyes\n-\tthen\n-\t\ttmake_file=mips/t-mips-gas\n+\tthen\t:\n \telse\n \t\textra_passes=\"mips-tfile mips-tdump\"\n \tfi\n@@ -2112,8 +2097,7 @@ mips-sgi-*)\t\t\t# Mostly like a MIPS.\n \tfi\n \txm_defines=POSIX\n \tif test x$gas = xyes\n-\tthen\n-\t\ttmake_file=mips/t-mips-gas\n+\tthen\t:\n \telse\n \t\textra_passes=\"mips-tfile mips-tdump\"\n \tfi\n@@ -2124,7 +2108,6 @@ mips-sgi-*)\t\t\t# Mostly like a MIPS.\n \t;;\n mips-dec-osfrose*)\t\t# Decstation running OSF/1 reference port with OSF/rose.\n \ttm_file=\"mips/osfrose.h ${tm_file}\"\n-\ttmake_file=mips/t-osfrose\n \textra_objs=halfpic.o\n \tuse_collect2=yes\n \t;;\n@@ -2134,8 +2117,7 @@ mips-dec-osf*)\t\t\t# Decstation running OSF/1 as shipped by DIGITAL\n \t\ttm_file=\"${tm_file} dbx.h\"\n \tfi\n \tif test x$gas = xyes\n-\tthen\n-\t\ttmake_file=mips/t-mips-gas\n+\tthen\t:\n \telse\n \t\ttmake_file=mips/t-ultrix\n \t\textra_passes=\"mips-tfile mips-tdump\"\n@@ -2148,8 +2130,7 @@ mips-dec-osf*)\t\t\t# Decstation running OSF/1 as shipped by DIGITAL\n mips-dec-bsd*)                  # Decstation running 4.4 BSD\n       tm_file=mips/dec-bsd.h\n       if test x$gas = xyes\n-      then\n-\t   \ttmake_file=mips/t-mips-gas\n+      then\t:\n       else\n \t\ttmake_file=mips/t-ultrix\n \t\textra_passes=\"mips-tfile mips-tdump\"\n@@ -2191,8 +2172,7 @@ mips-sony-bsd* | mips-sony-newsos*)\t# Sony NEWS 3600 or risc/news.\n \t\ttm_file=\"${tm_file} dbx.h\"\n \tfi\n \tif test x$gas = xyes\n-\tthen\n-\t\ttmake_file=mips/t-mips-gas\n+\tthen\t:\n \telse\n \t\textra_passes=\"mips-tfile mips-tdump\"\n \tfi\n@@ -2210,8 +2190,7 @@ mips-sony-sysv*)\t\t# Sony NEWS 3800 with NEWSOS5.0.\n \tfi\n \txm_defines=POSIX\n \tif test x$gas = xyes\n-\tthen\n-\t\ttmake_file=mips/t-mips-gas\n+\tthen\t:\n \telse\n \t\textra_passes=\"mips-tfile mips-tdump\"\n \tfi\n@@ -2228,10 +2207,8 @@ mips-tandem-sysv4*)\t\t# Tandem S2 running NonStop UX\n \txm_defines=POSIX\n \tif test x$gas = xyes\n \tthen\n-\t\ttmake_file=mips/t-mips-gas\n \t\textra_parts=\"crtbegin.o crtend.o\"\n \telse\n-\t\ttmake_file=mips/t-mips\n \t\textra_passes=\"mips-tfile mips-tdump\"\n \tfi\n \tif test x$gnu_ld != xyes\n@@ -2245,8 +2222,7 @@ mips-*-ultrix* | mips-dec-mach3)\t# Decstation.\n \t\ttm_file=\"${tm_file} dbx.h\"\n \tfi\n \tif test x$gas = xyes\n-\tthen\n-\t\ttmake_file=mips/t-mips-gas\n+\tthen\t:\n \telse\n \t\ttmake_file=mips/t-ultrix\n \t\textra_passes=\"mips-tfile mips-tdump\"\n@@ -2367,8 +2343,7 @@ mips-*-riscos[56789]*)\t\t# Default MIPS RISC-OS 5.0.\n \t\ttm_file=\"${tm_file} dbx.h\"\n \tfi\n \tif test x$gas = xyes\n-\tthen\n-\t\ttmake_file=mips/t-mips-gas\n+\tthen\t:\n \telse\n \t\textra_passes=\"mips-tfile mips-tdump\"\n \tfi\n@@ -2444,8 +2419,7 @@ mips-*-*)\t\t\t\t# Default MIPS RISC-OS 4.0.\n \t\ttm_file=\"${tm_file} dbx.h\"\n \tfi\n \tif test x$gas = xyes\n-\tthen\n-\t\ttmake_file=mips/t-mips-gas\n+\tthen\t:\n \telse\n \t\textra_passes=\"mips-tfile mips-tdump\"\n \tfi\n@@ -2969,7 +2943,6 @@ sparc-*-solaris2*)\n \t;;\n sparc-*-sunos4.0*)\n \ttm_file=sparc/sunos4.h\n-\ttmake_file=sparc/t-sunos40\n \tuse_collect2=yes\n \t;;\n sparc-*-sunos4*)\n@@ -3022,11 +2995,9 @@ sparc86x-*-elf*)\n         extra_parts=\"crtbegin.o crtend.o\"\n \t;;\n sparc64-*-aout*)\n-\ttmake_file=sparc/t-sp64\n \ttm_file=sparc/sp64-aout.h\n \t;;\n sparc64-*-elf*)\n-\ttmake_file=sparc/t-sp64\n \ttm_file=sparc/sp64-elf.h\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n@@ -3107,7 +3078,6 @@ vax-*-netbsd*)\n \tuse_collect2=yes\n \t;;\n vax-*-openbsd*)\n-\ttmake_file=\"${tmake_file} vax/t-openbsd\"\n \ttm_file=\"vax/vax.h vax/openbsd1.h openbsd.h ${tm_file}\"\n \tfloat_format=vax\n \tuse_collect2=yes"}, {"sha": "74684229a1348afbe6c46a6911b32ceb5d422f61", "filename": "gcc/config/a29k/t-a29k", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fa29k%2Ft-a29k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fa29k%2Ft-a29k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Ft-a29k?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,5 +0,0 @@\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n-# We need crt0.o.\n-LIBGCC1_TEST ="}, {"sha": "c304196c3a804a32e93ec30195071968e3a07c0a", "filename": "gcc/config/a29k/t-a29kbare", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fa29k%2Ft-a29kbare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fa29k%2Ft-a29kbare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Ft-a29kbare?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,9 +1,3 @@\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n-# We need crt0.o.\n-LIBGCC1_TEST =\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "d6c79852ca48bcdb0f36fbe67e8bdae04863cf82", "filename": "gcc/config/a29k/t-vx29k", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fa29k%2Ft-vx29k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fa29k%2Ft-vx29k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Ft-vx29k?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,9 +1,3 @@\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n-# We need crt0.o.\n-LIBGCC1_TEST =\n-\n # We don't want to put exit in libgcc.a for VxWorks, because VxWorks\n # does not have _exit.\n TARGET_LIBGCC2_CFLAGS = -Dexit=unused_exit"}, {"sha": "c0b96e0bca733fe98a609a585847408172cc76a6", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -392,23 +392,6 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n /* Define to enable software floating point emulation. */\n #define REAL_ARITHMETIC\n \n-/* The following #defines are used when compiling the routines in\n-   libgcc1.c.  Since the Alpha calling conventions require single\n-   precision floats to be passed in the floating-point registers\n-   (rather than in the general registers) we have to build the\n-   libgcc1.c routines in such a way that they know the actual types\n-   of their formal arguments and the actual types of their return\n-   values.  Otherwise, gcc will generate calls to the libgcc1.c\n-   routines, passing arguments in the floating-point registers,\n-   but the libgcc1.c routines will expect their arguments on the\n-   stack (where the Alpha calling conventions require structs &\n-   unions to be passed).  */\n-\n-#define FLOAT_VALUE_TYPE\tdouble\n-#define INTIFY(FLOATVAL)\t(FLOATVAL)\n-#define FLOATIFY(INTVAL)\t(INTVAL)\n-#define FLOAT_ARG_TYPE\t\tdouble\n-\n /* Define the size of `int'.  The default is the same as the word size.  */\n #define INT_TYPE_SIZE 32\n "}, {"sha": "c064046c521f77ad7c3321326680a19c674bf482", "filename": "gcc/config/alpha/t-interix", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Falpha%2Ft-interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Falpha%2Ft-interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-interix?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -4,13 +4,5 @@\n # Even LANG_EXTRA_HEADERS may be temporary.\n USER_H=$(LANG_EXTRA_HEADERS)\n \n-# We don't want this one either.\n-INSTALL_ASSERT_H=\n-\n-\n-\n-CROSS_LIBGCC1 = libgcc1-asm.a\n-LIBGCC1 = libgcc1-asm.a\n-\n LIB1ASMSRC = alpha/lib1funcs.asm\n LIB1ASMFUNCS = _divqu _divq _divlu _divl _remqu _remq _remlu _reml"}, {"sha": "b3d4160936485aefaf67e7074b16d77f4c1c5140", "filename": "gcc/config/alpha/t-osf", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Falpha%2Ft-osf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Falpha%2Ft-osf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-osf?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1 @@\n-# Do not build libgcc1. Let gcc generate those functions.\n-LIBGCC1 = \n-CROSS_LIBGCC1 =\n-LIBGCC1_TEST =\n-\n EXTRA_HEADERS = $(srcdir)/config/alpha/va_list.h"}, {"sha": "852c77f29fd2fcecab0f0d4aa776e65e2439764e", "filename": "gcc/config/alpha/t-vms", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Falpha%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Falpha%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-vms?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1 @@\n-# Do not build libgcc1.\n-LIBGCC1 = \n-CROSS_LIBGCC1 =\n-\n LIB2FUNCS_EXTRA = tramp.s\n-"}, {"sha": "e0dcd3630712fc3c166aef2bd98f41cea4551a04", "filename": "gcc/config/arc/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farc%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farc%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Flib1funcs.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-; libgcc1 routines for ARC cpu.\n+; libgcc routines for ARC cpu.\n \n /* Copyright (C) 1995, 1997 Free Software Foundation, Inc.\n "}, {"sha": "34c8dd48e86df01b372659e4339ef2c785c69ee9", "filename": "gcc/config/arc/t-arc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farc%2Ft-arc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farc%2Ft-arc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-arc?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arc/lib1funcs.asm\n LIB1ASMFUNCS = _mulsi3 _umulsidi3 _udivsi3 _divsi3 _umodsi3 _modsi3 _divmod_tools\n "}, {"sha": "36f121e94aedf9ae1b32a4568ac4b966c7018d18", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-@ libgcc1 routines for ARM cpu.\n+@ libgcc routines for ARM cpu.\n @ Division routines, written by Richard Earnshaw, (rearnsha@armltd.co.uk)\n \n /* Copyright 1995, 1996, 1998, 1999, 2000 Free Software Foundation, Inc."}, {"sha": "2ce20e4fb74472306d869f094300bfd380fa10e4", "filename": "gcc/config/arm/t-arm-aout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-arm-aout", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-arm-aout", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-aout?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _call_via_rX  _interwork_call_via_rX\n "}, {"sha": "bf37a37d4ddc5ebfe2364d9246c6e024c9ba92c0", "filename": "gcc/config/arm/t-arm-coff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-arm-coff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-arm-coff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-coff?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _call_via_rX _interwork_call_via_rX\n \n@@ -30,6 +29,6 @@ LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n \n # Currently there is a bug somwehere in GCC's alias analysis\n-# or scheduling code that is breaking _fpmul_parts in libgcc1.c.\n+# or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline"}, {"sha": "3c5d5a33dab67e518c5b57495159dcb151a0e1c4", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _call_via_rX _interwork_call_via_rX\n \n@@ -77,6 +76,6 @@ LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n \n # Currently there is a bug somewhere in GCC's alias analysis\n-# or scheduling code that is breaking _fpmul_parts in libgcc1.c.\n+# or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline"}, {"sha": "7dbd0c0e277622464be0e042f4c28d0496e8d334", "filename": "gcc/config/arm/t-linux", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-linux?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -6,10 +6,6 @@ LIBGCC2_DEBUG_CFLAGS = -g0\n # Don't build enquire\n ENQUIRE=\n \n-# Since libgcc1 is an assembler file, we can build it automatically for the\n-# cross-compiler.\n-CROSS_LIBGCC1 = libgcc1-asm.a\n-LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_lnx\n "}, {"sha": "4de366521c068a5bf488f3f8dc60fed4c791b132", "filename": "gcc/config/arm/t-pe", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-pe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-pe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-pe?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _call_via_rX _interwork_call_via_rX\n "}, {"sha": "ce394606386490d733992df0c151802d6ff06a6e", "filename": "gcc/config/arm/t-semi", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-semi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-semi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-semi?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -6,11 +6,6 @@ LIBGCC2_DEBUG_CFLAGS = -g0\n # Don't build enquire\n ENQUIRE=\n \n-# Can't test libgcc1 since it tries to bring in things like malloc, and\n-# there probably isn't a libc to link against until we have a compiler.\n-LIBGCC1_TEST =\n-\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _call_via_rX _interwork_call_via_rX\n "}, {"sha": "228879396557dddf9f5c8e5ae1b3d76f63c8286e", "filename": "gcc/config/arm/t-semiaof", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Farm%2Ft-semiaof", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Farm%2Ft-semiaof", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-semiaof?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,67 +0,0 @@\n-OLDCC = armcc -w\n-# Don't build enquire\n-ENQUIRE=\n-CROSS_LIBGCC1 = libgcc1-aof.a\n-LIBGCC2 = libgcc2-aof.a\n-LIBGCC = libgcc-aof.a\n-TARGET_LIBGCC2_CFLAGS = -fomit-frame-pointer\n-LIBGCC2_DEBUG_CFLAGS = -g0\n-\n-LIBGCC1_TEST = #libgcc1-atest\n-EXTRA_PARTS = crtbegin.o crtend.o\n-STMP_FIXPROTO =\n-\n-# Rule to build libgcc1.a and libgcc2.a and libgcc.a, since the librarian \n-# for the ARM tools is somewhat quirky, and needs a special rule to use it.\n-libgcc1-aof.a: libgcc1.c $(CONFIG_H) config.status\n-\t-rm -rf tmplib libgcc1.a libgcc1-aof.a tmplibgcc1.a\n-\tmkdir tmplib\n-\tfor name in $(LIB1FUNCS); \\\n-\tdo \\\n-\t  echo $${name}; \\\n-\t  rm -f $${name}$(objext); \\\n-\t  $(OLDCC) $(CCLIBFLAGS) $(INCLUDES) -c -DL$${name} $(srcdir)/libgcc1.c; \\\n-\t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t  mv libgcc1$(objext) tmplib/$${name}$(objext); \\\n-\tdone\n-\t(cd tmplib; \\\n-\t armlib -c tmplibgcc1.a *; \\\n-\t mv tmplibgcc1.a ..)\n-\tmv tmplibgcc1.a libgcc1-aof.a\n-\trm -rf tmplib\n-\n-libgcc2-aof.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(LIB2FUNCS_EXTRA) \\\n-   machmode.h longlong.h gbl-ctors.h config.status\n-\t-rm -f tmplibgcc2.a\n-\t-rm -rf tmplib\n-\tmkdir tmplib\n-\tfor name in $(LIB2FUNCS); \\\n-\tdo \\\n-\t  echo $${name}; \\\n-\t  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} \\\n-\t      $(srcdir)/libgcc2.c -o tmplib/$${name}$(objext); \\\n-\t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\tdone\n-\t(cd tmplib; \\\n-\t armlib -c tmplibgcc2.a *; \\\n-\t mv tmplibgcc2.a ..)\n-\tmv tmplibgcc2.a libgcc2-aof.a\n-\trm -rf tmplib\n-\n-# Combine the various libraries into a single library, libgcc.a.\n-libgcc-aof.a: $(CROSS_LIBGCC1) $(LIBGCC2)\n-\t-rm -rf tmplibgcc.a libgcc.a tmpcopy libgcc-aof.a\n-\tmkdir tmpcopy\n-\t(cd tmpcopy; armlib -e ../$(LIBGCC1) \\*)\n-\t-(cd tmpcopy; chmod +w * > /dev/null 2>&1)\n-\t(cd tmpcopy; armlib -e ../$(LIBGCC2) \\*)\n-\t(cd tmpcopy; armlib -co ../tmplibgcc.a *$(objext))\n-\trm -rf tmpcopy\n-\tmv tmplibgcc.a libgcc.a\n-\tln libgcc.a libgcc-aof.a\n-\n-libgcc1-atest: libgcc1-test.o native $(GCC_PARTS) $(EXTRA_PARTS)\n-\t@echo \"Testing libgcc1.  Ignore linker warning messages.\"\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) libgcc1-test.o -o libgcc1-test \\\n-\t-v\n-"}, {"sha": "0a66360cb277d0c0489629a1c62800f5ee653e8c", "filename": "gcc/config/arm/t-strongarm-coff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-strongarm-coff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-strongarm-coff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-strongarm-coff?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func\n \n@@ -30,6 +29,6 @@ LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n \n # Currently there is a bug somwehere in GCC's alias analysis\n-# or scheduling code that is breaking _fpmul_parts in libgcc1.c.\n+# or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline"}, {"sha": "a2bb6446194cd02b80d8ff262af838595fdd8ca5", "filename": "gcc/config/arm/t-strongarm-elf", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-strongarm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-strongarm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-strongarm-elf?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func\n \n@@ -34,6 +33,6 @@ LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n \n # Currently there is a bug somewhere in GCC's alias analysis\n-# or scheduling code that is breaking _fpmul_parts in libgcc1.c.\n+# or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline"}, {"sha": "6a44132bd07d2c389ca4697a597e5442444fda61", "filename": "gcc/config/arm/t-strongarm-pe", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-strongarm-pe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-strongarm-pe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-strongarm-pe?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func\n \n@@ -33,6 +32,6 @@ LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n \n # Currently there is a bug somwehere in GCC's alias analysis\n-# or scheduling code that is breaking _fpmul_parts in libgcc1.c.\n+# or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline"}, {"sha": "5a5eb9851cf31fa09cd179146ac88fd3ac3a6e0a", "filename": "gcc/config/arm/t-xscale-coff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-xscale-coff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-xscale-coff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-xscale-coff?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _call_via_rX _interwork_call_via_rX\n \n@@ -43,6 +42,6 @@ LIBGCC               = stmp-multilib\n INSTALL_LIBGCC       = install-multilib\n \n # Currently there is a bug somewhere in GCC's alias analysis\n-# or scheduling code that is breaking _fpmul_parts in libgcc1.c.\n+# or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline"}, {"sha": "5a5eb9851cf31fa09cd179146ac88fd3ac3a6e0a", "filename": "gcc/config/arm/t-xscale-elf", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-xscale-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Farm%2Ft-xscale-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-xscale-elf?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _call_via_rX _interwork_call_via_rX\n \n@@ -43,6 +42,6 @@ LIBGCC               = stmp-multilib\n INSTALL_LIBGCC       = install-multilib\n \n # Currently there is a bug somewhere in GCC's alias analysis\n-# or scheduling code that is breaking _fpmul_parts in libgcc1.c.\n+# or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline"}, {"sha": "ecffea3214572f56d520048bea9bbf28fcfc0d2c", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -2,7 +2,6 @@\n AR_FOR_TARGET = avr-ar\n RANLIB_FOR_TARGET = avr-ranlib\n \n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = avr/libgcc.S\n LIB1ASMFUNCS = \\\n \t_mulqi3 \\\n@@ -20,9 +19,6 @@ LIB1ASMFUNCS = \\\n \t_cleanup \\\n \t_tablejump\n \n-# libgcc...\n-LIBGCC1_TEST =\n-\n # We do not have the DF type.\n # Most of the C functions in libgcc2 use almost all registers,\n # so use -mcall-prologues for smaller code size."}, {"sha": "c3b3c7e56ae80470472ba5d23106a9a3c156f3c9", "filename": "gcc/config/c4x/libgcc.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fc4x%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fc4x%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Flibgcc.S?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-/* libgcc1 routines for the Texas Instruments TMS320C[34]x\n+/* libgcc routines for the Texas Instruments TMS320C[34]x\n    Copyright (C) 1997,98, 1999 Free Software Foundation, Inc.\n \n  Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)"}, {"sha": "c88eba4a1f79da58909a542b7840a952186459c4", "filename": "gcc/config/c4x/t-c4x", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fc4x%2Ft-c4x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fc4x%2Ft-c4x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Ft-c4x?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = c4x/libgcc.S\n LIB1ASMFUNCS = _divsf3 _divsi3 _udivsi3 _umodsi3 _modsi3 _mulsi3 \\\n \t_muldf3 _divdf3 _unsfltconst _unsfltcompare \\\n@@ -15,6 +14,3 @@ MULTILIB_EXCEPTIONS =\n MULTILIB_EXTRA_OPTS =\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n-\n-# Don't make libgcc1-test since require crt0.o\n-LIBGCC1_TEST ="}, {"sha": "7ac16e654c150572a9e23978c44af3a964af1e37", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -3307,76 +3307,6 @@ typedef struct machine_function\n    Defined in svr4.h.  */\n /* #define TARGET_MEM_FUNCTIONS */\n \n-/* Define this macro if only `float' arguments cannot be passed to library\n-   routines (so they must be converted to `double').  This macro affects both\n-   how library calls are generated and how the library routines in `libgcc1.c'\n-   accept their arguments.  It is useful on machines where floating and fixed\n-   point arguments are passed differently, such as the i860.  */\n-/* #define LIBGCC_NEEDS_DOUBLE */\n-\n-/* Define this macro to override the type used by the library routines to pick\n-   up arguments of type `float'.  (By default, they use a union of `float' and\n-   `int'.)\n-\n-   The obvious choice would be `float'--but that won't work with traditional C\n-   compilers that expect all arguments declared as `float' to arrive as\n-   `double'.  To avoid this conversion, the library routines ask for the value\n-   as some other type and then treat it as a `float'.\n-\n-   On some systems, no other type will work for this.  For these systems, you\n-   must use `LIBGCC_NEEDS_DOUBLE' instead, to force conversion of the values\n-   `double' before they are passed.  */\n-/* #define FLOAT_ARG_TYPE */\n-\n-/* Define this macro to override the way library routines redesignate a `float'\n-   argument as a `float' instead of the type it was passed as.  The default is\n-   an expression which takes the `float' field of the union.  */\n-/* #define FLOATIFY(PASSED_VALUE) */\n-\n-/* Define this macro to override the type used by the library routines to\n-   return values that ought to have type `float'.  (By default, they use\n-   `int'.)\n-\n-   The obvious choice would be `float'--but that won't work with traditional C\n-   compilers gratuitously convert values declared as `float' into `double'.  */\n-/* #define FLOAT_VALUE_TYPE */\n-\n-/* Define this macro to override the way the value of a `float'-returning\n-   library routine should be packaged in order to return it.  These functions\n-   are actually declared to return type `FLOAT_VALUE_TYPE' (normally `int').\n-\n-   These values can't be returned as type `float' because traditional C\n-   compilers would gratuitously convert the value to a `double'.\n-\n-   A local variable named `intify' is always available when the macro `INTIFY'\n-   is used.  It is a union of a `float' field named `f' and a field named `i'\n-   whose type is `FLOAT_VALUE_TYPE' or `int'.\n-\n-   If you don't define this macro, the default definition works by copying the\n-   value through that union.  */\n-/* #define INTIFY(FLOAT_VALUE) */\n-\n-/* Define this macro as the name of the data type corresponding to `SImode' in\n-   the system's own C compiler.\n-\n-   You need not define this macro if that type is `long int', as it usually is.  */\n-/* #define nongcc_SI_type */\n-\n-/* Define this macro as the name of the data type corresponding to the\n-   word_mode in the system's own C compiler.\n-\n-   You need not define this macro if that type is `long int', as it usually is.  */\n-/* #define nongcc_word_type */\n-\n-/* Define these macros to supply explicit C statements to carry out various\n-   arithmetic operations on types `float' and `double' in the library routines\n-   in `libgcc1.c'.  See that file for a full list of these macros and their\n-   arguments.\n-\n-   On most machines, you don't need to define any of these macros, because the\n-   C compiler that comes with the system takes care of doing them.  */\n-/* #define perform_... */\n-\n /* Define this macro to generate code for Objective C message sending using the\n    calling convention of the NeXT system.  This calling convention involves\n    passing the object, the selector and the method arguments all at once to the"}, {"sha": "ed359fc552ec8d0fa1deb99f24db8bd00d5d540a", "filename": "gcc/config/d30v/libgcc1.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fd30v%2Flibgcc1.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fd30v%2Flibgcc1.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Flibgcc1.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-/* Assembly support functions for libgcc1.\n+/* Assembly support functions for libgcc.\n  *\n  *   Copyright (C) 1997 Free Software Foundation, Inc.\n  *   Contributed by Cygnus Support"}, {"sha": "2544f3db35e4932889d70bb95794768871a5d579", "filename": "gcc/config/d30v/t-d30v", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fd30v%2Ft-d30v", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fd30v%2Ft-d30v", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Ft-d30v?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,3 @@\n-# Build libgcc1 from assembler sources\n-LIBGCC1 = libgcc1-asm.a\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = d30v/libgcc1.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3\n "}, {"sha": "3eb9ec75893440467d7476b5c01536373108754e", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,5 @@\n-/* This is a software floating point library which can be used instead of\n-   the floating point routines in libgcc1.c for targets without hardware\n-   floating point. \n+/* This is a software floating point library which can be used\n+   for targets without hardware floating point. \n    Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001\n    Free Software Foundation, Inc.\n \n@@ -57,8 +56,7 @@ Boston, MA 02111-1307, USA.  */\n    CMPtype: Specify the type that floating point compares should return.\n      This defaults to SItype, aka int.\n    US_SOFTWARE_GOFAST: This makes all entry points use the same names as the\n-     US Software goFast library.  If this is not defined, the entry points use\n-     the same names as libgcc1.c.\n+     US Software goFast library.\n    _DEBUG_BITFLOAT: This makes debugging the code a little easier, by adding\n      two integers to the FLO_union_type.\n    NO_DENORMALS: Disable handling of denormals."}, {"sha": "850af433997fccf3d383060b4620782c5b3f1115", "filename": "gcc/config/fr30/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ffr30%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ffr30%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Flib1funcs.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-/* libgcc1 routines for the FR30.\n+/* libgcc routines for the FR30.\n    Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC."}, {"sha": "5ee0808e0daefc9426facdba101fa3d6d043c95d", "filename": "gcc/config/fr30/t-fr30", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ffr30%2Ft-fr30", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ffr30%2Ft-fr30", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ft-fr30?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,12 +1,3 @@\n-\n-# Name of assembly file containing libgcc1 functions.\n-# This entry must be present, but it can be empty if the target does\n-# not need any assembler functions to support its code generation.\n-# CROSS_LIBGCC1 =\n-#\n-# Alternatively if assembler functions *are* needed then define the\n-# entries below:\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC    = fr30/lib1funcs.asm\n LIB1ASMFUNCS  = _udivsi3 _divsi3 _umodsi3 _modsi3\n "}, {"sha": "b05a930d5b476819e46c744430aaff38aeadabec", "filename": "gcc/config/h8300/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-;; libgcc1 routines for the Hitachi H8/300 CPU.\n+;; libgcc routines for the Hitachi H8/300 CPU.\n ;; Contributed by Steve Chamberlain <sac@cygnus.com>\n \n /* Copyright (C) 1994, 2000 Free Software Foundation, Inc."}, {"sha": "199082754f5061e3ea07ca883709a739cd4301a8", "filename": "gcc/config/h8300/t-h8300", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fh8300%2Ft-h8300", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fh8300%2Ft-h8300", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Ft-h8300?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = h8300/lib1funcs.asm\n LIB1ASMFUNCS = _cmpsi2 _ucmpsi2 _divhi3 _divsi3 _mulhi3 _mulsi3\n "}, {"sha": "d20ab385dcc48550cf99793a947687f32cedab6d", "filename": "gcc/config/i370/t-i370", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi370%2Ft-i370", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi370%2Ft-i370", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Ft-i370?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,4 +0,0 @@\n-# There is no libgcc for mvs\n-LIBGCC =\n-INSTALL_LIBGCC =\n-LIBGCC1_TEST ="}, {"sha": "12cd6b8f5e88a6cde9940c60054c052ee8813e51", "filename": "gcc/config/i370/t-linux", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi370%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi370%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Ft-linux?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,4 +0,0 @@\n-# config/i370/t-linux: this file defines Makefile overrides when building \n-# for a Linux target.  Thes definitions are in addition to config/t-linux.\n-# pretty busted at the moment\n-CROSS_LIBGCC1 ="}, {"sha": "d20ab385dcc48550cf99793a947687f32cedab6d", "filename": "gcc/config/i370/t-mvs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi370%2Ft-mvs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi370%2Ft-mvs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Ft-mvs?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,4 +0,0 @@\n-# There is no libgcc for mvs\n-LIBGCC =\n-INSTALL_LIBGCC =\n-LIBGCC1_TEST ="}, {"sha": "622402daf3305123ab903dcdf5040205b002da03", "filename": "gcc/config/i370/t-oe", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi370%2Ft-oe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi370%2Ft-oe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Ft-oe?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,4 +0,0 @@\n-# There is no libgcc for OpenEdition\n-LIBGCC =\n-INSTALL_LIBGCC =\n-LIBGCC1_TEST ="}, {"sha": "84d17940ab52cf02da98505921d8bb3c08ddeed3", "filename": "gcc/config/i386/386bsd.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2F386bsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2F386bsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2F386bsd.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -5,9 +5,6 @@\n \n #include \"i386/gstabs.h\"\n \n-/* Get perform_* macros to build libgcc.a.  */\n-#include \"i386/perform.h\"\n-\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dunix -D____386BSD____ -D__386BSD__ -DBSD_NET2 -Asystem=unix -Asystem=bsd\"\n "}, {"sha": "be948a3759c5a3ac6aee0fc0b8ebdbbd3fccffdb", "filename": "gcc/config/i386/beos-elf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-elf.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -134,9 +134,6 @@ Boston, MA 02111-1307, USA.  */\n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \"crtend.o%s crtn.o%s\"\n \n-/* Get perform_* macros to build libgcc.a.  */\n-#include \"i386/perform.h\"\n-\n /* A C statement (sans semicolon) to output to the stdio stream\n    FILE the assembler definition of uninitialized global DECL named\n    NAME whose size is SIZE bytes and alignment is ALIGN bytes."}, {"sha": "656c1128eaed9d101278b8ba3987a7cbe3e8adeb", "filename": "gcc/config/i386/cygwin.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fcygwin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fcygwin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-/* stuff needed for libgcc1 on win32. */\n+/* stuff needed for libgcc on win32. */\n \n #ifdef L_chkstk\n "}, {"sha": "d751fc7b08716f7a4b3822e30a97504e3c3b8a6a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -3064,13 +3064,6 @@ do { long l;\t\t\t\t\t\t\\\n \t }\t\t\t\t\t\t\\\n      } while (0)\n \n-/* Routines in libgcc that return floats must return them in an fp reg,\n-   just as other functions do which return such values.\n-   These macros make that happen.  */\n-\n-#define FLOAT_VALUE_TYPE float\n-#define INTIFY(FLOATVAL) FLOATVAL\n-\n /* a letter which is not needed by the normal asm syntax, which\n    we can use for operand syntax in the extended asm */\n "}, {"sha": "302ee69a32a0a6855b263b32a020ae7f305d3605", "filename": "gcc/config/i386/linux-aout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux-aout.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -69,6 +69,3 @@ Boston, MA 02111-1307, USA.  */\n \f\n #undef LINK_SPEC\n #define LINK_SPEC\t\"-m i386linux\"\n-\n-/* Get perform_* macros to build libgcc.a.  */\n-#include \"i386/perform.h\""}, {"sha": "6102aa8cd9fa06148edfb01984f79a67555f03fc", "filename": "gcc/config/i386/linux-oldld.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Flinux-oldld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Flinux-oldld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux-oldld.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -70,6 +70,3 @@ Boston, MA 02111-1307, USA.  */\n \f\n #undef LINK_SPEC\n #define LINK_SPEC \"\"\n-\n-/* Get perform_* macros to build libgcc.a.  */\n-#include <i386/perform.h>"}, {"sha": "a93955092f2b852378175d6f36cb82db484edf9b", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -143,9 +143,6 @@ Boston, MA 02111-1307, USA.  */\n \t%{static:-static}}}\"\n #endif\n \n-/* Get perform_* macros to build libgcc.a.  */\n-#include \"i386/perform.h\"\n-\n /* A C statement (sans semicolon) to output to the stdio stream\n    FILE the assembler definition of uninitialized global DECL named\n    NAME whose size is SIZE bytes and alignment is ALIGN bytes."}, {"sha": "7e2b1cc267d5cf255a64df4a9540d705f14561dc", "filename": "gcc/config/i386/mach.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fmach.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fmach.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmach.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -6,9 +6,6 @@\n \n #include \"i386/gstabs.h\"\n \n-/* Get perform_* macros to build libgcc.a.  */\n-#include \"i386/perform.h\"\n-\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dunix -DMACH -Asystem=unix -Asystem=mach\"\n "}, {"sha": "1a2c57c46a89d9654fda623069dfd8a3c32fef7b", "filename": "gcc/config/i386/netbsd.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -3,9 +3,6 @@\n \n #include <i386/gstabs.h>\n \n-/* Get perform_* macros to build libgcc.a.  */\n-#include <i386/perform.h>\n-\n /* Get generic NetBSD definitions.  */\n #include <netbsd.h>\n "}, {"sha": "e82166e7125e372c1a57d077d934fa5bccd5f77f", "filename": "gcc/config/i386/openbsd.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsd.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -23,9 +23,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include <i386/gstabs.h>\n \n-/* Get perform_* macros to build libgcc.a.  */\n-#include <i386/perform.h>\n-\n /* Get generic OpenBSD definitions.  */\n #define OBSD_OLD_GAS\n #include <openbsd.h>"}, {"sha": "3385d7a5c17b81d934d78b546f4f6847249cd455", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -23,9 +23,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"halfpic.h\"\n #include \"i386/gstabs.h\"\n \n-/* Get perform_* macros to build libgcc.a.  */\n-#include \"i386/perform.h\"\n-\n #define OSF_OS\n \n #undef  WORD_SWITCH_TAKES_ARG"}, {"sha": "8d6d0b71dfeb84aae380c42d85f34ced70d6c404", "filename": "gcc/config/i386/perform.h", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi386%2Fperform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi386%2Fperform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fperform.h?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,98 +0,0 @@\n-/* Definitions for AT&T assembler syntax for the Intel 80386.\n-   Copyright (C) 1993 Free Software Foundation, Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* Defines to be able to build libgcc.a with GCC.  */\n-\n-/* It might seem that these are not important, since gcc 2 will never\n-   call libgcc for these functions.  But programs might be linked with\n-   code compiled by gcc 1, and then these will be used.  */\n-\n-/* The arg names used to be a and b, but `a' appears inside strings\n-   and that confuses non-ANSI cpp.  */\n-\n-#define perform_udivsi3(arg0,arg1)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  dx = 0;\t\t\t\t\t\t\t\t\\\n-  ax = arg0;\t\t\t\t\t\t\t\t\\\n-  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (arg1), \"d\" (dx)); \\\n-  return ax;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_divsi3(arg0,arg1)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-  register int cx asm(\"cx\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  ax = arg0;\t\t\t\t\t\t\t\t\\\n-  cx = arg1;\t\t\t\t\t\t\t\t\\\n-  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=&d\" (dx) : \"a\" (ax), \"c\" (cx)); \\\n-  return ax;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_umodsi3(arg0,arg1)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  dx = 0;\t\t\t\t\t\t\t\t\\\n-  ax = arg0;\t\t\t\t\t\t\t\t\\\n-  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (arg1), \"d\" (dx)); \\\n-  return dx;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_modsi3(arg0,arg1)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-  register int cx asm(\"cx\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  ax = arg0;\t\t\t\t\t\t\t\t\\\n-  cx = arg1;\t\t\t\t\t\t\t\t\\\n-  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=&d\" (dx) : \"a\" (ax), \"c\" (cx)); \\\n-  return dx;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_fixdfsi(arg0)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  auto unsigned short ostatus;\t\t\t\t\t\t\\\n-  auto unsigned short nstatus;\t\t\t\t\t\t\\\n-  auto int ret;\t\t\t\t\t\t\t\t\\\n-  auto double tmp;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  &ostatus;\t\t\t/* guarantee these land in memory */\t\\\n-  &nstatus;\t\t\t\t\t\t\t\t\\\n-  &ret;\t\t\t\t\t\t\t\t\t\\\n-  &tmp;\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  asm volatile (\"fnstcw %0\" : \"=m\" (ostatus));\t\t\t\t\\\n-  nstatus = ostatus | 0x0c00;\t\t\t\t\t\t\\\n-  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (nstatus));\t\t\\\n-  tmp = arg0;\t\t\t\t\t\t\t\t\\\n-  asm volatile (\"fldl %0\" : /* no outputs */ : \"m\" (tmp));\t\t\\\n-  asm volatile (\"fistpl %0\" : \"=m\" (ret));\t\t\t\t\\\n-  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (ostatus));\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  return ret;\t\t\t\t\t\t\t\t\\\n-}\n-"}, {"sha": "003f248fb05750005dfdb7ef3f3903c6264878e3", "filename": "gcc/config/i386/rtemself.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtemself.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -86,9 +86,6 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES  \"-Drtems -D__rtems__ -Asystem=rtems\"\n \n-/* Get perform_* macros to build libgcc.a.  */\n-#include \"i386/perform.h\"\n-\n /* A C statement (sans semicolon) to output to the stdio stream\n    FILE the assembler definition of uninitialized global DECL named\n    NAME whose size is SIZE bytes and alignment is ALIGN bytes."}, {"sha": "b5c8ec208716e8fe119248210e13ba3aae304a7f", "filename": "gcc/config/i386/t-beos", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-beos?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,7 +1,3 @@\n-# Do not build libgcc1.\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n # There are system headers elsewhere, but these are the ones that\n # we are most likely to want to apply any fixes to.\n SYSTEM_HEADER_DIR = /boot/develop/headers/posix"}, {"sha": "360faca79faea380ec8db16438081fe3599ef114", "filename": "gcc/config/i386/t-cygwin", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-cygwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-cygwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygwin?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,5 +1,3 @@\n-LIBGCC1 = libgcc1-asm.a\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = i386/cygwin.asm\n LIB1ASMFUNCS = _chkstk\n "}, {"sha": "6160b7ec945d4e0b05196bdbeb36c763b30010e0", "filename": "gcc/config/i386/t-djgpp", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi386%2Ft-djgpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi386%2Ft-djgpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-djgpp?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,2 +0,0 @@\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null"}, {"sha": "2970fa714155b364ce9485dbfab3022ee054d8e6", "filename": "gcc/config/i386/t-i386bare", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi386%2Ft-i386bare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi386%2Ft-i386bare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386bare?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,3 +0,0 @@\n-# The i386 md has all of these taken care of, according to sef.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "9560d905521130f1d8bb8df4620203ac6e2f817f", "filename": "gcc/config/i386/t-i386elf", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-i386elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-i386elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386elf?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,3 @@\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n-\n # For svr4 we build crtbegin.o and crtend.o which serve to add begin and\n # end labels to the .ctors and .dtors section when we link using gcc.\n "}, {"sha": "2c883b127fa11c0ba2607221becbb0e6cca21e94", "filename": "gcc/config/i386/t-interix", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-interix?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,7 +1,3 @@\n-# t-interix\n-LIBGCC1 = libgcc1-asm.a\n-CROSS_LIBGCC1 = libgcc1-asm.a\n-\n LIB1ASMSRC = i386/cygwin.asm\n LIB1ASMFUNCS = _chkstk\n \n@@ -11,6 +7,3 @@ interix.o: $(srcdir)/config/i386/interix.c\n # System headers will track gcc's needs.\n # Even LANG_EXTRA_HEADERS may be temporary.\n USER_H=$(LANG_EXTRA_HEADERS)\n-\n-# We don't want this one either.\n-INSTALL_ASSERT_H="}, {"sha": "66ba228551fcffdb821f780d3f6b6a9ef1cdd367", "filename": "gcc/config/i386/t-netware", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-netware", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-netware", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-netware?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,5 +1,2 @@\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n-\n # Our header files are supposed to be correct, nein?\n STMP_FIXPROTO ="}, {"sha": "4b70ba78ae0fc57ae11ba4a1888cebc777aa6784", "filename": "gcc/config/i386/t-next", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-next", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-next", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-next?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,7 +1,3 @@\n-# libgcc1.c is not needed, since the standard library has these functions.\n-LIBGCC1=libgcc1.null\n-CROSS_LIBGCC1=libgcc1.null\n-\n # Specify other dirs of system header files to be fixed.\n OTHER_FIXINCLUDES_DIRS= /LocalDeveloper/Headers\n "}, {"sha": "d301ed96d5f6924ca5342eb671bedc44c95187a6", "filename": "gcc/config/i386/t-rtems-i386", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-rtems-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-rtems-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-rtems-i386?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -5,9 +5,6 @@\n # version of these files.\n #\n \n-LIBGCC1 = \n-CROSS_LIBGCC1 = \n-\n crti.o: $(srcdir)/config/i386/sol2-ci.asm $(GCC_PASSES)\n \tsed -e '/^!/d' <$(srcdir)/config/i386/sol2-ci.asm >crti.s\n \t$(GCC_FOR_TARGET) -c -o crti.o crti.s"}, {"sha": "5d7522c3dab4968eaaa6e42ecf62e90f1557fe42", "filename": "gcc/config/i386/t-sol2", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-sol2?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,9 +1,3 @@\n-# we need to supply our own assembly versions of libgcc1.c files,\n-# since the user may not have native 'cc' available\n-\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n-\n # gmon build rule:\n gmon.o:\t$(srcdir)/config/i386/gmon-sol2.c $(GCC_PASSES) $(CONFIG_H)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\"}, {"sha": "6160b7ec945d4e0b05196bdbeb36c763b30010e0", "filename": "gcc/config/i386/t-vsta", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi386%2Ft-vsta", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fi386%2Ft-vsta", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-vsta?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,2 +0,0 @@\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null"}, {"sha": "0ae6b2673163326a3649de7f846fb709903f56f9", "filename": "gcc/config/i386/uwin.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fuwin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi386%2Fuwin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fuwin.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-/* stuff needed for libgcc1 on win32. */\n+/* stuff needed for libgcc on win32. */\n \n #ifdef L_chkstk\n "}, {"sha": "1ace6e8f1573c1b6579374755e455de3b57b09df", "filename": "gcc/config/i860/fx2800.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi860%2Ffx2800.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi860%2Ffx2800.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Ffx2800.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -235,19 +235,13 @@ Boston, MA 02111-1307, USA.  */\n /* Undefine some things defined in i860.h because the native C compiler\n    on the FX/2800 emits code to do these operations inline.  For GCC,\n    we will use the default implementation of these things... i.e.\n-   generating calls to libgcc1 routines.  */\n+   generating calls to libgcc routines.  */\n \n #undef DIVSI3_LIBCALL\n #undef UDIVSI3_LIBCALL\n #undef REMSI3_LIBCALL\n #undef UREMSI3_LIBCALL\n \n-/* The Alliant compiler's mod function gives the wrong result after a\n-   shift operation. This bug typically hits in hash functions. */\n-\n-#define perform_umodsi3(a, b)\ta %= b; if (a == b) a=0; return a\n-#define perform_modsi3(a, b)\ta %= b; if (a == b) a=0; return a\n-\n /* Global pointer needs to be 8 byte aligned? Link error if not... */\n \n #define DATA_ALIGNMENT(dummy,align)\t\\"}, {"sha": "063e886b599d08c2ac7f0aef3715e83a3e4491dd", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1372,24 +1372,6 @@ extern const char *i860_reg_prefix;\n     }\t\t\t\t\t\t\t\t\\\n }\n \n-/* The following #defines are used when compiling the routines in\n-   libgcc1.c.  Since the i860 calling conventions require single\n-   precision floats to be passed in the floating-point registers\n-   (rather than in the general registers) we have to build the\n-   libgcc1.c routines in such a way that they know the actual types\n-   of their formal arguments and the actual types of their return\n-   values.  Otherwise, gcc will generate calls to the libgcc1.c\n-   routines, passing arguments in the floating-point registers,\n-   but the libgcc1.c routines will expect their arguments on the\n-   stack (where the i860 calling conventions require structs &\n-   unions to be passed).  */\n-\n-#define FLOAT_VALUE_TYPE\tfloat\n-#define INTIFY(FLOATVAL)\t(FLOATVAL)\n-#define FLOATIFY(INTVAL)\t(INTVAL)\n-#define FLOAT_ARG_TYPE\t\tfloat\n-\n-\n /* Optionally define this if you have added predicates to\n    `MACHINE.c'.  This macro is called within an initializer of an\n    array of structures.  The first field in the structure is the"}, {"sha": "7a5149f9f9784ecc23ef57b6db217ebfa4623e2e", "filename": "gcc/config/i960/t-960bare", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi960%2Ft-960bare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi960%2Ft-960bare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Ft-960bare?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,3 @@\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n LIB2FUNCS_EXTRA = xp-bit.c\n \n # We want fine grained libraries, so use the new code to build the"}, {"sha": "39c49838de7990240d308f7f44f67070c306a0b3", "filename": "gcc/config/i960/t-vxworks960", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi960%2Ft-vxworks960", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fi960%2Ft-vxworks960", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Ft-vxworks960?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,3 @@\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n # We don't want to put exit in libgcc.a for VxWorks, because VxWorks\n # does not have _exit.\n TARGET_LIBGCC2_CFLAGS = -Dexit=unused_exit"}, {"sha": "4aa43876eaf0dea743e1635d958f442dc19cf389", "filename": "gcc/config/ia64/t-hpux", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fia64%2Ft-hpux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fia64%2Ft-hpux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-hpux?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,6 +0,0 @@\n-# HP-UX gets an undefined main when building LIBGCC1_TEST because the\n-# linkspec has \"-u main\" and we want that for linking but it makes\n-# LIBGCC1_TEST fail because it uses -nostdlib -nostartup and main is\n-# not defined in the test program.\n-\n-LIBGCC1_TEST ="}, {"sha": "f89e80ba9e24bfca3a56a483ed7e3ed7fa19da08", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n-# Name of assembly file containing libgcc1 functions.\n-# This entry must be present, but it can be empty if the target does\n-# not need any assembler functions to support its code generation.\n-CROSS_LIBGCC1 = libgcc1-asm.a\n-LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC    = ia64/lib1funcs.asm\n \n # ??? We change the names of the DImode div/mod files so that they won't"}, {"sha": "79e8945838740236b2a782f544ec80cff407ff7d", "filename": "gcc/config/m32r/t-m32r", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm32r%2Ft-m32r", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm32r%2Ft-m32r", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Ft-m32r?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,3 @@\n-# lib1funcs.asm is currently empty.\n-CROSS_LIBGCC1 =\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "5ff3e9a6bfc6a2a770a204ddb704566b22939cb3", "filename": "gcc/config/m68hc11/larith.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Flarith.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-/* libgcc1 routines for M68HC11 & M68HC12.\n+/* libgcc routines for M68HC11 & M68HC12.\n    Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC."}, {"sha": "a73fe893da5518b73fbadfd8c56e9b894d141263", "filename": "gcc/config/m68hc11/t-m68hc11-gas", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -15,7 +15,6 @@ RANLIB_FOR_TARGET = ` \\\n \n T_CPPFLAGS = -DUSE_GAS\n \n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = m68hc11/larith.asm\n LIB1ASMFUNCS = _mulsi3 \\\n \t_mulqi3 _ashlsi3 _ashrsi3 _lshrsi3 \\"}, {"sha": "7bcee2eabe489e72166e1bcadf4ff8a719672d53", "filename": "gcc/config/m68k/lb1sf68.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-/* libgcc1 routines for 68000 w/o floating-point hardware.\n+/* libgcc routines for 68000 w/o floating-point hardware.\n    Copyright (C) 1994, 1996, 1997, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC."}, {"sha": "2e30d9105e458d56784a708f12631875f4a6ca60", "filename": "gcc/config/m68k/t-lynx", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-lynx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-lynx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-lynx?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = m68k/lb1sf68.asm\n LIB1ASMFUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n    _double _float _floatex \\"}, {"sha": "faad439867d18c17cda3096dccd572372409b16a", "filename": "gcc/config/m68k/t-m68kbare", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-m68kbare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-m68kbare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-m68kbare?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,12 +1,9 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = m68k/lb1sf68.asm\n LIB1ASMFUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n    _double _float _floatex \\\n    _eqdf2 _nedf2 _gtdf2 _gedf2 _ltdf2 _ledf2 \\\n    _eqsf2 _nesf2 _gtsf2 _gesf2 _ltsf2 _lesf2\n \n-# These are really part of libgcc1, but this will cause them to be\n-# built correctly, so...\n LIB2FUNCS_EXTRA = fpgnulib.c xfgnulib.c\n \n fpgnulib.c: $(srcdir)/config/m68k/fpgnulib.c"}, {"sha": "955bdaa7bb4ed59aff7a83edc8078f4d2579ed3c", "filename": "gcc/config/m68k/t-m68kelf", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-m68kelf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-m68kelf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-m68kelf?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,12 +1,9 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = m68k/lb1sf68.asm\n LIB1ASMFUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n    _double _float _floatex \\\n    _eqdf2 _nedf2 _gtdf2 _gedf2 _ltdf2 _ledf2 \\\n    _eqsf2 _nesf2 _gtsf2 _gesf2 _ltsf2 _lesf2\n \n-# These are really part of libgcc1, but this will cause them to be\n-# built correctly, so...\n LIB2FUNCS_EXTRA = fpgnulib.c xfgnulib.c\n \n fpgnulib.c: $(srcdir)/config/m68k/fpgnulib.c"}, {"sha": "1d6cd3d8dd7f22276071fbd8d72f994f1cec2446", "filename": "gcc/config/m68k/t-mot3300-gald", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-mot3300-gald", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-mot3300-gald", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-mot3300-gald?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,15 +1,12 @@\n T_CPPFLAGS = -DUSE_GAS -DUSE_GLD\n TARGET_LIBGCC2_CFLAGS = -DUSE_GAS\n \n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = m68k/lb1sf68.asm\n LIB1ASMFUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n    _double _float _floatex \\\n    _eqdf2 _nedf2 _gtdf2 _gedf2 _ltdf2 _ledf2 \\\n    _eqsf2 _nesf2 _gtsf2 _gesf2 _ltsf2 _lesf2\n \n-# These are really part of libgcc1, but this will cause them to be\n-# built correctly, so...\n LIB2FUNCS_EXTRA = fpgnulib.c xfgnulib.c\n \n fpgnulib.c: $(srcdir)/config/m68k/fpgnulib.c"}, {"sha": "ba222499084f57c49b433e74aec16820780079eb", "filename": "gcc/config/m68k/t-mot3300-gas", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-mot3300-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-mot3300-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-mot3300-gas?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,15 +1,12 @@\n T_CPPFLAGS = -DUSE_GAS\n TARGET_LIBGCC2_CFLAGS = -DUSE_GAS\n \n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = m68k/lb1sf68.asm\n LIB1ASMFUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n    _double _float _floatex \\\n    _eqdf2 _nedf2 _gtdf2 _gedf2 _ltdf2 _ledf2 \\\n    _eqsf2 _nesf2 _gtsf2 _gesf2 _ltsf2 _lesf2\n \n-# These are really part of libgcc1, but this will cause them to be\n-# built correctly, so...\n LIB2FUNCS_EXTRA = fpgnulib.c xfgnulib.c\n \n fpgnulib.c: $(srcdir)/config/m68k/fpgnulib.c"}, {"sha": "12711447dae9de206c4a34e6ec7fb47b57fb49fd", "filename": "gcc/config/m68k/t-next", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-next", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-next", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-next?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,2 @@\n-# libgcc1.c is not needed, since the standard library has these functions.\n-LIBGCC1=\n-CROSS_LIBGCC1=\n-\n nextstep.o: $(srcdir)/config/nextstep.c $(CONFIG_H) flags.h tree.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "f3f8d7bd13c5589d2ecd4d34d046e08e269972d1", "filename": "gcc/config/m68k/t-vxworks68", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-vxworks68", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm68k%2Ft-vxworks68", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-vxworks68?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = m68k/lb1sf68.asm\n LIB1ASMFUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n    _double _float _floatex \\\n@@ -9,8 +8,6 @@ LIB1ASMFUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n # does not have _exit.\n TARGET_LIBGCC2_CFLAGS = -Dexit=unused_exit\n \n-# These are really part of libgcc1, but this will cause them to be\n-# built correctly, so...\n LIB2FUNCS_EXTRA = fpgnulib.c xfgnulib.c\n \n fpgnulib.c: $(srcdir)/config/m68k/fpgnulib.c"}, {"sha": "c4406233d97d7c20a8242dc5cd36fc5f38f331cd", "filename": "gcc/config/m88k/t-bug", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-bug", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-bug", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-bug?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -8,5 +8,3 @@ $(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n \t$(srcdir)/config/m88k/m88k-move.sh\n \n LIB2FUNCS_EXTRA = $(MOVE_ASM)\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null"}, {"sha": "384100b0f79c4d33c05b84eae67b941646cef506", "filename": "gcc/config/m88k/t-dgux", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-dgux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-dgux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-dgux?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -8,8 +8,6 @@ $(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n \t$(srcdir)/config/m88k/m88k-move.sh\n \n LIB2FUNCS_EXTRA = $(MOVE_ASM)\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n \n # In a coff environment, a link script is required for ctors and dtors.\n m88kdgux.ld: $(srcdir)/config/m88k/dgux.ld"}, {"sha": "1627b277c81139c5ab5962115f5e97b79bb778f4", "filename": "gcc/config/m88k/t-dgux-gas", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-dgux-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-dgux-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-dgux-gas?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -8,8 +8,6 @@ $(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n \t$(srcdir)/config/m88k/m88k-move.sh\n \n LIB2FUNCS_EXTRA = $(MOVE_ASM)\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n T_CPPFLAGS = -DUSE_GAS\n \n # In a coff environment, a link script is required."}, {"sha": "6a3461a478a2aba403fb77b5e4e6ec51adb2738b", "filename": "gcc/config/m88k/t-dguxbcs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-dguxbcs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-dguxbcs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-dguxbcs?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -8,8 +8,6 @@ $(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n \t$(srcdir)/config/m88k/m88k-move.sh\n \n LIB2FUNCS_EXTRA = $(MOVE_ASM)\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n \n # In a coff environment, a link script is required for ctors and dtors.\n m88kdgux.ld: $(srcdir)/config/m88k/dgux.ld"}, {"sha": "ddbfa73da1249995f818d5af3223b23e08d2718e", "filename": "gcc/config/m88k/t-luna", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-luna", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-luna", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-luna?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -8,5 +8,3 @@ $(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n \t$(srcdir)/config/m88k/m88k-move.sh -no-tdesc\n \n LIB2FUNCS_EXTRA = $(MOVE_ASM)\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null"}, {"sha": "2b2d72784bebd1fe4e9af3b9a8f1eb7fde5318a8", "filename": "gcc/config/m88k/t-luna-gas", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-luna-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-luna-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-luna-gas?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -8,6 +8,4 @@ $(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n \t$(SHELL) $(srcdir)/config/m88k/m88k-move.sh -no-tdesc\n \n LIB2FUNCS_EXTRA = $(MOVE_ASM)\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n T_CPPFLAGS = -DUSE_GAS"}, {"sha": "c4406233d97d7c20a8242dc5cd36fc5f38f331cd", "filename": "gcc/config/m88k/t-m88k", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-m88k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-m88k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-m88k?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -8,5 +8,3 @@ $(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n \t$(srcdir)/config/m88k/m88k-move.sh\n \n LIB2FUNCS_EXTRA = $(MOVE_ASM)\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null"}, {"sha": "c5096ea53b9ac42607668af94aa0f024c2c8d430", "filename": "gcc/config/m88k/t-m88k-gas", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-m88k-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-m88k-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-m88k-gas?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -8,8 +8,6 @@ $(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n \t$(srcdir)/config/m88k/m88k-move.sh\n \n LIB2FUNCS_EXTRA = $(MOVE_ASM)\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n T_CPPFLAGS = -DUSE_GAS\n \n # For svr4 we build crtbegin.o and crtend.o which serve to add begin and"}, {"sha": "858fdc0476eec563285e74dadf91f49e15e190af", "filename": "gcc/config/m88k/t-sysv4", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-sysv4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fm88k%2Ft-sysv4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-sysv4?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -10,8 +10,6 @@ $(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n \t$(srcdir)/config/m88k/m88k-move.sh -abi\n \n LIB2FUNCS_EXTRA = $(MOVE_ASM)\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n \n # We need to use -fPIC when we are using gcc to compile the routines in\n # crtstuff.c.  This is only really needed when we are going to use gcc/g++"}, {"sha": "09661d6ef45bbee5f27a11b31b012767c875c5bb", "filename": "gcc/config/mcore/lib1.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmcore%2Flib1.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmcore%2Flib1.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Flib1.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-/* libgcc1 routines for the MCore.\n+/* libgcc routines for the MCore.\n    Copyright (C) 1993, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC."}, {"sha": "313853d399a370e2b1474d4575ea0369a1b82bc6", "filename": "gcc/config/mcore/t-mcore", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmcore%2Ft-mcore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmcore%2Ft-mcore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Ft-mcore?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,4 @@\n-# Name of assembly file containing libgcc1 functions.\n-# This entry must be present, but it can be empty if the target does\n-# not need any assembler functions to support its code generation.\n \n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC    = mcore/lib1.asm\n LIB1ASMFUNCS  = _divsi3 _udivsi3 _modsi3 _umodsi3\n "}, {"sha": "0c94d38ef850945f9acb562d660c1235ae17c249", "filename": "gcc/config/mcore/t-mcore-pe", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmcore%2Ft-mcore-pe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmcore%2Ft-mcore-pe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Ft-mcore-pe?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n-# Name of assembly file containing libgcc1 functions.\n-# This entry must be present, but it can be empty if the target does\n-# not need any assembler functions to support its code generation.\n-\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC    = mcore/lib1.asm\n LIB1ASMFUNCS  = _divsi3 _udivsi3 _modsi3 _umodsi3\n "}, {"sha": "3dc437caa816200a1ddcef4d0831c9f4a55a0f39", "filename": "gcc/config/mips/t-bsd", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-bsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-bsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-bsd?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n # Exactly the same as t-mips, except we must define SYSTEM_HEADER_DIR\n # to point to the bsd43 include files.\n SYSTEM_HEADER_DIR = /bsd43/usr/include\n-\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "2cdad601a9b65a4001f80c25ef370652a9784f4f", "filename": "gcc/config/mips/t-bsd-gas", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-bsd-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-bsd-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-bsd-gas?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n # Exactly the same as t-mips-gas, except we must define SYSTEM_HEADER_DIR\n # to point to the bsd43 include files.\n SYSTEM_HEADER_DIR = /bsd43/usr/include\n-\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "6eb5217a937ac00bf2e1de29897fbab8e6ef0475", "filename": "gcc/config/mips/t-cross64", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-cross64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-cross64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-cross64?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -4,11 +4,6 @@ AR = /usr/cross64/usr/bin/ar\n \n # The rest of the file is identical to t-iris6.\n \n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 = \n-CROSS_LIBGCC1 = \n-\n MULTILIB_OPTIONS=mips1/mips2/mips3/mips4\n MULTILIB_DIRNAMES=\n MULTILIB_MATCHES="}, {"sha": "8d7abc053bc90279cfb05ef130b11b80a83ad3a2", "filename": "gcc/config/mips/t-ecoff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-ecoff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-ecoff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-ecoff?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,12 +1,5 @@\n CONFIG2_H\t= $(srcdir)/config/mips/ecoff.h\n \n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-\n-# When building a cross compiler, put the mips16 support functions in\n-# libgcc1.a.\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = mips/mips16.S\n LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n@@ -26,8 +19,6 @@ LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-# fp-bit and dp-bit are really part of libgcc1, but this will cause\n-# them to be built correctly, so... [taken from t-sparclite]\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "43df4932993c0c7a4dbd0a70faa464c28b49c99a", "filename": "gcc/config/mips/t-elf", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-elf?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,16 +1,9 @@\n CONFIG2_H\t= $(srcdir)/config/mips/ecoff.h\n \n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-\n EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n # Don't let CTOR_LIST end up in sdata section.\n CRTSTUFF_T_CFLAGS = -G 0\n \n-# When building a cross compiler, put the mips16 support functions in\n-# libgcc1.a.\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = mips/mips16.S\n LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n@@ -30,8 +23,6 @@ LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-# fp-bit and dp-bit are really part of libgcc1, but this will cause\n-# them to be built correctly, so... [taken from t-sparclite]\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "36a8545e95c778e86e24f359c977646350fdc598", "filename": "gcc/config/mips/t-iris6", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-iris6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-iris6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris6?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 = \n-CROSS_LIBGCC1 = \n-\n # ??? If no mabi=X option given, but a mipsX option is, then should deal\n # with that.\n # ??? mabi=32 is deliberately left off the list because it doesn't work yet."}, {"sha": "94f1c442b68a4bcb7d6e24d527ef0016694c8f2a", "filename": "gcc/config/mips/t-mips", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-mips?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,4 +0,0 @@\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "94f1c442b68a4bcb7d6e24d527ef0016694c8f2a", "filename": "gcc/config/mips/t-mips-gas", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fmips%2Ft-mips-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fmips%2Ft-mips-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-mips-gas?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,4 +0,0 @@\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "94f1c442b68a4bcb7d6e24d527ef0016694c8f2a", "filename": "gcc/config/mips/t-osfrose", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fmips%2Ft-osfrose", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fmips%2Ft-osfrose", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-osfrose?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,4 +0,0 @@\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "85a6c545ac519650c836765f21b8046775b5c11f", "filename": "gcc/config/mips/t-r3900", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-r3900", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-r3900", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-r3900?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,12 +1,5 @@\n CONFIG2_H\t= $(srcdir)/config/mips/ecoff.h\n \n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-\n-# When building a cross compiler, put the mips16 support functions in\n-# libgcc1.a.\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = mips/mips16.S\n LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n@@ -26,8 +19,6 @@ LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-# fp-bit and dp-bit are really part of libgcc1, but this will cause\n-# them to be built correctly, so... [taken from t-sparclite]\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "e27c02b19ffa76836938137f0eb62929e602e618", "filename": "gcc/config/mips/t-svr3", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-svr3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-svr3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-svr3?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n # Exactly the same as t-mips, except we must define SYSTEM_HEADER_DIR\n # to point to the svr3 include files.\n SYSTEM_HEADER_DIR = /sysv/usr/include\n-\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "e9f3f9e6da9ebbff58065917d10d459bbdf66408", "filename": "gcc/config/mips/t-svr3-gas", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-svr3-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-svr3-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-svr3-gas?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n # Exactly the same as t-mips-gas, except we must define SYSTEM_HEADER_DIR\n # to point to the svr3 include files.\n SYSTEM_HEADER_DIR = /sysv/usr/include\n-\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "2b1a24e804f2b17c8a785423845ddd78c066fd1f", "filename": "gcc/config/mips/t-svr4", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-svr4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-svr4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-svr4?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n # Exactly the same as t-mips, except we must define SYSTEM_HEADER_DIR\n # to point to the svr4 include files.\n SYSTEM_HEADER_DIR = /svr4/usr/include\n-\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "8c4bff8bc417ddd92e903c8a455d90cde6c9f153", "filename": "gcc/config/mips/t-svr4-gas", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-svr4-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-svr4-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-svr4-gas?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n # Exactly the same as t-mips-gas, except we must define SYSTEM_HEADER_DIR\n # to point to the svr4 include files.\n SYSTEM_HEADER_DIR = /svr4/usr/include\n-\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "ab40040911194b51c5cc62e82b38d94f11f5a3b6", "filename": "gcc/config/mips/t-ultrix", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-ultrix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmips%2Ft-ultrix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-ultrix?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1 @@\n CONFIG2_H\t= $(srcdir)/config/mips/mips.h\n-\n-# Suppress building libgcc1.a, since the MIPS compiler port is complete\n-# and does not need anything from libgcc1.a.\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "90ae1beba8094c5300e58a0e85712186b94ba773", "filename": "gcc/config/mn10200/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmn10200%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmn10200%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Flib1funcs.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-/* libgcc1 routines for Matsushita mn10200.\n+/* libgcc routines for Matsushita mn10200.\n    Copyright (C) 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC."}, {"sha": "7b2dcea652fb101c072efc8ca1d259ac26cbf512", "filename": "gcc/config/mn10200/t-mn10200", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmn10200%2Ft-mn10200", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmn10200%2Ft-mn10200", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Ft-mn10200?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,5 +1,3 @@\n-LIBGCC1=libgcc1.null\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = mn10200/lib1funcs.asm\n LIB1ASMFUNCS    = _divhi3 \\\n \t\t  _modhi3 \\"}, {"sha": "2e26e229acc62c2d9af28b08dcea6f26b4c858af", "filename": "gcc/config/mn10300/t-mn10300", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmn10300%2Ft-mn10300", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fmn10300%2Ft-mn10300", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Ft-mn10300?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,3 @@\n-LIBGCC1=libgcc1.null\n-CROSS_LIBGCC1=libgcc1.null\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "65f16c9566f9d3d5f2bd9cd2ccb82832ebf59903", "filename": "gcc/config/pa/t-linux", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpa%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpa%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-linux?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,3 @@\n-LIBGCC1=libgcc1-asm.a\n-CROSS_LIBGCC1=libgcc1-asm.a\n-\n #Plug millicode routines into libgcc.a  We want these on both native and\n #cross compiles.\n \n@@ -16,7 +13,6 @@ LIB1ASMSRC = pa/milli32.S\n CRTSTUFF_T_CFLAGS_S = -fPIC\n \n # Compile libgcc2.a as PIC.\n-# This is also used when compiling libgcc1 if libgcc1 is the asm variety.\n TARGET_LIBGCC2_CFLAGS = -fPIC -DELF=1 -DLINUX=1\n \n ADA_CFLAGS=-mdisable-indexing"}, {"sha": "e376d22538ef70f6e42a64df99a3e070a38d5ba7", "filename": "gcc/config/pa/t-linux64", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpa%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpa%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-linux64?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,17 +1,12 @@\n-LIBGCC1=libgcc1-asm.a\n-CROSS_LIBGCC1=libgcc1-asm.a\n-\n #Plug millicode routines into libgcc.a  We want these on both native and\n #cross compiles.\n \n LIB1ASMFUNCS =  _divI _divU _remI _remU _div_const _mulI\n-\n LIB1ASMSRC = pa/milli64.S\n \n # Compile crtbeginS.o and crtendS.o as PIC.\n # Actually, hppa64 is always PIC but adding -fPIC does no harm.\n CRTSTUFF_T_CFLAGS_S = -fPIC\n \n # Compile libgcc2.a as PIC.\n-# This is also used when compiling libgcc1 if libgcc1 is the asm variety.\n TARGET_LIBGCC2_CFLAGS = -fPIC -Dpa64=1 -DELF=1"}, {"sha": "c32e7427a4c043bfbcc2dc08f2f5d0851414bb84", "filename": "gcc/config/pa/t-pa", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpa%2Ft-pa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpa%2Ft-pa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,5 +1,3 @@\n-LIBGCC1=libgcc1.null\n-CROSS_LIBGCC1=libgcc1.null\n ADA_CFLAGS=-mdisable-indexing\n LIB2FUNCS_EXTRA=lib2funcs.asm quadlib.c\n "}, {"sha": "8647948aad0185f05162d3468a5f62f4b022e48d", "filename": "gcc/config/pa/t-pa64", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpa%2Ft-pa64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpa%2Ft-pa64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa64?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,3 @@\n-LIBGCC1=libgcc1.null\n-CROSS_LIBGCC1=libgcc1-asm.a\n-\n LIB1ASMFUNCS =  _divI _divU _remI _remU _div_const\n LIB1ASMSRC = pa/milli64.S\n TARGET_LIBGCC2_CFLAGS = -fPIC -Dpa64=1 -DELF=1\n@@ -17,4 +14,3 @@ LIB2FUNCS_EXTRA=quadlib.c\n quadlib.c: $(srcdir)/config/pa/quadlib.c\n \trm -f quadlib.c\n \tcp $(srcdir)/config/pa/quadlib.c .\n-"}, {"sha": "882467bfcc7ff3143f0eedc84e9157272f30ddac", "filename": "gcc/config/pa/t-pro", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpa%2Ft-pro", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpa%2Ft-pro", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pro?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,10 +1,3 @@\n-LIBGCC1=libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n-LIB1ASMSRC =\n-LIB1ASMFUNCS =\n-\n-LIBGCC1_TEST =\n-\n ADA_CFLAGS=-mdisable-indexing\n \n LIB2FUNCS_EXTRA=lib2funcs.asm \n@@ -14,7 +7,6 @@ LIB2FUNCS_EXTRA=lib2funcs.asm\n FPBIT = fp-bit.c\n DPBIT = dp-bit.c\n \n-\n dp-bit.c: $(srcdir)/config/fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n "}, {"sha": "38bf1473a4491389741c5f191db80a0668d4601e", "filename": "gcc/config/pdp11/t-pdp11", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Ft-pdp11?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1 @@\n-LIBGCC1 = libgcc1.null\n-CROSS_LIBGCC1 = libgcc1.null\n-\n-# forget the libgcc1...\n-LIBGCC1_TEST =\n-\n TARGET_LIBGCC2_CFLAGS = -O2 -mfloat32\n-#LIB2FUNCS_EXTRA ="}, {"sha": "af390cf9c250aee6326b8eb3be94760a3c2232e3", "filename": "gcc/config/pj/t-pj", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpj%2Ft-pj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fpj%2Ft-pj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Ft-pj?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,7 +1,5 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = pj/lib1funcs.S\n LIB1ASMFUNCS = vhelper pjucmpdi2\n-LIB2FUNCS_EXTRA =\n \n # For svr4 we build crtbegin.o and crtend.o which serve to add begin and\n # end labels to the .ctors and .dtors section when we link using gcc."}, {"sha": "1327bca0414577992d5181ff2e608fa296bc0bd4", "filename": "gcc/config/rs6000/t-aix43", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-aix43", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-aix43", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix43?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,7 +1,3 @@\n-# Do not build libgcc1.\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "1d4fbf744753daf253f0eff783b8fad2897b3506", "filename": "gcc/config/rs6000/t-beos", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-beos?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,7 +1,3 @@\n-# Do not build libgcc1.\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "d2e211f11edafd142f602258aa79a9248fdb48de", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,7 +1,3 @@\n-# Do not build libgcc1.\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "b8e715a220a5df5a61cebdc70d55d2d13925127d", "filename": "gcc/config/rs6000/t-newas", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-newas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-newas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-newas?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n-# Do not build libgcc1.\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-LIBGCC1_TEST =\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "73e0ff7e08159ebbf168cfaa0b550e9dd2235aac", "filename": "gcc/config/rs6000/t-ppccomm", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppccomm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,11 +1,5 @@\n # Common support for PowerPC ELF targets (both EABI and SVR4).\n \n-# Do not build libgcc1.\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n-# These are really part of libgcc1, but this will cause them to be\n-# built correctly, so... [taken from t-sparclite]\n LIB2FUNCS_EXTRA = tramp.S\n \n # This one can't end up in shared libgcc"}, {"sha": "f50ef17027c7f70a993cc2b99d42365906339821", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n-# Do not build libgcc1.\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-LIBGCC1_TEST =\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "d2a860efb5c1e05cb4888876da73449f51719ffd", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -25,7 +25,7 @@ along with this program; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-!! libgcc1 routines for the Hitachi SH cpu.\n+!! libgcc routines for the Hitachi SH cpu.\n !! Contributed by Steve Chamberlain.\n !! sac@cygnus.com\n "}, {"sha": "5e4ed91a3c1a1a73aa62afb33c36b0e6da5a6bdc", "filename": "gcc/config/sh/t-linux", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsh%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsh%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-linux?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,5 +1,4 @@\n TARGET_LIBGCC2_CFLAGS = -fpic\n-LIBGCC1 = libgcc1-asm.a\n LIB1ASMFUNCS = _ashiftrt _ashiftrt_n _ashiftlt _lshiftrt _movstr \\\n   _movstr_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \\\n   _ic_invalidate"}, {"sha": "9788c49c7d92ab9b544ee40dad5b28518b7a9698", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = sh/lib1funcs.asm\n LIB1ASMFUNCS = _ashiftrt _ashiftrt_n _ashiftlt _lshiftrt _movstr \\\n   _movstr_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr"}, {"sha": "b31f82c8122067a1ecdef54dd8d6e3128505a732", "filename": "gcc/config/sparc/lb1spc.asm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Flb1spc.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Flb1spc.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flb1spc.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,5 +1,5 @@\n-/* This is an assembly language implementation of libgcc1.c for the sparc\n-   processor.\n+/* This is an assembly language implementation of mulsi3, divsi3, and modsi3\n+   for the sparc processor.\n \n    These routines are derived from the Sparc Architecture Manual, version 8,\n    slightly edited to match the desired calling convention, and also to"}, {"sha": "9dda6755fb7abee44ac096b87edecbea1ea97a40", "filename": "gcc/config/sparc/lb1spl.asm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Flb1spl.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Flb1spl.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flb1spl.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,5 +1,5 @@\n-/* This is an assembly language implementation of libgcc1.c for the sparclite\n-   processor.\n+/* This is an assembly language implementation of mulsi3, divsi3, and modsi3\n+   for the sparclite processor.\n \n    These routines are all from the Sparclite User's Guide, slightly edited\n    to match the desired calling convention, and also to optimize them.  */"}, {"sha": "5fc405bf62793a1683766682a264bad75430257a", "filename": "gcc/config/sparc/t-chorus-elf", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-chorus-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-chorus-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-chorus-elf?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,13 +1,6 @@\n-# we need to supply our own assembly versions of libgcc1.c files,\n-# since the user may not have native 'cc' available\n-\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = sparc/lb1spc.asm\n LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3\n \n-# crt0 is built elsewhere\n-LIBGCC1_TEST =\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "ead6e25610d0b9b0c5c5a1cbc0b63d0c4d454225", "filename": "gcc/config/sparc/t-elf", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-elf?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,13 +1,3 @@\n-# we need to supply our own assembly versions of libgcc1.c files,\n-# since the user may not have native 'cc' available\n-\n-CROSS_LIBGCC1 = libgcc1-asm.a\n-LIB1ASMSRC = sparc/lb1spc.asm\n-LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3\n-\n-# crt0 is built elsewhere\n-LIBGCC1_TEST =\n-\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c"}, {"sha": "4a5a13b8618ea9082884067f63bd03f2aa85b888", "filename": "gcc/config/sparc/t-sol2", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sol2?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,10 +1,3 @@\n-# we need to supply our own assembly versions of libgcc1.c files,\n-# since the user may not have native 'cc' available\n-\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-LIBGCC1_TEST =\n-\n # gmon build rule:\n $(T)gmon.o:\t$(srcdir)/config/sparc/gmon-sol2.c $(GCC_PASSES) $(CONFIG_H) stmp-int-hdrs\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) \\"}, {"sha": "99acd5d542355539fc4c8e802f3acb0e6f895965", "filename": "gcc/config/sparc/t-sp64", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fsparc%2Ft-sp64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fsparc%2Ft-sp64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sp64?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,2 +0,0 @@\n-LIBGCC1 =\n-CROSS_LIBGCC1 ="}, {"sha": "6dd5c03e619664119d8f62e4199623a43a314615", "filename": "gcc/config/sparc/t-sp86x", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-sp86x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-sp86x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sp86x?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = sparc/lb1spc.asm\n LIB1ASMFUNCS = _divsi3 _modsi3\n "}, {"sha": "bac38de9b794b5438326a01005bcdc45e600a351", "filename": "gcc/config/sparc/t-sparcbare", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-sparcbare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-sparcbare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sparcbare?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,5 @@\n # configuration file for a bare sparc cpu\n \n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = sparc/lb1spc.asm\n LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3\n "}, {"sha": "03c44b5411bb23b875ac6059e60bdc8d6f1905d2", "filename": "gcc/config/sparc/t-sparclite", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-sparclite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-sparclite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sparclite?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = sparc/lb1spl.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _modsi3 _umodsi3\n "}, {"sha": "3334200dd64c63dfe951c22018c6dc0c5b4d699e", "filename": "gcc/config/sparc/t-splet", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-splet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-splet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-splet?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,5 @@\n # configuration file for a bare sparclet cpu, aout format files\n \n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = sparc/lb1spc.asm\n LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3\n "}, {"sha": "3e10575eaea58264e3e09f2d191400a98534d0af", "filename": "gcc/config/sparc/t-sunos40", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fsparc%2Ft-sunos40", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fsparc%2Ft-sunos40", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sunos40?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,7 +0,0 @@\n-# SunOS 4.0.* \n-# /bin/as doesn't recognize the v8 instructions, so we can't do a v8\n-# multilib build.\n-\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-LIBGCC1_TEST ="}, {"sha": "1056d931f8a6430f4f2f46c9c2f7a29fb4542d3a", "filename": "gcc/config/sparc/t-sunos41", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-sunos41", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-sunos41", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sunos41?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,9 +1,5 @@\n # SunOS 4.1.*\n \n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-LIBGCC1_TEST =\n-\n MULTILIB_OPTIONS = fpic/fPIC mcpu=v8\n MULTILIB_DIRNAMES = pic ucpic v8\n MULTILIB_MATCHES = mcpu?v8=mv8"}, {"sha": "5a47341ac40f043cb0f4b7879b052c43d30e5c44", "filename": "gcc/config/sparc/t-vxsparc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-vxsparc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-vxsparc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-vxsparc?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,10 +1,3 @@\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n-# We don't want to build .umul, etc., because VxWorks provides them,\n-# which means that libgcc1-test will fail.\n-LIBGCC1_TEST =\n-\n # We don't want to put exit in libgcc.a for VxWorks, because VxWorks\n # does not have _exit.\n TARGET_LIBGCC2_CFLAGS = -Dexit=unused_exit"}, {"sha": "ee779eec91b907cbf464c9676296a85cde141469", "filename": "gcc/config/sparc/t-vxsparc64", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-vxsparc64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fsparc%2Ft-vxsparc64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-vxsparc64?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,16 +1,7 @@\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n-# We don't want to build .umul, etc., because VxWorks provides them,\n-# which means that libgcc1-test will fail.\n-LIBGCC1_TEST =\n-\n # We don't want to put exit in libgcc.a for VxWorks, because VxWorks\n # does not have _exit.\n TARGET_LIBGCC2_CFLAGS = -Dexit=unused_exit\n \n-# fp-bit and dp-bit are really part of libgcc1, but this will cause\n-# them to be built correctly, so... [taken from t-sparclite]\n LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n \n dp-bit.c: $(srcdir)/config/fp-bit.c"}, {"sha": "9b0fb383a5818ce535a608c10feae017cf20bfcf", "filename": "gcc/config/t-libc-ok", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ft-libc-ok", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ft-libc-ok", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-libc-ok?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,3 +1 @@\n-LIBGCC1=libgcc1.null\n-CROSS_LIBGCC1=libgcc1.null\n CRTSTUFF_T_FLAGS_S=-fPIC"}, {"sha": "d16db7de6150c4a0656fb74c2fc653df907a81d5", "filename": "gcc/config/t-linux", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -20,9 +20,3 @@ SHLIB_INSTALL = $(INSTALL_DATA) @shlib_base_name@.so $$(slibdir)/@shlib_base_nam\n \t$(LN_S) @shlib_base_name@.so.0 $$(slibdir)/@shlib_base_name@.so\n SHLIB_MKMAP = $(srcdir)/mkmap-symver.awk\n SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver $(srcdir)/config/libgcc-glibc.ver\n-\n-# Do not build libgcc1. Let gcc generate those functions. The GNU/Linux\n-# C library can handle them.\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-LIBGCC1_TEST ="}, {"sha": "d284b3e7e413c2e4a7f5d3b9a3592bf88e81cdc2", "filename": "gcc/config/t-linux-aout", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ft-linux-aout", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ft-linux-aout", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux-aout?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,2 @@\n # Don't run fixproto\n STMP_FIXPROTO =\n-\n-# Do not build libgcc1. Let gcc generate those functions. The GNU/Linux\n-# C library can handle them.\n-LIBGCC1 = \n-CROSS_LIBGCC1 =\n-LIBGCC1_TEST ="}, {"sha": "d284b3e7e413c2e4a7f5d3b9a3592bf88e81cdc2", "filename": "gcc/config/t-netbsd", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-netbsd?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,6 +1,2 @@\n-LIBGCC1=libgcc1.null\n-CROSS_LIBGCC1=libgcc1.null\n-LIBGCC1_TEST=\n-\n # Don't run fixproto\n STMP_FIXPROTO ="}, {"sha": "0489e87203899436e94a5e8b5cacd3427b530819", "filename": "gcc/config/t-openbsd", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ft-openbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Ft-openbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-openbsd?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -3,5 +3,3 @@ STMP_FIXPROTO =\n \n # We don't need GCC's own include files but we do need lang specific ones.\n USER_H = ${LANG_EXTRA_HEADERS}\n-INSTALL_ASSERT_H =\n-"}, {"sha": "621ba60a4868373059d4f3adb80cd72032e21e9b", "filename": "gcc/config/v850/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fv850%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fv850%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Flib1funcs.asm?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,4 @@\n-/* libgcc1 routines for NEC V850.\n+/* libgcc routines for NEC V850.\n    Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC."}, {"sha": "1b96a8adc6f02ee566d44aef94627f70887d15d2", "filename": "gcc/config/v850/t-v850", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fv850%2Ft-v850", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fconfig%2Fv850%2Ft-v850", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Ft-v850?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,4 +1,3 @@\n-CROSS_LIBGCC1 = libgcc1-asm.a\n LIB1ASMSRC = v850/lib1funcs.asm\n LIB1ASMFUNCS\t= _mulsi3 \\\n \t\t  _divsi3 \\"}, {"sha": "fbc85d12a32f45231e66f9e2239aa39255cb97cb", "filename": "gcc/config/vax/t-openbsd", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fvax%2Ft-openbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fvax%2Ft-openbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Ft-openbsd?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,3 +0,0 @@\n-# We need urem and udiv from some kind of support library (e.g. libc) and\n-# at this point we don't have that available\n-LIBGCC1_TEST ="}, {"sha": "1d64c37b2082ec5b1fdfeab3f0db094d76a093bd", "filename": "gcc/config/vax/t-vax", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fvax%2Ft-vax", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Fconfig%2Fvax%2Ft-vax", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Ft-vax?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,3 +0,0 @@\n-LIBGCC1=libgcc1.null\n-CROSS_LIBGCC1=libgcc1.null\n-"}, {"sha": "38bacfd1276eeca61a8506df7a807e7e9e0c8b1f", "filename": "gcc/cross-make", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fcross-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fcross-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcross-make?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,8 +1,3 @@\n-# Build libgcc1.a for a cross-compiler.\n-# By default this expects the user to provide libgcc1.a,\n-# and gives up immediately if the user has not done so.\n-LIBGCC1 = $(CROSS_LIBGCC1)\n-\n # Dir to search for system headers.  Normally /usr/include.\n # Use CROSS_INCLUDE_DIR not TOOL_INCLUDE_DIR for other vendor's headers.\n SYSTEM_HEADER_DIR = $(CROSS_SYSTEM_HEADER_DIR)"}, {"sha": "b8f6df588f8d8cd19ae1cc7c19b79965f5b77815", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -30,7 +30,7 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* This file is a bit like libgcc1.c/libgcc2.c in that it is compiled\n+/* This file is a bit like libgcc2.c in that it is compiled\n    multiple times and yields multiple .o files.\n \n    This file is useful on target machines where the object file format"}, {"sha": "ed139033d696db772a297b49e3042d5172099805", "filename": "gcc/floatlib.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Ffloatlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Ffloatlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffloatlib.c?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -10,8 +10,7 @@\n Warning! Only single-precision is actually implemented.  This file\n won't really be much use until double-precision is supported.\n \n-However, once that is done, this file might eventually become a\n-replacement for libgcc1.c.  It might also make possible\n+However, once that is done, this file might make possible\n cross-compilation for an IEEE target machine from a non-IEEE\n host such as a VAX.\n "}, {"sha": "b0060c90801097423a17dd8dff0adb203a191243", "filename": "gcc/gcc.texi", "status": "modified", "additions": 5, "deletions": 39, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -3445,18 +3445,11 @@ with @samp{-msoft-float}.  Some standard parts of the C library, such as\n @code{bcopy} or @code{memcpy}, are also called automatically.  The usual\n function call interface is used for calling the library routines.\n \n-These library routines should be defined in the library @file{libgcc.a},\n-which GCC automatically searches whenever it links a program.  On\n-machines that have multiply and divide instructions, if hardware\n-floating point is in use, normally @file{libgcc.a} is not needed, but it\n-is searched just in case.\n-\n-Each arithmetic function is defined in @file{libgcc1.c} to use the\n-corresponding C arithmetic operator.  As long as the file is compiled\n-with another C compiler, which supports all the C arithmetic operators,\n-this file will work portably.  However, @file{libgcc1.c} does not work if\n-compiled with GCC, because each arithmetic function would compile\n-into a call to itself!\n+Some of these routines can be defined in mostly machine-independent C;\n+they appear in @file{libgcc2.c}.  Others must be hand-written in\n+assembly language for each processor.  Wherever they are defined, they\n+are compiled into the support library, @file{libgcc.a}, which is\n+automatically searched when you link programs with GCC.\n @end ifset\n \n @ifset INTERNALS\n@@ -4201,19 +4194,6 @@ The target makefile fragment, @file{t-@var{target}}, defines special\n target dependent variables and targets used in the @file{Makefile}:\n \n @table @code\n-@findex LIBGCC1\n-@item LIBGCC1\n-The rule to use to build @file{libgcc1.a}.\n-If your target does not need to use the functions in @file{libgcc1.a},\n-set this to empty.\n-@xref{Interface}.\n-\n-@findex CROSS_LIBGCC1\n-@item CROSS_LIBGCC1\n-The rule to use to build @file{libgcc1.a} when building a cross\n-compiler.  If your target does not need to use the functions in\n-@file{libgcc1.a}, set this to empty.  @xref{Cross Runtime}.\n-\n @findex LIBGCC2_CFLAGS\n @item LIBGCC2_CFLAGS\n Compiler flags to use when compiling @file{libgcc2.c}.\n@@ -4336,20 +4316,6 @@ dependent variables and targets used in the @file{Makefile}:\n @item CC\n The compiler to use when building the first stage.\n \n-@findex CLIB\n-@item CLIB\n-Additional host libraries to link with.\n-\n-@findex OLDCC\n-@item OLDCC\n-The compiler to use when building @file{libgcc1.a} for a native\n-compilation.\n-\n-@findex OLDAR\n-@item OLDAR\n-The version of @code{ar} to use when building @file{libgcc1.a} for a native\n-compilation.\n-\n @findex INSTALL\n @item INSTALL\n The install program to use."}, {"sha": "35f4dbf43b89a3439256afdf8175d5725dca027f", "filename": "gcc/install.texi", "status": "modified", "additions": 11, "deletions": 108, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1592,7 +1592,6 @@ for the target machine that you can install on the host machine.\n * Tools and Libraries:: Where to put the linker and assembler, and the C library.\n * Cross Headers::       Finding and installing header files\n                           for a cross-compiler.\n-* Cross Runtime::       Supplying arithmetic runtime routines (@file{libgcc1.a}).\n * Build Cross::         Actually compiling the cross-compiler.\n @end menu\n \n@@ -1716,97 +1715,6 @@ mget *crt*.o\n quit\n @end example\n \n-@node Cross Runtime\n-@subsection @file{libgcc.a} and Cross-Compilers\n-\n-Code compiled by GNU CC uses certain runtime support functions\n-implicitly.  Some of these functions can be compiled successfully with\n-GNU CC itself, but a few cannot be.  These problem functions are in the\n-source file @file{libgcc1.c}; the library made from them is called\n-@file{libgcc1.a}.\n-\n-When you build a native compiler, these functions are compiled with some\n-other compiler--the one that you use for bootstrapping GNU CC.\n-Presumably it knows how to open code these operations, or else knows how\n-to call the run-time emulation facilities that the machine comes with.\n-But this approach doesn't work for building a cross-compiler.  The\n-compiler that you use for building knows about the host system, not the\n-target system.\n-\n-So, when you build a cross-compiler you have to supply a suitable\n-library @file{libgcc1.a} that does the job it is expected to do.\n-\n-To compile @file{libgcc1.c} with the cross-compiler itself does not\n-work.  The functions in this file are supposed to implement arithmetic\n-operations that GNU CC does not know how to open code for your target\n-machine.  If these functions are compiled with GNU CC itself, they\n-will compile into infinite recursion.\n-\n-On any given target, most of these functions are not needed.  If GNU CC\n-can open code an arithmetic operation, it will not call these functions\n-to perform the operation.  It is possible that on your target machine,\n-none of these functions is needed.  If so, you can supply an empty\n-library as @file{libgcc1.a}.\n-\n-Many targets need library support only for multiplication and division.\n-If you are linking with a library that contains functions for\n-multiplication and division, you can tell GNU CC to call them directly\n-by defining the macros @code{MULSI3_LIBCALL}, and the like.  These\n-macros need to be defined in the target description macro file.  For\n-some targets, they are defined already.  This may be sufficient to\n-avoid the need for libgcc1.a; if so, you can supply an empty library.\n-\n-Some targets do not have floating point instructions; they need other\n-functions in @file{libgcc1.a}, which do floating arithmetic.\n-Recent versions of GNU CC have a file which emulates floating point.\n-With a certain amount of work, you should be able to construct a\n-floating point emulator that can be used as @file{libgcc1.a}.  Perhaps\n-future versions will contain code to do this automatically and\n-conveniently.  That depends on whether someone wants to implement it.\n-\n-Some embedded targets come with all the necessary @file{libgcc1.a}\n-routines written in C or assembler.  These targets build\n-@file{libgcc1.a} automatically and you do not need to do anything\n-special for them.  Other embedded targets do not need any\n-@file{libgcc1.a} routines since all the necessary operations are\n-supported by the hardware.\n-\n-If your target system has another C compiler, you can configure GNU CC\n-as a native compiler on that machine, build just @file{libgcc1.a} with\n-@samp{make libgcc1.a} on that machine, and use the resulting file with\n-the cross-compiler.  To do this, execute the following on the target\n-machine:\n-\n-@example\n-cd @var{target-build-dir}\n-./configure --host=sparc --target=sun3\n-make libgcc1.a\n-@end example\n-\n-@noindent\n-And then this on the host machine:\n-\n-@example\n-ftp @var{target-machine}\n-binary\n-cd @var{target-build-dir}\n-get libgcc1.a\n-quit\n-@end example\n-\n-Another way to provide the functions you need in @file{libgcc1.a} is to\n-define the appropriate @code{perform_@dots{}} macros for those\n-functions.  If these definitions do not use the C arithmetic operators\n-that they are meant to implement, you should be able to compile them\n-with the cross-compiler you are building.  (If these definitions already\n-exist for your target file, then you are all set.)\n-\n-To build @file{libgcc1.a} using the perform macros, use\n-@samp{LIBGCC1=libgcc1.a OLDCC=./xgcc} when building the compiler.\n-Otherwise, you should place your replacement library under the name\n-@file{libgcc1.a} in the directory in which you will build the\n-cross-compiler, before you run @code{make}.\n-\n @node Cross Headers\n @subsection Cross-Compilers and Header Files\n \n@@ -1863,22 +1771,17 @@ tar xf tarfile\n @subsection Actually Building the Cross-Compiler\n \n Now you can proceed just as for compiling a single-machine compiler\n-through the step of building stage 1.  If you have not provided some\n-sort of @file{libgcc1.a}, then compilation will give up at the point\n-where it needs that file, printing a suitable error message.  If you\n-do provide @file{libgcc1.a}, then building the compiler will automatically\n-compile and link a test program called @file{libgcc1-test}; if you get\n-errors in the linking, it means that not all of the necessary routines\n-in @file{libgcc1.a} are available.\n-\n-You must provide the header file @file{float.h}.  One way to do this is\n-to compile @file{enquire} and run it on your target machine.  The job of\n-@file{enquire} is to run on the target machine and figure out by\n-experiment the nature of its floating point representation.\n-@file{enquire} records its findings in the header file @file{float.h}.\n-If you can't produce this file by running @file{enquire} on the target\n-machine, then you will need to come up with a suitable @file{float.h} in\n-some other way (or else, avoid using it in your programs).\n+through the step of building stage 1.\n+\n+If your target is exotic, you may need to provide the header file\n+@file{float.h}.One way to do this is to compile @file{enquire} and run\n+it on your target machine.  The job of @file{enquire} is to run on the\n+target machine and figure out by experiment the nature of its floating\n+point representation.  @file{enquire} records its findings in the header\n+file @file{float.h}.  If you can't produce this file by running\n+@file{enquire} on the target machine, then you will need to come up with\n+a suitable @file{float.h} in some other way (or else, avoid using it in\n+your programs).\n \n Do not try to build stage 2 for a cross-compiler.  It doesn't work to\n rebuild GNU CC as a cross-compiler using the cross-compiler, because"}, {"sha": "3f639b8ff8dc7c15f085a1c0586a927d4f3612cf", "filename": "gcc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -7125,7 +7125,7 @@ These @samp{-m} options are defined for the DEC Alpha implementations:\n @itemx -msoft-float\n Use (do not use) the hardware floating-point instructions for\n floating-point operations.  When @option{-msoft-float} is specified,\n-functions in @file{libgcc1.c} will be used to perform floating-point\n+functions in @file{libgcc.a} will be used to perform floating-point\n operations.  Unless they are replaced by routines that emulate the\n floating-point operations, or compiled in such a way as to call such\n emulations routines, these routines will issue floating-point"}, {"sha": "8ec6391b9a4cbe75e8087af0c87be6a4a53ce820", "filename": "gcc/libgcc1.c", "status": "removed", "additions": 0, "deletions": 590, "changes": 590, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Flibgcc1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f98d85ed9fa40cffc0fb11341024dd7dd1f49db/gcc%2Flibgcc1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc1.c?ref=1f98d85ed9fa40cffc0fb11341024dd7dd1f49db", "patch": "@@ -1,590 +0,0 @@\n-/* Subroutines needed by GCC output code on some machines.  */\n-/* Compile this file with the Unix C compiler!  */\n-/* Copyright (C) 1987, 1988, 1992, 1994, 1995 Free Software Foundation, Inc.\n-\n-This file is free software; you can redistribute it and/or modify it\n-under the terms of the GNU General Public License as published by the\n-Free Software Foundation; either version 2, or (at your option) any\n-later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-This file is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with this program; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#include \"config.h\"\n-\n-/* Don't use `fancy_abort' here even if config.h says to use it.  */\n-#ifdef abort\n-#undef abort\n-#endif\n-\n-/* On some machines, cc is really GCC.  For these machines, we can't\n-   expect these functions to be properly compiled unless GCC open codes\n-   the operation (which is precisely when the function won't be used).\n-   So allow tm.h to specify ways of accomplishing the operations\n-   by defining the macros perform_*.\n-\n-   On a machine where cc is some other compiler, there is usually no\n-   reason to define perform_*.  The other compiler normally has other ways\n-   of implementing all of these operations.\n-\n-   In some cases a certain machine may come with GCC installed as cc\n-   or may have some other compiler.  Then it may make sense for tm.h\n-   to define perform_* only if __GNUC__ is defined.  */\n-\n-#ifndef perform_mulsi3\n-#define perform_mulsi3(a, b) return a * b\n-#endif\n-\n-#ifndef perform_divsi3\n-#define perform_divsi3(a, b) return a / b\n-#endif\n-\n-#ifndef perform_udivsi3\n-#define perform_udivsi3(a, b) return a / b\n-#endif\n-\n-#ifndef perform_modsi3\n-#define perform_modsi3(a, b) return a % b\n-#endif\n-\n-#ifndef perform_umodsi3\n-#define perform_umodsi3(a, b) return a % b\n-#endif\n-\n-#ifndef perform_lshrsi3\n-#define perform_lshrsi3(a, b) return a >> b\n-#endif\n-\n-#ifndef perform_ashrsi3\n-#define perform_ashrsi3(a, b) return a >> b\n-#endif\n-\n-#ifndef perform_ashlsi3\n-#define perform_ashlsi3(a, b) return a << b\n-#endif\n-\n-#ifndef perform_adddf3\n-#define perform_adddf3(a, b) return a + b\n-#endif\n-\n-#ifndef perform_subdf3\n-#define perform_subdf3(a, b) return a - b\n-#endif\n-\n-#ifndef perform_muldf3\n-#define perform_muldf3(a, b) return a * b\n-#endif\n-\n-#ifndef perform_divdf3\n-#define perform_divdf3(a, b) return a / b\n-#endif\n-\n-#ifndef perform_addsf3\n-#define perform_addsf3(a, b) return INTIFY (a + b)\n-#endif\n-\n-#ifndef perform_subsf3\n-#define perform_subsf3(a, b) return INTIFY (a - b)\n-#endif\n-\n-#ifndef perform_mulsf3\n-#define perform_mulsf3(a, b) return INTIFY (a * b)\n-#endif\n-\n-#ifndef perform_divsf3\n-#define perform_divsf3(a, b) return INTIFY (a / b)\n-#endif\n-\n-#ifndef perform_negdf2\n-#define perform_negdf2(a) return -a\n-#endif\n-\n-#ifndef perform_negsf2\n-#define perform_negsf2(a) return INTIFY (-a)\n-#endif\n-\n-#ifndef perform_fixdfsi\n-#define perform_fixdfsi(a) return (nongcc_SI_type) a;\n-#endif\n-\n-#ifndef perform_fixsfsi\n-#define perform_fixsfsi(a) return (nongcc_SI_type) a\n-#endif\n-\n-#ifndef perform_floatsidf\n-#define perform_floatsidf(a) return (double) a\n-#endif\n-\n-#ifndef perform_floatsisf\n-#define perform_floatsisf(a)  return INTIFY ((float) a)\n-#endif\n-\n-#ifndef perform_extendsfdf2\n-#define perform_extendsfdf2(a)  return a\n-#endif\n-\n-#ifndef perform_truncdfsf2\n-#define perform_truncdfsf2(a)  return INTIFY (a)\n-#endif\n-\n-/* Note that eqdf2 returns a value for \"true\" that is == 0,\n-   nedf2 returns a value for \"true\" that is != 0,\n-   gtdf2 returns a value for \"true\" that is > 0,\n-   and so on.  */\n-\n-#ifndef perform_eqdf2\n-#define perform_eqdf2(a, b) return !(a == b)\n-#endif\n-\n-#ifndef perform_nedf2\n-#define perform_nedf2(a, b) return a != b\n-#endif\n-\n-#ifndef perform_gtdf2\n-#define perform_gtdf2(a, b) return a > b\n-#endif\n-\n-#ifndef perform_gedf2\n-#define perform_gedf2(a, b) return (a >= b) - 1\n-#endif\n-\n-#ifndef perform_ltdf2\n-#define perform_ltdf2(a, b) return -(a < b)\n-#endif\n-\n-#ifndef perform_ledf2\n-#define perform_ledf2(a, b) return 1 - (a <= b)\n-#endif\n-\n-#ifndef perform_eqsf2\n-#define perform_eqsf2(a, b) return !(a == b)\n-#endif\n-\n-#ifndef perform_nesf2\n-#define perform_nesf2(a, b) return a != b\n-#endif\n-\n-#ifndef perform_gtsf2\n-#define perform_gtsf2(a, b) return a > b\n-#endif\n-\n-#ifndef perform_gesf2\n-#define perform_gesf2(a, b) return (a >= b) - 1\n-#endif\n-\n-#ifndef perform_ltsf2\n-#define perform_ltsf2(a, b) return -(a < b)\n-#endif\n-\n-#ifndef perform_lesf2\n-#define perform_lesf2(a, b) return 1 - (a <= b);\n-#endif\n-\f\n-/* Define the C data type to use for an SImode value.  */\n-\n-#ifndef nongcc_SI_type\n-#define nongcc_SI_type long int\n-#endif\n-\n-/* Define the C data type to use for a value of word size */\n-#ifndef nongcc_word_type\n-#define nongcc_word_type nongcc_SI_type\n-#endif\n-\n-/* Define the type to be used for returning an SF mode value\n-   and the method for turning a float into that type.\n-   These definitions work for machines where an SF value is\n-   returned in the same register as an int.  */\n-\n-#ifndef FLOAT_VALUE_TYPE  \n-#define FLOAT_VALUE_TYPE int\n-#endif\n-\n-#ifndef INTIFY\n-#define INTIFY(FLOATVAL)  (intify.f = (FLOATVAL), intify.i)\n-#endif\n-\n-#ifndef FLOATIFY\n-#define FLOATIFY(INTVAL)  ((INTVAL).f)\n-#endif\n-\n-#ifndef FLOAT_ARG_TYPE\n-#define FLOAT_ARG_TYPE union flt_or_int\n-#endif\n-\n-union flt_or_value { FLOAT_VALUE_TYPE i; float f; };\n-\n-union flt_or_int { int i; float f; };\n-\n-\n-#ifdef L_mulsi3\n-nongcc_SI_type\n-__mulsi3 (a, b)\n-     nongcc_SI_type a, b;\n-{\n-  perform_mulsi3 (a, b);\n-}\n-#endif\n-\n-#ifdef L_udivsi3\n-nongcc_SI_type\n-__udivsi3 (a, b)\n-     unsigned nongcc_SI_type a, b;\n-{\n-  perform_udivsi3 (a, b);\n-}\n-#endif\n-\n-#ifdef L_divsi3\n-nongcc_SI_type\n-__divsi3 (a, b)\n-     nongcc_SI_type a, b;\n-{\n-  perform_divsi3 (a, b);\n-}\n-#endif\n-\n-#ifdef L_umodsi3\n-nongcc_SI_type\n-__umodsi3 (a, b)\n-     unsigned nongcc_SI_type a, b;\n-{\n-  perform_umodsi3 (a, b);\n-}\n-#endif\n-\n-#ifdef L_modsi3\n-nongcc_SI_type\n-__modsi3 (a, b)\n-     nongcc_SI_type a, b;\n-{\n-  perform_modsi3 (a, b);\n-}\n-#endif\n-\n-#ifdef L_lshrsi3\n-nongcc_SI_type\n-__lshrsi3 (a, b)\n-     unsigned nongcc_SI_type a, b;\n-{\n-  perform_lshrsi3 (a, b);\n-}\n-#endif\n-\n-#ifdef L_ashrsi3\n-nongcc_SI_type\n-__ashrsi3 (a, b)\n-     nongcc_SI_type a, b;\n-{\n-  perform_ashrsi3 (a, b);\n-}\n-#endif\n-\n-#ifdef L_ashlsi3\n-nongcc_SI_type\n-__ashlsi3 (a, b)\n-     nongcc_SI_type a, b;\n-{\n-  perform_ashlsi3 (a, b);\n-}\n-#endif\n-\f\n-#ifdef L_divdf3\n-double\n-__divdf3 (a, b)\n-     double a, b;\n-{\n-  perform_divdf3 (a, b);\n-}\n-#endif\n-\n-#ifdef L_muldf3\n-double\n-__muldf3 (a, b)\n-     double a, b;\n-{\n-  perform_muldf3 (a, b);\n-}\n-#endif\n-\n-#ifdef L_negdf2\n-double\n-__negdf2 (a)\n-     double a;\n-{\n-  perform_negdf2 (a);\n-}\n-#endif\n-\n-#ifdef L_adddf3\n-double\n-__adddf3 (a, b)\n-     double a, b;\n-{\n-  perform_adddf3 (a, b);\n-}\n-#endif\n-\n-#ifdef L_subdf3\n-double\n-__subdf3 (a, b)\n-     double a, b;\n-{\n-  perform_subdf3 (a, b);\n-}\n-#endif\n-\n-/* Note that eqdf2 returns a value for \"true\" that is == 0,\n-   nedf2 returns a value for \"true\" that is != 0,\n-   gtdf2 returns a value for \"true\" that is > 0,\n-   and so on.  */\n-\n-#ifdef L_eqdf2\n-nongcc_word_type\n-__eqdf2 (a, b)\n-     double a, b;\n-{\n-  /* Value == 0 iff a == b.  */\n-  perform_eqdf2 (a, b);\n-}\n-#endif\n-\n-#ifdef L_nedf2\n-nongcc_word_type\n-__nedf2 (a, b)\n-     double a, b;\n-{\n-  /* Value != 0 iff a != b.  */\n-  perform_nedf2 (a, b);\n-}\n-#endif\n-\n-#ifdef L_gtdf2\n-nongcc_word_type\n-__gtdf2 (a, b)\n-     double a, b;\n-{\n-  /* Value > 0 iff a > b.  */\n-  perform_gtdf2 (a, b);\n-}\n-#endif\n-\n-#ifdef L_gedf2\n-nongcc_word_type\n-__gedf2 (a, b)\n-     double a, b;\n-{\n-  /* Value >= 0 iff a >= b.  */\n-  perform_gedf2 (a, b);\n-}\n-#endif\n-\n-#ifdef L_ltdf2\n-nongcc_word_type\n-__ltdf2 (a, b)\n-     double a, b;\n-{\n-  /* Value < 0 iff a < b.  */\n-  perform_ltdf2 (a, b);\n-}\n-#endif\n-\n-#ifdef L_ledf2\n-nongcc_word_type\n-__ledf2 (a, b)\n-     double a, b;\n-{\n-  /* Value <= 0 iff a <= b.  */\n-  perform_ledf2 (a, b);\n-}\n-#endif\n-\f\n-#ifdef L_fixdfsi\n-nongcc_SI_type\n-__fixdfsi (a)\n-     double a;\n-{\n-  perform_fixdfsi (a);\n-}\n-#endif\n-\n-#ifdef L_fixsfsi\n-nongcc_SI_type\n-__fixsfsi (a)\n-     FLOAT_ARG_TYPE a;\n-{\n-  union flt_or_value intify;\n-  perform_fixsfsi (FLOATIFY (a));\n-}\n-#endif\n-\n-#ifdef L_floatsidf\n-double\n-__floatsidf (a)\n-     nongcc_SI_type a;\n-{\n-  perform_floatsidf (a);\n-}\n-#endif\n-\n-#ifdef L_floatsisf\n-FLOAT_VALUE_TYPE\n-__floatsisf (a)\n-     nongcc_SI_type a;\n-{\n-  union flt_or_value intify;\n-  perform_floatsisf (a);\n-}\n-#endif\n-\f\n-#ifdef L_addsf3\n-FLOAT_VALUE_TYPE\n-__addsf3 (a, b)\n-     FLOAT_ARG_TYPE a, b;\n-{\n-  union flt_or_value intify;\n-  perform_addsf3 (FLOATIFY (a), FLOATIFY (b));\n-}\n-#endif\n-\n-#ifdef L_negsf2\n-FLOAT_VALUE_TYPE\n-__negsf2 (a)\n-     FLOAT_ARG_TYPE a;\n-{\n-  union flt_or_value intify;\n-  perform_negsf2 (FLOATIFY (a));\n-}\n-#endif\n-\n-#ifdef L_subsf3\n-FLOAT_VALUE_TYPE\n-__subsf3 (a, b)\n-     FLOAT_ARG_TYPE a, b;\n-{\n-  union flt_or_value intify;\n-  perform_subsf3 (FLOATIFY (a), FLOATIFY (b));\n-}\n-#endif\n-\n-#ifdef L_eqsf2\n-nongcc_word_type\n-__eqsf2 (a, b)\n-     FLOAT_ARG_TYPE a, b;\n-{\n-  union flt_or_int intify;\n-  /* Value == 0 iff a == b.  */\n-  perform_eqsf2 (FLOATIFY (a), FLOATIFY (b));\n-}\n-#endif\n-\n-#ifdef L_nesf2\n-nongcc_word_type\n-__nesf2 (a, b)\n-     FLOAT_ARG_TYPE a, b;\n-{\n-  union flt_or_int intify;\n-  /* Value != 0 iff a != b.  */\n-  perform_nesf2 (FLOATIFY (a), FLOATIFY (b));\n-}\n-#endif\n-\n-#ifdef L_gtsf2\n-nongcc_word_type\n-__gtsf2 (a, b)\n-     FLOAT_ARG_TYPE a, b;\n-{\n-  union flt_or_int intify;\n-  /* Value > 0 iff a > b.  */\n-  perform_gtsf2 (FLOATIFY (a), FLOATIFY (b));\n-}\n-#endif\n-\n-#ifdef L_gesf2\n-nongcc_word_type\n-__gesf2 (a, b)\n-     FLOAT_ARG_TYPE a, b;\n-{\n-  union flt_or_int intify;\n-  /* Value >= 0 iff a >= b.  */\n-  perform_gesf2 (FLOATIFY (a), FLOATIFY (b));\n-}\n-#endif\n-\n-#ifdef L_ltsf2\n-nongcc_word_type\n-__ltsf2 (a, b)\n-     FLOAT_ARG_TYPE a, b;\n-{\n-  union flt_or_int intify;\n-  /* Value < 0 iff a < b.  */\n-  perform_ltsf2 (FLOATIFY (a), FLOATIFY (b));\n-}\n-#endif\n-\n-#ifdef L_lesf2\n-nongcc_word_type\n-__lesf2 (a, b)\n-     FLOAT_ARG_TYPE a, b;\n-{\n-  union flt_or_int intify;\n-  /* Value <= 0 iff a <= b.  */\n-  perform_lesf2 (FLOATIFY (a), FLOATIFY (b));\n-}\n-#endif\n-\n-#ifdef L_mulsf3\n-FLOAT_VALUE_TYPE\n-__mulsf3 (a, b)\n-     FLOAT_ARG_TYPE a, b;\n-{\n-  union flt_or_value intify;\n-  perform_mulsf3 (FLOATIFY (a), FLOATIFY (b));\n-}\n-#endif\n-\n-#ifdef L_divsf3\n-FLOAT_VALUE_TYPE\n-__divsf3 (a, b)\n-     FLOAT_ARG_TYPE a, b;\n-{\n-  union flt_or_value intify;\n-  perform_divsf3 (FLOATIFY (a), FLOATIFY (b));\n-}\n-#endif\n-\n-#ifdef L_truncdfsf2\n-FLOAT_VALUE_TYPE\n-__truncdfsf2 (a)\n-     double a;\n-{\n-  union flt_or_value intify;\n-  perform_truncdfsf2 (a);\n-}\n-#endif\n-\n-#ifdef L_extendsfdf2\n-double\n-__extendsfdf2 (a)\n-     FLOAT_ARG_TYPE a;\n-{\n-  union flt_or_value intify;\n-  perform_extendsfdf2 (FLOATIFY (a));\n-}\n-#endif"}, {"sha": "70f9e1adf69ef3e78a9a659bf5abfa8defce2bd3", "filename": "gcc/longlong.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -222,7 +222,7 @@ extern const UQItype __clz_tab[];\n \t     \"rIJ\" ((USItype) (bh)),\t\t\t\t\t\\\n \t     \"r\" ((USItype) (al)),\t\t\t\t\t\\\n \t     \"rIJ\" ((USItype) (bl)))\n-/* Call libgcc1 routine.  */\n+/* Call libgcc routine.  */\n #define umul_ppmm(w1, w0, u, v) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   DWunion __w;\t\t\t\t\t\t\t\t\\"}, {"sha": "512529d9e9c1a879173526cbe916b401e9ca3a38", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 18, "deletions": 99, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -8,11 +8,7 @@\n # of them, and positional args becomes quite ugly.\n #\n # objext\n-# OLDCC\n-# LIBGCC1\n-# LIB1FUNCS\n # LIB1ASMFUNCS\n-# LIB1FUNCS_EXTRA\n # LIB2FUNCS\n # LIB2FUNCS_ST\n # LIB2ADD\n@@ -42,23 +38,6 @@ echo\n echo 'force:'\n echo\n \n-# Detect gcc as OLDCC.  This indicates a target for which LIB1FUNCS\n-# is not needed.  This is not quite the same as libgcc1.null, even\n-# on a target not using libgcc1-asm.a.\n-\n-if [ \"@build_canonical@\" = \"@target@\" ]; then\n-  tmp=\"tmp-$$.c\"\n-  cat > $tmp <<EOF\n-#ifdef __GNUC__\n-  yes;\n-#endif\n-EOF\n-  if $OLDCC -E $tmp | grep yes > /dev/null 2>&1; then\n-    LIB1FUNCS=\"\"\n-  fi\n-  rm -f $tmp\n-fi\n-\n # Disable SHLIB_LINK if shared libgcc not enabled.\n if [ \"@enable_shared@\" = \"no\" ]; then\n   SHLIB_LINK=\"\"\n@@ -67,7 +46,6 @@ fi\n # Build lines.\n \n gcc_compile='$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES)'\n-oldcc_compile='$(OLDCC) -DIN_LIBGCC1 $(CCLIBFLAGS) $(INCLUDES)'\n make_compile='$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n \t  AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n@@ -78,13 +56,10 @@ make_compile='$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t  HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t  LANGUAGES=\"$(LANGUAGES)\"'\n \n-# Dependancies for libgcc1.c\n-libgcc1_c_dep='stmp-dirs $(srcdir)/libgcc1.c $(CONFIG_H)'\n-\n-# Dependancies for libgcc2.c\n+# Dependencies for libgcc2.c\n libgcc2_c_dep='stmp-dirs $(srcdir)/libgcc2.c $(CONFIG_H) $(MACHMODE_H) longlong.h gbl-ctors.h config.status stmp-int-hdrs tsystem.h'\" $LIB2ADDEHDEP\"\n \n-# Dependancies for fp-bit.c\n+# Dependencies for fp-bit.c\n fpbit_c_dep='stmp-dirs config.status tsystem.h'\n \n #\n@@ -93,76 +68,24 @@ fpbit_c_dep='stmp-dirs config.status tsystem.h'\n \n libgcc1_objs=\"\"\n \n-case X\"$LIBGCC1\" in\n-  Xlibgcc1.null | X)\n-    ;;\n-\n-  Xlibgcc1.cross)\n-    echo \"You must find a way to make libgcc1 components yourself\" 1>&2\n-    ;;\n-\n-  Xlibgcc1-asm.a)\n-    for name in $LIB1ASMFUNCS; do\n-      for ml in $MULTILIBS; do\n-        dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-        flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n-        out=\"libgcc/${dir}/${name}${objext}\"\n+for name in $LIB1ASMFUNCS; do\n+  for ml in $MULTILIBS; do\n+    dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n+    flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n+    out=\"libgcc/${dir}/${name}${objext}\"\n \n-        echo ${out}: stmp-dirs '$(srcdir)/config/$(LIB1ASMSRC)'\n-\techo \"\t$gcc_compile\" $flags -DL$name -xassembler-with-cpp \\\n+    echo ${out}: stmp-dirs '$(srcdir)/config/$(LIB1ASMSRC)'\n+    echo \"\t$gcc_compile\" $flags -DL$name -xassembler-with-cpp \\\n \t  -c '$(srcdir)/config/$(LIB1ASMSRC)' -o $out\n \n-\t# Remove any objects from LIB2FUNCS that are defined as optimized\n-\t# assembly code in LIB1ASMFUNCS.\n-\tLIB2FUNCS=`echo $LIB2FUNCS | sed -e 's/^'$name' //' \\\n-\t\t\t\t         -e 's/ '$name' / /' \\\n-\t\t\t\t\t -e 's/ '$name'$//'`\n-      done\n-      libgcc1_objs=\"$libgcc1_objs ${name}${objext}\"\n-    done\n-    ;;\n-\n-  Xlibgcc1.a)\n-    for name in $LIB1FUNCS; do\n-      out=\"libgcc/${name}${objext}\"\n-\n-      echo $out: $libgcc1_c_dep\n-      if [ -z \"@NO_MINUS_C_MINUS_O@\" ]; then\n-\techo \"\t$oldcc_compile\" -DL$name $flags -c '$(srcdir)/libgcc1.c' -o $out\n-      else\n-\techo \"\t$oldcc_compile\" -DL$name $flags -c '$(srcdir)/libgcc1.c'\n-\techo \"\tmv libgcc1${objext} $out\"\n-      fi\n-\n-      libgcc1_objs=\"$libgcc1_objs ${name}${objext}\"\n-    done\n-\n-    for file in $LIB1FUNCS_EXTRA; do\n-      name=`echo $file | sed -e 's/[.][cS]$//' -e 's/[.]asm$//'`\n-      out=\"libgcc/${name}${objext}\"\n-\n-      echo $out: $file\n-      if [ ${name}.asm = $file ]; then\n-        echo \"\tcp $file ${name}.s\"\n-        file=${name}.s\n-      fi\n-\n-      if [ -z \"@NO_MINUS_C_MINUS_O@\" ]; then\n-\techo \"\t$oldcc_compile\" -c $file -o $out\n-      else\n-\techo \"\t$oldcc_compile\" -c $file\n-\ttmp=`echo $file | sed -e 's/[.][cs]$/'${objext}/ -e 's,.*/,,'`\n-\techo \"\tmv $tmp $out\"\n-      fi\n-\n-      libgcc1_objs=\"$libgcc1_objs ${name}${objext}\"\n-    done\n-    ;;\n-  *)\n-    echo \"I'm confused about libgcc1.\" 1>&2\n-    exit 1\n-    ;;\n-esac\n+    # Remove any objects from LIB2FUNCS that are defined as optimized\n+    # assembly code in LIB1ASMFUNCS.\n+    LIB2FUNCS=`echo $LIB2FUNCS | sed -e 's/^'$name' //' \\\n+\t\t\t\t     -e 's/ '$name' / /' \\\n+\t\t\t\t     -e 's/ '$name'$//'`\n+  done\n+  libgcc1_objs=\"$libgcc1_objs ${name}${objext}\"\n+done\n \n #\n # Build libgcc2 components.\n@@ -289,11 +212,7 @@ for ml in $MULTILIBS; do\n \n   libgcc_objs=\"\"\n   for o in $libgcc1_objs; do\n-    if [ \"$LIBGCC1\" = libgcc1-asm.a ]; then\n-      libgcc_objs=\"$libgcc_objs libgcc/${dir}/$o\"\n-    else\n-      libgcc_objs=\"$libgcc_objs libgcc/$o\"\n-    fi\n+    libgcc_objs=\"$libgcc_objs libgcc/${dir}/$o\"\n   done\n   for o in $libgcc2_objs; do\n     libgcc_objs=\"$libgcc_objs libgcc/${dir}/$o\""}, {"sha": "73cdc7d5efd93cdc3f939105e8b2ce0b1f9a1804", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,3 +1,7 @@\n+2001-05-16  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* POTFILES.in: Remove libgcc1-test.c and libgcc1.c.\n+\n 2001-05-13  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in.in (STAMP): New macro."}, {"sha": "e9b40c893df5a34285d688d7aa61d5f453a5b27c", "filename": "gcc/po/POTFILES.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fpo%2FPOTFILES.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Fpo%2FPOTFILES.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FPOTFILES.in?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -181,7 +181,6 @@ config/i386/osf1elf.h\n config/i386/osf1elfgdb.h\n config/i386/osfelf.h\n config/i386/osfrose.h\n-config/i386/perform.h\n config/i386/ptx4-i.h\n config/i386/rtems.h\n config/i386/rtemself.h\n@@ -629,8 +628,6 @@ intl/localealias.c\n intl/textdomain.c\n jump.c\n lcm.c\n-#libgcc1-test.c is used only by GCC maintainers and installers\n-#libgcc1.c is part of the GCC library\n #libgcc2.c is part of the GCC library\n limitx.h\n limity.h"}, {"sha": "372cca686188e8a1037625c4e332214d1fd31d03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,3 +1,7 @@\n+2001-05-16  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* gcc.dg/complete-port.c: New (revised version of libgcc1-test.c)\n+\n Wed May 16 20:33:57 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.c-torture/compile/20010516-1.c: New test."}, {"sha": "c8ebcc10e42b11ec0dea1caeb0b13895401bf274", "filename": "gcc/testsuite/gcc.dg/complete-port.c", "status": "renamed", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Ftestsuite%2Fgcc.dg%2Fcomplete-port.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Ftestsuite%2Fgcc.dg%2Fcomplete-port.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcomplete-port.c?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -1,7 +1,7 @@\n-/* This small function uses all the arithmetic operators that\n-   libgcc1.c can handle.  If you can link it, then\n-   you have provided replacements for all the libgcc1.c functions that\n-   your target machine needs.  */\n+/* This small program uses all the arithmetic operators that may\n+   generate calls to library routines which must be implemented in\n+   port-specific assembly language.  */\n+/* { dg-do link } */\n \n #include <stddef.h>\n \n@@ -10,11 +10,8 @@ double dfoo ();\n void discard (int);\n void ddiscard (double);\n \n-/* We don't want __main here because that can drag in atexit (among other\n-   things) which won't necessarily exist yet.  */\n-\n int\n-main_without__main ()\n+main (void)\n {\n   int a = foo (), b = foo ();\n   unsigned int au = foo (), bu = foo ();\n@@ -97,23 +94,3 @@ dfoo ()\n \n   return table[idx++];\n }\n-\n-/* Provide functions that some versions of the linker use to default\n-   the start address if -e symbol is not used, to avoid the warning\n-   message saying the start address is defaulted.  */\n-extern void start() __asm__(\"start\");\n-extern void _start() __asm__(\"_start\");\n-extern void __start() __asm__(\"__start\");\n-\n-/* Provide functions that might be needed by soft-float emulation routines.  */\n-void *memcpy(void *to,\n-\t     const void *from __attribute__((__unused__)),\n-\t     size_t len __attribute__((__unused__)))\n-{\n-  return to;\n-}\n-\n-void start() {}\n-void _start() {}\n-void __start() {}\n-void mainCRTStartup() {}", "previous_filename": "gcc/libgcc1-test.c"}, {"sha": "2c1fe71a8e53e440bbd0bfc5b387134584bc75e0", "filename": "gcc/tm.texi", "status": "modified", "additions": 4, "deletions": 80, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7857f134041af1c563c4b35c90cada983a8f422b/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=7857f134041af1c563c4b35c90cada983a8f422b", "patch": "@@ -4485,89 +4485,13 @@ Define this macro if GCC should generate calls to the ISO C\n \n @findex LIBGCC_NEEDS_DOUBLE\n @item LIBGCC_NEEDS_DOUBLE\n-Define this macro if only @code{float} arguments cannot be passed to\n-library routines (so they must be converted to @code{double}).  This\n-macro affects both how library calls are generated and how the library\n-routines in @file{libgcc1.c} accept their arguments.  It is useful on\n+Define this macro if @code{float} arguments cannot be passed to library\n+routines (so they must be converted to @code{double}).  This macro\n+affects both how library calls are generated and how the library\n+routines in @file{libgcc.a} accept their arguments.  It is useful on\n machines where floating and fixed point arguments are passed\n differently, such as the i860.\n \n-@findex FLOAT_ARG_TYPE\n-@item FLOAT_ARG_TYPE\n-Define this macro to override the type used by the library routines to\n-pick up arguments of type @code{float}.  (By default, they use a union\n-of @code{float} and @code{int}.)\n-\n-The obvious choice would be @code{float}---but that won't work with\n-traditional C compilers that expect all arguments declared as @code{float}\n-to arrive as @code{double}.  To avoid this conversion, the library routines\n-ask for the value as some other type and then treat it as a @code{float}.\n-\n-On some systems, no other type will work for this.  For these systems,\n-you must use @code{LIBGCC_NEEDS_DOUBLE} instead, to force conversion of\n-the values @code{double} before they are passed.\n-\n-@findex FLOATIFY\n-@item FLOATIFY (@var{passed-value})\n-Define this macro to override the way library routines redesignate a\n-@code{float} argument as a @code{float} instead of the type it was\n-passed as.  The default is an expression which takes the @code{float}\n-field of the union.\n-\n-@findex FLOAT_VALUE_TYPE\n-@item FLOAT_VALUE_TYPE\n-Define this macro to override the type used by the library routines to\n-return values that ought to have type @code{float}.  (By default, they\n-use @code{int}.)\n-\n-The obvious choice would be @code{float}---but that won't work with\n-traditional C compilers gratuitously convert values declared as\n-@code{float} into @code{double}.\n-\n-@findex INTIFY\n-@item INTIFY (@var{float-value})\n-Define this macro to override the way the value of a\n-@code{float}-returning library routine should be packaged in order to\n-return it.  These functions are actually declared to return type\n-@code{FLOAT_VALUE_TYPE} (normally @code{int}).\n-\n-These values can't be returned as type @code{float} because traditional\n-C compilers would gratuitously convert the value to a @code{double}.\n-\n-A local variable named @code{intify} is always available when the macro\n-@code{INTIFY} is used.  It is a union of a @code{float} field named\n-@code{f} and a field named @code{i} whose type is\n-@code{FLOAT_VALUE_TYPE} or @code{int}.\n-\n-If you don't define this macro, the default definition works by copying\n-the value through that union.\n-\n-@findex nongcc_SI_type\n-@item nongcc_SI_type\n-Define this macro as the name of the data type corresponding to\n-@code{SImode} in the system's own C compiler.\n-\n-You need not define this macro if that type is @code{long int}, as it usually\n-is.\n-\n-@findex nongcc_word_type\n-@item nongcc_word_type\n-Define this macro as the name of the data type corresponding to the\n-word_mode in the system's own C compiler.\n-\n-You need not define this macro if that type is @code{long int}, as it usually\n-is.\n-\n-@findex perform_@dots{}\n-@item perform_@dots{}\n-Define these macros to supply explicit C statements to carry out various\n-arithmetic operations on types @code{float} and @code{double} in the\n-library routines in @file{libgcc1.c}.  See that file for a full list\n-of these macros and their arguments.\n-\n-On most machines, you don't need to define any of these macros, because\n-the C compiler that comes with the system takes care of doing them.\n-\n @findex NEXT_OBJC_RUNTIME\n @item NEXT_OBJC_RUNTIME\n Define this macro to generate code for Objective C message sending using"}]}