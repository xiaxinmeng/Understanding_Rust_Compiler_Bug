{"sha": "5f564b8f5655167ef3837eb104207705593276dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1NjRiOGY1NjU1MTY3ZWYzODM3ZWIxMDQyMDc3MDU1OTMyNzZkYw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2012-08-01T14:58:38Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2012-08-01T14:58:38Z"}, "message": "tree-complex.c (init_parameter_lattice_values): Don't call var_ann.\n\n\t* tree-complex.c (init_parameter_lattice_values): Don't call var_ann.\n\t* tree-dfa.c (struct dfa_stats_d): Remove num_var_anns member.\n\t(dump_dfa_stats): Don't dump stats about var anns.\n\t(collect_dfa_stats): Don't collect them.\n\t(add_referenced_var_1): Don't set var annotation pointers.\n\t(remove_referenced_var): Ditto, and only remove it it's in the\n\thash table.\n\n\t* tree-flow-inline.h (var_ann): Remove.\n\t* tree-flow.h (struct var_ann_d, var_ann_t): Remove.\n\n\t* tree-inline.c (remapped_type): Remove.\n\t(can_be_nonlocal): Most variable will be considered live here,\n\treturn false earlier.\n\t(remap_decls): Don't call var_ann, all variables will be considered\n\treferenced here.\n\t(copy_debug_stmt): Ditto, and use is_global_var.\n\n\t* tree-into-ssa.c (rewrite_debug_stmt_uses): Use get_current_def to\n\tdetermine if a variable was referred to, not var_ann.\n\t* tree-ssa-live.c (remove_unused_scope_block_p): Don't check var_ann.\n\t(remove_unused_locals): Ditto.\n\t* tree-ssa.c (delete_tree_ssa): Don't free/clear var ann pointers.\n\t* tree-tailcall.c (arg_needs_copy_p): Don't check var_ann.\n\t* tree.c (copy_node_stat): Don't clear var ann pointer.\n\t* tree.h (tree_result_decl, tree_parm_decl, tree_var_decl): Remove\n\tann member.\n\t(DECL_VAR_ANN_PTR): Remove.\n\n\t* tree-flow.h (struct var_ann_d): Rename used member.\n\t(set_is_used): Don't declare.\n\t* tree-flow-inline.h (clear_is_used): Remove.\n\t(set_is_used, is_used_p): Move to ...\n\t* tree-ssa-live.c (set_is_used, is_used_p): ... here, and use\n\ton the side bitmap.\n\t(usedvars): New bitmap.\n\t(dump_scope_block): Don't dump unusedness.\n\t(remove_unused_locals): Allocate and free usedvars.\n\t* tree-nrv.c (tree_nrv): Don't clear used flags here.\n\n\t* tree-flow.h (struct var_ann_d): Remove base_var_processed and\n\tbase_index members.\n\t* tree-ssa-live.h (struct _var_map): Remove basevars member.\n\t(VAR_ANN_BASE_INDEX): Remove.\n\t* tree-ssa-live.c (var_map_base_init): Use a hash table instead\n\tof var annotation to compress index space.  Don't deal with above\n\tremoved members.\n\t(var_map_base_fini): Don't free basevars.\n\t(init_var_map): Don't clear basevars.\n\nFrom-SVN: r190039", "tree": {"sha": "b258f1c4ee4a258d4f7b57723cea0c69efca904c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b258f1c4ee4a258d4f7b57723cea0c69efca904c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f564b8f5655167ef3837eb104207705593276dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f564b8f5655167ef3837eb104207705593276dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f564b8f5655167ef3837eb104207705593276dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f564b8f5655167ef3837eb104207705593276dc/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cfd446903f49d549cc5f1a3ea07497834ece1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfd446903f49d549cc5f1a3ea07497834ece1b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cfd446903f49d549cc5f1a3ea07497834ece1b1"}], "stats": {"total": 383, "additions": 144, "deletions": 239}, "files": [{"sha": "db617594dcc549fdbd9842f40309cf7cbaefe5bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -1,3 +1,59 @@\n+2012-08-01  Michael Matz  <matz@suse.de>\n+\n+\t* tree-complex.c (init_parameter_lattice_values): Don't call var_ann.\n+\t* tree-dfa.c (struct dfa_stats_d): Remove num_var_anns member.\n+\t(dump_dfa_stats): Don't dump stats about var anns.\n+\t(collect_dfa_stats): Don't collect them.\n+\t(add_referenced_var_1): Don't set var annotation pointers.\n+\t(remove_referenced_var): Ditto, and only remove it it's in the\n+\thash table.\n+\n+\t* tree-flow-inline.h (var_ann): Remove.\n+\t* tree-flow.h (struct var_ann_d, var_ann_t): Remove.\n+\n+\t* tree-inline.c (remapped_type): Remove.\n+\t(can_be_nonlocal): Most variable will be considered live here,\n+\treturn false earlier.\n+\t(remap_decls): Don't call var_ann, all variables will be considered\n+\treferenced here.\n+\t(copy_debug_stmt): Ditto, and use is_global_var.\n+\n+\t* tree-into-ssa.c (rewrite_debug_stmt_uses): Use get_current_def to\n+\tdetermine if a variable was referred to, not var_ann.\n+\t* tree-ssa-live.c (remove_unused_scope_block_p): Don't check var_ann.\n+\t(remove_unused_locals): Ditto.\n+\t* tree-ssa.c (delete_tree_ssa): Don't free/clear var ann pointers.\n+\t* tree-tailcall.c (arg_needs_copy_p): Don't check var_ann.\n+\t* tree.c (copy_node_stat): Don't clear var ann pointer.\n+\t* tree.h (tree_result_decl, tree_parm_decl, tree_var_decl): Remove\n+\tann member.\n+\t(DECL_VAR_ANN_PTR): Remove.\n+\n+2012-08-01  Michael Matz  <matz@suse.de>\n+\n+\t* tree-flow.h (struct var_ann_d): Rename used member.\n+\t(set_is_used): Don't declare.\n+\t* tree-flow-inline.h (clear_is_used): Remove.\n+\t(set_is_used, is_used_p): Move to ...\n+\t* tree-ssa-live.c (set_is_used, is_used_p): ... here, and use\n+\ton the side bitmap.\n+\t(usedvars): New bitmap.\n+\t(dump_scope_block): Don't dump unusedness.\n+\t(remove_unused_locals): Allocate and free usedvars.\n+\t* tree-nrv.c (tree_nrv): Don't clear used flags here.\n+\n+2012-08-01  Michael Matz  <matz@suse.de>\n+\n+\t* tree-flow.h (struct var_ann_d): Remove base_var_processed and\n+\tbase_index members.\n+\t* tree-ssa-live.h (struct _var_map): Remove basevars member.\n+\t(VAR_ANN_BASE_INDEX): Remove.\n+\t* tree-ssa-live.c (var_map_base_init): Use a hash table instead\n+\tof var annotation to compress index space.  Don't deal with above\n+\tremoved members.\n+\t(var_map_base_fini): Don't free basevars.\n+\t(init_var_map): Don't clear basevars.\n+\n 2012-08-01  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* gimple-ssa-strength-reduction.c (struct slsr_cand_d): Change"}, {"sha": "6106933adbe58fd0770b285e9344b53ca43b194f", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -176,7 +176,6 @@ init_parameter_lattice_values (void)\n \n   for (parm = DECL_ARGUMENTS (cfun->decl); parm ; parm = DECL_CHAIN (parm))\n     if (is_complex_reg (parm)\n-\t&& var_ann (parm) != NULL\n \t&& (ssa_name = gimple_default_def (cfun, parm)) != NULL_TREE)\n       VEC_replace (complex_lattice_t, complex_lattice_values,\n \t\t   SSA_NAME_VERSION (ssa_name), VARYING);"}, {"sha": "38c4aea44c4c148014cfa6fcb36857c5bcc64350", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -46,7 +46,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Counters used to display DFA and SSA statistics.  */\n struct dfa_stats_d\n {\n-  long num_var_anns;\n   long num_defs;\n   long num_uses;\n   long num_phis;\n@@ -303,11 +302,6 @@ dump_dfa_stats (FILE *file)\n   fprintf (file, fmt_str_1, \"Referenced variables\", (unsigned long)num_referenced_vars,\n \t   SCALE (size), LABEL (size));\n \n-  size = dfa_stats.num_var_anns * sizeof (struct var_ann_d);\n-  total += size;\n-  fprintf (file, fmt_str_1, \"Variables annotated\", dfa_stats.num_var_anns,\n-\t   SCALE (size), LABEL (size));\n-\n   size = dfa_stats.num_uses * sizeof (tree *);\n   total += size;\n   fprintf (file, fmt_str_1, \"USE operands\", dfa_stats.num_uses,\n@@ -374,9 +368,6 @@ collect_dfa_stats (struct dfa_stats_d *dfa_stats_p ATTRIBUTE_UNUSED)\n \n   memset ((void *)dfa_stats_p, 0, sizeof (struct dfa_stats_d));\n \n-  /* Count all the variable annotations.  */\n-  dfa_stats_p->num_var_anns = htab_elements (gimple_referenced_vars (cfun));\n-\n   /* Walk all the statements in the function counting references.  */\n   FOR_EACH_BB (bb)\n     {\n@@ -561,11 +552,7 @@ add_referenced_var_1 (tree var, struct function *fn)\n   /* Insert VAR into the referenced_vars hash table if it isn't present\n      and allocate its var-annotation.  */\n   if (referenced_var_check_and_insert (var, fn))\n-    {\n-      gcc_checking_assert (!*DECL_VAR_ANN_PTR (var));\n-      *DECL_VAR_ANN_PTR (var) = ggc_alloc_cleared_var_ann_d ();\n-      return true;\n-    }\n+    return true;\n \n   return false;\n }\n@@ -576,7 +563,6 @@ add_referenced_var_1 (tree var, struct function *fn)\n void\n remove_referenced_var (tree var)\n {\n-  var_ann_t v_ann;\n   struct tree_decl_minimal in;\n   void **loc;\n   unsigned int uid = DECL_UID (var);\n@@ -587,14 +573,11 @@ remove_referenced_var (tree var)\n \n   gcc_checking_assert (!is_global_var (var));\n \n-  v_ann = var_ann (var);\n-  ggc_free (v_ann);\n-  *DECL_VAR_ANN_PTR (var) = NULL;\n-\n   in.uid = uid;\n   loc = htab_find_slot_with_hash (gimple_referenced_vars (cfun), &in, uid,\n \t\t\t\t  NO_INSERT);\n-  htab_clear_slot (gimple_referenced_vars (cfun), loc);\n+  if (loc)\n+    htab_clear_slot (gimple_referenced_vars (cfun), loc);\n }\n \n "}, {"sha": "d30cdf51f04efad61405afe24166498c024eb3b7", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -136,15 +136,6 @@ next_referenced_var (referenced_var_iterator *iter)\n   return (tree) next_htab_element (&iter->hti);\n }\n \n-/* Return the variable annotation for T, which must be a _DECL node.\n-   Return NULL if the variable annotation doesn't already exist.  */\n-static inline var_ann_t\n-var_ann (const_tree t)\n-{\n-  const var_ann_t *p = DECL_VAR_ANN_PTR (t);\n-  return p ? *p : NULL;\n-}\n-\n /* Get the number of the next statement uid to be allocated.  */\n static inline unsigned int\n gimple_stmt_max_uid (struct function *fn)\n@@ -558,33 +549,6 @@ phi_arg_index_from_use (use_operand_p use)\n  return index;\n }\n \n-/* Mark VAR as used, so that it'll be preserved during rtl expansion.  */\n-\n-static inline void\n-set_is_used (tree var)\n-{\n-  var_ann_t ann = var_ann (var);\n-  ann->used = true;\n-}\n-\n-/* Clear VAR's used flag.  */\n-\n-static inline void\n-clear_is_used (tree var)\n-{\n-  var_ann_t ann = var_ann (var);\n-  ann->used = false;\n-}\n-\n-/* Return true if VAR is marked as used.  */\n-\n-static inline bool\n-is_used_p (tree var)\n-{\n-  var_ann_t ann = var_ann (var);\n-  return ann->used;\n-}\n-\n /* Return true if T (assumed to be a DECL) is a global variable.\n    A variable is considered global if its storage is not automatic.  */\n "}, {"sha": "def75d7c306c71af762a47563717649388315ad4", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -177,19 +177,6 @@ enum need_phi_state {\n };\n \n \n-struct GTY(()) var_ann_d {\n-  /* Used when building base variable structures in a var_map.  */\n-  unsigned base_var_processed : 1;\n-\n-  /* Nonzero if this variable was used after SSA optimizations were\n-     applied.  We set this when translating out of SSA form.  */\n-  unsigned used : 1;\n-\n-  /* Used by var_map for the base index of ssa base variables.  */\n-  unsigned base_index;\n-};\n-\n-\n /* Immediate use lists are used to directly access all uses for an SSA\n    name and get pointers to the statement for each use.\n \n@@ -284,9 +271,6 @@ typedef struct immediate_use_iterator_d\n \n \n \n-typedef struct var_ann_d *var_ann_t;\n-\n-static inline var_ann_t var_ann (const_tree);\n static inline void update_stmt (gimple);\n static inline int get_lineno (const_gimple);\n \n@@ -747,7 +731,6 @@ extern enum move_pos movement_possibility (gimple);\n char *get_lsm_tmp_name (tree, unsigned);\n \n /* In tree-flow-inline.h  */\n-static inline void set_is_used (tree);\n static inline bool unmodifiable_var_p (const_tree);\n static inline bool ref_contains_array_ref (const_tree);\n "}, {"sha": "6c052535626f5ed55be3142114f0dda7e697f12f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 46, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -501,26 +501,6 @@ remap_type (tree type, copy_body_data *id)\n   return tmp;\n }\n \n-/* Return previously remapped type of TYPE in ID.  Return NULL if TYPE\n-   is NULL or TYPE has not been remapped before.  */\n-\n-static tree\n-remapped_type (tree type, copy_body_data *id)\n-{\n-  tree *node;\n-\n-  if (type == NULL)\n-    return type;\n-\n-  /* See if we have remapped this type.  */\n-  node = (tree *) pointer_map_contains (id->decl_map, type);\n-  if (node)\n-    return *node;\n-  else\n-    return NULL;\n-}\n-\n-  /* The type only needs remapping if it's variably modified.  */\n /* Decide if DECL can be put into BLOCK_NONLOCAL_VARs.  */\n \n static bool\n@@ -536,26 +516,7 @@ can_be_nonlocal (tree decl, copy_body_data *id)\n       && !auto_var_in_fn_p (decl, id->src_fn))\n     return true;\n \n-  /* At the moment dwarf2out can handle only these types of nodes.  We\n-     can support more later.  */\n-  if (TREE_CODE (decl) != VAR_DECL && TREE_CODE (decl) != PARM_DECL)\n-    return false;\n-\n-  /* We must use global type.  We call remapped_type instead of\n-     remap_type since we don't want to remap this type here if it\n-     hasn't been remapped before.  */\n-  if (TREE_TYPE (decl) != remapped_type (TREE_TYPE (decl), id))\n-    return false;\n-\n-  /* Wihtout SSA we can't tell if variable is used.  */\n-  if (!gimple_in_ssa_p (cfun))\n-    return false;\n-\n-  /* Live variables must be copied so we can attach DECL_RTL.  */\n-  if (var_ann (decl))\n-    return false;\n-\n-  return true;\n+  return false;\n }\n \n static tree\n@@ -571,9 +532,10 @@ remap_decls (tree decls, VEC(tree,gc) **nonlocalized_list, copy_body_data *id)\n \n       if (can_be_nonlocal (old_var, id))\n \t{\n+\t  /* We need to add this variable to the local decls as otherwise\n+\t     nothing else will do so.  */\n \t  if (TREE_CODE (old_var) == VAR_DECL\n-\t      && ! DECL_EXTERNAL (old_var)\n-\t      && (var_ann (old_var) || !gimple_in_ssa_p (cfun)))\n+\t      && ! DECL_EXTERNAL (old_var))\n \t    add_local_decl (cfun, old_var);\n \t  if ((!optimize || debug_info_level > DINFO_LEVEL_TERSE)\n \t      && !DECL_IGNORED_P (old_var)\n@@ -2371,10 +2333,8 @@ copy_debug_stmt (gimple stmt, copy_body_data *id)\n       t = *n;\n     }\n   else if (TREE_CODE (t) == VAR_DECL\n-\t   && !TREE_STATIC (t)\n-\t   && gimple_in_ssa_p (cfun)\n-\t   && !pointer_map_contains (id->decl_map, t)\n-\t   && !var_ann (t))\n+\t   && !is_global_var (t)\n+\t   && !pointer_map_contains (id->decl_map, t))\n     /* T is a non-localized variable.  */;\n   else\n     walk_tree (&t, remap_gimple_op_r, &wi, NULL);"}, {"sha": "0884f85761d122cd52a22d408929875c7bff5378", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -1274,9 +1274,10 @@ rewrite_debug_stmt_uses (gimple stmt)\n \n   FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE)\n     {\n-      tree var = USE_FROM_PTR (use_p), def = NULL_TREE;\n+      tree var = USE_FROM_PTR (use_p), def;\n       gcc_assert (DECL_P (var));\n-      if (var_ann (var) == NULL)\n+      def = get_current_def (var);\n+      if (!def)\n \t{\n \t  if (TREE_CODE (var) == PARM_DECL && single_succ_p (ENTRY_BLOCK_PTR))\n \t    {\n@@ -1318,38 +1319,34 @@ rewrite_debug_stmt_uses (gimple stmt)\n \t}\n       else\n \t{\n-\t  def = get_current_def (var);\n \t  /* Check if get_current_def can be trusted.  */\n-\t  if (def)\n+\t  basic_block bb = gimple_bb (stmt);\n+\t  basic_block def_bb\n+\t      = SSA_NAME_IS_DEFAULT_DEF (def)\n+\t      ? NULL : gimple_bb (SSA_NAME_DEF_STMT (def));\n+\n+\t  /* If definition is in current bb, it is fine.  */\n+\t  if (bb == def_bb)\n+\t    ;\n+\t  /* If definition bb doesn't dominate the current bb,\n+\t     it can't be used.  */\n+\t  else if (def_bb && !dominated_by_p (CDI_DOMINATORS, bb, def_bb))\n+\t    def = NULL;\n+\t  /* If there is just one definition and dominates the current\n+\t     bb, it is fine.  */\n+\t  else if (get_phi_state (var) == NEED_PHI_STATE_NO)\n+\t    ;\n+\t  else\n \t    {\n-\t      basic_block bb = gimple_bb (stmt);\n-\t      basic_block def_bb\n-\t\t= SSA_NAME_IS_DEFAULT_DEF (def)\n-\t\t  ? NULL : gimple_bb (SSA_NAME_DEF_STMT (def));\n+\t      struct def_blocks_d *db_p = get_def_blocks_for (var);\n \n-\t      /* If definition is in current bb, it is fine.  */\n-\t      if (bb == def_bb)\n-\t\t;\n-\t      /* If definition bb doesn't dominate the current bb,\n-\t\t it can't be used.  */\n-\t      else if (def_bb && !dominated_by_p (CDI_DOMINATORS, bb, def_bb))\n-\t\tdef = NULL;\n-\t      /* If there is just one definition and dominates the current\n-\t\t bb, it is fine.  */\n-\t      else if (get_phi_state (var) == NEED_PHI_STATE_NO)\n+\t      /* If there are some non-debug uses in the current bb,\n+\t\t it is fine.  */\n+\t      if (bitmap_bit_p (db_p->livein_blocks, bb->index))\n \t\t;\n+\t      /* Otherwise give up for now.  */\n \t      else\n-\t\t{\n-\t\t  struct def_blocks_d *db_p = get_def_blocks_for (var);\n-\n-\t\t  /* If there are some non-debug uses in the current bb,\n-\t\t     it is fine.  */\n-\t\t  if (bitmap_bit_p (db_p->livein_blocks, bb->index))\n-\t\t    ;\n-\t\t  /* Otherwise give up for now.  */\n-\t\t  else\n-\t\t    def = NULL;\n-\t\t}\n+\t\tdef = NULL;\n \t    }\n \t}\n       if (def == NULL)"}, {"sha": "f1c52d1a82711161610044bccd7b3e7cc8850797", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -261,8 +261,6 @@ tree_nrv (void)\n   SET_DECL_VALUE_EXPR (found, result);\n   DECL_HAS_VALUE_EXPR_P (found) = 1;\n \n-  /* FOUND is no longer used.  Ensure it gets removed.  */\n-  clear_is_used (found);\n   return 0;\n }\n "}, {"sha": "99420c5bb1c355be9a1d681c2e5396771eaa19cb", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 51, "deletions": 53, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -59,59 +59,49 @@ static void  verify_live_on_entry (tree_live_info_p);\n static void\n var_map_base_init (var_map map)\n {\n-  int x, num_part, num;\n+  int x, num_part;\n   tree var;\n-  var_ann_t ann;\n+  htab_t decl_to_index;\n+  struct tree_int_map *m, *mapstorage;\n \n-  num = 0;\n   num_part = num_var_partitions (map);\n+  decl_to_index = htab_create (num_part, tree_decl_map_hash,\n+\t\t\t       tree_int_map_eq, NULL);\n+  /* We can have at most num_part entries in the hash tables, so it's\n+     enough to allocate so many map elements once, saving some malloc\n+     calls.  */\n+  mapstorage = m = XNEWVEC (struct tree_int_map, num_part);\n \n   /* If a base table already exists, clear it, otherwise create it.  */\n-  if (map->partition_to_base_index != NULL)\n-    {\n-      free (map->partition_to_base_index);\n-      VEC_truncate (tree, map->basevars, 0);\n-    }\n-  else\n-    map->basevars = VEC_alloc (tree, heap, MAX (40, (num_part / 10)));\n-\n+  free (map->partition_to_base_index);\n   map->partition_to_base_index = (int *) xmalloc (sizeof (int) * num_part);\n \n   /* Build the base variable list, and point partitions at their bases.  */\n   for (x = 0; x < num_part; x++)\n     {\n+      struct tree_int_map **slot;\n+      unsigned baseindex;\n       var = partition_to_var (map, x);\n-      if (TREE_CODE (var) == SSA_NAME)\n-\t var = SSA_NAME_VAR (var);\n-      ann = var_ann (var);\n+      var = SSA_NAME_VAR (var);\n       /* If base variable hasn't been seen, set it up.  */\n-      if (!ann->base_var_processed)\n-        {\n-\t  ann->base_var_processed = 1;\n-\t  VAR_ANN_BASE_INDEX (ann) = num++;\n-\t  VEC_safe_push (tree, heap, map->basevars, var);\n+      m->base.from = var;\n+      slot = (struct tree_int_map **) htab_find_slot (decl_to_index, m, INSERT);\n+      if (!*slot)\n+\t{\n+\t  baseindex = m - mapstorage;\n+\t  m->to = baseindex;\n+\t  *slot = m;\n+\t  m++;\n \t}\n-      map->partition_to_base_index[x] = VAR_ANN_BASE_INDEX (ann);\n+      else\n+\tbaseindex = (*slot)->to;\n+      map->partition_to_base_index[x] = baseindex;\n     }\n \n-  map->num_basevars = num;\n-\n-  /* Now clear the processed bit.  */\n-  for (x = 0; x < num; x++)\n-    {\n-       var = VEC_index (tree, map->basevars, x);\n-       var_ann (var)->base_var_processed = 0;\n-    }\n+  map->num_basevars = m - mapstorage;\n \n-#ifdef ENABLE_CHECKING\n-  for (x = 0; x < num_part; x++)\n-    {\n-      tree var2;\n-      var = SSA_NAME_VAR (partition_to_var (map, x));\n-      var2 = VEC_index (tree, map->basevars, basevar_index (map, x));\n-      gcc_assert (var == var2);\n-    }\n-#endif\n+  free (mapstorage);\n+  htab_delete (decl_to_index);\n }\n \n \n@@ -123,7 +113,6 @@ var_map_base_fini (var_map map)\n   /* Free the basevar info if it is present.  */\n   if (map->partition_to_base_index != NULL)\n     {\n-      VEC_free (tree, heap, map->basevars);\n       free (map->partition_to_base_index);\n       map->partition_to_base_index = NULL;\n       map->num_basevars = 0;\n@@ -145,7 +134,6 @@ init_var_map (int size)\n   map->partition_size = size;\n   map->num_basevars = 0;\n   map->partition_to_base_index = NULL;\n-  map->basevars = NULL;\n   return map;\n }\n \n@@ -341,6 +329,24 @@ partition_view_bitmap (var_map map, bitmap only, bool want_bases)\n }\n \n \n+static bitmap usedvars;\n+\n+/* Mark VAR as used, so that it'll be preserved during rtl expansion.  */\n+\n+static inline void\n+set_is_used (tree var)\n+{\n+  bitmap_set_bit (usedvars, DECL_UID (var));\n+}\n+\n+/* Return true if VAR is marked as used.  */\n+\n+static inline bool\n+is_used_p (tree var)\n+{\n+  return bitmap_bit_p (usedvars, DECL_UID (var));\n+}\n+\n static inline void mark_all_vars_used (tree *, void *data);\n \n /* Helper function for mark_all_vars_used, called via walk_tree.  */\n@@ -471,7 +477,7 @@ remove_unused_scope_block_p (tree scope, bitmap global_unused_vars)\n \t at all so user can't get into the scopes at first place.  */\n       else if ((is_global_var (*t)\n \t\t&& !bitmap_bit_p (global_unused_vars, DECL_UID (*t)))\n-\t       || (var_ann (*t) != NULL && is_used_p (*t)))\n+\t       || is_used_p (*t))\n \tunused = false;\n       else if (TREE_CODE (*t) == LABEL_DECL && TREE_USED (*t))\n \t/* For labels that are still used in the IL, the decision to\n@@ -635,14 +641,9 @@ dump_scope_block (FILE *file, int indent, tree scope, int flags)\n   fprintf (file, \" \\n\");\n   for (var = BLOCK_VARS (scope); var; var = DECL_CHAIN (var))\n     {\n-      bool used = false;\n-\n-      if (var_ann (var))\n-\tused = is_used_p (var);\n-\n       fprintf (file, \"%*s\", indent, \"\");\n       print_generic_decl (file, var, flags);\n-      fprintf (file, \"%s\\n\", used ? \"\" : \" (unused)\");\n+      fprintf (file, \"\\n\");\n     }\n   for (i = 0; i < BLOCK_NUM_NONLOCALIZED_VARS (scope); i++)\n     {\n@@ -707,9 +708,7 @@ remove_unused_locals (void)\n \n   mark_scope_block_unused (DECL_INITIAL (current_function_decl));\n \n-  /* Assume all locals are unused.  */\n-  FOR_EACH_REFERENCED_VAR (cfun, t, rvi)\n-    clear_is_used (t);\n+  usedvars = BITMAP_ALLOC (NULL);\n \n   /* Assume all globals in local decls are unused.  */\n   global_unused_vars = BITMAP_ALLOC (NULL);\n@@ -827,11 +826,9 @@ remove_unused_locals (void)\n \t      if (bitmap_bit_p (global_unused_vars, DECL_UID (var)))\n \t\tcontinue;\n \t    }\n-\t  else if (var_ann (var) == NULL\n-\t\t   || !is_used_p (var))\n+\t  else if (!is_used_p (var))\n \t    {\n-\t      if (var_ann (var))\n-\t\tremove_referenced_var (var);\n+\t      remove_referenced_var (var);\n \t      if (cfun->nonlocal_goto_save_area\n \t\t  && TREE_OPERAND (cfun->nonlocal_goto_save_area, 0) == var)\n \t\tcfun->nonlocal_goto_save_area = NULL;\n@@ -862,6 +859,7 @@ remove_unused_locals (void)\n \t\t\t       global_unused_vars);\n \n   BITMAP_FREE (global_unused_vars);\n+  BITMAP_FREE (usedvars);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}, {"sha": "d42bd87e2f72d3f8a02af620dd5d81f7e2c539ff", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -31,13 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Used to create the variable mapping when we go out of SSA form.\n \n    Mapping from an ssa_name to a partition number is maintained, as well as\n-   partition number to back to ssa_name. A partition can also be represented\n-   by a non-ssa_name variable.  This allows ssa_names and their partition to\n-   be coalesced with live on entry compiler variables, as well as eventually\n-   having real compiler variables assigned to each partition as part of the\n-   final stage of going of of ssa.\n-\n-   Non-ssa_names maintain their partition index in the variable annotation.\n+   partition number back to ssa_name.\n \n    This data structure also supports \"views\", which work on a subset of all\n    partitions.  This allows the coalescer to decide what partitions are\n@@ -72,16 +66,9 @@ typedef struct _var_map\n \n   /* Map of partitions numbers to base variable table indexes.  */\n   int *partition_to_base_index;\n-\n-  /* Table of base variable's.  */\n-  VEC (tree, heap) *basevars;\n } *var_map;\n \n \n-/* Index to the basevar table of a non ssa-name variable.  */\n-#define VAR_ANN_BASE_INDEX(ann) (ann->base_index)\n-\n-\n /* Value used to represent no partition number.  */\n #define NO_PARTITION\t\t-1\n "}, {"sha": "910fde42edb1697422c9854aded22d83a29e9f1b", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -1150,15 +1150,7 @@ struct gimple_opt_pass pass_init_datastructures =\n void\n delete_tree_ssa (void)\n {\n-  referenced_var_iterator rvi;\n-  tree var;\n-\n   /* Remove annotations from every referenced local variable.  */\n-  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n-    {\n-      ggc_free (var_ann (var));\n-      *DECL_VAR_ANN_PTR (var) = NULL;\n-    }\n   htab_delete (gimple_referenced_vars (cfun));\n   cfun->gimple_df->referenced_vars = NULL;\n "}, {"sha": "9ff7ec43c59b0812535c5ef87fbbe5f429608449", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -765,7 +765,7 @@ arg_needs_copy_p (tree param)\n {\n   tree def;\n \n-  if (!is_gimple_reg (param) || !var_ann (param))\n+  if (!is_gimple_reg (param))\n     return false;\n \n   /* Parameters that are only defined but never used need not be copied.  */"}, {"sha": "655e03d9b784d2b49eb5f2748785c7bf20fc5ad0", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -961,8 +961,6 @@ copy_node_stat (tree node MEM_STAT_DECL)\n     TREE_CHAIN (t) = 0;\n   TREE_ASM_WRITTEN (t) = 0;\n   TREE_VISITED (t) = 0;\n-  if (code == VAR_DECL || code == PARM_DECL || code == RESULT_DECL)\n-    *DECL_VAR_ANN_PTR (t) = 0;\n \n   if (TREE_CODE_CLASS (code) == tcc_declaration)\n     {"}, {"sha": "b28f35aa6e9e51c7cbc0088bdbc7ecaa052cf0c0", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f564b8f5655167ef3837eb104207705593276dc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5f564b8f5655167ef3837eb104207705593276dc", "patch": "@@ -3116,10 +3116,8 @@ struct GTY(()) tree_label_decl {\n   int eh_landing_pad_nr;\n };\n \n-struct var_ann_d;\n struct GTY(()) tree_result_decl {\n   struct tree_decl_with_rtl common;\n-  struct var_ann_d *ann;\n };\n \n struct GTY(()) tree_const_decl {\n@@ -3138,7 +3136,6 @@ struct GTY(()) tree_const_decl {\n struct GTY(()) tree_parm_decl {\n   struct tree_decl_with_rtl common;\n   rtx incoming_rtl;\n-  struct var_ann_d *ann;\n };\n \n \n@@ -3355,15 +3352,8 @@ extern void decl_fini_priority_insert (tree, priority_type);\n #define VAR_DECL_IS_VIRTUAL_OPERAND(NODE) \\\n   (VAR_DECL_CHECK (NODE)->base.saturating_flag)\n \n-#define DECL_VAR_ANN_PTR(NODE) \\\n-  (TREE_CODE (NODE) == VAR_DECL ? &(NODE)->var_decl.ann \\\n-   : TREE_CODE (NODE) == PARM_DECL ? &(NODE)->parm_decl.ann \\\n-   : TREE_CODE (NODE) == RESULT_DECL ? &(NODE)->result_decl.ann \\\n-   : NULL)\n-\n struct GTY(()) tree_var_decl {\n   struct tree_decl_with_vis common;\n-  struct var_ann_d *ann;\n };\n \n "}]}