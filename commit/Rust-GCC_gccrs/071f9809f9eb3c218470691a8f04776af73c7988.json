{"sha": "071f9809f9eb3c218470691a8f04776af73c7988", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcxZjk4MDlmOWViM2MyMTg0NzA2OTFhOGYwNDc3NmFmNzNjNzk4OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-06-12T19:26:43Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-06-12T19:26:43Z"}, "message": "optimize.c (expand_call_inline): Don't recurse into the code used to initialize the parameters more than once.\n\n\t* optimize.c (expand_call_inline): Don't recurse into the code\n\tused to initialize the parameters more than once.\n\nFrom-SVN: r34501", "tree": {"sha": "07c03bc9dba5293c1ca256f94206facbe898ae02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07c03bc9dba5293c1ca256f94206facbe898ae02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/071f9809f9eb3c218470691a8f04776af73c7988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071f9809f9eb3c218470691a8f04776af73c7988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/071f9809f9eb3c218470691a8f04776af73c7988", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071f9809f9eb3c218470691a8f04776af73c7988/comments", "author": null, "committer": null, "parents": [{"sha": "f6f8291af02282edca4357f07a12900b2666e4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f8291af02282edca4357f07a12900b2666e4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f8291af02282edca4357f07a12900b2666e4a5"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "17000bd4a583b575e7c8a17012e9dda3a80f1d87", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071f9809f9eb3c218470691a8f04776af73c7988/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071f9809f9eb3c218470691a8f04776af73c7988/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=071f9809f9eb3c218470691a8f04776af73c7988", "patch": "@@ -1,3 +1,8 @@\n+2000-06-12  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* optimize.c (expand_call_inline): Don't recurse into the code\n+\tused to initialize the parameters more than once.\n+\n 2000-06-11  Mark Mitchell <mark@codesourcery.com>\n \t\n \t* mangle.c (NESTED_TEMPLATE_MATCH): Fix typo in comment."}, {"sha": "b803627ed686eeabc2b6db965bec36841eb4f0b1", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071f9809f9eb3c218470691a8f04776af73c7988/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071f9809f9eb3c218470691a8f04776af73c7988/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=071f9809f9eb3c218470691a8f04776af73c7988", "patch": "@@ -612,6 +612,7 @@ expand_call_inline (tp, walk_subtrees, data)\n   tree scope_stmt;\n   tree use_stmt;\n   tree arg_inits;\n+  tree *inlined_body;\n   splay_tree st;\n \n   /* See what we've got.  */\n@@ -724,8 +725,10 @@ expand_call_inline (tp, walk_subtrees, data)\n   \n   /* After we've initialized the parameters, we insert the body of the\n      function itself.  */\n-  STMT_EXPR_STMT (expr)\n-    = chainon (STMT_EXPR_STMT (expr), copy_body (id));\n+  inlined_body = &STMT_EXPR_STMT (expr);\n+  while (*inlined_body)\n+    inlined_body = &TREE_CHAIN (*inlined_body);\n+  *inlined_body = copy_body (id);\n \n   /* Close the block for the parameters.  */\n   scope_stmt = build_min_nt (SCOPE_STMT, DECL_INITIAL (fn));\n@@ -771,7 +774,7 @@ expand_call_inline (tp, walk_subtrees, data)\n   TREE_USED (*tp) = 1;\n \n   /* Recurse into the body of the just inlined function.  */\n-  expand_calls_inline (tp, id);\n+  expand_calls_inline (inlined_body, id);\n   VARRAY_POP (id->fns);\n \n   /* Don't walk into subtrees.  We've already handled them above.  */"}, {"sha": "9556fc3b172c24e279b1de21ca50bf96206d0169", "filename": "gcc/testsuite/g++.old-deja/g++.other/inline11.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071f9809f9eb3c218470691a8f04776af73c7988/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071f9809f9eb3c218470691a8f04776af73c7988/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline11.C?ref=071f9809f9eb3c218470691a8f04776af73c7988", "patch": "@@ -0,0 +1,33 @@\n+// Origin: Jakub Jelinek <jakub@redhat.com>\n+// Special g++ Options: -O2\n+\n+class baz\n+{\n+public:\n+  baz& operator += (const baz&);\n+};\n+ \n+inline baz& baz::operator += (const baz& r)\n+{\n+  return *this;\n+}\n+\n+inline baz operator + (int x, const baz& y)\n+{\n+  return y;\n+}\n+\n+static inline baz bar (int alpha);\n+static inline baz foo (int alpha)\n+{\n+  baz tmp = alpha + foo (alpha);\n+  tmp += alpha + bar (alpha);\n+  return tmp;\n+}\n+\n+static inline baz bar (int alpha)\n+{\n+  baz tmp = alpha + bar (alpha);\n+  tmp += alpha + foo (alpha);\n+  return tmp;\n+}"}]}