{"sha": "7140f0f90e92bc0effa66dd178a9fe9c323e7d1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0MGYwZjkwZTkyYmMwZWZmYTY2ZGQxNzhhOWZlOWMzMjNlN2QxZg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2010-04-15T21:51:14Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2010-04-15T21:51:14Z"}, "message": "re PR target/43741 (sh-elf ICEs for libstdc++-v3/src/ios_init.cc with -m2a)\n\n\tPR target/43471\n\t* config/sh/sh.c (sh_legitimize_reload_address): Use\n\tMAYBE_BASE_REGISTER_RTX_P instead of BASE_REGISTER_RTX_P.\n\tRemove a unneeded check for offset_base.\n\nFrom-SVN: r158393", "tree": {"sha": "a42b622f59d1a14c43fa12fecb1726b147ec4061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a42b622f59d1a14c43fa12fecb1726b147ec4061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7140f0f90e92bc0effa66dd178a9fe9c323e7d1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7140f0f90e92bc0effa66dd178a9fe9c323e7d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7140f0f90e92bc0effa66dd178a9fe9c323e7d1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7140f0f90e92bc0effa66dd178a9fe9c323e7d1f/comments", "author": null, "committer": null, "parents": [{"sha": "e3e529d14c8be68ad1aff0c95f5fefd2e8b0a9f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e529d14c8be68ad1aff0c95f5fefd2e8b0a9f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e529d14c8be68ad1aff0c95f5fefd2e8b0a9f3"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "5d3da7cd5a0c99089d247d5523ba381c3984072f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7140f0f90e92bc0effa66dd178a9fe9c323e7d1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7140f0f90e92bc0effa66dd178a9fe9c323e7d1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7140f0f90e92bc0effa66dd178a9fe9c323e7d1f", "patch": "@@ -1,3 +1,10 @@\n+2010-04-15  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/43471\n+\t* config/sh/sh.c (sh_legitimize_reload_address): Use\n+\tMAYBE_BASE_REGISTER_RTX_P instead of BASE_REGISTER_RTX_P.\n+\tRemove a unneeded check for offset_base.\n+\n 2010-04-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* configure: Regenerated."}, {"sha": "5dd9b6ec99276e8dd7104cc9756a1891b114332c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7140f0f90e92bc0effa66dd178a9fe9c323e7d1f/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7140f0f90e92bc0effa66dd178a9fe9c323e7d1f/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7140f0f90e92bc0effa66dd178a9fe9c323e7d1f", "patch": "@@ -9640,7 +9640,7 @@ sh_legitimize_reload_address (rtx *p, enum machine_mode mode, int opnum,\n   if (GET_CODE (*p) == PLUS\n       && (GET_MODE_SIZE (mode) == 4 || GET_MODE_SIZE (mode) == 8)\n       && CONST_INT_P (XEXP (*p, 1))\n-      && BASE_REGISTER_RTX_P (XEXP (*p, 0))\n+      && MAYBE_BASE_REGISTER_RTX_P (XEXP (*p, 0), true)\n       && ! TARGET_SHMEDIA\n       && ! (TARGET_SH4 && mode == DFmode)\n       && ! (mode == PSImode && type == RELOAD_FOR_INPUT_ADDRESS)\n@@ -9674,8 +9674,7 @@ sh_legitimize_reload_address (rtx *p, enum machine_mode mode, int opnum,\n       /* Sometimes the normal form does not suit DImode.  We could avoid\n \t that by using smaller ranges, but that would give less optimized\n \t code when SImode is prevalent.  */\n-      if (offset_base != 0\n-\t  && GET_MODE_SIZE (mode) + offset - offset_base <= 64)\n+      if (GET_MODE_SIZE (mode) + offset - offset_base <= 64)\n \t{\n \t  sum = gen_rtx_PLUS (Pmode, XEXP (*p, 0), GEN_INT (offset_base));\n \t  *p = gen_rtx_PLUS (Pmode, sum, GEN_INT (offset - offset_base));\n@@ -9689,7 +9688,7 @@ sh_legitimize_reload_address (rtx *p, enum machine_mode mode, int opnum,\n \t   && (GET_MODE_SIZE (mode) == 4 || GET_MODE_SIZE (mode) == 8)\n \t   && GET_CODE (XEXP (*p, 0)) == PLUS\n \t   && CONST_INT_P (XEXP (XEXP (*p, 0), 1))\n-\t   && BASE_REGISTER_RTX_P (XEXP (XEXP (*p, 0), 0))\n+\t   && MAYBE_BASE_REGISTER_RTX_P (XEXP (XEXP (*p, 0), 0), true)\n \t   && CONST_INT_P (XEXP (*p, 1))\n \t   && ! TARGET_SHMEDIA\n \t   && ! (TARGET_SH2E && mode == SFmode))"}]}