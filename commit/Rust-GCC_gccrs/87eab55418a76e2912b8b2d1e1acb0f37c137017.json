{"sha": "87eab55418a76e2912b8b2d1e1acb0f37c137017", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdlYWI1NTQxOGE3NmUyOTEyYjhiMmQxZTFhY2IwZjM3YzEzNzAxNw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-01-04T13:20:38Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-01-04T13:20:38Z"}, "message": "re PR tree-optimization/55755 (Invalid VIEW_CONVERT_EXPR produced by SRA)\n\n2013-01-04  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/55755\n\t* tree-sra.c (sra_modify_assign): Do not check that an access has no\n\tchildren when trying to avoid producing a VIEW_CONVERT_EXPR.\n\ntestsuite/\n\t* gcc.dg/torture/pr55755.c: New test.\n\t* gcc.dg/tree-ssa/sra-13.c: Likewise.\n\t* gcc.dg/tree-ssa/pr45144.c: Update.\n\nFrom-SVN: r194905", "tree": {"sha": "36dbf3acb2f58a0929719fd035fe57a3dfc6e32c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36dbf3acb2f58a0929719fd035fe57a3dfc6e32c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87eab55418a76e2912b8b2d1e1acb0f37c137017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87eab55418a76e2912b8b2d1e1acb0f37c137017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87eab55418a76e2912b8b2d1e1acb0f37c137017", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87eab55418a76e2912b8b2d1e1acb0f37c137017/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90d04a445cb821407e109da069ac93cd5ff3031f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d04a445cb821407e109da069ac93cd5ff3031f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d04a445cb821407e109da069ac93cd5ff3031f"}], "stats": {"total": 178, "additions": 173, "deletions": 5}, "files": [{"sha": "9a842c4b47a546bbaee1be71872281aff2f29745", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87eab55418a76e2912b8b2d1e1acb0f37c137017", "patch": "@@ -1,3 +1,9 @@\n+2013-01-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/55755\n+\t* tree-sra.c (sra_modify_assign): Do not check that an access has no\n+\tchildren when trying to avoid producing a VIEW_CONVERT_EXPR.\n+\n 2013-01-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/55859"}, {"sha": "c9c434b2f6f5fded6d2462233a38a60a5c113f99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87eab55418a76e2912b8b2d1e1acb0f37c137017", "patch": "@@ -1,3 +1,10 @@\n+2013-01-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/55755\n+\t* gcc.dg/torture/pr55755.c: New test.\n+\t* gcc.dg/tree-ssa/sra-13.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr45144.c: Update.\n+\n 2013-01-04  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/55863"}, {"sha": "3c8bb6ba41a68024989bd19cc379ec4440448232", "filename": "gcc/testsuite/gcc.dg/torture/pr55755.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55755.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55755.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55755.c?ref=87eab55418a76e2912b8b2d1e1acb0f37c137017", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n+\n+struct S4\n+{\n+  unsigned f0:24;\n+} __attribute__((__packed__));\n+\n+struct S4 g_10 = {\n+  6210831\n+};\n+\n+struct S5\n+{\n+  int i;\n+  struct S4 l_8[2];\n+}  __attribute__((__packed__));\n+\n+int a, b;\n+\n+struct S4 func_2 (int x)\n+{\n+  struct S5 l = {\n+    0,\n+    {{0}, {0}}\n+  };\n+  l.i = a;\n+  g_10 = l.l_8[1];\n+  for (; x<2; x++) {\n+    struct S4 tmp = {\n+      11936567\n+    };\n+    l.l_8[x] = tmp;\n+  }\n+  b = l.i;\n+  return g_10;\n+}\n+\n+int main (void)\n+{\n+  func_2 (0);\n+  return 0;\n+}"}, {"sha": "af23fb5970b590cefd21a4debd31facf712f32ae", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr45144.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45144.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45144.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45144.c?ref=87eab55418a76e2912b8b2d1e1acb0f37c137017", "patch": "@@ -43,5 +43,5 @@ bar (unsigned orig, unsigned *new)\n   *new = foo (&a);\n }\n \n-/* { dg-final { scan-tree-dump \" = VIEW_CONVERT_EXPR<unsigned int>\\\\(a\\\\);\" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-not \"unnamed-unsigned:19\" \"optimized\"} } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "12b77fe2f27b69f02a306aee79f5eb5ddff9e831", "filename": "gcc/testsuite/gcc.dg/tree-ssa/sra-13.c", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-13.c?ref=87eab55418a76e2912b8b2d1e1acb0f37c137017", "patch": "@@ -0,0 +1,114 @@\n+/* Test that SRA replacement can deal with assignments that have\n+   sub-replacements on one side and a single scalar replacement on another.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+struct A\n+{\n+  int i1, i2;\n+};\n+\n+struct B\n+{\n+  long long int l;\n+};\n+\n+union U\n+{\n+  struct A a;\n+  struct B b;\n+};\n+\n+int b, gi;\n+long gl;\n+union U gu1, gu2;\n+\n+int __attribute__ ((noinline, noclone))\n+foo (void)\n+{\n+  union U x, y;\n+  int r;\n+\n+  y = gu1;\n+  if (b)\n+    y.b.l = gl;\n+\n+  x = y;\n+\n+  if (!b)\n+    r = x.a.i1;\n+  else\n+    r = 0;\n+\n+  gu2 = x;\n+  return r;\n+}\n+\n+long long int __attribute__ ((noinline, noclone))\n+bar (void)\n+{\n+  union U x, y;\n+  int r;\n+\n+  y = gu1;\n+  if (b)\n+    y.a.i1 = gi;\n+\n+  x = y;\n+\n+  if (!b)\n+    r = x.b.l;\n+  else\n+    r = 0;\n+\n+  gu2 = x;\n+  return r;\n+}\n+\n+\n+int\n+main (void)\n+{\n+  int r;\n+  long long int s;\n+\n+  b = 0;\n+  gu1.a.i1 = 123;\n+  gu1.a.i2 = 234;\n+  r = foo ();\n+  if (r != 123)\n+    __builtin_abort ();\n+  if (gu2.a.i1 != 123)\n+    __builtin_abort ();\n+  if (gu2.a.i2 != 234)\n+    __builtin_abort ();\n+\n+  b = 1;\n+  gl = 10000001;\n+  gu1.b.l = 10000000;\n+  r = foo ();\n+  if (r != 0)\n+    __builtin_abort ();\n+  if (gu2.b.l != 10000001)\n+    __builtin_abort ();\n+\n+  b = 0;\n+  gu1.b.l = 20000000;\n+  s = bar ();\n+  if (s != 20000000)\n+    __builtin_abort ();\n+  if (gu2.b.l != 20000000)\n+    __builtin_abort ();\n+\n+  b = 1;\n+  gi = 456;\n+  gu1.a.i1 = 123;\n+  gu1.a.i2 = 234;\n+  s = bar ();\n+  if (s != 0)\n+    __builtin_abort ();\n+  if (gu2.a.i1 != 456)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "9c75393afaed8dca50a757f9abe10701617fb428", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87eab55418a76e2912b8b2d1e1acb0f37c137017/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=87eab55418a76e2912b8b2d1e1acb0f37c137017", "patch": "@@ -3087,15 +3087,13 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t     ???  This should move to fold_stmt which we simply should\n \t     call after building a VIEW_CONVERT_EXPR here.  */\n \t  if (AGGREGATE_TYPE_P (TREE_TYPE (lhs))\n-\t      && !contains_bitfld_comp_ref_p (lhs)\n-\t      && !access_has_children_p (lacc))\n+\t      && !contains_bitfld_comp_ref_p (lhs))\n \t    {\n \t      lhs = build_ref_for_model (loc, lhs, 0, racc, gsi, false);\n \t      gimple_assign_set_lhs (*stmt, lhs);\n \t    }\n \t  else if (AGGREGATE_TYPE_P (TREE_TYPE (rhs))\n-\t\t   && !contains_vce_or_bfcref_p (rhs)\n-\t\t   && !access_has_children_p (racc))\n+\t\t   && !contains_vce_or_bfcref_p (rhs))\n \t    rhs = build_ref_for_model (loc, rhs, 0, lacc, gsi, false);\n \n \t  if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))"}]}