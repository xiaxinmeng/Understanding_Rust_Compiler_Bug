{"sha": "f4bf2aabe36633d75852313caafe7efab71d5ba7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRiZjJhYWJlMzY2MzNkNzU4NTIzMTNjYWFmZTdlZmFiNzFkNWJhNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-01-07T12:17:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-01-07T12:17:10Z"}, "message": "[2/2] PR88598: Optimise reduc (bit_and)\n\nThis patch folds certain reductions of X & CST to X[I] & CST[I] if I is\nthe only nonzero element of CST.  This includes the motivating case in\nwhich CST[I] is -1.\n\nWe could do the same for REDUC_MAX on unsigned types, but I wasn't sure\nthat that special case was worth it.\n\n2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/88598\n\t* tree.h (single_nonzero_element): Declare.\n\t* tree.c (single_nonzero_element): New function.\n\t* match.pd: Fold certain reductions of X & CST to X[I] & CST[I]\n\tif I is the only nonzero element of CST.\n\ngcc/testsuite/\n\tPR tree-optimization/88598\n\t* gcc.dg/vect/pr88598-1.c: New test.\n\t* gcc.dg/vect/pr88598-2.c: Likewise.\n\t* gcc.dg/vect/pr88598-3.c: Likewise.\n\t* gcc.dg/vect/pr88598-4.c: Likewise.\n\t* gcc.dg/vect/pr88598-5.c: Likewise.\n\t* gcc.dg/vect/pr88598-6.c: Likewise.\n\nFrom-SVN: r267646", "tree": {"sha": "4b1605d010ed5331fcd70d90790c5ce41dd2f7c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b1605d010ed5331fcd70d90790c5ce41dd2f7c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4bf2aabe36633d75852313caafe7efab71d5ba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bf2aabe36633d75852313caafe7efab71d5ba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4bf2aabe36633d75852313caafe7efab71d5ba7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bf2aabe36633d75852313caafe7efab71d5ba7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46c66a46aa33077bda821e0428cc7859945c04c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c66a46aa33077bda821e0428cc7859945c04c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c66a46aa33077bda821e0428cc7859945c04c8"}], "stats": {"total": 386, "additions": 386, "deletions": 0}, "files": [{"sha": "e5f3ad231c9acfdd7d5712d420675dd212a3baea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -1,3 +1,11 @@\n+2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/88598\n+\t* tree.h (single_nonzero_element): Declare.\n+\t* tree.c (single_nonzero_element): New function.\n+\t* match.pd: Fold certain reductions of X & CST to X[I] & CST[I]\n+\tif I is the only nonzero element of CST.\n+\n 2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/88598"}, {"sha": "60b12f94f9ee3e5c1fef2cbb8185663624a6c59d", "filename": "gcc/match.pd", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -5251,3 +5251,19 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t\t    { wide_int_to_tree (sizetype, off); })\n \t      { swap_p ? @0 : @2; }))\n \t    { rhs_tree; })))))))))\n+\n+/* Fold REDUC (@0 & @1) -> @0[I] & @1[I] if element I is the only nonzero\n+   element of @1.  */\n+(for reduc (IFN_REDUC_PLUS IFN_REDUC_IOR IFN_REDUC_XOR)\n+ (simplify (reduc (view_convert? (bit_and @0 VECTOR_CST@1)))\n+  (with { int i = single_nonzero_element (@1); }\n+   (if (i >= 0)\n+    (with { tree elt = vector_cst_elt (@1, i);\n+\t    tree elt_type = TREE_TYPE (elt);\n+\t    unsigned int elt_bits = tree_to_uhwi (TYPE_SIZE (elt_type));\n+\t    tree size = bitsize_int (elt_bits);\n+\t    tree pos = bitsize_int (elt_bits * i); }\n+     (view_convert\n+      (bit_and:elt_type\n+       (BIT_FIELD_REF:elt_type @0 { size; } { pos; })\n+       { elt; })))))))"}, {"sha": "0dc5707e7b78608f41516c3f461d601834f893c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -1,3 +1,13 @@\n+2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/88598\n+\t* gcc.dg/vect/pr88598-1.c: New test.\n+\t* gcc.dg/vect/pr88598-2.c: Likewise.\n+\t* gcc.dg/vect/pr88598-3.c: Likewise.\n+\t* gcc.dg/vect/pr88598-4.c: Likewise.\n+\t* gcc.dg/vect/pr88598-5.c: Likewise.\n+\t* gcc.dg/vect/pr88598-6.c: Likewise.\n+\n 2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/88598"}, {"sha": "1d119eef0d5ef642bfbc263c92c6973edeb5cc0c", "filename": "gcc/testsuite/gcc.dg/vect/pr88598-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-1.c?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 4\n+\n+int a[N];\n+\n+int __attribute__ ((noipa))\n+f1 (void)\n+{\n+  int b[N] = { 15, 0, 0, 0 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] & b[i];\n+  return res;\n+}\n+\n+int __attribute__ ((noipa))\n+f2 (void)\n+{\n+  int b[N] = { 0, 31, 0, 0 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] & b[i];\n+  return res;\n+}\n+\n+int __attribute__ ((noipa))\n+f3 (void)\n+{\n+  int b[N] = { 0, 0, 0, -1 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] & b[i];\n+  return res;\n+}\n+\n+int\n+main ()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < N; ++i)\n+    a[i] = 0xe0 + i;\n+\n+  if (f1 () != (a[0] & 15)\n+      || f2 () != (a[1] & 31)\n+      || f3 () != a[N - 1])\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* ??? We need more constant folding for this to work with fully-masked\n+   loops.  */\n+/* { dg-final { scan-tree-dump-not {REDUC_PLUS} \"optimized\" { xfail aarch64_sve } } } */"}, {"sha": "837cd5ddb3a258a4bfb5c4073a49a4ee1f8565ce", "filename": "gcc/testsuite/gcc.dg/vect/pr88598-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-2.c?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 4\n+\n+int a[N];\n+\n+int __attribute__ ((noipa))\n+f1 (void)\n+{\n+  int b[N] = { 1, 0, 0, 0 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+int __attribute__ ((noipa))\n+f2 (void)\n+{\n+  int b[N] = { 0, 1, 0, 0 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+int __attribute__ ((noipa))\n+f3 (void)\n+{\n+  int b[N] = { 0, 0, 0, 1 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+int\n+main ()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < N; ++i)\n+    a[i] = 0xe0 + i;\n+\n+  if (f1 () != a[0]\n+      || f2 () != a[1]\n+      || f3 () != a[N - 1])\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* ??? We need more constant folding for this to work with fully-masked\n+   loops.  */\n+/* { dg-final { scan-tree-dump-not {REDUC_PLUS} \"optimized\" { xfail aarch64_sve } } } */"}, {"sha": "ee034ec0ed09bf33bad98cce658098a073892409", "filename": "gcc/testsuite/gcc.dg/vect/pr88598-3.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-3.c?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ffast-math -fdump-tree-optimized\" } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 4\n+\n+float a[N];\n+\n+float __attribute__ ((noipa))\n+f1 (void)\n+{\n+  float b[N] = { 1, 0, 0, 0 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+float __attribute__ ((noipa))\n+f2 (void)\n+{\n+  float b[N] = { 0, 1, 0, 0 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+float __attribute__ ((noipa))\n+f3 (void)\n+{\n+  float b[N] = { 0, 0, 0, 1 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+int\n+main ()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < N; ++i)\n+    a[i] = 0xe0 + i;\n+\n+  if (f1 () != a[0]\n+      || f2 () != a[1]\n+      || f3 () != a[N - 1])\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* ??? We need more constant folding for this to work with fully-masked\n+   loops.  */\n+/* { dg-final { scan-tree-dump-not {REDUC_PLUS} \"optimized\" { xfail aarch64_sve } } } */"}, {"sha": "b5cf08d87c54337f190dcca1276eed4c9cb2243f", "filename": "gcc/testsuite/gcc.dg/vect/pr88598-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-4.c?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 4\n+\n+int a[N];\n+\n+int __attribute__ ((noipa))\n+f1 (void)\n+{\n+  int b[N] = { 0, 15, 15, 15 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] & b[i];\n+  return res;\n+}\n+\n+int __attribute__ ((noipa))\n+f2 (void)\n+{\n+  int b[N] = { 0, 31, 0, 31 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] & b[i];\n+  return res;\n+}\n+\n+int __attribute__ ((noipa))\n+f3 (void)\n+{\n+  int b[N] = { -1, -1, 0, 0 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] & b[i];\n+  return res;\n+}\n+\n+int\n+main ()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < N; ++i)\n+    a[i] = 0xe0 + i;\n+\n+  if (f1 () != (a[1] & 15) + (a[2] & 15) + (a[3] & 15)\n+      || f2 () != (a[1] & 31) + (a[3] & 31)\n+      || f3 () != a[0] + a[1])\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "b3b9843b07a4ae8a49dd8d526596462672c74c17", "filename": "gcc/testsuite/gcc.dg/vect/pr88598-5.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-5.c?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 4\n+\n+int a[N];\n+\n+int __attribute__ ((noipa))\n+f1 (void)\n+{\n+  int b[N] = { 0, 1, 1, 1 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+int __attribute__ ((noipa))\n+f2 (void)\n+{\n+  int b[N] = { 0, 1, 0, 1 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+int __attribute__ ((noipa))\n+f3 (void)\n+{\n+  int b[N] = { 1, 1, 0, 0 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+int\n+main ()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < N; ++i)\n+    a[i] = 0xe0 + i;\n+\n+  if (f1 () != a[1] + a[2] + a[3]\n+      || f2 () != a[1] + a[3]\n+      || f3 () != a[0] + a[1])\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "f04e32d14639f88726947ba51dedef6ad1d99a8d", "filename": "gcc/testsuite/gcc.dg/vect/pr88598-6.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr88598-6.c?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ffast-math -fdump-tree-optimized\" } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 4\n+\n+float a[N];\n+\n+float __attribute__ ((noipa))\n+f1 (void)\n+{\n+  float b[N] = { 0, 1, 1, 1 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+float __attribute__ ((noipa))\n+f2 (void)\n+{\n+  float b[N] = { 0, 1, 0, 1 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+float __attribute__ ((noipa))\n+f3 (void)\n+{\n+  float b[N] = { 1, 1, 0, 0 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] * b[i];\n+  return res;\n+}\n+\n+int\n+main ()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < N; ++i)\n+    a[i] = 0xe0 + i;\n+\n+  if (f1 () != a[1] + a[2] + a[3]\n+      || f2 () != a[1] + a[3]\n+      || f3 () != a[0] + a[1])\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "f957e4c1d48eccd9330e968b153fc71687914bd5", "filename": "gcc/tree.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -11340,6 +11340,38 @@ uniform_integer_cst_p (tree t)\n   return NULL_TREE;\n }\n \n+/* If VECTOR_CST T has a single nonzero element, return the index of that\n+   element, otherwise return -1.  */\n+\n+int\n+single_nonzero_element (const_tree t)\n+{\n+  unsigned HOST_WIDE_INT nelts;\n+  unsigned int repeat_nelts;\n+  if (VECTOR_CST_NELTS (t).is_constant (&nelts))\n+    repeat_nelts = nelts;\n+  else if (VECTOR_CST_NELTS_PER_PATTERN (t) == 2)\n+    {\n+      nelts = vector_cst_encoded_nelts (t);\n+      repeat_nelts = VECTOR_CST_NPATTERNS (t);\n+    }\n+  else\n+    return -1;\n+\n+  int res = -1;\n+  for (unsigned int i = 0; i < nelts; ++i)\n+    {\n+      tree elt = vector_cst_elt (t, i);\n+      if (!integer_zerop (elt) && !real_zerop (elt))\n+\t{\n+\t  if (res >= 0 || i >= repeat_nelts)\n+\t    return -1;\n+\t  res = i;\n+\t}\n+    }\n+  return res;\n+}\n+\n /* Build an empty statement at location LOC.  */\n \n tree"}, {"sha": "b2512bbb42c402707f50dcc65927378d4ac8a911", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bf2aabe36633d75852313caafe7efab71d5ba7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f4bf2aabe36633d75852313caafe7efab71d5ba7", "patch": "@@ -4522,6 +4522,8 @@ extern tree uniform_vector_p (const_tree);\n \n extern tree uniform_integer_cst_p (tree);\n \n+extern int single_nonzero_element (const_tree);\n+\n /* Given a CONSTRUCTOR CTOR, return the element values as a vector.  */\n \n extern vec<tree, va_gc> *ctor_to_vec (tree);"}]}