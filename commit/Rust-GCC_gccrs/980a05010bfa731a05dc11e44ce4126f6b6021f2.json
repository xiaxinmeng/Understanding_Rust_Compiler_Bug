{"sha": "980a05010bfa731a05dc11e44ce4126f6b6021f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwYTA1MDEwYmZhNzMxYTA1ZGMxMWU0NGNlNDEyNmY2YjYwMjFmMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-07-22T19:28:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-07-22T19:28:21Z"}, "message": "re PR ada/44892 (internal error on gnat.dg/unchecked_convert5.adb)\n\n\tPR ada/44892\n\t* gcc-interface/utils.c (convert): Fix thinko in test.\n\t(unchecked_convert): When converting from a scalar type to a type with\n\ta different size, pad to have the same size on both sides.\n\nFrom-SVN: r162425", "tree": {"sha": "7b449669820919931ac175790046520c1ccf6b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b449669820919931ac175790046520c1ccf6b51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/980a05010bfa731a05dc11e44ce4126f6b6021f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980a05010bfa731a05dc11e44ce4126f6b6021f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980a05010bfa731a05dc11e44ce4126f6b6021f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980a05010bfa731a05dc11e44ce4126f6b6021f2/comments", "author": null, "committer": null, "parents": [{"sha": "cfa0bd19c5187edf728c1ca985b1c8ee7a477c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa0bd19c5187edf728c1ca985b1c8ee7a477c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa0bd19c5187edf728c1ca985b1c8ee7a477c73"}], "stats": {"total": 127, "additions": 121, "deletions": 6}, "files": [{"sha": "f631f84bd8b0e9f5573618698a38b2aec4be9c74", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=980a05010bfa731a05dc11e44ce4126f6b6021f2", "patch": "@@ -1,3 +1,10 @@\n+2010-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/44892\n+\t* gcc-interface/utils.c (convert): Fix thinko in test.\n+\t(unchecked_convert): When converting from a scalar type to a type with\n+\ta different size, pad to have the same size on both sides.\n+\n 2010-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (gnat_types_compatible_p): Don't require strict"}, {"sha": "541f7bb3f919a2bb2861d681de3335d8de709ce0", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=980a05010bfa731a05dc11e44ce4126f6b6021f2", "patch": "@@ -3702,9 +3702,10 @@ convert (tree type, tree expr)\n       if (ecode == RECORD_TYPE\n \t  && CONTAINS_PLACEHOLDER_P (DECL_SIZE (TYPE_FIELDS (type))))\n \t{\n-\t  if (TREE_CONSTANT (TYPE_SIZE (etype)))\n+\t  if (TREE_CODE (TYPE_SIZE (etype)) == INTEGER_CST)\n \t    expr = convert (maybe_pad_type (etype, TYPE_SIZE (type), 0, Empty,\n-\t\t\t    false, false, false, true), expr);\n+\t\t\t\t\t    false, false, false, true),\n+\t\t\t    expr);\n \t  return unchecked_convert (type, expr, false);\n \t}\n \n@@ -4353,6 +4354,7 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n   tree etype = TREE_TYPE (expr);\n   enum tree_code ecode = TREE_CODE (etype);\n   enum tree_code code = TREE_CODE (type);\n+  int c;\n \n   /* If the expression is already of the right type, we are done.  */\n   if (etype == type)\n@@ -4393,7 +4395,8 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n   /* If we are converting to an integral type whose precision is not equal\n      to its size, first unchecked convert to a record that contains an\n      object of the output type.  Then extract the field. */\n-  else if (INTEGRAL_TYPE_P (type) && TYPE_RM_SIZE (type)\n+  else if (INTEGRAL_TYPE_P (type)\n+\t   && TYPE_RM_SIZE (type)\n \t   && 0 != compare_tree_int (TYPE_RM_SIZE (type),\n \t\t\t\t     GET_MODE_BITSIZE (TYPE_MODE (type))))\n     {\n@@ -4410,9 +4413,10 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n \n   /* Similarly if we are converting from an integral type whose precision\n      is not equal to its size.  */\n-  else if (INTEGRAL_TYPE_P (etype) && TYPE_RM_SIZE (etype)\n-      && 0 != compare_tree_int (TYPE_RM_SIZE (etype),\n-\t\t\t\tGET_MODE_BITSIZE (TYPE_MODE (etype))))\n+  else if (INTEGRAL_TYPE_P (etype)\n+\t   && TYPE_RM_SIZE (etype)\n+\t   && 0 != compare_tree_int (TYPE_RM_SIZE (etype),\n+\t\t\t\t     GET_MODE_BITSIZE (TYPE_MODE (etype))))\n     {\n       tree rec_type = make_node (RECORD_TYPE);\n       tree field = create_field_decl (get_identifier (\"OBJ\"), etype, rec_type,\n@@ -4427,6 +4431,38 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n       expr = unchecked_convert (type, expr, notrunc_p);\n     }\n \n+  /* If we are converting from a scalar type to a type with a different size,\n+     we need to pad to have the same size on both sides.\n+\n+     ??? We cannot do it unconditionally because unchecked conversions are\n+     used liberally by the front-end to implement polymorphism, e.g. in:\n+\n+       S191s : constant ada__tags__addr_ptr := ada__tags__addr_ptr!(S190s);\n+       return p___size__4 (p__object!(S191s.all));\n+\n+     so we skip all expressions that are references.  */\n+  else if (!REFERENCE_CLASS_P (expr)\n+\t   && !AGGREGATE_TYPE_P (etype)\n+\t   && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n+\t   && (c = tree_int_cst_compare (TYPE_SIZE (etype), TYPE_SIZE (type))))\n+    {\n+      if (c < 0)\n+\t{\n+\t  expr = convert (maybe_pad_type (etype, TYPE_SIZE (type), 0, Empty,\n+\t\t\t\t\t  false, false, false, true),\n+\t\t\t  expr);\n+\t  expr = unchecked_convert (type, expr, notrunc_p);\n+\t}\n+      else\n+\t{\n+\t  tree rec_type = maybe_pad_type (type, TYPE_SIZE (etype), 0, Empty,\n+\t\t\t\t\t  false, false, false, true);\n+\t  expr = unchecked_convert (rec_type, expr, notrunc_p);\n+\t  expr = build_component_ref (expr, NULL_TREE, TYPE_FIELDS (rec_type),\n+\t\t\t\t      false);\n+\t}\n+    }\n+\n   /* We have a special case when we are converting between two unconstrained\n      array types.  In that case, take the address, convert the fat pointer\n      types, and dereference.  */"}, {"sha": "ecb1efb9eb4de9057deedcc3feca22cc09b53443", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=980a05010bfa731a05dc11e44ce4126f6b6021f2", "patch": "@@ -1,3 +1,9 @@\n+2010-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/unchecked_convert5b.adb: New test.\n+\t* gnat.dg/unchecked_convert6.adb: Likewise.\n+\t* gnat.dg/unchecked_convert6b.adb: Likewise.\n+\n 2010-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/aggr15.ad[sb]: New test."}, {"sha": "5232041c0d8f54c85985e11b3b2c1c94a1ff0d1a", "filename": "gcc/testsuite/gnat.dg/unchecked_convert5b.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert5b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert5b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert5b.adb?ref=980a05010bfa731a05dc11e44ce4126f6b6021f2", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do run { target i?86-*-* x86_64-*-* alpha*-*-* ia64-*-* } }\n+\n+with Unchecked_Conversion;\n+\n+procedure Unchecked_Convert5b is\n+\n+  subtype c_1 is string(1..1);\n+\n+  function int2c1 is  -- { dg-warning \"different sizes\" }\n+    new unchecked_conversion (source => integer, target => c_1);\n+\n+  c1 : c_1;\n+\n+begin\n+\n+  c1 := int2c1(16#12#);\n+\n+  if c1 (1) /= ASCII.DC2 then\n+    raise Program_Error;\n+  end if;\n+\n+end;"}, {"sha": "a26a6a9b762a101146ea4b78e319426b65a46158", "filename": "gcc/testsuite/gnat.dg/unchecked_convert6.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert6.adb?ref=980a05010bfa731a05dc11e44ce4126f6b6021f2", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do run { target hppa*-*-* sparc*-*-* powerpc*-*-* } }\n+\n+with Unchecked_Conversion;\n+\n+procedure Unchecked_Convert6 is\n+\n+  subtype c_5 is string(1..5);\n+\n+  function int2c5 is  -- { dg-warning \"different sizes\" }\n+    new unchecked_conversion (source => integer, target => c_5);\n+\n+  c5 : c_5;\n+\n+begin\n+\n+  c5 := int2c5(16#12#);\n+\n+  if c5 (4) /= ASCII.DC2 then\n+    raise Program_Error;\n+  end if;\n+\n+end;"}, {"sha": "d696f7d5f09249dc8f80f2c84e618ac20ce26668", "filename": "gcc/testsuite/gnat.dg/unchecked_convert6b.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert6b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980a05010bfa731a05dc11e44ce4126f6b6021f2/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert6b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert6b.adb?ref=980a05010bfa731a05dc11e44ce4126f6b6021f2", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do run { target i?86-*-* x86_64-*-* alpha*-*-* ia64-*-* } }\n+\n+with Unchecked_Conversion;\n+\n+procedure Unchecked_Convert6b is\n+\n+  subtype c_5 is string(1..5);\n+\n+  function int2c5 is  -- { dg-warning \"different sizes\" }\n+    new unchecked_conversion (source => integer, target => c_5);\n+\n+  c5 : c_5;\n+\n+begin\n+\n+  c5 := int2c5(16#12#);\n+\n+  if c5 (1) /= ASCII.DC2 then\n+    raise Program_Error;\n+  end if;\n+\n+end;"}]}