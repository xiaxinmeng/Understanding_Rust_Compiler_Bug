{"sha": "15072eb1299f2e6f415798e4bbaf054ddc905645", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUwNzJlYjEyOTlmMmU2ZjQxNTc5OGU0YmJhZjA1NGRkYzkwNTY0NQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-09T17:11:18Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-09T17:11:18Z"}, "message": "defaults.h (MULTIPLE_SYMBOL_SPACES): Provide default.\n\n\t* defaults.h (MULTIPLE_SYMBOL_SPACES): Provide default.\n\t* config/arm/pecoff.h, config/i386/beos-elf.h\n\t* config/i386/cygming.h, config/i386/i386-interix.h:\n\tDefine MULTIPLE_SYMBOL_SPACES to 1, not nothing.  Remove\n\tcomment cloned from manual.\n\t* doc/tm.texi: Update description of MULTIPLE_SYMBOL_SPACES.\ncp:\n\t* decl2.c (import_export_class)\n\t* lex.c (handle_pragma_interface):\n\tTest MULTIPLE_SYMBOL_SPACES with if, not #ifdef.\n\nFrom-SVN: r87243", "tree": {"sha": "22dfd0c501438c728e2e20b8cf0e2db8c8e0cfb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22dfd0c501438c728e2e20b8cf0e2db8c8e0cfb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15072eb1299f2e6f415798e4bbaf054ddc905645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15072eb1299f2e6f415798e4bbaf054ddc905645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15072eb1299f2e6f415798e4bbaf054ddc905645", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15072eb1299f2e6f415798e4bbaf054ddc905645/comments", "author": null, "committer": null, "parents": [{"sha": "c2433d7d163406078b767dcc45c9426a089ce91a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2433d7d163406078b767dcc45c9426a089ce91a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2433d7d163406078b767dcc45c9426a089ce91a"}], "stats": {"total": 75, "additions": 43, "deletions": 32}, "files": [{"sha": "bf58622e8fa4070c92b908071ab828c93495f374", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15072eb1299f2e6f415798e4bbaf054ddc905645", "patch": "@@ -1,3 +1,12 @@\n+2004-09-09  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* defaults.h (MULTIPLE_SYMBOL_SPACES): Provide default.\n+\t* config/arm/pecoff.h, config/i386/beos-elf.h\n+\t* config/i386/cygming.h, config/i386/i386-interix.h:\n+\tDefine MULTIPLE_SYMBOL_SPACES to 1, not nothing.  Remove\n+\tcomment cloned from manual.\n+\t* doc/tm.texi: Update description of MULTIPLE_SYMBOL_SPACES.\n+\n 2004-09-09  Frank Ch. Eigler  <fche@redhat.com>\n \n \t* builtins.c (build_va_arg_indirect_ref): New function.\n@@ -393,7 +402,7 @@\n \t(bdesc_int_void2arg, bdesc_prefetches): New arrays.\n \t(frv_init_builtins): Register the above builtins.\n \t(frv_int_to_acc): Use ACC_MASK to check for valid accumulator\n-\tregisters.  Turn the referenced accumulators into global registers.  \n+\tregisters.  Turn the referenced accumulators into global registers.\n \t(frv_read_iacc_argument): New function.\n \t(frv_expand_int_void2arg, frv_expand_prefetches): New functions.\n \t(frv_split_iacc_move): New function."}, {"sha": "afaade2cb61629c4576191a4402f0fc3efa0ee6f", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=15072eb1299f2e6f415798e4bbaf054ddc905645", "patch": "@@ -78,11 +78,8 @@\n   call_used_regs [11] = 1;\n \n \f\n-/* Define this macro if in some cases global symbols from one translation\n-   unit may not be bound to undefined symbols in another translation unit\n-   without user intervention.  For instance, under Microsoft Windows\n-   symbols must be explicitly imported from shared libraries (DLLs).  */\n-#define MULTIPLE_SYMBOL_SPACES\n+/* PE/COFF uses explicit import from shared libraries.  */\n+#define MULTIPLE_SYMBOL_SPACES 1\n \n #define TARGET_ASM_UNIQUE_SECTION arm_pe_unique_section\n #define TARGET_ASM_FUNCTION_RODATA_SECTION default_no_function_rodata_section"}, {"sha": "23b3a22921da4c50cf49defe59ebc36a3b495725", "filename": "gcc/config/i386/beos-elf.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-elf.h?ref=15072eb1299f2e6f415798e4bbaf054ddc905645", "patch": "@@ -235,8 +235,5 @@ Boston, MA 02111-1307, USA.  */\n /* BeOS headers are C++-aware (and often use C++).  */\n #define NO_IMPLICIT_EXTERN_C\n \n-/* Define this macro if in some cases global symbols from one translation\n-   unit may not be bound to undefined symbols in another translation unit\n-   without user intervention.  For instance, under Microsoft Windows\n-   symbols must be explicitly imported from shared libraries (DLLs).  */\n-#define MULTIPLE_SYMBOL_SPACES\n+/* BeOS uses explicit import from shared libraries.  */\n+#define MULTIPLE_SYMBOL_SPACES 1"}, {"sha": "a54e8a9718b9d326b3567ae8c2cb6086053bb238", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=15072eb1299f2e6f415798e4bbaf054ddc905645", "patch": "@@ -258,11 +258,8 @@ do {\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n     if ((LOG)!=0) fprintf ((FILE), \"\\t.align %d\\n\", 1<<(LOG))\n \n-/* Define this macro if in some cases global symbols from one translation\n-   unit may not be bound to undefined symbols in another translation unit\n-   without user intervention.  For instance, under Microsoft Windows\n-   symbols must be explicitly imported from shared libraries (DLLs).  */\n-#define MULTIPLE_SYMBOL_SPACES\n+/* Windows uses explicit import from shared libraries.  */\n+#define MULTIPLE_SYMBOL_SPACES 1\n \n extern void i386_pe_unique_section (TREE, int);\n #define TARGET_ASM_UNIQUE_SECTION i386_pe_unique_section"}, {"sha": "5d2d72f27f861d91a5ff5b58008bd216aee5b828", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=15072eb1299f2e6f415798e4bbaf054ddc905645", "patch": "@@ -337,11 +337,8 @@ while (0)\n    .data$ sections correctly. See corresponding note in i386/interix.c. \n    MK.  */\n \n-/* Define this macro if in some cases global symbols from one translation\n-   unit may not be bound to undefined symbols in another translation unit\n-   without user intervention.  For instance, under Microsoft Windows\n-   symbols must be explicitly imported from shared libraries (DLLs).  */\n-#define MULTIPLE_SYMBOL_SPACES\n+/* Interix uses explicit import from shared libraries.  */\n+#define MULTIPLE_SYMBOL_SPACES 1\n \n extern void i386_pe_unique_section (tree, int);\n #define TARGET_ASM_UNIQUE_SECTION i386_pe_unique_section"}, {"sha": "9bd87e1aad40974f731d0b06115257f472f69778", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=15072eb1299f2e6f415798e4bbaf054ddc905645", "patch": "@@ -1,3 +1,9 @@\n+2004-09-09  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* decl2.c (import_export_class)\n+\t* lex.c (handle_pragma_interface):\n+\tTest MULTIPLE_SYMBOL_SPACES with if, not #ifdef.\n+\n 2004-09-08  Ziemowit Laski  <zlaski@apple.com>\n \n \t* Make-lang.in (cp/semantics.o): Depend on c-common.h."}, {"sha": "bb3e4e89def1c2ffcded53ac84099681bfce3e4c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=15072eb1299f2e6f415798e4bbaf054ddc905645", "patch": "@@ -1438,7 +1438,7 @@ import_export_class (tree ctype)\n   if (CLASSTYPE_INTERFACE_KNOWN (ctype))\n     return;\n \n-  /* If MULTIPLE_SYMBOL_SPACES is defined and we saw a #pragma interface,\n+  /* If MULTIPLE_SYMBOL_SPACES is set and we saw a #pragma interface,\n      we will have CLASSTYPE_INTERFACE_ONLY set but not\n      CLASSTYPE_INTERFACE_KNOWN.  In that case, we don't want to use this\n      heuristic because someone will supply a #pragma implementation\n@@ -1472,10 +1472,10 @@ import_export_class (tree ctype)\n \timport_export = (DECL_REALLY_EXTERN (method) ? -1 : 1);\n     }\n \n-#ifdef MULTIPLE_SYMBOL_SPACES\n-  if (import_export == -1)\n+  /* When MULTIPLE_SYMBOL_SPACES is set, we cannot count on seeing\n+     a definition anywhere else.  */\n+  if (MULTIPLE_SYMBOL_SPACES && import_export == -1)\n     import_export = 0;\n-#endif\n \n   /* Allow backends the chance to overrule the decision.  */\n   if (targetm.cxx.import_export_class)"}, {"sha": "2a48d995a0ed77e30892786c2be2845a7e635a31", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=15072eb1299f2e6f415798e4bbaf054ddc905645", "patch": "@@ -505,9 +505,9 @@ handle_pragma_interface (cpp_reader* dfile ATTRIBUTE_UNUSED )\n     }\n \n   interface_only = interface_strcmp (main_filename);\n-#ifdef MULTIPLE_SYMBOL_SPACES\n-  if (! interface_only)\n-#endif\n+  /* If MULTIPLE_SYMBOL_SPACES is set, we cannot assume that we can see\n+     a definition in another file.  */\n+  if (!MULTIPLE_SYMBOL_SPACES || !interface_only)\n     interface_unknown = 0;\n \n   finfo->interface_only = interface_only;"}, {"sha": "849e5a96b5064fae7d857da33ea67a08b522e642", "filename": "gcc/defaults.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=15072eb1299f2e6f415798e4bbaf054ddc905645", "patch": "@@ -291,6 +291,11 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n # define USE_COMMON_FOR_ONE_ONLY 1\n #endif\n \n+/* By default we can assume that all global symbols are in one namespace,\n+   across all shared libraries.  */\n+#ifndef MULTIPLE_SYMBOL_SPACES\n+# define MULTIPLE_SYMBOL_SPACES 0\n+#endif\n \n /* If the target supports init_priority C++ attribute, give\n    SUPPORTS_INIT_PRIORITY a nonzero value.  */"}, {"sha": "df72053313d9734b8374d38c26c40e004ac44ff3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15072eb1299f2e6f415798e4bbaf054ddc905645/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=15072eb1299f2e6f415798e4bbaf054ddc905645", "patch": "@@ -9114,10 +9114,13 @@ You need not define this macro if it would always return zero.\n @end defmac\n \n @defmac MULTIPLE_SYMBOL_SPACES\n-Define this macro if in some cases global symbols from one translation\n-unit may not be bound to undefined symbols in another translation unit\n-without user intervention.  For instance, under Microsoft Windows\n-symbols must be explicitly imported from shared libraries (DLLs).\n+Define this macro as a C expression that is nonzero if, in some cases,\n+global symbols from one translation unit may not be bound to undefined\n+symbols in another translation unit without user intervention.  For\n+instance, under Microsoft Windows symbols must be explicitly imported\n+from shared libraries (DLLs).\n+\n+You need not define this macro if it would always evaluate to zero.\n @end defmac\n \n @deftypefn {Target Hook} tree TARGET_MD_ASM_CLOBBERS (tree @var{clobbers})"}]}