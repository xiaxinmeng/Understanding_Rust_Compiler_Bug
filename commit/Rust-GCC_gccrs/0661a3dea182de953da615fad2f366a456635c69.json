{"sha": "0661a3dea182de953da615fad2f366a456635c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY2MWEzZGVhMTgyZGU5NTNkYTYxNWZhZDJmMzY2YTQ1NjYzNWM2OQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-09T19:50:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-09T19:50:55Z"}, "message": "(expand_twoval_binop): Use convert_modes.\n\n(expand_complex_abs): Likewise.\n(emit_cmp_insn): Likewise.\n(expand_inline_function): Likewise.\n\n(widen_operand): New arg OLDMODE.\n(expand_binop, expand_unop): Fix calls to widen_operand.\n\nFrom-SVN: r5296", "tree": {"sha": "f2d61b7cbca5b7ae1588d53b4304215023af95d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2d61b7cbca5b7ae1588d53b4304215023af95d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0661a3dea182de953da615fad2f366a456635c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0661a3dea182de953da615fad2f366a456635c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0661a3dea182de953da615fad2f366a456635c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0661a3dea182de953da615fad2f366a456635c69/comments", "author": null, "committer": null, "parents": [{"sha": "81722fa979363c046801022c0c2c517f6ce3f0f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81722fa979363c046801022c0c2c517f6ce3f0f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81722fa979363c046801022c0c2c517f6ce3f0f7"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "9f1442761b7e1a04347bd9f059b11cce8670be2a", "filename": "gcc/optabs.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0661a3dea182de953da615fad2f366a456635c69/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0661a3dea182de953da615fad2f366a456635c69/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=0661a3dea182de953da615fad2f366a456635c69", "patch": "@@ -281,9 +281,9 @@ add_equal_note (seq, target, code, op0, op1)\n    of logical operations, but not right shifts.  */\n \n static rtx\n-widen_operand (op, mode, unsignedp, no_extend)\n+widen_operand (op, mode, oldmode, unsignedp, no_extend)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode, oldmode;\n      int unsignedp;\n      int no_extend;\n {\n@@ -295,7 +295,7 @@ widen_operand (op, mode, unsignedp, no_extend)\n   if (! no_extend\n       || GET_MODE (op) == VOIDmode\n       || (GET_CODE (op) == SUBREG && SUBREG_PROMOTED_VAR_P (op)))\n-    return convert_to_mode (mode, op, unsignedp);\n+    return convert_modes (mode, oldmode, op, unsignedp);\n \n   /* If MODE is no wider than a single word, we return a paradoxical\n      SUBREG.  */\n@@ -525,10 +525,10 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t\t&& class == MODE_INT)\n \t      no_extend = 1;\n \n-\t    xop0 = widen_operand (xop0, wider_mode, unsignedp, no_extend);\n+\t    xop0 = widen_operand (xop0, wider_mode, mode, unsignedp, no_extend);\n \n \t    /* The second operand of a shift must always be extended.  */\n-\t    xop1 = widen_operand (xop1, wider_mode, unsignedp,\n+\t    xop1 = widen_operand (xop1, wider_mode, mode, unsignedp,\n \t\t\t\t  no_extend && binoptab != ashl_optab\n \t\t\t\t  && binoptab != lshl_optab);\n \n@@ -1423,10 +1423,11 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t\t  && class == MODE_INT)\n \t\tno_extend = 1;\n \n-\t      xop0 = widen_operand (xop0, wider_mode, unsignedp, no_extend);\n+\t      xop0 = widen_operand (xop0, wider_mode, mode,\n+\t\t\t\t    unsignedp, no_extend);\n \n \t      /* The second operand of a shift must always be extended.  */\n-\t      xop1 = widen_operand (xop1, wider_mode, unsignedp,\n+\t      xop1 = widen_operand (xop1, wider_mode, mode, unsignedp,\n \t\t\t\t    no_extend && binoptab != ashl_optab\n \t\t\t\t    && binoptab != lshl_optab);\n \n@@ -1622,10 +1623,10 @@ expand_twoval_binop (binoptab, op0, op1, targ0, targ1, unsignedp)\n \t      register rtx t1 = gen_reg_rtx (wider_mode);\n \n \t      if (expand_twoval_binop (binoptab,\n-\t\t\t\t       convert_to_mode (wider_mode, op0,\n-\t\t\t\t\t\t\tunsignedp),\n-\t\t\t\t       convert_to_mode (wider_mode, op1,\n-\t\t\t\t\t\t\tunsignedp),\n+\t\t\t\t       convert_modes (wider_mode, mode, op0,\n+\t\t\t\t\t\t      unsignedp),\n+\t\t\t\t       convert_modes (wider_mode, mode, op1,\n+\t\t\t\t\t\t      unsignedp),\n \t\t\t\t       t0, t1, unsignedp))\n \t\t{\n \t\t  convert_move (targ0, t0, unsignedp);\n@@ -1734,7 +1735,7 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n \t       the narrow operand, as long as we will truncate the\n \t       results to the same narrowness.  */\n \n-\t    xop0 = widen_operand (xop0, wider_mode, unsignedp,\n+\t    xop0 = widen_operand (xop0, wider_mode, mode, unsignedp,\n \t\t\t\t  (unoptab == neg_optab\n \t\t\t\t   || unoptab == one_cmpl_optab)\n \t\t\t\t  && class == MODE_INT);\n@@ -1875,7 +1876,7 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n \t\t the narrow operand, as long as we will truncate the\n \t\t results to the same narrowness.  */\n \n-\t      xop0 = widen_operand (xop0, wider_mode, unsignedp,\n+\t      xop0 = widen_operand (xop0, wider_mode, mode, unsignedp,\n \t\t\t\t    (unoptab == neg_optab\n \t\t\t\t     || unoptab == one_cmpl_optab)\n \t\t\t\t    && class == MODE_INT);\n@@ -1998,7 +1999,7 @@ expand_complex_abs (mode, op0, target, unsignedp)\n \t{\n \t  rtx xop0 = op0;\n \n-\t  xop0 = convert_to_mode (wider_mode, xop0, unsignedp);\n+\t  xop0 = convert_modes (wider_mode, mode, xop0, unsignedp);\n \t  temp = expand_complex_abs (wider_mode, xop0, NULL_RTX, unsignedp);\n \n \t  if (temp)\n@@ -2073,7 +2074,7 @@ expand_complex_abs (mode, op0, target, unsignedp)\n \t{\n \t  rtx xop0 = op0;\n \n-\t  xop0 = convert_to_mode (wider_mode, xop0, unsignedp);\n+\t  xop0 = convert_modes (wider_mode, mode, xop0, unsignedp);\n \n \t  temp = expand_complex_abs (wider_mode, xop0, NULL_RTX, unsignedp);\n \n@@ -2558,8 +2559,8 @@ emit_cmp_insn (x, y, comparison, size, mode, unsignedp, align)\n \t    {\n \t      x = protect_from_queue (x, 0);\n \t      y = protect_from_queue (y, 0);\n-\t      x = convert_to_mode (wider_mode, x, unsignedp);\n-\t      y = convert_to_mode (wider_mode, y, unsignedp);\n+\t      x = convert_modes (wider_mode, mode, x, unsignedp);\n+\t      y = convert_modes (wider_mode, mode, y, unsignedp);\n \t      emit_cmp_insn (x, y, comparison, NULL_RTX,\n \t\t\t     wider_mode, unsignedp, align);\n \t      return;"}]}