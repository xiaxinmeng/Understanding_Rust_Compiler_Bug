{"sha": "cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0ZWJlN2Q2NTNmZDllNzZiOTViZDNkNzM0ZjFmYWViMzRlNmQ0OA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2007-08-09T22:42:11Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2007-08-09T22:42:11Z"}, "message": "mips.opt (mhard-float, [...]): Make these control TARGET_HARD_FLOAT_ABI and TARGET_SOFT_FLOAT_ABI...\n\n2007-08-09  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/mips/mips.opt (mhard-float, msoft-float):  Make these\n\tcontrol TARGET_HARD_FLOAT_ABI and TARGET_SOFT_FLOAT_ABI, rather\n\tthan TARGET_HARD_FLOAT and TARGET_SOFT_FLOAT.  \n\t* config/mips/mips.h (mips16_hard_float): Delete.\n\t(TARGET_HARD_FLOAT_ABI, TARGET_SOFT_FLOAT_ABI):  Delete these\n\tdefinitions, and replace with....\n\t(TARGET_HARD_FLOAT, TARGET_SOFT_FLOAT): Define.\n\t* config/mips/mips.c (mips16_hard_float): Delete.  Replace\n\tall references with (TARGET_MIPS16 && TARGET_HARD_FLOAT_ABI).\n\t(MIPS_MARCH_CONTROLS_SOFT_FLOAT): Update comments.\n\t(override_options):  Replace MASK_SOFT_FLOAT references with\n\tMASK_SOFT_FLOAT_ABI.  Delete twiddling with MASK_SOFT_FLOAT\n\tand mips16_hard_float when TARGET_MIPS16.\n\nFrom-SVN: r127325", "tree": {"sha": "b32b1b83c82ae9777421f9b01ad4eac7070ec38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b32b1b83c82ae9777421f9b01ad4eac7070ec38f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2df0359e66439d94c4d0ba8a053cbe644ce2f09"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "a62a76c121505444f60689f4d59a9a249560b2b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48", "patch": "@@ -1,3 +1,19 @@\n+2007-08-09  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/mips/mips.opt (mhard-float, msoft-float):  Make these\n+\tcontrol TARGET_HARD_FLOAT_ABI and TARGET_SOFT_FLOAT_ABI, rather\n+\tthan TARGET_HARD_FLOAT and TARGET_SOFT_FLOAT.  \n+\t* config/mips/mips.h (mips16_hard_float): Delete.\n+\t(TARGET_HARD_FLOAT_ABI, TARGET_SOFT_FLOAT_ABI):  Delete these\n+\tdefinitions, and replace with....\n+\t(TARGET_HARD_FLOAT, TARGET_SOFT_FLOAT): Define.\n+\t* config/mips/mips.c (mips16_hard_float): Delete.  Replace\n+\tall references with (TARGET_MIPS16 && TARGET_HARD_FLOAT_ABI).\n+\t(MIPS_MARCH_CONTROLS_SOFT_FLOAT): Update comments.\n+\t(override_options):  Replace MASK_SOFT_FLOAT references with\n+\tMASK_SOFT_FLOAT_ABI.  Delete twiddling with MASK_SOFT_FLOAT\n+\tand mips16_hard_float when TARGET_MIPS16.\n+\t\n 2007-08-09  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR c/32796"}, {"sha": "ccd93fb7af0566421ab234591d5f53f667df546b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48", "patch": "@@ -619,12 +619,6 @@ const struct mips_rtx_cost_data *mips_cost;\n /* The -mtext-loads setting.  */\n enum mips_code_readable_setting mips_code_readable = CODE_READABLE_YES;\n \n-/* Whether we are generating mips16 hard float code.  In mips16 mode\n-   we always set TARGET_SOFT_FLOAT; this variable is nonzero if\n-   -msoft-float was not specified by the user, which means that we\n-   should arrange to call mips32 hard floating point code.  */\n-int mips16_hard_float;\n-\n /* The architecture selected by -mipsN.  */\n static const struct mips_cpu_info *mips_isa_info;\n \n@@ -1203,7 +1197,8 @@ static const unsigned char mips16e_save_restore_regs[] = {\n   31, 30, 23, 22, 21, 20, 19, 18, 17, 16, 7, 6, 5, 4\n };\n \f\n-/* Nonzero if -march should decide the default value of MASK_SOFT_FLOAT.  */\n+/* Nonzero if -march should decide the default value of\n+   MASK_SOFT_FLOAT_ABI.  */\n #ifndef MIPS_MARCH_CONTROLS_SOFT_FLOAT\n #define MIPS_MARCH_CONTROLS_SOFT_FLOAT 0\n #endif\n@@ -3729,7 +3724,8 @@ mips_expand_call (rtx result, rtx addr, rtx args_size, rtx aux, int sibcall_p)\n       mips_load_call_address (addr, orig_addr, sibcall_p);\n     }\n \n-  if (mips16_hard_float\n+  if (TARGET_MIPS16\n+      && TARGET_HARD_FLOAT_ABI\n       && build_mips16_call_stub (result, addr, args_size,\n \t\t\t\t aux == 0 ? 0 : (int) GET_MODE (aux)))\n     return;\n@@ -5181,21 +5177,21 @@ override_options (void)\n     }\n \n   if (MIPS_MARCH_CONTROLS_SOFT_FLOAT\n-      && (target_flags_explicit & MASK_SOFT_FLOAT) == 0)\n+      && (target_flags_explicit & MASK_SOFT_FLOAT_ABI) == 0)\n     {\n       /* For some configurations, it is useful to have -march control\n-\t the default setting of MASK_SOFT_FLOAT.  */\n+\t the default setting of MASK_SOFT_FLOAT_ABI.  */\n       switch ((int) mips_arch)\n \t{\n \tcase PROCESSOR_R4100:\n \tcase PROCESSOR_R4111:\n \tcase PROCESSOR_R4120:\n \tcase PROCESSOR_R4130:\n-\t  target_flags |= MASK_SOFT_FLOAT;\n+\t  target_flags |= MASK_SOFT_FLOAT_ABI;\n \t  break;\n \n \tdefault:\n-\t  target_flags &= ~MASK_SOFT_FLOAT;\n+\t  target_flags &= ~MASK_SOFT_FLOAT_ABI;\n \t  break;\n \t}\n     }\n@@ -5278,16 +5274,8 @@ override_options (void)\n   if (optimize > 2 && (target_flags_explicit & MASK_VR4130_ALIGN) == 0)\n     target_flags |= MASK_VR4130_ALIGN;\n \n-  /* When compiling for the mips16, we cannot use floating point.  We\n-     record the original hard float value in mips16_hard_float.  */\n   if (TARGET_MIPS16)\n     {\n-      if (TARGET_SOFT_FLOAT)\n-\tmips16_hard_float = 0;\n-      else\n-\tmips16_hard_float = 1;\n-      target_flags |= MASK_SOFT_FLOAT;\n-\n       /* Don't run the scheduler before reload, since it tends to\n          increase register pressure.  */\n       flag_schedule_insns = 0;\n@@ -6717,7 +6705,8 @@ static bool\n mips16_cfun_returns_in_fpr_p (void)\n {\n   tree return_type = DECL_RESULT (current_function_decl);\n-  return (mips16_hard_float\n+  return (TARGET_MIPS16\n+\t  && TARGET_HARD_FLOAT_ABI\n \t  && !aggregate_value_p (return_type, current_function_decl)\n  \t  && mips_return_mode_in_fpr_p (DECL_MODE (return_type)));\n }\n@@ -7205,7 +7194,8 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n      floating point arguments.  The linker will arrange for any 32-bit\n      functions to call this stub, which will then jump to the 16-bit\n      function proper.  */\n-  if (mips16_hard_float\n+  if (TARGET_MIPS16\n+      && TARGET_HARD_FLOAT_ABI\n       && current_function_args_info.fp_code != 0)\n     build_mips16_function_stub (file);\n \n@@ -9141,7 +9131,7 @@ build_mips16_call_stub (rtx retval, rtx fn, rtx arg_size, int fp_code)\n \n   /* We don't need to do anything if we aren't in mips16 mode, or if\n      we were invoked with the -msoft-float option.  */\n-  if (!mips16_hard_float)\n+  if (!TARGET_MIPS16 || TARGET_SOFT_FLOAT_ABI)\n     return 0;\n \n   /* Figure out whether the value might come back in a floating point\n@@ -10211,7 +10201,7 @@ mips_init_libfuncs (void)\n       set_optab_libfunc (smod_optab, SImode, \"__vr4120_modsi3\");\n     }\n \n-  if (mips16_hard_float)\n+  if (TARGET_MIPS16 && TARGET_HARD_FLOAT_ABI)\n     {\n       set_optab_libfunc (add_optab, SFmode, \"__mips16_addsf3\");\n       set_optab_libfunc (sub_optab, SFmode, \"__mips16_subsf3\");"}, {"sha": "7c2f548c3ad43c72963746700ac0b58b64211dae", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48", "patch": "@@ -140,7 +140,6 @@ extern enum processor_type mips_arch;   /* which cpu to codegen for */\n extern enum processor_type mips_tune;   /* which cpu to schedule for */\n extern int mips_isa;\t\t\t/* architectural level */\n extern int mips_abi;\t\t\t/* which ABI to use */\n-extern int mips16_hard_float;\t\t/* mips16 without -msoft-float */\n extern const struct mips_cpu_info mips_cpu_info_table[];\n extern const struct mips_cpu_info *mips_arch_info;\n extern const struct mips_cpu_info *mips_tune_info;\n@@ -316,11 +315,13 @@ extern enum mips_code_readable_setting mips_code_readable;\n #define TARGET_OLDABI\t\t    (mips_abi == ABI_32 || mips_abi == ABI_O64)\n #define TARGET_NEWABI\t\t    (mips_abi == ABI_N32 || mips_abi == ABI_64)\n \n-/* Similar to TARGET_HARD_FLOAT and TARGET_SOFT_FLOAT, but reflect the ABI\n-   in use rather than whether the FPU is directly accessible.  */\n-#define TARGET_HARD_FLOAT_ABI (TARGET_HARD_FLOAT || mips16_hard_float)\n-#define TARGET_SOFT_FLOAT_ABI (!TARGET_HARD_FLOAT_ABI)\n-\n+/* TARGET_HARD_FLOAT and TARGET_SOFT_FLOAT reflect whether the FPU is\n+   directly accessible, while the command-line options select\n+   TARGET_HARD_FLOAT_ABI and TARGET_SOFT_FLOAT_ABI to reflect the ABI\n+   in use.  */\n+#define TARGET_HARD_FLOAT (TARGET_HARD_FLOAT_ABI && !TARGET_MIPS16)\n+#define TARGET_SOFT_FLOAT (TARGET_SOFT_FLOAT_ABI || TARGET_MIPS16)\n+  \n /* IRIX specific stuff.  */\n #define TARGET_IRIX\t   0\n #define TARGET_IRIX6\t   0"}, {"sha": "4a752ec3987c1d9360f801f787c84986d194376d", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=cc4ebe7d653fd9e76b95bd3d734f1faeb34e6d48", "patch": "@@ -145,8 +145,8 @@ Target Report RejectNegative Mask(64BIT)\n Use 64-bit general registers\n \n mhard-float\n-Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n-Allow the use of hardware floating-point instructions\n+Target Report RejectNegative InverseMask(SOFT_FLOAT_ABI, HARD_FLOAT_ABI)\n+Allow the use of hardware floating-point ABI and instructions\n \n mips\n Target RejectNegative Joined\n@@ -217,7 +217,7 @@ Target Report RejectNegative Mask(SMARTMIPS)\n Use SmartMIPS instructions\n \n msoft-float\n-Target Report RejectNegative Mask(SOFT_FLOAT)\n+Target Report RejectNegative Mask(SOFT_FLOAT_ABI)\n Prevent the use of all hardware floating-point instructions\n \n msplit-addresses"}]}