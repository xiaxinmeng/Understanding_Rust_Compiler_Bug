{"sha": "cd459bf87c0662db04a840f15d2e914f1ae536fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q0NTliZjg3YzA2NjJkYjA0YTg0MGYxNWQyZTkxNGYxYWU1MzZmYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-19T20:36:20Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-19T20:36:20Z"}, "message": "emit_* functions return rtx_insn\n\n2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n\n\t* emit-rtl.h (emit_copy_of_insn_after): Strengthen return type\n\tfrom rtx to rtx_insn *.\n\n\t* rtl.h (emit_insn_before): Likewise.\n\t(emit_insn_before_noloc): Likewise.\n\t(emit_insn_before_setloc): Likewise.\n\t(emit_jump_insn_before): Likewise.\n\t(emit_jump_insn_before_noloc): Likewise.\n\t(emit_jump_insn_before_setloc): Likewise.\n\t(emit_call_insn_before): Likewise.\n\t(emit_call_insn_before_noloc): Likewise.\n\t(emit_call_insn_before_setloc): Likewise.\n\t(emit_debug_insn_before): Likewise.\n\t(emit_debug_insn_before_noloc): Likewise.\n\t(emit_debug_insn_before_setloc): Likewise.\n\t(emit_label_before): Likewise.\n\t(emit_insn_after): Likewise.\n\t(emit_insn_after_noloc): Likewise.\n\t(emit_insn_after_setloc): Likewise.\n\t(emit_jump_insn_after): Likewise.\n\t(emit_jump_insn_after_noloc): Likewise.\n\t(emit_jump_insn_after_setloc): Likewise.\n\t(emit_call_insn_after): Likewise.\n\t(emit_call_insn_after_noloc): Likewise.\n\t(emit_call_insn_after_setloc): Likewise.\n\t(emit_debug_insn_after): Likewise.\n\t(emit_debug_insn_after_noloc): Likewise.\n\t(emit_debug_insn_after_setloc): Likewise.\n\t(emit_label_after): Likewise.\n\t(emit_insn): Likewise.\n\t(emit_debug_insn): Likewise.\n\t(emit_jump_insn): Likewise.\n\t(emit_call_insn): Likewise.\n\t(emit_label): Likewise.\n\t(gen_clobber): Likewise.\n\t(emit_clobber): Likewise.\n\t(gen_use): Likewise.\n\t(emit_use): Likewise.\n\t(emit): Likewise.\n\n\t(emit_barrier_before): Strengthen return type from rtx to\n\trtx_barrier *.\n\t(emit_barrier_after): Likewise.\n\t(emit_barrier): Likewise.\n\n\t* emit-rtl.c (emit_pattern_before_noloc):  Strengthen return type\n\tfrom rtx to rtx_insn *.  Add checked casts for now when converting\n\t\"last\" from rtx to rtx_insn *.\n\t(emit_insn_before_noloc): Likewise for return type.\n\t(emit_jump_insn_before_noloc): Likewise.\n\t(emit_call_insn_before_noloc): Likewise.\n\t(emit_debug_insn_before_noloc): Likewise.\n\t(emit_barrier_before): Strengthen return type and local \"insn\"\n\tfrom rtx to rtx_barrier *.\n\t(emit_label_before): Strengthen return type from rtx to\n\trtx_insn *.  Add checked cast for now when returning param\n\t(emit_pattern_after_noloc): Strengthen return type from rtx to\n\trtx_insn *.  Add checked casts for now when converting \"last\" from\n\trtx to rtx_insn *.\n\t(emit_insn_after_noloc): Strengthen return type from rtx to\n\trtx_insn *.\n\t(emit_jump_insn_after_noloc): Likewise.\n\t(emit_call_insn_after_noloc): Likewise.\n\t(emit_debug_insn_after_noloc): Likewise.\n\t(emit_barrier_after): Strengthen return type from rtx to\n\trtx_barrier *.\n\t(emit_label_after): Strengthen return type from rtx to rtx_insn *.\n\tAdd checked cast for now when converting \"label\" from rtx to\n\trtx_insn *.\n\t(emit_pattern_after_setloc): Strengthen return type from rtx to\n\trtx_insn *.  Add checked casts for now when converting \"last\" from\n\trtx to rtx_insn *.\n\t(emit_pattern_after): Strengthen return type from rtx to\n\trtx_insn *.\n\t(emit_insn_after_setloc): Likewise.\n\t(emit_insn_after): Likewise.\n\t(emit_jump_insn_after_setloc): Likewise.\n\t(emit_jump_insn_after): Likewise.\n\t(emit_call_insn_after_setloc): Likewise.\n\t(emit_call_insn_after): Likewise.\n\t(emit_debug_insn_after_setloc): Likewise.\n\t(emit_debug_insn_after): Likewise.\n\t(emit_pattern_before_setloc): Likewise.  Add checked casts for now\n\twhen converting \"last\" from rtx to rtx_insn *.\n\t(emit_pattern_before): Strengthen return type from rtx to\n\trtx_insn *.\n\t(emit_insn_before_setloc): Likewise.\n\t(emit_insn_before): Likewise.\n\t(emit_jump_insn_before_setloc): Likewise.\n\t(emit_jump_insn_before): Likewise.\n\t(emit_call_insn_before_setloc): Likewise.\n\t(emit_call_insn_before): Likewise.\n\t(emit_debug_insn_before_setloc): Likewise.\n\t(emit_debug_insn_before): Likewise.\n\t(emit_insn): Strengthen return type and locals \"last\", \"insn\",\n\t\"next\" from rtx to rtx_insn *.  Add checked cast to rtx_insn\n\twithin cases where we know we have an insn.\n\t(emit_debug_insn): Likewise.\n\t(emit_jump_insn): Likewise.\n\t(emit_call_insn): Strengthen return type and local \"insn\" from rtx\n\tto rtx_insn *.\n\t(emit_label): Strengthen return type from rtx to rtx_insn *.  Add\n\ta checked cast to rtx_insn * for now on \"label\".\n\t(emit_barrier): Strengthen return type from rtx to rtx_barrier *.\n\t(emit_clobber): Strengthen return type from rtx to rtx_insn *.\n\t(emit_use): Likewise.\n\t(gen_use): Likewise, also for local \"seq\".\n\t(emit): Likewise for return type and local \"insn\".\n\t(rtx_insn): Likewise for return type and local \"new_rtx\".\n\n\t* cfgrtl.c (emit_barrier_after_bb): Strengthen local \"barrier\"\n\tfrom rtx to rtx_barrier *.\n\n\t* config/sh/sh.c (output_stack_adjust): Since emit_insn has\n\tchanged return type from rtx to rtx_insn *, we must update\n\t\"emit_fn\" type, and this in turn means updating...\n\t(frame_insn): ...this.  Strengthen return type from rtx to\n\trtx_insn *.  Introduce a new local \"insn\" of the appropriate type.\n\nFrom-SVN: r214194", "tree": {"sha": "359a8dcac57c8493b0520b772d31a54bee13e562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/359a8dcac57c8493b0520b772d31a54bee13e562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd459bf87c0662db04a840f15d2e914f1ae536fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd459bf87c0662db04a840f15d2e914f1ae536fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd459bf87c0662db04a840f15d2e914f1ae536fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd459bf87c0662db04a840f15d2e914f1ae536fa/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4598afdd15d5daf47de645ef6269a5efb467c389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4598afdd15d5daf47de645ef6269a5efb467c389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4598afdd15d5daf47de645ef6269a5efb467c389"}], "stats": {"total": 369, "additions": 246, "deletions": 123}, "files": [{"sha": "f5e79a31a221577e6f83118c79b52d2f3d44d222", "filename": "gcc/ChangeLog", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd459bf87c0662db04a840f15d2e914f1ae536fa", "patch": "@@ -1,3 +1,124 @@\n+2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* emit-rtl.h (emit_copy_of_insn_after): Strengthen return type\n+\tfrom rtx to rtx_insn *.\n+\n+\t* rtl.h (emit_insn_before): Likewise.\n+\t(emit_insn_before_noloc): Likewise.\n+\t(emit_insn_before_setloc): Likewise.\n+\t(emit_jump_insn_before): Likewise.\n+\t(emit_jump_insn_before_noloc): Likewise.\n+\t(emit_jump_insn_before_setloc): Likewise.\n+\t(emit_call_insn_before): Likewise.\n+\t(emit_call_insn_before_noloc): Likewise.\n+\t(emit_call_insn_before_setloc): Likewise.\n+\t(emit_debug_insn_before): Likewise.\n+\t(emit_debug_insn_before_noloc): Likewise.\n+\t(emit_debug_insn_before_setloc): Likewise.\n+\t(emit_label_before): Likewise.\n+\t(emit_insn_after): Likewise.\n+\t(emit_insn_after_noloc): Likewise.\n+\t(emit_insn_after_setloc): Likewise.\n+\t(emit_jump_insn_after): Likewise.\n+\t(emit_jump_insn_after_noloc): Likewise.\n+\t(emit_jump_insn_after_setloc): Likewise.\n+\t(emit_call_insn_after): Likewise.\n+\t(emit_call_insn_after_noloc): Likewise.\n+\t(emit_call_insn_after_setloc): Likewise.\n+\t(emit_debug_insn_after): Likewise.\n+\t(emit_debug_insn_after_noloc): Likewise.\n+\t(emit_debug_insn_after_setloc): Likewise.\n+\t(emit_label_after): Likewise.\n+\t(emit_insn): Likewise.\n+\t(emit_debug_insn): Likewise.\n+\t(emit_jump_insn): Likewise.\n+\t(emit_call_insn): Likewise.\n+\t(emit_label): Likewise.\n+\t(gen_clobber): Likewise.\n+\t(emit_clobber): Likewise.\n+\t(gen_use): Likewise.\n+\t(emit_use): Likewise.\n+\t(emit): Likewise.\n+\n+\t(emit_barrier_before): Strengthen return type from rtx to\n+\trtx_barrier *.\n+\t(emit_barrier_after): Likewise.\n+\t(emit_barrier): Likewise.\n+\n+\t* emit-rtl.c (emit_pattern_before_noloc):  Strengthen return type\n+\tfrom rtx to rtx_insn *.  Add checked casts for now when converting\n+\t\"last\" from rtx to rtx_insn *.\n+\t(emit_insn_before_noloc): Likewise for return type.\n+\t(emit_jump_insn_before_noloc): Likewise.\n+\t(emit_call_insn_before_noloc): Likewise.\n+\t(emit_debug_insn_before_noloc): Likewise.\n+\t(emit_barrier_before): Strengthen return type and local \"insn\"\n+\tfrom rtx to rtx_barrier *.\n+\t(emit_label_before): Strengthen return type from rtx to\n+\trtx_insn *.  Add checked cast for now when returning param\n+\t(emit_pattern_after_noloc): Strengthen return type from rtx to\n+\trtx_insn *.  Add checked casts for now when converting \"last\" from\n+\trtx to rtx_insn *.\n+\t(emit_insn_after_noloc): Strengthen return type from rtx to\n+\trtx_insn *.\n+\t(emit_jump_insn_after_noloc): Likewise.\n+\t(emit_call_insn_after_noloc): Likewise.\n+\t(emit_debug_insn_after_noloc): Likewise.\n+\t(emit_barrier_after): Strengthen return type from rtx to\n+\trtx_barrier *.\n+\t(emit_label_after): Strengthen return type from rtx to rtx_insn *.\n+\tAdd checked cast for now when converting \"label\" from rtx to\n+\trtx_insn *.\n+\t(emit_pattern_after_setloc): Strengthen return type from rtx to\n+\trtx_insn *.  Add checked casts for now when converting \"last\" from\n+\trtx to rtx_insn *.\n+\t(emit_pattern_after): Strengthen return type from rtx to\n+\trtx_insn *.\n+\t(emit_insn_after_setloc): Likewise.\n+\t(emit_insn_after): Likewise.\n+\t(emit_jump_insn_after_setloc): Likewise.\n+\t(emit_jump_insn_after): Likewise.\n+\t(emit_call_insn_after_setloc): Likewise.\n+\t(emit_call_insn_after): Likewise.\n+\t(emit_debug_insn_after_setloc): Likewise.\n+\t(emit_debug_insn_after): Likewise.\n+\t(emit_pattern_before_setloc): Likewise.  Add checked casts for now\n+\twhen converting \"last\" from rtx to rtx_insn *.\n+\t(emit_pattern_before): Strengthen return type from rtx to\n+\trtx_insn *.\n+\t(emit_insn_before_setloc): Likewise.\n+\t(emit_insn_before): Likewise.\n+\t(emit_jump_insn_before_setloc): Likewise.\n+\t(emit_jump_insn_before): Likewise.\n+\t(emit_call_insn_before_setloc): Likewise.\n+\t(emit_call_insn_before): Likewise.\n+\t(emit_debug_insn_before_setloc): Likewise.\n+\t(emit_debug_insn_before): Likewise.\n+\t(emit_insn): Strengthen return type and locals \"last\", \"insn\",\n+\t\"next\" from rtx to rtx_insn *.  Add checked cast to rtx_insn\n+\twithin cases where we know we have an insn.\n+\t(emit_debug_insn): Likewise.\n+\t(emit_jump_insn): Likewise.\n+\t(emit_call_insn): Strengthen return type and local \"insn\" from rtx\n+\tto rtx_insn *.\n+\t(emit_label): Strengthen return type from rtx to rtx_insn *.  Add\n+\ta checked cast to rtx_insn * for now on \"label\".\n+\t(emit_barrier): Strengthen return type from rtx to rtx_barrier *.\n+\t(emit_clobber): Strengthen return type from rtx to rtx_insn *.\n+\t(emit_use): Likewise.\n+\t(gen_use): Likewise, also for local \"seq\".\n+\t(emit): Likewise for return type and local \"insn\".\n+\t(rtx_insn): Likewise for return type and local \"new_rtx\".\n+\n+\t* cfgrtl.c (emit_barrier_after_bb): Strengthen local \"barrier\"\n+\tfrom rtx to rtx_barrier *.\n+\n+\t* config/sh/sh.c (output_stack_adjust): Since emit_insn has\n+\tchanged return type from rtx to rtx_insn *, we must update\n+\t\"emit_fn\" type, and this in turn means updating...\n+\t(frame_insn): ...this.  Strengthen return type from rtx to\n+\trtx_insn *.  Introduce a new local \"insn\" of the appropriate type.\n+\n 2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* emit-rtl.c (emit_jump_table_data): Strengthen return type from"}, {"sha": "902de137120f150469efae149aa2fddc56245afd", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=cd459bf87c0662db04a840f15d2e914f1ae536fa", "patch": "@@ -1446,7 +1446,7 @@ rtl_redirect_edge_and_branch (edge e, basic_block target)\n void\n emit_barrier_after_bb (basic_block bb)\n {\n-  rtx barrier = emit_barrier_after (BB_END (bb));\n+  rtx_barrier *barrier = emit_barrier_after (BB_END (bb));\n   gcc_assert (current_ir_type () == IR_RTL_CFGRTL\n               || current_ir_type () == IR_RTL_CFGLAYOUT);\n   if (current_ir_type () == IR_RTL_CFGLAYOUT)"}, {"sha": "d927f6683f805180bcd9e0d1856f1f7ddcd3656f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=cd459bf87c0662db04a840f15d2e914f1ae536fa", "patch": "@@ -195,7 +195,7 @@ static rtx gen_block_redirect (rtx, int, int);\n static void sh_reorg (void);\n static void sh_option_override (void);\n static void output_stack_adjust (int, rtx, int, HARD_REG_SET *, bool);\n-static rtx frame_insn (rtx);\n+static rtx_insn *frame_insn (rtx);\n static rtx push (int);\n static void pop (int);\n static void push_regs (HARD_REG_SET *, int);\n@@ -6784,7 +6784,7 @@ static void\n output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t\t     HARD_REG_SET *live_regs_mask, bool frame_p)\n {\n-  rtx (*emit_fn) (rtx) = frame_p ? &frame_insn : &emit_insn;\n+  rtx_insn *(*emit_fn) (rtx) = frame_p ? &frame_insn : &emit_insn;\n   if (size)\n     {\n       HOST_WIDE_INT align = STACK_BOUNDARY / BITS_PER_UNIT;\n@@ -6944,12 +6944,12 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \n /* Emit the specified insn and mark it as frame related.\n    FIXME: Rename this to emit_frame_insn.  */\n-static rtx\n+static rtx_insn *\n frame_insn (rtx x)\n {\n-  x = emit_insn (x);\n-  RTX_FRAME_RELATED_P (x) = 1;\n-  return x;\n+  rtx_insn *insn = emit_insn (x);\n+  RTX_FRAME_RELATED_P (insn) = 1;\n+  return insn;\n }\n \n /* Output RTL to push register RN onto the stack.  */"}, {"sha": "ccfa22af48d5acfa61ad8948a3fed418494040e3", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 78, "deletions": 76, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=cd459bf87c0662db04a840f15d2e914f1ae536fa", "patch": "@@ -4269,7 +4269,7 @@ reorder_insns (rtx from, rtx to, rtx after)\n    SEQUENCE rtl results in much fragmented RTL memory since the SEQUENCE\n    generated would almost certainly die right after it was created.  */\n \n-static rtx\n+static rtx_insn *\n emit_pattern_before_noloc (rtx x, rtx before, rtx last, basic_block bb,\n                            rtx_insn *(*make_raw) (rtx))\n {\n@@ -4278,7 +4278,7 @@ emit_pattern_before_noloc (rtx x, rtx before, rtx last, basic_block bb,\n   gcc_assert (before);\n \n   if (x == NULL_RTX)\n-    return last;\n+    return safe_as_a <rtx_insn *> (last);\n \n   switch (GET_CODE (x))\n     {\n@@ -4311,12 +4311,12 @@ emit_pattern_before_noloc (rtx x, rtx before, rtx last, basic_block bb,\n       break;\n     }\n \n-  return last;\n+  return safe_as_a <rtx_insn *> (last);\n }\n \n /* Make X be output before the instruction BEFORE.  */\n \n-rtx\n+rtx_insn *\n emit_insn_before_noloc (rtx x, rtx before, basic_block bb)\n {\n   return emit_pattern_before_noloc (x, before, before, bb, make_insn_raw);\n@@ -4325,7 +4325,7 @@ emit_insn_before_noloc (rtx x, rtx before, basic_block bb)\n /* Make an instruction with body X and code JUMP_INSN\n    and output it before the instruction BEFORE.  */\n \n-rtx\n+rtx_insn *\n emit_jump_insn_before_noloc (rtx x, rtx before)\n {\n   return emit_pattern_before_noloc (x, before, NULL_RTX, NULL,\n@@ -4335,7 +4335,7 @@ emit_jump_insn_before_noloc (rtx x, rtx before)\n /* Make an instruction with body X and code CALL_INSN\n    and output it before the instruction BEFORE.  */\n \n-rtx\n+rtx_insn *\n emit_call_insn_before_noloc (rtx x, rtx before)\n {\n   return emit_pattern_before_noloc (x, before, NULL_RTX, NULL,\n@@ -4345,7 +4345,7 @@ emit_call_insn_before_noloc (rtx x, rtx before)\n /* Make an instruction with body X and code DEBUG_INSN\n    and output it before the instruction BEFORE.  */\n \n-rtx\n+rtx_insn *\n emit_debug_insn_before_noloc (rtx x, rtx before)\n {\n   return emit_pattern_before_noloc (x, before, NULL_RTX, NULL,\n@@ -4355,10 +4355,10 @@ emit_debug_insn_before_noloc (rtx x, rtx before)\n /* Make an insn of code BARRIER\n    and output it before the insn BEFORE.  */\n \n-rtx\n+rtx_barrier *\n emit_barrier_before (rtx before)\n {\n-  rtx insn = rtx_alloc (BARRIER);\n+  rtx_barrier *insn = as_a <rtx_barrier *> (rtx_alloc (BARRIER));\n \n   INSN_UID (insn) = cur_insn_uid++;\n \n@@ -4368,13 +4368,13 @@ emit_barrier_before (rtx before)\n \n /* Emit the label LABEL before the insn BEFORE.  */\n \n-rtx\n+rtx_insn *\n emit_label_before (rtx label, rtx before)\n {\n   gcc_checking_assert (INSN_UID (label) == 0);\n   INSN_UID (label) = cur_insn_uid++;\n   add_insn_before (label, before, NULL);\n-  return label;\n+  return as_a <rtx_insn *> (label);\n }\n \f\n /* Helper for emit_insn_after, handles lists of instructions\n@@ -4423,7 +4423,7 @@ emit_insn_after_1 (rtx first, rtx after, basic_block bb)\n   return last;\n }\n \n-static rtx\n+static rtx_insn *\n emit_pattern_after_noloc (rtx x, rtx after, basic_block bb,\n \t\t\t  rtx_insn *(*make_raw)(rtx))\n {\n@@ -4432,7 +4432,7 @@ emit_pattern_after_noloc (rtx x, rtx after, basic_block bb,\n   gcc_assert (after);\n \n   if (x == NULL_RTX)\n-    return last;\n+    return safe_as_a <rtx_insn *> (last);\n \n   switch (GET_CODE (x))\n     {\n@@ -4458,13 +4458,13 @@ emit_pattern_after_noloc (rtx x, rtx after, basic_block bb,\n       break;\n     }\n \n-  return last;\n+  return safe_as_a <rtx_insn *> (last);\n }\n \n /* Make X be output after the insn AFTER and set the BB of insn.  If\n    BB is NULL, an attempt is made to infer the BB from AFTER.  */\n \n-rtx\n+rtx_insn *\n emit_insn_after_noloc (rtx x, rtx after, basic_block bb)\n {\n   return emit_pattern_after_noloc (x, after, bb, make_insn_raw);\n@@ -4474,7 +4474,7 @@ emit_insn_after_noloc (rtx x, rtx after, basic_block bb)\n /* Make an insn of code JUMP_INSN with body X\n    and output it after the insn AFTER.  */\n \n-rtx\n+rtx_insn *\n emit_jump_insn_after_noloc (rtx x, rtx after)\n {\n   return emit_pattern_after_noloc (x, after, NULL, make_jump_insn_raw);\n@@ -4483,7 +4483,7 @@ emit_jump_insn_after_noloc (rtx x, rtx after)\n /* Make an instruction with body X and code CALL_INSN\n    and output it after the instruction AFTER.  */\n \n-rtx\n+rtx_insn *\n emit_call_insn_after_noloc (rtx x, rtx after)\n {\n   return emit_pattern_after_noloc (x, after, NULL, make_call_insn_raw);\n@@ -4492,7 +4492,7 @@ emit_call_insn_after_noloc (rtx x, rtx after)\n /* Make an instruction with body X and code CALL_INSN\n    and output it after the instruction AFTER.  */\n \n-rtx\n+rtx_insn *\n emit_debug_insn_after_noloc (rtx x, rtx after)\n {\n   return emit_pattern_after_noloc (x, after, NULL, make_debug_insn_raw);\n@@ -4501,10 +4501,10 @@ emit_debug_insn_after_noloc (rtx x, rtx after)\n /* Make an insn of code BARRIER\n    and output it after the insn AFTER.  */\n \n-rtx\n+rtx_barrier *\n emit_barrier_after (rtx after)\n {\n-  rtx insn = rtx_alloc (BARRIER);\n+  rtx_barrier *insn = as_a <rtx_barrier *> (rtx_alloc (BARRIER));\n \n   INSN_UID (insn) = cur_insn_uid++;\n \n@@ -4514,13 +4514,13 @@ emit_barrier_after (rtx after)\n \n /* Emit the label LABEL after the insn AFTER.  */\n \n-rtx\n+rtx_insn *\n emit_label_after (rtx label, rtx after)\n {\n   gcc_checking_assert (INSN_UID (label) == 0);\n   INSN_UID (label) = cur_insn_uid++;\n   add_insn_after (label, after, NULL);\n-  return label;\n+  return as_a <rtx_insn *> (label);\n }\n \f\n /* Notes require a bit of special handling: Some notes need to have their\n@@ -4590,14 +4590,14 @@ emit_note_before (enum insn_note subtype, rtx before)\n /* Insert PATTERN after AFTER, setting its INSN_LOCATION to LOC.\n    MAKE_RAW indicates how to turn PATTERN into a real insn.  */\n \n-static rtx\n+static rtx_insn *\n emit_pattern_after_setloc (rtx pattern, rtx after, int loc,\n \t\t\t   rtx_insn *(*make_raw) (rtx))\n {\n   rtx last = emit_pattern_after_noloc (pattern, after, NULL, make_raw);\n \n   if (pattern == NULL_RTX || !loc)\n-    return last;\n+    return safe_as_a <rtx_insn *> (last);\n \n   after = NEXT_INSN (after);\n   while (1)\n@@ -4608,14 +4608,14 @@ emit_pattern_after_setloc (rtx pattern, rtx after, int loc,\n \tbreak;\n       after = NEXT_INSN (after);\n     }\n-  return last;\n+  return safe_as_a <rtx_insn *> (last);\n }\n \n /* Insert PATTERN after AFTER.  MAKE_RAW indicates how to turn PATTERN\n    into a real insn.  SKIP_DEBUG_INSNS indicates whether to insert after\n    any DEBUG_INSNs.  */\n \n-static rtx\n+static rtx_insn *\n emit_pattern_after (rtx pattern, rtx after, bool skip_debug_insns,\n \t\t    rtx_insn *(*make_raw) (rtx))\n {\n@@ -4633,56 +4633,56 @@ emit_pattern_after (rtx pattern, rtx after, bool skip_debug_insns,\n }\n \n /* Like emit_insn_after_noloc, but set INSN_LOCATION according to LOC.  */\n-rtx\n+rtx_insn *\n emit_insn_after_setloc (rtx pattern, rtx after, int loc)\n {\n   return emit_pattern_after_setloc (pattern, after, loc, make_insn_raw);\n }\n \n /* Like emit_insn_after_noloc, but set INSN_LOCATION according to AFTER.  */\n-rtx\n+rtx_insn *\n emit_insn_after (rtx pattern, rtx after)\n {\n   return emit_pattern_after (pattern, after, true, make_insn_raw);\n }\n \n /* Like emit_jump_insn_after_noloc, but set INSN_LOCATION according to LOC.  */\n-rtx\n+rtx_insn *\n emit_jump_insn_after_setloc (rtx pattern, rtx after, int loc)\n {\n   return emit_pattern_after_setloc (pattern, after, loc, make_jump_insn_raw);\n }\n \n /* Like emit_jump_insn_after_noloc, but set INSN_LOCATION according to AFTER.  */\n-rtx\n+rtx_insn *\n emit_jump_insn_after (rtx pattern, rtx after)\n {\n   return emit_pattern_after (pattern, after, true, make_jump_insn_raw);\n }\n \n /* Like emit_call_insn_after_noloc, but set INSN_LOCATION according to LOC.  */\n-rtx\n+rtx_insn *\n emit_call_insn_after_setloc (rtx pattern, rtx after, int loc)\n {\n   return emit_pattern_after_setloc (pattern, after, loc, make_call_insn_raw);\n }\n \n /* Like emit_call_insn_after_noloc, but set INSN_LOCATION according to AFTER.  */\n-rtx\n+rtx_insn *\n emit_call_insn_after (rtx pattern, rtx after)\n {\n   return emit_pattern_after (pattern, after, true, make_call_insn_raw);\n }\n \n /* Like emit_debug_insn_after_noloc, but set INSN_LOCATION according to LOC.  */\n-rtx\n+rtx_insn *\n emit_debug_insn_after_setloc (rtx pattern, rtx after, int loc)\n {\n   return emit_pattern_after_setloc (pattern, after, loc, make_debug_insn_raw);\n }\n \n /* Like emit_debug_insn_after_noloc, but set INSN_LOCATION according to AFTER.  */\n-rtx\n+rtx_insn *\n emit_debug_insn_after (rtx pattern, rtx after)\n {\n   return emit_pattern_after (pattern, after, false, make_debug_insn_raw);\n@@ -4693,7 +4693,7 @@ emit_debug_insn_after (rtx pattern, rtx after)\n    indicates if PATTERN is meant for an INSN as opposed to a JUMP_INSN,\n    CALL_INSN, etc.  */\n \n-static rtx\n+static rtx_insn *\n emit_pattern_before_setloc (rtx pattern, rtx before, int loc, bool insnp,\n \t\t\t    rtx_insn *(*make_raw) (rtx))\n {\n@@ -4703,7 +4703,7 @@ emit_pattern_before_setloc (rtx pattern, rtx before, int loc, bool insnp,\n                                         NULL, make_raw);\n \n   if (pattern == NULL_RTX || !loc)\n-    return last;\n+    return safe_as_a <rtx_insn *> (last);\n \n   if (!first)\n     first = get_insns ();\n@@ -4717,15 +4717,15 @@ emit_pattern_before_setloc (rtx pattern, rtx before, int loc, bool insnp,\n \tbreak;\n       first = NEXT_INSN (first);\n     }\n-  return last;\n+  return safe_as_a <rtx_insn *> (last);\n }\n \n /* Insert PATTERN before BEFORE.  MAKE_RAW indicates how to turn PATTERN\n    into a real insn.  SKIP_DEBUG_INSNS indicates whether to insert\n    before any DEBUG_INSNs.  INSNP indicates if PATTERN is meant for an\n    INSN as opposed to a JUMP_INSN, CALL_INSN, etc.  */\n \n-static rtx\n+static rtx_insn *\n emit_pattern_before (rtx pattern, rtx before, bool skip_debug_insns,\n \t\t     bool insnp, rtx_insn *(*make_raw) (rtx))\n {\n@@ -4745,38 +4745,38 @@ emit_pattern_before (rtx pattern, rtx before, bool skip_debug_insns,\n }\n \n /* Like emit_insn_before_noloc, but set INSN_LOCATION according to LOC.  */\n-rtx\n+rtx_insn *\n emit_insn_before_setloc (rtx pattern, rtx before, int loc)\n {\n   return emit_pattern_before_setloc (pattern, before, loc, true,\n \t\t\t\t     make_insn_raw);\n }\n \n /* Like emit_insn_before_noloc, but set INSN_LOCATION according to BEFORE.  */\n-rtx\n+rtx_insn *\n emit_insn_before (rtx pattern, rtx before)\n {\n   return emit_pattern_before (pattern, before, true, true, make_insn_raw);\n }\n \n /* like emit_insn_before_noloc, but set INSN_LOCATION according to LOC.  */\n-rtx\n+rtx_insn *\n emit_jump_insn_before_setloc (rtx pattern, rtx before, int loc)\n {\n   return emit_pattern_before_setloc (pattern, before, loc, false,\n \t\t\t\t     make_jump_insn_raw);\n }\n \n /* Like emit_jump_insn_before_noloc, but set INSN_LOCATION according to BEFORE.  */\n-rtx\n+rtx_insn *\n emit_jump_insn_before (rtx pattern, rtx before)\n {\n   return emit_pattern_before (pattern, before, true, false,\n \t\t\t      make_jump_insn_raw);\n }\n \n /* Like emit_insn_before_noloc, but set INSN_LOCATION according to LOC.  */\n-rtx\n+rtx_insn *\n emit_call_insn_before_setloc (rtx pattern, rtx before, int loc)\n {\n   return emit_pattern_before_setloc (pattern, before, loc, false,\n@@ -4785,15 +4785,15 @@ emit_call_insn_before_setloc (rtx pattern, rtx before, int loc)\n \n /* Like emit_call_insn_before_noloc,\n    but set insn_location according to BEFORE.  */\n-rtx\n+rtx_insn *\n emit_call_insn_before (rtx pattern, rtx before)\n {\n   return emit_pattern_before (pattern, before, true, false,\n \t\t\t      make_call_insn_raw);\n }\n \n /* Like emit_insn_before_noloc, but set INSN_LOCATION according to LOC.  */\n-rtx\n+rtx_insn *\n emit_debug_insn_before_setloc (rtx pattern, rtx before, int loc)\n {\n   return emit_pattern_before_setloc (pattern, before, loc, false,\n@@ -4802,7 +4802,7 @@ emit_debug_insn_before_setloc (rtx pattern, rtx before, int loc)\n \n /* Like emit_debug_insn_before_noloc,\n    but set insn_location according to BEFORE.  */\n-rtx\n+rtx_insn *\n emit_debug_insn_before (rtx pattern, rtx before)\n {\n   return emit_pattern_before (pattern, before, false, false,\n@@ -4814,11 +4814,11 @@ emit_debug_insn_before (rtx pattern, rtx before)\n \n    Returns the last insn emitted.  */\n \n-rtx\n+rtx_insn *\n emit_insn (rtx x)\n {\n-  rtx last = get_last_insn ();\n-  rtx insn;\n+  rtx_insn *last = get_last_insn ();\n+  rtx_insn *insn;\n \n   if (x == NULL_RTX)\n     return last;\n@@ -4832,10 +4832,10 @@ emit_insn (rtx x)\n     case CODE_LABEL:\n     case BARRIER:\n     case NOTE:\n-      insn = x;\n+      insn = as_a <rtx_insn *> (x);\n       while (insn)\n \t{\n-\t  rtx next = NEXT_INSN (insn);\n+\t  rtx_insn *next = NEXT_INSN (insn);\n \t  add_insn (insn);\n \t  last = insn;\n \t  insn = next;\n@@ -4861,11 +4861,11 @@ emit_insn (rtx x)\n /* Make an insn of code DEBUG_INSN with pattern X\n    and add it to the end of the doubly-linked list.  */\n \n-rtx\n+rtx_insn *\n emit_debug_insn (rtx x)\n {\n-  rtx last = get_last_insn ();\n-  rtx insn;\n+  rtx_insn *last = get_last_insn ();\n+  rtx_insn *insn;\n \n   if (x == NULL_RTX)\n     return last;\n@@ -4879,10 +4879,10 @@ emit_debug_insn (rtx x)\n     case CODE_LABEL:\n     case BARRIER:\n     case NOTE:\n-      insn = x;\n+      insn = as_a <rtx_insn *> (x);\n       while (insn)\n \t{\n-\t  rtx next = NEXT_INSN (insn);\n+\t  rtx_insn *next = NEXT_INSN (insn);\n \t  add_insn (insn);\n \t  last = insn;\n \t  insn = next;\n@@ -4908,10 +4908,11 @@ emit_debug_insn (rtx x)\n /* Make an insn of code JUMP_INSN with pattern X\n    and add it to the end of the doubly-linked list.  */\n \n-rtx\n+rtx_insn *\n emit_jump_insn (rtx x)\n {\n-  rtx last = NULL_RTX, insn;\n+  rtx_insn *last = NULL;\n+  rtx_insn *insn;\n \n   switch (GET_CODE (x))\n     {\n@@ -4922,10 +4923,10 @@ emit_jump_insn (rtx x)\n     case CODE_LABEL:\n     case BARRIER:\n     case NOTE:\n-      insn = x;\n+      insn = as_a <rtx_insn *> (x);\n       while (insn)\n \t{\n-\t  rtx next = NEXT_INSN (insn);\n+\t  rtx_insn *next = NEXT_INSN (insn);\n \t  add_insn (insn);\n \t  last = insn;\n \t  insn = next;\n@@ -4951,10 +4952,10 @@ emit_jump_insn (rtx x)\n /* Make an insn of code CALL_INSN with pattern X\n    and add it to the end of the doubly-linked list.  */\n \n-rtx\n+rtx_insn *\n emit_call_insn (rtx x)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   switch (GET_CODE (x))\n     {\n@@ -4986,13 +4987,13 @@ emit_call_insn (rtx x)\n \n /* Add the label LABEL to the end of the doubly-linked list.  */\n \n-rtx\n+rtx_insn *\n emit_label (rtx label)\n {\n   gcc_checking_assert (INSN_UID (label) == 0);\n   INSN_UID (label) = cur_insn_uid++;\n   add_insn (label);\n-  return label;\n+  return as_a <rtx_insn *> (label);\n }\n \n /* Make an insn of code JUMP_TABLE_DATA\n@@ -5013,10 +5014,10 @@ emit_jump_table_data (rtx table)\n /* Make an insn of code BARRIER\n    and add it to the end of the doubly-linked list.  */\n \n-rtx\n+rtx_barrier *\n emit_barrier (void)\n {\n-  rtx barrier = rtx_alloc (BARRIER);\n+  rtx_barrier *barrier = as_a <rtx_barrier *> (rtx_alloc (BARRIER));\n   INSN_UID (barrier) = cur_insn_uid++;\n   add_insn (barrier);\n   return barrier;\n@@ -5047,7 +5048,7 @@ emit_note (enum insn_note kind)\n \n /* Emit a clobber of lvalue X.  */\n \n-rtx\n+rtx_insn *\n emit_clobber (rtx x)\n {\n   /* CONCATs should not appear in the insn stream.  */\n@@ -5061,10 +5062,10 @@ emit_clobber (rtx x)\n \n /* Return a sequence of insns to clobber lvalue X.  */\n \n-rtx\n+rtx_insn *\n gen_clobber (rtx x)\n {\n-  rtx seq;\n+  rtx_insn *seq;\n \n   start_sequence ();\n   emit_clobber (x);\n@@ -5075,7 +5076,7 @@ gen_clobber (rtx x)\n \n /* Emit a use of rvalue X.  */\n \n-rtx\n+rtx_insn *\n emit_use (rtx x)\n {\n   /* CONCATs should not appear in the insn stream.  */\n@@ -5089,10 +5090,10 @@ emit_use (rtx x)\n \n /* Return a sequence of insns to use rvalue X.  */\n \n-rtx\n+rtx_insn *\n gen_use (rtx x)\n {\n-  rtx seq;\n+  rtx_insn *seq;\n \n   start_sequence ();\n   emit_use (x);\n@@ -5237,7 +5238,7 @@ classify_insn (rtx x)\n /* Emit the rtl pattern X as an appropriate kind of insn.\n    If X is a label, it is simply added into the insn chain.  */\n \n-rtx\n+rtx_insn *\n emit (rtx x)\n {\n   enum rtx_code code = classify_insn (x);\n@@ -5250,7 +5251,7 @@ emit (rtx x)\n       return emit_insn (x);\n     case  JUMP_INSN:\n       {\n-\trtx insn = emit_jump_insn (x);\n+\trtx_insn *insn = emit_jump_insn (x);\n \tif (any_uncondjump_p (insn) || GET_CODE (x) == RETURN)\n \t  return emit_barrier ();\n \treturn insn;\n@@ -6055,10 +6056,11 @@ init_emit_once (void)\n /* Produce exact duplicate of insn INSN after AFTER.\n    Care updating of libcall regions if present.  */\n \n-rtx\n+rtx_insn *\n emit_copy_of_insn_after (rtx insn, rtx after)\n {\n-  rtx new_rtx, link;\n+  rtx_insn *new_rtx;\n+  rtx link;\n \n   switch (GET_CODE (insn))\n     {"}, {"sha": "e0deaffcdaaed377767a8ae0e782ab79fcbaf869", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=cd459bf87c0662db04a840f15d2e914f1ae536fa", "patch": "@@ -66,7 +66,7 @@ extern rtx copy_insn_1 (rtx);\n extern rtx copy_insn (rtx);\n extern rtx copy_delay_slot_insn (rtx);\n extern rtx gen_int_mode (HOST_WIDE_INT, enum machine_mode);\n-extern rtx emit_copy_of_insn_after (rtx, rtx);\n+extern rtx_insn *emit_copy_of_insn_after (rtx, rtx);\n extern void set_reg_attrs_from_value (rtx, rtx);\n extern void set_reg_attrs_for_parm (rtx, rtx);\n extern void set_reg_attrs_for_decl_rtl (tree t, rtx x);"}, {"sha": "64b973204514b365f84be908fa761602d8591be3", "filename": "gcc/rtl.h", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd459bf87c0662db04a840f15d2e914f1ae536fa/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=cd459bf87c0662db04a840f15d2e914f1ae536fa", "patch": "@@ -2379,49 +2379,49 @@ extern rtx assign_stack_temp_for_type (enum machine_mode, HOST_WIDE_INT, tree);\n extern rtx assign_temp (tree, int, int);\n \n /* In emit-rtl.c */\n-extern rtx emit_insn_before (rtx, rtx);\n-extern rtx emit_insn_before_noloc (rtx, rtx, basic_block);\n-extern rtx emit_insn_before_setloc (rtx, rtx, int);\n-extern rtx emit_jump_insn_before (rtx, rtx);\n-extern rtx emit_jump_insn_before_noloc (rtx, rtx);\n-extern rtx emit_jump_insn_before_setloc (rtx, rtx, int);\n-extern rtx emit_call_insn_before (rtx, rtx);\n-extern rtx emit_call_insn_before_noloc (rtx, rtx);\n-extern rtx emit_call_insn_before_setloc (rtx, rtx, int);\n-extern rtx emit_debug_insn_before (rtx, rtx);\n-extern rtx emit_debug_insn_before_noloc (rtx, rtx);\n-extern rtx emit_debug_insn_before_setloc (rtx, rtx, int);\n-extern rtx emit_barrier_before (rtx);\n-extern rtx emit_label_before (rtx, rtx);\n+extern rtx_insn *emit_insn_before (rtx, rtx);\n+extern rtx_insn *emit_insn_before_noloc (rtx, rtx, basic_block);\n+extern rtx_insn *emit_insn_before_setloc (rtx, rtx, int);\n+extern rtx_insn *emit_jump_insn_before (rtx, rtx);\n+extern rtx_insn *emit_jump_insn_before_noloc (rtx, rtx);\n+extern rtx_insn *emit_jump_insn_before_setloc (rtx, rtx, int);\n+extern rtx_insn *emit_call_insn_before (rtx, rtx);\n+extern rtx_insn *emit_call_insn_before_noloc (rtx, rtx);\n+extern rtx_insn *emit_call_insn_before_setloc (rtx, rtx, int);\n+extern rtx_insn *emit_debug_insn_before (rtx, rtx);\n+extern rtx_insn *emit_debug_insn_before_noloc (rtx, rtx);\n+extern rtx_insn *emit_debug_insn_before_setloc (rtx, rtx, int);\n+extern rtx_barrier *emit_barrier_before (rtx);\n+extern rtx_insn *emit_label_before (rtx, rtx);\n extern rtx_note *emit_note_before (enum insn_note, rtx);\n-extern rtx emit_insn_after (rtx, rtx);\n-extern rtx emit_insn_after_noloc (rtx, rtx, basic_block);\n-extern rtx emit_insn_after_setloc (rtx, rtx, int);\n-extern rtx emit_jump_insn_after (rtx, rtx);\n-extern rtx emit_jump_insn_after_noloc (rtx, rtx);\n-extern rtx emit_jump_insn_after_setloc (rtx, rtx, int);\n-extern rtx emit_call_insn_after (rtx, rtx);\n-extern rtx emit_call_insn_after_noloc (rtx, rtx);\n-extern rtx emit_call_insn_after_setloc (rtx, rtx, int);\n-extern rtx emit_debug_insn_after (rtx, rtx);\n-extern rtx emit_debug_insn_after_noloc (rtx, rtx);\n-extern rtx emit_debug_insn_after_setloc (rtx, rtx, int);\n-extern rtx emit_barrier_after (rtx);\n-extern rtx emit_label_after (rtx, rtx);\n+extern rtx_insn *emit_insn_after (rtx, rtx);\n+extern rtx_insn *emit_insn_after_noloc (rtx, rtx, basic_block);\n+extern rtx_insn *emit_insn_after_setloc (rtx, rtx, int);\n+extern rtx_insn *emit_jump_insn_after (rtx, rtx);\n+extern rtx_insn *emit_jump_insn_after_noloc (rtx, rtx);\n+extern rtx_insn *emit_jump_insn_after_setloc (rtx, rtx, int);\n+extern rtx_insn *emit_call_insn_after (rtx, rtx);\n+extern rtx_insn *emit_call_insn_after_noloc (rtx, rtx);\n+extern rtx_insn *emit_call_insn_after_setloc (rtx, rtx, int);\n+extern rtx_insn *emit_debug_insn_after (rtx, rtx);\n+extern rtx_insn *emit_debug_insn_after_noloc (rtx, rtx);\n+extern rtx_insn *emit_debug_insn_after_setloc (rtx, rtx, int);\n+extern rtx_barrier *emit_barrier_after (rtx);\n+extern rtx_insn *emit_label_after (rtx, rtx);\n extern rtx_note *emit_note_after (enum insn_note, rtx);\n-extern rtx emit_insn (rtx);\n-extern rtx emit_debug_insn (rtx);\n-extern rtx emit_jump_insn (rtx);\n-extern rtx emit_call_insn (rtx);\n-extern rtx emit_label (rtx);\n+extern rtx_insn *emit_insn (rtx);\n+extern rtx_insn *emit_debug_insn (rtx);\n+extern rtx_insn *emit_jump_insn (rtx);\n+extern rtx_insn *emit_call_insn (rtx);\n+extern rtx_insn *emit_label (rtx);\n extern rtx_jump_table_data *emit_jump_table_data (rtx);\n-extern rtx emit_barrier (void);\n+extern rtx_barrier *emit_barrier (void);\n extern rtx_note *emit_note (enum insn_note);\n extern rtx_note *emit_note_copy (rtx_note *);\n-extern rtx gen_clobber (rtx);\n-extern rtx emit_clobber (rtx);\n-extern rtx gen_use (rtx);\n-extern rtx emit_use (rtx);\n+extern rtx_insn *gen_clobber (rtx);\n+extern rtx_insn *emit_clobber (rtx);\n+extern rtx_insn *gen_use (rtx);\n+extern rtx_insn *emit_use (rtx);\n extern rtx_insn *make_insn_raw (rtx);\n extern void add_function_usage_to (rtx, rtx);\n extern rtx_call_insn *last_call_insn (void);\n@@ -3094,7 +3094,7 @@ extern void add_insn (rtx);\n extern void add_insn_before (rtx, rtx, basic_block);\n extern void add_insn_after (rtx, rtx, basic_block);\n extern void remove_insn (rtx);\n-extern rtx emit (rtx);\n+extern rtx_insn *emit (rtx);\n extern void delete_insn (rtx);\n extern rtx_insn *entry_of_function (void);\n extern void emit_insn_at_entry (rtx);"}]}