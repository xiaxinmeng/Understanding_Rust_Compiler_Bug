{"sha": "833e1a77244310aad1be0a548c871705de725edc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzZTFhNzcyNDQzMTBhYWQxYmUwYTU0OGM4NzE3MDVkZTcyNWVkYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-05-29T16:38:04Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-05-29T16:38:04Z"}, "message": "builtins.c (cos_builtin, [...]): Delete.\n\n\n\t* builtins.c (cos_builtin, sin_builtin, sqrt_builtin): Delete.\n\t(builtin_record): Add an additional builtin_code field to\n\trecord which GCC built-in corresponds to the Java function.\n\t(java_builtins):  Add new entries for atan, atan2, exp, log,\n\tpow and tan.\n\t(max_builtin, min_builtin, abs_builtin): Perform constant\n\tfolding on the resulting tree.\n\t(java_build_function_call_expr): Likewise, perform constant\n\tfolding on the resulting tree.\n\t(initialize_builtins): The NULL creators are now allowed in\n\tthe java_builtins table, which is now terminated by an entry\n\twith builtin_code == END_BUILTINS.\n\t(check_for_builtin): Likewise.  If the matching creator is\n\tNULL, construct the call using java_build_function_call_expr\n\tdirectly with the decl for the corresponding builtin_code.\n\nFrom-SVN: r67225", "tree": {"sha": "536f1d0a63b9093a0997aef1b5d7aba9b9f3d66c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/536f1d0a63b9093a0997aef1b5d7aba9b9f3d66c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/833e1a77244310aad1be0a548c871705de725edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833e1a77244310aad1be0a548c871705de725edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833e1a77244310aad1be0a548c871705de725edc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833e1a77244310aad1be0a548c871705de725edc/comments", "author": null, "committer": null, "parents": [{"sha": "0b82d59c030f40cc0d65beda7ead902cb4402bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b82d59c030f40cc0d65beda7ead902cb4402bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b82d59c030f40cc0d65beda7ead902cb4402bb0"}], "stats": {"total": 105, "additions": 52, "deletions": 53}, "files": [{"sha": "8dc9ecaf2e533c7f353db0e49e416de4cd3f5469", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833e1a77244310aad1be0a548c871705de725edc/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833e1a77244310aad1be0a548c871705de725edc/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=833e1a77244310aad1be0a548c871705de725edc", "patch": "@@ -1,3 +1,21 @@\n+2003-05-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (cos_builtin, sin_builtin, sqrt_builtin): Delete.\n+\t(builtin_record): Add an additional builtin_code field to\n+\trecord which GCC built-in corresponds to the Java function.\n+\t(java_builtins):  Add new entries for atan, atan2, exp, log,\n+\tpow and tan.\n+\t(max_builtin, min_builtin, abs_builtin): Perform constant\n+\tfolding on the resulting tree.\n+\t(java_build_function_call_expr): Likewise, perform constant\n+\tfolding on the resulting tree.\n+\t(initialize_builtins): The NULL creators are now allowed in\n+\tthe java_builtins table, which is now terminated by an entry\n+\twith builtin_code == END_BUILTINS.\n+\t(check_for_builtin): Likewise.  If the matching creator is\n+\tNULL, construct the call using java_build_function_call_expr\n+\tdirectly with the decl for the corresponding builtin_code.\n+\n 2003-05-23  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* win32-host.c: Normalize copyright boilerplate."}, {"sha": "c0df32326d6c07db9dbf6b4035f871ae1f4840ea", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 34, "deletions": 53, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833e1a77244310aad1be0a548c871705de725edc/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833e1a77244310aad1be0a548c871705de725edc/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=833e1a77244310aad1be0a548c871705de725edc", "patch": "@@ -66,9 +66,6 @@ enum builtin_type\n static tree max_builtin (tree, tree);\n static tree min_builtin (tree, tree);\n static tree abs_builtin (tree, tree);\n-static tree cos_builtin (tree, tree);\n-static tree sin_builtin (tree, tree);\n-static tree sqrt_builtin (tree, tree);\n \n static tree java_build_function_call_expr (tree, tree);\n static void define_builtin (enum built_in_function, const char *,\n@@ -97,17 +94,24 @@ struct builtin_record GTY(())\n   union string_or_tree GTY ((desc (\"1\"))) class_name;\n   union string_or_tree GTY ((desc (\"1\"))) method_name;\n   builtin_creator_function * GTY((skip (\"\"))) creator;\n+  enum built_in_function builtin_code;\n };\n \n static GTY(()) struct builtin_record java_builtins[] =\n {\n-  { { \"java.lang.Math\" }, { \"min\" }, min_builtin },\n-  { { \"java.lang.Math\" }, { \"max\" }, max_builtin },\n-  { { \"java.lang.Math\" }, { \"abs\" }, abs_builtin },\n-  { { \"java.lang.Math\" }, { \"cos\" }, cos_builtin },\n-  { { \"java.lang.Math\" }, { \"sin\" }, sin_builtin },\n-  { { \"java.lang.Math\" }, { \"sqrt\" }, sqrt_builtin },\n-  { { NULL }, { NULL }, NULL }\n+  { { \"java.lang.Math\" }, { \"min\" }, min_builtin, 0 },\n+  { { \"java.lang.Math\" }, { \"max\" }, max_builtin, 0 },\n+  { { \"java.lang.Math\" }, { \"abs\" }, abs_builtin, 0 },\n+  { { \"java.lang.Math\" }, { \"atan\" }, NULL, BUILT_IN_ATAN },\n+  { { \"java.lang.Math\" }, { \"atan2\" }, NULL, BUILT_IN_ATAN2 },\n+  { { \"java.lang.Math\" }, { \"cos\" }, NULL, BUILT_IN_COS },\n+  { { \"java.lang.Math\" }, { \"exp\" }, NULL, BUILT_IN_EXP },\n+  { { \"java.lang.Math\" }, { \"log\" }, NULL, BUILT_IN_LOG },\n+  { { \"java.lang.Math\" }, { \"pow\" }, NULL, BUILT_IN_POW },\n+  { { \"java.lang.Math\" }, { \"sin\" }, NULL, BUILT_IN_SIN },\n+  { { \"java.lang.Math\" }, { \"sqrt\" }, NULL, BUILT_IN_SQRT },\n+  { { \"java.lang.Math\" }, { \"tan\" }, NULL, BUILT_IN_TAN },\n+  { { NULL }, { NULL }, NULL, END_BUILTINS }\n };\n \n /* This is only used transiently, so we don't mark it as roots for the\n@@ -120,24 +124,24 @@ static tree builtin_types[(int) BT_LAST];\n static tree\n max_builtin (tree method_return_type, tree method_arguments)\n {\n-  return build (MAX_EXPR, method_return_type,\n-\t\tTREE_VALUE (method_arguments),\n-\t\tTREE_VALUE (TREE_CHAIN (method_arguments)));\n+  return fold (build (MAX_EXPR, method_return_type,\n+\t\t      TREE_VALUE (method_arguments),\n+\t\t      TREE_VALUE (TREE_CHAIN (method_arguments))));\n }\n \n static tree\n min_builtin (tree method_return_type, tree method_arguments)\n {\n-  return build (MIN_EXPR, method_return_type,\n-\t\tTREE_VALUE (method_arguments),\n-\t\tTREE_VALUE (TREE_CHAIN (method_arguments)));\n+  return fold (build (MIN_EXPR, method_return_type,\n+\t\t      TREE_VALUE (method_arguments),\n+\t\t      TREE_VALUE (TREE_CHAIN (method_arguments))));\n }\n \n static tree\n abs_builtin (tree method_return_type, tree method_arguments)\n {\n-  return build1 (ABS_EXPR, method_return_type,\n-\t\t TREE_VALUE (method_arguments));\n+  return fold (build1 (ABS_EXPR, method_return_type,\n+\t\t       TREE_VALUE (method_arguments)));\n }\n \n /* Mostly copied from ../builtins.c.  */\n@@ -150,37 +154,7 @@ java_build_function_call_expr (tree fn, tree arglist)\n   call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n \t\t     call_expr, arglist);\n   TREE_SIDE_EFFECTS (call_expr) = 1;\n-  return call_expr;\n-}\n-\n-static tree\n-cos_builtin (tree method_return_type ATTRIBUTE_UNUSED, tree method_arguments)\n-{\n-  /* FIXME: this assumes that jdouble and double are the same.  */\n-  tree fn = built_in_decls[BUILT_IN_COS];\n-  if (fn == NULL_TREE)\n-    return NULL_TREE;\n-  return java_build_function_call_expr (fn, method_arguments);\n-}\n-\n-static tree\n-sin_builtin (tree method_return_type ATTRIBUTE_UNUSED, tree method_arguments)\n-{\n-  /* FIXME: this assumes that jdouble and double are the same.  */\n-  tree fn = built_in_decls[BUILT_IN_SIN];\n-  if (fn == NULL_TREE)\n-    return NULL_TREE;\n-  return java_build_function_call_expr (fn, method_arguments);\n-}\n-\n-static tree\n-sqrt_builtin (tree method_return_type ATTRIBUTE_UNUSED, tree method_arguments)\n-{\n-  /* FIXME: this assumes that jdouble and double are the same.  */\n-  tree fn = built_in_decls[BUILT_IN_SQRT];\n-  if (fn == NULL_TREE)\n-    return NULL_TREE;\n-  return java_build_function_call_expr (fn, method_arguments);\n+  return fold (call_expr);\n }\n \n \f\n@@ -263,7 +237,7 @@ initialize_builtins (void)\n {\n   int i;\n \n-  for (i = 0; java_builtins[i].creator != NULL; ++i)\n+  for (i = 0; java_builtins[i].builtin_code != END_BUILTINS; ++i)\n     {\n       tree klass_id = get_identifier (java_builtins[i].class_name.s);\n       tree m = get_identifier (java_builtins[i].method_name.s);\n@@ -331,13 +305,20 @@ check_for_builtin (tree method, tree call)\n       tree method_name = DECL_NAME (method);\n       tree method_return_type = TREE_TYPE (TREE_TYPE (method));\n \n-      for (i = 0; java_builtins[i].creator != NULL; ++i)\n+      for (i = 0; java_builtins[i].builtin_code != END_BUILTINS; ++i)\n \t{\n \t  if (method_class == java_builtins[i].class_name.t\n \t      && method_name == java_builtins[i].method_name.t)\n \t    {\n-\t      return (*java_builtins[i].creator) (method_return_type,\n-\t\t\t\t\t\t  method_arguments);\n+\t      tree fn;\n+\n+\t      if (java_builtins[i].creator != NULL)\n+\t\treturn (*java_builtins[i].creator) (method_return_type,\n+\t\t\t\t\t\t    method_arguments);\n+\t      fn = built_in_decls[java_builtins[i].builtin_code];\n+\t      if (fn == NULL_TREE)\n+\t\treturn NULL_TREE;\n+\t      return java_build_function_call_expr (fn, method_arguments);\n \t    }\n \t}\n     }"}]}