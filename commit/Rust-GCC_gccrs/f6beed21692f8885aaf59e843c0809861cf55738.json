{"sha": "f6beed21692f8885aaf59e843c0809861cf55738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiZWVkMjE2OTJmODg4NWFhZjU5ZTg0M2MwODA5ODYxY2Y1NTczOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-15T17:58:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-15T17:58:29Z"}, "message": "(iteration_info): Fix code so that it knows iteration_var is a\nHOST_WIDE_INT, not a long.\n\nFrom-SVN: r13164", "tree": {"sha": "81f046633dbd9bf8b5f779af02135c6e8fdfad8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81f046633dbd9bf8b5f779af02135c6e8fdfad8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6beed21692f8885aaf59e843c0809861cf55738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6beed21692f8885aaf59e843c0809861cf55738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6beed21692f8885aaf59e843c0809861cf55738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6beed21692f8885aaf59e843c0809861cf55738/comments", "author": null, "committer": null, "parents": [{"sha": "80906567f4c44f9127300aa3832b64a4ae77282f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80906567f4c44f9127300aa3832b64a4ae77282f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80906567f4c44f9127300aa3832b64a4ae77282f"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "0e033ef53b28d41a4a39f21a9e3c9a3abed0ef0d", "filename": "gcc/unroll.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6beed21692f8885aaf59e843c0809861cf55738/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6beed21692f8885aaf59e843c0809861cf55738/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=f6beed21692f8885aaf59e843c0809861cf55738", "patch": "@@ -2263,14 +2263,16 @@ iteration_info (iteration_var, initial_value, increment, loop_start, loop_end)\n \t\t \"Loop unrolling: No reg_iv_type entry for iteration var.\\n\");\n       return;\n     }\n-  /* Reject iteration variables larger than the host long size, since they\n+\n+  /* Reject iteration variables larger than the host wide int size, since they\n      could result in a number of iterations greater than the range of our\n-     `unsigned long' variable loop_n_iterations.  */\n-  else if (GET_MODE_BITSIZE (GET_MODE (iteration_var)) > HOST_BITS_PER_LONG)\n+     `unsigned HOST_WIDE_INT' variable loop_n_iterations.  */\n+  else if ((GET_MODE_BITSIZE (GET_MODE (iteration_var))\n+\t    > HOST_BITS_PER_WIDE_INT))\n     {\n       if (loop_dump_stream)\n \tfprintf (loop_dump_stream,\n-\t\t \"Loop unrolling: Iteration var rejected because mode larger than host long.\\n\");\n+\t\t \"Loop unrolling: Iteration var rejected because mode too large.\\n\");\n       return;\n     }\n   else if (GET_MODE_CLASS (GET_MODE (iteration_var)) != MODE_INT)"}]}