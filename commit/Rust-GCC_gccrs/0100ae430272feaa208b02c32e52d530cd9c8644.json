{"sha": "0100ae430272feaa208b02c32e52d530cd9c8644", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEwMGFlNDMwMjcyZmVhYTIwOGIwMmMzMmU1MmQ1MzBjZDljODY0NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-03-01T08:54:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-03-01T08:54:29Z"}, "message": "re PR tree-optimization/79721 (Scalar evolution introduces signed overflow)\n\n2017-03-01  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/79721\n\t* tree-chrec.c (chrec_evaluate): Perform computation of Newtons\n\tinterpolating formula in wrapping arithmetic.\n\t(chrec_apply): Convert chrec_evaluate return value to wanted type.\n\n\t* gcc.dg/torture/pr79721.c: New testcase.\n\nFrom-SVN: r245803", "tree": {"sha": "3b167ee4b1cb343efed56678dfe72ddc8e9d0d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b167ee4b1cb343efed56678dfe72ddc8e9d0d52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0100ae430272feaa208b02c32e52d530cd9c8644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0100ae430272feaa208b02c32e52d530cd9c8644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0100ae430272feaa208b02c32e52d530cd9c8644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0100ae430272feaa208b02c32e52d530cd9c8644/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3e9e8ca83de62be68d8b589e9ddf9638f0e8366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e9e8ca83de62be68d8b589e9ddf9638f0e8366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e9e8ca83de62be68d8b589e9ddf9638f0e8366"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "253eab3456a3c154bccec58fafff81e3e5f6acbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0100ae430272feaa208b02c32e52d530cd9c8644/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0100ae430272feaa208b02c32e52d530cd9c8644/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0100ae430272feaa208b02c32e52d530cd9c8644", "patch": "@@ -1,3 +1,10 @@\n+2017-03-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/79721\n+\t* tree-chrec.c (chrec_evaluate): Perform computation of Newtons\n+\tinterpolating formula in wrapping arithmetic.\n+\t(chrec_apply): Convert chrec_evaluate return value to wanted type.\n+\n 2017-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/79734"}, {"sha": "7aac384da2f8141d67776e4c44f1a0ac5375306e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0100ae430272feaa208b02c32e52d530cd9c8644/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0100ae430272feaa208b02c32e52d530cd9c8644/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0100ae430272feaa208b02c32e52d530cd9c8644", "patch": "@@ -1,3 +1,8 @@\n+2017-03-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/79721\n+\t* gcc.dg/torture/pr79721.c: New testcase.\n+\n 2017-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79746"}, {"sha": "97d20ca97a8a1b06ce02f8ca8474064be5b18bd5", "filename": "gcc/testsuite/gcc.dg/torture/pr79721.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0100ae430272feaa208b02c32e52d530cd9c8644/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79721.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0100ae430272feaa208b02c32e52d530cd9c8644/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79721.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79721.c?ref=0100ae430272feaa208b02c32e52d530cd9c8644", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run }  */\n+/* { dg-require-effective-target int32plus } */\n+/* We use -ftrapv so that when SCEV final value replacement introduces\n+   undefined overflow we trap.  UBSAN inhibits final value replacement.  */\n+/* { dg-additional-options \"-ftrapv\" } */\n+\n+int __attribute__((noclone,noinline))\n+foo(int a, int b)\n+{\n+  int sum = 0;\n+  for (int i = 0; i < 60000; i++)\n+    sum += a + i * b;\n+  return sum;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  if (foo (-30000, 2) != 1799940000)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "80a1bbd2327344e3065c1d450816195e2f26a17c", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0100ae430272feaa208b02c32e52d530cd9c8644/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0100ae430272feaa208b02c32e52d530cd9c8644/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=0100ae430272feaa208b02c32e52d530cd9c8644", "patch": "@@ -536,7 +536,8 @@ tree_fold_binomial (tree type, tree n, unsigned int k)\n }\n \n /* Helper function.  Use the Newton's interpolating formula for\n-   evaluating the value of the evolution function.  */\n+   evaluating the value of the evolution function.\n+   The result may be in an unsigned type of CHREC.  */\n \n static tree\n chrec_evaluate (unsigned var, tree chrec, tree n, unsigned int k)\n@@ -549,25 +550,33 @@ chrec_evaluate (unsigned var, tree chrec, tree n, unsigned int k)\n \t && flow_loop_nested_p (var_loop, get_chrec_loop (chrec)))\n     chrec = CHREC_LEFT (chrec);\n \n+  /* The formula associates the expression and thus we have to make\n+     sure to not introduce undefined overflow.  */\n+  tree ctype = type;\n+  if (INTEGRAL_TYPE_P (type)\n+      && ! TYPE_OVERFLOW_WRAPS (type))\n+    ctype = unsigned_type_for (type);\n+\n   if (TREE_CODE (chrec) == POLYNOMIAL_CHREC\n       && CHREC_VARIABLE (chrec) == var)\n     {\n       arg1 = chrec_evaluate (var, CHREC_RIGHT (chrec), n, k + 1);\n       if (arg1 == chrec_dont_know)\n \treturn chrec_dont_know;\n-      binomial_n_k = tree_fold_binomial (type, n, k);\n+      binomial_n_k = tree_fold_binomial (ctype, n, k);\n       if (!binomial_n_k)\n \treturn chrec_dont_know;\n-      arg0 = fold_build2 (MULT_EXPR, type,\n-\t\t\t  CHREC_LEFT (chrec), binomial_n_k);\n-      return chrec_fold_plus (type, arg0, arg1);\n+      tree l = chrec_convert (ctype, CHREC_LEFT (chrec), NULL);\n+      arg0 = fold_build2 (MULT_EXPR, ctype, l, binomial_n_k);\n+      return chrec_fold_plus (ctype, arg0, arg1);\n     }\n \n-  binomial_n_k = tree_fold_binomial (type, n, k);\n+  binomial_n_k = tree_fold_binomial (ctype, n, k);\n   if (!binomial_n_k)\n     return chrec_dont_know;\n \n-  return fold_build2 (MULT_EXPR, type, chrec, binomial_n_k);\n+  return fold_build2 (MULT_EXPR, ctype,\n+\t\t      chrec_convert (ctype, chrec, NULL), binomial_n_k);\n }\n \n /* Evaluates \"CHREC (X)\" when the varying variable is VAR.\n@@ -623,7 +632,7 @@ chrec_apply (unsigned var,\n       else if (TREE_CODE (x) == INTEGER_CST\n \t       && tree_int_cst_sgn (x) == 1)\n \t/* testsuite/.../ssa-chrec-38.c.  */\n-\tres = chrec_evaluate (var, chrec, x, 0);\n+\tres = chrec_convert (type, chrec_evaluate (var, chrec, x, 0), NULL);\n       else\n \tres = chrec_dont_know;\n       break;"}]}