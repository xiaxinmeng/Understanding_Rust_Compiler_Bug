{"sha": "d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdlYWJmZDQ1MmY2ZjQ0N2NhOGYzYTk1NWU3YTRiNTMxODg0ZmFkYg==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-11-04T11:01:03Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-11-04T11:01:03Z"}, "message": "MSP430: Add new methods of finding external MCU data file\n\nMCU data file can now be specified with an environment variable or installed\ninto a toolchain subdirectory.\n\n2019-11-04  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\ngcc/\n\t* config/msp430/driver-msp430.c\n\t(msp430_get_linker_devices_include_path): New spec function.\n\t* config/msp430/msp430-devices.c (msp430_dirname): New function.\n\t(extract_devices_dir_from_exec_prefix): New function.\n\t(extract_devices_dir_from_collect_gcc): New function.\n\t(msp430_check_env_var_for_devices): New function.\n\t(msp430_check_path_for_devices): Use xstrdup instead of ASTRDUP.\n\t(parse_devices_csv): Call msp430_check_env_var_for_devices if\n\tdevices.csv was not found using other methods.\n\t* config/msp430/msp430-devices.h (msp430_check_env_var_for_devices):\n\tNew prototype.\n\t(msp430_dirname): Likewise.\n\t* config/msp430/msp430.c (msp430_register_pre_includes): New function.\n\t* config/msp430/msp430.h (EXTRA_SPEC_FUNCTIONS): Add\n\tmsp430_get_linker_devices_include_path.\n\t(TARGET_EXTRA_PRE_INCLUDES): Define.\n\t* doc/invoke.texi: Document new ways of searching for support files.\n\ngcc/testsuite/\n\t* gcc.target/msp430/devices/csv-using-env-var.c: New test.\n\t* gcc.target/msp430/devices/csv-using-installed.c: New test.\n\t* gcc.target/msp430/devices/csv-using-option.c: New test.\n\t* gcc.target/msp430/devices/devices-main.c: New test source file.\n\t* gcc.target/msp430/devices/msp430-devices.h: New test.\n\t* gcc.target/msp430/msp430.exp (msp430_device_permutations_runtest):\n\tAdd special cases for csv-using* tests.\n\tDefine TESTING_HARD_DATA when running tests that use hard-coded device\n\tdata.\n\t(get_installed_device_data_path): New.\n\t(msp430_hide_installed_devices_data): New.\n\t(msp430_restore_installed_devices_data): New.\n\t(msp430_test_installed_device_data): New.\n\t(msp430_install_device_data): New.\n\nFrom-SVN: r277772", "tree": {"sha": "7654a0733dcf2cd4ab85896373c854912bda4b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7654a0733dcf2cd4ab85896373c854912bda4b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b76f4e6c06bd494d2383c4c16d1e1a034da74641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76f4e6c06bd494d2383c4c16d1e1a034da74641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76f4e6c06bd494d2383c4c16d1e1a034da74641"}], "stats": {"total": 378, "additions": 369, "deletions": 9}, "files": [{"sha": "c1c6d335d04c88d187f0adb6dbfc784a08fa405a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -1,3 +1,23 @@\n+2019-11-04  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/driver-msp430.c\n+\t(msp430_get_linker_devices_include_path): New spec function.\n+\t* config/msp430/msp430-devices.c (msp430_dirname): New function.\n+\t(extract_devices_dir_from_exec_prefix): New function.\n+\t(extract_devices_dir_from_collect_gcc): New function.\n+\t(msp430_check_env_var_for_devices): New function.\n+\t(msp430_check_path_for_devices): Use xstrdup instead of ASTRDUP.\n+\t(parse_devices_csv): Call msp430_check_env_var_for_devices if\n+\tdevices.csv was not found using other methods.\n+\t* config/msp430/msp430-devices.h (msp430_check_env_var_for_devices):\n+\tNew prototype.\n+\t(msp430_dirname): Likewise.\n+\t* config/msp430/msp430.c (msp430_register_pre_includes): New function.\n+\t* config/msp430/msp430.h (EXTRA_SPEC_FUNCTIONS): Add\n+\tmsp430_get_linker_devices_include_path.\n+\t(TARGET_EXTRA_PRE_INCLUDES): Define.\n+\t* doc/invoke.texi: Document new ways of searching for support files.\n+\n 2019-11-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92301"}, {"sha": "fbe7c44ea3740892e5679fc4ab99fd9a7448fa0e", "filename": "gcc/config/msp430/driver-msp430.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -150,6 +150,19 @@ msp430_select_hwmult_lib (int argc ATTRIBUTE_UNUSED,\n   return \"-lmul_none\";\n }\n \n+/* Spec function.  Used to place the path to the MSP430-GCC support files\n+   on the command line, prefixed with \"-L\", so the linker finds the linker\n+   scripts in that directory.  */\n+const char *\n+msp430_get_linker_devices_include_path (int argc ATTRIBUTE_UNUSED,\n+\t\t\t\t\tconst char **argv ATTRIBUTE_UNUSED)\n+{\n+  char *devices_csv_path;\n+  if (msp430_check_env_var_for_devices (&devices_csv_path))\n+    return NULL;\n+  return concat (\"-L\", msp430_dirname (devices_csv_path), NULL);\n+}\n+\n /* Spec function.  Propagate -m{code,data}-region= to the linker, unless the\n    lower region has been specified without -muse-lower-region-prefix also being\n    used.  */"}, {"sha": "600a111b51726b2b8d0ae9478e6341eda7aee409", "filename": "gcc/config/msp430/msp430-devices.c", "status": "modified", "additions": 129, "deletions": 4, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.c?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -37,7 +37,7 @@ extern struct t_msp430_mcu_data hard_msp430_mcu_data[605];\n \n /* Set to the full path to devices.csv if it is found by searching the -I and\n    -L paths.  */\n-char * derived_devices_csv_loc = NULL;\n+char *derived_devices_csv_loc = NULL;\n \n /* This is to canonicalize the directory separators in the path.\n    On Windows we could have a mix of '/' and '\\' in the path.  */\n@@ -52,6 +52,128 @@ canonicalize_path_dirsep (char **path)\n       t_path[i] = DIR_SEPARATOR;\n }\n \n+/* This function returns the enclosing directory of PATH.\n+   It is inconsequential whether PATH ends in a dirsep or not.\n+   It modifies the string pointed to by PATH.  */\n+char *\n+msp430_dirname (char *path)\n+{\n+  int last_elem = strlen (path) - 1;\n+  int i = last_elem - (IS_DIR_SEPARATOR (path[last_elem]) ? 1 : 0);\n+  for (; i >= 0; i--)\n+    {\n+      if (IS_DIR_SEPARATOR (path[i]))\n+\t{\n+\t  path[i] = '\\0';\n+\t  return path;\n+\t}\n+    }\n+  return path;\n+}\n+\n+/* devices.csv path from the toolchain root.  */\n+static const char rest_of_devices_path[] = \"/msp430-elf/include/devices/\";\n+\n+/* \"The default value of GCC_EXEC_PREFIX is prefix/lib/gcc\". Strip lib/gcc\n+   from GCC_EXEC_PREFIX to get the path to the installed toolchain.  */\n+static void\n+extract_devices_dir_from_exec_prefix (char **devices_loc)\n+{\n+  const char *temp;\n+  char *gcc_exec_prefix = *devices_loc;\n+  int len = strlen (gcc_exec_prefix);\n+\n+  /* Copied from gcc.c.  */\n+  if (len > (int) sizeof (\"/lib/gcc/\") - 1\n+      && (IS_DIR_SEPARATOR (gcc_exec_prefix[len-1])))\n+    {\n+      temp = gcc_exec_prefix + len - sizeof (\"/lib/gcc/\") + 1;\n+      if (IS_DIR_SEPARATOR (*temp)\n+\t  && filename_ncmp (temp + 1, \"lib\", 3) == 0\n+\t  && IS_DIR_SEPARATOR (temp[4])\n+\t  && filename_ncmp (temp + 5, \"gcc\", 3) == 0)\n+\t{\n+\t  len -= sizeof (\"/lib/gcc/\") - 1;\n+\t  /* Keep the '/' from the beginning of /lib/gcc.  */\n+\t  gcc_exec_prefix[len + 1] = (char) 0;\n+\t  *devices_loc = concat (gcc_exec_prefix, rest_of_devices_path, NULL);\n+\t  return;\n+\t}\n+    }\n+}\n+\n+/* Given the path to the GCC executable, return the path to the installed\n+   device data in \"$TOOLCHAIN_ROOT/msp430-elf/include/devices\".\n+   Assumes the GCC executable is in \"$TOOLCHAIN_ROOT/<somedir>/\".  */\n+static void\n+extract_devices_dir_from_collect_gcc (char **devices_loc)\n+{\n+  char *t_devices_loc = *devices_loc;\n+  /* Go up a directory to the toolchain root.  */\n+  t_devices_loc = msp430_dirname (msp430_dirname (t_devices_loc));\n+  t_devices_loc = concat (t_devices_loc, rest_of_devices_path, NULL);\n+  *devices_loc = t_devices_loc;\n+}\n+\n+/* The path to the MSP430-GCC support files can be specified with the\n+   environment variable \"MSP430_GCC_INCLUDE_DIR\", or installed into the\n+   toolchain in the msp430-elf/include/devices subdirectory.\n+   We use the GCC_EXEC_PREFIX or COLLECT_GCC environment variables as a starting\n+   point for the location of the toolchain, and work out the path to the\n+   installed device data from there.\n+   Return 0 and set LOCAL_DEVICES_CSV_LOC if we find devices.csv.  Return 1\n+   if devices.csv wasn't found.  */\n+int\n+msp430_check_env_var_for_devices (char **local_devices_csv_loc)\n+{\n+  const int num_vars = 3;\n+  const char dirsep[2] = { DIR_SEPARATOR, 0 };\n+  /* Both GCC_EXEC_PREFIX and COLLECT_GCC should always be set to the format we\n+     expect, as they are required for correct operation of the toolchain.\n+     So if they are wrong the user will probably have bigger problems.\n+     GCC_EXEC_PREFIX is only defined in the driver, whilst COLLECT_GCC is only\n+     defined in the compiler proper, so we need both.  */\n+  const char *env_vars[num_vars] = {\n+      \"MSP430_GCC_INCLUDE_DIR\", \"GCC_EXEC_PREFIX\", \"COLLECT_GCC\" };\n+  enum msp430_include_vars {\n+      MSP430_GCC_INCLUDE_DIR,\n+      GCC_EXEC_PREFIX,\n+      COLLECT_GCC\n+  };\n+  FILE *devices_csv_file = NULL;\n+  int i;\n+\n+  for (i = MSP430_GCC_INCLUDE_DIR; i <= COLLECT_GCC; i++)\n+    {\n+      char *t_devices_loc;\n+      char *val = getenv (env_vars[i]);\n+      if (val == NULL)\n+\tcontinue;\n+      t_devices_loc = xstrdup (val);\n+\n+      if (i == MSP430_GCC_INCLUDE_DIR)\n+\t{\n+\t  if (!IS_DIR_SEPARATOR (t_devices_loc[strlen (t_devices_loc) - 1]))\n+\t    t_devices_loc = concat (t_devices_loc, dirsep, NULL);\n+\t}\n+      else if (i == GCC_EXEC_PREFIX)\n+\textract_devices_dir_from_exec_prefix (&t_devices_loc);\n+      else if (i == COLLECT_GCC)\n+\textract_devices_dir_from_collect_gcc (&t_devices_loc);\n+\n+      t_devices_loc = concat (t_devices_loc, \"devices.csv\", NULL);\n+      devices_csv_file = fopen (t_devices_loc,  \"r\");\n+      if (devices_csv_file != NULL)\n+\t{\n+\t  fclose (devices_csv_file);\n+\t  *local_devices_csv_loc = t_devices_loc;\n+\t  canonicalize_path_dirsep (local_devices_csv_loc);\n+\t  return 0;\n+\t}\n+    }\n+  return 1;\n+}\n+\n /* Spec function which searches the paths passed to the -I and -L options for\n    the \"devices.csv\" file.  If it is found then the -mdevices-csv-loc option is\n    placed on the command line so the compiler knows the location of the\n@@ -69,7 +191,7 @@ msp430_check_path_for_devices (int argc, const char **argv)\n     return NULL;\n   for (i = 0; i < argc; i++)\n     {\n-      char *inc_path = ASTRDUP (argv[i]);\n+      char *inc_path = xstrdup (argv[i]);\n       canonicalize_path_dirsep (&inc_path);\n       if (!IS_DIR_SEPARATOR (inc_path[strlen (inc_path) - 1]))\n \tinc_path = concat (inc_path, dirsep, NULL);\n@@ -274,8 +396,11 @@ parse_devices_csv (const char * mcu_name)\n   /* Otherwise check if the path to devices.csv was found another way.  */\n   else if (derived_devices_csv_loc != NULL)\n     return parse_devices_csv_1 (derived_devices_csv_loc, mcu_name);\n-  /* devices.csv was not found.  */\n-  return 2;\n+  /* Otherwise we need to use environment variables to try and find it.  */\n+  if (msp430_check_env_var_for_devices (&derived_devices_csv_loc))\n+    /* devices.csv was not found.  */\n+    return 2;\n+  return parse_devices_csv_1 (derived_devices_csv_loc, mcu_name);\n }\n \n /* Main entry point to load the MCU data for the given -mmcu into"}, {"sha": "9e8029a32cad5f64af14bcc645f791cd20be8b37", "filename": "gcc/config/msp430/msp430-devices.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.h?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -29,3 +29,5 @@ struct t_msp430_mcu_data\n extern struct t_msp430_mcu_data extracted_mcu_data;\n \n void msp430_extract_mcu_data (const char * mcu_name);\n+int msp430_check_env_var_for_devices (char **local_devices_csv_loc);\n+char *msp430_dirname (char *path);"}, {"sha": "b5d3edb42d0bc24e814711a497d0f52104857ec2", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -47,6 +47,8 @@\n #include \"builtins.h\"\n #include \"intl.h\"\n #include \"msp430-devices.h\"\n+#include \"incpath.h\"\n+#include \"prefix.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -3634,6 +3636,27 @@ msp430_incoming_return_addr_rtx (void)\n {\n   return gen_rtx_MEM (Pmode, stack_pointer_rtx);\n }\n+\n+/* If the path to the MSP430-GCC support files has been found by examining\n+   an environment variable (see msp430_check_env_var_for_devices in\n+   msp430-devices.c), or -mdevices-csv-loc=, register this path as an include\n+   directory so the user can #include msp430.h without needing to specify the\n+   path to the support files with -I.  */\n+void\n+msp430_register_pre_includes (const char *sysroot ATTRIBUTE_UNUSED,\n+\t\t\t      const char *iprefix ATTRIBUTE_UNUSED,\n+\t\t\t      int stdinc ATTRIBUTE_UNUSED)\n+{\n+  char *include_dir;\n+  if (msp430_devices_csv_loc)\n+    include_dir = xstrdup (msp430_devices_csv_loc);\n+  else if (msp430_check_env_var_for_devices (&include_dir))\n+    return;\n+  include_dir = msp430_dirname (include_dir);\n+\n+  include_dir = update_path (include_dir, \"\");\n+  add_path (include_dir, INC_SYSTEM, false, false);\n+}\n \f\n /* Instruction generation stuff.  */\n "}, {"sha": "2e70e0d6ab6cf7880dc8d3faa6f6c2d6b17d1a52", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -75,6 +75,7 @@ extern bool msp430x;\n     \"msp430_propagate_region_opt(%* %{muse-lower-region-prefix})} \" \\\n   \"%{mdata-region=*:--data-region=%:\" \\\n     \"msp430_propagate_region_opt(%* %{muse-lower-region-prefix})} \" \\\n+  \"%:msp430_get_linker_devices_include_path()\"\n \n #define DRIVER_SELF_SPECS \\\n   \" %{!mlarge:%{mcode-region=*:%{mdata-region=*:%e-mcode-region and \"\t\\\n@@ -94,6 +95,7 @@ extern const char * msp430_select_cpu (int, const char **);\n extern const char * msp430_set_driver_var (int, const char **);\n extern const char * msp430_check_path_for_devices (int, const char **);\n extern const char *msp430_propagate_region_opt (int, const char **);\n+extern const char *msp430_get_linker_devices_include_path (int, const char **);\n \n /* There must be a trailing comma after the last item, see gcc.c\n    \"static_spec_functions\".  */\n@@ -102,7 +104,9 @@ extern const char *msp430_propagate_region_opt (int, const char **);\n   { \"msp430_select_cpu\", msp430_select_cpu },\t\t\\\n   { \"msp430_set_driver_var\", msp430_set_driver_var },\t\t\\\n   { \"msp430_check_path_for_devices\", msp430_check_path_for_devices }, \\\n-  { \"msp430_propagate_region_opt\", msp430_propagate_region_opt },\n+  { \"msp430_propagate_region_opt\", msp430_propagate_region_opt }, \\\n+  { \"msp430_get_linker_devices_include_path\", \\\n+    msp430_get_linker_devices_include_path },\n \n /* Specify the libraries to include on the linker command line.\n \n@@ -496,6 +500,12 @@ typedef struct\n \n #define TARGET_HAS_NO_HW_DIVIDE (! TARGET_HWMULT)\n \n+void msp430_register_pre_includes (const char *sysroot ATTRIBUTE_UNUSED,\n+\t\t\t\t   const char *iprefix ATTRIBUTE_UNUSED,\n+\t\t\t\t   int stdinc ATTRIBUTE_UNUSED);\n+#undef TARGET_EXTRA_PRE_INCLUDES\n+#define TARGET_EXTRA_PRE_INCLUDES msp430_register_pre_includes\n+\n #undef  USE_SELECT_SECTION_FOR_FUNCTIONS\n #define USE_SELECT_SECTION_FOR_FUNCTIONS 1\n "}, {"sha": "122a23eef115b79380ddae9161b50a48ad760b68", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -23231,8 +23231,33 @@ The ISA and hardware multiply supported for the different MCUs is hard-coded\n into GCC.  However, an external @samp{devices.csv} file can be used to\n extend device support beyond those that have been hard-coded.\n \n-GCC searches for the @samp{devices.csv} file on the paths specified\n-with the @code{-I} and @code{-L} options.\n+GCC searches for the @samp{devices.csv} file using the following methods in the\n+given precedence order, where the first method takes precendence over the\n+second which takes precedence over the third.\n+\n+@table @asis\n+@item Include path specified with @code{-I} and @code{-L}\n+@samp{devices.csv} will be searched for in each of the directories specified by\n+include paths and linker library search paths.\n+@item Path specified by the environment variable @samp{MSP430_GCC_INCLUDE_DIR}\n+Define the value of the global environment variable\n+@samp{MSP430_GCC_INCLUDE_DIR}\n+to the full path to the directory containing devices.csv, and GCC will search\n+this directory for devices.csv.  If devices.csv is found, this directory will\n+also be registered as an include path, and linker library path.  Header files\n+and linker scripts in this directory can therefore be used without manually\n+specifying @code{-I} and @code{-L} on the command line.\n+@item The @samp{msp430-elf/include/devices} directory\n+Finally, GCC will examine @samp{msp430-elf/include/devices} from the\n+toolchain root directory.  This directory does not exist in a default\n+installation, but if the user has created it and copied @samp{devices.csv}\n+there, then the MCU data will be read.  As above, this directory will\n+also be registered as an include path, and linker library path.\n+\n+@end table\n+If none of the above search methods find @samp{devices.csv}, then the\n+hard-coded MCU data is used.\n+\n \n @item -mwarn-mcu\n @itemx -mno-warn-mcu"}, {"sha": "45ec73ab7d2cf0547637590bccfe3ee26f8b7901", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -1,3 +1,20 @@\n+2019-11-04  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.target/msp430/devices/csv-using-env-var.c: New test.\n+\t* gcc.target/msp430/devices/csv-using-installed.c: New test.\n+\t* gcc.target/msp430/devices/csv-using-option.c: New test.\n+\t* gcc.target/msp430/devices/devices-main.c: New test source file.\n+\t* gcc.target/msp430/devices/msp430-devices.h: New test.\n+\t* gcc.target/msp430/msp430.exp (msp430_device_permutations_runtest):\n+\tAdd special cases for csv-using* tests.\n+\tDefine TESTING_HARD_DATA when running tests that use hard-coded device\n+\tdata.\n+\t(get_installed_device_data_path): New.\n+\t(msp430_hide_installed_devices_data): New.\n+\t(msp430_restore_installed_devices_data): New.\n+\t(msp430_test_installed_device_data): New.\n+\t(msp430_install_device_data): New.\n+\n 2019-11-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92301"}, {"sha": "f2c30ee1f5665e916f9987989defc27303bbdd5f", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-using-env-var.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-using-env-var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-using-env-var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-using-env-var.c?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_28\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports f5series hardware multiply\" \"\" { target msp430_hwmul_not_f5 } 0 } */\n+\n+/* This tests that the environment variable MSP430_GCC_INCLUDE_DIR can be used\n+   to specify the path to the directory containing devices.csv.\n+   The variable is set in msp430.exp.  */\n+\n+#include \"devices-main.c\""}, {"sha": "11cbbabe402ae5b09aa63b16033ebf46ed87f014", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-using-installed.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-using-installed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-using-installed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-using-installed.c?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_28\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports f5series hardware multiply\" \"\" { target msp430_hwmul_not_f5 } 0 } */\n+\n+/* This tests that devices.csv can be installed into the\n+   \"$TOOLCHAIN_ROOT/msp430-elf/include/devices/\" and used to read device data.  */\n+\n+#include \"devices-main.c\""}, {"sha": "bb47d536e96c17593893a4ec402f9cc93e2e8cda", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-using-option.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-using-option.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-using-option.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-using-option.c?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_28\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports f5series hardware multiply\" \"\" { target msp430_hwmul_not_f5 } 0 } */\n+\n+/* This tests that the -mdevices-csv-loc option can be used to specify the path\n+   to devices.csv.  */\n+\n+#include \"devices-main.c\""}, {"sha": "8af6ec124bda5961ac321c771c029287f5253171", "filename": "gcc/testsuite/gcc.target/msp430/devices/devices-main.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fdevices-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fdevices-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fdevices-main.c?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -1,3 +1,7 @@\n+#ifndef TESTING_HARD_DATA\n+#include <msp430-devices.h>\n+#endif\n+\n int\n main (void)\n {"}, {"sha": "105bd2bdc5da15181f9b142e891fda74a83095e7", "filename": "gcc/testsuite/gcc.target/msp430/devices/msp430-devices.h", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fmsp430-devices.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fmsp430-devices.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fmsp430-devices.h?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -0,0 +1,3 @@\n+#ifndef __MSP430__\n+#error\n+#endif"}, {"sha": "37586612b9abb32a229d47708b96d6aa6ce9f1f5", "filename": "gcc/testsuite/gcc.target/msp430/msp430.exp", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmsp430.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eabfd452f6f447ca8f3a955e7a4b531884fadb/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmsp430.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmsp430.exp?ref=d7eabfd452f6f447ca8f3a955e7a4b531884fadb", "patch": "@@ -101,6 +101,25 @@ proc msp430_device_permutations_runtest { tests } {\n \tif { ![runtest_file_p $runtests $test_file] } {\n \t    continue\n \t}\n+\t# The device name passed to -mmcu in the csv-using-* tests do not exist\n+\t# in the hard-coded data, to ensure the test fails if the method can't\n+\t# find the device data.\n+\tif { [file tail $test_file] eq \"csv-using-installed.c\" } {\n+\t    msp430_test_installed_device_data $test_file $MSP430_DEFAULT_CFLAGS\n+\t    continue\n+\t} elseif { [file tail $test_file] eq \"csv-using-option.c\" } {\n+\t    dg-runtest $test_file \\\n+\t\t\"-mdevices-csv-loc=[file dirname $test_file]/devices.csv\" \\\n+\t\t\"$MSP430_DEFAULT_CFLAGS\"\n+\t    continue\n+\t} elseif { [file tail $test_file] eq \"csv-using-env-var.c\" } {\n+\t    setenv MSP430_GCC_INCLUDE_DIR [file dirname $test_file]\n+\t    verbose -log \"MSP430_GCC_INCLUDE_DIR=[file dirname $test_file]\"\n+\t    dg-runtest $test_file \"\" \"$MSP430_DEFAULT_CFLAGS\"\n+\t    setenv MSP430_GCC_INCLUDE_DIR \"\"\n+\t    verbose -log \"MSP430_GCC_INCLUDE_DIR=\\\"\\\"\"\n+\t    continue\n+\t}\n \tforeach { mcu_flags } [msp430_get_opts $test_file] {\n \t    if { [string match \"csv-*\" [file tail $test_file]] } {\n \t\t# Specify the path to devices.csv for devices/csv-* tests with -I.\n@@ -115,12 +134,76 @@ proc msp430_device_permutations_runtest { tests } {\n \t    } elseif { [string match \"bad-devices*\" [file tail $test_file]] } {\n \t\tdg-runtest $test_file \"$mcu_flags\" \"-mdevices-csv-loc=[file dirname $test_file]/[file tail $test_file]sv $MSP430_DEFAULT_CFLAGS\"\n \t    } else {\n-\t\tdg-runtest $test_file \"$mcu_flags\" \"$MSP430_DEFAULT_CFLAGS\"\n+\t\tdg-runtest $test_file \"$mcu_flags -DTESTING_HARD_DATA\" \"$MSP430_DEFAULT_CFLAGS\"\n \t    }\n-\t}\n+        }\n+    }\n+}\n+\n+\n+# Return $TOOLCHAIN_ROOT/msp430-elf/include/devices/\n+proc get_installed_device_data_path { } {\n+    set compiler [lindex [regexp -all -inline {\\S+} \\\n+\t[board_info [target_info name] compiler]] 0]\n+    # $compiler is actually a file, but normalize will still get us the desired\n+    # result.\n+    return [file normalize \\\n+\t\"$compiler/../../msp430-elf/include/devices/devices.csv\"]\n+}\n+\n+# If the devices.csv is installed in\n+# $TOOLCHAIN_ROOT/msp430-elf/include/devices/, rename it so it doesn't\n+# interfere with the hard-coded device data tests.\n+proc msp430_hide_installed_devices_data { } {\n+    set devices_path [get_installed_device_data_path]\n+    if { [file exists $devices_path] } {\n+\tfile rename $devices_path \"$devices_path.bak\"\n     }\n }\n \n+# Restore devices.csv if renamed by msp430_hide_installed_devices_data.\n+proc msp430_restore_installed_devices_data { } {\n+    set devices_path [get_installed_device_data_path]\n+    if { [file exists \"$devices_path.bak\"] } {\n+\tfile rename \"$devices_path.bak\" $devices_path \n+    }\n+}\n+\n+proc msp430_test_installed_device_data { name default_cflags } {\n+    global subdir\n+    global env\n+\n+    # The initial value for GCC_EXEC_PREFIX set by target-libpath.exp is not\n+    # correct for cross-compilers so fix it here. GCC fixes the value itself,\n+    # but not after spec functions are executed, which can cause a warning\n+    # about missing devices.csv to be emitted.\n+    set compiler [lindex [regexp -all -inline {\\S+} \\\n+\t[board_info [target_info name] compiler]] 0]\n+    set real_exec_prefix \"[file normalize \"$compiler/../../lib/gcc\"]/\"\n+    setenv GCC_EXEC_PREFIX $real_exec_prefix\n+\n+    msp430_restore_installed_devices_data \n+    set devices_path [get_installed_device_data_path]\n+    if { [file exists $devices_path] } {\n+\tdg-runtest $name \"\" \"$default_cflags\"\n+    } else {\n+\tset shorter_name \"$subdir/[file tail $name]\"\n+\tverbose -log \"$shorter_name not supported, $devices_path doesn't exist.\"\n+\tunsupported $shorter_name\n+    }\n+    msp430_hide_installed_devices_data \n+}\n+\n+proc msp430_install_device_data { testsuite_dir } {\n+    set devices_path [get_installed_device_data_path]\n+    if { [file exists $devices_path] } {\n+        return\n+    }\n+    set installed_path [file dirname $devices_path]\n+    file mkdir $installed_path\n+    file copy $testsuite_dir/msp430-devices.h $testsuite_dir/devices.csv $installed_path\n+}\n+\n # Load support procs.\n load_lib gcc-dg.exp\n \n@@ -138,11 +221,18 @@ if [info exists DEFAULT_CFLAGS] then {\n # Initialize `dg'.\n dg-init\n \n+# Install then hide the devices data now, in case it is already installed. We\n+# don't want it to interfere with tests until we need it to.\n+msp430_install_device_data $srcdir/$subdir/devices\n+msp430_hide_installed_devices_data\n+\n # Main loop.\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n \t\"\" $MSP430_DEFAULT_CFLAGS\n \n msp430_device_permutations_runtest [lsort [glob -nocomplain $srcdir/$subdir/devices/*.\\[cCS\\]]]\n \n+msp430_restore_installed_devices_data \n+\n # All done.\n dg-finish"}]}