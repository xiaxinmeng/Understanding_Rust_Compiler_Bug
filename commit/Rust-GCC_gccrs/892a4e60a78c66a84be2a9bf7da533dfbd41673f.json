{"sha": "892a4e60a78c66a84be2a9bf7da533dfbd41673f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyYTRlNjBhNzhjNjZhODRiZTJhOWJmN2RhNTMzZGZiZDQxNjczZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-15T02:28:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-15T02:28:33Z"}, "message": "ia64.c (spill_restore_mem): Mark iterator initialization as possibly dead.\n\n        * config/ia64/ia64.c (spill_restore_mem): Mark iterator\n        initialization as possibly dead.\n\nFrom-SVN: r48030", "tree": {"sha": "b61f267114d4f2f1c2effb45ff171a124cdbe9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b61f267114d4f2f1c2effb45ff171a124cdbe9da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892a4e60a78c66a84be2a9bf7da533dfbd41673f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892a4e60a78c66a84be2a9bf7da533dfbd41673f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892a4e60a78c66a84be2a9bf7da533dfbd41673f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892a4e60a78c66a84be2a9bf7da533dfbd41673f/comments", "author": null, "committer": null, "parents": [{"sha": "8610ba7050157673e100e3b51c4b42b8f7bf1cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8610ba7050157673e100e3b51c4b42b8f7bf1cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8610ba7050157673e100e3b51c4b42b8f7bf1cea"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "642395bc6ce5e69f2d69f49d9d1fed5e71c75d30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a4e60a78c66a84be2a9bf7da533dfbd41673f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a4e60a78c66a84be2a9bf7da533dfbd41673f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=892a4e60a78c66a84be2a9bf7da533dfbd41673f", "patch": "@@ -1,3 +1,8 @@\n+2001-12-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (spill_restore_mem): Mark iterator \n+\tinitialization as possibly dead.\n+\n 2001-12-14  Richard Henderson  <rth@redhat.com>\n \n \t* regrename.c (mode_change_ok): New."}, {"sha": "b7d3919bd4b9e4b9103824ab439a5f8907fe2ead", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a4e60a78c66a84be2a9bf7da533dfbd41673f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a4e60a78c66a84be2a9bf7da533dfbd41673f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=892a4e60a78c66a84be2a9bf7da533dfbd41673f", "patch": "@@ -1771,7 +1771,7 @@ spill_restore_mem (reg, cfa_off)\n     }\n   else\n     {\n-      rtx seq;\n+      rtx seq, insn;\n \n       if (disp == 0)\n \tseq = gen_movdi (spill_fill_data.iter_reg[iter],\n@@ -1797,17 +1797,26 @@ spill_restore_mem (reg, cfa_off)\n \n       /* Careful for being the first insn in a sequence.  */\n       if (spill_fill_data.init_after)\n-\tspill_fill_data.init_after\n-\t  = emit_insn_after (seq, spill_fill_data.init_after);\n+\tinsn = emit_insn_after (seq, spill_fill_data.init_after);\n       else\n \t{\n \t  rtx first = get_insns ();\n \t  if (first)\n-\t    spill_fill_data.init_after\n-\t      = emit_insn_before (seq, first);\n+\t    insn = emit_insn_before (seq, first);\n \t  else\n-\t    spill_fill_data.init_after = emit_insn (seq);\n+\t    insn = emit_insn (seq);\n \t}\n+      spill_fill_data.init_after = insn;\n+\n+      /* If DISP is 0, we may or may not have a further adjustment\n+\t afterward.  If we do, then the load/store insn may be modified\n+\t to be a post-modify.  If we don't, then this copy may be\n+\t eliminated by copyprop_hardreg_forward, which makes this\n+\t insn garbage, which runs afoul of the sanity check in\n+\t propagate_one_insn.  So mark this insn as legal to delete.  */\n+      if (disp == 0)\n+\tREG_NOTES(insn) = gen_rtx_EXPR_LIST (REG_MAYBE_DEAD, const0_rtx,\n+\t\t\t\t\t     REG_NOTES (insn));\n     }\n \n   mem = gen_rtx_MEM (GET_MODE (reg), spill_fill_data.iter_reg[iter]);"}]}