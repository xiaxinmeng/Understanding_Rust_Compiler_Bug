{"sha": "b7dbc6723a622c22140206005bfb1eb9ac7593f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkYmM2NzIzYTYyMmMyMjE0MDIwNjAwNWJmYjFlYjlhYzc1OTNmOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-14T15:08:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-14T15:08:33Z"}, "message": "DR 2586 fix value category in uses-allocator checks\n\nBecause uses-allocator construction is invariably done with a const\nlvalue the __uses_alloc helper should use a const lvalue for the\nis_constructible checks. Otherwise, it can detect that the type can be\nconstructed from an rvalue, and then an error happens when a const\nlvalue is passed to the constructor instead.\n\nPrior to LWG DR 2586 scoped_allocator_adaptor incorrectly used an rvalue\ntype in the is_constructible check and then used a non-const lvalue for\nthe actual construction. The other components using uses-allocator\nconstruction (tuple and polymorphic_allocator) have always done so with\na const lvalue allocator, although the use of __use_alloc in our\nimplementation meant they behaved the same as scoped_allocator_adaptor\nand incorrectly used rvalues for the is_constructible checks.\n\nIn C++20 the P0591R4 changes mean that all uses-allocator construction\nis defined in terms of the new uses_allocator_construction_args\nfunctions, which always use a const lvalue allocator.\n\nThe changes in this patch ensure that the __use_alloc helper correctly\nmatches the requirements in the standard, consistently using a const\nlvalue allocator for the is_constructible checks and the actual\nconstructor arguments.\n\n\t* doc/xml/manual/intro.xml: Document LWG 2586 status.\n\t* include/bits/uses_allocator.h (__uses_alloc): Use const lvalue\n\tallocator type in is_constructible checks.\n\t* testsuite/20_util/scoped_allocator/69293_neg.cc: Adjust dg-error.\n\t* testsuite/20_util/scoped_allocator/dr2586.cc: New test.\n\t* testsuite/20_util/tuple/cons/allocators.cc: Add test using\n\tproblematic type from LWG 2586 discussion.\n\t* testsuite/20_util/uses_allocator/69293_neg.cc: Adjust dg-error.\n\t* testsuite/20_util/uses_allocator/cons_neg.cc: Likewise.\n\nFrom-SVN: r268882", "tree": {"sha": "a6f827ea26d8782bc9139e813dfb2fc55e163674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6f827ea26d8782bc9139e813dfb2fc55e163674"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7dbc6723a622c22140206005bfb1eb9ac7593f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dbc6723a622c22140206005bfb1eb9ac7593f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7dbc6723a622c22140206005bfb1eb9ac7593f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dbc6723a622c22140206005bfb1eb9ac7593f9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6461bdc48fa3f98015584953598a83f8c7caa506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6461bdc48fa3f98015584953598a83f8c7caa506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6461bdc48fa3f98015584953598a83f8c7caa506"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "4790afba1e721134e61c22ece887f71fe43ddcd4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b7dbc6723a622c22140206005bfb1eb9ac7593f9", "patch": "@@ -1,5 +1,15 @@\n 2019-02-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/intro.xml: Document LWG 2586 status.\n+\t* include/bits/uses_allocator.h (__uses_alloc): Use const lvalue\n+\tallocator type in is_constructible checks.\n+\t* testsuite/20_util/scoped_allocator/69293_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/scoped_allocator/dr2586.cc: New test.\n+\t* testsuite/20_util/tuple/cons/allocators.cc: Add test using\n+\tproblematic type from LWG 2586 discussion.\n+\t* testsuite/20_util/uses_allocator/69293_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/uses_allocator/cons_neg.cc: Likewise.\n+\n \t* configure.ac: Check for C11 timespec_get function.\n \t* crossconfig.m4 (freebsd, linux, gnu, cygwin, solaris, netbsd)\n \t(openbsd): Likewise"}, {"sha": "9761b82fd6559df3be29d4fa6a88043190e238fd", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=b7dbc6723a622c22140206005bfb1eb9ac7593f9", "patch": "@@ -1142,6 +1142,14 @@ requirements of the license of GCC.\n     <listitem><para>Add new constructor.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr2586\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2586\">2586</link>:\n+       <emphasis>Wrong value category used in <code>scoped_allocator_adaptor::construct()</code>\n+       </emphasis>\n+    </term>\n+    <listitem><para>Change internal helper for uses-allocator construction\n+      to always check using const lvalue allocators.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry xml:id=\"manual.bugs.dr2684\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2684\">2684</link>:\n        <emphasis><code>priority_queue</code> lacking comparator typedef\n        </emphasis>"}, {"sha": "015828bee18d126e7cbff50182436bd9de6e5bf4", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=b7dbc6723a622c22140206005bfb1eb9ac7593f9", "patch": "@@ -87,14 +87,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Alloc, typename... _Args>\n     struct __uses_alloc<true, _Tp, _Alloc, _Args...>\n     : conditional<\n-        is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value,\n+        is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>::value,\n         __uses_alloc1<_Alloc>,\n        \t__uses_alloc2<_Alloc>>::type\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2586. Wrong value category used in scoped_allocator_adaptor::construct\n       static_assert(__or_<\n-\t  is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>,\n-\t  is_constructible<_Tp, _Args..., _Alloc>>::value, \"construction with\"\n-\t  \" an allocator must be possible if uses_allocator is true\");\n+\t  is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>,\n+\t  is_constructible<_Tp, _Args..., const _Alloc&>>::value,\n+\t  \"construction with an allocator must be possible\"\n+\t  \" if uses_allocator is true\");\n     };\n \n   template<typename _Tp, typename _Alloc, typename... _Args>"}, {"sha": "69f7280a3de38da13771b90a21e163a4113d1fc3", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc?ref=b7dbc6723a622c22140206005bfb1eb9ac7593f9", "patch": "@@ -46,5 +46,5 @@ test01()\n   scoped_alloc sa;\n   auto p = sa.allocate(1);\n   sa.construct(p);  // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 96 }\n+  // { dg-error \"failed: .* uses_allocator is true\" \"\" { target *-*-* } 0 }\n }"}, {"sha": "11aab8a420bacd36ce6a17cd036b26e3aa909e87", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/dr2586.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fdr2586.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fdr2586.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fdr2586.cc?ref=b7dbc6723a622c22140206005bfb1eb9ac7593f9", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <memory>\n+#include <scoped_allocator>\n+\n+// DR 2586. Wrong value category used in scoped_allocator_adaptor::construct()\n+\n+struct X {\n+  using allocator_type = std::allocator<X>;\n+  X(std::allocator_arg_t, allocator_type&&) { }\n+  X(const allocator_type&) { }\n+};\n+\n+int main() {\n+  std::scoped_allocator_adaptor<std::allocator<X>> sa;\n+  sa.construct(sa.allocate(1));\n+}"}, {"sha": "92938ecb450e6f62d8356e78cfd9b137ebb0ab36", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/allocators.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fallocators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fallocators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fallocators.cc?ref=b7dbc6723a622c22140206005bfb1eb9ac7593f9", "patch": "@@ -181,9 +181,23 @@ void test02()\n   test_type empty = make_tuple();\n }\n \n+void test03()\n+{\n+  struct dr2586\n+  {\n+    using allocator_type = std::allocator<int>;\n+    dr2586(std::allocator_arg_t, allocator_type&&) { }\n+    dr2586(const allocator_type&) { }\n+  };\n+\n+  const dr2586::allocator_type a;\n+  std::tuple<dr2586> t{std::allocator_arg, a};\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}, {"sha": "8f2d4b16a1630e5818448148e40e41acc707b3ba", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc?ref=b7dbc6723a622c22140206005bfb1eb9ac7593f9", "patch": "@@ -44,5 +44,5 @@ test01()\n {\n   alloc_type a;\n   std::tuple<X> t(std::allocator_arg, a); // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 96 }\n+  // { dg-error \"failed: .* uses_allocator is true\" \"\" { target *-*-* } 0 }\n }"}, {"sha": "abad4ec6a3ad260a5ccfc8b40521df801e29a525", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dbc6723a622c22140206005bfb1eb9ac7593f9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=b7dbc6723a622c22140206005bfb1eb9ac7593f9", "patch": "@@ -43,4 +43,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 96 }\n+// { dg-error \"failed: .* uses_allocator is true\" \"\" { target *-*-* } 0 }"}]}