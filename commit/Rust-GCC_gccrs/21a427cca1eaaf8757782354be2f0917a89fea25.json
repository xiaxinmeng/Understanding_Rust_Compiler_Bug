{"sha": "21a427cca1eaaf8757782354be2f0917a89fea25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFhNDI3Y2NhMWVhYWY4NzU3NzgyMzU0YmUyZjA5MTdhODlmZWEyNQ==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "1999-09-22T05:51:44Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "1999-09-22T05:51:44Z"}, "message": "Various fixes for problems discovered stress-testing GC.\n\n\t* config/i386/i386.c (pic_label_name): Change to char pointer.\n\t(global_offset_table): New variable.\n\t(load_pic_register): Fill global_offset_table if it hasn't\n\talready been done.  Allocate pic_label_name dynamically.\n\t* ggc.h (empty_string): New variable.\n\t* ggc-simple.c (empty_string): Likewise.\n\t(init_ggc): Allocate empty_string and add as root.\n\t* stmt.c (digit_strings): New variable.\n\t(init_stmt): Add last_block_end_note as root.  Allocate and\n\tinitialize digit_strings.\n\t(expand_asm_operands): Use empty_string and digit_string instead\n\tof string constants.\n\t* profile.c (init_arc_profiler): Allocate with ggc_alloc_string\n\tinstead of xmalloc.\n\t(output_func_start_profiler): Likewise.\n\t* c-typeck.c (digest_init): Check if init is error_mark_node.\n\nFrom-SVN: r29575", "tree": {"sha": "d77f393f094055cf54780770525095be9da9ac8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d77f393f094055cf54780770525095be9da9ac8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21a427cca1eaaf8757782354be2f0917a89fea25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a427cca1eaaf8757782354be2f0917a89fea25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a427cca1eaaf8757782354be2f0917a89fea25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a427cca1eaaf8757782354be2f0917a89fea25/comments", "author": null, "committer": null, "parents": [{"sha": "5ab00e275b539136f48c62b2363936e92d4272c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab00e275b539136f48c62b2363936e92d4272c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab00e275b539136f48c62b2363936e92d4272c0"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "07836838f41469f7c16eed300ac4cf1470255b09", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=21a427cca1eaaf8757782354be2f0917a89fea25", "patch": "@@ -4494,8 +4494,8 @@ digest_init (type, init, require_constant, constructor_constant)\n   enum tree_code code = TREE_CODE (type);\n   tree inside_init = init;\n \n-  if (init == error_mark_node)\n-    return init;\n+  if (type == error_mark_node || init == error_mark_node)\n+    return error_mark_node;\n \n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n   /* Do not use STRIP_NOPS here.  We do not want an enumerator"}, {"sha": "f654db645d95af7acedb87954f108bb640bc3e30", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=21a427cca1eaaf8757782354be2f0917a89fea25", "patch": "@@ -1357,8 +1357,9 @@ ix86_can_use_return_insn_p ()\n   return nregs == 0 || ! frame_pointer_needed;\n }\n \f\n-static char pic_label_name[32];\n+static char *pic_label_name;\n static int pic_label_output;\n+static char *global_offset_table_name;\n \n /* This function generates code for -fpic that loads %ebx with\n    the return address of the caller and then returns.  */\n@@ -1402,12 +1403,22 @@ load_pic_register ()\n {\n   rtx gotsym, pclab;\n \n-  gotsym = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n+  if (global_offset_table_name == NULL)\n+    {\n+      global_offset_table_name = \n+\tggc_alloc_string (\"_GLOBAL_OFFSET_TABLE_\", 21);\n+      ggc_add_string_root (&global_offset_table_name, 1);\n+    }\n+  gotsym = gen_rtx_SYMBOL_REF (Pmode, global_offset_table_name);\n \n   if (TARGET_DEEP_BRANCH_PREDICTION)\n     {\n-      if (pic_label_name[0] == '\\0')\n-\tASM_GENERATE_INTERNAL_LABEL (pic_label_name, \"LPR\", 0);\n+      if (pic_label_name == NULL) \n+\t{\n+\t  pic_label_name = ggc_alloc_string (NULL, 32);\n+\t  ggc_add_string_root (&pic_label_name, 1);\n+\t  ASM_GENERATE_INTERNAL_LABEL (pic_label_name, \"LPR\", 0);\n+\t}\n       pclab = gen_rtx_MEM (QImode, gen_rtx_SYMBOL_REF (Pmode, pic_label_name));\n     }\n   else"}, {"sha": "536a06e251506313f60f9f28bb7f7b5b5b63ead4", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=21a427cca1eaaf8757782354be2f0917a89fea25", "patch": "@@ -48,6 +48,10 @@\n #define GGC_ANY_MAGIC\t\t((unsigned int)0xa9bacbdc)\n #define GGC_ANY_MAGIC_MARK\t((unsigned int)0xa9bacbdc | 1)\n \n+/* Constants for general use.  */\n+\n+char *empty_string;\n+\n /* Global lists of roots, rtxs, and trees.  */\n \n struct ggc_rtx\n@@ -142,6 +146,9 @@ init_ggc PROTO ((void))\n   dump = fopen (\"zgcdump\", \"w\");\n   setlinebuf (dump);\n #endif\n+\n+  ggc_alloc_string (\"\", 0);\n+  ggc_add_string_root (&empty_string, 1);\n }\n \n /* Start a new GGC context.  Memory allocated in previous contexts"}, {"sha": "49a8df007492984002f504e4907d82311d1f37e2", "filename": "gcc/ggc.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=21a427cca1eaaf8757782354be2f0917a89fea25", "patch": "@@ -42,6 +42,9 @@ union  tree_node;\n struct varasm_status;\n struct varray_head_tag;\n \n+/* Constants for general use.  */\n+extern char *empty_string;\n+\n /* Manipulate global roots that are needed between calls to gc.  */\n void ggc_add_root PROTO ((void *base, int nelt, int size, void (*)(void *)));\n void ggc_add_rtx_root PROTO ((struct rtx_def **, int nelt));"}, {"sha": "9e7cece72d0be751781bb17c8f80d3658553e643", "filename": "gcc/profile.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=21a427cca1eaaf8757782354be2f0917a89fea25", "patch": "@@ -1540,7 +1540,7 @@ static void\n init_arc_profiler ()\n {\n   /* Generate and save a copy of this so it can be shared.  */\n-  char *name = xmalloc (20);\n+  char *name = ggc_alloc_string (NULL, 20);\n   ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 2);\n   profiler_label = gen_rtx_SYMBOL_REF (Pmode, name);\n   ggc_add_rtx_root (&profiler_label, 1);\n@@ -1678,10 +1678,11 @@ output_func_start_profiler ()\n   expand_function_start (fndecl, 0);\n \n   /* Actually generate the code to call __bb_init_func. */\n-  name = xmalloc (20);\n+  name = ggc_alloc_string (NULL, 20);\n   ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 0);\n   table_address = force_reg (Pmode, gen_rtx_SYMBOL_REF (Pmode, name));\n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__bb_init_func\"), 0,\n+  emit_library_call (gen_rtx_SYMBOL_REF \n+\t\t     (Pmode, ggc_alloc_string (\"__bb_init_func\", 14)), 0,\n \t\t     mode, 1, table_address, Pmode);\n \n   expand_function_end (input_filename, lineno, 0);"}, {"sha": "f2180bf4944ddd0154f277f59dfeb4f27f6926fc", "filename": "gcc/stmt.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a427cca1eaaf8757782354be2f0917a89fea25/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=21a427cca1eaaf8757782354be2f0917a89fea25", "patch": "@@ -401,6 +401,9 @@ struct stmt_status\n /* Non-zero if we are using EH to handle cleanus.  */\n static int using_eh_for_cleanups_p = 0;\n \n+/* Character strings, each containing a single decimal digit.  */\n+static char *digit_strings[10];\n+\n \n static int n_occurrences\t\tPROTO((int, const char *));\n static void expand_goto_internal\tPROTO((tree, rtx, rtx));\n@@ -592,7 +595,17 @@ mark_stmt_status (p)\n void\n init_stmt ()\n {\n+  int i;\n+\n   gcc_obstack_init (&stmt_obstack);\n+  ggc_add_rtx_root (&last_block_end_note, 1);\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      digit_strings[i] = ggc_alloc_string (NULL, 1);\n+      digit_strings[i][0] = '0' + i;\n+    }\n+  ggc_add_string_root (digit_strings, 10);\n }\n \n void\n@@ -1547,9 +1560,9 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   argvec = rtvec_alloc (ninputs);\n   constraints = rtvec_alloc (ninputs);\n \n-  body = gen_rtx_ASM_OPERANDS (VOIDmode,\n-\t\t\t       TREE_STRING_POINTER (string), \"\", 0, argvec,\n-\t\t\t       constraints, filename, line);\n+  body = gen_rtx_ASM_OPERANDS (VOIDmode, TREE_STRING_POINTER (string), \n+\t\t\t       empty_string, 0, argvec, constraints, \n+\t\t\t       filename, line);\n \n   MEM_VOLATILE_P (body) = vol;\n \n@@ -1717,14 +1730,12 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   /* For in-out operands, copy output rtx to input rtx. */\n   for (i = 0; i < ninout; i++)\n     {\n-      static char match[9+1][2]\n-\t= {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"};\n       int j = inout_opnum[i];\n \n       XVECEXP (body, 3, ninputs - ninout + i)      /* argvec */\n \t= output_rtx[j];\n       XVECEXP (body, 4, ninputs - ninout + i)      /* constraints */\n-\t= gen_rtx_ASM_INPUT (inout_mode[i], match[j]);\n+\t= gen_rtx_ASM_INPUT (inout_mode[i], digit_strings[j]);\n     }\n \n   /* Now, for each output, construct an rtx"}]}