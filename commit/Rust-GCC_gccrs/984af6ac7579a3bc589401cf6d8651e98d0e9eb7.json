{"sha": "984af6ac7579a3bc589401cf6d8651e98d0e9eb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0YWY2YWM3NTc5YTNiYzU4OTQwMWNmNmQ4NjUxZTk4ZDBlOWViNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-23T12:37:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-23T12:37:17Z"}, "message": "re PR tree-optimization/58464 (Crashes with SIGSEGV (infinite recursion in phi_translate))\n\n2013-09-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58464\n\t* tree-ssa-pre.c (phi_trans_lookup): Remove.\n\t(phi_trans_add): Change to add conditionally on being not\n\tpresent.\n\t(phi_translate_1): Remove recursion detection here.\n\t(phi_translate): Pre-seed the cache with NULL to catch\n\trecursion here in a more generic way.\n\t(bitmap_find_leader): Adjust comment.\n\t(get_representative_for): Dump value-numbers.\n\t(create_expression_by_pieces): Likewise.\n\t(insert_into_preds_of_block): Likewise.\n\n\t* g++.dg/torture/pr58464.C: New testcase.\n\nFrom-SVN: r202826", "tree": {"sha": "e2de6d398c204c91c81cb25db0379e97dbb4ae96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2de6d398c204c91c81cb25db0379e97dbb4ae96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/984af6ac7579a3bc589401cf6d8651e98d0e9eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984af6ac7579a3bc589401cf6d8651e98d0e9eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984af6ac7579a3bc589401cf6d8651e98d0e9eb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984af6ac7579a3bc589401cf6d8651e98d0e9eb7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e26cf7972346f2d75ad9eb8fb3984f104ac2079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e26cf7972346f2d75ad9eb8fb3984f104ac2079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e26cf7972346f2d75ad9eb8fb3984f104ac2079"}], "stats": {"total": 396, "additions": 331, "deletions": 65}, "files": [{"sha": "ae7308d7164cdd082c292c4b8b1aa235715b87fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984af6ac7579a3bc589401cf6d8651e98d0e9eb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984af6ac7579a3bc589401cf6d8651e98d0e9eb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=984af6ac7579a3bc589401cf6d8651e98d0e9eb7", "patch": "@@ -1,3 +1,17 @@\n+2013-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58464\n+\t* tree-ssa-pre.c (phi_trans_lookup): Remove.\n+\t(phi_trans_add): Change to add conditionally on being not\n+\tpresent.\n+\t(phi_translate_1): Remove recursion detection here.\n+\t(phi_translate): Pre-seed the cache with NULL to catch\n+\trecursion here in a more generic way.\n+\t(bitmap_find_leader): Adjust comment.\n+\t(get_representative_for): Dump value-numbers.\n+\t(create_expression_by_pieces): Likewise.\n+\t(insert_into_preds_of_block): Likewise.\n+\n 2013-09-23  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/58475"}, {"sha": "bd6998f77a7c5272418b7b8ff1d321bde884459d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984af6ac7579a3bc589401cf6d8651e98d0e9eb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984af6ac7579a3bc589401cf6d8651e98d0e9eb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=984af6ac7579a3bc589401cf6d8651e98d0e9eb7", "patch": "@@ -1,3 +1,8 @@\n+2013-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58464\n+\t* g++.dg/torture/pr58464.C: New testcase.\n+\n 2013-09-23  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/58475"}, {"sha": "3d9a2279d9939788736e98a998d888711b526c86", "filename": "gcc/testsuite/g++.dg/torture/pr58464.C", "status": "added", "additions": 268, "deletions": 0, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984af6ac7579a3bc589401cf6d8651e98d0e9eb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr58464.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984af6ac7579a3bc589401cf6d8651e98d0e9eb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr58464.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr58464.C?ref=984af6ac7579a3bc589401cf6d8651e98d0e9eb7", "patch": "@@ -0,0 +1,268 @@\n+// { dg-do compile }\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern \"C\" void *memcpy(void *, const void *, size_t);\n+void *xmalloc(size_t);\n+enum {\n+  _sch_isdigit, _sch_isidst, _sch_isidnum\n+};\n+extern const unsigned _sch_istable[256];\n+typedef struct ht cpp_hash_table;\n+typedef struct ht_identifier *hashnode;\n+enum ht_lookup_option {\n+  HT_NO_INSERT\n+};\n+struct ht {\n+  struct cpp_reader *pfile;\n+};\n+hashnode ht_lookup_with_hash(cpp_hash_table *, unsigned char *, size_t, unsigned, ht_lookup_option);\n+typedef unsigned source_location;\n+enum cpp_ttype {\n+  CPP_OTHER, CPP_STRING, CPP_STRING16, CPP_UTF8STRING\n+};\n+struct cpp_token {\n+  source_location src_loc;\n+};\n+typedef int cppchar_t;\n+struct cpp_options {\n+  char user_literals;\n+  unsigned warn_literal_suffix;\n+};\n+enum node_type { };\n+struct cpp_hashnode {\n+  node_type type:6;\n+};\n+enum {\n+  CPP_DL_ERROR\n+};\n+enum {\n+  CPP_W_LITERAL_SUFFIX\n+};\n+bool cpp_error_with_line(cpp_reader *, int, source_location, unsigned, ...);\n+bool cpp_warning_with_line(cpp_reader *, int, source_location, unsigned, const char *);\n+cpp_ttype cpp_userdef_string_add_type(cpp_ttype);\n+cpp_ttype cpp_userdef_char_add_type(cpp_ttype);\n+typedef unsigned char uchar;\n+struct _cpp_buff {\n+  _cpp_buff *next;\n+  unsigned char *base, *cur, *limit;\n+};\n+_cpp_buff *_cpp_get_buff(cpp_reader *, size_t);\n+void _cpp_release_buff(cpp_reader *, _cpp_buff *);\n+unsigned char *_cpp_unaligned_alloc(cpp_reader *, size_t);\n+struct lexer_state {\n+  unsigned skipping;\n+  unsigned angled_headers;\n+};\n+struct _cpp_line_note {\n+  unsigned pos;\n+  unsigned type;\n+};\n+struct cpp_buffer {\n+  unsigned char *cur;\n+  unsigned char *line_base;\n+  _cpp_line_note *notes;\n+  unsigned cur_note;\n+};\n+struct cpp_reader {\n+  cpp_buffer *buffer;\n+  lexer_state state;\n+  _cpp_buff *u_buff;\n+  _cpp_buff *free_buffs;\n+  ht *hash_table;\n+  cpp_options opts;\n+};\n+static void create_literal(cpp_reader *pfile, cpp_token *, uchar *, unsigned len, cpp_ttype type)\n+{\n+  uchar *dest = _cpp_unaligned_alloc(pfile, len + 1);\n+  dest[len] = type;\n+}\n+static void bufring_append(cpp_reader *pfile, uchar *base, size_t len, _cpp_buff **first_buff_p, _cpp_buff **last_buff_p)\n+{\n+  _cpp_buff *first_buff = *first_buff_p;\n+  _cpp_buff *last_buff = *last_buff_p;\n+  if (!first_buff) {\n+    first_buff = last_buff = _cpp_get_buff(pfile, len);\n+  } else if (len > (size_t) (last_buff->limit - last_buff->cur)) {\n+    size_t room = last_buff->limit - last_buff->cur;\n+    last_buff += room;\n+    base += room;\n+  }\n+  memcpy(last_buff->cur, base, len);\n+  last_buff += len;\n+  *first_buff_p = first_buff;\n+  *last_buff_p = last_buff;\n+}\n+bool is_macro(cpp_reader *pfile, uchar *base)\n+{\n+  uchar *cur = base;\n+  if (_sch_istable[*cur] & _sch_isidst)\n+    return 0 ;\n+  int hash = *cur - 113;\n+  ++cur;\n+  hash += cur - base;\n+  cpp_hashnode *result = (cpp_hashnode *) ht_lookup_with_hash(pfile->hash_table, base, cur - base, hash, HT_NO_INSERT);\n+  return !result ? 0 : result->type;\n+}\n+static void lex_raw_string(cpp_reader *pfile, cpp_token *token, uchar *base, uchar *cur)\n+{\n+  uchar raw_prefix[17];\n+  uchar temp_buffer[18];\n+  uchar *orig_base;\n+  unsigned raw_prefix_len = 0, raw_suffix_len;\n+  enum raw_str_phase { RAW_STR_PREFIX, RAW_STR };\n+  raw_str_phase phase = RAW_STR_PREFIX;\n+  cpp_ttype type;\n+  size_t total_len;\n+  size_t temp_buffer_len = 0;\n+  _cpp_buff *first_buff = 0, *last_buff = 0;\n+  size_t raw_prefix_start;\n+  _cpp_line_note *note = &pfile->buffer->notes[pfile->buffer->cur_note];\n+  raw_prefix_start = cur - base;\n+  for (;;) {\n+    cppchar_t c;\n+    while (note->pos)\n+      ++note;\n+    for (; note->pos; ++note) {\n+      switch (note->type) {\n+      case ' ':\n+        bufring_append(pfile, base, cur - base, &first_buff, &last_buff);\n+        base = cur;\n+        bufring_append(pfile, (uchar *) \"\\\\\", 1, &first_buff, &last_buff);\n+        if (__builtin_expect(temp_buffer_len < 17, 0) && base) {\n+          memcpy(temp_buffer + temp_buffer_len, \"\\\\\", 1);\n+          temp_buffer_len++;\n+        }\n+        if (note->type) {\n+          if (__builtin_expect(temp_buffer_len < 17, 0)) {\n+            memcpy(temp_buffer + temp_buffer_len, \" \", 1);\n+            temp_buffer_len++;\n+          }\n+        }\n+        bufring_append(pfile, (uchar *) \"\\n\", 1, &first_buff, &last_buff);\n+        memcpy(temp_buffer + temp_buffer_len, \"\\n\", 1);\n+        temp_buffer_len++;\n+      }\n+    }\n+    temp_buffer[temp_buffer_len++] = c;\n+    if (phase == RAW_STR_PREFIX) {\n+      while (raw_prefix_len < temp_buffer_len) {\n+        switch (raw_prefix[raw_prefix_len]) {\n+        case '\\'':\n+          raw_prefix_len++;\n+        }\n+        if (raw_prefix[raw_prefix_len]) {\n+          int col = cur - pfile->buffer->line_base + 1;\n+          if (raw_prefix_len)\n+            cpp_error_with_line(pfile, CPP_DL_ERROR, token->src_loc, col);\n+          else if (raw_prefix[raw_prefix_len] == '\\n')\n+            cpp_error_with_line(pfile, CPP_DL_ERROR, token->src_loc, col);\n+          else\n+            cpp_error_with_line(pfile, CPP_DL_ERROR, token->src_loc, col, (size_t) raw_prefix);\n+          pfile->buffer->cur = orig_base + 1;\n+          create_literal(pfile, token, orig_base, raw_prefix_start, CPP_OTHER);\n+          _cpp_release_buff(pfile, first_buff);\n+          return;\n+        }\n+        phase = RAW_STR;\n+      }\n+      continue;\n+      (void) raw_suffix_len;\n+    }\n+    while (_sch_istable[*cur] & _sch_isidnum)\n+      ++cur;\n+  }\n+  create_literal(pfile, token, base, cur - base, type);\n+  uchar *dest = _cpp_unaligned_alloc(pfile, total_len + (cur - base));\n+  dest[cur - base] = '\\0';\n+}\n+void lex_string(cpp_reader *pfile, cpp_token *token, uchar *base)\n+{\n+  bool saw_NUL = 0;\n+  uchar *cur;\n+  cppchar_t terminator;\n+  cpp_ttype type;\n+  cur = base;\n+  terminator = *cur++;\n+  if (terminator == 'L' || terminator == 'U') {\n+    terminator = *cur++;\n+  } else if (terminator == 'u') {\n+    terminator = *cur++;\n+    if (terminator == '8')\n+      terminator = *cur++;\n+  }\n+  if (terminator == 'R') {\n+    lex_raw_string(pfile, token, base, cur);\n+    return;\n+  }\n+  if (terminator)\n+    type = base ? (base[1] ? CPP_UTF8STRING : CPP_STRING16) : CPP_STRING;\n+  for (;;) {\n+    cppchar_t c = *cur++;\n+    if (c && pfile->state.angled_headers && *cur)\n+      cur++;\n+    else if (terminator)\n+      break;\n+    else if (c == '\\n')\n+      type = CPP_OTHER;\n+    else\n+      saw_NUL = 1;\n+  }\n+  if (saw_NUL && pfile->state.skipping)\n+    if (pfile->opts.user_literals) {\n+      if (is_macro(pfile, cur))\n+        if (pfile->opts.warn_literal_suffix)\n+          cpp_warning_with_line(pfile, CPP_W_LITERAL_SUFFIX, token->src_loc, 0, \"invalid suffix on literal; C++11 requires \");\n+      if (_sch_istable[*cur] & _sch_isidst) {\n+        type = cpp_userdef_char_add_type(type);\n+        type = cpp_userdef_string_add_type(type);\n+        ++cur;\n+        while (_sch_istable[*cur] & _sch_isidnum)\n+          ++cur;\n+      }\n+    }\n+  pfile->buffer->cur = cur;\n+  create_literal(pfile, token, base, cur - base, type);\n+}\n+_cpp_buff *new_buff(size_t len)\n+{\n+  _cpp_buff *result;\n+  unsigned char *base;\n+  if (len < 8000)\n+    len = 8000;\n+  base = (unsigned char *) xmalloc(sizeof(char) * (len + sizeof(_cpp_buff)));\n+  result = (_cpp_buff *) (base + len);\n+  result->cur = base;\n+  return result;\n+}\n+void _cpp_release_buff(cpp_reader *pfile, _cpp_buff *buff)\n+{\n+  _cpp_buff *end = buff;\n+  while (end->next)\n+    end = end->next;\n+  end->next = pfile->free_buffs;\n+}\n+_cpp_buff *_cpp_get_buff(cpp_reader *pfile, size_t min_size)\n+{\n+  _cpp_buff *result, **p = &pfile->free_buffs;\n+  for (;;) {\n+    size_t size;\n+    if (*p)\n+      return new_buff(min_size);\n+    size = result->limit - result->base;\n+    if (size && size + min_size * 3 / 2)\n+      return result;\n+  }\n+}\n+unsigned char *_cpp_unaligned_alloc(cpp_reader *pfile, size_t len)\n+{\n+  _cpp_buff *buff = pfile->u_buff;\n+  unsigned char *result = buff->cur;\n+  if (len > (size_t) (buff->limit - result)) {\n+    buff = _cpp_get_buff(pfile, len);\n+    buff->next = pfile->u_buff;\n+    result = buff->cur;\n+  }\n+  buff->cur = result + len;\n+  return result;\n+}"}, {"sha": "6c813270eb696525e191405107f76d4d72b6eaaa", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 44, "deletions": 65, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984af6ac7579a3bc589401cf6d8651e98d0e9eb7/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984af6ac7579a3bc589401cf6d8651e98d0e9eb7/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=984af6ac7579a3bc589401cf6d8651e98d0e9eb7", "patch": "@@ -525,46 +525,31 @@ expr_pred_trans_d::equal (const value_type *ve1,\n    expression and predecessor.  */\n static hash_table <expr_pred_trans_d> phi_translate_table;\n \n-/* Search in the phi translation table for the translation of\n-   expression E in basic block PRED.\n-   Return the translated value, if found, NULL otherwise.  */\n-\n-static inline pre_expr\n-phi_trans_lookup (pre_expr e, basic_block pred)\n-{\n-  expr_pred_trans_t *slot;\n-  struct expr_pred_trans_d ept;\n-\n-  ept.e = e;\n-  ept.pred = pred;\n-  ept.hashcode = iterative_hash_hashval_t (pre_expr_d::hash (e), pred->index);\n-  slot = phi_translate_table.find_slot_with_hash (&ept, ept.hashcode,\n-\t\t\t\t   NO_INSERT);\n-  if (!slot)\n-    return NULL;\n-  else\n-    return (*slot)->v;\n-}\n-\n-\n /* Add the tuple mapping from {expression E, basic block PRED} to\n-   value V, to the phi translation table.  */\n+   the phi translation table and return whether it pre-existed.  */\n \n-static inline void\n-phi_trans_add (pre_expr e, pre_expr v, basic_block pred)\n+static inline bool\n+phi_trans_add (expr_pred_trans_t *entry, pre_expr e, basic_block pred)\n {\n   expr_pred_trans_t *slot;\n-  expr_pred_trans_t new_pair = XNEW (struct expr_pred_trans_d);\n-  new_pair->e = e;\n-  new_pair->pred = pred;\n-  new_pair->v = v;\n-  new_pair->hashcode = iterative_hash_hashval_t (pre_expr_d::hash (e),\n-\t\t\t\t\t\t pred->index);\n-\n-  slot = phi_translate_table.find_slot_with_hash (new_pair,\n-\t\t\t\t   new_pair->hashcode, INSERT);\n-  free (*slot);\n-  *slot = new_pair;\n+  expr_pred_trans_d tem;\n+  hashval_t hash = iterative_hash_hashval_t (pre_expr_d::hash (e),\n+\t\t\t\t\t     pred->index);\n+  tem.e = e;\n+  tem.pred = pred;\n+  tem.hashcode = hash;\n+  slot = phi_translate_table.find_slot_with_hash (&tem, hash, INSERT);\n+  if (*slot)\n+    {\n+      *entry = *slot;\n+      return true;\n+    }\n+\n+  *entry = *slot = XNEW (struct expr_pred_trans_d);\n+  (*entry)->e = e;\n+  (*entry)->pred = pred;\n+  (*entry)->hashcode = hash;\n+  return false;\n }\n \n \n@@ -1420,7 +1405,7 @@ get_representative_for (const pre_expr e)\n       print_generic_expr (dump_file, name, 0);\n       fprintf (dump_file, \" for expression:\");\n       print_pre_expr (dump_file, e);\n-      fprintf (dump_file, \"\\n\");\n+      fprintf (dump_file, \" (%04d)\\n\", value_id);\n     }\n \n   return name;\n@@ -1561,23 +1546,16 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\tleader = find_leader_in_sets (op_val_id, set1, set2);\n \t\tif (!leader)\n \t\t  break;\n-\t\t/* Make sure we do not recursively translate ourselves\n-\t\t   like for translating a[n_1] with the leader for\n-\t\t   n_1 being a[n_1].  */\n-\t\tif (get_expression_id (leader) != get_expression_id (expr))\n+\t\topresult = phi_translate (leader, set1, set2, pred, phiblock);\n+\t\tif (!opresult)\n+\t\t  break;\n+\t\tif (opresult != leader)\n \t\t  {\n-\t\t    opresult = phi_translate (leader, set1, set2,\n-\t\t\t\t\t      pred, phiblock);\n-\t\t    if (!opresult)\n+\t\t    tree name = get_representative_for (opresult);\n+\t\t    if (!name)\n \t\t      break;\n-\t\t    if (opresult != leader)\n-\t\t      {\n-\t\t\ttree name = get_representative_for (opresult);\n-\t\t\tif (!name)\n-\t\t\t  break;\n-\t\t\tchanged |= name != op[n];\n-\t\t\top[n] = name;\n-\t\t      }\n+\t\t    changed |= name != op[n];\n+\t\t    op[n] = name;\n \t\t  }\n \t      }\n \t    if (n != 3)\n@@ -1751,6 +1729,7 @@ static pre_expr\n phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t       basic_block pred, basic_block phiblock)\n {\n+  expr_pred_trans_t slot = NULL;\n   pre_expr phitrans;\n \n   if (!expr)\n@@ -1763,21 +1742,21 @@ phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n   if (value_id_constant_p (get_expr_value_id (expr)))\n     return expr;\n \n+  /* Don't add translations of NAMEs as those are cheap to translate.  */\n   if (expr->kind != NAME)\n     {\n-      phitrans = phi_trans_lookup (expr, pred);\n-      if (phitrans)\n-\treturn phitrans;\n+      if (phi_trans_add (&slot, expr, pred))\n+\treturn slot->v;\n+      /* Store NULL for the value we want to return in the case of\n+\t recursing.  */\n+      slot->v = NULL;\n     }\n \n   /* Translate.  */\n   phitrans = phi_translate_1 (expr, set1, set2, pred, phiblock);\n \n-  /* Don't add empty translations to the cache.  Neither add\n-     translations of NAMEs as those are cheap to translate.  */\n-  if (phitrans\n-      && expr->kind != NAME)\n-    phi_trans_add (expr, phitrans, pred);\n+  if (slot)\n+    slot->v = phitrans;\n \n   return phitrans;\n }\n@@ -1822,9 +1801,8 @@ phi_translate_set (bitmap_set_t dest, bitmap_set_t set, basic_block pred,\n }\n \n /* Find the leader for a value (i.e., the name representing that\n-   value) in a given set, and return it.  If STMT is non-NULL it\n-   makes sure the defining statement for the leader dominates it.\n-   Return NULL if no leader is found.  */\n+   value) in a given set, and return it.  Return NULL if no leader\n+   is found.  */\n \n static pre_expr\n bitmap_find_leader (bitmap_set_t set, unsigned int val)\n@@ -3005,7 +2983,8 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n     {\n       fprintf (dump_file, \"Inserted \");\n       print_gimple_stmt (dump_file, newstmt, 0, 0);\n-      fprintf (dump_file, \" in predecessor %d\\n\", block->index);\n+      fprintf (dump_file, \" in predecessor %d (%04d)\\n\",\n+\t       block->index, value_id);\n     }\n \n   return name;\n@@ -3280,7 +3259,7 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n     {\n       fprintf (dump_file, \"Created phi \");\n       print_gimple_stmt (dump_file, phi, 0, 0);\n-      fprintf (dump_file, \" in block %d\\n\", block->index);\n+      fprintf (dump_file, \" in block %d (%04d)\\n\", block->index, val);\n     }\n   pre_stats.phis++;\n   return true;"}]}