{"sha": "87133c45a06aa9c04cb6bc13b3b0733ec43efcec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcxMzNjNDVhMDZhYTljMDRjYjZiYzEzYjNiMDczM2VjNDNlZmNlYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:14:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:14:43Z"}, "message": "poly_int: get_mask_mode\n\nThis patch makes TARGET_GET_MASK_MODE take polynomial nunits and\nvector_size arguments.  The gcc_assert in default_get_mask_mode\nis now handled by the exact_div call in vector_element_size.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* target.def (get_mask_mode): Take the number of units and length\n\tas poly_uint64s rather than unsigned ints.\n\t* targhooks.h (default_get_mask_mode): Update accordingly.\n\t* targhooks.c (default_get_mask_mode): Likewise.\n\t* config/i386/i386.c (ix86_get_mask_mode): Likewise.\n\t* doc/tm.texi: Regenerate.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256130", "tree": {"sha": "e981b33300b133082b80265cf8e61e5559203fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e981b33300b133082b80265cf8e61e5559203fa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87133c45a06aa9c04cb6bc13b3b0733ec43efcec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87133c45a06aa9c04cb6bc13b3b0733ec43efcec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87133c45a06aa9c04cb6bc13b3b0733ec43efcec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/comments", "author": null, "committer": null, "parents": [{"sha": "9d2f08ab97bea3c299cce96a0760904501e002dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2f08ab97bea3c299cce96a0760904501e002dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2f08ab97bea3c299cce96a0760904501e002dd"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "ea38acb902a0482f089a72059980ddc653a734dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87133c45a06aa9c04cb6bc13b3b0733ec43efcec", "patch": "@@ -1,3 +1,14 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target.def (get_mask_mode): Take the number of units and length\n+\tas poly_uint64s rather than unsigned ints.\n+\t* targhooks.h (default_get_mask_mode): Update accordingly.\n+\t* targhooks.c (default_get_mask_mode): Likewise.\n+\t* config/i386/i386.c (ix86_get_mask_mode): Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "a0875a718e33ea1c7094757fa48d025c69b1b036", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=87133c45a06aa9c04cb6bc13b3b0733ec43efcec", "patch": "@@ -48958,7 +48958,7 @@ ix86_autovectorize_vector_sizes (void)\n /* Implemenation of targetm.vectorize.get_mask_mode.  */\n \n static opt_machine_mode\n-ix86_get_mask_mode (unsigned nunits, unsigned vector_size)\n+ix86_get_mask_mode (poly_uint64 nunits, poly_uint64 vector_size)\n {\n   unsigned elem_size = vector_size / nunits;\n "}, {"sha": "344867de49e5659bfa83669fed7fd4d11c427400", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=87133c45a06aa9c04cb6bc13b3b0733ec43efcec", "patch": "@@ -5880,7 +5880,7 @@ mode returned by @code{TARGET_VECTORIZE_PREFERRED_SIMD_MODE}.\n The default is zero which means to not iterate over other vector sizes.\n @end deftypefn\n \n-@deftypefn {Target Hook} opt_machine_mode TARGET_VECTORIZE_GET_MASK_MODE (unsigned @var{nunits}, unsigned @var{length})\n+@deftypefn {Target Hook} opt_machine_mode TARGET_VECTORIZE_GET_MASK_MODE (poly_uint64 @var{nunits}, poly_uint64 @var{length})\n A vector mask is a value that holds one boolean result for every element\n in a vector.  This hook returns the machine mode that should be used to\n represent such a mask when the vector in question is @var{length} bytes"}, {"sha": "c024bb1be6f1767bc9c8d0a022b197f6ece63fcf", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=87133c45a06aa9c04cb6bc13b3b0733ec43efcec", "patch": "@@ -1915,7 +1915,7 @@ The default implementation returns the mode of an integer vector that\\n\\\n is @var{length} bytes long and that contains @var{nunits} elements,\\n\\\n if such a mode exists.\",\n  opt_machine_mode,\n- (unsigned nunits, unsigned length),\n+ (poly_uint64 nunits, poly_uint64 length),\n  default_get_mask_mode)\n \n /* Target builtin that implements vector gather operation.  */"}, {"sha": "f47956a0a12574c0f7242e0ac238f1aa0014b438", "filename": "gcc/targhooks.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=87133c45a06aa9c04cb6bc13b3b0733ec43efcec", "patch": "@@ -1290,17 +1290,17 @@ default_autovectorize_vector_sizes (void)\n   return 0;\n }\n \n-/* By defaults a vector of integers is used as a mask.  */\n+/* By default a vector of integers is used as a mask.  */\n \n opt_machine_mode\n-default_get_mask_mode (unsigned nunits, unsigned vector_size)\n+default_get_mask_mode (poly_uint64 nunits, poly_uint64 vector_size)\n {\n-  unsigned elem_size = vector_size / nunits;\n+  unsigned int elem_size = vector_element_size (vector_size, nunits);\n   scalar_int_mode elem_mode\n     = smallest_int_mode_for_size (elem_size * BITS_PER_UNIT);\n   machine_mode vector_mode;\n \n-  gcc_assert (elem_size * nunits == vector_size);\n+  gcc_assert (known_eq (elem_size * nunits, vector_size));\n \n   if (mode_for_vector (elem_mode, nunits).exists (&vector_mode)\n       && VECTOR_MODE_P (vector_mode)"}, {"sha": "2535c96ae3723aa8ac08ced084e1fd87b892edee", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87133c45a06aa9c04cb6bc13b3b0733ec43efcec/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=87133c45a06aa9c04cb6bc13b3b0733ec43efcec", "patch": "@@ -109,7 +109,7 @@ default_builtin_support_vector_misalignment (machine_mode mode,\n \t\t\t\t\t     int, bool);\n extern machine_mode default_preferred_simd_mode (scalar_mode mode);\n extern unsigned int default_autovectorize_vector_sizes (void);\n-extern opt_machine_mode default_get_mask_mode (unsigned, unsigned);\n+extern opt_machine_mode default_get_mask_mode (poly_uint64, poly_uint64);\n extern void *default_init_cost (struct loop *);\n extern unsigned default_add_stmt_cost (void *, int, enum vect_cost_for_stmt,\n \t\t\t\t       struct _stmt_vec_info *, int,"}]}