{"sha": "ddeb938e91c4bd65fc8a88a3bf1b80126faba225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRlYjkzOGU5MWM0YmQ2NWZjOGE4OGEzYmYxYjgwMTI2ZmFiYTIyNQ==", "commit": {"author": {"name": "Dennis Glatting", "email": "dennisg@gnu.org", "date": "1991-11-19T12:34:41Z"}, "committer": {"name": "Dennis Glatting", "email": "dennisg@gnu.org", "date": "1991-11-19T12:34:41Z"}, "message": "bug in hash_delete().\n\nbug in hash_delete().  It was using void* to obtain nodes to\npass to hash_remove().  The value passed to hash_removed() is a\nentry from the node structure rather than the node itself.  Using\nvoid* removed compiler checking.\nModified to implement cache expansion.\n\nFrom-SVN: r62", "tree": {"sha": "be4f3a8972f5c0f1e045063f504c3089de2adc56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be4f3a8972f5c0f1e045063f504c3089de2adc56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddeb938e91c4bd65fc8a88a3bf1b80126faba225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddeb938e91c4bd65fc8a88a3bf1b80126faba225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddeb938e91c4bd65fc8a88a3bf1b80126faba225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddeb938e91c4bd65fc8a88a3bf1b80126faba225/comments", "author": null, "committer": null, "parents": [{"sha": "5b548897881659b5b232de098debd28cce749b1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b548897881659b5b232de098debd28cce749b1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b548897881659b5b232de098debd28cce749b1b"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "8bde2c6f50de3f74be2d1dac25ac8ed889d743de", "filename": "gcc/objc/hash.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddeb938e91c4bd65fc8a88a3bf1b80126faba225/gcc%2Fobjc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddeb938e91c4bd65fc8a88a3bf1b80126faba225/gcc%2Fobjc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.c?ref=ddeb938e91c4bd65fc8a88a3bf1b80126faba225", "patch": "@@ -16,10 +16,13 @@\n  * along with this program; if not, write to the Free Software\n  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n  * \n-  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/lib/RCS/hash.c,v 0.2 1991/11/07 22:30:54 dennisg Exp dennisg $\n+  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/lib/RCS/hash.c,v 0.3 1991/11/07 23:23:40 dennisg Exp dennisg $\n   $Author: dennisg $\n-  $Date: 1991/11/07 22:30:54 $\n+  $Date: 1991/11/07 23:23:40 $\n   $Log: hash.c,v $\n+ * Revision 0.3  1991/11/07  23:23:40  dennisg\n+ * implemented hash table expansion as suggested by rms.\n+ *\n  * Revision 0.2  1991/11/07  22:30:54  dennisg\n  * added copyleft\n  *\n@@ -31,6 +34,7 @@\n \n #include  <hash.h>\n #include  <ObjC.h>\n+#include\t<ObjC-private.h>\n \n #include  <assert.h>\n #include  <libc.h>\n@@ -43,8 +47,10 @@\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThese equations are \n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpercentages. */\n-#define\tFULLNESS\t\t( 100 / 75 )\n-#define\tEXPANSION\t\t( 135 / 100 )\n+#define\tFULLNESS(cache)\t\\\n+\t((((cache)->sizeOfHash * 75\t) / 100 ) <= (cache)->entriesInHash)\n+#define\tEXPANSION(cache) \\\n+\t(((cache)->sizeOfHash * 175 ) / 100 )\n \n                                                 /* Local forward decl. */\n   u_int hashValue( Cache_t, void* );\n@@ -94,13 +100,13 @@ Cache_t hash_new( u_int sizeOfHash ) {\n \n void hash_delete( Cache_t theCache ) {\n \n-  void* aNode;\n+  CacheNode_t aNode;\n   \n \n                                                 /* Purge all key/value pairs \n                                                   from the table. */\n   while( aNode = hash_next( theCache, NULL ))\n-    hash_remove( theCache, aNode );\n+    hash_remove( theCache, aNode->theKey );\n \n                                                 /* Release the array of nodes \n                                                   and the cache itself. */\n@@ -120,14 +126,14 @@ void hash_add( Cache_t* theCache, void* aKey, void* aValue ) {\n                                                 /* Initialize the new node. */\n   aCacheNode->theKey    = aKey;\n   aCacheNode->theValue  = aValue;\n-  aCacheNode->nextNode  = ( *( **theCache ).theNodeTable )[ indx ];\n+  aCacheNode->nextNode  = ( *( *theCache )->theNodeTable )[ indx ];\n   \n                                                 /* Debugging.\n                                                 \n                                                   Check the list for another \n                                                   key. */\n #ifdef DEBUG\n-    { CacheNode_t checkHashNode = ( *( **theCache ).theNodeTable )[ indx ];\n+    { CacheNode_t checkHashNode = ( *( *theCache )->theNodeTable )[ indx ];\n     \n       while( checkHashNode ) {\n     \n@@ -139,17 +145,17 @@ void hash_add( Cache_t* theCache, void* aKey, void* aValue ) {\n \n                                                 /* Install the node as the\n                                                   first element on the list. */\n-  ( *( **theCache ).theNodeTable )[ indx ] = aCacheNode;\n+  ( *( *theCache )->theNodeTable )[ indx ] = aCacheNode;\n \n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* Bump the number of entries\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tin the cache. */\n-\t++( **theCache ).entriesInHash;\n+\t++( *theCache )->entriesInHash;\n \t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* Check the hash table's\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfullness.   We're going\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tto expand if it is above\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe fullness level. */\n-\tif(( **theCache ).entriesInHash * FULLNESS ) {\n+\tif(FULLNESS( *theCache )) {\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* The hash table has reached\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tits fullness level.  Time to\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texpand it. \n@@ -159,9 +165,12 @@ void hash_add( Cache_t* theCache, void* aKey, void* aValue ) {\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprimitive functions thereby\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincreasing its \n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcorrectness. */\n-\t\tCache_t\t\t\tnewCache = hash_new(( **theCache ).sizeOfHash * EXPANSION );\n+\t\tCache_t\t\t\tnewCache = hash_new(EXPANSION( *theCache ));\n \t\tCacheNode_t\taNode = NULL;\n-\t\t\n+\n+\t\tDEBUG_PRINTF (stderr, \"Expanding cache %#x from %d to %d\\n\",\n+\t\t\t*theCache, ( *theCache )->sizeOfHash, newCache->sizeOfHash);\n+\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* Copy the nodes from the\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfirst hash table to the\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew one. */"}]}