{"sha": "0267732baeb06ec100c1d610197bb88aae1c5123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI2NzczMmJhZWIwNmVjMTAwYzFkNjEwMTk3YmI4OGFhZTFjNTEyMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-03T10:03:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-03T10:03:44Z"}, "message": "[16/n] PR85694: Add detection of averaging operations\n\nThis patch adds detection of average instructions:\n\n       a = (((wide) b + (wide) c) >> 1);\n   --> a = (wide) .AVG_FLOOR (b, c);\n\n       a = (((wide) b + (wide) c + 1) >> 1);\n   --> a = (wide) .AVG_CEIL (b, c);\n\nin cases where users of \"a\" need only the low half of the result,\nmaking the cast to (wide) redundant.  The heavy lifting was done by\nearlier patches.\n\nThis showed up another problem in vectorizable_call: if the call is a\npattern definition statement rather than the main pattern statement,\nthe type of vectorised call might be different from the type of the\noriginal statement.\n\n2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/85694\n\t* doc/md.texi (avgM3_floor, uavgM3_floor, avgM3_ceil)\n\t(uavgM3_ceil): Document new optabs.\n\t* doc/sourcebuild.texi (vect_avg_qi): Document new target selector.\n\t* internal-fn.def (IFN_AVG_FLOOR, IFN_AVG_CEIL): New internal\n\tfunctions.\n\t* optabs.def (savg_floor_optab, uavg_floor_optab, savg_ceil_optab)\n\t(savg_ceil_optab): New optabs.\n\t* tree-vect-patterns.c (vect_recog_average_pattern): New function.\n\t(vect_vect_recog_func_ptrs): Add it.\n\t* tree-vect-stmts.c (vectorizable_call): Get the type of the zero\n\tconstant directly from the associated lhs.\n\ngcc/testsuite/\n\tPR tree-optimization/85694\n\t* lib/target-supports.exp (check_effective_target_vect_avg_qi): New\n\tproc.\n\t* gcc.dg/vect/vect-avg-1.c: New test.\n\t* gcc.dg/vect/vect-avg-2.c: Likewise.\n\t* gcc.dg/vect/vect-avg-3.c: Likewise.\n\t* gcc.dg/vect/vect-avg-4.c: Likewise.\n\t* gcc.dg/vect/vect-avg-5.c: Likewise.\n\t* gcc.dg/vect/vect-avg-6.c: Likewise.\n\t* gcc.dg/vect/vect-avg-7.c: Likewise.\n\t* gcc.dg/vect/vect-avg-8.c: Likewise.\n\t* gcc.dg/vect/vect-avg-9.c: Likewise.\n\t* gcc.dg/vect/vect-avg-10.c: Likewise.\n\t* gcc.dg/vect/vect-avg-11.c: Likewise.\n\t* gcc.dg/vect/vect-avg-12.c: Likewise.\n\t* gcc.dg/vect/vect-avg-13.c: Likewise.\n\t* gcc.dg/vect/vect-avg-14.c: Likewise.\n\nFrom-SVN: r262335", "tree": {"sha": "611c2aafe9c38ce62a4090cc7799136e0a16ad12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/611c2aafe9c38ce62a4090cc7799136e0a16ad12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0267732baeb06ec100c1d610197bb88aae1c5123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0267732baeb06ec100c1d610197bb88aae1c5123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0267732baeb06ec100c1d610197bb88aae1c5123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0267732baeb06ec100c1d610197bb88aae1c5123/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ef79c960aa0967cf0298dc496a30a40d86ebd3c"}], "stats": {"total": 505, "additions": 502, "deletions": 3}, "files": [{"sha": "52b5e29bd2636580be7b0430db6980ca45183c2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -1,3 +1,18 @@\n+2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/85694\n+\t* doc/md.texi (avgM3_floor, uavgM3_floor, avgM3_ceil)\n+\t(uavgM3_ceil): Document new optabs.\n+\t* doc/sourcebuild.texi (vect_avg_qi): Document new target selector.\n+\t* internal-fn.def (IFN_AVG_FLOOR, IFN_AVG_CEIL): New internal\n+\tfunctions.\n+\t* optabs.def (savg_floor_optab, uavg_floor_optab, savg_ceil_optab)\n+\t(savg_ceil_optab): New optabs.\n+\t* tree-vect-patterns.c (vect_recog_average_pattern): New function.\n+\t(vect_vect_recog_func_ptrs): Add it.\n+\t* tree-vect-stmts.c (vectorizable_call): Get the type of the zero\n+\tconstant directly from the associated lhs.\n+\n 2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-patterns.c (vect_split_statement): New function."}, {"sha": "09d6e307c24249b04ec3d76e450837a70c263022", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -5599,6 +5599,34 @@ Other shift and rotate instructions, analogous to the\n Vector shift and rotate instructions that take vectors as operand 2\n instead of a scalar type.\n \n+@cindex @code{avg@var{m}3_floor} instruction pattern\n+@cindex @code{uavg@var{m}3_floor} instruction pattern\n+@item @samp{avg@var{m}3_floor}\n+@itemx @samp{uavg@var{m}3_floor}\n+Signed and unsigned average instructions.  These instructions add\n+operands 1 and 2 without truncation, divide the result by 2,\n+round towards -Inf, and store the result in operand 0.  This is\n+equivalent to the C code:\n+@smallexample\n+narrow op0, op1, op2;\n+@dots{}\n+op0 = (narrow) (((wide) op1 + (wide) op2) >> 1);\n+@end smallexample\n+where the sign of @samp{narrow} determines whether this is a signed\n+or unsigned operation.\n+\n+@cindex @code{avg@var{m}3_ceil} instruction pattern\n+@cindex @code{uavg@var{m}3_ceil} instruction pattern\n+@item @samp{avg@var{m}3_ceil}\n+@itemx @samp{uavg@var{m}3_ceil}\n+Like @samp{avg@var{m}3_floor} and @samp{uavg@var{m}3_floor}, but round\n+towards +Inf.  This is equivalent to the C code:\n+@smallexample\n+narrow op0, op1, op2;\n+@dots{}\n+op0 = (narrow) (((wide) op1 + (wide) op2 + 1) >> 1);\n+@end smallexample\n+\n @cindex @code{bswap@var{m}2} instruction pattern\n @item @samp{bswap@var{m}2}\n Reverse the order of bytes of operand 1 and store the result in operand 0."}, {"sha": "89157079ffb55f3377260e9f8e74876f003fd841", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -1417,6 +1417,10 @@ Target supports Fortran @code{real} kinds larger than @code{real(8)}.\n The target's ABI allows stack variables to be aligned to the preferred\n vector alignment.\n \n+@item vect_avg_qi\n+Target supports both signed and unsigned averaging operations on vectors\n+of bytes.\n+\n @item vect_condition\n Target supports vector conditional operations.\n "}, {"sha": "6293ab36dc94a36fa855783e7bca729a4adda7d3", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -143,6 +143,11 @@ DEF_INTERNAL_OPTAB_FN (FMS, ECF_CONST, fms, ternary)\n DEF_INTERNAL_OPTAB_FN (FNMA, ECF_CONST, fnma, ternary)\n DEF_INTERNAL_OPTAB_FN (FNMS, ECF_CONST, fnms, ternary)\n \n+DEF_INTERNAL_SIGNED_OPTAB_FN (AVG_FLOOR, ECF_CONST | ECF_NOTHROW, first,\n+\t\t\t      savg_floor, uavg_floor, binary)\n+DEF_INTERNAL_SIGNED_OPTAB_FN (AVG_CEIL, ECF_CONST | ECF_NOTHROW, first,\n+\t\t\t      savg_ceil, uavg_ceil, binary)\n+\n DEF_INTERNAL_OPTAB_FN (COND_ADD, ECF_CONST, cond_add, cond_binary)\n DEF_INTERNAL_OPTAB_FN (COND_SUB, ECF_CONST, cond_sub, cond_binary)\n DEF_INTERNAL_OPTAB_FN (COND_MUL, ECF_CONST, cond_smul, cond_binary)"}, {"sha": "707d9696b4ca8f3c03c0a31ae35666e38f2fa352", "filename": "gcc/optabs.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -316,6 +316,10 @@ OPTAB_D (fold_left_plus_optab, \"fold_left_plus_$a\")\n OPTAB_D (extract_last_optab, \"extract_last_$a\")\n OPTAB_D (fold_extract_last_optab, \"fold_extract_last_$a\")\n \n+OPTAB_D (savg_floor_optab, \"avg$a3_floor\")\n+OPTAB_D (uavg_floor_optab, \"uavg$a3_floor\")\n+OPTAB_D (savg_ceil_optab, \"avg$a3_ceil\")\n+OPTAB_D (uavg_ceil_optab, \"uavg$a3_ceil\")\n OPTAB_D (sdot_prod_optab, \"sdot_prod$I$a\")\n OPTAB_D (ssum_widen_optab, \"widen_ssum$I$a3\")\n OPTAB_D (udot_prod_optab, \"udot_prod$I$a\")"}, {"sha": "0ed116fd209c5e7b1d0b205d9c81bdb4072cda17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -1,3 +1,23 @@\n+2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/85694\n+\t* lib/target-supports.exp (check_effective_target_vect_avg_qi): New\n+\tproc.\n+\t* gcc.dg/vect/vect-avg-1.c: New test.\n+\t* gcc.dg/vect/vect-avg-2.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-3.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-4.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-5.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-6.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-7.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-8.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-9.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-10.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-11.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-12.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-13.c: Likewise.\n+\t* gcc.dg/vect/vect-avg-14.c: Likewise.\n+\n 2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/vect/vect-over-widen-5.c: Test that the extensions"}, {"sha": "a7bc7cc90963c8aa8e14d0960d57dc724486247f", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-1.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+\n+#ifndef SIGNEDNESS\n+#define SIGNEDNESS unsigned\n+#endif\n+#ifndef BIAS\n+#define BIAS 0\n+#endif\n+\n+void __attribute__ ((noipa))\n+f (SIGNEDNESS char *restrict a, SIGNEDNESS char *restrict b,\n+   SIGNEDNESS char *restrict c)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    a[i] = (b[i] + c[i] + BIAS) >> 1;\n+}\n+\n+#define BASE1 ((SIGNEDNESS int) -1 < 0 ? -126 : 4)\n+#define BASE2 ((SIGNEDNESS int) -1 < 0 ? -101 : 26)\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS char a[N], b[N], c[N];\n+  for (int i = 0; i < N; ++i)\n+    {\n+      b[i] = BASE1 + i * 5;\n+      c[i] = BASE2 + i * 4;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  f (a, b, c);\n+  for (int i = 0; i < N; ++i)\n+    if (a[i] != ((BASE1 + BASE2 + i * 9 + BIAS) >> 1))\n+      __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_FLOOR} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "2630aeab9139cb74dea1e705428c3caba0d6df86", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-10.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-10.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS signed\n+#define BIAS 2\n+\n+#include \"vect-avg-5.c\"\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_average_pattern: detected\" \"vect\" } } */"}, {"sha": "85292f1b82416b70698619e284ae76f3a3d9410d", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-11.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-11.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+\n+#ifndef SIGNEDNESS\n+#define SIGNEDNESS unsigned\n+#endif\n+#ifndef BIAS\n+#define BIAS 0\n+#endif\n+\n+void __attribute__ ((noipa))\n+f (SIGNEDNESS char *restrict a, SIGNEDNESS char *restrict b,\n+   SIGNEDNESS char *restrict c)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int tmp = b[i];\n+      tmp ^= 0x55;\n+      tmp += BIAS;\n+      tmp += c[i];\n+      tmp >>= 1;\n+      tmp |= 0x40;\n+      a[i] = tmp;\n+    }\n+}\n+\n+#define BASE1 ((SIGNEDNESS int) -1 < 0 ? -126 : 4)\n+#define BASE2 ((SIGNEDNESS int) -1 < 0 ? -101 : 26)\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS char a[N], b[N], c[N];\n+  for (int i = 0; i < N; ++i)\n+    {\n+      b[i] = BASE1 + i * 5;\n+      c[i] = BASE2 + i * 4;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  f (a, b, c);\n+  for (int i = 0; i < N; ++i)\n+    if (a[i] != (((((BASE1 + i * 5) ^ 0x55)\n+\t\t   + (BASE2 + i * 4)\n+\t\t   + BIAS) >> 1) | 0x40))\n+      __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_FLOOR} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "f40331ea1bf91beaea7dc164e267760738a922d5", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-12.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-12.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS signed\n+\n+#include \"vect-avg-11.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_FLOOR} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "7957c0e4adc3691f52cac02bed111591aeda9a24", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-13.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-13.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS unsigned\n+#define BIAS 1\n+\n+#include \"vect-avg-11.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_CEIL} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "8ab11f74e942a7034b688e69071eceff4aa17b01", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-14.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-14.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS signed\n+#define BIAS 1\n+\n+#include \"vect-avg-11.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_CEIL} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "b5586b5f01309d278c91a8a81eac816a1503cdb2", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-2.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS signed\n+\n+#include \"vect-avg-1.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_FLOOR} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "104fe9613937a21c7079d0e49a18da2e0b559d70", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-3.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS unsigned\n+#define BIAS 1\n+\n+#include \"vect-avg-1.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_CEIL} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "92181d7fc3d9ffae96b58de24ed5298a6846ed06", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-4.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS signed\n+#define BIAS 1\n+\n+#include \"vect-avg-1.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_CEIL} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "6c43575f448325e84975999c2e8aa91afb525f87", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-5.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-5.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+\n+#ifndef SIGNEDNESS\n+#define SIGNEDNESS unsigned\n+#endif\n+#ifndef BIAS\n+#define BIAS 0\n+#endif\n+\n+void __attribute__ ((noipa))\n+f (SIGNEDNESS char *restrict a, SIGNEDNESS char *restrict b,\n+   SIGNEDNESS char *restrict c)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int tmp1 = b[i] + BIAS;\n+      int tmp2 = tmp1 + c[i];\n+      a[i] = tmp2 >> 1;\n+    }\n+}\n+\n+#define BASE1 ((SIGNEDNESS int) -1 < 0 ? -126 : 4)\n+#define BASE2 ((SIGNEDNESS int) -1 < 0 ? -101 : 26)\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS char a[N], b[N], c[N];\n+  for (int i = 0; i < N; ++i)\n+    {\n+      b[i] = BASE1 + i * 5;\n+      c[i] = BASE2 + i * 4;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  f (a, b, c);\n+  for (int i = 0; i < N; ++i)\n+    if (a[i] != ((BASE1 + BASE2 + i * 9 + BIAS) >> 1))\n+      __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_FLOOR} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "efe97b8a5f1ce482c28042354e20293d0ecfc932", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-6.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS signed\n+\n+#include \"vect-avg-5.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_FLOOR} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "62a8474f690a927d80832c4a95af0118407224ec", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-7.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS unsigned\n+#define BIAS 1\n+\n+#include \"vect-avg-5.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_CEIL} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "cc7c4cde6b036b9820a52e12710daadb05135fa0", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-8.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS signed\n+#define BIAS 1\n+\n+#include \"vect-avg-5.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_CEIL} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-not {vector\\([^\\n]*short} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "80865b6661abbe764e579a1ed4aa8cad278085bc", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-9.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-9.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS unsigned\n+#define BIAS 2\n+\n+#include \"vect-avg-5.c\"\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_average_pattern: detected\" \"vect\" } } */"}, {"sha": "fc189f31b71db56062ac70c200c4cd45b4aa47a7", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -6313,6 +6313,13 @@ proc check_effective_target_vect_usad_char { } {\n     return $et_vect_usad_char_saved($et_index)\n }\n \n+# Return 1 if the target plus current options supports both signed\n+# and unsigned average operations on vectors of bytes.\n+\n+proc check_effective_target_vect_avg_qi {} {\n+    return 0\n+}\n+\n # Return 1 if the target plus current options supports a vector\n # demotion (packing) of shorts (to chars) and ints (to shorts) \n # using modulo arithmetic, 0 otherwise."}, {"sha": "51defa08627b2fa8a475e0266124335a6f2bc950", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -1721,6 +1721,153 @@ vect_recog_over_widening_pattern (vec<gimple *> *stmts, tree *type_out)\n   return pattern_stmt;\n }\n \n+/* Recognize the patterns:\n+\n+\t    ATYPE a;  // narrower than TYPE\n+\t    BTYPE b;  // narrower than TYPE\n+\t(1) TYPE avg = ((TYPE) a + (TYPE) b) >> 1;\n+     or (2) TYPE avg = ((TYPE) a + (TYPE) b + 1) >> 1;\n+\n+   where only the bottom half of avg is used.  Try to transform them into:\n+\n+\t(1) NTYPE avg' = .AVG_FLOOR ((NTYPE) a, (NTYPE) b);\n+     or (2) NTYPE avg' = .AVG_CEIL ((NTYPE) a, (NTYPE) b);\n+\n+  followed by:\n+\n+\t    TYPE avg = (TYPE) avg';\n+\n+  where NTYPE is no wider than half of TYPE.  Since only the bottom half\n+  of avg is used, all or part of the cast of avg' should become redundant.  */\n+\n+static gimple *\n+vect_recog_average_pattern (vec<gimple *> *stmts, tree *type_out)\n+{\n+  /* Check for a shift right by one bit.  */\n+  gassign *last_stmt = dyn_cast <gassign *> (stmts->pop ());\n+  if (!last_stmt\n+      || gimple_assign_rhs_code (last_stmt) != RSHIFT_EXPR\n+      || !integer_onep (gimple_assign_rhs2 (last_stmt)))\n+    return NULL;\n+\n+  stmt_vec_info last_stmt_info = vinfo_for_stmt (last_stmt);\n+  vec_info *vinfo = last_stmt_info->vinfo;\n+\n+  /* Check that the shift result is wider than the users of the\n+     result need (i.e. that narrowing would be a natural choice).  */\n+  tree lhs = gimple_assign_lhs (last_stmt);\n+  tree type = TREE_TYPE (lhs);\n+  unsigned int target_precision\n+    = vect_element_precision (last_stmt_info->min_output_precision);\n+  if (!INTEGRAL_TYPE_P (type) || target_precision >= TYPE_PRECISION (type))\n+    return NULL;\n+\n+  /* Get the definition of the shift input.  */\n+  tree rshift_rhs = gimple_assign_rhs1 (last_stmt);\n+  stmt_vec_info plus_stmt_info = vect_get_internal_def (vinfo, rshift_rhs);\n+  if (!plus_stmt_info)\n+    return NULL;\n+\n+  /* Check whether the shift input can be seen as a tree of additions on\n+     2 or 3 widened inputs.\n+\n+     Note that the pattern should be a win even if the result of one or\n+     more additions is reused elsewhere: if the pattern matches, we'd be\n+     replacing 2N RSHIFT_EXPRs and N VEC_PACK_*s with N IFN_AVG_*s.  */\n+  internal_fn ifn = IFN_AVG_FLOOR;\n+  vect_unpromoted_value unprom[3];\n+  tree new_type;\n+  unsigned int nops = vect_widened_op_tree (plus_stmt_info, PLUS_EXPR,\n+\t\t\t\t\t    PLUS_EXPR, false, 3,\n+\t\t\t\t\t    unprom, &new_type);\n+  if (nops == 0)\n+    return NULL;\n+  if (nops == 3)\n+    {\n+      /* Check that one operand is 1.  */\n+      unsigned int i;\n+      for (i = 0; i < 3; ++i)\n+\tif (integer_onep (unprom[i].op))\n+\t  break;\n+      if (i == 3)\n+\treturn NULL;\n+      /* Throw away the 1 operand and keep the other two.  */\n+      if (i < 2)\n+\tunprom[i] = unprom[2];\n+      ifn = IFN_AVG_CEIL;\n+    }\n+\n+  vect_pattern_detected (\"vect_recog_average_pattern\", last_stmt);\n+\n+  /* We know that:\n+\n+     (a) the operation can be viewed as:\n+\n+\t   TYPE widened0 = (TYPE) UNPROM[0];\n+\t   TYPE widened1 = (TYPE) UNPROM[1];\n+\t   TYPE tmp1 = widened0 + widened1 {+ 1};\n+\t   TYPE tmp2 = tmp1 >> 1;   // LAST_STMT_INFO\n+\n+     (b) the first two statements are equivalent to:\n+\n+\t   TYPE widened0 = (TYPE) (NEW_TYPE) UNPROM[0];\n+\t   TYPE widened1 = (TYPE) (NEW_TYPE) UNPROM[1];\n+\n+     (c) vect_recog_over_widening_pattern has already tried to narrow TYPE\n+\t where sensible;\n+\n+     (d) all the operations can be performed correctly at twice the width of\n+\t NEW_TYPE, due to the nature of the average operation; and\n+\n+     (e) users of the result of the right shift need only TARGET_PRECISION\n+\t bits, where TARGET_PRECISION is no more than half of TYPE's\n+\t precision.\n+\n+     Under these circumstances, the only situation in which NEW_TYPE\n+     could be narrower than TARGET_PRECISION is if widened0, widened1\n+     and an addition result are all used more than once.  Thus we can\n+     treat any widening of UNPROM[0] and UNPROM[1] to TARGET_PRECISION\n+     as \"free\", whereas widening the result of the average instruction\n+     from NEW_TYPE to TARGET_PRECISION would be a new operation.  It's\n+     therefore better not to go narrower than TARGET_PRECISION.  */\n+  if (TYPE_PRECISION (new_type) < target_precision)\n+    new_type = build_nonstandard_integer_type (target_precision,\n+\t\t\t\t\t       TYPE_UNSIGNED (new_type));\n+\n+  /* Check for target support.  */\n+  tree new_vectype = get_vectype_for_scalar_type (new_type);\n+  if (!new_vectype\n+      || !direct_internal_fn_supported_p (ifn, new_vectype,\n+\t\t\t\t\t  OPTIMIZE_FOR_SPEED))\n+    return NULL;\n+\n+  /* The IR requires a valid vector type for the cast result, even though\n+     it's likely to be discarded.  */\n+  *type_out = get_vectype_for_scalar_type (type);\n+  if (!*type_out)\n+    return NULL;\n+\n+  /* Generate the IFN_AVG* call.  */\n+  tree new_var = vect_recog_temp_ssa_var (new_type, NULL);\n+  tree new_ops[2];\n+  vect_convert_inputs (last_stmt_info, 2, new_ops, new_type,\n+\t\t       unprom, new_vectype);\n+  gcall *average_stmt = gimple_build_call_internal (ifn, 2, new_ops[0],\n+\t\t\t\t\t\t    new_ops[1]);\n+  gimple_call_set_lhs (average_stmt, new_var);\n+  gimple_set_location (average_stmt, gimple_location (last_stmt));\n+\n+  if (dump_enabled_p ())\n+    {\n+      dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t       \"created pattern stmt: \");\n+      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, average_stmt, 0);\n+    }\n+\n+  stmts->safe_push (last_stmt);\n+  return vect_convert_output (last_stmt_info, type, average_stmt, new_vectype);\n+}\n+\n /* Recognize cases in which the input to a cast is wider than its\n    output, and the input is fed by a widening operation.  Fold this\n    by removing the unnecessary intermediate widening.  E.g.:\n@@ -4670,6 +4817,9 @@ struct vect_recog_func\n    less comples onex (widen_sum only after dot_prod or sad for example).  */\n static vect_recog_func vect_vect_recog_func_ptrs[] = {\n   { vect_recog_over_widening_pattern, \"over_widening\" },\n+  /* Must come after over_widening, which narrows the shift as much as\n+     possible beforehand.  */\n+  { vect_recog_average_pattern, \"average\" },\n   { vect_recog_cast_forwprop_pattern, \"cast_forwprop\" },\n   { vect_recog_widen_mult_pattern, \"widen_mult\" },\n   { vect_recog_dot_prod_pattern, \"dot_prod\" },"}, {"sha": "ea303bd7023512e09eff323c4389fbade03a5e8a", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0267732baeb06ec100c1d610197bb88aae1c5123/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=0267732baeb06ec100c1d610197bb88aae1c5123", "patch": "@@ -3116,7 +3116,7 @@ vectorizable_call (gimple *gs, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   gcall *stmt;\n   tree vec_dest;\n   tree scalar_dest;\n-  tree op, type;\n+  tree op;\n   tree vec_oprnd0 = NULL_TREE, vec_oprnd1 = NULL_TREE;\n   stmt_vec_info stmt_info = vinfo_for_stmt (gs), prev_stmt_info;\n   tree vectype_out, vectype_in;\n@@ -3592,12 +3592,11 @@ vectorizable_call (gimple *gs, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   if (slp_node)\n     return true;\n \n-  type = TREE_TYPE (scalar_dest);\n   if (is_pattern_stmt_p (stmt_info))\n     stmt_info = vinfo_for_stmt (STMT_VINFO_RELATED_STMT (stmt_info));\n   lhs = gimple_get_lhs (stmt_info->stmt);\n \n-  new_stmt = gimple_build_assign (lhs, build_zero_cst (type));\n+  new_stmt = gimple_build_assign (lhs, build_zero_cst (TREE_TYPE (lhs)));\n   set_vinfo_for_stmt (new_stmt, stmt_info);\n   set_vinfo_for_stmt (stmt_info->stmt, NULL);\n   STMT_VINFO_STMT (stmt_info) = new_stmt;"}]}