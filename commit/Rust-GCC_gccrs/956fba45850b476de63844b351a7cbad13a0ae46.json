{"sha": "956fba45850b476de63844b351a7cbad13a0ae46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU2ZmJhNDU4NTBiNDc2ZGU2Mzg0NGIzNTFhN2NiYWQxM2EwYWU0Ng==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-06-16T22:50:16Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-06-16T22:50:16Z"}, "message": "re PR d/90603 (ICE in functionParameters, at d/dmd/expression.c:1553)\n\n\tPR d/90603\nd/dmd: Merge upstream dmd 792f0fdf2\n\nFixes segmentation fault in functionParameters, and other related\nsemantic bugs in forward or recursively referenced declarations.\n\nReviewed-on: https://github.com/dlang/dmd/pull/10046\n\nFrom-SVN: r272366", "tree": {"sha": "eb5cdd6e7f9857dc9c52767d850df73fb6425beb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb5cdd6e7f9857dc9c52767d850df73fb6425beb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/956fba45850b476de63844b351a7cbad13a0ae46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956fba45850b476de63844b351a7cbad13a0ae46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956fba45850b476de63844b351a7cbad13a0ae46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956fba45850b476de63844b351a7cbad13a0ae46/comments", "author": null, "committer": null, "parents": [{"sha": "bbd54be5a73dc82548f7fc3d17542caed679fab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd54be5a73dc82548f7fc3d17542caed679fab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbd54be5a73dc82548f7fc3d17542caed679fab8"}], "stats": {"total": 259, "additions": 210, "deletions": 49}, "files": [{"sha": "d208aea3717cee2dbab73402e7e0e126ca9a72f0", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -1,4 +1,4 @@\n-6e44734ccbeb78252a52e129a67fefb313679948\n+792f0fdf249b21531dc91690024827f4f9ecbb97\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "bbe2f8a9d72e9fa822e933582e78143394cfea04", "filename": "gcc/d/dmd/dclass.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdclass.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -481,7 +481,7 @@ void ClassDeclaration::semantic(Scope *sc)\n             baseClass = tc->sym;\n             b->sym = baseClass;\n \n-            if (tc->sym->_scope && tc->sym->baseok < BASEOKdone)\n+            if (tc->sym->baseok < BASEOKdone)\n                 resolveBase(this, sc, scx, tc->sym); // Try to resolve forward reference\n             if (tc->sym->baseok < BASEOKdone)\n             {\n@@ -533,7 +533,7 @@ void ClassDeclaration::semantic(Scope *sc)\n \n             b->sym = tc->sym;\n \n-            if (tc->sym->_scope && tc->sym->baseok < BASEOKdone)\n+            if (tc->sym->baseok < BASEOKdone)\n                 resolveBase(this, sc, scx, tc->sym); // Try to resolve forward reference\n             if (tc->sym->baseok < BASEOKdone)\n             {\n@@ -918,10 +918,10 @@ bool ClassDeclaration::isBaseOf(ClassDeclaration *cd, int *poffset)\n     {\n         /* cd->baseClass might not be set if cd is forward referenced.\n          */\n-        if (!cd->baseClass && cd->_scope && !cd->isInterfaceDeclaration())\n+        if (!cd->baseClass && cd->semanticRun < PASSsemanticdone && !cd->isInterfaceDeclaration())\n         {\n             cd->semantic(NULL);\n-            if (!cd->baseClass && cd->_scope)\n+            if (!cd->baseClass && cd->semanticRun < PASSsemanticdone)\n                 cd->error(\"base class is forward referenced by %s\", toChars());\n         }\n \n@@ -1574,7 +1574,7 @@ void InterfaceDeclaration::semantic(Scope *sc)\n \n             b->sym = tc->sym;\n \n-            if (tc->sym->_scope && tc->sym->baseok < BASEOKdone)\n+            if (tc->sym->baseok < BASEOKdone)\n                 resolveBase(this, sc, scx, tc->sym); // Try to resolve forward reference\n             if (tc->sym->baseok < BASEOKdone)\n             {"}, {"sha": "0018d9501f057c5f7a3590a4384668ac57eb6447", "filename": "gcc/d/dmd/declaration.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdeclaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdeclaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -865,6 +865,11 @@ void VarDeclaration::semantic(Scope *sc)\n         _scope = NULL;\n     }\n \n+    if (!sc)\n+        return;\n+\n+    semanticRun = PASSsemantic;\n+\n     /* Pick up storage classes from context, but except synchronized,\n      * override, abstract, and final.\n      */\n@@ -1038,6 +1043,7 @@ void VarDeclaration::semantic(Scope *sc)\n                 else if (isAliasThisTuple(e))\n                 {\n                     VarDeclaration *v = copyToTemp(0, \"__tup\", e);\n+                    v->semantic(sc);\n                     VarExp *ve = new VarExp(loc, v);\n                     ve->type = e->type;\n \n@@ -1439,7 +1445,7 @@ void VarDeclaration::semantic(Scope *sc)\n                         if (!e)\n                         {\n                             error(\"is not a static and cannot have static initializer\");\n-                            return;\n+                            e = new ErrorExp();\n                         }\n                     }\n                     ei = new ExpInitializer(_init->loc, e);"}, {"sha": "ff261bc0ad087de8f81e4a7229221359072d01b3", "filename": "gcc/d/dmd/denum.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdenum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdenum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdenum.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -110,6 +110,9 @@ void EnumDeclaration::semantic(Scope *sc)\n         _scope = NULL;\n     }\n \n+    if (!sc)\n+        return;\n+\n     parent = sc->parent;\n     type = type->semantic(loc, sc);\n "}, {"sha": "5f7d7fdc09e3a1ac41397e465679a99c11f96452", "filename": "gcc/d/dmd/dimport.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdimport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdimport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdimport.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -197,12 +197,18 @@ void Import::importAll(Scope *sc)\n void Import::semantic(Scope *sc)\n {\n     //printf(\"Import::semantic('%s') %s\\n\", toPrettyChars(), id->toChars());\n+    if (semanticRun > PASSinit)\n+        return;\n \n     if (_scope)\n     {\n         sc = _scope;\n         _scope = NULL;\n     }\n+    if (!sc)\n+        return;\n+\n+    semanticRun = PASSsemantic;\n \n     // Load if not already done so\n     if (!mod)\n@@ -291,6 +297,8 @@ void Import::semantic(Scope *sc)\n         sc = sc->pop();\n     }\n \n+    semanticRun = PASSsemanticdone;\n+\n     // object self-imports itself, so skip that (Bugzilla 7547)\n     // don't list pseudo modules __entrypoint.d, __main.d (Bugzilla 11117, 11164)\n     if (global.params.moduleDeps != NULL &&"}, {"sha": "a1658bbd051e75ec12b2223ff2d27b94c2e94507", "filename": "gcc/d/dmd/dinterpret.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdinterpret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdinterpret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -2085,9 +2085,9 @@ class Interpreter : public Visitor\n             if (v->ident == Id::ctfe)\n                 return new IntegerExp(loc, 1, Type::tbool);\n \n-            if (!v->originalType && v->_scope)   // semantic() not yet run\n+            if (!v->originalType && v->semanticRun < PASSsemanticdone) // semantic() not yet run\n             {\n-                v->semantic (v->_scope);\n+                v->semantic(NULL);\n                 if (v->type->ty == Terror)\n                     return CTFEExp::cantexp;\n             }"}, {"sha": "22da0a3be3d7914a2f2ffef4d130aacc4c4afd6a", "filename": "gcc/d/dmd/dstruct.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdstruct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdstruct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdstruct.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -116,7 +116,7 @@ void semanticTypeInfo(Scope *sc, Type *t)\n \n                 // Bugzilla 15149, if the typeid operand type comes from a\n                 // result of auto function, it may be yet speculative.\n-                unSpeculative(sc, sd);\n+                // unSpeculative(sc, sd);\n             }\n \n             /* Step 2: If the TypeInfo generation requires sd.semantic3, run it later.\n@@ -324,6 +324,7 @@ void AggregateDeclaration::semantic3(Scope *sc)\n \n     if (sd)\n         sd->semanticTypeInfoMembers();\n+    semanticRun = PASSsemantic3done;\n }\n \n /***************************************\n@@ -359,7 +360,7 @@ bool AggregateDeclaration::determineFields()\n \n             AggregateDeclaration *ad = ((SV *)param)->agg;\n \n-            if (v->_scope)\n+            if (v->semanticRun < PASSsemanticdone)\n                 v->semantic(NULL);\n             // Note: Aggregate fields or size could have determined during v->semantic.\n             if (ad->sizeok != SIZEOKnone)"}, {"sha": "b5e3662a9e30b855fb181731009aa7b8d1ef78f1", "filename": "gcc/d/dmd/dtemplate.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdtemplate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fdtemplate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtemplate.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -685,6 +685,7 @@ void TemplateDeclaration::semantic(Scope *sc)\n     /* BUG: should check:\n      *  o no virtual functions or non-static data members of classes\n      */\n+    semanticRun = PASSsemanticdone;\n }\n \n const char *TemplateDeclaration::kind() const\n@@ -2169,12 +2170,14 @@ void functionResolve(Match *m, Dsymbol *dstart, Loc loc, Scope *sc,\n             if (tiargs && tiargs->dim > 0)\n                 return 0;\n \n-            if (fd->semanticRun == PASSinit && fd->_scope)\n+            // constructors need a valid scope in order to detect semantic errors\n+            if (!fd->isCtorDeclaration() &&\n+                fd->semanticRun < PASSsemanticdone)\n             {\n                 Ungag ungag = fd->ungagSpeculative();\n-                fd->semantic(fd->_scope);\n+                fd->semantic(NULL);\n             }\n-            if (fd->semanticRun == PASSinit)\n+            if (fd->semanticRun < PASSsemanticdone)\n             {\n                 ::error(loc, \"forward reference to template %s\", fd->toChars());\n                 return 1;"}, {"sha": "c674392095e21c6b756b3adbdc42c66001819e2b", "filename": "gcc/d/dmd/expression.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fexpression.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fexpression.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -516,9 +516,9 @@ static bool checkPropertyCall(Expression *e)\n             tf = (TypeFunction *)ce->f->type;\n             /* If a forward reference to ce->f, try to resolve it\n              */\n-            if (!tf->deco && ce->f->_scope)\n+            if (!tf->deco && ce->f->semanticRun < PASSsemanticdone)\n             {\n-                ce->f->semantic(ce->f->_scope);\n+                ce->f->semantic(NULL);\n                 tf = (TypeFunction *)ce->f->type;\n             }\n         }\n@@ -1125,6 +1125,8 @@ bool arrayExpressionToCommonType(Scope *sc, Expressions *exps, Type **pt)\n     Type *t0 = NULL;\n     Expression *e0 = NULL;      // dead-store to prevent spurious warning\n     size_t j0 = ~0;             // dead-store to prevent spurious warning\n+    bool foundType = false;\n+\n     for (size_t i = 0; i < exps->dim; i++)\n     {\n         Expression *e = (*exps)[i];\n@@ -1140,6 +1142,7 @@ bool arrayExpressionToCommonType(Scope *sc, Expressions *exps, Type **pt)\n         }\n         if (e->op == TOKtype)\n         {\n+            foundType = true;   // do not break immediately, there might be more errors\n             e->checkValue();    // report an error \"type T has no value\"\n             t0 = Type::terror;\n             continue;\n@@ -1158,7 +1161,7 @@ bool arrayExpressionToCommonType(Scope *sc, Expressions *exps, Type **pt)\n \n         e = doCopyOrMove(sc, e);\n \n-        if (t0 && !t0->equals(e->type))\n+        if (!foundType && t0 && !t0->equals(e->type))\n         {\n             /* This applies ?: to merge the types. It's backwards;\n              * ?: should call this function to merge types."}, {"sha": "c23e332b180f626108b73ba3a9db3f94b93dca04", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -397,6 +397,7 @@ class ExpressionSemanticVisitor : public Visitor\n             // Create the magic __ctfe bool variable\n             VarDeclaration *vd = new VarDeclaration(exp->loc, Type::tbool, Id::ctfe, NULL);\n             vd->storage_class |= STCtemp;\n+            vd->semanticRun = PASSsemanticdone;\n             Expression *e = new VarExp(exp->loc, vd);\n             e = semantic(e, sc);\n             result = e;\n@@ -1441,7 +1442,10 @@ class ExpressionSemanticVisitor : public Visitor\n \n     void visit(VarExp *e)\n     {\n-        if (FuncDeclaration *fd = e->var->isFuncDeclaration())\n+        VarDeclaration *vd = e->var->isVarDeclaration();\n+        FuncDeclaration *fd = e->var->isFuncDeclaration();\n+\n+        if (fd)\n         {\n             //printf(\"L%d fd = %s\\n\", __LINE__, f->toChars());\n             if (!fd->functionSemantic())\n@@ -1452,23 +1456,30 @@ class ExpressionSemanticVisitor : public Visitor\n             e->type = e->var->type;\n \n         if (e->type && !e->type->deco)\n+        {\n+            Declaration *decl = e->var->isDeclaration();\n+            if (decl)\n+                decl->inuse++;\n             e->type = e->type->semantic(e->loc, sc);\n+            if (decl)\n+                decl->inuse--;\n+        }\n \n         /* Fix for 1161 doesn't work because it causes protection\n          * problems when instantiating imported templates passing private\n          * variables as alias template parameters.\n          */\n         //checkAccess(e->loc, sc, NULL, e->var);\n \n-        if (VarDeclaration *vd = e->var->isVarDeclaration())\n+        if (vd)\n         {\n             if (vd->checkNestedReference(sc, e->loc))\n                 return setError();\n             // Bugzilla 12025: If the variable is not actually used in runtime code,\n             // the purity violation error is redundant.\n             //checkPurity(sc, vd);\n         }\n-        else if (FuncDeclaration *fd = e->var->isFuncDeclaration())\n+        else if (fd)\n         {\n             // TODO: If fd isn't yet resolved its overload, the checkNestedReference\n             // call would cause incorrect validation.\n@@ -1962,8 +1973,8 @@ class ExpressionSemanticVisitor : public Visitor\n                         ClassDeclaration *cd = ((TypeClass *)e->targ)->sym;\n                         Parameters *args = new Parameters;\n                         args->reserve(cd->baseclasses->dim);\n-                        if (cd->_scope && !cd->symtab)\n-                            cd->semantic(cd->_scope);\n+                        if (cd->semanticRun < PASSsemanticdone)\n+                            cd->semantic(NULL);\n                         for (size_t i = 0; i < cd->baseclasses->dim; i++)\n                         {\n                             BaseClass *b = (*cd->baseclasses)[i];"}, {"sha": "11e4b2f721ba495475b6c31a3d136f442d3d1157", "filename": "gcc/d/dmd/func.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Ffunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Ffunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -471,6 +471,9 @@ void FuncDeclaration::semantic(Scope *sc)\n         _scope = NULL;\n     }\n \n+    if (!sc || errors)\n+        return;\n+\n     parent = sc->parent;\n     Dsymbol *parent = toParent();\n \n@@ -932,6 +935,7 @@ void FuncDeclaration::semantic(Scope *sc)\n \n             case -2:\n                 // can't determine because of forward references\n+                errors = true;\n                 return;\n \n             default:\n@@ -1049,6 +1053,7 @@ void FuncDeclaration::semantic(Scope *sc)\n \n                 case -2:\n                     // can't determine because of forward references\n+                    errors = true;\n                     return;\n \n                 default:"}, {"sha": "b76b5baad25536db35e323af3df7fe6bdedcf6c4", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -4672,7 +4672,7 @@ Type *TypeAArray::semantic(Loc loc, Scope *sc)\n         /* AA's need typeid(index).equals() and getHash(). Issue error if not correctly set up.\n          */\n         StructDeclaration *sd = ((TypeStruct *)tbase)->sym;\n-        if (sd->_scope)\n+        if (sd->semanticRun < PASSsemanticdone)\n             sd->semantic(NULL);\n \n         // duplicate a part of StructDeclaration::semanticTypeInfoMembers\n@@ -4739,7 +4739,7 @@ Type *TypeAArray::semantic(Loc loc, Scope *sc)\n     else if (tbase->ty == Tclass && !((TypeClass *)tbase)->sym->isInterfaceDeclaration())\n     {\n         ClassDeclaration *cd = ((TypeClass *)tbase)->sym;\n-        if (cd->_scope)\n+        if (cd->semanticRun < PASSsemanticdone)\n             cd->semantic(NULL);\n \n         if (!ClassDeclaration::object)\n@@ -5336,7 +5336,7 @@ int Type::covariant(Type *t, StorageClass *pstc, bool fix17349)\n \n         // If t1n is forward referenced:\n         ClassDeclaration *cd = ((TypeClass *)t1n)->sym;\n-        if (cd->_scope)\n+        if (cd->semanticRun < PASSsemanticdone && !cd->isBaseInfoComplete())\n             cd->semantic(NULL);\n         if (!cd->isBaseInfoComplete())\n         {\n@@ -5448,6 +5448,13 @@ Type *TypeFunction::semantic(Loc loc, Scope *sc)\n \n     bool errors = false;\n \n+    if (inuse > 500)\n+    {\n+        inuse = 0;\n+        ::error(loc, \"recursive type\");\n+        return Type::terror;\n+    }\n+\n     /* Copy in order to not mess up original.\n      * This can produce redundant copies if inferring return type,\n      * as semantic() will get called again on this.\n@@ -5532,9 +5539,9 @@ Type *TypeFunction::semantic(Loc loc, Scope *sc)\n         for (size_t i = 0; i < dim; i++)\n         {\n             Parameter *fparam = Parameter::getNth(tf->parameters, i);\n-            tf->inuse++;\n+            inuse++;\n             fparam->type = fparam->type->semantic(loc, argsc);\n-            if (tf->inuse == 1) tf->inuse--;\n+            inuse--;\n \n             if (fparam->type->ty == Terror)\n             {\n@@ -5776,13 +5783,6 @@ Type *TypeFunction::semantic(Loc loc, Scope *sc)\n     }\n     tf->iswild = wildparams;\n \n-    if (tf->inuse)\n-    {\n-        error(loc, \"recursive type\");\n-        tf->inuse = 0;\n-        errors = true;\n-    }\n-\n     if (tf->isproperty && (tf->varargs || Parameter::dim(tf->parameters) > 2))\n     {\n         error(loc, \"properties can only have zero, one, or two parameter\");\n@@ -7444,8 +7444,8 @@ Expression *TypeEnum::dotExp(Scope *sc, Expression *e, Identifier *ident, int fl\n     if (ident == Id::_mangleof)\n         return getProperty(e->loc, ident, flag & 1);\n \n-    if (sym->_scope)\n-        sym->semantic(sym->_scope);\n+    if (sym->semanticRun < PASSsemanticdone)\n+        sym->semantic(NULL);\n     if (!sym->members)\n     {\n         if (sym->isSpecial())\n@@ -7914,8 +7914,8 @@ Expression *TypeStruct::dotExp(Scope *sc, Expression *e, Identifier *ident, int\n                 return e;\n             }\n         }\n-        if (d->semanticRun == PASSinit && d->_scope)\n-            d->semantic(d->_scope);\n+        if (d->semanticRun == PASSinit)\n+            d->semantic(NULL);\n         checkAccess(e->loc, sc, e, d);\n         VarExp *ve = new VarExp(e->loc, d);\n         if (d->isVarDeclaration() && d->needThis())\n@@ -8443,7 +8443,7 @@ Expression *TypeClass::dotExp(Scope *sc, Expression *e, Identifier *ident, int f\n \n         if (ident == Id::outer && sym->vthis)\n         {\n-            if (sym->vthis->_scope)\n+            if (sym->vthis->semanticRun == PASSinit)\n                 sym->vthis->semantic(NULL);\n \n             if (ClassDeclaration *cdp = sym->toParent2()->isClassDeclaration())\n@@ -8670,8 +8670,8 @@ Expression *TypeClass::dotExp(Scope *sc, Expression *e, Identifier *ident, int f\n             }\n         }\n         //printf(\"e = %s, d = %s\\n\", e->toChars(), d->toChars());\n-        if (d->semanticRun == PASSinit && d->_scope)\n-            d->semantic(d->_scope);\n+        if (d->semanticRun == PASSinit)\n+            d->semantic(NULL);\n         checkAccess(e->loc, sc, e, d);\n         VarExp *ve = new VarExp(e->loc, d);\n         if (d->isVarDeclaration() && d->needThis())\n@@ -8727,9 +8727,9 @@ MATCH TypeClass::implicitConvTo(Type *to)\n     if (cdto)\n     {\n         //printf(\"TypeClass::implicitConvTo(to = '%s') %s, isbase = %d %d\\n\", to->toChars(), toChars(), cdto->isBaseInfoComplete(), sym->isBaseInfoComplete());\n-        if (cdto->_scope && !cdto->isBaseInfoComplete())\n+        if (cdto->semanticRun < PASSsemanticdone && !cdto->isBaseInfoComplete())\n             cdto->semantic(NULL);\n-        if (sym->_scope && !sym->isBaseInfoComplete())\n+        if (sym->semanticRun < PASSsemanticdone && !sym->isBaseInfoComplete())\n             sym->semantic(NULL);\n         if (cdto->isBaseOf(sym, NULL) && MODimplicitConv(mod, to->mod))\n         {"}, {"sha": "2e702ba9d86690eeedbc500dad21c0852215fb9b", "filename": "gcc/d/dmd/optimize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Foptimize.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -34,8 +34,8 @@ Expression *expandVar(int result, VarDeclaration *v)\n     Expression *e = NULL;\n     if (!v)\n         return e;\n-    if (!v->originalType && v->_scope)   // semantic() not yet run\n-        v->semantic (v->_scope);\n+    if (!v->originalType && v->semanticRun < PASSsemanticdone) // semantic() not yet run\n+        v->semantic(NULL);\n \n     if (v->isConst() || v->isImmutable() || v->storage_class & STCmanifest)\n     {"}, {"sha": "450b3f4f5948c0cbebdf94ead6c79c0332f058a2", "filename": "gcc/d/dmd/statement.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fstatement.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fstatement.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatement.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -1312,7 +1312,7 @@ Statement *OnScopeStatement::syntaxCopy()\n     return new OnScopeStatement(loc, tok, statement->syntaxCopy());\n }\n \n-Statement *OnScopeStatement::scopeCode(Scope *, Statement **sentry, Statement **sexception, Statement **sfinally)\n+Statement *OnScopeStatement::scopeCode(Scope *sc, Statement **sentry, Statement **sexception, Statement **sfinally)\n {\n     //printf(\"OnScopeStatement::scopeCode()\\n\");\n     //print();\n@@ -1340,6 +1340,7 @@ Statement *OnScopeStatement::scopeCode(Scope *, Statement **sentry, Statement **\n              *  sfinally: if (!x) statement;\n              */\n             VarDeclaration *v = copyToTemp(0, \"__os\", new IntegerExp(Loc(), 0, Type::tbool));\n+            v->semantic(sc);\n             *sentry = new ExpStatement(loc, v);\n \n             Expression *e = new IntegerExp(Loc(), 1, Type::tbool);"}, {"sha": "cc2b63e24666a499d5634b9a150984860c54e27f", "filename": "gcc/d/dmd/statementsem.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fstatementsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Fstatementsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -1074,6 +1074,7 @@ class StatementSemanticVisitor : public Visitor\n                     else\n                     {\n                         r = copyToTemp(0, \"__r\", fs->aggr);\n+                        r->semantic(sc);\n                         init = new ExpStatement(loc, r);\n                         if (vinit)\n                             init = new CompoundStatement(loc, new ExpStatement(loc, vinit), init);\n@@ -1106,6 +1107,7 @@ class StatementSemanticVisitor : public Visitor\n                     else\n                     {\n                         VarDeclaration *vd = copyToTemp(STCref, \"__front\", einit);\n+                        vd->semantic(sc);\n                         makeargs = new ExpStatement(loc, vd);\n \n                         Type *tfront = NULL;\n@@ -2986,6 +2988,7 @@ class StatementSemanticVisitor : public Visitor\n              *  try { body } finally { _d_monitorexit(tmp); }\n              */\n             VarDeclaration *tmp = copyToTemp(0, \"__sync\", ss->exp);\n+            tmp->semantic(sc);\n \n             Statements *cs = new Statements();\n             cs->push(new ExpStatement(ss->loc, tmp));\n@@ -3133,6 +3136,7 @@ class StatementSemanticVisitor : public Visitor\n                      * }\n                      */\n                     VarDeclaration *tmp = copyToTemp(0, \"__withtmp\", ws->exp);\n+                    tmp->semantic(sc);\n                     ExpStatement *es = new ExpStatement(ws->loc, tmp);\n                     ws->exp = new VarExp(ws->loc, tmp);\n                     Statement *ss = new ScopeStatement(ws->loc, new CompoundStatement(ws->loc, es, ws), ws->endloc);"}, {"sha": "2430383526849c3c5e5d2c7c41d47b3762e0681e", "filename": "gcc/d/dmd/traits.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Ftraits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Fd%2Fdmd%2Ftraits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftraits.c?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -671,8 +671,8 @@ Expression *semanticTraits(TraitsExp *e, Scope *sc)\n                 e->error(\"argument %s has no protection\", o->toChars());\n             return new ErrorExp();\n         }\n-        if (s->_scope)\n-            s->semantic(s->_scope);\n+        if (s->semanticRun == PASSinit)\n+            s->semantic(NULL);\n \n         const char *protName = protectionToChars(s->prot().kind);   // TODO: How about package(names)\n         assert(protName);\n@@ -1240,7 +1240,7 @@ Expression *semanticTraits(TraitsExp *e, Scope *sc)\n         ClassDeclaration *cd = sds->isClassDeclaration();\n         if (cd && e->ident == Id::allMembers)\n         {\n-            if (cd->_scope)\n+            if (cd->semanticRun < PASSsemanticdone)\n                 cd->semantic(NULL);    // Bugzilla 13668: Try to resolve forward reference\n \n             struct PushBaseMembers"}, {"sha": "e2036fceb9fc82b8bf249b8aa13052db01cb127a", "filename": "gcc/testsuite/gdc.test/compilable/imports/test16214b.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest16214b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest16214b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest16214b.d?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -0,0 +1,10 @@\n+module test16214b;\n+import test16214a;\n+\n+struct Appender() { int[] arr; }\n+struct Tuple() { alias A = Appender!(); }\n+\n+class EventLoop\n+{\n+    auto f() { auto x = [Tuple!().init]; }\n+}"}, {"sha": "2ea64d9032947c0c0a817a748b790045754518b8", "filename": "gcc/testsuite/gdc.test/compilable/test16214a.d", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest16214a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest16214a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest16214a.d?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -0,0 +1,7 @@\n+// EXTRA_SOURCES: imports/test16214b.d\n+// REQUIRED_ARGS: -Icompilable/imports\n+\n+module test16214a;\n+import test16214b;\n+\n+class LibasyncEventLoop : EventLoop {}"}, {"sha": "daa79b74a194d494d75fffd6eceb8c7a4cee8ea6", "filename": "gcc/testsuite/gdc.test/fail_compilation/b15875.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb15875.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb15875.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb15875.d?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -0,0 +1,10 @@\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/b15875.d(9): Error: circular reference to variable `a`\n+fail_compilation/b15875.d(10): Error: circular reference to `b15875.f`\n+---\n+*/\n+// https://issues.dlang.org/show_bug.cgi?id=15875\n+// https://issues.dlang.org/show_bug.cgi?id=17290\n+d o(int[a]a)(){}\n+f.T f(){}"}, {"sha": "7b79cf0666fc4fee99c1b1d4e75f2b1ac07d0ed0", "filename": "gcc/testsuite/gdc.test/fail_compilation/b17285.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb17285.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb17285.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb17285.d?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -0,0 +1,15 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/b17285.d(14): Error: type `ONE` has no value\n+fail_compilation/b17285.d(14): Error: type `TWO` has no value\n+fail_compilation/b17285.d(14): Error: cannot implicitly convert expression `ONE` of type `b17285.ONE` to `int`\n+---\n+*/\n+\n+class ONE {}\n+enum TWO;\n+\n+void foo() {\n+    foreach(key; [ONE, TWO, 1]) {}\n+}"}, {"sha": "8663512fd2a88713f720fdca8886ff76a17d98b0", "filename": "gcc/testsuite/gdc.test/fail_compilation/b19691.d", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19691.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19691.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19691.d?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -0,0 +1,20 @@\n+// REQUIRED_ARGS: -de\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/b19691.d(13): Error: forward reference to template `this`\n+fail_compilation/b19691.d(19): Deprecation: constructor `b19691.S2.this` all parameters have default arguments, but structs cannot have default constructors.\n+---\n+*/\n+// https://issues.dlang.org/show_bug.cgi?id=19691\n+module b19691;\n+\n+struct S1 {\n+    this(T...)(T) {\n+        S2(\"\");\n+    }\n+}\n+\n+struct S2 {\n+    this(string) {}\n+    this(S1 s = null) {}\n+}"}, {"sha": "21d0e9080251d5dd63bd1e38b8a0c5e9ecb58b92", "filename": "gcc/testsuite/gdc.test/fail_compilation/b19691e.d", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19691e.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19691e.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19691e.d?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -0,0 +1,24 @@\n+// REQUIRED_ARGS: -de\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/b19691e.d(17): Error: forward reference to template `this`\n+fail_compilation/b19691e.d(17): Error: constructor `b19691e.S2.this(S1 s = \"\")` is not callable using argument types `(string)`\n+fail_compilation/b19691e.d(17): Error: forward reference to template `this`\n+fail_compilation/b19691e.d(23): Deprecation: constructor `b19691e.S2.this` all parameters have default arguments, but structs cannot have default constructors.\n+---\n+*/\n+// https://issues.dlang.org/show_bug.cgi?id=19691\n+module b19691e;\n+\n+struct S1\n+{\n+    this(T)(T)\n+    {\n+        S2(\"\");\n+    }\n+}\n+\n+struct S2\n+{\n+    this(S1 s = \"\"){}\n+}"}, {"sha": "6a48b886e036167331c3168e6eb8fea5f0639b04", "filename": "gcc/testsuite/gdc.test/fail_compilation/b19717.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19717.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19717.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19717.d?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -0,0 +1,16 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/b19717.d(16): Error: undefined identifier `Foo`, did you mean function `foo`?\n+fail_compilation/b19717.d(13): Error: forward reference to template `foo`\n+fail_compilation/b19717.d(13): Error: forward reference to inferred return type of function call `foo()`\n+---\n+*/\n+\n+enum bar = __traits(getMember, mixin(__MODULE__), \"foo\");\n+\n+auto foo() {\n+\treturn foo();\n+}\n+\n+void foo(Foo) {}"}, {"sha": "79a9de0ad7ce6b59cb3ccca51fdf5e09835869b5", "filename": "gcc/testsuite/gdc.test/fail_compilation/b19717a.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19717a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956fba45850b476de63844b351a7cbad13a0ae46/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19717a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb19717a.d?ref=956fba45850b476de63844b351a7cbad13a0ae46", "patch": "@@ -0,0 +1,14 @@\n+// REQUIRED_ARGS: -de\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/b19717a.d(14): Error: forward reference to template `a`\n+fail_compilation/b19717a.d(14): Error: forward reference to template `a`\n+fail_compilation/b19717a.d(14): Error: none of the overloads of `a` are callable using argument types `()`, candidates are:\n+fail_compilation/b19717a.d(13):        `b19717a.a(int b)`\n+fail_compilation/b19717a.d(14):        `b19717a.a(int b = a)`\n+---\n+*/\n+module b19717a;\n+\n+auto a(int b) {}\n+auto a(int b = a) {}"}]}