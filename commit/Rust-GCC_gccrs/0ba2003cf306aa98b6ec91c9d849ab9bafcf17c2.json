{"sha": "0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJhMjAwM2NmMzA2YWE5OGI2ZWM5MWM5ZDg0OWFiOWJhZmNmMTdjMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-30T15:44:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-30T15:44:38Z"}, "message": "c++: Fix up attribute rollbacks in cp_parser_statement\n\nDuring the OpenMP directives using C++ attribute syntax work, I've noticed\nthat cp_parser_statement when parsing various block declarations that do\nnot allow attribute-specifier-seq at the start rolls back the attributes\nonly if std_attrs is non-NULL (i.e. some attributes have been parsed),\nbut doesn't roll back if some tokens were parsed as attribute-specifier-seq,\nbut didn't yield any attributes (e.g. [[]][[]][[]][[]]), which means\nwe accept those empty attributes even in places where they don't appear\nin the grammar.\n\nThe following patch fixes that by instead checking if there are any\ntokens to roll back.  This makes the parsing handle the first\nfunction the same as the second one (where some attribute appears).\n\nThe testcase contains two xfails, using namespace ... apparently\nallows attributes at the start and the attributes shall appeartain to\nusing in that case.  To be fixed incrementally.\n\n2021-07-30  Jakub Jelinek  <jakub@redhat.com>\n\n\t* parser.c (cp_parser_statement): Rollback attributes not just\n\twhen std_attrs is non-NULL, but whenever\n\tcp_parser_std_attribute_spec_seq parsed any tokens.\n\n\t* g++.dg/cpp0x/gen-attrs-76.C: New test.", "tree": {"sha": "41ff2dc33aad41fbda41722670e552777510dd80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41ff2dc33aad41fbda41722670e552777510dd80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ffdb9849be033540ad680836cd4cc592098ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ffdb9849be033540ad680836cd4cc592098ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ffdb9849be033540ad680836cd4cc592098ca4"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "97078f90155f86212076402ada5e38bc9a6e1b33", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2", "patch": "@@ -11904,6 +11904,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n   cp_token *token;\n   location_t statement_location, attrs_loc;\n   bool in_omp_attribute_pragma = parser->lexer->in_omp_attribute_pragma;\n+  bool has_std_attrs;\n \n  restart:\n   if (if_p != NULL)\n@@ -11912,7 +11913,8 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n   statement = NULL_TREE;\n \n   saved_token_sentinel saved_tokens (parser->lexer);\n-  attrs_loc = cp_lexer_peek_token (parser->lexer)->location;\n+  token = cp_lexer_peek_token (parser->lexer);\n+  attrs_loc = token->location;\n   if (c_dialect_objc ())\n     /* In obj-c++, seeing '[[' might be the either the beginning of\n        c++11 attributes, or a nested objc-message-expression.  So\n@@ -11926,6 +11928,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n       if (!cp_parser_parse_definitely (parser))\n \tstd_attrs = NULL_TREE;\n     }\n+  has_std_attrs = cp_lexer_peek_token (parser->lexer) != token;\n \n   if (std_attrs && (flag_openmp || flag_openmp_simd))\n     std_attrs = cp_parser_handle_statement_omp_attributes (parser, std_attrs);\n@@ -11994,7 +11997,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \n \tcase RID_NAMESPACE:\n \t  /* This must be a namespace alias definition.  */\n-\t  if (std_attrs != NULL_TREE)\n+\t  if (has_std_attrs)\n \t    {\n \t      /* Attributes should be parsed as part of the\n \t\t declaration, so let's un-parse them.  */\n@@ -12099,7 +12102,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n     {\n       if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n \t{\n-\t  if (std_attrs != NULL_TREE)\n+\t  if (has_std_attrs)\n \t    /* Attributes should be parsed as part of the declaration,\n \t       so let's un-parse them.  */\n \t    saved_tokens.rollback();\n@@ -12111,7 +12114,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \t  if (cp_parser_parse_definitely (parser))\n \t    return;\n \t  /* It didn't work, restore the post-attribute position.  */\n-\t  if (std_attrs)\n+\t  if (has_std_attrs)\n \t    cp_lexer_set_token_position (parser->lexer, statement_token);\n \t}\n       /* All preceding labels have been parsed at this point.  */"}, {"sha": "cbda8de327e3b17c1200e87689310394b201ce10", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-76.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-76.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-76.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-76.C?ref=0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wno-attributes\" }\n+\n+namespace N {}\n+namespace O { typedef int T; };\n+\n+void\n+foo ()\n+{\n+  [[]] asm (\"\");\t\t\t\t// { dg-error \"expected\" }\n+  [[]] __extension__ asm (\"\");\t\t\t// { dg-error \"expected\" }\n+  __extension__ [[]] asm (\"\");\t\t\t// { dg-error \"expected\" }\n+  [[]] namespace M = ::N;\t\t\t// { dg-error \"expected\" }\n+  [[]] using namespace N;\t\t\t// { dg-bogus \"expected\" \"\" { xfail *-*-* } }\n+  [[]] using O::T;\t\t\t\t// { dg-error \"expected\" }\n+  [[]] __label__ foo;\t\t\t\t// { dg-error \"expected\" }\n+  [[]] static_assert (true, \"\");\t\t// { dg-error \"expected\" }\n+}\n+\n+void\n+bar ()\n+{\n+  [[gnu::unused]] asm (\"\");\t\t\t// { dg-error \"expected\" }\n+  [[gnu::unused]] __extension__ asm (\"\");\t// { dg-error \"expected\" }\n+  __extension__ [[gnu::unused]] asm (\"\");\t// { dg-error \"expected\" }\n+  [[gnu::unused]] namespace M = ::N;\t\t// { dg-error \"expected\" }\n+  [[gnu::unused]] using namespace N;\t\t// { dg-bogus \"expected\" \"\" { xfail *-*-* } }\n+  [[gnu::unused]] using O::T;\t\t\t// { dg-error \"expected\" }\n+  [[gnu::unused]] __label__ foo;\t\t// { dg-error \"expected\" }\n+  [[gnu::unused]] static_assert (true, \"\");\t// { dg-error \"expected\" }\n+}"}]}