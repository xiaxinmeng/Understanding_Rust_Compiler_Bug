{"sha": "237f12da4124b91503646b099a8282aa6b251ef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3ZjEyZGE0MTI0YjkxNTAzNjQ2YjA5OWE4MjgyYWE2YjI1MWVmOQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-10-06T07:36:31Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-10-08T11:13:00Z"}, "message": "arm: [MVE] Remove illegal intrinsics (PR target/96914)\n\nA few MVE intrinsics had an unsigned variant implement while they are\nsupported by the hardware.  This patch removes them:\n__arm_vqrdmlashq_n_u8\n__arm_vqrdmlahq_n_u8\n__arm_vqdmlahq_n_u8\n__arm_vqrdmlashq_n_u16\n__arm_vqrdmlahq_n_u16\n__arm_vqdmlahq_n_u16\n__arm_vqrdmlashq_n_u32\n__arm_vqrdmlahq_n_u32\n__arm_vqdmlahq_n_u32\n__arm_vmlaldavaxq_p_u32\n__arm_vmlaldavaxq_p_u16\n\n2020-10-08  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\tPR target/96914\n\t* config/arm/arm_mve.h (vqrdmlashq_n_u8, vqrdmlashq_n_u16)\n\t(vqrdmlashq_n_u32, vqrdmlahq_n_u8, vqrdmlahq_n_u16)\n\t(vqrdmlahq_n_u32, vqdmlahq_n_u8, vqdmlahq_n_u16, vqdmlahq_n_u32)\n\t(vmlaldavaxq_p_u16, vmlaldavaxq_p_u32): Remove.\n\t* config/arm/arm_mve_builtins.def (vqrdmlashq_n_u, vqrdmlahq_n_u)\n\t(vqdmlahq_n_u, vmlaldavaxq_p_u): Remove.\n\t* config/arm/unspecs.md (VQDMLAHQ_N_U, VQRDMLAHQ_N_U)\n\t(VQRDMLASHQ_N_U)\n\t(VMLALDAVAXQ_P_U): Remove unspecs.\n\t* config/arm/iterators.md (VQDMLAHQ_N_U, VQRDMLAHQ_N_U)\n\t(VQRDMLASHQ_N_U, VMLALDAVAXQ_P_U): Remove attributes.\n\t(VQDMLAHQ_N, VQRDMLAHQ_N, VQRDMLASHQ_N, VMLALDAVAXQ_P): Remove\n\tunsigned variants from iterators.\n\t* config/arm/mve.md (mve_vqdmlahq_n_<supf><mode>)\n\t(mve_vqrdmlahq_n_<supf><mode>)\n\t(mve_vqrdmlashq_n_<supf><mode>, mve_vmlaldavaxq_p_<supf><mode>):\n\tUpdate comment.\n\n\tgcc/testsuite/\n\tPR target/96914\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u16.c: Remove.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u32.c: Remove.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u16.c: Remove.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u32.c: Remove.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u8.c: Remove.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u16.c: Remove.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u32.c: Remove.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u8.c: Remove.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u16.c: Remove.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u32.c: Remove.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u8.c: Remove.", "tree": {"sha": "18ffcef078a56594b0a7cf94c828cddd1d783c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18ffcef078a56594b0a7cf94c828cddd1d783c8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/237f12da4124b91503646b099a8282aa6b251ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237f12da4124b91503646b099a8282aa6b251ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237f12da4124b91503646b099a8282aa6b251ef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237f12da4124b91503646b099a8282aa6b251ef9/comments", "author": null, "committer": null, "parents": [{"sha": "afb198ee3729c29c8e681aedc656f55f4afe4053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb198ee3729c29c8e681aedc656f55f4afe4053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb198ee3729c29c8e681aedc656f55f4afe4053"}], "stats": {"total": 462, "additions": 19, "deletions": 443}, "files": [{"sha": "fe4e8cdd0d8b9cf5e8d13b0eee87675fa4c1c3b0", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 7, "deletions": 192, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237f12da4124b91503646b099a8282aa6b251ef9/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237f12da4124b91503646b099a8282aa6b251ef9/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=237f12da4124b91503646b099a8282aa6b251ef9", "patch": "@@ -1236,9 +1236,6 @@\n #define vpselq_u8(__a, __b, __p) __arm_vpselq_u8(__a, __b, __p)\n #define vpselq_s8(__a, __b, __p) __arm_vpselq_s8(__a, __b, __p)\n #define vrev64q_m_u8(__inactive, __a, __p) __arm_vrev64q_m_u8(__inactive, __a, __p)\n-#define vqrdmlashq_n_u8(__a, __b, __c) __arm_vqrdmlashq_n_u8(__a, __b, __c)\n-#define vqrdmlahq_n_u8(__a, __b, __c) __arm_vqrdmlahq_n_u8(__a, __b, __c)\n-#define vqdmlahq_n_u8(__a, __b, __c) __arm_vqdmlahq_n_u8(__a, __b, __c)\n #define vmvnq_m_u8(__inactive, __a, __p) __arm_vmvnq_m_u8(__inactive, __a, __p)\n #define vmlasq_n_u8(__a, __b, __c) __arm_vmlasq_n_u8(__a, __b, __c)\n #define vmlaq_n_u8(__a, __b, __c) __arm_vmlaq_n_u8(__a, __b, __c)\n@@ -1322,9 +1319,6 @@\n #define vpselq_u16(__a, __b, __p) __arm_vpselq_u16(__a, __b, __p)\n #define vpselq_s16(__a, __b, __p) __arm_vpselq_s16(__a, __b, __p)\n #define vrev64q_m_u16(__inactive, __a, __p) __arm_vrev64q_m_u16(__inactive, __a, __p)\n-#define vqrdmlashq_n_u16(__a, __b, __c) __arm_vqrdmlashq_n_u16(__a, __b, __c)\n-#define vqrdmlahq_n_u16(__a, __b, __c) __arm_vqrdmlahq_n_u16(__a, __b, __c)\n-#define vqdmlahq_n_u16(__a, __b, __c) __arm_vqdmlahq_n_u16(__a, __b, __c)\n #define vmvnq_m_u16(__inactive, __a, __p) __arm_vmvnq_m_u16(__inactive, __a, __p)\n #define vmlasq_n_u16(__a, __b, __c) __arm_vmlasq_n_u16(__a, __b, __c)\n #define vmlaq_n_u16(__a, __b, __c) __arm_vmlaq_n_u16(__a, __b, __c)\n@@ -1408,9 +1402,6 @@\n #define vpselq_u32(__a, __b, __p) __arm_vpselq_u32(__a, __b, __p)\n #define vpselq_s32(__a, __b, __p) __arm_vpselq_s32(__a, __b, __p)\n #define vrev64q_m_u32(__inactive, __a, __p) __arm_vrev64q_m_u32(__inactive, __a, __p)\n-#define vqrdmlashq_n_u32(__a, __b, __c) __arm_vqrdmlashq_n_u32(__a, __b, __c)\n-#define vqrdmlahq_n_u32(__a, __b, __c) __arm_vqrdmlahq_n_u32(__a, __b, __c)\n-#define vqdmlahq_n_u32(__a, __b, __c) __arm_vqdmlahq_n_u32(__a, __b, __c)\n #define vmvnq_m_u32(__inactive, __a, __p) __arm_vmvnq_m_u32(__inactive, __a, __p)\n #define vmlasq_n_u32(__a, __b, __c) __arm_vmlasq_n_u32(__a, __b, __c)\n #define vmlaq_n_u32(__a, __b, __c) __arm_vmlaq_n_u32(__a, __b, __c)\n@@ -2032,8 +2023,6 @@\n #define vmlaldavaq_p_u16(__a, __b, __c, __p) __arm_vmlaldavaq_p_u16(__a, __b, __c, __p)\n #define vmlaldavaxq_p_s32(__a, __b, __c, __p) __arm_vmlaldavaxq_p_s32(__a, __b, __c, __p)\n #define vmlaldavaxq_p_s16(__a, __b, __c, __p) __arm_vmlaldavaxq_p_s16(__a, __b, __c, __p)\n-#define vmlaldavaxq_p_u32(__a, __b, __c, __p) __arm_vmlaldavaxq_p_u32(__a, __b, __c, __p)\n-#define vmlaldavaxq_p_u16(__a, __b, __c, __p) __arm_vmlaldavaxq_p_u16(__a, __b, __c, __p)\n #define vmlsldavaq_p_s32(__a, __b, __c, __p) __arm_vmlsldavaq_p_s32(__a, __b, __c, __p)\n #define vmlsldavaq_p_s16(__a, __b, __c, __p) __arm_vmlsldavaq_p_s16(__a, __b, __c, __p)\n #define vmlsldavaxq_p_s32(__a, __b, __c, __p) __arm_vmlsldavaxq_p_s32(__a, __b, __c, __p)\n@@ -6967,27 +6956,6 @@ __arm_vrev64q_m_u8 (uint8x16_t __inactive, uint8x16_t __a, mve_pred16_t __p)\n   return __builtin_mve_vrev64q_m_uv16qi (__inactive, __a, __p);\n }\n \n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlashq_n_u8 (uint8x16_t __a, uint8x16_t __b, uint8_t __c)\n-{\n-  return __builtin_mve_vqrdmlashq_n_uv16qi (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlahq_n_u8 (uint8x16_t __a, uint8x16_t __b, uint8_t __c)\n-{\n-  return __builtin_mve_vqrdmlahq_n_uv16qi (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqdmlahq_n_u8 (uint8x16_t __a, uint8x16_t __b, uint8_t __c)\n-{\n-  return __builtin_mve_vqdmlahq_n_uv16qi (__a, __b, __c);\n-}\n-\n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vmvnq_m_u8 (uint8x16_t __inactive, uint8x16_t __a, mve_pred16_t __p)\n@@ -7570,27 +7538,6 @@ __arm_vrev64q_m_u16 (uint16x8_t __inactive, uint16x8_t __a, mve_pred16_t __p)\n   return __builtin_mve_vrev64q_m_uv8hi (__inactive, __a, __p);\n }\n \n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlashq_n_u16 (uint16x8_t __a, uint16x8_t __b, uint16_t __c)\n-{\n-  return __builtin_mve_vqrdmlashq_n_uv8hi (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlahq_n_u16 (uint16x8_t __a, uint16x8_t __b, uint16_t __c)\n-{\n-  return __builtin_mve_vqrdmlahq_n_uv8hi (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqdmlahq_n_u16 (uint16x8_t __a, uint16x8_t __b, uint16_t __c)\n-{\n-  return __builtin_mve_vqdmlahq_n_uv8hi (__a, __b, __c);\n-}\n-\n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vmvnq_m_u16 (uint16x8_t __inactive, uint16x8_t __a, mve_pred16_t __p)\n@@ -8172,27 +8119,6 @@ __arm_vrev64q_m_u32 (uint32x4_t __inactive, uint32x4_t __a, mve_pred16_t __p)\n   return __builtin_mve_vrev64q_m_uv4si (__inactive, __a, __p);\n }\n \n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlashq_n_u32 (uint32x4_t __a, uint32x4_t __b, uint32_t __c)\n-{\n-  return __builtin_mve_vqrdmlashq_n_uv4si (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlahq_n_u32 (uint32x4_t __a, uint32x4_t __b, uint32_t __c)\n-{\n-  return __builtin_mve_vqrdmlahq_n_uv4si (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqdmlahq_n_u32 (uint32x4_t __a, uint32x4_t __b, uint32_t __c)\n-{\n-  return __builtin_mve_vqdmlahq_n_uv4si (__a, __b, __c);\n-}\n-\n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vmvnq_m_u32 (uint32x4_t __inactive, uint32x4_t __a, mve_pred16_t __p)\n@@ -11861,20 +11787,6 @@ __arm_vmlaldavaxq_p_s16 (int64_t __a, int16x8_t __b, int16x8_t __c, mve_pred16_t\n   return __builtin_mve_vmlaldavaxq_p_sv8hi (__a, __b, __c, __p);\n }\n \n-__extension__ extern __inline uint64_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vmlaldavaxq_p_u32 (uint64_t __a, uint32x4_t __b, uint32x4_t __c, mve_pred16_t __p)\n-{\n-  return __builtin_mve_vmlaldavaxq_p_uv4si (__a, __b, __c, __p);\n-}\n-\n-__extension__ extern __inline uint64_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vmlaldavaxq_p_u16 (uint64_t __a, uint16x8_t __b, uint16x8_t __c, mve_pred16_t __p)\n-{\n-  return __builtin_mve_vmlaldavaxq_p_uv8hi (__a, __b, __c, __p);\n-}\n-\n __extension__ extern __inline int64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vmlsldavaq_p_s32 (int64_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n@@ -23790,27 +23702,6 @@ __arm_vrev64q_m (uint8x16_t __inactive, uint8x16_t __a, mve_pred16_t __p)\n  return __arm_vrev64q_m_u8 (__inactive, __a, __p);\n }\n \n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlashq (uint8x16_t __a, uint8x16_t __b, uint8_t __c)\n-{\n- return __arm_vqrdmlashq_n_u8 (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlahq (uint8x16_t __a, uint8x16_t __b, uint8_t __c)\n-{\n- return __arm_vqrdmlahq_n_u8 (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqdmlahq (uint8x16_t __a, uint8x16_t __b, uint8_t __c)\n-{\n- return __arm_vqdmlahq_n_u8 (__a, __b, __c);\n-}\n-\n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vmvnq_m (uint8x16_t __inactive, uint8x16_t __a, mve_pred16_t __p)\n@@ -24392,27 +24283,6 @@ __arm_vrev64q_m (uint16x8_t __inactive, uint16x8_t __a, mve_pred16_t __p)\n  return __arm_vrev64q_m_u16 (__inactive, __a, __p);\n }\n \n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlashq (uint16x8_t __a, uint16x8_t __b, uint16_t __c)\n-{\n- return __arm_vqrdmlashq_n_u16 (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlahq (uint16x8_t __a, uint16x8_t __b, uint16_t __c)\n-{\n- return __arm_vqrdmlahq_n_u16 (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqdmlahq (uint16x8_t __a, uint16x8_t __b, uint16_t __c)\n-{\n- return __arm_vqdmlahq_n_u16 (__a, __b, __c);\n-}\n-\n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vmvnq_m (uint16x8_t __inactive, uint16x8_t __a, mve_pred16_t __p)\n@@ -24994,27 +24864,6 @@ __arm_vrev64q_m (uint32x4_t __inactive, uint32x4_t __a, mve_pred16_t __p)\n  return __arm_vrev64q_m_u32 (__inactive, __a, __p);\n }\n \n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlashq (uint32x4_t __a, uint32x4_t __b, uint32_t __c)\n-{\n- return __arm_vqrdmlashq_n_u32 (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqrdmlahq (uint32x4_t __a, uint32x4_t __b, uint32_t __c)\n-{\n- return __arm_vqrdmlahq_n_u32 (__a, __b, __c);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vqdmlahq (uint32x4_t __a, uint32x4_t __b, uint32_t __c)\n-{\n- return __arm_vqdmlahq_n_u32 (__a, __b, __c);\n-}\n-\n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vmvnq_m (uint32x4_t __inactive, uint32x4_t __a, mve_pred16_t __p)\n@@ -28683,20 +28532,6 @@ __arm_vmlaldavaxq_p (int64_t __a, int16x8_t __b, int16x8_t __c, mve_pred16_t __p\n  return __arm_vmlaldavaxq_p_s16 (__a, __b, __c, __p);\n }\n \n-__extension__ extern __inline uint64_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vmlaldavaxq_p (uint64_t __a, uint32x4_t __b, uint32x4_t __c, mve_pred16_t __p)\n-{\n- return __arm_vmlaldavaxq_p_u32 (__a, __b, __c, __p);\n-}\n-\n-__extension__ extern __inline uint64_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vmlaldavaxq_p (uint64_t __a, uint16x8_t __b, uint16x8_t __c, mve_pred16_t __p)\n-{\n- return __arm_vmlaldavaxq_p_u16 (__a, __b, __c, __p);\n-}\n-\n __extension__ extern __inline int64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vmlsldavaq_p (int64_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n@@ -36877,10 +36712,7 @@ extern void *__ARM_undef;\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8_t)), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16_t)), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t)));})\n+\t    int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)));})\n \n #define __arm_vqdmlashq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -36896,10 +36728,7 @@ extern void *__ARM_undef;\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8_t)), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16_t)), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t)));})\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)));})\n \n #define __arm_vmlasq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -36918,10 +36747,7 @@ extern void *__ARM_undef;\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8_t)), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16_t)), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t)));})\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)));})\n \n #define __arm_vqrdmladhxq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -39357,10 +39183,7 @@ extern void *__ARM_undef;\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8_t)), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16_t)), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t)));})\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)));})\n \n #define __arm_vqdmlashq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -39376,10 +39199,7 @@ extern void *__ARM_undef;\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8_t)), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16_t)), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t)));})\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlahq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)));})\n \n #define __arm_vqrdmladhxq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -39510,10 +39330,7 @@ extern void *__ARM_undef;\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8_t)), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16_t)), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t)));})\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqdmlahq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)));})\n \n #define __arm_vqdmlsdhq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -41176,9 +40993,7 @@ extern void *__ARM_undef;\n   __typeof(p2) __p2 = (p2); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n   int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vmlaldavaxq_p_s16 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vmlaldavaxq_p_s32 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vmlaldavaxq_p_u16 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vmlaldavaxq_p_u32 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vmlaldavaxq_p_s32 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3));})\n \n #define __arm_vmlsldavaq_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\"}, {"sha": "ac9281835128c373f9dddd69bcf1445a5288394d", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237f12da4124b91503646b099a8282aa6b251ef9/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237f12da4124b91503646b099a8282aa6b251ef9/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=237f12da4124b91503646b099a8282aa6b251ef9", "patch": "@@ -312,9 +312,6 @@ VAR3 (TERNOP_NONE_NONE_UNONE_IMM, vshlcq_vec_s, v16qi, v8hi, v4si)\n VAR4 (TERNOP_UNONE_UNONE_UNONE_UNONE, vpselq_u, v16qi, v8hi, v4si, v2di)\n VAR4 (TERNOP_NONE_NONE_NONE_UNONE, vpselq_s, v16qi, v8hi, v4si, v2di)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vrev64q_m_u, v16qi, v8hi, v4si)\n-VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vqrdmlashq_n_u, v16qi, v8hi, v4si)\n-VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vqrdmlahq_n_u, v16qi, v8hi, v4si)\n-VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vqdmlahq_n_u, v16qi, v8hi, v4si)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmvnq_m_u, v16qi, v8hi, v4si)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmlasq_n_u, v16qi, v8hi, v4si)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmlaq_n_u, v16qi, v8hi, v4si)\n@@ -617,7 +614,6 @@ VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vrshrq_m_n_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vqshlq_m_n_s, v16qi, v8hi, v4si)\n VAR2 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmulltq_poly_m_p, v16qi, v8hi)\n VAR2 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmullbq_poly_m_p, v16qi, v8hi)\n-VAR2 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmlaldavaxq_p_u, v8hi, v4si)\n VAR2 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmlaldavaq_p_u, v8hi, v4si)\n VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshrntq_m_n_u, v8hi, v4si)\n VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshrnbq_m_n_u, v8hi, v4si)"}, {"sha": "f93487293a79af31dea28e9ac79c0130f3c1ca9b", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237f12da4124b91503646b099a8282aa6b251ef9/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237f12da4124b91503646b099a8282aa6b251ef9/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=237f12da4124b91503646b099a8282aa6b251ef9", "patch": "@@ -1284,10 +1284,10 @@\n \t\t       (VMLADAVQ_P_S \"s\") (VMLADAVQ_P_U \"u\") (VMLAQ_N_S \"s\")\n \t\t       (VMLAQ_N_U \"u\") (VMLASQ_N_S \"s\") (VMLASQ_N_U \"u\")\n \t\t       (VMVNQ_M_S \"s\") (VMVNQ_M_U \"u\") (VPSELQ_S \"s\")\n-\t\t       (VPSELQ_U \"u\") (VQDMLAHQ_N_S \"s\") (VQDMLAHQ_N_U \"u\")\n+\t\t       (VPSELQ_U \"u\") (VQDMLAHQ_N_S \"s\")\n \t\t       (VQDMLASHQ_N_S \"s\")\n-\t\t       (VQRDMLAHQ_N_S \"s\") (VQRDMLAHQ_N_U \"u\")\n-\t\t       (VQRDMLASHQ_N_S \"s\") (VQRDMLASHQ_N_U \"u\")\n+\t\t       (VQRDMLAHQ_N_S \"s\")\n+\t\t       (VQRDMLASHQ_N_S \"s\")\n \t\t       (VQRSHLQ_M_N_S \"s\") (VQRSHLQ_M_N_U \"u\")\n \t\t       (VQSHLQ_M_R_S \"s\") (VQSHLQ_M_R_U \"u\") (VSRIQ_N_S \"s\")\n \t\t       (VREV64Q_M_S \"s\") (VREV64Q_M_U \"u\") (VSRIQ_N_U \"u\")\n@@ -1360,7 +1360,7 @@\n \t\t       (VQSHRNBQ_M_N_S \"s\") (VQSHRNBQ_M_N_U \"u\")\n \t\t       (VQRSHRNTQ_M_N_S \"s\") (VQRSHRNTQ_M_N_U \"u\")\n \t\t       (VQRSHRNBQ_M_N_S \"s\") (VQRSHRNBQ_M_N_U \"u\")\n-\t\t       (VMLALDAVAXQ_P_S \"s\") (VMLALDAVAXQ_P_U \"u\")\n+\t\t       (VMLALDAVAXQ_P_S \"s\")\n \t\t       (VMLALDAVAQ_P_S \"s\") (VMLALDAVAQ_P_U \"u\")\n \t\t       (VSTRWQSB_S \"s\") (VSTRWQSB_U \"u\") (VSTRBQSO_S \"s\")\n \t\t       (VSTRBQSO_U \"u\") (VSTRBQ_S \"s\") (VSTRBQ_U \"u\")\n@@ -1578,10 +1578,10 @@\n (define_int_iterator VMLASQ_N [VMLASQ_N_S VMLASQ_N_U])\n (define_int_iterator VMVNQ_M [VMVNQ_M_S VMVNQ_M_U])\n (define_int_iterator VPSELQ [VPSELQ_S VPSELQ_U])\n-(define_int_iterator VQDMLAHQ_N [VQDMLAHQ_N_S VQDMLAHQ_N_U])\n+(define_int_iterator VQDMLAHQ_N [VQDMLAHQ_N_S])\n (define_int_iterator VQDMLASHQ_N [VQDMLASHQ_N_S])\n-(define_int_iterator VQRDMLAHQ_N [VQRDMLAHQ_N_S VQRDMLAHQ_N_U])\n-(define_int_iterator VQRDMLASHQ_N [VQRDMLASHQ_N_S VQRDMLASHQ_N_U])\n+(define_int_iterator VQRDMLAHQ_N [VQRDMLAHQ_N_S])\n+(define_int_iterator VQRDMLASHQ_N [VQRDMLASHQ_N_S])\n (define_int_iterator VQRSHLQ_M_N [VQRSHLQ_M_N_S VQRSHLQ_M_N_U])\n (define_int_iterator VQSHLQ_M_R [VQSHLQ_M_R_S VQSHLQ_M_R_U])\n (define_int_iterator VREV64Q_M [VREV64Q_M_S VREV64Q_M_U])\n@@ -1663,7 +1663,7 @@\n (define_int_iterator VMLAQ_M_N [VMLAQ_M_N_S VMLAQ_M_N_U])\n (define_int_iterator VQSHLQ_M_N [VQSHLQ_M_N_S VQSHLQ_M_N_U])\n (define_int_iterator VMLALDAVAQ_P [VMLALDAVAQ_P_U VMLALDAVAQ_P_S])\n-(define_int_iterator VMLALDAVAXQ_P [VMLALDAVAXQ_P_U VMLALDAVAXQ_P_S])\n+(define_int_iterator VMLALDAVAXQ_P [VMLALDAVAXQ_P_S])\n (define_int_iterator VQRSHRNBQ_M_N [VQRSHRNBQ_M_N_U VQRSHRNBQ_M_N_S])\n (define_int_iterator VQRSHRNTQ_M_N [VQRSHRNTQ_M_N_S VQRSHRNTQ_M_N_U])\n (define_int_iterator VQSHRNBQ_M_N [VQSHRNBQ_M_N_U VQSHRNBQ_M_N_S])"}, {"sha": "0d77601fed33f3f301328f97c5458037c61936f6", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237f12da4124b91503646b099a8282aa6b251ef9/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237f12da4124b91503646b099a8282aa6b251ef9/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=237f12da4124b91503646b099a8282aa6b251ef9", "patch": "@@ -3662,7 +3662,7 @@\n    (set_attr \"length\"\"8\")])\n \n ;;\n-;; [vqdmlahq_n_s, vqdmlahq_n_u])\n+;; [vqdmlahq_n_s])\n ;;\n (define_insn \"mve_vqdmlahq_n_<supf><mode>\"\n   [\n@@ -3742,7 +3742,7 @@\n ])\n \n ;;\n-;; [vqrdmlahq_n_s, vqrdmlahq_n_u])\n+;; [vqrdmlahq_n_s])\n ;;\n (define_insn \"mve_vqrdmlahq_n_<supf><mode>\"\n   [\n@@ -3758,7 +3758,7 @@\n ])\n \n ;;\n-;; [vqrdmlashq_n_s, vqrdmlashq_n_u])\n+;; [vqrdmlashq_n_s])\n ;;\n (define_insn \"mve_vqrdmlashq_n_<supf><mode>\"\n   [\n@@ -6498,7 +6498,7 @@\n    (set_attr \"length\"\"8\")])\n \n ;;\n-;; [vmlaldavaxq_p_u, vmlaldavaxq_p_s])\n+;; [vmlaldavaxq_p_s])\n ;;\n (define_insn \"mve_vmlaldavaxq_p_<supf><mode>\"\n   ["}, {"sha": "a3844e9a72a54489b17738d05d6c5280ae059ffa", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237f12da4124b91503646b099a8282aa6b251ef9/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237f12da4124b91503646b099a8282aa6b251ef9/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=237f12da4124b91503646b099a8282aa6b251ef9", "patch": "@@ -876,15 +876,12 @@\n   VPSELQ_U\n   VQABSQ_M_S\n   VQDMLAHQ_N_S\n-  VQDMLAHQ_N_U\n   VQDMLASHQ_N_S\n   VQNEGQ_M_S\n   VQRDMLADHQ_S\n   VQRDMLADHXQ_S\n   VQRDMLAHQ_N_S\n-  VQRDMLAHQ_N_U\n   VQRDMLASHQ_N_S\n-  VQRDMLASHQ_N_U\n   VQRDMLSDHQ_S\n   VQRDMLSDHXQ_S\n   VQRSHLQ_M_N_S\n@@ -1149,7 +1146,6 @@\n   VQDMLADHQ_M_S\n   VMLALDAVAQ_P_U\n   VMLALDAVAQ_P_S\n-  VMLALDAVAXQ_P_U\n   VQRSHRNBQ_M_N_U\n   VQRSHRNBQ_M_N_S\n   VQRSHRNTQ_M_N_S"}, {"sha": "704d0e71ab44f812793e2bdda40f09aaa65cf4a1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u16.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint64_t\n-foo (uint64_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n-{\n-  return vmlaldavaxq_p_u16 (a, b, c, p);\n-}\n-\n-/* { dg-final { scan-assembler \"vmlaldavaxt.u16\"  }  } */\n-\n-uint64_t\n-foo1 (uint64_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n-{\n-  return vmlaldavaxq_p (a, b, c, p);\n-}\n-\n-/* { dg-final { scan-assembler \"vmlaldavaxt.u16\"  }  } */"}, {"sha": "84dca18240a8c695780d2bb5d037e30affe5d55b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u32.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint64_t\n-foo (uint64_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n-{\n-  return vmlaldavaxq_p_u32 (a, b, c, p);\n-}\n-\n-/* { dg-final { scan-assembler \"vmlaldavaxt.u32\"  }  } */\n-\n-uint64_t\n-foo1 (uint64_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n-{\n-  return vmlaldavaxq_p (a, b, c, p);\n-}\n-\n-/* { dg-final { scan-assembler \"vmlaldavaxt.u32\"  }  } */"}, {"sha": "67ebb790eb9fde3afb1400227711b34112e61f86", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_u16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u16.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint16x8_t\n-foo (uint16x8_t a, uint16x8_t b, uint16_t c)\n-{\n-  return vqdmlahq_n_u16 (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqdmlah.s16\"  }  } */\n-\n-uint16x8_t\n-foo1 (uint16x8_t a, uint16x8_t b, uint16_t c)\n-{\n-  return vqdmlahq (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqdmlah.s16\"  }  } */"}, {"sha": "d82bca18a5955e21afe46595027053407b70b942", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_u32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u32.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint32x4_t\n-foo (uint32x4_t a, uint32x4_t b, uint32_t c)\n-{\n-  return vqdmlahq_n_u32 (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqdmlah.s32\"  }  } */\n-\n-uint32x4_t\n-foo1 (uint32x4_t a, uint32x4_t b, uint32_t c)\n-{\n-  return vqdmlahq (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqdmlah.s32\"  }  } */"}, {"sha": "4b4c246b748440b3d8d273b1247faf6609317e2a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_u8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u8.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint8x16_t\n-foo (uint8x16_t a, uint8x16_t b, uint8_t c)\n-{\n-  return vqdmlahq_n_u8 (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqdmlah.s8\"  }  } */\n-\n-uint8x16_t\n-foo1 (uint8x16_t a, uint8x16_t b, uint8_t c)\n-{\n-  return vqdmlahq (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqdmlah.s8\"  }  } */"}, {"sha": "6fe4f774ac33ded8fc1b5b54342ece1e466c1ca9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u16.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint16x8_t\n-foo (uint16x8_t a, uint16x8_t b, uint16_t c)\n-{\n-  return vqrdmlahq_n_u16 (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlah.s16\"  }  } */\n-\n-uint16x8_t\n-foo1 (uint16x8_t a, uint16x8_t b, uint16_t c)\n-{\n-  return vqrdmlahq (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlah.s16\"  }  } */"}, {"sha": "8205403851a4ec3127ccfb14e272184626f30a8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u32.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint32x4_t\n-foo (uint32x4_t a, uint32x4_t b, uint32_t c)\n-{\n-  return vqrdmlahq_n_u32 (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlah.s32\"  }  } */\n-\n-uint32x4_t\n-foo1 (uint32x4_t a, uint32x4_t b, uint32_t c)\n-{\n-  return vqrdmlahq (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlah.s32\"  }  } */"}, {"sha": "ed5c3a0b9a958f28ea0d75a18cf346d9355d054a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u8.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint8x16_t\n-foo (uint8x16_t a, uint8x16_t b, uint8_t c)\n-{\n-  return vqrdmlahq_n_u8 (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlah.s8\"  }  } */\n-\n-uint8x16_t\n-foo1 (uint8x16_t a, uint8x16_t b, uint8_t c)\n-{\n-  return vqrdmlahq (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlah.s8\"  }  } */"}, {"sha": "6c5f2807ddcaa13a98d119f20fe410cd0f972238", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u16.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint16x8_t\n-foo (uint16x8_t a, uint16x8_t b, uint16_t c)\n-{\n-  return vqrdmlashq_n_u16 (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlash.s16\"  }  } */\n-\n-uint16x8_t\n-foo1 (uint16x8_t a, uint16x8_t b, uint16_t c)\n-{\n-  return vqrdmlashq (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlash.s16\"  }  } */"}, {"sha": "daf520d3ad77f3327c97db2ee5f15cdcd71349b2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u32.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint32x4_t\n-foo (uint32x4_t a, uint32x4_t b, uint32_t c)\n-{\n-  return vqrdmlashq_n_u32 (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlash.s32\"  }  } */\n-\n-uint32x4_t\n-foo1 (uint32x4_t a, uint32x4_t b, uint32_t c)\n-{\n-  return vqrdmlashq (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlash.s32\"  }  } */"}, {"sha": "59b0e39062879f390fb2ab7a5be0fea8a96fcb0d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u8.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O2\" } */\n-\n-#include \"arm_mve.h\"\n-\n-uint8x16_t\n-foo (uint8x16_t a, uint8x16_t b, uint8_t c)\n-{\n-  return vqrdmlashq_n_u8 (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlash.s8\"  }  } */\n-\n-uint8x16_t\n-foo1 (uint8x16_t a, uint8x16_t b, uint8_t c)\n-{\n-  return vqrdmlashq (a, b, c);\n-}\n-\n-/* { dg-final { scan-assembler \"vqrdmlash.s8\"  }  } */"}]}