{"sha": "b02160e5ac1dc57bbecd3387b61fcad8c7a57672", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyMTYwZTVhYzFkYzU3YmJlY2QzMzg3YjYxZmNhZDhjN2E1NzY3Mg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2018-07-13T11:48:43Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2018-07-13T11:48:43Z"}, "message": "arm - Add vendor and CPU id information to arm-cpus.in\n\nThis patch moves the vendor and CPU id data from driver-arm.c to the\nmain table of CPU data in arm-cpus.in.  It then adds rules to\nparsecpu.awk to build data tables that can be used by the driver for\nautomatic CPU detection when running natively.  This is the last major\nbit of CPU-specific data that can be usefully moved to the CPU data\ntables (I don't think it is sensible to move the per-cpu tuning data\nfrom its current location).\n\nThe syntax and parser can support revision ranges, but at present\nnothing is done with that data: no supported cpu currently needs that\ncapability.\n\n\t* config/arm/driver-arm.c: Include arm-native.h.\n\t(host_detect_local_cpu): Use auto-generated data tables.\n\t(vendors, arm_cpu_table): Delete.  Move part information to ...\n\t* config/arm/arm-cpus.in: ... here.\n\t* config/arm/parsecpu.awk (gen_native): New function.\n\t(vendor, part): New CPU fields.\n\t(END): Add support for building the native CPU detection tables.\n\t* config/arm/t-arm (arm-native.h): Add build rule.\n\t(driver-arm.o): Add dependency on arm-native.h.\n\nFrom-SVN: r262633", "tree": {"sha": "610bcc7889021874b00c1f0cb47b81c10c28e146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/610bcc7889021874b00c1f0cb47b81c10c28e146"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b02160e5ac1dc57bbecd3387b61fcad8c7a57672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02160e5ac1dc57bbecd3387b61fcad8c7a57672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b02160e5ac1dc57bbecd3387b61fcad8c7a57672", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/comments", "author": null, "committer": null, "parents": [{"sha": "67fccea48da5b2a7a62f9b08acc01b254ab4c1a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67fccea48da5b2a7a62f9b08acc01b254ab4c1a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67fccea48da5b2a7a62f9b08acc01b254ab4c1a5"}], "stats": {"total": 199, "additions": 152, "deletions": 47}, "files": [{"sha": "590efb981a3885465cc4c92e5fa6a8dc780f7c9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b02160e5ac1dc57bbecd3387b61fcad8c7a57672", "patch": "@@ -1,3 +1,15 @@\n+2018-07-13  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/driver-arm.c: Include arm-native.h.\n+\t(host_detect_local_cpu): Use auto-generated data tables.\n+\t(vendors, arm_cpu_table): Delete.  Move part information to ...\n+\t* config/arm/arm-cpus.in: ... here.\n+\t* config/arm/parsecpu.awk (gen_native): New function.\n+\t(vendor, part): New CPU fields.\n+\t(END): Add support for building the native CPU detection tables.\n+\t* config/arm/t-arm (arm-native.h): Add build rule.\n+\t(driver-arm.o): Add dependency on arm-native.h.\n+\n 2018-07-13  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/85974"}, {"sha": "d82e95a226659948e59b317f07e0fd386ed674a2", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=b02160e5ac1dc57bbecd3387b61fcad8c7a57672", "patch": "@@ -624,6 +624,8 @@ end arch iwmmxt2\n #   [option <name> add|remove <isa-list>]*\n #   [optalias <name> <optname>]*\n #   [costs <name>]\n+#   [vendor <vendor-id>\n+#    [part <part-id> [minrev [maxrev]]]\n # end cpu <name>\n #\n # If omitted, cname is formed from transforming the cpuname to convert\n@@ -633,6 +635,14 @@ end arch iwmmxt2\n # Each add option must have a distinct feature set and each remove\n # option must similarly have a distinct feature set.  Option aliases can be\n # added with the optalias statement.\n+# Vendor, part and revision information is used for native CPU and architecture\n+# detection.  All values must be in hex (lower case) with the leading '0x'\n+# omitted.  For example the cortex-a9 will have vendor 41 and part c09.\n+# Revision information is used to match a subrange of part\n+# revisions: minrev <= detected <= maxrev.\n+# If a minrev or maxrev are omitted then minrev defaults to zero and maxrev\n+# to infinity.\n+# Revision information is not implemented yet; no part uses it.\n \n # V4 Architecture Processors\n begin cpu arm8\n@@ -878,6 +888,8 @@ begin cpu arm926ej-s\n  architecture armv5tej+fp\n  option nofp remove ALL_FP\n  costs 9e\n+ vendor 41\n+ part 926\n end cpu arm926ej-s\n \n begin cpu arm1026ej-s\n@@ -886,6 +898,8 @@ begin cpu arm1026ej-s\n  architecture armv5tej+fp\n  option nofp remove ALL_FP\n  costs 9e\n+ vendor 41\n+ part a26\n end cpu arm1026ej-s\n \n \n@@ -902,6 +916,8 @@ begin cpu arm1136jf-s\n  tune flags LDSCHED\n  architecture armv6j+fp\n  costs 9e\n+ vendor 41\n+ part b36\n end cpu arm1136jf-s\n \n begin cpu arm1176jz-s\n@@ -916,6 +932,8 @@ begin cpu arm1176jzf-s\n  tune flags LDSCHED\n  architecture armv6kz+fp\n  costs 9e\n+ vendor 41\n+ part b76\n end cpu arm1176jzf-s\n \n begin cpu mpcorenovfp\n@@ -928,6 +946,8 @@ begin cpu mpcore\n  tune flags LDSCHED\n  architecture armv6k+fp\n  costs 9e\n+ vendor 41\n+ part b02\n end cpu mpcore\n \n begin cpu arm1156t2-s\n@@ -942,6 +962,8 @@ begin cpu arm1156t2f-s\n  tune flags LDSCHED\n  architecture armv6t2+fp\n  costs v6t2\n+ vendor 41\n+ part b56\n end cpu arm1156t2f-s\n \n \n@@ -951,13 +973,17 @@ begin cpu cortex-m1\n  tune flags LDSCHED\n  architecture armv6s-m\n  costs v6m\n+ vendor 41\n+ part c21\n end cpu cortex-m1\n \n begin cpu cortex-m0\n  cname cortexm0\n  tune flags LDSCHED\n  architecture armv6s-m\n  costs v6m\n+ vendor 41\n+ part c20\n end cpu cortex-m0\n \n begin cpu cortex-m0plus\n@@ -1022,6 +1048,8 @@ begin cpu cortex-a5\n  option nosimd remove ALL_SIMD\n  option nofp remove ALL_FP\n  costs cortex_a5\n+ vendor 41\n+ part c05\n end cpu cortex-a5\n \n begin cpu cortex-a7\n@@ -1031,6 +1059,8 @@ begin cpu cortex-a7\n  option nosimd remove ALL_SIMD\n  option nofp remove ALL_FP\n  costs cortex_a7\n+ vendor 41\n+ part c07\n end cpu cortex-a7\n \n begin cpu cortex-a8\n@@ -1039,6 +1069,8 @@ begin cpu cortex-a8\n  architecture armv7-a+simd\n  option nofp remove ALL_FP\n  costs cortex_a8\n+ vendor 41\n+ part c08\n end cpu cortex-a8\n \n begin cpu cortex-a9\n@@ -1048,6 +1080,8 @@ begin cpu cortex-a9\n  option nosimd remove ALL_SIMD\n  option nofp remove ALL_FP\n  costs cortex_a9\n+ vendor 41\n+ part c09\n end cpu cortex-a9\n \n begin cpu cortex-a12\n@@ -1057,6 +1091,8 @@ begin cpu cortex-a12\n  architecture armv7ve+simd\n  option nofp remove ALL_FP\n  costs cortex_a12\n+ vendor 41\n+ part c0d\n end cpu cortex-a12\n \n begin cpu cortex-a15\n@@ -1065,6 +1101,8 @@ begin cpu cortex-a15\n  architecture armv7ve+simd\n  option nofp remove ALL_FP\n  costs cortex_a15\n+ vendor 41\n+ part c0f\n end cpu cortex-a15\n \n begin cpu cortex-a17\n@@ -1073,6 +1111,8 @@ begin cpu cortex-a17\n  architecture armv7ve+simd\n  option nofp remove ALL_FP\n  costs cortex_a12\n+ vendor 41\n+ part c0e\n end cpu cortex-a17\n \n begin cpu cortex-r4\n@@ -1087,6 +1127,8 @@ begin cpu cortex-r4f\n  tune flags LDSCHED\n  architecture armv7-r+fp\n  costs cortex\n+ vendor 41\n+ part c14\n end cpu cortex-r4f\n \n begin cpu cortex-r5\n@@ -1096,6 +1138,8 @@ begin cpu cortex-r5\n  option nofp.dp remove FP_DBL\n  option nofp remove ALL_FP\n  costs cortex\n+ vendor 41\n+ part c15\n end cpu cortex-r5\n \n begin cpu cortex-r7\n@@ -1104,6 +1148,8 @@ begin cpu cortex-r7\n  architecture armv7-r+idiv+fp\n  option nofp remove ALL_FP\n  costs cortex\n+ vendor 41\n+ part c17\n end cpu cortex-r7\n \n begin cpu cortex-r8\n@@ -1113,6 +1159,8 @@ begin cpu cortex-r8\n  architecture armv7-r+idiv+fp\n  option nofp remove ALL_FP\n  costs cortex\n+ vendor 41\n+ part c18\n end cpu cortex-r8\n \n begin cpu cortex-m7\n@@ -1131,6 +1179,8 @@ begin cpu cortex-m4\n  architecture armv7e-m+fp\n  option nofp remove ALL_FP\n  costs v7m\n+ vendor 41\n+ part c24\n end cpu cortex-m4\n \n begin cpu cortex-m3\n@@ -1139,6 +1189,8 @@ begin cpu cortex-m3\n  architecture armv7-m\n  isa quirk_cm3_ldrd\n  costs v7m\n+ vendor 41\n+ part c23\n end cpu cortex-m3\n \n begin cpu marvell-pj4\n@@ -1177,6 +1229,8 @@ begin cpu cortex-a32\n  option crypto add FP_ARMv8 CRYPTO\n  option nofp remove ALL_FP\n  costs cortex_a35\n+ vendor 41\n+ part d01\n end cpu cortex-a32\n \n begin cpu cortex-a35\n@@ -1187,6 +1241,8 @@ begin cpu cortex-a35\n  option crypto add FP_ARMv8 CRYPTO\n  option nofp remove ALL_FP\n  costs cortex_a35\n+ vendor 41\n+ part d04\n end cpu cortex-a35\n \n begin cpu cortex-a53\n@@ -1196,6 +1252,8 @@ begin cpu cortex-a53\n  option crypto add FP_ARMv8 CRYPTO\n  option nofp remove ALL_FP\n  costs cortex_a53\n+ vendor 41\n+ part d03\n end cpu cortex-a53\n \n begin cpu cortex-a57\n@@ -1204,6 +1262,8 @@ begin cpu cortex-a57\n  architecture armv8-a+crc+simd\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n+ vendor 41\n+ part d07\n end cpu cortex-a57\n \n begin cpu cortex-a72\n@@ -1213,6 +1273,8 @@ begin cpu cortex-a72\n  architecture armv8-a+crc+simd\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n+ vendor 41\n+ part d08\n end cpu cortex-a72\n \n begin cpu cortex-a73\n@@ -1222,6 +1284,8 @@ begin cpu cortex-a73\n  architecture armv8-a+crc+simd\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a73\n+ vendor 41\n+ part d09\n end cpu cortex-a73\n \n begin cpu exynos-m1\n@@ -1286,6 +1350,8 @@ begin cpu cortex-a55\n  option crypto add FP_ARMv8 CRYPTO\n  option nofp remove ALL_FP\n  costs cortex_a53\n+ vendor 41\n+ part d05\n end cpu cortex-a55\n \n begin cpu cortex-a75\n@@ -1295,6 +1361,8 @@ begin cpu cortex-a75\n  architecture armv8.2-a+fp16+dotprod+simd\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a73\n+ vendor 41\n+ part d0a\n end cpu cortex-a75\n \n begin cpu cortex-a76\n@@ -1304,6 +1372,8 @@ begin cpu cortex-a76\n  architecture armv8.2-a+fp16+dotprod+simd\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n+ vendor 41\n+ part d0b\n end cpu cortex-a76\n \n # ARMv8.2 A-profile ARM DynamIQ big.LITTLE implementations\n@@ -1349,6 +1419,8 @@ begin cpu cortex-r52\n  architecture armv8-r+crc+simd\n  option nofp.dp remove FP_DBL ALL_SIMD\n  costs cortex\n+ vendor 41\n+ part d13\n end cpu cortex-r52\n \n # FPU entries"}, {"sha": "dab3d4e8251325f05cce865af90bae5f51226998", "filename": "gcc/config/arm/driver-arm.c", "status": "modified", "additions": 10, "deletions": 47, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/gcc%2Fconfig%2Farm%2Fdriver-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/gcc%2Fconfig%2Farm%2Fdriver-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fdriver-arm.c?ref=b02160e5ac1dc57bbecd3387b61fcad8c7a57672", "patch": "@@ -25,58 +25,21 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"configargs.h\"\n \n-struct vendor_cpu {\n+struct vendor_cpu\n+{\n   const char *part_no;\n   const char *arch_name;\n   const char *cpu_name;\n };\n \n-static struct vendor_cpu arm_cpu_table[] = {\n-    {\"0x926\", \"armv5te\", \"arm926ej-s\"},\n-    {\"0xa26\", \"armv5te\", \"arm1026ej-s\"},\n-    {\"0xb02\", \"armv6k\", \"mpcore\"},\n-    {\"0xb36\", \"armv6j\", \"arm1136jf-s\"},\n-    {\"0xb56\", \"armv6t2\", \"arm1156t2f-s\"},\n-    /* armv6kz is the correct spelling for ARMv6KZ but may not be supported in\n-       the version of binutils used.  The incorrect spelling is supported in\n-       legacy and current binutils so that is used instead.  */\n-    {\"0xb76\", \"armv6zk\", \"arm1176jzf-s\"},\n-    {\"0xc05\", \"armv7-a\", \"cortex-a5\"},\n-    {\"0xc07\", \"armv7ve\", \"cortex-a7\"},\n-    {\"0xc08\", \"armv7-a\", \"cortex-a8\"},\n-    {\"0xc09\", \"armv7-a\", \"cortex-a9\"},\n-    {\"0xc0d\", \"armv7ve\", \"cortex-a12\"},\n-    {\"0xc0e\", \"armv7ve\", \"cortex-a17\"},\n-    {\"0xc0f\", \"armv7ve\", \"cortex-a15\"},\n-    {\"0xd01\", \"armv8-a+crc\", \"cortex-a32\"},\n-    {\"0xd04\", \"armv8-a+crc\", \"cortex-a35\"},\n-    {\"0xd03\", \"armv8-a+crc\", \"cortex-a53\"},\n-    {\"0xd07\", \"armv8-a+crc\", \"cortex-a57\"},\n-    {\"0xd08\", \"armv8-a+crc\", \"cortex-a72\"},\n-    {\"0xd09\", \"armv8-a+crc\", \"cortex-a73\"},\n-    {\"0xd05\", \"armv8.2-a+fp16+dotprod\", \"cortex-a55\"},\n-    {\"0xd0a\", \"armv8.2-a+fp16+dotprod\", \"cortex-a75\"},\n-    {\"0xd0b\", \"armv8.2-a+fp16+dotprod\", \"cortex-a76\"},\n-    {\"0xc14\", \"armv7-r\", \"cortex-r4\"},\n-    {\"0xc15\", \"armv7-r\", \"cortex-r5\"},\n-    {\"0xc17\", \"armv7-r\", \"cortex-r7\"},\n-    {\"0xc18\", \"armv7-r\", \"cortex-r8\"},\n-    {\"0xd13\", \"armv8-r+crc\", \"cortex-r52\"},\n-    {\"0xc20\", \"armv6-m\", \"cortex-m0\"},\n-    {\"0xc21\", \"armv6-m\", \"cortex-m1\"},\n-    {\"0xc23\", \"armv7-m\", \"cortex-m3\"},\n-    {\"0xc24\", \"armv7e-m\", \"cortex-m4\"},\n-    {NULL, NULL, NULL}\n-};\n-\n-static struct {\n+struct vendor\n+{\n   const char *vendor_no;\n   const struct vendor_cpu *vendor_parts;\n-} vendors[] = {\n-    {\"0x41\", arm_cpu_table},\n-    {NULL, NULL}\n };\n \n+#include \"arm-native.h\"\n+\n /* This will be called by the spec parser in gcc.c when it sees\n    a %:local_cpu_detect(args) construct.  Currently it will be called\n    with either \"arch\", \"cpu\" or \"tune\" as argument depending on if\n@@ -112,14 +75,14 @@ host_detect_local_cpu (int argc, const char **argv)\n \n   while (fgets (buf, sizeof (buf), f) != NULL)\n     {\n-      /* Ensure that CPU implementer is ARM (0x41).  */\n+      /* Find the vendor table associated with this implementer.  */\n       if (strncmp (buf, \"CPU implementer\", sizeof (\"CPU implementer\") - 1) == 0)\n \t{\n \t  int i;\n-\t  for (i = 0; vendors[i].vendor_no != NULL; i++)\n-\t    if (strstr (buf, vendors[i].vendor_no) != NULL)\n+\t  for (i = 0; vendors_table[i].vendor_no != NULL; i++)\n+\t    if (strstr (buf, vendors_table[i].vendor_no) != NULL)\n \t      {\n-\t\tcpu_table = vendors[i].vendor_parts;\n+\t\tcpu_table = vendors_table[i].vendor_parts;\n \t\tbreak;\n \t      }\n \t}"}, {"sha": "aabe1b0c64c814011fb41066e73d702b1847f188", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=b02160e5ac1dc57bbecd3387b61fcad8c7a57672", "patch": "@@ -21,6 +21,7 @@\n # where <cmd> is one of:\n #\tdata: Print the standard 'C' data tables for the CPUs\n #\tcommon-data: Print the 'C' data for shared driver/compiler files\n+#\tnative: Print the data structures used by the native driver\n #\theaders: Print the standard 'C' headers for the CPUs\n #\tisa: Generate the arm-isa.h header\n #\tmd: Print the machine description fragment\n@@ -391,6 +392,31 @@ function gen_comm_data () {\n     print \"};\"\n }\n \n+function gen_native () {\n+    boilerplate(\"C\")\n+\n+    for (vendor in vendor_ids) {\n+\tprint \"static struct vendor_cpu vendor\"vendor\"_cpu_table[] = {\"\n+\tncpus = split (cpu_list, cpus)\n+\n+\tfor (n = 1; n <= ncpus; n++) {\n+\t    if ((cpus[n] in cpu_vendor) && (cpus[n] in cpu_part)\t\\\n+\t\t&& cpu_vendor[cpus[n]] == vendor) {\n+\t\tprint \"  {\\\"0x\"cpu_part[cpus[n]]\"\\\", \\\"\"cpu_arch[cpus[n]]\"\\\", \\\"\"cpus[n]\"\\\"},\"\n+\t    }\n+\t}\n+\tprint \"  {NULL, NULL, NULL}\"\n+\tprint \"};\"\n+    }\n+\n+    print \"\\nstatic struct vendor vendors_table[] = {\"\n+    for (vendor in vendor_ids) {\n+\tprint \"  {\\\"0x\"vendor\"\\\", vendor\"vendor\"_cpu_table},\"\n+    }\n+    print \"  {NULL, NULL}\"\n+    print \"};\"\n+}\n+\n function gen_md () {\n     boilerplate(\"md\")\n \n@@ -726,6 +752,23 @@ BEGIN {\n     parse_ok = 1\n }\n \n+/^[ \t]*vendor / {\n+    if (NF != 2) fatal(\"syntax: vendor <vendor-id>\")\n+    if (cpu_name == \"\") fatal(\"\\\"vendor\\\" outside of cpu block\")\n+    cpu_vendor[cpu_name] = $2\n+    vendor_ids[$2] = 1\n+    parse_ok = 1\n+}\n+\n+/^[ \t]*part / {\n+    if (NF < 2 || NF > 4) fatal(\"syntax: part <part-id> [minrev [maxrev]]\")\n+    if (cpu_name == \"\") fatal(\"\\\"part\\\" outside of cpu block\")\n+    cpu_part[cpu_name] = $2\n+    if (NF > 2) cpu_minrev[cpu_name] = $3\n+    if (NF == 4) cpu_maxrev[cpu_name] = $4\n+    parse_ok = 1\n+}\n+\n /^end cpu / {\n     if (NF != 3) fatal(\"syntax: end cpu <name>\")\n     if (cpu_name != $3) fatal(\"mimatched end cpu\")\n@@ -734,6 +777,9 @@ BEGIN {\n \tgsub(/[-+.]/, \"_\", cpu_cnames[cpu_name])\n     }\n     if (! (cpu_name in cpu_arch)) fatal(\"cpu definition lacks an architecture\")\n+    if ((cpu_name in cpu_part) && !(cpu_name in cpu_vendor)) {\n+\tfatal(\"part number specified for \" cpu_name \" but no vendor\")\n+    }\n     cpu_list = cpu_list \" \" cpu_name\n     cpu_name = \"\"\n     parse_ok = 1\n@@ -751,6 +797,8 @@ END {\n \tgen_data()\n     } else if (cmd == \"common-data\") {\n \tgen_comm_data()\n+    } else if (cmd == \"native\") {\n+\tgen_native()\n     } else if (cmd == \"headers\") {\n \tgen_headers()\n     } else if (cmd == \"isa\") {"}, {"sha": "c3a8c7773ba3d882ed834841a242e188d7d8f6ce", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02160e5ac1dc57bbecd3387b61fcad8c7a57672/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=b02160e5ac1dc57bbecd3387b61fcad8c7a57672", "patch": "@@ -110,6 +110,14 @@ s-arm-cdata: $(srcdir)/config/arm/parsecpu.awk \\\n \t$(SHELL) $(srcdir)/../move-if-change tmp-arm-cpu-cdata.h arm-cpu-cdata.h\n \t$(STAMP) s-arm-cdata\n \n+arm-native.h: s-arm-native ; @true\n+s-arm-native: $(srcdir)/config/arm/parsecpu.awk \\\n+  $(srcdir)/config/arm/arm-cpus.in\n+\t$(AWK) -f $(srcdir)/config/arm/parsecpu.awk -v cmd=native \\\n+\t\t$(srcdir)/config/arm/arm-cpus.in > tmp-arm-native.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-arm-native.h arm-native.h\n+\t$(STAMP) s-arm-native\n+\n aarch-common.o: $(srcdir)/config/arm/aarch-common.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TM_P_H) $(RTL_H) $(TREE_H) output.h $(C_COMMON_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n@@ -145,3 +153,5 @@ arm-c.o: $(srcdir)/config/arm/arm-c.c $(CONFIG_H) $(SYSTEM_H) \\\n \t\t$(srcdir)/config/arm/arm-c.c\n \n arm-common.o: arm-cpu-cdata.h\n+\n+driver-arm.o: arm-native.h"}]}