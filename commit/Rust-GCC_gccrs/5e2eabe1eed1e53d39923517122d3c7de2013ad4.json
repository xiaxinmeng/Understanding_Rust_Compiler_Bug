{"sha": "5e2eabe1eed1e53d39923517122d3c7de2013ad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyZWFiZTFlZWQxZTUzZDM5OTIzNTE3MTIyZDNjN2RlMjAxM2FkNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-03-18T18:47:46Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-03-19T13:39:51Z"}, "message": "x86: Issue error for return/argument only with function body\n\nIf we never generate function body, we shouldn't issue errors for return\nnor argument.  Add silent_p to i386 machine_function to avoid issuing\nerrors for return and argument without function body.\n\ngcc/\n\n\tPR target/99652\n\t* config/i386/i386-options.c (ix86_init_machine_status): Set\n\tsilent_p to true.\n\t* config/i386/i386.c (init_cumulative_args): Set silent_p to\n\tfalse.\n\t(construct_container): Return early for return and argument\n\terrors if silent_p is true.\n\t* config/i386/i386.h (machine_function): Add silent_p.\n\ngcc/testsuite/\n\n\tPR target/99652\n\t* gcc.dg/torture/pr99652-1.c: New test.\n\t* gcc.dg/torture/pr99652-2.c: Likewise.\n\t* gcc.target/i386/pr57655.c: Adjusted.\n\t* gcc.target/i386/pr59794-6.c: Likewise.\n\t* gcc.target/i386/pr70738-1.c: Likewise.\n\t* gcc.target/i386/pr96744-1.c: Likewise.", "tree": {"sha": "8deccc1872103afd64901a30b5ef53a68078fbb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8deccc1872103afd64901a30b5ef53a68078fbb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e2eabe1eed1e53d39923517122d3c7de2013ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2eabe1eed1e53d39923517122d3c7de2013ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e2eabe1eed1e53d39923517122d3c7de2013ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2eabe1eed1e53d39923517122d3c7de2013ad4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d09cb732dac5d980ac628eb3aca75c821028a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d09cb732dac5d980ac628eb3aca75c821028a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d09cb732dac5d980ac628eb3aca75c821028a2"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "b653527d2668c33353fcfd100e949da82c5d5a9a", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=5e2eabe1eed1e53d39923517122d3c7de2013ad4", "patch": "@@ -1768,6 +1768,7 @@ ix86_init_machine_status (void)\n   f = ggc_cleared_alloc<machine_function> ();\n   f->call_abi = ix86_abi;\n   f->stack_frame_required = true;\n+  f->silent_p = true;\n \n   return f;\n }"}, {"sha": "714349094bd9ef43cccc498b7c41f2aa9b110b6d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5e2eabe1eed1e53d39923517122d3c7de2013ad4", "patch": "@@ -1705,6 +1705,10 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n   struct cgraph_node *local_info_node = NULL;\n   struct cgraph_node *target = NULL;\n \n+  /* Set silent_p to false to raise an error for invalid calls when\n+     expanding function body.  */\n+  cfun->machine->silent_p = false;\n+\n   memset (cum, 0, sizeof (*cum));\n \n   if (fndecl)\n@@ -2534,6 +2538,10 @@ construct_container (machine_mode mode, machine_mode orig_mode,\n      some less clueful developer tries to use floating-point anyway.  */\n   if (needed_sseregs && !TARGET_SSE)\n     {\n+      /* Return early if we shouldn't raise an error for invalid\n+\t calls.  */\n+      if (cfun->machine->silent_p)\n+\treturn NULL;\n       if (in_return)\n \t{\n \t  if (!issued_sse_ret_error)\n@@ -2558,6 +2566,10 @@ construct_container (machine_mode mode, machine_mode orig_mode,\n \t  || regclass[i] == X86_64_X87UP_CLASS\n \t  || regclass[i] == X86_64_COMPLEX_X87_CLASS)\n \t{\n+\t  /* Return early if we shouldn't raise an error for invalid\n+\t     calls.  */\n+\t  if (cfun->machine->silent_p)\n+\t    return NULL;\n \t  if (!issued_x87_ret_error)\n \t    {\n \t      error (\"x87 register return with x87 disabled\");"}, {"sha": "058c1cc25b209878b54bbd10a2dcd0d563914bb5", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5e2eabe1eed1e53d39923517122d3c7de2013ad4", "patch": "@@ -2945,6 +2945,10 @@ struct GTY(()) machine_function {\n      function.  */\n   BOOL_BITFIELD has_explicit_vzeroupper : 1;\n \n+  /* True if we should act silently, rather than raise an error for\n+     invalid calls.  */\n+  BOOL_BITFIELD silent_p : 1;\n+\n   /* The largest alignment, in bytes, of stack slot actually used.  */\n   unsigned int max_used_stack_alignment;\n "}, {"sha": "c2395ff4ed8b4c8aa22e5a424e86fbfa706f6a36", "filename": "gcc/testsuite/gcc.dg/torture/pr99652-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr99652-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr99652-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr99652-1.c?ref=5e2eabe1eed1e53d39923517122d3c7de2013ad4", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+inline double\n+foo (void)\n+{\n+  return 1.0;\n+}"}, {"sha": "beefad8bfee923d31f776fa37765df4636d689e6", "filename": "gcc/testsuite/gcc.dg/torture/pr99652-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr99652-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr99652-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr99652-2.c?ref=5e2eabe1eed1e53d39923517122d3c7de2013ad4", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-mno-80387\" } */\n+\n+inline double\n+foo (void)\n+{\n+  return 1.0;\n+}"}, {"sha": "649cdef832d2717a1ac10c0870c71378ae85fc47", "filename": "gcc/testsuite/gcc.target/i386/pr57655.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57655.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57655.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57655.c?ref=5e2eabe1eed1e53d39923517122d3c7de2013ad4", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-mavx -mvzeroupper -mno-fp-ret-in-387\" } */\n \n long double\n-foo (long double x)\n-{ /* { dg-error \"x87 register return with x87 disabled\" \"\" { target { ! ia32 } } } */\n+foo (long double x) /* { dg-error \"x87 register return with x87 disabled\" \"\" { target { ! ia32 } } } */\n+{\n   return __builtin_ilogbl (x);\n }"}, {"sha": "babcf76eaf80b08061cc74620a191a2e0fdbba5e", "filename": "gcc/testsuite/gcc.target/i386/pr59794-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-6.c?ref=5e2eabe1eed1e53d39923517122d3c7de2013ad4", "patch": "@@ -8,7 +8,7 @@ typedef int __v4si __attribute__ ((__vector_size__ (16)));\n extern __v4si x;\n \n __v4si\n-foo (void)\n-{ /* { dg-error \"SSE register return with SSE disabled\" } */\n+foo (void) /* { dg-error \"SSE register return with SSE disabled\" } */\n+{\n   return x;\n }"}, {"sha": "62d609c9f66492df3d4cb1c183656308185e6941", "filename": "gcc/testsuite/gcc.target/i386/pr70738-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-1.c?ref=5e2eabe1eed1e53d39923517122d3c7de2013ad4", "patch": "@@ -3,7 +3,7 @@\n \n typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n \n-int32x2_t test (int32x2_t a, int32x2_t b)\n-{ /* { dg-error \"SSE register return with SSE disabled\" } */\n+int32x2_t test (int32x2_t a, int32x2_t b) /* { dg-error \"SSE register return with SSE disabled\" } */\n+{\n   return a + b;\n }"}, {"sha": "da5557d89b76cc57a35de572f8dafd4aab214551", "filename": "gcc/testsuite/gcc.target/i386/pr96744-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eabe1eed1e53d39923517122d3c7de2013ad4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-1.c?ref=5e2eabe1eed1e53d39923517122d3c7de2013ad4", "patch": "@@ -4,7 +4,7 @@\n typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n \n __attribute__((__target__(\"general-regs-only\")))\n-int32x2_t test (int32x2_t a, int32x2_t b)\n-{ /* { dg-error \"SSE register return with SSE disabled\" } */\n+int32x2_t test (int32x2_t a, int32x2_t b) /* { dg-error \"SSE register return with SSE disabled\" } */\n+{\n   return a + b;\n }"}]}