{"sha": "a628ab6d267089a84247af749f5d4e76717e08ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYyOGFiNmQyNjcwODlhODQyNDdhZjc0OWY1ZDRlNzY3MTdlMDhlZA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2004-11-16T17:37:31Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-11-16T17:37:31Z"}, "message": "s390.c (s390_cc_modes_compatible): New function.\n\n2004-11-16  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.c (s390_cc_modes_compatible): New function.\n\t(TARGET_CC_MODES_COMPATIBLE): Target macro defined.\n\nFrom-SVN: r90745", "tree": {"sha": "6ecc6e478f1f7d576e48e79721cf309154da0647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ecc6e478f1f7d576e48e79721cf309154da0647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a628ab6d267089a84247af749f5d4e76717e08ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a628ab6d267089a84247af749f5d4e76717e08ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a628ab6d267089a84247af749f5d4e76717e08ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a628ab6d267089a84247af749f5d4e76717e08ed/comments", "author": null, "committer": null, "parents": [{"sha": "0a56af0b241f9f72b70e1a76c6c101f3ed398739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a56af0b241f9f72b70e1a76c6c101f3ed398739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a56af0b241f9f72b70e1a76c6c101f3ed398739"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "7ec570dea48365f0998911382a3ec202d1d929e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a628ab6d267089a84247af749f5d4e76717e08ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a628ab6d267089a84247af749f5d4e76717e08ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a628ab6d267089a84247af749f5d4e76717e08ed", "patch": "@@ -1,3 +1,8 @@\n+2004-11-16  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_cc_modes_compatible): New function.\n+\t(TARGET_CC_MODES_COMPATIBLE): Target macro defined.\n+\n 2004-11-16  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/18447"}, {"sha": "91ee90d282d0ee14ea737e63fa42686ec505d5ae", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a628ab6d267089a84247af749f5d4e76717e08ed/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a628ab6d267089a84247af749f5d4e76717e08ed/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a628ab6d267089a84247af749f5d4e76717e08ed", "patch": "@@ -82,6 +82,9 @@ static bool s390_call_saved_register_used (tree);\n static bool s390_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode mode,\n \t\t\t\t    tree, bool);\n static bool s390_fixed_condition_code_regs (unsigned int *, unsigned int *);\n+static enum machine_mode s390_cc_modes_compatible (enum machine_mode,\n+ \t\t\t\t\t\t   enum machine_mode);\n+\n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n@@ -160,6 +163,9 @@ static bool s390_fixed_condition_code_regs (unsigned int *, unsigned int *);\n #undef TARGET_FIXED_CONDITION_CODE_REGS\n #define TARGET_FIXED_CONDITION_CODE_REGS s390_fixed_condition_code_regs\n \n+#undef TARGET_CC_MODES_COMPATIBLE\n+#define TARGET_CC_MODES_COMPATIBLE s390_cc_modes_compatible\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n extern int reload_completed;\n@@ -8338,6 +8344,40 @@ s390_fixed_condition_code_regs (unsigned int *p1, unsigned int *p2)\n   return true;\n }\n \n+/* If two condition code modes are compatible, return a condition code\n+   mode which is compatible with both.  Otherwise, return\n+   VOIDmode.  */\n+\n+static enum machine_mode\n+s390_cc_modes_compatible (enum machine_mode m1, enum machine_mode m2)\n+{\n+  if (m1 == m2)\n+    return m1;\n+\n+  switch (m1)\n+    {\n+    case CCZmode:\n+      if (m2 == CCUmode || m2 == CCTmode\n+\t  || m2 == CCSmode || m2 == CCSRmode || m2 == CCURmode)\n+        return m2;\n+      return VOIDmode;\n+\n+    case CCSmode:\n+    case CCUmode:\n+    case CCTmode:\n+    case CCSRmode:\n+    case CCURmode:\n+      if (m2 == CCZmode)\n+\treturn m1;\n+      \n+      return VOIDmode;\n+\n+    default:\n+      return VOIDmode;\n+    }\n+  return VOIDmode;\n+}\n+\n /* This function is used by the call expanders of the machine description.\n    It emits the call insn itself together with the necessary operations\n    to adjust the target address and returns the emitted insn."}]}