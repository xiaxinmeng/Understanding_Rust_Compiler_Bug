{"sha": "3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f", "node_id": "C_kwDOANBUbNoAKDNjYWY3Zjg3YjFlN2VkM2YxYzc4ZmMyM2I1NzM0Mjc2NzkzYjNjNWY", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-09-23T13:27:22Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-09-29T14:29:39Z"}, "message": "aarch64: Fix type qualifiers for qtbl1 and qtbx1 Neon builtins\n\nFix type qualifiers for qtbl1 and qtbx1 Neon builtins and remove\ncasts from the Neon intrinsic function bodies that use these\nbuiltins.\n\ngcc/ChangeLog:\n\n2021-09-23  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c (TYPES_BINOP_PPU): Define\n\tnew type qualifier enum.\n\t(TYPES_TERNOP_SSSU): Likewise.\n\t(TYPES_TERNOP_PPPU): Likewise.\n\t* config/aarch64/aarch64-simd-builtins.def: Define PPU, SSU,\n\tPPPU and SSSU builtin generator macros for qtbl1 and qtbx1\n\tNeon builtins.\n\t* config/aarch64/arm_neon.h (vqtbl1_p8): Use type-qualified\n\tbuiltin and remove casts.\n\t(vqtbl1_s8): Likewise.\n\t(vqtbl1q_p8): Likewise.\n\t(vqtbl1q_s8): Likewise.\n\t(vqtbx1_s8): Likewise.\n\t(vqtbx1_p8): Likewise.\n\t(vqtbx1q_s8): Likewise.\n\t(vqtbx1q_p8): Likewise.\n\t(vtbl1_p8): Likewise.\n\t(vtbl2_p8): Likewise.\n\t(vtbx2_p8): Likewise.", "tree": {"sha": "85246e1c50340f70c25e1b1ae36aed29199288d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85246e1c50340f70c25e1b1ae36aed29199288d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38cd3bdb4cd429a5f7082ea91793a59b37d47b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38cd3bdb4cd429a5f7082ea91793a59b37d47b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38cd3bdb4cd429a5f7082ea91793a59b37d47b9"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "1a507ea59142d0b5977b0167abfe9a58a567adf7", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f", "patch": "@@ -182,6 +182,10 @@ static enum aarch64_type_qualifiers\n aarch64_types_binopp_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_poly, qualifier_poly, qualifier_poly };\n #define TYPES_BINOPP (aarch64_types_binopp_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_binop_ppu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_poly, qualifier_poly, qualifier_unsigned };\n+#define TYPES_BINOP_PPU (aarch64_types_binop_ppu_qualifiers)\n \n static enum aarch64_type_qualifiers\n aarch64_types_ternop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n@@ -207,13 +211,21 @@ aarch64_types_ternopu_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned, qualifier_immediate };\n #define TYPES_TERNOPUI (aarch64_types_ternopu_imm_qualifiers)\n static enum aarch64_type_qualifiers\n+aarch64_types_ternop_sssu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_unsigned };\n+#define TYPES_TERNOP_SSSU (aarch64_types_ternop_sssu_qualifiers)\n+static enum aarch64_type_qualifiers\n aarch64_types_ternop_ssus_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_unsigned, qualifier_none };\n #define TYPES_TERNOP_SSUS (aarch64_types_ternop_ssus_qualifiers)\n static enum aarch64_type_qualifiers\n aarch64_types_ternop_suss_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_unsigned, qualifier_none, qualifier_none };\n #define TYPES_TERNOP_SUSS (aarch64_types_ternop_suss_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_binop_pppu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_poly, qualifier_poly, qualifier_poly, qualifier_unsigned };\n+#define TYPES_TERNOP_PPPU (aarch64_types_binop_pppu_qualifiers)\n \n \n static enum aarch64_type_qualifiers"}, {"sha": "35dc075dde60d3db3e30122dd5d21e5ff115e204", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f", "patch": "@@ -721,6 +721,8 @@\n   /* Implemented by aarch64_qtbl1<mode>.  */\n   VAR2 (BINOP, qtbl1, 0, NONE, v8qi, v16qi)\n   VAR2 (BINOPU, qtbl1, 0, NONE, v8qi, v16qi)\n+  VAR2 (BINOP_PPU, qtbl1, 0, NONE, v8qi, v16qi)\n+  VAR2 (BINOP_SSU, qtbl1, 0, NONE, v8qi, v16qi)\n \n   /* Implemented by aarch64_qtbl2<mode>.  */\n   VAR2 (BINOP, qtbl2, 0, NONE, v8qi, v16qi)\n@@ -734,6 +736,8 @@\n   /* Implemented by aarch64_qtbx1<mode>.  */\n   VAR2 (TERNOP, qtbx1, 0, NONE, v8qi, v16qi)\n   VAR2 (TERNOPU, qtbx1, 0, NONE, v8qi, v16qi)\n+  VAR2 (TERNOP_PPPU, qtbx1, 0, NONE, v8qi, v16qi)\n+  VAR2 (TERNOP_SSSU, qtbx1, 0, NONE, v8qi, v16qi)\n \n   /* Implemented by aarch64_qtbx2<mode>.  */\n   VAR2 (TERNOP, qtbx2, 0, NONE, v8qi, v16qi)"}, {"sha": "2d5bf34b698a88ed934c522cc9f14f125c604a39", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=3caf7f87b1e7ed3f1c78fc23b5734276793b3c5f", "patch": "@@ -10416,15 +10416,14 @@ __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl1_p8 (poly8x16_t __tab, uint8x8_t __idx)\n {\n-  return (poly8x8_t) __builtin_aarch64_qtbl1v8qi ((int8x16_t) __tab,\n-\t\t\t\t\t\t  (int8x8_t) __idx);\n+  return __builtin_aarch64_qtbl1v8qi_ppu (__tab, __idx);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl1_s8 (int8x16_t __tab, uint8x8_t __idx)\n {\n-  return __builtin_aarch64_qtbl1v8qi (__tab, (int8x8_t) __idx);\n+  return __builtin_aarch64_qtbl1v8qi_ssu (__tab, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n@@ -10438,15 +10437,14 @@ __extension__ extern __inline poly8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl1q_p8 (poly8x16_t __tab, uint8x16_t __idx)\n {\n-  return (poly8x16_t) __builtin_aarch64_qtbl1v16qi ((int8x16_t) __tab,\n-\t\t\t\t\t\t    (int8x16_t) __idx);\n+  return __builtin_aarch64_qtbl1v16qi_ppu (__tab, __idx);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl1q_s8 (int8x16_t __tab, uint8x16_t __idx)\n {\n-  return __builtin_aarch64_qtbl1v16qi (__tab, (int8x16_t) __idx);\n+  return __builtin_aarch64_qtbl1v16qi_ssu (__tab, __idx);\n }\n \n __extension__ extern __inline uint8x16_t\n@@ -10460,7 +10458,7 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1_s8 (int8x8_t __r, int8x16_t __tab, uint8x8_t __idx)\n {\n-  return __builtin_aarch64_qtbx1v8qi (__r, __tab, (int8x8_t) __idx);\n+  return __builtin_aarch64_qtbx1v8qi_sssu (__r, __tab, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n@@ -10474,16 +10472,14 @@ __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1_p8 (poly8x8_t __r, poly8x16_t __tab, uint8x8_t __idx)\n {\n-  return (poly8x8_t) __builtin_aarch64_qtbx1v8qi ((int8x8_t) __r,\n-\t\t\t\t\t\t  (int8x16_t) __tab,\n-\t\t\t\t\t\t  (int8x8_t) __idx);\n+  return __builtin_aarch64_qtbx1v8qi_pppu (__r, __tab, __idx);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1q_s8 (int8x16_t __r, int8x16_t __tab, uint8x16_t __idx)\n {\n-  return __builtin_aarch64_qtbx1v16qi (__r, __tab, (int8x16_t) __idx);\n+  return __builtin_aarch64_qtbx1v16qi_sssu (__r, __tab, __idx);\n }\n \n __extension__ extern __inline uint8x16_t\n@@ -10497,9 +10493,7 @@ __extension__ extern __inline poly8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1q_p8 (poly8x16_t __r, poly8x16_t __tab, uint8x16_t __idx)\n {\n-  return (poly8x16_t) __builtin_aarch64_qtbx1v16qi ((int8x16_t) __r,\n-\t\t\t\t\t\t    (int8x16_t) __tab,\n-\t\t\t\t\t\t    (int8x16_t) __idx);\n+  return __builtin_aarch64_qtbx1v16qi_pppu (__r, __tab, __idx);\n }\n \n /* V7 legacy table intrinsics.  */\n@@ -10528,8 +10522,7 @@ vtbl1_p8 (poly8x8_t __tab, uint8x8_t __idx)\n {\n   poly8x16_t __temp = vcombine_p8 (__tab,\n \t\t\t\t   vcreate_p8 (__AARCH64_UINT64_C (0x0)));\n-  return (poly8x8_t) __builtin_aarch64_qtbl1v8qi ((int8x16_t) __temp,\n-\t\t\t\t\t\t  (int8x8_t) __idx);\n+  return __builtin_aarch64_qtbl1v8qi_ppu (__temp, __idx);\n }\n \n __extension__ extern __inline int8x8_t\n@@ -10553,8 +10546,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl2_p8 (poly8x8x2_t __tab, uint8x8_t __idx)\n {\n   poly8x16_t __temp = vcombine_p8 (__tab.val[0], __tab.val[1]);\n-  return (poly8x8_t) __builtin_aarch64_qtbl1v8qi ((int8x16_t) __temp,\n-\t\t\t\t\t\t  (int8x8_t) __idx);\n+  return __builtin_aarch64_qtbl1v8qi_ppu (__temp, __idx);\n }\n \n __extension__ extern __inline int8x8_t\n@@ -10653,9 +10645,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbx2_p8 (poly8x8_t __r, poly8x8x2_t __tab, uint8x8_t __idx)\n {\n   poly8x16_t __temp = vcombine_p8 (__tab.val[0], __tab.val[1]);\n-  return (poly8x8_t) __builtin_aarch64_qtbx1v8qi ((int8x8_t) __r,\n-\t\t\t\t\t\t  (int8x16_t) __temp,\n-\t\t\t\t\t\t  (int8x8_t) __idx);\n+  return __builtin_aarch64_qtbx1v8qi_pppu (__r, __temp, __idx);\n }\n \n /* End of temporary inline asm.  */"}]}