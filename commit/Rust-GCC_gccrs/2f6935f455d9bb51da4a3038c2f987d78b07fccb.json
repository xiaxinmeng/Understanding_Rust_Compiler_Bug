{"sha": "2f6935f455d9bb51da4a3038c2f987d78b07fccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY2OTM1ZjQ1NWQ5YmI1MWRhNGEzMDM4YzJmOTg3ZDc4YjA3ZmNjYg==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2012-04-03T12:07:28Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2012-04-03T12:07:28Z"}, "message": "mmap.m4: Use *vms* instead of vms*.\n\nconfig/\n2012-04-03  Tristan Gingold  <gingold@adacore.com>\n\n\t* mmap.m4: Use *vms* instead of vms*.\n\ngcc/\n2012-04-03  Tristan Gingold  <gingold@adacore.com>\n\n\t* configure.ac: Use GCC_AC_FUNC_MMAP_BLACKLIST instead\n\tof gcc_AC_FUNC_MMAP_BLACKLIST.\n\t* acinclude.m4 (gcc_AC_FUNC_MMAP_BLACKLIST): Remove.\n\t* Makefile.in (aclocal_deps): Add mmap.m4.\n\t* configure: Regenerate.\n\t* aclocal.m4: Regenerate.\n\nlibitm/\n2012-04-03  Tristan Gingold  <gingold@adacore.com>\n\n\t* configure: Regenerate.\n\nFrom-SVN: r186106", "tree": {"sha": "23fa331a7066f783cac20b994cf9360e06d86b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23fa331a7066f783cac20b994cf9360e06d86b2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f6935f455d9bb51da4a3038c2f987d78b07fccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6935f455d9bb51da4a3038c2f987d78b07fccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f6935f455d9bb51da4a3038c2f987d78b07fccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6935f455d9bb51da4a3038c2f987d78b07fccb/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07b1bf209c2fa991491ea9317d8afe225dd44f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b1bf209c2fa991491ea9317d8afe225dd44f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b1bf209c2fa991491ea9317d8afe225dd44f97"}], "stats": {"total": 132, "additions": 29, "deletions": 103}, "files": [{"sha": "c1b15bea3f18dbbfc5661e788c041998942d4ffa", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6935f455d9bb51da4a3038c2f987d78b07fccb/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6935f455d9bb51da4a3038c2f987d78b07fccb/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=2f6935f455d9bb51da4a3038c2f987d78b07fccb", "patch": "@@ -1,3 +1,7 @@\n+2012-04-03  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* mmap.m4: Use *vms* instead of vms*.\n+\n 2012-04-02  Tristan Gingold  <gingold@adacore.com>\n \n \t* math.m4 (GCC_CHECK_MATH_FUNC): Remove if-present"}, {"sha": "fba0d9d36573cf7ab725ae0267bd57720a211bb3", "filename": "config/mmap.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6935f455d9bb51da4a3038c2f987d78b07fccb/config%2Fmmap.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6935f455d9bb51da4a3038c2f987d78b07fccb/config%2Fmmap.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmmap.m4?ref=2f6935f455d9bb51da4a3038c2f987d78b07fccb", "patch": "@@ -24,7 +24,7 @@ else\n    # read() to the same fd.  The only system known to have a problem here\n    # is VMS, where text files have record structure.\n    case \"$host_os\" in\n-     vms* | ultrix*) \n+     *vms* | ultrix*)\n         gcc_cv_func_mmap_file=no ;;\n      *)\n         gcc_cv_func_mmap_file=yes;;\n@@ -42,7 +42,7 @@ else\n    # Systems known to be in this category are Windows (all variants),\n    # VMS, and Darwin.\n    case \"$host_os\" in\n-     vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)\n+     *vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)\n         gcc_cv_func_mmap_dev_zero=no ;;\n      *)\n         gcc_cv_func_mmap_dev_zero=yes;;\n@@ -74,7 +74,7 @@ else\n    # above for use of /dev/zero.\n    # Systems known to be in this category are Windows, VMS, and SCO Unix.\n    case \"$host_os\" in\n-     vms* | cygwin* | pe | mingw* | sco* | udk* )\n+     *vms* | cygwin* | pe | mingw* | sco* | udk* )\n         gcc_cv_func_mmap_anon=no ;;\n      *)\n         gcc_cv_func_mmap_anon=yes;;"}, {"sha": "db516599680d6e5a1136357adc263aeb5daa8782", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f6935f455d9bb51da4a3038c2f987d78b07fccb", "patch": "@@ -1,3 +1,12 @@\n+2012-04-03  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* configure.ac: Use GCC_AC_FUNC_MMAP_BLACKLIST instead\n+\tof gcc_AC_FUNC_MMAP_BLACKLIST.\n+\t* acinclude.m4 (gcc_AC_FUNC_MMAP_BLACKLIST): Remove.\n+\t* Makefile.in (aclocal_deps): Add mmap.m4.\n+\t* configure: Regenerate.\n+\t* aclocal.m4: Regenerate.\n+\n 2012-04-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52808"}, {"sha": "8fd820895635b0f0a5e0dbec10640f80e46214bb", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2f6935f455d9bb51da4a3038c2f987d78b07fccb", "patch": "@@ -1650,6 +1650,7 @@ aclocal_deps = \\\n \t$(srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(srcdir)/../config/warnings.m4 \\\n \t$(srcdir)/../config/dfp.m4 \\\n+\t$(srcdir)/../config/mmap.m4 \\\n \t$(srcdir)/acinclude.m4\n \n $(srcdir)/configure: @MAINT@ $(srcdir)/configure.ac $(srcdir)/aclocal.m4"}, {"sha": "c24464b59774dd122ab2780722cec11bf123485c", "filename": "gcc/acinclude.m4", "status": "modified", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facinclude.m4?ref=2f6935f455d9bb51da4a3038c2f987d78b07fccb", "patch": "@@ -221,99 +221,6 @@ test -z \"$INSTALL_DATA\" && INSTALL_DATA='${INSTALL} -m 644'\n AC_SUBST(INSTALL_DATA)dnl\n ])\n \n-# mmap(2) blacklisting.  Some platforms provide the mmap library routine\n-# but don't support all of the features we need from it.\n-AC_DEFUN([gcc_AC_FUNC_MMAP_BLACKLIST],\n-[\n-AC_CHECK_HEADER([sys/mman.h],\n-\t\t[gcc_header_sys_mman_h=yes], [gcc_header_sys_mman_h=no])\n-AC_CHECK_FUNC([mmap], [gcc_func_mmap=yes], [gcc_func_mmap=no])\n-if test \"$gcc_header_sys_mman_h\" != yes \\\n- || test \"$gcc_func_mmap\" != yes; then\n-   gcc_cv_func_mmap_file=no\n-   gcc_cv_func_mmap_dev_zero=no\n-   gcc_cv_func_mmap_anon=no\n-else\n-   AC_CACHE_CHECK([whether read-only mmap of a plain file works], \n-  gcc_cv_func_mmap_file,\n-  [# Add a system to this blacklist if \n-   # mmap(0, stat_size, PROT_READ, MAP_PRIVATE, fd, 0) doesn't return a\n-   # memory area containing the same data that you'd get if you applied\n-   # read() to the same fd.  The only system known to have a problem here\n-   # is VMS, where text files have record structure.\n-   case \"$host_os\" in\n-     vms* | ultrix*) \n-        gcc_cv_func_mmap_file=no ;;\n-     *)\n-        gcc_cv_func_mmap_file=yes;;\n-   esac])\n-   AC_CACHE_CHECK([whether mmap from /dev/zero works],\n-  gcc_cv_func_mmap_dev_zero,\n-  [# Add a system to this blacklist if it has mmap() but /dev/zero\n-   # does not exist, or if mmapping /dev/zero does not give anonymous\n-   # zeroed pages with both the following properties:\n-   # 1. If you map N consecutive pages in with one call, and then\n-   #    unmap any subset of those pages, the pages that were not\n-   #    explicitly unmapped remain accessible.\n-   # 2. If you map two adjacent blocks of memory and then unmap them\n-   #    both at once, they must both go away.\n-   # Systems known to be in this category are Windows (all variants),\n-   # VMS, and Darwin.\n-   case \"$host_os\" in\n-     vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)\n-        gcc_cv_func_mmap_dev_zero=no ;;\n-     *)\n-        gcc_cv_func_mmap_dev_zero=yes;;\n-   esac])\n-\n-   # Unlike /dev/zero, the MAP_ANON(YMOUS) defines can be probed for.\n-   AC_CACHE_CHECK([for MAP_ANON(YMOUS)], gcc_cv_decl_map_anon,\n-    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-[#include <sys/types.h>\n-#include <sys/mman.h>\n-#include <unistd.h>\n-\n-#ifndef MAP_ANONYMOUS\n-#define MAP_ANONYMOUS MAP_ANON\n-#endif\n-],\n-[int n = MAP_ANONYMOUS;])],\n-    gcc_cv_decl_map_anon=yes,\n-    gcc_cv_decl_map_anon=no)])\n-\n-   if test $gcc_cv_decl_map_anon = no; then\n-     gcc_cv_func_mmap_anon=no\n-   else\n-     AC_CACHE_CHECK([whether mmap with MAP_ANON(YMOUS) works],\n-     gcc_cv_func_mmap_anon,\n-  [# Add a system to this blacklist if it has mmap() and MAP_ANON or\n-   # MAP_ANONYMOUS, but using mmap(..., MAP_PRIVATE|MAP_ANONYMOUS, -1, 0)\n-   # doesn't give anonymous zeroed pages with the same properties listed\n-   # above for use of /dev/zero.\n-   # Systems known to be in this category are Windows, VMS, and SCO Unix.\n-   case \"$host_os\" in\n-     vms* | cygwin* | pe | mingw* | sco* | udk* )\n-        gcc_cv_func_mmap_anon=no ;;\n-     *)\n-        gcc_cv_func_mmap_anon=yes;;\n-   esac])\n-   fi\n-fi\n-\n-if test $gcc_cv_func_mmap_file = yes; then\n-  AC_DEFINE(HAVE_MMAP_FILE, 1,\n-\t    [Define if read-only mmap of a plain file works.])\n-fi\n-if test $gcc_cv_func_mmap_dev_zero = yes; then\n-  AC_DEFINE(HAVE_MMAP_DEV_ZERO, 1,\n-\t    [Define if mmap of /dev/zero works.])\n-fi\n-if test $gcc_cv_func_mmap_anon = yes; then\n-  AC_DEFINE(HAVE_MMAP_ANON, 1,\n-\t    [Define if mmap with MAP_ANON(YMOUS) works.])\n-fi\n-])\n-\n dnl Determine if enumerated bitfields are unsigned.   ISO C says they can \n dnl be either signed or unsigned.\n dnl"}, {"sha": "a992c3a96eda9bc1b3dd3d8335e614d9c5aad676", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=2f6935f455d9bb51da4a3038c2f987d78b07fccb", "patch": "@@ -113,6 +113,7 @@ m4_include([../config/lcmessage.m4])\n m4_include([../config/lib-ld.m4])\n m4_include([../config/lib-link.m4])\n m4_include([../config/lib-prefix.m4])\n+m4_include([../config/mmap.m4])\n m4_include([../config/override.m4])\n m4_include([../config/picflag.m4])\n m4_include([../config/progtest.m4])"}, {"sha": "c1b0e465c35954263c5ee9a45199ea34a34b3e53", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2f6935f455d9bb51da4a3038c2f987d78b07fccb", "patch": "@@ -9182,7 +9182,7 @@ else\n    # read() to the same fd.  The only system known to have a problem here\n    # is VMS, where text files have record structure.\n    case \"$host_os\" in\n-     vms* | ultrix*)\n+     *vms* | ultrix*)\n         gcc_cv_func_mmap_file=no ;;\n      *)\n         gcc_cv_func_mmap_file=yes;;\n@@ -9206,7 +9206,7 @@ else\n    # Systems known to be in this category are Windows (all variants),\n    # VMS, and Darwin.\n    case \"$host_os\" in\n-     vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)\n+     *vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)\n         gcc_cv_func_mmap_dev_zero=no ;;\n      *)\n         gcc_cv_func_mmap_dev_zero=yes;;\n@@ -9263,7 +9263,7 @@ else\n    # above for use of /dev/zero.\n    # Systems known to be in this category are Windows, VMS, and SCO Unix.\n    case \"$host_os\" in\n-     vms* | cygwin* | pe | mingw* | sco* | udk* )\n+     *vms* | cygwin* | pe | mingw* | sco* | udk* )\n         gcc_cv_func_mmap_anon=no ;;\n      *)\n         gcc_cv_func_mmap_anon=yes;;"}, {"sha": "8869121f7686140dd76885f9c500dacad6d380e5", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6935f455d9bb51da4a3038c2f987d78b07fccb/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2f6935f455d9bb51da4a3038c2f987d78b07fccb", "patch": "@@ -1059,7 +1059,7 @@ fi\n AC_CHECK_TYPE(ssize_t, int)\n AC_CHECK_TYPE(caddr_t, char *)\n \n-gcc_AC_FUNC_MMAP_BLACKLIST\n+GCC_AC_FUNC_MMAP_BLACKLIST\n \n case \"${host}\" in\n *-*-*vms*)"}, {"sha": "456d1cd190fdf640a098e072ca24e6ca79b8611a", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6935f455d9bb51da4a3038c2f987d78b07fccb/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6935f455d9bb51da4a3038c2f987d78b07fccb/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=2f6935f455d9bb51da4a3038c2f987d78b07fccb", "patch": "@@ -1,3 +1,7 @@\n+2012-04-03  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2012-03-31  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/52812"}, {"sha": "8e1d19ee5a8fdecebaf1728cac0ac0e80a9395cd", "filename": "libitm/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6935f455d9bb51da4a3038c2f987d78b07fccb/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6935f455d9bb51da4a3038c2f987d78b07fccb/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=2f6935f455d9bb51da4a3038c2f987d78b07fccb", "patch": "@@ -15794,7 +15794,7 @@ else\n    # read() to the same fd.  The only system known to have a problem here\n    # is VMS, where text files have record structure.\n    case \"$host_os\" in\n-     vms* | ultrix*)\n+     *vms* | ultrix*)\n         gcc_cv_func_mmap_file=no ;;\n      *)\n         gcc_cv_func_mmap_file=yes;;\n@@ -15818,7 +15818,7 @@ else\n    # Systems known to be in this category are Windows (all variants),\n    # VMS, and Darwin.\n    case \"$host_os\" in\n-     vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)\n+     *vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)\n         gcc_cv_func_mmap_dev_zero=no ;;\n      *)\n         gcc_cv_func_mmap_dev_zero=yes;;\n@@ -15875,7 +15875,7 @@ else\n    # above for use of /dev/zero.\n    # Systems known to be in this category are Windows, VMS, and SCO Unix.\n    case \"$host_os\" in\n-     vms* | cygwin* | pe | mingw* | sco* | udk* )\n+     *vms* | cygwin* | pe | mingw* | sco* | udk* )\n         gcc_cv_func_mmap_anon=no ;;\n      *)\n         gcc_cv_func_mmap_anon=yes;;"}]}