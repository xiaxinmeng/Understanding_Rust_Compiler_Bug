{"sha": "5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUzZmVmNmNlNmY3MWQ3NTA4ODFkY2FhYWNiNGY3YTZiMWFiNzBkMg==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2009-08-10T04:50:23Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2009-08-10T04:50:23Z"}, "message": "alpha.c: Include libfuncs.h\n\n\n\t* config/alpha/alpha.c: Include libfuncs.h\n\t(avms_asm_output_extern): New function.\n\t(alpha_init_libfuncs): Init some decc libfuncs.\n\t* config/alpha/alpha-protos.h (avms_asm_output_external): Declare.\n\t* config/alpha/vms.h (ASM_OUTPUT_EXTERNAL): Define.\n\t(DO_CRTL_NAMES): Define.\n\t(LIB_SPEC): Remove.\n\t* config/alpha/vms64.h: (POINTERS_EXTEND_UNSIGNED): Remove undef.\n\t(LONG_TYPE_SIZE): Define.\n\t(TARGET_OS_CPP_BUILTINS): Define with __LONG_POINTERS=1\n\t(SUBTARGET_SWITCHES): Define malloc64 switch.\n\t(TARGET_DEFAULT): Default MASK_MALLOC64 set.\n\t(MASK_RETURN_ADDR): Define.\n\tdoc/invoke.texi (mmalloc64): Document switch.\n\nFrom-SVN: r150614", "tree": {"sha": "cbce37b6132c345852228bfcf5cb8ce1ed70ae2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbce37b6132c345852228bfcf5cb8ce1ed70ae2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/comments", "author": null, "committer": null, "parents": [{"sha": "221cf9abf3a9f446a4ab9bcf7534f81ef0d1d4e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221cf9abf3a9f446a4ab9bcf7534f81ef0d1d4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/221cf9abf3a9f446a4ab9bcf7534f81ef0d1d4e6"}], "stats": {"total": 131, "additions": 120, "deletions": 11}, "files": [{"sha": "c6c25dec9a22329d4be1144be8737b12299c4201", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2", "patch": "@@ -1,3 +1,20 @@\n+2009-08-09  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/alpha.c: Include libfuncs.h\n+\t(avms_asm_output_extern): New function.\n+\t(alpha_init_libfuncs): Init some decc libfuncs.\n+\t* config/alpha/alpha-protos.h (avms_asm_output_external): Declare.\n+\t* config/alpha/vms.h (ASM_OUTPUT_EXTERNAL): Define.\n+\t(DO_CRTL_NAMES): Define.\n+\t(LIB_SPEC): Remove.\n+\t* config/alpha/vms64.h: (POINTERS_EXTEND_UNSIGNED): Remove undef.\n+\t(LONG_TYPE_SIZE): Define.\n+\t(TARGET_OS_CPP_BUILTINS): Define with __LONG_POINTERS=1\n+\t(SUBTARGET_SWITCHES): Define malloc64 switch.\n+\t(TARGET_DEFAULT): Default MASK_MALLOC64 set.\n+\t(MASK_RETURN_ADDR): Define.\n+\tdoc/invoke.texi (mmalloc64): Document switch.\n+\n 2009-08-09  Olivier Hainque  <hainque@adacore.com>\n             Douglas B Rupp  <rupp@gnat.com>\n "}, {"sha": "a4cbc09a0e3f81d52e3849ce1a6f81fa726c15f3", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for alpha.c functions used in the md file & elsewhere.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -112,6 +112,7 @@ extern rtx alpha_use_linkage (rtx, tree, int, int);\n #if TARGET_ABI_OPEN_VMS\n extern enum avms_arg_type alpha_arg_type (enum machine_mode);\n extern rtx alpha_arg_info_reg_val (CUMULATIVE_ARGS);\n+extern void avms_asm_output_external (FILE *, tree, const char *);\n #endif\n \n extern rtx unicosmk_add_call_info_word (rtx);"}, {"sha": "0bf529493052818e00bc3c38fce786f67688450b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-stdarg.h\"\n #include \"tm-constrs.h\"\n #include \"df.h\"\n+#include \"libfuncs.h\"\n \n /* Specify which cpu to schedule for.  */\n enum processor_type alpha_tune;\n@@ -8494,6 +8495,15 @@ alpha_end_function (FILE *file, const char *fnname, tree decl ATTRIBUTE_UNUSED)\n     }\n }\n \n+#if TARGET_ABI_OPEN_VMS\n+void avms_asm_output_external (FILE *file, tree decl ATTRIBUTE_UNUSED, const char *name)\n+{\n+#ifdef DO_CRTL_NAMES\n+  DO_CRTL_NAMES;\n+#endif\n+}\n+#endif\n+\n #if TARGET_ABI_OSF\n /* Emit a tail call to FUNCTION after adjusting THIS by DELTA.\n \n@@ -10853,6 +10863,11 @@ alpha_init_libfuncs (void)\n       set_optab_libfunc (smod_optab, DImode, \"OTS$REM_L\");\n       set_optab_libfunc (umod_optab, SImode, \"OTS$REM_UI\");\n       set_optab_libfunc (umod_optab, DImode, \"OTS$REM_UL\");\n+      abort_libfunc = init_one_libfunc (\"decc$abort\");\n+      memcmp_libfunc = init_one_libfunc (\"decc$memcmp\");\n+#ifdef MEM_LIBFUNCS_INIT\n+      MEM_LIBFUNCS_INIT;\n+#endif\n     }\n }\n "}, {"sha": "fd7e03b9bb4b9bd3a5daac2e14aa394b57a04557", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2", "patch": "@@ -73,6 +73,10 @@ along with GCC; see the file COPYING3.  If not see\n \n #define MAX_OFILE_ALIGNMENT 524288  /* 8 x 2^16 by DEC Ada Test CD40VRA */\n \n+/* The maximum alignment 'malloc' honors.  */\n+#undef  MALLOC_ALIGNMENT\n+#define MALLOC_ALIGNMENT ((TARGET_MALLOC64 ? 16 : 8) * BITS_PER_UNIT)\n+\n #undef FIXED_REGISTERS\n #define FIXED_REGISTERS  \\\n  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n@@ -295,6 +299,55 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define MD_UNWIND_SUPPORT \"config/alpha/vms-unwind.h\"\n #endif\n \n+#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \\\n+  avms_asm_output_external (FILE, DECL, NAME)\n+\n+typedef struct crtl_name_spec\n+{\n+  const char *const name;\n+  const char *deccname;\n+  int referenced;\n+} crtl_name_spec;\n+\n+#include \"config/vms/vms-crtl.h\"\n+\n+/* Alias CRTL names to 32/64bit DECCRTL functions. \n+   Fixme: This should do a binary search.  */\n+#define DO_CRTL_NAMES                                                      \\\n+  do                                                                       \\\n+    {                                                                      \\\n+      int i;                                                               \\\n+      static crtl_name_spec vms_crtl_names[] = CRTL_NAMES;                 \\\n+      static int malloc64_init = 0;                                        \\\n+                                                                           \\\n+      if ((malloc64_init == 0) && TARGET_MALLOC64)          \t\t   \\\n+\t{                                                                  \\\n+          for (i=0; vms_crtl_names [i].name; i++)                          \\\n+            {                                                              \\\n+\t      if (strcmp (\"calloc\", vms_crtl_names [i].name) == 0)         \\\n+                vms_crtl_names [i].deccname = \"decc$_calloc64\";            \\\n+              else                                                         \\\n+\t      if (strcmp (\"malloc\", vms_crtl_names [i].name) == 0)         \\\n+                vms_crtl_names [i].deccname = \"decc$_malloc64\";            \\\n+              else                                                         \\\n+\t      if (strcmp (\"realloc\", vms_crtl_names [i].name) == 0)        \\\n+                vms_crtl_names [i].deccname = \"decc$_realloc64\";           \\\n+              else                                                         \\\n+\t      if (strcmp (\"strdup\", vms_crtl_names [i].name) == 0)         \\\n+                vms_crtl_names [i].deccname = \"decc$_strdup64\";            \\\n+\t    }                                                              \\\n+            malloc64_init = 1;                                             \\\n+        }                                                                  \\\n+      for (i=0; vms_crtl_names [i].name; i++)                              \\\n+\tif (!vms_crtl_names [i].referenced &&                              \\\n+\t    (strcmp (name, vms_crtl_names [i].name) == 0))                 \\\n+\t  {                                                                \\\n+\t    fprintf (file, \"\\t%s=%s\\n\",                        \\\n+\t\t     name, vms_crtl_names [i].deccname);                   \\\n+\t    vms_crtl_names [i].referenced = 1;                             \\\n+\t  }                                                                \\\n+    } while (0)\n+\n /* This is how to output an assembler line\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */\n@@ -361,9 +414,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ENDFILE_SPEC \\\n \"%{!shared:crtend.o%s} %{!static:%{shared:crtendS.o%s}}\"\n \n-#undef LIB_SPEC\n-#define LIB_SPEC \"-lc\"\n-\n #define NAME__MAIN \"__gccmain\"\n #define SYMBOL__MAIN __gccmain\n "}, {"sha": "07424d0f2924876b8e459539e67fe82668333dc3", "filename": "gcc/config/alpha/vms64.h", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2Fconfig%2Falpha%2Fvms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2Fconfig%2Falpha%2Fvms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms64.h?ref=5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2", "patch": "@@ -1,5 +1,5 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n-   Copyright (C) 2001, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2007, 2009 Free Software Foundation, Inc.\n    Contributed by Douglas Rupp (rupp@gnat.com).\n \n This file is part of GCC.\n@@ -18,14 +18,36 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Defaults to BITS_PER_WORD, e.g. 64 which is what is wanted.\n-  This is incompatible with DEC C, but matches DEC Ada */\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()                \\\n+    do {                                        \\\n+        builtin_define_std (\"vms\");             \\\n+        builtin_define_std (\"VMS\");             \\\n+        builtin_define (\"__ALPHA\");             \\\n+        builtin_assert (\"system=vms\");          \\\n+        builtin_define (\"__IEEE_FLOAT\");        \\\n+        builtin_define (\"__LONG_POINTERS=1\");   \\\n+    } while (0)\n+\n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+  { \"malloc64\",    MASK_MALLOC64,     \"Malloc data into P2 space\" },\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS | MASK_MALLOC64)\n+\n #undef LONG_TYPE_SIZE\n+#define LONG_TYPE_SIZE 64\n+\n+#undef POINTER_SIZE\n+#define POINTER_SIZE 64\n+\n+/* Eventhough pointers are 64bits, only 32bit ever remain significant in code\n+   addresses.  */\n+#define MASK_RETURN_ADDR (GEN_INT (0xffffffff))\n \n /* Defaults to \"long int\" */\n #undef SIZE_TYPE\n #undef PTRDIFF_TYPE\n \n-#undef POINTERS_EXTEND_UNSIGNED\n-#undef POINTER_SIZE\n-#define POINTER_SIZE 64\n+# include \"config/vms/vms-crtl-64.h\""}, {"sha": "42601cdca2ab48fb78b723fbfa62428d7554f70d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5e3fef6ce6f71d750881dcaaacb4f7a6b1ab70d2", "patch": "@@ -535,7 +535,7 @@ Objective-C and Objective-C++ Dialects}.\n -mmemory-latency=@var{time}}\n \n @emph{DEC Alpha/VMS Options}\n-@gccoptlist{-mvms-return-codes -mdebug-main=@var{prefix}}\n+@gccoptlist{-mvms-return-codes -mdebug-main=@var{prefix} -mmalloc64}\n \n @emph{FR30 Options}\n @gccoptlist{-msmall-model -mno-lsim}\n@@ -10601,6 +10601,10 @@ style condition (e.g.@: error) codes.\n @opindex mdebug-main=@var{prefix}\n Flag the first routine whose name starts with @var{prefix} as the main\n routine for the debugger.\n+\n+@item -mmalloc64\n+@opindex mmalloc64\n+Default to 64bit memory allocation routines.\n @end table\n \n @node FR30 Options"}]}