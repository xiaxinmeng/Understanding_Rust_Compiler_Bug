{"sha": "940023f4baf01438669c2316bc0e25eb73c9cf19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwMDIzZjRiYWYwMTQzODY2OWMyMzE2YmMwZTI1ZWI3M2M5Y2YxOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-12T18:04:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-12T18:04:55Z"}, "message": "call.c (merge_conversion_sequences): Set bad_p and user_conv_p on all of the second conversion sequence.\n\n\t* call.c (merge_conversion_sequences): Set bad_p and user_conv_p\n\ton all of the second conversion sequence.\n\t(build_user_type_conversion_1): Set bad_p on the ck_user conv.\n\t(convert_like_real): Handle bad ck_ref_bind with user_conv_p in the\n\tfirst section.  Fix loop logic.\n\t(initialize_reference): Call convert_like for diagnostics when\n\twe have a (bad) conversion.\n\nFrom-SVN: r178790", "tree": {"sha": "a0b9e337e48a0e15f1a6f11de52f6930317c52a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0b9e337e48a0e15f1a6f11de52f6930317c52a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/940023f4baf01438669c2316bc0e25eb73c9cf19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940023f4baf01438669c2316bc0e25eb73c9cf19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940023f4baf01438669c2316bc0e25eb73c9cf19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940023f4baf01438669c2316bc0e25eb73c9cf19/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62a405ddf395d4804d18954fc6b09d90da345d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a405ddf395d4804d18954fc6b09d90da345d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a405ddf395d4804d18954fc6b09d90da345d39"}], "stats": {"total": 73, "additions": 56, "deletions": 17}, "files": [{"sha": "83bd7801cdcf3284d1bf70daddf6f6116c7af723", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940023f4baf01438669c2316bc0e25eb73c9cf19/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940023f4baf01438669c2316bc0e25eb73c9cf19/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=940023f4baf01438669c2316bc0e25eb73c9cf19", "patch": "@@ -1,5 +1,13 @@\n 2011-09-12  Jason Merrill  <jason@redhat.com>\n \n+\t* call.c (merge_conversion_sequences): Set bad_p and user_conv_p\n+\ton all of the second conversion sequence.\n+\t(build_user_type_conversion_1): Set bad_p on the ck_user conv.\n+\t(convert_like_real): Handle bad ck_ref_bind with user_conv_p in the\n+\tfirst section.  Fix loop logic.\n+\t(initialize_reference): Call convert_like for diagnostics when\n+\twe have a (bad) conversion.\n+\n \t* call.c (convert_class_to_reference)\n \t(convert_class_to_reference_1): Remove.\n \t(reference_binding): Use build_user_type_conversion_1 instead."}, {"sha": "a97e8c79417d7302ff47b05b01907c7e4f9f2108", "filename": "gcc/cp/call.c", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940023f4baf01438669c2316bc0e25eb73c9cf19/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940023f4baf01438669c2316bc0e25eb73c9cf19/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=940023f4baf01438669c2316bc0e25eb73c9cf19", "patch": "@@ -3242,21 +3242,23 @@ static conversion *\n merge_conversion_sequences (conversion *user_seq, conversion *std_seq)\n {\n   conversion **t;\n+  bool bad = user_seq->bad_p;\n \n   gcc_assert (user_seq->kind == ck_user);\n \n   /* Find the end of the second conversion sequence.  */\n-  t = &(std_seq);\n-  while ((*t)->kind != ck_identity)\n-    t = &((*t)->u.next);\n+  for (t = &std_seq; (*t)->kind != ck_identity; t = &((*t)->u.next))\n+    {\n+      /* The entire sequence is a user-conversion sequence.  */\n+      (*t)->user_conv_p = true;\n+      if (bad)\n+\t(*t)->bad_p = true;\n+    }\n \n   /* Replace the identity conversion with the user conversion\n      sequence.  */\n   *t = user_seq;\n \n-  /* The entire sequence is a user-conversion sequence.  */\n-  std_seq->user_conv_p = true;\n-\n   return std_seq;\n }\n \n@@ -3533,6 +3535,8 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags)\n       ? totype : non_reference (TREE_TYPE (TREE_TYPE (cand->fn)))),\n      build_identity_conv (TREE_TYPE (expr), expr));\n   conv->cand = cand;\n+  if (cand->viable == -1)\n+    conv->bad_p = true;\n \n   /* Remember that this was a list-initialization.  */\n   if (flags & LOOKUP_NO_NARROWING)\n@@ -3542,9 +3546,6 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags)\n   cand->second_conv = merge_conversion_sequences (conv,\n \t\t\t\t\t\t  cand->second_conv);\n \n-  if (cand->viable == -1)\n-    cand->second_conv->bad_p = true;\n-\n   return cand;\n }\n \n@@ -5529,7 +5530,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n       && convs->kind != ck_user\n       && convs->kind != ck_list\n       && convs->kind != ck_ambig\n-      && convs->kind != ck_ref_bind\n+      && (convs->kind != ck_ref_bind\n+\t  || convs->user_conv_p)\n       && convs->kind != ck_rvalue\n       && convs->kind != ck_base)\n     {\n@@ -5542,7 +5544,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  && BRACE_ENCLOSED_INITIALIZER_P (CONSTRUCTOR_ELT (expr, 0)->value))\n \tpermerror (input_location, \"too many braces around initializer for %qT\", totype);\n \n-      for (; t; t = convs->u.next)\n+      for (; t; t = t->u.next)\n \t{\n \t  if (t->kind == ck_user && t->cand->reason)\n \t    {\n@@ -5553,7 +5555,11 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t\t\t/*issue_conversion_warnings=*/false,\n \t\t\t\t\t/*c_cast_p=*/false,\n \t\t\t\t\tcomplain);\n-\t      return cp_convert (totype, expr);\n+\t      if (convs->kind == ck_ref_bind)\n+\t\treturn convert_to_reference (totype, expr, CONV_IMPLICIT,\n+\t\t\t\t\t     LOOKUP_NORMAL, NULL_TREE);\n+\t      else\n+\t\treturn cp_convert (totype, expr);\n \t    }\n \t  else if (t->kind == ck_user || !t->bad_p)\n \t    {\n@@ -5788,9 +5794,11 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n       {\n \ttree ref_type = totype;\n \n-\tif (convs->bad_p && TYPE_REF_IS_RVALUE (ref_type)\n-\t    && real_lvalue_p (expr))\n+\tif (convs->bad_p && !convs->u.next->bad_p)\n \t  {\n+\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)\n+\t\t\t&& real_lvalue_p (expr));\n+\n \t    error (\"cannot bind %qT lvalue to %qT\",\n \t\t   TREE_TYPE (expr), totype);\n \t    if (fn)\n@@ -8581,9 +8589,11 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup,\n     {\n       if (complain & tf_error)\n \t{\n-\t  if (!CP_TYPE_CONST_P (TREE_TYPE (type))\n-\t      && !TYPE_REF_IS_RVALUE (type)\n-\t      && !real_lvalue_p (expr))\n+\t  if (conv)\n+\t    convert_like (conv, expr, complain);\n+\t  else if (!CP_TYPE_CONST_P (TREE_TYPE (type))\n+\t\t   && !TYPE_REF_IS_RVALUE (type)\n+\t\t   && !real_lvalue_p (expr))\n \t    error (\"invalid initialization of non-const reference of \"\n \t\t   \"type %qT from an rvalue of type %qT\",\n \t\t   type, TREE_TYPE (expr));"}, {"sha": "65bd35467997f5f3220107a13e14b00fe87ad5c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940023f4baf01438669c2316bc0e25eb73c9cf19/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940023f4baf01438669c2316bc0e25eb73c9cf19/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=940023f4baf01438669c2316bc0e25eb73c9cf19", "patch": "@@ -1,3 +1,7 @@\n+2011-09-12  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/explicit7.C: New.\n+\n 2011-09-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/50212"}, {"sha": "7a0b73e9ba09e81bb74505eaf5a72484570cfbcb", "filename": "gcc/testsuite/g++.dg/cpp0x/explicit7.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940023f4baf01438669c2316bc0e25eb73c9cf19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940023f4baf01438669c2316bc0e25eb73c9cf19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit7.C?ref=940023f4baf01438669c2316bc0e25eb73c9cf19", "patch": "@@ -0,0 +1,17 @@\n+// [over.match.conv]: For direct-initialization, those explicit conversion\n+// functions that are not hidden within S and yield type T or a type that\n+// can be converted to type T with a qualification conversion (4.4) are\n+// also candidate functions.\n+\n+// { dg-options -std=c++0x }\n+\n+struct A { };\n+struct B: A { };\n+struct C {\n+  explicit operator B*();\t// { dg-message \"explicit\" }\n+  explicit operator B&();\t// { dg-message \"explicit\" }\n+};\n+\n+C c;\n+A* ap (c);\t\t\t// { dg-error \"\" }\n+A& ar (c);\t\t\t// { dg-error \"\" }"}]}