{"sha": "c77e04ae3ae833109b0aab9ff62f1882879abefd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3ZTA0YWUzYWU4MzMxMDliMGFhYjlmZjYyZjE4ODI4NzlhYmVmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-11-28T21:31:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-11-28T21:31:47Z"}, "message": "genoutput.c (validate_insn_operands): New.\n\n        * genoutput.c (validate_insn_operands): New.\n        (gen_insn): Call it.\n\n        * config/alpha/alpha.md (divmodsi_internal): Renumber operands.\n        (divmoddi_internal): Likewise.\n        * config/arm/arm.md (andsi3_compare0_scratch): Likewise.\n        * config/i960/i960.md (branch patterns): Likewise.\n        * config/ia64/ia64.md (tbit_and_0): Likewise.\n        (tbit_and_1, tbit_or_0, tbit_or_1): Likewise.\n        * config/m68k/m68k.md (zero_extract memory patterns): Likewise.\n        * config/mips/mips.md (divmodsi4_internal): Likewise.\n        (divmoddi4_internal): Likewise.\n        * config/rs6000/rs6000.md (call patterns): Likewise.\n        * config/sh/sh.md (movsi_y): Likewise.\n        * config/sparc/sparc.md: Comment out if 0 v8p shift pattern.\n\nFrom-SVN: r37828", "tree": {"sha": "8c0dafd2db80242046249de676749f4a85109006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c0dafd2db80242046249de676749f4a85109006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77e04ae3ae833109b0aab9ff62f1882879abefd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77e04ae3ae833109b0aab9ff62f1882879abefd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77e04ae3ae833109b0aab9ff62f1882879abefd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77e04ae3ae833109b0aab9ff62f1882879abefd/comments", "author": null, "committer": null, "parents": [{"sha": "79bc466955ec6dcbb4ba0be4c5f8b8924801275d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bc466955ec6dcbb4ba0be4c5f8b8924801275d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79bc466955ec6dcbb4ba0be4c5f8b8924801275d"}], "stats": {"total": 152, "additions": 94, "deletions": 58}, "files": [{"sha": "18b1d1519e5d6cfe40a2a46b13e7d556931b3148", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -1,3 +1,21 @@\n+2000-11-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* genoutput.c (validate_insn_operands): New.\n+\t(gen_insn): Call it.\n+\n+\t* config/alpha/alpha.md (divmodsi_internal): Renumber operands.\n+\t(divmoddi_internal): Likewise.\n+\t* config/arm/arm.md (andsi3_compare0_scratch): Likewise.\n+\t* config/i960/i960.md (branch patterns): Likewise.\n+\t* config/ia64/ia64.md (tbit_and_0): Likewise.\n+\t(tbit_and_1, tbit_or_0, tbit_or_1): Likewise.\n+\t* config/m68k/m68k.md (zero_extract memory patterns): Likewise.\n+\t* config/mips/mips.md (divmodsi4_internal): Likewise.\n+\t(divmoddi4_internal): Likewise.\n+\t* config/rs6000/rs6000.md (call patterns): Likewise.\n+\t* config/sh/sh.md (movsi_y): Likewise.\n+\t* config/sparc/sparc.md: Comment out if 0 v8p shift pattern.\n+\n 2000-11-28  Richard Henderson  <rth@redhat.com>\n \n \t* config.gcc: Kill residual pyramid support."}, {"sha": "b50d2671c250edd2acf38af357bdac3cf010f210", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -986,23 +986,23 @@\n ;; expanded by the assembler.\n (define_insn \"*divmodsi_internal\"\n   [(set (reg:DI 27)\n-\t(sign_extend:DI (match_operator:SI 1 \"divmod_operator\"\n+\t(sign_extend:DI (match_operator:SI 0 \"divmod_operator\"\n \t\t\t[(reg:DI 24) (reg:DI 25)])))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n   \"!TARGET_OPEN_VMS\"\n-  \"%E1 $24,$25,$27\"\n+  \"%E0 $24,$25,$27\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*divmoddi_internal\"\n   [(set (reg:DI 27)\n-\t(match_operator:DI 1 \"divmod_operator\"\n+\t(match_operator:DI 0 \"divmod_operator\"\n \t\t\t[(reg:DI 24) (reg:DI 25)]))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n   \"!TARGET_OPEN_VMS\"\n-  \"%E1 $24,$25,$27\"\n+  \"%E0 $24,$25,$27\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n \f"}, {"sha": "dc99511132d75b0c636e5272a4fab1f77d269e85", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -1708,11 +1708,11 @@\n \t (and:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n \t\t (match_operand:SI 1 \"arm_not_operand\" \"rI,K\"))\n \t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=X,r\"))]\n+   (clobber (match_scratch:SI 2 \"=X,r\"))]\n   \"TARGET_ARM\"\n   \"@\n    tst%?\\\\t%0, %1\n-   bic%?s\\\\t%3, %0, #%B1\"\n+   bic%?s\\\\t%2, %0, #%B1\"\n   [(set_attr \"conds\" \"set\")]\n )\n "}, {"sha": "5b423874749d27b1da045f867a791b3253a73b8d", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -164,53 +164,53 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (sign_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t (ne (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t      (const_int 1)\n-\t\t\t      (match_operand:SI 2 \"arith_operand\" \"dI\"))\n+\t\t\t      (match_operand:SI 1 \"arith_operand\" \"dI\"))\n \t     (const_int 0))\n-\t (label_ref (match_operand 3 \"\" \"\"))\n+\t (label_ref (match_operand 2 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"bbs%+\t%2,%1,%l3\"\n+  \"bbs%+\t%1,%0,%l2\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (eq (sign_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t (eq (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t      (const_int 1)\n-\t\t\t      (match_operand:SI 2 \"arith_operand\" \"dI\"))\n+\t\t\t      (match_operand:SI 1 \"arith_operand\" \"dI\"))\n \t     (const_int 0))\n-\t (label_ref (match_operand 3 \"\" \"\"))\n+\t (label_ref (match_operand 2 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"bbc%+\t%2,%1,%l3\"\n+  \"bbc%+\t%1,%0,%l2\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (zero_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t (ne (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t      (const_int 1)\n-\t\t\t      (match_operand:SI 2 \"arith_operand\" \"dI\"))\n+\t\t\t      (match_operand:SI 1 \"arith_operand\" \"dI\"))\n \t     (const_int 0))\n-\t (label_ref (match_operand 3 \"\" \"\"))\n+\t (label_ref (match_operand 2 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"bbs%+\t%2,%1,%l3\"\n+  \"bbs%+\t%1,%0,%l2\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (eq (zero_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t (eq (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t      (const_int 1)\n-\t\t\t      (match_operand:SI 2 \"arith_operand\" \"dI\"))\n+\t\t\t      (match_operand:SI 1 \"arith_operand\" \"dI\"))\n \t     (const_int 0))\n-\t (label_ref (match_operand 3 \"\" \"\"))\n+\t (label_ref (match_operand 2 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"bbc%+\t%2,%1,%l3\"\n+  \"bbc%+\t%1,%0,%l2\"\n   [(set_attr \"type\" \"branch\")])\n \n ;; ??? These will never match.  The LOG_LINKs necessary to make these match"}, {"sha": "a79b879524025708a3dc2ad113f21796f7345718", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -1662,7 +1662,7 @@\n \t(and:BI (ne:BI (and:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t       (const_int 1))\n \t\t       (const_int 0))\n-\t\t(match_operand:BI 3 \"register_operand\" \"0\")))]\n+\t\t(match_operand:BI 2 \"register_operand\" \"0\")))]\n   \"\"\n   \"tbit.nz.and.orcm %0, %I0 = %1, 0\"\n   [(set_attr \"itanium_class\" \"tbit\")])\n@@ -1672,7 +1672,7 @@\n \t(and:BI (eq:BI (and:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t       (const_int 1))\n \t\t       (const_int 0))\n-\t\t(match_operand:BI 3 \"register_operand\" \"0\")))]\n+\t\t(match_operand:BI 2 \"register_operand\" \"0\")))]\n   \"\"\n   \"tbit.z.and.orcm %0, %I0 = %1, 0\"\n   [(set_attr \"itanium_class\" \"tbit\")])\n@@ -1786,7 +1786,7 @@\n \t(ior:BI (ne:BI (and:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t       (const_int 1))\n \t\t       (const_int 0))\n-\t\t(match_operand:BI 3 \"register_operand\" \"0\")))]\n+\t\t(match_operand:BI 2 \"register_operand\" \"0\")))]\n   \"\"\n   \"tbit.nz.or.andcm %0, %I0 = %1, 0\"\n   [(set_attr \"itanium_class\" \"tbit\")])\n@@ -1796,7 +1796,7 @@\n \t(ior:BI (eq:BI (and:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t       (const_int 1))\n \t\t       (const_int 0))\n-\t\t(match_operand:BI 3 \"register_operand\" \"0\")))]\n+\t\t(match_operand:BI 2 \"register_operand\" \"0\")))]\n   \"\"\n   \"tbit.z.or.andcm %0, %I0 = %1, 0\"\n   [(set_attr \"itanium_class\" \"tbit\")])"}, {"sha": "75c552535c9381477c0405c86e0e66cf1cda6513", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -5277,17 +5277,17 @@\n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n \t\t\t (const_int 32)\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-\t(match_operand:SI 3 \"general_src_operand\" \"rmSi\"))]\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\"))\n+\t(match_operand:SI 2 \"general_src_operand\" \"rmSi\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\n-   && (INTVAL (operands[2]) % 8) == 0\n+   && (INTVAL (operands[1]) % 8) == 0\n    && ! mode_dependent_address_p (XEXP (operands[0], 0))\"\n   \"*\n {\n   operands[0]\n-    = adj_offsettable_operand (operands[0], INTVAL (operands[2]) / 8);\n+    = adj_offsettable_operand (operands[0], INTVAL (operands[1]) / 8);\n \n-  return \\\"move%.l %3,%0\\\";\n+  return \\\"move%.l %2,%0\\\";\n }\")\n \n (define_insn \"\"\n@@ -5331,14 +5331,14 @@\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n \t(zero_extract:SI (match_operand:QI 1 \"memory_src_operand\" \"oS\")\n \t\t\t (const_int 32)\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n-   && (INTVAL (operands[3]) % 8) == 0\n+   && (INTVAL (operands[2]) % 8) == 0\n    && ! mode_dependent_address_p (XEXP (operands[1], 0))\"\n   \"*\n {\n   operands[1]\n-    = adj_offsettable_operand (operands[1], INTVAL (operands[3]) / 8);\n+    = adj_offsettable_operand (operands[1], INTVAL (operands[2]) / 8);\n \n   return \\\"move%.l %1,%0\\\";\n }\")\n@@ -5385,14 +5385,14 @@\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n \t(sign_extract:SI (match_operand:QI 1 \"memory_src_operand\" \"oS\")\n \t\t\t (const_int 32)\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n-   && (INTVAL (operands[3]) % 8) == 0\n+   && (INTVAL (operands[2]) % 8) == 0\n    && ! mode_dependent_address_p (XEXP (operands[1], 0))\"\n   \"*\n {\n   operands[1]\n-    = adj_offsettable_operand (operands[1], INTVAL (operands[3]) / 8);\n+    = adj_offsettable_operand (operands[1], INTVAL (operands[2]) / 8);\n \n   return \\\"move%.l %1,%0\\\";\n }\")"}, {"sha": "a37464e569ff2eda162bef55fc3a95676c087da9", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -2291,7 +2291,7 @@\n    (set (match_operand:SI 3 \"register_operand\" \"=h\")\n \t(mod:SI (match_dup 1)\n \t\t(match_dup 2)))\n-   (clobber (match_scratch:SI 6 \"=a\"))]\n+   (clobber (match_scratch:SI 4 \"=a\"))]\n   \"optimize\"\n   \"div\\\\t$0,%1,%2\"\n   [(set_attr \"type\"\t\"idiv\")\n@@ -2338,7 +2338,7 @@\n    (set (match_operand:DI 3 \"register_operand\" \"=h\")\n \t(mod:DI (match_dup 1)\n \t\t(match_dup 2)))\n-   (clobber (match_scratch:DI 6 \"=a\"))]\n+   (clobber (match_scratch:DI 4 \"=a\"))]\n   \"TARGET_64BIT && optimize\"\n   \"ddiv\\\\t$0,%1,%2\"\n   [(set_attr \"type\"\t\"idiv\")\n@@ -2376,7 +2376,7 @@\n    (set (match_operand:SI 3 \"register_operand\" \"=h\")\n \t(umod:SI (match_dup 1)\n \t\t (match_dup 2)))\n-   (clobber (match_scratch:SI 6 \"=a\"))]\n+   (clobber (match_scratch:SI 4 \"=a\"))]\n   \"optimize\"\n   \"divu\\\\t$0,%1,%2\"\n   [(set_attr \"type\"\t\"idiv\")\n@@ -2414,7 +2414,7 @@\n    (set (match_operand:DI 3 \"register_operand\" \"=h\")\n \t(umod:DI (match_dup 1)\n \t\t (match_dup 2)))\n-   (clobber (match_scratch:DI 6 \"=a\"))]\n+   (clobber (match_scratch:DI 4 \"=a\"))]\n   \"TARGET_64BIT && optimize\"\n   \"ddivu\\\\t$0,%1,%2\"\n   [(set_attr \"type\"\t\"idiv\")"}, {"sha": "54ecc5f1536d765f3b58d6cf743c380fa17cf9b9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -9552,7 +9552,7 @@ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32);\n    (use (reg:SI 11))\n    (set (reg:SI 2)\n \t(mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n-   (clobber (match_scratch:SI 3 \"=l\"))]\n+   (clobber (match_scratch:SI 2 \"=l\"))]\n   \"TARGET_32BIT && DEFAULT_ABI == ABI_AIX\"\n   \"b%T0l\\;{l|lwz} 2,20(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n@@ -9577,7 +9577,7 @@ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32);\n    (use (reg:DI 11))\n    (set (reg:DI 2)\n \t(mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n-   (clobber (match_scratch:SI 3 \"=l\"))]\n+   (clobber (match_scratch:SI 2 \"=l\"))]\n   \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\"\n   \"b%T0l\\;ld 2,40(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n@@ -12568,7 +12568,7 @@ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32);\n   [(set (match_operand:CCEQ 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCEQ (match_operator:SI 2 \n \t\t\t\t      \"branch_positive_comparison_operator\"\n-\t\t\t\t      [(match_operand 3\n+\t\t\t\t      [(match_operand 1\n \t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n \t\t\t\t       (const_int 0)])\n \t\t      (const_int 0)))]"}, {"sha": "de1f553a4a2186f6b0f92fe42d00ae0ed3368c28", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -3172,7 +3172,7 @@\n (define_insn \"*movsi_y\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=y,y\")\n \t(match_operand:SI 1 \"immediate_operand\" \"Qi,I\"))\n-   (clobber (match_scratch:SI 3 \"=&z,r\"))]\n+   (clobber (match_scratch:SI 2 \"=&z,r\"))]\n   \"TARGET_SH3E\n    && (reload_in_progress || reload_completed)\"\n   \"#\""}, {"sha": "b15c39e4524de438dd0586cb8b06bf61695e2695", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -8113,19 +8113,19 @@\n ;; Optimize (1LL<<x)-1\n ;; XXX this also needs to be fixed to handle equal subregs\n ;; XXX first before we could re-enable it.\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=h\")\n-\t(plus:DI (ashift:DI (const_int 1)\n-\t\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n-\t\t (const_int -1)))]\n-  \"0 && TARGET_V8PLUS\"\n-  \"*\n-{\n-  if (GET_CODE (operands[2]) == REG && REGNO (operands[2]) == REGNO (operands[0]))\n-    return \\\"mov\\\\t1, %L0\\;sllx\\\\t%L0, %2, %L0\\;sub\\\\t%L0, 1, %L0\\;srlx\\\\t%L0, 32, %H0\\\";\n-  return \\\"mov\\\\t1, %H0\\;sllx\\\\t%H0, %2, %L0\\;sub\\\\t%L0, 1, %L0\\;srlx\\\\t%L0, 32, %H0\\\";\n-}\"\n-  [(set_attr \"length\" \"4\")])\n+;(define_insn \"\"\n+;  [(set (match_operand:DI 0 \"register_operand\" \"=h\")\n+;\t(plus:DI (ashift:DI (const_int 1)\n+;\t\t\t    (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+;\t\t (const_int -1)))]\n+;  \"0 && TARGET_V8PLUS\"\n+;  \"*\n+;{\n+;  if (GET_CODE (operands[1]) == REG && REGNO (operands[1]) == REGNO (operands[0]))\n+;    return \\\"mov\\\\t1, %L0\\;sllx\\\\t%L0, %1, %L0\\;sub\\\\t%L0, 1, %L0\\;srlx\\\\t%L0, 32, %H0\\\";\n+;  return \\\"mov\\\\t1, %H0\\;sllx\\\\t%H0, %1, %L0\\;sub\\\\t%L0, 1, %L0\\;srlx\\\\t%L0, 32, %H0\\\";\n+;}\"\n+;  [(set_attr \"length\" \"4\")])\n \n (define_insn \"*cmp_cc_ashift_1\"\n   [(set (reg:CC_NOOV 100)"}, {"sha": "a5674c952794d7d7769a4d81b20474121b016290", "filename": "gcc/genoutput.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77e04ae3ae833109b0aab9ff62f1882879abefd/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=c77e04ae3ae833109b0aab9ff62f1882879abefd", "patch": "@@ -182,6 +182,7 @@ static int compare_operands PARAMS ((struct operand_data *,\n static void place_operands PARAMS ((struct data *));\n static void process_template PARAMS ((struct data *, const char *));\n static void validate_insn_alternatives PARAMS ((struct data *));\n+static void validate_insn_operands PARAMS ((struct data *));\n static void gen_insn PARAMS ((rtx, int));\n static void gen_peephole PARAMS ((rtx, int));\n static void gen_expand PARAMS ((rtx, int));\n@@ -737,6 +738,22 @@ validate_insn_alternatives (d)\n   /* Record the insn's overall number of alternatives.  */\n   d->n_alternatives = n;\n }\n+\n+/* Verify that there are no gaps in operand numbers for INSNs.  */\n+\n+static void\n+validate_insn_operands (d)\n+     struct data *d;\n+{\n+  int i;\n+\n+  for (i = 0; i < d->n_operands; ++i)\n+    if (d->operand[i].seen == 0)\n+      {\n+\tmessage_with_line (d->lineno, \"missing operand %d\", i);\n+\thave_error = 1;\n+      }\n+}\n \f\n /* Look at a define_insn just read.  Assign its code number.  Record\n    on idata the template and the number of arguments.  If the insn has\n@@ -774,6 +791,7 @@ gen_insn (insn, lineno)\n   d->n_operands = max_opno + 1;\n   d->n_dups = num_dups;\n \n+  validate_insn_operands (d);\n   validate_insn_alternatives (d);\n   place_operands (d);\n   process_template (d, XSTR (insn, 3));"}]}