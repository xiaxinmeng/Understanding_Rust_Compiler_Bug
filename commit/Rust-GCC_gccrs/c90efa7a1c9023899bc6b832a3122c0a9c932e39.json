{"sha": "c90efa7a1c9023899bc6b832a3122c0a9c932e39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkwZWZhN2ExYzkwMjM4OTliYzZiODMyYTMxMjJjMGE5YzkzMmUzOQ==", "commit": {"author": {"name": "Martin Kahlert", "email": "martin.kahlert@infineon.com", "date": "2001-06-05T09:46:36Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-06-05T09:46:36Z"}, "message": "natClass.cc (_Jv_IsAssignableFrom): Ensure that ancestors table index is within allowed bounds.\n\n2001-06-05  Martin Kahlert  <martin.kahlert@infineon.com>\n\t    Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n\n\t* java/lang/natClass.cc (_Jv_IsAssignableFrom): Ensure that ancestors\n\ttable index is within allowed bounds. Ensure that we dont try to access\n\tclass itable at a negative offset. Avoid an ancestor table lookup if\n\tsource is a primitive type class.\n\t(isInstance): Remove redundant isPrimitive() check.\n\nCo-Authored-By: Bryce McKinlay <bryce@waitaki.otago.ac.nz>\n\nFrom-SVN: r42898", "tree": {"sha": "7bfa2a39962af82d451049cd9cf8ab4cf2159e32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bfa2a39962af82d451049cd9cf8ab4cf2159e32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c90efa7a1c9023899bc6b832a3122c0a9c932e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c90efa7a1c9023899bc6b832a3122c0a9c932e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c90efa7a1c9023899bc6b832a3122c0a9c932e39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c90efa7a1c9023899bc6b832a3122c0a9c932e39/comments", "author": null, "committer": null, "parents": [{"sha": "bdef41acbee51b72655093f9ea9828a5d1599526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdef41acbee51b72655093f9ea9828a5d1599526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdef41acbee51b72655093f9ea9828a5d1599526"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "bf981ef59463960a9cfa7a976cdd265efde3c6ec", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c90efa7a1c9023899bc6b832a3122c0a9c932e39/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c90efa7a1c9023899bc6b832a3122c0a9c932e39/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c90efa7a1c9023899bc6b832a3122c0a9c932e39", "patch": "@@ -1,3 +1,12 @@\n+2001-06-05  Martin Kahlert  <martin.kahlert@infineon.com>\n+\t    Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* java/lang/natClass.cc (_Jv_IsAssignableFrom): Ensure that ancestors\n+\ttable index is within allowed bounds. Ensure that we dont try to access\n+\tclass itable at a negative offset. Avoid an ancestor table lookup if\n+\tsource is a primitive type class.\n+\t(isInstance): Remove redundant isPrimitive() check.\n+\n 2001-06-04  Tom Tromey  <tromey@redhat.com>\n \n \t* java/security/PublicKey.java: Extend Key."}, {"sha": "d6fb3ab7d85f028fce32d82ab2dc4d9218ed6bf9", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c90efa7a1c9023899bc6b832a3122c0a9c932e39/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c90efa7a1c9023899bc6b832a3122c0a9c932e39/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=c90efa7a1c9023899bc6b832a3122c0a9c932e39", "patch": "@@ -633,7 +633,7 @@ java::lang::Class::isAssignableFrom (jclass klass)\n jboolean\n java::lang::Class::isInstance (jobject obj)\n {\n-  if (__builtin_expect (! obj || isPrimitive (), false))\n+  if (! obj)\n     return false;\n   _Jv_InitClass (this);\n   return _Jv_IsAssignableFrom (this, JV_CLASS (obj));\n@@ -939,19 +939,29 @@ _Jv_IsAssignableFrom (jclass target, jclass source)\n       if (cl_iindex < if_idt->iface.ioffsets[0])\n         {\n \t  jshort offset = if_idt->iface.ioffsets[cl_iindex];\n-\t  if (offset < cl_idt->cls.itable_length\n+\t  if (offset != -1 && offset < cl_idt->cls.itable_length\n \t      && cl_idt->cls.itable[offset] == target)\n \t    return true;\n \t}\n       return false;\n     }\n      \n-  if ((target == &ObjectClass && !source->isPrimitive())\n-      || (source->ancestors != NULL \n-\t  && source->ancestors[source->depth - target->depth] == target))\n+  // Primitive TYPE classes are only assignable to themselves.\n+  if (__builtin_expect (target->isPrimitive(), false))\n+    return false;\n+    \n+  if (target == &ObjectClass)\n+    {\n+      if (source->isPrimitive())\n+        return false;\n+      return true;\n+    }\n+  else if (source->ancestors != NULL \n+           && source->depth >= target->depth\n+\t   && source->ancestors[source->depth - target->depth] == target)\n     return true;\n       \n- return false;\n+  return false;\n }\n \n // Interface type checking, the slow way. Returns TRUE if IFACE is a "}]}