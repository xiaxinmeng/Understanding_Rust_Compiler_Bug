{"sha": "dd69f0471de39b76e83c00fa4909d090ab8bf618", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2OWYwNDcxZGUzOWI3NmU4M2MwMGZhNDkwOWQwOTBhYjhiZjYxOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-09-18T23:27:26Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-09-18T23:27:26Z"}, "message": "Remove LIBGCC2_TF_CEXT target macro.\n\nThis patch removes the (undocumented) LIBGCC2_TF_CEXT target macro,\nreplacing it by -fbuilding-libgcc predefines (and thereby gets rid of\nanother LIBGCC2_LONG_DOUBLE_TYPE_SIZE conditional, though some more\npatches are needed before that target macro can be eliminated).  This\nmacro indicated the suffix used on __builtin_huge_val,\n__builtin_copysign, __builtin_fabs built-in function names to produce\nthe names for a given floating-point mode.\n\nPredefines are added for all floating-point modes supported for\nlibgcc, not just TFmode.  These are fully accurate for modes\ncorresponding to float, double and long double.  For other modes, the\nsuffix for *constants* is determined by the targetm.c.mode_for_suffix\nhook (the limit to two possible suffixes 'w' and 'q' being hardcoded\nin various places).  This is in fact the suffix for built-in functions\nas well where such functions exist.\n\n* For i386, the *q functions always exist (whether or not TFmode is\n  used for long double).  The *w functions never exist (but this\n  doesn't matter for libgcc, since no i386 configuration treats XFmode\n  as a supported scalar mode if long double is TFmode; if __float80\n  were to be supported for 64-bit Android, properly such functions\n  ought to be added).\n\n* For ia64, the *q functions exist for non-HP-UX (under HP-UX, long\n  double is TFmode, so they aren't needed).  The *w functions never\n  exist.  This is an issue for this libgcc code for the XFmode complex\n  functions in libgcc on HP-UX; as I understand it, right now those\n  will accidentally be using TFmode versions of those three functions,\n  so involving unnecessary conversions, while the sanity check on CEXT\n  accidentally passes because all it tests is the sizes of the types.\n\nBecause of the lack of 'w' functions, the patch uses 'l' when the\nconstant suffix is 'w', matching what the existing libgcc code would\ndo for IA64 HP-UX in that case.\n\nIdeally there would be generic code to create such built-in functions\nfor all supported floating-point types.  That may be something to\nconsider if support for TS 18661-3 (standard bindings for IEEE\n754-2008, defining names such as _Float128, and function names such as\ncopysignf128) is added in future.\n\nBootstrapped with no regressions on x86_64-unknown-linux-gnu.\n\ngcc:\n\t* system.h (LIBGCC2_TF_CEXT): Poison.\n\t* config/i386/cygming.h (LIBGCC2_TF_CEXT): Remove.\n\t* config/i386/darwin.h (LIBGCC2_TF_CEXT): Likewise.\n\t* config/i386/dragonfly.h (LIBGCC2_TF_CEXT): Likewise.\n\t* config/i386/freebsd.h (LIBGCC2_TF_CEXT): Likewise.\n\t* config/i386/gnu-user-common.h (LIBGCC2_TF_CEXT): Likewise.\n\t* config/i386/openbsdelf.h (LIBGCC2_TF_CEXT): Likewise.\n\t* config/i386/sol2.h (LIBGCC2_TF_CEXT): Likewise.\n\t* config/ia64/ia64.h (LIBGCC2_TF_CEXT): Likewise.\n\t* config/ia64/linux.h (LIBGCC2_TF_CEXT): Likewise.\n\ngcc/c-family:\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __LIBGCC_*_FUNC_EXT__\n\tfor supported floating-point modes.\n\nlibgcc:\n\t* libgcc2.c (CEXT): Define using __LIBGCC_*_FUNC_EXT__.\n\nFrom-SVN: r215368", "tree": {"sha": "e1e000c788f9ea68c8ba46ee3d61a85c1bd7f81b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1e000c788f9ea68c8ba46ee3d61a85c1bd7f81b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd69f0471de39b76e83c00fa4909d090ab8bf618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd69f0471de39b76e83c00fa4909d090ab8bf618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd69f0471de39b76e83c00fa4909d090ab8bf618", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd69f0471de39b76e83c00fa4909d090ab8bf618/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1717f8df9419f72f384448de851f0cd8a64c46e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1717f8df9419f72f384448de851f0cd8a64c46e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1717f8df9419f72f384448de851f0cd8a64c46e"}], "stats": {"total": 87, "additions": 49, "deletions": 38}, "files": [{"sha": "0c7b2154857267ae5a6745aa562cd4b027b7b817", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -1,3 +1,16 @@\n+2014-09-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* system.h (LIBGCC2_TF_CEXT): Poison.\n+\t* config/i386/cygming.h (LIBGCC2_TF_CEXT): Remove.\n+\t* config/i386/darwin.h (LIBGCC2_TF_CEXT): Likewise.\n+\t* config/i386/dragonfly.h (LIBGCC2_TF_CEXT): Likewise.\n+\t* config/i386/freebsd.h (LIBGCC2_TF_CEXT): Likewise.\n+\t* config/i386/gnu-user-common.h (LIBGCC2_TF_CEXT): Likewise.\n+\t* config/i386/openbsdelf.h (LIBGCC2_TF_CEXT): Likewise.\n+\t* config/i386/sol2.h (LIBGCC2_TF_CEXT): Likewise.\n+\t* config/ia64/ia64.h (LIBGCC2_TF_CEXT): Likewise.\n+\t* config/ia64/linux.h (LIBGCC2_TF_CEXT): Likewise.\n+\n 2014-09-19  Kito Cheng  <kito@0xlab.org>\n \n \t* except.h: Fix header guard."}, {"sha": "efe74173f17fa958fb34f5725f42ebc379fed8ab", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -1,3 +1,8 @@\n+2014-09-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __LIBGCC_*_FUNC_EXT__\n+\tfor supported floating-point modes.\n+\n 2014-09-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c.opt (Wpsabi): Use LangEnabledBy."}, {"sha": "9e2040b67d5404ca24906cb6f625aabb16936ccd", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -956,6 +956,28 @@ c_cpp_builtins (cpp_reader *pfile)\n \t\t\t\t\t+ sizeof (\"__LIBGCC_HAS__MODE__\"));\n \t  sprintf (macro_name, \"__LIBGCC_HAS_%s_MODE__\", name);\n \t  cpp_define (pfile, macro_name);\n+\t  macro_name = (char *) alloca (strlen (name)\n+\t\t\t\t\t+ sizeof (\"__LIBGCC__FUNC_EXT__\"));\n+\t  sprintf (macro_name, \"__LIBGCC_%s_FUNC_EXT__\", name);\n+\t  const char *suffix;\n+\t  if (mode == TYPE_MODE (double_type_node))\n+\t    suffix = \"\";\n+\t  else if (mode == TYPE_MODE (float_type_node))\n+\t    suffix = \"f\";\n+\t  else if (mode == TYPE_MODE (long_double_type_node))\n+\t    suffix = \"l\";\n+\t  /* ??? The following assumes the built-in functions (defined\n+\t     in target-specific code) match the suffixes used for\n+\t     constants.  Because in fact such functions are not\n+\t     defined for the 'w' suffix, 'l' is used there\n+\t     instead.  */\n+\t  else if (mode == targetm.c.mode_for_suffix ('q'))\n+\t    suffix = \"q\";\n+\t  else if (mode == targetm.c.mode_for_suffix ('w'))\n+\t    suffix = \"l\";\n+\t  else\n+\t    gcc_unreachable ();\n+\t  builtin_define_with_value (macro_name, suffix, 0);\n \t}\n \n       /* For libgcc crtstuff.c and libgcc2.c.  */"}, {"sha": "95b8f6fb966f60435d00d7e661b26f7d769575aa", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -339,9 +339,6 @@ do {\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n \n-/* Put all *tf routines in libgcc.  */\n-#define LIBGCC2_TF_CEXT q\n-\n /* Output function declarations at the end of the file.  */\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END i386_pe_file_end"}, {"sha": "c1a55c1dd09e6ccad6ed95eb5032845db2e49bcd", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -153,9 +153,6 @@ extern int darwin_emit_branch_islands;\n \n #define SHIFT_DOUBLE_OMITS_COUNT 0\n \n-/* Put all *tf routines in libgcc.  */\n-#define LIBGCC2_TF_CEXT q\n-\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END darwin_file_end\n "}, {"sha": "095112822995682a1e7487802f23e5dbc8b5575b", "filename": "gcc/config/i386/dragonfly.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdragonfly.h?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -89,9 +89,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef TARGET_96_ROUND_53_LONG_DOUBLE\n #define TARGET_96_ROUND_53_LONG_DOUBLE (!TARGET_64BIT)\n \n-/* Put all *tf routines in libgcc.  */\n-#define LIBGCC2_TF_CEXT q\n-\n /* Static stack checking is supported by means of probes.  */\n #define STACK_CHECK_STATIC_BUILTIN 1\n "}, {"sha": "e341f6b02c9282d08f0a6071214708994ed2d92f", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -131,9 +131,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_96_ROUND_53_LONG_DOUBLE\n #define TARGET_96_ROUND_53_LONG_DOUBLE (!TARGET_64BIT)\n \n-/* Put all *tf routines in libgcc.  */\n-#define LIBGCC2_TF_CEXT q\n-\n /* Static stack checking is supported by means of probes.  */\n #define STACK_CHECK_STATIC_BUILTIN 1\n "}, {"sha": "0e619961bc9cb66f01f76606f36d454166f533b3", "filename": "gcc/config/i386/gnu-user-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -57,9 +57,6 @@ along with GCC; see the file COPYING3.  If not see\n   GNU_USER_TARGET_MATHFILE_SPEC \" \" \\\n   GNU_USER_TARGET_ENDFILE_SPEC\n \n-/* Put all *tf routines in libgcc.  */\n-#define LIBGCC2_TF_CEXT q\n-\n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n /* The stack pointer needs to be moved while checking the stack.  */"}, {"sha": "470fbedd6c316385e1326ba71083f9cbd322fd27", "filename": "gcc/config/i386/openbsdelf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -111,6 +111,3 @@ along with GCC; see the file COPYING3.  If not see\n #define OBSD_HAS_CORRECT_SPECS\n \n #define HAVE_ENABLE_EXECUTE_STACK\n-\n-/* Put all *tf routines in libgcc.  */\n-#define LIBGCC2_TF_CEXT q"}, {"sha": "79ad8c1ffa2815ddb78ef52437b500793369a676", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -236,6 +236,3 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef USE_GLD\n #define USE_HIDDEN_LINKONCE 0\n #endif\n-\n-/* Put all *tf routines in libgcc.  */\n-#define LIBGCC2_TF_CEXT q"}, {"sha": "4cc80a9c8eab6fa9964119da33772410f07bc50f", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -258,9 +258,6 @@ while (0)\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE  (TARGET_ABI_OPEN_VMS ? 64 : 80)\n \n \n-/* On HP-UX, we use the l suffix for TFmode in libgcc2.c.  */\n-#define LIBGCC2_TF_CEXT l\n-\n #define DEFAULT_SIGNED_CHAR 1\n \n /* A C expression for a string describing the name of the data type to use for"}, {"sha": "e4b12ec64e54da047adcb4b4fe8eb1bbe7ee5b3c", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -76,10 +76,6 @@ do {\t\t\t\t\t\t\\\n #undef LINK_EH_SPEC\n #define LINK_EH_SPEC \"\"\n \n-/* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_TF_CEXT\n-#define LIBGCC2_TF_CEXT q\n-\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS ia64_soft_fp_init_libfuncs\n "}, {"sha": "3208a9d6f8c52cf8802ac5bb7d89926719bd2d6b", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -936,7 +936,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tEXTRA_CONSTRAINT_STR EXTRA_MEMORY_CONSTRAINT\t\t\t   \\\n \tEXTRA_ADDRESS_CONSTRAINT CONST_DOUBLE_OK_FOR_CONSTRAINT_P\t   \\\n \tCALLER_SAVE_PROFITABLE LARGEST_EXPONENT_IS_NORMAL\t\t   \\\n-\tROUND_TOWARDS_ZERO SF_SIZE DF_SIZE XF_SIZE TF_SIZE\n+\tROUND_TOWARDS_ZERO SF_SIZE DF_SIZE XF_SIZE TF_SIZE LIBGCC2_TF_CEXT\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "3673651497f4f7c3908a5d028555105b1d3a9d73", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -1,3 +1,7 @@\n+2014-09-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* libgcc2.c (CEXT): Define using __LIBGCC_*_FUNC_EXT__.\n+\n 2014-09-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/i386/sfp-machine.h (FP_TRAPPING_EXCEPTIONS): Treat clear"}, {"sha": "dc8a235e8b88860e50d555828ab8db02737b5e46", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69f0471de39b76e83c00fa4909d090ab8bf618/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69f0471de39b76e83c00fa4909d090ab8bf618/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=dd69f0471de39b76e83c00fa4909d090ab8bf618", "patch": "@@ -1865,34 +1865,29 @@ NAME (TYPE x, int m)\n # define MTYPE\tSFtype\n # define CTYPE\tSCtype\n # define MODE\tsc\n-# define CEXT\tf\n+# define CEXT\t__LIBGCC_SF_FUNC_EXT__\n # define NOTRUNC __FLT_EVAL_METHOD__ == 0\n #elif defined(L_muldc3) || defined(L_divdc3)\n # define MTYPE\tDFtype\n # define CTYPE\tDCtype\n # define MODE\tdc\n+# define CEXT\t__LIBGCC_DF_FUNC_EXT__\n # if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 64\n-#  define CEXT\tl\n #  define NOTRUNC 1\n # else\n-#  define CEXT\n #  define NOTRUNC __FLT_EVAL_METHOD__ == 0 || __FLT_EVAL_METHOD__ == 1\n # endif\n #elif defined(L_mulxc3) || defined(L_divxc3)\n # define MTYPE\tXFtype\n # define CTYPE\tXCtype\n # define MODE\txc\n-# define CEXT\tl\n+# define CEXT\t__LIBGCC_XF_FUNC_EXT__\n # define NOTRUNC 1\n #elif defined(L_multc3) || defined(L_divtc3)\n # define MTYPE\tTFtype\n # define CTYPE\tTCtype\n # define MODE\ttc\n-# if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128\n-#  define CEXT l\n-# else\n-#  define CEXT LIBGCC2_TF_CEXT\n-# endif\n+# define CEXT\t__LIBGCC_TF_FUNC_EXT__\n # define NOTRUNC 1\n #else\n # error"}]}