{"sha": "3e894af1569a84c5bb6eb730266248e6a4cae2de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U4OTRhZjE1NjlhODRjNWJiNmViNzMwMjY2MjQ4ZTZhNGNhZTJkZQ==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2008-05-16T13:34:34Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2008-05-16T13:34:34Z"}, "message": "invoke.text (-fdump-tree-*-verbose): New option.\n\n2008-05-16  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* doc/invoke.text (-fdump-tree-*-verbose): New option.\n\t* tree-dump.c (dump_options): New verbose option.\n\t* tree-pretty-print.c (dump_phi_nodes, dump_generic_bb_buff):\n\tAdd verbose dump.\n\t* tree-pass.h (TDF_VERBOSE): New dump flag.\n\t* print-tree.c (print_node): Added code to be able to print\n\tPHI_NODES.\n\t(tree-flow.h): Added include.\n\tMakefile.in (print-tree.o):  Added TREE_FLOW_H.\n\nFrom-SVN: r135417", "tree": {"sha": "41e1ad4097935bc77cbf6d58f2b8d967d25d101f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41e1ad4097935bc77cbf6d58f2b8d967d25d101f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e894af1569a84c5bb6eb730266248e6a4cae2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e894af1569a84c5bb6eb730266248e6a4cae2de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e894af1569a84c5bb6eb730266248e6a4cae2de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e894af1569a84c5bb6eb730266248e6a4cae2de/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fc4d8507ed500b25bf558875b1c011ce36e4647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc4d8507ed500b25bf558875b1c011ce36e4647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc4d8507ed500b25bf558875b1c011ce36e4647"}], "stats": {"total": 84, "additions": 62, "deletions": 22}, "files": [{"sha": "1c2ac87f62079f8ef9709556f21c24b19e7ee725", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e894af1569a84c5bb6eb730266248e6a4cae2de", "patch": "@@ -1,3 +1,15 @@\n+2008-05-16  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* doc/invoke.text (-fdump-tree-*-verbose): New option.\n+\t* tree-dump.c (dump_options): New verbose option.\n+\t* tree-pretty-print.c (dump_phi_nodes, dump_generic_bb_buff):\n+\tAdd verbose dump.\n+\t* tree-pass.h (TDF_VERBOSE): New dump flag.\n+\t* print-tree.c (print_node): Added code to be able to print\n+\tPHI_NODES.\n+\t(tree-flow.h): Added include.\n+\tMakefile.in (print-tree.o):  Added TREE_FLOW_H.\n+\n 2008-05-16  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.c (bfin_discover_loops): Delete empty loops."}, {"sha": "56d2aed78406da7379e1b76d4d593757cf9872b2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3e894af1569a84c5bb6eb730266248e6a4cae2de", "patch": "@@ -1986,7 +1986,7 @@ tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    debug.h $(DIAGNOSTIC_H) $(TREE_FLOW_H) tree-iterator.h tree-mudflap.h \\\n    ipa-prop.h value-prof.h $(TARGET_H) $(INTEGRATE_H)\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(GGC_H) langhooks.h $(REAL_H) tree-iterator.h fixed-value.h\n+   $(GGC_H) langhooks.h $(REAL_H) tree-iterator.h fixed-value.h $(TREE_FLOW_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(PARAMS_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) $(RTL_H) \\\n    $(GGC_H) $(TM_P_H) $(TARGET_H) langhooks.h $(REGS_H) gt-stor-layout.h \\"}, {"sha": "e515a0f191b23e446f56e2b47988381dd7ec4b21", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3e894af1569a84c5bb6eb730266248e6a4cae2de", "patch": "@@ -4771,8 +4771,11 @@ Enable showing virtual operands for every statement.\n Enable showing line numbers for statements.\n @item uid\n Enable showing the unique ID (@code{DECL_UID}) for each variable.\n+@item verbose\n+Enable showing the tree dump for each statement.\n @item all\n-Turn on all options, except @option{raw}, @option{slim} and @option{lineno}.\n+Turn on all options, except @option{raw}, @option{slim}, @option{verbose}\n+and @option{lineno}.\n @end table\n \n The following tree dumps are possible:"}, {"sha": "3b34f89d41c1df55b292ede44ff36404d51a808a", "filename": "gcc/print-tree.c", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=3e894af1569a84c5bb6eb730266248e6a4cae2de", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"langhooks.h\"\n #include \"tree-iterator.h\"\n+#include \"tree-flow.h\"\n \n /* Define the hash table of nodes already seen.\n    Such nodes are not repeated; brief cross-references are used.  */\n@@ -221,21 +222,25 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n       return;\n     }\n \n-  hash = ((unsigned long) node) % HASH_SIZE;\n-\n-  /* If node is in the table, just mention its address.  */\n-  for (b = table[hash]; b; b = b->next)\n-    if (b->node == node)\n-      {\n-\tprint_node_brief (file, prefix, node, indent);\n-\treturn;\n-      }\n-\n-  /* Add this node to the table.  */\n-  b = XNEW (struct bucket);\n-  b->node = node;\n-  b->next = table[hash];\n-  table[hash] = b;\n+  /* Allow this function to be called if the table is not there.  */\n+  if (table)\n+    {\n+      hash = ((unsigned long) node) % HASH_SIZE;\n+      \n+      /* If node is in the table, just mention its address.  */\n+      for (b = table[hash]; b; b = b->next)\n+\tif (b->node == node)\n+\t  {\n+\t    print_node_brief (file, prefix, node, indent);\n+\t    return;\n+\t  }\n+      \n+      /* Add this node to the table.  */\n+      b = XNEW (struct bucket);\n+      b->node = node;\n+      b->next = table[hash];\n+      table[hash] = b;\n+    }\n \n   /* Indent to the specified column, since this is the long form.  */\n   indent_to (file, indent);\n@@ -906,6 +911,12 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t    }\n \t  break;\n \n+\tcase PHI_NODE:\n+\t  print_node (file, \"result\", PHI_RESULT (node), indent + 4);\n+\t  for (i = 0; i < PHI_NUM_ARGS (node); i++)\n+\t    print_node (file, \"arg\", PHI_ARG_DEF (node, i), indent + 4);\n+\t  break;\n+\n \tcase OMP_CLAUSE:\n \t    {\n \t      int i;"}, {"sha": "2de19c4b7a3faae2dcaa678e184a0489a9f77c05", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=3e894af1569a84c5bb6eb730266248e6a4cae2de", "patch": "@@ -6179,12 +6179,17 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n       print_generic_expr (file, TREE_TYPE (arg), dump_flags);\n       fprintf (file, \" \");\n       print_generic_expr (file, arg, dump_flags);\n+      if (flags & TDF_VERBOSE)\n+\tprint_node (file, \"\", arg, 4);\n       if (TREE_CHAIN (arg))\n \tfprintf (file, \", \");\n       arg = TREE_CHAIN (arg);\n     }\n   fprintf (file, \")\\n\");\n \n+  if (flags & TDF_VERBOSE)\n+    print_node (file, \"\", fn, 2);\n+\n   dsf = DECL_STRUCT_FUNCTION (fn);\n   if (dsf && (flags & TDF_DETAILS))\n     dump_eh_tree (file, dsf);\n@@ -6210,6 +6215,8 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n \t  var = TREE_VALUE (vars);\n \n \t  print_generic_decl (file, var, flags);\n+\t  if (flags & TDF_VERBOSE)\n+\t    print_node (file, \"\", var, 4);\n \t  fprintf (file, \"\\n\");\n \n \t  any_var = true;"}, {"sha": "8e911ab93eaf5d904f32419df47a2e413bc2e968", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=3e894af1569a84c5bb6eb730266248e6a4cae2de", "patch": "@@ -822,8 +822,9 @@ static const struct dump_option_value_info dump_options[] =\n   {\"uid\", TDF_UID},\n   {\"stmtaddr\", TDF_STMTADDR},\n   {\"memsyms\", TDF_MEMSYMS},\n+  {\"verbose\", TDF_VERBOSE},\n   {\"all\", ~(TDF_RAW | TDF_SLIM | TDF_LINENO | TDF_TREE | TDF_RTL | TDF_IPA \n-\t    | TDF_STMTADDR | TDF_GRAPH | TDF_DIAGNOSTIC)},\n+\t    | TDF_STMTADDR | TDF_GRAPH | TDF_DIAGNOSTIC | TDF_VERBOSE)},\n   {NULL, 0}\n };\n "}, {"sha": "916df71ac6b4e832f7da2a382e4db3e741ccc0a6", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=3e894af1569a84c5bb6eb730266248e6a4cae2de", "patch": "@@ -70,6 +70,8 @@ enum tree_dump_index\n \n #define TDF_DIAGNOSTIC\t(1 << 15)\t/* A dump to be put in a diagnostic\n \t\t\t\t\t   message.  */\n+#define TDF_VERBOSE     (1 << 16)       /* A dump that uses the full tree \n+\t\t\t\t\t   dumper to print stmts. */\n \n extern char *get_dump_file_name (enum tree_dump_index);\n extern int dump_enabled_p (enum tree_dump_index);"}, {"sha": "811c195e126f23b209dc1ff2f7d00aa9cad3cf28", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e894af1569a84c5bb6eb730266248e6a4cae2de/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=3e894af1569a84c5bb6eb730266248e6a4cae2de", "patch": "@@ -436,10 +436,10 @@ dump_symbols (pretty_printer *buffer, bitmap syms, int flags)\n }\n \n \n-/* Dump the node NODE on the pretty_printer BUFFER, SPC spaces of indent.\n-   FLAGS specifies details to show in the dump (see TDF_* in tree-pass.h).\n-   If IS_STMT is true, the object printed is considered to be a statement\n-   and it is terminated by ';' if appropriate.  */\n+/* Dump the node NODE on the pretty_printer BUFFER, SPC spaces of\n+   indent.  FLAGS specifies details to show in the dump (see TDF_* in\n+   tree-pass.h).  If IS_STMT is true, the object printed is considered\n+   to be a statement and it is terminated by ';' if appropriate.  */\n \n int\n dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n@@ -3052,6 +3052,8 @@ dump_phi_nodes (pretty_printer *buffer, basic_block bb, int indent, int flags)\n           pp_string (buffer, \"# \");\n           dump_generic_node (buffer, phi, indent, flags, false);\n           pp_newline (buffer);\n+\t  if (flags & TDF_VERBOSE)\n+\t    print_node (buffer->buffer->stream, \"\", phi, indent);\n         }\n     }\n }\n@@ -3170,6 +3172,8 @@ dump_generic_bb_buff (pretty_printer *buffer, basic_block bb,\n       dump_generic_node (buffer, stmt, curr_indent, flags, true);\n       pp_newline (buffer);\n       dump_histograms_for_stmt (cfun, buffer->buffer->stream, stmt);\n+      if (flags & TDF_VERBOSE)\n+\tprint_node (buffer->buffer->stream, \"\", stmt, curr_indent);\n     }\n \n   dump_implicit_edges (buffer, bb, indent, flags);"}]}