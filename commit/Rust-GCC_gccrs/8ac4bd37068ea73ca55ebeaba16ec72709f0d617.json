{"sha": "8ac4bd37068ea73ca55ebeaba16ec72709f0d617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjNGJkMzcwNjhlYTczY2E1NWViZWFiYTE2ZWM3MjcwOWYwZDYxNw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2004-09-24T08:02:09Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-09-24T08:02:09Z"}, "message": "URL.java (systemClassLoader): New static field.\n\n2004-09-24  Mark Wielaard  <mark@klomp.org>\n\n\t* java/net/URL.java (systemClassLoader): New static field.\n\t(getURLStreamHandler): Always use system/application classloader\n\tfor finding URLStreamhandler. Remove unecessary instanceof checks.\n\nFrom-SVN: r88018", "tree": {"sha": "ed0263ee65d59d07f81ce3217917dc217eec3ca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed0263ee65d59d07f81ce3217917dc217eec3ca1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ac4bd37068ea73ca55ebeaba16ec72709f0d617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac4bd37068ea73ca55ebeaba16ec72709f0d617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac4bd37068ea73ca55ebeaba16ec72709f0d617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac4bd37068ea73ca55ebeaba16ec72709f0d617/comments", "author": null, "committer": null, "parents": [{"sha": "a834e70bc5a5ebd751d5782d713da81c95b31766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a834e70bc5a5ebd751d5782d713da81c95b31766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a834e70bc5a5ebd751d5782d713da81c95b31766"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "1399a55ee70f1b302731ad3139f98e86b8e39a70", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac4bd37068ea73ca55ebeaba16ec72709f0d617/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac4bd37068ea73ca55ebeaba16ec72709f0d617/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8ac4bd37068ea73ca55ebeaba16ec72709f0d617", "patch": "@@ -1,3 +1,9 @@\n+2004-09-24  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/net/URL.java (systemClassLoader): New static field.\n+\t(getURLStreamHandler): Always use system/application classloader\n+\tfor finding URLStreamhandler. Remove unecessary instanceof checks.\n+\n 2004-09-24  Guilhem Lavaux <guilhem@kaffe.org>\n \n \t* java/net/URL.java"}, {"sha": "7bbbd982deb8a228bd73ac5621f58337673bc486", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac4bd37068ea73ca55ebeaba16ec72709f0d617/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac4bd37068ea73ca55ebeaba16ec72709f0d617/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=8ac4bd37068ea73ca55ebeaba16ec72709f0d617", "patch": "@@ -39,6 +39,8 @@\n package java.net;\n \n import gnu.java.net.URLParseError;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.ObjectInputStream;\n@@ -124,6 +126,9 @@ public final class URL implements Serializable\n   private static final String DEFAULT_SEARCH_PATH =\n     \"gnu.java.net.protocol|gnu.inet\";\n \n+  // Cached System ClassLoader\n+  private static ClassLoader systemClassLoader;\n+\n   /**\n    * The name of the protocol for this URL.\n    * The protocol is always stored in lower case.\n@@ -890,36 +895,39 @@ else if (protocol.equals(\"file\"))\n \t// Finally loop through our search path looking for a match.\n \tStringTokenizer pkgPrefix = new StringTokenizer(ph_search_path, \"|\");\n \n-\tdo\n+\t// Cache the systemClassLoader\n+\tif (systemClassLoader == null)\n \t  {\n-\t    String clsName =\n-\t      (pkgPrefix.nextToken() + \".\" + protocol + \".Handler\");\n+\t    systemClassLoader = (ClassLoader) AccessController.doPrivileged\n+\t      (new PrivilegedAction() {\n+\t\t  public Object run() {\n+\t\t    return ClassLoader.getSystemClassLoader();\n+\t\t  }\n+\t\t});\n+\t  }\n \n+\tdo\n+\t  {\n \t    try\n \t      {\n-\t\tObject obj = Class.forName(clsName).newInstance();\n-\n-\t\tif (! (obj instanceof URLStreamHandler))\n-\t\t  continue;\n-\t\telse\n-\t\t  ph = (URLStreamHandler) obj;\n-\t      }\n-\t    catch (Exception e)\n-\t      {\n-\t\t// Can't instantiate; handler still null,\n-\t\t// go on to next element.\n+\t\t// Try to get a class from the system/application\n+\t\t// classloader, initialize it, make an instance\n+\t\t// and try to cast it to a URLStreamHandler.\n+\t\tString clsName =\n+\t\t  (pkgPrefix.nextToken() + \".\" + protocol + \".Handler\");\n+\t\tClass c = Class.forName(clsName, true, systemClassLoader);\n+\t\tph = (URLStreamHandler) c.newInstance();\n \t      }\n+\t    catch (Throwable t) { /* ignored */ }\n \t  }\n-\t while ((! (ph instanceof URLStreamHandler))\n-\t        && pkgPrefix.hasMoreTokens());\n+\t while (ph == null && pkgPrefix.hasMoreTokens());\n       }\n \n     // Update the hashtable with the new protocol handler.\n     if (ph != null && cache_handlers)\n-      if (ph instanceof URLStreamHandler)\n-\tph_cache.put(protocol, ph);\n-      else\n-\tph = null;\n+      ph_cache.put(protocol, ph);\n+    else\n+      ph = null;\n \n     return ph;\n   }"}]}