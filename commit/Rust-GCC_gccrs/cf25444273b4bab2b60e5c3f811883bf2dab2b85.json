{"sha": "cf25444273b4bab2b60e5c3f811883bf2dab2b85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyNTQ0NDI3M2I0YmFiMmI2MGU1YzNmODExODgzYmYyZGFiMmI4NQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2018-04-27T20:32:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-27T20:32:18Z"}, "message": "re PR ipa/85549 (Infinite loop in ilmbase package)\n\n\tPR ipa/85549\n\t* ipa-cp.c (find_aggregate_values_for_callers_subset): Make sure\n\tthe jump function allows for passing through aggregate values.\n\n\t* g++.dg/ipa/pr85549.C: New test.\n\nFrom-SVN: r259730", "tree": {"sha": "568ec04f555ee5835d9e4e55339a2b3e49e87a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/568ec04f555ee5835d9e4e55339a2b3e49e87a05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf25444273b4bab2b60e5c3f811883bf2dab2b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf25444273b4bab2b60e5c3f811883bf2dab2b85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf25444273b4bab2b60e5c3f811883bf2dab2b85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf25444273b4bab2b60e5c3f811883bf2dab2b85/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2b1ea3455979699f172e1601785efa57e3cd3f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b1ea3455979699f172e1601785efa57e3cd3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b1ea3455979699f172e1601785efa57e3cd3f2"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "8513d2dec2ff2ebfd76c8a6b34ce2acabe639f0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf25444273b4bab2b60e5c3f811883bf2dab2b85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf25444273b4bab2b60e5c3f811883bf2dab2b85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf25444273b4bab2b60e5c3f811883bf2dab2b85", "patch": "@@ -1,3 +1,9 @@\n+2018-04-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/85549\n+\t* ipa-cp.c (find_aggregate_values_for_callers_subset): Make sure\n+\tthe jump function allows for passing through aggregate values.\n+\n 2018-04-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* input.h (in_system_header_at): Convert from macro to inline"}, {"sha": "4f28a55b8620d821a7c9acbb107d153dba2cf652", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf25444273b4bab2b60e5c3f811883bf2dab2b85/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf25444273b4bab2b60e5c3f811883bf2dab2b85/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=cf25444273b4bab2b60e5c3f811883bf2dab2b85", "patch": "@@ -4372,7 +4372,9 @@ find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n \t{\n \t  struct ipa_jump_func *jfunc\n \t    = ipa_get_ith_jump_func (IPA_EDGE_REF (cs), i);\n-\t  if (self_recursive_pass_through_p (cs, jfunc, i))\n+\t  if (self_recursive_pass_through_p (cs, jfunc, i)\n+\t      && (!plats->aggs_by_ref\n+\t\t  || ipa_get_jf_pass_through_agg_preserved (jfunc)))\n \t    continue;\n \t  inter = intersect_aggregates_with_edge (cs, i, inter);\n "}, {"sha": "47da0434d8a608a94c6aa98b52bf540cb7c78dc1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf25444273b4bab2b60e5c3f811883bf2dab2b85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf25444273b4bab2b60e5c3f811883bf2dab2b85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf25444273b4bab2b60e5c3f811883bf2dab2b85", "patch": "@@ -1,3 +1,8 @@\n+2018-04-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/85549\n+\t* g++.dg/ipa/pr85549.C: New test.\n+\n 2018-04-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85553"}, {"sha": "ae0336e16b71535b15c586624179d545d8864662", "filename": "gcc/testsuite/g++.dg/ipa/pr85549.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf25444273b4bab2b60e5c3f811883bf2dab2b85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85549.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf25444273b4bab2b60e5c3f811883bf2dab2b85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85549.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85549.C?ref=cf25444273b4bab2b60e5c3f811883bf2dab2b85", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <vector>\n+\n+#define N 10\n+\n+static void visit(int &level, int n, int k, std::vector< int > &value) {\n+  level = level + 1;\n+  value[k] = level;\n+  for (int i = 0 ; i < n; i++)\n+    if (value[i] == 0)\n+      visit(level, n, i, value);\n+}\n+void permutations()\n+{\n+  std::vector< int > value(N);\n+  int level = -1;\n+  visit(level, N, 0, value);\n+}\n+void testExtendByBox() {\n+  permutations();\n+}\n+\n+int main() {\n+  testExtendByBox();\n+  return 0;\n+}"}]}