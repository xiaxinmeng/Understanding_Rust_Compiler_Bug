{"sha": "20288a0c89906ec21b90a3008a5bc98df1e69375", "node_id": "C_kwDOANBUbNoAKDIwMjg4YTBjODk5MDZlYzIxYjkwYTMwMDhhNWJjOThkZjFlNjkzNzU", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-08-30T09:32:47Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-09-06T05:40:57Z"}, "message": "Fix _mm512_cvt_roundps_ph to generate sae instruction.\n\nzmm-version vcvtps2ph is special, it encodes {sae} in evex, but put\nround control in the imm. For intrinsic _mm512_cvt_roundps_ph (a,\nimm), imm contains both {sae} and round control, we need to separate\nit in the assembly output since vcvtps2ph will ignore imm[3:7].\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-builtin.def (IX86_BUILTIN_CVTPS2PH512):\n\tMap to CODE_FOR_avx512f_vcvtps2ph512_mask_sae.\n\t* config/i386/sse.md (<mask_codefor>avx512f_vcvtps2ph512<mask_name>): Extend to ..\n\t(<mask_codefor>avx512f_vcvtps2ph512<mask_name><round_saeonly_name>): .. this.\n\t(avx512f_vcvtps2ph512_mask_sae): New expander\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512f-vcvtps2ph-sae.c: New test.", "tree": {"sha": "d18e5d2a157bbf2e614fa6122b2edf4e5971c7e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d18e5d2a157bbf2e614fa6122b2edf4e5971c7e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20288a0c89906ec21b90a3008a5bc98df1e69375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20288a0c89906ec21b90a3008a5bc98df1e69375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20288a0c89906ec21b90a3008a5bc98df1e69375", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20288a0c89906ec21b90a3008a5bc98df1e69375/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47d2dcd1397bf02b79515c39438e0ea9898f9056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d2dcd1397bf02b79515c39438e0ea9898f9056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d2dcd1397bf02b79515c39438e0ea9898f9056"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "dea52a28d28559a0d571a153e36f586cd97df73d", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20288a0c89906ec21b90a3008a5bc98df1e69375/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20288a0c89906ec21b90a3008a5bc98df1e69375/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=20288a0c89906ec21b90a3008a5bc98df1e69375", "patch": "@@ -1351,7 +1351,7 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_cmpv8di3_mask, \"__builtin_ia\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_compressv8df_mask, \"__builtin_ia32_compressdf512_mask\", IX86_BUILTIN_COMPRESSPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_compressv16sf_mask, \"__builtin_ia32_compresssf512_mask\", IX86_BUILTIN_COMPRESSPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_floatv8siv8df2_mask, \"__builtin_ia32_cvtdq2pd512_mask\", IX86_BUILTIN_CVTDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vcvtps2ph512_mask,  \"__builtin_ia32_vcvtps2ph512_mask\", IX86_BUILTIN_CVTPS2PH512, UNKNOWN, (int) V16HI_FTYPE_V16SF_INT_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vcvtps2ph512_mask_sae,  \"__builtin_ia32_vcvtps2ph512_mask\", IX86_BUILTIN_CVTPS2PH512, UNKNOWN, (int) V16HI_FTYPE_V16SF_INT_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_ufloatv8siv8df2_mask, \"__builtin_ia32_cvtudq2pd512_mask\", IX86_BUILTIN_CVTUDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_cvtusi2sd32, \"__builtin_ia32_cvtusi2sd32\", IX86_BUILTIN_CVTUSI2SD32, UNKNOWN, (int) V2DF_FTYPE_V2DF_UINT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_expandv8df_mask, \"__builtin_ia32_expanddf512_mask\", IX86_BUILTIN_EXPANDPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_UQI)"}, {"sha": "d535c0af04363ddca7df4fab908acbeb38fb9b96", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20288a0c89906ec21b90a3008a5bc98df1e69375/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20288a0c89906ec21b90a3008a5bc98df1e69375/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=20288a0c89906ec21b90a3008a5bc98df1e69375", "patch": "@@ -26903,14 +26903,40 @@\n    (set_attr \"btver2_decode\" \"vector\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"<mask_codefor>avx512f_vcvtps2ph512<mask_name>\"\n+;; vcvtps2ph is special, it encodes {sae} in evex, but round control in the imm\n+;; For intrinsic _mm512_cvt_roundps_ph (a, imm), imm contains both {sae}\n+;; and round control, we need to separate it in the assembly output.\n+;; op2 in avx512f_vcvtps2ph512_mask_sae contains both sae and round control.\n+(define_expand \"avx512f_vcvtps2ph512_mask_sae\"\n+ [(set (match_operand:V16HI 0 \"register_operand\" \"=v\")\n+       (vec_merge:V16HI\n+\t (unspec:V16HI\n+\t   [(match_operand:V16SF 1 \"register_operand\" \"v\")\n+\t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n+\t   UNSPEC_VCVTPS2PH)\n+\t (match_operand:V16HI 3 \"nonimm_or_0_operand\")\n+\t (match_operand:HI 4 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  int round = INTVAL (operands[2]);\n+  /* Separate {sae} from rounding control imm,\n+     imm[3:7] will be ignored by the instruction.  */\n+  if (round & 8)\n+    {\n+      emit_insn (gen_avx512f_vcvtps2ph512_mask_round (operands[0], operands[1],\n+\t  operands[2], operands[3], operands[4], GEN_INT (8)));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"<mask_codefor>avx512f_vcvtps2ph512<mask_name><round_saeonly_name>\"\n   [(set (match_operand:V16HI 0 \"register_operand\" \"=v\")\n \t(unspec:V16HI\n \t  [(match_operand:V16SF 1 \"register_operand\" \"v\")\n \t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t  UNSPEC_VCVTPS2PH))]\n   \"TARGET_AVX512F\"\n-  \"vcvtps2ph\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  \"vcvtps2ph\\t{%2, <round_saeonly_mask_op3>%1, %0<mask_operand3>|%0<mask_operand3>, %1<round_saeonly_mask_op3>, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V16SF\")])"}, {"sha": "e0714d437d07f71e75a65cd05f67d65907852bf8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2ph-sae.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20288a0c89906ec21b90a3008a5bc98df1e69375/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-sae.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20288a0c89906ec21b90a3008a5bc98df1e69375/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-sae.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-sae.c?ref=20288a0c89906ec21b90a3008a5bc98df1e69375", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtps2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __m256i y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm512_cvtps_ph (x, 8);\n+  y = _mm512_maskz_cvtps_ph (4, x, 9);\n+  y = _mm512_mask_cvtps_ph (y, 2, x, 10);\n+}"}]}