{"sha": "0c092147be441279c0652a2131a75c3ffe55112c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMwOTIxNDdiZTQ0MTI3OWMwNjUyYTIxMzFhNzVjM2ZmZTU1MTEyYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-04-26T19:52:31Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-04-26T19:52:31Z"}, "message": "re PR libstdc++/26875 (Array allocator use count is shared between array_allocator instances)\n\n2006-04-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/26875\n\t* include/ext/array_allocator.h (array_allocator): _M_used, new\n\tdata member.  \n\t* testsuite/ext/array_allocator/26875.cc: New.\n\nFrom-SVN: r113283", "tree": {"sha": "3eb6e5d9da4dbe26d2f53a0a9d61133e11a0a16e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eb6e5d9da4dbe26d2f53a0a9d61133e11a0a16e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c092147be441279c0652a2131a75c3ffe55112c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c092147be441279c0652a2131a75c3ffe55112c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c092147be441279c0652a2131a75c3ffe55112c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c092147be441279c0652a2131a75c3ffe55112c/comments", "author": null, "committer": null, "parents": [{"sha": "0c3f35451c3fe2072fb918c1387167d996dfd1fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3f35451c3fe2072fb918c1387167d996dfd1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3f35451c3fe2072fb918c1387167d996dfd1fe"}], "stats": {"total": 109, "additions": 81, "deletions": 28}, "files": [{"sha": "5f26d32ad831d28d02d3c24cbd50226a4581385c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c092147be441279c0652a2131a75c3ffe55112c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c092147be441279c0652a2131a75c3ffe55112c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0c092147be441279c0652a2131a75c3ffe55112c", "patch": "@@ -1,3 +1,10 @@\n+2006-04-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/26875\n+\t* include/ext/array_allocator.h (array_allocator): _M_used, new\n+\tdata member.  \n+\t* testsuite/ext/array_allocator/26875.cc: New.\n+\t\n 2006-04-26  Shantonu Sen  <ssen@opendarwin.org>\n \n          PR libstdc++/26513"}, {"sha": "08661864c2a5071011557de261994d8a4fef07c1", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c092147be441279c0652a2131a75c3ffe55112c/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c092147be441279c0652a2131a75c3ffe55112c/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=0c092147be441279c0652a2131a75c3ffe55112c", "patch": "@@ -1,6 +1,6 @@\n // array allocator -*- C++ -*-\n \n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,13 +49,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     class array_allocator_base\n     {\n     public:\n-      typedef size_t     size_type;\n-      typedef ptrdiff_t  difference_type;\n-      typedef _Tp*       pointer;\n-      typedef const _Tp* const_pointer;\n-      typedef _Tp&       reference;\n-      typedef const _Tp& const_reference;\n-      typedef _Tp        value_type;\n+      typedef size_t     \tsize_type;\n+      typedef ptrdiff_t  \tdifference_type;\n+      typedef _Tp*       \tpointer;\n+      typedef const _Tp* \tconst_pointer;\n+      typedef _Tp&       \treference;\n+      typedef const _Tp&\tconst_reference;\n+      typedef _Tp        \tvalue_type;\n \n       pointer\n       address(reference __x) const { return &__x; }\n@@ -91,43 +91,43 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     class array_allocator : public array_allocator_base<_Tp>\n     {\n     public:\n-      typedef size_t     size_type;\n-      typedef ptrdiff_t  difference_type;\n-      typedef _Tp*       pointer;\n-      typedef const _Tp* const_pointer;\n-      typedef _Tp&       reference;\n-      typedef const _Tp& const_reference;\n-      typedef _Tp        value_type;\n-\n-      typedef _Array\tarray_type;\n-\n-      array_type* _M_array;\n-      \n+      typedef size_t     \tsize_type;\n+      typedef ptrdiff_t  \tdifference_type;\n+      typedef _Tp*       \tpointer;\n+      typedef const _Tp* \tconst_pointer;\n+      typedef _Tp&       \treference;\n+      typedef const _Tp& \tconst_reference;\n+      typedef _Tp        \tvalue_type;\n+      typedef _Array\t\tarray_type;\n+\n+    private:\n+      array_type* \t_M_array;\n+      size_type \t_M_used;\n+\n+    public:\n      template<typename _Tp1, typename _Array1 = _Array>\n         struct rebind\n         { typedef array_allocator<_Tp1, _Array1> other; };\n \n       array_allocator(array_type* __array = NULL) throw() \n-      : _M_array(__array) \n-      { }\n+      : _M_array(__array), _M_used(size_type()) { }\n \n       array_allocator(const array_allocator& __o)  throw() \n-      : _M_array(__o._M_array) { }\n+      : _M_array(__o._M_array), _M_used(__o._M_used) { }\n \n       template<typename _Tp1, typename _Array1>\n         array_allocator(const array_allocator<_Tp1, _Array1>&) throw()\n-\t: _M_array(NULL) { }\n+\t: _M_array(NULL), _M_used(size_type()) { }\n \n       ~array_allocator() throw() { }\n \n       pointer\n       allocate(size_type __n, const void* = 0)\n       {\n-\tstatic size_type __array_used;\n-\tif (_M_array == 0 || __array_used + __n > _M_array->size())\n+\tif (_M_array == 0 || _M_used + __n > _M_array->size())\n \t  std::__throw_bad_alloc();\n-\tpointer __ret = _M_array->begin() + __array_used;\n-\t__array_used += __n;\n+\tpointer __ret = _M_array->begin() + _M_used;\n+\t_M_used += __n;\n \treturn __ret;\n       }\n     };"}, {"sha": "c6418666630da41efc72b7ba090b5a11829e1601", "filename": "libstdc++-v3/testsuite/ext/array_allocator/26875.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c092147be441279c0652a2131a75c3ffe55112c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F26875.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c092147be441279c0652a2131a75c3ffe55112c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F26875.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F26875.cc?ref=0c092147be441279c0652a2131a75c3ffe55112c", "patch": "@@ -0,0 +1,46 @@\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/array_allocator.h>\n+\n+// libstdc++/26875\n+int main()\n+{\n+  typedef std::tr1::array<int, 1> array_type;\n+  array_type Array1;\n+  array_type Array2;\n+\n+  typedef __gnu_cxx::array_allocator<int> allocator_type;\n+  allocator_type Allocator1(&Array1);\n+  allocator_type Allocator2(&Array2);\n+\n+  try\n+    {\n+      Allocator1.allocate(1);\n+      Allocator2.allocate(1);\n+    }\n+  catch (std::bad_alloc& ex)\n+    {\n+      // fail, rethrow\n+      throw;\n+    }\n+    \n+  return 0;\n+}\n+"}]}