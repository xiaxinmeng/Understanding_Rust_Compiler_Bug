{"sha": "231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxYjJmY2NmNWI5ZGRjNzIzZThjNmU0Nzc1OGUzZGM0NGQzMjQyNw==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-02-07T22:16:13Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-02-07T22:16:13Z"}, "message": "gfortran.h (gfc_add_dimension, [...]): Add argument.\n\n* gfortran.h (gfc_add_dimension, gfc_add_result, gfc_add_save,\ngfc_add_dummy, gfc_add_generic, gfc_add_in_common, gfc_add_data,\ngfc_add_in_namelist, gfc_add_sequence, gfc_add_function,\ngfc_add_subroutine, gfc_add_access, gfc_add_flavor, gfc_add_entry,\ngfc_add_procedure): Add argument.\n* array.c (gfc_set_array_spec), decl.c (var_element, get_proc_name,\ngfc_match_null, match_type_spec, match_attr_spec,\ngfc_match_formal_arglist, match_result, gfc_match_function_decl):\nUpdate callers to match.\n(gfc_match_entry) : Likewise, fix comment typo.\n(gfc_match_subroutine, attr_decl1, gfc_add_dimension,\naccess_attr_decl, do_parm, gfc_match_save, gfc_match_modproc,\ngfc_match_derived_decl): Update callers.\n* interface.c (gfc_match_interface): Likewise.\n* match.c (gfc_match_label, gfc_add_flavor,\ngfc_match_call, gfc_match_common, gfc_match_block_data,\ngfc_match_namelist, gfc_match_module, gfc_match_st_function):\nLikewise.\n* parse.c (parse_derived, parse_interface, parse_contained),\nprimary.c (gfc_match_rvalue, gfc_match_variable): Likewise.\n* resolve.c (resolve_formal_arglist, resolve_entries): Update callers.\n* symbol.c (check_conflict, check_used): Add new 'name' argument,\nuse when printing error message.\n(gfc_add_dimension, gfc_add_result, gfc_add_save, gfc_add_dummy,\ngfc_add_generic, gfc_add_in_common, gfc_add_data,\ngfc_add_in_namelist, gfc_add_sequence, gfc_add_function,\ngfc_add_subroutine, gfc_add_access, gfc_add_flavor, gfc_add_entry,\ngfc_add_procedure): Add new 'name' argument.  Pass along to\ncheck_conflict and check_used.\n(gfc_add_allocatable, gfc_add_external, gfc_add_intrinsic,\ngfc_add_optional, gfc_add_pointer, gfc_add_target, gfc_add_elemental,\ngfc_add_pure, gfc_add_recursive, gfc_add_intent,\ngfc_add_explicit_interface, gfc_copy_attr): Pass NULL for new\nargument in calls to any of the modified functions.\n\nFrom-SVN: r94718", "tree": {"sha": "e57f670abf097dfcf0ab3eda1878922121626708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e57f670abf097dfcf0ab3eda1878922121626708"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55db9c2fc24eff6cdbaa621851a4382f6dea939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f55db9c2fc24eff6cdbaa621851a4382f6dea939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f55db9c2fc24eff6cdbaa621851a4382f6dea939"}], "stats": {"total": 397, "additions": 233, "deletions": 164}, "files": [{"sha": "25bc317881e31555d8cd557d431d309efbb6422d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "patch": "@@ -1,3 +1,40 @@\n+2005-02-07  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.h (gfc_add_dimension, gfc_add_result, gfc_add_save,\n+\tgfc_add_dummy, gfc_add_generic, gfc_add_in_common, gfc_add_data,\n+\tgfc_add_in_namelist, gfc_add_sequence, gfc_add_function,\n+\tgfc_add_subroutine, gfc_add_access, gfc_add_flavor, gfc_add_entry,\n+\tgfc_add_procedure): Add argument.\n+\t* array.c (gfc_set_array_spec), decl.c (var_element, get_proc_name,\n+\tgfc_match_null, match_type_spec, match_attr_spec,\n+\tgfc_match_formal_arglist, match_result, gfc_match_function_decl):\n+\tUpdate callers to match.\n+\t(gfc_match_entry) : Likewise, fix comment typo.\n+\t(gfc_match_subroutine, attr_decl1, gfc_add_dimension,\n+\taccess_attr_decl, do_parm, gfc_match_save, gfc_match_modproc,\n+\tgfc_match_derived_decl): Update callers.\n+\t* interface.c (gfc_match_interface): Likewise.\n+\t* match.c (gfc_match_label, gfc_add_flavor,\n+\tgfc_match_call, gfc_match_common, gfc_match_block_data,\n+\tgfc_match_namelist, gfc_match_module, gfc_match_st_function):\n+\tLikewise.\n+\t* parse.c (parse_derived, parse_interface, parse_contained),\n+\tprimary.c (gfc_match_rvalue, gfc_match_variable): Likewise.\n+\t* resolve.c (resolve_formal_arglist, resolve_entries): Update callers.\n+\t* symbol.c (check_conflict, check_used): Add new 'name' argument,\n+\tuse when printing error message.\n+\t(gfc_add_dimension, gfc_add_result, gfc_add_save, gfc_add_dummy,\n+\tgfc_add_generic, gfc_add_in_common, gfc_add_data,\n+\tgfc_add_in_namelist, gfc_add_sequence, gfc_add_function,\n+\tgfc_add_subroutine, gfc_add_access, gfc_add_flavor, gfc_add_entry,\n+\tgfc_add_procedure): Add new 'name' argument.  Pass along to\n+\tcheck_conflict and check_used.\n+\t(gfc_add_allocatable, gfc_add_external, gfc_add_intrinsic,\n+\tgfc_add_optional, gfc_add_pointer, gfc_add_target, gfc_add_elemental,\n+\tgfc_add_pure, gfc_add_recursive, gfc_add_intent,\n+\tgfc_add_explicit_interface, gfc_copy_attr): Pass NULL for new\n+\targument in calls to any of the modified functions.\n+\n 2005-02-06  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gfortran.texi: Don't give last update date."}, {"sha": "4f4f19b100b5ed0a90c02b0f96ca5196285faee0", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "patch": "@@ -457,7 +457,7 @@ gfc_set_array_spec (gfc_symbol * sym, gfc_array_spec * as, locus * error_loc)\n   if (as == NULL)\n     return SUCCESS;\n \n-  if (gfc_add_dimension (&sym->attr, error_loc) == FAILURE)\n+  if (gfc_add_dimension (&sym->attr, sym->name, error_loc) == FAILURE)\n     return FAILURE;\n \n   sym->as = as;"}, {"sha": "9ad5ef179737af4ba8ef200db6ffd447c8a82c8a", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "patch": "@@ -198,7 +198,7 @@ var_element (gfc_data_variable * new)\n \t}\n #endif\n \n-  if (gfc_add_data (&sym->attr, &new->expr->where) == FAILURE)\n+  if (gfc_add_data (&sym->attr, sym->name, &new->expr->where) == FAILURE)\n     return MATCH_ERROR;\n \n   return MATCH_YES;\n@@ -598,7 +598,8 @@ get_proc_name (const char *name, gfc_symbol ** result)\n   if (sym->ns->proc_name != NULL\n       && sym->ns->proc_name->attr.flavor == FL_MODULE\n       && sym->attr.proc != PROC_MODULE\n-      && gfc_add_procedure (&sym->attr, PROC_MODULE, NULL) == FAILURE)\n+      && gfc_add_procedure (&sym->attr, PROC_MODULE,\n+\t\t\t    sym->name, NULL) == FAILURE)\n     rc = 2;\n \n   return rc;\n@@ -818,8 +819,9 @@ gfc_match_null (gfc_expr ** result)\n   gfc_intrinsic_symbol (sym);\n \n   if (sym->attr.proc != PROC_INTRINSIC\n-      && (gfc_add_procedure (&sym->attr, PROC_INTRINSIC, NULL) == FAILURE\n-\t  || gfc_add_function (&sym->attr, NULL) == FAILURE))\n+      && (gfc_add_procedure (&sym->attr, PROC_INTRINSIC,\n+\t\t\t     sym->name, NULL) == FAILURE\n+\t  || gfc_add_function (&sym->attr, sym->name, NULL) == FAILURE))\n     return MATCH_ERROR;\n \n   e = gfc_get_expr ();\n@@ -1369,7 +1371,7 @@ match_type_spec (gfc_typespec * ts, int implicit_flag)\n     }\n \n   if (sym->attr.flavor != FL_DERIVED\n-      && gfc_add_flavor (&sym->attr, FL_DERIVED, NULL) == FAILURE)\n+      && gfc_add_flavor (&sym->attr, FL_DERIVED, sym->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   ts->type = BT_DERIVED;\n@@ -1801,7 +1803,7 @@ match_attr_spec (void)\n \t  break;\n \n \tcase DECL_DIMENSION:\n-\t  t = gfc_add_dimension (&current_attr, &seen_at[d]);\n+\t  t = gfc_add_dimension (&current_attr, NULL, &seen_at[d]);\n \t  break;\n \n \tcase DECL_EXTERNAL:\n@@ -1829,23 +1831,25 @@ match_attr_spec (void)\n \t  break;\n \n \tcase DECL_PARAMETER:\n-\t  t = gfc_add_flavor (&current_attr, FL_PARAMETER, &seen_at[d]);\n+\t  t = gfc_add_flavor (&current_attr, FL_PARAMETER, NULL, &seen_at[d]);\n \t  break;\n \n \tcase DECL_POINTER:\n \t  t = gfc_add_pointer (&current_attr, &seen_at[d]);\n \t  break;\n \n \tcase DECL_PRIVATE:\n-\t  t = gfc_add_access (&current_attr, ACCESS_PRIVATE, &seen_at[d]);\n+\t  t = gfc_add_access (&current_attr, ACCESS_PRIVATE, NULL,\n+\t\t\t      &seen_at[d]);\n \t  break;\n \n \tcase DECL_PUBLIC:\n-\t  t = gfc_add_access (&current_attr, ACCESS_PUBLIC, &seen_at[d]);\n+\t  t = gfc_add_access (&current_attr, ACCESS_PUBLIC, NULL,\n+\t\t\t      &seen_at[d]);\n \t  break;\n \n \tcase DECL_SAVE:\n-\t  t = gfc_add_save (&current_attr, &seen_at[d]);\n+\t  t = gfc_add_save (&current_attr, NULL, &seen_at[d]);\n \t  break;\n \n \tcase DECL_TARGET:\n@@ -2080,7 +2084,7 @@ gfc_match_formal_arglist (gfc_symbol * progname, int st_flag, int null_flag)\n          dummy procedure.  We don't apply these attributes to formal\n          arguments of statement functions.  */\n       if (sym != NULL && !st_flag\n-\t  && (gfc_add_dummy (&sym->attr, NULL) == FAILURE\n+\t  && (gfc_add_dummy (&sym->attr, sym->name, NULL) == FAILURE\n \t      || gfc_missing_attr (&sym->attr, NULL) == FAILURE))\n \t{\n \t  m = MATCH_ERROR;\n@@ -2180,8 +2184,8 @@ match_result (gfc_symbol * function, gfc_symbol ** result)\n   if (gfc_get_symbol (name, NULL, &r))\n     return MATCH_ERROR;\n \n-  if (gfc_add_flavor (&r->attr, FL_VARIABLE, NULL) == FAILURE\n-      || gfc_add_result (&r->attr, NULL) == FAILURE)\n+  if (gfc_add_flavor (&r->attr, FL_VARIABLE, r->name, NULL) == FAILURE\n+      || gfc_add_result (&r->attr, r->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   *result = r;\n@@ -2251,7 +2255,7 @@ gfc_match_function_decl (void)\n   /* Make changes to the symbol.  */\n   m = MATCH_ERROR;\n \n-  if (gfc_add_function (&sym->attr, NULL) == FAILURE)\n+  if (gfc_add_function (&sym->attr, sym->name, NULL) == FAILURE)\n     goto cleanup;\n \n   if (gfc_missing_attr (&sym->attr, NULL) == FAILURE\n@@ -2326,13 +2330,13 @@ gfc_match_entry (void)\n \n   if (state == COMP_SUBROUTINE)\n     {\n-      /* And entry in a subroutine.  */\n+      /* An entry in a subroutine.  */\n       m = gfc_match_formal_arglist (entry, 0, 1);\n       if (m != MATCH_YES)\n \treturn MATCH_ERROR;\n \n-      if (gfc_add_entry (&entry->attr, NULL) == FAILURE\n-\t  || gfc_add_subroutine (&entry->attr, NULL) == FAILURE)\n+      if (gfc_add_entry (&entry->attr, entry->name, NULL) == FAILURE\n+\t  || gfc_add_subroutine (&entry->attr, entry->name, NULL) == FAILURE)\n \treturn MATCH_ERROR;\n     }\n   else\n@@ -2346,8 +2350,8 @@ gfc_match_entry (void)\n \n       if (gfc_match_eos () == MATCH_YES)\n \t{\n-\t  if (gfc_add_entry (&entry->attr, NULL) == FAILURE\n-\t      || gfc_add_function (&entry->attr, NULL) == FAILURE)\n+\t  if (gfc_add_entry (&entry->attr, entry->name, NULL) == FAILURE\n+\t      || gfc_add_function (&entry->attr, entry->name, NULL) == FAILURE)\n \t    return MATCH_ERROR;\n \n \t  entry->result = proc->result;\n@@ -2361,9 +2365,10 @@ gfc_match_entry (void)\n \t  if (m != MATCH_YES)\n \t    return MATCH_ERROR;\n \n-\t  if (gfc_add_result (&result->attr, NULL) == FAILURE\n-\t      || gfc_add_entry (&entry->attr, NULL) == FAILURE\n-\t      || gfc_add_function (&entry->attr, NULL) == FAILURE)\n+\t  if (gfc_add_result (&result->attr, result->name, NULL) == FAILURE\n+\t      || gfc_add_entry (&entry->attr, result->name, NULL) == FAILURE\n+\t      || gfc_add_function (&entry->attr, result->name,\n+\t\t\t\t   NULL) == FAILURE)\n \t    return MATCH_ERROR;\n \t}\n \n@@ -2426,7 +2431,7 @@ gfc_match_subroutine (void)\n     return MATCH_ERROR;\n   gfc_new_block = sym;\n \n-  if (gfc_add_subroutine (&sym->attr, NULL) == FAILURE)\n+  if (gfc_add_subroutine (&sym->attr, sym->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   if (gfc_match_formal_arglist (sym, 0, 1) != MATCH_YES)\n@@ -2713,7 +2718,7 @@ attr_decl1 (void)\n \n   if ((current_attr.external || current_attr.intrinsic)\n       && sym->attr.flavor != FL_PROCEDURE\n-      && gfc_add_flavor (&sym->attr, FL_PROCEDURE, NULL) == FAILURE)\n+      && gfc_add_flavor (&sym->attr, FL_PROCEDURE, sym->name, NULL) == FAILURE)\n     {\n       m = MATCH_ERROR;\n       goto cleanup;\n@@ -2840,7 +2845,7 @@ gfc_match_dimension (void)\n {\n \n   gfc_clear_attr (&current_attr);\n-  gfc_add_dimension (&current_attr, NULL);\n+  gfc_add_dimension (&current_attr, NULL, NULL);\n \n   return attr_decl ();\n }\n@@ -2893,7 +2898,7 @@ access_attr_decl (gfc_statement st)\n \t  if (gfc_add_access (&sym->attr,\n \t\t\t      (st ==\n \t\t\t       ST_PUBLIC) ? ACCESS_PUBLIC : ACCESS_PRIVATE,\n-\t\t\t      NULL) == FAILURE)\n+\t\t\t      sym->name, NULL) == FAILURE)\n \t    return MATCH_ERROR;\n \n \t  break;\n@@ -3036,7 +3041,7 @@ do_parm (void)\n     }\n \n   if (gfc_check_assign_symbol (sym, init) == FAILURE\n-      || gfc_add_flavor (&sym->attr, FL_PARAMETER, NULL) == FAILURE)\n+      || gfc_add_flavor (&sym->attr, FL_PARAMETER, sym->name, NULL) == FAILURE)\n     {\n       m = MATCH_ERROR;\n       goto cleanup;\n@@ -3120,7 +3125,8 @@ gfc_match_save (void)\n       switch (m)\n \t{\n \tcase MATCH_YES:\n-\t  if (gfc_add_save (&sym->attr, &gfc_current_locus) == FAILURE)\n+\t  if (gfc_add_save (&sym->attr, sym->name,\n+\t\t\t    &gfc_current_locus) == FAILURE)\n \t    return MATCH_ERROR;\n \t  goto next_item;\n \n@@ -3189,7 +3195,8 @@ gfc_match_modproc (void)\n \treturn MATCH_ERROR;\n \n       if (sym->attr.proc != PROC_MODULE\n-\t  && gfc_add_procedure (&sym->attr, PROC_MODULE, NULL) == FAILURE)\n+\t  && gfc_add_procedure (&sym->attr, PROC_MODULE,\n+\t\t\t\tsym->name, NULL) == FAILURE)\n \treturn MATCH_ERROR;\n \n       if (gfc_add_interface (sym) == FAILURE)\n@@ -3236,7 +3243,7 @@ gfc_match_derived_decl (void)\n \t  return MATCH_ERROR;\n \t}\n \n-      if (gfc_add_access (&attr, ACCESS_PRIVATE, NULL) == FAILURE)\n+      if (gfc_add_access (&attr, ACCESS_PRIVATE, NULL, NULL) == FAILURE)\n \treturn MATCH_ERROR;\n       goto loop;\n     }\n@@ -3249,7 +3256,7 @@ gfc_match_derived_decl (void)\n \t  return MATCH_ERROR;\n \t}\n \n-      if (gfc_add_access (&attr, ACCESS_PUBLIC, NULL) == FAILURE)\n+      if (gfc_add_access (&attr, ACCESS_PUBLIC, NULL, NULL) == FAILURE)\n \treturn MATCH_ERROR;\n       goto loop;\n     }\n@@ -3294,7 +3301,7 @@ gfc_match_derived_decl (void)\n      derived type that is a pointer.  The first part of the AND clause\n      is true if a the symbol is not the return value of a function.  */\n   if (sym->attr.flavor != FL_DERIVED\n-      && gfc_add_flavor (&sym->attr, FL_DERIVED, NULL) == FAILURE)\n+      && gfc_add_flavor (&sym->attr, FL_DERIVED, sym->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   if (sym->components != NULL)\n@@ -3306,7 +3313,7 @@ gfc_match_derived_decl (void)\n     }\n \n   if (attr.access != ACCESS_UNKNOWN\n-      && gfc_add_access (&sym->attr, attr.access, NULL) == FAILURE)\n+      && gfc_add_access (&sym->attr, attr.access, sym->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   gfc_new_block = sym;"}, {"sha": "9df2f376ed30373c18b7b798bbe5a8e1a7472385", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "patch": "@@ -1573,32 +1573,33 @@ void gfc_get_component_attr (symbol_attribute *, gfc_component *);\n void gfc_set_sym_referenced (gfc_symbol * sym);\n \n try gfc_add_allocatable (symbol_attribute *, locus *);\n-try gfc_add_dimension (symbol_attribute *, locus *);\n+try gfc_add_dimension (symbol_attribute *, const char *, locus *);\n try gfc_add_external (symbol_attribute *, locus *);\n try gfc_add_intrinsic (symbol_attribute *, locus *);\n try gfc_add_optional (symbol_attribute *, locus *);\n try gfc_add_pointer (symbol_attribute *, locus *);\n-try gfc_add_result (symbol_attribute *, locus *);\n-try gfc_add_save (symbol_attribute *, locus *);\n+try gfc_add_result (symbol_attribute *, const char *, locus *);\n+try gfc_add_save (symbol_attribute *, const char *, locus *);\n try gfc_add_saved_common (symbol_attribute *, locus *);\n try gfc_add_target (symbol_attribute *, locus *);\n-try gfc_add_dummy (symbol_attribute *, locus *);\n-try gfc_add_generic (symbol_attribute *, locus *);\n+try gfc_add_dummy (symbol_attribute *, const char *, locus *);\n+try gfc_add_generic (symbol_attribute *, const char *, locus *);\n try gfc_add_common (symbol_attribute *, locus *);\n-try gfc_add_in_common (symbol_attribute *, locus *);\n-try gfc_add_data (symbol_attribute *, locus *);\n-try gfc_add_in_namelist (symbol_attribute *, locus *);\n-try gfc_add_sequence (symbol_attribute *, locus *);\n+try gfc_add_in_common (symbol_attribute *, const char *, locus *);\n+try gfc_add_data (symbol_attribute *, const char *, locus *);\n+try gfc_add_in_namelist (symbol_attribute *, const char *, locus *);\n+try gfc_add_sequence (symbol_attribute *, const char *, locus *);\n try gfc_add_elemental (symbol_attribute *, locus *);\n try gfc_add_pure (symbol_attribute *, locus *);\n try gfc_add_recursive (symbol_attribute *, locus *);\n-try gfc_add_function (symbol_attribute *, locus *);\n-try gfc_add_subroutine (symbol_attribute *, locus *);\n-\n-try gfc_add_access (symbol_attribute *, gfc_access, locus *);\n-try gfc_add_flavor (symbol_attribute *, sym_flavor, locus *);\n-try gfc_add_entry (symbol_attribute *, locus *);\n-try gfc_add_procedure (symbol_attribute *, procedure_type, locus *);\n+try gfc_add_function (symbol_attribute *, const char *, locus *);\n+try gfc_add_subroutine (symbol_attribute *, const char *, locus *);\n+\n+try gfc_add_access (symbol_attribute *, gfc_access, const char *, locus *);\n+try gfc_add_flavor (symbol_attribute *, sym_flavor, const char *, locus *);\n+try gfc_add_entry (symbol_attribute *, const char *, locus *);\n+try gfc_add_procedure (symbol_attribute *, procedure_type,\n+\t\t       const char *, locus *);\n try gfc_add_intent (symbol_attribute *, sym_intent, locus *);\n try gfc_add_explicit_interface (gfc_symbol *, ifsrc,\n \t\t\t\tgfc_formal_arglist *, locus *);"}, {"sha": "71555e48cbe30e06d2e1ede43e63768a852b45ae", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "patch": "@@ -213,7 +213,8 @@ gfc_match_interface (void)\n       if (gfc_get_symbol (name, NULL, &sym))\n \treturn MATCH_ERROR;\n \n-      if (!sym->attr.generic && gfc_add_generic (&sym->attr, NULL) == FAILURE)\n+      if (!sym->attr.generic \n+\t  && gfc_add_generic (&sym->attr, sym->name, NULL) == FAILURE)\n \treturn MATCH_ERROR;\n \n       current_interface.sym = gfc_new_block = sym;"}, {"sha": "2a36447853030bec4f1afeae2be9de0418e61486", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "patch": "@@ -266,7 +266,8 @@ gfc_match_label (void)\n     }\n \n   if (gfc_new_block->attr.flavor != FL_LABEL\n-      && gfc_add_flavor (&gfc_new_block->attr, FL_LABEL, NULL) == FAILURE)\n+      && gfc_add_flavor (&gfc_new_block->attr, FL_LABEL,\n+\t\t\t gfc_new_block->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   for (p = gfc_state_stack; p; p = p->previous)\n@@ -806,7 +807,7 @@ gfc_match_program (void)\n   if (m == MATCH_ERROR)\n     return m;\n \n-  if (gfc_add_flavor (&sym->attr, FL_PROGRAM, NULL) == FAILURE)\n+  if (gfc_add_flavor (&sym->attr, FL_PROGRAM, sym->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   gfc_new_block = sym;\n@@ -2013,7 +2014,7 @@ gfc_match_call (void)\n \n   if (!sym->attr.generic\n       && !sym->attr.subroutine\n-      && gfc_add_subroutine (&sym->attr, NULL) == FAILURE)\n+      && gfc_add_subroutine (&sym->attr, sym->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   if (gfc_match_eos () != MATCH_YES)\n@@ -2237,7 +2238,7 @@ gfc_match_common (void)\n \t      goto cleanup;\n \t    }\n \n-\t  if (gfc_add_in_common (&sym->attr, NULL) == FAILURE) \n+\t  if (gfc_add_in_common (&sym->attr, sym->name, NULL) == FAILURE) \n \t    goto cleanup;\n \n \t  if (sym->value != NULL\n@@ -2252,7 +2253,7 @@ gfc_match_common (void)\n \t      goto cleanup;\n \t    }\n \n-\t  if (gfc_add_in_common (&sym->attr, NULL) == FAILURE)\n+\t  if (gfc_add_in_common (&sym->attr, sym->name, NULL) == FAILURE)\n \t    goto cleanup;\n \n \t  /* Derived type names must have the SEQUENCE attribute.  */\n@@ -2287,7 +2288,7 @@ gfc_match_common (void)\n \t\t  goto cleanup;\n \t\t}\n \n-\t      if (gfc_add_dimension (&sym->attr, NULL) == FAILURE)\n+\t      if (gfc_add_dimension (&sym->attr, sym->name, NULL) == FAILURE)\n \t\tgoto cleanup;\n \n \t      if (sym->attr.pointer)\n@@ -2353,7 +2354,7 @@ gfc_match_block_data (void)\n   if (gfc_get_symbol (name, NULL, &sym))\n     return MATCH_ERROR;\n \n-  if (gfc_add_flavor (&sym->attr, FL_BLOCK_DATA, NULL) == FAILURE)\n+  if (gfc_add_flavor (&sym->attr, FL_BLOCK_DATA, sym->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   gfc_new_block = sym;\n@@ -2403,7 +2404,8 @@ gfc_match_namelist (void)\n \t}\n \n       if (group_name->attr.flavor != FL_NAMELIST\n-\t  && gfc_add_flavor (&group_name->attr, FL_NAMELIST, NULL) == FAILURE)\n+\t  && gfc_add_flavor (&group_name->attr, FL_NAMELIST,\n+\t\t\t     group_name->name, NULL) == FAILURE)\n \treturn MATCH_ERROR;\n \n       for (;;)\n@@ -2415,7 +2417,7 @@ gfc_match_namelist (void)\n \t    goto error;\n \n \t  if (sym->attr.in_namelist == 0\n-\t      && gfc_add_in_namelist (&sym->attr, NULL) == FAILURE)\n+\t      && gfc_add_in_namelist (&sym->attr, sym->name, NULL) == FAILURE)\n \t    goto error;\n \n \t  nl = gfc_get_namelist ();\n@@ -2471,7 +2473,8 @@ gfc_match_module (void)\n   if (m != MATCH_YES)\n     return m;\n \n-  if (gfc_add_flavor (&gfc_new_block->attr, FL_MODULE, NULL) == FAILURE)\n+  if (gfc_add_flavor (&gfc_new_block->attr, FL_MODULE,\n+\t\t      gfc_new_block->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   return MATCH_YES;\n@@ -2587,7 +2590,8 @@ gfc_match_st_function (void)\n \n   gfc_push_error (&old_error);\n \n-  if (gfc_add_procedure (&sym->attr, PROC_ST_FUNCTION, NULL) == FAILURE)\n+  if (gfc_add_procedure (&sym->attr, PROC_ST_FUNCTION,\n+\t\t\t sym->name, NULL) == FAILURE)\n     goto undo_error;\n \n   if (gfc_match_formal_arglist (sym, 1, 0) != MATCH_YES)"}, {"sha": "dac40775d055de03551c21ce960d3f8e20d6908e", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "patch": "@@ -1349,7 +1349,8 @@ parse_derived (void)\n \t    }\n \n \t  seen_sequence = 1;\n-\t  gfc_add_sequence (&gfc_current_block ()->attr, NULL);\n+\t  gfc_add_sequence (&gfc_current_block ()->attr, \n+\t\t\t    gfc_current_block ()->name, NULL);\n \t  break;\n \n \tdefault:\n@@ -1451,9 +1452,9 @@ parse_interface (void)\n       if (current_state == COMP_NONE)\n \t{\n \t  if (new_state == COMP_FUNCTION)\n-\t    gfc_add_function (&sym->attr, NULL);\n-\t  if (new_state == COMP_SUBROUTINE)\n-\t    gfc_add_subroutine (&sym->attr, NULL);\n+\t    gfc_add_function (&sym->attr, sym->name, NULL);\n+\t  else if (new_state == COMP_SUBROUTINE)\n+\t    gfc_add_subroutine (&sym->attr, sym->name, NULL);\n \n \t  current_state = new_state;\n \t}\n@@ -2200,15 +2201,15 @@ parse_contained (int module)\n \t\t   gfc_new_block->name);\n \t      else\n \t\t{\n-\t\t  if (gfc_add_procedure (&sym->attr, PROC_INTERNAL,\n+\t\t  if (gfc_add_procedure (&sym->attr, PROC_INTERNAL, sym->name,\n \t\t\t\t\t &gfc_new_block->declared_at) ==\n \t\t      SUCCESS)\n \t\t    {\n \t\t      if (st == ST_FUNCTION)\n-\t\t\tgfc_add_function (&sym->attr,\n+\t\t\tgfc_add_function (&sym->attr, sym->name,\n \t\t\t\t\t  &gfc_new_block->declared_at);\n \t\t      else\n-\t\t\tgfc_add_subroutine (&sym->attr,\n+\t\t\tgfc_add_subroutine (&sym->attr, sym->name,\n \t\t\t\t\t    &gfc_new_block->declared_at);\n \t\t    }\n \t\t}"}, {"sha": "f122779b1364f8af3e0fbe7f7273db50f7270580", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "patch": "@@ -1877,7 +1877,7 @@ gfc_match_rvalue (gfc_expr ** result)\n \te->rank = sym->as->rank;\n \n       if (!sym->attr.function\n-\t  && gfc_add_function (&sym->attr, NULL) == FAILURE)\n+\t  && gfc_add_function (&sym->attr, sym->name, NULL) == FAILURE)\n \t{\n \t  m = MATCH_ERROR;\n \t  break;\n@@ -1905,7 +1905,8 @@ gfc_match_rvalue (gfc_expr ** result)\n \n       if (sym->attr.dimension)\n \t{\n-\t  if (gfc_add_flavor (&sym->attr, FL_VARIABLE, NULL) == FAILURE)\n+\t  if (gfc_add_flavor (&sym->attr, FL_VARIABLE,\n+\t\t\t      sym->name, NULL) == FAILURE)\n \t    {\n \t      m = MATCH_ERROR;\n \t      break;\n@@ -1930,7 +1931,8 @@ gfc_match_rvalue (gfc_expr ** result)\n \t  e->symtree = symtree;\n \t  e->expr_type = EXPR_VARIABLE;\n \n-\t  if (gfc_add_flavor (&sym->attr, FL_VARIABLE, NULL) == FAILURE)\n+\t  if (gfc_add_flavor (&sym->attr, FL_VARIABLE,\n+\t\t\t      sym->name, NULL) == FAILURE)\n \t    {\n \t      m = MATCH_ERROR;\n \t      break;\n@@ -1964,7 +1966,8 @@ gfc_match_rvalue (gfc_expr ** result)\n \t      e->expr_type = EXPR_VARIABLE;\n \n \t      if (sym->attr.flavor != FL_VARIABLE\n-\t\t  && gfc_add_flavor (&sym->attr, FL_VARIABLE, NULL) == FAILURE)\n+\t\t  && gfc_add_flavor (&sym->attr, FL_VARIABLE,\n+\t\t\t\t     sym->name, NULL) == FAILURE)\n \t\t{\n \t\t  m = MATCH_ERROR;\n \t\t  break;\n@@ -1990,7 +1993,7 @@ gfc_match_rvalue (gfc_expr ** result)\n       e->expr_type = EXPR_FUNCTION;\n \n       if (!sym->attr.function\n-\t  && gfc_add_function (&sym->attr, NULL) == FAILURE)\n+\t  && gfc_add_function (&sym->attr, sym->name, NULL) == FAILURE)\n \t{\n \t  m = MATCH_ERROR;\n \t  break;\n@@ -2072,7 +2075,8 @@ gfc_match_variable (gfc_expr ** result, int equiv_flag)\n       break;\n \n     case FL_UNKNOWN:\n-      if (gfc_add_flavor (&sym->attr, FL_VARIABLE, NULL) == FAILURE)\n+      if (gfc_add_flavor (&sym->attr, FL_VARIABLE,\n+\t\t\t  sym->name, NULL) == FAILURE)\n \treturn MATCH_ERROR;\n       break;\n "}, {"sha": "dd69a98340643674b56102742cfeea2f75d7b77b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "patch": "@@ -151,7 +151,7 @@ resolve_formal_arglist (gfc_symbol * proc)\n          A procedure specification would have already set the type.  */\n \n       if (sym->attr.flavor == FL_UNKNOWN)\n-\tgfc_add_flavor (&sym->attr, FL_VARIABLE, &sym->declared_at);\n+\tgfc_add_flavor (&sym->attr, FL_VARIABLE, sym->name, &sym->declared_at);\n \n       if (gfc_pure (proc))\n \t{\n@@ -364,12 +364,12 @@ resolve_entries (gfc_namespace * ns)\n   gfc_get_ha_symbol (name, &proc);\n   gcc_assert (proc != NULL);\n \n-  gfc_add_procedure (&proc->attr, PROC_INTERNAL, NULL);\n+  gfc_add_procedure (&proc->attr, PROC_INTERNAL, proc->name, NULL);\n   if (ns->proc_name->attr.subroutine)\n-    gfc_add_subroutine (&proc->attr, NULL);\n+    gfc_add_subroutine (&proc->attr, proc->name, NULL);\n   else\n     {\n-      gfc_add_function (&proc->attr, NULL);\n+      gfc_add_function (&proc->attr, proc->name, NULL);\n       gfc_internal_error (\"TODO: Functions with alternate entry points\");\n     }\n   proc->attr.access = ACCESS_PRIVATE;"}, {"sha": "b8b6d5e135bd78c25cd1562004b3a2a5bdd60ca5", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 99, "deletions": 85, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b2fccf5b9ddc723e8c6e47758e3dc44d32427/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=231b2fccf5b9ddc723e8c6e47758e3dc44d32427", "patch": "@@ -237,7 +237,7 @@ gfc_set_default_type (gfc_symbol * sym, int error_flag, gfc_namespace * ns)\n #define conf2(a) if (attr->a) { a2 = a; goto conflict; }\n \n static try\n-check_conflict (symbol_attribute * attr, locus * where)\n+check_conflict (symbol_attribute * attr, const char * name, locus * where)\n {\n   static const char *dummy = \"DUMMY\", *save = \"SAVE\", *pointer = \"POINTER\",\n     *target = \"TARGET\", *external = \"EXTERNAL\", *intent = \"INTENT\",\n@@ -426,7 +426,13 @@ check_conflict (symbol_attribute * attr, locus * where)\n   return SUCCESS;\n \n conflict:\n-  gfc_error (\"%s attribute conflicts with %s attribute at %L\", a1, a2, where);\n+  if (name == NULL)\n+    gfc_error (\"%s attribute conflicts with %s attribute at %L\",\n+\t       a1, a2, where);\n+  else\n+    gfc_error (\"%s attribute conflicts with %s attribute in '%s' at %L\",\n+\t       a1, a2, name, where);\n+\n   return FAILURE;\n }\n \n@@ -456,7 +462,7 @@ gfc_set_sym_referenced (gfc_symbol * sym)\n    nonzero if not.  */\n \n static int\n-check_used (symbol_attribute * attr, locus * where)\n+check_used (symbol_attribute * attr, const char * name, locus * where)\n {\n \n   if (attr->use_assoc == 0)\n@@ -465,8 +471,12 @@ check_used (symbol_attribute * attr, locus * where)\n   if (where == NULL)\n     where = &gfc_current_locus;\n \n-  gfc_error (\"Cannot change attributes of USE-associated symbol at %L\",\n-             where);\n+  if (name == NULL)\n+    gfc_error (\"Cannot change attributes of USE-associated symbol at %L\",\n+\t       where);\n+  else\n+    gfc_error (\"Cannot change attributes of USE-associated symbol %s at %L\",\n+\t       name, where);\n \n   return 1;\n }\n@@ -511,7 +521,7 @@ try\n gfc_add_allocatable (symbol_attribute * attr, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, NULL, where) || check_done (attr, where))\n     return FAILURE;\n \n   if (attr->allocatable)\n@@ -521,15 +531,15 @@ gfc_add_allocatable (symbol_attribute * attr, locus * where)\n     }\n \n   attr->allocatable = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, NULL, where);\n }\n \n \n try\n-gfc_add_dimension (symbol_attribute * attr, locus * where)\n+gfc_add_dimension (symbol_attribute * attr, const char *name, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, name, where) || check_done (attr, where))\n     return FAILURE;\n \n   if (attr->dimension)\n@@ -539,15 +549,15 @@ gfc_add_dimension (symbol_attribute * attr, locus * where)\n     }\n \n   attr->dimension = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n gfc_add_external (symbol_attribute * attr, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, NULL, where) || check_done (attr, where))\n     return FAILURE;\n \n   if (attr->external)\n@@ -558,15 +568,15 @@ gfc_add_external (symbol_attribute * attr, locus * where)\n \n   attr->external = 1;\n \n-  return check_conflict (attr, where);\n+  return check_conflict (attr, NULL, where);\n }\n \n \n try\n gfc_add_intrinsic (symbol_attribute * attr, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, NULL, where) || check_done (attr, where))\n     return FAILURE;\n \n   if (attr->intrinsic)\n@@ -577,15 +587,15 @@ gfc_add_intrinsic (symbol_attribute * attr, locus * where)\n \n   attr->intrinsic = 1;\n \n-  return check_conflict (attr, where);\n+  return check_conflict (attr, NULL, where);\n }\n \n \n try\n gfc_add_optional (symbol_attribute * attr, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, NULL, where) || check_done (attr, where))\n     return FAILURE;\n \n   if (attr->optional)\n@@ -595,39 +605,39 @@ gfc_add_optional (symbol_attribute * attr, locus * where)\n     }\n \n   attr->optional = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, NULL, where);\n }\n \n \n try\n gfc_add_pointer (symbol_attribute * attr, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, NULL, where) || check_done (attr, where))\n     return FAILURE;\n \n   attr->pointer = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, NULL, where);\n }\n \n \n try\n-gfc_add_result (symbol_attribute * attr, locus * where)\n+gfc_add_result (symbol_attribute * attr, const char *name, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, name, where) || check_done (attr, where))\n     return FAILURE;\n \n   attr->result = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n-gfc_add_save (symbol_attribute * attr, locus * where)\n+gfc_add_save (symbol_attribute * attr, const char *name, locus * where)\n {\n \n-  if (check_used (attr, where))\n+  if (check_used (attr, name, where))\n     return FAILURE;\n \n   if (gfc_pure (NULL))\n@@ -645,15 +655,15 @@ gfc_add_save (symbol_attribute * attr, locus * where)\n     }\n \n   attr->save = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n gfc_add_target (symbol_attribute * attr, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, NULL, where) || check_done (attr, where))\n     return FAILURE;\n \n   if (attr->target)\n@@ -663,116 +673,117 @@ gfc_add_target (symbol_attribute * attr, locus * where)\n     }\n \n   attr->target = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, NULL, where);\n }\n \n \n try\n-gfc_add_dummy (symbol_attribute * attr, locus * where)\n+gfc_add_dummy (symbol_attribute * attr, const char *name, locus * where)\n {\n \n-  if (check_used (attr, where))\n+  if (check_used (attr, name, where))\n     return FAILURE;\n \n   /* Duplicate dummy arguments are allow due to ENTRY statements.  */\n   attr->dummy = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n-gfc_add_in_common (symbol_attribute * attr, locus * where)\n+gfc_add_in_common (symbol_attribute * attr, const char *name, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, name, where) || check_done (attr, where))\n     return FAILURE;\n \n   /* Duplicate attribute already checked for.  */\n   attr->in_common = 1;\n-  if (check_conflict (attr, where) == FAILURE)\n+  if (check_conflict (attr, name, where) == FAILURE)\n     return FAILURE;\n \n   if (attr->flavor == FL_VARIABLE)\n     return SUCCESS;\n \n-  return gfc_add_flavor (attr, FL_VARIABLE, where);\n+  return gfc_add_flavor (attr, FL_VARIABLE, name, where);\n }\n \n \n try\n-gfc_add_data (symbol_attribute *attr, locus *where)\n+gfc_add_data (symbol_attribute *attr, const char *name, locus *where)\n {\n \n-  if (check_used (attr, where))\n+  if (check_used (attr, name, where))\n     return FAILURE;\n \n   attr->data = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n-gfc_add_in_namelist (symbol_attribute * attr, locus * where)\n+gfc_add_in_namelist (symbol_attribute * attr, const char *name,\n+\t\t     locus * where)\n {\n \n   attr->in_namelist = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n-gfc_add_sequence (symbol_attribute * attr, locus * where)\n+gfc_add_sequence (symbol_attribute * attr, const char *name, locus * where)\n {\n \n-  if (check_used (attr, where))\n+  if (check_used (attr, name, where))\n     return FAILURE;\n \n   attr->sequence = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n gfc_add_elemental (symbol_attribute * attr, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, NULL, where) || check_done (attr, where))\n     return FAILURE;\n \n   attr->elemental = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, NULL, where);\n }\n \n \n try\n gfc_add_pure (symbol_attribute * attr, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, NULL, where) || check_done (attr, where))\n     return FAILURE;\n \n   attr->pure = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, NULL, where);\n }\n \n \n try\n gfc_add_recursive (symbol_attribute * attr, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, NULL, where) || check_done (attr, where))\n     return FAILURE;\n \n   attr->recursive = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, NULL, where);\n }\n \n \n try\n-gfc_add_entry (symbol_attribute * attr, locus * where)\n+gfc_add_entry (symbol_attribute * attr, const char *name, locus * where)\n {\n \n-  if (check_used (attr, where))\n+  if (check_used (attr, name, where))\n     return FAILURE;\n \n   if (attr->entry)\n@@ -782,59 +793,60 @@ gfc_add_entry (symbol_attribute * attr, locus * where)\n     }\n \n   attr->entry = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n-gfc_add_function (symbol_attribute * attr, locus * where)\n+gfc_add_function (symbol_attribute * attr, const char *name, locus * where)\n {\n \n   if (attr->flavor != FL_PROCEDURE\n-      && gfc_add_flavor (attr, FL_PROCEDURE, where) == FAILURE)\n+      && gfc_add_flavor (attr, FL_PROCEDURE, name, where) == FAILURE)\n     return FAILURE;\n \n   attr->function = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n-gfc_add_subroutine (symbol_attribute * attr, locus * where)\n+gfc_add_subroutine (symbol_attribute * attr, const char *name, locus * where)\n {\n \n   if (attr->flavor != FL_PROCEDURE\n-      && gfc_add_flavor (attr, FL_PROCEDURE, where) == FAILURE)\n+      && gfc_add_flavor (attr, FL_PROCEDURE, name, where) == FAILURE)\n     return FAILURE;\n \n   attr->subroutine = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n-gfc_add_generic (symbol_attribute * attr, locus * where)\n+gfc_add_generic (symbol_attribute * attr, const char *name, locus * where)\n {\n \n   if (attr->flavor != FL_PROCEDURE\n-      && gfc_add_flavor (attr, FL_PROCEDURE, where) == FAILURE)\n+      && gfc_add_flavor (attr, FL_PROCEDURE, name, where) == FAILURE)\n     return FAILURE;\n \n   attr->generic = 1;\n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n /* Flavors are special because some flavors are not what fortran\n    considers attributes and can be reaffirmed multiple times.  */\n \n try\n-gfc_add_flavor (symbol_attribute * attr, sym_flavor f, locus * where)\n+gfc_add_flavor (symbol_attribute * attr, sym_flavor f, const char *name,\n+\t\tlocus * where)\n {\n \n   if ((f == FL_PROGRAM || f == FL_BLOCK_DATA || f == FL_MODULE\n        || f == FL_PARAMETER || f == FL_LABEL || f == FL_DERIVED\n-       || f == FL_NAMELIST) && check_used (attr, where))\n+       || f == FL_NAMELIST) && check_used (attr, name, where))\n     return FAILURE;\n \n   if (attr->flavor == f && f == FL_VARIABLE)\n@@ -854,19 +866,20 @@ gfc_add_flavor (symbol_attribute * attr, sym_flavor f, locus * where)\n \n   attr->flavor = f;\n \n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n-gfc_add_procedure (symbol_attribute * attr, procedure_type t, locus * where)\n+gfc_add_procedure (symbol_attribute * attr, procedure_type t,\n+\t\t   const char *name, locus * where)\n {\n \n-  if (check_used (attr, where) || check_done (attr, where))\n+  if (check_used (attr, name, where) || check_done (attr, where))\n     return FAILURE;\n \n   if (attr->flavor != FL_PROCEDURE\n-      && gfc_add_flavor (attr, FL_PROCEDURE, where) == FAILURE)\n+      && gfc_add_flavor (attr, FL_PROCEDURE, name, where) == FAILURE)\n     return FAILURE;\n \n   if (where == NULL)\n@@ -886,25 +899,25 @@ gfc_add_procedure (symbol_attribute * attr, procedure_type t, locus * where)\n \n   /* Statement functions are always scalar and functions.  */\n   if (t == PROC_ST_FUNCTION\n-      && ((!attr->function && gfc_add_function (attr, where) == FAILURE)\n+      && ((!attr->function && gfc_add_function (attr, name, where) == FAILURE)\n \t  || attr->dimension))\n     return FAILURE;\n \n-  return check_conflict (attr, where);\n+  return check_conflict (attr, name, where);\n }\n \n \n try\n gfc_add_intent (symbol_attribute * attr, sym_intent intent, locus * where)\n {\n \n-  if (check_used (attr, where))\n+  if (check_used (attr, NULL, where))\n     return FAILURE;\n \n   if (attr->intent == INTENT_UNKNOWN)\n     {\n       attr->intent = intent;\n-      return check_conflict (attr, where);\n+      return check_conflict (attr, NULL, where);\n     }\n \n   if (where == NULL)\n@@ -921,13 +934,14 @@ gfc_add_intent (symbol_attribute * attr, sym_intent intent, locus * where)\n /* No checks for use-association in public and private statements.  */\n \n try\n-gfc_add_access (symbol_attribute * attr, gfc_access access, locus * where)\n+gfc_add_access (symbol_attribute * attr, gfc_access access,\n+\t\tconst char *name, locus * where)\n {\n \n   if (attr->access == ACCESS_UNKNOWN)\n     {\n       attr->access = access;\n-      return check_conflict (attr, where);\n+      return check_conflict (attr, name, where);\n     }\n \n   if (where == NULL)\n@@ -943,7 +957,7 @@ gfc_add_explicit_interface (gfc_symbol * sym, ifsrc source,\n \t\t\t    gfc_formal_arglist * formal, locus * where)\n {\n \n-  if (check_used (&sym->attr, where))\n+  if (check_used (&sym->attr, sym->name, where))\n     return FAILURE;\n \n   if (where == NULL)\n@@ -1033,37 +1047,37 @@ gfc_copy_attr (symbol_attribute * dest, symbol_attribute * src, locus * where)\n   if (src->allocatable && gfc_add_allocatable (dest, where) == FAILURE)\n     goto fail;\n \n-  if (src->dimension && gfc_add_dimension (dest, where) == FAILURE)\n+  if (src->dimension && gfc_add_dimension (dest, NULL, where) == FAILURE)\n     goto fail;\n   if (src->optional && gfc_add_optional (dest, where) == FAILURE)\n     goto fail;\n   if (src->pointer && gfc_add_pointer (dest, where) == FAILURE)\n     goto fail;\n-  if (src->save && gfc_add_save (dest, where) == FAILURE)\n+  if (src->save && gfc_add_save (dest, NULL, where) == FAILURE)\n     goto fail;\n   if (src->target && gfc_add_target (dest, where) == FAILURE)\n     goto fail;\n-  if (src->dummy && gfc_add_dummy (dest, where) == FAILURE)\n+  if (src->dummy && gfc_add_dummy (dest, NULL, where) == FAILURE)\n     goto fail;\n-  if (src->result && gfc_add_result (dest, where) == FAILURE)\n+  if (src->result && gfc_add_result (dest, NULL, where) == FAILURE)\n     goto fail;\n   if (src->entry)\n     dest->entry = 1;\n \n-  if (src->in_namelist && gfc_add_in_namelist (dest, where) == FAILURE)\n+  if (src->in_namelist && gfc_add_in_namelist (dest, NULL, where) == FAILURE)\n     goto fail;\n \n-  if (src->in_common && gfc_add_in_common (dest, where) == FAILURE)\n+  if (src->in_common && gfc_add_in_common (dest, NULL, where) == FAILURE)\n     goto fail;\n \n-  if (src->generic && gfc_add_generic (dest, where) == FAILURE)\n+  if (src->generic && gfc_add_generic (dest, NULL, where) == FAILURE)\n     goto fail;\n-  if (src->function && gfc_add_function (dest, where) == FAILURE)\n+  if (src->function && gfc_add_function (dest, NULL, where) == FAILURE)\n     goto fail;\n-  if (src->subroutine && gfc_add_subroutine (dest, where) == FAILURE)\n+  if (src->subroutine && gfc_add_subroutine (dest, NULL, where) == FAILURE)\n     goto fail;\n \n-  if (src->sequence && gfc_add_sequence (dest, where) == FAILURE)\n+  if (src->sequence && gfc_add_sequence (dest, NULL, where) == FAILURE)\n     goto fail;\n   if (src->elemental && gfc_add_elemental (dest, where) == FAILURE)\n     goto fail;\n@@ -1073,15 +1087,15 @@ gfc_copy_attr (symbol_attribute * dest, symbol_attribute * src, locus * where)\n     goto fail;\n \n   if (src->flavor != FL_UNKNOWN\n-      && gfc_add_flavor (dest, src->flavor, where) == FAILURE)\n+      && gfc_add_flavor (dest, src->flavor, NULL, where) == FAILURE)\n     goto fail;\n \n   if (src->intent != INTENT_UNKNOWN\n       && gfc_add_intent (dest, src->intent, where) == FAILURE)\n     goto fail;\n \n   if (src->access != ACCESS_UNKNOWN\n-      && gfc_add_access (dest, src->access, where) == FAILURE)\n+      && gfc_add_access (dest, src->access, NULL, where) == FAILURE)\n     goto fail;\n \n   if (gfc_missing_attr (dest, where) == FAILURE)\n@@ -2326,7 +2340,7 @@ save_symbol (gfc_symbol * sym)\n       || sym->attr.flavor != FL_VARIABLE)\n     return;\n \n-  gfc_add_save (&sym->attr, &sym->declared_at);\n+  gfc_add_save (&sym->attr, sym->name, &sym->declared_at);\n }\n \n "}]}