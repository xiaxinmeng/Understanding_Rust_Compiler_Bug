{"sha": "f5f1838435400b837c8677c53a611e2dc6d56442", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVmMTgzODQzNTQwMGI4MzdjODY3N2M1M2E2MTFlMmRjNmQ1NjQ0Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-12T07:46:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-12T07:46:03Z"}, "message": "match.pd: Optimize (x & y) == x into (x & ~y) == 0 [PR94589]\n\n> Somewhere in RTL (_M_value&1)==_M_value is turned into (_M_value&-2)==0,\n> that could be worth doing already in GIMPLE.\n\nApparently it is\n  /* Simplify eq/ne (and/ior x y) x/y) for targets with a BICS instruction or\n     constant folding if x/y is a constant.  */\n  if ((code == EQ || code == NE)\n      && (op0code == AND || op0code == IOR)\n      && !side_effects_p (op1)\n      && op1 != CONST0_RTX (cmp_mode))\n    {\n      /* Both (eq/ne (and x y) x) and (eq/ne (ior x y) y) simplify to\n         (eq/ne (and (not y) x) 0).  */\n...\n      /* Both (eq/ne (and x y) y) and (eq/ne (ior x y) x) simplify to\n         (eq/ne (and (not x) y) 0).  */\nYes, doing that on GIMPLE for the case where the not argument is constant\nwould simplify the phiopt follow-up (it would be single imm use then).\n\nOn Thu, May 06, 2021 at 09:42:41PM +0200, Marc Glisse wrote:\n> We can probably do it in 2 steps, first something like\n>\n> (for cmp (eq ne)\n>  (simplify\n>   (cmp (bit_and:c @0 @1) @0)\n>   (cmp (@0 (bit_not! @1)) { build_zero_cst (TREE_TYPE (@0)); })))\n>\n> to get rid of the double use, and then simplify X&C==0 to X<=~C if C is a\n> mask 111...000 (I thought we already had a function to detect such masks, or\n> the 000...111, but I can't find them anymore).\n\nOk, here is the first step then.\n\n2021-05-12  Jakub Jelinek  <jakub@redhat.com>\n\t    Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/94589\n\t* match.pd ((X & Y) == X -> (X & ~Y) == 0,\n\t(X | Y) == Y -> (X & ~Y) == 0): New GIMPLE simplifications.\n\n\t* gcc.dg/tree-ssa/pr94589-1.c: New test.", "tree": {"sha": "475063f4d70b5a5bc4ea6aa2f5431f6872c3e3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/475063f4d70b5a5bc4ea6aa2f5431f6872c3e3ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5f1838435400b837c8677c53a611e2dc6d56442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f1838435400b837c8677c53a611e2dc6d56442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f1838435400b837c8677c53a611e2dc6d56442", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f1838435400b837c8677c53a611e2dc6d56442/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0c4c6bce88528773ee4445a540e86784fb72aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c4c6bce88528773ee4445a540e86784fb72aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c4c6bce88528773ee4445a540e86784fb72aa7"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "cdb876369518d9857d3a62fd4877388bebe9a713", "filename": "gcc/match.pd", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f1838435400b837c8677c53a611e2dc6d56442/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f1838435400b837c8677c53a611e2dc6d56442/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f5f1838435400b837c8677c53a611e2dc6d56442", "patch": "@@ -4764,6 +4764,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp:c (bit_xor:c @0 @1) @0)\n   (cmp @1 { build_zero_cst (TREE_TYPE (@1)); }))\n \n+#if GIMPLE\n+ /* (X & Y) == X becomes (X & ~Y) == 0.  */\n+ (simplify\n+  (cmp:c (bit_and:c @0 @1) @0)\n+  (cmp (bit_and @0 (bit_not! @1)) { build_zero_cst (TREE_TYPE (@0)); }))\n+\n+ /* (X | Y) == Y becomes (X & ~Y) == 0.  */\n+ (simplify\n+  (cmp:c (bit_ior:c @0 @1) @1)\n+  (cmp (bit_and @0 (bit_not! @1)) { build_zero_cst (TREE_TYPE (@0)); }))\n+#endif\n+\n  /* (X ^ C1) op C2 can be rewritten as X op (C1 ^ C2).  */\n  (simplify\n   (cmp (convert?@3 (bit_xor @0 INTEGER_CST@1)) INTEGER_CST@2)"}, {"sha": "7e1aaaa7c728c5b51c652b0e3aba727e19c0c564", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94589-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f1838435400b837c8677c53a611e2dc6d56442/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94589-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f1838435400b837c8677c53a611e2dc6d56442/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94589-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94589-1.c?ref=f5f1838435400b837c8677c53a611e2dc6d56442", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/94589 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (int x)\n+{\n+  return (x & 23) == x;\n+/* { dg-final { scan-tree-dump \" & -24;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" & 23;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" == 0\" \"optimized\" } } */\n+}\n+\n+int\n+bar (int x)\n+{\n+  return (x | 137) != 137;\n+/* { dg-final { scan-tree-dump \" & -138;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" \\\\| 137;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" != 0\" \"optimized\" } } */\n+}"}]}