{"sha": "718f39dcc150d25458c3f49e08c5114dbfec64e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE4ZjM5ZGNjMTUwZDI1NDU4YzNmNDllMDhjNTExNGRiZmVjNjRlOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:58:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:58:32Z"}, "message": "[multiple changes]\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-interr-hwint.adb: Revert previous patch (defer aborts in ZCX case).\n\n2011-08-29  Geert Bosch  <bosch@adacore.com>\n\n\t* a-ngelfu.adb (Tan): Do not raise Constraint_Error if the argument is\n\tthe closest machine number to Pi / 2.0.\n\n2011-08-29  Jose Ruiz  <ruiz@adacore.com>\n\n\t* impunit.adb (Non_Imp_File_Names_12): Add a-synbar for new Ada 2012\n\tpackage Ada.Synchronous_Barriers.\n\t* a-synbar.ads, a-synbar.adb, a-synbar-posix.ads, a-synbar-posix.adb:\n\tAdd new specs and bodies for Ada.Synchronous_Barriers. There is a\n\tdefault implementation using protected objects and another one\n\ta-synbar-posix using POSIX barriers as the underlying support.\n\t* gcc-interface/Makefile.in (LIBGNAT_TARGET_PAIRS for Linux (x86,\n\tx86_64, ia64) and MIPS IRIX): Use the a-synbar-posix implementation of\n\tAda.Synchronous_Barriers which uses POSIX barriers (more efficient).\n\t* Makefile.rtl (GNATRTL_TASKING_OBJS): Add a-synbar.o\n\nFrom-SVN: r178200", "tree": {"sha": "6e1b74a6ffa6d93257d6fe4f61aa7566838333fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e1b74a6ffa6d93257d6fe4f61aa7566838333fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/718f39dcc150d25458c3f49e08c5114dbfec64e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718f39dcc150d25458c3f49e08c5114dbfec64e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/718f39dcc150d25458c3f49e08c5114dbfec64e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718f39dcc150d25458c3f49e08c5114dbfec64e8/comments", "author": null, "committer": null, "parents": [{"sha": "ee2e3f6bb4978d0b148e7458dd6915dbc28fdaf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2e3f6bb4978d0b148e7458dd6915dbc28fdaf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee2e3f6bb4978d0b148e7458dd6915dbc28fdaf3"}], "stats": {"total": 468, "additions": 412, "deletions": 56}, "files": [{"sha": "9aa78a2ace91c2397afecd45dc93c38e04b63ac2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=718f39dcc150d25458c3f49e08c5114dbfec64e8", "patch": "@@ -1,3 +1,22 @@\n+2011-08-29  Geert Bosch  <bosch@adacore.com>\n+\n+\t* a-ngelfu.adb (Tan): Do not raise Constraint_Error if the argument is\n+\tthe closest machine number to Pi / 2.0.\n+\n+2011-08-29  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* impunit.adb (Non_Imp_File_Names_12): Add a-synbar for new Ada 2012\n+\tpackage Ada.Synchronous_Barriers.\n+\t* a-synbar.ads, a-synbar.adb, a-synbar-posix.ads, a-synbar-posix.adb:\n+\tAdd new specs and bodies for Ada.Synchronous_Barriers. There is a\n+\tdefault implementation using protected objects and another one\n+\ta-synbar-posix using POSIX barriers as the underlying support.\n+\t* gcc-interface/Makefile.in (LIBGNAT_TARGET_PAIRS for Linux (x86,\n+\tx86_64, ia64) and MIPS IRIX): Use the a-synbar-posix implementation of\n+\tAda.Synchronous_Barriers which uses POSIX barriers (more efficient).\n+\tClean up dependencies.\n+\t* Makefile.rtl (GNATRTL_TASKING_OBJS): Add a-synbar.o\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch7.adb, make.adb, sem_res.adb, exp_intr.adb,\n@@ -93,7 +112,6 @@\n \t(Reraise_Occurrence_Always): Ditto.\n \t* s-tasren.adb (Exceptional_Complete_Rendezvous): Defer aborts if ZCX.\n \t* s-tpobop.adb: (Exceptional_Complete_Body): Undefer abort if ZCX.\n-\t* s-interr-hwint.adb (Interrupt_Manager): Defer abort if ZCX.\n \n 2011-08-29  Thomas Quinot  <quinot@adacore.com>\n "}, {"sha": "86eb6a5cb6fa63e3ca02e7f77c323e8ad2b460d2", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=718f39dcc150d25458c3f49e08c5114dbfec64e8", "patch": "@@ -33,6 +33,7 @@ GNATRTL_TASKING_OBJS= \\\n   a-reatim$(objext) \\\n   a-retide$(objext) \\\n   a-rttiev$(objext) \\\n+  a-synbar$(objext) \\\n   a-sytaco$(objext) \\\n   a-tasatt$(objext) \\\n   a-taside$(objext) \\\n@@ -154,6 +155,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-envvar$(objext) \\\n   a-except$(objext) \\\n   a-exctra$(objext) \\\n+  a-fihema$(objext) \\\n   a-finali$(objext) \\\n   a-flteio$(objext) \\\n   a-fwteio$(objext) \\\n@@ -289,7 +291,6 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-tiunio$(objext) \\\n   a-unccon$(objext) \\\n   a-uncdea$(objext) \\\n-  a-undesu$(objext) \\\n   a-wichha$(objext) \\\n   a-wichun$(objext) \\\n   a-widcha$(objext) \\\n@@ -495,7 +496,6 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-ficobl$(objext) \\\n   s-fileio$(objext) \\\n   s-filofl$(objext) \\\n-  s-finmas$(objext) \\\n   s-finroo$(objext) \\\n   s-fishfl$(objext) \\\n   s-flocon$(objext) \\\n@@ -612,7 +612,6 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-stchop$(objext) \\\n   s-stoele$(objext) \\\n   s-stopoo$(objext) \\\n-  s-stposu$(objext) \\\n   s-stratt$(objext) \\\n   s-strhas$(objext) \\\n   s-string$(objext) \\"}, {"sha": "7091054d62ce4ea2f24c71fba232744c8961b2c1", "filename": "gcc/ada/a-ngelfu.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.adb?ref=718f39dcc150d25458c3f49e08c5114dbfec64e8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -914,9 +914,6 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n    begin\n       if abs X < Sqrt_Epsilon then\n          return X;\n-\n-      elsif abs X = Pi / 2.0 then\n-         raise Constraint_Error;\n       end if;\n \n       return Float_Type'Base (Aux.Tan (Double (X)));"}, {"sha": "c31228e0eaaf9af9ffd0ae0c9a10d9a88dd933e5", "filename": "gcc/ada/a-synbar-posix.adb", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fa-synbar-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fa-synbar-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-synbar-posix.adb?ref=718f39dcc150d25458c3f49e08c5114dbfec64e8", "patch": "@@ -0,0 +1,112 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--             A D A . S Y N C H R O N O U S _ B A R R I E R S              --\n+--                                                                          --\n+--                                  B o d y                                 --\n+--                                                                          --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the body of this package using POSIX barriers\n+\n+with Interfaces.C; use Interfaces.C;\n+\n+package body Ada.Synchronous_Barriers is\n+\n+   --------------------\n+   -- POSIX barriers --\n+   --------------------\n+\n+   function pthread_barrier_init\n+     (barrier : not null access pthread_barrier_t;\n+      attr    : System.Address := System.Null_Address;\n+      count   : unsigned)\n+     return int;\n+   pragma Import (C, pthread_barrier_init, \"pthread_barrier_init\");\n+   --  Initialize barrier with the attributes in attr. The barrier is opened\n+   --  when count waiters arrived. If attr is null the default barrier\n+   --  attributes shall be used.\n+\n+   --  Destroy a previously dynamically initialized barrier\n+   function pthread_barrier_destroy\n+     (barrier : not null access pthread_barrier_t) return int;\n+   pragma Import (C, pthread_barrier_destroy, \"pthread_barrier_destroy\");\n+   --  Destroy a previously dynamically initialized barrier\n+\n+   function pthread_barrier_wait\n+     (barrier : not null access pthread_barrier_t) return int;\n+   pragma Import (C, pthread_barrier_wait, \"pthread_barrier_wait\");\n+   --  Wait on barrier\n+\n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   overriding procedure Finalize (Barrier : in out Synchronous_Barrier) is\n+      Result : int;\n+\n+   begin\n+      Result := pthread_barrier_destroy (Barrier.POSIX_Barrier'Access);\n+      pragma Assert (Result = 0);\n+   end Finalize;\n+\n+   overriding procedure Initialize (Barrier : in out Synchronous_Barrier) is\n+      Result : int;\n+\n+   begin\n+      Result := pthread_barrier_init\n+        (barrier => Barrier.POSIX_Barrier'Access,\n+         attr    => System.Null_Address,\n+         count   => unsigned (Barrier.Release_Threshold));\n+      pragma Assert (Result = 0);\n+   end Initialize;\n+\n+   ----------------------\n+   -- Wait_For_Release --\n+   ----------------------\n+\n+   procedure Wait_For_Release\n+     (The_Barrier : in out Synchronous_Barrier;\n+      Notified    : out    Boolean)\n+   is\n+      Result : int;\n+\n+      PTHREAD_BARRIER_SERIAL_THREAD : constant := -1;\n+      --  Value used to indicate the task which receives the notification for\n+      --  the barrier open.\n+\n+   begin\n+      Result := pthread_barrier_wait\n+        (barrier => The_Barrier.POSIX_Barrier'Access);\n+      pragma Assert\n+        (Result = 0 or else Result = PTHREAD_BARRIER_SERIAL_THREAD);\n+\n+      Notified := (Result = PTHREAD_BARRIER_SERIAL_THREAD);\n+   end Wait_For_Release;\n+end Ada.Synchronous_Barriers;"}, {"sha": "80d9b201e5637399131d5d03bf0645de14e8bb0d", "filename": "gcc/ada/a-synbar-posix.ads", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fa-synbar-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fa-synbar-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-synbar-posix.ads?ref=718f39dcc150d25458c3f49e08c5114dbfec64e8", "patch": "@@ -0,0 +1,83 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--             A D A . S Y N C H R O N O U S _ B A R R I E R S              --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the spec of this package using POSIX barriers\n+\n+with System;\n+private with Ada.Finalization;\n+private with Interfaces.C;\n+\n+package Ada.Synchronous_Barriers is\n+   pragma Preelaborate (Synchronous_Barriers);\n+\n+   subtype Barrier_Limit is Positive range 1 .. Positive'Last;\n+\n+   type Synchronous_Barrier (Release_Threshold : Barrier_Limit) is\n+      limited private;\n+\n+   procedure Wait_For_Release (The_Barrier : in out Synchronous_Barrier;\n+                               Notified    :    out Boolean);\n+\n+private\n+   --  POSIX barrier data type\n+\n+   SIZEOF_PTHREAD_BARRIER_T : constant :=\n+     (if System.Word_Size = 64 then 32 else 20);\n+   --  Value defined according to the linux definition in pthreadtypes.h. On\n+   --  other system, MIPS IRIX, the object is smaller, so it works correctly\n+   --  although we are wasting some space.\n+\n+   type pthread_barrier_t_view is (size_based, align_based);\n+\n+   type pthread_barrier_t (Kind : pthread_barrier_t_view := size_based) is\n+      record\n+         case Kind is\n+            when size_based =>\n+               size : Interfaces.C.char_array (1 .. SIZEOF_PTHREAD_BARRIER_T);\n+            when align_based =>\n+               align : Interfaces.C.long;\n+         end case;\n+      end record;\n+   pragma Unchecked_Union (pthread_barrier_t);\n+\n+   type Synchronous_Barrier (Release_Threshold : Barrier_Limit) is\n+     new Ada.Finalization.Limited_Controlled with\n+      record\n+         POSIX_Barrier : aliased pthread_barrier_t;\n+      end record;\n+\n+   overriding procedure Initialize (Barrier : in out Synchronous_Barrier);\n+   overriding procedure Finalize   (Barrier : in out Synchronous_Barrier);\n+end Ada.Synchronous_Barriers;"}, {"sha": "8efaef6d0367d41edb6287a2e97718fdff8db61e", "filename": "gcc/ada/a-synbar.adb", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fa-synbar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fa-synbar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-synbar.adb?ref=718f39dcc150d25458c3f49e08c5114dbfec64e8", "patch": "@@ -0,0 +1,71 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--             A D A . S Y N C H R O N O U S _ B A R R I E R S              --\n+--                                                                          --\n+--                                  B o d y                                 --\n+--                                                                          --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body Ada.Synchronous_Barriers is\n+\n+   protected body Synchronous_Barrier is\n+      --  The condition \"Wait'Count = Release_Threshold\" opens the barrier when\n+      --  the required number of tasks is reached. The condition \"Keep_Open\"\n+      --  leaves the barrier open while there are queued tasks. While there are\n+      --  tasks in the queue no new task will be queued, guaranteeing that the\n+      --  barrier will remain open only for those tasks already inside.\n+\n+      entry Wait (Notified : out Boolean)\n+        when Wait'Count = Release_Threshold or else Keep_Open is\n+      begin\n+         --  If we are executing the entry it means that the required number\n+         --  of tasks have been queued in the entry. Keep_Open barrier will\n+         --  remain true until all queued tasks are out.\n+\n+         Keep_Open := Wait'Count > 0;\n+\n+         --  The last released task will close the barrier and get the\n+         --  Notified token.\n+\n+         Notified := Wait'Count = 0;\n+      end Wait;\n+   end Synchronous_Barrier;\n+\n+   ----------------------\n+   -- Wait_For_Release --\n+   ----------------------\n+\n+   procedure Wait_For_Release\n+     (The_Barrier : in out Synchronous_Barrier;\n+      Notified    : out    Boolean) is\n+   begin\n+      The_Barrier.Wait (Notified);\n+   end Wait_For_Release;\n+end Ada.Synchronous_Barriers;"}, {"sha": "c4506246702a2023cd3c087ca251164b13255fad", "filename": "gcc/ada/a-synbar.ads", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fa-synbar.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fa-synbar.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-synbar.ads?ref=718f39dcc150d25458c3f49e08c5114dbfec64e8", "patch": "@@ -0,0 +1,53 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--             A D A . S Y N C H R O N O U S _ B A R R I E R S              --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package Ada.Synchronous_Barriers is\n+   pragma Preelaborate (Synchronous_Barriers);\n+\n+   subtype Barrier_Limit is Positive range 1 .. Positive'Last;\n+\n+   type Synchronous_Barrier (Release_Threshold : Barrier_Limit) is\n+      limited private;\n+\n+   procedure Wait_For_Release (The_Barrier : in out Synchronous_Barrier;\n+                               Notified    :    out Boolean);\n+\n+private\n+   protected type Synchronous_Barrier (Release_Threshold : Barrier_Limit) is\n+      entry Wait (Notified : out Boolean);\n+   private\n+      Keep_Open : Boolean := False;\n+   end Synchronous_Barrier;\n+end Ada.Synchronous_Barriers;"}, {"sha": "a8b911ed935236d8f9650ada14dd7192484b4d38", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 70, "deletions": 43, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=718f39dcc150d25458c3f49e08c5114dbfec64e8", "patch": "@@ -420,7 +420,26 @@ ATOMICS_TARGET_PAIRS += \\\n   a-stzunb.adb<a-stzunb-shared.adb \\\n   a-stzunb.ads<a-stzunb-shared.ads \\\n   a-szunau.adb<a-szunau-shared.adb \\\n-  a-szuzti.adb<a-szuzti-shared.adb \\\n+  a-szuzti.adb<a-szuzti-shared.adb\n+\n+ATOMICS_BUILTINS_TARGET_PAIRS += \\\n+  s-atocou.adb<s-atocou-builtin.adb\n+\n+ATOMICS_X86_TARGET_PAIRS += \\\n+  s-atocou.adb<s-atocou-x86.adb\n+\n+# Special version of units for x86 and x86-64 platforms.\n+\n+X86_TARGET_PAIRS = \\\n+  a-numaux.ads<a-numaux-x86.ads \\\n+  a-numaux.adb<a-numaux-x86.adb \\\n+  g-bytswa.adb<g-bytswa-x86.adb \\\n+  s-atocou.adb<s-atocou-x86.adb\n+\n+X86_64_TARGET_PAIRS = \\\n+  a-numaux.ads<a-numaux-x86.ads \\\n+  a-numaux.adb<a-numaux-x86.adb \\\n+  g-bytswa.adb<g-bytswa-x86.adb \\\n   s-atocou.adb<s-atocou-builtin.adb\n \n LIB_VERSION = $(strip $(shell grep ' Library_Version :' $(fsrcpfx)ada/gnatvsn.ads | sed -e 's/.*\"\\(.*\\)\".*/\\1/'))\n@@ -497,7 +516,8 @@ ifeq ($(strip $(filter-out e500% powerpc% wrs vxworks,$(targ))),)\n   g-stsifd.adb<g-stsifd-sockets.adb \\\n   g-trasym.ads<g-trasym-unimplemented.ads \\\n   g-trasym.adb<g-trasym-unimplemented.adb \\\n-  $(ATOMICS_TARGET_PAIRS)\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS=\\\n   mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n@@ -597,7 +617,8 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksae,$(targ))),)\n   g-trasym.ads<g-trasym-unimplemented.ads \\\n   g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-ppc-vthread.ads \\\n-  $(ATOMICS_TARGET_PAIRS)\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS=\\\n   mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n@@ -661,6 +682,7 @@ ifeq ($(strip $(filter-out e500% powerpc% wrs vxworksmils,$(targ))),)\n   g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-ppc.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n   $(DUMMY_SOCKETS_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS=\\\n@@ -716,7 +738,7 @@ ifeq ($(strip $(filter-out %86 wrs vxworksae vxworksmils,$(targ))),)\n   g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-x86.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n-  s-atocou.adb<s-atocou-x86.adb\n+  $(ATOMICS_X86_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS=\\\n   mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n@@ -815,7 +837,7 @@ ifeq ($(strip $(filter-out %86 wrs vxworks,$(targ))),)\n   g-trasym.ads<g-trasym-unimplemented.ads \\\n   g-trasym.adb<g-trasym-unimplemented.adb \\\n   $(ATOMICS_TARGET_PAIRS) \\\n-  s-atocou.adb<s-atocou-x86.adb\n+  $(ATOMICS_X86_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS=\\\n   mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n@@ -980,7 +1002,8 @@ ifeq ($(strip $(filter-out sparc% sun solaris%,$(targ))),)\n \n   LIBGNAT_TARGET_PAIRS_64 = \\\n   system.ads<system-solaris-sparcv9.ads \\\n-  $(ATOMICS_TARGET_PAIRS)\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   ifeq ($(strip $(filter-out sparc sun solaris%,$(targ))),)\n     ifeq ($(strip $(MULTISUBDIR)),/sparcv9)\n@@ -1050,30 +1073,14 @@ ifeq ($(strip $(filter-out %86 %x86_64 solaris2%,$(arch) $(osys))),)\n   g-soliop.ads<g-soliop-solaris.ads \\\n   $(ATOMICS_TARGET_PAIRS)\n \n-  LIBGNAT_TARGET_PAIRS_32 = \\\n-  g-bytswa.adb<g-bytswa-x86.adb \\\n-  s-atocou.adb<s-atocou-x86.adb \\\n-  system.ads<system-solaris-x86.ads\n-\n-  LIBGNAT_TARGET_PAIRS_64 = \\\n-  system.ads<system-solaris-x86_64.ads\n-\n-  ifeq ($(strip $(filter-out %86 solaris2%,$(arch) $(osys))),)\n-    ifeq ($(strip $(MULTISUBDIR)),/amd64)\n-      LIBGNAT_TARGET_PAIRS = \\\n-      $(LIBGNAT_TARGET_PAIRS_COMMON) $(LIBGNAT_TARGET_PAIRS_64)\n-    else\n-      LIBGNAT_TARGET_PAIRS = \\\n-      $(LIBGNAT_TARGET_PAIRS_COMMON) $(LIBGNAT_TARGET_PAIRS_32)\n-    endif\n+  ifeq ($(strip $(MULTISUBDIR)),/amd64)\n+    LIBGNAT_TARGET_PAIRS += \\\n+    $(X86_64_TARGET_PAIRS) \\\n+    system.ads<system-solaris-x86_64.ads\n   else\n-    ifeq ($(strip $(MULTISUBDIR)),/32)\n-      LIBGNAT_TARGET_PAIRS = \\\n-      $(LIBGNAT_TARGET_PAIRS_COMMON) $(LIBGNAT_TARGET_PAIRS_32)\n-    else\n-      LIBGNAT_TARGET_PAIRS = \\\n-      $(LIBGNAT_TARGET_PAIRS_COMMON) $(LIBGNAT_TARGET_PAIRS_64)\n-    endif\n+    LIBGNAT_TARGET_PAIRS += \\\n+    $(X86_TARGET_PAIRS) \\\n+    system.ads<system-solaris-x86.ads\n   endif\n \n   TOOLS_TARGET_PAIRS=mlib-tgt-specific.adb<mlib-tgt-specific-solaris.adb\n@@ -1092,13 +1099,15 @@ ifeq ($(strip $(filter-out %86 linux%,$(arch) $(osys))),)\n   a-intnam.ads<a-intnam-linux.ads \\\n   a-numaux.adb<a-numaux-x86.adb \\\n   a-numaux.ads<a-numaux-x86.ads \\\n+  a-synbar.adb<a-synbar-posix.adb \\\n+  a-synbar.ads<a-synbar-posix.ads \\\n   g-bytswa.adb<g-bytswa-x86.adb \\\n   s-inmaop.adb<s-inmaop-posix.adb \\\n   s-intman.adb<s-intman-posix.adb \\\n   s-tpopsp.adb<s-tpopsp-tls.adb \\\n   g-sercom.adb<g-sercom-linux.adb \\\n   $(ATOMICS_TARGET_PAIRS) \\\n-  s-atocou.adb<s-atocou-x86.adb\n+  $(ATOMICS_X86_TARGET_PAIRS)\n \n   ifeq ($(strip $(filter-out marte,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS += \\\n@@ -1178,7 +1187,7 @@ ifeq ($(strip $(filter-out %86 kfreebsd%,$(arch) $(osys))),)\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-freebsd-x86.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n-  s-atocou.adb<s-atocou-x86.adb\n+  $(ATOMICS_X86_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS =  \\\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n@@ -1235,7 +1244,7 @@ ifeq ($(strip $(filter-out %86 freebsd%,$(arch) $(osys))),)\n   s-tpopsp.adb<s-tpopsp-posix.adb \\\n   system.ads<system-freebsd-x86.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n-  s-atocou.adb<s-atocou-x86.adb\n+  $(ATOMICS_X86_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS = \\\n   mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb\n@@ -1297,6 +1306,8 @@ endif\n ifeq ($(strip $(filter-out mips sgi irix6%,$(targ))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<a-intnam-irix.ads \\\n+  a-synbar.adb<a-synbar-posix.adb \\\n+  a-synbar.ads<a-synbar-posix.ads \\\n   s-inmaop.adb<s-inmaop-posix.adb \\\n   s-intman.adb<s-intman-irix.adb \\\n   s-mastop.adb<s-mastop-irix.adb \\\n@@ -1391,7 +1402,8 @@ ifeq ($(strip $(filter-out ibm aix%,$(manu) $(osys))),)\n   s-taprop.adb<s-taprop-posix.adb \\\n   s-taspri.ads<s-taspri-posix.ads \\\n   s-tpopsp.adb<s-tpopsp-posix.adb \\\n-  $(ATOMICS_TARGET_PAIRS)\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   LIBGNAT_TARGET_PAIRS_32 = \\\n   system.ads<system-aix.ads\n@@ -1453,7 +1465,8 @@ ifeq ($(strip $(filter-out alpha% dec osf%,$(targ))),)\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   s-traceb.adb<s-traceb-mastop.adb \\\n   system.ads<system-tru64.ads \\\n-  $(ATOMICS_TARGET_PAIRS)\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS=mlib-tgt-specific.adb<mlib-tgt-specific-tru64.adb\n \n@@ -1520,7 +1533,8 @@ ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(targ)))\n       s-vaflop.adb<s-vaflop-vms-ia64.adb \\\n       system.ads<system-vms-ia64.ads \\\n       s-parame.ads<s-parame-vms-ia64.ads \\\n-      $(ATOMICS_TARGET_PAIRS)\n+      $(ATOMICS_TARGET_PAIRS) \\\n+      $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n     TOOLS_TARGET_PAIRS= \\\n       mlib-tgt-specific.adb<mlib-tgt-specific-vms-ia64.adb \\\n@@ -1540,7 +1554,8 @@ ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(targ)))\n         s-vaflop.adb<s-vaflop-vms-alpha.adb \\\n         system.ads<system-vms_64.ads \\\n \ts-parame.ads<s-parame-vms-alpha.ads \\\n-        $(ATOMICS_TARGET_PAIRS)\n+        $(ATOMICS_TARGET_PAIRS) \\\n+        $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n     TOOLS_TARGET_PAIRS= \\\n       mlib-tgt-specific.adb<mlib-tgt-specific-vms-alpha.adb \\\n@@ -1593,7 +1608,7 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n   g-stsifd.adb<g-stsifd-sockets.adb \\\n   g-soliop.ads<g-soliop-mingw.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n-  s-atocou.adb<s-atocou-x86.adb\n+  $(ATOMICS_X86_TARGET_PAIRS)\n \n   ifeq ($(strip $(filter-out rtx_w32 rtx_rtss,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS += \\\n@@ -1786,13 +1801,16 @@ ifeq ($(strip $(filter-out powerpc% linux%,$(arch) $(osys))),)\n   a-exetim.adb<a-exetim-posix.adb \\\n   a-exetim.ads<a-exetim-default.ads \\\n   a-intnam.ads<a-intnam-linux.ads \\\n+  a-synbar.adb<a-synbar-posix.adb \\\n+  a-synbar.ads<a-synbar-posix.ads \\\n   s-inmaop.adb<s-inmaop-posix.adb \\\n   s-intman.adb<s-intman-posix.adb \\\n   s-linux.ads<s-linux.ads \\\n   s-osinte.adb<s-osinte-posix.adb \\\n   s-tpopsp.adb<s-tpopsp-tls.adb \\\n   g-sercom.adb<g-sercom-linux.adb \\\n-  $(ATOMICS_TARGET_PAIRS)\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   ifeq ($(strip $(filter-out xenomai,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS = \\\n@@ -1983,6 +2001,8 @@ ifeq ($(strip $(filter-out %ia64 linux%,$(arch) $(osys))),)\n   a-exetim.ads<a-exetim-default.ads \\\n   a-intnam.ads<a-intnam-linux.ads \\\n   a-numaux.ads<a-numaux-libc-x86.ads \\\n+  a-synbar.adb<a-synbar-posix.adb \\\n+  a-synbar.ads<a-synbar-posix.ads \\\n   s-inmaop.adb<s-inmaop-posix.adb \\\n   s-intman.adb<s-intman-posix.adb \\\n   s-linux.ads<s-linux.ads \\\n@@ -1996,7 +2016,8 @@ ifeq ($(strip $(filter-out %ia64 linux%,$(arch) $(osys))),)\n   s-taspri.ads<s-taspri-posix-noaltstack.ads \\\n   g-sercom.adb<g-sercom-linux.adb \\\n   system.ads<system-linux-ia64.ads \\\n-  $(ATOMICS_TARGET_PAIRS)\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS =  \\\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n@@ -2023,7 +2044,8 @@ ifeq ($(strip $(filter-out ia64% hp hpux%,$(targ))),)\n   s-taspri.ads<s-taspri-posix-noaltstack.ads \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-hpux-ia64.ads \\\n-  $(ATOMICS_TARGET_PAIRS)\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS = \\\n   mlib-tgt-specific.adb<mlib-tgt-specific-ia64-hpux.adb\n@@ -2054,7 +2076,8 @@ ifeq ($(strip $(filter-out alpha% linux%,$(arch) $(osys))),)\n   g-trasym.ads<g-trasym-unimplemented.ads \\\n   g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-linux-alpha.ads \\\n-  $(ATOMICS_TARGET_PAIRS)\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS =  \\\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n@@ -2075,6 +2098,8 @@ ifeq ($(strip $(filter-out %x86_64 linux%,$(arch) $(osys))),)\n   a-intnam.ads<a-intnam-linux.ads \\\n   a-numaux.adb<a-numaux-x86.adb \\\n   a-numaux.ads<a-numaux-x86.ads \\\n+  a-synbar.adb<a-synbar-posix.adb \\\n+  a-synbar.ads<a-synbar-posix.ads \\\n   s-inmaop.adb<s-inmaop-posix.adb \\\n   s-intman.adb<s-intman-posix.adb \\\n   s-linux.ads<s-linux.ads \\\n@@ -2088,7 +2113,8 @@ ifeq ($(strip $(filter-out %x86_64 linux%,$(arch) $(osys))),)\n   s-taspri.ads<s-taspri-posix.ads \\\n   g-sercom.adb<g-sercom-linux.adb \\\n   system.ads<system-linux-x86_64.ads \\\n-  $(ATOMICS_TARGET_PAIRS)\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n   TOOLS_TARGET_PAIRS =  \\\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n@@ -2145,7 +2171,8 @@ ifeq ($(strip $(filter-out darwin%,$(osys))),)\n     g-trasym.adb<g-trasym-unimplemented.adb \\\n     a-numaux.ads<a-numaux-x86.ads \\\n     a-numaux.adb<a-numaux-x86.adb \\\n-    $(ATOMICS_TARGET_PAIRS)\n+    $(ATOMICS_TARGET_PAIRS) \\\n+    $(ATOMICS_BUILTINS_TARGET_PAIRS)\n     ifeq ($(strip $(MULTISUBDIR)),/i386)\n       LIBGNAT_TARGET_PAIRS += \\\n       system.ads<system-darwin-x86.ads"}, {"sha": "de05fdfd6ebd36c9bbaaf3177b7963ec5f09ecf2", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=718f39dcc150d25458c3f49e08c5114dbfec64e8", "patch": "@@ -111,7 +111,6 @@ package body Impunit is\n      \"a-titest\",    -- Ada.Text_IO.Text_Streams\n      \"a-unccon\",    -- Ada.Unchecked_Conversion\n      \"a-uncdea\",    -- Ada.Unchecked_Deallocation\n-     \"a-undesu\",    -- Ada.Unchecked_Deallocate_Subpool\n      \"a-witeio\",    -- Ada.Wide_Text_IO\n      \"a-wtcoio\",    -- Ada.Wide_Text_IO.Complex_IO\n      \"a-wtedit\",    -- Ada.Wide_Text_IO.Editing\n@@ -340,7 +339,6 @@ package body Impunit is\n      \"s-rpc   \",    -- System.Rpc\n      \"s-stoele\",    -- System.Storage_Elements\n      \"s-stopoo\",    -- System.Storage_Pools\n-     \"s-stposu\",    -- System.Storage_Pools.Subpools\n \n    --------------------------------------\n    -- GNAT Defined Additions to System --\n@@ -522,6 +520,7 @@ package body Impunit is\n      \"a-cbmutr\",    -- Ada.Containers.Bounded_Multiway_Trees\n      \"a-extiin\",    -- Ada.Execution_Time.Interrupts\n      \"a-iteint\",    -- Ada.Iterator_Interfaces\n+     \"a-synbar\",    -- Ada.Synchronous_Barriers\n \n    -----------------------------------------\n    -- GNAT Defined Additions to Ada 20012 --"}, {"sha": "1a43c952840128c2e7c3f48909b5513a57580b08", "filename": "gcc/ada/s-interr-hwint.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fs-interr-hwint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718f39dcc150d25458c3f49e08c5114dbfec64e8/gcc%2Fada%2Fs-interr-hwint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-hwint.adb?ref=718f39dcc150d25458c3f49e08c5114dbfec64e8", "patch": "@@ -1025,9 +1025,6 @@ package body System.Interrupts is\n \n    exception\n       when Standard'Abort_Signal =>\n-         if ZCX_By_Default then\n-            Initialization.Defer_Abort_Nestable (STPO.Self);\n-         end if;\n \n          --  Flush interrupt server semaphores, so they can terminate\n "}]}