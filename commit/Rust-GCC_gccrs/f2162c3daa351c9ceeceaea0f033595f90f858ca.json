{"sha": "f2162c3daa351c9ceeceaea0f033595f90f858ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIxNjJjM2RhYTM1MWM5Y2VlY2VhZWEwZjAzMzU5NWY5MGY4NThjYQ==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2011-12-12T12:05:18Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2011-12-12T12:05:18Z"}, "message": "Add condition to MUST_NOT_THROW_EXPR.\n\n\tgcc/cp/\n\t* cp-tree.def (MUST_NOT_THROW_EXPR): Add condition parameter.\n\t* cp-tree.h (MUST_NOT_THROW_COND): New.\n\t(build_must_not_throw_expr): Declare.\n\t* dump.c (cp_dump_tree): Dump MUST_NOT_THROW_EXPR condition.\n\t* except.c (build_must_not_throw_expr): New.\n\t(initialize_handler_parm): Use it.\n\t(begin_eh_spec_block, wrap_cleanups_r): Adapt to condition.\n\t* pt.c (tsubst_expr): Handle MUST_NOT_THROW_EXPR.\n\nFrom-SVN: r182233", "tree": {"sha": "ac7dd9b4a8d33d3c0e997a93a36a45d93fac060b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac7dd9b4a8d33d3c0e997a93a36a45d93fac060b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2162c3daa351c9ceeceaea0f033595f90f858ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2162c3daa351c9ceeceaea0f033595f90f858ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2162c3daa351c9ceeceaea0f033595f90f858ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2162c3daa351c9ceeceaea0f033595f90f858ca/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f23640f57cdd908c105b366dda7db7048dc62ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f23640f57cdd908c105b366dda7db7048dc62ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f23640f57cdd908c105b366dda7db7048dc62ef"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "d553dce240e63c58f2706112200aaf3f1ea074ec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2162c3daa351c9ceeceaea0f033595f90f858ca", "patch": "@@ -1,3 +1,14 @@\n+2011-12-12  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* cp-tree.def (MUST_NOT_THROW_EXPR): Add condition parameter.\n+\t* cp-tree.h (MUST_NOT_THROW_COND): New.\n+\t(build_must_not_throw_expr): Declare.\n+\t* dump.c (cp_dump_tree): Dump MUST_NOT_THROW_EXPR condition.\n+\t* except.c (build_must_not_throw_expr): New.\n+\t(initialize_handler_parm): Use it.\n+\t(begin_eh_spec_block, wrap_cleanups_r): Adapt to condition.\n+\t* pt.c (tsubst_expr): Handle MUST_NOT_THROW_EXPR.\n+\n 2011-12-12  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/51262"}, {"sha": "83e0b5baab67aa96ecc36accbe7ca706d6bc3d6b", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=f2162c3daa351c9ceeceaea0f033595f90f858ca", "patch": "@@ -281,8 +281,9 @@ DEFTREECODE (EH_SPEC_BLOCK, \"eh_spec_block\", tcc_statement, 2)\n DEFTREECODE (HANDLER, \"handler\", tcc_statement, 2)\n \n /* A MUST_NOT_THROW_EXPR wraps an expression that may not\n-   throw, and must call terminate if it does.  */\n-DEFTREECODE (MUST_NOT_THROW_EXPR, \"must_not_throw_expr\", tcc_expression, 1)\n+   throw, and must call terminate if it does.  The second argument\n+   is a condition, used in templates to express noexcept (condition).  */\n+DEFTREECODE (MUST_NOT_THROW_EXPR, \"must_not_throw_expr\", tcc_expression, 2)\n \n /* A CLEANUP_STMT marks the point at which a declaration is fully\n    constructed.  The CLEANUP_EXPR is run on behalf of CLEANUP_DECL"}, {"sha": "c28b2297486ad2facc386d3818b3b45e9abea4db", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f2162c3daa351c9ceeceaea0f033595f90f858ca", "patch": "@@ -3016,6 +3016,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define VEC_INIT_EXPR_VALUE_INIT(NODE) \\\n   TREE_LANG_FLAG_1 (VEC_INIT_EXPR_CHECK (NODE))\n \n+/* The condition under which this MUST_NOT_THROW_EXPR actually blocks\n+   exceptions.  NULL_TREE means 'true'.  */\n+#define MUST_NOT_THROW_COND(NODE) \\\n+  TREE_OPERAND (MUST_NOT_THROW_EXPR_CHECK (NODE), 1)\n+\n /* The TYPE_MAIN_DECL for a class template type is a TYPE_DECL, not a\n    TEMPLATE_DECL.  This macro determines whether or not a given class\n    type is really a template type, as opposed to an instantiation or\n@@ -5148,6 +5153,7 @@ extern bool type_noexcept_p\t\t\t(const_tree);\n extern bool type_throw_all_p\t\t\t(const_tree);\n extern tree build_noexcept_spec\t\t\t(tree, int);\n extern void choose_personality_routine\t\t(enum languages);\n+extern tree build_must_not_throw_expr\t\t(tree,tree);\n extern tree eh_type_info\t\t\t(tree);\n extern tree begin_eh_spec_block\t\t\t(void);\n extern void finish_eh_spec_block\t\t(tree, tree);"}, {"sha": "a461094f504642a5f513bc9b9382fb2b98b81798", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=f2162c3daa351c9ceeceaea0f033595f90f858ca", "patch": "@@ -413,6 +413,7 @@ cp_dump_tree (void* dump_info, tree t)\n     case MUST_NOT_THROW_EXPR:\n       dump_stmt (di, t);\n       dump_child (\"body\", TREE_OPERAND (t, 0));\n+      dump_child (\"cond\", MUST_NOT_THROW_COND (t));\n       break;\n \n     case USING_STMT:"}, {"sha": "c56dc2c734b05534fb0552a0f40e6aee6546b943", "filename": "gcc/cp/except.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=f2162c3daa351c9ceeceaea0f033595f90f858ca", "patch": "@@ -374,6 +374,28 @@ choose_personality_routine (enum languages lang)\n   state = gave_error;\n }\n \n+/* Wrap EXPR in a MUST_NOT_THROW_EXPR expressing that EXPR must\n+   not throw any exceptions if COND is true.  A condition of\n+   NULL_TREE is treated as 'true'.  */\n+\n+tree\n+build_must_not_throw_expr (tree body, tree cond)\n+{\n+  tree type = body ? TREE_TYPE (body) : void_type_node;\n+\n+  if (cond && !value_dependent_expression_p (cond))\n+    {\n+      cond = cxx_constant_value (cond);\n+      if (integer_zerop (cond))\n+\treturn body;\n+      else if (integer_onep (cond))\n+\tcond = NULL_TREE;\n+    }\n+\n+  return build2 (MUST_NOT_THROW_EXPR, type, body, cond);\n+}\n+\n+\n /* Initialize the catch parameter DECL.  */\n \n static void\n@@ -418,7 +440,7 @@ initialize_handler_parm (tree decl, tree exp)\n       /* Force cleanups now to avoid nesting problems with the\n \t MUST_NOT_THROW_EXPR.  */\n       init = fold_build_cleanup_point_expr (TREE_TYPE (init), init);\n-      init = build1 (MUST_NOT_THROW_EXPR, TREE_TYPE (init), init);\n+      init = build_must_not_throw_expr (init, NULL_TREE);\n     }\n \n   decl = pushdecl (decl);\n@@ -560,7 +582,8 @@ begin_eh_spec_block (void)\n      MUST_NOT_THROW_EXPR.  */\n   if (TYPE_NOEXCEPT_P (TREE_TYPE (current_function_decl)))\n     {\n-      r = build_stmt (spec_location, MUST_NOT_THROW_EXPR, NULL_TREE);\n+      r = build_stmt (spec_location, MUST_NOT_THROW_EXPR,\n+\t\t      NULL_TREE, NULL_TREE);\n       TREE_SIDE_EFFECTS (r) = 1;\n     }\n   else\n@@ -664,7 +687,8 @@ wrap_cleanups_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n   cleanup = TARGET_EXPR_CLEANUP (exp);\n   if (cleanup)\n     {\n-      cleanup = build1 (MUST_NOT_THROW_EXPR, void_type_node, cleanup);\n+      cleanup = build2 (MUST_NOT_THROW_EXPR, void_type_node, cleanup,\n+\t\t\tNULL_TREE);\n       TARGET_EXPR_CLEANUP (exp) = cleanup;\n     }\n "}, {"sha": "f5a317525064ea2783a24f41d6f35e4dbbd3d467", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2162c3daa351c9ceeceaea0f033595f90f858ca/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f2162c3daa351c9ceeceaea0f033595f90f858ca", "patch": "@@ -13260,6 +13260,10 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       }\n       break;\n \n+    case MUST_NOT_THROW_EXPR:\n+      return build_must_not_throw_expr (RECUR (TREE_OPERAND (t, 0)),\n+\t\t\t\t\tRECUR (MUST_NOT_THROW_COND (t)));\n+\n     case EXPR_PACK_EXPANSION:\n       error (\"invalid use of pack expansion expression\");\n       return error_mark_node;"}]}