{"sha": "967143957e1b219647022c9b01530af954ae54f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY3MTQzOTU3ZTFiMjE5NjQ3MDIyYzliMDE1MzBhZjk1NGFlNTRmMQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2003-03-05T22:37:52Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2003-03-05T22:37:52Z"}, "message": "tm.texi: Document TARGET_DWARF_REGISTER_SPAN.\n\n2003-03-05  Aldy Hernandez  <aldyh@redhat.com>\n\n        * doc/tm.texi: Document TARGET_DWARF_REGISTER_SPAN.\n\n        * config/rs6000/rs6000.c (rs6000_dwarf_register_span): New.\n\n        * hooks.c (hook_rtx_rtx_null): New.\n\n        * hooks.h (hook_rtx_rtx_null): Protoize.\n\n        * target-def.h (TARGET_DWARF_REGISTER_SPAN): New macro.\n        (TARGET_INITIALIZER): Add TARGET_DWARF_REGISTER_SPAN.\n\n        * target.h (struct gcc_target): Add dwarf_register_span.\n\n        * dwarf2out.c (multiple_reg_loc_descriptor): New.\n        (one_reg_loc_descriptor): New.\n        (reg_loc_descriptor): Add support for values that span more than\n        one register.\n\nFrom-SVN: r63870", "tree": {"sha": "374e685d8676bc7828b9b030e68b5e0b0435ab14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/374e685d8676bc7828b9b030e68b5e0b0435ab14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/967143957e1b219647022c9b01530af954ae54f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967143957e1b219647022c9b01530af954ae54f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967143957e1b219647022c9b01530af954ae54f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967143957e1b219647022c9b01530af954ae54f1/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd6eaaed371ccc9da18d960d4a020009f055adcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6eaaed371ccc9da18d960d4a020009f055adcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd6eaaed371ccc9da18d960d4a020009f055adcf"}], "stats": {"total": 154, "additions": 149, "deletions": 5}, "files": [{"sha": "9d1c8801791c4bc8f092140bed48091beec9b338", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967143957e1b219647022c9b01530af954ae54f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967143957e1b219647022c9b01530af954ae54f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=967143957e1b219647022c9b01530af954ae54f1", "patch": "@@ -1,3 +1,23 @@\n+2003-03-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * doc/tm.texi: Document TARGET_DWARF_REGISTER_SPAN.\n+\n+        * config/rs6000/rs6000.c (rs6000_dwarf_register_span): New.\n+\n+        * hooks.c (hook_rtx_rtx_null): New.\n+\n+        * hooks.h (hook_rtx_rtx_null): Protoize.\n+\n+        * target-def.h (TARGET_DWARF_REGISTER_SPAN): New macro.\n+        (TARGET_INITIALIZER): Add TARGET_DWARF_REGISTER_SPAN.\n+\n+        * target.h (struct gcc_target): Add dwarf_register_span.\n+\n+        * dwarf2out.c (multiple_reg_loc_descriptor): New.\n+        (one_reg_loc_descriptor): New.\n+        (reg_loc_descriptor): Add support for values that span more than\n+        one register.\n+\n Wed Mar  5 23:16:57 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* Makefile.in (calls.o, toplev.o alias.o): Depend on cgraph.h"}, {"sha": "8f57f9497b4653a317a2a0600ece62d2064b884f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967143957e1b219647022c9b01530af954ae54f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967143957e1b219647022c9b01530af954ae54f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=967143957e1b219647022c9b01530af954ae54f1", "patch": "@@ -268,6 +268,7 @@ static rtx generate_set_vrsave PARAMS ((rtx, rs6000_stack_t *, int));\n static void altivec_frame_fixup PARAMS ((rtx, rtx, HOST_WIDE_INT));\n static int easy_vector_constant PARAMS ((rtx));\n static bool is_ev64_opaque_type PARAMS ((tree));\n+static rtx rs6000_dwarf_register_span PARAMS ((rtx));\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n@@ -421,6 +422,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_VECTOR_OPAQUE_P\n #define TARGET_VECTOR_OPAQUE_P is_ev64_opaque_type\n \n+#undef TARGET_DWARF_REGISTER_SPAN\n+#define TARGET_DWARF_REGISTER_SPAN rs6000_dwarf_register_span\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override command line options.  Mostly we process the processor\n@@ -13601,4 +13605,28 @@ is_ev64_opaque_type (type)\n \t\t     \"__ev64_opaque__\") == 0);\n }\n \n+static rtx\n+rs6000_dwarf_register_span (reg)\n+     rtx reg;\n+{\n+  unsigned regno;\n+\n+  if (!TARGET_SPE || !SPE_VECTOR_MODE (GET_MODE (reg)))\n+    return NULL_RTX;\n+\n+  regno = REGNO (reg);\n+\n+  /* The duality of the SPE register size wreaks all kinds of havoc.\n+     This is a way of distinguishing r0 in 32-bits from r0 in\n+     64-bits.  */\n+  return\n+    gen_rtx_PARALLEL (VOIDmode,\n+\t\t      gen_rtvec (2,\n+\t\t\t\t gen_rtx_REG (SImode, regno),\n+\t\t\t\t /* Who, where, what?  1200?  This\n+\t\t\t\t    will get changed to a sane value\n+\t\t\t\t    when the SPE ABI finalizes.  */\n+\t\t\t\t gen_rtx_REG (SImode, regno + 1200)));\n+}\n+\n #include \"gt-rs6000.h\""}, {"sha": "25db00595df9f9f8c5d1b1200d969d6b5d0e40b0", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967143957e1b219647022c9b01530af954ae54f1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967143957e1b219647022c9b01530af954ae54f1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=967143957e1b219647022c9b01530af954ae54f1", "patch": "@@ -7610,6 +7610,15 @@ Default value is false if @code{EH_FRAME_SECTION_NAME} is defined, and\n true otherwise.\n @end deftypevar\n \n+@deftypefn {Target Hook} rtx TARGET_DWARF_REGISTER_SPAN (rtx @var{reg})\n+Given a register, this hook should return a parallel of registers to\n+represent where to find the register pieces.  Define this hook if the\n+register and its mode are represented in Dwarf in non-contiguous\n+locations, or if the register should be represented in more than one\n+register in Dwarf.  Otherwise, this hook should return @code{NULL_RTX}.\n+If not defined, the default is to return @code{NULL_RTX}.\n+@end deftypefn\n+\n @node Alignment Output\n @subsection Assembler Commands for Alignment\n "}, {"sha": "5a515e3fb4166be40d6eb9233e027e98a2c9a605", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 73, "deletions": 5, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967143957e1b219647022c9b01530af954ae54f1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967143957e1b219647022c9b01530af954ae54f1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=967143957e1b219647022c9b01530af954ae54f1", "patch": "@@ -3752,6 +3752,8 @@ static dw_die_ref modified_type_die\tPARAMS ((tree, int, int, dw_die_ref));\n static int type_is_enum\t\t\tPARAMS ((tree));\n static unsigned int reg_number\t\tPARAMS ((rtx));\n static dw_loc_descr_ref reg_loc_descriptor PARAMS ((rtx));\n+static dw_loc_descr_ref one_reg_loc_descriptor PARAMS ((unsigned int));\n+static dw_loc_descr_ref multiple_reg_loc_descriptor PARAMS ((rtx, rtx));\n static dw_loc_descr_ref int_loc_descriptor PARAMS ((HOST_WIDE_INT));\n static dw_loc_descr_ref based_loc_descr\tPARAMS ((unsigned, long));\n static int is_based_loc\t\t\tPARAMS ((rtx));\n@@ -8155,24 +8157,90 @@ reg_number (rtl)\n }\n \n /* Return a location descriptor that designates a machine register or\n-   zero if there is no such.  */\n+   zero if there is none.  */\n \n static dw_loc_descr_ref\n reg_loc_descriptor (rtl)\n      rtx rtl;\n {\n-  dw_loc_descr_ref loc_result = NULL;\n   unsigned reg;\n+  rtx regs;\n \n   if (REGNO (rtl) >= FIRST_PSEUDO_REGISTER)\n     return 0;\n \n   reg = reg_number (rtl);\n-  if (reg <= 31)\n-    loc_result = new_loc_descr (DW_OP_reg0 + reg, 0, 0);\n+  regs = (*targetm.dwarf_register_span) (rtl);\n+\n+  if (HARD_REGNO_NREGS (reg, GET_MODE (rtl)) > 1\n+      || regs)\n+    return multiple_reg_loc_descriptor (rtl, regs);\n+  else\n+    return one_reg_loc_descriptor (reg);\n+}\n+\n+/* Return a location descriptor that designates a machine register for\n+   a given hard register number.  */\n+\n+static dw_loc_descr_ref\n+one_reg_loc_descriptor (regno)\n+     unsigned int regno;\n+{\n+  if (regno <= 31)\n+    return new_loc_descr (DW_OP_reg0 + regno, 0, 0);\n   else\n-    loc_result = new_loc_descr (DW_OP_regx, reg, 0);\n+    return new_loc_descr (DW_OP_regx, regno, 0);\n+}\n+\n+/* Given an RTL of a register, return a location descriptor that\n+   designates a value that spans more than one register.  */\n+\n+static dw_loc_descr_ref\n+multiple_reg_loc_descriptor (rtl, regs)\n+     rtx rtl, regs;\n+{\n+  int nregs, size, i;\n+  unsigned reg;\n+  dw_loc_descr_ref loc_result = NULL;\n \n+  reg = reg_number (rtl);\n+  nregs = HARD_REGNO_NREGS (reg, GET_MODE (rtl));\n+\n+  /* Simple, contiguous registers.  */\n+  if (regs == NULL_RTX)\n+    {\n+      size = GET_MODE_SIZE (GET_MODE (rtl)) / nregs;\n+\n+      loc_result = NULL;\n+      while (nregs--)\n+\t{\n+\t  dw_loc_descr_ref t;\n+\n+\t  ++reg;\n+\t  t = one_reg_loc_descriptor (reg);\n+\t  add_loc_descr (&loc_result, t);\n+\t  add_loc_descr (&loc_result, new_loc_descr (DW_OP_piece, size, 0));\n+\t}\n+      return loc_result;\n+    }\n+\n+  /* Now onto stupid register sets in non contiguous locations.  */\n+\n+  if (GET_CODE (regs) != PARALLEL)\n+    abort ();\n+\n+  size = GET_MODE_SIZE (GET_MODE (XVECEXP (regs, 0, 0)));\n+  loc_result = NULL;\n+\n+  for (i = 0; i < XVECLEN (regs, 0); ++i)\n+    {\n+      dw_loc_descr_ref t;\n+\n+      t = one_reg_loc_descriptor (REGNO (XVECEXP (regs, 0, i)));\n+      add_loc_descr (&loc_result, t);\n+      size = GET_MODE_SIZE (GET_MODE (XVECEXP (regs, 0, 0)));\n+      add_loc_descr (&loc_result, new_loc_descr (DW_OP_piece, size, 0));\n+    }\n   return loc_result;\n }\n "}, {"sha": "1ec672585c2d76446a4ded4d06cf063af3eba2e2", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967143957e1b219647022c9b01530af954ae54f1/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967143957e1b219647022c9b01530af954ae54f1/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=967143957e1b219647022c9b01530af954ae54f1", "patch": "@@ -157,3 +157,10 @@ hook_rtx_rtx_identity (x)\n   return x;\n }\n \n+/* Generic hook that takes an rtx and returns NULL_RTX.  */\n+rtx\n+hook_rtx_rtx_null (x)\n+     rtx x ATTRIBUTE_UNUSED;\n+{\n+  return 0;\n+}"}, {"sha": "5866da71bc90364a23a1354f3bf64670964e6ee1", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967143957e1b219647022c9b01530af954ae54f1/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967143957e1b219647022c9b01530af954ae54f1/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=967143957e1b219647022c9b01530af954ae54f1", "patch": "@@ -46,5 +46,6 @@ bool default_can_output_mi_thunk_no_vcall\n bool hook_bool_tree_tree_false PARAMS ((tree, tree));\n \n rtx hook_rtx_rtx_identity PARAMS ((rtx));\n+rtx hook_rtx_rtx_null PARAMS ((rtx));\n \n #endif"}, {"sha": "86774c1d59ea8f220ee394fdf426cf036c7b6aa8", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967143957e1b219647022c9b01530af954ae54f1/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967143957e1b219647022c9b01530af954ae54f1/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=967143957e1b219647022c9b01530af954ae54f1", "patch": "@@ -140,6 +140,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #endif\n #endif\n \n+#define TARGET_DWARF_REGISTER_SPAN hook_rtx_rtx_null\n+\n #ifndef TARGET_ASM_EXCEPTION_SECTION\n #define TARGET_ASM_EXCEPTION_SECTION default_exception_section\n #endif\n@@ -310,6 +312,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_VECTOR_OPAQUE_P,\t\t\t\\\n   TARGET_RTX_COSTS,\t\t\t\t\\\n   TARGET_ADDRESS_COST,\t\t\t\t\\\n+  TARGET_DWARF_REGISTER_SPAN,                   \\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_HAVE_TLS,\t\t\t\t\\"}, {"sha": "22558e9f7788c66d05910e0f486411c8e63982ea", "filename": "gcc/target.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967143957e1b219647022c9b01530af954ae54f1/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967143957e1b219647022c9b01530af954ae54f1/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=967143957e1b219647022c9b01530af954ae54f1", "patch": "@@ -334,6 +334,14 @@ struct gcc_target\n      invalid addresses.  */\n   int (* address_cost) PARAMS ((rtx x));\n \n+  /* Given a register, this hook should return a parallel of registers\n+     to represent where to find the register pieces.  Define this hook\n+     if the register and its mode are represented in Dwarf in\n+     non-contiguous locations, or if the register should be\n+     represented in more than one register in Dwarf.  Otherwise, this\n+     hook should return NULL_RTX.  */\n+  rtx (* dwarf_register_span) PARAMS ((rtx));\n+\n   /* Leave the boolean fields at the end.  */\n \n   /* True if arbitrary sections are supported.  */"}]}