{"sha": "aca6948338bd036d404971c0744766a2e3191107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNhNjk0ODMzOGJkMDM2ZDQwNDk3MWMwNzQ0NzY2YTJlMzE5MTEwNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-02-13T00:22:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-13T00:22:24Z"}, "message": "system.h: New file to get common systems includes and various definitions and...\n\n \n\t* system.h: New file to get common systems includes and various\n\tdefinitions and declarations based on autoconf macros.\n\nFrom-SVN: r17891", "tree": {"sha": "cd9b9d7a3b03a4930b75a2100f408827551fbe80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd9b9d7a3b03a4930b75a2100f408827551fbe80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aca6948338bd036d404971c0744766a2e3191107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca6948338bd036d404971c0744766a2e3191107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca6948338bd036d404971c0744766a2e3191107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca6948338bd036d404971c0744766a2e3191107/comments", "author": null, "committer": null, "parents": [{"sha": "ee48472991378fb816eafb55d7c0eabe6834dfcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee48472991378fb816eafb55d7c0eabe6834dfcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee48472991378fb816eafb55d7c0eabe6834dfcc"}], "stats": {"total": 193, "additions": 193, "deletions": 0}, "files": [{"sha": "8622556052f62c5d2389ab9e7c1c43cc5764b6af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca6948338bd036d404971c0744766a2e3191107/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca6948338bd036d404971c0744766a2e3191107/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aca6948338bd036d404971c0744766a2e3191107", "patch": "@@ -1,3 +1,8 @@\n+Fri Feb 13 01:23:46 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+ \n+\t* system.h: New file to get common systems includes and various\n+\tdefinitions and declarations based on autoconf macros.\n+\n Fri Feb 13 00:46:19 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* cccp.c (new_include_prefix): Correctly handle -I./."}, {"sha": "920e5128c68df2912103a77157b599305ece3d66", "filename": "gcc/system.h", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca6948338bd036d404971c0744766a2e3191107/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca6948338bd036d404971c0744766a2e3191107/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=aca6948338bd036d404971c0744766a2e3191107", "patch": "@@ -0,0 +1,188 @@\n+/* system.h - Get common system includes and various definitions and\n+   declarations based on autoconf macros.\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+ */\n+\n+#ifndef __GCC_SYSTEM_H__\n+#define __GCC_SYSTEM_H__\n+\n+#include <stdio.h>\n+#include <ctype.h>\n+\n+/* Jim Meyering writes:\n+ \n+   \"... Some ctype macros are valid only for character codes that\n+   isascii says are ASCII (SGI's IRIX-4.0.5 is one such system --when\n+   using /bin/cc or gcc but without giving an ansi option).  So, all\n+   ctype uses should be through macros like ISPRINT...  If\n+   STDC_HEADERS is defined, then autoconf has verified that the ctype\n+   macros don't need to be guarded with references to isascii. ...\n+   Defining isascii to 1 should let any compiler worth its salt\n+   eliminate the && through constant folding.\"\n+ \n+   Bruno Haible adds:\n+ \n+   \"... Furthermore, isupper(c) etc. have an undefined result if c is\n+   outside the range -1 <= c <= 255. One is tempted to write isupper(c)\n+   with c being of type `char', but this is wrong if c is an 8-bit\n+   character >= 128 which gets sign-extended to a negative value.\n+   The macro ISUPPER protects against this as well.\"  */\n+ \n+#if defined (STDC_HEADERS) || (!defined (isascii) && !defined (HAVE_ISASCII))\n+# define IN_CTYPE_DOMAIN(c) 1\n+#else\n+# define IN_CTYPE_DOMAIN(c) isascii(c)\n+#endif\n+ \n+#ifdef isblank\n+# define ISBLANK(c) (IN_CTYPE_DOMAIN (c) && isblank (c))\n+#else\n+# define ISBLANK(c) ((c) == ' ' || (c) == '\\t')\n+#endif\n+#ifdef isgraph\n+# define ISGRAPH(c) (IN_CTYPE_DOMAIN (c) && isgraph (c))\n+#else\n+# define ISGRAPH(c) (IN_CTYPE_DOMAIN (c) && isprint (c) && !isspace (c))\n+#endif\n+ \n+#define ISPRINT(c) (IN_CTYPE_DOMAIN (c) && isprint (c))\n+#define ISALNUM(c) (IN_CTYPE_DOMAIN (c) && isalnum (c))\n+#define ISALPHA(c) (IN_CTYPE_DOMAIN (c) && isalpha (c))\n+#define ISCNTRL(c) (IN_CTYPE_DOMAIN (c) && iscntrl (c))\n+#define ISLOWER(c) (IN_CTYPE_DOMAIN (c) && islower (c))\n+#define ISPUNCT(c) (IN_CTYPE_DOMAIN (c) && ispunct (c))\n+#define ISSPACE(c) (IN_CTYPE_DOMAIN (c) && isspace (c))\n+#define ISUPPER(c) (IN_CTYPE_DOMAIN (c) && isupper (c))\n+#define ISXDIGIT(c) (IN_CTYPE_DOMAIN (c) && isxdigit (c))\n+#define ISDIGIT_LOCALE(c) (IN_CTYPE_DOMAIN (c) && isdigit (c))\n+ \n+/* ISDIGIT differs from ISDIGIT_LOCALE, as follows:\n+   - Its arg may be any int or unsigned int; it need not be an unsigned char.\n+   - It's guaranteed to evaluate its argument exactly once.\n+   - It's typically faster.\n+   Posix 1003.2-1992 section 2.5.2.1 page 50 lines 1556-1558 says that\n+   only '0' through '9' are digits.  Prefer ISDIGIT to ISDIGIT_LOCALE unless\n+   it's important to use the locale's definition of `digit' even when the\n+   host does not conform to Posix.  */\n+#define ISDIGIT(c) ((unsigned) (c) - '0' <= 9)\n+\n+\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <errno.h>\n+\n+#ifndef errno\n+extern int errno;\n+#endif\n+\n+#ifdef HAVE_STRING_H\n+# include <string.h>\n+#else\n+# ifdef HAVE_STRINGS_H\n+#  include <strings.h>\n+# endif\n+#endif\n+\n+#ifdef HAVE_STDLIB_H\n+# include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_UNISTD_H\n+# include <unistd.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PARAM_H\n+# include <sys/param.h>\n+#endif\n+\n+#if HAVE_LIMITS_H\n+# include <limits.h>\n+#endif\n+\n+#ifdef TIME_WITH_SYS_TIME\n+# include <sys/time.h>\n+# include <time.h>\n+#else\n+# if HAVE_SYS_TIME_H\n+# include <sys/time.h>\n+# else\n+#  include <time.h>\n+#endif\n+#endif\n+\n+#ifdef HAVE_FCNTL_H\n+# include <fcntl.h>\n+#else\n+# include <sys/file.h>\n+#endif\n+\n+#ifndef SEEK_SET\n+# define SEEK_SET 0\n+# define SEEK_CUR 1\n+# define SEEK_END 2\n+#endif\n+#ifndef F_OK\n+# define F_OK 0\n+# define X_OK 1\n+# define W_OK 2\n+# define R_OK 4\n+#endif\n+\n+\n+\n+#ifndef bcopy\n+# ifdef HAVE_BCOPY\n+#  ifdef NEED_DECLARATION_BCOPY\n+void bcopy ();\n+#  endif\n+# else /* ! HAVE_BCOPY */\n+#  define bcopy(src,dst,len) memcpy ((dst),(src),(len))\n+# endif\n+#endif\n+\n+#ifndef bcmp\n+# ifdef HAVE_BCMP\n+#  ifdef NEED_DECLARATION_BCMP\n+void bcmp ();\n+#  endif\n+# else /* ! HAVE_BCMP */\n+#  define bcmp(left,right,len) memcmp ((left),(right),(len))\n+# endif\n+#endif\n+\n+#ifndef bzero\n+# ifdef HAVE_BZERO\n+#  ifdef NEED_DECLARATION_BZERO\n+void bzero ();\n+#  endif\n+# else /* ! HAVE_BZERO */\n+#  define bzero(dst,len) memset ((dst),0,(len))\n+# endif\n+#endif\n+\n+#ifndef index\n+# ifdef HAVE_INDEX\n+#  ifdef NEED_DECLARATION_INDEX\n+extern char *index ();\n+#  endif\n+# else /* ! HAVE_INDEX */\n+#  define index strchr\n+# endif\n+#endif\n+\n+#ifndef rindex\n+# ifdef HAVE_RINDEX\n+#  ifdef NEED_DECLARATION_RINDEX\n+extern char *rindex ();\n+#  endif\n+# else /* ! HAVE_RINDEX */\n+#  define rindex strrchr\n+# endif\n+#endif\n+\n+#ifdef NEED_DECLARATION_FREE\n+extern void free ();\n+#endif\n+\n+#endif /* __GCC_SYSTEM_H__ */"}]}