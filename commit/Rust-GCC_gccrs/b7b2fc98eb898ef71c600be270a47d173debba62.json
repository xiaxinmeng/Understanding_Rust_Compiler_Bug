{"sha": "b7b2fc98eb898ef71c600be270a47d173debba62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdiMmZjOThlYjg5OGVmNzFjNjAwYmUyNzBhNDdkMTczZGViYmE2Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-30T11:00:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-30T11:00:39Z"}, "message": "(TRUTH_XOR_EXPR): New tree code.\n\nFrom-SVN: r2991", "tree": {"sha": "26b4f46411ca3cce27b0cec524e8f571da02e19a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26b4f46411ca3cce27b0cec524e8f571da02e19a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7b2fc98eb898ef71c600be270a47d173debba62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b2fc98eb898ef71c600be270a47d173debba62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b2fc98eb898ef71c600be270a47d173debba62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b2fc98eb898ef71c600be270a47d173debba62/comments", "author": null, "committer": null, "parents": [{"sha": "79a365a71e7f8614265378acf7b7f7b364834724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a365a71e7f8614265378acf7b7f7b364834724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a365a71e7f8614265378acf7b7f7b364834724"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "7d9709cc35a962a82fb1dfbd262b334f3622df58", "filename": "gcc/tree.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b2fc98eb898ef71c600be270a47d173debba62/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b2fc98eb898ef71c600be270a47d173debba62/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=b7b2fc98eb898ef71c600be270a47d173debba62", "patch": "@@ -514,12 +514,13 @@ DEFTREECODE (BIT_NOT_EXPR, \"bit_not_expr\", \"1\", 1)\n /* Combination of boolean values or of integers considered only\n    as zero or nonzero.  ANDIF and ORIF allow the second operand\n    not to be computed if the value of the expression is determined\n-   from the first operand.  AND and OR always compute the second\n+   from the first operand.  AND, OR, and XOR always compute the second\n    operand whether its value is needed or not (for side effects).  */\n DEFTREECODE (TRUTH_ANDIF_EXPR, \"truth_andif_expr\", \"e\", 2)\n DEFTREECODE (TRUTH_ORIF_EXPR, \"truth_orif_expr\", \"e\", 2)\n DEFTREECODE (TRUTH_AND_EXPR, \"truth_and_expr\", \"2\", 2)\n DEFTREECODE (TRUTH_OR_EXPR, \"truth_or_expr\", \"2\", 2)\n+DEFTREECODE (TRUTH_XOR_EXPR, \"truth_xor_expr\", \"2\", 2)\n DEFTREECODE (TRUTH_NOT_EXPR, \"truth_not_expr\", \"e\", 1)\n \n /* Relational operators."}]}