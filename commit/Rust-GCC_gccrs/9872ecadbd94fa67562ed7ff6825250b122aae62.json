{"sha": "9872ecadbd94fa67562ed7ff6825250b122aae62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3MmVjYWRiZDk0ZmE2NzU2MmVkN2ZmNjgyNTI1MGIxMjJhYWU2Mg==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-04-24T18:18:56Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-04-24T18:18:56Z"}, "message": "headers.txt (gnu/gcj/jvmti/Breakpoint.h): Add _Jv_RewriteBreakpointInsn friend declaration.\n\n        * headers.txt (gnu/gcj/jvmti/Breakpoint.h)[DIRECT_THREADED]:\n        Add _Jv_RewriteBreakpointInsn friend declaration.\n        * gnu/gcj/jvmti/natBreakpoint.cc (_Jv_RewriteBreakpointInsn)\n        [DIRECT_THREADED]: New function.\n        * gnu/gcj/jvmti/Breakpoint.h: Regenerate.\n        * interpret-run.cc: Define new REWRITE_INSN macro.\n        Changed all occurrences of insn rewriting to call REWRITE_INSN.\n\nFrom-SVN: r124111", "tree": {"sha": "abee94b0b7a0cb00f3aa1d59f96ec58c46c6bd9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abee94b0b7a0cb00f3aa1d59f96ec58c46c6bd9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9872ecadbd94fa67562ed7ff6825250b122aae62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9872ecadbd94fa67562ed7ff6825250b122aae62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9872ecadbd94fa67562ed7ff6825250b122aae62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9872ecadbd94fa67562ed7ff6825250b122aae62/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "676b23ba25b9f21507847fe1f7a90266aaa2e81f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676b23ba25b9f21507847fe1f7a90266aaa2e81f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676b23ba25b9f21507847fe1f7a90266aaa2e81f"}], "stats": {"total": 110, "additions": 86, "deletions": 24}, "files": [{"sha": "0c294216537690c6d2ed179cb5f4675434aca6d0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9872ecadbd94fa67562ed7ff6825250b122aae62/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9872ecadbd94fa67562ed7ff6825250b122aae62/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9872ecadbd94fa67562ed7ff6825250b122aae62", "patch": "@@ -1,3 +1,22 @@\n+2007-04-24  Keith Seitz  <keiths@redhat.com>\n+\n+\t* headers.txt (gnu/gcj/jvmti/Breakpoint.h)[DIRECT_THREADED]:\n+\tAdd _Jv_RewriteBreakpointInsn friend declaration.\n+\t* gnu/gcj/jvmti/natBreakpoint.cc (_Jv_RewriteBreakpointInsn)\n+\t[DIRECT_THREADED]: New function.\n+\t* gnu/gcj/jvmti/Breakpoint.h: Regenerate.\n+\t* interpret-run.cc: Define new REWRITE_INSN macro.\n+\tChanged all occurrences of insn rewriting to call REWRITE_INSN.\n+\n+2007-04-23  Keith Seitz  <keiths@redhat.com>\n+\n+\t* include/no-gc.h (_Jv_IsThreadSuspended): Declare.\n+\t* include/boehm-gc.h (_Jv_IsThreadSuspended): Likewise.\n+\t* boehm.cc (_Jv_IsThreadSuspended): New function.\n+\t* nogc.cc (_Jv_IsThreadSuspended): Likewise.\n+\t* jvmti.cc (_Jv_JVMTI_GetThreadState): New function.\n+\t(_Jv_JVMTI_Interface): Define GetThreadState.\n+\n 2007-04-23  Kyle Galloway  <kgallowa@redhat.com>\n \n \t* include/java-interp.h (_Jv_InterpFrame): Add pointer to the"}, {"sha": "b522c77b15da3e0605813d9800113e47a43e9562", "filename": "libjava/gnu/gcj/jvmti/Breakpoint.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9872ecadbd94fa67562ed7ff6825250b122aae62/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9872ecadbd94fa67562ed7ff6825250b122aae62/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.h?ref=9872ecadbd94fa67562ed7ff6825250b122aae62", "patch": "@@ -22,9 +22,17 @@ extern \"Java\"\n   }\n }\n \n+#ifdef DIRECT_THREADED\n+void _Jv_RewriteBreakpointInsn (jmethodID, jlocation, pc_t);\n+#endif\n+\n class gnu::gcj::jvmti::Breakpoint : public ::java::lang::Object\n {\n \n+#ifdef DIRECT_THREADED\n+friend void (::_Jv_RewriteBreakpointInsn (jmethodID, jlocation, pc_t));\n+#endif\n+\n public:\n   Breakpoint(jlong, jlong);\n private:"}, {"sha": "5dbd3f834ddc92cf5c1612295dee22e62336f0e8", "filename": "libjava/gnu/gcj/jvmti/natBreakpoint.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9872ecadbd94fa67562ed7ff6825250b122aae62/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatBreakpoint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9872ecadbd94fa67562ed7ff6825250b122aae62/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatBreakpoint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatBreakpoint.cc?ref=9872ecadbd94fa67562ed7ff6825250b122aae62", "patch": "@@ -17,6 +17,7 @@ details.  */\n #include <jvmti.h>\n \n #include <gnu/gcj/jvmti/Breakpoint.h>\n+#include <gnu/gcj/jvmti/BreakpointManager.h>\n \n static _Jv_InterpMethod *\n get_interp_method (jlong method)\n@@ -54,3 +55,18 @@ gnu::gcj::jvmti::Breakpoint::remove ()\n   _Jv_InterpMethod *imeth = get_interp_method (method);\n   imeth->set_insn (location, reinterpret_cast<pc_t> (data));\n }\n+\n+#ifdef DIRECT_THREADED\n+void\n+_Jv_RewriteBreakpointInsn (jmethodID mid, jlocation loc, pc_t new_insn)\n+{\n+  using namespace ::gnu::gcj::jvmti;\n+  Breakpoint *bp\n+    = BreakpointManager::getBreakpoint (reinterpret_cast<jlong> (mid), loc);\n+  if (bp != NULL)\n+    {\n+      pc_t old_insn = (pc_t) bp->data;\n+      old_insn->insn = new_insn;\n+    }\n+}\n+#endif // DIRECT_THREADED"}, {"sha": "aad3fdd60c190ec1bbc7c875ea6168bddcfe73db", "filename": "libjava/headers.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9872ecadbd94fa67562ed7ff6825250b122aae62/libjava%2Fheaders.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9872ecadbd94fa67562ed7ff6825250b122aae62/libjava%2Fheaders.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fheaders.txt?ref=9872ecadbd94fa67562ed7ff6825250b122aae62", "patch": "@@ -63,5 +63,13 @@ friend class java::lang::Class;\n friend class java::io::ObjectInputStream;\n friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n \n+class gnu/gcj/jvmti/Breakpoint\n+prepend #ifdef DIRECT_THREADED\n+prepend void _Jv_RewriteBreakpointInsn (jmethodID, jlocation, pc_t);\n+prepend #endif\n+add #ifdef DIRECT_THREADED\n+add friend void (::_Jv_RewriteBreakpointInsn (jmethodID, jlocation, pc_t));\n+add #endif\n+\n class gnu/gcj/runtime/ExtensionClassLoader\n friend class ::java::lang::ClassLoader;"}, {"sha": "f99ff5c706f7dfb09a8bb8c31d8d70822e16a15a", "filename": "libjava/interpret-run.cc", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9872ecadbd94fa67562ed7ff6825250b122aae62/libjava%2Finterpret-run.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9872ecadbd94fa67562ed7ff6825250b122aae62/libjava%2Finterpret-run.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret-run.cc?ref=9872ecadbd94fa67562ed7ff6825250b122aae62", "patch": "@@ -359,9 +359,32 @@ details.  */\n       goto *((pc++)->insn);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n+\n+#undef REWRITE_INSN\n+#define REWRITE_INSN(INSN,SLOT,VALUE)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (pc[-2].insn == breakpoint_insn->insn)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tusing namespace ::gnu::gcj::jvmti;\t\t\t\t\\\n+\tjlocation location = meth->insn_index (pc - 2);\t\t\t\\\n+\t_Jv_RewriteBreakpointInsn (meth->self, location, (pc_t) INSN);\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      pc[-2].insn = INSN;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    pc[-1].SLOT = VALUE;\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n #else\n #undef NEXT_INSN\n #define NEXT_INSN goto *((pc++)->insn)\n+#define REWRITE_INSN(INSN,SLOT,VALUE)\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    pc[-2].insn = INSN;\t\t\t\t\\\n+    pc[-1].SLOT = VALUE;\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+  while (0)\n #endif\n \n #define INTVAL() ((pc++)->int_val)\n@@ -511,8 +534,7 @@ details.  */\n #ifdef DIRECT_THREADED\n \t// Rewrite instruction so that we use a faster pre-resolved\n \t// method.\n-\tpc[-2].insn = &&invokevirtual_resolved;\n-\tpc[-1].datum = rmeth;\n+\tREWRITE_INSN (&&invokevirtual_resolved, datum, rmeth);\n #endif /* DIRECT_THREADED */\n       }\n       goto perform_invoke;\n@@ -1846,8 +1868,7 @@ details.  */\n \t  }\n \n #ifdef DIRECT_THREADED\n-\tpc[-2].insn = newinsn;\n-\tpc[-1].datum = field->u.addr;\n+\tREWRITE_INSN (newinsn, datum, field->u.addr);\n #endif /* DIRECT_THREADED */\n       }\n       NEXT_INSN;\n@@ -1937,8 +1958,7 @@ details.  */\n \t  }\n \n #ifdef DIRECT_THREADED\n-\tpc[-2].insn = newinsn;\n-\tpc[-1].int_val = field_offset;\n+\tREWRITE_INSN (newinsn, int_val, field_offset);\n #endif /* DIRECT_THREADED */\n       }\n       NEXT_INSN;\n@@ -2053,8 +2073,7 @@ details.  */\n \t  }\n \n #ifdef DIRECT_THREADED\n-\tpc[-2].insn = newinsn;\n-\tpc[-1].datum = field->u.addr;\n+\tREWRITE_INSN (newinsn, datum, field->u.addr);\n #endif /* DIRECT_THREADED */\n       }\n       NEXT_INSN;\n@@ -2152,8 +2171,7 @@ details.  */\n \t  }\n \n #ifdef DIRECT_THREADED\n-\tpc[-2].insn = newinsn;\n-\tpc[-1].int_val = field_offset;\n+\tREWRITE_INSN (newinsn, int_val, field_offset);\n #endif /* DIRECT_THREADED */\n       }\n       NEXT_INSN;\n@@ -2228,8 +2246,7 @@ details.  */\n #ifdef DIRECT_THREADED\n \t// Rewrite instruction so that we use a faster pre-resolved\n \t// method.\n-\tpc[-2].insn = &&invokespecial_resolved;\n-\tpc[-1].datum = rmeth;\n+\tREWRITE_INSN (&&invokespecial_resolved, datum, rmeth);\n #endif /* DIRECT_THREADED */\n       }\n       goto perform_invoke;\n@@ -2266,8 +2283,7 @@ details.  */\n #ifdef DIRECT_THREADED\n \t// Rewrite instruction so that we use a faster pre-resolved\n \t// method.\n-\tpc[-2].insn = &&invokestatic_resolved;\n-\tpc[-1].datum = rmeth;\n+\tREWRITE_INSN (&&invokestatic_resolved, datum, rmeth);\n #endif /* DIRECT_THREADED */\n       }\n       goto perform_invoke;\n@@ -2305,8 +2321,7 @@ details.  */\n #ifdef DIRECT_THREADED\n \t// Rewrite instruction so that we use a faster pre-resolved\n \t// method.\n-\tpc[-2].insn = &&invokeinterface_resolved;\n-\tpc[-1].datum = rmeth;\n+\tREWRITE_INSN (&&invokeinterface_resolved, datum, rmeth);\n #else\n \t// Skip dummy bytes.\n \tpc += 2;\n@@ -2344,8 +2359,7 @@ details.  */\n \tPUSHA (res);\n \n #ifdef DIRECT_THREADED\n-\tpc[-2].insn = &&new_resolved;\n-\tpc[-1].datum = klass;\n+\tREWRITE_INSN (&&new_resolved, datum, klass);\n #endif /* DIRECT_THREADED */\n       }\n       NEXT_INSN;\n@@ -2380,8 +2394,7 @@ details.  */\n \tPUSHA (result);\n \n #ifdef DIRECT_THREADED\n-\tpc[-2].insn = &&anewarray_resolved;\n-\tpc[-1].datum = klass;\n+\tREWRITE_INSN (&&anewarray_resolved, datum, klass);\n #endif /* DIRECT_THREADED */\n       }\n       NEXT_INSN;\n@@ -2425,8 +2438,7 @@ details.  */\n \tPUSHA (value);\n \n #ifdef DIRECT_THREADED\n-\tpc[-2].insn = &&checkcast_resolved;\n-\tpc[-1].datum = to;\n+\tREWRITE_INSN (&&checkcast_resolved, datum, to);\n #endif /* DIRECT_THREADED */\n       }\n       NEXT_INSN;\n@@ -2453,8 +2465,7 @@ details.  */\n \tPUSHI (to->isInstance (value));\n \n #ifdef DIRECT_THREADED\n-\tpc[-2].insn = &&instanceof_resolved;\n-\tpc[-1].datum = to;\n+\tREWRITE_INSN (&&instanceof_resolved, datum, to);\n #endif /* DIRECT_THREADED */\n       }\n       NEXT_INSN;"}]}