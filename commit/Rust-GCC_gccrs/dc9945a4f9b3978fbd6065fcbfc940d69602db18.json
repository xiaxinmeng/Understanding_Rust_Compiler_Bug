{"sha": "dc9945a4f9b3978fbd6065fcbfc940d69602db18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM5OTQ1YTRmOWIzOTc4ZmJkNjA2NWZjYmZjOTQwZDY5NjAyZGIxOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-11-21T18:18:28Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-21T18:18:28Z"}, "message": "mmx.md (unspec): Move from config/i386/i386.md (unspecv) <UNSPECV_EMMS, UNSPECV_FEMMS>: Ditto.\n\n\t* config/i386/mmx.md (unspec) <UNSPEC_MOVNTQ, UNSPEC_PFRCP,\n\tUNSPEC_PFRCPIT1, UNSPEC_PFRCPIT2, UNSPEC_PFRSQRT, UNSPEC_PFRSQIT1>:\n\tMove from config/i386/i386.md\n\t(unspecv) <UNSPECV_EMMS, UNSPECV_FEMMS>: Ditto.\n\t* config/i386/sse.md (unspec) <UNSPEC_MOVNT,UNSPEC_MOVU, UNSPEC_LDDQU,\n\tUNSPEC_PSHUFB, UNSPEC_PSIGN, UNSPEC_PALIGNR, UNSPEC_EXTRQI,\n\tUNSPEC_EXTRQ, UNSPEC_INSERTQI, UNSPEC_INSERTQ, UNSPEC_BLENDV,\n\tUNSPEC_INSERTPS, UNSPEC_DP, UNSPEC_MOVNTDQA, UNSPEC_MPSADBW,\n\tUNSPEC_PHMINPOSUW, UNSPEC_PTEST, UNSPEC_PCMPESTR, UNSPEC_PCMPISTR,\n\tUNSPEC_FMADDSUB, UNSPEC_XOP_UNSIGNED_CMP, UNSPEC_XOP_TRUEFALSE,\n\tUNSPEC_XOP_PERMUTE, UNSPEC_FRCZ, UNSPEC_AESENC, UNSPEC_AESENCLAST,\n\tUNSPEC_AESDEC, UNSPEC_AESDECLAST, UNSPEC_AESIMC,\n\tUNSPEC_AESKEYGENASSIST, UNSPEC_PCLMUL, UNSPEC_PCMP, UNSPEC_VPERMIL,\n\tUNSPEC_VPERMIL2, UNSPEC_VPERMIL2F128, UNSPEC_CAST, UNSPEC_VTESTP,\n\tUNSPEC_VCVTPH2PS, UNSPEC_VCVTPS2PH, UNSPEC_VPERMSI, UNSPEC_VPERMDF,\n\tUNSPEC_VPERMSF, UNSPEC_VPERMTI, UNSPEC_GATHER, UNSPEC_VSIBADDR>: Ditto.\n\t(unspecv) <UNSPECV_LDMXCSR, UNSPECV_STMXCSR, UNSPECV_CLFLUSH,\n\tUNSPECV_MONITOR, UNSPECV_MWAIT, UNSPECV_VZEROALL, UNSPECV_VZEROUPPER>:\n\tDitto.\n\t* config/i386/sync.md (unspec) <UNSPEC_LFENCE, UNSPEC_SFENCE,\n\tUNSPEC_MFENCE, UNSPEC_MOVA>: Ditto.\n\t(unspecv) <UNSPECV_CMPXCHG_1, UNSPECV_CMPXCHG_2, UNSPECV_CMPXCHG_3,\n\tUNSPECV_CMPXCHG_4, UNSPECV_XCHG, UNSPECV_LOCK>: Ditto.\n\t(sse2_lfence): Move from config/i386/sse.md.\n\t(*sse2_lfence): Ditto.\n\t(sse_sfence): Ditto.\n\t(*sse_sfence): Ditto.\n\t(sse2_mfence): Ditto.\n\t(mfence_sse2): Ditto.  Rename from *sse2_mfence.  Enable also\n\tfor TARGET_64BIT.\n\t(mem_thread_fence): Use mfence_sse2.\n\nFrom-SVN: r181590", "tree": {"sha": "e9b14ff251aa0703b65c6e7abca73fa7c84b6ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9b14ff251aa0703b65c6e7abca73fa7c84b6ce4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc9945a4f9b3978fbd6065fcbfc940d69602db18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9945a4f9b3978fbd6065fcbfc940d69602db18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9945a4f9b3978fbd6065fcbfc940d69602db18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9945a4f9b3978fbd6065fcbfc940d69602db18/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "adcd36bc3fb6d707477683284024d11c179a4822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcd36bc3fb6d707477683284024d11c179a4822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adcd36bc3fb6d707477683284024d11c179a4822"}], "stats": {"total": 394, "additions": 227, "deletions": 167}, "files": [{"sha": "8966e42a170ab7489d91ff9e61f21962c2154ff3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9945a4f9b3978fbd6065fcbfc940d69602db18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9945a4f9b3978fbd6065fcbfc940d69602db18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc9945a4f9b3978fbd6065fcbfc940d69602db18", "patch": "@@ -1,3 +1,37 @@\n+2011-11-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/mmx.md (unspec) <UNSPEC_MOVNTQ, UNSPEC_PFRCP,\n+\tUNSPEC_PFRCPIT1, UNSPEC_PFRCPIT2, UNSPEC_PFRSQRT, UNSPEC_PFRSQIT1>:\n+\tMove from config/i386/i386.md\n+\t(unspecv) <UNSPECV_EMMS, UNSPECV_FEMMS>: Ditto.\n+\t* config/i386/sse.md (unspec) <UNSPEC_MOVNT,UNSPEC_MOVU, UNSPEC_LDDQU,\n+\tUNSPEC_PSHUFB, UNSPEC_PSIGN, UNSPEC_PALIGNR, UNSPEC_EXTRQI,\n+\tUNSPEC_EXTRQ, UNSPEC_INSERTQI, UNSPEC_INSERTQ, UNSPEC_BLENDV,\n+\tUNSPEC_INSERTPS, UNSPEC_DP, UNSPEC_MOVNTDQA, UNSPEC_MPSADBW,\n+\tUNSPEC_PHMINPOSUW, UNSPEC_PTEST, UNSPEC_PCMPESTR, UNSPEC_PCMPISTR,\n+\tUNSPEC_FMADDSUB, UNSPEC_XOP_UNSIGNED_CMP, UNSPEC_XOP_TRUEFALSE,\n+\tUNSPEC_XOP_PERMUTE, UNSPEC_FRCZ, UNSPEC_AESENC, UNSPEC_AESENCLAST,\n+\tUNSPEC_AESDEC, UNSPEC_AESDECLAST, UNSPEC_AESIMC,\n+\tUNSPEC_AESKEYGENASSIST, UNSPEC_PCLMUL, UNSPEC_PCMP, UNSPEC_VPERMIL,\n+\tUNSPEC_VPERMIL2, UNSPEC_VPERMIL2F128, UNSPEC_CAST, UNSPEC_VTESTP,\n+\tUNSPEC_VCVTPH2PS, UNSPEC_VCVTPS2PH, UNSPEC_VPERMSI, UNSPEC_VPERMDF,\n+\tUNSPEC_VPERMSF, UNSPEC_VPERMTI, UNSPEC_GATHER, UNSPEC_VSIBADDR>: Ditto.\n+\t(unspecv) <UNSPECV_LDMXCSR, UNSPECV_STMXCSR, UNSPECV_CLFLUSH,\n+\tUNSPECV_MONITOR, UNSPECV_MWAIT, UNSPECV_VZEROALL, UNSPECV_VZEROUPPER>:\n+\tDitto.\n+\t* config/i386/sync.md (unspec) <UNSPEC_LFENCE, UNSPEC_SFENCE,\n+\tUNSPEC_MFENCE, UNSPEC_MOVA>: Ditto.\n+\t(unspecv) <UNSPECV_CMPXCHG_1, UNSPECV_CMPXCHG_2, UNSPECV_CMPXCHG_3,\n+\tUNSPECV_CMPXCHG_4, UNSPECV_XCHG, UNSPECV_LOCK>: Ditto.\n+\t(sse2_lfence): Move from config/i386/sse.md.\n+\t(*sse2_lfence): Ditto.\n+\t(sse_sfence): Ditto.\n+\t(*sse_sfence): Ditto.\n+\t(sse2_mfence): Ditto.\n+\t(mfence_sse2): Ditto.  Rename from *sse2_mfence.  Enable also\n+\tfor TARGET_64BIT.\n+\t(mem_thread_fence): Use mfence_sse2.\n+\n 2011-11-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.h (struct base_arch_s): Add field sfr_offset."}, {"sha": "fa306ba79d849371821b60ac338367da81096631", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 95, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9945a4f9b3978fbd6065fcbfc940d69602db18/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9945a4f9b3978fbd6065fcbfc940d69602db18/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=dc9945a4f9b3978fbd6065fcbfc940d69602db18", "patch": "@@ -62,8 +62,6 @@\n ;; ; -- print a semicolon (after prefixes due to bug in older gas).\n ;; @ -- print a segment register of thread base pointer load\n \n-;; UNSPEC usage:\n-\n (define_c_enum \"unspec\" [\n   ;; Relocation specifiers\n   UNSPEC_GOT\n@@ -108,29 +106,17 @@\n   UNSPEC_LD_MPIC\t; load_macho_picbase\n   UNSPEC_TRUNC_NOOP\n   UNSPEC_DIV_ALREADY_SPLIT\n+  UNSPEC_MS_TO_SYSV_CALL\n   UNSPEC_CALL_NEEDS_VZEROUPPER\n   UNSPEC_PAUSE\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n   UNSPEC_MASKMOV\n   UNSPEC_MOVMSK\n-  UNSPEC_MOVNTQ\n-  UNSPEC_MOVNT\n-  UNSPEC_MOVU\n   UNSPEC_RCP\n   UNSPEC_RSQRT\n-  UNSPEC_SFENCE\n-  UNSPEC_PFRCP\n-  UNSPEC_PFRCPIT1\n-  UNSPEC_PFRCPIT2\n-  UNSPEC_PFRSQRT\n-  UNSPEC_PFRSQIT1\n-  UNSPEC_MFENCE\n-  UNSPEC_LFENCE\n   UNSPEC_PSADBW\n-  UNSPEC_LDDQU\n-  UNSPEC_MS_TO_SYSV_CALL\n \n   ;; Generic math support\n   UNSPEC_COPYSIGN\n@@ -178,105 +164,32 @@\n   UNSPEC_SP_TLS_SET\n   UNSPEC_SP_TLS_TEST\n \n-  ;; SSSE3\n-  UNSPEC_PSHUFB\n-  UNSPEC_PSIGN\n-  UNSPEC_PALIGNR\n-\n-  ;; For SSE4A support\n-  UNSPEC_EXTRQI\n-  UNSPEC_EXTRQ\n-  UNSPEC_INSERTQI\n-  UNSPEC_INSERTQ\n-\n-  ;; For SSE4.1 support\n-  UNSPEC_BLENDV\n-  UNSPEC_INSERTPS\n-  UNSPEC_DP\n-  UNSPEC_MOVNTDQA\n-  UNSPEC_MPSADBW\n-  UNSPEC_PHMINPOSUW\n-  UNSPEC_PTEST\n+  ;; For ROUND support\n   UNSPEC_ROUND\n \n-  ;; For SSE4.2 support\n+  ;; For CRC32 support\n   UNSPEC_CRC32\n-  UNSPEC_PCMPESTR\n-  UNSPEC_PCMPISTR\n-\n-  ;; For FMA4 support\n-  UNSPEC_FMADDSUB\n-  UNSPEC_XOP_UNSIGNED_CMP\n-  UNSPEC_XOP_TRUEFALSE\n-  UNSPEC_XOP_PERMUTE\n-  UNSPEC_FRCZ\n-\n-  ;; For AES support\n-  UNSPEC_AESENC\n-  UNSPEC_AESENCLAST\n-  UNSPEC_AESDEC\n-  UNSPEC_AESDECLAST\n-  UNSPEC_AESIMC\n-  UNSPEC_AESKEYGENASSIST\n-\n-  ;; For PCLMUL support\n-  UNSPEC_PCLMUL\n-\n-  ;; For AVX support\n-  UNSPEC_PCMP\n-  UNSPEC_VPERMIL\n-  UNSPEC_VPERMIL2\n-  UNSPEC_VPERMIL2F128\n-  UNSPEC_CAST\n-  UNSPEC_VTESTP\n-  UNSPEC_VCVTPH2PS\n-  UNSPEC_VCVTPS2PH\n-\n-  ;; For AVX2 support\n-  UNSPEC_VPERMSI\n-  UNSPEC_VPERMDF\n-  UNSPEC_VPERMSF\n-  UNSPEC_VPERMTI\n-  UNSPEC_GATHER\n-  UNSPEC_VSIBADDR\n-\n-  ;; For BMI support\n-  UNSPEC_BEXTR\n \n   ;; For RDRAND support\n   UNSPEC_RDRAND\n \n+  ;; For BMI support\n+  UNSPEC_BEXTR\n+\n   ;; For BMI2 support\n   UNSPEC_PDEP\n   UNSPEC_PEXT\n-\n-  ;; For __atomic support\n-  UNSPEC_MOVA\n ])\n \n (define_c_enum \"unspecv\" [\n   UNSPECV_BLOCKAGE\n   UNSPECV_STACK_PROBE\n   UNSPECV_PROBE_STACK_RANGE\n-  UNSPECV_EMMS\n-  UNSPECV_LDMXCSR\n-  UNSPECV_STMXCSR\n-  UNSPECV_FEMMS\n-  UNSPECV_CLFLUSH\n   UNSPECV_ALIGN\n-  UNSPECV_MONITOR\n-  UNSPECV_MWAIT\n-  UNSPECV_CMPXCHG_1\n-  UNSPECV_CMPXCHG_2\n-  UNSPECV_CMPXCHG_3\n-  UNSPECV_CMPXCHG_4\n-  UNSPECV_XCHG\n-  UNSPECV_LOCK\n   UNSPECV_PROLOGUE_USE\n+  UNSPECV_SPLIT_STACK_RETURN\n   UNSPECV_CLD\n   UNSPECV_NOPS\n-  UNSPECV_VZEROALL\n-  UNSPECV_VZEROUPPER\n   UNSPECV_RDTSC\n   UNSPECV_RDTSCP\n   UNSPECV_RDPMC\n@@ -288,7 +201,6 @@\n   UNSPECV_RDGSBASE\n   UNSPECV_WRFSBASE\n   UNSPECV_WRGSBASE\n-  UNSPECV_SPLIT_STACK_RETURN\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction"}, {"sha": "e859b9f1bedce6ff09f4bed7f04d680fc00e0870", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9945a4f9b3978fbd6065fcbfc940d69602db18/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9945a4f9b3978fbd6065fcbfc940d69602db18/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=dc9945a4f9b3978fbd6065fcbfc940d69602db18", "patch": "@@ -30,6 +30,20 @@\n ;; means that we should never use any of these patterns except at the\n ;; direction of the user via a builtin.\n \n+(define_c_enum \"unspec\" [\n+  UNSPEC_MOVNTQ\n+  UNSPEC_PFRCP\n+  UNSPEC_PFRCPIT1\n+  UNSPEC_PFRCPIT2\n+  UNSPEC_PFRSQRT\n+  UNSPEC_PFRSQIT1\n+])\n+\n+(define_c_enum \"unspecv\" [\n+  UNSPECV_EMMS\n+  UNSPECV_FEMMS\n+])\n+\n ;; 8 byte integral modes handled by MMX (and by extension, SSE)\n (define_mode_iterator MMXMODEI [V8QI V4HI V2SI])\n (define_mode_iterator MMXMODEI8 [V8QI V4HI V2SI V1DI])"}, {"sha": "97fc333c253d2f08891baaa8d2ede5ea808a2533", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 79, "deletions": 56, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9945a4f9b3978fbd6065fcbfc940d69602db18/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9945a4f9b3978fbd6065fcbfc940d69602db18/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=dc9945a4f9b3978fbd6065fcbfc940d69602db18", "patch": "@@ -18,6 +18,85 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n+(define_c_enum \"unspec\" [\n+  ;; SSE\n+  UNSPEC_MOVNT\n+  UNSPEC_MOVU\n+\n+  ;; SSE3\n+  UNSPEC_LDDQU\n+\n+  ;; SSSE3\n+  UNSPEC_PSHUFB\n+  UNSPEC_PSIGN\n+  UNSPEC_PALIGNR\n+\n+  ;; For SSE4A support\n+  UNSPEC_EXTRQI\n+  UNSPEC_EXTRQ\n+  UNSPEC_INSERTQI\n+  UNSPEC_INSERTQ\n+\n+  ;; For SSE4.1 support\n+  UNSPEC_BLENDV\n+  UNSPEC_INSERTPS\n+  UNSPEC_DP\n+  UNSPEC_MOVNTDQA\n+  UNSPEC_MPSADBW\n+  UNSPEC_PHMINPOSUW\n+  UNSPEC_PTEST\n+\n+  ;; For SSE4.2 support\n+  UNSPEC_PCMPESTR\n+  UNSPEC_PCMPISTR\n+\n+  ;; For FMA4 support\n+  UNSPEC_FMADDSUB\n+  UNSPEC_XOP_UNSIGNED_CMP\n+  UNSPEC_XOP_TRUEFALSE\n+  UNSPEC_XOP_PERMUTE\n+  UNSPEC_FRCZ\n+\n+  ;; For AES support\n+  UNSPEC_AESENC\n+  UNSPEC_AESENCLAST\n+  UNSPEC_AESDEC\n+  UNSPEC_AESDECLAST\n+  UNSPEC_AESIMC\n+  UNSPEC_AESKEYGENASSIST\n+\n+  ;; For PCLMUL support\n+  UNSPEC_PCLMUL\n+\n+  ;; For AVX support\n+  UNSPEC_PCMP\n+  UNSPEC_VPERMIL\n+  UNSPEC_VPERMIL2\n+  UNSPEC_VPERMIL2F128\n+  UNSPEC_CAST\n+  UNSPEC_VTESTP\n+  UNSPEC_VCVTPH2PS\n+  UNSPEC_VCVTPS2PH\n+\n+  ;; For AVX2 support\n+  UNSPEC_VPERMSI\n+  UNSPEC_VPERMDF\n+  UNSPEC_VPERMSF\n+  UNSPEC_VPERMTI\n+  UNSPEC_GATHER\n+  UNSPEC_VSIBADDR\n+])\n+\n+(define_c_enum \"unspecv\" [\n+  UNSPECV_LDMXCSR\n+  UNSPECV_STMXCSR\n+  UNSPECV_CLFLUSH\n+  UNSPECV_MONITOR\n+  UNSPECV_MWAIT\n+  UNSPECV_VZEROALL\n+  UNSPECV_VZEROUPPER\n+])\n+\n ;; All vector modes including V?TImode, used in move patterns.\n (define_mode_iterator V16\n   [(V32QI \"TARGET_AVX\") V16QI\n@@ -8041,25 +8120,6 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"memory\" \"store\")])\n \n-(define_expand \"sse_sfence\"\n-  [(set (match_dup 0)\n-\t(unspec:BLK [(match_dup 0)] UNSPEC_SFENCE))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-{\n-  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n-  MEM_VOLATILE_P (operands[0]) = 1;\n-})\n-\n-(define_insn \"*sse_sfence\"\n-  [(set (match_operand:BLK 0 \"\" \"\")\n-\t(unspec:BLK [(match_dup 0)] UNSPEC_SFENCE))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"sfence\"\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"length_address\" \"0\")\n-   (set_attr \"atom_sse_attr\" \"fence\")\n-   (set_attr \"memory\" \"unknown\")])\n-\n (define_insn \"sse2_clflush\"\n   [(unspec_volatile [(match_operand 0 \"address_operand\" \"p\")]\n \t\t    UNSPECV_CLFLUSH)]\n@@ -8069,43 +8129,6 @@\n    (set_attr \"atom_sse_attr\" \"fence\")\n    (set_attr \"memory\" \"unknown\")])\n \n-(define_expand \"sse2_mfence\"\n-  [(set (match_dup 0)\n-\t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))]\n-  \"TARGET_SSE2\"\n-{\n-  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n-  MEM_VOLATILE_P (operands[0]) = 1;\n-})\n-\n-(define_insn \"*sse2_mfence\"\n-  [(set (match_operand:BLK 0 \"\" \"\")\n-\t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))]\n-  \"TARGET_64BIT || TARGET_SSE2\"\n-  \"mfence\"\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"length_address\" \"0\")\n-   (set_attr \"atom_sse_attr\" \"fence\")\n-   (set_attr \"memory\" \"unknown\")])\n-\n-(define_expand \"sse2_lfence\"\n-  [(set (match_dup 0)\n-\t(unspec:BLK [(match_dup 0)] UNSPEC_LFENCE))]\n-  \"TARGET_SSE2\"\n-{\n-  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n-  MEM_VOLATILE_P (operands[0]) = 1;\n-})\n-\n-(define_insn \"*sse2_lfence\"\n-  [(set (match_operand:BLK 0 \"\" \"\")\n-\t(unspec:BLK [(match_dup 0)] UNSPEC_LFENCE))]\n-  \"TARGET_SSE2\"\n-  \"lfence\"\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"length_address\" \"0\")\n-   (set_attr \"atom_sse_attr\" \"lfence\")\n-   (set_attr \"memory\" \"unknown\")])\n \n (define_insn \"sse3_mwait\"\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"a\")"}, {"sha": "542d3b878822decebfc99c3119c9e9b4b4c87f0e", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 93, "deletions": 16, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9945a4f9b3978fbd6065fcbfc940d69602db18/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9945a4f9b3978fbd6065fcbfc940d69602db18/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=dc9945a4f9b3978fbd6065fcbfc940d69602db18", "patch": "@@ -18,26 +18,79 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_expand \"mem_thread_fence\"\n-  [(match_operand:SI 0 \"const_int_operand\" \"\")]\t\t;; model\n-  \"\"\n+(define_c_enum \"unspec\" [\n+  UNSPEC_LFENCE\n+  UNSPEC_SFENCE\n+  UNSPEC_MFENCE\n+  UNSPEC_MOVA\t; For __atomic support\n+])\n+\n+(define_c_enum \"unspecv\" [\n+  UNSPECV_CMPXCHG_1\n+  UNSPECV_CMPXCHG_2\n+  UNSPECV_CMPXCHG_3\n+  UNSPECV_CMPXCHG_4\n+  UNSPECV_XCHG\n+  UNSPECV_LOCK\n+])\n+\n+(define_expand \"sse2_lfence\"\n+  [(set (match_dup 0)\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_LFENCE))]\n+  \"TARGET_SSE2\"\n {\n-  /* Unless this is a SEQ_CST fence, the i386 memory model is strong\n-     enough not to require barriers of any kind.  */\n-  if (INTVAL (operands[0]) != MEMMODEL_SEQ_CST)\n-    DONE;\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n \n-  if (TARGET_64BIT || TARGET_SSE2)\n-    emit_insn (gen_sse2_mfence ());\n-  else\n-    {\n-      rtx mem = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n-      MEM_VOLATILE_P (mem) = 1;\n-      emit_insn (gen_mfence_nosse (mem));\n-    }\n-  DONE;\n+(define_insn \"*sse2_lfence\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_LFENCE))]\n+  \"TARGET_SSE2\"\n+  \"lfence\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"length_address\" \"0\")\n+   (set_attr \"atom_sse_attr\" \"lfence\")\n+   (set_attr \"memory\" \"unknown\")])\n+\n+(define_expand \"sse_sfence\"\n+  [(set (match_dup 0)\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_SFENCE))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n })\n \n+(define_insn \"*sse_sfence\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_SFENCE))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"sfence\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"length_address\" \"0\")\n+   (set_attr \"atom_sse_attr\" \"fence\")\n+   (set_attr \"memory\" \"unknown\")])\n+\n+(define_expand \"sse2_mfence\"\n+  [(set (match_dup 0)\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))]\n+  \"TARGET_SSE2\"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n+\n+(define_insn \"mfence_sse2\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))]\n+  \"TARGET_64BIT || TARGET_SSE2\"\n+  \"mfence\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"length_address\" \"0\")\n+   (set_attr \"atom_sse_attr\" \"fence\")\n+   (set_attr \"memory\" \"unknown\")])\n+\n (define_insn \"mfence_nosse\"\n   [(set (match_operand:BLK 0 \"\" \"\")\n \t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))\n@@ -46,6 +99,30 @@\n   \"lock{%;} or{l}\\t{$0, (%%esp)|DWORD PTR [esp], 0}\"\n   [(set_attr \"memory\" \"unknown\")])\n \n+(define_expand \"mem_thread_fence\"\n+  [(match_operand:SI 0 \"const_int_operand\" \"\")]\t\t;; model\n+  \"\"\n+{\n+  /* Unless this is a SEQ_CST fence, the i386 memory model is strong\n+     enough not to require barriers of any kind.  */\n+  if (INTVAL (operands[0]) == MEMMODEL_SEQ_CST)\n+    {\n+      rtx (*mfence_insn)(rtx);\n+      rtx mem;\n+\n+      if (TARGET_64BIT || TARGET_SSE2)\n+\tmfence_insn = gen_mfence_sse2;\n+      else\n+\tmfence_insn = gen_mfence_nosse;\n+\n+      mem = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+      MEM_VOLATILE_P (mem) = 1;\n+\n+      emit_insn (mfence_insn (mem));\n+    }\n+  DONE;\n+})\n+\n ;; ??? From volume 3 section 7.1.1 Guaranteed Atomic Operations,\n ;; Only beginning at Pentium family processors do we get any guarantee of\n ;; atomicity in aligned 64-bit quantities.  Beginning at P6, we get a"}]}