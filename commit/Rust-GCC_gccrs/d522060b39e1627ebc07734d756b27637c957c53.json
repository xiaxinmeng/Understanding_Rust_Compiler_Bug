{"sha": "d522060b39e1627ebc07734d756b27637c957c53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUyMjA2MGIzOWUxNjI3ZWJjMDc3MzRkNzU2YjI3NjM3Yzk1N2M1Mw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-06-24T05:26:07Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-24T05:26:07Z"}, "message": "c-common.c (expand_unordered_cmp): Delete.\n\n\n\t* c-common.c (expand_unordered_cmp): Delete.\n\t(expand_tree_builtin): Delete.\n\t* c-common.h (expand_tree_builtin): Delete function prototype.\n\t* c-typeck.c (build_function_call): Don't call expand_tree_builtin.\n\n\t* call.c (build_cxx_call): Don't call expand_tree_builtin.  No\n\tlonger take both \"args\" and \"convert_args\" as arguments.\n\t(build_op_delete_call): Update call to build_cxx_call.\n\t(build_over_call): Likewise, update call to build_cxx_call.\n\t* cp-tree.h (build_cxx_call): Update funtion prototype.\n\t* typeck.c (build_function_call): Don't call expand_tree_builtin.\n\t* rtti.c (throw_bad_cast): Update call to build_cxx_call.\n\t(throw_bad_typeid): Likewise.\n\t(build_dynamic_cast_1): Likewise.\n\nFrom-SVN: r83579", "tree": {"sha": "f49a4f53f5fccb080cacfa1d3a49e5db58a3853c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f49a4f53f5fccb080cacfa1d3a49e5db58a3853c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d522060b39e1627ebc07734d756b27637c957c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d522060b39e1627ebc07734d756b27637c957c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d522060b39e1627ebc07734d756b27637c957c53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d522060b39e1627ebc07734d756b27637c957c53/comments", "author": null, "committer": null, "parents": [{"sha": "a7cc468aa3453959c3eccafd5e66eb603f69696c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7cc468aa3453959c3eccafd5e66eb603f69696c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7cc468aa3453959c3eccafd5e66eb603f69696c"}], "stats": {"total": 233, "additions": 29, "deletions": 204}, "files": [{"sha": "be182139dc3633b4d2554176e81168a162dbeb3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522060b39e1627ebc07734d756b27637c957c53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522060b39e1627ebc07734d756b27637c957c53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d522060b39e1627ebc07734d756b27637c957c53", "patch": "@@ -1,3 +1,10 @@\n+2004-06-23  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* c-common.c (expand_unordered_cmp): Delete.\n+\t(expand_tree_builtin): Delete.\n+\t* c-common.h (expand_tree_builtin): Delete function prototype.\n+\t* c-typeck.c (build_function_call): Don't call expand_tree_builtin.\n+\n 2004-06-23  Richard Henderson  <rth@redhat.com>\n \n \t* gimplify.c (gimplify_compound_lval): Don't set ARRAY_REF or"}, {"sha": "dddd6ecace23612f76218516f202158398422f48", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d522060b39e1627ebc07734d756b27637c957c53", "patch": "@@ -3500,155 +3500,6 @@ strip_pointer_operator (tree t)\n   return t;\n }\n \n-static tree expand_unordered_cmp (tree, tree, enum tree_code, enum tree_code);\n-\n-/* Expand a call to an unordered comparison function such as\n-   __builtin_isgreater().  FUNCTION is the function's declaration and\n-   PARAMS a list of the values passed.  For __builtin_isunordered(),\n-   UNORDERED_CODE is UNORDERED_EXPR and ORDERED_CODE is NOP_EXPR.  In\n-   other cases, UNORDERED_CODE and ORDERED_CODE are comparison codes\n-   that give the opposite of the desired result.  UNORDERED_CODE is\n-   used for modes that can hold NaNs and ORDERED_CODE is used for the\n-   rest.  */\n-\n-static tree\n-expand_unordered_cmp (tree function, tree params,\n-\t\t      enum tree_code unordered_code,\n-\t\t      enum tree_code ordered_code)\n-{\n-  tree arg0, arg1, type;\n-  enum tree_code code0, code1;\n-\n-  /* Check that we have exactly two arguments.  */\n-  if (params == 0 || TREE_CHAIN (params) == 0)\n-    {\n-      error (\"too few arguments to function `%s'\",\n-\t     IDENTIFIER_POINTER (DECL_NAME (function)));\n-      return error_mark_node;\n-    }\n-  else if (TREE_CHAIN (TREE_CHAIN (params)) != 0)\n-    {\n-      error (\"too many arguments to function `%s'\",\n-\t     IDENTIFIER_POINTER (DECL_NAME (function)));\n-      return error_mark_node;\n-    }\n-\n-  arg0 = TREE_VALUE (params);\n-  arg1 = TREE_VALUE (TREE_CHAIN (params));\n-\n-  code0 = TREE_CODE (TREE_TYPE (arg0));\n-  code1 = TREE_CODE (TREE_TYPE (arg1));\n-\n-  /* Make sure that the arguments have a common type of REAL.  */\n-  type = 0;\n-  if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE)\n-      && (code1 == INTEGER_TYPE || code1 == REAL_TYPE))\n-    type = common_type (TREE_TYPE (arg0), TREE_TYPE (arg1));\n-\n-  if (type == 0 || TREE_CODE (type) != REAL_TYPE)\n-    {\n-      error (\"non-floating-point argument to function `%s'\",\n-\t     IDENTIFIER_POINTER (DECL_NAME (function)));\n-      return error_mark_node;\n-    }\n-\n-  if (unordered_code == UNORDERED_EXPR)\n-    {\n-      if (MODE_HAS_NANS (TYPE_MODE (type)))\n-\treturn build_binary_op (unordered_code,\n-\t\t\t\tconvert (type, arg0),\n-\t\t\t\tconvert (type, arg1),\n-\t\t\t\t0);\n-      else\n-\treturn integer_zero_node;\n-    }\n-\n-  return build_unary_op (TRUTH_NOT_EXPR,\n-\t\t\t build_binary_op (MODE_HAS_NANS (TYPE_MODE (type))\n-\t\t\t\t\t  ? unordered_code\n-\t\t\t\t\t  : ordered_code,\n-\t\t\t\t\t  convert (type, arg0),\n-\t\t\t\t\t  convert (type, arg1),\n-\t\t\t\t\t  0),\n-\t\t\t 0);\n-}\n-\n-\n-/* Recognize certain built-in functions so we can make tree-codes\n-   other than CALL_EXPR.  We do this when it enables fold-const.c\n-   to do something useful.  */\n-/* ??? By rights this should go in builtins.c, but only C and C++\n-   implement build_{binary,unary}_op.  Not exactly sure what bits\n-   of functionality are actually needed from those functions, or\n-   where the similar functionality exists in the other front ends.  */\n-\n-tree\n-expand_tree_builtin (tree function, tree params, tree coerced_params)\n-{\n-  if (DECL_BUILT_IN_CLASS (function) != BUILT_IN_NORMAL)\n-    return NULL_TREE;\n-\n-  switch (DECL_FUNCTION_CODE (function))\n-    {\n-    case BUILT_IN_ABS:\n-    case BUILT_IN_LABS:\n-    case BUILT_IN_LLABS:\n-    case BUILT_IN_IMAXABS:\n-    case BUILT_IN_FABS:\n-    case BUILT_IN_FABSL:\n-    case BUILT_IN_FABSF:\n-      if (coerced_params == 0)\n-\treturn integer_zero_node;\n-      return build_unary_op (ABS_EXPR, TREE_VALUE (coerced_params), 0);\n-\n-    case BUILT_IN_CONJ:\n-    case BUILT_IN_CONJF:\n-    case BUILT_IN_CONJL:\n-      if (coerced_params == 0)\n-\treturn integer_zero_node;\n-      return build_unary_op (CONJ_EXPR, TREE_VALUE (coerced_params), 0);\n-\n-    case BUILT_IN_CREAL:\n-    case BUILT_IN_CREALF:\n-    case BUILT_IN_CREALL:\n-      if (coerced_params == 0)\n-\treturn integer_zero_node;\n-      return non_lvalue (build_unary_op (REALPART_EXPR,\n-\t\t\t\t\t TREE_VALUE (coerced_params), 0));\n-\n-    case BUILT_IN_CIMAG:\n-    case BUILT_IN_CIMAGF:\n-    case BUILT_IN_CIMAGL:\n-      if (coerced_params == 0)\n-\treturn integer_zero_node;\n-      return non_lvalue (build_unary_op (IMAGPART_EXPR,\n-\t\t\t\t\t TREE_VALUE (coerced_params), 0));\n-\n-    case BUILT_IN_ISGREATER:\n-      return expand_unordered_cmp (function, params, UNLE_EXPR, LE_EXPR);\n-\n-    case BUILT_IN_ISGREATEREQUAL:\n-      return expand_unordered_cmp (function, params, UNLT_EXPR, LT_EXPR);\n-\n-    case BUILT_IN_ISLESS:\n-      return expand_unordered_cmp (function, params, UNGE_EXPR, GE_EXPR);\n-\n-    case BUILT_IN_ISLESSEQUAL:\n-      return expand_unordered_cmp (function, params, UNGT_EXPR, GT_EXPR);\n-\n-    case BUILT_IN_ISLESSGREATER:\n-      return expand_unordered_cmp (function, params, UNEQ_EXPR, EQ_EXPR);\n-\n-    case BUILT_IN_ISUNORDERED:\n-      return expand_unordered_cmp (function, params, UNORDERED_EXPR, NOP_EXPR);\n-\n-    default:\n-      break;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Walk the statement tree, rooted at *tp.  Apply FUNC to all the\n    sub-trees of *TP in a pre-order traversal.  FUNC is called with the\n    DATA and the address of each sub-tree.  If FUNC returns a non-NULL"}, {"sha": "abb921e66fdf58b3ceac8413c7c8a3cb2a57c5e1", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=d522060b39e1627ebc07734d756b27637c957c53", "patch": "@@ -1032,8 +1032,6 @@ extern tree default_conversion (tree);\n \n extern tree common_type (tree, tree);\n \n-extern tree expand_tree_builtin (tree, tree, tree);\n-\n extern tree decl_constant_value (tree);\n \n /* Handle increment and decrement of boolean types.  */"}, {"sha": "8a5d06f5761fbd22b8b0ab5ceb7e9522ab2be915", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=d522060b39e1627ebc07734d756b27637c957c53", "patch": "@@ -1886,20 +1886,6 @@ build_function_call (tree function, tree params)\n \n   check_function_arguments (TYPE_ATTRIBUTES (fntype), coerced_params);\n \n-  /* Recognize certain built-in functions so we can make tree-codes\n-     other than CALL_EXPR.  We do this when it enables fold-const.c\n-     to do something useful.  */\n-\n-  if (TREE_CODE (function) == ADDR_EXPR\n-      && TREE_CODE (TREE_OPERAND (function, 0)) == FUNCTION_DECL\n-      && DECL_BUILT_IN (TREE_OPERAND (function, 0)))\n-    {\n-      result = expand_tree_builtin (TREE_OPERAND (function, 0),\n-\t\t\t\t    params, coerced_params);\n-      if (result)\n-\treturn result;\n-    }\n-\n   result = build (CALL_EXPR, TREE_TYPE (fntype),\n \t\t  function, coerced_params, NULL_TREE);\n   TREE_SIDE_EFFECTS (result) = 1;"}, {"sha": "531df512e79bc4212f906c013d984465bb6034c2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d522060b39e1627ebc07734d756b27637c957c53", "patch": "@@ -1,3 +1,15 @@\n+2004-06-23  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* call.c (build_cxx_call): Don't call expand_tree_builtin.  No\n+\tlonger take both \"args\" and \"convert_args\" as arguments.\n+\t(build_op_delete_call): Update call to build_cxx_call.\n+\t(build_over_call): Likewise, update call to build_cxx_call.\n+\t* cp-tree.h (build_cxx_call): Update funtion prototype.\n+\t* typeck.c (build_function_call): Don't call expand_tree_builtin.\n+\t* rtti.c (throw_bad_cast): Update call to build_cxx_call.\n+\t(throw_bad_typeid): Likewise.\n+\t(build_dynamic_cast_1): Likewise.\n+\n 2004-06-22  Richard Henderson  <rth@redhat.com>\n \n \t* class.c (build_vfn_ref): Take a pointer not object.  Build"}, {"sha": "e02fa17e403dcc8d7fb70527a4e0ccf298825386", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d522060b39e1627ebc07734d756b27637c957c53", "patch": "@@ -4023,7 +4023,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t  /* The placement args might not be suitable for overload\n \t     resolution at this point, so build the call directly.  */\n \t  mark_used (fn);\n-\t  return build_cxx_call (fn, args, args);\n+\t  return build_cxx_call (fn, args);\n \t}\n       else\n \treturn build_function_call (fn, args);\n@@ -4843,33 +4843,19 @@ build_over_call (struct z_candidate *cand, int flags)\n   else\n     fn = build_addr_func (fn);\n \n-  return build_cxx_call (fn, args, converted_args);\n+  return build_cxx_call (fn, converted_args);\n }\n \n-/* Build and return a call to FN, using the the CONVERTED_ARGS.  ARGS\n-   gives the original form of the arguments.  This function performs\n+/* Build and return a call to FN, using ARGS.  This function performs\n    no overload resolution, conversion, or other high-level\n    operations.  */\n \n tree\n-build_cxx_call(tree fn, tree args, tree converted_args)\n+build_cxx_call (tree fn, tree args)\n {\n   tree fndecl;\n \n-  /* Recognize certain built-in functions so we can make tree-codes\n-     other than CALL_EXPR.  We do this when it enables fold-const.c\n-     to do something useful.  */\n-  if (TREE_CODE (fn) == ADDR_EXPR\n-      && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL\n-      && DECL_BUILT_IN (TREE_OPERAND (fn, 0)))\n-    {\n-      tree exp;\n-      exp = expand_tree_builtin (TREE_OPERAND (fn, 0), args, converted_args);\n-      if (exp)\n-\treturn exp;\n-    }\n-\n-  fn = build_call (fn, converted_args);\n+  fn = build_call (fn, args);\n \n   /* If this call might throw an exception, note that fact.  */\n   fndecl = get_callee_fndecl (fn);"}, {"sha": "9638c2db84ea74e255fd437c38ca6a3fb6c72501", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d522060b39e1627ebc07734d756b27637c957c53", "patch": "@@ -3626,7 +3626,7 @@ extern tree strip_top_quals (tree);\n extern tree perform_implicit_conversion (tree, tree);\n extern tree perform_direct_initialization_if_possible (tree, tree);\n extern tree in_charge_arg_for_name (tree);\n-extern tree build_cxx_call (tree, tree, tree);\n+extern tree build_cxx_call (tree, tree);\n #ifdef ENABLE_CHECKING\n extern void validate_conversion_obstack (void);\n #endif /* ENABLE_CHECKING */"}, {"sha": "b57de9d39730a33d68563e544e0a9aa14310391f", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=d522060b39e1627ebc07734d756b27637c957c53", "patch": "@@ -176,7 +176,7 @@ throw_bad_cast (void)\n     fn = push_throw_library_fn (fn, build_function_type (ptr_type_node,\n \t\t\t\t\t\t\t void_list_node));\n   \n-  return build_cxx_call (fn, NULL_TREE, NULL_TREE);\n+  return build_cxx_call (fn, NULL_TREE);\n }\n \n /* Return an expression for \"__cxa_bad_typeid()\".  The expression\n@@ -193,7 +193,7 @@ throw_bad_typeid (void)\n       fn = push_throw_library_fn (fn, t);\n     }\n \n-  return convert_from_reference (build_cxx_call (fn, NULL_TREE, NULL_TREE));\n+  return convert_from_reference (build_cxx_call (fn, NULL_TREE));\n }\n \f\n /* Return an lvalue expression whose type is \"const std::type_info\"\n@@ -652,7 +652,7 @@ build_dynamic_cast_1 (tree type, tree expr)\n               pop_nested_namespace (ns);\n               dynamic_cast_node = dcast_fn;\n \t    }\n-          result = build_cxx_call (dcast_fn, elems, elems);\n+          result = build_cxx_call (dcast_fn, elems);\n \n \t  if (tc == REFERENCE_TYPE)\n \t    {"}, {"sha": "2dc21db13265743179f6b22cee38d171dff45db8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522060b39e1627ebc07734d756b27637c957c53/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d522060b39e1627ebc07734d756b27637c957c53", "patch": "@@ -2411,7 +2411,6 @@ build_function_call (tree function, tree params)\n {\n   tree fntype, fndecl;\n   tree coerced_params;\n-  tree result;\n   tree name = NULL_TREE;\n   int is_method;\n   tree original = function;\n@@ -2489,21 +2488,7 @@ build_function_call (tree function, tree params)\n   if (warn_format)\n     check_function_format (NULL, TYPE_ATTRIBUTES (fntype), coerced_params);\n \n-  /* Recognize certain built-in functions so we can make tree-codes\n-     other than CALL_EXPR.  We do this when it enables fold-const.c\n-     to do something useful.  */\n-\n-  if (TREE_CODE (function) == ADDR_EXPR\n-      && TREE_CODE (TREE_OPERAND (function, 0)) == FUNCTION_DECL\n-      && DECL_BUILT_IN (TREE_OPERAND (function, 0)))\n-    {\n-      result = expand_tree_builtin (TREE_OPERAND (function, 0),\n-\t\t\t\t    params, coerced_params);\n-      if (result)\n-\treturn result;\n-    }\n-\n-  return build_cxx_call (function, params, coerced_params);\n+  return build_cxx_call (function, coerced_params);\n }\n \f\n /* Convert the actual parameter expressions in the list VALUES"}]}