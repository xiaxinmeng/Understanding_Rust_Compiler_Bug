{"sha": "62874575d9628c6e7b3bf072ca754c74b64fd3a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4NzQ1NzVkOTYyOGM2ZTdiM2JmMDcyY2E3NTRjNzRiNjRmZDNhMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-14T13:42:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-14T13:42:18Z"}, "message": "(force_reg): Don't make a REG_EQUAL note for an insn that doesn't set\nTEMP.\n\nFrom-SVN: r7771", "tree": {"sha": "53aaf236f329389b5a1f975bf929954e0ae4cef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53aaf236f329389b5a1f975bf929954e0ae4cef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62874575d9628c6e7b3bf072ca754c74b64fd3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62874575d9628c6e7b3bf072ca754c74b64fd3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62874575d9628c6e7b3bf072ca754c74b64fd3a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62874575d9628c6e7b3bf072ca754c74b64fd3a0/comments", "author": null, "committer": null, "parents": [{"sha": "eb3a6507538a18ed673f1e395ab7d5a4532f1dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3a6507538a18ed673f1e395ab7d5a4532f1dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb3a6507538a18ed673f1e395ab7d5a4532f1dd7"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "b72e468e050aaedc2460fdbe6f2e784ba9d7736f", "filename": "gcc/explow.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62874575d9628c6e7b3bf072ca754c74b64fd3a0/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62874575d9628c6e7b3bf072ca754c74b64fd3a0/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=62874575d9628c6e7b3bf072ca754c74b64fd3a0", "patch": "@@ -578,15 +578,19 @@ force_reg (mode, x)\n      enum machine_mode mode;\n      rtx x;\n {\n-  register rtx temp, insn;\n+  register rtx temp, insn, set;\n \n   if (GET_CODE (x) == REG)\n     return x;\n   temp = gen_reg_rtx (mode);\n   insn = emit_move_insn (temp, x);\n+\n   /* Let optimizers know that TEMP's value never changes\n-     and that X can be substituted for it.  */\n-  if (CONSTANT_P (x))\n+     and that X can be substituted for it.  Don't get confused\n+     if INSN set something else (such as a SUBREG of TEMP).  */\n+  if (CONSTANT_P (x)\n+      && (set = single_set (insn)) != 0\n+      && SET_DEST (set) == temp)\n     {\n       rtx note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n "}]}