{"sha": "328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI4YjUyZDY3NTE3MzNmNmUwZjJkMzFmZWNhNDRlMWQ4ZjJhYmZjNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-31T21:42:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-31T21:42:18Z"}, "message": "Partial implementation of C++20 of <ranges> header\n\n\t* doc/doxygen/user.cfg.in: Add new header.\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/precompiled/stdc++.h: Include new header.\n\t* include/std/ranges: New header.\n\t(ranges::sentinel_t, ranges::range_value_t, ranges::range_reference_t)\n\t(ranges::range_rvalue_reference_t, ranges::sized_range)\n\t(ranges::output_range, ranges::input_ranges, ranges::forward_range)\n\t(ranges::bidirectional_range, ranges::random_access_range)\n\t(ranges::contiguous_range, ranges::common::range): Define.\n\t* testsuite/24_iterators/headers/iterator/synopsis_c++20.cc: Check\n\tthat disabled_sized_sentinel can be specialized.\n\t* testsuite/std/ranges/access/begin.cc: Include <ranges> instead of\n\t<iterator>.\n\t* testsuite/std/ranges/access/cbegin.cc: Likewise.\n\t* testsuite/std/ranges/access/cdata.cc: Likewise.\n\t* testsuite/std/ranges/access/cend.cc: Likewise.\n\t* testsuite/std/ranges/access/crbegin.cc: Likewise.\n\t* testsuite/std/ranges/access/crend.cc: Likewise.\n\t* testsuite/std/ranges/access/data.cc: Likewise.\n\t* testsuite/std/ranges/access/empty.cc: Likewise.\n\t* testsuite/std/ranges/access/end.cc: Likewise.\n\t* testsuite/std/ranges/access/end_neg.cc: Likewise.\n\t* testsuite/std/ranges/access/rbegin.cc: Likewise.\n\t* testsuite/std/ranges/access/rend.cc: Likewise.\n\t* testsuite/std/ranges/access/size.cc: Likewise.\n\t* testsuite/std/ranges/access/size_neg.cc: Likewise.\n\t* testsuite/std/ranges/headers/ranges/synopsis.cc: New test.\n\t* testsuite/std/ranges/range.cc: New test.\n\t* testsuite/std/ranges/refinements.cc: New test.\n\t* testsuite/std/ranges/sized.cc: New test.\n\t* testsuite/util/testsuite_iterators.h: Add aliases for range types.\n\t(output_iterator_wrapper::WritableObject::operator=): Add const\n\tqualifier so that output_iterator_wrapper satisfies writable.\n\nFrom-SVN: r277697", "tree": {"sha": "df343cd7a1cd3846feea7c59d9679cfb0e96c126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df343cd7a1cd3846feea7c59d9679cfb0e96c126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a9005e641f25c0363c3998ed2fa9abc826a289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a9005e641f25c0363c3998ed2fa9abc826a289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5a9005e641f25c0363c3998ed2fa9abc826a289"}], "stats": {"total": 504, "additions": 488, "deletions": 16}, "files": [{"sha": "1004d76a77d4e1f652a465cbdbb3007944e322a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -1,5 +1,40 @@\n 2019-10-31  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/doxygen/user.cfg.in: Add new header.\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/precompiled/stdc++.h: Include new header.\n+\t* include/std/ranges: New header.\n+\t(ranges::sentinel_t, ranges::range_value_t, ranges::range_reference_t)\n+\t(ranges::range_rvalue_reference_t, ranges::sized_range)\n+\t(ranges::output_range, ranges::input_ranges, ranges::forward_range)\n+\t(ranges::bidirectional_range, ranges::random_access_range)\n+\t(ranges::contiguous_range, ranges::common::range): Define.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++20.cc: Check\n+\tthat disabled_sized_sentinel can be specialized.\n+\t* testsuite/std/ranges/access/begin.cc: Include <ranges> instead of\n+\t<iterator>.\n+\t* testsuite/std/ranges/access/cbegin.cc: Likewise.\n+\t* testsuite/std/ranges/access/cdata.cc: Likewise.\n+\t* testsuite/std/ranges/access/cend.cc: Likewise.\n+\t* testsuite/std/ranges/access/crbegin.cc: Likewise.\n+\t* testsuite/std/ranges/access/crend.cc: Likewise.\n+\t* testsuite/std/ranges/access/data.cc: Likewise.\n+\t* testsuite/std/ranges/access/empty.cc: Likewise.\n+\t* testsuite/std/ranges/access/end.cc: Likewise.\n+\t* testsuite/std/ranges/access/end_neg.cc: Likewise.\n+\t* testsuite/std/ranges/access/rbegin.cc: Likewise.\n+\t* testsuite/std/ranges/access/rend.cc: Likewise.\n+\t* testsuite/std/ranges/access/size.cc: Likewise.\n+\t* testsuite/std/ranges/access/size_neg.cc: Likewise.\n+\t* testsuite/std/ranges/headers/ranges/synopsis.cc: New test.\n+\t* testsuite/std/ranges/range.cc: New test.\n+\t* testsuite/std/ranges/refinements.cc: New test.\n+\t* testsuite/std/ranges/sized.cc: New test.\n+\t* testsuite/util/testsuite_iterators.h: Add aliases for range types.\n+\t(output_iterator_wrapper::WritableObject::operator=): Add const\n+\tqualifier so that output_iterator_wrapper satisfies writable.\n+\n \t* testsuite/20_util/add_pointer/value.cc: Check void types.\n \n \t* include/bits/range_access.h (__sizable): Rename to __sentinel_size."}, {"sha": "420010167213994eac91a1088f552415a78392a7", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -829,6 +829,7 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/ostream \\\n                          include/queue \\\n                          include/random \\\n+                         include/ranges \\\n                          include/ratio \\\n                          include/regex \\\n                          include/scoped_allocator \\"}, {"sha": "3e526dc14b74121959995c15f988c130dac772b2", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -64,6 +64,7 @@ std_headers = \\\n \t${std_srcdir}/ostream \\\n \t${std_srcdir}/queue \\\n \t${std_srcdir}/random \\\n+\t${std_srcdir}/ranges \\\n \t${std_srcdir}/ratio \\\n \t${std_srcdir}/regex \\\n \t${std_srcdir}/scoped_allocator \\"}, {"sha": "d9eb306a21340ba50a4b4c986462bece544493eb", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -408,6 +408,7 @@ std_headers = \\\n \t${std_srcdir}/ostream \\\n \t${std_srcdir}/queue \\\n \t${std_srcdir}/random \\\n+\t${std_srcdir}/ranges \\\n \t${std_srcdir}/ratio \\\n \t${std_srcdir}/regex \\\n \t${std_srcdir}/scoped_allocator \\"}, {"sha": "57c3e2e32ee5801862e4f2e9ae5e6796fb7fb810", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -138,7 +138,7 @@\n // #include <compare>\n #include <concepts>\n #include <numbers>\n-// #include <ranges>\n+#include <ranges>\n #include <span>\n // #include <syncstream>\n #include <version>"}, {"sha": "884fa1d1408ebd3a0c1772ee82a5558ec84d269a", "filename": "libstdc++-v3/include/std/ranges", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -0,0 +1,112 @@\n+// <ranges> -*- C++ -*-\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received __a copy of the GNU General Public License and\n+// __a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/ranges\n+ *  This is a Standard C++ Library header.\n+ *  @ingroup concepts\n+ */\n+\n+#ifndef _GLIBCXX_RANGES\n+#define _GLIBCXX_RANGES 1\n+\n+#if __cplusplus > 201703L\n+\n+#pragma GCC system_header\n+\n+#include <concepts>\n+\n+#if __cpp_lib_concepts\n+\n+#include <iterator>\n+\n+/**\n+ * @defgroup ranges Ranges\n+ *\n+ * Components for dealing with ranges of elements.\n+ */\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+namespace ranges\n+{\n+  // [range.range] The range concept.\n+  // Defined in <bits/range_iterator.h>\n+  // template<typename> concept range;\n+\n+  template<range _Range>\n+    using sentinel_t = decltype(ranges::end(std::declval<_Range&>()));\n+\n+  template<range _Range>\n+    using range_value_t = iter_value_t<iterator_t<_Range>>;\n+\n+  template<range _Range>\n+    using range_reference_t = iter_reference_t<iterator_t<_Range>>;\n+\n+  template<range _Range>\n+    using range_rvalue_reference_t\n+      = iter_rvalue_reference_t<iterator_t<_Range>>;\n+\n+  // [range.sized] The sized_range concept.\n+  // Defined in <bits/range_iterator.h>\n+  // template<typename> concept sized_range;\n+\n+  // [range.refinements]\n+\n+  template<typename _Range, typename _Tp>\n+    concept output_range\n+      = range<_Range> && output_iterator<iterator_t<_Range>, _Tp>;\n+\n+  template<typename _Tp>\n+    concept input_range = range<_Tp> && input_iterator<iterator_t<_Tp>>;\n+\n+  template<typename _Tp>\n+    concept forward_range\n+      = input_range<_Tp> && forward_iterator<iterator_t<_Tp>>;\n+\n+  template<typename _Tp>\n+    concept bidirectional_range\n+      = forward_range<_Tp> && bidirectional_iterator<iterator_t<_Tp>>;\n+\n+  template<typename _Tp>\n+    concept random_access_range\n+      = bidirectional_range<_Tp> && random_access_iterator<iterator_t<_Tp>>;\n+\n+  template<typename _Tp>\n+    concept contiguous_range\n+      = random_access_range<_Tp> && contiguous_iterator<iterator_t<_Tp>>\n+      && requires(_Tp& __t)\n+      {\n+\t{ ranges::data(__t) } -> same_as<add_pointer_t<range_reference_t<_Tp>>>;\n+      };\n+\n+  template<typename _Tp>\n+    concept common_range\n+      = range<_Tp> && same_as<iterator_t<_Tp>, sentinel_t<_Tp>>;\n+} // namespace ranges\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+#endif // library concepts\n+#endif // C++2a\n+#endif /* _GLIBCXX_RANGES */"}, {"sha": "824b0b4f38cc8cb1b7ea68a89396919c812f2c7f", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis_c++20.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B20.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -78,6 +78,9 @@ namespace std\n   struct unreachable_sentinel_t;\n }\n \n+struct I { };\n+template<> constexpr bool std::disable_sized_sentinel<I, I> = true;\n+\n namespace __gnu_test\n {\n   // customization points"}, {"sha": "e4c245a76bb82660d4916831ce7522d6c259974c", "filename": "libstdc++-v3/testsuite/std/ranges/access/begin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator> // N.B. should be <ranges>\n+#include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "54db3658896419120cd50df8b504fe316130dc1f", "filename": "libstdc++-v3/testsuite/std/ranges/access/cbegin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator> // N.B. should be <ranges>\n+#include <ranges>\n #include <testsuite_hooks.h>\n using std::same_as;\n "}, {"sha": "b16c99607a58cfd1870097d444fa75b3bc54f3dd", "filename": "libstdc++-v3/testsuite/std/ranges/access/cdata.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcdata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcdata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcdata.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator>\n+#include <ranges>\n #include <testsuite_hooks.h>\n \n void"}, {"sha": "3b57b3dbcaf9ea7fe8ca8498f6c6658a8be7f7cd", "filename": "libstdc++-v3/testsuite/std/ranges/access/cend.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator> // N.B. should be <ranges>\n+#include <ranges>\n #include <testsuite_hooks.h>\n \n using std::same_as;"}, {"sha": "d9e5b0cbef7691c36eedd30cfc89905faf3a96c1", "filename": "libstdc++-v3/testsuite/std/ranges/access/crbegin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrbegin.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator>\n+#include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "e56491973b25f2c33257a440c46a6db74c4e5d85", "filename": "libstdc++-v3/testsuite/std/ranges/access/crend.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrend.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator>\n+#include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "4932164018257c9c59833c09f15b1ff07d806a8c", "filename": "libstdc++-v3/testsuite/std/ranges/access/data.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fdata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fdata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fdata.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator>\n+#include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "9d6aa282142977f800efd2bc54233efa0c5d2501", "filename": "libstdc++-v3/testsuite/std/ranges/access/empty.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fempty.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator> // N.B. should be <ranges>\n+#include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "ed269c5433f5f0f5b1ca98bf6341bd49a1fdb4e7", "filename": "libstdc++-v3/testsuite/std/ranges/access/end.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator> // N.B. should be <ranges>\n+#include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "0b40d2745679b791be47d3432e789303ac1b7e74", "filename": "libstdc++-v3/testsuite/std/ranges/access/end_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend_neg.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do compile { target c++2a } }\n \n-#include <iterator> // N.B. should be <ranges>\n+#include <ranges>\n \n extern int unbounded[];\n "}, {"sha": "067ddd7ced61fbb3249f7fd7bfbf78de7d4f6dd3", "filename": "libstdc++-v3/testsuite/std/ranges/access/rbegin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frbegin.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator>\n+#include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "17caa9fb31a71e23c9af182cd1294af20d397dc4", "filename": "libstdc++-v3/testsuite/std/ranges/access/rend.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frend.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator>\n+#include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "6e9af7942ec0fb0675af1b2ba09de0c411d6537e", "filename": "libstdc++-v3/testsuite/std/ranges/access/size.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n-#include <iterator>\n+#include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "65fce104ff6b896a6c6091f49a58fb321aa3d2cf", "filename": "libstdc++-v3/testsuite/std/ranges/access/size_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize_neg.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do compile { target c++2a } }\n \n-#include <iterator> // N.B. should be <ranges>\n+#include <ranges>\n \n extern int unbounded[];\n "}, {"sha": "d4596cc8db5b5e532e5dca99646e6dded3e7c969", "filename": "libstdc++-v3/testsuite/std/ranges/headers/ranges/synopsis.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fheaders%2Franges%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fheaders%2Franges%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fheaders%2Franges%2Fsynopsis.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+\n+struct R { };\n+template<> constexpr bool std::ranges::disable_sized_range<R> = true;\n+\n+namespace __gnu_test\n+{\n+  constexpr const bool* disable_sized_range\n+    = &std::ranges::disable_sized_range<void>;\n+  constexpr auto* begin = &std::ranges::begin;\n+  constexpr auto* end = &std::ranges::end;\n+  constexpr auto* cbegin = &std::ranges::cbegin;\n+  constexpr auto* cend = &std::ranges::cend;\n+  constexpr auto* rbegin = &std::ranges::rbegin;\n+  constexpr auto* rend = &std::ranges::rend;\n+  constexpr auto* crbegin = &std::ranges::crbegin;\n+  constexpr auto* crend = &std::ranges::crend;\n+}"}, {"sha": "44869de3ffb669860da5e11d04d883475248aa49", "filename": "libstdc++-v3/testsuite/std/ranges/range.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frange.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+#include <testsuite_iterators.h>\n+\n+static_assert( std::ranges::range<int(&)[1]> );\n+static_assert( std::ranges::range<const int(&)[1]> );\n+static_assert( std::ranges::range<int[1]> );\n+static_assert( !std::ranges::range<int*> );\n+\n+using namespace __gnu_test;\n+\n+static_assert( std::ranges::range<test_contiguous_range<int>> );\n+static_assert( std::ranges::range<test_contiguous_range<int>&> );\n+static_assert( std::ranges::range<test_random_access_range<int>> );\n+static_assert( std::ranges::range<test_random_access_range<int>&> );\n+static_assert( std::ranges::range<test_bidirectional_range<int>> );\n+static_assert( std::ranges::range<test_bidirectional_range<int>&> );\n+static_assert( std::ranges::range<test_forward_range<int>> );\n+static_assert( std::ranges::range<test_forward_range<int>&> );\n+static_assert( std::ranges::range<test_input_range<int>> );\n+static_assert( std::ranges::range<test_input_range<int>&> );\n+static_assert( std::ranges::range<test_output_range<int>> );\n+static_assert( std::ranges::range<test_output_range<int>&> );\n+\n+static_assert( std::ranges::range<test_contiguous_sized_range<int>> );\n+static_assert( std::ranges::range<test_contiguous_sized_range<int>&> );\n+static_assert( std::ranges::range<test_random_access_sized_range<int>> );\n+static_assert( std::ranges::range<test_random_access_sized_range<int>&> );\n+static_assert( std::ranges::range<test_bidirectional_sized_range<int>> );\n+static_assert( std::ranges::range<test_bidirectional_sized_range<int>&> );\n+static_assert( std::ranges::range<test_forward_sized_range<int>> );\n+static_assert( std::ranges::range<test_forward_sized_range<int>&> );\n+static_assert( std::ranges::range<test_input_sized_range<int>> );\n+static_assert( std::ranges::range<test_input_sized_range<int>&> );\n+static_assert( std::ranges::range<test_output_sized_range<int>> );\n+static_assert( std::ranges::range<test_output_sized_range<int>&> );\n+\n+using std::same_as;\n+\n+using C = test_contiguous_range<char>;\n+using I = test_input_range<char>;\n+using O = test_output_range<char>;\n+\n+static_assert( same_as<std::ranges::iterator_t<C>,\n+\t\t       contiguous_iterator_wrapper<char>> );\n+static_assert( same_as<std::ranges::iterator_t<O>,\n+\t\t       decltype(std::declval<O&>().begin())> );\n+\n+static_assert( same_as<std::ranges::sentinel_t<C>,\n+\t\t       contiguous_iterator_wrapper<char>> );\n+static_assert( same_as<std::ranges::sentinel_t<O>,\n+\t\t       decltype(std::declval<O&>().end())> );\n+\n+static_assert( same_as<std::ranges::range_difference_t<C>,\n+\t\t       std::ptrdiff_t> );\n+static_assert( same_as<std::ranges::range_difference_t<O>,\n+\t\t       std::ptrdiff_t> );\n+\n+static_assert( same_as<std::ranges::range_value_t<O>,\n+\t\t       char> );\n+\n+static_assert( same_as<std::ranges::range_reference_t<I>,\n+\t\t       char&> );\n+static_assert( same_as<std::ranges::range_reference_t<O>,\n+\t\t       WritableObject<char>> );\n+\n+static_assert( same_as<std::ranges::range_rvalue_reference_t<I>,\n+\t\t       char&&> );\n+static_assert( same_as<std::ranges::range_rvalue_reference_t<O>,\n+\t\t      WritableObject<char>> );"}, {"sha": "0b3153979442b265d55f4d0e355c6cf7000b2cec", "filename": "libstdc++-v3/testsuite/std/ranges/refinements.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frefinements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frefinements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frefinements.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+#include <testsuite_iterators.h>\n+\n+static_assert( std::ranges::output_range<int(&)[1], int> );\n+static_assert( ! std::ranges::output_range<const int(&)[1], int> );\n+static_assert( std::ranges::output_range<int[1], int> );\n+static_assert( ! std::ranges::output_range<int[1], int*> );\n+\n+static_assert( std::ranges::input_range<int(&)[1]> );\n+static_assert( std::ranges::input_range<const int(&)[1]> );\n+static_assert( std::ranges::input_range<int[1]> );\n+\n+static_assert( std::ranges::contiguous_range<int(&)[1]> );\n+static_assert( std::ranges::contiguous_range<const int(&)[1]> );\n+static_assert( std::ranges::contiguous_range<int[1]> );\n+\n+using namespace __gnu_test;\n+\n+static_assert( std::ranges::output_range<test_contiguous_range<int>, int> );\n+static_assert( std::ranges::output_range<test_random_access_range<int>, int> );\n+static_assert( std::ranges::output_range<test_bidirectional_range<int>, int> );\n+static_assert( std::ranges::output_range<test_forward_range<int>, int> );\n+static_assert( ! std::ranges::output_range<test_input_range<int>, int> );\n+static_assert( std::ranges::output_range<test_output_range<int>, int> );\n+\n+static_assert( std::ranges::input_range<test_contiguous_range<int>> );\n+static_assert( std::ranges::input_range<test_random_access_range<int>> );\n+static_assert( std::ranges::input_range<test_bidirectional_range<int>> );\n+static_assert( std::ranges::input_range<test_forward_range<int>> );\n+static_assert( std::ranges::input_range<test_input_range<int>> );\n+static_assert( ! std::ranges::input_range<test_output_range<int>> );\n+\n+static_assert( std::ranges::forward_range<test_contiguous_range<int>> );\n+static_assert( std::ranges::forward_range<test_random_access_range<int>> );\n+static_assert( std::ranges::forward_range<test_bidirectional_range<int>> );\n+static_assert( std::ranges::forward_range<test_forward_range<int>> );\n+static_assert( ! std::ranges::forward_range<test_input_range<int>> );\n+static_assert( ! std::ranges::forward_range<test_output_range<int>> );\n+\n+static_assert( std::ranges::bidirectional_range<test_contiguous_range<int>> );\n+static_assert( std::ranges::bidirectional_range<test_random_access_range<int>>);\n+static_assert( std::ranges::bidirectional_range<test_bidirectional_range<int>>);\n+static_assert( ! std::ranges::bidirectional_range<test_forward_range<int>> );\n+static_assert( ! std::ranges::bidirectional_range<test_input_range<int>> );\n+static_assert( ! std::ranges::bidirectional_range<test_output_range<int>> );\n+\n+static_assert( std::ranges::random_access_range<test_contiguous_range<int>> );\n+static_assert( std::ranges::random_access_range<test_random_access_range<int>>);\n+static_assert( ! std::ranges::random_access_range<test_bidirectional_range<int>>);\n+static_assert( ! std::ranges::random_access_range<test_forward_range<int>> );\n+static_assert( ! std::ranges::random_access_range<test_input_range<int>> );\n+static_assert( ! std::ranges::random_access_range<test_output_range<int>> );\n+\n+static_assert( std::ranges::contiguous_range<test_contiguous_range<int>> );\n+static_assert( ! std::ranges::contiguous_range<test_random_access_range<int>>);\n+static_assert( ! std::ranges::contiguous_range<test_bidirectional_range<int>>);\n+static_assert( ! std::ranges::contiguous_range<test_forward_range<int>> );\n+static_assert( ! std::ranges::contiguous_range<test_input_range<int>> );\n+static_assert( ! std::ranges::contiguous_range<test_output_range<int>> );"}, {"sha": "dd685c7a674833bbae59e713df93f948bcb42afb", "filename": "libstdc++-v3/testsuite/std/ranges/sized.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsized.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsized.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsized.cc?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+#include <testsuite_iterators.h>\n+\n+static_assert( std::ranges::sized_range<int(&)[1]> );\n+static_assert( std::ranges::sized_range<const int(&)[1]> );\n+static_assert( std::ranges::sized_range<int[1]> );\n+static_assert( !std::ranges::sized_range<int*> );\n+\n+using namespace __gnu_test;\n+\n+// ranges::size(r) uses (end(r) - begin(r))\n+static_assert( std::ranges::sized_range<test_contiguous_range<int>> );\n+static_assert( std::ranges::sized_range<test_contiguous_range<int>&> );\n+static_assert( std::ranges::sized_range<test_random_access_range<int>> );\n+static_assert( std::ranges::sized_range<test_random_access_range<int>&> );\n+// ranges::size(r) is invalid, (end(r) - begin(r)) requires sized sentinel\n+static_assert(!std::ranges::sized_range<test_bidirectional_range<int>> );\n+static_assert(!std::ranges::sized_range<test_bidirectional_range<int>&> );\n+static_assert(!std::ranges::sized_range<test_forward_range<int>> );\n+static_assert(!std::ranges::sized_range<test_forward_range<int>&> );\n+static_assert(!std::ranges::sized_range<test_input_range<int>> );\n+static_assert(!std::ranges::sized_range<test_input_range<int>&> );\n+static_assert(!std::ranges::sized_range<test_output_range<int>> );\n+static_assert(!std::ranges::sized_range<test_output_range<int>&> );\n+\n+// ranges::size(r) uses r.size()\n+static_assert( std::ranges::sized_range<test_contiguous_sized_range<int>> );\n+static_assert( std::ranges::sized_range<test_contiguous_sized_range<int>&> );\n+static_assert( std::ranges::sized_range<test_random_access_sized_range<int>> );\n+static_assert( std::ranges::sized_range<test_random_access_sized_range<int>&> );\n+static_assert( std::ranges::sized_range<test_bidirectional_sized_range<int>> );\n+static_assert( std::ranges::sized_range<test_bidirectional_sized_range<int>&> );\n+static_assert( std::ranges::sized_range<test_forward_sized_range<int>> );\n+static_assert( std::ranges::sized_range<test_forward_sized_range<int>&> );\n+static_assert( std::ranges::sized_range<test_input_sized_range<int>> );\n+static_assert( std::ranges::sized_range<test_input_sized_range<int>&> );\n+static_assert( std::ranges::sized_range<test_output_sized_range<int>> );\n+static_assert( std::ranges::sized_range<test_output_sized_range<int>&> );\n+\n+using long_range = __gnu_test::test_random_access_sized_range<long>;\n+template<> constexpr bool std::ranges::disable_sized_range<long_range> = true;\n+\n+// Despite being disabled, this is still a sized_range because ranges::size(r)\n+// works, by using (ranges::end(r) - ranges::begin(r)).\n+static_assert( std::ranges::sized_range<long_range> );\n+static_assert( std::ranges::sized_range<long_range&> );\n+\n+using short_range = __gnu_test::test_bidirectional_sized_range<short>;\n+template<> constexpr bool std::ranges::disable_sized_range<short_range> = true;\n+\n+// This is not a sized range because ranges::size(r) cannot use member size,\n+// or ADL size, and (ranges::end(r) - ranges::begin(r)) is ill-formed for\n+// bidirectional iterators.\n+static_assert( !std::ranges::sized_range<short_range> );\n+static_assert( !std::ranges::sized_range<short_range&> );"}, {"sha": "d20257c1b3105dd36c7b1d365be78090d3a96de9", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328b52d6751733f6e0f2d31feca44e1d8f2abfc6/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "patch": "@@ -95,7 +95,7 @@ namespace __gnu_test\n #if __cplusplus >= 201103L\n       template<class U>\n       typename std::enable_if<std::is_assignable<T&, U>::value>::type\n-      operator=(U&& new_val)\n+      operator=(U&& new_val) const\n       {\n \tITERATOR_VERIFY(SharedInfo->writtento[ptr - SharedInfo->first] == 0);\n \tSharedInfo->writtento[ptr - SharedInfo->first] = 1;\n@@ -720,6 +720,25 @@ namespace __gnu_test\n       typename Iter<T>::ContainerType bounds;\n     };\n \n+  template<typename T>\n+    using test_contiguous_range\n+      = test_range<T, contiguous_iterator_wrapper>;\n+  template<typename T>\n+    using test_random_access_range\n+      = test_range<T, random_access_iterator_wrapper>;\n+  template<typename T>\n+    using test_bidirectional_range\n+      = test_range<T, bidirectional_iterator_wrapper>;\n+  template<typename T>\n+    using test_forward_range\n+      = test_range<T, forward_iterator_wrapper>;\n+  template<typename T>\n+    using test_input_range\n+      = test_range<T, input_iterator_wrapper>;\n+  template<typename T>\n+    using test_output_range\n+      = test_range<T, output_iterator_wrapper>;\n+\n   // A type meeting the minimum std::sized_range requirements\n   template<typename T, template<typename> class Iter>\n     struct test_sized_range : test_range<T, Iter>\n@@ -729,6 +748,25 @@ namespace __gnu_test\n       std::size_t size() const noexcept\n       { return this->bounds.size(); }\n     };\n+\n+  template<typename T>\n+    using test_contiguous_sized_range\n+      = test_sized_range<T, contiguous_iterator_wrapper>;\n+  template<typename T>\n+    using test_random_access_sized_range\n+      = test_sized_range<T, random_access_iterator_wrapper>;\n+  template<typename T>\n+    using test_bidirectional_sized_range\n+      = test_sized_range<T, bidirectional_iterator_wrapper>;\n+  template<typename T>\n+    using test_forward_sized_range\n+      = test_sized_range<T, forward_iterator_wrapper>;\n+  template<typename T>\n+    using test_input_sized_range\n+      = test_sized_range<T, input_iterator_wrapper>;\n+  template<typename T>\n+    using test_output_sized_range\n+      = test_sized_range<T, output_iterator_wrapper>;\n #endif // C++20\n } // namespace __gnu_test\n #endif // _TESTSUITE_ITERATORS"}]}