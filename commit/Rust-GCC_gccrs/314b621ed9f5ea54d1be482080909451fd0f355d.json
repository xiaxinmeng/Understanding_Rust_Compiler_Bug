{"sha": "314b621ed9f5ea54d1be482080909451fd0f355d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0YjYyMWVkOWY1ZWE1NGQxYmU0ODIwODA5MDk0NTFmZDBmMzU1ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-09-04T23:31:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-09-04T23:31:11Z"}, "message": "re PR rtl-optimization/32300 (ICE with -O2 -fsee)\n\n\tPR rtl-optimization/32300\n\t* see.c (see_copy_insn): New function.\n\t(see_def_extension_not_merged, see_merge_one_use_extension,\n\tsee_merge_one_def_extension): Use it.  Avoid changing\n\tPREV_INSN/NEXT_INSN chains directly, insted emit insns\n\tinto sequences.  Call df_insn_delete on temporary insns\n\tthat won't be emitted into the insn stream.\n\t(rest_of_handle_see): Turn off DF_DEFER_INSN_RESCAN\n\tand run df_process_deferred_rescans () before run_fast_dce.\n\nFrom-SVN: r128108", "tree": {"sha": "71a6fdec7c9ee3531dd4b7a8682abe95311cc9d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71a6fdec7c9ee3531dd4b7a8682abe95311cc9d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/314b621ed9f5ea54d1be482080909451fd0f355d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314b621ed9f5ea54d1be482080909451fd0f355d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/314b621ed9f5ea54d1be482080909451fd0f355d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314b621ed9f5ea54d1be482080909451fd0f355d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3079c44fc5087b8e6f39379062a4b50e42bf49d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3079c44fc5087b8e6f39379062a4b50e42bf49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3079c44fc5087b8e6f39379062a4b50e42bf49d"}], "stats": {"total": 182, "additions": 117, "deletions": 65}, "files": [{"sha": "251141d14fb21c6fa9420778350b9603f5db5f4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b621ed9f5ea54d1be482080909451fd0f355d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b621ed9f5ea54d1be482080909451fd0f355d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=314b621ed9f5ea54d1be482080909451fd0f355d", "patch": "@@ -3,6 +3,16 @@\n \t* config/rs6000/tramp.asm: Include config.h.\n \tCheck __PIC__ or __pic__ macro instead of SHARED.\n \n+\tPR rtl-optimization/32300\n+\t* see.c (see_copy_insn): New function.\n+\t(see_def_extension_not_merged, see_merge_one_use_extension,\n+\tsee_merge_one_def_extension): Use it.  Avoid changing\n+\tPREV_INSN/NEXT_INSN chains directly, insted emit insns\n+\tinto sequences.  Call df_insn_delete on temporary insns\n+\tthat won't be emitted into the insn stream.\n+\t(rest_of_handle_see): Turn off DF_DEFER_INSN_RESCAN\n+\tand run df_process_deferred_rescans () before run_fast_dce.\n+\n \tPR tree-optimization/33017\n \t* tree-data-ref.c (split_constant_offset) <case SSA_NAME>: Don't\n \trecurse for pure or const function calls."}, {"sha": "7a351613b138c05bdfe299f4afe9ec8a23c5995c", "filename": "gcc/see.c", "status": "modified", "additions": 107, "deletions": 65, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b621ed9f5ea54d1be482080909451fd0f355d/gcc%2Fsee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b621ed9f5ea54d1be482080909451fd0f355d/gcc%2Fsee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsee.c?ref=314b621ed9f5ea54d1be482080909451fd0f355d", "patch": "@@ -2412,6 +2412,38 @@ see_replace_src (rtx *x, void *data)\n }\n \n \n+static rtx\n+see_copy_insn (rtx insn)\n+{\n+  rtx pat = copy_insn (PATTERN (insn)), ret;\n+\n+  if (NONJUMP_INSN_P (insn))\n+    ret = make_insn_raw (pat);\n+  else if (JUMP_P (insn))\n+    ret = make_jump_insn_raw (pat);\n+  else if (CALL_P (insn))\n+    {\n+      start_sequence ();\n+      ret = emit_call_insn (pat);\n+      end_sequence ();\n+      if (CALL_INSN_FUNCTION_USAGE (insn))\n+\tCALL_INSN_FUNCTION_USAGE (ret)\n+\t  = copy_rtx (CALL_INSN_FUNCTION_USAGE (insn));\n+      SIBLING_CALL_P (ret) = SIBLING_CALL_P (insn);\n+      CONST_OR_PURE_CALL_P (ret) = CONST_OR_PURE_CALL_P (insn);\n+    }\n+  else\n+    gcc_unreachable ();\n+  if (REG_NOTES (insn))\n+    REG_NOTES (ret) = copy_rtx (REG_NOTES (insn));\n+  INSN_LOCATOR (ret) = INSN_LOCATOR (insn);\n+  RTX_FRAME_RELATED_P (ret) = RTX_FRAME_RELATED_P (insn);\n+  PREV_INSN (ret) = NULL_RTX;\n+  NEXT_INSN (ret) = NULL_RTX;\n+  return ret;\n+}\n+\n+\n /* At this point the pattern is expected to be:\n \n    ref:\t    set (dest_reg) (rhs)\n@@ -2443,14 +2475,13 @@ see_def_extension_not_merged (struct see_ref_s *curr_ref_s, rtx def_se)\n   struct see_replace_data d;\n   /* If the original insn was already merged with an extension before,\n      take the merged one.  */\n-  rtx ref = (curr_ref_s->merged_insn) ? curr_ref_s->merged_insn :\n-\t\t\t\t\tcurr_ref_s->insn;\n-  rtx merged_ref_next = (curr_ref_s->merged_insn) ?\n-  \t\t\tNEXT_INSN (curr_ref_s->merged_insn): NULL_RTX;\n-  rtx ref_copy = copy_rtx (ref);\n+  rtx ref = curr_ref_s->merged_insn\n+\t    ? curr_ref_s->merged_insn : curr_ref_s->insn;\n+  rtx merged_ref_next = curr_ref_s->merged_insn\n+\t\t\t? NEXT_INSN (curr_ref_s->merged_insn) : NULL_RTX;\n+  rtx ref_copy = see_copy_insn (ref);\n   rtx source_extension_reg = see_get_extension_reg (def_se, 0);\n   rtx dest_extension_reg = see_get_extension_reg (def_se, 1);\n-  rtx move_insn = NULL;\n   rtx set, rhs;\n   rtx dest_reg, dest_real_reg;\n   rtx new_pseudo_reg, subreg;\n@@ -2489,25 +2520,22 @@ see_def_extension_not_merged (struct see_ref_s *curr_ref_s, rtx def_se)\n       || insn_invalid_p (ref_copy))\n     {\n       /* The manipulation failed.  */\n+      df_insn_delete (NULL, INSN_UID (ref_copy));\n \n       /* Create a new copy.  */\n-      ref_copy = copy_rtx (ref);\n+      ref_copy = see_copy_insn (ref);\n+\n+      if (curr_ref_s->merged_insn)\n+        df_insn_delete (NULL, INSN_UID (curr_ref_s->merged_insn));\n \n       /* Create a simple move instruction that will replace the def_se.  */\n       start_sequence ();\n+      emit_insn (ref_copy);\n       emit_move_insn (subreg, dest_reg);\n-      move_insn = get_insns ();\n-      end_sequence ();\n-\n-      /* Link the manipulated instruction to the newly created move instruction\n-\t and to the former created move instructions.  */\n-      PREV_INSN (ref_copy) = NULL_RTX;\n-      NEXT_INSN (ref_copy) = move_insn;\n-      PREV_INSN (move_insn) = ref_copy;\n-      NEXT_INSN (move_insn) = merged_ref_next;\n       if (merged_ref_next != NULL_RTX)\n-\tPREV_INSN (merged_ref_next) = move_insn;\n-      curr_ref_s->merged_insn = ref_copy;\n+\temit_insn (merged_ref_next);\n+      curr_ref_s->merged_insn = get_insns ();\n+      end_sequence ();\n \n       if (dump_file)\n \t{\n@@ -2516,7 +2544,7 @@ see_def_extension_not_merged (struct see_ref_s *curr_ref_s, rtx def_se)\n \t  fprintf (dump_file, \"Original ref:\\n\");\n \t  print_rtl_single (dump_file, ref);\n \t  fprintf (dump_file, \"Move insn that was added:\\n\");\n-\t  print_rtl_single (dump_file, move_insn);\n+\t  print_rtl_single (dump_file, NEXT_INSN (curr_ref_s->merged_insn));\n \t}\n       return;\n     }\n@@ -2526,31 +2554,27 @@ see_def_extension_not_merged (struct see_ref_s *curr_ref_s, rtx def_se)\n   /* Try to simplify the new manipulated insn.  */\n   validate_simplify_insn (ref_copy);\n \n+  if (curr_ref_s->merged_insn)\n+    df_insn_delete (NULL, INSN_UID (curr_ref_s->merged_insn));\n+\n   /* Create a simple move instruction to assure the correctness of the code.  */\n   start_sequence ();\n+  emit_insn (ref_copy);\n   emit_move_insn (dest_reg, subreg);\n-  move_insn = get_insns ();\n-  end_sequence ();\n-\n-  /* Link the manipulated instruction to the newly created move instruction and\n-     to the former created move instructions.  */\n-  PREV_INSN (ref_copy) = NULL_RTX;\n-  NEXT_INSN (ref_copy) = move_insn;\n-  PREV_INSN (move_insn) = ref_copy;\n-  NEXT_INSN (move_insn) = merged_ref_next;\n   if (merged_ref_next != NULL_RTX)\n-    PREV_INSN (merged_ref_next) = move_insn;\n-  curr_ref_s->merged_insn = ref_copy;\n+    emit_insn (merged_ref_next);\n+  curr_ref_s->merged_insn = get_insns ();\n+  end_sequence ();\n \n   if (dump_file)\n     {\n       fprintf (dump_file, \"Following merge failure the ref was transformed!\\n\");\n       fprintf (dump_file, \"Original ref:\\n\");\n       print_rtl_single (dump_file, ref);\n       fprintf (dump_file, \"Transformed ref:\\n\");\n-      print_rtl_single (dump_file, ref_copy);\n+      print_rtl_single (dump_file, curr_ref_s->merged_insn);\n       fprintf (dump_file, \"Move insn that was added:\\n\");\n-      print_rtl_single (dump_file, move_insn);\n+      print_rtl_single (dump_file, NEXT_INSN (curr_ref_s->merged_insn));\n     }\n }\n \n@@ -2582,11 +2606,11 @@ see_merge_one_use_extension (void **slot, void *b)\n {\n   struct see_ref_s *curr_ref_s = (struct see_ref_s *) b;\n   rtx use_se = *slot;\n-  rtx ref = (curr_ref_s->merged_insn) ? curr_ref_s->merged_insn :\n-\t\t\t\t\tcurr_ref_s->insn;\n-  rtx merged_ref_next = (curr_ref_s->merged_insn) ?\n-  \t\t\tNEXT_INSN (curr_ref_s->merged_insn): NULL_RTX;\n-  rtx ref_copy = copy_rtx (ref);\n+  rtx ref = curr_ref_s->merged_insn\n+\t    ? curr_ref_s->merged_insn : curr_ref_s->insn;\n+  rtx merged_ref_next = curr_ref_s->merged_insn\n+\t\t\t? NEXT_INSN (curr_ref_s->merged_insn) : NULL_RTX;\n+  rtx ref_copy = see_copy_insn (ref);\n   rtx extension_set = single_set (use_se);\n   rtx extension_rhs = NULL;\n   rtx dest_extension_reg = see_get_extension_reg (use_se, 1);\n@@ -2626,6 +2650,7 @@ see_merge_one_use_extension (void **slot, void *b)\n \t  print_rtl_single (dump_file, use_se);\n \t  print_rtl_single (dump_file, ref);\n \t}\n+      df_insn_delete (NULL, INSN_UID (ref_copy));\n       /* Don't remove the current use_se from the use_se_hash and continue to\n \t the next extension.  */\n       return 1;\n@@ -2644,11 +2669,20 @@ see_merge_one_use_extension (void **slot, void *b)\n \t  print_rtl_single (dump_file, ref);\n \t}\n       htab_clear_slot (curr_ref_s->use_se_hash, (PTR *)slot);\n-      PREV_INSN (ref_copy) = NULL_RTX;\n-      NEXT_INSN (ref_copy) = merged_ref_next;\n+\n+      if (curr_ref_s->merged_insn)\n+\tdf_insn_delete (NULL, INSN_UID (curr_ref_s->merged_insn));\n+\n       if (merged_ref_next != NULL_RTX)\n-\tPREV_INSN (merged_ref_next) = ref_copy;\n-      curr_ref_s->merged_insn = ref_copy;\n+\t{\n+\t  start_sequence ();\n+\t  emit_insn (ref_copy);\n+\t  emit_insn (merged_ref_next);\n+\t  curr_ref_s->merged_insn = get_insns ();\n+\t  end_sequence ();\n+\t}\n+      else\n+\tcurr_ref_s->merged_insn = ref_copy;\n       return 1;\n     }\n \n@@ -2662,6 +2696,7 @@ see_merge_one_use_extension (void **slot, void *b)\n \t  print_rtl_single (dump_file, use_se);\n \t  print_rtl_single (dump_file, ref);\n \t}\n+      df_insn_delete (NULL, INSN_UID (ref_copy));\n       /* Don't remove the current use_se from the use_se_hash and continue to\n \t the next extension.  */\n       return 1;\n@@ -2672,11 +2707,19 @@ see_merge_one_use_extension (void **slot, void *b)\n   /* Try to simplify the new merged insn.  */\n   validate_simplify_insn (ref_copy);\n \n-  PREV_INSN (ref_copy) = NULL_RTX;\n-  NEXT_INSN (ref_copy) = merged_ref_next;\n+  if (curr_ref_s->merged_insn)\n+    df_insn_delete (NULL, INSN_UID (curr_ref_s->merged_insn));\n+\n   if (merged_ref_next != NULL_RTX)\n-    PREV_INSN (merged_ref_next) = ref_copy;\n-  curr_ref_s->merged_insn = ref_copy;\n+    {\n+      start_sequence ();\n+      emit_insn (ref_copy);\n+      emit_insn (merged_ref_next);\n+      curr_ref_s->merged_insn = get_insns ();\n+      end_sequence ();\n+    }\n+  else\n+    curr_ref_s->merged_insn = ref_copy;\n \n   if (dump_file)\n     {\n@@ -2685,7 +2728,7 @@ see_merge_one_use_extension (void **slot, void *b)\n       print_rtl_single (dump_file, use_se);\n       print_rtl_single (dump_file, ref);\n       fprintf (dump_file, \"Merged instruction:\\n\");\n-      print_rtl_single (dump_file, ref_copy);\n+      print_rtl_single (dump_file, curr_ref_s->merged_insn);\n     }\n \n   /* Remove the current use_se from the use_se_hash.  This will prevent it from\n@@ -2726,15 +2769,15 @@ see_merge_one_def_extension (void **slot, void *b)\n   rtx def_se = *slot;\n   /* If the original insn was already merged with an extension before,\n      take the merged one.  */\n-  rtx ref = (curr_ref_s->merged_insn) ? curr_ref_s->merged_insn :\n-\t\t\t\t\tcurr_ref_s->insn;\n-  rtx merged_ref_next = (curr_ref_s->merged_insn) ?\n-  \t\t\tNEXT_INSN (curr_ref_s->merged_insn): NULL_RTX;\n-  rtx ref_copy = copy_rtx (ref);\n+  rtx ref = curr_ref_s->merged_insn\n+\t    ? curr_ref_s->merged_insn : curr_ref_s->insn;\n+  rtx merged_ref_next = curr_ref_s->merged_insn\n+\t\t\t? NEXT_INSN (curr_ref_s->merged_insn) : NULL_RTX;\n+  rtx ref_copy = see_copy_insn (ref);\n   rtx new_set = NULL;\n   rtx source_extension_reg = see_get_extension_reg (def_se, 0);\n   rtx dest_extension_reg = see_get_extension_reg (def_se, 1);\n-  rtx move_insn, *rtx_slot, subreg;\n+  rtx *rtx_slot, subreg;\n   rtx temp_extension = NULL;\n   rtx simplified_temp_extension = NULL;\n   rtx *pat;\n@@ -2763,6 +2806,7 @@ see_merge_one_def_extension (void **slot, void *b)\n \t  print_rtl_single (dump_file, def_se);\n \t}\n \n+      df_insn_delete (NULL, INSN_UID (ref_copy));\n       see_def_extension_not_merged (curr_ref_s, def_se);\n       /* Continue to the next extension.  */\n       return 1;\n@@ -2851,29 +2895,25 @@ see_merge_one_def_extension (void **slot, void *b)\n \t  print_rtl_single (dump_file, def_se);\n \t}\n \n+      df_insn_delete (NULL, INSN_UID (ref_copy));\n       see_def_extension_not_merged (curr_ref_s, def_se);\n       /* Continue to the next extension.  */\n       return 1;\n     }\n \n   /* The merge succeeded!  */\n+  if (curr_ref_s->merged_insn)\n+    df_insn_delete (NULL, INSN_UID (curr_ref_s->merged_insn));\n \n   /* Create a simple move instruction to assure the correctness of the code.  */\n   subreg = gen_lowpart_SUBREG (source_extension_mode, dest_extension_reg);\n   start_sequence ();\n+  emit_insn (ref_copy);\n   emit_move_insn (source_extension_reg, subreg);\n-  move_insn = get_insns ();\n-  end_sequence ();\n-\n-  /* Link the merged instruction to the newly created move instruction and\n-     to the former created move instructions.  */\n-  PREV_INSN (ref_copy) = NULL_RTX;\n-  NEXT_INSN (ref_copy) = move_insn;\n-  PREV_INSN (move_insn) = ref_copy;\n-  NEXT_INSN (move_insn) = merged_ref_next;\n   if (merged_ref_next != NULL_RTX)\n-    PREV_INSN (merged_ref_next) = move_insn;\n-  curr_ref_s->merged_insn = ref_copy;\n+    emit_insn (merged_ref_next);\n+  curr_ref_s->merged_insn = get_insns ();\n+  end_sequence ();\n \n   if (dump_file)\n     {\n@@ -2882,9 +2922,9 @@ see_merge_one_def_extension (void **slot, void *b)\n       print_rtl_single (dump_file, ref);\n       print_rtl_single (dump_file, def_se);\n       fprintf (dump_file, \"Merged instruction:\\n\");\n-      print_rtl_single (dump_file, ref_copy);\n+      print_rtl_single (dump_file, curr_ref_s->merged_insn);\n       fprintf (dump_file, \"Move instruction that was added:\\n\");\n-      print_rtl_single (dump_file, move_insn);\n+      print_rtl_single (dump_file, NEXT_INSN (curr_ref_s->merged_insn));\n     }\n \n   /* Remove the current def_se from the unmerged_def_se_hash and insert it to\n@@ -3814,6 +3854,8 @@ static unsigned int\n rest_of_handle_see (void)\n {\n   see_main ();\n+  df_clear_flags (DF_DEFER_INSN_RESCAN);\n+  df_process_deferred_rescans ();\n   run_fast_dce ();\n   return 0;\n }"}]}