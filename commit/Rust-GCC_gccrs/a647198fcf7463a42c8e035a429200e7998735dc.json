{"sha": "a647198fcf7463a42c8e035a429200e7998735dc", "node_id": "C_kwDOANBUbNoAKGE2NDcxOThmY2Y3NDYzYTQyYzhlMDM1YTQyOTIwMGU3OTk4NzM1ZGM", "commit": {"author": {"name": "Jeff Law", "email": "jlaw@ventanamicro", "date": "2023-04-16T15:55:32Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@ventanamicro", "date": "2023-04-16T15:56:21Z"}, "message": "[committed] [PR target/109508] Adjust conditional move expansion for SFB\n\nRecently the conditional move expander's predicates were loosened for the\nbenefit of the THEAD processors.  In particular one operand that was\npreviously \"register_operand\" is now \"reg_or_0_operand\".  That's fine for\nTHEAD, but breaks for SFB which requires a register for that operand.\n\nThis results in an ICE when compiling the testcase an SFB target such as\nthe sifive s76.\n\nThis change adjusts the expansion code slightly to copy the value into\na register for SFB.\n\nBootstrapped and regression tested (c,c++,fortran only) with a toolchain\nconfigured to enable SFB by default.\n\n\tPR target/109508\ngcc/\n\n\t* config/riscv/riscv.cc (riscv_expand_conditional_move): For\n\tTARGET_SFB_ALU, force the true arm into a register.\n\ngcc/testsuite\n\t* gcc.target/riscv/pr109508.c: New test.", "tree": {"sha": "f0b2a39070f7cf26d4126ed4fac97e7c32734fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0b2a39070f7cf26d4126ed4fac97e7c32734fae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a647198fcf7463a42c8e035a429200e7998735dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a647198fcf7463a42c8e035a429200e7998735dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a647198fcf7463a42c8e035a429200e7998735dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a647198fcf7463a42c8e035a429200e7998735dc/comments", "author": null, "committer": null, "parents": [{"sha": "f006d1a5a1e136be29c78b96c8742ebd3710f4d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f006d1a5a1e136be29c78b96c8742ebd3710f4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f006d1a5a1e136be29c78b96c8742ebd3710f4d0"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "e88fa2d6337a28a911ce0464b8148dab4de21645", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a647198fcf7463a42c8e035a429200e7998735dc/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a647198fcf7463a42c8e035a429200e7998735dc/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=a647198fcf7463a42c8e035a429200e7998735dc", "patch": "@@ -3419,6 +3419,12 @@ riscv_expand_conditional_move (rtx dest, rtx op, rtx cons, rtx alt)\n     {\n       riscv_emit_int_compare (&code, &op0, &op1);\n       rtx cond = gen_rtx_fmt_ee (code, GET_MODE (op0), op0, op1);\n+\n+      /* The expander allows (const_int 0) for CONS for the benefit of\n+\t TARGET_XTHEADCONDMOV, but that case isn't supported for\n+\t TARGET_SFB_ALU.  So force that operand into a register if\n+\t necessary.  */\n+      cons = force_reg (GET_MODE (dest), cons);\n       emit_insn (gen_rtx_SET (dest, gen_rtx_IF_THEN_ELSE (GET_MODE (dest),\n \t\t\t\t\t\t\t  cond, cons, alt)));\n       return true;"}, {"sha": "65f291e17ed830048dd4dec3b74a312022c8f8eb", "filename": "gcc/testsuite/gcc.target/riscv/pr109508.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a647198fcf7463a42c8e035a429200e7998735dc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr109508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a647198fcf7463a42c8e035a429200e7998735dc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr109508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr109508.c?ref=a647198fcf7463a42c8e035a429200e7998735dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=sifive-s76\" } */\n+\n+typedef char __attribute__((__vector_size__ (1))) V;\n+\n+V v;\n+\n+void\n+foo (void)\n+{\n+  (char) __builtin_shuffle (0 % v, (V){6}, v);\n+}"}]}