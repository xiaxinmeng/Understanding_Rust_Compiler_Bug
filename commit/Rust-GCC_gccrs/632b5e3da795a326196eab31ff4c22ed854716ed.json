{"sha": "632b5e3da795a326196eab31ff4c22ed854716ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMyYjVlM2RhNzk1YTMyNjE5NmVhYjMxZmY0YzIyZWQ4NTQ3MTZlZA==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-11-17T23:11:52Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-11-17T23:11:52Z"}, "message": "linux-atomic.c (__kernel_cmpxchg): Change argument 1 to volatile void *.\n\n\t* config/pa/linux-atomic.c (__kernel_cmpxchg): Change argument 1 to\n\tvolatile void *.  Remove trap check.\n\t(__kernel_cmpxchg2): Likewise.\n\t(FETCH_AND_OP_2): Adjust operand types.\n\t(OP_AND_FETCH_2): Likewise.\n\t(FETCH_AND_OP_WORD): Likewise.\n\t(OP_AND_FETCH_WORD): Likewise.\n\t(COMPARE_AND_SWAP_2): Likewise.\n\t(__sync_val_compare_and_swap_4): Likewise.\n\t(__sync_bool_compare_and_swap_4): Likewise.\n\t(SYNC_LOCK_TEST_AND_SET_2): Likewise.\n\t(__sync_lock_test_and_set_4): Likewise.\n\t(SYNC_LOCK_RELEASE_1): Likewise.  Use __kernel_cmpxchg2 for release.\n\t(__sync_lock_release_4): Adjust operand types.  Use __kernel_cmpxchg\n\tfor release.\n\t(__sync_lock_release_8): Remove.\n\nFrom-SVN: r278377", "tree": {"sha": "f056e7c362f2493c691784c10999ab4d7bee2930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f056e7c362f2493c691784c10999ab4d7bee2930"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/632b5e3da795a326196eab31ff4c22ed854716ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632b5e3da795a326196eab31ff4c22ed854716ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632b5e3da795a326196eab31ff4c22ed854716ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632b5e3da795a326196eab31ff4c22ed854716ed/comments", "author": null, "committer": null, "parents": [{"sha": "b906729f81745faae62f2042185858bb48aa40b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b906729f81745faae62f2042185858bb48aa40b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b906729f81745faae62f2042185858bb48aa40b2"}], "stats": {"total": 229, "additions": 129, "deletions": 100}, "files": [{"sha": "16e56967ce8ab51cd5a441a59a0b9f20014584f8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632b5e3da795a326196eab31ff4c22ed854716ed/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632b5e3da795a326196eab31ff4c22ed854716ed/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=632b5e3da795a326196eab31ff4c22ed854716ed", "patch": "@@ -1,3 +1,22 @@\n+2019-11-17  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/linux-atomic.c (__kernel_cmpxchg): Change argument 1 to\n+\tvolatile void *.  Remove trap check.\n+\t(__kernel_cmpxchg2): Likewise.\n+\t(FETCH_AND_OP_2): Adjust operand types.\n+\t(OP_AND_FETCH_2): Likewise.\n+\t(FETCH_AND_OP_WORD): Likewise.\n+\t(OP_AND_FETCH_WORD): Likewise.\n+\t(COMPARE_AND_SWAP_2): Likewise.\n+\t(__sync_val_compare_and_swap_4): Likewise.\n+\t(__sync_bool_compare_and_swap_4): Likewise.\n+\t(SYNC_LOCK_TEST_AND_SET_2): Likewise.\n+\t(__sync_lock_test_and_set_4): Likewise.\n+\t(SYNC_LOCK_RELEASE_1): Likewise.  Use __kernel_cmpxchg2 for release.\n+\t(__sync_lock_release_4): Adjust operand types.  Use __kernel_cmpxchg\n+\tfor release.\n+\t(__sync_lock_release_8): Remove.\n+\n 2019-11-15  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* config/m68k/linux-unwind.h (struct uw_ucontext): Use sigset_t instead"}, {"sha": "4cd69f74cd23448e388fa11f59f5ef92e55701c4", "filename": "libgcc/config/pa/linux-atomic.c", "status": "modified", "additions": 110, "deletions": 100, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632b5e3da795a326196eab31ff4c22ed854716ed/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632b5e3da795a326196eab31ff4c22ed854716ed/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c?ref=632b5e3da795a326196eab31ff4c22ed854716ed", "patch": "@@ -41,7 +41,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* Kernel helper for compare-and-exchange a 32-bit value.  */\n static inline long\n-__kernel_cmpxchg (int *mem, int oldval, int newval)\n+__kernel_cmpxchg (volatile void *mem, int oldval, int newval)\n {\n   register unsigned long lws_mem asm(\"r26\") = (unsigned long) (mem);\n   register int lws_old asm(\"r25\") = oldval;\n@@ -54,20 +54,18 @@ __kernel_cmpxchg (int *mem, int oldval, int newval)\n \t: \"i\" (LWS_CAS), \"r\" (lws_mem), \"r\" (lws_old), \"r\" (lws_new)\n \t: \"r1\", \"r20\", \"r22\", \"r23\", \"r29\", \"r31\", \"memory\"\n   );\n-  if (__builtin_expect (lws_errno == -EFAULT || lws_errno == -ENOSYS, 0))\n-    __builtin_trap ();\n \n   /* If the kernel LWS call succeeded (lws_errno == 0), lws_ret contains\n      the old value from memory.  If this value is equal to OLDVAL, the\n      new value was written to memory.  If not, return -EBUSY.  */\n   if (!lws_errno && lws_ret != oldval)\n-    lws_errno = -EBUSY;\n+    return -EBUSY;\n \n   return lws_errno;\n }\n \n static inline long\n-__kernel_cmpxchg2 (void *mem, const void *oldval, const void *newval,\n+__kernel_cmpxchg2 (volatile void *mem, const void *oldval, const void *newval,\n \t\t   int val_size)\n {\n   register unsigned long lws_mem asm(\"r26\") = (unsigned long) (mem);\n@@ -88,9 +86,6 @@ __kernel_cmpxchg2 (void *mem, const void *oldval, const void *newval,\n   if (__builtin_expect (lws_ret == 0, 1))\n     return 0;\n \n-  if (__builtin_expect (lws_errno == -EFAULT || lws_errno == -ENOSYS, 0))\n-    __builtin_trap ();\n-\n   /* If the kernel LWS call fails with no error, return -EBUSY */\n   if (__builtin_expect (!lws_errno, 0))\n     return -EBUSY;\n@@ -108,87 +103,88 @@ __kernel_cmpxchg2 (void *mem, const void *oldval, const void *newval,\n \n #define FETCH_AND_OP_2(OP, PFX_OP, INF_OP, TYPE, WIDTH, INDEX)\t\t\\\n   TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_fetch_and_##OP##_##WIDTH (TYPE *ptr, TYPE val)\t\t\t\\\n+  __sync_fetch_and_##OP##_##WIDTH (volatile void *ptr, TYPE val)\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     TYPE tmp, newval;\t\t\t\t\t\t\t\\\n     long failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      tmp = __atomic_load_n (ptr, __ATOMIC_RELAXED);\t\t\t\\\n+      tmp = __atomic_load_n ((volatile TYPE *)ptr, __ATOMIC_RELAXED);\t\\\n       newval = PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n       failure = __kernel_cmpxchg2 (ptr, &tmp, &newval, INDEX);\t\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return tmp;\t\t\t\t\t\t\t\t\\\n   }\n \n-FETCH_AND_OP_2 (add,   , +, long long, 8, 3)\n-FETCH_AND_OP_2 (sub,   , -, long long, 8, 3)\n-FETCH_AND_OP_2 (or,    , |, long long, 8, 3)\n-FETCH_AND_OP_2 (and,   , &, long long, 8, 3)\n-FETCH_AND_OP_2 (xor,   , ^, long long, 8, 3)\n-FETCH_AND_OP_2 (nand, ~, &, long long, 8, 3)\n-\n-FETCH_AND_OP_2 (add,   , +, short, 2, 1)\n-FETCH_AND_OP_2 (sub,   , -, short, 2, 1)\n-FETCH_AND_OP_2 (or,    , |, short, 2, 1)\n-FETCH_AND_OP_2 (and,   , &, short, 2, 1)\n-FETCH_AND_OP_2 (xor,   , ^, short, 2, 1)\n-FETCH_AND_OP_2 (nand, ~, &, short, 2, 1)\n-\n-FETCH_AND_OP_2 (add,   , +, signed char, 1, 0)\n-FETCH_AND_OP_2 (sub,   , -, signed char, 1, 0)\n-FETCH_AND_OP_2 (or,    , |, signed char, 1, 0)\n-FETCH_AND_OP_2 (and,   , &, signed char, 1, 0)\n-FETCH_AND_OP_2 (xor,   , ^, signed char, 1, 0)\n-FETCH_AND_OP_2 (nand, ~, &, signed char, 1, 0)\n+FETCH_AND_OP_2 (add,   , +, long long unsigned int, 8, 3)\n+FETCH_AND_OP_2 (sub,   , -, long long unsigned int, 8, 3)\n+FETCH_AND_OP_2 (or,    , |, long long unsigned int, 8, 3)\n+FETCH_AND_OP_2 (and,   , &, long long unsigned int, 8, 3)\n+FETCH_AND_OP_2 (xor,   , ^, long long unsigned int, 8, 3)\n+FETCH_AND_OP_2 (nand, ~, &, long long unsigned int, 8, 3)\n+\n+FETCH_AND_OP_2 (add,   , +, short unsigned int, 2, 1)\n+FETCH_AND_OP_2 (sub,   , -, short unsigned int, 2, 1)\n+FETCH_AND_OP_2 (or,    , |, short unsigned int, 2, 1)\n+FETCH_AND_OP_2 (and,   , &, short unsigned int, 2, 1)\n+FETCH_AND_OP_2 (xor,   , ^, short unsigned int, 2, 1)\n+FETCH_AND_OP_2 (nand, ~, &, short unsigned int, 2, 1)\n+\n+FETCH_AND_OP_2 (add,   , +, unsigned char, 1, 0)\n+FETCH_AND_OP_2 (sub,   , -, unsigned char, 1, 0)\n+FETCH_AND_OP_2 (or,    , |, unsigned char, 1, 0)\n+FETCH_AND_OP_2 (and,   , &, unsigned char, 1, 0)\n+FETCH_AND_OP_2 (xor,   , ^, unsigned char, 1, 0)\n+FETCH_AND_OP_2 (nand, ~, &, unsigned char, 1, 0)\n \n #define OP_AND_FETCH_2(OP, PFX_OP, INF_OP, TYPE, WIDTH, INDEX)\t\t\\\n   TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_##OP##_and_fetch_##WIDTH (TYPE *ptr, TYPE val)\t\t\t\\\n+  __sync_##OP##_and_fetch_##WIDTH (volatile void *ptr, TYPE val)\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     TYPE tmp, newval;\t\t\t\t\t\t\t\\\n     long failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      tmp = __atomic_load_n (ptr, __ATOMIC_RELAXED);\t\t\t\\\n+      tmp = __atomic_load_n ((volatile TYPE *)ptr, __ATOMIC_RELAXED);\t\\\n       newval = PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n       failure = __kernel_cmpxchg2 (ptr, &tmp, &newval, INDEX);\t\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n   }\n \n-OP_AND_FETCH_2 (add,   , +, long long, 8, 3)\n-OP_AND_FETCH_2 (sub,   , -, long long, 8, 3)\n-OP_AND_FETCH_2 (or,    , |, long long, 8, 3)\n-OP_AND_FETCH_2 (and,   , &, long long, 8, 3)\n-OP_AND_FETCH_2 (xor,   , ^, long long, 8, 3)\n-OP_AND_FETCH_2 (nand, ~, &, long long, 8, 3)\n-\n-OP_AND_FETCH_2 (add,   , +, short, 2, 1)\n-OP_AND_FETCH_2 (sub,   , -, short, 2, 1)\n-OP_AND_FETCH_2 (or,    , |, short, 2, 1)\n-OP_AND_FETCH_2 (and,   , &, short, 2, 1)\n-OP_AND_FETCH_2 (xor,   , ^, short, 2, 1)\n-OP_AND_FETCH_2 (nand, ~, &, short, 2, 1)\n-\n-OP_AND_FETCH_2 (add,   , +, signed char, 1, 0)\n-OP_AND_FETCH_2 (sub,   , -, signed char, 1, 0)\n-OP_AND_FETCH_2 (or,    , |, signed char, 1, 0)\n-OP_AND_FETCH_2 (and,   , &, signed char, 1, 0)\n-OP_AND_FETCH_2 (xor,   , ^, signed char, 1, 0)\n-OP_AND_FETCH_2 (nand, ~, &, signed char, 1, 0)\n+OP_AND_FETCH_2 (add,   , +, long long unsigned int, 8, 3)\n+OP_AND_FETCH_2 (sub,   , -, long long unsigned int, 8, 3)\n+OP_AND_FETCH_2 (or,    , |, long long unsigned int, 8, 3)\n+OP_AND_FETCH_2 (and,   , &, long long unsigned int, 8, 3)\n+OP_AND_FETCH_2 (xor,   , ^, long long unsigned int, 8, 3)\n+OP_AND_FETCH_2 (nand, ~, &, long long unsigned int, 8, 3)\n+\n+OP_AND_FETCH_2 (add,   , +, short unsigned int, 2, 1)\n+OP_AND_FETCH_2 (sub,   , -, short unsigned int, 2, 1)\n+OP_AND_FETCH_2 (or,    , |, short unsigned int, 2, 1)\n+OP_AND_FETCH_2 (and,   , &, short unsigned int, 2, 1)\n+OP_AND_FETCH_2 (xor,   , ^, short unsigned int, 2, 1)\n+OP_AND_FETCH_2 (nand, ~, &, short unsigned int, 2, 1)\n+\n+OP_AND_FETCH_2 (add,   , +, unsigned char, 1, 0)\n+OP_AND_FETCH_2 (sub,   , -, unsigned char, 1, 0)\n+OP_AND_FETCH_2 (or,    , |, unsigned char, 1, 0)\n+OP_AND_FETCH_2 (and,   , &, unsigned char, 1, 0)\n+OP_AND_FETCH_2 (xor,   , ^, unsigned char, 1, 0)\n+OP_AND_FETCH_2 (nand, ~, &, unsigned char, 1, 0)\n \n #define FETCH_AND_OP_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n-  int HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_fetch_and_##OP##_4 (int *ptr, int val)\t\t\t\t\\\n+  unsigned int HIDDEN\t\t\t\t\t\t\t\\\n+  __sync_fetch_and_##OP##_4 (volatile void *ptr, unsigned int val)\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    int tmp;\t\t\t\t\t\t\t\t\\\n+    unsigned int tmp;\t\t\t\t\t\t\t\\\n     long failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      tmp = __atomic_load_n (ptr, __ATOMIC_RELAXED);\t\t\t\\\n+      tmp = __atomic_load_n ((volatile unsigned int *)ptr,\t\t\\\n+\t\t\t     __ATOMIC_RELAXED);\t\t\t\t\\\n       failure = __kernel_cmpxchg (ptr, tmp, PFX_OP (tmp INF_OP val));\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -203,14 +199,15 @@ FETCH_AND_OP_WORD (xor,   , ^)\n FETCH_AND_OP_WORD (nand, ~, &)\n \n #define OP_AND_FETCH_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n-  int HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_##OP##_and_fetch_4 (int *ptr, int val)\t\t\t\t\\\n+  unsigned int HIDDEN\t\t\t\t\t\t\t\\\n+  __sync_##OP##_and_fetch_4 (volatile void *ptr, unsigned int val)\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    int tmp;\t\t\t\t\t\t\t\t\\\n+    unsigned int tmp;\t\t\t\t\t\t\t\\\n     long failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      tmp = __atomic_load_n (ptr, __ATOMIC_RELAXED);\t\t\t\\\n+      tmp = __atomic_load_n ((volatile unsigned int *)ptr,\t\t\\\n+\t\t\t     __ATOMIC_RELAXED);\t\t\t\t\\\n       failure = __kernel_cmpxchg (ptr, tmp, PFX_OP (tmp INF_OP val));\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -228,15 +225,16 @@ typedef unsigned char bool;\n \n #define COMPARE_AND_SWAP_2(TYPE, WIDTH, INDEX)\t\t\t\t\\\n   TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_val_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n+  __sync_val_compare_and_swap_##WIDTH (volatile void *ptr, TYPE oldval,\t\\\n \t\t\t\t       TYPE newval)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     TYPE actual_oldval;\t\t\t\t\t\t\t\\\n     long fail;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     while (1)\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tactual_oldval = __atomic_load_n (ptr, __ATOMIC_RELAXED);\t\\\n+\tactual_oldval = __atomic_load_n ((volatile TYPE *)ptr,\t\t\\\n+\t\t\t\t\t __ATOMIC_RELAXED);\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tif (__builtin_expect (oldval != actual_oldval, 0))\t\t\\\n \t  return actual_oldval;\t\t\t\t\t\t\\\n@@ -248,27 +246,29 @@ typedef unsigned char bool;\n       }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  bool HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_bool_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n-\t\t\t\t\tTYPE newval)\t\t\t\\\n+  _Bool HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_bool_compare_and_swap_##WIDTH (volatile void *ptr,\t\t\\\n+\t\t\t\t\tTYPE oldval, TYPE newval)\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     long failure = __kernel_cmpxchg2 (ptr, &oldval, &newval, INDEX);\t\\\n     return (failure == 0);\t\t\t\t\t\t\\\n   }\n \n-COMPARE_AND_SWAP_2 (long long, 8, 3)\n-COMPARE_AND_SWAP_2 (short, 2, 1)\n-COMPARE_AND_SWAP_2 (char, 1, 0)\n+COMPARE_AND_SWAP_2 (long long unsigned int, 8, 3)\n+COMPARE_AND_SWAP_2 (short unsigned int, 2, 1)\n+COMPARE_AND_SWAP_2 (unsigned char, 1, 0)\n \n-int HIDDEN\n-__sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n+unsigned int HIDDEN\n+__sync_val_compare_and_swap_4 (volatile void *ptr, unsigned int oldval,\n+\t\t\t       unsigned int newval)\n {\n   long fail;\n-  int actual_oldval;\n+  unsigned int actual_oldval;\n     \n   while (1)\n     {\n-      actual_oldval = __atomic_load_n (ptr, __ATOMIC_RELAXED);\n+      actual_oldval = __atomic_load_n ((volatile unsigned int *)ptr,\n+\t\t\t\t       __ATOMIC_RELAXED);\n \n       if (__builtin_expect (oldval != actual_oldval, 0))\n \treturn actual_oldval;\n@@ -280,64 +280,74 @@ __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n     }\n }\n \n-bool HIDDEN\n-__sync_bool_compare_and_swap_4 (int *ptr, int oldval, int newval)\n+_Bool HIDDEN\n+__sync_bool_compare_and_swap_4 (volatile void *ptr, unsigned int oldval,\n+\t\t\t\tunsigned int newval)\n {\n   long failure = __kernel_cmpxchg (ptr, oldval, newval);\n   return (failure == 0);\n }\n \n #define SYNC_LOCK_TEST_AND_SET_2(TYPE, WIDTH, INDEX)\t\t\t\\\n TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_lock_test_and_set_##WIDTH (TYPE *ptr, TYPE val)\t\t\\\n+  __sync_lock_test_and_set_##WIDTH (volatile void *ptr, TYPE val)\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     TYPE oldval;\t\t\t\t\t\t\t\\\n     long failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      oldval = __atomic_load_n (ptr, __ATOMIC_RELAXED);\t\t\t\\\n+      oldval = __atomic_load_n ((volatile TYPE *)ptr,\t\t\t\\\n+\t\t\t\t__ATOMIC_RELAXED);\t\t\t\\\n       failure = __kernel_cmpxchg2 (ptr, &oldval, &val, INDEX);\t\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return oldval;\t\t\t\t\t\t\t\\\n   }\n \n-SYNC_LOCK_TEST_AND_SET_2 (long long, 8, 3)\n-SYNC_LOCK_TEST_AND_SET_2 (short, 2, 1)\n-SYNC_LOCK_TEST_AND_SET_2 (signed char, 1, 0)\n+SYNC_LOCK_TEST_AND_SET_2 (long long unsigned int, 8, 3)\n+SYNC_LOCK_TEST_AND_SET_2 (short unsigned int, 2, 1)\n+SYNC_LOCK_TEST_AND_SET_2 (unsigned char, 1, 0)\n \n-int HIDDEN\n-__sync_lock_test_and_set_4 (int *ptr, int val)\n+unsigned int HIDDEN\n+__sync_lock_test_and_set_4 (volatile void *ptr, unsigned int val)\n {\n   long failure;\n-  int oldval;\n+  unsigned int oldval;\n \n   do {\n-    oldval = __atomic_load_n (ptr, __ATOMIC_RELAXED);\n+    oldval = __atomic_load_n ((volatile unsigned int *)ptr, __ATOMIC_RELAXED);\n     failure = __kernel_cmpxchg (ptr, oldval, val);\n   } while (failure != 0);\n \n   return oldval;\n }\n \n-void HIDDEN\n-__sync_lock_release_8 (long long *ptr)\n-{\n-  /* All accesses must be complete before we release the lock.  */\n-  __sync_synchronize ();\n-  *(double *)ptr = 0;\n-}\n-\n-#define SYNC_LOCK_RELEASE_1(TYPE, WIDTH)\t\t\t\\\n+#define SYNC_LOCK_RELEASE_1(TYPE, WIDTH, INDEX)\t\t\t\\\n   void HIDDEN\t\t\t\t\t\t\t\\\n-  __sync_lock_release_##WIDTH (TYPE *ptr)\t\t\t\\\n+  __sync_lock_release_##WIDTH (volatile void *ptr)\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    /* All accesses must be complete before we release\t\t\\\n-       the lock.  */\t\t\t\t\t\t\\\n-    __sync_synchronize ();\t\t\t\t\t\\\n-    *ptr = 0;\t\t\t\t\t\t\t\\\n+    TYPE oldval, val = 0;\t\t\t\t\t\\\n+    long failure;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+      oldval = __atomic_load_n ((volatile TYPE *)ptr,\t\t\\\n+\t\t\t\t__ATOMIC_RELAXED);\t\t\\\n+      failure = __kernel_cmpxchg2 (ptr, &oldval, &val, INDEX);\t\\\n+    } while (failure != 0);\t\t\t\t\t\\\n   }\n \n-SYNC_LOCK_RELEASE_1 (int, 4)\n-SYNC_LOCK_RELEASE_1 (short, 2)\n-SYNC_LOCK_RELEASE_1 (signed char, 1)\n+SYNC_LOCK_RELEASE_1 (long long unsigned int, 8, 3)\n+SYNC_LOCK_RELEASE_1 (short unsigned int, 2, 1)\n+SYNC_LOCK_RELEASE_1 (unsigned char, 1, 0)\n+\n+void HIDDEN\n+__sync_lock_release_4 (volatile void *ptr)\n+{\n+  long failure;\n+  unsigned int oldval;\n+\n+  do {\n+    oldval = __atomic_load_n ((volatile unsigned int *)ptr, __ATOMIC_RELAXED);\n+    failure = __kernel_cmpxchg (ptr, oldval, 0);\n+  } while (failure != 0);\n+}"}]}