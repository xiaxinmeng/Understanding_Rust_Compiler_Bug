{"sha": "7156c8abaf8f39f797463f60ec353b86c5c95bf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1NmM4YWJhZjhmMzlmNzk3NDYzZjYwZWMzNTNiODZjNWM5NWJmNg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2009-04-21T11:55:41Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2009-04-21T11:55:41Z"}, "message": "tree-switch-conversion.c (build_constructors): Split a long line.\n\n2009-04-21  Martin Jambor  <mjambor@suse.cz>\n\n\t* tree-switch-conversion.c (build_constructors): Split a long line.\n\t(constructor_contains_same_values_p): New function.\n\t(build_one_array): Create assigns of constants if possible, do not call\n\tmark_sym_for_renaming, call update_stmt.\n\t(build_arrays): Call make_ssa_name (create_tmp_var ()) instead of\n\tmake_rename_temp.  Do not call mark_symbols_for_renaming, call\n\tupdate_stmt.\n\t(gen_def_assigns): Do not call mark_symbols_for_renaming or\n\tfind_new_referenced_vars, call update_stmt.\n\t(gen_inbound_check): Use create_tmp_var and create ssa names manually\n\tinstead of calling make_rename_temp.  Do not call\n\tfind_new_referenced_vars or mark_symbols_for_renaming, call\n\tupdate_stmt.\n\n\t* testsuite/gcc.dg/tree-ssa/cswtch-2.c: New test.\n\nFrom-SVN: r146517", "tree": {"sha": "fd4ec847acca33df4423c4f1151b16fb17e28b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd4ec847acca33df4423c4f1151b16fb17e28b01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7156c8abaf8f39f797463f60ec353b86c5c95bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7156c8abaf8f39f797463f60ec353b86c5c95bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7156c8abaf8f39f797463f60ec353b86c5c95bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7156c8abaf8f39f797463f60ec353b86c5c95bf6/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed2807f4cd9f1beaa1b4f0deac28279e02718bb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9"}], "stats": {"total": 161, "additions": 115, "deletions": 46}, "files": [{"sha": "bc15d1ee0e6d8073fa792c80e733555ff815e17f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7156c8abaf8f39f797463f60ec353b86c5c95bf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7156c8abaf8f39f797463f60ec353b86c5c95bf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7156c8abaf8f39f797463f60ec353b86c5c95bf6", "patch": "@@ -1,3 +1,19 @@\n+2009-04-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* tree-switch-conversion.c (build_constructors): Split a long line.\n+\t(constructor_contains_same_values_p): New function.\n+\t(build_one_array): Create assigns of constants if possible, do not call\n+\tmark_sym_for_renaming, call update_stmt.\n+\t(build_arrays): Call make_ssa_name (create_tmp_var ()) instead of\n+\tmake_rename_temp.  Do not call mark_symbols_for_renaming, call\n+\tupdate_stmt.\n+\t(gen_def_assigns): Do not call mark_symbols_for_renaming or\n+\tfind_new_referenced_vars, call update_stmt.\n+\t(gen_inbound_check): Use create_tmp_var and create ssa names manually\n+\tinstead of calling make_rename_temp.  Do not call\n+\tfind_new_referenced_vars or mark_symbols_for_renaming, call\n+\tupdate_stmt.\n+\n 2009-04-21  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39827"}, {"sha": "d966304b5c35ad85ea905a82a525c5e03c8ac28d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7156c8abaf8f39f797463f60ec353b86c5c95bf6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7156c8abaf8f39f797463f60ec353b86c5c95bf6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7156c8abaf8f39f797463f60ec353b86c5c95bf6", "patch": "@@ -1,3 +1,7 @@\n+2009-04-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/cswtch-2.c: New test.\n+\n 2009-04-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR 16202"}, {"sha": "ec1d28fe32938eccdb342470fc66f42210a5aa73", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cswtch-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7156c8abaf8f39f797463f60ec353b86c5c95bf6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcswtch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7156c8abaf8f39f797463f60ec353b86c5c95bf6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcswtch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcswtch-2.c?ref=7156c8abaf8f39f797463f60ec353b86c5c95bf6", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-switchconv\" } */\n+\n+typedef enum { a = 5, b = 6, c = 7, d = 8, e = 9 } X;\n+\n+int h1 (X x)\n+{\n+  switch (x) {\n+  case a:\n+  case b:\n+  case c:\n+  case d:\n+  case e:\n+    return 1;\n+  default:\n+    return 0;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"CSWTCH\" 0 \"switchconv\" } } */\n+/* { dg-final { cleanup-tree-dump \"switchconv\" } } */"}, {"sha": "eade177baf662c1a1930afce7723375cfa51635c", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 74, "deletions": 46, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7156c8abaf8f39f797463f60ec353b86c5c95bf6/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7156c8abaf8f39f797463f60ec353b86c5c95bf6/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=7156c8abaf8f39f797463f60ec353b86c5c95bf6", "patch": "@@ -453,60 +453,89 @@ build_constructors (gimple swtch)\n \t      elt->value = val;\n \n \t      pos = int_const_binop (PLUS_EXPR, pos, integer_one_node, 0);\n-\t    } while (!tree_int_cst_lt (high, pos) && tree_int_cst_lt (low, pos));\n+\t    } while (!tree_int_cst_lt (high, pos)\n+\t\t     && tree_int_cst_lt (low, pos));\n \t  j++;\n \t}\n     }\n }\n \n+/* If all values in the constructor vector are the same, return the value.\n+   Otherwise return NULL_TREE.  Not supposed to be called for empty\n+   vectors.  */\n+\n+static tree\n+constructor_contains_same_values_p (VEC (constructor_elt, gc) *vec)\n+{\n+  int i, len = VEC_length (constructor_elt, vec);\n+  tree prev = NULL_TREE;\n+\n+  for (i = 0; i < len; i++)\n+    {\n+      constructor_elt *elt = VEC_index (constructor_elt, vec, i);\n+      \n+      if (!prev)\n+\tprev = elt->value;\n+      else if (!operand_equal_p (elt->value, prev, OEP_ONLY_CONST))\n+\treturn NULL_TREE;\n+    }\n+  return prev;\n+}\n+\n /* Create an appropriate array type and declaration and assemble a static array\n    variable.  Also create a load statement that initializes the variable in\n    question with a value from the static array.  SWTCH is the switch statement\n    being converted, NUM is the index to arrays of constructors, default values\n    and target SSA names for this particular array.  ARR_INDEX_TYPE is the type\n    of the index of the new array, PHI is the phi node of the final BB that\n    corresponds to the value that will be loaded from the created array.  TIDX\n-   is a temporary variable holding the index for loads from the new array.  */\n+   is an ssa name of a temporary variable holding the index for loads from the\n+   new array.  */\n \n static void\n build_one_array (gimple swtch, int num, tree arr_index_type, gimple phi,\n \t\t tree tidx)\n {\n-  tree array_type, ctor, decl, value_type, name, fetch;\n+  tree name, cst;\n   gimple load;\n-  gimple_stmt_iterator gsi;\n+  gimple_stmt_iterator gsi = gsi_for_stmt (swtch);\n \n   gcc_assert (info.default_values[num]);\n-  value_type = TREE_TYPE (info.default_values[num]);\n-  array_type = build_array_type (value_type, arr_index_type);\n-\n-  ctor = build_constructor (array_type, info.constructors[num]);\n-  TREE_CONSTANT (ctor) = true;\n-\n-  decl = build_decl (VAR_DECL, NULL_TREE, array_type);\n-  TREE_STATIC (decl) = 1;\n-  DECL_INITIAL (decl) = ctor;\n-\n-  DECL_NAME (decl) = create_tmp_var_name (\"CSWTCH\");\n-  DECL_ARTIFICIAL (decl) = 1;\n-  TREE_CONSTANT (decl) = 1;\n-  add_referenced_var (decl);\n-  varpool_mark_needed_node (varpool_node (decl));\n-  varpool_finalize_decl (decl);\n-  mark_sym_for_renaming (decl);\n \n   name = make_ssa_name (SSA_NAME_VAR (PHI_RESULT (phi)), NULL);\n   info.target_inbound_names[num] = name;\n \n-  fetch = build4 (ARRAY_REF, value_type, decl, tidx, NULL_TREE,\n-\t\t  NULL_TREE);\n-  load = gimple_build_assign (name, fetch);\n-  SSA_NAME_DEF_STMT (name) = load;\n+  cst = constructor_contains_same_values_p (info.constructors[num]);\n+  if (cst)\n+    load = gimple_build_assign (name, cst);\n+  else\n+    {\n+      tree array_type, ctor, decl, value_type, fetch;\n+\n+      value_type = TREE_TYPE (info.default_values[num]);\n+      array_type = build_array_type (value_type, arr_index_type);\n+      ctor = build_constructor (array_type, info.constructors[num]);\n+      TREE_CONSTANT (ctor) = true;\n+\n+      decl = build_decl (VAR_DECL, NULL_TREE, array_type);\n+      TREE_STATIC (decl) = 1;\n+      DECL_INITIAL (decl) = ctor;\n+\n+      DECL_NAME (decl) = create_tmp_var_name (\"CSWTCH\");\n+      DECL_ARTIFICIAL (decl) = 1;\n+      TREE_CONSTANT (decl) = 1;\n+      add_referenced_var (decl);\n+      varpool_mark_needed_node (varpool_node (decl));\n+      varpool_finalize_decl (decl);\n+\n+      fetch = build4 (ARRAY_REF, value_type, decl, tidx, NULL_TREE,\n+\t\t      NULL_TREE);\n+      load = gimple_build_assign (name, fetch);\n+    }\n \n-  gsi = gsi_for_stmt (swtch);\n+  SSA_NAME_DEF_STMT (name) = load;\n   gsi_insert_before (&gsi, load, GSI_SAME_STMT);\n-  mark_symbols_for_renaming (load);\n-\n+  update_stmt (load);\n   info.arr_ref_last = load;\n }\n \n@@ -526,16 +555,17 @@ build_arrays (gimple swtch)\n   gsi = gsi_for_stmt (swtch);\n \n   arr_index_type = build_index_type (info.range_size);\n-  tidx = make_rename_temp (arr_index_type, \"csti\");\n+  tidx = make_ssa_name (create_tmp_var (arr_index_type, \"csti\"), NULL);\n   sub = fold_build2 (MINUS_EXPR, TREE_TYPE (info.index_expr), info.index_expr,\n \t\t     fold_convert (TREE_TYPE (info.index_expr),\n \t\t\t\t   info.range_min));\n   sub = force_gimple_operand_gsi (&gsi, fold_convert (arr_index_type, sub),\n \t\t\t\t  false, NULL, true, GSI_SAME_STMT);\n   stmt = gimple_build_assign (tidx, sub);\n+  SSA_NAME_DEF_STMT (tidx) = stmt;\n \n   gsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n-  mark_symbols_for_renaming (stmt);\n+  update_stmt (stmt);\n   info.arr_ref_first = stmt;\n \n   for (gsi = gsi_start_phis (info.final_bb), i = 0;\n@@ -561,8 +591,7 @@ gen_def_assigns (gimple_stmt_iterator *gsi)\n       assign = gimple_build_assign (name, info.default_values[i]);\n       SSA_NAME_DEF_STMT (name) = assign;\n       gsi_insert_before (gsi, assign, GSI_SAME_STMT);\n-      find_new_referenced_vars (assign);\n-      mark_symbols_for_renaming (assign);\n+      update_stmt (assign);\n     }\n   return assign;\n }\n@@ -640,7 +669,7 @@ gen_inbound_check (gimple swtch)\n   gimple label1, label2, label3;\n \n   tree utype;\n-  tree tmp_u;\n+  tree tmp_u_1, tmp_u_2, tmp_u_var;\n   tree cast;\n   gimple cast_assign, minus_assign;\n   tree ulb, minus;\n@@ -664,30 +693,29 @@ gen_inbound_check (gimple swtch)\n \n   /* (end of) block 0 */\n   gsi = gsi_for_stmt (info.arr_ref_first);\n-  tmp_u = make_rename_temp (utype, \"csui\");\n+  tmp_u_var = create_tmp_var (utype, \"csui\");\n+  tmp_u_1 = make_ssa_name (tmp_u_var, NULL);\n \n   cast = fold_convert (utype, info.index_expr);\n-  cast_assign = gimple_build_assign (tmp_u, cast);\n-  find_new_referenced_vars (cast_assign);\n+  cast_assign = gimple_build_assign (tmp_u_1, cast);\n+  SSA_NAME_DEF_STMT (tmp_u_1) = cast_assign;\n   gsi_insert_before (&gsi, cast_assign, GSI_SAME_STMT);\n-  mark_symbols_for_renaming (cast_assign);\n+  update_stmt (cast_assign);\n \n   ulb = fold_convert (utype, info.range_min);\n-  minus = fold_build2 (MINUS_EXPR, utype, tmp_u, ulb);\n+  minus = fold_build2 (MINUS_EXPR, utype, tmp_u_1, ulb);\n   minus = force_gimple_operand_gsi (&gsi, minus, false, NULL, true,\n \t\t\t\t    GSI_SAME_STMT);\n-  minus_assign = gimple_build_assign (tmp_u, minus);\n-  find_new_referenced_vars (minus_assign);\n+  tmp_u_2 = make_ssa_name (tmp_u_var, NULL);\n+  minus_assign = gimple_build_assign (tmp_u_2, minus);\n+  SSA_NAME_DEF_STMT (tmp_u_2) = minus_assign;\n   gsi_insert_before (&gsi, minus_assign, GSI_SAME_STMT);\n-  mark_symbols_for_renaming (minus_assign);\n+  update_stmt (minus_assign);\n \n   bound = fold_convert (utype, info.range_size);\n-\n-  cond_stmt = gimple_build_cond (LE_EXPR, tmp_u, bound, NULL_TREE, NULL_TREE);\n-\n-  find_new_referenced_vars (cond_stmt);\n+  cond_stmt = gimple_build_cond (LE_EXPR, tmp_u_2, bound, NULL_TREE, NULL_TREE);\n   gsi_insert_before (&gsi, cond_stmt, GSI_SAME_STMT);\n-  mark_symbols_for_renaming (cond_stmt);\n+  update_stmt (cond_stmt);\n \n   /* block 2 */\n   gsi = gsi_for_stmt (info.arr_ref_first);"}]}