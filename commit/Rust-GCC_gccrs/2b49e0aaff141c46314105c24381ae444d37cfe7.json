{"sha": "2b49e0aaff141c46314105c24381ae444d37cfe7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI0OWUwYWFmZjE0MWM0NjMxNDEwNWMyNDM4MWFlNDQ0ZDM3Y2ZlNw==", "commit": {"author": {"name": "Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2003-11-20T03:35:57Z"}, "committer": {"name": "R. Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2003-11-20T03:35:57Z"}, "message": "arc-protos.h: Update to C90 prototypes.\n\n2003-11-19  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* config/arc/arc-protos.h: Update to C90 prototypes.\n\t* config/arc/arc.c: Likewise.\n\t* config/arc/initfini.c: Likewise.\n\nFrom-SVN: r73753", "tree": {"sha": "d483f64a59090ea4629500031fa98cfc29743d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d483f64a59090ea4629500031fa98cfc29743d8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b49e0aaff141c46314105c24381ae444d37cfe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b49e0aaff141c46314105c24381ae444d37cfe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b49e0aaff141c46314105c24381ae444d37cfe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b49e0aaff141c46314105c24381ae444d37cfe7/comments", "author": null, "committer": null, "parents": [{"sha": "c2a141a0f3fe5472f667083fa3f94bbfc1e400c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a141a0f3fe5472f667083fa3f94bbfc1e400c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a141a0f3fe5472f667083fa3f94bbfc1e400c2"}], "stats": {"total": 324, "additions": 129, "deletions": 195}, "files": [{"sha": "1a82222a279067101c4262b90d58dfa7deb31919", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b49e0aaff141c46314105c24381ae444d37cfe7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b49e0aaff141c46314105c24381ae444d37cfe7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b49e0aaff141c46314105c24381ae444d37cfe7", "patch": "@@ -1,3 +1,9 @@\n+2003-11-19  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* config/arc/arc-protos.h: Update to C90 prototypes.\n+\t* config/arc/arc.c: Likewise.\n+\t* config/arc/initfini.c: Likewise.\n+\n 2003-11-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* stmt.c (expand_goto): Memory clobbers added."}, {"sha": "681e9e1ad92af747ce8db916e479a888e14995f4", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b49e0aaff141c46314105c24381ae444d37cfe7/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b49e0aaff141c46314105c24381ae444d37cfe7/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=2b49e0aaff141c46314105c24381ae444d37cfe7", "patch": "@@ -20,58 +20,57 @@ Boston, MA 02111-1307, USA.  */\n \n #ifdef RTX_CODE\n #ifdef TREE_CODE\n-extern void arc_va_start PARAMS ((tree, rtx));\n-extern rtx arc_va_arg PARAMS ((tree, tree));\n+extern void arc_va_start (tree, rtx);\n+extern rtx arc_va_arg (tree, tree);\n #endif /* TREE_CODE */\n \n-extern enum machine_mode arc_select_cc_mode PARAMS ((enum rtx_code, rtx, rtx));\n+extern enum machine_mode arc_select_cc_mode (enum rtx_code, rtx, rtx);\n \n /* Define the function that build the compare insn for scc and bcc.  */\n-extern struct rtx_def *gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n+extern struct rtx_def *gen_compare_reg (enum rtx_code, rtx, rtx);\n \n /* Declarations for various fns used in the .md file.  */\n-extern const char *output_shift PARAMS ((rtx *));\n+extern const char *output_shift (rtx *);\n \n-extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n-extern int arc_double_limm_p PARAMS ((rtx));\n-extern int arc_eligible_for_epilogue_delay PARAMS ((rtx, int));\n-extern void arc_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n-extern void arc_print_operand PARAMS ((FILE *, rtx, int));\n-extern void arc_print_operand_address PARAMS ((FILE *, rtx));\n-extern void arc_final_prescan_insn PARAMS ((rtx, rtx *, int));\n-extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n-extern int call_operand PARAMS ((rtx, enum machine_mode));\n-extern int symbolic_memory_operand PARAMS ((rtx, enum machine_mode));\n-extern int short_immediate_operand PARAMS ((rtx, enum machine_mode));\n-extern int long_immediate_operand PARAMS ((rtx, enum machine_mode));\n-extern int long_immediate_loadstore_operand PARAMS ((rtx, enum machine_mode));\n-extern int move_src_operand PARAMS ((rtx, enum machine_mode));\n-extern int move_double_src_operand PARAMS ((rtx, enum machine_mode));\n-extern int move_dest_operand PARAMS ((rtx, enum machine_mode));\n-extern int load_update_operand PARAMS ((rtx, enum machine_mode));\n-extern int store_update_operand PARAMS ((rtx, enum machine_mode));\n-extern int nonvol_nonimm_operand PARAMS ((rtx, enum machine_mode));\n-extern int const_sint32_operand PARAMS ((rtx, enum machine_mode));\n-extern int const_uint32_operand PARAMS ((rtx, enum machine_mode));\n-extern int proper_comparison_operator PARAMS ((rtx, enum machine_mode));\n-extern int shift_operator PARAMS ((rtx, enum machine_mode));\n+extern int symbolic_operand (rtx, enum machine_mode);\n+extern int arc_double_limm_p (rtx);\n+extern int arc_eligible_for_epilogue_delay (rtx, int);\n+extern void arc_initialize_trampoline (rtx, rtx, rtx);\n+extern void arc_print_operand (FILE *, rtx, int);\n+extern void arc_print_operand_address (FILE *, rtx);\n+extern void arc_final_prescan_insn (rtx, rtx *, int);\n+extern int call_address_operand (rtx, enum machine_mode);\n+extern int call_operand (rtx, enum machine_mode);\n+extern int symbolic_memory_operand (rtx, enum machine_mode);\n+extern int short_immediate_operand (rtx, enum machine_mode);\n+extern int long_immediate_operand (rtx, enum machine_mode);\n+extern int long_immediate_loadstore_operand (rtx, enum machine_mode);\n+extern int move_src_operand (rtx, enum machine_mode);\n+extern int move_double_src_operand (rtx, enum machine_mode);\n+extern int move_dest_operand (rtx, enum machine_mode);\n+extern int load_update_operand (rtx, enum machine_mode);\n+extern int store_update_operand (rtx, enum machine_mode);\n+extern int nonvol_nonimm_operand (rtx, enum machine_mode);\n+extern int const_sint32_operand (rtx, enum machine_mode);\n+extern int const_uint32_operand (rtx, enum machine_mode);\n+extern int proper_comparison_operator (rtx, enum machine_mode);\n+extern int shift_operator (rtx, enum machine_mode);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern enum arc_function_type arc_compute_function_type PARAMS ((tree));\n-extern void arc_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t\tenum machine_mode, tree,\n-\t\t\t\t\t\tint *, int));\n+extern enum arc_function_type arc_compute_function_type (tree);\n+extern void arc_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t\ttree, int *, int);\n #endif /* TREE_CODE */\n \n \n-extern void arc_init PARAMS ((void));\n-extern unsigned int arc_compute_frame_size PARAMS ((int));\n-extern void arc_save_restore PARAMS ((FILE *, const char *, unsigned int,\n-\t\t\t\t      unsigned int, const char *));\n-extern int arc_delay_slots_for_epilogue PARAMS ((void));\n-extern void arc_finalize_pic PARAMS ((void));\n-extern void arc_ccfsm_at_label PARAMS ((const char *, int));\n-extern int arc_ccfsm_branch_deleted_p PARAMS ((void));\n-extern void arc_ccfsm_record_branch_deleted PARAMS ((void));\n+extern void arc_init (void);\n+extern unsigned int arc_compute_frame_size (int);\n+extern void arc_save_restore (FILE *, const char *, unsigned int,\n+\t\t\t      unsigned int, const char *);\n+extern int arc_delay_slots_for_epilogue (void);\n+extern void arc_finalize_pic (void);\n+extern void arc_ccfsm_at_label (const char *, int);\n+extern int arc_ccfsm_branch_deleted_p (void);\n+extern void arc_ccfsm_record_branch_deleted (void);\n "}, {"sha": "7cf119ec9a2b652ba80ff69721fa1bff6c53fe64", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 79, "deletions": 150, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b49e0aaff141c46314105c24381ae444d37cfe7/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b49e0aaff141c46314105c24381ae444d37cfe7/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=2b49e0aaff141c46314105c24381ae444d37cfe7", "patch": "@@ -86,18 +86,18 @@ static int arc_ccfsm_target_label;\n    arc_print_operand.  */\n static int last_insn_set_cc_p;\n static int current_insn_set_cc_p;\n-static void record_cc_ref PARAMS ((rtx));\n-static void arc_init_reg_tables PARAMS ((void));\n-static int get_arc_condition_code PARAMS ((rtx));\n+static void record_cc_ref (rtx);\n+static void arc_init_reg_tables (void);\n+static int get_arc_condition_code (rtx);\n const struct attribute_spec arc_attribute_table[];\n-static tree arc_handle_interrupt_attribute PARAMS ((tree *, tree, tree, int, bool *));\n-static bool arc_assemble_integer PARAMS ((rtx, unsigned int, int));\n-static void arc_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void arc_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void arc_file_start PARAMS ((void));\n-static void arc_internal_label PARAMS ((FILE *, const char *, unsigned long));\n-static bool arc_rtx_costs PARAMS ((rtx, int, int, int *));\n-static int arc_address_cost PARAMS ((rtx));\n+static tree arc_handle_interrupt_attribute (tree *, tree, tree, int, bool *);\n+static bool arc_assemble_integer (rtx, unsigned int, int);\n+static void arc_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void arc_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static void arc_file_start (void);\n+static void arc_internal_label (FILE *, const char *, unsigned long);\n+static bool arc_rtx_costs (rtx, int, int, int *);\n+static int arc_address_cost (rtx);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -128,7 +128,7 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n \n void\n-arc_init ()\n+arc_init (void)\n {\n   char *tmp;\n   \n@@ -183,8 +183,7 @@ static const char *const arc_condition_codes[] =\n    `(eq (...) (...))'.  */\n \n static int\n-get_arc_condition_code (comparison)\n-     rtx comparison;\n+get_arc_condition_code (rtx comparison)\n {\n   switch (GET_CODE (comparison))\n     {\n@@ -208,9 +207,9 @@ get_arc_condition_code (comparison)\n    return the mode to be used for the comparison.  */\n \n enum machine_mode\n-arc_select_cc_mode (op, x, y)\n-     enum rtx_code op;\n-     rtx x, y ATTRIBUTE_UNUSED;\n+arc_select_cc_mode (enum rtx_code op,\n+\t            rtx x ATTRIBUTE_UNUSED,\n+                    rtx y ATTRIBUTE_UNUSED)\n {\n   switch (op)\n     {\n@@ -284,7 +283,7 @@ unsigned int arc_mode_class [NUM_MACHINE_MODES];\n enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n static void\n-arc_init_reg_tables ()\n+arc_init_reg_tables (void)\n {\n   int i;\n \n@@ -357,12 +356,11 @@ const struct attribute_spec arc_attribute_table[] =\n /* Handle an \"interrupt\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n-arc_handle_interrupt_attribute (node, name, args, flags, no_add_attrs)\n-     tree *node ATTRIBUTE_UNUSED;\n-     tree name;\n-     tree args;\n-     int flags ATTRIBUTE_UNUSED;\n-     bool *no_add_attrs;\n+arc_handle_interrupt_attribute (tree *node ATTRIBUTE_UNUSED,\n+                                tree name,\n+                                tree args,\n+                                int flags ATTRIBUTE_UNUSED,\n+                                bool *no_add_attrs)\n {\n   tree value = TREE_VALUE (args);\n \n@@ -387,19 +385,15 @@ arc_handle_interrupt_attribute (node, name, args, flags, no_add_attrs)\n /* Acceptable arguments to the call insn.  */\n \n int\n-call_address_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+call_address_operand (rtx op, enum machine_mode mode)\n {\n   return (symbolic_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT && LEGITIMATE_CONSTANT_P (op))\n \t  || (GET_CODE (op) == REG));\n }\n \n int\n-call_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+call_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) != MEM)\n     return 0;\n@@ -410,9 +404,7 @@ call_operand (op, mode)\n /* Returns 1 if OP is a symbol reference.  */\n \n int\n-symbolic_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   switch (GET_CODE (op))\n     {\n@@ -429,9 +421,7 @@ symbolic_operand (op, mode)\n    operand of mode MODE.  */\n \n int\n-symbolic_memory_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+symbolic_memory_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (op) == SUBREG)\n     op = SUBREG_REG (op);\n@@ -445,9 +435,7 @@ symbolic_memory_operand (op, mode)\n /* Return true if OP is a short immediate (shimm) value.  */\n \n int\n-short_immediate_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+short_immediate_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (op) != CONST_INT)\n     return 0;\n@@ -458,9 +446,7 @@ short_immediate_operand (op, mode)\n    This is currently only used when calculating length attributes.  */\n \n int\n-long_immediate_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+long_immediate_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   switch (GET_CODE (op))\n     {\n@@ -488,9 +474,8 @@ long_immediate_operand (op, mode)\n    This is currently only used when calculating length attributes.  */\n \n int\n-long_immediate_loadstore_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+long_immediate_loadstore_operand (rtx op,\n+                                  enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (op) != MEM)\n     return 0;\n@@ -530,9 +515,7 @@ long_immediate_loadstore_operand (op, mode)\n    move source.  */\n \n int\n-move_src_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+move_src_operand (rtx op, enum machine_mode mode)\n {\n   switch (GET_CODE (op))\n     {\n@@ -572,9 +555,7 @@ move_src_operand (op, mode)\n    move source.  */\n \n int\n-move_double_src_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+move_double_src_operand (rtx op, enum machine_mode mode)\n {\n   switch (GET_CODE (op))\n     {\n@@ -604,9 +585,7 @@ move_double_src_operand (op, mode)\n /* Return true if OP is an acceptable argument for a move destination.  */\n \n int\n-move_dest_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+move_dest_operand (rtx op, enum machine_mode mode)\n {\n   switch (GET_CODE (op))\n     {\n@@ -629,9 +608,7 @@ move_dest_operand (op, mode)\n /* Return true if OP is valid load with update operand.  */\n \n int\n-load_update_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+load_update_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) != MEM\n       || GET_MODE (op) != mode)\n@@ -648,9 +625,7 @@ load_update_operand (op, mode)\n /* Return true if OP is valid store with update operand.  */\n \n int\n-store_update_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+store_update_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) != MEM\n       || GET_MODE (op) != mode)\n@@ -670,9 +645,7 @@ store_update_operand (op, mode)\n    and only the standard movXX patterns are set up to handle them.  */\n \n int\n-nonvol_nonimm_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+nonvol_nonimm_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) == MEM && MEM_VOLATILE_P (op))\n     return 0;\n@@ -684,9 +657,7 @@ nonvol_nonimm_operand (op, mode)\n    contexts.  */\n \n int\n-const_sint32_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+const_sint32_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   /* All allowed constants will fit a CONST_INT.  */\n   return (GET_CODE (op) == CONST_INT\n@@ -698,9 +669,7 @@ const_sint32_operand (op, mode)\n    need some extra crud to make it work when hosted on 64-bit machines.  */\n \n int\n-const_uint32_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+const_uint32_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n #if HOST_BITS_PER_WIDE_INT > 32\n   /* All allowed constants will fit a CONST_INT.  */\n@@ -719,9 +688,7 @@ const_uint32_operand (op, mode)\n    comparisons that use the bits that are valid.  */\n \n int\n-proper_comparison_operator (op, mode)\n-    rtx op;\n-    enum machine_mode mode ATTRIBUTE_UNUSED;\n+proper_comparison_operator (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   enum rtx_code code = GET_CODE (op);\n \n@@ -742,9 +709,7 @@ proper_comparison_operator (op, mode)\n    return the rtx for the cc reg in the proper mode.  */\n \n rtx\n-gen_compare_reg (code, x, y)\n-     enum rtx_code code;\n-     rtx x, y;\n+gen_compare_reg (enum rtx_code code, rtx x, rtx y)\n {\n   enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n   rtx cc_reg;\n@@ -761,8 +726,7 @@ gen_compare_reg (code, x, y)\n    We assume the value can be either signed or unsigned.  */\n \n int\n-arc_double_limm_p (value)\n-     rtx value;\n+arc_double_limm_p (rtx value)\n {\n   HOST_WIDE_INT low, high;\n \n@@ -798,12 +762,11 @@ arc_double_limm_p (value)\n    to compensate.  */\n \n void\n-arc_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n-     CUMULATIVE_ARGS *cum;\n-     enum machine_mode mode;\n-     tree type ATTRIBUTE_UNUSED;\n-     int *pretend_size;\n-     int no_rtl;\n+arc_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n+                            enum machine_mode mode,\n+                            tree type ATTRIBUTE_UNUSED,\n+                            int *pretend_size,\n+                            int no_rtl)\n {\n   int first_anon_arg;\n \n@@ -845,11 +808,7 @@ arc_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-arc_rtx_costs (x, code, outer_code, total)\n-     rtx x;\n-     int code;\n-     int outer_code ATTRIBUTE_UNUSED;\n-     int *total;\n+arc_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n {\n   switch (code)\n     {\n@@ -903,8 +862,7 @@ arc_rtx_costs (x, code, outer_code, total)\n    If ADDR is not a valid address, its cost is irrelevant.  */\n \n static int\n-arc_address_cost (addr)\n-     rtx addr;\n+arc_address_cost (rtx addr)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -1019,8 +977,7 @@ static struct arc_frame_info zero_frame_info;\n    call with DECL = NULL_TREE.  */\n \n enum arc_function_type\n-arc_compute_function_type (decl)\n-     tree decl;\n+arc_compute_function_type (tree decl)\n {\n   tree a;\n   /* Cached value.  */\n@@ -1090,8 +1047,7 @@ arc_compute_function_type (decl)\n    SIZE is the size needed for local variables.  */\n \n unsigned int\n-arc_compute_frame_size (size)\n-     int size;\t\t\t/* # of var. bytes allocated.  */\n+arc_compute_frame_size (int size /* # of var. bytes allocated. */)\n {\n   int regno;\n   unsigned int total_size, var_size, args_size, pretend_size, extra_size;\n@@ -1155,12 +1111,11 @@ arc_compute_frame_size (size)\n /* Common code to save/restore registers.  */\n \n void\n-arc_save_restore (file, base_reg, offset, gmask, op)\n-     FILE *file;\n-     const char *base_reg;\n-     unsigned int offset;\n-     unsigned int gmask;\n-     const char *op;\n+arc_save_restore (FILE *file,\n+                  const char *base_reg,\n+                  unsigned int offset,\n+                  unsigned int gmask,\n+                  const char *op)\n {\n   int regno;\n \n@@ -1183,10 +1138,7 @@ arc_save_restore (file, base_reg, offset, gmask, op)\n    symbols.  */\n \n static bool\n-arc_assemble_integer (x, size, aligned_p)\n-     rtx x;\n-     unsigned int size;\n-     int aligned_p;\n+arc_assemble_integer (rtx x, unsigned int size, int aligned_p)\n {\n   if (size == UNITS_PER_WORD && aligned_p\n       && ((GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FUNCTION_P (x))\n@@ -1203,9 +1155,7 @@ arc_assemble_integer (x, size, aligned_p)\n /* Set up the stack and frame pointer (if desired) for the function.  */\n \n static void\n-arc_output_function_prologue (file, size)\n-     FILE *file;\n-     HOST_WIDE_INT size;\n+arc_output_function_prologue (FILE *file, HOST_WIDE_INT size)\n {\n   const char *sp_str = reg_names[STACK_POINTER_REGNUM];\n   const char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n@@ -1281,9 +1231,7 @@ arc_output_function_prologue (file, size)\n    and regs.  */\n \n static void\n-arc_output_function_epilogue (file, size)\n-     FILE *file;\n-     HOST_WIDE_INT size;\n+arc_output_function_epilogue (FILE *file, HOST_WIDE_INT size)\n {\n   rtx epilogue_delay = current_function_epilogue_delay_list;\n   int noepilogue = FALSE;\n@@ -1446,7 +1394,7 @@ arc_output_function_epilogue (file, size)\n    delay slot so for now we only consider functions with empty frames.  */\n \n int\n-arc_delay_slots_for_epilogue ()\n+arc_delay_slots_for_epilogue (void)\n {\n   if (arc_compute_function_type (current_function_decl) != ARC_FUNCTION_NORMAL)\n     return 0;\n@@ -1462,9 +1410,7 @@ arc_delay_slots_for_epilogue ()\n    pointer or any call-saved register is OK.  SLOT will always be 0.  */\n \n int\n-arc_eligible_for_epilogue_delay (trial, slot)\n-     rtx trial;\n-     int slot;\n+arc_eligible_for_epilogue_delay (rtx trial, int slot)\n {\n   if (slot != 0)\n     abort ();\n@@ -1489,17 +1435,15 @@ arc_eligible_for_epilogue_delay (trial, slot)\n /* Emit special PIC prologues and epilogues.  */\n \n void\n-arc_finalize_pic ()\n+arc_finalize_pic (void)\n {\n   /* nothing to do */\n }\n \f\n /* Return true if OP is a shift operator.  */\n \n int\n-shift_operator (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+shift_operator (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   switch (GET_CODE (op))\n     {\n@@ -1527,8 +1471,7 @@ shift_operator (op, mode)\n    using it here will give us a chance to play with it.  */\n \n const char *\n-output_shift (operands)\n-     rtx *operands;\n+output_shift (rtx *operands)\n {\n   rtx shift = operands[3];\n   enum machine_mode mode = GET_MODE (shift);\n@@ -1649,16 +1592,17 @@ output_shift (operands)\n    CXT is an RTX for the static chain value for the function.  */\n \n void\n-arc_initialize_trampoline (tramp, fnaddr, cxt)\n-     rtx tramp ATTRIBUTE_UNUSED, fnaddr ATTRIBUTE_UNUSED, cxt ATTRIBUTE_UNUSED;\n+arc_initialize_trampoline (rtx tramp ATTRIBUTE_UNUSED,\n+                           rtx fnaddr ATTRIBUTE_UNUSED,\n+                           rtx cxt ATTRIBUTE_UNUSED)\n {\n }\n \f\n /* Set the cpu type and print out other fancy things,\n    at the top of the file.  */\n \n static void\n-arc_file_start ()\n+arc_file_start (void)\n {\n   default_file_start ();\n   fprintf (asm_out_file, \"\\t.cpu %s\\n\", arc_cpu_string);\n@@ -1669,10 +1613,7 @@ arc_file_start ()\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */\n \n void\n-arc_print_operand (file, x, code)\n-     FILE *file;\n-     rtx x;\n-     int code;\n+arc_print_operand (FILE *file, rtx x, int code)\n {\n   switch (code)\n     {\n@@ -1884,9 +1825,7 @@ arc_print_operand (file, x, code)\n /* Print a memory address as an operand to reference that memory location.  */\n \n void\n-arc_print_operand_address (file, addr)\n-     FILE *file;\n-     rtx addr;\n+arc_print_operand_address (FILE *file, rtx addr)\n {\n   register rtx base, index = 0;\n   int offset = 0;\n@@ -1943,8 +1882,7 @@ arc_print_operand_address (file, addr)\n /* Update compare/branch separation marker.  */\n \n static void\n-record_cc_ref (insn)\n-     rtx insn;\n+record_cc_ref (rtx insn)\n {\n   last_insn_set_cc_p = current_insn_set_cc_p;\n \n@@ -2000,10 +1938,9 @@ record_cc_ref (insn)\n    we may not be outputting the branch.  */\n \n void\n-arc_final_prescan_insn (insn, opvec, noperands)\n-     rtx insn;\n-     rtx *opvec ATTRIBUTE_UNUSED;\n-     int noperands ATTRIBUTE_UNUSED;\n+arc_final_prescan_insn (rtx insn,\n+                        rtx *opvec ATTRIBUTE_UNUSED,\n+                        int noperands ATTRIBUTE_UNUSED)\n {\n   /* BODY will hold the body of INSN.  */\n   register rtx body = PATTERN (insn);\n@@ -2285,9 +2222,7 @@ arc_final_prescan_insn (insn, opvec, noperands)\n    Called from (*targetm.asm_out.internal_label).  */\n \n void\n-arc_ccfsm_at_label (prefix, num)\n-     const char *prefix;\n-     int num;\n+arc_ccfsm_at_label (const char *prefix, int num)\n {\n   if (arc_ccfsm_state == 3 && arc_ccfsm_target_label == num\n       && !strcmp (prefix, \"L\"))\n@@ -2301,7 +2236,7 @@ arc_ccfsm_at_label (prefix, num)\n    deleted.  */\n \n int\n-arc_ccfsm_branch_deleted_p ()\n+arc_ccfsm_branch_deleted_p (void)\n {\n   if (arc_ccfsm_state == 1 || arc_ccfsm_state == 2)\n     return 1;\n@@ -2312,7 +2247,7 @@ arc_ccfsm_branch_deleted_p ()\n    conditionalized.  */\n \n void\n-arc_ccfsm_record_branch_deleted ()\n+arc_ccfsm_record_branch_deleted (void)\n {\n   /* Indicate we're conditionalizing insns now.  */\n   arc_ccfsm_state += 2;\n@@ -2324,9 +2259,7 @@ arc_ccfsm_record_branch_deleted ()\n }\n \f\n void\n-arc_va_start (valist, nextarg)\n-     tree valist;\n-     rtx nextarg;\n+arc_va_start (tree valist, rtx nextarg)\n {\n   /* See arc_setup_incoming_varargs for reasons for this oddity.  */\n   if (current_function_args_info < 8\n@@ -2337,8 +2270,7 @@ arc_va_start (valist, nextarg)\n }\n \n rtx\n-arc_va_arg (valist, type)\n-     tree valist, type;\n+arc_va_arg (tree valist, tree type)\n {\n   rtx addr_rtx;\n   tree addr, incr;\n@@ -2413,10 +2345,7 @@ arc_va_arg (valist, type)\n    PREFIX is the class of label and NUM is the number within the class.  */\n \n static void\n-arc_internal_label (stream, prefix, labelno)\n-     FILE *stream;\n-     const char *prefix;\n-     unsigned long labelno;\n+arc_internal_label (FILE *stream, const char *prefix, unsigned long labelno)\n {\n   arc_ccfsm_at_label (prefix, labelno);\n   default_internal_label (stream, prefix, labelno);"}, {"sha": "ca88a76aee96272e457f3bdd8321cb5653ae8838", "filename": "gcc/config/arc/initfini.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b49e0aaff141c46314105c24381ae444d37cfe7/gcc%2Fconfig%2Farc%2Finitfini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b49e0aaff141c46314105c24381ae444d37cfe7/gcc%2Fconfig%2Farc%2Finitfini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Finitfini.c?ref=2b49e0aaff141c46314105c24381ae444d37cfe7", "patch": "@@ -66,11 +66,11 @@ static func_ptr __DTOR_LIST__[1] __attribute__ ((section (\".dtors\")))\n    refers to one particular associated `__DTOR_LIST__' which belongs to the\n    same particular root executable or shared library file.  */\n \n-static void __do_global_dtors ()\n+static void __do_global_dtors (void)\n asm (\"__do_global_dtors\") __attribute__ ((section (\".text\")));\n \n static void\n-__do_global_dtors ()\n+__do_global_dtors (void)\n {\n   func_ptr *p;\n   for (p = __DTOR_LIST__ + 1; *p; p++)\n@@ -125,11 +125,11 @@ static func_ptr __DTOR_END__[1] __attribute__ ((section (\".dtors\")))\n /* Run all global constructors for the program.\n    Note that they are run in reverse order.  */\n \n-static void __do_global_ctors ()\n+static void __do_global_ctors (void)\n asm (\"__do_global_ctors\") __attribute__ ((section (\".text\")));\n \n static void\n-__do_global_ctors ()\n+__do_global_ctors (void)\n {\n   func_ptr *p;\n   for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)"}]}