{"sha": "8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhYThiNjU5MGQxOTg4YWIxZDEzZmYyMGQxMzE3YmJkZDM3NDhmYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-07-13T22:23:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-07-13T22:23:38Z"}, "message": "re PR c++/44540 (ICE: in add_substitution, at cp/mangle.c:386 with -fkeep-inline-functions)\n\n\tPR c++/44540\n\t* mangle.c (write_type): Canonicalize.\n\t(canonicalize_for_substitution): Retain cv-quals on FUNCTION_TYPE.\n\t(write_CV_qualifiers_for_type): Ignore them in abi>=5.\n\nFrom-SVN: r162158", "tree": {"sha": "0ed2c5f3efea47a0a55677b4aabbbfe9cdd71329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ed2c5f3efea47a0a55677b4aabbbfe9cdd71329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcfaf838305395aff5c8caa67faa8d0ef7a4e2c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfaf838305395aff5c8caa67faa8d0ef7a4e2c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcfaf838305395aff5c8caa67faa8d0ef7a4e2c6"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "c0769292a892050b2e16eca715f265d5512fc036", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "patch": "@@ -1,3 +1,10 @@\n+2010-07-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44540\n+\t* mangle.c (write_type): Canonicalize.\n+\t(canonicalize_for_substitution): Retain cv-quals on FUNCTION_TYPE.\n+\t(write_CV_qualifiers_for_type): Ignore them in abi>=5.\n+\n 2010-07-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44908"}, {"sha": "9390a929adf347ccf677e2bb6658de1853168dcb", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "patch": "@@ -346,11 +346,19 @@ canonicalize_for_substitution (tree node)\n   if (TYPE_P (node)\n       && TYPE_CANONICAL (node) != node\n       && TYPE_MAIN_VARIANT (node) != node)\n+    {\n       /* Here we want to strip the topmost typedef only.\n          We need to do that so is_std_substitution can do proper\n          name matching.  */\n-    node = cp_build_qualified_type (TYPE_MAIN_VARIANT (node),\n-                                    cp_type_quals (node));\n+      if (TREE_CODE (node) == FUNCTION_TYPE)\n+\t/* Use build_qualified_type and TYPE_QUALS here to preserve\n+\t   the old buggy mangling of attribute noreturn with abi<5.  */\n+\tnode = build_qualified_type (TYPE_MAIN_VARIANT (node),\n+\t\t\t\t     TYPE_QUALS (node));\n+      else\n+\tnode = cp_build_qualified_type (TYPE_MAIN_VARIANT (node),\n+\t\t\t\t\tcp_type_quals (node));\n+    }\n   return node;\n }\n \n@@ -1776,6 +1784,7 @@ write_type (tree type)\n   if (type == error_mark_node)\n     return;\n \n+  type = canonicalize_for_substitution (type);\n   if (find_substitution (type))\n     return;\n \n@@ -1978,6 +1987,12 @@ write_CV_qualifiers_for_type (const tree type)\n      array.  */\n   cp_cv_quals quals = TYPE_QUALS (type);\n \n+  /* Attribute const/noreturn are not reflected in mangling.  */\n+  if (abi_version_at_least (5)\n+      && (TREE_CODE (type) == FUNCTION_TYPE\n+\t  || TREE_CODE (type) == METHOD_TYPE))\n+    return 0;\n+\n   if (quals & TYPE_QUAL_RESTRICT)\n     {\n       write_char ('r');"}, {"sha": "b998da373c492eb2264d708e75a603b483356ba9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "patch": "@@ -1,3 +1,9 @@\n+2010-07-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44540\n+\t* g++.dg/abi/noreturn1.C: New.\n+\t* g++.dg/abi/noreturn2.C: New.\n+\n 2010-07-13  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR other/44874"}, {"sha": "0532cf2f80342dbd969d164ba0652d7b22455512", "filename": "gcc/testsuite/g++.dg/abi/noreturn1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnoreturn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnoreturn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnoreturn1.C?ref=8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "patch": "@@ -0,0 +1,14 @@\n+// Test that attribute noreturn is not part of the mangled name.\n+// { dg-options -fabi-version=0 }\n+\n+void baz (const char *fmt, ...);\n+\n+// { dg-final { scan-assembler \"_Z3barPFvPKczE\" } }\n+void bar (void (*baz) (const char *fmt, ...)\n+\t\t\t   __attribute__ ((noreturn, format (printf, 1, 2))));\n+\n+void\n+foo ()\n+{\n+  bar (&baz);\n+}"}, {"sha": "72accafe6600f14f9678cf76e3eb912b03050f31", "filename": "gcc/testsuite/g++.dg/abi/noreturn2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnoreturn2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnoreturn2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnoreturn2.C?ref=8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "patch": "@@ -0,0 +1,14 @@\n+// Test for buggy mangling of attribute noreturn in abi<=4\n+// { dg-options -fabi-version=4 }\n+\n+void baz (const char *fmt, ...);\n+\n+// { dg-final { scan-assembler \"_Z3barPVFvPKczE\" } }\n+void bar (void (*baz) (const char *fmt, ...)\n+\t\t\t   __attribute__ ((noreturn, format (printf, 1, 2))));\n+\n+void\n+foo ()\n+{\n+  bar (&baz);\n+}"}]}