{"sha": "a63719408d011cff3a51cdfaceb61c34f1d9c38e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYzNzE5NDA4ZDAxMWNmZjNhNTFjZGZhY2ViNjFjMzRmMWQ5YzM4ZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-05-26T05:28:26Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-05-26T05:28:26Z"}, "message": "toplev.c (debug_args, [...]): Mark descriptions for translation.\n\n\t* toplev.c (debug_args, f_options, W_options): Mark\n\tdescriptions for translation.\n\t(display_help): Translate descriptions on output.\n\n\t* cp/lang-options.h, f/lang-options.h, java/lang-options.h,\n\tobjc/lang-options.h: Mark descriptions for translation.\n\nFrom-SVN: r42618", "tree": {"sha": "d6c0bf82c607c084bd2e1c006afbeb9fc8813840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6c0bf82c607c084bd2e1c006afbeb9fc8813840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a63719408d011cff3a51cdfaceb61c34f1d9c38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a63719408d011cff3a51cdfaceb61c34f1d9c38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a63719408d011cff3a51cdfaceb61c34f1d9c38e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a63719408d011cff3a51cdfaceb61c34f1d9c38e/comments", "author": null, "committer": null, "parents": [{"sha": "05e126346a8a32f5e34c169a11dc3635d67347f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e126346a8a32f5e34c169a11dc3635d67347f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05e126346a8a32f5e34c169a11dc3635d67347f1"}], "stats": {"total": 835, "additions": 514, "deletions": 321}, "files": [{"sha": "c06c14f2d70d4348bd50206a418cec0ce9d07c17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a63719408d011cff3a51cdfaceb61c34f1d9c38e", "patch": "@@ -1,5 +1,12 @@\n 2001-05-25  Zack Weinberg  <zackw@stanford.edu>\n \n+\t* toplev.c (debug_args, f_options, W_options): Mark\n+\tdescriptions for translation.\n+\t(display_help): Translate descriptions on output.\n+\n+\t* cp/lang-options.h, f/lang-options.h, java/lang-options.h,\n+\tobjc/lang-options.h: Mark descriptions for translation.\n+\n \t* aclocal.m4: Quote final argument of patsubst.  Use\n \t3-argument form of AC_DEFINE.  Restore quotes to [] while\n \tusing AC_FD_CC."}, {"sha": "d023248326489cf662346ab2085ddb3f55311a74", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 82, "deletions": 41, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=a63719408d011cff3a51cdfaceb61c34f1d9c38e", "patch": "@@ -25,97 +25,138 @@ DEFINE_LANG_NAME (\"C++\")\n    toplev.c for g++.  */\n \n   { \"-faccess-control\", \"\" },\n-  { \"-fno-access-control\", \"Do not obey access control semantics\" },\n-  { \"-falt-external-templates\", \"Change when template instances are emitted\" },\n+  { \"-fno-access-control\", \n+    N_(\"Do not obey access control semantics\") },\n+  { \"-falt-external-templates\", \n+    N_(\"Change when template instances are emitted\") },\n   { \"-fno-alt-external-templates\", \"\" },\n   { \"-fansi-overloading\", \"\" },\n   { \"-fno-ansi-overloading\", \"\" },\n-  { \"-fcheck-new\", \"Check the return value of new\" },\n+  { \"-fcheck-new\", \n+    N_(\"Check the return value of new\") },\n   { \"-fno-check-new\", \"\" },\n-  { \"-fconserve-space\", \"Reduce size of object files\" },\n+  { \"-fconserve-space\", \n+    N_(\"Reduce size of object files\") },\n   { \"-fno-conserve-space\", \"\" },\n   { \"-fconst-strings\", \"\" },\n-  { \"-fno-const-strings\", \"Make string literals `char[]' instead of `const char[]'\" },\n+  { \"-fno-const-strings\", \n+    N_(\"Make string literals `char[]' instead of `const char[]'\") },\n   { \"-fdefault-inline\", \"\" },\n-  { \"-fdump-translation-unit-\", \"Dump the entire translation unit to a file\"},\n-  { \"-fno-default-inline\", \"Do not inline member functions by default\"},\n+  { \"-fdump-translation-unit-\", \n+    N_(\"Dump the entire translation unit to a file\") },\n+  { \"-fno-default-inline\", \n+    N_(\"Do not inline member functions by default\") },\n   { \"-frtti\", \"\" },\n-  { \"-fno-rtti\", \"Do not generate run time type descriptor information\" },\n+  { \"-fno-rtti\", \n+    N_(\"Do not generate run time type descriptor information\") },\n   { \"-felide-constructors\", \"\" },\n   { \"-fno-elide-constructors\", \"\" },\n   { \"-fenforce-eh-specs\", \"\" },\n-  { \"-fno-enforce-eh-specs\", \"Do not generate code to check exception specifications\" },\n+  { \"-fno-enforce-eh-specs\", \n+    N_(\"Do not generate code to check exception specifications\") },\n   { \"-fexternal-templates\", \"\" },\n   { \"-fno-external-templates\", \"\" },\n   { \"-ffor-scope\", \"\" },\n-  { \"-fno-for-scope\", \"Scope of for-init-statement vars extends outside\" },\n+  { \"-fno-for-scope\", \n+    N_(\"Scope of for-init-statement vars extends outside\") },\n   { \"-fgnu-keywords\", \"\" },\n-  { \"-fno-gnu-keywords\", \"Do not recognise GNU defined keywords\" },\n+  { \"-fno-gnu-keywords\", \n+    N_(\"Do not recognise GNU defined keywords\") },\n   { \"-fhandle-exceptions\", \"\" },\n   { \"-fno-handle-exceptions\", \"\" },\n-  { \"-fhonor-std\", \"Treat the namespace `std' as a normal namespace\" },\n+  { \"-fhonor-std\", \n+    N_(\"Treat the namespace `std' as a normal namespace\") },\n   { \"-fno-honor-std\", \"\" },\n-  { \"-fhuge-objects\", \"Enable support for huge objects\" },\n+  { \"-fhuge-objects\", \n+    N_(\"Enable support for huge objects\") },\n   { \"-fno-huge-objects\", \"\" },\n   { \"-fimplement-inlines\", \"\" },\n-  { \"-fno-implement-inlines\", \"Export functions even if they can be inlined\" },\n+  { \"-fno-implement-inlines\", \n+    N_(\"Export functions even if they can be inlined\") },\n   { \"-fimplicit-templates\", \"\" },\n-  { \"-fno-implicit-templates\", \"Only emit explicit template instatiations\" },\n+  { \"-fno-implicit-templates\", \n+    N_(\"Only emit explicit template instatiations\") },\n   { \"-fimplicit-inline-templates\", \"\" },\n-  { \"-fno-implicit-inline-templates\", \"Only emit explicit instatiations of inline templates\" },\n+  { \"-fno-implicit-inline-templates\", \n+    N_(\"Only emit explicit instatiations of inline templates\") },\n   { \"-finit-priority\", \"\" },\n   { \"-fno-init-priority\", \"\" },\n   { \"-fmemoize-lookups\", \"\" },\n   { \"-fno-memoize-lookups\", \"\" },\n-  { \"-fms-extensions\", \"Don't pedwarn about uses of Microsoft extensions\" },\n+  { \"-fms-extensions\", \n+    N_(\"Don't pedwarn about uses of Microsoft extensions\") },\n   { \"-fno-ms-extensions\", \"\" },\n-  { \"-foperator-names\", \"Recognise and/bitand/bitor/compl/not/or/xor\" },\n+  { \"-foperator-names\", \n+    N_(\"Recognise and/bitand/bitor/compl/not/or/xor\") },\n   { \"-fno-operator-names\", \"\" },\n   { \"-foptional-diags\", \"\" },\n-  { \"-fno-optional-diags\", \"Disable optional diagnostics\" },\n-  { \"-fpermissive\", \"Downgrade conformance errors to warnings\" },\n+  { \"-fno-optional-diags\", \n+    N_(\"Disable optional diagnostics\") },\n+  { \"-fpermissive\", \n+    N_(\"Downgrade conformance errors to warnings\") },\n   { \"-fno-permissive\", \"\" },\n-  { \"-frepo\", \"Enable automatic template instantiation\" },\n+  { \"-frepo\", \n+    N_(\"Enable automatic template instantiation\") },\n   { \"-fno-repo\", \"\" },\n   { \"-fsave-memoized\", \"\" },\n   { \"-fno-save-memoized\", \"\" },\n-  { \"-fstats\", \"Display statistics accumulated during compilation\" },\n+  { \"-fstats\", \n+    N_(\"Display statistics accumulated during compilation\") },\n   { \"-fno-stats\", \"\" },\n-  { \"-ftemplate-depth-\", \"Specify maximum template instantiation depth\"},\n-  { \"-fuse-cxa-atexit\", \"Use __cxa_atexit to register destructors.\" },\n+  { \"-ftemplate-depth-\", \n+    N_(\"Specify maximum template instantiation depth\") },\n+  { \"-fuse-cxa-atexit\", \n+    N_(\"Use __cxa_atexit to register destructors.\") },\n   { \"-fno-use-cxa-atexit\", \"\" },\n-  { \"-fvtable-gc\", \"Discard unused virtual functions\" },\n+  { \"-fvtable-gc\", \n+    N_(\"Discard unused virtual functions\") },\n   { \"-fno-vtable-gc\", \"\" },\n-  { \"-fvtable-thunks\", \"Implement vtables using thunks\" },\n+  { \"-fvtable-thunks\", \n+    N_(\"Implement vtables using thunks\") },\n   { \"-fno-vtable-thunks\", \"\" },\n-  { \"-fweak\", \"Emit common-like symbols as weak symbols\" },\n+  { \"-fweak\", \n+    N_(\"Emit common-like symbols as weak symbols\") },\n   { \"-fno-weak\", \"\" },\n-  { \"-fxref\", \"Emit cross referencing information\" },\n+  { \"-fxref\", \n+    N_(\"Emit cross referencing information\") },\n   { \"-fno-xref\", \"\" },\n \n-  { \"-Wreturn-type\", \"Warn about inconsistent return types\" },\n+  { \"-Wreturn-type\", \n+    N_(\"Warn about inconsistent return types\") },\n   { \"-Wno-return-type\", \"\" },\n-  { \"-Woverloaded-virtual\", \"Warn about overloaded virtual function names\" },\n+  { \"-Woverloaded-virtual\", \n+    N_(\"Warn about overloaded virtual function names\") },\n   { \"-Wno-overloaded-virtual\", \"\" },\n   { \"-Wctor-dtor-privacy\", \"\" },\n-  { \"-Wno-ctor-dtor-privacy\", \"Don't warn when all ctors/dtors are private\" },\n-  { \"-Wnon-virtual-dtor\", \"Warn about non virtual destructors\" },\n+  { \"-Wno-ctor-dtor-privacy\", \n+    N_(\"Don't warn when all ctors/dtors are private\") },\n+  { \"-Wnon-virtual-dtor\", \n+    N_(\"Warn about non virtual destructors\") },\n   { \"-Wno-non-virtual-dtor\", \"\" },\n-  { \"-Wextern-inline\", \"Warn when a function is declared extern, then inline\" },\n+  { \"-Wextern-inline\", \n+    N_(\"Warn when a function is declared extern, then inline\") },\n   { \"-Wno-extern-inline\", \"\" },\n-  { \"-Wreorder\", \"Warn when the compiler reorders code\" },\n+  { \"-Wreorder\", \n+    N_(\"Warn when the compiler reorders code\") },\n   { \"-Wno-reorder\", \"\" },\n-  { \"-Wsynth\", \"Warn when synthesis behaviour differs from Cfront\" },\n+  { \"-Wsynth\", \n+    N_(\"Warn when synthesis behaviour differs from Cfront\") },\n   { \"-Wno-synth\", \"\" },\n   { \"-Wpmf-conversions\", \"\" },\n-  { \"-Wno-pmf-conversions\", \"Don't warn when type converting pointers to member functions\" },\n-  { \"-Weffc++\", \"Warn about violations of Effective C++ style rules\" },\n+  { \"-Wno-pmf-conversions\", \n+    N_(\"Don't warn when type converting pointers to member functions\") },\n+  { \"-Weffc++\", \n+    N_(\"Warn about violations of Effective C++ style rules\") },\n   { \"-Wno-effc++\", \"\" },\n-  { \"-Wsign-promo\", \"Warn when overload promotes from unsigned to signed\" },\n+  { \"-Wsign-promo\", \n+    N_(\"Warn when overload promotes from unsigned to signed\") },\n   { \"-Wno-sign-promo\", \"\" },\n-  { \"-Wold-style-cast\", \"Warn if a C style cast is used in a program\" },\n+  { \"-Wold-style-cast\", \n+    N_(\"Warn if a C style cast is used in a program\") },\n   { \"-Wno-old-style-cast\", \"\" },\n   { \"-Wnon-template-friend\", \"\" }, \n-  { \"-Wno-non-template-friend\", \"Don't warn when non-templatized friend functions are declared within a template\" },\n+  { \"-Wno-non-template-friend\", \n+    N_(\"Don't warn when non-templatized friend functions are declared within a template\") },\n   { \"-Wdeprecated\", \"\" },\n-  { \"-Wno-deprecated\", \"Don't announce deprecation of compiler features\" },\n+  { \"-Wno-deprecated\", \n+    N_(\"Don't announce deprecation of compiler features\") },"}, {"sha": "a74028342bffb78a43d3307f76176136b627bf97", "filename": "gcc/f/lang-options.h", "status": "modified", "additions": 154, "deletions": 77, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2Ff%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2Ff%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flang-options.h?ref=a63719408d011cff3a51cdfaceb61c34f1d9c38e", "patch": "@@ -29,135 +29,212 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n DEFINE_LANG_NAME (\"Fortran\")\n \n-  { \"-fversion\", \"Print g77-specific compiler version info, run internal tests\" },\n+  { \"-fversion\", \n+    N_(\"Print g77-specific compiler version info, run internal tests\") },\n   { \"-fnull-version\", \"\" },\n /*\"-fident\",*/\n /*\"-fno-ident\",*/\n-  { \"-ff66\", \"Program is written in typical FORTRAN 66 dialect\" },\n+  { \"-ff66\", \n+    N_(\"Program is written in typical FORTRAN 66 dialect\") },\n   { \"-fno-f66\", \"\" },\n-  { \"-ff77\", \"Program is written in typical Unix f77 dialect\" },\n-  { \"-fno-f77\", \"Program does not use Unix-f77 dialectal features\" },\n-  { \"-ff90\", \"Program is written in Fortran-90-ish dialect\" },\n+  { \"-ff77\", \n+    N_(\"Program is written in typical Unix f77 dialect\") },\n+  { \"-fno-f77\", \n+    N_(\"Program does not use Unix-f77 dialectal features\") },\n+  { \"-ff90\", \n+    N_(\"Program is written in Fortran-90-ish dialect\") },\n   { \"-fno-f90\", \"\" },\n   { \"-fautomatic\", \"\" },\n-  { \"-fno-automatic\", \"Treat local vars and COMMON blocks as if they were named in SAVE statements\" },\n-  { \"-fdollar-ok\", \"Allow $ in symbol names\" },\n+  { \"-fno-automatic\", \n+    N_(\"Treat local vars and COMMON blocks as if they were named in SAVE statements\") },\n+  { \"-fdollar-ok\", \n+    N_(\"Allow $ in symbol names\") },\n   { \"-fno-dollar-ok\", \"\" },\n   { \"-ff2c\", \"\" },\n-  { \"-fno-f2c\", \"f2c-compatible code need not be generated\" },\n+  { \"-fno-f2c\", \n+    N_(\"f2c-compatible code need not be generated\") },\n   { \"-ff2c-library\", \"\" },\n-  { \"-fno-f2c-library\", \"Unsupported; do not generate libf2c-calling code\" },\n-  { \"-fflatten-arrays\", \"Unsupported; affects code-generation of arrays\" },\n+  { \"-fno-f2c-library\", \n+    N_(\"Unsupported; do not generate libf2c-calling code\") },\n+  { \"-fflatten-arrays\", \n+    N_(\"Unsupported; affects code-generation of arrays\") },\n   { \"-fno-flatten-arrays\", \"\" },\n-  { \"-ffree-form\", \"Program is written in Fortran-90-ish free form\" },\n+  { \"-ffree-form\", \n+    N_(\"Program is written in Fortran-90-ish free form\") },\n   { \"-fno-free-form\", \"\" },\n   { \"-ffixed-form\", \"\" },\n   { \"-fno-fixed-form\", \"\" },\n-  { \"-fpedantic\", \"Warn about use of (only a few for now) Fortran extensions\" },\n+  { \"-fpedantic\", \n+    N_(\"Warn about use of (only a few for now) Fortran extensions\") },\n   { \"-fno-pedantic\", \"\" },\n-  { \"-fvxt\", \"Program is written in VXT (Digital-like) FORTRAN\" },\n+  { \"-fvxt\", \n+    N_(\"Program is written in VXT (Digital-like) FORTRAN\") },\n   { \"-fno-vxt\", \"\" },\n-  { \"-fno-ugly\", \"Disallow all ugly features\" },\n+  { \"-fno-ugly\", \n+    N_(\"Disallow all ugly features\") },\n   { \"-fugly-args\", \"\" },\n-  { \"-fno-ugly-args\", \"Hollerith and typeless constants not passed as arguments\" },\n-  { \"-fugly-assign\", \"Allow ordinary copying of ASSIGN'ed vars\" },\n+  { \"-fno-ugly-args\", \n+    N_(\"Hollerith and typeless constants not passed as arguments\") },\n+  { \"-fugly-assign\", \n+    N_(\"Allow ordinary copying of ASSIGN'ed vars\") },\n   { \"-fno-ugly-assign\", \"\" },\n-  { \"-fugly-assumed\", \"Dummy array dimensioned to (1) is assumed-size\" },\n+  { \"-fugly-assumed\", \n+    N_(\"Dummy array dimensioned to (1) is assumed-size\") },\n   { \"-fno-ugly-assumed\", \"\" },\n-  { \"-fugly-comma\", \"Trailing comma in procedure call denotes null argument\" },\n+  { \"-fugly-comma\", \n+    N_(\"Trailing comma in procedure call denotes null argument\") },\n   { \"-fno-ugly-comma\", \"\" },\n-  { \"-fugly-complex\", \"Allow REAL(Z) and AIMAG(Z) given DOUBLE COMPLEX Z\" },\n+  { \"-fugly-complex\", \n+    N_(\"Allow REAL(Z) and AIMAG(Z) given DOUBLE COMPLEX Z\") },\n   { \"-fno-ugly-complex\", \"\" },\n   { \"-fugly-init\", \"\" },\n-  { \"-fno-ugly-init\", \"Initialization via DATA and PARAMETER is type-compatible\" },\n-  { \"-fugly-logint\", \"Allow INTEGER and LOGICAL interchangeability\" },\n+  { \"-fno-ugly-init\", \n+    N_(\"Initialization via DATA and PARAMETER is type-compatible\") },\n+  { \"-fugly-logint\", \n+    N_(\"Allow INTEGER and LOGICAL interchangeability\") },\n   { \"-fno-ugly-logint\", \"\" },\n-  { \"-fxyzzy\", \"Print internal debugging-related info\" },\n+  { \"-fxyzzy\", \n+    N_(\"Print internal debugging-related info\") },\n   { \"-fno-xyzzy\", \"\" },\n-  { \"-finit-local-zero\", \"Initialize local vars and arrays to zero\" },\n+  { \"-finit-local-zero\", \n+    N_(\"Initialize local vars and arrays to zero\") },\n   { \"-fno-init-local-zero\", \"\" },\n   { \"-fbackslash\", \"\" },\n-  { \"-fno-backslash\", \"Backslashes in character/hollerith constants not special (C-style)\" },\n-  { \"-femulate-complex\", \"Have front end emulate COMPLEX arithmetic to avoid bugs\" },\n+  { \"-fno-backslash\", \n+    N_(\"Backslashes in character/hollerith constants not special (C-style)\") },\n+  { \"-femulate-complex\", \n+    N_(\"Have front end emulate COMPLEX arithmetic to avoid bugs\") },\n   { \"-fno-emulate-complex\", \"\" },\n   { \"-funderscoring\", \"\" },\n-  { \"-fno-underscoring\", \"Disable the appending of underscores to externals\" },\n+  { \"-fno-underscoring\", \n+    N_(\"Disable the appending of underscores to externals\") },\n   { \"-fsecond-underscore\", \"\" },\n-  { \"-fno-second-underscore\", \"Never append a second underscore to externals\" },\n-  { \"-fintrin-case-initcap\", \"Intrinsics spelled as e.g. SqRt\" },\n-  { \"-fintrin-case-upper\", \"Intrinsics in uppercase\" },\n+  { \"-fno-second-underscore\", \n+    N_(\"Never append a second underscore to externals\") },\n+  { \"-fintrin-case-initcap\", \n+    N_(\"Intrinsics spelled as e.g. SqRt\") },\n+  { \"-fintrin-case-upper\", \n+    N_(\"Intrinsics in uppercase\") },\n   { \"-fintrin-case-lower\", \"\" },\n-  { \"-fintrin-case-any\", \"Intrinsics letters in arbitrary cases\" },\n-  { \"-fmatch-case-initcap\", \"Language keywords spelled as e.g. IOStat\" },\n-  { \"-fmatch-case-upper\", \"Language keywords in uppercase\" },\n+  { \"-fintrin-case-any\", \n+    N_(\"Intrinsics letters in arbitrary cases\") },\n+  { \"-fmatch-case-initcap\", \n+    N_(\"Language keywords spelled as e.g. IOStat\") },\n+  { \"-fmatch-case-upper\", \n+    N_(\"Language keywords in uppercase\") },\n   { \"-fmatch-case-lower\", \"\" },\n-  { \"-fmatch-case-any\", \"Language keyword letters in arbitrary cases\" },\n-  { \"-fsource-case-upper\", \"Internally convert most source to uppercase\" },\n+  { \"-fmatch-case-any\", \n+    N_(\"Language keyword letters in arbitrary cases\") },\n+  { \"-fsource-case-upper\", \n+    N_(\"Internally convert most source to uppercase\") },\n   { \"-fsource-case-lower\", \"\" },\n-  { \"-fsource-case-preserve\", \"Internally preserve source case\" },\n-  { \"-fsymbol-case-initcap\", \"Symbol names spelled in mixed case\" },\n-  { \"-fsymbol-case-upper\", \"Symbol names in uppercase\" },\n-  { \"-fsymbol-case-lower\", \"Symbol names in lowercase\" },\n+  { \"-fsource-case-preserve\", \n+    N_(\"Internally preserve source case\") },\n+  { \"-fsymbol-case-initcap\", \n+    N_(\"Symbol names spelled in mixed case\") },\n+  { \"-fsymbol-case-upper\", \n+    N_(\"Symbol names in uppercase\") },\n+  { \"-fsymbol-case-lower\", \n+    N_(\"Symbol names in lowercase\") },\n   { \"-fsymbol-case-any\", \"\" },\n-  { \"-fcase-strict-upper\", \"Program written in uppercase\" },\n-  { \"-fcase-strict-lower\", \"Program written in lowercase\" },\n-  { \"-fcase-initcap\", \"Program written in strict mixed-case\" },\n-  { \"-fcase-upper\", \"Compile as if program written in uppercase\" },\n-  { \"-fcase-lower\", \"Compile as if program written in lowercase\" },\n-  { \"-fcase-preserve\", \"Preserve all spelling (case) used in program\" },\n-  { \"-fbadu77-intrinsics-delete\", \"Delete libU77 intrinsics with bad interfaces\" },\n-  { \"-fbadu77-intrinsics-disable\", \"Disable libU77 intrinsics with bad interfaces\" },\n+  { \"-fcase-strict-upper\", \n+    N_(\"Program written in uppercase\") },\n+  { \"-fcase-strict-lower\", \n+    N_(\"Program written in lowercase\") },\n+  { \"-fcase-initcap\", \n+    N_(\"Program written in strict mixed-case\") },\n+  { \"-fcase-upper\", \n+    N_(\"Compile as if program written in uppercase\") },\n+  { \"-fcase-lower\", \n+    N_(\"Compile as if program written in lowercase\") },\n+  { \"-fcase-preserve\", \n+    N_(\"Preserve all spelling (case) used in program\") },\n+  { \"-fbadu77-intrinsics-delete\", \n+    N_(\"Delete libU77 intrinsics with bad interfaces\") },\n+  { \"-fbadu77-intrinsics-disable\", \n+    N_(\"Disable libU77 intrinsics with bad interfaces\") },\n   { \"-fbadu77-intrinsics-enable\", \"\" },\n-  { \"-fbadu77-intrinsics-hide\", \"Hide libU77 intrinsics with bad interfaces\" },\n-  { \"-ff2c-intrinsics-delete\", \"Delete non-FORTRAN-77 intrinsics f2c supports\" },\n-  { \"-ff2c-intrinsics-disable\", \"Disable non-FORTRAN-77 intrinsics f2c supports\" },\n+  { \"-fbadu77-intrinsics-hide\", \n+    N_(\"Hide libU77 intrinsics with bad interfaces\") },\n+  { \"-ff2c-intrinsics-delete\", \n+    N_(\"Delete non-FORTRAN-77 intrinsics f2c supports\") },\n+  { \"-ff2c-intrinsics-disable\", \n+    N_(\"Disable non-FORTRAN-77 intrinsics f2c supports\") },\n   { \"-ff2c-intrinsics-enable\", \"\" },\n-  { \"-ff2c-intrinsics-hide\", \"Hide non-FORTRAN-77 intrinsics f2c supports\" },\n-  { \"-ff90-intrinsics-delete\", \"Delete non-FORTRAN-77 intrinsics F90 supports\" },\n-  { \"-ff90-intrinsics-disable\", \"Disable non-FORTRAN-77 intrinsics F90 supports\" },\n+  { \"-ff2c-intrinsics-hide\", \n+    N_(\"Hide non-FORTRAN-77 intrinsics f2c supports\") },\n+  { \"-ff90-intrinsics-delete\", \n+    N_(\"Delete non-FORTRAN-77 intrinsics F90 supports\") },\n+  { \"-ff90-intrinsics-disable\", \n+    N_(\"Disable non-FORTRAN-77 intrinsics F90 supports\") },\n   { \"-ff90-intrinsics-enable\", \"\" },\n-  { \"-ff90-intrinsics-hide\", \"Hide non-FORTRAN-77 intrinsics F90 supports\" },\n-  { \"-fgnu-intrinsics-delete\", \"Delete non-FORTRAN-77 intrinsics g77 supports\" },\n-  { \"-fgnu-intrinsics-disable\", \"Disable non-FORTRAN 77 intrinsics F90 supports\" },\n+  { \"-ff90-intrinsics-hide\", \n+    N_(\"Hide non-FORTRAN-77 intrinsics F90 supports\") },\n+  { \"-fgnu-intrinsics-delete\", \n+    N_(\"Delete non-FORTRAN-77 intrinsics g77 supports\") },\n+  { \"-fgnu-intrinsics-disable\", \n+    N_(\"Disable non-FORTRAN 77 intrinsics F90 supports\") },\n   { \"-fgnu-intrinsics-enable\", \"\" },\n-  { \"-fgnu-intrinsics-hide\", \"Hide non-FORTRAN 77 intrinsics F90 supports\" },\n-  { \"-fmil-intrinsics-delete\", \"Delete MIL-STD 1753 intrinsics\" },\n-  { \"-fmil-intrinsics-disable\", \"Disable MIL-STD 1753 intrinsics\" },\n+  { \"-fgnu-intrinsics-hide\", \n+    N_(\"Hide non-FORTRAN 77 intrinsics F90 supports\") },\n+  { \"-fmil-intrinsics-delete\", \n+    N_(\"Delete MIL-STD 1753 intrinsics\") },\n+  { \"-fmil-intrinsics-disable\", \n+    N_(\"Disable MIL-STD 1753 intrinsics\") },\n   { \"-fmil-intrinsics-enable\", \"\" },\n-  { \"-fmil-intrinsics-hide\", \"Hide MIL-STD 1753 intrinsics\" },\n-  { \"-funix-intrinsics-delete\", \"Delete libU77 intrinsics\" },\n-  { \"-funix-intrinsics-disable\", \"Disable libU77 intrinsics\" },\n+  { \"-fmil-intrinsics-hide\", \n+    N_(\"Hide MIL-STD 1753 intrinsics\") },\n+  { \"-funix-intrinsics-delete\", \n+    N_(\"Delete libU77 intrinsics\") },\n+  { \"-funix-intrinsics-disable\", \n+    N_(\"Disable libU77 intrinsics\") },\n   { \"-funix-intrinsics-enable\", \"\" },\n-  { \"-funix-intrinsics-hide\", \"Hide libU77 intrinsics\" },\n-  { \"-fvxt-intrinsics-delete\", \"Delete non-FORTRAN-77 intrinsics VXT FORTRAN supports\" },\n-  { \"-fvxt-intrinsics-disable\", \"Disable non-FORTRAN-77 intrinsics VXT FORTRAN supports\" },\n+  { \"-funix-intrinsics-hide\", \n+    N_(\"Hide libU77 intrinsics\") },\n+  { \"-fvxt-intrinsics-delete\", \n+    N_(\"Delete non-FORTRAN-77 intrinsics VXT FORTRAN supports\") },\n+  { \"-fvxt-intrinsics-disable\", \n+    N_(\"Disable non-FORTRAN-77 intrinsics VXT FORTRAN supports\") },\n   { \"-fvxt-intrinsics-enable\", \"\" },\n-  { \"-fvxt-intrinsics-hide\", \"Hide non-FORTRAN-77 intrinsics VXT FORTRAN supports\" },\n-  { \"-fzeros\", \"Treat initial values of 0 like non-zero values\" },\n+  { \"-fvxt-intrinsics-hide\", \n+    N_(\"Hide non-FORTRAN-77 intrinsics VXT FORTRAN supports\") },\n+  { \"-fzeros\", \n+    N_(\"Treat initial values of 0 like non-zero values\") },\n   { \"-fno-zeros\", \"\" },\n-  { \"-fdebug-kludge\", \"Emit special debugging information for COMMON and EQUIVALENCE (disabled)\" },\n+  { \"-fdebug-kludge\", \n+    N_(\"Emit special debugging information for COMMON and EQUIVALENCE (disabled)\") },\n   { \"-fno-debug-kludge\", \"\" },\n-  { \"-fonetrip\", \"Take at least one trip through each iterative DO loop\" },\n+  { \"-fonetrip\", \n+    N_(\"Take at least one trip through each iterative DO loop\") },\n   { \"-fno-onetrip\", \"\" },\n   { \"-fsilent\", \"\" },\n-  { \"-fno-silent\", \"Print names of program units as they are compiled\" },\n+  { \"-fno-silent\", \n+    N_(\"Print names of program units as they are compiled\") },\n   { \"-fglobals\", \"\" },\n-  { \"-fno-globals\", \"Disable fatal diagnostics about inter-procedural problems\" },\n-  { \"-ftypeless-boz\", \"Make prefix-radix non-decimal constants be typeless\" },\n+  { \"-fno-globals\", \n+    N_(\"Disable fatal diagnostics about inter-procedural problems\") },\n+  { \"-ftypeless-boz\", \n+    N_(\"Make prefix-radix non-decimal constants be typeless\") },\n   { \"-fno-typeless-boz\", \"\" },\n-  { \"-fbounds-check\", \"Generate code to check subscript and substring bounds\" },\n+  { \"-fbounds-check\", \n+    N_(\"Generate code to check subscript and substring bounds\") },\n   { \"-fno-bounds-check\", \"\" },\n-{ \"-ffortran-bounds-check\", \"Fortran-specific form of -fbounds-check\" },\n+  { \"-ffortran-bounds-check\",\n+    N_(\"Fortran-specific form of -fbounds-check\") },\n   { \"-fno-fortran-bounds-check\", \"\" },\n   { \"-Wglobals\", \"\" },\n-  { \"-Wno-globals\", \"Disable warnings about inter-procedural problems\" },\n+  { \"-Wno-globals\", \n+    N_(\"Disable warnings about inter-procedural problems\") },\n /*\"-Wimplicit\",*/\n /*\"-Wno-implicit\",*/\n-  { \"-Wsurprising\", \"Warn about constructs with surprising meanings\" },\n+  { \"-Wsurprising\", \n+    N_(\"Warn about constructs with surprising meanings\") },\n   { \"-Wno-surprising\", \"\" },\n /*\"-Wall\",*/\n /* Prefix options.  */\n-  { \"-I\", \"Add a directory for INCLUDE searching\" },\n-  { \"-ffixed-line-length-\", \"Set the maximum line length\" },\n+  { \"-I\", \n+    N_(\"Add a directory for INCLUDE searching\") },\n+  { \"-ffixed-line-length-\", \n+    N_(\"Set the maximum line length\") },\n \n #endif"}, {"sha": "c15946e8851d6c57ec011f86fd975b0cdf27eed9", "filename": "gcc/java/lang-options.h", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2Fjava%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2Fjava%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-options.h?ref=a63719408d011cff3a51cdfaceb61c34f1d9c38e", "patch": "@@ -28,27 +28,44 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n DEFINE_LANG_NAME (\"Java\")\n \n   { \"-fbounds-check\", \"\" },\n-  { \"-fno-bounds-check\", \"Disable automatic array bounds checking\" },\n-  { \"-fassume-compiled\", \"Make is_compiled_class return 1\"},\n+  { \"-fno-bounds-check\",\n+    N_(\"Disable automatic array bounds checking\") },\n+  { \"-fassume-compiled\",\n+    N_(\"Make is_compiled_class return 1\") },\n   { \"-fno-assume-compiled\", \"\" },\n   { \"-femit-class-file\", \"\" },\n-  { \"-femit-class-files\", \"Dump class files to <name>.class\" },\n-  { \"-ffilelist-file\", \"input file is list of file names to compile\" },\n-  { \"-fuse-boehm-gc\", \"Generate code for Boehm GC\" },\n-  { \"-fhash-synchronization\", \"Don't put synchronization structure in each object\" },\n-  { \"-fjni\", \"Assume native functions are implemented using JNI\" },\n-  { \"--classpath\", \"Set class path and suppress system path\" },\n-  { \"--CLASSPATH\", \"Set class path\" },\n-  { \"--main\", \"Choose class whose main method should be used\" },\n-  { \"--encoding\", \"Choose input encoding (default is UTF-8)\" },\n-  { \"-I\", \"Add directory to class path\" },\n-  { \"-foutput-class-dir\", \"Directory where class files should be written\" },\n+  { \"-femit-class-files\",\n+    N_(\"Dump class files to <name>.class\") },\n+  { \"-ffilelist-file\",\n+    N_(\"input file is list of file names to compile\") },\n+  { \"-fuse-boehm-gc\",\n+    N_(\"Generate code for Boehm GC\") },\n+  { \"-fhash-synchronization\",\n+    N_(\"Don't put synchronization structure in each object\") },\n+  { \"-fjni\",\n+    N_(\"Assume native functions are implemented using JNI\") },\n+  { \"--classpath\",\n+    N_(\"Set class path and suppress system path\") },\n+  { \"--CLASSPATH\",\n+    N_(\"Set class path\") },\n+  { \"--main\",\n+    N_(\"Choose class whose main method should be used\") },\n+  { \"--encoding\",\n+    N_(\"Choose input encoding (default is UTF-8)\") },\n+  { \"-I\",\n+    N_(\"Add directory to class path\") },\n+  { \"-foutput-class-dir\",\n+    N_(\"Directory where class files should be written\") },\n   { \"-fuse-divide-subroutine\", \"\" },\n-  { \"-fno-use-divide-subroutine\", \"Use built-in instructions for division\" },\n-  { \"-fcheck-references\", \"Generate null pointer checks inline\" },\n+  { \"-fno-use-divide-subroutine\",\n+    N_(\"Use built-in instructions for division\") },\n+  { \"-fcheck-references\",\n+    N_(\"Generate null pointer checks inline\") },\n   { \"-Wredundant-modifiers\", \n-    \"Warn if modifiers are specified when not necessary\"},\n-  { \"-Wextraneous-semicolon\", \"Warn if deprecated empty statements are found\"},\n-  { \"-Wout-of-date\", \"Warn if .class files are out of date\" },\n+    N_(\"Warn if modifiers are specified when not necessary\") },\n+  { \"-Wextraneous-semicolon\",\n+    N_(\"Warn if deprecated empty statements are found\") },\n+  { \"-Wout-of-date\",\n+    N_(\"Warn if .class files are out of date\") },\n   { \"-fforce-classes-archive-check\", \n-    \"Always check for non gcj generated classes archives\" },\n+    N_(\"Always check for non gcj generated classes archives\") },"}, {"sha": "88e30e5b6cbab13b6f4981f862ada0f92cfa3838", "filename": "gcc/objc/lang-options.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2Fobjc%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2Fobjc%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-options.h?ref=a63719408d011cff3a51cdfaceb61c34f1d9c38e", "patch": "@@ -23,16 +23,21 @@ Boston, MA 02111-1307, USA.  */\n \n DEFINE_LANG_NAME (\"Objective C\")\n   \n-  { \"-gen-decls\", \"Dump decls to a .decl file\" },\n-  { \"-fgnu-runtime\", \"Generate code for GNU runtime environment\" },\n+  { \"-gen-decls\", \n+    N_(\"Dump decls to a .decl file\") },\n+  { \"-fgnu-runtime\", \n+    N_(\"Generate code for GNU runtime environment\") },\n   { \"-fno-gnu-runtime\", \"\" },\n-  { \"-fnext-runtime\", \"Generate code for NeXT runtime environment\" },\n+  { \"-fnext-runtime\", \n+    N_(\"Generate code for NeXT runtime environment\") },\n   { \"-fno-next-runtime\", \"\" },\n-  { \"-Wselector\", \"Warn if a selector has multiple methods\" },\n+  { \"-Wselector\", \n+    N_(\"Warn if a selector has multiple methods\") },\n   { \"-Wno-selector\", \"\" },\n   { \"-Wprotocol\", \"\" },\n-  { \"-Wno-protocol\", \"Do not warn if inherited methods are unimplemented\"},\n+  { \"-Wno-protocol\", \n+    N_(\"Do not warn if inherited methods are unimplemented\") },\n   { \"-print-objc-runtime-info\",\n-    \"Generate C header of platform specific features\" },\n+    N_(\"Generate C header of platform specific features\") },\n   { \"-fconstant-string-class\",\n-      \"Specify the name of the class for constant strings\" },\n+    N_(\"Specify the name of the class for constant strings\") },"}, {"sha": "2a7f681d7b7847de6ab4519402db1980074e8dd8", "filename": "gcc/toplev.c", "status": "modified", "additions": 223, "deletions": 177, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63719408d011cff3a51cdfaceb61c34f1d9c38e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a63719408d011cff3a51cdfaceb61c34f1d9c38e", "patch": "@@ -928,26 +928,26 @@ static struct\n debug_args[] =\n {\n   { \"\",       NO_DEBUG, DEFAULT_GDB_EXTENSIONS,\n-    \"Generate default debug format output\" },\n-  { \"gdb\",    NO_DEBUG, 1, \"Generate default extended debug format output\" },\n+    N_(\"Generate debugging info in default format\") },\n+  { \"gdb\",    NO_DEBUG, 1, N_(\"Generate debugging info in default extended format\") },\n #ifdef DBX_DEBUGGING_INFO\n-  { \"stabs\",  DBX_DEBUG, 0, \"Generate STABS format debug output\" },\n-  { \"stabs+\", DBX_DEBUG, 1, \"Generate extended STABS format debug output\" },\n+  { \"stabs\",  DBX_DEBUG, 0, N_(\"Generate STABS format debug info\") },\n+  { \"stabs+\", DBX_DEBUG, 1, N_(\"Generate extended STABS format debug info\") },\n #endif\n #ifdef DWARF_DEBUGGING_INFO\n-  { \"dwarf\",  DWARF_DEBUG, 0, \"Generate DWARF-1 format debug output\"},\n+  { \"dwarf\",  DWARF_DEBUG, 0, N_(\"Generate DWARF-1 format debug info\") },\n   { \"dwarf+\", DWARF_DEBUG, 1,\n-    \"Generated extended DWARF-1 format debug output\" },\n+    N_(\"Generate extended DWARF-1 format debug info\") },\n #endif\n #ifdef DWARF2_DEBUGGING_INFO\n-  { \"dwarf-2\", DWARF2_DEBUG, 0, \"Enable DWARF-2 debug output\" },\n+  { \"dwarf-2\", DWARF2_DEBUG, 0, N_(\"Generate DWARF-2 debug info\") },\n #endif\n #ifdef XCOFF_DEBUGGING_INFO\n-  { \"xcoff\",  XCOFF_DEBUG, 0, \"Generate XCOFF format debug output\" },\n-  { \"xcoff+\", XCOFF_DEBUG, 1, \"Generate extended XCOFF format debug output\" },\n+  { \"xcoff\",  XCOFF_DEBUG, 0, N_(\"Generate XCOFF format debug info\") },\n+  { \"xcoff+\", XCOFF_DEBUG, 1, N_(\"Generate extended XCOFF format debug info\") },\n #endif\n #ifdef SDB_DEBUGGING_INFO\n-  { \"coff\", SDB_DEBUG, 0, \"Generate COFF format debug output\" },\n+  { \"coff\", SDB_DEBUG, 0, N_(\"Generate COFF format debug info\") },\n #endif\n   { 0, 0, 0, 0 }\n };\n@@ -991,190 +991,190 @@ static const param_info lang_independent_params[] = {\n lang_independent_options f_options[] =\n {\n   {\"eliminate-dwarf2-dups\", &flag_eliminate_dwarf2_dups, 1,\n-   \"Perform DWARF2 duplicate elimination\"},\n+   N_(\"Perform DWARF2 duplicate elimination\") },\n   {\"float-store\", &flag_float_store, 1,\n-   \"Do not store floats in registers\" },\n+   N_(\"Do not store floats in registers\") },\n   {\"volatile\", &flag_volatile, 1,\n-   \"Consider all mem refs through pointers as volatile\"},\n+   N_(\"Consider all mem refs through pointers as volatile\") },\n   {\"volatile-global\", &flag_volatile_global, 1,\n-   \"Consider all mem refs to global data to be volatile\" },\n+   N_(\"Consider all mem refs to global data to be volatile\") },\n   {\"volatile-static\", &flag_volatile_static, 1,\n-   \"Consider all mem refs to static data to be volatile\" },\n+   N_(\"Consider all mem refs to static data to be volatile\") },\n   {\"defer-pop\", &flag_defer_pop, 1,\n-   \"Defer popping functions args from stack until later\" },\n+   N_(\"Defer popping functions args from stack until later\") },\n   {\"omit-frame-pointer\", &flag_omit_frame_pointer, 1,\n-   \"When possible do not generate stack frames\"},\n+   N_(\"When possible do not generate stack frames\") },\n   {\"optimize-sibling-calls\", &flag_optimize_sibling_calls, 1,\n-   \"Optimize sibling and tail recursive calls\" },\n+   N_(\"Optimize sibling and tail recursive calls\") },\n   {\"cse-follow-jumps\", &flag_cse_follow_jumps, 1,\n-   \"When running CSE, follow jumps to their targets\" },\n+   N_(\"When running CSE, follow jumps to their targets\") },\n   {\"cse-skip-blocks\", &flag_cse_skip_blocks, 1,\n-   \"When running CSE, follow conditional jumps\" },\n+   N_(\"When running CSE, follow conditional jumps\") },\n   {\"expensive-optimizations\", &flag_expensive_optimizations, 1,\n-   \"Perform a number of minor, expensive optimisations\" },\n+   N_(\"Perform a number of minor, expensive optimisations\") },\n   {\"thread-jumps\", &flag_thread_jumps, 1,\n-   \"Perform jump threading optimisations\"},\n+   N_(\"Perform jump threading optimisations\") },\n   {\"strength-reduce\", &flag_strength_reduce, 1,\n-   \"Perform strength reduction optimisations\" },\n+   N_(\"Perform strength reduction optimisations\") },\n   {\"unroll-loops\", &flag_unroll_loops, 1,\n-   \"Perform loop unrolling when iteration count is known\" },\n+   N_(\"Perform loop unrolling when iteration count is known\") },\n   {\"unroll-all-loops\", &flag_unroll_all_loops, 1,\n-   \"Perform loop unrolling for all loops\" },\n+   N_(\"Perform loop unrolling for all loops\") },\n   {\"move-all-movables\", &flag_move_all_movables, 1,\n-   \"Force all loop invariant computations out of loops\" },\n+   N_(\"Force all loop invariant computations out of loops\") },\n   {\"reduce-all-givs\", &flag_reduce_all_givs, 1,\n-   \"Strength reduce all loop general induction variables\" },\n+   N_(\"Strength reduce all loop general induction variables\") },\n   {\"writable-strings\", &flag_writable_strings, 1,\n-   \"Store strings in writable data section\" },\n+   N_(\"Store strings in writable data section\") },\n   {\"peephole\", &flag_no_peephole, 0,\n-   \"Enable machine specific peephole optimisations\" },\n+   N_(\"Enable machine specific peephole optimisations\") },\n   {\"force-mem\", &flag_force_mem, 1,\n-   \"Copy memory operands into registers before using\" },\n+   N_(\"Copy memory operands into registers before using\") },\n   {\"force-addr\", &flag_force_addr, 1,\n-   \"Copy memory address constants into regs before using\" },\n+   N_(\"Copy memory address constants into regs before using\") },\n   {\"function-cse\", &flag_no_function_cse, 0,\n-   \"Allow function addresses to be held in registers\" },\n+   N_(\"Allow function addresses to be held in registers\") },\n   {\"inline-functions\", &flag_inline_functions, 1,\n-   \"Integrate simple functions into their callers\" },\n+   N_(\"Integrate simple functions into their callers\") },\n   {\"keep-inline-functions\", &flag_keep_inline_functions, 1,\n-   \"Generate code for funcs even if they are fully inlined\" },\n+   N_(\"Generate code for funcs even if they are fully inlined\") },\n   {\"inline\", &flag_no_inline, 0,\n-   \"Pay attention to the 'inline' keyword\"},\n+   N_(\"Pay attention to the 'inline' keyword\") },\n   {\"keep-static-consts\", &flag_keep_static_consts, 1,\n-   \"Emit static const variables even if they are not used\" },\n+   N_(\"Emit static const variables even if they are not used\") },\n   {\"syntax-only\", &flag_syntax_only, 1,\n-   \"Check for syntax errors, then stop\" },\n+   N_(\"Check for syntax errors, then stop\") },\n   {\"shared-data\", &flag_shared_data, 1,\n-   \"Mark data as shared rather than private\" },\n+   N_(\"Mark data as shared rather than private\") },\n   {\"caller-saves\", &flag_caller_saves, 1,\n-   \"Enable saving registers around function calls\" },\n+   N_(\"Enable saving registers around function calls\") },\n   {\"pcc-struct-return\", &flag_pcc_struct_return, 1,\n-   \"Return 'short' aggregates in memory, not registers\" },\n+   N_(\"Return 'short' aggregates in memory, not registers\") },\n   {\"reg-struct-return\", &flag_pcc_struct_return, 0,\n-   \"Return 'short' aggregates in registers\" },\n+   N_(\"Return 'short' aggregates in registers\") },\n   {\"delayed-branch\", &flag_delayed_branch, 1,\n-   \"Attempt to fill delay slots of branch instructions\" },\n+   N_(\"Attempt to fill delay slots of branch instructions\") },\n   {\"gcse\", &flag_gcse, 1,\n-   \"Perform the global common subexpression elimination\" },\n+   N_(\"Perform the global common subexpression elimination\") },\n   {\"gcse-lm\", &flag_gcse_lm, 1,\n-   \"Perform enhanced load motion during global subexpression elimination\" },\n+   N_(\"Perform enhanced load motion during global subexpression elimination\") },\n   {\"gcse-sm\", &flag_gcse_sm, 1,\n-   \"Perform store motion after global subexpression elimination\" },\n+   N_(\"Perform store motion after global subexpression elimination\") },\n   {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1,\n-   \"Run CSE pass after loop optimisations\"},\n+   N_(\"Run CSE pass after loop optimisations\") },\n   {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1,\n-   \"Run the loop optimiser twice\"},\n+   N_(\"Run the loop optimiser twice\") },\n   {\"delete-null-pointer-checks\", &flag_delete_null_pointer_checks, 1,\n-   \"Delete useless null pointer checks\" },\n+   N_(\"Delete useless null pointer checks\") },\n   {\"pretend-float\", &flag_pretend_float, 1,\n-   \"Pretend that host and target use the same FP format\"},\n+   N_(\"Pretend that host and target use the same FP format\") },\n   {\"schedule-insns\", &flag_schedule_insns, 1,\n-   \"Reschedule instructions before register allocation\"},\n+   N_(\"Reschedule instructions before register allocation\") },\n   {\"schedule-insns2\", &flag_schedule_insns_after_reload, 1,\n-   \"Reschedule instructions after register allocation\"},\n+   N_(\"Reschedule instructions after register allocation\") },\n   {\"sched-interblock\",&flag_schedule_interblock, 1,\n-   \"Enable scheduling across basic blocks\" },\n+   N_(\"Enable scheduling across basic blocks\") },\n   {\"sched-spec\",&flag_schedule_speculative, 1,\n-   \"Allow speculative motion of non-loads\" },\n+   N_(\"Allow speculative motion of non-loads\") },\n   {\"sched-spec-load\",&flag_schedule_speculative_load, 1,\n-   \"Allow speculative motion of some loads\" },\n+   N_(\"Allow speculative motion of some loads\") },\n   {\"sched-spec-load-dangerous\",&flag_schedule_speculative_load_dangerous, 1,\n-   \"Allow speculative motion of more loads\" },\n+   N_(\"Allow speculative motion of more loads\") },\n   {\"branch-count-reg\",&flag_branch_on_count_reg, 1,\n-   \"Replace add,compare,branch with branch on count reg\"},\n+   N_(\"Replace add,compare,branch with branch on count reg\") },\n   {\"pic\", &flag_pic, 1,\n-   \"Generate position independent code, if possible\"},\n+   N_(\"Generate position independent code, if possible\") },\n   {\"PIC\", &flag_pic, 2, \"\"},\n   {\"exceptions\", &flag_exceptions, 1,\n-   \"Enable exception handling\" },\n+   N_(\"Enable exception handling\") },\n   {\"unwind-tables\", &flag_unwind_tables, 1,\n-    \"Just generate unwind tables for exception handling\" },\n+   N_(\"Just generate unwind tables for exception handling\") },\n   {\"non-call-exceptions\", &flag_non_call_exceptions, 1,\n-   \"Support synchronous non-call exceptions\" },\n+   N_(\"Support synchronous non-call exceptions\") },\n   {\"profile-arcs\", &profile_arc_flag, 1,\n-   \"Insert arc based program profiling code\" },\n+   N_(\"Insert arc based program profiling code\") },\n   {\"test-coverage\", &flag_test_coverage, 1,\n-   \"Create data files needed by gcov\" },\n+   N_(\"Create data files needed by gcov\") },\n   {\"branch-probabilities\", &flag_branch_probabilities, 1,\n-   \"Use profiling information for branch probabilities\" },\n+   N_(\"Use profiling information for branch probabilities\") },\n   {\"reorder-blocks\", &flag_reorder_blocks, 1,\n-   \"Reorder basic blocks to improve code placement\" },\n+   N_(\"Reorder basic blocks to improve code placement\") },\n   {\"rename-registers\", &flag_rename_registers, 1,\n-   \"Do the register renaming optimization pass\"},\n+   N_(\"Do the register renaming optimization pass\") },\n   {\"common\", &flag_no_common, 0,\n-   \"Do not put unitialised globals in the common section\" },\n+   N_(\"Do not put unitialised globals in the common section\") },\n   {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1,\n-   \"Do not generate .size directives\" },\n+   N_(\"Do not generate .size directives\") },\n   {\"function-sections\", &flag_function_sections, 1,\n-   \"place each function into its own section\" },\n+   N_(\"place each function into its own section\") },\n   {\"data-sections\", &flag_data_sections, 1,\n-   \"place data items into their own section\" },\n+   N_(\"place data items into their own section\") },\n   {\"verbose-asm\", &flag_verbose_asm, 1,\n-   \"Add extra commentry to assembler output\"},\n+   N_(\"Add extra commentry to assembler output\") },\n   {\"gnu-linker\", &flag_gnu_linker, 1,\n-   \"Output GNU ld formatted global initialisers\"},\n+   N_(\"Output GNU ld formatted global initialisers\") },\n   {\"regmove\", &flag_regmove, 1,\n-   \"Enables a register move optimisation\"},\n+   N_(\"Enables a register move optimisation\") },\n   {\"optimize-register-move\", &flag_regmove, 1,\n-   \"Do the full regmove optimization pass\"},\n+   N_(\"Do the full regmove optimization pass\") },\n   {\"pack-struct\", &flag_pack_struct, 1,\n-   \"Pack structure members together without holes\" },\n+   N_(\"Pack structure members together without holes\") },\n   {\"stack-check\", &flag_stack_check, 1,\n-   \"Insert stack checking code into the program\" },\n+   N_(\"Insert stack checking code into the program\") },\n   {\"argument-alias\", &flag_argument_noalias, 0,\n-   \"Specify that arguments may alias each other & globals\"},\n+   N_(\"Specify that arguments may alias each other & globals\") },\n   {\"argument-noalias\", &flag_argument_noalias, 1,\n-   \"Assume arguments may alias globals but not each other\"},\n+   N_(\"Assume arguments may alias globals but not each other\") },\n   {\"argument-noalias-global\", &flag_argument_noalias, 2,\n-   \"Assume arguments do not alias each other or globals\" },\n+   N_(\"Assume arguments do not alias each other or globals\") },\n   {\"strict-aliasing\", &flag_strict_aliasing, 1,\n-   \"Assume strict aliasing rules apply\" },\n+   N_(\"Assume strict aliasing rules apply\") },\n   {\"align-loops\", &align_loops, 0,\n-   \"Align the start of loops\" },\n+   N_(\"Align the start of loops\") },\n   {\"align-jumps\", &align_jumps, 0,\n-   \"Align labels which are only reached by jumping\" },\n+   N_(\"Align labels which are only reached by jumping\") },\n   {\"align-labels\", &align_labels, 0,\n-   \"Align all labels\" },\n+   N_(\"Align all labels\") },\n   {\"align-functions\", &align_functions, 0,\n-   \"Align the start of functions\" },\n+   N_(\"Align the start of functions\") },\n   {\"check-memory-usage\", &flag_check_memory_usage, 1,\n-   \"Generate code to check every memory access\" },\n+   N_(\"Generate code to check every memory access\") },\n   {\"prefix-function-name\", &flag_prefix_function_name, 1,\n-   \"Add a prefix to all function names\" },\n+   N_(\"Add a prefix to all function names\") },\n   {\"dump-unnumbered\", &flag_dump_unnumbered, 1,\n-   \"Suppress output of instruction numbers and line number notes in debugging dumps\"},\n+   N_(\"Suppress output of instruction numbers and line number notes in debugging dumps\") },\n   {\"instrument-functions\", &flag_instrument_function_entry_exit, 1,\n-   \"Instrument function entry/exit with profiling calls\"},\n+   N_(\"Instrument function entry/exit with profiling calls\") },\n   {\"ssa\", &flag_ssa, 1,\n-   \"Enable SSA optimizations\" },\n+   N_(\"Enable SSA optimizations\") },\n   {\"dce\", &flag_dce, 1,\n-   \"Enable dead code elimination\" },\n+   N_(\"Enable dead code elimination\") },\n   {\"leading-underscore\", &flag_leading_underscore, 1,\n-   \"External symbols have a leading underscore\" },\n+   N_(\"External symbols have a leading underscore\") },\n   {\"ident\", &flag_no_ident, 0,\n-   \"Process #ident directives\"},\n+   N_(\"Process #ident directives\") },\n   { \"peephole2\", &flag_peephole2, 1,\n-    \"Enables an rtl peephole pass run before sched2\" },\n+   N_(\"Enables an rtl peephole pass run before sched2\") },\n   { \"guess-branch-probability\", &flag_guess_branch_prob, 1,\n-    \"Enables guessing of branch probabilities\" },\n+   N_(\"Enables guessing of branch probabilities\") },\n   {\"math-errno\", &flag_errno_math, 1,\n-   \"Set errno after built-in math functions\"},\n+   N_(\"Set errno after built-in math functions\") },\n   {\"trapping-math\", &flag_trapping_math, 1,\n-   \"Floating-point operations can trap\"},\n+   N_(\"Floating-point operations can trap\") },\n   {\"unsafe-math-optimizations\", &flag_unsafe_math_optimizations, 1,\n-   \"Allow math optimizations that may violate IEEE or ANSI standards\"},\n+   N_(\"Allow math optimizations that may violate IEEE or ANSI standards\") },\n   {\"bounded-pointers\", &flag_bounded_pointers, 1,\n-   \"Compile pointers as triples: value, base & end\" },\n+   N_(\"Compile pointers as triples: value, base & end\") },\n   {\"bounds-check\", &flag_bounds_check, 1,\n-   \"Generate code to check bounds before dereferencing pointers and arrays\" },\n+   N_(\"Generate code to check bounds before dereferencing pointers and arrays\") },\n   {\"single-precision-constant\", &flag_single_precision_constant, 1,\n-   \"Convert floating point constant to single precision constant\"},\n+   N_(\"Convert floating point constant to single precision constant\") },\n   {\"time-report\", &time_report, 1,\n-   \"Report time taken by each compiler pass at end of run\"},\n+   N_(\"Report time taken by each compiler pass at end of run\") },\n   {\"mem-report\", &mem_report, 1,\n-   \"Report on permanent memory allocation at end of run\"},\n+   N_(\"Report on permanent memory allocation at end of run\") },\n   { \"trapv\", &flag_trapv, 1,\n-    \"Trap for signed overflow in addition / subtraction / multiplication.\" },\n+   N_(\"Trap for signed overflow in addition / subtraction / multiplication.\") },\n };\n \n /* Table of language-specific options.  */\n@@ -1190,129 +1190,167 @@ documented_lang_options[] =\n      used here is to only describe those options which are not\n      enabled by default.  */\n \n-  { \"-ansi\", \"Compile just for ISO C89\" },\n+  { \"-ansi\", \n+    N_(\"Compile just for ISO C89\") },\n   { \"-fallow-single-precision\",\n-    \"Do not promote floats to double if using -traditional\" },\n-  { \"-std= \", \"Determine language standard\"},\n+    N_(\"Do not promote floats to double if using -traditional\") },\n+  { \"-std= \", \n+    N_(\"Determine language standard\") },\n \n   { \"-fsigned-bitfields\", \"\" },\n-  { \"-funsigned-bitfields\",\"Make bitfields by unsigned by default\" },\n+  { \"-funsigned-bitfields\",\n+    N_(\"Make bitfields by unsigned by default\") },\n   { \"-fno-signed-bitfields\", \"\" },\n   { \"-fno-unsigned-bitfields\",\"\" },\n-  { \"-fsigned-char\", \"Make 'char' be signed by default\"},\n-  { \"-funsigned-char\", \"Make 'char' be unsigned by default\"},\n+  { \"-fsigned-char\", \n+    N_(\"Make 'char' be signed by default\") },\n+  { \"-funsigned-char\", \n+    N_(\"Make 'char' be unsigned by default\") },\n   { \"-fno-signed-char\", \"\" },\n   { \"-fno-unsigned-char\", \"\" },\n \n   { \"-ftraditional\", \"\" },\n-  { \"-traditional\", \"Attempt to support traditional K&R style C\"},\n+  { \"-traditional\", \n+    N_(\"Attempt to support traditional K&R style C\") },\n   { \"-fnotraditional\", \"\" },\n   { \"-fno-traditional\", \"\" },\n \n   { \"-fasm\", \"\" },\n-  { \"-fno-asm\", \"Do not recognise the 'asm' keyword\" },\n+  { \"-fno-asm\", \n+    N_(\"Do not recognise the 'asm' keyword\") },\n   { \"-fbuiltin\", \"\" },\n-  { \"-fno-builtin\", \"Do not recognise any built in functions\" },\n-  { \"-fhosted\", \"Assume normal C execution environment\" },\n+  { \"-fno-builtin\", \n+    N_(\"Do not recognise any built in functions\") },\n+  { \"-fhosted\", \n+    N_(\"Assume normal C execution environment\") },\n   { \"-fno-hosted\", \"\" },\n   { \"-ffreestanding\",\n-    \"Assume that standard libraries & main might not exist\" },\n+    N_(\"Assume that standard libraries & main might not exist\") },\n   { \"-fno-freestanding\", \"\" },\n-  { \"-fcond-mismatch\", \"Allow different types as args of ? operator\"},\n+  { \"-fcond-mismatch\", \n+    N_(\"Allow different types as args of ? operator\") },\n   { \"-fno-cond-mismatch\", \"\" },\n-  { \"-fdollars-in-identifiers\", \"Allow the use of $ inside identifiers\" },\n+  { \"-fdollars-in-identifiers\", \n+    N_(\"Allow the use of $ inside identifiers\") },\n   { \"-fno-dollars-in-identifiers\", \"\" },\n   { \"-fpreprocessed\", \"\" },\n   { \"-fno-preprocessed\", \"\" },\n-  { \"-fshort-double\", \"Use the same size for double as for float\" },\n+  { \"-fshort-double\", \n+    N_(\"Use the same size for double as for float\") },\n   { \"-fno-short-double\", \"\" },\n-  { \"-fshort-enums\", \"Use the smallest fitting integer to hold enums\"},\n+  { \"-fshort-enums\", \n+    N_(\"Use the smallest fitting integer to hold enums\") },\n   { \"-fno-short-enums\", \"\" },\n-  { \"-fshort-wchar\", \"Override the underlying type for wchar_t to `unsigned short'\" },\n+  { \"-fshort-wchar\", \n+    N_(\"Override the underlying type for wchar_t to `unsigned short'\") },\n   { \"-fno-short-wchar\", \"\" },\n \n-  { \"-Wall\", \"Enable most warning messages\" },\n+  { \"-Wall\", \n+    N_(\"Enable most warning messages\") },\n   { \"-Wbad-function-cast\",\n-    \"Warn about casting functions to incompatible types\" },\n+    N_(\"Warn about casting functions to incompatible types\") },\n   { \"-Wno-bad-function-cast\", \"\" },\n   { \"-Wno-missing-noreturn\", \"\" },\n   { \"-Wmissing-format-attribute\",\n-    \"Warn about functions which might be candidates for format attributes\" },\n+    N_(\"Warn about functions which might be candidates for format attributes\") },\n   { \"-Wno-missing-format-attribute\", \"\" },\n-  { \"-Wcast-qual\", \"Warn about casts which discard qualifiers\"},\n+  { \"-Wcast-qual\", \n+    N_(\"Warn about casts which discard qualifiers\") },\n   { \"-Wno-cast-qual\", \"\" },\n-  { \"-Wchar-subscripts\", \"Warn about subscripts whose type is 'char'\"},\n+  { \"-Wchar-subscripts\", \n+    N_(\"Warn about subscripts whose type is 'char'\") },\n   { \"-Wno-char-subscripts\", \"\" },\n-  { \"-Wcomment\", \"Warn if nested comments are detected\" },\n+  { \"-Wcomment\", \n+    N_(\"Warn if nested comments are detected\") },\n   { \"-Wno-comment\", \"\" },\n-  { \"-Wcomments\", \"Warn if nested comments are detected\" },\n+  { \"-Wcomments\", \n+    N_(\"Warn if nested comments are detected\") },\n   { \"-Wno-comments\", \"\" },\n-  { \"-Wconversion\", \"Warn about possibly confusing type conversions\" },\n+  { \"-Wconversion\", \n+    N_(\"Warn about possibly confusing type conversions\") },\n   { \"-Wno-conversion\", \"\" },\n-  { \"-Wformat\", \"Warn about printf/scanf/strftime/strfmon format anomalies\" },\n+  { \"-Wformat\", \n+    N_(\"Warn about printf/scanf/strftime/strfmon format anomalies\") },\n   { \"-Wno-format\", \"\" },\n   { \"-Wformat-y2k\", \"\" },\n   { \"-Wno-format-y2k\",\n-    \"Don't warn about strftime formats yielding 2 digit years\" },\n+    N_(\"Don't warn about strftime formats yielding 2 digit years\") },\n   { \"-Wformat-extra-args\", \"\" },\n   { \"-Wno-format-extra-args\",\n-    \"Don't warn about too many arguments to format functions\" },\n-  { \"-Wformat-nonliteral\", \"Warn about non-string-literal format strings\" },\n+    N_(\"Don't warn about too many arguments to format functions\") },\n+  { \"-Wformat-nonliteral\", \n+    N_(\"Warn about non-string-literal format strings\") },\n   { \"-Wno-format-nonliteral\", \"\" },\n   { \"-Wformat-security\",\n-    \"Warn about possible security problems with format functions\" },\n+    N_(\"Warn about possible security problems with format functions\") },\n   { \"-Wno-format-security\", \"\" },\n   { \"-Wimplicit-function-declaration\",\n-    \"Warn about implicit function declarations\" },\n+    N_(\"Warn about implicit function declarations\") },\n   { \"-Wno-implicit-function-declaration\", \"\" },\n   { \"-Werror-implicit-function-declaration\", \"\" },\n-  { \"-Wimplicit-int\", \"Warn when a declaration does not specify a type\" },\n+  { \"-Wimplicit-int\", \n+    N_(\"Warn when a declaration does not specify a type\") },\n   { \"-Wno-implicit-int\", \"\" },\n   { \"-Wimplicit\", \"\" },\n   { \"-Wno-implicit\", \"\" },\n-  { \"-Wimport\", \"Warn about the use of the #import directive\" },\n+  { \"-Wimport\", \n+    N_(\"Warn about the use of the #import directive\") },\n   { \"-Wno-import\", \"\" },\n   { \"-Wlong-long\",\"\" },\n-  { \"-Wno-long-long\", \"Do not warn about using 'long long' when -pedantic\" },\n-  { \"-Wmain\", \"Warn about suspicious declarations of main\" },\n+  { \"-Wno-long-long\", \n+    N_(\"Do not warn about using 'long long' when -pedantic\") },\n+  { \"-Wmain\", \n+    N_(\"Warn about suspicious declarations of main\") },\n   { \"-Wno-main\", \"\" },\n   { \"-Wmissing-braces\",\n-    \"Warn about possibly missing braces around initialisers\" },\n+    N_(\"Warn about possibly missing braces around initialisers\") },\n   { \"-Wno-missing-braces\", \"\" },\n   { \"-Wmissing-declarations\",\n-    \"Warn about global funcs without previous declarations\"},\n+    N_(\"Warn about global funcs without previous declarations\") },\n   { \"-Wno-missing-declarations\", \"\" },\n-  { \"-Wmissing-prototypes\", \"Warn about global funcs without prototypes\" },\n+  { \"-Wmissing-prototypes\", \n+    N_(\"Warn about global funcs without prototypes\") },\n   { \"-Wno-missing-prototypes\", \"\" },\n-  { \"-Wmultichar\", \"Warn about use of multicharacter literals\"},\n+  { \"-Wmultichar\", \n+    N_(\"Warn about use of multicharacter literals\") },\n   { \"-Wno-multichar\", \"\" },\n-  { \"-Wnested-externs\", \"Warn about externs not at file scope level\" },\n+  { \"-Wnested-externs\", \n+    N_(\"Warn about externs not at file scope level\") },\n   { \"-Wno-nested-externs\", \"\" },\n-  { \"-Wparentheses\", \"Warn about possible missing parentheses\" },\n+  { \"-Wparentheses\", \n+    N_(\"Warn about possible missing parentheses\") },\n   { \"-Wno-parentheses\", \"\" },\n   { \"-Wsequence-point\",\n-    \"Warn about possible violations of sequence point rules\" },\n+    N_(\"Warn about possible violations of sequence point rules\") },\n   { \"-Wno-sequence-point\", \"\" },\n-  { \"-Wpointer-arith\", \"Warn about function pointer arithmetic\" },\n+  { \"-Wpointer-arith\", \n+    N_(\"Warn about function pointer arithmetic\") },\n   { \"-Wno-pointer-arith\", \"\" },\n   { \"-Wredundant-decls\",\n-    \"Warn about multiple declarations of the same object\" },\n+    N_(\"Warn about multiple declarations of the same object\") },\n   { \"-Wno-redundant-decls\", \"\" },\n-  { \"-Wsign-compare\", \"Warn about signed/unsigned comparisons\" },\n+  { \"-Wsign-compare\", \n+    N_(\"Warn about signed/unsigned comparisons\") },\n   { \"-Wno-sign-compare\", \"\" },\n-  { \"-Wfloat-equal\", \"Warn about testing equality of floating point numbers\" },\n+  { \"-Wfloat-equal\", \n+    N_(\"Warn about testing equality of floating point numbers\") },\n   { \"-Wno-float-equal\", \"\" },\n-  { \"-Wunknown-pragmas\", \"Warn about unrecognized pragmas\" },\n+  { \"-Wunknown-pragmas\", \n+    N_(\"Warn about unrecognized pragmas\") },\n   { \"-Wno-unknown-pragmas\", \"\" },\n-  { \"-Wstrict-prototypes\", \"Warn about non-prototyped function decls\" },\n+  { \"-Wstrict-prototypes\", \n+    N_(\"Warn about non-prototyped function decls\") },\n   { \"-Wno-strict-prototypes\", \"\" },\n-  { \"-Wtraditional\", \"Warn about constructs whose meaning change in ISO C\"},\n+  { \"-Wtraditional\", \n+    N_(\"Warn about constructs whose meaning change in ISO C\") },\n   { \"-Wno-traditional\", \"\" },\n-  { \"-Wtrigraphs\", \"Warn when trigraphs are encountered\" },\n+  { \"-Wtrigraphs\", \n+    N_(\"Warn when trigraphs are encountered\") },\n   { \"-Wno-trigraphs\", \"\" },\n   { \"-Wundef\", \"\" },\n   { \"-Wno-undef\", \"\" },\n-  { \"-Wwrite-strings\", \"Mark strings as 'const char *'\"},\n+  { \"-Wwrite-strings\", \n+    N_(\"Mark strings as 'const char *'\") },\n   { \"-Wno-write-strings\", \"\" },\n \n #define DEFINE_LANG_NAME(NAME) { NULL, NAME },\n@@ -1459,34 +1497,42 @@ int warn_missing_noreturn;\n \n lang_independent_options W_options[] =\n {\n-  {\"unused-function\", &warn_unused_function, 1, \"Warn when a function is unused\" },\n-  {\"unused-label\", &warn_unused_label, 1, \"Warn when a label is unused\" },\n-  {\"unused-parameter\", &warn_unused_parameter, 1, \"Warn when a function parameter is unused\" },\n-  {\"unused-variable\", &warn_unused_variable, 1, \"Warn when a variable is unused\" },\n-  {\"unused-value\", &warn_unused_value, 1, \"Warn when an expression value is unused\" },\n-  {\"system-headers\", &warn_system_headers, 1, \"Do not suppress warnings from system headers\"},\n-  {\"error\", &warnings_are_errors, 1, \"\"},\n-  {\"shadow\", &warn_shadow, 1, \"Warn when one local variable shadows another\" },\n+  {\"unused-function\", &warn_unused_function, 1,\n+   N_(\"Warn when a function is unused\") },\n+  {\"unused-label\", &warn_unused_label, 1,\n+   N_(\"Warn when a label is unused\") },\n+  {\"unused-parameter\", &warn_unused_parameter, 1,\n+   N_(\"Warn when a function parameter is unused\") },\n+  {\"unused-variable\", &warn_unused_variable, 1,\n+   N_(\"Warn when a variable is unused\") },\n+  {\"unused-value\", &warn_unused_value, 1,\n+   N_(\"Warn when an expression value is unused\") },\n+  {\"system-headers\", &warn_system_headers, 1,\n+   N_(\"Do not suppress warnings from system headers\") },\n+  {\"error\", &warnings_are_errors, 1,\n+   N_(\"Treat all warnings as errors\") },\n+  {\"shadow\", &warn_shadow, 1,\n+   N_(\"Warn when one local variable shadows another\") },\n   {\"switch\", &warn_switch, 1,\n-   \"Warn about enumerated switches missing a specific case\" },\n+   N_(\"Warn about enumerated switches missing a specific case\") },\n   {\"aggregate-return\", &warn_aggregate_return, 1,\n-   \"Warn about returning structures, unions or arrays\" },\n+   N_(\"Warn about returning structures, unions or arrays\") },\n   {\"cast-align\", &warn_cast_align, 1,\n-   \"Warn about pointer casts which increase alignment\" },\n+   N_(\"Warn about pointer casts which increase alignment\") },\n   {\"unreachable-code\", &warn_notreached, 1,\n-   \"Warn about code that will never be executed\" },\n+   N_(\"Warn about code that will never be executed\") },\n   {\"uninitialized\", &warn_uninitialized, 1,\n-   \"Warn about unitialized automatic variables\"},\n+   N_(\"Warn about unitialized automatic variables\") },\n   {\"inline\", &warn_inline, 1,\n-   \"Warn when an inlined function cannot be inlined\"},\n+   N_(\"Warn when an inlined function cannot be inlined\") },\n   {\"packed\", &warn_packed, 1,\n-   \"Warn when the packed attribute has no effect on struct layout\"},\n+   N_(\"Warn when the packed attribute has no effect on struct layout\") },\n   {\"padded\", &warn_padded, 1,\n-   \"Warn when padding is required to align struct members\"},\n+   N_(\"Warn when padding is required to align struct members\") },\n   {\"disabled-optimization\", &warn_disabled_optimization, 1,\n-   \"Warn when an optimization pass is disabled\"},\n+   N_(\"Warn when an optimization pass is disabled\") },\n   {\"missing-noreturn\", &warn_missing_noreturn, 1,\n-   \"Warn about functions which might be candidates for attribute noreturn\"}\n+   N_(\"Warn about functions which might be candidates for attribute noreturn\") }\n };\n \n /* The following routines are useful in setting all the flags that\n@@ -3828,7 +3874,7 @@ display_help ()\n \n       if (description != NULL && * description != 0)\n \tprintf (\"  -f%-21s %s\\n\",\n-\t\tf_options[i].string, description);\n+\t\tf_options[i].string, _(description));\n     }\n \n   printf (_(\"  -O[number]              Set optimisation level to [number]\\n\"));\n@@ -3842,7 +3888,7 @@ display_help ()\n \tprintf (\"  --param %s=<value>%.*s%s\\n\",\n \t\tcompiler_params[i].option,\n \t\tlength > 0 ? length : 1, \"                     \",\n-\t\tdescription);\n+\t\t_(description));\n     }\n   printf (_(\"  -pedantic               Issue warnings needed by strict compliance to ISO C\\n\"));\n   printf (_(\"  -pedantic-errors        Like -pedantic except that errors are produced\\n\"));\n@@ -3855,7 +3901,7 @@ display_help ()\n \n       if (description != NULL && * description != 0)\n \tprintf (\"  -W%-21s %s\\n\",\n-\t\tW_options[i].string, description);\n+\t\tW_options[i].string, _(description));\n     }\n \n   printf (_(\"  -Wunused                Enable unused warnings\\n\"));\n@@ -3877,7 +3923,7 @@ display_help ()\n     {\n       if (debug_args[i].description != NULL)\n \tprintf (\"  -g%-21s %s\\n\",\n-\t\tdebug_args[i].arg, debug_args[i].description);\n+\t\tdebug_args[i].arg, _(debug_args[i].description));\n     }\n \n   printf (_(\"  -aux-info <file>        Emit declaration info into <file>.X\\n\"));\n@@ -3932,7 +3978,7 @@ display_help ()\n \t      lang = description;\n \t    }\n \t  else\n-\t    printf (\"  %-23.23s %s\\n\", option, description);\n+\t    printf (\"  %-23.23s %s\\n\", option, _(description));\n \t}\n     }\n \n@@ -3975,7 +4021,7 @@ display_target_options ()\n \t\tprintf (_(\"  -m%-23.23s [undocumented]\\n\"), option);\n \t    }\n \t  else if (* description != 0)\n-\t    doc += printf (\"  -m%-23.23s %s\\n\", option, description);\n+\t    doc += printf (\"  -m%-23.23s %s\\n\", option, _(description));\n \t}\n \n #ifdef TARGET_OPTIONS\n@@ -3994,7 +4040,7 @@ display_target_options ()\n \t\tprintf (_(\"  -m%-23.23s [undocumented]\\n\"), option);\n \t    }\n \t  else if (* description != 0)\n-\t    doc += printf (\"  -m%-23.23s %s\\n\", option, description);\n+\t    doc += printf (\"  -m%-23.23s %s\\n\", option, _(description));\n \t}\n #endif\n       if (undoc)"}]}