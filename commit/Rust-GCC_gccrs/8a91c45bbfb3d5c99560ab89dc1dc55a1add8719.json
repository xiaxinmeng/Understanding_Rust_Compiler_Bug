{"sha": "8a91c45bbfb3d5c99560ab89dc1dc55a1add8719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5MWM0NWJiZmIzZDVjOTk1NjBhYjg5ZGMxZGM1NWExYWRkODcxOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-18T17:51:13Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-18T17:51:13Z"}, "message": "re PR target/30652 (SSE expansion is missing for isinf() and other fpclassify functions)\n\n\tPR target/30652\n\n\t* builtins.c (expand_builtin_interclass_mathfn): Provide a generic\n\ttransformation for builtin ISNORMAL.\n\t(expand_builtin): Handle BUILT_IN_ISNORMAL.\n\t* builtins.def (BUILT_IN_ISNORMAL): New.\n\t* doc/extend.texi: Document isnormal.\n\ntestsuite:\n\t* gcc.dg/pr28796-2.c: Add more cases.\n\nFrom-SVN: r126726", "tree": {"sha": "9ffecaf26eda365c1b062b84581aba0966791c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ffecaf26eda365c1b062b84581aba0966791c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/comments", "author": null, "committer": null, "parents": [{"sha": "0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade"}], "stats": {"total": 81, "additions": 70, "deletions": 11}, "files": [{"sha": "24b7c2e91e14f5110ded90137521a0cf7e64b1a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a91c45bbfb3d5c99560ab89dc1dc55a1add8719", "patch": "@@ -1,3 +1,13 @@\n+2007-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR target/30652\n+\n+\t* builtins.c (expand_builtin_interclass_mathfn): Provide a generic\n+\ttransformation for builtin ISNORMAL.\n+\t(expand_builtin): Handle BUILT_IN_ISNORMAL.\n+\t* builtins.def (BUILT_IN_ISNORMAL): New.\n+\t* doc/extend.texi: Document isnormal.\n+\n 2007-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR target/30652"}, {"sha": "d0e5db903bc93f5bcd0aaa762c2ad05ca13dcd27", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8a91c45bbfb3d5c99560ab89dc1dc55a1add8719", "patch": "@@ -2230,6 +2230,7 @@ expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n       errno_set = true; builtin_optab = ilogb_optab; break;\n     CASE_FLT_FN (BUILT_IN_ISINF):\n       builtin_optab = isinf_optab; break;\n+    case BUILT_IN_ISNORMAL:\n     case BUILT_IN_ISFINITE:\n     CASE_FLT_FN (BUILT_IN_FINITE):\n       /* These builtins have no optabs (yet).  */\n@@ -2316,6 +2317,28 @@ expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n \t\t\t\t  build_real (type, r));\n \treturn expand_expr (result, target, VOIDmode, EXPAND_NORMAL);\n       }\n+    case BUILT_IN_ISNORMAL:\n+      {\n+\t/* isnormal(x) -> isgreaterequal(fabs(x),DBL_MIN) &\n+\t   islessequal(fabs(x),DBL_MAX).  */\n+\ttree const isle_fn = built_in_decls[BUILT_IN_ISLESSEQUAL];\n+\ttree const isge_fn = built_in_decls[BUILT_IN_ISGREATEREQUAL];\n+\ttree const type = TREE_TYPE (arg);\n+\tREAL_VALUE_TYPE rmax, rmin;\n+\tchar buf[128];\n+\n+\tget_max_float (REAL_MODE_FORMAT (mode), buf, sizeof (buf));\n+\treal_from_string (&rmax, buf);\n+\tsprintf (buf, \"0x1p%d\", REAL_MODE_FORMAT (mode)->emin - 1);\n+\treal_from_string (&rmin, buf);\n+\targ = builtin_save_expr (fold_build1 (ABS_EXPR, type, arg));\n+\tresult = build_call_expr (isle_fn, 2, arg,\n+\t\t\t\t  build_real (type, rmax));\n+\tresult = fold_build2 (BIT_AND_EXPR, integer_type_node, result,\n+\t\t\t      build_call_expr (isge_fn, 2, arg,\n+\t\t\t\t\t       build_real (type, rmin)));\n+\treturn expand_expr (result, target, VOIDmode, EXPAND_NORMAL);\n+      }\n     default:\n       break;\n     }\n@@ -6173,6 +6196,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     CASE_FLT_FN (BUILT_IN_ISINF):\n     CASE_FLT_FN (BUILT_IN_FINITE):\n     case BUILT_IN_ISFINITE:\n+    case BUILT_IN_ISNORMAL:\n       target = expand_builtin_interclass_mathfn (exp, target, subtarget);\n       if (target)\n \treturn target;"}, {"sha": "2f23d870bbf8e11bce892e09344beca2468aacec", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=8a91c45bbfb3d5c99560ab89dc1dc55a1add8719", "patch": "@@ -667,6 +667,7 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNANL, \"isnanl\", BT_FN_INT_LONGDOUBLE, ATTR_CO\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNAND32, \"isnand32\", BT_FN_INT_DFLOAT32, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNAND64, \"isnand64\", BT_FN_INT_DFLOAT64, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNAND128, \"isnand128\", BT_FN_INT_DFLOAT128, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_ISNORMAL, \"isnormal\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n DEF_GCC_BUILTIN        (BUILT_IN_ISGREATER, \"isgreater\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n DEF_GCC_BUILTIN        (BUILT_IN_ISGREATEREQUAL, \"isgreaterequal\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n DEF_GCC_BUILTIN        (BUILT_IN_ISLESS, \"isless\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)"}, {"sha": "5c74b840131db277ec2851f3595f2d9ed9cebbfb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8a91c45bbfb3d5c99560ab89dc1dc55a1add8719", "patch": "@@ -5438,6 +5438,7 @@ should be called and the @var{flag} argument passed to it.\n @section Other built-in functions provided by GCC\n @cindex built-in functions\n @findex __builtin_isfinite\n+@findex __builtin_isnormal\n @findex __builtin_isgreater\n @findex __builtin_isgreaterequal\n @findex __builtin_isless\n@@ -5966,8 +5967,8 @@ the same names as the standard macros ( @code{isgreater},\n @code{islessgreater}, and @code{isunordered}) , with @code{__builtin_}\n prefixed.  We intend for a library implementor to be able to simply\n @code{#define} each standard macro to its built-in equivalent.\n-In the same fashion, GCC provides an @code{isfinite} built-in used\n-with @code{__builtin_} prefixed.\n+In the same fashion, GCC provides @code{isfinite} and @code{isnormal}\n+built-ins used with @code{__builtin_} prefixed.\n \n @deftypefn {Built-in Function} int __builtin_types_compatible_p (@var{type1}, @var{type2})\n "}, {"sha": "ab18376ccf36fbbd4215ea5797668cd3c53ca59f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a91c45bbfb3d5c99560ab89dc1dc55a1add8719", "patch": "@@ -1,3 +1,7 @@\n+2007-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/pr28796-2.c: Add more cases.\n+\n 2007-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/pr28796-1.c: Add more cases."}, {"sha": "c69a60e0c4afca7ba2441fb75602d5639f313471", "filename": "gcc/testsuite/gcc.dg/pr28796-2.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a91c45bbfb3d5c99560ab89dc1dc55a1add8719/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c?ref=8a91c45bbfb3d5c99560ab89dc1dc55a1add8719", "patch": "@@ -6,7 +6,8 @@ extern void abort (void);\n \n void __attribute__ ((__noinline__))\n foo_1 (float f, double d, long double ld,\n-       int res_unord, int res_isnan, int res_isinf, int res_isfin)\n+       int res_unord, int res_isnan, int res_isinf,\n+       int res_isfin, int res_isnorm)\n {\n   if (__builtin_isunordered (f, 0) != res_unord)\n     abort ();\n@@ -43,6 +44,13 @@ foo_1 (float f, double d, long double ld,\n   if (__builtin_isinfl (ld) != res_isinf)\n     abort ();\n \n+  if (__builtin_isnormal (f) != res_isnorm)\n+    abort ();\n+  if (__builtin_isnormal (d) != res_isnorm)\n+    abort ();\n+  if (__builtin_isnormal (ld) != res_isnorm)\n+    abort ();\n+\n   if (__builtin_isfinite (f) != res_isfin)\n     abort ();\n   if (__builtin_isfinite (d) != res_isfin)\n@@ -64,10 +72,12 @@ foo_1 (float f, double d, long double ld,\n \n void __attribute__ ((__noinline__))\n foo (float f, double d, long double ld,\n-     int res_unord, int res_isnan, int res_isinf, int res_isfin)\n+     int res_unord, int res_isnan, int res_isinf,\n+     int res_isfin, int res_isnorm)\n {\n-  foo_1 (f, d, ld, res_unord, res_isnan, res_isinf, res_isfin);\n-  foo_1 (-f, -d, -ld, res_unord, res_isnan, res_isinf, res_isfin);\n+  foo_1 (f, d, ld, res_unord, res_isnan, res_isinf, res_isfin, res_isnorm);\n+  /* Try all values negative as well.  */\n+  foo_1 (-f, -d, -ld, res_unord, res_isnan, res_isinf, res_isfin, res_isnorm);\n }\n \n int main()\n@@ -77,19 +87,28 @@ int main()\n   long double ld;\n   \n   f = __builtin_nanf(\"\"); d = __builtin_nan(\"\"); ld = __builtin_nanl(\"\");\n-  foo(f, d, ld, /*unord=*/ 1, /*isnan=*/ 1, /*isinf=*/ 0, /*isfin=*/ 0);\n+  foo(f, d, ld, /*unord=*/ 1, /*isnan=*/ 1, /*isinf=*/ 0, /*isfin=*/ 0, /*isnorm=*/ 0);\n \n   f = __builtin_inff(); d = __builtin_inf(); ld = __builtin_infl();\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0);\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0, /*isnorm=*/ 0);\n \n   f = 0; d = 0; ld = 0;\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1);\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 0);\n+\n+  f = 1; d = 1; ld = 1;\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 1);\n \n   f = __FLT_MIN__; d = __DBL_MIN__; ld = __LDBL_MIN__;\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1);\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 1);\n+\n+  f = __FLT_MIN__/2; d = __DBL_MIN__/2; ld = __LDBL_MIN__/2;\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 0);\n \n   f = __FLT_MAX__; d = __DBL_MAX__; ld = __LDBL_MAX__;\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1);\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 1);\n+\n+  f = __FLT_MAX__*2; d = __DBL_MAX__*2; ld = __LDBL_MAX__*2;\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0, /*isnorm=*/ 0);\n \n   return 0;\n }"}]}