{"sha": "13a9fa4483a31c1b7f35fdc83720f75fdc94231c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhOWZhNDQ4M2EzMWMxYjdmMzVmZGM4MzcyMGY3NWZkYzk0MjMxYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-03-29T13:18:48Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-03-29T13:18:48Z"}, "message": "* except.c (dump_eh_tree): Dump all datastructures.\n\nFrom-SVN: r145231", "tree": {"sha": "2dca6a5b4bd2bb19051bcf95d501af14b1ca319f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dca6a5b4bd2bb19051bcf95d501af14b1ca319f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13a9fa4483a31c1b7f35fdc83720f75fdc94231c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a9fa4483a31c1b7f35fdc83720f75fdc94231c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a9fa4483a31c1b7f35fdc83720f75fdc94231c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a9fa4483a31c1b7f35fdc83720f75fdc94231c/comments", "author": null, "committer": null, "parents": [{"sha": "e38cf7336bb78c6e2234b273823e4a2581ea72e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38cf7336bb78c6e2234b273823e4a2581ea72e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e38cf7336bb78c6e2234b273823e4a2581ea72e6"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "1d54be6542407bc0f51ddc0bbdfb666cfb566839", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a9fa4483a31c1b7f35fdc83720f75fdc94231c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a9fa4483a31c1b7f35fdc83720f75fdc94231c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13a9fa4483a31c1b7f35fdc83720f75fdc94231c", "patch": "@@ -1,3 +1,7 @@\n+2009-03-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* except.c (dump_eh_tree): Dump all datastructures.\n+\n 2009-03-29  Jan Hubicka  <jh@suse.cz>\n \n \t* except.c (duplicate_eh_regions_0): Handle AKA bitmap."}, {"sha": "d8bafc04c9bac4bac0667b576d328405d139bbc1", "filename": "gcc/except.c", "status": "modified", "additions": 66, "deletions": 14, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a9fa4483a31c1b7f35fdc83720f75fdc94231c/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a9fa4483a31c1b7f35fdc83720f75fdc94231c/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=13a9fa4483a31c1b7f35fdc83720f75fdc94231c", "patch": "@@ -3860,30 +3860,80 @@ get_eh_throw_stmt_table (struct function *fun)\n }\n \n /* Dump EH information to OUT.  */\n+\n void\n-dump_eh_tree (FILE *out, struct function *fun)\n+dump_eh_tree (FILE * out, struct function *fun)\n {\n   struct eh_region *i;\n   int depth = 0;\n-  static const char * const type_name[] = {\"unknown\", \"cleanup\", \"try\", \"catch\",\n-\t\t\t\t\t   \"allowed_exceptions\", \"must_not_throw\",\n-\t\t\t\t\t   \"throw\"};\n+  static const char *const type_name[] = { \"unknown\", \"cleanup\", \"try\", \"catch\",\n+    \t\t\t\t\t   \"allowed_exceptions\", \"must_not_throw\",\n+    \t\t\t\t\t   \"throw\"\n+  \t\t\t\t\t };\n \n   i = fun->eh->region_tree;\n-  if (! i)\n+  if (!i)\n     return;\n \n   fprintf (out, \"Eh tree:\\n\");\n   while (1)\n     {\n       fprintf (out, \"  %*s %i %s\", depth * 2, \"\",\n-\t       i->region_number, type_name [(int)i->type]);\n+\t       i->region_number, type_name[(int) i->type]);\n       if (i->tree_label)\n \t{\n-          fprintf (out, \" tree_label:\");\n+\t  fprintf (out, \" tree_label:\");\n \t  print_generic_expr (out, i->tree_label, 0);\n \t}\n-      fprintf (out, \"\\n\");\n+      switch (i->type)\n+\t{\n+\tcase ERT_CLEANUP:\n+\t  if (i->u.cleanup.prev_try)\n+\t    fprintf (out, \" prev try:%i\",\n+\t\t     i->u.cleanup.prev_try->region_number);\n+\t  break;\n+\n+\tcase ERT_TRY:\n+\t  {\n+\t    struct eh_region *c;\n+\t    fprintf (out, \" catch regions:\");\n+\t    for (c = i->u.eh_try.eh_catch; c; c = c->u.eh_catch.next_catch)\n+\t      fprintf (out, \" %i\", c->region_number);\n+\t  }\n+\t  break;\n+\n+\tcase ERT_CATCH:\n+\t  if (i->u.eh_catch.prev_catch)\n+\t    fprintf (out, \" prev: %i\",\n+\t\t     i->u.eh_catch.prev_catch->region_number);\n+\t  if (i->u.eh_catch.next_catch)\n+\t    fprintf (out, \" next %i\",\n+\t\t     i->u.eh_catch.next_catch->region_number);\n+\t  break;\n+\n+\tcase ERT_ALLOWED_EXCEPTIONS:\n+\t  fprintf (out, \"filter :%i types:\", i->u.allowed.filter);\n+\t  print_generic_expr (out, i->u.allowed.type_list, 0);\n+\t  break;\n+\n+\tcase ERT_THROW:\n+\t  fprintf (out, \"type:\");\n+\t  print_generic_expr (out, i->u.eh_throw.type, 0);\n+\t  break;\n+\n+\tcase ERT_MUST_NOT_THROW:\n+\t  break;\n+\n+\tcase ERT_UNKNOWN:\n+\t  break;\n+\t}\n+      if (i->aka)\n+\t{\n+\t  fprintf (out, \" also known as:\");\n+\t  dump_bitmap (out, i->aka);\n+\t}\n+      else\n+\tfprintf (out, \"\\n\");\n       /* If there are sub-regions, process them.  */\n       if (i->inner)\n \ti = i->inner, depth++;\n@@ -3893,12 +3943,14 @@ dump_eh_tree (FILE *out, struct function *fun)\n       /* Otherwise, step back up the tree to the next peer.  */\n       else\n \t{\n-\t  do {\n-\t    i = i->outer;\n-\t    depth--;\n-\t    if (i == NULL)\n-\t      return;\n-\t  } while (i->next_peer == NULL);\n+\t  do\n+\t    {\n+\t      i = i->outer;\n+\t      depth--;\n+\t      if (i == NULL)\n+\t\treturn;\n+\t    }\n+\t  while (i->next_peer == NULL);\n \t  i = i->next_peer;\n \t}\n     }"}]}