{"sha": "99a9c9460d48b857f4aca5667724e3dbf920a114", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlhOWM5NDYwZDQ4Yjg1N2Y0YWNhNTY2NzcyNGUzZGJmOTIwYTExNA==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2000-11-23T11:04:45Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2000-11-23T11:04:45Z"}, "message": "cse.c (cse_insn): Initialise all regcost variables.\n\n\n        * cse.c (cse_insn): Initialise all regcost variables.\n        Fix a typo add missing '='.\n        Only compare costs if there is a replacement insn.\n\nFrom-SVN: r37694", "tree": {"sha": "afc3b9718ef139df2cb0d54b2bea8b30b3699a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc3b9718ef139df2cb0d54b2bea8b30b3699a7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99a9c9460d48b857f4aca5667724e3dbf920a114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a9c9460d48b857f4aca5667724e3dbf920a114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99a9c9460d48b857f4aca5667724e3dbf920a114", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a9c9460d48b857f4aca5667724e3dbf920a114/comments", "author": null, "committer": null, "parents": [{"sha": "f9b383f20f8ec33aa5838804020f423021c431c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b383f20f8ec33aa5838804020f423021c431c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b383f20f8ec33aa5838804020f423021c431c9"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "6721de104f3872806652216cad130739db973865", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a9c9460d48b857f4aca5667724e3dbf920a114/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a9c9460d48b857f4aca5667724e3dbf920a114/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99a9c9460d48b857f4aca5667724e3dbf920a114", "patch": "@@ -1,3 +1,9 @@\n+2000-11-23  Graham Stott  <grahams@redhat.com>\n+\n+\t* cse.c (cse_insn): Initialise all regcost variables.\n+\tFix a typo add missing '='.\n+\tOnly compare costs if there is a replacement insn.\n+\n Thu Nov 23 04:33:33 2000  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* final.c (output_addr_const) [LABEL_REF]: Simplify."}, {"sha": "f89067a80008538253cad0a9c778253b4f1d0c26", "filename": "gcc/cse.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a9c9460d48b857f4aca5667724e3dbf920a114/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a9c9460d48b857f4aca5667724e3dbf920a114/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=99a9c9460d48b857f4aca5667724e3dbf920a114", "patch": "@@ -4941,10 +4941,16 @@ cse_insn (insn, libcall_insn)\n       rtx src_const = 0;\n       rtx src_related = 0;\n       struct table_elt *src_const_elt = 0;\n-      int src_cost = MAX_COST, src_eqv_cost = MAX_COST, src_folded_cost = MAX_COST;\n-      int src_related_cost = MAX_COST, src_elt_cost = MAX_COST;\n-      int src_regcost, src_eqv_regcost, src_folded_regcost;\n-      int src_related_regcost, src_elt_regcost;\n+      int src_cost = MAX_COST;\n+      int src_eqv_cost = MAX_COST;\n+      int src_folded_cost = MAX_COST;\n+      int src_related_cost = MAX_COST;\n+      int src_elt_cost = MAX_COST;\n+      int src_regcost = MAX_COST;\n+      int src_eqv_regcost = MAX_COST;\n+      int src_folded_regcost = MAX_COST;\n+      int src_related_regcost = MAX_COST;\n+      int src_elt_regcost = MAX_COST;\n       /* Set non-zero if we need to call force_const_mem on with the\n \t contents of src_folded before using it.  */\n       int src_folded_force_flag = 0;\n@@ -5395,7 +5401,7 @@ cse_insn (insn, libcall_insn)\n       /* If this was an indirect jump insn, a known label will really be\n \t cheaper even though it looks more expensive.  */\n       if (dest == pc_rtx && src_const && GET_CODE (src_const) == LABEL_REF)\n-\tsrc_folded = src_const, src_folded_cost = src_folded_regcost -1;\n+\tsrc_folded = src_const, src_folded_cost = src_folded_regcost = -1;\n \n       /* Terminate loop when replacement made.  This must terminate since\n          the current contents will be tested and will always be valid.  */\n@@ -5436,8 +5442,9 @@ cse_insn (insn, libcall_insn)\n           /* Find cheapest and skip it for the next time.   For items\n \t     of equal cost, use this order:\n \t     src_folded, src, src_eqv, src_related and hash table entry.  */\n-\t  if (preferrable (src_folded_cost, src_folded_regcost,\n-\t\t\t   src_cost, src_regcost) <= 0\n+\t  if (src_folded\n+\t      && preferrable (src_folded_cost, src_folded_regcost,\n+\t\t\t      src_cost, src_regcost) <= 0\n \t      && preferrable (src_folded_cost, src_folded_regcost,\n \t\t\t      src_eqv_cost, src_eqv_regcost) <= 0\n \t      && preferrable (src_folded_cost, src_folded_regcost,\n@@ -5449,20 +5456,23 @@ cse_insn (insn, libcall_insn)\n \t      if (src_folded_force_flag)\n \t\ttrial = force_const_mem (mode, trial);\n \t    }\n-\t  else if (preferrable (src_cost, src_regcost,\n-\t\t\t\tsrc_eqv_cost, src_eqv_regcost) <= 0\n+\t  else if (src\n+\t\t   && preferrable (src_cost, src_regcost,\n+\t\t\t\t   src_eqv_cost, src_eqv_regcost) <= 0\n \t\t   && preferrable (src_cost, src_regcost,\n \t\t\t\t   src_related_cost, src_related_regcost) <= 0\n \t\t   && preferrable (src_cost, src_regcost,\n \t\t\t\t   src_elt_cost, src_elt_regcost) <= 0)\n \t    trial = src, src_cost = MAX_COST;\n-\t  else if (preferrable (src_eqv_cost, src_eqv_regcost,\n-\t\t\t\tsrc_related_cost, src_related_regcost) <= 0\n+\t  else if (src_eqv_here\n+\t\t   && preferrable (src_eqv_cost, src_eqv_regcost,\n+\t\t\t\t   src_related_cost, src_related_regcost) <= 0\n \t\t   && preferrable (src_eqv_cost, src_eqv_regcost,\n \t\t\t\t   src_elt_cost, src_elt_regcost) <= 0)\n \t    trial = copy_rtx (src_eqv_here), src_eqv_cost = MAX_COST;\n-\t  else if (preferrable (src_related_cost, src_related_regcost,\n-\t\t\t\tsrc_elt_cost, src_elt_regcost) <= 0)\n+\t  else if (src_related\n+\t\t   && preferrable (src_related_cost, src_related_regcost,\n+\t\t\t\t   src_elt_cost, src_elt_regcost) <= 0)\n   \t    trial = copy_rtx (src_related), src_related_cost = MAX_COST;\n \t  else\n \t    {"}]}