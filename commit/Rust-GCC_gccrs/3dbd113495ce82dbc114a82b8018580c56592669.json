{"sha": "3dbd113495ce82dbc114a82b8018580c56592669", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiZDExMzQ5NWNlODJkYmMxMTRhODJiODAxODU4MGM1NjU5MjY2OQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-02-07T05:43:59Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-02-07T05:43:59Z"}, "message": "elfos.h (INT_ASM_OP): Don't define it if it's already defined.\n\n* config/elfos.h (INT_ASM_OP): Don't define it if it's already\ndefined.\n* config/sh/sh.h (INT_ASM_OP, ASM_OUTPUT_CONSTRUCTOR,\nASM_OUTPUT_DESTRUCTOR): Copy definitions from config/elfos.h.\n\nFrom-SVN: r39510", "tree": {"sha": "4bf5c9d4d1cf5b527a7d6ac3c9181bdabb4f43ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bf5c9d4d1cf5b527a7d6ac3c9181bdabb4f43ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dbd113495ce82dbc114a82b8018580c56592669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbd113495ce82dbc114a82b8018580c56592669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbd113495ce82dbc114a82b8018580c56592669", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbd113495ce82dbc114a82b8018580c56592669/comments", "author": null, "committer": null, "parents": [{"sha": "64c8ea244c2c4eec88eb0f150e1cbf148682d642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c8ea244c2c4eec88eb0f150e1cbf148682d642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c8ea244c2c4eec88eb0f150e1cbf148682d642"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "e3bb18f8d902c24f344c021b0b37add685b241f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd113495ce82dbc114a82b8018580c56592669/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd113495ce82dbc114a82b8018580c56592669/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dbd113495ce82dbc114a82b8018580c56592669", "patch": "@@ -1,3 +1,10 @@\n+2001-02-07  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/elfos.h (INT_ASM_OP): Don't define it if it's already\n+\tdefined.\n+\t* config/sh/sh.h (INT_ASM_OP, ASM_OUTPUT_CONSTRUCTOR,\n+\tASM_OUTPUT_DESTRUCTOR): Copy definitions from config/elfos.h.\n+\n 2001-02-06  Chandrakala Chavva  <cchavva@redhat.com>\n \n \t* final.c: Revert back my previous changes."}, {"sha": "7d9ac7640a581f08cca5d3470e1fb34d4ac7efb6", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd113495ce82dbc114a82b8018580c56592669/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd113495ce82dbc114a82b8018580c56592669/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=3dbd113495ce82dbc114a82b8018580c56592669", "patch": "@@ -1,6 +1,7 @@\n /* elfos.h  --  operating system specific defines to be used when\n    targeting GCC for some generic ELF system\n-   Copyright (C) 1991, 1994, 1995, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1994, 1995, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n    Based on svr4.h contributed by Ron Guilmette (rfg@netcom.com).\n \n This file is part of GNU CC.\n@@ -232,11 +233,17 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* This is the pseudo-op used to generate a 32-bit word of data with a\n-   specific value in some section.  This is the same for all known svr4\n-   assemblers.  */\n+/* This is the pseudo-op used to generate a reference to a specific\n+   symbol in some section.  It is only used in machine-specific\n+   configuration files, typically only in ASM_OUTPUT_CONSTRUCTOR and\n+   ASM_OUTPUT_DESTRUCTOR.  This is the same for all known svr4\n+   assemblers, except those in targets that don't use 32-bit pointers.\n+   Those should override INT_ASM_OP.  Yes, the name of the macro is\n+   misleading.  */\n \n+#ifndef INT_ASM_OP\n #define INT_ASM_OP\t\t\"\\t.long\\t\"\n+#endif\n \n /* This is the pseudo-op used to generate a contiguous sequence of byte\n    values from a double-quoted string WITHOUT HAVING A TERMINATING NUL"}, {"sha": "01473bd3a52bedb34d56c7184632b0cb4e4d8c41", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd113495ce82dbc114a82b8018580c56592669/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd113495ce82dbc114a82b8018580c56592669/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=3dbd113495ce82dbc114a82b8018580c56592669", "patch": "@@ -1931,11 +1931,34 @@ dtors_section()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n    do { fprintf (FILE, \".section\\t%s\\n\", NAME); } while (0)\n \n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME) \\\n-   do { ctors_section();  asm_fprintf((FILE),\"\\t.long\\t%U%s\\n\", (NAME)); } while (0)\n+/* This is the pseudo-op used to generate a reference to a specific\n+   symbol in some section.  */\n \n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME) \\\n-   do {  dtors_section();  asm_fprintf((FILE),\"\\t.long\\t%U%s\\n\", (NAME)); } while (0)\n+#define INT_ASM_OP\t\"\\t.long\\t\"\n+     \n+/* A C statement (sans semicolon) to output an\n+   element in the table of global constructors.  */\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE, NAME)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      ctors_section ();\t\t\t\t\t\t\\\n+      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\t\\\n+      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* A C statement (sans semicolon) to output an\n+   element in the table of global destructors.  */\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      dtors_section ();                   \t\t\t\\\n+      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\\\n+      assemble_name (FILE, NAME);              \t\t\t\\\n+      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n #undef DO_GLOBAL_CTORS_BODY\n "}]}