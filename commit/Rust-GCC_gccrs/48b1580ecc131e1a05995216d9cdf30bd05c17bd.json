{"sha": "48b1580ecc131e1a05995216d9cdf30bd05c17bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhiMTU4MGVjYzEzMWUxYTA1OTk1MjE2ZDljZGYzMGJkMDVjMTdiZA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@tofu.to.cygnus.com", "date": "1999-06-21T09:42:51Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-06-21T09:42:51Z"}, "message": "elf.h (BSS_SECTION_ASM_OP, [...]): Add the macros.\n\nMon Jun 21 12:27:17 1999  Vladimir Makarov  <vmakarov@tofu.to.cygnus.com>\n\t* config/mips/elf.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n\tAdd the macros.\n\t* config/m68k/m68kelf.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n\tDitto.\n\t* config/sh/sh.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n\tDitto.\n\t* config/arm/telf.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n\tDitto.\n\nFrom-SVN: r27659", "tree": {"sha": "ead2a087a900352ac2e4f27fb637f91b3345045f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ead2a087a900352ac2e4f27fb637f91b3345045f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48b1580ecc131e1a05995216d9cdf30bd05c17bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b1580ecc131e1a05995216d9cdf30bd05c17bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b1580ecc131e1a05995216d9cdf30bd05c17bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b1580ecc131e1a05995216d9cdf30bd05c17bd/comments", "author": null, "committer": null, "parents": [{"sha": "44d7502b7841307dda7b87b0fdb7c0761a74eba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d7502b7841307dda7b87b0fdb7c0761a74eba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44d7502b7841307dda7b87b0fdb7c0761a74eba2"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "f7d6aee1adc9710b7f5a813a237ce6b46db61f7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b1580ecc131e1a05995216d9cdf30bd05c17bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b1580ecc131e1a05995216d9cdf30bd05c17bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48b1580ecc131e1a05995216d9cdf30bd05c17bd", "patch": "@@ -1,3 +1,17 @@\n+Mon Jun 21 12:27:17 1999  Vladimir Makarov  <vmakarov@tofu.to.cygnus.com>\n+\n+\t* config/mips/elf.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n+\tAdd the macros.\n+\n+\t* config/m68k/m68kelf.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n+\tDitto.\n+\n+\t* config/sh/sh.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n+\tDitto.\n+\n+\t* config/arm/telf.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n+\tDitto.\n+\n Mon Jun 21 14:58:42 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/arm.h: Add cpp support for ARM920 and ARM920T cpu"}, {"sha": "a7740caa64a0a294446e327506f4ea0d3878ab3c", "filename": "gcc/config/arm/telf.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b1580ecc131e1a05995216d9cdf30bd05c17bd/gcc%2Fconfig%2Farm%2Ftelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b1580ecc131e1a05995216d9cdf30bd05c17bd/gcc%2Fconfig%2Farm%2Ftelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftelf.h?ref=48b1580ecc131e1a05995216d9cdf30bd05c17bd", "patch": "@@ -105,6 +105,30 @@ extern int arm_structure_size_boundary;\n \n #define USER_LABEL_PREFIX \"\"\n \n+/* If defined, a C expression whose value is a string containing the\n+   assembler operation to identify the following data as\n+   uninitialized global data.  If not defined, and neither\n+   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,\n+   uninitialized global data will be output in the data section if\n+   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n+   used.  */\n+#ifndef BSS_SECTION_ASM_OP\n+#define BSS_SECTION_ASM_OP\t\".section\\t.bss\"\n+#endif\n+\n+/* Like `ASM_OUTPUT_BSS' except takes the required alignment as a\n+   separate, explicit argument.  If you define this macro, it is used\n+   in place of `ASM_OUTPUT_BSS', and gives you more flexibility in\n+   handling the required alignment of the variable.  The alignment is\n+   specified as the number of bits.\n+\n+   Try to use function `asm_output_aligned_bss' defined in file\n+   `varasm.c' when defining this macro. */\n+#ifndef ASM_OUTPUT_ALIGNED_BSS\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n+#endif\n+\n /* Don't know how to order these.  UNALIGNED_WORD_ASM_OP is in\n    dwarf2.out. */ \n #define UNALIGNED_WORD_ASM_OP \".4byte\""}, {"sha": "ce874149da33eaf59bae5b64e6a8de8e1212beca", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b1580ecc131e1a05995216d9cdf30bd05c17bd/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b1580ecc131e1a05995216d9cdf30bd05c17bd/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=48b1580ecc131e1a05995216d9cdf30bd05c17bd", "patch": "@@ -275,3 +275,27 @@ extern int switch_table_difference_label_flag;\n \n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC \"crtbegin.o%s\"\n+\n+/* If defined, a C expression whose value is a string containing the\n+   assembler operation to identify the following data as\n+   uninitialized global data.  If not defined, and neither\n+   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,\n+   uninitialized global data will be output in the data section if\n+   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n+   used.  */\n+#ifndef BSS_SECTION_ASM_OP\n+#define BSS_SECTION_ASM_OP\t\".section\\t.bss\"\n+#endif\n+\n+/* Like `ASM_OUTPUT_BSS' except takes the required alignment as a\n+   separate, explicit argument.  If you define this macro, it is used\n+   in place of `ASM_OUTPUT_BSS', and gives you more flexibility in\n+   handling the required alignment of the variable.  The alignment is\n+   specified as the number of bits.\n+\n+   Try to use function `asm_output_aligned_bss' defined in file\n+   `varasm.c' when defining this macro. */\n+#ifndef ASM_OUTPUT_ALIGNED_BSS\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n+#endif"}, {"sha": "43f92e81969dc47a3369486ad8a2891c1c2d836e", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b1580ecc131e1a05995216d9cdf30bd05c17bd/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b1580ecc131e1a05995216d9cdf30bd05c17bd/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=48b1580ecc131e1a05995216d9cdf30bd05c17bd", "patch": "@@ -90,6 +90,30 @@ do {\t\t\t\t\t\t\t\t\\\n #define TYPE_ASM_OP\t\".type\"\n #define SIZE_ASM_OP\t\".size\"\n \n+/* If defined, a C expression whose value is a string containing the\n+   assembler operation to identify the following data as\n+   uninitialized global data.  If not defined, and neither\n+   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,\n+   uninitialized global data will be output in the data section if\n+   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n+   used.  */\n+#ifndef BSS_SECTION_ASM_OP\n+#define BSS_SECTION_ASM_OP\t\".section\\t.bss\"\n+#endif\n+\n+/* Like `ASM_OUTPUT_BSS' except takes the required alignment as a\n+   separate, explicit argument.  If you define this macro, it is used\n+   in place of `ASM_OUTPUT_BSS', and gives you more flexibility in\n+   handling the required alignment of the variable.  The alignment is\n+   specified as the number of bits.\n+\n+   Try to use function `asm_output_aligned_bss' defined in file\n+   `varasm.c' when defining this macro. */\n+#ifndef ASM_OUTPUT_ALIGNED_BSS\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n+#endif\n+\n /* These macros generate the special .type and .size directives which\n    are used to set the corresponding fields of the linker symbol table\n    entries in an ELF object file under SVR4.  These macros also output"}, {"sha": "e8ea3e49cfd21d78b0a89e3b17b946128381541d", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b1580ecc131e1a05995216d9cdf30bd05c17bd/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b1580ecc131e1a05995216d9cdf30bd05c17bd/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=48b1580ecc131e1a05995216d9cdf30bd05c17bd", "patch": "@@ -1759,6 +1759,30 @@ dtors_section()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n+/* If defined, a C expression whose value is a string containing the\n+   assembler operation to identify the following data as\n+   uninitialized global data.  If not defined, and neither\n+   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,\n+   uninitialized global data will be output in the data section if\n+   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n+   used.  */\n+#ifndef BSS_SECTION_ASM_OP\n+#define BSS_SECTION_ASM_OP\t\".section\\t.bss\"\n+#endif\n+\n+/* Like `ASM_OUTPUT_BSS' except takes the required alignment as a\n+   separate, explicit argument.  If you define this macro, it is used\n+   in place of `ASM_OUTPUT_BSS', and gives you more flexibility in\n+   handling the required alignment of the variable.  The alignment is\n+   specified as the number of bits.\n+\n+   Try to use function `asm_output_aligned_bss' defined in file\n+   `varasm.c' when defining this macro. */\n+#ifndef ASM_OUTPUT_ALIGNED_BSS\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n+#endif\n+\n /* Define this so that jump tables go in same section as the current function,\n    which could be text or it could be a user defined section.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1"}]}