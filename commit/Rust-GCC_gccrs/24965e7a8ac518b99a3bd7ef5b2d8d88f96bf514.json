{"sha": "24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5NjVlN2E4YWM1MThiOTlhM2JkN2VmNWIyZDhkODhmOTZiZjUxNA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-03-08T19:21:04Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-03-08T19:21:04Z"}, "message": "expr.c (expand_expr): Use unsave lang hook.\n\n\t* expr.c (expand_expr): Use unsave lang hook.\n\t* langhooks-def.h (LANG_HOOKS_UNSAVE): New.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.h (struct lang_hooks): New hook unsave.\n\t* tree.c (lang_unsave, lang_unsave_expr_now): Remove.\n\t(unsave_expr_1): Remove unused lang_unsave_expr_now.\n\t(unsave_expr_now_r): Rename lhd_unsave.  Update. Return input.\n\t(unsave_expr_now): Remove.\n\t* tree.h (unsave_expr_now, lang_unsave,\n\tlang_unsave_expr_now): Remove.\n\t(lhd_unsave): New.\ncp:\n\t* cp-lang.c (LANG_HOOKS_UNSAVE): Redefine.\n\t* cp-tree.h (cxx_unsave): New.\n\t* tree.c (cp_unsave): Rename cxx_unsave, update prototype.\n\t(init_tree): Update.\n\nFrom-SVN: r50449", "tree": {"sha": "d73c600d0203e29829b172a0aa74a1ea0b66f315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d73c600d0203e29829b172a0aa74a1ea0b66f315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/comments", "author": null, "committer": null, "parents": [{"sha": "8497934433cc8d0b01a658b8387ac7316f6d76fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8497934433cc8d0b01a658b8387ac7316f6d76fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8497934433cc8d0b01a658b8387ac7316f6d76fb"}], "stats": {"total": 104, "additions": 50, "deletions": 54}, "files": [{"sha": "0e63f6667e77f9f166448ff1c5695249d5f83a51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "patch": "@@ -1,3 +1,17 @@\n+2002-03-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* expr.c (expand_expr): Use unsave lang hook.\n+\t* langhooks-def.h (LANG_HOOKS_UNSAVE): New.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.h (struct lang_hooks): New hook unsave.\n+\t* tree.c (lang_unsave, lang_unsave_expr_now): Remove.\n+\t(unsave_expr_1): Remove unused lang_unsave_expr_now.\n+\t(unsave_expr_now_r): Rename lhd_unsave.  Update. Return input.\n+\t(unsave_expr_now): Remove.\n+\t* tree.h (unsave_expr_now, lang_unsave,\n+\tlang_unsave_expr_now): Remove.\n+\t(lhd_unsave): New.\n+\n 2002-03-08  Andreas Jaeger  <aj@suse.de>\n \n \t* flow.c (propagate_block_delete_insn): Remove unused variable."}, {"sha": "c9166dce575ae947e2b36dbb7ac99eca9e25ca86", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "patch": "@@ -1,3 +1,10 @@\n+2002-03-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_UNSAVE): Redefine.\n+\t* cp-tree.h (cxx_unsave): New.\n+\t* tree.c (cp_unsave): Rename cxx_unsave, update prototype.\n+\t(init_tree): Update.\n+\n 2002-03-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* decl.c (cxx_init_decl_processing): Use ARRAY_SIZE in lieu of"}, {"sha": "072550ad67858d54ef8821830b0dd375947a3371", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "patch": "@@ -52,6 +52,8 @@ static HOST_WIDE_INT cxx_get_alias_set PARAMS ((tree));\n #define LANG_HOOKS_SAFE_FROM_P c_safe_from_p\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL cxx_dup_lang_specific_decl\n+#undef LANG_HOOKS_UNSAVE_EXPR_NOW\n+#define LANG_HOOKS_UNSAVE_EXPR_NOW cxx_unsave_expr_now\n #undef LANG_HOOKS_PRINT_STATISTICS\n #define LANG_HOOKS_PRINT_STATISTICS cxx_print_statistics\n #undef LANG_HOOKS_PRINT_XNODE"}, {"sha": "efceb8c399e047abb1bd19f4dd1917be0457757d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "patch": "@@ -4222,6 +4222,7 @@ extern void replace_defarg\t\t\tPARAMS ((tree, tree));\n extern void end_input\t\t\t\tPARAMS ((void));\n \n /* in tree.c */\n+extern tree cxx_unsave_expr_now\t\tPARAMS ((tree));\n extern void init_tree\t\t\t        PARAMS ((void));\n extern int pod_type_p\t\t\t\tPARAMS ((tree));\n extern tree canonical_type_variant              PARAMS ((tree));"}, {"sha": "5a8b902455bff178992207d4ae1788d606fc8094", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "patch": "@@ -44,7 +44,6 @@ static tree no_linkage_helper PARAMS ((tree *, int *, void *));\n static tree build_srcloc PARAMS ((const char *, int));\n static tree mark_local_for_remap_r PARAMS ((tree *, int *, void *));\n static tree cp_unsave_r PARAMS ((tree *, int *, void *));\n-static void cp_unsave PARAMS ((tree *));\n static tree build_target_expr PARAMS ((tree, tree));\n static tree count_trees_r PARAMS ((tree *, int *, void *));\n static tree verify_stmt_tree_r PARAMS ((tree *, int *, void *));\n@@ -2297,7 +2296,6 @@ void\n init_tree ()\n {\n   make_lang_type_fn = cp_make_lang_type;\n-  lang_unsave = cp_unsave;\n   lang_statement_code_p = cp_statement_code_p;\n   lang_set_decl_assembler_name = mangle_decl;\n   list_hash_table = htab_create (31, list_hash, list_hash_eq, NULL);\n@@ -2389,12 +2387,11 @@ cp_unsave_r (tp, walk_subtrees, data)\n   return NULL_TREE;\n }\n \n-/* Called by unsave_expr_now whenever an expression (*TP) needs to be\n-   unsaved.  */\n+/* Called whenever an expression needs to be unsaved.  */\n \n-static void\n-cp_unsave (tp)\n-     tree *tp;\n+tree\n+cxx_unsave_expr_now (tp)\n+     tree tp;\n {\n   splay_tree st;\n \n@@ -2403,13 +2400,15 @@ cp_unsave (tp)\n   st = splay_tree_new (splay_tree_compare_pointers, NULL, NULL);\n \n   /* Walk the tree once figuring out what needs to be remapped.  */\n-  walk_tree (tp, mark_local_for_remap_r, st, NULL);\n+  walk_tree (&tp, mark_local_for_remap_r, st, NULL);\n \n   /* Walk the tree again, copying, remapping, and unsaving.  */\n-  walk_tree (tp, cp_unsave_r, st, NULL);\n+  walk_tree (&tp, cp_unsave_r, st, NULL);\n \n   /* Clean up.  */\n   splay_tree_delete (st);\n+\n+  return tp;\n }\n \n /* Returns the kind of special function that DECL (a FUNCTION_DECL)"}, {"sha": "caf5a75f8ea246fcab4b8530ae4f758ab157dd8a", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "patch": "@@ -6441,7 +6441,8 @@ expand_expr (exp, target, tmode, modifier)\n       {\n \trtx temp;\n \ttemp = expand_expr (TREE_OPERAND (exp, 0), target, tmode, modifier);\n-\tTREE_OPERAND (exp, 0) = unsave_expr_now (TREE_OPERAND (exp, 0));\n+\tTREE_OPERAND (exp, 0)\n+\t  = (*lang_hooks.unsave_expr_now) (TREE_OPERAND (exp, 0));\n \treturn temp;\n       }\n "}, {"sha": "06ca4f388e883a40e258a0067f059878e0d0ec48", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "patch": "@@ -77,6 +77,7 @@ void lhd_tree_inlining_end_inlining\t\tPARAMS ((tree));\n #define LANG_HOOKS_SAFE_FROM_P\t\tlhd_safe_from_p\n #define LANG_HOOKS_STATICP\t\tlhd_staticp\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL lhd_do_nothing_t\n+#define LANG_HOOKS_UNSAVE_EXPR_NOW\tlhd_unsave_expr_now\n #define LANG_HOOKS_HONOR_READONLY\tfalse\n #define LANG_HOOKS_PRINT_STATISTICS\tlhd_do_nothing\n #define LANG_HOOKS_PRINT_XNODE\t\tlhd_print_tree_nothing\n@@ -146,6 +147,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_SAFE_FROM_P, \\\n   LANG_HOOKS_STATICP, \\\n   LANG_HOOKS_DUP_LANG_SPECIFIC_DECL, \\\n+  LANG_HOOKS_UNSAVE_EXPR_NOW, \\\n   LANG_HOOKS_HONOR_READONLY, \\\n   LANG_HOOKS_PRINT_STATISTICS, \\\n   LANG_HOOKS_PRINT_XNODE, \\"}, {"sha": "14eb999d9c06eefc7a0b11a6da2fc8f1574cfa11", "filename": "gcc/langhooks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "patch": "@@ -132,6 +132,11 @@ struct lang_hooks\n      DECL_NODE with a newly GC-allocated copy.  */\n   void (*dup_lang_specific_decl) PARAMS ((tree));\n \n+  /* Called before its argument, an UNSAVE_EXPR, is to be\n+     unsaved.  Modify it in-place so that all the evaluate only once\n+     things are cleared out.  */\n+  tree (*unsave_expr_now) PARAMS ((tree));\n+\n   /* Nonzero if TYPE_READONLY and TREE_READONLY should always be honored.  */\n   bool honor_readonly;\n "}, {"sha": "4f19508688fb580e1c5decbcaa713e0c68a1f584", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "patch": "@@ -52,8 +52,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* obstack.[ch] explicitly declined to prototype this.  */\n extern int _obstack_allocated_p PARAMS ((struct obstack *h, PTR obj));\n \n-static void unsave_expr_now_r PARAMS ((tree));\n-\n /* Objects allocated on this obstack last forever.  */\n \n struct obstack permanent_obstack;\n@@ -167,14 +165,6 @@ static int type_hash_marked_p PARAMS ((const void *));\n static void type_hash_mark PARAMS ((const void *));\n static int mark_tree_hashtable_entry PARAMS((void **, void *));\n \n-/* If non-null, these are language-specific helper functions for\n-   unsave_expr_now.  If present, LANG_UNSAVE is called before its\n-   argument (an UNSAVE_EXPR) is to be unsaved, and all other\n-   processing in unsave_expr_now is aborted.  LANG_UNSAVE_EXPR_NOW is\n-   called from unsave_expr_1 for language-specific tree codes.  */\n-void (*lang_unsave) PARAMS ((tree *));\n-void (*lang_unsave_expr_now) PARAMS ((tree));\n-\n /* If non-null, these are language-specific helper functions for\n    unsafe_for_reeval.  Return negative to not handle some tree.  */\n int (*lang_unsafe_for_reeval) PARAMS ((tree));\n@@ -1670,23 +1660,21 @@ unsave_expr_1 (expr)\n       break;\n \n     default:\n-      if (lang_unsave_expr_now != 0)\n-\t(*lang_unsave_expr_now) (expr);\n       break;\n     }\n }\n \n-/* Helper function for unsave_expr_now.  */\n+/* Default lang hook for \"unsave_expr_now\".  */\n \n-static void\n-unsave_expr_now_r (expr)\n+tree\n+lhd_unsave_expr_now (expr)\n      tree expr;\n {\n   enum tree_code code;\n \n   /* There's nothing to do for NULL_TREE.  */\n   if (expr == 0)\n-    return;\n+    return expr;\n \n   unsave_expr_1 (expr);\n \n@@ -1702,8 +1690,8 @@ unsave_expr_now_r (expr)\n     case 'x':  /* miscellaneous: e.g., identifier, TREE_LIST or ERROR_MARK.  */\n       if (code == TREE_LIST)\n \t{\n-\t  unsave_expr_now_r (TREE_VALUE (expr));\n-\t  unsave_expr_now_r (TREE_CHAIN (expr));\n+\t  lhd_unsave_expr_now (TREE_VALUE (expr));\n+\t  lhd_unsave_expr_now (TREE_CHAIN (expr));\n \t}\n       break;\n \n@@ -1717,26 +1705,13 @@ unsave_expr_now_r (expr)\n \tint i;\n \n \tfor (i = first_rtl_op (code) - 1; i >= 0; i--)\n-\t  unsave_expr_now_r (TREE_OPERAND (expr, i));\n+\t  lhd_unsave_expr_now (TREE_OPERAND (expr, i));\n       }\n       break;\n \n     default:\n       abort ();\n     }\n-}\n-\n-/* Modify a tree in place so that all the evaluate only once things\n-   are cleared out.  Return the EXPR given.  */\n-\n-tree\n-unsave_expr_now (expr)\n-     tree expr;\n-{\n-  if (lang_unsave!= 0)\n-    (*lang_unsave) (&expr);\n-  else\n-    unsave_expr_now_r (expr);\n \n   return expr;\n }"}, {"sha": "cb67df88fe5c38cd37ecd6cfbc9c930abc664ab5", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=24965e7a8ac518b99a3bd7ef5b2d8d88f96bf514", "patch": "@@ -2550,18 +2550,6 @@ extern tree unsave_expr\t\t\tPARAMS ((tree));\n \n extern void unsave_expr_1               PARAMS ((tree));\n \n-/* Like unsave_expr_1, but recurses into all subtrees.  */\n-\n-extern tree unsave_expr_now\t\tPARAMS ((tree));\n-\n-/* If non-null, these are language-specific helper functions for\n-   unsave_expr_now.  If present, LANG_UNSAVE is called before its\n-   argument (an UNSAVE_EXPR) is to be unsaved, and all other\n-   processing in unsave_expr_now is aborted.  LANG_UNSAVE_EXPR_NOW is\n-   called from unsave_expr_1 for language-specific tree codes.  */\n-extern void (*lang_unsave)              PARAMS ((tree *));\n-extern void (*lang_unsave_expr_now)     PARAMS ((tree));\n-\n /* Return 0 if it is safe to evaluate EXPR multiple times,\n    return 1 if it is safe if EXPR is unsaved afterward, or\n    return 2 if it is completely unsafe.  */\n@@ -2756,6 +2744,8 @@ extern tree get_set_constructor_bytes\t\tPARAMS ((tree,\n extern tree get_callee_fndecl                   PARAMS ((tree));\n extern void set_decl_assembler_name             PARAMS ((tree));\n extern int type_num_arguments                   PARAMS ((tree));\n+extern tree lhd_unsave_expr_now\t\tPARAMS ((tree));\n+\n \f\n /* In stmt.c */\n "}]}