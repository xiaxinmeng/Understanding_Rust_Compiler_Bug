{"sha": "6c3385c1dd9eab5144207076542c877e2cc9cf02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzMzg1YzFkZDllYWI1MTQ0MjA3MDc2NTQyYzg3N2UyY2M5Y2YwMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-08-24T09:37:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-08-24T09:37:07Z"}, "message": "acinclude.m4 ([GLIBCXX_ENABLE_CLOCK_GETTIME]): Improve documentation.\n\n2008-08-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* acinclude.m4 ([GLIBCXX_ENABLE_CLOCK_GETTIME]): Improve documentation.\n\t* doc/xml/manual/configure.xml: Likewise.\n\nFrom-SVN: r139533", "tree": {"sha": "e2c4e892ccdc1b14cde827043cdc74499fdbcc3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2c4e892ccdc1b14cde827043cdc74499fdbcc3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c3385c1dd9eab5144207076542c877e2cc9cf02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c3385c1dd9eab5144207076542c877e2cc9cf02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c3385c1dd9eab5144207076542c877e2cc9cf02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c3385c1dd9eab5144207076542c877e2cc9cf02/comments", "author": null, "committer": null, "parents": [{"sha": "5c69a0dfdd1626358832b68a3d60afc00ee8429f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c69a0dfdd1626358832b68a3d60afc00ee8429f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c69a0dfdd1626358832b68a3d60afc00ee8429f"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "48e035231df05fa1f1f2cf493cc832b23343538c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3385c1dd9eab5144207076542c877e2cc9cf02/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3385c1dd9eab5144207076542c877e2cc9cf02/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6c3385c1dd9eab5144207076542c877e2cc9cf02", "patch": "@@ -1,3 +1,8 @@\n+2008-08-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* acinclude.m4 ([GLIBCXX_ENABLE_CLOCK_GETTIME]): Improve documentation.\n+\t* doc/xml/manual/configure.xml: Likewise.\n+\n 2008-08-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* acinclude.m4 ([GLIBCXX_ENABLE_CLOCK_GETTIME]): Use [=KIND] in"}, {"sha": "7c854ecff4c432cda0365dff3357eed0c6f7d14a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3385c1dd9eab5144207076542c877e2cc9cf02/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3385c1dd9eab5144207076542c877e2cc9cf02/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=6c3385c1dd9eab5144207076542c877e2cc9cf02", "patch": "@@ -1079,14 +1079,13 @@ dnl [time.clock] in the current C++0x working draft.\n dnl\n dnl --enable-clock-gettime\n dnl --enable-clock-gettime=yes\n-dnl        checks for the availability of monotonic or realtime clocks\n-dnl        in libc and libposix4\n+dnl        checks for the availability of monotonic and realtime clocks\n+dnl        in libc and libposix4 and in case links the latter\n dnl --enable-clock-gettime=rt\n-dnl        searches librt too, and in case of success enables its linking\n-dnl        to libstdc++ as part of the build process.   Note that this is\n+dnl        also searches (and, in case, links) librt.  Note that this is\n dnl        not always desirable because, in glibc, for example, in turn it\n-dnl        triggers automatically the linking of libpthread too, which\n-dnl        activates locking, a large overhead for single-thread programs.\n+dnl        triggers the linking of libpthread too, which activates locking,\n+dnl        a large overhead for single-thread programs.\n dnl --enable-clock-gettime=no\n dnl --disable-clock-gettime\n dnl        disables the checks completely"}, {"sha": "b30b0d04e078e286a008b8e70c3021077da42e3d", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3385c1dd9eab5144207076542c877e2cc9cf02/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3385c1dd9eab5144207076542c877e2cc9cf02/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=6c3385c1dd9eab5144207076542c877e2cc9cf02", "patch": "@@ -320,16 +320,16 @@\n  </listitem></varlistentry>\n \n  <varlistentry><term><code>--enable-clock-gettime=OPTION</code></term>\n- <listitem><para>Enables checks (link-type too) for the clock_gettime clocks,\n-        used in the implementation [time.clock] in the current C++0x draft.\n+ <listitem><para>Enables link-type checks for the availability of the\n+        clock_gettime clocks, used in [time.clock] of the current C++0x draft.\n         The choice OPTION=yes checks for the availability of the monotonic and\n-        realtime clocks in libc and libposix4.  OPTION=rt searches librt too,\n-        and in case of success enables its linking to libstdc++ as part of the\n-        build process.   Note that this is not always desirable because, in\n-        glibc, for example, in turn it triggers automatically the linking of\n-        libpthread too, which activates locking, a large overhead for\n-        single-thread programs.  OPTION=no skips the tests completely.  The\n-        default is OPTION=no.\n+        realtime clocks in libc and libposix4.  In case of need the latter is \n+        also linked to libstdc++ as part of the build process.  OPTION=rt\n+        also searches (and, in case, links) librt.   Note that the latter\n+        is not always desirable because, in glibc, for example, in turn it\n+        triggers the linking of libpthread too, which activates locking,\n+        a large overhead for single-thread programs.  OPTION=no skips the\n+        tests completely.  The default is OPTION=no.\n     </para>\n  </listitem></varlistentry>\n "}]}