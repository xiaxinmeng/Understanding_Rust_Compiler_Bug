{"sha": "917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE3YTlmZDRkNWNlOWVlNWM5MDZhYmIxMDgxMmEzMTZiNzdmYzMxYw==", "commit": {"author": {"name": "Stephen M. Webb", "email": "stephen.webb@bregmasoft.com", "date": "2004-01-30T03:43:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-01-30T03:43:00Z"}, "message": "c_locale.h: Change ::malloc() to new char[].\n\n\n2004-01-29  Stephen M. Webb  <stephen.webb@bregmasoft.com>\n\n\t* config/local/generic/c_locale.h: Change ::malloc() to new char[].\n  \t* config/local/gnu/c_locale.h: Change ::malloc() to new char[].\n  \t* include/bits/stl_tempbuf.h: Convert _Temporary_buffer to use\n\tstd::get_temporary_buffer() instead of duplicating its code.\n\tUpdate to C++STYLE conventions.\n  \t* include/std/std_memory.h (get_temporary_buffer): Use ::operator\n\tnew() instead of std::malloc().\n\t(return_temporary_buffer): Use ::operator delete() instead of\n\tstd::free().\n\nFrom-SVN: r76922", "tree": {"sha": "fcf9db0ae11adc880d72ac1fdbb94ef6a98414ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcf9db0ae11adc880d72ac1fdbb94ef6a98414ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/comments", "author": null, "committer": null, "parents": [{"sha": "ae8f0c17739a44cfeb118280fc59626108b1eb5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8f0c17739a44cfeb118280fc59626108b1eb5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8f0c17739a44cfeb118280fc59626108b1eb5f"}], "stats": {"total": 356, "additions": 198, "deletions": 158}, "files": [{"sha": "e973cce9ac4125093303a24761b222c680261e9a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "patch": "@@ -1,3 +1,15 @@\n+2004-01-29  Stephen M. Webb  <stephen.webb@bregmasoft.com>\n+\n+\t* config/local/generic/c_locale.h: Change ::malloc() to new char[].\n+  \t* config/local/gnu/c_locale.h: Change ::malloc() to new char[].\n+  \t* include/bits/stl_tempbuf.h: Convert _Temporary_buffer to use\n+\tstd::get_temporary_buffer() instead of duplicating its code.\n+\tUpdate to C++STYLE conventions.\n+  \t* include/std/std_memory.h (get_temporary_buffer): Use ::operator\n+\tnew() instead of std::malloc().\n+\t(return_temporary_buffer): Use ::operator delete() instead of\n+\tstd::free().\n+\n 2004-01-29  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/allocator.h: Temporary switch to new_allocator as"}, {"sha": "9fadcc4d99c42c68f46e7e45f9091f2b238ecf78", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,7 +39,6 @@\n #pragma GCC system_header\n \n #include <clocale>\n-#include <cstdlib>   // get std::malloc\n #include <cstring>   // get std::strlen\n #include <cstdio>    // get std::snprintf or std::sprintf\n \n@@ -61,9 +60,8 @@ namespace std\n \t\t     _Tv __v, const __c_locale&, int __prec = -1)\n     {\n       char* __old = std::setlocale(LC_ALL, NULL);\n-      char* __sav = static_cast<char*>(std::malloc(std::strlen(__old) + 1));\n-      if (__sav)\n-        std::strcpy(__sav, __old);\n+      char* __sav = new char[std::strlen(__old) + 1];\n+      std::strcpy(__sav, __old);\n       std::setlocale(LC_ALL, \"C\");\n \n       int __ret;\n@@ -79,7 +77,7 @@ namespace std\n         __ret = std::sprintf(__out, __fmt, __v);\n #endif\n       std::setlocale(LC_ALL, __sav);\n-      std::free(__sav);\n+      delete [] __sav;\n       return __ret;\n     }\n }"}, {"sha": "fe899cfc2a5bf3e38553e5257c6ab99afc7f43fa", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,7 +39,6 @@\n #pragma GCC system_header\n \n #include <cstring>              // get std::strlen\n-#include <cstdlib>              // get std::malloc\n #include <cstdio>               // get std::snprintf or std::sprintf\n #include <clocale>\n #include <langinfo.h>\t\t// For codecvt\n@@ -76,9 +75,8 @@ namespace std\n \t\t     _Tv __v, const __c_locale&, int __prec = -1)\n     {\n       char* __old = std::setlocale(LC_ALL, NULL);\n-      char* __sav = static_cast<char*>(std::malloc(std::strlen(__old) + 1));\n-      if (__sav)\n-        std::strcpy(__sav, __old);\n+      char* __sav = new char[std::strlen(__old) + 1];\n+      std::strcpy(__sav, __old);\n       std::setlocale(LC_ALL, \"C\");\n #endif\n \n@@ -99,7 +97,7 @@ namespace std\n       __gnu_cxx::__uselocale(__old);\n #else\n       std::setlocale(LC_ALL, __sav);\n-      std::free(__sav);\n+      delete [] __sav;\n #endif\n       return __ret;\n     }"}, {"sha": "87080c6220f2c26f928c40dbbf6777c9039975bc", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 95, "deletions": 76, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "patch": "@@ -1,6 +1,6 @@\n // Temporary buffer implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,88 +61,107 @@\n #ifndef _TEMPBUF_H\n #define _TEMPBUF_H 1\n \n-namespace std\n-{\n+#include <memory>\n \n-/**\n- *  @if maint\n- *  This class is used in two places:  stl_algo.h and ext/memory, where it\n- *  is wrapped as the temporary_buffer class.  See temporary_buffer docs for\n- *  more notes.\n- *  @endif\n-*/\n-template <class _ForwardIterator, class _Tp>\n-  class _Temporary_buffer\n+namespace std\n {\n-  // concept requirements\n-  __glibcxx_class_requires(_ForwardIterator, _ForwardIteratorConcept)\n-\n-  ptrdiff_t  _M_original_len;\n-  ptrdiff_t  _M_len;\n-  _Tp*       _M_buffer;\n-\n-  // this is basically get_temporary_buffer() all over again\n-  void _M_allocate_buffer() {\n-    _M_original_len = _M_len;\n-    _M_buffer = 0;\n-\n-    if (_M_len > (ptrdiff_t)(INT_MAX / sizeof(_Tp)))\n-      _M_len = INT_MAX / sizeof(_Tp);\n-\n-    while (_M_len > 0) {\n-      _M_buffer = (_Tp*) malloc(_M_len * sizeof(_Tp));\n-      if (_M_buffer)\n-        break;\n-      _M_len /= 2;\n-    }\n-  }\n-\n-  void _M_initialize_buffer(const _Tp&, __true_type) {}\n-  void _M_initialize_buffer(const _Tp& val, __false_type) {\n-    std::uninitialized_fill_n(_M_buffer, _M_len, val);\n-  }\n-\n-public:\n-  /// As per Table mumble.\n-  ptrdiff_t size() const { return _M_len; }\n-  /// Returns the size requested by the constructor; may be >size().\n-  ptrdiff_t requested_size() const { return _M_original_len; }\n-  /// As per Table mumble.\n-  _Tp* begin() { return _M_buffer; }\n-  /// As per Table mumble.\n-  _Tp* end() { return _M_buffer + _M_len; }\n-\n-  _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) {\n-    // Workaround for a __type_traits bug in the pre-7.3 compiler.\n-    typedef typename __type_traits<_Tp>::has_trivial_default_constructor\n-            _Trivial;\n-\n-    try {\n-      _M_len = std::distance(__first, __last);\n-      _M_allocate_buffer();\n-      if (_M_len > 0)\n-        _M_initialize_buffer(*__first, _Trivial());\n-    }\n-    catch(...)\n+  /**\n+   *  @if maint\n+   *  This class is used in two places: stl_algo.h and ext/memory,\n+   *  where it is wrapped as the temporary_buffer class.  See\n+   *  temporary_buffer docs for more notes.\n+   *  @endif\n+   */\n+  template<typename _ForwardIterator, typename _Tp>\n+    class _Temporary_buffer\n+    {\n+      // concept requirements\n+      __glibcxx_class_requires(_ForwardIterator, _ForwardIteratorConcept)\n+\n+\tpublic:\n+      typedef _Tp         value_type;\n+      typedef value_type* pointer;\n+      typedef pointer     iterator;\n+      typedef ptrdiff_t   size_type;\n+      \n+    protected:\n+      size_type  _M_original_len;\n+      size_type  _M_len;\n+      pointer    _M_buffer;\n+      \n+      void\n+      _M_initialize_buffer(const _Tp&, __true_type) { }\n+\n+      void\n+      _M_initialize_buffer(const _Tp& val, __false_type)\n+      { std::uninitialized_fill_n(_M_buffer, _M_len, val); }\n+      \n+    public:\n+      /// As per Table mumble.\n+      size_type\n+      size() const\n+      { return _M_len; }\n+      \n+      /// Returns the size requested by the constructor; may be >size().\n+      size_type\n+      requested_size() const\n+      { return _M_original_len; }\n+      \n+      /// As per Table mumble.\n+      iterator\n+      begin()\n+      { return _M_buffer; }\n+      \n+      /// As per Table mumble.\n+      iterator\n+      end()\n+      { return _M_buffer + _M_len; }\n+      \n+      /**\n+       * Constructs a temporary buffer of a size somewhere between\n+       * zero and the size of the given range.\n+       */\n+      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);\n+      \n+      ~_Temporary_buffer()\n+      {  \n+\tstd::_Destroy(_M_buffer, _M_buffer + _M_len);\n+\tstd::return_temporary_buffer(_M_buffer);\n+      }\n+      \n+    private:\n+      // Disable copy constructor and assignment operator.\n+      _Temporary_buffer(const _Temporary_buffer&);\n+      void operator=(const _Temporary_buffer&);\n+    };\n+  \n+\n+  template<typename _ForwardIterator, typename _Tp>\n+    _Temporary_buffer<_ForwardIterator, _Tp>::\n+    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)\n+    : _M_original_len(std::distance(__first, __last)), \n+      _M_len(0) , _M_buffer(0)\n+    {\n+      // Workaround for a __type_traits bug in the pre-7.3 compiler.\n+      typedef typename __type_traits<_Tp>::has_trivial_default_constructor\n+\t      _Trivial;\n+\n+      try\n+      {\n+\tpair<pointer, size_type> __p(get_temporary_buffer<value_type>(_M_original_len));\n+\t_M_buffer = __p.first;\n+\t_M_len = __p.second;\n+\tif (_M_len > 0)\n+\t  _M_initialize_buffer(*__first, _Trivial());\n+      }\n+      catch(...)\n       { \n-\tstd::free(_M_buffer); \n+\tstd::return_temporary_buffer(_M_buffer);\n \t_M_buffer = 0; \n \t_M_len = 0;\n \t__throw_exception_again; \n       }\n-  }\n- \n-  ~_Temporary_buffer() {  \n-    std::_Destroy(_M_buffer, _M_buffer + _M_len);\n-    std::free(_M_buffer);\n-  }\n-\n-private:\n-  // Disable copy constructor and assignment operator.\n-  _Temporary_buffer(const _Temporary_buffer&) {}\n-  void operator=(const _Temporary_buffer&) {}\n-};\n-    \n+    }\n } // namespace std\n \n #endif /* _TEMPBUF_H */"}, {"sha": "1111646fd74b543dede2c3cbe616c0448bd10bdc", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "patch": "@@ -65,9 +65,7 @@\n \n namespace std\n {\n-\n   // uninitialized_copy\n-\n   template<typename _InputIterator, typename _ForwardIterator>\n     inline _ForwardIterator \n     __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,\n@@ -76,17 +74,18 @@ namespace std\n     { return std::copy(__first, __last, __result); }\n \n   template<typename _InputIterator, typename _ForwardIterator>\n-    _ForwardIterator \n+    inline _ForwardIterator \n     __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,\n \t\t\t     _ForwardIterator __result,\n \t\t\t     __false_type)\n     {\n       _ForwardIterator __cur = __result;\n-      try {\n-\tfor ( ; __first != __last; ++__first, ++__cur)\n-\t  std::_Construct(&*__cur, *__first);\n-\treturn __cur;\n-      }\n+      try \n+\t{\n+\t  for ( ; __first != __last; ++__first, ++__cur)\n+\t    std::_Construct(&*__cur, *__first);\n+\t  return __cur;\n+\t}\n       catch(...)\n \t{\n \t  std::_Destroy(__result, __cur);\n@@ -105,7 +104,8 @@ namespace std\n   */\n   template<typename _InputIterator, typename _ForwardIterator>\n     inline _ForwardIterator\n-    uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)\n+    uninitialized_copy(_InputIterator __first, _InputIterator __last, \n+\t\t       _ForwardIterator __result)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n@@ -131,13 +131,15 @@ namespace std\n   // destructor is trivial.\n   template<typename _ForwardIterator, typename _Tp>\n     inline void\n-    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last, \n+    __uninitialized_fill_aux(_ForwardIterator __first, \n+\t\t\t     _ForwardIterator __last, \n \t\t\t     const _Tp& __x, __true_type)\n     { std::fill(__first, __last, __x); }\n \n   template<typename _ForwardIterator, typename _Tp>\n     void\n-    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last, \n+    __uninitialized_fill_aux(_ForwardIterator __first, \n+\t\t\t     _ForwardIterator __last, \n \t\t\t     const _Tp& __x, __false_type)\n     {\n       _ForwardIterator __cur = __first;\n@@ -163,7 +165,8 @@ namespace std\n   */\n   template<typename _ForwardIterator, typename _Tp>\n     inline void\n-    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x)\n+    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, \n+\t\t       const _Tp& __x)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n@@ -176,21 +179,20 @@ namespace std\n     inline _ForwardIterator\n     __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,\n \t\t\t       const _Tp& __x, __true_type)\n-    {\n-      return std::fill_n(__first, __n, __x);\n-    }\n+    { return std::fill_n(__first, __n, __x); }\n \n   template<typename _ForwardIterator, typename _Size, typename _Tp>\n     _ForwardIterator\n     __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,\n \t\t\t       const _Tp& __x, __false_type)\n     {\n       _ForwardIterator __cur = __first;\n-      try {\n-\tfor ( ; __n > 0; --__n, ++__cur)\n-\t  std::_Construct(&*__cur, __x);\n-\treturn __cur;\n-      }\n+      try \n+\t{\n+\t  for ( ; __n > 0; --__n, ++__cur)\n+\t    std::_Construct(&*__cur, __x);\n+\t  return __cur;\n+\t}\n       catch(...)\n \t{ \n \t  std::_Destroy(__first, __cur);\n@@ -224,10 +226,13 @@ namespace std\n   //  copies [first2, last2) into\n   //  [result, result + (last1 - first1) + (last2 - first2)).\n \n-  template<typename _InputIterator1, typename _InputIterator2, typename _ForwardIterator>\n+  template<typename _InputIterator1, typename _InputIterator2, \n+\t   typename _ForwardIterator>\n     inline _ForwardIterator\n-    __uninitialized_copy_copy(_InputIterator1 __first1, _InputIterator1 __last1,\n-\t\t\t      _InputIterator2 __first2, _InputIterator2 __last2,\n+    __uninitialized_copy_copy(_InputIterator1 __first1, \n+\t\t\t      _InputIterator1 __last1,\n+\t\t\t      _InputIterator2 __first2, \n+\t\t\t      _InputIterator2 __last2,\n \t\t\t      _ForwardIterator __result)\n     {\n       _ForwardIterator __mid = std::uninitialized_copy(__first1, __last1, __result);\n@@ -270,10 +275,12 @@ namespace std\n \t\t\t      _ForwardIterator __first2, _ForwardIterator __last2,\n \t\t\t      const _Tp& __x)\n     {\n-      _ForwardIterator __mid2 = std::uninitialized_copy(__first1, __last1, __first2);\n-      try {\n-\tstd::uninitialized_fill(__mid2, __last2, __x);\n-      }\n+      _ForwardIterator __mid2 = std::uninitialized_copy(__first1, __last1, \n+\t\t\t\t\t\t\t__first2);\n+      try \n+\t{\n+\t  std::uninitialized_fill(__mid2, __last2, __x);\n+\t}\n       catch(...)\n \t{\n \t  std::_Destroy(__first2, __mid2);"}, {"sha": "4e6641ef673998e3f5e612d8a9829d83594309bd", "filename": "libstdc++-v3/include/std/std_memory.h", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h?ref=917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "patch": "@@ -1,6 +1,6 @@\n // <memory> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -78,33 +78,36 @@ namespace std\n       \n       while (__len > 0) \n \t{\n-\t  _Tp* __tmp = (_Tp*) std::malloc((std::size_t)__len * sizeof(_Tp));\n+\t  _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp), \n+\t\t\t\t\t\t\tnothrow));\n \t  if (__tmp != 0)\n \t    return pair<_Tp*, ptrdiff_t>(__tmp, __len);\n \t  __len /= 2;\n \t}\n-      return pair<_Tp*, ptrdiff_t>((_Tp*)0, 0);\n+      return pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);\n     }\n \n   /**\n-   *  @brief This is a mostly-useless wrapper around malloc().\n+   *  @brief Allocates a temporary buffer.\n    *  @param  len  The number of objects of type Tp.\n-   *  @return   See full description.\n+   *  @return See full description.\n    *\n    *  Reinventing the wheel, but this time with prettier spokes!\n    *\n-   *  This function tries to obtain storage for @c len adjacent Tp objects.\n-   *  The objects themselves are not constructed, of course.  A pair<> is\n-   *  returned containing \"the buffer s address and capacity (in the units of\n-   *  sizeof(Tp)), or a pair of 0 values if no storage can be obtained.\"\n-   *  Note that the capacity obtained may be less than that requested if the\n-   *  memory is unavailable; you should compare len with the .second return\n-   *  value.\n+   *  This function tries to obtain storage for @c len adjacent Tp\n+   *  objects.  The objects themselves are not constructed, of course.\n+   *  A pair<> is returned containing \"the buffer s address and\n+   *  capacity (in the units of sizeof(Tp)), or a pair of 0 values if\n+   *  no storage can be obtained.\"  Note that the capacity obtained\n+   *  may be less than that requested if the memory is unavailable;\n+   *  you should compare len with the .second return value.\n+   *\n+   * Provides the nothrow exception guarantee.\n    */\n   template<typename _Tp>\n     inline pair<_Tp*,ptrdiff_t>\n     get_temporary_buffer(ptrdiff_t __len)\n-    { return std::__get_temporary_buffer(__len, (_Tp*) 0); }\n+    { return std::__get_temporary_buffer(__len, static_cast<_Tp*>(0)); }\n \n   /**\n    *  @brief The companion to get_temporary_buffer().\n@@ -116,12 +119,12 @@ namespace std\n   template<typename _Tp>\n     void\n     return_temporary_buffer(_Tp* __p)\n-    { std::free(__p); }\n+    { ::operator delete(__p, nothrow); }\n \n   /**\n-   *  A wrapper class to provide auto_ptr with reference semantics.  For\n-   *  example, an auto_ptr can be assigned (or constructed from) the result of\n-   *  a function which returns an auto_ptr by value.\n+   *  A wrapper class to provide auto_ptr with reference semantics.\n+   *  For example, an auto_ptr can be assigned (or constructed from)\n+   *  the result of a function which returns an auto_ptr by value.\n    *\n    *  All the auto_ptr_ref stuff should happen behind the scenes.\n    */\n@@ -140,23 +143,25 @@ namespace std\n    *\n    *  The Standard says:\n    *  <pre>\n-   *  An @c auto_ptr owns the object it holds a pointer to.  Copying an\n-   *  @c auto_ptr copies the pointer and transfers ownership to the destination.\n-   *  If more than one @c auto_ptr owns the same object at the same time the\n-   *  behavior of the program is undefined.\n+   *  An @c auto_ptr owns the object it holds a pointer to.  Copying\n+   *  an @c auto_ptr copies the pointer and transfers ownership to the\n+   *  destination.  If more than one @c auto_ptr owns the same object\n+   *  at the same time the behavior of the program is undefined.\n    *\n-   *  The uses of @c auto_ptr include providing temporary exception-safety for\n-   *  dynamically allocated memory, passing ownership of dynamically allocated\n-   *  memory to a function, and returning dynamically allocated memory from a\n-   *  function.  @c auto_ptr does not meet the CopyConstructible and Assignable\n-   *  requirements for Standard Library <a href=\"tables.html#65\">container</a>\n-   *  elements and thus instantiating a Standard Library container with an\n-   *  @c auto_ptr results in undefined behavior.\n+   *  The uses of @c auto_ptr include providing temporary\n+   *  exception-safety for dynamically allocated memory, passing\n+   *  ownership of dynamically allocated memory to a function, and\n+   *  returning dynamically allocated memory from a function.  @c\n+   *  auto_ptr does not meet the CopyConstructible and Assignable\n+   *  requirements for Standard Library <a\n+   *  href=\"tables.html#65\">container</a> elements and thus\n+   *  instantiating a Standard Library container with an @c auto_ptr\n+   *  results in undefined behavior.\n    *  </pre>\n    *  Quoted from [20.4.5]/3.\n    *\n-   *  Good examples of what can and cannot be done with auto_ptr can be found\n-   *  in the libstdc++ testsuite.\n+   *  Good examples of what can and cannot be done with auto_ptr can\n+   *  be found in the libstdc++ testsuite.\n    *\n    *  @if maint\n    *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -196,7 +201,8 @@ namespace std\n        *  @brief  An %auto_ptr can be constructed from another %auto_ptr.\n        *  @param  a  Another %auto_ptr of a different but related type.\n        *\n-       *  A pointer-to-Tp1 must be convertible to a pointer-to-Tp/element_type.\n+       *  A pointer-to-Tp1 must be convertible to a\n+       *  pointer-to-Tp/element_type.\n        *\n        *  This object now @e owns the object previously owned by @a a,\n        *  which has given up ownsership.\n@@ -238,9 +244,9 @@ namespace std\n \t}\n \n       /**\n-       *  When the %auto_ptr goes out of scope, the object it owns is deleted.\n-       *  If it no longer owns anything (i.e., @c get() is @c NULL), then this\n-       *  has no effect.\n+       *  When the %auto_ptr goes out of scope, the object it owns is\n+       *  deleted.  If it no longer owns anything (i.e., @c get() is\n+       *  @c NULL), then this has no effect.\n        *\n        *  @if maint\n        *  The C++ standard says there is supposed to be an empty throw\n@@ -284,8 +290,8 @@ namespace std\n        *  @return  The raw pointer being managed.\n        *\n        *  You can get a copy of the pointer that this object owns, for\n-       *  situations such as passing to a function which only accepts a raw\n-       *  pointer.\n+       *  situations such as passing to a function which only accepts\n+       *  a raw pointer.\n        *\n        *  @note  This %auto_ptr still owns the memory.\n        */\n@@ -297,8 +303,8 @@ namespace std\n        *  @return  The raw pointer being managed.\n        *\n        *  You can get a copy of the pointer that this object owns, for\n-       *  situations such as passing to a function which only accepts a raw\n-       *  pointer.\n+       *  situations such as passing to a function which only accepts\n+       *  a raw pointer.\n        *\n        *  @note  This %auto_ptr no longer owns the memory.  When this object\n        *  goes out of scope, nothing will happen.\n@@ -315,8 +321,8 @@ namespace std\n        *  @brief  Forcibly deletes the managed object.\n        *  @param  p  A pointer (defaults to NULL).\n        *\n-       *  This object now @e owns the object pointed to by @a p.  The previous\n-       *  object has been deleted.\n+       *  This object now @e owns the object pointed to by @a p.  The\n+       *  previous object has been deleted.\n        */\n       void\n       reset(element_type* __p = 0) throw()"}, {"sha": "55291676f3d91f0d1da018b51880bf75a8736c62", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/assign_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917a9fd4d5ce9ee5c906abb10812a316b77fc31c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2Fassign_neg.cc?ref=917a9fd4d5ce9ee5c906abb10812a316b77fc31c", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2002, 2003 Free Software Foundation\n+// Copyright (C) 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,5 +46,5 @@ main()\n   test01();\n   return 0;\n }\n-// { dg-error \"candidates\" \"\" { target *-*-* } 217 } \n-// { dg-error \"std::auto_ptr\" \"\" { target *-*-* } 347 } \n+// { dg-error \"candidates\" \"\" { target *-*-* } 223 } \n+// { dg-error \"std::auto_ptr\" \"\" { target *-*-* } 353 } "}]}