{"sha": "44334e036526ac269dc6437caa1976e5bf30e849", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzMzRlMDM2NTI2YWMyNjlkYzY0MzdjYWExOTc2ZTViZjMwZTg0OQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-05T17:25:01Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-05T21:36:37Z"}, "message": "c++: Fix ICE with CONSTRUCTOR flags verification [PR93559]\n\nSince reshape_init_array_1 can now reuse a single constructor for\nan array of non-aggregate type, we might run into a scenario where\nwe reuse a constructor with TREE_SIDE_EFFECTS.  This broke this test\nbecause we have something like { { expr } } and we try to reshape it,\nso we recurse on the inner CONSTRUCTOR, reuse an existing CONSTRUCTOR\nwith TREE_SIDE_EFFECTS, and then ICE on the discrepancy because the\noutermost CONSTRUCTOR doesn't have TREE_SIDE_EFFECTS.  In this case\nEXPR was a call to an operator function so TREE_SIDE_EFFECTS should\nbe set.  Naturally one would want to fix this by calling\nrecompute_constructor_flags in an appropriate place so that the flags\non the CONSTRUCTORs match.  The appropriate place would be at the end\nof reshape_init, but this breaks initlist109.C: there we are dealing\nwith { { TARGET_EXPR <{}> } } where the outermost { } is TREE_CONSTANT\nbut the inner { } is not, so recompute_constructor_flags would clear\nthe constant flag in the outermost { }.  Seems resonable but it upsets\ncheck_initializer which then complains about \"non-constant in-class\ninitialization invalid for static member\".  TARGET_EXPRs are always\ncreated with TREE_SIDE_EFFECTS on, but that is mutually exclusive\nwith TREE_CONSTANT.  So we're in a bind.\n\nFixed by not reusing a CONSTRUCTOR that has TREE_SIDE_EFFECTS; in the\ngrand scheme of things it isn't measurable: it only affects ~3 tests\nin the testsuite.\n\n\tPR c++/93559 - ICE with CONSTRUCTOR flags verification.\n\t* decl.c (reshape_init_array_1): Don't reuse a CONSTRUCTOR with\n\tTREE_SIDE_EFFECTS.\n\n\t* g++.dg/cpp0x/initlist119.C: New test.\n\t* g++.dg/cpp0x/initlist120.C: New test.", "tree": {"sha": "cedd7540b6f804b8f6e016db692afcc3aeff157d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cedd7540b6f804b8f6e016db692afcc3aeff157d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44334e036526ac269dc6437caa1976e5bf30e849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44334e036526ac269dc6437caa1976e5bf30e849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44334e036526ac269dc6437caa1976e5bf30e849", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44334e036526ac269dc6437caa1976e5bf30e849/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa0c6e297b22d5883857d0db4a6a8be0967cb16f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0c6e297b22d5883857d0db4a6a8be0967cb16f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa0c6e297b22d5883857d0db4a6a8be0967cb16f"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "31a556a0a1f80ac39380c0eaed63ecdd1828102a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44334e036526ac269dc6437caa1976e5bf30e849/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44334e036526ac269dc6437caa1976e5bf30e849/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=44334e036526ac269dc6437caa1976e5bf30e849", "patch": "@@ -5989,7 +5989,9 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n   /* The initializer for an array is always a CONSTRUCTOR.  If this is the\n      outermost CONSTRUCTOR and the element type is non-aggregate, we don't need\n      to build a new one.  */\n-  bool reuse = first_initializer_p && !CP_AGGREGATE_TYPE_P (elt_type);\n+  bool reuse = (first_initializer_p\n+\t\t&& !CP_AGGREGATE_TYPE_P (elt_type)\n+\t\t&& !TREE_SIDE_EFFECTS (first_initializer_p));\n   if (reuse)\n     new_init = first_initializer_p;\n   else"}, {"sha": "80f391f64c72f7f77be3d88a4478cbd73a698f8f", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist119.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44334e036526ac269dc6437caa1976e5bf30e849/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist119.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44334e036526ac269dc6437caa1976e5bf30e849/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist119.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist119.C?ref=44334e036526ac269dc6437caa1976e5bf30e849", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/93559 - ICE with CONSTRUCTOR flags verification.\n+// { dg-do compile { target c++11 } }\n+\n+struct E { int d[10]; };\n+\n+struct S {\n+  constexpr int operator()(char) { return 42; }\n+};\n+\n+template <typename> struct X {\n+  constexpr static E foo(S s) { return {{s(1)}}; }\n+};\n+\n+S s;\n+static_assert((X<S>::foo(s), 1), \"\");"}, {"sha": "8d03166e197c1827ebe7bbb89895db6d61f79ad2", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist120.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44334e036526ac269dc6437caa1976e5bf30e849/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist120.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44334e036526ac269dc6437caa1976e5bf30e849/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist120.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist120.C?ref=44334e036526ac269dc6437caa1976e5bf30e849", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/93559 - ICE with CONSTRUCTOR flags verification.\n+// { dg-do compile { target c++11 } }\n+\n+struct F { int d[10]; };\n+struct E { F f; };\n+\n+struct S {\n+  constexpr int operator()(char) { return 42; }\n+};\n+\n+template <typename> struct X {\n+  constexpr static E foo(S s) { return {{{s(1)}}}; }\n+};\n+\n+S s;\n+static_assert((X<S>::foo(s), 1), \"\");"}]}