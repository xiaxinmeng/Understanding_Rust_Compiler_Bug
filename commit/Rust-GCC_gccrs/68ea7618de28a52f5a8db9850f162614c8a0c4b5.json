{"sha": "68ea7618de28a52f5a8db9850f162614c8a0c4b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlYTc2MThkZTI4YTUyZjVhOGRiOTg1MGYxNjI2MTRjOGEwYzRiNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-10-06T09:14:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-10-06T09:14:48Z"}, "message": "re PR c/65345 (ICE with _Generic selection on _Atomic int)\n\n\tPR c/65345\n\t* config/sparc/sparc.c (sparc_atomic_assign_expand_fenv): Adjust to\n\tuse create_tmp_var_raw rather than create_tmp_var.\n\nFrom-SVN: r228516", "tree": {"sha": "1b1ac982891ae3f01daba67c0e08ad2ab1f543b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b1ac982891ae3f01daba67c0e08ad2ab1f543b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68ea7618de28a52f5a8db9850f162614c8a0c4b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ea7618de28a52f5a8db9850f162614c8a0c4b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ea7618de28a52f5a8db9850f162614c8a0c4b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ea7618de28a52f5a8db9850f162614c8a0c4b5/comments", "author": null, "committer": null, "parents": [{"sha": "4a2fc4d45e40980f75fd8c9936cda1ecf9ae2241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2fc4d45e40980f75fd8c9936cda1ecf9ae2241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a2fc4d45e40980f75fd8c9936cda1ecf9ae2241"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "2e6697d285dbba53f21fa6847127ee38de5e2f4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ea7618de28a52f5a8db9850f162614c8a0c4b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ea7618de28a52f5a8db9850f162614c8a0c4b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68ea7618de28a52f5a8db9850f162614c8a0c4b5", "patch": "@@ -1,3 +1,9 @@\n+2015-10-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR c/65345\n+\t* config/sparc/sparc.c (sparc_atomic_assign_expand_fenv): Adjust to\n+\tuse create_tmp_var_raw rather than create_tmp_var.\n+\n 2015-10-06  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (vec_info): New base class for..."}, {"sha": "d9c5c665436285f541b40081d6707dc019229625", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ea7618de28a52f5a8db9850f162614c8a0c4b5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ea7618de28a52f5a8db9850f162614c8a0c4b5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=68ea7618de28a52f5a8db9850f162614c8a0c4b5", "patch": "@@ -12540,20 +12540,23 @@ sparc_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n        __builtin_load_fsr (&tmp1_var);  */\n \n-  tree fenv_var = create_tmp_var (unsigned_type_node);\n-  mark_addressable (fenv_var);\n+  tree fenv_var = create_tmp_var_raw (unsigned_type_node);\n+  TREE_ADDRESSABLE (fenv_var) = 1;\n   tree fenv_addr = build_fold_addr_expr (fenv_var);\n   tree stfsr = sparc_builtins[SPARC_BUILTIN_STFSR];\n-  tree hold_stfsr = build_call_expr (stfsr, 1, fenv_addr);\n+  tree hold_stfsr\n+    = build4 (TARGET_EXPR, unsigned_type_node, fenv_var,\n+\t      build_call_expr (stfsr, 1, fenv_addr), NULL_TREE, NULL_TREE);\n \n-  tree tmp1_var = create_tmp_var (unsigned_type_node);\n-  mark_addressable (tmp1_var);\n+  tree tmp1_var = create_tmp_var_raw (unsigned_type_node);\n+  TREE_ADDRESSABLE (tmp1_var) = 1;\n   tree masked_fenv_var\n     = build2 (BIT_AND_EXPR, unsigned_type_node, fenv_var,\n \t      build_int_cst (unsigned_type_node,\n \t\t\t     ~(accrued_exception_mask | trap_enable_mask)));\n   tree hold_mask\n-    = build2 (MODIFY_EXPR, void_type_node, tmp1_var, masked_fenv_var);\n+    = build4 (TARGET_EXPR, unsigned_type_node, tmp1_var, masked_fenv_var,\n+\t      NULL_TREE, NULL_TREE);\n \n   tree tmp1_addr = build_fold_addr_expr (tmp1_var);\n   tree ldfsr = sparc_builtins[SPARC_BUILTIN_LDFSR];\n@@ -12578,10 +12581,12 @@ sparc_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n          tmp2_var >>= 5;\n        __atomic_feraiseexcept ((int) tmp2_var);  */\n \n-  tree tmp2_var = create_tmp_var (unsigned_type_node);\n-  mark_addressable (tmp2_var);\n-  tree tmp3_addr = build_fold_addr_expr (tmp2_var);\n-  tree update_stfsr = build_call_expr (stfsr, 1, tmp3_addr);\n+  tree tmp2_var = create_tmp_var_raw (unsigned_type_node);\n+  TREE_ADDRESSABLE (tmp2_var) = 1;\n+  tree tmp2_addr = build_fold_addr_expr (tmp2_var);\n+  tree update_stfsr\n+    = build4 (TARGET_EXPR, unsigned_type_node, tmp2_var,\n+\t      build_call_expr (stfsr, 1, tmp2_addr), NULL_TREE, NULL_TREE);\n \n   tree update_ldfsr = build_call_expr (ldfsr, 1, fenv_addr);\n "}]}