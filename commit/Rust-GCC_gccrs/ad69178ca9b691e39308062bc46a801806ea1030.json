{"sha": "ad69178ca9b691e39308062bc46a801806ea1030", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2OTE3OGNhOWI2OTFlMzkzMDgwNjJiYzQ2YTgwMTgwNmVhMTAzMA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-08-08T09:05:16Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-08-08T09:05:16Z"}, "message": "[RS6000] PR72802 part 1, fix constraints for lxssp/stxssp\n\nWe can't use \"o\" constraint for lsxxp/stxssp since those insns have a\nDS-form offset field, ie. the bottom two bits of the offset must be 0.\nSo use \"wY\" instead, but that leads to finding another problem.\n\nmem_operand_gpr is only suitable for gpr loads/stores since it does\nnot enforce multiple-of-4 offsets when -m32.  So \"wY\" can't use\nmem_operand_gpr, and the vsx tests in mem_operand_gpr are bogus.\n\nI've deleted offsettable_mem_14bit_operand because it wasn't used\nanywhere but in the wY constraint.  Note also that the new wY\nconstraint doesn't use memory_operand because that is redundant in a\nconstraint, having already been tested in the predicate.\n\n\tPR target/72802\n\t* config/rs6000/rs6000.c (mem_operand_gpr): Remove vsx dform test.\n\t(mem_operand_ds_form): New predicate.\n\t* config/rs6000/rs6000-protos.h (mem_operand_ds_form): Declare.\n\t* config/rs6000/constraints.md (wY): Use mem_operand_df_form.\n\t* config/rs6000/predicates.md (offsettable_mem_14bit_operand): Delete.\n\t* config/rs6000/rs6000.md (f32_lm2, f32_sm2): Use wY for SF.\n\t(extendsfdf2_fpr): Replace o constraint with wY.\n\nFrom-SVN: r239233", "tree": {"sha": "aa3164c0f78340a45e3a0f25a83af3f0043aabdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa3164c0f78340a45e3a0f25a83af3f0043aabdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad69178ca9b691e39308062bc46a801806ea1030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad69178ca9b691e39308062bc46a801806ea1030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad69178ca9b691e39308062bc46a801806ea1030", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad69178ca9b691e39308062bc46a801806ea1030/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e9218f2b39c5730760a23595f449498f3f4faf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9218f2b39c5730760a23595f449498f3f4faf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9218f2b39c5730760a23595f449498f3f4faf6"}], "stats": {"total": 65, "additions": 49, "deletions": 16}, "files": [{"sha": "ef0de804196fbecd29dbca7737f9108bde6531c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad69178ca9b691e39308062bc46a801806ea1030", "patch": "@@ -1,3 +1,14 @@\n+2016-08-08  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/72802\n+\t* config/rs6000/rs6000.c (mem_operand_gpr): Remove vsx dform test.\n+\t(mem_operand_ds_form): New predicate.\n+\t* config/rs6000/rs6000-protos.h (mem_operand_ds_form): Declare.\n+\t* config/rs6000/constraints.md (wY): Use mem_operand_df_form.\n+\t* config/rs6000/predicates.md (offsettable_mem_14bit_operand): Delete.\n+\t* config/rs6000/rs6000.md (f32_lm2, f32_sm2): Use wY for SF.\n+\t(extendsfdf2_fpr): Replace o constraint with wY.\n+\n 2016-08-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-ssa-threadbackward.c: Include tree-inline.h"}, {"sha": "7535c35155f203c98930d1cd3a03403ccc34cb7a", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=ad69178ca9b691e39308062bc46a801806ea1030", "patch": "@@ -185,10 +185,14 @@\n   \"Vector constant that can be loaded with XXSPLTIB & sign extension.\"\n   (match_test \"xxspltib_constant_split (op, mode)\"))\n \n-;; ISA 3.0 D-form instruction that has the bottom 2 bits 0 (LXSD or STXSD).\n+;; ISA 3.0 DS-form instruction that has the bottom 2 bits 0 and no update form.\n+;; Used by LXSD/STXSD/LXSSP/STXSSP.  In contrast to \"Y\", the multiple-of-four\n+;; offset is enforced for 32-bit too.\n (define_memory_constraint \"wY\"\n   \"Offsettable memory operand, with bottom 2 bits 0\"\n-  (match_operand 0 \"offsettable_mem_14bit_operand\"))\n+  (and (match_code \"mem\")\n+       (not (match_test \"update_address_mem (op, mode)\"))\n+       (match_test \"mem_operand_ds_form (op, mode)\")))\n \n ;; Altivec style load/store that ignores the bottom bits of the address\n (define_memory_constraint \"wZ\""}, {"sha": "6436d5eb3a1ef536c78b76adf1028dfc8eef204c", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=ad69178ca9b691e39308062bc46a801806ea1030", "patch": "@@ -734,15 +734,6 @@\n   (and (match_operand 0 \"memory_operand\")\n        (match_test \"offsettable_nonstrict_memref_p (op)\")))\n \n-;; Return 1 if the operand is an offsettable memory operand for ISA 3.0\n-;; scalar LXSD/STXSD that must have the bottom 2 bits 0 and no update\n-;; form\n-(define_predicate \"offsettable_mem_14bit_operand\"\n-  (and (match_operand 0 \"memory_operand\")\n-       (match_test \"offsettable_nonstrict_memref_p (op)\")\n-       (match_test \"mem_operand_gpr (op, mode)\")\n-       (not (match_test \"update_address_mem  (op, mode)\"))))\n-\n ;; Return 1 if the operand is suitable for load/store quad memory.\n ;; This predicate only checks for non-atomic loads/stores (not lqarx/stqcx).\n (define_predicate \"quad_memory_operand\""}, {"sha": "c7e338a8927cba001d28b982daff019087521445", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=ad69178ca9b691e39308062bc46a801806ea1030", "patch": "@@ -39,6 +39,7 @@ extern int num_insns_constant (rtx, machine_mode);\n extern int num_insns_constant_wide (HOST_WIDE_INT);\n extern int small_data_operand (rtx, machine_mode);\n extern bool mem_operand_gpr (rtx, machine_mode);\n+extern bool mem_operand_ds_form (rtx, machine_mode);\n extern bool toc_relative_expr_p (const_rtx, bool);\n extern bool invalid_e500_subreg (rtx, machine_mode);\n extern void validate_condition_mode (enum rtx_code, machine_mode);"}, {"sha": "c59d07ac899636898eac511df3b72d3f0145a5d6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ad69178ca9b691e39308062bc46a801806ea1030", "patch": "@@ -7717,8 +7717,34 @@ mem_operand_gpr (rtx op, machine_mode mode)\n   if (TARGET_POWERPC64 && (offset & 3) != 0)\n     return false;\n \n-  if (mode_supports_vsx_dform_quad (mode)\n-      && !quad_address_offset_p (offset))\n+  extra = GET_MODE_SIZE (mode) - UNITS_PER_WORD;\n+  if (extra < 0)\n+    extra = 0;\n+\n+  if (GET_CODE (addr) == LO_SUM)\n+    /* For lo_sum addresses, we must allow any offset except one that\n+       causes a wrap, so test only the low 16 bits.  */\n+    offset = ((offset & 0xffff) ^ 0x8000) - 0x8000;\n+\n+  return offset + 0x8000 < 0x10000u - extra;\n+}\n+\n+/* As above, but for DS-FORM VSX insns.  Unlike mem_operand_gpr,\n+   enforce an offset divisible by 4 even for 32-bit.  */\n+\n+bool\n+mem_operand_ds_form (rtx op, machine_mode mode)\n+{\n+  unsigned HOST_WIDE_INT offset;\n+  int extra;\n+  rtx addr = XEXP (op, 0);\n+\n+  op = address_offset (addr);\n+  if (op == NULL_RTX)\n+    return true;\n+\n+  offset = INTVAL (op);\n+  if ((offset & 3) != 0)\n     return false;\n \n   extra = GET_MODE_SIZE (mode) - UNITS_PER_WORD;"}, {"sha": "1430799a04e896722554ab5cd52c5dde1f54f254", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad69178ca9b691e39308062bc46a801806ea1030/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ad69178ca9b691e39308062bc46a801806ea1030", "patch": "@@ -446,7 +446,7 @@\n (define_mode_attr f32_lr  [(SF \"f\")\t\t  (SD \"wz\")])\n (define_mode_attr f32_lr2 [(SF \"wb\")\t\t  (SD \"wn\")])\n (define_mode_attr f32_lm  [(SF \"m\")\t\t  (SD \"Z\")])\n-(define_mode_attr f32_lm2 [(SF \"o\")\t\t  (SD \"wn\")])\n+(define_mode_attr f32_lm2 [(SF \"wY\")\t\t  (SD \"wn\")])\n (define_mode_attr f32_li  [(SF \"lfs%U1%X1 %0,%1\") (SD \"lfiwzx %0,%y1\")])\n (define_mode_attr f32_li2 [(SF \"lxssp %0,%1\")     (SD \"lfiwzx %0,%y1\")])\n (define_mode_attr f32_lv  [(SF \"lxsspx %x0,%y1\")  (SD \"lxsiwzx %x0,%y1\")])\n@@ -455,7 +455,7 @@\n (define_mode_attr f32_sr  [(SF \"f\")\t\t   (SD \"wx\")])\n (define_mode_attr f32_sr2 [(SF \"wb\")\t\t   (SD \"wn\")])\n (define_mode_attr f32_sm  [(SF \"m\")\t\t   (SD \"Z\")])\n-(define_mode_attr f32_sm2 [(SF \"o\")\t\t   (SD \"wn\")])\n+(define_mode_attr f32_sm2 [(SF \"wY\")\t\t   (SD \"wn\")])\n (define_mode_attr f32_si  [(SF \"stfs%U0%X0 %1,%0\") (SD \"stfiwx %1,%y0\")])\n (define_mode_attr f32_si2 [(SF \"stxssp %1,%0\")     (SD \"stfiwx %1,%y0\")])\n (define_mode_attr f32_sv  [(SF \"stxsspx %x1,%y0\")  (SD \"stxsiwzx %x1,%y0\")])\n@@ -4538,7 +4538,7 @@\n \n (define_insn_and_split \"*extendsfdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,?d,d,ws,?ws,wu,wb\")\n-\t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m,0,wy,Z,o\")))]\n+\t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m,0,wy,Z,wY\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"@\n    #"}]}