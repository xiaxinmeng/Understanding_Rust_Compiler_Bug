{"sha": "9560d353d38cd1efb65c919eb44953503bcfafdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU2MGQzNTNkMzhjZDFlZmI2NWM5MTllYjQ0OTUzNTAzYmNmYWZkYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-12-18T22:01:20Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-12-18T22:01:20Z"}, "message": "TODO: Update.\n\n\n2001-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* docs/html/17_intro/TODO: Update.\n\t* docs/html/17_intro/RELEASE-NOTES: Edits, update.\n\t* README: Edit for clarity, update to reflect current directory\n\tstructure.\n\nFrom-SVN: r48165", "tree": {"sha": "77b645b3c50864dd4a852ff5d96633bea0fef5ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77b645b3c50864dd4a852ff5d96633bea0fef5ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9560d353d38cd1efb65c919eb44953503bcfafdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9560d353d38cd1efb65c919eb44953503bcfafdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9560d353d38cd1efb65c919eb44953503bcfafdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9560d353d38cd1efb65c919eb44953503bcfafdc/comments", "author": null, "committer": null, "parents": [{"sha": "ae6c1efd658f081036d6e10c5f70e84db3dbbe46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6c1efd658f081036d6e10c5f70e84db3dbbe46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae6c1efd658f081036d6e10c5f70e84db3dbbe46"}], "stats": {"total": 138, "additions": 38, "deletions": 100}, "files": [{"sha": "7157fc1bd4567e99b43efcc8e6eb7d813db36b08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9560d353d38cd1efb65c919eb44953503bcfafdc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9560d353d38cd1efb65c919eb44953503bcfafdc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9560d353d38cd1efb65c919eb44953503bcfafdc", "patch": "@@ -1,3 +1,10 @@\n+2001-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* docs/html/17_intro/TODO: Update.\n+\t* docs/html/17_intro/RELEASE-NOTES: Edits, update.\n+\t* README: Edit for clarity, update to reflect current directory\n+\tstructure.\n+\n 2001-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Extended checking before"}, {"sha": "f95a8c93382cdf09c7e212b8caf6983d4b7ae033", "filename": "libstdc++-v3/README", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9560d353d38cd1efb65c919eb44953503bcfafdc/libstdc%2B%2B-v3%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9560d353d38cd1efb65c919eb44953503bcfafdc/libstdc%2B%2B-v3%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FREADME?ref=9560d353d38cd1efb65c919eb44953503bcfafdc", "patch": "@@ -4,36 +4,22 @@ New users may wish to point their web browsers to the file documentation.html\n in the 'docs/html' subdirectory.  It contains brief building instructions and\n notes on how to configure the library in interesting ways.\n \n+Instructions for configuring and building appear in\n+docs/html/install.html.\n \n-Instructions for configuring and building this snapshot appear\n-in docs/html/install.html.\n-\n-This directory contains the files needed to create [a still broken\n-subset of] an ISO Standard C++ Library.\n+This directory contains the files needed to create an ISO Standard C++\n+Library.\n \n It has subdirectories:\n \n   docs\n      Files in HTML and text format that document usage, quirks of the\n      implementation, and contributor checklists.\n \n-  include/bits\n-     Files included by standard headers and by other files in\n-     the bits directory.  Includes a set of files bits/std_xxxx.h\n-     that implement the standard headers <xxxx>.\n-\n   include/std\n      Files meant to be found by #include <name> directives in\n      standard-conforming user programs.  \n \n-  include/ext\n-     Headers that define extensions to the standard library.  No\n-     standard header refers to any of them.\n-\n-  include/backward\n-     Headers provided for backward compatibility, such as <iostream.h>.\n-     They are not used in this library.\n-\n   include/c\n      Headers intended to directly include standard C headers. \n      [NB: this can be enabled via --enable-cheaders=c]\n@@ -50,6 +36,19 @@ It has subdirectories:\n      defined there into the _C_legacy namespace.\n      [NB: this can be enabled via --enable-cheaders=c_shadow]\n \n+  include/bits\n+     Files included by standard headers and by other files in\n+     the bits directory.  Includes a set of files bits/std_xxxx.h\n+     that implement the standard headers <xxxx>.\n+\n+  include/backward\n+     Headers provided for backward compatibility, such as <iostream.h>.\n+     They are not used in this library.\n+\n+  include/ext\n+     Headers that define extensions to the standard library.  No\n+     standard header refers to any of them.\n+\n   src\n      Files that are used in constructing the library, but are not\n      installed.\n@@ -73,10 +72,20 @@ Currently these are:\n   config/io\n   config/locale\n \n-Files needed only to construct the library, but not installed,\n-are in src/.  Files to be copied as part of an installation are\n-all found in the subdirectories mentioned above.  (A configure\n-script may link files from another directory into one of these.)\n+In addition, three subdirectories are convenience libraries:\n+\n+  libio\n+     Contains the subset of the GNU libio library needed for\n+     C++. Currently not used.\n+\n+  libmath\n+     Support routines needed for C++ math. Only needed if the\n+     underlying \"C\" implementation is weak or looses.\n+\n+  libsupc++\n+     Contains the runtime library for C++, including exception\n+     handling and memory allocation and deallocation, RTTI, terminate\n+     handlers, etc.\n \n Note that glibc also has a bits/ subdirectory.  We will either\n need to be careful not to collide with names in its bits/"}, {"sha": "5cf43ee972ba0c521a2210dc48d8598b03af3792", "filename": "libstdc++-v3/docs/html/17_intro/RELEASE-NOTES", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9560d353d38cd1efb65c919eb44953503bcfafdc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FRELEASE-NOTES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9560d353d38cd1efb65c919eb44953503bcfafdc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FRELEASE-NOTES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FRELEASE-NOTES?ref=9560d353d38cd1efb65c919eb44953503bcfafdc"}, {"sha": "6a9e16da76c79582551f7d2809ed1da68aa5faf1", "filename": "libstdc++-v3/docs/html/17_intro/TODO", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9560d353d38cd1efb65c919eb44953503bcfafdc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FTODO", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9560d353d38cd1efb65c919eb44953503bcfafdc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FTODO", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FTODO?ref=9560d353d38cd1efb65c919eb44953503bcfafdc", "patch": "@@ -1,13 +1,6 @@\n - exception specifications need to be reviewed for all parts of the\n library support and utility areas, particularly <new>. \n \n-- exception/stdexcept headers will do, but are not cleanly\n-implemented. Also, some kind of consensus needs to be established on\n-if the presence of stdexcept should be assumed in iostreams\n-headers. V3 currently takes the position that references to stdexcept\n-classes necessitates the inclusion of stdexcept, other library vendors\n-seem less inclined.\n-\n - scoping/linking issues WRT to C structs need to be worked out. See\n Nathan's commentary on cantrip, http://www.cantrip.org/cheaders.html\n \n@@ -20,66 +13,20 @@ string and vector iterator classes. basic_string::reverse_iterator may\n be implemented incorrectly, or need things like\n operator==(__normal_iterator, const char*&), and swap(vector)\n \n-- SGI iterator/allocator classes are not strictly conforming. In\n-particular, raw_storage_iterator, mem_fun1_ref_t are all problem\n-areas.\n-\n - auto_ptr: seems to be some disagreement on what is\n standards-conformant behavior, specially on conversion operators.\n \n-- vswprintf, vwprintf, wprintf, wscanf, wcsftime, swscanf, fgetws,\n-fputwc, fputws, fwide, fwprintf, fwscanf, getwc, getwchar, putwc, etc:\n-C library wchar_t functionality.\n-\n-- facets heirarchies seem on occasion give odd errors to conformace\n-tests. Need to test that they are constructed in a strictly-conforming\n-manner.\n-\n-- stuff like `LC_CTYPE' is not found. Locale oddness?\n-\n - header optimizations to keep compile times reasonable are most\n certainly detracting from full conformance, as many templatized\n definitions are squired away and pre-instantiated, so that the\n compiler doesn't have to parse them. Areas effected: valarray, string,\n all of iostreams and locales.\n \n-- basic_string<wchar_T> not implemented\n-\n-- ostreambuf_iterator has not been made standards-conformant (both\n-char and wchar_t) In particular, look at \n-time_put::put(OutIt, ios_base&, char, const tm*, const char*, const\n-char*) const\n-\n - C-related issues WRT to libio and filepos, mbstate_t. Need to\n straighten this stuff out with the glibc-2.2 libio. Also may need to\n define operators for mbstate_t so that 'mbstate_t& == mbstate_t' is\n something that can be done.\n \n-- codecvt<wchar_t> has not been adequently handled in terms of the\n-locale bits. (The io bits are done, with the exception of one\n-ostream<wchar_t> inserter for char.\n-\n-- bool locale::operator() looks to be non-conformant\n-\n-- num_get<char>::do_get<user_defined_type> \n-  num_put<char>::do_put<user_defined_type> \n-num_put<char, char *>::do_put(char *, ios_base &, char, long double) const\n-num_put<char, char *>::do_put(char *, ios_base &, char, double) const\n-num_put<char, char *>::do_put(char *, ios_base &, char, void const *) const\n-etc.\n-appear to be broken, or headers mashed, or undefined.\n-\n-- locale and std::combine not working correctly\n- template <class _Facet> class locale locale::combine(const locale &)\n-\n-- ctype_byname<char>: check to make sure derivation standards-conformant.\n-\n-- codecvt::unshift not working for char, wchar_t\n-\n-- no match for money_base::pattern &[int]\n-\n-- money_get::do_get weirded out for wchar_t\n-\n - looks like deque::get_allocator not standards conformant or deque\n allocator non-standard.\n \n@@ -90,18 +37,10 @@ needs to be drawn throughout the entire STL implementation.\n \n - priority_queue conversions may be non-conformant\n \n-- istream_iterator uses 2 arguments, should it be 4?\n-\n - 'do the right thing' ctor fixing needs to be done for string. This\n is still subject to some debate on the library issues list, so I\n suggest punting till the dust clears.\n \n-- the ctype and \"tolower\" \"isspace\" stuff really needs to be sorted\n-out. A portable, cross platform interface needs to be defined. A\n-\"fixincludes\"-like solution needs to be put into place to prune\n-headers. The \"C\" functions need to be able to work in std:: and \"C\"\n-namespaces.\n-\n - complex<float> seems to be the single largest source of internal\n compiler errors when compiling the c++ library across non-x86\n platforms. Somebody needs to make sure the complex support builtin to\n@@ -112,23 +51,12 @@ class complex<float>& complex<float>::operator+=<float>(const complex<float> &)\n class complex<float>& complex<float>::operator-=<float>(const complex<float> &)\n class complex<float>& complex<float>::operator*=<float>(const complex<float> &)\n \n-- appears as if the following extraction operators are undefined:\n-operator>>(istream, complex<float>&)\n-operator>>(istream, complex<double>&)\n-operator>>(istream, complex<long double>&)\n-operator>>(istream, complex<user_defined_type>&)\n-sqrt (const complex<T>& x)\n-\n - Protect valarray::result_type (not Standard) and make it work with\n   the various helper classes.\n \n - Make sure `valarray<bool> & == _Expr<_BinClos<logical_or,_ValArray,_ValArray,double,double>,bool>' \n   is defined\n \n-- long double std_cmath stuff looks weak\n-\n-- fwide not declared. C++ wchar_t issues completely unaddressed.\n-\n - known issues WRT to io and corner cases with the buffers. This is\n still subject to interpretation, and I think the current\n implementation is credible.\n@@ -160,12 +88,6 @@ sources, with macro-guards.\n \n - add MT support for locale, string, istream, ostream\n \n-- specialize functions that use_facet<> calls on failure for the required \n-  facets, and construct them lazily so unused facets need not be constructed \n-  when the locale is. \n-\n-- <cmath>: provide missing names. \n-\n - provide testsuites for numerics.\n \n - add FAQ entries -- improve the install instructions"}]}