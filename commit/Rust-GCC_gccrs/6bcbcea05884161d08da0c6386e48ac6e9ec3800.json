{"sha": "6bcbcea05884161d08da0c6386e48ac6e9ec3800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjYmNlYTA1ODg0MTYxZDA4ZGEwYzYzODZlNDhhYzZlOWVjMzgwMA==", "commit": {"author": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2020-11-02T18:06:06Z"}, "committer": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2020-11-02T18:41:32Z"}, "message": "libstdc++: Add c++2a <syncstream>\n\nlibstdc++-v3/ChangeLog:\n\t* doc/doxygen/user.cfg.in (INPUT): Add new header.\n\t* include/Makefile.am (std_headers): Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/precompiled/stdc++.h: Include new header.\n\t* include/std/syncstream: New header.\n\t* include/std/version: Add __cpp_lib_syncbuf.\n\t* testsuite/27_io/basic_syncbuf/1.cc: New test.\n\t* testsuite/27_io/basic_syncbuf/2.cc: Likewise.\n\t* testsuite/27_io/basic_syncbuf/basic_ops/1.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_syncbuf/requirements/types.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_syncbuf/sync_ops/1.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_syncstream/1.cc: Likewise.\n\t* testsuite/27_io/basic_syncstream/2.cc: Likewise.\n\t* testsuite/27_io/basic_syncstream/basic_ops/1.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_syncstream/requirements/types.cc:\n\tLikewise.", "tree": {"sha": "5b0316f3777cb886eb922490e00a6b2c8a91b849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b0316f3777cb886eb922490e00a6b2c8a91b849"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bcbcea05884161d08da0c6386e48ac6e9ec3800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bcbcea05884161d08da0c6386e48ac6e9ec3800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bcbcea05884161d08da0c6386e48ac6e9ec3800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bcbcea05884161d08da0c6386e48ac6e9ec3800/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6912d9b17f9f29a488b64f005649151ef9c794c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6912d9b17f9f29a488b64f005649151ef9c794c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6912d9b17f9f29a488b64f005649151ef9c794c"}], "stats": {"total": 940, "additions": 939, "deletions": 1}, "files": [{"sha": "320f6dea6881482f55a47db8e96c6d34e8ffb4b8", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -897,6 +897,7 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/streambuf \\\n                          include/string \\\n                          include/string_view \\\n+                         include/syncstream \\\n                          include/system_error \\\n                          include/thread \\\n                          include/tuple \\"}, {"sha": "8652b921274a565ce18af19cdfc6010d30326d52", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -73,6 +73,7 @@ std_headers = \\\n \t${std_srcdir}/shared_mutex \\\n \t${std_srcdir}/span \\\n \t${std_srcdir}/sstream \\\n+\t${std_srcdir}/syncstream \\\n \t${std_srcdir}/stack \\\n \t${std_srcdir}/stdexcept \\\n \t${std_srcdir}/stop_token \\"}, {"sha": "4eb6b2b480a23af07dd3e0c243edcd69e180285c", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -419,6 +419,7 @@ std_headers = \\\n \t${std_srcdir}/shared_mutex \\\n \t${std_srcdir}/span \\\n \t${std_srcdir}/sstream \\\n+\t${std_srcdir}/syncstream \\\n \t${std_srcdir}/stack \\\n \t${std_srcdir}/stdexcept \\\n \t${std_srcdir}/stop_token \\"}, {"sha": "8899c323a2812d7534edba6cca565e4e7e99023e", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -141,6 +141,6 @@\n #include <ranges>\n #include <span>\n #include <stop_token>\n-// #include <syncstream>\n+#include <syncstream>\n #include <version>\n #endif"}, {"sha": "5e0864ec54a8eb9fcd3bedbff49067b993cb8754", "filename": "libstdc++-v3/include/std/syncstream", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsyncstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsyncstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsyncstream?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -0,0 +1,333 @@\n+// <syncstream> -*- C++ -*-\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/syncstream\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_SYNCSTREAM\n+#define _GLIBCXX_SYNCSTREAM 1\n+\n+#if __cplusplus > 201703L\n+\n+#include <bits/c++config.h>\n+#if _GLIBCXX_USE_CXX11_ABI\n+\n+#define __cpp_lib_syncbuf 201803L\n+\n+#pragma GCC system_header\n+\n+#include <sstream>\n+\n+#include <bits/alloc_traits.h>\n+#include <bits/allocator.h>\n+#include <bits/functexcept.h>\n+#include <bits/functional_hash.h>\n+\n+#if _GLIBCXX_HAS_GTHREADS\n+# include <bits/std_mutex.h>\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n+\t    typename _Alloc = allocator<_CharT>>\n+    class basic_syncbuf : public basic_streambuf<_CharT, _Traits>\n+    {\n+    public:\n+      using char_type = _CharT;\n+      using int_type = typename _Traits::int_type;\n+      using pos_type = typename _Traits::pos_type;\n+      using off_type = typename _Traits::off_type;\n+      using traits_type = _Traits;\n+      using allocator_type = _Alloc;\n+      using streambuf_type = basic_streambuf<_CharT, _Traits>;\n+\n+      basic_syncbuf()\n+      : basic_syncbuf(nullptr, allocator_type{})\n+      { }\n+\n+      explicit\n+      basic_syncbuf(streambuf_type* __obuf)\n+\t: basic_syncbuf(__obuf, allocator_type{})\n+      { }\n+\n+      basic_syncbuf(streambuf_type* __obuf, const allocator_type& __alloc)\n+\t: _M_wrapped(__obuf)\n+\t, _M_impl(__alloc)\n+\t, _M_mtx(__obuf)\n+      { }\n+\n+      basic_syncbuf(basic_syncbuf&& __other)\n+\t: _M_wrapped(__other._M_wrapped)\n+\t, _M_impl(std::move(__other._M_impl))\n+\t, _M_mtx(std::move(__other._M_mtx))\n+\t, _M_emit_on_sync(__other._M_emit_on_sync)\n+\t, _M_needs_sync(__other._M_needs_sync)\n+      {\n+\t__other._M_wrapped = nullptr;\n+      }\n+\n+      ~basic_syncbuf()\n+      {\n+\t__try\n+\t  {\n+\t    emit();\n+\t  }\n+\t__catch (...)\n+\t  { }\n+      }\n+\n+      basic_syncbuf& operator=(basic_syncbuf&& __other)\n+      {\n+\tif (std::__addressof(__other) != this)\n+\t  {\n+\t    emit();\n+\n+\t    _M_impl = std::move(__other._M_impl);\n+\t    _M_wrapped = __other._M_wrapped; __other._M_wrapped = nullptr;\n+\t    _M_mtx = std::move(__other._M_mtx);\n+\t    _M_emit_on_sync = __other._M_emit_on_sync;\n+\t    _M_needs_sync = __other._M_needs_sync;\n+\t  }\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_syncbuf& __other)\n+      {\n+\tif (std::__addressof(__other) != this)\n+\t  {\n+\t    std::swap(_M_impl, __other._M_impl);\n+\t    std::swap(_M_wrapped, __other._M_wrapped);\n+\t    std::swap(_M_mtx, __other._M_mtx);\n+\t    std::swap(_M_emit_on_sync, __other._M_emit_on_sync);\n+\t    std::swap(_M_needs_sync, __other._M_needs_sync);\n+\t  }\n+      }\n+\n+      bool\n+      emit()\n+      {\n+\tif (!_M_wrapped)\n+\t  return false;\n+\n+\tauto __s = _M_impl.view();\n+\tif (__s.empty())\n+\t  return true;\n+\n+\tconst lock_guard<__mutex> __l(_M_mtx);\n+\tif (_M_wrapped->sputn(__s.data(), __s.size()) != __s.size())\n+\t  return false;\n+\n+\tif (_M_needs_sync)\n+\t  {\n+\t    _M_needs_sync = false;\n+\t    if (_M_wrapped->pubsync() != 0)\n+\t      return false;\n+\t  }\n+\n+\t_M_impl.str(\"\");\n+\treturn true;\n+      }\n+\n+      streambuf_type*\n+      get_wrapped() const noexcept\n+      { return _M_wrapped; }\n+\n+      allocator_type get_allocator() const noexcept\n+      { return _M_impl.get_allocator(); }\n+\n+      void\n+      set_emit_on_sync(bool __b) noexcept\n+      { _M_emit_on_sync = __b; }\n+\n+    protected:\n+      int\n+      sync() override\n+      {\n+\tauto __res = _M_impl.pubsync();\n+\tif (__res == 0)\n+\t  {\n+\t    _M_needs_sync = true;\n+\t    if (_M_emit_on_sync)\n+\t      return emit() ? 0 : -1;\n+\t  }\n+\treturn __res;\n+      }\n+\n+      streamsize\n+      xsputn(const char_type* __s, streamsize __n) override\n+      { return _M_impl.sputn(__s, __n); }\n+\n+    private:\n+      streambuf_type* _M_wrapped;\n+\n+      using __impl_type = basic_stringbuf<char_type, traits_type,\n+\t\t\t\t\t  allocator_type>;\n+      __impl_type _M_impl;\n+\n+      struct __mutex\n+      {\n+#if _GLIBCXX_HAS_GTHREADS\n+\tmutex* _M_mtx;\n+\n+\t__mutex(void* __t)\n+\t  : _M_mtx(__t ? &_S_get_mutex(__t) : nullptr)\n+\t{ }\n+\n+\tvoid\n+\tswap(__mutex& __other) noexcept\n+\t{ std::swap(_M_mtx, __other._M_mtx); }\n+\n+\tvoid\n+\tlock()\n+\t{\n+\t  if (_M_mtx)\n+\t    _M_mtx->lock();\n+\t}\n+\n+\tvoid\n+\tunlock()\n+\t{\n+\t  if (_M_mtx)\n+\t    _M_mtx->unlock();\n+\t}\n+\n+\t// FIXME: This should be put in the .so\n+\tstatic mutex&\n+\t_S_get_mutex(void* __t)\n+\t{\n+\t  const unsigned char __mask = 0xf;\n+\t  static mutex __m[__mask + 1];\n+\n+\t  auto __key = _Hash_impl::hash(__t) & __mask;\n+\t  return __m[__key];\n+\t}\n+#else\n+\t__mutex(void*)\n+\t{ }\n+\n+\tvoid\n+\tswap(__mutex&&) noexcept\n+\t{ }\n+\n+\tvoid\n+\tlock()\n+\t{ }\n+\n+\tvoid\n+\tunlock()\n+\t{ }\n+#endif\n+\t__mutex(const __mutex&) = delete;\n+\t__mutex& operator=(const __mutex&) = delete;\n+\n+\t__mutex(__mutex&&) = default;\n+\t__mutex& operator=(__mutex&&) = default;\n+      };\n+      __mutex _M_mtx;\n+\n+      bool _M_emit_on_sync = false;\n+      bool _M_needs_sync = false;\n+    };\n+\n+  template <typename _CharT, typename _Traits = char_traits<_CharT>,\n+\t    typename _Alloc = allocator<_CharT>>\n+    class basic_osyncstream : public basic_ostream<_CharT, _Traits>\n+    {\n+      using __ostream_type = basic_ostream<_CharT, _Traits>;\n+\n+    public:\n+      // Types:\n+      using char_type = _CharT;\n+      using traits_type = _Traits;\n+      using allocator_type = _Alloc;\n+      using int_type = typename traits_type::int_type;\n+      using pos_type = typename traits_type::pos_type;\n+      using off_type = typename traits_type::off_type;\n+      using syncbuf_type = basic_syncbuf<_CharT, _Traits, _Alloc>;\n+      using streambuf_type = typename syncbuf_type::streambuf_type;\n+\n+    private:\n+      syncbuf_type _M_syncbuf;\n+\n+    public:\n+      basic_osyncstream(streambuf_type* __buf, const allocator_type& __a)\n+\t: _M_syncbuf(__buf, __a)\n+      { this->init(std::__addressof(_M_syncbuf)); }\n+\n+      explicit basic_osyncstream(streambuf_type* __buf)\n+\t: _M_syncbuf(__buf)\n+      { this->init(std::__addressof(_M_syncbuf)); }\n+\n+      basic_osyncstream(basic_ostream<char_type, traits_type>& __os,\n+\t\t        const allocator_type& __a)\n+\t: basic_osyncstream(__os.rdbuf(), __a)\n+      { this->init(std::__addressof(_M_syncbuf)); }\n+\n+      explicit basic_osyncstream(basic_ostream<char_type, traits_type>& __os)\n+\t: basic_osyncstream(__os.rdbuf())\n+      { this->init(std::__addressof(_M_syncbuf)); }\n+\n+      basic_osyncstream(basic_osyncstream&& __rhs) noexcept\n+\t: __ostream_type(std::move(__rhs)),\n+\t_M_syncbuf(std::move(__rhs._M_syncbuf))\n+      { __ostream_type::set_rdbuf(std::__addressof(_M_syncbuf)); }\n+\n+      ~basic_osyncstream() = default;\n+\n+      basic_osyncstream& operator=(basic_osyncstream&&) noexcept = default;\n+\n+      syncbuf_type* rdbuf() const noexcept\n+      { return const_cast<syncbuf_type*>(&_M_syncbuf); }\n+\n+      streambuf_type* get_wrapped() const noexcept\n+      { return _M_syncbuf.get_wrapped(); }\n+\n+      void emit()\n+      {\n+\tif (!_M_syncbuf.emit())\n+\t  this->setstate(ios_base::failbit);\n+      }\n+    };\n+\n+  template <class _CharT, class _Traits, class _Allocator>\n+    inline void\n+    swap(basic_syncbuf<_CharT, _Traits, _Allocator>& __x,\n+\t basic_syncbuf<_CharT, _Traits, _Allocator>& __y) noexcept\n+    { __x.swap(__y); }\n+\n+  using syncbuf = basic_syncbuf<char>;\n+  using wsyncbuf = basic_syncbuf<wchar_t>;\n+\n+  using osyncstream = basic_osyncstream<char>;\n+  using wosyncstream = basic_osyncstream<wchar_t>;\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // _GLIBCXX_USE_CXX11_ABI\n+#endif // C++2a\n+#endif\t/* _GLIBCXX_SYNCSTREAM */"}, {"sha": "7f51ef3a6c4fa8b2f05d4f0e00f842da0e97a2d9", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -229,6 +229,10 @@\n #define __cpp_lib_span 202002L\n #define __cpp_lib_ssize 201902L\n #define __cpp_lib_starts_ends_with 201711L\n+# if _GLIBCXX_USE_CXX11_ABI\n+// Only supported with cx11-abi\n+#  define __cpp_lib_syncbuf 201803L\n+# endif\n #define __cpp_lib_to_address 201711L\n #define __cpp_lib_to_array 201907L\n #endif"}, {"sha": "1b3ae9330bb300ba11c2c3ead2b7a8959a4fdd0a", "filename": "libstdc++-v3/testsuite/27_io/basic_syncbuf/1.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2F1.cc?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <syncstream>\n+\n+#ifndef __cpp_lib_syncbuf\n+# error \"Feature-test macro for syncbuf missing in <syncstream>\"\n+#elif __cpp_lib_syncbuf != 201803L\n+# error \"Feature-test macro for syncbuf has wrong value in <syncstream>\"\n+#endif"}, {"sha": "4ffcb0410fdc683654254ae50525f55dc689a9db", "filename": "libstdc++-v3/testsuite/27_io/basic_syncbuf/2.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2F2.cc?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_syncbuf\n+# error \"Feature-test macro for syncbuf missing in <version>\"\n+#elif __cpp_lib_syncbuf != 201803L\n+# error \"Feature-test macro for syncbuf has wrong value in <version>\"\n+#endif"}, {"sha": "d5062bab70b0a08f1360180edeb8553f96b5bbed", "filename": "libstdc++-v3/testsuite/27_io/basic_syncbuf/basic_ops/1.cc", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2Fbasic_ops%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2Fbasic_ops%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2Fbasic_ops%2F1.cc?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -0,0 +1,137 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string_view>\n+#include <syncstream>\n+\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() // construction\n+{\n+  {\n+    std::syncbuf s1;\n+    VERIFY( s1.get_wrapped() == nullptr );\n+\n+    std::stringbuf b;\n+    std::syncbuf s2(&b);\n+    VERIFY( s2.get_wrapped() == &b );\n+  }\n+\n+  {\n+    using alloc_type = __gnu_test::uneq_allocator<char>;\n+    using sbuf_t = std::basic_syncbuf<char, std::char_traits<char>,\n+\t\t\t\t      alloc_type>;\n+\n+    sbuf_t b;\n+\n+    alloc_type aa;\n+    sbuf_t s1(&b, aa);\n+    VERIFY( aa == s1.get_allocator() );\n+\n+    alloc_type aaa(42);\n+    sbuf_t s2(&b, aaa);\n+    VERIFY( aaa == s2.get_allocator() );\n+\n+    VERIFY( s1.get_allocator() != s2.get_allocator() );\n+  }\n+}\n+\n+void\n+test02() // moving\n+{\n+  {\n+    std::stringbuf b;\n+    std::syncbuf s1(&b);\n+\n+    std::syncbuf s2(std::move(s1));\n+\n+    VERIFY( s1.get_wrapped() == nullptr );\n+    VERIFY( s2.get_wrapped() == &b );\n+  }\n+\n+  {\n+    std::stringbuf b;\n+    std::syncbuf s1(&b);\n+\n+    std::syncbuf s2;\n+    s2 = std::move(s1);\n+\n+    VERIFY( s1.get_wrapped() == nullptr );\n+    VERIFY( s2.get_wrapped() == &b );\n+  }\n+}\n+\n+void\n+test03() // swaping\n+{\n+  std::stringbuf b;\n+  std::syncbuf s1(&b);\n+\n+  std::syncbuf s2;\n+  std::swap(s1, s2);\n+\n+  VERIFY( s1.get_wrapped() == nullptr );\n+  VERIFY( s2.get_wrapped() == &b );\n+}\n+\n+void\n+test04() // emitting\n+{\n+  {\n+    std::stringbuf b;\n+    std::syncbuf s(&b);\n+\n+    const std::string_view txt(\"This is a test\");\n+    s.sputn(txt.data(), txt.size());\n+\n+    VERIFY( b.str() != txt );\n+    VERIFY( s.pubsync() == 0 );\n+    VERIFY( b.str() != txt );\n+\n+    VERIFY( s.emit() );\n+    VERIFY( b.str() == txt );\n+  }\n+\n+  {\n+    std::stringbuf b;\n+    std::syncbuf s(&b);\n+    s.set_emit_on_sync(true);\n+\n+    const std::string_view txt(\"This is a test\");\n+    s.sputn(txt.data(), txt.size());\n+\n+    VERIFY( s.pubsync() == 0 );\n+    VERIFY( b.str() == txt );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  return 0;\n+}"}, {"sha": "49266b4abf01eb4165e51c346209f9197a7c39c3", "filename": "libstdc++-v3/testsuite/27_io/basic_syncbuf/requirements/types.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2Frequirements%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2Frequirements%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2Frequirements%2Ftypes.cc?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <syncstream>\n+\n+template<typename T>\n+  struct type_reqs\n+  {\n+    using test_type = T;\n+    using char_type = test_type::char_type;\n+    using int_type = test_type::int_type;\n+    using pos_type = test_type::pos_type;\n+    using off_Type = test_type::off_type;\n+    using traits_type = test_type::traits_type;\n+    using allocator_type = test_type::allocator_type;\n+    using streambuf_type = test_type::streambuf_type;\n+  };\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  using test_type = type_reqs<std::osyncstream>;\n+  using wtest_type = type_reqs<std::wosyncstream>;\n+}"}, {"sha": "90d20f1a6071c20331a9fd6f3d62e59cdee1b325", "filename": "libstdc++-v3/testsuite/27_io/basic_syncbuf/sync_ops/1.cc", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2Fsync_ops%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2Fsync_ops%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncbuf%2Fsync_ops%2F1.cc?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -0,0 +1,130 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a -pthread\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target pthread }\n+// { dg-require-effective-target cxx11-abi }\n+// { dg-require-gthreads \"\" }\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <sstream>\n+#include <string>\n+#include <string_view>\n+#include <syncstream>\n+#include <thread>\n+#include <vector>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  using namespace std::chrono_literals;\n+\n+  std::stringbuf b;\n+  std::atomic<unsigned> running(0);\n+\n+  auto const cstr = \"This is a test\";\n+\n+  constexpr int ct = 1000;\n+  auto const body = [&]{\n+    ++running;\n+    auto tid = std::this_thread::get_id();\n+    std::syncbuf s(&b);\n+    for (auto i = 0; i < ct; ++i)\n+    {\n+      std::stringstream stm;\n+      stm << tid << ' ' << cstr << ' ' << i << std::endl;\n+      auto sv = stm.view();\n+      s.sputn(sv.data(), sv.size());\n+      VERIFY( s.emit() );\n+    }\n+  };\n+\n+  const auto tct = 8;\n+  std::vector<std::thread> ts;\n+  ts.reserve(tct);\n+\n+  for (auto i = 0; i < tct; ++i)\n+    ts.emplace_back(std::thread(body));\n+\n+  do\n+  {\n+    std::this_thread::sleep_for(100ms);\n+  }\n+  while (running.load() < tct);\n+\n+  std::unordered_map<std::string, int> tids;\n+  for (auto&& t : ts)\n+  {\n+    std::stringstream stm;\n+    stm << t.get_id();\n+    tids.emplace(std::make_pair(stm.str(), 0));\n+  };\n+\n+  for (auto&& t : ts)\n+     t.join();\n+\n+  std::vector<std::string_view> lines;\n+  const auto lct = ct * ts.size();\n+  lines.reserve(lct);\n+\n+  std::size_t last = 0;\n+  auto sv = b.view();\n+  auto p = sv.find('\\n');\n+  while (p != std::string_view::npos)\n+  {\n+    lines.emplace_back(sv.substr(last, p - last));\n+    last = p+1;\n+    p = sv.find('\\n', last);\n+  }\n+  VERIFY( lines.size() == lct );\n+\n+  auto sep = \"\";\n+  auto i = 0;\n+  sv = std::string_view(cstr);\n+\n+  for (auto&& l : lines)\n+  {\n+    auto p = l.find(' ');\n+    VERIFY( p != std::string_view::npos );\n+    std::string tid(l.substr(0, p));\n+    ++p;\n+\n+    VERIFY( l.substr(p, sv.size()) == sv );\n+    std::string s(l.substr(++p + sv.size()));\n+    std::stringstream stm(s);\n+    int n;\n+    stm >> n;\n+    VERIFY( stm.eof() );\n+    VERIFY( n >= 0 && n < ct );\n+    auto it = tids.find(tid);\n+    VERIFY( it != std::end(tids) );\n+    ++(it->second);\n+  }\n+\n+  for (auto const& t : tids)\n+  {\n+    VERIFY( t.second == ct );\n+  }\n+  return 0;\n+}"}, {"sha": "1b3ae9330bb300ba11c2c3ead2b7a8959a4fdd0a", "filename": "libstdc++-v3/testsuite/27_io/basic_syncstream/1.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2F1.cc?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <syncstream>\n+\n+#ifndef __cpp_lib_syncbuf\n+# error \"Feature-test macro for syncbuf missing in <syncstream>\"\n+#elif __cpp_lib_syncbuf != 201803L\n+# error \"Feature-test macro for syncbuf has wrong value in <syncstream>\"\n+#endif"}, {"sha": "4ffcb0410fdc683654254ae50525f55dc689a9db", "filename": "libstdc++-v3/testsuite/27_io/basic_syncstream/2.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2F2.cc?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_syncbuf\n+# error \"Feature-test macro for syncbuf missing in <version>\"\n+#elif __cpp_lib_syncbuf != 201803L\n+# error \"Feature-test macro for syncbuf has wrong value in <version>\"\n+#endif"}, {"sha": "ef463996b3197888a17936ffcd7d7d5a6b652faf", "filename": "libstdc++-v3/testsuite/27_io/basic_syncstream/basic_ops/1.cc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2Fbasic_ops%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2Fbasic_ops%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2Fbasic_ops%2F1.cc?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -0,0 +1,134 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string_view>\n+#include <syncstream>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() // construction\n+{\n+  {\n+    std::stringbuf b;\n+    std::osyncstream s(&b);\n+    VERIFY( s.rdbuf() != nullptr );\n+    VERIFY( s.get_wrapped() == &b );\n+  }\n+\n+  {\n+    std::ostringstream stm;\n+    std::osyncstream s(stm);\n+    VERIFY( s.get_wrapped() == stm.rdbuf() );\n+  }\n+\n+  {\n+    using alloc_type = __gnu_test::uneq_allocator<char>;\n+    using sbuf_t = std::basic_syncbuf<char, std::char_traits<char>,\n+\t\t\t\t      alloc_type>;\n+    using stream_t = std::basic_osyncstream<char, std::char_traits<char>,\n+\t\t\t\t\t    alloc_type>;\n+    using str_t = std::basic_ostringstream<char, std::char_traits<char>,\n+\t\t\t\t\t   alloc_type>;\n+    sbuf_t b;\n+\n+    alloc_type aa;\n+    stream_t s1(&b, aa);\n+    VERIFY( aa == s1.rdbuf()->get_allocator() );\n+\n+    alloc_type aaa(42);\n+    stream_t s2(&b, aaa);\n+    VERIFY( aaa == s2.rdbuf()->get_allocator() );\n+\n+    VERIFY( s1.rdbuf()->get_allocator() != s2.rdbuf()->get_allocator() );\n+\n+    str_t stm;\n+    stream_t s3(stm, aa);\n+    VERIFY( s3.get_wrapped() == stm.rdbuf() );\n+    VERIFY( aa == s1.rdbuf()->get_allocator() );\n+  }\n+}\n+\n+void\n+test02() // moving\n+{\n+  {\n+    std::stringbuf b;\n+    std::osyncstream s1(&b);\n+\n+    std::osyncstream s2(std::move(s1));\n+\n+    VERIFY( s1.get_wrapped() == nullptr );\n+    VERIFY( s2.get_wrapped() == &b );\n+  }\n+\n+  {\n+    std::stringbuf b1;\n+    std::osyncstream s1(&b1);\n+\n+    std::stringbuf b2;\n+    std::osyncstream s2(&b2);\n+    s2 = std::move(s1);\n+\n+    VERIFY( s1.get_wrapped() == nullptr );\n+    VERIFY( s2.get_wrapped() == &b1 );\n+  }\n+}\n+\n+void\n+test03() // swaping\n+{\n+  std::stringbuf b1;\n+  std::osyncstream s1(&b1);\n+\n+  std::stringbuf b2;\n+  std::osyncstream s2(&b2);\n+\n+  std::swap(s1, s2);\n+\n+  VERIFY( s1.get_wrapped() == &b2 );\n+  VERIFY( s2.get_wrapped() == &b1 );\n+}\n+\n+void\n+test04() // emitting\n+{\n+  {\n+    std::stringbuf b;\n+    std::osyncstream s(&b);\n+\n+    const std::string_view txt(\"This is a test\");\n+    s << txt;\n+\n+    s.emit();\n+    VERIFY( b.str() == txt );\n+  }\n+}\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  return 0;\n+}"}, {"sha": "dfc0b72efcd95a7969e50ac7c482a6456f22c2d1", "filename": "libstdc++-v3/testsuite/27_io/basic_syncstream/requirements/types.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2Frequirements%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcbcea05884161d08da0c6386e48ac6e9ec3800/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2Frequirements%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2Frequirements%2Ftypes.cc?ref=6bcbcea05884161d08da0c6386e48ac6e9ec3800", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <syncstream>\n+\n+template<typename T>\n+  struct type_reqs\n+  {\n+    using test_type = T;\n+    using char_type = test_type::char_type;\n+    using int_type = test_type::int_type;\n+    using pos_type = test_type::pos_type;\n+    using off_Type = test_type::off_type;\n+    using traits_type = test_type::traits_type;\n+    using allocator_type = test_type::allocator_type;\n+    using streambuf_type = test_type::streambuf_type;\n+    using syncbuf_type = test_type::syncbuf_type;\n+  };\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  using test_type = type_reqs<std::osyncstream>;\n+  using wtest_type = type_reqs<std::wosyncstream>;\n+}"}]}