{"sha": "a6094705724d05fc2286c4541c97b8093b77bf05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYwOTQ3MDU3MjRkMDVmYzIyODZjNDU0MWM5N2I4MDkzYjc3YmYwNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-11-21T19:45:16Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-11-21T19:45:16Z"}, "message": "re PR tree-optimization/59221 (wrong code at -O2 and -O3 on x86_64-linux-gnu)\n\n\tPR tree-optimization/59221\n\t* tree-ssa-threadedge.c (thread_across_edge): Properly manage\n\ttemporary equivalences when threading through joiner blocks.\n\n\tPR tree-optimization/59221\n\t* gcc.c-torture/execute/pr59221.c: New test.\n\nFrom-SVN: r205229", "tree": {"sha": "ecd22acba8a1cb9ccadacc18271aa7b140edb5f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecd22acba8a1cb9ccadacc18271aa7b140edb5f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6094705724d05fc2286c4541c97b8093b77bf05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6094705724d05fc2286c4541c97b8093b77bf05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6094705724d05fc2286c4541c97b8093b77bf05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6094705724d05fc2286c4541c97b8093b77bf05/comments", "author": null, "committer": null, "parents": [{"sha": "3c8e8595edb357b7ff80c86c46f79823ed1ecce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c8e8595edb357b7ff80c86c46f79823ed1ecce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c8e8595edb357b7ff80c86c46f79823ed1ecce1"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "e63255845bd37457c68c109e7d18923772e8d6f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6094705724d05fc2286c4541c97b8093b77bf05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6094705724d05fc2286c4541c97b8093b77bf05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6094705724d05fc2286c4541c97b8093b77bf05", "patch": "@@ -1,3 +1,9 @@\n+2013-11-21  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/59221\n+\t* tree-ssa-threadedge.c (thread_across_edge): Properly manage\n+\ttemporary equivalences when threading through joiner blocks.\n+\n 2013-11-21  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR rtl-optimization/55950"}, {"sha": "0b3f8ba9b79c759fa360231a56d1fcaa02532e89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6094705724d05fc2286c4541c97b8093b77bf05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6094705724d05fc2286c4541c97b8093b77bf05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6094705724d05fc2286c4541c97b8093b77bf05", "patch": "@@ -1,3 +1,8 @@\n+2013-11-21  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/59221\n+\t* gcc.c-torture/execute/pr59221.c: New test.\n+\n 2013-11-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR libfortran/59227"}, {"sha": "0cd425948fcb58f9524be08f584860273733994d", "filename": "gcc/testsuite/gcc.c-torture/execute/pr59221.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6094705724d05fc2286c4541c97b8093b77bf05/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59221.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6094705724d05fc2286c4541c97b8093b77bf05/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59221.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59221.c?ref=a6094705724d05fc2286c4541c97b8093b77bf05", "patch": "@@ -0,0 +1,19 @@\n+\n+\n+int a = 1, b, d;\n+short e;\n+\n+int\n+main ()\n+{\n+  for (; b; b++)\n+    ;\n+  short f = a;\n+  int g = 15;\n+  e = f ? f : 1 << g;\n+  int h = e;\n+  d = h == 83647 ? 0 : h;\n+  if (d != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "a1448757ead784e1cacc10c0981d291e2eb98ad1", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6094705724d05fc2286c4541c97b8093b77bf05/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6094705724d05fc2286c4541c97b8093b77bf05/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=a6094705724d05fc2286c4541c97b8093b77bf05", "patch": "@@ -1072,6 +1072,10 @@ thread_across_edge (gimple dummy_cond,\n     /* Look at each successor of E->dest to see if we can thread through it.  */\n     FOR_EACH_EDGE (taken_edge, ei, e->dest->succs)\n       {\n+\t/* Push a fresh marker so we can unwind the equivalences created\n+\t   for each of E->dest's successors.  */\n+\tstack->safe_push (NULL_TREE);\n+     \n \t/* Avoid threading to any block we have already visited.  */\n \tbitmap_clear (visited);\n \tbitmap_set_bit (visited, taken_edge->dest->index);\n@@ -1118,6 +1122,9 @@ thread_across_edge (gimple dummy_cond,\n \t  {\n \t    delete_jump_thread_path (path);\n \t  }\n+\n+\t/* And unwind the equivalence table.  */\n+\tremove_temporary_equivalences (stack);\n       }\n     BITMAP_FREE (visited);\n   }"}]}