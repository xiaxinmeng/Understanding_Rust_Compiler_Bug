{"sha": "ba886d0c488ebea2eb2df95c2069a3e207704dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE4ODZkMGM0ODhlYmVhMmViMmRmOTVjMjA2OWEzZTIwNzcwNGRhYw==", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2021-05-14T16:59:11Z"}, "committer": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2021-05-17T20:15:08Z"}, "message": "openmp: Notify team barrier of pending tasks in omp_fulfill_event\n\nThe team barrier should be notified of any new tasks that become runnable\nas the result of a completing task, otherwise the barrier threads might\nnot resume processing available tasks, resulting in a hang.\n\n2021-05-17  Kwok Cheung Yeung  <kcy@codesourcery.com>\n\n\tlibgomp/\n\t* task.c (omp_fulfill_event): Call gomp_team_barrier_set_task_pending\n\tif new tasks generated.\n\t* testsuite/libgomp.c-c++-common/task-detach-13.c: New.", "tree": {"sha": "c9977390cd9f7894ebc1837bbce68272f951d934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9977390cd9f7894ebc1837bbce68272f951d934"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba886d0c488ebea2eb2df95c2069a3e207704dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba886d0c488ebea2eb2df95c2069a3e207704dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba886d0c488ebea2eb2df95c2069a3e207704dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba886d0c488ebea2eb2df95c2069a3e207704dac/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d93261bc03c9c6891ccd8c77ab22b2a09971905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d93261bc03c9c6891ccd8c77ab22b2a09971905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d93261bc03c9c6891ccd8c77ab22b2a09971905"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "feb4796a3ac87362063221f7c9a2639c64ccb03c", "filename": "libgomp/task.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba886d0c488ebea2eb2df95c2069a3e207704dac/libgomp%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba886d0c488ebea2eb2df95c2069a3e207704dac/libgomp%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftask.c?ref=ba886d0c488ebea2eb2df95c2069a3e207704dac", "patch": "@@ -2460,6 +2460,7 @@ omp_fulfill_event (omp_event_handle_t event)\n   if (new_tasks > 0)\n     {\n       /* Wake up threads to run new tasks.  */\n+      gomp_team_barrier_set_task_pending (&team->barrier);\n       do_wake = team->nthreads - team->task_running_count;\n       if (do_wake > new_tasks)\n \tdo_wake = new_tasks;"}, {"sha": "9622fd8251f0cbb6fc81feff8461ad1f6f55118e", "filename": "libgomp/testsuite/libgomp.c-c++-common/task-detach-13.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba886d0c488ebea2eb2df95c2069a3e207704dac/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-detach-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba886d0c488ebea2eb2df95c2069a3e207704dac/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-detach-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-detach-13.c?ref=ba886d0c488ebea2eb2df95c2069a3e207704dac", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run { target *-*-linux* *-*-gnu* *-*-freebsd* } } */\n+/* { dg-timeout 10 } */\n+\n+/* Test that omp_fulfill_event works when called from an external\n+   non-OpenMP thread.  */\n+\n+#include <omp.h>\n+#include <unistd.h>\n+#include <pthread.h>\n+#include <stdio.h>\n+\n+int finished = 0;\n+int event_pending = 0;\n+omp_event_handle_t detach_event;\n+\n+void *\n+fulfill_thread (void *)\n+{\n+  while (!__atomic_load_n (&finished, __ATOMIC_RELAXED))\n+    {\n+      if (__atomic_load_n (&event_pending, __ATOMIC_ACQUIRE))\n+\t{\n+\t  omp_fulfill_event (detach_event);\n+\t  __atomic_store_n (&event_pending, 0, __ATOMIC_RELEASE);\n+\t}\n+\n+      sleep(1);\n+    }\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  pthread_t thr;\n+  int dep;\n+  pthread_create (&thr, NULL, fulfill_thread, 0);\n+\n+  #pragma omp parallel\n+    #pragma omp single\n+    {\n+      omp_event_handle_t ev;\n+\n+      #pragma omp task depend (out: dep) detach (ev)\n+      {\n+\tdetach_event = ev;\n+\t__atomic_store_n (&event_pending, 1, __ATOMIC_RELEASE);\n+      }\n+\n+      #pragma omp task depend (in: dep)\n+      {\n+\t__atomic_store_n (&finished, 1, __ATOMIC_RELAXED);\n+      }\n+    }\n+\n+  pthread_join (thr, 0);\n+  return 0;\n+}"}]}