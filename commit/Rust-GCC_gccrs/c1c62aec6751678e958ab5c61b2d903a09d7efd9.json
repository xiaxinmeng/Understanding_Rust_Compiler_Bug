{"sha": "c1c62aec6751678e958ab5c61b2d903a09d7efd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFjNjJhZWM2NzUxNjc4ZTk1OGFiNWM2MWIyZDkwM2EwOWQ3ZWZkOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-08T04:05:41Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-08T04:05:41Z"}, "message": "c++: ICE in dependent_type_p with constrained auto [PR97052]\n\nThis patch fixes an \"unguarded\" call to coerce_template_parms in\nbuild_standard_check: processing_template_decl could be zero if we\nget here during processing of the first 'auto' parameter of an\nabbreviated function template, or if we're processing the type\nconstraint of a non-templated variable.  In the testcase below, this\nleads to an ICE when coerce_template_parms instantiates C's dependent\ndefault template argument.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97052\n\t* constraint.cc (build_type_constraint): Temporarily increment\n\tprocessing_template_decl before calling build_concept_check.\n\t* pt.c (make_constrained_placeholder_type): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97052\n\t* g++.dg/cpp2a/concepts-defarg2.C: New test.", "tree": {"sha": "3642a5e9b9cbdfc4f9585f4827703843380d24f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3642a5e9b9cbdfc4f9585f4827703843380d24f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1c62aec6751678e958ab5c61b2d903a09d7efd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c62aec6751678e958ab5c61b2d903a09d7efd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c62aec6751678e958ab5c61b2d903a09d7efd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c62aec6751678e958ab5c61b2d903a09d7efd9/comments", "author": null, "committer": null, "parents": [{"sha": "6b1b5c255f859e75a2d74ae58a011e846d87a277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1b5c255f859e75a2d74ae58a011e846d87a277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b1b5c255f859e75a2d74ae58a011e846d87a277"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "050b55ce09298170c15108008b3d759493fa7bd0", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c62aec6751678e958ab5c61b2d903a09d7efd9/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c62aec6751678e958ab5c61b2d903a09d7efd9/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=c1c62aec6751678e958ab5c61b2d903a09d7efd9", "patch": "@@ -1427,7 +1427,9 @@ tree\n build_type_constraint (tree decl, tree args, tsubst_flags_t complain)\n {\n   tree wildcard = build_nt (WILDCARD_DECL);\n+  ++processing_template_decl;\n   tree check = build_concept_check (decl, wildcard, args, complain);\n+  --processing_template_decl;\n   if (check == error_mark_node)\n     return error_mark_node;\n   return unpack_concept_check (check);"}, {"sha": "9a83810b67c473a0c584463f09df1e23057ba5f1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c62aec6751678e958ab5c61b2d903a09d7efd9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c62aec6751678e958ab5c61b2d903a09d7efd9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c1c62aec6751678e958ab5c61b2d903a09d7efd9", "patch": "@@ -27928,7 +27928,9 @@ make_constrained_placeholder_type (tree type, tree con, tree args)\n   tree expr = tmpl;\n   if (TREE_CODE (con) == FUNCTION_DECL)\n     expr = ovl_make (tmpl);\n+  ++processing_template_decl;\n   expr = build_concept_check (expr, type, args, tf_warning_or_error);\n+  --processing_template_decl;\n \n   PLACEHOLDER_TYPE_CONSTRAINTS (type) = expr;\n "}, {"sha": "a63ca4e133d938fad721093d085dd9884559b6b0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-defarg2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c62aec6751678e958ab5c61b2d903a09d7efd9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-defarg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c62aec6751678e958ab5c61b2d903a09d7efd9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-defarg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-defarg2.C?ref=c1c62aec6751678e958ab5c61b2d903a09d7efd9", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/97052\n+// { dg-do compile { target c++20 } }\n+\n+template<typename T, typename U = typename T::type>\n+concept C = true;\n+\n+constexpr bool f(C auto) {\n+  return true;\n+}\n+\n+static_assert(f(0));\n+\n+C auto x = 0;"}]}