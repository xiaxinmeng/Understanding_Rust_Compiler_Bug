{"sha": "4cea6c02f134f16f8704767f0ce6435a13eec371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNlYTZjMDJmMTM0ZjE2Zjg3MDQ3NjdmMGNlNjQzNWExM2VlYzM3MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-05-25T22:36:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-05-25T22:36:11Z"}, "message": "tree.h: Update the table of flags used on tree nodes.\n\n\t* tree.h: Update the table of flags used on tree nodes.\n\t(TREE_NO_TRAMPOLINE): New accessor for static_flag.\n\t(SAVE_EXPR_RESOLVED_P): Use automatically-built access check.\n\t(FORCED_LABEL): Add access check.\n\t(CALL_EXPR_RETURN_SLOT_OPT): Likewise.\n\t(ASM_INPUT_P): Likewise.\n\t(ASM_VOLATILE_P): Likewise.\n\t(EH_FILTER_MUST_NOT_THROW): Access static_flag directly.\n\t(OMP_SECTION_LAST): Access private_flag directly.\n\t(OMP_RETURN_NOWAIT): Likewise.\n\t(OMP_PARALLEL_COMBINED): Likewise.\n\t(OMP_CLAUSE_PRIVATE_DEBUG): Access public_flag directly.\n\t(OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE): Likewise.\n\t* tree-ssa-propagate.c (STMT_IN_SSA_EDGE_WORKLIST): Access\n\tdeprecated_flag directly.\n\nFrom-SVN: r135881", "tree": {"sha": "6d75630cb3912d3bc03853f992340f47a210f4f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d75630cb3912d3bc03853f992340f47a210f4f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cea6c02f134f16f8704767f0ce6435a13eec371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cea6c02f134f16f8704767f0ce6435a13eec371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cea6c02f134f16f8704767f0ce6435a13eec371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cea6c02f134f16f8704767f0ce6435a13eec371/comments", "author": null, "committer": null, "parents": [{"sha": "23ed71c60c5a2783c092a00cd39133c2f057d4dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ed71c60c5a2783c092a00cd39133c2f057d4dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ed71c60c5a2783c092a00cd39133c2f057d4dc"}], "stats": {"total": 208, "additions": 142, "deletions": 66}, "files": [{"sha": "b6c22de3c8adad0d6acfb53351d81a3e14b4ec55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea6c02f134f16f8704767f0ce6435a13eec371/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea6c02f134f16f8704767f0ce6435a13eec371/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cea6c02f134f16f8704767f0ce6435a13eec371", "patch": "@@ -1,3 +1,21 @@\n+2008-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h: Update the table of flags used on tree nodes.\n+\t(TREE_NO_TRAMPOLINE): New accessor for static_flag.\n+\t(SAVE_EXPR_RESOLVED_P): Use automatically-built access check.\n+\t(FORCED_LABEL): Add access check.\n+\t(CALL_EXPR_RETURN_SLOT_OPT): Likewise.\n+\t(ASM_INPUT_P): Likewise.\n+\t(ASM_VOLATILE_P): Likewise.\n+\t(EH_FILTER_MUST_NOT_THROW): Access static_flag directly.\n+\t(OMP_SECTION_LAST): Access private_flag directly.\n+\t(OMP_RETURN_NOWAIT): Likewise.\n+\t(OMP_PARALLEL_COMBINED): Likewise.\n+\t(OMP_CLAUSE_PRIVATE_DEBUG): Access public_flag directly.\n+\t(OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE): Likewise.\n+\t* tree-ssa-propagate.c (STMT_IN_SSA_EDGE_WORKLIST): Access\n+\tdeprecated_flag directly.\n+\n 2008-05-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* final.c (frame_pointer_needed): Removed."}, {"sha": "ae7fe84821398b85f9026b7be26faa6633180232", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea6c02f134f16f8704767f0ce6435a13eec371/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea6c02f134f16f8704767f0ce6435a13eec371/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=4cea6c02f134f16f8704767f0ce6435a13eec371", "patch": "@@ -117,13 +117,13 @@\n static ssa_prop_visit_stmt_fn ssa_prop_visit_stmt;\n static ssa_prop_visit_phi_fn ssa_prop_visit_phi;\n \n-/* Use the TREE_DEPRECATED bitflag to mark statements that have been\n+/* Use the deprecated flag to mark statements that have been\n    added to one of the SSA edges worklists.  This flag is used to\n    avoid visiting statements unnecessarily when draining an SSA edge\n    worklist.  If while simulating a basic block, we find a statement with\n    STMT_IN_SSA_EDGE_WORKLIST set, we clear it to prevent SSA edge\n    processing from visiting it again.  */\n-#define STMT_IN_SSA_EDGE_WORKLIST(T)\tTREE_DEPRECATED (T)\n+#define STMT_IN_SSA_EDGE_WORKLIST(T) ((T)->base.deprecated_flag)\n \n /* A bitmap to keep track of executable blocks in the CFG.  */\n static sbitmap executable_blocks;"}, {"sha": "6ac75e6e89a40c3eeee8d7d99070e63e458aca01", "filename": "gcc/tree.h", "status": "modified", "additions": 122, "deletions": 64, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea6c02f134f16f8704767f0ce6435a13eec371/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea6c02f134f16f8704767f0ce6435a13eec371/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4cea6c02f134f16f8704767f0ce6435a13eec371", "patch": "@@ -423,159 +423,210 @@ struct gimple_stmt GTY(())\n };\n \n /* The following table lists the uses of each of the above flags and\n-   for which types of nodes they are defined.  Note that expressions\n-   include decls.\n+   for which types of nodes they are defined.\n \n    addressable_flag:\n \n        TREE_ADDRESSABLE in\n-\t   VAR_DECL, FUNCTION_DECL, FIELD_DECL, CONSTRUCTOR, LABEL_DECL,\n-\t   ..._TYPE, IDENTIFIER_NODE.\n-\t   In a STMT_EXPR, it means we want the result of the enclosed\n-\t   expression.\n-       CALL_EXPR_TAILCALL in CALL_EXPR\n-       CASE_LOW_SEEN in CASE_LABEL_EXPR\n-       RETURN_EXPR_OUTCOME in RETURN_EXPR\n+           VAR_DECL, FUNCTION_DECL, FIELD_DECL, LABEL_DECL\n+           all types\n+           CONSTRUCTOR, IDENTIFIER_NODE\n+           STMT_EXPR, it means we want the result of the enclosed expression\n+\n+       CALL_EXPR_TAILCALL in\n+           CALL_EXPR\n+\n+       CASE_LOW_SEEN in\n+           CASE_LABEL_EXPR\n \n    static_flag:\n \n        TREE_STATIC in\n-           VAR_DECL, FUNCTION_DECL, CONSTRUCTOR, ADDR_EXPR\n+           VAR_DECL, FUNCTION_DECL\n+           CONSTRUCTOR\n+\n+       TREE_NO_TRAMPOLINE in\n+           ADDR_EXPR\n+\n        BINFO_VIRTUAL_P in\n            TREE_BINFO\n+\n        TREE_SYMBOL_REFERENCED in\n            IDENTIFIER_NODE\n+\n        CLEANUP_EH_ONLY in\n            TARGET_EXPR, WITH_CLEANUP_EXPR\n+\n        TRY_CATCH_IS_CLEANUP in\n            TRY_CATCH_EXPR\n+\n        ASM_INPUT_P in\n            ASM_EXPR\n-       EH_FILTER_MUST_NOT_THROW in EH_FILTER_EXPR\n+\n+       EH_FILTER_MUST_NOT_THROW in\n+           EH_FILTER_EXPR\n+\n        TYPE_REF_CAN_ALIAS_ALL in\n            POINTER_TYPE, REFERENCE_TYPE\n+\n        MOVE_NONTEMPORAL in\n-\t   GIMPLE_MODIFY_STMT\n+           GIMPLE_MODIFY_STMT\n+\n        CASE_HIGH_SEEN in\n-\t   CASE_LABEL_EXPR\n+           CASE_LABEL_EXPR\n+\n        CALL_CANNOT_INLINE_P in\n-\t   CALL_EXPR\n+           CALL_EXPR\n \n    public_flag:\n \n        TREE_OVERFLOW in\n            INTEGER_CST, REAL_CST, COMPLEX_CST, VECTOR_CST\n+\n        TREE_PUBLIC in\n-           VAR_DECL or FUNCTION_DECL or IDENTIFIER_NODE\n+           VAR_DECL, FUNCTION_DECL\n+           IDENTIFIER_NODE\n+\n        ASM_VOLATILE_P in\n            ASM_EXPR\n+\n        CALL_EXPR_VA_ARG_PACK in\n-\t  CALL_EXPR\n+           CALL_EXPR\n+\n        TYPE_CACHED_VALUES_P in\n-          ..._TYPE\n+           all types\n+\n        SAVE_EXPR_RESOLVED_P in\n-\t  SAVE_EXPR\n+           SAVE_EXPR\n+\n        OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE in\n-\t  OMP_CLAUSE_LASTPRIVATE\n+           OMP_CLAUSE_LASTPRIVATE\n+\n        OMP_CLAUSE_PRIVATE_DEBUG in\n-\t  OMP_CLAUSE_PRIVATE\n+           OMP_CLAUSE_PRIVATE\n \n    private_flag:\n \n        TREE_PRIVATE in\n-           ..._DECL\n+           all decls\n+\n        CALL_EXPR_RETURN_SLOT_OPT in\n            CALL_EXPR\n+\n        DECL_BY_REFERENCE in\n            PARM_DECL, RESULT_DECL\n+\n        OMP_RETURN_NOWAIT in\n-\t   OMP_RETURN\n+           OMP_RETURN\n+\n        OMP_SECTION_LAST in\n-\t   OMP_SECTION\n+           OMP_SECTION\n+\n        OMP_PARALLEL_COMBINED in\n-\t   OMP_PARALLEL\n+           OMP_PARALLEL\n \n    protected_flag:\n \n        TREE_PROTECTED in\n            BLOCK\n-\t   ..._DECL\n+           all decls\n+\n        CALL_FROM_THUNK_P in\n            CALL_EXPR\n \n    side_effects_flag:\n \n        TREE_SIDE_EFFECTS in\n            all expressions\n-\t   all decls\n-\t   all constants\n+           all decls\n+           all constants\n \n        FORCED_LABEL in\n-\t   LABEL_DECL\n+           LABEL_DECL\n \n    volatile_flag:\n \n        TREE_THIS_VOLATILE in\n            all expressions\n+           all decls\n+\n        TYPE_VOLATILE in\n-           ..._TYPE\n+           all types\n \n    readonly_flag:\n \n        TREE_READONLY in\n            all expressions\n+           all decls\n+\n        TYPE_READONLY in\n-           ..._TYPE\n+           all types\n \n    constant_flag:\n \n        TREE_CONSTANT in\n            all expressions\n-\t   all decls\n-\t   all constants\n-       TYPE_SIZES_GIMPLIFIED\n-           ..._TYPE\n+           all decls\n+           all constants\n+\n+       TYPE_SIZES_GIMPLIFIED in\n+           all types\n \n    unsigned_flag:\n \n        TYPE_UNSIGNED in\n            all types\n+\n        DECL_UNSIGNED in\n            all decls\n \n+       REGISTER_DEFS_IN_THIS_STMT in\n+           all expressions (tree-into-ssa.c)\n+\n    asm_written_flag:\n \n        TREE_ASM_WRITTEN in\n-           VAR_DECL, FUNCTION_DECL, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE\n-\t   BLOCK, SSA_NAME, STRING_CST\n+           VAR_DECL, FUNCTION_DECL\n+           RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE\n+           BLOCK, SSA_NAME, STRING_CST\n+\n+       NECESSARY in\n+           all expressions (tree-ssa-dce.c, tree-ssa-pre.c)\n \n    used_flag:\n \n        TREE_USED in\n-           expressions, IDENTIFIER_NODE\n+           all expressions\n+           all decls\n+           IDENTIFIER_NODE\n \n    nothrow_flag:\n \n        TREE_NOTHROW in\n-           CALL_EXPR, FUNCTION_DECL\n+           CALL_EXPR\n+           FUNCTION_DECL\n \n        TYPE_ALIGN_OK in\n-\t   ..._TYPE\n+           all types\n \n        TREE_THIS_NOTRAP in\n           (ALIGN/MISALIGNED_)INDIRECT_REF, ARRAY_REF, ARRAY_RANGE_REF\n \n    deprecated_flag:\n \n-\tTREE_DEPRECATED in\n-\t   ..._DECL\n+       TREE_DEPRECATED in\n+           all decls\n+\n+       IDENTIFIER_TRANSPARENT_ALIAS in\n+           IDENTIFIER_NODE\n \n-\tIDENTIFIER_TRANSPARENT_ALIAS in\n-\t   IDENTIFIER_NODE\n+       STMT_IN_SSA_EDGE_WORKLIST in\n+           all expressions (tree-ssa-propagate.c)\n \n    visited:\n \n-   \tUsed in tree traversals to mark visited nodes.\n+       TREE_VISITED in\n+           all trees (used liberally by many passes)\n \n    saturating_flag:\n \n@@ -585,8 +636,15 @@ struct gimple_stmt GTY(())\n    nowarning_flag:\n \n        TREE_NO_WARNING in\n-           ... any expr or decl node\n+           all expressions\n+           all decls\n+\n+   default_def_flag:\n+\n+       SSA_NAME_IS_DEFAULT_DEF in\n+           SSA_NAME\n */\n+\n #undef DEFTREESTRUCT\n #define DEFTREESTRUCT(ENUM, NAME) ENUM,\n enum tree_node_structure_enum {\n@@ -1169,12 +1227,12 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n \n /* In a VAR_DECL, nonzero means allocate static storage.\n    In a FUNCTION_DECL, nonzero if function has been defined.\n-   In a CONSTRUCTOR, nonzero means allocate static storage.\n-\n-   ??? This is also used in lots of other nodes in unclear ways which\n-   should be cleaned up some day.  */\n+   In a CONSTRUCTOR, nonzero means allocate static storage.  */\n #define TREE_STATIC(NODE) ((NODE)->base.static_flag)\n \n+/* In an ADDR_EXPR, nonzero means do not use a trampoline.  */\n+#define TREE_NO_TRAMPOLINE(NODE) (ADDR_EXPR_CHECK (NODE)->base.static_flag)\n+\n /* In a TARGET_EXPR or WITH_CLEANUP_EXPR, means that the pertinent cleanup\n    should only be executed if an exception is thrown, not on normal exit\n    of its scope.  */\n@@ -1241,7 +1299,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* In a SAVE_EXPR, indicates that the original expression has already\n    been substituted with a VAR_DECL that contains the value.  */\n #define SAVE_EXPR_RESOLVED_P(NODE) \\\n-  (TREE_CHECK (NODE, SAVE_EXPR)->base.public_flag)\n+  (SAVE_EXPR_CHECK (NODE)->base.public_flag)\n \n /* Set on a CALL_EXPR if this stdarg call should be passed the argument\n    pack.  */\n@@ -1259,7 +1317,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* In a LABEL_DECL, nonzero means this label had its address taken\n    and therefore can never be deleted and is a jump target for\n    computed gotos.  */\n-#define FORCED_LABEL(NODE) ((NODE)->base.side_effects_flag)\n+#define FORCED_LABEL(NODE) (LABEL_DECL_CHECK (NODE)->base.side_effects_flag)\n \n /* Nonzero means this expression is volatile in the C sense:\n    its address should be of type `volatile WHATEVER *'.\n@@ -1333,17 +1391,16 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n \n /* In a CALL_EXPR, means that it's safe to use the target of the call\n    expansion as the return slot for a call that returns in memory.  */\n-#define CALL_EXPR_RETURN_SLOT_OPT(NODE) ((NODE)->base.private_flag)\n+#define CALL_EXPR_RETURN_SLOT_OPT(NODE) \\\n+  (CALL_EXPR_CHECK (NODE)->base.private_flag)\n \n /* In a RESULT_DECL or PARM_DECL, means that it is passed by invisible\n    reference (and the TREE_TYPE is a pointer to the true type).  */\n-#define DECL_BY_REFERENCE(NODE) \\\n-  (DECL_COMMON_CHECK (NODE)->base.private_flag)\n+#define DECL_BY_REFERENCE(NODE) (DECL_COMMON_CHECK (NODE)->base.private_flag)\n \n /* In a CALL_EXPR, means that the call is the jump from a thunk to the\n    thunked-to function.  */\n-#define CALL_FROM_THUNK_P(NODE) \\\n-  (CALL_EXPR_CHECK (NODE)->base.protected_flag)\n+#define CALL_FROM_THUNK_P(NODE) (CALL_EXPR_CHECK (NODE)->base.protected_flag)\n \n /* In a type, nonzero means that all objects of the type are guaranteed by the\n    language or front-end to be properly aligned, so we can indicate that a MEM\n@@ -1664,8 +1721,8 @@ struct tree_constructor GTY(())\n #define ASM_CLOBBERS(NODE)      TREE_OPERAND (ASM_EXPR_CHECK (NODE), 3)\n /* Nonzero if we want to create an ASM_INPUT instead of an\n    ASM_OPERAND with no operands.  */\n-#define ASM_INPUT_P(NODE) (TREE_STATIC (NODE))\n-#define ASM_VOLATILE_P(NODE) (TREE_PUBLIC (NODE))\n+#define ASM_INPUT_P(NODE) (ASM_EXPR_CHECK (NODE)->base.static_flag)\n+#define ASM_VOLATILE_P(NODE) (ASM_EXPR_CHECK (NODE)->base.public_flag)\n \n /* COND_EXPR accessors.  */\n #define COND_EXPR_COND(NODE)\t(TREE_OPERAND (COND_EXPR_CHECK (NODE), 0))\n@@ -1692,7 +1749,8 @@ struct tree_constructor GTY(())\n /* EH_FILTER_EXPR accessors.  */\n #define EH_FILTER_TYPES(NODE)\tTREE_OPERAND (EH_FILTER_EXPR_CHECK (NODE), 0)\n #define EH_FILTER_FAILURE(NODE)\tTREE_OPERAND (EH_FILTER_EXPR_CHECK (NODE), 1)\n-#define EH_FILTER_MUST_NOT_THROW(NODE) TREE_STATIC (EH_FILTER_EXPR_CHECK (NODE))\n+#define EH_FILTER_MUST_NOT_THROW(NODE) \\\n+  (EH_FILTER_EXPR_CHECK (NODE)->base.static_flag)\n \n /* CHANGE_DYNAMIC_TYPE_EXPR accessors.  */\n #define CHANGE_DYNAMIC_TYPE_NEW_TYPE(NODE) \\\n@@ -1770,30 +1828,30 @@ struct tree_constructor GTY(())\n /* True on an OMP_SECTION statement that was the last lexical member.\n    This status is meaningful in the implementation of lastprivate.  */\n #define OMP_SECTION_LAST(NODE) \\\n-  TREE_PRIVATE (OMP_SECTION_CHECK (NODE))\n+  (OMP_SECTION_CHECK (NODE)->base.private_flag)\n \n /* True on an OMP_RETURN statement if the return does not require a\n    thread synchronization via some sort of barrier.  The exact barrier\n    that would otherwise be emitted is dependent on the OMP statement\n    with which this return is associated.  */\n #define OMP_RETURN_NOWAIT(NODE) \\\n-  TREE_PRIVATE (OMP_RETURN_CHECK (NODE))\n+  (OMP_RETURN_CHECK (NODE)->base.private_flag)\n \n /* True on an OMP_PARALLEL statement if it represents an explicit\n    combined parallel work-sharing constructs.  */\n #define OMP_PARALLEL_COMBINED(NODE) \\\n-  TREE_PRIVATE (OMP_PARALLEL_CHECK (NODE))\n+  (OMP_PARALLEL_CHECK (NODE)->base.private_flag)\n \n /* True on a PRIVATE clause if its decl is kept around for debugging\n    information only and its DECL_VALUE_EXPR is supposed to point\n    to what it has been remapped to.  */\n #define OMP_CLAUSE_PRIVATE_DEBUG(NODE) \\\n-  TREE_PUBLIC (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_PRIVATE))\n+  (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_PRIVATE)->base.public_flag)\n \n /* True on a LASTPRIVATE clause if a FIRSTPRIVATE clause for the same\n    decl is present in the chain.  */\n #define OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE(NODE) \\\n-  TREE_PUBLIC (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_LASTPRIVATE))\n+  (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_LASTPRIVATE)->base.public_flag)\n \n #define OMP_CLAUSE_IF_EXPR(NODE) \\\n   OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_IF), 0)"}]}