{"sha": "fd5c817a2457050649c2aadd8657091b2f6bbdaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ1YzgxN2EyNDU3MDUwNjQ5YzJhYWRkODY1NzA5MWIyZjZiYmRhZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-05-22T09:07:31Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-05-22T09:07:31Z"}, "message": "re PR c/47043 (allow deprecating enum values)\n\n\tPR c/47043\n\t* c-common.c (handle_deprecated_attribute): Allow CONST_DECL.\n\n\t* c-parser.c (c_parser_enum_specifier): Parse and apply enumerator\n\tattributes.\n\n\t* cp-tree.h (build_enumerator): Update declaration.\n\t* decl.c (build_enumerator): Add attributes parameter.  Call\n\tcplus_decl_attributes.\n\t* init.c (constant_value_1): Pass tf_none to mark_used.\n\t* parser.c (cp_parser_enumerator_definition): Parse attributes and\n\tpass them down to build_enumerator.\n\t* pt.c (tsubst_enum): Pass decl attributes to build_enumerator.\n\t* semantics.c (finish_id_expression): Don't warn_deprecated_use here.\n\n\t* doc/extend.texi (Enumerator Attributes): New section.\n\tDocument syntax of enumerator attributes.\n\n\t* c-c++-common/attributes-enum-1.c: New test.\n\t* c-c++-common/attributes-enum-2.c: New test.\n\t* g++.dg/cpp0x/attributes-enum-1.C: New test.\n\t* g++.dg/cpp1y/attributes-enum-1.C: New test.\n\nCo-Authored-By: Edward Smith-Rowland <3dw4rd@verizon.net>\n\nFrom-SVN: r223527", "tree": {"sha": "28c0b41bb4cb2b1945924c7e303895d48ba4b7e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28c0b41bb4cb2b1945924c7e303895d48ba4b7e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd5c817a2457050649c2aadd8657091b2f6bbdaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5c817a2457050649c2aadd8657091b2f6bbdaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5c817a2457050649c2aadd8657091b2f6bbdaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5c817a2457050649c2aadd8657091b2f6bbdaf/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "afbe632536736558f24680aa2c4c00b2d451e0b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afbe632536736558f24680aa2c4c00b2d451e0b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afbe632536736558f24680aa2c4c00b2d451e0b6"}], "stats": {"total": 242, "additions": 223, "deletions": 19}, "files": [{"sha": "aaa6aab930fb46b100b76b964be79618a4e3d7ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -1,3 +1,9 @@\n+2015-05-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/47043\n+\t* doc/extend.texi (Enumerator Attributes): New section.\n+\tDocument syntax of enumerator attributes.\n+\n 2015-05-22  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (get_reduction_op): New function."}, {"sha": "1dd20674e26a0a7da2a5905fb6597ff41c7fbf3f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -1,3 +1,8 @@\n+2015-05-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/47043\n+\t* c-common.c (handle_deprecated_attribute): Allow CONST_DECL.\n+\n 2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Use if instead of #if with"}, {"sha": "36c984cd18fb58b2c61a10503c667030ebe80745", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -9088,6 +9088,7 @@ handle_deprecated_attribute (tree *node, tree name,\n \t  || TREE_CODE (decl) == PARM_DECL\n \t  || VAR_OR_FUNCTION_DECL_P (decl)\n \t  || TREE_CODE (decl) == FIELD_DECL\n+\t  || TREE_CODE (decl) == CONST_DECL\n \t  || objc_method_decl (TREE_CODE (decl)))\n \tTREE_DEPRECATED (decl) = 1;\n       else"}, {"sha": "8af417baaa450eca3204b8c8d1a9c36c05261f60", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -1,3 +1,9 @@\n+2015-05-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/47043\n+\t* c-parser.c (c_parser_enum_specifier): Parse and apply enumerator\n+\tattributes.\n+\n 2015-05-21  Marek Polacek  <polacek@redhat.com>\n \n \t* c-typeck.c (inform_declaration): Use DECL_IS_BUILTIN instead of"}, {"sha": "965b4b9e5f3c8bbad1e5f8beec7c90edc85315ff", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -2516,6 +2516,13 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n    enumerator:\n      enumeration-constant\n      enumeration-constant = constant-expression\n+\n+   GNU Extensions:\n+\n+   enumerator:\n+     enumeration-constant attributes[opt]\n+     enumeration-constant attributes[opt] = constant-expression\n+\n */\n \n static struct c_typespec\n@@ -2575,6 +2582,8 @@ c_parser_enum_specifier (c_parser *parser)\n \t  c_parser_set_source_position_from_token (token);\n \t  decl_loc = value_loc = token->location;\n \t  c_parser_consume_token (parser);\n+\t  /* Parse any specified attributes.  */\n+\t  tree enum_attrs = c_parser_attributes (parser);\n \t  if (c_parser_next_token_is (parser, CPP_EQ))\n \t    {\n \t      c_parser_consume_token (parser);\n@@ -2584,7 +2593,9 @@ c_parser_enum_specifier (c_parser *parser)\n \t  else\n \t    enum_value = NULL_TREE;\n \t  enum_decl = build_enumerator (decl_loc, value_loc,\n-\t      \t\t\t\t&the_enum, enum_id, enum_value);\n+\t\t\t\t\t&the_enum, enum_id, enum_value);\n+\t  if (enum_attrs)\n+\t    decl_attributes (&TREE_PURPOSE (enum_decl), enum_attrs, 0);\n \t  TREE_CHAIN (enum_decl) = values;\n \t  values = enum_decl;\n \t  seen_comma = false;"}, {"sha": "4dd8ec65cd8e17c4276d4989e2b59dea2251b154", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -1,3 +1,16 @@\n+2015-05-22  Marek Polacek  <polacek@redhat.com>\n+\t    Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c/47043\n+\t* cp-tree.h (build_enumerator): Update declaration.\n+\t* decl.c (build_enumerator): Add attributes parameter.  Call\n+\tcplus_decl_attributes.\n+\t* init.c (constant_value_1): Pass tf_none to mark_used.\n+\t* parser.c (cp_parser_enumerator_definition): Parse attributes and\n+\tpass them down to build_enumerator.\n+\t* pt.c (tsubst_enum): Pass decl attributes to build_enumerator.\n+\t* semantics.c (finish_id_expression): Don't warn_deprecated_use here.\n+\n 2015-05-21  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/60943"}, {"sha": "91619e2cb3ca3b28c024c6780b8c1f4aed396ce3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -5400,7 +5400,7 @@ extern bool xref_basetypes\t\t\t(tree, tree);\n extern tree start_enum\t\t\t\t(tree, tree, tree, bool, bool *);\n extern void finish_enum_value_list\t\t(tree);\n extern void finish_enum\t\t\t\t(tree);\n-extern void build_enumerator\t\t\t(tree, tree, tree, location_t);\n+extern void build_enumerator\t\t\t(tree, tree, tree, tree, location_t);\n extern tree lookup_enumerator\t\t\t(tree, tree);\n extern bool start_preparsed_function\t\t(tree, tree, int);\n extern bool start_function\t\t\t(cp_decl_specifier_seq *,"}, {"sha": "5396994f7fe0a66d2c95883e896d3de4e59576ef", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -13057,11 +13057,12 @@ finish_enum (tree enumtype)\n \n /* Build and install a CONST_DECL for an enumeration constant of the\n    enumeration type ENUMTYPE whose NAME and VALUE (if any) are provided.\n-   LOC is the location of NAME.\n+   Apply ATTRIBUTES if available.  LOC is the location of NAME.\n    Assignment of sequential values by default is handled here.  */\n \n void\n-build_enumerator (tree name, tree value, tree enumtype, location_t loc)\n+build_enumerator (tree name, tree value, tree enumtype, tree attributes,\n+\t\t  location_t loc)\n {\n   tree decl;\n   tree context;\n@@ -13224,6 +13225,9 @@ incremented enumerator value is too large for %<long%>\");\n   TREE_READONLY (decl) = 1;\n   DECL_INITIAL (decl) = value;\n \n+  if (attributes)\n+    cplus_decl_attributes (&decl, attributes, 0);\n+\n   if (context && context == current_class_type && !SCOPED_ENUM_P (enumtype))\n     /* In something like `struct S { enum E { i = 7 }; };' we put `i'\n        on the TYPE_FIELDS list for `S'.  (That's so that you can say"}, {"sha": "30774070d3c487608f17cc260cc6f499616d50d9", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -2035,7 +2035,7 @@ constant_value_1 (tree decl, bool strict_p, bool return_aggregate_cst_ok_p)\n \t specialization, we must instantiate it here.  The\n \t initializer for the static data member is not processed\n \t until needed; we need it now.  */\n-      mark_used (decl);\n+      mark_used (decl, tf_none);\n       mark_rvalue_use (decl);\n       init = DECL_INITIAL (decl);\n       if (init == error_mark_node)"}, {"sha": "bc48c11cbc6c8a1fa84e045c21bb3ba3ccfe0325", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -16083,7 +16083,13 @@ cp_parser_enumerator_list (cp_parser* parser, tree type)\n      enumerator = constant-expression\n \n    enumerator:\n-     identifier  */\n+     identifier\n+\n+   GNU Extensions:\n+\n+   enumerator-definition:\n+     enumerator attributes [opt]\n+     enumerator attributes [opt] = constant-expression  */\n \n static void\n cp_parser_enumerator_definition (cp_parser* parser, tree type)\n@@ -16101,6 +16107,9 @@ cp_parser_enumerator_definition (cp_parser* parser, tree type)\n   if (identifier == error_mark_node)\n     return;\n \n+  /* Parse any specified attributes.  */\n+  tree attrs = cp_parser_attributes_opt (parser);\n+\n   /* If the next token is an '=', then there is an explicit value.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))\n     {\n@@ -16118,7 +16127,7 @@ cp_parser_enumerator_definition (cp_parser* parser, tree type)\n     value = error_mark_node;\n \n   /* Create the enumerator.  */\n-  build_enumerator (identifier, value, type, loc);\n+  build_enumerator (identifier, value, type, attrs, loc);\n }\n \n /* Parse a namespace-name."}, {"sha": "407ef7d7d0a63a465b9cc41677d5983fe439e535", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -20771,9 +20771,10 @@ tsubst_enum (tree tag, tree newtag, tree args)\n       /* Give this enumeration constant the correct access.  */\n       set_current_access_from_decl (decl);\n \n-      /* Actually build the enumerator itself.  */\n-      build_enumerator\n-\t(DECL_NAME (decl), value, newtag, DECL_SOURCE_LOCATION (decl));\n+      /* Actually build the enumerator itself.  Here we're assuming that\n+\t enumerators can't have dependent attributes.  */\n+      build_enumerator (DECL_NAME (decl), value, newtag,\n+\t\t\tDECL_ATTRIBUTES (decl), DECL_SOURCE_LOCATION (decl));\n     }\n \n   if (SCOPED_ENUM_P (newtag))"}, {"sha": "565941f0f5e6c9c4879790757362384dd121070c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -3652,11 +3652,6 @@ finish_id_expression (tree id_expression,\n \t}\n     }\n \n-  /* Handle references (c++/56130).  */\n-  tree t = REFERENCE_REF_P (decl) ? TREE_OPERAND (decl, 0) : decl;\n-  if (TREE_DEPRECATED (t))\n-    warn_deprecated_use (t, NULL_TREE);\n-\n   return decl;\n }\n "}, {"sha": "55391992a350870507420e83001dd0c8569cfbac", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 58, "deletions": 4, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -59,6 +59,7 @@ extensions, accepted by GCC in C90 mode and in C++.\n * Variable Attributes:: Specifying attributes of variables.\n * Type Attributes::     Specifying attributes of types.\n * Label Attributes::    Specifying attributes on labels.\n+* Enumerator Attributes:: Specifying attributes on enumerators.\n * Attribute Syntax::    Formal syntax for attributes.\n * Function Prototypes:: Prototype declarations and old-style definitions.\n * C++ Comments::        C++ comments are recognized.\n@@ -2175,6 +2176,7 @@ attribute syntax and placement.\n GCC also supports attributes on\n variable declarations (@pxref{Variable Attributes}),\n labels (@pxref{Label Attributes}),\n+enumerators (@pxref{Enumerator Attributes}),\n and types (@pxref{Type Attributes}).\n \n There is some overlap between the purposes of attributes and pragmas\n@@ -5041,8 +5043,9 @@ by an attribute specification inside double parentheses.  Some\n attributes are currently defined generically for variables.\n Other attributes are defined for variables on particular target\n systems.  Other attributes are available for functions\n-(@pxref{Function Attributes}), labels (@pxref{Label Attributes}) and for \n-types (@pxref{Type Attributes}).\n+(@pxref{Function Attributes}), labels (@pxref{Label Attributes}),\n+enumerators (@pxref{Enumerator Attributes}), and for types\n+(@pxref{Type Attributes}).\n Other front ends might define more attributes\n (@pxref{C++ Extensions,,Extensions to the C++ Language}).\n \n@@ -5837,7 +5840,8 @@ attributes of types.  Some type attributes apply only to @code{struct}\n and @code{union} types, while others can apply to any type defined\n via a @code{typedef} declaration.  Other attributes are defined for\n functions (@pxref{Function Attributes}), labels (@pxref{Label \n-Attributes}) and for variables (@pxref{Variable Attributes}).\n+Attributes}), enumerators (@pxref{Enumerator Attributes}), and for\n+variables (@pxref{Variable Attributes}).\n \n The @code{__attribute__} keyword is followed by an attribute specification\n inside double parentheses.  \n@@ -6300,7 +6304,8 @@ compilers to match the native Microsoft compiler.\n GCC allows attributes to be set on C labels.  @xref{Attribute Syntax}, for \n details of the exact syntax for using attributes.  Other attributes are \n available for functions (@pxref{Function Attributes}), variables \n-(@pxref{Variable Attributes}) and for types (@pxref{Type Attributes}).\n+(@pxref{Variable Attributes}), enumerators (@xref{Enumerator Attributes}),\n+and for types (@pxref{Type Attributes}).\n \n This example uses the @code{cold} label attribute to indicate the \n @code{ErrorHandling} branch is unlikely to be taken and that the\n@@ -6346,6 +6351,45 @@ with computed goto or @code{asm goto}.\n \n @end table\n \n+@node Enumerator Attributes\n+@section Enumerator Attributes\n+@cindex Enumerator Attributes\n+\n+GCC allows attributes to be set on enumerators.  @xref{Attribute Syntax}, for\n+details of the exact syntax for using attributes.  Other attributes are\n+available for functions (@pxref{Function Attributes}), variables\n+(@pxref{Variable Attributes}), labels (@xref{Label Attributes}),\n+and for types (@pxref{Type Attributes}).\n+\n+This example uses the @code{deprecated} enumerator attribute to indicate the\n+@code{oldval} enumerator is deprecated:\n+\n+@smallexample\n+enum E @{\n+  oldval __attribute__((deprecated)),\n+  newval\n+@};\n+\n+int\n+fn (void)\n+@{\n+  return oldval;\n+@}\n+@end smallexample\n+\n+@table @code\n+@item deprecated\n+@cindex @code{deprecated} enumerator attribute\n+The @code{deprecated} attribute results in a warning if the enumerator\n+is used anywhere in the source file.  This is useful when identifying\n+enumerators that are expected to be removed in a future version of a\n+program.  The warning also includes the location of the declaration\n+of the deprecated enumerator, to enable users to easily find further\n+information about why the enumerator is deprecated, or what they should\n+do instead.  Note that the warnings only occurs for uses.\n+\n+@end table\n+\n @node Attribute Syntax\n @section Attribute Syntax\n @cindex attribute syntax\n@@ -6371,6 +6415,8 @@ for details of the semantics of attributes applying to structure, union\n and enumerated types.\n @xref{Label Attributes}, for details of the semantics of attributes \n applying to labels.\n+@xref{Enumerator Attributes}, for details of the semantics of attributes\n+applying to enumerators.\n \n An @dfn{attribute specifier} is of the form\n @code{__attribute__ ((@var{attribute-list}))}.  An @dfn{attribute list}\n@@ -6428,6 +6474,14 @@ ambiguous, as it is permissible for a declaration, which could begin\n with an attribute list, to be labelled in C++.  Declarations cannot be\n labelled in C90 or C99, so the ambiguity does not arise there.\n \n+@subsubheading Enumerator Attributes\n+\n+In GNU C, an attribute specifier list may appear as part of an enumerator.\n+The attribute goes after the enumeration constant, before @code{=}, if\n+present.  The optional attribute in the enumerator appertains to the\n+enumeration constant.  It is not possible to place the attribute after\n+the constant expression, if present.\n+\n @subsubheading Type Attributes\n \n An attribute specifier list may appear as part of a @code{struct},"}, {"sha": "912dd1549f4300dfe9d43fc8d4b5ed639bbc5dbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -1,3 +1,11 @@\n+2015-05-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/47043\n+\t* c-c++-common/attributes-enum-1.c: New test.\n+\t* c-c++-common/attributes-enum-2.c: New test.\n+\t* g++.dg/cpp0x/attributes-enum-1.C: New test.\n+\t* g++.dg/cpp1y/attributes-enum-1.C: New test.\n+\n 2015-05-21  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* gcc.target/arm/simd/simd.exp: Skip all tests if no arm_neon_ok"}, {"sha": "cb5af5b9d05db6ecbb0c86ecf7544afaf231ae4a", "filename": "gcc/testsuite/c-c++-common/attributes-enum-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-enum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-enum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-enum-1.c?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -0,0 +1,22 @@\n+/* Test enumerators with attributes.  */\n+/* PR c/47043 */\n+/* { dg-do compile } */\n+\n+enum E {\n+  A __attribute__((deprecated)),\n+  B __attribute__((deprecated (\"foo\"))),\n+  C __attribute__((deprecated)) = 10,\n+  D __attribute__((deprecated (\"foo\"))) = 15,\n+  E\n+};\n+\n+int\n+f (int i)\n+{\n+  i += A; /* { dg-warning \".A. is deprecated\" } */\n+  i += B; /* { dg-warning \".B. is deprecated\" } */\n+  i += C; /* { dg-warning \".C. is deprecated\" } */\n+  i += D; /* { dg-warning \".D. is deprecated\" } */\n+  i += E;\n+  return i;\n+}"}, {"sha": "f143f15f6e8c088d0a5b03111c5422e7f5c4a695", "filename": "gcc/testsuite/c-c++-common/attributes-enum-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-enum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-enum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-enum-2.c?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -0,0 +1,14 @@\n+/* Test enumerators with attributes.  Test invalid uses.  */\n+/* PR c/47043 */\n+/* { dg-do compile } */\n+\n+enum E {\n+  A __attribute__((foo)),\t/* { dg-warning \"ignored\" } */\n+  B __attribute__((cold)),\t/* { dg-warning \"ignored\" } */\n+  C __attribute__((const)),\t/* { dg-warning \"ignored\" } */\n+  D __attribute__((unused)),\t/* { dg-warning \"ignored\" } */\n+  E __attribute__((flatten)),\t/* { dg-warning \"ignored\" } */\n+  F __attribute__((tm)),\t/* { dg-warning \"ignored\" } */\n+  G __attribute__((common)),\t/* { dg-warning \"ignored\" } */\n+  H __attribute__((volatile)),\t/* { dg-warning \"ignored\" } */\n+};"}, {"sha": "fd1b6f04b40803d04b56810f3ee299bfd4fab041", "filename": "gcc/testsuite/g++.dg/cpp0x/attributes-enum-1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattributes-enum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattributes-enum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattributes-enum-1.C?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -0,0 +1,20 @@\n+// PR c/47043\n+// { dg-do compile { target c++11 } }\n+\n+enum E {\n+  A [[gnu::deprecated]]\n+};\n+\n+enum class F {\n+  B [[gnu::deprecated]],\n+  C __attribute__ ((deprecated))\n+};\n+\n+int\n+f (int i)\n+{\n+  F f1 = F::B; // { dg-warning \".B. is deprecated\" }\n+  F f2 = F::C; // { dg-warning \".C. is deprecated\" }\n+  i += A; // { dg-warning \".A. is deprecated\" }\n+  return i;\n+}"}, {"sha": "3bd1ba1929d9719eabd46bae45eb8552c9ec69cc", "filename": "gcc/testsuite/g++.dg/cpp1y/attributes-enum-1.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fattributes-enum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c817a2457050649c2aadd8657091b2f6bbdaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fattributes-enum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fattributes-enum-1.C?ref=fd5c817a2457050649c2aadd8657091b2f6bbdaf", "patch": "@@ -0,0 +1,35 @@\n+// PR c/47043\n+// { dg-do compile { target c++14 } }\n+\n+class C\n+{\n+public:\n+  enum Foo\n+  {\n+    T,\n+    U [[deprecated(\"unused\")]],\n+    V\n+  };\n+};\n+\n+template<typename Tp>\n+  class D\n+  {\n+  public:\n+    enum Bar\n+    {\n+      X,\n+      Y [[deprecated(\"unused\")]],\n+      Z\n+    };\n+  };\n+\n+int\n+f (int i)\n+{\n+  auto j = C::U; // { dg-warning \".U. is deprecated\" }\n+\n+  auto k = D<int>::Y; // { dg-warning \".Y. is deprecated\" }\n+\n+  return i;\n+}"}]}