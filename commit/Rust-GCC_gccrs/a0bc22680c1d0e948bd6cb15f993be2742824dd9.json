{"sha": "a0bc22680c1d0e948bd6cb15f993be2742824dd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiYzIyNjgwYzFkMGU5NDhiZDZjYjE1Zjk5M2JlMjc0MjgyNGRkOQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2014-07-01T09:17:14Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2014-07-01T09:17:14Z"}, "message": "PR preprocessor/60723 - missing system-ness marks for macro tokens\n\nWhen a system macro is expanded in a non-system file during\nout-of-line preprocessing, it can happen that the preprocessor forgets\nto emit line markers to express the system-ness status of tokens that\ncome after the expansion of the macro.\n\nThat can lead to situations where the entire non-system file can be\nconsidered as being a system file and thus have its warnings be\ndiscarded during the compilation of the resulting preprocessed file.\n\nMy understanding is that this is due to the preprocessor not\nsystematically detecting (and reporting) the change in system-ness of\ntokens.\n\nAnd this is what this patch does.  Each time the system-ness of a\ngiven token is different from the previous token that was emitted by\nthe preprocessor, it emits a line marker for the sole purpose of\nmarking the new system-ness of the subsequent tokens to come.\n\nBootstrapped and tested on x86_64-unknown-linux-gnu against trunk.\n\ngcc/c-family/ChangeLog:\n\t* c-ppoutput.c (struct print::prev_was_system_token): New data\n\tmember.\n\t(init_pp_output): Initialize it.\n\t(maybe_print_line_1, maybe_print_line, print_line_1, print_line)\n\t(do_line_change): Return a flag saying if a line marker was\n\temitted or not.\n\t(scan_translation_unit): Detect if the system-ness of the token we\n\tare about to emit is different from the one of the previously\n\temitted token.  If so, emit a line marker.  Avoid emitting\n\tuseless adjacent line markers.\n\t(scan_translation_unit_directives_only): Adjust.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/cpp/syshdr{4,5}.{c,h}: New test files.\n\nSigned-off-by: Dodji Seketeli <dodji@redhat.com>\n\nFrom-SVN: r212194", "tree": {"sha": "1fde075dec58b3c71e072098b75141c6030eb699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fde075dec58b3c71e072098b75141c6030eb699"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0bc22680c1d0e948bd6cb15f993be2742824dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bc22680c1d0e948bd6cb15f993be2742824dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0bc22680c1d0e948bd6cb15f993be2742824dd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bc22680c1d0e948bd6cb15f993be2742824dd9/comments", "author": null, "committer": null, "parents": [{"sha": "52ec0ea334753fbe7a81c15c17636fb22a3c7d2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ec0ea334753fbe7a81c15c17636fb22a3c7d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ec0ea334753fbe7a81c15c17636fb22a3c7d2d"}], "stats": {"total": 148, "additions": 124, "deletions": 24}, "files": [{"sha": "049a5713b25e5989ac8a8373191a2f056b18ac73", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a0bc22680c1d0e948bd6cb15f993be2742824dd9", "patch": "@@ -1,3 +1,18 @@\n+2014-07-01  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR preprocessor/60723\n+\t* c-ppoutput.c (struct print::prev_was_system_token): New data\n+\tmember.\n+\t(init_pp_output): Initialize it.\n+\t(maybe_print_line_1, maybe_print_line, print_line_1, print_line)\n+\t(do_line_change): Return a flag saying if a line marker was\n+\temitted or not.\n+\t(scan_translation_unit): Detect if the system-ness of the token we\n+\tare about to emit is different from the one of the previously\n+\temitted token.  If so, emit a line marker.  Avoid emitting useless\n+\tadjacent line markers.\n+\t(scan_translation_unit_directives_only): Adjust.\n+\n 2014-07-01  Marek Polacek  <polacek@redhat.com>\n \n \t* c.opt (Wint-conversion): New option."}, {"sha": "618e1c94b6c42bb327788ce5c5cee482da369338", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 52, "deletions": 24, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=a0bc22680c1d0e948bd6cb15f993be2742824dd9", "patch": "@@ -36,6 +36,8 @@ static struct\n   unsigned char printed;\t/* Nonzero if something output at line.  */\n   bool first_time;\t\t/* pp_file_change hasn't been called yet.  */\n   const char *src_file;\t\t/* Current source file.  */\n+  bool prev_was_system_token;\t/* True if the previous token was a\n+\t\t\t\t   system token.*/\n } print;\n \n /* Defined and undefined macros being queued for output with -dU at\n@@ -58,11 +60,11 @@ static void account_for_newlines (const unsigned char *, size_t);\n static int dump_macro (cpp_reader *, cpp_hashnode *, void *);\n static void dump_queued_macros (cpp_reader *);\n \n-static void print_line_1 (source_location, const char*, FILE *);\n-static void print_line (source_location, const char *);\n-static void maybe_print_line_1 (source_location, FILE *);\n-static void maybe_print_line (source_location);\n-static void do_line_change (cpp_reader *, const cpp_token *,\n+static bool print_line_1 (source_location, const char*, FILE *);\n+static bool print_line (source_location, const char *);\n+static bool maybe_print_line_1 (source_location, FILE *);\n+static bool maybe_print_line (source_location);\n+static bool do_line_change (cpp_reader *, const cpp_token *,\n \t\t\t    source_location, int);\n \n /* Callback routines for the parser.   Most of these are active only\n@@ -156,6 +158,7 @@ init_pp_output (FILE *out_stream)\n   print.outf = out_stream;\n   print.first_time = 1;\n   print.src_file = \"\";\n+  print.prev_was_system_token = false;\n }\n \n /* Writes out the preprocessed file, handling spacing and paste\n@@ -168,6 +171,7 @@ scan_translation_unit (cpp_reader *pfile)\n     = cpp_get_options (parse_in)->lang != CLK_ASM\n       && !flag_no_line_commands;\n   bool in_pragma = false;\n+  bool line_marker_emitted = false;\n \n   print.source = NULL;\n   for (;;)\n@@ -200,7 +204,7 @@ scan_translation_unit (cpp_reader *pfile)\n \t      && do_line_adjustments\n \t      && !in_pragma)\n \t    {\n-\t      do_line_change (pfile, token, loc, false);\n+\t      line_marker_emitted = do_line_change (pfile, token, loc, false);\n \t      putc (' ', print.outf);\n \t    }\n \t  else if (print.source->flags & PREV_WHITE\n@@ -216,7 +220,7 @@ scan_translation_unit (cpp_reader *pfile)\n \t  if (src_line != print.src_line\n \t      && do_line_adjustments\n \t      && !in_pragma)\n-\t    do_line_change (pfile, token, loc, false);\n+\t    line_marker_emitted = do_line_change (pfile, token, loc, false);\n \t  putc (' ', print.outf);\n \t}\n \n@@ -228,7 +232,7 @@ scan_translation_unit (cpp_reader *pfile)\n \t  const char *space;\n \t  const char *name;\n \n-\t  maybe_print_line (token->src_loc);\n+\t  line_marker_emitted = maybe_print_line (token->src_loc);\n \t  fputs (\"#pragma \", print.outf);\n \t  c_pp_lookup_pragma (token->val.pragma, &space, &name);\n \t  if (space)\n@@ -248,9 +252,18 @@ scan_translation_unit (cpp_reader *pfile)\n \t  if (cpp_get_options (parse_in)->debug)\n \t      linemap_dump_location (line_table, token->src_loc,\n \t\t\t\t     print.outf);\n+\n+\t  if (!line_marker_emitted\n+\t      && print.prev_was_system_token != !!in_system_header_at(loc))\n+\t    /* The system-ness of this token is different from the one\n+\t       of the previous token.  Let's emit a line change to\n+\t       mark the new system-ness before we emit the token.  */\n+\t    line_marker_emitted = do_line_change (pfile, token, loc, false);\n \t  cpp_output_token (token, print.outf);\n+\t  line_marker_emitted = false;\n \t}\n \n+      print.prev_was_system_token = !!in_system_header_at(loc);\n       /* CPP_COMMENT tokens and raw-string literal tokens can\n \t have embedded new-line characters.  Rather than enumerating\n \t all the possible token types just check if token uses\n@@ -275,7 +288,7 @@ scan_translation_unit_directives_only (cpp_reader *pfile)\n   struct _cpp_dir_only_callbacks cb;\n \n   cb.print_lines = print_lines_directives_only;\n-  cb.maybe_print_line = maybe_print_line;\n+  cb.maybe_print_line = (void (*) (source_location)) maybe_print_line;\n \n   _cpp_preprocess_dir_only (pfile, &cb);\n }\n@@ -306,11 +319,13 @@ scan_translation_unit_trad (cpp_reader *pfile)\n \n /* If the token read on logical line LINE needs to be output on a\n    different line to the current one, output the required newlines or\n-   a line marker, and return 1.  Otherwise return 0.  */\n+   a line marker.  If a line marker was emitted, return TRUE otherwise\n+   return FALSE.  */\n \n-static void\n+static bool\n maybe_print_line_1 (source_location src_loc, FILE *stream)\n {\n+  bool emitted_line_marker = false;\n   int src_line = LOCATION_LINE (src_loc);\n   const char *src_file = LOCATION_FILE (src_loc);\n \n@@ -334,29 +349,34 @@ maybe_print_line_1 (source_location src_loc, FILE *stream)\n \t}\n     }\n   else\n-    print_line_1 (src_loc, \"\", stream);\n+    emitted_line_marker = print_line_1 (src_loc, \"\", stream);\n \n+  return emitted_line_marker;\n }\n \n /* If the token read on logical line LINE needs to be output on a\n    different line to the current one, output the required newlines or\n-   a line marker, and return 1.  Otherwise return 0.  */\n+   a line marker.  If a line marker was emitted, return TRUE otherwise\n+   return FALSE.  */\n \n-static void\n+static bool\n maybe_print_line (source_location src_loc)\n {\n   if (cpp_get_options (parse_in)->debug)\n     linemap_dump_location (line_table, src_loc,\n \t\t\t   print.outf);\n-  maybe_print_line_1 (src_loc, print.outf);\n+  return maybe_print_line_1 (src_loc, print.outf);\n }\n \n /* Output a line marker for logical line LINE.  Special flags are \"1\"\n-   or \"2\" indicating entering or leaving a file.  */\n+   or \"2\" indicating entering or leaving a file.  If the line marker\n+   was effectively emitted, return TRUE otherwise return FALSE.  */\n \n-static void\n+static bool\n print_line_1 (source_location src_loc, const char *special_flags, FILE *stream)\n {\n+  bool emitted_line_marker = false;\n+\n   /* End any previous line of text.  */\n   if (print.printed)\n     putc ('\\n', stream);\n@@ -391,33 +411,39 @@ print_line_1 (source_location src_loc, const char *special_flags, FILE *stream)\n \tfputs (\" 3\", stream);\n \n       putc ('\\n', stream);\n+      emitted_line_marker = true;\n     }\n+\n+  return emitted_line_marker;\n }\n \n /* Output a line marker for logical line LINE.  Special flags are \"1\"\n-   or \"2\" indicating entering or leaving a file.  */\n+   or \"2\" indicating entering or leaving a file.  Return TRUE if a\n+   line marker was effectively emitted, FALSE otherwise.  */\n \n-static void\n+static bool\n print_line (source_location src_loc, const char *special_flags)\n {\n     if (cpp_get_options (parse_in)->debug)\n       linemap_dump_location (line_table, src_loc,\n \t\t\t     print.outf);\n-    print_line_1 (src_loc, special_flags, print.outf);\n+    return print_line_1 (src_loc, special_flags, print.outf);\n }\n \n-/* Helper function for cb_line_change and scan_translation_unit.  */\n-static void\n+/* Helper function for cb_line_change and scan_translation_unit.\n+   Return TRUE if a line marker is emitted, FALSE otherwise.  */\n+static bool\n do_line_change (cpp_reader *pfile, const cpp_token *token,\n \t\tsource_location src_loc, int parsing_args)\n {\n+  bool emitted_line_marker = false;\n   if (define_queue || undef_queue)\n     dump_queued_macros (pfile);\n \n   if (token->type == CPP_EOF || parsing_args)\n-    return;\n+    return false;\n \n-  maybe_print_line (src_loc);\n+  emitted_line_marker = maybe_print_line (src_loc);\n   print.prev = 0;\n   print.source = 0;\n \n@@ -434,6 +460,8 @@ do_line_change (cpp_reader *pfile, const cpp_token *token,\n       while (-- spaces >= 0)\n \tputc (' ', print.outf);\n     }\n+\n+  return emitted_line_marker;\n }\n \n /* Called when a line of output is started.  TOKEN is the first token"}, {"sha": "8aa7bb25bc6b1f5e91bde6f1806ec87a8bf8bfcb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0bc22680c1d0e948bd6cb15f993be2742824dd9", "patch": "@@ -1,3 +1,8 @@\n+2014-07-01  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR preprocessor/60723\n+\t* gcc.dg/cpp/syshdr{4,5}.{c,h}: New test files.\n+\n 2014-07-01  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/Wint-conversion.c: New test."}, {"sha": "fe001d2ed0ea8234177e30b850e62179979e1693", "filename": "gcc/testsuite/gcc.dg/cpp/syshdr4.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.c?ref=a0bc22680c1d0e948bd6cb15f993be2742824dd9", "patch": "@@ -0,0 +1,24 @@\n+/* Contributed by Nicholas Ormrod */\n+/* Origin: PR preprocessor/60723 */\n+\n+/* This tests that multi-line macro callsites, which are defined\n+   in system headers and whose expansion contains a builtin followed\n+   by a non-builtin token, do not generate a line directive that\n+   mark the current file as being a system file, when performing\n+   non-integrated preprocessing. */\n+/* System files suppress div-by-zero warnings, so the presence of\n+   such indicates the lack of the bug.\n+\n+   { dg-do compile }\n+   { dg-options -no-integrated-cpp }  */\n+\n+#include \"syshdr4.h\"\n+FOO(\n+)\n+\n+int\n+foo()\n+{\n+  return 1 / 0; /* { dg-warning \"div-by-zero\" } */\n+  return 0;\n+}"}, {"sha": "c464f6e702a6ae84af3efac171920d916581a1d2", "filename": "gcc/testsuite/gcc.dg/cpp/syshdr4.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.h?ref=a0bc22680c1d0e948bd6cb15f993be2742824dd9", "patch": "@@ -0,0 +1,8 @@\n+/* Contributed by Nicholas Ormrod\n+   Origin: PR preprocessor/60723.\n+\n+   This file is to be included by the syshdr4.c file.  */\n+\n+#pragma GCC system_header\n+\n+#define FOO() int line = __LINE__ ;"}, {"sha": "42c62638d99b113c62e2d394b8e9126191234d53", "filename": "gcc/testsuite/gcc.dg/cpp/syshdr5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.c?ref=a0bc22680c1d0e948bd6cb15f993be2742824dd9", "patch": "@@ -0,0 +1,14 @@\n+/* Origin: PR preprocessor/60723\n+\n+   { dg-do compile }\n+   { dg-options -no-integrated-cpp }  */\n+\n+#include \"syshdr5.h\"\n+\n+int\n+main()\n+{\n+  FOO(1/0 /*  { dg-warning \"division by zero\" }  */\n+      );\n+  return 0;\n+}"}, {"sha": "300d6c36a0399720f17f28a2f7c9b240cd42a62c", "filename": "gcc/testsuite/gcc.dg/cpp/syshdr5.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bc22680c1d0e948bd6cb15f993be2742824dd9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.h?ref=a0bc22680c1d0e948bd6cb15f993be2742824dd9", "patch": "@@ -0,0 +1,6 @@\n+/* Origin: PR preprocessor/60723\n+\n+   This header file is to be included by the syshdr5.c file.  */\n+\n+#pragma GCC system_header\n+#define FOO(A)do {int line = __LINE__ ; A;} while(0)"}]}