{"sha": "4a0c3fde9315ade563b20cf441776364e26bf472", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEwYzNmZGU5MzE1YWRlNTYzYjIwY2Y0NDE3NzYzNjRlMjZiZjQ3Mg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-11-28T00:17:34Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-11-28T00:17:34Z"}, "message": "re PR rtl-optimization/55006 (aermod.f90 is miscompiled with '-m64 -O2 -funroll-loops' after revision 192526)\n\n\tPR rtl-optimization/55006\n\t* loop-unroll.c (struct iv_to_split): Add new 'orig_var' member.\n\t(analyze_iv_to_split_insn): Record it.\n\t(maybe_strip_eq_note_for_split_iv): New function to remove REG_EQUAL\n\tnotes that refer to IVs that are being split.\n\t(apply_opt_in_copies): Use maybe_strip_eq_note_for_split_iv.  Twice.\n\tUse FOR_BB_INSNS_SAFE.\n\nFrom-SVN: r193876", "tree": {"sha": "491c89308ebf3548a3b6ab5d864ded554afc2a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/491c89308ebf3548a3b6ab5d864ded554afc2a8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a0c3fde9315ade563b20cf441776364e26bf472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0c3fde9315ade563b20cf441776364e26bf472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a0c3fde9315ade563b20cf441776364e26bf472", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0c3fde9315ade563b20cf441776364e26bf472/comments", "author": null, "committer": null, "parents": [{"sha": "f633801699d5206fcc624053dcd807f792cfaa06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f633801699d5206fcc624053dcd807f792cfaa06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f633801699d5206fcc624053dcd807f792cfaa06"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "8fde718e02e0fa51d995050e61df67f3bee56e49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0c3fde9315ade563b20cf441776364e26bf472/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0c3fde9315ade563b20cf441776364e26bf472/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a0c3fde9315ade563b20cf441776364e26bf472", "patch": "@@ -1,3 +1,13 @@\n+2012-11-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR rtl-optimization/55006\n+\t* loop-unroll.c (struct iv_to_split): Add new 'orig_var' member.\n+\t(analyze_iv_to_split_insn): Record it.\n+\t(maybe_strip_eq_note_for_split_iv): New function to remove REG_EQUAL\n+\tnotes that refer to IVs that are being split.\n+\t(apply_opt_in_copies): Use maybe_strip_eq_note_for_split_iv.  Twice.\n+\tUse FOR_BB_INSNS_SAFE.\n+\n 2012-11-27  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* rtl.h (debug_bb_n_slim, debug_bb_slim, debug_insn_slim): Remove"}, {"sha": "de319c4f1d73cf29296f5284d5703ab423d777a9", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0c3fde9315ade563b20cf441776364e26bf472/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0c3fde9315ade563b20cf441776364e26bf472/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=4a0c3fde9315ade563b20cf441776364e26bf472", "patch": "@@ -74,6 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n struct iv_to_split\n {\n   rtx insn;\t\t/* The insn in that the induction variable occurs.  */\n+  rtx orig_var;\t\t/* The variable (register) for the IV before split.  */\n   rtx base_var;\t\t/* The variable on that the values in the further\n \t\t\t   iterations are based.  */\n   rtx step;\t\t/* Step of the induction variable.  */\n@@ -1833,6 +1834,7 @@ analyze_iv_to_split_insn (rtx insn)\n   /* Record the insn to split.  */\n   ivts = XNEW (struct iv_to_split);\n   ivts->insn = insn;\n+  ivts->orig_var = dest;\n   ivts->base_var = NULL_RTX;\n   ivts->step = iv.step;\n   ivts->next = NULL;\n@@ -2253,6 +2255,32 @@ combine_var_copies_in_loop_exit (struct var_to_expand *ve, basic_block place)\n   emit_insn_after (seq, insn);\n }\n \n+/* Strip away REG_EQUAL notes for IVs we're splitting.\n+\n+   Updating REG_EQUAL notes for IVs we split is tricky: We\n+   cannot tell until after unrolling, DF-rescanning, and liveness\n+   updating, whether an EQ_USE is reached by the split IV while\n+   the IV reg is still live.  See PR55006.\n+\n+   ??? We cannot use remove_reg_equal_equiv_notes_for_regno,\n+   because RTL loop-iv requires us to defer rescanning insns and\n+   any notes attached to them.  So resort to old techniques...  */\n+\n+static void\n+maybe_strip_eq_note_for_split_iv (struct opt_info *opt_info, rtx insn)\n+{\n+  struct iv_to_split *ivts;\n+  rtx note = find_reg_equal_equiv_note (insn);\n+  if (! note)\n+    return;\n+  for (ivts = opt_info->iv_to_split_head; ivts; ivts = ivts->next)\n+    if (reg_mentioned_p (ivts->orig_var, note))\n+      {\n+\tremove_note (insn, note);\n+\treturn;\n+      }\n+}\n+\n /* Apply loop optimizations in loop copies using the\n    data which gathered during the unrolling.  Structure\n    OPT_INFO record that data.\n@@ -2293,9 +2321,8 @@ apply_opt_in_copies (struct opt_info *opt_info,\n \t\t\t\t\tunrolling);\n       bb->aux = 0;\n       orig_insn = BB_HEAD (orig_bb);\n-      for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb)); insn = next)\n+      FOR_BB_INSNS_SAFE (bb, insn, next)\n         {\n-          next = NEXT_INSN (insn);\n \t  if (!INSN_P (insn)\n \t      || (DEBUG_INSN_P (insn)\n \t\t  && TREE_CODE (INSN_VAR_LOCATION_DECL (insn)) == LABEL_DECL))\n@@ -2313,6 +2340,8 @@ apply_opt_in_copies (struct opt_info *opt_info,\n           /* Apply splitting iv optimization.  */\n           if (opt_info->insns_to_split)\n             {\n+\t      maybe_strip_eq_note_for_split_iv (opt_info, insn);\n+\n               ivts = (struct iv_to_split *)\n \t\thtab_find (opt_info->insns_to_split, &ivts_templ);\n \n@@ -2378,6 +2407,8 @@ apply_opt_in_copies (struct opt_info *opt_info,\n           ivts_templ.insn = orig_insn;\n           if (opt_info->insns_to_split)\n             {\n+\t      maybe_strip_eq_note_for_split_iv (opt_info, orig_insn);\n+\n               ivts = (struct iv_to_split *)\n \t\thtab_find (opt_info->insns_to_split, &ivts_templ);\n               if (ivts)"}]}