{"sha": "73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2NDdkNzUxOTlhOWU1YzhhMGUyZTA0OWQxZjcwYjg2ZDQzYzhmNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-13T05:05:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-13T05:05:21Z"}, "message": "typeck.c (build_array_ref): Take complain parm.\n\n\t* typeck.c (build_array_ref): Take complain parm.\n\t* cp-tree.h: Add it to prototype.\n\t* call.c (build_new_op): Pass it.\n\t* class.c (build_vtbl_ref): Pass it.\n\t* decl2.c (grok_array_decl): Pass it.\n\nFrom-SVN: r159351", "tree": {"sha": "ae6e098ef30e5cb2e485e6f85c2988a71cb36c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae6e098ef30e5cb2e485e6f85c2988a71cb36c4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5116acc6fefb0a16d644defe9322a7fcee768c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5116acc6fefb0a16d644defe9322a7fcee768c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5116acc6fefb0a16d644defe9322a7fcee768c8c"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "42eb59d5c93b8fd48f09aeda60a69761869b6dae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "patch": "@@ -1,5 +1,11 @@\n 2010-05-12  Jason Merrill  <jason@redhat.com>\n \n+\t* typeck.c (build_array_ref): Take complain parm.\n+\t* cp-tree.h: Add it to prototype.\n+\t* call.c (build_new_op): Pass it.\n+\t* class.c (build_vtbl_ref): Pass it.\n+\t* decl2.c (grok_array_decl): Pass it.\n+\n \tPR bootstrap/44048\n \tPR target/44099\n \t* cp-tree.def (NULLPTR_TYPE): Remove."}, {"sha": "5f8aeeaef6c55e73e05fe8345db2254ad60057e7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "patch": "@@ -4517,7 +4517,7 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n       return cp_build_unary_op (code, arg1, candidates != 0, complain);\n \n     case ARRAY_REF:\n-      return build_array_ref (input_location, arg1, arg2);\n+      return build_array_ref (input_location, arg1, arg2, complain);\n \n     case MEMBER_REF:\n       return build_m_component_ref (cp_build_indirect_ref (arg1, RO_NULL, "}, {"sha": "e22ef079440299249d111c6ae458824dd4092e1d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "patch": "@@ -629,7 +629,7 @@ build_vtbl_ref_1 (tree instance, tree idx)\n   if (!vtbl)\n     vtbl = build_vfield_ref (instance, basetype);\n \n-  aref = build_array_ref (input_location, vtbl, idx);\n+  aref = build_array_ref (input_location, vtbl, idx, tf_warning_or_error);\n   TREE_CONSTANT (aref) |= TREE_CONSTANT (vtbl) && TREE_CONSTANT (idx);\n \n   return aref;"}, {"sha": "a9dc616d82941a4b0f83f4153a33b140393bae97", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "patch": "@@ -5365,7 +5365,8 @@ extern tree build_x_indirect_ref\t\t(tree, ref_operator,\n                                                  tsubst_flags_t);\n extern tree cp_build_indirect_ref\t\t(tree, ref_operator,\n                                                  tsubst_flags_t);\n-extern tree build_array_ref\t\t\t(location_t, tree, tree);\n+extern tree build_array_ref\t\t\t(location_t, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree get_member_function_from_ptrfunc\t(tree *, tree);\n extern tree cp_build_function_call              (tree, tree, tsubst_flags_t);\n extern tree cp_build_function_call_vec\t\t(tree, VEC(tree,gc) **,"}, {"sha": "ae7c2ab4704b0adf41b041caf461b8fc0e2bfe28", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "patch": "@@ -399,7 +399,8 @@ grok_array_decl (tree array_expr, tree index_exp)\n       if (array_expr == error_mark_node || index_exp == error_mark_node)\n \terror (\"ambiguous conversion for array subscript\");\n \n-      expr = build_array_ref (input_location, array_expr, index_exp);\n+      expr = build_array_ref (input_location, array_expr, index_exp,\n+\t\t\t      tf_warning_or_error);\n     }\n   if (processing_template_decl && expr != error_mark_node)\n     return build_min_non_dep (ARRAY_REF, expr, orig_array_expr, orig_index_exp,"}, {"sha": "91aaafe913582cefbe0928b35708bb803ec3f36d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "patch": "@@ -2860,13 +2860,15 @@ cp_build_indirect_ref (tree ptr, ref_operator errorstring,\n    LOC is the location to use in building the array reference.  */\n \n tree\n-build_array_ref (location_t loc, tree array, tree idx)\n+build_array_ref (location_t loc, tree array, tree idx,\n+\t\t tsubst_flags_t complain)\n {\n   tree ret;\n \n   if (idx == 0)\n     {\n-      error_at (loc, \"subscript missing in array reference\");\n+      if (complain & tf_error)\n+\terror_at (loc, \"subscript missing in array reference\");\n       return error_mark_node;\n     }\n \n@@ -2880,7 +2882,8 @@ build_array_ref (location_t loc, tree array, tree idx)\n     {\n     case COMPOUND_EXPR:\n       {\n-\ttree value = build_array_ref (loc, TREE_OPERAND (array, 1), idx);\n+\ttree value = build_array_ref (loc, TREE_OPERAND (array, 1), idx,\n+\t\t\t\t      complain);\n \tret = build2 (COMPOUND_EXPR, TREE_TYPE (value),\n \t\t      TREE_OPERAND (array, 0), value);\n \tSET_EXPR_LOCATION (ret, loc);\n@@ -2890,8 +2893,8 @@ build_array_ref (location_t loc, tree array, tree idx)\n     case COND_EXPR:\n       ret = build_conditional_expr\n \t      (TREE_OPERAND (array, 0),\n-\t       build_array_ref (loc, TREE_OPERAND (array, 1), idx),\n-\t       build_array_ref (loc, TREE_OPERAND (array, 2), idx),\n+\t       build_array_ref (loc, TREE_OPERAND (array, 1), idx, complain),\n+\t       build_array_ref (loc, TREE_OPERAND (array, 2), idx, complain),\n \t       tf_warning_or_error);\n       protected_set_expr_location (ret, loc);\n       return ret;\n@@ -2908,7 +2911,8 @@ build_array_ref (location_t loc, tree array, tree idx)\n \n       if (!INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (TREE_TYPE (idx)))\n \t{\n-\t  error_at (loc, \"array subscript is not an integer\");\n+\t  if (complain & tf_error)\n+\t    error_at (loc, \"array subscript is not an integer\");\n \t  return error_mark_node;\n \t}\n \n@@ -2944,7 +2948,7 @@ build_array_ref (location_t loc, tree array, tree idx)\n \t    return error_mark_node;\n \t}\n \n-      if (!lvalue_p (array))\n+      if (!lvalue_p (array) && (complain & tf_error))\n \tpedwarn (loc, OPT_pedantic, \n \t         \"ISO C++ forbids subscripting non-lvalue array\");\n \n@@ -2956,7 +2960,8 @@ build_array_ref (location_t loc, tree array, tree idx)\n \t  tree foo = array;\n \t  while (TREE_CODE (foo) == COMPONENT_REF)\n \t    foo = TREE_OPERAND (foo, 0);\n-\t  if (TREE_CODE (foo) == VAR_DECL && DECL_REGISTER (foo))\n+\t  if (TREE_CODE (foo) == VAR_DECL && DECL_REGISTER (foo)\n+\t      && (complain & tf_warning))\n \t    warning_at (loc, OPT_Wextra,\n \t\t\t\"subscripting array declared %<register%>\");\n \t}\n@@ -2993,22 +2998,24 @@ build_array_ref (location_t loc, tree array, tree idx)\n \n     if (TREE_CODE (TREE_TYPE (ar)) != POINTER_TYPE)\n       {\n-\terror_at (loc, \"subscripted value is neither array nor pointer\");\n+\tif (complain & tf_error)\n+\t  error_at (loc, \"subscripted value is neither array nor pointer\");\n \treturn error_mark_node;\n       }\n     if (TREE_CODE (TREE_TYPE (ind)) != INTEGER_TYPE)\n       {\n-\terror_at (loc, \"array subscript is not an integer\");\n+\tif (complain & tf_error)\n+\t  error_at (loc, \"array subscript is not an integer\");\n \treturn error_mark_node;\n       }\n \n     warn_array_subscript_with_type_char (idx);\n \n     ret = cp_build_indirect_ref (cp_build_binary_op (input_location,\n \t\t\t\t\t\t     PLUS_EXPR, ar, ind,\n-\t\t\t\t\t\t     tf_warning_or_error),\n+\t\t\t\t\t\t     complain),\n                                  RO_ARRAY_INDEXING,\n-                                 tf_warning_or_error);\n+                                 complain);\n     protected_set_expr_location (ret, loc);\n     return ret;\n   }"}, {"sha": "e62336b29b2c2d2b6bfcbb5fe7c6a91d5a9a65aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "patch": "@@ -1,3 +1,7 @@\n+2010-05-12  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/sfinae1.C: New.\n+\n 2010-05-12  Sriraman Tallam  <tmsriram@google.com>\n \n \t* gcc.target/i386/zee.c: New file."}, {"sha": "292d8ae04b00bf00fb99924f37590fac6e051403", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73647d75199a9e5c8a0e2e049d1f70b86d43c8f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae1.C?ref=73647d75199a9e5c8a0e2e049d1f70b86d43c8f4", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+template< typename T_VECTOR >\n+void f(const T_VECTOR &a, decltype(a[0]) t = 0);\n+template< typename T >\n+void f(const T &a, decltype(a*1) t = 0);\n+\n+int main() {\n+  int c;\n+  f(c);\n+}"}]}