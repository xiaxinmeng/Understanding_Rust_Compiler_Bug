{"sha": "6ad1c1027628f094260037536f6b6fcdb63b5add", "node_id": "C_kwDOANBUbNoAKDZhZDFjMTAyNzYyOGYwOTQyNjAwMzc1MzZmNmI2ZmNkYjYzYjVhZGQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-08T17:41:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-08T17:41:21Z"}, "message": "vect-patterns: Fix up vect_widened_op_tree [PR108692]\n\nThe following testcase is miscompiled on aarch64-linux since r11-5160.\nGiven\n  <bb 3> [local count: 955630225]:\n  # i_22 = PHI <i_20(6), 0(5)>\n  # r_23 = PHI <r_19(6), 0(5)>\n...\n  a.0_5 = (unsigned char) a_15;\n  _6 = (int) a.0_5;\n  b.1_7 = (unsigned char) b_17;\n  _8 = (int) b.1_7;\n  c_18 = _6 - _8;\n  _9 = ABS_EXPR <c_18>;\n  r_19 = _9 + r_23;\n...\nwhere SSA_NAMEs 15/17 have signed char, 5/7 unsigned char and rest is int\nwe first pattern recognize c_18 as\npatt_34 = (a.0_5) w- (b.1_7);\nwhich is still correct, 5/7 are unsigned char subtracted in wider type,\nbut then vect_recog_sad_pattern turns it into\nSAD_EXPR <a_15, b_17, r_23>\nwhich is incorrect, because 15/17 are signed char and so it is\nsum of absolute signed differences rather than unsigned sum of\nabsolute unsigned differences.\nThe reason why this happens is that vect_recog_sad_pattern calls\nvect_widened_op_tree with MINUS_EXPR, WIDEN_MINUS_EXPR on the\npatt_34 = (a.0_5) w- (b.1_7); statement's vinfo and vect_widened_op_tree\ncalls vect_look_through_possible_promotion on the operands of the\nWIDEN_MINUS_EXPR, which looks through the further casts.\nvect_look_through_possible_promotion has careful code to stop when there\nwould be nested casts that need to be preserved, but the problem here\nis that the WIDEN_*_EXPR operation itself has an implicit cast on the\noperands already - in this case of WIDEN_MINUS_EXPR the unsigned char\n5/7 SSA_NAMEs are widened to unsigned short before the subtraction,\nand vect_look_through_possible_promotion obviously isn't told about that.\n\nNow, I think when we see those WIDEN_{MULT,MINUS,PLUS}_EXPR codes, we had\nto look through possible promotions already when creating those and so\nvect_look_through_possible_promotion again isn't really needed, all we need\nto do is arrange what that function will do if the operand isn't result\nof any cast.  Other option would be let vect_look_through_possible_promotion\nknow about the implicit promotion from the WIDEN_*_EXPR, but I'm afraid\nthat would be much harder.\n\n2023-02-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108692\n\t* tree-vect-patterns.cc (vect_widened_op_tree): If rhs_code is\n\twidened_code which is different from code, don't call\n\tvect_look_through_possible_promotion but instead just check op is\n\tSSA_NAME with integral type for which vect_is_simple_use is true\n\tand call set_op on this_unprom.\n\n\t* gcc.dg/pr108692.c: New test.", "tree": {"sha": "7d80dfa11b4b9e29f2968858e34b61df7e272e24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d80dfa11b4b9e29f2968858e34b61df7e272e24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ad1c1027628f094260037536f6b6fcdb63b5add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad1c1027628f094260037536f6b6fcdb63b5add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad1c1027628f094260037536f6b6fcdb63b5add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad1c1027628f094260037536f6b6fcdb63b5add/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d2645883936093f0fdb885d53cca67cb193adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d2645883936093f0fdb885d53cca67cb193adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d2645883936093f0fdb885d53cca67cb193adf"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "fc25bf54e45d929295b0ccdaf4c3823697ad7fb9", "filename": "gcc/testsuite/gcc.dg/pr108692.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad1c1027628f094260037536f6b6fcdb63b5add/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108692.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad1c1027628f094260037536f6b6fcdb63b5add/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108692.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108692.c?ref=6ad1c1027628f094260037536f6b6fcdb63b5add", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/108692 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+__attribute__((noipa)) int\n+foo (signed char *x, signed char *y, int n)\n+{\n+  int i, r = 0;\n+  signed char a, b;\n+  for (i = 0; i < n; i++)\n+    {\n+      a = x[i];\n+      b = y[i];\n+      int c = (unsigned char) a - (unsigned char) b;\n+      r = r + (c < 0 ? -c : c);\n+    }\n+  return r;\n+}\n+\n+int\n+main ()\n+{\n+  signed char x[64] = {}, y[64] = {};\n+  if (__CHAR_BIT__ != 8 || __SIZEOF_INT__ != 4)\n+    return 0;\n+  x[32] = -128;\n+  y[32] = 1;\n+  if (foo (x, y, 64) != 127)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "cefe331620f7166fa478de4bb3b66723206ec182", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad1c1027628f094260037536f6b6fcdb63b5add/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad1c1027628f094260037536f6b6fcdb63b5add/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=6ad1c1027628f094260037536f6b6fcdb63b5add", "patch": "@@ -601,7 +601,25 @@ vect_widened_op_tree (vec_info *vinfo, stmt_vec_info stmt_info, tree_code code,\n \t  if (shift_p && i == 1)\n \t    return 0;\n \n-\t  if (!vect_look_through_possible_promotion (vinfo, op, this_unprom))\n+\t  if (rhs_code != code)\n+\t    {\n+\t      /* If rhs_code is widened_code, don't look through further\n+\t\t possible promotions, there is a promotion already embedded\n+\t\t in the WIDEN_*_EXPR.  */\n+\t      if (TREE_CODE (op) != SSA_NAME\n+\t\t  || !INTEGRAL_TYPE_P (TREE_TYPE (op)))\n+\t\treturn 0;\n+\n+\t      stmt_vec_info def_stmt_info;\n+\t      gimple *def_stmt;\n+\t      vect_def_type dt;\n+\t      if (!vect_is_simple_use (op, vinfo, &dt, &def_stmt_info,\n+\t\t\t\t       &def_stmt))\n+\t\treturn 0;\n+\t      this_unprom->set_op (op, dt, NULL);\n+\t    }\n+\t  else if (!vect_look_through_possible_promotion (vinfo, op,\n+\t\t\t\t\t\t\t  this_unprom))\n \t    return 0;\n \n \t  if (TYPE_PRECISION (this_unprom->type) == TYPE_PRECISION (type))"}]}