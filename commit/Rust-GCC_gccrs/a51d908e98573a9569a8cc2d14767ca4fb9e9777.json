{"sha": "a51d908e98573a9569a8cc2d14767ca4fb9e9777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxZDkwOGU5ODU3M2E5NTY5YThjYzJkMTQ3NjdjYTRmYjllOTc3Nw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-07-10T18:44:34Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-10T18:44:34Z"}, "message": "Makefile.in (toplev.o, [...]): Depend on debug.h, wrap long lines.\n\n\t* Makefile.in (toplev.o, sdbout.o, dbxout.o, dwarfout.o,\n\tdwarf2out.o): Depend on debug.h, wrap long lines.\n\t* dbxout.c: Include debug.h.\n\t(dbx_debug_hooks): New.\n\t(dbxout_init): Make static, take just 2 args.\n\t(dbxout_finish): Make static.\n\t* dbxout.h (dbxout_init, dbxout_finish): Delete.\n\t* debug.c: New file.\n\t* debug.h: New file.\n\t* dwarf2out.c: Include debug.h.\n\t(dwarf2_debug_hooks): New.\n\t(dwarf2out_init): Make static.\n\t(dwarf2out_finish): Make static, take 2 args.\n\t* dwarf2out.h (dwarf2out_init, dwarf2out_finish): Delete.\n\t* dwarfout.c: Include debug.h.\n\t(dwarf_debug_hooks): New.\n\t(dwarfout_init): Make static.\n\t(dwarfout_finish): Make static, take 2 args.\n\t* dwarfout.h (dwarfout_init, dwarfout_finish): Delete.\n\t* sdbout.c: Include debug.h.\n\t(sdb_debug_hooks): New.\n\t(sdbout_init): Make static, take 2 args.\n\t* sdbout.h (sdbout_init): Delete.\n\t* toplev.c: Include debug.h.\n\t(debug_hooks): New.\n\t(compile_file): Set deubg_hooks based on command line options.\n\tUse the hooks unconditionally rather than conditional compilation.\n\nFrom-SVN: r43908", "tree": {"sha": "bf9ce8c7e5bc03d0da6a7ffad30060744e0c393f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf9ce8c7e5bc03d0da6a7ffad30060744e0c393f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51d908e98573a9569a8cc2d14767ca4fb9e9777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51d908e98573a9569a8cc2d14767ca4fb9e9777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51d908e98573a9569a8cc2d14767ca4fb9e9777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51d908e98573a9569a8cc2d14767ca4fb9e9777/comments", "author": null, "committer": null, "parents": [{"sha": "baed53ac34be7516b226afc7ffd033e4aef3c67e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baed53ac34be7516b226afc7ffd033e4aef3c67e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baed53ac34be7516b226afc7ffd033e4aef3c67e"}], "stats": {"total": 274, "additions": 209, "deletions": 65}, "files": [{"sha": "5379265a7a4cf6e11be66394d06852850c149d4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -1,3 +1,33 @@\n+2001-07-10  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (toplev.o, sdbout.o, dbxout.o, dwarfout.o,\n+\tdwarf2out.o): Depend on debug.h, wrap long lines.\n+\t* dbxout.c: Include debug.h.\n+\t(dbx_debug_hooks): New.\n+\t(dbxout_init): Make static, take just 2 args.\n+\t(dbxout_finish): Make static.\n+\t* dbxout.h (dbxout_init, dbxout_finish): Delete.\n+\t* debug.c: New file.\n+\t* debug.h: New file.\n+\t* dwarf2out.c: Include debug.h.\n+\t(dwarf2_debug_hooks): New.\n+\t(dwarf2out_init): Make static.\n+\t(dwarf2out_finish): Make static, take 2 args.\n+\t* dwarf2out.h (dwarf2out_init, dwarf2out_finish): Delete.\n+\t* dwarfout.c: Include debug.h.\n+\t(dwarf_debug_hooks): New.\n+\t(dwarfout_init): Make static.\n+\t(dwarfout_finish): Make static, take 2 args.\n+\t* dwarfout.h (dwarfout_init, dwarfout_finish): Delete.\n+\t* sdbout.c: Include debug.h.\n+\t(sdb_debug_hooks): New.\n+\t(sdbout_init): Make static, take 2 args.\n+\t* sdbout.h (sdbout_init): Delete.\n+\t* toplev.c: Include debug.h.\n+\t(debug_hooks): New.\n+\t(compile_file): Set deubg_hooks based on command line options.\n+\tUse the hooks unconditionally rather than conditional compilation.\n+\n Tue Jul 10 09:04:45 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* ssa-ccp.c (first_phi_node): Remove.  Replace uses with calls to"}, {"sha": "9bd5dc8089c41e0b604f3ce88b934d122b623f6e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -734,7 +734,7 @@ C_OBJS = c-parse.o c-lang.o $(C_AND_OBJC_OBJS)\n \n OBJS =\t\t\t\t\t\t\t\t\t\\\n  alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o\t\t\\\n- combine.o conflict.o convert.o cse.o cselib.o dbxout.o \t\t\\\n+ combine.o conflict.o convert.o cse.o cselib.o dbxout.o debug.o\t\t\\\n  dependence.o df.o diagnostic.o doloop.o dominance.o dwarf2asm.o\t\\\n  dwarf2out.o dwarfout.o emit-rtl.o except.o explow.o expmed.o expr.o\t\\\n  final.o flow.o fold-const.o function.o gcse.o genrtl.o ggc-common.o\t\\\n@@ -1339,7 +1339,7 @@ diagnostic.o : diagnostic.c diagnostic.h diagnostic.def \\\n    $(GGC_H) input.h $(INSN_ATTR_H) insn-config.h toplev.h intl.h\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n    flags.h input.h $(INSN_ATTR_H) xcoffout.h output.h diagnostic.h \\\n-   insn-config.h intl.h $(RECOG_H) Makefile toplev.h dwarfout.h \\\n+   debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h dwarfout.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n    ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h\n@@ -1391,17 +1391,19 @@ explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h  \\\n    insn-config.h $(EXPR_H) $(RECOG_H) reload.h \\\n    toplev.h $(GGC_H) real.h $(TM_P_H) except.h\n-dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h $(REGS_H) \\\n-   insn-config.h reload.h gstab.h xcoffout.h output.h dbxout.h toplev.h \\\n-   $(TM_P_H)\n-sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h except.h \\\n+dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n+    $(REGS_H) debug.h $(TM_P_H) \\\n+   insn-config.h reload.h gstab.h xcoffout.h output.h dbxout.h toplev.h\n+debug.o : debug.c $(CONFIG_H) $(SYSTEM_H)\n+sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n    function.h $(EXPR_H) output.h hard-reg-set.h $(REGS_H) real.h \\\n    insn-config.h $(OBSTACK_H) xcoffout.h c-pragma.h ggc.h \\\n-   sdbout.h toplev.h $(TM_P_H)\n+   sdbout.h toplev.h $(TM_P_H) except.h debug.h\n dwarfout.o : dwarfout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf.h \\\n-   flags.h insn-config.h reload.h output.h toplev.h dwarfout.h $(TM_P_H)\n+   flags.h insn-config.h reload.h output.h toplev.h dwarfout.h $(TM_P_H) \\\n+   debug.h\n dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf2.h \\\n-   flags.h insn-config.h reload.h output.h diagnostic.h \\\n+   debug.h flags.h insn-config.h reload.h output.h diagnostic.h \\\n    hard-reg-set.h $(REGS_H) $(EXPR_H) toplev.h dwarf2out.h varray.h \\\n    $(GGC_H) except.h dwarf2asm.h $(TM_P_H)\n dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) flags.h $(RTL_H) $(TREE_H) \\"}, {"sha": "0dd135ba0dec8144ec840b526eefb37fa0e9f670", "filename": "gcc/dbxout.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -82,6 +82,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"ggc.h\"\n+#include \"debug.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\n@@ -283,6 +284,8 @@ static int current_sym_nchars;\n #define CONTIN do { } while (0)\n #endif\n \n+static void dbxout_init\t\t\tPARAMS ((FILE *, const char *));\n+static void dbxout_finish\t\tPARAMS ((FILE *, const char *));\n #if defined(ASM_OUTPUT_SECTION_NAME)\n static void dbxout_function_end\t\tPARAMS ((void));\n #endif\n@@ -306,6 +309,13 @@ static void dbxout_finish_symbol\tPARAMS ((tree));\n static void dbxout_block\t\tPARAMS ((tree, int, tree));\n static void dbxout_really_begin_function PARAMS ((tree));\n \f\n+/* The target debug structure.  */\n+struct gcc_debug_hooks dbx_debug_hooks =\n+{\n+  dbxout_init,\n+  dbxout_finish\n+};\n+\f\n #if defined(ASM_OUTPUT_SECTION_NAME)\n static void\n dbxout_function_end ()\n@@ -332,13 +342,13 @@ dbxout_function_end ()\n /* At the beginning of compilation, start writing the symbol table.\n    Initialize `typevec' and output the standard data types of C.  */\n \n-void\n-dbxout_init (asm_file, input_file_name, syms)\n+static void\n+dbxout_init (asm_file, input_file_name)\n      FILE *asm_file;\n      const char *input_file_name;\n-     tree syms;\n {\n   char ltext_label_name[100];\n+  tree syms = getdecls ();\n \n   asmfile = asm_file;\n \n@@ -535,7 +545,7 @@ dbxout_source_line (file, filename, lineno)\n    Unless you define DBX_OUTPUT_MAIN_SOURCE_FILE_END, the default is\n    to do nothing.  */\n \n-void\n+static void\n dbxout_finish (file, filename)\n      FILE *file ATTRIBUTE_UNUSED;\n      const char *filename ATTRIBUTE_UNUSED;"}, {"sha": "a42a261951b9b2611a29668f7fada4de44dd6450", "filename": "gcc/dbxout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdbxout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdbxout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.h?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -18,9 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dbxout_init \t\tPARAMS ((FILE *, const char *, tree));\n-extern void dbxout_finish\t\tPARAMS ((FILE *, const char *));\n-\n extern void dbxout_start_new_source_file \tPARAMS ((const char *));\n extern void dbxout_resume_previous_source_file\tPARAMS ((void));\n "}, {"sha": "9d6e880a037e38ebb92f19c8dcaa12bf73e663d7", "filename": "gcc/debug.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -0,0 +1,37 @@\n+/* Do-nothing debug hooks for GCC.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"debug.h\"\n+\n+/* The do-nothing debug hooks.  */\n+struct gcc_debug_hooks do_nothing_debug_hooks =\n+{\n+  debug_nothing_init_finish,\n+  debug_nothing_init_finish\n+};\n+\n+/* This file contains implementations of each debug hook that do\n+   nothing.  */\n+\n+void\n+debug_nothing_init_finish (file, main_filename)\n+     FILE *file ATTRIBUTE_UNUSED;\n+     const char *main_filename ATTRIBUTE_UNUSED;\n+{\n+}"}, {"sha": "86dc5d597c1f0cdf9a739e141898348478b68eb0", "filename": "gcc/debug.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -0,0 +1,46 @@\n+/* Debug hooks for GCC.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+\n+#ifndef GCC_DEBUG_H\n+#define GCC_DEBUG_H\n+\n+/* This structure contains hooks for the debug information output\n+   functions, accessed through the global instance debug_hooks set in\n+   toplev.c according to command line options.  */\n+struct gcc_debug_hooks\n+{\n+  /* Initialise debug output to FILE.  MAIN_FILENAME is the name of\n+     the main input file.  */\n+  void (* init) PARAMS ((FILE * file, const char *main_filename));\n+\n+  /* Output debug symbols to FILE.  */\n+  void (* finish) PARAMS ((FILE * file, const char *main_filename));\n+};\n+\n+extern struct gcc_debug_hooks *debug_hooks;\n+\n+/* The do-nothing hooks.  */\n+extern void debug_nothing_init_finish\n+  PARAMS ((FILE *, const char *));\n+\n+extern struct gcc_debug_hooks do_nothing_debug_hooks;\n+extern struct gcc_debug_hooks dbx_debug_hooks;\n+extern struct gcc_debug_hooks sdb_debug_hooks;\n+extern struct gcc_debug_hooks dwarf_debug_hooks;\n+extern struct gcc_debug_hooks dwarf2_debug_hooks;\n+\n+#endif /* !GCC_DEBUG_H  */"}, {"sha": "cbae8a95e9f831cca482eaa014e091accdc8a4ee", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -57,6 +57,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"md5.h\"\n #include \"tm_p.h\"\n #include \"diagnostic.h\"\n+#include \"debug.h\"\n \n /* DWARF2 Abbreviation Glossary:\n    CFA = Canonical Frame Address\n@@ -231,6 +232,8 @@ static unsigned current_funcdef_fde;\n \n /* Forward declarations for functions defined in this file.  */\n \n+static void dwarf2out_init \t\tPARAMS ((FILE *, const char *));\n+static void dwarf2out_finish\t\tPARAMS ((FILE *, const char *));\n static char *stripattributes\t\tPARAMS ((const char *));\n static const char *dwarf_cfi_name\tPARAMS ((unsigned));\n static dw_cfi_ref new_cfi\t\tPARAMS ((void));\n@@ -360,7 +363,15 @@ expand_builtin_dwarf_fp_regnum ()\n #ifndef INCOMING_FRAME_SP_OFFSET\n #define INCOMING_FRAME_SP_OFFSET 0\n #endif\n+\f\n+/* The target debug structure.  */\n \n+struct gcc_debug_hooks dwarf2_debug_hooks =\n+{\n+  dwarf2out_init,\n+  dwarf2out_finish\n+};\n+\f\n /* Return a pointer to a copy of the section string name S with all\n    attributes stripped off, and an asterisk prepended (for assemble_name).  */\n \n@@ -11355,7 +11366,7 @@ dwarf2out_undef (lineno, buffer)\n \n /* Set up for Dwarf output at the start of compilation.  */\n \n-void\n+static void\n dwarf2out_init (asm_out_file, main_input_filename)\n      register FILE *asm_out_file;\n      register const char *main_input_filename;\n@@ -11445,8 +11456,10 @@ dwarf2out_init (asm_out_file, main_input_filename)\n /* Output stuff that dwarf requires at the end of every file,\n    and generate the DWARF-2 debugging info.  */\n \n-void\n-dwarf2out_finish ()\n+static void\n+dwarf2out_finish (asm_out_file, input_filename)\n+     register FILE *asm_out_file;\n+     register const char *input_filename ATTRIBUTE_UNUSED;\n {\n   limbo_die_node *node, *next_node;\n   dw_die_ref die = 0;"}, {"sha": "f429c960c5ed3f0723f7fb7038b9237d41fdead3", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -18,9 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dwarf2out_init \t\tPARAMS ((FILE *, const char *));\n-extern void dwarf2out_finish\t\tPARAMS ((void));\n-\n extern void dwarf2out_define\t\tPARAMS ((unsigned, const char *));\n extern void dwarf2out_undef \t\tPARAMS ((unsigned, const char *));\n extern void dwarf2out_start_source_file\tPARAMS ((unsigned, const char *));"}, {"sha": "83c95a0593b368cfc592266d08aa66771885b0f9", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -577,6 +577,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"dwarfout.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n+#include \"debug.h\"\n \n /* IMPORTANT NOTE: Please see the file README.DWARF for important details\n    regarding the GNU implementation of Dwarf.  */\n@@ -786,6 +787,8 @@ static int in_class;\n \n /* Forward declarations for functions defined in this file.  */\n \n+static void dwarfout_init \t\tPARAMS ((FILE *, const char *));\n+static void dwarfout_finish\t\tPARAMS ((FILE *, const char *));\n static const char *dwarf_tag_name\tPARAMS ((unsigned));\n static const char *dwarf_attr_name\tPARAMS ((unsigned));\n static const char *dwarf_stack_op_name\tPARAMS ((unsigned));\n@@ -1357,6 +1360,13 @@ static void retry_incomplete_types\tPARAMS ((void));\n   ASM_OUTPUT_DWARF_STRING (FILE,P), ASM_OUTPUT_DWARF_STRING (FILE,\"\\n\") \n #endif\n \n+\f\n+/* The target debug structure.  */\n+struct gcc_debug_hooks dwarf_debug_hooks =\n+{\n+  dwarfout_init,\n+  dwarfout_finish\n+};\n \f\n /************************ general utility functions **************************/\n \n@@ -6166,7 +6176,7 @@ dwarfout_undef (lineno, buffer)\n \n /* Set up for Dwarf output at the start of compilation.\t */\n \n-void\n+static void\n dwarfout_init (asm_out_file, main_input_filename)\n      register FILE *asm_out_file;\n      register const char *main_input_filename;\n@@ -6356,8 +6366,10 @@ dwarfout_init (asm_out_file, main_input_filename)\n \n /* Output stuff that dwarf requires at the end of every file.  */\n \n-void\n-dwarfout_finish ()\n+static void\n+dwarfout_finish (asm_out_file, main_input_filename)\n+     register FILE *asm_out_file;\n+     register const char *main_input_filename ATTRIBUTE_UNUSED;\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n "}, {"sha": "cbe6c00a09a6bc03169c0881ed36ed1e0e3a4ad3", "filename": "gcc/dwarfout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdwarfout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fdwarfout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.h?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -18,9 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dwarfout_init \t\tPARAMS ((FILE *, const char *));\n-extern void dwarfout_finish\t\tPARAMS ((void));\n-\n extern void dwarfout_define\t\tPARAMS ((unsigned, const char *));\n extern void dwarfout_undef \t\tPARAMS ((unsigned, const char *));\n extern void dwarfout_file_scope_decl \tPARAMS ((tree , int));"}, {"sha": "4bf324764aba90adf079e9c06ff8a25a99990796", "filename": "gcc/sdbout.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -57,6 +57,7 @@ AT&T C compiler.  From the example below I would conclude the following:\n #include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"gsyms.h\"\n+#include \"debug.h\"\n \n /* 1 if PARM is passed to this function in memory.  */\n \n@@ -91,6 +92,7 @@ extern tree current_function_decl;\n \n #include \"sdbout.h\"\n \n+static void sdbout_init\t\t\tPARAMS ((FILE *, const char *));\n static char *gen_fake_label\t\tPARAMS ((void));\n static int plain_type\t\t\tPARAMS ((tree));\n static int template_name_p\t\tPARAMS ((tree));\n@@ -287,7 +289,13 @@ static struct sdb_file *current_file;\n \n #endif /* MIPS_DEBUGGING_INFO */\n \f\n-\n+/* The target debug structure.  */\n+struct gcc_debug_hooks sdb_debug_hooks =\n+{\n+  sdbout_init,\n+  debug_nothing_init_finish\n+};\n+\f\n #if 0\n \n /* return the tag identifier for type\n@@ -1607,11 +1615,10 @@ sdbout_resume_previous_source_file ()\n \n /* Set up for SDB output at the start of compilation.  */\n \n-void\n-sdbout_init (asm_file, input_file_name, syms)\n+static void\n+sdbout_init (asm_file, input_file_name)\n      FILE *asm_file ATTRIBUTE_UNUSED;\n      const char *input_file_name ATTRIBUTE_UNUSED;\n-     tree syms ATTRIBUTE_UNUSED;\n {\n #ifdef MIPS_DEBUGGING_INFO\n   current_file = (struct sdb_file *) xmalloc (sizeof *current_file);\n@@ -1621,7 +1628,7 @@ sdbout_init (asm_file, input_file_name, syms)\n \n #ifdef RMS_QUICK_HACK_1\n   tree t;\n-  for (t = syms; t; t = TREE_CHAIN (t))\n+  for (t = getdecls (); t; t = TREE_CHAIN (t))\n     if (DECL_NAME (t) && IDENTIFIER_POINTER (DECL_NAME (t)) != 0\n \t&& !strcmp (IDENTIFIER_POINTER (DECL_NAME (t)), \"__vtbl_ptr_type\"))\n       sdbout_symbol (t, 0);"}, {"sha": "1fbb110b1953cc463aa6df702b60c701ecd028a3", "filename": "gcc/sdbout.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fsdbout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Fsdbout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.h?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -18,8 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void sdbout_init\t\t\tPARAMS ((FILE *, const char *, tree));\n-\n extern void sdbout_begin_function\tPARAMS ((int));\n extern void sdbout_end_function\t\tPARAMS ((int));\n "}, {"sha": "90258dfbecbb056a6b7d87cad9b773988b911b4e", "filename": "gcc/toplev.c", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d908e98573a9569a8cc2d14767ca4fb9e9777/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a51d908e98573a9569a8cc2d14767ca4fb9e9777", "patch": "@@ -66,6 +66,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"reload.h\"\n #include \"dwarf2asm.h\"\n #include \"integrate.h\"\n+#include \"debug.h\"\n \n #ifdef DWARF_DEBUGGING_INFO\n #include \"dwarfout.h\"\n@@ -225,6 +226,10 @@ const char *dump_base_name;\n \n extern int target_flags;\n \n+/* Debug hooks - dependent upon command line options.  */\n+\n+struct gcc_debug_hooks *debug_hooks;\n+\n /* Describes a dump file.  */\n \n struct dump_file_info\n@@ -2281,6 +2286,26 @@ compile_file (name)\n #endif\n     } /* ! flag_syntax_only  */\n \n+  /* Set up the debug hooks based on write_symbols.  Default to doing\n+     nothing.  */\n+  debug_hooks = &do_nothing_debug_hooks;  \n+#if defined(DBX_DEBUGGING_INFO) || defined(XCOFF_DEBUGGING_INFO)\n+  if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n+    debug_hooks = &dbx_debug_hooks;\n+#endif\n+#ifdef SDB_DEBUGGING_INFO\n+  if (write_symbols == SDB_DEBUG)\n+    debug_hooks = &sdb_debug_hooks;\n+#endif\n+#ifdef DWARF_DEBUGGING_INFO\n+  if (write_symbols == DWARF_DEBUG)\n+    debug_hooks = &dwarf_debug_hooks;\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (write_symbols == DWARF2_DEBUG)\n+    debug_hooks = &dwarf2_debug_hooks;\n+#endif\n+\n #ifndef ASM_OUTPUT_SECTION_NAME\n   if (flag_function_sections)\n     {\n@@ -2309,26 +2334,12 @@ compile_file (name)\n   /* If dbx symbol table desired, initialize writing it\n      and output the predefined types.  */\n   timevar_push (TV_SYMOUT);\n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-  if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-    dbxout_init (asm_out_file, main_input_filename, getdecls ());\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-  if (write_symbols == SDB_DEBUG)\n-    sdbout_init (asm_out_file, main_input_filename, getdecls ());\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-  if (write_symbols == DWARF_DEBUG)\n-    dwarfout_init (asm_out_file, main_input_filename);\n-#endif\n #ifdef DWARF2_UNWIND_INFO\n   if (dwarf2out_do_frame ())\n     dwarf2out_frame_init ();\n #endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-  if (write_symbols == DWARF2_DEBUG)\n-    dwarf2out_init (asm_out_file, main_input_filename);\n-#endif\n+\n+  (*debug_hooks->init) (asm_out_file, main_input_filename);\n   timevar_pop (TV_SYMOUT);\n \n   /* Initialize yet another pass.  */\n@@ -2401,25 +2412,12 @@ compile_file (name)\n \n   /* Do dbx symbols.  */\n   timevar_push (TV_SYMOUT);\n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-  if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-    dbxout_finish (asm_out_file, main_input_filename);\n-#endif\n-\n-#ifdef DWARF_DEBUGGING_INFO\n-  if (write_symbols == DWARF_DEBUG)\n-    dwarfout_finish ();\n-#endif\n-\n #ifdef DWARF2_UNWIND_INFO\n   if (dwarf2out_do_frame ())\n     dwarf2out_frame_finish ();\n #endif\n \n-#ifdef DWARF2_DEBUGGING_INFO\n-  if (write_symbols == DWARF2_DEBUG)\n-    dwarf2out_finish ();\n-#endif\n+  (*debug_hooks->finish) (asm_out_file, main_input_filename);\n   timevar_pop (TV_SYMOUT);\n \n   /* Output some stuff at end of file if nec.  */"}]}