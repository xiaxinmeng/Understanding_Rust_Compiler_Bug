{"sha": "4b6eac52d5cddac6803e3bb762523da95f571bf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2ZWFjNTJkNWNkZGFjNjgwM2UzYmI3NjI1MjNkYTk1ZjU3MWJmNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-02T05:35:57Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-02T05:35:57Z"}, "message": "2003-05-02  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/FileChannelImpl.java\n\t(read): New implementation.\n\t(implRead): New methods.\n\t(write): New implementation, call other write insteal of read method.\n\t(implWrite): New methods.\n\t(map): Added comment.\n\t(transferFrom): Implemented.\n\t(transferTo): Implemented.\n\t(lock): Added checks to throw exceptions.\n\t(truncate): Added check to throw exception.\n\t* gnu/java/nio/natFileChannelImpl.cc\n\t(implRead): New method.\n\t(implWrite): New method.\n\t* java/nio/ByteBuffer.java\n\t(hashCode): Fixed comment.\n\t(get): Fixed exception documentation.\n\t(put): Fixed exception documentation.\n\t* java/nio/CharBuffer.java:\n\tAdded comment for later optimizations.\n\nFrom-SVN: r66373", "tree": {"sha": "4aa891e39e8bfb18f8fb0e1d235f4f3bf97600d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aa891e39e8bfb18f8fb0e1d235f4f3bf97600d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b6eac52d5cddac6803e3bb762523da95f571bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6eac52d5cddac6803e3bb762523da95f571bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6eac52d5cddac6803e3bb762523da95f571bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6eac52d5cddac6803e3bb762523da95f571bf6/comments", "author": null, "committer": null, "parents": [{"sha": "c67528fe19d425cf537589701f67218ff729130b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67528fe19d425cf537589701f67218ff729130b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67528fe19d425cf537589701f67218ff729130b"}], "stats": {"total": 172, "additions": 130, "deletions": 42}, "files": [{"sha": "a73e9d81683a71bc443e9a0ca0a842f98fb8d996", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6eac52d5cddac6803e3bb762523da95f571bf6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6eac52d5cddac6803e3bb762523da95f571bf6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4b6eac52d5cddac6803e3bb762523da95f571bf6", "patch": "@@ -1,3 +1,25 @@\n+2003-05-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/FileChannelImpl.java\n+\t(read): New implementation.\n+\t(implRead): New methods.\n+\t(write): New implementation, call other write insteal of read method.\n+\t(implWrite): New methods.\n+\t(map): Added comment.\n+\t(transferFrom): Implemented.\n+\t(transferTo): Implemented.\n+\t(lock): Added checks to throw exceptions.\n+\t(truncate): Added check to throw exception.\n+\t* gnu/java/nio/natFileChannelImpl.cc\n+\t(implRead): New method.\n+\t(implWrite): New method.\n+\t* java/nio/ByteBuffer.java\n+\t(hashCode): Fixed comment.\n+\t(get): Fixed exception documentation.\n+\t(put): Fixed exception documentation.\n+\t* java/nio/CharBuffer.java:\n+\tAdded comment for later optimizations.\n+\n 2003-04-30  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/10582:"}, {"sha": "79a7a58eb90b3df3e715b1e836a0b2ceeefd9675", "filename": "libjava/gnu/java/nio/FileChannelImpl.java", "status": "modified", "additions": 84, "deletions": 39, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6eac52d5cddac6803e3bb762523da95f571bf6/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6eac52d5cddac6803e3bb762523da95f571bf6/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java?ref=4b6eac52d5cddac6803e3bb762523da95f571bf6", "patch": "@@ -126,19 +126,15 @@ else if (file_obj instanceof FileOutputStream)\n \n   public int read (ByteBuffer dst) throws IOException\n   {\n-    int s = (int)size();\n-\n-    if (buf == null)\n+    // Check if file is mapped into memory.\n+    if (buf != null)\n       {\n-        throw new EOFException(\"file not mapped\");\n+\t// FIXME: implement this\n+        throw new Error (\"Accessing mapped buffers not implemented.\");\n       }\n \n-    for (int i = 0; i < s; i++)\n-      {\n-        dst.put (buf.get());\n-      }\n-\n-    return s;\n+    // File not mapped, access it directly.\n+    return implRead (dst);\n   }\n \n   public int read (ByteBuffer dst, long position)\n@@ -149,11 +145,33 @@ public int read (ByteBuffer dst, long position)\n \n     if (!isOpen ())\n       throw new ClosedChannelException ();\n+   \n+    if (file_obj instanceof FileOutputStream)\n+      throw new NonReadableChannelException ();\n+\n+    int result;\n+    long oldPosition;\n+\n+    oldPosition = implPosition ();\n+    result = implRead (dst);\n+    implPosition (oldPosition);\n     \n-    // FIXME: check for NonReadableChannelException\n+    return result;\n+  }\n \n-    throw new Error (\"Not implemented\");\n+  private int implRead (ByteBuffer dst) throws IOException\n+  {\n+    int result;\n+    byte[] buffer = new byte [dst.remaining ()];\n+    \n+    result = implRead (buffer, 0, buffer.length);\n+    dst.put (buffer, 0, result);\n+\n+    return result;\n   }\n+  \n+  private native int implRead (byte[] buffer, int offset, int length)\n+    throws IOException;\n \n   public long read (ByteBuffer[] dsts, int offset, int length)\n     throws IOException\n@@ -162,28 +180,23 @@ public long read (ByteBuffer[] dsts, int offset, int length)\n \n     for (int i = offset; i < offset + length; i++)\n       {\n-        result += write (dsts [i]);\n+        result += read (dsts [i]);\n       }\n \n     return result;\n   }\n \n   public int write (ByteBuffer src) throws IOException\n   {\n-    int w = 0;\n-\n-    if (buf == null)\n-      {\n-        throw new EOFException (\"file not mapped\");\n-      }\n-\n-    while (src.hasRemaining ())\n+    // Check if file is mapped into memory.\n+    if (buf != null)\n       {\n-        buf.put (src.get ());\n-        w++;\n+\t// FIXME: implement this\n+        throw new Error (\"Accessing mapped buffers not implemented.\");\n       }\n-\n-    return w;\n+    \n+    // File not mapped, access it directly.\n+    return implWrite (src);\n   }\n     \n   public int write (ByteBuffer src, long position)\n@@ -195,10 +208,29 @@ public int write (ByteBuffer src, long position)\n     if (!isOpen ())\n       throw new ClosedChannelException ();\n     \n-    // FIXME: check for NonWritableChannelException\n+    if (file_obj instanceof FileInputStream)\n+       throw new NonWritableChannelException ();\n \n-    throw new Error (\"Not implemented\");\n+    int result;\n+    long oldPosition;\n+\n+    oldPosition = implPosition ();\n+    result = implWrite (src);\n+    implPosition (oldPosition);\n+    \n+    return result;\n   }\n+\n+  private int implWrite (ByteBuffer src) throws IOException\n+  {\n+    byte[] buffer = new byte [src.remaining ()];\n+    \n+    src.get (buffer, 0, buffer.length);\n+    return implWrite (buffer, 0, buffer.length);\n+  }\n+  \n+  private native int implWrite (byte[] buffer, int offset, int length)\n+    throws IOException;\n   \n   public long write(ByteBuffer[] srcs, int offset, int length)\n     throws IOException\n@@ -225,6 +257,7 @@ public MappedByteBuffer map (FileChannel.MapMode mode, long position,\n         || size > Integer.MAX_VALUE)\n       throw new IllegalArgumentException ();\n     \n+    // FIXME: Make this working.\n     int cmode = mode.m;\n     map_address = nio_mmap_file (position, size, cmode);\n     length = (int) size;\n@@ -272,10 +305,13 @@ public long transferTo (long position, long count, WritableByteChannel target)\n     if (!isOpen ())\n       throw new ClosedChannelException ();\n \n-    // FIXME: check for NonReadableChannelException\n-    // FIXME: check for NonWritableChannelException\n-    \n-    throw new Error (\"Not implemented\");\n+    if (file_obj instanceof FileOutputStream)\n+       throw new NonReadableChannelException ();\n+   \n+    // XXX: count needs to be casted from long to int. Dataloss ?\n+    ByteBuffer buffer = ByteBuffer.allocate ((int) count);\n+    read (buffer, position);\n+    return target.write (buffer);\n   }\n \n   public long transferFrom (ReadableByteChannel src, long position, long count)\n@@ -288,10 +324,13 @@ public long transferFrom (ReadableByteChannel src, long position, long count)\n     if (!isOpen ())\n       throw new ClosedChannelException ();\n \n-    // FIXME: check for NonReadableChannelException\n-    // FIXME: check for NonWritableChannelException\n-    \n-    throw new Error (\"Not implemented\");\n+    if (file_obj instanceof FileInputStream)\n+       throw new NonWritableChannelException ();\n+\n+    // XXX: count needs to be casted from long to int. Dataloss ?\n+    ByteBuffer buffer = ByteBuffer.allocate ((int) count);\n+    src.read (buffer);\n+    return write (buffer, position);\n   }\n \n   public FileLock lock (long position, long size, boolean shared)\n@@ -304,9 +343,14 @@ public FileLock lock (long position, long size, boolean shared)\n     if (!isOpen ())\n       throw new ClosedChannelException ();\n \n-    // FIXME: check for NonReadableChannelException\n-    // FIXME: check for NonWritableChannelException\n-    \n+    if (shared &&\n+        file_obj instanceof FileOutputStream)\n+      throw new NonReadableChannelException ();\n+\t\n+    if (!shared &&\n+        file_obj instanceof FileInputStream)\n+      throw new NonWritableChannelException ();\n+\t\n     throw new Error (\"Not implemented\");\n   }\n   \n@@ -353,7 +397,8 @@ public FileChannel truncate (long size)\n     if (!isOpen ())\n       throw new ClosedChannelException ();\n \n-    // FIXME: check for NonWritableChannelException\n+    if (file_obj instanceof FileInputStream)\n+       throw new NonWritableChannelException ();\n \n     return implTruncate (size);\n   }"}, {"sha": "b33a79f16f67947cf2aeeabe01d87c0c2938a37e", "filename": "libjava/gnu/java/nio/natFileChannelImpl.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6eac52d5cddac6803e3bb762523da95f571bf6/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6eac52d5cddac6803e3bb762523da95f571bf6/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc?ref=4b6eac52d5cddac6803e3bb762523da95f571bf6", "patch": "@@ -28,6 +28,7 @@ details.  */\n #include <gnu/java/nio/FileChannelImpl.h>\n #include <java/io/FileDescriptor.h>\n #include <java/io/IOException.h>\n+#include <java/nio/ByteBuffer.h>\n #include <java/nio/channels/FileChannel.h>\n \n jlong\n@@ -49,6 +50,21 @@ gnu::java::nio::FileChannelImpl::implPosition (jlong newPosition)\n   return this;\n }\n \n+jint\n+gnu::java::nio::FileChannelImpl::implRead (JArray<jbyte>* buffer,\n+                                           jint offset, jint len)\n+{\n+  return fd->read (buffer, offset, len);\n+}\n+\n+jint\n+gnu::java::nio::FileChannelImpl::implWrite (JArray<jbyte>* buffer,\n+                                            jint offset, jint len)\n+{\n+  fd->write (buffer, offset, len);\n+  return len;\n+}\n+\n java::nio::channels::FileChannel*\n gnu::java::nio::FileChannelImpl::implTruncate (jlong size)\n {"}, {"sha": "5a687cac6114f0685f1336b9c009e582c70ad39e", "filename": "libjava/java/nio/ByteBuffer.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6eac52d5cddac6803e3bb762523da95f571bf6/libjava%2Fjava%2Fnio%2FByteBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6eac52d5cddac6803e3bb762523da95f571bf6/libjava%2Fjava%2Fnio%2FByteBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBuffer.java?ref=4b6eac52d5cddac6803e3bb762523da95f571bf6", "patch": "@@ -251,7 +251,7 @@ public final int arrayOffset ()\n    */\n   public int hashCode()\n   {\n-    // FIXME: Check what SUN calcs here\n+    // FIXME: Check what SUN calculates here\n     return super.hashCode();\n   }\n \n@@ -344,15 +344,17 @@ public final ByteBuffer order (ByteOrder endian)\n   /**\n    * Absolute get method.\n    *\n-   * @exception IndexOutOfBoundsException FIXME\n+   * @exception IndexOutOfBoundsException If index &lt; 0 or index &gt;= this\n+   * buffers limit.\n    */\n   public abstract byte get (int index);\n   \n   /**\n    * Absolute put method.\n    *\n    * @exception ReadOnlyBufferException If this buffer is read-only\n-   * @exception IndexOutOfBoundsException FIXME\n+   * @exception IndexOutOfBoundsException If index &lt; 0 or index &gt;= this\n+   * buffers limit.\n    */\n   public abstract ByteBuffer put (int index, byte b);\n   "}, {"sha": "e2f8d5e130a910312dad4d3533163eb9e75f227c", "filename": "libjava/java/nio/CharBuffer.java", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6eac52d5cddac6803e3bb762523da95f571bf6/libjava%2Fjava%2Fnio%2FCharBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6eac52d5cddac6803e3bb762523da95f571bf6/libjava%2Fjava%2Fnio%2FCharBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBuffer.java?ref=4b6eac52d5cddac6803e3bb762523da95f571bf6", "patch": "@@ -83,6 +83,9 @@ final public static CharBuffer wrap (CharSequence a)\n    */\n   final public static CharBuffer wrap (CharSequence a, int offset, int length)\n   {\n+    // FIXME: implement better handling of java.lang.String.\n+    // Probably share data with String via reflection.\n+\t  \n     if ((offset < 0)\n         || (offset > a.length ())\n         || (length < 0)"}]}