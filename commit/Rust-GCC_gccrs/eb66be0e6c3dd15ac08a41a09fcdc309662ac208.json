{"sha": "eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2NmJlMGU2YzNkZDE1YWMwOGE0MWEwOWZjZGMzMDk2NjJhYzIwOA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-04-23T22:39:53Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-04-23T22:39:53Z"}, "message": "91th Cygnus<->FSF merge\n\nFrom-SVN: r13971", "tree": {"sha": "ad6acff4ab8e23b617b1b823fb310683e0b4ae03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad6acff4ab8e23b617b1b823fb310683e0b4ae03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/comments", "author": null, "committer": null, "parents": [{"sha": "2ec43107c9ad58aae26ecc550ca365b8d79d651d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec43107c9ad58aae26ecc550ca365b8d79d651d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec43107c9ad58aae26ecc550ca365b8d79d651d"}], "stats": {"total": 1736, "additions": 738, "deletions": 998}, "files": [{"sha": "2f9b6e2029e09d3e88e6a4e2fcdb447d85cebbc7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 424, "deletions": 331, "changes": 755, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -1,7 +1,100 @@\n+Wed Apr 23 14:43:06 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* init.c (init_decl_processing): Add supoprt for setjmp/longjmp based\n+\texception handling.\n+\t* except.c (init_exception_processing): Likewise.\n+\t(expand_end_catch_block): Likewise.\n+\t(expand_exception_blocks): Likewise.\n+\t(expand_throw): Likewise.\n+\t* exception.cc (__default_terminate): Likewise.\n+\n+\t* init.c (perform_member_init): Use new method of expr level\n+ \tcleanups, instead of cleanups_this_call and friends.\n+\t(emit_base_init): Likewise.\n+\t(expand_aggr_vbase_init_1): Likewise.\n+\t(expand_vec_init): Likewise.\n+\t* decl.c (cp_finish_decl): Likewise.\n+\t(expand_static_init): Likewise.\n+\t(store_parm_decls): Likewise.\n+\t(cplus_expand_expr_stmt): Likewise.\n+\t* decl2.c (finish_file): Likewise.\n+\t\n+\t* Make-lang.in (exception.o): Ok to compile with -O now.\n+\n+\t* decl.c (maybe_build_cleanup_1): We no longer have to unsave, as\n+\twe know it will be done later by the backend.\n+\n+\t* decl2.c (lang_f_options): Remove support for short temps.\n+\t* lang-options.h: Likewise.\n+\t\n+Wed Apr 23 04:12:06 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (varargs_function_p): New fn.\n+\t* method.c (emit_thunk): Replace broken generic code with code to\n+ \tgenerate a heavyweight thunk function.\n+\n+Tue Apr 22 02:45:18 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (process_template_parm): pedwarn about floating-point parms.\n+\n+\t* decl.c (grokdeclarator): inline no longer implies static.\n+\n+\t* spew.c (yylex): Always return the TYPE_DECL if we got a scope.\n+\n+Mon Apr 21 15:42:27 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (check_for_override): The signature of an overriding\n+ \tfunction is not changed.\n+\n+\t* call.c (build_over_call): Move setting of conv into the loop.\n+\n+Sun Apr 20 16:24:29 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_user_type_conversion_1): Really ignore rvalue\n+ \tconversions when looking for a REFERENCE_TYPE.\n+\n+\t* cvt.c (build_up_reference): Eviscerate, use build_unary_op.\n+\t* cp-tree.h (TREE_REFERENCE_EXPR): #if 0.\n+\t* typeck.c (decay_conversion): Don't set TREE_REFERENCE_EXPR.\n+\t(build_unary_op): Likewise.\n+\t* call.c (build_over_call): See through a CONVERT_EXPR around the\n+ \tADDR_EXPR for on a temporary.\n+\t* typeck.c (c_expand_return): See through a CONVERT_EXPR around\n+ \tthe ADDR_EXPR for a local variable.\n+\n+Fri Apr 18 12:11:33 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_user_type_conversion_1): If we're trying to\n+ \tconvert to a REFERENCE_TYPE, only consider lvalue conversions.\n+\t(build_new_function_call): Print candidates.\n+\t(implicit_conversion): Try a temp binding if the lvalue conv is BAD.\n+\t(reference_binding): Binding a temporary of a reference-related type\n+\tis BAD.\n+\n+Thu Apr 17 14:37:22 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* inc/typeinfo (type_info::before): Add cv-qualifier-seq.\n+\t* tinfo2.cc (type_info::before): Likewise.\n+\n+Mon Apr 14 12:38:17 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (implicit_conversion): Oops.\n+\n+Fri Apr 11 02:18:30 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (implicit_conversion): Try to find a reference conversion\n+ \tbefore binding a const reference to a temporary.\n+\n+Wed Apr  2 12:51:36 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* exception.cc (__default_unexpected): Call terminate by default,\n+\tso that if the user overrides terminate, the correct function will\n+\tbe called.\n+\t\n Wed Mar 19 14:14:45 1997  Mike Stump  <mrs@cygnus.com>\n \n \t* parse.y (left_curly): Avoid trying to use any fields of\n- \terror_mark_node, as there aren't any.\n+\terror_mark_node, as there aren't any.\n \n Thu Mar 13 16:33:22 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -10,7 +103,7 @@ Thu Mar 13 16:33:22 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n Wed Mar 12 13:55:10 1997  Hans-Peter Nilsson  <Hans-Peter.Nilsson@axis.se>\n \n-        * call.c (add_template_candidate): Initialize the variable \"dummy\".\n+\t* call.c (add_template_candidate): Initialize the variable \"dummy\".\n \n Mon Mar 10 15:13:14 1997  Brendan Kehoe  <brendan@canuck.cygnus.com>\n \n@@ -156,7 +249,7 @@ Mon Mar  3 12:14:54 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Sun Mar  2 11:04:43 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* call.c (build_scoped_method_call): Complain if the scope isn't a\n- \tbase.\n+\tbase.\n \n Wed Feb 26 11:31:06 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -183,11 +276,11 @@ Mon Feb 24 15:00:12 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* call.c (build_field_call): Don't look for [cd]tor_identifier.\n \t* decl2.c (delete_sanity): Remove meaningless use of\n- \tLOOKUP_HAS_IN_CHARGE.\n+\tLOOKUP_HAS_IN_CHARGE.\n \t* decl.c (finish_function): Use build_scoped_method_call instead\n- \tof build_delete for running vbase dtors.\n+\tof build_delete for running vbase dtors.\n \t* init.c (build_delete): Call overload resolution code instead of\n- \tduplicating it badly.\n+\tduplicating it badly.\n \n Thu Feb 20 15:12:15 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -222,8 +315,8 @@ Fri Feb 14 16:57:05 1997  Mike Stump  <mrs@cygnus.com>\n Tue Feb 11 13:50:48 1997  Mike Stump  <mrs@cygnus.com>\n \n \t* new1.cc: Include a declaration for malloc, to avoid warning, and\n- \tavoid lossing on systems that require one (ones that define malloc\n- \tin xm.h).\n+\tavoid lossing on systems that require one (ones that define malloc\n+\tin xm.h).\n \n Mon Feb 10 22:51:13 1997  Bruno Haible\t<bruno@linuix.mathematik.uni-karlsruhe.de>\n \n@@ -237,7 +330,7 @@ Mon Feb 10 22:51:13 1997  Bruno Haible\t<bruno@linuix.mathematik.uni-karlsruhe.de\n Fri Feb  7 15:43:34 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (xref_basetypes): Allow a base class that depends on\n- \ttemplate parms to be incomplete.\n+\ttemplate parms to be incomplete.\n \n \t* decl2.c (build_expr_from_tree): Support typeid(type).\n \t* rtti.c (get_typeid): Support templates.\n@@ -253,8 +346,8 @@ Tue Feb  4 11:28:24 1997  Jason Merrill  <jason@yorick.cygnus.com>\n Mon Feb  3 18:41:12 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (tsubst, case FUNCTION_DECL): Lose obsolete code that\n- \tsmashes together template and non-template decls of the same\n- \tsignature.\n+\tsmashes together template and non-template decls of the same\n+\tsignature.\n \n Thu Jan 30 19:18:00 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -320,8 +413,8 @@ Tue Jan 28 15:25:09 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Mon Jan 27 19:21:29 1997  Mike Stump  <mrs@cygnus.com>\n \n \t* except.c (expand_throw): Don't expand the cleanup tree here,\n- \tsince we are not going to write the rtl out.  Fixes problem with\n- \t-g -O on SPARC.\n+\tsince we are not going to write the rtl out.  Fixes problem with\n+\t-g -O on SPARC.\n \n Mon Jan 27 16:24:35 1997  Sean McNeil  <sean@mcneil.com>\n \n@@ -348,12 +441,12 @@ Sat Jan 25 08:50:03 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Fri Jan 24 17:52:54 1997  Mike Stump  <mrs@cygnus.com>\n \n \t* decl.c (duplicate_decls): pedwarn mismatched exception\n- \tspecifications.\n+\tspecifications.\n \n Thu Jan 23 18:18:54 1997  Mike Stump  <mrs@cygnus.com>\n \n \t* call.c (build_new_method_call): Don't display the invisible\n- \targument for controlling virtual bases.\n+\targument for controlling virtual bases.\n \n Thu Jan 23 16:48:10 1997  Mike Stump  <mrs@cygnus.com>\n \n@@ -372,25 +465,25 @@ Thu Jan 23 16:39:06 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \t* lex.c (cons_up_default_function): Fix return type of synth op=.\n \n \t* init.c (emit_base_init): Add warnings for uninitialized members\n- \tand bases.\n+\tand bases.\n \n \t* decl.c (xref_basetypes): Add warning for non-polymorphic type\n- \twith destructor used as base type.\n+\twith destructor used as base type.\n \n \t* decl.c (grok_op_properties): Add warning for op= returning void.\n \t* typeck.c (c_expand_return): Add warning for op= returning anything\n \tother than *this.\n \n \t* class.c (finish_struct_1): Add warning for class with pointers\n- \tbut not copy ctor or copy op=.\n+\tbut not copy ctor or copy op=.\n \n \t* cp-tree.h (TI_PENDING_TEMPLATE_FLAG): New macro.\n \t* pt.c (add_pending_template): Use it instead of LANG_FLAG_0.\n \t(instantiate_template): If -fexternal-templates, add this\n- \tinstantiation to pending_templates.\n+\tinstantiation to pending_templates.\n \n \t* decl2.c (copy_assignment_arg_p): Disable old hack to support\n- \tBooch components.\n+\tBooch components.\n \n Tue Jan 21 18:32:04 1997  Mike Stump  <mrs@cygnus.com>\n \n@@ -399,7 +492,7 @@ Tue Jan 21 18:32:04 1997  Mike Stump  <mrs@cygnus.com>\n Mon Jan 20 17:59:51 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* call.c (standard_conversion): Handle getting references.  Tack\n- \ton RVALUE_CONV here.  Do it for non-class types, too.\n+\ton RVALUE_CONV here.  Do it for non-class types, too.\n \t(reference_binding): Pass references to standard_conversion.\n \t(implicit_conversion): Likewise.\n \t(add_builtin_candidate): Disable one ?: kludge.\n@@ -415,10 +508,10 @@ Mon Jan 20 14:53:13 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Mon Jan 20 14:43:49 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (finish_function): Also zero out DECL_INCOMING_RTL for\n- \tthe arguments.\n+\tthe arguments.\n \n \t* error.c (dump_expr, TEMPLATE_CONST_PARM): Don't require\n- \tcurrent_template_parms.\n+\tcurrent_template_parms.\n \n Fri Jan 17 10:25:42 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -476,17 +569,17 @@ Wed Jan  8 13:09:54 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \tthe correct order.\n \n \t* pt.c (instantiate_class_template): Don't initialize\n- \tBINFO_BASETYPES until the vector is filled out.\n+\tBINFO_BASETYPES until the vector is filled out.\n \t(unify): Don't abort on conflicting bindings, just fail.\n \t(instantiate_decl): Do push_tinst_level before any tsubsting.\n \n \t* method.c (build_overload_value): Handle getting a\n- \tTEMPLATE_CONST_PARM for a pointer.\n+\tTEMPLATE_CONST_PARM for a pointer.\n \n Tue Jan  7 14:00:58 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* init.c (expand_member_init): Don't give 'not a base' error for\n- \ttemplates.\n+\ttemplates.\n \n \t* pt.c (instantiate_decl): Call import_export_decl later.\n \n@@ -511,7 +604,7 @@ Tue Dec 31 20:25:50 1996  Mike Stump  <mrs@cygnus.com>\n Tue Dec 31 15:16:56 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* init.c (perform_member_init): Make sure the partial EH cleanups\n- \tlive on the function_obstack.\n+\tlive on the function_obstack.\n \n Fri Dec 27 10:31:40 1996  Paul Eggert  <eggert@twinsun.com>\n \n@@ -590,8 +683,8 @@ Thu Dec  5 02:11:28 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Tue Dec  3 23:18:37 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (grok_x_components): Remove synthesized methods from\n- \tTYPE_METHODS of an anonymous union, complain about member\n- \tfunctions.\n+\tTYPE_METHODS of an anonymous union, complain about member\n+\tfunctions.\n \t* decl.c (shadow_tag): Wipe out memory of synthesized methods in\n \tanonymous unions.\n \t(finish_function): Just clear the DECL_RTL of our arguments.\n@@ -606,7 +699,7 @@ Fri Nov 29 21:54:17 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Wed Nov 27 14:47:15 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* typeck.c (build_component_ref): Don't die if COMPONENT isn't a\n- \tIDENTIFIER_NODE.\n+\tIDENTIFIER_NODE.\n \n Wed Nov 27 16:05:19 1996  Michael Meissner  <meissner@tiktok.cygnus.com>\n \n@@ -646,9 +739,9 @@ Thu Nov 21 16:30:24 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Wed Nov 20 18:47:31 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* g++.c (main): Make sure arglist has a final NULL entry.  Add\n- \tPEXECUTE_LAST to the flags passed to pexecute, as otherwise\n- \tstdin/stdout of the invoked program are redirected to\n- \tnowheresville.\n+\tPEXECUTE_LAST to the flags passed to pexecute, as otherwise\n+\tstdin/stdout of the invoked program are redirected to\n+\tnowheresville.\n \n Tue Nov 19 16:12:44 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -673,7 +766,7 @@ Mon Nov 18 17:05:26 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Mon Nov 18 16:10:43 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* cvt.c (cp_convert_to_pointer): Avoid thinking a POINTER_TYPE\n- \t(METHOD_TYPE) is a TYPE_PTRMEMFUNC_P.\n+\t(METHOD_TYPE) is a TYPE_PTRMEMFUNC_P.\n \n Thu Nov 14 23:18:17 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -682,7 +775,7 @@ Thu Nov 14 23:18:17 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* decl2.c (finish_vtable_vardecl): Likewise.\n \t* decl.c (pushtag, finish_enum): Likewise.\n \t* lex.c (check_newline): Use debug_* instead of calling *out\n- \tfunctions directly.\n+\tfunctions directly.\n \n Thu Nov 14 15:21:46 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -692,12 +785,12 @@ Thu Nov 14 15:21:46 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Wed Nov 13 12:32:07 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (finish_struct_1): A class has a non-trivial copy\n- \tconstructor if it has virtual functions.\n+\tconstructor if it has virtual functions.\n \n \t* cvt.c (cp_convert): Always call a constructor.\n \n \t* call.c (reference_binding): Still tack on a REF_BIND\n- \tfor bad conversions.\n+\tfor bad conversions.\n \t(build_user_type_conversion_1): Propagate ICS_BAD_FLAG.\n \n \t* typeck.c (convert_arguments): Pass LOOKUP_ONLYCONVERTING.\n@@ -820,14 +913,14 @@ Fri Nov  8 17:38:44 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* search.c (note_debug_info_needed): Don't do anything if we're in a \n \ttemplate.\n \t* method.c (synthesize_method): For non-local classes,\n- \tpush_to_top_level first.\n+\tpush_to_top_level first.\n \n Fri Nov  8 11:52:28 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* typeck.c (get_delta_difference): Add no_error parameter.\n \t(build_ptrmemfunc): Call get_delta_difference with no_error set;\n- \twe don't want error messages when converting unrelated\n- \tpointer-to-member functions.\n+\twe don't want error messages when converting unrelated\n+\tpointer-to-member functions.\n \n Thu Nov  7 11:16:24 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -837,7 +930,7 @@ Thu Nov  7 11:16:24 1996  Mike Stump  <mrs@cygnus.com>\n Tue Nov  5 17:12:05 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* cvt.c (cp_convert_to_pointer): Move code for conversions from\n- \t(::*)() to void* or (*)() up a bit, so that we can convert from\n+\t(::*)() to void* or (*)() up a bit, so that we can convert from\n \tMETHOD_TYPEs as well.\n \n Tue Nov  5 14:54:17 1996  Jason Merrill  <jason@yorick.cygnus.com>\n@@ -870,24 +963,24 @@ Fri Nov  1 08:53:17 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* cp-tree.h (DIRECT_BIND): Change from INDIRECT_BIND.\n \t* decl.c (grok_reference_init): Pass DIRECT_BIND.\n \t* cvt.c (build_up_reference): Don't mark 'this' addressable.  Use\n- \tDIRECT_BIND.\n+\tDIRECT_BIND.\n \t* call.c (convert_like): Don't pass INDIRECT_BIND.\n \t* typeck.c (convert_arguments): Likewise.\n \t* typeck.c (mark_addressable): Allow &this if flag_this_is_variable.\n \n Thu Oct 31 17:08:49 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* typeck.c (mark_addressable): Support TARGET_EXPR, unify with\n- \tsimilar code in build_up_ref.\n+\tsimilar code in build_up_ref.\n \t* cvt.c (build_up_reference): Drastically simplify.\n \n Mon Oct 28 12:45:05 1996  Jeffrey A Law  (law@cygnus.com)\n \n \t* typeck.c (signed_or_unsigned_type): If the given type already\n \tas the correct signedness, then just return it.\n \n-        * typeck.c ({un,}signed_type): If can't do anything, call\n-        signed_or_unsigned_type.\n+\t* typeck.c ({un,}signed_type): If can't do anything, call\n+\tsigned_or_unsigned_type.\n \n Thu Oct 24 14:21:59 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n@@ -897,7 +990,7 @@ Thu Oct 24 14:21:59 1996  Bob Manson  <manson@charmed.cygnus.com>\n Wed Oct 23 00:43:10 1996  Jason Merrill  <jason@gerbil.cygnus.com>\n \n \t* class.c (finish_struct_1): Avoid empty structs by adding a field\n- \tso layout_type gets the mode right.\n+\tso layout_type gets the mode right.\n \n \t* typeck.c (c_expand_return): Drastically simplify.\n \n@@ -912,32 +1005,32 @@ Fri Oct 18 16:03:48 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Thu Oct 17 11:31:59 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* cvt.c (convert_to_pointer_force): Add code to support pointer to\n- \tmember function to pointer to function conversions.\n+\tmember function to pointer to function conversions.\n \t* init.c (resolve_offset_ref): Add code to allow faked up objects,\n- \tignoring them if they are not used, and giving an error, if they\n- \tare needed.\n+\tignoring them if they are not used, and giving an error, if they\n+\tare needed.\n \t* typeck.c (get_member_function_from_ptrfunc): Fold e1 to improve\n- \tcode, and so that we can give an error, if we needed an object,\n- \tand one was not provided.\n+\tcode, and so that we can give an error, if we needed an object,\n+\tand one was not provided.\n \t(build_c_cast): Don't call default_conversion when we want to\n- \tconvert to pointer to function from a METHOD_TYPE.\n+\tconvert to pointer to function from a METHOD_TYPE.\n \n Mon Oct 14 00:28:51 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* Make-lang.in (cplib2.ready): Fix logic.\n \n \t* decl.c (shadow_tag): Only complain about non-artificial function\n- \tmembers.\n+\tmembers.\n \n \t* class.c (finish_struct_1): Add synthesized methods to TYPE_METHODS.\n \n Fri Oct 11 16:12:40 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* expr.c (cplus_expand_expr): Pre-tweak call_target like\n- \texpand_inline_function would.\n+\texpand_inline_function would.\n \n \t* pt.c (mark_decl_instantiated): If extern_p, call\n- \tmark_inline_for_output.\n+\tmark_inline_for_output.\n \n Thu Oct 10 15:58:08 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -950,8 +1043,8 @@ Thu Oct 10 15:58:08 1996  Mike Stump  <mrs@cygnus.com>\n Tue Oct  8 12:43:51 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* pt.c (tsubst): If the function decl isn't a member of this\n- \ttemplate, return a copy of the decl (including copying the\n- \tlang-specific part) so we don't hose ourselves later.\n+\ttemplate, return a copy of the decl (including copying the\n+\tlang-specific part) so we don't hose ourselves later.\n \n Thu Oct  3 16:24:28 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -970,9 +1063,9 @@ Wed Oct  2 21:58:01 1996  Bob Manson  <manson@charmed.cygnus.com>\n Mon Sep 30 13:38:24 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c, cp-tree.h, cvt.c, decl.c, decl2.c, gxx.gperf, hash.h,\n- \tlex.c, method.c, parse.y, typeck.c, typeck2.c: Remove\n- \twarn_traditional and warn_strict_prototypes; remove ancient\n- \t'overload' code; remove references to flag_traditional.\n+\tlex.c, method.c, parse.y, typeck.c, typeck2.c: Remove\n+\twarn_traditional and warn_strict_prototypes; remove ancient\n+\t'overload' code; remove references to flag_traditional.\n \n Mon Sep 30 12:58:40 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -986,12 +1079,12 @@ Sun Sep 29 03:12:01 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* Make-lang.in (cplib2.txt): Also depend on the headers.\n \n \t* rtti.c (get_tinfo_var): Don't assume that POINTER_SIZE ==\n- \tINT_TYPE_SIZE.\n+\tINT_TYPE_SIZE.\n \t(expand_class_desc): Use USItype for offset field.\n \t* tinfo.h (struct __class_type_info): Likewise.\n \n \t* method.c (build_overload_int): TYPE_PRECISION should be applied\n- \tto types.\n+\tto types.\n \n Sat Sep 28 14:44:50 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -1016,7 +1109,7 @@ Fri Sep 27 13:14:05 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Fri Sep 27 03:00:09 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (lookup_name_real): Don't try to look up anything in a\n- \tTYPENAME_TYPE.\n+\tTYPENAME_TYPE.\n \n \t* tinfo2.cc (__throw_type_match_rtti): Oops.\n \n@@ -1027,7 +1120,7 @@ Thu Sep 26 22:11:05 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Thu Sep 26 10:59:00 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* rtti.c (build_dynamic_cast): Pass tinfo fns rather than\n- \tcalling them.\n+\tcalling them.\n \t(get_tinfo_fn_dynamic): Extracted from build_typeid.\n \t* tinfo2.cc (__dynamic_cast): Adjust.\n \t\n@@ -1070,11 +1163,11 @@ Tue Sep 24 18:18:44 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \tfor cv-quals.\n \n \t* Remove .h from standard C++ headers, add new.h, move into inc\n- \tsubdirectory.\n+\tsubdirectory.\n \n \t* exception*: Remove pointer from object, constructors.  Add\n- \tdefault exception::what that uses type_info::name.  Add\n- \t__throw_bad_typeid.\n+\tdefault exception::what that uses type_info::name.  Add\n+\t__throw_bad_typeid.\n \n \t* init.c (build_new): Don't add a cookie to new (void *) T[2].\n \n@@ -1105,7 +1198,7 @@ Mon Sep 23 01:18:50 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Sun Sep 22 05:31:22 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* lex.c (do_identifier): Don't do deferred lookup in a template\n- \theader.\n+\theader.\n \n \t* typeck2.c (store_init_value): Oops.\n \n@@ -1129,7 +1222,7 @@ Sat Sep 21 19:17:28 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Thu Sep 19 16:41:07 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (begin_template_parm_list): Increment\n- \tprocessing_template_decl here.\n+\tprocessing_template_decl here.\n \t(end_template_parm_list): Not here.\n \t(process_template_parm): No need to add 1 to it now.\n \t* *.c: Use processing_template_decl instead of current_template_parms\n@@ -1148,7 +1241,7 @@ Wed Sep 18 13:30:20 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Wed Sep 18 04:24:07 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* method.c (make_thunk): Call comdat_linkage before setting the\n- \tTREE_CODE.\n+\tTREE_CODE.\n \n \t* decl2.c (comdat_linkage): Use make_decl_one_only.\n \t(import_export_decl): Likewise.\n@@ -1160,19 +1253,19 @@ Sat Sep 14 08:34:41 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* decl2.c (grokfield): Tighten checking for access decls.\n \n \t* decl.c (make_typename_type): Resolve references to\n- \tcurrent_class_type.  Set CLASSTYPE_GOT_SEMICOLON.\n+\tcurrent_class_type.  Set CLASSTYPE_GOT_SEMICOLON.\n \t(lookup_name_real): Types that depend on a template parameter get\n- \tan implicit 'typename' unless they're in the current scope.\n+\tan implicit 'typename' unless they're in the current scope.\n \t(start_decl_1): We don't care about incomplete types that depend\n- \ton a template parm.\n+\ton a template parm.\n \t(grokdeclarator): Resolve 'typename's in the type specifier that\n- \trefer to members of the current scope.\n+\trefer to members of the current scope.\n \n \t* call.c (build_over_call): Remove 'inline called before\n- \tdefinition' diagnostic.\n+\tdefinition' diagnostic.\n \t(build_method_call): Likewise.\n \t* decl.c (duplicate_decls): Downgrade 'used before declared\n- \tinline' to a warning, only with -Winline.\n+\tinline' to a warning, only with -Winline.\n \n Fri Sep 13 17:31:40 1996  Stan Shebs  <shebs@andros.cygnus.com>\n \n@@ -1191,7 +1284,7 @@ Wed Sep 11 22:14:44 1996  Mike Stump  <mrs@cygnus.com>\n Wed Sep 11 22:10:48 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* except.c (expand_start_catch_block): Add a pushlevel so that -g\n- \tworks on hppa and SPARC.\n+\tworks on hppa and SPARC.\n \n Wed Sep 11 10:18:06 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -1221,7 +1314,7 @@ Sun Sep  8 16:06:57 1996  Gerald Baumgartner  <gb@cs.purdue.edu>\n Thu Sep  5 16:51:28 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* typeck.c (build_c_cast): Don't tack a non_lvalue_expr onto a\n- \ttarget_expr.\n+\ttarget_expr.\n \n Thu Sep  5 10:05:38 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -1239,18 +1332,18 @@ Wed Sep  4 17:16:09 1996  Bob Manson  <manson@charmed.cygnus.com>\n Wed Sep  4 12:14:36 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* except.c (expand_exception_blocks): Always make sure USE and\n- \tCLOBBER insns that came at the end still do, the backend relies\n- \tupon this.\n+\tCLOBBER insns that came at the end still do, the backend relies\n+\tupon this.\n \n Wed Sep  4 07:44:48 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* call.c (build_over_call): We can only use a TARGET_EXPR of the\n- \tright type.\n+\tright type.\n \n Tue Sep  3 19:26:05 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cvt.c (convert_to_reference): Revert last change, don't complain\n- \tabout temp without target decl.\n+\tabout temp without target decl.\n \n Tue Sep  3 10:22:56 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -1263,15 +1356,15 @@ Tue Sep  3 02:38:56 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Fri Aug 30 14:26:57 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* pt.c (tsubst): And support template args inside the exception\n- \tspecification.\n+\tspecification.\n \n \t* pt.c (tsubst): Add support for exception specifications in\n- \ttemplate functions.\n+\ttemplate functions.\n \n Fri Aug 30 10:01:55 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* cp-tree.def (DECL_STMT): Eliminate the throw spec field, only 3\n- \tfields now.\n+\tfields now.\n \t* cp-tree.h (start_decl): Eliminate the throw spec parameter.\n \t(start_function): Likewise.\n \t(start_method): Likewise.\n@@ -1281,30 +1374,30 @@ Fri Aug 30 10:01:55 1996  Mike Stump  <mrs@cygnus.com>\n \t* lex.c (set_quals_and_spec): Likewise.\n \t* decl.h (grokdeclarator): Eliminate the throw spec parameter.\n \t* decl.c (shadow_tag): Eliminate the throw spec parameter to\n- \tgrokdeclarator.\n+\tgrokdeclarator.\n \t(groktypename): Likewise.\n \t(start_decl): Eliminate the throw spec parameter.  Eliminate the\n- \tthrow spec parameter to grokdeclarator.  Eliminate the throw spec\n- \tfield in DECL_STMT.\n+\tthrow spec parameter to grokdeclarator.  Eliminate the throw spec\n+\tfield in DECL_STMT.\n \t(cp_finish_decl): Eliminate the throw spec field in DECL_STMT.\n \t(grokfndecl): Remove useless set of raises.\n \t(grokdeclarator): Eliminate the throw spec parameter.  Eliminate\n- \tthe throw spec parameter to start_decl.  Pull the throw spec out\n- \tof the call declarator.\n+\tthe throw spec parameter to start_decl.  Pull the throw spec out\n+\tof the call declarator.\n \t(grokparms): Eliminate the throw spec parameter to grokdeclarator.\n \t(start_function): Eliminate the throw spec parameter.  Eliminate\n- \tthe throw spec parameter to grokdeclarator.\n+\tthe throw spec parameter to grokdeclarator.\n \t(start_method): Likewise.\n \t* decl2.c (grokfield): Likewise.\n \t(grokbitfield): Eliminate the throw spec parameter to grokdeclarator.\n \t(grokoptypename): Likewise.\n \t(finish_file): Eliminate the throw spec parameter to\n- \tstart_function.  Add throw spec to make_call_declarator.\n+\tstart_function.  Add throw spec to make_call_declarator.\n \t* except.c (init_exception_processing): Add throw spec to\n- \tmake_call_declarator.  Eliminate the throw spec parameter to\n- \tstart_decl.\n+\tmake_call_declarator.  Eliminate the throw spec parameter to\n+\tstart_decl.\n \t(expand_start_catch_block): Eliminate the throw spec parameter to\n- \tgrokdeclarator.\n+\tgrokdeclarator.\n \t(expand_builtin_throw): Add throw spec to make_call_declarator.\n \tEliminate the throw spec parameter to start_function.\n \t(start_anon_func): Likewise.\n@@ -1313,20 +1406,20 @@ Fri Aug 30 10:01:55 1996  Mike Stump  <mrs@cygnus.com>\n \t(cons_up_default_function): Add throw spec to make_call_declarator.\n \tEliminate the throw spec parameter to grokfield.\n \t* method.c (synthesize_method): Eliminate the throw spec parameter\n- \tto start_function.\n+\tto start_function.\n \t* pt.c (process_template_parm): Eliminate the throw spec parameter\n- \tto grokdeclarator.\n+\tto grokdeclarator.\n \t(tsubst): Add throw spec to make_call_declarator.\n \t(tsubst_expr): Eliminate the throw spec parameter to start_decl.\n \t(do_function_instantiation): Eliminate the throw spec parameter to\n- \tgrokdeclarator.  Eliminate the throw spec parameter to\n- \tstart_function.\n+\tgrokdeclarator.  Eliminate the throw spec parameter to\n+\tstart_function.\n \t* rtti.c (synthesize_tinfo_fn): Eliminate the throw spec parameter\n- \tto start_function.\n+\tto start_function.\n \t* parse.y (datadef): Remove non-winning optimization.\n \t(decl): Likewise.\n \t(fndef): Remove ambiguous error productions uncovered by grammer\n- \tfixing.\n+\tfixing.\n \t(constructor_declarator): Add exception_specification_opt here.\n \t(component_constructor_declarator): Likewise.\n \t(direct_after_type_declarator): Likewise.\n@@ -1348,10 +1441,10 @@ Fri Aug 30 10:01:55 1996  Mike Stump  <mrs@cygnus.com>\n Wed Aug 28 01:40:30 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* call.c (build_over_call): Also use an INIT_EXPR when\n- \tinitializing anything from an rvalue.\n+\tinitializing anything from an rvalue.\n \n \t* call.c (build_over_call): Call stabilize_reference when building\n- \tan INIT_EXPR instead of calling the copy ctor.\n+\tan INIT_EXPR instead of calling the copy ctor.\n \n \t* call.c (joust): Extend the previous change to all comparisons.\n \n@@ -1363,10 +1456,10 @@ Wed Aug 28 01:40:30 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* typeck.c (build_static_cast): Implement.\n \t* tree.c (build_cplus_new): Handle getting a TARGET_EXPR.\n \t* decl.c (grokparms): Use can_convert_arg instead of\n- \timplicit_conversion directly.\n+\timplicit_conversion directly.\n \t(copy_args_p): New fn.\n \t* cvt.c (convert_to_reference): Don't complain about temp with\n- \tstatic_cast.\n+\tstatic_cast.\n \t(build_up_reference): Handle TARGET_EXPRs.\n \t* call.c (build_over_call): Elide unnecessary temps.\n \t(can_convert*): Use new overloading code.\n@@ -1378,7 +1471,7 @@ Tue Aug 27 13:12:21 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* typeck.c (build_reinterpret_cast): Implement.\n \n \t* call.c (add_builtin_candidate): Use TYPE_PTROB_P instead of\n- \tptr_complete_ob.\n+\tptr_complete_ob.\n \t(joust): If we're comparing a function to a builtin and the worst\n \tconversion for the builtin is worse than the worst conversion for the\n \tfunction, take the function.\n@@ -1390,8 +1483,8 @@ Tue Aug 27 13:12:21 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Tue Aug 27 13:14:58 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* rtti.c (build_dynamic_cast): Don't try to dereference exprtype\n- \ttoo early. Make sure we explode if exprtype turns out to be a\n- \tNULL_TREE when it shouldn't be.\n+\ttoo early. Make sure we explode if exprtype turns out to be a\n+\tNULL_TREE when it shouldn't be.\n \n Tue Aug 27 10:56:21 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -1418,13 +1511,13 @@ Mon Aug 26 17:00:33 1996  Mike Stump  <mrs@cygnus.com>\n \t* hash.h: Rebuild.\n \t\n \t* lex.c (make_pointer_declarator): Change type_quals into\n- \tcv_qualifiers.\n+\tcv_qualifiers.\n \t(make_reference_declarator): Likewise.\n \t\n Thu Aug 22 01:09:22 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (start_function): Only check interface_* for templates\n- \twith flag_alt_external_templates.\n+\twith flag_alt_external_templates.\n \n \t* call.c (build_new_op): Check for comparison of different enum types.\n \t(build_over_call): Fix arg # output.\n@@ -1440,7 +1533,7 @@ Wed Aug 21 00:13:15 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* tree.c (error_type): Dont print reference-to-array.\n \n \t* typeck.c (convert_for_assignment): Don't say contravariance for\n- \tremoving const.\n+\tremoving const.\n \n Tue Aug 20 13:23:00 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -1457,7 +1550,7 @@ Tue Aug 20 13:23:00 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* call.c (build_new_method_call): Check for erroneous args.\n \n \t* pt.c (instantiate_class_template): Propagate\n- \tTYPE_USES_MULTIPLE_INHERITANCE.\n+\tTYPE_USES_MULTIPLE_INHERITANCE.\n \n Tue Aug 20 13:09:57 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -1517,12 +1610,12 @@ Thu Aug 15 17:27:13 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Thu Aug 15 17:09:54 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* except.c (do_unwind): Mark %i7 as used on the SPARC so we can\n- \toptimize.\n+\toptimize.\n \n Thu Aug 15 01:36:49 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (import_export_decl): Ignore #pragma interface for tinfo\n- \tfns of classes without virtual functions.\n+\tfns of classes without virtual functions.\n \n \t* call.c (add_function_candidate): Handle `this' specially.\n \t(compare_ics): Likewise.\n@@ -1557,7 +1650,7 @@ Sun Aug 11 15:20:58 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t(shadow_tag): Call push_template_decl for partial specializations.\n \t* parse.y: Likewise.\n \t* cp-tree.h (DECL_TEMPLATE_SPECIALIZATIONS): Replaces\n- \tDECL_TEMPLATE_MEMBERS.\n+\tDECL_TEMPLATE_MEMBERS.\n \t* call.c (print_z_candidates): Reduce duplication.\n \n Fri Aug  9 14:36:08 1996  Jason Merrill  <jason@yorick.cygnus.com>\n@@ -1580,29 +1673,29 @@ Thu Aug  8 17:04:18 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t(build_over_call): Or here.\n \t* typeck.c (build_function_call_real): Or here.\n \t* tree.c (bot_manip): Call mark_used on functions used in default\n- \targs.\n+\targs.\n \n Thu Aug  8 17:48:16 1996  Michael Meissner  <meissner@tiktok.cygnus.com>\n \n \t* decl2.c (import_export_vtable): Delete code that disabled vtable\n- \theuristic on systems with ASM_OUTPUT_EXTERNAL.\n+\theuristic on systems with ASM_OUTPUT_EXTERNAL.\n \n Wed Aug  7 12:44:11 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* typeck.c (build_x_function_call): Handle static call context\n \tbetter.\n \n \t* decl.c (finish_function): Set the DECL_CONTEXT of the result to\n- \tthe function, not its outer block.\n+\tthe function, not its outer block.\n \n \t* call.c (build_field_call): Pass fields on to build_opfncall\n- \tregardless of TYPE_OVERLOADS_CALL_EXPR.\n+\tregardless of TYPE_OVERLOADS_CALL_EXPR.\n \t(build_method_call): Pass on to build_new_method_call sooner.\n \n \t* typeck.c (build_ptrmemfunc): Just return what instantiate_type\n \tgives us.\n \t* class.c (instantiate_type): Don't put a POINTER_TYPE to\n- \tMETHOD_TYPE on an expression.  Also make a copy of rhs instead of\n+\tMETHOD_TYPE on an expression.  Also make a copy of rhs instead of\n \tmodifying it.\n \n Tue Aug  6 12:58:46 1996  Jason Merrill  <jason@yorick.cygnus.com>\n@@ -1635,8 +1728,8 @@ Mon Aug  5 17:17:06 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Mon Aug  5 17:07:47 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* method.c (build_overload_name): Put bug fix into code but leave\n- \tdisabled for now so we can be bug compatible with older releases\n- \tthat do repeats incorrectly.  In the future, we can enable it.\n+\tdisabled for now so we can be bug compatible with older releases\n+\tthat do repeats incorrectly.  In the future, we can enable it.\n \n Mon Aug  5 13:46:28 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -1656,7 +1749,7 @@ Sun Aug  4 15:29:11 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* cvt.c (build_up_reference): Propagate INDIRECT_BIND to \n \trecursive calls.\n \t* typeck.c (complete_type): Propagate\n- \tTYPE_NEEDS_{CONSTRUCTING,DESTRUCTOR}.\n+\tTYPE_NEEDS_{CONSTRUCTING,DESTRUCTOR}.\n \n Sat Aug  3 14:05:07 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -1695,7 +1788,7 @@ Fri Aug  2 01:26:59 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* hash.h: Regenerate.\n \t* lex.h: Add RID_NULL.\n \t* lex.c (init_lex): Create null_pointer_node here, stick it in\n- \tRID_NULL.\n+\tRID_NULL.\n \t* decl.c (init_decl_processing): Still set its type here.\n \t* cvt.c (cp_convert_to_pointer): Don't produce null_pointer_node.\n \t(convert_to_pointer_force): Likewise.\n@@ -1714,14 +1807,14 @@ Fri Aug  2 01:26:59 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t(build_over_call): Here.\n \n \t* cvt.c (build_new_method_call): Don't complain about no match if\n- \tLOOKUP_SPECULATIVELY.\n+\tLOOKUP_SPECULATIVELY.\n \t(build_over_call): Fix 'this' for virtual fn.\n \t(build_new_method_call): Add diagnostic.\n \n Thu Aug  1 16:45:09 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cvt.c (add_function_candidate): Expect 'this' and 'in_chrg' for\n- \tconstructors to be passed in.\n+\tconstructors to be passed in.\n \t(build_over_call): Likewise.\n \t(build_user_type_conversion_1): Pass them in.\n \t(convert_like): Likewise.\n@@ -1735,13 +1828,13 @@ Thu Aug  1 16:45:09 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Thu Aug  1 16:06:14 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* lex.c (do_identifier): Don't use %O on IDENTIFIER_OPNAME_Ps, use\n- \t%D instead.\n+\t%D instead.\n \n Thu Aug  1 15:24:02 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* except.c (expand_throw): Use maybe_build_cleanup_and_delete\n- \tinstead of just maybe_build_cleanup so that we deallocate the\n- \tthrown object.\n+\tinstead of just maybe_build_cleanup so that we deallocate the\n+\tthrown object.\n \n Thu Aug  1 15:18:00 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -1751,23 +1844,23 @@ Thu Aug  1 15:18:00 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Thu Aug  1 11:53:51 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* pt.c (instantiate_class_template): Call complete_type. Also, if\n- \twe're at the end of the file and we just instantiated a template\n- \tclass with a vtable, call finish_prevtable_vardecl.\n+\twe're at the end of the file and we just instantiated a template\n+\tclass with a vtable, call finish_prevtable_vardecl.\n \n \t* error.c (dump_decl): Don't explode (or explode more gracefully\n- \tas appropriate) if the object being dumped has a null type.\n+\tas appropriate) if the object being dumped has a null type.\n \t(dump_expr): Likewise.\n \n \t* search.c (build_mi_matrix): Ensure that mi_size is large enough,\n- \tby counting the number of nodes that we'll need before allocating\n- \tthe array.\n+\tby counting the number of nodes that we'll need before allocating\n+\tthe array.\n \t(lookup_fnfields): Fix comment.\n \t(breadth_first_search): Fix comment.\n \n Wed Jul 31 09:57:05 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (instantiate_class_template): Propagate TYPE_PACKED and\n- \tTYPE_ALIGN.\n+\tTYPE_ALIGN.\n \t* class.c (finish_struct): Call cplus_decl_attributes here.\n \t(finish_struct_1): Not here.\n \t* cp-tree.h: Adjust.\n@@ -1787,10 +1880,10 @@ Tue Jul 30 13:06:13 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t(build_over_call): Call require_complete_type.\n \n \t* decl.c (start_function): Statics are static even in a #pragma\n- \tinterface file.\n+\tinterface file.\n \n \t* decl2.c (import_export_vtable): Disable vtable heuristic on\n- \tsystems with ASM_OUTPUT_EXTERNAL.\n+\tsystems with ASM_OUTPUT_EXTERNAL.\n \n \t* cvt.c (compare_ics): Fix comparison of PMEM_CONV and BASE_CONV.\n \t(standard_conversion): No std conv to enum type.\n@@ -1799,7 +1892,7 @@ Tue Jul 30 13:06:13 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \tfor ptm's.\n \n \t* cvt.c (reference_binding): Bind directly to a base subobject of\n- \ta class rvalue.\n+\ta class rvalue.\n \n \t* cvt.c (build_new_op): Enforce access control.\n \n@@ -1815,18 +1908,18 @@ Tue Jul 30 09:22:53 1996  Bob Manson  <manson@charmed.cygnus.com>\n Mon Jul 29 15:48:30 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cvt.c (build_builtin_candidate): Stick a dummy conversion in if\n- \tit failed.\n+\tit failed.\n \n \t* cvt.c (build_user_type_conversion_1): Handle overloaded\n- \tconversion ops.\n+\tconversion ops.\n \n \t* cvt.c (add_builtin_candidates): Don't consider type conversion\n- \toperators for the first parameter of operator=.\n+\toperators for the first parameter of operator=.\n \n Mon Jul 29 15:33:55 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* typeck.c (complete_type): Only call layout_type if we're not\n- \texpanding a template.\n+\texpanding a template.\n \n Mon Jul 29 14:40:38 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -1847,7 +1940,7 @@ Mon Jul 29 14:40:38 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Mon Jul 29 12:05:40 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* typeck.c (build_modify_expr): Always attempt to build a call to\n- \tthe assignment operator, even if we're using a default one.\n+\tthe assignment operator, even if we're using a default one.\n \t(convert_for_initialization): Call complete_type.\n \n Mon Jul 29 11:25:08 1996  Jason Merrill  <jason@yorick.cygnus.com>\n@@ -1882,16 +1975,16 @@ Fri Jul 26 01:07:22 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Thu Jul 25 09:33:33 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* typeck.c (complete_type): Call layout_type rather than building\n- \ta new array type.\n+\ta new array type.\n \n \t* cvt.c (add_builtin_candidate): Pointer arithmetic candidates\n- \tonly use ptrdiff_t.\n+\tonly use ptrdiff_t.\n \n Wed Jul 24 12:45:08 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cvt.c: Always compile the new overloading code (but don't use it).\n \t(implicit_conversion): Add a BASE_CONV when converting to\n- \tthe same class type.\n+\tthe same class type.\n \t(convert_like): Handle BASE_CONV.\n \n Tue Jul 23 12:46:30 1996  Jason Merrill  <jason@yorick.cygnus.com>\n@@ -1901,7 +1994,7 @@ Tue Jul 23 12:46:30 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \tNEW_OVER changes:\n \t* typeck.c (build_x_function_call): Try an operator function\n- \twhenever we call an object of class type.\n+\twhenever we call an object of class type.\n \t* method.c (build_opfncall): Pass CALL_EXPRs through.\n \t* cvt.c (implicit_conversion): Do const-ref case first.\n \t(add_conv_candidate, build_object_call, op_error): New fns.\n@@ -1931,7 +2024,7 @@ Mon Jul 22 12:18:54 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \tNEW_OVER changes:\n \t* cvt.c (convert_to_reference): Don't use convert_from_refeence on\n- \tresult of build_type_conversion.\n+\tresult of build_type_conversion.\n \t(cp_convert): Only call build_method_call for ctors if\n \tbuild_type_conversion failed.\n \t(ptr_complete_ob): New function.\n@@ -2005,20 +2098,20 @@ Wed Jul 10 19:36:37 1996  Mike Stump  <mrs@cygnus.com>\n Wed Jul 10 18:20:11 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* decl.c (grokdeclarator): Check for overflow when evaluating an\n- \tarray dimension.\n+\tarray dimension.\n \n Wed Jul 10 17:26:19 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cvt.c (cp_convert): Don't check for ambiguity with constructor\n- \tif NEW_OVER.\n+\tif NEW_OVER.\n \n \t* typeck.c (build_x_function_call): Pass function overload\n- \tquestions to new overloading code if NEW_OVER.\n+\tquestions to new overloading code if NEW_OVER.\n \t* init.c (expand_aggr_init_1): Only check for type conversion ops\n- \tif we're doing copy-initialization (i.e. LOOKUP_ONLYCONVERTING).\n-  \tDon't check for ambiguity with constructor if NEW_OVER.\n+\tif we're doing copy-initialization (i.e. LOOKUP_ONLYCONVERTING).\n+\tDon't check for ambiguity with constructor if NEW_OVER.\n \t* cvt.c (convert_to_reference): Dereference the result of a type\n- \tconversion operator.\n+\tconversion operator.\n \t(build_conv): Propagate ICS_USER_FLAG.\n \t(implicit_conversion): Call instantiate_type.\n \tPass LOOKUP_ONLYCONVERTING instead of LOOKUP_NORMAL.\n@@ -2039,7 +2132,7 @@ Wed Jul 10 17:26:19 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Tue Jul  9 17:48:48 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* decl.c (lookup_name_real): If we find mem in obj when parsing\n- \t`obj->mem', make sure we return the right value.\n+\t`obj->mem', make sure we return the right value.\n \n Tue Jul  9 16:11:28 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n@@ -2052,7 +2145,7 @@ Tue Jul  9 12:46:34 1996  Mike Stump  <mrs@cygnus.com>\n Mon Jul  8 16:42:31 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* init.c (expand_aggr_init_1): Don't check type conversions if\n- \tNEW_OVER.\n+\tNEW_OVER.\n \n \t* cvt.c (z_candidate): Put back template field.\n \t(add_function_candidate): Set it.\n@@ -2068,7 +2161,7 @@ Mon Jul  8 16:18:56 1996  Bob Manson  <manson@charmed.cygnus.com>\n \t* call.c (compute_conversion_costs): Call complete_type.\n \n \t* tree.c (vec_binfo_member): Use comptypes instead of comparing\n- \tpointers, so we can handle template parameters.\n+\tpointers, so we can handle template parameters.\n \n Fri Jul  5 16:51:53 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n@@ -2095,7 +2188,7 @@ Mon Jul  1 22:58:18 1996  Bob Manson  <manson@charmed.cygnus.com>\n \t* decl.c: Add signed_size_zero_node.\n \t(init_decl_processing): Build it.\n \t* class.c (prepare_fresh_vtable): Use it instead of size_zero_node\n- \twhen we're trying to make a negative delta.\n+\twhen we're trying to make a negative delta.\n \n Mon Jul  1 17:56:19 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -2119,9 +2212,9 @@ Mon Jul  1 17:56:19 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Sat Jun 29 14:05:46 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cvt.c (cp_convert_to_pointer): Move user-defined type conversion\n- \thandling to before extraction of TYPE_PTRMEMFUNC_FN_TYPE.\n+\thandling to before extraction of TYPE_PTRMEMFUNC_FN_TYPE.\n \t(convert_to_reference): Use build_type_conversion to convert to\n- \tthe reference type directly.\n+\tthe reference type directly.\n \t(standard_conversion): Fix void* case, non-conversions.\n \t(reference_binding): Fix expr == 0 case, non-conversions.\n \t(convert_like): Support REF_BIND.\n@@ -2140,7 +2233,7 @@ Thu Jun 27 15:18:30 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* pt.c (instantiate_class_template): Call repo_template_used.\n \n \t* search.c (lookup_conversions): Only lookup conversions in\n- \tcomplete types.\n+\tcomplete types.\n \n Thu Jun 27 12:59:53 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -2156,7 +2249,7 @@ Wed Jun 26 18:29:47 1996  Bob Manson  <manson@charmed.cygnus.com>\n Mon Jun 24 17:17:32 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* except.c (start_anon_func): Make sure anonymous functions are\n- \tnever external.\n+\tnever external.\n \n Fri Jun 21 15:10:58 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -2175,8 +2268,8 @@ Thu Jun 20 23:35:38 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Thu Jun 20 14:08:40 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* decl2.c (grokbitfield): Handle constant decls appropriately.\n-  \tGive an appropriate error message now instead of spewing core\n- \tlater.\n+\tGive an appropriate error message now instead of spewing core\n+\tlater.\n \n Thu Jun 20 13:01:51 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -2190,7 +2283,7 @@ Wed Jun 19 11:37:04 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Tue Jun 18 10:02:15 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (instantiate_decl): If at_eof, call import_export_decl\n- \tregardless of DECL_INLINE.\n+\tregardless of DECL_INLINE.\n \n \t* typeck.c (mark_addressable): Set TREE_ADDRESSABLE on CONSTRUCTORs.\n \n@@ -2212,7 +2305,7 @@ Mon Jun 17 15:23:36 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Sun Jun 16 12:33:57 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (finish_vtable_vardecl): Don't trust\n- \tTREE_SYMBOL_REFERENCED for vtables of local classes.\n+\tTREE_SYMBOL_REFERENCED for vtables of local classes.\n \n Fri Jun 14 18:13:36 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -2231,7 +2324,7 @@ Tue Jun 11 15:09:18 1996  Bob Manson  <manson@charmed.cygnus.com>\n Tue Jun 11 13:56:23 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (import_export_decl): Still emit static/weak/comdat\n- \tcopies of inline template functions with -fno-implicit-templates.\n+\tcopies of inline template functions with -fno-implicit-templates.\n \n Tue Jun 11 11:42:13 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n@@ -2241,41 +2334,41 @@ Tue Jun 11 11:42:13 1996  Bob Manson  <manson@charmed.cygnus.com>\n Fri Jun  7 15:30:10 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* decl.c (build_enumerator): Always copy the INTEGER_CST used to\n- \tinitialize the enum, because we really and truly don't know where\n- \tit came from.\n+\tinitialize the enum, because we really and truly don't know where\n+\tit came from.\n \t(start_enum): Don't copy integer_zero_node because\n- \tbuild_enumerator will do it.\n+\tbuild_enumerator will do it.\n \n Fri Jun  7 11:11:09 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (finish_function): Do access control on base destructors.\n \n \t* pt.c (tsubst, case FUNCTION_DECL): Set up\n- \tIDENTIFIER_GLOBAL_VALUE for member functions so pushdecl doesn't\n- \those us.\n+\tIDENTIFIER_GLOBAL_VALUE for member functions so pushdecl doesn't\n+\those us.\n \n Fri Jun  7 10:37:33 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* cvt.c (build_up_reference): If we have already extended the\n- \tlifetime of the temporary, don't try it again.\n+\tlifetime of the temporary, don't try it again.\n \t* typeck.c (c_expand_return): Don't try and convert the return\n \tvalue twice when we want a reference, once is enough.\n \t\n Tue Jun  4 15:41:45 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (tsubst_expr, case DECL_STMT): Don't pass\n- \tLOOKUP_ONLYCONVERTING at all for now.\n+\tLOOKUP_ONLYCONVERTING at all for now.\n \n \t* search.c (add_conversions): Put the conversion function in\n- \tTREE_VALUE, the basetype in TREE_PURPOSE.\n+\tTREE_VALUE, the basetype in TREE_PURPOSE.\n \t* cvt.c (build_type_conversion): Adjust.\n \t* cvt.c (build_expr_type_conversion): Adjust.\n \t* call.c (user_harshness): Adjust.\n \n Mon Jun  3 15:30:52 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* method.c (emit_thunk): Pretend this is a FUNCTION_DECL for the\n- \tbackend's benefit.\n+\tbackend's benefit.\n \n Mon Jun 10 18:58:19 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -2294,7 +2387,7 @@ Fri May 31 14:56:13 1996  Mike Stump  <mrs@cygnus.com>\n Fri May 31 14:22:08 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* typeck.c (build_modify_expr): Don't use TREE_VALUE on a\n- \tTARGET_EXPR.\n+\tTARGET_EXPR.\n \n Wed May 29 17:04:33 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -2324,36 +2417,36 @@ Thu May 23 16:40:30 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \tTYPE_HAS_ASSIGN_REF (basetype).\n \n \t* decl.c (grokfndecl): Diagnose user definition of\n- \timplicitly-declared methods.\n+\timplicitly-declared methods.\n \n Thu May 23 12:13:08 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* method.c (do_build_copy_constructor): Add code to give\n- \tmeaningful error messages instead of crashing.\n-  \t(do_build_assign_ref): Don't synthesize assignment operators for\n- \tclasses containing reference or const members.\n+\tmeaningful error messages instead of crashing.\n+\t(do_build_assign_ref): Don't synthesize assignment operators for\n+\tclasses containing reference or const members.\n \n \t* class.c (struct base_info): Remove cant_synth_copy_ctor\n \tand cant_synth_asn_ref.\n \t(finish_base_struct): Remove the code that tries to conditionalize\n- \tsynthesis of copy constructors & assignment operators based on\n- \taccess permissions. Instead, let it fail when it tries to\n- \tsynthesize the copy constructor. This will give meaningful error\n- \tmessages instead of silently generating code to perform a bitcopy.\n+\tsynthesis of copy constructors & assignment operators based on\n+\taccess permissions. Instead, let it fail when it tries to\n+\tsynthesize the copy constructor. This will give meaningful error\n+\tmessages instead of silently generating code to perform a bitcopy.\n \n Wed May 22 11:45:19 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* lex.c (real_yylex): Remove old-n-crufty #if 0 code for\n- \tdetermining types for constant values.\n+\tdetermining types for constant values.\n \n \t* decl.c (struct named_label_list): Use instead of stuffing\n \trandom items into a TREE_LIST node.\n \t(named_label_uses): Use the new struct.\n \t(poplevel): Likewise.\n \t(lookup_label): Likewise.\n \t(define_label): Add an error message to tell the user the line\n- \twhere the goto is located in addition to the destination of the\n- \tgoto.\n+\twhere the goto is located in addition to the destination of the\n+\tgoto.\n \t(init_decl_processing): Use NULL instead of NULL_TREE to initialize\n \tnamed_label_uses.\n \t(finish_function): Likewise.\n@@ -2368,22 +2461,22 @@ Wed May 22 09:33:23 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Tue May 21 11:21:56 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* call.c (build_method_call): Always convert 'this' to the\n- \tappropriate type.\n+\tappropriate type.\n \n \t* search.c (add_conversions): Put the conversion function in\n- \tTREE_VALUE, the type in TREE_PURPOSE.\n+\tTREE_VALUE, the type in TREE_PURPOSE.\n \t* cvt.c (build_type_conversion): Adjust.\n \t* call.c (user_harshness): Adjust.\n \n \t* method.c (emit_thunk): Call temporary_allocation and\n- \tpermanent_allocation around the ASM_OUTPUT_MI_THUNK case, too.\n+\tpermanent_allocation around the ASM_OUTPUT_MI_THUNK case, too.\n \n \t* tree.c (build_cplus_array_type): Handle tweaking of\n- \tTYPE_MAIN_VARIANT here.\n+\tTYPE_MAIN_VARIANT here.\n \t* typeck.c (common_type): Not here.\n \n \t* typeck.c (complete_type): Only try to complete an array type if\n- \tit has a domain.\n+\tit has a domain.\n \n Mon May 20 14:55:59 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -2393,7 +2486,7 @@ Mon May 20 14:55:59 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Fri May 17 16:41:17 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (instantiate_class_template): Re-set\n- \tCLASSTYPE_GOT_SEMICOLON after calling finish_struct_1.\n+\tCLASSTYPE_GOT_SEMICOLON after calling finish_struct_1.\n \n Fri May 17 14:56:55 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -2429,7 +2522,7 @@ Thu May 16 15:29:33 1996  Bob Manson  <manson@charmed.cygnus.com>\n Thu May 16 13:38:58 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (instantiate_class_template): Remove obsolete check for\n- \taccess declarations.\n+\taccess declarations.\n \n Thu May 16 13:34:15 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -2516,7 +2609,7 @@ Fri May 10 11:09:57 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* cvt.c (convert_fn_ptr): We don't use thunks for pmfs.\n \n \t* method.c (emit_thunk): Set flag_omit_frame_pointer in default\n- \tcode.\n+\tcode.\n \n Thu May  9 18:18:30 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -2534,20 +2627,20 @@ Tue May  7 20:39:57 1996  Mike Stump  <mrs@cygnus.com>\n Mon May  6 01:23:32 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (finish_file): Don't try to emit functions that haven't\n- \tbeen compiled.\n+\tbeen compiled.\n \n Fri May  3 09:30:13 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (finish_vtable_vardecl): Oops.\n \n \t* decl.c (maybe_push_to_top_level): Do save previous_class_*.\n-  \tAlso store the bindings from previous_class_values.\n+\tAlso store the bindings from previous_class_values.\n \t(pop_from_top_level): Restore them.\n \n Thu May  2 21:56:49 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (finish_vtable_vardecl): Only write out vtable if its\n- \tsymbol has been referenced.\n+\tsymbol has been referenced.\n \t(finish_file): Re-join synthesis/vtable loop with inline emission\n \tloop, disable inlining when an inline is output.\n \n@@ -2567,21 +2660,21 @@ Thu May  2 16:21:17 1996  Mike Stump  <mrs@cygnus.com>\n Thu May  2 11:26:41 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (maybe_push_to_top_level): Clear out class-level bindings\n- \tcache.\n+\tcache.\n \n Wed May  1 11:26:52 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (finish_file): Also use sentries for vars with\n- \tDECL_ONE_ONLY or DECL_WEAK set (should any such happen to be\n- \tcreated).\n+\tDECL_ONE_ONLY or DECL_WEAK set (should any such happen to be\n+\tcreated).\n \n \t* lex.c (handle_cp_pragma): Disable #pragma\n- \tinterface/implementation if SUPPORTS_ONE_ONLY > 1.\n+\tinterface/implementation if SUPPORTS_ONE_ONLY > 1.\n \n Tue Apr 30 11:25:46 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* method.c (emit_thunk): Wrap default case in\n- \ttemporary/permanent_allocation.\n+\ttemporary/permanent_allocation.\n \n \t* method.c (make_thunk): Use DECL_ONE_ONLY.\n \t(emit_thunk): Call assemble_end_function.\n@@ -2601,10 +2694,10 @@ Mon Apr 29 14:32:47 1996  Mike Stump  <mrs@cygnus.com>\n Mon Apr 29 00:27:53 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (build_vtable_entry): Don't build thunks for abstract\n- \tvirtuals.\n+\tvirtuals.\n \n \t* lex.c (real_yylex): Fix handling of __PRETTY_FUNCTION__ like C\n- \tfrontend.\n+\tfrontend.\n \n Sat Apr 27 16:45:35 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -2637,7 +2730,7 @@ Wed Apr 24 15:41:15 1996  Bob Manson  <manson@charmed.cygnus.com>\n \tdefinition of flagged_type_tree is found before it is used.\n \t* lex.c: Likewise.\n \t* parse.y: Added the ftype member to the type union, and changed a\n- \tnumber of rules to use it instead of ttype. Added calls to\n+\tnumber of rules to use it instead of ttype. Added calls to\n \tcheck_for_new_type() as appropriate.\n \t* typeck2.c (check_for_new_type): New function for checking\n \tif a newly defined type appears in the specified tree.\n@@ -2669,21 +2762,21 @@ Tue Apr 23 10:52:56 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Mon Apr 22 17:28:27 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (import_export_decl): Put static data member templates\n- \tinto common storage, or make them weak, depending on whether they\n- \tare dynamically or statically initialized.\n+\tinto common storage, or make them weak, depending on whether they\n+\tare dynamically or statically initialized.\n \t(get_sentry): New function.\n \t(finish_file): Do import_export_decl for static data members before\n \tbuilding the init/fini functions.  Don't init/fini a variable that's\n \tEXTERNAL.  Use a sentry for variables in common.  Fix mismatching\n \tpush/pop_temp_slots.\n \t* decl.c (cp_finish_decl): If DECL_NOT_REALLY_EXTERN, do the\n- \texpand_static_init thang.\n+\texpand_static_init thang.\n \t* method.c (get_id_2): New function.\n \n Mon Apr 22 15:32:45 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* parse.y (empty_parms): Make sure we use C++-style prototypes\n- \twhen we're declaring member functions.\n+\twhen we're declaring member functions.\n \n Sun Apr 21 10:08:22 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -2693,12 +2786,12 @@ Sun Apr 21 10:08:22 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Thu Apr 18 08:56:54 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (make_typename_type): Handle getting a TYPE_DECL for a\n- \tname.\n+\tname.\n \t* parse.y (base_class.1): Allow 'typename foo::bar'.\n \n \t* lex.c (check_newline): Remove #pragma code that plays with the\n- \tinput stream, since we now deal with tokens.  Clear nextchar when\n- \twe're done.\n+\tinput stream, since we now deal with tokens.  Clear nextchar when\n+\twe're done.\n \t(handle_cp_pragma): Use real_yylex.\n \t(handle_sysv_pragma): Don't do skipline here.  Only call real_yylex\n \tin one place.\n@@ -2719,16 +2812,16 @@ Wed Apr 17 16:51:33 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Wed Apr 17 15:02:40 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* typeck.c (build_reinterpret_cast): Handle pointer to member\n- \tfunctions.\n+\tfunctions.\n \n Wed Apr 17 12:28:26 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n \t* lex.c (handle_cp_pragma): New function, with decl, doing the cc1plus\n- \tpragmas.\n+\tpragmas.\n \t(check_newline): Put the vtable/unit/implementation/interface pragma\n- \tcode into handle_cp_pragma, replacing it with a call.\n+\tcode into handle_cp_pragma, replacing it with a call.\n \t(handle_sysv_pragma): Give int return type, and take FINPUT and TOKEN\n- \targs.  Get the next token after handling the pragma token.\n+\targs.  Get the next token after handling the pragma token.\n \n Wed Apr 17 10:28:34 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -2748,7 +2841,7 @@ Tue Apr 16 13:44:58 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* tree.def: Add VEC_INIT_EXPR.\n \t* expr.c (cplus_expand_expr): Handle it.\n \t* init.c (build_new): Use it instead of the RTL_EXPR nastiness and\n- \tthe extra file-scope symbol nastiness.\n+\tthe extra file-scope symbol nastiness.\n \n Mon Apr 15 16:21:29 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -2766,9 +2859,9 @@ Sun Apr 14 11:34:39 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Fri Apr 12 09:08:27 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* call.c (build_method_call): Remember the original basetype we\n- \twere called with. Give an error message instead of trying\n- \t(incorrectly) to call a non-static member function through a\n- \tnon-inherited class.\n+\twere called with. Give an error message instead of trying\n+\t(incorrectly) to call a non-static member function through a\n+\tnon-inherited class.\n \n \t* search.c (expand_upcast_fixups): Mark the new fixup as\n \tDECL_ARTIFICIAL.\n@@ -2845,23 +2938,23 @@ Tue Apr  9 14:20:57 1996  Mike Stump  <mrs@cygnus.com>\n Tue Apr  9 12:10:26 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* rtti.c (build_dynamic_cast): Handle downcasting to X* given\n- \tother X subobjects in the most derived type.  Ack.\n+\tother X subobjects in the most derived type.  Ack.\n \n \t* rtti.c (build_dynamic_cast): No need to strip cv-quals here,\n- \tget_typeid will do it for us.\n+\tget_typeid will do it for us.\n \t(get_typeid_1): Break out call-building for expand_*_desc to use.\n \t(get_typeid): Call it.\n \t(expand_*_desc): Likewise.\n \t* decl.c (init_decl_processing): Don't set TYPE_BUILT_IN on char *\n- \tand void *.\n+\tand void *.\n \t(init_decl_processing): Lose builtin_type_tdescs lossage.\n \t* decl2.c (finish_vtable_vardecl): Remove obsolete code.\n \n Mon Apr  8 17:23:23 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* pt.c (tsubst): When calling set_nested_typename, use\n- \tTYPE_NESTED_NAME (current_class_type) instead of\n- \tcurrent_class_name.\n+\tTYPE_NESTED_NAME (current_class_type) instead of\n+\tcurrent_class_name.\n \n \t* decl.c (pushdecl): Likewise.\n \t(pushdecl_class_level): Likewise.\n@@ -2883,12 +2976,12 @@ Sat Apr  6 13:56:27 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* rtti.c (synthesize_tinfo_fn): Handle enums and pmfs.\n \n \t* decl2.c (finish_file): Don't synthesize artificial functions\n- \tthat are external and not inline.\n+\tthat are external and not inline.\n \n \t* rtti.c (get_tinfo_fn): If at_eof, call import_export_decl.\n \n \t* decl2.c (finish_file): Handle having new inlines added to\n- \tsaved_inlines by synthesis.\n+\tsaved_inlines by synthesis.\n \n \t* rtti.c (get_bad_cast_node): Don't require <typeinfo>.\n \n@@ -2920,17 +3013,17 @@ Fri Apr  5 17:02:09 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* cp-tree.h: Add decls.\n \n \t* method.c (hack_identifier): Also convert component_refs from\n- \treferences.\n+\treferences.\n \n \t* lex.c (cons_up_default_function): Use the type, not the name, in\n- \tdeclspecs.\n+\tdeclspecs.\n \n \t* decl2.c (import_export_vtable): Fix weak vtables.\n \n Fri Apr  5 13:30:17 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* search.c (get_base_distance_recursive): Fix access checks for\n- \tprotected bases.\n+\tprotected bases.\n \n Fri Apr  5 11:02:06 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -2999,13 +3092,13 @@ Fri Mar 29 15:51:36 1996  Bob Manson  <manson@charmed.cygnus.com>\n \tneeds_virtual_dtor with base_has_virtual.\n \n \t(finish_struct_1): Remove the old code that tried to make default\n- \tdestructors virtual. Use base_has_virtual when checking if we need\n- \tto add a vtable entry for the rtti code.\n+\tdestructors virtual. Use base_has_virtual when checking if we need\n+\tto add a vtable entry for the rtti code.\n \n Fri Mar 29 14:02:36 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (push_template_decl): Complain about template decl with\n- \tinappropriate declaration.\n+\tinappropriate declaration.\n \n Fri Mar 29 12:15:35 1996  Bob Manson  <manson@charmed.cygnus.com>\n \n@@ -3027,7 +3120,7 @@ Thu Mar 28 16:41:39 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* decl.c (shadow_tag): Fix error about anon union with methods.\n \n \t* parse.y (self_reference): Only generate a self-reference if this\n- \tis a non-template class.\n+\tis a non-template class.\n \t(opt.component_decl_list): Only use it if it was generated.\n \n \t* parse.y (component_decl_1): Use constructor_declarator.\n@@ -3043,7 +3136,7 @@ Thu Mar 28 15:11:35 1996  Bob Manson  <manson@charmed.cygnus.com>\n Thu Mar 28 14:49:26 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (process_template_parm): Allow template type parms to be\n- \tused as types for template const parms.\n+\tused as types for template const parms.\n \n Wed Mar 27 15:51:19 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -3053,7 +3146,7 @@ Wed Mar 27 15:51:19 1996  Mike Stump  <mrs@cygnus.com>\n Wed Mar 27 10:14:30 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (lookup_name_real): Be even more picky about the\n- \tambiguous lookup warning.\n+\tambiguous lookup warning.\n \t(grokdeclarator): Tweak SCOPE_REF constructor declarators here.\n \t* parse.y (constructor_declarator): Rather than here.\n \n@@ -3075,7 +3168,7 @@ Tue Mar 26 13:41:33 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* cp-tree.h: Adjust.\n \n \t* pt.c (do_function_instantiation): Separate handling of member\n- \tfunctions and non-member functions properly.\n+\tfunctions and non-member functions properly.\n \n Mon Mar 25 14:23:22 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -3098,7 +3191,7 @@ Mon Mar 25 13:30:42 1996  Bob Manson  <manson@charmed.cygnus.com>\n Mon Mar 25 13:07:19 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (cp_finish_decl): Don't build cleanups for static\n- \tvariables here.\n+\tvariables here.\n \n Fri Mar 22 17:57:55 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -3112,19 +3205,19 @@ Fri Mar 22 17:57:55 1996  Mike Stump  <mrs@cygnus.com>\n Fri Mar 22 13:48:29 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (grokdeclarator): Call bad_specifiers for typedefs.  Also\n- \tgive an error if initialized.  Pedwarn about nested type with the\n- \tsame name as its enclosing class.\n+\tgive an error if initialized.  Pedwarn about nested type with the\n+\tsame name as its enclosing class.\n \n \t* pt.c (tsubst, case TYPE_DECL): Set DECL_CONTEXT.\n \n \t* typeck.c (require_complete_type): Be sure to instantiate the\n- \tMAIN_VARIANT of the type.\n+\tMAIN_VARIANT of the type.\n \n \t* decl2.c (finish_file): Instantiate pending templates before\n- \tprocessing static constructors and destructors.\n+\tprocessing static constructors and destructors.\n \n \t* pt.c (instantiate_decl): Don't instantiate functions at toplevel\n- \tunless at_eof.\n+\tunless at_eof.\n \n Fri Mar 22 09:30:17 1996  Bob Manson  <manson@beauty.cygnus.com>\n \n@@ -3137,10 +3230,10 @@ Fri Mar 22 09:30:17 1996  Bob Manson  <manson@beauty.cygnus.com>\n Wed Mar 20 14:51:55 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* parse.y (named_complex_class_head_sans_basetype): Don't crash on\n- \tdefinition of nonexistent nested type.\n+\tdefinition of nonexistent nested type.\n \n \t* error.c (dump_decl, case TYPE_DECL): Fix decision for whether or\n- \tnot to say 'typedef'.\n+\tnot to say 'typedef'.\n \n Wed Mar 20 00:11:47 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -3156,7 +3249,7 @@ Tue Mar 19 17:56:03 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* decl2.c (build_expr_from_tree): Likewise.\n \n \t* pt.c (mangle_class_name_for_template): Always allocate\n- \tscratch_firstobj.\n+\tscratch_firstobj.\n \n Tue Mar 19 16:34:31 1996  Bob Manson  <manson@beauty.cygnus.com>\n \n@@ -3166,8 +3259,8 @@ Tue Mar 19 16:34:31 1996  Bob Manson  <manson@beauty.cygnus.com>\n Tue Mar 19 16:00:33 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (instantiate_class_template): Don't bother setting up\n- \tCLASSTYPE_TAGS explicitly, as the nested types will add\n- \tthemselves.\n+\tCLASSTYPE_TAGS explicitly, as the nested types will add\n+\tthemselves.\n \n Tue Mar 19 15:48:43 1996  Bob Manson  <manson@beauty.cygnus.com>\n \n@@ -3179,19 +3272,19 @@ Tue Mar 19 15:48:43 1996  Bob Manson  <manson@beauty.cygnus.com>\n Tue Mar 19 09:21:35 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* lex.c (do_identifier): Only do name consistency check if we're\n- \tparsing.\n+\tparsing.\n \n \t* pt.c (push_template_decl): Don't crash if we get a member defn\n \tthat doesn't match.\n \n \t* decl.c (xref_tag_from_type): New function to do an xref without\n- \talways having to figure out code_type_node.\n+\talways having to figure out code_type_node.\n \t* cp-tree.h: Declare it.\n \t* pt.c (instantiate_class_template): Use it for friend classes.\n-  \t(lookup_template_class): Use it.\n+\t(lookup_template_class): Use it.\n \n \t* typeck2.c (build_functional_cast): Pull out a single parm before\n- \tpassing it to build_c_cast.\n+\tpassing it to build_c_cast.\n \n Tue Mar 19 09:07:15 1996  Bob Manson  <manson@beauty.cygnus.com>\n \n@@ -3201,10 +3294,10 @@ Tue Mar 19 09:07:15 1996  Bob Manson  <manson@beauty.cygnus.com>\n Mon Mar 18 21:57:54 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* typeck.c (build_c_cast): Don't pull single TEMPLATE_DECL out of\n- \tan overload list.\n+\tan overload list.\n \n \t* lex.c (cons_up_default_function): Really, now, interface hackery\n- \tdoes not apply to synthesized methods.\n+\tdoes not apply to synthesized methods.\n \n Mon Mar 18 18:20:57 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -3275,7 +3368,7 @@ Mon Mar 18 13:19:03 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* cp-tree.h: Update.\n \n \t* tree.c (min_tree_cons): Call copy_to_permanent for the purpose\n- \tand value.\n+\tand value.\n \n Mon Mar 18 11:25:52 1996  Bob Manson  <manson@beauty.cygnus.com>\n \n@@ -3290,15 +3383,15 @@ Mon Mar 18 10:11:46 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Fri Mar 15 11:03:57 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (instantiate_decl): Only call import_export_decl if at_eof\n- \tand ! DECL_INLINE.\n+\tand ! DECL_INLINE.\n \n \t* decl.c (finish_function): Don't set nested based on\n- \thack_decl_function_context.\n+\thack_decl_function_context.\n \t* parse.y (function_try_block): Check for nested function.\n \t(pending_inlines): Likewise.\n \n \t* decl2.c (build_expr_from_tree): If a unary op already has a\n- \ttype, just return it.\n+\ttype, just return it.\n \n \t* decl2.c (finish_prevtable_vardecl): Use ADJUST_VTABLE_LINKAGE.\n \n@@ -3311,7 +3404,7 @@ Fri Mar 15 11:03:57 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* cp-tree.h: Adjust return types.\n \n \t* class.c (delete_duplicate_fields_1): Don't complain about\n- \tduplicate nested types if they're the same type.\n+\tduplicate nested types if they're the same type.\n \t(finish_struct): Remove check for duplicate.\n \t* decl2.c (grokfield): Don't check for typedef of anonymous type.\n \n@@ -3320,20 +3413,20 @@ Thu Mar 14 10:00:19 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* cp-tree.h: Lose SIGNATURE_GROKKING_TYPEDEF.\n \n \t* decl.c (grokdeclarator): Lose special handling of class-level\n- \ttypedef.  Lose SIGNATURE_GROKKING_TYPEDEF.  Set\n- \tSIGNATURE_HAS_OPAQUE_TYPEDECLS later.\n+\ttypedef.  Lose SIGNATURE_GROKKING_TYPEDEF.  Set\n+\tSIGNATURE_HAS_OPAQUE_TYPEDECLS later.\n \n \t* cvt.c (convert_pointer_to_real): Retain cv-quals in conversion.\n \n \t* pt.c (tsubst_copy): Strip cv-quals from destructor name types.\n \n \t* search.c (compute_access): Fix handling of anonymous union\n- \tmembers.\n+\tmembers.\n \t* class.c (finish_struct_anon): Propagate TREE_{PRIVATE,PROTECTED}\n- \tfrom anonymous unions to their members.\n+\tfrom anonymous unions to their members.\n \n \t* typeck.c (build_x_function_call): For static member functions,\n- \thand off to build_member_call.\n+\thand off to build_member_call.\n \n Wed Mar 13 14:03:34 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -3347,14 +3440,14 @@ Tue Mar 12 14:36:02 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t(expand_vec_init): Handle lists, use convert_for_initialization\n \n \t* typeck.c (convert_for_initialization): Pass LOOKUP_NO_CONVERSION\n- \twhen converting to an aggregate type.\n+\twhen converting to an aggregate type.\n \t* cvt.c (cp_convert): Pass it through.\n \n \t* typeck.c (build_conditional_expr): Handle user-defined\n- \tconversions to slightly different types.\n+\tconversions to slightly different types.\n \n \t* decl.c (grokdeclarator): Force an array type in a parm to be\n- \tpermanent.\n+\tpermanent.\n \n \t* decl2.c (do_using_directive): Sorry.\n \t(do_namespace_alias): Likewise.\n@@ -3387,7 +3480,7 @@ Thu Mar  7 14:11:49 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* tree.c (cp_build_type_variant): Just return an error_mark_node.\n \t* decl.c (make_typename_type): Don't try to get the file and line\n- \tof an identifier.\n+\tof an identifier.\n \t* typeck.c (comptypes): Handle TYPENAME_TYPE.\n \n Wed Mar  6 18:47:50 1996  Per Bothner  <bothner@kalessin.cygnus.com>\n@@ -3398,7 +3491,7 @@ Wed Mar  6 18:47:50 1996  Per Bothner  <bothner@kalessin.cygnus.com>\n Wed Mar  6 09:57:36 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* method.c (build_overload_value): Use DECL_ASSEMBLER_NAME in\n- \treferring to addresses of variables and functions.\n+\treferring to addresses of variables and functions.\n \n \t* error.c (dump_expr): Support SIZEOF_EXPR.\n \n@@ -3407,12 +3500,12 @@ Wed Mar  6 09:57:36 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* typeck.c (convert_arguments): Call complete_type.\n \n \t* method.c (hack_identifier): After giving an error, set value to\n- \terror_mark_node.\n+\terror_mark_node.\n \n Tue Mar  5 16:00:15 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* tree.c (hack_decl_function_context): Kludge around DECL_CONTEXT\n- \tlossage for local classes.\n+\tlossage for local classes.\n \t* cp-tree.h: Declare it.\n \t* decl.c (lookup_name_real): Evil, painful hack for local classes.\n \t(grokfndecl): Set DECL_CLASS_CONTEXT and DECL_NO_STATIC_CHAIN here.\n@@ -3424,7 +3517,7 @@ Tue Mar  5 16:00:15 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* lex.c (process_next_inline): Likewise.\n \t(do_pending_inlines): Likewise.\n \t* decl2.c (finish_file): Unset DECL_STATIC_FUNCTION_P when we're\n- \tdone with it.\n+\tdone with it.\n \n Mon Mar  4 22:38:39 1996  Gerald Baumgartner  <gb@alexander.cs.purdue.edu>\n \n@@ -3435,9 +3528,9 @@ Mon Mar  4 22:38:39 1996  Gerald Baumgartner  <gb@alexander.cs.purdue.edu>\n Tue Mar  5 10:21:01 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* method.c (hack_identifier): Requiring a static chain is now a\n- \thard error.\n+\thard error.\n \t* decl.c (grokdeclarator): Set DECL_NO_STATIC_CHAIN on nested\n- \tfunctions.\n+\tfunctions.\n \n Mon Mar  4 20:03:33 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -3449,22 +3542,22 @@ Mon Mar  4 20:03:33 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* pt.c (tsubst_expr): Likewise.\n \n \t* pt.c (tsubst): Use tsubst_expr for the second operand of an\n- \tARRAY_REF.\n+\tARRAY_REF.\n \n \t* decl.c (maybe_push_to_top_level): Don't save previous_class_type.\n \t(poplevel_class): Set it here.\n \t(pop_from_top_level): Pop it here if we're returning to class scope.\n \t* class.c (pushclass): Don't set it here.\n \n \t* decl.c (maybe_push_to_top_level): Save current_template_parms,\n- \tand clear it if !pseudo.\n+\tand clear it if !pseudo.\n \t(pop_from_top_level): Restore it.\n \n \t* decl2.c (finish_file): Push the dummy each time we walk the list\n- \tof vtables.\n+\tof vtables.\n \n \t* error.c (dump_expr): Support LOOKUP_EXPR and actually do\n- \tsomething for CAST_EXPR.\n+\tsomething for CAST_EXPR.\n \t\n Mon Feb 19 14:49:18 1996  Rusty Russell  <rusty@adelaide.maptek.com.au>\n \n@@ -3480,18 +3573,18 @@ Mon Mar  4 15:03:11 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* tree.c (mapcar): Propagate const and volatile properly.\n \n \t* typeck.c (complete_type): Be sure to instantiate the\n- \tMAIN_VARIANT of the type.\n+\tMAIN_VARIANT of the type.\n \n \t* method.c (synthesize_method): Class interface hackery does not\n \tapply to synthesized methods.\n \n Mon Mar  4 14:05:23 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (comp_template_args): Use comptypes rather than just\n- \tchecking for TEMPLATE_TYPE_PARM equivalence.\n+\tchecking for TEMPLATE_TYPE_PARM equivalence.\n \n \t* typeck.c (build_x_function_call): Call complete_type before\n- \tchecking TYPE_OVERLOADS_CALL_EXPR.\n+\tchecking TYPE_OVERLOADS_CALL_EXPR.\n \n Mon Mar  4 18:48:30 1996  Manfred Hollstein   <manfred@lts.sel.alcatel.de>\n \n@@ -3500,25 +3593,25 @@ Mon Mar  4 18:48:30 1996  Manfred Hollstein   <manfred@lts.sel.alcatel.de>\n Fri Mar  1 13:09:33 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (instantiate_class_template): If we don't have a pattern\n- \tyet, that's OK.\n+\tyet, that's OK.\n \t(coerce_template_parms): If we see a local class, bail.\n \n \t* decl.c (grok_reference_init): Make sure there's a type before\n- \tchecking its code.\n+\tchecking its code.\n \n \t* pt.c (do_function_instantiation): Avoid crashing on invalid decls.\n \t(push_template_decl): Likewise.\n \n \t* parse.y (named_class_head): Set\n- \tCLASSTYPE_TEMPLATE_SPECIALIZATION here if we have basetypes.\n+\tCLASSTYPE_TEMPLATE_SPECIALIZATION here if we have basetypes.\n \n \t* decl.c (xref_tag): Diagnose redeclaration of template\n- \ttype-parameter name.\n+\ttype-parameter name.\n \n \t* error.c (dump_type): Handle anonymous template type parms.\n \n \t* pt.c (instantiate_template): Use TYPE_MAIN_DECL instead of\n- \tTYPE_STUB_DECL.\n+\tTYPE_STUB_DECL.\n \t(coerce_template_parms): Likewise.\n \n Thu Feb 29 16:26:01 1996  Mike Stump  <mrs@cygnus.com>\n@@ -3529,11 +3622,11 @@ Thu Feb 29 16:26:01 1996  Mike Stump  <mrs@cygnus.com>\n Thu Feb 29 08:20:25 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (instantiate_template): Take the MAIN_VARIANT of the type\n- \tbefore trying to get its STUB_DECL.\n+\tbefore trying to get its STUB_DECL.\n \t(coerce_template_parms): Likewise.\n \n \t* parse.y (template_type_parm): If they didn't use 'class',\n- \tpretend they did after giving an error.\n+\tpretend they did after giving an error.\n \n \t* pt.c (coerce_template_parms): Diagnose use of local class.\n \n@@ -3544,15 +3637,15 @@ Thu Feb 29 08:20:25 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* parse.y (named_class_head): Diagnose mismatching types and tags.\n \n \t* decl.c (pushdecl): Type decls and class templates clash with\n- \tartificial type decls, not hide them.\n+\tartificial type decls, not hide them.\n \n \t* decl.c (redeclaration_error_message): Diagnose redefinition of\n- \ttemplates properly.\n+\ttemplates properly.\n \t(duplicate_decls): Diagnose disallowed overloads for template\n \tfunctions, too.\n \n \t* decl.c (start_decl): Call complete_type before checking for a\n- \tdestructor.\n+\tdestructor.\n \n \t* pt.c (tsubst): Use tsubst_expr on the elts of a VEC.\n \n@@ -3561,18 +3654,18 @@ Thu Feb 29 08:20:25 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Wed Feb 28 09:28:44 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (grok_op_properties): Don't check for operator++(int) in\n- \ta template.\n+\ta template.\n \n \t* tree.c (perm_manip): Return a copy of variable and function\n- \tdecls with external linkage.\n+\tdecls with external linkage.\n \n \t* tree.def: Change some of the min tree codes to type \"1\".\n \t* pt.c (uses_template_parms): Handle 'e's, return 1 for LOOKUP_EXPRs.\n \t* method.c (build_overload_int): Emit something arbitrary for\n- \tanything but an INTEGER_CST if we're in a template.\n+\tanything but an INTEGER_CST if we're in a template.\n \n \t* decl.c (cp_finish_decl): Call complete_type before deciding\n- \twhether or not to lay out the decl.\n+\twhether or not to lay out the decl.\n \n \t* lex.c (do_identifier): Check for DECL_INITIAL before using it.\n \n@@ -3581,8 +3674,8 @@ Tue Feb 27 16:35:32 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* typeck2.c (build_x_arrow): Call complete_type.\n \n \t* pt.c (add_pending_template): Broken out.\n-  \t(lookup_template_class): If -fexternal-templates, call it for all\n- \tthe methods of implemented types.\n+\t(lookup_template_class): If -fexternal-templates, call it for all\n+\tthe methods of implemented types.\n \t(instantiate_class_template): Instead of instantiating them here.\n \t(instantiate_decl): Handle -fexternal-templates earlier.\n \n@@ -3598,7 +3691,7 @@ Tue Feb 27 10:38:08 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t(grokdeclarator): Not here.\n \n \t* parse.y (template_parm): Expand full_parm inline so we can set\n- \tthe rule's precedence.\n+\tthe rule's precedence.\n \n \t* pt.c (tsubst_expr): If we're in a template, just do tsubst_copy.\n \t(tsubst): tsubst_expr the DECL_INITIAL of FIELD_DECLs.\n@@ -3612,7 +3705,7 @@ Tue Feb 27 10:38:08 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t(tsubst_copy): Likewise.\n \n \t* lex.c (do_identifier): Do pull the DECL_INITIAL out of a\n- \tCONST_DECL for a template parm.\n+\tCONST_DECL for a template parm.\n \n Mon Feb 26 12:48:18 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -3623,7 +3716,7 @@ Mon Feb 26 12:48:18 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* pt.c (tsubst): Handle pointer-to-function declarators.\n \n \t* method.c (hack_identifier): If pedantic, diagnose local class\n- \tmethods that require a static chain.\n+\tmethods that require a static chain.\n \n \t* decl.c (grok_op_properties): No longer static.\n \t* cp-tree.h: Declare it.\n@@ -3635,21 +3728,21 @@ Mon Feb 26 12:48:18 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Fri Feb 23 14:51:52 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (coerce_template_parms): Don't coerce an expression using\n- \ttemplate parms.\n+\ttemplate parms.\n \t(uses_template_parms): Also check DECL_INITIAL in CONST_DECLs.\n \t(tsubst): Don't use build_index_2_type if the max_value uses template\n \tparms.\n \t* method.c (build_overload_int): Emit something arbitrary for an\n- \texpression using template parms.\n+\texpression using template parms.\n \n \t* parse.y (template_close_bracket): New non-terminal to catch use\n- \tof '>>' instead of '> >' in template class names.\n+\tof '>>' instead of '> >' in template class names.\n \t(template_type): Use it.\n \t* Makefile.in (CONFLICTS): Causes one more r/r conflict.\n \n \t* tree.def: Add CAST_EXPR.\n \t* typeck2.c (build_functional_cast): Use CAST_EXPR instead of\n- \tCONVERT_EXPR for minimal_parse_mode.\n+\tCONVERT_EXPR for minimal_parse_mode.\n \t* typeck.c (build_c_cast): Likewise.\n \t* pt.c (tsubst_copy): Likewise.\n \t* decl2.c (build_expr_from_tree): Likewise.\n@@ -3791,7 +3884,7 @@ Thu Feb 22 13:24:15 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Thu Feb 22 13:19:44 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (do_poplevel): Oops; really return what we get from\n- \tpoplevel this time.\n+\tpoplevel this time.\n \n Thu Feb 22 11:41:44 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -3863,10 +3956,10 @@ Thu Feb 22 11:41:44 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Thu Feb 22 00:54:22 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (tsubst): Only look for matching decls at file scope for\n- \tnon-member functions.\n+\tnon-member functions.\n \n \t* call.c (build_scoped_method_call): Handle scoped destructor\n- \tcalls in templates.\n+\tcalls in templates.\n \n \t* decl.c (*_top_level): Also save previous_class_values.\n \n@@ -3875,16 +3968,16 @@ Thu Feb 22 00:54:22 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* tree.def: Likewise.\n \n \t* method.c (build_overload_identifier): For a class nested in a\n- \ttemplate class, don't mangle in the template parms from our\n- \tcontext.\n+\ttemplate class, don't mangle in the template parms from our\n+\tcontext.\n \n \t* lex.c, cp-tree.h: Remove support for template instantiations in\n- \tthe pending_inlines code.\n+\tthe pending_inlines code.\n \t* pt.c: Remove dead functions and unused arguments.\n \t(uses_template_parms): TYPENAME_TYPEs always use template parms.\n \t* parse.y: Stop passing anything to end_template_decl.\n \t* tree.c (print_lang_statistics): Only print tinst info #ifdef\n- \tGATHER_STATISTICS.\n+\tGATHER_STATISTICS.\n \n Wed Feb 21 16:57:33 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -3976,11 +4069,11 @@ Wed Feb 21 00:06:17 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* decl2.c (import_export_decl): Renamed from import_export_inline.\n \t(finish_file): Call it to do interface handling for statics.\n \t* pt.c (tsubst_copy): Call mark_used on variables and functions\n- \tused here.\n+\tused here.\n \n \t* decl2.c (finish_file): Don't emit statics we can't generate.\n \t* pt.c (instantiate_decl): Don't set interface on instantiations\n- \twe can't generate.\n+\twe can't generate.\n \n \t* cp-tree.h (struct tinst_level): Change 'classname' to 'decl'.\n \t* tree.c (print_lang_statistics): Print max template depth.\n@@ -3989,14 +4082,14 @@ Wed Feb 21 00:06:17 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t(instantiate_decl): Likewise.\n \n \t* call.c class.c cp-tree.h decl.c decl2.c error.c lex.c method.c\n- \tpt.c ptree.c tree.def: Remove all traces of UNINSTANTIATED_P_TYPE.\n+\tpt.c ptree.c tree.def: Remove all traces of UNINSTANTIATED_P_TYPE.\n \n Tue Feb 20 18:21:51 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* call.c class.c cp-tree.h cvt.c decl.c decl2.c error.c expr.c\n- \tinit.c lex.c method.c parse.y pt.c repo.c search.c spew.c tree.c\n- \ttree.def typeck.c typeck2.c xref.c: Massive, systemic changes for\n- \tthe new template implementation.\n+\tinit.c lex.c method.c parse.y pt.c repo.c search.c spew.c tree.c\n+\ttree.def typeck.c typeck2.c xref.c: Massive, systemic changes for\n+\tthe new template implementation.\n \n Tue Feb 20 17:14:29 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n@@ -4032,8 +4125,8 @@ Wed Feb 14 17:30:04 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Wed Feb 14 16:21:25 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (push_to_top_level): Start from current_binding_level\n- \tagain for now; the stl hacks depend on g++ being broken in this\n- \tway, and it'll be fixed in the template rewrite.\n+\tagain for now; the stl hacks depend on g++ being broken in this\n+\tway, and it'll be fixed in the template rewrite.\n \n \t* tree.def: Add USING_DECL.\n \t* decl2.c (do_class_using_decl): Implement.\n@@ -4042,7 +4135,7 @@ Wed Feb 14 16:21:25 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \t* error.c (dump_decl): Handle USING_DECLs.\n \t* decl.c (grokdeclarator): Remove code for handling access decls.\n \t* class.c (finish_struct_1): Adjust accordingly, treat using-decls\n- \tas access decls for now.\n+\tas access decls for now.\n \t(finish_struct): Don't check USING_DECLs for other uses of the name.\n \n \t* search.c (get_matching_virtual): Use cp_error_at.\n@@ -4074,14 +4167,14 @@ Wed Feb 14 10:36:58 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Tue Feb 13 12:51:21 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (finish_struct_1): Check for a pure-specifier on a\n- \tnon-virtual function here.\n+\tnon-virtual function here.\n \n \t* decl2.c (grok_function_init): Don't check whether the function\n- \tis virtual here.\n+\tis virtual here.\n \t(grokfield): Don't call check_for_override here.\n \n \t* decl.c (push_to_top_level): Start from inner_binding_level,\n- \tcheck class_shadowed in class levels.\n+\tcheck class_shadowed in class levels.\n \n Mon Feb 12 17:46:59 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -4095,7 +4188,7 @@ Mon Feb 12 15:47:44 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n Sat Feb 10 17:59:45 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (finish_struct_1): Set DECL_VINDEX properly on a\n- \tsynthesized dtor.\n+\tsynthesized dtor.\n \n \t* parse.y (complete_type_name): Bind global_scope earlier.\n \t(complex_type_name): Likewise.\n@@ -4104,18 +4197,18 @@ Sat Feb 10 17:59:45 1996  Jason Merrill  <jason@yorick.cygnus.com>\n Thu Feb  8 15:15:14 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (grokfndecl): Move code that looks for virtuals in base\n- \tclasses...\n+\tclasses...\n \t* class.c (check_for_override): ... to a new function.\n \t(finish_struct_1): Call it.\n \n \t* cp-tree.h: Declare warn_sign_compare.\n \n \t* typeck.c (build_binary_op_nodefault): Check warn_sign_compare\n-        rather than extra_warnings to decide whether to warn about\n-        comparison of signed and unsigned.\n+\trather than extra_warnings to decide whether to warn about\n+\tcomparison of signed and unsigned.\n \n \t* decl2.c (lang_decode_option): Handle warn_sign_compare.  -Wall\n-        implies -Wsign-compare.  -Wall doesn't imply -W.\n+\timplies -Wsign-compare.  -Wall doesn't imply -W.\n \n Wed Feb  7 15:27:57 1996  Mike Stump  <mrs@cygnus.com>\n \n@@ -4142,7 +4235,7 @@ Tue Feb  6 13:39:22 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \tMake the C++ front-end pay attention to attributes for structures.\n \t* class.c (finish_struct): New argument ATTRIBUTES, passed down into\n \tfinish_struct_1.\n- \t(finish_struct_1): New argument ATTRIBUTES; call cplus_decl_attributes.\n+\t(finish_struct_1): New argument ATTRIBUTES; call cplus_decl_attributes.\n \tTake out old round_up_size use and setting the DECL_ALIGN possibly\n \tusing it.  Take out setting of TYPE_ALIGN to round_up_size, which\n \tcan override what the attribute set."}, {"sha": "264114c33d751628e477d9b874f6b15f67fe2895", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -144,7 +144,7 @@ tinfo2.o: cc1plus $(srcdir)/cp/tinfo2.cc\n \t  -c $(srcdir)/cp/tinfo2.cc\n exception.o: cc1plus $(srcdir)/cp/exception.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n-\t  -c -O0 -fexceptions $(srcdir)/cp/exception.cc\n+\t  -c -fexceptions $(srcdir)/cp/exception.cc\n new.o: cc1plus $(srcdir)/cp/new.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new.cc"}, {"sha": "2b69c085a02186d72202fd8e7307ffa9089f303d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 59, "deletions": 27, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -3187,28 +3187,30 @@ reference_binding (rto, rfrom, expr, flags)\n   int lvalue = 1;\n   tree to = TREE_TYPE (rto);\n   tree from = rfrom;\n+  int related;\n \n   if (TREE_CODE (from) == REFERENCE_TYPE)\n     from = TREE_TYPE (from);\n   else if (! expr || ! real_lvalue_p (expr))\n     lvalue = 0;\n \n-  if (lvalue\n+  related = (TYPE_MAIN_VARIANT (to) == TYPE_MAIN_VARIANT (from)\n+\t     || (IS_AGGR_TYPE (to) && IS_AGGR_TYPE (from)\n+\t\t && DERIVED_FROM_P (to, from)));\n+\n+  if (lvalue && related\n       && TYPE_READONLY (to) >= TYPE_READONLY (from)\n       && TYPE_VOLATILE (to) >= TYPE_VOLATILE (from))\n     {\n       conv = build1 (IDENTITY_CONV, from, expr);\n \n       if (TYPE_MAIN_VARIANT (to) == TYPE_MAIN_VARIANT (from))\n \tconv = build_conv (REF_BIND, rto, conv);\n-      else if (IS_AGGR_TYPE (to) && IS_AGGR_TYPE (from)\n-\t       && DERIVED_FROM_P (to, from))\n+      else\n \t{\n \t  conv = build_conv (REF_BIND, rto, conv);\n \t  ICS_STD_RANK (conv) = STD_RANK;\n \t}\n-      else\n-\tconv = NULL_TREE;\n     }\n   else\n     conv = NULL_TREE;\n@@ -3225,8 +3227,15 @@ reference_binding (rto, rfrom, expr, flags)\n \t  if (TREE_CODE (TREE_OPERAND (conv, 0)) == BASE_CONV)\n \t    TREE_OPERAND (conv, 0) = TREE_OPERAND (TREE_OPERAND (conv, 0), 0);\n \t}\n-      if (conv && ! (TYPE_READONLY (to) && ! TYPE_VOLATILE (to)\n-\t\t     && (flags & LOOKUP_NO_TEMP_BIND) == 0))\n+      if (conv\n+\t  && ((! (TYPE_READONLY (to) && ! TYPE_VOLATILE (to)\n+\t\t  && (flags & LOOKUP_NO_TEMP_BIND) == 0))\n+\t      /* If T1 is reference-related to T2, cv1 must be the same\n+\t\t cv-qualification as, or greater cv-qualification than,\n+\t\t cv2; otherwise, the program is ill-formed.  */\n+\t      || (related\n+\t\t  && (TYPE_READONLY (to) < TYPE_READONLY (from)\n+\t\t      || TYPE_VOLATILE (to) < TYPE_VOLATILE (from)))))\n \tICS_BAD_FLAG (conv) = 1;\n     }\n \n@@ -3265,7 +3274,12 @@ implicit_conversion (to, from, expr, flags)\n \t    || IS_AGGR_TYPE (non_reference (to)))\n \t   && (flags & LOOKUP_NO_CONVERSION) == 0)\n     {\n-      if (TREE_CODE (to) == REFERENCE_TYPE\n+      cand = build_user_type_conversion_1\n+\t(to, expr, LOOKUP_ONLYCONVERTING);\n+      if (cand)\n+\tconv = cand->second_conv;\n+      if ((! conv || ICS_BAD_FLAG (conv))\n+\t  && TREE_CODE (to) == REFERENCE_TYPE\n \t  && TYPE_READONLY (TREE_TYPE (to))\n \t  && ! TYPE_VOLATILE (TREE_TYPE (to))\n \t  && (flags & LOOKUP_NO_TEMP_BIND) == 0)\n@@ -3275,13 +3289,6 @@ implicit_conversion (to, from, expr, flags)\n \t  if (cand)\n \t    conv = build_conv (REF_BIND, to, cand->second_conv);\n \t}\n-      else\n-\t{\n-\t  cand = build_user_type_conversion_1\n-\t    (to, expr, LOOKUP_ONLYCONVERTING);\n-\t  if (cand)\n-\t    conv = cand->second_conv;\n-\t}\n     }\n \n   return conv;\n@@ -4181,7 +4188,10 @@ print_z_candidates (candidates)\n }\n \n /* Returns the best overload candidate to perform the requested\n-   conversion.  */\n+   conversion.  This function is used for three the overloading situations\n+   described in [over.match.copy], [over.match.conv], and [over.match.ref].\n+   If TOTYPE is a REFERENCE_TYPE, we're trying to find an lvalue binding as\n+   per [dcl.init.ref], so we ignore temporary bindings.  */\n \n static struct z_candidate *\n build_user_type_conversion_1 (totype, expr, flags)\n@@ -4229,9 +4239,22 @@ build_user_type_conversion_1 (totype, expr, flags)\n   for (; convs; convs = TREE_CHAIN (convs))\n     {\n       tree fn = TREE_VALUE (convs);\n-      tree ics = implicit_conversion\n-\t(totype, TREE_TYPE (TREE_TYPE (fn)), 0, LOOKUP_NO_CONVERSION);\n-      if (ics)\n+      int convflags = LOOKUP_NO_CONVERSION;\n+      tree ics;\n+\n+      /* If we are called to convert to a reference type, we are trying to\n+\t find an lvalue binding, so don't even consider temporaries.  If\n+\t we don't find an lvalue binding, the caller will try again to\n+\t look for a temporary binding.  */\n+      if (TREE_CODE (totype) == REFERENCE_TYPE)\n+\tconvflags |= LOOKUP_NO_TEMP_BIND;\n+\n+      ics = implicit_conversion\n+\t(totype, TREE_TYPE (TREE_TYPE (fn)), 0, convflags);\n+\n+      if (TREE_CODE (totype) == REFERENCE_TYPE && ics && ICS_BAD_FLAG (ics))\n+\t/* ignore the near match.  */;\n+      else if (ics)\n \tfor (; fn; fn = DECL_CHAIN (fn))\n \t  {\n \t    candidates = add_function_candidate (candidates, fn, args, flags);\n@@ -4348,9 +4371,10 @@ build_new_function_call (fn, args, obj)\n \t{\n \t  if (candidates && ! candidates->next)\n \t    return build_function_call (candidates->fn, args);\n-\t  else\n-\t    cp_error (\"no matching function for call to `%D (%A)'\",\n-\t\t      TREE_PURPOSE (fn), args);\n+\t  cp_error (\"no matching function for call to `%D (%A)'\",\n+\t\t    TREE_PURPOSE (fn), args);\n+\t  if (candidates)\n+\t    print_z_candidates (candidates);\n \t  return error_mark_node;\n \t}\n       candidates = splice_viable (candidates);\n@@ -5037,11 +5061,12 @@ build_over_call (fn, convs, args, flags)\n       is_method = 1;\n     }\n \n-  for (; conv = TREE_VEC_ELT (convs, i), arg && parm;\n+  for (; arg && parm;\n        parm = TREE_CHAIN (parm), arg = TREE_CHAIN (arg), ++i)\n     {\n       tree type = TREE_VALUE (parm);\n \n+      conv = TREE_VEC_ELT (convs, i);\n       if (ICS_BAD_FLAG (conv))\n \t{\n \t  tree t = conv;\n@@ -5118,17 +5143,24 @@ build_over_call (fn, convs, args, flags)\n       && TREE_VEC_LENGTH (convs) == 1\n       && copy_args_p (fn))\n     {\n-      tree targ = NULL_TREE;\n+      tree targ;\n       arg = TREE_VALUE (TREE_CHAIN (converted_args));\n \n       /* Pull out the real argument, disregarding const-correctness.  */\n-      if (TREE_CODE (arg) == ADDR_EXPR)\n-\t{\n-\t  targ = TREE_OPERAND (arg, 0);\n+      targ = arg;\n+      while (TREE_CODE (targ) == NOP_EXPR\n+\t     || TREE_CODE (targ) == NON_LVALUE_EXPR\n+\t     || TREE_CODE (targ) == CONVERT_EXPR)\n+\ttarg = TREE_OPERAND (targ, 0);\n+      if (TREE_CODE (targ) == ADDR_EXPR)\n+\t{\n+\t  targ = TREE_OPERAND (targ, 0);\n \t  if (! comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (arg))),\n \t\t\t   TYPE_MAIN_VARIANT (TREE_TYPE (targ)), 1))\n \t    targ = NULL_TREE;\n \t}\n+      else\n+\ttarg = NULL_TREE;\n \n       if (targ)\n \targ = targ;"}, {"sha": "b527738f88d5e667f151779c6165587a116456dd", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -2809,6 +2809,7 @@ check_for_override (decl, ctype)\n \t\t}\n \t      virtualp = 1;\n \n+#if 0 /* The signature of an overriding function is not changed.  */\n \t      {\n \t\t/* The argument types may have changed...  */\n \t\ttree type = TREE_TYPE (decl);\n@@ -2823,9 +2824,10 @@ check_for_override (decl, ctype)\n \t\tif (raises)\n \t\t  type = build_exception_variant (type, raises);\n \t\tTREE_TYPE (decl) = type;\n-\t\tDECL_VINDEX (decl)\n-\t\t  = tree_cons (NULL_TREE, tmp, DECL_VINDEX (decl));\n \t      }\n+#endif\n+\t      DECL_VINDEX (decl)\n+\t\t= tree_cons (NULL_TREE, tmp, DECL_VINDEX (decl));\n \t      break;\n \t    }\n \t}"}, {"sha": "ac00c5b573bb9d2eeda8433ac2d5b14f70348f7c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -1195,10 +1195,12 @@ extern int flag_new_for_scope;\n #define EMPTY_CONSTRUCTOR_P(NODE) (TREE_CODE (NODE) == CONSTRUCTOR \\\n \t\t\t\t   && CONSTRUCTOR_ELTS (NODE) == NULL_TREE)\n \n+#if 0\n /* Indicates that a NON_LVALUE_EXPR came from a C++ reference.\n    Used to generate more helpful error message in case somebody\n    tries to take its address.  */\n #define TREE_REFERENCE_EXPR(NODE) (TREE_LANG_FLAG_3(NODE))\n+#endif\n \n /* Nonzero for _TYPE means that the _TYPE defines a destructor.  */\n #define TYPE_HAS_DESTRUCTOR(NODE) (TYPE_LANG_FLAG_2(NODE))"}, {"sha": "b0cf12b4e69fcd11ddc1e21073152a2c4353ee9e", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 14, "deletions": 233, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -371,232 +371,24 @@ convert_to_pointer_force (type, expr)\n    value we have to begin with is in ARG.\n \n    FLAGS controls how we manage access checking.\n-   DIRECT_BIND in FLAGS controls how any temporarys are generated.\n-   CHECKCONST controls if we report error messages on const subversion.  */\n+   DIRECT_BIND in FLAGS controls how any temporaries are generated.  */\n \n static tree\n build_up_reference (type, arg, flags, checkconst)\n      tree type, arg;\n      int flags, checkconst;\n {\n-  tree rval, targ;\n-  int literal_flag = 0;\n+  tree rval;\n   tree argtype = TREE_TYPE (arg);\n   tree target_type = TREE_TYPE (type);\n-  tree binfo = NULL_TREE;\n \n   my_friendly_assert (TREE_CODE (type) == REFERENCE_TYPE, 187);\n-  if ((flags & LOOKUP_PROTECT)\n-      && TYPE_MAIN_VARIANT (argtype) != TYPE_MAIN_VARIANT (target_type)\n-      && IS_AGGR_TYPE (argtype)\n-      && IS_AGGR_TYPE (target_type))\n-    {\n-      binfo = get_binfo (target_type, argtype, 1);\n-      if (binfo == error_mark_node)\n-\treturn error_mark_node;\n-      if (binfo == NULL_TREE)\n-\treturn error_not_base_type (target_type, argtype);\n-    }\n-\n-  /* Pass along const and volatile down into the type.  */\n-  if (TYPE_READONLY (type) || TYPE_VOLATILE (type))\n-    target_type = cp_build_type_variant (target_type, TYPE_READONLY (type),\n-\t\t\t\t\tTYPE_VOLATILE (type));\n-  targ = arg;\n-  if (TREE_CODE (targ) == SAVE_EXPR)\n-    targ = TREE_OPERAND (targ, 0);\n-  while (TREE_CODE (targ) == NOP_EXPR\n-\t && (TYPE_MAIN_VARIANT (argtype)\n-\t     == TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (targ, 0)))))\n-    targ = TREE_OPERAND (targ, 0);\n-\n-  switch (TREE_CODE (targ))\n-    {\n-    case INDIRECT_REF:\n-      /* This is a call to a constructor which did not know what it was\n-\t initializing until now: it needs to initialize a temporary.  */\n-      if (TREE_HAS_CONSTRUCTOR (targ))\n-\t{\n-\t  tree temp = build_cplus_new (argtype, TREE_OPERAND (targ, 0));\n-\t  TREE_HAS_CONSTRUCTOR (targ) = 0;\n-\t  return build_up_reference (type, temp, flags, 1);\n-\t}\n-      /* Let &* cancel out to simplify resulting code.\n-         Also, throw away intervening NOP_EXPRs.  */\n-      arg = TREE_OPERAND (targ, 0);\n-      if (TREE_CODE (arg) == NOP_EXPR || TREE_CODE (arg) == NON_LVALUE_EXPR\n-\t  || (TREE_CODE (arg) == CONVERT_EXPR && TREE_REFERENCE_EXPR (arg)))\n-\targ = TREE_OPERAND (arg, 0);\n-\n-      /* in doing a &*, we have to get rid of the const'ness on the pointer\n-\t value.  Haven't thought about volatile here.  Pointers come to mind\n-\t here.  */\n-      if (TREE_READONLY (arg))\n-\t{\n-\t  arg = copy_node (arg);\n-\t  TREE_READONLY (arg) = 0;\n-\t}\n-\n-      rval = build1 (CONVERT_EXPR, type, arg);\n-      TREE_REFERENCE_EXPR (rval) = 1;\n-\n-      /* propagate the const flag on something like:\n-\n-\t class Base {\n-\t public:\n-\t   int foo;\n-\t };\n-\n-      class Derived : public Base {\n-      public:\n-\tint bar;\n-      };\n-\n-      void func(Base&);\n-\n-      void func2(const Derived& d) {\n-\tfunc(d);\n-      }\n-\n-        on the d parameter.  The below could have been avoided, if the flags\n-        were down in the tree, not sure why they are not.  (mrs) */\n-      /* The below code may have to be propagated to other parts of this\n-\t switch.  */\n-      if (TREE_READONLY (targ) && !TREE_READONLY (arg)\n-\t  && (TREE_CODE (arg) == PARM_DECL || TREE_CODE (arg) == VAR_DECL)\n-\t  && TREE_CODE (TREE_TYPE (arg)) == REFERENCE_TYPE\n-\t  && (TYPE_READONLY (target_type) && checkconst))\n-\t{\n-\t  arg = copy_node (arg);\n-\t  TREE_READONLY (arg) = TREE_READONLY (targ);\n-\t}\n-      literal_flag = TREE_CONSTANT (arg);\n-\n-      goto done;\n-\n-      /* Get this out of a register if we happened to be in one by accident.\n-\t Also, build up references to non-lvalues it we must.  */\n-      /* For &x[y], return (&) x+y */\n-    case ARRAY_REF:\n-      if (mark_addressable (TREE_OPERAND (targ, 0)) == 0)\n-\treturn error_mark_node;\n-      rval = build_binary_op (PLUS_EXPR, TREE_OPERAND (targ, 0),\n-\t\t\t      TREE_OPERAND (targ, 1), 1);\n-      TREE_TYPE (rval) = type;\n-      if (TREE_CONSTANT (TREE_OPERAND (targ, 1))\n-\t  && staticp (TREE_OPERAND (targ, 0)))\n-\tTREE_CONSTANT (rval) = 1;\n-      goto done;\n-\n-    case SCOPE_REF:\n-      /* Could be a reference to a static member.  */\n-      {\n-\ttree field = TREE_OPERAND (targ, 1);\n-\tif (TREE_STATIC (field))\n-\t  {\n-\t    rval = build1 (ADDR_EXPR, type, field);\n-\t    literal_flag = 1;\n-\t    goto done;\n-\t  }\n-      }\n-\n-      /* We should have farmed out member pointers above.  */\n-      my_friendly_abort (188);\n \n-    case COMPONENT_REF:\n-      rval = build_component_addr (targ, build_pointer_type (argtype),\n-\t\t\t\t   \"attempt to make a reference to bit-field structure member `%s'\");\n-      TREE_TYPE (rval) = type;\n-      literal_flag = staticp (TREE_OPERAND (targ, 0));\n-\n-      goto done;\n-\n-      /* Anything not already handled and not a true memory reference\n-\t needs to have a reference built up.  Do so silently for\n-\t things like integers and return values from function,\n-\t but complain if we need a reference to something declared\n-\t as `register'.  */\n-\n-    case PARM_DECL:\n-      /* 'this' is not an lvalue.  */\n-      if (targ == current_class_ptr && ! flag_this_is_variable)\n-\tbreak;\n-\n-    case RESULT_DECL:\n-    case VAR_DECL:\n-    case CONST_DECL:\n-      if (staticp (targ))\n-\tliteral_flag = 1;\n-\n-      /* Fall through.  */\n-    case TARGET_EXPR:\n-      mark_addressable (targ);\n-      break;\n-\n-    case COMPOUND_EXPR:\n-      {\n-\ttree real_reference = build_up_reference (type, TREE_OPERAND (targ, 1),\n-\t\t\t\t\t\t  flags, checkconst);\n-\trval = build (COMPOUND_EXPR, type, TREE_OPERAND (targ, 0), real_reference);\n-\tTREE_CONSTANT (rval) = staticp (TREE_OPERAND (targ, 1));\n-\treturn rval;\n-      }\n-\n-    case PREINCREMENT_EXPR:\n-    case PREDECREMENT_EXPR:\n-    case MODIFY_EXPR:\n-    case INIT_EXPR:\n-      {\n-\ttree real_reference = build_up_reference (type, TREE_OPERAND (targ, 0),\n-\t\t\t\t\t\t  flags, checkconst);\n-\trval = build (COMPOUND_EXPR, type, arg, real_reference);\n-\tTREE_CONSTANT (rval) = staticp (TREE_OPERAND (targ, 0));\n-\treturn rval;\n-      }\n-\n-    case COND_EXPR:\n-      return build (COND_EXPR, type,\n-\t\t    TREE_OPERAND (targ, 0),\n-\t\t    build_up_reference (type, TREE_OPERAND (targ, 1),\n-\t\t\t\t\tflags, checkconst),\n-\t\t    build_up_reference (type, TREE_OPERAND (targ, 2),\n-\t\t\t\t\tflags, checkconst));\n-\n-      /* Undo the folding...  */\n-    case MIN_EXPR:\n-    case MAX_EXPR:\n-      return build (COND_EXPR, type,\n-\t\t    build (TREE_CODE (targ) == MIN_EXPR ? LT_EXPR : GT_EXPR,\n-\t\t\t   boolean_type_node, TREE_OPERAND (targ, 0),\n-\t\t\t   TREE_OPERAND (targ, 1)),\n-\t\t    build_up_reference (type, TREE_OPERAND (targ, 0),\n-\t\t\t\t\tflags, checkconst),\n-\t\t    build_up_reference (type, TREE_OPERAND (targ, 1),\n-\t\t\t\t\tflags, checkconst));\n-\n-    case BIND_EXPR:\n-      arg = TREE_OPERAND (targ, 1);\n-      if (arg == NULL_TREE)\n-\t{\n-\t  compiler_error (\"({ ... }) expression not expanded when needed for reference\");\n-\t  return error_mark_node;\n-\t}\n-      rval = build1 (ADDR_EXPR, type, arg);\n-      TREE_REFERENCE_EXPR (rval) = 1;\n-      return rval;\n-\n-    default:\n-      break;\n-    }\n-\n-  if ((flags & DIRECT_BIND)\n-      && ! real_lvalue_p (targ))\n+  if ((flags & DIRECT_BIND) && ! real_lvalue_p (arg))\n     {\n+      tree targ = arg;\n       if (toplevel_bindings_p ())\n-\t{\n-\t  arg = get_temp_name (argtype, 1);\n-\t  literal_flag = 1;\n-\t}\n+\targ = get_temp_name (argtype, 1);\n       else\n \t{\n \t  arg = pushdecl (build_decl (VAR_DECL, NULL_TREE, argtype));\n@@ -605,7 +397,7 @@ build_up_reference (type, arg, flags, checkconst)\n       DECL_INITIAL (arg) = targ;\n       cp_finish_decl (arg, targ, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n     }\n-  else if (TREE_ADDRESSABLE (targ) == 0 && !(flags & DIRECT_BIND))\n+  else if (!(flags & DIRECT_BIND) && ! lvalue_p (arg))\n     {\n       tree slot = build_decl (VAR_DECL, NULL_TREE, argtype);\n       arg = build (TARGET_EXPR, argtype, slot, arg, NULL_TREE, NULL_TREE);\n@@ -614,25 +406,14 @@ build_up_reference (type, arg, flags, checkconst)\n   /* If we had a way to wrap this up, and say, if we ever needed it's\n      address, transform all occurrences of the register, into a memory\n      reference we could win better.  */\n-  mark_addressable (arg);\n-  rval = build1 (ADDR_EXPR, type, arg);\n-\n- done:\n-  if (TYPE_USES_COMPLEX_INHERITANCE (argtype)\n-      || TYPE_USES_COMPLEX_INHERITANCE (target_type))\n-    {\n-      TREE_TYPE (rval) = build_pointer_type (argtype);\n-      if (flags & LOOKUP_PROTECT)\n-\trval = convert_pointer_to (target_type, rval);\n-      else\n-\trval\n-\t  = convert_to_pointer_force (build_pointer_type (target_type), rval);\n-      TREE_TYPE (rval) = type;\n-      if (TREE_CODE (rval) == PLUS_EXPR || TREE_CODE (rval) == MINUS_EXPR)\n-\tTREE_TYPE (TREE_OPERAND (rval, 0))\n-\t  = TREE_TYPE (TREE_OPERAND (rval, 1)) = type;\n-    }\n-  TREE_CONSTANT (rval) = literal_flag;\n+  rval = build_unary_op (ADDR_EXPR, arg, 1);\n+  if (flags & LOOKUP_PROTECT)\n+    rval = convert_pointer_to (target_type, rval);\n+  else\n+    rval\n+      = convert_to_pointer_force (build_pointer_type (target_type), rval);\n+  rval = build1 (CONVERT_EXPR, type, rval);\n+  TREE_CONSTANT (rval) = TREE_CONSTANT (TREE_OPERAND (rval, 0));\n   return rval;\n }\n "}, {"sha": "36dc140093ad15a884582d4a53cbcee471de0d38", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 42, "deletions": 58, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -49,8 +49,6 @@ extern struct obstack permanent_obstack;\n \n extern int current_class_depth;\n \n-extern tree cleanups_this_call;\n-\n extern tree static_ctors, static_dtors;\n \n /* Stack of places to restore the search obstack back to.  */\n@@ -5012,6 +5010,18 @@ init_decl_processing ()\n \t\t    BUILT_IN_NEXT_ARG, NULL_PTR);\n   builtin_function (\"__builtin_args_info\", int_ftype_int,\n \t\t    BUILT_IN_ARGS_INFO, NULL_PTR);\n+  builtin_function (\"__builtin_setjmp\",\n+\t\t    build_function_type (integer_type_node,\n+\t\t\t\t\t tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t\t\t    endlink)),\n+\t\t    BUILT_IN_SETJMP, NULL_PTR);\n+  builtin_function (\"__builtin_longjmp\",\n+\t\t    build_function_type (integer_type_node,\n+\t\t\t\t\t tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t\t\t    tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t       integer_type_node,\n+\t\t\t\t\t\t\t       endlink))),\n+\t\t    BUILT_IN_LONGJMP, NULL_PTR);\n \n   /* Untyped call and return.  */\n   builtin_function (\"__builtin_apply_args\", ptr_ftype,\n@@ -6569,11 +6579,6 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t}\n       else if (! toplev)\n \t{\n-\t  extern int temp_slot_level;\n-\t  extern int target_temp_slot_level;\n-\t  tree old_cleanups = cleanups_this_call;\n-\t  int old_temp_level = target_temp_slot_level;\n-\n \t  /* This is a declared decl which must live until the\n \t     end of the binding contour.  It may need a cleanup.  */\n \n@@ -6654,9 +6659,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t\t}\n \t    }\n \n-\t  push_temp_slots ();\n-\t  push_temp_slots ();\n-\t  target_temp_slot_level = temp_slot_level;\n+\t  expand_start_target_temps ();\n \n \t  if (DECL_SIZE (decl) && type != error_mark_node)\n \t    {\n@@ -6679,11 +6682,9 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t\t  && DECL_NAME (decl))\n \t\tTREE_USED (decl) = 0;\n \t    }\n+\n \t  /* Cleanup any temporaries needed for the initial value.  */\n-\t  expand_cleanups_to (old_cleanups);\n-\t  pop_temp_slots ();\n-\t  pop_temp_slots ();\n-\t  target_temp_slot_level = old_temp_level;\n+\t  expand_end_target_temps ();\n \n \t  if (DECL_SIZE (decl) && type != error_mark_node)\n \t    {\n@@ -6777,11 +6778,6 @@ expand_static_init (decl, init)\n       /* Emit code to perform this initialization but once.  */\n       tree temp;\n \n-      extern int temp_slot_level;\n-      extern int target_temp_slot_level;\n-      tree old_cleanups;\n-      int old_temp_level;\n-\n       /* Remember this information until end of file.  */\n       push_obstacks (&permanent_obstack, &permanent_obstack);\n \n@@ -6790,11 +6786,7 @@ expand_static_init (decl, init)\n       rest_of_decl_compilation (temp, NULL_PTR, 0, 0);\n       expand_start_cond (build_binary_op (EQ_EXPR, temp,\n \t\t\t\t\t  integer_zero_node, 1), 0);\n-      old_cleanups = cleanups_this_call;\n-      old_temp_level = target_temp_slot_level;\n-      push_temp_slots ();\n-      push_temp_slots ();\n-      target_temp_slot_level = temp_slot_level;\n+      expand_start_target_temps ();\n \n       expand_assignment (temp, integer_one_node, 0, 0);\n       if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl))\n@@ -6807,10 +6799,7 @@ expand_static_init (decl, init)\n \texpand_assignment (decl, init, 0, 0);\n \n       /* Cleanup any temporaries needed for the initial value.  */\n-      expand_cleanups_to (old_cleanups);\n-      pop_temp_slots ();\n-      pop_temp_slots ();\n-      target_temp_slot_level = old_temp_level;\n+      expand_end_target_temps ();\n \n       if (TYPE_NEEDS_DESTRUCTOR (TREE_TYPE (decl)))\n \t{\n@@ -9195,9 +9184,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t      }\n \n \t    /* Tell grokfndecl if it needs to set TREE_PUBLIC on the node.  */\n-\t    publicp = (! friendp\n-\t\t       || RIDBIT_SETP (RID_EXTERN, specbits)\n-\t\t       || ! (funcdef_flag < 0 || inlinep));\n+\t    publicp = (! friendp || ! staticp);\n \t    decl = grokfndecl (ctype, type, declarator,\n \t\t\t       virtualp, flags, quals, raises, attrlist,\n \t\t\t       friendp ? -1 : 0, publicp, inlinep,\n@@ -9395,11 +9382,10 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t  type = build_cplus_method_type (build_type_variant (ctype, constp, volatilep),\n \t\t\t\t\t  TREE_TYPE (type), TYPE_ARG_TYPES (type));\n \n-\t/* Record presence of `static'.  In C++, `inline' implies `static'.  */\n+\t/* Record presence of `static'.  */\n \tpublicp = (ctype != NULL_TREE\n \t\t   || RIDBIT_SETP (RID_EXTERN, specbits)\n-\t\t   || (!RIDBIT_SETP (RID_STATIC, specbits)\n-\t\t       && !RIDBIT_SETP (RID_INLINE, specbits)));\n+\t\t   || !RIDBIT_SETP (RID_STATIC, specbits));\n \n \tdecl = grokfndecl (ctype, type, original_name,\n \t\t\t   virtualp, flags, quals, raises, attrlist,\n@@ -11281,6 +11267,7 @@ store_parm_decls ()\n   register tree fndecl = current_function_decl;\n   register tree parm;\n   int parms_have_cleanups = 0;\n+  tree cleanups = NULL_TREE;\n \n   /* This is either a chain of PARM_DECLs (when a prototype is used).  */\n   tree specparms = current_function_parms;\n@@ -11355,10 +11342,10 @@ store_parm_decls ()\n \t\t  && (cleanup = maybe_build_cleanup (parm), cleanup))\n \t\t{\n \t\t  expand_decl (parm);\n-\t\t  if (! expand_decl_cleanup (parm, cleanup))\n-\t\t    cp_error (\"parser lost in parsing declaration of `%D'\",\n-\t\t\t      parm);\n \t\t  parms_have_cleanups = 1;\n+\n+\t\t  /* Keep track of the cleanups.  */\n+\t\t  cleanups = tree_cons (parm, cleanup, cleanups);\n \t\t}\n \t    }\n \t  else\n@@ -11392,6 +11379,20 @@ store_parm_decls ()\n   if (! processing_template_decl)\n     expand_function_start (fndecl, parms_have_cleanups);\n \n+  /* Now that we have initialized the parms, we can start their\n+     cleanups.  We cannot do this before, since expand_decl_cleanup\n+     should not be called before the parm can be used.  */\n+  if (parms_have_cleanups\n+      && ! processing_template_decl)      \n+    {\n+      for (cleanups = nreverse (cleanups); cleanups; cleanups = TREE_CHAIN (cleanups))\n+\t{\n+\t  if (! expand_decl_cleanup (TREE_PURPOSE (cleanups), TREE_VALUE (cleanups)))\n+\t    cp_error (\"parser lost in parsing declaration of `%D'\",\n+\t\t      TREE_PURPOSE (cleanups));\n+\t}\n+    }\n+\n   /* Create a binding contour which can be used to catch\n      cleanup-generated temporaries.  Also, if the return value needs or\n      has initialization, deal with that now.  */\n@@ -12329,9 +12330,6 @@ maybe_build_cleanup_1 (decl, auto_delete)\n \trval = build_compound_expr (tree_cons (NULL_TREE, rval,\n \t\t\t\t\t       build_tree_list (NULL_TREE, build_vbase_delete (type, decl))));\n \n-      /* Since this is a cleanup, UNSAVE it now.  */\n-      rval = unsave_expr (rval);\n-\n       if (TREE_CODE (decl) != PARM_DECL)\n \tresume_momentary (temp);\n \n@@ -12372,20 +12370,15 @@ void\n cplus_expand_expr_stmt (exp)\n      tree exp;\n {\n-  extern int temp_slot_level;\n-  extern int target_temp_slot_level; \n-  tree old_cleanups = cleanups_this_call;\n-  int old_temp_level = target_temp_slot_level;\n-  push_temp_slots ();\n-  push_temp_slots ();\n-  target_temp_slot_level = temp_slot_level;\n-\n   if (processing_template_decl)\n     {\n       add_tree (build_min_nt (EXPR_STMT, exp));\n       return;\n     }\n \n+  /* Arrange for all temps to disappear.  */\n+  expand_start_target_temps ();\n+\n   if (TREE_TYPE (exp) == unknown_type_node)\n     {\n       if (TREE_CODE (exp) == ADDR_EXPR || TREE_CODE (exp) == TREE_LIST)\n@@ -12415,16 +12408,7 @@ cplus_expand_expr_stmt (exp)\n \n   /* Clean up any pending cleanups.  This happens when a function call\n      returns a cleanup-needing value that nobody uses.  */\n-  expand_cleanups_to (old_cleanups);\n-  pop_temp_slots ();\n-  pop_temp_slots ();\n-  target_temp_slot_level = old_temp_level;\n-  /* There might something left from building the trees.  */\n-  if (cleanups_this_call)\n-    {\n-      expand_cleanups_to (NULL_TREE);\n-    }\n-  free_temp_slots ();\n+  expand_end_target_temps ();\n }\n \n /* When a stmt has been parsed, this function is called."}, {"sha": "1e8577af6b2c3e13bc3903f9a33e8b19e308d178", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -38,7 +38,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n \n extern tree get_file_function_name ();\n-extern tree cleanups_this_call;\n static void grok_function_init PROTO((tree, tree));\n void import_export_decl ();\n extern int current_class_depth;\n@@ -420,7 +419,6 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n   {\"huge-objects\", &flag_huge_objects, 1},\n   {\"conserve-space\", &flag_conserve_space, 1},\n   {\"vtable-thunks\", &flag_vtable_thunks, 1},\n-  {\"short-temps\", &flag_short_temps, 1},\n   {\"access-control\", &flag_access_control, 1},\n   {\"nonansi-builtins\", &flag_no_nonansi_builtin, 0},\n   {\"gnu-keywords\", &flag_no_gnu_keywords, 0},\n@@ -2919,15 +2917,8 @@ finish_file ()\n \n       while (vars)\n \t{\n-\t  extern int temp_slot_level;\n-\t  extern int target_temp_slot_level; \n \t  tree decl = TREE_VALUE (vars);\n \t  tree init = TREE_PURPOSE (vars);\n-\t  tree old_cleanups = cleanups_this_call;\n-\t  int old_temp_level = target_temp_slot_level;\n-\t  push_temp_slots ();\n-\t  push_temp_slots ();\n-\t  target_temp_slot_level = temp_slot_level;\n \n \t  /* If this was a static attribute within some function's scope,\n \t     then don't initialize it here.  Also, don't bother\n@@ -2940,9 +2931,9 @@ finish_file ()\n \n \t  if (TREE_CODE (decl) == VAR_DECL)\n \t    {\n-\t  int protect = (TREE_PUBLIC (decl) && (DECL_COMMON (decl)\n-\t\t\t\t\t\t|| DECL_ONE_ONLY (decl)\n-\t\t\t\t\t\t|| DECL_WEAK (decl)));\n+\t      int protect = (TREE_PUBLIC (decl) && (DECL_COMMON (decl)\n+\t\t\t\t\t\t    || DECL_ONE_ONLY (decl)\n+\t\t\t\t\t\t    || DECL_WEAK (decl)));\n \n \t      /* Set these global variables so that GDB at least puts\n \t\t us near the declaration which required the initialization.  */\n@@ -2964,6 +2955,8 @@ finish_file ()\n \t\t  expand_start_cond (sentry, 0);\n \t\t}\n \n+\t      expand_start_target_temps ();\n+\n \t      if (IS_AGGR_TYPE (TREE_TYPE (decl))\n \t\t  || TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n \t\texpand_aggr_init (decl, init, 0, 0);\n@@ -2977,6 +2970,9 @@ finish_file ()\n \t      else\n \t\texpand_assignment (decl, init, 0, 0);\n \n+\t      /* Cleanup any temporaries needed for the initial value.  */\n+\t      expand_end_target_temps ();\n+\n \t      if (protect)\n \t\texpand_end_cond ();\n \n@@ -2987,13 +2983,7 @@ finish_file ()\n \t    ;\n \t  else my_friendly_abort (22);\n \n-\t  /* Cleanup any temporaries needed for the initial value.  */\n-\t  expand_cleanups_to (old_cleanups);\n \tnext_mess:\n-\t  pop_temp_slots ();\n-\t  pop_temp_slots ();\n-\t  target_temp_slot_level = old_temp_level;\n-\n \t  vars = TREE_CHAIN (vars);\n \t}\n "}, {"sha": "efe97626a74ef07db1101a744cb9e4c4f7310860", "filename": "gcc/cp/except.c", "status": "modified", "additions": 86, "deletions": 38, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -35,12 +35,12 @@ Boston, MA 02111-1307, USA.  */\n \n rtx expand_builtin_return_addr\tPROTO((enum built_in_function, int, rtx));\n \n-/* holds the fndecl for __builtin_return_address () */\n+/* Holds the fndecl for __builtin_return_address.  */\n tree builtin_return_address_fndecl;\n \n /* A couple of backend routines from m88k.c */\n \n-/* used to cache a call to __builtin_return_address () */\n+/* Used to cache a call to __builtin_return_address.  */\n static tree BuiltinReturnAddress;\n      \n \n@@ -163,18 +163,17 @@ extern rtx gen_nop\t\tPROTO(());\n /* local globals for function calls\n    ====================================================================== */\n \n-/* used to cache \"terminate ()\", \"unexpected ()\", \"set_terminate ()\", and\n-   \"set_unexpected ()\" after default_conversion. (lib-except.c)  */\n+/* Used to cache \"terminate\", \"unexpected\", \"set_terminate\", and\n+   \"set_unexpected\" after default_conversion. (lib-except.c)  */\n static tree Terminate, Unexpected, SetTerminate, SetUnexpected, CatchMatch;\n \n-/* used to cache __find_first_exception_table_match ()\n-   for throw (lib-except.c)  */\n+/* Used to cache __find_first_exception_table_match for throw.  */\n static tree FirstExceptionMatch;\n \n-/* used to cache a call to __unwind_function () (lib-except.c)  */\n+/* Used to cache a call to __unwind_function.  */\n static tree Unwind;\n \n-/* holds a ready to emit call to \"terminate ()\".  */\n+/* Holds a ready to emit call to \"terminate\".  */\n static tree TerminateFunctionCall;\n \n static tree empty_fndecl;\n@@ -245,8 +244,8 @@ init_exception_processing ()\n   tree PFV = build_pointer_type (build_function_type\n \t\t\t\t (void_type_node, void_list_node));\n \n-  /* arg list for the build_function_type call for set_terminate () and\n-     set_unexpected () */\n+  /* Arg list for the build_function_type call for set_terminate and\n+     set_unexpected.  */\n   tree pfvlist = tree_cons (NULL_TREE, PFV, void_list_node);\n \n   /* void (*pfvtype (void (*) ()))() */\n@@ -343,6 +342,10 @@ init_exception_processing ()\n   DECL_COMMON (d) = 1;\n   cp_finish_decl (d, NULL_TREE, NULL_TREE, 1, 0);\n   saved_in_catch = lookup_name (get_identifier (\"__eh_in_catch\"), 0);\n+\n+  /* If we use setjmp/longjmp EH, arrange for all cleanup actions to\n+     be protected with __terminate.  */\n+  protect_cleanup_actions_with_terminate = 1;\n }\n \n /* Build a type value for use at runtime for a type that is matched\n@@ -448,6 +451,8 @@ expand_start_catch_block (declspecs, declarator)\n   false_label_rtx = gen_label_rtx ();\n   push_label_entry (&false_label_stack, false_label_rtx, NULL_TREE);\n \n+  emit_line_note (input_filename, lineno);\n+\n   if (declspecs)\n     {\n       tree exp;\n@@ -460,8 +465,11 @@ expand_start_catch_block (declspecs, declarator)\n \t{\n \t  error (\"invalid catch parameter\");\n \n-\t  /* This is cheap, but we want to maintain the data structures.  */\n+\t  /* This is cheap, but we want to maintain the data\n+             structures.  */\n+\n \t  expand_eh_region_start ();\n+\n \t  return;\n \t}\n \n@@ -513,11 +521,17 @@ expand_start_catch_block (declspecs, declarator)\n \n   emit_move_insn (DECL_RTL (saved_in_catch), const1_rtx);\n \n-  /* Because we are reordered out of line, we arrange\n-     to rethrow in the outer context, should we encounter\n-     an exception in the catch handler.\n+  /* If we are not doing setjmp/longjmp EH, because we are reordered\n+     out of line, we arrange to rethrow in the outer context so as to\n+     skip through the terminate region we are nested in, should we\n+     encounter an exception in the catch handler.\n \n-     Matches the end in expand_end_catch_block ().  */\n+     If we are doing setjmp/longjmp EH, we need to skip through the EH\n+     object cleanup region.  This isn't quite right, as we really need\n+     to clean the object up, but we cannot do that until we track\n+     multiple EH objects.\n+\n+     Matches the end in expand_end_catch_block.  */\n   expand_eh_region_start ();\n \n   emit_line_note (input_filename, lineno);\n@@ -539,23 +553,42 @@ expand_end_catch_block ()\n   if (! doing_eh (1))\n     return;\n \n-  /* Fall to outside the try statement when done executing handler and\n-     we fall off end of handler.  This is jump Lresume in the\n-     documentation.  */\n-  expand_goto (top_label_entry (&caught_return_label_stack));\n-\n   t = make_node (RTL_EXPR);\n   TREE_TYPE (t) = void_type_node;\n   RTL_EXPR_RTL (t) = const0_rtx;\n   TREE_SIDE_EFFECTS (t) = 1;\n   start_sequence_for_rtl_expr (t);\n-  expand_internal_throw (DECL_RTL (top_label_entry (&caught_return_label_stack)));\n+\n+  if (exceptions_via_longjmp)\n+    {\n+      /* If we are doing setjmp/longjmp EH, we need to skip through\n+\t the EH object cleanup region.  This isn't quite right, as we\n+\t really need to clean the object up, but we cannot do that\n+\t until we track multiple EH objects.  */\n+\n+      emit_library_call (sjpopnthrow_libfunc, 0, VOIDmode, 0);\n+      emit_barrier ();\n+    }\n+  else\n+    {\n+      /* If we are not doing setjmp/longjmp EH, we need an extra\n+\t region around the whole catch block to skip through the\n+\t terminate region we are nested in.  */\n+\n+      expand_internal_throw (DECL_RTL (top_label_entry (&caught_return_label_stack)));\n+    }\n+\n   RTL_EXPR_SEQUENCE (t) = get_insns ();\n   end_sequence ();\n \n-  /* Matches the start in expand_start_catch_block ().  */\n+  /* Matches the start in expand_start_catch_block.  */\n   expand_eh_region_end (t);\n \n+  /* Fall to outside the try statement when done executing handler and\n+     we fall off end of handler.  This is jump Lresume in the\n+     documentation.  */\n+  expand_goto (top_label_entry (&caught_return_label_stack));\n+\n   expand_leftover_cleanups ();\n \n   /* Cleanup the EH parameter.  */\n@@ -580,7 +613,7 @@ do_unwind (inner_throw_label)\n   rtx return_val_rtx;\n   rtx temp;\n \n-  /* call to  __builtin_return_address () */\n+  /* Call to  __builtin_return_address. */\n   params = tree_cons (NULL_TREE, integer_zero_node, NULL_TREE);\n   fcall = build_function_call (BuiltinReturnAddress, params);\n   return_val_rtx = expand_expr (fcall, NULL_RTX, Pmode, 0);\n@@ -633,7 +666,7 @@ do_unwind (inner_throw_label)\n \n #if 0\n   /* I would like to do this here, but the move below doesn't seem to work.  */\n-  /* call to  __builtin_return_address () */\n+  /* Call to  __builtin_return_address.  */\n   params = tree_cons (NULL_TREE, integer_zero_node, NULL_TREE);\n   fcall = build_function_call (BuiltinReturnAddress, params);\n   return_val_rtx = expand_expr (fcall, NULL_RTX, Pmode, 0);\n@@ -651,7 +684,7 @@ do_unwind (inner_throw_label)\n }\n \n \n-/* is called from expand_exception_blocks () to generate the code in a function\n+/* Is called from expand_exception_blocks to generate the code in a function\n    to \"throw\" if anything in the function needs to perform a throw.\n \n    expands \"throw\" as the following pseudo code:\n@@ -731,7 +764,7 @@ expand_builtin_throw ()\n   /* code to deal with unwinding and looking for it again */\n   emit_label (gotta_rethrow_it);\n \n-  /* call to  __builtin_return_address () */\n+  /* Call to  __builtin_return_address.  */\n #if defined (ARM_FRAME_RTX)  /* was __arm */\n   /* This should be moved into arm.h:RETURN_ADDR_RTX */\n   /* This replaces a 'call' to __builtin_return_address */\n@@ -743,7 +776,7 @@ expand_builtin_throw ()\n   return_val_rtx = expand_expr (fcall, NULL_RTX, Pmode, 0);\n #endif\n \n-  /* did __builtin_return_address () return a valid address? */\n+  /* Did __builtin_return_address return a valid address?  */\n   emit_cmp_insn (return_val_rtx, const0_rtx, EQ, NULL_RTX,\n \t\t GET_MODE (return_val_rtx), 0, 0);\n \n@@ -837,6 +870,7 @@ expand_end_eh_spec (raises)\n   do_function_call (Unexpected, NULL_TREE, NULL_TREE);\n   assemble_external (TREE_OPERAND (Unexpected, 0));\n   emit_barrier ();\n+\n   expand_eh_region_end (second_try);\n   \n   emit_label (check);\n@@ -890,7 +924,6 @@ expand_exception_blocks ()\n \n   funcend = gen_label_rtx ();\n   emit_jump (funcend);\n-  /* expand_null_return (); */\n \n   start_sequence ();\n \n@@ -931,12 +964,22 @@ expand_exception_blocks ()\n \n   if (insns)\n     {\n-      /* Is this necessary?  */\n-      assemble_external (TREE_OPERAND (Terminate, 0));\n+      /* We cannot protect n regions this way if we must flow into the\n+\t EH region through the top of the region, as we have to with\n+\t the setjmp/longjmp approach.  */\n+      if (exceptions_via_longjmp == 0)\n+\t{\n+\t  /* Is this necessary?  */\n+\t  assemble_external (TREE_OPERAND (Terminate, 0));\n+\n+\t  expand_eh_region_start ();\n+\t}\n \n-      expand_eh_region_start ();\n       emit_insns (insns);\n-      expand_eh_region_end (TerminateFunctionCall);\n+\n+      if (exceptions_via_longjmp == 0)\n+\texpand_eh_region_end (TerminateFunctionCall);\n+\n       expand_leftover_cleanups ();\n     }\n \n@@ -1125,13 +1168,18 @@ expand_throw (exp)\n       /* This part is easy, as we don't have to do anything else.  */\n     }\n \n-  /* This is the label that represents where in the code we were, when\n-     we got an exception.  This needs to be updated when we rethrow an\n-     exception, so that the matching routine knows to search out.  */\n-  label = gen_label_rtx ();\n-  emit_label (label);\n+  if (exceptions_via_longjmp)\n+    emit_throw ();\n+  else\n+    {\n+      /* This is the label that represents where in the code we were, when\n+\t we got an exception.  This needs to be updated when we rethrow an\n+\t exception, so that the matching routine knows to search out.  */\n+      label = gen_label_rtx ();\n+      emit_label (label);\n \n-  expand_internal_throw (label);\n+      expand_internal_throw (label);\n+    }\n }\n \n /* Build a throw expression.  */"}, {"sha": "5d9503fac545eeae8d96f90941f3110f693c9c8a", "filename": "gcc/cp/exception.cc", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexception.cc?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -30,22 +30,23 @@\n #include \"typeinfo\"\n #include \"exception\"\n \n-/* terminate (), unexpected (), set_terminate (), set_unexpected () as\n-   well as the default terminate func and default unexpected func */\n+/* Define terminate, unexpected, set_terminate, set_unexpected as\n+   well as the default terminate func and default unexpected func.  */\n+\n+extern terminate_handler __terminate_func;\n \n void\n-__default_terminate ()\n+terminate ()\n {\n-  abort ();\n+  __terminate_func ();\n }\n \n void\n __default_unexpected ()\n {\n-  __default_terminate ();\n+  terminate ();\n }\n \n-static terminate_handler __terminate_func = __default_terminate;\n static unexpected_handler __unexpected_func = __default_unexpected;\n \n terminate_handler\n@@ -66,12 +67,6 @@ set_unexpected (unexpected_handler func)\n   return old;\n }\n \n-void\n-terminate ()\n-{\n-  __terminate_func ();\n-}\n-\n void\n unexpected ()\n {"}, {"sha": "332679d9857909362c3e69cb4ea8cd14b69fcb74", "filename": "gcc/cp/init.c", "status": "modified", "additions": 19, "deletions": 57, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -27,6 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"cp-tree.h\"\n #include \"flags.h\"\n #include \"output.h\"\n+#include \"except.h\"\n \n /* In C++, structures with well-defined constructors are initialized by\n    those constructors, unasked.  CURRENT_BASE_INIT_LIST\n@@ -39,8 +40,6 @@ Boston, MA 02111-1307, USA.  */\n    line.  Perhaps this was not intended.  */\n tree current_base_init_list, current_member_init_list;\n \n-extern tree cleanups_this_call;\n-\n void emit_base_init ();\n void check_base_init ();\n static void expand_aggr_vbase_init ();\n@@ -153,13 +152,8 @@ perform_member_init (member, name, init, explicit)\n {\n   tree decl;\n   tree type = TREE_TYPE (member);\n-  extern int temp_slot_level;\n-  extern int target_temp_slot_level; \n-  tree old_cleanups = cleanups_this_call;\n-  int old_temp_level = target_temp_slot_level;\n-  push_temp_slots ();\n-  push_temp_slots ();\n-  target_temp_slot_level = temp_slot_level;\n+\n+  expand_start_target_temps ();\n \n   if (TYPE_NEEDS_CONSTRUCTING (type)\n       || (init && TYPE_HAS_CONSTRUCTOR (type)))\n@@ -219,15 +213,8 @@ perform_member_init (member, name, init, explicit)\n \t  expand_expr_stmt (build_modify_expr (decl, INIT_EXPR, init));\n \t}\n     }\n-  expand_cleanups_to (old_cleanups);\n-  pop_temp_slots ();\n-  pop_temp_slots ();\n-  target_temp_slot_level = old_temp_level;\n-  /* There might something left from building the trees.  */\n-  if (cleanups_this_call)\n-    {\n-      expand_cleanups_to (NULL_TREE);\n-    }\n+\n+  expand_end_target_temps ();\n   free_temp_slots ();\n \n   if (TYPE_NEEDS_DESTRUCTOR (type))\n@@ -589,27 +576,14 @@ emit_base_init (t, immediately)\n \n       if (init != void_list_node)\n \t{\n-\t  extern int temp_slot_level;\n-\t  extern int target_temp_slot_level; \n-\t  tree old_cleanups = cleanups_this_call;\n-\t  int old_temp_level = target_temp_slot_level;\n-\t  push_temp_slots ();\n-\t  push_temp_slots ();\n-\t  target_temp_slot_level = temp_slot_level;\n+\t  expand_start_target_temps ();\n \n \t  member = convert_pointer_to_real (base_binfo, current_class_ptr);\n \t  expand_aggr_init_1 (base_binfo, NULL_TREE,\n \t\t\t      build_indirect_ref (member, NULL_PTR), init,\n \t\t\t      BINFO_OFFSET_ZEROP (base_binfo), LOOKUP_NORMAL);\n-\t  expand_cleanups_to (old_cleanups);\n-\t  pop_temp_slots ();\n-\t  pop_temp_slots ();\n-\t  target_temp_slot_level = old_temp_level;\n-\t  /* There might something left from building the trees.  */\n-\t  if (cleanups_this_call)\n-\t    {\n-\t      expand_cleanups_to (NULL_TREE);\n-\t    }\n+\n+\t  expand_end_target_temps ();\n \t  free_temp_slots ();\n \t}\n \n@@ -796,28 +770,14 @@ expand_aggr_vbase_init_1 (binfo, exp, addr, init_list)\n   tree init = purpose_member (binfo, init_list);\n   tree ref = build_indirect_ref (addr, NULL_PTR);\n \n-  extern int temp_slot_level;\n-  extern int target_temp_slot_level; \n-  tree old_cleanups = cleanups_this_call;\n-  int old_temp_level = target_temp_slot_level;\n-  push_temp_slots ();\n-  push_temp_slots ();\n-  target_temp_slot_level = temp_slot_level;\n+  expand_start_target_temps ();\n \n   if (init)\n     init = TREE_VALUE (init);\n   /* Call constructors, but don't set up vtables.  */\n   expand_aggr_init_1 (binfo, exp, ref, init, 0, LOOKUP_COMPLAIN);\n \n-  expand_cleanups_to (old_cleanups);\n-  pop_temp_slots ();\n-  pop_temp_slots ();\n-  target_temp_slot_level = old_temp_level;\n-  /* There might something left from building the trees.  */\n-  if (cleanups_this_call)\n-    {\n-      expand_cleanups_to (NULL_TREE);\n-    }\n+  expand_end_target_temps ();\n   free_temp_slots ();\n }\n \n@@ -3109,20 +3069,22 @@ expand_vec_init (decl, base, maxindex, init, from_array)\n \t  push_obstacks_nochange ();\n \t  resume_temporary_allocation ();\n \t  {\n-\t    tree e1, e2 = make_node (RTL_EXPR);\n-\t    TREE_TYPE (e2) = void_type_node;\n-\t    RTL_EXPR_RTL (e2) = const0_rtx;\n-\t    TREE_SIDE_EFFECTS (e2) = 1;\n-\t    start_sequence_for_rtl_expr (e2);\n+\t    tree e1, cleanup = make_node (RTL_EXPR);\n+\t    TREE_TYPE (cleanup) = void_type_node;\n+\t    RTL_EXPR_RTL (cleanup) = const0_rtx;\n+\t    TREE_SIDE_EFFECTS (cleanup) = 1;\n+\t    start_sequence_for_rtl_expr (cleanup);\n \n \t    e1 = build_array_eh_cleanup\n \t      (rval,\n \t       build_binary_op (MINUS_EXPR, maxindex, iterator, 1),\n \t       type);\n \t    expand_expr (e1, const0_rtx, VOIDmode, 0);\n-\t    RTL_EXPR_SEQUENCE (e2) = get_insns ();\n+\t    RTL_EXPR_SEQUENCE (cleanup) = get_insns ();\n \t    end_sequence ();\n-\t    expand_eh_region_end (e2);\n+\n+\t    cleanup = protect_with_terminate (cleanup);\n+\t    expand_eh_region_end (cleanup);\n \t  }\n \t  pop_obstacks ();\n \t}"}, {"sha": "f2014c6a7696d9be9428adb5322661bef103081e", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -70,8 +70,6 @@ Boston, MA 02111-1307, USA.  */\n   \"-fno-repo\",\n   \"-fsave-memoized\",\n   \"-fno-save-memoized\",\n-  \"-fshort-temps\",\n-  \"-fno-short-temps\",\n   \"-fstats\",\n   \"-fno-stats\",\n   \"-fstrict-prototype\","}, {"sha": "358e24a94695812d6da6f77a312e3502b3eb900d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 40, "deletions": 203, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -1698,7 +1698,7 @@ make_thunk (function, delta)\n     }\n   if (thunk == NULL_TREE)\n     {\n-      thunk = build_decl (FUNCTION_DECL, thunk_id, TREE_TYPE (func_decl));\n+      thunk = build_lang_decl (FUNCTION_DECL, thunk_id, TREE_TYPE (func_decl));\n       DECL_RESULT (thunk)\n \t= build_decl (RESULT_DECL, 0, TYPE_MAIN_VARIANT (TREE_TYPE (vtable_entry_type)));\n       TREE_READONLY (thunk) = TYPE_READONLY (TREE_TYPE (vtable_entry_type));\n@@ -1719,27 +1719,9 @@ void\n emit_thunk (thunk_fndecl)\n      tree thunk_fndecl;\n {\n-  rtx insns;\n-  char buffer[250];\n-  tree argp;\n-  struct args_size stack_args_size;\n   tree function = TREE_OPERAND (DECL_INITIAL (thunk_fndecl), 0);\n   int delta = THUNK_DELTA (thunk_fndecl);\n   char *fnname = XSTR (XEXP (DECL_RTL (thunk_fndecl), 0), 0);\n-  int tem;\n-  int failure = 0;\n-  int save_ofp;\n-\n-  /* Used to remember which regs we need to emit a USE rtx for.  */\n-  rtx need_use[FIRST_PSEUDO_REGISTER];\n-  int need_use_count = 0;\n-\n-  /* rtx for the 'this' parameter.  */\n-  rtx this_rtx = 0, this_reg_rtx = 0, fixed_this_rtx;\n-\n-  char *(*save_decl_printable_name) () = decl_printable_name;\n-  /* Data on reg parms scanned so far.  */\n-  CUMULATIVE_ARGS args_so_far;\n \n   if (TREE_ASM_WRITTEN (thunk_fndecl))\n     return;\n@@ -1749,203 +1731,58 @@ emit_thunk (thunk_fndecl)\n   TREE_ADDRESSABLE (function) = 1;\n   mark_used (function);\n \n-  decl_printable_name = thunk_printable_name;\n   if (current_function_decl)\n     abort ();\n-  current_function_decl = thunk_fndecl;\n \n   TREE_SET_CODE (thunk_fndecl, FUNCTION_DECL);\n+\n #ifdef ASM_OUTPUT_MI_THUNK\n+  current_function_decl = thunk_fndecl;\n   temporary_allocation ();\n   assemble_start_function (thunk_fndecl, fnname);\n   ASM_OUTPUT_MI_THUNK (asm_out_file, thunk_fndecl, delta, function);\n   assemble_end_function (thunk_fndecl, fnname);\n   permanent_allocation (1);\n-#else\n-  save_ofp = flag_omit_frame_pointer;\n-  flag_omit_frame_pointer = 1;\n-  init_function_start (thunk_fndecl, input_filename, lineno);\n-  pushlevel (0);\n-  expand_start_bindings (1);\n-\n-  temporary_allocation ();\n-\n-  /* Start updating where the next arg would go.  */\n-  INIT_CUMULATIVE_ARGS (args_so_far, TREE_TYPE (function), NULL_RTX, 0);\n-  stack_args_size.constant = 0;\n-  stack_args_size.var = 0;\n-  /* SETUP for possible structure return address FIXME */\n-\n-  /* Now look through all the parameters, make sure that we\n-     don't clobber any registers used for parameters.\n-     Also, pick up an rtx for the first \"this\" parameter.  */\n-  for (argp = TYPE_ARG_TYPES (TREE_TYPE (function));\n-       argp != NULL_TREE;\n-       argp = TREE_CHAIN (argp))\n-\n-    {\n-      tree passed_type = TREE_VALUE (argp);\n-      register rtx entry_parm;\n-      int named = 1; /* FIXME */\n-      struct args_size stack_offset;\n-      struct args_size arg_size;\n-\n-      if (passed_type == void_type_node)\n-\tbreak;\n-\n-      if ((TREE_CODE (TYPE_SIZE (passed_type)) != INTEGER_CST\n-\t   && contains_placeholder_p (TYPE_SIZE (passed_type)))\n-#ifdef FUNCTION_ARG_PASS_BY_REFERENCE\n-\t  || FUNCTION_ARG_PASS_BY_REFERENCE (args_so_far,\n-\t\t\t\t\t     TYPE_MODE (passed_type),\n-\t\t\t\t\t     passed_type, named)\n-#endif\n-\t  )\n-\tpassed_type = build_pointer_type (passed_type);\n-\n-      entry_parm = FUNCTION_ARG (args_so_far,\n-\t\t\t\t TYPE_MODE (passed_type),\n-\t\t\t\t passed_type,\n-\t\t\t\t named);\n-      if (entry_parm != 0)\n-\tneed_use[need_use_count++] = entry_parm;\n-\n-      locate_and_pad_parm (TYPE_MODE (passed_type), passed_type,\n-#ifdef STACK_PARMS_IN_REG_PARM_AREA\n-\t\t\t   1,\n-#else\n-\t\t\t   entry_parm != 0,\n-#endif\n-\t\t\t   thunk_fndecl,\n-\t\t\t   &stack_args_size, &stack_offset, &arg_size);\n-\n-/*    REGNO (entry_parm);*/\n-      if (this_rtx == 0)\n-\t{\n-\t  this_reg_rtx = entry_parm;\n-\t  if (!entry_parm)\n-\t    {\n-\t      rtx offset_rtx = ARGS_SIZE_RTX (stack_offset);\n-\n-\t      rtx internal_arg_pointer, stack_parm;\n-\n-\t      if ((ARG_POINTER_REGNUM == STACK_POINTER_REGNUM\n-\t\t   || ! (fixed_regs[ARG_POINTER_REGNUM]\n-\t\t\t || ARG_POINTER_REGNUM == FRAME_POINTER_REGNUM)))\n-\t\tinternal_arg_pointer = copy_to_reg (virtual_incoming_args_rtx);\n-\t      else\n-\t\tinternal_arg_pointer = virtual_incoming_args_rtx;\n-\n-\t      if (offset_rtx == const0_rtx)\n-\t\tentry_parm = gen_rtx (MEM, TYPE_MODE (passed_type),\n-\t\t\t\t      internal_arg_pointer);\n-\t      else\n-\t\tentry_parm = gen_rtx (MEM, TYPE_MODE (passed_type),\n-\t\t\t\t      gen_rtx (PLUS, Pmode,\n-\t\t\t\t\t       internal_arg_pointer, \n-\t\t\t\t\t       offset_rtx));\n-\t    }\n-\t  \n-\t  this_rtx = entry_parm;\n-\t}\n-\n-      FUNCTION_ARG_ADVANCE (args_so_far,\n-\t\t\t    TYPE_MODE (passed_type),\n-\t\t\t    passed_type,\n-\t\t\t    named);\n-    }\n-\n-  fixed_this_rtx = plus_constant (this_rtx, delta);\n-  if (this_rtx != fixed_this_rtx)\n-    emit_move_insn (this_rtx, fixed_this_rtx);\n-\n-  if (this_reg_rtx)\n-    emit_insn (gen_rtx (USE, VOIDmode, this_reg_rtx));\n-\n-  emit_indirect_jump (XEXP (DECL_RTL (function), 0));\n-\n-  while (need_use_count > 0)\n-    emit_insn (gen_rtx (USE, VOIDmode, need_use[--need_use_count]));\n-\n-  expand_end_bindings (NULL, 1, 0);\n-  poplevel (0, 0, 1);\n-\n-  /* From now on, allocate rtl in current_obstack, not in saveable_obstack.\n-     Note that that may have been done above, in save_for_inline_copying.\n-     The call to resume_temporary_allocation near the end of this function\n-     goes back to the usual state of affairs.  */\n-\n-  rtl_in_current_obstack ();\n-\n-  insns = get_insns ();\n-\n-  /* Copy any shared structure that should not be shared.  */\n-\n-  unshare_all_rtl (insns);\n-\n-  /* Instantiate all virtual registers.  */\n-\n-  instantiate_virtual_regs (current_function_decl, get_insns ());\n-\n-  /* We are no longer anticipating cse in this function, at least.  */\n-\n-  cse_not_expected = 1;\n-\n-  /* Now we choose between stupid (pcc-like) register allocation\n-     (if we got the -noreg switch and not -opt)\n-     and smart register allocation.  */\n-\n-  if (optimize > 0)\t\t\t/* Stupid allocation probably won't work */\n-    obey_regdecls = 0;\t\t/* if optimizations being done.  */\n-\n-  regclass_init ();\n-\n-  regclass (insns, max_reg_num ());\n-  if (obey_regdecls)\n-    {\n-      stupid_life_analysis (insns, max_reg_num (), NULL);\n-      failure = reload (insns, 0, NULL);\n-    }\n-  else\n-    {\n-      /* Do control and data flow analysis,\n-\t and write some of the results to dump file.  */\n-\n-      flow_analysis (insns, max_reg_num (), NULL);\n-      local_alloc ();\n-      failure = global_alloc (NULL);\n-    }\n-\n-  reload_completed = 1;\n-\n-#ifdef LEAF_REGISTERS\n-  leaf_function = 0;\n-  if (optimize > 0 && only_leaf_regs_used () && leaf_function_p ())\n-    leaf_function = 1;\n-#endif\n-\n-  /* If a machine dependent reorganization is needed, call it.  */\n-#ifdef MACHINE_DEPENDENT_REORG\n-   MACHINE_DEPENDENT_REORG (insns);\n-#endif\n-\n-  /* Now turn the rtl into assembler code.  */\n-\n-  assemble_start_function (thunk_fndecl, fnname);\n-  final (insns, asm_out_file, optimize, 0);\n-  assemble_end_function (thunk_fndecl, fnname);\n-\n-  reload_completed = 0;\n-\n-  /* Cancel the effect of rtl_in_current_obstack.  */\n+  current_function_decl = 0;\n+#else /* ASM_OUTPUT_MI_THUNK */\n+  if (varargs_function_p (function))\n+    cp_error (\"generic thunk code does not work for variadic function `%#D'\",\n+\t      function);\n+  {\n+    tree a, t;\n \n-  permanent_allocation (1);\n-  flag_omit_frame_pointer = save_ofp;\n+    /* Set up clone argument trees for the thunk.  */\n+    t = NULL_TREE;\n+    for (a = DECL_ARGUMENTS (function); a; a = TREE_CHAIN (a))\n+      {\n+\ttree x = copy_node (a);\n+\tTREE_CHAIN (x) = t;\n+\tDECL_CONTEXT (x) = thunk_fndecl;\n+\tt = x;\n+      }\n+    a = nreverse (t);\n+    DECL_ARGUMENTS (thunk_fndecl) = a;\n+    DECL_RESULT (thunk_fndecl) = NULL_TREE;\n+\n+    start_function (NULL_TREE, thunk_fndecl, NULL_TREE, 1);\n+    store_parm_decls ();\n+\n+    /* Build up the call to the real function.  */\n+    t = build_int_2 (delta, -1 * (delta < 0));\n+    TREE_TYPE (t) = signed_type (sizetype);\n+    t = fold (build (PLUS_EXPR, TREE_TYPE (a), a, t));\n+    t = tree_cons (NULL_TREE, t, NULL_TREE);\n+    for (a = TREE_CHAIN (a); a; a = TREE_CHAIN (a))\n+      t = tree_cons (NULL_TREE, a, t);\n+    t = nreverse (t);\n+    t = build_call (function, TREE_TYPE (TREE_TYPE (function)), t);\n+    c_expand_return (t);\n+\n+    finish_function (lineno, 0, 0);\n+  }\n #endif /* ASM_OUTPUT_MI_THUNK */\n-  TREE_SET_CODE (thunk_fndecl, THUNK_DECL);\n \n-  decl_printable_name = save_decl_printable_name;\n-  current_function_decl = 0;\n+  TREE_SET_CODE (thunk_fndecl, THUNK_DECL);\n }\n \f\n /* Code for synthesizing methods which have default semantics defined.  */"}, {"sha": "7850be9b364080b6630a9be9c06f341e07f97a22", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -132,6 +132,9 @@ process_template_parm (list, next)\n \t    error (\"  a template type parameter must begin with `class' or `typename'\");\n \t  TREE_TYPE (parm) = void_type_node;\n \t}\n+      else if (pedantic && TREE_CODE (TREE_TYPE (parm)) == REAL_TYPE)\n+\tcp_pedwarn (\"`%T' is not a valid type for a template constant parameter\",\n+\t\t    TREE_TYPE (parm));\n       tinfo = make_node (TEMPLATE_CONST_PARM);\n       my_friendly_assert (TREE_PERMANENT (tinfo), 260.5);\n       if (TREE_PERMANENT (parm) == 0)"}, {"sha": "49c64d70de4f5f060126a57ed41b5b717abdc865", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -299,11 +299,9 @@ yylex ()\n \t    case SELFNAME:\n \t      lastiddecl = identifier_typedecl_value (tmp_token.yylval.ttype);\n \t      if (lastiddecl != trrr)\n-\t\t{\n-\t\t  lastiddecl = trrr;\n-\t\t  if (got_scope)\n-\t\t    tmp_token.yylval.ttype = trrr;\n-\t\t}\n+\t\tlastiddecl = trrr;\n+\t      if (got_scope)\n+\t\ttmp_token.yylval.ttype = trrr;\n \t      break;\n \t    case IDENTIFIER:\n \t      lastiddecl = trrr;"}, {"sha": "72870df95382400f8ae0be619d97b5a738793741", "filename": "gcc/cp/tinfo2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo2.cc?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -43,7 +43,7 @@ fast_compare (const char *n1, const char *n2) {\n };\n \n bool\n-type_info::before (const type_info &arg)\n+type_info::before (const type_info &arg) const\n {\n   return fast_compare (name (), arg.name ()) < 0;\n }"}, {"sha": "de9128fd7f584f44123cf7a1dbee4440a08857fb", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -108,6 +108,8 @@ real_lvalue_p (ref)\n   return 0;\n }\n \n+/* This differs from real_lvalue_p in that class rvalues are considered\n+   lvalues.  */\n int\n lvalue_p (ref)\n      tree ref;\n@@ -2102,3 +2104,16 @@ error_type (arg)\n \n   return type;\n }\n+\n+/* Does FUNCTION use a variable-length argument list?  */\n+\n+int\n+varargs_function_p (function)\n+     tree function;\n+{\n+  tree parm = TYPE_ARG_TYPES (TREE_TYPE (function));\n+  for (; parm; parm = TREE_CHAIN (parm))\n+    if (TREE_VALUE (parm) == void_type_node)\n+      return 0;\n+  return 1;\n+}"}, {"sha": "97b6fbad8340897dd4e5f16d1e404bdad8a03288", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb66be0e6c3dd15ac08a41a09fcdc309662ac208/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=eb66be0e6c3dd15ac08a41a09fcdc309662ac208", "patch": "@@ -1507,7 +1507,7 @@ decay_conversion (exp)\n \t      inner = build1 (CONVERT_EXPR,\n \t\t\t      build_pointer_type (TREE_TYPE (TREE_TYPE (inner))),\n \t\t\t      inner);\n-\t      TREE_REFERENCE_EXPR (inner) = 1;\n+\t      TREE_CONSTANT (inner) = TREE_CONSTANT (TREE_OPERAND (inner, 0));\n \t    }\n \t  return convert (build_pointer_type (TREE_TYPE (type)), inner);\n \t}\n@@ -4261,8 +4261,10 @@ build_unary_op (code, xarg, noconvert)\n       argtype = TREE_TYPE (arg);\n       if (TREE_CODE (argtype) == REFERENCE_TYPE)\n \t{\n-\t  arg = build1 (CONVERT_EXPR, build_pointer_type (TREE_TYPE (TREE_TYPE (arg))), arg);\n-\t  TREE_REFERENCE_EXPR (arg) = 1;\n+\t  arg = build1\n+\t    (CONVERT_EXPR,\n+\t     build_pointer_type (TREE_TYPE (TREE_TYPE (arg))), arg);\n+\t  TREE_CONSTANT (arg) = TREE_CONSTANT (TREE_OPERAND (arg, 0));\n \t  return arg;\n \t}\n       else if (pedantic\n@@ -4283,16 +4285,12 @@ build_unary_op (code, xarg, noconvert)\n \t  if (arg == current_class_ref)\n \t    return current_class_ptr;\n \n-\t  /* Keep `default_conversion' from converting if\n-\t     ARG is of REFERENCE_TYPE.  */\n \t  arg = TREE_OPERAND (arg, 0);\n \t  if (TREE_CODE (TREE_TYPE (arg)) == REFERENCE_TYPE)\n \t    {\n-\t      if (TREE_CODE (arg) == VAR_DECL && DECL_INITIAL (arg)\n-\t\t  && !TREE_SIDE_EFFECTS (DECL_INITIAL (arg)))\n-\t\targ = DECL_INITIAL (arg);\n-\t      arg = build1 (CONVERT_EXPR, build_pointer_type (TREE_TYPE (TREE_TYPE (arg))), arg);\n-\t      TREE_REFERENCE_EXPR (arg) = 1;\n+\t      arg = build1\n+\t\t(CONVERT_EXPR,\n+\t\t build_pointer_type (TREE_TYPE (TREE_TYPE (arg))), arg);\n \t      TREE_CONSTANT (arg) = TREE_CONSTANT (TREE_OPERAND (arg, 0));\n \t    }\n \t  else if (lvalue_p (arg))\n@@ -7148,6 +7146,8 @@ c_expand_return (retval)\n \t  if (TREE_CODE (whats_returned) == ADDR_EXPR)\n \t    whats_returned = TREE_OPERAND (whats_returned, 0);\n \t}\n+      if (TREE_CODE (whats_returned) == CONVERT_EXPR)\n+\twhats_returned = TREE_OPERAND (whats_returned, 0);\n       if (TREE_CODE (whats_returned) == ADDR_EXPR)\n \t{\n \t  whats_returned = TREE_OPERAND (whats_returned, 0);"}]}