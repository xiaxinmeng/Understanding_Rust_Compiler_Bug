{"sha": "b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdlODc1Y2U5NjI4MmE5YzRlY2M2Y2ZkNGYwNDNjMTAzOWU1YjdlMw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2018-08-21T14:44:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-08-21T14:44:30Z"}, "message": "[Ada] Handle pragmas that come from aspects for GNATprove\n\nIn GNATprove we appear to abuse a routine related to cross-references and\nexpect it to deliver exact results, which is not what it was designed for.\n\nThis patch is a temporary solution to avoid crashes in GNATprove; it doesn't\naffect the frontend or other backends, because this code is used exclusively\nby GNATprove (it is located in the frontend for technical reasons). No tests\nprovided.\n\n2018-08-21  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* lib-xref.ads, lib-xref-spark_specific.adb\n\t(Enclosing_Subprogram_Or_Library_Package): Now roughtly works\n\tfor pragmas that come from aspect specifications.\n\nFrom-SVN: r263707", "tree": {"sha": "a9dfcb7a1ec4ecb3fe41a5b2e8d84f2d56024cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9dfcb7a1ec4ecb3fe41a5b2e8d84f2d56024cef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d40800cfe589cf55e074ed151c7a607d5680997a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40800cfe589cf55e074ed151c7a607d5680997a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40800cfe589cf55e074ed151c7a607d5680997a"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "dcbec9b9320c818165f53969555e6370c4d400ea", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3", "patch": "@@ -1,3 +1,9 @@\n+2018-08-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-xref.ads, lib-xref-spark_specific.adb\n+\t(Enclosing_Subprogram_Or_Library_Package): Now roughtly works\n+\tfor pragmas that come from aspect specifications.\n+\n 2018-08-21  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* sa_messages.ads, sa_messages.adb: New source files."}, {"sha": "00fe71aecf00fdbd6a3b6f7477b4a22f7d554651", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3", "patch": "@@ -228,7 +228,17 @@ package body SPARK_Specific is\n                end loop;\n \n                if Nkind (Context) = N_Pragma then\n-                  Context := Parent (Context);\n+                  --  When used for cross-references then aspects might not be\n+                  --  yet linked to pragmas; when used for AST navigation in\n+                  --  GNATprove this routine is expected to follow those links.\n+\n+                  if From_Aspect_Specification (Context) then\n+                     Context := Corresponding_Aspect (Context);\n+                     pragma Assert (Nkind (Context) = N_Aspect_Specification);\n+                     Context := Entity (Context);\n+                  else\n+                     Context := Parent (Context);\n+                  end if;\n                end if;\n \n             when N_Entry_Body"}, {"sha": "903e64e45ec18ec679e2f24d1737a39e73296d7d", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3", "patch": "@@ -632,6 +632,11 @@ package Lib.Xref is\n       --  Return the closest enclosing subprogram or library-level package.\n       --  This ensures that GNATprove can distinguish local variables from\n       --  global variables.\n+      --\n+      --  ??? This routine should only be used for processing related to\n+      --  cross-references, where it might return wrong result but must avoid\n+      --  crashes on ill-formed source code. It is wrong to use it where exact\n+      --  result is needed.\n \n       procedure Generate_Dereference\n         (N   : Node_Id;"}]}