{"sha": "51542d9254426c54363a42451885a77b44ebbeaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE1NDJkOTI1NDQyNmM1NDM2M2E0MjQ1MTg4NWE3N2I0NGViYmVhZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-15T15:23:04Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-15T15:23:04Z"}, "message": "libgomp.fortran/alloc-1.F90: Fix testcase for 32bit size_t\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/alloc-1.F90: Use c_size_t to\n\tavoid conversion on 32bit systems from 32bit to 64bit due\n\tto -fdefault-integer-8.", "tree": {"sha": "0ef45b4efbc237d6a5c17f18761565b664ad4ee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ef45b4efbc237d6a5c17f18761565b664ad4ee5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51542d9254426c54363a42451885a77b44ebbeaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51542d9254426c54363a42451885a77b44ebbeaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51542d9254426c54363a42451885a77b44ebbeaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51542d9254426c54363a42451885a77b44ebbeaf/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c12969ec3e9185fdbb90d3b1699d64b1cd0901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c12969ec3e9185fdbb90d3b1699d64b1cd0901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c12969ec3e9185fdbb90d3b1699d64b1cd0901"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "8ecb4c4124653ddb756818299d76a47b7de761d3", "filename": "libgomp/testsuite/libgomp.fortran/alloc-1.F90", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51542d9254426c54363a42451885a77b44ebbeaf/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-1.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51542d9254426c54363a42451885a77b44ebbeaf/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-1.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-1.F90?ref=51542d9254426c54363a42451885a77b44ebbeaf", "patch": "@@ -1,8 +1,8 @@\n ! { dg-additional-options \"-Wall -Wextra -Wno-maybe-uninitialized\" }\n #ifdef DEFAULT_INTEGER_8\n-#define ONEoFIVE 105_c_size_t*8\n+#define ONEoFIVE 105_c_size_t*8_c_size_t\n #else\n-#define ONEoFIVE 105_c_size_t*4\n+#define ONEoFIVE 105_c_size_t*4_c_size_t\n #endif\n       program main\n         use iso_c_binding\n@@ -58,15 +58,17 @@ subroutine omp_free (ptr, handle) bind(C)\n         integer, pointer, volatile :: p(:), p0, q(:), r(:)\n         integer (omp_allocator_handle_kind) :: a, a2\n \n-        cp = omp_alloc (3 * c_sizeof (i), omp_default_mem_alloc)\n+        cp = omp_alloc (3_c_size_t * c_sizeof (i),                      &\n+     &                  omp_default_mem_alloc)\n         if (mod (transfer (cp, intptr), 4_c_intptr_t) /= 0) stop 1\n         call c_f_pointer (cp, p, [3])\n         p(1) = 1\n         p(2) = 2\n         p(3) = 3\n         call omp_free (cp, omp_default_mem_alloc)\n \n-        cp = omp_alloc (2 * c_sizeof (i), omp_default_mem_alloc)\n+        cp = omp_alloc (2_c_size_t * c_sizeof (i),                      &\n+     &                  omp_default_mem_alloc)\n         if (mod (transfer (cp, intptr), 4_c_intptr_t) /= 0) stop 2\n         call c_f_pointer (cp, p, [2])\n         p(1) = 1\n@@ -121,7 +123,8 @@ subroutine omp_free (ptr, handle) bind(C)\n         if (a2 == omp_null_allocator) stop 10\n         cp = omp_alloc (ONEoFIVE, a2)\n         if (mod (transfer (cp, intptr), 32_c_intptr_t) /= 0) stop 11\n-        call c_f_pointer (cp, p, [ONEoFIVE / c_sizeof (i)])\n+        call c_f_pointer (cp, p, [ONEoFIVE                              &\n+     &                            / c_sizeof (i)])\n         p(1) = 5\n         p(ONEoFIVE / c_sizeof (i)) = 6\n         cq = omp_alloc (768_c_size_t, a2)\n@@ -149,9 +152,11 @@ subroutine omp_free (ptr, handle) bind(C)\n      &                           size (traits5), traits5)\n         if (a2 == omp_null_allocator) stop 16\n         call omp_set_default_allocator (a2)\n-        cp = omp_alloc (ONEoFIVE, omp_null_allocator)\n+        cp = omp_alloc (ONEoFIVE,                                       &\n+     &                  omp_null_allocator)\n         if (mod (transfer (cp, intptr), 32_c_intptr_t) /= 0) stop 17\n-        call c_f_pointer (cq, q, [ONEoFIVE / c_sizeof (i)])\n+        call c_f_pointer (cq, q, [ONEoFIVE                              &\n+     &                            / c_sizeof (i)])\n         p(1) = 5\n         p(ONEoFIVE / c_sizeof (i)) = 6\n         cq = omp_alloc (768_c_size_t, omp_null_allocator)"}]}