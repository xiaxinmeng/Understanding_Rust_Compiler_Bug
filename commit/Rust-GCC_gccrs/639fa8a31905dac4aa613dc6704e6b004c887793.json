{"sha": "639fa8a31905dac4aa613dc6704e6b004c887793", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM5ZmE4YTMxOTA1ZGFjNGFhNjEzZGM2NzA0ZTZiMDA0Yzg4Nzc5Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-09T20:06:57Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-09T20:06:57Z"}, "message": "i386.md (*strmovqi_1): Fix insn enable condition.\n\n\t* config/i386/i386.md (*strmovqi_1): Fix insn enable condition.\n\nFrom-SVN: r230050", "tree": {"sha": "27a1d228f3037e77055c59507f4e0358b7519498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27a1d228f3037e77055c59507f4e0358b7519498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/639fa8a31905dac4aa613dc6704e6b004c887793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639fa8a31905dac4aa613dc6704e6b004c887793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639fa8a31905dac4aa613dc6704e6b004c887793", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639fa8a31905dac4aa613dc6704e6b004c887793/comments", "author": null, "committer": null, "parents": [{"sha": "3d569e76dfe5e431ce9c02938ff958e589fe35f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d569e76dfe5e431ce9c02938ff958e589fe35f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d569e76dfe5e431ce9c02938ff958e589fe35f4"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "00fd752cbdab8dcdb736f465389c9c3fa1abda4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639fa8a31905dac4aa613dc6704e6b004c887793/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639fa8a31905dac4aa613dc6704e6b004c887793/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=639fa8a31905dac4aa613dc6704e6b004c887793", "patch": "@@ -1,3 +1,7 @@\n+2015-11-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*strmovqi_1): Fix insn enable condition.\n+\n 2015-11-09  Jeff Law  <law@redhat.com>\n \n \t* tree-ssanames.c (verify_ssaname_freelists): Simplify check for\n@@ -564,7 +568,7 @@\n \t(TYPE_SATURATING): Adjust.\n \t(REF_REVERSE_STORAGE_ORDER): New flag.\n \t(reverse_storage_order_for_component_p): New inline predicate.\n- \t(storage_order_barrier_p): Likewise.\n+\t(storage_order_barrier_p): Likewise.\n \t(get_inner_reference): Adjust prototype.\n \t* varasm.c: Include expmed.h.\n \t(assemble_variable_contents): Adjust call to output_constant.\n@@ -675,7 +679,7 @@\n \t* tree-ssa-sccvn.c (vn_reference_eq): Return false on storage order\n \tbarriers.\n \t(copy_reference_ops_from_ref) <MEM_REF>: Set REVERSE field according\n- \tto the REF_REVERSE_STORAGE_ORDER flag.\n+\tto the REF_REVERSE_STORAGE_ORDER flag.\n \t<BIT_FIELD_REF>: Likewise.\n \t<VIEW_CONVERT_EXPR>: Set it for storage order barriers.\n \t(contains_storage_order_barrier_p): New predicate.\n@@ -995,11 +999,11 @@\n \n \tProperly apply.\n \t2015-11-05  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n-        * config/aarch64/aarch64.c\n-        (aarch64_can_use_per_function_literal_pools_p): New.\n-        (aarch64_use_blocks_for_constant_p): Adjust declaration\n-        and use aarch64_can_use_function_literal_pools_p.\n-        (aarch64_select_rtx_section): Update.\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_can_use_per_function_literal_pools_p): New.\n+\t(aarch64_use_blocks_for_constant_p): Adjust declaration\n+\tand use aarch64_can_use_function_literal_pools_p.\n+\t(aarch64_select_rtx_section): Update.\n \n 2015-11-06  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n@@ -1044,16 +1048,16 @@\n \t* config/aarch64/aarch64-simd.md: Matching expressions for frsqrte and\n \tfrsqrts.\n \t* config/aarch64/aarch64-tuning-flags.def: Added recip_sqrt.\n-\t* config/aarch64/aarch64.c: New functions. Emit rsqrt estimation code when\n-\tapplicable.\n+\t* config/aarch64/aarch64.c: New functions. Emit rsqrt estimation\n+\tcode when applicable.\n \t* config/aarch64/aarch64.md: Added enum entries.\n \t* config/aarch64/aarch64.opt: Added option -mlow-precision-recip-sqrt.\n-\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_common.h: Common macros for\n-\tassembly checks.\n+\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_common.h: Common\n+\tmacros for assembly checks.\n \t* testsuite/gcc.target/aarch64/rsqrt_asm_check_negative_1.c: Make sure\n \tfrsqrts and frsqrte are not emitted.\n-\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_1.c: Make sure frsqrts and\n-\tfrsqrte are emitted.\n+\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_1.c: Make sure\n+\tfrsqrts and frsqrte are emitted.\n \t* testsuite/gcc.target/aarch64/rsqrt_1.c: Functional tests for rsqrt.\n \n 2015-11-07  Jan Hubicka  <hubicka@ucw.cz>\n@@ -1343,11 +1347,11 @@\n \n 2015-11-05  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-        * config/aarch64/aarch64.c\n-        (aarch64_can_use_per_function_literal_pools_p): New.\n-        (aarch64_use_blocks_for_constant_p): Adjust declaration\n-        and use aarch64_can_use_function_literal_pools_p.\n-        (aarch64_select_rtx_section): Update.\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_can_use_per_function_literal_pools_p): New.\n+\t(aarch64_use_blocks_for_constant_p): Adjust declaration\n+\tand use aarch64_can_use_function_literal_pools_p.\n+\t(aarch64_select_rtx_section): Update.\n \n 2015-11-05  Ilya Enkovich  <enkovich.gnu@gmail.com>\n "}, {"sha": "52dd03717b410edd23d7aa0e4f1d14642ed61356", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639fa8a31905dac4aa613dc6704e6b004c887793/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639fa8a31905dac4aa613dc6704e6b004c887793/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=639fa8a31905dac4aa613dc6704e6b004c887793", "patch": "@@ -16251,9 +16251,9 @@\n    (set (match_operand:P 1 \"register_operand\" \"=S\")\n \t(plus:P (match_dup 3)\n \t\t(const_int 1)))]\n-  \"!(fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n-  \"%^movsb\n+  \"!(fixed_regs[SI_REG] || fixed_regs[DI_REG])\n    && ix86_check_no_addr_space (insn)\"\n+  \"%^movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n    (set (attr \"prefix_rex\")"}]}