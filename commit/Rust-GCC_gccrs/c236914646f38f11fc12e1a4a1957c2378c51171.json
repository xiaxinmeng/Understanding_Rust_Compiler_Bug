{"sha": "c236914646f38f11fc12e1a4a1957c2378c51171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIzNjkxNDY0NmYzOGYxMWZjMTJlMWE0YTE5NTdjMjM3OGM1MTE3MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-07T13:38:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-07T13:38:45Z"}, "message": "[multiple changes]\n\n2009-07-07  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch6.adb (Expand_Actuals): Call Add_Call_By_Copy_Code for in out\n\tparameters when the subtype of the actual is not known to be a subrange\n\tof the formal's subtype.\n\t(Expand_Call): Generate a range check only in the E_In_parameter case\n\t(in out parameter range checks are now handled in Expand_Actuals).\n\n\t* exp_ch4.adb (Expand_N_Slice): Restore code that calls\n\tEnable_Range_Check.\n\n2009-07-07  Robert Dewar  <dewar@adacore.com>\n\n\t* a-stwise.adb, a-stzsea.adb, a-strsea.adb: Add comments\n\n2009-07-07  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Expand_Interface_Conversion): Handle access type whose\n\tdesignated type comes from a limited views.\n\n2009-07-07  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj.ads, prj-nmsc.adb (Mark_Excluded_Sources): Fix handling of\n\tlocally removed files that are later made visible again in an importing\n\tproject.\n\n2009-07-07  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Clarify documentation of Stream_Convert pragma\n\n2009-07-07  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: Add an example to the description of gnatcheck\n\t'Style_Checks' rule option.\n\n2009-07-07  Tristan Gingold  <gingold@adacore.com>\n\n\t* seh_init.c: Fix inline assembly statement in seh_init.c\n\n2009-07-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_warn.adb (Check_References): Do not emit warnings on formals of\n\tan entry body. Only the formals of the entry declaration are traced.\n\nFrom-SVN: r149328", "tree": {"sha": "de9464c08d324cf727aa591acdf3d8cad2584ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de9464c08d324cf727aa591acdf3d8cad2584ad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c236914646f38f11fc12e1a4a1957c2378c51171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c236914646f38f11fc12e1a4a1957c2378c51171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c236914646f38f11fc12e1a4a1957c2378c51171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c236914646f38f11fc12e1a4a1957c2378c51171/comments", "author": null, "committer": null, "parents": [{"sha": "75a5a4879d5046afb73aba4a403472e9f349cbed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a5a4879d5046afb73aba4a403472e9f349cbed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a5a4879d5046afb73aba4a403472e9f349cbed"}], "stats": {"total": 211, "additions": 185, "deletions": 26}, "files": [{"sha": "0253a696b25fee2ee48e72d38360967d93a084a9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -1,3 +1,47 @@\n+2009-07-07  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Actuals): Call Add_Call_By_Copy_Code for in out\n+\tparameters when the subtype of the actual is not known to be a subrange\n+\tof the formal's subtype.\n+\t(Expand_Call): Generate a range check only in the E_In_parameter case\n+\t(in out parameter range checks are now handled in Expand_Actuals).\n+\n+\t* exp_ch4.adb (Expand_N_Slice): Restore code that calls\n+\tEnable_Range_Check.\n+\n+2009-07-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-stwise.adb, a-stzsea.adb, a-strsea.adb: Add comments\n+\n+2009-07-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Interface_Conversion): Handle access type whose\n+\tdesignated type comes from a limited views.\n+\n+2009-07-07  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj.ads, prj-nmsc.adb (Mark_Excluded_Sources): Fix handling of\n+\tlocally removed files that are later made visible again in an importing\n+\tproject.\n+\n+2009-07-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Clarify documentation of Stream_Convert pragma\n+\n+2009-07-07  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Add an example to the description of gnatcheck\n+\t'Style_Checks' rule option.\n+\n+2009-07-07  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* seh_init.c: Fix inline assembly statement in seh_init.c\n+\n+2009-07-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_warn.adb (Check_References): Do not emit warnings on formals of\n+\tan entry body. Only the formals of the entry declaration are traced.\n+\n 2009-07-07  Robert Dewar  <dewar@adacore.com>\n \n \t* s-osprim-mingw.adb: Minor reformatting"}, {"sha": "848c0630710ee40dd9b882ec7a5b7502e903d919", "filename": "gcc/ada/a-strsea.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fa-strsea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fa-strsea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strsea.adb?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -238,9 +238,14 @@ package body Ada.Strings.Search is\n       Mapping : Maps.Character_Mapping := Maps.Identity) return Natural\n    is\n       PL1 : constant Integer := Pattern'Length - 1;\n-      Ind : Integer; -- can be negative if Pattern'Length > Source'Length\n       Cur : Natural;\n \n+      Ind : Integer;\n+      --  Index for start of match check. This can be negative if the pattern\n+      --  length is greater than the string length, which is why this variable\n+      --  is Integer instead of Natural. In this case, the search loops do not\n+      --  execute at all, so this Ind value is never used.\n+\n    begin\n       if Pattern = \"\" then\n          raise Pattern_Error;"}, {"sha": "0e22f64bec7969681eb1aef66372393b48ba9f45", "filename": "gcc/ada/a-stwise.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fa-stwise.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fa-stwise.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwise.adb?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -77,6 +77,7 @@ package body Ada.Strings.Wide_Search is\n       Num : Natural;\n       Ind : Natural;\n       Cur : Natural;\n+\n    begin\n       if Pattern = \"\" then\n          raise Pattern_Error;\n@@ -233,9 +234,14 @@ package body Ada.Strings.Wide_Search is\n       return Natural\n    is\n       PL1 : constant Integer := Pattern'Length - 1;\n-      Ind : Integer; -- can be negative if Pattern'Length > Source'Length\n       Cur : Natural;\n \n+      Ind : Integer;\n+      --  Index for start of match check. This can be negative if the pattern\n+      --  length is greater than the string length, which is why this variable\n+      --  is Integer instead of Natural. In this case, the search loops do not\n+      --  execute at all, so this Ind value is never used.\n+\n    begin\n       if Pattern = \"\" then\n          raise Pattern_Error;"}, {"sha": "0dc6d9bbf5c5eaf96e25d257f64988499258d1a7", "filename": "gcc/ada/a-stzsea.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fa-stzsea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fa-stzsea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzsea.adb?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -237,9 +237,14 @@ package body Ada.Strings.Wide_Wide_Search is\n       return Natural\n    is\n       PL1 : constant Integer := Pattern'Length - 1;\n-      Ind : Integer; -- can be negative if Pattern'Length > Source'Length\n       Cur : Natural;\n \n+      Ind : Integer;\n+      --  Index for start of match check. This can be negative if the pattern\n+      --  length is greater than the string length, which is why this variable\n+      --  is Integer instead of Natural. In this case, the search loops do not\n+      --  execute at all, so this Ind value is never used.\n+\n    begin\n       if Pattern = \"\" then\n          raise Pattern_Error;"}, {"sha": "b235db0adfb9d2f517d40d14d5000a415f04286e", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -7444,6 +7444,32 @@ package body Exp_Ch4 is\n          Make_Build_In_Place_Call_In_Anonymous_Context (Pfx);\n       end if;\n \n+      --  Range checks are potentially also needed for cases involving a slice\n+      --  indexed by a subtype indication, but Do_Range_Check can currently\n+      --  only be set for expressions ???\n+\n+      if not Index_Checks_Suppressed (Ptp)\n+        and then (not Is_Entity_Name (Pfx)\n+                   or else not Index_Checks_Suppressed (Entity (Pfx)))\n+        and then Nkind (Discrete_Range (N)) /= N_Subtype_Indication\n+\n+         --  Do not enable range check to nodes associated with the frontend\n+         --  expansion of the dispatch table. We first check if Ada.Tags is\n+         --  already loaded to avoid the addition of an undesired dependence\n+         --  on such run-time unit.\n+\n+        and then\n+          (not Tagged_Type_Expansion\n+            or else not\n+             (RTU_Loaded (Ada_Tags)\n+               and then Nkind (Prefix (N)) = N_Selected_Component\n+               and then Present (Entity (Selector_Name (Prefix (N))))\n+               and then Entity (Selector_Name (Prefix (N))) =\n+                                  RTE_Record_Component (RE_Prims_Ptr)))\n+      then\n+         Enable_Range_Check (Discrete_Range (N));\n+      end if;\n+\n       --  The remaining case to be handled is packed slices. We can leave\n       --  packed slices as they are in the following situations:\n "}, {"sha": "785da600bf3f808ab62b015f6f715a6fc87739f2", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -1592,12 +1592,17 @@ package body Exp_Ch6 is\n \n             --  Add call-by-copy code for the case of scalar out parameters\n             --  when it is not known at compile time that the subtype of the\n-            --  formal is a subrange of the subtype of the actual, in order\n-            --  to get return range checks on such actuals. (Maybe this case\n-            --  should be handled earlier in the if statement???)\n+            --  formal is a subrange of the subtype of the actual (or vice\n+            --  versa for in out parameters), in order to get range checks\n+            --  on such actuals. (Maybe this case should be handled earlier\n+            --  in the if statement???)\n \n             elsif Is_Scalar_Type (E_Formal)\n-              and then not In_Subrange_Of (E_Formal, Etype (Actual))\n+              and then\n+                (not In_Subrange_Of (E_Formal, Etype (Actual))\n+                  or else\n+                    (Ekind (Formal) = E_In_Out_Parameter\n+                      and then not In_Subrange_Of (Etype (Actual), E_Formal)))\n             then\n                --  Perhaps the setting back to False should be done within\n                --  Add_Call_By_Copy_Code, since it could get set on other\n@@ -2039,8 +2044,9 @@ package body Exp_Ch6 is\n       --  formals as we process the regular formals and collect the\n       --  corresponding actuals in Extra_Actuals.\n \n-      --  We also generate any required range checks for actuals as we go\n-      --  through the loop, since this is a convenient place to do this.\n+      --  We also generate any required range checks for actuals for in formals\n+      --  as we go through the loop, since this is a convenient place to do it.\n+      --  (Though it seems that this would be better done in Expand_Actuals???)\n \n       Formal      := First_Formal (Subp);\n       Actual      := First_Actual (N);\n@@ -2050,7 +2056,7 @@ package body Exp_Ch6 is\n          --  Generate range check if required\n \n          if Do_Range_Check (Actual)\n-           and then Ekind (Formal) /= E_Out_Parameter\n+           and then Ekind (Formal) = E_In_Parameter\n          then\n             Set_Do_Range_Check (Actual, False);\n             Generate_Range_Check"}, {"sha": "5c5534b7a3ef606f870fb8f3ef2a6469c0c6db27", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -931,7 +931,8 @@ package body Exp_Disp is\n             Desig_Typ := Etype (Expression (N));\n \n             if Is_Access_Type (Desig_Typ) then\n-               Desig_Typ := Directly_Designated_Type (Desig_Typ);\n+               Desig_Typ :=\n+                 Available_View (Directly_Designated_Type (Desig_Typ));\n             end if;\n \n             if Is_Concurrent_Type (Desig_Typ) then"}, {"sha": "ad63bac196eb5c8d42ee94349cf0516991452b58", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -4418,10 +4418,12 @@ function To_String (Source : Unbounded_String)\n @end smallexample\n \n @noindent\n-The effect is that if the value of an unbounded string is written to a\n-stream, then the representation of the item in the stream is in the same\n-format used for @code{Standard.String}, and this same representation is\n-expected when a value of this type is read from the stream.\n+The effect is that if the value of an unbounded string is written to a stream,\n+then the representation of the item in the stream is in the same format that\n+would be used for @code{Standard.String'Output}, and this same representation\n+is expected when a value of this type is read from the stream. Note that the\n+value written always includes the bounds, even for Unbounded_String'Write,\n+since Unbounded_String is not an array type.\n \n @node Pragma Style_Checks\n @unnumberedsec Pragma Style_Checks"}, {"sha": "cb1f6df14d6e36a96e58069e3295293e39b8f07d", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -20685,6 +20685,11 @@ a generic instantiation a full source location is a chain from the location\n of this construct in the generic unit to the place where this unit is\n instantiated.\n \n+@cindex @option{^-log^/LOG^} (@command{gnatcheck})\n+@item ^-log^/LOG^\n+Duplicate all the output sent to Stderr into a log file. The log file is\n+named @var{gnatcheck.log} and is located in the current directory.\n+\n @cindex @option{^-m^/DIAGNOSTIC_LIMIT^} (@command{gnatcheck})\n @item ^-m@i{nnn}^/DIAGNOSTIC_LIMIT=@i{nnn}^\n Maximum number of diagnoses to be sent to Stdout, @i{nnn} from o@dots{}1000,\n@@ -20714,12 +20719,15 @@ Include the section containing diagnoses ordered by rules in the report file\n Include the section containing diagnoses ordered by files and then by rules\n in the report file\n \n+@cindex @option{^-t^/TIME^} (@command{gnatcheck})\n+@item ^-t^/TIME^\n+Print out execution time.\n+\n @cindex @option{^-v^/VERBOSE^} (@command{gnatcheck})\n @item ^-v^/VERBOSE^\n Verbose mode; @command{gnatcheck} generates version information and then\n a trace of sources being processed.\n \n-\n @cindex @option{^-o ^/OUTPUT^} (@command{gnatcheck})\n @item ^-o ^/OUTPUT=^@var{report_file}\n Set name of report file file to @var{report_file} .\n@@ -20814,7 +20822,10 @@ which enables all the standard style checks that corresponds to @option{-gnatyy}\n GNAT style check option, or a string that has exactly the same\n structure and semantics as the @code{string_LITERAL} parameter of GNAT pragma\n @code{Style_Checks} (for further information about this pragma,\n-@pxref{Pragma Style_Checks,,, gnat_rm, GNAT Reference Manual}).\n+@pxref{Pragma Style_Checks,,, gnat_rm, GNAT Reference Manual}). For example,\n+@code{+RStyle_Checks:O} rule option activates and adds to @command{gnatcheck}\n+output the compiler style check that corresponds to @code{-gnatyO} style\n+check option.\n \n @item Warnings\n To record compiler warnings (@pxref{Warning Message Control}), use the rule\n@@ -21512,6 +21523,9 @@ The following declarations are checked:\n @item\n type declarations\n \n+@item\n+subtype declarations\n+\n @item\n constant declarations (but not number declarations)\n \n@@ -21583,6 +21597,15 @@ should have the @emph{suffix1} suffix except for the case when\n the designated type is also an access type, in this case the\n type name should have the @emph{suffix1 & suffix2} suffix.\n \n+@item Class_Access_Suffix=@emph{string}\n+Specifies the suffix for the name of an access type that points to some class-wide\n+type. If this parameter is set, it overrides for such access\n+types the suffix set by the @code{Type_Suffix} or @code{Access_Suffix}\n+parameter.\n+\n+@item Class_Subtype_Suffix=@emph{string}\n+Specifies the suffix for the name of a subtype that denotes a class-wide type.\n+\n @item Constant_Suffix=@emph{string}\n Specifies the suffix for a constant name.\n \n@@ -21613,6 +21636,19 @@ does not disable any other checks for this rule.\n If @code{Type_Suffix} is set, access type names are\n checked as ordinary type names.\n \n+@item Class_Access_Suffix\n+Removes the suffix specified for access types pointing to class-wide\n+type. This disables specific checks for names of access types pointing to\n+class-wide types but does not disable any other checks for this rule.\n+If @code{Type_Suffix} is set, access type names are\n+checked as ordinary type names. If @code{Access_Suffix} is set, these\n+access types are checked as any other access type name.\n+\n+@item Class_Subtype_Suffix=@emph{string}\n+Removes the suffix specified for subtype names.\n+This disables checks for subtype names but\n+does not disable any other checks for this rule.\n+\n @item Constant_Suffix\n Removes the suffix specified for constants. This\n disables checks for constant names but does not"}, {"sha": "5977a8ae51f765173fd9a5b3aa38ed86865bd4b8", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -7777,6 +7777,8 @@ package body Prj.Nmsc is\n             OK := False;\n \n             --  ??? Don't we have a hash table to map files to Source_Id?\n+            --  ??? Why can't simply iterate over the sources of the current\n+            --  project, as opposed to the whole tree ?\n \n             Iter := For_Each_Source (In_Tree);\n             loop\n@@ -7793,7 +7795,9 @@ package body Prj.Nmsc is\n \n                      if Current_Verbosity = High then\n                         Write_Str (\"Removing file \");\n-                        Write_Line (Get_Name_String (Excluded.File));\n+                        Write_Line\n+                          (Get_Name_String (Excluded.File)\n+                           & \" \" & Get_Name_String (Source.Project.Name));\n                      end if;\n \n                   else\n@@ -7803,7 +7807,16 @@ package body Prj.Nmsc is\n                         Excluded.Location);\n                   end if;\n \n-                  exit;\n+                  --  We used to exit here, but in fact when a source is\n+                  --  overridden in an extended project we have only marked the\n+                  --  original source file if we stop here, not the one from\n+                  --  the extended project.\n+                  --  ??? We could exit (and thus be faster) if the loop could\n+                  --  be done only on the current project, but this isn't\n+                  --  compatible with the way gprbuild works with excluded\n+                  --  sources apparently\n+\n+                  --  exit;\n                end if;\n \n                Next (Iter);\n@@ -8272,6 +8285,16 @@ package body Prj.Nmsc is\n          Replaced_By.Declared_In_Interfaces := Id.Declared_In_Interfaces;\n       end if;\n \n+      Id.In_Interfaces := False;\n+      Id.Locally_Removed := True;\n+\n+      --  ??? Should we remove the source from the unit ? The file is not used,\n+      --  so probably should not be referenced from the unit. On the other hand\n+      --  it might give useful additional info\n+      --        if Id.Unit /= null then\n+      --           Id.Unit.File_Names (Id.Kind) := null;\n+      --        end if;\n+\n       Source := Id.Language.First_Source;\n \n       if Source = Id then"}, {"sha": "3889e66e5eaf3197a073d1a11937559e1522e26d", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -1237,7 +1237,6 @@ package Prj is\n \n    function Empty_Project return Project_Data;\n    --  Return the representation of an empty project.\n-   --  In Ada-only mode, the Ada language is also partly initialized\n \n    function Is_Extending\n      (Extending : Project_Id;"}, {"sha": "dc353d05c6bf0a3d547e2c7060b8dd66e3c69095", "filename": "gcc/ada/seh_init.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fseh_init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fseh_init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fseh_init.c?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -211,17 +211,14 @@ __gnat_install_SEH_handler (void *ER)\n \n   /* put current handler in ptr */\n \n-  asm (\"mov %%fs:(0),%%ecx\" : : : \"%ecx\");\n-  asm (\"mov %%ecx,%0\" : \"=m\" (ptr));\n+  asm (\"mov %%fs:(0),%0\" : \"=r\" (ptr));\n \n   ((int *)ER)[0] = (int)ptr;                       /* previous handler */\n   ((int *)ER)[1] = (int)__gnat_SEH_error_handler;  /* new handler */\n \n-  /* ptr is the new handler, set fs:(0) with this value */\n+  /* ER is the new handler, set fs:(0) with this value */\n \n-  ptr = (int *)ER;\n-  asm (\"mov %0,%%ecx\" : : \"m\" (ptr) : \"%ecx\");\n-  asm (\"mov %ecx,%fs:(0)\");\n+  asm volatile (\"mov %0,%%fs:(0)\": : \"r\" (ER));\n }\n \n #else /* defined (_WIN32) && !defined (_WIN64) */"}, {"sha": "b61633750312662f8f3aae2a08d4438769a4f10a", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c236914646f38f11fc12e1a4a1957c2378c51171/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=c236914646f38f11fc12e1a4a1957c2378c51171", "patch": "@@ -1107,6 +1107,15 @@ package body Sem_Warn is\n                      then\n                         null;\n \n+                     --  Suppress warning on formals of an entry body. All\n+                     --  references are attached to the formal in the entry\n+                     --  declaration, which are marked Is_Entry_Formal.\n+\n+                     elsif Ekind (Scope (E1)) = E_Entry\n+                       and then not Is_Entry_Formal (E1)\n+                     then\n+                        null;\n+\n                      --  OK, looks like warning for an IN OUT parameter that\n                      --  could be IN makes sense, but we delay the output of\n                      --  the warning, pending possibly finding out later on"}]}