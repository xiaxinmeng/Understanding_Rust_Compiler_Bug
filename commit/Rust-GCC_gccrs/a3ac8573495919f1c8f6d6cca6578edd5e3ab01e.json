{"sha": "a3ac8573495919f1c8f6d6cca6578edd5e3ab01e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNhYzg1NzM0OTU5MTlmMWM4ZjZkNmNjYTY1NzhlZGQ1ZTNhYjAxZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-09-05T22:48:10Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-06T09:31:43Z"}, "message": "Resolve Enums and EnumItems\n\nGenerate paths for Enum and EnumItem AST NodeIds and resolve the types\nof tuple and struct enum items.\n\nEnumItems always have the Enum as prefix. To make this work for\nResolveStms (declaration statements are not given a canonical path) we\nadd an enum_prefix to be used when resolving EnumItems.\n\nFor ResolveType the tuple and struct fields get resolved using the\nEnum type scope.\n\nAdd tests for toplevel or stmt enums with duplicate variant names. And\nadjust the tuple_enum_variants.rs testcase to expect unused name\nwarnings.", "tree": {"sha": "9be0522fb83ecfc8bec9c559b58cd7b9e57e848c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9be0522fb83ecfc8bec9c559b58cd7b9e57e848c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bbe1af01db19b67cf668384b096e0e6a01765e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbe1af01db19b67cf668384b096e0e6a01765e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bbe1af01db19b67cf668384b096e0e6a01765e6"}], "stats": {"total": 258, "additions": 254, "deletions": 4}, "files": [{"sha": "2a2f956a3854f2491cb54797c7b3fc0304541bc0", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=a3ac8573495919f1c8f6d6cca6578edd5e3ab01e", "patch": "@@ -260,6 +260,42 @@ class ResolveItem : public ResolverBase\n     resolver->get_type_scope ().pop ();\n   }\n \n+  void visit (AST::Enum &enum_decl) override\n+  {\n+    NodeId scope_node_id = enum_decl.get_node_id ();\n+    resolver->get_type_scope ().push (scope_node_id);\n+\n+    if (enum_decl.has_generics ())\n+      {\n+\tfor (auto &generic : enum_decl.get_generic_params ())\n+\t  {\n+\t    ResolveGenericParam::go (generic.get (), enum_decl.get_node_id ());\n+\t  }\n+      }\n+\n+    /* The actual fields are inside the variants.  */\n+    for (auto &variant : enum_decl.get_variants ())\n+      ResolveItem::go (variant.get ());\n+\n+    resolver->get_type_scope ().pop ();\n+  }\n+\n+  /* EnumItem doesn't need to be handled, no fields.  */\n+\n+  void visit (AST::EnumItemTuple &item) override\n+  {\n+    for (auto &field : item.get_tuple_fields ())\n+      ResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+  }\n+\n+  void visit (AST::EnumItemStruct &item) override\n+  {\n+    for (auto &field : item.get_struct_fields ())\n+      ResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+  }\n+\n+  /* EnumItemDiscriminant doesn't need to be handled, no fields.  */\n+\n   void visit (AST::StructStruct &struct_decl) override\n   {\n     NodeId scope_node_id = struct_decl.get_node_id ();"}, {"sha": "43bf0a421d692109fb194910a4bd947a204bec79", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 102, "deletions": 3, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=a3ac8573495919f1c8f6d6cca6578edd5e3ab01e", "patch": "@@ -33,9 +33,11 @@ class ResolveStmt : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::Stmt *stmt, NodeId parent)\n+  static void go (AST::Stmt *stmt, NodeId parent,\n+\t\t  const CanonicalPath &enum_prefix\n+\t\t  = CanonicalPath::create_empty ())\n   {\n-    ResolveStmt resolver (parent);\n+    ResolveStmt resolver (parent, enum_prefix);\n     stmt->accept_vis (resolver);\n   };\n \n@@ -98,6 +100,97 @@ class ResolveStmt : public ResolverBase\n     resolver->get_type_scope ().pop ();\n   }\n \n+  void visit (AST::Enum &enum_decl) override\n+  {\n+    auto enum_path = CanonicalPath::new_seg (enum_decl.get_node_id (),\n+\t\t\t\t\t     enum_decl.get_identifier ());\n+    resolver->get_type_scope ().insert (\n+      enum_path, enum_decl.get_node_id (), enum_decl.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (enum_decl.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+\n+    NodeId scope_node_id = enum_decl.get_node_id ();\n+    resolver->get_type_scope ().push (scope_node_id);\n+\n+    if (enum_decl.has_generics ())\n+      {\n+\tfor (auto &generic : enum_decl.get_generic_params ())\n+\t  {\n+\t    ResolveGenericParam::go (generic.get (), enum_decl.get_node_id ());\n+\t  }\n+      }\n+\n+    for (auto &variant : enum_decl.get_variants ())\n+      ResolveStmt::go (variant.get (), parent, enum_path);\n+\n+    resolver->get_type_scope ().pop ();\n+  }\n+\n+  void visit (AST::EnumItem &item) override\n+  {\n+    auto path = enum_prefix.append (\n+      CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n+    resolver->get_type_scope ().insert (\n+      path, item.get_node_id (), item.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (item.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+\n+    // Done, no fields.\n+  }\n+\n+  void visit (AST::EnumItemTuple &item) override\n+  {\n+    auto path = enum_prefix.append (\n+      CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n+    resolver->get_type_scope ().insert (\n+      path, item.get_node_id (), item.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (item.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+\n+    for (auto &field : item.get_tuple_fields ())\n+      ResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+  }\n+\n+  void visit (AST::EnumItemStruct &item) override\n+  {\n+    auto path = enum_prefix.append (\n+      CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n+    resolver->get_type_scope ().insert (\n+      path, item.get_node_id (), item.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (item.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+\n+    for (auto &field : item.get_struct_fields ())\n+      ResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+  }\n+\n+  void visit (AST::EnumItemDiscriminant &item) override\n+  {\n+    auto path = enum_prefix.append (\n+      CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n+    resolver->get_type_scope ().insert (\n+      path, item.get_node_id (), item.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (item.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+\n+    // Done, no fields.\n+  }\n+\n   void visit (AST::StructStruct &struct_decl) override\n   {\n     auto path = CanonicalPath::new_seg (struct_decl.get_node_id (),\n@@ -219,7 +312,13 @@ class ResolveStmt : public ResolverBase\n   }\n \n private:\n-  ResolveStmt (NodeId parent) : ResolverBase (parent) {}\n+  ResolveStmt (NodeId parent, const CanonicalPath &enum_prefix)\n+    : ResolverBase (parent), enum_prefix (enum_prefix)\n+  {}\n+\n+  /* item declaration statements are not given a canonical path, but enum items\n+   * (variants) do inherit the enum path/identifier name.  */\n+  const CanonicalPath &enum_prefix;\n };\n \n } // namespace Resolver"}, {"sha": "6f802a5b6e8459d7cefee39c76b572c52020f6b6", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=a3ac8573495919f1c8f6d6cca6578edd5e3ab01e", "patch": "@@ -88,6 +88,75 @@ class ResolveTopLevel : public ResolverBase\n       });\n   }\n \n+  void visit (AST::Enum &enum_decl) override\n+  {\n+    auto path\n+      = prefix.append (CanonicalPath::new_seg (enum_decl.get_node_id (),\n+\t\t\t\t\t       enum_decl.get_identifier ()));\n+    resolver->get_type_scope ().insert (\n+      path, enum_decl.get_node_id (), enum_decl.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (enum_decl.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+\n+    for (auto &variant : enum_decl.get_variants ())\n+      ResolveTopLevel::go (variant.get (), path);\n+  }\n+\n+  void visit (AST::EnumItem &item) override\n+  {\n+    auto path = prefix.append (\n+      CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n+    resolver->get_type_scope ().insert (\n+      path, item.get_node_id (), item.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (item.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+  }\n+\n+  void visit (AST::EnumItemTuple &item) override\n+  {\n+    auto path = prefix.append (\n+      CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n+    resolver->get_type_scope ().insert (\n+      path, item.get_node_id (), item.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (item.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+  }\n+\n+  void visit (AST::EnumItemStruct &item) override\n+  {\n+    auto path = prefix.append (\n+      CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n+    resolver->get_type_scope ().insert (\n+      path, item.get_node_id (), item.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (item.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+  }\n+\n+  void visit (AST::EnumItemDiscriminant &item) override\n+  {\n+    auto path = prefix.append (\n+      CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n+    resolver->get_type_scope ().insert (\n+      path, item.get_node_id (), item.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (item.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+  }\n+\n   void visit (AST::StructStruct &struct_decl) override\n   {\n     auto path"}, {"sha": "7b09a94fd2745968f969df263570943b21625a48", "filename": "gcc/testsuite/rust/compile/bad_stmt_enums.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_stmt_enums.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_stmt_enums.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_stmt_enums.rs?ref=a3ac8573495919f1c8f6d6cca6578edd5e3ab01e", "patch": "@@ -0,0 +1,22 @@\n+fn main ()\n+{\n+  enum EE\n+    {\n+      Alpha { alpha: i32 },\n+      pub Beta (u8),\n+      pub Gamma,\n+      Gamma { gamma: u32 } // { dg-error \"redefined\" }\n+    }\n+\n+  struct EE2 { }\n+  enum EE2 { } // { dg-error \"redefined\" }\n+\n+  enum EE1\n+    {\n+      pub Alpha,\n+      Beta = 41,\n+      Beta = 42, // { dg-error \"redefined\" }\n+      pub Gamma = 3,\n+      D,\n+    }\n+}"}, {"sha": "b655e30a93da402b21c3397493189a264c3f1355", "filename": "gcc/testsuite/rust/compile/bad_toplevel_enums.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_toplevel_enums.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_toplevel_enums.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_toplevel_enums.rs?ref=a3ac8573495919f1c8f6d6cca6578edd5e3ab01e", "patch": "@@ -0,0 +1,19 @@\n+pub enum E\n+{\n+  pub A { a: i32 },\n+  B (u8),\n+  pub C,\n+  B // { dg-error \"redefined\" }\n+}\n+\n+enum E2 { }\n+struct E2 { } // { dg-error \"redefined\" }\n+\n+enum E1\n+{\n+  A,\n+  pub B = 42,\n+  C = 3,\n+  A { a: u8 }, // { dg-error \"redefined\" }\n+  pub D\n+}"}, {"sha": "f65bd3b5c69bf05f7ecd55f8b9af848a16a43049", "filename": "gcc/testsuite/rust/compile/torture/tuple_enum_variants.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_enum_variants.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ac8573495919f1c8f6d6cca6578edd5e3ab01e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_enum_variants.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_enum_variants.rs?ref=a3ac8573495919f1c8f6d6cca6578edd5e3ab01e", "patch": "@@ -1,4 +1,9 @@\n-enum E { T0(), T1(i32), T2(i32,u32) }\n+enum E        // { dg-warning \"unused name\" }\n+{\n+  T0(),       // { dg-warning \"unused name\" }\n+  T1(i32),    // { dg-warning \"unused name\" }\n+  T2(i32,u32) // { dg-warning \"unused name\" }\n+}\n \n /* The following doesn't parse yet...\n fn f(e0: E, e1: E, e2: E) -> (E,E,E,())"}]}