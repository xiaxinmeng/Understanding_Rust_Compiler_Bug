{"sha": "55c6e1a6dd2f997ef0c4b12b2ede788c09213fce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVjNmUxYTZkZDJmOTk3ZWYwYzRiMTJiMmVkZTc4OGMwOTIxM2ZjZQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-06-07T17:28:01Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-06-07T17:28:01Z"}, "message": "* cp/decl.c (xref_tag): Remove undefined macro NONNESTED_CLASSES.\n\nFrom-SVN: r67592", "tree": {"sha": "26da271fd8a5f2c137f266d8b0cacd395ed7d709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26da271fd8a5f2c137f266d8b0cacd395ed7d709"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55c6e1a6dd2f997ef0c4b12b2ede788c09213fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c6e1a6dd2f997ef0c4b12b2ede788c09213fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55c6e1a6dd2f997ef0c4b12b2ede788c09213fce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c6e1a6dd2f997ef0c4b12b2ede788c09213fce/comments", "author": null, "committer": null, "parents": [{"sha": "a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "ad74fd570c5f64362b7219f7a4bee0e212946778", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55c6e1a6dd2f997ef0c4b12b2ede788c09213fce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55c6e1a6dd2f997ef0c4b12b2ede788c09213fce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=55c6e1a6dd2f997ef0c4b12b2ede788c09213fce", "patch": "@@ -1,3 +1,7 @@\n+2003-06-07  Andreas Jaeger  <aj@suse.de>\n+\n+\t* cp/decl.c (xref_tag): Remove undefined macro NONNESTED_CLASSES.\n+\n 2003-06-07  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* cp-lang.c (LANG_HOOKS_DECODE_OPTON): Drop.\n@@ -58,7 +62,7 @@ Thu Jun  5 18:33:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(make_binding_level): Remove.\n \t(initial_push__namespace_scope): New function.\n \t(push_namespace): Use it.  Simplify.\n-\t(cxx_init_decl_processing): Likewise. \n+\t(cxx_init_decl_processing): Likewise.\n \t(declare_namespace_level): Remove.\n \n 2003-05-31  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n@@ -73,7 +77,7 @@ Thu Jun  5 18:33:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(binding_depth): Unconditionally define.\n \t(is_class_level): Likewise.\n \t(indent): Likewise.  Take an indenting parameter.\n-\t(push_binding_level): Remove conditional definittion. \n+\t(push_binding_level): Remove conditional definittion.\n \t(pop_binding_level): Likewise.\n \t(suspend_binding_level): Likewise.\n \t(resume_binding_level): Likewise.\n@@ -86,7 +90,7 @@ Thu Jun  5 18:33:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* name-lookup.h (global_scope_p): New macro.\n \t* decl.c (pop_binding_level): Use it.  Don't refer directly to\n-\tglobal_binding_level. \n+\tglobal_binding_level.\n \t(suspend_binding_level): Likewise.\n \t(global_bindings_p): Likewise.\n \t(print_other_binding_stack): Likewise.\n@@ -143,25 +147,25 @@ Thu Jun  5 18:33:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* lang-options.h: Document -Wno-invalid-offsetof\n \t* typeck.c (build_class_member_access_expr): Don't complain about\n \t(Foo *)p->x for non-POD Foo if warn_invalid_offset is zero.\n-\t\n+\n 2003-05-18 Andrew Pinski <pinskia@physics.uc.edu>\n \n \t* name-lookup.c (free_binding_entry): fix where the GTY markers are.\n \t(binding_entry_make): Make entry->chain NULL after getting an entry.\n \tfix the spelling of chain in a comment.\n \t(binding_table_free): speed up by having temporary variable.\n \t(binding_table_new): set table->chain to be NULL after allocating\n-\ta table. \n+\ta table.\n \t(cxx_binding_make): use gcc_alloc instead of ggc_alloc_cleared and set\n \tbinding->previous to NULL after getting an binding for speed.\n-\t\n+\n 2003-05-18  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* cp-tree.h (struct lang_type_class): Replace data member tags\n \twith hash-table nested_udts.\n \t(CLASSTYPE_NESTED_UTDS): Rename from CLASSTYPE_TAGS.\n \t* class.c (unreverse_member_declarations): Don't touch\n-\tCLASSTYPE_TAGS. \n+\tCLASSTYPE_TAGS.\n \t(pushclass): Use cxx_remember_type_decls.\n \t* decl.c (struct cp_binding_level): Replace data member tags with\n \thash-table type_decls.\n@@ -234,13 +238,13 @@ Thu Jun  5 18:33:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* ptree.c (cxx_print_type, cxx_print_xnode): Use string\n \tconcatentation on HOST_WIDE_INT_PRINT_* format specifier to\n \tcollapse multiple function calls into one.\n-\t* tree.c (debug_binfo): Likewise.\t\n+\t* tree.c (debug_binfo): Likewise.\n \n 2003-05-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/5388\n \t* call.c (conditional_conversion): Don't consider implicit\n-\tconversions if T2 is a base of T1. \n+\tconversions if T2 is a base of T1.\n \t* cp-tree.h (DERIVED_FROM_P, UNIQUELY_DERIVED_FROM_P): Make boolean.\n \t(ACCESSIBLY_UNIQUELY_DERIVED_P, PUBLICLY_UNIQUELY_DERIVED_P): Likewise.\n "}, {"sha": "1807d05f5a0f406d9bcb7f374e26158e96fc68c9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55c6e1a6dd2f997ef0c4b12b2ede788c09213fce/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55c6e1a6dd2f997ef0c4b12b2ede788c09213fce/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=55c6e1a6dd2f997ef0c4b12b2ede788c09213fce", "patch": "@@ -12757,11 +12757,6 @@ xref_tag (enum tag_types tag_code, tree name, tree attributes,\n \n \t  ref = make_aggr_type (code);\n \t  TYPE_CONTEXT (ref) = context;\n-\n-#ifdef NONNESTED_CLASSES\n-\t  /* Class types don't nest the way enums do.  */\n-\t  class_binding_level = (struct cp_binding_level *)0;\n-#endif\n \t  pushtag (name, ref, globalize);\n \t  class_binding_level = old_b;\n \t}"}]}