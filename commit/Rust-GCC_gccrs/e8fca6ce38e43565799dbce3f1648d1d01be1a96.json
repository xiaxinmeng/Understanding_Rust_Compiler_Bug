{"sha": "e8fca6ce38e43565799dbce3f1648d1d01be1a96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThmY2E2Y2UzOGU0MzU2NTc5OWRiY2UzZjE2NDhkMWQwMWJlMWE5Ng==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-01T02:40:16Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-01T02:40:16Z"}, "message": "(dbxout_type): Re-enable debugging output for anonymous structures.\n\n(dbxout_type): Re-enable debugging output for anonymous\nstructures.  Change all three places that refer to xrefs to use\nexactly the same condition.\n\nFrom-SVN: r6935", "tree": {"sha": "61b4bc84f30de47227f4139f0984f93d1dae3438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61b4bc84f30de47227f4139f0984f93d1dae3438"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8fca6ce38e43565799dbce3f1648d1d01be1a96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fca6ce38e43565799dbce3f1648d1d01be1a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8fca6ce38e43565799dbce3f1648d1d01be1a96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fca6ce38e43565799dbce3f1648d1d01be1a96/comments", "author": null, "committer": null, "parents": [{"sha": "45ce961e2ff1a75b7d9ad1e230a5daad7cddb2d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ce961e2ff1a75b7d9ad1e230a5daad7cddb2d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45ce961e2ff1a75b7d9ad1e230a5daad7cddb2d1"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "7f79b1a2f9a377465b560135d5340b200c6a79eb", "filename": "gcc/dbxout.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fca6ce38e43565799dbce3f1648d1d01be1a96/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fca6ce38e43565799dbce3f1648d1d01be1a96/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e8fca6ce38e43565799dbce3f1648d1d01be1a96", "patch": "@@ -983,9 +983,15 @@ dbxout_type (type, full, show_arg_types)\n   if (TREE_CODE (type) == RECORD_TYPE || TREE_CODE (type) == UNION_TYPE\n       || TREE_CODE (type) == QUAL_UNION_TYPE\n       || TREE_CODE (type) == ENUMERAL_TYPE)\n-\n-    if ((TYPE_NAME (type) != 0 && !full)\n-\t|| TYPE_SIZE (type) == 0)\n+    /* We must use the same test here as we use twice below when deciding\n+       whether to emit a cross-reference.  */\n+    if ((TYPE_NAME (type) != 0\n+\t && ! (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n+\t       && DECL_IGNORED_P (TYPE_NAME (type)))\n+\t && !full)\n+\t|| TYPE_SIZE (type) == 0\n+\t/* No way in DBX fmt to describe a variable size.  */\n+\t|| TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n       {\n \ttypevec[TYPE_SYMTAB_ADDRESS (type)] = TYPE_XREF;\n \treturn;\n@@ -1157,16 +1163,11 @@ dbxout_type (type, full, show_arg_types)\n \tif (TYPE_BINFO (type) != 0 && TYPE_BINFO_BASETYPES (type) != 0)\n \t  n_baseclasses = TREE_VEC_LENGTH (TYPE_BINFO_BASETYPES (type));\n \n-\t/* Output a structure type.  */\n+\t/* Output a structure type.  We must use the same test here as we\n+\t   use in the DBX_NO_XREFS case above.  */\n \tif ((TYPE_NAME (type) != 0\n-\t     /* Long ago, Tiemann said this creates output that \"confuses GDB\".\n-\t\tIn April 93, mrs@cygnus.com said there is no such problem.\n-\t\tThe type decls made automatically by struct specifiers\n-\t\tare marked with DECL_IGNORED_P in C++.  */\n-#if 0 /* This creates output for anonymous classes which confuses GDB. */\n \t     && ! (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n \t\t   && DECL_IGNORED_P (TYPE_NAME (type)))\n-#endif\n \t     && !full)\n \t    || TYPE_SIZE (type) == 0\n \t    /* No way in DBX fmt to describe a variable size.  */\n@@ -1278,9 +1279,13 @@ dbxout_type (type, full, show_arg_types)\n       break;\n \n     case ENUMERAL_TYPE:\n-      if ((TYPE_NAME (type) != 0 && !full\n-\t   && (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n-\t       && ! DECL_IGNORED_P (TYPE_NAME (type))))\n+      /* We must use the same test here as we use in the DBX_NO_XREFS case\n+\t above.  We simplify it a bit since an enum will never have a variable\n+\t size.  */\n+      if ((TYPE_NAME (type) != 0\n+\t   && ! (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n+\t\t && DECL_IGNORED_P (TYPE_NAME (type)))\n+\t   && !full)\n \t  || TYPE_SIZE (type) == 0)\n \t{\n \t  fprintf (asmfile, \"xe\");"}]}