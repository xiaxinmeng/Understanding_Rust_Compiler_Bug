{"sha": "2b57045bfc0c746c5bbc952cf8a4da70548b5775", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI1NzA0NWJmYzBjNzQ2YzViYmM5NTJjZjhhNGRhNzA1NDhiNTc3NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-02T17:03:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-02T17:03:36Z"}, "message": "re PR target/46716 (wrong code generated with -mno-sse2 -m64)\n\n\tPR target/46716\n\t* config/i386/i386.c (construct_container): Use gen_reg_or_parallel\n\tto pass the argument in the register of \"natural\" mode.\n\ntestsuite/ChangeLog:\n\n\tPR target/46716\n\t* gcc.target/i386/pr46176.c: New test.\n\nFrom-SVN: r184802", "tree": {"sha": "de672f41ad561e09e8cfbbfb2c60a2a8adcc5ed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de672f41ad561e09e8cfbbfb2c60a2a8adcc5ed0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b57045bfc0c746c5bbc952cf8a4da70548b5775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b57045bfc0c746c5bbc952cf8a4da70548b5775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b57045bfc0c746c5bbc952cf8a4da70548b5775", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b57045bfc0c746c5bbc952cf8a4da70548b5775/comments", "author": null, "committer": null, "parents": [{"sha": "08c3865834b9965affb39529e6209002d0fe73e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c3865834b9965affb39529e6209002d0fe73e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c3865834b9965affb39529e6209002d0fe73e5"}], "stats": {"total": 147, "additions": 99, "deletions": 48}, "files": [{"sha": "d1b971bed3a52b5ac8296df6278b86ea67e57ec7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b57045bfc0c746c5bbc952cf8a4da70548b5775/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b57045bfc0c746c5bbc952cf8a4da70548b5775/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b57045bfc0c746c5bbc952cf8a4da70548b5775", "patch": "@@ -1,3 +1,9 @@\n+2012-03-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/46716\n+\t* config/i386/i386.c (construct_container): Use gen_reg_or_parallel\n+\tto pass the argument in the register of \"natural\" mode.\n+\n 2012-03-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52406\n@@ -20,10 +26,10 @@\n \n 2012-03-02  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n-       * config/arm/arm-ldmstm.ml (write_ldm_commutative_peephole):\n+\t* config/arm/arm-ldmstm.ml (write_ldm_commutative_peephole):\n \tImprove conditions for peepholes of loads followed by commutative\n \toperators.\n-       * config/arm/ldmstm.md: Regenerated.\n+\t* config/arm/ldmstm.md: Regenerated.\n \n 2012-03-02  Richard Guenther  <rguenther@suse.de>\n \n@@ -125,7 +131,7 @@\n 2012-03-01  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr-c.c (avr_cpu_cpp_builtins): Restore built-in\n-\tdefines for __UINT24_MAX__, __INT24_MAX__, __INT24_MIN__ \n+\tdefines for __UINT24_MAX__, __INT24_MAX__, __INT24_MIN__\n \tunintentionally removed in r184616.\n \n 2012-03-01  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n@@ -251,8 +257,7 @@\n \t(neon_vcgeu): New insn.\n \t(neon_vcgtu): Likewise.\n \t* config/arm/neon.ml (s_8_32, u_8_32): New lists.\n-\t(ops): Unsigned comparison intrinsics call a different\n-\tbuiltin.\n+\t(ops): Unsigned comparison intrinsics call a different builtin.\n \n 2012-02-28  Richard Guenther  <rguenther@suse.de>\n \n@@ -281,7 +286,7 @@\n \n \t* config/avr/avr-devices.c (avr_mcu_type): Adjust NULL part\n \tof initializer to changes from r184614.\n-\t\n+\n 2012-02-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52395\n@@ -350,8 +355,7 @@\n 2012-02-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/52352\n-\t* config/i386/i386.md (*movabs<mode>_1): Enable only for\n-\tTARGET_LP64.\n+\t* config/i386/i386.md (*movabs<mode>_1): Enable only for TARGET_LP64.\n \t(*movabs<mode>_2): Likewise.\n \n 2012-02-27  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "65c4c421d1f8fdcc6720f0682bea60310623eb0c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 42, "deletions": 27, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b57045bfc0c746c5bbc952cf8a4da70548b5775/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b57045bfc0c746c5bbc952cf8a4da70548b5775/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2b57045bfc0c746c5bbc952cf8a4da70548b5775", "patch": "@@ -5829,7 +5829,8 @@ classify_argument (enum machine_mode mode, const_tree type,\n {\n   HOST_WIDE_INT bytes =\n     (mode == BLKmode) ? int_size_in_bytes (type) : (int) GET_MODE_SIZE (mode);\n-  int words = (bytes + (bit_offset % 64) / 8 + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n+  int words\n+    = (bytes + (bit_offset % 64) / 8 + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n   /* Variable sized entities are always passed/returned in memory.  */\n   if (bytes < 0)\n@@ -5879,7 +5880,8 @@ classify_argument (enum machine_mode mode, const_tree type,\n \t\t     misaligned integers.  */\n \t\t  if (DECL_BIT_FIELD (field))\n \t\t    {\n-\t\t      for (i = (int_bit_position (field) + (bit_offset % 64)) / 8 / 8;\n+\t\t      for (i = (int_bit_position (field)\n+\t\t\t\t+ (bit_offset % 64)) / 8 / 8;\n \t\t\t   i < ((int_bit_position (field) + (bit_offset % 64))\n \t\t\t        + tree_low_cst (DECL_SIZE (field), 0)\n \t\t\t\t+ 63) / 8 / 8; i++)\n@@ -5919,7 +5921,8 @@ classify_argument (enum machine_mode mode, const_tree type,\n \t\t\t\t\t\t+ bit_offset) % 256);\n \t\t      if (!num)\n \t\t\treturn 0;\n-\t\t      pos = (int_bit_position (field) + (bit_offset % 64)) / 8 / 8;\n+\t\t      pos = (int_bit_position (field)\n+\t\t\t     + (bit_offset % 64)) / 8 / 8;\n \t\t      for (i = 0; i < num && (i + pos) < words; i++)\n \t\t\tclasses[i + pos] =\n \t\t\t  merge_classes (subclasses[i], classes[i + pos]);\n@@ -6336,21 +6339,27 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n       default:\n \tgcc_unreachable ();\n       }\n-  if (n == 2 && regclass[0] == X86_64_SSE_CLASS\n-      && regclass[1] == X86_64_SSEUP_CLASS && mode != BLKmode)\n-    return gen_rtx_REG (mode, SSE_REGNO (sse_regno));\n+  if (n == 2\n+      && regclass[0] == X86_64_SSE_CLASS\n+      && regclass[1] == X86_64_SSEUP_CLASS\n+      && mode != BLKmode)\n+    return gen_reg_or_parallel (mode, orig_mode,\n+\t\t\t\tSSE_REGNO (sse_regno));\n   if (n == 4\n       && regclass[0] == X86_64_SSE_CLASS\n       && regclass[1] == X86_64_SSEUP_CLASS\n       && regclass[2] == X86_64_SSEUP_CLASS\n       && regclass[3] == X86_64_SSEUP_CLASS\n       && mode != BLKmode)\n-    return gen_rtx_REG (mode, SSE_REGNO (sse_regno));\n-\n+    return gen_reg_or_parallel (mode, orig_mode,\n+\t\t\t\tSSE_REGNO (sse_regno));\n   if (n == 2\n-      && regclass[0] == X86_64_X87_CLASS && regclass[1] == X86_64_X87UP_CLASS)\n+      && regclass[0] == X86_64_X87_CLASS\n+      && regclass[1] == X86_64_X87UP_CLASS)\n     return gen_rtx_REG (XFmode, FIRST_STACK_REG);\n-  if (n == 2 && regclass[0] == X86_64_INTEGER_CLASS\n+\n+  if (n == 2\n+      && regclass[0] == X86_64_INTEGER_CLASS\n       && regclass[1] == X86_64_INTEGER_CLASS\n       && (mode == CDImode || mode == TImode || mode == TFmode)\n       && intreg[0] + 1 == intreg[1])\n@@ -6369,31 +6378,36 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n \t  case X86_64_INTEGERSI_CLASS:\n \t    /* Merge TImodes on aligned occasions here too.  */\n \t    if (i * 8 + 8 > bytes)\n-\t      tmpmode = mode_for_size ((bytes - i * 8) * BITS_PER_UNIT, MODE_INT, 0);\n+\t      tmpmode\n+\t\t= mode_for_size ((bytes - i * 8) * BITS_PER_UNIT, MODE_INT, 0);\n \t    else if (regclass[i] == X86_64_INTEGERSI_CLASS)\n \t      tmpmode = SImode;\n \t    else\n \t      tmpmode = DImode;\n-\t    /* We've requested 24 bytes we don't have mode for.  Use DImode.  */\n+\t    /* We've requested 24 bytes we\n+\t       don't have mode for.  Use DImode.  */\n \t    if (tmpmode == BLKmode)\n \t      tmpmode = DImode;\n-\t    exp [nexps++] = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t\t       gen_rtx_REG (tmpmode, *intreg),\n-\t\t\t\t\t       GEN_INT (i*8));\n+\t    exp [nexps++]\n+\t      = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t   gen_rtx_REG (tmpmode, *intreg),\n+\t\t\t\t   GEN_INT (i*8));\n \t    intreg++;\n \t    break;\n \t  case X86_64_SSESF_CLASS:\n-\t    exp [nexps++] = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t\t       gen_rtx_REG (SFmode,\n-\t\t\t\t\t\t\t    SSE_REGNO (sse_regno)),\n-\t\t\t\t\t       GEN_INT (i*8));\n+\t    exp [nexps++]\n+\t      = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t   gen_rtx_REG (SFmode,\n+\t\t\t\t\t\tSSE_REGNO (sse_regno)),\n+\t\t\t\t   GEN_INT (i*8));\n \t    sse_regno++;\n \t    break;\n \t  case X86_64_SSEDF_CLASS:\n-\t    exp [nexps++] = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t\t       gen_rtx_REG (DFmode,\n-\t\t\t\t\t\t\t    SSE_REGNO (sse_regno)),\n-\t\t\t\t\t       GEN_INT (i*8));\n+\t    exp [nexps++]\n+\t      = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t   gen_rtx_REG (DFmode,\n+\t\t\t\t\t\tSSE_REGNO (sse_regno)),\n+\t\t\t\t   GEN_INT (i*8));\n \t    sse_regno++;\n \t    break;\n \t  case X86_64_SSE_CLASS:\n@@ -6423,10 +6437,11 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n \t      default:\n \t\tgcc_unreachable ();\n \t      }\n-\t    exp [nexps++] = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t\t       gen_rtx_REG (tmpmode,\n-\t\t\t\t\t\t\t    SSE_REGNO (sse_regno)),\n-\t\t\t\t\t       GEN_INT (pos*8));\n+\t    exp [nexps++]\n+\t      = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t   gen_rtx_REG (tmpmode,\n+\t\t\t\t\t\tSSE_REGNO (sse_regno)),\n+\t\t\t\t   GEN_INT (pos*8));\n \t    sse_regno++;\n \t    break;\n \t  default:"}, {"sha": "108fd363455f9e994baa76ae9fd34676e2a961fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b57045bfc0c746c5bbc952cf8a4da70548b5775/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b57045bfc0c746c5bbc952cf8a4da70548b5775/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b57045bfc0c746c5bbc952cf8a4da70548b5775", "patch": "@@ -1,3 +1,8 @@\n+2012-03-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/46716\n+\t* gcc.target/i386/pr46176.c: New test.\n+\n 2012-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51989\n@@ -30,8 +35,7 @@\n \n \t* gcc.dg/torture/pr47917.c: Make test using POSIX-printf\n \troutines on mingw targets.\n-\t* gcc.dg/vect/pr46126.c (uintptr_t): Add support for\n-\tLLP64 target.\n+\t* gcc.dg/vect/pr46126.c (uintptr_t): Add support for LLP64 target.\n \n 2012-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -125,18 +129,15 @@\n \n 2012-02-28  Kai Tietz  <ktietz@redhat.com>\n \n-\t* gcc.target/i386/pr46939.c (long): Fix LP64 vs LLP64\n-\tissue.\n+\t* gcc.target/i386/pr46939.c (long): Fix LP64 vs LLP64 issue.\n \t* gcc.target/i386/pr45352-2.c: Likewise.\n-\t* gcc.target/i386/bitfield3.c: Add -mno-ms-bitfields for\n-\tmingw targets.\n-\t* gcc.target/i386/xop-vshift-1.c(random): Use on mingw\n+\t* gcc.target/i386/bitfield3.c: Add -mno-ms-bitfields for mingw targets.\n+\t* gcc.target/i386/xop-vshift-1.c (random): Use on mingw\n \ttargets instead rand.\n \t* gcc.target/i386/sse4_1-blendps-2.c: Likewise.\n \t* gcc.target/i386/sse2-mul-1.c: Likewise.\n \t* gcc.target/i386/sse4_1-blendps.c: Likewise.\n-\t* gcc.target/i386/pad-6b.c: Adjust test for x64 mingw\n-\ttarget.\n+\t* gcc.target/i386/pad-6b.c: Adjust test for x64 mingw target.\n \t* gcc.target/i386/pad-1.c: Likewise.\n \t* gcc.target/i386/pad-9.c: Likewise.\n \t* gcc.target/i386/pad-2.c: Likewise.\n@@ -222,8 +223,7 @@\n \n 2012-02-23  Kai Tietz  <ktietz@redhat.com>\n \n-\t* gcc.dg/pack-test-5.c: Add -mno-ms-bitfields option\n-\tfor mingw-targets.\n+\t* gcc.dg/pack-test-5.c: Add -mno-ms-bitfields option for mingw-targets.\n \t* gcc.dg/Wpadded.c: Likewise.\n \t* gcc.dg/bf-ms-layout-2.c: Adjust offsets to fit ms-bitfield\n \tstructure-layout.\n@@ -233,8 +233,7 @@\n \ttargets.\n \t* gcc.dg/stack-usage-1.c (SIZE): Provide proper SIZE for x64 mingw\n \ttarget.\n-\t* gcc.dg/tls/thr-cse-1.c: Provide proper pattern for x64 mingw\n-\ttarget.\n+\t* gcc.dg/tls/thr-cse-1.c: Provide proper pattern for x64 mingw target.\n \t* gcc.dg/tls/opt-11.c (memset): Use __extension__ to avoid fail\n \ton x64 mingw target.\n \t* gcc.dg/bf-ms-attrib.c: Adjust expected size for ms_struct layout."}, {"sha": "29c5e1e4920f1c4e97a084d2f751972637553a0c", "filename": "gcc/testsuite/gcc.target/i386/pr46716.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b57045bfc0c746c5bbc952cf8a4da70548b5775/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46716.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b57045bfc0c746c5bbc952cf8a4da70548b5775/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46716.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46716.c?ref=2b57045bfc0c746c5bbc952cf8a4da70548b5775", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse -mno-sse2\" } */\n+/* { dg-require-effective-target sse } */\n+\n+#include \"sse-check.h\"\n+\n+typedef double V __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef union\n+{\n+  V x;\n+  double a[2];\n+} u;\n+\n+#define EMM_FLT8(a) ((double *)&(a))\n+\n+void __attribute__ ((noinline))\n+test (V s1, V s2)\n+{\n+  if (EMM_FLT8(s1)[0] != EMM_FLT8(s2)[0]\n+      || EMM_FLT8(s1)[1] != EMM_FLT8(s2)[1])\n+    abort ();\n+}\n+\n+static void\n+sse_test (void)\n+{\n+  u s1;\n+\n+  s1.a[0] = 1.0;\n+  s1.a[1] = 2.0;\n+\n+  test (s1.x, s1.x);\n+}"}]}