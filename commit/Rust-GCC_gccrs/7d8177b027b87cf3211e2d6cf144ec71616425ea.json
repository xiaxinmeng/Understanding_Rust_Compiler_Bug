{"sha": "7d8177b027b87cf3211e2d6cf144ec71616425ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q4MTc3YjAyN2I4N2NmMzIxMWUyZDZjZjE0NGVjNzE2MTY0MjVlYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-22T19:21:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-22T19:31:39Z"}, "message": "c++: Remove a broken error-recovery path\n\nThe remaining use of xref_tag_from_type was also suspicious.  It turns\nout to be an error path.  At parse time we diagnose that a class\ndefinition cannot appear, but we swallow the definition.  This code\nwas attempting to push it into the global scope (or find a conflict).\nThis seems needless, just return error_mark_node.  This was the\nsimpler fix than going through the parser and figuring out how to get\nit to put in error_mark_node at the right point.\n\n\tgcc/cp/\n\t* cp-tree.h (xref_tag_from_type): Don't declare.\n\t* decl.c (xref_tag_from_type): Delete.\n\t* pt.c (lookup_template_class_1): Erroneously located class\n\tdefinitions just give error_mark, don't try and inject it into the\n\tnamespace.", "tree": {"sha": "44a2dcbf283da2ba15f3d536fe70d5778a0a6a6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44a2dcbf283da2ba15f3d536fe70d5778a0a6a6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d8177b027b87cf3211e2d6cf144ec71616425ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8177b027b87cf3211e2d6cf144ec71616425ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8177b027b87cf3211e2d6cf144ec71616425ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8177b027b87cf3211e2d6cf144ec71616425ea/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc13106e0414b86af8f6878e7681e6a959921b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc13106e0414b86af8f6878e7681e6a959921b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc13106e0414b86af8f6878e7681e6a959921b9e"}], "stats": {"total": 29, "additions": 5, "deletions": 24}, "files": [{"sha": "029a165a3e8381137f1175e93eec30ed9d8126b1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8177b027b87cf3211e2d6cf144ec71616425ea/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8177b027b87cf3211e2d6cf144ec71616425ea/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7d8177b027b87cf3211e2d6cf144ec71616425ea", "patch": "@@ -6502,7 +6502,6 @@ extern void grok_special_member_properties\t(tree);\n extern bool grok_ctor_properties\t\t(const_tree, const_tree);\n extern bool grok_op_properties\t\t\t(tree, bool);\n extern tree xref_tag\t\t\t\t(enum tag_types, tree, tag_scope, bool);\n-extern tree xref_tag_from_type\t\t\t(tree, tree, tag_scope);\n extern void xref_basetypes\t\t\t(tree, tree);\n extern tree start_enum\t\t\t\t(tree, tree, tree, tree, bool, bool *);\n extern void finish_enum_value_list\t\t(tree);"}, {"sha": "f3fdfe3d896adabedf59fe2d490eef37af700e22", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8177b027b87cf3211e2d6cf144ec71616425ea/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8177b027b87cf3211e2d6cf144ec71616425ea/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7d8177b027b87cf3211e2d6cf144ec71616425ea", "patch": "@@ -15120,23 +15120,6 @@ xref_tag (enum tag_types tag_code, tree name,\n   return ret;\n }\n \n-\n-tree\n-xref_tag_from_type (tree old, tree id, tag_scope scope)\n-{\n-  enum tag_types tag_kind;\n-\n-  if (TREE_CODE (old) == RECORD_TYPE)\n-    tag_kind = (CLASSTYPE_DECLARED_CLASS (old) ? class_type : record_type);\n-  else\n-    tag_kind  = union_type;\n-\n-  if (id == NULL_TREE)\n-    id = TYPE_IDENTIFIER (old);\n-\n-  return xref_tag (tag_kind, id, scope, false);\n-}\n-\n /* Create the binfo hierarchy for REF with (possibly NULL) base list\n    BASE_LIST.  For each element on BASE_LIST the TREE_PURPOSE is an\n    access_* node, and the TREE_VALUE is the type of the base-class."}, {"sha": "69946da09bf8b84537b4c2f9410f9fbf5e1c8f51", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8177b027b87cf3211e2d6cf144ec71616425ea/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8177b027b87cf3211e2d6cf144ec71616425ea/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7d8177b027b87cf3211e2d6cf144ec71616425ea", "patch": "@@ -9856,12 +9856,11 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t  && !PRIMARY_TEMPLATE_P (gen_tmpl)\n \t  && !LAMBDA_TYPE_P (TREE_TYPE (gen_tmpl))\n \t  && TREE_CODE (CP_DECL_CONTEXT (gen_tmpl)) == NAMESPACE_DECL)\n-\t{\n-\t  found = xref_tag_from_type (TREE_TYPE (gen_tmpl),\n-\t\t\t\t      DECL_NAME (gen_tmpl),\n-\t\t\t\t      /*tag_scope=*/ts_global);\n-\t  return found;\n-\t}\n+\t/* This occurs when the user has tried to define a tagged type\n+\t   in a scope that forbids it.  We emitted an error during the\n+\t   parse.  We didn't complete the bail out then, so here we\n+\t   are.  */\n+\treturn error_mark_node;\n \n       context = DECL_CONTEXT (gen_tmpl);\n       if (context && TYPE_P (context))"}]}