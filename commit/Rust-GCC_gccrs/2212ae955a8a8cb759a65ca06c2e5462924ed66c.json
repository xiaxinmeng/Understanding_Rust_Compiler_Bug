{"sha": "2212ae955a8a8cb759a65ca06c2e5462924ed66c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIxMmFlOTU1YThhOGNiNzU5YTY1Y2EwNmMyZTU0NjI5MjRlZDY2Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-06-05T20:07:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-06-05T20:07:01Z"}, "message": "decl.c (smallest_type_location): New.\n\n/cp\n2019-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (smallest_type_location): New.\n\t(check_special_function_return_type): Use it.\n\t(grokdeclarator): Lkewise.\n\n/testsuite\n2019-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/return-type-invalid-1.C: New.\n\t* g++.old-deja/g++.brendan/crash16.C: Adjust.\n\t* g++.old-deja/g++.law/ctors5.C: Likewise.\n\n/cp\n2019-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokdeclarator): Use locations[ds_friend]\n\tin one place.\n\n/testsuite\n2019-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/other/friend4.C: Test locations too.\n\t* g++.dg/other/friend5.C: Likewise.\n\t* g++.dg/other/friend7.C: Likewise.\n\nFrom-SVN: r271974", "tree": {"sha": "242fe7b08d2034db678f20ae12a4e2e7037dcb42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/242fe7b08d2034db678f20ae12a4e2e7037dcb42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2212ae955a8a8cb759a65ca06c2e5462924ed66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2212ae955a8a8cb759a65ca06c2e5462924ed66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2212ae955a8a8cb759a65ca06c2e5462924ed66c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2212ae955a8a8cb759a65ca06c2e5462924ed66c/comments", "author": null, "committer": null, "parents": [{"sha": "0ecf545c6e542cc5eee78eac97d200b55e11001f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ecf545c6e542cc5eee78eac97d200b55e11001f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ecf545c6e542cc5eee78eac97d200b55e11001f"}], "stats": {"total": 96, "additions": 80, "deletions": 16}, "files": [{"sha": "952541a781f70c3df26b6d86ae16f97b8edebf38", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2212ae955a8a8cb759a65ca06c2e5462924ed66c", "patch": "@@ -1,3 +1,14 @@\n+2019-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (smallest_type_location): New.\n+\t(check_special_function_return_type): Use it.\n+\t(grokdeclarator): Lkewise.\n+\n+2019-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokdeclarator): Use locations[ds_friend]\n+\tin one place.\n+\n 2019-06-05  Martin Sebor  <msebor@redhat.com>\n \n \t* call.c (build_conditional_expr_1): Adjust quoting and hyphenation."}, {"sha": "ca248111eb55628ddecce6afb1856c3f207db328", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2212ae955a8a8cb759a65ca06c2e5462924ed66c", "patch": "@@ -10111,6 +10111,15 @@ smallest_type_quals_location (int type_quals, const location_t* locations)\n   return loc;\n }\n \n+/* Returns the smallest among the latter and locations[ds_type_spec].  */\n+\n+static location_t\n+smallest_type_location (int type_quals, const location_t* locations)\n+{\n+  location_t loc = smallest_type_quals_location (type_quals, locations);\n+  return min_location (loc, locations[ds_type_spec]);\n+}\n+\n /* Check that it's OK to declare a function with the indicated TYPE\n    and TYPE_QUALS.  SFK indicates the kind of special function (if any)\n    that this function is.  OPTYPE is the type given in a conversion\n@@ -10129,7 +10138,8 @@ check_special_function_return_type (special_function_kind sfk,\n     {\n     case sfk_constructor:\n       if (type)\n-\terror (\"return type specification for constructor invalid\");\n+\terror_at (smallest_type_location (type_quals, locations),\n+\t\t  \"return type specification for constructor invalid\");\n       else if (type_quals != TYPE_UNQUALIFIED)\n \terror_at (smallest_type_quals_location (type_quals, locations),\n \t\t  \"qualifiers are not allowed on constructor declaration\");\n@@ -10142,7 +10152,8 @@ check_special_function_return_type (special_function_kind sfk,\n \n     case sfk_destructor:\n       if (type)\n-\terror (\"return type specification for destructor invalid\");\n+\terror_at (smallest_type_location (type_quals, locations),\n+\t\t  \"return type specification for destructor invalid\");\n       else if (type_quals != TYPE_UNQUALIFIED)\n \terror_at (smallest_type_quals_location (type_quals, locations),\n \t\t  \"qualifiers are not allowed on destructor declaration\");\n@@ -10157,7 +10168,8 @@ check_special_function_return_type (special_function_kind sfk,\n \n     case sfk_conversion:\n       if (type)\n-\terror (\"return type specified for %<operator %T%>\", optype);\n+\terror_at (smallest_type_location (type_quals, locations),\n+\t\t  \"return type specified for %<operator %T%>\", optype);\n       else if (type_quals != TYPE_UNQUALIFIED)\n \terror_at (smallest_type_quals_location (type_quals, locations),\n \t\t  \"qualifiers are not allowed on declaration of \"\n@@ -10168,7 +10180,8 @@ check_special_function_return_type (special_function_kind sfk,\n \n     case sfk_deduction_guide:\n       if (type)\n-\terror (\"return type specified for deduction guide\");\n+\terror_at (smallest_type_location (type_quals, locations),\n+\t\t  \"return type specified for deduction guide\");\n       else if (type_quals != TYPE_UNQUALIFIED)\n \terror_at (smallest_type_quals_location (type_quals, locations),\n \t\t  \"qualifiers are not allowed on declaration of \"\n@@ -10438,10 +10451,8 @@ grokdeclarator (const cp_declarator *declarator,\n   if (initialized > 1)\n     funcdef_flag = true;\n \n-  location_t typespec_loc = smallest_type_quals_location (type_quals,\n-\t\t\t\t\t\t      declspecs->locations);\n-  typespec_loc = min_location (typespec_loc,\n-\t\t\t       declspecs->locations[ds_type_spec]);\n+  location_t typespec_loc = smallest_type_location (type_quals,\n+\t\t\t\t\t\t    declspecs->locations);\n   if (typespec_loc == UNKNOWN_LOCATION)\n     typespec_loc = input_location;\n \n@@ -11895,8 +11906,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t{\n \t  if (friendp)\n \t    {\n-\t      permerror (input_location, \"member functions are implicitly \"\n-\t\t\t\t\t \"friends of their class\");\n+\t      permerror (declspecs->locations[ds_friend],\n+\t\t\t \"member functions are implicitly \"\n+\t\t\t \"friends of their class\");\n \t      friendp = 0;\n \t    }\n \t  else"}, {"sha": "c5d8c02d3b4ed3cd8eebfc3495ae51e148e15499", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2212ae955a8a8cb759a65ca06c2e5462924ed66c", "patch": "@@ -1,3 +1,15 @@\n+2019-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/return-type-invalid-1.C: New.\n+\t* g++.old-deja/g++.brendan/crash16.C: Adjust.\n+\t* g++.old-deja/g++.law/ctors5.C: Likewise.\n+\n+2019-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/other/friend4.C: Test locations too.\n+\t* g++.dg/other/friend5.C: Likewise.\n+\t* g++.dg/other/friend7.C: Likewise.\n+\n 2019-06-05  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* g++.target/powerpc/undef-bool-3.C: Add -maltivec to dg-options."}, {"sha": "56be51263ff70f87cb955dc01ef802fbaae23556", "filename": "gcc/testsuite/g++.dg/diagnostic/return-type-invalid-1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Freturn-type-invalid-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Freturn-type-invalid-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Freturn-type-invalid-1.C?ref=2212ae955a8a8cb759a65ca06c2e5462924ed66c", "patch": "@@ -0,0 +1,27 @@\n+struct S1\n+{\n+  int S1();  // { dg-error \"3:return type\" }\n+  int ~S1();  // { dg-error \"3:return type\" }\n+  int operator int();  // { dg-error \"3:return type\" }\n+};\n+\n+struct S2\n+{\n+  const int S2();  // { dg-error \"3:return type\" }\n+  const int ~S2();  // { dg-error \"3:return type\" }\n+  const int operator int();  // { dg-error \"3:return type\" }\n+};\n+\n+struct S3\n+{\n+  volatile int S3();  // { dg-error \"3:return type\" }\n+  volatile int ~S3();  // { dg-error \"3:return type\" }\n+  volatile int operator int(); // { dg-error \"3:return type\" } \n+};\n+\n+struct S4\n+{\n+  const volatile int S4();  // { dg-error \"3:return type\" }\n+  const volatile int ~S4();  // { dg-error \"3:return type\" }\n+  const volatile int operator int();  // { dg-error \"3:return type\" }\n+};"}, {"sha": "de5cfafc21fb5a0864289c7878a8ba731f51b5b2", "filename": "gcc/testsuite/g++.dg/other/friend4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend4.C?ref=2212ae955a8a8cb759a65ca06c2e5462924ed66c", "patch": "@@ -3,6 +3,6 @@\n \n struct A\n {\n-  friend void A::foo();  // { dg-error \"implicitly friends\" }\n-  friend A::~A();        // { dg-error \"implicitly friends\" }\n+  friend void A::foo();  // { dg-error \"3:member functions are implicitly friends\" }\n+  friend A::~A();        // { dg-error \"3:member functions are implicitly friends\" }\n };"}, {"sha": "f6780a4bfa662a9c2363f3b4de94141397f36764", "filename": "gcc/testsuite/g++.dg/other/friend5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend5.C?ref=2212ae955a8a8cb759a65ca06c2e5462924ed66c", "patch": "@@ -5,5 +5,5 @@\n \n struct A\n {\n-  friend A::~A() {} /* { dg-error \"implicitly friends of their class\" } */\n+  friend A::~A() {} /* { dg-error \"3:member functions are implicitly friends of their class\" } */\n };"}, {"sha": "56d994d63df095627c68f6c3a3c83c2a7650a6b7", "filename": "gcc/testsuite/g++.dg/other/friend7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend7.C?ref=2212ae955a8a8cb759a65ca06c2e5462924ed66c", "patch": "@@ -5,5 +5,5 @@\n \n struct A\n {\n-  friend A::~A() {} // { dg-error \"implicitly friends of their class\" }\n+  friend A::~A() {} // { dg-error \"3:member functions are implicitly friends of their class\" }\n };"}, {"sha": "2edb2a8711beb924b1e79f7886f7dc3f5fe1c908", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash16.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C?ref=2212ae955a8a8cb759a65ca06c2e5462924ed66c", "patch": "@@ -3,12 +3,13 @@\n // GROUPS passed old-abort\n \n class Graph { // { dg-error \"1:new types|1: note: \\\\(perhaps\" }\n+// { dg-error \"1:return type\" \"\" { target *-*-* } .-1 }\n public:\n       unsigned         char N;\n       Graph(void) {} // { dg-message \"7:'Graph\" }\n }\n \n-Graph::Graph(void) // { dg-error \"18:return type|1: error: redefinition\" }\n+Graph::Graph(void) // { dg-error \"1:redefinition\" }\n {    N = 10;\n }\n "}, {"sha": "492c429ab17e91d978b07a4d4011eadbdfd0f75f", "filename": "gcc/testsuite/g++.old-deja/g++.law/ctors5.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212ae955a8a8cb759a65ca06c2e5462924ed66c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C?ref=2212ae955a8a8cb759a65ca06c2e5462924ed66c", "patch": "@@ -16,13 +16,14 @@ class X\t      // { dg-message \"7:X::X|candidate expects\" } implicit constructor\n \n class Y // { dg-error \"1:new types may not be defined in a return type\" \"err\" }\n         // { dg-message \"1:\\\\(perhaps a semicolon is missing after the definition of 'Y'\\\\)\" \"note\" { target *-*-* } .-1 }\n+        // { dg-error \"1:return type specification for constructor invalid\" \"err\"  { target *-*-* } .-2 }\n {\n   private:\n     X xx;\n   public:\n     Y();\n }\n-X::X( int xi ) // { dg-error \"14:return type specification for constructor invalid\" \"err\" }\n+X::X( int xi )\n // { dg-message \"1:X::X|candidate expects\" \"match candidate text\" { target *-*-* } .-1 }\n {\n     x = xi;"}]}