{"sha": "e2c7070ac7740508a7c49bfee9f895e216a272d6", "node_id": "C_kwDOANBUbNoAKGUyYzcwNzBhYzc3NDA1MDhhN2M0OWJmZWU5Zjg5NWUyMTZhMjcyZDY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-12T16:58:18Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-12T16:58:18Z"}, "message": "c++: requires-expr in pack expansion using pack [PR103105]\n\nHere after dependent substitution of {Ts...} into the alias 'wrap',\nsince we never partially instantiate a requires-expr, we end up with a\nrequires-expr whose REQUIRES_EXPR_EXTRA_ARGS contains an\nARGUMENT_PACK_SELECT (which just resolves to the parameter pack Ts).\nThen when hashing the resulting dependent specialization of A, we crash\nfrom iterative_hash_template_arg since it deliberately doesn't handle\nARGUMENT_PACK_SELECT.\n\nLike in r12-7102-gdb5f1c17031ad8, it seems the right fix here is to\nresolve ARGUMENT_PACK_SELECT arguments before storing them into an\nextra args tree (such as REQUIRES_EXPR).\n\n\tPR c++/103105\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (build_extra_args): Call preserve_args.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-requires29.C: New test.\n\t* g++.dg/cpp2a/concepts-requires29a.C: New test.", "tree": {"sha": "8ffaa3177fe37a778fd3b4e1faff4505c2cdb9cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ffaa3177fe37a778fd3b4e1faff4505c2cdb9cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2c7070ac7740508a7c49bfee9f895e216a272d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c7070ac7740508a7c49bfee9f895e216a272d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2c7070ac7740508a7c49bfee9f895e216a272d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c7070ac7740508a7c49bfee9f895e216a272d6/comments", "author": null, "committer": null, "parents": [{"sha": "7c7e78e9c460991349065572e32cac49b20d0432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c7e78e9c460991349065572e32cac49b20d0432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c7e78e9c460991349065572e32cac49b20d0432"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "84712e6fc2f77aa040f91e43f94d5e68f52a5281", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c7070ac7740508a7c49bfee9f895e216a272d6/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c7070ac7740508a7c49bfee9f895e216a272d6/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=e2c7070ac7740508a7c49bfee9f895e216a272d6", "patch": "@@ -13048,7 +13048,7 @@ build_extra_args (tree pattern, tree args, tsubst_flags_t complain)\n {\n   /* Make a copy of the extra arguments so that they won't get changed\n      out from under us.  */\n-  tree extra = copy_template_args (args);\n+  tree extra = preserve_args (copy_template_args (args), /*cow_p=*/false);\n   if (local_specializations)\n     if (tree locals = extract_local_specs (pattern, complain))\n       extra = tree_cons (NULL_TREE, extra, locals);"}, {"sha": "2cf69433d9913f2227fc1ef40e17fcd92e9e0837", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires29.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c7070ac7740508a7c49bfee9f895e216a272d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c7070ac7740508a7c49bfee9f895e216a272d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires29.C?ref=e2c7070ac7740508a7c49bfee9f895e216a272d6", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/103105\n+// { dg-do compile { target c++20 } }\n+\n+template<bool> struct A;\n+\n+template<class... Ts>\n+using wrap = A<1 != (0 + ... + requires { Ts(); })>;\n+\n+template<class... Ts> using type = wrap<Ts...>;\n+\n+using ty0 = type<>;\n+using ty0 = A<true>;\n+\n+using ty1 = type<int>;\n+using ty1 = A<false>;\n+\n+using ty2 = type<int, int>;\n+using ty2 = A<true>;"}, {"sha": "84c226918f54bd9d1cecf212eba6b13820984ab4", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires29a.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c7070ac7740508a7c49bfee9f895e216a272d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires29a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c7070ac7740508a7c49bfee9f895e216a272d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires29a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires29a.C?ref=e2c7070ac7740508a7c49bfee9f895e216a272d6", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/103105\n+// { dg-do compile { target c++20 } }\n+\n+template<class...> struct list;\n+\n+template<bool> struct A;\n+\n+template<class T, class... Ts>\n+using wrap = A<1 != (0 + ... + requires { T() = Ts(); })>;\n+\n+template<class... Ts> using type = list<wrap<Ts, Ts...>...>;\n+\n+using ty0 = type<>;\n+using ty0 = list<>;\n+\n+using ty1 = type<int>;\n+using ty1 = list<A<true>>;\n+\n+using ty2 = type<int, int>;\n+using ty2 = list<A<true>, A<true>>;\n+\n+using ty3 = type<int, int, int>;\n+using ty3 = list<A<true>, A<true>, A<true>>;"}]}