{"sha": "a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ2Y2NkMWI0NzU4ODMyODk1YTlhZDUyZDBjOWU2ZmJhY2RmZTBiYw==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2002-03-17T16:18:53Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2002-03-17T16:18:53Z"}, "message": "Add arm thumb support\n\nFrom-SVN: r50920", "tree": {"sha": "5cadd4395c7391958020311045ffddcfc6b14d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cadd4395c7391958020311045ffddcfc6b14d6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "beb9c8a2348bfc9095cf35684aee67cdfd7461ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb9c8a2348bfc9095cf35684aee67cdfd7461ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb9c8a2348bfc9095cf35684aee67cdfd7461ef"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "1a75514c0782547f25cfeddb16ee9c3bf97423f6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc", "patch": "@@ -1,3 +1,7 @@\n+2002-03-17  Anthony Green  <green@redhat.com>\n+\n+\t* java/lang/ieeefp.h: Add ARM thumb support (copied from newlib).\n+\n 2002-03-17  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \tBuild a single libgcj.so, without separate gc and zlib libraries."}, {"sha": "4439e6f2f633baef92fd13f863106a2a87acac6b", "filename": "libjava/java/lang/ieeefp.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc/libjava%2Fjava%2Flang%2Fieeefp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc/libjava%2Fjava%2Flang%2Fieeefp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Fieeefp.h?ref=a46ccd1b4758832895a9ad52d0c9e6fbacdfe0bc", "patch": "@@ -5,11 +5,13 @@\n #define __IEEE_LITTLE_ENDIAN\n #endif\n \n-#ifdef __arm__\n+#if defined(__arm__) || defined(__thumb__)\n /* ARM always has big-endian words.  Within those words the byte ordering\n-   appears to be big or little endian.  Newlib doesn't seem to care about\n-   the byte ordering within words.  */\n+   will be big or little endian depending upon the target.  */\n #define __IEEE_BIG_ENDIAN\n+#ifdef __ARMEL__\n+#define __IEEE_BYTES_LITTLE_ENDIAN\n+#endif\n #endif\n \n #ifdef __hppa__"}]}