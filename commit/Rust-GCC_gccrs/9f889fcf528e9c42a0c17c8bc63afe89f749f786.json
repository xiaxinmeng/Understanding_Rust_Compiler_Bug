{"sha": "9f889fcf528e9c42a0c17c8bc63afe89f749f786", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY4ODlmY2Y1MjhlOWM0MmEwYzE3YzhiYzYzYWZlODlmNzQ5Zjc4Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-04-10T10:05:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-04-10T10:05:51Z"}, "message": "DR 538, [Ready]\n\n2006-04-10  Paolo Carlini  <pcarlini@suse.de>\n\n\tDR 538, [Ready]\n\t* include/bits/stl_algo.h (__unique_copy(,,, input_iterator_tag,\n\toutput_iterator_tag), and predicated counterpart): Revert to the\n\talgorithm pre-DR 241, i.e., value_type of InputIterator is now\n\trequired to be Assignable too.\n\t* testsuite/25_algorithms/unique_copy/3.cc: Remove.\n\t* docs/html/ext/howto.html: Add an entry for DR 538.\n\nFrom-SVN: r112818", "tree": {"sha": "5b60683799d029dd82b0d0e77535ce75aa2c309d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b60683799d029dd82b0d0e77535ce75aa2c309d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f889fcf528e9c42a0c17c8bc63afe89f749f786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f889fcf528e9c42a0c17c8bc63afe89f749f786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f889fcf528e9c42a0c17c8bc63afe89f749f786", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f889fcf528e9c42a0c17c8bc63afe89f749f786/comments", "author": null, "committer": null, "parents": [{"sha": "cf26aa89100a9340eaae73c3beee6dd791cb7777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf26aa89100a9340eaae73c3beee6dd791cb7777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf26aa89100a9340eaae73c3beee6dd791cb7777"}], "stats": {"total": 155, "additions": 38, "deletions": 117}, "files": [{"sha": "b03febe05a833fc16c030c1b59dc0417b58fb9a1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f889fcf528e9c42a0c17c8bc63afe89f749f786/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f889fcf528e9c42a0c17c8bc63afe89f749f786/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9f889fcf528e9c42a0c17c8bc63afe89f749f786", "patch": "@@ -1,3 +1,13 @@\n+2006-04-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tDR 538, [Ready]\n+\t* include/bits/stl_algo.h (__unique_copy(,,, input_iterator_tag,\n+\toutput_iterator_tag), and predicated counterpart): Revert to the\n+\talgorithm pre-DR 241, i.e., value_type of InputIterator is now\n+\trequired to be Assignable too.\n+\t* testsuite/25_algorithms/unique_copy/3.cc: Remove.\n+\t* docs/html/ext/howto.html: Add an entry for DR 538.\n+\n 2006-03-29  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/data/sgetn.txt:  Correct copyright holder."}, {"sha": "f937a14fbd2a20c193f350459cc45e5bed7d07be", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f889fcf528e9c42a0c17c8bc63afe89f749f786/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f889fcf528e9c42a0c17c8bc63afe89f749f786/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=9f889fcf528e9c42a0c17c8bc63afe89f749f786", "patch": "@@ -573,6 +573,14 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>Add <code>data()</code> to <code>std::vector</code> and\n         <code>at(const key_type&amp;)</code> to <code>std::map</code>.\n     </dd>\n+\n+    <dt><a href=\"lwg-active.html#538\">538</a>:\n+        <em>DR 538. 241 again: Does unique_copy() require CopyConstructible\n+\t    and Assignable?</em>\n+    </dt>\n+    <dd>In case of input_iterator/output_iterator rely on Assignability of\n+        input_iterator' value_type.\n+    </dd>\n <!--\n     <dt><a href=\"lwg-defects.html#\"></a>:\n         <em></em>"}, {"sha": "7c54f50b4f76d532e36c645f715492da5f2f4879", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f889fcf528e9c42a0c17c8bc63afe89f749f786/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f889fcf528e9c42a0c17c8bc63afe89f749f786/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=9f889fcf528e9c42a0c17c8bc63afe89f749f786", "patch": "@@ -1340,18 +1340,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t  input_iterator_tag, output_iterator_tag)\n     {\n       // concept requirements -- taken care of in dispatching function\n-      *__result = *__first;\n-      while (true)\n-\t{\n-\t  typename\n-\t    iterator_traits<_InputIterator>::value_type __value = *__first;\n-\n-\t  if (++__first == __last)\n-\t    break;\n-\t  \n-\t  if (!(__value == *__first))\n-\t    *++__result = *__first;\n-\t}\n+      typename iterator_traits<_InputIterator>::value_type __value = *__first;\n+      *__result = __value;\n+      while (++__first != __last)\n+\tif (!(__value == *__first))\n+\t  {\n+\t    __value = *__first;\n+\t    *++__result = __value;\n+\t  }\n       return ++__result;\n     }\n \n@@ -1427,18 +1423,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  typename iterator_traits<_InputIterator>::value_type,\n \t  typename iterator_traits<_InputIterator>::value_type>)\n \n-      *__result = *__first;\n-      while (true)\n-\t{\n-\t  typename\n-\t    iterator_traits<_InputIterator>::value_type __value = *__first;\n-\n-\t  if (++__first == __last)\n-\t    break;\n-\t  \n-\t  if (!__binary_pred(__value, *__first))\n-\t    *++__result = *__first;\n-\t}\n+      typename iterator_traits<_InputIterator>::value_type __value = *__first;\n+      *__result = __value;\n+      while (++__first != __last)\n+\tif (!__binary_pred(__value, *__first))\n+\t  {\n+\t    __value = *__first;\n+\t    *++__result = __value;\n+\t  }\n       return ++__result;\n     }\n \n@@ -1485,6 +1477,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @if maint\n    *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n    *  DR 241. Does unique_copy() require CopyConstructible and Assignable?\n+   *  \n+   *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n+   *  DR 538. 241 again: Does unique_copy() require CopyConstructible and \n+   *  Assignable?\n    *  @endif\n   */\n   template<typename _InputIterator, typename _OutputIterator>"}, {"sha": "2245821f7c1233f2152bca8406aba59c8881b41e", "filename": "libstdc++-v3/testsuite/25_algorithms/unique_copy/3.cc", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf26aa89100a9340eaae73c3beee6dd791cb7777/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf26aa89100a9340eaae73c3beee6dd791cb7777/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F3.cc?ref=cf26aa89100a9340eaae73c3beee6dd791cb7777", "patch": "@@ -1,93 +0,0 @@\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 25.2.8 [lib.alg.unique]\n-\n-#include <algorithm>\n-#include <testsuite_hooks.h>\n-#include <testsuite_iterators.h>\n-\n-using __gnu_test::test_container;\n-using __gnu_test::input_iterator_wrapper;\n-using __gnu_test::output_iterator_wrapper;\n-using std::unique_copy;\n-using std::equal_to;\n-\n-struct no_assign\n-{\n-  int const x;\n-  no_assign() : x(23) { }\n-  no_assign(int val) : x(val) { }\n-  operator int() const { return x; }\n-};\n-\n-typedef test_container<no_assign, input_iterator_wrapper> Icontainer;\n-typedef test_container<int, output_iterator_wrapper> Ocontainer;\n-\n-no_assign array1[] = {0, 0, 0, 1, 1, 1};\n-int array2[2];\n-\n-void\n-test1()\n-{\n-  bool test __attribute__((unused)) = true;\n-  Icontainer con1(array1, array1);\n-  Ocontainer con2(array2, array2);\n-  VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin()).ptr == array2 );\n-}\n-\n-void\n-test2()\n-{\n-  bool test __attribute__((unused)) = true;\n-  Icontainer con1(array1, array1 + 6);\n-  Ocontainer con2(array2, array2 + 2);\n-  VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin()).ptr\n-\t  == array2 + 2 );\n-  VERIFY( array2[0] == 0 && array2[1] == 1 );\n-}\n-\n-void\n-test3()\n-{\n-  bool test __attribute__((unused)) = true;\n-  Icontainer con1(array1, array1);\n-  Ocontainer con2(array2, array2);\n-  VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin(),\n-\t\t      equal_to<int>()).ptr == array2 );\n-}\n-\n-void\n-test4()\n-{\n-  bool test __attribute__((unused)) = true;\n-  Icontainer con1(array1, array1 + 6);\n-  Ocontainer con2(array2, array2 + 2);\n-  VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin(),\n-\t\t      equal_to<int>()).ptr == array2 + 2 );\n-  VERIFY( array2[0] == 0 && array2[1] == 1 );\n-}\n-\n-int \n-main()\n-{\n-  test1();\n-  test2();\n-  test3();\n-  test4();\n-}"}]}