{"sha": "b17dc4d4e42c4366f60ad79cdc31f7b1260e058e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3ZGM0ZDRlNDJjNDM2NmY2MGFkNzljZGMzMWY3YjEyNjBlMDU4ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-06-15T09:54:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-06-15T09:54:17Z"}, "message": "tree-vect-stmts.c (vectorizable_store): Remove strided grouped store restrictions.\n\n2016-06-15  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-stmts.c (vectorizable_store): Remove strided grouped\n\tstore restrictions.\n\n\t* gcc.dg/vect/slp-45.c: New testcase.\n\nFrom-SVN: r237474", "tree": {"sha": "286b33071709e8c609cfc4f0c4d8ca151b2dc366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/286b33071709e8c609cfc4f0c4d8ca151b2dc366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a5825f23bd387d239592b1efd0e8487dd83a6e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a5825f23bd387d239592b1efd0e8487dd83a6e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a5825f23bd387d239592b1efd0e8487dd83a6e4"}], "stats": {"total": 154, "additions": 129, "deletions": 25}, "files": [{"sha": "ebc4d6eeca1589572692f5fce7edf831a370bf14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b17dc4d4e42c4366f60ad79cdc31f7b1260e058e", "patch": "@@ -1,3 +1,8 @@\n+2016-06-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_store): Remove strided grouped\n+\tstore restrictions.\n+\n 2016-06-15  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence): Do"}, {"sha": "679f0225109bd3a7f77f8011e09a1eaf224117f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b17dc4d4e42c4366f60ad79cdc31f7b1260e058e", "patch": "@@ -1,3 +1,7 @@\n+2016-06-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/slp-45.c: New testcase.\n+\n 2016-06-15  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/bb-slp-pattern-2.c: Disable loop vectorization."}, {"sha": "be721cb710203c05ab525b71c0f480337077bac8", "filename": "gcc/testsuite/gcc.dg/vect/slp-45.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-45.c?ref=b17dc4d4e42c4366f60ad79cdc31f7b1260e058e", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <string.h>\n+#include \"tree-vect.h\"\n+\n+#define FOO(T,N) \\\n+void __attribute__((noinline,noclone)) \\\n+foo_ ## T ## _ ## N (T * __restrict__ in_, T * __restrict__ out_, int s) \\\n+{ \\\n+  T *in = __builtin_assume_aligned (in_, __BIGGEST_ALIGNMENT__); \\\n+  T *out = __builtin_assume_aligned (out_, __BIGGEST_ALIGNMENT__); \\\n+  for (int i = 0; i < 16; i++) \\\n+    { \\\n+      for (int j = 0; j < N; ++j) \\\n+        out[j] = in[j]; \\\n+      in += N; \\\n+      out += s*N; \\\n+    } \\\n+}\n+\n+#define TEST(T,N) \\\n+ do { \\\n+  memset (out, 0, 4096); \\\n+  foo_ ## T ## _ ## N ((T *)in, (T *)out, 1); \\\n+  if (memcmp (in, out, sizeof (T) * 16 * N) != 0) \\\n+    __builtin_abort (); \\\n+  for (int i = sizeof (T) * 16 * N; i < 4096; ++i) \\\n+    if (out[i] != 0) \\\n+      __builtin_abort (); \\\n+ } while (0)\n+\n+FOO(char, 1)\n+FOO(char, 2)\n+FOO(char, 3)\n+FOO(char, 4)\n+FOO(char, 6)\n+FOO(char, 8)\n+FOO(int, 1)\n+FOO(int, 2)\n+FOO(int, 3)\n+FOO(int, 4)\n+FOO(int, 6)\n+FOO(int, 8)\n+FOO(int, 16)\n+\n+char in[4096] __attribute__((aligned(__BIGGEST_ALIGNMENT__)));\n+char out[4096] __attribute__((aligned(__BIGGEST_ALIGNMENT__)));\n+\n+int main()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < 4096; ++i)\n+    {\n+      in[i] = i;\n+      __asm__ volatile (\"\" : : : \"memory\");\n+    }\n+\n+  TEST(char, 1);\n+  TEST(char, 2);\n+  TEST(char, 3);\n+  TEST(char, 4);\n+  TEST(char, 6);\n+  TEST(char, 8);\n+  TEST(int, 1);\n+  TEST(int, 2);\n+  TEST(int, 3);\n+  TEST(int, 4);\n+  TEST(int, 6);\n+  TEST(int, 8);\n+  TEST(int, 16);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 13 \"vect\" } } */"}, {"sha": "c74f14f0205b65d225224c99871f7e76f281e885", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17dc4d4e42c4366f60ad79cdc31f7b1260e058e/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=b17dc4d4e42c4366f60ad79cdc31f7b1260e058e", "patch": "@@ -5234,6 +5234,7 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   enum vect_def_type scatter_idx_dt = vect_unknown_def_type;\n   enum vect_def_type scatter_src_dt = vect_unknown_def_type;\n   gimple *new_stmt;\n+  int vf;\n \n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n@@ -5270,7 +5271,12 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   unsigned int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n \n   if (loop_vinfo)\n-    loop = LOOP_VINFO_LOOP (loop_vinfo);\n+    {\n+      loop = LOOP_VINFO_LOOP (loop_vinfo);\n+      vf = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n+    }\n+  else\n+    vf = 1;\n \n   /* Multiple types in SLP are handled by creating the appropriate number of\n      vectorized stmts for each SLP node.  Hence, NCOPIES is always 1 in\n@@ -5365,16 +5371,6 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t    return false;\n \t}\n \n-      if (STMT_VINFO_STRIDED_P (stmt_info)\n-\t  && slp\n-\t  && (group_size > nunits\n-\t      || nunits % group_size != 0))\n-\t{\n-\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t   \"unhandled strided group store\\n\");\n-\t  return false;\n-\t}\n-\n       if (first_stmt == stmt)\n \t{\n           /* STMT is the leader of the group. Check the operands of all the\n@@ -5653,23 +5649,31 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n          */\n \n       unsigned nstores = nunits;\n+      unsigned lnel = 1;\n       tree ltype = elem_type;\n       if (slp)\n \t{\n-\t  nstores = nunits / group_size;\n-\t  if (group_size < nunits)\n-\t    ltype = build_vector_type (elem_type, group_size);\n-\t  else\n-\t    ltype = vectype;\n+\t  if (group_size < nunits\n+\t      && nunits % group_size == 0)\n+\t    {\n+\t      nstores = nunits / group_size;\n+\t      lnel = group_size;\n+\t      ltype = build_vector_type (elem_type, group_size);\n+\t    }\n+\t  else if (group_size >= nunits\n+\t\t   && group_size % nunits == 0)\n+\t    {\n+\t      nstores = 1;\n+\t      lnel = nunits;\n+\t      ltype = vectype;\n+\t    }\n \t  ltype = build_aligned_type (ltype, TYPE_ALIGN (elem_type));\n \t  ncopies = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n-\t  group_size = 1;\n \t}\n \n       ivstep = stride_step;\n       ivstep = fold_build2 (MULT_EXPR, TREE_TYPE (ivstep), ivstep,\n-\t\t\t    build_int_cst (TREE_TYPE (ivstep),\n-\t\t\t\t\t   ncopies * nstores));\n+\t\t\t    build_int_cst (TREE_TYPE (ivstep), vf));\n \n       standard_iv_increment_position (loop, &incr_gsi, &insert_after);\n \n@@ -5700,6 +5704,9 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t      vect_finish_stmt_generation (stmt, incr, gsi);\n \t      running_off = newoff;\n \t    }\n+\t  unsigned int group_el = 0;\n+\t  unsigned HOST_WIDE_INT\n+\t    elsz = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (vectype)));\n \t  for (j = 0; j < ncopies; j++)\n \t    {\n \t      /* We've set op and dt above, from gimple_assign_rhs1(stmt),\n@@ -5745,19 +5752,27 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t\t\t\t\t\t   NULL_TREE, true,\n \t\t\t\t\t\t   GSI_SAME_STMT);\n \n+\t\t  tree this_off = build_int_cst (TREE_TYPE (alias_off),\n+\t\t\t\t\t\t group_el * elsz);\n \t\t  newref = build2 (MEM_REF, ltype,\n-\t\t\t\t   running_off, alias_off);\n+\t\t\t\t   running_off, this_off);\n \n \t\t  /* And store it to *running_off.  */\n \t\t  assign = gimple_build_assign (newref, elem);\n \t\t  vect_finish_stmt_generation (stmt, assign, gsi);\n \n-\t\t  newoff = copy_ssa_name (running_off, NULL);\n-\t\t  incr = gimple_build_assign (newoff, POINTER_PLUS_EXPR,\n-\t\t\t\t\t      running_off, stride_step);\n-\t\t  vect_finish_stmt_generation (stmt, incr, gsi);\n+\t\t  group_el += lnel;\n+\t\t  if (! slp\n+\t\t      || group_el == group_size)\n+\t\t    {\n+\t\t      newoff = copy_ssa_name (running_off, NULL);\n+\t\t      incr = gimple_build_assign (newoff, POINTER_PLUS_EXPR,\n+\t\t\t\t\t\t  running_off, stride_step);\n+\t\t      vect_finish_stmt_generation (stmt, incr, gsi);\n \n-\t\t  running_off = newoff;\n+\t\t      running_off = newoff;\n+\t\t      group_el = 0;\n+\t\t    }\n \t\t  if (g == group_size - 1\n \t\t      && !slp)\n \t\t    {\n@@ -5771,6 +5786,8 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t\t}\n \t    }\n \t  next_stmt = GROUP_NEXT_ELEMENT (vinfo_for_stmt (next_stmt));\n+\t  if (slp)\n+\t    break;\n \t}\n       return true;\n     }"}]}