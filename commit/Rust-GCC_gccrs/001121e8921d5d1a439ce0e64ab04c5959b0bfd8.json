{"sha": "001121e8921d5d1a439ce0e64ab04c5959b0bfd8", "node_id": "C_kwDOANBUbNoAKDAwMTEyMWU4OTIxZDVkMWE0MzljZTBlNjRhYjA0YzU5NTliMGJmZDg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-17T11:14:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-17T11:14:25Z"}, "message": "forwprop: Fix up rotate pattern matching [PR106523]\n\nThe comment above simplify_rotate roughly describes what patterns\nare matched into what:\n   We are looking for X with unsigned type T with bitsize B, OP being\n   +, | or ^, some type T2 wider than T.  For:\n   (X << CNT1) OP (X >> CNT2)                           iff CNT1 + CNT2 == B\n   ((T) ((T2) X << CNT1)) OP ((T) ((T2) X >> CNT2))     iff CNT1 + CNT2 == B\n\n   transform these into:\n   X r<< CNT1\n\n   Or for:\n   (X << Y) OP (X >> (B - Y))\n   (X << (int) Y) OP (X >> (int) (B - Y))\n   ((T) ((T2) X << Y)) OP ((T) ((T2) X >> (B - Y)))\n   ((T) ((T2) X << (int) Y)) OP ((T) ((T2) X >> (int) (B - Y)))\n   (X << Y) | (X >> ((-Y) & (B - 1)))\n   (X << (int) Y) | (X >> (int) ((-Y) & (B - 1)))\n   ((T) ((T2) X << Y)) | ((T) ((T2) X >> ((-Y) & (B - 1))))\n   ((T) ((T2) X << (int) Y)) | ((T) ((T2) X >> (int) ((-Y) & (B - 1))))\n\n   transform these into (last 2 only if ranger can prove Y < B):\n   X r<< Y\n\n   Or for:\n   (X << (Y & (B - 1))) | (X >> ((-Y) & (B - 1)))\n   (X << (int) (Y & (B - 1))) | (X >> (int) ((-Y) & (B - 1)))\n   ((T) ((T2) X << (Y & (B - 1)))) | ((T) ((T2) X >> ((-Y) & (B - 1))))\n   ((T) ((T2) X << (int) (Y & (B - 1)))) \\\n     | ((T) ((T2) X >> (int) ((-Y) & (B - 1))))\n\n   transform these into:\n   X r<< (Y & (B - 1))\n\nThe following testcase shows that 2 of these are problematic.\nIf T2 is wider than T, then the 2 which yse (-Y) & (B - 1) on one\nof the shift counts but Y on the can do something different from\nrotate.  E.g.:\n__attribute__((noipa)) unsigned char\nf7 (unsigned char x, unsigned int y)\n{\n  unsigned int t = x;\n  return (t << y) | (t >> ((-y) & 7));\n}\nif y is [0, 7], then it is a normal rotate, and if y is in [32, ~0U]\nthen it is UB, but for y in [9, 31] the left shift in this case\nwill never leave any bits in the result, while in a rotate they are\nleft there.  Say for y 5 and x 0xaa the expression gives\n0x55 which is the same thing as rotate, while for y 19 and x 0xaa\n0x5, which is different.\nNow, I believe the\n   ((T) ((T2) X << Y)) OP ((T) ((T2) X >> (B - Y)))\n   ((T) ((T2) X << (int) Y)) OP ((T) ((T2) X >> (int) (B - Y)))\nforms are ok, because B - Y still needs to be a valid shift count,\nand if Y > B then B - Y should be either negative or very large\npositive (for unsigned types).\nAnd similarly the last 2 cases above which use & (B - 1) on both\nshift operands are definitely ok.\n\nThe following patch disables the\n   ((T) ((T2) X << Y)) | ((T) ((T2) X >> ((-Y) & (B - 1))))\n   ((T) ((T2) X << (int) Y)) | ((T) ((T2) X >> (int) ((-Y) & (B - 1))))\nunless ranger says Y is not in [B, B2 - 1] range.\n\nAnd, looking at it again this morning, actually the Y equal to B\ncase is still fine, if Y is equal to 0, then it is\n(T) (((T2) X << 0) | ((T2) X >> 0))\nand so X, for Y == B it is\n(T) (((T2) X << B) | ((T2) X >> 0))\nwhich is the same as\n(T) (0 | ((T2) X >> 0))\nwhich is also X.  So instead of the [B, B2 - 1] range we could use\n[B + 1, B2 - 1].  And, if we wanted to go further, even multiplies\nof B are ok if they are smaller than B2, so we could construct a detailed\nint_range_max if we wanted.\n\n2023-01-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/106523\n\t* tree-ssa-forwprop.cc (simplify_rotate): For the\n\tpatterns with (-Y) & (B - 1) in one operand's shift\n\tcount and Y in another, if T2 has wider precision than T,\n\tpunt if Y could have a value in [B, B2 - 1] range.\n\n\t* c-c++-common/rotate-2.c (f5, f6, f7, f8, f13, f14, f15, f16,\n\tf37, f38, f39, f40, f45, f46, f47, f48): Add assertions using\n\t__builtin_unreachable about shift count.\n\t* c-c++-common/rotate-2b.c: New test.\n\t* c-c++-common/rotate-4.c (f5, f6, f7, f8, f13, f14, f15, f16,\n\tf37, f38, f39, f40, f45, f46, f47, f48): Add assertions using\n\t__builtin_unreachable about shift count.\n\t* c-c++-common/rotate-4b.c: New test.\n\t* gcc.c-torture/execute/pr106523.c: New test.", "tree": {"sha": "f39cb5de4e9d9b7ad8b4b06ef7aff28e5240cb47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f39cb5de4e9d9b7ad8b4b06ef7aff28e5240cb47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/001121e8921d5d1a439ce0e64ab04c5959b0bfd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001121e8921d5d1a439ce0e64ab04c5959b0bfd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001121e8921d5d1a439ce0e64ab04c5959b0bfd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85b45cccdf5f2442e791969abbffffbb2676591f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b45cccdf5f2442e791969abbffffbb2676591f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b45cccdf5f2442e791969abbffffbb2676591f"}], "stats": {"total": 339, "additions": 335, "deletions": 4}, "files": [{"sha": "544a7ca298fe7d9f4c496127857391963568e21b", "filename": "gcc/testsuite/c-c++-common/rotate-2.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2.c?ref=001121e8921d5d1a439ce0e64ab04c5959b0bfd8", "patch": "@@ -32,24 +32,32 @@ f4 (unsigned int x, int y __attribute__((unused)))\n unsigned short int\n f5 (unsigned short int x, unsigned int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n }\n \n unsigned short int\n f6 (unsigned short int x, unsigned long int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n }\n \n unsigned char\n f7 (unsigned char x, unsigned int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n }\n \n unsigned char\n f8 (unsigned char x, unsigned long int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n }\n \n@@ -80,24 +88,32 @@ f12 (unsigned int x, int y __attribute__((unused)))\n unsigned short int\n f13 (unsigned short int x, unsigned int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n }\n \n unsigned short int\n f14 (unsigned short int x, unsigned long int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n }\n \n unsigned char\n f15 (unsigned char x, unsigned int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n }\n \n unsigned char\n f16 (unsigned char x, unsigned long int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n }\n \n@@ -224,24 +240,32 @@ f36 (unsigned int x, int y __attribute__((unused)))\n unsigned short int\n f37 (unsigned short int x, unsigned int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n }\n \n unsigned short int\n f38 (unsigned short int x, unsigned long int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n }\n \n unsigned char\n f39 (unsigned char x, unsigned int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n }\n \n unsigned char\n f40 (unsigned char x, unsigned long int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n }\n \n@@ -272,24 +296,32 @@ f44 (unsigned int x, int y __attribute__((unused)))\n unsigned short int\n f45 (unsigned short int x, unsigned int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n }\n \n unsigned short int\n f46 (unsigned short int x, unsigned long int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n }\n \n unsigned char\n f47 (unsigned char x, unsigned int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n }\n \n unsigned char\n f48 (unsigned char x, unsigned long int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n }\n "}, {"sha": "2a6bf909ae6cdf840011d0d3428ffb3d74c06691", "filename": "gcc/testsuite/c-c++-common/rotate-2b.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2b.c?ref=001121e8921d5d1a439ce0e64ab04c5959b0bfd8", "patch": "@@ -0,0 +1,100 @@\n+/* Check rotate pattern detection.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"r\\[<>]\\[<>]\" \"optimized\" } } */\n+\n+unsigned short int\n+f5 (unsigned short int x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f6 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f7 (unsigned char x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f8 (unsigned char x, unsigned long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned short int\n+f13 (unsigned short int x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f14 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f15 (unsigned char x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f16 (unsigned char x, unsigned long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned short int\n+f37 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f38 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f39 (unsigned char x, unsigned int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f40 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned short int\n+f45 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f46 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f47 (unsigned char x, unsigned int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f48 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}"}, {"sha": "f85236239d8087b91d629d28871e95d9fb7eaa98", "filename": "gcc/testsuite/c-c++-common/rotate-4.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4.c?ref=001121e8921d5d1a439ce0e64ab04c5959b0bfd8", "patch": "@@ -32,24 +32,32 @@ f4 (unsigned int x, int y __attribute__((unused)))\n unsigned short int\n f5 (unsigned short int x, int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n }\n \n unsigned short int\n f6 (unsigned short int x, long int y)\n {\n+  if (y >= 0UL + __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n }\n \n unsigned char\n f7 (unsigned char x, int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n }\n \n unsigned char\n f8 (unsigned char x, long int y)\n {\n+  if (y >= 0UL + __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n }\n \n@@ -80,24 +88,32 @@ f12 (unsigned int x, int y __attribute__((unused)))\n unsigned short int\n f13 (unsigned short int x, int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n }\n \n unsigned short int\n f14 (unsigned short int x, long int y)\n {\n+  if (y >= 0UL + __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n }\n \n unsigned char\n f15 (unsigned char x, int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n }\n \n unsigned char\n f16 (unsigned char x, long int y)\n {\n+  if (y >= 0UL + __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n }\n \n@@ -224,24 +240,32 @@ f36 (unsigned int x, int y __attribute__((unused)))\n unsigned short int\n f37 (unsigned short int x, int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n }\n \n unsigned short int\n f38 (unsigned short int x, long int y)\n {\n+  if (y >= 0UL + __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n }\n \n unsigned char\n f39 (unsigned char x, int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n }\n \n unsigned char\n f40 (unsigned char x, long int y)\n {\n+  if (y >= 0UL + __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n }\n \n@@ -272,24 +296,32 @@ f44 (unsigned int x, int y __attribute__((unused)))\n unsigned short int\n f45 (unsigned short int x, int y)\n {\n+  if (y >= __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n }\n \n unsigned short int\n f46 (unsigned short int x, long int y)\n {\n+  if (y >= 0UL + __CHAR_BIT__ * __SIZEOF_SHORT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n }\n \n unsigned char\n f47 (unsigned char x, int y)\n {\n+  if (y >= __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n }\n \n unsigned char\n f48 (unsigned char x, long int y)\n {\n+  if (y >= 0UL + __CHAR_BIT__)\n+    __builtin_unreachable ();\n   return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n }\n "}, {"sha": "a3824754d6341152f5edeb239822d9a335c8196d", "filename": "gcc/testsuite/c-c++-common/rotate-4b.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4b.c?ref=001121e8921d5d1a439ce0e64ab04c5959b0bfd8", "patch": "@@ -0,0 +1,100 @@\n+/* Check rotate pattern detection.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"r\\[<>]\\[<>]\" \"optimized\" } } */\n+\n+unsigned short int\n+f5 (unsigned short int x, int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f6 (unsigned short int x, long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f7 (unsigned char x, int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f8 (unsigned char x, long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned short int\n+f13 (unsigned short int x, int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f14 (unsigned short int x, long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f15 (unsigned char x, int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f16 (unsigned char x, long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned short int\n+f37 (unsigned short int x, int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f38 (unsigned short int x, long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f39 (unsigned char x, int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f40 (unsigned char x, long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned short int\n+f45 (unsigned short int x, int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f46 (unsigned short int x, long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f47 (unsigned char x, int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f48 (unsigned char x, long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}"}, {"sha": "abd78f59ce3efb547be945ac3799ad6033970bda", "filename": "gcc/testsuite/gcc.c-torture/execute/pr106523.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr106523.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr106523.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr106523.c?ref=001121e8921d5d1a439ce0e64ab04c5959b0bfd8", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/106523 */\n+\n+__attribute__((noipa)) unsigned char\n+f7 (unsigned char x, unsigned int y)\n+{\n+  unsigned int t = x;\n+  return (t << y) | (t >> ((-y) & 7));\n+}\n+\n+int\n+main ()\n+{\n+  if (__CHAR_BIT__ != 8 || __SIZEOF_INT__ != 4)\n+    return 0;\n+\n+  volatile unsigned char x = 152;\n+  volatile unsigned int y = 19;\n+  if (f7 (x, y) != 4)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "458d9c8e4836bf80ad814bc0f27da96eda4b9373", "filename": "gcc/tree-ssa-forwprop.cc", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftree-ssa-forwprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001121e8921d5d1a439ce0e64ab04c5959b0bfd8/gcc%2Ftree-ssa-forwprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.cc?ref=001121e8921d5d1a439ce0e64ab04c5959b0bfd8", "patch": "@@ -1837,7 +1837,7 @@ defcodefor_name (tree name, enum tree_code *code, tree *arg1, tree *arg2)\n    ((T) ((T2) X << Y)) | ((T) ((T2) X >> ((-Y) & (B - 1))))\n    ((T) ((T2) X << (int) Y)) | ((T) ((T2) X >> (int) ((-Y) & (B - 1))))\n \n-   transform these into:\n+   transform these into (last 2 only if ranger can prove Y < B):\n    X r<< Y\n \n    Or for:\n@@ -1866,6 +1866,8 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n   int i;\n   bool swapped_p = false;\n   gimple *g;\n+  gimple *def_arg_stmt[2] = { NULL, NULL };\n+  int wider_prec = 0;\n \n   arg[0] = gimple_assign_rhs1 (stmt);\n   arg[1] = gimple_assign_rhs2 (stmt);\n@@ -1878,7 +1880,11 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n     return false;\n \n   for (i = 0; i < 2; i++)\n-    defcodefor_name (arg[i], &def_code[i], &def_arg1[i], &def_arg2[i]);\n+    {\n+      defcodefor_name (arg[i], &def_code[i], &def_arg1[i], &def_arg2[i]);\n+      if (TREE_CODE (arg[i]) == SSA_NAME)\n+\tdef_arg_stmt[i] = SSA_NAME_DEF_STMT (arg[i]);\n+    }\n \n   /* Look through narrowing (or same precision) conversions.  */\n   if (CONVERT_EXPR_CODE_P (def_code[0])\n@@ -1891,10 +1897,13 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n       && has_single_use (arg[0])\n       && has_single_use (arg[1]))\n     {\n+      wider_prec = TYPE_PRECISION (TREE_TYPE (def_arg1[0]));\n       for (i = 0; i < 2; i++)\n \t{\n \t  arg[i] = def_arg1[i];\n \t  defcodefor_name (arg[i], &def_code[i], &def_arg1[i], &def_arg2[i]);\n+\t  if (TREE_CODE (arg[i]) == SSA_NAME)\n+\t    def_arg_stmt[i] = SSA_NAME_DEF_STMT (arg[i]);\n \t}\n     }\n   else\n@@ -1910,6 +1919,8 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t{\n \t  arg[i] = def_arg1[i];\n \t  defcodefor_name (arg[i], &def_code[i], &def_arg1[i], &def_arg2[i]);\n+\t  if (TREE_CODE (arg[i]) == SSA_NAME)\n+\t    def_arg_stmt[i] = SSA_NAME_DEF_STMT (arg[i]);\n \t}\n     }\n \n@@ -1983,6 +1994,9 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n     {\n       tree cdef_arg1[2], cdef_arg2[2], def_arg2_alt[2];\n       enum tree_code cdef_code[2];\n+      gimple *def_arg_alt_stmt[2] = { NULL, NULL };\n+      bool check_range = false;\n+      gimple *check_range_stmt = NULL;\n       /* Look through conversion of the shift count argument.\n \t The C/C++ FE cast any shift count argument to integer_type_node.\n \t The only problem might be if the shift count type maximum value\n@@ -1999,9 +2013,13 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t      && type_has_mode_precision_p (TREE_TYPE (cdef_arg1[i])))\n \t    {\n \t      def_arg2_alt[i] = cdef_arg1[i];\n+\t      if (TREE_CODE (def_arg2[i]) == SSA_NAME)\n+\t\tdef_arg_alt_stmt[i] = SSA_NAME_DEF_STMT (def_arg2[i]);\n \t      defcodefor_name (def_arg2_alt[i], &cdef_code[i],\n \t\t\t       &cdef_arg1[i], &cdef_arg2[i]);\n \t    }\n+\t  else\n+\t    def_arg_alt_stmt[i] = def_arg_stmt[i];\n \t}\n       for (i = 0; i < 2; i++)\n \t/* Check for one shift count being Y and the other B - Y,\n@@ -2024,7 +2042,7 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t    if (CONVERT_EXPR_CODE_P (code)\n \t\t&& INTEGRAL_TYPE_P (TREE_TYPE (tem))\n \t\t&& TYPE_PRECISION (TREE_TYPE (tem))\n-\t\t > floor_log2 (TYPE_PRECISION (rtype))\n+\t\t   > floor_log2 (TYPE_PRECISION (rtype))\n \t\t&& type_has_mode_precision_p (TREE_TYPE (tem))\n \t\t&& (tem == def_arg2[1 - i]\n \t\t    || tem == def_arg2_alt[1 - i]))\n@@ -2053,7 +2071,7 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t    if (CONVERT_EXPR_CODE_P (code)\n \t\t&& INTEGRAL_TYPE_P (TREE_TYPE (tem))\n \t\t&& TYPE_PRECISION (TREE_TYPE (tem))\n-\t\t > floor_log2 (TYPE_PRECISION (rtype))\n+\t\t   > floor_log2 (TYPE_PRECISION (rtype))\n \t\t&& type_has_mode_precision_p (TREE_TYPE (tem)))\n \t      defcodefor_name (tem, &code, &tem, NULL);\n \n@@ -2062,6 +2080,11 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t\tif (tem == def_arg2[1 - i] || tem == def_arg2_alt[1 - i])\n \t\t  {\n \t\t    rotcnt = tem;\n+\t\t    check_range = true;\n+\t\t    if (tem == def_arg2[1 - i])\n+\t\t      check_range_stmt = def_arg_stmt[1 - i];\n+\t\t    else\n+\t\t      check_range_stmt = def_arg_alt_stmt[1 - i];\n \t\t    break;\n \t\t  }\n \t\ttree tem2;\n@@ -2076,6 +2099,11 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t\t\t|| tem2 == def_arg2_alt[1 - i])\n \t\t      {\n \t\t\trotcnt = tem2;\n+\t\t\tcheck_range = true;\n+\t\t\tif (tem2 == def_arg2[1 - i])\n+\t\t\t  check_range_stmt = def_arg_stmt[1 - i];\n+\t\t\telse\n+\t\t\t  check_range_stmt = def_arg_alt_stmt[1 - i];\n \t\t\tbreak;\n \t\t      }\n \t\t  }\n@@ -2111,6 +2139,23 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t\t  }\n \t      }\n \t  }\n+      if (check_range && wider_prec > TYPE_PRECISION (rtype))\n+\t{\n+\t  if (TREE_CODE (rotcnt) != SSA_NAME)\n+\t    return false;\n+\t  int_range_max r;\n+\t  if (!get_global_range_query ()->range_of_expr (r, rotcnt,\n+\t\t\t\t\t\t\t check_range_stmt))\n+\t    return false;\n+\t  int prec = TYPE_PRECISION (TREE_TYPE (rotcnt));\n+\t  signop sign = TYPE_SIGN (TREE_TYPE (rotcnt));\n+\t  wide_int min = wide_int::from (TYPE_PRECISION (rtype), prec, sign);\n+\t  wide_int max = wide_int::from (wider_prec - 1, prec, sign);\n+\t  int_range<2> r2 (TREE_TYPE (rotcnt), min, max);\n+\t  r.intersect (r2);\n+\t  if (!r.undefined_p ())\n+\t    return false;\n+\t}\n       if (rotcnt == NULL_TREE)\n \treturn false;\n       swapped_p = i != 1;"}]}