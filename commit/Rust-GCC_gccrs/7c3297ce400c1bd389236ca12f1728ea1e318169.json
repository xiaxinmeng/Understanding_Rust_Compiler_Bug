{"sha": "7c3297ce400c1bd389236ca12f1728ea1e318169", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzMjk3Y2U0MDBjMWJkMzg5MjM2Y2ExMmYxNzI4ZWExZTMxODE2OQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-10-17T17:53:07Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-10-17T17:53:07Z"}, "message": "avr.h (ASSEMBLER_DIALECT): Remove.\n\n\t* config/avr/avr.h (ASSEMBLER_DIALECT): Remove.\n\t* config/avr/avr.md (mcu_have_movw, mcu_mega): Remove attributes.\n\t(adjust_len): Add alternative \"call\".\n\t(isa, enabled): New insn attributes.\n\t(length): Use match_test with AVR_HAVE_JMP_CALL instead of\n\tmcu_mega attribute.\n\t(*sbrx_branch<mode>): Ditto.\n\t(*sbrx_and_branch<mode>): Ditto.\n\t(*sbix_branch): Ditto.\n\t(*sbix_branch_bit7): Ditto.\n\t(*sbix_branch_tmp): Ditto.\n\t(*sbix_branch_tmp_bit7): Ditto.\n\t(jump): Ditto.\n\t(negsi2): Use attribute \"isa\" instead of assembler dialect.\n\t(extendhisi2): Ditto.\n\t(call_insn, call_value_insn): Set adjust_len attribute.\n\t(indirect_jump): Indent to coding rules.\n\t(call_prologue_saves): Use isa attribute instead of mcu_mega.\n\t(epilogue_restores): Ditto.  Fix setting of SP as described in the\n\tRTX pattern.\n\t(*indirect_jump): Fusion of *jcindirect_jump, *njcindirect_jump\n\tand *indirect_jump_avr6.\n\t(*tablejump): Fusion of *tablejump_rjmp and *tablejump_lib.\n\t(*jcindirect_jump, *njcindirect_jump, *indirect_jump_avr6): Remove.\n\t(*tablejump_rjmp, *tablejump_lib): Remove.\n\t* config/avr/avr.c (adjust_insn_length): Handle ADJUST_LEN_CALL.\n\nFrom-SVN: r180104", "tree": {"sha": "c942d0bb4863eb7f4470080192576abc44885ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c942d0bb4863eb7f4470080192576abc44885ac9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c3297ce400c1bd389236ca12f1728ea1e318169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3297ce400c1bd389236ca12f1728ea1e318169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3297ce400c1bd389236ca12f1728ea1e318169", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3297ce400c1bd389236ca12f1728ea1e318169/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7248d5fe33aa728c44f8d7efef2082353ab9900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7248d5fe33aa728c44f8d7efef2082353ab9900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7248d5fe33aa728c44f8d7efef2082353ab9900"}], "stats": {"total": 327, "additions": 175, "deletions": 152}, "files": [{"sha": "ca205f60398b5be2aadc5e340ad703466e269feb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3297ce400c1bd389236ca12f1728ea1e318169/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3297ce400c1bd389236ca12f1728ea1e318169/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c3297ce400c1bd389236ca12f1728ea1e318169", "patch": "@@ -1,3 +1,32 @@\n+2011-10-17  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.h (ASSEMBLER_DIALECT): Remove.\n+\t* config/avr/avr.md (mcu_have_movw, mcu_mega): Remove attributes.\n+\t(adjust_len): Add alternative \"call\".\n+\t(isa, enabled): New insn attributes.\n+\t(length): Use match_test with AVR_HAVE_JMP_CALL instead of\n+\tmcu_mega attribute.\n+\t(*sbrx_branch<mode>): Ditto.\n+\t(*sbrx_and_branch<mode>): Ditto.\n+\t(*sbix_branch): Ditto.\n+\t(*sbix_branch_bit7): Ditto.\n+\t(*sbix_branch_tmp): Ditto.\n+\t(*sbix_branch_tmp_bit7): Ditto.\n+\t(jump): Ditto.\n+\t(negsi2): Use attribute \"isa\" instead of assembler dialect.\n+\t(extendhisi2): Ditto.\n+\t(call_insn, call_value_insn): Set adjust_len attribute.\n+\t(indirect_jump): Indent to coding rules.\n+\t(call_prologue_saves): Use isa attribute instead of mcu_mega.\n+\t(epilogue_restores): Ditto.  Fix setting of SP as described in the\n+\tRTX pattern.\n+\t(*indirect_jump): Fusion of *jcindirect_jump, *njcindirect_jump\n+\tand *indirect_jump_avr6.\n+\t(*tablejump): Fusion of *tablejump_rjmp and *tablejump_lib.\n+\t(*jcindirect_jump, *njcindirect_jump, *indirect_jump_avr6): Remove.\n+\t(*tablejump_rjmp, *tablejump_lib): Remove.\n+\t* config/avr/avr.c (adjust_insn_length): Handle ADJUST_LEN_CALL.\n+\n 2011-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50757"}, {"sha": "c0ce6f9ace09c9311ed4420560803056e8717c29", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3297ce400c1bd389236ca12f1728ea1e318169/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3297ce400c1bd389236ca12f1728ea1e318169/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=7c3297ce400c1bd389236ca12f1728ea1e318169", "patch": "@@ -5331,6 +5331,8 @@ adjust_insn_length (rtx insn, int len)\n     case ADJUST_LEN_ASHLHI: ashlhi3_out (insn, op, &len); break;\n     case ADJUST_LEN_ASHLSI: ashlsi3_out (insn, op, &len); break;\n       \n+    case ADJUST_LEN_CALL: len = AVR_HAVE_JMP_CALL ? 2 : 1; break;\n+\n     default:\n       gcc_unreachable();\n     }"}, {"sha": "1a5f20a0e13b6d177558e8e2c72dff5eff0e0bdc", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3297ce400c1bd389236ca12f1728ea1e318169/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3297ce400c1bd389236ca12f1728ea1e318169/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=7c3297ce400c1bd389236ca12f1728ea1e318169", "patch": "@@ -454,8 +454,6 @@ typedef struct avr_args {\n \n #define PRINT_OPERAND_ADDRESS(STREAM, X) print_operand_address(STREAM, X)\n \n-#define ASSEMBLER_DIALECT AVR_HAVE_MOVW\n-\n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO)\t\\\n {\t\t\t\t\t\t\\\n   gcc_assert (REGNO < 32);\t\t\t\\"}, {"sha": "aafdc554a10282d7b446320be181620d02c111de", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 144, "deletions": 150, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3297ce400c1bd389236ca12f1728ea1e318169/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3297ce400c1bd389236ca12f1728ea1e318169/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=7c3297ce400c1bd389236ca12f1728ea1e318169", "patch": "@@ -84,17 +84,6 @@\n (define_attr \"type\" \"branch,branch1,arith,xcall\"\n   (const_string \"arith\"))\n \n-(define_attr \"mcu_have_movw\" \"yes,no\"\n-  (const (if_then_else (symbol_ref \"AVR_HAVE_MOVW\")\n-\t\t       (const_string \"yes\")\n-\t\t       (const_string \"no\"))))\n-\n-(define_attr \"mcu_mega\" \"yes,no\"\n-  (const (if_then_else (symbol_ref \"AVR_HAVE_JMP_CALL\")\n-\t\t       (const_string \"yes\")\n-\t\t       (const_string \"no\"))))\n-  \n-\n ;; The size of instructions in bytes.\n ;; XXX may depend from \"cc\"\n \n@@ -124,7 +113,7 @@\n                                      (const_int 3)\n                                      (const_int 4)))\n \t (eq_attr \"type\" \"xcall\")\n-\t (if_then_else (eq_attr \"mcu_mega\" \"no\")\n+\t (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n \t\t       (const_int 1)\n \t\t       (const_int 2))]\n         (const_int 2)))\n@@ -133,18 +122,61 @@\n ;; Following insn attribute tells if and how the adjustment has to be\n ;; done:\n ;;     no     No adjustment needed; attribute \"length\" is fine.\n-;;     yes    Analyse pattern in adjust_insn_length by hand.\n ;; Otherwise do special processing depending on the attribute.\n \n (define_attr \"adjust_len\"\n-  \"out_bitop, out_plus, addto_sp, tsthi, tstsi, compare,\n+  \"out_bitop, out_plus, addto_sp, tsthi, tstsi, compare, call,\n    mov8, mov16, mov32, reload_in16, reload_in32,\n    ashlqi, ashrqi, lshrqi,\n    ashlhi, ashrhi, lshrhi,\n    ashlsi, ashrsi, lshrsi,\n    no\"\n   (const_string \"no\"))\n \n+;; Flavours of instruction set architecture (ISA), used in enabled attribute\n+\n+;; mov:   ISA has no MOVW\n+;; movw:  ISA has MOVW\n+;; rjmp:  ISA has no CALL/JMP\n+;; jmp:   ISA has CALL/JMP\n+;; ijmp:  ISA has no EICALL/EIJMP\n+;; eijmp: ISA has EICALL/EIJMP\n+\n+(define_attr \"isa\"\n+  \"mov,movw, rjmp,jmp, ijmp,eijmp,\n+   standard\"\n+  (const_string \"standard\"))\n+\n+(define_attr \"enabled\" \"\"\n+  (cond [(eq_attr \"isa\" \"standard\")\n+         (const_int 1)\n+         \n+         (and (eq_attr \"isa\" \"mov\")\n+              (match_test \"!AVR_HAVE_MOVW\"))\n+         (const_int 1)\n+\n+         (and (eq_attr \"isa\" \"movw\")\n+              (match_test \"AVR_HAVE_MOVW\"))\n+         (const_int 1)\n+         \n+         (and (eq_attr \"isa\" \"rjmp\")\n+              (match_test \"!AVR_HAVE_JMP_CALL\"))\n+         (const_int 1)\n+\n+         (and (eq_attr \"isa\" \"jmp\")\n+              (match_test \"AVR_HAVE_JMP_CALL\"))\n+         (const_int 1)\n+         \n+         (and (eq_attr \"isa\" \"ijmp\")\n+              (match_test \"!AVR_HAVE_EIJMP_EICALL\"))\n+         (const_int 1)\n+\n+         (and (eq_attr \"isa\" \"eijmp\")\n+              (match_test \"AVR_HAVE_EIJMP_EICALL\"))\n+         (const_int 1)\n+         ] (const_int 0)))\n+\n+\n ;; Define mode iterators\n (define_mode_iterator QIHI  [(QI \"\") (HI \"\")])\n (define_mode_iterator QIHI2 [(QI \"\") (HI \"\")])\n@@ -2949,20 +2981,17 @@\n    (set_attr \"cc\" \"set_czn,set_n,set_czn\")])\n \n (define_insn \"negsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\"       \"=!d,r,&r\")\n-\t(neg:SI (match_operand:SI 1 \"register_operand\" \"0,0,r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"       \"=!d,r,&r,&r\")\n+        (neg:SI (match_operand:SI 1 \"register_operand\" \"0,0,r ,r\")))]\n   \"\"\n   \"@\n \tcom %D0\\;com %C0\\;com %B0\\;neg %A0\\;sbci %B0,lo8(-1)\\;sbci %C0,lo8(-1)\\;sbci %D0,lo8(-1)\n \tcom %D0\\;com %C0\\;com %B0\\;com %A0\\;adc %A0,__zero_reg__\\;adc %B0,__zero_reg__\\;adc %C0,__zero_reg__\\;adc %D0,__zero_reg__\n-\tclr %A0\\;clr %B0\\;{clr %C0\\;clr %D0|movw %C0,%A0}\\;sub %A0,%A1\\;sbc %B0,%B1\\;sbc %C0,%C1\\;sbc %D0,%D1\"\n-  [(set_attr_alternative \"length\"\n-\t\t\t [(const_int 7)\n-\t\t\t  (const_int 8)\n-\t\t\t  (if_then_else (eq_attr \"mcu_have_movw\" \"yes\")\n-\t\t\t\t\t(const_int 7)\n-\t\t\t\t\t(const_int 8))])\n-   (set_attr \"cc\" \"set_czn,set_n,set_czn\")])\n+\tclr %A0\\;clr %B0\\;clr %C0\\;clr %D0\\;sub %A0,%A1\\;sbc %B0,%B1\\;sbc %C0,%C1\\;sbc %D0,%D1\n+\tclr %A0\\;clr %B0\\;movw %C0,%A0\\;sub %A0,%A1\\;sbc %B0,%B1\\;sbc %C0,%C1\\;sbc %D0,%D1\"\n+  [(set_attr \"length\" \"7,8,8,7\")\n+   (set_attr \"isa\"    \"*,*,mov,movw\")\n+   (set_attr \"cc\" \"set_czn,set_n,set_czn,set_czn\")])\n \n (define_insn \"negsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=d,r\")\n@@ -3036,18 +3065,16 @@\n    (set_attr \"cc\" \"set_n,set_n\")])\n \n (define_insn \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\"                               \"=r,r\")\n-        (sign_extend:SI (match_operand:HI 1 \"combine_pseudo_register_operand\" \"0,*r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"                               \"=r,r ,r\")\n+        (sign_extend:SI (match_operand:HI 1 \"combine_pseudo_register_operand\" \"0,*r,*r\")))]\n   \"\"\n   \"@\n \tclr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\n-\t{mov %A0,%A1\\;mov %B0,%B1|movw %A0,%A1}\\;clr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\"\n-  [(set_attr_alternative \"length\"\n-\t\t\t [(const_int 4)\n-\t\t\t  (if_then_else (eq_attr \"mcu_have_movw\" \"yes\")\n-\t\t\t\t\t(const_int 5)\n-\t\t\t\t\t(const_int 6))])\n-   (set_attr \"cc\" \"set_n,set_n\")])\n+\tmov %A0,%A1\\;mov %B0,%B1\\;clr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\n+\tmovw %A0,%A1\\;clr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\"\n+  [(set_attr \"length\" \"4,6,5\")\n+   (set_attr \"isa\" \"*,mov,movw\")\n+   (set_attr \"cc\" \"set_n\")])\n \n ;; xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x\n ;; zero extend\n@@ -3356,7 +3383,7 @@\n \t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n \t\t\t   (le (minus (pc) (match_dup 3)) (const_int 2046)))\n \t\t      (const_int 2)\n-\t\t      (if_then_else (eq_attr \"mcu_mega\" \"no\")\n+\t\t      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n \t\t\t\t    (const_int 2)\n \t\t\t\t    (const_int 4))))\n    (set_attr \"cc\" \"clobber\")])\n@@ -3386,7 +3413,7 @@\n \t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n \t\t\t   (le (minus (pc) (match_dup 3)) (const_int 2046)))\n \t\t      (const_int 2)\n-\t\t      (if_then_else (eq_attr \"mcu_mega\" \"no\")\n+\t\t      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n \t\t\t\t    (const_int 2)\n \t\t\t\t    (const_int 4))))\n    (set_attr \"cc\" \"clobber\")])\n@@ -3569,20 +3596,24 @@\n   [(set (pc)\n         (label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n-  \"*{\n-  if (AVR_HAVE_JMP_CALL && get_attr_length (insn) != 1)\n-    return AS1 (jmp,%x0);\n-  return AS1 (rjmp,%x0);\n-}\"\n+  {\n+    return AVR_HAVE_JMP_CALL && get_attr_length (insn) != 1\n+           ? \"jmp %x0\"\n+           : \"rjmp %x0\";\n+  }\n   [(set (attr \"length\")\n \t(if_then_else (match_operand 0 \"symbol_ref_operand\" \"\")\t\n-\t\t(if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t      (const_int 1)\n-\t\t\t      (const_int 2))\n-\t\t(if_then_else (and (ge (minus (pc) (match_dup 0)) (const_int -2047))\n-\t\t\t\t   (le (minus (pc) (match_dup 0)) (const_int 2047)))\n-\t\t\t      (const_int 1)\n-\t\t\t      (const_int 2))))\n+                      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n+                                    (const_int 1)\n+                                    (const_int 2))\n+                      (if_then_else (and (ge (minus (pc)\n+                                                    (match_dup 0))\n+                                             (const_int -2047))\n+                                         (le (minus (pc)\n+                                                    (match_dup 0))\n+                                             (const_int 2047)))\n+                                    (const_int 1)\n+                                    (const_int 2))))\n    (set_attr \"cc\" \"none\")])\n \n ;; call\n@@ -3640,15 +3671,8 @@\n     %!ijmp\n     %~jmp %x0\"\n   [(set_attr \"cc\" \"clobber\")\n-   (set_attr_alternative \"length\"\n-                         [(const_int 1)\n-                          (if_then_else (eq_attr \"mcu_mega\" \"yes\")\n-                                        (const_int 2)\n-                                        (const_int 1))\n-                          (const_int 1)\n-                          (if_then_else (eq_attr \"mcu_mega\" \"yes\")\n-                                        (const_int 2)\n-                                        (const_int 1))])])\n+   (set_attr \"length\" \"1,*,1,*\")\n+   (set_attr \"adjust_len\" \"*,call,*,call\")])\n \n (define_insn \"call_value_insn\"\n   [(parallel[(set (match_operand 0 \"register_operand\"                   \"=r,r,r,r\")\n@@ -3664,15 +3688,8 @@\n     %!ijmp\n     %~jmp %x1\"\n   [(set_attr \"cc\" \"clobber\")\n-   (set_attr_alternative \"length\"\n-                         [(const_int 1)\n-                          (if_then_else (eq_attr \"mcu_mega\" \"yes\")\n-                                        (const_int 2)\n-                                        (const_int 1))\n-                          (const_int 1)\n-                          (if_then_else (eq_attr \"mcu_mega\" \"yes\")\n-                                        (const_int 2)\n-                                        (const_int 1))])])\n+   (set_attr \"length\" \"1,*,1,*\")\n+   (set_attr \"adjust_len\" \"*,call,*,call\")])\n \n (define_insn \"nop\"\n   [(const_int 0)]\n@@ -3684,69 +3701,51 @@\n ; indirect jump\n \n (define_expand \"indirect_jump\"\n-  [(set (pc) (match_operand:HI 0 \"nonmemory_operand\" \"\"))]\n+  [(set (pc)\n+        (match_operand:HI 0 \"nonmemory_operand\" \"\"))]\n   \"\"\n-  \" if ((!AVR_HAVE_JMP_CALL) && !register_operand(operand0, HImode))\n-    {\n-      operands[0] = copy_to_mode_reg(HImode, operand0);\n-    }\"\n-)\n+  {\n+    if (!AVR_HAVE_JMP_CALL && !register_operand (operands[0], HImode))\n+      {\n+        operands[0] = copy_to_mode_reg (HImode, operands[0]);\n+      }\n+  })\n \n ; indirect jump\n-(define_insn \"*jcindirect_jump\"\n-  [(set (pc) (match_operand:HI 0 \"immediate_operand\" \"i\"))]\n+(define_insn \"*indirect_jump\"\n+  [(set (pc)\n+        (match_operand:HI 0 \"nonmemory_operand\" \"i,i,!z,*r,z\"))]\n   \"\"\n-  \"%~jmp %x0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"none\")])\n-\n-;;\n-(define_insn \"*njcindirect_jump\"\n-  [(set (pc) (match_operand:HI 0 \"register_operand\" \"!z,*r\"))]\n-  \"!AVR_HAVE_EIJMP_EICALL\"\n   \"@\n+\trjmp %x0\n+\tjmp %x0\n \tijmp\n-\tpush %A0\\;push %B0\\;ret\"\n-  [(set_attr \"length\" \"1,3\")\n-   (set_attr \"cc\" \"none,none\")])\n-\n-(define_insn \"*indirect_jump_avr6\"\n-  [(set (pc) (match_operand:HI 0 \"register_operand\" \"z\"))]\n-  \"AVR_HAVE_EIJMP_EICALL\"\n-  \"eijmp\"\n-  [(set_attr \"length\" \"1\")\n+\tpush %A0\\;push %B0\\;ret\n+\teijmp\"\n+  [(set_attr \"length\" \"1,2,1,3,1\")\n+   (set_attr \"isa\" \"rjmp,jmp,ijmp,ijmp,eijmp\")\n    (set_attr \"cc\" \"none\")])\n \n ;; table jump\n ;; For entries in jump table see avr_output_addr_vec_elt.\n \n-;; Table made from \"rjmp .L<n>\" instructions for <= 8K devices.\n-(define_insn \"*tablejump_rjmp\"\n+;; Table made from\n+;;    \"rjmp .L<n>\"   instructions for <= 8K devices\n+;;    \".word gs(.L<n>)\" addresses for >  8K devices\n+(define_insn \"*tablejump\"\n   [(set (pc)\n-        (unspec:HI [(match_operand:HI 0 \"register_operand\" \"!z,*r\")]\n+        (unspec:HI [(match_operand:HI 0 \"register_operand\" \"!z,*r,z\")]\n                    UNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n-  \"!AVR_HAVE_JMP_CALL\"\n+  \"\"\n   \"@\n \tijmp\n-\tpush %A0\\;push %B0\\;ret\"\n-  [(set_attr \"length\" \"1,3\")\n-   (set_attr \"cc\" \"none,none\")])\n-\n-;; Move the common piece of code to libgcc.\n-;; Table made from \".word gs(.L<n>)\" addresses for > 8K devices.\n-;; Read jump address from table and perform indirect jump.\n-(define_insn \"*tablejump_lib\"\n-  [(set (pc)\n-        (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")]\n-                   UNSPEC_INDEX_JMP))\n-   (use (label_ref (match_operand 1 \"\" \"\")))\n-   (clobber (match_dup 0))]\n-  \"AVR_HAVE_JMP_CALL\"\n-  \"jmp __tablejump2__\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"clobber\")])\n+\tpush %A0\\;push %B0\\;ret\n+\tjmp __tablejump2__\"\n+  [(set_attr \"length\" \"1,3,2\")\n+   (set_attr \"isa\" \"rjmp,rjmp,jmp\")\n+   (set_attr \"cc\" \"none,none,clobber\")])\n \n \n (define_expand \"casesi\"\n@@ -3829,11 +3828,11 @@\n   \"* return avr_out_sbxx_branch (insn, operands);\"\n   [(set (attr \"length\")\n \t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n-\t\t\t   (le (minus (pc) (match_dup 3)) (const_int 2046)))\n-\t\t      (const_int 2)\n-\t\t      (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t    (const_int 2)\n-\t\t\t\t    (const_int 4))))\n+                           (le (minus (pc) (match_dup 3)) (const_int 2046)))\n+                      (const_int 2)\n+                      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n+                                    (const_int 2)\n+                                    (const_int 4))))\n    (set_attr \"cc\" \"clobber\")])\n \n ;; Tests of bit 7 are pessimized to sign tests, so we need this too...\n@@ -3853,11 +3852,11 @@\n }\n   [(set (attr \"length\")\n \t(if_then_else (and (ge (minus (pc) (match_dup 2)) (const_int -2046))\n-\t\t\t   (le (minus (pc) (match_dup 2)) (const_int 2046)))\n-\t\t      (const_int 2)\n-\t\t      (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t    (const_int 2)\n-\t\t\t\t    (const_int 4))))\n+                           (le (minus (pc) (match_dup 2)) (const_int 2046)))\n+                      (const_int 2)\n+                      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n+                                    (const_int 2)\n+                                    (const_int 4))))\n    (set_attr \"cc\" \"clobber\")])\n \n ;; Upper half of the I/O space - read port to __tmp_reg__ and use sbrc/sbrs.\n@@ -3876,11 +3875,11 @@\n   \"* return avr_out_sbxx_branch (insn, operands);\"\n   [(set (attr \"length\")\n \t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n-\t\t\t   (le (minus (pc) (match_dup 3)) (const_int 2045)))\n-\t\t      (const_int 3)\n-\t\t      (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t    (const_int 3)\n-\t\t\t\t    (const_int 5))))\n+                           (le (minus (pc) (match_dup 3)) (const_int 2045)))\n+                      (const_int 3)\n+                      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n+                                    (const_int 3)\n+                                    (const_int 5))))\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"*sbix_branch_tmp_bit7\"\n@@ -3901,7 +3900,7 @@\n \t(if_then_else (and (ge (minus (pc) (match_dup 2)) (const_int -2046))\n \t\t\t   (le (minus (pc) (match_dup 2)) (const_int 2045)))\n \t\t      (const_int 3)\n-\t\t      (if_then_else (eq_attr \"mcu_mega\" \"no\")\n+                      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n \t\t\t\t    (const_int 3)\n \t\t\t\t    (const_int 5))))\n    (set_attr \"cc\" \"clobber\")])\n@@ -4064,41 +4063,37 @@\n ;;  Library prologue saves\n (define_insn \"call_prologue_saves\"\n   [(unspec_volatile:HI [(const_int 0)] UNSPECV_PROLOGUE_SAVES)\n-   (match_operand:HI 0 \"immediate_operand\" \"\")\n-   (set (reg:HI REG_SP) (minus:HI \n-                           (reg:HI REG_SP)\n-                           (match_operand:HI 1 \"immediate_operand\" \"\")))\n+   (match_operand:HI 0 \"immediate_operand\" \"i,i\")\n+   (set (reg:HI REG_SP)\n+        (minus:HI (reg:HI REG_SP)\n+                  (match_operand:HI 1 \"immediate_operand\" \"i,i\")))\n    (use (reg:HI REG_X))\n    (clobber (reg:HI REG_Z))]\n   \"\"\n   \"ldi r30,lo8(gs(1f))\n \tldi r31,hi8(gs(1f))\n \t%~jmp __prologue_saves__+((18 - %0) * 2)\n 1:\"\n-  [(set_attr_alternative \"length\"\n-\t\t\t [(if_then_else (eq_attr \"mcu_mega\" \"yes\")\n-\t\t\t\t\t(const_int 6)\n-\t\t\t\t\t(const_int 5))])\n-  (set_attr \"cc\" \"clobber\")\n-  ])\n+  [(set_attr \"length\" \"5,6\")\n+   (set_attr \"cc\" \"clobber\")\n+   (set_attr \"isa\" \"rjmp,jmp\")])\n   \n ;  epilogue  restores using library\n (define_insn \"epilogue_restores\"\n   [(unspec_volatile:QI [(const_int 0)] UNSPECV_EPILOGUE_RESTORES)\n-   (set (reg:HI REG_Y ) (plus:HI \n-                           (reg:HI REG_Y)\n-                           (match_operand:HI 0 \"immediate_operand\" \"\"))) \n-   (set (reg:HI REG_SP) (reg:HI REG_Y))\n-   (clobber  (reg:QI REG_Z))]\n+   (set (reg:HI REG_Y)\n+        (plus:HI (reg:HI REG_Y)\n+                 (match_operand:HI 0 \"immediate_operand\" \"i,i\")))\n+   (set (reg:HI REG_SP)\n+        (plus:HI (reg:HI REG_Y)\n+                 (match_dup 0)))\n+   (clobber (reg:QI REG_Z))]\n   \"\"\n   \"ldi r30, lo8(%0)\n \t%~jmp __epilogue_restores__ + ((18 - %0) * 2)\"\n-  [(set_attr_alternative \"length\"\n-\t\t\t [(if_then_else (eq_attr \"mcu_mega\" \"yes\")\n-\t\t\t\t\t(const_int 3)\n-\t\t\t\t\t(const_int 2))])\n-  (set_attr \"cc\" \"clobber\")\n-  ])\n+  [(set_attr \"length\" \"2,3\")\n+   (set_attr \"cc\" \"clobber\")\n+   (set_attr \"isa\" \"rjmp,jmp\")])\n   \n ; return\n (define_insn \"return\"\n@@ -4140,11 +4135,10 @@\n (define_expand \"prologue\"\n   [(const_int 0)]\n   \"\"\n-  \"\n   {\n     expand_prologue (); \n     DONE;\n-  }\")\n+  })\n \n (define_expand \"epilogue\"\n   [(const_int 0)]"}]}