{"sha": "b028af11640a2a31c267b73cc40a9b162632a7d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyOGFmMTE2NDBhMmEzMWMyNjdiNzNjYzQwYTliMTYyNjMyYTdkMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-20T14:40:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-20T14:40:38Z"}, "message": "re PR c++/47080 ([C++0x] explicit conversion function return conversions not restricted to qualifications)\n\n\tPR c++/47080\n\t* call.c (rejection_reason_code): Add rr_explicit_conversion.\n\t(print_z_candidate): Handle it.\n\t(explicit_conversion_rejection): New.\n\t(build_user_type_conversion_1): Reject an explicit conversion\n\tfunction that requires more than a qualification conversion.\n\nFrom-SVN: r175217", "tree": {"sha": "5547a21a42cea0d32c973213b19d667cb827c2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5547a21a42cea0d32c973213b19d667cb827c2e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b028af11640a2a31c267b73cc40a9b162632a7d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b028af11640a2a31c267b73cc40a9b162632a7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b028af11640a2a31c267b73cc40a9b162632a7d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b028af11640a2a31c267b73cc40a9b162632a7d0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de721390198dfc1d1521b315ad96e556d950224a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de721390198dfc1d1521b315ad96e556d950224a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de721390198dfc1d1521b315ad96e556d950224a"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "eff4c8ee81e2bdf69aa66fbab0e9cf402e723513", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b028af11640a2a31c267b73cc40a9b162632a7d0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b028af11640a2a31c267b73cc40a9b162632a7d0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b028af11640a2a31c267b73cc40a9b162632a7d0", "patch": "@@ -1,5 +1,12 @@\n 2011-06-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/47080\n+\t* call.c (rejection_reason_code): Add rr_explicit_conversion.\n+\t(print_z_candidate): Handle it.\n+\t(explicit_conversion_rejection): New.\n+\t(build_user_type_conversion_1): Reject an explicit conversion\n+\tfunction that requires more than a qualification conversion.\n+\n \tPR c++/47635\n \t* decl.c (grokdeclarator): Don't set ctype to an ENUMERAL_TYPE.\n "}, {"sha": "e9d6e7ea354c6928d63aa0b1d7f5df7a104df1d0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b028af11640a2a31c267b73cc40a9b162632a7d0/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b028af11640a2a31c267b73cc40a9b162632a7d0/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b028af11640a2a31c267b73cc40a9b162632a7d0", "patch": "@@ -429,6 +429,7 @@ struct candidate_warning {\n enum rejection_reason_code {\n   rr_none,\n   rr_arity,\n+  rr_explicit_conversion,\n   rr_arg_conversion,\n   rr_bad_arg_conversion\n };\n@@ -608,6 +609,16 @@ bad_arg_conversion_rejection (tree first_arg, int n_arg, tree from, tree to)\n   return r;\n }\n \n+static struct rejection_reason *\n+explicit_conversion_rejection (tree from, tree to)\n+{\n+  struct rejection_reason *r = alloc_rejection (rr_explicit_conversion);\n+  r->u.conversion.n_arg = 0;\n+  r->u.conversion.from_type = from;\n+  r->u.conversion.to_type = to;\n+  return r;\n+}\n+\n /* Dynamically allocate a conversion.  */\n \n static conversion *\n@@ -3153,6 +3164,12 @@ print_z_candidate (const char *msgstr, struct z_candidate *candidate)\n \tcase rr_bad_arg_conversion:\n \t  print_conversion_rejection (loc, &r->u.bad_conversion);\n \t  break;\n+\tcase rr_explicit_conversion:\n+\t  inform (loc, \"  return type %qT of explicit conversion function \"\n+\t\t  \"cannot be converted to %qT with a qualification \"\n+\t\t  \"conversion\", r->u.conversion.from_type,\n+\t\t  r->u.conversion.to_type);\n+\t  break;\n \tcase rr_none:\n \tdefault:\n \t  /* This candidate didn't have any issues or we failed to\n@@ -3429,9 +3446,10 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags)\n \n       for (cand = candidates; cand != old_candidates; cand = cand->next)\n \t{\n+\t  tree rettype = TREE_TYPE (TREE_TYPE (cand->fn));\n \t  conversion *ics\n \t    = implicit_conversion (totype,\n-\t\t\t\t   TREE_TYPE (TREE_TYPE (cand->fn)),\n+\t\t\t\t   rettype,\n \t\t\t\t   0,\n \t\t\t\t   /*c_cast_p=*/false, convflags);\n \n@@ -3453,14 +3471,23 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags)\n \n \t  if (!ics)\n \t    {\n-\t      tree rettype = TREE_TYPE (TREE_TYPE (cand->fn));\n \t      cand->viable = 0;\n \t      cand->reason = arg_conversion_rejection (NULL_TREE, -1,\n \t\t\t\t\t\t       rettype, totype);\n \t    }\n+\t  else if (DECL_NONCONVERTING_P (cand->fn)\n+\t\t   && ics->rank > cr_exact)\n+\t    {\n+\t      /* 13.3.1.5: For direct-initialization, those explicit\n+\t\t conversion functions that are not hidden within S and\n+\t\t yield type T or a type that can be converted to type T\n+\t\t with a qualification conversion (4.4) are also candidate\n+\t\t functions.  */\n+\t      cand->viable = -1;\n+\t      cand->reason = explicit_conversion_rejection (rettype, totype);\n+\t    }\n \t  else if (cand->viable == 1 && ics->bad_p)\n \t    {\n-\t      tree rettype = TREE_TYPE (TREE_TYPE (cand->fn));\n \t      cand->viable = -1;\n \t      cand->reason\n \t\t= bad_arg_conversion_rejection (NULL_TREE, -1,\n@@ -5513,7 +5540,18 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \n       for (; t; t = convs->u.next)\n \t{\n-\t  if (t->kind == ck_user || !t->bad_p)\n+\t  if (t->kind == ck_user && t->cand->reason)\n+\t    {\n+\t      permerror (input_location, \"invalid user-defined conversion \"\n+\t\t\t \"from %qT to %qT\", TREE_TYPE (expr), totype);\n+\t      print_z_candidate (\"candidate is:\", t->cand);\n+\t      expr = convert_like_real (t, expr, fn, argnum, 1,\n+\t\t\t\t\t/*issue_conversion_warnings=*/false,\n+\t\t\t\t\t/*c_cast_p=*/false,\n+\t\t\t\t\tcomplain);\n+\t      return cp_convert (totype, expr);\n+\t    }\n+\t  else if (t->kind == ck_user || !t->bad_p)\n \t    {\n \t      expr = convert_like_real (t, expr, fn, argnum, 1,\n \t\t\t\t\t/*issue_conversion_warnings=*/false,"}, {"sha": "5590283925f396bb6353f3cfa0fae4446ac6532c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b028af11640a2a31c267b73cc40a9b162632a7d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b028af11640a2a31c267b73cc40a9b162632a7d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b028af11640a2a31c267b73cc40a9b162632a7d0", "patch": "@@ -1,5 +1,8 @@\n 2011-06-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/47080\n+\t* g++.dg/cpp0x/explicit6.C: New.\n+\n \tPR c++/47635\n \t* g++.dg/cpp0x/enum20.C: New.\n "}, {"sha": "0d620be0803428ba32c82066df6f10531830a25b", "filename": "gcc/testsuite/g++.dg/cpp0x/explicit6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b028af11640a2a31c267b73cc40a9b162632a7d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b028af11640a2a31c267b73cc40a9b162632a7d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit6.C?ref=b028af11640a2a31c267b73cc40a9b162632a7d0", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/47080\n+// { dg-options -std=c++0x }\n+\n+struct A {\n+  explicit operator int();\t// { dg-message \"qualification conversion\" }\n+};\n+\n+int main() {\n+  bool b((A()));\t\t// { dg-error \"invalid user-defined\" }\n+  !A();\t\t\t\t// { dg-error \"\" }\n+}"}]}