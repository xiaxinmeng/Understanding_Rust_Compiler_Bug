{"sha": "68d69835acdbeb2a30bb3338013e55afda1aca4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkNjk4MzVhY2RiZWIyYTMwYmIzMzM4MDEzZTU1YWZkYTFhY2E0ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-11-19T04:09:58Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-11-19T04:09:58Z"}, "message": "Shared library support.\n\nFrom-SVN: r8519", "tree": {"sha": "ce0413f36fa899efe1a55c1519059e52060d600b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce0413f36fa899efe1a55c1519059e52060d600b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68d69835acdbeb2a30bb3338013e55afda1aca4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d69835acdbeb2a30bb3338013e55afda1aca4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d69835acdbeb2a30bb3338013e55afda1aca4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d69835acdbeb2a30bb3338013e55afda1aca4d/comments", "author": null, "committer": null, "parents": [{"sha": "822ef9dfdac2e3cff805baccbff3937cf3f468cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822ef9dfdac2e3cff805baccbff3937cf3f468cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822ef9dfdac2e3cff805baccbff3937cf3f468cb"}], "stats": {"total": 1137, "additions": 955, "deletions": 182}, "files": [{"sha": "eb8794da568fbb6290cc5d4b3689fadade563e92", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -340,6 +340,9 @@ FLOAT_H=float.h-nat\n # Extra symbols for fixproto to define when parsing headers.\n FIXPROTO_DEFINES = \n \n+# Extra flags to use when compiling crt{begin,end}.o.\n+CRTSTUFF_T_CFLAGS = \n+\n # End of variables for you to override.\n \n # Definition of `all' is here so that new rules inserted by sed\n@@ -943,13 +946,13 @@ sublibobjc.a: cc1obj stmp-int-hdrs libgcc2.ready\n # Compile two additional files that are linked with every program\n # linked using GCC on system V, for the sake of C++ constructors.\n crtbegin.o:\tcrtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) -DCRT_BEGIN \\\n-\t  -finhibit-size-directive -fno-inline-functions \\\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \\\n+\t  -DCRT_BEGIN -finhibit-size-directive -fno-inline-functions \\\n \t  -g0 -c $(srcdir)/crtstuff.c -o crtbegin.o\n \n crtend.o:\tcrtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) -DCRT_END \\\n-\t  -finhibit-size-directive -fno-inline-functions \\\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \\\n+\t  -DCRT_END -finhibit-size-directive -fno-inline-functions \\\n \t  -g0 -c $(srcdir)/crtstuff.c -o crtend.o\n \f\n # Compiling object files from source files."}, {"sha": "e46b9fa6c7bc9a3ee5218fa0a01ddc27f48f8c5d", "filename": "gcc/collect2.c", "status": "modified", "additions": 554, "deletions": 11, "changes": 565, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -107,6 +107,7 @@ extern int sys_nerr;\n    cross-versions are in the proper directories.  */\n \n #ifdef CROSS_COMPILE\n+#undef SUNOS4_SHARED_LIBRARIES\n #undef OBJECT_FORMAT_COFF\n #undef OBJECT_FORMAT_ROSE\n #undef MD_EXEC_PREFIX\n@@ -188,6 +189,9 @@ extern int sys_nerr;\n #define SYMBOL__MAIN __main\n #endif\n \n+#if defined (LDD_SUFFIX) || defined (SUNOS4_SHARED_LIBRARIES)\n+#define SCAN_LIBRARIES\n+#endif\n \f\n /* Linked lists of constructor and destructor names. */\n \n@@ -209,6 +213,7 @@ struct head\n \n enum pass {\n   PASS_FIRST,\t\t\t\t/* without constructors */\n+  PASS_LIB,\t\t\t        /* looking for shared libraries */\n   PASS_SECOND\t\t\t\t/* with constructors linked in */\n };\n \n@@ -225,12 +230,15 @@ static int strip_flag;\t\t\t/* true if -s */\n \n static int debug;\t\t\t/* true if -debug */\n \n+static int shared_obj;\t\t        /* true if -shared */\n+\n static int   temp_filename_length;\t/* Length of temp_filename */\n static char *temp_filename;\t\t/* Base of temp filenames */\n static char *c_file;\t\t\t/* <xxx>.c for constructor/destructor list. */\n static char *o_file;\t\t\t/* <xxx>.o for constructor/destructor list. */\n static char *output_file;\t\t/* Output file for ld.  */\n static char *nm_file_name;\t\t/* pathname of nm */\n+static char *ldd_file_name;\t\t/* pathname of ldd (or equivalent) */\n static char *strip_file_name;\t\t/* pathname of strip */\n \n static struct head constructors;\t/* list of constructors found */\n@@ -272,6 +280,7 @@ static void write_list\t\tPROTO((FILE *, char *, struct id *));\n static void write_list_with_asm PROTO((FILE *, char *, struct id *));\n static void write_c_file\tPROTO((FILE *, char *));\n static void scan_prog_file\tPROTO((char *, enum pass));\n+static void scan_libraries\tPROTO((char *));\n \n generic *xcalloc ();\n generic *xmalloc ();\n@@ -467,6 +476,8 @@ is_ctor_dtor (s)\n     { \"GLOBAL_$I$\", sizeof (\"GLOBAL_$I$\")-1, 1, 0 },\n     { \"GLOBAL_$D$\", sizeof (\"GLOBAL_$D$\")-1, 2, 0 },\n #endif\n+    { \"GLOBAL__FI_\", sizeof (\"GLOBAL__FI_\")-1, 3, 0 },\n+    { \"GLOBAL__FD_\", sizeof (\"GLOBAL__FD_\")-1, 4, 0 },\n #ifdef CFRONT_LOSSAGE /* Don't collect cfront initialization functions.\n \t\t\t cfront has its own linker procedure to collect them;\n \t\t\t if collect2 gets them too, they get collected twice\n@@ -792,6 +803,10 @@ main (argc, argv)\n   char *full_nm_suffix\t= nm_suffix;\n   char *gnm_suffix\t= \"gnm\";\n   char *full_gnm_suffix\t= gnm_suffix;\n+#ifdef LDD_SUFFIX\n+  char *ldd_suffix\t= LDD_SUFFIX;\n+  char *full_ldd_suffix\t= ldd_suffix;\n+#endif\n   char *strip_suffix\t= \"strip\";\n   char *full_strip_suffix = strip_suffix;\n   char *gstrip_suffix\t= \"gstrip\";\n@@ -943,6 +958,14 @@ main (argc, argv)\n   strcat (full_gnm_suffix, \"-\");\n   strcat (full_gnm_suffix, gnm_suffix);\n \n+#ifdef LDD_SUFFIX\n+  full_ldd_suffix\n+    = xcalloc (strlen (ldd_suffix) + strlen (target_machine) + 2, 1);\n+  strcpy (full_ldd_suffix, target_machine);\n+  strcat (full_ldd_suffix, \"-\");\n+  strcat (full_ldd_suffix, ldd_suffix);\n+#endif\n+\n   full_strip_suffix\n     = xcalloc (strlen (strip_suffix) + strlen (target_machine) + 2, 1);\n   strcpy (full_strip_suffix, target_machine);\n@@ -1011,6 +1034,12 @@ main (argc, argv)\n   if (nm_file_name == 0)\n     nm_file_name = find_a_file (&path, full_nm_suffix);\n \n+#ifdef LDD_SUFFIX\n+  ldd_file_name = find_a_file (&cpath, ldd_suffix);\n+  if (ldd_file_name == 0)\n+    ldd_file_name = find_a_file (&path, full_ldd_suffix);\n+#endif\n+\n #ifdef REAL_STRIP_FILE_NAME\n   strip_file_name = find_a_file (&path, REAL_STRIP_FILE_NAME);\n   if (strip_file_name == 0)\n@@ -1088,6 +1117,17 @@ main (argc, argv)\n \t\t}\n \t      break;\n \n+\t    case 'l':\n+\t      if (first_file)\n+\t\t{\n+\t\t  /* place o_file BEFORE this argument! */\n+\t\t  first_file = 0;\n+\t\t  ld2--;\n+\t\t  *ld2++ = o_file;\n+\t\t  *ld2++ = arg;\n+\t\t}\n+\t      break;\n+\n \t    case 'o':\n \t      output_file = (arg[2] == '\\0') ? argv[1] : &arg[2];\n \t      break;\n@@ -1116,10 +1156,13 @@ main (argc, argv)\n \t}\n       else if (first_file\n \t       && (p = rindex (arg, '.')) != (char *)0\n-\t       && strcmp (p, \".o\") == 0)\n+\t       && (strcmp (p, \".o\") == 0 || strcmp (p, \".a\") == 0))\n \t{\n \t  first_file = 0;\n+\t  /* place o_file BEFORE this argument! */\n+\t  ld2--;\n \t  *ld2++ = o_file;\n+\t  *ld2++ = arg;\n \t}\n     }\n \n@@ -1132,11 +1175,24 @@ main (argc, argv)\n \twhile (*q && *q != ' ') q++;\n \tif (*p == '-' && (p[1] == 'm' || p[1] == 'f'))\n \t  *c_ptr++ = savestring (p, q - p);\n+\tif (strncmp (p, \"-shared\", sizeof (\"shared\") - 1) == 0)\n+\t  shared_obj = 1;\n \n \tif (*q) q++;\n \tp = q;\n       }\n \n+#ifdef LD_INIT_SWITCH\n+  /* Tell the linker that we have initializer and finalizer functions.  */\n+  if (shared_obj)\n+    {\n+      *ld2++ = LD_INIT_SWITCH;\n+      *ld2++ = \"_GLOBAL__DI\";\n+      *ld2++ = LD_FINI_SWITCH;\n+      *ld2++ = \"_GLOBAL__DD\";\n+    }\n+#endif\n+\n   *c_ptr++ = c_file;\n   *c_ptr = *ld1 = *ld2 = (char *)0;\n \n@@ -1158,6 +1214,10 @@ main (argc, argv)\n \t       (c_file_name ? c_file_name : \"not found\"));\n       fprintf (stderr, \"nm_file_name        = %s\\n\",\n \t       (nm_file_name ? nm_file_name : \"not found\"));\n+#ifdef LDD_SUFFIX\n+      fprintf (stderr, \"ldd_file_name       = %s\\n\",\n+\t       (ldd_file_name ? ldd_file_name : \"not found\"));\n+#endif\n       fprintf (stderr, \"strip_file_name     = %s\\n\",\n \t       (strip_file_name ? strip_file_name : \"not found\"));\n       fprintf (stderr, \"c_file              = %s\\n\",\n@@ -1195,19 +1255,30 @@ main (argc, argv)\n \n   fork_execute (\"ld\", ld1_argv);\n \n-  /* If -r, don't build the constructor or destructor list, just return now.  */\n+  /* If -r, don't build the constructor or destructor list, just return now. */\n   if (rflag)\n     return 0;\n \n   scan_prog_file (output_file, PASS_FIRST);\n \n+#ifdef SCAN_LIBRARIES\n+  scan_libraries (output_file);\n+#endif\n+\n   if (debug)\n     {\n       fprintf (stderr, \"%d constructor(s) found\\n\", constructors.number);\n       fprintf (stderr, \"%d destructor(s)  found\\n\", destructors.number);\n     }\n \n-  if (constructors.number == 0 && destructors.number == 0)\n+  if (constructors.number == 0 && destructors.number == 0\n+#ifdef LDD_SUFFIX\n+      /* If we will be running these functions ourselves, we want to emit\n+\t stubs into the shared library so that we don't have to relink\n+\t dependent programs when we add static objects.  */\n+      && ! shared_obj\n+#endif\n+      )\n     {\n       /* Strip now if it was requested on the command line.  */\n       if (strip_flag)\n@@ -1429,10 +1500,107 @@ write_list_with_asm (stream, prefix, list)\n     }\n }\n \n+/* Write out the constructor and destructor tables statically (for a shared\n+   object), along with the functions to execute them.  */\n+\n+static void\n+write_c_file_stat (stream, name)\n+     FILE *stream;\n+     char *name;\n+{\n+  char *prefix, *p, *q;\n+  char *initname, *fininame;\n+\n+  /* Figure out name of output_file, stripping off .so version.  */\n+  p = rindex (output_file, '/');\n+  if (p == 0)\n+    p = (char *) output_file;\n+  else\n+    p++;\n+  q = p;\n+  while (q)\n+    {\n+      q = index (q,'.');\n+      if (q == 0)\n+\t{\n+\t  q = p + strlen (p);\n+\t  break;\n+\t}\n+      else\n+\t{\n+\t  if (strncmp (q, \".so\", 3) == 0)\n+\t    {\n+\t      q += 3;\n+\t      break;\n+\t    }\n+\t  else\n+\t    q++;\n+\t}\n+    }\n+  /* q points to null at end of the string (or . of the .so version) */\n+  prefix = xmalloc (q - p + 1);\n+  strncpy (prefix, p, q - p);\n+  prefix[q - p] = 0;\n+  for (q = prefix; *q; q++)\n+    if (!isalnum (*q))\n+      *q = '_';\n+  if (debug)\n+    fprintf (stderr, \"\\nwrite_c_file - output name is %s, prefix is %s\\n\",\n+\t     output_file, prefix);\n+\n+#define INIT_NAME_FORMAT \"_GLOBAL__FI_%s\"\n+  initname = xmalloc (strlen (prefix) + sizeof (INIT_NAME_FORMAT) - 2);\n+  sprintf (initname, INIT_NAME_FORMAT, prefix);\n+\n+#define FINI_NAME_FORMAT \"_GLOBAL__FD_%s\"\n+  fininame = xmalloc (strlen (prefix) + sizeof (FINI_NAME_FORMAT) - 2);\n+  sprintf (fininame, FINI_NAME_FORMAT, prefix);\n+\n+  free (prefix);\n+\n+  /* Write the tables as C code  */\n+\n+  fprintf (stream, \"static int count;\\n\");\n+  fprintf (stream, \"typedef void entry_pt();\\n\");\n+  write_list_with_asm (stream, \"extern entry_pt \", constructors.first);\n+  fprintf (stream, \"void %s() {\\n\", initname);\n+  if (constructors.number > 0)\n+    {\n+      fprintf (stream, \"\\tstatic entry_pt *ctors[] = {\\n\");\n+      write_list (stream, \"\\t\\t\", constructors.first);\n+      fprintf (stream, \"\\t};\\n\");\n+      fprintf (stream, \"\\tentry_pt **p;\\n\");\n+      fprintf (stream, \"\\tif (count++ != 0) return;\\n\");\n+      fprintf (stream, \"\\tp = ctors + %d;\\n\", constructors.number);\n+      fprintf (stream, \"\\twhile (p > ctors) (*--p)();\\n\");\n+    }\n+  fprintf (stream, \"}\\n\");\n+  write_list_with_asm (stream, \"extern entry_pt \", destructors.first);\n+  fprintf (stream, \"void %s() {\\n\", fininame);\n+  if (destructors.number > 0)\n+    {\n+      fprintf (stream, \"\\tstatic entry_pt *dtors[] = {\\n\");\n+      write_list (stream, \"\\t\\t\", destructors.first);\n+      fprintf (stream, \"\\t};\\n\");\n+      fprintf (stream, \"\\tentry_pt **p;\\n\");\n+      fprintf (stream, \"\\tif (--count != 0) return;\\n\");\n+      fprintf (stream, \"\\tp = dtors;\\n\");\n+      fprintf (stream, \"\\twhile (p < dtors + %d) (*p++)();\\n\",\n+\t       destructors.number);\n+    }\n+  fprintf (stream, \"}\\n\");\n+\n+  fprintf (stream, \"void _GLOBAL__DI() {\\n\\t%s();\\n}\\n\", initname);\n+  fprintf (stream, \"void _GLOBAL__DD() {\\n\\t%s();\\n}\\n\", fininame);\n+\n+  free (initname);\n+  free (fininame);\n+}\n+\n /* Write the constructor/destructor tables. */\n \n static void\n-write_c_file (stream, name)\n+write_c_file_glob (stream, name)\n      FILE *stream;\n      char *name;\n {\n@@ -1458,6 +1626,16 @@ write_c_file (stream, name)\n   fprintf (stream, \"entry_pt *__main_reference = %s;\\n\\n\", NAME__MAIN);\n }\n \n+static void\n+write_c_file (stream, name)\n+     FILE *stream;\n+     char *name;\n+{\n+  if (shared_obj)\n+    write_c_file_stat (stream, name);\n+  else\n+    write_c_file_glob (stream, name);\n+}\n \f\n #ifdef OBJECT_FORMAT_NONE\n \n@@ -1484,14 +1662,14 @@ scan_prog_file (prog_name, which_pass)\n   char *p, buf[1024];\n   FILE *inf;\n \n-  if (which_pass != PASS_FIRST)\n+  if (which_pass == PASS_SECOND)\n     return;\n \n   /* If we don't have an `nm', complain.  */\n   if (nm_file_name == 0)\n     fatal (\"cannot find `nm'\");\n \n-  nm_argv[argc++] = \"nm\";\n+  nm_argv[argc++] = nm_file_name;\n   if (NM_FLAGS[0] != '\\0')\n     nm_argv[argc++] = NM_FLAGS;\n \n@@ -1511,8 +1689,7 @@ scan_prog_file (prog_name, which_pass)\n       char **p_argv;\n       char *str;\n \n-      fprintf (stderr, \"%s\", nm_file_name);\n-      for (p_argv = &nm_argv[1]; (str = *p_argv) != (char *)0; p_argv++)\n+      for (p_argv = &nm_argv[0]; (str = *p_argv) != (char *)0; p_argv++)\n \tfprintf (stderr, \" %s\", str);\n \n       fprintf (stderr, \"\\n\");\n@@ -1570,9 +1747,10 @@ scan_prog_file (prog_name, which_pass)\n \t to the appropriate list. */\n \n       for (p = buf; (ch = *p) != '\\0' && ch != '\\n' && ch != '_'; p++)\n-\t;\n+\tif (ch == ' ' && p[1] == 'U' && p[2] == ' ')\n+\t  break;\n \n-      if (ch == '\\0' || ch == '\\n')\n+      if (ch != '_')\n \tcontinue;\n   \n       name = p;\n@@ -1587,10 +1765,24 @@ scan_prog_file (prog_name, which_pass)\n       switch (is_ctor_dtor (name))\n \t{\n \tcase 1:\n-\t  add_to_list (&constructors, name);\n+\t  if (which_pass != PASS_LIB)\n+\t    add_to_list (&constructors, name);\n \t  break;\n \n \tcase 2:\n+\t  if (which_pass != PASS_LIB)\n+\t    add_to_list (&destructors, name);\n+\t  break;\n+\n+\tcase 3:\n+\t  if (which_pass != PASS_LIB)\n+\t    fatal (\"init function found in object %s\", prog_name);\n+\t  add_to_list (&constructors, name);\n+\t  break;\n+\n+\tcase 4:\n+\t  if (which_pass != PASS_LIB)\n+\t    fatal (\"init function found in object %s\", prog_name);\n \t  add_to_list (&destructors, name);\n \t  break;\n \n@@ -1616,6 +1808,357 @@ scan_prog_file (prog_name, which_pass)\n #endif\n }\n \n+#ifdef SUNOS4_SHARED_LIBRARIES\n+\n+/* Routines to scan the SunOS 4 _DYNAMIC structure to find shared libraries\n+   that the output file depends upon and their initialization/finalization\n+   routines, if any.  */\n+\n+#include <a.out.h>\n+#include <fcntl.h>\n+#include <link.h>\n+#include <sys/mman.h>\n+#include <sys/param.h>\n+#include <sys/unistd.h>\n+\n+/* pointers to the object file */\n+unsigned object;    \t/* address of memory mapped file */\n+unsigned objsize;    \t/* size of memory mapped to file */\n+char * code;\t\t/* pointer to code segment */\n+char * data;\t\t/* pointer to data segment */\n+struct nlist *symtab;\t/* pointer to symbol table */\n+struct link_dynamic *ld;\n+struct link_dynamic_2 *ld_2;\n+struct head libraries;\n+\n+/* Map the file indicated by NAME into memory and store its address.  */\n+\n+static void\n+mapfile (name)\n+     char *name;\n+{\n+  int fp;\n+  struct stat s;\n+  if ((fp = open (name, O_RDONLY)) == -1)\n+    fatal (\"unable to open file '%s'\", name);\n+  if (fstat (fp, &s) == -1)\n+    fatal (\"unable to stat file '%s'\", name);\n+\n+  objsize = s.st_size;\n+  object = (unsigned) mmap (0, objsize, PROT_READ|PROT_WRITE, MAP_PRIVATE,\n+\t\t\t    fp, 0);\n+  if (object == -1)\n+    fatal (\"unable to mmap file '%s'\", name);\n+\n+  close (fp);\n+}\n+\n+/* Given the name NAME of a dynamic dependency, find its pathname and add\n+   it to the list of libraries.  */\n+\n+static void\n+locatelib (name)\n+     char *name;\n+{\n+  static char **l;\n+  static int cnt;\n+  char buf[MAXPATHLEN];\n+  char *p, *q;\n+  char **pp;\n+\n+  if (l == 0)\n+    {\n+      char *ld_rules;\n+      char *ldr = 0;\n+      /* counting elements in array, need 1 extra for null */\n+      cnt = 1;  \n+      ld_rules = (char *) (ld_2->ld_rules + code);\n+      if (ld_rules)\n+\t{\n+\t  cnt++;\n+\t  for (; *ld_rules != 0; ld_rules++)\n+\t    if (*ld_rules == ':')\n+\t      cnt++;\n+\t  ld_rules = (char *) (ld_2->ld_rules + code);\n+\t  ldr = (char *) malloc (strlen (ld_rules) + 1);\n+\t  strcpy (ldr, ld_rules);\n+\t}\n+      p = getenv (\"LD_LIBRARY_PATH\");\n+      q = 0;\n+      if (p)\n+\t{\n+\t  cnt++;\n+\t  for (q = p ; *q != 0; q++)\n+\t    if (*q == ':')\n+\t      cnt++;\n+\t  q = (char *) malloc (strlen (p) + 1);\n+\t  strcpy (q, p);\n+\t}\n+      l = (char **) malloc ((cnt + 3) * sizeof (char *));\n+      pp = l;\n+      if (ldr)\n+\t{\n+\t  *pp++ = ldr;\n+\t  for (; *ldr != 0; ldr++) \n+\t    if (*ldr == ':')\n+\t      {\n+\t\t*ldr++ = 0;\n+\t\t*pp++ = ldr;\n+\t      }\n+\t}\n+      if (q)\n+\t{\n+\t  *pp++ = q;\n+\t  for (; *q != 0; q++) \n+\t    if (*q == ':')\n+\t      {\n+\t\t*q++ = 0;\n+\t\t*pp++ = p;\n+\t      }\n+\t}\n+      /* built in directories are /lib, /usr/lib, and /usr/local/lib */\n+      *pp++ = \"/lib\";\n+      *pp++ = \"/usr/lib\";\n+      *pp++ = \"/usr/local/lib\";\n+      *pp = 0;\n+    }\n+  for (pp = l; *pp != 0 ; pp++)\n+    {\n+      sprintf (buf, \"%s/%s\", *pp, name);\n+      if (access (buf, R_OK) == 0)\n+\t{\n+\t  add_to_list (&libraries, buf);\n+\t  if (debug)\n+\t    fprintf (stderr, \"%s\\n\", buf);\n+\t  break;\n+\t}\n+    }\n+  if (*pp == 0)\n+    {\n+      if (debug)\n+\tfprintf (stderr, \"not found\\n\");\n+      else\n+\tfatal (\"dynamic dependency %s not found\", name);\n+    }\n+}\n+\n+/* Scan the _DYNAMIC structure of the output file to find shared libraries\n+   that it depends upon and any constructors or destructors they contain.  */\n+\n+static void \n+scan_libraries (prog_name)\n+     char *prog_name;\n+{\n+  struct exec *header;\n+  char *base;\n+  struct link_object *lo;\n+  char buff[MAXPATHLEN];\n+  struct id *list;\n+\n+  mapfile (prog_name);\n+  header = (struct exec *)object;\n+  if (N_BADMAG (*header))\n+    fatal (\"bad magic number in file '%s'\", prog_name);\n+  if (header->a_dynamic == 0)\n+    return;\n+\n+  code = (char *) (N_TXTOFF (*header) + (long) header);\n+  data = (char *) (N_DATOFF (*header) + (long) header);\n+  symtab = (struct nlist *) (N_SYMOFF (*header) + (long) header);\n+\n+  if (header->a_magic == ZMAGIC && header->a_entry == 0x20)\n+    {\n+      /* shared object */\n+      ld = (struct link_dynamic *) (symtab->n_value + code);\n+      base = code;\n+    }\n+  else\n+    {\n+      /* executable */\n+      ld = (struct link_dynamic *) data;\n+      base = code-PAGSIZ;\n+    }\n+\n+  if (debug)\n+    fprintf (stderr, \"dynamic dependencies.\\n\");\n+\n+  ld_2 = (struct link_dynamic_2 *) ((long) ld->ld_un.ld_2 + (long)base);\n+  for (lo = (struct link_object *) ld_2->ld_need; lo;\n+       lo = (struct link_object *) lo->lo_next)\n+    {\n+      char *name;\n+      lo = (struct link_object *) ((long) lo + code);\n+      name = (char *) (code + lo->lo_name);\n+      if (lo->lo_library)\n+\t{\n+\t  if (debug)\n+\t    fprintf (stderr, \"\\t-l%s.%d => \", name, lo->lo_major);\n+\t  sprintf (buff, \"lib%s.so.%d.%d\", name, lo->lo_major, lo->lo_minor);\n+\t  locatelib (buff);\n+\t}\n+      else\n+\t{\n+\t  if (debug)\n+\t    fprintf (stderr, \"\\t%s\\n\", name);\n+\t  add_to_list (&libraries, name);\n+\t}\n+    }\n+\n+  if (debug)\n+    fprintf (stderr, \"\\n\");\n+\n+  /* now iterate through the library list adding their symbols to\n+     the list.  */\n+  for (list = libraries.first; list; list = list->next)\n+    scan_prog_file (list->name, PASS_LIB);\n+}\n+\n+#else  /* SUNOS4_SHARED_LIBRARIES */\n+#ifdef LDD_SUFFIX\n+\n+/* Use the List Dynamic Dependencies program to find shared libraries that\n+   the output file depends upon and their initialization/finalization\n+   routines, if any.  */\n+\n+static void \n+scan_libraries (prog_name)\n+     char *prog_name;\n+{\n+  static struct head libraries;\t\t/* list of shared libraries found */\n+  struct id *list;\n+  void (*int_handler) ();\n+  void (*quit_handler) ();\n+  char *ldd_argv[4];\n+  int pid;\n+  int argc = 0;\n+  int pipe_fd[2];\n+  char buf[1024];\n+  FILE *inf;\n+\n+  /* If we don't have an `ldd', complain.  */\n+  if (ldd_file_name == 0)\n+    {\n+      error (\"cannot find `ldd'\");\n+      return;\n+    }\n+\n+  ldd_argv[argc++] = ldd_file_name;\n+  ldd_argv[argc++] = prog_name;\n+  ldd_argv[argc++] = (char *) 0;\n+\n+  if (pipe (pipe_fd) < 0)\n+    fatal_perror (\"pipe\");\n+\n+  inf = fdopen (pipe_fd[0], \"r\");\n+  if (inf == (FILE *) 0)\n+    fatal_perror (\"fdopen\");\n+\n+  /* Trace if needed.  */\n+  if (vflag)\n+    {\n+      char **p_argv;\n+      char *str;\n+\n+      for (p_argv = &ldd_argv[0]; (str = *p_argv) != (char *) 0; p_argv++)\n+\tfprintf (stderr, \" %s\", str);\n+\n+      fprintf (stderr, \"\\n\");\n+    }\n+\n+  fflush (stdout);\n+  fflush (stderr);\n+\n+  /* Spawn child ldd on pipe */\n+  pid = vfork ();\n+  if (pid == -1)\n+    {\n+#ifdef vfork\n+      fatal_perror (\"fork\");\n+#else\n+      fatal_perror (\"vfork\");\n+#endif\n+    }\n+\n+  if (pid == 0)\t\t\t/* child context */\n+    {\n+      /* setup stdout */\n+      if (dup2 (pipe_fd[1], 1) < 0)\n+\tfatal_perror (\"dup2 (%d, 1)\", pipe_fd[1]);\n+\n+      if (close (pipe_fd[0]) < 0)\n+\tfatal_perror (\"close (%d)\", pipe_fd[0]);\n+\n+      if (close (pipe_fd[1]) < 0)\n+\tfatal_perror (\"close (%d)\", pipe_fd[1]);\n+\n+      execv (ldd_file_name, ldd_argv);\n+      fatal_perror (\"executing %s\", ldd_file_name);\n+    }\n+\n+  /* Parent context from here on.  */\n+  int_handler  = (void (*) ()) signal (SIGINT,  SIG_IGN);\n+#ifdef SIGQUIT\n+  quit_handler = (void (*) ()) signal (SIGQUIT, SIG_IGN);\n+#endif\n+\n+  if (close (pipe_fd[1]) < 0)\n+    fatal_perror (\"close (%d)\", pipe_fd[1]);\n+\n+  if (debug)\n+    fprintf (stderr, \"\\nldd output with constructors/destructors.\\n\");\n+\n+  /* Read each line of ldd output.  */\n+  while (fgets (buf, sizeof buf, inf) != (char *) 0)\n+    {\n+      int ch, ch2;\n+      char *name, *end, *p = buf;\n+\n+      /* Extract names of libraries and add to list. */\n+      PARSE_LDD_OUTPUT (p);\n+      if (p == 0)\n+\tcontinue;\n+\n+      name = p;\n+      if (strncmp (name, \"not found\", sizeof (\"not found\") - 1) == 0)\n+\tfatal (\"dynamic dependency %s not found\", buf);\n+\n+      /* Find the end of the symbol name. */\n+      for (end = p; \n+\t   (ch2 = *end) != '\\0' && ch2 != '\\n' && !isspace (ch2) && ch2 != '|';\n+\t   end++)\n+\tcontinue;\n+      *end = '\\0';\n+\n+      if (access (name, R_OK) == 0)\n+        add_to_list (&libraries, name);\n+      else\n+\tfatal (\"unable to open dynamic dependency '%s'\", buf);\n+\n+      if (debug)\n+\tfprintf (stderr, \"\\t%s\\n\", buf);\n+    }\n+  if (debug)\n+    fprintf (stderr, \"\\n\");\n+\n+  if (fclose (inf) != 0)\n+    fatal_perror (\"fclose of pipe\");\n+\n+  do_wait (ldd_file_name);\n+\n+  signal (SIGINT,  int_handler);\n+#ifdef SIGQUIT\n+  signal (SIGQUIT, quit_handler);\n+#endif\n+\n+  /* now iterate through the library list adding their symbols to\n+     the list.  */\n+  for (list = libraries.first; list; list = list->next)\n+    scan_prog_file (list->name, PASS_LIB);\n+}\n+\n+#endif /* LDD_SUFFIX */\n+#endif /* SUNOS4_SHARED_LIBRARIES */\n+\n #endif /* OBJECT_FORMAT_NONE */\n \n \f"}, {"sha": "a7d339b119cfca96762d67073336c9eb073aaf9b", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -2019,5 +2019,8 @@ do {\t\t\t\t\t\t\t\\\n \n /* The linker will stick __main into the .init section.  */\n #define HAS_INIT_SECTION\n-#define INIT_NAME_FORMAT \"__init_%s\"\n-#define FINI_NAME_FORMAT \"__fini_%s\"\n+#define LD_INIT_SWITCH \"-init\"\n+#define LD_FINI_SWITCH \"-fini\"\n+\n+/* We do want to link in libgcc when building shared libraries under OSF/1.  */\n+#define LIBGCC_SPEC \"-lgcc\""}, {"sha": "90deb5c2aab587ce54bd3757c9ea58fe49841acf", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -31,6 +31,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    it knows what it is doing. */\n \n #define FORCE_INIT_SECTION_ALIGN do { asm (ALIGN_ASM_OP ## \" 16\"); } while (0)\n+#define FORCE_FINI_SECTION_ALIGN FORCE_INIT_SECTION_ALIGN\n \n /* Add \"sun\" to the list of symbols defined for SVR4.  */\n #undef CPP_PREDEFINES\n@@ -44,19 +45,19 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #undef LIB_SPEC\n #define LIB_SPEC \\\n-  \"%{compat-bsd:-lucb -lsocket -lnsl -lelf -laio} \\\n-   %{!shared:%{!symbolic:-lc}} \\\n-   crtend.o%s \\\n-   %{!shared:%{!symbolic:%{pg:crtn.o%s}%{!pg:crtn.o%s}}}\"\n+  \"%{compat-bsd:-lucb -lsocket -lnsl -lelf -laio} %{!shared:%{!symbolic:-lc}}\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s %{pg:crtn.o%s}%{!pg:crtn.o%s}\"\n \n /* This should be the same as in svr4.h, except with -R added.  */\n #undef LINK_SPEC\n #define LINK_SPEC \\\n   \"%{h*} %{V} %{v:%{!V:-V}} \\\n    %{b} %{Wl,*:%*} \\\n    %{static:-dn -Bstatic} \\\n-   %{shared:-G -dy} \\\n-   %{symbolic:-Bsymbolic -G -dy} \\\n+   %{shared:-G -dy -z text} \\\n+   %{symbolic:-Bsymbolic -G -dy -z text} \\\n    %{G:-G} \\\n    %{YP,*} \\\n    %{R*} \\"}, {"sha": "eddad5d535e4079513a31f1ab4c6842f0685aca3", "filename": "gcc/config/i386/t-sol2", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fi386%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fi386%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-sol2?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -22,3 +22,11 @@ crti.o: $(srcdir)/config/i386/sol2-ci.asm\n crtn.o: $(srcdir)/config/i386/sol2-cn.asm\n \tsed -e '/^!/d' <$(srcdir)/config/i386/sol2-cn.asm >crtn.s\n \t$(AS) -o crtn.o crtn.s\n+\n+# We need to use -fpic when we are using gcc to compile the routines in\n+# crtstuff.c.  This is only really needed when we are going to use gcc/g++\n+# to produce a shared library, but since we don't know ahead of time when\n+# we will be doing that, we just always use -fpic when compiling the\n+# routines in crtstuff.c.\n+\n+CRTSTUFF_T_CFLAGS = -fpic"}, {"sha": "189c20b55834fa4ddd150976ede4baf9f0751993", "filename": "gcc/config/i860/sysv4.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fi860%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fi860%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv4.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -148,10 +148,25 @@ extern char *current_function_original_name;\n \tfprintf (FILE, \":\\n\");\t\t\t\t\t\t\\\n   } while (0)\n \n+/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n+ \n+   Note that we want to give these sections the SHF_WRITE attribute\n+   because these sections will actually contain data (i.e. tables of\n+   addresses of functions in the current root executable or shared library\n+   file) and, in the case of a shared library, the relocatable addresses\n+   will have to be properly resolved/relocated (and then written into) by\n+   the dynamic linker when it actually attaches the given shared library\n+   to the executing process.  (Note that on SVR4, you may wish to use the\n+   `-z text' option to the ELF linker, when building a shared library, as\n+   an additional check that you are doing everything right.  But if you do\n+   use the `-z text' option when building a shared library, you will get\n+   errors unless the .ctors and .dtors sections are marked as writable\n+   via the SHF_WRITE attribute.)  */\n+ \n #undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"a\\\",\\\"progbits\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n #undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"a\\\",\\\"progbits\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n \n /* Add definitions to support the .tdesc section as specified in the svr4\n    ABI for the i860.  */"}, {"sha": "8cc0080bec69413b31f81d0ed3c4e944bd2c9535", "filename": "gcc/config/m88k/dgux.h", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fm88k%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fm88k%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fdgux.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -31,7 +31,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   (TARGET_SVR4 ? DWARF_DEBUG : SDB_DEBUG)\n \n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.14 $\"\n+#define VERSION_INFO2   \"$Revision: 1.15 $\"\n #endif\n #ifndef NO_BUGS\n #define AS_BUG_IMMEDIATE_LABEL\n@@ -119,8 +119,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef\tLINK_SPEC\n #define LINK_SPEC \"%{z*} %{h*} %{V} %{v:%{!V:-V}} \\\n \t\t   %{static:-dn -Bstatic} \\\n-\t\t   %{shared:-G -dy} \\\n-\t\t   %{symbolic:-Bsymbolic -G -dy} \\\n+\t\t   %{shared:-G -dy -z text} \\\n+\t\t   %{symbolic:-Bsymbolic -G -dy -z text} \\\n \t\t   %{pg:-L/usr/lib/libp}%{p:-L/usr/lib/libp}\"\n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC \"%{!shared:%{!symbolic:%{pg:gcrt0.o%s} \\\n@@ -176,7 +176,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Override svr4.h and m88k.h except when compiling crtstuff.c.  These must\n    be constant strings when compiling crtstuff.c.  Otherwise, respect the\n    -mversion-STRING option used.  */\n-#undef INIT_SECTION_PREAMBLE\n #undef INIT_SECTION_ASM_OP\n #undef FINI_SECTION_ASM_OP\n #undef CTORS_SECTION_ASM_OP\n@@ -196,12 +195,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \t\t\t      ? \"section\\t .dtors,\\\"aw\\\"\"\t\\\n \t\t\t      : \"section\\t .dtors,\\\"d\\\"\")\n #else\n-/* These must be constant strings for crtstuff.c.  \n-   An elf and bcs crtbegin.o are needed since bcs does not  \n-   increment the stack pointer in the init section as elf does */\n-#ifndef BCS\n-#define INIT_SECTION_PREAMBLE asm (\"\\taddu\\tr31,r31,0x20\")  \n-#endif\n+/* These must be constant strings for crtstuff.c.  */\n #define INIT_SECTION_ASM_OP\t\"section\\t .init,\\\"x\\\"\"\n #define FINI_SECTION_ASM_OP\t\"section\\t .fini,\\\"x\\\"\"\n #define CTORS_SECTION_ASM_OP\t\"section\\t .ctors,\\\"d\\\"\""}, {"sha": "cb774a54cff491d359cfa6c8d878c6f7211cfd87", "filename": "gcc/config/m88k/sysv4.h", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fm88k%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fm88k%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fsysv4.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -60,7 +60,25 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Override svr4.h and m88k.h.  */\n #undef\tINIT_SECTION_ASM_OP\n #define INIT_SECTION_ASM_OP \"section\\t.init,\\\"xa\\\",#progbits\"\n+#undef\tFINI_SECTION_ASM_OP\n+#define FINI_SECTION_ASM_OP \"section\\t.fini,\\\"xa\\\",#progbits\"\n+\n+/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n+ \n+   Note that we want to give these sections the SHF_WRITE attribute\n+   because these sections will actually contain data (i.e. tables of\n+   addresses of functions in the current root executable or shared library\n+   file) and, in the case of a shared library, the relocatable addresses\n+   will have to be properly resolved/relocated (and then written into) by\n+   the dynamic linker when it actually attaches the given shared library\n+   to the executing process.  (Note that on SVR4, you may wish to use the\n+   `-z text' option to the ELF linker, when building a shared library, as\n+   an additional check that you are doing everything right.  But if you do\n+   use the `-z text' option when building a shared library, you will get\n+   errors unless the .ctors and .dtors sections are marked as writable\n+   via the SHF_WRITE attribute.)  */\n+ \n #undef\tCTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"section\\t.ctors,\\\"a\\\",#progbits\"\n+#define CTORS_SECTION_ASM_OP\t\"section\\t.ctors,\\\"aw\\\"\"\n #undef\tDTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"section\\t.dtors,\\\"a\\\",#progbits\"\n+#define DTORS_SECTION_ASM_OP\t\"section\\t.dtors,\\\"aw\\\"\""}, {"sha": "6a77edb5669f8df24b26b839bb76abb2bf7a2d1b", "filename": "gcc/config/m88k/t-sysv4", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fm88k%2Ft-sysv4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fm88k%2Ft-sysv4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-sysv4?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -12,3 +12,11 @@ $(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n LIB2FUNCS_EXTRA = $(MOVE_ASM)\n LIBGCC1 = libgcc1.null\n CROSS_LIBGCC1 = libgcc1.null\n+\n+# We need to use -fpic when we are using gcc to compile the routines in\n+# crtstuff.c.  This is only really needed when we are going to use gcc/g++\n+# to produce a shared library, but since we don't know ahead of time when\n+# we will be doing that, we just always use -fpic when compiling the\n+# routines in crtstuff.c.\n+\n+CRTSTUFF_T_CFLAGS=-fpic"}, {"sha": "e1c40b1f3bf74a967f6c3df7f4faad2d2c87e4f0", "filename": "gcc/config/mips/iris5.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fmips%2Firis5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fmips%2Firis5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -34,6 +34,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    options, but using this would require modifying how crtstuff works, and\n    I will leave that for another time (or someone else).  */\n #define OBJECT_FORMAT_ELF\n+#define HAS_INIT_SECTION\n+#define LD_INIT_SWITCH \"-init\"\n+#define LD_FINI_SWITCH \"-fini\"\n \n /* Specify wchar_t types.  */\n #undef\tWCHAR_TYPE\n@@ -82,12 +85,20 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n %{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} \\\n %{bestGnum} %{shared} %{non_shared} \\\n %{call_shared} %{no_archive} %{exact_version} \\\n-%{!shared: %{!non_shared: \\\n+%{!shared: -u __main -init __main %{!non_shared: \\\n \t   %{!call_shared: -call_shared -no_unresolved}}} \\\n -_SYSTYPE_SVR4\"\n \n+/* We now support shared libraries.  */\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared:%{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s libprof1.a%s}%{!p:crt1.o%s}}}\"\n+\n #undef LIB_SPEC\n-#define LIB_SPEC \"%{p:-lprof1} %{pg:-lprof1} -lc crtn.o%s\"\n+#define LIB_SPEC \"%{!shared:%{p:-lprof1} %{pg:-lprof1} -lc}\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"%{!shared:crtn.o%s}\"\n \n /* We do not want to run mips-tfile!  */\n #undef ASM_FINAL_SPEC"}, {"sha": "10fa503d6b01b61ae08339487c553f1790723813", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -36,13 +36,14 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define DEFAULT_GDB_EXTENSIONS 0\n \n /* Like the default, except no -lg.  */\n-#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}\"\n+#define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}}\"\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -DPWB -Dhpux -Dunix -D_HPUX_SOURCE -Asystem(unix) -Asystem(hpux) -Acpu(hppa) -Amachine(hppa)\"\n \n #undef LINK_SPEC\n-#define LINK_SPEC \"-u main %{static: -a archive}%{g*: -a archive}\"\n+#define LINK_SPEC \\\n+  \"%{!shared:-u main} %{static:-a archive} %{g*:-a archive} %{shared:-b}\"\n \n /* hpux8 and later have C++ compatable include files, so do not\n    pretend they are `extern \"C\"'.  */"}, {"sha": "0c9a217a8e8c462de98e99953a1890cca1c1a019", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -196,7 +196,7 @@ extern int target_flags;\n \n #define CC1_SPEC \"%{pg:} %{p:}\"\n \n-#define LINK_SPEC \"-u main\"\n+#define LINK_SPEC \"%{!shared:-u main} %{shared:-b}\"\n \n /* Allow $ in identifiers.  */\n #define DOLLARS_IN_IDENTIFIERS 2\n@@ -214,6 +214,22 @@ extern int target_flags;\n /* Names to predefine in the preprocessor for this target machine.  */\n \n #define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -Dunix -D_HPUX_SOURCE -Dhp9000 -Dhp800 -Dspectrum -DREVARGV -Asystem(unix) -Asystem(bsd) -Acpu(hppa) -Amachine(hppa)\"\n+\n+/* HPUX has a program 'chatr' to list the dependencies of dynamically\n+   linked executables and shared libraries.  */\n+#define LDD_SUFFIX \"chatr\"\n+/* look for lines like \"dynamic   /usr/lib/X11R5/libX11.sl\".  */\n+#define PARSE_LDD_OUTPUT(PTR)\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  while (*PTR == ' ') PTR++;\t\t\t\t\t\\\n+  if (strncmp (PTR, \"dynamic\", sizeof (\"dynamic\") - 1) == 0)\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      PTR += sizeof (\"dynamic\") - 1;\t\t\t\t\\\n+      while (*p == ' ') PTR++;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    PTR = 0;\t\t\t\t\t\t\t\\\n+} while (0)\n \f\n /* target machine storage layout */\n "}, {"sha": "0d05365ae4bd74813ce608a72bbc9e9357a8d72e", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -102,33 +102,33 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define STARTFILE_SPEC \"%{!shared: \\\n \t\t\t %{!symbolic: \\\n \t\t\t  %{pg:crt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}} \\\n-\t\t\t  %{pg:gmon.o%s} \\\n-\t\t\t  %{pg:crti.o%s}%{!pg:crti.o%s} \\\n-\t\t\t  %{ansi:/usr/ccs/lib/values-Xc.o%s} \\\n-\t\t\t  %{!ansi: \\\n-\t\t\t   %{traditional:/usr/ccs/lib/values-Xt.o%s} \\\n-\t\t\t   %{!traditional:/usr/ccs/lib/values-Xa.o%s}}}} \\\n-\t\t\t  crtbegin.o%s\"\n+\t\t\t  %{pg:gmon.o%s}}} \\\n+\t\t\t%{pg:crti.o%s}%{!pg:crti.o%s} \\\n+\t\t\t%{ansi:/usr/ccs/lib/values-Xc.o%s} \\\n+\t\t\t%{!ansi: \\\n+\t\t\t %{traditional:/usr/ccs/lib/values-Xt.o%s} \\\n+\t\t\t %{!traditional:/usr/ccs/lib/values-Xa.o%s}} \\\n+\t\t\tcrtbegin.o%s\"\n \n /* ??? Note: in order for -compat-bsd to work fully,\n    we must somehow arrange to fixincludes /usr/ucbinclude\n    and put the result in $(libsubdir)/ucbinclude.  */\n \n #undef LIB_SPEC\n #define LIB_SPEC \\\n-  \"%{compat-bsd:-lucb -lsocket -lnsl -lelf -laio} \\\n-   %{!shared:%{!symbolic:-lc}} \\\n-   crtend.o%s \\\n-   %{!shared:%{!symbolic:%{pg:crtn.o%s}%{!pg:crtn.o%s}}}\"\n+  \"%{compat-bsd:-lucb -lsocket -lnsl -lelf -laio} %{!shared:%{!symbolic:-lc}}\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s %{pg:crtn.o%s}%{!pg:crtn.o%s}\"\n \n /* This should be the same as in svr4.h, except with -R added.  */\n #undef LINK_SPEC\n #define LINK_SPEC \\\n   \"%{h*} %{V} %{v:%{!V:-V}} \\\n    %{b} %{Wl,*:%*} \\\n    %{static:-dn -Bstatic} \\\n-   %{shared:-G -dy} \\\n-   %{symbolic:-Bsymbolic -G -dy} \\\n+   %{shared:-G -dy -z text} \\\n+   %{symbolic:-Bsymbolic -G -dy -z text} \\\n    %{G:-G} \\\n    %{YP,*} \\\n    %{R*} \\"}, {"sha": "80bdec258359c9cdbd13b22d70a9ea7b633308f5", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -60,12 +60,13 @@ extern enum arch_type sparc_arch_type;\n    -Asystem(unix) -Asystem(bsd) -Acpu(sparc) -Amachine(sparc)\"\n #endif\n \n-#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} %{g:-lg}\"\n+#define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} %{g:-lg}}\"\n \n /* Provide required defaults for linker -e and -d switches.  */\n \n #define LINK_SPEC \\\n- \"%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{static:-Bstatic} %{assert*}\"\n+ \"%{!shared:%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp} %{static:-Bstatic} \\\n+  %{assert*} %{shared:-assert pure-text}\"\n \n /* Special flags to the Sun-4 assembler when using pipe for input.  */\n \n@@ -445,6 +446,15 @@ extern int target_flags;\n    Put them in the data section.  This macro is only used in this file.  */\n #define MAX_TEXT_ALIGN 32\n \n+/* This forces all variables and constants to the data section when PIC.\n+   This is because the SunOS 4 shared library scheme thinks everything in\n+   text is a function, and patches the address to point to a loader stub.  */\n+/* This is defined to zero for every system which doesn't use the a.out object\n+   file format.  */\n+#ifndef SUNOS4_SHARED_LIBRARIES\n+#define SUNOS4_SHARED_LIBRARIES 0\n+#endif\n+\n /* This is defined differently for v9 in a cover file.  */\n #define SELECT_SECTION(T,RELOC)\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -455,20 +465,21 @@ extern int target_flags;\n \t  && (DECL_INITIAL (T) == error_mark_node\t\t\t\\\n \t      || TREE_CONSTANT (DECL_INITIAL (T)))\t\t\t\\\n \t  && DECL_ALIGN (T) <= MAX_TEXT_ALIGN\t\t\t\t\\\n-\t  && ! (flag_pic && (RELOC)))\t\t\t\t\t\\\n+\t  && ! (flag_pic && ((RELOC) || SUNOS4_SHARED_LIBRARIES)))\t\\\n \ttext_section ();\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tdata_section ();\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else if (TREE_CODE (T) == CONSTRUCTOR)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (flag_pic != 0 && (RELOC) != 0)\t\t\t\t\\\n+      if (flag_pic && ((RELOC) || SUNOS4_SHARED_LIBRARIES))\t\t\\\n \tdata_section ();\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else if (*tree_code_type[(int) TREE_CODE (T)] == 'c')\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if ((TREE_CODE (T) == STRING_CST && flag_writable_strings)\t\\\n-\t  || TYPE_ALIGN (TREE_TYPE (T)) > MAX_TEXT_ALIGN)\t\t\\\n+\t  || TYPE_ALIGN (TREE_TYPE (T)) > MAX_TEXT_ALIGN\t\t\\\n+\t  || (flag_pic && ((RELOC) || SUNOS4_SHARED_LIBRARIES)))\t\\\n \tdata_section ();\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \ttext_section ();\t\t\t\t\t\t\\\n@@ -481,7 +492,7 @@ extern int target_flags;\n #define SELECT_RTX_SECTION(MODE, X)\t\t\\\n {\t\t\t\t\t\t\\\n   if (GET_MODE_BITSIZE (MODE) <= MAX_TEXT_ALIGN \\\n-      && ! (flag_pic && symbolic_operand (X)))  \\\n+      && ! (flag_pic && (symbolic_operand (X) || SUNOS4_SHARED_LIBRARIES)))  \\\n     text_section ();\t\t\t\t\\\n   else\t\t\t\t\t\t\\\n     data_section ();\t\t\t\t\\"}, {"sha": "5a0f7a42429a5ac1627eebb04a42bca72beb2d86", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -37,9 +37,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    appropriate only for typical svr4 systems, but not for the specific\n    case of svr4 running on a Sparc.  */\n \n-#undef CTORS_SECTION_ASM_OP\n-#undef DTORS_SECTION_ASM_OP\n #undef INIT_SECTION_ASM_OP\n+#undef FINI_SECTION_ASM_OP\n #undef CONST_SECTION_ASM_OP\n #undef TYPE_OPERAND_FMT\n #undef PUSHSECTION_FORMAT\n@@ -77,24 +76,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n     const_section ();\t\t\t\t\\\n }\n \n-/* The specialized code which needs to appear in the .init section prior\n-   to the prologue code for `__do_global_ctors' (see crtstuff.c).\n-\n-   On Sparcs running svr4, the /usr/ccs/lib/crti.o file (with gets linked\n-   in prior to the crtbegin.o file) has a single `save' instruction in its\n-   .init section.  That `save' instruction tries to setup a stack frame for\n-   the sake of any subsequent code in the .init section.  Unfortunately,\n-   the size it uses for the stack frame is only a guess, and is not really\n-   adequate for our purposes.  More importantly, we independently put our\n-   own standard function prologue (for __do_global_ctors) into the .init\n-   section and that function prologue includes its own `save' instruction!\n-   Thus, unless we do something to correct the situation, we'll get *two*\n-   stack frames allocated when crt0.o calls the code in the .init section,\n-   and havoc will ensue.  The following macro definition prevents such woes.\n-*/\n-\n-#define INIT_SECTION_PREAMBLE\tasm (\"restore\")\n-\n /* This is the string used to begin an assembly language comment for the\n    Sparc/svr4 assembler.  */\n \n@@ -172,8 +153,27 @@ do { ASM_OUTPUT_ALIGN ((FILE), Pmode == SImode ? 2 : 3);\t\t\\\n #define BSS_SECTION_ASM_OP\t\".section\\t\\\".bss\\\"\"\n #define CONST_SECTION_ASM_OP\t\".section\\t\\\".rodata\\\"\"\n #define INIT_SECTION_ASM_OP\t\".section\\t\\\".init\\\"\"\n-#define CTORS_SECTION_ASM_OP    \".section\\t\\\".ctors\\\",#alloc,#execinstr\"\n-#define DTORS_SECTION_ASM_OP    \".section\\t\\\".dtors\\\",#alloc,#execinstr\"\n+#define FINI_SECTION_ASM_OP\t\".section\\t\\\".fini\\\"\"\n+\n+/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n+ \n+   Note that we want to give these sections the SHF_WRITE attribute\n+   because these sections will actually contain data (i.e. tables of\n+   addresses of functions in the current root executable or shared library\n+   file) and, in the case of a shared library, the relocatable addresses\n+   will have to be properly resolved/relocated (and then written into) by\n+   the dynamic linker when it actually attaches the given shared library\n+   to the executing process.  (Note that on SVR4, you may wish to use the\n+   `-z text' option to the ELF linker, when building a shared library, as\n+   an additional check that you are doing everything right.  But if you do\n+   use the `-z text' option when building a shared library, you will get\n+   errors unless the .ctors and .dtors sections are marked as writable\n+   via the SHF_WRITE attribute.)  */\n+ \n+#undef CTORS_SECTION_ASM_OP\n+#define CTORS_SECTION_ASM_OP    \".section\\t\\\".ctors\\\",#alloc,#write\"\n+#undef DTORS_SECTION_ASM_OP\n+#define DTORS_SECTION_ASM_OP    \".section\\t\\\".dtors\\\",#alloc,#write\"\n \n /* A C statement to output something to the assembler file to switch to section\n    NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or"}, {"sha": "1160c879f860d6c89226e4e93a52d39055152ce1", "filename": "gcc/config/sparc/t-sol2", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fsparc%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fsparc%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sol2?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -16,3 +16,11 @@ crti.o: $(srcdir)/config/sparc/sol2-ci.asm\n \t$(AS) -o crti.o $(srcdir)/config/sparc/sol2-ci.asm\n crtn.o: $(srcdir)/config/sparc/sol2-cn.asm\n \t$(AS) -o crtn.o $(srcdir)/config/sparc/sol2-cn.asm\n+\n+# We need to use -fpic when we are using gcc to compile the routines in\n+# crtstuff.c.  This is only really needed when we are going to use gcc/g++\n+# to produce a shared library, but since we don't know ahead of time when\n+# we will be doing that, we just always use -fpic when compiling the\n+# routines in crtstuff.c.\n+\n+CRTSTUFF_T_CFLAGS = -fpic"}, {"sha": "5b4011609d7334127d746b2b538f680c2388c122", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -122,17 +122,25 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n #define MD_STARTFILE_PREFIX \"/usr/ccs/lib/\"\n \n /* Provide a LIB_SPEC appropriate for svr4.  Here we tack on the default\n-   standard C library (unless we are building a shared library) followed by\n-   our own magical crtend.o file (see crtstuff.c) which provides part of\n-   the support for getting C++ file-scope static object constructed before\n+   standard C library (unless we are building a shared library).  */\n+\n+#undef\tLIB_SPEC\n+#define LIB_SPEC \"%{!shared:%{!symbolic:-lc}}\"\n+\n+/* Provide a LIBGCC_SPEC appropriate for svr4.  We also want to exclude\n+   libgcc when -symbolic.  */\n+\n+#undef  LIBGCC_SPEC\n+#define LIBGCC_SPEC \"%{!shared:%{!symbolic:-lgcc}}\"\n+\n+/* Provide an ENDFILE_SPEC appropriate for svr4.  Here we tack on our own\n+   magical crtend.o file (see crtstuff.c) which provides part of the\n+   support for getting C++ file-scope static object constructed before\n    entering `main', followed by the normal svr3/svr4 \"finalizer\" file,\n    which is either `gcrtn.o' or `crtn.o'.  */\n \n-#undef\tLIB_SPEC\n-#define LIB_SPEC \\\n-  \"%{!shared:%{!symbolic:-lc}} \\\n-  crtend.o%s \\\n-  %{!shared:%{!symbolic:%{pg:gcrtn.o}%{!pg:crtn.o%s}}}\"\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s %{pg:gcrtn.o}%{!pg:crtn.o%s}\"\n \n /* Provide a LINK_SPEC appropriate for svr4.  Here we provide support\n    for the special GCC options -static, -shared, and -symbolic which\n@@ -161,8 +169,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n #define LINK_SPEC \"%{h*} %{V} %{v:%{!V:-V}} \\\n \t\t   %{b} %{Wl,*:%*} \\\n \t\t   %{static:-dn -Bstatic} \\\n-\t\t   %{shared:-G -dy} \\\n-\t\t   %{symbolic:-Bsymbolic -G -dy} \\\n+\t\t   %{shared:-G -dy -z text} \\\n+\t\t   %{symbolic:-Bsymbolic -G -dy -z text} \\\n \t\t   %{G:-G} \\\n \t\t   %{YP,*} \\\n \t\t   %{!YP,*:%{p:-Y P,/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n@@ -184,12 +192,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC \"%{!shared: \\\n \t\t\t %{!symbolic: \\\n-\t\t\t  %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}} \\\n-\t\t\t  %{pg:gcrti.o%s}%{!pg:crti.o%s} \\\n-\t\t\t  %{ansi:values-Xc.o%s} \\\n-\t\t\t  %{!ansi: \\\n-\t\t\t   %{traditional:values-Xt.o%s} \\\n-\t\t\t   %{!traditional:values-Xa.o%s}}}} crtbegin.o%s\"\n+\t\t\t  %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}}}\\\n+\t\t\t%{pg:gcrti.o%s}%{!pg:crti.o%s} \\\n+\t\t\t%{ansi:values-Xc.o%s} \\\n+\t\t\t%{!ansi: \\\n+\t\t\t %{traditional:values-Xt.o%s} \\\n+\t\t\t %{!traditional:values-Xa.o%s}} \\\n+ \t\t\tcrtbegin.o%s\"\n \n /* Attach a special .ident directive to the end of the file to identify\n    the version of GCC which compiled this code.  The format of the\n@@ -468,16 +477,33 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define USE_CONST_SECTION\t1\n \n #define CONST_SECTION_ASM_OP\t\".section\\t.rodata\"\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"a\\\",@progbits\"\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"a\\\",@progbits\"\n \n-/* On svr4, we *do* have support for the .init section, and we can put\n-   stuff in there to be executed before `main'.  We let crtstuff.c and\n-   other files know this by defining the following symbol.  The definition\n-   says how to change sections to the .init section.  This is the same\n-   for all know svr4 assemblers.  */\n+/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n+\n+   Note that we want to give these sections the SHF_WRITE attribute\n+   because these sections will actually contain data (i.e. tables of\n+   addresses of functions in the current root executable or shared library\n+   file) and, in the case of a shared library, the relocatable addresses\n+   will have to be properly resolved/relocated (and then written into) by\n+   the dynamic linker when it actually attaches the given shared library\n+   to the executing process.  (Note that on SVR4, you may wish to use the\n+   `-z text' option to the ELF linker, when building a shared library, as\n+   an additional check that you are doing everything right.  But if you do\n+   use the `-z text' option when building a shared library, you will get\n+   errors unless the .ctors and .dtors sections are marked as writable\n+   via the SHF_WRITE attribute.)  */\n+\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n+\n+/* On svr4, we *do* have support for the .init and .fini sections, and we\n+   can put stuff in there to be executed before and after `main'.  We let\n+   crtstuff.c and other files know this by defining the following symbols.\n+   The definitions say how to change sections to the .init and .fini\n+   sections.  This is the same for all known svr4 assemblers.  */\n \n #define INIT_SECTION_ASM_OP\t\".section\\t.init\"\n+#define FINI_SECTION_ASM_OP\t\".section\\t.fini\"\n \n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n@@ -844,3 +870,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n         fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n+\n+/* All SVR4 targets use the ELF object file format.  */\n+#define OBJECT_FORMAT_ELF"}, {"sha": "f060a9d2ec5808056813d691198675a206bf33ac", "filename": "gcc/config/t-svr4", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Ft-svr4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fconfig%2Ft-svr4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-svr4?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -2,3 +2,11 @@\n # end labels to the .ctors and .dtors section when we link using gcc.\n \n EXTRA_PARTS=crtbegin.o crtend.o\n+\n+# We need to use -fpic when we are using gcc to compile the routines in\n+# crtstuff.c.  This is only really needed when we are going to use gcc/g++\n+# to produce a shared library, but since we don't know ahead of time when\n+# we will be doing that, we just always use -fpic when compiling the\n+# routines in crtstuff.c.\n+\n+CRTSTUFF_T_CFLAGS = -fpic"}, {"sha": "bf1ddb48259a2b82516951cd9f85f1f628c3e24c", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 137, "deletions": 26, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -54,23 +54,89 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #include \"tm.h\"\n \n+/* Provide default definitions for the pseudo-ops used to switch to the\n+   .ctors and .dtors sections.\n+ \n+   Note that we want to give these sections the SHF_WRITE attribute\n+   because these sections will actually contain data (i.e. tables of\n+   addresses of functions in the current root executable or shared library\n+   file) and, in the case of a shared library, the relocatable addresses\n+   will have to be properly resolved/relocated (and then written into) by\n+   the dynamic linker when it actually attaches the given shared library\n+   to the executing process.  (Note that on SVR4, you may wish to use the\n+   `-z text' option to the ELF linker, when building a shared library, as\n+   an additional check that you are doing everything right.  But if you do\n+   use the `-z text' option when building a shared library, you will get\n+   errors unless the .ctors and .dtors sections are marked as writable\n+   via the SHF_WRITE attribute.)  */\n+\n #ifndef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"a\\\",@progbits\"\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n #endif\n #ifndef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"a\\\",@progbits\"\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n #endif\n \n+#ifdef OBJECT_FORMAT_ELF\n+\n+/*  Declare a pointer to void function type.  */\n+typedef void (*func_ptr) (void);\n+#define STATIC static\n+\n+#else  /* OBJECT_FORMAT_ELF */\n+\n #include \"gbl-ctors.h\"\n \n #ifndef ON_EXIT\n #define ON_EXIT(a, b)\n #endif\n+#define STATIC\n+\n+#endif /* OBJECT_FORMAT_ELF */\n \n #ifdef CRT_BEGIN\n \n #ifdef INIT_SECTION_ASM_OP\n \n+#ifdef OBJECT_FORMAT_ELF\n+\n+/* Run all the global destructors on exit from the program.  */\n+ \n+/* Some systems place the number of pointers in the first word of the\n+   table.  On SVR4 however, that word is -1.  In all cases, the table is\n+   null-terminated.  On SVR4, we start from the beginning of the list and\n+   invoke each per-compilation-unit destructor routine in order\n+   until we find that null.\n+\n+   Note that this function MUST be static.  There will be one of these\n+   functions in each root executable and one in each shared library, but\n+   although they all have the same code, each one is unique in that it\n+   refers to one particular associated `__DTOR_LIST__' which belongs to the\n+   same particular root executable or shared library file.  */\n+\n+static func_ptr __DTOR_LIST__[];\n+static void\n+__do_global_dtors_aux ()\n+{\n+  func_ptr *p;\n+  for (p = __DTOR_LIST__ + 1; *p; p++)\n+    (*p) ();\n+}\n+\n+/* Stick a call to __do_global_dtors_aux into the .fini section.  */\n+static void\n+fini_dummy ()\n+{\n+  asm (FINI_SECTION_ASM_OP);\n+  __do_global_dtors_aux ();\n+#ifdef FORCE_FINI_SECTION_ALIGN\n+  FORCE_FINI_SECTION_ALIGN;\n+#endif\n+  asm (TEXT_SECTION_ASM_OP);\n+}\n+\n+#else  /* OBJECT_FORMAT_ELF */\n+\n /* The function __do_global_ctors_aux is compiled twice (once in crtbegin.o\n    and once in crtend.o).  It must be declared static to avoid a link\n    error.  Here, we define __do_global_ctors as an externally callable\n@@ -92,16 +158,6 @@ void __do_global_ctors ()\n \n asm (INIT_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n \n-/* On some svr4 systems, the .init section preamble code provided in\n-   crti.o may do some evil things which we have to undo before we reach\n-   the function prologue code for __do_global_ctors (directly below).\n-   For such systems, define the macro INIT_SECTION_PREAMBLE to\n-   expand into the code needed to undo the actions of the crti.o file.  */\n-   \n-#ifdef INIT_SECTION_PREAMBLE\n-  INIT_SECTION_PREAMBLE;\n-#endif\n-\n /* A routine to invoke all of the global constructors upon entry to the\n    program.  We put this into the .init section (for systems that have\n    such a thing) so that we can properly perform the construction of\n@@ -118,25 +174,38 @@ __do_global_ctors_aux ()\t/* prologue goes in .init section */\n   ON_EXIT (__do_global_dtors, 0);\n }\n \n+#endif /* OBJECT_FORMAT_ELF */\n #endif /* defined(INIT_SECTION_ASM_OP) */\n \n /* Force cc1 to switch to .data section.  */\n static func_ptr force_to_data[0] = { };\n \n+/* NOTE:  In order to be able to support SVR4 shared libraries, we arrange\n+   to have one set of symbols { __CTOR_LIST__, __DTOR_LIST__, __CTOR_END__,\n+   __DTOR_END__ } per root executable and also one set of these symbols\n+   per shared library.  So in any given whole process image, we may have\n+   multiple definitions of each of these symbols.  In order to prevent\n+   these definitions from conflicting with one another, and in order to\n+   ensure that the proper lists are used for the initialization/finalization\n+   of each individual shared library (respectively), we give these symbols\n+   only internal (i.e. `static') linkage, and we also make it a point to\n+   refer to only the __CTOR_END__ symbol in crtend.o and the __DTOR_LIST__\n+   symbol in crtbegin.o, where they are defined.  */\n+\n /* The -1 is a flag to __do_global_[cd]tors\n    indicating that this table does not start with a count of elements.  */\n #ifdef CTOR_LIST_BEGIN\n CTOR_LIST_BEGIN;\n #else\n asm (CTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n-func_ptr __CTOR_LIST__[1] = { (func_ptr) (-1) };\n+STATIC func_ptr __CTOR_LIST__[1] = { (func_ptr) (-1) };\n #endif\n \n #ifdef DTOR_LIST_BEGIN\n DTOR_LIST_BEGIN;\n #else\n asm (DTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n-func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };\n+STATIC func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };\n #endif\n \n #endif /* defined(CRT_BEGIN) */\n@@ -145,17 +214,51 @@ func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };\n \n #ifdef INIT_SECTION_ASM_OP\n \n-/* A routine to invoke all of the global constructors upon entry to the\n-   program.  We put this into the .init section (for systems that have\n-   such a thing) so that we can properly perform the construction of\n-   file-scope static-storage C++ objects within shared libraries.\n+#ifdef OBJECT_FORMAT_ELF\n \n-   This must be virtually identical to the one above so that we can\n-   insure that the function prologue from the one above works correctly\n-   with the epilogue from this one.  (They will both go into the .init\n-   section as the first and last things (respectively) that the linker\n-   will put in that section.)\n-*/\n+static func_ptr __CTOR_END__[];\n+static void\n+__do_global_ctors_aux ()\n+{\n+  func_ptr *p;\n+  for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)\n+    (*p) ();\n+}\n+\n+/* Stick a call to __do_global_ctors_aux into the .init section.  */\n+static void\n+init_dummy ()\n+{\n+  asm (INIT_SECTION_ASM_OP);\n+  __do_global_ctors_aux ();\n+#ifdef FORCE_INIT_SECTION_ALIGN\n+  FORCE_INIT_SECTION_ALIGN;\n+#endif\n+  asm (TEXT_SECTION_ASM_OP);\n+}\n+\n+#else  /* OBJECT_FORMAT_ELF */\n+\n+/* Stick the real initialization code, followed by a normal sort of\n+   function epilogue at the very end of the .init section for this\n+   entire root executable file or for this entire shared library file.\n+\n+   Note that we use some tricks here to get *just* the body and just\n+   a function epilogue (but no function prologue) into the .init\n+   section of the crtend.o file.  Sepcifically, we switch to the .text\n+   section, start to define a function, and then we switch to the .init\n+   section just before the body code.\n+\n+   Earlier on, we put the corresponding function prologue into the .init\n+   section of the crtbegin.o file (which will be linked in first).\n+\n+   Note that we want to invoke all constructors for C++ file-scope static-\n+   storage objects AFTER any other possible initialization actions which\n+   may be performed by the code in the .init section contributions made by\n+   other libraries, etc.  That's because those other initializations may\n+   include setup operations for very primitive things (e.g. initializing\n+   the state of the floating-point coprocessor, etc.) which should be done\n+   before we start to execute any of the user's code. */\n \n static void\n __do_global_ctors_aux ()\t/* prologue goes in .text section */\n@@ -165,23 +268,31 @@ __do_global_ctors_aux ()\t/* prologue goes in .text section */\n   ON_EXIT (__do_global_dtors, 0);\n }\t\t\t\t/* epilogue and body go in .init section */\n \n+#endif /* OBJECT_FORMAT_ELF */\n+\n #endif /* defined(INIT_SECTION_ASM_OP) */\n \n /* Force cc1 to switch to .data section.  */\n static func_ptr force_to_data[0] = { };\n \n+/* Put a word containing zero at the end of each of our two lists of function\n+   addresses.  Note that the words defined here go into the .ctors and .dtors\n+   sections of the crtend.o file, and since that file is always linked in\n+   last, these words naturally end up at the very ends of the two lists\n+   contained in these two sections.  */\n+\n #ifdef CTOR_LIST_END\n CTOR_LIST_END;\n #else\n asm (CTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n-func_ptr __CTOR_END__[1] = { (func_ptr) 0 };\n+STATIC func_ptr __CTOR_END__[1] = { (func_ptr) 0 };\n #endif\n \n #ifdef DTOR_LIST_END\n DTOR_LIST_END;\n #else\n asm (DTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n-func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n+STATIC func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n #endif\n \n #endif /* defined(CRT_END) */"}, {"sha": "79ea18563d6b298ee8066c249ca1414366b98b39", "filename": "gcc/gcc.c", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -362,6 +362,7 @@ or with constant text in a single argument.\n \tIf multilib_dir is set, extra entries are generated with it affixed.\n  %l     process LINK_SPEC as a spec.\n  %L     process LIB_SPEC as a spec.\n+ %G     process LIBGCC_SPEC as a spec.\n  %S     process STARTFILE_SPEC as a spec.  A capital S is actually used here.\n  %E     process ENDFILE_SPEC as a spec.  A capital E is actually used here.\n  %c\tprocess SIGNED_CHAR_SPEC as a spec.\n@@ -458,7 +459,18 @@ proper position among the other output files.  */\n \n /* config.h can define LIB_SPEC to override the default libraries.  */\n #ifndef LIB_SPEC\n-#define LIB_SPEC \"%{g*:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n+#define LIB_SPEC \"%{!shared:%{g*:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}}\"\n+#endif\n+\n+/* config.h can define LIBGCC_SPEC to override how and when libgcc.a is\n+   included.  */\n+#ifndef LIBGCC_SPEC\n+#if defined(LINK_LIBGCC_SPECIAL) || defined(LINK_LIBGCC_SPECIAL_1)\n+/* Have gcc do the search for libgcc.a.  */\n+#define LIBGCC_SPEC \"%{!shared:libgcc.a%s}\"\n+#else\n+#define LIBGCC_SPEC \"%{!shared:-lgcc}\"\n+#endif\n #endif\n \n /* config.h can define STARTFILE_SPEC to override the default crt0 files.  */\n@@ -505,6 +517,7 @@ static char *asm_spec = ASM_SPEC;\n static char *asm_final_spec = ASM_FINAL_SPEC;\n static char *link_spec = LINK_SPEC;\n static char *lib_spec = LIB_SPEC;\n+static char *libgcc_spec = LIBGCC_SPEC;\n static char *endfile_spec = ENDFILE_SPEC;\n static char *startfile_spec = STARTFILE_SPEC;\n static char *switches_need_spaces = SWITCHES_NEED_SPACES;\n@@ -728,32 +741,22 @@ static int n_default_compilers\n /* We want %{T*} after %{L*} and %D so that it can be used to specify linker\n    scripts which exist in user specified directories, or in standard\n    directories.  */\n-#ifdef LINK_LIBGCC_SPECIAL_1\n-/* Have gcc do the search for libgcc.a, but generate -L options as usual.  */\n-static char *link_command_spec = \"\\\n-%{!fsyntax-only: \\\n- %{!c:%{!M:%{!MM:%{!E:%{!S:ld %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n-\t\t\t%{r} %{s} %{t} %{u*} %{x} %{z} %{Z}\\\n-\t\t\t%{!A:%{!nostartfiles:%{!nostdlib:%S}}} %{static:}\\\n-\t\t\t%{L*} %D %{T*} %o %{!nostdlib:libgcc.a%s %L libgcc.a%s %{!A:%E}}\\n }}}}}}\";\n-#else\n #ifdef LINK_LIBGCC_SPECIAL\n-/* Have gcc do the search for libgcc.a, and don't generate -L options.  */\n+/* Don't generate -L options.  */\n static char *link_command_spec = \"\\\n %{!fsyntax-only: \\\n  %{!c:%{!M:%{!MM:%{!E:%{!S:ld %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n \t\t\t%{r} %{s} %{t} %{u*} %{x} %{z} %{Z}\\\n \t\t\t%{!A:%{!nostartfiles:%{!nostdlib:%S}}} %{static:}\\\n-\t\t\t%{L*} %{T*} %o %{!nostdlib:libgcc.a%s %L libgcc.a%s %{!A:%E}}\\n }}}}}}\";\n+\t\t\t%{L*} %{T*} %o %{!nostdlib:%G %L %G %{!A:%E}}\\n }}}}}}\";\n #else\n-/* Use -L and have the linker do the search for -lgcc.  */\n+/* Use -L.  */\n static char *link_command_spec = \"\\\n %{!fsyntax-only: \\\n  %{!c:%{!M:%{!MM:%{!E:%{!S:ld %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n \t\t\t%{r} %{s} %{t} %{u*} %{x} %{z} %{Z}\\\n \t\t\t%{!A:%{!nostartfiles:%{!nostdlib:%S}}} %{static:}\\\n-\t\t\t%{L*} %D %{T*} %o %{!nostdlib:-lgcc %L -lgcc %{!A:%E}}\\n }}}}}}\";\n-#endif\n+\t\t\t%{L*} %D %{T*} %o %{!nostdlib:%G %L %G %{!A:%E}}\\n }}}}}}\";\n #endif\n \n /* A vector of options to give to the linker.\n@@ -1229,6 +1232,8 @@ set_spec (name, spec)\n     endfile_spec = sl->spec;\n   else if (! strcmp (name, \"lib\"))\n     lib_spec = sl->spec;\n+  else if (! strcmp (name, \"libgcc\"))\n+    libgcc_spec = sl->spec;\n   else if (! strcmp (name, \"link\"))\n     link_spec = sl->spec;\n   else if (! strcmp (name, \"predefines\"))\n@@ -2490,6 +2495,7 @@ process_command (argc, argv)\n \t  printf (\"*endfile:\\n%s\\n\\n\", endfile_spec);\n \t  printf (\"*link:\\n%s\\n\\n\", link_spec);\n \t  printf (\"*lib:\\n%s\\n\\n\", lib_spec);\n+\t  printf (\"*libgcc:\\n%s\\n\\n\", libgcc_spec);\n \t  printf (\"*startfile:\\n%s\\n\\n\", startfile_spec);\n \t  printf (\"*switches_need_spaces:\\n%s\\n\\n\", switches_need_spaces);\n \t  printf (\"*signed_char:\\n%s\\n\\n\", signed_char_spec);\n@@ -3504,6 +3510,12 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      return value;\n \t    break;\n \n+\t  case 'G':\n+\t    value = do_spec_1 (libgcc_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n+\t    break;\n+\n \t  case 'p':\n \t    {\n \t      char *x = (char *) alloca (strlen (cpp_predefines) + 1);\n@@ -4872,6 +4884,12 @@ validate_all_switches ()\n       /* We have a switch spec.  */\n       validate_switches (p + 1);\n \n+  p = libgcc_spec;\n+  while (c = *p++)\n+    if (c == '%' && *p == '{')\n+      /* We have a switch spec.  */\n+      validate_switches (p + 1);\n+\n   p = startfile_spec;\n   while (c = *p++)\n     if (c == '%' && *p == '{')"}, {"sha": "44b4de5982cb43c31e7c5857845d9a0dabf94464", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d69835acdbeb2a30bb3338013e55afda1aca4d/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=68d69835acdbeb2a30bb3338013e55afda1aca4d", "patch": "@@ -1996,6 +1996,7 @@ __enable_execute_stack ()\n #define SYMBOL__MAIN __main\n #endif\n \n+#if !defined (INIT_SECTION_ASM_OP) || !defined (OBJECT_FORMAT_ELF)\n /* Run all the global destructors on exit from the program.  */\n \n void\n@@ -2009,6 +2010,7 @@ __do_global_dtors ()\n     (*p++) ();\n #endif\n }\n+#endif\n \n #ifndef INIT_SECTION_ASM_OP\n /* Run all the global constructors on entry to the program.  */\n@@ -2112,41 +2114,6 @@ int _exit_dummy_decl = 0;\t/* prevent compiler & linker warnings */\n \n #endif /* L_exit */\n \f\n-/* In a.out systems, we need to have these dummy constructor and destructor\n-   lists in the library.\n-\n-   When using `collect', the first link will resolve __CTOR_LIST__\n-   and __DTOR_LIST__ to these symbols.  We will then run \"nm\" on the\n-   result, build the correct __CTOR_LIST__ and __DTOR_LIST__, and relink.\n-   Since we don't do the second link if no constructors existed, these\n-   dummies must be fully functional empty lists.\n-\n-   When using `gnu ld', these symbols will be used if there are no\n-   constructors.  If there are constructors, the N_SETV symbol defined\n-   by the linker from the N_SETT's in input files will define __CTOR_LIST__\n-   and __DTOR_LIST__ rather than its being allocated as common storage\n-   by the definitions below.\n-\n-   When using a linker that supports constructor and destructor segments,\n-   these definitions will not be used, since crtbegin.o and crtend.o\n-   (from crtstuff.c) will have already defined __CTOR_LIST__ and\n-    __DTOR_LIST__.  The crt*.o files are passed directly to the linker\n-   on its command line, by gcc.  */\n-\n-/* The list needs two elements:  one is ignored (the old count); the\n-   second is the terminating zero.  Since both values are zero, this\n-   declaration is not initialized, and it becomes `common'.  */\n-\n-#ifdef L_ctor_list\n-#include \"gbl-ctors.h\"\n-func_ptr __CTOR_LIST__[2];\n-#endif\n-\n-#ifdef L_dtor_list\n-#include \"gbl-ctors.h\"\n-func_ptr __DTOR_LIST__[2];\n-#endif\n-\f\n #ifdef L_eh\n typedef struct {\n   void *start;"}]}