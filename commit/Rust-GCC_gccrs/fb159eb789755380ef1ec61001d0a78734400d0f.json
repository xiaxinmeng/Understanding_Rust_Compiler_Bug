{"sha": "fb159eb789755380ef1ec61001d0a78734400d0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIxNTllYjc4OTc1NTM4MGVmMWVjNjEwMDFkMGE3ODczNDQwMGQwZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:21:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:21:37Z"}, "message": "[multiple changes]\n\n2015-10-20  Steve Baird  <baird@adacore.com>\n\n\t* pprint.adb: Code clean up.\n\n2015-10-20  Bob Duff  <duff@adacore.com>\n\n\t* a-cfinve.ads, a-coboho.ads: Improve comments.\n\t* a-coboho.adb (Size_In_Storage_Elements): Improve error message\n\tin case of \"Size is too big\" exception.\n\n2015-10-20  Bob Duff  <duff@adacore.com>\n\n\t* a-contai.ads: Remove check names (moved to snames.ads-tmpl).\n\t* snames.ads-tmpl: Add check names that were previously in\n\ta-contai.ads, so they are now visible in configuration files.\n\t* types.ads: Add checks corresponding to snames.ads-tmpl.\n\nFrom-SVN: r229069", "tree": {"sha": "c36d888547dab7791e17fd4bfe05b11f59fb05c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c36d888547dab7791e17fd4bfe05b11f59fb05c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb159eb789755380ef1ec61001d0a78734400d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb159eb789755380ef1ec61001d0a78734400d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb159eb789755380ef1ec61001d0a78734400d0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb159eb789755380ef1ec61001d0a78734400d0f/comments", "author": null, "committer": null, "parents": [{"sha": "78cef47f96b16996b65a3a53a7166f5daf4d7f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78cef47f96b16996b65a3a53a7166f5daf4d7f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78cef47f96b16996b65a3a53a7166f5daf4d7f27"}], "stats": {"total": 91, "additions": 61, "deletions": 30}, "files": [{"sha": "ea3417e9e1b04e88790aa8536af6a887b4b22116", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fb159eb789755380ef1ec61001d0a78734400d0f", "patch": "@@ -1,3 +1,20 @@\n+2015-10-20  Steve Baird  <baird@adacore.com>\n+\n+\t* pprint.adb: Code clean up.\n+\n+2015-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* a-cfinve.ads, a-coboho.ads: Improve comments.\n+\t* a-coboho.adb (Size_In_Storage_Elements): Improve error message\n+\tin case of \"Size is too big\" exception.\n+\n+2015-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* a-contai.ads: Remove check names (moved to snames.ads-tmpl).\n+\t* snames.ads-tmpl: Add check names that were previously in\n+\ta-contai.ads, so they are now visible in configuration files.\n+\t* types.ads: Add checks corresponding to snames.ads-tmpl.\n+\n 2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch5.adb (Analyze_Loop_Statement): Attach generated loop"}, {"sha": "17f6f7c22d0f270de5266847487639987ce510ea", "filename": "gcc/ada/a-cfinve.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fa-cfinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fa-cfinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfinve.ads?ref=fb159eb789755380ef1ec61001d0a78734400d0f", "patch": "@@ -41,8 +41,12 @@ generic\n    type Element_Type (<>) is private;\n    Max_Size_In_Storage_Elements : Natural :=\n                                     Element_Type'Max_Size_In_Storage_Elements;\n-   --  This has the same meaning as in Ada.Containers.Bounded_Holders, with the\n-   --  same restrictions.\n+   --  Maximum size of Vector elements in bytes. This has the same meaning as\n+   --  in Ada.Containers.Bounded_Holders, with the same restrictions. Note that\n+   --  setting this too small can lead to erroneous execution; see comments in\n+   --  Ada.Containers.Bounded_Holders. If Element_Type is class-wide, it is the\n+   --  responsibility of clients to calculate the maximum size of all types in\n+   --  the class.\n \n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n "}, {"sha": "590e807dd32c1864e70b3908e4a9ebd430029800", "filename": "gcc/ada/a-coboho.adb", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fa-coboho.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fa-coboho.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coboho.adb?ref=fb159eb789755380ef1ec61001d0a78734400d0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2014, Free Software Foundation, Inc.            --\n+--            Copyright (C) 2015, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,24 +26,34 @@\n ------------------------------------------------------------------------------\n \n with Unchecked_Conversion;\n-with Ada.Assertions; use Ada.Assertions;\n \n package body Ada.Containers.Bounded_Holders is\n \n    pragma Annotate (CodePeer, Skip_Analysis);\n \n-   function Size_In_Storage_Elements (Element : Element_Type) return Natural is\n-     (Element'Size / System.Storage_Unit)\n-       with Pre =>\n-       (Element'Size mod System.Storage_Unit = 0 or else\n-          raise Assertion_Error with \"Size must be a multiple of Storage_Unit\")\n-       and then\n-         (Element'Size / System.Storage_Unit <= Max_Size_In_Storage_Elements\n-            or else raise Assertion_Error with \"Size is too big\");\n+   function Size_In_Storage_Elements (Element : Element_Type) return Natural;\n    --  This returns the size of Element in storage units. It raises an\n    --  exception if the size is not a multiple of Storage_Unit, or if the size\n    --  is too big.\n \n+   ------------------------------\n+   -- Size_In_Storage_Elements --\n+   ------------------------------\n+\n+   function Size_In_Storage_Elements (Element : Element_Type) return Natural is\n+      Max_Size : Natural renames Max_Size_In_Storage_Elements;\n+\n+   begin\n+      return S : constant Natural := Element'Size / System.Storage_Unit do\n+         pragma Assert\n+           (Element'Size mod System.Storage_Unit = 0,\n+            \"Size must be a multiple of Storage_Unit\");\n+\n+         pragma Assert\n+           (S <= Max_Size, \"Size is too big:\" & S'Img & \" >\" & Max_Size'Img);\n+      end return;\n+   end Size_In_Storage_Elements;\n+\n    function Cast is new\n      Unchecked_Conversion (System.Address, Element_Access);\n \n@@ -65,9 +75,9 @@ package body Ada.Containers.Bounded_Holders is\n       return Cast (Container'Address).all;\n    end Get;\n \n-   ---------------------\n-   -- Replace_Element --\n-   ---------------------\n+   ---------\n+   -- Set --\n+   ---------\n \n    procedure Set (Container : in out Holder; New_Item  : Element_Type) is\n       Storage : Storage_Array"}, {"sha": "8764410d40748735292ac954c7e8ad7270964a34", "filename": "gcc/ada/a-coboho.ads", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fa-coboho.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fa-coboho.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coboho.ads?ref=fb159eb789755380ef1ec61001d0a78734400d0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 2014, Free Software Foundation, Inc.            --\n+--            Copyright (C) 2015, Free Software Foundation, Inc.            --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -51,9 +51,14 @@ package Ada.Containers.Bounded_Holders is\n    --\n    --  Each object of type Holder is allocated Max_Size_In_Storage_Elements\n    --  bytes. If you try to create a holder from an object of type Element_Type\n-   --  that is too big, an exception is raised. This applies to To_Holder and\n-   --  Replace_Element. If you pass an Element_Type object that is smaller than\n-   --  Max_Size_In_Storage_Elements, it works fine, but some space is wasted.\n+   --  that is too big, an exception is raised (assuming assertions are\n+   --  enabled). This applies to To_Holder and Set. If you pass an Element_Type\n+   --  object that is smaller than Max_Size_In_Storage_Elements, it works fine,\n+   --  but some space is wasted.\n+   --\n+   --  NOTE: If assertions are disabled, and you try to use an Element that is\n+   --  too big, execution is erroneous, and anything can happen, such as\n+   --  overwriting arbitrary memory locations.\n    --\n    --  Element_Type must not be an unconstrained array type. It can be a\n    --  class-wide type or a type with non-defaulted discriminants."}, {"sha": "be8a808747bf67833f5347c39f3a3dc87eb93d2a", "filename": "gcc/ada/a-contai.ads", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fa-contai.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fa-contai.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-contai.ads?ref=fb159eb789755380ef1ec61001d0a78734400d0f", "patch": "@@ -13,15 +13,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Check_Name (Container_Checks);\n-pragma Check_Name (Tampering_Check);\n---  The above checks are not in the Ada RM. They are added in order to allow\n---  suppression of checks within containers packages. Suppressing\n---  Tampering_Check suppresses the tampering checks and associated machinery,\n---  which is very expensive. Suppressing Container_Checks suppresses\n---  Tampering_Check as well as all the other (not-so-expensive) containers\n---  checks.\n-\n package Ada.Containers is\n    pragma Pure;\n "}, {"sha": "cc0bfe5f970b96fbf1d2b5f519b7b628ffce1027", "filename": "gcc/ada/pprint.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fpprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fpprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpprint.adb?ref=fb159eb789755380ef1ec61001d0a78734400d0f", "patch": "@@ -713,11 +713,11 @@ package body Pprint is\n       end loop;\n \n       declare\n+         Scn      : Source_Ptr := Original_Location (Sloc (Left));\n          End_Sloc : constant Source_Ptr :=\n                       Original_Location (Sloc (Right));\n          Src      : constant Source_Buffer_Ptr :=\n                       Source_Text (Get_Source_File_Index (Scn));\n-         Scn      : Source_Ptr := Original_Location (Sloc (Left));\n \n       begin\n          if Scn > End_Sloc then"}, {"sha": "c0860e48544b5f5978e2afc00494e17fc2c76a0f", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=fb159eb789755380ef1ec61001d0a78734400d0f", "patch": "@@ -1105,6 +1105,8 @@ package Snames is\n    Name_Storage_Check                  : constant Name_Id := N + $;\n    Name_Tag_Check                      : constant Name_Id := N + $;\n    Name_Validity_Check                 : constant Name_Id := N + $; -- GNAT\n+   Name_Container_Checks               : constant Name_Id := N + $; -- GNAT\n+   Name_Tampering_Check                : constant Name_Id := N + $; -- GNAT\n    Name_All_Checks                     : constant Name_Id := N + $;\n    Last_Check_Name                     : constant Name_Id := N + $;\n "}, {"sha": "8b21b10ca4df36578881c58df4cd51e0c8a27ebf", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb159eb789755380ef1ec61001d0a78734400d0f/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=fb159eb789755380ef1ec61001d0a78734400d0f", "patch": "@@ -679,11 +679,13 @@ package Types is\n    Storage_Check          : constant := 15;\n    Tag_Check              : constant := 16;\n    Validity_Check         : constant := 17;\n+   Container_Checks       : constant := 18;\n+   Tampering_Check        : constant := 19;\n    --  Values used to represent individual predefined checks (including the\n    --  setting of Atomic_Synchronization, which is implemented internally using\n    --  a \"check\" whose name is Atomic_Synchronization).\n \n-   All_Checks : constant := 18;\n+   All_Checks : constant := 20;\n    --  Value used to represent All_Checks value\n \n    subtype Predefined_Check_Id is Check_Id range 1 .. All_Checks;"}]}