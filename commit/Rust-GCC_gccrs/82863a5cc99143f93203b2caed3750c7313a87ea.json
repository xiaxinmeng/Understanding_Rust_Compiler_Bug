{"sha": "82863a5cc99143f93203b2caed3750c7313a87ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4NjNhNWNjOTkxNDNmOTMyMDNiMmNhZWQzNzUwYzczMTNhODdlYQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-02-26T16:45:29Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-02-27T12:03:10Z"}, "message": "amdgcn: fix ICE on subreg of BI reg.\n\nBImode usually only requires one bit, but instructions that write to VCC also\nclobber the reset of the DImode register pair, so gcn_class_max_nregs reports\nthat two registers are needed for BImode.  Paradoxically, accessing VCC via\nSImode is therefore uses fewer registers than accessing via BImode.\n\nThe LRA checking code takes this into account, but the DF liveness data also\nlooks at the subreg, so it says (subreg:SI (reg:BI VCC) 0) only makes the low\npart live.  Both are \"correct\", but they disagree, which causes an ICE.\n\nThis doesn't happen when writing conditions to VCC; it happens when accessing\nVCC_LO via a regular move to a regular SImode register.\n\nIf we transform the subregs so that BImode is always the outer mode then it\nbasically means the same thing, except that now both LRA and DF calculate nregs\nthe same, and ICE goes away.\n\nAs soon as LRA is done the subregs all evaporate anyway.\n\n2020-02-27  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn.md (mov<mode>): Add transformations for BI subregs.", "tree": {"sha": "525147e716ce241f5f9234052bba2afd287e7ba3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/525147e716ce241f5f9234052bba2afd287e7ba3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82863a5cc99143f93203b2caed3750c7313a87ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82863a5cc99143f93203b2caed3750c7313a87ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82863a5cc99143f93203b2caed3750c7313a87ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82863a5cc99143f93203b2caed3750c7313a87ea/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb8e6a30a442c4c12dc903d6e1817b223bbed4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8e6a30a442c4c12dc903d6e1817b223bbed4a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb8e6a30a442c4c12dc903d6e1817b223bbed4a3"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "b17d255ac8a1389f0906c87b5c6af46a6f42fa32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82863a5cc99143f93203b2caed3750c7313a87ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82863a5cc99143f93203b2caed3750c7313a87ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82863a5cc99143f93203b2caed3750c7313a87ea", "patch": "@@ -1,3 +1,7 @@\n+2020-02-27  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.md (mov<mode>): Add transformations for BI subregs.\n+\n 2020-02-27  Mark Williams  <mwilliams@fb.com>\n \n \t* dwarf2out.c (file_name_acquire): Call remap_debug_filename."}, {"sha": "d8b49dfd640e66d67d2956fe7dab9040492397ec", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82863a5cc99143f93203b2caed3750c7313a87ea/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82863a5cc99143f93203b2caed3750c7313a87ea/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=82863a5cc99143f93203b2caed3750c7313a87ea", "patch": "@@ -395,6 +395,31 @@\n \t(match_operand:MOV_MODE 1 \"general_operand\"))]\n   \"\"\n   {\n+    if (SUBREG_P (operands[1])\n+\t&& GET_MODE (operands[1]) == SImode\n+\t&& GET_MODE (SUBREG_REG (operands[1])) == BImode)\n+    {\n+      /* (reg:BI VCC) has nregs==2 to ensure it gets clobbered as a whole,\n+\t but (subreg:SI (reg:BI VCC)) doesn't, which causes the LRA liveness\n+\t checks to assert.  Transform this:\n+\t   (set (reg:SI) (subreg:SI (reg:BI)))\n+\t to this:\n+\t   (set (subreg:BI (reg:SI)) (reg:BI))  */\n+      operands[0] = gen_rtx_SUBREG (BImode, operands[0], 0);\n+      operands[1] = SUBREG_REG (operands[1]);\n+    }\n+    if (SUBREG_P (operands[0])\n+\t&& GET_MODE (operands[0]) == SImode\n+\t&& GET_MODE (SUBREG_REG (operands[0])) == BImode)\n+      {\n+\t/* Likewise, transform this:\n+\t     (set (subreg:SI (reg:BI)) (reg:SI))\n+\t   to this:\n+\t     (set (reg:BI) (subreg:BI (reg:SI))) */\n+\toperands[0] = SUBREG_REG (operands[0]);\n+\toperands[1] = gen_rtx_SUBREG (BImode, operands[1], 0);\n+      }\n+\n     if (MEM_P (operands[0]))\n       operands[1] = force_reg (<MODE>mode, operands[1]);\n "}]}