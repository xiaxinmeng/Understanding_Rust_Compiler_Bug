{"sha": "1a14a58c73942ef8c23114fd05f4fc6acf40a991", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExNGE1OGM3Mzk0MmVmOGMyMzExNGZkMDVmNGZjNmFjZjQwYTk5MQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-09-09T08:42:52Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-09-09T08:42:52Z"}, "message": "re PR fortran/43665 (INTENT(IN) etc. optimization of calls: function annotations for noclobber/noescape arguments)\n\n2010-09-09  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43665\n        * intrincic.texi (FGET, FGETC, FPUT, FPUTC, FSTAT, GETCWD, KILL,\n        STAT): Show also syntax for the function version.\n        * intrinsic.c (add_sym_1s_intent, add_sym_2s_intent,\n         add_sym_3s_intent): Remove function.\n        (add_sym_1s, add_sym_2s, add_sym_3s): Take always the intent\n        as argument.\n        (add_sym_2_intent): New function.\n        (add_functions): Set intent for functions which modify\n        the argument: fstat, fgetc, fget, hostnm, lstat, stat. Change\n        argument name of hostnm from \"a\" to \"c\"\n        (add_subroutines): Change add_sym_*s_intent to\n        add_sym_*s and add intent to the add_sym_*s calls.\n\nFrom-SVN: r164052", "tree": {"sha": "1674609687e0d416e1f540511699b4752d4c4093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1674609687e0d416e1f540511699b4752d4c4093"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a14a58c73942ef8c23114fd05f4fc6acf40a991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a14a58c73942ef8c23114fd05f4fc6acf40a991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a14a58c73942ef8c23114fd05f4fc6acf40a991", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a14a58c73942ef8c23114fd05f4fc6acf40a991/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8e399c334841b355b7996a7f3f453e116b4652b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e399c334841b355b7996a7f3f453e116b4652b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e399c334841b355b7996a7f3f453e116b4652b"}], "stats": {"total": 433, "additions": 231, "deletions": 202}, "files": [{"sha": "8e17f058cbc8660d8d6acda640331210e38d6758", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a14a58c73942ef8c23114fd05f4fc6acf40a991/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a14a58c73942ef8c23114fd05f4fc6acf40a991/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1a14a58c73942ef8c23114fd05f4fc6acf40a991", "patch": "@@ -1,3 +1,19 @@\n+2010-09-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43665\n+\t* intrincic.texi (FGET, FGETC, FPUT, FPUTC, FSTAT, GETCWD, KILL,\n+\tSTAT): Show also syntax for the function version.\n+\t* intrinsic.c (add_sym_1s_intent, add_sym_2s_intent,\n+\t add_sym_3s_intent): Remove function.\n+\t(add_sym_1s, add_sym_2s, add_sym_3s): Take always the intent\n+\tas argument.\n+\t(add_sym_2_intent): New function.\n+\t(add_functions): Set intent for functions which modify\n+\tthe argument: fstat, fgetc, fget, hostnm, lstat, stat. Change\n+\targument name of hostnm from \"a\" to \"c\"\n+\t(add_subroutines): Change add_sym_*s_intent to\n+\tadd_sym_*s and add intent to the add_sym_*s calls.\n+\n 2010-09-08  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/38282"}, {"sha": "9c69d7dfc9429112bf20a90a97b910ab08f129b1", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 175, "deletions": 191, "changes": 366, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a14a58c73942ef8c23114fd05f4fc6acf40a991/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a14a58c73942ef8c23114fd05f4fc6acf40a991/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=1a14a58c73942ef8c23114fd05f4fc6acf40a991", "patch": "@@ -409,30 +409,6 @@ add_sym_1 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt ty\n }\n \n \n-/* Add a symbol to the subroutine list where the subroutine takes\n-   1 arguments.  */\n-\n-static void\n-add_sym_1s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind, int standard,\n-\t    gfc_try (*check) (gfc_expr *),\n-\t    gfc_expr *(*simplify) (gfc_expr *),\n-\t    void (*resolve) (gfc_code *),\n-\t    const char *a1, bt type1, int kind1, int optional1)\n-{\n-  gfc_check_f cf;\n-  gfc_simplify_f sf;\n-  gfc_resolve_f rf;\n-\n-  cf.f1 = check;\n-  sf.f1 = simplify;\n-  rf.s1 = resolve;\n-\n-  add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1, INTENT_IN,\n-\t   (void *) 0);\n-}\n-\n-\n /* Add a symbol to the function list where the function takes\n    1 arguments, specifying the intent of the argument.  */\n \n@@ -463,13 +439,11 @@ add_sym_1_intent (const char *name, gfc_isym_id id, enum klass cl,\n    1 arguments, specifying the intent of the argument.  */\n \n static void\n-add_sym_1s_intent (const char *name, gfc_isym_id id, enum klass cl, bt type,\n-\t\t   int kind, int standard,\n-\t\t   gfc_try (*check) (gfc_expr *),\n-\t\t   gfc_expr *(*simplify) (gfc_expr *),\n-\t\t   void (*resolve) (gfc_code *),\n-\t\t   const char *a1, bt type1, int kind1, int optional1,\n-\t\t   sym_intent intent1)\n+add_sym_1s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind,\n+\t    int standard, gfc_try (*check) (gfc_expr *),\n+\t    gfc_expr *(*simplify) (gfc_expr *), void (*resolve) (gfc_code *),\n+\t    const char *a1, bt type1, int kind1, int optional1,\n+\t    sym_intent intent1)\n {\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n@@ -539,28 +513,30 @@ add_sym_2 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt ty\n }\n \n \n-/* Add a symbol to the subroutine list where the subroutine takes\n-   2 arguments.  */\n+/* Add a symbol to the function list where the function takes\n+   2 arguments; same as add_sym_2 - but allows to specify the intent.  */\n \n static void\n-add_sym_2s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind, int standard,\n-\t    gfc_try (*check) (gfc_expr *, gfc_expr *),\n-\t    gfc_expr *(*simplify) (gfc_expr *, gfc_expr *),\n-\t    void (*resolve) (gfc_code *),\n-\t    const char *a1, bt type1, int kind1, int optional1,\n-\t    const char *a2, bt type2, int kind2, int optional2)\n+add_sym_2_intent (const char *name, gfc_isym_id id, enum klass cl,\n+\t\t  int actual_ok, bt type, int kind, int standard,\n+\t\t  gfc_try (*check) (gfc_expr *, gfc_expr *),\n+\t\t  gfc_expr *(*simplify) (gfc_expr *, gfc_expr *),\n+\t\t  void (*resolve) (gfc_expr *, gfc_expr *, gfc_expr *),\n+\t\t  const char *a1, bt type1, int kind1, int optional1,\n+\t\t  sym_intent intent1, const char *a2, bt type2, int kind2,\n+\t\t  int optional2, sym_intent intent2)\n {\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n \n   cf.f2 = check;\n   sf.f2 = simplify;\n-  rf.s1 = resolve;\n+  rf.f2 = resolve;\n \n-  add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1, INTENT_IN,\n-\t   a2, type2, kind2, optional2, INTENT_IN,\n+  add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n+\t   a1, type1, kind1, optional1, intent1,\n+\t   a2, type2, kind2, optional2, intent2,\n \t   (void *) 0);\n }\n \n@@ -569,14 +545,14 @@ add_sym_2s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind,\n    2 arguments, specifying the intent of the arguments.  */\n \n static void\n-add_sym_2s_intent (const char *name, gfc_isym_id id, enum klass cl, bt type,\n-\t\t   int kind, int standard,\n-\t\t   gfc_try (*check) (gfc_expr *, gfc_expr *),\n-\t\t   gfc_expr *(*simplify) (gfc_expr *, gfc_expr *),\n-\t\t   void (*resolve) (gfc_code *),\n-\t\t   const char *a1, bt type1, int kind1, int optional1,\n-\t\t   sym_intent intent1, const char *a2, bt type2, int kind2,\n-\t\t   int optional2, sym_intent intent2)\n+add_sym_2s (const char *name, gfc_isym_id id, enum klass cl, bt type,\n+\t    int kind, int standard,\n+\t    gfc_try (*check) (gfc_expr *, gfc_expr *),\n+\t    gfc_expr *(*simplify) (gfc_expr *, gfc_expr *),\n+\t    void (*resolve) (gfc_code *),\n+\t    const char *a1, bt type1, int kind1, int optional1,\n+\t    sym_intent intent1, const char *a2, bt type2, int kind2,\n+\t    int optional2, sym_intent intent2)\n {\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n@@ -681,46 +657,18 @@ add_sym_3red (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt\n \n \n /* Add a symbol to the subroutine list where the subroutine takes\n-   3 arguments.  */\n+   3 arguments, specifying the intent of the arguments.  */\n \n static void\n-add_sym_3s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind, int standard,\n+add_sym_3s (const char *name, gfc_isym_id id, enum klass cl, bt type,\n+\t    int kind, int standard,\n \t    gfc_try (*check) (gfc_expr *, gfc_expr *, gfc_expr *),\n \t    gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *),\n \t    void (*resolve) (gfc_code *),\n \t    const char *a1, bt type1, int kind1, int optional1,\n-\t    const char *a2, bt type2, int kind2, int optional2,\n-\t    const char *a3, bt type3, int kind3, int optional3)\n-{\n-  gfc_check_f cf;\n-  gfc_simplify_f sf;\n-  gfc_resolve_f rf;\n-\n-  cf.f3 = check;\n-  sf.f3 = simplify;\n-  rf.s1 = resolve;\n-\n-  add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1, INTENT_IN,\n-\t   a2, type2, kind2, optional2, INTENT_IN,\n-\t   a3, type3, kind3, optional3, INTENT_IN,\n-\t   (void *) 0);\n-}\n-\n-\n-/* Add a symbol to the subroutine list where the subroutine takes\n-   3 arguments, specifying the intent of the arguments.  */\n-\n-static void\n-add_sym_3s_intent (const char *name, gfc_isym_id id, enum klass cl, bt type,\n-\t\t   int kind, int standard,\n-\t\t   gfc_try (*check) (gfc_expr *, gfc_expr *, gfc_expr *),\n-\t\t   gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *),\n-\t\t   void (*resolve) (gfc_code *),\n-\t\t   const char *a1, bt type1, int kind1, int optional1,\n-\t\t   sym_intent intent1, const char *a2, bt type2, int kind2,\n-\t\t   int optional2, sym_intent intent2, const char *a3, bt type3,\n-\t\t   int kind3, int optional3, sym_intent intent3)\n+\t    sym_intent intent1, const char *a2, bt type2, int kind2,\n+\t    int optional2, sym_intent intent2, const char *a3, bt type3,\n+\t    int kind3, int optional3, sym_intent intent3)\n {\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n@@ -1717,9 +1665,11 @@ add_functions (void)\n \n   make_generic (\"fraction\", GFC_ISYM_FRACTION, GFC_STD_F95);\n \n-  add_sym_2 (\"fstat\", GFC_ISYM_FSTAT, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n-\t     GFC_STD_GNU, gfc_check_fstat, NULL, gfc_resolve_fstat,\n-\t     ut, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n+  add_sym_2_intent (\"fstat\", GFC_ISYM_FSTAT, CLASS_IMPURE, ACTUAL_NO,\n+\t\t    BT_INTEGER, di, GFC_STD_GNU,\n+\t\t    gfc_check_fstat, NULL, gfc_resolve_fstat,\n+\t\t    ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t\t    vl, BT_INTEGER, di, REQUIRED, INTENT_OUT);\n \n   make_generic (\"fstat\", GFC_ISYM_FSTAT, GFC_STD_GNU);\n \n@@ -1729,15 +1679,17 @@ add_functions (void)\n \n   make_generic (\"ftell\", GFC_ISYM_FTELL, GFC_STD_GNU);\n \n-  add_sym_2 (\"fgetc\", GFC_ISYM_FGETC, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n-\t     di, GFC_STD_GNU, gfc_check_fgetputc, NULL, gfc_resolve_fgetc,\n-\t     ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED);\n+  add_sym_2_intent (\"fgetc\", GFC_ISYM_FGETC, CLASS_IMPURE, ACTUAL_NO,\n+\t\t    BT_INTEGER, di, GFC_STD_GNU,\n+\t\t    gfc_check_fgetputc, NULL, gfc_resolve_fgetc,\n+\t\t    ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t\t    c, BT_CHARACTER, dc, REQUIRED, INTENT_OUT);\n \n   make_generic (\"fgetc\", GFC_ISYM_FGETC, GFC_STD_GNU);\n \n-  add_sym_1 (\"fget\", GFC_ISYM_FGET, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+  add_sym_1_intent (\"fget\", GFC_ISYM_FGET, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n \t     di, GFC_STD_GNU, gfc_check_fgetput, NULL, gfc_resolve_fget,\n-\t     c, BT_CHARACTER, dc, REQUIRED);\n+\t     c, BT_CHARACTER, dc, REQUIRED, INTENT_OUT);\n \n   make_generic (\"fget\", GFC_ISYM_FGET, GFC_STD_GNU);\n \n@@ -1785,9 +1737,10 @@ add_functions (void)\n \n   make_generic (\"getuid\", GFC_ISYM_GETUID, GFC_STD_GNU);\n \n-  add_sym_1 (\"hostnm\", GFC_ISYM_HOSTNM, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n-\t     di, GFC_STD_GNU, gfc_check_hostnm, NULL, gfc_resolve_hostnm,\n-\t     a, BT_CHARACTER, dc, REQUIRED);\n+  add_sym_1_intent (\"hostnm\", GFC_ISYM_HOSTNM, CLASS_IMPURE, ACTUAL_NO,\n+\t\t    BT_INTEGER, di, GFC_STD_GNU,\n+\t\t    gfc_check_hostnm, NULL, gfc_resolve_hostnm,\n+\t\t    c, BT_CHARACTER, dc, REQUIRED, INTENT_OUT);\n \n   make_generic (\"hostnm\", GFC_ISYM_HOSTNM, GFC_STD_GNU);\n \n@@ -2156,9 +2109,11 @@ add_functions (void)\n \n   make_generic (\"logical\", GFC_ISYM_LOGICAL, GFC_STD_F95);\n \n-  add_sym_2 (\"lstat\", GFC_ISYM_LSTAT, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n-\t     GFC_STD_GNU, gfc_check_stat, NULL, gfc_resolve_lstat,\n-\t     nm, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n+  add_sym_2_intent (\"lstat\", GFC_ISYM_LSTAT, CLASS_IMPURE, ACTUAL_NO,\n+\t\t    BT_INTEGER, di, GFC_STD_GNU,\n+\t\t    gfc_check_stat, NULL, gfc_resolve_lstat,\n+\t\t    nm, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t\t    vl, BT_INTEGER, di, REQUIRED, INTENT_OUT);\n \n   make_generic (\"lstat\", GFC_ISYM_LSTAT, GFC_STD_GNU);\n \n@@ -2690,9 +2645,11 @@ add_functions (void)\n \n   make_generic (\"sqrt\", GFC_ISYM_SQRT, GFC_STD_F77);\n \n-  add_sym_2 (\"stat\", GFC_ISYM_STAT, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n-\t     GFC_STD_GNU, gfc_check_stat, NULL, gfc_resolve_stat,\n-\t     nm, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n+  add_sym_2_intent (\"stat\", GFC_ISYM_STAT, CLASS_IMPURE, ACTUAL_NO,\n+\t\t    BT_INTEGER, di, GFC_STD_GNU,\n+\t\t    gfc_check_stat, NULL, gfc_resolve_stat,\n+\t\t    nm, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t\t    vl, BT_INTEGER, di, REQUIRED, INTENT_OUT);\n \n   make_generic (\"stat\", GFC_ISYM_STAT, GFC_STD_GNU);\n \n@@ -2876,44 +2833,48 @@ add_subroutines (void)\n \n   make_noreturn();\n \n-  add_sym_1s_intent (\"cpu_time\", GFC_ISYM_CPU_TIME, CLASS_IMPURE, BT_UNKNOWN, 0,\n-\t\t     GFC_STD_F95, gfc_check_cpu_time, NULL,\n-\t\t     gfc_resolve_cpu_time,\n-\t\t     tm, BT_REAL, dr, REQUIRED, INTENT_OUT);\n+  add_sym_1s (\"cpu_time\", GFC_ISYM_CPU_TIME, CLASS_IMPURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_F95, gfc_check_cpu_time, NULL, gfc_resolve_cpu_time,\n+\t      tm, BT_REAL, dr, REQUIRED, INTENT_OUT);\n \n   /* More G77 compatibility garbage.  */\n   add_sym_2s (\"ctime\", GFC_ISYM_CTIME, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ctime_sub, NULL, gfc_resolve_ctime_sub,\n-\t      tm, BT_INTEGER, di, REQUIRED, res, BT_CHARACTER, dc, REQUIRED);\n+\t      tm, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      res, BT_CHARACTER, dc, REQUIRED, INTENT_OUT);\n \n   add_sym_1s (\"idate\", GFC_ISYM_IDATE, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_itime_idate, NULL, gfc_resolve_idate,\n-\t      vl, BT_INTEGER, 4, REQUIRED);\n+\t      vl, BT_INTEGER, 4, REQUIRED, INTENT_OUT);\n \n   add_sym_1s (\"itime\", GFC_ISYM_ITIME, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_itime_idate, NULL, gfc_resolve_itime,\n-\t      vl, BT_INTEGER, 4, REQUIRED);\n+\t      vl, BT_INTEGER, 4, REQUIRED, INTENT_OUT);\n \n   add_sym_2s (\"ltime\", GFC_ISYM_LTIME, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ltime_gmtime, NULL, gfc_resolve_ltime,\n-\t      tm, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n+\t      tm, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      vl, BT_INTEGER, di, REQUIRED, INTENT_OUT);\n \n-  add_sym_2s (\"gmtime\", GFC_ISYM_GMTIME, CLASS_IMPURE, BT_UNKNOWN,\n-\t      0, GFC_STD_GNU, gfc_check_ltime_gmtime, NULL, gfc_resolve_gmtime,\n-\t      tm, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n+  add_sym_2s (\"gmtime\", GFC_ISYM_GMTIME, CLASS_IMPURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_GNU, gfc_check_ltime_gmtime, NULL, gfc_resolve_gmtime,\n+\t      tm, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      vl, BT_INTEGER, di, REQUIRED, INTENT_OUT);\n \n   add_sym_1s (\"second\", GFC_ISYM_SECOND, CLASS_IMPURE, BT_UNKNOWN, 0,\n \t      GFC_STD_GNU, gfc_check_second_sub, NULL, gfc_resolve_second_sub,\n-\t      tm, BT_REAL, dr, REQUIRED);\n+\t      tm, BT_REAL, dr, REQUIRED, INTENT_OUT);\n \n   add_sym_2s (\"chdir\", GFC_ISYM_CHDIR, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_chdir_sub, NULL, gfc_resolve_chdir_sub,\n-\t      name, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      name, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_3s (\"chmod\", GFC_ISYM_CHMOD, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_chmod_sub, NULL, gfc_resolve_chmod_sub,\n-\t      name, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED,\n-\t      st, BT_INTEGER, di, OPTIONAL);\n+\t      name, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      md, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_4s (\"date_and_time\", GFC_ISYM_DATE_AND_TIME, CLASS_IMPURE, BT_UNKNOWN,\n \t      0, GFC_STD_F95, gfc_check_date_and_time, NULL, NULL,\n@@ -2925,11 +2886,13 @@ add_subroutines (void)\n   /* More G77 compatibility garbage.  */\n   add_sym_2s (\"etime\", GFC_ISYM_ETIME, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_dtime_etime_sub, NULL, gfc_resolve_etime_sub,\n-\t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n+\t      vl, BT_REAL, 4, REQUIRED, INTENT_OUT,\n+\t      tm, BT_REAL, 4, REQUIRED, INTENT_OUT);\n \n   add_sym_2s (\"dtime\", GFC_ISYM_DTIME, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_dtime_etime_sub, NULL, gfc_resolve_dtime_sub,\n-\t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n+\t      vl, BT_REAL, 4, REQUIRED, INTENT_OUT,\n+\t      tm, BT_REAL, 4, REQUIRED, INTENT_OUT);\n \n   add_sym_5s (\"execute_command_line\", GFC_ISYM_EXECUTE_COMMAND_LINE,\n \t      CLASS_IMPURE , BT_UNKNOWN, 0, GFC_STD_F2008,\n@@ -2942,37 +2905,39 @@ add_subroutines (void)\n \n   add_sym_1s (\"fdate\", GFC_ISYM_FDATE, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fdate_sub, NULL, gfc_resolve_fdate_sub,\n-\t      dt, BT_CHARACTER, dc, REQUIRED);\n+\t      dt, BT_CHARACTER, dc, REQUIRED, INTENT_OUT);\n \n   add_sym_1s (\"gerror\", GFC_ISYM_GERROR, CLASS_IMPURE, BT_UNKNOWN,\n \t      0, GFC_STD_GNU, gfc_check_gerror, NULL, gfc_resolve_gerror,\n-\t      res, BT_CHARACTER, dc, REQUIRED);\n+\t      res, BT_CHARACTER, dc, REQUIRED, INTENT_OUT);\n \n   add_sym_2s (\"getcwd\", GFC_ISYM_GETCWD, CLASS_IMPURE, BT_UNKNOWN, 0,\n \t      GFC_STD_GNU, gfc_check_getcwd_sub, NULL, gfc_resolve_getcwd_sub,\n-\t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_OUT,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_2s (\"getenv\", GFC_ISYM_GETENV, CLASS_IMPURE, BT_UNKNOWN,\n \t      0, GFC_STD_GNU, NULL, NULL, NULL,\n-\t      name, BT_CHARACTER, dc, REQUIRED,\n-\t      val, BT_CHARACTER, dc, REQUIRED);\n+\t      name, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      val, BT_CHARACTER, dc, REQUIRED, INTENT_OUT);\n \n   add_sym_2s (\"getarg\", GFC_ISYM_GETARG, CLASS_IMPURE, BT_UNKNOWN,\n \t      0, GFC_STD_GNU, gfc_check_getarg, NULL, gfc_resolve_getarg,\n-\t      pos, BT_INTEGER, di, REQUIRED, val, BT_CHARACTER, dc, REQUIRED);\n+\t      pos, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      val, BT_CHARACTER, dc, REQUIRED, INTENT_OUT);\n \n   add_sym_1s (\"getlog\", GFC_ISYM_GETLOG, CLASS_IMPURE, BT_UNKNOWN,\n \t      0, GFC_STD_GNU, gfc_check_getlog, NULL, gfc_resolve_getlog,\n-\t      c, BT_CHARACTER, dc, REQUIRED);\n+\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_OUT);\n \n   /* F2003 commandline routines.  */\n \n-  add_sym_3s_intent (\"get_command\", GFC_ISYM_GET_COMMAND, CLASS_IMPURE,\n-\t\t     BT_UNKNOWN, 0, GFC_STD_F2003,\n-\t\t     NULL, NULL, gfc_resolve_get_command,\n-\t\t     com, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n-\t\t     length, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n-\t\t     st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n+  add_sym_3s (\"get_command\", GFC_ISYM_GET_COMMAND, CLASS_IMPURE,\n+\t      BT_UNKNOWN, 0, GFC_STD_F2003,\n+\t      NULL, NULL, gfc_resolve_get_command,\n+\t      com, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n+\t      length, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_4s (\"get_command_argument\", GFC_ISYM_GET_COMMAND_ARGUMENT,\n \t      CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_F2003, NULL, NULL,\n@@ -2993,11 +2958,11 @@ add_subroutines (void)\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n \t      trim_name, BT_LOGICAL, dl, OPTIONAL, INTENT_IN);\n \n-  add_sym_2s_intent (\"move_alloc\", GFC_ISYM_MOVE_ALLOC, CLASS_PURE,\n-\t\t     BT_UNKNOWN, 0, GFC_STD_F2003,\n-\t\t     gfc_check_move_alloc, NULL, NULL,\n-\t\t     f, BT_UNKNOWN, 0, REQUIRED, INTENT_INOUT,\n-\t\t     t, BT_UNKNOWN, 0, REQUIRED, INTENT_OUT);\n+  add_sym_2s (\"move_alloc\", GFC_ISYM_MOVE_ALLOC, CLASS_PURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_F2003,\n+\t      gfc_check_move_alloc, NULL, NULL,\n+\t      f, BT_UNKNOWN, 0, REQUIRED, INTENT_INOUT,\n+\t      t, BT_UNKNOWN, 0, REQUIRED, INTENT_OUT);\n \n   add_sym_5s (\"mvbits\", GFC_ISYM_MVBITS, CLASS_ELEMENTAL, BT_UNKNOWN, 0,\n \t      GFC_STD_F95, gfc_check_mvbits, gfc_simplify_mvbits,\n@@ -3008,59 +2973,64 @@ add_subroutines (void)\n \t      t, BT_INTEGER, di, REQUIRED, INTENT_INOUT,\n \t      tp, BT_INTEGER, di, REQUIRED, INTENT_IN);\n \n-  add_sym_1s_intent (\"random_number\", GFC_ISYM_RANDOM_NUMBER, CLASS_IMPURE,\n-\t\t     BT_UNKNOWN, 0, GFC_STD_F95, gfc_check_random_number, NULL,\n-\t\t     gfc_resolve_random_number,\n-\t\t     h, BT_REAL, dr, REQUIRED, INTENT_OUT);\n+  add_sym_1s (\"random_number\", GFC_ISYM_RANDOM_NUMBER, CLASS_IMPURE,\n+\t      BT_UNKNOWN, 0, GFC_STD_F95,\n+\t      gfc_check_random_number, NULL, gfc_resolve_random_number,\n+\t      h, BT_REAL, dr, REQUIRED, INTENT_OUT);\n \n-  add_sym_3s_intent (\"random_seed\", GFC_ISYM_RANDOM_SEED, CLASS_IMPURE,\n-\t\t     BT_UNKNOWN, 0, GFC_STD_F95,\n-\t\t     gfc_check_random_seed, NULL, gfc_resolve_random_seed,\n-\t\t     sz, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n-\t\t     pt, BT_INTEGER, di, OPTIONAL, INTENT_IN,\n-\t\t     gt, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n+  add_sym_3s (\"random_seed\", GFC_ISYM_RANDOM_SEED, CLASS_IMPURE,\n+\t      BT_UNKNOWN, 0, GFC_STD_F95,\n+\t      gfc_check_random_seed, NULL, gfc_resolve_random_seed,\n+\t      sz, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      pt, BT_INTEGER, di, OPTIONAL, INTENT_IN,\n+\t      gt, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   /* More G77 compatibility garbage.  */\n   add_sym_3s (\"alarm\", GFC_ISYM_ALARM, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_alarm_sub, NULL, gfc_resolve_alarm_sub,\n-\t      sec, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED,\n-\t      st, BT_INTEGER, di, OPTIONAL);\n+\t      sec, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      han, BT_UNKNOWN, 0, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_1s (\"srand\", GFC_ISYM_SRAND, CLASS_IMPURE, BT_UNKNOWN,\n \t      di, GFC_STD_GNU, gfc_check_srand, NULL, gfc_resolve_srand,\n-\t      \"seed\", BT_INTEGER, 4, REQUIRED);\n+\t      \"seed\", BT_INTEGER, 4, REQUIRED, INTENT_IN);\n \n   add_sym_1s (\"exit\", GFC_ISYM_EXIT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_exit, NULL, gfc_resolve_exit,\n-\t      st, BT_INTEGER, di, OPTIONAL);\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_IN);\n \n   make_noreturn();\n \n   add_sym_3s (\"fgetc\", GFC_ISYM_FGETC, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fgetc_sub,\n-\t      ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED,\n-\t      st, BT_INTEGER, di, OPTIONAL);\n+\t      ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_OUT,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_2s (\"fget\", GFC_ISYM_FGET, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fget_sub,\n-\t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_OUT,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_1s (\"flush\", GFC_ISYM_FLUSH, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_flush, NULL, gfc_resolve_flush,\n-\t      ut, BT_INTEGER, di, OPTIONAL);\n+\t      ut, BT_INTEGER, di, OPTIONAL, INTENT_IN);\n \n   add_sym_3s (\"fputc\", GFC_ISYM_FPUTC, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fputc_sub,\n-\t      ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED,\n-\t      st, BT_INTEGER, di, OPTIONAL);\n+\t      ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_2s (\"fput\", GFC_ISYM_FPUT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fput_sub,\n-\t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_1s (\"free\", GFC_ISYM_FREE, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_free, NULL, gfc_resolve_free,\n-\t      ptr, BT_INTEGER, ii, REQUIRED);\n+\t      ptr, BT_INTEGER, ii, REQUIRED, INTENT_INOUT);\n \n   add_sym_4s (\"fseek\", GFC_ISYM_FSEEK, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fseek_sub, NULL, gfc_resolve_fseek_sub,\n@@ -3071,82 +3041,96 @@ add_subroutines (void)\n \n   add_sym_2s (\"ftell\", GFC_ISYM_FTELL, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ftell_sub, NULL, gfc_resolve_ftell_sub,\n-\t      ut, BT_INTEGER, di, REQUIRED, of, BT_INTEGER, ii, REQUIRED);\n+\t      ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      of, BT_INTEGER, ii, REQUIRED, INTENT_OUT);\n \n   add_sym_2s (\"hostnm\", GFC_ISYM_HOSTNM, CLASS_IMPURE, BT_UNKNOWN, 0,\n \t      GFC_STD_GNU, gfc_check_hostnm_sub, NULL, gfc_resolve_hostnm_sub,\n-\t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_OUT,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n-  add_sym_3s (\"kill\", GFC_ISYM_KILL, CLASS_IMPURE, BT_UNKNOWN,\n-\t      0, GFC_STD_GNU, gfc_check_kill_sub,\n-\t      NULL, gfc_resolve_kill_sub, c, BT_INTEGER, di, REQUIRED,\n-\t      val, BT_INTEGER, di, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+  add_sym_3s (\"kill\", GFC_ISYM_KILL, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t      gfc_check_kill_sub, NULL, gfc_resolve_kill_sub,\n+\t      c, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      val, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_3s (\"link\", GFC_ISYM_LINK, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_link_sub, NULL, gfc_resolve_link_sub,\n-\t      p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER,\n-\t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      p1, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      p2, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_1s (\"perror\", GFC_ISYM_PERROR, CLASS_IMPURE, BT_UNKNOWN,\n \t      0, GFC_STD_GNU, gfc_check_perror, NULL, gfc_resolve_perror,\n-\t      \"string\", BT_CHARACTER, dc, REQUIRED);\n+\t      \"string\", BT_CHARACTER, dc, REQUIRED, INTENT_IN);\n \n   add_sym_3s (\"rename\", GFC_ISYM_RENAME, CLASS_IMPURE, BT_UNKNOWN, 0,\n \t      GFC_STD_GNU, gfc_check_rename_sub, NULL, gfc_resolve_rename_sub,\n-\t      p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER,\n-\t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      p1, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      p2, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_1s (\"sleep\", GFC_ISYM_SLEEP, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_sleep_sub, NULL, gfc_resolve_sleep_sub,\n-\t      sec, BT_INTEGER, di, REQUIRED);\n+\t      sec, BT_INTEGER, di, REQUIRED, INTENT_IN);\n \n   add_sym_3s (\"fstat\", GFC_ISYM_FSTAT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fstat_sub, NULL, gfc_resolve_fstat_sub,\n-\t      ut, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n-\t      st, BT_INTEGER, di, OPTIONAL);\n+\t      ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      vl, BT_INTEGER, di, REQUIRED, INTENT_OUT,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_3s (\"lstat\", GFC_ISYM_LSTAT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_stat_sub, NULL, gfc_resolve_lstat_sub,\n-\t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n-\t      st, BT_INTEGER, di, OPTIONAL);\n+\t      name, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      vl, BT_INTEGER, di, REQUIRED, INTENT_OUT,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_3s (\"stat\", GFC_ISYM_STAT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_stat_sub, NULL, gfc_resolve_stat_sub,\n-\t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n-\t      st, BT_INTEGER, di, OPTIONAL);\n+\t      name, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      vl, BT_INTEGER, di, REQUIRED, INTENT_OUT,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_3s (\"signal\", GFC_ISYM_SIGNAL, CLASS_IMPURE, BT_UNKNOWN, 0,\n \t      GFC_STD_GNU, gfc_check_signal_sub, NULL, gfc_resolve_signal_sub,\n-\t      num, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED,\n-\t      st, BT_INTEGER, di, OPTIONAL);\n+\t      num, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      han, BT_UNKNOWN, 0, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_3s (\"symlnk\", GFC_ISYM_SYMLINK, CLASS_IMPURE, BT_UNKNOWN, 0,\n \t      GFC_STD_GNU, gfc_check_symlnk_sub, NULL, gfc_resolve_symlnk_sub,\n-\t      p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER,\n-\t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      p1, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      p2, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_2s (\"system\", GFC_ISYM_SYSTEM, CLASS_IMPURE, BT_UNKNOWN,\n \t      0, GFC_STD_GNU, NULL, NULL, gfc_resolve_system_sub,\n-\t      com, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      com, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n-  add_sym_3s_intent (\"system_clock\", GFC_ISYM_SYSTEM_CLOCK, CLASS_IMPURE,\n-\t\t     BT_UNKNOWN, 0, GFC_STD_F95,\n-\t\t     gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n-\t\t     c, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n-\t\t     cr, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n-\t\t     cm, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n+  add_sym_3s (\"system_clock\", GFC_ISYM_SYSTEM_CLOCK, CLASS_IMPURE,\n+\t      BT_UNKNOWN, 0, GFC_STD_F95,\n+\t      gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n+\t      c, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      cr, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      cm, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_2s (\"ttynam\", GFC_ISYM_TTYNAM, CLASS_IMPURE, BT_UNKNOWN, 0,\n \t      GFC_STD_GNU, gfc_check_ttynam_sub, NULL, gfc_resolve_ttynam_sub,\n-\t      ut, BT_INTEGER, di, REQUIRED, name, BT_CHARACTER, dc, REQUIRED);\n+\t      ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      name, BT_CHARACTER, dc, REQUIRED, INTENT_OUT);\n \n   add_sym_2s (\"umask\", GFC_ISYM_UMASK, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_umask_sub, NULL, gfc_resolve_umask_sub,\n-\t      msk, BT_INTEGER, di, REQUIRED, old, BT_INTEGER, di, OPTIONAL);\n+\t      msk, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      old, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_2s (\"unlink\", GFC_ISYM_UNLINK, CLASS_IMPURE, BT_UNKNOWN, 0,\n \t      GFC_STD_GNU, gfc_check_unlink_sub, NULL, gfc_resolve_unlink_sub,\n-\t      \"path\", BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      \"path\", BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n }\n \n "}, {"sha": "d2b3b94dd38f0249adb674f5a90970fc4a9cf3cb", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a14a58c73942ef8c23114fd05f4fc6acf40a991/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a14a58c73942ef8c23114fd05f4fc6acf40a991/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=1a14a58c73942ef8c23114fd05f4fc6acf40a991", "patch": "@@ -4389,7 +4389,10 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL FGET(C [, STATUS])}\n+@multitable @columnfractions .80\n+@item @code{CALL FGET(C [, STATUS])}\n+@item @code{STATUS = FGET(C)}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -4451,7 +4454,10 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL FGETC(UNIT, C [, STATUS])}\n+@multitable @columnfractions .80\n+@item @code{CALL FGETC(UNIT, C [, STATUS])}\n+@item @code{STATUS = FGETC(UNIT, C)}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -4671,7 +4677,10 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL FPUT(C [, STATUS])}\n+@multitable @columnfractions .80\n+@item @code{CALL FPUT(C [, STATUS])}\n+@item @code{STATUS = FPUT(C)}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -4727,7 +4736,10 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL FPUTC(UNIT, C [, STATUS])}\n+@multitable @columnfractions .80\n+@item @code{CALL FPUTC(UNIT, C [, STATUS])}\n+@item @code{STATUS = FPUTC(UNIT, C)}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -4945,7 +4957,10 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL FSTAT(UNIT, VALUES [, STATUS])}\n+@multitable @columnfractions .80\n+@item @code{CALL FSTAT(UNIT, VALUES [, STATUS])}\n+@item @code{STATUS = FSTAT(UNIT, VALUES)}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5313,7 +5328,10 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL GETCWD(C [, STATUS])}\n+@multitable @columnfractions .80\n+@item @code{CALL GETCWD(C [, STATUS])}\n+@item @code{STATUS = GETCWD(C)}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -7034,7 +7052,10 @@ only one form can be used in any given program unit.\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL KILL(C, VALUE [, STATUS])}\n+@multitable @columnfractions .80\n+@item @code{CALL KILL(C, VALUE [, STATUS])}\n+@item @code{STATUS = KILL(C, VALUE)}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -7927,7 +7948,10 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL LSTAT(NAME, VALUES [, STATUS])}\n+@multitable @columnfractions .80\n+@item @code{CALL LSTAT(NAME, VALUES [, STATUS])}\n+@item @code{STATUS = LSTAT(NAME, VALUES)}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -11466,7 +11490,10 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL STAT(NAME, VALUES [, STATUS])}\n+@multitable @columnfractions .80\n+@item @code{CALL STAT(NAME, VALUES [, STATUS])}\n+@item @code{STATUS = STAT(NAME, VALUES)}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -12334,8 +12361,10 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL UMASK(MASK [, OLD])}\n-@code{OLD = UMASK(MASK)}\n+@multitable @columnfractions .80\n+@item @code{CALL UMASK(MASK [, OLD])}\n+@item @code{OLD = UMASK(MASK)}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70"}]}