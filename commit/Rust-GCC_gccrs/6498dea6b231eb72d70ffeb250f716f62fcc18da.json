{"sha": "6498dea6b231eb72d70ffeb250f716f62fcc18da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ5OGRlYTZiMjMxZWI3MmQ3MGZmZWIyNTBmNzE2ZjYyZmNjMThkYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-07-18T10:27:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-07-18T10:27:12Z"}, "message": "re PR c++/59480 (Missing error diagnostic: friend declaration specifying a default argument must be a definition)\n\n/cp\n2018-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* class.c (note_name_declared_in_class): Prefer permerror + inform\n\tto a pair of permerrors; use DECL_SOURCE_LOCATION.\n\n/testsuite\n2018-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/ext/uow-3.C: Adjust.\n\t* g++.dg/ext/uow-4.C: Likewise.\n\t* g++.dg/lookup/name-clash11.C: Likewise.\n\t* g++.dg/lookup/name-clash7.C: Likewise.\n\t* g++.dg/lookup/redecl1.C: Likewise.\n\t* g++.dg/warn/changes-meaning.C: Likewise.\n\t* g++.old-deja/g++.jason/scoping8.C: Likewise.\n\t* g++.old-deja/g++.law/nest1.C: Likewise.\n\n/cp\n2019-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/59480, DR 136\n\t* decl.c (check_no_redeclaration_friend_default_args): New.\n\t(duplicate_decls): Use the latter; also check that a friend\n\tdeclaration specifying default arguments is a definition.\n\n/testsuite\n2019-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/59480, DR 136\n\t* g++.dg/other/friend8.C: New.\n\t* g++.dg/other/friend9.C: Likewise.\n\t* g++.dg/other/friend10.C: Likewise.\n\t* g++.dg/other/friend11.C: Likewise.\n\t* g++.dg/other/friend12.C: Likewise.\n\t* g++.dg/parse/defarg4.C: Compile with -fpermissive -w.\n\t* g++.dg/parse/defarg8.C: Likewise.\n\nFrom-SVN: r262851", "tree": {"sha": "30d2740b6b32011ab9fb66e2b139f3f926b6bbb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30d2740b6b32011ab9fb66e2b139f3f926b6bbb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6498dea6b231eb72d70ffeb250f716f62fcc18da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6498dea6b231eb72d70ffeb250f716f62fcc18da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6498dea6b231eb72d70ffeb250f716f62fcc18da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6498dea6b231eb72d70ffeb250f716f62fcc18da/comments", "author": null, "committer": null, "parents": [{"sha": "0559979c6428e3b0dd5f181634a3c6775b3babd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0559979c6428e3b0dd5f181634a3c6775b3babd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0559979c6428e3b0dd5f181634a3c6775b3babd6"}], "stats": {"total": 206, "additions": 174, "deletions": 32}, "files": [{"sha": "e9574f3e9035b22fe3aad32bbb76b8a229fc1549", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -1,3 +1,15 @@\n+2019-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/59480, DR 136\n+\t* decl.c (check_no_redeclaration_friend_default_args): New.\n+\t(duplicate_decls): Use the latter; also check that a friend\n+\tdeclaration specifying default arguments is a definition.\n+\n+2018-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* class.c (note_name_declared_in_class): Prefer permerror + inform\n+\tto a pair of permerrors; use DECL_SOURCE_LOCATION.\n+\n 2018-07-18  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/86523"}, {"sha": "4300c5cacf39025a4e090c0c974eeda3bb51eb37", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -8285,10 +8285,12 @@ note_name_declared_in_class (tree name, tree decl)\n \t A name N used in a class S shall refer to the same declaration\n \t in its context and when re-evaluated in the completed scope of\n \t S.  */\n-      permerror (input_location, \"declaration of %q#D\", decl);\n-      permerror (location_of ((tree) n->value),\n-\t\t \"changes meaning of %qD from %q#D\",\n-\t\t OVL_NAME (decl), (tree) n->value);\n+      if (permerror (DECL_SOURCE_LOCATION (decl),\n+\t\t     \"declaration of %q#D changes meaning of %qD\",\n+\t\t     decl, OVL_NAME (decl)))\n+\tinform (location_of ((tree) n->value),\n+\t\t\"%qD declared here as %q#D\",\n+\t\tOVL_NAME (decl), (tree) n->value);\n     }\n }\n "}, {"sha": "5239ffd5a076d30210e3a25373ca3c10bad47da3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -1280,6 +1280,39 @@ check_redeclaration_no_default_args (tree decl)\n       }\n }\n \n+/* NEWDECL is a redeclaration of a function or function template OLDDECL.\n+   If either the declaration or the redeclaration is a friend declaration\n+   and specifies default arguments issue a diagnostic.   Note: this is to\n+   enforce C++17 11.3.6/4: \"If a friend declaration specifies a default\n+   argument expression, that declaration... shall be the only declaration\n+   of the function or function template in the translation unit.\"  */\n+\n+static void\n+check_no_redeclaration_friend_default_args (tree olddecl, tree newdecl)\n+{\n+  bool olddecl_friend_p = DECL_FRIEND_P (STRIP_TEMPLATE (olddecl));\n+  bool newdecl_friend_p = DECL_FRIEND_P (STRIP_TEMPLATE (newdecl));\n+\n+  if (!olddecl_friend_p && !newdecl_friend_p)\n+    return;\n+\n+  tree t1 = FUNCTION_FIRST_USER_PARMTYPE (olddecl);\n+  tree t2 = FUNCTION_FIRST_USER_PARMTYPE (newdecl);\n+\n+  for (; t1 && t1 != void_list_node;\n+       t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n+    if ((olddecl_friend_p && TREE_PURPOSE (t1))\n+\t|| (newdecl_friend_p && TREE_PURPOSE (t2)))\n+      {\n+\tif (permerror (DECL_SOURCE_LOCATION (newdecl),\n+\t\t       \"friend declaration of %q#D specifies default \"\n+\t\t       \"arguments and isn't the only declaration\", newdecl))\n+\t  inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t  \"previous declaration of %q#D\", olddecl);\n+\treturn;\n+      }\n+}\n+\n /* Merge tree bits that correspond to attributes noreturn, nothrow,\n    const,  malloc, and pure from NEWDECL with those of OLDDECL.  */\n \n@@ -1876,6 +1909,12 @@ next_arg:;\n \t\t\t\tolddecl);\n \t\t      }\n \t\t  }\n+\n+\t      /* C++17 11.3.6/4: \"If a friend declaration specifies a default\n+\t\t argument expression, that declaration... shall be the only\n+\t\t declaration of the function or function template in the\n+\t\t translation unit.\"  */\n+\t      check_no_redeclaration_friend_default_args (olddecl, newdecl);\n \t    }\n \t}\n     }\n@@ -2008,11 +2047,18 @@ next_arg:;\n \n       if (DECL_FUNCTION_TEMPLATE_P (newdecl))\n \t{\n-\t  /* Per C++11 8.3.6/4, default arguments cannot be added in later\n-\t     declarations of a function template.  */\n \t  if (DECL_SOURCE_LOCATION (newdecl)\n \t      != DECL_SOURCE_LOCATION (olddecl))\n-\t    check_redeclaration_no_default_args (newdecl);\n+\t    {\n+\t      /* Per C++11 8.3.6/4, default arguments cannot be added in\n+\t\t later declarations of a function template.  */\n+\t      check_redeclaration_no_default_args (newdecl);\n+\t      /* C++17 11.3.6/4: \"If a friend declaration specifies a default\n+\t\t argument expression, that declaration... shall be the only\n+\t\t declaration of the function or function template in the\n+\t\t translation unit.\"  */\n+\t      check_no_redeclaration_friend_default_args (olddecl, newdecl);\n+\t    }\n \n \t  check_default_args (newdecl);\n \n@@ -8763,6 +8809,21 @@ grokfndecl (tree ctype,\n \t}\n     }\n \n+  /* C++17 11.3.6/4: \"If a friend declaration specifies a default argument\n+     expression, that declaration shall be a definition...\"  */\n+  if (friendp && !funcdef_flag)\n+    {\n+      for (tree t = FUNCTION_FIRST_USER_PARMTYPE (decl);\n+\t   t && t != void_list_node; t = TREE_CHAIN (t))\n+\tif (TREE_PURPOSE (t))\n+\t  {\n+\t    permerror (DECL_SOURCE_LOCATION (decl),\n+\t\t       \"friend declaration of %qD specifies default \"\n+\t\t       \"arguments and isn't a definition\", decl);\n+\t    break;\n+\t  }\n+    }\n+\n   /* If this decl has namespace scope, set that up.  */\n   if (in_namespace)\n     set_decl_namespace (decl, in_namespace, friendp);"}, {"sha": "b9b89224fc24af511e32b6eb9e8aef9ce057779a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -1,3 +1,25 @@\n+2019-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/59480, DR 136\n+\t* g++.dg/other/friend8.C: New.\n+\t* g++.dg/other/friend9.C: Likewise.\n+\t* g++.dg/other/friend10.C: Likewise.\n+\t* g++.dg/other/friend11.C: Likewise.\n+\t* g++.dg/other/friend12.C: Likewise.\n+\t* g++.dg/parse/defarg4.C: Compile with -fpermissive -w.\n+\t* g++.dg/parse/defarg8.C: Likewise.\n+\n+2018-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/ext/uow-3.C: Adjust.\n+\t* g++.dg/ext/uow-4.C: Likewise.\n+\t* g++.dg/lookup/name-clash11.C: Likewise.\n+\t* g++.dg/lookup/name-clash7.C: Likewise.\n+\t* g++.dg/lookup/redecl1.C: Likewise.\n+\t* g++.dg/warn/changes-meaning.C: Likewise.\n+\t* g++.old-deja/g++.jason/scoping8.C: Likewise.\n+\t* g++.old-deja/g++.law/nest1.C: Likewise.\n+\n 2018-07-18  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/86523"}, {"sha": "9378c62564a9e1f98cd77b6f677feeec2d04c541", "filename": "gcc/testsuite/g++.dg/ext/uow-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fuow-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fuow-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fuow-3.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wall\" } */\n \n-typedef int UOW;  /* { dg-error \"\" } */\n+typedef int UOW;  /* { dg-message \"declared here\" } */\n struct ABC {\n-  UOW UOW; /* { dg-error \"\" } */\n+  UOW UOW; /* { dg-error \"changes meaning\" } */\n };\n "}, {"sha": "73a3a6fa11c61f6372f56cca7e9675688f2f727e", "filename": "gcc/testsuite/g++.dg/ext/uow-4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fuow-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fuow-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fuow-4.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -3,9 +3,9 @@\n \n extern \"C\" {\n \n-typedef int UOW;  /* { dg-error \"\" } */\n+typedef int UOW;  /* { dg-message \"declared here\" } */\n struct ABC {\n-  UOW UOW; /* { dg-error \"\" } */\n+  UOW UOW; /* { dg-error \"changes meaning\" } */\n };\n \n }"}, {"sha": "bc63645e8d3948b77c1b89e461ac90bb66281873", "filename": "gcc/testsuite/g++.dg/lookup/name-clash11.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash11.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -13,23 +13,23 @@\n \n void test_bitset ()\n {\n-  int x;                        // { dg-warning \"changes meaning\" }\n+  int x;                        // { dg-message \"declared here\" }\n \n   {\n     struct S {\n-      int x: sizeof x;          // { dg-warning \"declaration\" }\n+      int x: sizeof x;          // { dg-warning \"changes meaning\" }\n     };\n   }\n }\n \n void test_enum ()\n {\n   // Also exercise (not covered by c++/69023):\n-  int y;                        // { dg-warning \"changes meaning\" }\n+  int y;                        // { dg-message \"declared here\" }\n   {\n     struct S {\n       enum E {\n-        y = sizeof y            // { dg-warning \"declaration\" }\n+        y = sizeof y            // { dg-warning \"9:declaration of .y. changes meaning\" }\n       };\n \n       // Verify the enumerator has the correct value.\n@@ -40,15 +40,15 @@ void test_enum ()\n \n void test_alignas ()\n {\n-  enum { A = 16 };              // { dg-warning \"changes meaning\" }\n+  enum { A = 16 };              // { dg-message \"declared here\" }\n   {\n     struct S {\n #if __cplusplus >= 201103L\n       alignas (A)\n #else\n       __attribute__ ((aligned (A)))\n #endif\n-      int A;                    // { dg-warning \"declaration\" }\n+      int A;                    // { dg-warning \"changes meaning\" }\n \n       // Verify the member has the correct alignment.\n       void test () { ASSERT (__alignof__ (this->A) == 16); }\n@@ -58,10 +58,10 @@ void test_alignas ()\n \n void test_array ()\n {\n-  enum { A = 16 };              // { dg-warning \"changes meaning\" }\n+  enum { A = 16 };              // { dg-message \"declared here\" }\n   {\n     struct S {\n-      int A [A];                // { dg-warning \"declaration\" }\n+      int A [A];                // { dg-warning \"changes meaning\" }\n \n       // Verify the member has the correct alignment.\n       void test () { ASSERT (sizeof (this->A) == 16 * sizeof (int)); }\n@@ -71,10 +71,10 @@ void test_array ()\n \n void test_vector ()\n {\n-  enum { A = 16 };              // { dg-warning \"changes meaning\" }\n+  enum { A = 16 };              // { dg-message \"declared here\" }\n   {\n     struct S {\n-      int A __attribute__ ((vector_size (A))); // { dg-warning \"declaration\" }\n+      int A __attribute__ ((vector_size (A))); // { dg-warning \"changes meaning\" }\n \n       // Verify the member has the correct size.\n       void test () { ASSERT (sizeof (this->A) == 16); }"}, {"sha": "cc27181744d96ac85331401246e22965a5f3e9ac", "filename": "gcc/testsuite/g++.dg/lookup/name-clash7.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash7.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -1,11 +1,11 @@\n // PR c++/28513\n \n-class foo {\t\t\t// { dg-error \"changes meaning\" }\n+class foo {\t\t\t// { dg-message \"declared here\" }\n public:\n   typedef int bar;\n };\n \n class baz {\n public:\n-  foo::bar foo;\t\t\t// { dg-error \"declaration\" }\n+  foo::bar foo;\t\t\t// { dg-error \"changes meaning\" }\n };"}, {"sha": "b105be25e759a32379397f553baacfae8fb7c478", "filename": "gcc/testsuite/g++.dg/lookup/redecl1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fredecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fredecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fredecl1.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -1,7 +1,7 @@\n // PR c++/14668\n \n-class A {}; // { dg-error \"\" }\n+class A {}; // { dg-message \"declared here\" }\n class B { \n-  static A *A; // { dg-error \"\" }\n+  static A *A; // { dg-error \"changes meaning\" }\n }; \n A *B::A = 0;"}, {"sha": "c162395210b8f192f65a60d53b972e7bde4dbfde", "filename": "gcc/testsuite/g++.dg/other/friend10.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend10.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/59480\n+\n+class test {\n+  friend int foo(bool = true) { return 1; }  // { dg-message \"14:previous\" }\n+  template<typename> friend int bar(bool = true) { return 1; }  // { dg-message \"33:previous\" }\n+};\n+\n+int foo(bool);  // { dg-error \"5:friend declaration\" }\n+template<typename> int bar(bool);  // { dg-error \"24:friend declaration\" }"}, {"sha": "b82b39ddbe371f2b17dceac09da031878dedbf58", "filename": "gcc/testsuite/g++.dg/other/friend11.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend11.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/59480\n+\n+class test {\n+  friend int foo(bool = true) { return 1; }  // { dg-message \"14:previous\" }\n+  friend int foo(bool);  // { dg-error \"14:friend declaration\" }\n+  template<typename> friend int bar(bool = true) { return 1; }  // { dg-message \"33:previous\" }\n+  template<typename> friend int bar(bool);  // { dg-error \"33:friend declaration\" }\n+};"}, {"sha": "b78ce4b078c4e87e8b40cbda93c463dea208cbc4", "filename": "gcc/testsuite/g++.dg/other/friend12.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend12.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/59480\n+\n+template<typename>\n+class test {\n+  friend int foo(bool = true) { return 1; }  // { dg-message \"14:previous\" }\n+  friend int foo(bool);  // { dg-error \"14:friend declaration\" }\n+  template<typename> friend int bar(bool = true) { return 1; }  // { dg-message \"33:previous\" }\n+  template<typename> friend int bar(bool);  // { dg-error \"33:friend declaration\" }\n+};\n+\n+template class test<bool>;"}, {"sha": "6b5df88d6a48c673a72370b4231c7331b0e3e4c8", "filename": "gcc/testsuite/g++.dg/other/friend8.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend8.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/59480\n+\n+class test {\n+  friend int foo(bool = true);  // { dg-error \"14:friend declaration\" }\n+  template<typename> friend int bar(bool = true);  // { dg-error \"33:friend declaration\" }\n+};"}, {"sha": "16b4f57335d3aad28621935e5ccc99e94d13841e", "filename": "gcc/testsuite/g++.dg/other/friend9.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend9.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/59480\n+\n+template<typename>\n+class test {\n+  friend int foo(bool = true);  // { dg-error \"14:friend declaration\" }\n+  template<typename> friend int bar(bool = true);  // { dg-error \"33:friend declaration\" }\n+};\n+\n+template class test<bool>;"}, {"sha": "ad8a1ed6c65c65a5b87f3e06a5dba5eea05f2e95", "filename": "gcc/testsuite/g++.dg/parse/defarg4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile }\n+// { dg-options \"-fpermissive -w\" }\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 3 Jul 2003 <nathan@codesourcery.com>"}, {"sha": "33100069eadf94c30455a714413a81f71b40790c", "filename": "gcc/testsuite/g++.dg/parse/defarg8.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg8.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-fpermissive -w\" }\n+\n struct A {\n   static void g(int);\n };"}, {"sha": "0b9fc4cbe8ed41521cb3e0861652a28351ae7334", "filename": "gcc/testsuite/g++.dg/warn/changes-meaning.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fchanges-meaning.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fchanges-meaning.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fchanges-meaning.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-fpermissive\" } */\n \n-template <class _Tp> class auto_ptr {};  /* { dg-warning \"changes meaning\" } */\n+template <class _Tp> class auto_ptr {};  /* { dg-message \"declared here\" } */\n template <class _Tp>\n class counted_ptr\n {\n public:\n-  auto_ptr<_Tp> auto_ptr(); /* { dg-warning \"\" } */\n+  auto_ptr<_Tp> auto_ptr(); /* { dg-warning \"17:declaration of .auto_ptr\\\\<_Tp\\\\>\" } */\n };\n "}, {"sha": "fe3b33646014dbd6c3f14fe3a4e328f1edee87cf", "filename": "gcc/testsuite/g++.old-deja/g++.jason/scoping8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping8.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -1,8 +1,8 @@\n // { dg-do assemble  }\n // Bug: g++ allows two different meanings of a name in the same scope.\n \n-typedef int foo;\t\t// { dg-error \"\" } \n+typedef int foo;\t\t// { dg-message \"declared here\" }\n struct A {\n   A (foo);\n-  int foo ();\t\t\t// { dg-error \"\" } foo already used in scope\n+  int foo ();\t\t\t// { dg-error \"changes meaning\" }\n };"}, {"sha": "68ad6ae987a0097e324bceaebf3fc45de68f5d48", "filename": "gcc/testsuite/g++.old-deja/g++.law/nest1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fnest1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6498dea6b231eb72d70ffeb250f716f62fcc18da/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fnest1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fnest1.C?ref=6498dea6b231eb72d70ffeb250f716f62fcc18da", "patch": "@@ -6,10 +6,10 @@\n // Subject:  Local type names bug in g++ 2.3.3\n // Message-ID: <1992Dec30.203807.17504@murdoch.acc.Virginia.EDU>\n \n-typedef char* T; // { dg-error \"\" } previous declaration\n+typedef char* T; // { dg-message \"declared here\" }\n \n struct Y {\n     T a;\n-    typedef long T; // error. See ARM p189-191 for details// { dg-error \"\" } \n+    typedef long T; // { dg-error \"changes meaning\" } \n     T b;\n };"}]}