{"sha": "217ccab8f46ca5b260319e7b71b421daec6d11c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE3Y2NhYjhmNDZjYTViMjYwMzE5ZTdiNzFiNDIxZGFlYzZkMTFjOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-16T11:11:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-16T11:11:47Z"}, "message": "[AArch64] Pattern-match SVE extending loads\n\nThis patch pattern-matches a partial SVE load followed by a sign or zero\nextension into an extending load.  (The partial load is already an\nextending load; we just don't rely on the upper bits of the elements.)\n\nNothing yet uses the extra LDFF1 and LDNF1 combinations, but it seemed\nmore consistent to provide them, since I needed to update the pattern\nto use a predicated extension anyway.\n\n2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md\n\t(@aarch64_load_<ANY_EXTEND:optab><VNx8_WIDE:mode><VNx8_NARROW:mode>):\n\t(@aarch64_load_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>)\n\t(@aarch64_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>):\n\tCombine into...\n\t(@aarch64_load_<ANY_EXTEND:optab><SVE_HSDI:mode><SVE_PARTIAL_I:mode>):\n\t...this new pattern, handling extension to partial modes as well\n\tas full modes.  Describe the extension as a predicated rather than\n\tunpredicated extension.\n\t(@aarch64_ld<fn>f1_<ANY_EXTEND:optab><VNx8_WIDE:mode><VNx8_NARROW:mode>)\n\t(@aarch64_ld<fn>f1_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>)\n\t(@aarch64_ld<fn>f1_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>):\n\tCombine into...\n\t(@aarch64_ld<fn>f1_<ANY_EXTEND:optab><SVE_HSDI:mode><SVE_PARTIAL_I:mode>):\n\t...this new pattern, handling extension to partial modes as well\n\tas full modes.  Describe the extension as a predicated rather than\n\tunpredicated extension.\n\t* config/aarch64/aarch64-sve-builtins.cc\n\t(function_expander::use_contiguous_load_insn): Add an extra\n\tpredicate for extending loads.\n\t* config/aarch64/aarch64.c (aarch64_extending_load_p): New function.\n\t(aarch64_sve_adjust_stmt_cost): Likewise.\n\t(aarch64_add_stmt_cost): Use aarch64_sve_adjust_stmt_cost to adjust\n\tthe cost of SVE vector stmts.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/load_extend_1.c: New test.\n\t* gcc.target/aarch64/sve/load_extend_2.c: Likewise.\n\t* gcc.target/aarch64/sve/load_extend_3.c: Likewise.\n\t* gcc.target/aarch64/sve/load_extend_4.c: Likewise.\n\t* gcc.target/aarch64/sve/load_extend_5.c: Likewise.\n\t* gcc.target/aarch64/sve/load_extend_6.c: Likewise.\n\t* gcc.target/aarch64/sve/load_extend_7.c: Likewise.\n\t* gcc.target/aarch64/sve/load_extend_8.c: Likewise.\n\t* gcc.target/aarch64/sve/load_extend_9.c: Likewise.\n\t* gcc.target/aarch64/sve/load_extend_10.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_4.c: Add\n\t--param aarch64-sve-compare-costs=0.\n\nFrom-SVN: r278343", "tree": {"sha": "a3ef07b19bc12a62c9612d4bf2d8179469013b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3ef07b19bc12a62c9612d4bf2d8179469013b49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/217ccab8f46ca5b260319e7b71b421daec6d11c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/217ccab8f46ca5b260319e7b71b421daec6d11c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/217ccab8f46ca5b260319e7b71b421daec6d11c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/217ccab8f46ca5b260319e7b71b421daec6d11c8/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e58703e2c1b09d39714740e00933d32df965de32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58703e2c1b09d39714740e00933d32df965de32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58703e2c1b09d39714740e00933d32df965de32"}], "stats": {"total": 433, "additions": 358, "deletions": 75}, "files": [{"sha": "83931c5643082689d17241d490d1eebd138a564d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -1,3 +1,30 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md\n+\t(@aarch64_load_<ANY_EXTEND:optab><VNx8_WIDE:mode><VNx8_NARROW:mode>):\n+\t(@aarch64_load_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>)\n+\t(@aarch64_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>):\n+\tCombine into...\n+\t(@aarch64_load_<ANY_EXTEND:optab><SVE_HSDI:mode><SVE_PARTIAL_I:mode>):\n+\t...this new pattern, handling extension to partial modes as well\n+\tas full modes.  Describe the extension as a predicated rather than\n+\tunpredicated extension.\n+\t(@aarch64_ld<fn>f1_<ANY_EXTEND:optab><VNx8_WIDE:mode><VNx8_NARROW:mode>)\n+\t(@aarch64_ld<fn>f1_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>)\n+\t(@aarch64_ld<fn>f1_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>):\n+\tCombine into...\n+\t(@aarch64_ld<fn>f1_<ANY_EXTEND:optab><SVE_HSDI:mode><SVE_PARTIAL_I:mode>):\n+\t...this new pattern, handling extension to partial modes as well\n+\tas full modes.  Describe the extension as a predicated rather than\n+\tunpredicated extension.\n+\t* config/aarch64/aarch64-sve-builtins.cc\n+\t(function_expander::use_contiguous_load_insn): Add an extra\n+\tpredicate for extending loads.\n+\t* config/aarch64/aarch64.c (aarch64_extending_load_p): New function.\n+\t(aarch64_sve_adjust_stmt_cost): Likewise.\n+\t(aarch64_add_stmt_cost): Use aarch64_sve_adjust_stmt_cost to adjust\n+\tthe cost of SVE vector stmts.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (SVE_HSDI): New mode iterator."}, {"sha": "27736b99f1b129dc22131a4df25bb975f8b23d28", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -2790,7 +2790,9 @@ function_expander::use_vcond_mask_insn (insn_code icode,\n }\n \n /* Implement the call using instruction ICODE, which loads memory operand 1\n-   into register operand 0 under the control of predicate operand 2.  */\n+   into register operand 0 under the control of predicate operand 2.\n+   Extending loads have a further predicate (operand 3) that nominally\n+   controls the extension.  */\n rtx\n function_expander::use_contiguous_load_insn (insn_code icode)\n {\n@@ -2799,6 +2801,8 @@ function_expander::use_contiguous_load_insn (insn_code icode)\n   add_output_operand (icode);\n   add_mem_operand (mem_mode, get_contiguous_base (mem_mode));\n   add_input_operand (icode, args[0]);\n+  if (GET_MODE_UNIT_BITSIZE (mem_mode) < type_suffix (0).element_bits)\n+    add_input_operand (icode, CONSTM1_RTX (VNx16BImode));\n   return generate_insn (icode);\n }\n "}, {"sha": "ce1bd58c0b99c15fec9ad1fb1b9d9450a9f36e4c", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 34, "deletions": 73, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -1189,39 +1189,22 @@\n ;; -------------------------------------------------------------------------\n \n ;; Predicated load and extend, with 8 elements per 128-bit block.\n-(define_insn \"@aarch64_load_<ANY_EXTEND:optab><VNx8_WIDE:mode><VNx8_NARROW:mode>\"\n-  [(set (match_operand:VNx8_WIDE 0 \"register_operand\" \"=w\")\n-\t(ANY_EXTEND:VNx8_WIDE\n-\t  (unspec:VNx8_NARROW\n-\t    [(match_operand:VNx8BI 2 \"register_operand\" \"Upl\")\n-\t     (match_operand:VNx8_NARROW 1 \"memory_operand\" \"m\")]\n-\t    UNSPEC_LD1_SVE)))]\n-  \"TARGET_SVE\"\n-  \"ld1<ANY_EXTEND:s><VNx8_NARROW:Vesize>\\t%0.<VNx8_WIDE:Vetype>, %2/z, %1\"\n-)\n-\n-;; Predicated load and extend, with 4 elements per 128-bit block.\n-(define_insn \"@aarch64_load_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>\"\n-  [(set (match_operand:VNx4_WIDE 0 \"register_operand\" \"=w\")\n-\t(ANY_EXTEND:VNx4_WIDE\n-\t  (unspec:VNx4_NARROW\n-\t    [(match_operand:VNx4BI 2 \"register_operand\" \"Upl\")\n-\t     (match_operand:VNx4_NARROW 1 \"memory_operand\" \"m\")]\n-\t    UNSPEC_LD1_SVE)))]\n-  \"TARGET_SVE\"\n-  \"ld1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.<VNx4_WIDE:Vetype>, %2/z, %1\"\n-)\n-\n-;; Predicated load and extend, with 2 elements per 128-bit block.\n-(define_insn \"@aarch64_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>\"\n-  [(set (match_operand:VNx2_WIDE 0 \"register_operand\" \"=w\")\n-\t(ANY_EXTEND:VNx2_WIDE\n-\t  (unspec:VNx2_NARROW\n-\t    [(match_operand:VNx2BI 2 \"register_operand\" \"Upl\")\n-\t     (match_operand:VNx2_NARROW 1 \"memory_operand\" \"m\")]\n-\t    UNSPEC_LD1_SVE)))]\n-  \"TARGET_SVE\"\n-  \"ld1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.<VNx2_WIDE:Vetype>, %2/z, %1\"\n+(define_insn_and_rewrite \"@aarch64_load_<ANY_EXTEND:optab><SVE_HSDI:mode><SVE_PARTIAL_I:mode>\"\n+  [(set (match_operand:SVE_HSDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_HSDI\n+\t  [(match_operand:<SVE_HSDI:VPRED> 3 \"general_operand\" \"UplDnm\")\n+\t   (ANY_EXTEND:SVE_HSDI\n+\t     (unspec:SVE_PARTIAL_I\n+\t       [(match_operand:<SVE_PARTIAL_I:VPRED> 2 \"register_operand\" \"Upl\")\n+\t\t(match_operand:SVE_PARTIAL_I 1 \"memory_operand\" \"m\")]\n+\t       UNSPEC_LD1_SVE))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE && (~<SVE_HSDI:narrower_mask> & <SVE_PARTIAL_I:self_mask>) == 0\"\n+  \"ld1<ANY_EXTEND:s><SVE_PARTIAL_I:Vesize>\\t%0.<SVE_HSDI:Vctype>, %2/z, %1\"\n+  \"&& !CONSTANT_P (operands[3])\"\n+  {\n+    operands[3] = CONSTM1_RTX (<SVE_HSDI:VPRED>mode);\n+  }\n )\n \n ;; -------------------------------------------------------------------------\n@@ -1268,46 +1251,24 @@\n ;; - LDNF1W\n ;; -------------------------------------------------------------------------\n \n-;; Predicated first-faulting or non-faulting load and extend, with 8 elements\n-;; per 128-bit block.\n-(define_insn \"@aarch64_ld<fn>f1_<ANY_EXTEND:optab><VNx8_WIDE:mode><VNx8_NARROW:mode>\"\n-  [(set (match_operand:VNx8_WIDE 0 \"register_operand\" \"=w\")\n-\t(ANY_EXTEND:VNx8_WIDE\n-\t  (unspec:VNx8_NARROW\n-\t    [(match_operand:VNx8BI 2 \"register_operand\" \"Upl\")\n-\t     (match_operand:VNx8_NARROW 1 \"aarch64_sve_ld<fn>f1_operand\" \"Ut<fn>\")\n-\t     (reg:VNx16BI FFRT_REGNUM)]\n-\t    SVE_LDFF1_LDNF1)))]\n-  \"TARGET_SVE\"\n-  \"ld<fn>f1<ANY_EXTEND:s><VNx8_NARROW:Vesize>\\t%0.<VNx8_WIDE:Vetype>, %2/z, %1\"\n-)\n-\n-;; Predicated first-faulting or non-faulting load and extend, with 4 elements\n-;; per 128-bit block.\n-(define_insn \"@aarch64_ld<fn>f1_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>\"\n-  [(set (match_operand:VNx4_WIDE 0 \"register_operand\" \"=w\")\n-\t(ANY_EXTEND:VNx4_WIDE\n-\t  (unspec:VNx4_NARROW\n-\t    [(match_operand:VNx4BI 2 \"register_operand\" \"Upl\")\n-\t     (match_operand:VNx4_NARROW 1 \"aarch64_sve_ld<fn>f1_operand\" \"Ut<fn>\")\n-\t     (reg:VNx16BI FFRT_REGNUM)]\n-\t    SVE_LDFF1_LDNF1)))]\n-  \"TARGET_SVE\"\n-  \"ld<fn>f1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.<VNx4_WIDE:Vetype>, %2/z, %1\"\n-)\n-\n-;; Predicated first-faulting or non-faulting load and extend, with 2 elements\n-;; per 128-bit block.\n-(define_insn \"@aarch64_ld<fn>f1_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>\"\n-  [(set (match_operand:VNx2_WIDE 0 \"register_operand\" \"=w\")\n-\t(ANY_EXTEND:VNx2_WIDE\n-\t  (unspec:VNx2_NARROW\n-\t    [(match_operand:VNx2BI 2 \"register_operand\" \"Upl\")\n-\t     (match_operand:VNx2_NARROW 1 \"aarch64_sve_ld<fn>f1_operand\" \"Ut<fn>\")\n-\t     (reg:VNx16BI FFRT_REGNUM)]\n-\t    SVE_LDFF1_LDNF1)))]\n-  \"TARGET_SVE\"\n-  \"ld<fn>f1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.<VNx2_WIDE:Vetype>, %2/z, %1\"\n+;; Predicated first-faulting or non-faulting load and extend.\n+(define_insn_and_rewrite \"@aarch64_ld<fn>f1_<ANY_EXTEND:optab><SVE_HSDI:mode><SVE_PARTIAL_I:mode>\"\n+  [(set (match_operand:SVE_HSDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_HSDI\n+\t  [(match_operand:<SVE_HSDI:VPRED> 3 \"general_operand\" \"UplDnm\")\n+\t   (ANY_EXTEND:SVE_HSDI\n+\t     (unspec:SVE_PARTIAL_I\n+\t       [(match_operand:<SVE_PARTIAL_I:VPRED> 2 \"register_operand\" \"Upl\")\n+\t\t(match_operand:SVE_PARTIAL_I 1 \"aarch64_sve_ld<fn>f1_operand\" \"Ut<fn>\")\n+\t\t(reg:VNx16BI FFRT_REGNUM)]\n+\t       SVE_LDFF1_LDNF1))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE && (~<SVE_HSDI:narrower_mask> & <SVE_PARTIAL_I:self_mask>) == 0\"\n+  \"ld<fn>f1<ANY_EXTEND:s><SVE_PARTIAL_I:Vesize>\\t%0.<SVE_HSDI:Vctype>, %2/z, %1\"\n+  \"&& !CONSTANT_P (operands[3])\"\n+  {\n+    operands[3] = CONSTM1_RTX (<SVE_HSDI:VPRED>mode);\n+  }\n )\n \n ;; -------------------------------------------------------------------------"}, {"sha": "305c6da2316ac1d6510b7b3bb753abbb37ec8ade", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -12879,6 +12879,49 @@ aarch64_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n     }\n }\n \n+/* Return true if STMT_INFO extends the result of a load.  */\n+static bool\n+aarch64_extending_load_p (stmt_vec_info stmt_info)\n+{\n+  gassign *assign = dyn_cast <gassign *> (stmt_info->stmt);\n+  if (!assign || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (assign)))\n+    return false;\n+\n+  tree rhs = gimple_assign_rhs1 (stmt_info->stmt);\n+  tree lhs_type = TREE_TYPE (gimple_assign_lhs (assign));\n+  tree rhs_type = TREE_TYPE (rhs);\n+  if (!INTEGRAL_TYPE_P (lhs_type)\n+      || !INTEGRAL_TYPE_P (rhs_type)\n+      || TYPE_PRECISION (lhs_type) <= TYPE_PRECISION (rhs_type))\n+    return false;\n+\n+  stmt_vec_info def_stmt_info = stmt_info->vinfo->lookup_def (rhs);\n+  return (def_stmt_info\n+\t  && STMT_VINFO_DATA_REF (def_stmt_info)\n+\t  && DR_IS_READ (STMT_VINFO_DATA_REF (def_stmt_info)));\n+}\n+\n+/* STMT_COST is the cost calculated by aarch64_builtin_vectorization_cost\n+   for STMT_INFO, which has cost kind KIND.  Adjust the cost as necessary\n+   for SVE targets.  */\n+static unsigned int\n+aarch64_sve_adjust_stmt_cost (vect_cost_for_stmt kind, stmt_vec_info stmt_info,\n+\t\t\t      unsigned int stmt_cost)\n+{\n+  /* Unlike vec_promote_demote, vector_stmt conversions do not change the\n+     vector register size or number of units.  Integer promotions of this\n+     type therefore map to SXT[BHW] or UXT[BHW].\n+\n+     Most loads have extending forms that can do the sign or zero extension\n+     on the fly.  Optimistically assume that a load followed by an extension\n+     will fold to this form during combine, and that the extension therefore\n+     comes for free.  */\n+  if (kind == vector_stmt && aarch64_extending_load_p (stmt_info))\n+    stmt_cost = 0;\n+\n+  return stmt_cost;\n+}\n+\n /* Implement targetm.vectorize.add_stmt_cost.  */\n static unsigned\n aarch64_add_stmt_cost (void *data, int count, enum vect_cost_for_stmt kind,\n@@ -12894,6 +12937,9 @@ aarch64_add_stmt_cost (void *data, int count, enum vect_cost_for_stmt kind,\n       int stmt_cost =\n \t    aarch64_builtin_vectorization_cost (kind, vectype, misalign);\n \n+      if (stmt_info && vectype && aarch64_sve_mode_p (TYPE_MODE (vectype)))\n+\tstmt_cost = aarch64_sve_adjust_stmt_cost (kind, stmt_info, stmt_cost);\n+\n       /* Statements in an inner loop relative to the loop being\n \t vectorized are weighted more heavily.  The value here is\n \t arbitrary and could potentially be improved with analysis.  */"}, {"sha": "e13aa9f65736d4bd5cfcd3920d9df7165ae195f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -1,3 +1,18 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/load_extend_1.c: New test.\n+\t* gcc.target/aarch64/sve/load_extend_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_extend_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_extend_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_extend_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_extend_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_extend_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_extend_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_extend_9.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_extend_10.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_4.c: Add\n+\t--param aarch64-sve-compare-costs=0.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/cost_model_1.c: Expect the loop to be"}, {"sha": "d881fc00fa3f66c077a06a47752e598f3ce12972", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_extend_1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_1.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE2 *restrict src2, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] += src1[i] + src2[i];\t\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (uint16_t, uint8_t) \\\n+  T (uint32_t, uint8_t) \\\n+  T (uint64_t, uint8_t) \\\n+  T (uint32_t, uint16_t) \\\n+  T (uint64_t, uint16_t) \\\n+  T (uint64_t, uint32_t)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tuxt.\\t} } } */"}, {"sha": "494c4afde7c19ba3daf51eeeee9e1036cb0218d5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_extend_10.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_10.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint64_t *dst, uint32_t *src1, int16_t *src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int32_t) (src1[i] + src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1sh\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxt.\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtw\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "a21f2f90b8cecbe57929f8e97964434f2a9f074f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_extend_2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_2.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE2 *restrict src2, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] += src1[i] + src2[i];\t\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t) \\\n+  T (int32_t, int8_t) \\\n+  T (int64_t, int8_t) \\\n+  T (int32_t, int16_t) \\\n+  T (int64_t, int16_t) \\\n+  T (int64_t, int32_t)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sh\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sh\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sw\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsxt.\\t} } } */"}, {"sha": "defd24d4181c5c7dd2a68a0df21883d9fc8b8176", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_extend_3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_3.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint32_t *dst, uint16_t *src1, uint8_t *src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint16_t) (src1[i] + src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxt.\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.s,} 1 } } */"}, {"sha": "9fe31efda74956c41f98f8ad3b6623c9f508ea0e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_extend_4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_4.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint64_t *dst, uint16_t *src1, uint8_t *src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint16_t) (src1[i] + src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxt.\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "9876293f480e6134807af31d7b2cdff2cd9771f0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_extend_5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_5.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint64_t *dst, uint32_t *src1, uint8_t *src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint32_t) (src1[i] + src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxt.\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtw\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "8aee86f17a7dadcb51b1200c62f3d1f3d269f397", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_extend_6.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_6.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint64_t *dst, uint32_t *src1, uint16_t *src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint32_t) (src1[i] + src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxt.\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtw\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "397f4f621b3466685ccb3eed44bbd6bc5e9f4c8b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_extend_7.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_7.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint32_t *dst, uint16_t *src1, int8_t *src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int16_t) (src1[i] + src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxt.\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxth\\tz[0-9]+\\.s,} 1 } } */"}, {"sha": "cb81f7940e77748d5bab535340b1588c4e78ffd2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_extend_8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_8.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint64_t *dst, uint16_t *src1, int8_t *src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int16_t) (src1[i] + src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxt.\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxth\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "10a6b8ade43cb08602e8175a6bbb184095269ec7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_extend_9.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_extend_9.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint64_t *dst, uint32_t *src1, int8_t *src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int32_t) (src1[i] + src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxt.\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtw\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "b0260c9754c5d190278ae47e86ec518b3d0f83a5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/217ccab8f46ca5b260319e7b71b421daec6d11c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_4.c?ref=217ccab8f46ca5b260319e7b71b421daec6d11c8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n \n double\n f (double *restrict a, double *restrict b, int *lookup)"}]}