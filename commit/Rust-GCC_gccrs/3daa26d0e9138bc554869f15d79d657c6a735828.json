{"sha": "3daa26d0e9138bc554869f15d79d657c6a735828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RhYTI2ZDBlOTEzOGJjNTU0ODY5ZjE1ZDc5ZDY1N2M2YTczNTgyOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-08-04T13:08:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-08-04T13:08:34Z"}, "message": "gimple-fold.h (gimple_fold_builtin): Remove.\n\n2014-08-04  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.h (gimple_fold_builtin): Remove.\n\t* gimple-fold.c (gimple_fold_builtin): Make static.\n\t* tree-ssa-ccp.c (pass_fold_builtins::execute): Use\n\tfold_stmt, not gimple_fold_builtin.\n\nFrom-SVN: r213585", "tree": {"sha": "bfaae94360ee5899f4bdb0120dcc1bff2e412f77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfaae94360ee5899f4bdb0120dcc1bff2e412f77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3daa26d0e9138bc554869f15d79d657c6a735828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3daa26d0e9138bc554869f15d79d657c6a735828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3daa26d0e9138bc554869f15d79d657c6a735828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3daa26d0e9138bc554869f15d79d657c6a735828/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24d4b3d500200caae61f77924b4ebe1bd2b5e0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d4b3d500200caae61f77924b4ebe1bd2b5e0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d4b3d500200caae61f77924b4ebe1bd2b5e0be"}], "stats": {"total": 107, "additions": 57, "deletions": 50}, "files": [{"sha": "8dba640be323256a1800f2ca2407fb776345e82f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3daa26d0e9138bc554869f15d79d657c6a735828/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3daa26d0e9138bc554869f15d79d657c6a735828/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3daa26d0e9138bc554869f15d79d657c6a735828", "patch": "@@ -1,3 +1,10 @@\n+2014-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.h (gimple_fold_builtin): Remove.\n+\t* gimple-fold.c (gimple_fold_builtin): Make static.\n+\t* tree-ssa-ccp.c (pass_fold_builtins::execute): Use\n+\tfold_stmt, not gimple_fold_builtin.\n+\n 2014-08-04  Martin Liska <mliska@suse.cz>\n \n \t* cgraph.h (csi_end_p): Removed."}, {"sha": "fa5681040ed1ac6a5749961e766a94fe2844bd49", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3daa26d0e9138bc554869f15d79d657c6a735828/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3daa26d0e9138bc554869f15d79d657c6a735828/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=3daa26d0e9138bc554869f15d79d657c6a735828", "patch": "@@ -873,7 +873,7 @@ get_maxval_strlen (tree arg, tree *length, bitmap visited, int type)\n    Note that some builtins expand into inline code that may not\n    be valid in GIMPLE.  Callers must take care.  */\n \n-tree\n+static tree\n gimple_fold_builtin (gimple stmt)\n {\n   tree result, val[3];"}, {"sha": "9b4e4566a1268f336b78526ed6a6d0b1dbafa352", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3daa26d0e9138bc554869f15d79d657c6a735828/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3daa26d0e9138bc554869f15d79d657c6a735828/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=3daa26d0e9138bc554869f15d79d657c6a735828", "patch": "@@ -25,7 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n extern tree canonicalize_constructor_val (tree, tree);\n extern tree get_symbol_constant_value (tree);\n extern void gimplify_and_update_call_from_tree (gimple_stmt_iterator *, tree);\n-extern tree gimple_fold_builtin (gimple);\n extern bool fold_stmt (gimple_stmt_iterator *);\n extern bool fold_stmt_inplace (gimple_stmt_iterator *);\n extern tree maybe_fold_and_comparisons (enum tree_code, tree, tree, "}, {"sha": "a90f708919004aee703ea58fcf12e30fbfe24f67", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 49, "deletions": 48, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3daa26d0e9138bc554869f15d79d657c6a735828/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3daa26d0e9138bc554869f15d79d657c6a735828/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=3daa26d0e9138bc554869f15d79d657c6a735828", "patch": "@@ -2655,7 +2655,7 @@ pass_fold_builtins::execute (function *fun)\n       for (i = gsi_start_bb (bb); !gsi_end_p (i); )\n \t{\n           gimple stmt, old_stmt;\n-\t  tree callee, result;\n+\t  tree callee;\n \t  enum built_in_function fcode;\n \n \t  stmt = gsi_stmt (i);\n@@ -2680,62 +2680,69 @@ pass_fold_builtins::execute (function *fun)\n \t      gsi_next (&i);\n \t      continue;\n \t    }\n+\n \t  callee = gimple_call_fndecl (stmt);\n \t  if (!callee || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL)\n \t    {\n \t      gsi_next (&i);\n \t      continue;\n \t    }\n-\t  fcode = DECL_FUNCTION_CODE (callee);\n-\n-\t  result = gimple_fold_builtin (stmt);\n \n-\t  if (result)\n-\t    gimple_remove_stmt_histograms (fun, stmt);\n+\t  fcode = DECL_FUNCTION_CODE (callee);\n+\t  if (fold_stmt (&i))\n+\t    ;\n+\t  else\n+\t    {\n+\t      tree result = NULL_TREE;\n+\t      switch (DECL_FUNCTION_CODE (callee))\n+\t\t{\n+\t\tcase BUILT_IN_CONSTANT_P:\n+\t\t  /* Resolve __builtin_constant_p.  If it hasn't been\n+\t\t     folded to integer_one_node by now, it's fairly\n+\t\t     certain that the value simply isn't constant.  */\n+\t\t  result = integer_zero_node;\n+\t\t  break;\n \n-\t  if (!result)\n-\t    switch (DECL_FUNCTION_CODE (callee))\n-\t      {\n-\t      case BUILT_IN_CONSTANT_P:\n-\t\t/* Resolve __builtin_constant_p.  If it hasn't been\n-\t\t   folded to integer_one_node by now, it's fairly\n-\t\t   certain that the value simply isn't constant.  */\n-                result = integer_zero_node;\n-\t\tbreak;\n+\t\tcase BUILT_IN_ASSUME_ALIGNED:\n+\t\t  /* Remove __builtin_assume_aligned.  */\n+\t\t  result = gimple_call_arg (stmt, 0);\n+\t\t  break;\n \n-\t      case BUILT_IN_ASSUME_ALIGNED:\n-\t\t/* Remove __builtin_assume_aligned.  */\n-\t\tresult = gimple_call_arg (stmt, 0);\n-\t\tbreak;\n+\t\tcase BUILT_IN_STACK_RESTORE:\n+\t\t  result = optimize_stack_restore (i);\n+\t\t  if (result)\n+\t\t    break;\n+\t\t  gsi_next (&i);\n+\t\t  continue;\n \n-\t      case BUILT_IN_STACK_RESTORE:\n-\t\tresult = optimize_stack_restore (i);\n-\t\tif (result)\n+\t\tcase BUILT_IN_UNREACHABLE:\n+\t\t  if (optimize_unreachable (i))\n+\t\t    cfg_changed = true;\n \t\t  break;\n-\t\tgsi_next (&i);\n-\t\tcontinue;\n \n-\t      case BUILT_IN_UNREACHABLE:\n-\t\tif (optimize_unreachable (i))\n-\t\t  cfg_changed = true;\n-\t\tbreak;\n+\t\tcase BUILT_IN_VA_START:\n+\t\tcase BUILT_IN_VA_END:\n+\t\tcase BUILT_IN_VA_COPY:\n+\t\t  /* These shouldn't be folded before pass_stdarg.  */\n+\t\t  result = optimize_stdarg_builtin (stmt);\n+\t\t  if (result)\n+\t\t    break;\n+\t\t  /* FALLTHRU */\n \n-\t      case BUILT_IN_VA_START:\n-\t      case BUILT_IN_VA_END:\n-\t      case BUILT_IN_VA_COPY:\n-\t\t/* These shouldn't be folded before pass_stdarg.  */\n-\t\tresult = optimize_stdarg_builtin (stmt);\n-\t\tif (result)\n-\t\t  break;\n-\t\t/* FALLTHRU */\n+\t\tdefault:;\n+\t\t}\n \n-\t      default:\n-\t\tgsi_next (&i);\n-\t\tcontinue;\n-\t      }\n+\t      if (!result)\n+\t\t{\n+\t\t  gsi_next (&i);\n+\t\t  continue;\n+\t\t}\n \n-\t  if (result == NULL_TREE)\n-\t    break;\n+\t      if (!update_call_from_tree (&i, result))\n+\t\tgimplify_and_update_call_from_tree (&i, result);\n+\t    }\n+\n+\t  todoflags |= TODO_update_address_taken;\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n@@ -2744,12 +2751,6 @@ pass_fold_builtins::execute (function *fun)\n \t    }\n \n           old_stmt = stmt;\n-          if (!update_call_from_tree (&i, result))\n-\t    {\n-\t      gimplify_and_update_call_from_tree (&i, result);\n-\t      todoflags |= TODO_update_address_taken;\n-\t    }\n-\n \t  stmt = gsi_stmt (i);\n \t  update_stmt (stmt);\n "}]}