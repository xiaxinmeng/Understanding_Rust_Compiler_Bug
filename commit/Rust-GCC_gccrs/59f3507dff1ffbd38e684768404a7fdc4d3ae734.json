{"sha": "59f3507dff1ffbd38e684768404a7fdc4d3ae734", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmMzUwN2RmZjFmZmJkMzhlNjg0NzY4NDA0YTdmZGM0ZDNhZTczNA==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-10-04T23:28:57Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-10-04T23:28:57Z"}, "message": "v850-c.c, [...]: Convert to ISO C90 function declarations and definitions.\n\n\t* config/v850/v850-c.c, config/v850/v850-protos.h, config/v850/v850.c:\n\tConvert to ISO C90 function declarations and definitions.\n\nFrom-SVN: r72102", "tree": {"sha": "36cd4fa69294a111dfaf284397621a78a34220d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36cd4fa69294a111dfaf284397621a78a34220d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59f3507dff1ffbd38e684768404a7fdc4d3ae734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f3507dff1ffbd38e684768404a7fdc4d3ae734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f3507dff1ffbd38e684768404a7fdc4d3ae734", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f3507dff1ffbd38e684768404a7fdc4d3ae734/comments", "author": null, "committer": null, "parents": [{"sha": "c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4"}], "stats": {"total": 442, "additions": 179, "deletions": 263}, "files": [{"sha": "e3201926c84ad3513c1001d957667956ad32d4cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f3507dff1ffbd38e684768404a7fdc4d3ae734/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f3507dff1ffbd38e684768404a7fdc4d3ae734/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59f3507dff1ffbd38e684768404a7fdc4d3ae734", "patch": "@@ -1,3 +1,8 @@\n+2003-10-04  Nathanael Nerode  <neroden@gcc.gnu.org>\n+        \n+\t* config/v850/v850-c.c, config/v850/v850-protos.h, config/v850/v850.c:\n+\tConvert to ISO C90 function declarations and definitions.\n+\n 2003-10-04  Zack Weinberg  <zack@codesourcery.com>\n \n \t* libfuncs.h"}, {"sha": "82c71deb8d9d2146c7d4acc4bb367753bf2a4e64", "filename": "gcc/config/v850/v850-c.c", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f3507dff1ffbd38e684768404a7fdc4d3ae734/gcc%2Fconfig%2Fv850%2Fv850-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f3507dff1ffbd38e684768404a7fdc4d3ae734/gcc%2Fconfig%2Fv850%2Fv850-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-c.c?ref=59f3507dff1ffbd38e684768404a7fdc4d3ae734", "patch": "@@ -34,15 +34,14 @@ Boston, MA 02111-1307, USA.  */\n #define streq(a,b) (strcmp (a, b) == 0)\n #endif\n \f\n-static int  pop_data_area          PARAMS ((v850_data_area));\n-static int  push_data_area         PARAMS ((v850_data_area));\n-static void mark_current_function_as_interrupt PARAMS ((void));\n+static int  pop_data_area          (v850_data_area);\n+static int  push_data_area         (v850_data_area);\n+static void mark_current_function_as_interrupt (void);\n \f\n /* Push a data area onto the stack.  */\n \n static int\n-push_data_area (data_area)\n-     v850_data_area data_area;\n+push_data_area (v850_data_area data_area)\n {\n   data_area_stack_element * elem;\n \n@@ -62,8 +61,7 @@ push_data_area (data_area)\n /* Remove a data area from the stack.  */\n \n static int\n-pop_data_area (data_area)\n-     v850_data_area data_area;\n+pop_data_area (v850_data_area data_area)\n {\n   if (data_area_stack == NULL)\n     warning (\"#pragma GHS endXXXX found without previous startXXX\");\n@@ -87,7 +85,7 @@ pop_data_area (data_area)\n /* Set the machine specific 'interrupt' attribute on the current function.  */\n \n static void\n-mark_current_function_as_interrupt ()\n+mark_current_function_as_interrupt (void)\n {\n   tree name;\n   \n@@ -113,8 +111,7 @@ mark_current_function_as_interrupt ()\n /* Support for GHS pragmata.  */\n \n void\n-ghs_pragma_section (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   int repeat;\n \n@@ -193,8 +190,7 @@ ghs_pragma_section (pfile)\n }\n \n void\n-ghs_pragma_interrupt (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+ghs_pragma_interrupt (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n@@ -205,8 +201,7 @@ ghs_pragma_interrupt (pfile)\n }\n \n void\n-ghs_pragma_starttda (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+ghs_pragma_starttda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n@@ -217,8 +212,7 @@ ghs_pragma_starttda (pfile)\n }\n \n void\n-ghs_pragma_startsda (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+ghs_pragma_startsda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n@@ -229,8 +223,7 @@ ghs_pragma_startsda (pfile)\n }\n \n void\n-ghs_pragma_startzda (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+ghs_pragma_startzda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n@@ -241,8 +234,7 @@ ghs_pragma_startzda (pfile)\n }\n \n void\n-ghs_pragma_endtda (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+ghs_pragma_endtda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n@@ -253,8 +245,7 @@ ghs_pragma_endtda (pfile)\n }\n \n void\n-ghs_pragma_endsda (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+ghs_pragma_endsda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n@@ -265,8 +256,7 @@ ghs_pragma_endsda (pfile)\n }\n \n void\n-ghs_pragma_endzda (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+ghs_pragma_endzda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   "}, {"sha": "5355f88181a8d3d11d130fa3aea677b7907a8328", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f3507dff1ffbd38e684768404a7fdc4d3ae734/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f3507dff1ffbd38e684768404a7fdc4d3ae734/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=59f3507dff1ffbd38e684768404a7fdc4d3ae734", "patch": "@@ -25,75 +25,75 @@\n \n #define Mmode enum machine_mode\n \n-extern void   expand_prologue               PARAMS ((void));\n-extern void   expand_epilogue               PARAMS ((void));\n-extern void   sdata_section                 PARAMS ((void));\n-extern void   rosdata_section               PARAMS ((void));\n-extern void   sbss_section                  PARAMS ((void));\n-extern void   tdata_section                 PARAMS ((void));\n-extern void   zdata_section                 PARAMS ((void));\n-extern void   rozdata_section               PARAMS ((void));\n-extern void   zbss_section                  PARAMS ((void));\n-extern int    v850_handle_pragma            PARAMS ((int (*)(void), void (*)(int), char *));\n-extern void   override_options              PARAMS ((void));\n-extern int    compute_register_save_size    PARAMS ((long *));\n-extern int    compute_frame_size            PARAMS ((int, long *));\n-extern void   v850_init_expanders           PARAMS ((void));\n+extern void   expand_prologue               (void);\n+extern void   expand_epilogue               (void);\n+extern void   sdata_section                 (void);\n+extern void   rosdata_section               (void);\n+extern void   sbss_section                  (void);\n+extern void   tdata_section                 (void);\n+extern void   zdata_section                 (void);\n+extern void   rozdata_section               (void);\n+extern void   zbss_section                  (void);\n+extern int    v850_handle_pragma            (int (*)(void), void (*)(int), char *);\n+extern void   override_options              (void);\n+extern int    compute_register_save_size    (long *);\n+extern int    compute_frame_size            (int, long *);\n+extern void   v850_init_expanders           (void);\n \n #ifdef RTX_CODE\n-extern int    v850_output_addr_const_extra  PARAMS ((FILE *, rtx));\n-extern rtx    v850_return_addr              PARAMS ((int));\n-extern void   print_operand                 PARAMS ((FILE *, rtx, int ));\n-extern void   print_operand_address         PARAMS ((FILE *, rtx));\n-extern const char *output_move_double       PARAMS ((rtx *));\n-extern const char *output_move_single       PARAMS ((rtx *));\n-extern void   notice_update_cc              PARAMS ((rtx, rtx));\n-extern char * construct_save_jarl           PARAMS ((rtx));\n-extern char * construct_restore_jr          PARAMS ((rtx));\n+extern int    v850_output_addr_const_extra  (FILE *, rtx);\n+extern rtx    v850_return_addr              (int);\n+extern void   print_operand                 (FILE *, rtx, int );\n+extern void   print_operand_address         (FILE *, rtx);\n+extern const char *output_move_double       (rtx *);\n+extern const char *output_move_single       (rtx *);\n+extern void   notice_update_cc              (rtx, rtx);\n+extern char * construct_save_jarl           (rtx);\n+extern char * construct_restore_jr          (rtx);\n #ifdef HAVE_MACHINE_MODES\n-extern int    reg_or_int9_operand           PARAMS ((rtx, Mmode));\n-extern int    reg_or_const_operand          PARAMS ((rtx, Mmode));\n-extern char * construct_dispose_instruction PARAMS ((rtx));\n-extern char * construct_prepare_instruction PARAMS ((rtx));\n-extern int    pattern_is_ok_for_prepare     PARAMS ((rtx, Mmode));\n-extern int    pattern_is_ok_for_dispose     PARAMS ((rtx, Mmode));\n-extern int    ep_memory_operand             PARAMS ((rtx, Mmode, int));\n-extern int    reg_or_0_operand              PARAMS ((rtx, Mmode));\n-extern int    reg_or_int5_operand           PARAMS ((rtx, Mmode));\n-extern int    call_address_operand          PARAMS ((rtx, Mmode));\n-extern int    movsi_source_operand          PARAMS ((rtx, Mmode));\n-extern int    power_of_two_operand          PARAMS ((rtx, Mmode));\n-extern int    not_power_of_two_operand      PARAMS ((rtx, Mmode));\n-extern int    special_symbolref_operand     PARAMS ((rtx, Mmode));\n-extern int    pattern_is_ok_for_prologue    PARAMS ((rtx, Mmode));\n-extern int    pattern_is_ok_for_epilogue    PARAMS ((rtx, Mmode));\n-extern int    register_is_ok_for_epilogue   PARAMS ((rtx, Mmode));\n+extern int    reg_or_int9_operand           (rtx, Mmode);\n+extern int    reg_or_const_operand          (rtx, Mmode);\n+extern char * construct_dispose_instruction (rtx);\n+extern char * construct_prepare_instruction (rtx);\n+extern int    pattern_is_ok_for_prepare     (rtx, Mmode);\n+extern int    pattern_is_ok_for_dispose     (rtx, Mmode);\n+extern int    ep_memory_operand             (rtx, Mmode, int);\n+extern int    reg_or_0_operand              (rtx, Mmode);\n+extern int    reg_or_int5_operand           (rtx, Mmode);\n+extern int    call_address_operand          (rtx, Mmode);\n+extern int    movsi_source_operand          (rtx, Mmode);\n+extern int    power_of_two_operand          (rtx, Mmode);\n+extern int    not_power_of_two_operand      (rtx, Mmode);\n+extern int    special_symbolref_operand     (rtx, Mmode);\n+extern int    pattern_is_ok_for_prologue    (rtx, Mmode);\n+extern int    pattern_is_ok_for_epilogue    (rtx, Mmode);\n+extern int    register_is_ok_for_epilogue   (rtx, Mmode);\n #ifdef TREE_CODE\n-extern rtx    function_arg                  PARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int));\n-extern rtx    v850_va_arg                   PARAMS ((tree, tree));\n+extern rtx    function_arg                  (CUMULATIVE_ARGS *, Mmode, tree, int);\n+extern rtx    v850_va_arg                   (tree, tree);\n #endif\n #endif\n #endif /* TREE_CODE */\n \n #ifdef TREE_CODE\n-extern int    v850_interrupt_function_p     PARAMS ((tree));\n-extern void   v850_output_aligned_bss       PARAMS ((FILE *, tree, const char *, int, int));\n-extern void   v850_output_common            PARAMS ((FILE *, tree, const char *, int, int));\n-extern void   v850_output_local             PARAMS ((FILE *, tree, const char *, int, int));\n-extern v850_data_area v850_get_data_area    PARAMS ((tree));\n+extern int    v850_interrupt_function_p     (tree);\n+extern void   v850_output_aligned_bss       (FILE *, tree, const char *, int, int);\n+extern void   v850_output_common            (FILE *, tree, const char *, int, int);\n+extern void   v850_output_local             (FILE *, tree, const char *, int, int);\n+extern v850_data_area v850_get_data_area    (tree);\n #ifdef HAVE_MACHINE_MODES\n-extern int    function_arg_partial_nregs    PARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int));\n+extern int    function_arg_partial_nregs    (CUMULATIVE_ARGS *, Mmode, tree, int);\n #endif\n #endif\n \n-extern void ghs_pragma_section\t\t    PARAMS ((struct cpp_reader *));\n-extern void ghs_pragma_interrupt\t    PARAMS ((struct cpp_reader *));\n-extern void ghs_pragma_starttda\t\t    PARAMS ((struct cpp_reader *));\n-extern void ghs_pragma_startsda\t\t    PARAMS ((struct cpp_reader *));\n-extern void ghs_pragma_startzda\t\t    PARAMS ((struct cpp_reader *));\n-extern void ghs_pragma_endtda\t\t    PARAMS ((struct cpp_reader *));\n-extern void ghs_pragma_endsda\t\t    PARAMS ((struct cpp_reader *));\n-extern void ghs_pragma_endzda\t\t    PARAMS ((struct cpp_reader *));\n+extern void ghs_pragma_section\t\t    (struct cpp_reader *);\n+extern void ghs_pragma_interrupt\t    (struct cpp_reader *);\n+extern void ghs_pragma_starttda\t\t    (struct cpp_reader *);\n+extern void ghs_pragma_startsda\t\t    (struct cpp_reader *);\n+extern void ghs_pragma_startzda\t\t    (struct cpp_reader *);\n+extern void ghs_pragma_endtda\t\t    (struct cpp_reader *);\n+extern void ghs_pragma_endsda\t\t    (struct cpp_reader *);\n+extern void ghs_pragma_endzda\t\t    (struct cpp_reader *);\n \n #undef  Mmode\n "}, {"sha": "6c6cece5be96608a3d2f63c5d79cd9b31a64e039", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 104, "deletions": 183, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f3507dff1ffbd38e684768404a7fdc4d3ae734/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f3507dff1ffbd38e684768404a7fdc4d3ae734/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=59f3507dff1ffbd38e684768404a7fdc4d3ae734", "patch": "@@ -49,21 +49,21 @@\n #endif\n \n /* Function prototypes for stupid compilers:  */\n-static void const_double_split       PARAMS ((rtx, HOST_WIDE_INT *, HOST_WIDE_INT *));\n-static int  const_costs_int          PARAMS ((HOST_WIDE_INT, int));\n-static int  const_costs\t\t     PARAMS ((rtx, enum rtx_code));\n-static bool v850_rtx_costs\t     PARAMS ((rtx, int, int, int *));\n-static void substitute_ep_register   PARAMS ((rtx, rtx, int, int, rtx *, rtx *));\n-static void v850_reorg\t\t     PARAMS ((void));\n-static int  ep_memory_offset         PARAMS ((enum machine_mode, int));\n-static void v850_set_data_area       PARAMS ((tree, v850_data_area));\n+static void const_double_split       (rtx, HOST_WIDE_INT *, HOST_WIDE_INT *);\n+static int  const_costs_int          (HOST_WIDE_INT, int);\n+static int  const_costs\t\t     (rtx, enum rtx_code);\n+static bool v850_rtx_costs\t     (rtx, int, int, int *);\n+static void substitute_ep_register   (rtx, rtx, int, int, rtx *, rtx *);\n+static void v850_reorg\t\t     (void);\n+static int  ep_memory_offset         (enum machine_mode, int);\n+static void v850_set_data_area       (tree, v850_data_area);\n const struct attribute_spec v850_attribute_table[];\n-static tree v850_handle_interrupt_attribute PARAMS ((tree *, tree, tree, int, bool *));\n-static tree v850_handle_data_area_attribute PARAMS ((tree *, tree, tree, int, bool *));\n-static void v850_insert_attributes   PARAMS ((tree, tree *));\n-static void v850_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n-static void v850_encode_data_area    PARAMS ((tree, rtx));\n-static void v850_encode_section_info PARAMS ((tree, rtx, int));\n+static tree v850_handle_interrupt_attribute (tree *, tree, tree, int, bool *);\n+static tree v850_handle_data_area_attribute (tree *, tree, tree, int, bool *);\n+static void v850_insert_attributes   (tree, tree *);\n+static void v850_select_section (tree, int, unsigned HOST_WIDE_INT);\n+static void v850_encode_data_area    (tree, rtx);\n+static void v850_encode_section_info (tree, rtx, int);\n \n /* Information about the various small memory areas.  */\n struct small_memory_info small_memory[ (int)SMALL_MEMORY_max ] =\n@@ -128,10 +128,10 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n    `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n \n void\n-override_options ()\n+override_options (void)\n {\n   int i;\n-  extern int atoi PARAMS ((const char *));\n+  extern int atoi (const char *);\n \n   /* Parse -m{s,t,z}da=nnn switches */\n   for (i = 0; i < (int)SMALL_MEMORY_max; i++)\n@@ -167,11 +167,10 @@ override_options ()\n    from a function.  If the result is 0, the argument is pushed.  */\n \n rtx\n-function_arg (cum, mode, type, named)\n-     CUMULATIVE_ARGS *cum;\n-     enum machine_mode mode;\n-     tree type;\n-     int named;\n+function_arg (CUMULATIVE_ARGS * cum,\n+              enum machine_mode mode,\n+              tree type,\n+              int named)\n {\n   rtx result = 0;\n   int size, align;\n@@ -227,11 +226,10 @@ function_arg (cum, mode, type, named)\n    for values which are part in registers and part in memory.  */\n \n int\n-function_arg_partial_nregs (cum, mode, type, named)\n-     CUMULATIVE_ARGS *cum;\n-     enum machine_mode mode;\n-     tree type;\n-     int named;\n+function_arg_partial_nregs (CUMULATIVE_ARGS * cum,\n+                            enum machine_mode mode,\n+                            tree type,\n+                            int named)\n {\n   int size, align;\n \n@@ -267,10 +265,7 @@ function_arg_partial_nregs (cum, mode, type, named)\n /* Return the high and low words of a CONST_DOUBLE */\n \n static void\n-const_double_split (x, p_high, p_low)\n-     rtx x;\n-     HOST_WIDE_INT *p_high;\n-     HOST_WIDE_INT *p_low;\n+const_double_split (rtx x, HOST_WIDE_INT * p_high, HOST_WIDE_INT * p_low)\n {\n   if (GET_CODE (x) == CONST_DOUBLE)\n     {\n@@ -310,9 +305,7 @@ const_double_split (x, p_high, p_low)\n /* Return the cost of the rtx R with code CODE.  */\n \n static int\n-const_costs_int (value, zero_cost)\n-     HOST_WIDE_INT value;\n-     int zero_cost;\n+const_costs_int (HOST_WIDE_INT value, int zero_cost)\n {\n   if (CONST_OK_FOR_I (value))\n       return zero_cost;\n@@ -325,9 +318,7 @@ const_costs_int (value, zero_cost)\n }\n \n static int\n-const_costs (r, c)\n-     rtx r;\n-     enum rtx_code c;\n+const_costs (rtx r, enum rtx_code c)\n {\n   HOST_WIDE_INT high, low;\n \n@@ -357,9 +348,10 @@ const_costs (r, c)\n }\n \n static bool\n-v850_rtx_costs (x, code, outer_code, total)\n-     rtx x;\n-     int code, outer_code ATTRIBUTE_UNUSED, *total;\n+v850_rtx_costs (rtx x,\n+                int code,\n+                int outer_code ATTRIBUTE_UNUSED,\n+                int * total)\n {\n   switch (code)\n     {\n@@ -410,10 +402,7 @@ v850_rtx_costs (x, code, outer_code, total)\n    FILE.  */\n \n void\n-print_operand (file, x, code)\n-     FILE *file;\n-     rtx x;\n-     int code;\n+print_operand (FILE * file, rtx x, int code)\n {\n   HOST_WIDE_INT high, low;\n \n@@ -643,9 +632,7 @@ print_operand (file, x, code)\n /* Output assembly language output for the address ADDR to FILE.  */\n \n void\n-print_operand_address (file, addr)\n-     FILE *file;\n-     rtx addr;\n+print_operand_address (FILE * file, rtx addr)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -757,9 +744,7 @@ print_operand_address (file, addr)\n    Returns 1 if rtx was handled, 0 otherwise.  */\n \n int\n-v850_output_addr_const_extra (file, x)\n-     FILE * file;\n-     rtx x;\n+v850_output_addr_const_extra (FILE * file, rtx x)\n {\n   if (GET_CODE (x) != TRUNCATE)\n     return 0;\n@@ -785,8 +770,7 @@ v850_output_addr_const_extra (file, x)\n    point value.  */\n \n const char *\n-output_move_single (operands)\n-     rtx *operands;\n+output_move_single (rtx * operands)\n {\n   rtx dst = operands[0];\n   rtx src = operands[1];\n@@ -888,8 +872,7 @@ output_move_single (operands)\n    floating point value */\n \n const char *\n-output_move_double (operands)\n-    rtx *operands;\n+output_move_double (rtx * operands)\n {\n   enum machine_mode mode = GET_MODE (operands[0]);\n   rtx dst = operands[0];\n@@ -967,9 +950,7 @@ output_move_double (operands)\n    MODE and signedness UNSIGNEDP.  */\n \n static int\n-ep_memory_offset (mode, unsignedp)\n-     enum machine_mode mode;\n-     int ATTRIBUTE_UNUSED unsignedp;\n+ep_memory_offset (enum machine_mode mode, int unsignedp ATTRIBUTE_UNUSED)\n {\n   int max_offset = 0;\n \n@@ -1012,10 +993,7 @@ ep_memory_offset (mode, unsignedp)\n /* Return true if OP is a valid short EP memory reference */\n \n int\n-ep_memory_operand (op, mode, unsigned_load)\n-     rtx op;\n-     enum machine_mode mode;\n-     int unsigned_load;\n+ep_memory_operand (rtx op, enum machine_mode mode, int unsigned_load)\n {\n   rtx addr, op0, op1;\n   int max_offset;\n@@ -1066,9 +1044,7 @@ ep_memory_operand (op, mode, unsigned_load)\n /* Return true if OP is either a register or 0 */\n \n int\n-reg_or_0_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+reg_or_0_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) == CONST_INT)\n     return INTVAL (op) == 0;\n@@ -1083,9 +1059,7 @@ reg_or_0_operand (op, mode)\n /* Return true if OP is either a register or a signed five bit integer */\n \n int\n-reg_or_int5_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+reg_or_int5_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) == CONST_INT)\n     return CONST_OK_FOR_J (INTVAL (op));\n@@ -1097,9 +1071,7 @@ reg_or_int5_operand (op, mode)\n /* Return true if OP is either a register or a signed nine bit integer.  */\n \n int\n-reg_or_int9_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+reg_or_int9_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) == CONST_INT)\n     return CONST_OK_FOR_O (INTVAL (op));\n@@ -1110,9 +1082,7 @@ reg_or_int9_operand (op, mode)\n /* Return true if OP is either a register or a const integer.  */\n \n int\n-reg_or_const_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+reg_or_const_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) == CONST_INT)\n     return TRUE;\n@@ -1123,9 +1093,7 @@ reg_or_const_operand (op, mode)\n /* Return true if OP is a valid call operand.  */\n \n int\n-call_address_operand (op, mode)\n-     rtx op;\n-     enum machine_mode ATTRIBUTE_UNUSED mode;\n+call_address_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   /* Only registers are valid call operands if TARGET_LONG_CALLS.  */\n   if (TARGET_LONG_CALLS)\n@@ -1134,9 +1102,7 @@ call_address_operand (op, mode)\n }\n \n int\n-special_symbolref_operand (op, mode)\n-     rtx op;\n-     enum machine_mode ATTRIBUTE_UNUSED mode;\n+special_symbolref_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (op) == CONST\n       && GET_CODE (XEXP (op, 0)) == PLUS\n@@ -1152,9 +1118,7 @@ special_symbolref_operand (op, mode)\n }\n \n int\n-movsi_source_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+movsi_source_operand (rtx op, enum machine_mode mode)\n {\n   /* Some constants, as well as symbolic operands\n      must be done with HIGH & LO_SUM patterns.  */\n@@ -1171,9 +1135,7 @@ movsi_source_operand (op, mode)\n }\n \n int\n-power_of_two_operand (op, mode)\n-     rtx op;\n-     enum machine_mode ATTRIBUTE_UNUSED mode;\n+power_of_two_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (op) != CONST_INT)\n     return 0;\n@@ -1184,9 +1146,7 @@ power_of_two_operand (op, mode)\n }\n \n int\n-not_power_of_two_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+not_power_of_two_operand (rtx op, enum machine_mode mode)\n {\n   unsigned int mask;\n \n@@ -1212,13 +1172,12 @@ not_power_of_two_operand (op, mode)\n    taking care to save and preserve the ep.  */\n \n static void\n-substitute_ep_register (first_insn, last_insn, uses, regno, p_r1, p_ep)\n-     rtx first_insn;\n-     rtx last_insn;\n-     int uses;\n-     int regno;\n-     rtx *p_r1;\n-     rtx *p_ep;\n+substitute_ep_register (rtx first_insn,\n+                        rtx last_insn,\n+                        int uses,\n+                        int regno,\n+                        rtx * p_r1,\n+                        rtx * p_ep)\n {\n   rtx reg = gen_rtx_REG (Pmode, regno);\n   rtx insn;\n@@ -1321,7 +1280,7 @@ Saved %d bytes (%d uses of register %s) in function %s, starting as insn %d, end\n    addressing.  */\n \n static void\n-v850_reorg ()\n+v850_reorg (void)\n {\n   struct\n   {\n@@ -1546,8 +1505,7 @@ v850_reorg ()\n #define INTERRUPT_ALL_SAVE_SIZE (4 * INTERRUPT_ALL_SAVE_NUM)\n \n int\n-compute_register_save_size (p_reg_saved)\n-     long *p_reg_saved;\n+compute_register_save_size (long * p_reg_saved)\n {\n   int size = 0;\n   int i;\n@@ -1651,9 +1609,7 @@ compute_register_save_size (p_reg_saved)\n }\n \n int\n-compute_frame_size (size, p_reg_saved)\n-     int size;\n-     long *p_reg_saved;\n+compute_frame_size (int size, long * p_reg_saved)\n {\n   return (size\n \t  + compute_register_save_size (p_reg_saved)\n@@ -1662,7 +1618,7 @@ compute_frame_size (size, p_reg_saved)\n \n \f\n void\n-expand_prologue ()\n+expand_prologue (void)\n {\n   unsigned int i;\n   int offset;\n@@ -1884,7 +1840,7 @@ Saved %d bytes via prologue function (%d vs. %d) for function %s\\n\",\n \f\n \n void\n-expand_epilogue ()\n+expand_epilogue (void)\n {\n   unsigned int i;\n   int offset;\n@@ -2111,9 +2067,7 @@ Saved %d bytes via epilogue function (%d vs. %d) in function %s\\n\",\n /* Update the condition code from the insn.  */\n \n void\n-notice_update_cc (body, insn)\n-     rtx body;\n-     rtx insn;\n+notice_update_cc (rtx body, rtx insn)\n {\n   switch (get_attr_cc (insn))\n     {\n@@ -2160,8 +2114,7 @@ notice_update_cc (body, insn)\n /* Retrieve the data area that has been chosen for the given decl.  */\n \n v850_data_area\n-v850_get_data_area (decl)\n-     tree decl;\n+v850_get_data_area (tree decl)\n {\n   if (lookup_attribute (\"sda\", DECL_ATTRIBUTES (decl)) != NULL_TREE)\n     return DATA_AREA_SDA;\n@@ -2178,9 +2131,7 @@ v850_get_data_area (decl)\n /* Store the indicated data area in the decl's attributes.  */\n \n static void\n-v850_set_data_area (decl, data_area)\n-     tree decl;\n-     v850_data_area data_area;\n+v850_set_data_area (tree decl, v850_data_area data_area)\n {\n   tree name;\n   \n@@ -2211,12 +2162,11 @@ const struct attribute_spec v850_attribute_table[] =\n /* Handle an \"interrupt\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n-v850_handle_interrupt_attribute (node, name, args, flags, no_add_attrs)\n-     tree *node;\n-     tree name;\n-     tree args ATTRIBUTE_UNUSED;\n-     int flags ATTRIBUTE_UNUSED;\n-     bool *no_add_attrs;\n+v850_handle_interrupt_attribute (tree * node,\n+                                 tree name,\n+                                 tree args ATTRIBUTE_UNUSED,\n+                                 int flags ATTRIBUTE_UNUSED,\n+                                 bool * no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n@@ -2231,12 +2181,11 @@ v850_handle_interrupt_attribute (node, name, args, flags, no_add_attrs)\n /* Handle a \"sda\", \"tda\" or \"zda\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n-v850_handle_data_area_attribute (node, name, args, flags, no_add_attrs)\n-     tree *node;\n-     tree name;\n-     tree args ATTRIBUTE_UNUSED;\n-     int flags ATTRIBUTE_UNUSED;\n-     bool *no_add_attrs;\n+v850_handle_data_area_attribute (tree* node,\n+                                 tree name,\n+                                 tree args ATTRIBUTE_UNUSED,\n+                                 int flags ATTRIBUTE_UNUSED,\n+                                 bool * no_add_attrs)\n {\n   v850_data_area data_area;\n   v850_data_area area;\n@@ -2286,8 +2235,7 @@ v850_handle_data_area_attribute (node, name, args, flags, no_add_attrs)\n    by the \"interrupt\" attribute.  */\n \n int\n-v850_interrupt_function_p (func)\n-     tree func;\n+v850_interrupt_function_p (tree func)\n {\n   tree a;\n   int ret = 0;\n@@ -2318,9 +2266,7 @@ v850_interrupt_function_p (func)\n \n \f\n static void\n-v850_encode_data_area (decl, symbol)\n-     tree decl;\n-     rtx symbol;\n+v850_encode_data_area (tree decl, rtx symbol)\n {\n   int flags;\n \n@@ -2374,10 +2320,7 @@ v850_encode_data_area (decl, symbol)\n }\n \n static void\n-v850_encode_section_info (decl, rtl, first)\n-     tree decl;\n-     rtx rtl;\n-     int first;\n+v850_encode_section_info (tree decl, rtx rtl, int first)\n {\n   default_encode_section_info (decl, rtl, first);\n \n@@ -2389,9 +2332,7 @@ v850_encode_section_info (decl, rtl, first)\n /* Return true if the given RTX is a register which can be restored\n    by a function epilogue.  */\n int\n-register_is_ok_for_epilogue (op, mode)\n-     rtx op;\n-     enum machine_mode ATTRIBUTE_UNUSED mode;\n+register_is_ok_for_epilogue (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   /* The save/restore routines can only cope with registers 20 - 31.  */\n   return ((GET_CODE (op) == REG)\n@@ -2401,9 +2342,7 @@ register_is_ok_for_epilogue (op, mode)\n /* Return nonzero if the given RTX is suitable for collapsing into\n    jump to a function epilogue.  */\n int\n-pattern_is_ok_for_epilogue (op, mode)\n-     rtx op;\n-     enum machine_mode ATTRIBUTE_UNUSED mode;\n+pattern_is_ok_for_epilogue (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   int count = XVECLEN (op, 0);\n   int i;\n@@ -2465,8 +2404,7 @@ pattern_is_ok_for_epilogue (op, mode)\n    as well.  The code has already verified that the RTL matches these\n    requirements.  */\n char *\n-construct_restore_jr (op)\n-     rtx op;\n+construct_restore_jr (rtx op)\n {\n   int count = XVECLEN (op, 0);\n   int stack_bytes;\n@@ -2580,9 +2518,7 @@ construct_restore_jr (op)\n /* Return nonzero if the given RTX is suitable for collapsing into\n    a jump to a function prologue.  */\n int\n-pattern_is_ok_for_prologue (op, mode)\n-     rtx op;\n-     enum machine_mode ATTRIBUTE_UNUSED mode;\n+pattern_is_ok_for_prologue (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   int count = XVECLEN (op, 0);\n   int i; \n@@ -2668,8 +2604,7 @@ pattern_is_ok_for_prologue (op, mode)\n    some stack space as well.  The code has already verified that the RTL\n    matches these requirements.  */\n char *\n-construct_save_jarl (op)\n-     rtx op;\n+construct_save_jarl (rtx op)\n {\n   int count = XVECLEN (op, 0);\n   int stack_bytes;\n@@ -2788,12 +2723,11 @@ extern int size_directive_output;\n /* A version of asm_output_aligned_bss() that copes with the special\n    data areas of the v850. */\n void\n-v850_output_aligned_bss (file, decl, name, size, align)\n-     FILE * file;\n-     tree decl;\n-     const char * name;\n-     int size;\n-     int align;\n+v850_output_aligned_bss (FILE * file,\n+                         tree decl,\n+                         const char * name,\n+                         int size,\n+                         int align)\n {\n   switch (v850_get_data_area (decl))\n     {\n@@ -2826,12 +2760,11 @@ v850_output_aligned_bss (file, decl, name, size, align)\n \n /* Called via the macro ASM_OUTPUT_DECL_COMMON */\n void\n-v850_output_common (file, decl, name, size, align)\n-     FILE * file;\n-     tree decl;\n-     const char * name;\n-     int size;\n-     int align;\n+v850_output_common (FILE * file,\n+                    tree decl,\n+                    const char * name,\n+                    int size,\n+                    int align)\n {\n   if (decl == NULL_TREE)\n     {\n@@ -2865,12 +2798,11 @@ v850_output_common (file, decl, name, size, align)\n \n /* Called via the macro ASM_OUTPUT_DECL_LOCAL */\n void\n-v850_output_local (file, decl, name, size, align)\n-     FILE * file;\n-     tree decl;\n-     const char * name;\n-     int size;\n-     int align;\n+v850_output_local (FILE * file,\n+                   tree decl,\n+                   const char * name,\n+                   int size,\n+                   int align)\n {\n   fprintf (file, \"%s\", LOCAL_ASM_OP);\n   assemble_name (file, name);\n@@ -2882,9 +2814,7 @@ v850_output_local (file, decl, name, size, align)\n /* Add data area to the given declaration if a ghs data area pragma is\n    currently in effect (#pragma ghs startXXX/endXXX).  */\n static void\n-v850_insert_attributes (decl, attr_ptr)\n-     tree decl;\n-     tree *attr_ptr ATTRIBUTE_UNUSED;\n+v850_insert_attributes (tree decl, tree * attr_ptr ATTRIBUTE_UNUSED )\n {\n   if (data_area_stack\n       && data_area_stack->data_area\n@@ -2983,9 +2913,7 @@ v850_insert_attributes (decl, attr_ptr)\n    for collapsing into a DISPOSE instruction.  */\n \n int\n-pattern_is_ok_for_dispose (op, mode)\n-  rtx \t\t\top;\n-  enum machine_mode\tmode ATTRIBUTE_UNUSED;\n+pattern_is_ok_for_dispose (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   int count = XVECLEN (op, 0);\n   int i;\n@@ -3047,8 +2975,7 @@ pattern_is_ok_for_dispose (op, mode)\n    be possible.  */\n \n char *\n-construct_dispose_instruction (op)\n-     rtx op;\n+construct_dispose_instruction (rtx op)\n {\n   int                count = XVECLEN (op, 0);\n   int                stack_bytes;\n@@ -3173,9 +3100,7 @@ construct_dispose_instruction (op)\n    for collapsing into a PREPARE instruction.  */\n \n int\n-pattern_is_ok_for_prepare (op, mode)\n-     rtx\t\top;\n-     enum machine_mode\tmode ATTRIBUTE_UNUSED;\n+pattern_is_ok_for_prepare (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   int count = XVECLEN (op, 0);\n   int i;\n@@ -3245,8 +3170,7 @@ pattern_is_ok_for_prepare (op, mode)\n    be possible.  */\n \n char *\n-construct_prepare_instruction (op)\n-     rtx op;\n+construct_prepare_instruction (rtx op)\n {\n   int                count = XVECLEN (op, 0);\n   int                stack_bytes;\n@@ -3368,8 +3292,7 @@ construct_prepare_instruction (op)\n /* Implement `va_arg'.  */\n \n rtx\n-v850_va_arg (valist, type)\n-     tree valist, type;\n+v850_va_arg (tree valist, tree type)\n {\n   HOST_WIDE_INT size, rsize;\n   tree addr, incr;\n@@ -3411,8 +3334,7 @@ v850_va_arg (valist, type)\n    calling function can be found.  */\n \n rtx\n-v850_return_addr (count)\n-     int count;\n+v850_return_addr (int count)\n {\n   if (count != 0)\n     return const0_rtx;\n@@ -3421,10 +3343,9 @@ v850_return_addr (count)\n }\n \f\n static void\n-v850_select_section (exp, reloc, align)\n-     tree exp;\n-     int reloc ATTRIBUTE_UNUSED;\n-     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+v850_select_section (tree exp,\n+                     int reloc ATTRIBUTE_UNUSED,\n+                     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n   if (TREE_CODE (exp) == VAR_DECL)\n     {"}]}