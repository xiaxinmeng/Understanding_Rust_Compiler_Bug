{"sha": "eb528802e2c72e16ff4fef016f77ad7bc6bc06c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI1Mjg4MDJlMmM3MmUxNmZmNGZlZjAxNmY3N2FkN2JjNmJjMDZjNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-28T01:19:16Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-28T01:19:16Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r605", "tree": {"sha": "2f0e86cb0b8587fbecaed044f6b3fd4da85dfe3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f0e86cb0b8587fbecaed044f6b3fd4da85dfe3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb528802e2c72e16ff4fef016f77ad7bc6bc06c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb528802e2c72e16ff4fef016f77ad7bc6bc06c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb528802e2c72e16ff4fef016f77ad7bc6bc06c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb528802e2c72e16ff4fef016f77ad7bc6bc06c7/comments", "author": null, "committer": null, "parents": [{"sha": "11030a604b97b88d30a15173946a966628451155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11030a604b97b88d30a15173946a966628451155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11030a604b97b88d30a15173946a966628451155"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "ffd0f2c0533b3526b2d35a695cee5c7c8ba62b41", "filename": "gcc/varasm.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb528802e2c72e16ff4fef016f77ad7bc6bc06c7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb528802e2c72e16ff4fef016f77ad7bc6bc06c7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=eb528802e2c72e16ff4fef016f77ad7bc6bc06c7", "patch": "@@ -1545,11 +1545,14 @@ const_hash (exp)\n       /* For record type, include the type in the hashing.\n \t We do not do so for array types\n \t because (1) the sizes of the elements are sufficient\n-\t and (2) distinct array types can have the same constructor.  */\n+\t and (2) distinct array types can have the same constructor.\n+\t Instead, we include the array size because the constructor could\n+\t be shorter.  */\n       if (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE)\n \thi = ((int) TREE_TYPE (exp) & ((1 << HASHBITS) - 1)) % MAX_HASH_TABLE;\n       else\n-\thi = 5;\n+\thi = ((5 + int_size_in_bytes (TREE_TYPE (exp)))\n+\t       & ((1 << HASHBITS) - 1)) % MAX_HASH_TABLE;\n \n       for (link = CONSTRUCTOR_ELTS (exp); link; link = TREE_CHAIN (link))\n \thi = (hi * 603 + const_hash (TREE_VALUE (link))) % MAX_HASH_TABLE;\n@@ -1678,6 +1681,15 @@ compare_constant_1 (exp, p)\n \treturn 0;\n       p += sizeof type;\n \n+      /* For arrays, insist that the size in bytes match.  */\n+      if (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n+\t{\n+\t  int size = int_size_in_bytes (TREE_TYPE (exp));\n+\t  if (bcmp (&size, p, sizeof size))\n+\t    return 0;\n+\t  p += sizeof size;\n+\t}\n+\n       for (link = CONSTRUCTOR_ELTS (exp); link; link = TREE_CHAIN (link))\n \tif ((p = compare_constant_1 (TREE_VALUE (link), p)) == 0)\n \t  return 0;\n@@ -1792,6 +1804,13 @@ record_constant_1 (exp)\n \ttype = 0;\n       obstack_grow (&permanent_obstack, (char *) &type, sizeof type);\n \n+      /* For arrays, insist that the size in bytes match.  */\n+      if (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n+\t{\n+\t  int size = int_size_in_bytes (TREE_TYPE (exp));\n+\t  obstack_grow (&permanent_obstack, (char *) &size, sizeof size);\n+\t}\n+\n       for (link = CONSTRUCTOR_ELTS (exp); link; link = TREE_CHAIN (link))\n \trecord_constant_1 (TREE_VALUE (link));\n       return;"}]}