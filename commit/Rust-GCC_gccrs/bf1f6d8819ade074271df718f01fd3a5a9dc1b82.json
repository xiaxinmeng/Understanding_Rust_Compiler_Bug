{"sha": "bf1f6d8819ade074271df718f01fd3a5a9dc1b82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxZjZkODgxOWFkZTA3NDI3MWRmNzE4ZjAxZmQzYTVhOWRjMWI4Mg==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-04-02T06:18:52Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-04-02T06:18:52Z"}, "message": "fortran: ICE equivalence with an element of an array PR94030\n\nDeferred size arrays can not be used in equivalance statements.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/94030\n\t* resolve.c (resolve_equivalence): Correct formatting\n\taround the label \"identical_types\".  Instead of using\n\tgfc_resolve_array_spec use is_non_constants_shape_array\n\tto determine whether the array can be used in a in an\n\tequivalence statement.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/94030\n\t* gfortran.dg/pr94030_1.f90\n\t* gfortran.dg/pr94030_2.f90", "tree": {"sha": "da80262a122d9ff118c64fbc693ce5cd75223ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da80262a122d9ff118c64fbc693ce5cd75223ffe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1f6d8819ade074271df718f01fd3a5a9dc1b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1f6d8819ade074271df718f01fd3a5a9dc1b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1f6d8819ade074271df718f01fd3a5a9dc1b82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/comments", "author": null, "committer": null, "parents": [{"sha": "25839b6af9f10b3227719db35b9e9e38320341e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25839b6af9f10b3227719db35b9e9e38320341e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25839b6af9f10b3227719db35b9e9e38320341e7"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "1aa71d8778e5cb86aa91586415781c0b688518fb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bf1f6d8819ade074271df718f01fd3a5a9dc1b82", "patch": "@@ -1,3 +1,12 @@\n+2020-04-02 Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/94030\n+\t* resolve.c (resolve_equivalence): Correct formatting\n+\taround the label \"identical_types\".  Instead of using\n+\tgfc_resolve_array_spec use is_non_constants_shape_array\n+\tto determine whether the array can be used in a in an\n+\tequivalence statement.\n+\n 2020-04-01  Mark Eggleston  <mark.eggleston@codethink.com>\n \n \tPR fortran/94386"}, {"sha": "79b0d72456514fbae8eea332becad262c2c879a0", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=bf1f6d8819ade074271df718f01fd3a5a9dc1b82", "patch": "@@ -16873,16 +16873,16 @@ resolve_equivalence (gfc_equiv *eq)\n \t  && !gfc_notify_std (GFC_STD_GNU, msg, sym->name, &e->where))\n \t\tcontinue;\n \n-  identical_types:\n+identical_types:\n+\n       last_ts =&sym->ts;\n       last_where = &e->where;\n \n       if (!e->ref)\n \tcontinue;\n \n       /* Shall not be an automatic array.  */\n-      if (e->ref->type == REF_ARRAY\n-\t  && !gfc_resolve_array_spec (e->ref->u.ar.as, 1))\n+      if (e->ref->type == REF_ARRAY && is_non_constant_shape_array (sym))\n \t{\n \t  gfc_error (\"Array %qs at %L with non-constant bounds cannot be \"\n \t\t     \"an EQUIVALENCE object\", sym->name, &e->where);"}, {"sha": "2a686d23ee67c493873e402ea8d80c94f3b514cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf1f6d8819ade074271df718f01fd3a5a9dc1b82", "patch": "@@ -1,3 +1,10 @@\n+2020-04-02  Mark Eggleston  <mark.eggleston@codethink.com>\n+\tSteven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/94030\n+\t* gfortran.dg/pr94030_1.f90: New test.\n+\t* gfortran.dg/pr94030_2.f90: New test.\n+\n 2020-04-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/94315"}, {"sha": "e63d3cc8da4e176c8b4906e590aeebb40dc9bded", "filename": "gcc/testsuite/gfortran.dg/pr94030_1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr94030_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr94030_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr94030_1.f90?ref=bf1f6d8819ade074271df718f01fd3a5a9dc1b82", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+\n+subroutine f(n)\n+  integer :: n\n+  integer :: arr(n)\n+  integer :: i\n+  equivalence (i, arr(1))\n+end\n+\n+! { dg-error \"Array 'arr' at .1. with non-constant bounds cannot be an EQUIVALENCE object\" \" \" { target *-*-* } 8 }"}, {"sha": "84bfdeaa819316b39313af341753592b8dd52f82", "filename": "gcc/testsuite/gfortran.dg/pr94030_2.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr94030_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f6d8819ade074271df718f01fd3a5a9dc1b82/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr94030_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr94030_2.f90?ref=bf1f6d8819ade074271df718f01fd3a5a9dc1b82", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+!\n+! Provided by Steve Kargl.\n+\n+subroutine foo(n,m)\n+  integer, intent(in) :: n, m\n+  integer a(n)\n+  real b(n)\n+  equivalence(a,b)\n+  if (m /= 2) then\n+      a = 1\n+      print *, a(1)\n+  else\n+      b = 42.\n+      print *, b(1)\n+   end if\n+end subroutine \n+\n+subroutine bar(m)\n+  integer, intent(in) :: m\n+  integer x(8)\n+  real y(8)\n+  equivalence(x,y)\n+  if (m /= 2) then\n+      x = 1\n+      print *, x(1)\n+  else\n+      y = 42.\n+      print *, y(1)\n+   end if\n+end subroutine \n+\n+! { dg-error \"Array '.' at .1. with non-constant bounds cannot be an EQUIVALENCE object\" \" \" { target *-*-* } 9 }"}]}