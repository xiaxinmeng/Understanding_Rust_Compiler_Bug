{"sha": "b417ae14c842723b740591ee78c952778ed5f26b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQxN2FlMTRjODQyNzIzYjc0MDU5MWVlNzhjOTUyNzc4ZWQ1ZjI2Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-28T07:50:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-28T07:50:29Z"}, "message": "re PR libstdc++/9875 (filebuf doesn't handle codecvt::encoding() > 1)\n\n2003-06-28  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/9875\n\t* include/bits/fstream.tcc (seekoff): Fix for encoding() > 0.\n\t(seekpos): Likewise.\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/9875_seekoff.cc:\n\tNew test.\n\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/9875_seekpos.cc:\n\tNew test.\n\nFrom-SVN: r68630", "tree": {"sha": "52e347bd536aee544eea377434e8f4ce399d123c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52e347bd536aee544eea377434e8f4ce399d123c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b417ae14c842723b740591ee78c952778ed5f26b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b417ae14c842723b740591ee78c952778ed5f26b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b417ae14c842723b740591ee78c952778ed5f26b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b417ae14c842723b740591ee78c952778ed5f26b/comments", "author": null, "committer": null, "parents": [{"sha": "9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51"}], "stats": {"total": 239, "additions": 235, "deletions": 4}, "files": [{"sha": "0304542596f07da3f8852521d909168890f0d9f0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b417ae14c842723b740591ee78c952778ed5f26b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b417ae14c842723b740591ee78c952778ed5f26b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b417ae14c842723b740591ee78c952778ed5f26b", "patch": "@@ -1,3 +1,13 @@\n+2003-06-28  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/9875\n+\t* include/bits/fstream.tcc (seekoff): Fix for encoding() > 0.\n+\t(seekpos): Likewise.\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/9875_seekoff.cc:\n+\tNew test.\n+\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/9875_seekpos.cc:\n+\tNew test.\n+\n 2003-06-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/testsuite_performance.h (__gnu_cxx_test): Change"}, {"sha": "6f585dc453146d32ea86c85ea1e011ea2d74be94", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b417ae14c842723b740591ee78c952778ed5f26b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b417ae14c842723b740591ee78c952778ed5f26b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=b417ae14c842723b740591ee78c952778ed5f26b", "patch": "@@ -486,7 +486,7 @@ namespace std\n       \n       int __width = 0;\n       if (_M_codecvt)\n-\t  __width = _M_codecvt->encoding();\n+\t__width = _M_codecvt->encoding();\n       if (__width < 0)\n \t__width = 0;\n \n@@ -497,7 +497,7 @@ namespace std\n \t  _M_destroy_pback();\n \n \t  // Sync the internal and external streams.\t      \n-\t  off_type __computed_off = __width * __off;\n+\t  off_type __computed_off = __off;\n \t  \n \t  if (this->pbase() < this->pptr()\n \t      || _M_last_overflowed)\n@@ -512,7 +512,8 @@ namespace std\n \t    __computed_off += this->gptr() - this->egptr();\n \t  \n \t  // Return pos_type(off_type(-1)) in case of failure.\n-\t  __ret = _M_file.seekoff(__computed_off, __way, __mode);\n+\t  __ret = _M_file.seekoff(__computed_off * __width, __way, __mode);\n+\t  \n \t  _M_reading = false;\n \t  _M_writing = false;\n \t  _M_set_buffer(-1);\n@@ -528,7 +529,15 @@ namespace std\n     {\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n // 171. Strange seekpos() semantics due to joint position\n-      return this->seekoff(off_type(__pos), ios_base::beg, __mode);\n+      pos_type __ret =  pos_type(off_type(-1)); \n+\n+      int __width = 0;\n+      if (_M_codecvt)\n+\t__width = _M_codecvt->encoding();\n+      if (__width > 0)\n+\t__ret = this->seekoff(off_type(__pos) / __width, ios_base::beg, __mode);\n+\n+      return __ret;\n #endif\n     }\n "}, {"sha": "adec7b2130fa98d7e964412be7dd82839a4c69b8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/9875_seekoff.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b417ae14c842723b740591ee78c952778ed5f26b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F9875_seekoff.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b417ae14c842723b740591ee78c952778ed5f26b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F9875_seekoff.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F9875_seekoff.cc?ref=b417ae14c842723b740591ee78c952778ed5f26b", "patch": "@@ -0,0 +1,100 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <algorithm>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, mbstate_t>\n+{\n+protected:\n+  virtual std::codecvt_base::result\n+  do_out(std::mbstate_t&, const wchar_t* from, const wchar_t* from_end,\n+\t const wchar_t*& from_next, char* to, char* to_end,\n+\t char*& to_next) const\n+  {\n+    std::size_t from_len = from_end - from;\n+    std::size_t to_len = (to_end - to) / sizeof(wchar_t);\n+    std::size_t len = std::min(from_len, to_len);\n+    std::memcpy(to, from, len * sizeof(wchar_t));\n+    from_next = from + len;\n+    to_next = to + len * sizeof(wchar_t);\n+    return from_next == from_end ? std::codecvt_base::ok :\n+           std::codecvt_base::partial;\n+  }\n+\n+  virtual std::codecvt_base::result\n+  do_in(std::mbstate_t&, const char* from, const char* from_end,\n+\tconst char*& from_next, wchar_t* to, wchar_t* to_end,\n+\twchar_t*& to_next) const\n+  {\n+    std::size_t from_len =\n+      (from_end - from) / sizeof(wchar_t);\n+    std::size_t to_len = to_end - to;\n+    std::size_t len = std::min(from_len, to_len);\n+    std::memcpy(to, from, len * sizeof(wchar_t));\n+    from_next = from + len * sizeof(wchar_t);\n+    to_next = to + len;\n+    return from_next == from_end ? std::codecvt_base::ok :\n+           std::codecvt_base::partial;\n+  }\n+  \n+  virtual std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char*, char*, char*&) const\n+  { return std::codecvt_base::noconv; }\n+  \n+  virtual int do_encoding() const throw() { return sizeof(wchar_t); }\n+  virtual bool do_always_noconv() const throw() { return false; }\n+  \n+  virtual int\n+  do_length(std::mbstate_t&, const char* from, const char* end,\n+\t    std::size_t max)\n+  {\n+    std::size_t len = (end - from) / sizeof(wchar_t);\n+    return std::min(len, max) * sizeof(wchar_t);\n+  }\n+  \n+  virtual int do_max_length() const throw() { return sizeof(wchar_t); }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+  \n+  // seekoff\n+  wfilebuf fb;\n+  fb.pubimbue(locale(locale::classic(), new Cvt));\n+  fb.open(\"tmp_9875_seekoff\", ios_base::out | ios_base::in | ios_base::trunc);\n+  fb.sputn(L\"0123456789\", 10);\n+  fb.pubseekoff(-3, ios_base::cur);\n+  VERIFY( fb.sgetc() == L'7' );\n+  fb.pubseekoff(-3, ios_base::cur);\n+  VERIFY( fb.sgetc() == L'4' );\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fc03e0b431a80d50f88f4fbccc3c33665d4479bb", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/wchar_t/9875_seekpos.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b417ae14c842723b740591ee78c952778ed5f26b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F9875_seekpos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b417ae14c842723b740591ee78c952778ed5f26b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F9875_seekpos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F9875_seekpos.cc?ref=b417ae14c842723b740591ee78c952778ed5f26b", "patch": "@@ -0,0 +1,112 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <algorithm>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, mbstate_t>\n+{\n+protected:\n+  virtual std::codecvt_base::result\n+  do_out(std::mbstate_t&, const wchar_t* from, const wchar_t* from_end,\n+\t const wchar_t*& from_next, char* to, char* to_end,\n+\t char*& to_next) const\n+  {\n+    std::size_t from_len = from_end - from;\n+    std::size_t to_len = (to_end - to) / sizeof(wchar_t);\n+    std::size_t len = std::min(from_len, to_len);\n+    std::memcpy(to, from, len * sizeof(wchar_t));\n+    from_next = from + len;\n+    to_next = to + len * sizeof(wchar_t);\n+    return from_next == from_end ? std::codecvt_base::ok :\n+           std::codecvt_base::partial;\n+  }\n+\n+  virtual std::codecvt_base::result\n+  do_in(std::mbstate_t&, const char* from, const char* from_end,\n+\tconst char*& from_next, wchar_t* to, wchar_t* to_end,\n+\twchar_t*& to_next) const\n+  {\n+    std::size_t from_len =\n+      (from_end - from) / sizeof(wchar_t);\n+    std::size_t to_len = to_end - to;\n+    std::size_t len = std::min(from_len, to_len);\n+    std::memcpy(to, from, len * sizeof(wchar_t));\n+    from_next = from + len * sizeof(wchar_t);\n+    to_next = to + len;\n+    return from_next == from_end ? std::codecvt_base::ok :\n+           std::codecvt_base::partial;\n+  }\n+  \n+  virtual std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char*, char*, char*&) const\n+  { return std::codecvt_base::noconv; }\n+  \n+  virtual int do_encoding() const throw() { return sizeof(wchar_t); }\n+  virtual bool do_always_noconv() const throw() { return false; }\n+  \n+  virtual int\n+  do_length(std::mbstate_t&, const char* from, const char* end,\n+\t    std::size_t max)\n+  {\n+    std::size_t len = (end - from) / sizeof(wchar_t);\n+    return std::min(len, max) * sizeof(wchar_t);\n+  }\n+  \n+  virtual int do_max_length() const throw() { return sizeof(wchar_t); }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // seekpos\n+  wfilebuf fb;\n+  fb.pubimbue(locale(locale::classic(), new Cvt));\n+  fb.open(\"tmp_9875_seekpos\", ios_base::out | ios_base::in | ios_base::trunc);\n+  fb.sputn(L\"0123456789\", 10);\n+  \n+  streampos p1 = fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( p1 != streampos(-1) );\n+  fb.sputc(L'a');\n+  \n+  streampos p2 = fb.pubseekpos(p1);\n+  VERIFY( p2 != streampos(-1) );\n+  VERIFY( p2 == p1 );\n+  VERIFY( fb.sgetc() == L'a' );\n+  \n+  fb.pubseekoff(0, ios_base::beg);\n+  wchar_t buf[11];\n+  streamsize s1 = fb.sgetn(buf, 11);\n+  VERIFY( s1 == 11 );\n+  VERIFY( !wmemcmp(buf, L\"0123456789a\", 11) );\n+  \n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}