{"sha": "3d994c6bef1ee2f790d5682d57977b2d61096726", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5OTRjNmJlZjFlZTJmNzkwZDU2ODJkNTc5NzdiMmQ2MTA5NjcyNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-11T23:27:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-11T23:27:40Z"}, "message": "alias.c: PROTO -> PARAMS.\n\n\t* alias.c: PROTO -> PARAMS.\n\t* basic-block.h: Likewise.\n\t* bitmap.c: Likewise.\n\t* bitmap.h: Likewise.\n\t* builtins.c: Likewise.\n\t* c-aux-info.c: Likewise.\n\t* caller-save.c: Likewise.\n\t* calls.c: Likewise.\n\nFrom-SVN: r31338", "tree": {"sha": "d38469d11e239e057646171b9f1320f4dfe9a82a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d38469d11e239e057646171b9f1320f4dfe9a82a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d994c6bef1ee2f790d5682d57977b2d61096726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d994c6bef1ee2f790d5682d57977b2d61096726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d994c6bef1ee2f790d5682d57977b2d61096726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d994c6bef1ee2f790d5682d57977b2d61096726/comments", "author": null, "committer": null, "parents": [{"sha": "d0af450df245b398eafc4338bc064e94801bde1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0af450df245b398eafc4338bc064e94801bde1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0af450df245b398eafc4338bc064e94801bde1e"}], "stats": {"total": 333, "additions": 172, "deletions": 161}, "files": [{"sha": "8423540f8352a677685e60f22aa0501b56c377ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d994c6bef1ee2f790d5682d57977b2d61096726", "patch": "@@ -1,3 +1,14 @@\n+2000-01-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alias.c: PROTO -> PARAMS.\n+\t* basic-block.h: Likewise.\n+\t* bitmap.c: Likewise.\n+\t* bitmap.h: Likewise.\n+\t* builtins.c: Likewise.\n+\t* c-aux-info.c: Likewise.\n+\t* caller-save.c: Likewise.\n+\t* calls.c: Likewise.\n+\n 2000-01-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (toplev.o): Depend on regs.h."}, {"sha": "c85f110b53709754e3ed6ef0a4ded8b6e4b9689c", "filename": "gcc/alias.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=3d994c6bef1ee2f790d5682d57977b2d61096726", "patch": "@@ -1,5 +1,5 @@\n /* Alias analysis for GNU C\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by John Carr (jfc@mit.edu).\n \n This file is part of GNU CC.\n@@ -78,24 +78,23 @@ typedef struct alias_set_entry\n   splay_tree children;\n } *alias_set_entry;\n \n-static rtx canon_rtx\t\t\tPROTO((rtx));\n-static int rtx_equal_for_memref_p\tPROTO((rtx, rtx));\n-static rtx find_symbolic_term\t\tPROTO((rtx));\n-static int memrefs_conflict_p\t\tPROTO((int, rtx, int, rtx,\n-\t\t\t\t\t       HOST_WIDE_INT));\n-static void record_set\t\t\tPROTO((rtx, rtx, void *));\n-static rtx find_base_term\t\tPROTO((rtx));\n-static int base_alias_check\t\tPROTO((rtx, rtx, enum machine_mode,\n-\t\t\t\t\t       enum machine_mode));\n-static rtx find_base_value\t\tPROTO((rtx));\n-static int mems_in_disjoint_alias_sets_p PROTO((rtx, rtx));\n-static int insert_subset_children       PROTO((splay_tree_node,\n-\t\t\t\t\t       void*));\n-static alias_set_entry get_alias_set_entry PROTO((int));\n-static rtx fixed_scalar_and_varying_struct_p PROTO((rtx, rtx, int (*)(rtx)));\n-static int aliases_everything_p         PROTO((rtx));\n-static int write_dependence_p           PROTO((rtx, rtx, int));\n-static int nonlocal_reference_p         PROTO((rtx));\n+static rtx canon_rtx\t\t\tPARAMS ((rtx));\n+static int rtx_equal_for_memref_p\tPARAMS ((rtx, rtx));\n+static rtx find_symbolic_term\t\tPARAMS ((rtx));\n+static int memrefs_conflict_p\t\tPARAMS ((int, rtx, int, rtx,\n+\t\t\t\t\t\t HOST_WIDE_INT));\n+static void record_set\t\t\tPARAMS ((rtx, rtx, void *));\n+static rtx find_base_term\t\tPARAMS ((rtx));\n+static int base_alias_check\t\tPARAMS ((rtx, rtx, enum machine_mode,\n+\t\t\t\t\t\t enum machine_mode));\n+static rtx find_base_value\t\tPARAMS ((rtx));\n+static int mems_in_disjoint_alias_sets_p PARAMS ((rtx, rtx));\n+static int insert_subset_children       PARAMS ((splay_tree_node, void*));\n+static alias_set_entry get_alias_set_entry PARAMS ((int));\n+static rtx fixed_scalar_and_varying_struct_p PARAMS ((rtx, rtx, int (*)(rtx)));\n+static int aliases_everything_p         PARAMS ((rtx));\n+static int write_dependence_p           PARAMS ((rtx, rtx, int));\n+static int nonlocal_reference_p         PARAMS ((rtx));\n \n /* Set up all info needed to perform alias analysis on memory references.  */\n \n@@ -1192,7 +1191,7 @@ static rtx\n fixed_scalar_and_varying_struct_p (mem1, mem2, varies_p)\n      rtx mem1;\n      rtx mem2;\n-     int (*varies_p) PROTO((rtx));\n+     int (*varies_p) PARAMS ((rtx));\n {\n   rtx mem1_addr = XEXP (mem1, 0);\n   rtx mem2_addr = XEXP (mem2, 0);\n@@ -1238,7 +1237,7 @@ true_dependence (mem, mem_mode, x, varies)\n      rtx mem;\n      enum machine_mode mem_mode;\n      rtx x;\n-     int (*varies) PROTO((rtx));\n+     int (*varies) PARAMS ((rtx));\n {\n   register rtx x_addr, mem_addr;\n "}, {"sha": "d8774a279c35e07eb6d7a4bf2ed130edbb7b4fef", "filename": "gcc/basic-block.h", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=3d994c6bef1ee2f790d5682d57977b2d61096726", "patch": "@@ -1,5 +1,5 @@\n /* Define control and data flow tables, and regsets.\n-   Copyright (C) 1987, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -211,18 +211,18 @@ extern varray_type basic_block_for_insn;\n #define BLOCK_FOR_INSN(INSN)  VARRAY_BB (basic_block_for_insn, INSN_UID (INSN))\n #define BLOCK_NUM(INSN)\t      (BLOCK_FOR_INSN (INSN)->index + 0)\n \n-extern void compute_bb_for_insn\t\tPROTO ((int));\n-extern void set_block_for_insn\t\tPROTO ((rtx, basic_block));\n-extern void set_block_num\t\tPROTO ((rtx, int));\n+extern void compute_bb_for_insn\t\tPARAMS ((int));\n+extern void set_block_for_insn\t\tPARAMS ((rtx, basic_block));\n+extern void set_block_num\t\tPARAMS ((rtx, int));\n \n-extern void free_basic_block_vars\tPROTO ((int));\n+extern void free_basic_block_vars\tPARAMS ((int));\n \n-extern basic_block split_edge\t\tPROTO ((edge));\n-extern void insert_insn_on_edge\t\tPROTO ((rtx, edge));\n-extern void commit_edge_insertions\tPROTO ((void));\n-extern void remove_fake_edges\t\tPROTO ((void));\n-extern void add_noreturn_fake_exit_edges\tPROTO ((void));\n-extern void flow_delete_insn_chain\tPROTO((rtx, rtx));\n+extern basic_block split_edge\t\tPARAMS ((edge));\n+extern void insert_insn_on_edge\t\tPARAMS ((rtx, edge));\n+extern void commit_edge_insertions\tPARAMS ((void));\n+extern void remove_fake_edges\t\tPARAMS ((void));\n+extern void add_noreturn_fake_exit_edges\tPARAMS ((void));\n+extern void flow_delete_insn_chain\tPARAMS ((rtx, rtx));\n \n \n /* Structure to hold information for each natural loop.  */\n@@ -305,9 +305,9 @@ struct loops\n   sbitmap shared_headers;\n };\n \n-extern int flow_loops_find PROTO ((struct loops *));\n-extern void flow_loops_free PROTO ((struct loops *));\n-extern void flow_loops_dump PROTO ((const struct loops *, FILE *, int));\n+extern int flow_loops_find PARAMS ((struct loops *));\n+extern void flow_loops_free PARAMS ((struct loops *));\n+extern void flow_loops_dump PARAMS ((const struct loops *, FILE *, int));\n \n \n /* This structure maintains an edge list vector.  */\n@@ -336,15 +336,15 @@ struct edge_list\n /* Number of edges in the compressed edge list.  */\n #define NUM_EDGES(el)\t\t\t((el)->num_edges)\n \n-struct edge_list * create_edge_list\tPROTO ((void));\n-void free_edge_list\t\t\tPROTO ((struct edge_list *));\n-void print_edge_list\t\t\tPROTO ((FILE *, struct edge_list *));\n-void verify_edge_list\t\t\tPROTO ((FILE *, struct edge_list *));\n-int find_edge_index\t\t\tPROTO ((struct edge_list *, \n-\t\t\t\t\t\tbasic_block, basic_block));\n+struct edge_list * create_edge_list\tPARAMS ((void));\n+void free_edge_list\t\t\tPARAMS ((struct edge_list *));\n+void print_edge_list\t\t\tPARAMS ((FILE *, struct edge_list *));\n+void verify_edge_list\t\t\tPARAMS ((FILE *, struct edge_list *));\n+int find_edge_index\t\t\tPARAMS ((struct edge_list *, \n+\t\t\t\t\t\t basic_block, basic_block));\n \n-extern void compute_flow_dominators\tPROTO ((sbitmap *, sbitmap *));\n-extern void compute_immediate_dominators\tPROTO ((int *, sbitmap *));\n+extern void compute_flow_dominators\tPARAMS ((sbitmap *, sbitmap *));\n+extern void compute_immediate_dominators\tPARAMS ((int *, sbitmap *));\n \n \n enum update_life_extent\n@@ -364,24 +364,24 @@ enum update_life_extent\n #define PROP_AUTOINC\t\t32\t/* Create autoinc mem references.  */\n #define PROP_FINAL\t\t63\t/* All of the above.  */\n \n-extern void update_life_info\tPROTO ((sbitmap, enum update_life_extent,\n-\t\t\t\t\tint));\n-extern int count_or_remove_death_notes\tPROTO ((sbitmap, int));\n+extern void update_life_info\tPARAMS ((sbitmap, enum update_life_extent,\n+\t\t\t\t\t int));\n+extern int count_or_remove_death_notes\tPARAMS ((sbitmap, int));\n \n /* In lcm.c */\n-extern struct edge_list *pre_edge_lcm \tPROTO ((FILE *, int, sbitmap *,\n-\t\t\t\t\t\tsbitmap *, sbitmap *, \n-\t\t\t\t\t\tsbitmap *, sbitmap **,\n-\t\t\t\t\t\tsbitmap **));\n-extern struct edge_list *pre_edge_rev_lcm PROTO ((FILE *, int, sbitmap *,\n-\t\t\t\t\t\t  sbitmap *, sbitmap *, \n-\t\t\t\t\t\t  sbitmap *, sbitmap **, \n-\t\t\t\t\t\t  sbitmap **));\n-extern void compute_available\t\tPROTO ((sbitmap *, sbitmap *,\n-\t\t\t\t\t\tsbitmap *, sbitmap *));\n+extern struct edge_list *pre_edge_lcm \tPARAMS ((FILE *, int, sbitmap *,\n+\t\t\t\t\t\t sbitmap *, sbitmap *, \n+\t\t\t\t\t\t sbitmap *, sbitmap **,\n+\t\t\t\t\t\t sbitmap **));\n+extern struct edge_list *pre_edge_rev_lcm PARAMS ((FILE *, int, sbitmap *,\n+\t\t\t\t\t\t   sbitmap *, sbitmap *, \n+\t\t\t\t\t\t   sbitmap *, sbitmap **, \n+\t\t\t\t\t\t   sbitmap **));\n+extern void compute_available\t\tPARAMS ((sbitmap *, sbitmap *,\n+\t\t\t\t\t\t sbitmap *, sbitmap *));\n \n /* In emit-rtl.c.  */\n-extern rtx emit_block_insn_after\tPROTO((rtx, rtx, basic_block));\n-extern rtx emit_block_insn_before\tPROTO((rtx, rtx, basic_block));\n+extern rtx emit_block_insn_after\tPARAMS ((rtx, rtx, basic_block));\n+extern rtx emit_block_insn_before\tPARAMS ((rtx, rtx, basic_block));\n \n #endif /* _BASIC_BLOCK_H */"}, {"sha": "f43965c33100edd528806c2fbec003a4ec4a1176", "filename": "gcc/bitmap.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=3d994c6bef1ee2f790d5682d57977b2d61096726", "patch": "@@ -1,5 +1,5 @@\n /* Functions to support general ended bitmaps.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -42,11 +42,11 @@ static int bitmap_obstack_init = FALSE;\n bitmap_element bitmap_zero;\t\t/* An element of all zero bits. */\n bitmap_element *bitmap_free;\t\t/* Freelist of bitmap elements. */\n \n-static void bitmap_element_free\t\tPROTO((bitmap, bitmap_element *));\n-static bitmap_element *bitmap_element_allocate PROTO((void));\n-static int bitmap_element_zerop\t\tPROTO((bitmap_element *));\n-static void bitmap_element_link\t\tPROTO((bitmap, bitmap_element *));\n-static bitmap_element *bitmap_find_bit\tPROTO((bitmap, unsigned int));\n+static void bitmap_element_free\t\tPARAMS ((bitmap, bitmap_element *));\n+static bitmap_element *bitmap_element_allocate PARAMS ((void));\n+static int bitmap_element_zerop\t\tPARAMS ((bitmap_element *));\n+static void bitmap_element_link\t\tPARAMS ((bitmap, bitmap_element *));\n+static bitmap_element *bitmap_find_bit\tPARAMS ((bitmap, unsigned int));\n \f\n /* Free a bitmap element */\n "}, {"sha": "fc10bd4cfe8b83ca652d13bbfb9f0344333f6a91", "filename": "gcc/bitmap.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=3d994c6bef1ee2f790d5682d57977b2d61096726", "patch": "@@ -1,5 +1,5 @@\n /* Functions to support general ended bitmaps.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -67,44 +67,44 @@ extern bitmap_element *bitmap_free;\t/* Freelist of bitmap elements */\n extern bitmap_element bitmap_zero;\t/* Zero bitmap element */\n \n /* Clear a bitmap by freeing up the linked list.  */\n-extern void bitmap_clear PROTO((bitmap));\n+extern void bitmap_clear PARAMS ((bitmap));\n \n /* Copy a bitmap to another bitmap. */\n-extern void bitmap_copy PROTO((bitmap, bitmap));\n+extern void bitmap_copy PARAMS ((bitmap, bitmap));\n \n /* True if two bitmaps are identical.  */\n-extern int bitmap_equal_p PROTO((bitmap, bitmap));\n+extern int bitmap_equal_p PARAMS ((bitmap, bitmap));\n \n /* Perform an operation on two bitmaps, yielding a third.  */\n-extern int bitmap_operation PROTO((bitmap, bitmap, bitmap, enum bitmap_bits));\n+extern int bitmap_operation PARAMS ((bitmap, bitmap, bitmap, enum bitmap_bits));\n \n /* `or' into one bitmap the `and' of a second bitmap witih the complement\n    of a third.  */\n-extern void bitmap_ior_and_compl PROTO((bitmap, bitmap, bitmap));\n+extern void bitmap_ior_and_compl PARAMS ((bitmap, bitmap, bitmap));\n \n /* Clear a single register in a register set.  */\n-extern void bitmap_clear_bit PROTO((bitmap, int));\n+extern void bitmap_clear_bit PARAMS ((bitmap, int));\n \n /* Set a single register in a register set.  */\n-extern void bitmap_set_bit PROTO((bitmap, int));\n+extern void bitmap_set_bit PARAMS ((bitmap, int));\n \n /* Return true if a register is set in a register set.  */\n-extern int bitmap_bit_p PROTO((bitmap, int));\n+extern int bitmap_bit_p PARAMS ((bitmap, int));\n \n /* Debug functions to print a bitmap linked list.  */\n-extern void debug_bitmap PROTO((bitmap));\n-extern void debug_bitmap_file PROTO((FILE *, bitmap));\n+extern void debug_bitmap PARAMS ((bitmap));\n+extern void debug_bitmap_file PARAMS ((FILE *, bitmap));\n \n /* Print a bitmap */\n-extern void bitmap_print PROTO((FILE *, bitmap, const char *, const char *));\n+extern void bitmap_print PARAMS ((FILE *, bitmap, const char *, const char *));\n \n /* Initialize a bitmap header.  */\n-extern bitmap bitmap_initialize PROTO((bitmap));\n+extern bitmap bitmap_initialize PARAMS ((bitmap));\n \n /* Release all memory held by bitmaps.  */\n-extern void bitmap_release_memory PROTO((void));\n+extern void bitmap_release_memory PARAMS ((void));\n \n-extern void debug_bitmap PROTO((bitmap));\n+extern void debug_bitmap PARAMS ((bitmap));\n \n /* Allocate a bitmap with oballoc.  */\n #define BITMAP_OBSTACK_ALLOC(OBSTACK)\t\t\t\t\\"}, {"sha": "7bfe10d6b9ddfbbc6107abb7d0c11ba7e54f5194", "filename": "gcc/builtins.c", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3d994c6bef1ee2f790d5682d57977b2d61096726", "patch": "@@ -51,40 +51,40 @@ Boston, MA 02111-1307, USA.  */\n #define OUTGOING_REGNO(IN) (IN)\n #endif\n \n-tree (*lang_type_promotes_to) PROTO((tree));\n+tree (*lang_type_promotes_to) PARAMS ((tree));\n \n-static int get_pointer_alignment\tPROTO((tree, unsigned));\n-static tree c_strlen\t\t\tPROTO((tree));\n-static rtx get_memory_rtx\t\tPROTO((tree));\n-static int apply_args_size\t\tPROTO((void));\n-static int apply_result_size\t\tPROTO((void));\n+static int get_pointer_alignment\tPARAMS ((tree, unsigned));\n+static tree c_strlen\t\t\tPARAMS ((tree));\n+static rtx get_memory_rtx\t\tPARAMS ((tree));\n+static int apply_args_size\t\tPARAMS ((void));\n+static int apply_result_size\t\tPARAMS ((void));\n #if defined (HAVE_untyped_call) || defined (HAVE_untyped_return)\n-static rtx result_vector\t\tPROTO((int, rtx));\n+static rtx result_vector\t\tPARAMS ((int, rtx));\n #endif\n-static rtx expand_builtin_apply_args\tPROTO((void));\n-static rtx expand_builtin_apply_args_1\tPROTO((void));\n-static rtx expand_builtin_apply\t\tPROTO((rtx, rtx, rtx));\n-static void expand_builtin_return\tPROTO((rtx));\n-static rtx expand_builtin_classify_type\tPROTO((tree));\n-static rtx expand_builtin_mathfn\tPROTO((tree, rtx, rtx));\n-static rtx expand_builtin_constant_p\tPROTO((tree));\n-static rtx expand_builtin_args_info\tPROTO((tree));\n-static rtx expand_builtin_next_arg\tPROTO((tree));\n-static rtx expand_builtin_va_start\tPROTO((int, tree));\n-static rtx expand_builtin_va_end\tPROTO((tree));\n-static rtx expand_builtin_va_copy\tPROTO((tree));\n+static rtx expand_builtin_apply_args\tPARAMS ((void));\n+static rtx expand_builtin_apply_args_1\tPARAMS ((void));\n+static rtx expand_builtin_apply\t\tPARAMS ((rtx, rtx, rtx));\n+static void expand_builtin_return\tPARAMS ((rtx));\n+static rtx expand_builtin_classify_type\tPARAMS ((tree));\n+static rtx expand_builtin_mathfn\tPARAMS ((tree, rtx, rtx));\n+static rtx expand_builtin_constant_p\tPARAMS ((tree));\n+static rtx expand_builtin_args_info\tPARAMS ((tree));\n+static rtx expand_builtin_next_arg\tPARAMS ((tree));\n+static rtx expand_builtin_va_start\tPARAMS ((int, tree));\n+static rtx expand_builtin_va_end\tPARAMS ((tree));\n+static rtx expand_builtin_va_copy\tPARAMS ((tree));\n #ifdef HAVE_cmpstrsi\n-static rtx expand_builtin_memcmp\tPROTO((tree, tree, rtx));\n-static rtx expand_builtin_strcmp\tPROTO((tree, rtx));\n+static rtx expand_builtin_memcmp\tPARAMS ((tree, tree, rtx));\n+static rtx expand_builtin_strcmp\tPARAMS ((tree, rtx));\n #endif\n-static rtx expand_builtin_memcpy\tPROTO((tree));\n-static rtx expand_builtin_strcpy\tPROTO((tree));\n-static rtx expand_builtin_memset\tPROTO((tree));\n-static rtx expand_builtin_strlen\tPROTO((tree, rtx, enum machine_mode));\n-static rtx expand_builtin_alloca\tPROTO((tree, rtx));\n-static rtx expand_builtin_ffs\t\tPROTO((tree, rtx, rtx));\n-static rtx expand_builtin_frame_address\tPROTO((tree));\n-static tree stabilize_va_list\t\tPROTO((tree, int));\n+static rtx expand_builtin_memcpy\tPARAMS ((tree));\n+static rtx expand_builtin_strcpy\tPARAMS ((tree));\n+static rtx expand_builtin_memset\tPARAMS ((tree));\n+static rtx expand_builtin_strlen\tPARAMS ((tree, rtx, enum machine_mode));\n+static rtx expand_builtin_alloca\tPARAMS ((tree, rtx));\n+static rtx expand_builtin_ffs\t\tPARAMS ((tree, rtx, rtx));\n+static rtx expand_builtin_frame_address\tPARAMS ((tree));\n+static tree stabilize_va_list\t\tPARAMS ((tree, int));\n \n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what."}, {"sha": "e2f65b50b1c8c2433e957eca196d96db26b8b923", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=3d994c6bef1ee2f790d5682d57977b2d61096726", "patch": "@@ -1,7 +1,7 @@\n /* Generate information regarding function declarations and definitions based\n    on information stored in GCC's tree structure.  This code implements the\n    -aux-info option.\n-   Copyright (C) 1989, 91, 94, 95, 97-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 91, 94, 95, 97-99, 2000 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@segfault.us.com).\n \n This file is part of GNU CC.\n@@ -38,12 +38,12 @@ typedef enum formals_style_enum formals_style;\n \n static const char *data_type;\n \n-static char *affix_data_type\t\tPROTO((const char *));\n-static const char *gen_formal_list_for_type PROTO((tree, formals_style));\n-static int   deserves_ellipsis\t\tPROTO((tree));\n-static const char *gen_formal_list_for_func_def PROTO((tree, formals_style));\n-static const char *gen_type\t\tPROTO((const char *, tree, formals_style));\n-static const char *gen_decl\t\tPROTO((tree, int, formals_style));\n+static char *affix_data_type\t\tPARAMS ((const char *));\n+static const char *gen_formal_list_for_type PARAMS ((tree, formals_style));\n+static int   deserves_ellipsis\t\tPARAMS ((tree));\n+static const char *gen_formal_list_for_func_def PARAMS ((tree, formals_style));\n+static const char *gen_type\t\tPARAMS ((const char *, tree, formals_style));\n+static const char *gen_decl\t\tPARAMS ((tree, int, formals_style));\n \f\n /* Given a string representing an entire type or an entire declaration\n    which only lacks the actual \"data-type\" specifier (at its left end),"}, {"sha": "8777fea5714c0a2720140dac0f74c90dd3b43d85", "filename": "gcc/caller-save.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=3d994c6bef1ee2f790d5682d57977b2d61096726", "patch": "@@ -1,5 +1,5 @@\n /* Save and restore call-clobbered registers which are live across a call.\n-   Copyright (C) 1989, 92, 94, 95, 97, 98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 92, 94, 95, 97-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -84,14 +84,14 @@ static HARD_REG_SET referenced_regs;\n static HARD_REG_SET this_insn_sets;\n \n \n-static void mark_set_regs\t\tPROTO((rtx, rtx, void *));\n-static void mark_referenced_regs\tPROTO((rtx));\n-static int insert_save\t\t\tPROTO((struct insn_chain *, int, int,\n-\t\t\t\t\t       HARD_REG_SET *));\n-static int insert_restore\t\tPROTO((struct insn_chain *, int, int,\n-\t\t\t\t\t       int));\n-static struct insn_chain *insert_one_insn PROTO((struct insn_chain *, int,\n-\t\t\t\t\t\t enum insn_code, rtx));\n+static void mark_set_regs\t\tPARAMS ((rtx, rtx, void *));\n+static void mark_referenced_regs\tPARAMS ((rtx));\n+static int insert_save\t\t\tPARAMS ((struct insn_chain *, int, int,\n+\t\t\t\t\t\t HARD_REG_SET *));\n+static int insert_restore\t\tPARAMS ((struct insn_chain *, int, int,\n+\t\t\t\t\t\t int));\n+static struct insn_chain *insert_one_insn PARAMS ((struct insn_chain *, int,\n+\t\t\t\t\t\t   enum insn_code, rtx));\n \f\n /* Initialize for caller-save.\n "}, {"sha": "c2ccfde9b18b020481760c365bc564ba449c289b", "filename": "gcc/calls.c", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d994c6bef1ee2f790d5682d57977b2d61096726/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=3d994c6bef1ee2f790d5682d57977b2d61096726", "patch": "@@ -129,41 +129,42 @@ static int highest_outgoing_arg_in_use;\n int stack_arg_under_construction;\n #endif\n \n-static int calls_function\tPROTO ((tree, int));\n-static int calls_function_1\tPROTO ((tree, int));\n-static void emit_call_1\t\tPROTO ((rtx, tree, tree, HOST_WIDE_INT,\n-\t\t\t\t\tHOST_WIDE_INT, HOST_WIDE_INT, rtx,\n-\t\t\t\t\trtx, int, rtx, int));\n-static void precompute_register_parameters\tPROTO ((int, struct arg_data *,\n-\t\t\t\t\t\t\tint *));\n-static void store_one_arg\tPROTO ((struct arg_data *, rtx, int, int,\n-\t\t\t\t\tint));\n-static void store_unaligned_arguments_into_pseudos PROTO ((struct arg_data *,\n-\t\t\t\t\t\t\t   int));\n-static int finalize_must_preallocate\t\tPROTO ((int, int,\n-\t\t\t\t\t\t\tstruct arg_data *,\n-\t\t\t\t\t\t\tstruct args_size *));\n-static void precompute_arguments \t\tPROTO ((int, int, int,\n-\t\t\t\t\t\t\tstruct arg_data *,\n-\t\t\t\t\t\t\tstruct args_size *));\n-static int compute_argument_block_size\t\tPROTO ((int, \n-\t\t\t\t\t\t\tstruct args_size *));\n-static void initialize_argument_information\tPROTO ((int,\n-\t\t\t\t\t\t\tstruct arg_data *,\n-\t\t\t\t\t\t\tstruct args_size *,\n-\t\t\t\t\t\t\tint, tree, tree,\n-\t\t\t\t\t\t\tCUMULATIVE_ARGS *,\n-\t\t\t\t\t\t\tint, rtx *, int *,\n-\t\t\t\t\t\t\tint *, int *));\n-static void compute_argument_addresses\t\tPROTO ((struct arg_data *,\n-\t\t\t\t\t\t\trtx, int));\n-static rtx rtx_for_function_call\t\tPROTO ((tree, tree));\n-static void load_register_parameters\t\tPROTO ((struct arg_data *,\n-\t\t\t\t\t\t\tint, rtx *));\n+static int calls_function\tPARAMS ((tree, int));\n+static int calls_function_1\tPARAMS ((tree, int));\n+static void emit_call_1\t\tPARAMS ((rtx, tree, tree, HOST_WIDE_INT,\n+\t\t\t\t\t HOST_WIDE_INT, HOST_WIDE_INT, rtx,\n+\t\t\t\t\t rtx, int, rtx, int));\n+static void precompute_register_parameters\tPARAMS ((int,\n+\t\t\t\t\t\t\t struct arg_data *,\n+\t\t\t\t\t\t\t int *));\n+static void store_one_arg\tPARAMS ((struct arg_data *, rtx, int, int,\n+\t\t\t\t\t int));\n+static void store_unaligned_arguments_into_pseudos PARAMS ((struct arg_data *,\n+\t\t\t\t\t\t\t    int));\n+static int finalize_must_preallocate\t\tPARAMS ((int, int,\n+\t\t\t\t\t\t\t struct arg_data *,\n+\t\t\t\t\t\t\t struct args_size *));\n+static void precompute_arguments \t\tPARAMS ((int, int, int,\n+\t\t\t\t\t\t\t struct arg_data *,\n+\t\t\t\t\t\t\t struct args_size *));\n+static int compute_argument_block_size\t\tPARAMS ((int, \n+\t\t\t\t\t\t\t struct args_size *));\n+static void initialize_argument_information\tPARAMS ((int,\n+\t\t\t\t\t\t\t struct arg_data *,\n+\t\t\t\t\t\t\t struct args_size *,\n+\t\t\t\t\t\t\t int, tree, tree,\n+\t\t\t\t\t\t\t CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t\t int, rtx *, int *,\n+\t\t\t\t\t\t\t int *, int *));\n+static void compute_argument_addresses\t\tPARAMS ((struct arg_data *,\n+\t\t\t\t\t\t\t rtx, int));\n+static rtx rtx_for_function_call\t\tPARAMS ((tree, tree));\n+static void load_register_parameters\t\tPARAMS ((struct arg_data *,\n+\t\t\t\t\t\t\t int, rtx *));\n \n #if defined(ACCUMULATE_OUTGOING_ARGS) && defined(REG_PARM_STACK_SPACE)\n-static rtx save_fixed_argument_area\tPROTO ((int, rtx, int *, int *));\n-static void restore_fixed_argument_area\tPROTO ((rtx, rtx, int, int));\n+static rtx save_fixed_argument_area\tPARAMS ((int, rtx, int *, int *));\n+static void restore_fixed_argument_area\tPARAMS ((rtx, rtx, int, int));\n #endif\n \f\n /* If WHICH is 1, return 1 if EXP contains a call to the built-in function\n@@ -2590,8 +2591,8 @@ expand_call (exp, target, ignore)\n    move memory references across the non-const call.  */\n \n void\n-emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n-\t\t\t  int nargs, ...))\n+emit_library_call VPARAMS((rtx orgfun, int no_queue, enum machine_mode outmode,\n+\t\t\t   int nargs, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   rtx orgfun;\n@@ -3087,8 +3088,8 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n    If VALUE is nonzero, VALUE is returned.  */\n \n rtx\n-emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n-\t\t\t\tenum machine_mode outmode, int nargs, ...))\n+emit_library_call_value VPARAMS((rtx orgfun, rtx value, int no_queue,\n+\t\t\t\t enum machine_mode outmode, int nargs, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   rtx orgfun;"}]}