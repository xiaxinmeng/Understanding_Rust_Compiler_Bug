{"sha": "4cc89e5371c492beefa5b243a95193ce3e77f390", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNjODllNTM3MWM0OTJiZWVmYTViMjQzYTk1MTkzY2UzZTc3ZjM5MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-09T06:28:36Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-09T06:28:36Z"}, "message": "(layout_type): Caller must give size of FILE_TYPE.\n\n(layout_type): Handle BOOLEAN_TYPE, CHAR_TYPE, FILE_TYPE for Pascal.\n(fixup_signed_type): New function.\n\nFrom-SVN: r2080", "tree": {"sha": "288a731b18e88f043fed3b8f4e768427a2c07e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/288a731b18e88f043fed3b8f4e768427a2c07e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cc89e5371c492beefa5b243a95193ce3e77f390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc89e5371c492beefa5b243a95193ce3e77f390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc89e5371c492beefa5b243a95193ce3e77f390", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc89e5371c492beefa5b243a95193ce3e77f390/comments", "author": null, "committer": null, "parents": [{"sha": "15a5b8a22ae6091ce9a3ff5431580d39cdc180d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a5b8a22ae6091ce9a3ff5431580d39cdc180d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15a5b8a22ae6091ce9a3ff5431580d39cdc180d6"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "e28080204141cc92654a9091052646d88199cbff", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc89e5371c492beefa5b243a95193ce3e77f390/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc89e5371c492beefa5b243a95193ce3e77f390/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=4cc89e5371c492beefa5b243a95193ce3e77f390", "patch": "@@ -837,6 +837,28 @@ layout_type (type)\n \t}\n       break;\n \n+    /* Pascal types */\n+    case BOOLEAN_TYPE:\t\t /* store one byte/boolean for now. */\n+      TYPE_MODE (type) = QImode;\n+      TYPE_SIZE (type) = size_int (GET_MODE_BITSIZE (TYPE_MODE (type)));\n+      TYPE_PRECISION (type) = 1;\n+      TYPE_ALIGN (type) = GET_MODE_ALIGNMENT (TYPE_MODE (type));\n+      break;\n+\n+    case CHAR_TYPE:\n+      TYPE_MODE (type) = QImode;\n+      TYPE_SIZE (type) = size_int (GET_MODE_BITSIZE (TYPE_MODE (type)));\n+      TYPE_PRECISION (type) = GET_MODE_BITSIZE (TYPE_MODE (type));\n+      TYPE_ALIGN (type) = GET_MODE_ALIGNMENT (TYPE_MODE (type));\n+      break;\n+\n+    case FILE_TYPE:\n+      /* The size may vary in different languages, so the language front end\n+\t should fill in the size.  */\n+      TYPE_ALIGN (type) = BIGGEST_ALIGNMENT;\n+      TYPE_MODE  (type) = BLKmode;\n+      break;\n+\n     default:\n       abort ();\n     } /* end switch */\n@@ -950,6 +972,36 @@ make_unsigned_type (precision)\n   return type;\n }\n \n+/* Set the extreme values of TYPE based on its precision in bits,\n+   the lay it out.  Used when make_signed_type won't do\n+   because the tree code is not INTEGER_TYPE.\n+   E.g. for Pascal, when the -fsigned-char option is given.  */\n+\n+void\n+fixup_signed_type (type)\n+     tree type;\n+{\n+  register int precision = TYPE_PRECISION (type);\n+\n+  TYPE_MIN_VALUE (type)\n+    = build_int_2 ((precision-BITS_PER_WORD > 0 ? 0 : (-1)<<(precision-1)),\n+\t\t   (-1)<<(precision-BITS_PER_WORD-1 > 0\n+\t\t\t  ? precision-BITS_PER_WORD-1\n+\t\t\t  : 0));\n+  TYPE_MAX_VALUE (type)\n+    = build_int_2 ((precision-BITS_PER_WORD > 0 ? -1 : (1<<(precision-1))-1),\n+\t\t   (precision-BITS_PER_WORD-1 > 0\n+\t\t    ? (1<<(precision-BITS_PER_WORD-1))-1\n+\t\t    : 0));\n+\n+  TREE_TYPE (TYPE_MIN_VALUE (type)) = type;\n+  TREE_TYPE (TYPE_MAX_VALUE (type)) = type;\n+\n+  /* Lay out the type: set its alignment, size, etc.  */\n+\n+  layout_type (type);\n+}\n+\n /* Set the extreme values of TYPE based on its precision in bits,\n    the lay it out.  This is used both in `make_unsigned_type'\n    and for enumeral types.  */"}]}