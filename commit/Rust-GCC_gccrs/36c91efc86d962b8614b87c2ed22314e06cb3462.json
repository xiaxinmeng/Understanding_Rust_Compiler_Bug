{"sha": "36c91efc86d962b8614b87c2ed22314e06cb3462", "node_id": "C_kwDOANBUbNoAKDM2YzkxZWZjODZkOTYyYjg2MTRiODdjMmVkMjIzMTRlMDZjYjM0NjI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-25T12:14:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-25T12:14:56Z"}, "message": "Merge #1275\n\n1275: Remove old hack to handle type inferencing in untyped decalred bindings r=philberty a=philberty\n\nThis reverts the code fix for 89631998d2ffda0c0c05066c148c6fc19398da5c\r\nbut keeps the test-case proving that we have not regressed. More info in\r\nthe commit message.\r\n\r\nFixes #1274 #1273\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "1fc16a19400bebd03830c16ca64a61f6d3e58583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fc16a19400bebd03830c16ca64a61f6d3e58583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36c91efc86d962b8614b87c2ed22314e06cb3462", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJijh3ACRBK7hj4Ov3rIwAAoRMIAIgauX4RipXWXKK8eEBX/+mW\nbnq1l+pUIme9Qy+B5ICwZkLWeth2T/XkbbGGs+nQfsKxTDrchmqspMNcrnN83dcv\ncp6UmspCGHFbUU88LmgXUd/h/RzBR2hO11aBlLbnRgyRJAjLSDGkhmN4ta5ASj8+\nbqBrsT3GJrUzs9VwOjrraN4EzqZ79UwsJCHgqqi2yWpyXwFzKHHVdHkAKZNQb6QO\nGGEs/5heljuv6QPN9nrgWtmGrHftiEVsfEND936DQJEb1jywYQd8Ca4eIEO1m/DC\ndwEX/ytu12GJ7HzuDwP+nai046W68KxhPuH5sV9Yj15xPREKG8mXyvPluIphjpI=\n=yHTT\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fc16a19400bebd03830c16ca64a61f6d3e58583\nparent 79d977e759b073a0a4d422b9a1032427ddc05295\nparent d01ae2ab56be6b515a863184baad496c50363fe6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1653480896 +0000\ncommitter GitHub <noreply@github.com> 1653480896 +0000\n\nMerge #1275\n\n1275: Remove old hack to handle type inferencing in untyped decalred bindings r=philberty a=philberty\n\nThis reverts the code fix for 89631998d2ffda0c0c05066c148c6fc19398da5c\r\nbut keeps the test-case proving that we have not regressed. More info in\r\nthe commit message.\r\n\r\nFixes #1274 #1273\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c91efc86d962b8614b87c2ed22314e06cb3462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c91efc86d962b8614b87c2ed22314e06cb3462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c91efc86d962b8614b87c2ed22314e06cb3462/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d977e759b073a0a4d422b9a1032427ddc05295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d977e759b073a0a4d422b9a1032427ddc05295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d977e759b073a0a4d422b9a1032427ddc05295"}, {"sha": "d01ae2ab56be6b515a863184baad496c50363fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01ae2ab56be6b515a863184baad496c50363fe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d01ae2ab56be6b515a863184baad496c50363fe6"}], "stats": {"total": 41, "additions": 1, "deletions": 40}, "files": [{"sha": "4eae05715958ad5c3caba45d80941ef328427f70", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c91efc86d962b8614b87c2ed22314e06cb3462/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c91efc86d962b8614b87c2ed22314e06cb3462/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=36c91efc86d962b8614b87c2ed22314e06cb3462", "patch": "@@ -384,46 +384,7 @@ class TypeCheckExpr : public TypeCheckBase\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n \n-    auto result = lhs->coerce (rhs);\n-    if (result->get_kind () == TyTy::TypeKind::ERROR)\n-      return;\n-\n-    // in the case of declare first for an ADT Type:\n-    //\n-    // let a;\n-    // a = Foo{..}\n-    // let b = a.field;\n-    //\n-    // The lhs will have a TyTy of INFER and so when the declaration is\n-    // referenced it will still have an unknown type so we will fail to resolve\n-    // FieldAccessExpr\n-\n-    NodeId ast_node_id = expr.get_lhs ()->get_mappings ().get_nodeid ();\n-    NodeId ref_node_id;\n-    if (!resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n-      return;\n-\n-    Definition def;\n-    if (!resolver->lookup_definition (ref_node_id, &def))\n-      {\n-\trust_error_at (expr.get_locus (),\n-\t\t       \"assignment infer - unknown reference\");\n-\treturn;\n-      }\n-\n-    HirId ref;\n-    if (!mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t       def.parent, &ref))\n-      {\n-\trust_error_at (expr.get_locus (),\n-\t\t       \"assignment infer - reverse lookup failure\");\n-\treturn;\n-      }\n-\n-    context->insert_type (\n-      Analysis::NodeMapping (expr.get_lhs ()->get_mappings ().get_crate_num (),\n-\t\t\t     ref_node_id, ref, UNKNOWN_LOCAL_DEFID),\n-      result->clone ());\n+    lhs->coerce (rhs);\n   }\n \n   void visit (HIR::CompoundAssignmentExpr &expr) override"}]}