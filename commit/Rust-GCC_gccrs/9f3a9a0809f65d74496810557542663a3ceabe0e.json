{"sha": "9f3a9a0809f65d74496810557542663a3ceabe0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzYTlhMDgwOWY2NWQ3NDQ5NjgxMDU1NzU0MjY2M2EzY2VhYmUwZQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2003-02-19T02:15:04Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2003-02-19T02:15:04Z"}, "message": "sh.c (unspec_caller_rtx_p): New.\n\n        * config/sh/sh.c (unspec_caller_rtx_p): New.\n\t(sh_cannot_copy_insn_p): New.\n        (TARGET_CANNOT_COPY_INSN_P): New.\n\nFrom-SVN: r63084", "tree": {"sha": "b6084c1968eba4a4e54581a0a994c2454351e950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6084c1968eba4a4e54581a0a994c2454351e950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f3a9a0809f65d74496810557542663a3ceabe0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3a9a0809f65d74496810557542663a3ceabe0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f3a9a0809f65d74496810557542663a3ceabe0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3a9a0809f65d74496810557542663a3ceabe0e/comments", "author": null, "committer": null, "parents": [{"sha": "d7ddbe241a953a4ba9adae1f3a38ade24f9121f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ddbe241a953a4ba9adae1f3a38ade24f9121f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ddbe241a953a4ba9adae1f3a38ade24f9121f0"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "07ba9970bc52914be602d995b6ba9a6ebf0bf58e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3a9a0809f65d74496810557542663a3ceabe0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3a9a0809f65d74496810557542663a3ceabe0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f3a9a0809f65d74496810557542663a3ceabe0e", "patch": "@@ -1,3 +1,9 @@\n+2003-02-18  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+        * config/sh/sh.c (unspec_caller_rtx_p): New.\n+\t(sh_cannot_copy_insn_p): New.\n+        (TARGET_CANNOT_COPY_INSN_P): New.\n+\n 2003-02-18  Richard Henderson  <rth@redhat.com>\n \n \t* c-common.c (handle_used_attribute): Accept static data too."}, {"sha": "b6af3def8a7ff2cc0ecafcde723c13116b671758", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3a9a0809f65d74496810557542663a3ceabe0e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3a9a0809f65d74496810557542663a3ceabe0e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9f3a9a0809f65d74496810557542663a3ceabe0e", "patch": "@@ -218,6 +218,8 @@ static int shiftcosts PARAMS ((rtx));\n static int andcosts PARAMS ((rtx));\n static int addsubcosts PARAMS ((rtx));\n static int multcosts PARAMS ((rtx));\n+static bool unspec_caller_rtx_p PARAMS ((rtx));\n+static bool sh_cannot_copy_insn_p PARAMS ((rtx));\n static bool sh_rtx_costs PARAMS ((rtx, int, int, int *));\n static int sh_address_cost PARAMS ((rtx));\n \f\n@@ -271,6 +273,8 @@ static int sh_address_cost PARAMS ((rtx));\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL sh_function_ok_for_sibcall\n \n+#undef TARGET_CANNOT_COPY_INSN_P\n+#define TARGET_CANNOT_COPY_INSN_P sh_cannot_copy_insn_p\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS sh_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -1215,6 +1219,59 @@ output_file_start (file)\n \t     TARGET_SHMEDIA64 ? 64 : 32);\n }\n \f\n+/* Check if PAT includes UNSPEC_CALLER unspec pattern.  */\n+\n+static bool\n+unspec_caller_rtx_p (pat)\n+     rtx pat;\n+{\n+  switch (GET_CODE (pat))\n+    {\n+    case CONST:\n+      return unspec_caller_rtx_p (XEXP (pat, 0));\n+    case PLUS:\n+    case MINUS:\n+      if (unspec_caller_rtx_p (XEXP (pat, 0)))\n+\treturn true;\n+      return unspec_caller_rtx_p (XEXP (pat, 1));\n+    case UNSPEC:\n+      if (XINT (pat, 1) == UNSPEC_CALLER)\n+\treturn true;\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n+/* Indicate that INSN cannot be duplicated.  This is true for insn\n+   that generates an unique label.  */\n+\n+static bool\n+sh_cannot_copy_insn_p (insn)\n+     rtx insn;\n+{\n+  rtx pat;\n+\n+  if (!reload_completed || !flag_pic)\n+    return false;\n+\n+  if (GET_CODE (insn) != INSN)\n+    return false;\n+  if (asm_noperands (insn) >= 0)\n+    return false;\n+\n+  pat = PATTERN (insn);\n+  if (GET_CODE (pat) != SET)\n+    return false;\n+  pat = SET_SRC (pat);\n+\n+  if (unspec_caller_rtx_p (pat))\n+    return true;\n+\n+  return false;\n+}\n+\f\n /* Actual number of instructions used to make a shift by N.  */\n static const char ashiftrt_insns[] =\n   { 0,1,2,3,4,5,8,8,8,8,8,8,8,8,8,8,2,3,4,5,8,8,8,8,8,8,8,8,8,8,8,2};"}]}