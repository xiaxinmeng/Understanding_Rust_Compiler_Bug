{"sha": "e076319b26d78eeff5a44422e404c1a29d683de2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3NjMxOWIyNmQ3OGVlZmY1YTQ0NDIyZTQwNGMxYTI5ZDY4M2RlMg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2012-09-12T01:52:36Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2012-09-12T01:52:36Z"}, "message": "mmix.h (MMIX_REG_OK_STRICT): Delete.\n\n\t* config/mmix/mmix.h (MMIX_REG_OK_STRICT): Delete.\n\t(REG_CLASS_FROM_LETTER, CONST_OK_FOR_LETTER_P): Delete.\n\t(CONST_DOUBLE_OK_FOR_LETTER_P, EXTRA_CONSTRAINT): Delete.\n\t* config/mmix/mmix-protos.h (mmix_intval): Declare.\n\t(mmix_const_ok_for_letter_p, mmix_extra_constraint): Delete.\n\t(mmix_const_double_ok_for_letter_p): Delete.\n\t* config/mmix/constraints.md: New file.\n\t* config/mmix/mmix.md: Include it.\n\t(iordi3): Fix typo; use \"I\" instead of undefined \"H\" constraint.\n\t(\"*call_real\"): Update comment about not using the \"p\" constraint.\n\t* config/mmix/predicates.md (mmix_reg_or_8bit_operand): Use\n\tsatisfies_constraint_I.\n\t(mmix_address_operand): New predicate.\n\t(mmix_symbolic_or_address_operand): Use it instead of address_operand.\n\t* config/mmix/mmix.c: #include tm-constrs.h.\n\t(mmix_intval): Delete declaration.  Make non-static.\n\t(mmix_const_ok_for_letter_p, mmix_extra_constraint): Delete.\n\t(mmix_const_double_ok_for_letter_p): Delete.\n\t(mmix_legitimate_address_p): Use satisfies_constraint_I.\n\t(mmix_print_operand_address): Likewise.\n\t(mmix_emit_sp_add): Adjust to use insn_const_int_ok_for_constraint\n\twhen matching \"L\" constraint.\n\nCo-Authored-By: Hans-Peter Nilsson <hp@bitrange.com>\n\nFrom-SVN: r191208", "tree": {"sha": "a590eb04ea331ce9f0185333e0e9f57ede58723e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a590eb04ea331ce9f0185333e0e9f57ede58723e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e076319b26d78eeff5a44422e404c1a29d683de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e076319b26d78eeff5a44422e404c1a29d683de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e076319b26d78eeff5a44422e404c1a29d683de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e076319b26d78eeff5a44422e404c1a29d683de2/comments", "author": null, "committer": null, "parents": [{"sha": "1da598fbd5532e006587fa8bb5e74579f018cccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da598fbd5532e006587fa8bb5e74579f018cccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1da598fbd5532e006587fa8bb5e74579f018cccb"}], "stats": {"total": 272, "additions": 157, "deletions": 115}, "files": [{"sha": "dbe2345675e0dd6397761744808d0add28b7c73d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e076319b26d78eeff5a44422e404c1a29d683de2", "patch": "@@ -1,3 +1,29 @@\n+2012-09-12  Nathan Froyd  <froydnj@gcc.gnu.org>\n+\t    Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.h (MMIX_REG_OK_STRICT): Delete.\n+\t(REG_CLASS_FROM_LETTER, CONST_OK_FOR_LETTER_P): Delete.\n+\t(CONST_DOUBLE_OK_FOR_LETTER_P, EXTRA_CONSTRAINT): Delete.\n+\t* config/mmix/mmix-protos.h (mmix_intval): Declare.\n+\t(mmix_const_ok_for_letter_p, mmix_extra_constraint): Delete.\n+\t(mmix_const_double_ok_for_letter_p): Delete.\n+\t* config/mmix/constraints.md: New file.\n+\t* config/mmix/mmix.md: Include it.\n+\t(iordi3): Fix typo; use \"I\" instead of undefined \"H\" constraint.\n+\t(\"*call_real\"): Update comment about not using the \"p\" constraint.\n+\t* config/mmix/predicates.md (mmix_reg_or_8bit_operand): Use\n+\tsatisfies_constraint_I.\n+\t(mmix_address_operand): New predicate.\n+\t(mmix_symbolic_or_address_operand): Use it instead of address_operand.\n+\t* config/mmix/mmix.c: #include tm-constrs.h.\n+\t(mmix_intval): Delete declaration.  Make non-static.\n+\t(mmix_const_ok_for_letter_p, mmix_extra_constraint): Delete.\n+\t(mmix_const_double_ok_for_letter_p): Delete.\n+\t(mmix_legitimate_address_p): Use satisfies_constraint_I.\n+\t(mmix_print_operand_address): Likewise.\n+\t(mmix_emit_sp_add): Adjust to use insn_const_int_ok_for_constraint\n+\twhen matching \"L\" constraint.\n+\n 2012-09-11  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* tree.h (expand_case): Move prototype ..."}, {"sha": "954cddaa5af7775c7cb34953ad0010f28b8eb7fc", "filename": "gcc/config/mmix/constraints.md", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fconstraints.md?ref=e076319b26d78eeff5a44422e404c1a29d683de2", "patch": "@@ -0,0 +1,112 @@\n+;; MMIX constraints\n+;; Copyright (C) 2012 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+(define_register_constraint \"x\" \"SYSTEM_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"y\" \"REMAINDER_REG\"\n+  \"@internal\")\n+\n+(define_register_constraint \"z\" \"HIMULT_REG\"\n+  \"@internal\")\n+\n+(define_constraint \"I\"\n+  \"A 8-bit unsigned integer\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 255)\")))\n+\n+(define_constraint \"J\"\n+  \"A 16-bit unsigned integer.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 65535)\")))\n+\n+(define_constraint \"K\"\n+  \"An integer between -255 and 0.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -255, 0)\")))\n+\n+(define_constraint \"L\"\n+  \"@internal\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mmix_shiftable_wyde_value (ival)\")))\n+\n+(define_constraint \"M\"\n+  \"The value 0.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"N\"\n+  \"@internal\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mmix_shiftable_wyde_value (~ival)\")))\n+\n+(define_constraint \"O\"\n+  \"The value 3, 5, 9, or 17.\"\n+  (and (match_code \"const_int\")\n+       (ior (match_test \"ival == 3\")\n+\t    (match_test \"ival == 5\")\n+\t    (match_test \"ival == 9\")\n+\t    (match_test \"ival == 17\"))))\n+\n+;; FIXME: M (or G) is redundant.\n+\n+(define_constraint \"G\"\n+  \"Floating-point zero.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"op == CONST0_RTX (mode)\")))\n+\n+;; R asks whether x is to be loaded with GETA or something else.  Right\n+;; now, only a SYMBOL_REF and LABEL_REF can fit for\n+;; TARGET_BASE_ADDRESSES.\n+;;\n+;; Only constant symbolic addresses apply.  With TARGET_BASE_ADDRESSES,\n+;; we just allow straight LABEL_REF or SYMBOL_REFs with SYMBOL_REF_FLAG\n+;; set right now; only function addresses and code labels.  If we change\n+;; to let SYMBOL_REF_FLAG be set on other symbols, we have to check\n+;; inside CONST expressions.  When TARGET_BASE_ADDRESSES is not in\n+;; effect, a \"raw\" constant check together with mmix_constant_address_p\n+;; is all that's needed; we want all constant addresses to be loaded\n+;; with GETA then.\n+\n+(define_constraint \"R\"\n+  \"@internal\"\n+  (and (not (match_code \"const_int,const_double\"))\n+       (match_test \"mmix_constant_address_p (op)\")\n+       (ior (match_test \"!TARGET_BASE_ADDRESSES\")\n+\t    (match_code \"LABEL_REF\")\n+\t    (and (match_code \"SYMBOL_REF\")\n+\t\t (match_test \"SYMBOL_REF_FLAG (op)\")))))\n+\n+;; FIXME: L (or S) is redundant.\n+\n+(define_constraint \"S\"\n+  \"@internal\"\n+  (and (match_code \"const_int,const_double\")\n+       (match_test \"mmix_shiftable_wyde_value (mmix_intval (op))\")))\n+\n+;; FIXME: N (or T) is redundant.\n+\n+(define_constraint \"T\"\n+  \"@internal\"\n+  (and (match_code \"const_int,const_double\")\n+       (match_test \"mmix_shiftable_wyde_value (~mmix_intval (op))\")))\n+\n+(define_address_constraint \"U\"\n+  \"@internal\"\n+  (match_operand 0 \"mmix_address_operand\"))"}, {"sha": "62cdbae442a73806ed56c6665f452e98919726a9", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=e076319b26d78eeff5a44422e404c1a29d683de2", "patch": "@@ -40,6 +40,7 @@ extern void mmix_asm_output_reg_push (FILE *, int);\n extern void mmix_asm_output_reg_pop (FILE *, int);\n extern void mmix_asm_output_skip (FILE *, int);\n extern void mmix_asm_output_align (FILE *, int);\n+extern HOST_WIDEST_INT mmix_intval (const_rtx);\n extern int mmix_shiftable_wyde_value (unsigned HOST_WIDEST_INT);\n extern void mmix_output_register_setting (FILE *, int, HOST_WIDEST_INT, int);\n extern int mmix_opposite_regno (int, int);\n@@ -59,9 +60,6 @@ extern void mmix_asm_output_addr_diff_elt (FILE *, rtx, int, int);\n extern void mmix_asm_output_addr_vec_elt (FILE *, int);\n extern enum reg_class mmix_secondary_reload_class\n   (enum reg_class, enum machine_mode, rtx, int);\n-extern int mmix_const_ok_for_letter_p (HOST_WIDE_INT, int);\n-extern int mmix_const_double_ok_for_letter_p (rtx, int);\n-extern int mmix_extra_constraint (rtx, int, int);\n extern rtx mmix_dynamic_chain_address (rtx);\n extern rtx mmix_return_addr_rtx (int, rtx);\n extern rtx mmix_eh_return_stackadj_rtx (void);"}, {"sha": "d5d72dfdcadbc6b8116b688e02739063e698ed37", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 5, "deletions": 88, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=e076319b26d78eeff5a44422e404c1a29d683de2", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"df.h\"\n+#include \"tm-constrs.h\"\n \n /* First some local helper definitions.  */\n #define MMIX_FIRST_GLOBAL_REGNUM 32\n@@ -118,7 +119,6 @@ static void mmix_output_shiftvalue_op_from_str\n   (FILE *, const char *, HOST_WIDEST_INT);\n static void mmix_output_shifted_value (FILE *, HOST_WIDEST_INT);\n static void mmix_output_condition (FILE *, const_rtx, int);\n-static HOST_WIDEST_INT mmix_intval (const_rtx);\n static void mmix_output_octa (FILE *, HOST_WIDEST_INT, int);\n static bool mmix_assemble_integer (rtx, unsigned int, int);\n static struct machine_function *mmix_init_machine_status (void);\n@@ -459,87 +459,6 @@ mmix_secondary_reload_class (enum reg_class rclass,\n   return NO_REGS;\n }\n \n-/* CONST_OK_FOR_LETTER_P.  */\n-\n-int\n-mmix_const_ok_for_letter_p (HOST_WIDE_INT value, int c)\n-{\n-  return\n-    (c == 'I' ? value >= 0 && value <= 255\n-     : c == 'J' ? value >= 0 && value <= 65535\n-     : c == 'K' ? value <= 0 && value >= -255\n-     : c == 'L' ? mmix_shiftable_wyde_value (value)\n-     : c == 'M' ? value == 0\n-     : c == 'N' ? mmix_shiftable_wyde_value (~value)\n-     : c == 'O' ? (value == 3 || value == 5 || value == 9\n-\t\t   || value == 17)\n-     : 0);\n-}\n-\n-/* CONST_DOUBLE_OK_FOR_LETTER_P.  */\n-\n-int\n-mmix_const_double_ok_for_letter_p (rtx value, int c)\n-{\n-  return\n-    (c == 'G' ? value == CONST0_RTX (GET_MODE (value))\n-     : 0);\n-}\n-\n-/* EXTRA_CONSTRAINT.\n-   We need this since our constants are not always expressible as\n-   CONST_INT:s, but rather often as CONST_DOUBLE:s.  */\n-\n-int\n-mmix_extra_constraint (rtx x, int c, int strict)\n-{\n-  HOST_WIDEST_INT value;\n-\n-  /* When checking for an address, we need to handle strict vs. non-strict\n-     register checks.  Don't use address_operand, but instead its\n-     equivalent (its callee, which it is just a wrapper for),\n-     memory_operand_p and the strict-equivalent strict_memory_address_p.  */\n-  if (c == 'U')\n-    return\n-      strict\n-      ? strict_memory_address_p (Pmode, x)\n-      : memory_address_p (Pmode, x);\n-\n-  /* R asks whether x is to be loaded with GETA or something else.  Right\n-     now, only a SYMBOL_REF and LABEL_REF can fit for\n-     TARGET_BASE_ADDRESSES.\n-\n-     Only constant symbolic addresses apply.  With TARGET_BASE_ADDRESSES,\n-     we just allow straight LABEL_REF or SYMBOL_REFs with SYMBOL_REF_FLAG\n-     set right now; only function addresses and code labels.  If we change\n-     to let SYMBOL_REF_FLAG be set on other symbols, we have to check\n-     inside CONST expressions.  When TARGET_BASE_ADDRESSES is not in\n-     effect, a \"raw\" constant check together with mmix_constant_address_p\n-     is all that's needed; we want all constant addresses to be loaded\n-     with GETA then.  */\n-  if (c == 'R')\n-    return\n-      GET_CODE (x) != CONST_INT && GET_CODE (x) != CONST_DOUBLE\n-      && mmix_constant_address_p (x)\n-      && (! TARGET_BASE_ADDRESSES\n-\t  || (GET_CODE (x) == LABEL_REF\n-\t      || (GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FLAG (x))));\n-\n-  if (GET_CODE (x) != CONST_DOUBLE || GET_MODE (x) != VOIDmode)\n-    return 0;\n-\n-  value = mmix_intval (x);\n-\n-  /* We used to map Q->J, R->K, S->L, T->N, U->O, but we don't have to any\n-     more ('U' taken for address_operand, 'R' similarly).  Some letters map\n-     outside of CONST_INT, though; we still use 'S' and 'T'.  */\n-  if (c == 'S')\n-    return mmix_shiftable_wyde_value (value);\n-  else if (c == 'T')\n-    return mmix_shiftable_wyde_value (~value);\n-  return 0;\n-}\n-\n /* DYNAMIC_CHAIN_ADDRESS.  */\n \n rtx\n@@ -1161,8 +1080,7 @@ mmix_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \treturn 1;\n \n       /* (mem (plus (reg) (0..255?))) */\n-      if (GET_CODE (x2) == CONST_INT\n-\t  && CONST_OK_FOR_LETTER_P (INTVAL (x2), 'I'))\n+      if (satisfies_constraint_I (x2))\n \treturn 1;\n \n       return 0;\n@@ -1843,8 +1761,7 @@ mmix_print_operand_address (FILE *stream, rtx x)\n \t\t       reg_names[MMIX_OUTPUT_REGNO (REGNO (x2))]);\n \t      return;\n \t    }\n-\t  else if (GET_CODE (x2) == CONST_INT\n-\t\t   && CONST_OK_FOR_LETTER_P (INTVAL (x2), 'I'))\n+\t  else if (satisfies_constraint_I (x2))\n \t    {\n \t      output_addr_const (stream, x2);\n \t      return;\n@@ -2529,7 +2446,7 @@ mmix_emit_sp_add (HOST_WIDE_INT offset)\n     {\n       /* Positive adjustments are in the epilogue only.  Don't mark them\n \t as \"frame-related\" for unwind info.  */\n-      if (CONST_OK_FOR_LETTER_P (offset, 'L'))\n+      if (insn_const_int_ok_for_constraint (offset, CONSTRAINT_L))\n \temit_insn (gen_adddi3 (stack_pointer_rtx,\n \t\t\t       stack_pointer_rtx,\n \t\t\t       GEN_INT (offset)));\n@@ -2754,7 +2671,7 @@ mmix_output_condition (FILE *stream, const_rtx x, int reversed)\n \n /* Return the bit-value for a const_int or const_double.  */\n \n-static HOST_WIDEST_INT\n+HOST_WIDEST_INT\n mmix_intval (const_rtx x)\n {\n   unsigned HOST_WIDEST_INT retval;"}, {"sha": "07b7368e9a5907e0c85087cb73187f4aa13e7044", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=e076319b26d78eeff5a44422e404c1a29d683de2", "patch": "@@ -72,12 +72,6 @@ along with GCC; see the file COPYING3.  If not see\n    untouched by the epilogue\".  */\n #define MMIX_EH_RETURN_STACKADJ_REGNUM MMIX_STATIC_CHAIN_REGNUM\n \n-#ifdef REG_OK_STRICT\n-# define MMIX_REG_OK_STRICT 1\n-#else\n-# define MMIX_REG_OK_STRICT 0\n-#endif\n-\n #define MMIX_FUNCTION_ARG_SIZE(MODE, TYPE) \\\n  ((MODE) != BLKmode ? GET_MODE_SIZE (MODE) : int_size_in_bytes (TYPE))\n \n@@ -439,11 +433,6 @@ enum reg_class\n \n #define INDEX_REG_CLASS GENERAL_REGS\n \n-#define REG_CLASS_FROM_LETTER(CHAR)\t\t\\\n- ((CHAR) == 'x' ? SYSTEM_REGS\t\t\t\\\n-  : (CHAR) == 'y' ? REMAINDER_REG\t\t\\\n-  : (CHAR) == 'z' ? HIMULT_REG : NO_REGS)\n-\n #define REGNO_OK_FOR_BASE_P(REGNO)\t\t\t\t\\\n  ((REGNO) <= MMIX_LAST_GENERAL_REGISTER\t\t\t\t\\\n   || (REGNO) == MMIX_ARG_POINTER_REGNUM\t\t\t\t\\\n@@ -460,16 +449,6 @@ enum reg_class\n \n #define CLASS_MAX_NREGS(CLASS, MODE) HARD_REGNO_NREGS (CLASS, MODE)\n \n-#define CONST_OK_FOR_LETTER_P(VALUE, C)\t\\\n- mmix_const_ok_for_letter_p (VALUE, C)\n-\n-#define EXTRA_CONSTRAINT(VALUE, C)\t\\\n- mmix_extra_constraint (VALUE, C, MMIX_REG_OK_STRICT)\n-\n-/* Do we need anything serious here?  Yes, any FLOT constant.  */\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\t\t\\\n- mmix_const_double_ok_for_letter_p (VALUE, C)\n-\n \n /* Node: Frame Layout */\n "}, {"sha": "24d6292f78704c5993625a1ab14c46fb82937728", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=e076319b26d78eeff5a44422e404c1a29d683de2", "patch": "@@ -43,6 +43,7 @@\n ;; Operand and operator predicates.\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \f\n ;; FIXME: Can we remove the reg-to-reg for smaller modes?  Shouldn't they\n ;; be synthesized ok?\n@@ -274,7 +275,7 @@\n (define_insn \"iordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(ior:DI (match_operand:DI 1 \"register_operand\" \"%r,0\")\n-\t\t(match_operand:DI 2 \"mmix_reg_or_constant_operand\" \"rH,LS\")))]\n+\t\t(match_operand:DI 2 \"mmix_reg_or_constant_operand\" \"rI,LS\")))]\n   \"\"\n   \"@\n    OR %0,%1,%2\n@@ -1037,6 +1038,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n ;; first (\"p\") alternative by adding ? in the first operand\n ;; might do the trick.  We define 'U' as a synonym to 'p', but without the\n ;; caveats (and very small advantages) of 'p'.\n+;; As of r190682 still so: newlib/libc/stdlib/dtoa.c ICEs if \"p\" is used.\n (define_insn \"*call_real\"\n   [(call (mem:QI\n \t  (match_operand:DI 0 \"mmix_symbolic_or_address_operand\" \"s,rU\"))"}, {"sha": "f9ba32c88326e7ae422bee939fbb4e08a2076c7b", "filename": "gcc/config/mmix/predicates.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e076319b26d78eeff5a44422e404c1a29d683de2/gcc%2Fconfig%2Fmmix%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fpredicates.md?ref=e076319b26d78eeff5a44422e404c1a29d683de2", "patch": "@@ -118,7 +118,7 @@\n \treturn 1;\n       /* Fall through.  */\n     default:\n-      return address_operand (op, mode);\n+      return mmix_address_operand (op, mode);\n     }\n })\n \n@@ -152,4 +152,12 @@\n   (ior\n    (match_operand 0 \"register_operand\")\n    (and (match_code \"const_int\")\n-\t(match_test \"CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\"))))\n+\t(match_test \"satisfies_constraint_I (op)\"))))\n+\n+;; True if this is a memory address, possibly strictly.\n+;; See also comment above the \"*call_real\" pattern.\n+\n+(define_predicate \"mmix_address_operand\"\n+  (if_then_else (match_test \"reload_in_progress || reload_completed\")\n+    (match_test \"strict_memory_address_p (Pmode, op)\")\n+    (match_test \"memory_address_p (Pmode, op)\")))"}]}