{"sha": "0d42d4908f94225a2301f792bea330b55ca7bf5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0MmQ0OTA4Zjk0MjI1YTIzMDFmNzkyYmVhMzMwYjU1Y2E3YmY1YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-07-23T21:17:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-07-23T21:17:02Z"}, "message": "i386.c: Use ASM_LONG instead of .long.\n\n\t* config/i386/i386.c: Use ASM_LONG instead of .long.  Concatenate\n\tASM_LONG, LPREFIX, MCOUNT_NAME and PROFILE_COUNT_REGISTER strings\n\twith the rest of string where appropriate.  Use fputs or putc\n\tinstead of fprintf where appropriate.\n\nFrom-SVN: r150030", "tree": {"sha": "b2d136b5d59384c32d719616cd2785286b36690c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d136b5d59384c32d719616cd2785286b36690c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d42d4908f94225a2301f792bea330b55ca7bf5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d42d4908f94225a2301f792bea330b55ca7bf5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d42d4908f94225a2301f792bea330b55ca7bf5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d42d4908f94225a2301f792bea330b55ca7bf5a/comments", "author": null, "committer": null, "parents": [{"sha": "8c576a3fda03b26d66e10c6a76228ee6060fad45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c576a3fda03b26d66e10c6a76228ee6060fad45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c576a3fda03b26d66e10c6a76228ee6060fad45"}], "stats": {"total": 84, "additions": 41, "deletions": 43}, "files": [{"sha": "9eef599a342c2e0b6d6a35e33894145eff137e6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d42d4908f94225a2301f792bea330b55ca7bf5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d42d4908f94225a2301f792bea330b55ca7bf5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d42d4908f94225a2301f792bea330b55ca7bf5a", "patch": "@@ -1,3 +1,10 @@\n+2009-07-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c: Use ASM_LONG instead of .long.  Concatenate\n+\tASM_LONG, LPREFIX, MCOUNT_NAME and PROFILE_COUNT_REGISTER strings\n+\twith the rest of string where appropriate.  Use fputs or putc\n+\tinstead of fprintf where appropriate.\n+\n 2009-07-22  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \t    Pat Haugen  <pthaugen@us.ibm.com>\n \t    Revital Eres <ERES@il.ibm.com>\n@@ -42,8 +49,7 @@\n \t(TARGET_SECONDARY_RELOAD): Define target hook.\n \t(TARGET_IRA_COVER_CLASSES): Ditto.\n \t(rs6000_hard_regno_nregs_internal): If -mvsx, floating point\n-\tregisters are 128 bits if VSX memory reference instructions are\n-\tused.\n+\tregisters are 128 bits if VSX memory reference instructions are used.\n \t(rs6000_hard_regno_mode_ok): For VSX, only check if the VSX memory\n \tunit is being used.\n \t(rs6000_debug_vector_unit): Move into rs6000_debug_reg_global.\n@@ -83,8 +89,7 @@\n \t(altivec_expand_builtin): Ditto.\n \t(rs6000_expand_ternop_builtin): Use a switch instead of an if\n \tstatement for vsldoi support.\n-\t(altivec_expand_ld_builtin): Change to use new names from\n-\tvector.md.\n+\t(altivec_expand_ld_builtin): Change to use new names from vector.md.\n \t(altivec_expand_st_builtin): Ditto.\n \t(paired_expand_builtin): Whitespace changes.\n \t(rs6000_init_builtins): Add V2DF/V2DI types.  Initialize the\n@@ -94,8 +99,7 @@\n \tcreate builtin function types dynamically as we need them.\n \t(builtin_hash_function): New support for hashing the tree types\n \tfor builtin function as we need it, rather than trying to build\n-\tall of the trees that we need.  Add initial preliminary VSX\n-\tsupport.\n+\tall of the trees that we need.  Add initial preliminary VSX support.\n \t(builtin_function_type): Ditto.\n \t(builtin_function_eq): Ditto.\n \t(builtin_hash_struct): Ditto.\n@@ -105,8 +109,7 @@\n \t(rs6000_common_init_builtins): Ditto.\n \t(enum reload_reg_type): New enum for simplifing reg classes.\n \t(rs6000_reload_register_type): Simplify register classes into GPR,\n-\tVector, and other registers.\n-\tAltivec and VSX addresses in reload.\n+\tVector, and other registers.  Altivec and VSX addresses in reload.\n \t(rs6000_secondary_reload_inner): Ditto.\n \t(rs6000_ira_cover_classes): New target hook, that returns the\n \tappropriate cover classes, based on -mvsx being used or not.\n@@ -118,11 +121,9 @@\n \tUNSPEC.\n \t(rs6000_emit_vector_select): Ditto.\n \t(rs6000_emit_vector_cond_expr): Ditto.\n-\t(rs6000_emit_minmax): Directly generate min/max under altivec,\n-\tvsx.\n+\t(rs6000_emit_minmax): Directly generate min/max under altivec, vsx.\n \t(create_TOC_reference): Add -mdebug=addr support.\n-\t(emit_frame_save): VSX loads/stores need register indexed\n-\taddressing.\n+\t(emit_frame_save): VSX loads/stores need register indexed addressing.\n \n \t* config/rs6000/rs6000.md: Include vector.md.\n \n@@ -173,8 +174,7 @@\n \t(VM): New iterator for moves that includes the VSX types.\n \t(altivec_vperm_<mode>): Add VSX types.  Add unsigned types.\n \t(altivec_vperm_<mode>_uns): New, for unsigned types.\n-\t(altivec_vsel_*): Rewrite vector comparisons and predicate\n-\tbuiltins.\n+\t(altivec_vsel_*): Rewrite vector comparisons and predicate builtins.\n \t(altivec_eq<mode>): Ditto.\n \t(altivec_gt<mode>): Ditto.\n \t(altivec_gtu<mode>): Ditto."}, {"sha": "35c169a6ea39bc58561224226001270c30e73fb5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d42d4908f94225a2301f792bea330b55ca7bf5a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d42d4908f94225a2301f792bea330b55ca7bf5a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0d42d4908f94225a2301f792bea330b55ca7bf5a", "patch": "@@ -2562,7 +2562,7 @@ ix86_debug_options (void)\n       free (opts);\n     }\n   else\n-    fprintf (stderr, \"<no options>\\n\\n\");\n+    fputs (\"<no options>\\n\\n\", stderr);\n \n   return;\n }\n@@ -4197,9 +4197,9 @@ x86_elf_aligned_common (FILE *file,\n {\n   if ((ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_MEDIUM_PIC)\n       && size > (unsigned int)ix86_section_threshold)\n-    fprintf (file, \".largecomm\\t\");\n+    fputs (\".largecomm\\t\", file);\n   else\n-    fprintf (file, \"%s\", COMMON_ASM_OP);\n+    fputs (COMMON_ASM_OP, file);\n   assemble_name (file, name);\n   fprintf (file, \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\n \t   size, align / BITS_PER_UNIT);\n@@ -7608,7 +7608,7 @@ ix86_file_end (void)\n \t  (*targetm.asm_out.globalize_label) (asm_out_file, name);\n \t  fputs (\"\\t.hidden\\t\", asm_out_file);\n \t  assemble_name (asm_out_file, name);\n-\t  fputc ('\\n', asm_out_file);\n+\t  putc ('\\n', asm_out_file);\n \t  ASM_DECLARE_FUNCTION_NAME (asm_out_file, name, decl);\n \t}\n       else\n@@ -11731,7 +11731,7 @@ print_operand (FILE *file, rtx x, int code)\n #if TARGET_MACHO\n \t  fputs (\" ; \", file);\n #else\n-\t  fputc (' ', file);\n+\t  putc (' ', file);\n #endif\n \t  return;\n \n@@ -11809,7 +11809,7 @@ print_operand (FILE *file, rtx x, int code)\n       char dstr[30];\n \n       real_to_decimal (dstr, CONST_DOUBLE_REAL_VALUE (x), sizeof (dstr), 0, 1);\n-      fprintf (file, \"%s\", dstr);\n+      fputs (dstr, file);\n     }\n \n   else if (GET_CODE (x) == CONST_DOUBLE\n@@ -12694,7 +12694,7 @@ ix86_output_addr_vec_elt (FILE *file, int value)\n   gcc_assert (!TARGET_64BIT);\n #endif\n \n-  fprintf (file, \"%s%s%d\\n\", directive, LPREFIX, value);\n+  fprintf (file, \"%s\" LPREFIX \"%d\\n\", directive, value);\n }\n \n void\n@@ -12710,21 +12710,21 @@ ix86_output_addr_diff_elt (FILE *file, int value, int rel)\n #endif\n   /* We can't use @GOTOFF for text labels on VxWorks; see gotoff_operand.  */\n   if (TARGET_64BIT || TARGET_VXWORKS_RTP)\n-    fprintf (file, \"%s%s%d-%s%d\\n\",\n-\t     directive, LPREFIX, value, LPREFIX, rel);\n+    fprintf (file, \"%s\" LPREFIX \"%d-\" LPREFIX \"%d\\n\",\n+\t     directive, value, rel);\n   else if (HAVE_AS_GOTOFF_IN_DATA)\n-    fprintf (file, \"%s%s%d@GOTOFF\\n\", ASM_LONG, LPREFIX, value);\n+    fprintf (file, ASM_LONG LPREFIX \"%d@GOTOFF\\n\", value);\n #if TARGET_MACHO\n   else if (TARGET_MACHO)\n     {\n-      fprintf (file, \"%s%s%d-\", ASM_LONG, LPREFIX, value);\n+      fprintf (file, ASM_LONG LPREFIX \"%d-\", value);\n       machopic_output_function_base_name (file);\n-      fprintf(file, \"\\n\");\n+      putc ('\\n', file);\n     }\n #endif\n   else\n-    asm_fprintf (file, \"%s%U%s+[.-%s%d]\\n\",\n-\t\t ASM_LONG, GOT_SYMBOL_NAME, LPREFIX, value);\n+    asm_fprintf (file, ASM_LONG \"%U%s+[.-\" LPREFIX \"%d]\\n\",\n+\t\t GOT_SYMBOL_NAME, value);\n }\n \f\n /* Generate either \"mov $0, reg\" or \"xor reg, reg\", as appropriate\n@@ -27105,17 +27105,17 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n   if (MACHOPIC_PURE)\n     {\n       fprintf (file, \"\\tlea\\t%s-LPC$%d(%%eax),%%eax\\n\", lazy_ptr_name, label);\n-      fprintf (file, \"\\tpushl\\t%%eax\\n\");\n+      fputs (\"\\tpushl\\t%eax\\n\", file);\n     }\n   else\n     fprintf (file, \"\\tpushl\\t$%s\\n\", lazy_ptr_name);\n \n-  fprintf (file, \"\\tjmp\\tdyld_stub_binding_helper\\n\");\n+  fputs (\"\\tjmp\\tdyld_stub_binding_helper\\n\", file);\n \n   switch_to_section (darwin_sections[machopic_lazy_symbol_ptr_section]);\n   fprintf (file, \"%s:\\n\", lazy_ptr_name);\n   fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n-  fprintf (file, \"\\t.long %s\\n\", binder_name);\n+  fprintf (file, ASM_LONG \"%s\\n\", binder_name);\n }\n \n void\n@@ -27512,29 +27512,29 @@ x86_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n   if (TARGET_64BIT)\n     {\n #ifndef NO_PROFILE_COUNTERS\n-      fprintf (file, \"\\tleaq\\t%sP%d@(%%rip),%%r11\\n\", LPREFIX, labelno);\n+      fprintf (file, \"\\tleaq\\t\" LPREFIX \"P%d@(%%rip),%%r11\\n\", labelno);\n #endif\n \n       if (DEFAULT_ABI == SYSV_ABI && flag_pic)\n-\tfprintf (file, \"\\tcall\\t*%s@GOTPCREL(%%rip)\\n\", MCOUNT_NAME);\n+\tfputs (\"\\tcall\\t*\" MCOUNT_NAME \"@GOTPCREL(%rip)\\n\", file);\n       else\n-\tfprintf (file, \"\\tcall\\t%s\\n\", MCOUNT_NAME);\n+\tfputs (\"\\tcall\\t\" MCOUNT_NAME \"\\n\", file);\n     }\n   else if (flag_pic)\n     {\n #ifndef NO_PROFILE_COUNTERS\n-      fprintf (file, \"\\tleal\\t%sP%d@GOTOFF(%%ebx),%%%s\\n\",\n-\t       LPREFIX, labelno, PROFILE_COUNT_REGISTER);\n+      fprintf (file, \"\\tleal\\t\" LPREFIX \"P%d@GOTOFF(%%ebx),%%\" PROFILE_COUNT_REGISTER \"\\n\",\n+\t       labelno);\n #endif\n-      fprintf (file, \"\\tcall\\t*%s@GOT(%%ebx)\\n\", MCOUNT_NAME);\n+      fputs (\"\\tcall\\t*\" MCOUNT_NAME \"@GOT(%ebx)\\n\", file);\n     }\n   else\n     {\n #ifndef NO_PROFILE_COUNTERS\n-      fprintf (file, \"\\tmovl\\t$%sP%d,%%%s\\n\", LPREFIX, labelno,\n-\t       PROFILE_COUNT_REGISTER);\n+      fprintf (file, \"\\tmovl\\t$\" LPREFIX \"P%d,%%\" PROFILE_COUNT_REGISTER \"\\n\",\n+\t       labelno);\n #endif\n-      fprintf (file, \"\\tcall\\t%s\\n\", MCOUNT_NAME);\n+      fputs (\"\\tcall\\t\" MCOUNT_NAME \"\\n\", file);\n     }\n }\n "}, {"sha": "43ec67a9c109f0242e8afc158c2927d26cd608bd", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d42d4908f94225a2301f792bea330b55ca7bf5a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d42d4908f94225a2301f792bea330b55ca7bf5a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=0d42d4908f94225a2301f792bea330b55ca7bf5a", "patch": "@@ -2958,9 +2958,7 @@\n \t  (match_dup 2)\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n  \"TARGET_SSE2\"\n-{\n- operands[2] = gen_reg_rtx (V4SImode);\n-})\n+ \"operands[2] = gen_reg_rtx (V4SImode);\")\n \n (define_expand \"vec_unpacks_float_lo_v4si\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"\")"}]}