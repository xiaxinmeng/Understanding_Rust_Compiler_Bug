{"sha": "efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZhYTYxNmVlYjNiM2NjMmNiZTY2NGJhOTMwNWQzMDM1ZmIyZDJkOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-09-13T18:40:26Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-09-13T18:40:26Z"}, "message": "re PR ada/28591 (ICE in splice_child_die, at dwarf2out.c:5513)\n\n\tPR ada/28591\n\t* decl.c (components_to_record): Defer emitting debug info for the\n\trecord type associated with the variant until after we are sure to\n\tactually use it.\n\nFrom-SVN: r116928", "tree": {"sha": "1209ab556421fad1e3fc3a74d1d777793febdb43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1209ab556421fad1e3fc3a74d1d777793febdb43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9/comments", "author": null, "committer": null, "parents": [{"sha": "2655f1c6dd3b1a1db7453065a0bb67f30d4552ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "60fbf113820785e11eb1e293f603b3a77f893de0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9", "patch": "@@ -1,3 +1,10 @@\n+2006-09-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/28591\n+\t* decl.c (components_to_record): Defer emitting debug info for the\n+\trecord type associated with the variant until after we are sure to\n+\tactually use it.\n+\n 2006-09-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/21952"}, {"sha": "6d70a159f3d1fb4c46547e61e34787f8f43847a8", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9", "patch": "@@ -5659,10 +5659,12 @@ components_to_record (tree gnu_record_type, Node_Id component_list,\n \t\t= TYPE_SIZE_UNIT (gnu_record_type);\n \t    }\n \n+\t  /* Create the record for the variant.  Note that we defer emitting\n+\t     debug info for it until after we are sure to actually use it.  */\n \t  components_to_record (gnu_variant_type, Component_List (variant),\n \t\t\t\tNULL_TREE, packed, definition,\n \t\t\t\t&gnu_our_rep_list, !all_rep_and_size, all_rep,\n-\t\t\t\tfalse, unchecked_union);\n+\t\t\t\ttrue, unchecked_union);\n \n \t  gnu_qual = choices_to_gnu (gnu_discriminant,\n \t\t\t\t     Discrete_Choices (variant));\n@@ -5676,6 +5678,13 @@ components_to_record (tree gnu_record_type, Node_Id component_list,\n \t    gnu_field = TYPE_FIELDS (gnu_variant_type);\n \t  else\n \t    {\n+\t      /* Emit debug info for the record.  We used to throw away\n+\t\t empty records but we no longer do that because we need\n+\t\t them to generate complete debug info for the variant;\n+\t\t otherwise, the union type definition will be lacking\n+\t\t the fields associated with these empty variants.  */\n+\t      write_record_type_debug_info (gnu_variant_type);\n+\n \t      gnu_field = create_field_decl (gnu_inner_name, gnu_variant_type,\n \t\t\t\t\t     gnu_union_type, 0,\n \t\t\t\t\t     (all_rep_and_size\n@@ -5695,12 +5704,6 @@ components_to_record (tree gnu_record_type, Node_Id component_list,\n \t  gnu_variant_list = gnu_field;\n \t}\n \n-      /* We used to delete the empty variants from the end. However,\n-         we no longer do that because we need them to generate complete\n-         debugging information for the variant record.  Otherwise,\n-         the union type definition will be missing the fields associated\n-         to these empty variants.  */\n-\n       /* Only make the QUAL_UNION_TYPE if there are any non-empty variants.  */\n       if (gnu_variant_list)\n \t{"}, {"sha": "ae45deee4047492eb25b06f6c81c9a58a2765124", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9", "patch": "@@ -1,3 +1,7 @@\n+2006-09-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/unchecked_union.ads: New test.\n+\n 2006-09-13  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR rtl-optimization/28982"}, {"sha": "260f781d89d7daeeebf5a757b25961a62c474619", "filename": "gcc/testsuite/gnat.dg/specs/unchecked_union.ads", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_union.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_union.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_union.ads?ref=efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9", "patch": "@@ -0,0 +1,20 @@\n+-- PR ada/28591\n+-- Reported by Martin Michlmayr <tbm@cyrius.com>\n+\n+-- { dg-do compile }\n+-- { dg-options \"-g\" }\n+\n+with Interfaces; use Interfaces;\n+\n+package Unchecked_Union is\n+   type Mode_Type is (Mode_B2);\n+\n+   type Value_Union (Mode : Mode_Type := Mode_B2) is record\n+      case Mode is\n+         when Mode_B2 =>\n+            B2 : Integer_32;\n+      end case;\n+   end record;\n+   pragma Unchecked_Union (Value_Union);\n+\n+end Unchecked_Union;"}]}