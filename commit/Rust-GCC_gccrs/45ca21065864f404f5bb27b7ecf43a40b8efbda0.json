{"sha": "45ca21065864f404f5bb27b7ecf43a40b8efbda0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVjYTIxMDY1ODY0ZjQwNGY1YmIyN2I3ZWNmNDNhNDBiOGVmYmRhMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-04-04T22:01:46Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-04-04T22:01:46Z"}, "message": "h8300-protos.h: Add a prototype for compute_a_shift_cc.\n\n\t* config/h8300/h8300-protos.h: Add a prototype for\n\tcompute_a_shift_cc.\n\t* config/h8300/h8300.c (shift_one): Update the CC status.\n\t(shift_two): Likewise.\n\t(output_a_shift_cc): Set cc_inline and cc_special.\n\t(compute_a_shift_cc): New.\n\t* config/h8300/h8300.md (shift insns): Use compute_a_shift_cc.\n\nFrom-SVN: r65251", "tree": {"sha": "6fe49cbd2890fa089a4111686cf08c87ce19fc69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fe49cbd2890fa089a4111686cf08c87ce19fc69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45ca21065864f404f5bb27b7ecf43a40b8efbda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ca21065864f404f5bb27b7ecf43a40b8efbda0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45ca21065864f404f5bb27b7ecf43a40b8efbda0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ca21065864f404f5bb27b7ecf43a40b8efbda0/comments", "author": null, "committer": null, "parents": [{"sha": "7c2aa9d72cc0a0d39c44206f86ffca8f9f2c66bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2aa9d72cc0a0d39c44206f86ffca8f9f2c66bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c2aa9d72cc0a0d39c44206f86ffca8f9f2c66bd"}], "stats": {"total": 226, "additions": 178, "deletions": 48}, "files": [{"sha": "01a858ba20bd4e0041e25dcec968aa5c77049db3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ca21065864f404f5bb27b7ecf43a40b8efbda0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ca21065864f404f5bb27b7ecf43a40b8efbda0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45ca21065864f404f5bb27b7ecf43a40b8efbda0", "patch": "@@ -1,3 +1,13 @@\n+2003-04-04  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Add a prototype for\n+\tcompute_a_shift_cc.\n+\t* config/h8300/h8300.c (shift_one): Update the CC status.\n+\t(shift_two): Likewise.\n+\t(output_a_shift_cc): Set cc_inline and cc_special.\n+\t(compute_a_shift_cc): New.\n+\t* config/h8300/h8300.md (shift insns): Use compute_a_shift_cc.\n+\n 2003-04-04  Richard Henderson  <rth@redhat.com>\n \n \t* cse.c (fold_rtx): Fix 03-30 change; do check insn non-null."}, {"sha": "6cdfbeed57180b0afee11b39f98a3aefde28f370", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ca21065864f404f5bb27b7ecf43a40b8efbda0/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ca21065864f404f5bb27b7ecf43a40b8efbda0/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=45ca21065864f404f5bb27b7ecf43a40b8efbda0", "patch": "@@ -31,6 +31,7 @@ extern unsigned int compute_plussi_length PARAMS ((rtx *));\n extern int compute_plussi_cc PARAMS ((rtx *));\n extern const char *output_a_shift PARAMS ((rtx *));\n extern unsigned int compute_a_shift_length PARAMS ((rtx, rtx *));\n+extern int compute_a_shift_cc PARAMS ((rtx, rtx *));\n extern const char *emit_a_rotate PARAMS ((enum rtx_code, rtx *));\n extern const char *output_simode_bld PARAMS ((int, rtx[]));\n extern void print_operand_address PARAMS ((FILE *, rtx));"}, {"sha": "866e6fdc017d9997f1565d90a3ea6b2b781dc126", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 161, "deletions": 45, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ca21065864f404f5bb27b7ecf43a40b8efbda0/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ca21065864f404f5bb27b7ecf43a40b8efbda0/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=45ca21065864f404f5bb27b7ecf43a40b8efbda0", "patch": "@@ -2661,42 +2661,42 @@ static const struct shift_insn shift_one[2][3][3] =\n   {\n /* SHIFT_ASHIFT */\n     {\n-      { \"shll\\t%X0\", CC_NO_CARRY },\n-      { \"add.w\\t%T0,%T0\", CC_OVERFLOW_UNUSABLE | CC_NO_CARRY },\n-      { \"add.w\\t%f0,%f0\\n\\taddx\\t%y0,%y0\\n\\taddx\\t%z0,%z0\", 0 }\n+      { \"shll\\t%X0\", CC_SET_ZNV },\n+      { \"add.w\\t%T0,%T0\", CC_SET_ZN },\n+      { \"add.w\\t%f0,%f0\\n\\taddx\\t%y0,%y0\\n\\taddx\\t%z0,%z0\", CC_CLOBBER }\n     },\n /* SHIFT_LSHIFTRT */\n     {\n-      { \"shlr\\t%X0\", CC_NO_CARRY },\n-      { \"shlr\\t%t0\\n\\trotxr\\t%s0\", 0 },\n-      { \"shlr\\t%z0\\n\\trotxr\\t%y0\\n\\trotxr\\t%x0\\n\\trotxr\\t%w0\", 0 }\n+      { \"shlr\\t%X0\", CC_SET_ZNV },\n+      { \"shlr\\t%t0\\n\\trotxr\\t%s0\", CC_CLOBBER },\n+      { \"shlr\\t%z0\\n\\trotxr\\t%y0\\n\\trotxr\\t%x0\\n\\trotxr\\t%w0\", CC_CLOBBER }\n     },\n /* SHIFT_ASHIFTRT */\n     {\n-      { \"shar\\t%X0\", CC_OVERFLOW_UNUSABLE | CC_NO_CARRY },\n-      { \"shar\\t%t0\\n\\trotxr\\t%s0\", 0 },\n-      { \"shar\\t%z0\\n\\trotxr\\t%y0\\n\\trotxr\\t%x0\\n\\trotxr\\t%w0\", 0 }\n+      { \"shar\\t%X0\", CC_SET_ZNV },\n+      { \"shar\\t%t0\\n\\trotxr\\t%s0\", CC_CLOBBER },\n+      { \"shar\\t%z0\\n\\trotxr\\t%y0\\n\\trotxr\\t%x0\\n\\trotxr\\t%w0\", CC_CLOBBER }\n     }\n   },\n /* H8/300H */\n   {\n /* SHIFT_ASHIFT */\n     {\n-      { \"shll.b\\t%X0\", CC_NO_CARRY },\n-      { \"shll.w\\t%T0\", CC_NO_CARRY },\n-      { \"shll.l\\t%S0\", CC_NO_CARRY }\n+      { \"shll.b\\t%X0\", CC_SET_ZNV },\n+      { \"shll.w\\t%T0\", CC_SET_ZNV },\n+      { \"shll.l\\t%S0\", CC_SET_ZNV }\n     },\n /* SHIFT_LSHIFTRT */\n     {\n-      { \"shlr.b\\t%X0\", CC_NO_CARRY },\n-      { \"shlr.w\\t%T0\", CC_NO_CARRY },\n-      { \"shlr.l\\t%S0\", CC_NO_CARRY }\n+      { \"shlr.b\\t%X0\", CC_SET_ZNV },\n+      { \"shlr.w\\t%T0\", CC_SET_ZNV },\n+      { \"shlr.l\\t%S0\", CC_SET_ZNV }\n     },\n /* SHIFT_ASHIFTRT */\n     {\n-      { \"shar.b\\t%X0\", CC_OVERFLOW_UNUSABLE | CC_NO_CARRY },\n-      { \"shar.w\\t%T0\", CC_OVERFLOW_UNUSABLE | CC_NO_CARRY },\n-      { \"shar.l\\t%S0\", CC_OVERFLOW_UNUSABLE | CC_NO_CARRY }\n+      { \"shar.b\\t%X0\", CC_SET_ZNV },\n+      { \"shar.w\\t%T0\", CC_SET_ZNV },\n+      { \"shar.l\\t%S0\", CC_SET_ZNV }\n     }\n   }\n };\n@@ -2705,21 +2705,21 @@ static const struct shift_insn shift_two[3][3] =\n {\n /* SHIFT_ASHIFT */\n     {\n-      { \"shll.b\\t#2,%X0\", CC_NO_CARRY },\n-      { \"shll.w\\t#2,%T0\", CC_NO_CARRY },\n-      { \"shll.l\\t#2,%S0\", CC_NO_CARRY }\n+      { \"shll.b\\t#2,%X0\", CC_SET_ZNV },\n+      { \"shll.w\\t#2,%T0\", CC_SET_ZNV },\n+      { \"shll.l\\t#2,%S0\", CC_SET_ZNV }\n     },\n /* SHIFT_LSHIFTRT */\n     {\n-      { \"shlr.b\\t#2,%X0\", CC_NO_CARRY },\n-      { \"shlr.w\\t#2,%T0\", CC_NO_CARRY },\n-      { \"shlr.l\\t#2,%S0\", CC_NO_CARRY }\n+      { \"shlr.b\\t#2,%X0\", CC_SET_ZNV },\n+      { \"shlr.w\\t#2,%T0\", CC_SET_ZNV },\n+      { \"shlr.l\\t#2,%S0\", CC_SET_ZNV }\n     },\n /* SHIFT_ASHIFTRT */\n     {\n-      { \"shar.b\\t#2,%X0\", CC_OVERFLOW_UNUSABLE | CC_NO_CARRY },\n-      { \"shar.w\\t#2,%T0\", CC_OVERFLOW_UNUSABLE | CC_NO_CARRY },\n-      { \"shar.l\\t#2,%S0\", CC_OVERFLOW_UNUSABLE | CC_NO_CARRY }\n+      { \"shar.b\\t#2,%X0\", CC_SET_ZNV },\n+      { \"shar.w\\t#2,%T0\", CC_SET_ZNV },\n+      { \"shar.l\\t#2,%S0\", CC_SET_ZNV }\n     }\n };\n \n@@ -2814,8 +2814,11 @@ struct shift_info {\n      or SHIFT_SPECIAL, and REMAINDER is nonzero.  */\n   const char *shift2;\n \n-  /* Valid CC flags.  */\n-  int cc_valid_p;\n+  /* CC status for SHIFT_INLINE.  */\n+  int cc_inline;\n+\n+  /* CC status  for SHIFT_SPECIAL.  */\n+  int cc_special;\n };\n \n static void get_shift_alg PARAMS ((enum shift_type,\n@@ -2885,21 +2888,22 @@ get_shift_alg (shift_type, shift_mode, count, info)\n       /* It is up to the caller to know that looping clobbers cc.  */\n       info->shift1 = shift_one[cpu_type][shift_type][shift_mode].assembler;\n       info->shift2 = shift_two[shift_type][shift_mode].assembler;\n-      info->cc_valid_p = shift_one[cpu_type][shift_type][shift_mode].cc_valid;\n+      info->cc_inline = shift_one[cpu_type][shift_type][shift_mode].cc_valid;\n       goto end;\n \n     case SHIFT_ROT_AND:\n       info->shift1 = rotate_one[cpu_type][shift_type][shift_mode];\n       info->shift2 = rotate_two[shift_type][shift_mode];\n-      info->cc_valid_p = 0;\n+      info->cc_inline = CC_CLOBBER;\n       goto end;\n \n     case SHIFT_SPECIAL:\n       /* REMAINDER is 0 for most cases, so initialize it to 0.  */\n       info->remainder = 0;\n       info->shift1 = shift_one[cpu_type][shift_type][shift_mode].assembler;\n       info->shift2 = shift_two[shift_type][shift_mode].assembler;\n-      info->cc_valid_p = 0;\n+      info->cc_inline = shift_one[cpu_type][shift_type][shift_mode].cc_valid;\n+      info->cc_special = CC_CLOBBER;\n       break;\n     }\n \n@@ -2953,10 +2957,12 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t\t{\n \t\t  info->special = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\";\n \t\t  info->shift1  = \"shlr.b\\t%s0\";\n+\t\t  info->cc_inline = CC_SET_ZNV;\n \t\t}\n \t      else\n \t\t{\n \t\t  info->special = \"mov.b\\t%t0,%s0\\n\\textu.w\\t%T0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n \t\t}\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n@@ -2968,6 +2974,7 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t      else\n \t\t{\n \t\t  info->special = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n \t\t}\n \t      goto end;\n \t    }\n@@ -2988,7 +2995,10 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t      if (TARGET_H8300)\n \t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tshll.b\\t%s0\\n\\tsubx.b\\t%t0,%t0\\n\\tshll.b\\t%s0\\n\\tmov.b\\t%t0,%s0\\n\\tbst.b\\t#0,%s0\";\n \t      else if (TARGET_H8300H)\n-\t\tinfo->special = \"shll.b\\t%t0\\n\\tsubx.b\\t%s0,%s0\\n\\tshll.b\\t%t0\\n\\trotxl.b\\t%s0\\n\\texts.w\\t%T0\";\n+\t\t{\n+\t\t  info->special = \"shll.b\\t%t0\\n\\tsubx.b\\t%s0,%s0\\n\\tshll.b\\t%t0\\n\\trotxl.b\\t%s0\\n\\texts.w\\t%T0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n+\t\t}\n \t      else /* TARGET_H8300S */\n \t\tabort ();\n \t      goto end;\n@@ -3065,9 +3075,11 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t    {\n \t    case SHIFT_ASHIFT:\n \t      info->special = \"shlr.w\\t%e0\\n\\tmov.w\\t%f0,%e0\\n\\txor.w\\t%f0,%f0\\n\\trotxr.l\\t%S0\";\n+\t      info->cc_special = CC_SET_ZNV;\n \t      goto end;\n \t    case SHIFT_LSHIFTRT:\n \t      info->special = \"shll.w\\t%f0\\n\\tmov.w\\t%e0,%f0\\n\\txor.w\\t%e0,%e0\\n\\trotxl.l\\t%S0\";\n+\t      info->cc_special = CC_SET_ZNV;\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n \t      abort ();\n@@ -3095,6 +3107,7 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t      else\n \t\t{\n \t\t  info->special = \"mov.w\\t%e0,%f0\\n\\textu.l\\t%S0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n \t\t}\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n@@ -3106,6 +3119,7 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t      else\n \t\t{\n \t\t  info->special = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n \t\t}\n \t      goto end;\n \t    }\n@@ -3119,14 +3133,17 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t    case SHIFT_ASHIFT:\n \t      info->special = \"mov.b\\t%w0,%z0\\n\\tsub.b\\t%y0,%y0\\n\\tsub.w\\t%f0,%f0\";\n \t      info->shift1  = \"shll.b\\t%z0\";\n+\t      info->cc_inline = CC_SET_ZNV;\n \t      goto end;\n \t    case SHIFT_LSHIFTRT:\n \t      info->special = \"mov.b\\t%z0,%w0\\n\\tsub.b\\t%x0,%x0\\n\\tsub.w\\t%e0,%e0\";\n \t      info->shift1  = \"shlr.b\\t%w0\";\n+\t      info->cc_inline = CC_SET_ZNV;\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n \t      info->special = \"mov.b\\t%z0,%w0\\n\\tbld\\t#7,%w0\\n\\tsubx\\t%x0,%x0\\n\\tsubx\\t%x0,%x0\\n\\tsubx\\t%x0,%x0\";\n \t      info->shift1  = \"shar.b\\t%w0\";\n+\t      info->cc_inline = CC_SET_ZNV;\n \t      goto end;\n \t    }\n \t}\n@@ -3142,9 +3159,11 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t      goto end;\n \t    case SHIFT_LSHIFTRT:\n \t      info->special = \"mov.w\\t%e0,%f0\\n\\tmov.b\\t%t0,%s0\\n\\textu.w\\t%f0\\n\\textu.l\\t%S0\";\n+\t      info->cc_special = CC_SET_ZNV;\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n \t      info->special = \"mov.w\\t%e0,%f0\\n\\tmov.b\\t%t0,%s0\\n\\texts.w\\t%f0\\n\\texts.l\\t%S0\";\n+\t      info->cc_special = CC_SET_ZNV;\n \t      goto end;\n \t    }\n \t}\n@@ -3160,7 +3179,10 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t      goto end;\n \t    case SHIFT_LSHIFTRT:\n \t      if (TARGET_H8300H)\n-\t\tinfo->special = \"sub.w\\t%f0,%f0\\n\\trotl.l\\t%S0\\n\\trotl.l\\t%S0\\n\\trotl.l\\t%S0\\n\\trotl.l\\t%S0\\n\\textu.l\\t%S0\";\n+\t\t{\n+\t\t  info->special = \"sub.w\\t%f0,%f0\\n\\trotl.l\\t%S0\\n\\trotl.l\\t%S0\\n\\trotl.l\\t%S0\\n\\trotl.l\\t%S0\\n\\textu.l\\t%S0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n+\t\t}\n \t      else\n \t\tinfo->special = \"sub.w\\t%f0,%f0\\n\\trotl.l\\t#2,%S0\\n\\trotl.l\\t#2,%S0\\n\\textu.l\\t%S0\";\n \t      goto end;\n@@ -3180,9 +3202,15 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t      goto end;\n \t    case SHIFT_LSHIFTRT:\n \t      if (TARGET_H8300H)\n-\t\tinfo->special = \"sub.w\\t%f0,%f0\\n\\trotl.l\\t%S0\\n\\trotl.l\\t%S0\\n\\trotl.l\\t%S0\\n\\textu.l\\t%S0\";\n+\t\t{\n+\t\t  info->special = \"sub.w\\t%f0,%f0\\n\\trotl.l\\t%S0\\n\\trotl.l\\t%S0\\n\\trotl.l\\t%S0\\n\\textu.l\\t%S0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n+\t\t}\n \t      else\n-\t\tinfo->special = \"sub.w\\t%f0,%f0\\n\\trotl.l\\t#2,%S0\\n\\trotl.l\\t%S0\\n\\textu.l\\t%S0\";\n+\t\t{\n+\t\t  info->special = \"sub.w\\t%f0,%f0\\n\\trotl.l\\t#2,%S0\\n\\trotl.l\\t%S0\\n\\textu.l\\t%S0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n+\t\t}\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n \t      abort ();\n@@ -3231,12 +3259,15 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t\t{\n \t\tcase SHIFT_ASHIFT:\n \t\t  info->special = \"shlr.l\\t%S0\\n\\txor.l\\t%S0,%S0\\n\\trotxr.l\\t%S0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n \t\t  goto end;\n \t\tcase SHIFT_LSHIFTRT:\n \t\t  info->special = \"shll.l\\t%S0\\n\\txor.l\\t%S0,%S0\\n\\trotxl.l\\t%S0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n \t\t  goto end;\n \t\tcase SHIFT_ASHIFTRT:\n \t\t  info->special = \"shll\\t%e0\\n\\tsubx\\t%w0,%w0\\n\\texts.w\\t%T0\\n\\texts.l\\t%S0\";\n+\t\t  info->cc_special = CC_SET_ZNV;\n \t\t  goto end;\n \t\t}\n \t    }\n@@ -3390,13 +3421,6 @@ output_a_shift (operands)\n \t  /* Now emit one bit shifts for any residual.  */\n \t  for (; n > 0; n--)\n \t    output_asm_insn (info.shift1, operands);\n-\n-\t  /* Keep track of CC.  */\n-\t  if (info.cc_valid_p)\n-\t    {\n-\t      cc_status.value1 = operands[0];\n-\t      cc_status.flags |= info.cc_valid_p;\n-\t    }\n \t  return \"\";\n \n \tcase SHIFT_ROT_AND:\n@@ -3431,8 +3455,6 @@ output_a_shift (operands)\n \t    else\n \t      abort ();\n \n-\t    cc_status.value1 = operands[0];\n-\t    cc_status.flags |= CC_NO_CARRY;\n \t    output_asm_insn (insn_buf, operands);\n \t    return \"\";\n \t  }\n@@ -3630,6 +3652,100 @@ compute_a_shift_length (insn, operands)\n \t}\n     }\n }\n+\n+int\n+compute_a_shift_cc (insn, operands)\n+     rtx insn ATTRIBUTE_UNUSED;\n+     rtx *operands;\n+{\n+  rtx shift = operands[3];\n+  enum machine_mode mode = GET_MODE (shift);\n+  enum rtx_code code = GET_CODE (shift);\n+  enum shift_type shift_type;\n+  enum shift_mode shift_mode;\n+  struct shift_info info;\n+\n+  switch (mode)\n+    {\n+    case QImode:\n+      shift_mode = QIshift;\n+      break;\n+    case HImode:\n+      shift_mode = HIshift;\n+      break;\n+    case SImode:\n+      shift_mode = SIshift;\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  switch (code)\n+    {\n+    case ASHIFTRT:\n+      shift_type = SHIFT_ASHIFTRT;\n+      break;\n+    case LSHIFTRT:\n+      shift_type = SHIFT_LSHIFTRT;\n+      break;\n+    case ASHIFT:\n+      shift_type = SHIFT_ASHIFT;\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      /* This case must be taken care of by one of the two splitters\n+\t that convert a variable shift into a loop.  */\n+      abort ();\n+    }\n+  else\n+    {\n+      int n = INTVAL (operands[2]);\n+\n+      /* If the count is negative, make it 0.  */\n+      if (n < 0)\n+\tn = 0;\n+      /* If the count is too big, truncate it.\n+         ANSI says shifts of GET_MODE_BITSIZE are undefined - we choose to\n+\t do the intuitive thing.  */\n+      else if ((unsigned int) n > GET_MODE_BITSIZE (mode))\n+\tn = GET_MODE_BITSIZE (mode);\n+\n+      get_shift_alg (shift_type, shift_mode, n, &info);\n+\n+      switch (info.alg)\n+\t{\n+\tcase SHIFT_SPECIAL:\n+\t  if (info.remainder == 0)\n+\t    return info.cc_special;\n+\n+\t  /* Fall through.  */\n+\n+\tcase SHIFT_INLINE:\n+\t  return info.cc_inline;\n+\n+\tcase SHIFT_ROT_AND:\n+\t  /* This case always ends with an and instruction.  */\n+\t  return CC_SET_ZNV;\n+\n+\tcase SHIFT_LOOP:\n+\t  /* A loop to shift by a \"large\" constant value.\n+\t     If we have shift-by-2 insns, use them.  */\n+\t  if (info.shift2 != NULL)\n+\t    {\n+\t      if (n % 2)\n+\t\treturn info.cc_inline;\n+\t    }\n+\t  return CC_CLOBBER;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+    }\n+}\n \f\n /* A rotation by a non-constant will cause a loop to be generated, in\n    which a rotation by one bit is used.  A rotation by a constant,"}, {"sha": "ce206967472451e7377758abe21c7ddd67598797", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ca21065864f404f5bb27b7ecf43a40b8efbda0/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ca21065864f404f5bb27b7ecf43a40b8efbda0/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=45ca21065864f404f5bb27b7ecf43a40b8efbda0", "patch": "@@ -2272,7 +2272,8 @@\n   \"* return output_a_shift (operands);\"\n   [(set (attr \"length\")\n \t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n-   (set_attr \"cc\" \"clobber\")])\n+   (set (attr \"cc\")\n+\t(symbol_ref \"compute_a_shift_cc (insn, operands)\"))])\n \n ;; HI BIT SHIFTS\n \n@@ -2307,7 +2308,8 @@\n   \"* return output_a_shift (operands);\"\n   [(set (attr \"length\")\n \t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n-   (set_attr \"cc\" \"clobber\")])\n+   (set (attr \"cc\")\n+\t(symbol_ref \"compute_a_shift_cc (insn, operands)\"))])\n \n ;;  SI BIT SHIFTS\n \n@@ -2342,7 +2344,8 @@\n   \"* return output_a_shift (operands);\"\n   [(set (attr \"length\")\n \t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n-   (set_attr \"cc\" \"clobber\")])\n+   (set (attr \"cc\")\n+\t(symbol_ref \"compute_a_shift_cc (insn, operands)\"))])\n \n ;; Split a variable shift into a loop.  If the register containing\n ;; the shift count dies, then we just use that register."}]}