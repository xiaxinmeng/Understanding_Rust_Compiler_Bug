{"sha": "61ad58f3aa6aac0e9b91e175dd821388c5fdf320", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFhZDU4ZjNhYTZhYWMwZTliOTFlMTc1ZGQ4MjEzODhjNWZkZjMyMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-23T15:56:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-23T15:56:05Z"}, "message": "PR libstdc++/79195 fix make_array type deduction\n\n\tPR libstdc++/79195\n\t* include/experimental/array (__make_array_elem): New class template\n\tand partial specialization.\n\t(__is_reference_wrapper): Move into __make_array_elem specialization.\n\t(make_array): Use __make_array_elem to determine element type and move\n\tstatic assertion into specialization. Qualify std::forward call.\n\t(to_array): Add exception specifiation.\n\t* testsuite/experimental/array/make_array.cc: Test argument types\n\twithout a common type.\n\t* testsuite/experimental/array/neg.cc: Adjust expected error message.\n\nFrom-SVN: r244813", "tree": {"sha": "e4e77c48206e3725745d8c08fe0c0346a1be8422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4e77c48206e3725745d8c08fe0c0346a1be8422"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61ad58f3aa6aac0e9b91e175dd821388c5fdf320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ad58f3aa6aac0e9b91e175dd821388c5fdf320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ad58f3aa6aac0e9b91e175dd821388c5fdf320", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ad58f3aa6aac0e9b91e175dd821388c5fdf320/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f368600fcd86f71c7bfc8a28f42434c539306da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f368600fcd86f71c7bfc8a28f42434c539306da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f368600fcd86f71c7bfc8a28f42434c539306da2"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "9bd2c7efd103f5fdf42e348236a2da08694d88fe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ad58f3aa6aac0e9b91e175dd821388c5fdf320/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ad58f3aa6aac0e9b91e175dd821388c5fdf320/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=61ad58f3aa6aac0e9b91e175dd821388c5fdf320", "patch": "@@ -1,3 +1,16 @@\n+2017-01-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/79195\n+\t* include/experimental/array (__make_array_elem): New class template\n+\tand partial specialization.\n+\t(__is_reference_wrapper): Move into __make_array_elem specialization.\n+\t(make_array): Use __make_array_elem to determine element type and move\n+\tstatic assertion into specialization. Qualify std::forward call.\n+\t(to_array): Add exception specifiation.\n+\t* testsuite/experimental/array/make_array.cc: Test argument types\n+\twithout a common type.\n+\t* testsuite/experimental/array/neg.cc: Adjust expected error message.\n+\n 2017-01-22  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/debug.xml: code.google.com uses https now."}, {"sha": "11cb924e087b35d90887b4fec14e88fc67f4b6d8", "filename": "libstdc++-v3/include/experimental/array", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ad58f3aa6aac0e9b91e175dd821388c5fdf320/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ad58f3aa6aac0e9b91e175dd821388c5fdf320/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray?ref=61ad58f3aa6aac0e9b91e175dd821388c5fdf320", "patch": "@@ -57,42 +57,48 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-template <typename _Up>\n-  struct __is_reference_wrapper : false_type\n-  {};\n+template<typename _Dest, typename... _Types>\n+  struct __make_array_elem\n+  {\n+    using type = _Dest;\n+  };\n+\n+template<typename... _Types>\n+  struct __make_array_elem<void, _Types...>\n+  : common_type<_Types...>\n+  {\n+    template <typename>\n+      struct __is_reference_wrapper : false_type\n+      {};\n+\n+    template <typename _Up>\n+      struct __is_reference_wrapper<reference_wrapper<_Up>> : true_type\n+      {};\n \n-template <typename _Up>\n-  struct __is_reference_wrapper<reference_wrapper<_Up>> : true_type\n-  {};\n+    static_assert(!__or_<__is_reference_wrapper<decay_t<_Types>>...>::value,\n+                  \"make_array must be used with an explicit target type when\"\n+                  \"any of the arguments is a reference_wrapper\");\n+  };\n \n template <typename _Dest = void, typename... _Types>\n-  constexpr auto\n+  constexpr\n+  array<typename __make_array_elem<_Dest, _Types...>::type, sizeof...(_Types)>\n   make_array(_Types&&... __t)\n-    -> array<conditional_t<is_void_v<_Dest>,\n-                           common_type_t<_Types...>,\n-                           _Dest>,\n-             sizeof...(_Types)>\n   {\n-    static_assert(__or_<\n-                  __not_<is_void<_Dest>>,\n-                  __and_<__not_<__is_reference_wrapper<decay_t<_Types>>>...>>\n-                  ::value,\n-                  \"make_array cannot be used without an explicit target type \"\n-                  \"if any of the types given is a reference_wrapper\");\n-    return {{forward<_Types>(__t)...}};\n+    return {{ std::forward<_Types>(__t)... }};\n   }\n \n template <typename _Tp, size_t _Nm, size_t... _Idx>\n   constexpr array<remove_cv_t<_Tp>, _Nm>\n-  __to_array(_Tp (&__a)[_Nm],\n-             index_sequence<_Idx...>)\n+  __to_array(_Tp (&__a)[_Nm], index_sequence<_Idx...>)\n   {\n     return {{__a[_Idx]...}};\n   }\n \n template <typename _Tp, size_t _Nm>\n   constexpr array<remove_cv_t<_Tp>, _Nm>\n   to_array(_Tp (&__a)[_Nm])\n+  noexcept(is_nothrow_constructible<remove_cv_t<_Tp>, _Tp&>::value)\n   {\n     return __to_array(__a, make_index_sequence<_Nm>{});\n   }"}, {"sha": "1b7d60e3173f8dd0e97ffc6a869eb38f0eb85877", "filename": "libstdc++-v3/testsuite/experimental/array/make_array.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ad58f3aa6aac0e9b91e175dd821388c5fdf320/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Farray%2Fmake_array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ad58f3aa6aac0e9b91e175dd821388c5fdf320/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Farray%2Fmake_array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Farray%2Fmake_array.cc?ref=61ad58f3aa6aac0e9b91e175dd821388c5fdf320", "patch": "@@ -18,7 +18,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <experimental/array>\n-#include <functional>\n \n struct MoveOnly\n {\n@@ -27,7 +26,7 @@ struct MoveOnly\n   MoveOnly& operator=(MoveOnly&&) = default;\n };\n \n-int main()\n+void test01()\n {\n   char x[42];\n   std::array<char, 42> y = std::experimental::to_array(x);\n@@ -45,3 +44,13 @@ int main()\n     = std::experimental::make_array(1,2L, 3);\n   constexpr std::array<MoveOnly, 1> zzz2 = std::experimental::make_array(MoveOnly{});\n }\n+\n+void test02()\n+{\n+  // PR libstdc++/79195\n+  struct A {};\n+  struct B : A {};\n+  struct C : A {};\n+  auto arr = std::experimental::make_array<A>(B{}, C{});\n+  static_assert(std::is_same<decltype(arr), std::array<A, 2>>::value, \"\");\n+}"}, {"sha": "3963287f2575a8694f449af38386c0333dc992fb", "filename": "libstdc++-v3/testsuite/experimental/array/neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ad58f3aa6aac0e9b91e175dd821388c5fdf320/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Farray%2Fneg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ad58f3aa6aac0e9b91e175dd821388c5fdf320/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Farray%2Fneg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Farray%2Fneg.cc?ref=61ad58f3aa6aac0e9b91e175dd821388c5fdf320", "patch": "@@ -24,5 +24,5 @@ int main()\n {\n   int dummy;\n   auto bad = std::experimental::make_array(std::ref(dummy));\n-  // { dg-error \"make_array cannot be used without an explicit target type if any of the types given is a reference_wrapper\" \"\" { target *-*-* } 76 }\n+  // { dg-error \"explicit target type\" \"\" { target *-*-* } 78 }\n }"}]}