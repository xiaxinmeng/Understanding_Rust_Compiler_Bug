{"sha": "a6d025598ff69c2a3771e33e909db556d3ac9443", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZkMDI1NTk4ZmY2OWMyYTM3NzFlMzNlOTA5ZGI1NTZkM2FjOTQ0Mw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-07-08T06:34:23Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-07-08T06:34:23Z"}, "message": "tree-flow.h (addressable_vars): Declare.\n\n\n\t* tree-flow.h (addressable_vars): Declare.\n\t* tree-ssa-alias.c (addressable_vars): Define.\n\t(setup_pointers_and_addressables): Add addressable variables\n\tto addressable_vars.\n\t* tree-ssa-operands.c (get_stmt_operands): Move\n\thandling of ASM_EXPRs ...\n\t(get_asm_expr_operands): ... here.\n\tWhen the ASM_EXPR clobbers memory, also clobber addressable\n\tvariables.\n\t* tree-ssa.c (init_tree_ssa): Initialize addressable_vars.\n\t(delete_tree_ssa): Reset addressable_vars.\n\nFrom-SVN: r84272", "tree": {"sha": "5c79cb7b4b5618ddb85532e6e8073409ae3d4f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c79cb7b4b5618ddb85532e6e8073409ae3d4f11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6d025598ff69c2a3771e33e909db556d3ac9443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d025598ff69c2a3771e33e909db556d3ac9443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6d025598ff69c2a3771e33e909db556d3ac9443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d025598ff69c2a3771e33e909db556d3ac9443/comments", "author": null, "committer": null, "parents": [{"sha": "08a8c6b65b22e0c125c1bd8fcc5428f72b262ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a8c6b65b22e0c125c1bd8fcc5428f72b262ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08a8c6b65b22e0c125c1bd8fcc5428f72b262ca0"}], "stats": {"total": 190, "additions": 137, "deletions": 53}, "files": [{"sha": "8e5f51936e9b48682e77bc73ff16b923138711e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d025598ff69c2a3771e33e909db556d3ac9443/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d025598ff69c2a3771e33e909db556d3ac9443/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6d025598ff69c2a3771e33e909db556d3ac9443", "patch": "@@ -1,3 +1,17 @@\n+2004-07-08  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-flow.h (addressable_vars): Declare.\n+\t* tree-ssa-alias.c (addressable_vars): Define.\n+\t(setup_pointers_and_addressables): Add addressable variables\n+\tto addressable_vars.\n+\t* tree-ssa-operands.c (get_stmt_operands): Move\n+\thandling of ASM_EXPRs ...\n+\t(get_asm_expr_operands): ... here.\n+\tWhen the ASM_EXPR clobbers memory, also clobber addressable\n+\tvariables.\n+\t* tree-ssa.c (init_tree_ssa): Initialize addressable_vars.\n+\t(delete_tree_ssa): Reset addressable_vars.\n+\n 2004-07-07  Jan Beulich  <jbeulich@novell.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "f9f8115328c854b8168dc5881c198935b793f9a4", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d025598ff69c2a3771e33e909db556d3ac9443/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d025598ff69c2a3771e33e909db556d3ac9443/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=a6d025598ff69c2a3771e33e909db556d3ac9443", "patch": "@@ -395,6 +395,10 @@ extern GTY(()) tree global_var;\n    REFERENCED_VARS (I) is call-clobbered.  */\n extern bitmap call_clobbered_vars;\n \n+/* Addressable variables in the function.  If bit I is set, then\n+   REFERENCED_VARS (I) has had its address taken.  */\n+extern bitmap addressable_vars;\n+\n /* 'true' after aliases have been computed (see compute_may_aliases).  */\n extern bool aliases_computed_p;\n "}, {"sha": "3cf27ae6a6b8373e59735ed919358f82c6cd0d3c", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d025598ff69c2a3771e33e909db556d3ac9443/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d025598ff69c2a3771e33e909db556d3ac9443/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=a6d025598ff69c2a3771e33e909db556d3ac9443", "patch": "@@ -163,6 +163,10 @@ static struct ptr_info_def *get_ptr_info (tree t);\n    REFERENCED_VARS (I) is call-clobbered.  */\n bitmap call_clobbered_vars;\n \n+/* Addressable variables in the function.  If bit I is set, then\n+   REFERENCED_VARS (I) has had its address taken.  */\n+bitmap addressable_vars;\n+\n /* 'true' after aliases have been computed (see compute_may_aliases).  This\n    is used by get_stmt_operands and its helpers to determine what to do\n    when scanning an operand for a variable that may be aliased.  If\n@@ -1196,6 +1200,14 @@ setup_pointers_and_addressables (struct alias_info *ai)\n \t\t to rename VAR into SSA afterwards.  */\n \t      bitmap_set_bit (vars_to_rename, v_ann->uid);\n \t    }\n+\t  else\n+\t    {\n+\t      /* Add the variable to the set of addressables.  Mostly\n+\t\t used when scanning operands for ASM_EXPRs that\n+\t\t clobber memory.  In those cases, we need to clobber\n+\t\t all call-clobbered variables and all addressables.  */\n+\t      bitmap_set_bit (addressable_vars, v_ann->uid);\n+\t    }\n \t}\n \n       /* Global variables and addressable locals may be aliased.  Create an"}, {"sha": "46f9f59ac0458068ca6cf9ece33382d2599f0ce5", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 104, "deletions": 53, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d025598ff69c2a3771e33e909db556d3ac9443/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d025598ff69c2a3771e33e909db556d3ac9443/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=a6d025598ff69c2a3771e33e909db556d3ac9443", "patch": "@@ -80,6 +80,7 @@ typedef struct voperands_d\n \n static void note_addressable (tree, stmt_ann_t);\n static void get_expr_operands (tree, tree *, int, voperands_t);\n+static void get_asm_expr_operands (tree, voperands_t);\n static inline void append_def (tree *, tree);\n static inline void append_use (tree *, tree);\n static void append_v_may_def (tree, tree, voperands_t);\n@@ -777,59 +778,7 @@ get_stmt_operands (tree stmt)\n       break;\n \n     case ASM_EXPR:\n-      {\n-\tint noutputs = list_length (ASM_OUTPUTS (stmt));\n-\tconst char **oconstraints\n-\t  = (const char **) alloca ((noutputs) * sizeof (const char *));\n-\tint i;\n-\ttree link;\n-\tconst char *constraint;\n-\tbool allows_mem, allows_reg, is_inout;\n-\n-\tfor (i=0, link = ASM_OUTPUTS (stmt); link;\n-\t     ++i, link = TREE_CHAIN (link))\n-\t  {\n-\t    oconstraints[i] = constraint\n-\t      = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (link)));\n-\t    parse_output_constraint (&constraint, i, 0, 0,\n-\t\t\t\t     &allows_mem, &allows_reg, &is_inout);\n-\t    if (allows_reg && is_inout)\n-\t      /* This should have been split in gimplify_asm_expr.  */\n-\t      abort ();\n-\n-\t    if (!allows_reg && allows_mem)\n-\t      {\n-\t\ttree t = get_base_address (TREE_VALUE (link));\n-\t\tif (t && DECL_P (t))\n-\t\t  mark_call_clobbered (t);\n-\t      }\n-\n-\t    get_expr_operands (stmt, &TREE_VALUE (link), opf_is_def,\n-\t\t\t       &prev_vops);\n-\t  }\n-\n-\tfor (link = ASM_INPUTS (stmt); link; link = TREE_CHAIN (link))\n-\t  {\n-\t    constraint\n-\t      = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (link)));\n-\t    parse_input_constraint (&constraint, 0, 0, noutputs, 0,\n-\t\t\t\t    oconstraints, &allows_mem, &allows_reg);\n-\n-\t    if (!allows_reg && allows_mem)\n-\t      {\n-\t\ttree t = get_base_address (TREE_VALUE (link));\n-\t\tif (t && DECL_P (t))\n-\t\t  mark_call_clobbered (t);\n-\t      }\n-\n-\t    get_expr_operands (stmt, &TREE_VALUE (link), 0, &prev_vops);\n-\t  }\n-\n-\t/* Clobber memory for asm (\"\" : : : \"memory\");  */\n-\tfor (link = ASM_CLOBBERS (stmt); link; link = TREE_CHAIN (link))\n-\t  if (!strcmp (TREE_STRING_POINTER (TREE_VALUE (link)), \"memory\"))\n-\t    add_call_clobber_ops (stmt, &prev_vops);\n-      }\n+      get_asm_expr_operands (stmt, &prev_vops);\n       break;\n \n     case RETURN_EXPR:\n@@ -1215,6 +1164,108 @@ get_expr_operands (tree stmt, tree *expr_p, int flags, voperands_t prev_vops)\n   abort ();\n }\n \n+/* Scan operands in ASM_EXPR STMT.  PREV_VOPS is as in\n+   append_v_may_def and append_vuse.  */\n+\n+static void\n+get_asm_expr_operands (tree stmt, voperands_t prev_vops)\n+{\n+  int noutputs = list_length (ASM_OUTPUTS (stmt));\n+  const char **oconstraints\n+    = (const char **) alloca ((noutputs) * sizeof (const char *));\n+  int i;\n+  tree link;\n+  const char *constraint;\n+  bool allows_mem, allows_reg, is_inout;\n+  stmt_ann_t s_ann = stmt_ann (stmt);\n+\n+  for (i=0, link = ASM_OUTPUTS (stmt); link; ++i, link = TREE_CHAIN (link))\n+    {\n+      oconstraints[i] = constraint\n+\t= TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (link)));\n+      parse_output_constraint (&constraint, i, 0, 0,\n+\t  &allows_mem, &allows_reg, &is_inout);\n+\n+#if defined ENABLE_CHECKING\n+      /* This should have been split in gimplify_asm_expr.  */\n+      if (allows_reg && is_inout)\n+\tabort ();\n+#endif\n+\n+      /* Memory operands are addressable.  Note that STMT needs the\n+\t address of this operand.  */\n+      if (!allows_reg && allows_mem)\n+\t{\n+\t  tree t = get_base_address (TREE_VALUE (link));\n+\t  if (t && DECL_P (t))\n+\t    note_addressable (t, s_ann);\n+\t}\n+\n+      get_expr_operands (stmt, &TREE_VALUE (link), opf_is_def, prev_vops);\n+    }\n+\n+  for (link = ASM_INPUTS (stmt); link; link = TREE_CHAIN (link))\n+    {\n+      constraint\n+\t= TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (link)));\n+      parse_input_constraint (&constraint, 0, 0, noutputs, 0,\n+\t  oconstraints, &allows_mem, &allows_reg);\n+\n+      /* Memory operands are addressable.  Note that STMT needs the\n+\t address of this operand.  */\n+      if (!allows_reg && allows_mem)\n+\t{\n+\t  tree t = get_base_address (TREE_VALUE (link));\n+\t  if (t && DECL_P (t))\n+\t    note_addressable (t, s_ann);\n+\t}\n+\n+      get_expr_operands (stmt, &TREE_VALUE (link), 0, prev_vops);\n+    }\n+\n+  /* Clobber memory for asm (\"\" : : : \"memory\");  */\n+  if (!aliases_computed_p)\n+    {\n+      /* If we still have not computed aliasing information,\n+\t mark the statement as having volatile operands to avoid\n+\t optimizations from messing around with it.  */\n+      stmt_ann (stmt)->has_volatile_ops = true;\n+    }\n+  else\n+    {\n+      /* Otherwise, if this ASM_EXPR clobbers memory, clobber\n+\t all the call-clobbered variables and the addressable\n+\t variables found by the alias analyzer.  */\n+      for (link = ASM_CLOBBERS (stmt); link; link = TREE_CHAIN (link))\n+\tif (!strcmp (TREE_STRING_POINTER (TREE_VALUE (link)), \"memory\"))\n+\t  {\n+\t    /* If we had created .GLOBAL_VAR earlier, use it.\n+\t       Otherwise, add a V_MAY_DEF operand for every\n+\t       call-clobbered and addressable variable.  See\n+\t       compute_may_aliases for the heuristic used to decide\n+\t       whether to create .GLOBAL_VAR or not.  */\n+\t    if (global_var)\n+\t      add_stmt_operand (&global_var, stmt, opf_is_def, prev_vops);\n+\t    else\n+\t      {\n+\t\tsize_t i;\n+\n+\t\tEXECUTE_IF_SET_IN_BITMAP (call_clobbered_vars, 0, i,\n+\t\t    {\n+\t\t      tree var = referenced_var (i);\n+\t\t      add_stmt_operand (&var, stmt, opf_is_def, prev_vops);\n+\t\t    });\n+\n+\t\tEXECUTE_IF_SET_IN_BITMAP (addressable_vars, 0, i,\n+\t\t    {\n+\t\t      tree var = referenced_var (i);\n+\t\t      add_stmt_operand (&var, stmt, opf_is_def, prev_vops);\n+\t\t    });\n+\t      }\n+\t  }\n+    }\n+}\n+\n \n /* Add *VAR_P to the appropriate operand array of STMT.  FLAGS is as in\n    get_expr_operands.  If *VAR_P is a GIMPLE register, it will be added to"}, {"sha": "3ab7ac206bbf9cba7dfda1120f69f281c73a870f", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d025598ff69c2a3771e33e909db556d3ac9443/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d025598ff69c2a3771e33e909db556d3ac9443/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=a6d025598ff69c2a3771e33e909db556d3ac9443", "patch": "@@ -494,6 +494,7 @@ init_tree_ssa (void)\n {\n   VARRAY_TREE_INIT (referenced_vars, 20, \"referenced_vars\");\n   call_clobbered_vars = BITMAP_XMALLOC ();\n+  addressable_vars = BITMAP_XMALLOC ();\n   init_ssa_operands ();\n   init_ssanames ();\n   init_phinodes ();\n@@ -532,6 +533,8 @@ delete_tree_ssa (void)\n   BITMAP_XFREE (call_clobbered_vars);\n   call_clobbered_vars = NULL;\n   aliases_computed_p = false;\n+  BITMAP_XFREE (addressable_vars);\n+  addressable_vars = NULL;\n }\n \n "}]}