{"sha": "084ef9cf092e6c550e37a9a3daa29d25c0567f52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0ZWY5Y2YwOTJlNmM1NTBlMzdhOWEzZGFhMjlkMjVjMDU2N2Y1Mg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-08-09T04:32:43Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-08-09T04:32:43Z"}, "message": "More AWT/Swing merge from GNU Classpath.\n\nFrom-SVN: r56149", "tree": {"sha": "d5ffad9ad68a302fb6b80dbe4130805c31a396b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5ffad9ad68a302fb6b80dbe4130805c31a396b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/084ef9cf092e6c550e37a9a3daa29d25c0567f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084ef9cf092e6c550e37a9a3daa29d25c0567f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084ef9cf092e6c550e37a9a3daa29d25c0567f52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084ef9cf092e6c550e37a9a3daa29d25c0567f52/comments", "author": null, "committer": null, "parents": [{"sha": "8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9"}], "stats": {"total": 373, "additions": 373, "deletions": 0}, "files": [{"sha": "c90d00ad67d670c50fe8474e73b1690c04f0fd3b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084ef9cf092e6c550e37a9a3daa29d25c0567f52/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084ef9cf092e6c550e37a9a3daa29d25c0567f52/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=084ef9cf092e6c550e37a9a3daa29d25c0567f52", "patch": "@@ -405,6 +405,10 @@\n \tjava/awt/image/renderable/RenderedImageFactory.java: New files from\n \tclasspath.\n \n+\t* gnu/java/awt/EventModifier.java,\n+\tgnu/java/awt/image/ImageDecoder.java,\n+\tgnu/java/awt/image/XBMDecoder.java: New files from GNU Classpath.\n+\n \t* Makefile.am: Add new files.\n \t* Makefile.in: Rebuilt.\n "}, {"sha": "fe1a2782a1149a22d5f87a31fd7b72d01d579293", "filename": "libjava/gnu/java/awt/EventModifier.java", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084ef9cf092e6c550e37a9a3daa29d25c0567f52/libjava%2Fgnu%2Fjava%2Fawt%2FEventModifier.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084ef9cf092e6c550e37a9a3daa29d25c0567f52/libjava%2Fgnu%2Fjava%2Fawt%2FEventModifier.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FEventModifier.java?ref=084ef9cf092e6c550e37a9a3daa29d25c0567f52", "patch": "@@ -0,0 +1,107 @@\n+/* EventModifier.java -- tool for converting modifier bits to 1.4 syle\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt;\n+\n+import java.awt.event.InputEvent;\n+\n+public class EventModifier\n+{\n+  /** The mask for old events. */\n+  public static final int OLD_MASK = 0x3f;\n+\n+  /** The mask for new events. */\n+  public static final int NEW_MASK = 0x3fc0;\n+\n+  /**\n+   * Non-instantiable.\n+   */\n+  private EventModifier()\n+  {\n+    throw new InternalError();\n+  }\n+\n+  /**\n+   * Converts the old style modifiers (0x3f) to the new style (0xffffffc0).\n+   *\n+   * @param mod the modifiers to convert\n+   * @return the adjusted modifiers\n+   */\n+  public static int extend(int mod)\n+  {\n+    // Favor what we hope will be the common case.\n+    if ((mod & OLD_MASK) == 0)\n+      return mod;\n+    if ((mod & InputEvent.SHIFT_MASK) != 0)\n+      mod |= InputEvent.SHIFT_DOWN_MASK;\n+    if ((mod & InputEvent.CTRL_MASK) != 0)\n+      mod |= InputEvent.CTRL_DOWN_MASK;\n+    if ((mod & InputEvent.META_MASK) != 0)\n+      mod |= InputEvent.META_DOWN_MASK;\n+    if ((mod & InputEvent.ALT_MASK) != 0)\n+      mod |= InputEvent.ALT_DOWN_MASK;\n+    if ((mod & InputEvent.BUTTON1_MASK) != 0)\n+      mod |= InputEvent.BUTTON1_DOWN_MASK;\n+    if ((mod & InputEvent.ALT_GRAPH_MASK) != 0)\n+      mod |= InputEvent.ALT_GRAPH_DOWN_MASK;\n+    return mod & ~OLD_MASK;\n+  }\n+\n+  /**\n+   * Converts the new style modifiers (0xffffffc0) to the old style (0x3f).\n+   *\n+   * @param mod the modifiers to convert\n+   * @return the adjusted modifiers\n+   */\n+  public static int revert(int mod)\n+  {\n+    if ((mod & InputEvent.SHIFT_DOWN_MASK) != 0)\n+      mod |= InputEvent.SHIFT_MASK;\n+    if ((mod & InputEvent.CTRL_DOWN_MASK) != 0)\n+      mod |= InputEvent.CTRL_MASK;\n+    if ((mod & InputEvent.META_DOWN_MASK) != 0)\n+      mod |= InputEvent.META_MASK;\n+    if ((mod & InputEvent.ALT_DOWN_MASK) != 0)\n+      mod |= InputEvent.ALT_MASK;\n+    if ((mod & InputEvent.ALT_GRAPH_DOWN_MASK) != 0)\n+      mod |= InputEvent.ALT_GRAPH_MASK;\n+    if ((mod & InputEvent.BUTTON1_DOWN_MASK) != 0)\n+      mod |= InputEvent.BUTTON1_MASK;\n+    return mod & OLD_MASK;\n+  }\n+} // class EventModifier"}, {"sha": "4d3fbecacd7d38445ddf93fa6d052ff8e0832d56", "filename": "libjava/gnu/java/awt/image/ImageDecoder.java", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084ef9cf092e6c550e37a9a3daa29d25c0567f52/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FImageDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084ef9cf092e6c550e37a9a3daa29d25c0567f52/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FImageDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FImageDecoder.java?ref=084ef9cf092e6c550e37a9a3daa29d25c0567f52", "patch": "@@ -0,0 +1,113 @@\n+/* ImageDecoder.java\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.awt.image;\n+\n+import java.awt.*;\n+import java.awt.image.*;\n+import java.util.*;\n+import java.io.*;\n+import java.net.URL;\n+\n+public abstract class ImageDecoder implements ImageProducer \n+{\n+  Vector consumers = new Vector ();\n+  String filename;\n+  URL url;\n+\n+  public static ColorModel cm;\n+\n+  static\n+  {\n+    // FIXME: there was some broken code here that looked like\n+    // it wanted to rely on this property.  I don't have any idea\n+    // what it was intended to do.\n+    // String endian = System.getProperties ().getProperty (\"gnu.cpu.endian\");\n+  }\n+\n+  public ImageDecoder (String filename)\n+  {\n+    this.filename = filename;\n+  }\n+\n+  public ImageDecoder (URL url)\n+  {\n+    this.url = url;\n+  }\n+\n+  public void addConsumer (ImageConsumer ic) \n+  {\n+    consumers.addElement (ic);\n+  }\n+\n+  public boolean isConsumer (ImageConsumer ic)\n+  {\n+    return consumers.contains (ic);\n+  }\n+  \n+  public void removeConsumer (ImageConsumer ic)\n+  {\n+    consumers.removeElement (ic);\n+  }\n+\n+  public void startProduction (ImageConsumer ic)\n+  {\n+    addConsumer (ic);\n+    Vector list = (Vector) consumers.clone ();\n+    try \n+      {\n+\tFileInputStream is = (url == null) ? new FileInputStream (filename) :\n+\t                                  (FileInputStream) url.openStream();\n+\t\t\t\t\t\t  \n+\tproduce (list, is);\n+      } \n+    catch (Exception e)\n+      {\n+\tfor (int i = 0; i < list.size (); i++)\n+\t  {\n+\t    ImageConsumer ic2 = (ImageConsumer) list.elementAt (i);\n+\t    ic2.imageComplete (ImageConsumer.IMAGEERROR);\n+\t  }\n+      }\n+  }\n+\n+  public void requestTopDownLeftRightResend (ImageConsumer ic) \n+  { \n+  }\n+\n+  abstract void produce (Vector v, FileInputStream is) throws IOException;\n+}"}, {"sha": "2505b3d1ba92360e71f4b41146a6155c5c46804f", "filename": "libjava/gnu/java/awt/image/XBMDecoder.java", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084ef9cf092e6c550e37a9a3daa29d25c0567f52/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FXBMDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084ef9cf092e6c550e37a9a3daa29d25c0567f52/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FXBMDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FXBMDecoder.java?ref=084ef9cf092e6c550e37a9a3daa29d25c0567f52", "patch": "@@ -0,0 +1,149 @@\n+/* XBMDecoder -- Decodes X-bitmaps\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.awt.image;\n+\n+import java.awt.*;\n+import java.awt.image.*;\n+import java.util.*;\n+import java.io.*;\n+import java.net.URL;\n+\n+public class XBMDecoder extends ImageDecoder\n+{\n+  BufferedReader reader;\n+  static final ColorModel cm = ColorModel.getRGBdefault ();\n+  static final int black = 0xff000000;\n+  static final int transparent = 0x00000000;\n+  static final int masktable[] = { 0x01, 0x02, 0x04, 0x08, \n+\t\t\t\t   0x10, 0x20, 0x40, 0x80 };\n+\n+  public XBMDecoder (String filename)\n+  {\n+    super (filename);\n+  }\n+\n+  public XBMDecoder (URL url)\n+  {\n+    super (url);\n+  }\n+\n+  public void produce (Vector v, FileInputStream is) throws IOException\n+  {\n+    reader = new BufferedReader (new InputStreamReader (is));\n+    int width = -1, height = -1;\n+\n+    for (int i = 0; i < 2; i++)\n+      {\n+\tString line = reader.readLine ();\n+\tStringTokenizer st = new StringTokenizer (line);\n+\t\n+\tst.nextToken ();\t\t// #define\n+\tst.nextToken ();\t\t// name_[width|height]\n+\tif (i == 0)\n+\t  width = Integer.parseInt (st.nextToken (), 10);\n+\telse\n+\t  height = Integer.parseInt (st.nextToken (), 10);\n+      }\n+\n+    for (int i = 0; i < v.size (); i++)\n+      {\n+\tImageConsumer ic = (ImageConsumer) v.elementAt (i);\n+\n+\tic.setDimensions (width, height);\n+\tic.setColorModel (cm);\n+\tic.setHints (ImageConsumer.COMPLETESCANLINES\n+\t\t     | ImageConsumer.SINGLEFRAME\n+\t\t     | ImageConsumer.SINGLEPASS\n+\t\t     | ImageConsumer.TOPDOWNLEFTRIGHT);\n+      }\n+\n+    /* skip to the byte array */\n+    while (reader.read () != '{') { }\n+\n+    /* loop through each scanline */\n+    for (int line = 0; line < height; line++)\n+      {\n+\tint scanline[] = getScanline (reader, width);\n+\n+\tfor (int i = 0; i < v.size (); i++)\n+\t  {\n+\t    ImageConsumer ic = (ImageConsumer) v.elementAt (i);\n+\t    ic.setPixels (0, 0 + line, width, 1, cm, scanline, 0, width);\n+\t  }\n+      }\n+\n+    /* tell each ImageConsumer that we're finished */\n+    for (int i = 0; i < v.size (); i++)\n+      {\n+\tImageConsumer ic = (ImageConsumer) v.elementAt (i);\n+\tic.imageComplete (ImageConsumer.STATICIMAGEDONE);\n+      }\n+  }    \n+\n+  static public int[] getScanline (Reader in, int len) throws IOException\n+  {\n+    char byteStr[] = new char[2];\n+    int scanline[] = new int[len];\n+    int x = 0;\n+\n+    while (x < len)\n+      {\n+\tint ch = in.read ();\n+\tif (ch == '0')\n+\t  {\n+\t    in.read ();\t\t// 'x'\n+\t    \n+\t    byteStr[0] = (char) in.read ();\n+\t    byteStr[1] = (char) in.read ();\n+\n+\t    int byteVal = Integer.parseInt (new String (byteStr), 16);\n+\n+\t    for (int i = 0; i < 8; i++, x++)\n+\t      {\n+\t\tif (x == len)\t// condition occurs if bitmap is padded\n+\t\t  return scanline;\n+\n+\t\tscanline[x] = ((byteVal & masktable[i]) != 0) ? \n+\t\t               black : transparent;\n+\t      }\n+\t  }\t\n+      }\n+\n+    return scanline;\n+  }\n+}"}]}