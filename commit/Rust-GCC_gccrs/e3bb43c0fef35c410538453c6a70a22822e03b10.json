{"sha": "e3bb43c0fef35c410538453c6a70a22822e03b10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiYjQzYzBmZWYzNWM0MTA1Mzg0NTNjNmE3MGEyMjgyMmUwM2IxMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-02-09T21:56:35Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-02-09T21:56:35Z"}, "message": "fold-const.c (fold_strip_sign_ops): New function to simplify a floating point expression ignoring the sign of the...\n\n\n\t* fold-const.c (fold_strip_sign_ops): New function to simplify a\n\tfloating point expression ignoring the sign of the result.\n\t(fold) <ABS_EXPR>: Use it to simplify fabs(x).\n\t(fold) <MULT_EXPR>: Use it to simplify x*x.\n\t* tree.h (fold_strip_sign_ops): Prototype here.\n\t* builtins.c (fold_builtin_copysign): Take an additional FNDECL\n\targument.  Use fold_strip_sign_ops to simplify the first argument.\n\t(fold_builtin_pow):  Use fold_strip_sign_ops to simplify the\n\tfirst argument when the second argument is an even integer\n\tconstant, but only with -funsafe_math_optimizations.\n\t(fold_builtin_1): Update call to fold_builtin_copysign.\n\n\t* gcc.dg/builtins-48.c: New test case.\n\t* gcc.dg/builtins-49.c: New test case.\n\t* gcc.dg/builtins-50.c: New test case.\n\t* gcc.dg/builtins-51.c: New test case.\n\nFrom-SVN: r94779", "tree": {"sha": "b165cf0028ec1a832fc59f34df44d639c9c318a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b165cf0028ec1a832fc59f34df44d639c9c318a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3bb43c0fef35c410538453c6a70a22822e03b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3bb43c0fef35c410538453c6a70a22822e03b10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3bb43c0fef35c410538453c6a70a22822e03b10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3bb43c0fef35c410538453c6a70a22822e03b10/comments", "author": null, "committer": null, "parents": [{"sha": "08c2481a791a11ac8aee6652c6fb8c57faf4d584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c2481a791a11ac8aee6652c6fb8c57faf4d584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c2481a791a11ac8aee6652c6fb8c57faf4d584"}], "stats": {"total": 805, "additions": 789, "deletions": 16}, "files": [{"sha": "f9d60dfd78dfebd3457f496c415076d26247ffc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3bb43c0fef35c410538453c6a70a22822e03b10", "patch": "@@ -1,3 +1,17 @@\n+2005-02-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_strip_sign_ops): New function to simplify a\n+\tfloating point expression ignoring the sign of the result.\n+\t(fold) <ABS_EXPR>: Use it to simplify fabs(x).\n+\t(fold) <MULT_EXPR>: Use it to simplify x*x.\n+\t* tree.h (fold_strip_sign_ops): Prototype here.\n+\t* builtins.c (fold_builtin_copysign): Take an additional FNDECL\n+\targument.  Use fold_strip_sign_ops to simplify the first argument.\n+\t(fold_builtin_pow):  Use fold_strip_sign_ops to simplify the\n+\tfirst argument when the second argument is an even integer\n+\tconstant, but only with -funsafe_math_optimizations.\n+\t(fold_builtin_1): Update call to fold_builtin_copysign.\n+\n 2005-02-09  Ian Lance Taylor  <ian@airs.com>\n \n \tPR middle-end/19583\n@@ -9,7 +23,6 @@\n \t* gcc/haifa-sched.c (schedule_block): Make queued sched group\n \tinsns return to ready list in the next turn.\n \n-\n 2005-02-09  Richard Guenther  <rguenth@gcc.gnu.org>\n \n \tPR middle-end/19402"}, {"sha": "56e7eb00e398b74430871d6f9a356a0876222348", "filename": "gcc/builtins.c", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e3bb43c0fef35c410538453c6a70a22822e03b10", "patch": "@@ -169,7 +169,7 @@ static tree fold_builtin_memcmp (tree);\n static tree fold_builtin_strcmp (tree);\n static tree fold_builtin_strncmp (tree);\n static tree fold_builtin_signbit (tree);\n-static tree fold_builtin_copysign (tree, tree);\n+static tree fold_builtin_copysign (tree, tree, tree);\n static tree fold_builtin_isascii (tree);\n static tree fold_builtin_toascii (tree);\n static tree fold_builtin_isdigit (tree);\n@@ -6844,7 +6844,10 @@ fold_builtin_pow (tree fndecl, tree arglist, tree type)\n   if (TREE_CODE (arg1) == REAL_CST\n       && ! TREE_CONSTANT_OVERFLOW (arg1))\n     {\n+      REAL_VALUE_TYPE cint;\n       REAL_VALUE_TYPE c;\n+      HOST_WIDE_INT n;\n+\n       c = TREE_REAL_CST (arg1);\n \n       /* Optimize pow(x,0.0) = 1.0.  */\n@@ -6874,17 +6877,14 @@ fold_builtin_pow (tree fndecl, tree arglist, tree type)\n \t    }\n \t}\n \n-      /* Attempt to evaluate pow at compile-time.  */\n-      if (TREE_CODE (arg0) == REAL_CST\n-\t  && ! TREE_CONSTANT_OVERFLOW (arg0))\n+      /* Check for an integer exponent.  */\n+      n = real_to_integer (&c);\n+      real_from_integer (&cint, VOIDmode, n, n < 0 ? -1 : 0, 0);\n+      if (real_identical (&c, &cint))\n \t{\n-\t  REAL_VALUE_TYPE cint;\n-\t  HOST_WIDE_INT n;\n-\n-\t  n = real_to_integer (&c);\n-\t  real_from_integer (&cint, VOIDmode, n,\n-\t\t\t     n < 0 ? -1 : 0, 0);\n-\t  if (real_identical (&c, &cint))\n+\t  /* Attempt to evaluate pow at compile-time.  */\n+\t  if (TREE_CODE (arg0) == REAL_CST\n+\t      && ! TREE_CONSTANT_OVERFLOW (arg0))\n \t    {\n \t      REAL_VALUE_TYPE x;\n \t      bool inexact;\n@@ -6894,6 +6894,18 @@ fold_builtin_pow (tree fndecl, tree arglist, tree type)\n \t      if (flag_unsafe_math_optimizations || !inexact)\n \t\treturn build_real (type, x);\n \t    }\n+\n+\t  /* Strip sign ops from even integer powers.  */\n+\t  if ((n & 1) == 0 && flag_unsafe_math_optimizations)\n+\t    {\n+\t      tree narg0 = fold_strip_sign_ops (arg0);\n+\t      if (narg0)\n+\t\t{\n+\t\t  arglist = build_tree_list (NULL_TREE, arg1);\n+\t\t  arglist = tree_cons (NULL_TREE, narg0, arglist);\n+\t\t  return build_function_call_expr (fndecl, arglist);\n+\t\t}\n+\t    }\n \t}\n     }\n \n@@ -7447,9 +7459,9 @@ fold_builtin_signbit (tree exp)\n    Return NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_copysign (tree arglist, tree type)\n+fold_builtin_copysign (tree fndecl, tree arglist, tree type)\n {\n-  tree arg1, arg2;\n+  tree arg1, arg2, tem;\n \n   if (!validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n     return NULL_TREE;\n@@ -7483,6 +7495,14 @@ fold_builtin_copysign (tree arglist, tree type)\n \t\t\t     fold (build1 (ABS_EXPR, type, arg1)),\n \t\t\t     arg2);\n \n+  /* Strip sign changing operations for the first argument.  */\n+  tem = fold_strip_sign_ops (arg1);\n+  if (tem)\n+    {\n+      arglist = tree_cons (NULL_TREE, tem, TREE_CHAIN (arglist));\n+      return build_function_call_expr (fndecl, arglist);\n+    }\n+\n   return NULL_TREE;\n }\n \n@@ -8056,7 +8076,7 @@ fold_builtin_1 (tree exp, bool ignore)\n     case BUILT_IN_COPYSIGN:\n     case BUILT_IN_COPYSIGNF:\n     case BUILT_IN_COPYSIGNL:\n-      return fold_builtin_copysign (arglist, type);\n+      return fold_builtin_copysign (fndecl, arglist, type);\n \n     case BUILT_IN_FINITE:\n     case BUILT_IN_FINITEF:"}, {"sha": "de54258c2a476c10f656dc0919c421d3dfcc823a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e3bb43c0fef35c410538453c6a70a22822e03b10", "patch": "@@ -6776,6 +6776,14 @@ fold (tree expr)\n \t}\n       else if (tree_expr_nonnegative_p (arg0))\n \treturn arg0;\n+\n+      /* Strip sign ops from argument.  */\n+      if (TREE_CODE (type) == REAL_TYPE)\n+\t{\n+\t  tem = fold_strip_sign_ops (arg0);\n+\t  if (tem)\n+\t    return fold (build1 (ABS_EXPR, type, fold_convert (type, tem)));\n+\t}\n       return t;\n \n     case CONJ_EXPR:\n@@ -7429,6 +7437,17 @@ fold (tree expr)\n \t\t\t\t     TREE_OPERAND (arg0, 1)));\n \t    }\n \n+          /* Strip sign operations from X in X*X, i.e. -Y*-Y -> Y*Y.  */\n+\t  if (operand_equal_p (arg0, arg1, 0))\n+\t    {\n+\t      tree tem = fold_strip_sign_ops (arg0);\n+\t      if (tem != NULL_TREE)\n+\t\t{\n+\t\t  tem = fold_convert (type, tem);\n+\t\t  return fold (build2 (MULT_EXPR, type, tem, tem));\n+\t\t}\n+\t    }\n+\n \t  if (flag_unsafe_math_optimizations)\n \t    {\n \t      enum built_in_function fcode0 = builtin_mathfn_code (arg0);\n@@ -11229,3 +11248,38 @@ ptr_difference_const (tree e1, tree e2, HOST_WIDE_INT *diff)\n   *diff += (bitpos1 - bitpos2) / BITS_PER_UNIT;\n   return true;\n }\n+\n+/* Simplify the floating point expression EXP when the sign of the\n+   result is not significant.  Return NULL_TREE if no simplification\n+   is possible.  */\n+\n+tree\n+fold_strip_sign_ops (tree exp)\n+{\n+  tree arg0, arg1;\n+\n+  switch (TREE_CODE (exp))\n+    {\n+    case ABS_EXPR:\n+    case NEGATE_EXPR:\n+      arg0 = fold_strip_sign_ops (TREE_OPERAND (exp, 0));\n+      return arg0 ? arg0 : TREE_OPERAND (exp, 0);\n+\n+    case MULT_EXPR:\n+    case RDIV_EXPR:\n+      if (HONOR_SIGN_DEPENDENT_ROUNDING (TYPE_MODE (TREE_TYPE (exp))))\n+\treturn NULL_TREE;\n+      arg0 = fold_strip_sign_ops (TREE_OPERAND (exp, 0));\n+      arg1 = fold_strip_sign_ops (TREE_OPERAND (exp, 1));\n+      if (arg0 != NULL_TREE || arg1 != NULL_TREE)\n+\treturn fold (build2 (TREE_CODE (exp), TREE_TYPE (exp),\n+\t\t\t     arg0 ? arg0 : TREE_OPERAND (exp, 0),\n+\t\t\t     arg1 ? arg1 : TREE_OPERAND (exp, 1)));\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return NULL_TREE;\n+}\n+"}, {"sha": "17a555818a3d5d4860eccdea9dbba22a6b2550b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3bb43c0fef35c410538453c6a70a22822e03b10", "patch": "@@ -1,3 +1,10 @@\n+2005-02-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-48.c: New test case.\n+\t* gcc.dg/builtins-49.c: New test case.\n+\t* gcc.dg/builtins-50.c: New test case.\n+\t* gcc.dg/builtins-51.c: New test case.\n+\n 2005-02-09  Ian Lance Taylor  <ian@airs.com>\n \n \tPR middle-end/19583"}, {"sha": "43710b868b4954bf2377f8c399718e0e8c3b69be", "filename": "gcc/testsuite/gcc.dg/builtins-48.c", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-48.c?ref=e3bb43c0fef35c410538453c6a70a22822e03b10", "patch": "@@ -0,0 +1,181 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern double fabs(double);\n+extern float fabsf(float);\n+extern void abort(void);\n+\n+\n+double test1(double x)\n+{\n+  return (-x)*(-x);\n+}\n+\n+float test1f(float x)\n+{\n+  return (-x)*(-x);\n+}\n+\n+double test2(double x)\n+{\n+  return fabs(x)*fabs(x);\n+}\n+\n+float test2f(float x)\n+{\n+  return fabsf(x)*fabsf(x);\n+}\n+\n+double test3(double x, double y)\n+{\n+  return (x*-y)*(x*-y);\n+}\n+\n+float test3f(float x, float y)\n+{\n+  return (x*-y)*(x*-y);\n+}\n+\n+double test4(double x, double y)\n+{\n+  return (x/-y)*(x/-y);\n+}\n+\n+float test4f(float x, float y)\n+{\n+  return (x/-y)*(x/-y);\n+}\n+\n+int main()\n+{\n+  if (test1(1.0) != 1.0)\n+    abort();\n+  if (test1(2.0) != 4.0)\n+    abort();\n+  if (test1(0.0) != 0.0)\n+    abort();\n+  if (test1(-1.0) != 1.0)\n+    abort();\n+  if (test1(-2.0) != 4.0)\n+    abort();\n+\n+  if (test1f(1.0f) != 1.0f)\n+    abort();\n+  if (test1f(2.0f) != 4.0f)\n+    abort();\n+  if (test1f(0.0f) != 0.0f)\n+    abort();\n+  if (test1f(-1.0f) != 1.0f)\n+    abort();\n+  if (test1f(-2.0f) != 4.0f)\n+    abort();\n+\n+  if (test2(1.0) != 1.0)\n+    abort();\n+  if (test2(2.0) != 4.0)\n+    abort();\n+  if (test2(0.0) != 0.0)\n+    abort();\n+  if (test2(-1.0) != 1.0)\n+    abort();\n+  if (test2(-2.0) != 4.0)\n+    abort();\n+\n+  if (test2f(1.0f) != 1.0f)\n+    abort();\n+  if (test2f(2.0f) != 4.0f)\n+    abort();\n+  if (test2f(0.0f) != 0.0f)\n+    abort();\n+  if (test2f(-1.0f) != 1.0f)\n+    abort();\n+  if (test2f(-2.0f) != 4.0f)\n+    abort();\n+\n+  if (test3(1.0,1.0) != 1.0)\n+    abort();\n+  if (test3(1.0,-1.0) != 1.0)\n+    abort();\n+  if (test3(1.0,2.0) != 4.0)\n+    abort();\n+  if (test3(1.0,-2.0) != 4.0)\n+    abort();\n+  if (test3(2.0,1.0) != 4.0)\n+    abort();\n+  if (test3(2.0,-1.0) != 4.0)\n+    abort();\n+  if (test3(2.0,2.0) != 16.0)\n+    abort();\n+  if (test3(2.0,-2.0) != 16.0)\n+    abort();\n+  if (test3(-2.0,1.0) != 4.0)\n+    abort();\n+  if (test3(-2.0,-1.0) != 4.0)\n+    abort();\n+  if (test3(-2.0,2.0) != 16.0)\n+    abort();\n+  if (test3(-2.0,-2.0) != 16.0)\n+    abort();\n+\n+  if (test3f(1.0f,1.0f) != 1.0f)\n+    abort();\n+  if (test3f(1.0f,-1.0f) != 1.0f)\n+    abort();\n+  if (test3f(1.0f,2.0f) != 4.0f)\n+    abort();\n+  if (test3f(1.0f,-2.0f) != 4.0f)\n+    abort();\n+  if (test3f(2.0f,1.0f) != 4.0f)\n+    abort();\n+  if (test3f(2.0f,-1.0f) != 4.0f)\n+    abort();\n+  if (test3f(2.0f,2.0f) != 16.0f)\n+    abort();\n+  if (test3f(2.0f,-2.0f) != 16.0f)\n+    abort();\n+  if (test3f(-2.0f,1.0f) != 4.0f)\n+    abort();\n+  if (test3f(-2.0f,-1.0f) != 4.0f)\n+    abort();\n+  if (test3f(-2.0f,2.0f) != 16.0f)\n+    abort();\n+  if (test3f(-2.0f,-2.0f) != 16.0f)\n+    abort();\n+\n+  if (test4(1.0,1.0) != 1.0)\n+    abort();\n+  if (test4(1.0,-1.0) != 1.0)\n+    abort();\n+  if (test4(-1.0,1.0) != 1.0)\n+    abort();\n+  if (test4(-1.0,-1.0) != 1.0)\n+    abort();\n+  if (test4(6.0,3.0) != 4.0)\n+    abort();\n+  if (test4(6.0,-3.0) != 4.0)\n+    abort();\n+  if (test4(-6.0,3.0) != 4.0)\n+    abort();\n+  if (test4(-6.0,-3.0) != 4.0)\n+    abort();\n+\n+  if (test4f(1.0f,1.0f) != 1.0f)\n+    abort();\n+  if (test4f(1.0f,-1.0f) != 1.0f)\n+    abort();\n+  if (test4f(-1.0f,1.0f) != 1.0f)\n+    abort();\n+  if (test4f(-1.0f,-1.0f) != 1.0f)\n+    abort();\n+  if (test4f(6.0f,3.0f) != 4.0f)\n+    abort();\n+  if (test4f(6.0f,-3.0f) != 4.0f)\n+    abort();\n+  if (test4f(-6.0f,3.0f) != 4.0f)\n+    abort();\n+  if (test4f(-6.0f,-3.0f) != 4.0f)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "fdeaad467fe3d49754eb363e543c6ab815829114", "filename": "gcc/testsuite/gcc.dg/builtins-49.c", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-49.c?ref=e3bb43c0fef35c410538453c6a70a22822e03b10", "patch": "@@ -0,0 +1,181 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern double fabs(double);\n+extern float fabsf(float);\n+extern void abort(void);\n+\n+\n+double test1(double x)\n+{\n+  return fabs(-x);\n+}\n+\n+float test1f(float x)\n+{\n+  return fabsf(-x);\n+}\n+\n+double test2(double x)\n+{\n+  return fabs(fabs(x));\n+}\n+\n+float test2f(float x)\n+{\n+  return fabsf(fabsf(x));\n+}\n+\n+double test3(double x, double y)\n+{\n+  return fabs(x*-y);\n+}\n+\n+float test3f(float x, float y)\n+{\n+  return fabsf(x*-y);\n+}\n+\n+double test4(double x, double y)\n+{\n+  return fabs(x/-y);\n+}\n+\n+float test4f(float x, float y)\n+{\n+  return fabsf(x/-y);\n+}\n+\n+int main()\n+{\n+  if (test1(1.0) != 1.0)\n+    abort();\n+  if (test1(2.0) != 2.0)\n+    abort();\n+  if (test1(0.0) != 0.0)\n+    abort();\n+  if (test1(-1.0) != 1.0)\n+    abort();\n+  if (test1(-2.0) != 2.0)\n+    abort();\n+\n+  if (test1f(1.0f) != 1.0f)\n+    abort();\n+  if (test1f(2.0f) != 2.0f)\n+    abort();\n+  if (test1f(0.0f) != 0.0f)\n+    abort();\n+  if (test1f(-1.0f) != 1.0f)\n+    abort();\n+  if (test1f(-2.0f) != 2.0f)\n+    abort();\n+\n+  if (test2(1.0) != 1.0)\n+    abort();\n+  if (test2(2.0) != 2.0)\n+    abort();\n+  if (test2(0.0) != 0.0)\n+    abort();\n+  if (test2(-1.0) != 1.0)\n+    abort();\n+  if (test2(-2.0) != 2.0)\n+    abort();\n+\n+  if (test2f(1.0f) != 1.0f)\n+    abort();\n+  if (test2f(2.0f) != 2.0f)\n+    abort();\n+  if (test2f(0.0f) != 0.0f)\n+    abort();\n+  if (test2f(-1.0f) != 1.0f)\n+    abort();\n+  if (test2f(-2.0f) != 2.0f)\n+    abort();\n+\n+  if (test3(1.0,1.0) != 1.0)\n+    abort();\n+  if (test3(1.0,-1.0) != 1.0)\n+    abort();\n+  if (test3(1.0,2.0) != 2.0)\n+    abort();\n+  if (test3(1.0,-2.0) != 2.0)\n+    abort();\n+  if (test3(2.0,1.0) != 2.0)\n+    abort();\n+  if (test3(2.0,-1.0) != 2.0)\n+    abort();\n+  if (test3(2.0,2.0) != 4.0)\n+    abort();\n+  if (test3(2.0,-2.0) != 4.0)\n+    abort();\n+  if (test3(-2.0,1.0) != 2.0)\n+    abort();\n+  if (test3(-2.0,-1.0) != 2.0)\n+    abort();\n+  if (test3(-2.0,2.0) != 4.0)\n+    abort();\n+  if (test3(-2.0,-2.0) != 4.0)\n+    abort();\n+\n+  if (test3f(1.0f,1.0f) != 1.0f)\n+    abort();\n+  if (test3f(1.0f,-1.0f) != 1.0f)\n+    abort();\n+  if (test3f(1.0f,2.0f) != 2.0f)\n+    abort();\n+  if (test3f(1.0f,-2.0f) != 2.0f)\n+    abort();\n+  if (test3f(2.0f,1.0f) != 2.0f)\n+    abort();\n+  if (test3f(2.0f,-1.0f) != 2.0f)\n+    abort();\n+  if (test3f(2.0f,2.0f) != 4.0f)\n+    abort();\n+  if (test3f(2.0f,-2.0f) != 4.0f)\n+    abort();\n+  if (test3f(-2.0f,1.0f) != 2.0f)\n+    abort();\n+  if (test3f(-2.0f,-1.0f) != 2.0f)\n+    abort();\n+  if (test3f(-2.0f,2.0f) != 4.0f)\n+    abort();\n+  if (test3f(-2.0f,-2.0f) != 4.0f)\n+    abort();\n+\n+  if (test4(1.0,1.0) != 1.0)\n+    abort();\n+  if (test4(1.0,-1.0) != 1.0)\n+    abort();\n+  if (test4(-1.0,1.0) != 1.0)\n+    abort();\n+  if (test4(-1.0,-1.0) != 1.0)\n+    abort();\n+  if (test4(6.0,3.0) != 2.0)\n+    abort();\n+  if (test4(6.0,-3.0) != 2.0)\n+    abort();\n+  if (test4(-6.0,3.0) != 2.0)\n+    abort();\n+  if (test4(-6.0,-3.0) != 2.0)\n+    abort();\n+\n+  if (test4f(1.0f,1.0f) != 1.0f)\n+    abort();\n+  if (test4f(1.0f,-1.0f) != 1.0f)\n+    abort();\n+  if (test4f(-1.0f,1.0f) != 1.0f)\n+    abort();\n+  if (test4f(-1.0f,-1.0f) != 1.0f)\n+    abort();\n+  if (test4f(6.0f,3.0f) != 2.0f)\n+    abort();\n+  if (test4f(6.0f,-3.0f) != 2.0f)\n+    abort();\n+  if (test4f(-6.0f,3.0f) != 2.0f)\n+    abort();\n+  if (test4f(-6.0f,-3.0f) != 2.0f)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "2d32d1ed960af63169766532cd9b5fc99a340f84", "filename": "gcc/testsuite/gcc.dg/builtins-50.c", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-50.c?ref=e3bb43c0fef35c410538453c6a70a22822e03b10", "patch": "@@ -0,0 +1,159 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern double copysign(double,double);\n+extern float copysignf(float,float);\n+extern double fabs(double);\n+extern float fabsf(float);\n+extern void abort(void);\n+\n+\n+double test1(double x, double y)\n+{\n+  return copysign(-x,y);\n+}\n+\n+float test1f(float x, float y)\n+{\n+  return copysignf(-x,y);\n+}\n+\n+double test2(double x, double y)\n+{\n+  return copysign(fabs(x),y);\n+}\n+\n+float test2f(float x, float y)\n+{\n+  return copysignf(fabsf(x),y);\n+}\n+\n+double test3(double x, double y, double z)\n+{\n+  return copysign(x*-y,z);\n+}\n+\n+float test3f(float x, float y, float z)\n+{\n+  return copysignf(x*-y,z);\n+}\n+\n+double test4(double x, double y, double z)\n+{\n+  return copysign(x/-y,z);\n+}\n+\n+float test4f(float x, float y, float z)\n+{\n+  return copysignf(x/-y,z);\n+}\n+\n+int main()\n+{\n+  if (test1(3.0,2.0) != 3.0)\n+    abort();\n+  if (test1(3.0,-2.0) != -3.0)\n+    abort();\n+  if (test1(-3.0,2.0) != 3.0)\n+    abort();\n+  if (test1(-3.0,-2.0) != -3.0)\n+    abort();\n+\n+  if (test1f(3.0f,2.0f) != 3.0f)\n+    abort();\n+  if (test1f(3.0f,-2.0f) != -3.0f)\n+    abort();\n+  if (test1f(-3.0f,2.0f) != 3.0f)\n+    abort();\n+  if (test1f(-3.0f,-2.0f) != -3.0f)\n+    abort();\n+\n+  if (test2(3.0,2.0) != 3.0)\n+    abort();\n+  if (test2(3.0,-2.0) != -3.0)\n+    abort();\n+  if (test2(-3.0,2.0) != 3.0)\n+    abort();\n+  if (test2(-3.0,-2.0) != -3.0)\n+    abort();\n+\n+  if (test2f(3.0f,2.0f) != 3.0f)\n+    abort();\n+  if (test2f(3.0f,-2.0f) != -3.0f)\n+    abort();\n+  if (test2f(-3.0f,2.0f) != 3.0f)\n+    abort();\n+  if (test2f(-3.0f,-2.0f) != -3.0f)\n+    abort();\n+\n+  if (test3(2.0,3.0,4.0) != 6.0)\n+    abort();\n+  if (test3(2.0,3.0,-4.0) != -6.0)\n+    abort();\n+  if (test3(2.0,-3.0,4.0) != 6.0)\n+    abort();\n+  if (test3(2.0,-3.0,-4.0) != -6.0)\n+    abort();\n+  if (test3(-2.0,3.0,4.0) != 6.0)\n+    abort();\n+  if (test3(-2.0,3.0,-4.0) != -6.0)\n+    abort();\n+  if (test3(-2.0,-3.0,4.0) != 6.0)\n+    abort();\n+  if (test3(-2.0,-3.0,-4.0) != -6.0)\n+    abort();\n+\n+  if (test3f(2.0f,3.0f,4.0f) != 6.0f)\n+    abort();\n+  if (test3f(2.0f,3.0f,-4.0f) != -6.0f)\n+    abort();\n+  if (test3f(2.0f,-3.0f,4.0f) != 6.0f)\n+    abort();\n+  if (test3f(2.0f,-3.0f,-4.0f) != -6.0f)\n+    abort();\n+  if (test3f(-2.0f,3.0f,4.0f) != 6.0f)\n+    abort();\n+  if (test3f(-2.0f,3.0f,-4.0f) != -6.0f)\n+    abort();\n+  if (test3f(-2.0f,-3.0f,4.0f) != 6.0f)\n+    abort();\n+  if (test3f(-2.0f,-3.0f,-4.0f) != -6.0f)\n+    abort();\n+\n+  if (test4(8.0,2.0,3.0) != 4.0)\n+    abort();\n+  if (test4(8.0,2.0,-3.0) != -4.0)\n+    abort();\n+  if (test4(8.0,-2.0,3.0) != 4.0)\n+    abort();\n+  if (test4(8.0,-2.0,-3.0) != -4.0)\n+    abort();\n+  if (test4(-8.0,2.0,3.0) != 4.0)\n+    abort();\n+  if (test4(-8.0,2.0,-3.0) != -4.0)\n+    abort();\n+  if (test4(-8.0,-2.0,3.0) != 4.0)\n+    abort();\n+  if (test4(-8.0,-2.0,-3.0) != -4.0)\n+    abort();\n+\n+  if (test4f(8.0f,2.0f,3.0f) != 4.0f)\n+    abort();\n+  if (test4f(8.0f,2.0f,-3.0f) != -4.0f)\n+    abort();\n+  if (test4f(8.0f,-2.0f,3.0f) != 4.0f)\n+    abort();\n+  if (test4f(8.0f,-2.0f,-3.0f) != -4.0f)\n+    abort();\n+  if (test4f(-8.0f,2.0f,3.0f) != 4.0f)\n+    abort();\n+  if (test4f(-8.0f,2.0f,-3.0f) != -4.0f)\n+    abort();\n+  if (test4f(-8.0f,-2.0f,3.0f) != 4.0f)\n+    abort();\n+  if (test4f(-8.0f,-2.0f,-3.0f) != -4.0f)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "fdfc9bec7f9dd60de4f8abf45e59ac57c4789f7e", "filename": "gcc/testsuite/gcc.dg/builtins-51.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-51.c?ref=e3bb43c0fef35c410538453c6a70a22822e03b10", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double pow(double, double);\n+extern double fabs(double);\n+extern void abort(void);\n+\n+double test2_1(double x)\n+{\n+  return pow(x,2.0);\n+}\n+\n+double test2_2(double x)\n+{\n+  return pow(-x,2.0);\n+}\n+\n+double test2_3(double x)\n+{\n+  return pow(fabs(x),2.0);\n+}\n+\n+double test3_1(double x)\n+{\n+  return pow(x,3.0);\n+}\n+\n+double test3_2(double x)\n+{\n+  return pow(-x,3.0);\n+}\n+\n+double test3_3(double x)\n+{\n+  return pow(fabs(x),3.0);\n+}\n+\n+double test6_1(double x)\n+{\n+  return pow(x,6.0);\n+}\n+\n+double test6_2(double x)\n+{\n+  return pow(-x,6.0);\n+}\n+\n+double test6_3(double x)\n+{\n+  return pow(fabs(x),6.0);\n+}\n+\n+\n+int main()\n+{\n+  if (test2_1(1.0) != 1.0)\n+    abort();\n+  if (test2_1(2.0) != 4.0)\n+    abort();\n+  if (test2_1(0.0) != 0.0)\n+    abort();\n+  if (test2_1(-1.0) != 1.0)\n+    abort();\n+  if (test2_1(-2.0) != 4.0)\n+    abort();\n+\n+  if (test2_2(1.0) != 1.0)\n+    abort();\n+  if (test2_2(2.0) != 4.0)\n+    abort();\n+  if (test2_2(0.0) != 0.0)\n+    abort();\n+  if (test2_2(-1.0) != 1.0)\n+    abort();\n+  if (test2_2(-2.0) != 4.0)\n+    abort();\n+\n+  if (test2_3(1.0) != 1.0)\n+    abort();\n+  if (test2_3(2.0) != 4.0)\n+    abort();\n+  if (test2_3(0.0) != 0.0)\n+    abort();\n+  if (test2_3(-1.0) != 1.0)\n+    abort();\n+  if (test2_3(2.0) != 4.0)\n+    abort();\n+\n+  if (test3_1(1.0) != 1.0)\n+    abort();\n+  if (test3_1(2.0) != 8.0)\n+    abort();\n+  if (test3_1(0.0) != 0.0)\n+    abort();\n+  if (test3_1(-1.0) != -1.0)\n+    abort();\n+  if (test3_1(-2.0) != -8.0)\n+    abort();\n+\n+  if (test3_2(1.0) != -1.0)\n+    abort();\n+  if (test3_2(2.0) != -8.0)\n+    abort();\n+  if (test3_2(0.0) != -0.0)\n+    abort();\n+  if (test3_2(-1.0) != 1.0)\n+    abort();\n+  if (test3_2(-2.0) != 8.0)\n+    abort();\n+\n+  if (test3_3(1.0) != 1.0)\n+    abort();\n+  if (test3_3(2.0) != 8.0)\n+    abort();\n+  if (test3_3(0.0) != 0.0)\n+    abort();\n+  if (test3_3(-1.0) != 1.0)\n+    abort();\n+  if (test3_3(-2.0) != 8.0)\n+    abort();\n+\n+  if (test6_1(1.0) != 1.0)\n+    abort();\n+  if (test6_1(2.0) != 64.0)\n+    abort();\n+  if (test6_1(0.0) != 0.0)\n+    abort();\n+  if (test6_1(-1.0) != 1.0)\n+    abort();\n+  if (test6_1(-2.0) != 64.0)\n+    abort();\n+\n+  if (test6_2(1.0) != 1.0)\n+    abort();\n+  if (test6_2(2.0) != 64.0)\n+    abort();\n+  if (test6_2(0.0) != 0.0)\n+    abort();\n+  if (test6_2(-1.0) != 1.0)\n+    abort();\n+  if (test6_2(-2.0) != 64.0)\n+    abort();\n+\n+  if (test6_3(1.0) != 1.0)\n+    abort();\n+  if (test6_3(2.0) != 64.0)\n+    abort();\n+  if (test6_3(0.0) != 0.0)\n+    abort();\n+  if (test6_3(-1.0) != 1.0)\n+    abort();\n+  if (test6_3(-2.0) != 64.0)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "e64fb99d78d141cc2a976340bc60d79ce1935feb", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bb43c0fef35c410538453c6a70a22822e03b10/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e3bb43c0fef35c410538453c6a70a22822e03b10", "patch": "@@ -3527,7 +3527,8 @@ extern tree fold_binary_to_constant (enum tree_code, tree, tree, tree);\n extern tree fold_read_from_constant_string (tree);\n extern tree int_const_binop (enum tree_code, tree, tree, int);\n extern tree build_fold_addr_expr (tree);\n-tree fold_build_cleanup_point_expr (tree type, tree expr);\n+extern tree fold_build_cleanup_point_expr (tree type, tree expr);\n+extern tree fold_strip_sign_ops (tree);\n extern tree build_fold_addr_expr_with_type (tree, tree);\n extern tree build_fold_indirect_ref (tree);\n extern tree constant_boolean_node (int, tree);"}]}