{"sha": "697a877279b0f9d3827929f08028aec6964a469e", "node_id": "C_kwDOANBUbNoAKDY5N2E4NzcyNzliMGY5ZDM4Mjc5MjlmMDgwMjhhZWM2OTY0YTQ2OWU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-07T06:30:51Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:58:42Z"}, "message": "RISC-V: Add vwmulsu C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vv_tumu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmulsu_vx_tumu-3.c: New test.", "tree": {"sha": "54a2d31fba74922605a9210001c20d2ae1fa1a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a2d31fba74922605a9210001c20d2ae1fa1a17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/697a877279b0f9d3827929f08028aec6964a469e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697a877279b0f9d3827929f08028aec6964a469e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697a877279b0f9d3827929f08028aec6964a469e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697a877279b0f9d3827929f08028aec6964a469e/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcbe69a096a1c1b2b2a06c2f740e32e9166e9b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcbe69a096a1c1b2b2a06c2f740e32e9166e9b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcbe69a096a1c1b2b2a06c2f740e32e9166e9b99"}], "stats": {"total": 3996, "additions": 3996, "deletions": 0}, "files": [{"sha": "4a9163945791a4c815de73b589c0bfa73ecc565f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4(vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2(vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1(vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2(vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4(vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8(vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2(vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1(vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2(vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4(vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8(vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1(vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2(vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4(vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8(vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "5c6538d067664b03fadf06d7599f4a9f68af5637", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4(vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2(vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1(vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2(vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4(vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8(vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2(vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1(vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2(vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4(vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8(vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1(vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2(vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4(vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8(vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "75e49ce8360b981b1797272ec2836af45d38d3d3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4(vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2(vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1(vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2(vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4(vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8(vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2(vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1(vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2(vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4(vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8(vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1(vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2(vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4(vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8(vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "f45cce2c651e2669fa65534337cfcd71266ad8d0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_m-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_m-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_m(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_m(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_m(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_m(vbool8_t mask,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_m(vbool4_t mask,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_m(vbool2_t mask,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_m(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_m(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_m(vbool16_t mask,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_m(vbool8_t mask,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_m(vbool4_t mask,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_m(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_m(vbool32_t mask,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_m(vbool16_t mask,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_m(vbool8_t mask,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "5f348b612cba2bf686aeabaffd555a2206c21bbe", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_m-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_m-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_m(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_m(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_m(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_m(vbool8_t mask,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_m(vbool4_t mask,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_m(vbool2_t mask,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_m(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_m(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_m(vbool16_t mask,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_m(vbool8_t mask,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_m(vbool4_t mask,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_m(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_m(vbool32_t mask,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_m(vbool16_t mask,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_m(vbool8_t mask,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_m(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "e0b165ab28249f231ecb1749fd035e5b11025aa5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_m-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_m-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_m(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_m(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_m(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_m(vbool8_t mask,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_m(vbool4_t mask,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_m(vbool2_t mask,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_m(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_m(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_m(vbool16_t mask,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_m(vbool8_t mask,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_m(vbool4_t mask,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_m(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_m(vbool32_t mask,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_m(vbool16_t mask,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_m(vbool8_t mask,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_m(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "59d23b205bf36c64fb1804225881b97f7b2c276f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_mu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_mu-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "aad9493607ad77903a98772d7be8c3316fd65683", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_mu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_mu-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "ec45ec448d915bfba2d7599dc28c60e9e8a99fcd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_mu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_mu-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "0b4ec5cb6defa3ef7c3ee5a3c86a31fab51c95d3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_tu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tu-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_tu(vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_tu(vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_tu(vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_tu(vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_tu(vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_tu(vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_tu(vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_tu(vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_tu(vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "80b9ed55a68ede6bb7bcdbf63afeac966265e997", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_tu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tu-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_tu(vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_tu(vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_tu(vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_tu(vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_tu(vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_tu(vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_tu(vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_tu(vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_tu(vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "3ddd5dea4f1e80cd84bc33e9063a249e185926cf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_tu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tu-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_tu(vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_tu(vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_tu(vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_tu(vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_tu(vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_tu(vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_tu(vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_tu(vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_tu(vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "ef9dc849dfeef6a926990be628d76d3b00870020", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_tum-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tum-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "f0ccf767a17275ca9007172ae68e157541640e1a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_tum-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tum-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "d086894d2a3817afbadba92b3f280fcab1711374", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_tum-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tum-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "8cb2ae1053614470d4904f84957b3f1234bd7f33", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_tumu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tumu-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "c38e336269e9ed4ab021d1538bb8c1b16ea70088", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_tumu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tumu-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "2f9eba45ff9b8bcb7057df1496aae47b4a762755", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vv_tumu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vv_tumu-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vv_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i16m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vv_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i32m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vv_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vv_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vv_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vv_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vv_i64m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "402fe08a288df06261996af36c4c23a5c66631ff", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4(vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2(vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1(vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2(vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4(vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8(vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2(vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1(vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2(vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4(vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8(vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1(vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2(vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4(vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8(vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "2d2263f7eb15ae6eb1cb6df2731828a2f96b88f8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4(vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2(vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1(vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2(vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4(vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8(vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2(vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1(vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2(vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4(vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8(vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1(vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2(vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4(vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8(vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "60a5aab41150bebd9cd7100d536be9066521ed72", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4(vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2(vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1(vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2(vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4(vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8(vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2(vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1(vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2(vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4(vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8(vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1(vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2(vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4(vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8(vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "7c8d8f8ebccc01f47dc6ef0e016888d27542fcac", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_m-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_m-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_m(vbool64_t mask,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_m(vbool32_t mask,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_m(vbool16_t mask,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_m(vbool8_t mask,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_m(vbool4_t mask,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_m(vbool2_t mask,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_m(vbool64_t mask,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_m(vbool32_t mask,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_m(vbool16_t mask,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_m(vbool8_t mask,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_m(vbool4_t mask,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_m(vbool64_t mask,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_m(vbool32_t mask,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_m(vbool16_t mask,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_m(vbool8_t mask,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "bd3471b8e722bdb33b97aa173c925e9debb1c516", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_m-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_m-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_m(vbool64_t mask,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_m(vbool32_t mask,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_m(vbool16_t mask,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_m(vbool8_t mask,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_m(vbool4_t mask,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_m(vbool2_t mask,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_m(vbool64_t mask,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_m(vbool32_t mask,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_m(vbool16_t mask,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_m(vbool8_t mask,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_m(vbool4_t mask,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_m(vbool64_t mask,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_m(vbool32_t mask,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_m(vbool16_t mask,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_m(vbool8_t mask,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_m(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "abe50f8bc4422d0acdf5bd2d6df043b61353c466", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_m-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_m-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_m(vbool64_t mask,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_m(vbool32_t mask,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_m(vbool16_t mask,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_m(vbool8_t mask,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_m(vbool4_t mask,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_m(vbool2_t mask,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_m(vbool64_t mask,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_m(vbool32_t mask,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_m(vbool16_t mask,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_m(vbool8_t mask,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_m(vbool4_t mask,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_m(vbool64_t mask,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_m(vbool32_t mask,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_m(vbool16_t mask,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_m(vbool8_t mask,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_m(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "ab4cec7b5470b4842a375c30906b8c3d37f8b7f0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_mu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_mu-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "154af4d74a844457122c3277355ab8edba00a4ea", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_mu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_mu-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "d5a020e040049c73afa2dec641c1d9cb339616ff", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_mu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_mu-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "42bd1e599b3738bb251dd9400f45ddcb2879dc97", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_tu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tu-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_tu(vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_tu(vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_tu(vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_tu(vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_tu(vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_tu(vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_tu(vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_tu(vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_tu(vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "f8b6ba9e4fb04c38c2d7cc423d8a0755f60d9aba", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_tu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tu-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_tu(vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_tu(vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_tu(vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_tu(vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_tu(vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_tu(vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_tu(vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_tu(vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_tu(vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "94f41032929d651260e824f213d06aca13e806a6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_tu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tu-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_tu(vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_tu(vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_tu(vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_tu(vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_tu(vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_tu(vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_tu(vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_tu(vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_tu(vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "eaf41cda05eb5096a119f7336da7be4c23c1d1f2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_tum-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tum-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "f94bee04645e820df2ee3ad7450f9538cbfc1a99", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_tum-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tum-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "996f7ec72541317f46110bfbce393d3460281923", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_tum-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tum-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "0e572f887f2fef5f0008a0656596017399e26a71", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_tumu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tumu-1.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "2cf0493929f73a2673c2326a3e570181be4d8b8f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_tumu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tumu-2.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "fff0ced764cf008ffd5baf551a7fd596f87b2acf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmulsu_vx_tumu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697a877279b0f9d3827929f08028aec6964a469e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmulsu_vx_tumu-3.c?ref=697a877279b0f9d3827929f08028aec6964a469e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmulsu_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmulsu_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmulsu_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmulsu_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmulsu_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmulsu_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i16m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmulsu_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmulsu_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmulsu_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmulsu_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmulsu_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i32m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmulsu_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmulsu_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmulsu_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmulsu_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwmulsu_vx_i64m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmulsu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}]}