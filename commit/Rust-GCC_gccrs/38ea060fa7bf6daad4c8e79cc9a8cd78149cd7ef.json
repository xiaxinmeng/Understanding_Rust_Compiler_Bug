{"sha": "38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlYTA2MGZhN2JmNmRhYWQ0YzhlNzljYzlhOGNkNzgxNDljZDdlZg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-08-16T07:09:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-16T07:09:42Z"}, "message": "loop.c (is_power_of_2, [...]): Delete unused functions and declarations.\n\n        * loop.c (is_power_of_2, is_conditional_branch): Delete unused\n        functions and declarations.\n        (analyze_loop_iterations): Use condjump_p.\n        (insert_bct): Likewise.  Use exact_log2.\nJust cleanup up some haifa code.\n\nFrom-SVN: r14818", "tree": {"sha": "8ee8f001956e87970d0fea83ffc7d93210436d76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ee8f001956e87970d0fea83ffc7d93210436d76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef/comments", "author": null, "committer": null, "parents": [{"sha": "f187056f8a6ca4c42c7cfa2954b134a94c7a38b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f187056f8a6ca4c42c7cfa2954b134a94c7a38b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f187056f8a6ca4c42c7cfa2954b134a94c7a38b3"}], "stats": {"total": 40, "additions": 11, "deletions": 29}, "files": [{"sha": "81e06fb3b4fb8c9b61d2e38564517d965dd99c6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef", "patch": "@@ -1,3 +1,10 @@\n+Sat Aug 16 01:08:12 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* loop.c (is_power_of_2, is_conditional_branch): Delete unused\n+\tfunctions and declarations.\n+\t(analyze_loop_iterations): Use condjump_p.\n+\t(insert_bct): Likewise.  Use exact_log2.\n+\t\n Fri Aug 15 23:48:32 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* haifa-sched.c (find_post_sched_live): Call FREE_REG_SET as needed."}, {"sha": "f7d79b3918784bdf1b2b37094733e890bf9e1282", "filename": "gcc/loop.c", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=38ea060fa7bf6daad4c8e79cc9a8cd78149cd7ef", "patch": "@@ -340,8 +340,6 @@ int indirect_jump_in_function = 0;\n static int indirect_jump_in_function_p ();\n \n int loop_number ();\n-static int is_power_of_2();\n-static int is_conditional_branch ();\n \n /* Debugging functions.  */\n int fix_bct_param ();\n@@ -7111,7 +7109,7 @@ void analyze_loop_iterations (loop_start, loop_end)\n \n   /* make sure that the last loop insn is a conditional jump */\n   last_loop_insn = PREV_INSN (loop_end);\n-  if (!is_conditional_branch (last_loop_insn)) {\n+  if (GET_CODE (last_loop_insn != JUMP_INSN) || !condjump_p (last_loop_insn))\n     if (loop_dump_stream)\n       fprintf (loop_dump_stream,\n               \"analyze_loop_iterations %d: BCT instrumentation failed: invalid jump at loop end\\n\",\n@@ -7301,7 +7299,8 @@ insert_bct (loop_start, loop_end)\n   /* make sure that the last loop insn is a conditional jump .\n      This check is repeated from analyze_loop_iterations (),\n      because unrolling might have changed that.  */\n-  if (!is_conditional_branch (PREV_INSN (loop_end))){\n+  if (GET_CODE (PREV_INSN (loop_end)) != JUMP_INSN\n+      || !is_condjump_p (PREV_INSN (loop_end)))\n     if (loop_dump_stream)\n       fprintf (loop_dump_stream,\n \t      \"insert_bct: not instrumenting BCT because of invalid branch\\n\");\n@@ -7462,7 +7461,7 @@ insert_bct (loop_start, loop_end)\n \n     /* make sure that the increment is a power of two, otherwise (an\n        expensive) divide is needed.  */\n-    if ( !is_power_of_2(increment_value_abs) )\n+    if (exact_log2 (increment_value_abs) == -1)\n       {\n \tif (loop_dump_stream)\n \t  fprintf (loop_dump_stream,\n@@ -7634,30 +7633,6 @@ indirect_jump_in_function_p (start)\n   return is_indirect_jump;\n }\n \n-/* return 1 iff n is a power of 2 */\n-static int\n-is_power_of_2(n)\n-     int n;\n-{\n-  return (n & (n-1)) == 0;\n-}\n-\n-/* return 1 iff insn is a conditional jump */\n-static int\n-is_conditional_branch (insn)\n-     rtx insn;\n-{\n-  rtx work_code;\n-  if (GET_CODE (insn) != JUMP_INSN)\n-    return 0;\n-  work_code = PATTERN (insn);\n-  if (GET_CODE (work_code) != SET)\n-    return 0;\n-  if (GET_CODE (XEXP (work_code, 1)) != IF_THEN_ELSE)\n-    return 0;\n-  return 1;\n-}\n-\n /* debugging: fix_bct_param () is called from toplev.c upon detection\n    of the -fbct-***-N options.  */\n int"}]}