{"sha": "e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmMGU3YTZhNzE0YTEyOGQ5YzE1ZmU0MDUwYmNjN2YwZjg4ZTg2NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-11-14T05:45:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-11-14T05:45:45Z"}, "message": "re PR c++/24817 (g++ accepts multiple function template declarations even if exception-specification doesn't match.)\n\n\tPR c++/24817\n\t* decl.c (check_redeclaration_exception_specification): New\n\tfunction.\n\t(duplicate_decls): Use it.\n\t* error.c (fndecl_to_string): Print the template parameter list.\n\tPR c++/24817\n\t* g++.dg/eh/spec8.C: New test.\n\nFrom-SVN: r106884", "tree": {"sha": "738e589900c87a98ca78f85d831b4bd4e50600d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/738e589900c87a98ca78f85d831b4bd4e50600d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/comments", "author": null, "committer": null, "parents": [{"sha": "c748a2c7c5916c839414d2e78ce1a802dd07150f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c748a2c7c5916c839414d2e78ce1a802dd07150f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c748a2c7c5916c839414d2e78ce1a802dd07150f"}], "stats": {"total": 115, "additions": 80, "deletions": 35}, "files": [{"sha": "a4f0b8aee03a15ddf95f39fa6cc82e347fc0aa23", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865", "patch": "@@ -1,5 +1,11 @@\n 2005-11-13  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/24817\n+\t* decl.c (check_redeclaration_exception_specification): New\n+\tfunction.\n+\t(duplicate_decls): Use it.\n+\t* error.c (fndecl_to_string): Print the template parameter list.\n+\n \tPR c++/20293\n \t* cxx-pretty-print.c (pp_cxx_statement): Print qualifying scopes\n \tfor namespaces."}, {"sha": "30d81a727f5a624d8940a55b85ca18237c9c082f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 56, "deletions": 34, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865", "patch": "@@ -1004,6 +1004,41 @@ warn_extern_redeclared_static (tree newdecl, tree olddecl)\n   pedwarn (\"previous declaration of %q+D\", olddecl);\n }\n \n+/* NEW_DECL is a redeclaration of OLD_DECL; both are functions or\n+   function templates.  If their exception specifications do not\n+   match, issue an a diagnostic.  */\n+\n+static void\n+check_redeclaration_exception_specification (tree new_decl,\n+\t\t\t\t\t     tree old_decl)\n+{\n+  tree new_type;\n+  tree old_type;\n+  tree new_exceptions;\n+  tree old_exceptions;\n+\n+  new_type = TREE_TYPE (new_decl);\n+  new_exceptions = TYPE_RAISES_EXCEPTIONS (new_type);\n+  old_type = TREE_TYPE (old_decl);\n+  old_exceptions = TYPE_RAISES_EXCEPTIONS (old_type);\n+\n+  /* [except.spec]\n+\n+     If any declaration of a function has an exception-specification,\n+     all declarations, including the definition and an explicit\n+     specialization, of that function shall have an\n+     exception-specification with the same set of type-ids.  */\n+  if ((pedantic || ! DECL_IN_SYSTEM_HEADER (old_decl))\n+      && ! DECL_IS_BUILTIN (old_decl)\n+      && flag_exceptions\n+      && !comp_except_specs (new_exceptions, old_exceptions, \n+\t\t\t     /*exact=*/true))\n+    {\n+      error (\"declaration of %qF throws different exceptions\", new_decl);\n+      error (\"from previous declaration %q+F\", old_decl);\n+    }\n+}\n+\n /* If NEWDECL is a redeclaration of OLDDECL, merge the declarations.\n    If the redeclaration is invalid, a diagnostic is issued, and the\n    error_mark_node is returned.  Otherwise, OLDDECL is returned.\n@@ -1495,30 +1530,35 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \n   if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n     {\n-      TREE_TYPE (olddecl) = TREE_TYPE (DECL_TEMPLATE_RESULT (olddecl));\n+      tree old_result;\n+      tree new_result;\n+      old_result = DECL_TEMPLATE_RESULT (olddecl);\n+      new_result = DECL_TEMPLATE_RESULT (newdecl);\n+      TREE_TYPE (olddecl) = TREE_TYPE (old_result);\n       DECL_TEMPLATE_SPECIALIZATIONS (olddecl)\n \t= chainon (DECL_TEMPLATE_SPECIALIZATIONS (olddecl),\n \t\t   DECL_TEMPLATE_SPECIALIZATIONS (newdecl));\n \n+      if (DECL_FUNCTION_TEMPLATE_P (newdecl))\n+\t{\n+\t  DECL_INLINE (old_result)\n+\t    |= DECL_INLINE (new_result);\n+\t  DECL_DECLARED_INLINE_P (old_result)\n+\t    |= DECL_DECLARED_INLINE_P (new_result);\n+\t  check_redeclaration_exception_specification (newdecl, olddecl);\n+\t}\n+\n       /* If the new declaration is a definition, update the file and\n \t line information on the declaration.  */\n-      if (DECL_INITIAL (DECL_TEMPLATE_RESULT (olddecl)) == NULL_TREE\n-\t  && DECL_INITIAL (DECL_TEMPLATE_RESULT (newdecl)) != NULL_TREE)\n+      if (DECL_INITIAL (old_result) == NULL_TREE\n+\t  && DECL_INITIAL (new_result) != NULL_TREE)\n \t{\n \t  DECL_SOURCE_LOCATION (olddecl)\n-\t    = DECL_SOURCE_LOCATION (DECL_TEMPLATE_RESULT (olddecl))\n+\t    = DECL_SOURCE_LOCATION (old_result)\n \t    = DECL_SOURCE_LOCATION (newdecl);\n \t  if (DECL_FUNCTION_TEMPLATE_P (newdecl))\n-\t    DECL_ARGUMENTS (DECL_TEMPLATE_RESULT (olddecl))\n-\t      = DECL_ARGUMENTS (DECL_TEMPLATE_RESULT (newdecl));\n-\t}\n-\n-      if (DECL_FUNCTION_TEMPLATE_P (newdecl))\n-\t{\n-\t  DECL_INLINE (DECL_TEMPLATE_RESULT (olddecl))\n-\t    |= DECL_INLINE (DECL_TEMPLATE_RESULT (newdecl));\n-\t  DECL_DECLARED_INLINE_P (DECL_TEMPLATE_RESULT (olddecl))\n-\t    |= DECL_DECLARED_INLINE_P (DECL_TEMPLATE_RESULT (newdecl));\n+\t    DECL_ARGUMENTS (old_result)\n+\t      = DECL_ARGUMENTS (new_result);\n \t}\n \n       return olddecl;\n@@ -1550,26 +1590,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \n       /* Do this after calling `merge_types' so that default\n \t parameters don't confuse us.  */\n-      else if (TREE_CODE (newdecl) == FUNCTION_DECL\n-\t  && (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (newdecl))\n-\t      != TYPE_RAISES_EXCEPTIONS (TREE_TYPE (olddecl))))\n-\t{\n-\t  TREE_TYPE (newdecl) = build_exception_variant (newtype,\n-\t\t\t\t\t\t\t TYPE_RAISES_EXCEPTIONS (TREE_TYPE (newdecl)));\n-\t  TREE_TYPE (olddecl) = build_exception_variant (newtype,\n-\t\t\t\t\t\t\t TYPE_RAISES_EXCEPTIONS (oldtype));\n-\n-\t  if ((pedantic || ! DECL_IN_SYSTEM_HEADER (olddecl))\n-\t      && ! DECL_IS_BUILTIN (olddecl)\n-\t      && flag_exceptions\n-\t      && !comp_except_specs (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (newdecl)),\n-\t\t\t\t     TYPE_RAISES_EXCEPTIONS (TREE_TYPE (olddecl)), 1))\n-\t    {\n-\t      error (\"declaration of %qF throws different exceptions\",\n-\t\t     newdecl);\n-\t      error (\"than previous declaration %q+F\", olddecl);\n-\t    }\n-\t}\n+      else if (TREE_CODE (newdecl) == FUNCTION_DECL)\n+\tcheck_redeclaration_exception_specification (newdecl, olddecl);\n       TREE_TYPE (newdecl) = TREE_TYPE (olddecl) = newtype;\n \n       /* Lay the type out, unless already done.  */"}, {"sha": "674e407055fb48e0009d1e796a3d9f4a62af09b1", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865", "patch": "@@ -2008,7 +2008,8 @@ fndecl_to_string (tree fndecl, int verbose)\n {\n   int flags;\n \n-  flags = TFF_EXCEPTION_SPECIFICATION | TFF_DECL_SPECIFIERS;\n+  flags = TFF_EXCEPTION_SPECIFICATION | TFF_DECL_SPECIFIERS\n+    | TFF_TEMPLATE_HEADER;\n   if (verbose)\n     flags |= TFF_FUNCTION_DEFAULT_ARGUMENTS;\n   reinit_cxx_pp ();"}, {"sha": "6f9167fd4fbf5f1f03c125c11615cec496e6eb59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865", "patch": "@@ -1,3 +1,8 @@\n+2005-11-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/24817\n+\t* g++.dg/eh/spec8.C: New test.\n+\n 2005-11-14  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/pack-test-1.c: Gate on ! default_packed."}, {"sha": "7a35e6e807217d969a08e855b78d83f89b18542d", "filename": "gcc/testsuite/g++.dg/eh/spec8.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec8.C?ref=e1f0e7a6a714a128d9c15fe4050bcc7f0f88e865", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/24817\n+\n+struct exception {};\n+\n+template <typename T> void foo() throw(exception); // { dg-error \"declaration\" }\n+template <typename T> void foo(); // { dg-error \"exceptions\" }\n+\n+struct bar\n+{\n+  template <typename T> friend void foo(); // { dg-error \"exceptions\" }\n+};"}]}