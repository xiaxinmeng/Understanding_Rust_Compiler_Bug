{"sha": "7157aa8583f7ca32d5bee783e83103da92e3a1f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1N2FhODU4M2Y3Y2EzMmQ1YmVlNzgzZTgzMTAzZGE5MmUzYTFmMw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-11-16T15:23:36Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-11-16T15:23:36Z"}, "message": "df: Change defs in entry and uses in exit block during separate shrink-wrapping\n\nSo far all target implementations of the separate shrink-wrapping hooks\nuse the DF LIVE info to figure out around which basic blocks the non-\nvolatile registers need to be saved.  This is done by looking at the\nIN+GEN+KILL sets of the basic blocks.  However, that doesn't work for\nregisters that DF says are defined in the entry block, or used in the\nexit block.\n\nThis patch introduces a local flag DF_SCAN_EMPTY_ENTRY_EXIT that says\nno registers should be defined in the entry block, and none used in the\nexit block.  It also makes try_shrink_wrapping_separate use it.  The\nrs6000 port is changed to use IN+GEN+KILL for the LR component.\n\n\n\t* config/rs6000/rs6000.c (rs6000_components_for_bb): Mark the LR\n\tcomponent as used also if LR_REGNO is a live input to the bb.\n\t* df-scan.c (df_get_entry_block_def_set): Return immediately after\n\tclearing the set if DF_SCAN_EMPTY_ENTRY_EXIT is set.\n\t(df_get_exit_block_use_set): Ditto.\n\t* df.h (df_scan_flags): New enum.\n\t* shrink-wrap.c (try_shrink_wrapping_separate): Set\n\tDF_SCAN_EMPTY_ENTRY_EXIT in df_scan->local_flags, and call\n\tdf_update_entry_block_defs and df_update_exit_block_uses\n\tat the start; clear the flag and call those functions at the end.\n\nFrom-SVN: r242497", "tree": {"sha": "21e2efc1ded38ef3fcce361644e9b761e392f183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21e2efc1ded38ef3fcce361644e9b761e392f183"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7157aa8583f7ca32d5bee783e83103da92e3a1f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7157aa8583f7ca32d5bee783e83103da92e3a1f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7157aa8583f7ca32d5bee783e83103da92e3a1f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7157aa8583f7ca32d5bee783e83103da92e3a1f3/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "307ca54339bfce88e67f7e446ee4bbf5f1961eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307ca54339bfce88e67f7e446ee4bbf5f1961eba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/307ca54339bfce88e67f7e446ee4bbf5f1961eba"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "c3b99edf227dcd15b5fc934b1ee5c3df31f30921", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7157aa8583f7ca32d5bee783e83103da92e3a1f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7157aa8583f7ca32d5bee783e83103da92e3a1f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7157aa8583f7ca32d5bee783e83103da92e3a1f3", "patch": "@@ -1,3 +1,16 @@\n+2016-11-16  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_components_for_bb): Mark the LR\n+\tcomponent as used also if LR_REGNO is a live input to the bb.\n+\t* df-scan.c (df_get_entry_block_def_set): Return immediately after\n+\tclearing the set if DF_SCAN_EMPTY_ENTRY_EXIT is set.\n+\t(df_get_exit_block_use_set): Ditto.\n+\t* df.h (df_scan_flags): New enum.\n+\t* shrink-wrap.c (try_shrink_wrapping_separate): Set\n+\tDF_SCAN_EMPTY_ENTRY_EXIT in df_scan->local_flags, and call\n+\tdf_update_entry_block_defs and df_update_exit_block_uses\n+\tat the start; clear the flag and call those functions at the end.\n+\n 2016-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "e85d3eeeb5e4f99a4be15d2932e4b5e8cbd744f6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7157aa8583f7ca32d5bee783e83103da92e3a1f3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7157aa8583f7ca32d5bee783e83103da92e3a1f3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7157aa8583f7ca32d5bee783e83103da92e3a1f3", "patch": "@@ -27823,7 +27823,8 @@ rs6000_components_for_bb (basic_block bb)\n       bitmap_set_bit (components, regno);\n \n   /* LR needs to be saved around a bb if it is killed in that bb.  */\n-  if (bitmap_bit_p (gen, LR_REGNO)\n+  if (bitmap_bit_p (in, LR_REGNO)\n+      || bitmap_bit_p (gen, LR_REGNO)\n       || bitmap_bit_p (kill, LR_REGNO))\n     bitmap_set_bit (components, 0);\n "}, {"sha": "e6b55b51d6b02e3d5a485683bbbc6dea741138f4", "filename": "gcc/df-scan.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7157aa8583f7ca32d5bee783e83103da92e3a1f3/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7157aa8583f7ca32d5bee783e83103da92e3a1f3/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=7157aa8583f7ca32d5bee783e83103da92e3a1f3", "patch": "@@ -3506,6 +3506,14 @@ df_get_entry_block_def_set (bitmap entry_block_defs)\n \n   bitmap_clear (entry_block_defs);\n \n+  /* For separate shrink-wrapping we use LIVE to analyze which basic blocks\n+     need a prologue for some component to be executed before that block,\n+     and we do not care about any other registers.  Hence, we do not want\n+     any register for any component defined in the entry block, and we can\n+     just leave all registers undefined.  */\n+  if (df_scan->local_flags & DF_SCAN_EMPTY_ENTRY_EXIT)\n+    return;\n+\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n       if (global_regs[i])\n@@ -3665,6 +3673,14 @@ df_get_exit_block_use_set (bitmap exit_block_uses)\n \n   bitmap_clear (exit_block_uses);\n \n+  /* For separate shrink-wrapping we use LIVE to analyze which basic blocks\n+     need an epilogue for some component to be executed after that block,\n+     and we do not care about any other registers.  Hence, we do not want\n+     any register for any component seen as used in the exit block, and we\n+     can just say no registers at all are used.  */\n+  if (df_scan->local_flags & DF_SCAN_EMPTY_ENTRY_EXIT)\n+    return;\n+\n   /* Stack pointer is always live at the exit.  */\n   bitmap_set_bit (exit_block_uses, STACK_POINTER_REGNUM);\n "}, {"sha": "7a2a6a1404f10a1bbd98d9368dec7baef9a4d048", "filename": "gcc/df.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7157aa8583f7ca32d5bee783e83103da92e3a1f3/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7157aa8583f7ca32d5bee783e83103da92e3a1f3/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=7157aa8583f7ca32d5bee783e83103da92e3a1f3", "patch": "@@ -450,6 +450,13 @@ enum df_chain_flags\n   DF_UD_CHAIN      =  2  /* Build UD chains.  */\n };\n \n+enum df_scan_flags\n+{\n+  /* Flags for the SCAN problem.  */\n+  DF_SCAN_EMPTY_ENTRY_EXIT = 1  /* Don't define any registers in the entry\n+\t\t\t\t   block; don't use any in the exit block.  */\n+};\n+\n enum df_changeable_flags\n {\n   /* Scanning flags.  */"}, {"sha": "6996d25db4aeed485b8387c5afac018d823ea984", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7157aa8583f7ca32d5bee783e83103da92e3a1f3/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7157aa8583f7ca32d5bee783e83103da92e3a1f3/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=7157aa8583f7ca32d5bee783e83103da92e3a1f3", "patch": "@@ -1682,7 +1682,13 @@ try_shrink_wrapping_separate (basic_block first_bb)\n   if (!components)\n     return;\n \n-  /* We need LIVE info.  */\n+  /* We need LIVE info, not defining anything in the entry block and not\n+     using anything in the exit block.  A block then needs a component if\n+     the register for that component is in the IN or GEN or KILL set for\n+     that block.  */\n+  df_scan->local_flags |= DF_SCAN_EMPTY_ENTRY_EXIT;\n+  df_update_entry_block_defs ();\n+  df_update_exit_block_uses ();\n   df_live_add_problem ();\n   df_live_set_all_dirty ();\n   df_analyze ();\n@@ -1748,9 +1754,10 @@ try_shrink_wrapping_separate (basic_block first_bb)\n   free_dominance_info (CDI_DOMINATORS);\n   free_dominance_info (CDI_POST_DOMINATORS);\n \n-  if (crtl->shrink_wrapped_separate)\n-    {\n-      df_live_set_all_dirty ();\n-      df_analyze ();\n-    }\n+  /* All done.  */\n+  df_scan->local_flags &= ~DF_SCAN_EMPTY_ENTRY_EXIT;\n+  df_update_entry_block_defs ();\n+  df_update_exit_block_uses ();\n+  df_live_set_all_dirty ();\n+  df_analyze ();\n }"}]}