{"sha": "39bf4f14fc75e14aafc4ba8a53a34775f29b743a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzliZjRmMTRmYzc1ZTE0YWFmYzRiYThhNTNhMzQ3NzVmMjliNzQzYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-30T18:39:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-30T23:25:52Z"}, "message": "libstdc++: Implement P2017R1 \"Conditionally borrowed ranges\"\n\nThis makes some range adaptors model the borrowed_range concept if they\nare adapting a borrowed range. This hasn't been added to the C++23\nworking paper yet, but it has been approved by LWG, and the\nrecommendation is to treat it as a defect report for C++20 as well.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (enable_borrowed_view<take_view<T>>)\n\t(enable_borrowed_view<drop_view<T>>)\n\t(enable_borrowed_view<drop_while_view<T>>)\n\t(enable_borrowed_view<reverse_view<T>>)\n\t(enable_borrowed_view<common_view<T>>)\n\t(enable_borrowed_view<elements_view<T>>): Add partial\n\tspecializations as per P2017R1.\n\t* testsuite/std/ranges/adaptors/conditionally_borrowed.cc:\n\tNew test.", "tree": {"sha": "bf5aeb9ac24f784abe3f2e5b63e0ded66f0a1f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5aeb9ac24f784abe3f2e5b63e0ded66f0a1f03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39bf4f14fc75e14aafc4ba8a53a34775f29b743a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39bf4f14fc75e14aafc4ba8a53a34775f29b743a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39bf4f14fc75e14aafc4ba8a53a34775f29b743a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39bf4f14fc75e14aafc4ba8a53a34775f29b743a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03851e1a6dac72127e97629e259ad01a2b1e7b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03851e1a6dac72127e97629e259ad01a2b1e7b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f03851e1a6dac72127e97629e259ad01a2b1e7b6"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "bc7bb05b00507351969272ad462721ef7bc5028f", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39bf4f14fc75e14aafc4ba8a53a34775f29b743a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39bf4f14fc75e14aafc4ba8a53a34775f29b743a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=39bf4f14fc75e14aafc4ba8a53a34775f29b743a", "patch": "@@ -1810,6 +1810,10 @@ namespace views\n     take_view(_Range&&, range_difference_t<_Range>)\n       -> take_view<views::all_t<_Range>>;\n \n+  template<typename _Tp>\n+    inline constexpr bool enable_borrowed_range<take_view<_Tp>>\n+      = enable_borrowed_range<_Tp>;\n+\n   namespace views\n   {\n     inline constexpr __adaptor::_RangeAdaptor take\n@@ -2010,6 +2014,10 @@ namespace views\n     drop_view(_Range&&, range_difference_t<_Range>)\n       -> drop_view<views::all_t<_Range>>;\n \n+  template<typename _Tp>\n+    inline constexpr bool enable_borrowed_range<drop_view<_Tp>>\n+      = enable_borrowed_range<_Tp>;\n+\n   namespace views\n   {\n     inline constexpr __adaptor::_RangeAdaptor drop\n@@ -2071,6 +2079,10 @@ namespace views\n     drop_while_view(_Range&&, _Pred)\n       -> drop_while_view<views::all_t<_Range>, _Pred>;\n \n+  template<typename _Tp, typename _Pred>\n+    inline constexpr bool enable_borrowed_range<drop_while_view<_Tp, _Pred>>\n+      = enable_borrowed_range<_Tp>;\n+\n   namespace views\n   {\n     inline constexpr __adaptor::_RangeAdaptor drop_while\n@@ -2891,6 +2903,10 @@ namespace views\n   template<typename _Range>\n     common_view(_Range&&) -> common_view<views::all_t<_Range>>;\n \n+  template<typename _Tp>\n+    inline constexpr bool enable_borrowed_range<common_view<_Tp>>\n+      = enable_borrowed_range<_Tp>;\n+\n   namespace views\n   {\n     inline constexpr __adaptor::_RangeAdaptorClosure common\n@@ -2976,6 +2992,10 @@ namespace views\n   template<typename _Range>\n     reverse_view(_Range&&) -> reverse_view<views::all_t<_Range>>;\n \n+  template<typename _Tp>\n+    inline constexpr bool enable_borrowed_range<reverse_view<_Tp>>\n+      = enable_borrowed_range<_Tp>;\n+\n   namespace views\n   {\n     namespace __detail\n@@ -3301,6 +3321,10 @@ namespace views\n       _Vp _M_base = _Vp();\n     };\n \n+  template<typename _Tp, size_t _Nm>\n+    inline constexpr bool enable_borrowed_range<elements_view<_Tp, _Nm>>\n+      = enable_borrowed_range<_Tp>;\n+\n   template<typename _Range>\n     using keys_view = elements_view<views::all_t<_Range>, 0>;\n "}, {"sha": "98398ff3b0a7b64fa3124a2f17f934598305d3f4", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/conditionally_borrowed.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39bf4f14fc75e14aafc4ba8a53a34775f29b743a/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fconditionally_borrowed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39bf4f14fc75e14aafc4ba8a53a34775f29b743a/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fconditionally_borrowed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fconditionally_borrowed.cc?ref=39bf4f14fc75e14aafc4ba8a53a34775f29b743a", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <ranges>\n+#include <algorithm>\n+#include <string>\n+#include <cctype>\n+#include <testsuite_hooks.h>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+using namespace std::literals;\n+\n+// P2017R1 \"Conditionally borrowed ranges\"\n+auto trim(std::string const& s) {\n+    auto isalpha = [](unsigned char c){ return std::isalpha(c); };\n+    auto b = ranges::find_if(s, isalpha);\n+    auto e = ranges::find_if(s | views::reverse, isalpha).base();\n+    return ranges::subrange(b, e);\n+}\n+\n+void\n+test01()\n+{\n+  VERIFY( ranges::equal( trim(\"  abc    \"), \"abc\"sv ) );\n+\n+  std::string s = \"0123456789\";\n+  auto odd = [](char c){ return (c - '0') % 2; };\n+  using namespace std::views;\n+  auto pos = ranges::find(s | take(5) | drop(1) | drop_while(odd), '2');\n+  VERIFY( *pos == '2' );\n+\n+  static_assert( ranges::borrowed_range<decltype(s | reverse)> );\n+  static_assert( ranges::borrowed_range<decltype(s | take(1))> );\n+  static_assert( ranges::borrowed_range<decltype(s | drop(1))> );\n+  static_assert( ranges::borrowed_range<decltype(s | drop_while(odd))> );\n+\n+  ranges::subrange r(s.begin(), s.cend());\n+  static_assert( !ranges::common_range<decltype(r)> );\n+  auto pos2 = ranges::find(r | views::common, '2');\n+  VERIFY( *pos2 == '2' );\n+}\n+\n+void\n+test02()\n+{\n+  std::pair<int, std::string_view> a[2]{ {1,\"two\"}, {3,\"four\"}};\n+  auto pos = ranges::find(a | views::values, \"four\");\n+  VERIFY( *pos == \"four\" );\n+\n+  static_assert( ranges::borrowed_range<decltype(a | views::keys)> );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}