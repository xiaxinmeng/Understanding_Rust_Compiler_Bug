{"sha": "6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNmMWFjNDJkYjA2ODRmMGMzODZlYzlhNjY1ZGRjYWExMmE0ZjFjOQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-04-29T07:40:05Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-04-29T07:40:05Z"}, "message": "acx.m4: Fix fastcompare support for new-bootstrap.\n\n2004-04-28  Paolo Bonzini  <bonzini@gnu.org>\n\n        * config/acx.m4: Fix fastcompare support for new-bootstrap.\n        * configure: Regenerate.\n\nFrom-SVN: r81281", "tree": {"sha": "978c13340606f22c6e8fd96d9775d5b6ed313a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978c13340606f22c6e8fd96d9775d5b6ed313a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f964bd29f1d8a34990937c5a13e4356257e43a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f964bd29f1d8a34990937c5a13e4356257e43a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f964bd29f1d8a34990937c5a13e4356257e43a80"}], "stats": {"total": 79, "additions": 58, "deletions": 21}, "files": [{"sha": "8ba5f3e0839566a0d6f44977fc64ffbd2d94544a", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9", "patch": "@@ -1,3 +1,8 @@\n+2004-04-28  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config/acx.m4: Fix fastcompare support for new-bootstrap.\n+\t* configure: Regenerate.\n+\n 2004-04-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \tRevert:"}, {"sha": "3652836bb8d34d5dc6830e06d53d6311413ea687", "filename": "config/acx.m4", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9/config%2Facx.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9/config%2Facx.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Facx.m4?ref=6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9", "patch": "@@ -193,3 +193,34 @@ else\n   have_gnat=no\n fi\n ])\n+\n+dnl 'make compare' can be significantly faster, if cmp itself can\n+dnl skip bytes instead of using tail.  The test being performed is\n+dnl \"if cmp --ignore-initial=2 t1 t2 && ! cmp --ignore-initial=1 t1 t2\"\n+dnl but we need to sink errors and handle broken shells.  We also test\n+dnl for the parameter format \"cmp file1 file2 skip1 skip2\" which is\n+dnl accepted by cmp on some systems.\n+AC_DEFUN([ACX_PROG_CMP_IGNORE_INITIAL],\n+[AC_CACHE_CHECK([how to compare bootstrapped objects], gcc_cv_prog_cmp_skip,\n+[ echo abfoo >t1\n+  echo cdfoo >t2\n+  gcc_cv_prog_cmp_skip='tail +16c $$f1 > tmp-foo1; tail +16c $$f2 > tmp-foo2; cmp tmp-foo1 tmp-foo2'\n+  if cmp t1 t2 2 2 > /dev/null 2>&1; then\n+    if cmp t1 t2 1 1 > /dev/null 2>&1; then\n+      :\n+    else\n+      gcc_cv_prog_cmp_skip='cmp $$f1 $$f2 16 16'\n+    fi\n+  fi\n+  if cmp --ignore-initial=2 t1 t2 > /dev/null 2>&1; then\n+    if cmp --ignore-initial=1 t1 t2 > /dev/null 2>&1; then\n+      :\n+    else\n+      gcc_cv_prog_cmp_skip='cmp --ignore-initial=16 $$f1 $$f2'\n+    fi\n+  fi\n+  rm t1 t2\n+])\n+do_compare=\"$gcc_cv_prog_cmp_skip\"\n+AC_SUBST(do_compare)\n+])"}, {"sha": "65ecf0975e03f85a9a563e3494d8d925b8d65184", "filename": "configure", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=6cf1ac42db0684f0c386ec9a665ddcaa12a4f1c9", "patch": "@@ -1855,7 +1855,7 @@ fi\n # Extract the first word of \"gcc\", so it can be a program name with args.\n set dummy gcc; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:1860: checking for $ac_word\" >&5\n+echo \"configure:1859: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -1885,7 +1885,7 @@ if test -z \"$CC\"; then\n   # Extract the first word of \"cc\", so it can be a program name with args.\n set dummy cc; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:1890: checking for $ac_word\" >&5\n+echo \"configure:1889: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -1936,7 +1936,7 @@ fi\n       # Extract the first word of \"cl\", so it can be a program name with args.\n set dummy cl; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:1941: checking for $ac_word\" >&5\n+echo \"configure:1940: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -1968,7 +1968,7 @@ fi\n fi\n \n echo $ac_n \"checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\"\"... $ac_c\" 1>&6\n-echo \"configure:1973: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\" >&5\n+echo \"configure:1972: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\" >&5\n \n ac_ext=c\n # CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n@@ -1979,12 +1979,12 @@ cross_compiling=$ac_cv_prog_cc_cross\n \n cat > conftest.$ac_ext << EOF\n \n-#line 1984 \"configure\"\n+#line 1983 \"configure\"\n #include \"confdefs.h\"\n \n main(){return(0);}\n EOF\n-if { (eval echo configure:1989: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1988: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   ac_cv_prog_cc_works=yes\n   # If we can't run a trivial program, we are probably using a cross compiler.\n   if (./conftest; exit) 2>/dev/null; then\n@@ -2010,12 +2010,12 @@ if test $ac_cv_prog_cc_works = no; then\n   { echo \"configure: error: installation or configuration problem: C compiler cannot create executables.\" 1>&2; exit 1; }\n fi\n echo $ac_n \"checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\"\"... $ac_c\" 1>&6\n-echo \"configure:2015: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\" >&5\n+echo \"configure:2014: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\" >&5\n echo \"$ac_t\"\"$ac_cv_prog_cc_cross\" 1>&6\n cross_compiling=$ac_cv_prog_cc_cross\n \n echo $ac_n \"checking whether we are using GNU C\"\"... $ac_c\" 1>&6\n-echo \"configure:2020: checking whether we are using GNU C\" >&5\n+echo \"configure:2019: checking whether we are using GNU C\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_gcc'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2024,7 +2024,7 @@ else\n   yes;\n #endif\n EOF\n-if { ac_try='${CC-cc} -E conftest.c'; { (eval echo configure:2029: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }; } | egrep yes >/dev/null 2>&1; then\n+if { ac_try='${CC-cc} -E conftest.c'; { (eval echo configure:2028: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }; } | egrep yes >/dev/null 2>&1; then\n   ac_cv_prog_gcc=yes\n else\n   ac_cv_prog_gcc=no\n@@ -2043,7 +2043,7 @@ ac_test_CFLAGS=\"${CFLAGS+set}\"\n ac_save_CFLAGS=\"$CFLAGS\"\n CFLAGS=\n echo $ac_n \"checking whether ${CC-cc} accepts -g\"\"... $ac_c\" 1>&6\n-echo \"configure:2048: checking whether ${CC-cc} accepts -g\" >&5\n+echo \"configure:2047: checking whether ${CC-cc} accepts -g\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_cc_g'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2079,7 +2079,7 @@ fi\n # Extract the first word of \"${ac_tool_prefix}gnatbind\", so it can be a program name with args.\n set dummy ${ac_tool_prefix}gnatbind; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:2084: checking for $ac_word\" >&5\n+echo \"configure:2083: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_GNATBIND'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2111,7 +2111,7 @@ if test -n \"$ac_tool_prefix\"; then\n   # Extract the first word of \"gnatbind\", so it can be a program name with args.\n set dummy gnatbind; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:2116: checking for $ac_word\" >&5\n+echo \"configure:2115: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_GNATBIND'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2144,7 +2144,7 @@ fi\n fi\n \n echo $ac_n \"checking whether compiler driver understands Ada\"\"... $ac_c\" 1>&6\n-echo \"configure:2149: checking whether compiler driver understands Ada\" >&5\n+echo \"configure:2148: checking whether compiler driver understands Ada\" >&5\n if eval \"test \\\"`echo '$''{'acx_cv_cc_gcc_supports_ada'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2177,22 +2177,23 @@ else\n fi\n \n echo $ac_n \"checking how to compare bootstrapped objects\"\"... $ac_c\" 1>&6\n-echo \"configure:2182: checking how to compare bootstrapped objects\" >&5\n+echo \"configure:2181: checking how to compare bootstrapped objects\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_prog_cmp_skip'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n    echo abfoo >t1\n   echo cdfoo >t2\n   gcc_cv_prog_cmp_skip='tail +16c $$f1 > tmp-foo1; tail +16c $$f2 > tmp-foo2; cmp tmp-foo1 tmp-foo2'\n+  if cmp t1 t2 2 2 > /dev/null 2>&1; then\n+    if cmp t1 t2 1 1 > /dev/null 2>&1; then\n+      :\n+    else\n+      gcc_cv_prog_cmp_skip='cmp $$f1 $$f2 16 16'\n+    fi\n+  fi\n   if cmp --ignore-initial=2 t1 t2 > /dev/null 2>&1; then\n     if cmp --ignore-initial=1 t1 t2 > /dev/null 2>&1; then\n-      if cmp t1 t2 2 2 > /dev/null 2>&1; then\n-        if cmp t1 t2 1 1 > /dev/null 2>&1; then\n-          :\n-        else\n-          gcc_cv_prog_cmp_skip='cmp $$f1 $$f2 16 16'\n-        fi\n-      fi\n+      :\n     else\n       gcc_cv_prog_cmp_skip='cmp --ignore-initial=16 $$f1 $$f2'\n     fi"}]}