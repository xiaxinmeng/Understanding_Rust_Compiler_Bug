{"sha": "5c944c6cb8a54f29a394493e48429345f2f8f08d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM5NDRjNmNiOGE1NGYyOWEzOTQ0OTNlNDg0MjkzNDVmMmY4ZjA4ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-01-08T09:06:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-01-08T09:06:27Z"}, "message": "re PR middle-end/59630 (ICE converting the return type of a builtin function)\n\n2014-01-08  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/59630\n\t* gimple.h (is_gimple_builtin_call): Remove.\n\t(gimple_builtin_call_types_compatible_p): New.\n\t(gimple_call_builtin_p): New overload.\n\t* gimple.c (is_gimple_builtin_call): Remove.\n\t(validate_call): Rename to ...\n\t(gimple_builtin_call_types_compatible_p): ... this and export.  Also\n\tcheck return types.\n\t(validate_type): New static function.\n\t(gimple_call_builtin_p): New overload and adjust.\n\t* gimple-fold.c (gimple_fold_builtin): Fold the return value.\n\t(gimple_fold_call): Likewise.  Use gimple_call_builtin_p.\n\t(gimple_fold_stmt_to_constant_1): Likewise.\n\t* tsan.c (instrument_gimple): Use gimple_call_builtin_p.\n\n\t* gcc.dg/pr59630.c: New testcase.\n\nFrom-SVN: r206421", "tree": {"sha": "c2c2f5e329c26642c69c278413a27dc551d14728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2c2f5e329c26642c69c278413a27dc551d14728"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c944c6cb8a54f29a394493e48429345f2f8f08d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c944c6cb8a54f29a394493e48429345f2f8f08d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c944c6cb8a54f29a394493e48429345f2f8f08d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c944c6cb8a54f29a394493e48429345f2f8f08d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0bd34ae42178978a45a5ad947f10a66d41d68f77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd34ae42178978a45a5ad947f10a66d41d68f77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd34ae42178978a45a5ad947f10a66d41d68f77"}], "stats": {"total": 123, "additions": 87, "deletions": 36}, "files": [{"sha": "78a5da489a1f4e159e890e2d34ee1d2eac2be0c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c944c6cb8a54f29a394493e48429345f2f8f08d", "patch": "@@ -1,3 +1,20 @@\n+2014-01-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/59630\n+\t* gimple.h (is_gimple_builtin_call): Remove.\n+\t(gimple_builtin_call_types_compatible_p): New.\n+\t(gimple_call_builtin_p): New overload.\n+\t* gimple.c (is_gimple_builtin_call): Remove.\n+\t(validate_call): Rename to ...\n+\t(gimple_builtin_call_types_compatible_p): ... this and export.  Also\n+\tcheck return types.\n+\t(validate_type): New static function.\n+\t(gimple_call_builtin_p): New overload and adjust.\n+\t* gimple-fold.c (gimple_fold_builtin): Fold the return value.\n+\t(gimple_fold_call): Likewise.  Use gimple_call_builtin_p.\n+\t(gimple_fold_stmt_to_constant_1): Likewise.\n+\t* tsan.c (instrument_gimple): Use gimple_call_builtin_p.\n+\n 2014-01-08  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/59471"}, {"sha": "91fc2970924cea58695d7afda58489dc3f618028", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=5c944c6cb8a54f29a394493e48429345f2f8f08d", "patch": "@@ -879,8 +879,6 @@ gimple_fold_builtin (gimple stmt)\n   int nargs;\n   location_t loc = gimple_location (stmt);\n \n-  gcc_assert (is_gimple_call (stmt));\n-\n   ignore = (gimple_call_lhs (stmt) == NULL);\n \n   /* First try the generic builtin folder.  If that succeeds, return the\n@@ -890,6 +888,8 @@ gimple_fold_builtin (gimple stmt)\n     {\n       if (ignore)\n \tSTRIP_NOPS (result);\n+      else\n+\tresult = fold_convert (gimple_call_return_type (stmt), result);\n       return result;\n     }\n \n@@ -1206,8 +1206,7 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \n   /* Check for builtins that CCP can handle using information not\n      available in the generic fold routines.  */\n-  callee = gimple_call_fndecl (stmt);\n-  if (callee && DECL_BUILT_IN (callee))\n+  if (gimple_call_builtin_p (stmt))\n     {\n       tree result = gimple_fold_builtin (stmt);\n       if (result)\n@@ -1216,7 +1215,7 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t    gimplify_and_update_call_from_tree (gsi, result);\n \t  changed = true;\n \t}\n-      else if (DECL_BUILT_IN_CLASS (callee) == BUILT_IN_MD)\n+      else if (gimple_call_builtin_p (stmt, BUILT_IN_MD))\n \tchanged |= targetm.gimple_fold_builtin (gsi);\n     }\n \n@@ -2726,7 +2725,9 @@ gimple_fold_stmt_to_constant_1 (gimple stmt, tree (*valueize) (tree))\n \tfn = (*valueize) (gimple_call_fn (stmt));\n \tif (TREE_CODE (fn) == ADDR_EXPR\n \t    && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL\n-\t    && DECL_BUILT_IN (TREE_OPERAND (fn, 0)))\n+\t    && DECL_BUILT_IN (TREE_OPERAND (fn, 0))\n+\t    && gimple_builtin_call_types_compatible_p (stmt,\n+\t\t\t\t\t\t       TREE_OPERAND (fn, 0)))\n \t  {\n \t    tree *args = XALLOCAVEC (tree, gimple_call_num_args (stmt));\n \t    tree call, retval;\n@@ -2738,8 +2739,11 @@ gimple_fold_stmt_to_constant_1 (gimple stmt, tree (*valueize) (tree))\n \t\t\t\t\t fn, gimple_call_num_args (stmt), args);\n \t    retval = fold_call_expr (EXPR_LOCATION (call), call, false);\n \t    if (retval)\n-\t      /* fold_call_expr wraps the result inside a NOP_EXPR.  */\n-\t      STRIP_NOPS (retval);\n+\t      {\n+\t\t/* fold_call_expr wraps the result inside a NOP_EXPR.  */\n+\t\tSTRIP_NOPS (retval);\n+\t\tretval = fold_convert (gimple_call_return_type (stmt), retval);\n+\t      }\n \t    return retval;\n \t  }\n \treturn NULL_TREE;"}, {"sha": "e9851ca386a2e75a22104691b1cbf7c244e30a3a", "filename": "gcc/gimple.c", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=5c944c6cb8a54f29a394493e48429345f2f8f08d", "patch": "@@ -2351,27 +2351,37 @@ gimple_ior_addresses_taken (bitmap addresses_taken, gimple stmt)\n }\n \n \n-/* Return TRUE iff stmt is a call to a built-in function.  */\n+/* Return true if TYPE1 and TYPE2 are compatible enough for builtin\n+   processing.  */\n \n-bool\n-is_gimple_builtin_call (gimple stmt)\n-{\n-  tree callee;\n-\n-  if (is_gimple_call (stmt)\n-      && (callee = gimple_call_fndecl (stmt))\n-      && is_builtin_fn (callee)\n-      && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL)\n-    return true;\n-\n-  return false;\n+static bool\n+validate_type (tree type1, tree type2)\n+{\n+  if (INTEGRAL_TYPE_P (type1)\n+      && INTEGRAL_TYPE_P (type2))\n+    ;\n+  else if (POINTER_TYPE_P (type1)\n+\t   && POINTER_TYPE_P (type2))\n+    ;\n+  else if (TREE_CODE (type1)\n+\t   != TREE_CODE (type2))\n+    return false;\n+  return true;\n }\n \n-/* Return true when STMTs arguments match those of FNDECL.  */\n+/* Return true when STMTs arguments and return value match those of FNDECL,\n+   a decl of a builtin function.  */\n \n-static bool\n-validate_call (gimple stmt, tree fndecl)\n+bool\n+gimple_builtin_call_types_compatible_p (gimple stmt, tree fndecl)\n {\n+  gcc_checking_assert (DECL_BUILT_IN_CLASS (fndecl) != NOT_BUILT_IN);\n+\n+  tree ret = gimple_call_lhs (stmt);\n+  if (ret\n+      && !validate_type (TREE_TYPE (ret), TREE_TYPE (TREE_TYPE (fndecl))))\n+    return false;\n+\n   tree targs = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n   unsigned nargs = gimple_call_num_args (stmt);\n   for (unsigned i = 0; i < nargs; ++i)\n@@ -2380,14 +2390,7 @@ validate_call (gimple stmt, tree fndecl)\n       if (!targs)\n \treturn true;\n       tree arg = gimple_call_arg (stmt, i);\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (arg))\n-\t  && INTEGRAL_TYPE_P (TREE_VALUE (targs)))\n-\t;\n-      else if (POINTER_TYPE_P (TREE_TYPE (arg))\n-\t       && POINTER_TYPE_P (TREE_VALUE (targs)))\n-\t;\n-      else if (TREE_CODE (TREE_TYPE (arg))\n-\t       != TREE_CODE (TREE_VALUE (targs)))\n+      if (!validate_type (TREE_TYPE (arg), TREE_VALUE (targs)))\n \treturn false;\n       targs = TREE_CHAIN (targs);\n     }\n@@ -2396,6 +2399,19 @@ validate_call (gimple stmt, tree fndecl)\n   return true;\n }\n \n+/* Return true when STMT is builtins call.  */\n+\n+bool\n+gimple_call_builtin_p (gimple stmt)\n+{\n+  tree fndecl;\n+  if (is_gimple_call (stmt)\n+      && (fndecl = gimple_call_fndecl (stmt)) != NULL_TREE\n+      && DECL_BUILT_IN_CLASS (fndecl) != NOT_BUILT_IN)\n+    return gimple_builtin_call_types_compatible_p (stmt, fndecl);\n+  return false;\n+}\n+\n /* Return true when STMT is builtins call to CLASS.  */\n \n bool\n@@ -2405,7 +2421,7 @@ gimple_call_builtin_p (gimple stmt, enum built_in_class klass)\n   if (is_gimple_call (stmt)\n       && (fndecl = gimple_call_fndecl (stmt)) != NULL_TREE\n       && DECL_BUILT_IN_CLASS (fndecl) == klass)\n-    return validate_call (stmt, fndecl);\n+    return gimple_builtin_call_types_compatible_p (stmt, fndecl);\n   return false;\n }\n \n@@ -2419,7 +2435,7 @@ gimple_call_builtin_p (gimple stmt, enum built_in_function code)\n       && (fndecl = gimple_call_fndecl (stmt)) != NULL_TREE\n       && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL \n       && DECL_FUNCTION_CODE (fndecl) == code)\n-    return validate_call (stmt, fndecl);\n+    return gimple_builtin_call_types_compatible_p (stmt, fndecl);\n   return false;\n }\n "}, {"sha": "0e80d2eb700245a6ed268e18940bf747cc613747", "filename": "gcc/gimple.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=5c944c6cb8a54f29a394493e48429345f2f8f08d", "patch": "@@ -1253,7 +1253,8 @@ extern tree gimple_unsigned_type (tree);\n extern tree gimple_signed_type (tree);\n extern alias_set_type gimple_get_alias_set (tree);\n extern bool gimple_ior_addresses_taken (bitmap, gimple);\n-extern bool is_gimple_builtin_call (gimple stmt);\n+extern bool gimple_builtin_call_types_compatible_p (gimple, tree);\n+extern bool gimple_call_builtin_p (gimple);\n extern bool gimple_call_builtin_p (gimple, enum built_in_class);\n extern bool gimple_call_builtin_p (gimple, enum built_in_function);\n extern bool gimple_asm_clobbers_memory_p (const_gimple);"}, {"sha": "d113f2a09e46e2eba68cc72c1916d04da220e870", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c944c6cb8a54f29a394493e48429345f2f8f08d", "patch": "@@ -1,3 +1,8 @@\n+2014-01-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/59630\n+\t* gcc.dg/pr59630.c: New testcase.\n+\n 2014-01-08  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/59471"}, {"sha": "6a3c72552f5a08a318424afd7184b9e4636e6c93", "filename": "gcc/testsuite/gcc.dg/pr59630.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59630.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59630.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59630.c?ref=5c944c6cb8a54f29a394493e48429345f2f8f08d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+_Bool foo()\n+{\n+  _Bool (*f)(int) = __builtin_abs; /* { dg-warning \"\" } */\n+  return f(0);\n+}"}, {"sha": "2e32cd2b32f7bb46fd79472e1b4f228607146a17", "filename": "gcc/tsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c944c6cb8a54f29a394493e48429345f2f8f08d/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=5c944c6cb8a54f29a394493e48429345f2f8f08d", "patch": "@@ -609,7 +609,7 @@ instrument_gimple (gimple_stmt_iterator *gsi)\n       && (gimple_call_fndecl (stmt)\n \t  != builtin_decl_implicit (BUILT_IN_TSAN_INIT)))\n     {\n-      if (is_gimple_builtin_call (stmt))\n+      if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n \tinstrument_builtin_call (gsi);\n       return true;\n     }"}]}