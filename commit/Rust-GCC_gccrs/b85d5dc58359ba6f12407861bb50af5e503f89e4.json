{"sha": "b85d5dc58359ba6f12407861bb50af5e503f89e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg1ZDVkYzU4MzU5YmE2ZjEyNDA3ODYxYmI1MGFmNWU1MDNmODllNA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-16T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-16T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "4fa2ff03d43e52f49b6e92cc34faaf4483c697f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fa2ff03d43e52f49b6e92cc34faaf4483c697f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b85d5dc58359ba6f12407861bb50af5e503f89e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85d5dc58359ba6f12407861bb50af5e503f89e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b85d5dc58359ba6f12407861bb50af5e503f89e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85d5dc58359ba6f12407861bb50af5e503f89e4/comments", "author": null, "committer": null, "parents": [{"sha": "1e8e49f135c814bd268289609dd0aea305ed546e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8e49f135c814bd268289609dd0aea305ed546e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e8e49f135c814bd268289609dd0aea305ed546e"}], "stats": {"total": 557, "additions": 556, "deletions": 1}, "files": [{"sha": "47d690724b696e4fcf1916cf22a1108d15b6c223", "filename": "gcc/ChangeLog", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b85d5dc58359ba6f12407861bb50af5e503f89e4", "patch": "@@ -1,3 +1,166 @@\n+2020-10-15  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/97436\n+\t* config/nvptx/nvptx.opt (m32): Comment out.\n+\t* doc/invoke.texi (NVPTX options): Remove -m32.\n+\n+2020-10-15  Jan Hubicka  <hubicka@ucw.cz>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* attr-fnspec.h: Fix toplevel comment.\n+\n+2020-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-pretty-print.c (dump_mem_ref): Print constant offset\n+\talso for TARGET_MEM_REF.\n+\n+2020-10-15  Jan Hubicka  <jh@suse.cz>\n+\n+\t* symtab.c (symtab_node::binds_to_current_def_p): Also accept symbols\n+\tdefined in other partition.\n+\n+2020-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vectorizable_live_operation): Adjust\n+\tdominance query.\n+\n+2020-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97482\n+\t* tree-data-ref.c (split_constant_offset_1): Handle\n+\ttrivial conversions better.\n+\t* fold-const.c (convert_to_ptrofftype_loc): Elide conversion\n+\tif the offset is already ptrofftype_p.\n+\n+2020-10-15  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/97295\n+\t* profile-count.c (profile_count::to_frequency): Move part of\n+\tgcc_assert to STATIC_ASSERT.\n+\t* regs.h (REG_FREQ_FROM_BB): Do not use count.to_frequency for\n+\ta function that does not have count_max initialized.\n+\n+2020-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* params.opt (-param-ipa-jump-function-lookups=): Add full stop at\n+\tthe end of the parameter description.\n+\n+2020-10-15  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_cpu_tables): New.\n+\t(riscv_arch_str): Return empty string if current_subset_list\n+\tis NULL.\n+\t(riscv_find_cpu): New.\n+\t(riscv_handle_option): Verify option value of -mcpu.\n+\t(riscv_expand_arch): Using std::string.\n+\t(riscv_default_mtune): New.\n+\t(riscv_expand_arch_from_cpu): Ditto.\n+\t* config/riscv/riscv-cores.def: New.\n+\t* config/riscv/riscv-protos.h (riscv_find_cpu): New.\n+\t(riscv_cpu_info): New.\n+\t* config/riscv/riscv.c (riscv_tune_info): Rename ...\n+\t(riscv_tune_param): ... to this.\n+\t(riscv_cpu_info): Rename ...\n+\t(riscv_tune_info): ... to this.\n+\t(tune_info): Rename ...\n+\t(tune_param): ... to this.\n+\t(rocket_tune_info): Update data type name.\n+\t(sifive_7_tune_info): Ditto.\n+\t(optimize_size_tune_info): Ditto.\n+\t(riscv_cpu_info_table): Rename ...\n+\t(riscv_tune_info_table): ... to this.\n+\t(riscv_parse_cpu): Rename ...\n+\t(riscv_parse_tune): ... to this, and translate valid -mcpu option to\n+\t-mtune option.\n+\t(riscv_rtx_costs): Rename tune_info to tune_param.\n+\t(riscv_class_max_nregs): Ditto.\n+\t(riscv_memory_move_cost): Ditto.\n+\t(riscv_init_machine_status): Use value of -mcpu if -mtune is not\n+\tgiven, and rename tune_info to tune_param.\n+\t* config/riscv/riscv.h (riscv_expand_arch_from_cpu): New.\n+\t(riscv_default_mtune): Ditto.\n+\t(EXTRA_SPEC_FUNCTIONS): Add riscv_expand_arch_from_cpu and\n+\triscv_default_mtune.\n+\t(OPTION_DEFAULT_SPECS): Handle default value of -march/-mabi.\n+\t(DRIVER_SELF_SPECS): Expand -march from -mcpu if -march is not\n+\tgiven.\n+\t* config/riscv/riscv.opt (-mcpu): New option.\n+\t* config/riscv/t-riscv ($(common_out_file)): Add\n+\triscv-cores.def to dependency.\n+\t* doc/invoke.texi (RISC-V Option): Add -mcpu, and update the\n+\tdescription of default value for -mtune and -march.\n+\n+2020-10-15  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect HRESET.\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_HRESET_SET,\n+\tOPTION_MASK_ISA2_HRESET_UNSET): New macros.\n+\t(ix86_handle_option): Handle -mhreset.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n+\tAdd FEATURE_HRESET.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAMES_TABLE_ENTRY\n+\tfor hreset.\n+\t* config.gcc: Add hresetintrin.h\n+\t* config/i386/hresetintrin.h: New header file.\n+\t* config/i386/x86gprintrin.h: Include hresetintrin.h.\n+\t* config/i386/cpuid.h (bit_HRESET): New.\n+\t* config/i386/i386-builtin.def: Add new builtin.\n+\t* config/i386/i386-expand.c (ix86_expand_builtin):\n+\tHandle new builtin.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__HRESET__.\n+\t* config/i386/i386-options.c (isa2_opts): Add -mhreset.\n+\t(ix86_valid_target_attribute_inner_p): Handle hreset.\n+\t* config/i386/i386.h (TARGET_HRESET, TARGET_HRESET_P,\n+\tPTA_HRESET): New.\n+\t(PTA_ALDERLAKE): Add PTA_HRESET.\n+\t* config/i386/i386.opt: Add option -mhreset.\n+\t* config/i386/i386.md (UNSPECV_HRESET): New unspec.\n+\t(hreset): New define_insn.\n+\t* doc/invoke.texi: Document -mhreset.\n+\t* doc/extend.texi: Document hreset.\n+\n+2020-10-15  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect UINTR.\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_UINTR_SET\n+\tOPTION_MASK_ISA2_UINTR_UNSET): New.\n+\t(ix86_handle_option): Handle -muintr.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n+\tAdd FEATURE_UINTR.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAMES_TABLE_ENTRY\n+\tfor uintr.\n+\t* config.gcc: Add uintrintrin.h to extra_headers.\n+\t* config/i386/uintrintrin.h: New.\n+\t* config/i386/cpuid.h (bit_UINTR): New.\n+\t* config/i386/i386-builtin-types.def: Add new types.\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/i386-builtins.c (ix86_init_mmx_sse_builtins): Add\n+\t__builtin_ia32_testui.\n+\t* config/i386/i386-builtins.h (ix86_builtins): Add\n+\tIX86_BUILTIN_TESTUI.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__UINTR__.\n+\t* config/i386/i386-expand.c (ix86_expand_special_args_builtin):\n+\tHandle UINT8_FTYPE_VOID.\n+\t(ix86_expand_builtin): Handle IX86_BUILTIN_TESTUI.\n+\t* config/i386/i386-options.c (isa2_opts): Add -muintr.\n+\t(ix86_valid_target_attribute_inner_p): Handle UINTR.\n+\t(ix86_option_override_internal): Add TARGET_64BIT check for UINTR.\n+\t* config/i386/i386.h (TARGET_UINTR, TARGET_UINTR_P, PTA_UINTR): New.\n+\t(PTA_SAPPHIRRAPIDS): Add PTA_UINTR.\n+\t* config/i386/i386.opt: Add -muintr.\n+\t* config/i386/i386.md\n+\t(define_int_iterator UINTR_UNSPECV): New.\n+\t(define_int_attr uintr_unspecv): New.\n+\t(uintr_<uintr_unspecv>, uintr_senduipi, testui):\n+\tNew define_insn patterns.\n+\t* config/i386/x86gprintrin.h: Include uintrintrin.h\n+\t* doc/invoke.texi: Document -muintr.\n+\t* doc/extend.texi: Document uintr.\n+\n 2020-10-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/97391"}, {"sha": "90be3bdbe8f21c20c7961b4cb09addfb567666bb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b85d5dc58359ba6f12407861bb50af5e503f89e4", "patch": "@@ -1 +1 @@\n-20201015\n+20201016"}, {"sha": "152eaab46307a83ac58fc5be2d34b4e257adde3c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b85d5dc58359ba6f12407861bb50af5e503f89e4", "patch": "@@ -1,3 +1,240 @@\n+2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch10.adb (Install_With_Clause): Fix implementation of Ada\n+\t2005 AI-262 by taking into account generic packages.  Minor\n+\treformatting.\n+\t* libgnat/a-cbhase.ads, libgnat/a-cbhase.adb: Remove use clause\n+\ton runtime unit spec.\n+\n+2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Scope_Depth_Value,\n+\tSet_Scope_Depth_Value): Add assertions on valid nodes and update\n+\tdocumentation accordingly.\n+\t(Write_Field22_Name): Sync with change in Scope_Depth_Value.\n+\t* sem_ch8.adb (Find_Direct_Name): Fix call to Scope_Depth_Value.\n+\n+2020-10-15  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Adding semantic support of\n+\tStandard to Default_Storage_Pool.\n+\t* freeze.adb (Freeze_Entity): If pragma Default_Storage_Pool\n+\tapplies and it is set to Standard then use the global pool as\n+\tthe associated storage pool of the access type.\n+\n+2020-10-15  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.ads (Might_Have_Tasks): Update documentation.\n+\t* exp_ch6.adb (Might_Have_Tasks): Return also true when the type\n+\thas tasks.\n+\t(Make_Build_In_Place_Call_In_Allocator): Code cleanup.\n+\t* exp_ch3.adb (Ensure_Activation_Chain_And_Master,\n+\tExpand_N_Full_Type_Declaration, Expand_N_Object_Declaration):\n+\tCode cleanup.\n+\n+2020-10-15  Steve Baird  <baird@adacore.com>\n+\n+\t* checks.adb (Apply_Predicate_Check): Generate \"infinite\n+\trecursion\" warning message even if run-time predicate checking\n+\tis disabled.\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): In testing\n+\twhether the returned expression is a function call, look for the\n+\tcase where the call has been transformed into a dereference of\n+\tan access value that designates the result of a function call.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Legality checking\n+\tfor a static expression is unaffected by assertion policy (and,\n+\tin particular, enabling/disabling of subtype predicates.  To get\n+\tthe right legality checking, we need to call\n+\tCheck_Expression_Against_Static_Predicate for a static\n+\texpression even if predicate checking is disabled for the given\n+\tpredicate-bearing subtype.  On the other hand, we don't want to\n+\tcall Make_Predicate_Check unless predicate checking is enabled.\n+\t* sem_ch7.adb (Uninstall_Declarations.Preserve_Full_Attributes):\n+\tPreserve the Predicates_Ignored attribute.\n+\t* sem_eval.adb (Check_Expression_Against_Static_Predicate):\n+\tPreviously callers ensured that this procedure was only called\n+\tif predicate checking was enabled; that is no longer the case,\n+\tso predicates-disabled case must be handled.\n+\t* sem_prag.adb (Analyze_Pragma): Fix bug in setting\n+\tPredicates_Ignored attribute in Predicate pragma case.\n+\n+2020-10-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Fixed_Point_Type): Do not scale the bounds\n+\tof a declared subtype using the 'Small of the type;  this is\n+\tdone during resolution of the bound itself, unlike what is done\n+\tfor the bounds of the base type, which are used to determine its\n+\trequired size. Previous code performed this scaling twice,\n+\tleading to meaningless values for such a subtype.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Bad_Predicated_Subtype_Use): Emit an\n+\tunconditional error, not a conditional warning.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Process_Subtype): Combine guards for\n+\tNull_Exclusion_Present in May_Have_Null_Exclusion; use this\n+\tcombined guard when checking AI-231.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Process_Subtype): Sync May_Have_Null_Exclusion\n+\twith assertion in Null_Exclusion_Present; clarify the scope of\n+\tlocal variables.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Fix style.\n+\t(Make_Index): Refactor to avoid repeated detection of subtype\n+\tindication; add comment.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Is_Acceptable_Dim3): Use Is_RTE to not pull CUDA\n+\tpackage unless necessary; rename local Tmp variable; iterate\n+\twith procedural Next.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Array_Type_Declaration): Refine type of a local\n+\tvariable.\n+\t(Make_Index): Simplify to avoid assignment with a type entity\n+\tand then backtracking by reassigning to Empty; remove excessive\n+\twhitespace.\n+\t* sem_ch9.adb (Analyze_Entry_Body): Remove extra parens.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Access_Subprogram_Declaration): Remove extra\n+\tparens.\n+\t(Make_Index): Remove excessive calls to Is_Type.\n+\n+2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_util.adb (Enter_Name): Remove unnecessary conditions in\n+\tEnter_Name that come from the beginning of times.\n+\n+2020-10-15  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Remove DSP part\n+\tof comment, and reformat.\n+\n+2020-10-15  Boris Yakobowski  <yakobowski@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Do not expand\n+\t'Initialized in CodePeer mode.\n+\n+2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch12.adb (Reset_Entity): Protect against malformed tree.\n+\n+2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch13.adb (Add_Predicates): Prevent analyzing twice the\n+\tsame pragma in case an inner package references the type with a\n+\tpredicate (as opposed to defining the type).\n+\n+2020-10-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-cfinve.adb (Int): Use subtype of Long_Long_Integer.\n+\t* libgnat/a-cofove.adb (Int): Likewise.\n+\t* libgnat/a-cgcaso.adb (T): Likewise.\n+\t* libgnat/a-cogeso.adb (T): Likewise.\n+\t* libgnat/g-debpoo.ads (Byte_Count): Use Long_Long_Integer'Size.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb: Replace list of N_Defining_... enumerations with\n+\tN_Entity.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.ads, sem_ch3.adb (Make_Index): Refined type of\n+\tparameter.\n+\t(Constrain_Index): Likewise.\n+\t(Array_Type_Declaration): Refine type of a local counter\n+\tvariable; remove a trivially useless initialization.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Recognize both\n+\tidentifiers and expanded names; use high-level Is_Scalar_Type\n+\tinstead of low-level membership test.\n+\n+2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Intrinsic_Call, Fold_Shift): Add support\n+\tfor Shift_Right_Arithmetic and for signed integers.\n+\t* exp_ch4.adb (Expand_N_Op_Rotate_Left,\n+\tExpand_N_Op_Rotate_Right, Expand_N_Op_Shift_Left,\n+\tExpand_N_Op_Shift_Right_Arithmetic): Minor reformatting and code\n+\tcleanup to ensure a consistent handling. Update comments and add\n+\tassertion.\n+\n+2020-10-15  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Visible_Component): Enable this code for task\n+\tand protected types, as well as record and private types.\n+\t* sem_ch13.ads (Replace_Type_References_Generic): Update\n+\tcomment.  Move the efficiency comment into the body, because\n+\tit's about the implementation.\n+\n+2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* par-ch13.adb (Get_Aspect_Specifications): Generate a warning\n+\trather than an error on unknown aspects unless -gnatd2 is used.\n+\t(Aspect_Specifications_Present): Improve detection of unknown\n+\taspects.\n+\t* debug.adb (Debug_Flag_2): Update document.\n+\n+2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): Do not try to inline intrinsic\n+\tcalls.\n+\n+2020-10-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_N_Aggregate): A record aggregate requires\n+\ta non-private type.\n+\t* sem_ch13.adb (Valid_Assign_Indexed): New subprogram local to\n+\tResolve_Aspect_Aggregate, to handle the case when the\n+\tcorresponding name appearing in the aspect specification for an\n+\tindexed aggregate is an overloaded operation.\n+\t* libgnat/a-convec.ads, libgnat/a-convec.adb,\n+\tlibgnat/a-coinve.ads, libgnat/a-coinve.adb,\n+\tlibgnat/a-cobove.ads, libgnat/a-cobove.adb,\n+\tlibgnat/a-cdlili.ads, libgnat/a-cdlili.adb,\n+\tlibgnat/a-cbdlli.ads, libgnat/a-cbdlli.adb,\n+\tlibgnat/a-cohama.ads, libgnat/a-cihama.ads,\n+\tlibgnat/a-cbhama.ads, libgnat/a-cborma.ads,\n+\tlibgnat/a-ciorma.ads, libgnat/a-coorma.ads,\n+\tlibgnat/a-cihase.ads, libgnat/a-cohase.ads,\n+\tlibgnat/a-cbhase.ads, libgnat/a-cborse.ads,\n+\tlibgnat/a-ciorse.ads, libgnat/a-coorse.ads: Add Ada_2020 aspect\n+\tAggregate to types declared in standard containers, as well as\n+\tnew subprograms where required.\n+\n+2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/g-arrspl.ads, libgnat/g-arrspl.adb (Create,\n+\tFirst_Cursor, Advance, Has_Element): New.\n+\n+2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl: Add target pair for interfac.ads.\n+\t* libgnat/interfac.ads: Add a comment.\n+\t* libgnat/interfac__2020.ads: New, used for bootstrap purposes.\n+\t* sem_util.adb (Is_Static_Function): Always return False for pre\n+\tAda 2020 to e.g. ignore the Static aspect in Interfaces for\n+\tAda < 2020.\n+\n+2020-10-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Remove_Side_Effects): Move special-casing for\n+\tGNATprove to be applied to all object declarations.\n+\n 2020-10-12  Alexandre Oliva  <oliva@adacore.com>\n \n \t* libgnat/a-ngelfu.ads (Sin, Cos): Make the single-argument"}, {"sha": "b746f47f70255afbe97dcd04346d002061a7144f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b85d5dc58359ba6f12407861bb50af5e503f89e4", "patch": "@@ -1,3 +1,20 @@\n+2020-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95844\n+\t* decl.c (copy_fn_p): Return false for a function that is neither a\n+\tconstructor nor an assignment operator.\n+\t(move_signature_fn_p): Likewise.\n+\n+2020-10-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97406\n+\tPR c++/85901\n+\t* cxx-pretty-print.c (pp_cxx_type_specifier_seq): Handle OFFSET_TYPE.\n+\t(cxx_pretty_printer::abstract_declarator): Fix the printing of ')'.\n+\t(cxx_pretty_printer::direct_abstract_declarator): Handle OFFSET_TYPE.\n+\t(cxx_pretty_printer::type_id): Likewise.  Print the abstract declarator\n+\tfor pointers-to-members.\n+\n 2020-10-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/97358"}, {"sha": "e81075bf2d626009f3074cc12875bd93f511d692", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b85d5dc58359ba6f12407861bb50af5e503f89e4", "patch": "@@ -1,3 +1,7 @@\n+2020-10-15  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Fix the coarray fndecls.\n+\n 2020-10-14  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/97390"}, {"sha": "16cb8f886b81afa27b78b4a9d9fec47cac1d507f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85d5dc58359ba6f12407861bb50af5e503f89e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b85d5dc58359ba6f12407861bb50af5e503f89e4", "patch": "@@ -1,3 +1,127 @@\n+2020-10-15  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/builtins-1-p9-runnable.c: Adjust for big endian.\n+\t* gcc.target/powerpc/builtins-7-p9-runnable.c: Same.\n+\n+2020-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95844\n+\t* g++.dg/cpp2a/spaceship-eq10.C: New test.\n+\n+2020-10-15  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/builtins-5-p9-runnable.c: Require lp64.\n+\t* gcc.target/powerpc/builtins-msum-runnable.c: Require int128.\n+\t* gcc.target/powerpc/float128-cmp2-runnable.c: Require float128.\n+\t* gcc.target/powerpc/fold-vec-extract-double.p9.c: Require lp64.\n+\n+2020-10-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97406\n+\tPR c++/85901\n+\t* g++.dg/diagnostic/ptrtomem1.C: New test.\n+\t* g++.dg/diagnostic/ptrtomem2.C: New test.\n+\n+2020-10-15  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/atomic/c11-atomic-exec-6.c: Xfail execution for nvptx.\n+\t* gcc.dg/atomic/c11-atomic-exec-7.c: Same.\n+\t* gcc.dg/atomic/stdatomic-op-5.c: Same.\n+\n+2020-10-15  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/97436\n+\t* gcc.target/nvptx/atomic_fetch-3.c: Remove.\n+\n+2020-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-52.c: New testcase.\n+\n+2020-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97482\n+\t* gcc.dg/vect/pr97428.c: New testcase.\n+\n+2020-10-15  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/tree-ssa/pr84512.c: Remove xfail for nvptx.\n+\n+2020-10-15  Tom de Vries  <tdevries@suse.de>\n+\n+\t* c-c++-common/ident-0b.c: Require effective target ident_directive.\n+\n+2020-10-15  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.c-torture/compile/limits-externdecl.c: Remove dg-skip-if for\n+\tnvptx.\n+\n+2020-10-15  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/attr-alloc_size-11.c: Don't xfail for nvptx.\n+\t* gcc.dg/tree-ssa/20040204-1.c: Same.\n+\n+2020-10-15  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.c-torture/execute/pr68185.c: Remove dg-skip-if for nvptx.\n+\n+2020-10-15  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.c-torture/execute/981019-1.c: Remove dg-skip-if for nvptx.\n+\n+2020-10-15  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.c-torture/compile/pr42717.c: Remove nvptx xfail.\n+\t* gcc.c-torture/compile/pr61684.c: Same.\n+\t* gcc.c-torture/execute/pr20601-1.c: Same.\n+\t* gcc.c-torture/execute/pr52129.c: Same.\n+\t* gcc.c-torture/execute/pr59221.c: Same.\n+\t* gcc.dg/pr68671.c: Same.\n+\n+2020-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/ipa/modref-1.c: Remove space between param offset: and number\n+\tin scan-ipa-dump.\n+\t(b): Declare return type to void.\n+\t(main): Declare return type to int.  Change c to array of 3 chars.\n+\t* gcc.dg/tree-ssa/modref-4.c: Remove space between param offset: and\n+\tnumber in scan-ipa-dump.  Use modref1 instead of modref2.\n+\t(b): Declare return type to void.\n+\t(main): Declare return type to int.  Change c to array of 3 chars.\n+\n+2020-10-15  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/mcpu-1.c: New.\n+\t* gcc.target/riscv/mcpu-2.c: Ditto.\n+\t* gcc.target/riscv/mcpu-3.c: Ditto.\n+\t* gcc.target/riscv/mcpu-4.c: Ditto.\n+\t* gcc.target/riscv/mcpu-5.c: Ditto.\n+\t* gcc.target/riscv/mcpu-6.c: Ditto.\n+\t* gcc.target/riscv/mcpu-7.c: Ditto.\n+\n+2020-10-15  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/hreset-1.c: New test.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* gcc.target/i386/x86gprintrin-1.c: Add -mhreset.\n+\t* gcc.target/i386/x86gprintrin-2.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-3.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-4.c: Add mhreset.\n+\t* gcc.target/i386/x86gprintrin-5.c: Ditto.\n+\n+2020-10-15  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* gcc.target/i386/uintr-1.c: New test.\n+\t* gcc.target/i386/uintr-2.c: Ditto.\n+\t* gcc.target/i386/uintr-3.c: Ditto.\n+\t* gcc.target/i386/uintr-4.c: Ditto.\n+\t* gcc.target/i386/uintr-5.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-1.c: Add -muintr for 64bit target.\n+\t* gcc.target/i386/x86gprintrin-2.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-3.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-4.c: Add muintr for 64bit target.\n+\t* gcc.target/i386/x86gprintrin-5.c: Ditto.\n+\n 2020-10-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/97391"}, {"sha": "34aa326987c91cd76a92f141b1c97c83226dd032", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85d5dc58359ba6f12407861bb50af5e503f89e4/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85d5dc58359ba6f12407861bb50af5e503f89e4/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b85d5dc58359ba6f12407861bb50af5e503f89e4", "patch": "@@ -1,3 +1,8 @@\n+2020-10-15  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* libgomp.texi (omp_get_max_active_levels): Modify description.\n+\t(omp_get_supported_active_levels): Make descriptions consistent.\n+\n 2020-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* libgomp.texi (omp_get_supported_active_levels): Fix a typo."}, {"sha": "30bb217979cb60a6e51ac9360318f47a70f69565", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85d5dc58359ba6f12407861bb50af5e503f89e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85d5dc58359ba6f12407861bb50af5e503f89e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b85d5dc58359ba6f12407861bb50af5e503f89e4", "patch": "@@ -1,3 +1,8 @@\n+2020-10-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/concepts: Fix typos in copyright notice.\n+\t* include/std/ranges: Likewise.\n+\n 2020-10-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/97415"}]}