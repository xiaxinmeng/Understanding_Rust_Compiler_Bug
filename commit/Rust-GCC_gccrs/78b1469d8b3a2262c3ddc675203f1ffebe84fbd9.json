{"sha": "78b1469d8b3a2262c3ddc675203f1ffebe84fbd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiMTQ2OWQ4YjNhMjI2MmMzZGRjNjc1MjAzZjFmZmViZTg0ZmJkOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-02-06T07:39:24Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-02-06T07:39:24Z"}, "message": "re PR middle-end/60013 (Build of 176.gcc from CPU2000 loops in cc1 starting with r207231)\n\n\n\tPR middle-end/60013\n\t* ipa-inline-analysis.c (compute_bb_predicates): Ensure monotonicity\n\tof the dataflow.\n\t* gcc.dg/pr60013.c: New testcase.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r207529", "tree": {"sha": "2a6213d1768395162d549755d0b642ed0b849621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a6213d1768395162d549755d0b642ed0b849621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9/comments", "author": null, "committer": null, "parents": [{"sha": "d24d2cef4f3d90972d22e0812732d21fdd7f87fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24d2cef4f3d90972d22e0812732d21fdd7f87fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24d2cef4f3d90972d22e0812732d21fdd7f87fc"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "83d021a4748374bfb1047b9a3c4698c573bea5f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78b1469d8b3a2262c3ddc675203f1ffebe84fbd9", "patch": "@@ -1,3 +1,10 @@\n+2014-02-05  Jan Hubicka  <hubicka@ucw.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/60013\n+\t* ipa-inline-analysis.c (compute_bb_predicates): Ensure monotonicity\n+\tof the dataflow.\n+\n 2014-02-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const): Change"}, {"sha": "6cd5dc1c2e57be49e8670b908b8af213c5f7e0c8", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=78b1469d8b3a2262c3ddc675203f1ffebe84fbd9", "patch": "@@ -310,7 +310,7 @@ add_clause (conditions conditions, struct predicate *p, clause_t clause)\n   if (false_predicate_p (p))\n     return;\n \n-  /* No one should be sily enough to add false into nontrivial clauses.  */\n+  /* No one should be silly enough to add false into nontrivial clauses.  */\n   gcc_checking_assert (!(clause & (1 << predicate_false_condition)));\n \n   /* Look where to insert the clause.  At the same time prune out\n@@ -1035,7 +1035,7 @@ inline_node_removal_hook (struct cgraph_node *node,\n   memset (info, 0, sizeof (inline_summary_t));\n }\n \n-/* Remap predicate P of former function to be predicate of duplicated functoin.\n+/* Remap predicate P of former function to be predicate of duplicated function.\n    POSSIBLE_TRUTHS is clause of possible truths in the duplicated node,\n    INFO is inline summary of the duplicated node.  */\n \n@@ -1887,8 +1887,15 @@ compute_bb_predicates (struct cgraph_node *node,\n \t\t}\n \t      else if (!predicates_equal_p (&p, (struct predicate *) bb->aux))\n \t\t{\n-\t\t  done = false;\n-\t\t  *((struct predicate *) bb->aux) = p;\n+\t\t  /* This OR operation is needed to ensure monotonous data flow\n+\t\t     in the case we hit the limit on number of clauses and the\n+\t\t     and/or operations above give approximate answers.  */\n+\t\t  p = or_predicates (summary->conds, &p, (struct predicate *)bb->aux);\n+\t          if (!predicates_equal_p (&p, (struct predicate *) bb->aux))\n+\t\t    {\n+\t\t      done = false;\n+\t\t      *((struct predicate *) bb->aux) = p;\n+\t\t    }\n \t\t}\n \t    }\n \t}"}, {"sha": "efa42473a10d464d6025f94075001f44e5e0936e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78b1469d8b3a2262c3ddc675203f1ffebe84fbd9", "patch": "@@ -1,3 +1,9 @@\n+2014-02-05  Jan Hubicka  <hubicka@ucw.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/60013\n+\t* gcc.dg/pr60013.c: New testcase.\n+\n 2014-02-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.dg/vmx/sum2s.c: New."}, {"sha": "5c2ec517d655bed0aad6ba619a553d6a4cdc98e0", "filename": "gcc/testsuite/gcc.dg/pr60013.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60013.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b1469d8b3a2262c3ddc675203f1ffebe84fbd9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60013.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60013.c?ref=78b1469d8b3a2262c3ddc675203f1ffebe84fbd9", "patch": "@@ -0,0 +1,47 @@\n+/* PR ipa/60013 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef long int jmp_buf[64];\n+extern int _setjmp (jmp_buf) __attribute__ ((__nothrow__));\n+struct S { int a, b, c; };\n+extern struct S *baz (struct S *);\n+static jmp_buf j;\n+\n+static inline int\n+bar (int b, int d)\n+{\n+  return (b & d) < 0;\n+}\n+\n+struct S *\n+foo (int a, struct S *b, struct S *c, struct S *d)\n+{\n+  if (b->a == 0)\n+    {\n+      switch (a)\n+\t{\n+\tcase 8:\n+\t  return baz (b);\n+\tcase 7:\n+\t  bar (b->c, c->b);\n+\t  return 0;\n+\tcase 6:\n+\tcase 5:\n+\tcase 4:\n+\t  return baz (c);\n+\tcase 3:\n+\tcase 2:\n+\t  return baz (d);\n+\t}\n+      return 0;\n+    }\n+  if (b->a == 1)\n+    {\n+      if (baz (c))\n+\treturn c;\n+      else if (_setjmp (j))\n+\tbaz (b);\n+    }\n+  return 0;\n+}"}]}