{"sha": "3ba9051e4406f0a996c1087ca1c9305e31790738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JhOTA1MWU0NDA2ZjBhOTk2YzEwODdjYTFjOTMwNWUzMTc5MDczOA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-11-30T16:32:24Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-11-30T16:32:24Z"}, "message": "Fix testsuite failures caused by the patch implementing LWG 2534.\n\n* include/std/istream (__is_convertible_to_basic_istream):\nChange the return types of __check, introduce istream_type.\n(operator>>(_Istream&&, _Tp&&)):\nUse __is_convertible_to_basic_istream::istream_type as the return type.\n* include/std/ostream (__is_convertible_to_basic_ostream):\nChange the return types of __check, introduce ostream_type.\n(operator>>(_Ostream&&, _Tp&&)):\nUse __is_convertible_to_basic_ostream::ostream_type as the return type.\n\nFrom-SVN: r243036", "tree": {"sha": "65ec96857ca13f68065af03db2ff3bff37f43652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65ec96857ca13f68065af03db2ff3bff37f43652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ba9051e4406f0a996c1087ca1c9305e31790738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba9051e4406f0a996c1087ca1c9305e31790738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ba9051e4406f0a996c1087ca1c9305e31790738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba9051e4406f0a996c1087ca1c9305e31790738/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917b47be741ba60bec25b75fb0e55e9fdd908f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917b47be741ba60bec25b75fb0e55e9fdd908f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917b47be741ba60bec25b75fb0e55e9fdd908f94"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "6d3bfcc542b10cf5b89e6a0ffe8dc4dacb531593", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba9051e4406f0a996c1087ca1c9305e31790738/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba9051e4406f0a996c1087ca1c9305e31790738/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3ba9051e4406f0a996c1087ca1c9305e31790738", "patch": "@@ -1,3 +1,15 @@\n+2016-11-30  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tFix testsuite failures caused by the patch implementing LWG 2534.\n+\t* include/std/istream (__is_convertible_to_basic_istream):\n+\tChange the return types of __check, introduce istream_type.\n+\t(operator>>(_Istream&&, _Tp&&)):\n+\tUse __is_convertible_to_basic_istream::istream_type as the return type.\n+\t* include/std/ostream (__is_convertible_to_basic_ostream):\n+\tChange the return types of __check, introduce ostream_type.\n+\t(operator>>(_Ostream&&, _Tp&&)):\n+\tUse __is_convertible_to_basic_ostream::ostream_type as the return type.\n+\n 2016-11-30  Tim Shen  <timshen@google.com>\n \n \t* include/bits/shared_ptr_base.h"}, {"sha": "319e2264e796dd5290cc84c66483fdb63b173963", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba9051e4406f0a996c1087ca1c9305e31790738/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba9051e4406f0a996c1087ca1c9305e31790738/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=3ba9051e4406f0a996c1087ca1c9305e31790738", "patch": "@@ -913,11 +913,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_convertible_to_basic_istream\n     {\n       template<typename _Ch, typename _Up>\n-      static true_type __check(basic_istream<_Ch, _Up>*);\n+      static basic_istream<_Ch, _Up>& __check(basic_istream<_Ch, _Up>*);\n \n-      static false_type __check(void*);\n+      static void __check(void*);\n     public:\n-      using type = decltype(__check(declval<_Tp*>()));\n+      using istream_type =\n+\tdecltype(__check(declval<typename remove_reference<_Tp>::type*>()));\n+      using type = __not_<is_same<istream_type, void>>;\n       constexpr static bool value = type::value;\n   };\n \n@@ -946,10 +948,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Istream, typename _Tp>\n     inline\n     typename enable_if<__and_<__not_<is_lvalue_reference<_Istream>>,\n-\t\t\t      __is_convertible_to_basic_istream<\n-\t\t\t\ttypename remove_reference<_Istream>::type>,\n+\t\t\t      __is_convertible_to_basic_istream<_Istream>,\n \t\t\t      __is_extractable<_Istream&, _Tp&&>>::value,\n-\t\t       _Istream&>::type\n+\t\t       typename __is_convertible_to_basic_istream<\n+\t\t\t _Istream>::istream_type>::type\n     operator>>(_Istream&& __is, _Tp&& __x)\n     {\n       __is >> std::forward<_Tp>(__x);"}, {"sha": "70fd10ba954336394438e4d55105576d61449246", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba9051e4406f0a996c1087ca1c9305e31790738/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba9051e4406f0a996c1087ca1c9305e31790738/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=3ba9051e4406f0a996c1087ca1c9305e31790738", "patch": "@@ -617,11 +617,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_convertible_to_basic_ostream\n   {\n     template<typename _Ch, typename _Up>\n-    static true_type __check(basic_ostream<_Ch, _Up>*);\n+    static basic_ostream<_Ch, _Up>& __check(basic_ostream<_Ch, _Up>*);\n \n-    static false_type __check(void*);\n+    static void __check(void*);\n   public:\n-    using type = decltype(__check(declval<_Tp*>()));\n+    using ostream_type =\n+      decltype(__check(declval<typename remove_reference<_Tp>::type*>()));\n+    using type = __not_<is_same<ostream_type, void>>;\n     constexpr static bool value = type::value;\n   };\n \n@@ -647,11 +649,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Ostream, typename _Tp>\n     inline\n     typename enable_if<__and_<__not_<is_lvalue_reference<_Ostream>>,\n-\t\t\t      __is_convertible_to_basic_ostream<\n-\t\t\t\ttypename remove_reference<_Ostream>::type>,\n+\t\t\t      __is_convertible_to_basic_ostream<_Ostream>,\n \t\t\t      __is_insertable<_Ostream&, const _Tp&>>::value,\n-\t\t       _Ostream&>::type\n-\t\t\t\t      //basic_ostream<_CharT, _Traits>&\n+\t\t       typename __is_convertible_to_basic_ostream<\n+\t\t\t _Ostream>::ostream_type>::type\n     operator<<(_Ostream&& __os, const _Tp& __x)\n     {\n       __os << __x;"}]}