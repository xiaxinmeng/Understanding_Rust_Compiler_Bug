{"sha": "cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y5ZTk5NTlkMWE1ZThjN2RkYjUwNmY2ODAxN2I0ZjljOTI5MmI5NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-11-04T21:46:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-11-04T21:46:07Z"}, "message": "re PR c++/50608 (cannot apply 'offsetof' to a non-constant address)\n\n2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n\n\tPR c++/50608\n\t* c-parser.c (c_parser_postfix_expression) <RID_OFFSETOF>: Adjust call\n\tto fold_offsetof.\n\t* c-typeck.c (build_unary_op) <ADDR_EXPR>: Call fold_offsetof_1.\nc-family/\n\t* c-common.c (c_fully_fold_internal) <ADDR_EXPR>: Call fold_offsetof_1.\n\t(fold_offsetof_1): Make global. \u00a0Remove STOP_REF argument and adjust.\n\t<INDIRECT_REF>: Return the argument.\n\t<ARRAY_REF>: Remove special code for negative offset.\n\tCall fold_build_pointer_plus instead of size_binop.\n\t(fold_offsetof): Remove STOP_REF argument and adjust.\n\t* c-common.h (fold_offsetof_1): Declare.\n\t(fold_offsetof): Remove STOP_REF argument.\ncp/\n\t* semantics.c (finish_offsetof): Adjust call to fold_offsetof.\n\t* typeck.c (cp_build_addr_expr_1): Call fold_offsetof_1.\n\nFrom-SVN: r180986", "tree": {"sha": "15bbae4a0d50f8d41bd44c607cad67495a7c994c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15bbae4a0d50f8d41bd44c607cad67495a7c994c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/comments", "author": null, "committer": null, "parents": [{"sha": "c62c54419cf1bcdebbe2313b509e1892b85832d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62c54419cf1bcdebbe2313b509e1892b85832d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62c54419cf1bcdebbe2313b509e1892b85832d0"}], "stats": {"total": 121, "additions": 75, "deletions": 46}, "files": [{"sha": "c0bdc1a1d234b49778b1d134ad5769d6f7a1bc01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -1,16 +1,23 @@\n-2011-11-05  Alan Modra  <amodra@gmail.com>\n+2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR c++/50608\n+\t* c-parser.c (c_parser_postfix_expression) <RID_OFFSETOF>: Adjust call\n+\tto fold_offsetof.\n+\t* c-typeck.c (build_unary_op) <ADDR_EXPR>: Call fold_offsetof_1.\n+\n+2011-11-04  Alan Modra  <amodra@gmail.com>\n \n \t* reload1.c (gen_reload): Don't use REGNO on SUBREGs.\n \t* print-rtl.c (print_rtx): Don't segfault on negative regno.\n \n-2011-11-03  David S. Miller  <davem@davemloft.net>\n+2011-11-04  David S. Miller  <davem@davemloft.net>\n \n \tPR target/49965\n \t* config/sparc/sparc.c (sparc_expand_conditional_move): Handle the\n \tfact that sparc_emit_float_lib_cmp modifies the comparison in\n \toperands[1].\n \n-2011-11-05\tRalf Cors\u00e9pius <ralf.corsepius@rtems.org>\n+2011-11-04  Ralf Cors\u00e9pius <ralf.corsepius@rtems.org>\n \n \t* config/lm32/t-rtems: New.\n \t* config.gcc (lm32-*-rtems*): Add t-rtems."}, {"sha": "d7ff089d6ba5f2ec6631079fd9e8418719a32fda", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -1,3 +1,15 @@\n+2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR c++/50608\n+\t* c-common.c (c_fully_fold_internal) <ADDR_EXPR>: Call fold_offsetof_1.\n+\t(fold_offsetof_1): Make global.  Remove STOP_REF argument and adjust.\n+\t<INDIRECT_REF>: Return the argument.\n+\t<ARRAY_REF>: Remove special code for negative offset.\n+\tCall fold_build_pointer_plus instead of size_binop.\n+\t(fold_offsetof): Remove STOP_REF argument and adjust.\n+\t* c-common.h (fold_offsetof_1): Declare.\n+\t(fold_offsetof): Remove STOP_REF argument.\n+\n 2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50810"}, {"sha": "df8dda4a13b6a1ff5ae03431dd586780c9a7cacc", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -1274,12 +1274,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t  && (op1 = get_base_address (op0)) != NULL_TREE\n \t  && TREE_CODE (op1) == INDIRECT_REF\n \t  && TREE_CONSTANT (TREE_OPERAND (op1, 0)))\n-\t{\n-\t  tree offset = fold_offsetof (op0, op1);\n-\t  op1\n-\t    = fold_convert_loc (loc, TREE_TYPE (expr), TREE_OPERAND (op1, 0));\n-\t  ret = fold_build_pointer_plus_loc (loc, op1, offset);\n-\t}\n+\tret = fold_convert_loc (loc, TREE_TYPE (expr), fold_offsetof_1 (op0));\n       else if (op0 != orig_op0 || in_init)\n \tret = in_init\n \t  ? fold_build1_initializer_loc (loc, code, TREE_TYPE (expr), op0)\n@@ -8538,20 +8533,15 @@ c_common_to_target_charset (HOST_WIDE_INT c)\n     return uc;\n }\n \n-/* Build the result of __builtin_offsetof.  EXPR is a nested sequence of\n-   component references, with STOP_REF, or alternatively an INDIRECT_REF of\n-   NULL, at the bottom; much like the traditional rendering of offsetof as a\n-   macro.  Returns the folded and properly cast result.  */\n+/* Fold an offsetof-like expression.  EXPR is a nested sequence of component\n+   references with an INDIRECT_REF of a constant at the bottom; much like the\n+   traditional rendering of offsetof as a macro.  Return the folded result.  */\n \n-static tree\n-fold_offsetof_1 (tree expr, tree stop_ref)\n+tree\n+fold_offsetof_1 (tree expr)\n {\n-  enum tree_code code = PLUS_EXPR;\n   tree base, off, t;\n \n-  if (expr == stop_ref && TREE_CODE (expr) != ERROR_MARK)\n-    return size_zero_node;\n-\n   switch (TREE_CODE (expr))\n     {\n     case ERROR_MARK:\n@@ -8568,15 +8558,15 @@ fold_offsetof_1 (tree expr, tree stop_ref)\n \n     case NOP_EXPR:\n     case INDIRECT_REF:\n-      if (!integer_zerop (TREE_OPERAND (expr, 0)))\n+      if (!TREE_CONSTANT (TREE_OPERAND (expr, 0)))\n \t{\n \t  error (\"cannot apply %<offsetof%> to a non constant address\");\n \t  return error_mark_node;\n \t}\n-      return size_zero_node;\n+      return TREE_OPERAND (expr, 0);\n \n     case COMPONENT_REF:\n-      base = fold_offsetof_1 (TREE_OPERAND (expr, 0), stop_ref);\n+      base = fold_offsetof_1 (TREE_OPERAND (expr, 0));\n       if (base == error_mark_node)\n \treturn base;\n \n@@ -8594,21 +8584,14 @@ fold_offsetof_1 (tree expr, tree stop_ref)\n       break;\n \n     case ARRAY_REF:\n-      base = fold_offsetof_1 (TREE_OPERAND (expr, 0), stop_ref);\n+      base = fold_offsetof_1 (TREE_OPERAND (expr, 0));\n       if (base == error_mark_node)\n \treturn base;\n \n       t = TREE_OPERAND (expr, 1);\n-      if (TREE_CODE (t) == INTEGER_CST && tree_int_cst_sgn (t) < 0)\n-\t{\n-\t  code = MINUS_EXPR;\n-\t  t = fold_build1_loc (input_location, NEGATE_EXPR, TREE_TYPE (t), t);\n-\t}\n-      t = convert (sizetype, t);\n-      off = size_binop (MULT_EXPR, TYPE_SIZE_UNIT (TREE_TYPE (expr)), t);\n \n       /* Check if the offset goes beyond the upper bound of the array.  */\n-      if (code == PLUS_EXPR && TREE_CODE (t) == INTEGER_CST)\n+      if (TREE_CODE (t) == INTEGER_CST && tree_int_cst_sgn (t) >= 0)\n \t{\n \t  tree upbound = array_ref_up_bound (expr);\n \t  if (upbound != NULL_TREE\n@@ -8648,26 +8631,30 @@ fold_offsetof_1 (tree expr, tree stop_ref)\n \t\t}\n \t    }\n \t}\n+\n+      t = convert (sizetype, t);\n+      off = size_binop (MULT_EXPR, TYPE_SIZE_UNIT (TREE_TYPE (expr)), t);\n       break;\n \n     case COMPOUND_EXPR:\n       /* Handle static members of volatile structs.  */\n       t = TREE_OPERAND (expr, 1);\n       gcc_assert (TREE_CODE (t) == VAR_DECL);\n-      return fold_offsetof_1 (t, stop_ref);\n+      return fold_offsetof_1 (t);\n \n     default:\n       gcc_unreachable ();\n     }\n \n-  return size_binop (code, base, off);\n+  return fold_build_pointer_plus (base, off);\n }\n \n+/* Likewise, but convert it to the return type of offsetof.  */\n+\n tree\n-fold_offsetof (tree expr, tree stop_ref)\n+fold_offsetof (tree expr)\n {\n-  /* Convert back from the internal sizetype to size_t.  */\n-  return convert (size_type_node, fold_offsetof_1 (expr, stop_ref));\n+  return convert (size_type_node, fold_offsetof_1 (expr));\n }\n \n /* Warn for A ?: C expressions (with B omitted) where A is a boolean "}, {"sha": "7ecb57e5867d1ae53a77327283b9f22755c32bf8", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -956,7 +956,8 @@ extern bool c_dump_tree (void *, tree);\n \n extern void verify_sequence_points (tree);\n \n-extern tree fold_offsetof (tree, tree);\n+extern tree fold_offsetof_1 (tree);\n+extern tree fold_offsetof (tree);\n \n /* Places where an lvalue, or modifiable lvalue, may be required.\n    Used to select diagnostic messages in lvalue_error and"}, {"sha": "8db203ad6b38719d9e987d130ff269d4a66b677e", "filename": "gcc/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -6388,7 +6388,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t      c_parser_error (parser, \"expected identifier\");\n \t    c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t       \"expected %<)%>\");\n-\t    expr.value = fold_offsetof (offsetof_ref, NULL_TREE);\n+\t    expr.value = fold_offsetof (offsetof_ref);\n \t  }\n \t  break;\n \tcase RID_CHOOSE_EXPR:"}, {"sha": "46363c0a165468b081493f7dc7029cb0cea29131", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -3890,10 +3890,7 @@ build_unary_op (location_t location,\n       if (val && TREE_CODE (val) == INDIRECT_REF\n           && TREE_CONSTANT (TREE_OPERAND (val, 0)))\n \t{\n-\t  tree op0 = fold_offsetof (arg, val), op1;\n-\n-\t  op1 = fold_convert_loc (location, argtype, TREE_OPERAND (val, 0));\n-\t  ret = fold_build_pointer_plus_loc (location, op1, op0);\n+\t  ret = fold_convert_loc (location, argtype, fold_offsetof_1 (arg));\n \t  goto return_build_unary_op;\n \t}\n "}, {"sha": "ffb085c4d9e81a8df87d5db66d33a78411573015", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -1,3 +1,9 @@\n+2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR c++/50608\n+\t* semantics.c (finish_offsetof): Adjust call to fold_offsetof.\n+\t* typeck.c (cp_build_addr_expr_1): Call fold_offsetof_1.\n+\n 2011-11-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* typeck.c (build_indirect_ref): Use ATTRIBUTE_UNUSED."}, {"sha": "cebb7df2c3d403dd2d19fca134932035253dd5d2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -3568,7 +3568,7 @@ finish_offsetof (tree expr)\n       if (!complete_type_or_else (TREE_TYPE (object), object))\n \treturn error_mark_node;\n     }\n-  return fold_offsetof (expr, NULL_TREE);\n+  return fold_offsetof (expr);\n }\n \n /* Replace the AGGR_INIT_EXPR at *TP with an equivalent CALL_EXPR.  This"}, {"sha": "386f3b89d4815a32f134827be00ed5d0ae1c2728", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -4881,9 +4881,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       && TREE_CONSTANT (TREE_OPERAND (val, 0)))\n     {\n       tree type = build_pointer_type (argtype);\n-      tree op0 = fold_convert (type, TREE_OPERAND (val, 0));\n-      tree op1 = fold_offsetof (arg, val);\n-      return fold_build_pointer_plus (op0, op1);\n+      return fold_convert (type, fold_offsetof_1 (arg));\n     }\n \n   /* Handle complex lvalues (when permitted)"}, {"sha": "218a9d34a5924b1e901431463405f625114a7ec9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -1,3 +1,7 @@\n+2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* g++.dg/other/offsetof7.C: New test.\n+\n 2011-11-04  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* lib/gcc-dg.exp (gcc_force_conventional_output): New global"}, {"sha": "0ce2ee02aa8639907a2ae65c0581c16d70585a23", "filename": "gcc/testsuite/g++.dg/other/offsetof7.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof7.C?ref=cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/50608\n+// Testcase by <dberger@oubliette.org>\n+// { dg-do compile }\n+\n+struct A {\n+    int offset;\n+};\n+\n+struct B: public A {\n+};\n+\n+struct C {\n+    A a;\n+    B b;\n+};\n+\n+int fails = __builtin_offsetof (C, b.offset);"}]}