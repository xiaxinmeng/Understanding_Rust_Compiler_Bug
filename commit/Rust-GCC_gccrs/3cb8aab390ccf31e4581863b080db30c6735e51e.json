{"sha": "3cb8aab390ccf31e4581863b080db30c6735e51e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NiOGFhYjM5MGNjZjMxZTQ1ODE4NjNiMDgwZGIzMGM2NzM1ZTUxZQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-12-10T14:43:59Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-03-08T13:41:39Z"}, "message": "IBM Z: Fix usage of \"f\" constraint with long doubles\n\nAfter switching the s390 backend to store long doubles in vector\nregisters, \"f\" constraint broke when used with the former: long doubles\ncorrespond to TFmode, which in combination with \"f\" corresponds to\nhard regs %v0-%v15, however, asm users expect a %f0-%f15 pair.\n\nFix by using TARGET_MD_ASM_ADJUST hook to convert TFmode values to\nFPRX2mode and back.\n\ngcc/ChangeLog:\n\n2020-12-14  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* config/s390/s390.c (f_constraint_p): New function.\n\t(s390_md_asm_adjust): Implement TARGET_MD_ASM_ADJUST.\n\t(TARGET_MD_ASM_ADJUST): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-12-14  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/vector/long-double-asm-commutative.c: New\n\ttest.\n\t* gcc.target/s390/vector/long-double-asm-earlyclobber.c: New\n\ttest.\n\t* gcc.target/s390/vector/long-double-asm-in-out.c: New test.\n\t* gcc.target/s390/vector/long-double-asm-inout.c: New test.\n\t* gcc.target/s390/vector/long-double-asm-matching.c: New test.\n\t* gcc.target/s390/vector/long-double-asm-regmem.c: New test.\n\t* gcc.target/s390/vector/long-double-volatile-from-i64.c: New\n\ttest.", "tree": {"sha": "94ad54a15d2535fb4ebac9feee12414da40f4556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94ad54a15d2535fb4ebac9feee12414da40f4556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cb8aab390ccf31e4581863b080db30c6735e51e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb8aab390ccf31e4581863b080db30c6735e51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb8aab390ccf31e4581863b080db30c6735e51e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb8aab390ccf31e4581863b080db30c6735e51e/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6a62614a8ae4544770420416d1632d6c3d3f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6a62614a8ae4544770420416d1632d6c3d3f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a6a62614a8ae4544770420416d1632d6c3d3f6e"}], "stats": {"total": 190, "additions": 190, "deletions": 0}, "files": [{"sha": "de48271d6d4b5b393dde94a6f027ad4f0ee50d83", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3cb8aab390ccf31e4581863b080db30c6735e51e", "patch": "@@ -16708,6 +16708,89 @@ s390_shift_truncation_mask (machine_mode mode)\n   return mode == DImode || mode == SImode ? 63 : 0;\n }\n \n+/* Return TRUE iff CONSTRAINT is an \"f\" constraint, possibly with additional\n+   modifiers.  */\n+\n+static bool\n+f_constraint_p (const char *constraint)\n+{\n+  for (size_t i = 0, c_len = strlen (constraint); i < c_len;\n+       i += CONSTRAINT_LEN (constraint[i], constraint + i))\n+    {\n+      if (constraint[i] == 'f')\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+/* Implement TARGET_MD_ASM_ADJUST hook in order to fix up \"f\"\n+   constraints when long doubles are stored in vector registers.  */\n+\n+static rtx_insn *\n+s390_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &inputs,\n+\t\t    vec<machine_mode> &input_modes,\n+\t\t    vec<const char *> &constraints, vec<rtx> & /*clobbers*/,\n+\t\t    HARD_REG_SET & /*clobbered_regs*/)\n+{\n+  if (!TARGET_VXE)\n+    /* Long doubles are stored in FPR pairs - nothing to do.  */\n+    return NULL;\n+\n+  rtx_insn *after_md_seq = NULL, *after_md_end = NULL;\n+\n+  unsigned ninputs = inputs.length ();\n+  unsigned noutputs = outputs.length ();\n+  for (unsigned i = 0; i < noutputs; i++)\n+    {\n+      if (GET_MODE (outputs[i]) != TFmode)\n+\t/* Not a long double - nothing to do.  */\n+\tcontinue;\n+      const char *constraint = constraints[i];\n+      bool allows_mem, allows_reg, is_inout;\n+      bool ok = parse_output_constraint (&constraint, i, ninputs, noutputs,\n+\t\t\t\t\t &allows_mem, &allows_reg, &is_inout);\n+      gcc_assert (ok);\n+      if (!f_constraint_p (constraint))\n+\t/* Long double with a constraint other than \"=f\" - nothing to do.  */\n+\tcontinue;\n+      gcc_assert (allows_reg);\n+      gcc_assert (!is_inout);\n+      /* Copy output value from a FPR pair into a vector register.  */\n+      rtx fprx2 = gen_reg_rtx (FPRX2mode);\n+      push_to_sequence2 (after_md_seq, after_md_end);\n+      emit_insn (gen_fprx2_to_tf (outputs[i], fprx2));\n+      after_md_seq = get_insns ();\n+      after_md_end = get_last_insn ();\n+      end_sequence ();\n+      outputs[i] = fprx2;\n+    }\n+\n+  for (unsigned i = 0; i < ninputs; i++)\n+    {\n+      if (GET_MODE (inputs[i]) != TFmode)\n+\t/* Not a long double - nothing to do.  */\n+\tcontinue;\n+      const char *constraint = constraints[noutputs + i];\n+      bool allows_mem, allows_reg;\n+      bool ok = parse_input_constraint (&constraint, i, ninputs, noutputs, 0,\n+\t\t\t\t\tconstraints.address (), &allows_mem,\n+\t\t\t\t\t&allows_reg);\n+      gcc_assert (ok);\n+      if (!f_constraint_p (constraint))\n+\t/* Long double with a constraint other than \"f\" (or \"=f\" for inout\n+\t   operands) - nothing to do.  */\n+\tcontinue;\n+      gcc_assert (allows_reg);\n+      /* Copy input value from a vector register into a FPR pair.  */\n+      rtx fprx2 = gen_reg_rtx (FPRX2mode);\n+      emit_insn (gen_tf_to_fprx2 (fprx2, inputs[i]));\n+      inputs[i] = fprx2;\n+      input_modes[i] = FPRX2mode;\n+    }\n+\n+  return after_md_seq;\n+}\n+\n /* Initialize GCC target structure.  */\n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n@@ -17015,6 +17098,9 @@ s390_shift_truncation_mask (machine_mode mode)\n #undef TARGET_MAX_ANCHOR_OFFSET\n #define TARGET_MAX_ANCHOR_OFFSET 0xfff\n \n+#undef TARGET_MD_ASM_ADJUST\n+#define TARGET_MD_ASM_ADJUST s390_md_asm_adjust\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "59d807c54b3dec3c28777e9dca7d389d118b418b", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-asm-commutative.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-commutative.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-commutative.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-commutative.c?ref=3cb8aab390ccf31e4581863b080db30c6735e51e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+int\n+main (void)\n+{\n+  long double res, x = 40., y = 2.;\n+  asm(\"lxr\\t%0,%1\\n\"\n+      \"\\taxbr\\t%0,%2\"\n+      : \"=&f\"(res)\n+      : \"%f\"(x), \"f\"(y));\n+  assert (res == 42.);\n+}"}, {"sha": "5dd027596def9163ac274c59239a670510fd5dd9", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-asm-earlyclobber.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-earlyclobber.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-earlyclobber.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-earlyclobber.c?ref=3cb8aab390ccf31e4581863b080db30c6735e51e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+int\n+main (void)\n+{\n+  long double res, x = 0x1.0000000000001p+0L,\n+\t\t   exp = 1.00000000000000011102230246251564788e+0L;\n+  asm(\"lzxr\\t%0\\n\"\n+      \"\\tsqxbr\\t%0,%1\"\n+      : \"=&f\"(res)\n+      : \"f\"(x));\n+  assert (res == exp);\n+}"}, {"sha": "27d447f6898b5c8de0a94a698794d4d31e68e621", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-asm-in-out.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-in-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-in-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-in-out.c?ref=3cb8aab390ccf31e4581863b080db30c6735e51e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+int\n+main (void)\n+{\n+  long double res, x = 0x1.0000000000001p+0L,\n+\t\t   exp = 1.00000000000000011102230246251564788e+0L;\n+  asm(\"sqxbr\\t%0,%1\" : \"=f\"(res) : \"f\"(x));\n+  assert (res == exp);\n+}"}, {"sha": "e0b6ac518aa9c8e01f13e6c0dab41c8e183ee763", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-asm-inout.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-inout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-inout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-inout.c?ref=3cb8aab390ccf31e4581863b080db30c6735e51e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+int\n+main (void)\n+{\n+  long double res = 0x1.0000000000001p+0L,\n+\t      exp = 1.00000000000000011102230246251564788e+0L;\n+  asm(\"sqxbr\\t%0,%0\" : \"+f\"(res));\n+  assert (res == exp);\n+}"}, {"sha": "c8b8c3d1c6e9f6d94523eb1099c5882ead9bf6fb", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-asm-matching.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-matching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-matching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-matching.c?ref=3cb8aab390ccf31e4581863b080db30c6735e51e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+int\n+main (void)\n+{\n+  long double res, x = 40., y = 2.;\n+  asm(\"axbr\\t%0,%2\" : \"=f\"(res) : \"0\"(x), \"f\"(y));\n+  assert (res == 42.);\n+}"}, {"sha": "314f658b025db55e13b8a664a7b0a43a27800309", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-asm-regmem.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-regmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-regmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-regmem.c?ref=3cb8aab390ccf31e4581863b080db30c6735e51e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+\n+void\n+foo (long double x)\n+{\n+  asm(\"# %0\" : \"+fm\"(x));\n+}"}, {"sha": "f4489841c28ac7020be309a780adef975e281dba", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-volatile-from-i64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-volatile-from-i64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb8aab390ccf31e4581863b080db30c6735e51e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-volatile-from-i64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-volatile-from-i64.c?ref=3cb8aab390ccf31e4581863b080db30c6735e51e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_volatile_from_i64 (int64_t x)\n+{\n+  static volatile long double y;\n+  y = x;\n+  return y;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcxgbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_volatile_from_i64 (42) == 42.L);\n+  assert (long_double_volatile_from_i64 (-42) == -42.L);\n+}"}]}