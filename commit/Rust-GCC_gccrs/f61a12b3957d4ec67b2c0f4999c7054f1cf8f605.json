{"sha": "f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxYTEyYjM5NTdkNGVjNjdiMmMwZjQ5OTljNzA1NGYxY2Y4ZjYwNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-07T22:46:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-07T22:46:39Z"}, "message": "PR libstdc++/89102 implement new common_type rules (P0435R1, P0548R1)\n\nThis change ensures that std::common_type<> is a complete type (LWG\n2408), and that std::common_type<T>, std::common_type<cv T1, cv T2>, and\nstd::common_type<T1, T2, R...> will use program-defined specializations\nfor std::common_type<T1, T2> (LWG 2465).\n\nThe implementation of common_type<T1, T2, R...> is changed to use\nvoid_t, and the specializations for duration and time_point are modified\nto also use void_t instead of depending on implementation details of\ncommon_type.\n\n\tPR libstdc++/89102\n\t* doc/xml/manual/intro.xml: Document DR 2408 and 2465 changes.\n\t* include/std/chrono (__duration_common_type_wrapper): Replace with ...\n\t(__duration_common_type): New helper.\n\t(common_type<chrono::duration<R1, P2>, chrono::duration<R2, P2>>): Use\n\t__duration_common_type.\n\t(__timepoint_common_type_wrapper): Replace with ...\n\t(__timepoint_common_type): New helper.\n\t(common_type<chrono::time_point<C, D2>, chrono::time_point<C, D2>>):\n\tUse __time_point_common_type.\n\t* include/std/type_traits (common_type<>): Define, as per LWG 2408.\n\t(__common_type_impl): If either argument is transformed by decay,\n\tuse the common_type of the decayed types.\n\t(__common_type_impl<_Tp, _Up, _Tp, _Up>): If the types are already\n\tdecayed, use __do_common_type_impl to get the common_type.\n\t(common_type<_Tp>): Use common_type<_Tp, _Tp>.\n\t(__do_member_type_wrapper, __member_type_wrapper)\n\t(__expanded_common_type_wrapper): Remove.\n\t(__common_type_pack, __common_type_fold): New helpers.\n\t(common_type<_Tp, _Up, _Vp...>): Use new helpers instead of\n\t__member_type_wrapper and __expanded_common_type_wrapper.\n\t* testsuite/20_util/common_type/requirements/explicit_instantiation.cc:\n\tTest zero-length template argument list.\n\t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n\tTest single argument cases and argument types that should decay.\n\t* testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc:\n\tAdjust expected error.\n\t* testsuite/20_util/duration/literals/range_neg.cc: Use zero for\n\tdg-error lineno.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n\nFrom-SVN: r270987", "tree": {"sha": "7b2d6ee6404f98073dbeaced1b32b4e093f7e6f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b2d6ee6404f98073dbeaced1b32b4e093f7e6f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f36e3dc102d8ffb776f31abb48c33b1b830ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f36e3dc102d8ffb776f31abb48c33b1b830ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7f36e3dc102d8ffb776f31abb48c33b1b830ebe"}], "stats": {"total": 214, "additions": 145, "deletions": 69}, "files": [{"sha": "fb69a3d10507005a3a7fc1e96137dc515a670ecc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "patch": "@@ -1,5 +1,38 @@\n 2019-05-07  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/89102\n+\t* doc/xml/manual/intro.xml: Document DR 2408 and 2465 changes.\n+\t* include/std/chrono (__duration_common_type_wrapper): Replace with ...\n+\t(__duration_common_type): New helper.\n+\t(common_type<chrono::duration<R1, P2>, chrono::duration<R2, P2>>): Use\n+\t__duration_common_type.\n+\t(__timepoint_common_type_wrapper): Replace with ...\n+\t(__timepoint_common_type): New helper.\n+\t(common_type<chrono::time_point<C, D2>, chrono::time_point<C, D2>>):\n+\tUse __time_point_common_type.\n+\t* include/std/type_traits (common_type<>): Define, as per LWG 2408.\n+\t(__common_type_impl): If either argument is transformed by decay,\n+\tuse the common_type of the decayed types.\n+\t(__common_type_impl<_Tp, _Up, _Tp, _Up>): If the types are already\n+\tdecayed, use __do_common_type_impl to get the common_type.\n+\t(common_type<_Tp>): Use common_type<_Tp, _Tp>.\n+\t(__do_member_type_wrapper, __member_type_wrapper)\n+\t(__expanded_common_type_wrapper): Remove.\n+\t(__common_type_pack, __common_type_fold): New helpers.\n+\t(common_type<_Tp, _Up, _Vp...>): Use new helpers instead of\n+\t__member_type_wrapper and __expanded_common_type_wrapper.\n+\t* testsuite/20_util/common_type/requirements/explicit_instantiation.cc:\n+\tTest zero-length template argument list.\n+\t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n+\tTest single argument cases and argument types that should decay.\n+\t* testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc:\n+\tAdjust expected error.\n+\t* testsuite/20_util/duration/literals/range_neg.cc: Use zero for\n+\tdg-error lineno.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n+\n \t* doc/xml/manual/intro.xml: Fix DR 2537 and DR 2566 confusion.\n \n 2019-05-01  Nina Dinka Ranns  <dinka.ranns@gmail.com>"}, {"sha": "35a2016f5c3c6ec322909d4a1b136b8b0f510e8d", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "patch": "@@ -1045,6 +1045,17 @@ requirements of the license of GCC.\n     <listitem><para>Remove <code>explicit</code> from the constructor.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr2408\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2408\">2408</link>:\n+       <emphasis>SFINAE-friendly\n+         <code>common_type</code>/<code>iterator_traits</code>\n+         is missing in C++14\n+       </emphasis>\n+    </term>\n+    <listitem><para>Make <code>iterator_traits</code> empty if any of the\n+      types is not present in the iterator.\n+      Make <code>common_type&lt;&gt;</code> empty.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry xml:id=\"manual.bugs.dr2415\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2415\">2415</link>:\n        <emphasis>Inconsistency between <code>unique_ptr</code> and <code>shared_ptr</code></emphasis>\n     </term>\n@@ -1105,6 +1116,15 @@ requirements of the license of GCC.\n     <listitem><para>Add debug mode assertion.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr2465\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2465\">2465</link>:\n+       <emphasis>SFINAE-friendly <code>common_type</code> is nearly impossible\n+       to specialize correctly and regresses key functionality\n+       </emphasis>\n+    </term>\n+    <listitem><para>Detect whether <code>decay_t</code> changes either type\n+      and use the decayed types if so.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry xml:id=\"manual.bugs.dr2466\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2466\">2466</link>:\n        <emphasis><code>allocator_traits::max_size()</code> default behavior is incorrect\n        </emphasis>"}, {"sha": "b7c1d7500673cb4472a78bc94473d22246d63633", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "patch": "@@ -67,48 +67,51 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.11.4.3 specialization of common_type (for duration, sfinae-friendly)\n \n+  template<typename _CT, typename _Period1, typename _Period2, typename = void>\n+    struct __duration_common_type\n+    { };\n+\n   template<typename _CT, typename _Period1, typename _Period2>\n-    struct __duration_common_type_wrapper\n+    struct __duration_common_type<_CT, _Period1, _Period2,\n+\t\t\t\t  __void_t<typename _CT::type>>\n     {\n     private:\n-      typedef __static_gcd<_Period1::num, _Period2::num> __gcd_num;\n-      typedef __static_gcd<_Period1::den, _Period2::den> __gcd_den;\n-      typedef typename _CT::type __cr;\n-      typedef ratio<__gcd_num::value,\n-        (_Period1::den / __gcd_den::value) * _Period2::den> __r;\n+      using __gcd_num = __static_gcd<_Period1::num, _Period2::num>;\n+      using __gcd_den = __static_gcd<_Period1::den, _Period2::den>;\n+      using __cr = typename _CT::type;\n+      using __r = ratio<__gcd_num::value,\n+\t\t\t(_Period1::den / __gcd_den::value) * _Period2::den>;\n+\n     public:\n-      typedef __success_type<chrono::duration<__cr, __r>> type;\n+      using type = chrono::duration<__cr, __r>;\n     };\n \n   template<typename _Period1, typename _Period2>\n-    struct __duration_common_type_wrapper<__failure_type, _Period1, _Period2>\n+    struct __duration_common_type<__failure_type, _Period1, _Period2>\n     { typedef __failure_type type; };\n \n   template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>\n     struct common_type<chrono::duration<_Rep1, _Period1>,\n-             chrono::duration<_Rep2, _Period2>>\n-    : public __duration_common_type_wrapper<typename __member_type_wrapper<\n-             common_type<_Rep1, _Rep2>>::type, _Period1, _Period2>::type\n+\t\t       chrono::duration<_Rep2, _Period2>>\n+    : __duration_common_type<common_type<_Rep1, _Rep2>, _Period1, _Period2>\n     { };\n \n   // 20.11.4.3 specialization of common_type (for time_point, sfinae-friendly)\n \n+  template<typename _CT, typename _Clock, typename = void>\n+    struct __timepoint_common_type\n+    { };\n+\n   template<typename _CT, typename _Clock>\n-    struct __timepoint_common_type_wrapper\n+    struct __timepoint_common_type<_CT, _Clock, __void_t<typename _CT::type>>\n     {\n-      typedef __success_type<chrono::time_point<_Clock, typename _CT::type>>\n-        type;\n+      using type = chrono::time_point<_Clock, typename _CT::type>;\n     };\n \n-  template<typename _Clock>\n-    struct __timepoint_common_type_wrapper<__failure_type, _Clock>\n-    { typedef __failure_type type; };\n-\n   template<typename _Clock, typename _Duration1, typename _Duration2>\n     struct common_type<chrono::time_point<_Clock, _Duration1>,\n-             chrono::time_point<_Clock, _Duration2>>\n-    : public __timepoint_common_type_wrapper<typename __member_type_wrapper<\n-             common_type<_Duration1, _Duration2>>::type, _Clock>::type\n+\t\t       chrono::time_point<_Clock, _Duration2>>\n+    : __timepoint_common_type<common_type<_Duration1, _Duration2>, _Clock>\n     { };\n \n   namespace chrono"}, {"sha": "ea733e7b7b2a6f21400a768c6ea4a0f1f1de02a1", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 59, "deletions": 43, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "patch": "@@ -2106,6 +2106,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct conditional<false, _Iftrue, _Iffalse>\n     { typedef _Iffalse type; };\n \n+  // __void_t (std::void_t for C++11)\n+  template<typename...> using __void_t = void;\n+\n   /// common_type\n   template<typename... _Tp>\n     struct common_type;\n@@ -2115,65 +2118,81 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct __do_common_type_impl\n   {\n     template<typename _Tp, typename _Up>\n-      static __success_type<typename decay<decltype\n-\t\t\t    (true ? std::declval<_Tp>()\n-\t\t\t     : std::declval<_Up>())>::type> _S_test(int);\n+      using __cond_t\n+\t= decltype(true ? std::declval<_Tp>() : std::declval<_Up>());\n+\n+    template<typename _Tp, typename _Up>\n+      static __success_type<typename decay<__cond_t<_Tp, _Up>>::type>\n+      _S_test(int);\n \n     template<typename, typename>\n-      static __failure_type _S_test(...);\n+      static __failure_type\n+      _S_test(...);\n   };\n \n-  template<typename _Tp, typename _Up>\n-    struct __common_type_impl\n-    : private __do_common_type_impl\n-    {\n-      typedef decltype(_S_test<_Tp, _Up>(0)) type;\n-    };\n-\n-  struct __do_member_type_wrapper\n-  {\n-    template<typename _Tp>\n-      static __success_type<typename _Tp::type> _S_test(int);\n+  // If sizeof...(T) is zero, there shall be no member type.\n+  template<>\n+    struct common_type<>\n+    { };\n \n-    template<typename>\n-      static __failure_type _S_test(...);\n-  };\n+  // If sizeof...(T) is one, the same type, if any, as common_type_t<T0, T0>.\n+  template<typename _Tp0>\n+    struct common_type<_Tp0>\n+    : public common_type<_Tp0, _Tp0>\n+    { };\n \n-  template<typename _Tp>\n-    struct __member_type_wrapper\n-    : private __do_member_type_wrapper\n+  // If sizeof...(T) is two, ...\n+  template<typename _Tp1, typename _Tp2,\n+\t   typename _Dp1 = typename decay<_Tp1>::type,\n+\t   typename _Dp2 = typename decay<_Tp2>::type>\n+    struct __common_type_impl\n     {\n-      typedef decltype(_S_test<_Tp>(0)) type;\n+      // If is_same_v<T1, D1> is false or is_same_v<T2, D2> is false,\n+      // let C denote the same type, if any, as common_type_t<D1, D2>.\n+      using type = common_type<_Dp1, _Dp2>;\n     };\n \n-  template<typename _CTp, typename... _Args>\n-    struct __expanded_common_type_wrapper\n+  template<typename _Tp1, typename _Tp2>\n+    struct __common_type_impl<_Tp1, _Tp2, _Tp1, _Tp2>\n+    : private __do_common_type_impl\n     {\n-      typedef common_type<typename _CTp::type, _Args...> type;\n+      // Otherwise, if decay_t<decltype(false ? declval<D1>() : declval<D2>())>\n+      // denotes a valid type, let C denote that type.\n+      using type = decltype(_S_test<_Tp1, _Tp2>(0));\n     };\n \n-  template<typename... _Args>\n-    struct __expanded_common_type_wrapper<__failure_type, _Args...>\n-    { typedef __failure_type type; };\n+  // If sizeof...(T) is two, ...\n+  template<typename _Tp1, typename _Tp2>\n+    struct common_type<_Tp1, _Tp2>\n+    : public __common_type_impl<_Tp1, _Tp2>::type\n+    { };\n \n-  template<>\n-    struct common_type<>\n+  template<typename...>\n+    struct __common_type_pack\n     { };\n \n-  template<typename _Tp>\n-    struct common_type<_Tp>\n-    : common_type<_Tp, _Tp>\n+  template<typename, typename, typename = void>\n+    struct __common_type_fold;\n+\n+  // If sizeof...(T) is greater than two, ...\n+  template<typename _Tp1, typename _Tp2, typename... _Rp>\n+    struct common_type<_Tp1, _Tp2, _Rp...>\n+    : public __common_type_fold<common_type<_Tp1, _Tp2>,\n+\t\t\t\t__common_type_pack<_Rp...>>\n     { };\n \n-  template<typename _Tp, typename _Up>\n-    struct common_type<_Tp, _Up>\n-    : public __common_type_impl<_Tp, _Up>::type\n+  // Let C denote the same type, if any, as common_type_t<T1, T2>.\n+  // If there is such a type C, type shall denote the same type, if any,\n+  // as common_type_t<C, R...>.\n+  template<typename _CTp, typename... _Rp>\n+    struct __common_type_fold<_CTp, __common_type_pack<_Rp...>,\n+\t\t\t      __void_t<typename _CTp::type>>\n+    : public common_type<typename _CTp::type, _Rp...>\n     { };\n \n-  template<typename _Tp, typename _Up, typename... _Vp>\n-    struct common_type<_Tp, _Up, _Vp...>\n-    : public __expanded_common_type_wrapper<typename __member_type_wrapper<\n-               common_type<_Tp, _Up>>::type, _Vp...>::type\n+  // Otherwise, there shall be no member type.\n+  template<typename _CTp, typename _Rp>\n+    struct __common_type_fold<_CTp, _Rp, void>\n     { };\n \n   template<typename _Tp, bool = is_enum<_Tp>::value>\n@@ -2446,9 +2465,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<bool _Cond, typename _Tp = void>\n     using __enable_if_t = typename enable_if<_Cond, _Tp>::type;\n \n-  // __void_t (std::void_t for C++11)\n-  template<typename...> using __void_t = void;\n-\n #if __cplusplus >= 201703L || !defined(__STRICT_ANSI__) // c++17 or gnu++11\n #define __cpp_lib_void_t 201411\n   /// A metafunction that always yields void, used for detecting valid types."}, {"sha": "a54da7c24b2b2ced5d95d38f60d861eaf95a7c30", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc?ref=f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "patch": "@@ -214,6 +214,7 @@ static_assert(is_type<std::common_type<void(&&)(), void(&)()>,\n static_assert(is_type<std::common_type<void(&&)(), void(&&)()>,\n \t      void(*)()>(), \"\");\n static_assert(is_type<std::common_type<ImplicitTo<int>, int>, int>(), \"\");\n+static_assert(is_type<std::common_type<const ImplicitTo<int>, int>, int>(), \"\");\n static_assert(is_type<std::common_type<ImplicitTo<int>, ImplicitTo<int>>,\n \t      ImplicitTo<int>>(), \"\");\n static_assert(is_type<std::common_type<ImplicitTo<int>, int,\n@@ -260,19 +261,22 @@ static_assert(is_type<std::common_type<volatile Ukn&&, volatile Ukn&&>,\n \t      Ukn>(), \"\");\n \n static_assert(is_type<std::common_type<X1, X2>, RX12>(), \"\");\n+static_assert(is_type<std::common_type<const X1, X2>, RX12>(), \"\");\n+static_assert(is_type<std::common_type<X1&, const X2>, RX12>(), \"\");\n+static_assert(is_type<std::common_type<const X1&, const X2&>, RX12>(), \"\");\n static_assert(is_type<std::common_type<X2, X1>, RX21>(), \"\");\n \n static_assert(is_type<std::common_type<X1, X2, X1>, Y1>(), \"\");\n static_assert(is_type<std::common_type<X2, X1, X1>, Y3>(), \"\");\n \n static_assert(is_type<std::common_type<X1, X1, X2>, RX12>(), \"\");\n+static_assert(is_type<std::common_type<X1&, const X1, const X2&&>, RX12>(), \"\");\n static_assert(is_type<std::common_type<X1, X1, X2, X1>, Y1>(), \"\");\n \n static_assert(!has_type<std::common_type<>>(), \"\");\n static_assert(!has_type<std::common_type<int, S>>(), \"\");\n static_assert(!has_type<std::common_type<U, S>>(), \"\");\n static_assert(!has_type<std::common_type<U, U2>>(), \"\");\n-static_assert(!has_type<std::common_type<const ImplicitTo<int>, int>>(), \"\");\n static_assert(!has_type<std::common_type<PrivateImplicitTo<int>, int>>(), \"\");\n static_assert(!has_type<std::common_type<const PrivateImplicitTo<int>,\n \t      int>>(), \"\");"}, {"sha": "8be1be5423f275efd03fe7f9da98c6f2dddf0582", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/range_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange_neg.cc?ref=f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "patch": "@@ -26,6 +26,6 @@ test01()\n \n   // std::numeric_limits<int64_t>::max() == 9223372036854775807;\n   auto h = 9223372036854775808h;\n-  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 908 }\n+  // { dg-error \"cannot be represented by duration\" \"\" { target *-*-* } 0 }\n }\n // { dg-prune-output \"in .constexpr. expansion\" } // needed for -O0"}, {"sha": "9c25552892d78cb312ead11a8cc0e73dd6e22101", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "patch": "@@ -29,4 +29,4 @@ void test01()\n   test_type d; // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 316 }\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 0 }"}, {"sha": "e6029fc782a53a1efb9c7f4532be2126e9bdbe06", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "patch": "@@ -30,5 +30,5 @@ void test01()\n   test_type d;\t\t\t// { dg-error \"required from here\" }\n }\n \n-// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 317 }\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"not a member\" }"}, {"sha": "ed8baa195c7197e0d1a907564096ba645e888d97", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61a12b3957d4ec67b2c0f4999c7054f1cf8f605/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=f61a12b3957d4ec67b2c0f4999c7054f1cf8f605", "patch": "@@ -31,4 +31,4 @@ void test01()\n   test_type d;  // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"period must be positive\" \"\" { target *-*-* } 319 }\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 0 }"}]}