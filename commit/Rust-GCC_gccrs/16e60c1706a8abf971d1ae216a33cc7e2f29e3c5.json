{"sha": "16e60c1706a8abf971d1ae216a33cc7e2f29e3c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZlNjBjMTcwNmE4YWJmOTcxZDFhZTIxNmEzM2NjN2UyZjI5ZTNjNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-03-17T17:43:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-03-17T17:43:52Z"}, "message": "re PR debug/39412 (ICE in gen_tagged_type_instantiation_die)\n\n\tPR debug/39412\n\t* dwarf2out.c (gen_inlined_enumeration_type_die,\n\tgen_inlined_structure_type_die, gen_inlined_union_type_die,\n\tgen_tagged_type_instantiation_die): Removed.\n\t(gen_decl_die): For TYPE_DECL_IS_STUB with non-NULL decl_origin\n\tdo nothing.\n\n\t* gcc.dg/debug/pr39412.c: New test.\n\nFrom-SVN: r144909", "tree": {"sha": "2744c2cb25f879823de6ebfb43c282bca1d1ac20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2744c2cb25f879823de6ebfb43c282bca1d1ac20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d936acaa49e7398be02d1cd74d17c6ac487479e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d936acaa49e7398be02d1cd74d17c6ac487479e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d936acaa49e7398be02d1cd74d17c6ac487479e"}], "stats": {"total": 126, "additions": 38, "deletions": 88}, "files": [{"sha": "18264af40140a101ef2bd5ad2694ec55f352919c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16e60c1706a8abf971d1ae216a33cc7e2f29e3c5", "patch": "@@ -1,3 +1,12 @@\n+2009-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/39412\n+\t* dwarf2out.c (gen_inlined_enumeration_type_die,\n+\tgen_inlined_structure_type_die, gen_inlined_union_type_die,\n+\tgen_tagged_type_instantiation_die): Removed.\n+\t(gen_decl_die): For TYPE_DECL_IS_STUB with non-NULL decl_origin\n+\tdo nothing.\n+\n 2009-03-17  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR testsuite/38526"}, {"sha": "67117775ba3022bc3f62e45b4b844916669b9160", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 88, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=16e60c1706a8abf971d1ae216a33cc7e2f29e3c5", "patch": "@@ -5149,9 +5149,6 @@ static void gen_descr_array_type_die (tree, struct array_descr_info *, dw_die_re\n #if 0\n static void gen_entry_point_die (tree, dw_die_ref);\n #endif\n-static void gen_inlined_enumeration_type_die (tree, dw_die_ref);\n-static void gen_inlined_structure_type_die (tree, dw_die_ref);\n-static void gen_inlined_union_type_die (tree, dw_die_ref);\n static dw_die_ref gen_enumeration_type_die (tree, dw_die_ref);\n static dw_die_ref gen_formal_parameter_die (tree, tree, dw_die_ref);\n static void gen_unspecified_parameters_die (tree, dw_die_ref);\n@@ -5172,7 +5169,6 @@ static void gen_struct_or_union_type_die (tree, dw_die_ref,\n static void gen_subroutine_type_die (tree, dw_die_ref);\n static void gen_typedef_die (tree, dw_die_ref);\n static void gen_type_die (tree, dw_die_ref);\n-static void gen_tagged_type_instantiation_die (tree, dw_die_ref);\n static void gen_block_die (tree, dw_die_ref, int);\n static void decls_for_scope (tree, dw_die_ref, int);\n static int is_redundant_typedef (const_tree);\n@@ -13149,18 +13145,6 @@ retry_incomplete_types (void)\n     gen_type_die (VEC_index (tree, incomplete_types, i), comp_unit_die);\n }\n \n-/* Generate a DIE to represent an inlined instance of an enumeration type.  */\n-\n-static void\n-gen_inlined_enumeration_type_die (tree type, dw_die_ref context_die)\n-{\n-  dw_die_ref type_die = new_die (DW_TAG_enumeration_type, context_die, type);\n-\n-  /* We do not check for TREE_ASM_WRITTEN (type) being set, as the type may\n-     be incomplete and such types are not marked.  */\n-  add_abstract_origin_attribute (type_die, type);\n-}\n-\n /* Determine what tag to use for a record type.  */\n \n static enum dwarf_tag\n@@ -13185,30 +13169,6 @@ record_type_tag (tree type)\n     }\n }\n \n-/* Generate a DIE to represent an inlined instance of a structure type.  */\n-\n-static void\n-gen_inlined_structure_type_die (tree type, dw_die_ref context_die)\n-{\n-  dw_die_ref type_die = new_die (record_type_tag (type), context_die, type);\n-\n-  /* We do not check for TREE_ASM_WRITTEN (type) being set, as the type may\n-     be incomplete and such types are not marked.  */\n-  add_abstract_origin_attribute (type_die, type);\n-}\n-\n-/* Generate a DIE to represent an inlined instance of a union type.  */\n-\n-static void\n-gen_inlined_union_type_die (tree type, dw_die_ref context_die)\n-{\n-  dw_die_ref type_die = new_die (DW_TAG_union_type, context_die, type);\n-\n-  /* We do not check for TREE_ASM_WRITTEN (type) being set, as the type may\n-     be incomplete and such types are not marked.  */\n-  add_abstract_origin_attribute (type_die, type);\n-}\n-\n /* Generate a DIE to represent an enumeration type.  Note that these DIEs\n    include all of the information about the enumeration values also. Each\n    enumerated type name/value is listed as a child of the enumerated type\n@@ -14835,46 +14795,6 @@ gen_type_die (tree type, dw_die_ref context_die)\n   gen_type_die_with_usage (type, context_die, DINFO_USAGE_DIR_USE);\n }\n \n-/* Generate a DIE for a tagged type instantiation.  */\n-\n-static void\n-gen_tagged_type_instantiation_die (tree type, dw_die_ref context_die)\n-{\n-  if (type == NULL_TREE || type == error_mark_node)\n-    return;\n-\n-  /* We are going to output a DIE to represent the unqualified version of\n-     this type (i.e. without any const or volatile qualifiers) so make sure\n-     that we have the main variant (i.e. the unqualified version) of this\n-     type now.  */\n-  gcc_assert (type == type_main_variant (type));\n-\n-  /* Do not check TREE_ASM_WRITTEN (type) as it may not be set if this is\n-     an instance of an unresolved type.  */\n-\n-  switch (TREE_CODE (type))\n-    {\n-    case ERROR_MARK:\n-      break;\n-\n-    case ENUMERAL_TYPE:\n-      gen_inlined_enumeration_type_die (type, context_die);\n-      break;\n-\n-    case RECORD_TYPE:\n-      gen_inlined_structure_type_die (type, context_die);\n-      break;\n-\n-    case UNION_TYPE:\n-    case QUAL_UNION_TYPE:\n-      gen_inlined_union_type_die (type, context_die);\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n /* Generate a DW_TAG_lexical_block DIE followed by DIEs to represent all of the\n    things which are local to the given block.  */\n \n@@ -15315,14 +15235,14 @@ gen_decl_die (tree decl, tree origin, dw_die_ref context_die)\n \t of some type tag, if the given TYPE_DECL is marked as having been\n \t instantiated from some other (original) TYPE_DECL node (e.g. one which\n \t was generated within the original definition of an inline function) we\n-\t have to generate a special (abbreviated) DW_TAG_structure_type,\n-\t DW_TAG_union_type, or DW_TAG_enumeration_type DIE here.  */\n-      if (TYPE_DECL_IS_STUB (decl) && decl_ultimate_origin (decl) != NULL_TREE\n-\t  && is_tagged_type (TREE_TYPE (decl)))\n-\t{\n-\t  gen_tagged_type_instantiation_die (TREE_TYPE (decl), context_die);\n-\t  break;\n-\t}\n+\t used to generate a special (abbreviated) DW_TAG_structure_type,\n+\t DW_TAG_union_type, or DW_TAG_enumeration_type DIE here.  But nothing\n+\t should be actually referencing those DIEs, as variable DIEs with that\n+\t type would be emitted already in the abstract origin, so it was always\n+\t removed during unused type prunning.  Don't add anything in this\n+\t case.  */\n+      if (TYPE_DECL_IS_STUB (decl) && decl_ultimate_origin (decl) != NULL_TREE)\n+\tbreak;\n \n       if (is_redundant_typedef (decl))\n \tgen_type_die (TREE_TYPE (decl), context_die);"}, {"sha": "d93660e0654e4170927215da3c00eedd8a34fdb0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16e60c1706a8abf971d1ae216a33cc7e2f29e3c5", "patch": "@@ -1,3 +1,8 @@\n+2009-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/39412\n+\t* gcc.dg/debug/pr39412.c: New test.\n+\n 2009-03-17  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR testsuite/38526"}, {"sha": "71b7b5e21a956cd84f71d16105d1adbc4d8506d4", "filename": "gcc/testsuite/gcc.dg/debug/pr39412.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr39412.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e60c1706a8abf971d1ae216a33cc7e2f29e3c5/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr39412.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr39412.c?ref=16e60c1706a8abf971d1ae216a33cc7e2f29e3c5", "patch": "@@ -0,0 +1,16 @@\n+/* PR debug/39412 */\n+/* { dg-do compile } */\n+\n+struct S { int i; };\n+\n+inline void\n+bar (const void *x, unsigned long y)\n+{\n+  const union { struct S a[y]; } *u = x;\n+}\n+\n+void\n+foo (const void *x, unsigned long y)\n+{\n+  bar (x, y);\n+}"}]}