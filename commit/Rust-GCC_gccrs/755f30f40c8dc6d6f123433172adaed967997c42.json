{"sha": "755f30f40c8dc6d6f123433172adaed967997c42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU1ZjMwZjQwYzhkYzZkNmYxMjM0MzMxNzJhZGFlZDk2Nzk5N2M0Mg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-03-30T08:14:15Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-03-30T08:14:15Z"}, "message": "[multiple changes]\n\n\n2001-03-28  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* mkcheck.in (LIBTOOL): Don't construct -B argument here...\n\t* tests_flags.in (CXX): Construct here.\n\t(static_fail): Don't remove compile.out. Format with spaces.\n\t(INCLUDES): Deal with xcompiling.\n\t* configure.in (xcompiling): Substitute.\n\t* testsuite/Makefile.am: Snake libjava configury.\n\t* testsuite/Makefile.in: Regenerate.\n\t* testsuite/23_containers/map_operators.cc: Tweaks.\n\t* testsuite/23_containers/set_operators.cc: Tweaks.\n\n2001-03-28  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n\n\tEnable dejagnu testing framework.\n\t* configure.in: Generate testsuite/Makefile.\n\t* configure: Regenerate.\n\t* Makefile.am (check-install): Change rule from this...\n\t(check-script-install): ...to this.\n\t(check): Change rule from this...\n\t(check-script):...to this.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r40960", "tree": {"sha": "6976a32efc4fef22cdaf1ce7224cc059678b178d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6976a32efc4fef22cdaf1ce7224cc059678b178d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/755f30f40c8dc6d6f123433172adaed967997c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755f30f40c8dc6d6f123433172adaed967997c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/755f30f40c8dc6d6f123433172adaed967997c42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755f30f40c8dc6d6f123433172adaed967997c42/comments", "author": null, "committer": null, "parents": [{"sha": "f021d6fc66aa57bfee4437ceb9f53e8c428436f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f021d6fc66aa57bfee4437ceb9f53e8c428436f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f021d6fc66aa57bfee4437ceb9f53e8c428436f4"}], "stats": {"total": 270, "additions": 137, "deletions": 133}, "files": [{"sha": "1a121eeda5899190f10acfc37b30771245044ed1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -1,3 +1,26 @@\n+2001-03-28  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* mkcheck.in (LIBTOOL): Don't construct -B argument here...\n+\t* tests_flags.in (CXX): Construct here.\n+\t(static_fail): Don't remove compile.out. Format with spaces.\n+\t(INCLUDES): Deal with xcompiling.\n+\t* configure.in (xcompiling): Substitute.\n+\t* testsuite/Makefile.am: Snake libjava configury.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* testsuite/23_containers/map_operators.cc: Tweaks.\n+\t* testsuite/23_containers/set_operators.cc: Tweaks.\n+\n+2001-03-28  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+\tEnable dejagnu testing framework.\n+\t* configure.in: Generate testsuite/Makefile.\n+\t* configure: Regenerate.\n+\t* Makefile.am (check-install): Change rule from this...\n+\t(check-script-install): ...to this.\n+\t(check): Change rule from this...\n+\t(check-script):...to this.\n+\t* Makefile.in: Regenerate.\n+\t\n 2001-03-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* libsupc++/Makefile.am (CXXLINK): Add --tag disable-shared after"}, {"sha": "b7985ffa4b3c22db54cb20575cc75ae129e073cb", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -24,20 +24,20 @@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n \n-SUBDIRS = libio libmath libsupc++ src\n+SUBDIRS = libio libmath libsupc++ src testsuite\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Use $${builddir} instead of $(top_builddir) for arguments to \"mkcheck\"\n # because then the paths will be full pathnames, not relative\n # pathnames. (-Wl,--rpath seems to like this better.)\n-check: $(top_builddir)/mkcheck\n+check-script: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n \t  srcdir=`cd $(top_srcdir); pwd`; builddir=`pwd`; \\\n \t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\\n \t  cd testsuite; $${builddir}/mkcheck 0 $${builddir} $${srcdir})\n \n-check-install: $(top_builddir)/mkcheck\n+check-script-install: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n \t  srcdir=`cd $(top_srcdir); pwd`; builddir=`pwd`; \\\n \t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\"}, {"sha": "6fb1b8f22ccee649b2c6b771845acbab794ac3a7", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -112,11 +112,12 @@ gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n+xcompiling = @xcompiling@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n \n-SUBDIRS = libio libmath libsupc++ src\n+SUBDIRS = libio libmath libsupc++ src testsuite\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n@@ -312,7 +313,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n@@ -410,13 +411,13 @@ mostlyclean distclean maintainer-clean\n # Use $${builddir} instead of $(top_builddir) for arguments to \"mkcheck\"\n # because then the paths will be full pathnames, not relative\n # pathnames. (-Wl,--rpath seems to like this better.)\n-check: $(top_builddir)/mkcheck\n+check-script: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n \t  srcdir=`cd $(top_srcdir); pwd`; builddir=`pwd`; \\\n \t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\\n \t  cd testsuite; $${builddir}/mkcheck 0 $${builddir} $${srcdir})\n \n-check-install: $(top_builddir)/mkcheck\n+check-script-install: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n \t  srcdir=`cd $(top_srcdir); pwd`; builddir=`pwd`; \\\n \t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\"}, {"sha": "8ecf98e662bf88af03d84b136e295ef9dc90071d", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -15774,6 +15774,7 @@ else\n   CANADIAN_TRUE='#'\n   CANADIAN_FALSE=\n fi\n+\n  \n cat > confcache <<\\EOF\n # This file is a shell script that caches the results of configure\n@@ -15825,17 +15826,17 @@ rm -f confcache\n \n   ac_safe=`echo \"locale.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for locale.h\"\"... $ac_c\" 1>&6\n-echo \"configure:15829: checking for locale.h\" >&5\n+echo \"configure:15830: checking for locale.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 15834 \"configure\"\n+#line 15835 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:15839: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:15840: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -15853,19 +15854,19 @@ if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n   echo \"$ac_t\"\"yes\" 1>&6\n   \n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:15857: checking for LC_MESSAGES\" >&5\n+echo \"configure:15858: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 15862 \"configure\"\n+#line 15863 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:15869: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:15870: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_val_LC_MESSAGES=yes\n else\n@@ -15910,13 +15911,13 @@ glibcpp_toolexecdir=no\n glibcpp_toolexeclibdir=no\n \n echo $ac_n \"checking for interface version number\"\"... $ac_c\" 1>&6\n-echo \"configure:15914: checking for interface version number\" >&5\n+echo \"configure:15915: checking for interface version number\" >&5\n libstdcxx_interface=$INTERFACE\n echo \"$ac_t\"\"$libstdcxx_interface\" 1>&6\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:15920: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:15921: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -15940,7 +15941,7 @@ echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:15944: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:15945: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\"\n@@ -15980,7 +15981,7 @@ if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n fi\n \n echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n-echo \"configure:15984: checking for install location\" >&5\n+echo \"configure:15985: checking for install location\" >&5\n echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n \n@@ -16152,7 +16153,7 @@ done\n ac_given_srcdir=$srcdir\n ac_given_INSTALL=\"$INSTALL\"\n \n-trap 'rm -fr `echo \"tests_flags mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile config.h\" | sed \"s/:[^ ]*//g\"` conftest*; exit 1' 1 2 15\n+trap 'rm -fr `echo \"tests_flags mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile testsuite/Makefile config.h\" | sed \"s/:[^ ]*//g\"` conftest*; exit 1' 1 2 15\n EOF\n cat >> $CONFIG_STATUS <<EOF\n \n@@ -16256,6 +16257,7 @@ s%@NATIVE_TRUE@%$NATIVE_TRUE%g\n s%@NATIVE_FALSE@%$NATIVE_FALSE%g\n s%@CANADIAN_TRUE@%$CANADIAN_TRUE%g\n s%@CANADIAN_FALSE@%$CANADIAN_FALSE%g\n+s%@xcompiling@%$xcompiling%g\n s%@gxx_include_dir@%$gxx_include_dir%g\n s%@glibcpp_toolexecdir@%$glibcpp_toolexecdir%g\n s%@glibcpp_toolexeclibdir@%$glibcpp_toolexeclibdir%g\n@@ -16308,7 +16310,7 @@ EOF\n \n cat >> $CONFIG_STATUS <<EOF\n \n-CONFIG_FILES=\\${CONFIG_FILES-\"tests_flags mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile\"}\n+CONFIG_FILES=\\${CONFIG_FILES-\"tests_flags mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile testsuite/Makefile\"}\n EOF\n cat >> $CONFIG_STATUS <<\\EOF\n for ac_file in .. $CONFIG_FILES; do if test \"x$ac_file\" != x..; then"}, {"sha": "199afa561a4d54878d46aaae78cdb6bac20e6172", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -236,6 +236,7 @@ AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, include/bits/atomicity.h)\n AM_CONDITIONAL(NULL_TARGET, test \"$NULL_TARGET\" = yes)\n AM_CONDITIONAL(NATIVE, test \"$NATIVE\" = yes || test \"$NULL_TARGET\" = yes)\n AM_CONDITIONAL(CANADIAN, test \"$CANADIAN\" = yes)\n+AC_SUBST(xcompiling)\n  \n AC_CACHE_SAVE\n AC_LC_MESSAGES\n@@ -272,7 +273,7 @@ fi\n # installed in the correct place. To work around this not being passed\n # down from config-ml.in -> top_srcdir/Makefile.am ->\n # top_srcdir/{src,libsupc++}/Makefile.am, manually append it here.\n-AC_OUTPUT(tests_flags mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile,\n+AC_OUTPUT(tests_flags mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile testsuite/Makefile,\n [if test -n \"$CONFIG_FILES\"; then\n   ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n   grep '^MULTISUBDIR =' Makefile >> src/Makefile"}, {"sha": "07b420558db6b268f9728ae3f68a6ae4c17b56ba", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -106,6 +106,7 @@ gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n+xcompiling = @xcompiling@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n@@ -292,7 +293,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "4aa5b2a1d8fd8d3a1b3eff624c638dfb14f8748c", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -106,6 +106,7 @@ gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n+xcompiling = @xcompiling@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n@@ -269,7 +270,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "edeec53e47e77659553eb1686f56b8db57936179", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 13, "deletions": 48, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -104,6 +104,7 @@ gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n+xcompiling = @xcompiling@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n@@ -128,13 +129,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -146,38 +145,13 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers = \\\n-\texception new typeinfo cxxabi.h exception_defines.h \n-\n-\n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\teh_alloc.cc \\\n-\teh_aux_runtime.cc \\\n-\teh_catch.cc \\\n-\teh_exception.cc \\\n-\teh_globals.cc \\\n-\teh_personality.cc \\\n-\teh_terminate.cc \\\n-\teh_throw.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc\n+INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers =  \texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_terminate.cc \teh_throw.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -193,12 +167,7 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -222,9 +191,7 @@ AM_CXXFLAGS = \\\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-               --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -233,9 +200,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-          --mode=link $(CXX) \\\n-          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "72a2b76ff21ac74ffa546beeaaecbacddc7d7de3", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -61,11 +61,6 @@ set `../tests_flags ${query} $*` || exit 1\n BUILD_DIR=$1; SRC_DIR=$2; PREFIX_DIR=$3; CXX=$4; CXXFLAGS=$5; INCLUDES=$6; LIBS=$7;\n IFS=$saved_ifs\n \n-# Build libtoolized surrogates to compile and run testcases.  Also,\n-# adjust CXX so that the newly built compiler can find headers.\n-if [ x$WHICH = x0 ] ; then\n-    CXX=\"$CXX -B`dirname $CXX`/\"\n-fi\n LIBTOOL=\"$BUILD_DIR/libtool\"\n LTEXE=\"$LIBTOOL --mode=execute\"\n LTCXX=\"$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $INCLUDES $LIBS\"\n@@ -104,6 +99,7 @@ MAX_MEM_USAGE=16384\n \n # Remove old executables.\n rm -rf \"$TEST_DIR\"/*exe\n+rm -rf \"$TEST_DIR\"/compile.out\n \n # Remove old core files (which now get left in cwd, not $TEST_DIR).\n rm -rf ./*core*\n@@ -324,7 +320,9 @@ test_file()\n     # time_t's (no more overhead than grabbing two date(1)'s).\n     compiler_invocation=\"$LTCXX $S_FLAG $SRC_NAME -o $EXENAME\"\n     COMP_TIME_START=$($TIMER_COMMAND)\n+    echo $SRC_NAME >> compile.out\n     $compiler_invocation >> compile.out 2>&1\n+    echo \"\" >> compile.out\n     COMP_TIME_END=$($TIMER_COMMAND)\n \n     if [ $COMP_TIME_START -lt $COMP_TIME_END ]; then\n@@ -334,7 +332,7 @@ test_file()\n     fi\n \n     if [ -f $EXENAME ]; then\n-        rm compile.out\n+#        rm compile.out\n         size_command TEXT\n         size_command DATA\n         size_command SIZE\n@@ -372,8 +370,8 @@ test_file()\n     else\n         # the file did not compile/link.\n         printf \"\\n\" >> $LOG_FILE\n-        `cat compile.out >> $LOG_FILE` \n-        rm compile.out\n+#        `cat compile.out >> $LOG_FILE` \n+#        rm compile.out\n         RESULT=\"-b\"\n         TEXT=\"0\"\n         DATA=\"0\""}, {"sha": "ade75536eb9b7f7aae630fba711492ffc0bd554e", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -102,6 +102,7 @@ glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n ifGNUmake = @ifGNUmake@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n+xcompiling = @xcompiling@\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -377,7 +378,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "5821dd5276a5e0b821cfce31862cedccd3f09a7c", "filename": "libstdc++-v3/tests_flags.in", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftests_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftests_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftests_flags.in?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -108,6 +108,9 @@ case ${query} in\n                 -I${SRC_DIR}/include/std  -I${SRC_DIR}/include/$C_DIR\n \t        -I${SRC_DIR}/libsupc++ -I${SRC_DIR}/libio \n \t\t-I${SRC_DIR}/testsuite\"\n+      if test x@xcompiling@ == x1; then\n+        INCLUDES=\"${INCLUDES} -I${SRC_DIR}/../newlib/libc/include\"\n+      fi\n       ;;\n esac\n \n@@ -124,12 +127,12 @@ esac\n \n # LIB_PATH == where to find the C++ build libraries for libtool's use\n # GCC_LIB_PATH == where to find the gcc build libraries for libtool's use\n-# CXX == the full pathname of the compiler\n+# CXX == how to invoke the compiler\n case ${query} in\n     --built-library)\n       LIB_PATH=${BUILD_DIR}/src\n       GCC_LIB_PATH=${BUILD_DIR}/../../gcc\n-      CXX=\"${BUILD_DIR}/../../gcc/g++\"\n+      CXX=\"${BUILD_DIR}/../../gcc/g++ -B${BUILD_DIR}/../../gcc/\"\n       ;;\n     --installed-library)\n       LIB_PATH=${PREFIX_DIR}/lib\n@@ -138,11 +141,11 @@ case ${query} in\n       ;;\n esac\n \n-# gcc compiler flags (maybe use glibcpp_cxxflags from configure.target,\n-# but that's really meant for building the library itself, not using it)\n+# CXXFLAGS == run the testsuite with any special configuration\n+# flags from the library build.\n CXXFLAGS=\"-ggdb3 -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n \n-# LIBS == any extra needed -l switches, etc (may need more libs, lose lose)\n+# LIBS == any extra may needed -L switches\n case ${query} in\n     --built-library)\n       LIBS=\"${LIB_PATH}/libstdc++.la -no-install -rpath ${GCC_LIB_PATH}\""}, {"sha": "c44cfacb3e4a9e216add78234ab2ef267255d79e", "filename": "libstdc++-v3/testsuite/23_containers/map_operators.cc", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap_operators.cc?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -1,6 +1,6 @@\n // 2000-09-07 bgarcia@laurelnetworks.com\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,28 +37,27 @@ void test01()\n   mapByIndex.insert(std::pair<unsigned, int>(6, 5));\n   \n   std::map<unsigned, int>::iterator itr(mapByIndex.begin());\n-  \n-  test &= itr != mapByName.end(); // XXX - notice, it's not mapByIndex!!\n-  test &= itr == mapByName.end(); // XXX - notice, it's not mapByIndex!!\n \n-  return 0;\n+  // NB: notice, it's not mapByIndex!!\n+  test &= itr != mapByName.end();  // ERROR - *  XFAIL *-*-*\n+  test &= itr == mapByName.end();  // ERROR - *  XFAIL *-*-*\n }\n \n // http://gcc.gnu.org/ml/libstdc++/2000-11/msg00093.html\n void test02()\n {\n-    typedef std::map<int,const int> MapInt;\n-\n-    MapInt m;\n-\n-    for (unsigned i=0;i<10;++i)\n-        m.insert(MapInt::value_type(i,i));\n-\n-    for (MapInt::const_iterator i=m.begin();i!=m.end();++i)\n-        std::cerr << i->second << ' ';\n-\n-    for (MapInt::const_iterator i=m.begin();m.end()!=i;++i)\n-        std::cerr << i->second << ' ';\n+  typedef std::map<int,const int> MapInt;\n+  \n+  MapInt m;\n+  \n+  for (unsigned i=0;i<10;++i)\n+    m.insert(MapInt::value_type(i,i));\n+  \n+  for (MapInt::const_iterator i=m.begin();i!=m.end();++i)\n+    std::cerr << i->second << ' ';\n+  \n+  for (MapInt::const_iterator i=m.begin();m.end()!=i;++i)\n+    std::cerr << i->second << ' ';\n }\n \n int main()"}, {"sha": "e9bbc621c12bba09277dbf597cec3da8febe26a6", "filename": "libstdc++-v3/testsuite/23_containers/set_operators.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset_operators.cc?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -1,6 +1,6 @@\n // 2000-09-07 bgarcia@laurelnetworks.com\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,6 @@\n \n // map and set\n // libstdc++/86: map & set iterator comparisons are not type-safe\n-// XXX this is XFAIL for the time being, ie this should not compile\n int main(void)\n {\n   bool test = true;\n@@ -35,8 +34,9 @@ int main(void)\n   \n   std::set<unsigned int>::iterator itr(setByIndex.begin());\n   \n-  test &= itr != setByName.end(); // XXX - notice, it's not setByIndex!!\n-  test &= itr == setByName.end(); // XXX - notice, it's not setByIndex!!\n+  // NB: it's not setByIndex!!\n+  test &= itr != setByName.end();  // ERROR - *  XFAIL *-*-*\n+  test &= itr == setByName.end();  // ERROR - *  XFAIL *-*-*\n \n   return 0;\n }"}, {"sha": "0acdb092d4ba780b643b693a4341f5fa43df6c2f", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -21,8 +21,14 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-AUTOMAKE_OPTIONS = 1.3 cygnus dejagnu\n+AUTOMAKE_OPTIONS =  foreign dejagnu no-installinfo\n \n DEJATOOL = libstdc++\n \n-RUNTEST\t= runtest\n+EXPECT = `if [ -f $(top_builddir)/../expect/expect ] ; then \\\n+            echo $(top_builddir)/../expect/expect ; \\\n+          else echo expect ; fi`\n+\n+RUNTEST = `if [ -f $(top_srcdir)/../dejagnu/runtest ] ; then \\\n+\t       echo $(top_srcdir)/../dejagnu/runtest ; \\\n+\t    else echo runtest; fi`"}, {"sha": "3ae770e782d70ba85386a9d05f7129bbe6f95da2", "filename": "libstdc++-v3/testsuite/config/default.exp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2Fconfig%2Fdefault.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2Fconfig%2Fdefault.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fconfig%2Fdefault.exp?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 1997 Free Software Foundation, Inc.\n+# Copyright (C) 2001 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -17,4 +17,5 @@\n # Please email any bugs, comments, and/or additions to this file to:\n # bug-gcc@prep.ai.mit.edu\n \n-load_lib \"dg.exp\"\n+load_lib \"standard.exp\"\n+"}, {"sha": "8d8b5000b28bf21027c81c8b9e4f53ef9f134923", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -25,19 +25,19 @@\n ## The global associative array lib_env contains the totality\n ## of options necessary to run testcases; the meanings of which are\n ## as follows:\n-##    lib_env(CXX)       The compiler used to run testcases.\n-##    lib_env(CXXFLAGS)  Special flags passed to the compiler.\n-##    lib_env(INCLUDES)  Includes options to pass to the compiler.\n-##    lib_env(LDFLAGS)   Additional library flags.\n-##    lib_env(LIBTOOL)   Path to the `libtool' script.\n-##    lib_env(SRC_DIR)   Where V3 master source lives.\n-##    lib_env(BUILD_DIR) Where V3 is built.\n-##    lib_env(static)    Flags to pass to the linker to build a \n-##                       statically linked executable.\n-##    lib_env(shared)    Flags to pass to the linker to build a \n-##                       dynamically linked executable.\n+##    lib_env(CXX)       \tThe compiler used to run testcases.\n+##    lib_env(CXXFLAGS)  \tSpecial flags passed to the compiler.\n+##    lib_env(INCLUDES)  \tIncludes options to pass to the compiler.\n+##    lib_env(LDFLAGS)   \tAdditional library flags.\n+##    lib_env(LIBTOOL)   \tPath to the `libtool' script.\n+##    lib_env(SRC_DIR)   \tWhere V3 master source lives.\n+##    lib_env(BUILD_DIR) \tWhere V3 is built.\n+##    lib_env(static)    \tFlags to pass to the linker to build a \n+##                       \tstatically linked executable.\n+##    lib_env(shared)    \tFlags to pass to the linker to build a \n+##                       \tdynamically linked executable.\n ##    lib_env(testcase_options) Options specified by current testcase.\n-##                       These are specified through the @xxx@-keywords.\n+##                       \tThese are specified through the @xxx@-keywords.\n \n \n load_lib dg.exp\n@@ -52,7 +52,7 @@ proc libstdc++-dg-init { args } {\n     # By default, we assume we want to run program images.\n     set dg-do-what-default run\n \n-    # Get out the source and the build directories.\n+    # Get the source and the build directories.\n     set src-dir [lookfor_file $srcdir libstdc++-v3]\n     set build-dir [lookfor_file $outdir libstdc++-v3]\n \n@@ -61,15 +61,16 @@ proc libstdc++-dg-init { args } {\n     \n     # mkcheck.in used to output these information.\n     set output [remote_exec host $lib_env(CXX) -v]\n-    if { [lindex $output 0] == 0 } {\n-\tset output [lindex $output 1]\n-\tregexp \"gcc version.*$\" $output version\n-\tregsub \"\\n+\" $version \"\" version\n-\tclone_output \"Compiler: $version\"\n-\tclone_output \"Compiler flags: $lib_env(CXXFLAGS)\"\n-    } else {\n-\tperror \"Cannot determine compiler version: [lindex $output 1]\"\n-    }\n+# XXX don't try clever formatting hacks at the moment\n+#    if { [lindex $output 0] == 0 } {\n+#\tset output [lindex $output 1]\n+#\tregexp \"gcc version.*$\" $output version\n+#\tregsub \"\\n+\" $version \"\" version\n+#\tclone_output \"Compiler: $version\"\n+#\tclone_output \"Compiler flags: $lib_env(CXXFLAGS)\"\n+#    } else {\n+#\tperror \"Cannot determine compiler version: [lindex $output 1]\"\n+#    }\n }\n \n ## dg.exp callback.  Called from dg-test to run PROGRAM.\n@@ -241,7 +242,7 @@ proc libstdc++-setup-flags {src-dir build-dir} {\n \tset lib_env(shared) \"\"\n \n \tset lib_env(LIBTOOL) \"$lib_env(BUILD_DIR)/libtool\"\n-\tset lib_env(FLAGS) \"$lib_env(CXX) -B$lib_env(BUILD_DIR)/ \\\n+\tset lib_env(FLAGS) \"$lib_env(CXX) \\\n \t\t$lib_env(INCLUDES) $lib_env(CXXFLAGS)\"\n     } else {\n \tperror \"$output\"\n@@ -304,7 +305,7 @@ proc libstdc++-process-options { testfile } {\n }\n \n ###\n-### The following is an abominal hack, non-recomandable software practice.\n+### The following is an abominable hack, non-commendable software practice.\n ### This is supposed to be a very-very short term solution.\n ### Please, do not add any piece of code without my approval.\n ### -- Gaby"}, {"sha": "6077c12bc873ec86f7935a35b618e07ceb3654ab", "filename": "libstdc++-v3/testsuite/libstdc++.tests/tests.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755f30f40c8dc6d6f123433172adaed967997c42/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp?ref=755f30f40c8dc6d6f123433172adaed967997c42", "patch": "@@ -25,3 +25,4 @@ libstdc++-dg-init\n libstdc++_runtest [glob -nocomplain $srcdir/*]\n dg-finish\n \n+"}]}