{"sha": "522ec94ec5741cce6fd8cd507a2bb7742b4ab348", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIyZWM5NGVjNTc0MWNjZTZmZDhjZDUwN2EyYmI3NzQyYjRhYjM0OA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-10-25T12:26:40Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-10-25T12:26:40Z"}, "message": "s390.c (s390_decompose_address): Do not range check the displacement if base or index is the argument pointer...\n\n\t* config/s390/s390.c (s390_decompose_address): Do not range check the\n\tdisplacement if base or index is the argument pointer register.\n\nFrom-SVN: r58530", "tree": {"sha": "539cf5805f3ef36b9574279a41b1f9f11a6d68d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/539cf5805f3ef36b9574279a41b1f9f11a6d68d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/522ec94ec5741cce6fd8cd507a2bb7742b4ab348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522ec94ec5741cce6fd8cd507a2bb7742b4ab348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522ec94ec5741cce6fd8cd507a2bb7742b4ab348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522ec94ec5741cce6fd8cd507a2bb7742b4ab348/comments", "author": null, "committer": null, "parents": [{"sha": "0bfd1ad0f8e227f73e5c37331de66396fe32410a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfd1ad0f8e227f73e5c37331de66396fe32410a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfd1ad0f8e227f73e5c37331de66396fe32410a"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "40518b357c4101200d8977ead1f91faa72d2554d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522ec94ec5741cce6fd8cd507a2bb7742b4ab348/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522ec94ec5741cce6fd8cd507a2bb7742b4ab348/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=522ec94ec5741cce6fd8cd507a2bb7742b4ab348", "patch": "@@ -1,3 +1,8 @@\n+2002-10-25  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_decompose_address): Do not range check the\n+\tdisplacement if base or index is the argument pointer register.\n+\n 2002-10-24  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \tPR other/3337"}, {"sha": "0f9c5a189f290c725cf91b582dc7912adfb84a44", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522ec94ec5741cce6fd8cd507a2bb7742b4ab348/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522ec94ec5741cce6fd8cd507a2bb7742b4ab348/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=522ec94ec5741cce6fd8cd507a2bb7742b4ab348", "patch": "@@ -1597,8 +1597,20 @@ s390_decompose_address (addr, out)\n       /* Allow integer constant in range.  */\n       if (GET_CODE (disp) == CONST_INT)\n         {\n-          if (INTVAL (disp) < 0 || INTVAL (disp) >= 4096)\n-              return FALSE;\n+\t  /* If the argument pointer is involved, the displacement will change\n+\t     later anyway as the argument pointer gets eliminated.  This could\n+\t     make a valid displacement invalid, but it is more likely to make\n+\t     an invalid displacement valid, because we sometimes access the\n+\t     register save area via negative offsets to the arg pointer.\n+\t     Thus we don't check the displacement for validity here.  If after\n+\t     elimination the displacement turns out to be invalid after all,\n+\t     this is fixed up by reload in any case.  */\n+\t  if ((base && REGNO (base) == ARG_POINTER_REGNUM)\n+\t      || (indx && REGNO (indx) == ARG_POINTER_REGNUM))\n+\t    ;\n+\n+\t  else if (INTVAL (disp) < 0 || INTVAL (disp) >= 4096)\n+\t    return FALSE;\n         }\n \n       /* In the small-PIC case, the linker converts @GOT12 "}]}