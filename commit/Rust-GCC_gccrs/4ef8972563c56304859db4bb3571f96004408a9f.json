{"sha": "4ef8972563c56304859db4bb3571f96004408a9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVmODk3MjU2M2M1NjMwNDg1OWRiNGJiMzU3MWY5NjAwNDQwOGE5Zg==", "commit": {"author": {"name": "Jimmy Guo", "email": "jguo@yahoo-inc.com", "date": "2009-12-18T09:41:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-12-18T09:41:03Z"}, "message": "re PR libstdc++/40088 (Creating a std::ostringstream object locks a global mutex)\n\n2009-12-18  Jimmy Guo  <jguo@yahoo-inc.com>\n\n\tPR libstdc++/40088\n\t* src/locale_init.cc (locale::locale()): Optimize the common case\n\twhere _S_global still points to _S_classic.\n\nFrom-SVN: r155342", "tree": {"sha": "4cc186d5c1dbfa25c69dc0cc3effe02e9e54226f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cc186d5c1dbfa25c69dc0cc3effe02e9e54226f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ef8972563c56304859db4bb3571f96004408a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef8972563c56304859db4bb3571f96004408a9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ef8972563c56304859db4bb3571f96004408a9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef8972563c56304859db4bb3571f96004408a9f/comments", "author": null, "committer": null, "parents": [{"sha": "24ea727a641c58ddf03111c1bdcc2565330870c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ea727a641c58ddf03111c1bdcc2565330870c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ea727a641c58ddf03111c1bdcc2565330870c9"}], "stats": {"total": 62, "additions": 44, "deletions": 18}, "files": [{"sha": "2077dc14ec70fb5c2703f86dc6c674bc90598068", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4ef8972563c56304859db4bb3571f96004408a9f", "patch": "@@ -1,3 +1,9 @@\n+2009-12-18  Jimmy Guo  <jguo@yahoo-inc.com>\n+\n+\tPR libstdc++/40088\n+\t* src/locale_init.cc (locale::locale()): Optimize the common case\n+\twhere _S_global still points to _S_classic.\n+\n 2009-12-17  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \tPR target/42377"}, {"sha": "f5e4db15c2a215be352d40b1fe92b1f593b385c4", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=4ef8972563c56304859db4bb3571f96004408a9f", "patch": "@@ -50,6 +50,9 @@ namespace std\n    * @{\n    */\n \n+  /// cv_status\n+  enum class cv_status { no_timeout, timeout };\n+  \n   /// condition_variable\n   class condition_variable\n   {\n@@ -84,13 +87,13 @@ namespace std\n       }\n \n     template<typename _Duration>\n-      bool\n+      cv_status\n       wait_until(unique_lock<mutex>& __lock,\n \t\t const chrono::time_point<__clock_t, _Duration>& __atime)\n       { return __wait_until_impl(__lock, __atime); }\n \n     template<typename _Clock, typename _Duration>\n-      bool\n+      cv_status\n       wait_until(unique_lock<mutex>& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n@@ -110,14 +113,14 @@ namespace std\n \t\t _Predicate __p)\n       {\n \twhile (!__p())\n-\t  if (!wait_until(__lock, __atime))\n+\t  if (wait_until(__lock, __atime) == cv_status::timeout)\n \t    return __p();\n \n \treturn true;\n       }\n \n     template<typename _Rep, typename _Period>\n-      bool\n+      cv_status\n       wait_for(unique_lock<mutex>& __lock,\n \t       const chrono::duration<_Rep, _Period>& __rtime)\n       { return wait_until(__lock, __clock_t::now() + __rtime); }\n@@ -135,7 +138,7 @@ namespace std\n \n   private:\n     template<typename _Clock, typename _Duration>\n-      bool\n+      cv_status\n       __wait_until_impl(unique_lock<mutex>& __lock,\n \t\t\tconst chrono::time_point<_Clock, _Duration>& __atime)\n       {\n@@ -154,7 +157,8 @@ namespace std\n \t__gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(),\n \t\t\t\t &__ts);\n \n-\treturn _Clock::now() < __atime;\n+\treturn (_Clock::now() < __atime\n+\t\t? cv_status::no_timeout : cv_status::timeout);\n       }\n   };\n \n@@ -189,7 +193,7 @@ namespace std\n       wait(_Lock& __lock, _Predicate __p);\n \n     template<typename _Lock, typename _Clock, typename _Duration>\n-      bool\n+      cv_status\n       wait_until(_Lock& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime);\n \n@@ -201,7 +205,7 @@ namespace std\n \t\t _Predicate __p);\n \n     template<typename _Lock, typename _Rep, typename _Period>\n-      bool\n+      cv_status\n       wait_for(_Lock& __lock, const chrono::duration<_Rep, _Period>& __rtime);\n \n     template<typename _Lock, typename _Rep,"}, {"sha": "893b6063d5c814c169d3bcd0a7631fc08fdd161d", "filename": "libstdc++-v3/src/locale_init.cc", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc?ref=4ef8972563c56304859db4bb3571f96004408a9f", "patch": "@@ -208,9 +208,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   locale::locale() throw() : _M_impl(0)\n   { \n     _S_initialize();\n-    __gnu_cxx::__scoped_lock sentry(get_locale_mutex());\n-    _S_global->_M_add_reference();\n+\n+    // Checked locking to optimize the common case where _S_global\n+    // still points to _S_classic (locale::_S_initialize_once()):\n+    // - If they are the same, just increment the reference count and\n+    //   we are done.  This effectively constructs a C locale object\n+    //   identical to the static c_locale.\n+    // - Otherwise, _S_global can and may be destroyed due to\n+    //   locale::global() call on another thread, in which case we\n+    //   fall back to lock protected access to both _S_global and\n+    //   its reference count.\n     _M_impl = _S_global;\n+    if (_M_impl == _S_classic)\n+      _M_impl->_M_add_reference();\n+    else\n+      {\n+        __gnu_cxx::__scoped_lock sentry(get_locale_mutex());\n+        _S_global->_M_add_reference();\n+        _M_impl = _S_global;\n+      }\n   }\n \n   locale"}, {"sha": "9e9ad8a7b03c94042aa577374c99d252d9db1bca", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc?ref=4ef8972563c56304859db4bb3571f96004408a9f", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 67 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 70 }"}, {"sha": "5765351554e1bcdf40147698ebde6f25aa82882d", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc?ref=4ef8972563c56304859db4bb3571f96004408a9f", "patch": "@@ -31,4 +31,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 30 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 66 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 69 }"}, {"sha": "127960a625db7b5c67cec321e84d2f8b9aefe92b", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc?ref=4ef8972563c56304859db4bb3571f96004408a9f", "patch": "@@ -40,8 +40,8 @@ int main()\n       std::unique_lock<std::mutex> l(m);\n \n       auto then = std::chrono::system_clock::now();\n-      bool result = c1.wait_for(l, ms);\n-      VERIFY( !result );\n+      std::cv_status result = c1.wait_for(l, ms);\n+      VERIFY( result == std::cv_status::timeout );\n       VERIFY( (std::chrono::system_clock::now() - then) >= ms );\n       VERIFY( l.owns_lock() );\n     }"}, {"sha": "ab2e8776b8422d9855cc0f8733acdd7505d70fc4", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc?ref=4ef8972563c56304859db4bb3571f96004408a9f", "patch": "@@ -40,8 +40,8 @@ int main()\n       std::unique_lock<std::mutex> l(m);\n \n       auto then = std::chrono::monotonic_clock::now();\n-      bool result = c1.wait_until(l, then + ms);\n-      VERIFY( !result );\n+      std::cv_status result = c1.wait_until(l, then + ms);\n+      VERIFY( result == std::cv_status::timeout );\n       VERIFY( (std::chrono::monotonic_clock::now() - then) >= ms );\n       VERIFY( l.owns_lock() );\n     }"}, {"sha": "14990a292348463808f1f3364deaa7fd041e906e", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc?ref=4ef8972563c56304859db4bb3571f96004408a9f", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 175 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 179 }"}, {"sha": "1a48a9e627cfa0f22ca23f8a6c40cdc9e74f41be", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef8972563c56304859db4bb3571f96004408a9f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc?ref=4ef8972563c56304859db4bb3571f96004408a9f", "patch": "@@ -31,4 +31,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 30 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 174 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 178 }"}]}