{"sha": "64c31785445fdd307b4d918747825405def267d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjMzE3ODU0NDVmZGQzMDdiNGQ5MTg3NDc4MjU0MDVkZWYyNjdkMQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-05-27T08:13:58Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-05-27T08:13:58Z"}, "message": "re PR bootstrap/44287 (Failed to bootstrap)\n\ngcc/cp/\n2010-05-27  Kai Tietz  <kai.tietz@onevision.com>\n\n        PR bootstrap/44287\n        * rtti.c (emit_support_tinfos): Check for NULL_TREE.\n        * class.c (layout_class_type): Likewise.\n        * decl.c (finish_enum): Likewise.\n        * mangle.c (write_builitin_type): Likewise.\n\ngcc/\n2010-05-27  Kai Tietz  <kai.tietz@onevision.com>\n\n        PR bootstrp/44287\n        * c-lex.c (narrowest_unsigned_type): Check for NULL_TREE.\n        (narrow_signed_type): Likewise.\n\nFrom-SVN: r159912", "tree": {"sha": "04b352125b3c30f7b7e9831b54f686d56cfba379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04b352125b3c30f7b7e9831b54f686d56cfba379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64c31785445fdd307b4d918747825405def267d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c31785445fdd307b4d918747825405def267d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c31785445fdd307b4d918747825405def267d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c31785445fdd307b4d918747825405def267d1/comments", "author": null, "committer": null, "parents": [{"sha": "df72d556a5c8cf32bf2157396e9d261c0e58bee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df72d556a5c8cf32bf2157396e9d261c0e58bee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df72d556a5c8cf32bf2157396e9d261c0e58bee7"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "9489194f9f75b04fb13849c2443437b5da7d1ac1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c31785445fdd307b4d918747825405def267d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c31785445fdd307b4d918747825405def267d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64c31785445fdd307b4d918747825405def267d1", "patch": "@@ -1,3 +1,9 @@\n+2010-05-27  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR bootstrp/44287\n+\t* c-lex.c (narrowest_unsigned_type): Check for NULL_TREE.\n+\t(narrow_signed_type): Likewise.\n+\n 2010-05-26  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (verify_cgraph_node): Do checking that DECL match"}, {"sha": "6deec260d950f237b7ecf4dc5a05b3810fc66247", "filename": "gcc/c-lex.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c31785445fdd307b4d918747825405def267d1/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c31785445fdd307b4d918747825405def267d1/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=64c31785445fdd307b4d918747825405def267d1", "patch": "@@ -480,7 +480,11 @@ narrowest_unsigned_type (unsigned HOST_WIDE_INT low,\n \n   for (; itk < itk_none; itk += 2 /* skip unsigned types */)\n     {\n-      tree upper = TYPE_MAX_VALUE (integer_types[itk]);\n+      tree upper;\n+\n+      if (integer_types[itk] == NULL_TREE)\n+\tcontinue;\n+      upper = TYPE_MAX_VALUE (integer_types[itk]);\n \n       if ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (upper) > high\n \t  || ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (upper) == high\n@@ -508,7 +512,11 @@ narrowest_signed_type (unsigned HOST_WIDE_INT low,\n \n   for (; itk < itk_none; itk += 2 /* skip signed types */)\n     {\n-      tree upper = TYPE_MAX_VALUE (integer_types[itk]);\n+      tree upper;\n+\n+      if (integer_types[itk] == NULL_TREE)\n+\tcontinue;\n+      upper = TYPE_MAX_VALUE (integer_types[itk]);\n \n       if ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (upper) > high\n \t  || ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (upper) == high"}, {"sha": "81aa7c17fb815b3afbf7caacc8c84cbe660c345c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c31785445fdd307b4d918747825405def267d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c31785445fdd307b4d918747825405def267d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=64c31785445fdd307b4d918747825405def267d1", "patch": "@@ -1,3 +1,11 @@\n+2010-05-27  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR bootstrap/44287\n+\t* rtti.c (emit_support_tinfos): Check for NULL_TREE.\n+\t* class.c (layout_class_type): Likewise.\n+\t* decl.c (finish_enum): Likewise.\n+\t* mangle.c (write_builitin_type): Likewise.\n+\n 2010-05-26  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* cp-tree.h (cp_decl_specifier_seq): Add new bifield"}, {"sha": "c2831c1a4858f44ded9e770d5d0801abf8d50350", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c31785445fdd307b4d918747825405def267d1/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c31785445fdd307b4d918747825405def267d1/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=64c31785445fdd307b4d918747825405def267d1", "patch": "@@ -4975,14 +4975,19 @@ layout_class_type (tree t, tree *virtuals_p)\n \t     of the field.  Then, we are supposed to use the left over\n \t     bits as additional padding.  */\n \t  for (itk = itk_char; itk != itk_none; ++itk)\n-\t    if (INT_CST_LT (DECL_SIZE (field),\n-\t\t\t    TYPE_SIZE (integer_types[itk])))\n+\t    if (integer_types[itk] != NULL_TREE\n+\t\t&& INT_CST_LT (DECL_SIZE (field),\n+\t\t\t       TYPE_SIZE (integer_types[itk])))\n \t      break;\n \n \t  /* ITK now indicates a type that is too large for the\n \t     field.  We have to back up by one to find the largest\n \t     type that fits.  */\n-\t  integer_type = integer_types[itk - 1];\n+\t  do\n+\t  {\n+            --itk;\n+\t    integer_type = integer_types[itk];\n+\t  } while (itk > 0 && integer_type == NULL_TREE);\n \n \t  /* Figure out how much additional padding is required.  GCC\n \t     3.2 always created a padding field, even if it had zero"}, {"sha": "e560cb47b1d326b42723185e7a05d28bc4ab291e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c31785445fdd307b4d918747825405def267d1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c31785445fdd307b4d918747825405def267d1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=64c31785445fdd307b4d918747825405def267d1", "patch": "@@ -11402,7 +11402,8 @@ finish_enum (tree enumtype)\n            itk++)\n         {\n           underlying_type = integer_types[itk];\n-          if (TYPE_PRECISION (underlying_type) >= precision\n+          if (underlying_type != NULL_TREE\n+\t      && TYPE_PRECISION (underlying_type) >= precision\n               && TYPE_UNSIGNED (underlying_type) == unsignedp)\n             break;\n         }"}, {"sha": "e8259521adb92cec5c256686fc533a1f00d01e96", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c31785445fdd307b4d918747825405def267d1/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c31785445fdd307b4d918747825405def267d1/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=64c31785445fdd307b4d918747825405def267d1", "patch": "@@ -2055,7 +2055,8 @@ write_builtin_type (tree type)\n \t     it in the array of these nodes.  */\n \tiagain:\n \t  for (itk = 0; itk < itk_none; ++itk)\n-\t    if (type == integer_types[itk])\n+\t    if (integer_types[itk] != NULL_TREE\n+\t\t&& type == integer_types[itk])\n \t      {\n \t\t/* Print the corresponding single-letter code.  */\n \t\twrite_char (integer_type_codes[itk]);"}, {"sha": "62aa9212929530e149ab140fc9dc6a5448d6894d", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c31785445fdd307b4d918747825405def267d1/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c31785445fdd307b4d918747825405def267d1/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=64c31785445fdd307b4d918747825405def267d1", "patch": "@@ -1502,6 +1502,8 @@ emit_support_tinfos (void)\n       tree types[3];\n       int i;\n \n+      if (bltn == NULL_TREE)\n+\tcontinue;\n       types[0] = bltn;\n       types[1] = build_pointer_type (bltn);\n       types[2] = build_pointer_type (cp_build_qualified_type (bltn,"}]}