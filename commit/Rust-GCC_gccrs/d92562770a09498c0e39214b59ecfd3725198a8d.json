{"sha": "d92562770a09498c0e39214b59ecfd3725198a8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkyNTYyNzcwYTA5NDk4YzBlMzkyMTRiNTllY2ZkMzcyNTE5OGE4ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-25T08:29:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-25T08:29:01Z"}, "message": "tree-vrp.c (num_vr_values, [...]): New global vars.\n\n2011-07-25  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (num_vr_values, values_propagated): New global vars.\n\t(get_value_range): For out-of-range SSA names or names created\n\tafter propagation return a read-only varying range.\n\t(dump_all_value_ranges): Adjust.\n\t(vrp_initialize): Likewise.\n\t(vrp_finalize): Likewise.\n\nFrom-SVN: r176734", "tree": {"sha": "c5aa7633fb8d7ea5258ee0cb2edc9ad61c209318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5aa7633fb8d7ea5258ee0cb2edc9ad61c209318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d92562770a09498c0e39214b59ecfd3725198a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d92562770a09498c0e39214b59ecfd3725198a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d92562770a09498c0e39214b59ecfd3725198a8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d92562770a09498c0e39214b59ecfd3725198a8d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3bb4eb1cb3f3d41d82a46f05daba03c515be3813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb4eb1cb3f3d41d82a46f05daba03c515be3813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb4eb1cb3f3d41d82a46f05daba03c515be3813"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "47b1b3bd4813c25d055ed5205d42ad223746cd26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92562770a09498c0e39214b59ecfd3725198a8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92562770a09498c0e39214b59ecfd3725198a8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d92562770a09498c0e39214b59ecfd3725198a8d", "patch": "@@ -1,3 +1,12 @@\n+2011-07-25  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (num_vr_values, values_propagated): New global vars.\n+\t(get_value_range): For out-of-range SSA names or names created\n+\tafter propagation return a read-only varying range.\n+\t(dump_all_value_ranges): Adjust.\n+\t(vrp_initialize): Likewise.\n+\t(vrp_finalize): Likewise.\n+\n 2011-07-24  Richard Henderson  <rth@redhat.com>\n \n \tPR debug/49831"}, {"sha": "380c17fc5ab10567666a5d911352077bc443d346", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92562770a09498c0e39214b59ecfd3725198a8d/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92562770a09498c0e39214b59ecfd3725198a8d/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d92562770a09498c0e39214b59ecfd3725198a8d", "patch": "@@ -138,7 +138,9 @@ static assert_locus_t *asserts_for;\n \n /* Value range array.  After propagation, VR_VALUE[I] holds the range\n    of values that SSA name N_I may take.  */\n+static unsigned num_vr_values;\n static value_range_t **vr_value;\n+static bool values_propagated;\n \n /* For a PHI node which sets SSA name N_I, VR_COUNTS[I] holds the\n    number of executable edges we saw the last time we visited the\n@@ -658,6 +660,8 @@ abs_extent_range (value_range_t *vr, tree min, tree max)\n static value_range_t *\n get_value_range (const_tree var)\n {\n+  static const struct value_range_d vr_const_varying\n+    = { VR_VARYING, NULL_TREE, NULL_TREE, NULL };\n   value_range_t *vr;\n   tree sym;\n   unsigned ver = SSA_NAME_VERSION (var);\n@@ -666,10 +670,20 @@ get_value_range (const_tree var)\n   if (! vr_value)\n     return NULL;\n \n+  /* If we query the range for a new SSA name return an unmodifiable VARYING.\n+     We should get here at most from the substitute-and-fold stage which\n+     will never try to change values.  */\n+  if (ver >= num_vr_values)\n+    return CONST_CAST (value_range_t *, &vr_const_varying);\n+\n   vr = vr_value[ver];\n   if (vr)\n     return vr;\n \n+  /* After propagation finished do not allocate new value-ranges.  */\n+  if (values_propagated)\n+    return CONST_CAST (value_range_t *, &vr_const_varying);\n+\n   /* Create a default value range.  */\n   vr_value[ver] = vr = XCNEW (value_range_t);\n \n@@ -3931,7 +3945,7 @@ dump_all_value_ranges (FILE *file)\n {\n   size_t i;\n \n-  for (i = 0; i < num_ssa_names; i++)\n+  for (i = 0; i < num_vr_values; i++)\n     {\n       if (vr_value[i])\n \t{\n@@ -5593,7 +5607,9 @@ vrp_initialize (void)\n {\n   basic_block bb;\n \n-  vr_value = XCNEWVEC (value_range_t *, num_ssa_names);\n+  values_propagated = false;\n+  num_vr_values = num_ssa_names;\n+  vr_value = XCNEWVEC (value_range_t *, num_vr_values);\n   vr_phi_edge_counts = XCNEWVEC (int, num_ssa_names);\n \n   FOR_EACH_BB (bb)\n@@ -5720,7 +5736,7 @@ vrp_visit_assignment_or_call (gimple stmt, tree *output_p)\n static inline value_range_t\n get_vr_for_comparison (int i)\n {\n-  value_range_t vr = *(vr_value[i]);\n+  value_range_t vr = *get_value_range (ssa_name (i));\n \n   /* If name N_i does not have a valid range, use N_i as its own\n      range.  This allows us to compare against names that may\n@@ -7700,7 +7716,8 @@ static void\n vrp_finalize (void)\n {\n   size_t i;\n-  unsigned num = num_ssa_names;\n+\n+  values_propagated = true;\n \n   if (dump_file)\n     {\n@@ -7720,7 +7737,7 @@ vrp_finalize (void)\n   identify_jump_threads ();\n \n   /* Free allocated memory.  */\n-  for (i = 0; i < num; i++)\n+  for (i = 0; i < num_vr_values; i++)\n     if (vr_value[i])\n       {\n \tBITMAP_FREE (vr_value[i]->equiv);"}]}