{"sha": "efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkMmU5NjlmMjU3MWJhM2UxYmY5YTA0Yjg4ZGE3ZWUyMTQ0ZTFkOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2012-01-09T20:25:55Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2012-01-09T20:25:55Z"}, "message": "re PR fortran/51791 ([OOP] Failure to resolve typebound function call with base object in parentheses.)\n\n2012-01-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/51791\n\t* interface.c (matching_typebound_op): Drill down through\n\tpossible parentheses to obtain base expression. Do not test for\n\t'class_ok' but, instead for the class structure components.\n\t* resolve.c (resolve_ordinary_assign): Extend error message for\n\tpolymorphic assignment to advise checking for specific\n\tsubroutine.\n\n\tPR fortran/51792\n\t* resolve.c (resolve_typebound_function): Restore 'static' to\n\tdeclaration.\n\n2012-01-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/51791\n\t* gfortran.dg/typebound_operator_7.f03: Insert parentheses\n\taround base object in first assignment in main program.\n\t* gfortran.dg/typebound_operator_10.f03: New test.\n\nFrom-SVN: r183032", "tree": {"sha": "2d3d71ea917fc7d37ec5ce84aab423428e961b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d3d71ea917fc7d37ec5ce84aab423428e961b02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/comments", "author": null, "committer": null, "parents": [{"sha": "3881a3dee847b26d88355db35090214a0b5a7d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3881a3dee847b26d88355db35090214a0b5a7d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3881a3dee847b26d88355db35090214a0b5a7d43"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "d4e968e5bc53c7a0e3d9a5d1811f4b51e07502de", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9", "patch": "@@ -1,3 +1,17 @@\n+2012-01-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/51791\n+\t* interface.c (matching_typebound_op): Drill down through\n+\tpossible parentheses to obtain base expression. Do not test for\n+\t'class_ok' but, instead for the class structure components.\n+\t* resolve.c (resolve_ordinary_assign): Extend error message for\n+\tpolymorphic assignment to advise checking for specific\n+\tsubroutine.\n+\n+\tPR fortran/51792\n+\t* resolve.c (resolve_typebound_function): Restore 'static' to\n+\tdeclaration.\n+\n 2012-01-09  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/51758"}, {"sha": "94f767d740cc2115165535eab026bd79207626d9", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9", "patch": "@@ -3168,9 +3168,13 @@ matching_typebound_op (gfc_expr** tb_base,\n \tgfc_symbol* derived;\n \tgfc_try result;\n \n+\twhile (base->expr->expr_type == EXPR_OP\n+\t       && base->expr->value.op.op == INTRINSIC_PARENTHESES)\n+\t  base->expr = base->expr->value.op.op1;\n+\n \tif (base->expr->ts.type == BT_CLASS)\n \t  {\n-\t    if (!gfc_expr_attr (base->expr).class_ok)\n+\t    if (CLASS_DATA (base->expr) == NULL)\n \t      continue;\n \t    derived = CLASS_DATA (base->expr)->ts.u.derived;\n \t  }"}, {"sha": "c48e2b19e658c448803d30626cbd710e1cf24c71", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9", "patch": "@@ -5887,7 +5887,7 @@ resolve_compcall (gfc_expr* e, const char **name)\n /* Resolve a typebound function, or 'method'. First separate all\n    the non-CLASS references by calling resolve_compcall directly.  */\n \n-gfc_try\n+static gfc_try\n resolve_typebound_function (gfc_expr* e)\n {\n   gfc_symbol *declared;\n@@ -9208,8 +9208,9 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n      and coindexed; cf. F2008, 7.2.1.2 and PR 43366.  */\n   if (lhs->ts.type == BT_CLASS)\n     {\n-      gfc_error (\"Variable must not be polymorphic in assignment at %L\",\n-\t\t &lhs->where);\n+      gfc_error (\"Variable must not be polymorphic in assignment at %L \"\n+\t\t \"- check that there is a matching specific subroutine \"\n+\t\t \"for '=' operator\", &lhs->where);\n       return false;\n     }\n "}, {"sha": "32fcb4953efdae42ddf7350f6bc1ee6a3bb03ff4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9", "patch": "@@ -1,3 +1,10 @@\n+2012-01-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/51791\n+\t* gfortran.dg/typebound_operator_7.f03: Insert parentheses\n+\taround base object in first assignment in main program.\n+\t* gfortran.dg/typebound_operator_10.f03: New test.\n+\n 2012-01-09  Martin Jambor  <mjambor@suse.cz>\n \n         PR tree-optimization/51759"}, {"sha": "146eab01576e65793eb2a16555daa61806c9376d", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_10.f03", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_10.f03?ref=efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+! PR51791 and original testcase for PR46328.\n+!\n+! Contributer by Thomas Koenig  <tkoenig@gcc.gnu.org>\n+!\n+module field_module\n+  implicit none\n+  type ,abstract :: field\n+  contains\n+    procedure(field_op_real) ,deferred :: multiply_real\n+    generic :: operator(*) => multiply_real\n+  end type\n+  abstract interface\n+    function field_op_real(lhs,rhs)\n+      import :: field\n+      class(field) ,intent(in)  :: lhs\n+      real ,intent(in) :: rhs\n+      class(field) ,allocatable :: field_op_real\n+    end function\n+  end interface\n+end module\n+\n+program main\n+  use field_module\n+  implicit none\n+  class(field) ,pointer :: u\n+  u = (u)*2. ! { dg-error \"check that there is a matching specific\" }\n+end program\n+! { dg-final { cleanup-modules \"field_module\" } }"}, {"sha": "a7b0f81722af5448aa7564446e8d1f1032641ba8", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_7.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_7.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_7.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_7.f03?ref=efd2e969f2571ba3e1bf9a04b88da7ee2144e1d9", "patch": "@@ -90,7 +90,7 @@ program main\n   class(i_field) ,allocatable :: u\n   allocate (u, source = i_field (99))\n \n-  u = u*2.\n+  u = (u)*2.\n   u = (u*2.0*4.0) + u*4.0\n   u = u%multiply_real (2.0)*4.0\n   u = i_multiply_real (u, 2.0) * 4.0"}]}