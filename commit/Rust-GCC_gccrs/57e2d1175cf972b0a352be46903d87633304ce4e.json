{"sha": "57e2d1175cf972b0a352be46903d87633304ce4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlMmQxMTc1Y2Y5NzJiMGEzNTJiZTQ2OTAzZDg3NjMzMzA0Y2U0ZQ==", "commit": {"author": {"name": "Luis Machado", "email": "luis.machado@linaro.org", "date": "2018-05-07T14:08:55Z"}, "committer": {"name": "Luis Machado", "email": "luisgpm@gcc.gnu.org", "date": "2018-05-07T14:08:55Z"}, "message": "Introduce prefetch-minimum stride option\n\nThis patch adds a new option to control the minimum stride, for a memory\nreference, after which the loop prefetch pass may issue software prefetch\nhints for. There are two motivations:\n\n* Make the pass less aggressive, only issuing prefetch hints for bigger strides\nthat are more likely to benefit from prefetching. I've noticed a case in cpu2017\nwhere we were issuing thousands of hints, for example.\n\n* For processors that have a hardware prefetcher, like Falkor, it allows the\nloop prefetch pass to defer prefetching of smaller (less than the threshold)\nstrides to the hardware prefetcher instead. This prevents conflicts between\nthe software prefetcher and the hardware prefetcher.\n\nI've noticed considerable reduction in the number of prefetch hints and\nslightly positive performance numbers. This aligns GCC and LLVM in terms of\nprefetch behavior for Falkor.\n\nThe default settings should guarantee no changes for existing targets. Those\nare free to tweak the settings as necessary.\n\n2018-05-07  Luis Machado  <luis.machado@linaro.org>\n\n\tIntroduce option to limit software prefetching to known constant\n\tstrides above a specific threshold with the goal of preventing\n\tconflicts with a hardware prefetcher.\n\n\tgcc/\n\t* config/aarch64/aarch64-protos.h (cpu_prefetch_tune)\n\t<minimum_stride>: New const int field.\n\t* config/aarch64/aarch64.c (generic_prefetch_tune): Update to include\n\tminimum_stride field.\n\t(exynosm1_prefetch_tune): Likewise.\n\t(thunderxt88_prefetch_tune): Likewise.\n\t(thunderx_prefetch_tune): Likewise.\n\t(thunderx2t99_prefetch_tune): Likewise.\n\t(qdf24xx_prefetch_tune): Likewise. Set minimum_stride to 2048.\n\t(aarch64_override_options_internal): Update to set\n\tPARAM_PREFETCH_MINIMUM_STRIDE.\n\t* doc/invoke.texi (prefetch-minimum-stride): Document new option.\n\t* params.def (PARAM_PREFETCH_MINIMUM_STRIDE): New.\n\t* params.h (PARAM_PREFETCH_MINIMUM_STRIDE): Define.\n\t* tree-ssa-loop-prefetch.c (should_issue_prefetch_p): Return false if\n\tstride is constant and is below the minimum stride threshold.\n\nFrom-SVN: r259995", "tree": {"sha": "1b3038b599d5bdaa534d28e0a828211ef7f2acb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b3038b599d5bdaa534d28e0a828211ef7f2acb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57e2d1175cf972b0a352be46903d87633304ce4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e2d1175cf972b0a352be46903d87633304ce4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e2d1175cf972b0a352be46903d87633304ce4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e2d1175cf972b0a352be46903d87633304ce4e/comments", "author": {"login": "luislinaro", "id": 53092780, "node_id": "MDQ6VXNlcjUzMDkyNzgw", "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luislinaro", "html_url": "https://github.com/luislinaro", "followers_url": "https://api.github.com/users/luislinaro/followers", "following_url": "https://api.github.com/users/luislinaro/following{/other_user}", "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions", "organizations_url": "https://api.github.com/users/luislinaro/orgs", "repos_url": "https://api.github.com/users/luislinaro/repos", "events_url": "https://api.github.com/users/luislinaro/events{/privacy}", "received_events_url": "https://api.github.com/users/luislinaro/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4826f48ec9fcb7e068df047110ea74d795b6bb04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4826f48ec9fcb7e068df047110ea74d795b6bb04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4826f48ec9fcb7e068df047110ea74d795b6bb04"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "535204d3b677e0fb74a19c148154669e6e8787c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57e2d1175cf972b0a352be46903d87633304ce4e", "patch": "@@ -1,3 +1,23 @@\n+2018-05-07  Luis Machado  <luis.machado@linaro.org>\n+\n+\tgcc/\n+\t* config/aarch64/aarch64-protos.h (cpu_prefetch_tune)\n+\t<minimum_stride>: New const int field.\n+\t* config/aarch64/aarch64.c (generic_prefetch_tune): Update to include\n+\tminimum_stride field.\n+\t(exynosm1_prefetch_tune): Likewise.\n+\t(thunderxt88_prefetch_tune): Likewise.\n+\t(thunderx_prefetch_tune): Likewise.\n+\t(thunderx2t99_prefetch_tune): Likewise.\n+\t(qdf24xx_prefetch_tune): Likewise. Set minimum_stride to 2048.\n+\t(aarch64_override_options_internal): Update to set\n+\tPARAM_PREFETCH_MINIMUM_STRIDE.\n+\t* doc/invoke.texi (prefetch-minimum-stride): Document new option.\n+\t* params.def (PARAM_PREFETCH_MINIMUM_STRIDE): New.\n+\t* params.h (PARAM_PREFETCH_MINIMUM_STRIDE): Define.\n+\t* tree-ssa-loop-prefetch.c (should_issue_prefetch_p): Return false if\n+\tstride is constant and is below the minimum stride threshold.\n+\n 2018-05-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85659"}, {"sha": "5d3b9d7a06e3f68a20e90d6f9dfa560ea21cb380", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=57e2d1175cf972b0a352be46903d87633304ce4e", "patch": "@@ -230,6 +230,9 @@ struct cpu_prefetch_tune\n   const int l1_cache_size;\n   const int l1_cache_line_size;\n   const int l2_cache_size;\n+  /* The minimum constant stride beyond which we should use prefetch\n+     hints for.  */\n+  const int minimum_stride;\n   const int default_opt_level;\n };\n "}, {"sha": "7d0ba35b7be15950e40aefbe3213e7aa54ecf036", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=57e2d1175cf972b0a352be46903d87633304ce4e", "patch": "@@ -547,6 +547,7 @@ static const cpu_prefetch_tune generic_prefetch_tune =\n   -1,\t\t\t/* l1_cache_size  */\n   -1,\t\t\t/* l1_cache_line_size  */\n   -1,\t\t\t/* l2_cache_size  */\n+  -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n \n@@ -556,6 +557,7 @@ static const cpu_prefetch_tune exynosm1_prefetch_tune =\n   -1,\t\t\t/* l1_cache_size  */\n   64,\t\t\t/* l1_cache_line_size  */\n   -1,\t\t\t/* l2_cache_size  */\n+  -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n \n@@ -565,7 +567,8 @@ static const cpu_prefetch_tune qdf24xx_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   64,\t\t\t/* l1_cache_line_size  */\n   1024,\t\t\t/* l2_cache_size  */\n-  -1\t\t\t/* default_opt_level  */\n+  2048,\t\t\t/* minimum_stride */\n+  3\t\t\t/* default_opt_level  */\n };\n \n static const cpu_prefetch_tune thunderxt88_prefetch_tune =\n@@ -574,6 +577,7 @@ static const cpu_prefetch_tune thunderxt88_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   128,\t\t\t/* l1_cache_line_size  */\n   16*1024,\t\t/* l2_cache_size  */\n+  -1,\t\t\t/* minimum_stride */\n   3\t\t\t/* default_opt_level  */\n };\n \n@@ -583,6 +587,7 @@ static const cpu_prefetch_tune thunderx_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   128,\t\t\t/* l1_cache_line_size  */\n   -1,\t\t\t/* l2_cache_size  */\n+  -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n \n@@ -592,6 +597,7 @@ static const cpu_prefetch_tune thunderx2t99_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   64,\t\t\t/* l1_cache_line_size  */\n   256,\t\t\t/* l2_cache_size  */\n+  -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n \n@@ -10596,6 +10602,11 @@ aarch64_override_options_internal (struct gcc_options *opts)\n \t\t\t   aarch64_tune_params.prefetch->l2_cache_size,\n \t\t\t   opts->x_param_values,\n \t\t\t   global_options_set.x_param_values);\n+  if (aarch64_tune_params.prefetch->minimum_stride >= 0)\n+    maybe_set_param_value (PARAM_PREFETCH_MINIMUM_STRIDE,\n+\t\t\t   aarch64_tune_params.prefetch->minimum_stride,\n+\t\t\t   opts->x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n \n   /* Use the alternative scheduling-pressure algorithm by default.  */\n   maybe_set_param_value (PARAM_SCHED_PRESSURE_ALGORITHM, SCHED_PRESSURE_MODEL,"}, {"sha": "7c90abcef05a906d551651d654a980370d324d7a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=57e2d1175cf972b0a352be46903d87633304ce4e", "patch": "@@ -10733,6 +10733,21 @@ The size of L1 cache, in kilobytes.\n @item l2-cache-size\n The size of L2 cache, in kilobytes.\n \n+@item prefetch-minimum-stride\n+Minimum constant stride, in bytes, to start using prefetch hints for.  If\n+the stride is less than this threshold, prefetch hints will not be issued.\n+\n+This setting is useful for processors that have hardware prefetchers, in\n+which case there may be conflicts between the hardware prefetchers and\n+the software prefetchers.  If the hardware prefetchers have a maximum\n+stride they can handle, it should be used here to improve the use of\n+software prefetchers.\n+\n+A value of -1, the default, means we don't have a threshold and therefore\n+prefetch hints can be issued for any constant stride.\n+\n+This setting is only useful for strides that are known and constant.\n+\n @item loop-interchange-max-num-stmts\n The maximum number of stmts in a loop to be interchanged.\n "}, {"sha": "2166deb6a687a96f480df764bcaefa183814da0a", "filename": "gcc/params.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=57e2d1175cf972b0a352be46903d87633304ce4e", "patch": "@@ -790,6 +790,15 @@ DEFPARAM (PARAM_L2_CACHE_SIZE,\n \t  \"The size of L2 cache.\",\n \t  512, 0, 0)\n \n+/* The minimum constant stride beyond which we should use prefetch hints\n+   for.  */\n+\n+DEFPARAM (PARAM_PREFETCH_MINIMUM_STRIDE,\n+\t  \"prefetch-minimum-stride\",\n+\t  \"The minimum constant stride beyond which we should use prefetch \"\n+\t  \"hints for.\",\n+\t  -1, 0, 0)\n+\n /* Maximum number of statements in loop nest for loop interchange.  */\n \n DEFPARAM (PARAM_LOOP_INTERCHANGE_MAX_NUM_STMTS,"}, {"sha": "96012db31ff7f038a6b6689c71ce8a79bf0dad8f", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=57e2d1175cf972b0a352be46903d87633304ce4e", "patch": "@@ -196,6 +196,8 @@ extern void init_param_values (int *params);\n   PARAM_VALUE (PARAM_L1_CACHE_LINE_SIZE)\n #define L2_CACHE_SIZE \\\n   PARAM_VALUE (PARAM_L2_CACHE_SIZE)\n+#define PREFETCH_MINIMUM_STRIDE \\\n+  PARAM_VALUE (PARAM_PREFETCH_MINIMUM_STRIDE)\n #define USE_CANONICAL_TYPES \\\n   PARAM_VALUE (PARAM_USE_CANONICAL_TYPES)\n #define IRA_MAX_LOOPS_NUM \\"}, {"sha": "53104026e3c3d57f5e3f6010357c971d8185fb18", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2d1175cf972b0a352be46903d87633304ce4e/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=57e2d1175cf972b0a352be46903d87633304ce4e", "patch": "@@ -992,6 +992,22 @@ prune_by_reuse (struct mem_ref_group *groups)\n static bool\n should_issue_prefetch_p (struct mem_ref *ref)\n {\n+  /* Some processors may have a hardware prefetcher that may conflict with\n+     prefetch hints for a range of strides.  Make sure we don't issue\n+     prefetches for such cases if the stride is within this particular\n+     range.  */\n+  if (cst_and_fits_in_hwi (ref->group->step)\n+      && absu_hwi (int_cst_value (ref->group->step)) < PREFETCH_MINIMUM_STRIDE)\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file,\n+\t\t \"Step for reference %u:%u (%d) is less than the mininum \"\n+\t\t \"required stride of %d\\n\",\n+\t\t ref->group->uid, ref->uid, int_cst_value (ref->group->step),\n+\t\t PREFETCH_MINIMUM_STRIDE);\n+      return false;\n+    }\n+\n   /* For now do not issue prefetches for only first few of the\n      iterations.  */\n   if (ref->prefetch_before != PREFETCH_ALL)"}]}