{"sha": "b2eb4ed5aa837132cb46375a5facab6d0e7453c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJlYjRlZDVhYTgzNzEzMmNiNDYzNzVhNWZhY2FiNmQwZTc0NTNjNg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2016-04-26T10:06:16Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2016-04-26T10:06:16Z"}, "message": "Support .lbss etc. sections with Solaris as (PR target/59407)\n\n\tPR target/59407\n\t* config/i386/i386.c (SECTION_LARGE): Define.\n\t(x86_64_elf_select_section): Set it for large data/bss sections.\n\tOnly clear SECTION_WRITE for .lrodata.\n\t(x86_64_elf_section_type_flags): Set SECTION_LARGE for large\n\tdata/bss sections.\n\t* config/i386/sol2.h (MACH_DEP_SECTION_ASM_FLAG): Define.\n\t* varasm.c (default_elf_asm_named_section): Grow flagchars.\n\t[MACH_DEP_SECTION_ASM_FLAG] Emit MACH_DEP_SECTION_ASM_FLAG for\n\tSECTION_MACH_DEP.\n\t* doc/tm.texi.in (Sections, MACH_DEP_SECTION_ASM_FLAG): Describe.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r235434", "tree": {"sha": "6a96a7402ecf753faa8bc79527b942906023d5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a96a7402ecf753faa8bc79527b942906023d5f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2eb4ed5aa837132cb46375a5facab6d0e7453c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2eb4ed5aa837132cb46375a5facab6d0e7453c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2eb4ed5aa837132cb46375a5facab6d0e7453c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec1a9e7dab4b1bf244056f355fc8364b5ccf2009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1a9e7dab4b1bf244056f355fc8364b5ccf2009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1a9e7dab4b1bf244056f355fc8364b5ccf2009"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "d86fb69469e9184208a195a261a9afb5f9ea4c15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2eb4ed5aa837132cb46375a5facab6d0e7453c6", "patch": "@@ -1,3 +1,18 @@\n+2016-04-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR target/59407\n+\t* config/i386/i386.c (SECTION_LARGE): Define.\n+\t(x86_64_elf_select_section): Set it for large data/bss sections.\n+\tOnly clear SECTION_WRITE for .lrodata.\n+\t(x86_64_elf_section_type_flags): Set SECTION_LARGE for large\n+\tdata/bss sections.\n+\t* config/i386/sol2.h (MACH_DEP_SECTION_ASM_FLAG): Define.\n+\t* varasm.c (default_elf_asm_named_section): Grow flagchars.\n+\t[MACH_DEP_SECTION_ASM_FLAG] Emit MACH_DEP_SECTION_ASM_FLAG for\n+\tSECTION_MACH_DEP.\n+\t* doc/tm.texi.in (Sections, MACH_DEP_SECTION_ASM_FLAG): Describe.\n+\t* doc/tm.texi: Regenerate.\n+\n 2016-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/70704"}, {"sha": "8495e0ad8c3ea7bd7f34877654ee0771473c3604", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b2eb4ed5aa837132cb46375a5facab6d0e7453c6", "patch": "@@ -6490,6 +6490,9 @@ ix86_in_large_data_p (tree exp)\n   return false;\n }\n \n+/* i386-specific section flag to mark large sections.  */\n+#define SECTION_LARGE SECTION_MACH_DEP\n+\n /* Switch to the appropriate section for output of DECL.\n    DECL is either a `VAR_DECL' node or a constant of some sort.\n    RELOC indicates whether forming the initial value of DECL requires\n@@ -6502,7 +6505,7 @@ x86_64_elf_select_section (tree decl, int reloc,\n   if (ix86_in_large_data_p (decl))\n     {\n       const char *sname = NULL;\n-      unsigned int flags = SECTION_WRITE;\n+      unsigned int flags = SECTION_WRITE | SECTION_LARGE;\n       switch (categorize_decl_for_section (decl, reloc))\n \t{\n \tcase SECCAT_DATA:\n@@ -6529,7 +6532,7 @@ x86_64_elf_select_section (tree decl, int reloc,\n \tcase SECCAT_RODATA_MERGE_STR_INIT:\n \tcase SECCAT_RODATA_MERGE_CONST:\n \t  sname = \".lrodata\";\n-\t  flags = 0;\n+\t  flags &= ~SECTION_WRITE;\n \t  break;\n \tcase SECCAT_SRODATA:\n \tcase SECCAT_SDATA:\n@@ -6564,6 +6567,9 @@ x86_64_elf_section_type_flags (tree decl, const char *name, int reloc)\n {\n   unsigned int flags = default_section_type_flags (decl, name, reloc);\n \n+  if (ix86_in_large_data_p (decl))\n+    flags |= SECTION_LARGE;\n+\n   if (decl == NULL_TREE\n       && (strcmp (name, \".ldata.rel.ro\") == 0\n \t  || strcmp (name, \".ldata.rel.ro.local\") == 0))"}, {"sha": "5d3122e6b8f8f5a26b6d7f682dc06a29e2634b05", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=b2eb4ed5aa837132cb46375a5facab6d0e7453c6", "patch": "@@ -209,6 +209,14 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION i386_solaris_elf_named_section\n \n+/* Sun as requires \"h\" flag for large sections, GNU as can do without, but\n+   accepts \"l\".  */\n+#ifdef USE_GAS\n+#define MACH_DEP_SECTION_ASM_FLAG 'l'\n+#else\n+#define MACH_DEP_SECTION_ASM_FLAG 'h'\n+#endif\n+\n #ifndef USE_GAS\n /* Emit COMDAT group signature symbols for Sun as.  */\n #undef TARGET_ASM_FILE_END"}, {"sha": "057ac9aa517d6966a2f23bfa1e12c98885fc32ea", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b2eb4ed5aa837132cb46375a5facab6d0e7453c6", "patch": "@@ -7097,6 +7097,12 @@ defined, GCC will assume such a section does not exist.  Do not define\n both this macro and @code{FINI_SECTION_ASM_OP}.\n @end defmac\n \n+@defmac MACH_DEP_SECTION_ASM_FLAG\n+If defined, a C expression whose value is a character constant\n+containing the flag used to mark a machine-dependent section.  This\n+corresponds to the @code{SECTION_MACH_DEP} section flag.\n+@end defmac\n+\n @defmac CRT_CALL_STATIC_FUNCTION (@var{section_op}, @var{function})\n If defined, an ASM statement that switches to a different section\n via @var{section_op}, calls @var{function}, and switches back to"}, {"sha": "643f0eb2521b028a2f714a003dc020e004cca026", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=b2eb4ed5aa837132cb46375a5facab6d0e7453c6", "patch": "@@ -4982,6 +4982,12 @@ defined, GCC will assume such a section does not exist.  Do not define\n both this macro and @code{FINI_SECTION_ASM_OP}.\n @end defmac\n \n+@defmac MACH_DEP_SECTION_ASM_FLAG\n+If defined, a C expression whose value is a character constant\n+containing the flag used to mark a machine-dependent section.  This\n+corresponds to the @code{SECTION_MACH_DEP} section flag.\n+@end defmac\n+\n @defmac CRT_CALL_STATIC_FUNCTION (@var{section_op}, @var{function})\n If defined, an ASM statement that switches to a different section\n via @var{section_op}, calls @var{function}, and switches back to"}, {"sha": "c7ed06e549af6624ea2e8bb0472b6b986124dbf9", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2eb4ed5aa837132cb46375a5facab6d0e7453c6/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b2eb4ed5aa837132cb46375a5facab6d0e7453c6", "patch": "@@ -6238,7 +6238,7 @@ void\n default_elf_asm_named_section (const char *name, unsigned int flags,\n \t\t\t       tree decl)\n {\n-  char flagchars[10], *f = flagchars;\n+  char flagchars[11], *f = flagchars;\n \n   /* If we have already declared this section, we can use an\n      abbreviated form to switch back to it -- unless this section is\n@@ -6271,6 +6271,10 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n     *f++ = TLS_SECTION_ASM_FLAG;\n   if (HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n     *f++ = 'G';\n+#ifdef MACH_DEP_SECTION_ASM_FLAG\n+  if (flags & SECTION_MACH_DEP)\n+    *f++ = MACH_DEP_SECTION_ASM_FLAG;\n+#endif\n   *f = '\\0';\n \n   fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\", name, flagchars);"}]}