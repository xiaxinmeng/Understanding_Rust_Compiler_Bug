{"sha": "8d4ef2299cbf9517877dab60d48f34835758a6ee", "node_id": "C_kwDOANBUbNoAKDhkNGVmMjI5OWNiZjk1MTc4NzdkYWI2MGQ0OGYzNDgzNTc1OGE2ZWU", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2021-12-05T01:23:09Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2021-12-05T01:28:17Z"}, "message": "aix: Move AIX math builtins before new builtin machinery.\n\nThe new builtin machinery has an early exit, so move the AIX-specific\nbuiltins before the new machinery.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Move\n\tAIX math builtin initialization before new_builtins_are_live.", "tree": {"sha": "d9700ad36ffb3e8d959ee0806c868981cd815f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9700ad36ffb3e8d959ee0806c868981cd815f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d4ef2299cbf9517877dab60d48f34835758a6ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4ef2299cbf9517877dab60d48f34835758a6ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d4ef2299cbf9517877dab60d48f34835758a6ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4ef2299cbf9517877dab60d48f34835758a6ee/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e4cb66c1a12cabb78abec13013ef7263180923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e4cb66c1a12cabb78abec13013ef7263180923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e4cb66c1a12cabb78abec13013ef7263180923"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "d9736eaf21c674011ee9b7bb17ebd8f180bf3ecf", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4ef2299cbf9517877dab60d48f34835758a6ee/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4ef2299cbf9517877dab60d48f34835758a6ee/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=8d4ef2299cbf9517877dab60d48f34835758a6ee", "patch": "@@ -16479,6 +16479,29 @@ rs6000_init_builtins (void)\n       fprintf (stderr, \"\\nEnd autogenerated built-in functions.\\n\\n\\n\");\n      }\n \n+  if (TARGET_XCOFF)\n+    {\n+      /* AIX libm provides clog as __clog.  */\n+      if ((tdecl = builtin_decl_explicit (BUILT_IN_CLOG)) != NULL_TREE)\n+\tset_user_assembler_name (tdecl, \"__clog\");\n+\n+      /* When long double is 64 bit, some long double builtins of libc\n+\t functions (like __builtin_frexpl) must call the double version\n+\t (frexp) not the long double version (frexpl) that expects a 128 bit\n+\t argument.  */\n+      if (! TARGET_LONG_DOUBLE_128)\n+\t{\n+\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_FMODL)) != NULL_TREE)\n+\t    set_user_assembler_name (tdecl, \"fmod\");\n+\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_FREXPL)) != NULL_TREE)\n+\t    set_user_assembler_name (tdecl, \"frexp\");\n+\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_LDEXPL)) != NULL_TREE)\n+\t    set_user_assembler_name (tdecl, \"ldexp\");\n+\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_MODFL)) != NULL_TREE)\n+\t    set_user_assembler_name (tdecl, \"modf\");\n+\t}\n+    }\n+\n   if (new_builtins_are_live)\n     {\n       altivec_builtin_mask_for_load\n@@ -16578,29 +16601,6 @@ rs6000_init_builtins (void)\n   def_builtin (\"__builtin_cpu_is\", ftype, RS6000_BUILTIN_CPU_IS);\n   def_builtin (\"__builtin_cpu_supports\", ftype, RS6000_BUILTIN_CPU_SUPPORTS);\n \n-  if (TARGET_XCOFF)\n-    {\n-      /* AIX libm provides clog as __clog.  */\n-      if ((tdecl = builtin_decl_explicit (BUILT_IN_CLOG)) != NULL_TREE)\n-\tset_user_assembler_name (tdecl, \"__clog\");\n-\n-      /* When long double is 64 bit, some long double builtins of libc\n-\t functions (like __builtin_frexpl) must call the double version\n-\t (frexp) not the long double version (frexpl) that expects a 128 bit\n-\t argument.  */\n-      if (! TARGET_LONG_DOUBLE_128)\n-\t{\n-\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_FMODL)) != NULL_TREE)\n-\t    set_user_assembler_name (tdecl, \"fmod\");\n-\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_FREXPL)) != NULL_TREE)\n-\t    set_user_assembler_name (tdecl, \"frexp\");\n-\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_LDEXPL)) != NULL_TREE)\n-\t    set_user_assembler_name (tdecl, \"ldexp\");\n-\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_MODFL)) != NULL_TREE)\n-\t    set_user_assembler_name (tdecl, \"modf\");\n-\t}\n-    }\n-\n #ifdef SUBTARGET_INIT_BUILTINS\n   SUBTARGET_INIT_BUILTINS;\n #endif"}]}