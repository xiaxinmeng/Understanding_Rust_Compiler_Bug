{"sha": "305eeaeb7a5acd2256d075f463fe32fe80781e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1ZWVhZWI3YTVhY2QyMjU2ZDA3NWY0NjNmZTMyZmU4MDc4MWU4NQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-03-09T23:15:15Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-03-09T23:15:15Z"}, "message": "ifcvt.c (noce_try_sign_mask): New function to transform \"x = (y < 0) ? z ...\n\n\n\t* ifcvt.c (noce_try_sign_mask): New function to transform\n\t\"x = (y < 0) ? z : 0\" into the equivalent \"x = (y >> C) & z\".\n\t(noce_process_if_block): Call noce_try_sign_mask.\n\n\t* gcc.c-torture/execute/20040309-1.c: New test case.\n\nCo-Authored-By: Andrew Pinski <pinskia@physics.uc.edu>\n\nFrom-SVN: r79205", "tree": {"sha": "fde015febed56df30084c4c77d4752554520bbcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fde015febed56df30084c4c77d4752554520bbcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/305eeaeb7a5acd2256d075f463fe32fe80781e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305eeaeb7a5acd2256d075f463fe32fe80781e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305eeaeb7a5acd2256d075f463fe32fe80781e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305eeaeb7a5acd2256d075f463fe32fe80781e85/comments", "author": null, "committer": null, "parents": [{"sha": "a4f74b5884a2cb8760d36141ff6ad43183f3088a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f74b5884a2cb8760d36141ff6ad43183f3088a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f74b5884a2cb8760d36141ff6ad43183f3088a"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "d27a00bda068790cad66a3edb454bc960c2bf2f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305eeaeb7a5acd2256d075f463fe32fe80781e85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305eeaeb7a5acd2256d075f463fe32fe80781e85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=305eeaeb7a5acd2256d075f463fe32fe80781e85", "patch": "@@ -1,3 +1,10 @@\n+2004-03-09  Roger Sayle  <roger@eyesopen.com>\n+\t    Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* ifcvt.c (noce_try_sign_mask): New function to transform\n+\t\"x = (y < 0) ? z : 0\" into the equivalent \"x = (y >> C) & z\".\n+\t(noce_process_if_block): Call noce_try_sign_mask.\n+\n 2004-03-09  Andrew Pinski  <apinski@apple.com>\n \n \t* c-typeck.c (tagged_types_tu_compatible_p):"}, {"sha": "bb0aab3777e3db1507b5185d7ddb1a16ab4353a4", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305eeaeb7a5acd2256d075f463fe32fe80781e85/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305eeaeb7a5acd2256d075f463fe32fe80781e85/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=305eeaeb7a5acd2256d075f463fe32fe80781e85", "patch": "@@ -612,6 +612,7 @@ static int noce_try_cmove_arith (struct noce_if_info *);\n static rtx noce_get_alt_condition (struct noce_if_info *, rtx, rtx *);\n static int noce_try_minmax (struct noce_if_info *);\n static int noce_try_abs (struct noce_if_info *);\n+static int noce_try_sign_mask (struct noce_if_info *);\n \n /* Helper function for noce_try_store_flag*.  */\n \n@@ -1702,6 +1703,71 @@ noce_try_abs (struct noce_if_info *if_info)\n   return TRUE;\n }\n \n+/* Convert \"if (m < 0) x = b; else x = 0;\" to \"x = (m >> C) & b;\".  */\n+\n+static int\n+noce_try_sign_mask (struct noce_if_info *if_info)\n+{\n+  rtx cond, t, m, c, seq;\n+  enum machine_mode mode;\n+  enum rtx_code code;\n+\n+  if (no_new_pseudos)\n+    return FALSE;\n+\n+  cond = if_info->cond;\n+  code = GET_CODE (cond);\n+  m = XEXP (cond, 0);\n+  c = XEXP (cond, 1);\n+\n+  t = NULL_RTX;\n+  if (if_info->a == const0_rtx)\n+    {\n+      if ((code == LT && c == const0_rtx)\n+\t  || (code == LE && c == constm1_rtx))\n+\tt = if_info->b;\n+    }\n+  else if (if_info->b == const0_rtx)\n+    {\n+      if ((code == GE && c == const0_rtx)\n+\t  || (code == GT && c == constm1_rtx))\n+\tt = if_info->a;\n+    }\n+\n+  if (! t || side_effects_p (t))\n+    return FALSE;\n+\n+  /* We currently don't handle different modes.  */\n+  mode = GET_MODE (t);\n+  if (GET_MODE (m) != mode)\n+    return FALSE;\n+\n+  /* This is only profitable if T is cheap.  */\n+  if (rtx_cost (t, SET) >= COSTS_N_INSNS (2))\n+    return FALSE;\n+\n+  start_sequence ();\n+  c = gen_int_mode (GET_MODE_BITSIZE (mode) - 1, mode);\n+  m = expand_binop (mode, ashr_optab, m, c, NULL_RTX, 0, OPTAB_DIRECT);\n+  t = m ? expand_binop (mode, and_optab, m, t, NULL_RTX, 0, OPTAB_DIRECT)\n+\t: NULL_RTX;\n+\n+  if (!t)\n+    {\n+      end_sequence ();\n+      return FALSE;\n+    }\n+\n+  noce_emit_move_insn (if_info->x, t);\n+  seq = get_insns ();\n+  unshare_ifcvt_sequence (if_info, seq);\n+  end_sequence ();\n+  emit_insn_before_setloc (seq, if_info->jump,\n+\t\t\t   INSN_LOCATOR (if_info->insn_a));\n+  return TRUE;\n+}\n+\n+\n /* Similar to get_condition, only the resulting condition must be\n    valid at JUMP, instead of at EARLIEST.  */\n \n@@ -2004,6 +2070,8 @@ noce_process_if_block (struct ce_if_block * ce_info)\n       if (HAVE_conditional_move\n \t  && noce_try_cmove_arith (&if_info))\n \tgoto success;\n+      if (noce_try_sign_mask (&if_info))\n+\tgoto success;\n     }\n \n   return FALSE;"}, {"sha": "cf13c3e3bb44712d527a66ad1c8a436e42414a01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305eeaeb7a5acd2256d075f463fe32fe80781e85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305eeaeb7a5acd2256d075f463fe32fe80781e85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=305eeaeb7a5acd2256d075f463fe32fe80781e85", "patch": "@@ -1,3 +1,7 @@\n+2004-03-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/execute/20040309-1.c: New test case.\n+\n 2004-03-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/14397"}, {"sha": "49fa79560c60b4ca545f8575d64b527d379b9216", "filename": "gcc/testsuite/gcc.c-torture/execute/20040309-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305eeaeb7a5acd2256d075f463fe32fe80781e85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040309-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305eeaeb7a5acd2256d075f463fe32fe80781e85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040309-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040309-1.c?ref=305eeaeb7a5acd2256d075f463fe32fe80781e85", "patch": "@@ -0,0 +1,24 @@\n+extern void abort ();\n+\n+int foo(unsigned short x)\n+{\n+  unsigned short y;\n+  y = x > 32767 ? x - 32768 : 0;\n+  return y;\n+}\n+\n+int main()\n+{\n+  if (foo (0) != 0)\n+    abort ();\n+  if (foo (32767) != 0)\n+    abort ();\n+  if (foo (32768) != 0)\n+    abort ();\n+  if (foo (32769) != 1)\n+    abort ();\n+  if (foo (65535) != 32767)\n+    abort ();\n+  return 0;\n+}\n+"}]}