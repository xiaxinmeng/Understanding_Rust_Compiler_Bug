{"sha": "3037779978033f27614b04d4b21f4ec5d4f6b7ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzNzc3OTk3ODAzM2YyNzYxNGIwNGQ0YjIxZjRlYzVkNGY2YjdjYQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-12-11T11:09:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:09:04Z"}, "message": "[Ada] Suppress call to Initial_Condition when the annotation is ignored\n\nThis patch suppresses the generation of the Initial_Condition procedure\ntasked with verifying the run-time semantics of the pragma when the\npragma is ignored by means of -gnata, pragma Assertion_Policy, etc.\n\n------------\n-- Source --\n------------\n\n--  all_asserts_off.adc\n\npragma Assertion_Policy (Ignore);\n\n--  all_asserts_on.adc\n\npragma Assertion_Policy (Check);\n\n--  ic_off.adc\n\npragma Assertion_Policy (Initial_Condition => Ignore);\n\n--  ic_on.adc\n\npragma Assertion_Policy (Initial_Condition => Check);\n\n--  init_cond.ads\n\npackage Init_Cond\n  with SPARK_Mode,\n       Initial_Condition => Flag = False\nis\n   Flag : Boolean := True;\n\n   procedure Set_Flag;\nend Init_Cond;\n\n--  init_cond.adb\n\npackage body Init_Cond\n  with SPARK_Mode\nis\n   procedure Set_Flag is\n   begin\n      Flag := True;\n   end Set_Flag;\nend Init_Cond;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n& gcc  -c -S -gnatDG init_cond.adb -gnatec=all_asserts_on.adc\n& grep -c \"Initial_Condition;\" init_cond.adb.dg\n& grep -c \"_elabb\" init_cond.s\n& gcc  -c -S -gnatDG init_cond.adb -gnatec=ic_on.adc\n& grep -c \"Initial_Condition;\" init_cond.adb.dg\n& grep -c \"_elabb\" init_cond.s\n& gcc  -c -S -gnatDG init_cond.adb -gnatec=all_asserts_off.adc\n& grep -c \"Initial_Condition;\" init_cond.adb.dg\n& grep -c \"_elabb\" init_cond.s\n& gcc  -c -S -gnatDG init_cond.adb -gnatec=ic_off.adc\n& grep -c \"Initial_Condition;\" init_cond.adb.dg\n& grep -c \"_elabb\" init_cond.s\n2\n4\n2\n4\n0\n0\n0\n0\n\n2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_prag.adb (Expand_Pragma_Initial_Condition): Do not\n\tgenerate an Initial_Condition procedure and a call to it when\n\tthe associated pragma is ignored.\n\t* sem_ch10.adb (Analyze_Compilation_Unit): Minor cleanup.\n\nFrom-SVN: r266977", "tree": {"sha": "8c6371ab22d362c26b07a2430a8b6876764ad087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c6371ab22d362c26b07a2430a8b6876764ad087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3037779978033f27614b04d4b21f4ec5d4f6b7ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3037779978033f27614b04d4b21f4ec5d4f6b7ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3037779978033f27614b04d4b21f4ec5d4f6b7ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3037779978033f27614b04d4b21f4ec5d4f6b7ca/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13a6dfe3a1268265006628e58ec94d7d4222328d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a6dfe3a1268265006628e58ec94d7d4222328d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a6dfe3a1268265006628e58ec94d7d4222328d"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "9ed28c45c459d40b7d25f0f42c4d465b8638a363", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3037779978033f27614b04d4b21f4ec5d4f6b7ca/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3037779978033f27614b04d4b21f4ec5d4f6b7ca/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3037779978033f27614b04d4b21f4ec5d4f6b7ca", "patch": "@@ -1,3 +1,10 @@\n+2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Initial_Condition): Do not\n+\tgenerate an Initial_Condition procedure and a call to it when\n+\tthe associated pragma is ignored.\n+\t* sem_ch10.adb (Analyze_Compilation_Unit): Minor cleanup.\n+\n 2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* fe.h (Debug_Generated_Code): Declare."}, {"sha": "16d32125991560bd8ffbffa09f1ce23c308383e0", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3037779978033f27614b04d4b21f4ec5d4f6b7ca/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3037779978033f27614b04d4b21f4ec5d4f6b7ca/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=3037779978033f27614b04d4b21f4ec5d4f6b7ca", "patch": "@@ -1636,10 +1636,16 @@ package body Exp_Prag is\n       Expr := Get_Pragma_Arg (First (Pragma_Argument_Associations (IC_Prag)));\n       Loc  := Sloc (IC_Prag);\n \n+      --  Nothing to do when the pragma is ignored because its semantics are\n+      --  suppressed.\n+\n+      if Is_Ignored (IC_Prag) then\n+         return;\n+\n       --  Nothing to do when the pragma or its argument are illegal because\n       --  there is no valid expression to check.\n \n-      if Error_Posted (IC_Prag) or else Error_Posted (Expr) then\n+      elsif Error_Posted (IC_Prag) or else Error_Posted (Expr) then\n          return;\n       end if;\n "}, {"sha": "10e863f91cc95c5dc0f2a29f11b9f1eadcaed051", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3037779978033f27614b04d4b21f4ec5d4f6b7ca/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3037779978033f27614b04d4b21f4ec5d4f6b7ca/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=3037779978033f27614b04d4b21f4ec5d4f6b7ca", "patch": "@@ -1203,8 +1203,6 @@ package body Sem_Ch10 is\n             --  binder generated code of all the units involved in a partition\n             --  when control-flow preservation is requested.\n \n-            --  Case of units which do not require an elaboration entity\n-\n             if not Opt.Suppress_Control_Flow_Optimizations\n               and then\n               ( --  Pure units do not need checks\n@@ -1232,16 +1230,16 @@ package body Sem_Ch10 is\n                 or else Acts_As_Spec (N)\n               )\n             then\n-               --  This is a case where we only need the entity for\n-               --  checking to prevent multiple elaboration checks.\n+               --  This is a case where we only need the entity for checking to\n+               --  prevent multiple elaboration checks.\n \n                Set_Elaboration_Entity_Required (Spec_Id, False);\n \n-            --  Case of elaboration entity is required for access before\n-            --  elaboration checking (so certainly we must build it).\n+            --  Otherwise the unit requires an elaboration entity because it\n+            --  carries a body.\n \n             else\n-               Set_Elaboration_Entity_Required (Spec_Id, True);\n+               Set_Elaboration_Entity_Required (Spec_Id);\n             end if;\n \n             Build_Elaboration_Entity (N, Spec_Id);"}]}