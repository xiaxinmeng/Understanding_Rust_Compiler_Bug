{"sha": "fa2050d2664411f84dfdfcdcea9c509144ba0b96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyMDUwZDI2NjQ0MTFmODRkZmRmY2RjZWE5YzUwOTE0NGJhMGI5Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-08-24T15:09:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-08-24T15:09:10Z"}, "message": "re PR tree-optimization/33166 (ICE in get_indirect_ref_operands, at tree-ssa-operands.c:1698)\n\n2007-08-24  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/33166\n\t* tree-ssa.c (useless_type_conversion_p): Split into a\n\trecursive and a non-recursive part.\n\t(useless_type_conversion_p_1): New function.\n\t* tree-ssa-ccp.c (fold_stmt_r): Make sure that the result\n\tfrom maybe_fold_offset_to_reference is trivially convertible\n\tto the desired type before doing the simplification.\n\n\t* gcc.c-torture/compile/pr33166.c: New testcase.\n\nFrom-SVN: r127771", "tree": {"sha": "e1badd70aec0549a564c0a232d88b4610c7d380a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1badd70aec0549a564c0a232d88b4610c7d380a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa2050d2664411f84dfdfcdcea9c509144ba0b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2050d2664411f84dfdfcdcea9c509144ba0b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2050d2664411f84dfdfcdcea9c509144ba0b96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2050d2664411f84dfdfcdcea9c509144ba0b96/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9"}], "stats": {"total": 114, "additions": 77, "deletions": 37}, "files": [{"sha": "02646a702d79d51d73ee29b75ad3448899c4ce24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2050d2664411f84dfdfcdcea9c509144ba0b96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2050d2664411f84dfdfcdcea9c509144ba0b96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa2050d2664411f84dfdfcdcea9c509144ba0b96", "patch": "@@ -1,3 +1,13 @@\n+2007-08-24  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/33166\n+\t* tree-ssa.c (useless_type_conversion_p): Split into a\n+\trecursive and a non-recursive part.\n+\t(useless_type_conversion_p_1): New function.\n+\t* tree-ssa-ccp.c (fold_stmt_r): Make sure that the result\n+\tfrom maybe_fold_offset_to_reference is trivially convertible\n+\tto the desired type before doing the simplification.\n+\n 2007-08-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* expr.c (store_expr): Optimize initialization of an array"}, {"sha": "54da80e5169c7317f5bfcc735c5e89dbc418622c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2050d2664411f84dfdfcdcea9c509144ba0b96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2050d2664411f84dfdfcdcea9c509144ba0b96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa2050d2664411f84dfdfcdcea9c509144ba0b96", "patch": "@@ -1,3 +1,8 @@\n+2007-08-24  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/33166\n+\t* gcc.c-torture/compile/pr33166.c: New testcase.\n+\n 2007-08-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33139"}, {"sha": "a48c529c3fe0d0832de94172b43e471bcd3960dc", "filename": "gcc/testsuite/gcc.c-torture/compile/pr33166.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2050d2664411f84dfdfcdcea9c509144ba0b96/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr33166.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2050d2664411f84dfdfcdcea9c509144ba0b96/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr33166.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr33166.c?ref=fa2050d2664411f84dfdfcdcea9c509144ba0b96", "patch": "@@ -0,0 +1,10 @@\n+static void ConvertAddr (char *saddr, void **addr)\n+{\n+  *addr = (void *) &saddr;\n+}\n+void DefineSelf (char *addr)\n+{\n+  ConvertAddr (addr, (void **) &addr);\n+  if (addr[0] == 127 && addr[3] == 1)\n+    ;\n+}"}, {"sha": "e0829f599170a5f3a0e4ff75e0b5a9282f68f6e3", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2050d2664411f84dfdfcdcea9c509144ba0b96/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2050d2664411f84dfdfcdcea9c509144ba0b96/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=fa2050d2664411f84dfdfcdcea9c509144ba0b96", "patch": "@@ -2060,7 +2060,12 @@ fold_stmt_r (tree *expr_p, int *walk_subtrees, void *data)\n \t\t      (TREE_OPERAND (expr, 0),\n \t\t       integer_zero_node,\n \t\t       TREE_TYPE (TREE_TYPE (expr)))))\n-        t = build_fold_addr_expr_with_type (t, TREE_TYPE (expr));\n+\t{\n+\t  tree ptr_type = build_pointer_type (TREE_TYPE (t));\n+\t  if (!useless_type_conversion_p (TREE_TYPE (expr), ptr_type))\n+\t    return NULL_TREE;\n+          t = build_fold_addr_expr_with_type (t, ptr_type);\n+\t}\n       break;\n \n       /* ??? Could handle more ARRAY_REFs here, as a variant of INDIRECT_REF."}, {"sha": "633e446fe1a098b6eadf01c05a616c3776623d65", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 46, "deletions": 36, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2050d2664411f84dfdfcdcea9c509144ba0b96/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2050d2664411f84dfdfcdcea9c509144ba0b96/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=fa2050d2664411f84dfdfcdcea9c509144ba0b96", "patch": "@@ -885,32 +885,10 @@ delete_tree_ssa (void)\n   cfun->gimple_df = NULL;\n }\n \n+/* Helper function for useless_type_conversion_p.  */\n \n-/* Return true if the conversion from INNER_TYPE to OUTER_TYPE is a\n-   useless type conversion, otherwise return false.\n-\n-   This function implicitly defines the middle-end type system.  With\n-   the notion of 'a < b' meaning that useless_type_conversion_p (a, b)\n-   holds and 'a > b' meaning that useless_type_conversion_p (b, a) holds,\n-   the following invariants shall be fulfilled:\n-\n-     1) useless_type_conversion_p is transitive.\n-\tIf a < b and b < c then a < c.\n-\n-     2) useless_type_conversion_p is not symmetric.\n-\tFrom a < b does not follow a > b.\n-\n-     3) Types define the available set of operations applicable to values.\n-\tA type conversion is useless if the operations for the target type\n-\tis a subset of the operations for the source type.  For example\n-\tcasts to void* are useless, casts from void* are not (void* can't\n-\tbe dereferenced or offsetted, but copied, hence its set of operations\n-\tis a strict subset of that of all other data pointer types).  Casts\n-\tto const T* are useless (can't be written to), casts from const T*\n-\tto T* are not.  */\n-\n-bool\n-useless_type_conversion_p (tree outer_type, tree inner_type)\n+static bool\n+useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n {\n   /* Qualifiers on value types do not matter.  */\n   inner_type = TYPE_MAIN_VARIANT (inner_type);\n@@ -964,11 +942,6 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n   else if (POINTER_TYPE_P (inner_type)\n \t   && POINTER_TYPE_P (outer_type))\n     {\n-      /* If the outer type is (void *), then the conversion is not\n-\t necessary.  */\n-      if (TREE_CODE (TREE_TYPE (outer_type)) == VOID_TYPE)\n-\treturn true;\n-\n       /* Don't lose casts between pointers to volatile and non-volatile\n \t qualified types.  Doing so would result in changing the semantics\n \t of later accesses.  */\n@@ -1002,22 +975,22 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n \t to types are effectively the same.  We can strip qualifiers\n \t on pointed-to types for further comparison, which is done in\n \t the callee.  */\n-      return useless_type_conversion_p (TREE_TYPE (outer_type),\n-\t\t\t\t        TREE_TYPE (inner_type));\n+      return useless_type_conversion_p_1 (TREE_TYPE (outer_type),\n+\t\t\t\t          TREE_TYPE (inner_type));\n     }\n \n   /* Recurse for complex types.  */\n   else if (TREE_CODE (inner_type) == COMPLEX_TYPE\n \t   && TREE_CODE (outer_type) == COMPLEX_TYPE)\n-    return useless_type_conversion_p (TREE_TYPE (outer_type),\n-\t\t\t\t      TREE_TYPE (inner_type));\n+    return useless_type_conversion_p_1 (TREE_TYPE (outer_type),\n+\t\t\t\t        TREE_TYPE (inner_type));\n \n   /* Recurse for vector types with the same number of subparts.  */\n   else if (TREE_CODE (inner_type) == VECTOR_TYPE\n \t   && TREE_CODE (outer_type) == VECTOR_TYPE\n \t   && TYPE_PRECISION (inner_type) == TYPE_PRECISION (outer_type))\n-    return useless_type_conversion_p (TREE_TYPE (outer_type),\n-\t\t\t\t      TREE_TYPE (inner_type));\n+    return useless_type_conversion_p_1 (TREE_TYPE (outer_type),\n+\t\t\t\t        TREE_TYPE (inner_type));\n \n   /* For aggregates we may need to fall back to structural equality\n      checks.  */\n@@ -1037,6 +1010,43 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n   return false;\n }\n \n+/* Return true if the conversion from INNER_TYPE to OUTER_TYPE is a\n+   useless type conversion, otherwise return false.\n+\n+   This function implicitly defines the middle-end type system.  With\n+   the notion of 'a < b' meaning that useless_type_conversion_p (a, b)\n+   holds and 'a > b' meaning that useless_type_conversion_p (b, a) holds,\n+   the following invariants shall be fulfilled:\n+\n+     1) useless_type_conversion_p is transitive.\n+\tIf a < b and b < c then a < c.\n+\n+     2) useless_type_conversion_p is not symmetric.\n+\tFrom a < b does not follow a > b.\n+\n+     3) Types define the available set of operations applicable to values.\n+\tA type conversion is useless if the operations for the target type\n+\tis a subset of the operations for the source type.  For example\n+\tcasts to void* are useless, casts from void* are not (void* can't\n+\tbe dereferenced or offsetted, but copied, hence its set of operations\n+\tis a strict subset of that of all other data pointer types).  Casts\n+\tto const T* are useless (can't be written to), casts from const T*\n+\tto T* are not.  */\n+\n+bool\n+useless_type_conversion_p (tree outer_type, tree inner_type)\n+{\n+  /* If the outer type is (void *), then the conversion is not\n+     necessary.  We have to make sure to not apply this while\n+     recursing though.  */\n+  if (POINTER_TYPE_P (inner_type)\n+      && POINTER_TYPE_P (outer_type)\n+      && TREE_CODE (TREE_TYPE (outer_type)) == VOID_TYPE)\n+    return true;\n+\n+  return useless_type_conversion_p_1 (outer_type, inner_type);\n+}\n+\n /* Return true if a conversion from either type of TYPE1 and TYPE2\n    to the other is not required.  Otherwise return false.  */\n "}]}