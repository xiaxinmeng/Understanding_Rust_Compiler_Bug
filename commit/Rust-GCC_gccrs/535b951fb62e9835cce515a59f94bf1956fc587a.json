{"sha": "535b951fb62e9835cce515a59f94bf1956fc587a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1Yjk1MWZiNjJlOTgzNWNjZTUxNWE1OWY5NGJmMTk1NmZjNTg3YQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2010-07-13T10:41:15Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2010-07-13T10:41:15Z"}, "message": "re PR target/44761 (sh.md warnings)\n\n\tPR target/44761\n\t* mode-switching.c (optimize_mode_switching): Add ATTRIBUTE_UNUSED\n\tto variable emited.\n\t* config/sh/sh.c (sh_expand_epilogue): Remove unused variable.\n\t* config/sh/sh.md (symGOT_load): Likewise.\n\t(symDTPOFF2reg): Likewise.\n\t(symTPOFF2reg): Likewise.\n\nFrom-SVN: r162135", "tree": {"sha": "3a5b3e906bd47435e0a953fd1b5a864811c5637c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a5b3e906bd47435e0a953fd1b5a864811c5637c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/535b951fb62e9835cce515a59f94bf1956fc587a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535b951fb62e9835cce515a59f94bf1956fc587a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535b951fb62e9835cce515a59f94bf1956fc587a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535b951fb62e9835cce515a59f94bf1956fc587a/comments", "author": null, "committer": null, "parents": [{"sha": "6d06590db7d87474cc9ff2b685743af067e72628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d06590db7d87474cc9ff2b685743af067e72628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d06590db7d87474cc9ff2b685743af067e72628"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "daf042a0587766657f92de0dc7278c9fd5508f7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535b951fb62e9835cce515a59f94bf1956fc587a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535b951fb62e9835cce515a59f94bf1956fc587a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=535b951fb62e9835cce515a59f94bf1956fc587a", "patch": "@@ -1,3 +1,13 @@\n+2010-07-13  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/44761\n+\t* mode-switching.c (optimize_mode_switching): Add ATTRIBUTE_UNUSED\n+\tto variable emited.\n+\t* config/sh/sh.c (sh_expand_epilogue): Remove unused variable.\n+\t* config/sh/sh.md (symGOT_load): Likewise.\n+\t(symDTPOFF2reg): Likewise.\n+\t(symTPOFF2reg): Likewise.\n+\n 2010-07-13  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* expmed.c (MAX_BITS_PER_WORD): Moved to expmed.h."}, {"sha": "4f5b59c118d105f7c64828eeae3979fa242f869a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535b951fb62e9835cce515a59f94bf1956fc587a/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535b951fb62e9835cce515a59f94bf1956fc587a/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=535b951fb62e9835cce515a59f94bf1956fc587a", "patch": "@@ -6861,13 +6861,12 @@ sh_expand_prologue (void)\n \t  for (i = 0; i < NPARM_REGS(SImode); i++)\n \t    {\n \t      int rn = NPARM_REGS(SImode) + FIRST_PARM_REG - i - 1;\n-\t      rtx insn;\n \n \t      if (i >= (NPARM_REGS(SImode)\n \t\t\t- crtl->args.info.arg_count[(int) SH_ARG_INT]\n \t\t\t))\n \t\tbreak;\n-\t      insn = push (rn);\n+\t      push (rn);\n \t    }\n \t}\n     }\n@@ -7232,7 +7231,7 @@ sh_expand_epilogue (bool sibcall_p)\n \t{\n \t  enum machine_mode mode = (enum machine_mode) entry->mode;\n \t  int reg = entry->reg;\n-\t  rtx reg_rtx, mem_rtx, post_inc = NULL_RTX, insn;\n+\t  rtx reg_rtx, mem_rtx, post_inc = NULL_RTX;\n \n \t  offset = offset_base + entry->offset;\n \t  reg_rtx = gen_rtx_REG (mode, reg);\n@@ -7305,7 +7304,7 @@ sh_expand_epilogue (bool sibcall_p)\n \t  if ((reg == PR_REG || SPECIAL_REGISTER_P (reg))\n \t      && mem_rtx != post_inc)\n \t    {\n-\t      insn = emit_move_insn (r0, mem_rtx);\n+\t      emit_move_insn (r0, mem_rtx);\n \t      mem_rtx = r0;\n \t    }\n \t  else if (TARGET_REGISTER_P (reg))\n@@ -7314,13 +7313,13 @@ sh_expand_epilogue (bool sibcall_p)\n \n \t      /* Give the scheduler a bit of freedom by using up to\n \t\t MAX_TEMPS registers in a round-robin fashion.  */\n-\t      insn = emit_move_insn (tmp_reg, mem_rtx);\n+\t      emit_move_insn (tmp_reg, mem_rtx);\n \t      mem_rtx = tmp_reg;\n \t      if (*++tmp_pnt < 0)\n \t\ttmp_pnt = schedule.temps;\n \t    }\n \n-\t  insn = emit_move_insn (reg_rtx, mem_rtx);\n+\t  emit_move_insn (reg_rtx, mem_rtx);\n \t}\n \n       gcc_assert (entry->offset + offset_base == d + d_rounding);"}, {"sha": "495e15105d271e49f922830909e36fd77d3a8899", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535b951fb62e9835cce515a59f94bf1956fc587a/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535b951fb62e9835cce515a59f94bf1956fc587a/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=535b951fb62e9835cce515a59f94bf1956fc587a", "patch": "@@ -8469,7 +8469,7 @@ label:\n   \"\"\n   \"\n {\n-  rtx insn, mem;\n+  rtx mem;\n \n   operands[2] = !can_create_pseudo_p () ? operands[0] : gen_reg_rtx (Pmode);\n   operands[3] = !can_create_pseudo_p () ? operands[0] : gen_reg_rtx (Pmode);\n@@ -8518,7 +8518,7 @@ label:\n   mem = gen_rtx_MEM (Pmode, operands[3]);\n   MEM_NOTRAP_P (mem) = 1;\n   /* ??? Should we have a special alias set for the GOT?  */\n-  insn = emit_move_insn (operands[0], mem);\n+  emit_move_insn (operands[0], mem);\n \n   DONE;\n }\")\n@@ -8685,16 +8685,15 @@ mov.l\\\\t1f,r4\\\\n\\\\\n   \"\"\n   \"\n {\n-  rtx dtpoffsym, insn;\n+  rtx dtpoffsym;\n   rtx t = (!can_create_pseudo_p ()\n \t   ? operands[0]\n \t   : gen_reg_rtx (GET_MODE (operands[0])));\n \n   dtpoffsym = gen_sym2DTPOFF (operands[1]);\n   PUT_MODE (dtpoffsym, Pmode);\n   emit_move_insn (t, dtpoffsym);\n-  insn = emit_move_insn (operands[0],\n-\t\t\t gen_rtx_PLUS (Pmode, t, operands[2]));\n+  emit_move_insn (operands[0], gen_rtx_PLUS (Pmode, t, operands[2]));\n   DONE;\n }\")\n \n@@ -8736,11 +8735,11 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   \"\"\n   \"\n {\n-  rtx tpoffsym, insn;\n+  rtx tpoffsym;\n \n   tpoffsym = gen_sym2TPOFF (operands[1]);\n   PUT_MODE (tpoffsym, Pmode);\n-  insn = emit_move_insn (operands[0], tpoffsym);\n+  emit_move_insn (operands[0], tpoffsym);\n   DONE;\n }\")\n "}, {"sha": "306fb5d4c25de52bf36ed24a63d0d0c97e8e6e60", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535b951fb62e9835cce515a59f94bf1956fc587a/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535b951fb62e9835cce515a59f94bf1956fc587a/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=535b951fb62e9835cce515a59f94bf1956fc587a", "patch": "@@ -1,6 +1,6 @@\n /* CPU mode switching\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n-   2009 Free Software Foundation, Inc.\n+   2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -445,7 +445,7 @@ optimize_mode_switching (void)\n   int i, j;\n   int n_entities;\n   int max_num_modes = 0;\n-  bool emited = false;\n+  bool emited ATTRIBUTE_UNUSED = false;\n   basic_block post_entry ATTRIBUTE_UNUSED, pre_exit ATTRIBUTE_UNUSED;\n \n   for (e = N_ENTITIES - 1, n_entities = 0; e >= 0; e--)"}]}