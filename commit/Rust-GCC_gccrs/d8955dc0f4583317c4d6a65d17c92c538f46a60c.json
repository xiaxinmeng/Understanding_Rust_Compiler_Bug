{"sha": "d8955dc0f4583317c4d6a65d17c92c538f46a60c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg5NTVkYzBmNDU4MzMxN2M0ZDZhNjVkMTdjOTJjNTM4ZjQ2YTYwYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-15T11:47:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-15T11:47:27Z"}, "message": "re PR debug/91929 (missing inline subroutine information in build using sin/cos)\n\n2019-10-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91929\n\t* tree-ssa-pre.c (pre_expr_d::loc): New member.\n\t(get_or_alloc_expr_for_name): Initialize it.\n\t(get_or_alloc_expr_for_constant): Likewise.\n\t(phi_translate_1): Copy it.\n\t(create_expression_by_pieces): Use the original location\n\tof the expression for the inserted stmt.\n\t(compute_avail): Record the location of the stmt for the\n\texpressions created.\n\nFrom-SVN: r276993", "tree": {"sha": "9ec3452c16c91a86355c78b458d0affa92cc9f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ec3452c16c91a86355c78b458d0affa92cc9f43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8955dc0f4583317c4d6a65d17c92c538f46a60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8955dc0f4583317c4d6a65d17c92c538f46a60c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8955dc0f4583317c4d6a65d17c92c538f46a60c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8955dc0f4583317c4d6a65d17c92c538f46a60c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "386c40778648fecf4807566d5254dec191d35dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386c40778648fecf4807566d5254dec191d35dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386c40778648fecf4807566d5254dec191d35dab"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "09723d9d9529b213cadc18e39d27632ed9a4232e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8955dc0f4583317c4d6a65d17c92c538f46a60c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8955dc0f4583317c4d6a65d17c92c538f46a60c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8955dc0f4583317c4d6a65d17c92c538f46a60c", "patch": "@@ -1,3 +1,15 @@\n+2019-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91929\n+\t* tree-ssa-pre.c (pre_expr_d::loc): New member.\n+\t(get_or_alloc_expr_for_name): Initialize it.\n+\t(get_or_alloc_expr_for_constant): Likewise.\n+\t(phi_translate_1): Copy it.\n+\t(create_expression_by_pieces): Use the original location\n+\tof the expression for the inserted stmt.\n+\t(compute_avail): Record the location of the stmt for the\n+\texpressions created.\n+\n 2019-10-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-ssa-strlen.c (count_nonzero_bytes): Check tree_fits_uhwi_p"}, {"sha": "0f8f424c30ce6a31d5ba81852b3bd79304b2775c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8955dc0f4583317c4d6a65d17c92c538f46a60c/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8955dc0f4583317c4d6a65d17c92c538f46a60c/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=d8955dc0f4583317c4d6a65d17c92c538f46a60c", "patch": "@@ -257,6 +257,7 @@ typedef struct pre_expr_d : nofree_ptr_hash <pre_expr_d>\n {\n   enum pre_expr_kind kind;\n   unsigned int id;\n+  location_t loc;\n   pre_expr_union u;\n \n   /* hash_table support.  */\n@@ -421,6 +422,7 @@ get_or_alloc_expr_for_name (tree name)\n \n   result = pre_expr_pool.allocate ();\n   result->kind = NAME;\n+  result->loc = UNKNOWN_LOCATION;\n   PRE_EXPR_NAME (result) = name;\n   alloc_expression_id (result);\n   return result;\n@@ -1077,6 +1079,7 @@ get_or_alloc_expr_for_constant (tree constant)\n \n   newexpr = pre_expr_pool.allocate ();\n   newexpr->kind = CONSTANT;\n+  newexpr->loc = UNKNOWN_LOCATION;\n   PRE_EXPR_CONSTANT (newexpr) = constant;\n   alloc_expression_id (newexpr);\n   value_id = get_or_alloc_constant_value_id (constant);\n@@ -1334,6 +1337,7 @@ phi_translate_1 (bitmap_set_t dest,\n {\n   basic_block pred = e->src;\n   basic_block phiblock = e->dest;\n+  location_t expr_loc = expr->loc;\n   switch (expr->kind)\n     {\n     case NARY:\n@@ -1436,6 +1440,7 @@ phi_translate_1 (bitmap_set_t dest,\n \t    expr = pre_expr_pool.allocate ();\n \t    expr->kind = NARY;\n \t    expr->id = 0;\n+\t    expr->loc = expr_loc;\n \t    if (nary && !nary->predicated_values)\n \t      {\n \t\tPRE_EXPR_NARY (expr) = nary;\n@@ -1587,6 +1592,7 @@ phi_translate_1 (bitmap_set_t dest,\n \t    expr = pre_expr_pool.allocate ();\n \t    expr->kind = REFERENCE;\n \t    expr->id = 0;\n+\t    expr->loc = expr_loc;\n \n \t    if (newref)\n \t      new_val_id = newref->value_id;\n@@ -2789,6 +2795,7 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n \t      args.quick_push (arg);\n \t    }\n \t  gcall *call = gimple_build_call_vec (fn, args);\n+\t  gimple_set_location (call, expr->loc);\n \t  gimple_call_set_fntype (call, currop->type);\n \t  if (sc)\n \t    gimple_call_set_chain (call, sc);\n@@ -2822,6 +2829,7 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n \t    return NULL_TREE;\n \t  name = make_temp_ssa_name (exprtype, NULL, \"pretmp\");\n \t  newstmt = gimple_build_assign (name, folded);\n+\t  gimple_set_location (newstmt, expr->loc);\n \t  gimple_seq_add_stmt_without_update (&forced_stmts, newstmt);\n \t  gimple_set_vuse (newstmt, BB_LIVE_VOP_ON_EXIT (block));\n \t  folded = name;\n@@ -2860,6 +2868,7 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n \t    folded = build_constructor (nary->type, elts);\n \t    name = make_temp_ssa_name (exprtype, NULL, \"pretmp\");\n \t    newstmt = gimple_build_assign (name, folded);\n+\t    gimple_set_location (newstmt, expr->loc);\n \t    gimple_seq_add_stmt_without_update (&forced_stmts, newstmt);\n \t    folded = name;\n \t  }\n@@ -2868,16 +2877,17 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n \t    switch (nary->length)\n \t      {\n \t      case 1:\n-\t\tfolded = gimple_build (&forced_stmts, nary->opcode, nary->type,\n-\t\t\t\t       genop[0]);\n+\t\tfolded = gimple_build (&forced_stmts, expr->loc,\n+\t\t\t\t       nary->opcode, nary->type, genop[0]);\n \t\tbreak;\n \t      case 2:\n-\t\tfolded = gimple_build (&forced_stmts, nary->opcode, nary->type,\n-\t\t\t\t       genop[0], genop[1]);\n+\t\tfolded = gimple_build (&forced_stmts, expr->loc, nary->opcode,\n+\t\t\t\t       nary->type, genop[0], genop[1]);\n \t\tbreak;\n \t      case 3:\n-\t\tfolded = gimple_build (&forced_stmts, nary->opcode, nary->type,\n-\t\t\t\t       genop[0], genop[1], genop[2]);\n+\t\tfolded = gimple_build (&forced_stmts, expr->loc, nary->opcode,\n+\t\t\t\t       nary->type, genop[0], genop[1],\n+\t\t\t\t       genop[2]);\n \t\tbreak;\n \t      default:\n \t\tgcc_unreachable ();\n@@ -3856,6 +3866,7 @@ compute_avail (void)\n \t\t    result = pre_expr_pool.allocate ();\n \t\t    result->kind = REFERENCE;\n \t\t    result->id = 0;\n+\t\t    result->loc = gimple_location (stmt);\n \t\t    PRE_EXPR_REFERENCE (result) = ref;\n \n \t\t    get_or_alloc_expression_id (result);\n@@ -3896,6 +3907,7 @@ compute_avail (void)\n \t\t      result = pre_expr_pool.allocate ();\n \t\t      result->kind = NARY;\n \t\t      result->id = 0;\n+\t\t      result->loc = gimple_location (stmt);\n \t\t      PRE_EXPR_NARY (result) = nary;\n \t\t      break;\n \t\t    }\n@@ -4013,6 +4025,7 @@ compute_avail (void)\n \t\t      result = pre_expr_pool.allocate ();\n \t\t      result->kind = REFERENCE;\n \t\t      result->id = 0;\n+\t\t      result->loc = gimple_location (stmt);\n \t\t      PRE_EXPR_REFERENCE (result) = ref;\n \t\t      break;\n \t\t    }"}]}