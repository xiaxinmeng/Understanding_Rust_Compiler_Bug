{"sha": "eb448bee82b18bb8130c2d848e6c9e89e8503bd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI0NDhiZWU4MmIxOGJiODEzMGMyZDg0OGU2YzllODllODUwM2JkMA==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2012-07-22T07:05:28Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2012-07-22T07:05:28Z"}, "message": "NetLogic Microsystems Inc.\n\n2012-07-22  Chung-Lin Tang  <cltang@codesourcery.com>\n\t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n\t    NetLogic Microsystems Inc.\n\n\t* config/mips/mips.c (mips_issue_rate): Handle XLP.\n\t* config/mips/mips.md: Include xlp.md.\n\t* config/mips/xlp.md: New file.\n\n\nCo-Authored-By: Maxim Kuvyrkov <maxim@codesourcery.com>\n\nFrom-SVN: r189754", "tree": {"sha": "e5e5a8caef4d0a195d7eddbac7ed60be87e34e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5e5a8caef4d0a195d7eddbac7ed60be87e34e73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb448bee82b18bb8130c2d848e6c9e89e8503bd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb448bee82b18bb8130c2d848e6c9e89e8503bd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb448bee82b18bb8130c2d848e6c9e89e8503bd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb448bee82b18bb8130c2d848e6c9e89e8503bd0/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5337b35cbd558c9344f3382b1ce8fd865259d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5337b35cbd558c9344f3382b1ce8fd865259d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5337b35cbd558c9344f3382b1ce8fd865259d9e"}], "stats": {"total": 225, "additions": 225, "deletions": 0}, "files": [{"sha": "dc3bdc012523cbb5864ddea230a61414288a5be2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb448bee82b18bb8130c2d848e6c9e89e8503bd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb448bee82b18bb8130c2d848e6c9e89e8503bd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb448bee82b18bb8130c2d848e6c9e89e8503bd0", "patch": "@@ -1,3 +1,11 @@\n+2012-07-22  Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\t    NetLogic Microsystems Inc.\n+\n+\t* config/mips/mips.c (mips_issue_rate): Handle XLP.\n+\t* config/mips/mips.md: Include xlp.md.\n+\t* config/mips/xlp.md: New file.\n+\n 2012-07-21  Steven Bosscher <steven@gcc.gnu.org>\n \n \tPR gcov-profile/32543"}, {"sha": "e9e4ec10c43cee6e0f28c995127e35236758e14b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb448bee82b18bb8130c2d848e6c9e89e8503bd0/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb448bee82b18bb8130c2d848e6c9e89e8503bd0/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=eb448bee82b18bb8130c2d848e6c9e89e8503bd0", "patch": "@@ -12502,6 +12502,9 @@ mips_issue_rate (void)\n     case PROCESSOR_LOONGSON_3A:\n       return 4;\n \n+    case PROCESSOR_XLP:\n+      return (reload_completed ? 4 : 3);\n+\n     default:\n       return 1;\n     }"}, {"sha": "febe07799e6a8d6da2d5af2f2fceea64c4d99b43", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb448bee82b18bb8130c2d848e6c9e89e8503bd0/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb448bee82b18bb8130c2d848e6c9e89e8503bd0/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=eb448bee82b18bb8130c2d848e6c9e89e8503bd0", "patch": "@@ -942,6 +942,7 @@\n (include \"sb1.md\")\n (include \"sr71k.md\")\n (include \"xlr.md\")\n+(include \"xlp.md\")\n (include \"generic.md\")\n \f\n ;;"}, {"sha": "994c9b16df8a0bc5e6bd1ea3b4a7ae85cf351c1a", "filename": "gcc/config/mips/xlp.md", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb448bee82b18bb8130c2d848e6c9e89e8503bd0/gcc%2Fconfig%2Fmips%2Fxlp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb448bee82b18bb8130c2d848e6c9e89e8503bd0/gcc%2Fconfig%2Fmips%2Fxlp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fxlp.md?ref=eb448bee82b18bb8130c2d848e6c9e89e8503bd0", "patch": "@@ -0,0 +1,213 @@\n+;; DFA-based pipeline description for the XLP.\n+;; Copyright (C) 2012 Free Software Foundation, Inc.\n+;;\n+;; xlp.md   Machine Description for the Broadcom XLP Microprocessor\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"xlp_cpu\")\n+\n+;; CPU function units.\n+(define_cpu_unit \"xlp_ex0\" \"xlp_cpu\")\n+(define_cpu_unit \"xlp_ex1\" \"xlp_cpu\")\n+(define_cpu_unit \"xlp_ex2\" \"xlp_cpu\")\n+(define_cpu_unit \"xlp_ex3\" \"xlp_cpu\")\n+\n+;; Integer Multiply Unit\n+(define_cpu_unit \"xlp_div\" \"xlp_cpu\")\n+\n+;; ALU2 completion port.\n+(define_cpu_unit \"xlp_ex2_wrb\" \"xlp_cpu\")\n+\n+(define_automaton \"xlp_fpu\")\n+\n+;; Floating-point units.\n+(define_cpu_unit \"xlp_fp\" \"xlp_fpu\")\n+\n+;; Floating Point Sqrt/Divide\n+(define_cpu_unit \"xlp_divsq\" \"xlp_fpu\")\n+\n+;; FPU completion port.\n+(define_cpu_unit \"xlp_fp_wrb\" \"xlp_fpu\")\n+\n+;; Define reservations for common combinations.\n+\n+;;\n+;; The ordering of the instruction-execution-path/resource-usage\n+;; descriptions (also known as reservation RTL) is roughly ordered\n+;; based on the define attribute RTL for the \"type\" classification.\n+;; When modifying, remember that the first test that matches is the\n+;; reservation used!\n+;;\n+(define_insn_reservation \"ir_xlp_unknown\" 1\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"unknown,multi\"))\n+  \"xlp_ex0+xlp_ex1+xlp_ex2+xlp_ex3\")\n+\n+(define_insn_reservation \"ir_xlp_branch\" 1\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"branch,jump,call\"))\n+  \"xlp_ex3\")\n+\n+(define_insn_reservation \"ir_xlp_prefetch\" 1\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"prefetch,prefetchx\"))\n+  \"xlp_ex0|xlp_ex1\")\n+\n+(define_insn_reservation \"ir_xlp_load\" 4\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"load\"))\n+  \"xlp_ex0|xlp_ex1\")\n+\n+(define_insn_reservation \"ir_xlp_fpload\" 5\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"fpload,fpidxload\"))\n+  \"xlp_ex0|xlp_ex1\")\n+\n+(define_insn_reservation \"ir_xlp_alu\" 1\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"const,arith,shift,slt,clz,signext,logical,move,trap,nop\"))\n+  \"xlp_ex0|xlp_ex1|(xlp_ex2,xlp_ex2_wrb)|xlp_ex3\")\n+\n+(define_insn_reservation \"ir_xlp_condmov\" 1\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"condmove\")\n+       (eq_attr \"mode\" \"SI,DI\"))\n+  \"xlp_ex2,xlp_ex2_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_mul\" 5\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"imul,imadd\"))\n+  \"xlp_ex2,nothing*4,xlp_ex2_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_mul3\" 3\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"imul3\"))\n+  \"xlp_ex2,nothing*2,xlp_ex2_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_div\" 24\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"mode\" \"SI\")\n+       (eq_attr \"type\" \"idiv\"))\n+  \"xlp_ex2+xlp_div,xlp_div*23,xlp_ex2_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_ddiv\" 48\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"mode\" \"DI\")\n+       (eq_attr \"type\" \"idiv\"))\n+  \"xlp_ex2+xlp_div,xlp_div*47,xlp_ex2_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_store\" 1\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"store,fpstore,fpidxstore\"))\n+  \"xlp_ex0|xlp_ex1\")\n+\n+(define_insn_reservation \"ir_xlp_fpmove\" 2\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"mfc\"))\n+ \"xlp_ex3,xlp_fp,xlp_fp_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_mfhi\" 1\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"mfhi\"))\n+  \"xlp_ex2,xlp_ex2_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_mflo\" 1\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"mflo\"))\n+  \"xlp_ex2,xlp_ex2_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_mthi\" 1\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"mthi\"))\n+  \"xlp_ex2,xlp_ex2_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_mtlo\" 3\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"mtlo\"))\n+  \"xlp_ex2,nothing*2,xlp_ex2_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_fp2\" 2\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"fmove,fneg,fabs,condmove\"))\n+  \"xlp_fp,nothing,xlp_fp_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_fp3\" 3\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"fcmp\"))\n+  \"xlp_fp,nothing*2,xlp_fp_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_fp4\" 4\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"fcvt\"))\n+  \"xlp_fp,nothing*3,xlp_fp_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_fp5\" 5\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"mode\" \"SF\")\n+       (eq_attr \"type\" \"fadd,fmul\"))\n+  \"xlp_fp,nothing*4,xlp_fp_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_fp6\" 6\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"mode\" \"DF\")\n+       (eq_attr \"type\" \"fadd,fmul\"))\n+  \"xlp_fp,nothing*5,xlp_fp_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_fp9\" 9\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"mode\" \"SF\")\n+       (eq_attr \"type\" \"fmadd\"))\n+  \"xlp_fp,nothing*3,xlp_fp,nothing*3,xlp_fp_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_fp11\" 11\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"mode\" \"DF\")\n+       (eq_attr \"type\" \"fmadd\"))\n+  \"xlp_fp,nothing*4,xlp_fp,nothing*4,xlp_fp_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_fpcomplex_s\" 23\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"mode\" \"SF\")\n+       (eq_attr \"type\" \"fdiv,frdiv,frdiv1,frdiv2,fsqrt,frsqrt,frsqrt1,frsqrt2\"))\n+  \"xlp_fp+xlp_divsq,xlp_divsq*22,xlp_fp_wrb\")\n+\n+(define_insn_reservation \"ir_xlp_fpcomplex_d\" 38\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"mode\" \"DF\")\n+       (eq_attr \"type\" \"fdiv,frdiv,frdiv1,frdiv2,fsqrt,frsqrt,frsqrt1,frsqrt2\"))\n+  \"xlp_fp+xlp_divsq,xlp_divsq*37,xlp_fp_wrb\")\n+\n+(define_bypass 3 \"ir_xlp_mul\" \"ir_xlp_mfhi\")\n+\n+(define_insn_reservation \"ir_xlp_atomic\" 15\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"atomic\"))\n+  \"xlp_ex0|xlp_ex1\")\n+\n+;; Sync loop consists of (in order)\n+;; (1) optional sync,\n+;; (2) LL instruction,\n+;; (3) branch and 1-2 ALU instructions,\n+;; (4) SC instruction,\n+;; (5) optional sync,\n+;; (6) branch and ALU instruction.\n+;; The net result of this reservation is a big delay with flush of\n+;; ALU pipeline and outgoing reservations discouraging use of EX3.\n+(define_insn_reservation \"ir_xlp_sync_loop\" 40\n+  (and (eq_attr \"cpu\" \"xlp\")\n+       (eq_attr \"type\" \"syncloop\"))\n+  \"(xlp_ex0+xlp_ex1+xlp_ex2+xlp_ex3)*39,xlp_ex3+(xlp_ex0|xlp_ex1|(xlp_ex2,xlp_ex2_wrb))\")"}]}