{"sha": "c2240038a67c0e5887c0d9aef55a8b3497751b71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIyNDAwMzhhNjdjMGU1ODg3YzBkOWFlZjU1YThiMzQ5Nzc1MWI3MQ==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2013-10-23T22:19:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-10-23T22:19:30Z"}, "message": "testsuite_containergen.h: New.\n\n2013-10-23  Chris Jefferson  <chris@bubblescope.net>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/util/testsuite_containergen.h: New.\n\t* testsuite/util/testsuite_iterators.h (test_container<>::val): Add.\n\t* testsuite/25_algorithms/nth_element/random_test.cc: New, use the\n\tabove.\n\t* testsuite/25_algorithms/partial_sort/random_test.cc: Likewise.\n\t* testsuite/25_algorithms/partial_sort_copy/random_test.cc: Likewise.\n\t* testsuite/25_algorithms/sort/random_test.cc: Likewise.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r203995", "tree": {"sha": "0304deb2a42e816095b6bb7495df375270720ae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0304deb2a42e816095b6bb7495df375270720ae5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2240038a67c0e5887c0d9aef55a8b3497751b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2240038a67c0e5887c0d9aef55a8b3497751b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2240038a67c0e5887c0d9aef55a8b3497751b71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2240038a67c0e5887c0d9aef55a8b3497751b71/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c19d33d8f1a7b89847fc676099d29d6ba4ce90df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19d33d8f1a7b89847fc676099d29d6ba4ce90df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19d33d8f1a7b89847fc676099d29d6ba4ce90df"}], "stats": {"total": 355, "additions": 355, "deletions": 0}, "files": [{"sha": "31ada067658da49361a05b880a6d2e1d9cca7b46", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c2240038a67c0e5887c0d9aef55a8b3497751b71", "patch": "@@ -1,3 +1,14 @@\n+2013-10-23  Chris Jefferson  <chris@bubblescope.net>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/util/testsuite_containergen.h: New.\n+\t* testsuite/util/testsuite_iterators.h (test_container<>::val): Add.\n+\t* testsuite/25_algorithms/nth_element/random_test.cc: New, use the\n+\tabove.\n+\t* testsuite/25_algorithms/partial_sort/random_test.cc: Likewise.\n+\t* testsuite/25_algorithms/partial_sort_copy/random_test.cc: Likewise.\n+\t* testsuite/25_algorithms/sort/random_test.cc: Likewise.\n+\n 2013-10-23  Jason Merrill  <jason@redhat.com>\n \n \t* include/bits/hashtable.h (_Hashtable): Force EBO for _Hash_code_base."}, {"sha": "ef1d0b6c4e6115a4dd43f0b34e2be8bb1cc342c2", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/random_test.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Frandom_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Frandom_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Frandom_test.cc?ref=c2240038a67c0e5887c0d9aef55a8b3497751b71", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++11 -DSIMULATOR_TEST\" { target simulator } }\n+// { dg-require-cstdint \"\" }\n+\n+// 25.4.2 [lib.alg.nth.element]\n+\n+#include <algorithm>\n+#include <random>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_containergen.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+typedef test_container<int, random_access_iterator_wrapper> Container;\n+\n+struct testNthElement\n+{\n+  template<typename Container, typename RandomGen>\n+  void operator()(Container con, RandomGen& rg)\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    const int size = con.end() - con.begin();\n+    auto dist = std::uniform_int_distribution<>(0, size);\n+    const int element = dist(rg);\n+\n+    std::nth_element(con.begin(), con.begin() + element, con.end());\n+\n+    if (element < size)\n+      {\n+        for (int i = 0; i < element; ++i)\n+\t  VERIFY( con.val(i) <= con.val(element) );\n+\n+\tfor (int i = element + 1; i < size; ++i)\n+\t  VERIFY( con.val(i) >= con.val(element) );\n+      }\n+  }\n+};\n+\n+int \n+main()\n+{\n+  __gnu_test::test_containers<Container>(testNthElement());\n+}"}, {"sha": "855e92121b3c7215d435a51e08b2eb63bd3a90ab", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/random_test.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Frandom_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Frandom_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Frandom_test.cc?ref=c2240038a67c0e5887c0d9aef55a8b3497751b71", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++11 -DSIMULATOR_TEST\" { target simulator } }\n+// { dg-require-cstdint \"\" }\n+\n+// 25.4.1.3 [lib.alg.partial.sort]\n+\n+#include <algorithm>\n+#include <random>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_containergen.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+typedef test_container<int, random_access_iterator_wrapper> Container;\n+\n+struct testPartialSort\n+{\n+  template<typename Container, typename RandomGen>\n+  void operator()(Container con, RandomGen& rg)\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    const int size = con.end() - con.begin();\n+    auto dist = std::uniform_int_distribution<>(0, size);\n+    const int element = dist(rg);\n+\n+    std::partial_sort(con.begin(), con.begin() + element, con.end());\n+\n+    VERIFY( std::is_sorted(con.begin(), con.begin() + element) );\n+\n+    if (element > 0)\n+      {\n+        for (int i = element; i < size; ++i)\n+\t  VERIFY( con.val(element - 1) <= con.val(i) );\n+      }\n+  }\n+};\n+\n+int \n+main()\n+{\n+  __gnu_test::test_containers<Container>(testPartialSort());\n+}"}, {"sha": "cca4c568cbbe4e386088501f56be665c91b9c8c9", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort_copy/random_test.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Frandom_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Frandom_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Frandom_test.cc?ref=c2240038a67c0e5887c0d9aef55a8b3497751b71", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++11 -DSIMULATOR_TEST\" { target simulator } }\n+// { dg-require-cstdint \"\" }\n+\n+// 25.4.1.4 [lib.alg.partial.sort.copy]\n+\n+#include <algorithm>\n+#include <random>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_containergen.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+typedef test_container<int, random_access_iterator_wrapper> Container;\n+\n+struct testPartialSortCopy\n+{\n+  template<typename Container, typename RandomGen>\n+  void operator()(Container con, RandomGen& rg)\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    const int size = con.end() - con.begin();\n+    auto dist = std::uniform_int_distribution<>(0, size);\n+    const int element = dist(rg);\n+\n+    std::vector<int> outvec(element + 1); // add +1 to avoid empty issues\n+\n+    Container out(outvec.data(), outvec.data() + element);\n+\n+    std::partial_sort_copy(con.begin(), con.end(),\n+\t\t\t   out.begin(), out.begin() + element);\n+\n+    VERIFY( std::is_sorted(out.begin(), out.begin() + element) );\n+\n+    std::sort(con.begin(), con.end());\n+\n+    for (int i = 0; i < element; ++i)\n+      VERIFY( con.val(i) == out.val(i) );\n+  }\n+};\n+\n+int \n+main()\n+{\n+  __gnu_test::test_containers<Container>(testPartialSortCopy());\n+}"}, {"sha": "ff3d06aa35c146234fc8117d5947d8e1d68063bb", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/random_test.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Frandom_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Frandom_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Frandom_test.cc?ref=c2240038a67c0e5887c0d9aef55a8b3497751b71", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++11 -DSIMULATOR_TEST\" { target simulator } }\n+// { dg-require-cstdint \"\" }\n+\n+// 25.4.1 [lib.alg.sort]\n+\n+#include <algorithm>\n+#include <random>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_containergen.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+typedef test_container<int, random_access_iterator_wrapper> Container;\n+\n+struct testSort\n+{\n+  template<typename Container, typename RandomGen>\n+  void operator()(Container con, RandomGen&)\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    std::sort(con.begin(), con.end());\n+    VERIFY( std::is_sorted(con.begin(), con.end()) );\n+  }\n+};\n+\n+int \n+main()\n+{\n+  __gnu_test::test_containers<Container>(testSort());\n+}"}, {"sha": "ff512ac8a8e0ac119bf379f84e5d327521d5aa6c", "filename": "libstdc++-v3/testsuite/util/testsuite_containergen.h", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containergen.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containergen.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containergen.h?ref=c2240038a67c0e5887c0d9aef55a8b3497751b71", "patch": "@@ -0,0 +1,97 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef _GLIBCXX_TESTSUITE_CONTAINER_GEN_H\n+#define _GLIBCXX_TESTSUITE_CONTAINER_GEN_H\n+\n+#include <testsuite_container_traits.h>\n+#include <random>\n+\n+namespace __gnu_test\n+{\n+  template<typename ContainerType, typename Tester, typename RandomGen>\n+    void\n+    test_single_container(Tester test, RandomGen& rg, int length, int domain)\n+    {\n+      std::vector<int> values;\n+      auto dist = std::uniform_int_distribution<>(0, domain - 1);\n+\n+      for(int i = 0; i < length; ++i)\n+\tvalues.push_back(dist(rg));\n+\n+      ContainerType con(values.data(), values.data() + length);\n+      test(con, rg);\n+    }\n+\n+  template<typename ContainerType, typename Tester, typename RandomGen>\n+    void\n+    test_special_containers(Tester test, RandomGen& rg, int length)\n+    {\n+      std::vector<int> values(length);\n+      ContainerType con(values.data(), values.data() + length);\n+\n+      for(int i = 0; i < length; ++i)\n+\tvalues[i] = 0;\n+      test(con, rg);\n+\n+      for(int i = 0; i < length; ++i)\n+\tvalues[i] = i;\n+      test(con, rg);\n+\n+      for(int i = 0; i < length; ++i)\n+\tvalues[i] = -i;\n+      test(con, rg);\n+    }\n+\n+  template<typename ContainerType, typename Tester>\n+    void\n+    test_containers(Tester test)\n+    {\n+      std::mt19937_64 random_gen;\n+      \n+#ifdef SIMULATOR_TEST\n+      int loops = 10;\n+#else\n+      int loops = 1000;\n+#endif\n+\n+      for(int i = 0; i < loops; ++i)\n+\ttest_special_containers<ContainerType>(test, random_gen, i);\n+\n+      for(int i = 1; i < 100; ++i)\n+\tfor(int j = 0; j < loops; ++j)\n+\t  test_single_container<ContainerType>(test, random_gen, i, i);\n+     \n+      for(int i = 0; i < loops; ++i)\n+\t{\n+\t  test_single_container<ContainerType>(test, random_gen, 10, 10);\n+\t  test_single_container<ContainerType>(test, random_gen, 100, 10);\n+\t  test_single_container<ContainerType>(test, random_gen, 1000, 10);\n+\t  test_single_container<ContainerType>(test, random_gen, 10, 1000);\n+\t}\n+\n+#ifndef SIMULATOR_TEST\n+      for(int i = 0; i < 1000; ++i)\n+\t{\n+\t  test_single_container<ContainerType>(test, random_gen, 10000, 10);\n+\t  test_single_container<ContainerType>(test, random_gen, 10000, 10000);\n+\t}\n+#endif\n+    }\n+} // namespace __gnu_test\n+\n+#endif"}, {"sha": "c9dccb79227dc59ff9c15340a89c72db87c2732d", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2240038a67c0e5887c0d9aef55a8b3497751b71/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=c2240038a67c0e5887c0d9aef55a8b3497751b71", "patch": "@@ -539,6 +539,10 @@ namespace __gnu_test\n       return ItType<T>(pos, &bounds);\n     }\n \n+    const T&\n+    val(int pos)\n+    { return (bounds.first)[pos]; }\n+\n     ItType<T>\n     begin()\n     { return it(bounds.first); }"}]}