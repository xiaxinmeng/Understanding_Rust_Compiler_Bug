{"sha": "b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJhOWIyMDg2YTRlNGI5YWJlMzk0MDA4YmEzMzAxN2FhNzFlMGEyNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-06-06T14:18:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-06-06T14:18:22Z"}, "message": "re PR c++/20637 (Confusing message with different using declarations)\n\ncp:\nPR c++/20637\n\t* cp-tree.h (add_method): Add using_decl parameter.\n\t* class.c (add_method): Add using_decl parameter.  Adjust error\n\tmessages.\n\t(handle_using_decl): Pass the using decl to add_method.\n\t(clone_function_decl): Adjust add_member calls.\n\t* decl2.c (check_classfn): Likewise.\n\t* method.c (lazily_declare_fn): Likewise.\n\t* semantics.c (finish_member_declaration): Likewise.\n\n\t* method.c (synthesize_method): Use inform, not warning.\ntestsuite:\n\tPR c++/20637\n\t* g++.dg/inherit/using4.C: New.\n\t* g++.dg/overload/error1.C: Adjust expected errors.\n\t* g++.old-deja/g++.benjamin/warn02.C: Likewise.\n\t* g++.old-deja/g++.brendan/arm2.C: Likewise.\n\t* g++.old-deja/g++.other/redecl2.C: Likewise.\n\t* g++.old-deja/g++.other/redecl4.C: Likewise.\n\t* g++.old-deja/g++.pt/memtemp78.C: Likewise.\n\nFrom-SVN: r100664", "tree": {"sha": "b98917533caac2a191d7343327013798ecf8efb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b98917533caac2a191d7343327013798ecf8efb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/comments", "author": null, "committer": null, "parents": [{"sha": "3d7b7acc42f12a1d154e53721b979d8d94611bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7b7acc42f12a1d154e53721b979d8d94611bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7b7acc42f12a1d154e53721b979d8d94611bcf"}], "stats": {"total": 145, "additions": 95, "deletions": 50}, "files": [{"sha": "758451c25c4e8b4d63d744629b2c39f46a2fbbb9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -1,3 +1,17 @@\n+2005-06-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/20637\n+\t* cp-tree.h (add_method): Add using_decl parameter.\n+\t* class.c (add_method): Add using_decl parameter.  Adjust error\n+\tmessages.\n+\t(handle_using_decl): Pass the using decl to add_method.\n+\t(clone_function_decl): Adjust add_member calls.\n+\t* decl2.c (check_classfn): Likewise.\n+\t* method.c (lazily_declare_fn): Likewise.\n+\t* semantics.c (finish_member_declaration): Likewise.\n+\n+\t* method.c (synthesize_method): Use inform, not warning.\n+\n 2005-06-06  Hans-Peter Nilsson  <hp@axis.se>\n \n \t* config-lang.in (target_libs): Remove target-gperf."}, {"sha": "8661931ac781369518b32bac3c5a8bee38efa692", "filename": "gcc/cp/class.c", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -878,12 +878,12 @@ modify_vtable_entry (tree t,\n }\n \n \f\n-/* Add method METHOD to class TYPE.  */\n+/* Add method METHOD to class TYPE.  If USING_DECL is non-null, it is\n+   the USING_DECL naming METHOD.  */\n \n void\n-add_method (tree type, tree method)\n+add_method (tree type, tree method, tree using_decl)\n {\n-  int using;\n   unsigned slot;\n   tree overload;\n   bool template_conv_p = false;\n@@ -897,7 +897,6 @@ add_method (tree type, tree method)\n     return;\n \n   complete_p = COMPLETE_TYPE_P (type);\n-  using = (DECL_CONTEXT (method) != type);\n   conv_p = DECL_CONV_FN_P (method);\n   if (conv_p)\n     template_conv_p = (TREE_CODE (method) == TEMPLATE_DECL\n@@ -1024,21 +1023,28 @@ add_method (tree type, tree method)\n \t\t  || same_type_p (TREE_TYPE (TREE_TYPE (fn)),\n \t\t\t\t  TREE_TYPE (TREE_TYPE (method)))))\n \t    {\n-\t      if (using && DECL_CONTEXT (fn) == type)\n-\t\t/* Defer to the local function.  */\n-\t\treturn;\n+\t      if (using_decl)\n+\t\t{\n+\t\t  if (DECL_CONTEXT (fn) == type)\n+\t\t    /* Defer to the local function.  */\n+\t\t    return;\n+\t\t  if (DECL_CONTEXT (fn) == DECL_CONTEXT (method))\n+\t\t    cp_error_at (\"repeated using declaration %qD\", using_decl);\n+\t\t  else\n+\t\t    cp_error_at (\"using declaration %qD conflicts with a previous using declaration\",\n+\t\t\t\t using_decl);\n+\t\t}\n \t      else\n \t\t{\n-\t\t  cp_error_at (\"%q#D and %q#D cannot be overloaded\",\n-\t\t\t       method, fn);\n-\n-\t\t  /* We don't call duplicate_decls here to merge\n-\t\t     the declarations because that will confuse\n-\t\t     things if the methods have inline\n-\t\t     definitions.  In particular, we will crash\n-\t\t     while processing the definitions.  */\n-\t\t  return;\n+\t\t  cp_error_at (\"%q#D cannot be overloaded\", method);\n+\t\t  cp_error_at (\"with %q#D\", fn);\n \t\t}\n+\t      \n+\t      /* We don't call duplicate_decls here to merge the\n+\t\t declarations because that will confuse things if the\n+\t\t methods have inline definitions.  In particular, we\n+\t\t will crash while processing the definitions.  */\n+\t      return;\n \t    }\n \t}\n     }\n@@ -1201,7 +1207,7 @@ handle_using_decl (tree using_decl, tree t)\n   if (flist)\n     for (; flist; flist = OVL_NEXT (flist))\n       {\n-\tadd_method (t, OVL_CURRENT (flist));\n+\tadd_method (t, OVL_CURRENT (flist), using_decl);\n \talter_access (t, OVL_CURRENT (flist), access);\n       }\n   else\n@@ -3829,10 +3835,10 @@ clone_function_decl (tree fn, int update_method_vec_p)\n \t and a not-in-charge version.  */\n       clone = build_clone (fn, complete_ctor_identifier);\n       if (update_method_vec_p)\n-\tadd_method (DECL_CONTEXT (clone), clone);\n+\tadd_method (DECL_CONTEXT (clone), clone, NULL_TREE);\n       clone = build_clone (fn, base_ctor_identifier);\n       if (update_method_vec_p)\n-\tadd_method (DECL_CONTEXT (clone), clone);\n+\tadd_method (DECL_CONTEXT (clone), clone, NULL_TREE);\n     }\n   else\n     {\n@@ -3851,14 +3857,14 @@ clone_function_decl (tree fn, int update_method_vec_p)\n \t{\n \t  clone = build_clone (fn, deleting_dtor_identifier);\n \t  if (update_method_vec_p)\n-\t    add_method (DECL_CONTEXT (clone), clone);\n+\t    add_method (DECL_CONTEXT (clone), clone, NULL_TREE);\n \t}\n       clone = build_clone (fn, complete_dtor_identifier);\n       if (update_method_vec_p)\n-\tadd_method (DECL_CONTEXT (clone), clone);\n+\tadd_method (DECL_CONTEXT (clone), clone, NULL_TREE);\n       clone = build_clone (fn, base_dtor_identifier);\n       if (update_method_vec_p)\n-\tadd_method (DECL_CONTEXT (clone), clone);\n+\tadd_method (DECL_CONTEXT (clone), clone, NULL_TREE);\n     }\n \n   /* Note that this is an abstract function that is never emitted.  */"}, {"sha": "6cf7fa052f059bb4786e30bfa01d1242814bba69", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -3667,7 +3667,7 @@ extern tree build_vfn_ref\t\t\t(tree, tree);\n extern tree get_vtable_decl                     (tree, int);\n extern void resort_type_method_vec\n   (void *, void *, gt_pointer_operator, void *);\n-extern void add_method\t\t\t\t(tree, tree);\n+extern void add_method\t\t\t\t(tree, tree, tree);\n extern int currently_open_class\t\t\t(tree);\n extern tree currently_open_derived_class\t(tree);\n extern tree finish_struct\t\t\t(tree, tree);"}, {"sha": "0501b809b8041fe29d4ce6c259bb650a404c9bfa", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -709,7 +709,7 @@ check_classfn (tree ctype, tree function, tree template_parms)\n      case we'll only confuse ourselves when the function is declared\n      properly within the class.  */\n   if (COMPLETE_TYPE_P (ctype))\n-    add_method (ctype, function);\n+    add_method (ctype, function, NULL_TREE);\n   return NULL_TREE;\n }\n "}, {"sha": "f5c7d2afdbb78850b979a3507f3c1d1ccb2dec7a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -806,8 +806,8 @@ synthesize_method (tree fndecl)\n   pop_deferring_access_checks ();\n \n   if (error_count != errorcount || warning_count != warningcount)\n-    warning (0, \"%Hsynthesized method %qD first required here \",\n-\t     &input_location, fndecl);\n+    inform (\"%Hsynthesized method %qD first required here \",\n+\t    &input_location, fndecl);\n }\n \n /* Use EXTRACTOR to locate the relevant function called for each base &\n@@ -1119,7 +1119,7 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n   if (sfk == sfk_destructor)\n     check_for_override (fn, type);\n   /* Add it to CLASSTYPE_METHOD_VEC.  */\n-  add_method (type, fn);\n+  add_method (type, fn, NULL_TREE);\n   /* Add it to TYPE_METHODS.  */\n   if (sfk == sfk_destructor \n       && DECL_VIRTUAL_P (fn)"}, {"sha": "76464ad626adf98034ff7e0c267bc2ab2990cd93", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -2250,7 +2250,7 @@ finish_member_declaration (tree decl)\n     {\n       /* We also need to add this function to the\n \t CLASSTYPE_METHOD_VEC.  */\n-      add_method (current_class_type, decl);\n+      add_method (current_class_type, decl, NULL_TREE);\n \n       TREE_CHAIN (decl) = TYPE_METHODS (current_class_type);\n       TYPE_METHODS (current_class_type) = decl;"}, {"sha": "9061d5f9ee562a1d431f4070fad760f8490611f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -1,3 +1,14 @@\n+2005-06-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/20637\n+\t* g++.dg/inherit/using4.C: New.\n+\t* g++.dg/overload/error1.C: Adjust expected errors.\n+\t* g++.old-deja/g++.benjamin/warn02.C: Likewise.\n+\t* g++.old-deja/g++.brendan/arm2.C: Likewise.\n+\t* g++.old-deja/g++.other/redecl2.C: Likewise.\n+\t* g++.old-deja/g++.other/redecl4.C: Likewise.\n+\t* g++.old-deja/g++.pt/memtemp78.C: Likewise.\n+\n 2005-06-05  David Billinghurst  <David.Billinghurst@riotinto.com>\n \n \t* gfortran.dg/f2c_5.f90: Add -w to dg-options"}, {"sha": "a0b38737e1ea22a63e8a305d48bb019677f5ea39", "filename": "gcc/testsuite/g++.dg/inherit/using4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing4.C?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -0,0 +1,14 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 6 Jun 2005 <nathan@codesourcery.com>\n+\n+// PR 20613:uninformative diagnostic\n+// Origin:  Wolfgang Bangerth <bangerth@dealii.org>\n+\n+struct B { \n+  void f();\n+}; \n+ \n+struct D : B { \n+  using B::f; \n+  using B::f;  // { dg-error \"repeated\" }\n+}; "}, {"sha": "dd10d9053da561d504ad15dc860b5974d719dfaf", "filename": "gcc/testsuite/g++.dg/overload/error1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror1.C?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -2,6 +2,6 @@\n \n struct S\n {\n-  void f () {}\n-  int f () { return 0; } // { dg-error \"\" \"\" }\n+  void f () {} // { dg-error \"with\" \"\" }\n+  int f () { return 0; } // { dg-error \"overloaded\" \"\" }\n };"}, {"sha": "248e1ed9ff19519bb27d09771921ac2a352ddad8", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/warn02.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fwarn02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fwarn02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fwarn02.C?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -31,16 +31,16 @@ class C\n class D\n {\n public:\n-  int foo2() {return b;}  \n-  int foo2() {return b;}  // { dg-error \"\" } \n+  int foo2() {return b;}  // { dg-error \"with\" } \n+  int foo2() {return b;}  // { dg-error \"overloaded\" } \n   int b;\n };\n \n class E\n {\n public:\n-  int foo2(); \n-  int foo2(); // { dg-error \"\" } \n+  int foo2(); // { dg-error \"with\" } \n+  int foo2(); // { dg-error \"overloaded\" } \n   int b;\n };\n "}, {"sha": "fb1ee429d37fb88f7e894ded928fe608619804ba", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/arm2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm2.C?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -8,12 +8,12 @@\n \n class X {\n public:\n-   int foo();\n-  static int foo();\t// error: redeclaration// { dg-error \"\" } .*\n+  int foo();            // { dg-error \"with\" }\n+  static int foo();\t// error: redeclaration// { dg-error \"overloaded\" } .*\n };\n \n class Y {\n public:\n-   static int foo();\n-  int foo();\t\t// error: redeclaration// { dg-error \"\" } .*\n+   static int foo();    // { dg-error \"with\" }\n+  int foo();\t\t// error: redeclaration// { dg-error \"overloaded\" } .*\n };"}, {"sha": "0d6ccf669f00f9c013b12642c8aab35a4090910d", "filename": "gcc/testsuite/g++.old-deja/g++.other/redecl2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fredecl2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fredecl2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fredecl2.C?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -1,9 +1,9 @@\n // { dg-do assemble  }\n \n struct S {\n-  S(int);\n-  S(int); // { dg-error \"\" } already declared\n+  S(int); // { dg-error \"with\" }\n+  S(int); // { dg-error \"overloaded\" } already declared\n \n-  ~S();\n-  ~S(); // { dg-error \"\" } already declared\n+  ~S();// { dg-error \"with\" }\n+  ~S(); // { dg-error \"overloaded\" } already declared\n };"}, {"sha": "e3355dafc4100660a24454af94def933062c48d1", "filename": "gcc/testsuite/g++.old-deja/g++.other/redecl4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fredecl4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fredecl4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fredecl4.C?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -1,7 +1,7 @@\n // { dg-do assemble  }\n int main() {\n   struct A {\n-    void f();\n-    void f();\t\t\t// { dg-error \"\" } already declared\n+    void f();\t\t\t// { dg-error \"with\" } already declared\n+    void f();\t\t\t// { dg-error \"overloaded\" } already declared\n   };\n }"}, {"sha": "73348351f0d494c2d280291365ea9f68567ea664", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp78.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp78.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9b2086a4e4b9abe394008ba33017aa71e0a24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp78.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp78.C?ref=b2a9b2086a4e4b9abe394008ba33017aa71e0a24", "patch": "@@ -23,10 +23,10 @@ template struct B<int>;\n struct C \n {\n   template <class U>\n-  void f() {}\n+  void f() {}  // { dg-error \"with\" } redeclaration\n \n   template <class U>\n-  void f() {}  // { dg-error \"\" } redeclaration\n+  void f() {}  // { dg-error \"overloaded\" } redeclaration\n };\n \n \n@@ -42,15 +42,15 @@ template struct D<int, double>;\n template <class T, class U>\n struct D2\n {\n-  void f(T);\n-  void f(U); // { dg-error \"\" } redeclaration \n+  void f(T); // { dg-error \"with\" } redeclaration \n+  void f(U); // { dg-error \"overloaded\" } redeclaration \n };\n \n template struct D2<int, int>; \n \n struct E\n {\n-  void f(); \n-  void f(); // { dg-error \"\" } redeclaration\n+  void f();  // { dg-error \"with\" } redeclaration\n+  void f(); // { dg-error \"overloaded\" } redeclaration\n };\n "}]}