{"sha": "3ba2436a67f611be43fc02a1f400a69a95088695", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JhMjQzNmE2N2Y2MTFiZTQzZmMwMmExZjQwMGE2OWE5NTA4ODY5NQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-11-20T17:05:08Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-11-20T17:05:08Z"}, "message": "recog.c (constrain_operands): Prefer exact match over reloadable EXTRA_MEMORY_CONSTRAINT or...\n\n\t* recog.c (constrain_operands): Prefer exact match over reloadable\n\tEXTRA_MEMORY_CONSTRAINT or EXTRA_ADDRESS_CONSTRAINT.\n\n\t* reload.c (find_reloads): Always reload EXTRA_ADDRESS_CONSTRAINT\n\toperands in Pmode.\n\nFrom-SVN: r59308", "tree": {"sha": "5a21a5b3ce2e1fa3f82d686ad108412c7de37ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a21a5b3ce2e1fa3f82d686ad108412c7de37ff7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ba2436a67f611be43fc02a1f400a69a95088695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba2436a67f611be43fc02a1f400a69a95088695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ba2436a67f611be43fc02a1f400a69a95088695", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba2436a67f611be43fc02a1f400a69a95088695/comments", "author": null, "committer": null, "parents": [{"sha": "3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "327e475e08e3a53b9a4a1ba73d45cb7dbd4bd536", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba2436a67f611be43fc02a1f400a69a95088695/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba2436a67f611be43fc02a1f400a69a95088695/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ba2436a67f611be43fc02a1f400a69a95088695", "patch": "@@ -1,3 +1,11 @@\n+2002-11-20  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* recog.c (constrain_operands): Prefer exact match over reloadable\n+\tEXTRA_MEMORY_CONSTRAINT or EXTRA_ADDRESS_CONSTRAINT.\n+\n+\t* reload.c (find_reloads): Always reload EXTRA_ADDRESS_CONSTRAINT\n+\toperands in Pmode.\n+\n 2002-11-20 \ufffdEric Botcazou \ufffd<ebotcazou@libertysurf.fr>\n \n \tPR c/8518"}, {"sha": "d1db9c4e69d1793ca8b6873fc559015559de4642", "filename": "gcc/recog.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba2436a67f611be43fc02a1f400a69a95088695/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba2436a67f611be43fc02a1f400a69a95088695/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=3ba2436a67f611be43fc02a1f400a69a95088695", "patch": "@@ -2628,23 +2628,23 @@ constrain_operands (strict)\n \n \t\t  if (EXTRA_MEMORY_CONSTRAINT (c))\n \t\t    {\n-\t\t      /* Every memory operand can be reloaded to fit,\n-\t\t\t so copy the condition from the 'm' case.  */\n-\t\t      if (GET_CODE (op) == MEM\n-\t\t          /* Before reload, accept what reload can turn into mem.  */\n-\t\t          || (strict < 0 && CONSTANT_P (op))\n-\t\t          /* During reload, accept a pseudo  */\n-\t\t          || (reload_in_progress && GET_CODE (op) == REG\n-\t\t\t      && REGNO (op) >= FIRST_PSEUDO_REGISTER))\n+\t\t      /* Every memory operand can be reloaded to fit.  */\n+\t\t      if (strict < 0 && GET_CODE (op) == MEM)\n+\t\t\twin = 1;\n+\t\n+\t\t      /* Before reload, accept what reload can turn into mem.  */\n+\t\t      if (strict < 0 && CONSTANT_P (op))\n+\t\t\twin = 1;\n+\n+\t\t      /* During reload, accept a pseudo  */\n+\t\t      if (reload_in_progress && GET_CODE (op) == REG\n+\t\t\t  && REGNO (op) >= FIRST_PSEUDO_REGISTER)\n \t\t\twin = 1;\n \t\t    }\n \t\t  if (EXTRA_ADDRESS_CONSTRAINT (c))\n \t\t    {\n-\t\t      /* Every address operand can be reloaded to fit,\n-\t\t\t so copy the condition from the 'p' case.  */\n-\t\t      if (strict <= 0\n-\t\t          || (strict_memory_address_p (recog_data.operand_mode[opno],\n-\t\t\t\t\t\t       op)))\n+\t\t      /* Every address operand can be reloaded to fit.  */\n+\t\t      if (strict < 0)\n \t\t        win = 1;\n \t\t    }\n #endif"}, {"sha": "56fcf46d00cdd3e41899b8e78745649738dc2286", "filename": "gcc/reload.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba2436a67f611be43fc02a1f400a69a95088695/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba2436a67f611be43fc02a1f400a69a95088695/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=3ba2436a67f611be43fc02a1f400a69a95088695", "patch": "@@ -3283,6 +3283,10 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t\t\t   the address into a base register.  */\n \t\t\tthis_alternative[i] = (int) MODE_BASE_REG_CLASS (VOIDmode);\n \t\t\tbadop = 0;\n+\n+\t\t\t/* Address constraints are reloaded in Pmode, no matter\n+\t\t\t   what mode is given in the machine description.  */\n+\t\t\toperand_mode[i] = Pmode;\n \t\t\tbreak;\n \t\t      }\n "}]}