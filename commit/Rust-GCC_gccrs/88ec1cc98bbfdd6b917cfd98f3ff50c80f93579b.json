{"sha": "88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhlYzFjYzk4YmJmZGQ2YjkxN2NmZDk4ZjNmZjUwYzgwZjkzNTc5Yg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-04-01T13:48:19Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-04-01T13:48:19Z"}, "message": "strcat.c: Check the result buffer past the terminating NUL using memcmp.\n\n\t* gcc.c-torture/execute/builtins/strcat.c: Check the result\n\tbuffer past the terminating NUL using memcmp.\n\t* gcc.c-torture/execute/builtins/strncat.c: Likewise.\n\t* gcc.c-torture/execute/builtins/strncpy.c: Likewise.\n\nFrom-SVN: r97388", "tree": {"sha": "e810764948919f2fa2a9c814c838c4f5d5ada25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e810764948919f2fa2a9c814c838c4f5d5ada25b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b/comments", "author": null, "committer": null, "parents": [{"sha": "55badfdae89adc89970ad3aae587e113d66d99d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55badfdae89adc89970ad3aae587e113d66d99d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55badfdae89adc89970ad3aae587e113d66d99d0"}], "stats": {"total": 139, "additions": 78, "deletions": 61}, "files": [{"sha": "4a21f16a41f6288a8bc84994f6a777903c928279", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b", "patch": "@@ -1,5 +1,10 @@\n 2005-04-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* gcc.c-torture/execute/builtins/strcat.c: Check the result\n+\tbuffer past the terminating NUL using memcmp.\n+\t* gcc.c-torture/execute/builtins/strncat.c: Likewise.\n+\t* gcc.c-torture/execute/builtins/strncpy.c: Likewise.\n+\n \t* gcc.c-torture/execute/builtins/strncmp-2.c: Also test x86_64.\n \tFix unused/uninitialized variable warnings.\n "}, {"sha": "0fb1ba1c4e7c2ade9de172ad6f4d880bcbf277db", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcat.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcat.c?ref=88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b", "patch": "@@ -10,7 +10,6 @@ extern void abort (void);\n typedef __SIZE_TYPE__ size_t;\n extern char *strcat (char *, const char *);\n extern char *strcpy (char *, const char *);\n-extern int strcmp (const char *, const char *);\n extern void *memset (void *, int, size_t);\n extern int memcmp (const void *, const void *, size_t);\n #define RESET_DST_WITH(FILLER) \\\n@@ -23,19 +22,22 @@ void main_test (void)\n   char dst[64], *d2;\n   \n   RESET_DST_WITH (s1);\n-  if (strcat (dst, \"\") != dst || strcmp (dst, s1))\n+  if (strcat (dst, \"\") != dst || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n   RESET_DST_WITH (s1);\n-  if (strcat (dst, s2) != dst || strcmp (dst, s1))\n+  if (strcat (dst, s2) != dst || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n   RESET_DST_WITH (s1); d2 = dst;\n-  if (strcat (++d2, s2) != dst+1 || d2 != dst+1 || strcmp (dst, s1))\n+  if (strcat (++d2, s2) != dst+1 || d2 != dst+1\n+      || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n   RESET_DST_WITH (s1); d2 = dst;\n-  if (strcat (++d2+5, s2) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n+  if (strcat (++d2+5, s2) != dst+6 || d2 != dst+1\n+      || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n   RESET_DST_WITH (s1); d2 = dst;\n-  if (strcat (++d2+5, s1+11) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n+  if (strcat (++d2+5, s1+11) != dst+6 || d2 != dst+1\n+      || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n \n #ifndef __OPTIMIZE_SIZE__\n@@ -74,6 +76,6 @@ void main_test (void)\n   /* Test at least one instance of the __builtin_ style.  We do this\n      to ensure that it works and that the prototype is correct.  */\n   RESET_DST_WITH (s1);\n-  if (__builtin_strcat (dst, \"\") != dst || strcmp (dst, s1))\n+  if (__builtin_strcat (dst, \"\") != dst || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n }"}, {"sha": "1a093baf731f9ea9f40a3115efeef53d49a8b358", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strncat.c", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncat.c?ref=88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b", "patch": "@@ -9,64 +9,74 @@ extern void abort (void);\n typedef __SIZE_TYPE__ size_t;\n extern char *strncat (char *, const char *, size_t);\n extern char *strcpy (char *, const char *);\n-extern int strcmp (const char *, const char *);\n+extern void *memset (void *, int, size_t);\n+extern int memcmp (const void *, const void *, size_t);\n int x = 123;\n \n+/* Reset the destination buffer to a known state. */\n+#define RESET_DST_WITH(FILLER) \\\n+  do { memset (dst, 'X', sizeof (dst)); strcpy (dst, (FILLER)); } while (0)\n+\n void\n main_test (void)\n {\n   const char *const s1 = \"hello world\";\n   const char *const s2 = \"\";\n   char dst[64], *d2;\n   \n-  strcpy (dst, s1);\n-  if (strncat (dst, \"\", 100) != dst || strcmp (dst, s1))\n+  RESET_DST_WITH (s1);\n+  if (strncat (dst, \"\", 100) != dst || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n-  strcpy (dst, s1);\n-  if (strncat (dst, s2, 100) != dst || strcmp (dst, s1))\n+  RESET_DST_WITH (s1);\n+  if (strncat (dst, s2, 100) != dst || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n-  if (strncat (++d2, s2, 100) != dst+1 || d2 != dst+1 || strcmp (dst, s1))\n+  RESET_DST_WITH (s1); d2 = dst;\n+  if (strncat (++d2, s2, 100) != dst+1 || d2 != dst+1\n+      || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n-  if (strncat (++d2+5, s2, 100) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n+  RESET_DST_WITH (s1); d2 = dst;\n+  if (strncat (++d2+5, s2, 100) != dst+6 || d2 != dst+1\n+      || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n-  if (strncat (++d2+5, s1+11, 100) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n+  RESET_DST_WITH (s1); d2 = dst;\n+  if (strncat (++d2+5, s1+11, 100) != dst+6 || d2 != dst+1\n+      || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n-  if (strncat (++d2+5, s1, 0) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n+  RESET_DST_WITH (s1); d2 = dst;\n+  if (strncat (++d2+5, s1, 0) != dst+6 || d2 != dst+1\n+      || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n+  RESET_DST_WITH (s1); d2 = dst;\n   if (strncat (++d2+5, \"\", ++x) != dst+6 || d2 != dst+1 || x != 124\n-      || strcmp (dst, s1))\n+      || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n \n-  strcpy (dst, s1);\n-  if (strncat (dst, \"foo\", 3) != dst || strcmp (dst, \"hello worldfoo\"))\n+  RESET_DST_WITH (s1);\n+  if (strncat (dst, \"foo\", 3) != dst || memcmp (dst, \"hello worldfoo\\0XXX\", 18))\n     abort();\n-  strcpy (dst, s1);\n-  if (strncat (dst, \"foo\", 100) != dst || strcmp (dst, \"hello worldfoo\"))\n+  RESET_DST_WITH (s1);\n+  if (strncat (dst, \"foo\", 100) != dst || memcmp (dst, \"hello worldfoo\\0XXX\", 18))\n     abort();\n-  strcpy (dst, s1);\n-  if (strncat (dst, s1, 100) != dst || strcmp (dst, \"hello worldhello world\"))\n+  RESET_DST_WITH (s1);\n+  if (strncat (dst, s1, 100) != dst || memcmp (dst, \"hello worldhello world\\0XXX\", 26))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n+  RESET_DST_WITH (s1); d2 = dst;\n   if (strncat (++d2, s1, 100) != dst+1 || d2 != dst+1\n-      || strcmp (dst, \"hello worldhello world\"))\n+      || memcmp (dst, \"hello worldhello world\\0XXX\", 26))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n+  RESET_DST_WITH (s1); d2 = dst;\n   if (strncat (++d2+5, s1, 100) != dst+6 || d2 != dst+1\n-      || strcmp (dst, \"hello worldhello world\"))\n+      || memcmp (dst, \"hello worldhello world\\0XXX\", 26))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n+  RESET_DST_WITH (s1); d2 = dst;\n   if (strncat (++d2+5, s1+5, 100) != dst+6 || d2 != dst+1\n-      || strcmp (dst, \"hello world world\"))\n+      || memcmp (dst, \"hello world world\\0XXX\", 21))\n     abort();\n \n   /* Test at least one instance of the __builtin_ style.  We do this\n      to ensure that it works and that the prototype is correct.  */\n-  strcpy (dst, s1);\n-  if (__builtin_strncat (dst, \"\", 100) != dst || strcmp (dst, s1))\n+  RESET_DST_WITH (s1);\n+  if (__builtin_strncat (dst, \"\", 100) != dst\n+      || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n }"}, {"sha": "9918cdf6af988889ad7871046aa567e82c4af986", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strncpy.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncpy.c?ref=88ec1cc98bbfdd6b917cfd98f3ff50c80f93579b", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation.\n+/* Copyright (C) 2000, 2005  Free Software Foundation.\n \n    Ensure all expected transformations of builtin strncpy occur and\n    perform correctly.\n@@ -8,10 +8,12 @@\n extern void abort (void);\n typedef __SIZE_TYPE__ size_t;\n extern char *strncpy (char *, const char *, size_t);\n-extern int strcmp (const char *, const char *);\n-extern int strncmp (const char *, const char *, size_t);\n+extern int memcmp (const void *, const void *, size_t);\n extern void *memset (void *, int, size_t);\n \n+/* Reset the destination buffer to a known state. */\n+#define RESET_DST memset(dst, 'X', sizeof(dst))\n+\n int i;\n \n void\n@@ -21,55 +23,53 @@ main_test (void)\n   const char *src2;\n   char dst[64], *dst2;\n   \n-  memset (dst, 0, sizeof (dst));\n-  if (strncpy (dst, src, 4) != dst || strncmp (dst, src, 4))\n+  RESET_DST;\n+  if (strncpy (dst, src, 4) != dst || memcmp (dst, \"hellXXX\", 7))\n     abort();\n \n-  memset (dst, 0, sizeof (dst));\n-  if (strncpy (dst+16, src, 4) != dst+16 || strncmp (dst+16, src, 4))\n+  RESET_DST;\n+  if (strncpy (dst+16, src, 4) != dst+16 || memcmp (dst+16, \"hellXXX\", 7))\n     abort();\n \n-  memset (dst, 0, sizeof (dst));\n-  if (strncpy (dst+32, src+5, 4) != dst+32 || strncmp (dst+32, src+5, 4))\n+  RESET_DST;\n+  if (strncpy (dst+32, src+5, 4) != dst+32 || memcmp (dst+32, \" worXXX\", 7))\n     abort();\n \n-  memset (dst, 0, sizeof (dst));\n+  RESET_DST;\n   dst2 = dst;\n-  if (strncpy (++dst2, src+5, 4) != dst+1 || strncmp (dst2, src+5, 4)\n+  if (strncpy (++dst2, src+5, 4) != dst+1 || memcmp (dst2, \" worXXX\", 7)\n       || dst2 != dst+1)\n     abort();\n \n-  memset (dst, 0, sizeof (dst));\n-  if (strncpy (dst, src, 0) != dst || strcmp (dst, \"\"))\n+  RESET_DST;\n+  if (strncpy (dst, src, 0) != dst || memcmp (dst, \"XXX\", 3))\n     abort();\n   \n-  memset (dst, 0, sizeof (dst));\n+  RESET_DST;\n   dst2 = dst; src2 = src;\n-  if (strncpy (++dst2, ++src2, 0) != dst+1 || strcmp (dst2, \"\")\n+  if (strncpy (++dst2, ++src2, 0) != dst+1 || memcmp (dst2, \"XXX\", 3)\n       || dst2 != dst+1 || src2 != src+1)\n     abort();\n \n-  memset (dst, 0, sizeof (dst));\n+  RESET_DST;\n   dst2 = dst; src2 = src;\n-  if (strncpy (++dst2+5, ++src2+5, 0) != dst+6 || strcmp (dst2+5, \"\")\n+  if (strncpy (++dst2+5, ++src2+5, 0) != dst+6 || memcmp (dst2+5, \"XXX\", 3)\n       || dst2 != dst+1 || src2 != src+1)\n     abort();\n \n-  memset (dst, 0, sizeof (dst));\n-  if (strncpy (dst, src, 12) != dst || strcmp (dst, src))\n+  RESET_DST;\n+  if (strncpy (dst, src, 12) != dst || memcmp (dst, \"hello world\\0XXX\", 15))\n     abort();\n \n   /* Test at least one instance of the __builtin_ style.  We do this\n      to ensure that it works and that the prototype is correct.  */\n-  memset (dst, 0, sizeof (dst));\n-  if (__builtin_strncpy (dst, src, 4) != dst || strncmp (dst, src, 4))\n+  RESET_DST;\n+  if (__builtin_strncpy (dst, src, 4) != dst || memcmp (dst, \"hellXXX\", 7))\n     abort();\n \n-  memset (dst, 0, sizeof (dst));\n+  RESET_DST;\n   if (strncpy (dst, i++ ? \"xfoo\" + 1 : \"bar\", 4) != dst\n-      || strcmp (dst, \"bar\")\n+      || memcmp (dst, \"bar\\0XXX\", 7)\n       || i != 1)\n     abort ();\n-\n-  return 0;\n }"}]}