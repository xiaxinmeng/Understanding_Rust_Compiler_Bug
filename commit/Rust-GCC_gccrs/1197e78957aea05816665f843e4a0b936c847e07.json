{"sha": "1197e78957aea05816665f843e4a0b936c847e07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5N2U3ODk1N2FlYTA1ODE2NjY1Zjg0M2U0YTBiOTM2Yzg0N2UwNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-15T11:53:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-15T11:53:26Z"}, "message": "re PR middle-end/42739 (ICE with computed goto, destructors, and optimization)\n\n2010-01-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/42739\n\t* tree-cfgcleanup.c (remove_forwarder_block): Move destination\n\tlabels of computed or non-local gotos to the destination.\n\t* tree-cfg.c (gimple_verify_flow_info): Verify that a EH\n\tlanding pad label is the first label.\n\n\t* g++.dg/torture/pr42739.C: New testcase.\n\nFrom-SVN: r155937", "tree": {"sha": "67ed89e55330179795b12967f60c0b05168d6454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67ed89e55330179795b12967f60c0b05168d6454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1197e78957aea05816665f843e4a0b936c847e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1197e78957aea05816665f843e4a0b936c847e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1197e78957aea05816665f843e4a0b936c847e07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1197e78957aea05816665f843e4a0b936c847e07/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58be9ce9c30e0b16d4d4cb6ccccc4b910b8ae834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58be9ce9c30e0b16d4d4cb6ccccc4b910b8ae834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58be9ce9c30e0b16d4d4cb6ccccc4b910b8ae834"}], "stats": {"total": 91, "additions": 74, "deletions": 17}, "files": [{"sha": "a13093ee28ef844a1d69460c688dc6d7a403f13b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197e78957aea05816665f843e4a0b936c847e07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197e78957aea05816665f843e4a0b936c847e07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1197e78957aea05816665f843e4a0b936c847e07", "patch": "@@ -1,3 +1,11 @@\n+2010-01-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42739\n+\t* tree-cfgcleanup.c (remove_forwarder_block): Move destination\n+\tlabels of computed or non-local gotos to the destination.\n+\t* tree-cfg.c (gimple_verify_flow_info): Verify that a EH\n+\tlanding pad label is the first label.\n+\n 2010-01-15  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-loop-im.c (gen_lsm_tmp_name): Fix bogus fallthru."}, {"sha": "990ea36bf0983761f5f3b4ed7c47d1dc94e69df7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197e78957aea05816665f843e4a0b936c847e07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197e78957aea05816665f843e4a0b936c847e07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1197e78957aea05816665f843e4a0b936c847e07", "patch": "@@ -1,3 +1,8 @@\n+2010-01-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42739\n+\t* g++.dg/torture/pr42739.C: New testcase.\n+\n 2010-01-15  Dodji Seketeli  <dodji@redhat.com>\n \n \t* g++.dg/template/error45.C: Revert as part of reverting changes"}, {"sha": "ccc05f8360c107d200b76e667ef742df3df791ec", "filename": "gcc/testsuite/g++.dg/torture/pr42739.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197e78957aea05816665f843e4a0b936c847e07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42739.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197e78957aea05816665f843e4a0b936c847e07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42739.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42739.C?ref=1197e78957aea05816665f843e4a0b936c847e07", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+struct s { ~s() { s(); } };\n+\n+int f()\n+{\n+  M:\n+    s o = s();\n+    f();\n+    f();\n+\n+  L:\n+    goto *(f() ? &&L : &&M);\n+\n+    return 0;\n+}"}, {"sha": "0a3d544eece34b61c610d04c4dfb5e0641991801", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197e78957aea05816665f843e4a0b936c847e07/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197e78957aea05816665f843e4a0b936c847e07/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1197e78957aea05816665f843e4a0b936c847e07", "patch": "@@ -4268,6 +4268,15 @@ gimple_verify_flow_info (void)\n \t      err = 1;\n \t    }\n \n+\t  if (prev_stmt && EH_LANDING_PAD_NR (label) != 0)\n+\t    {\n+\t      error (\"EH landing pad label \");\n+\t      print_generic_expr (stderr, label, 0);\n+\t      fprintf (stderr, \" is not first in a sequence of labels in bb %d\",\n+\t\t       bb->index);\n+\t      err = 1;\n+\t    }\n+\n \t  if (label_to_block (label) != bb)\n \t    {\n \t      error (\"label \");"}, {"sha": "5904407a35b59ed04a7dcc7a6f36727910613eb9", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197e78957aea05816665f843e4a0b936c847e07/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197e78957aea05816665f843e4a0b936c847e07/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=1197e78957aea05816665f843e4a0b936c847e07", "patch": "@@ -338,7 +338,6 @@ remove_forwarder_block (basic_block bb)\n   gimple label;\n   edge_iterator ei;\n   gimple_stmt_iterator gsi, gsi_to;\n-  bool seen_abnormal_edge = false;\n \n   /* We check for infinite loops already in tree_forwarder_block_p.\n      However it may happen that the infinite loop is created\n@@ -365,14 +364,10 @@ remove_forwarder_block (basic_block bb)\n \n      So if there is an abnormal edge to BB, proceed only if there is\n      no abnormal edge to DEST and there are no phi nodes in DEST.  */\n-  if (has_abnormal_incoming_edge_p (bb))\n-    {\n-      seen_abnormal_edge = true;\n-\n-      if (has_abnormal_incoming_edge_p (dest)\n-\t  || !gimple_seq_empty_p (phi_nodes (dest)))\n-\treturn false;\n-    }\n+  if (has_abnormal_incoming_edge_p (bb)\n+      && (has_abnormal_incoming_edge_p (dest)\n+\t  || !gimple_seq_empty_p (phi_nodes (dest))))\n+    return false;\n \n   /* If there are phi nodes in DEST, and some of the blocks that are\n      predecessors of BB are also predecessors of DEST, check that the\n@@ -419,16 +414,40 @@ remove_forwarder_block (basic_block bb)\n \t}\n     }\n \n-  if (seen_abnormal_edge)\n+  /* Move nonlocal labels and computed goto targets as well as user\n+     defined labels and labels with an EH landing pad number to the\n+     new block, so that the redirection of the abnormal edges works,\n+     jump targets end up in a sane place and debug information for\n+     labels is retained.  */\n+  gsi_to = gsi_start_bb (dest);\n+  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); )\n+    {\n+      tree decl;\n+      label = gsi_stmt (gsi);\n+      if (is_gimple_debug (label))\n+\tbreak;\n+      decl = gimple_label_label (label);\n+      if (EH_LANDING_PAD_NR (decl) != 0\n+\t  || DECL_NONLOCAL (decl)\n+\t  || FORCED_LABEL (decl)\n+\t  || !DECL_ARTIFICIAL (decl))\n+\t{\n+\t  gsi_remove (&gsi, false);\n+\t  gsi_insert_before (&gsi_to, label, GSI_SAME_STMT);\n+\t}\n+      else\n+\tgsi_next (&gsi);\n+    }\n+\n+  /* Move debug statements if the destination has just a single\n+     predecessor.  */\n+  if (single_pred_p (dest))\n     {\n-      /* Move the labels to the new block, so that the redirection of\n-\t the abnormal edges works.  */\n-      gsi_to = gsi_start_bb (dest);\n-      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); )\n+      gsi_to = gsi_after_labels (dest);\n+      for (gsi = gsi_after_labels (bb); !gsi_end_p (gsi); )\n \t{\n-\t  label = gsi_stmt (gsi);\n-\t  gcc_assert (gimple_code (label) == GIMPLE_LABEL\n-\t\t      || is_gimple_debug (label));\n+\t  if (!is_gimple_debug (gsi_stmt (gsi)))\n+\t    break;\n \t  gsi_remove (&gsi, false);\n \t  gsi_insert_before (&gsi_to, label, GSI_SAME_STMT);\n \t}"}]}