{"sha": "61eb99f6cc4a1deed034cca72870a21d340d5aa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFlYjk5ZjZjYzRhMWRlZWQwMzRjY2E3Mjg3MGEyMWQzNDBkNWFhMg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-07-27T17:09:38Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-07-27T17:09:38Z"}, "message": "re PR c/61861 (Incorrect column number for -Wdiscarded-qualifiers)\n\n\tPR c/61861\n\t* macro.c (builtin_macro): Add location parameter.  Set\n\tlocation of builtin macro to the expansion point.\n\t(enter_macro_context): Pass location to builtin_macro.\n\n\t* gcc.dg/pr61861.c: New test.\n\nFrom-SVN: r213102", "tree": {"sha": "820f36cafea197aafe4a4a9b0925081fe2507eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/820f36cafea197aafe4a4a9b0925081fe2507eac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61eb99f6cc4a1deed034cca72870a21d340d5aa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61eb99f6cc4a1deed034cca72870a21d340d5aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61eb99f6cc4a1deed034cca72870a21d340d5aa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61eb99f6cc4a1deed034cca72870a21d340d5aa2/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17522262ead9bae03bf6d21cc2b1e7a02ef60c60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17522262ead9bae03bf6d21cc2b1e7a02ef60c60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17522262ead9bae03bf6d21cc2b1e7a02ef60c60"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "48717fc3e8c26a37d7289bb9aef32a38f9188d68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61eb99f6cc4a1deed034cca72870a21d340d5aa2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61eb99f6cc4a1deed034cca72870a21d340d5aa2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61eb99f6cc4a1deed034cca72870a21d340d5aa2", "patch": "@@ -1,3 +1,8 @@\n+2014-07-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61861\n+\t* gcc.dg/pr61861.c: New test.\n+\n 2014-07-27  Petr Murzin  <petr.murzin@intel.com>\n \n \t* gcc.target/i386/avx512f-vbroadcastf64x4-2.c: Fix the uninitialized"}, {"sha": "d9028686e266f798d57969df50d003b1dbe55d28", "filename": "gcc/testsuite/gcc.dg/pr61861.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61eb99f6cc4a1deed034cca72870a21d340d5aa2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61861.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61eb99f6cc4a1deed034cca72870a21d340d5aa2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61861.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61861.c?ref=61eb99f6cc4a1deed034cca72870a21d340d5aa2", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-prune-output \"expected\" } */\n+\n+extern void foo (int);\n+extern void bar (int, char *);\n+\n+#define F __FILE__ /* { dg-error \"11:passing argument\" } */\n+#define T __TIME__ /* { dg-error \"11:passing argument\" } */\n+#define D __DATE__ /* { dg-error \"11:passing argument\" } */\n+#define L __LINE__ /* { dg-error \"11:passing argument\" } */\n+\n+#define F2 \"foo\" /* { dg-error \"12:passing argument\" } */\n+#define T2 \"foo\" /* { dg-error \"12:passing argument\" } */\n+#define D2 \"foo\" /* { dg-error \"12:passing argument\" } */\n+#define L2 42 /* { dg-error \"12:passing argument\" } */\n+\n+void\n+f (void)\n+{\n+  foo (__FILE__); /* { dg-error \"8:passing argument\" } */\n+  foo (__BASE_FILE__); /* { dg-error \"8:passing argument\" } */\n+  foo (__TIME__); /* { dg-error \"8:passing argument\" } */\n+  foo (__DATE__); /* { dg-error \"8:passing argument\" } */\n+  foo (__TIMESTAMP__); /* { dg-error \"8:passing argument\" } */\n+  bar (1, __LINE__); /* { dg-error \"11:passing argument\" } */\n+  bar (__COUNTER__, __COUNTER__); /* { dg-error \"21:passing argument\" } */\n+\n+  foo (F); /* { dg-message \"8:in expansion of\" } */\n+  foo (T); /* { dg-message \"8:in expansion of\" } */\n+  foo (D); /* { dg-message \"8:in expansion of\" } */\n+  bar (1, L); /* { dg-message \"11:in expansion of\" } */\n+\n+  foo (F2); /* { dg-message \"8:in expansion of\" } */\n+  foo (T2); /* { dg-message \"8:in expansion of\" } */\n+  foo (D2); /* { dg-message \"8:in expansion of\" } */\n+  bar (1, L2); /* { dg-message \"11:in expansion of\" } */\n+}"}, {"sha": "e550d177c26fbad228b9a8a4ebbeaa0c1dd27741", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61eb99f6cc4a1deed034cca72870a21d340d5aa2/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61eb99f6cc4a1deed034cca72870a21d340d5aa2/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=61eb99f6cc4a1deed034cca72870a21d340d5aa2", "patch": "@@ -1,3 +1,10 @@\n+2014-07-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61861\n+\t* macro.c (builtin_macro): Add location parameter.  Set\n+\tlocation of builtin macro to the expansion point.\n+\t(enter_macro_context): Pass location to builtin_macro.\n+\n 2014-07-16  Dodji Seketeli  <dodji@redhat.com>\n \n \tSupport location tracking for built-in macro tokens"}, {"sha": "556628ba7c787989f77f7ab47fd5813e8f8f232f", "filename": "libcpp/macro.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61eb99f6cc4a1deed034cca72870a21d340d5aa2/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61eb99f6cc4a1deed034cca72870a21d340d5aa2/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=61eb99f6cc4a1deed034cca72870a21d340d5aa2", "patch": "@@ -84,7 +84,7 @@ struct macro_arg_token_iter\n \n static int enter_macro_context (cpp_reader *, cpp_hashnode *,\n \t\t\t\tconst cpp_token *, source_location);\n-static int builtin_macro (cpp_reader *, cpp_hashnode *);\n+static int builtin_macro (cpp_reader *, cpp_hashnode *, source_location);\n static void push_ptoken_context (cpp_reader *, cpp_hashnode *, _cpp_buff *,\n \t\t\t\t const cpp_token **, unsigned int);\n static void push_extended_tokens_context (cpp_reader *, cpp_hashnode *,\n@@ -399,9 +399,10 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n /* Convert builtin macros like __FILE__ to a token and push it on the\n    context stack.  Also handles _Pragma, for which a new token may not\n    be created.  Returns 1 if it generates a new token context, 0 to\n-   return the token to the caller.  */\n+   return the token to the caller.  LOC is the location of the expansion\n+   point of the macro.  */\n static int\n-builtin_macro (cpp_reader *pfile, cpp_hashnode *node)\n+builtin_macro (cpp_reader *pfile, cpp_hashnode *node, source_location loc)\n {\n   const uchar *buf;\n   size_t len;\n@@ -429,6 +430,8 @@ builtin_macro (cpp_reader *pfile, cpp_hashnode *node)\n   /* Set pfile->cur_token as required by _cpp_lex_direct.  */\n   pfile->cur_token = _cpp_temp_token (pfile);\n   cpp_token *token = _cpp_lex_direct (pfile);\n+  /* We should point to the expansion point of the builtin macro.  */\n+  token->src_loc = loc;\n   if (pfile->context->tokens_kind == TOKENS_KIND_EXTENDED)\n     {\n       /* We are tracking tokens resulting from macro expansion.\n@@ -1212,7 +1215,7 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n \n   pfile->about_to_expand_macro_p = false;\n   /* Handle built-in macros and the _Pragma operator.  */\n-  return builtin_macro (pfile, node);\n+  return builtin_macro (pfile, node, location);\n }\n \n /* De-allocate the memory used by BUFF which is an array of instances"}]}