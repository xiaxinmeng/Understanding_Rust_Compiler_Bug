{"sha": "3a44d5398e0652759de5c863e7e74ad386b054c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0NGQ1Mzk4ZTA2NTI3NTlkZTVjODYzZTdlNzRhZDM4NmIwNTRjOA==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2002-02-13T07:39:56Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2002-02-13T07:39:56Z"}, "message": "data.c (ffedata_eval_offset_): Only convert index...\n\n2002-02-13  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* data.c (ffedata_eval_offset_): Only convert index,\n\tlow and high bound in data statements to default integer\n\tif they are constants.  Use a copy of the data structure.\n\nFrom-SVN: r49721", "tree": {"sha": "986e05ea00539663ba5d12e1bb83d5cbb5864b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/986e05ea00539663ba5d12e1bb83d5cbb5864b2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a44d5398e0652759de5c863e7e74ad386b054c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a44d5398e0652759de5c863e7e74ad386b054c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a44d5398e0652759de5c863e7e74ad386b054c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a44d5398e0652759de5c863e7e74ad386b054c8/comments", "author": null, "committer": null, "parents": [{"sha": "ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "4d783718a2f4af37d9028e92bbe42c17c48d7200", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a44d5398e0652759de5c863e7e74ad386b054c8/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a44d5398e0652759de5c863e7e74ad386b054c8/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=3a44d5398e0652759de5c863e7e74ad386b054c8", "patch": "@@ -1,3 +1,9 @@\n+2002-02-13  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* data.c (ffedata_eval_offset_): Only convert index,\n+\tlow and high bound in data statements to default integer\n+\tif they are constants.  Use a copy of the data structure.\n+\n 2002-02-09  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* data.c (ffedata_eval_offset_): Convert non-default integer"}, {"sha": "3e1ae6213cbcaa39b9295cd81962cff96d67f4cf", "filename": "gcc/f/data.c", "status": "modified", "additions": 40, "deletions": 30, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a44d5398e0652759de5c863e7e74ad386b054c8/gcc%2Ff%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a44d5398e0652759de5c863e7e74ad386b054c8/gcc%2Ff%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fdata.c?ref=3a44d5398e0652759de5c863e7e74ad386b054c8", "patch": "@@ -978,6 +978,7 @@ ffedata_eval_offset_ (ffebld subscripts, ffebld dims)\n   while (subscripts != NULL)\n     {\n       ffeinfoKindtype sub_kind, low_kind, hi_kind;\n+      ffebld sub1, low1, hi1;\n \n       ++rank;\n       assert (dims != NULL);\n@@ -986,16 +987,19 @@ ffedata_eval_offset_ (ffebld subscripts, ffebld dims)\n       dim = ffebld_head (dims);\n \n       assert (ffeinfo_basictype (ffebld_info (subscript)) == FFEINFO_basictypeINTEGER);\n-      /* Force to default - it's a constant expression !  */\n-      sub_kind = ffeinfo_kindtype (ffebld_info (subscript));\n-      if (sub_kind == FFEINFO_kindtypeINTEGER2)\n-\tsubscript->u.conter.expr->u.integer1 = (ffetargetIntegerDefault) subscript->u.conter.expr->u.integer2;\n-      else if (sub_kind == FFEINFO_kindtypeINTEGER3)\n-\tsubscript->u.conter.expr->u.integer1 = (ffetargetIntegerDefault) subscript->u.conter.expr->u.integer3;\n-      else if (sub_kind == FFEINFO_kindtypeINTEGER4)\n-\tsubscript->u.conter.expr->u.integer1 = (ffetargetIntegerDefault) subscript->u.conter.expr->u.integer4;\n-      ffeinfo_kindtype (ffebld_info (subscript)) = FFEINFO_kindtypeINTEGERDEFAULT;\n-      value = ffedata_eval_integer1_ (subscript);\n+      if (ffebld_op (subscript) == FFEBLD_opCONTER)\n+\t{\n+\t  /* Force to default - it's a constant expression !  */\n+\t  sub_kind = ffeinfo_kindtype (ffebld_info (subscript));\n+\t  sub1 = ffebld_new_conter_with_orig (ffebld_constant_new_integer1_val (\n+\t\t   sub_kind == FFEINFO_kindtypeINTEGER2 ? subscript->u.conter.expr->u.integer2 :\n+\t\t   sub_kind == FFEINFO_kindtypeINTEGER3 ? subscript->u.conter.expr->u.integer3 :\n+\t\t   sub_kind == FFEINFO_kindtypeINTEGER4 ? subscript->u.conter.expr->u.integer4 :\n+\t\t\tsubscript->u.conter.expr->u.integer1), NULL);\n+\t  value = ffedata_eval_integer1_ (sub1);\n+\t}\n+      else\n+\tvalue = ffedata_eval_integer1_ (subscript);\n \n       assert (ffebld_op (dim) == FFEBLD_opBOUNDS);\n       low = ffebld_left (dim);\n@@ -1006,29 +1010,35 @@ ffedata_eval_offset_ (ffebld subscripts, ffebld dims)\n       else\n \t{\n \t  assert (ffeinfo_basictype (ffebld_info (low)) == FFEINFO_basictypeINTEGER);\n-\t  /* Force to default - it's a constant expression !  */\n-\t  low_kind = ffeinfo_kindtype (ffebld_info (low));\n-\t  if (low_kind == FFEINFO_kindtypeINTEGER2)\n-\t    low->u.conter.expr->u.integer1 = (ffetargetIntegerDefault) low->u.conter.expr->u.integer2;\n-\t  else if (low_kind == FFEINFO_kindtypeINTEGER3)\n-\t    low->u.conter.expr->u.integer1 = (ffetargetIntegerDefault) low->u.conter.expr->u.integer3;\n-\t  else if (low_kind == FFEINFO_kindtypeINTEGER4)\n-\t    low->u.conter.expr->u.integer1 = (ffetargetIntegerDefault) low->u.conter.expr->u.integer4;\n-\t  ffeinfo_kindtype (ffebld_info (low)) = FFEINFO_kindtypeINTEGERDEFAULT;\n-\t  lowbound = ffedata_eval_integer1_ (low);\n+\t  if (ffebld_op (low) == FFEBLD_opCONTER)\n+\t    {\n+\t      /* Force to default - it's a constant expression !  */\n+\t      low_kind = ffeinfo_kindtype (ffebld_info (low));\n+\t      low1 = ffebld_new_conter_with_orig (ffebld_constant_new_integer1_val (\n+\t\t\tlow_kind == FFEINFO_kindtypeINTEGER2 ? low->u.conter.expr->u.integer2 :\n+\t\t\tlow_kind == FFEINFO_kindtypeINTEGER3 ? low->u.conter.expr->u.integer3 :\n+\t\t\tlow_kind == FFEINFO_kindtypeINTEGER4 ? low->u.conter.expr->u.integer4 :\n+\t\t\t\tlow->u.conter.expr->u.integer1), NULL);\n+\t       lowbound = ffedata_eval_integer1_ (low1);\n+\t     }\n+\t   else\n+\t     lowbound = ffedata_eval_integer1_ (low);\n \t}\n \n       assert (ffeinfo_basictype (ffebld_info (high)) == FFEINFO_basictypeINTEGER);\n-      /* Force to default - it's a constant expression !  */\n-      hi_kind = ffeinfo_kindtype (ffebld_info (high));\n-      if (hi_kind == FFEINFO_kindtypeINTEGER2)\n-\thigh->u.conter.expr->u.integer1 = (ffetargetIntegerDefault) high->u.conter.expr->u.integer2;\n-      else if (hi_kind == FFEINFO_kindtypeINTEGER3)\n-\thigh->u.conter.expr->u.integer1 = (ffetargetIntegerDefault) high->u.conter.expr->u.integer3;\n-      else if (hi_kind == FFEINFO_kindtypeINTEGER4)\n-\thigh->u.conter.expr->u.integer1 = (ffetargetIntegerDefault) high->u.conter.expr->u.integer4;\n-      ffeinfo_kindtype (ffebld_info (high)) = FFEINFO_kindtypeINTEGERDEFAULT;\n-      highbound = ffedata_eval_integer1_ (high);\n+      if (ffebld_op (high) == FFEBLD_opCONTER)\n+\t{\n+\t  /* Force to default - it's a constant expression !  */\n+\t  hi_kind = ffeinfo_kindtype (ffebld_info (high));\n+\t  hi1 = ffebld_new_conter_with_orig (ffebld_constant_new_integer1_val (\n+\t\t   hi_kind == FFEINFO_kindtypeINTEGER2 ? high->u.conter.expr->u.integer2 :\n+\t\t   hi_kind == FFEINFO_kindtypeINTEGER3 ? high->u.conter.expr->u.integer3 :\n+\t\t   hi_kind == FFEINFO_kindtypeINTEGER4 ? high->u.conter.expr->u.integer4 :\n+\t\t\thigh->u.conter.expr->u.integer1), NULL);\n+\t  highbound = ffedata_eval_integer1_ (hi1);\n+\t}\n+      else\n+\thighbound = ffedata_eval_integer1_ (high);\n \n       if ((value < lowbound) || (value > highbound))\n \t{"}]}