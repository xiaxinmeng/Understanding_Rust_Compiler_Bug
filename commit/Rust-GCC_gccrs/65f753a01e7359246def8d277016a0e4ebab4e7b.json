{"sha": "65f753a01e7359246def8d277016a0e4ebab4e7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmNzUzYTAxZTczNTkyNDZkZWY4ZDI3NzAxNmEwZTRlYmFiNGU3Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-09-22T13:22:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-09-22T13:22:15Z"}, "message": "re PR bootstrap/41405 (Bootstrap fails on *-apple-darwin* due to revision 151815)\n\n\tPR bootstrap/41405\n\t* dwarf2out.c (base_type_die, record_type_tag, gen_subprogram_die,\n\tadd_call_src_coords_attributes, add_high_low_attributes,\n\tgen_compile_unit_die, gen_type_die_with_usage force_decl_die,\n\tgen_decl_die, dwarf2out_imported_module_or_decl_1, dwarf2out_finish,\n\tdwarf2out_imported_module_or_decl): Avoid using DWARF3 additions\n\twhen -gdwarf-2 -gstrict-dwarf.\n\t(loc_list_from_tree): Likewise.  Avoid using DWARF4 additions when\n\t-gdwarf-[23] -gstrict-dwarf.\n\t(address_of_int_loc_descriptor, loc_descriptor,\n\tloc_list_for_address_of_addr_expr_of_indirect_ref): Avoid using\n\tDWARF4 additions when -gdwarf-[23] -gstrict-dwarf.\n\t* common.opt (gno-strict-dwarf, gstrict-dwarf): New options.\n\n\t* gfortran.dg/debug/pr37738.f: Add -gno-strict-dwarf to dg-options.\n\t* gfortran.dg/debug/pr35154-dwarf2.f: Likewise.\n\t* g++.dg/debug/dwarf2/explicit-constructor.C: Likewise.\n\t* g++.dg/debug/dwarf2/imported-module-2.C: Likewise.\n\t* g++.dg/debug/dwarf2/imported-module-3.C: Likewise.\n\t* g++.dg/debug/dwarf2/imported-module-4.C: Likewise.\n\t* g++.dg/debug/dwarf2/namespace-1.C: Likewise.\n\t* objc.dg/dwarf-2.m: Likewise.\n\nFrom-SVN: r151978", "tree": {"sha": "31d77ddbb19c09cb2be27291d30f6ee0eb49451c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31d77ddbb19c09cb2be27291d30f6ee0eb49451c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65f753a01e7359246def8d277016a0e4ebab4e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f753a01e7359246def8d277016a0e4ebab4e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f753a01e7359246def8d277016a0e4ebab4e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f753a01e7359246def8d277016a0e4ebab4e7b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9190e0a99ca2d2b729e80dca8109c93605fe82ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9190e0a99ca2d2b729e80dca8109c93605fe82ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9190e0a99ca2d2b729e80dca8109c93605fe82ce"}], "stats": {"total": 154, "additions": 113, "deletions": 41}, "files": [{"sha": "115042b974f759bd3f3ff24dfe471ca2f649285c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -6,6 +6,20 @@\n \t* reload1.c (reload): Call wrap_constant when substituting\n \treg for equiv inside of DEBUG_INSNs.\n \n+\tPR bootstrap/41405\n+\t* dwarf2out.c (base_type_die, record_type_tag, gen_subprogram_die,\n+\tadd_call_src_coords_attributes, add_high_low_attributes,\n+\tgen_compile_unit_die, gen_type_die_with_usage force_decl_die,\n+\tgen_decl_die, dwarf2out_imported_module_or_decl_1, dwarf2out_finish,\n+\tdwarf2out_imported_module_or_decl): Avoid using DWARF3 additions\n+\twhen -gdwarf-2 -gstrict-dwarf.\n+\t(loc_list_from_tree): Likewise.  Avoid using DWARF4 additions when\n+\t-gdwarf-[23] -gstrict-dwarf.\n+\t(address_of_int_loc_descriptor, loc_descriptor,\n+\tloc_list_for_address_of_addr_expr_of_indirect_ref): Avoid using\n+\tDWARF4 additions when -gdwarf-[23] -gstrict-dwarf.\n+\t* common.opt (gno-strict-dwarf, gstrict-dwarf): New options.\n+\n 2009-09-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/41428"}, {"sha": "42da2d56cc851a4ef5566382dd0c56c862ff957c", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -1472,6 +1472,14 @@ gstabs+\n Common JoinedOrMissing Negative(gvms)\n Generate debug information in extended STABS format\n \n+gno-strict-dwarf\n+Common RejectNegative Var(dwarf_strict,0)\n+Emit DWARF additions beyond selected version\n+\n+gstrict-dwarf\n+Common Report RejectNegative Var(dwarf_strict,1) VarExists\n+Don't emit DWARF additions beyond selected version\n+\n gtoggle\n Common Report Var(flag_gtoggle)\n Toggle debug information generation"}, {"sha": "9c128f1ec2e90f0537406c7a69c019b23435ae88", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 73, "deletions": 33, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -10232,13 +10232,20 @@ base_type_die (tree type)\n \n     case REAL_TYPE:\n       if (DECIMAL_FLOAT_MODE_P (TYPE_MODE (type)))\n-\tencoding = DW_ATE_decimal_float;\n+\t{\n+\t  if (dwarf_version >= 3 || !dwarf_strict)\n+\t    encoding = DW_ATE_decimal_float;\n+\t  else\n+\t    encoding = DW_ATE_lo_user;\n+\t}\n       else\n \tencoding = DW_ATE_float;\n       break;\n \n     case FIXED_POINT_TYPE:\n-      if (TYPE_UNSIGNED (type))\n+      if (!(dwarf_version >= 3 || !dwarf_strict))\n+\tencoding = DW_ATE_lo_user;\n+      else if (TYPE_UNSIGNED (type))\n \tencoding = DW_ATE_unsigned_fixed;\n       else\n \tencoding = DW_ATE_signed_fixed;\n@@ -10894,6 +10901,9 @@ address_of_int_loc_descriptor (int size, HOST_WIDE_INT i)\n   int litsize;\n   dw_loc_descr_ref loc_result = NULL;\n \n+  if (!(dwarf_version >= 4 || !dwarf_strict))\n+    return NULL;\n+\n   if (i >= 0)\n     {\n       if (i <= 31)\n@@ -11842,7 +11852,7 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n       break;\n \n     case CONST_DOUBLE:\n-      if (mode != VOIDmode)\n+      if (mode != VOIDmode && (dwarf_version >= 4 || !dwarf_strict))\n \t{\n \t  /* Note that a CONST_DOUBLE rtx could represent either an integer\n \t     or a floating-point constant.  A CONST_DOUBLE is used whenever\n@@ -11873,7 +11883,7 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n       break;\n \n     case CONST_VECTOR:\n-      if (mode != VOIDmode)\n+      if (mode != VOIDmode && (dwarf_version >= 4 || !dwarf_strict))\n \t{\n \t  unsigned int elt_size = GET_MODE_UNIT_SIZE (GET_MODE (rtl));\n \t  unsigned int length = CONST_VECTOR_NUNITS (rtl);\n@@ -11961,7 +11971,8 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n \t  && SYMBOL_REF_TLS_MODEL (rtl) != TLS_MODEL_NONE)\n \tbreak;\n     case LABEL_REF:\n-      if (mode != VOIDmode && GET_MODE_SIZE (mode) == DWARF2_ADDR_SIZE)\n+      if (mode != VOIDmode && GET_MODE_SIZE (mode) == DWARF2_ADDR_SIZE\n+\t  && (dwarf_version >= 4 || !dwarf_strict))\n \t{\n \t  loc_result = new_loc_descr (DW_OP_implicit_value,\n \t\t\t\t      DWARF2_ADDR_SIZE, 0);\n@@ -11973,7 +11984,8 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n \n     default:\n       if (GET_MODE_CLASS (mode) == MODE_INT && GET_MODE (rtl) == mode\n-\t  && GET_MODE_SIZE (GET_MODE (rtl)) <= DWARF2_ADDR_SIZE)\n+\t  && GET_MODE_SIZE (GET_MODE (rtl)) <= DWARF2_ADDR_SIZE\n+\t  && (dwarf_version >= 4 || !dwarf_strict))\n \t{\n \t  /* Value expression.  */\n \t  loc_result = mem_loc_descriptor (rtl, VOIDmode, initialized);\n@@ -12345,7 +12357,8 @@ loc_list_for_address_of_addr_expr_of_indirect_ref (tree loc, bool toplev)\n   if (!offset && !bitpos)\n     list_ret = loc_list_from_tree (TREE_OPERAND (obj, 0), toplev ? 2 : 1);\n   else if (toplev\n-\t   && int_size_in_bytes (TREE_TYPE (loc)) <= DWARF2_ADDR_SIZE)\n+\t   && int_size_in_bytes (TREE_TYPE (loc)) <= DWARF2_ADDR_SIZE\n+\t   && (dwarf_version >= 4 || !dwarf_strict))\n     {\n       list_ret = loc_list_from_tree (TREE_OPERAND (obj, 0), 0);\n       if (!list_ret)\n@@ -12481,7 +12494,8 @@ loc_list_from_tree (tree loc, int want_address)\n \t    }\n \t  else\n \t    {\n-\t      if (!targetm.emutls.debug_form_tls_address)\n+\t      if (!targetm.emutls.debug_form_tls_address\n+\t\t  || !(dwarf_version >= 3 || !dwarf_strict))\n \t\treturn 0;\n \t      loc = emutls_decl (loc);\n \t      first_op = DW_OP_addr;\n@@ -12884,7 +12898,8 @@ loc_list_from_tree (tree loc, int want_address)\n   if (!ret && !list_ret)\n     return 0;\n \n-  if (want_address == 2 && !have_address)\n+  if (want_address == 2 && !have_address\n+      && (dwarf_version >= 4 || !dwarf_strict))\n     {\n       if (int_size_in_bytes (TREE_TYPE (loc)) > DWARF2_ADDR_SIZE)\n \t{\n@@ -15274,7 +15289,9 @@ record_type_tag (tree type)\n       return DW_TAG_class_type;\n \n     case RECORD_IS_INTERFACE:\n-      return DW_TAG_interface_type;\n+      if (dwarf_version >= 3 || !dwarf_strict)\n+\treturn DW_TAG_interface_type;\n+      return DW_TAG_structure_type;\n \n     default:\n       gcc_unreachable ();\n@@ -15733,7 +15750,8 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \n \t  /* If this is an explicit function declaration then generate\n \t     a DW_AT_explicit attribute.  */\n-          if (lang_hooks.decls.function_decl_explicit_p (decl))\n+\t  if (lang_hooks.decls.function_decl_explicit_p (decl)\n+\t      && (dwarf_version >= 3 || !dwarf_strict))\n \t    add_AT_flag (subr_die, DW_AT_explicit, 1);\n \n \t  /* The first time we see a member function, it is in the context of\n@@ -16281,8 +16299,11 @@ add_call_src_coords_attributes (tree stmt, dw_die_ref die)\n {\n   expanded_location s = expand_location (BLOCK_SOURCE_LOCATION (stmt));\n \n-  add_AT_file (die, DW_AT_call_file, lookup_filename (s.file));\n-  add_AT_unsigned (die, DW_AT_call_line, s.line);\n+  if (dwarf_version >= 3 || !dwarf_strict)\n+    {\n+      add_AT_file (die, DW_AT_call_file, lookup_filename (s.file));\n+      add_AT_unsigned (die, DW_AT_call_line, s.line);\n+    }\n }\n \n \n@@ -16294,7 +16315,8 @@ add_high_low_attributes (tree stmt, dw_die_ref die)\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n-  if (BLOCK_FRAGMENT_CHAIN (stmt))\n+  if (BLOCK_FRAGMENT_CHAIN (stmt)\n+      && (dwarf_version >= 3 || !dwarf_strict))\n     {\n       tree chain;\n \n@@ -16496,24 +16518,26 @@ gen_compile_unit_die (const char *filename)\n \n   add_AT_string (die, DW_AT_producer, producer);\n \n+  language = DW_LANG_C89;\n   if (strcmp (language_string, \"GNU C++\") == 0)\n     language = DW_LANG_C_plus_plus;\n-  else if (strcmp (language_string, \"GNU Ada\") == 0)\n-    language = DW_LANG_Ada95;\n   else if (strcmp (language_string, \"GNU F77\") == 0)\n     language = DW_LANG_Fortran77;\n-  else if (strcmp (language_string, \"GNU Fortran\") == 0)\n-    language = DW_LANG_Fortran95;\n   else if (strcmp (language_string, \"GNU Pascal\") == 0)\n     language = DW_LANG_Pascal83;\n-  else if (strcmp (language_string, \"GNU Java\") == 0)\n-    language = DW_LANG_Java;\n-  else if (strcmp (language_string, \"GNU Objective-C\") == 0)\n-    language = DW_LANG_ObjC;\n-  else if (strcmp (language_string, \"GNU Objective-C++\") == 0)\n-    language = DW_LANG_ObjC_plus_plus;\n-  else\n-    language = DW_LANG_C89;\n+  else if (dwarf_version >= 3 || !dwarf_strict)\n+    {\n+      if (strcmp (language_string, \"GNU Ada\") == 0)\n+\tlanguage = DW_LANG_Ada95;\n+      else if (strcmp (language_string, \"GNU Fortran\") == 0)\n+\tlanguage = DW_LANG_Fortran95;\n+      else if (strcmp (language_string, \"GNU Java\") == 0)\n+\tlanguage = DW_LANG_Java;\n+      else if (strcmp (language_string, \"GNU Objective-C\") == 0)\n+\tlanguage = DW_LANG_ObjC;\n+      else if (strcmp (language_string, \"GNU Objective-C++\") == 0)\n+\tlanguage = DW_LANG_ObjC_plus_plus;\n+    }\n \n   add_AT_unsigned (die, DW_AT_language, language);\n   return die;\n@@ -16793,7 +16817,8 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n   /* If this is an array type with hidden descriptor, handle it first.  */\n   if (!TREE_ASM_WRITTEN (type)\n       && lang_hooks.types.get_array_descr_info\n-      && lang_hooks.types.get_array_descr_info (type, &info))\n+      && lang_hooks.types.get_array_descr_info (type, &info)\n+      && (dwarf_version >= 3 || !dwarf_strict))\n     {\n       gen_descr_array_type_die (type, &info, context_die);\n       TREE_ASM_WRITTEN (type) = 1;\n@@ -17177,7 +17202,11 @@ force_decl_die (tree decl)\n \t  break;\n \n \tcase NAMESPACE_DECL:\n-\t  dwarf2out_decl (decl);\n+\t  if (dwarf_version >= 3 || !dwarf_strict)\n+\t    dwarf2out_decl (decl);\n+\t  else\n+\t    /* DWARF2 has neither DW_TAG_module, nor DW_TAG_namespace.  */\n+\t    decl_die = comp_unit_die;\n \t  break;\n \n \tdefault:\n@@ -17487,7 +17516,8 @@ gen_decl_die (tree decl, tree origin, dw_die_ref context_die)\n \n     case NAMESPACE_DECL:\n     case IMPORTED_DECL:\n-      gen_namespace_die (decl, context_die);\n+      if (dwarf_version >= 3 || !dwarf_strict)\n+\tgen_namespace_die (decl, context_die);\n       break;\n \n     default:\n@@ -17585,9 +17615,14 @@ dwarf2out_imported_module_or_decl_1 (tree decl,\n     }\n \n   if (TREE_CODE (decl) == NAMESPACE_DECL)\n-    imported_die = new_die (DW_TAG_imported_module,\n-\t\t\t    lexical_block_die,\n-\t\t\t    lexical_block);\n+    {\n+      if (dwarf_version >= 3 || !dwarf_strict)\n+\timported_die = new_die (DW_TAG_imported_module,\n+\t\t\t\tlexical_block_die,\n+\t\t\t\tlexical_block);\n+      else\n+\treturn;\n+    }\n   else\n     imported_die = new_die (DW_TAG_imported_declaration,\n \t\t\t    lexical_block_die,\n@@ -17628,6 +17663,10 @@ dwarf2out_imported_module_or_decl (tree decl, tree name, tree context,\n       && TYPE_P (context)\n       && !should_emit_struct_debug (context, DINFO_USAGE_DIR_USE))\n     return;\n+\n+  if (!(dwarf_version >= 3 || !dwarf_strict))\n+    return;\n+\n   scope_die = get_context_die (context);\n \n   if (child)\n@@ -18856,7 +18895,8 @@ dwarf2out_finish (const char *filename)\n \n   /* We can only use the low/high_pc attributes if all of the code was\n      in .text.  */\n-  if (!have_multiple_function_sections)\n+  if (!have_multiple_function_sections\n+      || !(dwarf_version >= 3 || !dwarf_strict))\n     {\n       add_AT_lbl_id (comp_unit_die, DW_AT_low_pc, text_section_label);\n       add_AT_lbl_id (comp_unit_die, DW_AT_high_pc, text_end_label);"}, {"sha": "7fc7523eccaa93377afd237f95f169b6278b9e98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -2,6 +2,16 @@\n \n \t* gcc.dg/20090922-1.c: New test.\n \n+\tPR bootstrap/41405\n+\t* gfortran.dg/debug/pr37738.f: Add -gno-strict-dwarf to dg-options.\n+\t* gfortran.dg/debug/pr35154-dwarf2.f: Likewise.\n+\t* g++.dg/debug/dwarf2/explicit-constructor.C: Likewise.\n+\t* g++.dg/debug/dwarf2/imported-module-2.C: Likewise.\n+\t* g++.dg/debug/dwarf2/imported-module-3.C: Likewise.\n+\t* g++.dg/debug/dwarf2/imported-module-4.C: Likewise.\n+\t* g++.dg/debug/dwarf2/namespace-1.C: Likewise.\n+\t* objc.dg/dwarf-2.m: Likewise.\n+\n 2009-09-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/41428"}, {"sha": "32d205d207fb4c8900e2244d05a2c9b1c10e56e6", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/explicit-constructor.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fexplicit-constructor.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fexplicit-constructor.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fexplicit-constructor.C?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -1,7 +1,7 @@\n // Contributed by Dodji Seketeli <dodji@redhat.com>\n // Origin: PR c++\n // { dg-do compile }\n-// { dg-options \"-O -g -dA\" }\n+// { dg-options \"-O -g -dA -gno-strict-dwarf\" }\n // { dg-final { scan-assembler-times \"DW_AT_explicit\" 2 } }\n \n struct Foo"}, {"sha": "65141d74edb0515f5f40c6b9724201b5c8057111", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/imported-module-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fimported-module-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fimported-module-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fimported-module-2.C?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -1,7 +1,7 @@\n // Contributed by Dodji Seketeli <dodji@redhat.com>\n // Origin: PR debug/38390\n // { dg-do compile  }\n-// { dg-options \"-g -dA\" }\n+// { dg-options \"-g -dA -gno-strict-dwarf\" }\n // { dg-final { scan-assembler \"DW_TAG_imported_module\" }  }\n \n namespace A"}, {"sha": "6c563752a49c1542c7768c8050845c15b45e6d95", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/imported-module-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fimported-module-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fimported-module-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fimported-module-3.C?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -1,6 +1,6 @@\n // PR debug/39379\n // { dg-do compile }\n-// { dg-options \"-g -dA\" }\n+// { dg-options \"-g -dA -gno-strict-dwarf\" }\n // { dg-final { scan-assembler \"DW_TAG_imported_module\" }  }\n \n namespace A"}, {"sha": "a325ce20f633e0b165a5b1ecca7c5bbc305d00ba", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/imported-module-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fimported-module-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fimported-module-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fimported-module-4.C?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -1,6 +1,6 @@\n // PR debug/39379\n // { dg-do compile }\n-// { dg-options \"-g -dA\" }\n+// { dg-options \"-g -dA -gno-strict-dwarf\" }\n // { dg-final { scan-assembler \"DW_TAG_imported_module\" }  }\n \n namespace A"}, {"sha": "9b00453985a1281a464de436cdfab23487d10a4d", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/namespace-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fnamespace-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fnamespace-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fnamespace-1.C?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -1,6 +1,6 @@\n // Contributed by Dodji Seketeli <dodji@redhat.com>\n // Origin PR debug/41170\n-// { dg-options \"-g -dA -fno-merge-debug-strings\" }\n+// { dg-options \"-g -dA -fno-merge-debug-strings -gno-strict-dwarf\" }\n //\n // We want to test that there is a DW_TAG_namespace DIE DW_AT_name is set\n // to \"not_emitted\". That namespace die has a child DW_TAG_typedef DIE"}, {"sha": "40c13a4a1e267ea7d00a9f416e6504843b47247e", "filename": "gcc/testsuite/gfortran.dg/debug/pr35154-dwarf2.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr35154-dwarf2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr35154-dwarf2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr35154-dwarf2.f?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -2,7 +2,7 @@\n C { dg-do compile }\n C { dg-skip-if \"DWARF-2 only\" { \"*-*-*\" } { \"*\" } { \"-gdwarf-2\" } }\n C { dg-skip-if \"DWARF-2 only\" { \"*-*-*\" } { \"-g1\" } { \"\" } }\n-C { dg-options \"-dA\" }\n+C { dg-options \"-dA -gno-strict-dwarf\" }\n       common i,j\n       common /label/l,m\n       i = 1"}, {"sha": "fddc44c7ad4427fefb6a8a3c1ea57b73f4abd9ea", "filename": "gcc/testsuite/gfortran.dg/debug/pr37738.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr37738.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr37738.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr37738.f?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -2,7 +2,7 @@\n C { dg-do compile }\n C { dg-skip-if \"DWARF-2 only\" { \"*-*-*\" } { \"*\" } { \"-gdwarf-2\" } }\n C { dg-skip-if \"DWARF-2 only\" { \"*-*-*\" } { \"-g1\" } { \"\" } }\n-C { dg-options \"-dA\" }\n+C { dg-options \"-dA -gno-strict-dwarf\" }\n \n       subroutine a\n       integer*4 a_i, c_i"}, {"sha": "967f515901304a89d0f20e30a8b90ae576420b52", "filename": "gcc/testsuite/objc.dg/dwarf-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fobjc.dg%2Fdwarf-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f753a01e7359246def8d277016a0e4ebab4e7b/gcc%2Ftestsuite%2Fobjc.dg%2Fdwarf-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdwarf-2.m?ref=65f753a01e7359246def8d277016a0e4ebab4e7b", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-gdwarf-2 -dA\" } */\n+/* { dg-options \"-gdwarf-2 -dA -gno-strict-dwarf\" } */\n /* { dg-final { scan-assembler \"0x10\\[^0-9a-f\\].*DW_AT_language\" } } */\n /* { dg-skip-if \"No Dwarf\" { { *-*-aix* hppa*-*-hpux* } && { ! hppa*64*-*-* } } { \"*\" } { \"\" } } */\n int x;"}]}