{"sha": "7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzYTk3OTU0MzhiMzNhMDEzN2I0N2Y0MjJhOTU0MmM1ZTJkN2NjYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-06-03T16:54:24Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-06-03T16:54:24Z"}, "message": "re PR sanitizer/66190 (ICE: tree code \u2018call_expr\u2019 is not supported in LTO streams with -fsanitize=null)\n\n\tPR sanitizer/66190\n\t* cp-gimplify.c (struct cp_genericize_data): Add no_sanitize_p.\n\t(cp_genericize_r): Don't instrument static initializers.\n\t(cp_genericize_tree): Initialize wtd.no_sanitize_p.\n\n\t* g++.dg/ubsan/static-init-1.C: New test.\n\t* g++.dg/ubsan/static-init-2.C: New test.\n\t* g++.dg/ubsan/static-init-3.C: New test.\n\nFrom-SVN: r224096", "tree": {"sha": "34ec9ec91f1ff814d8b450858e27cb18a4ccf1d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ec9ec91f1ff814d8b450858e27cb18a4ccf1d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5123acd24138878133e447eb369831caa03d305a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5123acd24138878133e447eb369831caa03d305a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5123acd24138878133e447eb369831caa03d305a"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "a4ab191ad8c3487086e66035f530aaefa0ccf24e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "patch": "@@ -1,3 +1,10 @@\n+2015-06-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/66190\n+\t* cp-gimplify.c (struct cp_genericize_data): Add no_sanitize_p.\n+\t(cp_genericize_r): Don't instrument static initializers.\n+\t(cp_genericize_tree): Initialize wtd.no_sanitize_p.\n+\n 2015-06-02  Andres Tiraboschi  <andres.tiraboschi@tallertechnologies.com>\n \n \t* decl.c (start_function): Call plugin before parsing."}, {"sha": "69fd53b5b285be1502e52fc115824a2a702cdf95", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "patch": "@@ -906,6 +906,7 @@ struct cp_genericize_data\n   vec<tree> bind_expr_stack;\n   struct cp_genericize_omp_taskreg *omp_ctx;\n   tree try_block;\n+  bool no_sanitize_p;\n };\n \n /* Perform any pre-gimplification lowering of C++ front end trees to\n@@ -1105,6 +1106,21 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n \t\t\t\t     : OMP_CLAUSE_DEFAULT_PRIVATE);\n \t      }\n \t}\n+      if (flag_sanitize\n+\t  & (SANITIZE_NULL | SANITIZE_ALIGNMENT | SANITIZE_VPTR))\n+\t{\n+\t  /* The point here is to not sanitize static initializers.  */\n+\t  bool no_sanitize_p = wtd->no_sanitize_p;\n+\t  wtd->no_sanitize_p = true;\n+\t  for (tree decl = BIND_EXPR_VARS (stmt);\n+\t       decl;\n+\t       decl = DECL_CHAIN (decl))\n+\t    if (VAR_P (decl)\n+\t\t&& TREE_STATIC (decl)\n+\t\t&& DECL_INITIAL (decl))\n+\t      cp_walk_tree (&DECL_INITIAL (decl), cp_genericize_r, data, NULL);\n+\t  wtd->no_sanitize_p = no_sanitize_p;\n+\t}\n       wtd->bind_expr_stack.safe_push (stmt);\n       cp_walk_tree (&BIND_EXPR_BODY (stmt),\n \t\t    cp_genericize_r, data, NULL);\n@@ -1275,9 +1291,10 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       if (*stmt_p == error_mark_node)\n \t*stmt_p = size_one_node;\n       return NULL;\n-    }    \n-  else if (flag_sanitize\n-\t   & (SANITIZE_NULL | SANITIZE_ALIGNMENT | SANITIZE_VPTR))\n+    }\n+  else if ((flag_sanitize\n+\t    & (SANITIZE_NULL | SANITIZE_ALIGNMENT | SANITIZE_VPTR))\n+\t   && !wtd->no_sanitize_p)\n     {\n       if ((flag_sanitize & (SANITIZE_NULL | SANITIZE_ALIGNMENT))\n \t  && TREE_CODE (stmt) == NOP_EXPR\n@@ -1319,6 +1336,7 @@ cp_genericize_tree (tree* t_p)\n   wtd.bind_expr_stack.create (0);\n   wtd.omp_ctx = NULL;\n   wtd.try_block = NULL_TREE;\n+  wtd.no_sanitize_p = false;\n   cp_walk_tree (t_p, cp_genericize_r, &wtd, NULL);\n   delete wtd.p_set;\n   wtd.bind_expr_stack.release ();"}, {"sha": "b5d882df0c9d7ea3737b1ac30f0d5e344206554f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "patch": "@@ -1,3 +1,10 @@\n+2015-06-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/66190\n+\t* g++.dg/ubsan/static-init-1.C: New test.\n+\t* g++.dg/ubsan/static-init-2.C: New test.\n+\t* g++.dg/ubsan/static-init-3.C: New test.\n+\n 2015-06-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/66275"}, {"sha": "36c60077ce1279bdd4566c7f6c953ffab0a0db59", "filename": "gcc/testsuite/g++.dg/ubsan/static-init-1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fstatic-init-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fstatic-init-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fstatic-init-1.C?ref=7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "patch": "@@ -0,0 +1,21 @@\n+// PR sanitizer/66190\n+// { dg-do compile }\n+// { dg-options \"-fsanitize=null -std=c++11\" }\n+\n+class A {\n+public:\n+  void fn1 (int);\n+};\n+\n+class G {\n+  ~G ();\n+  A t;\n+  virtual void fn2 () {\n+    static int a;\n+    static int &b = a;\n+    static int &c (a);\n+    static int &d {a};\n+    t.fn1 (b);\n+  }\n+};\n+G ::~G () {}"}, {"sha": "d046b330b8586a784cd04623134f006d32e9a0da", "filename": "gcc/testsuite/g++.dg/ubsan/static-init-2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fstatic-init-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fstatic-init-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fstatic-init-2.C?ref=7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "patch": "@@ -0,0 +1,17 @@\n+// PR sanitizer/66190\n+// { dg-do run }\n+// { dg-options \"-fsanitize=null -std=c++11\" }\n+\n+int\n+main ()\n+{\n+  static int *a;\n+  static int &b = *a;\n+  static int &c (*a);\n+  static int &d {*a};\n+  return 0;\n+}\n+\n+// { dg-output \"reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'\" }"}, {"sha": "7fd6cbd036ad98fa7e9f4bcbe5d3b8c2f80caa2c", "filename": "gcc/testsuite/g++.dg/ubsan/static-init-3.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fstatic-init-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3a9795438b33a0137b47f422a9542c5e2d7ccc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fstatic-init-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fstatic-init-3.C?ref=7b3a9795438b33a0137b47f422a9542c5e2d7ccc", "patch": "@@ -0,0 +1,19 @@\n+// PR sanitizer/66190\n+// { dg-do run }\n+// { dg-options \"-fsanitize=null -std=c++11\" }\n+\n+int *fn (void) { return 0; }\n+\n+int\n+main ()\n+{\n+  static int a;\n+  static int &b = *fn ();\n+  static int &c (*fn ());\n+  static int &d {*fn ()};\n+  return 0;\n+}\n+\n+// { dg-output \"reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'\" }"}]}