{"sha": "725de644d609069bb6c4d90f1b843ba0f6bcecce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1ZGU2NDRkNjA5MDY5YmI2YzRkOTBmMWI4NDNiYTBmNmJjZWNjZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-09-25T22:51:33Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-09-25T22:51:33Z"}, "message": "(insv): New pattern.\n\nFrom-SVN: r12847", "tree": {"sha": "73c32c75eb5b7a57085a454ec9d9a9b88bbdb658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73c32c75eb5b7a57085a454ec9d9a9b88bbdb658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/725de644d609069bb6c4d90f1b843ba0f6bcecce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725de644d609069bb6c4d90f1b843ba0f6bcecce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725de644d609069bb6c4d90f1b843ba0f6bcecce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725de644d609069bb6c4d90f1b843ba0f6bcecce/comments", "author": null, "committer": null, "parents": [{"sha": "103fa5258f4a49d8bb0d2fa810fb1e004b465e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103fa5258f4a49d8bb0d2fa810fb1e004b465e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103fa5258f4a49d8bb0d2fa810fb1e004b465e71"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "2c100ff3bb54adad54155777dd5b65a415cbb2ab", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725de644d609069bb6c4d90f1b843ba0f6bcecce/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725de644d609069bb6c4d90f1b843ba0f6bcecce/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=725de644d609069bb6c4d90f1b843ba0f6bcecce", "patch": "@@ -2536,6 +2536,54 @@\n   \"fabs\t%0\"\n   [(set_attr \"type\" \"fp\")])\n \f\n+;; Bit field extract patterns.  These give better code for packed bitfields,\n+;; because they allow auto-increment addresses to be generated.\n+\n+(define_expand \"insv\"\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"\")\n+\t\t\t (match_operand:SI 1 \"immediate_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"immediate_operand\" \"\"))\n+\t(match_operand:SI 3 \"general_operand\" \"\"))]\n+  \"! TARGET_LITTLE_ENDIAN\"\n+  \"\n+{\n+  rtx addr_target, orig_address, shift_reg;\n+  HOST_WIDE_INT size;\n+\n+  /* ??? expmed doesn't care for non-register predicates.  */\n+  if (! memory_operand (operands[0], VOIDmode)\n+      || ! immediate_operand (operands[1], VOIDmode)\n+      || ! immediate_operand (operands[2], VOIDmode)\n+      || ! general_operand (operands[3], VOIDmode))\n+    FAIL;\n+  /* If this isn't a 16 / 24 / 32 bit field, or if\n+     it doesn't start on a byte boundary, then fail.  */\n+  size = INTVAL (operands[1]);\n+  if (size < 16 || size > 32 || size % 8 != 0\n+      || (INTVAL (operands[2]) % 8) != 0)\n+    FAIL;\n+\n+  size /= 8;\n+  orig_address = XEXP (operands[0], 0);\n+  addr_target = gen_reg_rtx (SImode);\n+  shift_reg = gen_reg_rtx (SImode);\n+  emit_insn (gen_movsi (shift_reg, operands[3]));\n+  emit_insn (gen_addsi3 (addr_target, orig_address, GEN_INT (size - 1)));\n+\n+  operands[0] = change_address (operands[0], QImode, addr_target);\n+  emit_insn (gen_movqi (operands[0], gen_rtx (SUBREG, QImode, shift_reg, 0)));\n+\n+  while (size -= 1)\n+    {\n+      emit_insn (gen_lshrsi3_k (shift_reg, shift_reg, GEN_INT (8)));\n+      emit_insn (gen_addsi3 (addr_target, addr_target, GEN_INT (-1)));\n+      emit_insn (gen_movqi (operands[0],\n+\t\t\t    gen_rtx (SUBREG, QImode, shift_reg, 0)));\n+    }\n+\n+  DONE;\n+}\")\n+\f\n ;; -------------------------------------------------------------------------\n ;; Peepholes\n ;; -------------------------------------------------------------------------"}]}