{"sha": "ea93971a13d434c549a2d54637061ad15b14b756", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE5Mzk3MWExM2Q0MzRjNTQ5YTJkNTQ2MzcwNjFhZDE1YjE0Yjc1Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-08-11T21:21:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-08-11T21:21:07Z"}, "message": "dwarf2out.c (concat_loc_descriptor): Add can_use_fbreg argument, pass it down to loc_descriptor.\n\n\t* dwarf2out.c (concat_loc_descriptor): Add can_use_fbreg argument,\n\tpass it down to loc_descriptor.\n\t(loc_descriptor): Pass can_use_fbreg to concat_loc_descriptor.\n\t(containing_function_has_frame_base): Move earlier in the file.\n\t(loc_descriptor_from_tree_1): Use containing_function_has_frame_base\n\tinstead of always assuming fbreg can't be used.\n\nFrom-SVN: r103003", "tree": {"sha": "0571693101cad603ca12364ef0ff44554efd0ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0571693101cad603ca12364ef0ff44554efd0ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea93971a13d434c549a2d54637061ad15b14b756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea93971a13d434c549a2d54637061ad15b14b756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea93971a13d434c549a2d54637061ad15b14b756", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea93971a13d434c549a2d54637061ad15b14b756/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a42356f48f489b4e2af7b02bafac8ebaff5da09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a42356f48f489b4e2af7b02bafac8ebaff5da09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a42356f48f489b4e2af7b02bafac8ebaff5da09"}], "stats": {"total": 75, "additions": 44, "deletions": 31}, "files": [{"sha": "8120d9011c5c1c43867b631cf83ad783fe9703c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea93971a13d434c549a2d54637061ad15b14b756/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea93971a13d434c549a2d54637061ad15b14b756/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea93971a13d434c549a2d54637061ad15b14b756", "patch": "@@ -1,3 +1,12 @@\n+2005-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (concat_loc_descriptor): Add can_use_fbreg argument,\n+\tpass it down to loc_descriptor.\n+\t(loc_descriptor): Pass can_use_fbreg to concat_loc_descriptor.\n+\t(containing_function_has_frame_base): Move earlier in the file.\n+\t(loc_descriptor_from_tree_1): Use containing_function_has_frame_base\n+\tinstead of always assuming fbreg can't be used.\n+\n 2005-08-11  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/altivec.md: Change constraint \"m\" to \"Z\"."}, {"sha": "44750f9732401b4bf7213832c11e6e4833e9ad76", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea93971a13d434c549a2d54637061ad15b14b756/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea93971a13d434c549a2d54637061ad15b14b756/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ea93971a13d434c549a2d54637061ad15b14b756", "patch": "@@ -3982,7 +3982,7 @@ static dw_loc_descr_ref int_loc_descriptor (HOST_WIDE_INT);\n static dw_loc_descr_ref based_loc_descr (unsigned, HOST_WIDE_INT, bool);\n static int is_based_loc (rtx);\n static dw_loc_descr_ref mem_loc_descriptor (rtx, enum machine_mode mode, bool);\n-static dw_loc_descr_ref concat_loc_descriptor (rtx, rtx);\n+static dw_loc_descr_ref concat_loc_descriptor (rtx, rtx, bool);\n static dw_loc_descr_ref loc_descriptor (rtx, bool);\n static dw_loc_descr_ref loc_descriptor_from_tree_1 (tree, int);\n static dw_loc_descr_ref loc_descriptor_from_tree (tree);\n@@ -8806,11 +8806,11 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode, bool can_use_fbreg)\n    This is typically a complex variable.  */\n \n static dw_loc_descr_ref\n-concat_loc_descriptor (rtx x0, rtx x1)\n+concat_loc_descriptor (rtx x0, rtx x1, bool can_use_fbreg)\n {\n   dw_loc_descr_ref cc_loc_result = NULL;\n-  dw_loc_descr_ref x0_ref = loc_descriptor (x0, false);\n-  dw_loc_descr_ref x1_ref = loc_descriptor (x1, false);\n+  dw_loc_descr_ref x0_ref = loc_descriptor (x0, can_use_fbreg);\n+  dw_loc_descr_ref x1_ref = loc_descriptor (x1, can_use_fbreg);\n \n   if (x0_ref == 0 || x1_ref == 0)\n     return 0;\n@@ -8824,6 +8824,29 @@ concat_loc_descriptor (rtx x0, rtx x1)\n   return cc_loc_result;\n }\n \n+/* Return true if DECL's containing function has a frame base attribute.\n+   Return false otherwise.  */\n+\n+static bool\n+containing_function_has_frame_base (tree decl)\n+{\n+  tree declcontext = decl_function_context (decl);\n+  dw_die_ref context;\n+  dw_attr_ref attr;\n+  \n+  if (!declcontext)\n+    return false;\n+\n+  context = lookup_decl_die (declcontext);\n+  if (!context)\n+    return false;\n+\n+  for (attr = context->die_attr; attr; attr = attr->dw_attr_next)\n+    if (attr->dw_attr == DW_AT_frame_base)\n+      return true;\n+  return false;\n+}\n+\n /* Output a proper Dwarf location descriptor for a variable or parameter\n    which is either allocated in a register or in a memory location.  For a\n    register, we just generate an OP_REG and the register number.  For a\n@@ -8859,7 +8882,8 @@ loc_descriptor (rtx rtl, bool can_use_fbreg)\n       break;\n \n     case CONCAT:\n-      loc_result = concat_loc_descriptor (XEXP (rtl, 0), XEXP (rtl, 1));\n+      loc_result = concat_loc_descriptor (XEXP (rtl, 0), XEXP (rtl, 1),\n+\t\t\t\t\t  can_use_fbreg);\n       break;\n \n     case VAR_LOCATION:\n@@ -9019,18 +9043,19 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n \telse\n \t  {\n \t    enum machine_mode mode;\n+\t    bool can_use_fb = containing_function_has_frame_base (loc);\n \n \t    /* Certain constructs can only be represented at top-level.  */\n \t    if (want_address == 2)\n-\t      return loc_descriptor (rtl, false);\n+\t      return loc_descriptor (rtl, can_use_fb);\n \n \t    mode = GET_MODE (rtl);\n \t    if (MEM_P (rtl))\n \t      {\n \t\trtl = XEXP (rtl, 0);\n \t\thave_address = 1;\n \t      }\n-\t    ret = mem_loc_descriptor (rtl, mode, false);\n+\t    ret = mem_loc_descriptor (rtl, mode, can_use_fb);\n \t  }\n       }\n       break;\n@@ -9104,12 +9129,14 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n \t/* Get an RTL for this, if something has been emitted.  */\n \trtx rtl = lookup_constant_def (loc);\n \tenum machine_mode mode;\n+\tbool can_use_fb;\n \n \tif (!rtl || !MEM_P (rtl))\n \t  return 0;\n+\tcan_use_fb = containing_function_has_frame_base (loc);\n \tmode = GET_MODE (rtl);\n \trtl = XEXP (rtl, 0);\n-\tret = mem_loc_descriptor (rtl, mode, false);\n+\tret = mem_loc_descriptor (rtl, mode, can_use_fb);\n \thave_address = 1;\n \tbreak;\n       }\n@@ -10073,29 +10100,6 @@ rtl_for_decl_location (tree decl)\n   return rtl;\n }\n \n-/* Return true if DECL's containing function has a frame base attribute.\n-   Return false otherwise.  */\n-\n-static bool\n-containing_function_has_frame_base (tree decl)\n-{\n-  tree declcontext = decl_function_context (decl);\n-  dw_die_ref context;\n-  dw_attr_ref attr;\n-  \n-  if (!declcontext)\n-    return false;\n-\n-  context = lookup_decl_die (declcontext);\n-  if (!context)\n-    return false;\n-\n-  for (attr = context->die_attr; attr; attr = attr->dw_attr_next)\n-    if (attr->dw_attr == DW_AT_frame_base)\n-      return true;\n-  return false;\n-}\n-  \n /* Generate *either* a DW_AT_location attribute or else a DW_AT_const_value\n    data attribute for a variable or a parameter.  We generate the\n    DW_AT_const_value attribute only in those cases where the given variable"}]}