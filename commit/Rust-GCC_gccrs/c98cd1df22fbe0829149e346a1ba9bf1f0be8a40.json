{"sha": "c98cd1df22fbe0829149e346a1ba9bf1f0be8a40", "node_id": "C_kwDOANBUbNoAKGM5OGNkMWRmMjJmYmUwODI5MTQ5ZTM0NmExYmE5YmYxZjBiZThhNDA", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wilco.dijkstra@arm.com", "date": "2023-01-03T15:57:46Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco.dijkstra@arm.com", "date": "2023-01-18T12:20:35Z"}, "message": "libgcc: Fix uninitialized RA signing on AArch64 [PR107678]\n\nA recent change only initializes the regs.how[] during Dwarf unwinding\nwhich resulted in an uninitialized offset used in return address signing\nand random failures during unwinding.  The fix is to encode the return\naddress signing state in REG_UNSAVED and a new state REG_UNSAVED_ARCHEXT.\n\nlibgcc/\n\tPR target/107678\n\t* unwind-dw2.h (REG_UNSAVED_ARCHEXT): Add new enum.\n\t* unwind-dw2.c (uw_update_context_1): Add REG_UNSAVED_ARCHEXT case.\n\t* unwind-dw2-execute_cfa.h: Use REG_UNSAVED_ARCHEXT/REG_UNSAVED to\n\tencode the return address signing state.\n\t* config/aarch64/aarch64-unwind.h (aarch64_demangle_return_addr)\n\tCheck current return address signing state.\n\t(aarch64_frob_update_contex): Remove.", "tree": {"sha": "45010a30ec72b60645974866c31b0d9c7b604c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45010a30ec72b60645974866c31b0d9c7b604c01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40/comments", "author": {"login": "Wilco1", "id": 58446312, "node_id": "MDQ6VXNlcjU4NDQ2MzEy", "avatar_url": "https://avatars.githubusercontent.com/u/58446312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wilco1", "html_url": "https://github.com/Wilco1", "followers_url": "https://api.github.com/users/Wilco1/followers", "following_url": "https://api.github.com/users/Wilco1/following{/other_user}", "gists_url": "https://api.github.com/users/Wilco1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wilco1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wilco1/subscriptions", "organizations_url": "https://api.github.com/users/Wilco1/orgs", "repos_url": "https://api.github.com/users/Wilco1/repos", "events_url": "https://api.github.com/users/Wilco1/events{/privacy}", "received_events_url": "https://api.github.com/users/Wilco1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Wilco1", "id": 58446312, "node_id": "MDQ6VXNlcjU4NDQ2MzEy", "avatar_url": "https://avatars.githubusercontent.com/u/58446312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wilco1", "html_url": "https://github.com/Wilco1", "followers_url": "https://api.github.com/users/Wilco1/followers", "following_url": "https://api.github.com/users/Wilco1/following{/other_user}", "gists_url": "https://api.github.com/users/Wilco1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wilco1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wilco1/subscriptions", "organizations_url": "https://api.github.com/users/Wilco1/orgs", "repos_url": "https://api.github.com/users/Wilco1/repos", "events_url": "https://api.github.com/users/Wilco1/events{/privacy}", "received_events_url": "https://api.github.com/users/Wilco1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f54e31ddefe3ea7146624eabcb75b1c90dc59f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54e31ddefe3ea7146624eabcb75b1c90dc59f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f54e31ddefe3ea7146624eabcb75b1c90dc59f1a"}], "stats": {"total": 56, "additions": 22, "deletions": 34}, "files": [{"sha": "3ad2f8239ed8c34e044fe16f8290d6d2276ba219", "filename": "libgcc/config/aarch64/aarch64-unwind.h", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h?ref=c98cd1df22fbe0829149e346a1ba9bf1f0be8a40", "patch": "@@ -29,8 +29,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #define MD_DEMANGLE_RETURN_ADDR(context, fs, addr) \\\n   aarch64_demangle_return_addr (context, fs, addr)\n-#define MD_FROB_UPDATE_CONTEXT(context, fs) \\\n-  aarch64_frob_update_context (context, fs)\n \n static inline int\n aarch64_cie_signed_with_b_key (struct _Unwind_Context *context)\n@@ -55,42 +53,28 @@ aarch64_cie_signed_with_b_key (struct _Unwind_Context *context)\n \n static inline void *\n aarch64_demangle_return_addr (struct _Unwind_Context *context,\n-\t\t\t      _Unwind_FrameState *fs ATTRIBUTE_UNUSED,\n+\t\t\t      _Unwind_FrameState *fs,\n \t\t\t      _Unwind_Word addr_word)\n {\n   void *addr = (void *)addr_word;\n-  if (context->flags & RA_SIGNED_BIT)\n+  const int reg = DWARF_REGNUM_AARCH64_RA_STATE;\n+\n+  if (fs->regs.how[reg] == REG_UNSAVED)\n+    return addr;\n+\n+  /* Return-address signing state is toggled by DW_CFA_GNU_window_save (where\n+     REG_UNSAVED/REG_UNSAVED_ARCHEXT means RA signing is disabled/enabled),\n+     or set by a DW_CFA_expression.  */\n+  if (fs->regs.how[reg] == REG_UNSAVED_ARCHEXT\n+      || (_Unwind_GetGR (context, reg) & 0x1) != 0)\n     {\n       _Unwind_Word salt = (_Unwind_Word) context->cfa;\n       if (aarch64_cie_signed_with_b_key (context) != 0)\n \treturn __builtin_aarch64_autib1716 (addr, salt);\n       return __builtin_aarch64_autia1716 (addr, salt);\n     }\n-  else\n-    return addr;\n-}\n-\n-/* Do AArch64 private initialization on CONTEXT based on frame info FS.  Mark\n-   CONTEXT as return address signed if bit 0 of DWARF_REGNUM_AARCH64_RA_STATE is\n-   set.  */\n-\n-static inline void\n-aarch64_frob_update_context (struct _Unwind_Context *context,\n-\t\t\t     _Unwind_FrameState *fs)\n-{\n-  const int reg = DWARF_REGNUM_AARCH64_RA_STATE;\n-  int ra_signed;\n-  if (fs->regs.how[reg] == REG_UNSAVED)\n-    ra_signed = fs->regs.reg[reg].loc.offset & 0x1;\n-  else\n-    ra_signed = _Unwind_GetGR (context, reg) & 0x1;\n-  if (ra_signed)\n-    /* The flag is used for re-authenticating EH handler's address.  */\n-    context->flags |= RA_SIGNED_BIT;\n-  else\n-    context->flags &= ~RA_SIGNED_BIT;\n \n-  return;\n+  return addr;\n }\n \n #endif /* defined AARCH64_UNWIND_H && defined __ILP32__ */"}, {"sha": "aef377092ceede6bdda8532679f9b081c98fadce", "filename": "libgcc/unwind-dw2-execute_cfa.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40/libgcc%2Funwind-dw2-execute_cfa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40/libgcc%2Funwind-dw2-execute_cfa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-execute_cfa.h?ref=c98cd1df22fbe0829149e346a1ba9bf1f0be8a40", "patch": "@@ -278,10 +278,15 @@\n \tcase DW_CFA_GNU_window_save:\n #if defined (__aarch64__) && !defined (__ILP32__)\n \t  /* This CFA is multiplexed with Sparc.  On AArch64 it's used to toggle\n-\t     return address signing status.  */\n+\t     return address signing status.  REG_UNSAVED/REG_UNSAVED_ARCHEXT\n+\t     mean RA signing is disabled/enabled.  */\n \t  reg = DWARF_REGNUM_AARCH64_RA_STATE;\n-\t  gcc_assert (fs->regs.how[reg] == REG_UNSAVED);\n-\t  fs->regs.reg[reg].loc.offset ^= 1;\n+\t  gcc_assert (fs->regs.how[reg] == REG_UNSAVED\n+\t\t      || fs->regs.how[reg] == REG_UNSAVED_ARCHEXT);\n+\t  if (fs->regs.how[reg] == REG_UNSAVED)\n+\t    fs->regs.how[reg] = REG_UNSAVED_ARCHEXT;\n+\t  else\n+\t    fs->regs.how[reg] = REG_UNSAVED;\n #else\n \t  /* ??? Hardcoded for SPARC register window configuration.  */\n \t  if (__LIBGCC_DWARF_FRAME_REGISTERS__ >= 32)"}, {"sha": "d0afce7a9ea9f5b12a5a01ef1e940e1452b48cab", "filename": "libgcc/unwind-dw2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=c98cd1df22fbe0829149e346a1ba9bf1f0be8a40", "patch": "@@ -137,9 +137,6 @@ struct _Unwind_Context\n #define SIGNAL_FRAME_BIT ((~(_Unwind_Word) 0 >> 1) + 1)\n   /* Context which has version/args_size/by_value fields.  */\n #define EXTENDED_CONTEXT_BIT ((~(_Unwind_Word) 0 >> 2) + 1)\n-  /* Bit reserved on AArch64, return address has been signed with A or B\n-     key.  */\n-#define RA_SIGNED_BIT ((~(_Unwind_Word) 0 >> 3) + 1)\n   _Unwind_Word flags;\n   /* 0 for now, can be increased when further fields are added to\n      struct _Unwind_Context.  */\n@@ -1200,6 +1197,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n       {\n       case REG_UNSAVED:\n       case REG_UNDEFINED:\n+      case REG_UNSAVED_ARCHEXT:\n \tbreak;\n \n       case REG_SAVED_OFFSET:"}, {"sha": "53e1b183c7d60112a14411d3356c49cb39cd0de7", "filename": "libgcc/unwind-dw2.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40/libgcc%2Funwind-dw2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98cd1df22fbe0829149e346a1ba9bf1f0be8a40/libgcc%2Funwind-dw2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.h?ref=c98cd1df22fbe0829149e346a1ba9bf1f0be8a40", "patch": "@@ -29,6 +29,7 @@ enum {\n   REG_SAVED_EXP,\n   REG_SAVED_VAL_OFFSET,\n   REG_SAVED_VAL_EXP,\n+  REG_UNSAVED_ARCHEXT,\t\t/* Target specific extension.  */\n   REG_UNDEFINED\n };\n "}]}