{"sha": "d81168901eb8ad7d426049a15f50ba0c5591737d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxMTY4OTAxZWI4YWQ3ZDQyNjA0OWExNWY1MGJhMGM1NTkxNzM3ZA==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2012-08-23T18:46:18Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2012-08-23T18:46:18Z"}, "message": "alias.c (rtx_equal_for_memref_p): Convert constant cases.\n\n2012-08-23  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* alias.c (rtx_equal_for_memref_p): Convert constant cases.\n\t* combine.c (find_single_use_1, mark_used_regs_combine): Convert\n\tto CASE_CONST_ANY.\n \t* cse.c (exp_equiv_p, canon_reg, fold_rtx, cse_process_notes_1,\n\tcount_reg_usage): Convert constant cases.\n\t* cselib.c (cselib_expand_value_rtx_1): Convert to\n\tCASE_CONST_ANY.\n\t(cselib_subst_to_values): Convert constant cases.\n\t* df-scan.c (df_uses_record): Ditto.\n\t* dse.c (const_or_frame_p): Convert case statements to explicit\n\tif-then-else using mode classes.\n\t* emit-rtl.c (verify_rtx_sharing, copy_insn_1): Convert constant cases.\n\t* explow.c (convert_memory_address_addr_space): Ditto.\n\t* gcse.c (want_to_gcse_p, oprs_unchanged_p, compute_transp): Ditto.\n\t* genattrtab.c (attr_copy_rtx, clear_struct_flag): Ditto.\n\t* ira.c (equiv_init_varies_p, contains_replace_regs,\n\tmemref_referenced_p, rtx_moveable_p): Ditto.\n\t* jump.c (mark_jump_label_1): Remove constant cases.\n\t(rtx_renumbered_equal_p): Convert to CASE_CONST_UNIQUE.\n\t* loop-invariant.c (check_maybe_invariant, hash_invariant_expr_1,\n\tinvariant_expr_equal_p): Convert to CASE_CONST_ANY.\n\t* postreload-gcse.c (oprs_unchanged_p): Convert constant cases.\n\t* reginfo.c (reg_scan_mark_refs): Ditto.\n\t* regrename.c (scan_rtx): Ditto.\n\t* reload1.c (eliminate_regs_1, elimination_effects,\n\tscan_paradoxical_subregs): Ditto.\n\t* reload.c (operands_match_p, subst_reg_equivs):  Ditto.\n\t* resource.c (mark_referenced_resources, mark_set_resources): Ditto.\n\t* rtlanal.c (rtx_unstable_p, rtx_varies_p, count_occurrences)\n\t(reg_mentioned_p, modified_between_p, modified_in_p)\n\t(volatile_insn_p, volatile_refs_p, side_effects_p, may_trap_p_1,\n\tinequality_comparisons_p, computed_jump_p_1): Ditto.\n\t* rtl.c (copy_rtx, rtx_equal_p_cb, rtx_equal_p): Ditto.\n\t* sched-deps.c (sched_analyze_2): Ditto.\n\t* valtrack.c (cleanup_auto_inc_dec): Ditto.\n\t* rtl.h: (CASE_CONST_SCALAR_INT, CASE_CONST_UNIQUE, \n\tCASE_CONST_ANY): New macros.\n\nFrom-SVN: r190627", "tree": {"sha": "ad36f33e801b9597515c079ef65870d2ac014614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad36f33e801b9597515c079ef65870d2ac014614"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d81168901eb8ad7d426049a15f50ba0c5591737d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81168901eb8ad7d426049a15f50ba0c5591737d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81168901eb8ad7d426049a15f50ba0c5591737d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81168901eb8ad7d426049a15f50ba0c5591737d/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddf72901e37eb6b7e495574341e0d6997f24e2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf72901e37eb6b7e495574341e0d6997f24e2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf72901e37eb6b7e495574341e0d6997f24e2e9"}], "stats": {"total": 347, "additions": 121, "deletions": 226}, "files": [{"sha": "a39bc8bfbe915cd1bfc5b7754d2bc199eb41fc94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -1,3 +1,43 @@\n+2012-08-23  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* alias.c (rtx_equal_for_memref_p): Convert constant cases.\n+\t* combine.c (find_single_use_1, mark_used_regs_combine): Convert\n+\tto CASE_CONST_ANY.\n+ \t* cse.c (exp_equiv_p, canon_reg, fold_rtx, cse_process_notes_1,\n+\tcount_reg_usage): Convert constant cases.\n+\t* cselib.c (cselib_expand_value_rtx_1): Convert to\n+\tCASE_CONST_ANY.\n+\t(cselib_subst_to_values): Convert constant cases.\n+\t* df-scan.c (df_uses_record): Ditto.\n+\t* dse.c (const_or_frame_p): Convert case statements to explicit\n+\tif-then-else using mode classes.\n+\t* emit-rtl.c (verify_rtx_sharing, copy_insn_1): Convert constant cases.\n+\t* explow.c (convert_memory_address_addr_space): Ditto.\n+\t* gcse.c (want_to_gcse_p, oprs_unchanged_p, compute_transp): Ditto.\n+\t* genattrtab.c (attr_copy_rtx, clear_struct_flag): Ditto.\n+\t* ira.c (equiv_init_varies_p, contains_replace_regs,\n+\tmemref_referenced_p, rtx_moveable_p): Ditto.\n+\t* jump.c (mark_jump_label_1): Remove constant cases.\n+\t(rtx_renumbered_equal_p): Convert to CASE_CONST_UNIQUE.\n+\t* loop-invariant.c (check_maybe_invariant, hash_invariant_expr_1,\n+\tinvariant_expr_equal_p): Convert to CASE_CONST_ANY.\n+\t* postreload-gcse.c (oprs_unchanged_p): Convert constant cases.\n+\t* reginfo.c (reg_scan_mark_refs): Ditto.\n+\t* regrename.c (scan_rtx): Ditto.\n+\t* reload1.c (eliminate_regs_1, elimination_effects,\n+\tscan_paradoxical_subregs): Ditto.\n+\t* reload.c (operands_match_p, subst_reg_equivs):  Ditto.\n+\t* resource.c (mark_referenced_resources, mark_set_resources): Ditto.\n+\t* rtlanal.c (rtx_unstable_p, rtx_varies_p, count_occurrences)\n+\t(reg_mentioned_p, modified_between_p, modified_in_p)\n+\t(volatile_insn_p, volatile_refs_p, side_effects_p, may_trap_p_1,\n+\tinequality_comparisons_p, computed_jump_p_1): Ditto.\n+\t* rtl.c (copy_rtx, rtx_equal_p_cb, rtx_equal_p): Ditto.\n+\t* sched-deps.c (sched_analyze_2): Ditto.\n+\t* valtrack.c (cleanup_auto_inc_dec): Ditto.\n+\t* rtl.h: (CASE_CONST_SCALAR_INT, CASE_CONST_UNIQUE, \n+\tCASE_CONST_ANY): New macros.\n+\n 2012-08-23  Julian Brown  <julian@codesourcery.com>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "c1d5c8a8f364a9a962feba91a2cbf3d1201c26f7", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -1489,9 +1489,7 @@ rtx_equal_for_memref_p (const_rtx x, const_rtx y)\n       return XSTR (x, 0) == XSTR (y, 0);\n \n     case VALUE:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n+    CASE_CONST_UNIQUE:\n       /* There's no need to compare the contents of CONST_DOUBLEs or\n \t CONST_INTs because pointer equality is a good enough\n \t comparison for these nodes.  */"}, {"sha": "18b79623b1caef3b422d03a3c7e93c6cb9885032", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -531,12 +531,10 @@ find_single_use_1 (rtx dest, rtx *loc)\n \n   switch (code)\n     {\n-    case CONST_INT:\n     case CONST:\n     case LABEL_REF:\n     case SYMBOL_REF:\n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case CLOBBER:\n       return 0;\n \n@@ -12788,10 +12786,8 @@ mark_used_regs_combine (rtx x)\n     {\n     case LABEL_REF:\n     case SYMBOL_REF:\n-    case CONST_INT:\n     case CONST:\n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case PC:\n     case ADDR_VEC:\n     case ADDR_DIFF_VEC:"}, {"sha": "16255988fc538a25216ca48c9411626ddda6d110", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -2623,9 +2623,7 @@ exp_equiv_p (const_rtx x, const_rtx y, int validate, bool for_gcse)\n     {\n     case PC:\n     case CC0:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n+    CASE_CONST_UNIQUE:\n       return x == y;\n \n     case LABEL_REF:\n@@ -2829,10 +2827,7 @@ canon_reg (rtx x, rtx insn)\n     case PC:\n     case CC0:\n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case ADDR_VEC:\n@@ -3133,10 +3128,7 @@ fold_rtx (rtx x, rtx insn)\n       return x;\n \n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case REG:\n@@ -3198,12 +3190,9 @@ fold_rtx (rtx x, rtx insn)\n \t    break;\n \n \t  case CONST:\n-\t  case CONST_INT:\n+\t  CASE_CONST_ANY:\n \t  case SYMBOL_REF:\n \t  case LABEL_REF:\n-\t  case CONST_DOUBLE:\n-\t  case CONST_FIXED:\n-\t  case CONST_VECTOR:\n \t    const_arg = folded_arg;\n \t    break;\n \n@@ -6063,13 +6052,10 @@ cse_process_notes_1 (rtx x, rtx object, bool *changed)\n \n   switch (code)\n     {\n-    case CONST_INT:\n     case CONST:\n     case SYMBOL_REF:\n     case LABEL_REF:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case PC:\n     case CC0:\n     case LO_SUM:\n@@ -6671,10 +6657,7 @@ count_reg_usage (rtx x, int *counts, rtx dest, int incr)\n     case PC:\n     case CC0:\n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n       return;"}, {"sha": "e7c4221df3e33769b5b7c4cbc28a0ed2bbb62dff", "filename": "gcc/cselib.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -1603,9 +1603,7 @@ cselib_expand_value_rtx_1 (rtx orig, struct expand_value_data *evd,\n \t    }\n       }\n \n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n     case PC:\n@@ -1856,10 +1854,7 @@ cselib_subst_to_values (rtx x, enum machine_mode memmode)\n \tbreak;\n       return e->val_rtx;\n \n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n-    case CONST_INT:\n-    case CONST_FIXED:\n+    CASE_CONST_ANY:\n       return x;\n \n     case PRE_DEC:"}, {"sha": "0fb1f640d9b9fce1c5906c2f61397184f65a39f5", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -3107,11 +3107,8 @@ df_uses_record (struct df_collection_rec *collection_rec,\n     {\n     case LABEL_REF:\n     case SYMBOL_REF:\n-    case CONST_INT:\n     case CONST:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case PC:\n     case CC0:\n     case ADDR_VEC:"}, {"sha": "9e53b50f1289093ab66f0d9aad06bc1ca856a136", "filename": "gcc/dse.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -1109,17 +1109,11 @@ add_non_frame_wild_read (bb_info_t bb_info)\n static bool\n const_or_frame_p (rtx x)\n {\n-  switch (GET_CODE (x))\n-    {\n-    case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n-    case SYMBOL_REF:\n-    case LABEL_REF:\n-      return true;\n+  if (CONSTANT_P (x))\n+    return true;\n \n-    case REG:\n+  if (GET_CODE (x) == REG)\n+    {\n       /* Note that we have to test for the actual rtx used for the frame\n \t and arg pointers and not just the register number in case we have\n \t eliminated the frame and/or arg pointer and are using it\n@@ -1130,10 +1124,9 @@ const_or_frame_p (rtx x)\n \t  || x == pic_offset_table_rtx)\n \treturn true;\n       return false;\n-\n-    default:\n-      return false;\n     }\n+  \n+  return false;\n }\n \n /* Take all reasonable action to put the address of MEM into the form"}, {"sha": "0edd871b685e54a3a67f182eda3f756818fc547c", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -2504,10 +2504,7 @@ verify_rtx_sharing (rtx orig, rtx insn)\n     case REG:\n     case DEBUG_EXPR:\n     case VALUE:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case CODE_LABEL:\n@@ -2721,10 +2718,7 @@ copy_rtx_if_shared_1 (rtx *orig1)\n     case REG:\n     case DEBUG_EXPR:\n     case VALUE:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case CODE_LABEL:\n@@ -2843,10 +2837,7 @@ mark_used_flags (rtx x, int flag)\n     case REG:\n     case DEBUG_EXPR:\n     case VALUE:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n     case PC:\n@@ -5236,10 +5227,7 @@ copy_insn_1 (rtx orig)\n     {\n     case REG:\n     case DEBUG_EXPR:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n     case PC:"}, {"sha": "0563a231d68c7580bd107d8ef60f0986593c78c7", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -347,8 +347,7 @@ convert_memory_address_addr_space (enum machine_mode to_mode ATTRIBUTE_UNUSED,\n      to the default case.  */\n   switch (GET_CODE (x))\n     {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n+    CASE_CONST_SCALAR_INT:\n       if (GET_MODE_SIZE (to_mode) < GET_MODE_SIZE (from_mode))\n \tcode = TRUNCATE;\n       else if (POINTERS_EXTEND_UNSIGNED < 0)"}, {"sha": "767cc66edb5190999cce0e6ceb3ef3091e832edc", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -742,10 +742,7 @@ want_to_gcse_p (rtx x, int *max_distance_ptr)\n     case CALL:\n       return 0;\n \n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n       if (!doing_code_hoisting_p)\n \t/* Do not PRE constants.  */\n \treturn 0;\n@@ -887,10 +884,7 @@ oprs_unchanged_p (const_rtx x, const_rtx insn, int avail_p)\n     case PC:\n     case CC0: /*FIXME*/\n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case ADDR_VEC:\n@@ -1693,10 +1687,7 @@ compute_transp (const_rtx x, int indx, sbitmap *bmap)\n     case PC:\n     case CC0: /*FIXME*/\n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case ADDR_VEC:"}, {"sha": "19732ba1fc565783d6e87ca457bd256ce6b7673c", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -674,9 +674,7 @@ attr_copy_rtx (rtx orig)\n   switch (code)\n     {\n     case REG:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case MATCH_TEST:\n     case CODE_LABEL:\n@@ -3090,9 +3088,7 @@ clear_struct_flag (rtx x)\n   switch (code)\n     {\n     case REG:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case MATCH_TEST:\n     case SYMBOL_REF:\n     case CODE_LABEL:"}, {"sha": "691614e8d5a621091cec163edace44f21e7244ab", "filename": "gcc/ira.c", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -2445,10 +2445,7 @@ equiv_init_varies_p (rtx x)\n       return !MEM_READONLY_P (x) || equiv_init_varies_p (XEXP (x, 0));\n \n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n       return 0;\n@@ -2560,13 +2557,10 @@ contains_replace_regs (rtx x)\n \n   switch (code)\n     {\n-    case CONST_INT:\n     case CONST:\n     case LABEL_REF:\n     case SYMBOL_REF:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case PC:\n     case CC0:\n     case HIGH:\n@@ -2608,13 +2602,10 @@ memref_referenced_p (rtx memref, rtx x)\n \n   switch (code)\n     {\n-    case CONST_INT:\n     case CONST:\n     case LABEL_REF:\n     case SYMBOL_REF:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case PC:\n     case CC0:\n     case HIGH:\n@@ -3566,10 +3557,7 @@ rtx_moveable_p (rtx *loc, enum op_type type)\n   switch (code)\n     {\n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n       return true;"}, {"sha": "d0f3f04a3794a58d6986745377552c3fa8ce90ef", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -1078,8 +1078,6 @@ mark_jump_label_1 (rtx x, rtx insn, bool in_mem, bool is_target)\n     case PC:\n     case CC0:\n     case REG:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n     case CLOBBER:\n     case CALL:\n       return;\n@@ -1753,8 +1751,7 @@ rtx_renumbered_equal_p (const_rtx x, const_rtx y)\n     case CC0:\n     case ADDR_VEC:\n     case ADDR_DIFF_VEC:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n+    CASE_CONST_UNIQUE:\n       return 0;\n \n     case LABEL_REF:"}, {"sha": "4cc1ea6f0ccd8e9228e6943d727011b1f0a6df98", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -203,9 +203,7 @@ check_maybe_invariant (rtx x)\n \n   switch (code)\n     {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case CONST:\n     case LABEL_REF:\n@@ -302,9 +300,7 @@ hash_invariant_expr_1 (rtx insn, rtx x)\n \n   switch (code)\n     {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case CONST:\n     case LABEL_REF:\n@@ -363,9 +359,7 @@ invariant_expr_equal_p (rtx insn1, rtx e1, rtx insn2, rtx e2)\n \n   switch (code)\n     {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case CONST:\n     case LABEL_REF:"}, {"sha": "b464d1fdc3fcc7cdb608748ed094c103a51dc60b", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -519,10 +519,7 @@ oprs_unchanged_p (rtx x, rtx insn, bool after_insn)\n     case PC:\n     case CC0: /*FIXME*/\n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case ADDR_VEC:"}, {"sha": "cdd85001b165f0d70178a22584fdb36881fb521c", "filename": "gcc/reginfo.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -1022,10 +1022,7 @@ reg_scan_mark_refs (rtx x, rtx insn)\n   switch (code)\n     {\n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case CC0:\n     case PC:\n     case SYMBOL_REF:"}, {"sha": "9a6545abd65f303790962925a5600900018e5992", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -1342,10 +1342,7 @@ scan_rtx (rtx insn, rtx *loc, enum reg_class cl, enum scan_actions action,\n   switch (code)\n     {\n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case CC0:"}, {"sha": "f4f3ed03d859fb59a251cc3bfc32fe592d041b2d", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -2318,9 +2318,7 @@ operands_match_p (rtx x, rtx y)\n \n   switch (code)\n     {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n+    CASE_CONST_UNIQUE:\n       return 0;\n \n     case LABEL_REF:\n@@ -5341,11 +5339,8 @@ subst_reg_equivs (rtx ad, rtx insn)\n   switch (code)\n     {\n     case HIGH:\n-    case CONST_INT:\n     case CONST:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case PC:"}, {"sha": "77c7ba0911ae63ab97236f3343f56ebd6f47ce1e", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -2566,10 +2566,7 @@ eliminate_regs_1 (rtx x, enum machine_mode mem_mode, rtx insn,\n \n   switch (code)\n     {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case CONST:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n@@ -2983,10 +2980,7 @@ elimination_effects (rtx x, enum machine_mode mem_mode)\n \n   switch (code)\n     {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case CONST:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n@@ -4454,13 +4448,10 @@ scan_paradoxical_subregs (rtx x)\n   switch (code)\n     {\n     case REG:\n-    case CONST_INT:\n     case CONST:\n     case SYMBOL_REF:\n     case LABEL_REF:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR: /* shouldn't happen, but just in case.  */\n+    CASE_CONST_ANY:\n     case CC0:\n     case PC:\n     case USE:"}, {"sha": "d2ae73200d52594c0314857fa2f073ae6201c262", "filename": "gcc/resource.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -215,10 +215,7 @@ mark_referenced_resources (rtx x, struct resources *res,\n   switch (code)\n     {\n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case PC:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -632,10 +629,7 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n     case BARRIER:\n     case CODE_LABEL:\n     case USE:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case LABEL_REF:\n     case SYMBOL_REF:\n     case CONST:"}, {"sha": "2edc49703205ce0723b82e479e74c7d829db5f0c", "filename": "gcc/rtl.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -248,10 +248,7 @@ copy_rtx (rtx orig)\n     case REG:\n     case DEBUG_EXPR:\n     case VALUE:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n     case PC:\n@@ -400,9 +397,7 @@ rtx_equal_p_cb (const_rtx x, const_rtx y, rtx_equal_p_callback_function cb)\n     case DEBUG_EXPR:\n     case VALUE:\n     case SCRATCH:\n-    case CONST_DOUBLE:\n-    case CONST_INT:\n-    case CONST_FIXED:\n+    CASE_CONST_UNIQUE:\n       return 0;\n \n     case DEBUG_IMPLICIT_PTR:\n@@ -539,9 +534,7 @@ rtx_equal_p (const_rtx x, const_rtx y)\n     case DEBUG_EXPR:\n     case VALUE:\n     case SCRATCH:\n-    case CONST_DOUBLE:\n-    case CONST_INT:\n-    case CONST_FIXED:\n+    CASE_CONST_UNIQUE:\n       return 0;\n \n     case DEBUG_IMPLICIT_PTR:"}, {"sha": "42378b9f69ff2a91b3e230b1929f3b2f91b97e14", "filename": "gcc/rtl.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -403,6 +403,24 @@ struct GTY((variable_size)) rtvec_def {\n /* Predicate yielding nonzero iff X is an rtx for a memory location.  */\n #define MEM_P(X) (GET_CODE (X) == MEM)\n \n+/* Match CONST_*s that can represent compile-time constant integers.  */\n+#define CASE_CONST_SCALAR_INT \\\n+   case CONST_INT: \\\n+   case CONST_DOUBLE\n+\n+/* Match CONST_*s for which pointer equality corresponds to value equality.  */\n+#define CASE_CONST_UNIQUE \\\n+   case CONST_INT: \\\n+   case CONST_DOUBLE: \\\n+   case CONST_FIXED\n+\n+/* Match all CONST_* rtxes.  */\n+#define CASE_CONST_ANY \\\n+   case CONST_INT: \\\n+   case CONST_DOUBLE: \\\n+   case CONST_FIXED: \\\n+   case CONST_VECTOR\n+\n /* Predicate yielding nonzero iff X is an rtx for a constant integer.  */\n #define CONST_INT_P(X) (GET_CODE (X) == CONST_INT)\n "}, {"sha": "0f791e2e4df1a736f4ece55c94ebdd78b4a01fcf", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 12, "deletions": 48, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -97,10 +97,7 @@ rtx_unstable_p (const_rtx x)\n       return !MEM_READONLY_P (x) || rtx_unstable_p (XEXP (x, 0));\n \n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n       return 0;\n@@ -170,10 +167,7 @@ rtx_varies_p (const_rtx x, bool for_alias)\n       return !MEM_READONLY_P (x) || rtx_varies_p (XEXP (x, 0), for_alias);\n \n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n       return 0;\n@@ -585,10 +579,7 @@ count_occurrences (const_rtx x, const_rtx find, int count_dest)\n   switch (code)\n     {\n     case REG:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n     case PC:\n@@ -690,10 +681,7 @@ reg_mentioned_p (const_rtx reg, const_rtx in)\n     case PC:\n       return 0;\n \n-    case CONST_INT:\n-    case CONST_VECTOR:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n+    CASE_CONST_ANY:\n       /* These are kept unique for a given value.  */\n       return 0;\n \n@@ -887,10 +875,7 @@ modified_between_p (const_rtx x, const_rtx start, const_rtx end)\n \n   switch (code)\n     {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case CONST:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -946,10 +931,7 @@ modified_in_p (const_rtx x, const_rtx insn)\n \n   switch (code)\n     {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case CONST:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -2095,11 +2077,8 @@ volatile_insn_p (const_rtx x)\n     {\n     case LABEL_REF:\n     case SYMBOL_REF:\n-    case CONST_INT:\n     case CONST:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case CC0:\n     case PC:\n     case REG:\n@@ -2160,11 +2139,8 @@ volatile_refs_p (const_rtx x)\n     {\n     case LABEL_REF:\n     case SYMBOL_REF:\n-    case CONST_INT:\n     case CONST:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case CC0:\n     case PC:\n     case REG:\n@@ -2223,11 +2199,8 @@ side_effects_p (const_rtx x)\n     {\n     case LABEL_REF:\n     case SYMBOL_REF:\n-    case CONST_INT:\n     case CONST:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case CC0:\n     case PC:\n     case REG:\n@@ -2312,10 +2285,7 @@ may_trap_p_1 (const_rtx x, unsigned flags)\n   switch (code)\n     {\n       /* Handle these cases quickly.  */\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case CONST:\n@@ -2514,10 +2484,7 @@ inequality_comparisons_p (const_rtx x)\n     case SCRATCH:\n     case PC:\n     case CC0:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case CONST:\n     case LABEL_REF:\n     case SYMBOL_REF:\n@@ -2760,10 +2727,7 @@ computed_jump_p_1 (const_rtx x)\n       return 0;\n \n     case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case REG:\n       return 1;"}, {"sha": "a8b0d521912a49f83fb51ad57867221224052692", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -2547,10 +2547,7 @@ sched_analyze_2 (struct deps_desc *deps, rtx x, rtx insn)\n \n   switch (code)\n     {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case CONST:\n     case LABEL_REF:"}, {"sha": "b4eb5785ba315ad5b1c4a2f28364e86553164590", "filename": "gcc/valtrack.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81168901eb8ad7d426049a15f50ba0c5591737d/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=d81168901eb8ad7d426049a15f50ba0c5591737d", "patch": "@@ -44,10 +44,7 @@ cleanup_auto_inc_dec (rtx src, enum machine_mode mem_mode ATTRIBUTE_UNUSED)\n   switch (code)\n     {\n     case REG:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n     case PC:"}]}