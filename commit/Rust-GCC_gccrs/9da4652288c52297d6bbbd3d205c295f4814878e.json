{"sha": "9da4652288c52297d6bbbd3d205c295f4814878e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRhNDY1MjI4OGM1MjI5N2Q2YmJiZDNkMjA1YzI5NWY0ODE0ODc4ZQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-07-09T10:18:53Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-07-09T10:18:53Z"}, "message": "reload1.c (emit_reload_insns): If an output reload copies only to a secondary reload register...\n\n\t* reload1.c (emit_reload_insns): If an output reload copies only\n\tto a secondary reload register, indicate that the secondary reload\n\tdoes the actual store.\n\nFrom-SVN: r21034", "tree": {"sha": "a2b77cb22e0e7d3896a76edf8fb9507f23f7ae90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2b77cb22e0e7d3896a76edf8fb9507f23f7ae90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9da4652288c52297d6bbbd3d205c295f4814878e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da4652288c52297d6bbbd3d205c295f4814878e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9da4652288c52297d6bbbd3d205c295f4814878e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da4652288c52297d6bbbd3d205c295f4814878e/comments", "author": null, "committer": null, "parents": [{"sha": "930176e7428909c810999ab767ac367cfc444a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930176e7428909c810999ab767ac367cfc444a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/930176e7428909c810999ab767ac367cfc444a36"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "a373deb99f3d920b1d8f32b0b59e0b31fa5dafaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da4652288c52297d6bbbd3d205c295f4814878e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da4652288c52297d6bbbd3d205c295f4814878e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9da4652288c52297d6bbbd3d205c295f4814878e", "patch": "@@ -1,3 +1,9 @@\n+Thu Jul  9 18:12:49 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (emit_reload_insns): If an output reload copies only\n+\tto a secondary reload register, indicate that the secondary reload\n+\tdoes the actual store.\n+\n Thu Jul  9 18:01:05 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* reload.c (find_equiv_reg): If need_stable_sp is set,"}, {"sha": "b115a94adbac730f03d34e63ceb909c6b8cf7bec", "filename": "gcc/reload1.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da4652288c52297d6bbbd3d205c295f4814878e/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da4652288c52297d6bbbd3d205c295f4814878e/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=9da4652288c52297d6bbbd3d205c295f4814878e", "patch": "@@ -7085,7 +7085,35 @@ emit_reload_insns (insn)\n \t\t\t  SET_HARD_REG_BIT (reg_reloaded_died, src);\n \t\t      }\n \t\t    if (reload_spill_index[j] >= 0)\n-\t\t      new_spill_reg_store[reload_spill_index[j]] = p;\n+\t\t      {\n+\t\t\tint s = reload_secondary_out_reload[j];\n+\t\t\trtx set = single_set (p);\n+\t\t\t/* If this reload copies only to the secondary reload\n+\t\t\t   register, the secondary reload does the actual\n+\t\t\t   store.  */\n+\t\t\tif (s >= 0 && set == NULL_RTX)\n+\t\t\t  ; /* We can't tell what function the secondary reload\n+\t\t\t       has and where the actual store to the pseudo is\n+\t\t\t       made; leave new_spill_reg_store alone.  */\n+\t\t\telse if (s >= 0\n+\t\t\t    && SET_SRC (set) == reload_reg_rtx[j]\n+\t\t\t    && SET_DEST (set) == reload_reg_rtx[s])\n+\t\t\t  {\n+\t\t\t    /* Usually the next instruction will be the\n+\t\t\t       secondary reload insn;  if we can confirm\n+\t\t\t       that it is, setting new_spill_reg_store to\n+\t\t\t       that insn will allow an extra optimization.  */\n+\t\t\t    rtx s_reg = reload_reg_rtx[s];\n+\t\t\t    rtx next = NEXT_INSN (p);\n+\t\t\t    reload_out[s] = reload_out[j];\n+\t\t\t    set = single_set (next);\n+\t\t\t    if (set && SET_SRC (set) == s_reg\n+\t\t\t\t&& ! new_spill_reg_store[REGNO (s_reg)])\n+\t\t\t      new_spill_reg_store[REGNO (s_reg)] = next;\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  new_spill_reg_store[reload_spill_index[j]] = p;\n+\t\t      }\n \t\t  }\n \t      }\n "}]}