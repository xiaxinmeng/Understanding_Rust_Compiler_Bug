{"sha": "9fb41e15f2a7cb10a3090971fa542c265e01bd44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZiNDFlMTVmMmE3Y2IxMGEzMDkwOTcxZmE1NDJjMjY1ZTAxYmQ0NA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-09T14:22:30Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-09T14:22:30Z"}, "message": "mmix-protos.h (mmix_function_arg): Delete.\n\n\t* config/mmix/mmix-protos.h (mmix_function_arg): Delete.\n\t* config/mmix/mmix.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/mmix/mmix.c (mmix_function_arg): Rename to...\n\t(mmix_function_arg_1): ...this.  Make static.  Take a const_tree and\n\tbool arguments.\n\t(mmix_function_arg): New function.\n\t(mmix_function_incoming_arg): New function.\n\t(mmix_function_arg_advance): New function.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_INCOMING_ARG): Define.\n\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r165230", "tree": {"sha": "8e164fcf4d5e85c2f62fb53170970b2bf1be21c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e164fcf4d5e85c2f62fb53170970b2bf1be21c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fb41e15f2a7cb10a3090971fa542c265e01bd44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb41e15f2a7cb10a3090971fa542c265e01bd44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb41e15f2a7cb10a3090971fa542c265e01bd44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb41e15f2a7cb10a3090971fa542c265e01bd44/comments", "author": null, "committer": null, "parents": [{"sha": "8f8a46ba9264ba2e78c23ba1872c8be5dde0672f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f"}], "stats": {"total": 98, "additions": 72, "deletions": 26}, "files": [{"sha": "ea7fced53d6edf03ec2654476402912b5d66c86f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb41e15f2a7cb10a3090971fa542c265e01bd44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb41e15f2a7cb10a3090971fa542c265e01bd44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fb41e15f2a7cb10a3090971fa542c265e01bd44", "patch": "@@ -1,3 +1,16 @@\n+2010-10-09  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/mmix/mmix-protos.h (mmix_function_arg): Delete.\n+\t* config/mmix/mmix.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/mmix/mmix.c (mmix_function_arg): Rename to...\n+\t(mmix_function_arg_1): ...this.  Make static.  Take a const_tree and\n+\tbool arguments.\n+\t(mmix_function_arg): New function.\n+\t(mmix_function_incoming_arg): New function.\n+\t(mmix_function_arg_advance): New function.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_INCOMING_ARG): Define.\n+\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/vax/vax.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete."}, {"sha": "1f9cae0a211696911b215de1463fd20ab8b08c2f", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb41e15f2a7cb10a3090971fa542c265e01bd44/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb41e15f2a7cb10a3090971fa542c265e01bd44/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=9fb41e15f2a7cb10a3090971fa542c265e01bd44", "patch": "@@ -59,8 +59,6 @@ extern void mmix_asm_output_aligned_common (FILE *, const char *, int, int);\n extern void mmix_asm_output_aligned_local (FILE *, const char *, int, int);\n extern void mmix_asm_declare_register_global\n   (FILE *, tree, int, const char *);\n-extern rtx mmix_function_arg\n-  (const CUMULATIVE_ARGS *, enum machine_mode, tree, int, int);\n extern void mmix_asm_output_addr_diff_elt (FILE *, rtx, int, int);\n extern void mmix_asm_output_addr_vec_elt (FILE *, int);\n extern enum reg_class mmix_preferred_reload_class (rtx, enum reg_class);"}, {"sha": "91fa1fba60c0b9abd1f426c7bb1b23a429103cc8", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 59, "deletions": 11, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb41e15f2a7cb10a3090971fa542c265e01bd44/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb41e15f2a7cb10a3090971fa542c265e01bd44/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=9fb41e15f2a7cb10a3090971fa542c265e01bd44", "patch": "@@ -143,6 +143,14 @@ static rtx mmix_struct_value_rtx (tree, int);\n static enum machine_mode mmix_promote_function_mode (const_tree,\n \t\t\t\t\t\t     enum machine_mode,\n \t                                             int *, const_tree, int);\n+static void mmix_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t       const_tree, bool);\n+static rtx mmix_function_arg_1 (const CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\tconst_tree, bool, bool);\n+static rtx mmix_function_incoming_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t       const_tree, bool);\n+static rtx mmix_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t      const_tree, bool);\n static rtx mmix_function_value (const_tree, const_tree, bool);\n static rtx mmix_libcall_value (enum machine_mode, const_rtx);\n static bool mmix_function_value_regno_p (const unsigned int);\n@@ -213,6 +221,12 @@ static void mmix_trampoline_init (rtx, tree, rtx);\n #undef TARGET_FUNCTION_VALUE_REGNO_P\n #define TARGET_FUNCTION_VALUE_REGNO_P mmix_function_value_regno_p\n \n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG mmix_function_arg\n+#undef TARGET_FUNCTION_INCOMING_ARG\n+#define TARGET_FUNCTION_INCOMING_ARG mmix_function_incoming_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE mmix_function_arg_advance\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX mmix_struct_value_rtx\n #undef TARGET_SETUP_INCOMING_VARARGS\n@@ -369,9 +383,9 @@ mmix_conditional_register_usage (void)\n    Those two macros must only be applied to function argument\n    registers.  FIXME: for their current use in gcc, it'd be better\n    with an explicit specific additional FUNCTION_INCOMING_ARG_REGNO_P\n-   a'la FUNCTION_ARG / FUNCTION_INCOMING_ARG instead of forcing the\n-   target to commit to a fixed mapping and for any unspecified\n-   register use.  */\n+   a'la TARGET_FUNCTION_ARG / TARGET_FUNCTION_INCOMING_ARG instead of\n+   forcing the target to commit to a fixed mapping and for any\n+   unspecified register use.  */\n \n int\n mmix_opposite_regno (int regno, int incoming)\n@@ -622,15 +636,28 @@ mmix_initial_elimination_offset (int fromreg, int toreg)\n     + (fromreg == MMIX_ARG_POINTER_REGNUM ? 0 : 8);\n }\n \n-/* Return an rtx for a function argument to go in a register, and 0 for\n-   one that must go on stack.  */\n+static void\n+mmix_function_arg_advance (CUMULATIVE_ARGS *argsp, enum machine_mode mode,\n+\t\t\t   const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  int arg_size = MMIX_FUNCTION_ARG_SIZE (mode, type);\n \n-rtx\n-mmix_function_arg (const CUMULATIVE_ARGS *argsp,\n-\t\t   enum machine_mode mode,\n-\t\t   tree type,\n-\t\t   int named ATTRIBUTE_UNUSED,\n-\t\t   int incoming)\n+  argsp->regs = ((targetm.calls.must_pass_in_stack (mode, type)\n+\t\t  || (arg_size > 8\n+\t\t      && !TARGET_LIBFUNC\n+\t\t      && !argsp->lib))\n+\t\t ? (MMIX_MAX_ARGS_IN_REGS) + 1\n+\t\t : argsp->regs + (7 + arg_size) / 8);\n+}\n+\n+/* Helper function for mmix_function_arg and mmix_function_incoming_arg.  */\n+\n+static rtx\n+mmix_function_arg_1 (const CUMULATIVE_ARGS *argsp,\n+\t\t     enum machine_mode mode,\n+\t\t     const_tree type,\n+\t\t     bool named ATTRIBUTE_UNUSED,\n+\t\t     bool incoming)\n {\n   /* Last-argument marker.  */\n   if (type == void_type_node)\n@@ -654,6 +681,27 @@ mmix_function_arg (const CUMULATIVE_ARGS *argsp,\n     : NULL_RTX;\n }\n \n+/* Return an rtx for a function argument to go in a register, and 0 for\n+   one that must go on stack.  */\n+\n+static rtx\n+mmix_function_arg (CUMULATIVE_ARGS *argsp,\n+\t\t   enum machine_mode mode,\n+\t\t   const_tree type,\n+\t\t   bool named)\n+{\n+  return mmix_function_arg_1 (argsp, mode, type, named, false);\n+}\n+\n+static rtx\n+mmix_function_incoming_arg (CUMULATIVE_ARGS *argsp,\n+\t\t\t    enum machine_mode mode,\n+\t\t\t    const_tree type,\n+\t\t\t    bool named)\n+{\n+  return mmix_function_arg_1 (argsp, mode, type, named, true);\n+}\n+\n /* Returns nonzero for everything that goes by reference, 0 for\n    everything that goes by value.  */\n "}, {"sha": "02d05284d33bd10e3fad680213c99225789d4622", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb41e15f2a7cb10a3090971fa542c265e01bd44/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb41e15f2a7cb10a3090971fa542c265e01bd44/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=9fb41e15f2a7cb10a3090971fa542c265e01bd44", "patch": "@@ -571,25 +571,12 @@ enum reg_class\n \n \n /* Node: Register Arguments */\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\\\n- mmix_function_arg (&(CUM), MODE, TYPE, NAMED, 0)\n-\n-#define FUNCTION_INCOMING_ARG(CUM, MODE, TYPE, NAMED)\t\\\n- mmix_function_arg (&(CUM), MODE, TYPE, NAMED, 1)\n \n typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM).regs = 0, (CUM).lib = ((LIBNAME) != 0))\n \n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\\\n- ((CUM).regs\t\t\t\t\t\t\t\\\n-  = ((targetm.calls.must_pass_in_stack (MODE, TYPE))\t\t\\\n-     || (MMIX_FUNCTION_ARG_SIZE (MODE, TYPE) > 8\t\t\\\n-\t && !TARGET_LIBFUNC && !(CUM).lib))\t\t\t\\\n-  ? (MMIX_MAX_ARGS_IN_REGS) + 1\t\t\t\t\t\\\n-  : (CUM).regs + (7 + (MMIX_FUNCTION_ARG_SIZE (MODE, TYPE))) / 8)\n-\n #define FUNCTION_ARG_REGNO_P(REGNO)\t\t\\\n  mmix_function_arg_regno_p (REGNO, 0)\n "}]}