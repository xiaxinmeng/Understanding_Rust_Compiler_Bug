{"sha": "beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViMGM5Y2M3ODczNzEzYjgzYTZkOGVjZmU4YTkyYWRiZmMzYTc4Nw==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2008-10-08T02:52:28Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2008-10-08T02:52:28Z"}, "message": "re PR middle-end/37448 (cannot compile big function)\n\n2008-10-07  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\tPR rtl-optimization/37448\n\talloc_pool_desc (elt_size): New field.\n\talloc_pool_desc (created, allocated, current, peak): Make unsigned\n\tlong.\n\toutput_info (count): Renamed total_created and made unsigned long.\n\toutput_info (size): Renamed total_allocated and made unsigned long.\n\talloc-pool.c (create_alloc_pool, empty_alloc_pool, pool_alloc,\n\tpool_free): Properly keep track of desc->size.\n\t(print_statistics, dump_alloc_pool_statistics): Enhance the\n\tprinting of statistics to print the number of elements and to use\n\tunsigned longs.\n\nFrom-SVN: r140960", "tree": {"sha": "9542e5e0721a973bbd1bdf8f3e87a10764e1761d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9542e5e0721a973bbd1bdf8f3e87a10764e1761d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c6a9fb728a2490e6883221823c4208219a926c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6a9fb728a2490e6883221823c4208219a926c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6a9fb728a2490e6883221823c4208219a926c9"}], "stats": {"total": 90, "additions": 62, "deletions": 28}, "files": [{"sha": "9e891381eafb7ce43cfcd9d23bf809904c15b1b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787", "patch": "@@ -1,3 +1,17 @@\n+2008-10-07  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\tPR rtl-optimization/37448\n+\talloc_pool_desc (elt_size): New field.\n+\talloc_pool_desc (created, allocated, current, peak): Make unsigned\n+\tlong.\n+\toutput_info (count): Renamed total_created and made unsigned long.\n+\toutput_info (size): Renamed total_allocated and made unsigned long.\n+\talloc-pool.c (create_alloc_pool, empty_alloc_pool, pool_alloc,\n+\tpool_free): Properly keep track of desc->size.\n+\t(print_statistics, dump_alloc_pool_statistics): Enhance the\n+\tprinting of statistics to print the number of elements and to use\n+\tunsigned longs.\n+\t\n 2008-10-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/37576"}, {"sha": "f098a84b19c573fcc7f608604c4ab99ac66a3b11", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 48, "deletions": 28, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=beb0c9cc7873713b83a6d8ecfe8a92adbfc3a787", "patch": "@@ -64,14 +64,25 @@ static ALLOC_POOL_ID_TYPE last_id;\n \n #ifdef GATHER_STATISTICS\n \n-/* Store information about each particular alloc_pool.  */\n+/* Store information about each particular alloc_pool.  Note that this\n+   will underestimate the amount the amount of storage used by a small amount:\n+   1) The overhead in a pool is not accounted for.\n+   2) The unallocated elements in a block are not accounted for.  Note\n+   that this can at worst case be one element smaller that the block\n+   size for that pool.  */\n struct alloc_pool_descriptor\n {\n   const char *name;\n-  int allocated;\n-  int created;\n-  int peak;\n-  int current;\n+  /* Number of pools allocated.  */\n+  unsigned long created;\n+  /* Gross allocated storage.  */\n+  unsigned long allocated;\n+  /* Amount of currently active storage. */\n+  unsigned long current;\n+  /* Peak amount of storage used.  */\n+  unsigned long peak;\n+  /* Size of element in the pool.  */\n+  int elt_size;\n };\n \n /* Hashtable mapping alloc_pool names to descriptors.  */\n@@ -150,6 +161,7 @@ create_alloc_pool (const char *name, size_t size, size_t num)\n   pool->name = /*xstrdup (name)*/name;\n #ifdef GATHER_STATISTICS\n   desc = alloc_pool_descriptor (name);\n+  desc->elt_size = size;\n   desc->created++;\n #endif\n   pool->elt_size = size;\n@@ -196,11 +208,11 @@ empty_alloc_pool (alloc_pool pool)\n     {\n       next_block = block->next;\n       free (block);\n-#ifdef GATHER_STATISTICS\n-      desc->current -= pool->block_size;\n-#endif\n     }\n \n+#ifdef GATHER_STATISTICS\n+  desc->current -= (pool->elts_allocated - pool->elts_free) * pool->elt_size;\n+#endif\n   pool->returned_free_list = NULL;\n   pool->virgin_free_list = NULL;\n   pool->virgin_elts_remaining = 0;\n@@ -242,7 +254,10 @@ pool_alloc (alloc_pool pool)\n #ifdef GATHER_STATISTICS\n   struct alloc_pool_descriptor *desc = alloc_pool_descriptor (pool->name);\n \n-  desc->allocated+=pool->elt_size;\n+  desc->allocated += pool->elt_size;\n+  desc->current += pool->elt_size;\n+  if (desc->peak < desc->current)\n+    desc->peak = desc->current;\n #endif\n \n   gcc_assert (pool);\n@@ -259,11 +274,6 @@ pool_alloc (alloc_pool pool)\n \t  block = XNEWVEC (char, pool->block_size);\n \t  block_header = (alloc_pool_list) block;\n \t  block += align_eight (sizeof (struct alloc_pool_list_def));\n-#ifdef GATHER_STATISTICS\n-\t  desc->current += pool->block_size;\n-\t  if (desc->peak < desc->current)\n-\t    desc->peak = desc->current;\n-#endif\n \t  \n \t  /* Throw it on the block list.  */\n \t  block_header->next = pool->block_list;\n@@ -314,6 +324,9 @@ void\n pool_free (alloc_pool pool, void *ptr)\n {\n   alloc_pool_list header;\n+#ifdef GATHER_STATISTICS\n+  struct alloc_pool_descriptor *desc = alloc_pool_descriptor (pool->name);\n+#endif\n \n   gcc_assert (ptr);\n \n@@ -334,15 +347,20 @@ pool_free (alloc_pool pool, void *ptr)\n   header->next = pool->returned_free_list;\n   pool->returned_free_list = header;\n   pool->elts_free++;\n+\n+#ifdef GATHER_STATISTICS\n+  desc->current -= pool->elt_size;\n+#endif\n+\n }\n /* Output per-alloc_pool statistics.  */\n #ifdef GATHER_STATISTICS\n \n /* Used to accumulate statistics about alloc_pool sizes.  */\n struct output_info\n {\n-  int count;\n-  int size;\n+  unsigned long total_created;\n+  unsigned long total_allocated;\n };\n \n /* Called via htab_traverse.  Output alloc_pool descriptor pointed out by SLOT\n@@ -355,10 +373,12 @@ print_statistics (void **slot, void *b)\n \n   if (d->allocated)\n     {\n-      fprintf (stderr, \"%-21s %6d %10d %10d %10d\\n\", d->name,\n-\t       d->created, d->allocated, d->peak, d->current);\n-      i->size += d->allocated;\n-      i->count += d->created;\n+      fprintf (stderr, \"%-22s %6d %10lu %10lu(%10lu) %10lu(%10lu) %10lu(%10lu)\\n\", d->name,\n+\t       d->elt_size, d->created, d->allocated, d->allocated / d->elt_size, \n+\t       d->peak, d->peak / d->elt_size, \n+\t       d->current, d->current / d->elt_size);\n+      i->total_allocated += d->allocated;\n+      i->total_created += d->created;\n     }\n   return 1;\n }\n@@ -374,14 +394,14 @@ dump_alloc_pool_statistics (void)\n   if (!alloc_pool_hash)\n     return;\n \n-  fprintf (stderr, \"\\nAlloc-pool Kind        Pools  Allocated      Peak        Leak\\n\");\n-  fprintf (stderr, \"-------------------------------------------------------------\\n\");\n-  info.count = 0;\n-  info.size = 0;\n+  fprintf (stderr, \"\\nAlloc-pool Kind         Elt size  Pools  Allocated (elts)            Peak (elts)            Leak (elts)\\n\");\n+  fprintf (stderr, \"--------------------------------------------------------------------------------------------------------------\\n\");\n+  info.total_created = 0;\n+  info.total_allocated = 0;\n   htab_traverse (alloc_pool_hash, print_statistics, &info);\n-  fprintf (stderr, \"-------------------------------------------------------------\\n\");\n-  fprintf (stderr, \"%-20s %7d %10d\\n\",\n-\t   \"Total\", info.count, info.size);\n-  fprintf (stderr, \"-------------------------------------------------------------\\n\");\n+  fprintf (stderr, \"--------------------------------------------------------------------------------------------------------------\\n\");\n+  fprintf (stderr, \"%-22s           %7lu %10lu\\n\",\n+\t   \"Total\", info.total_created, info.total_allocated);\n+  fprintf (stderr, \"--------------------------------------------------------------------------------------------------------------\\n\");\n #endif\n }"}]}