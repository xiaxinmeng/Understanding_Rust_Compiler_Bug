{"sha": "a544cfd20164c1c8513be05e1c1976c0fd005735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU0NGNmZDIwMTY0YzFjODUxM2JlMDVlMWMxOTc2YzBmZDAwNTczNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-04T16:29:41Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-04T16:29:41Z"}, "message": "builtins.c (expand_builtin_strlen): Initialize variable `icode'.\n\n\t* builtins.c (expand_builtin_strlen): Initialize variable `icode'.\n\n\t* calls.c (expand_call): Likewise for\n\t`old_stack_arg_under_construction'.\n\n\t* cpphash.c (macroexpand): Likewise for `args' and `rest_zero'.\n\n\t* function.c (pad_to_arg_alignment): Likewise for `save_var' and\n\t`save_constant'.\n\n\t* gcc.c (execute): Likewise for `ut' and `st'.\n\n\t* genattrtab.c (attr_rtx): Likewise for `rt_val'.\n\n\t* genopinit.c (gen_insn): Likewise for `m1', `m2' and `op'.\n\n\t* jump.c (jump_optimize_1): Likewise for `temp2'.\n\n\t* local-alloc.c (block_alloc): Likewise for `r1'.\n\n\t* loop.c (recombine_givs): Likewise for `life_start' and `life_end'.\n\n\t* reg-stack.c (check_asm_stack_operands): Likewise for `clobber_reg'.\n\t(subst_asm_stack_regs): Likewise for `clobber_reg' and `clobber_loc'.\n\n\t* regmove.c (fixup_match_1): Likewise for `insn_const', `dst_node'\n\tand `set2'.\n\n\t* reload.c (find_reloads): Likewise for `goal_alternative_number'\n\tand `goal_earlyclobber'.\n\n\t* scan-decls.c (scan_decls): Likewise for `prev_id_end'.\n\n\t* sdbout.c (sdbout_one_type): Likewise for `member_scl'.\n\n\t* stupid.c (stupid_life_analysis): Likewise for `chain'.\n\n\t* unroll.c (copy_loop_body): Likewise for `copy'.\n\n\t* varasm.c (output_constructor): Likewise for `byte'.\n\nch:\n\t* actions.c (update_else_range_for_int_const): Initialize\n\tvariables `lowval' and `highval'.\n\t(update_else_range_for_range): Likewise for `low_range_val' and\n\t`high_range_val'.\n\ncp:\n\t* class.c (warn_hidden): Initialize variable `fndecl'.\n\nFrom-SVN: r31207", "tree": {"sha": "c6c90fb3ae425e0d80eecaae92aecbf78efb350f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6c90fb3ae425e0d80eecaae92aecbf78efb350f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a544cfd20164c1c8513be05e1c1976c0fd005735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a544cfd20164c1c8513be05e1c1976c0fd005735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a544cfd20164c1c8513be05e1c1976c0fd005735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a544cfd20164c1c8513be05e1c1976c0fd005735/comments", "author": null, "committer": null, "parents": [{"sha": "cfa770517e477d3f9269ab570b9db6d4f984cacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa770517e477d3f9269ab570b9db6d4f984cacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa770517e477d3f9269ab570b9db6d4f984cacc"}], "stats": {"total": 152, "additions": 103, "deletions": 49}, "files": [{"sha": "fa733454d431c7c6a074754446bacba1d56b4bcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,3 +1,46 @@\n+2000-01-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_strlen): Initialize variable `icode'.\n+\n+\t* calls.c (expand_call): Likewise for\n+\t`old_stack_arg_under_construction'.\n+\n+\t* cpphash.c (macroexpand): Likewise for `args' and `rest_zero'.\n+\n+\t* function.c (pad_to_arg_alignment): Likewise for `save_var' and\n+\t`save_constant'.\n+\n+\t* gcc.c (execute): Likewise for `ut' and `st'.\n+\n+\t* genattrtab.c (attr_rtx): Likewise for `rt_val'.\n+\n+\t* genopinit.c (gen_insn): Likewise for `m1', `m2' and `op'.\n+\n+\t* jump.c (jump_optimize_1): Likewise for `temp2'.\n+\n+\t* local-alloc.c (block_alloc): Likewise for `r1'.\n+\n+\t* loop.c (recombine_givs): Likewise for `life_start' and `life_end'.\n+\n+\t* reg-stack.c (check_asm_stack_operands): Likewise for `clobber_reg'.\n+\t(subst_asm_stack_regs): Likewise for `clobber_reg' and `clobber_loc'.\n+\t\n+\t* regmove.c (fixup_match_1): Likewise for `insn_const', `dst_node'\n+\tand `set2'.\n+\n+\t* reload.c (find_reloads): Likewise for `goal_alternative_number'\n+\tand `goal_earlyclobber'.\n+\n+\t* scan-decls.c (scan_decls): Likewise for `prev_id_end'.\n+\n+\t* sdbout.c (sdbout_one_type): Likewise for `member_scl'.\n+\n+\t* stupid.c (stupid_life_analysis): Likewise for `chain'.\n+\n+\t* unroll.c (copy_loop_body): Likewise for `copy'.\n+\n+\t* varasm.c (output_constructor): Likewise for `byte'.\t\n+\n Tue Jan  4 15:34:34 MET 2000  Jan Hubicka  <hubicka@freesoft.cz>\n \n \t* i386.c (ix86_expand_move): Allow pushes of memory, offload to memory"}, {"sha": "43e87b19a66dad5820d4d5f3338deee4ffd68ba7", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1301,7 +1301,7 @@ expand_builtin_strlen (exp, target, mode)\n \n       rtx result, src_rtx, char_rtx;\n       enum machine_mode insn_mode = value_mode, char_mode;\n-      enum insn_code icode;\n+      enum insn_code icode = CODE_FOR_nothing;\n \n       /* If the length is known, just return it.  */\n       if (len != 0)"}, {"sha": "52fcb94af3cee07b06c3bc2c397b3dfabbdfbbeb", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Convert function calls to rtl insns, for GNU C compiler.\n-   Copyright (C) 1989, 92-97, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 92-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1660,7 +1660,7 @@ expand_call (exp, target, ignore)\n #ifdef ACCUMULATE_OUTGOING_ARGS\n   int initial_highest_arg_in_use = highest_outgoing_arg_in_use;\n   char *initial_stack_usage_map = stack_usage_map;\n-  int old_stack_arg_under_construction;\n+  int old_stack_arg_under_construction = 0;\n #endif\n \n   rtx old_stack_level = 0;"}, {"sha": "0a073e3b1c1c47e4ed52c0a5ac1c2e3a0c9d85d8", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,3 +1,10 @@\n+2000-01-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* actions.c (update_else_range_for_int_const): Initialize\n+\tvariables `lowval' and `highval'.\n+\t(update_else_range_for_range): Likewise for `low_range_val' and\n+\t`high_range_val'.\n+\n 1999-12-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* typeck.c (apply_chill_array_layout, apply_chill_field_layout):"}, {"sha": "215557b195fef5f6a52e72379447a402af69ea4e", "filename": "gcc/ch/actions.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fch%2Factions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fch%2Factions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Factions.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Implement actions for CHILL.\n-   Copyright (C) 1992, 93, 1994, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93, 94, 98, 99, 2000 Free Software Foundation, Inc.\n    Authors: Per Bothner, Bill Cox, Michael Tiemann, Michael North\n \n This file is part of GNU CC.\n@@ -788,7 +788,7 @@ static tree\n update_else_range_for_int_const (else_range, label)\n      tree else_range, label;\n {\n-  int  lowval, highval;\n+  int  lowval = 0, highval = 0;\n   int  label_value = TREE_INT_CST_LOW (label);\n   tree this_range, prev_range, new_range;\n \n@@ -846,7 +846,7 @@ update_else_range_for_range (else_range, low_target, high_target)\n      tree else_range, low_target, high_target;\n {\n   tree this_range, prev_range, new_range, next_range;\n-  int  low_range_val, high_range_val;\n+  int  low_range_val = 0, high_range_val = 0;\n   int  low_target_val  = TREE_INT_CST_LOW (low_target);\n   int  high_target_val = TREE_INT_CST_LOW (high_target);\n "}, {"sha": "c8ff354840612ce64ee182a621bd1537adb441ae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,3 +1,7 @@\n+2000-01-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (warn_hidden): Initialize variable `fndecl'.\n+\n 2000-01-03  Ulrich Drepper  <drepper@cygnus.com>\n \n \t* decl.c (flag_isoc9x): New variable to be able to use code in"}, {"sha": "c2ff295be0d330856adde000de1f024d6605837e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Functions related to building classes and their related objects.\n-   Copyright (C) 1987, 92-97, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 92-99, 2000 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -2930,7 +2930,7 @@ warn_hidden (t)\n   for (i = 2; i < n_methods && TREE_VEC_ELT (method_vec, i); ++i)\n     {\n       tree fns = TREE_VEC_ELT (method_vec, i);\n-      tree fndecl;\n+      tree fndecl = NULL_TREE;\n \n       tree base_fndecls = NULL_TREE;\n       tree binfos = BINFO_BASETYPES (TYPE_BINFO (t));"}, {"sha": "e99e6c70da9f0d62d5e6a81f20e9cc4d3495bc80", "filename": "gcc/cpphash.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Part of CPP library.  (Macro handling.)\n-   Copyright (C) 1986, 87, 89, 92-96, 98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1986, 87, 89, 92-96, 98, 99, 2000 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -1051,12 +1051,12 @@ macroexpand (pfile, hp)\n   register U_CHAR *xbuf;\n   long start_line, start_column;\n   int xbuf_len;\n-  struct argdata *args;\n+  struct argdata *args = 0;\n   long old_written = CPP_WRITTEN (pfile);\n #if 0\n   int start_line = instack[indepth].lineno;\n #endif\n-  int rest_args, rest_zero;\n+  int rest_args, rest_zero = 0;\n   register int i;\n \n #if 0"}, {"sha": "d298283ee282fb2e910b242caaa1bd8d59724d15", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Expands front end tree to back end RTL for GNU C-Compiler\n-   Copyright (C) 1987, 88, 89, 91-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 91-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -5078,8 +5078,8 @@ pad_to_arg_alignment (offset_ptr, boundary, alignment_pad)\n      int boundary;\n      struct args_size *alignment_pad;\n {\n-  tree save_var;\n-  HOST_WIDE_INT save_constant;\n+  tree save_var = NULL_TREE;\n+  HOST_WIDE_INT save_constant = 0;\n \n   int boundary_in_bytes = boundary / BITS_PER_UNIT;\n   "}, {"sha": "15064ebf66f61bcdc6bad62e1c67917de1c5d0c9", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Compiler driver program that can handle many languages.\n-   Copyright (C) 1987, 89, 92-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 89, 92-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2575,7 +2575,7 @@ execute ()\n     int ret_code = 0;\n #ifdef HAVE_GETRUSAGE\n     struct timeval d;\n-    double ut, st;\n+    double ut = 0.0, st = 0.0;\n #endif\n \n     for (i = 0; i < n_commands; )"}, {"sha": "c164139c94b9a7b2e4a8697ef7532288e854c2af", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Generate code from machine description to compute values of attributes.\n-   Copyright (C) 1991, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 93-99, 2000 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GNU CC.\n@@ -542,8 +542,8 @@ attr_rtx VPROTO((enum rtx_code code, ...))\n #endif\n   va_list p;\n   register int i;\t\t/* Array indices...\t\t\t*/\n-  register const char *fmt;\t\t/* Current rtx's format...\t\t*/\n-  register rtx rt_val;\t\t/* RTX to return to caller...\t\t*/\n+  register const char *fmt;\t/* Current rtx's format...\t\t*/\n+  register rtx rt_val = NULL_RTX;/* RTX to return to caller...\t\t*/\n   int hashcode;\n   register struct attr_hash *h;\n   struct obstack *old_obstack = rtl_obstack;"}, {"sha": "4022d7e232d6da58b71d8d896de2318361c82cb2", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Generate code to initialize optabs from machine description.\n-   Copyright (C) 1993, 94-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 94-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -128,7 +128,7 @@ gen_insn (insn)\n      rtx insn;\n {\n   char *name = XSTR (insn, 0);\n-  int m1, m2, op;\n+  int m1 = 0, m2 = 0, op = 0;\n   size_t pindex;\n   int i;\n   const char *np, *pp, *p, *q;"}, {"sha": "1e9377124d54857c9cce841594b33e39fbfb2638", "filename": "gcc/jump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Optimize jump instructions, for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 91-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 91-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -309,7 +309,7 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan, mark_labels_only)\n       for (insn = f; insn; insn = next)\n \t{\n \t  rtx reallabelprev;\n-\t  rtx temp, temp1, temp2, temp3, temp4, temp5, temp6;\n+\t  rtx temp, temp1, temp2 = NULL_RTX, temp3, temp4, temp5, temp6;\n \t  rtx nlabel;\n \t  int this_is_simplejump, this_is_condjump, reversep = 0;\n \t  int this_is_condjump_in_parallel;"}, {"sha": "171b13aa8222fce1f15585fbc436ee4f1393036c", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Allocate registers within a basic block, for GNU compiler.\n-   Copyright (C) 1987, 88, 91, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 91, 93-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1082,7 +1082,7 @@ block_alloc (b)\n \t{\n \t  register rtx link, set;\n \t  register int win = 0;\n-\t  register rtx r0, r1;\n+\t  register rtx r0, r1 = NULL_RTX;\n \t  int combined_regno = -1;\n \t  int i;\n "}, {"sha": "f25b00abbc89bac73345f7c1a2dcd1a6da0bd0c3", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Perform various loop optimizations, including strength reduction.\n-   Copyright (C) 1987, 88, 89, 91-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 91-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -7682,7 +7682,7 @@ recombine_givs (bl, loop_start, loop_end, unroll_p)\n      LAST_GIV.  */\n   for (i = giv_count - 1; i >= 0; i = rescan)\n     {\n-      int life_start, life_end;\n+      int life_start = 0, life_end = 0;\n \n       for (last_giv = 0, rescan = -1; i >= 0; i--)\n \t{"}, {"sha": "de4c75a9ee7c9022babec7e1ae07377c1a870754", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Register to Stack convert for GNU compiler.\n-   Copyright (C) 1992, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-99, 2000 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -589,7 +589,7 @@ check_asm_stack_operands (insn)\n   char implicitly_dies[FIRST_PSEUDO_REGISTER];\n   int alt;\n \n-  rtx *clobber_reg;\n+  rtx *clobber_reg = 0;\n   int n_inputs, n_outputs;\n \n   /* Find out what the constraints require.  If no constraint\n@@ -1792,8 +1792,8 @@ subst_asm_stack_regs (insn, regstack)\n   rtx **note_loc;\t\t/* Address of REG field of each note */\n   enum reg_note *note_kind;\t/* The type of each note */\n \n-  rtx *clobber_reg;\n-  rtx **clobber_loc;\n+  rtx *clobber_reg = 0;\n+  rtx **clobber_loc = 0;\n \n   struct stack_def temp_stack;\n   int n_notes;"}, {"sha": "810f9d97a843e1fe61d6eb5395ede9cf69276193", "filename": "gcc/regmove.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Move registers around to reduce number of move instructions needed.\n-   Copyright (C) 1987, 88, 89, 92-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1604,9 +1604,9 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n   int success = 0;\n   int num_calls = 0, s_num_calls = 0;\n   enum rtx_code code = NOTE;\n-  HOST_WIDE_INT insn_const, newconst;\n+  HOST_WIDE_INT insn_const = 0, newconst;\n   rtx overlap = 0; /* need to move insn ? */\n-  rtx src_note = find_reg_note (insn, REG_DEAD, src), dst_note;\n+  rtx src_note = find_reg_note (insn, REG_DEAD, src), dst_note = NULL_RTX;\n   int length, s_length;\n \n   /* If SRC is marked as unchanging, we may not change it.\n@@ -1695,7 +1695,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t  if (! src_note)\n \t    {\n \t      rtx q;\n-\t      rtx set2;\n+\t      rtx set2 = NULL_RTX;\n \n \t      /* If an optimization is done, the value of SRC while P\n \t\t is executed will be changed.  Check that this is OK.  */\n@@ -1872,7 +1872,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n   if (! overlap && (code == PLUS || code == MINUS))\n     {\n       rtx note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n-      rtx q, set2;\n+      rtx q, set2 = NULL_RTX;\n       int num_calls2 = 0, s_length2 = 0;\n \n       if (note && CONSTANT_P (XEXP (note, 0)))"}, {"sha": "3a4d23e43b0e1bccfe4c4cf06dbe6f3b4a6f9c7f", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Search an insn for pseudo regs that must be in hard regs and are not.\n-   Copyright (C) 1987, 88, 89, 92-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2383,7 +2383,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n   int swapped;\n   int goal_alternative[MAX_RECOG_OPERANDS];\n   int this_alternative_number;\n-  int goal_alternative_number;\n+  int goal_alternative_number = 0;\n   int operand_reloadnum[MAX_RECOG_OPERANDS];\n   int goal_alternative_matches[MAX_RECOG_OPERANDS];\n   int goal_alternative_matched[MAX_RECOG_OPERANDS];\n@@ -2397,7 +2397,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n   rtx substed_operand[MAX_RECOG_OPERANDS];\n   rtx body = PATTERN (insn);\n   rtx set = single_set (insn);\n-  int goal_earlyclobber, this_earlyclobber;\n+  int goal_earlyclobber = 0, this_earlyclobber;\n   enum machine_mode operand_mode[MAX_RECOG_OPERANDS];\n   int retval = 0;\n "}, {"sha": "13a09ac8faf7071bf5a307fb3448e615a46c0c3e", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* scan-decls.c - Extracts declarations from cpp output.\n-   Copyright (C) 1993, 1995, 97-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 97-99, 2000 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -88,7 +88,7 @@ scan_decls (pfile, argc, argv)\n      declarator.  If it is zero, we are either still parsing the\n      decl-specs, or prev_id_start marks the start of the declarator.  */\n   int declarator_start;\n-  int prev_id_start, prev_id_end;\n+  int prev_id_start, prev_id_end = 0;\n   enum cpp_token token;\n \n  new_statement:"}, {"sha": "e78675f5ebcdb6c37bdfaa3591d2f5488d9a4f3f", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Output sdb-format symbol table information from GNU compiler.\n-   Copyright (C) 1988, 92-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 92-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1173,7 +1173,7 @@ sdbout_one_type (type)\n       /* Output a structure type.  */\n       {\n \tint size = int_size_in_bytes (type);\n-\tint member_scl;\n+\tint member_scl = 0;\n \ttree tem;\n \tint i, n_baseclasses = 0;\n "}, {"sha": "a0f328fae204e79b2bae13448a4e455a181b218f", "filename": "gcc/stupid.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fstupid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fstupid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstupid.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Dummy data flow analysis for GNU compiler in nonoptimizing mode.\n-   Copyright (C) 1987, 91, 94-96, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 91, 94-96, 98, 99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -264,7 +264,7 @@ stupid_life_analysis (f, nregs, file)\n   for (insn = last; insn; insn = PREV_INSN (insn))\n     {\n       register HARD_REG_SET *p = after_insn_hard_regs + INSN_SUID (insn);\n-      struct insn_chain *chain;\n+      struct insn_chain *chain = 0;\n \n       /* Copy the info in regs_live into the element of after_insn_hard_regs\n \t for the current position in the rtl code.  */"}, {"sha": "01e5aee43aaf112f30d10c1be91b84114a962b95", "filename": "gcc/unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Try to unroll loops, and split induction variables.\n-   Copyright (C) 1992, 93, 94, 95, 97, 98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-95, 97-99, 2000 Free Software Foundation, Inc.\n    Contributed by James E. Wilson, Cygnus Support/UC Berkeley.\n \n This file is part of GNU CC.\n@@ -1692,7 +1692,7 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n      rtx start_label, loop_end, insert_before, copy_notes_from;\n {\n   rtx insn, pattern;\n-  rtx set, tem, copy;\n+  rtx set, tem, copy = NULL_RTX;\n   int dest_reg_was_split, i;\n #ifdef HAVE_cc0\n   rtx cc0_insn = 0;"}, {"sha": "db94c0d8e0edbf18847a889c3c02e834f2922b99", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a544cfd20164c1c8513be05e1c1976c0fd005735/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a544cfd20164c1c8513be05e1c1976c0fd005735", "patch": "@@ -1,5 +1,5 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 92-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -4318,7 +4318,7 @@ output_constructor (exp, size)\n   int total_bytes = 0;\n   /* Non-zero means BYTE contains part of a byte, to be output.  */\n   int byte_buffer_in_use = 0;\n-  register int byte;\n+  register int byte = 0;\n \n   if (HOST_BITS_PER_WIDE_INT < BITS_PER_UNIT)\n     abort ();"}]}