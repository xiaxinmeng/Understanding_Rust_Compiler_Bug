{"sha": "b34c06e332d1360bf0761d089533602965c858e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM0YzA2ZTMzMmQxMzYwYmYwNzYxZDA4OTUzMzYwMjk2NWM4NThlMw==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2002-01-07T09:11:11Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2002-01-07T09:11:11Z"}, "message": "errors.c: Update copyright date.\n\n\n        * errors.c: Update copyright date.\n        (print_scope_operator): Add parenthesis.\n        (print_left_paren): Likewise.\n        (print_right_paren): Likewise.\n        (print_left_bracket): Likewise.\n        (print_right_bracket): Likewise.\n        (print_template_argument_list_start): Likewise.\n        (print_template_argument_list_end): Likewise.\n        (print_non_consecutive_character): Likewise.\n        (print_tree_identifier): Likewise.\n        (print_identifier): Likewise.\n        (NEXT_CODE): Uppercase macro parameter.\n        (ident_fndecl): Delete unused.\n        (GLOBAL_THING): Likewise.\n\nFrom-SVN: r48599", "tree": {"sha": "cee2ab980d0e5fb86c5ea9ee6ecd67fd25be3240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cee2ab980d0e5fb86c5ea9ee6ecd67fd25be3240"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b34c06e332d1360bf0761d089533602965c858e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b34c06e332d1360bf0761d089533602965c858e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b34c06e332d1360bf0761d089533602965c858e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b34c06e332d1360bf0761d089533602965c858e3/comments", "author": null, "committer": null, "parents": [{"sha": "d9a5f1807c4b954ec5c0d256838cbbcf784431b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a5f1807c4b954ec5c0d256838cbbcf784431b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a5f1807c4b954ec5c0d256838cbbcf784431b1"}], "stats": {"total": 72, "additions": 32, "deletions": 40}, "files": [{"sha": "d5a7c65145171e499bc6e6dc36b36ca70f60e459", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b34c06e332d1360bf0761d089533602965c858e3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b34c06e332d1360bf0761d089533602965c858e3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b34c06e332d1360bf0761d089533602965c858e3", "patch": "@@ -1,3 +1,20 @@\n+2002-01-07  Graham Stott  <grahams@redhat.com>\n+\n+        * error.c: Update copyright date.\n+        (print_scope_operator): Add parenthesis.\n+        (print_left_paren): Likewise.\n+        (print_right_paren): Likewise.\n+        (print_left_bracket): Likewise.\n+        (print_right_bracket): Likewise.\n+        (print_template_argument_list_start): Likewise.\n+        (print_template_argument_list_end): Likewise.\n+        (print_non_consecutive_character): Likewise.\n+        (print_tree_identifier): Likewise.\n+        (print_identifier): Likewise.\n+        (NEXT_CODE): Uppercase macro parameter.\n+        (ident_fndecl): Delete unused.\n+        (GLOBAL_THING): Likewise.\n+\n 2002-01-06  Graham Stott  <grahams@redhat.com>\n \n \t* cp-tree.h (VAR_OR_FUNCTION_DECL_CHECK): Add parenthesis.\n@@ -22,7 +39,7 @@\n \t(same_type_ignoring_top_level_qualifiers_p): Likewise.\n \t(OVL_FUNCTION): Wrap long line.\n \t(OVL_CHAIN): Whitespace.\n-\t(OVL_CURRENT): Add paranthesis and whitespace.\n+\t(OVL_CURRENT): Add parenthesis and whitespace.\n \t(OVL_NEXT): Whitespace.\n \t(OVL_USED): Likewise.\n \t(IDENTIFIER_TYPE_VALUE): Likewise.\n@@ -170,10 +187,10 @@\n         (TYPE_PTRMEMFUNC_FLAG): Likewise.\n         (TYPE_GET_PTRMEMFUNC_TYPE): Likewise.\n         (TYPE_SET_PTRMEMFUNC_TYPE): Likewise.\n-        (TYPE_PTRMEM_CLASS_TYPE): Remove paranthesis.\n+        (TYPE_PTRMEM_CLASS_TYPE): Remove parenthesis.\n         (TYPE_PTRMEM_POINTED_TO_TYPE): Likewise.\n         (DECL_ACCESS): Whitespace.\n-        (DECL_GLOBAL_CTOR_P): Remove paranthesis.\n+        (DECL_GLOBAL_CTOR_P): Remove parenthesis.\n         (DECL_GLOBAL_DTOR_P): Likewise.\n         (GLOBAL_INIT_PRIORITY): Likewise.\n \t(DECL_TEMPLATE_PARMS): Likewise."}, {"sha": "21a171f874d15c25b7a662ffd9451b39b3be727b", "filename": "gcc/cp/error.c", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b34c06e332d1360bf0761d089533602965c858e3/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b34c06e332d1360bf0761d089533602965c858e3/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=b34c06e332d1360bf0761d089533602965c858e3", "patch": "@@ -1,6 +1,6 @@\n /* Call-backs for C++ error reporting.\n    This code is non-reentrant.\n-   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2002\n    Free Software Foundation, Inc.\n    This file is part of GNU CC.\n \n@@ -35,32 +35,32 @@ enum pad { none, before, after };\n    sorry (\"`%s' not supported by %s\", tree_code_name[(int) TREE_CODE (T)], \\\n              __FUNCTION__)\n \n-#define print_scope_operator(BUFFER)  output_add_string (BUFFER, \"::\")\n-#define print_left_paren(BUFFER)      output_add_character (BUFFER, '(')\n-#define print_right_paren(BUFFER)     output_add_character (BUFFER, ')')\n-#define print_left_bracket(BUFFER)    output_add_character (BUFFER, '[')\n-#define print_right_bracket(BUFFER)   output_add_character (BUFFER, ']')\n+#define print_scope_operator(BUFFER)  output_add_string ((BUFFER), \"::\")\n+#define print_left_paren(BUFFER)      output_add_character ((BUFFER), '(')\n+#define print_right_paren(BUFFER)     output_add_character ((BUFFER), ')')\n+#define print_left_bracket(BUFFER)    output_add_character ((BUFFER), '[')\n+#define print_right_bracket(BUFFER)   output_add_character ((BUFFER), ']')\n #define print_template_argument_list_start(BUFFER) \\\n-   print_non_consecutive_character (BUFFER, '<')\n+   print_non_consecutive_character ((BUFFER), '<')\n #define print_template_argument_list_end(BUFFER)  \\\n-   print_non_consecutive_character (BUFFER, '>')\n+   print_non_consecutive_character ((BUFFER), '>')\n #define print_whitespace(BUFFER, TFI)        \\\n    do {                                      \\\n      output_add_space (BUFFER);              \\\n      put_whitespace (TFI) = none;            \\\n    } while (0)\n #define print_tree_identifier(BUFFER, TID) \\\n-   output_add_string (BUFFER, IDENTIFIER_POINTER (TID))\n-#define print_identifier(BUFFER, ID) output_add_string (BUFFER, ID)\n-#define separate_with_comma(BUFFER) output_add_string (BUFFER, \", \")\n+   output_add_string ((BUFFER), IDENTIFIER_POINTER (TID))\n+#define print_identifier(BUFFER, ID) output_add_string ((BUFFER), (ID))\n+#define separate_with_comma(BUFFER) output_add_string ((BUFFER), \", \")\n \n /* The global buffer where we dump everything.  It is there only for\n    transitional purpose.  It is expected, in the near future, to be\n    completely removed.  */\n static output_buffer scratch_buffer_rec;\n static output_buffer *scratch_buffer = &scratch_buffer_rec;\n \n-# define NEXT_CODE(t) (TREE_CODE (TREE_TYPE (t)))\n+# define NEXT_CODE(T) (TREE_CODE (TREE_TYPE (T)))\n \n #define reinit_global_formatting_buffer() \\\n    output_clear_message_text (scratch_buffer)\n@@ -96,7 +96,6 @@ static void dump_char PARAMS ((int));\n static void dump_parameters PARAMS ((tree, int));\n static void dump_exception_spec PARAMS ((tree, int));\n static const char *class_key_or_enum PARAMS ((tree));\n-static tree ident_fndecl PARAMS ((tree));\n static void dump_template_argument PARAMS ((tree, int));\n static void dump_template_argument_list PARAMS ((tree, int));\n static void dump_template_parameter PARAMS ((tree, int));\n@@ -793,30 +792,6 @@ dump_type_suffix (t, flags)\n     }\n }\n \n-/* Return a function declaration which corresponds to the IDENTIFIER_NODE\n-   argument.  */\n-\n-static tree\n-ident_fndecl (t)\n-     tree t;\n-{\n-  tree n = lookup_name (t, 0);\n-\n-  if (n == NULL_TREE)\n-    return NULL_TREE;\n-\n-  if (TREE_CODE (n) == FUNCTION_DECL)\n-    return n;\n-  else if (TREE_CODE (n) == TREE_LIST\n-\t   && TREE_CODE (TREE_VALUE (n)) == FUNCTION_DECL)\n-    return TREE_VALUE (n);\n-\n-  my_friendly_abort (66);\n-  return NULL_TREE;\n-}\n-\n-#define GLOBAL_THING \"_GLOBAL__\"\n-\n static void\n dump_global_iord (t)\n      tree t;"}]}