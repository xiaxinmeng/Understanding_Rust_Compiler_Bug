{"sha": "8f20c485050d550ccca1f4f4ed05ffd249c57c5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyMGM0ODUwNTBkNTUwY2NjYTFmNGY0ZWQwNWZmZDI0OWM1N2M1Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-07-12T10:27:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-07-12T10:27:51Z"}, "message": "gimplify.c (gimplify_conversion): Make sure that the result from maybe_fold_offset_to_reference is trivially...\n\n2007-07-12  Richard Guenther  <rguenther@suse.de>\n\n\t* gimplify.c (gimplify_conversion): Make sure that the result\n\tfrom maybe_fold_offset_to_reference is trivially convertible\n\tto the desired type before doing the simplification.\n\t(gimplify_expr): Likewise.\n\t* fold-const.c (fold_binary): Use the correct types for\n\tbuilding the simplified expression.\n\nFrom-SVN: r126577", "tree": {"sha": "b01916e56bf1aadf986d4b4a11b1a17c5a1f24f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b01916e56bf1aadf986d4b4a11b1a17c5a1f24f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f20c485050d550ccca1f4f4ed05ffd249c57c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f20c485050d550ccca1f4f4ed05ffd249c57c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f20c485050d550ccca1f4f4ed05ffd249c57c5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f20c485050d550ccca1f4f4ed05ffd249c57c5f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44f51d597ed4102d6da3bd4cf631c5031b21c975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f51d597ed4102d6da3bd4cf631c5031b21c975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f51d597ed4102d6da3bd4cf631c5031b21c975"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "13c869f8fcc7705c6aa49e6ea984041d3736d3ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f20c485050d550ccca1f4f4ed05ffd249c57c5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f20c485050d550ccca1f4f4ed05ffd249c57c5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f20c485050d550ccca1f4f4ed05ffd249c57c5f", "patch": "@@ -1,3 +1,12 @@\n+2007-07-12  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimplify.c (gimplify_conversion): Make sure that the result\n+\tfrom maybe_fold_offset_to_reference is trivially convertible\n+\tto the desired type before doing the simplification.\n+\t(gimplify_expr): Likewise.\n+\t* fold-const.c (fold_binary): Use the correct types for\n+\tbuilding the simplified expression.\n+\n 2007-07-12  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR rtl-optimization/32729"}, {"sha": "bff47251c8acdf29f3590fa8fcd5ddc52655432f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f20c485050d550ccca1f4f4ed05ffd249c57c5f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f20c485050d550ccca1f4f4ed05ffd249c57c5f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8f20c485050d550ccca1f4f4ed05ffd249c57c5f", "patch": "@@ -10271,7 +10271,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       if (integer_zerop (arg1))\n \treturn non_lvalue (fold_convert (type, arg0));\n       if (integer_all_onesp (arg1))\n-\treturn fold_build1 (BIT_NOT_EXPR, type, arg0);\n+\treturn fold_build1 (BIT_NOT_EXPR, type, op0);\n       if (operand_equal_p (arg0, arg1, 0))\n \treturn omit_one_operand (type, integer_zero_node, arg0);\n \n@@ -10865,7 +10865,8 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t\t    \"when distributing negation across \"\n \t\t\t\t    \"division\"),\n \t\t\t\t   WARN_STRICT_OVERFLOW_MISC);\n-\t  return fold_build2 (code, type, TREE_OPERAND (arg0, 0),\n+\t  return fold_build2 (code, type,\n+\t\t\t      fold_convert (type, TREE_OPERAND (arg0, 0)),\n \t\t\t      negate_expr (arg1));\n \t}\n       if ((!INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_UNDEFINED (type))"}, {"sha": "12ed309538b1395952ae98031c83db4bbbac79dd", "filename": "gcc/gimplify.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f20c485050d550ccca1f4f4ed05ffd249c57c5f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f20c485050d550ccca1f4f4ed05ffd249c57c5f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8f20c485050d550ccca1f4f4ed05ffd249c57c5f", "patch": "@@ -1648,7 +1648,11 @@ gimplify_conversion (tree *expr_p)\n       && (tem = maybe_fold_offset_to_reference\n \t\t  (TREE_OPERAND (*expr_p, 0),\n \t\t   integer_zero_node, TREE_TYPE (TREE_TYPE (*expr_p)))))\n-    *expr_p = build_fold_addr_expr_with_type (tem, TREE_TYPE (*expr_p));\n+    {\n+      tree ptr_type = build_pointer_type (TREE_TYPE (tem));\n+      if (useless_type_conversion_p (TREE_TYPE (*expr_p), ptr_type))\n+        *expr_p = build_fold_addr_expr_with_type (tem, ptr_type);\n+    }\n \n   /* If we still have a conversion at the toplevel,\n      then canonicalize some constructs.  */\n@@ -5987,9 +5991,12 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t\t\t (TREE_OPERAND (*expr_p, 0), TREE_OPERAND (*expr_p, 1),\n \t\t   \t  TREE_TYPE (TREE_TYPE (*expr_p)))))\n \t     {\n-               *expr_p = build_fold_addr_expr_with_type (tmp,\n-\t\t\t\t\t\t\t TREE_TYPE (*expr_p));\n-\t       break;\n+\t       tree ptr_type = build_pointer_type (TREE_TYPE (tmp));\n+\t       if (useless_type_conversion_p (TREE_TYPE (*expr_p), ptr_type))\n+\t\t {\n+                   *expr_p = build_fold_addr_expr_with_type (tmp, ptr_type);\n+\t\t   break;\n+\t\t }\n \t     }\n \t  /* Convert (void *)&a + 4 into (void *)&a[1].  */\n \t  if (TREE_CODE (TREE_OPERAND (*expr_p, 0)) == NOP_EXPR"}]}