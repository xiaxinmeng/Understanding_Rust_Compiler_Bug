{"sha": "525c6bf5a6b91fa09f57b79bad9737ab3733601d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI1YzZiZjVhNmI5MWZhMDlmNTdiNzliYWQ5NzM3YWIzNzMzNjAxZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-27T00:27:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-27T00:27:24Z"}, "message": "tree.c (staticp): Return the static object.\n\n        * tree.c (staticp): Return the static object.\n        * tree.h (staticp): Update decl.\n        * langhooks.h (struct lang_hooks): Change staticp return type to tree.\n        * langhooks.c (lhd_staticp): Return NULL_TREE.\n        * langhooks-def.h (lhd_staticp): Update decl.\n        * c-common.c (c_staticp): Return the static object.\n        * c-common.h (c_staticp): Update decl.\n\nFrom-SVN: r86650", "tree": {"sha": "1e34e5e9ca494cf80b9eeedaeeb9ab699cb921c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e34e5e9ca494cf80b9eeedaeeb9ab699cb921c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/525c6bf5a6b91fa09f57b79bad9737ab3733601d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525c6bf5a6b91fa09f57b79bad9737ab3733601d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/525c6bf5a6b91fa09f57b79bad9737ab3733601d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525c6bf5a6b91fa09f57b79bad9737ab3733601d/comments", "author": null, "committer": null, "parents": [{"sha": "81d1fb087780b62dbbb3994dfeeb93f76a9773cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d1fb087780b62dbbb3994dfeeb93f76a9773cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d1fb087780b62dbbb3994dfeeb93f76a9773cc"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "cf1dc09c719cee9e6410c9258c1118ca4982e5f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=525c6bf5a6b91fa09f57b79bad9737ab3733601d", "patch": "@@ -1,3 +1,13 @@\n+2004-08-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree.c (staticp): Return the static object.\n+\t* tree.h (staticp): Update decl.\n+\t* langhooks.h (struct lang_hooks): Change staticp return type to tree.\n+\t* langhooks.c (lhd_staticp): Return NULL_TREE.\n+\t* langhooks-def.h (lhd_staticp): Update decl.\n+\t* c-common.c (c_staticp): Return the static object.\n+\t* c-common.h (c_staticp): Update decl.\n+\n 2004-08-26  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.h (HARD_REGNO_MODE_OK): Allow complex float"}, {"sha": "8b7ee2c94eac2e55b44f94d787eb1df985f7e54e", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=525c6bf5a6b91fa09f57b79bad9737ab3733601d", "patch": "@@ -3828,13 +3828,12 @@ c_expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \n /* Hook used by staticp to handle language-specific tree codes.  */\n \n-bool\n+tree\n c_staticp (tree exp)\n {\n-  if (TREE_CODE (exp) == COMPOUND_LITERAL_EXPR\n-      && TREE_STATIC (COMPOUND_LITERAL_EXPR_DECL (exp)))\n-    return true;\n-  return false;\n+  return (TREE_CODE (exp) == COMPOUND_LITERAL_EXPR\n+\t  && TREE_STATIC (COMPOUND_LITERAL_EXPR_DECL (exp))\n+\t  ? exp : NULL);\n }\n \f\n "}, {"sha": "94f3249b21bc69a869d239369b6086eef38df5cd", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=525c6bf5a6b91fa09f57b79bad9737ab3733601d", "patch": "@@ -840,7 +840,7 @@ extern int vector_types_convertible_p (tree t1, tree t2);\n \n extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n \n-extern bool c_staticp (tree);\n+extern tree c_staticp (tree);\n \n extern int c_common_unsafe_for_reeval (tree);\n "}, {"sha": "087fe419dae8389083a84b291966aeb910febb21", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=525c6bf5a6b91fa09f57b79bad9737ab3733601d", "patch": "@@ -50,7 +50,7 @@ extern tree lhd_return_null_tree_v (void);\n extern tree lhd_return_null_tree (tree);\n extern tree lhd_do_nothing_iii_return_null_tree (int, int, int);\n extern int lhd_safe_from_p (rtx, tree);\n-extern bool lhd_staticp (tree);\n+extern tree lhd_staticp (tree);\n extern void lhd_print_tree_nothing (FILE *, tree, int);\n extern const char *lhd_decl_printable_name (tree, int);\n extern int lhd_types_compatible_p (tree, tree);"}, {"sha": "9f0a236e8d3d3cb5576542498edf632a67f46fdd", "filename": "gcc/langhooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=525c6bf5a6b91fa09f57b79bad9737ab3733601d", "patch": "@@ -125,10 +125,10 @@ lhd_safe_from_p (rtx ARG_UNUSED (x), tree ARG_UNUSED (exp))\n \n /* Called from staticp.  */\n \n-bool\n+tree\n lhd_staticp (tree ARG_UNUSED (exp))\n {\n-  return false;\n+  return NULL;\n }\n \n /* Called from check_global_declarations.  */"}, {"sha": "98532521e5e7a3c9ce893823f63ae4ee4add80a5", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=525c6bf5a6b91fa09f57b79bad9737ab3733601d", "patch": "@@ -299,7 +299,7 @@ struct lang_hooks\n   bool (*mark_addressable) (tree);\n \n   /* Hook called by staticp for language-specific tree codes.  */\n-  bool (*staticp) (tree);\n+  tree (*staticp) (tree);\n \n   /* Replace the DECL_LANG_SPECIFIC data, which may be NULL, of the\n      DECL_NODE with a newly GC-allocated copy.  */"}, {"sha": "27efff1d49ff83abc4b59d58bb6eda64954f1b4c", "filename": "gcc/tree.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=525c6bf5a6b91fa09f57b79bad9737ab3733601d", "patch": "@@ -1366,7 +1366,7 @@ array_type_nelts (tree type)\n /* Return true if arg is static -- a reference to an object in\n    static storage.  This is not the same as the C meaning of `static'.  */\n \n-bool\n+tree\n staticp (tree arg)\n {\n   switch (TREE_CODE (arg))\n@@ -1375,19 +1375,21 @@ staticp (tree arg)\n       /* Nested functions aren't static, since taking their address\n \t involves a trampoline.  */\n       return ((decl_function_context (arg) == 0 || DECL_NO_STATIC_CHAIN (arg))\n-\t      && ! DECL_NON_ADDR_CONST_P (arg));\n+\t      && ! DECL_NON_ADDR_CONST_P (arg)\n+\t      ? arg : NULL);\n \n     case VAR_DECL:\n       return ((TREE_STATIC (arg) || DECL_EXTERNAL (arg))\n \t      && ! DECL_THREAD_LOCAL (arg)\n-\t      && ! DECL_NON_ADDR_CONST_P (arg));\n+\t      && ! DECL_NON_ADDR_CONST_P (arg)\n+\t      ? arg : NULL);\n \n     case CONSTRUCTOR:\n-      return TREE_STATIC (arg);\n+      return TREE_STATIC (arg) ? arg : NULL;\n \n     case LABEL_DECL:\n     case STRING_CST:\n-      return true;\n+      return arg;\n \n     case COMPONENT_REF:\n       /* If the thing being referenced is not a field, then it is\n@@ -1398,20 +1400,15 @@ staticp (tree arg)\n       /* If we are referencing a bitfield, we can't evaluate an\n \t ADDR_EXPR at compile time and so it isn't a constant.  */\n       if (DECL_BIT_FIELD (TREE_OPERAND (arg, 1)))\n-\treturn false;\n+\treturn NULL;\n \n       return staticp (TREE_OPERAND (arg, 0));\n \n     case BIT_FIELD_REF:\n-      return false;\n+      return NULL;\n \n-#if 0\n-       /* This case is technically correct, but results in setting\n-\t  TREE_CONSTANT on ADDR_EXPRs that cannot be evaluated at\n-\t  compile time.  */\n     case INDIRECT_REF:\n-      return TREE_CONSTANT (TREE_OPERAND (arg, 0));\n-#endif\n+      return TREE_CONSTANT (TREE_OPERAND (arg, 0)) ? arg : NULL;\n \n     case ARRAY_REF:\n     case ARRAY_RANGE_REF:\n@@ -1426,7 +1423,7 @@ staticp (tree arg)\n \t  >= (unsigned int) LAST_AND_UNUSED_TREE_CODE)\n \treturn lang_hooks.staticp (arg);\n       else\n-\treturn false;\n+\treturn NULL;\n     }\n }\n \f"}, {"sha": "bc0b1418e66728a9e4bacaa29fafc939522a9d15", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525c6bf5a6b91fa09f57b79bad9737ab3733601d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=525c6bf5a6b91fa09f57b79bad9737ab3733601d", "patch": "@@ -3184,10 +3184,10 @@ extern int integer_pow2p (tree);\n \n extern int integer_nonzerop (tree);\n \n-/* staticp (tree x) is true if X is a reference to data allocated\n-   at a fixed address in memory.  */\n+/* staticp (tree x) is nonzero if X is a reference to data allocated\n+   at a fixed address in memory.  Returns the outermost data.  */\n \n-extern bool staticp (tree);\n+extern tree staticp (tree);\n \n /* save_expr (EXP) returns an expression equivalent to EXP\n    but it can be used multiple times within context CTX"}]}