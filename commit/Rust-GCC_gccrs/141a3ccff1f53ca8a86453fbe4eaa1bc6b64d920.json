{"sha": "141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQxYTNjY2ZmMWY1M2NhOGE4NjQ1M2ZiZTRlYWExYmM2YjY0ZDkyMA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-11-17T14:25:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-11-17T14:25:30Z"}, "message": "[AArch64] Expand DImode constant stores to two SImode stores when profitable\n\n\t* config/aarch64/aarch64.md (mov<mode>): Call\n\taarch64_split_dimode_const_store on DImode constant stores.\n\t* config/aarch64/aarch64-protos.h (aarch64_split_dimode_const_store):\n\tNew prototype.\n\t* config/aarch64/aarch64.c (aarch64_split_dimode_const_store): New\n\tfunction.\n\n\t* gcc.target/aarch64/store_repeating_constant_1.c: New test.\n\t* gcc.target/aarch64/store_repeating_constant_2.c: Likewise.\n\nFrom-SVN: r242551", "tree": {"sha": "70048b62883e572701b22d82dc04e95b4620e50b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70048b62883e572701b22d82dc04e95b4620e50b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54e63f002885fb595f17f39998e93bb9fc23a49d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e63f002885fb595f17f39998e93bb9fc23a49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e63f002885fb595f17f39998e93bb9fc23a49d"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "f69f911e4811327014eb9f92be4b180229a759d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "patch": "@@ -1,3 +1,12 @@\n+2016-11-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (mov<mode>): Call\n+\taarch64_split_dimode_const_store on DImode constant stores.\n+\t* config/aarch64/aarch64-protos.h (aarch64_split_dimode_const_store):\n+\tNew prototype.\n+\t* config/aarch64/aarch64.c (aarch64_split_dimode_const_store): New\n+\tfunction.\n+\n 2016-11-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n             Richard Biener  <rguenther@suse.de>\n "}, {"sha": "b6ca3dfacb0dc88e5d688905d9d013263d4e8d7f", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "patch": "@@ -337,6 +337,7 @@ bool aarch64_simd_scalar_immediate_valid_for_move (rtx, machine_mode);\n bool aarch64_simd_shift_imm_p (rtx, machine_mode, bool);\n bool aarch64_simd_valid_immediate (rtx, machine_mode, bool,\n \t\t\t\t   struct simd_immediate_info *);\n+bool aarch64_split_dimode_const_store (rtx, rtx);\n bool aarch64_symbolic_address_p (rtx);\n bool aarch64_uimm12_shift (HOST_WIDE_INT);\n bool aarch64_use_return_insn_p (void);"}, {"sha": "e5ca5eb0ad77ad47b52f70c1b8af98da83251e2c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "patch": "@@ -13211,6 +13211,63 @@ aarch64_expand_movmem (rtx *operands)\n   return true;\n }\n \n+/* Split a DImode store of a CONST_INT SRC to MEM DST as two\n+   SImode stores.  Handle the case when the constant has identical\n+   bottom and top halves.  This is beneficial when the two stores can be\n+   merged into an STP and we avoid synthesising potentially expensive\n+   immediates twice.  Return true if such a split is possible.  */\n+\n+bool\n+aarch64_split_dimode_const_store (rtx dst, rtx src)\n+{\n+  rtx lo = gen_lowpart (SImode, src);\n+  rtx hi = gen_highpart_mode (SImode, DImode, src);\n+\n+  bool size_p = optimize_function_for_size_p (cfun);\n+\n+  if (!rtx_equal_p (lo, hi))\n+    return false;\n+\n+  unsigned int orig_cost\n+    = aarch64_internal_mov_immediate (NULL_RTX, src, false, DImode);\n+  unsigned int lo_cost\n+    = aarch64_internal_mov_immediate (NULL_RTX, lo, false, SImode);\n+\n+  /* We want to transform:\n+     MOV\tx1, 49370\n+     MOVK\tx1, 0x140, lsl 16\n+     MOVK\tx1, 0xc0da, lsl 32\n+     MOVK\tx1, 0x140, lsl 48\n+     STR\tx1, [x0]\n+   into:\n+     MOV\tw1, 49370\n+     MOVK\tw1, 0x140, lsl 16\n+     STP\tw1, w1, [x0]\n+   So we want to perform this only when we save two instructions\n+   or more.  When optimizing for size, however, accept any code size\n+   savings we can.  */\n+  if (size_p && orig_cost <= lo_cost)\n+    return false;\n+\n+  if (!size_p\n+      && (orig_cost <= lo_cost + 1))\n+    return false;\n+\n+  rtx mem_lo = adjust_address (dst, SImode, 0);\n+  if (!aarch64_mem_pair_operand (mem_lo, SImode))\n+    return false;\n+\n+  rtx tmp_reg = gen_reg_rtx (SImode);\n+  aarch64_expand_mov_immediate (tmp_reg, lo);\n+  rtx mem_hi = aarch64_move_pointer (mem_lo, GET_MODE_SIZE (SImode));\n+  /* Don't emit an explicit store pair as this may not be always profitable.\n+     Let the sched-fusion logic decide whether to merge them.  */\n+  emit_move_insn (mem_lo, tmp_reg);\n+  emit_move_insn (mem_hi, tmp_reg);\n+\n+  return true;\n+}\n+\n /* Implement the TARGET_ASAN_SHADOW_OFFSET hook.  */\n \n static unsigned HOST_WIDE_INT"}, {"sha": "5089ccf047c9ab873ad2c77869b0b8d743df15e7", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "patch": "@@ -1011,6 +1011,11 @@\n \t(match_operand:GPI 1 \"general_operand\" \"\"))]\n   \"\"\n   \"\n+    if (MEM_P (operands[0]) && CONST_INT_P (operands[1])\n+\t&& <MODE>mode == DImode\n+\t&& aarch64_split_dimode_const_store (operands[0], operands[1]))\n+      DONE;\n+\n     if (GET_CODE (operands[0]) == MEM && operands[1] != const0_rtx)\n       operands[1] = force_reg (<MODE>mode, operands[1]);\n "}, {"sha": "77fa771ab179a5183a6fb49dd2e20acbddde2a3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "patch": "@@ -1,3 +1,8 @@\n+2016-11-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/store_repeating_constant_1.c: New test.\n+\t* gcc.target/aarch64/store_repeating_constant_2.c: Likewise.\n+\n 2016-11-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n             Richard Biener  <rguenther@suse.de>\n "}, {"sha": "50d456834bcea10760f6cccecc89e3c21f53bb4c", "filename": "gcc/testsuite/gcc.target/aarch64/store_repeating_constant_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_repeating_constant_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_repeating_constant_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_repeating_constant_1.c?ref=141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+void\n+foo (unsigned long long *a)\n+{\n+  a[0] = 0x0140c0da0140c0daULL;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movk\\\\tw.*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stp\\tw\\[0-9\\]+, w\\[0-9\\]+.*\" 1 } } */"}, {"sha": "c421277989adcf446ad8a7b3ab9060602c03a7ea", "filename": "gcc/testsuite/gcc.target/aarch64/store_repeating_constant_2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_repeating_constant_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_repeating_constant_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_repeating_constant_2.c?ref=141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+/* Check that for -Os we synthesize only the bottom half and then\n+   store it twice with an STP rather than synthesizing it twice in each\n+   half of an X-reg.  */\n+\n+void\n+foo (unsigned long long *a)\n+{\n+  a[0] = 0xc0da0000c0daULL;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mov\\\\tw.*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stp\\tw\\[0-9\\]+, w\\[0-9\\]+.*\" 1 } } */"}]}