{"sha": "e9e7f1810975cff7ce1fe93b1179c8dad7665f17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllN2YxODEwOTc1Y2ZmN2NlMWZlOTNiMTE3OWM4ZGFkNzY2NWYxNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-29T19:00:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-29T19:00:46Z"}, "message": "dump.c (dequeue_and_dump): Improve support for dumping THUNK_DECLs.\n\n\t* dump.c (dequeue_and_dump): Improve support for dumping THUNK_DECLs.\n\t* ir.texi: Document THUNK_DECLs.\n\nFrom-SVN: r29709", "tree": {"sha": "ffc0ad482abd24ddffe411f2de4ad559d7beaec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffc0ad482abd24ddffe411f2de4ad559d7beaec7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9e7f1810975cff7ce1fe93b1179c8dad7665f17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e7f1810975cff7ce1fe93b1179c8dad7665f17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e7f1810975cff7ce1fe93b1179c8dad7665f17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e7f1810975cff7ce1fe93b1179c8dad7665f17/comments", "author": null, "committer": null, "parents": [{"sha": "b5ac18ea8c1365118cfee58840ff738b0de67b5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ac18ea8c1365118cfee58840ff738b0de67b5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ac18ea8c1365118cfee58840ff738b0de67b5e"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "7a70093738178ee6e9111124c2419414267c06f1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e7f1810975cff7ce1fe93b1179c8dad7665f17/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e7f1810975cff7ce1fe93b1179c8dad7665f17/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e9e7f1810975cff7ce1fe93b1179c8dad7665f17", "patch": "@@ -1,5 +1,8 @@\n 1999-09-29  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* dump.c (dequeue_and_dump): Improve support for dumping THUNK_DECLs.\n+\t* ir.texi: Document THUNK_DECLs.\n+\n \t* cp-tree.h (TMPL_ARGS_HAVE_MULTIPLE_LEVELS): Move here from pt.c.\n \t(TMPL_ARGS_DEPTH, TMPL_ARGS_LEVEL, SET_TMPL_ARGS_LEVEL): Likewise.\n \t(TMPL_ARG, SET_TMPL_ARG, NUM_TMPL_ARGS, TMPL_PARMS_DEPTH): Likewise."}, {"sha": "845a467663bdeb018203ea92b7d32ac7fd1005be", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e7f1810975cff7ce1fe93b1179c8dad7665f17/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e7f1810975cff7ce1fe93b1179c8dad7665f17/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=e9e7f1810975cff7ce1fe93b1179c8dad7665f17", "patch": "@@ -600,6 +600,7 @@ dequeue_and_dump (di)\n       break;\n \n     case FUNCTION_DECL:\n+    case THUNK_DECL:\n       if (dump_children_p)\n \t{\n \t  queue_and_dump_index (di, \"scpe\", DECL_REAL_CONTEXT (t), 0);\n@@ -610,18 +611,26 @@ dequeue_and_dump (di)\n \tdump_string(di, \"extern\");\n       else\n \tdump_string (di, \"static\");\n-      if (DECL_FUNCTION_MEMBER_P (t))\n-\tdump_string (di, \"member\");\n-      if (DECL_CONSTRUCTOR_P (t))\n-\tdump_string (di, \"constructor\");\n-      if (DECL_DESTRUCTOR_P (t))\n-\tdump_string (di, \"destructor\");\n-      if (DECL_OVERLOADED_OPERATOR_P (t))\n-\tdump_string (di, \"operator\");\n-      if (DECL_CONV_FN_P (t))\n-\tdump_string (di, \"conversion\");\n-      if (dump_children_p)\n-\tdump_child (\"body\", DECL_SAVED_TREE (t));\n+      if (TREE_CODE (t) == FUNCTION_DECL)\n+\t{\n+\t  if (DECL_FUNCTION_MEMBER_P (t))\n+\t    dump_string (di, \"member\");\n+\t  if (DECL_CONSTRUCTOR_P (t))\n+\t    dump_string (di, \"constructor\");\n+\t  if (DECL_DESTRUCTOR_P (t))\n+\t    dump_string (di, \"destructor\");\n+\t  if (DECL_OVERLOADED_OPERATOR_P (t))\n+\t    dump_string (di, \"operator\");\n+\t  if (DECL_CONV_FN_P (t))\n+\t    dump_string (di, \"conversion\");\n+\t  if (dump_children_p)\n+\t    dump_child (\"body\", DECL_SAVED_TREE (t));\n+\t}\n+      else\n+\t{\n+\t  dump_int (di, \"dlta\", THUNK_DELTA (t));\n+\t  dump_child (\"init\", DECL_INITIAL (t));\n+\t}\n       break;\n \n     case NAMESPACE_DECL:"}, {"sha": "a198fc9c7ec8c7e5914b83b804dc88e51e8faba1", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e7f1810975cff7ce1fe93b1179c8dad7665f17/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e7f1810975cff7ce1fe93b1179c8dad7665f17/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=e9e7f1810975cff7ce1fe93b1179c8dad7665f17", "patch": "@@ -733,6 +733,8 @@ FIXME: Talk about @code{TYPE_NONCOPIED_PARTS}.\n @tindex NAMESPACE_DECL\n @tindex RESULT_DECL\n @tindex TEMPLATE_DECL\n+@tindex THUNK_DECL\n+@findex THUNK_DELTA\n @tindex USING_DECL\n @findex DECL_INITIAL\n @findex DECL_SIZE\n@@ -855,6 +857,21 @@ can safely ignore @code{TEMPLATE_DECL}s, but should examine\n @code{FUNCTION_DECL} nodes on the specializations list just as they\n would ordinary @code{FUNCTION_DECL} nodes.\n \n+@item THUNK_DECL\n+\n+These nodes represent stub code that adjusts the @code{this} pointer and\n+then jumps to another function.  When the jumped-to function returns,\n+control is transferred directly to the caller, without returning to the\n+thunk.  The first parameter to the thunk is always the @code{this}\n+pointer; the thunk should add @code{THUNK_DELTA} to this value.  (The\n+@code{THUNK_DECL} is an @code{int}, not an @code{INTEGER_CST}.)  Then,\n+the thunk should jump to the location given by @code{DECL_INITIAL}; this\n+will always be an expression for the address of a function.  \n+\n+You can use @code{DECL_ASSEMBLER_NAME}, @code{TREE_PUBLIC}, and\n+@code{DECL_ARGUMENTS} with a @code{THUNK_DECL}, just as with a\n+@code{FUNCTION_DECL}.\n+\n @item USING_DECL\n \n Back-ends can safely ignore these nodes.\n@@ -870,7 +887,8 @@ Back-ends can safely ignore these nodes.\n @cindex function\n @tindex FUNCTION_DECL\n @tindex OVERLOAD\n-@findex OVL_\n+@findex OVL_CURRENT\n+@findex OVL_NEXT\n \n A function is represented by a @code{FUNCTION_DECL} node.  A set of\n overloaded functions is sometimes represented by a @code{OVERLOAD} node."}]}