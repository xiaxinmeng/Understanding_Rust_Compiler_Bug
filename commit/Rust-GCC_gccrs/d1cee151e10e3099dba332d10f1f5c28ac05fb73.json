{"sha": "d1cee151e10e3099dba332d10f1f5c28ac05fb73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFjZWUxNTFlMTBlMzA5OWRiYTMzMmQxMGYxZjVjMjhhYzA1ZmI3Mw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-10T12:51:33Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-10T12:54:20Z"}, "message": "arm: MVE: Convert vcmp[eq|ne]* in arm_mve.h to use only 's' builtin version\n\nThere is no need to have a signed and an unsigned version of these\nbuiltins. This is similar to what we do for Neon in arm_neon.h.\nThis mechanical patch enables later cleanup patches.\n\n2021-05-10  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/arm_mve.h (__arm_vcmpeq*u*, __arm_vcmpne*u*): Call\n\tthe 's' version of the builtin.", "tree": {"sha": "d6964238ce87ba4982d4f5470d067caaf1c8747d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6964238ce87ba4982d4f5470d067caaf1c8747d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1cee151e10e3099dba332d10f1f5c28ac05fb73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1cee151e10e3099dba332d10f1f5c28ac05fb73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1cee151e10e3099dba332d10f1f5c28ac05fb73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1cee151e10e3099dba332d10f1f5c28ac05fb73/comments", "author": null, "committer": null, "parents": [{"sha": "9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "e4dfe91f0ee8db27a7a288de71fad5b64234c632", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cee151e10e3099dba332d10f1f5c28ac05fb73/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cee151e10e3099dba332d10f1f5c28ac05fb73/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=d1cee151e10e3099dba332d10f1f5c28ac05fb73", "patch": "@@ -3695,21 +3695,21 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_mve_vcmpneq_uv16qi (__a, __b);\n+  return __builtin_mve_vcmpneq_sv16qi ((int8x16_t)__a, (int8x16_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return __builtin_mve_vcmpneq_uv8hi (__a, __b);\n+  return __builtin_mve_vcmpneq_sv8hi ((int16x8_t)__a, (int16x8_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return __builtin_mve_vcmpneq_uv4si (__a, __b);\n+  return __builtin_mve_vcmpneq_sv4si ((int32x4_t)__a, (int32x4_t)__b);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -3932,7 +3932,7 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_n_u8 (uint8x16_t __a, uint8_t __b)\n {\n-  return __builtin_mve_vcmpneq_n_uv16qi (__a, __b);\n+  return __builtin_mve_vcmpneq_n_sv16qi ((int8x16_t)__a, (int8_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n@@ -3953,14 +3953,14 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_mve_vcmpeqq_uv16qi (__a, __b);\n+  return __builtin_mve_vcmpeqq_sv16qi ((int8x16_t)__a, (int8x16_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_n_u8 (uint8x16_t __a, uint8_t __b)\n {\n-  return __builtin_mve_vcmpeqq_n_uv16qi (__a, __b);\n+  return __builtin_mve_vcmpeqq_n_sv16qi ((int8x16_t)__a, (int8_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n@@ -4774,7 +4774,7 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_n_u16 (uint16x8_t __a, uint16_t __b)\n {\n-  return __builtin_mve_vcmpneq_n_uv8hi (__a, __b);\n+  return __builtin_mve_vcmpneq_n_sv8hi ((int16x8_t)__a, (int16_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n@@ -4795,14 +4795,14 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return __builtin_mve_vcmpeqq_uv8hi (__a, __b);\n+  return __builtin_mve_vcmpeqq_sv8hi ((int16x8_t)__a, (int16x8_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_n_u16 (uint16x8_t __a, uint16_t __b)\n {\n-  return __builtin_mve_vcmpeqq_n_uv8hi (__a, __b);\n+  return __builtin_mve_vcmpeqq_n_sv8hi ((int16x8_t)__a, (int16_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n@@ -5616,7 +5616,7 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_n_u32 (uint32x4_t __a, uint32_t __b)\n {\n-  return __builtin_mve_vcmpneq_n_uv4si (__a, __b);\n+  return __builtin_mve_vcmpneq_n_sv4si ((int32x4_t)__a, (int32_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n@@ -5637,14 +5637,14 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return __builtin_mve_vcmpeqq_uv4si (__a, __b);\n+  return __builtin_mve_vcmpeqq_sv4si ((int32x4_t)__a, (int32x4_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_n_u32 (uint32x4_t __a, uint32_t __b)\n {\n-  return __builtin_mve_vcmpeqq_n_uv4si (__a, __b);\n+  return __builtin_mve_vcmpeqq_n_sv4si ((int32x4_t)__a, (int32_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t"}]}