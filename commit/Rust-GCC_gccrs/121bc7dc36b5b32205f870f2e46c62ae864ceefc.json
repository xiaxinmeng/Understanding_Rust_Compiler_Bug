{"sha": "121bc7dc36b5b32205f870f2e46c62ae864ceefc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIxYmM3ZGMzNmI1YjMyMjA1Zjg3MGYyZTQ2YzYyYWU4NjRjZWVmYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-08-14T08:56:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-08-14T08:56:49Z"}, "message": "re PR tree-optimization/62079 (ICE: in calc_dfs_tree, at dominance.c:401 with -fnon-call-exceptions)\n\n2014-08-14  Richard Biener  <rguenther@suse.de>\n\n\tPR rtl-optimization/62079\n\t* recog.c (peephole2_optimize): If peep2_do_cleanup_cfg\n\trun cleanup_cfg.\n\n\t* g++.dg/pr62079.C: New testcase.\n\nFrom-SVN: r213950", "tree": {"sha": "e4629df51819cedba384a41ae9e715f01ee8bbe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4629df51819cedba384a41ae9e715f01ee8bbe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/121bc7dc36b5b32205f870f2e46c62ae864ceefc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121bc7dc36b5b32205f870f2e46c62ae864ceefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121bc7dc36b5b32205f870f2e46c62ae864ceefc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121bc7dc36b5b32205f870f2e46c62ae864ceefc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e857bbfab108081804d295065bd244f46996c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e857bbfab108081804d295065bd244f46996c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e857bbfab108081804d295065bd244f46996c57"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "7ec321cddf8c73f391ece4bd63ba3f8beb1b0bbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121bc7dc36b5b32205f870f2e46c62ae864ceefc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121bc7dc36b5b32205f870f2e46c62ae864ceefc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=121bc7dc36b5b32205f870f2e46c62ae864ceefc", "patch": "@@ -1,3 +1,9 @@\n+2014-08-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/62079\n+\t* recog.c (peephole2_optimize): If peep2_do_cleanup_cfg\n+\trun cleanup_cfg.\n+\n 2014-08-14  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* ipa-devirt.c (get_polymorphic_call_info): Use fndecl instead of"}, {"sha": "167b044a3aeb8634501d206d887e67cf0cbd913b", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121bc7dc36b5b32205f870f2e46c62ae864ceefc/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121bc7dc36b5b32205f870f2e46c62ae864ceefc/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=121bc7dc36b5b32205f870f2e46c62ae864ceefc", "patch": "@@ -3553,6 +3553,8 @@ peephole2_optimize (void)\n   BITMAP_FREE (live);\n   if (peep2_do_rebuild_jump_labels)\n     rebuild_jump_labels (get_insns ());\n+  if (peep2_do_cleanup_cfg)\n+    cleanup_cfg (CLEANUP_CFG_CHANGED);\n }\n #endif /* HAVE_peephole2 */\n "}, {"sha": "0dd986b4c9600b8dfeb27fc27aa64471d66c34b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121bc7dc36b5b32205f870f2e46c62ae864ceefc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121bc7dc36b5b32205f870f2e46c62ae864ceefc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=121bc7dc36b5b32205f870f2e46c62ae864ceefc", "patch": "@@ -1,3 +1,8 @@\n+2014-08-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/62079\n+\t* g++.dg/pr62079.C: New testcase.\n+\n 2014-08-14  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n \n \t* gcc.target/arm/max-insns-skipped.c: New test."}, {"sha": "919c3e5de366fd7ca63f462ca8b127408c23b329", "filename": "gcc/testsuite/g++.dg/pr62079.C", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121bc7dc36b5b32205f870f2e46c62ae864ceefc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr62079.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121bc7dc36b5b32205f870f2e46c62ae864ceefc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr62079.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr62079.C?ref=121bc7dc36b5b32205f870f2e46c62ae864ceefc", "patch": "@@ -0,0 +1,78 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11 -O2 -fnon-call-exceptions\" }\n+\n+template < typename > class allocator;\n+\n+template < class _CharT > struct char_traits;\n+template < typename _CharT, typename _Traits = char_traits < _CharT >,\n+  typename _Alloc = allocator < _CharT > >class basic_string;\n+typedef basic_string < char >string;\n+\n+template < typename _Tp > class new_allocator\n+{\n+  template < typename _Tp1 > struct rebind\n+  {\n+    typedef new_allocator < _Tp1 > other;\n+  };\n+};\n+\n+template < typename _Tp > using __allocator_base = new_allocator < _Tp >;\n+template < typename _Tp > class allocator:public __allocator_base < _Tp >\n+{\n+};\n+\n+template < typename _CharT, typename _Traits, typename _Alloc >\n+  class basic_string\n+{\n+public:\n+  basic_string (const _CharT * __s, const _Alloc & __a = _Alloc ());\n+  ~basic_string ()noexcept;\n+};\n+\n+template < typename T > struct add_reference\n+{\n+  typedef T & type;\n+};\n+\n+template < typename ... Values > class tuple;\n+template <> class tuple <>\n+{\n+};\n+\n+template < typename Head, typename ... Tail > class tuple < Head, Tail ... >:private tuple <\n+  Tail ...\n+  >\n+{\n+  typedef tuple < Tail ... >inherited;\n+public:\n+  template < typename ... VValues >\n+    tuple (const tuple < VValues ... >&other):inherited (other.tail ()),\n+    m_head (other.head ())\n+  {\n+  }\n+  typename add_reference < const Head >::type head () const\n+  {\n+    return m_head;\n+  }\n+  const inherited & tail () const\n+  {\n+    return *this;\n+  }\n+  Head m_head;\n+};\n+\n+template < typename T > struct make_tuple_result\n+{\n+  typedef T type;\n+};\n+\n+template < typename ... Values >\n+  tuple < typename make_tuple_result <\n+  Values >::type ... >make_tuple (const Values & ... values);\n+\n+int\n+main ()\n+{\n+  tuple < int, float, string > t3c =\n+    make_tuple (17, 2.718281828, string (\"Fun\"));\n+}"}]}