{"sha": "8cf29a474f8d1a6555362022ebb0b8a047ee4666", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNmMjlhNDc0ZjhkMWE2NTU1MzYyMDIyZWJiMGI4YTA0N2VlNDY2Ng==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-03-25T02:28:22Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-03-25T02:28:22Z"}, "message": "Based on patch from Intel's ORP team:\n\n\t* java/io/PushbackInputStream.java (available): Calculate correct\n\tnumber of bytes in buffer.\n\t(read): Remove redundant bound check. Return bytes from both the\n\tbuffer and the stream.\n\nFrom-SVN: r51296", "tree": {"sha": "c3e7066f8f9ad0c5621e3f1f8b8d25626ab67205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3e7066f8f9ad0c5621e3f1f8b8d25626ab67205"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cf29a474f8d1a6555362022ebb0b8a047ee4666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf29a474f8d1a6555362022ebb0b8a047ee4666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cf29a474f8d1a6555362022ebb0b8a047ee4666", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf29a474f8d1a6555362022ebb0b8a047ee4666/comments", "author": null, "committer": null, "parents": [{"sha": "acf9549ef9151cce8c62cf02c9a07809693a4891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf9549ef9151cce8c62cf02c9a07809693a4891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf9549ef9151cce8c62cf02c9a07809693a4891"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "1f8e835c7816fb545449ec532e8f222ae6cc52b9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf29a474f8d1a6555362022ebb0b8a047ee4666/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf29a474f8d1a6555362022ebb0b8a047ee4666/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8cf29a474f8d1a6555362022ebb0b8a047ee4666", "patch": "@@ -4,6 +4,12 @@\n \n \t* java/io/FileInputStream.java (skip): Call fd.getFilePointer() and\n \tcalculate correct number of bytes skipped.\n+\t\n+\tBased on patch from Intel's ORP team:\n+\t* java/io/PushbackInputStream.java (available): Calculate correct \n+\tnumber of bytes in buffer.\n+\t(read): Remove redundant bound check. Return bytes from both the\n+\tbuffer and the stream.\n \n 2002-03-24  Tom Tromey  <tromey@redhat.com>\n "}, {"sha": "ebf0e38616af30f1f0edf7ef2fa8bc10d66726d7", "filename": "libjava/java/io/PushbackInputStream.java", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf29a474f8d1a6555362022ebb0b8a047ee4666/libjava%2Fjava%2Fio%2FPushbackInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf29a474f8d1a6555362022ebb0b8a047ee4666/libjava%2Fjava%2Fio%2FPushbackInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPushbackInputStream.java?ref=8cf29a474f8d1a6555362022ebb0b8a047ee4666", "patch": "@@ -1,5 +1,5 @@\n /* PushbackInputStream.java -- An input stream that can unread bytes\n-   Copyright (C) 1998, 1999, 2001, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -116,7 +116,7 @@ public PushbackInputStream(InputStream in, int size)\n    */\n   public int available() throws IOException\n   {\n-    return pos + super.available();\n+    return (buf.length - pos) + super.available();\n   }\n \n   /**\n@@ -200,18 +200,23 @@ public synchronized int read() throws IOException\n    */\n   public synchronized int read(byte[] b, int off, int len) throws IOException\n   {\n-    if (off < 0 || len < 0 || off + len > b.length)\n-      throw new ArrayIndexOutOfBoundsException();\n-\n     int numBytes = Math.min(buf.length - pos, len);\n     if (numBytes > 0)\n       {\n \tSystem.arraycopy (buf, pos, b, off, numBytes);\n \tpos += numBytes;\n-\treturn numBytes;\n+\tlen -= numBytes;\n+\toff += numBytes;\n       }\n \n-    return super.read(b, off, len);\n+    if (len > 0)\n+      {\n+        len = super.read(b, off, len);\n+\tif (len == -1) // EOF\n+\t  return numBytes > 0 ? numBytes : -1;\n+\tnumBytes += len;\n+      }\n+    return numBytes;\n   }\n \n   /**"}]}