{"sha": "427eb57db6fd5cd7e46da432e2ea46dc1be92905", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI3ZWI1N2RiNmZkNWNkN2U0NmRhNDMyZTJlYTQ2ZGMxYmU5MjkwNQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2010-09-01T17:03:56Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2010-09-01T17:03:56Z"}, "message": "re PR target/45475 (target attribute use in libcpp breaks LTO bootstrap)\n\n2010-09-01  Andi Kleen  <ak@linux.intel.com>\n\n        PR lto/45475\n        * lto-streamer-in.c (lto_input_ts_target_option): Add.\n        (lto_input_tree_pointers): Call lto_input_ts_target_option.\n        * lto-streamer-out: (lto_output_ts_target_option): Add.\n        (lto_output_tree_pointers): Call lto_output_ts_target_option.\n\nFrom-SVN: r163740", "tree": {"sha": "064dbf63a148604e479e053c3b0c4f5af02cbefa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/064dbf63a148604e479e053c3b0c4f5af02cbefa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/427eb57db6fd5cd7e46da432e2ea46dc1be92905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427eb57db6fd5cd7e46da432e2ea46dc1be92905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427eb57db6fd5cd7e46da432e2ea46dc1be92905", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427eb57db6fd5cd7e46da432e2ea46dc1be92905/comments", "author": null, "committer": null, "parents": [{"sha": "f39168b3e7d50cf6d35020923b5a40164ad7b155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39168b3e7d50cf6d35020923b5a40164ad7b155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f39168b3e7d50cf6d35020923b5a40164ad7b155"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "d55b8b650c59ca68d74b532c6f5caa047d4507ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427eb57db6fd5cd7e46da432e2ea46dc1be92905/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427eb57db6fd5cd7e46da432e2ea46dc1be92905/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=427eb57db6fd5cd7e46da432e2ea46dc1be92905", "patch": "@@ -1,3 +1,11 @@\n+2010-09-01  Andi Kleen\t<ak@linux.intel.com>\n+\n+    \tPR lto/45475\n+    \t* lto-streamer-in.c (lto_input_ts_target_option): Add.\n+    \t(lto_input_tree_pointers): Call lto_input_ts_target_option.\n+    \t* lto-streamer-out: (lto_output_ts_target_option): Add.\n+    \t(lto_output_tree_pointers): Call lto_output_ts_target_option.\n+\n 2010-09-01  Kai Tietz  <kai.tietz@onevision.com>\n \n \tPR/target 45452"}, {"sha": "14d87ed20fd85ff4651e552349309dbb76635b78", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427eb57db6fd5cd7e46da432e2ea46dc1be92905/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427eb57db6fd5cd7e46da432e2ea46dc1be92905/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=427eb57db6fd5cd7e46da432e2ea46dc1be92905", "patch": "@@ -2197,6 +2197,23 @@ lto_input_ts_constructor_tree_pointers (struct lto_input_block *ib,\n }\n \n \n+/* Input a TS_TARGET_OPTION tree from IB into EXPR.  */\n+\n+static void\n+lto_input_ts_target_option (struct lto_input_block *ib, tree expr)\n+{\n+  unsigned i, len;\n+  struct bitpack_d bp;\n+  struct cl_target_option *t = TREE_TARGET_OPTION (expr);\n+\n+  bp = lto_input_bitpack (ib);\n+  len = sizeof (struct cl_target_option);\n+  for (i = 0; i < len; i++)\n+    ((unsigned char *)t)[i] = bp_unpack_value (&bp, 8);\n+  if (bp_unpack_value (&bp, 32) != 0x12345678)\n+    fatal_error (\"cl_target_option size mismatch in LTO reader and writer\");\n+}\n+\n /* Helper for lto_input_tree.  Read all pointer fields in EXPR from\n    input block IB.  DATA_IN contains tables and descriptors for the\n    file being read.  */\n@@ -2281,9 +2298,7 @@ lto_input_tree_pointers (struct lto_input_block *ib, struct data_in *data_in,\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    {\n-      sorry (\"target optimization options not supported yet\");\n-    }\n+    lto_input_ts_target_option (ib, expr);\n }\n \n "}, {"sha": "80d818c6d1c70a42aeb96da4a77c34196ed5aada", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427eb57db6fd5cd7e46da432e2ea46dc1be92905/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427eb57db6fd5cd7e46da432e2ea46dc1be92905/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=427eb57db6fd5cd7e46da432e2ea46dc1be92905", "patch": "@@ -1105,6 +1105,26 @@ lto_output_ts_constructor_tree_pointers (struct output_block *ob, tree expr,\n     }\n }\n \n+/* Write a TS_TARGET_OPTION tree in EXPR to OB.  */\n+\n+static void\n+lto_output_ts_target_option (struct output_block *ob, tree expr)\n+{\n+  struct cl_target_option *t = TREE_TARGET_OPTION (expr);\n+  struct bitpack_d bp;\n+  unsigned i, len;\n+\n+  /* The cl_target_option is target specific and generated by the options\n+     awk script, so we just recreate a byte-by-byte copy here. */\n+\n+  bp = bitpack_create (ob->main_stream);\n+  len = sizeof (struct cl_target_option);\n+  for (i = 0; i < len; i++)\n+    bp_pack_value (&bp, ((unsigned char *)t)[i], 8);\n+  /* Catch struct size mismatches between reader and writer. */\n+  bp_pack_value (&bp, 0x12345678, 32);\n+  lto_output_bitpack (&bp);\n+}\n \n /* Helper for lto_output_tree.  Write all pointer fields in EXPR to output\n    block OB.  If REF_P is true, the leaves of EXPR are emitted as\n@@ -1187,7 +1207,7 @@ lto_output_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n     sorry (\"gimple bytecode streams do not support the optimization attribute\");\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    sorry (\"gimple bytecode streams do not support the target attribute\");\n+    lto_output_ts_target_option (ob, expr);\n }\n \n "}]}