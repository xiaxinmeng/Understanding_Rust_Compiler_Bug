{"sha": "0703f020cd4b22e0bb64612c608bfcc12a2222fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwM2YwMjBjZDRiMjJlMGJiNjQ2MTJjNjA4YmZjYzEyYTIyMjJmZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2011-06-16T17:57:08Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2011-06-16T17:57:08Z"}, "message": "re PR middle-end/45098 (Missed induction variable optimization)\n\n2011-06-16  Tom de Vries  <tom@codesourcery.com>\n\n\tPR target/45098\n\t* tree-ssa-loop-niter.c (infer_loop_bounds_from_pointer_arith): Disallow\n\tNULL pointer for pointer arithmetic.\n\nFrom-SVN: r175105", "tree": {"sha": "cb98d10fa3dd18ae5bf610534fbf0c44fdd76650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb98d10fa3dd18ae5bf610534fbf0c44fdd76650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0703f020cd4b22e0bb64612c608bfcc12a2222fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0703f020cd4b22e0bb64612c608bfcc12a2222fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0703f020cd4b22e0bb64612c608bfcc12a2222fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0703f020cd4b22e0bb64612c608bfcc12a2222fd/comments", "author": null, "committer": null, "parents": [{"sha": "900c07da335df90d8660f87e75734fea30ad9f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/900c07da335df90d8660f87e75734fea30ad9f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/900c07da335df90d8660f87e75734fea30ad9f27"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "4ea21cf833923d8d9e1e2875f88b0a288897b397", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0703f020cd4b22e0bb64612c608bfcc12a2222fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0703f020cd4b22e0bb64612c608bfcc12a2222fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0703f020cd4b22e0bb64612c608bfcc12a2222fd", "patch": "@@ -1,3 +1,9 @@\n+2011-06-16  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR target/45098\n+\t* tree-ssa-loop-niter.c (infer_loop_bounds_from_pointer_arith): Disallow\n+\tNULL pointer for pointer arithmetic.\n+\n 2011-06-16  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \tPR target/49398"}, {"sha": "cf2f4556395b56fe84705a4b7c500854d8851757", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0703f020cd4b22e0bb64612c608bfcc12a2222fd/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0703f020cd4b22e0bb64612c608bfcc12a2222fd/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=0703f020cd4b22e0bb64612c608bfcc12a2222fd", "patch": "@@ -2875,6 +2875,16 @@ infer_loop_bounds_from_pointer_arith (struct loop *loop, gimple stmt)\n   low = lower_bound_in_type (type, type);\n   high = upper_bound_in_type (type, type);\n \n+  /* In C, pointer arithmetic p + 1 cannot use a NULL pointer, and p - 1 cannot\n+     produce a NULL pointer.  The contrary would mean NULL points to an object,\n+     while NULL is supposed to compare unequal with the address of all objects.\n+     Furthermore, p + 1 cannot produce a NULL pointer and p - 1 cannot use a\n+     NULL pointer since that would mean wrapping, which we assume here not to\n+     happen.  So, we can exclude NULL from the valid range of pointer\n+     arithmetic.  */\n+  if (flag_delete_null_pointer_checks && int_cst_value (low) == 0)\n+    low = build_int_cstu (TREE_TYPE (low), TYPE_ALIGN_UNIT (TREE_TYPE (type)));\n+\n   record_nonwrapping_iv (loop, base, step, stmt, low, high, false, true);\n }\n "}]}