{"sha": "41faa1d7beb90b235858c8a692be926642ad5559", "node_id": "C_kwDOANBUbNoAKDQxZmFhMWQ3YmViOTBiMjM1ODU4YzhhNjkyYmU5MjY2NDJhZDU1NTk", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-14T21:03:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-14T21:03:30Z"}, "message": "analyzer: don't call binding_key::make on empty regions [PR108065]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/108065\n\t* region.cc (decl_region::get_svalue_for_initializer): Bail out to\n\tavoid calling binding_key::make with an empty region.\n\t* store.cc (binding_map::apply_ctor_val_to_range): Likewise.\n\t(binding_map::apply_ctor_pair_to_child_region): Likewise.\n\t(binding_cluster::bind): Likewise.\n\t(binding_cluster::purge_region): Likewise.\n\t(binding_cluster::maybe_get_compound_binding): Likewise.\n\t(binding_cluster::maybe_get_simple_value): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/108065\n\t* gfortran.dg/analyzer/pr108065.f90: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "35b04523e042c0855bde19207794f054c28e1a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35b04523e042c0855bde19207794f054c28e1a31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41faa1d7beb90b235858c8a692be926642ad5559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41faa1d7beb90b235858c8a692be926642ad5559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41faa1d7beb90b235858c8a692be926642ad5559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41faa1d7beb90b235858c8a692be926642ad5559/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b303049e45c180236a4114f844311652bad002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b303049e45c180236a4114f844311652bad002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b303049e45c180236a4114f844311652bad002"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "83809d6e1c3d20cf181d212df2fb92fee8118432", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41faa1d7beb90b235858c8a692be926642ad5559/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41faa1d7beb90b235858c8a692be926642ad5559/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=41faa1d7beb90b235858c8a692be926642ad5559", "patch": "@@ -1208,6 +1208,9 @@ decl_region::get_svalue_for_initializer (region_model_manager *mgr) const\n       if (DECL_EXTERNAL (m_decl))\n \treturn NULL;\n \n+      if (empty_p ())\n+\treturn NULL;\n+\n       /* Implicit initialization to zero; use a compound_svalue for it.\n \t Doing so requires that we have a concrete binding for this region,\n \t which can fail if we have a region with unknown size"}, {"sha": "f3b500c50a06a7928d83c0f4fdcdf608d4aba071", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41faa1d7beb90b235858c8a692be926642ad5559/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41faa1d7beb90b235858c8a692be926642ad5559/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=41faa1d7beb90b235858c8a692be926642ad5559", "patch": "@@ -911,6 +911,8 @@ binding_map::apply_ctor_val_to_range (const region *parent_reg,\n     return false;\n   bit_offset_t start_bit_offset = min_offset.get_bit_offset ();\n   store_manager *smgr = mgr->get_store_manager ();\n+  if (max_element->empty_p ())\n+    return false;\n   const binding_key *max_element_key = binding_key::make (smgr, max_element);\n   if (max_element_key->symbolic_p ())\n     return false;\n@@ -950,6 +952,8 @@ binding_map::apply_ctor_pair_to_child_region (const region *parent_reg,\n   else\n     {\n       const svalue *sval = get_svalue_for_ctor_val (val, mgr);\n+      if (child_reg->empty_p ())\n+\treturn false;\n       const binding_key *k\n \t= binding_key::make (mgr->get_store_manager (), child_reg);\n       /* Handle the case where we have an unknown size for child_reg\n@@ -1347,6 +1351,8 @@ binding_cluster::bind (store_manager *mgr,\n       return;\n     }\n \n+  if (reg->empty_p ())\n+    return;\n   const binding_key *binding = binding_key::make (mgr, reg);\n   bind_key (binding, sval);\n }\n@@ -1419,6 +1425,8 @@ void\n binding_cluster::purge_region (store_manager *mgr, const region *reg)\n {\n   gcc_assert (reg->get_kind () == RK_DECL);\n+  if (reg->empty_p ())\n+    return;\n   const binding_key *binding\n     = binding_key::make (mgr, const_cast<region *> (reg));\n   m_map.remove (binding);\n@@ -1666,6 +1674,9 @@ binding_cluster::maybe_get_compound_binding (store_manager *mgr,\n   if (reg_offset.symbolic_p ())\n     return NULL;\n \n+  if (reg->empty_p ())\n+    return NULL;\n+\n   region_model_manager *sval_mgr = mgr->get_svalue_manager ();\n \n   /* We will a build the result map in two parts:\n@@ -2162,6 +2173,9 @@ binding_cluster::maybe_get_simple_value (store_manager *mgr) const\n   if (m_map.elements () != 1)\n     return NULL;\n \n+  if (m_base_region->empty_p ())\n+    return NULL;\n+\n   const binding_key *key = binding_key::make (mgr, m_base_region);\n   return get_any_value (key);\n }"}, {"sha": "86ba4d4f9aaca6834f664b0c8760d87ff50e3fa5", "filename": "gcc/testsuite/gfortran.dg/analyzer/pr108065.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41faa1d7beb90b235858c8a692be926642ad5559/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr108065.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41faa1d7beb90b235858c8a692be926642ad5559/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr108065.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr108065.f90?ref=41faa1d7beb90b235858c8a692be926642ad5559", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fcheck=bounds -Wno-analyzer-malloc-leak\" }\n+! Copy of gfortran.dg/bounds_check_23.f90\n+! as a regression test for ICE with -fanalyzer (PR analyzer/108065)\n+\n+program test\n+  implicit none\n+  call sub('Lorem ipsum')\n+contains\n+  subroutine sub( text )\n+    character(len=*), intent(in)  :: text\n+    character(len=1), allocatable :: c(:)\n+    integer :: i\n+    c = [ ( text(i:i), i = 1, len(text) ) ]\n+    if (c(1) /= 'L') stop 1\n+  end subroutine sub\n+end program test"}]}