{"sha": "357c4350680bf29f0c7a115424e3da11c53b5582", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3YzQzNTA2ODBiZjI5ZjBjN2ExMTU0MjRlM2RhMTFjNTNiNTU4Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-03T11:25:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-03T11:29:15Z"}, "message": "Fix ICE with pathologically large frames\n\ngcc/\n\tPR target/99234\n\t* config/i386/i386.c (ix86_compute_frame_layout): For a SEH target,\n\tpoint back the hard frame pointer to its default location when the\n\tframe is larger than SEH_MAX_FRAME_SIZE.", "tree": {"sha": "ce45975be0ea7ddf232969108328480bc6f5f179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce45975be0ea7ddf232969108328480bc6f5f179"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/357c4350680bf29f0c7a115424e3da11c53b5582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357c4350680bf29f0c7a115424e3da11c53b5582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357c4350680bf29f0c7a115424e3da11c53b5582", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357c4350680bf29f0c7a115424e3da11c53b5582/comments", "author": null, "committer": null, "parents": [{"sha": "f1b13064609a41fcaf4d1859663453bba237e277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b13064609a41fcaf4d1859663453bba237e277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b13064609a41fcaf4d1859663453bba237e277"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "6672da597ba738eafdceaa7aa301d80b3f79ae7c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357c4350680bf29f0c7a115424e3da11c53b5582/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357c4350680bf29f0c7a115424e3da11c53b5582/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=357c4350680bf29f0c7a115424e3da11c53b5582", "patch": "@@ -6660,7 +6660,8 @@ ix86_compute_frame_layout (void)\n       frame->hard_frame_pointer_offset = frame->sse_reg_save_offset;\n \n       /* If we can leave the frame pointer where it is, do so.  Also, return\n-\t the establisher frame for __builtin_frame_address (0).  */\n+\t the establisher frame for __builtin_frame_address (0) or else if the\n+\t frame overflows the SEH maximum frame size.  */\n       const HOST_WIDE_INT diff\n \t= frame->stack_pointer_offset - frame->hard_frame_pointer_offset;\n       if (diff <= 255)\n@@ -6678,6 +6679,8 @@ ix86_compute_frame_layout (void)\n \t     frame that is addressable with 8-bit offsets.  */\n \t  frame->hard_frame_pointer_offset = frame->stack_pointer_offset - 128;\n \t}\n+      else\n+\tframe->hard_frame_pointer_offset = frame->hfp_save_offset;\n     }\n }\n "}]}