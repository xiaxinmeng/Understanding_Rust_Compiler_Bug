{"sha": "c311f311c46e143e2d6dc3155eec7fb1db5ea1b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMxMWYzMTFjNDZlMTQzZTJkNmRjMzE1NWVlYzdmYjFkYjVlYTFiNA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-04T17:53:44Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-04T17:53:44Z"}, "message": "(*): Change __mips==3 to __mips>=3.\n\n(sgidefs.h): Include if _MIPS_SIM is defined.\n(va_start): Add support for 64 bit ABI.\n\nFrom-SVN: r8860", "tree": {"sha": "68bd096ae47f96d0f264fa00330ccf43b7ab6e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68bd096ae47f96d0f264fa00330ccf43b7ab6e28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c311f311c46e143e2d6dc3155eec7fb1db5ea1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c311f311c46e143e2d6dc3155eec7fb1db5ea1b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c311f311c46e143e2d6dc3155eec7fb1db5ea1b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c311f311c46e143e2d6dc3155eec7fb1db5ea1b4/comments", "author": null, "committer": null, "parents": [{"sha": "5604861b6f920aef918d9054768747109aa8c41e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5604861b6f920aef918d9054768747109aa8c41e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5604861b6f920aef918d9054768747109aa8c41e"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "f5ce66deb674ce1c1b46522c3e3596a7d9ce9b67", "filename": "gcc/ginclude/va-mips.h", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c311f311c46e143e2d6dc3155eec7fb1db5ea1b4/gcc%2Fginclude%2Fva-mips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c311f311c46e143e2d6dc3155eec7fb1db5ea1b4/gcc%2Fginclude%2Fva-mips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-mips.h?ref=c311f311c46e143e2d6dc3155eec7fb1db5ea1b4", "patch": "@@ -29,28 +29,47 @@ typedef char * __gnuc_va_list;\n #define __va_ellipsis\n #endif\n \n-#if __mips==3\n+#if __mips>=3\n #define __va_rounded_size(__TYPE)  \\\n   (((sizeof (__TYPE) + 8 - 1) / 8) * 8)\n #else\n #define __va_rounded_size(__TYPE)  \\\n   (((sizeof (__TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n #endif\n \n+/* Get definitions for _MIPS_SIM_ABI64 etc.  */\n+#ifdef _MIPS_SIM\n+#include <sgidefs.h>\n+#endif\n+\n #ifdef _STDARG_H\n+#if defined(_MIPS_SIM) && (_MIPS_SIM == _MIPS_SIM_ABI64)\n+#define va_start(__AP, __LASTARG)\t\t\t\t\t\\\n+  (__AP = __builtin_next_arg (__LASTARG) - 64\t\t\t\t\\\n+   + (__builtin_args_info (2) > 8 ? 64 : __builtin_args_info(2) * 8))\n+#else\n #define va_start(__AP, __LASTARG) \\\n   (__AP = (__gnuc_va_list) __builtin_next_arg (__LASTARG))\n+#endif\n \n #else\n #define va_alist  __builtin_va_alist\n-#if __mips==3\n+#if __mips>=3\n /* This assumes that `long long int' is always a 64 bit type.  */\n #define va_dcl    long long int __builtin_va_alist; __va_ellipsis\n #else\n #define va_dcl    int __builtin_va_alist; __va_ellipsis\n #endif\n+/* Need alternate code for _MIPS_SIM_ABI64, but don't use that symbol\n+   because it may not be defined.  */\n+#if defined(_MIPS_SIM) && (_MIPS_SIM == _MIPS_SIM_ABI64)\n+#define va_start(__AP)\t\t\t\t\t\t\t\\\n+  (__AP = __builtin_next_arg () - 64\t\t\t\t\t\\\n+   + (__builtin_args_info (2) > 8 ? 64 : __builtin_args_info(2) * 8))\n+#else\n #define va_start(__AP)  __AP = (char *) &__builtin_va_alist\n #endif\n+#endif\n \n #ifndef va_end\n void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n@@ -59,11 +78,11 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n \n /* We cast to void * and then to TYPE * because this avoids\n    a warning about increasing the alignment requirement.  */\n-/* The __mips==3 cases are reversed from the 32 bit cases, because the standard\n+/* The __mips>=3 cases are reversed from the 32 bit cases, because the standard\n    32 bit calling convention left-aligns all parameters smaller than a word,\n-   whereas the __mips==3 calling convention does not (and hence they are\n+   whereas the __mips>=3 calling convention does not (and hence they are\n    right aligned).  */\n-#if __mips==3\n+#if __mips>=3\n #ifdef __MIPSEB__\n #define va_arg(__AP, __type)                                    \\\n   ((__type *) (void *) (__AP = (char *) ((((__PTRDIFF_TYPE__)__AP + 8 - 1) & -8) \\\n@@ -75,7 +94,7 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n    *(__type *) (void *) (__AP - __va_rounded_size (__type)))\n #endif\n \n-#else /* not __mips==3 */\n+#else /* not __mips>=3 */\n \n #ifdef __MIPSEB__\n /* For big-endian machines.  */"}]}