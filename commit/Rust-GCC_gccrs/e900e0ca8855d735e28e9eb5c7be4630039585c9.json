{"sha": "e900e0ca8855d735e28e9eb5c7be4630039585c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwMGUwY2E4ODU1ZDczNWUyOGU5ZWI1YzdiZTQ2MzAwMzk1ODVjOQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-10-02T23:27:51Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-10-02T23:27:51Z"}, "message": "re PR libfortran/33469 (Default formats for real input are not precise enough)\n\n\tPR libfortran/33469\n\n\t* io/write.c (write_real): Widen the default formats.\n\n\t* gfortran.dg/default_format_1.f90: New test.\n\t* gfortran.dg/default_format_2.f90: New test.\n\t* gfortran.dg/namelist_print_1.f: Adjust expected output.\n\t* gfortran.dg/real_const_3.f90: Adjust expected output.\n\nFrom-SVN: r128967", "tree": {"sha": "767bdfcddd456c6be1acfc00b498e2be8ecea53f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/767bdfcddd456c6be1acfc00b498e2be8ecea53f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e900e0ca8855d735e28e9eb5c7be4630039585c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e900e0ca8855d735e28e9eb5c7be4630039585c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e900e0ca8855d735e28e9eb5c7be4630039585c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e900e0ca8855d735e28e9eb5c7be4630039585c9/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "729fd517d9bafae406f62b348bfb74e0e2f14d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729fd517d9bafae406f62b348bfb74e0e2f14d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729fd517d9bafae406f62b348bfb74e0e2f14d61"}], "stats": {"total": 216, "additions": 197, "deletions": 19}, "files": [{"sha": "adab396193e743659630c1c35364ac09ccb8d13a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e900e0ca8855d735e28e9eb5c7be4630039585c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e900e0ca8855d735e28e9eb5c7be4630039585c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e900e0ca8855d735e28e9eb5c7be4630039585c9", "patch": "@@ -1,3 +1,11 @@\n+2007-10-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/33469\n+\t* gfortran.dg/default_format_1.f90: New test.\n+\t* gfortran.dg/default_format_2.f90: New test.\n+\t* gfortran.dg/namelist_print_1.f: Adjust expected output.\n+\t* gfortran.dg/real_const_3.f90: Adjust expected output.\n+\n 2007-10-02  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* gcc.target/mips/mips.exp (setup_mips_tests): Set mips_abi to the"}, {"sha": "6183a345725395e1255c2031d64ee2ff04dadf64", "filename": "gcc/testsuite/gfortran.dg/default_format_1.f90", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e900e0ca8855d735e28e9eb5c7be4630039585c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e900e0ca8855d735e28e9eb5c7be4630039585c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_1.f90?ref=e900e0ca8855d735e28e9eb5c7be4630039585c9", "patch": "@@ -0,0 +1,101 @@\n+! { dg-do run }\n+!\n+! This tests that the default formats for formatted I/O of reals are\n+! wide enough and have enough precision, by checking that values can\n+! be written and read back.\n+!\n+module test_default_format\n+  interface test\n+    module procedure test_r4\n+    module procedure test_r8\n+  end interface test\n+\n+  integer, parameter :: count = 200\n+\n+contains\n+  function test_r4 (start, towards) result (res)\n+    integer, parameter :: k = 4\n+    integer, intent(in) :: towards\n+    real(k), intent(in) :: start\n+\n+    integer :: res, i\n+    real(k) :: x, y\n+    character(len=100) :: s\n+\n+    res = 0\n+\n+    if (towards >= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,huge(x))\n+      end do\n+    end if\n+\n+    if (towards <= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,-huge(x))\n+      end do\n+    end if\n+  end function test_r4\n+\n+  function test_r8 (start, towards) result (res)\n+    integer, parameter :: k = 8\n+    integer, intent(in) :: towards\n+    real(k), intent(in) :: start\n+\n+    integer :: res, i\n+    real(k) :: x, y\n+    character(len=100) :: s\n+\n+    res = 0\n+\n+    if (towards >= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,huge(x))\n+      end do\n+    end if\n+\n+    if (towards <= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,-huge(x))\n+      end do\n+    end if\n+  end function test_r8\n+\n+end module test_default_format\n+\n+program main\n+  use test_default_format\n+\n+  if (test (1.0_4, 0) /= 0) call abort\n+  if (test (0.0_4, 0) /= 0) call abort\n+  if (test (tiny(0.0_4), 0) /= 0) call abort\n+  if (test (-tiny(0.0_4), 0) /= 0) call abort\n+  if (test (huge(0.0_4), -1) /= 0) call abort\n+  if (test (-huge(0.0_4), 1) /= 0) call abort\n+\n+  if (test (1.0_8, 0) /= 0) call abort\n+  if (test (0.0_8, 0) /= 0) call abort\n+  if (test (tiny(0.0_8), 0) /= 0) call abort\n+  if (test (-tiny(0.0_8), 0) /= 0) call abort\n+  if (test (huge(0.0_8), -1) /= 0) call abort\n+  if (test (-huge(0.0_8), 1) /= 0) call abort\n+\n+end program main\n+!\n+! { dg-final { cleanup-modules \"test_default_format\" } }"}, {"sha": "af6d4a666f8344e2045da34cfb7edeff6ab2aa7b", "filename": "gcc/testsuite/gfortran.dg/default_format_2.f90", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e900e0ca8855d735e28e9eb5c7be4630039585c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e900e0ca8855d735e28e9eb5c7be4630039585c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_2.f90?ref=e900e0ca8855d735e28e9eb5c7be4630039585c9", "patch": "@@ -0,0 +1,64 @@\n+! { dg-do run }\n+! { dg-require-effective-target fortran_large_real }\n+!\n+! This tests that the default formats for formatted I/O of reals are\n+! wide enough and have enough precision, by checking that values can\n+! be written and read back.\n+!\n+module test_default_format\n+  interface test\n+    module procedure test_rl\n+  end interface test\n+\n+  integer, parameter :: kl = selected_real_kind (precision (0.0_8) + 1)\n+  integer, parameter :: count = 200\n+\n+contains\n+\n+  function test_rl (start, towards) result (res)\n+    integer, parameter :: k = kl\n+    integer, intent(in) :: towards\n+    real(k), intent(in) :: start\n+\n+    integer :: res, i\n+    real(k) :: x, y\n+    character(len=100) :: s\n+\n+    res = 0\n+\n+    if (towards >= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,huge(x))\n+      end do\n+    end if\n+\n+    if (towards <= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,-huge(x))\n+      end do\n+    end if\n+  end function test_rl\n+\n+end module test_default_format\n+\n+program main\n+  use test_default_format\n+\n+  if (test (1.0_kl, 0) /= 0) call abort\n+  if (test (0.0_kl, 0) /= 0) call abort\n+  if (test (tiny(0.0_kl), 0) /= 0) call abort\n+  if (test (-tiny(0.0_kl), 0) /= 0) call abort\n+  if (test (huge(0.0_kl), -1) /= 0) call abort\n+  if (test (-huge(0.0_kl), 1) /= 0) call abort\n+\n+end program main\n+!\n+! { dg-final { cleanup-modules \"test_default_format\" } }"}, {"sha": "5c0e7759088dc5132b4234d3b4abdbcb536a6894", "filename": "gcc/testsuite/gfortran.dg/namelist_print_1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e900e0ca8855d735e28e9eb5c7be4630039585c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_print_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e900e0ca8855d735e28e9eb5c7be4630039585c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_print_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_print_1.f?ref=e900e0ca8855d735e28e9eb5c7be4630039585c9", "patch": "@@ -9,5 +9,5 @@\n       namelist /mynml/ x\n       x = 1\n ! ( dg-output \"^\" }\n-      print mynml ! { dg-output \"&MYNML(\\n|\\r\\n|\\r) X=  1.000000    ,  /(\\n|\\r\\n|\\r)\" }\n+      print mynml ! { dg-output \"&MYNML(\\n|\\r\\n|\\r) X= 1.00000000    ,  /(\\n|\\r\\n|\\r)\" }\n       end"}, {"sha": "d6b2a968d8eeb52c404299c61b1f3dfd5ea57d83", "filename": "gcc/testsuite/gfortran.dg/real_const_3.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e900e0ca8855d735e28e9eb5c7be4630039585c9/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e900e0ca8855d735e28e9eb5c7be4630039585c9/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90?ref=e900e0ca8855d735e28e9eb5c7be4630039585c9", "patch": "@@ -27,15 +27,15 @@ program main\n \n end program main\n !{ dg-output \"      \\\\+Infinity(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"   0.000000    (\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"      -Infinity(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"            NaN(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"            NaN(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"      -Infinity(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"      -Infinity(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"      \\\\+Infinity(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"            NaN(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \" \\\\(           NaN,           NaN\\\\)(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \" \\\\(           NaN,           NaN\\\\)(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \" \\\\(     \\\\+Infinity,     -Infinity\\\\)(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \" \\\\(  0.000000    , -0.000000    \\\\)(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \"   0.0000000    (\\n|\\r\\n|\\r)\" }\n+!{ dg-output \"       -Infinity(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \"             NaN(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \"             NaN(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \"       -Infinity(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \"       -Infinity(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \"       \\\\+Infinity(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \"             NaN(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \" \\\\(            NaN,            NaN\\\\)(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \" \\\\(            NaN,            NaN\\\\)(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \" \\\\(      \\\\+Infinity,      -Infinity\\\\)(\\n|\\r\\n|\\r)\" }\n+!{ dg-output \" \\\\(  0.0000000    , -0.0000000    \\\\)(\\n|\\r\\n|\\r)\" }"}, {"sha": "7392997e2af839adbba3c353deab7b88f39fd9df", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e900e0ca8855d735e28e9eb5c7be4630039585c9/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e900e0ca8855d735e28e9eb5c7be4630039585c9/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e900e0ca8855d735e28e9eb5c7be4630039585c9", "patch": "@@ -1,3 +1,8 @@\n+2007-10-02  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33469\n+\t* io/write.c (write_real): Widen the default formats.\n+\n 2007-09-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/33400"}, {"sha": "84b695fa883bd09e3e20e97572585fe9846dd0e3", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e900e0ca8855d735e28e9eb5c7be4630039585c9/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e900e0ca8855d735e28e9eb5c7be4630039585c9/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=e900e0ca8855d735e28e9eb5c7be4630039585c9", "patch": "@@ -698,18 +698,18 @@ write_real (st_parameter_dt *dtp, const char *source, int length)\n   switch (length)\n     {\n     case 4:\n-      f.u.real.w = 14;\n-      f.u.real.d = 7;\n+      f.u.real.w = 15;\n+      f.u.real.d = 8;\n       f.u.real.e = 2;\n       break;\n     case 8:\n-      f.u.real.w = 23;\n-      f.u.real.d = 15;\n+      f.u.real.w = 25;\n+      f.u.real.d = 17;\n       f.u.real.e = 3;\n       break;\n     case 10:\n-      f.u.real.w = 28;\n-      f.u.real.d = 19;\n+      f.u.real.w = 29;\n+      f.u.real.d = 20;\n       f.u.real.e = 4;\n       break;\n     case 16:"}]}