{"sha": "e3de253ff049d18070f1d8b25b3d21f99b4e938b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkZTI1M2ZmMDQ5ZDE4MDcwZjFkOGIyNWIzZDIxZjk5YjRlOTM4Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-22T11:50:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-22T11:50:48Z"}, "message": "Minor reformatting.\n\nFrom-SVN: r237700", "tree": {"sha": "8cc1436a2901bec572e025c376b8d054a0428a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cc1436a2901bec572e025c376b8d054a0428a3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3de253ff049d18070f1d8b25b3d21f99b4e938b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3de253ff049d18070f1d8b25b3d21f99b4e938b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3de253ff049d18070f1d8b25b3d21f99b4e938b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3de253ff049d18070f1d8b25b3d21f99b4e938b/comments", "author": null, "committer": null, "parents": [{"sha": "d13ecc2dc757d4fd1db97741aaa3f44e5aa1766d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13ecc2dc757d4fd1db97741aaa3f44e5aa1766d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d13ecc2dc757d4fd1db97741aaa3f44e5aa1766d"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "31c77394949251eb3d68d70eefed31fbb43b486f", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3de253ff049d18070f1d8b25b3d21f99b4e938b/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3de253ff049d18070f1d8b25b3d21f99b4e938b/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e3de253ff049d18070f1d8b25b3d21f99b4e938b", "patch": "@@ -1392,11 +1392,11 @@ package body Freeze is\n \n    procedure Check_Inherited_Conditions (R : Entity_Id) is\n       Prim_Ops : constant Elist_Id := Primitive_Operations (R);\n+      A_Post   : Node_Id;\n+      A_Pre    : Node_Id;\n       Op_Node  : Elmt_Id;\n-      Prim     : Entity_Id;\n       Par_Prim : Entity_Id;\n-      A_Pre    : Node_Id;\n-      A_Post   : Node_Id;\n+      Prim     : Entity_Id;\n \n    begin\n       Op_Node := First_Elmt (Prim_Ops);\n@@ -1405,31 +1405,31 @@ package body Freeze is\n \n          --  In SPARK mode this is where we can collect the inherited\n          --  conditions, because we do not create the Check pragmas that\n-         --  normally convey the the modified classwide conditions on\n-         --  overriding operations.\n+         --  normally convey the modified classwide conditions on overriding\n+         --  operations.\n \n          if SPARK_Mode = On\n-            and then Comes_From_Source (Prim)\n-            and then Present (Overridden_Operation (Prim))\n+           and then Comes_From_Source (Prim)\n+           and then Present (Overridden_Operation (Prim))\n          then\n             Collect_Inherited_Class_Wide_Conditions (Prim);\n          end if;\n \n-         --  In normal mode, we examine inherited operations to check\n-         --  whether they require a wrapper to handle inherited conditions\n-         --  that call other primitives.\n+         --  In normal mode, we examine inherited operations to check whether\n+         --  they require a wrapper to handle inherited conditions that call\n+         --  other primitives.\n          --  Wrapper construction TBD.\n \n-         if not Comes_From_Source (Prim)\n-           and then Present (Alias (Prim))\n-         then\n+         if not Comes_From_Source (Prim) and then Present (Alias (Prim)) then\n             Par_Prim := Alias (Prim);\n-            A_Pre  := Find_Aspect (Par_Prim, Aspect_Pre);\n+            A_Pre    := Find_Aspect (Par_Prim, Aspect_Pre);\n+\n             if Present (A_Pre) and then Class_Present (A_Pre) then\n                Build_Classwide_Expression (Expression (A_Pre), Prim);\n             end if;\n \n             A_Post := Find_Aspect (Par_Prim, Aspect_Post);\n+\n             if Present (A_Post) and then Class_Present (A_Post) then\n                Build_Classwide_Expression (Expression (A_Post), Prim);\n             end if;\n@@ -1710,14 +1710,11 @@ package body Freeze is\n               and then not Is_Frozen (E)\n             then\n                Push_Scope (E);\n+\n                Install_Visible_Declarations (E);\n                Install_Private_Declarations (E);\n-\n                Freeze_All (First_Entity (E), After);\n \n-               --  Analyze_Pending_Bodies (Visible_Declarations (E));\n-               --  Analyze_Pending_Bodies (Private_Declarations (E));\n-\n                End_Package_Scope (E);\n \n                if Is_Generic_Instance (E)\n@@ -1728,8 +1725,8 @@ package body Freeze is\n                end if;\n \n             elsif Ekind (E) in Task_Kind\n-              and then Nkind_In (Parent (E), N_Task_Type_Declaration,\n-                                             N_Single_Task_Declaration)\n+              and then Nkind_In (Parent (E), N_Single_Task_Declaration,\n+                                             N_Task_Type_Declaration)\n             then\n                Push_Scope (E);\n                Freeze_All (First_Entity (E), After);"}]}