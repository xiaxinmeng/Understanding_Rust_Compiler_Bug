{"sha": "5fd336bbd7b273408018dfbb7a170e1d54facb8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkMzM2YmJkN2IyNzM0MDgwMThkZmJiN2ExNzBlMWQ1NGZhY2I4ZQ==", "commit": {"author": {"name": "Jun Ma", "email": "JunMa@linux.alibaba.com", "date": "2019-06-27T09:50:35Z"}, "committer": {"name": "Jun Ma", "email": "junma@gcc.gnu.org", "date": "2019-06-27T09:50:35Z"}, "message": "re PR tree-optimization/89772 (memchr for a character not in constant nul-padded string not folded)\n\n\tPR tree-optimization/89772\n\t* gimple-fold.c (gimple_fold_builtin_memchr): consider trailing nuls in\n\tout-of-bound accesses checking.\n\n\tgcc/testsuite\n\t* gcc.dg/builtin-memchr-4.c: New test.\n\nFrom-SVN: r272740", "tree": {"sha": "22f6406d9cbec125a110e719d1d92089c273176e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22f6406d9cbec125a110e719d1d92089c273176e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fd336bbd7b273408018dfbb7a170e1d54facb8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd336bbd7b273408018dfbb7a170e1d54facb8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd336bbd7b273408018dfbb7a170e1d54facb8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd336bbd7b273408018dfbb7a170e1d54facb8e/comments", "author": {"login": "junparser", "id": 59546948, "node_id": "MDQ6VXNlcjU5NTQ2OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/59546948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junparser", "html_url": "https://github.com/junparser", "followers_url": "https://api.github.com/users/junparser/followers", "following_url": "https://api.github.com/users/junparser/following{/other_user}", "gists_url": "https://api.github.com/users/junparser/gists{/gist_id}", "starred_url": "https://api.github.com/users/junparser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junparser/subscriptions", "organizations_url": "https://api.github.com/users/junparser/orgs", "repos_url": "https://api.github.com/users/junparser/repos", "events_url": "https://api.github.com/users/junparser/events{/privacy}", "received_events_url": "https://api.github.com/users/junparser/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e11c48711128a8aff3938cf28954acf1b1cc0b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11c48711128a8aff3938cf28954acf1b1cc0b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11c48711128a8aff3938cf28954acf1b1cc0b62"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "44f9850b671b04dd8893c54e3966748663020b09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd336bbd7b273408018dfbb7a170e1d54facb8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd336bbd7b273408018dfbb7a170e1d54facb8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fd336bbd7b273408018dfbb7a170e1d54facb8e", "patch": "@@ -1,3 +1,9 @@\n+2019-06-27  Jun Ma <JunMa@linux.alibaba.com>\n+\n+\tPR tree-optimization/89772\n+\t* gimple-fold.c (gimple_fold_builtin_memchr): consider trailing nuls in\n+\tout-of-bound accesses checking.\n+\n 2019-06-27  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/91014"}, {"sha": "118718a59ee7dc6cf8dbda0913abdeacd7bab80d", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd336bbd7b273408018dfbb7a170e1d54facb8e/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd336bbd7b273408018dfbb7a170e1d54facb8e/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=5fd336bbd7b273408018dfbb7a170e1d54facb8e", "patch": "@@ -2543,7 +2543,15 @@ gimple_fold_builtin_memchr (gimple_stmt_iterator *gsi)\n       const char *r = (const char *)memchr (p1, c, MIN (length, string_length));\n       if (r == NULL)\n \t{\n-\t  if (length <= string_length)\n+\t  tree mem_size, offset_node;\n+\t  string_constant (arg1, &offset_node, &mem_size, NULL);\n+\t  unsigned HOST_WIDE_INT offset = (offset_node == NULL_TREE)\n+\t\t\t\t\t  ? 0 : tree_to_uhwi (offset_node);\n+\t  /* MEM_SIZE is the size of the array the string literal\n+\t     is stored in.  */\n+\t  unsigned HOST_WIDE_INT string_size = tree_to_uhwi (mem_size) - offset;\n+\t  gcc_checking_assert (string_length <= string_size);\n+\t  if (length <= string_size)\n \t    {\n \t      replace_call_with_value (gsi, build_int_cst (ptr_type_node, 0));\n \t      return true;"}, {"sha": "3c459a406d2456131bf26fdf3dc0e4328fcf1951", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd336bbd7b273408018dfbb7a170e1d54facb8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd336bbd7b273408018dfbb7a170e1d54facb8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fd336bbd7b273408018dfbb7a170e1d54facb8e", "patch": "@@ -1,3 +1,8 @@\n+2019-06-27  Jun Ma  <JunMa@linux.alibaba.com>\n+\n+\tPR tree-optimization/89772\n+\t* gcc.dg/builtin-memchr-4.c: New test.\n+\n 2019-06-27  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/91014"}, {"sha": "58a3b444b638d4f7f849de836ce18bf94d494e02", "filename": "gcc/testsuite/gcc.dg/builtin-memchr-4.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd336bbd7b273408018dfbb7a170e1d54facb8e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd336bbd7b273408018dfbb7a170e1d54facb8e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr-4.c?ref=5fd336bbd7b273408018dfbb7a170e1d54facb8e", "patch": "@@ -0,0 +1,40 @@\n+/* PR tree-optimization/89772\n+   Verify that memchr calls with a pointer to a constant character\n+   are folded as expected.\n+   { dg-do compile }\n+   { dg-options \"-O1 -Wall -fdump-tree-release_ssa\" } */\n+\n+typedef __SIZE_TYPE__  size_t;\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+extern void* memchr (const void*, int, size_t);\n+extern int printf (const char*, ...);\n+extern void abort (void);\n+\n+#define A(expr)\t\t\t\t\t\t\\\n+  ((expr)\t\t\t\t\t\t\\\n+   ? (void)0\t\t\t\t\t\t\\\n+   : (printf (\"assertion failed on line %i: %s\\n\",\t\\\n+\t      __LINE__, #expr),\t\t\t\t\\\n+      abort ()))\n+\n+const char a[8] = {'a',0,'b'};\n+const char b[3] = {'a','b'};\n+const char c[8] = {'a','b','c'};\n+\n+void test_memchr_cst_char (void)\n+{\n+  A (!memchr (a, 'c', 2));\n+  A (!memchr (a, 'c', 5));\n+  A (!memchr (a, 'c', sizeof a));\n+  A (&a[1] == memchr (a, 0, sizeof a));\n+\n+  A (!memchr (b, 0, 2));\n+  A (&b[2] == memchr (b, 0, sizeof b));\n+\n+  A (!memchr (c, 0, 2));\n+  A (&c[3] == memchr (c, 0, 4));\n+  A (&c[3] == memchr (c, 0, sizeof a));\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"release_ssa\" } } */"}]}