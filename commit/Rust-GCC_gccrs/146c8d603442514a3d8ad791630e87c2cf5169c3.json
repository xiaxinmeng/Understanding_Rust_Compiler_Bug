{"sha": "146c8d603442514a3d8ad791630e87c2cf5169c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ2YzhkNjAzNDQyNTE0YTNkOGFkNzkxNjMwZTg3YzJjZjUxNjljMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-11-17T09:48:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-11-17T09:48:53Z"}, "message": "typeck2.c (incomplete_type_error): Reorganise to avoid excessive diagnostics.\n\n\t* typeck2.c (incomplete_type_error): Reorganise to avoid\n\texcessive diagnostics.\n\nFrom-SVN: r37516", "tree": {"sha": "6719ea214e9eb7d8d41cf312484af570b5b68c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6719ea214e9eb7d8d41cf312484af570b5b68c57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/146c8d603442514a3d8ad791630e87c2cf5169c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146c8d603442514a3d8ad791630e87c2cf5169c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146c8d603442514a3d8ad791630e87c2cf5169c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146c8d603442514a3d8ad791630e87c2cf5169c3/comments", "author": null, "committer": null, "parents": [{"sha": "078c72b67f3047e7f8d67503274fc607cd1083b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078c72b67f3047e7f8d67503274fc607cd1083b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/078c72b67f3047e7f8d67503274fc607cd1083b4"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "f059212cd3a78381c1234501a57cfed38e7d4bde", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c8d603442514a3d8ad791630e87c2cf5169c3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c8d603442514a3d8ad791630e87c2cf5169c3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=146c8d603442514a3d8ad791630e87c2cf5169c3", "patch": "@@ -1,3 +1,8 @@\n+2000-11-17  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* typeck2.c (incomplete_type_error): Reorganise to avoid\n+\texcessive diagnostics.\n+\n 2000-11-16  Zack Weinberg  <zack@wolery.stanford.edu>\n \n \t* lex.c (struct impl_files, internal_filename): Constify a char *."}, {"sha": "60933e385d31f3accaab02e9d6f1ed7935b620f4", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c8d603442514a3d8ad791630e87c2cf5169c3/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c8d603442514a3d8ad791630e87c2cf5169c3/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=146c8d603442514a3d8ad791630e87c2cf5169c3", "patch": "@@ -187,10 +187,18 @@ incomplete_type_error (value, type)\n      tree value;\n      tree type;\n {\n+  int decl = 0;\n+  \n   /* Avoid duplicate error message.  */\n   if (TREE_CODE (type) == ERROR_MARK)\n     return;\n \n+  if (value != 0 && (TREE_CODE (value) == VAR_DECL\n+\t\t     || TREE_CODE (value) == PARM_DECL))\n+    {\n+      cp_error_at (\"`%D' has incomplete type\", value);\n+      decl = 1;\n+    }\n retry:\n   /* We must print an error message.  Be clever about what it says.  */\n \n@@ -199,12 +207,13 @@ incomplete_type_error (value, type)\n     case RECORD_TYPE:\n     case UNION_TYPE:\n     case ENUMERAL_TYPE:\n-      cp_error (\"invalid use of undefined type `%#T'\", type);\n+      if (!decl)\n+        cp_error (\"invalid use of undefined type `%#T'\", type);\n       cp_error_at (\"forward declaration of `%#T'\", type);\n       break;\n \n     case VOID_TYPE:\n-      cp_error (\"invalid use of void expression\");\n+      cp_error (\"invalid use of `%T'\", type);\n       break;\n \n     case ARRAY_TYPE:\n@@ -239,10 +248,6 @@ incomplete_type_error (value, type)\n     default:\n       my_friendly_abort (108);\n     }\n-\n-  if (value != 0 && (TREE_CODE (value) == VAR_DECL\n-\t\t     || TREE_CODE (value) == PARM_DECL))\n-    cp_error_at (\"incomplete `%D' defined here\", value);\n }\n \n /* This is a wrapper around fancy_abort, as used in the back end and"}]}