{"sha": "24531cd697943064c58ef0c374751f667657fe38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ1MzFjZDY5Nzk0MzA2NGM1OGVmMGMzNzQ3NTFmNjY3NjU3ZmUzOA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-12-08T11:14:09Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-12-08T11:14:09Z"}, "message": "[arm] Don't strip off all architecture features from -march passed to assembler\n\nWhen GCC invokes the assembler it generates a sanitized version of the\nuser-specified -march option to pass through, since the assembler does\nnot understand all the new FPU-related architectural options.\nUnfortunately it goes too far and strips off all the architectural\nextensions, including some that are unrelated to the -mfpu variant\nselected.\n\nAgain, this doesn't really matter when compiling C code because the\ncompiler will override the command-line specified architecture with\ndirectives in the assembly file itself, but when using the compiler\ndriver to invoke the assembler the only indiciation of the desired\narchitecture might come from the command line.\n\nWe fix this by adjusting the canonicalization pass to remove any\noption that only specifies features that can be expressed by -mfpu\n(any that go beyond that are already supported by the assembler).  We\ndo have to take care to re-order the options, though as the assembler\nexpects feature options to be in a canonical order (unlike the\ncompiler, where ordering is handled left-to-right: there's only a\ndifference if there are negation options, but a canonicalized\narchitecture string shouldn't have any of those).  We do this by\nrecording which options we need and then sorting the final list\nalphabetically.\n\n\t* common/config/arm/arm-common.c: Include <algorithm>.\n\t(INCLUDE_VECTOR): Define.\n\t(compare_opt_names): New function.\n\t(arm_rewrite_selected_arch): Only strip out extensions that can be\n\texpressed through -mfpu.  Sort the remaining extensions\n\talphabetically.\n\nFrom-SVN: r255503", "tree": {"sha": "c0b3bd15a4cdcad7e63dce4caaa4dd7e6cfd3143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b3bd15a4cdcad7e63dce4caaa4dd7e6cfd3143"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24531cd697943064c58ef0c374751f667657fe38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24531cd697943064c58ef0c374751f667657fe38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24531cd697943064c58ef0c374751f667657fe38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24531cd697943064c58ef0c374751f667657fe38/comments", "author": null, "committer": null, "parents": [{"sha": "940269b679a628dbb1f3891b7e57b80db6743615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940269b679a628dbb1f3891b7e57b80db6743615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940269b679a628dbb1f3891b7e57b80db6743615"}], "stats": {"total": 108, "additions": 96, "deletions": 12}, "files": [{"sha": "6e5eefdbc602615383b8c24fc9ba4993b7ca5f39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24531cd697943064c58ef0c374751f667657fe38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24531cd697943064c58ef0c374751f667657fe38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24531cd697943064c58ef0c374751f667657fe38", "patch": "@@ -1,3 +1,12 @@\n+2017-06-08  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* common/config/arm/arm-common.c: Include <algorithm>.\n+\t(INCLUDE_VECTOR): Define.\n+\t(compare_opt_names): New function.\n+\t(arm_rewrite_selected_arch): Only strip out extensions that can be\n+\texpressed through -mfpu.  Sort the remaining extensions\n+\talphabetically.\n+\n 2017-06-08  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.h (arm_asm_auto_mfpu): Declare."}, {"sha": "d6374276a109cb8bc0dbe8640af4accc57a81496", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 87, "deletions": 12, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24531cd697943064c58ef0c374751f667657fe38/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24531cd697943064c58ef0c374751f667657fe38/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=24531cd697943064c58ef0c374751f667657fe38", "patch": "@@ -18,6 +18,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #define INCLUDE_LIST\n+#define INCLUDE_VECTOR\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -30,6 +31,7 @@\n #include \"flags.h\"\n #include \"sbitmap.h\"\n #include \"diagnostic.h\"\n+#include <algorithm>\n \n /* Set default optimization options.  */\n static const struct default_options arm_option_optimization_table[] =\n@@ -114,26 +116,99 @@ arm_rewrite_mcpu (int argc, const char **argv)\n   return arm_rewrite_selected_cpu (argv[argc - 1]);\n }\n \n-/* Truncate NAME at the first '+' character seen, or return\n-   NAME unmodified.  Similar to arm_rewrite_selected_cpu, but we must\n-   preserve '.' as that is part of some architecture names.  */\n+static bool\n+compare_opt_names (const char *first, const char *second)\n+{\n+  for (int i = 0; ; i++)\n+    if (first[i] == 0\n+\t|| first[i] < second[i])\n+      return true;\n+  return false;\n+}\n \n+/* Rewrite the architecture string for passing to the assembler.\n+   Although the syntax is similar we cannot assume that it supports\n+   the newer FP related options.  So strip any option that only\n+   defines features in the standard -mfpu options out.  We'll generate\n+   a suitable -mfpu option elsewhere to carry that information.  NAME\n+   should already have been canonicalized, so we do not expect to\n+   encounter +no.. options that remove features.  A final problem is\n+   that the assembler expects the feature extensions to be listed\n+   alphabetically, so we build a list of required options and then\n+   sort them into canonical order in the resulting string.  */\n const char *\n arm_rewrite_selected_arch (const char *name)\n {\n-  static char output_buf[ARM_CPU_NAME_LENGTH + 1] = {0};\n-  char *arg_pos;\n+  /* The result we return needs to be semi persistent, so handle being\n+     re-invoked.  */\n+  static char *asm_arch = NULL;\n \n-  strncpy (output_buf, name, ARM_CPU_NAME_LENGTH);\n-  output_buf[ARM_CPU_NAME_LENGTH] = 0;\n+  if (asm_arch)\n+    {\n+      free (asm_arch);\n+      asm_arch = NULL;\n+    }\n \n-  arg_pos = strchr (output_buf, '+');\n+  const char *arg_pos = strchr (name, '+');\n \n-  /* If we found a '+' truncate the entry at that point.  */\n-  if (arg_pos)\n-    *arg_pos = '\\0';\n+  /* No extension options? just return the original string.  */\n+  if (arg_pos == NULL)\n+    return name;\n \n-  return output_buf;\n+  const arch_option *arch_opt\n+    = arm_parse_arch_option_name (all_architectures, \"-march\", name);\n+\n+  auto_sbitmap fpu_bits (isa_num_bits);\n+  static const enum isa_feature fpu_bitlist[]\n+    = { ISA_ALL_FPU_INTERNAL, isa_nobit };\n+\n+  arm_initialize_isa (fpu_bits, fpu_bitlist);\n+\n+  auto_sbitmap opt_bits (isa_num_bits);\n+\n+  /* Ensure that the resulting string is large enough for the result.  We\n+     never add options, so using strdup here will ensure that.  */\n+  asm_arch = xstrdup (name);\n+  asm_arch[arg_pos - name] = '\\0';\n+\n+  std::vector<const char *>optlist;\n+\n+  while (arg_pos)\n+    {\n+      const char *end = strchr (arg_pos + 1, '+');\n+      size_t len = end ? end - arg_pos : strlen (arg_pos);\n+\n+      for (const cpu_arch_extension *entry = arch_opt->common.extensions;\n+\t   entry->name != NULL;\n+\t   entry++)\n+\t{\n+\t  if (strncmp (entry->name, arg_pos + 1, len - 1) == 0\n+\t      && entry->name[len - 1] == '\\0')\n+\t    {\n+\t      /* Don't expect removal options.  */\n+\t      gcc_assert (!entry->remove);\n+\t      arm_initialize_isa (opt_bits, entry->isa_bits);\n+\t      if (!bitmap_subset_p (opt_bits, fpu_bits))\n+\t\toptlist.push_back (entry->name);\n+\t      bitmap_clear (opt_bits);\n+\t      break;\n+\t    }\n+\t}\n+\n+      arg_pos = end;\n+    }\n+\n+  std::sort (optlist.begin (), optlist.end (), compare_opt_names);\n+\n+  for (std::vector<const char *>::iterator opt_iter = optlist.begin ();\n+       opt_iter != optlist.end ();\n+       ++opt_iter)\n+    {\n+      strcat (asm_arch, \"+\");\n+      strcat (asm_arch, (*opt_iter));\n+    }\n+\n+  return asm_arch;\n }\n \n /* Called by the driver to rewrite a name passed to the -march"}]}