{"sha": "67c935c8232f6fe96a4be2dc27287b7ace839c67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdjOTM1YzgyMzJmNmZlOTZhNGJlMmRjMjcyODdiN2FjZTgzOWM2Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-09-23T13:12:18Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-09-23T13:12:18Z"}, "message": "Minor modref optimization and statistics fix\n\nthis patch fixes bug in tracking memory stats and also I have noticed that while\nthe pass takes care to stop traking things when things are obviously out of hand\nit still keeps summaries that have no useful info for loads or stores and also\nmany summaries are just copying const/pure attributes.  This patch thus also\nadds logic to detect if summary is useful and drop it early otherwise.  This\nreduces number of queries to the oracle and saves memory/lto streaming.\n\nFor cc1plus LTO build (configured with --disable-plugin\n--enable-checking=release --with-build-config=lto) I now get:\n\nAlias oracle query stats:\n  refs_may_alias_p: 62488734 disambiguations, 72660949 queries\n  ref_maybe_used_by_call_p: 128863 disambiguations, 63393551 queries\n  call_may_clobber_ref_p: 16013 disambiguations, 21776 queries\n  nonoverlapping_component_refs_p: 0 disambiguations, 37628 queries\n  nonoverlapping_refs_since_match_p: 19397 disambiguations, 55370 must overlaps, 75516 queries\n  aliasing_component_refs_p: 54741 disambiguations, 752198 queries\n  TBAA oracle: 21632692 disambiguations 52565147 queries\n               15656420 are in alias set 0\n               10108172 queries asked about the same object\n               124 queries asked about the same alias set\n               0 access volatile\n               3640460 are dependent in the DAG\n               1527279 are aritificially in conflict with void *\n\nModref stats:\n  modref use: 5712 disambiguations, 31221 queries\n  modref clobber: 684316 disambiguations, 1010000 queries\n  1779717 tbaa queries (1.762096 per modref query)\n\nPTA query stats:\n  pt_solution_includes: 947334 disambiguations, 13601373 queries\n  pt_solutions_intersect: 1011662 disambiguations, 13139565 queries\n\nThe number of queries should change, but the number of disambiguations should\nnot.  However comparing with stats here\nhttps://gcc.gnu.org/pipermail/gcc-patches/2020-September/554309.html\nI see about 50% drop in clobber disambiguations. There is however same drop in\nother alias oracle stats.  I suppose someting changed in meanwhile on mainline\nbecause I was basing that on older tree.  I tried to proofread changes between\nmainline and branch and they seem all quite obvious.\n\nThis is consistent with what I get on tramp3d:\n\nAlias oracle query stats:\n  refs_may_alias_p: 2051320 disambiguations, 2312132 queries\n  ref_maybe_used_by_call_p: 7058 disambiguations, 2088222 queries\n  call_may_clobber_ref_p: 232 disambiguations, 232 queries\n  nonoverlapping_component_refs_p: 0 disambiguations, 4339 queries\n  nonoverlapping_refs_since_match_p: 329 disambiguations, 10200 must overlaps, 10616 queries\n  aliasing_component_refs_p: 857 disambiguations, 34639 queries\n  TBAA oracle: 886768 disambiguations 1670635 queries\n               131572 are in alias set 0\n               461689 queries asked about the same object\n               0 queries asked about the same alias set\n               0 access volatile\n               190291 are dependent in the DAG\n               315 are aritificially in conflict with void *\n\nModref stats:\n  modref use: 430 disambiguations, 1885 queries\n  modref clobber: 9657 disambiguations, 16076 queries\n  19027 tbaa queries (1.183566 per modref query)\n\nPTA query stats:\n  pt_solution_includes: 311756 disambiguations, 524179 queries\n  pt_solutions_intersect: 129689 disambiguations, 415878 queries\n\nIn both cases the number of disambiguations should be same (queries are not\ncomparable).\n\nBootstrapped/regtested x86_64-linux, comitted.\n\ngcc/ChangeLog:\n\n2020-09-23  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* ipa-modref.c (modref_summary::lto_useful_p): New member function.\n\t(modref_summary::useful_p): New member function.\n\t(analyze_function): Drop useless summaries.\n\t(modref_write): Skip useless summaries.\n\t(pass_ipa_modref::execute): Drop useless summaries.\n\t* ipa-modref.h (struct GTY): Declare useful_p and lto_useful_p.\n\t* tree-ssa-alias.c (dump_alias_stats): Fix.\n\t(modref_may_conflict): Fix stats.", "tree": {"sha": "a12015b4c691ae86d04b67c7ccb659f7eef0d944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a12015b4c691ae86d04b67c7ccb659f7eef0d944"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67c935c8232f6fe96a4be2dc27287b7ace839c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c935c8232f6fe96a4be2dc27287b7ace839c67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c935c8232f6fe96a4be2dc27287b7ace839c67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c935c8232f6fe96a4be2dc27287b7ace839c67/comments", "author": null, "committer": null, "parents": [{"sha": "bc909324bda71543add2229adfa59d8daff5f0db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc909324bda71543add2229adfa59d8daff5f0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc909324bda71543add2229adfa59d8daff5f0db"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "3e65159934e54a1a1a2395db56df801e00862a77", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c935c8232f6fe96a4be2dc27287b7ace839c67/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c935c8232f6fe96a4be2dc27287b7ace839c67/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=67c935c8232f6fe96a4be2dc27287b7ace839c67", "patch": "@@ -106,6 +106,36 @@ modref_summary::~modref_summary ()\n     ggc_delete (stores_lto);\n }\n \n+/* Return true if lto summary is potentially useful for optimization.  */\n+\n+bool\n+modref_summary::lto_useful_p (int ecf_flags)\n+{\n+  if (ecf_flags & (ECF_CONST | ECF_NOVOPS))\n+    return false;\n+  if (loads_lto && !loads_lto->every_base)\n+    return true;\n+  if (ecf_flags & ECF_PURE)\n+    return false;\n+  return stores_lto && !stores_lto->every_base;\n+}\n+\n+/* Return true if summary is potentially useful for optimization.  */\n+\n+bool\n+modref_summary::useful_p (int ecf_flags)\n+{\n+  if (ecf_flags & (ECF_CONST | ECF_NOVOPS))\n+    return false;\n+  if (lto_useful_p (ecf_flags))\n+    return true;\n+  if (loads && !loads->every_base)\n+    return true;\n+  if (ecf_flags & ECF_PURE)\n+    return false;\n+  return stores && !loads->every_base;\n+}\n+\n /* Dump records TT to OUT.  */\n \n static void\n@@ -588,8 +618,10 @@ static void\n analyze_function (function *f, bool ipa)\n {\n   if (dump_file)\n-    fprintf (dump_file, \"modref analyzing '%s' (ipa=%i)...\\n\",\n-\t     function_name (f), ipa);\n+    fprintf (dump_file, \"modref analyzing '%s' (ipa=%i)%s%s\\n\",\n+\t     function_name (f), ipa,\n+\t     TREE_READONLY (current_function_decl) ? \" (const)\" : \"\",\n+\t     DECL_PURE_P (current_function_decl) ? \" (pure)\" : \"\");\n \n   /* Don't analyze this function if it's compiled with -fno-strict-aliasing.  */\n   if (!flag_ipa_modref)\n@@ -646,6 +678,7 @@ analyze_function (function *f, bool ipa)\n \t\t\t\t    param_modref_max_refs);\n     }\n   summary->finished = false;\n+  int ecf_flags = flags_from_decl_or_type (current_function_decl);\n \n   /* Analyze each statement in each basic block of the function.  If the\n      statement cannot be analyzed (for any reason), the entire function cannot\n@@ -656,7 +689,8 @@ analyze_function (function *f, bool ipa)\n       gimple_stmt_iterator si;\n       for (si = gsi_after_labels (bb); !gsi_end_p (si); gsi_next (&si))\n \t{\n-\t  if (!analyze_stmt (summary, gsi_stmt (si), ipa))\n+\t  if (!analyze_stmt (summary, gsi_stmt (si), ipa)\n+\t      || !summary->useful_p (ecf_flags))\n \t    {\n \t      cgraph_node *fnode = cgraph_node::get (current_function_decl);\n \t      summaries->remove (fnode);\n@@ -927,9 +961,11 @@ modref_write ()\n     {\n       symtab_node *snode = lto_symtab_encoder_deref (encoder, i);\n       cgraph_node *cnode = dyn_cast <cgraph_node *> (snode);\n+      modref_summary *r;\n \n       if (cnode && cnode->definition && !cnode->alias\n-\t  && summaries->get (cnode))\n+\t  && (r = summaries->get (cnode))\n+\t  && r->lto_useful_p (flags_from_decl_or_type (cnode->decl)))\n \tcount++;\n     }\n   streamer_write_uhwi (ob, count);\n@@ -944,7 +980,7 @@ modref_write ()\n \n \t  modref_summary *r = summaries->get (cnode);\n \n-\t  if (!r)\n+\t  if (!r || !r->lto_useful_p (flags_from_decl_or_type (cnode->decl)))\n \t    continue;\n \n \t  streamer_write_uhwi (ob, lto_symtab_encoder_encode (encoder, cnode));\n@@ -1233,7 +1269,7 @@ unsigned int pass_ipa_modref::execute (function *)\n \n \t      if (dump_file)\n \t\tfprintf (dump_file, \"    Call to %s\\n\",\n-\t\t\t cur->dump_name ());\n+\t\t\t callee_edge->callee->dump_name ());\n \n \t      /* We can not safely optimize based on summary of callee if it\n \t\t does not always bind to current def: it is possible that\n@@ -1278,7 +1314,7 @@ unsigned int pass_ipa_modref::execute (function *)\n \t\t      its_hopeless = true;\n \t\t      if (dump_file && avail <= AVAIL_INTERPOSABLE)\n \t\t\tfprintf (dump_file, \"      Call target interposable\"\n-\t\t\t\t \"or not available\\n\");\n+\t\t\t\t \" or not available\\n\");\n \t\t      else if (dump_file)\n \t\t\tfprintf (dump_file, \"      No call target summary\\n\");\n \t\t      break;"}, {"sha": "152e7154aed65c8bd134ad64ff27d532354aec38", "filename": "gcc/ipa-modref.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c935c8232f6fe96a4be2dc27287b7ace839c67/gcc%2Fipa-modref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c935c8232f6fe96a4be2dc27287b7ace839c67/gcc%2Fipa-modref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.h?ref=67c935c8232f6fe96a4be2dc27287b7ace839c67", "patch": "@@ -41,6 +41,8 @@ struct GTY(()) modref_summary\n   modref_summary ();\n   ~modref_summary ();\n   void dump (FILE *);\n+  bool useful_p (int ecf_flags);\n+  bool lto_useful_p (int ecf_flags);\n };\n \n modref_summary *get_modref_function_summary (cgraph_node *func);"}, {"sha": "18ff529b491a4ff8e3dd27a8c7f67d2c9ddcf0e4", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c935c8232f6fe96a4be2dc27287b7ace839c67/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c935c8232f6fe96a4be2dc27287b7ace839c67/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=67c935c8232f6fe96a4be2dc27287b7ace839c67", "patch": "@@ -170,7 +170,7 @@ dump_alias_stats (FILE *s)\n   fprintf (s, \"  modref clobber: \"\n \t   HOST_WIDE_INT_PRINT_DEC\" disambiguations, \"\n \t   HOST_WIDE_INT_PRINT_DEC\" queries\\n  \"\n-\t   HOST_WIDE_INT_PRINT_DEC\" tbaa querries (%f per modref querry)\\n\",\n+\t   HOST_WIDE_INT_PRINT_DEC\" tbaa queries (%f per modref query)\\n\",\n \t   alias_stats.modref_clobber_no_alias,\n \t   alias_stats.modref_clobber_no_alias\n \t   + alias_stats.modref_clobber_may_alias,\n@@ -2448,9 +2448,9 @@ modref_may_conflict (modref_tree <alias_set_type> *tt, ao_ref *ref, bool tbaa_p)\n \n       if (tbaa_p && flag_strict_aliasing)\n \t{\n+\t  alias_stats.modref_tests++;\n \t  if (!alias_sets_conflict_p (base_set, base_node->base))\n \t    continue;\n-\t  alias_stats.modref_tests++;\n \t  num_tests++;\n \t}\n       else\n@@ -2465,9 +2465,9 @@ modref_may_conflict (modref_tree <alias_set_type> *tt, ao_ref *ref, bool tbaa_p)\n \t    return true;\n \t  if (!flag_strict_aliasing)\n \t    return true;\n+\t  alias_stats.modref_tests++;\n \t  if (alias_sets_conflict_p (ref_set, ref_node->ref))\n \t    return true;\n-\t  alias_stats.modref_tests++;\n \t  num_tests++;\n \t  if (num_tests >= max_tests)\n \t    return true;"}]}