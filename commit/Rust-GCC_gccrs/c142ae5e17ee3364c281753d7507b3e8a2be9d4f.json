{"sha": "c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0MmFlNWUxN2VlMzM2NGMyODE3NTNkNzUwN2IzZThhMmJlOWQ0Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-12-23T15:47:52Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-12-23T15:53:12Z"}, "message": "i386: Fix __builtin_trunc with FE_DOWNWARD rounding direction [PR96793]\n\nx86_expand_truncdf_32 expander uses x86_sse_copysign_to_positive, which\nis unable to change the sign from - to +.  When FE_DOWNWARD rounding\ndirection is in effect, the expanded sequence that involves subtraction\ncan trigger x - x = -0.0 special rule.  x86_sse_copysign_to_positive\nfails to change the sign of the intermediate value, assumed to always\nbe positive, back to positive.\n\nThe patch adds one extra fabs that strips the sign from the intermediate\nvalue when flag_rounding_math is in effect.\n\n2020-12-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/96793\n\t* config/i386/i386-expand.c (ix86_expand_truncdf_32):\n\tRemove the sign of the intermediate value for flag_rounding_math.\n\ngcc/testsuite/\n\tPR target/96793\n\t* gcc.target/i386/pr96793-1.c: New test.", "tree": {"sha": "0530852ace4ddf352e712ef5bff4aec4550ab4c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0530852ace4ddf352e712ef5bff4aec4550ab4c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "544f477536010f055c26bc959b18fccf67902750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544f477536010f055c26bc959b18fccf67902750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544f477536010f055c26bc959b18fccf67902750"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "c856489c04635d01a6f0bf646ef767f3fcdb44b7", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "patch": "@@ -16534,7 +16534,7 @@ void\n ix86_expand_truncdf_32 (rtx operand0, rtx operand1)\n {\n   machine_mode mode = GET_MODE (operand0);\n-  rtx xa, mask, TWO52, one, res, smask, tmp;\n+  rtx xa, xa2, TWO52, tmp, one, res, mask;\n   rtx_code_label *label;\n \n   /* C code for SSE variant we expand below.\n@@ -16557,28 +16557,29 @@ ix86_expand_truncdf_32 (rtx operand0, rtx operand1)\n   emit_move_insn (res, operand1);\n \n   /* xa = abs (operand1) */\n-  xa = ix86_expand_sse_fabs (res, &smask);\n+  xa = ix86_expand_sse_fabs (res, &mask);\n \n   /* if (!isless (xa, TWO52)) goto label; */\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n \n-  /* res = xa + TWO52 - TWO52; */\n-  tmp = expand_simple_binop (mode, PLUS, xa, TWO52, NULL_RTX, 0, OPTAB_DIRECT);\n-  tmp = expand_simple_binop (mode, MINUS, tmp, TWO52, tmp, 0, OPTAB_DIRECT);\n-  emit_move_insn (res, tmp);\n+  /* xa2 = xa + TWO52 - TWO52; */\n+  xa2 = expand_simple_binop (mode, PLUS, xa, TWO52, NULL_RTX, 0, OPTAB_DIRECT);\n+  xa2 = expand_simple_binop (mode, MINUS, xa2, TWO52, xa2, 0, OPTAB_DIRECT);\n \n   /* generate 1.0 */\n   one = force_reg (mode, const_double_from_real_value (dconst1, mode));\n \n-  /* Compensate: res = xa2 - (res > xa ? 1 : 0)  */\n-  mask = ix86_expand_sse_compare_mask (UNGT, res, xa, false);\n-  emit_insn (gen_rtx_SET (mask, gen_rtx_AND (mode, mask, one)));\n+  /* Compensate: xa2 = xa2 - (xa2 > xa ? 1 : 0)  */\n+  tmp = ix86_expand_sse_compare_mask (UNGT, xa2, xa, false);\n+  emit_insn (gen_rtx_SET (tmp, gen_rtx_AND (mode, one, tmp)));\n   tmp = expand_simple_binop (mode, MINUS,\n-\t\t\t     res, mask, NULL_RTX, 0, OPTAB_DIRECT);\n-  emit_move_insn (res, tmp);\n+\t\t\t     xa2, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n+  /* Remove the sign with FE_DOWNWARD, where x - x = -0.0.  */\n+  if (flag_rounding_math)\n+    tmp = ix86_expand_sse_fabs (tmp, NULL);\n \n-  /* res = copysign (res, operand1) */\n-  ix86_sse_copysign_to_positive (res, res, force_reg (mode, operand1), smask);\n+  /* res = copysign (xa2, operand1) */\n+  ix86_sse_copysign_to_positive (res, tmp, res, mask);\n \n   emit_label (label);\n   LABEL_NUSES (label) = 1;"}, {"sha": "b205d39f63ceb20929da276523e6d6f87bacd23b", "filename": "gcc/testsuite/gcc.target/i386/pr96793-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96793-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96793-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96793-1.c?ref=c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/96793 */\n+/* { dg-do run { target sse2_runtime } } */\n+/* { dg-require-effective-target fenv } */\n+/* { dg-options \"-O2 -frounding-math -msse2 -mno-sse4 -mfpmath=sse\" } */\n+\n+#include <fenv.h>\n+\n+double\n+__attribute__((noinline))\n+test (double value)\n+{\n+  return __builtin_trunc (value);\n+}\n+\n+int\n+main ()\n+{\n+  double result;\n+\n+  fesetround (FE_DOWNWARD);\n+\n+  result = test (0.25);\n+\n+  if (__builtin_signbit (result) != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}