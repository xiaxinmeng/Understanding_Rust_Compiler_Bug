{"sha": "b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJlNjFkZGU1Yzc4YWJlNGFkY2Y1ODcyZDdhMTNlMDAzZjU4NWMxZg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2005-04-21T22:19:42Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-04-21T22:19:42Z"}, "message": "ChangeLog: New.\n\n        * ChangeLog: New.\n        * Make-lang.in: Likewise.\n        * config-lang.in: Likewise.\n        * lang-specs.h: Likewise.\n        * objcp-decl.c: Likewise.\n        * objcp-decl.h: Likewise.\n        * objcp-lang.c: Likewise.\n\nFrom-SVN: r98530", "tree": {"sha": "db7fdb03591531341bb2ee033bf2f42a1f54d486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db7fdb03591531341bb2ee033bf2f42a1f54d486"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/comments", "author": null, "committer": null, "parents": [{"sha": "dbb743654f3b7d96ba40b9683feed4cb20e4435d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb743654f3b7d96ba40b9683feed4cb20e4435d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb743654f3b7d96ba40b9683feed4cb20e4435d"}], "stats": {"total": 622, "additions": 622, "deletions": 0}, "files": [{"sha": "85bf984d3f3b818b4bf5f0b36b83c649d67e2e9b", "filename": "gcc/objcp/ChangeLog", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "patch": "@@ -0,0 +1,9 @@\n+2005-04-21  Mike Stump  <mrs@apple.com>\n+\n+\t* ChangeLog: New.\n+\t* Make-lang.in: Likewise.\n+\t* config-lang.in: Likewise.\n+\t* lang-specs.h: Likewise.\n+\t* objcp-decl.c: Likewise.\n+\t* objcp-decl.h: Likewise.\n+\t* objcp-lang.c: Likewise."}, {"sha": "51875e44d51892fb764d442ac04a2cdd8269edc1", "filename": "gcc/objcp/Make-lang.in", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FMake-lang.in?ref=b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "patch": "@@ -0,0 +1,138 @@\n+# Top level -*- makefile -*- fragment for GNU Objective-C++\n+#   Copyright (C) 2005 Free Software Foundation, Inc.\n+#   Contributed by Ziemowit Laski  <zlaski@apple.com>\n+\n+#This file is part of GCC.\n+\n+#GCC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 2, or (at your option)\n+#any later version.\n+\n+#GCC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GCC; see the file COPYING.  If not, write to\n+#the Free Software Foundation, 59 Temple Place - Suite 330,\n+#Boston, MA 02111-1307, USA.\n+\n+# This file provides the language dependent support in the main Makefile.\n+# Each language makefile fragment must provide the following targets:\n+#\n+# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,\n+# foo.install-normal, foo.install-common, foo.install-man,\n+# foo.uninstall,\n+# foo.mostlyclean, foo.clean, foo.distclean,\n+# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4\n+#\n+# where `foo' is the name of the language.\n+#\n+# It should also provide rules for:\n+#\n+# - making any compiler driver (eg: g++)\n+# - the compiler proper (eg: cc1plus)\n+# - define the names for selecting the language in LANGUAGES.\n+\n+#\f\n+# Define the names for selecting Objective-C++ in LANGUAGES.\n+OBJ-C++ obj-c++: cc1objplus$(exeext)\n+\n+# Tell GNU make to ignore these if they exist.\n+.PHONY: Obj-c++ obj-C++\n+\n+# Use maximal warnings for this front end.  Also, make ObjC and C++\n+# headers accessible.\n+objcp-warn = $(STRICT_WARN) -DOBJCPLUS -I$(srcdir)/objc -I$(srcdir)/cp\n+\n+# Language-specific object files for Objective C++.\n+OBJCXX_OBJS = objcp/objcp-act.o objcp/objcp-lang.o objcp/objcp-decl.o \\\n+   $(CXX_AND_OBJCXX_OBJS)\n+\n+cc1objplus$(exeext): $(OBJCXX_OBJS) $(BACKEND) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n+\t\t$(OBJCXX_OBJS) $(BACKEND) $(LIBS)\n+\n+# Objective C++ language specific files.\n+\n+objcp/objcp-lang.o : objcp/objcp-lang.c \\\n+  $(CXX_TREE_H) $(TM_H) toplev.h debug.h langhooks.h objc/objc-act.h \\\n+  $(LANGHOOKS_DEF_H) c-common.h gtype-objcp.h $(CXX_PRETTY_PRINT_H) \\\n+  $(DIAGNOSTIC_H) cp/cp-objcp-common.h\n+\n+objcp/objcp-decl.o : objcp/objcp-decl.c \\\n+   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_TREE_H) \\\n+   toplev.h $(GGC_H) c-pragma.h input.h flags.h output.h objc/objc-act.h \\\n+   objcp/objcp-decl.h\n+\n+# The following must be an explicit rule; please keep in sync with the implicit\n+# one in Makefile.in.\n+objcp/objcp-act.o : objc/objc-act.c \\\n+   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) $(TM_P_H) \\\n+   $(EXPR_H) $(TARGET_H) $(CXX_TREE_H) diagnostic.h toplev.h flags.h \\\n+   objc/objc-act.h input.h function.h output.h debug.h langhooks.h \\\n+   objcp/objcp-decl.h $(LANGHOOKS_DEF_H) $(HASHTAB_H) gt-objc-objc-act.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\n+po-generated:\n+\n+gtype-objcp.h : s-gtype ; @true\n+\n+#\f\n+# Build hooks:\n+\n+obj-c++.all.build:\n+obj-c++.all.cross:\n+obj-c++.start.encap:\n+obj-c++.rest.encap:\n+obj-c++.info:\n+obj-c++.srcinfo:\n+obj-c++.srcextra:\n+obj-c++.man:\n+\n+obj-c++.tags: force\n+\tcd $(srcdir)/objcp; etags -o TAGS.sub *.y *.c *.h; \\\n+\tetags --include TAGS.sub --include ../TAGS.sub\n+\n+lang_checks += check-obj-c++\n+\n+#\f\n+# Install hooks:\n+# cc1objplus is installed elsewhere as part of $(COMPILERS).\n+\n+obj-c++.install-normal:\n+\n+obj-c++.install-common:\n+\n+obj-c++.install-man:\n+\n+obj-c++.uninstall:\n+#\f\n+# Clean hooks:\n+# A lot of the ancillary files are deleted by the main makefile.\n+# We just have to delete files specific to us.\n+obj-c++.mostlyclean:\n+\t-rm -f objcp/*$(objext)\n+\t-rm -f objcp/*$(coverageexts)\n+obj-c++.clean: obj-c++.mostlyclean\n+obj-c++.distclean:\n+\t-rm -f objcp/config.status objcp/Makefile\n+obj-c++.maintainer-clean:\n+\n+#\f\n+# Stage hooks:\n+\n+obj-c++.stage1: stage1-start\n+\t-mv objcp/*$(objext) stage1/objcp\n+obj-c++.stage2: stage2-start\n+\t-mv objcp/*$(objext) stage2/objcp\n+obj-c++.stage3: stage3-start\n+\t-mv objcp/*$(objext) stage3/objcp\n+obj-c++.stage4: stage4-start\n+\t-mv objcp/*$(objext) stage4/objcp\n+obj-c++.stageprofile: stageprofile-start\n+\t-mv objcp/*$(objext) stageprofile/objcp\n+obj-c++.stagefeedback: stagefeedback-start\n+\t-mv objcp/*$(objext) stagefeedback/objcp"}, {"sha": "b5374ddc5c3dbedf15d47f5dc8e2aa9c25ced201", "filename": "gcc/objcp/config-lang.in", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fconfig-lang.in?ref=b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "patch": "@@ -0,0 +1,43 @@\n+# Top level configure fragment for GNU Objective-C++.\n+#   Copyright (C) 2005 Free Software Foundation, Inc.\n+#   Contributed by Ziemowit Laski <zlaski@apple.com>\n+\n+#This file is part of GCC.\n+\n+#GCC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 2, or (at your option)\n+#any later version.\n+\n+#GCC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GCC; see the file COPYING.  If not, write to\n+#the Free Software Foundation, 59 Temple Place - Suite 330,\n+#Boston, MA 02111-1307, USA.\n+\n+# Configure looks for the existence of this file to auto-config each language.\n+# We define several parameters used by configure:\n+#\n+# language\t- name of language as it would appear in $(LANGUAGES)\n+# compilers\t- value to add to $(COMPILERS)\n+# stagestuff\t- files to add to $(STAGESTUFF)\n+\n+language=\"obj-c++\"\n+\n+compilers=\"cc1objplus\\$(exeext)\"\n+\n+stagestuff=\"\"\n+\n+# Per GCC Steering Committee.\n+build_by_default=\"no\"\n+\n+# By building the Objective-C and C++ front-ends, we will get\n+# the object files we need, along with the libraries (libstdc++,\n+# libobjc).\n+lang_requires=\"objc c++\"\n+\n+gtfiles=\"\\$(srcdir)/objcp/objcp-decl.c \\$(srcdir)/objc/objc-act.c \\$(srcdir)/objc/objc-act.h \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.c\""}, {"sha": "be25eb1edcc27af3a985f4f431de4d8bd9ee7d5e", "filename": "gcc/objcp/lang-specs.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Flang-specs.h?ref=b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "patch": "@@ -0,0 +1,60 @@\n+/* Definitions for specs for Objective-C++.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Contributed by Ziemowit Laski  <zlaski@apple.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This is the contribution to the `default_compilers' array in gcc.c for\n+   obj-c++.  It is based on -- and should be kept in sync with -- the g++\n+   spec (found in cp/lang-specs.h).  */\n+\n+#ifndef CPLUSPLUS_CPP_SPEC\n+#define CPLUSPLUS_CPP_SPEC 0\n+#endif\n+\n+  {\".mm\",  \"@objective-c++\", 0, 0, 0},\n+  {\".M\",   \"@objective-c++\", 0, 0, 0},\n+  {\"@objective-c++-header\",\n+    \"%{E|M|MM:cc1objplus -E %(cpp_options) %2 %(cpp_debug_options)}\\\n+     %{!E:%{!M:%{!MM:\\\n+       %{save-temps|no-integrated-cpp:cc1objplus -E\\\n+\t\t%(cpp_options) %2 -o %{save-temps:%b.mii} %{!save-temps:%g.mii} \\n}\\\n+      cc1objplus %{save-temps|no-integrated-cpp:-fpreprocessed %{save-temps:%b.mii} %{!save-temps:%g.mii}}\\\n+\t      %{!save-temps:%{!no-integrated-cpp:%(cpp_unique_options)}}\\\n+\t%(cc1_options) %2 %{+e1*}\\\n+        -o %g.s %{!o*:--output-pch=%i.gch} %W{o*:--output-pch=%*}%V}}}\",\n+     CPLUSPLUS_CPP_SPEC, 0, 0},\n+  {\"@objective-c++\",\n+    \"%{E|M|MM:cc1objplus -E %(cpp_options) %2 %(cpp_debug_options)}\\\n+     %{!E:%{!M:%{!MM:\\\n+       %{save-temps|no-integrated-cpp:cc1objplus -E\\\n+\t\t%(cpp_options) %2 -o %{save-temps:%b.mii} %{!save-temps:%g.mii} \\n}\\\n+      cc1objplus %{save-temps|no-integrated-cpp:-fpreprocessed %{save-temps:%b.mii} %{!save-temps:%g.mii}}\\\n+\t      %{!save-temps:%{!no-integrated-cpp:%(cpp_unique_options)}}\\\n+\t%(cc1_options) %2 %{+e1*}\\\n+       %{!fsyntax-only:%(invoke_as)}}}}\",\n+     CPLUSPLUS_CPP_SPEC, 0, 0},\n+  {\".mii\", \"@objective-c++-cpp-output\", 0, 0, 0},\n+  {\"@objective-c++-cpp-output\",\n+   \"%{!M:%{!MM:%{!E:\\\n+    cc1objplus -fpreprocessed %i %(cc1_options) %2 %{+e*}\\\n+    %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},\n+  {\"@objc++-cpp-output\",\n+   \"%{!M:%{!MM:%{!E:\\\n+    cc1objplus -fpreprocessed %i %(cc1_options) %2 %{+e*}\\\n+    %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},"}, {"sha": "7493a23f6091cfc917d5010529ba971fc264bb7d", "filename": "gcc/objcp/objcp-decl.c", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2Fobjcp-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2Fobjcp-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-decl.c?ref=b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "patch": "@@ -0,0 +1,134 @@\n+/* Process the ObjC-specific declarations and variables for \n+   the Objective-C++ compiler.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Contributed by Ziemowit Laski  <zlaski@apple.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"rtl.h\"\n+#include \"expr.h\"\n+#include \"cp-tree.h\"\n+#include \"c-common.h\"\n+#include \"flags.h\"\n+#include \"input.h\"\n+#include \"except.h\"\n+#include \"output.h\"\n+#include \"toplev.h\"\n+#include \"cpplib.h\"\n+#include \"debug.h\"\n+#include \"target.h\"\n+#include \"varray.h\"\n+\n+#include \"objc-act.h\"\n+#include \"objcp-decl.h\"\n+\n+/* Hacks to simulate start_struct() and finish_struct(). */\n+\n+tree \n+objcp_start_struct (enum tree_code code ATTRIBUTE_UNUSED, tree name)\n+{\n+  tree s;\n+  /* The idea here is to mimic the actions that the C++ parser takes when\n+     constructing 'extern \"C\" struct NAME {'.  */\n+  push_lang_context (lang_name_c);\n+  if (!name)\n+    name = make_anon_name ();\n+  s = xref_tag (record_type, name, ts_current, 0);\n+  CLASSTYPE_DECLARED_CLASS (s) = 0;  /* this is a 'struct', not a 'class'.  */\n+  xref_basetypes (s, NULL_TREE);     /* no base classes here!  */\n+\n+  return begin_class_definition (s);\n+}\n+\n+tree \n+objcp_finish_struct (tree t, tree fieldlist, tree attributes)\n+{\n+  tree field, next_field;\n+\n+  for (field = fieldlist; field; field = next_field)\n+  {\n+    next_field = TREE_CHAIN (field);      /* insert one field at a time;  */\n+    TREE_CHAIN (field) = NULL_TREE;       /* otherwise, grokfield croaks. */\n+    finish_member_declaration (field);\n+  }\n+  t = finish_struct (t, attributes);\n+  pop_lang_context ();\n+\n+  return t;\n+}\n+\n+void\n+objcp_finish_function (void)\n+{\n+  /* The C++ flavor of 'finish_function' does not generate RTL -- one has\n+     to call 'expand_or_defer_fn' to do that.  */\n+  expand_or_defer_fn (finish_function (0));\n+}\n+\n+tree\n+objcp_lookup_name (tree name)\n+{\n+  return lookup_name (name, -1);\n+}\n+\n+tree\n+objcp_xref_tag (enum tree_code code ATTRIBUTE_UNUSED, tree name)\n+{\n+  return xref_tag (record_type, name, true, false);\n+}\n+\n+tree\n+objcp_build_component_ref (tree datum, tree component)\n+{\n+  /* The 'build_component_ref' routine has been removed from the C++\n+     front-end, but 'finish_class_member_access_expr' seems to be\n+     a worthy substitute.  */\n+  return finish_class_member_access_expr (datum, component);\n+}\n+\n+int\n+objcp_comptypes (tree type1, tree type2)\n+{     \n+  return comptypes (type1, type2, COMPARE_STRICT);\n+}\n+\n+tree\n+objcp_begin_compound_stmt (int flags ATTRIBUTE_UNUSED)\n+{\n+  return begin_compound_stmt (0);\n+}\n+\n+tree\n+objcp_end_compound_stmt (tree stmt, int flags ATTRIBUTE_UNUSED)\n+{\n+  /* The following has been snarfed from\n+     cp/semantics.c:finish_compound_stmt().  */\n+  if (TREE_CODE (stmt) == BIND_EXPR)\n+    BIND_EXPR_BODY (stmt) = do_poplevel (BIND_EXPR_BODY (stmt));\n+  else if (STATEMENT_LIST_NO_SCOPE (stmt))\n+    stmt = pop_stmt_list (stmt);\n+  else\n+    stmt = do_poplevel (stmt);\n+\n+  return stmt;\n+}"}, {"sha": "39cad46d2e9a8a353a5b3ffe038a5905b4904648", "filename": "gcc/objcp/objcp-decl.h", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2Fobjcp-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2Fobjcp-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-decl.h?ref=b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "patch": "@@ -0,0 +1,95 @@\n+/* Process the ObjC-specific declarations and variables for \n+   the Objective-C++ compiler.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Contributed by Ziemowit Laski  <zlaski@apple.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#ifndef GCC_OBJCP_DECL_H\n+#define GCC_OBJCP_DECL_H\n+\n+extern tree objcp_start_struct (enum tree_code, tree);\n+extern tree objcp_finish_struct (tree, tree, tree);\n+extern void objcp_finish_function (void);\n+extern tree objcp_lookup_name (tree);\n+extern tree objcp_build_function_call (tree, tree);\n+extern tree objcp_xref_tag (enum tree_code, tree);\n+extern tree objcp_build_component_ref (tree, tree);\n+extern int objcp_comptypes (tree, tree);\n+extern tree objcp_builtin_function (const char *, tree, int, \n+\t\t\t\t    enum built_in_class, const char *, tree);\n+extern tree objcp_begin_compound_stmt (int);\n+extern tree objcp_end_compound_stmt (tree, int);\n+\n+/* Now \"cover up\" the corresponding C++ functions if required (NB: the \n+   OBJCP_ORIGINAL_FUNCTION macro, shown below, can still be used to\n+   invoke the original C++ functions if needed).  */\n+#ifdef OBJCP_REMAP_FUNCTIONS\n+\n+#define start_struct(code, name) \\\n+\tobjcp_start_struct (code, name)\n+#define finish_struct(t, fieldlist, attributes) \\\n+\tobjcp_finish_struct (t, fieldlist, attributes)\n+#define finish_function() \\\n+\tobjcp_finish_function ()\n+#define lookup_name(name) \\\n+\tobjcp_lookup_name (name)\n+#define xref_tag(code, name) \\\n+\tobjcp_xref_tag (code, name)\n+#define build_component_ref(datum, component) \\\n+        objcp_build_component_ref (datum, component)\n+#define comptypes(type1, type2) \\\n+\tobjcp_comptypes (type1, type2)\n+#define c_begin_compound_stmt(flags) \\\n+\tobjcp_begin_compound_stmt (flags)\n+#define c_end_compound_stmt(stmt, flags) \\\n+\tobjcp_end_compound_stmt (stmt, flags)\n+\n+#undef OBJC_TYPE_NAME\n+#define OBJC_TYPE_NAME(type) \\\n+  (TYPE_NAME (type) && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL \\\n+   ? DECL_NAME (TYPE_NAME (type)) \\\n+   : TYPE_NAME (type))\n+#undef OBJC_SET_TYPE_NAME\n+#define OBJC_SET_TYPE_NAME(type, name) \\\n+  if(TYPE_NAME (type) && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL) \\\n+    DECL_NAME (TYPE_NAME (type)) = name; \\\n+  else \\\n+    TYPE_NAME (type) = name;\n+\n+#undef TYPE_OBJC_INFO\n+#define TYPE_OBJC_INFO(TYPE) LANG_TYPE_CLASS_CHECK (TYPE)->objc_info\n+#undef SIZEOF_OBJC_TYPE_LANG_SPECIFIC\n+#define SIZEOF_OBJC_TYPE_LANG_SPECIFIC sizeof (struct lang_type_class)\n+#undef ALLOC_OBJC_TYPE_LANG_SPECIFIC\n+#define ALLOC_OBJC_TYPE_LANG_SPECIFIC(NODE)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    TYPE_LANG_SPECIFIC (NODE) = GGC_CNEWVAR\t                        \\\n+      (struct lang_type, sizeof (struct lang_type_class));\t\t\\\n+    TYPE_LANG_SPECIFIC (NODE)->u.c.h.is_lang_type_class = 1;\t\t\\\n+  } while (0)\n+\n+#define OBJCP_ORIGINAL_FUNCTION(name, args) \t(name)args\n+\n+/* C++ marks ellipsis-free function parameters differently from C.  */\n+#undef OBJC_VOID_AT_END\n+#define OBJC_VOID_AT_END        void_list_node\n+\n+#endif  /* OBJCP_REMAP_FUNCTIONS */\n+\n+#endif /* ! GCC_OBJCP_DECL_H */"}, {"sha": "8f70419f8e98664f68df83d9c4de8caa280c2c69", "filename": "gcc/objcp/objcp-lang.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2Fobjcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e61dde5c78abe4adcf5872d7a13e003f585c1f/gcc%2Fobjcp%2Fobjcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-lang.c?ref=b2e61dde5c78abe4adcf5872d7a13e003f585c1f", "patch": "@@ -0,0 +1,143 @@\n+/* Language-dependent hooks for Objective-C++.\n+   Copyright 2005 Free Software Foundation, Inc.\n+   Contributed by Ziemowit Laski  <zlaski@apple.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"cp-tree.h\"\n+#include \"c-common.h\"\n+#include \"toplev.h\"\n+#include \"objc-act.h\"\n+#include \"langhooks.h\"\n+#include \"langhooks-def.h\"\n+#include \"diagnostic.h\"\n+#include \"cxx-pretty-print.h\"\n+#include \"debug.h\"\n+#include \"cp-objcp-common.h\"\n+\n+enum c_language_kind c_language = clk_objcxx;\n+\n+/* Lang hooks common to C++ and ObjC++ are declared in cp/cp-objcp-common.h;\n+   consequently, there should be very few hooks below.  */\n+\n+#undef LANG_HOOKS_NAME\n+#define LANG_HOOKS_NAME \"GNU Objective-C++\"\n+#undef LANG_HOOKS_INIT\n+#define LANG_HOOKS_INIT objc_init\n+#undef LANG_HOOKS_DECL_PRINTABLE_NAME\n+#define LANG_HOOKS_DECL_PRINTABLE_NAME\tobjc_printable_name\n+#undef LANG_HOOKS_TYPES_COMPATIBLE_P\n+#define LANG_HOOKS_TYPES_COMPATIBLE_P objc_types_compatible_p\n+#undef LANG_HOOKS_GET_CALLEE_FNDECL\n+#define LANG_HOOKS_GET_CALLEE_FNDECL\tobjc_get_callee_fndecl\n+/* Each front end provides its own lang hook initializer.  */\n+const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n+\n+/* Tree code classes.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+\n+const enum tree_code_class tree_code_type[] = {\n+#include \"tree.def\"\n+  tcc_exceptional,\n+#include \"c-common.def\"\n+  tcc_exceptional,\n+#include \"cp-tree.def\"\n+  tcc_exceptional,\n+#include \"objc-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Table indexed by tree code giving number of expression\n+   operands beyond the fixed part of the node structure.\n+   Not used for types or decls.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+\n+const unsigned char tree_code_length[] = {\n+#include \"tree.def\"\n+  0,\n+#include \"c-common.def\"\n+  0,\n+#include \"cp-tree.def\"\n+  0,\n+#include \"objc-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Names of tree components.\n+   Used for printing out the tree and error messages.  */\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n+\n+const char *const tree_code_name[] = {\n+#include \"tree.def\"\n+  \"@@dummy\",\n+#include \"c-common.def\"\n+  \"@@dummy\",\n+#include \"cp-tree.def\"\n+  \"@@dummy\",\n+#include \"objc-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Lang hook routines common to C++ and ObjC++ appear in cp/cp-objcp-common.c;\n+   there should be very few (if any) routines below.  */\n+\n+tree\n+objcp_tsubst_copy_and_build (tree t, tree args, tsubst_flags_t complain, \n+\t\t\t     tree in_decl, bool function_p ATTRIBUTE_UNUSED)\n+{\n+#define RECURSE(NODE) \\\n+  tsubst_copy_and_build (NODE, args, complain, in_decl, /*function_p=*/false)\n+\n+  /* The following two can only occur in Objective-C++.  */\n+\n+  switch ((int) TREE_CODE (t))\n+    {\n+    case MESSAGE_SEND_EXPR:\n+      return objc_finish_message_expr\n+\t(RECURSE (TREE_OPERAND (t, 0)),\n+\t TREE_OPERAND (t, 1),  /* No need to expand the selector.  */\n+\t RECURSE (TREE_OPERAND (t, 2)));\n+\n+    case CLASS_REFERENCE_EXPR:\n+      return objc_get_class_reference\n+\t(RECURSE (TREE_OPERAND (t, 0)));\n+\n+    default:\n+      break;\n+    }\n+\n+  /* Fall back to C++ processing.  */\n+  return NULL_TREE;\n+\n+#undef RECURSE\n+}\n+\n+void\n+finish_file (void)\n+{\n+  objc_finish_file ();\n+}\n+\n+#include \"gtype-objcp.h\""}]}