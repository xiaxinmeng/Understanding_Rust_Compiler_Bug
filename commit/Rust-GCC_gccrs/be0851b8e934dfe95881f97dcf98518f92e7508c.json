{"sha": "be0851b8e934dfe95881f97dcf98518f92e7508c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwODUxYjhlOTM0ZGZlOTU4ODFmOTdkY2Y5ODUxOGY5MmU3NTA4Yw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-14T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-14T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "e1a8b2b2e258ae5c8964742794e09733132f1f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1a8b2b2e258ae5c8964742794e09733132f1f2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be0851b8e934dfe95881f97dcf98518f92e7508c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0851b8e934dfe95881f97dcf98518f92e7508c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0851b8e934dfe95881f97dcf98518f92e7508c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0851b8e934dfe95881f97dcf98518f92e7508c/comments", "author": null, "committer": null, "parents": [{"sha": "e40fdcc4f423dd1c3543979ddb8f33bf01dac5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e40fdcc4f423dd1c3543979ddb8f33bf01dac5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e40fdcc4f423dd1c3543979ddb8f33bf01dac5e4"}], "stats": {"total": 301, "additions": 300, "deletions": 1}, "files": [{"sha": "023b2b0d47201bf0d4bf32dc0052269aa051ac4b", "filename": "contrib/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0851b8e934dfe95881f97dcf98518f92e7508c/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0851b8e934dfe95881f97dcf98518f92e7508c/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=be0851b8e934dfe95881f97dcf98518f92e7508c", "patch": "@@ -1,3 +1,24 @@\n+2021-01-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Support wrapping of functions\n+\tin parentheses that can take multiple lines.\n+\t* gcc-changelog/test_email.py: Add tests for it.\n+\t* gcc-changelog/test_patches.txt: Add 2 patches.\n+\n+2021-01-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog.py: Parse also define_insn_and_split and similar\n+\tdirectives in .md files.\n+\t* test_mklog.py: Test.\n+\n+2021-01-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Allow modifications of older\n+\tChangeLog (or specific) files without need to make a ChangeLog\n+\tentry.\n+\t* gcc-changelog/test_email.py: Test it.\n+\t* gcc-changelog/test_patches.txt: Add new patch.\n+\n 2021-01-11  Martin Liska  <mliska@suse.cz>\n \n \t* update-copyright.py: Port to python3 by guessing encoding"}, {"sha": "7b97a2879dedc0e6b4c4073e8fd4a709052d724a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0851b8e934dfe95881f97dcf98518f92e7508c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0851b8e934dfe95881f97dcf98518f92e7508c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be0851b8e934dfe95881f97dcf98518f92e7508c", "patch": "@@ -1,3 +1,167 @@\n+2021-01-13  Stafford Horne  <shorne@gmail.com>\n+\n+\t* config/or1k/or1k.h (ASM_PREFERRED_EH_DATA_FORMAT): New macro.\n+\n+2021-01-13  Stafford Horne  <shorne@gmail.com>\n+\n+\t* config/or1k/linux.h (TARGET_ASM_FILE_END): Define macro.\n+\n+2021-01-13  Stafford Horne  <shorne@gmail.com>\n+\n+\t* config/or1k/or1k.h (TARGET_CPU_CPP_BUILTINS): Add builtin\n+\t  define for __or1k_hard_float__.\n+\n+2021-01-13  Stafford Horne  <shorne@gmail.com>\n+\n+\t* config/or1k/or1k.h (NO_PROFILE_COUNTERS): Define as 1.\n+\t(PROFILE_HOOK): Define to call _mcount.\n+\t(FUNCTION_PROFILER): Change from abort to no-op.\n+\n+2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96691\n+\t* match.pd ((~X | C) ^ D -> (X | C) ^ (~D ^ C),\n+\t(~X & C) ^ D -> (X & C) ^ (D ^ C)): New simplifications if\n+\t(~D ^ C) or (D ^ C) can be simplified.\n+\n+2021-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* match.pd (BIT_FIELD_REF to conversion): Delay canonicalization\n+\tuntil after vector lowering.\n+\n+2021-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (fnma<mode>4): Extend from SVE_FULL_I\n+\tto SVE_I.\n+\t(@aarch64_pred_fnma<mode>, cond_fnma<mode>, *cond_fnma<mode>_2)\n+\t(*cond_fnma<mode>_4, *cond_fnma<mode>_any): Likewise.\n+\n+2021-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (fma<mode>4): Extend from SVE_FULL_I\n+\tto SVE_I.\n+\t(@aarch64_pred_fma<mode>, cond_fma<mode>, *cond_fma<mode>_2)\n+\t(*cond_fma<mode>_4, *cond_fma<mode>_any): Likewise.\n+\n+2021-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Relax supported\n+\tBIT_FIELD_REF argument.\n+\t(vect_build_slp_tree_2): Record the desired vector type\n+\ton the external vector def.\n+\t(vectorizable_slp_permutation): Handle required punning\n+\tof existing vector defs.\n+\n+2021-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl-ssa/accesses.h (def_lookup): Fix order of comparison results.\n+\n+2021-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/sh/sh.md (movsf_ie): Remove operands[2] test.\n+\n+2021-01-13  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n+\n+\t* config.gcc [$target == *-*-gnu*]: Enable\n+\t'default_gnu_indirect_function'.\n+\n+2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95905\n+\t* optabs.c (expand_vec_perm_const): Don't force v0 and v1 into\n+\tregisters before calling targetm.vectorize.vec_perm_const, only after\n+\tthat.\n+\t* config/i386/i386-expand.c (ix86_vectorize_vec_perm_const): Handle\n+\ttwo argument permutation when one operand is zero vector and only\n+\tafter that force operands into registers.\n+\t* config/i386/sse.md (*avx2_zero_extendv16qiv16hi2_1): New\n+\tdefine_insn_and_split pattern.\n+\t(*avx512bw_zero_extendv32qiv32hi2_1): Likewise.\n+\t(*avx512f_zero_extendv16hiv16si2_1): Likewise.\n+\t(*avx2_zero_extendv8hiv8si2_1): Likewise.\n+\t(*avx512f_zero_extendv8siv8di2_1): Likewise.\n+\t(*avx2_zero_extendv4siv4di2_1): Likewise.\n+\t* config/mips/mips.c (mips_vectorize_vec_perm_const): Force operands\n+\tinto registers.\n+\t* config/arm/arm.c (arm_vectorize_vec_perm_const): Likewise.\n+\t* config/sparc/sparc.c (sparc_vectorize_vec_perm_const): Likewise.\n+\t* config/ia64/ia64.c (ia64_vectorize_vec_perm_const): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_vectorize_vec_perm_const): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_vectorize_vec_perm_const): Likewise.\n+\t* config/gcn/gcn.c (gcn_vectorize_vec_perm_const): Likewise.  Use std::swap.\n+\n+2021-01-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/98455\n+\t* gimple-if-to-switch.cc (condition_info::record_phi_mapping):\n+\tRecord also virtual PHIs.\n+\t(pass_if_to_switch::execute): Return TODO_cleanup_cfg only\n+\tconditionally.\n+\n+2021-01-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/invoke.texi (C++ Modules): Fix typos.\n+\n+2021-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98640\n+\t* tree-ssa-sccvn.c (visit_nary_op): Do not try to\n+\thandle plus or minus from a truncated operand to be\n+\tsign-extended.\n+\n+2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96938\n+\t* config/i386/i386.md (*btr<mode>_1, *btr<mode>_2): New\n+\tdefine_insn_and_split patterns.\n+\t(splitter after *btr<mode>_2): New splitter.\n+\n+2021-01-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/98652\n+\t* cgraphunit.c (analyze_functions): Remove dead code.\n+\n+2021-01-13  Qian Jianhua  <qianjh@cn.fujitsu.com>\n+\n+\t* config/aarch64/aarch64-cost-tables.h (a64fx_extra_costs): New.\n+\t* config/aarch64/aarch64.c (a64fx_addrcost_table): New.\n+\t(a64fx_regmove_cost, a64fx_vector_cost): New.\n+\t(a64fx_tunings): Use the new added cost tables.\n+\n+2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95905\n+\t* config/i386/predicates.md (pmovzx_parallel): New predicate.\n+\t* config/i386/sse.md (*sse4_1_zero_extendv8qiv8hi2_3): New\n+\tdefine_insn_and_split pattern.\n+\t(*sse4_1_zero_extendv4hiv4si2_3): Likewise.\n+\t(*sse4_1_zero_extendv2siv2di2_3): Likewise.\n+\n+2021-01-13  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (gcn_conditional_register_usage): Remove dead code\n+\tto fix v0 register.\n+\n+2021-01-13  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (gcn_md_reorg): Fix case where EXEC reg is live\n+\ton entry to a BB.\n+\n+2021-01-13  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (recip<mode>2<exec>, recip<mode>2): Use unspec\n+\tfor reciprocal-approximation instructions.\n+\t(div<mode>3): Use fused multiply-accumulate operations for reciprocal\n+\trefinement and division result.\n+\t* config/gcn/gcn.md (UNSPEC_RCP): New unspec constant.\n+\n+2021-01-13  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (subdf): Rename to...\n+\t(subdf3): This.\n+\n 2021-01-12  Martin Liska  <mliska@suse.cz>\n \n \t* gcov.c (source_info::debug): Fix printf format for 32-bit hosts."}, {"sha": "6cb44cd5aabe5da13c0bc2d1c6178f0b43053573", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0851b8e934dfe95881f97dcf98518f92e7508c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0851b8e934dfe95881f97dcf98518f92e7508c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=be0851b8e934dfe95881f97dcf98518f92e7508c", "patch": "@@ -1 +1 @@\n-20210113\n+20210114"}, {"sha": "c8b5037397b7ae8437cad47a8b7ca9f2e2ea7d8b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0851b8e934dfe95881f97dcf98518f92e7508c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0851b8e934dfe95881f97dcf98518f92e7508c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=be0851b8e934dfe95881f97dcf98518f92e7508c", "patch": "@@ -1,3 +1,16 @@\n+2021-01-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98231\n+\t* name-lookup.c (push_using_decl_bindings): New.\n+\t* name-lookup.h (push_using_decl_bindings): Declare.\n+\t* pt.c (tsubst_expr): Call push_using_decl_bindings.\n+\n+2021-01-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98626\n+\t* module.cc (module_add_import_initializers):  Pass a\n+\tzero-element argument vector.\n+\n 2021-01-12  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/98611"}, {"sha": "3cccf848143e6a62449f406f4d72ee110a7ae03d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0851b8e934dfe95881f97dcf98518f92e7508c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0851b8e934dfe95881f97dcf98518f92e7508c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be0851b8e934dfe95881f97dcf98518f92e7508c", "patch": "@@ -1,3 +1,83 @@\n+2021-01-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98231\n+\t* g++.dg/lookup/using63.C: New test.\n+\n+2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96691\n+\t* gcc.dg/tree-ssa/pr96691.c: New test.\n+\n+2021-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* gcc.target/i386/pr92645-7.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-fre-54.c: Adjust.\n+\t* gcc.dg/pr69047.c: Likewise.\n+\n+2021-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/mls_2.c: New test.\n+\t* g++.target/aarch64/sve/cond_mls_1.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_mls_2.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_mls_3.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_mls_4.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_mls_5.C: Likewise.\n+\n+2021-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/mla_2.c: New test.\n+\t* g++.target/aarch64/sve/cond_mla_1.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_mla_2.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_mla_3.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_mla_4.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_mla_5.C: Likewise.\n+\n+2021-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* gcc.target/i386/pr92645-6.c: New testcase.\n+\n+2021-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/sel_1.c: Require aarch64_variant_pcs.\n+\t* gcc.target/aarch64/sve/sel_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/sel_3.c: Likewise.\n+\n+2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95905\n+\t* gcc.target/i386/pr95905-2.c: Use scan-assembler-times instead of\n+\tscan-assembler.  Add tests with zero vector as first __builtin_shuffle\n+\toperand.\n+\t* gcc.target/i386/pr95905-3.c: New test.\n+\t* gcc.target/i386/pr95905-4.c: New test.\n+\n+2021-01-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/98455\n+\t* gcc.dg/tree-ssa/pr98455.c: New test.\n+\n+2021-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98640\n+\t* gcc.dg/torture/pr98640.c: New testcase.\n+\n+2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96938\n+\t* gcc.target/i386/pr96938.c: New test.\n+\n+2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95905\n+\t* gcc.target/i386/pr95905-1.c: New test.\n+\t* gcc.target/i386/pr95905-2.c: New test.\n+\n+2021-01-13  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gcc.target/gcn/fpdiv.c: New test.\n+\n 2021-01-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/98597"}, {"sha": "79449410592ea304ce6ef69d691464ccec075615", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0851b8e934dfe95881f97dcf98518f92e7508c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0851b8e934dfe95881f97dcf98518f92e7508c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=be0851b8e934dfe95881f97dcf98518f92e7508c", "patch": "@@ -1,3 +1,20 @@\n+2021-01-13  Stafford Horne  <shorne@gmail.com>\n+\n+\t* config/or1k/sfp-machine.h (FP_RND_NEAREST, FP_RND_ZERO,\n+\tFP_RND_PINF, FP_RND_MINF, FP_RND_MASK, FP_EX_OVERFLOW,\n+\tFP_EX_UNDERFLOW, FP_EX_INEXACT, FP_EX_INVALID, FP_EX_DIVZERO,\n+\tFP_EX_ALL): New constant macros.\n+\t(_FP_DECL_EX, FP_ROUNDMODE, FP_INIT_ROUNDMODE,\n+\tFP_HANDLE_EXCEPTIONS): New macros.\n+\t(_FP_TININESS_AFTER_ROUNDING): Change to 1.\n+\n+2021-01-13  Samuel Thibault  <samuel.thibault@gnu.org>\n+\n+\t* config/i386/gnu-unwind.h (x86_gnu_fallback_frame_state): Add the\n+\tposix siginfo case to struct handler_args. Detect between legacy\n+\tand siginfo from the second parameter, which is a small sigcode in\n+\tthe legacy case, and a pointer in the siginfo case.\n+\n 2020-12-20  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/lib1funcs.S (__bswapsi2, __bswapdi2): New"}, {"sha": "5235b9dc660154f6d657b830a4463471eef211f7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0851b8e934dfe95881f97dcf98518f92e7508c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0851b8e934dfe95881f97dcf98518f92e7508c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=be0851b8e934dfe95881f97dcf98518f92e7508c", "patch": "@@ -1,3 +1,7 @@\n+2021-01-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (INPUT): Remove include/debug/array.\n+\n 2021-01-10  David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR libstdc++/98613"}]}