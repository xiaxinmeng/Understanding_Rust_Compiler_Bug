{"sha": "a2faef8e068114f6e30f4c881f6f02b0b754c667", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmYWVmOGUwNjgxMTRmNmUzMGY0Yzg4MWY2ZjAyYjBiNzU0YzY2Nw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2016-01-05T13:20:29Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2016-01-05T13:20:29Z"}, "message": "re PR target/68770 (Conditional jump or move depends on uninitialised value(s) default_secondary_reload() targhooks.c:940)\n\n\tPR target/68770\n\t* ira-costs.c (copy_cost): Initialise the t_icode field of the\n\tsecondary_reload_info structure.\n\ntests:\t* g++.dg/pr68770.C: New test.\n\nFrom-SVN: r232072", "tree": {"sha": "8cc36f06a57a13be0f86e9ce4d334722e00185fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cc36f06a57a13be0f86e9ce4d334722e00185fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2faef8e068114f6e30f4c881f6f02b0b754c667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2faef8e068114f6e30f4c881f6f02b0b754c667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2faef8e068114f6e30f4c881f6f02b0b754c667", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2faef8e068114f6e30f4c881f6f02b0b754c667/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3360dc9fc25128a3194bad65e94305944ff223d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3360dc9fc25128a3194bad65e94305944ff223d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3360dc9fc25128a3194bad65e94305944ff223d2"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "83274e261a4f9a3f42d9109a9c66187f661bcccf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2faef8e068114f6e30f4c881f6f02b0b754c667/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2faef8e068114f6e30f4c881f6f02b0b754c667/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2faef8e068114f6e30f4c881f6f02b0b754c667", "patch": "@@ -1,5 +1,9 @@\n 2016-01-05  Nick Clifton  <nickc@redhat.com>\n \n+\tPR target/68770\n+\t* ira-costs.c (copy_cost): Initialise the t_icode field of the\n+\tsecondary_reload_info structure.\n+\n \tPR target/66655\n \t* config/i386/cygming.h (MAKE_DECL_ONE_ONLY): Define to use weak\n \tdecls if weak support is available."}, {"sha": "ea5e8b1a0c339b9f64304c10ba5a709a5e8aee39", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2faef8e068114f6e30f4c881f6f02b0b754c667/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2faef8e068114f6e30f4c881f6f02b0b754c667/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=a2faef8e068114f6e30f4c881f6f02b0b754c667", "patch": "@@ -442,6 +442,9 @@ copy_cost (rtx x, machine_mode mode, reg_class_t rclass, bool to_p,\n      copy it.  */\n   sri.prev_sri = prev_sri;\n   sri.extra_cost = 0;\n+  /* PR 68770: Secondary reload might examine the t_icode field.  */\n+  sri.t_icode = CODE_FOR_nothing;\n+\n   secondary_class = targetm.secondary_reload (to_p, x, rclass, mode, &sri);\n \n   if (secondary_class != NO_REGS)"}, {"sha": "1bc843dccd11e99603e03c0c2a3e90f5634676cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2faef8e068114f6e30f4c881f6f02b0b754c667/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2faef8e068114f6e30f4c881f6f02b0b754c667/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2faef8e068114f6e30f4c881f6f02b0b754c667", "patch": "@@ -1,3 +1,8 @@\n+2016-01-05  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR target/68870\n+\t* g++.dg/pr68770.C: New test.\n+\n 2016-01-04  Mike Stump  <mikestump@comcast.net>\n \n \t* lib/target-supports.exp (check_effective_target_cilkplus):"}, {"sha": "33f0993f5466be2e56f98018633ed2d9c30e3a95", "filename": "gcc/testsuite/g++.dg/pr68770.C", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2faef8e068114f6e30f4c881f6f02b0b754c667/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr68770.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2faef8e068114f6e30f4c881f6f02b0b754c667/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr68770.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr68770.C?ref=a2faef8e068114f6e30f4c881f6f02b0b754c667", "patch": "@@ -0,0 +1,95 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* This test used to trigger the use of an uninitialised field (t_icode)\n+   in the secondary_reload_info structure created in ira-costs.c:copy_cost().\n+   Unfortunately the test only generates a problem if run under valgrind...  */\n+typedef unsigned long int uint64_t;\n+\n+namespace __gnu_parallel\n+{\n+   enum _AlgorithmStrategy { heuristic, force_sequential, force_parallel };\n+   enum _SortAlgorithm     { MWMS, QS, QS_BALANCED };\n+   enum _MultiwayMergeAlgorithm  { LOSER_TREE };\n+   enum _PartialSumAlgorithm     { RECURSIVE, LINEAR };\n+   enum _SplittingAlgorithm     { SAMPLING, EXACT };\n+   enum _FindAlgorithm     { GROWING_BLOCKS, CONSTANT_SIZE_BLOCKS, EQUAL_SPLIT };\n+   typedef uint64_t _SequenceIndex;\n+   struct _Settings\n+   {\n+     _AlgorithmStrategy algorithm_strategy;\n+     _SortAlgorithm sort_algorithm;\n+     _PartialSumAlgorithm partial_sum_algorithm;\n+     _MultiwayMergeAlgorithm multiway_merge_algorithm;\n+     _FindAlgorithm find_algorithm;\n+     _SplittingAlgorithm sort_splitting;\n+     _SplittingAlgorithm merge_splitting;\n+     _SplittingAlgorithm multiway_merge_splitting;\n+     _SequenceIndex accumulate_minimal_n;\n+     unsigned int adjacent_difference_minimal_n;\n+     _SequenceIndex count_minimal_n;\n+     _SequenceIndex fill_minimal_n;\n+     double find_increasing_factor;\n+     _SequenceIndex find_initial_block_size;\n+     _SequenceIndex find_maximum_block_size;\n+     _SequenceIndex find_sequential_search_size;\n+     _SequenceIndex for_each_minimal_n;\n+     _SequenceIndex generate_minimal_n;\n+     _SequenceIndex max_element_minimal_n;\n+     _SequenceIndex merge_minimal_n;\n+     unsigned int merge_oversampling;\n+     _SequenceIndex min_element_minimal_n;\n+     _SequenceIndex multiway_merge_minimal_n;\n+     int multiway_merge_minimal_k;\n+     unsigned int multiway_merge_oversampling;\n+     _SequenceIndex nth_element_minimal_n;\n+     _SequenceIndex partition_chunk_size;\n+     double partition_chunk_share;\n+     _SequenceIndex partition_minimal_n;\n+     _SequenceIndex partial_sort_minimal_n;\n+     float partial_sum_dilation;\n+     unsigned int partial_sum_minimal_n;\n+     float find_scale_factor;\n+\n+     explicit _Settings() :\n+       algorithm_strategy(heuristic),\n+       sort_algorithm(MWMS),\n+       partial_sum_algorithm(LINEAR),\n+       multiway_merge_algorithm(LOSER_TREE),\n+       find_algorithm(CONSTANT_SIZE_BLOCKS),\n+       sort_splitting(EXACT),\n+       merge_splitting(EXACT),\n+       multiway_merge_splitting(EXACT),\n+       accumulate_minimal_n(1000),\n+       adjacent_difference_minimal_n(1000),\n+       count_minimal_n(1000),\n+       fill_minimal_n(1000),\n+       find_increasing_factor(2.0),\n+       find_initial_block_size(256),\n+       find_maximum_block_size(8192),\n+       find_sequential_search_size(256),\n+       for_each_minimal_n(1000),\n+       generate_minimal_n(1000),\n+       max_element_minimal_n(1000),\n+       merge_minimal_n(1000),\n+       merge_oversampling(10),\n+       min_element_minimal_n(1000),\n+       multiway_merge_minimal_n(1000),\n+       multiway_merge_minimal_k(2),\n+       multiway_merge_oversampling(10),\n+       nth_element_minimal_n(1000),\n+       partition_chunk_size(1000),\n+       partition_chunk_share(0.0),\n+       partition_minimal_n(1000),\n+       partial_sort_minimal_n(1000),\n+       partial_sum_dilation(1.0f),\n+       partial_sum_minimal_n(1000),\n+       find_scale_factor(0.01f)\n+     { }\n+   };\n+}\n+\n+namespace\n+{\n+  __gnu_parallel::_Settings s;\n+}\n+"}]}