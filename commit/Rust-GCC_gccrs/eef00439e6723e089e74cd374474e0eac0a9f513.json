{"sha": "eef00439e6723e089e74cd374474e0eac0a9f513", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVmMDA0MzllNjcyM2UwODllNzRjZDM3NDQ3NGUwZWFjMGE5ZjUxMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-04-15T19:59:52Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-04-15T20:01:25Z"}, "message": "Go Gcc_backend class: mark prefetch as novops\n\n\tPR go/94607\n\t* go-gcc.cc (class Gcc_backend): Define builtin_const,\n\tbuiltin_noreturn, builtin_novops.\n\t(Gcc_backend::define_builtin): Change const_p and noreturn_p\n\tparameters to a single flags parameter.  Change all callers.\n\t(Gcc_backend::Gcc_backend): Pass novops for prefetch.", "tree": {"sha": "7a35efaa4d76f5b859b4e6a67b37063fd5167c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a35efaa4d76f5b859b4e6a67b37063fd5167c3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eef00439e6723e089e74cd374474e0eac0a9f513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef00439e6723e089e74cd374474e0eac0a9f513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eef00439e6723e089e74cd374474e0eac0a9f513", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef00439e6723e089e74cd374474e0eac0a9f513/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "596676d66cab21e5ed85669e737af5b62f067d57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596676d66cab21e5ed85669e737af5b62f067d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596676d66cab21e5ed85669e737af5b62f067d57"}], "stats": {"total": 188, "additions": 100, "deletions": 88}, "files": [{"sha": "5be05e908e68a78048c94f9ad28354137c62736e", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef00439e6723e089e74cd374474e0eac0a9f513/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef00439e6723e089e74cd374474e0eac0a9f513/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=eef00439e6723e089e74cd374474e0eac0a9f513", "patch": "@@ -1,3 +1,12 @@\n+2020-04-15  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR go/94607\n+\t* go-gcc.cc (class Gcc_backend): Define builtin_const,\n+\tbuiltin_noreturn, builtin_novops.\n+\t(Gcc_backend::define_builtin): Change const_p and noreturn_p\n+\tparameters to a single flags parameter.  Change all callers.\n+\t(Gcc_backend::Gcc_backend): Pass novops for prefetch.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "fd96481b12df62d1b1959ecdf736101861d679a8", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 91, "deletions": 88, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef00439e6723e089e74cd374474e0eac0a9f513/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef00439e6723e089e74cd374474e0eac0a9f513/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=eef00439e6723e089e74cd374474e0eac0a9f513", "patch": "@@ -541,9 +541,13 @@ class Gcc_backend : public Backend\n   convert_tree(tree, tree, Location);\n \n private:\n+  static const int builtin_const = 1 << 0;\n+  static const int builtin_noreturn = 1 << 1;\n+  static const int builtin_novops = 1 << 2;\n+\n   void\n   define_builtin(built_in_function bcode, const char* name, const char* libname,\n-\t\t tree fntype, bool const_p, bool noreturn_p);\n+\t\t tree fntype, int flags);\n \n   // A mapping of the GCC built-ins exposed to GCCGo.\n   std::map<std::string, Bfunction*> builtin_functions_;\n@@ -566,34 +570,30 @@ Gcc_backend::Gcc_backend()\n   tree t = this->integer_type(true, BITS_PER_UNIT)->get_tree();\n   tree p = build_pointer_type(build_qualified_type(t, TYPE_QUAL_VOLATILE));\n   this->define_builtin(BUILT_IN_SYNC_ADD_AND_FETCH_1, \"__sync_fetch_and_add_1\",\n-\t\t       NULL, build_function_type_list(t, p, t, NULL_TREE),\n-\t\t       false, false);\n+\t\t       NULL, build_function_type_list(t, p, t, NULL_TREE), 0);\n \n   t = this->integer_type(true, BITS_PER_UNIT * 2)->get_tree();\n   p = build_pointer_type(build_qualified_type(t, TYPE_QUAL_VOLATILE));\n   this->define_builtin(BUILT_IN_SYNC_ADD_AND_FETCH_2, \"__sync_fetch_and_add_2\",\n-\t\t       NULL, build_function_type_list(t, p, t, NULL_TREE),\n-\t\t       false, false);\n+\t\t       NULL, build_function_type_list(t, p, t, NULL_TREE), 0);\n \n   t = this->integer_type(true, BITS_PER_UNIT * 4)->get_tree();\n   p = build_pointer_type(build_qualified_type(t, TYPE_QUAL_VOLATILE));\n   this->define_builtin(BUILT_IN_SYNC_ADD_AND_FETCH_4, \"__sync_fetch_and_add_4\",\n-\t\t       NULL, build_function_type_list(t, p, t, NULL_TREE),\n-\t\t       false, false);\n+\t\t       NULL, build_function_type_list(t, p, t, NULL_TREE), 0);\n \n   t = this->integer_type(true, BITS_PER_UNIT * 8)->get_tree();\n   p = build_pointer_type(build_qualified_type(t, TYPE_QUAL_VOLATILE));\n   this->define_builtin(BUILT_IN_SYNC_ADD_AND_FETCH_8, \"__sync_fetch_and_add_8\",\n-\t\t       NULL, build_function_type_list(t, p, t, NULL_TREE),\n-\t\t       false, false);\n+\t\t       NULL, build_function_type_list(t, p, t, NULL_TREE), 0);\n \n   // We use __builtin_expect for magic import functions.\n   this->define_builtin(BUILT_IN_EXPECT, \"__builtin_expect\", NULL,\n \t\t       build_function_type_list(long_integer_type_node,\n \t\t\t\t\t\tlong_integer_type_node,\n \t\t\t\t\t\tlong_integer_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n \n   // We use __builtin_memcmp for struct comparisons.\n   this->define_builtin(BUILT_IN_MEMCMP, \"__builtin_memcmp\", \"memcmp\",\n@@ -602,7 +602,7 @@ Gcc_backend::Gcc_backend()\n \t\t\t\t\t\tconst_ptr_type_node,\n \t\t\t\t\t\tsize_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       false, false);\n+\t\t       0);\n \n   // We use __builtin_memmove for copying data.\n   this->define_builtin(BUILT_IN_MEMMOVE, \"__builtin_memmove\", \"memmove\",\n@@ -611,7 +611,7 @@ Gcc_backend::Gcc_backend()\n \t\t\t\t\t\tconst_ptr_type_node,\n \t\t\t\t\t\tsize_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       false, false);\n+\t\t       0);\n \n   // We use __builtin_memset for zeroing data.\n   this->define_builtin(BUILT_IN_MEMSET, \"__builtin_memset\", \"memset\",\n@@ -620,54 +620,54 @@ Gcc_backend::Gcc_backend()\n \t\t\t\t\t\tinteger_type_node,\n \t\t\t\t\t\tsize_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       false, false);\n+\t\t       0);\n \n   // Used by runtime/internal/sys and math/bits.\n   this->define_builtin(BUILT_IN_CTZ, \"__builtin_ctz\", \"ctz\",\n \t\t       build_function_type_list(integer_type_node,\n \t\t\t\t\t\tunsigned_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n   this->define_builtin(BUILT_IN_CTZLL, \"__builtin_ctzll\", \"ctzll\",\n \t\t       build_function_type_list(integer_type_node,\n \t\t\t\t\t\tlong_long_unsigned_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n   this->define_builtin(BUILT_IN_CLZ, \"__builtin_clz\", \"clz\",\n \t\t       build_function_type_list(integer_type_node,\n \t\t\t\t\t\tunsigned_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n   this->define_builtin(BUILT_IN_CLZLL, \"__builtin_clzll\", \"clzll\",\n \t\t       build_function_type_list(integer_type_node,\n \t\t\t\t\t\tlong_long_unsigned_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n   this->define_builtin(BUILT_IN_POPCOUNT, \"__builtin_popcount\", \"popcount\",\n \t\t       build_function_type_list(integer_type_node,\n \t\t\t\t\t\tunsigned_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n   this->define_builtin(BUILT_IN_POPCOUNTLL, \"__builtin_popcountll\", \"popcountll\",\n \t\t       build_function_type_list(integer_type_node,\n \t\t\t\t\t\tlong_long_unsigned_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n   this->define_builtin(BUILT_IN_BSWAP16, \"__builtin_bswap16\", \"bswap16\",\n \t\t       build_function_type_list(uint16_type_node,\n \t\t\t\t\t\tuint16_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n   this->define_builtin(BUILT_IN_BSWAP32, \"__builtin_bswap32\", \"bswap32\",\n \t\t       build_function_type_list(uint32_type_node,\n \t\t\t\t\t\tuint32_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n   this->define_builtin(BUILT_IN_BSWAP64, \"__builtin_bswap64\", \"bswap64\",\n \t\t       build_function_type_list(uint64_type_node,\n \t\t\t\t\t\tuint64_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n \n   // We provide some functions for the math library.\n   tree math_function_type = build_function_type_list(double_type_node,\n@@ -684,104 +684,104 @@ Gcc_backend::Gcc_backend()\n     build_function_type_list(long_double_type_node, long_double_type_node,\n \t\t\t     long_double_type_node, NULL_TREE);\n   this->define_builtin(BUILT_IN_ACOS, \"__builtin_acos\", \"acos\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_ACOSL, \"__builtin_acosl\", \"acosl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_ASIN, \"__builtin_asin\", \"asin\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_ASINL, \"__builtin_asinl\", \"asinl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_ATAN, \"__builtin_atan\", \"atan\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_ATANL, \"__builtin_atanl\", \"atanl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_ATAN2, \"__builtin_atan2\", \"atan2\",\n-\t\t       math_function_type_two, true, false);\n+\t\t       math_function_type_two, builtin_const);\n   this->define_builtin(BUILT_IN_ATAN2L, \"__builtin_atan2l\", \"atan2l\",\n-\t\t       math_function_type_long_two, true, false);\n+\t\t       math_function_type_long_two, builtin_const);\n   this->define_builtin(BUILT_IN_CEIL, \"__builtin_ceil\", \"ceil\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_CEILL, \"__builtin_ceill\", \"ceill\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_COS, \"__builtin_cos\", \"cos\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_COSL, \"__builtin_cosl\", \"cosl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_EXP, \"__builtin_exp\", \"exp\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_EXPL, \"__builtin_expl\", \"expl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_EXPM1, \"__builtin_expm1\", \"expm1\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_EXPM1L, \"__builtin_expm1l\", \"expm1l\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_FABS, \"__builtin_fabs\", \"fabs\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_FABSL, \"__builtin_fabsl\", \"fabsl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_FLOOR, \"__builtin_floor\", \"floor\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_FLOORL, \"__builtin_floorl\", \"floorl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_FMOD, \"__builtin_fmod\", \"fmod\",\n-\t\t       math_function_type_two, true, false);\n+\t\t       math_function_type_two, builtin_const);\n   this->define_builtin(BUILT_IN_FMODL, \"__builtin_fmodl\", \"fmodl\",\n-\t\t       math_function_type_long_two, true, false);\n+\t\t       math_function_type_long_two, builtin_const);\n   this->define_builtin(BUILT_IN_LDEXP, \"__builtin_ldexp\", \"ldexp\",\n \t\t       build_function_type_list(double_type_node,\n \t\t\t\t\t\tdouble_type_node,\n \t\t\t\t\t\tinteger_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n   this->define_builtin(BUILT_IN_LDEXPL, \"__builtin_ldexpl\", \"ldexpl\",\n \t\t       build_function_type_list(long_double_type_node,\n \t\t\t\t\t\tlong_double_type_node,\n \t\t\t\t\t\tinteger_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       true, false);\n+\t\t       builtin_const);\n   this->define_builtin(BUILT_IN_LOG, \"__builtin_log\", \"log\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_LOGL, \"__builtin_logl\", \"logl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_LOG1P, \"__builtin_log1p\", \"log1p\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_LOG1PL, \"__builtin_log1pl\", \"log1pl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_LOG10, \"__builtin_log10\", \"log10\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_LOG10L, \"__builtin_log10l\", \"log10l\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_LOG2, \"__builtin_log2\", \"log2\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_LOG2L, \"__builtin_log2l\", \"log2l\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_SIN, \"__builtin_sin\", \"sin\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_SINL, \"__builtin_sinl\", \"sinl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_SQRT, \"__builtin_sqrt\", \"sqrt\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_SQRTL, \"__builtin_sqrtl\", \"sqrtl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_TAN, \"__builtin_tan\", \"tan\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_TANL, \"__builtin_tanl\", \"tanl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n   this->define_builtin(BUILT_IN_TRUNC, \"__builtin_trunc\", \"trunc\",\n-\t\t       math_function_type, true, false);\n+\t\t       math_function_type, builtin_const);\n   this->define_builtin(BUILT_IN_TRUNCL, \"__builtin_truncl\", \"truncl\",\n-\t\t       math_function_type_long, true, false);\n+\t\t       math_function_type_long, builtin_const);\n \n   // We use __builtin_return_address in the thunk we build for\n   // functions which call recover, and for runtime.getcallerpc.\n   t = build_function_type_list(ptr_type_node, unsigned_type_node, NULL_TREE);\n   this->define_builtin(BUILT_IN_RETURN_ADDRESS, \"__builtin_return_address\",\n-\t\t       NULL, t, false, false);\n+\t\t       NULL, t, 0);\n \n   // The runtime calls __builtin_dwarf_cfa for runtime.getcallersp.\n   t = build_function_type_list(ptr_type_node, NULL_TREE);\n   this->define_builtin(BUILT_IN_DWARF_CFA, \"__builtin_dwarf_cfa\",\n-\t\t       NULL, t, false, false);\n+\t\t       NULL, t, 0);\n \n   // The runtime calls __builtin_extract_return_addr when recording\n   // the address to which a function returns.\n@@ -790,73 +790,73 @@ Gcc_backend::Gcc_backend()\n \t\t       build_function_type_list(ptr_type_node,\n \t\t\t\t\t\tptr_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       false, false);\n+\t\t       0);\n \n   // The compiler uses __builtin_trap for some exception handling\n   // cases.\n   this->define_builtin(BUILT_IN_TRAP, \"__builtin_trap\", NULL,\n \t\t       build_function_type(void_type_node, void_list_node),\n-\t\t       false, true);\n+\t\t       builtin_noreturn);\n \n   // The runtime uses __builtin_prefetch.\n   this->define_builtin(BUILT_IN_PREFETCH, \"__builtin_prefetch\", NULL,\n \t\t       build_varargs_function_type_list(void_type_node,\n \t\t\t\t\t\t\tconst_ptr_type_node,\n \t\t\t\t\t\t\tNULL_TREE),\n-\t\t       false, false);\n+\t\t       builtin_novops);\n \n   // The compiler uses __builtin_unreachable for cases that cannot\n   // occur.\n   this->define_builtin(BUILT_IN_UNREACHABLE, \"__builtin_unreachable\", NULL,\n \t\t       build_function_type(void_type_node, void_list_node),\n-\t\t       true, true);\n+\t\t       builtin_const | builtin_noreturn);\n \n   // We provide some atomic functions.\n   t = build_function_type_list(uint32_type_node,\n                                ptr_type_node,\n                                integer_type_node,\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_LOAD_4, \"__atomic_load_4\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(uint64_type_node,\n                                ptr_type_node,\n                                integer_type_node,\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_LOAD_8, \"__atomic_load_8\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(void_type_node,\n                                ptr_type_node,\n                                uint32_type_node,\n                                integer_type_node,\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_STORE_4, \"__atomic_store_4\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(void_type_node,\n                                ptr_type_node,\n                                uint64_type_node,\n                                integer_type_node,\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_STORE_8, \"__atomic_store_8\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(uint32_type_node,\n                                ptr_type_node,\n                                uint32_type_node,\n                                integer_type_node,\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_EXCHANGE_4, \"__atomic_exchange_4\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(uint64_type_node,\n                                ptr_type_node,\n                                uint64_type_node,\n                                integer_type_node,\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_EXCHANGE_8, \"__atomic_exchange_8\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(boolean_type_node,\n                                ptr_type_node,\n@@ -868,7 +868,7 @@ Gcc_backend::Gcc_backend()\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4,\n                        \"__atomic_compare_exchange_4\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(boolean_type_node,\n                                ptr_type_node,\n@@ -880,43 +880,43 @@ Gcc_backend::Gcc_backend()\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8,\n                        \"__atomic_compare_exchange_8\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(uint32_type_node,\n                                ptr_type_node,\n                                uint32_type_node,\n                                integer_type_node,\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_ADD_FETCH_4, \"__atomic_add_fetch_4\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(uint64_type_node,\n                                ptr_type_node,\n                                uint64_type_node,\n                                integer_type_node,\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_ADD_FETCH_8, \"__atomic_add_fetch_8\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(unsigned_char_type_node,\n                                ptr_type_node,\n                                unsigned_char_type_node,\n                                integer_type_node,\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_AND_FETCH_1, \"__atomic_and_fetch_1\", NULL,\n-                       t, false, false);\n+                       t, 0);\n   this->define_builtin(BUILT_IN_ATOMIC_FETCH_AND_1, \"__atomic_fetch_and_1\", NULL,\n-                       t, false, false);\n+                       t, 0);\n \n   t = build_function_type_list(unsigned_char_type_node,\n                                ptr_type_node,\n                                unsigned_char_type_node,\n                                integer_type_node,\n                                NULL_TREE);\n   this->define_builtin(BUILT_IN_ATOMIC_OR_FETCH_1, \"__atomic_or_fetch_1\", NULL,\n-                       t, false, false);\n+                       t, 0);\n   this->define_builtin(BUILT_IN_ATOMIC_FETCH_OR_1, \"__atomic_fetch_or_1\", NULL,\n-                       t, false, false);\n+                       t, 0);\n }\n \n // Get an unnamed integer type.\n@@ -3482,25 +3482,28 @@ Gcc_backend::write_export_data(const char* bytes, unsigned int size)\n \n void\n Gcc_backend::define_builtin(built_in_function bcode, const char* name,\n-\t\t\t    const char* libname, tree fntype, bool const_p,\n-\t\t\t    bool noreturn_p)\n+\t\t\t    const char* libname, tree fntype, int flags)\n {\n   tree decl = add_builtin_function(name, fntype, bcode, BUILT_IN_NORMAL,\n \t\t\t\t   libname, NULL_TREE);\n-  if (const_p)\n+  if ((flags & builtin_const) != 0)\n     TREE_READONLY(decl) = 1;\n-  if (noreturn_p)\n+  if ((flags & builtin_noreturn) != 0)\n     TREE_THIS_VOLATILE(decl) = 1;\n+  if ((flags & builtin_novops) != 0)\n+    DECL_IS_NOVOPS(decl) = 1;\n   set_builtin_decl(bcode, decl, true);\n   this->builtin_functions_[name] = this->make_function(decl);\n   if (libname != NULL)\n     {\n       decl = add_builtin_function(libname, fntype, bcode, BUILT_IN_NORMAL,\n \t\t\t\t  NULL, NULL_TREE);\n-      if (const_p)\n+      if ((flags & builtin_const) != 0)\n \tTREE_READONLY(decl) = 1;\n-      if (noreturn_p)\n+      if ((flags & builtin_noreturn) != 0)\n \tTREE_THIS_VOLATILE(decl) = 1;\n+      if ((flags & builtin_novops) != 0)\n+\tDECL_IS_NOVOPS(decl) = 1;\n       this->builtin_functions_[libname] = this->make_function(decl);\n     }\n }"}]}