{"sha": "4fbad0ba4c093d5653e70679aba43193a20881e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZiYWQwYmE0YzA5M2Q1NjUzZTcwNjc5YWJhNDMxOTNhMjA4ODFlNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T15:21:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T15:21:19Z"}, "message": "[multiple changes]\n\n2011-08-02  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_rm.texi: Ramification of pragma Eliminate documentation\n\t - fix bugs in the description of Source_Trace;\n\t - get rid of UNIT_NAME;\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch9.adb\n\t(Build_Dispatching_Requeue): Adding support for VM targets\n\tsince we cannot directly reference the Tag entity.\n\t* exp_sel.adb (Build_K): Adding support for VM targets.\n\t(Build_S_Assignment): Adding support for VM targets.\n\t* exp_disp.adb\n\t(Default_Prim_Op_Position): In VM targets do not restrict availability\n\tof predefined interface primitives to compiling in Ada 2005 mode.\n\t(Is_Predefined_Interface_Primitive): In VM targets this service is not\n\trestricted to compiling in Ada 2005 mode.\n\t(Make_VM_TSD): Generate code that declares and initializes the OSD\n\trecord. Needed to support dispatching calls through synchronized\n\tinterfaces.\n\t* exp_ch3.adb\n\t(Make_Predefined_Primitive_Specs): Enable generation of predefined\n\tprimitives associated with synchronized interfaces.\n\t(Make_Predefined_Primitive_Bodies): Enable generation of predefined\n\tprimitives associated with synchronized interfaces.\n\n2011-08-02  Yannick Moy  <moy@adacore.com>\n\n\t* par-ch11.adb (P_Handled_Sequence_Of_Statements): mark a sequence of\n\tstatements hidden in SPARK if preceded by the HIDE directive\n\t(Parse_Exception_Handlers): mark each exception handler in a sequence of\n\texception handlers as hidden in SPARK if preceded by the HIDE directive\n\t* par-ch6.adb (P_Subprogram): mark a subprogram body hidden in SPARK\n\tif starting with the HIDE directive\n\t* par-ch7.adb (P_Package): mark a package body hidden in SPARK if\n\tstarting with the HIDE directive; mark the declarations in a private\n\tpart as hidden in SPARK if the private part starts with the HIDE\n\tdirective\n\t* restrict.adb, restrict.ads\n\t(Set_Hidden_Part_In_SPARK): record a range of slocs as hidden in SPARK\n\t(Is_In_Hidden_Part_In_SPARK): new function which returns whether its\n\targument node belongs to a part which is hidden in SPARK\n\t(Check_SPARK_Restriction): do not issue violations on nodes in hidden\n\tparts in SPARK; protect the possibly costly call to\n\tIs_In_Hidden_Part_In_SPARK by a check that the SPARK restriction is on\n\t* scans.ads (Token_Type): new value Tok_SPARK_Hide in enumeration\n\t* scng.adb (Accumulate_Token_Checksum_GNAT_6_3,\n\tAccumulate_Token_Checksum_GNAT_5_03): add case for new token\n\tTok_SPARK_Hide.\n\t(Scan): recognize special comment starting with '#' and followed by\n\tSPARK keyword \"hide\" as a HIDE directive.\n\n2011-08-02  Yannick Moy  <moy@adacore.com>\n\n\t* types.ads, erroutc.ads: Minor reformatting.\n\n2011-08-02  Vincent Celier  <celier@adacore.com>\n\n\t* link.c: Add response file support for cross platforms.\n\nFrom-SVN: r177179", "tree": {"sha": "cdbed559d62d3196ef10ffa5c397108b184f5e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdbed559d62d3196ef10ffa5c397108b184f5e08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fbad0ba4c093d5653e70679aba43193a20881e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbad0ba4c093d5653e70679aba43193a20881e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fbad0ba4c093d5653e70679aba43193a20881e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbad0ba4c093d5653e70679aba43193a20881e5/comments", "author": null, "committer": null, "parents": [{"sha": "6ff6152d5046cab8da2873eb3a95bd85b7074194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff6152d5046cab8da2873eb3a95bd85b7074194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff6152d5046cab8da2873eb3a95bd85b7074194"}], "stats": {"total": 863, "additions": 709, "deletions": 154}, "files": [{"sha": "ff0670569f62efbf6a2f32ef57cdfee5ff0e497b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -1,3 +1,64 @@\n+2011-08-02  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_rm.texi: Ramification of pragma Eliminate documentation\n+\t - fix bugs in the description of Source_Trace;\n+\t - get rid of UNIT_NAME;\n+\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch9.adb\n+\t(Build_Dispatching_Requeue): Adding support for VM targets\n+\tsince we cannot directly reference the Tag entity.\n+\t* exp_sel.adb (Build_K): Adding support for VM targets.\n+\t(Build_S_Assignment): Adding support for VM targets.\n+\t* exp_disp.adb\n+\t(Default_Prim_Op_Position): In VM targets do not restrict availability\n+\tof predefined interface primitives to compiling in Ada 2005 mode.\n+\t(Is_Predefined_Interface_Primitive): In VM targets this service is not\n+\trestricted to compiling in Ada 2005 mode.\n+\t(Make_VM_TSD): Generate code that declares and initializes the OSD\n+\trecord. Needed to support dispatching calls through synchronized\n+\tinterfaces.\n+\t* exp_ch3.adb\n+\t(Make_Predefined_Primitive_Specs): Enable generation of predefined\n+\tprimitives associated with synchronized interfaces.\n+\t(Make_Predefined_Primitive_Bodies): Enable generation of predefined\n+\tprimitives associated with synchronized interfaces.\n+\n+2011-08-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* par-ch11.adb (P_Handled_Sequence_Of_Statements): mark a sequence of\n+\tstatements hidden in SPARK if preceded by the HIDE directive\n+\t(Parse_Exception_Handlers): mark each exception handler in a sequence of\n+\texception handlers as hidden in SPARK if preceded by the HIDE directive\n+\t* par-ch6.adb (P_Subprogram): mark a subprogram body hidden in SPARK\n+\tif starting with the HIDE directive\n+\t* par-ch7.adb (P_Package): mark a package body hidden in SPARK if\n+\tstarting with the HIDE directive; mark the declarations in a private\n+\tpart as hidden in SPARK if the private part starts with the HIDE\n+\tdirective\n+\t* restrict.adb, restrict.ads\n+\t(Set_Hidden_Part_In_SPARK): record a range of slocs as hidden in SPARK\n+\t(Is_In_Hidden_Part_In_SPARK): new function which returns whether its\n+\targument node belongs to a part which is hidden in SPARK\n+\t(Check_SPARK_Restriction): do not issue violations on nodes in hidden\n+\tparts in SPARK; protect the possibly costly call to\n+\tIs_In_Hidden_Part_In_SPARK by a check that the SPARK restriction is on\n+\t* scans.ads (Token_Type): new value Tok_SPARK_Hide in enumeration\n+\t* scng.adb (Accumulate_Token_Checksum_GNAT_6_3,\n+\tAccumulate_Token_Checksum_GNAT_5_03): add case for new token\n+\tTok_SPARK_Hide.\n+\t(Scan): recognize special comment starting with '#' and followed by\n+\tSPARK keyword \"hide\" as a HIDE directive.\n+\n+2011-08-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* types.ads, erroutc.ads: Minor reformatting.\n+\n+2011-08-02  Vincent Celier  <celier@adacore.com>\n+\n+\t* link.c: Add response file support for cross platforms.\n+\n 2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_aggr.adb (Resolve_Array_Aggregate): when copying the expression"}, {"sha": "df29bad07a3eda61453bdf8f72c5b59a73d64f41", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -228,11 +228,11 @@ package Erroutc is\n    --------------------------\n \n    --  Pragma Warnings allows warnings to be turned off for a specified\n-   --  region of code, and the following tables are the data structure used\n+   --  region of code, and the following tables are the data structures used\n    --  to keep track of these regions.\n \n    --  The first table is used for the basic command line control, and for\n-   --  the forms of Warning with a single ON or OFF parameter\n+   --  the forms of Warning with a single ON or OFF parameter.\n \n    --  It contains pairs of source locations, the first being the start\n    --  location for a warnings off region, and the second being the end"}, {"sha": "c54f3b08ad2d8641bdddfe526063b951afe33e1c", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -8405,12 +8405,10 @@ package body Exp_Ch3 is\n       --    Disp_Requeue\n       --    Disp_Timed_Select\n \n-      --  These operations cannot be implemented on VM targets, so we simply\n-      --  disable their generation in this case. Disable the generation of\n-      --  these bodies if No_Dispatching_Calls, Ravenscar or ZFP is active.\n+      --  Disable the generation of these bodies if No_Dispatching_Calls,\n+      --  Ravenscar or ZFP is active.\n \n       if Ada_Version >= Ada_2005\n-        and then Tagged_Type_Expansion\n         and then not Restriction_Active (No_Dispatching_Calls)\n         and then not Restriction_Active (No_Select_Statements)\n         and then RTE_Available (RE_Select_Specific_Data)\n@@ -8454,12 +8452,22 @@ package body Exp_Ch3 is\n          --  primitives to override the abstract primitives of the interface\n          --  type.\n \n+         --  In VM targets we define these primitives in all root tagged types\n+         --  that are not interface types. Done because in VM targets we don't\n+         --  have secondary dispatch tables and any derivation of Tag_Typ may\n+         --  cover limited interfaces (which always have these primitives since\n+         --  they may be ancestors of synchronized interface types).\n+\n          elsif (not Is_Interface (Tag_Typ)\n                   and then Is_Interface (Etype (Tag_Typ))\n                   and then Is_Limited_Record (Etype (Tag_Typ)))\n              or else\n                (Is_Concurrent_Record_Type (Tag_Typ)\n                   and then Has_Interfaces (Tag_Typ))\n+             or else\n+               (not Tagged_Type_Expansion\n+                  and then not Is_Interface (Tag_Typ)\n+                  and then Tag_Typ = Root_Type (Tag_Typ))\n          then\n             Append_To (Res,\n               Make_Subprogram_Declaration (Loc,\n@@ -8923,18 +8931,26 @@ package body Exp_Ch3 is\n \n       --  The interface versions will have null bodies\n \n-      --  These operations cannot be implemented on VM targets, so we simply\n-      --  disable their generation in this case. Disable the generation of\n-      --  these bodies if No_Dispatching_Calls, Ravenscar or ZFP is active.\n+      --  Disable the generation of these bodies if No_Dispatching_Calls,\n+      --  Ravenscar or ZFP is active.\n+\n+      --  In VM targets we define these primitives in all root tagged types\n+      --  that are not interface types. Done because in VM targets we don't\n+      --  have secondary dispatch tables and any derivation of Tag_Typ may\n+      --  cover limited interfaces (which always have these primitives since\n+      --  they may be ancestors of synchronized interface types).\n \n       if Ada_Version >= Ada_2005\n-        and then Tagged_Type_Expansion\n         and then not Is_Interface (Tag_Typ)\n         and then\n           ((Is_Interface (Etype (Tag_Typ))\n               and then Is_Limited_Record (Etype (Tag_Typ)))\n-           or else (Is_Concurrent_Record_Type (Tag_Typ)\n-                      and then Has_Interfaces (Tag_Typ)))\n+           or else\n+             (Is_Concurrent_Record_Type (Tag_Typ)\n+                and then Has_Interfaces (Tag_Typ))\n+           or else\n+             (not Tagged_Type_Expansion\n+               and then Tag_Typ = Root_Type (Tag_Typ)))\n         and then not Restriction_Active (No_Dispatching_Calls)\n         and then not Restriction_Active (No_Select_Statements)\n         and then RTE_Available (RE_Select_Specific_Data)"}, {"sha": "986ed35092b62092a58eaedd447f9a8db3c436fb", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -8695,14 +8695,41 @@ package body Exp_Ch9 is\n          --      (Ada.Tags.Tag (Concval),\n          --       <interface dispatch table position of Ename>)\n \n-         Prepend_To (Params,\n-           Make_Function_Call (Loc,\n-             Name =>\n-               New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n+         if Tagged_Type_Expansion then\n+            Prepend_To (Params,\n+              Make_Function_Call (Loc,\n+                Name =>\n+                  New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n \n-             Parameter_Associations => New_List (\n-               Unchecked_Convert_To (RTE (RE_Tag), Concval),\n-               Make_Integer_Literal (Loc, DT_Position (Entity (Ename))))));\n+                Parameter_Associations => New_List (\n+                  Unchecked_Convert_To (RTE (RE_Tag), Concval),\n+                  Make_Integer_Literal (Loc, DT_Position (Entity (Ename))))));\n+\n+         --  VM targets\n+\n+         else\n+            Prepend_To (Params,\n+              Make_Function_Call (Loc,\n+                Name =>\n+                  New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n+\n+                Parameter_Associations => New_List (\n+                  --  Obj_Typ\n+\n+                  Make_Attribute_Reference (Loc,\n+                    Prefix => Concval,\n+                    Attribute_Name => Name_Tag),\n+\n+                  --  Tag_Typ\n+\n+                  Make_Attribute_Reference (Loc,\n+                    Prefix => New_Reference_To (Etype (Concval), Loc),\n+                    Attribute_Name => Name_Tag),\n+\n+                  --  Position\n+\n+                  Make_Integer_Literal (Loc, DT_Position (Entity (Ename))))));\n+         end if;\n \n          --  Specific actuals for protected to XXX requeue\n \n@@ -10878,7 +10905,7 @@ package body Exp_Ch9 is\n    --              Ada.Tags.Get_Tagged_Kind (Ada.Tags.Tag (<object>));\n    --       M  : Integer :=...;\n    --       P  : Parameters := (Param1 .. ParamN);\n-   --       S  : Iteger;\n+   --       S  : Integer;\n \n    --    begin\n    --       if K = Ada.Tags.TK_Limited_Tagged then"}, {"sha": "9b9946676392f3486ec604112505e8936e782c18", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 199, "deletions": 30, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -759,7 +759,11 @@ package body Exp_Disp is\n       elsif TSS_Name = TSS_Deep_Finalize then\n          return Uint_10;\n \n-      elsif Ada_Version >= Ada_2005 then\n+      --  In VM targets unconditionally allow obtaining the position associated\n+      --  with predefined interface primitives since in these platforms any\n+      --  tagged type has these primitives.\n+\n+      elsif Ada_Version >= Ada_2005 or else not Tagged_Type_Expansion then\n          if Chars (E) = Name_uDisp_Asynchronous_Select then\n             return Uint_11;\n \n@@ -2147,7 +2151,11 @@ package body Exp_Disp is\n \n    function Is_Predefined_Interface_Primitive (E : Entity_Id) return Boolean is\n    begin\n-      return Ada_Version >= Ada_2005\n+      --  In VM targets we don't restrict the functionality of this test to\n+      --  compiling in Ada 2005 mode since in VM targets any tagged type has\n+      --  these primitives\n+\n+      return (Ada_Version >= Ada_2005 or else not Tagged_Type_Expansion)\n         and then (Chars (E) = Name_uDisp_Asynchronous_Select or else\n                   Chars (E) = Name_uDisp_Conditional_Select  or else\n                   Chars (E) = Name_uDisp_Get_Prim_Op_Kind    or else\n@@ -6307,12 +6315,178 @@ package body Exp_Disp is\n    -----------------\n \n    function Make_VM_TSD (Typ : Entity_Id) return List_Id is\n-      Loc              : constant Source_Ptr := Sloc (Typ);\n-      Result           : constant List_Id := New_List;\n+      Loc    : constant Source_Ptr := Sloc (Typ);\n+      Result : constant List_Id := New_List;\n+\n+      function Count_Primitives (Typ : Entity_Id) return Nat;\n+      --  Count the non-predefined primitive operations of Typ\n+\n+      ----------------------\n+      -- Count_Primitives --\n+      ----------------------\n+\n+      function Count_Primitives (Typ : Entity_Id) return Nat is\n+         Nb_Prim   : Nat;\n+         Prim_Elmt : Elmt_Id;\n+         Prim      : Entity_Id;\n+\n+      begin\n+         Nb_Prim := 0;\n+\n+         Prim_Elmt := First_Elmt (Primitive_Operations (Typ));\n+         while Present (Prim_Elmt) loop\n+            Prim := Node (Prim_Elmt);\n+\n+            if Is_Predefined_Dispatching_Operation (Prim)\n+              or else Is_Predefined_Dispatching_Alias (Prim)\n+            then\n+               null;\n+\n+            elsif Present (Interface_Alias (Prim)) then\n+               null;\n+\n+            else\n+               Nb_Prim := Nb_Prim + 1;\n+            end if;\n+\n+            Next_Elmt (Prim_Elmt);\n+         end loop;\n+\n+         return Nb_Prim;\n+      end Count_Primitives;\n+\n+      --------------\n+      -- Make_OSD --\n+      --------------\n+\n+      function Make_OSD (Iface : Entity_Id) return Node_Id;\n+      --  Generate the Object Specific Data table required to dispatch calls\n+      --  through synchronized interfaces. Returns a node that references the\n+      --  generated OSD object.\n+\n+      function Make_OSD (Iface : Entity_Id) return Node_Id is\n+         Nb_Prim       : constant Nat := Count_Primitives (Iface);\n+         OSD           : Entity_Id;\n+         OSD_Aggr_List : List_Id;\n+\n+      begin\n+         --  Generate\n+         --   OSD : Ada.Tags.Object_Specific_Data (Nb_Prims) :=\n+         --          (OSD_Table => (1 => <value>,\n+         --                           ...\n+         --                         N => <value>));\n+\n+         if Nb_Prim = 0\n+           or else Is_Abstract_Type (Typ)\n+           or else Is_Controlled (Typ)\n+           or else Restriction_Active (No_Dispatching_Calls)\n+           or else not Is_Limited_Type (Typ)\n+           or else not Has_Interfaces (Typ)\n+           or else not RTE_Record_Component_Available (RE_OSD_Table)\n+         then\n+            --  No OSD table required\n+\n+            return Make_Null (Loc);\n+\n+         else\n+            OSD_Aggr_List := New_List;\n+\n+            declare\n+               Prim_Table : array (Nat range 1 .. Nb_Prim) of Entity_Id;\n+               Prim       : Entity_Id;\n+               Prim_Alias : Entity_Id;\n+               Prim_Elmt  : Elmt_Id;\n+               E          : Entity_Id;\n+               Count      : Nat := 0;\n+               Pos        : Nat;\n+\n+            begin\n+               Prim_Table := (others => Empty);\n+               Prim_Alias := Empty;\n+\n+               Prim_Elmt := First_Elmt (Primitive_Operations (Typ));\n+               while Present (Prim_Elmt) loop\n+                  Prim := Node (Prim_Elmt);\n+\n+                  if Present (Interface_Alias (Prim))\n+                    and then Find_Dispatching_Type\n+                               (Interface_Alias (Prim)) = Iface\n+                  then\n+                     Prim_Alias := Interface_Alias (Prim);\n+                     E   := Ultimate_Alias (Prim);\n+                     Pos := UI_To_Int (DT_Position (Prim_Alias));\n+\n+                     if Present (Prim_Table (Pos)) then\n+                        pragma Assert (Prim_Table (Pos) = E);\n+                        null;\n+\n+                     else\n+                        Prim_Table (Pos) := E;\n+\n+                        Append_To (OSD_Aggr_List,\n+                          Make_Component_Association (Loc,\n+                            Choices => New_List (\n+                              Make_Integer_Literal (Loc,\n+                                DT_Position (Prim_Alias))),\n+                            Expression =>\n+                              Make_Integer_Literal (Loc,\n+                                DT_Position (Alias (Prim)))));\n+\n+                        Count := Count + 1;\n+                     end if;\n+                  end if;\n+\n+                  Next_Elmt (Prim_Elmt);\n+               end loop;\n+               pragma Assert (Count = Nb_Prim);\n+            end;\n+\n+            OSD := Make_Temporary (Loc, 'I');\n+\n+            Append_To (Result,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => OSD,\n+                Aliased_Present     => True,\n+                Constant_Present    => True,\n+                Object_Definition   =>\n+                  Make_Subtype_Indication (Loc,\n+                    Subtype_Mark =>\n+                      New_Reference_To (RTE (RE_Object_Specific_Data), Loc),\n+                    Constraint =>\n+                      Make_Index_Or_Discriminant_Constraint (Loc,\n+                        Constraints => New_List (\n+                          Make_Integer_Literal (Loc, Nb_Prim)))),\n+\n+                Expression          =>\n+                  Make_Aggregate (Loc,\n+                    Component_Associations => New_List (\n+                      Make_Component_Association (Loc,\n+                        Choices => New_List (\n+                          New_Occurrence_Of\n+                            (RTE_Record_Component (RE_OSD_Num_Prims), Loc)),\n+                        Expression =>\n+                          Make_Integer_Literal (Loc, Nb_Prim)),\n+\n+                      Make_Component_Association (Loc,\n+                        Choices => New_List (\n+                          New_Occurrence_Of\n+                            (RTE_Record_Component (RE_OSD_Table), Loc)),\n+                        Expression => Make_Aggregate (Loc,\n+                          Component_Associations => OSD_Aggr_List))))));\n+\n+            return\n+              Make_Attribute_Reference (Loc,\n+                Prefix => New_Reference_To (OSD, Loc),\n+                Attribute_Name => Name_Unchecked_Access);\n+         end if;\n+      end Make_OSD;\n+\n+      --  Local variables\n+\n+      Nb_Prim          : constant Nat := Count_Primitives (Typ);\n       AI               : Elmt_Id;\n       I_Depth          : Nat;\n       Iface_Table_Node : Node_Id;\n-      Nb_Prim          : Nat;\n       Num_Ifaces       : Nat;\n       TSD_Aggr_List    : List_Id;\n       Typ_Ifaces       : Elist_Id;\n@@ -6334,12 +6508,13 @@ package body Exp_Disp is\n \n       --   TSD : Type_Specific_Data (I_Depth) :=\n       --           (Idepth                => I_Depth,\n-      --            T                     => T'Tag,\n+      --            Tag_Kind              => <tag_kind-value>,\n       --            Access_Level          => Type_Access_Level (Typ),\n       --            HT_Link               => null,\n       --            Type_Is_Abstract      => <<boolean-value>>,\n       --            Type_Is_Library_Level => <<boolean-value>>,\n       --            Interfaces_Table      => <<access-value>>\n+      --            SSD                   => SSD_Table'Address\n       --            Tags_Table            => (0 => Typ'Tag,\n       --                                      1 => Parent'Tag\n       --                                      ...));\n@@ -6371,9 +6546,15 @@ package body Exp_Disp is\n          end loop;\n       end;\n \n+      --  I_Depth\n+\n       Append_To (TSD_Aggr_List,\n         Make_Integer_Literal (Loc, I_Depth));\n \n+      --  Tag_Kind\n+\n+      Append_To (TSD_Aggr_List, Tagged_Kind (Typ));\n+\n       --  Access_Level\n \n       Append_To (TSD_Aggr_List,\n@@ -6431,17 +6612,27 @@ package body Exp_Disp is\n          else\n             declare\n                TSD_Ifaces_List : constant List_Id := New_List;\n+               Iface           : Entity_Id;\n                ITable          : Node_Id;\n \n             begin\n                AI := First_Elmt (Typ_Ifaces);\n                while Present (AI) loop\n+                  Iface := Node (AI);\n+\n                   Append_To (TSD_Ifaces_List,\n                      Make_Aggregate (Loc,\n                        Expressions => New_List (\n+\n+                           --  Iface_Tag\n+\n                          Make_Attribute_Reference (Loc,\n-                           Prefix => New_Reference_To (Node (AI), Loc),\n-                           Attribute_Name => Name_Tag))));\n+                           Prefix => New_Reference_To (Iface, Loc),\n+                           Attribute_Name => Name_Tag),\n+\n+                           --  OSD\n+\n+                         Make_OSD (Iface))));\n \n                   Next_Elmt (AI);\n                end loop;\n@@ -6482,28 +6673,6 @@ package body Exp_Disp is\n       --  implement synchronized interfaces. The size of the table is\n       --  constrained by the number of non-predefined primitive operations.\n \n-      --  Count the non-predefined primitive operations\n-\n-      Nb_Prim := 0;\n-\n-      declare\n-         Prim_Elmt : Elmt_Id;\n-         Prim      : Entity_Id;\n-      begin\n-         Prim_Elmt := First_Elmt (Primitive_Operations (Typ));\n-         while Present (Prim_Elmt) loop\n-            Prim := Node (Prim_Elmt);\n-\n-            if not (Is_Predefined_Dispatching_Operation (Prim)\n-                      or else Is_Predefined_Dispatching_Alias (Prim))\n-            then\n-               Nb_Prim := Nb_Prim + 1;\n-            end if;\n-\n-            Next_Elmt (Prim_Elmt);\n-         end loop;\n-      end;\n-\n       if RTE_Record_Component_Available (RE_SSD) then\n          if Ada_Version >= Ada_2005\n            and then Has_DT (Typ)"}, {"sha": "0c17bd16374f2ae4094b67e94d83e6c2b9c3e77b", "filename": "gcc/ada/exp_sel.adb", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fexp_sel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fexp_sel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_sel.adb?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,7 +26,10 @@\n with Einfo;   use Einfo;\n with Nlists;  use Nlists;\n with Nmake;   use Nmake;\n+with Opt;     use Opt;\n with Rtsfind; use Rtsfind;\n+with Sinfo;   use Sinfo;\n+with Snames;  use Snames;\n with Stand;   use Stand;\n with Tbuild;  use Tbuild;\n \n@@ -144,8 +147,19 @@ package body Exp_Sel is\n       Decls : List_Id;\n       Obj   : Entity_Id) return Entity_Id\n    is\n-      K : constant Entity_Id := Make_Temporary (Loc, 'K');\n+      K        : constant Entity_Id := Make_Temporary (Loc, 'K');\n+      Tag_Node : Node_Id;\n+\n    begin\n+      if Tagged_Type_Expansion then\n+         Tag_Node := Unchecked_Convert_To (RTE (RE_Tag), Obj);\n+      else\n+         Tag_Node :=\n+           Make_Attribute_Reference (Loc,\n+             Prefix => Obj,\n+             Attribute_Name => Name_Tag);\n+      end if;\n+\n       Append_To (Decls,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => K,\n@@ -154,8 +168,7 @@ package body Exp_Sel is\n           Expression          =>\n             Make_Function_Call (Loc,\n               Name => New_Reference_To (RTE (RE_Get_Tagged_Kind), Loc),\n-              Parameter_Associations => New_List (\n-                Unchecked_Convert_To (RTE (RE_Tag), Obj)))));\n+              Parameter_Associations => New_List (Tag_Node))));\n       return K;\n    end Build_K;\n \n@@ -186,16 +199,47 @@ package body Exp_Sel is\n       Obj      : Entity_Id;\n       Call_Ent : Entity_Id) return Node_Id\n    is\n+      Typ : constant Entity_Id := Etype (Obj);\n+\n    begin\n-      return\n-        Make_Assignment_Statement (Loc,\n-          Name => New_Reference_To (S, Loc),\n-          Expression =>\n-            Make_Function_Call (Loc,\n-              Name => New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n-              Parameter_Associations => New_List (\n-                Unchecked_Convert_To (RTE (RE_Tag), Obj),\n-                Make_Integer_Literal (Loc, DT_Position (Call_Ent)))));\n+      if Tagged_Type_Expansion then\n+         return\n+           Make_Assignment_Statement (Loc,\n+             Name => New_Reference_To (S, Loc),\n+             Expression =>\n+               Make_Function_Call (Loc,\n+                 Name => New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n+                 Parameter_Associations => New_List (\n+                   Unchecked_Convert_To (RTE (RE_Tag), Obj),\n+                   Make_Integer_Literal (Loc, DT_Position (Call_Ent)))));\n+\n+      --  VM targets\n+\n+      else\n+         return\n+           Make_Assignment_Statement (Loc,\n+             Name => New_Reference_To (S, Loc),\n+             Expression =>\n+               Make_Function_Call (Loc,\n+                 Name => New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n+                 Parameter_Associations => New_List (\n+\n+                     --  Obj_Typ\n+\n+                   Make_Attribute_Reference (Loc,\n+                     Prefix => Obj,\n+                     Attribute_Name => Name_Tag),\n+\n+                     --  Iface_Typ\n+\n+                   Make_Attribute_Reference (Loc,\n+                     Prefix => New_Reference_To (Typ, Loc),\n+                     Attribute_Name => Name_Tag),\n+\n+                     --  Position\n+\n+                   Make_Integer_Literal (Loc, DT_Position (Call_Ent)))));\n+      end if;\n    end Build_S_Assignment;\n \n end Exp_Sel;"}, {"sha": "cc3435b05815714e46841f8544df4ecbf3347373", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 51, "deletions": 46, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -1770,70 +1770,75 @@ gnat_ugn, @value{EDITION} User's Guide}.\n Syntax:\n \n @smallexample @c ada\n-pragma Eliminate (UNIT_NAME, ENTITY, Source_Location => SOURCE_TRACE)\n-\n-UNIT_NAME        ::= IDENTIFIER |\n-                     SELECTED_COMPONENT,\n+pragma Eliminate ([Entity          =>] DEFINING_DESIGNATOR,\n+                  [Source_Location =>] STRING_LITERAL);\n+@end smallexample\n \n-ENTITY           ::= IDENTIFIER |\n-                     SELECTED_COMPONENT,\n+@noindent\n+The string literal given for the source location is a string which\n+specifies the line number of the occurrence of the entity, using\n+the syntax for SOURCE_TRACE given below:\n \n-SOURCE_TRACE     ::= SOURCE_REFERENCE |\n-                     SOURCE_REFERENCE LBRACKET SOURCE_TRACE RBRACKET\n+@smallexample @c ada\n+ SOURCE_TRACE     ::= SOURCE_REFERENCE [LBRACKET SOURCE_TRACE RBRACKET]\n \n-LBRACKET         ::= [\n-RBRACKET         ::= ]\n+ LBRACKET         ::= [\n+ RBRACKET         ::= ]\n \n-SOURCE_REFERENCE ::= FILE_NAME : LINE_NUMBER\n+ SOURCE_REFERENCE ::= FILE_NAME : LINE_NUMBER\n \n-FILE_NAME        ::= STRING_LITERAL\n-LINE_NUMBER      ::= INTEGER_LITERAL\n+ LINE_NUMBER      ::= DIGIT @{DIGIT@}\n @end smallexample\n \n @noindent\n-This pragma indicates that the given entity is not used in the program\n-to be compiled and built. The entity must be an explicitly declared\n-subprogram; this includes generic subprogram instances and\n-subprograms declared in generic package instances. @code{Unit_Name}\n-must be the name of the compilation unit in which the entity is declared.\n+Spaces around the colon in a @code{Source_Reference} are optional.\n+\n+The @code{DEFINING_DESIGNATOR} matches the defining designator used in an\n+explicit subprogram declaration, where the @code{entity} name in this\n+designator appears on the source line specified by the source location.\n+\n+The source trace that is given as the @code{Source_Location} shall obey the\n+following rules. The @code{FILE_NAME} is the short name (with no directory\n+information) of an Ada source file, given using exactly the required syntax\n+for the underlying file system (e.g. case is important if the underlying\n+operating system is case sensitive). @code{LINE_NUMBER} gives the line\n+number of the occurrence of the @code{entity}\n+as a decimal literal without an exponent or point. If an @code{entity} is not\n+declared in a generic instantiation (this includes generic subprogram\n+instances), the source trace includes only one source reference. If an entity\n+is declared inside a generic instantiation, its source trace (when parsing\n+from left to right) starts with the source location of the declaration of the\n+entity in the generic unit and ends with the source location of the\n+instantiation (it is given in square brackets). This approach is recursively\n+used in case of nested instantiations: the rightmost (nested most deeply in\n+square brackets) element of the source trace is the location of the outermost\n+instantiation, the next to left element is the location of the next (first\n+nested) instantiation in the code of the corresponding generic unit, and so\n+on, and the leftmost element (that is out of any square brackets) is the\n+location of the declaration of the entity to eliminate in a generic unit.\n \n-The @code{Source_Location} argument is used to resolve overloading\n-in case more then one callable entity with the same name is declared\n-in the given compilation unit. Each file name must be the short name of the\n-source file (with no directory information).\n-If an entity is not declared in\n-a generic instantiation (this includes generic subprogram instances),\n-the source trace includes only one source\n-reference. If an entity is declared inside a generic instantiation,\n-its source trace starts from the source location in the instantiation and\n-ends with the source location of the declaration of the corresponding\n-entity in the generic\n-unit. This approach is recursively used in case of nested instantiations:\n-the leftmost element of the\n-source trace is the location of the outermost instantiation, the next\n-element is the location of the next (first nested) instantiation in the\n-code of the corresponding generic unit, and so on.\n+Note that the @code{Source_Location} argument specifies which of a set of\n+similarly named entities is being eliminated, dealing both with overloading,\n+and also appearence of the same entity name in different scopes.\n \n-The effect of the pragma is to allow the compiler to eliminate\n-the code or data associated with the named entity.  Any reference to\n-an eliminated entity outside the compilation unit where it is defined\n-causes a compile-time or link-time error.\n+This pragma indicates that the given entity is not used in the program to be\n+compiled and built. The effect of the pragma is to allow the compiler to\n+eliminate the code or data associated with the named entity. Any reference to\n+an eliminated entity causes a compile-time or link-time error.\n \n The intention of pragma @code{Eliminate} is to allow a program to be compiled\n in a system-independent manner, with unused entities eliminated, without\n-needing to modify the source text.  Normally the required set\n-of @code{Eliminate} pragmas is constructed automatically using the gnatelim\n-tool. Elimination of unused entities local to a compilation unit is\n-automatic, without requiring the use of pragma @code{Eliminate}.\n+needing to modify the source text. Normally the required set of\n+@code{Eliminate} pragmas is constructed automatically using the gnatelim tool.\n \n Any source file change that removes, splits, or\n adds lines may make the set of Eliminate pragmas invalid because their\n @code{Source_Location} argument values may get out of date.\n \n-Pragma Eliminate may be used where the referenced entity is a\n-dispatching operation. In this case all the subprograms to which the\n-given operation can dispatch are considered to be unused (are never called\n-as a result of a direct or a dispatching call).\n+Pragma @code{Eliminate} may be used where the referenced entity is a dispatching\n+operation. In this case all the subprograms to which the given operation can\n+dispatch are considered to be unused (are never called as a result of a direct\n+or a dispatching call).\n \n @node Pragma Export_Exception\n @unnumberedsec Pragma Export_Exception"}, {"sha": "3c21c975e8e8ec9df22726b39dc7ab4a4f9d12ed", "filename": "gcc/ada/link.c", "status": "modified", "additions": 46, "deletions": 30, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flink.c?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -37,6 +37,7 @@ extern \"C\" {\n #endif\n \n #include <string.h>\n+#include \"auto-host.h\"\n \n /*  objlist_file_supported is set to 1 when the system linker allows        */\n /*  response file, that is a file that contains the list of object files.   */\n@@ -160,36 +161,6 @@ const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n \n-#elif defined (VMS)\n-const char *__gnat_object_file_option = \"\";\n-const char *__gnat_run_path_option = \"\";\n-char __gnat_shared_libgnat_default = STATIC;\n-char __gnat_shared_libgcc_default = STATIC;\n-int __gnat_link_max = 2147483647;\n-unsigned char __gnat_objlist_file_supported = 0;\n-unsigned char __gnat_using_gnu_linker = 0;\n-const char *__gnat_object_library_extension = \".olb\";\n-unsigned char __gnat_separate_run_path_options = 0;\n-const char *__gnat_default_libgcc_subdir = \"lib\";\n-\n-#elif defined (sun)\n-const char *__gnat_object_file_option = \"\";\n-const char *__gnat_run_path_option = \"-Wl,-R\";\n-char __gnat_shared_libgnat_default = STATIC;\n-char __gnat_shared_libgcc_default = STATIC;\n-int __gnat_link_max = 2147483647;\n-unsigned char __gnat_objlist_file_supported = 0;\n-unsigned char __gnat_using_gnu_linker = 0;\n-const char *__gnat_object_library_extension = \".a\";\n-unsigned char __gnat_separate_run_path_options = 0;\n-#if defined (__sparc_v9__) || defined (__sparcv9)\n-const char *__gnat_default_libgcc_subdir = \"lib/sparcv9\";\n-#elif defined (__x86_64)\n-const char *__gnat_default_libgcc_subdir = \"lib/amd64\";\n-#else\n-const char *__gnat_default_libgcc_subdir = \"lib\";\n-#endif\n-\n #elif defined (__FreeBSD__)\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n@@ -230,6 +201,51 @@ const char *__gnat_default_libgcc_subdir = \"lib64\";\n const char *__gnat_default_libgcc_subdir = \"lib\";\n #endif\n \n+#elif (HAVE_GNU_LD)\n+/*  These are the settings for all systems that use gnu ld. GNU style response\n+    file is supported, the shared library default is STATIC.  */\n+\n+const char *__gnat_run_path_option = \"\";\n+const char *__gnat_object_file_option = \"\";\n+char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n+int __gnat_link_max = 8192;\n+unsigned char __gnat_objlist_file_supported = 1;\n+unsigned char __gnat_using_gnu_linker = 1;\n+const char *__gnat_object_library_extension = \".a\";\n+unsigned char __gnat_separate_run_path_options = 0;\n+const char *__gnat_default_libgcc_subdir = \"lib\";\n+\n+#elif defined (VMS)\n+const char *__gnat_object_file_option = \"\";\n+const char *__gnat_run_path_option = \"\";\n+char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n+int __gnat_link_max = 2147483647;\n+unsigned char __gnat_objlist_file_supported = 0;\n+unsigned char __gnat_using_gnu_linker = 0;\n+const char *__gnat_object_library_extension = \".olb\";\n+unsigned char __gnat_separate_run_path_options = 0;\n+const char *__gnat_default_libgcc_subdir = \"lib\";\n+\n+#elif defined (sun)\n+const char *__gnat_object_file_option = \"\";\n+const char *__gnat_run_path_option = \"-Wl,-R\";\n+char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n+int __gnat_link_max = 2147483647;\n+unsigned char __gnat_objlist_file_supported = 0;\n+unsigned char __gnat_using_gnu_linker = 0;\n+const char *__gnat_object_library_extension = \".a\";\n+unsigned char __gnat_separate_run_path_options = 0;\n+#if defined (__sparc_v9__) || defined (__sparcv9)\n+const char *__gnat_default_libgcc_subdir = \"lib/sparcv9\";\n+#elif defined (__x86_64)\n+const char *__gnat_default_libgcc_subdir = \"lib/amd64\";\n+#else\n+const char *__gnat_default_libgcc_subdir = \"lib\";\n+#endif\n+\n #elif defined (__svr4__) && defined (i386)\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"\";"}, {"sha": "a11894cb8f8778dab77fd4febbd6fbea943d1cdc", "filename": "gcc/ada/par-ch11.adb", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fpar-ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fpar-ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch11.adb?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,11 +56,28 @@ package body Ch11 is\n    --  Error_Recovery : Cannot raise Error_Resync\n \n    function P_Handled_Sequence_Of_Statements return Node_Id is\n-      Handled_Stmt_Seq_Node : Node_Id;\n+      Handled_Stmt_Seq_Node  : Node_Id;\n+      Seq_Is_Hidden_In_SPARK : Boolean;\n+      Hidden_Region_Start    : Source_Ptr;\n \n    begin\n       Handled_Stmt_Seq_Node :=\n         New_Node (N_Handled_Sequence_Of_Statements, Token_Ptr);\n+\n+      --  In SPARK, a HIDE directive can be placed at the beginning of a\n+      --  package initialization, thus hiding the sequence of statements (and\n+      --  possible exception handlers) from SPARK tool-set. No violation of the\n+      --  SPARK restriction should be issued on nodes in a hidden part, which\n+      --  is obtained by marking such hidden parts.\n+\n+      if Token = Tok_SPARK_Hide then\n+         Seq_Is_Hidden_In_SPARK := True;\n+         Hidden_Region_Start    := Token_Ptr;\n+         Scan; -- past HIDE directive\n+      else\n+         Seq_Is_Hidden_In_SPARK := False;\n+      end if;\n+\n       Set_Statements\n         (Handled_Stmt_Seq_Node, P_Sequence_Of_Statements (SS_Extm_Sreq));\n \n@@ -70,6 +87,10 @@ package body Ch11 is\n            (Handled_Stmt_Seq_Node, Parse_Exception_Handlers);\n       end if;\n \n+      if Seq_Is_Hidden_In_SPARK then\n+         Set_Hidden_Part_In_SPARK (Hidden_Region_Start, Token_Ptr);\n+      end if;\n+\n       return Handled_Stmt_Seq_Node;\n    end P_Handled_Sequence_Of_Statements;\n \n@@ -229,10 +250,26 @@ package body Ch11 is\n    --  Error recovery: cannot raise Error_Resync\n \n    function Parse_Exception_Handlers return List_Id is\n-      Handler       : Node_Id;\n-      Handlers_List : List_Id;\n+      Handler                    : Node_Id;\n+      Handlers_List              : List_Id;\n+      Handler_Is_Hidden_In_SPARK : Boolean;\n+      Hidden_Region_Start        : Source_Ptr;\n \n    begin\n+      --  In SPARK, a HIDE directive can be placed at the beginning of a\n+      --  sequence of exception handlers for a subprogram implementation, thus\n+      --  hiding the exception handlers from SPARK tool-set. No violation of\n+      --  the SPARK restriction should be issued on nodes in a hidden part,\n+      --  which is obtained by marking such hidden parts.\n+\n+      if Token = Tok_SPARK_Hide then\n+         Handler_Is_Hidden_In_SPARK := True;\n+         Hidden_Region_Start        := Token_Ptr;\n+         Scan; -- past HIDE directive\n+      else\n+         Handler_Is_Hidden_In_SPARK := False;\n+      end if;\n+\n       Handlers_List := New_List;\n       P_Pragmas_Opt (Handlers_List);\n \n@@ -253,6 +290,10 @@ package body Ch11 is\n          end loop;\n       end if;\n \n+      if Handler_Is_Hidden_In_SPARK then\n+         Set_Hidden_Part_In_SPARK (Hidden_Region_Start, Token_Ptr);\n+      end if;\n+\n       return Handlers_List;\n    end Parse_Exception_Handlers;\n "}, {"sha": "97dd084302fa16a583d0414b91ec8fdc0c8c1a59", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -628,6 +628,9 @@ package body Ch6 is\n          else\n             Scan_Body_Or_Expression_Function : declare\n \n+               Body_Is_Hidden_In_SPARK : Boolean;\n+               Hidden_Region_Start     : Source_Ptr;\n+\n                function Likely_Expression_Function return Boolean;\n                --  Returns True if we have a probable case of an expression\n                --  function omitting the parentheses, if so, returns True\n@@ -770,7 +773,26 @@ package body Ch6 is\n                   Body_Node :=\n                     New_Node (N_Subprogram_Body, Sloc (Specification_Node));\n                   Set_Specification (Body_Node, Specification_Node);\n+\n+                  --  In SPARK, a HIDE directive can be placed at the beginning\n+                  --  of a subprogram implementation, thus hiding the\n+                  --  subprogram body from SPARK tool-set. No violation of the\n+                  --  SPARK restriction should be issued on nodes in a hidden\n+                  --  part, which is obtained by marking such hidden parts.\n+\n+                  if Token = Tok_SPARK_Hide then\n+                     Body_Is_Hidden_In_SPARK := True;\n+                     Hidden_Region_Start     := Token_Ptr;\n+                     Scan; -- past HIDE directive\n+                  else\n+                     Body_Is_Hidden_In_SPARK := False;\n+                  end if;\n+\n                   Parse_Decls_Begin_End (Body_Node);\n+\n+                  if Body_Is_Hidden_In_SPARK then\n+                     Set_Hidden_Part_In_SPARK (Hidden_Region_Start, Token_Ptr);\n+                  end if;\n                end if;\n \n                return Body_Node;"}, {"sha": "15f98bfcfb336f6b793a2d6e9008de5e61b48c17", "filename": "gcc/ada/par-ch7.adb", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fpar-ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fpar-ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch7.adb?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -110,6 +110,10 @@ package body Ch7 is\n       --  Dummy node to attach aspect specifications to until we properly\n       --  figure out where they eventually belong.\n \n+      Body_Is_Hidden_In_SPARK         : Boolean;\n+      Private_Part_Is_Hidden_In_SPARK : Boolean;\n+      Hidden_Region_Start             : Source_Ptr;\n+\n    begin\n       Push_Scope_Stack;\n       Scope.Table (Scope.Last).Etyp := E_Name;\n@@ -153,7 +157,26 @@ package body Ch7 is\n          else\n             Package_Node := New_Node (N_Package_Body, Package_Sloc);\n             Set_Defining_Unit_Name (Package_Node, Name_Node);\n+\n+            --  In SPARK, a HIDE directive can be placed at the beginning of a\n+            --  package implementation, thus hiding the package body from SPARK\n+            --  tool-set. No violation of the SPARK restriction should be\n+            --  issued on nodes in a hidden part, which is obtained by marking\n+            --  such hidden parts.\n+\n+            if Token = Tok_SPARK_Hide then\n+               Body_Is_Hidden_In_SPARK := True;\n+               Hidden_Region_Start     := Token_Ptr;\n+               Scan; -- past HIDE directive\n+            else\n+               Body_Is_Hidden_In_SPARK := False;\n+            end if;\n+\n             Parse_Decls_Begin_End (Package_Node);\n+\n+            if Body_Is_Hidden_In_SPARK then\n+               Set_Hidden_Part_In_SPARK (Hidden_Region_Start, Token_Ptr);\n+            end if;\n          end if;\n \n       --  Cases other than Package_Body\n@@ -249,9 +272,28 @@ package body Ch7 is\n                   end if;\n \n                   Scan; -- past PRIVATE\n+\n+                  if Token = Tok_SPARK_Hide then\n+                     Private_Part_Is_Hidden_In_SPARK := True;\n+                     Hidden_Region_Start             := Token_Ptr;\n+                     Scan; -- past HIDE directive\n+                  else\n+                     Private_Part_Is_Hidden_In_SPARK := False;\n+                  end if;\n+\n                   Set_Private_Declarations\n                     (Specification_Node, P_Basic_Declarative_Items);\n \n+                  --  In SPARK, a HIDE directive can be placed at the beginning\n+                  --  of a private part, thus hiding all declarations in the\n+                  --  private part from SPARK tool-set. No violation of the\n+                  --  SPARK restriction should be issued on nodes in a hidden\n+                  --  part, which is obtained by marking such hidden parts.\n+\n+                  if Private_Part_Is_Hidden_In_SPARK then\n+                     Set_Hidden_Part_In_SPARK (Hidden_Region_Start, Token_Ptr);\n+                  end if;\n+\n                   --  Deal gracefully with multiple PRIVATE parts\n \n                   while Token = Tok_Private loop"}, {"sha": "e12dd6396b58b1c6b30fbf5a2990a8519bfbc8df", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -119,6 +119,12 @@ package body Restrict is\n    begin\n       if Force or else Comes_From_Source (N) then\n \n+         if Restriction_Check_Required (SPARK)\n+           and then Is_In_Hidden_Part_In_SPARK (Sloc (N))\n+         then\n+            return;\n+         end if;\n+\n          --  Since the call to Restriction_Msg from Check_Restriction may set\n          --  Error_Msg_Sloc to the location of the pragma restriction, save and\n          --  restore the previous value of the global variable around the call.\n@@ -141,6 +147,12 @@ package body Restrict is\n \n       if Comes_From_Source (N) then\n \n+         if Restriction_Check_Required (SPARK)\n+           and then Is_In_Hidden_Part_In_SPARK (Sloc (N))\n+         then\n+            return;\n+         end if;\n+\n          --  Since the call to Restriction_Msg from Check_Restriction may set\n          --  Error_Msg_Sloc to the location of the pragma restriction, save and\n          --  restore the previous value of the global variable around the call.\n@@ -548,6 +560,25 @@ package body Restrict is\n       return Not_A_Restriction_Id;\n    end Get_Restriction_Id;\n \n+   --------------------------------\n+   -- Is_In_Hidden_Part_In_SPARK --\n+   --------------------------------\n+\n+   function Is_In_Hidden_Part_In_SPARK (Loc : Source_Ptr) return Boolean is\n+   begin\n+      --  Loop through table of hidden ranges\n+\n+      for J in SPARK_Hides.First .. SPARK_Hides.Last loop\n+         if SPARK_Hides.Table (J).Start <= Loc\n+           and then Loc <= SPARK_Hides.Table (J).Stop\n+         then\n+            return True;\n+         end if;\n+      end loop;\n+\n+      return False;\n+   end Is_In_Hidden_Part_In_SPARK;\n+\n    -------------------------------\n    -- No_Exception_Handlers_Set --\n    -------------------------------\n@@ -840,6 +871,17 @@ package body Restrict is\n       end if;\n    end Same_Unit;\n \n+   ------------------------------\n+   -- Set_Hidden_Part_In_SPARK --\n+   ------------------------------\n+\n+   procedure Set_Hidden_Part_In_SPARK (Loc1, Loc2 : Source_Ptr) is\n+   begin\n+      SPARK_Hides.Increment_Last;\n+      SPARK_Hides.Table (SPARK_Hides.Last).Start := Loc1;\n+      SPARK_Hides.Table (SPARK_Hides.Last).Stop  := Loc2;\n+   end Set_Hidden_Part_In_SPARK;\n+\n    ------------------------------\n    -- Set_Profile_Restrictions --\n    ------------------------------"}, {"sha": "001d13166bbd93ed6fa84e51bd3e1e2471d27f6e", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -174,6 +174,30 @@ package Restrict is\n      Table_Increment      => 200,\n      Table_Name           => \"Name_No_Dependence\");\n \n+   -------------------------------\n+   -- SPARK Restriction Control --\n+   -------------------------------\n+\n+   --  SPARK HIDE directives allow turning off SPARK restriction for a\n+   --  specified region of code, and the following tables are the data\n+   --  structures used to keep track of these regions.\n+\n+   --  The table contains pairs of source locations, the first being the start\n+   --  location for hidden region, and the second being the end location.\n+\n+   type SPARK_Hide_Entry is record\n+      Start : Source_Ptr;\n+      Stop  : Source_Ptr;\n+   end record;\n+\n+   package SPARK_Hides is new Table.Table (\n+     Table_Component_Type => SPARK_Hide_Entry,\n+     Table_Index_Type     => Natural,\n+     Table_Low_Bound      => 1,\n+     Table_Initial        => 100,\n+     Table_Increment      => 200,\n+     Table_Name           => \"SPARK Hides\");\n+\n    -----------------\n    -- Subprograms --\n    -----------------\n@@ -289,6 +313,10 @@ package Restrict is\n    --  identifier, and if so returns the corresponding Restriction_Id\n    --  value, otherwise returns Not_A_Restriction_Id.\n \n+   function Is_In_Hidden_Part_In_SPARK (Loc : Source_Ptr) return Boolean;\n+   --  Determine if given location is covered by a hidden region range in the\n+   --  SPARK hides table.\n+\n    function No_Exception_Handlers_Set return Boolean;\n    --  Test to see if current restrictions settings specify that no exception\n    --  handlers are present. This function is called by Gigi when it needs to\n@@ -334,6 +362,9 @@ package Restrict is\n    --  of individual Restrictions pragmas). Returns True only if all the\n    --  required restrictions are set.\n \n+   procedure Set_Hidden_Part_In_SPARK (Loc1, Loc2 : Source_Ptr);\n+   --  Insert a new hidden region range in the SPARK hides table\n+\n    procedure Set_Profile_Restrictions\n      (P    : Profile_Name;\n       N    : Node_Id;"}, {"sha": "137f616ccc24d0b5f60e0d91ee9fb42bff71990d", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -213,6 +213,9 @@ package Scans is\n       --  characters '#', '$', '?', '@', '`', '\\', '^', '~', or '_'. The\n       --  character value itself is stored in Scans.Special_Character.\n \n+      Tok_SPARK_Hide,\n+      --  HIDE directive in SPARK\n+\n       No_Token);\n       --  No_Token is used for initializing Token values to indicate that\n       --  no value has been set yet."}, {"sha": "420a4f0f03758e9af04f17e4afcfd626a36194c8", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -184,7 +184,7 @@ package body Scng is\n               Tok_Separate | Tok_EOF | Tok_Semicolon | Tok_Arrow |\n               Tok_Vertical_Bar | Tok_Dot_Dot | Tok_Project | Tok_Extends |\n               Tok_External | Tok_External_As_List | Tok_Comment |\n-              Tok_End_Of_Line | Tok_Special | No_Token =>\n+              Tok_End_Of_Line | Tok_Special | Tok_SPARK_Hide | No_Token =>\n \n             System.CRC32.Update\n               (System.CRC32.CRC32 (Checksum),\n@@ -249,7 +249,7 @@ package body Scng is\n               Tok_Separate | Tok_EOF | Tok_Semicolon | Tok_Arrow |\n               Tok_Vertical_Bar | Tok_Dot_Dot | Tok_Project | Tok_Extends |\n               Tok_External | Tok_External_As_List | Tok_Comment |\n-              Tok_End_Of_Line | Tok_Special | No_Token =>\n+              Tok_End_Of_Line | Tok_Special | Tok_SPARK_Hide | No_Token =>\n \n             System.CRC32.Update\n               (System.CRC32.CRC32 (Checksum),\n@@ -1761,6 +1761,42 @@ package body Scng is\n                   Token := Tok_Comment;\n                   return;\n                end if;\n+\n+               if Source (Start_Of_Comment) = '#' then\n+                  declare\n+                     Scan_SPARK_Ptr : Source_Ptr;\n+\n+                  begin\n+                     Scan_SPARK_Ptr := Start_Of_Comment + 1;\n+\n+                     --  Scan out blanks\n+\n+                     while Source (Scan_SPARK_Ptr) = ' '\n+                       or else Source (Scan_SPARK_Ptr) = HT\n+                     loop\n+                        Scan_SPARK_Ptr := Scan_SPARK_Ptr + 1;\n+                     end loop;\n+\n+                     --  Recognize HIDE directive. SPARK input cannot be\n+                     --  encoded as wide characters, so only deal with\n+                     --  lower/upper case.\n+\n+                     if (Source (Scan_SPARK_Ptr) = 'h'\n+                          or else Source (Scan_SPARK_Ptr) = 'H')\n+                       and then (Source (Scan_SPARK_Ptr + 1) = 'i'\n+                                  or else Source (Scan_SPARK_Ptr + 1) = 'I')\n+                       and then (Source (Scan_SPARK_Ptr + 2) = 'd'\n+                                  or else Source (Scan_SPARK_Ptr + 2) = 'D')\n+                       and then (Source (Scan_SPARK_Ptr + 3) = 'e'\n+                                  or else Source (Scan_SPARK_Ptr + 3) = 'E')\n+                       and then (Source (Scan_SPARK_Ptr + 4) = ' '\n+                                  or else Source (Scan_SPARK_Ptr + 4) = HT)\n+                     then\n+                        Token := Tok_SPARK_Hide;\n+                        return;\n+                     end if;\n+                  end;\n+               end if;\n             end if;\n          end Minus_Case;\n "}, {"sha": "0422d82b7e82bab7dd4119dc6c43f9becd8ee534", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbad0ba4c093d5653e70679aba43193a20881e5/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=4fbad0ba4c093d5653e70679aba43193a20881e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -188,7 +188,7 @@ package Types is\n    --  Special value used to indicate no column number\n \n    subtype Source_Buffer is Text_Buffer;\n-   --  Type used to store text of a source file . The buffer for the main\n+   --  Type used to store text of a source file. The buffer for the main\n    --  source (the source specified on the command line) has a lower bound\n    --  starting at zero. Subsequent subsidiary sources have lower bounds\n    --  which are one greater than the previous upper bound."}]}