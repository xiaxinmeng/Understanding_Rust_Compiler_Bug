{"sha": "85eb94a0e330830fa5ebb0313933f66fb845a634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVlYjk0YTBlMzMwODMwZmE1ZWJiMDMxMzkzM2Y2NmZiODQ1YTYzNA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-03-11T16:00:04Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-03-11T16:00:04Z"}, "message": "Tests for various kinds of spurious uninit variable warning.\n\nl\nTests for various kinds of spurious uninit variable warning.\nAll are derived from cpplib; see comments in the files.\n\nFrom-SVN: r25710", "tree": {"sha": "d4f55fba94d663fb40475af5fae16b35b45c6dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4f55fba94d663fb40475af5fae16b35b45c6dab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85eb94a0e330830fa5ebb0313933f66fb845a634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85eb94a0e330830fa5ebb0313933f66fb845a634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85eb94a0e330830fa5ebb0313933f66fb845a634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85eb94a0e330830fa5ebb0313933f66fb845a634/comments", "author": null, "committer": null, "parents": [{"sha": "eb7721afcf8b39b6276852e0e179c708f78a8d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7721afcf8b39b6276852e0e179c708f78a8d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb7721afcf8b39b6276852e0e179c708f78a8d28"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "5035a309ebd38b5558998a98ba6cc2f1edc06fb4", "filename": "gcc/testsuite/gcc.dg/uninit-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85eb94a0e330830fa5ebb0313933f66fb845a634/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85eb94a0e330830fa5ebb0313933f66fb845a634/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-2.c?ref=85eb94a0e330830fa5ebb0313933f66fb845a634", "patch": "@@ -0,0 +1,52 @@\n+/* Spurious uninitialized variable warnings, case 2.\n+   Taken from cpphash.c (macroexpand) */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+struct definition\n+{\n+  int nargs;\n+  int rest_args;\n+};\n+\n+struct cpp_reader;\n+\n+enum cpp_token\n+{\n+  CPP_EOF, CPP_POP, CPP_COMMA, CPP_RPAREN\n+};\n+\n+extern enum cpp_token macarg (struct cpp_reader *, int);\n+\n+void\n+macroexpand (struct cpp_reader *pfile, struct definition *defn)\n+{\n+  int nargs = defn->nargs;\n+\n+  if (nargs >= 0)\n+    {\n+      enum cpp_token token;  /* { dg-bogus \"token\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+      int i, rest_args;\n+      i = 0;\n+      rest_args = 0;\n+      do\n+\t{\n+\t  if (rest_args)\n+\t    continue;\n+\t  if (i < nargs || (nargs == 0 && i == 0))\n+\t    {\n+\t      /* if we are working on last arg which absorbs rest of args... */\n+\t      if (i == nargs - 1 && defn->rest_args)\n+\t\trest_args = 1;\n+\t      token = macarg (pfile, rest_args);\n+\t    }\n+\t  else\n+\t    token = macarg (pfile, 0);\n+\t  if (token == CPP_EOF || token == CPP_POP)\n+\t    return;\n+\n+\t  i++;\n+\t}\n+      while (token == CPP_COMMA);\n+    }\n+}"}, {"sha": "34973532c571609d985d465885651cd2d8efc6b9", "filename": "gcc/testsuite/gcc.dg/uninit-4.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85eb94a0e330830fa5ebb0313933f66fb845a634/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85eb94a0e330830fa5ebb0313933f66fb845a634/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-4.c?ref=85eb94a0e330830fa5ebb0313933f66fb845a634", "patch": "@@ -0,0 +1,50 @@\n+/* Spurious uninit variable warnings, case 4.\n+   Simplified version of cppexp.c (cpp_parse_expr).\n+\n+   This one is really fragile, it gets it right if you take out case\n+   1, or if the structure is replaced by an int, or if the structure\n+   has fewer members (!) */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+struct operation {\n+    short op;\n+    char rprio;\n+    char flags;\n+    char unsignedp;\n+    long value;\n+};\n+\n+extern struct operation cpp_lex (void);\n+\n+void\n+cpp_parse_expr (void)\n+{\n+  int rprio; /* { dg-bogus \"rprio\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+  struct operation op;\n+\n+  for (;;)\n+    {\n+      op = cpp_lex ();\n+\n+      switch (op.op)\n+\t{\n+\tcase 0:\n+\t  break;\n+\tcase 1:\n+\t  return;\n+\tcase 2:\n+\t  rprio = 1;\n+\t  break;\n+\tdefault:\n+\t  return;\n+\t}\n+\n+      if (op.op == 0)\n+\treturn;\n+\n+      if (rprio != 1)\n+\tabort();\n+    }\n+}"}]}