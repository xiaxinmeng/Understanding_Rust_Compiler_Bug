{"sha": "f036807af8c8ac6a558066b16b697c2a475770e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAzNjgwN2FmOGM4YWM2YTU1ODA2NmIxNmI2OTdjMmE0NzU3NzBlOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-10-13T17:20:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-10-13T17:20:58Z"}, "message": "decl.c (gnat_to_gnu_entity): Force all local variables with aggregate types in memory if not optimizing.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Force all local\n\tvariables with aggregate types in memory if not optimizing.\n\nFrom-SVN: r203507", "tree": {"sha": "c45a8f551c60e4fa10a2ccc89a5b0e8a78710df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c45a8f551c60e4fa10a2ccc89a5b0e8a78710df6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f036807af8c8ac6a558066b16b697c2a475770e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f036807af8c8ac6a558066b16b697c2a475770e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f036807af8c8ac6a558066b16b697c2a475770e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f036807af8c8ac6a558066b16b697c2a475770e9/comments", "author": null, "committer": null, "parents": [{"sha": "d67f5bbb91c2919672cf9dade30312fc331ffbb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67f5bbb91c2919672cf9dade30312fc331ffbb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d67f5bbb91c2919672cf9dade30312fc331ffbb3"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "99cac5fa0be0326298073f641dba7a629ff1ff6f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f036807af8c8ac6a558066b16b697c2a475770e9", "patch": "@@ -1,3 +1,8 @@\n+2013-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Force all local\n+\tvariables with aggregate types in memory if not optimizing.\n+\n 2013-10-13  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Check_Mode): Do"}, {"sha": "57dfff171a600c3da14a90efcb1b6ed7d248bdec", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=f036807af8c8ac6a558066b16b697c2a475770e9", "patch": "@@ -1497,7 +1497,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t/* If we are defining an Out parameter and optimization isn't enabled,\n \t   create a fake PARM_DECL for debugging purposes and make it point to\n \t   the VAR_DECL.  Suppress debug info for the latter but make sure it\n-\t   will live on the stack so that it can be accessed from within the\n+\t   will live in memory so that it can be accessed from within the\n \t   debugger through the PARM_DECL.  */\n \tif (kind == E_Out_Parameter\n \t    && definition\n@@ -1520,7 +1520,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t/* If this is a renaming pointer, attach the renamed object to it and\n \t   register it if we are at the global level.  Note that an external\n \t   constant is at the global level.  */\n-\telse if (TREE_CODE (gnu_decl) == VAR_DECL && renamed_obj)\n+\tif (TREE_CODE (gnu_decl) == VAR_DECL && renamed_obj)\n \t  {\n \t    SET_DECL_RENAMED_OBJECT (gnu_decl, renamed_obj);\n \t    if ((!definition && kind == E_Constant) || global_bindings_p ())\n@@ -1579,6 +1579,19 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    && Has_Nested_Block_With_Handler (Scope (gnat_entity)))\n \t  TREE_ADDRESSABLE (gnu_decl) = 1;\n \n+\t/* If this is a local variable with non-BLKmode and aggregate type,\n+\t   and optimization isn't enabled, then force it in memory so that\n+\t   a register won't be allocated to it with possible subparts left\n+\t   uninitialized and reaching the register allocator.  */\n+\telse if (TREE_CODE (gnu_decl) == VAR_DECL\n+\t\t && !DECL_EXTERNAL (gnu_decl)\n+\t\t && !TREE_STATIC (gnu_decl)\n+\t\t && DECL_MODE (gnu_decl) != BLKmode\n+\t\t && AGGREGATE_TYPE_P (TREE_TYPE (gnu_decl))\n+\t\t && !TYPE_IS_FAT_POINTER_P (TREE_TYPE (gnu_decl))\n+\t\t && !optimize)\n+\t  TREE_ADDRESSABLE (gnu_decl) = 1;\n+\n \t/* If we are defining an object with variable size or an object with\n \t   fixed size that will be dynamically allocated, and we are using the\n \t   setjmp/longjmp exception mechanism, update the setjmp buffer.  */"}, {"sha": "a364e7446b0768146f27c2913a6923e3acff19ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f036807af8c8ac6a558066b16b697c2a475770e9", "patch": "@@ -1,3 +1,8 @@\n+2013-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/uninit_array.ad[sn]: New test.\n+\t* gnat.dg/uninit_array_pkg.ads: New helper.\n+\n 2013-10-13  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.c-torture/execute/pr58662.c: New test."}, {"sha": "910bdaf431acbdf81e8d79aea5159603092bb126", "filename": "gcc/testsuite/gnat.dg/uninit_array.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Ftestsuite%2Fgnat.dg%2Funinit_array.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Ftestsuite%2Fgnat.dg%2Funinit_array.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Funinit_array.adb?ref=f036807af8c8ac6a558066b16b697c2a475770e9", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do compile }\r\n+-- { dg-options \"-gnatws\" }\r\n+\r\n+with Uninit_Array_Pkg; use Uninit_Array_Pkg;\r\n+\r\n+package body Uninit_Array is\r\n+\r\n+  function F1 return Integer;\r\n+  pragma Inline_Always (F1);\r\n+\r\n+  function F1 return Integer is\r\n+    Var : Arr;\r\n+  begin\r\n+    return F (Var(Var'First(1)));\r\n+  end;\r\n+\r\n+  function F2 return Integer is\r\n+  begin\r\n+    return F1;\r\n+  end;\r\n+\r\n+end Uninit_Array;\r"}, {"sha": "72452213e02388c4d86df0f0a09f1d6c55c0a67e", "filename": "gcc/testsuite/gnat.dg/uninit_array.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Ftestsuite%2Fgnat.dg%2Funinit_array.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Ftestsuite%2Fgnat.dg%2Funinit_array.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Funinit_array.ads?ref=f036807af8c8ac6a558066b16b697c2a475770e9", "patch": "@@ -0,0 +1,5 @@\n+package Uninit_Array is\r\n+\r\n+  function F2 return Integer;\r\n+\r\n+end Uninit_Array;\r"}, {"sha": "566632a270d91e4fff3bc3eecb6a80f5b3608c4b", "filename": "gcc/testsuite/gnat.dg/uninit_array_pkg.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Ftestsuite%2Fgnat.dg%2Funinit_array_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f036807af8c8ac6a558066b16b697c2a475770e9/gcc%2Ftestsuite%2Fgnat.dg%2Funinit_array_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Funinit_array_pkg.ads?ref=f036807af8c8ac6a558066b16b697c2a475770e9", "patch": "@@ -0,0 +1,11 @@\n+package Uninit_Array_Pkg Is\r\n+\r\n+  type Rec is record\r\n+    B1, B2, B3, B4: Boolean;\r\n+  end record;\r\n+\r\n+  type Arr is array (Boolean) of Rec;\r\n+\r\n+  function F (R : Rec) return Integer;\r\n+\r\n+end Uninit_Array_Pkg;\r"}]}