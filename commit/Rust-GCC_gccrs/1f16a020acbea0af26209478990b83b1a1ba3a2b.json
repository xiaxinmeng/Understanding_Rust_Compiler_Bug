{"sha": "1f16a020acbea0af26209478990b83b1a1ba3a2b", "node_id": "C_kwDOANBUbNoAKDFmMTZhMDIwYWNiZWEwYWYyNjIwOTQ3ODk5MGI4M2IxYTFiYTNhMmI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-28T00:17:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-28T00:17:27Z"}, "message": "Daily bump.", "tree": {"sha": "07a98c53dcb03190e005d9140d3eaad919f96057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07a98c53dcb03190e005d9140d3eaad919f96057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f16a020acbea0af26209478990b83b1a1ba3a2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f16a020acbea0af26209478990b83b1a1ba3a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f16a020acbea0af26209478990b83b1a1ba3a2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f16a020acbea0af26209478990b83b1a1ba3a2b/comments", "author": null, "committer": null, "parents": [{"sha": "6bf473089f3c0c6ecf101f87f705618b1707fa82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf473089f3c0c6ecf101f87f705618b1707fa82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf473089f3c0c6ecf101f87f705618b1707fa82"}], "stats": {"total": 471, "additions": 470, "deletions": 1}, "files": [{"sha": "0b88d276b0178b0a57553a930eb72e6c5cf2cd88", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,19 @@\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* inclhack.def (glibc_cxx_floatn_1, glibc_cxx_floatn_2,\n+\tglibc_cxx_floatn_3): Add to files also \"*/bits/floatn.h\"\n+\tand \"*/bits/floatn-common.h\".\n+\t* fixincl.x: Regenerated.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106652\n+\tPR c++/85518\n+\t* inclhack.def (glibc_cxx_floatn_1, glibc_cxx_floatn_2,\n+\tglibc_cxx_floatn_3): New fixes.\n+\t* tests/base/bits/floatn.h: New file.\n+\t* fixincl.x: Regenerated.\n+\n 2022-08-31  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "ce384108d2f52f5fb18660c96a3c54fd6b207349", "filename": "gcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,65 @@\n+2022-09-27  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* ipa-cp.cc (good_cloning_opportunity_p): Fix profile count comparison.\n+\n+2022-09-27  Kim Kuparinen  <kim.kuparinen@rightware.com>\n+\n+\t* doc/invoke.texi: Update ABI version info.\n+\n+2022-09-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-op.cc (cfn_popcount): Calculate the popcount of a\n+\tsingleton.\n+\n+2022-09-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::set_nonzero_bits): Set range when known.\n+\n+2022-09-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.h (irange::set): New version taking wide_int_ref.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107029\n+\t* tree-ssa-reassoc.cc (optimize_range_tests_cmp_bitwise): Treat\n+\tOFFSET_TYPE like POINTER_TYPE, except that OFFSET_TYPE may be\n+\tsigned and so can trigger even the (b % 4) == 3 case.\n+\n+2022-09-27  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* cfgrtl.cc (fixup_reorder_chain): Verify that simple_return\n+\tand return are available before trying to use them.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106652\n+\tPR c++/85518\n+\t* tree-core.h (enum tree_index): Add TI_FLOAT128T_TYPE\n+\tenumerator.\n+\t* tree.h (float128t_type_node): Define.\n+\t* tree.cc (build_common_tree_nodes): Initialize float128t_type_node.\n+\t* builtins.def (DEF_FLOATN_BUILTIN): Adjust comment now that\n+\t_Float<N> is supported in C++ too.\n+\t* config/i386/i386.cc (ix86_mangle_type): Only mangle as \"g\"\n+\tfloat128t_type_node.\n+\t* config/i386/i386-builtins.cc (ix86_init_builtin_types): Use\n+\tfloat128t_type_node for __float128 instead of float128_type_node\n+\tand create it if NULL.\n+\t* config/i386/avx512fp16intrin.h (_mm_setzero_ph, _mm256_setzero_ph,\n+\t_mm512_setzero_ph, _mm_set_sh, _mm_load_sh): Use 0.0f16 instead of\n+\t0.0f.\n+\t* config/ia64/ia64.cc (ia64_init_builtins): Use\n+\tfloat128t_type_node for __float128 instead of float128_type_node\n+\tand create it if NULL.\n+\t* config/rs6000/rs6000-c.cc (is_float128_p): Also return true\n+\tfor float128t_type_node if non-NULL.\n+\t* config/rs6000/rs6000.cc (rs6000_mangle_type): Don't mangle\n+\tfloat128_type_node as \"u9__ieee128\".\n+\t* config/rs6000/rs6000-builtin.cc (rs6000_init_builtins): Use\n+\tfloat128t_type_node for __float128 instead of float128_type_node\n+\tand create it if NULL.\n+\n 2022-09-26  Martin Liska  <mliska@suse.cz>\n \n \t* doc/invoke.texi: Add missing dash for"}, {"sha": "8830fa8da31e78980d8fb5517b049e193c027f0a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1 +1 @@\n-20220927\n+20220928"}, {"sha": "a9ed2f0683a65e9fff98b1c43f04c90a533f6f98", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,55 @@\n+2022-09-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101165\n+\tPR c++/106882\n+\t* c-cppbuiltin.cc (c_cpp_builtins): Define __cpp_implicit_move.\n+\n+2022-09-27  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-format.cc (c_keywords): Drop nothrow.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106651\n+\t* c-cppbuiltin.cc (c_cpp_builtins): Predefine\n+\t__cpp_static_call_operator=202207L for C++23.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_ASSUME,\n+\tPRAGMA_OMP_ASSUMES and PRAGMA_OMP_BEGIN.  Rename\n+\tPRAGMA_OMP_END_DECLARE_TARGET to PRAGMA_OMP_END.\n+\t* c-pragma.cc (omp_pragmas): Add assumes and begin.\n+\tFor end rename PRAGMA_OMP_END_DECLARE_TARGET to PRAGMA_OMP_END.\n+\t(omp_pragmas_simd): Add assume.\n+\t* c-common.h (c_omp_directives): Declare.\n+\t* c-omp.cc (omp_directives): Rename to ...\n+\t(c_omp_directives): ... this.  No longer static.  Uncomment\n+\tassume, assumes, begin assumes and end assumes entries.\n+\tIn end declare target entry rename PRAGMA_OMP_END_DECLARE_TARGET\n+\tto PRAGMA_OMP_END.\n+\t(c_omp_categorize_directive): Adjust for omp_directives to\n+\tc_omp_directives renaming.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106652\n+\tPR c++/85518\n+\t* c-common.cc (c_common_reswords): Change _Float{16,32,64,128} and\n+\t_Float{32,64,128}x flags from D_CONLY to 0.\n+\t(shorten_binary_op): Punt if common_type returns error_mark_node.\n+\t(shorten_compare): Likewise.\n+\t(c_common_nodes_and_builtins): For C++ record _Float{16,32,64,128}\n+\tand _Float{32,64,128}x builtin types if available.  For C++\n+\tclear float128t_type_node.\n+\t* c-cppbuiltin.cc (c_cpp_builtins): Predefine\n+\t__STDCPP_FLOAT{16,32,64,128}_T__ for C++23 if supported.\n+\t* c-lex.cc (interpret_float): For q/Q suffixes prefer\n+\tfloat128t_type_node over float128_type_node.  Allow\n+\t{f,F}{16,32,64,128} suffixes for C++ if supported with pedwarn\n+\tfor C++20 and older.  Allow {f,F}{32,64,128}x suffixes for C++\n+\twith pedwarn.  Don't call excess_precision_type for C++.\n+\n 2022-09-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/106656"}, {"sha": "7b29d78485c3e120d7e0b3309c68e2767de488ed", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,21 @@\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-lang.h (current_omp_begin_assumes): Declare.\n+\t* c-parser.cc: Include bitmap.h.\n+\t(c_parser_omp_end_declare_target): Rename to ...\n+\t(c_parser_omp_end): ... this.  Handle also end assumes.\n+\t(c_parser_omp_begin, c_parser_omp_assumption_clauses,\n+\tc_parser_omp_assumes, c_parser_omp_assume): New functions.\n+\t(c_parser_translation_unit): Also diagnose #pragma omp begin assumes\n+\twithout corresponding #pragma omp end assumes.\n+\t(c_parser_pragma): Use %s in may only be used at file scope\n+\tdiagnostics to decrease number of translatable messages.  Handle\n+\tPRAGMA_OMP_BEGIN and PRAGMA_OMP_ASSUMES.  Handle PRAGMA_OMP_END\n+\trather than PRAGMA_OMP_END_DECLARE_TARGET and call c_parser_omp_end\n+\tfor it rather than c_parser_omp_end_declare_target.\n+\t(c_parser_omp_construct): Handle PRAGMA_OMP_ASSUME.\n+\t* c-decl.cc (current_omp_begin_assumes): Define.\n+\n 2022-09-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/106981"}, {"sha": "8d4c6d1b8ee346235c66ade50bd85ceca8012f24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,117 @@\n+2022-09-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101165\n+\tPR c++/106882\n+\t* call.cc (reference_binding): Check clk_implicit_rval in C++20 only.\n+\t* cp-tree.h (unparenthesized_id_or_class_member_access_p): Declare.\n+\t* pt.cc (unparenthesized_id_or_class_member_access_p): New function,\n+\tbroken out of...\n+\t(do_auto_deduction): ...here.  Use it.  In C++23, maybe call\n+\ttreat_lvalue_as_rvalue_p.\n+\t* tree.cc (xvalue_p): Check & clk_rvalueref, not == clk_rvalueref.\n+\t* typeck.cc (check_return_expr): Allow implicit move for functions\n+\treturning a reference as well, or when the return value type is not\n+\ta scalar type.\n+\n+2022-09-27  Marek Polacek  <polacek@redhat.com>\n+\n+\t* constraint.cc (diagnose_trait_expr): Say \"nothrow\" without quotes\n+\trather than in quotes.\n+\n+2022-09-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/107049\n+\t* method.cc (is_convertible_helper): Use access check sentinel.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106651\n+\t* cp-tree.h (LAMBDA_EXPR_STATIC_P): Implement C++23\n+\tP1169R4 - static operator().  Define.\n+\t* parser.cc (CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR): Document\n+\tthat it also allows static.\n+\t(cp_parser_lambda_declarator_opt): Handle static lambda specifier.\n+\t(cp_parser_decl_specifier_seq): Allow RID_STATIC for\n+\tCP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR.\n+\t* decl.cc (grok_op_properties): If operator() isn't a method,\n+\tuse a different error wording, if it is static member function,\n+\tallow it (for C++20 and older with a pedwarn unless it is\n+\ta lambda function or template instantiation).\n+\t* call.cc (joust): Don't ICE if one candidate is static member\n+\tfunction and the other is an indirect call.  If the parameter\n+\tconversion on the other candidate is user defined conversion,\n+\tellipsis or bad conversion, make static member function candidate\n+\ta winner for that parameter.\n+\t* lambda.cc (maybe_add_lambda_conv_op): Handle static lambdas.\n+\t* error.cc (dump_lambda_function): Print static for static lambdas.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (struct omp_begin_assumes_data): New type.\n+\t(struct saved_scope): Add omp_begin_assumes member.\n+\t* parser.cc: Include bitmap.h.\n+\t(cp_parser_omp_assumption_clauses, cp_parser_omp_assume,\n+\tcp_parser_omp_assumes, cp_parser_omp_begin): New functions.\n+\t(cp_parser_omp_end_declare_target): Rename to ...\n+\t(cp_parser_omp_end): ... this.  Handle also end assumes.\n+\t(cp_parser_omp_construct): Handle PRAGMA_OMP_ASSUME.\n+\t(cp_parser_pragma): Handle PRAGMA_OMP_ASSUME, PRAGMA_OMP_ASSUMES\n+\tand PRAGMA_OMP_BEGIN.  Handle PRAGMA_OMP_END rather than\n+\tPRAGMA_OMP_END_DECLARE_TARGET and call cp_parser_omp_end\n+\tfor it rather than cp_parser_omp_end_declare_target.\n+\t* pt.cc (apply_late_template_attributes): Also temporarily clear\n+\tomp_begin_assumes.\n+\t* semantics.cc (finish_translation_unit): Also diagnose\n+\t#pragma omp begin assumes without corresponding\n+\t#pragma omp end assumes.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.cc (cp_parser_lambda_declarator_opt): Don't diagnose\n+\tconflicting specifiers here.\n+\t(cp_storage_class_name): New variable.\n+\t(cp_parser_decl_specifier_seq): When setting conflicting_specifiers_p\n+\tfor the first time, diagnose which exact specifiers conflict.\n+\t(cp_parser_set_storage_class): Likewise.  Move storage_class\n+\tcomputation earlier.\n+\t* decl.cc (grokdeclarator): Don't diagnose conflicting specifiers\n+\there, just return error_mark_node.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106652\n+\tPR c++/85518\n+\t* cp-tree.h (cp_compare_floating_point_conversion_ranks): Implement\n+\tP1467R9 - Extended floating-point types and standard names except\n+\tfor std::bfloat16_t for now.  Declare.\n+\t(extended_float_type_p): New inline function.\n+\t* mangle.cc (write_builtin_type): Mangle float{16,32,64,128}_type_node\n+\tas DF{16,32,64,128}_.  Mangle float{32,64,128}x_type_node as\n+\tDF{32,64,128}x.  Remove FIXED_POINT_TYPE mangling that conflicts\n+\twith that.\n+\t* typeck2.cc (check_narrowing): If one of ftype or type is extended\n+\tfloating-point type, compare floating-point conversion ranks.\n+\t* parser.cc (cp_keyword_starts_decl_specifier_p): Handle\n+\tCASE_RID_FLOATN_NX.\n+\t(cp_parser_simple_type_specifier): Likewise and diagnose missing\n+\t_Float<N> or _Float<N>x support if not supported by target.\n+\t* typeck.cc (cp_compare_floating_point_conversion_ranks): New function.\n+\t(cp_common_type): If both types are REAL_TYPE and one or both are\n+\textended floating-point types, select common type based on comparison\n+\tof floating-point conversion ranks and subranks.\n+\t(cp_build_binary_op): Diagnose operation with floating point arguments\n+\twith unordered conversion ranks.\n+\t* call.cc (standard_conversion): For floating-point conversion, if\n+\teither from or to are extended floating-point types, set conv->bad_p\n+\tfor implicit conversion from larger to smaller conversion rank or\n+\twith unordered conversion ranks.\n+\t(convert_like_internal): Emit a pedwarn on such conversions.\n+\t(build_conditional_expr): Diagnose operation with floating point\n+\targuments with unordered conversion ranks.\n+\t(convert_arg_to_ellipsis): Don't promote extended floating-point types\n+\tnarrower than double to double.\n+\t(compare_ics): Implement P1467R9 [over.ics.rank]/4 changes.\n+\n 2022-09-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/106656"}, {"sha": "434c1c67c4184555245967aeb93eaad1607023a7", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,15 @@\n+2022-09-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd d579c467c1.\n+\t* decl.cc (layout_struct_initializer): Update for new front-end\n+\tinterface.\n+\t* expr.cc (ExprVisitor::visit (AssignExp *)): Remove lowering of array\n+\tassignments.\n+\t(ExprVisitor::visit (NewExp *)): Add new lowering of new'ing\n+\tassociative arrays to an _aaNew() library call.\n+\t* runtime.def (ARRAYSETASSIGN): Remove.\n+\t(AANEW): Define.\n+\n 2022-09-15  Richard Biener  <rguenther@suse.de>\n \n \t* d-builtins.cc (d_build_c_type_nodes): Do not initialize"}, {"sha": "dcbfd54114e8449ae0389c95137c0e394b6c9e5f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,10 @@\n+2022-09-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107054\n+\t* simplify.cc (gfc_simplify_unpack): Replace assert by condition\n+\tthat terminates simplification when there are not enough elements\n+\tin the constructor of argument VECTOR.\n+\n 2022-09-25  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/41453"}, {"sha": "4aaf795f54efa63ddfafb92634d4dd034e2520b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,118 @@\n+2022-09-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101165\n+\tPR c++/106882\n+\t* g++.dg/conversion/pr41426.C: Add dg-error for C++23.\n+\t* g++.dg/cpp0x/elision_weak.C: Likewise.\n+\t* g++.dg/cpp0x/move-return3.C: Only link in c++20_down.\n+\t* g++.dg/cpp1y/decltype-auto2.C: Add dg-error for C++23.\n+\t* g++.dg/cpp1y/lambda-generic-89419.C: Likewise.\n+\t* g++.dg/cpp23/feat-cxx2b.C: Test __cpp_implicit_move.\n+\t* g++.dg/gomp/pr56217.C: Only compile in c++20_down.\n+\t* g++.dg/warn/Wno-return-local-addr.C: Add dg-error for C++23.\n+\t* g++.dg/warn/Wreturn-local-addr.C: Adjust dg-error.\n+\t* g++.old-deja/g++.brendan/crash55.C: Add dg-error for C++23.\n+\t* g++.old-deja/g++.jason/temporary2.C: Likewise.\n+\t* g++.old-deja/g++.mike/p2846b.C: Adjust.\n+\t* g++.dg/cpp1y/decltype-auto6.C: New test.\n+\t* g++.dg/cpp23/decltype1.C: New test.\n+\t* g++.dg/cpp23/decltype2.C: New test.\n+\t* g++.dg/cpp23/elision1.C: New test.\n+\t* g++.dg/cpp23/elision2.C: New test.\n+\t* g++.dg/cpp23/elision3.C: New test.\n+\t* g++.dg/cpp23/elision4.C: New test.\n+\t* g++.dg/cpp23/elision5.C: New test.\n+\t* g++.dg/cpp23/elision6.C: New test.\n+\t* g++.dg/cpp23/elision7.C: New test.\n+\n+2022-09-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107054\n+\t* gfortran.dg/pr107054.f90: New test.\n+\n+2022-09-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/popcount6b.c: New test.\n+\n+2022-09-27  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-traits3.C: Adjust expected diagnostics.\n+\n+2022-09-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/107049\n+\t* g++.dg/ext/is_convertible4.C: New test.\n+\t* g++.dg/ext/is_nothrow_convertible4.C: New test.\n+\n+2022-09-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/popcount6.c: New test.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106651\n+\t* g++.dg/template/error30.C: Adjust expected diagnostics.\n+\t* g++.dg/cpp1z/constexpr-lambda13.C: Likewise.\n+\t* g++.dg/cpp23/feat-cxx2b.C: Test __cpp_static_call_operator.\n+\t* g++.dg/cpp23/static-operator-call1.C: New test.\n+\t* g++.dg/cpp23/static-operator-call2.C: New test.\n+\t* g++.old-deja/g++.jason/operator.C: Adjust expected diagnostics.\n+\t* g++.dg/cpp23/static-operator-call3.C: New file.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107029\n+\t* g++.dg/torture/pr107029.C: New test.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/assume-1.c: New test.\n+\t* c-c++-common/gomp/assume-2.c: New test.\n+\t* c-c++-common/gomp/assume-3.c: New test.\n+\t* c-c++-common/gomp/assumes-1.c: New test.\n+\t* c-c++-common/gomp/assumes-2.c: New test.\n+\t* c-c++-common/gomp/assumes-3.c: New test.\n+\t* c-c++-common/gomp/assumes-4.c: New test.\n+\t* c-c++-common/gomp/begin-assumes-1.c: New test.\n+\t* c-c++-common/gomp/begin-assumes-2.c: New test.\n+\t* c-c++-common/gomp/begin-assumes-3.c: New test.\n+\t* c-c++-common/gomp/begin-assumes-4.c: New test.\n+\t* c-c++-common/gomp/declare-target-6.c: New test.\n+\t* g++.dg/gomp/attrs-1.C (bar): Add n1 and n2 arguments, add\n+\ttests for assume directive.\n+\t* g++.dg/gomp/attrs-2.C (bar): Likewise.\n+\t* g++.dg/gomp/attrs-9.C: Add n1 and n2 variables, add tests for\n+\tbegin assumes directive.\n+\t* g++.dg/gomp/attrs-15.C: New test.\n+\t* g++.dg/gomp/attrs-16.C: New test.\n+\t* g++.dg/gomp/attrs-17.C: New test.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/diagnostic/conflicting-specifiers-1.C: Adjust expected\n+\tdiagnostics.\n+\t* g++.dg/parse/typedef8.C: Likewise.\n+\t* g++.dg/parse/crash39.C: Likewise.\n+\t* g++.dg/other/mult-stor1.C: Likewise.\n+\t* g++.dg/cpp2a/constinit3.C: Likewise.\n+\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106652\n+\tPR c++/85518\n+\t* g++.dg/cpp23/ext-floating1.C: New test.\n+\t* g++.dg/cpp23/ext-floating2.C: New test.\n+\t* g++.dg/cpp23/ext-floating3.C: New test.\n+\t* g++.dg/cpp23/ext-floating4.C: New test.\n+\t* g++.dg/cpp23/ext-floating5.C: New test.\n+\t* g++.dg/cpp23/ext-floating6.C: New test.\n+\t* g++.dg/cpp23/ext-floating7.C: New test.\n+\t* g++.dg/cpp23/ext-floating8.C: New test.\n+\t* g++.dg/cpp23/ext-floating9.C: New test.\n+\t* g++.dg/cpp23/ext-floating10.C: New test.\n+\t* g++.dg/cpp23/ext-floating.h: New file.\n+\t* g++.target/i386/float16-1.C: Adjust expected diagnostics.\n+\n 2022-09-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/106656"}, {"sha": "e9fb5b3b2173a05536376b7a1f68d31e1602271d", "filename": "include/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,16 @@\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106652\n+\tPR c++/85518\n+\t* demangle.h (enum demangle_component_type): Add\n+\tDEMANGLE_COMPONENT_EXTENDED_BUILTIN_TYPE.\n+\t(struct demangle_component): Add u.s_extended_builtin member.\n+\n+2022-09-27  Meghan Denny  <hello@nektro.net>\n+\n+\t* dwarf2.h: Update with additional languages from dwarf\n+\tstandard.\n+\n 2022-07-12  Martin Liska  <mliska@suse.cz>\n \n \t* plugin-api.h (enum linker_api_version): New enum."}, {"sha": "c74efc03505551d38411a5517c013489ddccc96e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,10 @@\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106652\n+\tPR c++/85518\n+\t* expr.cc (interpret_float_suffix): Allow {f,F}{16,32,64,128} and\n+\t{f,F}{32,64,128}x suffixes for C++.\n+\n 2022-09-08  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* line-map.cc (location_adhoc_data_update): Remove reliance on"}, {"sha": "c22f9d90abcac064e1dba22c623bca66bc4e688b", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,25 @@\n+2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106652\n+\tPR c++/85518\n+\t* cp-demangle.c (d_dump): Handle\n+\tDEMANGLE_COMPONENT_EXTENDED_BUILTIN_TYPE.  Don't handle\n+\tDEMANGLE_COMPONENT_FIXED_TYPE.\n+\t(d_make_extended_builtin_type): New function.\n+\t(cplus_demangle_builtin_types): Add _Float entry.\n+\t(cplus_demangle_type): For DF demangle it as _Float<N> or\n+\t_Float<N>x rather than fixed point which conflicts with it.\n+\t(d_count_templates_scopes): Handle\n+\tDEMANGLE_COMPONENT_EXTENDED_BUILTIN_TYPE.  Just break; for\n+\tDEMANGLE_COMPONENT_FIXED_TYPE.\n+\t(d_find_pack): Handle DEMANGLE_COMPONENT_EXTENDED_BUILTIN_TYPE.\n+\tDon't handle DEMANGLE_COMPONENT_FIXED_TYPE.\n+\t(d_print_comp_inner): Likewise.\n+\t* cp-demangle.h (D_BUILTIN_TYPE_COUNT): Bump.\n+\t* testsuite/demangle-expected: Replace _Z3xxxDFyuVb test\n+\twith _Z3xxxDF16_DF32_DF64_DF128_CDF16_Vb.  Add\n+\t_Z3xxxDF32xDF64xDF128xCDF32xVb test.\n+\n 2022-09-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* README: Replace gcc-bugs email address with Bugzilla URL."}, {"sha": "015782ad1fc964d049fde83535fdb76ee454f73d", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,14 @@\n+2022-09-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/MERGE: Merge upstream druntime d579c467c1.\n+\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES): Remove\n+\trt/arrayassign.d.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* src/MERGE: Merge upstream phobos 88aa69b14.\n+\t* src/Makefile.am (PHOBOS_DSOURCES): Remove std/digest/digest.d,\n+\tstd/xml.d.\n+\t* src/Makefile.in: Regenerate.\n+\n 2022-08-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/MERGE: Merge upstream druntime 817610b16d."}, {"sha": "7ed1052536d44833a28337cf6509aeffbd651686", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f16a020acbea0af26209478990b83b1a1ba3a2b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f16a020acbea0af26209478990b83b1a1ba3a2b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f16a020acbea0af26209478990b83b1a1ba3a2b", "patch": "@@ -1,3 +1,23 @@\n+2022-09-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/107049\n+\t* testsuite/20_util/is_convertible/requirements/access.cc: New\n+\ttest.\n+\n+2022-09-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/106651\n+\t* include/bits/std_function.h (__function_guide_t): New alias\n+\ttemplate.\n+\t[__cpp_static_call_operator] (__function_guide_static_helper):\n+\tNew class template.\n+\t(function): Use __function_guide_t in deduction guide.\n+\t* include/std/future (packaged_task): Use __function_guide_t in\n+\tdeduction guide.\n+\t* testsuite/20_util/function/cons/deduction_c++23.cc: New test.\n+\t* testsuite/30_threads/packaged_task/cons/deduction_c++23.cc:\n+\tNew test.\n+\n 2022-09-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/ptr_traits.h (__ptr_traits_elem) [__cpp_concepts]:"}]}