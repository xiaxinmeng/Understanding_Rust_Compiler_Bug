{"sha": "fef511b5a64d7b3730a782173135c42bfda0629b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVmNTExYjVhNjRkN2IzNzMwYTc4MjE3MzEzNWM0MmJmZGEwNjI5Yg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2007-08-31T03:25:02Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2007-08-31T03:25:02Z"}, "message": "re PR middle-end/33211 (FAIL: gcc.target/spu/fixed-range.c scan-assembler lqd.*21)\n\n2007-08-30  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR middle-end/33211\n\n\tgcc/\n\t* regclass.c (initial_fixed_regs): Revert previous change and make\n\tit const again.\n\t(initial_call_used_regs): Likewise.\n\t(initial_call_really_used_regs): Delete, reverting previous addition.\n\t(initial_reg_names): Likewise.\n\t(init_reg_sets): Revert previous change.\n\t(saved_fixed_regs): New.\n\t(saved_call_used_regs): New.\n\t(saved_call_really_used_regs): New.\n\t(saved_reg_names): New.\n\t(save_register_info): New.\n\t(restore_register_info): New.\n\t(init_reg_sets_1): Replace reset of register info with call to\n\trestore_register_info.\n\t* rtl.h (save_register_info): Declare.\n\t* toplev.c (backend_init): Call save_register_info.\n\nFrom-SVN: r127951", "tree": {"sha": "5b61bc7329222fa4cbaaab88e715220d730418e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b61bc7329222fa4cbaaab88e715220d730418e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fef511b5a64d7b3730a782173135c42bfda0629b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef511b5a64d7b3730a782173135c42bfda0629b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef511b5a64d7b3730a782173135c42bfda0629b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef511b5a64d7b3730a782173135c42bfda0629b/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "828fa4991b46098e284197199362dac703d2d620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828fa4991b46098e284197199362dac703d2d620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828fa4991b46098e284197199362dac703d2d620"}], "stats": {"total": 120, "additions": 87, "deletions": 33}, "files": [{"sha": "fa6bec8dcd8076c746717fab489d455f664e4c10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef511b5a64d7b3730a782173135c42bfda0629b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef511b5a64d7b3730a782173135c42bfda0629b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fef511b5a64d7b3730a782173135c42bfda0629b", "patch": "@@ -1,3 +1,24 @@\n+2007-08-30  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR middle-end/33211\n+\n+\t* regclass.c (initial_fixed_regs): Revert previous change and make\n+\tit const again.\n+\t(initial_call_used_regs): Likewise.\n+\t(initial_call_really_used_regs): Delete, reverting previous addition.\n+\t(initial_reg_names): Likewise.\n+\t(init_reg_sets): Revert previous change.\n+\t(saved_fixed_regs): New.\n+\t(saved_call_used_regs): New.\n+\t(saved_call_really_used_regs): New.\n+\t(saved_reg_names): New.\n+\t(save_register_info): New.\n+\t(restore_register_info): New.\n+\t(init_reg_sets_1): Replace reset of register info with call to\n+\trestore_register_info.\n+\t* rtl.h (save_register_info): Declare.\n+\t* toplev.c (backend_init): Call save_register_info.\n+\n 2007-08-30  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \t* tree-ssa-propagate.c (set_rhs): Remove the copied annotation"}, {"sha": "e54196c7368c05373f7449b6e9179427d97fc32e", "filename": "gcc/regclass.c", "status": "modified", "additions": 64, "deletions": 33, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef511b5a64d7b3730a782173135c42bfda0629b/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef511b5a64d7b3730a782173135c42bfda0629b/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=fef511b5a64d7b3730a782173135c42bfda0629b", "patch": "@@ -81,7 +81,7 @@ HARD_REG_SET fixed_reg_set;\n \n /* Data for initializing the above.  */\n \n-static char initial_fixed_regs[] = FIXED_REGISTERS;\n+static const char initial_fixed_regs[] = FIXED_REGISTERS;\n \n /* Indexed by hard register number, contains 1 for registers\n    that are fixed use or are clobbered by function calls.\n@@ -100,16 +100,15 @@ HARD_REG_SET losing_caller_save_reg_set;\n \n /* Data for initializing the above.  */\n \n-static char initial_call_used_regs[] = CALL_USED_REGISTERS;\n+static const char initial_call_used_regs[] = CALL_USED_REGISTERS;\n \n /* This is much like call_used_regs, except it doesn't have to\n    be a superset of FIXED_REGISTERS. This vector indicates\n    what is really call clobbered, and is used when defining\n    regs_invalidated_by_call.  */\n \n #ifdef CALL_REALLY_USED_REGISTERS\n-static char initial_call_really_used_regs[] = CALL_REALLY_USED_REGISTERS;\n-char call_really_used_regs[FIRST_PSEUDO_REGISTER];\n+char call_really_used_regs[] = CALL_REALLY_USED_REGISTERS;\n #endif\n \n #ifdef CALL_REALLY_USED_REGISTERS\n@@ -193,11 +192,7 @@ enum reg_class reg_class_superunion[N_REG_CLASSES][N_REG_CLASSES];\n \n /* Array containing all of the register names.  */\n \n-const char * reg_names[FIRST_PSEUDO_REGISTER];\n-\n-/* Data for initializing the above.  */\n-\n-const char * initial_reg_names[] = REGISTER_NAMES;\n+const char * reg_names[] = REGISTER_NAMES;\n \n /* Array containing all of the register class names.  */\n \n@@ -306,12 +301,14 @@ init_reg_sets (void)\n \t  SET_HARD_REG_BIT (reg_class_contents[i], j);\n     }\n \n-  memset (global_regs, 0, sizeof global_regs);\n+  /* Sanity check: make sure the target macros FIXED_REGISTERS and\n+     CALL_USED_REGISTERS had the right number of initializers.  */\n+  gcc_assert (sizeof fixed_regs == sizeof initial_fixed_regs);\n+  gcc_assert (sizeof call_used_regs == sizeof initial_call_used_regs);\n \n-  /* Processing of command-line options like -ffixed needs to know the\n-     initial set of register names, so initialize that now.  */\n-  gcc_assert (sizeof reg_names == sizeof initial_reg_names);\n-  memcpy (reg_names, initial_reg_names, sizeof reg_names);\n+  memcpy (fixed_regs, initial_fixed_regs, sizeof fixed_regs);\n+  memcpy (call_used_regs, initial_call_used_regs, sizeof call_used_regs);\n+  memset (global_regs, 0, sizeof global_regs);\n }\n \n /* Initialize may_move_cost and friends for mode M.  */\n@@ -403,34 +400,68 @@ init_move_cost (enum machine_mode m)\n \t}\n }\n \n-/* After switches have been processed, which perhaps alter\n-   `fixed_regs' and `call_used_regs', convert them to HARD_REG_SETs.  */\n+/* We need to save copies of some of the register information which\n+   can be munged by command-line switches so we can restore it during\n+   subsequent back-end reinitialization.  */\n \n-static void\n-init_reg_sets_1 (void)\n-{\n-  unsigned int i, j;\n-  unsigned int /* enum machine_mode */ m;\n+static char saved_fixed_regs[FIRST_PSEUDO_REGISTER];\n+static char saved_call_used_regs[FIRST_PSEUDO_REGISTER];\n+#ifdef CALL_REALLY_USED_REGISTERS\n+static char saved_call_really_used_regs[FIRST_PSEUDO_REGISTER];\n+#endif\n+static const char *saved_reg_names[FIRST_PSEUDO_REGISTER];\n+\n+/* Save the register information.  */\n \n+void\n+save_register_info (void)\n+{\n   /* Sanity check:  make sure the target macros FIXED_REGISTERS and\n      CALL_USED_REGISTERS had the right number of initializers.  */\n-  gcc_assert (sizeof fixed_regs == sizeof initial_fixed_regs);\n-  gcc_assert (sizeof call_used_regs == sizeof initial_call_used_regs);\n-\n-  memcpy (fixed_regs, initial_fixed_regs, sizeof fixed_regs);\n-  memcpy (call_used_regs, initial_call_used_regs, sizeof call_used_regs);\n+  gcc_assert (sizeof fixed_regs == sizeof saved_fixed_regs);\n+  gcc_assert (sizeof call_used_regs == sizeof saved_call_used_regs);\n+  memcpy (saved_fixed_regs, fixed_regs, sizeof fixed_regs);\n+  memcpy (saved_call_used_regs, call_used_regs, sizeof call_used_regs);\n \n   /* Likewise for call_really_used_regs.  */\n #ifdef CALL_REALLY_USED_REGISTERS\n   gcc_assert (sizeof call_really_used_regs\n-\t      == sizeof initial_call_really_used_regs);\n-  memcpy (call_really_used_regs, initial_call_really_used_regs,\n+\t      == sizeof saved_call_really_used_regs);\n+  memcpy (saved_call_really_used_regs, call_really_used_regs,\n \t  sizeof call_really_used_regs);\n #endif\n \n   /* And similarly for reg_names.  */\n-  gcc_assert (sizeof reg_names == sizeof initial_reg_names);\n-  memcpy (reg_names, initial_reg_names, sizeof reg_names);\n+  gcc_assert (sizeof reg_names == sizeof saved_reg_names);\n+  memcpy (saved_reg_names, reg_names, sizeof reg_names);\n+}\n+\n+/* Restore the register information.  */\n+\n+static void\n+restore_register_info (void)\n+{\n+  memcpy (fixed_regs, saved_fixed_regs, sizeof fixed_regs);\n+  memcpy (call_used_regs, saved_call_used_regs, sizeof call_used_regs);\n+\n+#ifdef CALL_REALLY_USED_REGISTERS\n+  memcpy (call_really_used_regs, saved_call_really_used_regs,\n+\t  sizeof call_really_used_regs);\n+#endif\n+\n+  memcpy (reg_names, saved_reg_names, sizeof reg_names);\n+}\n+\n+/* After switches have been processed, which perhaps alter\n+   `fixed_regs' and `call_used_regs', convert them to HARD_REG_SETs.  */\n+\n+static void\n+init_reg_sets_1 (void)\n+{\n+  unsigned int i, j;\n+  unsigned int /* enum machine_mode */ m;\n+\n+  restore_register_info ();\n \n #ifdef REG_ALLOC_ORDER\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n@@ -846,11 +877,11 @@ fix_register (const char *name, int fixed, int call_used)\n \t}\n       else\n \t{\n-\t  initial_fixed_regs[i] = fixed;\n-\t  initial_call_used_regs[i] = call_used;\n+\t  fixed_regs[i] = fixed;\n+\t  call_used_regs[i] = call_used;\n #ifdef CALL_REALLY_USED_REGISTERS\n \t  if (fixed == 0)\n-\t    initial_call_really_used_regs[i] = call_used;\n+\t    call_really_used_regs[i] = call_used;\n #endif\n \t}\n     }"}, {"sha": "5484df11a3c2877c7bd6a4f4ab43aad6bc482e56", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef511b5a64d7b3730a782173135c42bfda0629b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef511b5a64d7b3730a782173135c42bfda0629b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=fef511b5a64d7b3730a782173135c42bfda0629b", "patch": "@@ -2190,6 +2190,7 @@ extern void globalize_reg (int);\n extern void init_reg_modes_target (void);\n extern void init_regs (void);\n extern void init_fake_stack_mems (void);\n+extern void save_register_info (void);\n extern void init_reg_sets (void);\n extern void regclass (rtx, int);\n extern void reg_scan (rtx, unsigned int);"}, {"sha": "31d8c5f1ab632cd251a014ccf0fffb37dbf723fc", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef511b5a64d7b3730a782173135c42bfda0629b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef511b5a64d7b3730a782173135c42bfda0629b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fef511b5a64d7b3730a782173135c42bfda0629b", "patch": "@@ -2064,6 +2064,7 @@ backend_init (void)\n   init_rtlanal ();\n   init_inline_once ();\n   init_varasm_once ();\n+  save_register_info ();\n \n   /* Initialize the target-specific back end pieces.  */\n   backend_init_target ();"}]}