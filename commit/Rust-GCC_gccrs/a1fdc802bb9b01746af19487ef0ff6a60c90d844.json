{"sha": "a1fdc802bb9b01746af19487ef0ff6a60c90d844", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFmZGM4MDJiYjliMDE3NDZhZjE5NDg3ZWYwZmY2YTYwYzkwZDg0NA==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-05-05T06:51:23Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-05-05T06:51:23Z"}, "message": "m68hc11.md (\"*logicalsi3_silshr16\"): Use '?' instead of '!' for the 'D' alternative ('!' is too strong).\n\n\t* config/m68hc11/m68hc11.md (\"*logicalsi3_silshr16\"): Use '?' instead\n\tof '!' for the 'D' alternative ('!' is too strong).\n\t(\"*logicalsi3_silshl16\"): Likewise.\n\t(\"movstricthi\"): Accept 'A' when 'd' constraint, remove spurious '+'.\n\t(\"movstrictsi\"): Remove spurious '+'.\n\t(\"movstrictqi\"): Don't accept 'A' and remove spurious '+'.\n\t(\"tstqi_1\", \"*lshrqi3_const1\"): Put 'm' constraint before 'd'.\n\t(\"subqi3\"): Disparage with '!' the 'x' and 'y' registers to avoid\n\ta reload to them.\n\nFrom-SVN: r41859", "tree": {"sha": "ee5f5b87cb01c8389f1de0d17e053baa8d6609d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee5f5b87cb01c8389f1de0d17e053baa8d6609d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1fdc802bb9b01746af19487ef0ff6a60c90d844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1fdc802bb9b01746af19487ef0ff6a60c90d844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1fdc802bb9b01746af19487ef0ff6a60c90d844", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1fdc802bb9b01746af19487ef0ff6a60c90d844/comments", "author": null, "committer": null, "parents": [{"sha": "a92644e78a561dafc4252303da1cd00014b833e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92644e78a561dafc4252303da1cd00014b833e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a92644e78a561dafc4252303da1cd00014b833e8"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "15f07bac8e315736355b0ddca464d12f4068ef42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1fdc802bb9b01746af19487ef0ff6a60c90d844/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1fdc802bb9b01746af19487ef0ff6a60c90d844/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1fdc802bb9b01746af19487ef0ff6a60c90d844", "patch": "@@ -1,3 +1,15 @@\n+2001-05-05  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"*logicalsi3_silshr16\"): Use '?' instead\n+\tof '!' for the 'D' alternative ('!' is too strong).\n+\t(\"*logicalsi3_silshl16\"): Likewise.\n+\t(\"movstricthi\"): Accept 'A' when 'd' constraint, remove spurious '+'.\n+\t(\"movstrictsi\"): Remove spurious '+'.\n+\t(\"movstrictqi\"): Don't accept 'A' and remove spurious '+'.\n+\t(\"tstqi_1\", \"*lshrqi3_const1\"): Put 'm' constraint before 'd'.\n+\t(\"subqi3\"): Disparage with '!' the 'x' and 'y' registers to avoid\n+\ta reload to them.\n+\n 2001-05-04  David Edelsohn  <edelsohn@gnu.org>\n \n \t* calls.c (store_one_arg): Don't divide align by BITS_PER_UNIT."}, {"sha": "38bc6e0b938c73ac1075f26e75c75caee99ef080", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1fdc802bb9b01746af19487ef0ff6a60c90d844/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1fdc802bb9b01746af19487ef0ff6a60c90d844/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=a1fdc802bb9b01746af19487ef0ff6a60c90d844", "patch": "@@ -207,11 +207,11 @@\n \n (define_insn \"tstqi_1\"\n   [(set (cc0)\n-\t(match_operand:QI 0 \"tst_operand\" \"d,m,*A,!u\"))]\n+\t(match_operand:QI 0 \"tst_operand\" \"m,d,*A,!u\"))]\n   \"\"\n   \"@\n-   tstb\n    tst\\\\t%0\n+   tstb\n    #\n    tst\\\\t%b0\")\n \n@@ -467,7 +467,7 @@\n (define_insn \"cmpqi_1\"\n   [(set (cc0)\n \t(compare (match_operand:QI 0 \"tst_operand\" \"d,d,*x*y,*x*y\")\n-\t\t (match_operand:QI 1 \"cmp_operand\" \"im,?u,?u,?dim*x*y\")))]\n+\t\t (match_operand:QI 1 \"cmp_operand\" \"im,!u,!u,?dim*x*y\")))]\n   \"\"\n   \"@\n    cmpb\\\\t%1\n@@ -531,40 +531,40 @@\n ;; description but not for GCC optimization passes.\n ;;\n (define_insn \"movstrictsi\"\n-  [(set (strict_low_part (match_operand:SI 0 \"non_push_operand\" \"+um,+D,+D\"))\n+  [(set (strict_low_part (match_operand:SI 0 \"non_push_operand\" \"+um,D,D\"))\n \t(match_operand:SI 1 \"general_operand\" \"D,Dim,uD\"))]\n   \"\"\n   \"#\")\n \n (define_split\n-  [(set (strict_low_part (match_operand:SI 0 \"non_push_operand\" \"+um,+D,+D\"))\n+  [(set (strict_low_part (match_operand:SI 0 \"non_push_operand\" \"+um,D,D\"))\n \t(match_operand:SI 1 \"general_operand\" \"D,Dim,u\"))]\n   \"z_replacement_completed == 2\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\")\n \n (define_insn \"movstricthi\"\n-  [(set (strict_low_part (match_operand:HI 0 \"non_push_operand\" \"+um,+d,+d\"))\n-\t(match_operand:HI 1 \"general_operand\" \"d,dim,u\"))]\n+  [(set (strict_low_part (match_operand:HI 0 \"non_push_operand\" \"+um,dA,dA\"))\n+\t(match_operand:HI 1 \"general_operand\" \"dA,dAim,u\"))]\n   \"\"\n   \"#\")\n \n (define_split\n-  [(set (strict_low_part (match_operand:HI 0 \"non_push_operand\" \"+um,+d,+d\"))\n-\t(match_operand:HI 1 \"general_operand\" \"d,dim,u\"))]\n+  [(set (strict_low_part (match_operand:HI 0 \"non_push_operand\" \"+um,dA,dA\"))\n+\t(match_operand:HI 1 \"general_operand\" \"dA,dAim,u\"))]\n   \"z_replacement_completed == 2\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\")\n \n (define_insn \"movstrictqi\"\n-  [(set (strict_low_part (match_operand:QI 0 \"non_push_operand\" \"+mu,+!d\"))\n-\t(match_operand:QI 1 \"general_operand\" \"d,imu\"))]\n+  [(set (strict_low_part (match_operand:QI 0 \"non_push_operand\" \"+mu,!dA\"))\n+\t(match_operand:QI 1 \"general_operand\" \"d,imudA\"))]\n   \"\"\n   \"#\")\n \n (define_split\n-  [(set (strict_low_part (match_operand:QI 0 \"non_push_operand\" \"+mu,+d,+d\"))\n-\t(match_operand:QI 1 \"general_operand\" \"d,dim,u\"))]\n+  [(set (strict_low_part (match_operand:QI 0 \"non_push_operand\" \"+mu,dA\"))\n+\t(match_operand:QI 1 \"general_operand\" \"d,imudA\"))]\n   \"z_replacement_completed == 2\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\")\n@@ -2586,9 +2586,9 @@\n }\")\n \n (define_insn \"subqi3\"\n-  [(set (match_operand:QI 0 \"hard_reg_operand\" \"=dq*x*y\")\n-        (minus:QI (match_operand:QI 1 \"hard_reg_operand\" \"0\")\n-                  (match_operand:QI 2 \"general_operand\" \"uim*x*y*d\")))]\n+  [(set (match_operand:QI 0 \"hard_reg_operand\" \"=dq,!*x*y\")\n+        (minus:QI (match_operand:QI 1 \"hard_reg_operand\" \"0,0\")\n+                  (match_operand:QI 2 \"general_operand\" \"uim*A*d,uim*A*d\")))]\n   \"\"\n   \"*\n {\n@@ -3378,7 +3378,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n           (match_operator:SI 3 \"m68hc11_logical_operator\"\n \t      [(lshiftrt:SI \n-\t\t   (match_operand:SI 1 \"general_operand\" \"uim,!D\")\n+\t\t   (match_operand:SI 1 \"general_operand\" \"uim,?D\")\n \t\t   (const_int 16))\n \t\t(match_operand:SI 2 \"general_operand\" \"uim,0\")]))]\n   \"\"\n@@ -3388,7 +3388,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n           (match_operator:SI 3 \"m68hc11_logical_operator\"\n \t\t[(lshiftrt:SI \n-\t\t\t(match_operand:SI 1 \"general_operand\" \"uim,!D\")\n+\t\t\t(match_operand:SI 1 \"general_operand\" \"uim,?D\")\n \t\t\t(const_int 16))\n \t\t (match_operand:SI 2 \"general_operand\" \"uim,0\")]))]\n   \"reload_completed\"\n@@ -3414,7 +3414,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n           (match_operator:SI 3 \"m68hc11_logical_operator\"\n \t      [(ashift:SI \n-\t\t   (match_operand:SI 1 \"general_operand\" \"uim,!D\")\n+\t\t   (match_operand:SI 1 \"general_operand\" \"uim,?D\")\n \t\t   (const_int 16))\n \t\t(match_operand:SI 2 \"general_operand\" \"0,0\")]))]\n   \"\"\n@@ -3424,7 +3424,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n           (match_operator:SI 3 \"m68hc11_logical_operator\"\n \t\t[(ashift:SI \n-\t\t\t(match_operand:SI 1 \"general_operand\" \"uim,!D\")\n+\t\t\t(match_operand:SI 1 \"general_operand\" \"uim,?D\")\n \t\t\t(const_int 16))\n \t\t (match_operand:SI 2 \"general_operand\" \"0,0\")]))]\n   \"z_replacement_completed == 2\"\n@@ -3898,7 +3898,7 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=<,m,u\")\n \t(ashift:DI (match_operand:DI 1 \"general_operand\" \"umi,umi,umi\")\n \t\t   (const_int 32)))\n-   (clobber (match_scratch:HI 2 \"=A,d,d\"))]\n+   (clobber (match_scratch:HI 2 \"=&A,d,d\"))]\n    \"\"\n    \"#\")\n \n@@ -5075,13 +5075,13 @@\n    \"\")\n \n (define_insn \"*lshrqi3_const1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,m,!u,!*q,!*A\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=m,d,!u,!*q,!*A\")\n \t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,0,0,0\")\n \t\t     (const_int 1)))]\n   \"\"\n   \"@\n-   lsrb\n    lsr\\\\t%b0\n+   lsrb\n    lsr\\\\t%b0\n    lsr%0\n    #\")"}]}