{"sha": "6a893783f972a2c5d53186dfa15e0a7b8f1b2990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4OTM3ODNmOTcyYTJjNWQ1MzE4NmRmYTE1ZTBhN2I4ZjFiMjk5MA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-06-16T13:11:12Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-06-16T13:11:12Z"}, "message": "OpenMP/Fortran: Permit impure ELEMENTAL in omp directives\n\nOpenMP since 4.5 permits IMPURE ELEMENTAL in directives and\nthe code already only checked for PURE.\n\ngcc/fortran/ChangeLog:\n\n\t* parse.c (decode_omp_directive): Remove \"or ELEMENTAL\"\n\tfrom \"in PURE\" error message.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/pr79154-1.f90: Update dg-*;\n\tadd an impure elemental example.\n\t* gfortran.dg/gomp/pr79154-2.f90: Likewise.", "tree": {"sha": "53cf55541468dc99aafd78cb917dceeaabd3400b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53cf55541468dc99aafd78cb917dceeaabd3400b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a893783f972a2c5d53186dfa15e0a7b8f1b2990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a893783f972a2c5d53186dfa15e0a7b8f1b2990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a893783f972a2c5d53186dfa15e0a7b8f1b2990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a893783f972a2c5d53186dfa15e0a7b8f1b2990/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f193b29e42bcca7b92752d98d3a38dc9df884bef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f193b29e42bcca7b92752d98d3a38dc9df884bef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f193b29e42bcca7b92752d98d3a38dc9df884bef"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "9d90e501bf69a1bb181ddd9e4bafeda4eab0d668", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a893783f972a2c5d53186dfa15e0a7b8f1b2990/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a893783f972a2c5d53186dfa15e0a7b8f1b2990/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=6a893783f972a2c5d53186dfa15e0a7b8f1b2990", "patch": "@@ -849,7 +849,7 @@ decode_omp_directive (void)\n   /* match is for directives that should be recognized only if\n      -fopenmp, matchs for directives that should be recognized\n      if either -fopenmp or -fopenmp-simd.\n-     Handle only the directives allowed in PURE/ELEMENTAL procedures\n+     Handle only the directives allowed in PURE procedures\n      first (those also shall not turn off implicit pure).  */\n   switch (c)\n     {\n@@ -868,7 +868,7 @@ decode_omp_directive (void)\n   if (flag_openmp && gfc_pure (NULL))\n     {\n       gfc_error_now (\"OpenMP directives other than SIMD or DECLARE TARGET \"\n-\t\t     \"at %C may not appear in PURE or ELEMENTAL procedures\");\n+\t\t     \"at %C may not appear in PURE procedures\");\n       gfc_error_recovery ();\n       return ST_NONE;\n     }"}, {"sha": "ea147bfa78ec716b7534f9b098c1fc0b98b1d397", "filename": "gcc/testsuite/gfortran.dg/gomp/pr79154-1.f90", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a893783f972a2c5d53186dfa15e0a7b8f1b2990/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a893783f972a2c5d53186dfa15e0a7b8f1b2990/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-1.f90?ref=6a893783f972a2c5d53186dfa15e0a7b8f1b2990", "patch": "@@ -2,31 +2,36 @@\n ! { dg-do compile }\n \n pure real function foo (a, b)\t\t! { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64*-*-* } }\n-!$omp declare simd(foo)\t\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n+!$omp declare simd(foo)\t\t\t! { dg-bogus \"may not appear in PURE\" }\n   real, intent(in) :: a, b\n   foo = a + b\n end function foo\n pure function bar (a, b)\n   real, intent(in) :: a(8), b(8)\n   real :: bar(8)\n   integer :: i\n-!$omp simd\t\t\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n+!$omp simd\t\t\t\t! { dg-bogus \"may not appear in PURE\" }\n   do i = 1, 8\n     bar(i) = a(i) + b(i)\n   end do\n end function bar\n pure real function baz (a, b)\n-!$omp declare target\t\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n+!$omp declare target\t\t\t! { dg-bogus \"may not appear in PURE\" }\n   real, intent(in) :: a, b\n   baz = a + b\n end function baz\n elemental real function fooe (a, b)\t! { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64*-*-* } }\n-!$omp declare simd(fooe)\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n+!$omp declare simd(fooe)\t\t! { dg-bogus \"may not appear in PURE\" }\n   real, intent(in) :: a, b\n   fooe = a + b\n end function fooe\n elemental real function baze (a, b)\n-!$omp declare target\t\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n+!$omp declare target\t\t\t! { dg-bogus \"may not appear in PURE\" }\n   real, intent(in) :: a, b\n   baze = a + b\n end function baze\n+elemental impure real function bazei (a, b)\n+!$omp declare target\t\t\t! { dg-bogus \"may not appear in PURE\" }\n+  real, intent(in) :: a, b\n+  baze = a + b\n+end function bazei"}, {"sha": "38d3fe5c384261d71d7d61bba45d069bc2d187bc", "filename": "gcc/testsuite/gfortran.dg/gomp/pr79154-2.f90", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a893783f972a2c5d53186dfa15e0a7b8f1b2990/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a893783f972a2c5d53186dfa15e0a7b8f1b2990/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-2.f90?ref=6a893783f972a2c5d53186dfa15e0a7b8f1b2990", "patch": "@@ -3,14 +3,14 @@\n \n pure real function foo (a, b)\n   real, intent(in) :: a, b\n-!$omp taskwait\t\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+!$omp taskwait\t\t\t\t! { dg-error \"may not appear in PURE\" }\n   foo = a + b\n end function foo\n pure function bar (a, b)\n   real, intent(in) :: a(8), b(8)\n   real :: bar(8)\n   integer :: i\n-!$omp do simd\t\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+!$omp do simd\t\t\t\t! { dg-error \"may not appear in PURE\" }\n   do i = 1, 8\n     bar(i) = a(i) + b(i)\n   end do\n@@ -19,26 +19,38 @@ pure function baz (a, b)\n   real, intent(in) :: a(8), b(8)\n   real :: baz(8)\n   integer :: i\n-!$omp do\t\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+!$omp do\t\t\t\t! { dg-error \"may not appear in PURE\" }\n   do i = 1, 8\n     baz(i) = a(i) + b(i)\n   end do\n-!$omp end do\t\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+!$omp end do\t\t\t\t! { dg-error \"may not appear in PURE\" }\n end function baz\n pure real function baz2 (a, b)\n   real, intent(in) :: a, b\n-!$omp target map(from:baz2)\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+!$omp target map(from:baz2)\t\t! { dg-error \"may not appear in PURE\" }\n   baz2 = a + b\n-!$omp end target\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+!$omp end target\t\t\t! { dg-error \"may not appear in PURE\" }\n end function baz2\n+! ELEMENTAL implies PURE\n elemental real function fooe (a, b)\n   real, intent(in) :: a, b\n-!$omp taskyield\t\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+!$omp taskyield\t\t\t\t! { dg-error \"may not appear in PURE\" }\n   fooe = a + b\n end function fooe\n elemental real function baze (a, b)\n   real, intent(in) :: a, b\n-!$omp target map(from:baz)\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+!$omp target map(from:baz)\t\t! { dg-error \"may not appear in PURE\" }\n   baze = a + b\n-!$omp end target\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+!$omp end target\t\t\t! { dg-error \"may not appear in PURE\" }\n end function baze\n+elemental impure real function fooei (a, b)\n+  real, intent(in) :: a, b\n+!$omp taskyield\t\t\t\t! { dg-bogus \"may not appear in PURE\" }\n+  fooe = a + b\n+end function fooei\n+elemental impure real function bazei (a, b)\n+  real, intent(in) :: a, b\n+!$omp target map(from:baz)\t\t! { dg-bogus \"may not appear in PURE\" }\n+  baze = a + b\n+!$omp end target\t\t\t! { dg-bogus \"may not appear in PURE\" }\n+end function bazei"}]}