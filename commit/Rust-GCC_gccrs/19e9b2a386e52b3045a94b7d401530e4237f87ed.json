{"sha": "19e9b2a386e52b3045a94b7d401530e4237f87ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTllOWIyYTM4NmU1MmIzMDQ1YTk0YjdkNDAxNTMwZTQyMzdmODdlZA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2013-10-07T13:01:28Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2013-10-07T13:01:28Z"}, "message": "rs6000.c (altivec_expand_vec_perm_const_le): New.\n\n2013-10-07  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const_le): New.\n\t(altivec_expand_vec_perm_const): Call it.\n\nFrom-SVN: r203247", "tree": {"sha": "1c2ae8a1d85f5c2263fb81ad040e43fad9a868fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c2ae8a1d85f5c2263fb81ad040e43fad9a868fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19e9b2a386e52b3045a94b7d401530e4237f87ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e9b2a386e52b3045a94b7d401530e4237f87ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19e9b2a386e52b3045a94b7d401530e4237f87ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e9b2a386e52b3045a94b7d401530e4237f87ed/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0cf686948bf515dcfcc47314ab75fda468fe7357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf686948bf515dcfcc47314ab75fda468fe7357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf686948bf515dcfcc47314ab75fda468fe7357"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "aa0325f0e964b51ffdfabec5dee2a36570fff00e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e9b2a386e52b3045a94b7d401530e4237f87ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e9b2a386e52b3045a94b7d401530e4237f87ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19e9b2a386e52b3045a94b7d401530e4237f87ed", "patch": "@@ -1,3 +1,8 @@\n+2013-10-07  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const_le): New.\n+\t(altivec_expand_vec_perm_const): Call it.\n+\n 2013-10-07  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/vector.md (mov<mode>): Emit permuted move"}, {"sha": "0cf6ed87f0c14a2325c1abc75bd4ca488a4457a5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e9b2a386e52b3045a94b7d401530e4237f87ed/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e9b2a386e52b3045a94b7d401530e4237f87ed/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=19e9b2a386e52b3045a94b7d401530e4237f87ed", "patch": "@@ -28526,6 +28526,88 @@ rs6000_emit_parity (rtx dst, rtx src)\n     }\n }\n \n+/* Expand an Altivec constant permutation for little endian mode.\n+   There are two issues: First, the two input operands must be\n+   swapped so that together they form a double-wide array in LE\n+   order.  Second, the vperm instruction has surprising behavior\n+   in LE mode:  it interprets the elements of the source vectors\n+   in BE mode (\"left to right\") and interprets the elements of\n+   the destination vector in LE mode (\"right to left\").  To\n+   correct for this, we must subtract each element of the permute\n+   control vector from 31.\n+\n+   For example, suppose we want to concatenate vr10 = {0, 1, 2, 3}\n+   with vr11 = {4, 5, 6, 7} and extract {0, 2, 4, 6} using a vperm.\n+   We place {0,1,2,3,8,9,10,11,16,17,18,19,24,25,26,27} in vr12 to\n+   serve as the permute control vector.  Then, in BE mode,\n+\n+     vperm 9,10,11,12\n+\n+   places the desired result in vr9.  However, in LE mode the \n+   vector contents will be\n+\n+     vr10 = 00000003 00000002 00000001 00000000\n+     vr11 = 00000007 00000006 00000005 00000004\n+\n+   The result of the vperm using the same permute control vector is\n+\n+     vr9  = 05000000 07000000 01000000 03000000\n+\n+   That is, the leftmost 4 bytes of vr10 are interpreted as the\n+   source for the rightmost 4 bytes of vr9, and so on.\n+\n+   If we change the permute control vector to\n+\n+     vr12 = {31,20,29,28,23,22,21,20,15,14,13,12,7,6,5,4}\n+\n+   and issue\n+\n+     vperm 9,11,10,12\n+\n+   we get the desired\n+\n+   vr9  = 00000006 00000004 00000002 00000000.  */\n+\n+void\n+altivec_expand_vec_perm_const_le (rtx operands[4])\n+{\n+  unsigned int i;\n+  rtx perm[16];\n+  rtx constv, unspec;\n+  rtx target = operands[0];\n+  rtx op0 = operands[1];\n+  rtx op1 = operands[2];\n+  rtx sel = operands[3];\n+\n+  /* Unpack and adjust the constant selector.  */\n+  for (i = 0; i < 16; ++i)\n+    {\n+      rtx e = XVECEXP (sel, 0, i);\n+      unsigned int elt = 31 - (INTVAL (e) & 31);\n+      perm[i] = GEN_INT (elt);\n+    }\n+\n+  /* Expand to a permute, swapping the inputs and using the\n+     adjusted selector.  */\n+  if (!REG_P (op0))\n+    op0 = force_reg (V16QImode, op0);\n+  if (!REG_P (op1))\n+    op1 = force_reg (V16QImode, op1);\n+\n+  constv = gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, perm));\n+  constv = force_reg (V16QImode, constv);\n+  unspec = gen_rtx_UNSPEC (V16QImode, gen_rtvec (3, op1, op0, constv),\n+\t\t\t   UNSPEC_VPERM);\n+  if (!REG_P (target))\n+    {\n+      rtx tmp = gen_reg_rtx (V16QImode);\n+      emit_move_insn (tmp, unspec);\n+      unspec = tmp;\n+    }\n+\n+  emit_move_insn (target, unspec);\n+}\n+\n /* Expand an Altivec constant permutation.  Return true if we match\n    an efficient implementation; false to fall back to VPERM.  */\n \n@@ -28706,6 +28788,12 @@ altivec_expand_vec_perm_const (rtx operands[4])\n \t}\n     }\n \n+  if (!BYTES_BIG_ENDIAN)\n+    {\n+      altivec_expand_vec_perm_const_le (operands);\n+      return true;\n+    }\n+\n   return false;\n }\n "}]}