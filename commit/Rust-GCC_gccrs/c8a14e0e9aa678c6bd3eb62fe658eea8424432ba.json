{"sha": "c8a14e0e9aa678c6bd3eb62fe658eea8424432ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhMTRlMGU5YWE2NzhjNmJkM2ViNjJmZTY1OGVlYTg0MjQ0MzJiYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-11-08T19:20:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-11-08T19:20:38Z"}, "message": "mips.c (save_restore_insns): Remove GP from the restore registers mask early instead of special casing it...\n\n        * config/mips/mips.c (save_restore_insns): Remove GP from the\n        restore registers mask early instead of special casing it inside\n        the loop.\n\nFrom-SVN: r46853", "tree": {"sha": "a78c39185ae75a11970520f0dfa0e5eae8dbe5c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a78c39185ae75a11970520f0dfa0e5eae8dbe5c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8a14e0e9aa678c6bd3eb62fe658eea8424432ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a14e0e9aa678c6bd3eb62fe658eea8424432ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a14e0e9aa678c6bd3eb62fe658eea8424432ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a14e0e9aa678c6bd3eb62fe658eea8424432ba/comments", "author": null, "committer": null, "parents": [{"sha": "8ac9ea616e01991beb4164c1a44647763d33302c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac9ea616e01991beb4164c1a44647763d33302c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac9ea616e01991beb4164c1a44647763d33302c"}], "stats": {"total": 91, "additions": 51, "deletions": 40}, "files": [{"sha": "7c5c124ba63bf57d2825636366a21509b0e06118", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a14e0e9aa678c6bd3eb62fe658eea8424432ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a14e0e9aa678c6bd3eb62fe658eea8424432ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8a14e0e9aa678c6bd3eb62fe658eea8424432ba", "patch": "@@ -1,3 +1,9 @@\n+2001-11-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/mips/mips.c (save_restore_insns): Remove GP from the\n+\trestore registers mask early instead of special casing it inside\n+\tthe loop.\n+\n 2001-11-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp/decl.c (shadow_warning): New function."}, {"sha": "284ed92389afd6c037d884aeae0b53355fd77cc5", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 45, "deletions": 40, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a14e0e9aa678c6bd3eb62fe658eea8424432ba/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a14e0e9aa678c6bd3eb62fe658eea8424432ba/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c8a14e0e9aa678c6bd3eb62fe658eea8424432ba", "patch": "@@ -6659,6 +6659,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n {\n   long mask = current_frame_info.mask;\n   long fmask = current_frame_info.fmask;\n+  long real_mask = mask;\n   int regno;\n   rtx base_reg_rtx;\n   HOST_WIDE_INT base_offset;\n@@ -6671,6 +6672,12 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n       && ! BITSET_P (mask, HARD_FRAME_POINTER_REGNUM - GP_REG_FIRST))\n     abort ();\n \n+  /* Do not restore GP under certain conditions.  */\n+  if (! store_p\n+      && TARGET_ABICALLS\n+      && (mips_abi == ABI_32 || mips_abi == ABI_O64))\n+    mask &= ~(1 << (PIC_OFFSET_TABLE_REGNUM - GP_REG_FIRST));\n+\n   if (mask == 0 && fmask == 0)\n     return;\n \n@@ -6785,9 +6792,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \n \t\tif (store_p)\n \t\t  mips_emit_frame_related_store (mem_rtx, reg_rtx, gp_offset);\n-\t\telse if (!TARGET_ABICALLS\n-\t\t\t || (mips_abi != ABI_32 && mips_abi != ABI_O64)\n-\t\t\t || regno != (PIC_OFFSET_TABLE_REGNUM - GP_REG_FIRST))\n+\t\telse\n \t\t  {\n \t\t    emit_move_insn (reg_rtx, mem_rtx);\n \t\t    if (TARGET_MIPS16\n@@ -6799,50 +6804,50 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t      }\n \t    else\n \t      {\n-\t\tif (store_p || !TARGET_ABICALLS\n-\t\t    || (mips_abi != ABI_32 && mips_abi != ABI_O64)\n-\t\t    || regno != (PIC_OFFSET_TABLE_REGNUM - GP_REG_FIRST))\n+\t\tint r = regno;\n+\n+\t\t/* The mips16 does not have an instruction to\n+\t\t   load $31, so we load $7 instead, and work\n+\t\t   things out in the caller.  */\n+\t\tif (TARGET_MIPS16 && ! store_p && r == GP_REG_FIRST + 31)\n+\t\t  r = GP_REG_FIRST + 7;\n+\t\t/* The mips16 sometimes needs to save $18.  */\n+\t\tif (TARGET_MIPS16\n+\t\t    && regno != GP_REG_FIRST + 31\n+\t\t    && ! M16_REG_P (regno))\n \t\t  {\n-\t\t    int r = regno;\n-\n-\t\t    /* The mips16 does not have an instruction to\n-                       load $31, so we load $7 instead, and work\n-                       things out in the caller.  */\n-\t\t    if (TARGET_MIPS16 && ! store_p && r == GP_REG_FIRST + 31)\n-\t\t      r = GP_REG_FIRST + 7;\n-\t\t      /* The mips16 sometimes needs to save $18.  */\n-\t\t    if (TARGET_MIPS16\n-\t\t\t&& regno != GP_REG_FIRST + 31\n-\t\t\t&& ! M16_REG_P (regno))\n+\t\t    if (! store_p)\n+\t\t      r = GP_REG_FIRST + 6;\n+\t\t    else\n \t\t      {\n-\t\t\tif (! store_p)\n-\t\t\t  r = GP_REG_FIRST + 6;\n-\t\t\telse\n-\t\t\t  {\n-\t\t\t    r = GP_REG_FIRST + 3;\n-\t\t\t    fprintf (file, \"\\tmove\\t%s,%s\\n\",\n-\t\t\t\t     reg_names[r], reg_names[regno]);\n-\t\t\t  }\n+\t\t\tr = GP_REG_FIRST + 3;\n+\t\t\tfprintf (file, \"\\tmove\\t%s,%s\\n\",\n+\t\t\t\t reg_names[r], reg_names[regno]);\n \t\t      }\n-\t\t    fprintf (file, \"\\t%s\\t%s,\",\n-\t\t\t     (TARGET_64BIT\n-\t\t\t      ? (store_p) ? \"sd\" : \"ld\"\n-\t\t\t      : (store_p) ? \"sw\" : \"lw\"),\n-\t\t\t     reg_names[r]);\n-\t\t    fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n-\t\t\t     gp_offset - base_offset);\n-\t\t    fprintf (file, \"(%s)\\n\", reg_names[REGNO(base_reg_rtx)]);\n-\t\t    if (! store_p\n-\t\t\t&& TARGET_MIPS16\n-\t\t\t&& regno != GP_REG_FIRST + 31\n-\t\t\t&& ! M16_REG_P (regno))\n-\t\t      fprintf (file, \"\\tmove\\t%s,%s\\n\",\n-\t\t\t       reg_names[regno], reg_names[r]);\n \t\t  }\n-\n+\t\tfprintf (file, \"\\t%s\\t%s,\",\n+\t\t\t (TARGET_64BIT\n+\t\t\t  ? (store_p) ? \"sd\" : \"ld\"\n+\t\t\t  : (store_p) ? \"sw\" : \"lw\"),\n+\t\t\t reg_names[r]);\n+\t\tfprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+\t\t\t gp_offset - base_offset);\n+\t\tfprintf (file, \"(%s)\\n\", reg_names[REGNO(base_reg_rtx)]);\n+\t\tif (! store_p\n+\t\t    && TARGET_MIPS16\n+\t\t    && regno != GP_REG_FIRST + 31\n+\t\t    && ! M16_REG_P (regno))\n+\t\t  fprintf (file, \"\\tmove\\t%s,%s\\n\",\n+\t\t\t   reg_names[regno], reg_names[r]);\n \t      }\n \t    gp_offset -= GET_MODE_SIZE (gpr_mode);\n \t  }\n+        /* If the restore is being supressed, still take into account\n+\t   the offset at which it is stored.  */\n+ \telse if (BITSET_P (real_mask, regno - GP_REG_FIRST))\n+ \t  {\n+\t    gp_offset -= GET_MODE_SIZE (gpr_mode);\n+\t  }\n     }\n   else\n     base_reg_rtx = 0, base_offset  = 0;"}]}