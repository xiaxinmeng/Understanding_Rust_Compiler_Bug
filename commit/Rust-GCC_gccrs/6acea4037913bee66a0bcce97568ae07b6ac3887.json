{"sha": "6acea4037913bee66a0bcce97568ae07b6ac3887", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjZWE0MDM3OTEzYmVlNjZhMGJjY2U5NzU2OGFlMDdiNmFjMzg4Nw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-05T10:05:44Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-05T10:05:44Z"}, "message": "Fix formatting of files from bootstrap fixes", "tree": {"sha": "58c0b76e94a0ced0d9110b4e17bf64ccf78251b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58c0b76e94a0ced0d9110b4e17bf64ccf78251b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6acea4037913bee66a0bcce97568ae07b6ac3887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acea4037913bee66a0bcce97568ae07b6ac3887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6acea4037913bee66a0bcce97568ae07b6ac3887", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acea4037913bee66a0bcce97568ae07b6ac3887/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de710767fee379d5b6837f76cd8245ec7fcfcff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de710767fee379d5b6837f76cd8245ec7fcfcff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de710767fee379d5b6837f76cd8245ec7fcfcff"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "885fa60eb8b4dd5dae5f50db05e170138d45e864", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acea4037913bee66a0bcce97568ae07b6ac3887/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acea4037913bee66a0bcce97568ae07b6ac3887/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=6acea4037913bee66a0bcce97568ae07b6ac3887", "patch": "@@ -29,15 +29,17 @@\n #include \"tm_p.h\"\n \n //#include \"rust-target.h\"\n-/*TODO This isn't (currently?) necessary, but if '#include'd after '#include \"target.h\"', causes:\n-    In file included from [...]/gcc/rust/rust-session-manager.cc:31:\n+/*TODO This isn't (currently?) necessary, but if '#include'd after '#include\n+   \"target.h\"', causes: In file included from\n+   [...]/gcc/rust/rust-session-manager.cc:31:\n     [...]/gcc/rust/rust-target.h:23: error: \"DEFHOOK\" redefined [-Werror]\n        23 | #define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (*NAME) PARAMS;\n-          | \n+\t  |\n     In file included from [...]/gcc/rust/rust-session-manager.cc:27:\n-    [...]/gcc/target.h:272: note: this is the location of the previous definition\n-      272 | #define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (* NAME) PARAMS;\n-          | \n+    [...]/gcc/target.h:272: note: this is the location of the previous\n+   definition 272 | #define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (* NAME)\n+   PARAMS;\n+\t  |\n */\n \n #include \"rust-lex.h\""}, {"sha": "596b95d3f230eec5db7fcecb1b3923d135968b9c", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acea4037913bee66a0bcce97568ae07b6ac3887/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acea4037913bee66a0bcce97568ae07b6ac3887/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=6acea4037913bee66a0bcce97568ae07b6ac3887", "patch": "@@ -972,14 +972,18 @@ class USizeType : public BaseType\n   USizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::USIZE)\n   {\n-    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    // TODO unused; should 'refs' be passed as the last argument to the\n+    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n+    // provided by caller)?\n     (void) refs;\n   }\n \n   USizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::USIZE)\n   {\n-    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    // TODO unused; should 'refs' be passed as the last argument to the\n+    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n+    // provided by caller)?\n     (void) refs;\n   }\n \n@@ -1000,14 +1004,18 @@ class ISizeType : public BaseType\n   ISizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::ISIZE)\n   {\n-    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    // TODO unused; should 'refs' be passed as the last argument to the\n+    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n+    // provided by caller)?\n     (void) refs;\n   }\n \n   ISizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::ISIZE)\n   {\n-    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    // TODO unused; should 'refs' be passed as the last argument to the\n+    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n+    // provided by caller)?\n     (void) refs;\n   }\n \n@@ -1028,14 +1036,18 @@ class CharType : public BaseType\n   CharType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::CHAR)\n   {\n-    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    // TODO unused; should 'refs' be passed as the last argument to the\n+    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n+    // provided by caller)?\n     (void) refs;\n   }\n \n   CharType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::CHAR)\n   {\n-    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    // TODO unused; should 'refs' be passed as the last argument to the\n+    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n+    // provided by caller)?\n     (void) refs;\n   }\n \n@@ -1057,15 +1069,19 @@ class ReferenceType : public BaseType\n \t\t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::REF), base (base)\n   {\n-    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    // TODO unused; should 'refs' be passed as the last argument to the\n+    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n+    // provided by caller)?\n     (void) refs;\n   }\n \n   ReferenceType (HirId ref, HirId ty_ref, TyVar base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::REF), base (base)\n   {\n-    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    // TODO unused; should 'refs' be passed as the last argument to the\n+    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n+    // provided by caller)?\n     (void) refs;\n   }\n \n@@ -1093,14 +1109,18 @@ class StrType : public BaseType\n   StrType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::STR)\n   {\n-    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    // TODO unused; should 'refs' be passed as the last argument to the\n+    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n+    // provided by caller)?\n     (void) refs;\n   }\n \n   StrType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::STR)\n   {\n-    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    // TODO unused; should 'refs' be passed as the last argument to the\n+    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n+    // provided by caller)?\n     (void) refs;\n   }\n "}]}