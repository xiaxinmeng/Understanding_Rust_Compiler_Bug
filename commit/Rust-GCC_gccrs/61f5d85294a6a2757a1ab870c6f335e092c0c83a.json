{"sha": "61f5d85294a6a2757a1ab870c6f335e092c0c83a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmNWQ4NTI5NGE2YTI3NTdhMWFiODcwYzZmMzM1ZTA5MmMwYzgzYQ==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@somniumtech.com", "date": "2017-06-15T13:38:52Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2017-06-15T13:38:52Z"}, "message": "Fix problems with the MSP430 port's handling of persistent data.\n\n\tPR target/78818\ngcc\t* config/msp430/msp430.c (msp430_data_attr): Check that it's possible\n\tfor a variable to have a section before checking if the section has a\n\tname.\n\tSet section to.persistent if persistent\tattribute is set.\n\tWarn if .persistent attribute is used on an automatic variable.\n\ntests\t* gcc.target/msp430/pr78818-real.c: New template for tests.\n\t* gcc.target/msp430/pr78818-auto.c: New test.\n\t* gcc.target/msp430/pr78818-data-region.c: New test.\n\t* gcc.target/msp430/pr78818-data-sec.c: New test.\n\t* gcc.target/msp430/pr78818-auto-warn.c: New test.\n\nFrom-SVN: r249222", "tree": {"sha": "c687e904fefd96cf91a4784dfa2a87fc8ed968e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c687e904fefd96cf91a4784dfa2a87fc8ed968e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61f5d85294a6a2757a1ab870c6f335e092c0c83a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f5d85294a6a2757a1ab870c6f335e092c0c83a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f5d85294a6a2757a1ab870c6f335e092c0c83a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f5d85294a6a2757a1ab870c6f335e092c0c83a/comments", "author": null, "committer": null, "parents": [{"sha": "0948d23fffba754853cc93984e106d2aaf9a3897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0948d23fffba754853cc93984e106d2aaf9a3897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0948d23fffba754853cc93984e106d2aaf9a3897"}], "stats": {"total": 84, "additions": 80, "deletions": 4}, "files": [{"sha": "3f2f34417c656660f8167f1dcd6f8f5dba017b3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61f5d85294a6a2757a1ab870c6f335e092c0c83a", "patch": "@@ -1,3 +1,12 @@\n+2017-06-15  Jozef Lawrynowicz\t<jozef.l@somniumtech.com>\n+\n+\tPR target/78818\n+\t* config/msp430/msp430.c (msp430_data_attr): Check that it's possible\n+\tfor a variable to have a section before checking if the section has a\n+\tname.\n+\tSet section to.persistent if persistent\tattribute is set.\n+\tWarn if .persistent attribute is used on an automatic variable.\n+\n 2017-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/80474"}, {"sha": "6acab1e70cb6987ab4b52ff94b45af39c76d3b13", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=61f5d85294a6a2757a1ab870c6f335e092c0c83a", "patch": "@@ -40,6 +40,7 @@\n #include \"expr.h\"\n #include \"langhooks.h\"\n #include \"builtins.h\"\n+#include \"intl.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -1993,10 +1994,24 @@ msp430_data_attr (tree * node,\n   gcc_assert (args == NULL);\n \n   if (TREE_CODE (* node) != VAR_DECL)\n-    message = \"%qE attribute only applies to variables\";\n-\n-  if (DECL_SECTION_NAME (* node))\n-    message = \"%qE attribute cannot be applied to variables with specific sections\";\n+    message = G_(\"%qE attribute only applies to variables\");\n+\n+  /* Check that it's possible for the variable to have a section.  */\n+  if ((TREE_STATIC (* node) || DECL_EXTERNAL (* node) || in_lto_p)\n+      && DECL_SECTION_NAME (* node))\n+    message = G_(\"%qE attribute cannot be applied to variables with specific sections\");\n+\n+  if (!message && TREE_NAME_EQ (name, ATTR_PERSIST) && !TREE_STATIC (* node)\n+      && !TREE_PUBLIC (* node) && !DECL_EXTERNAL (* node))\n+    message = G_(\"%qE attribute has no effect on automatic variables\");\n+\n+  /* It's not clear if there is anything that can be set here to prevent the\n+     front end placing the variable before the back end can handle it, in a\n+     similar way to how DECL_COMMON is used below.\n+     So just place the variable in the .persistent section now.  */\n+  if ((TREE_STATIC (* node) || DECL_EXTERNAL (* node) || in_lto_p)\n+      && TREE_NAME_EQ (name, ATTR_PERSIST))\n+    set_decl_section_name (* node, \".persistent\");\n \n   /* If this var is thought to be common, then change this.  Common variables\n      are assigned to sections before the backend has a chance to process them.  */"}, {"sha": "3677d15c453efb77a59e74ba3b952495a6e41744", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61f5d85294a6a2757a1ab870c6f335e092c0c83a", "patch": "@@ -1,3 +1,12 @@\n+2017-06-15  Jozef Lawrynowicz\t<jozef.l@somniumtech.com>\n+\n+\tPR target/78818\n+\t* gcc.target/msp430/pr78818-real.c: New template for tests.\n+\t* gcc.target/msp430/pr78818-auto.c: New test.\n+\t* gcc.target/msp430/pr78818-data-region.c: New test.\n+\t* gcc.target/msp430/pr78818-data-sec.c: New test.\n+\t* gcc.target/msp430/pr78818-auto-warn.c: New test.\n+\n 2017-06-15  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.target/arm/its.c: Check that no IT blocks has more than 2"}, {"sha": "3dba361071ffebf0ec302ebbb7e19c188adbc480", "filename": "gcc/testsuite/gcc.target/msp430/pr78818-auto-warn.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-auto-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-auto-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-auto-warn.c?ref=61f5d85294a6a2757a1ab870c6f335e092c0c83a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+__attribute__((persistent)) int persistent_1_g = 1;\n+__attribute__((persistent)) int persistent_2_g = 0;\n+static __attribute__((persistent)) int persistent_3_g = 1;\n+static __attribute__((persistent)) int persistent_4_g = 0;\n+\n+int\n+main (void)\n+{\n+  __attribute__((persistent)) int persistent_1 = 1; /* { dg-warning \"attribute has no effect on automatic\" } */\n+  __attribute__((persistent)) int persistent_2 = 0; /* { dg-warning \"attribute has no effect on automatic\" } */\n+  static __attribute__((persistent)) int persistent_3 = 1;\n+  static __attribute__((persistent)) int persistent_4 = 0;\n+  return 0;\n+}"}, {"sha": "1fb0b28e64a8f9469bfdbc8b021bcc0a21f7b651", "filename": "gcc/testsuite/gcc.target/msp430/pr78818-auto.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-auto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-auto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-auto.c?ref=61f5d85294a6a2757a1ab870c6f335e092c0c83a", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+\n+/* { dg-final { scan-assembler-not \"\\\\.comm\" } } */\n+\n+#include \"pr78818-real.c\""}, {"sha": "22b1fa272adc67f9892767579362598735ea0100", "filename": "gcc/testsuite/gcc.target/msp430/pr78818-data-region.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-data-region.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-data-region.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-data-region.c?ref=61f5d85294a6a2757a1ab870c6f335e092c0c83a", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdata-region=either\" } */\n+\n+/* { dg-final { scan-assembler-not \"\\\\.either\" } } */\n+\n+#include \"pr78818-real.c\""}, {"sha": "6367e01d948db5247bce94a3d62d9155e06b9ca6", "filename": "gcc/testsuite/gcc.target/msp430/pr78818-data-sec.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-data-sec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-data-sec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-data-sec.c?ref=61f5d85294a6a2757a1ab870c6f335e092c0c83a", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdata-sections\" } */\n+\n+/* { dg-final { scan-assembler-not \"\\\\.data\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\.bss\" } } */\n+\n+#include \"pr78818-real.c\""}, {"sha": "504ed4a6a7904d1b58ca7cdc8f3fd17f34017a70", "filename": "gcc/testsuite/gcc.target/msp430/pr78818-real.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-real.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5d85294a6a2757a1ab870c6f335e092c0c83a/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-real.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-real.c?ref=61f5d85294a6a2757a1ab870c6f335e092c0c83a", "patch": "@@ -0,0 +1,9 @@\n+__attribute__((persistent)) int persistent_1 = 1;\n+__attribute__((persistent)) int persistent_2 = 0;\n+static __attribute__((persistent)) int persistent_3 = 1;\n+static __attribute__((persistent)) int persistent_4 = 0;\n+\n+int main (void)\n+{\n+  return 0;\n+}"}]}