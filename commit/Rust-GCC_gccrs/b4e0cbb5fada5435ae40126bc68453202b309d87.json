{"sha": "b4e0cbb5fada5435ae40126bc68453202b309d87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlMGNiYjVmYWRhNTQzNWFlNDAxMjZiYzY4NDUzMjAyYjMwOWQ4Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1991-09-30T01:34:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1991-09-30T01:34:16Z"}, "message": "Initial revision\n\nFrom-SVN: r42", "tree": {"sha": "b55301ac53cd0749cdf38ac669772e40e0bafd4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b55301ac53cd0749cdf38ac669772e40e0bafd4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e0cbb5fada5435ae40126bc68453202b309d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e0cbb5fada5435ae40126bc68453202b309d87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e0cbb5fada5435ae40126bc68453202b309d87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e0cbb5fada5435ae40126bc68453202b309d87/comments", "author": null, "committer": null, "parents": [{"sha": "c3bcc8368c5d75b885e5dd2e20afcba357063969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bcc8368c5d75b885e5dd2e20afcba357063969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3bcc8368c5d75b885e5dd2e20afcba357063969"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "4da8b7ef5f19fa5e65be5ae43a61f7b8cf75c935", "filename": "gcc/reload.h", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e0cbb5fada5435ae40126bc68453202b309d87/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e0cbb5fada5435ae40126bc68453202b309d87/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=b4e0cbb5fada5435ae40126bc68453202b309d87", "patch": "@@ -0,0 +1,85 @@\n+/* Communication between reload.c and reload1.c.\n+   Copyright (C) 1987, 1991 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+/* See reload.c and reload1.c for comments on these variables.  */\n+\n+/* Maximum number of reloads we can need.  */\n+#define MAX_RELOADS (2 * MAX_RECOG_OPERANDS * (MAX_REGS_PER_ADDRESS + 1))\n+\n+extern rtx reload_in[MAX_RELOADS];\n+extern rtx reload_out[MAX_RELOADS];\n+extern rtx reload_in_reg[MAX_RELOADS];\n+extern enum reg_class reload_reg_class[MAX_RELOADS];\n+extern enum machine_mode reload_inmode[MAX_RELOADS];\n+extern enum machine_mode reload_outmode[MAX_RELOADS];\n+extern char reload_strict_low[MAX_RELOADS];\n+extern char reload_optional[MAX_RELOADS];\n+extern int reload_inc[MAX_RELOADS];\n+extern int reload_needed_for_multiple[MAX_RELOADS];\n+extern rtx reload_needed_for[MAX_RELOADS];\n+extern int reload_secondary_reload[MAX_RELOADS];\n+extern int reload_secondary_p[MAX_RELOADS];\n+extern int n_reloads;\n+\n+extern rtx reload_reg_rtx[MAX_RELOADS];\n+\n+enum reload_when_needed\n+{\n+  RELOAD_FOR_INPUT_RELOAD_ADDRESS,\n+  RELOAD_FOR_OUTPUT_RELOAD_ADDRESS,\n+  RELOAD_FOR_OPERAND_ADDRESS,\n+  /* The following two are not fully implemented.\n+     They are used in emitting insns, but they aren't distinguished from\n+     RELOAD_OTHER when computing the number of spills.  What they accomplish\n+     is to avoid precluding inheritance of already loaded values\n+     for input reloads when there are also output reloads.  */\n+  RELOAD_FOR_INPUT,\n+  RELOAD_FOR_OUTPUT,\n+  RELOAD_OTHER\n+};\n+\n+extern enum reload_when_needed reload_when_needed[MAX_RELOADS];\n+\n+extern rtx *reg_equiv_constant;\n+extern rtx *reg_equiv_address;\n+extern rtx *reg_equiv_mem;\n+\n+/* All the \"earlyclobber\" operands of the current insn\n+   are recorded here.  */\n+extern int n_earlyclobbers;\n+extern rtx reload_earlyclobbers[MAX_RECOG_OPERANDS];\n+\n+/* First uid used by insns created by reload in this function.\n+   Used in find_equiv_reg.  */\n+extern int reload_first_uid;\n+\n+/* Nonzero if indirect addressing is supported when the innermost MEM is\n+   of the form (MEM (SYMBOL_REF sym)).  It is assumed that the level to\n+   which these are valid is the same as spill_indirect_levels, above.   */\n+\n+extern char indirect_symref_ok;\n+\n+/* Nonzero if an address (plus (reg frame_pointer) (reg ...)) is valid.  */\n+extern char double_reg_address_ok;\n+\n+void init_reload ();\n+void find_reloads ();\n+void subst_reloads ();\n+rtx eliminate_regs ();"}]}