{"sha": "1e19ac749db3cd39fb22d58775282c0058bc3c8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUxOWFjNzQ5ZGIzY2QzOWZiMjJkNTg3NzUyODJjMDA1OGJjM2M4YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-24T21:45:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-24T21:45:59Z"}, "message": "re PR target/16298 (ICE in output_operand)\n\n        PR target/16298\n        * config/i386/i386.c (legitimate_constant_p): Rework to not accept\n        random codes within CONST.\n\nFrom-SVN: r86522", "tree": {"sha": "2fc4f809b308850e770917207c3ec34157408dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fc4f809b308850e770917207c3ec34157408dc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e19ac749db3cd39fb22d58775282c0058bc3c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e19ac749db3cd39fb22d58775282c0058bc3c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e19ac749db3cd39fb22d58775282c0058bc3c8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e19ac749db3cd39fb22d58775282c0058bc3c8a/comments", "author": null, "committer": null, "parents": [{"sha": "c61225e74f3e335969dca15e7af8a70e4c509694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61225e74f3e335969dca15e7af8a70e4c509694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61225e74f3e335969dca15e7af8a70e4c509694"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "e52036f9ddacab500356991232adb26c3fc078a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e19ac749db3cd39fb22d58775282c0058bc3c8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e19ac749db3cd39fb22d58775282c0058bc3c8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e19ac749db3cd39fb22d58775282c0058bc3c8a", "patch": "@@ -1,3 +1,9 @@\n+2004-08-24  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/16298\n+\t* config/i386/i386.c (legitimate_constant_p): Rework to not accept\n+\trandom codes within CONST.\n+\n 2004-08-24  James E Wilson  <wilson@specifixinc.com>\n \n \t* Makefile.in (STAGEFEEDBACK_FLAGS_TO_PASS): Remove"}, {"sha": "53ed7f1db5dcf704b95c8e3d1c54f548fa718cfa", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e19ac749db3cd39fb22d58775282c0058bc3c8a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e19ac749db3cd39fb22d58775282c0058bc3c8a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1e19ac749db3cd39fb22d58775282c0058bc3c8a", "patch": "@@ -4824,54 +4824,43 @@ darwin_local_data_pic (rtx disp)\n bool\n legitimate_constant_p (rtx x)\n {\n-  rtx inner;\n-\n   switch (GET_CODE (x))\n     {\n-    case SYMBOL_REF:\n-      /* TLS symbols are not constant.  */\n-      if (tls_symbolic_operand (x, Pmode))\n-\treturn false;\n-      break;\n-\n     case CONST:\n-      inner = XEXP (x, 0);\n-\n-      /* Offsets of TLS symbols are never valid.\n-\t Discourage CSE from creating them.  */\n-      if (GET_CODE (inner) == PLUS\n-\t  && tls_symbolic_operand (XEXP (inner, 0), Pmode))\n-\treturn false;\n+      x = XEXP (x, 0);\n \n-      if (GET_CODE (inner) == PLUS)\n+      if (GET_CODE (x) == PLUS)\n \t{\n-\t  if (GET_CODE (XEXP (inner, 1)) != CONST_INT)\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    return false;\n-\t  inner = XEXP (inner, 0);\n+\t  x = XEXP (x, 0);\n \t}\n \n-      if (TARGET_MACHO && darwin_local_data_pic (inner))\n+      if (TARGET_MACHO && darwin_local_data_pic (x))\n \treturn true;\n \n-      if (GET_CODE (inner) == MINUS)\n-\t{\n-\t  if (GET_CODE (XEXP (inner, 1)) != CONST_INT)\n-\t    return false;\n-\t  inner = XEXP (inner, 0);\n-\t}\n-\n       /* Only some unspecs are valid as \"constants\".  */\n-      if (GET_CODE (inner) == UNSPEC)\n-\tswitch (XINT (inner, 1))\n+      if (GET_CODE (x) == UNSPEC)\n+\tswitch (XINT (x, 1))\n \t  {\n \t  case UNSPEC_TPOFF:\n \t  case UNSPEC_NTPOFF:\n-\t    return local_exec_symbolic_operand (XVECEXP (inner, 0, 0), Pmode);\n+\t    return local_exec_symbolic_operand (XVECEXP (x, 0, 0), Pmode);\n \t  case UNSPEC_DTPOFF:\n-\t    return local_dynamic_symbolic_operand (XVECEXP (inner, 0, 0), Pmode);\n+\t    return local_dynamic_symbolic_operand (XVECEXP (x, 0, 0), Pmode);\n \t  default:\n \t    return false;\n \t  }\n+\n+      /* We must have drilled down to a symbol.  */\n+      if (!symbolic_operand (x, Pmode))\n+\treturn false;\n+      /* FALLTHRU */\n+\n+    case SYMBOL_REF:\n+      /* TLS symbols are never valid.  */\n+      if (tls_symbolic_operand (x, Pmode))\n+\treturn false;\n       break;\n \n     default:"}]}