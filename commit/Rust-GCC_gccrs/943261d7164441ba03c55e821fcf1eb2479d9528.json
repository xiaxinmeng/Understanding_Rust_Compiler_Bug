{"sha": "943261d7164441ba03c55e821fcf1eb2479d9528", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzMjYxZDcxNjQ0NDFiYTAzYzU1ZTgyMWZjZjFlYjI0NzlkOTUyOA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-02-15T22:47:38Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-02-15T22:47:38Z"}, "message": "Add a little whitespace\n\nFrom-SVN: r111121", "tree": {"sha": "50ea8eaaff2807c80bc7b4f75cf5a746fe16cb62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50ea8eaaff2807c80bc7b4f75cf5a746fe16cb62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/943261d7164441ba03c55e821fcf1eb2479d9528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943261d7164441ba03c55e821fcf1eb2479d9528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943261d7164441ba03c55e821fcf1eb2479d9528", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943261d7164441ba03c55e821fcf1eb2479d9528/comments", "author": null, "committer": null, "parents": [{"sha": "3c0b6c430026d7d9d20a8a72e35108b6fb769af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0b6c430026d7d9d20a8a72e35108b6fb769af2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c0b6c430026d7d9d20a8a72e35108b6fb769af2"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "70b4ea1097239320f244259b2917c40c5f2889a7", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943261d7164441ba03c55e821fcf1eb2479d9528/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943261d7164441ba03c55e821fcf1eb2479d9528/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=943261d7164441ba03c55e821fcf1eb2479d9528", "patch": "@@ -1651,6 +1651,7 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n      terms of SFT_PARENT_VAR, that is where it is.\n      However, the access through the foo pointer will be at offset 0.\n   */\n+\n   if (size != -1\n       && TREE_CODE (alias) == STRUCT_FIELD_TAG\n       && base\n@@ -1666,6 +1667,7 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n #endif\n       return false;\n     }\n+\n   /* Without strict aliasing, it is impossible for a component access\n      through a pointer to touch a random variable, unless that\n      variable *is* a structure or a pointer.\n@@ -1693,6 +1695,7 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n      \n      (taken from 20000623-1.c)\n   */\n+\n   else if (ref \n \t   && flag_strict_aliasing\n \t   && TREE_CODE (ref) != INDIRECT_REF\n@@ -1710,9 +1713,11 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n #endif\n       return false;\n     }\n+\n   /* If the offset of the access is greater than the size of one of\n      the possible aliases, it can't be touching that alias, because it\n      would be past the end of the structure.  */\n+\n   else if (ref\n \t   && flag_strict_aliasing\n \t   && TREE_CODE (ref) != INDIRECT_REF"}]}