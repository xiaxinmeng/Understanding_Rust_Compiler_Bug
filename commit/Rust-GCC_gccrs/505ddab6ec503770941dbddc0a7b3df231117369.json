{"sha": "505ddab6ec503770941dbddc0a7b3df231117369", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA1ZGRhYjZlYzUwMzc3MDk0MWRiZGRjMGE3YjNkZjIzMTExNzM2OQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-03T16:05:54Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-03T16:05:54Z"}, "message": "builtins.c: Fix formatting.\n\n\t* builtins.c: Fix formatting.\n\t* c-typeck.c: Likewise.\n\t* combine.c: Likewise.\n\t* expr.c: Likewise.\n\t* loop.c: Likewise.\n\nFrom-SVN: r48512", "tree": {"sha": "10f143c0e34f2eefbe2f73dbc5a049994936309f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10f143c0e34f2eefbe2f73dbc5a049994936309f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/505ddab6ec503770941dbddc0a7b3df231117369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505ddab6ec503770941dbddc0a7b3df231117369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/505ddab6ec503770941dbddc0a7b3df231117369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505ddab6ec503770941dbddc0a7b3df231117369/comments", "author": null, "committer": null, "parents": [{"sha": "dd37368c6d2f0e2b4c4c774820c113f605e8086d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd37368c6d2f0e2b4c4c774820c113f605e8086d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd37368c6d2f0e2b4c4c774820c113f605e8086d"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "6f801ff7c7507bc7b20a9a8e98c6469405ea437d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=505ddab6ec503770941dbddc0a7b3df231117369", "patch": "@@ -1,3 +1,11 @@\n+2002-01-03  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* builtins.c: Fix formatting.\n+\t* c-typeck.c: Likewise.\n+\t* combine.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* loop.c: Likewise.\n+\n 2002-01-03  Andreas Schwab  <schwab@suse.de>\n \n \t* cppfiles.c (_cpp_pop_file_buffer): Change return type to bool"}, {"sha": "404bf46a0047e9a339a36422d505b1ec38dc084a", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=505ddab6ec503770941dbddc0a7b3df231117369", "patch": "@@ -1,6 +1,6 @@\n /* Expand builtin functions.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3368,7 +3368,7 @@ expand_builtin_fputs (arglist, ignore, unlocked)\n \tbreak;\n       }\n     default:\n-      abort();\n+      abort ();\n     }\n \n   return expand_expr (build_function_call_expr (fn, arglist),"}, {"sha": "cf3a387e99fb336c5d15a1f37298820aaa5d1ce1", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=505ddab6ec503770941dbddc0a7b3df231117369", "patch": "@@ -5554,7 +5554,7 @@ pop_init_level (implicit)\n       else\n \t/* Zero-length arrays are no longer special, so we should no longer\n \t   get here.  */\n-\tabort();\n+\tabort ();\n     }\n \n   /* Warn when some struct elements are implicitly initialized to zero.  */"}, {"sha": "f83990e4b3958099c2ddff936c1243ca4225e632", "filename": "gcc/combine.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=505ddab6ec503770941dbddc0a7b3df231117369", "patch": "@@ -1,6 +1,6 @@\n /* Optimize by combining instructions for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -135,7 +135,7 @@ static int max_uid_cuid;\n    BITS_PER_WORD would invoke undefined behavior.  Work around it.  */\n \n #define UWIDE_SHIFT_LEFT_BY_BITS_PER_WORD(val) \\\n-  (((unsigned HOST_WIDE_INT)(val) << (BITS_PER_WORD - 1)) << 1)\n+  (((unsigned HOST_WIDE_INT) (val) << (BITS_PER_WORD - 1)) << 1)\n \n /* Maximum register number, which is the size of the tables below.  */\n \n@@ -6012,7 +6012,7 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n \n   /* Get the mode to use should INNER not be a MEM, the mode for the position,\n      and the mode for the result.  */\n-  if (in_dest && mode_for_extraction(EP_insv, -1) != MAX_MACHINE_MODE)\n+  if (in_dest && mode_for_extraction (EP_insv, -1) != MAX_MACHINE_MODE)\n     {\n       wanted_inner_reg_mode = mode_for_extraction (EP_insv, 0);\n       pos_mode = mode_for_extraction (EP_insv, 2);\n@@ -8544,8 +8544,8 @@ num_sign_bit_copies (x, mode)\n       if (! POINTERS_EXTEND_UNSIGNED && GET_MODE (x) == Pmode\n \t  && (code == PLUS || code == MINUS)\n \t  && GET_CODE (XEXP (x, 0)) == REG && REG_POINTER (XEXP (x, 0)))\n-\tresult = MAX ((int)(GET_MODE_BITSIZE (Pmode)\n-\t\t\t    - GET_MODE_BITSIZE (ptr_mode) + 1),\n+\tresult = MAX ((int) (GET_MODE_BITSIZE (Pmode)\n+\t\t\t     - GET_MODE_BITSIZE (ptr_mode) + 1),\n \t\t      result);\n #endif\n       return result;\n@@ -12004,7 +12004,7 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \t  else if (i2 && GET_CODE (i2) == JUMP_INSN)\n \t    place = i2;\n \t  else\n-\t    abort();\n+\t    abort ();\n \t  break;\n \n \tcase REG_EH_REGION:"}, {"sha": "b07d88d41fa15963fbd2a291e6ff85530012c9ec", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=505ddab6ec503770941dbddc0a7b3df231117369", "patch": "@@ -3155,7 +3155,7 @@ emit_single_push_insn (mode, x, type)\n   if (icode != CODE_FOR_nothing)\n     {\n       if (((pred = insn_data[(int) icode].operand[0].predicate)\n-\t  && !((*pred) (x, mode))))\n+\t   && !((*pred) (x, mode))))\n \tx = force_reg (mode, x);\n       emit_insn (GEN_FCN (icode) (x));\n       return;\n@@ -3166,7 +3166,7 @@ emit_single_push_insn (mode, x, type)\n     {\n #ifdef STACK_GROWS_DOWNWARD\n       dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\tGEN_INT (-(HOST_WIDE_INT)rounded_size));\n+\t\t\t\tGEN_INT (-(HOST_WIDE_INT) rounded_size));\n #else\n       dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\tGEN_INT (rounded_size));\n@@ -6152,7 +6152,7 @@ expand_expr (exp, target, tmode, modifier)\n \t      set_mem_attributes (value, exp, 1);\n \t      SET_DECL_RTL (exp, value);\n \t    }\n-\t  }\n+\t}\n \n       /* ... fall through ...  */\n \n@@ -8880,7 +8880,7 @@ expand_increment (exp, post, ignore)\n     }\n \n   if (TYPE_TRAP_SIGNED (TREE_TYPE (exp)))\n-     this_optab = this_optab == add_optab ? addv_optab : subv_optab;\n+    this_optab = this_optab == add_optab ? addv_optab : subv_optab;\n \n   /* For a preincrement, see if we can do this with a single instruction.  */\n   if (!post)"}, {"sha": "177efb3734c879ac52f9c225a224811fe7ee256d", "filename": "gcc/loop.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505ddab6ec503770941dbddc0a7b3df231117369/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=505ddab6ec503770941dbddc0a7b3df231117369", "patch": "@@ -3575,7 +3575,7 @@ check_store (x, pat, data)\n      rtx x, pat ATTRIBUTE_UNUSED;\n      void *data;\n {\n-  struct check_store_data *d = (struct check_store_data *)data;\n+  struct check_store_data *d = (struct check_store_data *) data;\n \n   if ((GET_CODE (x) == MEM) && rtx_equal_p (d->mem_address, XEXP (x, 0)))\n     d->mem_write = 1;\n@@ -3673,7 +3673,7 @@ rtx_equal_for_prefetch_p (x, y)\n \n static HOST_WIDE_INT\n remove_constant_addition (x)\n-   rtx *x;\n+     rtx *x;\n {\n   HOST_WIDE_INT addval = 0;\n   rtx exp = *x;\n@@ -5309,7 +5309,7 @@ check_insn_for_givs (loop, p, not_every_iteration, maybe_multiple)\n \n \t  record_giv (loop, v, p, src_reg, dest_reg, mult_val, add_val,\n \t\t      ext_val, benefit, DEST_REG, not_every_iteration,\n-\t\t      maybe_multiple, (rtx*)0);\n+\t\t      maybe_multiple, (rtx*) 0);\n \n \t}\n     }\n@@ -6437,13 +6437,13 @@ simplify_giv_expr (loop, x, ext_val, benefit)\n \ttem = arg0, arg0 = arg1, arg1 = tem;\n \n       if (GET_CODE (arg1) == PLUS)\n-\t  return\n-\t    simplify_giv_expr (loop,\n-\t\t\t       gen_rtx_PLUS (mode,\n-\t\t\t\t\t     gen_rtx_PLUS (mode, arg0,\n-\t\t\t\t\t\t\t   XEXP (arg1, 0)),\n-\t\t\t\t\t     XEXP (arg1, 1)),\n-\t\t\t       ext_val, benefit);\n+\treturn\n+\t  simplify_giv_expr (loop,\n+\t\t\t     gen_rtx_PLUS (mode,\n+\t\t\t\t\t   gen_rtx_PLUS (mode, arg0,\n+\t\t\t\t\t\t\t XEXP (arg1, 0)),\n+\t\t\t\t\t   XEXP (arg1, 1)),\n+\t\t\t     ext_val, benefit);\n \n       /* Now must have MULT + MULT.  Distribute if same biv, else not giv.  */\n       if (GET_CODE (arg0) != MULT || GET_CODE (arg1) != MULT)\n@@ -9294,7 +9294,7 @@ get_condition_for_loop (loop, x)\n      const struct loop *loop;\n      rtx x;\n {\n-  rtx comparison = get_condition (x, (rtx*)0);\n+  rtx comparison = get_condition (x, (rtx*) 0);\n \n   if (comparison == 0\n       || ! loop_invariant_p (loop, XEXP (comparison, 0))\n@@ -10477,7 +10477,7 @@ loop_giv_dump (v, file, verbose)\n \t  break;\n \tcase TRUNCATE:\n \t  fprintf (file, \" ext tr\");\n-\t      break;\n+\t  break;\n \tdefault:\n \t  abort ();\n \t}"}]}