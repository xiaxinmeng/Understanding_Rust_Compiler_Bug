{"sha": "5be9cdc112d455a0799a2440b1a52e2b0d23da82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlOWNkYzExMmQ0NTVhMDc5OWEyNDQwYjFhNTJlMmIwZDIzZGE4Mg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-17T16:35:15Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-17T16:35:15Z"}, "message": "In libobjc/:\n\n        * objc/hash.h: Moved into objc/deprecated/hash.h; objc/hash.h\n        replaced with a placeholder including the file from the\n        deprecated/ directory.\n        * objc/objc-api.h: Updated includes.\n        * objc/typedstream.h: Updated includes.\n        * objc-private/hash.h: New file (private copy of hash.h).\n        * objc/objc-list.h: Moved into objc/deprecated/objc-list.h;\n        objc/objc-list.h replaced with a placeholder including the file\n        from the deprecated/ directory.\n        * objc-private/objc-list.h: New file (private copy of objc-list.h).\n        * init.c: Include objc-private/hash.h and objc-private/objc-list.h\n        instead of objc/hash.h and objc/objc-list.h.\n        * selector.c: Same change.\n        * class.c: Added include <string.h>, which used to be implicitly included\n        when hash.h was included.\n        * exception.c: Same change.\n        * objects.c: Same change.\n        * sarray.c: Same change.\n        * sendmsg.c: Same change.\n        * Makefile.in (OBJC_DEPRECATED_H): Added hash.h and objc-list.h.\n        (OBJC_H): Removed hash.h and objc-list.h\n\nFrom-SVN: r164373", "tree": {"sha": "7c97648ea44e24d40bac796f8c61ad41803b5b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c97648ea44e24d40bac796f8c61ad41803b5b07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5be9cdc112d455a0799a2440b1a52e2b0d23da82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be9cdc112d455a0799a2440b1a52e2b0d23da82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be9cdc112d455a0799a2440b1a52e2b0d23da82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be9cdc112d455a0799a2440b1a52e2b0d23da82/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0982fd6497be2ef3879b60443b657efad1966835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0982fd6497be2ef3879b60443b657efad1966835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0982fd6497be2ef3879b60443b657efad1966835"}], "stats": {"total": 417, "additions": 408, "deletions": 9}, "files": [{"sha": "ae242d20e592113027904bfd0239edef53948e31", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -1,3 +1,27 @@\n+2010-09-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/hash.h: Moved into objc/deprecated/hash.h; objc/hash.h\n+\treplaced with a placeholder including the file from the\n+\tdeprecated/ directory.\n+\t* objc/objc-api.h: Updated includes.\n+\t* objc/typedstream.h: Updated includes.\n+\t* objc-private/hash.h: New file (private copy of hash.h).\n+\t* objc/objc-list.h: Moved into objc/deprecated/objc-list.h;\n+\tobjc/objc-list.h replaced with a placeholder including the file\n+\tfrom the deprecated/ directory.\n+\t* objc-private/objc-list.h: New file (private copy of objc-list.h).\n+\t* init.c: Include objc-private/hash.h and objc-private/objc-list.h\n+\tinstead of objc/hash.h and objc/objc-list.h.\n+\t* selector.c: Same change.\n+\t* class.c: Added include <string.h>, which used to be implicitly included\n+\twhen hash.h was included.\n+\t* exception.c: Same change.\n+\t* objects.c: Same change.\n+\t* sarray.c: Same change.\n+\t* sendmsg.c: Same change.\n+\t* Makefile.in (OBJC_DEPRECATED_H): Added hash.h and objc-list.h.\n+\t(OBJC_H): Removed hash.h and objc-list.h\n+\n 2010-09-14  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tImplemented objc_sync_enter() and objc_sync_exit(), which are"}, {"sha": "576b29e6a0722410a506391d3a4760080a229a4e", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -117,11 +117,9 @@ OBJC_H = \\\n   Object.h \\\n   Protocol.h \\\n   encoding.h \\\n-  hash.h \\\n   message.h \\\n   objc-api.h \\\n   objc-decls.h \\\n-  objc-list.h \\\n   sarray.h \\\n   thr.h \\\n   \\\n@@ -133,6 +131,8 @@ OBJC_DEPRECATED_H = \\\n   MetaClass.h \\\n   Object.h \\\n   STR.h \\\n+  hash.h \\\n+  objc-list.h \\\n   objc_error.h \\\n   objc_malloc.h \\\n   objc_unexpected_exception.h \\"}, {"sha": "cba9b843355945b017fc6127fe9222bd6248ad48", "filename": "libobjc/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -93,6 +93,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc/objc-api.h\"\n #include \"objc/thr.h\"\n #include \"objc-private/runtime.h\"            /* the kitchen sink */\n+#include <string.h> /* For memset */\n \n /* We use a table which maps a class name to the corresponding class\n  * pointer.  The first part of this file defines this table, and"}, {"sha": "0225d6789a4430f04a0887c4a9a5101fb1668ab0", "filename": "libobjc/exception.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fexception.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fexception.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fexception.c?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -29,6 +29,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc/objc-exception.h\"\n #include \"unwind.h\"\n #include \"unwind-pe.h\"\n+#include <string.h> /* For memcpy */\n \n /* This hook allows libraries to sepecify special actions when an\n    exception is thrown without a handler in place.  This is deprecated"}, {"sha": "deb089d7e16a83b5a7e02e2806f334eb11dc2d89", "filename": "libobjc/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -29,8 +29,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc/objc.h\"\n #include \"objc/objc-api.h\"\n #include \"objc/thr.h\"\n-#include \"objc/hash.h\"\n-#include \"objc/objc-list.h\" \n+#include \"objc-private/hash.h\"\n+#include \"objc-private/objc-list.h\" \n #include \"objc-private/runtime.h\"\n #include \"objc-private/objc-sync.h\" /* For __objc_sync_init() */\n "}, {"sha": "7c57a4d2589726fccf11f01f833b4fdcdd98830d", "filename": "libobjc/objc-private/hash.h", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc-private%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc-private%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fhash.h?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -0,0 +1,214 @@\n+/* Hash tables for Objective C method dispatch.\n+   Copyright (C) 1993, 1995, 1996, 2004, 2009 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* You need to include this file after including objc.h  */\n+\n+#ifndef __hash_INCLUDE_GNU\n+#define __hash_INCLUDE_GNU\n+\n+#include <stddef.h>\n+#include <string.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif /* __cplusplus */\n+\n+/*\n+ * This data structure is used to hold items\n+ *  stored in a hash table.  Each node holds \n+ *  a key/value pair.\n+ *\n+ * Items in the cache are really of type void *.\n+ */\n+typedef struct cache_node\n+{\n+  struct cache_node *next;\t/* Pointer to next entry on the list.\n+\t\t\t\t   NULL indicates end of list. */\n+  const void *key;\t\t/* Key used to locate the value.  Used\n+\t\t\t\t   to locate value when more than one\n+\t\t\t\t   key computes the same hash\n+\t\t\t\t   value. */\n+  void *value;\t\t\t/* Value stored for the key. */\n+} *node_ptr;\n+\n+\n+/*\n+ * This data type is the function that computes a hash code given a key.\n+ * Therefore, the key can be a pointer to anything and the function specific\n+ * to the key type. \n+ *\n+ * Unfortunately there is a mutual data structure reference problem with this\n+ * typedef.  Therefore, to remove compiler warnings the functions passed to\n+ * objc_hash_new will have to be casted to this type. \n+ */\n+typedef unsigned int (*hash_func_type) (void *, const void *);\n+\n+/*\n+ * This data type is the function that compares two hash keys and returns an\n+ * integer greater than, equal to, or less than 0, according as the first\n+ * parameter is lexicographically greater than, equal to, or less than the\n+ * second. \n+ */\n+\n+typedef int (*compare_func_type) (const void *, const void *);\n+\n+\n+/*\n+ * This data structure is the cache.\n+ *\n+ * It must be passed to all of the hashing routines\n+ *   (except for new).\n+ */\n+typedef struct cache\n+{\n+  /* Variables used to implement the hash itself.  */\n+  node_ptr *node_table; /* Pointer to an array of hash nodes.  */\n+  /* Variables used to track the size of the hash table so to determine\n+    when to resize it.  */\n+  unsigned int size; /* Number of buckets allocated for the hash table\n+\t\t\t(number of array entries allocated for\n+\t\t\t\"node_table\").  Must be a power of two.  */\n+  unsigned int used; /* Current number of entries in the hash table.  */\n+  unsigned int mask; /* Precomputed mask.  */\n+\n+  /* Variables used to implement indexing through the hash table.  */\n+\n+  unsigned int last_bucket; /* Tracks which entry in the array where\n+\t\t\t       the last value was returned.  */\n+  /* Function used to compute a hash code given a key. \n+     This function is specified when the hash table is created.  */\n+  hash_func_type    hash_func;\n+  /* Function used to compare two hash keys to see if they are equal.  */\n+  compare_func_type compare_func;\n+} *cache_ptr;\n+\n+\n+/* Two important hash tables.  */\n+extern cache_ptr module_hash_table, class_hash_table;\n+\n+/* Allocate and initialize a hash table.  */ \n+\n+cache_ptr objc_hash_new (unsigned int size,\n+\t\t\t hash_func_type hash_func,\n+\t\t\t compare_func_type compare_func);\n+                       \n+/* Deallocate all of the hash nodes and the cache itself.  */\n+\n+void objc_hash_delete (cache_ptr cache);\n+\n+/* Add the key/value pair to the hash table.  If the\n+   hash table reaches a level of fullness then it will be resized. \n+                                                   \n+   assert if the key is already in the hash.  */\n+\n+void objc_hash_add (cache_ptr *cachep, const void *key, void *value);\n+     \n+/* Remove the key/value pair from the hash table.  \n+   assert if the key isn't in the table.  */\n+\n+void objc_hash_remove (cache_ptr cache, const void *key);\n+\n+/* Used to index through the hash table.  Start with NULL\n+   to get the first entry.\n+                                                  \n+   Successive calls pass the value returned previously.\n+   ** Don't modify the hash during this operation *** \n+                                                  \n+   Cache nodes are returned such that key or value can\n+   be extracted.  */\n+\n+node_ptr objc_hash_next (cache_ptr cache, node_ptr node);\n+\n+/* Used to return a value from a hash table using a given key.  */\n+\n+void *objc_hash_value_for_key (cache_ptr cache, const void *key);\n+\n+/* Used to determine if the given key exists in the hash table */\n+\n+BOOL objc_hash_is_key_in_hash (cache_ptr cache, const void *key);\n+\n+/************************************************\n+\n+        Useful hashing functions.  \n+        \n+        Declared inline for your pleasure.\n+        \n+************************************************/\n+\n+/* Calculate a hash code by performing some \n+   manipulation of the key pointer.  (Use the lowest bits\n+   except for those likely to be 0 due to alignment.)  */\n+\n+static inline unsigned int\n+objc_hash_ptr (cache_ptr cache, const void *key)\n+{\n+  return ((size_t)key / sizeof (void *)) & cache->mask;\n+}\n+\n+\n+/* Calculate a hash code by iterating over a NULL \n+   terminate string.  */\n+static inline unsigned int \n+objc_hash_string (cache_ptr cache, const void *key)\n+{\n+  unsigned int ret = 0;\n+  unsigned int ctr = 0;\n+  const char *ckey = (const char *) key;\n+        \n+  while (*ckey) {\n+    ret ^= *ckey++ << ctr;\n+    ctr = (ctr + 1) % sizeof (void *);\n+  }\n+\n+  return ret & cache->mask;\n+}\n+\n+\n+/* Compare two pointers for equality.  */\n+static inline int \n+objc_compare_ptrs (const void *k1, const void *k2)\n+{\n+  return (k1 == k2);\n+}\n+\n+\n+/* Compare two strings.  */\n+static inline int \n+objc_compare_strings (const void *k1, const void *k2)\n+{\n+  if (k1 == k2)\n+    return 1;\n+  else if (k1 == 0 || k2 == 0)\n+    return 0;\n+  else\n+    return ! strcmp ((const char *) k1, (const char *) k2);\n+}\n+\n+\n+#ifdef __cplusplus\n+}\n+#endif /* __cplusplus */\n+\n+\n+#endif /* not __hash_INCLUDE_GNU */"}, {"sha": "e542bfc0498fe0a25ac9fbb5c5feb8bfbf01d2a9", "filename": "libobjc/objc-private/objc-list.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc-private%2Fobjc-list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc-private%2Fobjc-list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fobjc-list.h?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "previous_filename": "libobjc/objc/objc-list.h"}, {"sha": "52ee8c313457fb63714265fb3f1ddb14f02461d8", "filename": "libobjc/objc/deprecated/hash.h", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc%2Fdeprecated%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc%2Fdeprecated%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fhash.h?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -29,7 +29,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include <stddef.h>\n #include <string.h>\n-#include \"objc.h\"\n \n #ifdef __cplusplus\n extern \"C\" {", "previous_filename": "libobjc/objc/hash.h"}, {"sha": "e542bfc0498fe0a25ac9fbb5c5feb8bfbf01d2a9", "filename": "libobjc/objc/deprecated/objc-list.h", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc%2Fdeprecated%2Fobjc-list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc%2Fdeprecated%2Fobjc-list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fobjc-list.h?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -0,0 +1,155 @@\n+/* Generic single linked list to keep various information \n+   Copyright (C) 1993, 1994, 1996, 2009 Free Software Foundation, Inc.\n+   Contributed by Kresten Krab Thorup.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+#ifndef __GNU_OBJC_LIST_H\n+#define __GNU_OBJC_LIST_H\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif /* __cplusplus */\n+\n+struct objc_list {\n+  void *head;\n+  struct objc_list *tail;\n+};\n+\n+/* Return a cons cell produced from (head . tail) */\n+\n+static inline struct objc_list* \n+list_cons(void* head, struct objc_list* tail)\n+{\n+  struct objc_list* cell;\n+\n+  cell = (struct objc_list*)objc_malloc(sizeof(struct objc_list));\n+  cell->head = head;\n+  cell->tail = tail;\n+  return cell;\n+}\n+\n+/* Return the length of a list, list_length(NULL) returns zero */\n+\n+static inline int\n+list_length(struct objc_list* list)\n+{\n+  int i = 0;\n+  while(list)\n+    {\n+      i += 1;\n+      list = list->tail;\n+    }\n+  return i;\n+}\n+\n+/* Return the Nth element of LIST, where N count from zero.  If N \n+   larger than the list length, NULL is returned  */\n+\n+static inline void*\n+list_nth(int indx, struct objc_list* list)\n+{\n+  while(indx-- != 0)\n+    {\n+      if(list->tail)\n+\tlist = list->tail;\n+      else\n+\treturn 0;\n+    }\n+  return list->head;\n+}\n+\n+/* Remove the element at the head by replacing it by its successor */\n+\n+static inline void\n+list_remove_head(struct objc_list** list)\n+{\n+  if ((*list)->tail)\n+    {\n+      struct objc_list* tail = (*list)->tail; /* fetch next */\n+      *(*list) = *tail;\t\t/* copy next to list head */\n+      objc_free(tail);\t\t\t/* free next */\n+    }\n+  else\t\t\t\t/* only one element in list */\n+    {\n+      objc_free(*list);\n+      (*list) = 0;\n+    }\n+}\n+\n+\n+/* Remove the element with `car' set to ELEMENT */\n+\n+static inline void\n+list_remove_elem(struct objc_list** list, void* elem)\n+{\n+  while (*list) {\n+    if ((*list)->head == elem)\n+      list_remove_head(list);\n+    list = &((*list)->tail);\n+  }\n+}\n+\n+/* Map FUNCTION over all elements in LIST */\n+\n+static inline void\n+list_mapcar(struct objc_list* list, void(*function)(void*))\n+{\n+  while(list)\n+    {\n+      (*function)(list->head);\n+      list = list->tail;\n+    }\n+}\n+\n+/* Return element that has ELEM as car */\n+\n+static inline struct objc_list**\n+list_find(struct objc_list** list, void* elem)\n+{\n+  while(*list)\n+    {\n+    if ((*list)->head == elem)\n+      return list;\n+    list = &((*list)->tail);\n+    }\n+  return NULL;\n+}\n+\n+/* Free list (backwards recursive) */\n+\n+static inline void\n+list_free(struct objc_list* list)\n+{\n+  if(list)\n+    {\n+      list_free(list->tail);\n+      objc_free(list);\n+    }\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif /* __cplusplus */\n+\n+#endif /* not __GNU_OBJC_LIST_H */"}, {"sha": "524515a908d15ad6adc8bf6c37a79b88a9c29e21", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -28,7 +28,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define __objc_api_INCLUDE_GNU\n \n #include \"objc.h\"\n-#include \"hash.h\"\n+#ifndef GNU_LIBOBJC_COMPILING_LIBOBJC_ITSELF\n+# include \"deprecated/hash.h\"\n+#endif\n #include \"thr.h\"\n #include \"objc-decls.h\"\n #include <stdio.h>"}, {"sha": "a39c51b29dc5bd9efb6004a3dae5df9cae0154cc", "filename": "libobjc/objc/typedstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc%2Ftypedstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjc%2Ftypedstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Ftypedstream.h?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -1,4 +1,4 @@\n #include \"objc.h\"\n-#include \"hash.h\"\n+#include \"deprecated/hash.h\"\n #include \"deprecated/typedstream.h\"\n "}, {"sha": "9c237f49ea5a0e01439ef205b0ae84c36a9c49d4", "filename": "libobjc/objects.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjects.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fobjects.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjects.c?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -23,6 +23,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"objc-private/common.h\"\n+#include <string.h> /* For memset */\n #include \"tconfig.h\"         /* include defs of bzero for target */\n #include \"objc/objc.h\"\n #include \"objc/objc-api.h\""}, {"sha": "e919b7a4481e8d974e161248c71128d6ac7bc896", "filename": "libobjc/sarray.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fsarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fsarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsarray.c?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -29,6 +29,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc/thr.h\"\n #include \"objc-private/runtime.h\"\n #include <stdio.h>\n+#include <string.h> /* For memset */\n #include \"assert.h\"\n \n int nbuckets = 0;\t\t\t\t\t/* !T:MUTEX */"}, {"sha": "2eaabfeb3430cd1ae20662248408154ed64543c6", "filename": "libobjc/selector.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fselector.c?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -26,8 +26,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc/objc.h\"\n #include \"objc/objc-api.h\"\n #include \"objc/thr.h\"\n-#include \"objc/hash.h\"\n-#include \"objc/objc-list.h\" \n+#include \"objc-private/hash.h\"\n+#include \"objc-private/objc-list.h\" \n #include \"objc-private/runtime.h\"\n #include \"objc/sarray.h\"\n #include \"objc/encoding.h\""}, {"sha": "15cdae657683c7023ef95f320e2863717d6cb2b4", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be9cdc112d455a0799a2440b1a52e2b0d23da82/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=5be9cdc112d455a0799a2440b1a52e2b0d23da82", "patch": "@@ -40,6 +40,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc/sarray.h\"\n #include \"objc/encoding.h\"\n #include \"runtime-info.h\"\n+#include <string.h> /* For strlen */\n \n /* This is how we hack STRUCT_VALUE to be 1 or 0.   */\n #define gen_rtx(args...) 1"}]}