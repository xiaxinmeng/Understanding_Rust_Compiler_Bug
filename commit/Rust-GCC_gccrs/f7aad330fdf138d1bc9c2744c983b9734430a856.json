{"sha": "f7aad330fdf138d1bc9c2744c983b9734430a856", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdhYWQzMzBmZGYxMzhkMWJjOWMyNzQ0Yzk4M2I5NzM0NDMwYTg1Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-01-12T16:47:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-01-12T16:47:45Z"}, "message": "re PR rtl-optimization/83628 (performance regression when accessing arrays on alpha)\n\n\tPR target/83628\n\t* config/alpha/alpha.md (*saddsi_1): New insn_ans_split pattern.\n\t(*saddl_se_1): Ditto.\n\t(*ssubsi_1): Ditto.\n\t(*saddl_se_1): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/83628\n\t* gcc.target/alpha/pr83628-3.c: New test.\n\nFrom-SVN: r256589", "tree": {"sha": "1fac950c7d44b48bca34d90f830cdd4bf42612a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fac950c7d44b48bca34d90f830cdd4bf42612a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7aad330fdf138d1bc9c2744c983b9734430a856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7aad330fdf138d1bc9c2744c983b9734430a856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7aad330fdf138d1bc9c2744c983b9734430a856", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7aad330fdf138d1bc9c2744c983b9734430a856/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38081436e5f140e391668f265e0b0705983187d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38081436e5f140e391668f265e0b0705983187d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38081436e5f140e391668f265e0b0705983187d4"}], "stats": {"total": 130, "additions": 119, "deletions": 11}, "files": [{"sha": "05cc049abc49a3c0593ac1297d75875ab3863f50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7aad330fdf138d1bc9c2744c983b9734430a856/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7aad330fdf138d1bc9c2744c983b9734430a856/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7aad330fdf138d1bc9c2744c983b9734430a856", "patch": "@@ -1,3 +1,11 @@\n+2018-01-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/83628\n+\t* config/alpha/alpha.md (*saddsi_1): New insn_ans_split pattern.\n+\t(*saddl_se_1): Ditto.\n+\t(*ssubsi_1): Ditto.\n+\t(*saddl_se_1): Ditto.\n+\n 2018-01-12  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-predcom.c (aff_combination_dr_offset): Use wi::to_poly_widest"}, {"sha": "5d82e5a4adf73d08e0a186d63d2419715340f5f4", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7aad330fdf138d1bc9c2744c983b9734430a856/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7aad330fdf138d1bc9c2744c983b9734430a856/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=f7aad330fdf138d1bc9c2744c983b9734430a856", "patch": "@@ -527,17 +527,50 @@\n    s%P2add<modesuffix> %1,%3,%0\n    s%P2sub<modesuffix> %1,%n3,%0\")\n \n+(define_insn_and_split \"*saddsi_1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(plus:SI\n+\t (subreg:SI\n+\t  (ashift:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r,r\")\n+\t\t     (match_operand:DI 2 \"const23_operand\" \"I,I\")) 0)\n+\t (match_operand:SI 3 \"sext_add_operand\" \"rI,O\")))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(plus:SI (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t (match_dup 3)))]\n+  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n+\n (define_insn \"*saddl_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI\n-\t (plus:SI (ashift:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r,r\")\n-\t\t\t     (match_operand:SI 2 \"const23_operand\" \"I,I\"))\n-\t\t  (match_operand:SI 3 \"sext_add_operand\" \"rI,O\"))))]\n+\t (plus:SI\n+\t  (ashift:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r,r\")\n+\t\t     (match_operand:SI 2 \"const23_operand\" \"I,I\"))\n+\t (match_operand:SI 3 \"sext_add_operand\" \"rI,O\"))))]\n   \"\"\n   \"@\n    s%P2addl %1,%3,%0\n    s%P2subl %1,%n3,%0\")\n \n+(define_insn_and_split \"*saddl_se_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(sign_extend:DI\n+\t (plus:SI\n+\t  (subreg:SI\n+\t   (ashift:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r,r\")\n+\t\t      (match_operand:DI 2 \"const23_operand\" \"I,I\")) 0)\n+\t (match_operand:SI 3 \"sext_add_operand\" \"rI,O\"))))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(sign_extend:DI\n+\t (plus:SI (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t  (match_dup 3))))]\n+  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n+\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(sign_extend:DI\n@@ -627,15 +660,48 @@\n   \"\"\n   \"s%P2sub<modesuffix> %1,%3,%0\")\n \n+(define_insn_and_split \"*ssubsi_1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI\n+\t (subreg:SI\n+\t  (ashift:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r\")\n+\t\t     (match_operand:DI 2 \"const23_operand\" \"I\")) 0)\n+\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\")))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(minus:SI (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t  (match_dup 3)))]\n+  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n+\n (define_insn \"*ssubl_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t (minus:SI (ashift:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r\")\n-\t\t\t      (match_operand:SI 2 \"const23_operand\" \"I\"))\n-\t\t   (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\"))))]\n+\t (minus:SI\n+\t  (ashift:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r\")\n+\t\t     (match_operand:SI 2 \"const23_operand\" \"I\"))\n+\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\"))))]\n   \"\"\n   \"s%P2subl %1,%3,%0\")\n \n+(define_insn_and_split \"*ssubl_se_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI\n+\t (minus:SI\n+\t  (subreg:SI\n+\t   (ashift:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r\")\n+\t\t      (match_operand:DI 2 \"const23_operand\" \"I\")) 0)\n+\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\"))))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(sign_extend:DI\n+\t (minus:SI (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t   (match_dup 3))))]\n+  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n+\n (define_insn \"subv<mode>3\"\n   [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n \t(minus:I48MODE (match_operand:I48MODE 1 \"reg_or_0_operand\" \"rJ\")\n@@ -1200,7 +1266,7 @@\n \t (subreg:SI (ashift:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t       (match_operand:DI 2 \"const_int_operand\" \"P\"))\n \t\t    0)))]\n-  \"INTVAL (operands[2]) >= 1 && INTVAL (operands[2]) <= 3\"\n+  \"IN_RANGE (INTVAL (operands[2]), 1, 3)\"\n {\n   if (operands[2] == const1_rtx)\n     return \"addl %r1,%r1,%0\";"}, {"sha": "64e14f283d575874e7e9c93d293c7d695803c477", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7aad330fdf138d1bc9c2744c983b9734430a856/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7aad330fdf138d1bc9c2744c983b9734430a856/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7aad330fdf138d1bc9c2744c983b9734430a856", "patch": "@@ -1,3 +1,8 @@\n+2018-01-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/83628\n+\t* gcc.target/alpha/pr83628-3.c: New test.\n+\n 2018-01-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* lib/target-supports.exp (check_effective_target_avx512f): Also"}, {"sha": "2f02181d28b21df3b24aa4cb955b70d10854767d", "filename": "gcc/testsuite/gcc.target/alpha/pr83628-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7aad330fdf138d1bc9c2744c983b9734430a856/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7aad330fdf138d1bc9c2744c983b9734430a856/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-2.c?ref=f7aad330fdf138d1bc9c2744c983b9734430a856", "patch": "@@ -5,25 +5,25 @@\n int\n s4l (int a, int b)\n {\n-  return a + b * 4;\n+  return a * 4 + b;\n }\n \n int\n s8l (int a, int b)\n {\n-  return a + b * 8;\n+  return a * 8 + b;\n }\n \n long\n s4q (long a, long b)\n {\n-  return a + b * 4;\n+  return a * 4 + b;\n }\n \n long\n s8q (long a, long b)\n {\n-  return a + b * 8;\n+  return a * 8 + b;\n }\n \n /* { dg-final { scan-assembler-not \"\\[ \\t\\]add\\[ql\\]\" } } */"}, {"sha": "5bec89f8047d90b5fd83f72d398409e9636b48db", "filename": "gcc/testsuite/gcc.target/alpha/pr83628-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7aad330fdf138d1bc9c2744c983b9734430a856/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7aad330fdf138d1bc9c2744c983b9734430a856/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-3.c?ref=f7aad330fdf138d1bc9c2744c983b9734430a856", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/83628 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+s4l (int a, int b)\n+{\n+  return a * 4 - b;\n+}\n+\n+int\n+s8l (int a, int b)\n+{\n+  return a * 8 - b;\n+}\n+\n+long\n+s4q (long a, long b)\n+{\n+  return a * 4 - b;\n+}\n+\n+long\n+s8q (long a, long b)\n+{\n+  return a * 8 - b;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]sub\\[ql\\]\" } } */"}]}