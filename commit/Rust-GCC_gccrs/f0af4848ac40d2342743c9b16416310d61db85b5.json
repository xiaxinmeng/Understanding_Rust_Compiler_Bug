{"sha": "f0af4848ac40d2342743c9b16416310d61db85b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBhZjQ4NDhhYzQwZDIzNDI3NDNjOWIxNjQxNjMxMGQ2MWRiODViNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-15T09:09:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-15T09:09:16Z"}, "message": "re PR tree-optimization/92039 (Spurious -Warray-bounds warnings building 32-bit glibc)\n\n2019-11-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92039\n\tPR tree-optimization/91975\n\t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Revert\n\tprevious change, treat invariants consistently as non-constant.\n\t(tree_estimate_loop_size): Ternary ops with just the first op\n\tconstant are not optimized away.\n\n\t* gcc.dg/tree-ssa/cunroll-2.c: Revert to state previous to\n\tunroller adjustment.\n\t* g++.dg/tree-ssa/ivopts-3.C: Likewise.\n\nFrom-SVN: r278281", "tree": {"sha": "b64ffc105c8bdfb89f1ac8de221eae89109d1df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b64ffc105c8bdfb89f1ac8de221eae89109d1df0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0af4848ac40d2342743c9b16416310d61db85b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0af4848ac40d2342743c9b16416310d61db85b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0af4848ac40d2342743c9b16416310d61db85b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0af4848ac40d2342743c9b16416310d61db85b5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0227ffa98e122d5716d508c435cb8323cd93bfef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0227ffa98e122d5716d508c435cb8323cd93bfef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0227ffa98e122d5716d508c435cb8323cd93bfef"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "ca1c5ac9744b6c5243b11585e1c2eff58de76d0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0af4848ac40d2342743c9b16416310d61db85b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0af4848ac40d2342743c9b16416310d61db85b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0af4848ac40d2342743c9b16416310d61db85b5", "patch": "@@ -1,3 +1,12 @@\n+2019-11-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92039\n+\tPR tree-optimization/91975\n+\t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Revert\n+\tprevious change, treat invariants consistently as non-constant.\n+\t(tree_estimate_loop_size): Ternary ops with just the first op\n+\tconstant are not optimized away.\n+\n 2019-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimplify.c (gimplify_call_expr): Don't call"}, {"sha": "e537e5d6cadd5227e65da8694663e638598bb98f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0af4848ac40d2342743c9b16416310d61db85b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0af4848ac40d2342743c9b16416310d61db85b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0af4848ac40d2342743c9b16416310d61db85b5", "patch": "@@ -1,3 +1,11 @@\n+2019-11-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92039\n+\tPR tree-optimization/91975\n+\t* gcc.dg/tree-ssa/cunroll-2.c: Revert to state previous to\n+\tunroller adjustment.\n+\t* g++.dg/tree-ssa/ivopts-3.C: Likewise.\n+\n 2019-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/gomp/declare-variant-13.c: New test."}, {"sha": "cbb6c850baabca68d6c8d494c5b894110950f8b8", "filename": "gcc/testsuite/g++.dg/tree-ssa/ivopts-3.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0af4848ac40d2342743c9b16416310d61db85b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0af4848ac40d2342743c9b16416310d61db85b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-3.C?ref=f0af4848ac40d2342743c9b16416310d61db85b5", "patch": "@@ -70,8 +70,6 @@ int main ( int , char** ) {\n     return 0;\n }\n \n-// Verify that on x86_64 and i?86 we unroll the innsermost loop and\n-// use three IVs for the then innermost loop\n+// Verify that on x86_64 and i?86 we use a single IV for the innermost loop\n \n-// { dg-final { scan-tree-dump \"Selected IV set for loop \\[0-9\\]* at \\[^ \\]*:63, 127 avg niters, 3 IVs\" \"ivopts\" { target x86_64-*-* i?86-*-* } } }\n-// { dg-final { scan-tree-dump-not \"Selected IV set for loop \\[0-9\\]* at \\[^ \\]*:64\" \"ivopts\" { target x86_64-*-* i?86-*-* } } }\n+// { dg-final { scan-tree-dump \"Selected IV set for loop \\[0-9\\]* at \\[^ \\]*:64, 3 avg niters, 1 IVs\" \"ivopts\" { target x86_64-*-* i?86-*-* } } }"}, {"sha": "b1d1c7d3d852c00ca269ab9fe49f717bf42a562c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0af4848ac40d2342743c9b16416310d61db85b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0af4848ac40d2342743c9b16416310d61db85b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-2.c?ref=f0af4848ac40d2342743c9b16416310d61db85b5", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdump-tree-cunrolli-details\" } */\n+/* { dg-options \"-O3 -fdump-tree-cunroll-details\" } */\n int a[2];\n int test2 (void);\n void\n@@ -14,4 +14,4 @@ test(int c)\n     }\n }\n /* We are not able to get rid of the final conditional because the loop has two exits.  */\n-/* { dg-final { scan-tree-dump \"loop with 2 iterations completely unrolled\" \"cunrolli\"} } */\n+/* { dg-final { scan-tree-dump \"loop with 1 iterations completely unrolled\" \"cunroll\"} } */"}, {"sha": "63c2c6bdb083f340c0da52dd53db7acab9831d04", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0af4848ac40d2342743c9b16416310d61db85b5/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0af4848ac40d2342743c9b16416310d61db85b5/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=f0af4848ac40d2342743c9b16416310d61db85b5", "patch": "@@ -163,7 +163,7 @@ struct loop_size\n static bool\n constant_after_peeling (tree op, gimple *stmt, class loop *loop)\n {\n-  if (is_gimple_min_invariant (op))\n+  if (CONSTANT_CLASS_P (op))\n     return true;\n \n   /* We can still fold accesses to constant arrays when index is known.  */\n@@ -195,8 +195,9 @@ constant_after_peeling (tree op, gimple *stmt, class loop *loop)\n   /* Induction variables are constants when defined in loop.  */\n   if (loop_containing_stmt (stmt) != loop)\n     return false;\n-  tree ev = instantiate_parameters (loop, analyze_scalar_evolution (loop, op));\n-  if (chrec_contains_undetermined (ev))\n+  tree ev = analyze_scalar_evolution (loop, op);\n+  if (chrec_contains_undetermined (ev)\n+      || chrec_contains_symbols (ev))\n     return false;\n   return true;\n }\n@@ -293,7 +294,8 @@ tree_estimate_loop_size (class loop *loop, edge exit, edge edge_to_cancel,\n \t\t\t\t\t\t  stmt, loop)\n \t\t       && (gimple_assign_rhs_class (stmt) != GIMPLE_BINARY_RHS\n \t\t\t   || constant_after_peeling (gimple_assign_rhs2 (stmt),\n-\t\t\t\t\t\t      stmt, loop)))\n+\t\t\t\t\t\t      stmt, loop))\n+\t\t       && gimple_assign_rhs_class (stmt) != GIMPLE_TERNARY_RHS)\n \t\t{\n \t\t  size->constant_iv = true;\n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))"}]}