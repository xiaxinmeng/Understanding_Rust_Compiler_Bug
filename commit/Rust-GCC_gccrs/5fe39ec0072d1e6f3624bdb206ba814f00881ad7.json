{"sha": "5fe39ec0072d1e6f3624bdb206ba814f00881ad7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZlMzllYzAwNzJkMWU2ZjM2MjRiZGIyMDZiYTgxNGYwMDg4MWFkNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-09-28T19:47:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-09-28T19:47:04Z"}, "message": "gimple-ssa-sprintf.c: Fix comment formatting.\n\n\t* gimple-ssa-sprintf.c: Fix comment formatting.\n\t(format_integer): Use is_gimple_assign.\n\t(pass_sprintf_length::handle_gimple_call): Use gimple_call_builtin_p\n\tand gimple_call_fndecl.  Reorder case BUILT_IN_SPRINTF_CHK.  Fix up\n\tBUILT_IN_SNPRINTF_CHK comment.  Replace \"to to\" with \"to\" in comment.\n\t(pass_sprintf_length::execute): Use is_gimple_call.\n\nFrom-SVN: r240594", "tree": {"sha": "d6913483a0c7ebe50edf29eecb62327f1c131285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6913483a0c7ebe50edf29eecb62327f1c131285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fe39ec0072d1e6f3624bdb206ba814f00881ad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe39ec0072d1e6f3624bdb206ba814f00881ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fe39ec0072d1e6f3624bdb206ba814f00881ad7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe39ec0072d1e6f3624bdb206ba814f00881ad7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c1729748b36746e3631de5d8cf8de3e3636fdc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1729748b36746e3631de5d8cf8de3e3636fdc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c1729748b36746e3631de5d8cf8de3e3636fdc3"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "5de30f8748f20c45a670bd179bffc69c2f0537cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe39ec0072d1e6f3624bdb206ba814f00881ad7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe39ec0072d1e6f3624bdb206ba814f00881ad7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fe39ec0072d1e6f3624bdb206ba814f00881ad7", "patch": "@@ -1,3 +1,12 @@\n+2016-09-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple-ssa-sprintf.c: Fix comment formatting.\n+\t(format_integer): Use is_gimple_assign.\n+\t(pass_sprintf_length::handle_gimple_call): Use gimple_call_builtin_p\n+\tand gimple_call_fndecl.  Reorder case BUILT_IN_SPRINTF_CHK.  Fix up\n+\tBUILT_IN_SNPRINTF_CHK comment.  Replace \"to to\" with \"to\" in comment.\n+\t(pass_sprintf_length::execute): Use is_gimple_call.\n+\n 2016-09-28  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gimple-fold.c (gimple_fold_builtin): After failing to fold"}, {"sha": "0b1e478e9ea74b3153861752a7f37980a18601d5", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe39ec0072d1e6f3624bdb206ba814f00881ad7/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe39ec0072d1e6f3624bdb206ba814f00881ad7/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=5fe39ec0072d1e6f3624bdb206ba814f00881ad7", "patch": "@@ -37,7 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n \n    The pass handles all forms standard sprintf format directives,\n    including character, integer, floating point, pointer, and strings,\n-   with  the standard C flags, widths, and precisions.  For integers\n+   with the standard C flags, widths, and precisions.  For integers\n    and strings it computes the length of output itself.  For floating\n    point it uses MPFR to fornmat known constants with up and down\n    rounding and uses the resulting range of output lengths.  For\n@@ -464,7 +464,7 @@ struct conversion_spec\n \n   /* Format conversion function that given a conversion specification\n      and an argument returns the formatting result.  */\n-  fmtresult  (*fmtfunc) (const conversion_spec &, tree);\n+  fmtresult (*fmtfunc) (const conversion_spec &, tree);\n \n   /* Return True when a the format flag CHR has been used.  */\n   bool get_flag (char chr) const\n@@ -1041,10 +1041,10 @@ format_integer (const conversion_spec &spec, tree arg)\n \t{\n \t  /* The argument here may be the result of promoting the actual\n \t     argument to int.  Try to determine the type of the actual\n-\t     argument before promotion and  narrow down its range that\n+\t     argument before promotion and narrow down its range that\n \t     way.  */\n \t  gimple *def = SSA_NAME_DEF_STMT (arg);\n-\t  if (gimple_code (def) == GIMPLE_ASSIGN)\n+\t  if (is_gimple_assign (def))\n \t    {\n \t      tree_code code = gimple_assign_rhs_code (def);\n \t      if (code == NOP_EXPR)\n@@ -2480,18 +2480,10 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator gsi)\n   call_info info = call_info ();\n \n   info.callstmt = gsi_stmt (gsi);\n-  info.func = gimple_call_fn (info.callstmt);\n-  if (!info.func)\n-    return;\n-\n-  if (TREE_CODE (info.func) == ADDR_EXPR)\n-    info.func = TREE_OPERAND (info.func, 0);\n-\n-  if (TREE_CODE (info.func) != FUNCTION_DECL\n-      || !DECL_BUILT_IN(info.func)\n-      || DECL_BUILT_IN_CLASS (info.func) != BUILT_IN_NORMAL)\n+  if (!gimple_call_builtin_p (info.callstmt, BUILT_IN_NORMAL))\n     return;\n \n+  info.func = gimple_call_fndecl (info.callstmt);\n   info.fncode = DECL_FUNCTION_CODE (info.func);\n \n   /* The size of the destination as in snprintf(dest, size, ...).  */\n@@ -2518,6 +2510,14 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator gsi)\n       info.argidx = 2;\n       break;\n \n+    case BUILT_IN_SPRINTF_CHK:\n+      // Signature:\n+      //   __builtin___sprintf_chk (dst, ost, objsize, format, ...)\n+      idx_objsize = 2;\n+      idx_format = 3;\n+      info.argidx = 4;\n+      break;\n+\n     case BUILT_IN_SNPRINTF:\n       // Signature:\n       //   __builtin_snprintf (dst, size, format, ...)\n@@ -2529,22 +2529,14 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator gsi)\n \n     case BUILT_IN_SNPRINTF_CHK:\n       // Signature:\n-      //   __builtin___sprintf_chk (dst, size, ost, objsize, format, ...)\n+      //   __builtin___snprintf_chk (dst, size, ost, objsize, format, ...)\n       idx_dstsize = 1;\n       idx_objsize = 3;\n       idx_format = 4;\n       info.argidx = 5;\n       info.bounded = true;\n       break;\n \n-    case BUILT_IN_SPRINTF_CHK:\n-      // Signature:\n-      //   __builtin___sprintf_chk (dst, ost, objsize, format, ...)\n-      idx_objsize = 2;\n-      idx_format = 3;\n-      info.argidx = 4;\n-      break;\n-\n     case BUILT_IN_VSNPRINTF:\n       // Signature:\n       //   __builtin_vsprintf (dst, size, format, va)\n@@ -2587,7 +2579,7 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator gsi)\n \n   if (idx_dstsize == HOST_WIDE_INT_M1U)\n     {\n-      // For non-bounded functions like sprintf, to to determine\n+      // For non-bounded functions like sprintf, to determine\n       // the size of the destination from the object or pointer\n       // passed to it as the first argument.\n       dstsize = get_destination_size (gimple_call_arg (info.callstmt, 0));\n@@ -2698,7 +2690,7 @@ pass_sprintf_length::execute (function *fun)\n \t  /* Iterate over statements, looking for function calls.  */\n \t  gimple *stmt = gsi_stmt (si);\n \n-\t  if (gimple_code (stmt) == GIMPLE_CALL)\n+\t  if (is_gimple_call (stmt))\n \t    handle_gimple_call (si);\n \t}\n     }"}]}