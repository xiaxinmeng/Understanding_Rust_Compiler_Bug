{"sha": "64c919306327433c4c07e55cb4b106800d3ad0b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjOTE5MzA2MzI3NDMzYzRjMDdlNTVjYjRiMTA2ODAwZDNhZDBiNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2007-01-21T22:32:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-01-21T22:32:39Z"}, "message": "re PR rtl-optimization/29329 (internal consistency failure)\n\n\tPR rtl-optimization/29329\n\t* combine.c (replaced_rhs_insn): Rename to i2mod.\n\t(replaced_rhs_value): Rename to i2mod_new_rhs.\n\t(i2mod_old_rhs): New global variable.\n\t(combine_instructions): Adjust for above change.  Save a copy of\n\tthe old RHS into i2mod_old_rhs when the contents of a REG_EQUAL\n\tnote are substituted in the second instruction.\n\t(distribute_notes) <REG_DEAD>: Adjust for above change.  Do not\n\tditch the note if it pertains to the second eliminated register\n\tand this register is mentioned in i2mod_old_rhs.\n\n\tRevert:\n\t2006-09-12  Eric Botcazou  <ebotcazou@libertysurf.fr>\n\n\t* combine.c (distribute_notes) <REG_DEAD>: Do not consider SETs past\n\tthe insn to which the note was originally attached.\n\nFrom-SVN: r121037", "tree": {"sha": "a02be706edc515e25b0af6853ce327ff8283cda9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a02be706edc515e25b0af6853ce327ff8283cda9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64c919306327433c4c07e55cb4b106800d3ad0b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c919306327433c4c07e55cb4b106800d3ad0b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c919306327433c4c07e55cb4b106800d3ad0b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c919306327433c4c07e55cb4b106800d3ad0b7/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f64acab6abe8755d8939fbcebc305c2af10692a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64acab6abe8755d8939fbcebc305c2af10692a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64acab6abe8755d8939fbcebc305c2af10692a1"}], "stats": {"total": 93, "additions": 71, "deletions": 22}, "files": [{"sha": "da8bbf58caface0995a4bc39ab4166f4e54287e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c919306327433c4c07e55cb4b106800d3ad0b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c919306327433c4c07e55cb4b106800d3ad0b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64c919306327433c4c07e55cb4b106800d3ad0b7", "patch": "@@ -1,3 +1,22 @@\n+2007-01-21  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR rtl-optimization/29329\n+\t* combine.c (replaced_rhs_insn): Rename to i2mod.\n+\t(replaced_rhs_value): Rename to i2mod_new_rhs.\n+\t(i2mod_old_rhs): New global variable.\n+\t(combine_instructions): Adjust for above change.  Save a copy of\n+\tthe old RHS into i2mod_old_rhs when the contents of a REG_EQUAL\n+\tnote are substituted in the second instruction.\n+\t(distribute_notes) <REG_DEAD>: Adjust for above change.  Do not\n+\tditch the note if it pertains to the second eliminated register\n+\tand this register is mentioned in i2mod_old_rhs.\n+\n+\tRevert:\n+\t2006-09-12  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* combine.c (distribute_notes) <REG_DEAD>: Do not consider SETs past\n+\tthe insn to which the note was originally attached.\n+\n 2007-01-21  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (inlining_mode): Comment, move up."}, {"sha": "aa1e2ce203406d1d4f78f4295126a886436531d6", "filename": "gcc/combine.c", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c919306327433c4c07e55cb4b106800d3ad0b7/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c919306327433c4c07e55cb4b106800d3ad0b7/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=64c919306327433c4c07e55cb4b106800d3ad0b7", "patch": "@@ -123,16 +123,22 @@ static int combine_successes;\n \n static int total_attempts, total_merges, total_extras, total_successes;\n \n-/* Sometimes combine tries to replace the right hand side of an insn\n-   with the value of a REG_EQUAL note.  This is the insn that has been\n-   so modified, or null if none.  */\n+/* combine_instructions may try to replace the right hand side of the\n+   second instruction with the value of an associated REG_EQUAL note\n+   before throwing it at try_combine.  That is problematic when there\n+   is a REG_DEAD note for a register used in the old right hand side\n+   and can cause distribute_notes to do wrong things.  This is the\n+   second instruction if it has been so modified, null otherwise.  */\n \n-static rtx replaced_rhs_insn;\n+static rtx i2mod;\n \n-/* When REPLACED_RHS_INSN is nonnull, this is a copy of the new right\n-   hand side.  */\n+/* When I2MOD is nonnull, this is a copy of the old right hand side.  */\n \n-static rtx replaced_rhs_value;\n+static rtx i2mod_old_rhs;\n+\n+/* When I2MOD is nonnull, this is a copy of the new right hand side.  */\n+\n+static rtx i2mod_new_rhs;\n \f\n /* Vector mapping INSN_UIDs to cuids.\n    The cuids are like uids but increase monotonically always.\n@@ -932,11 +938,12 @@ combine_instructions (rtx f, unsigned int nregs)\n \t\t\t be deleted or recognized by try_combine.  */\n \t\t      rtx orig = SET_SRC (set);\n \t\t      SET_SRC (set) = note;\n-\t\t      replaced_rhs_insn = temp;\n-\t\t      replaced_rhs_value = copy_rtx (note);\n-\t\t      next = try_combine (insn, temp, NULL_RTX,\n+\t\t      i2mod = temp;\n+\t\t      i2mod_old_rhs = copy_rtx (orig);\n+\t\t      i2mod_new_rhs = copy_rtx (note);\n+\t\t      next = try_combine (insn, i2mod, NULL_RTX,\n \t\t\t\t\t  &new_direct_jump_p);\n-\t\t      replaced_rhs_insn = NULL;\n+\t\t      i2mod = NULL_RTX;\n \t\t      if (next)\n \t\t\tgoto retry;\n \t\t      SET_SRC (set) = orig;\n@@ -12140,8 +12147,8 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2, rtx elim_i2,\n \t     use of A and put the death note there.  */\n \n \t  if (from_insn\n-\t      && from_insn == replaced_rhs_insn\n-\t      && !reg_overlap_mentioned_p (XEXP (note, 0), replaced_rhs_value))\n+\t      && from_insn == i2mod\n+\t      && !reg_overlap_mentioned_p (XEXP (note, 0), i2mod_new_rhs))\n \t    tem = from_insn;\n \t  else\n \t    {\n@@ -12154,7 +12161,10 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2, rtx elim_i2,\n \t      else if (i2 != 0 && next_nonnote_insn (i2) == i3\n \t\t       && reg_referenced_p (XEXP (note, 0), PATTERN (i2)))\n \t\tplace = i2;\n-\t      else if (rtx_equal_p (XEXP (note, 0), elim_i2)\n+\t      else if ((rtx_equal_p (XEXP (note, 0), elim_i2)\n+\t\t\t&& !(i2mod\n+\t\t\t     && reg_overlap_mentioned_p (XEXP (note, 0),\n+\t\t\t\t\t\t\t i2mod_old_rhs)))\n \t\t       || rtx_equal_p (XEXP (note, 0), elim_i1))\n \t\tbreak;\n \t      tem = i3;\n@@ -12173,14 +12183,12 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2, rtx elim_i2,\n \t\t      continue;\n \t\t    }\n \n-\t\t  /* If TEM is a (reaching) definition of the use to which the\n-\t\t     note was attached, see if that is all TEM is doing.  If so,\n-\t\t     delete TEM.  Otherwise, make this into a REG_UNUSED note\n-\t\t     instead.  Don't delete sets to global register vars.  */\n-\t\t  if ((!from_insn\n-\t\t       || INSN_CUID (tem) < INSN_CUID (from_insn))\n-\t\t      && (REGNO (XEXP (note, 0)) >= FIRST_PSEUDO_REGISTER\n-\t\t\t  || !global_regs[REGNO (XEXP (note, 0))])\n+\t\t  /* If the register is being set at TEM, see if that is all\n+\t\t     TEM is doing.  If so, delete TEM.  Otherwise, make this\n+\t\t     into a REG_UNUSED note instead. Don't delete sets to\n+\t\t     global register vars.  */\n+\t\t  if ((REGNO (XEXP (note, 0)) >= FIRST_PSEUDO_REGISTER\n+\t\t       || !global_regs[REGNO (XEXP (note, 0))])\n \t\t      && reg_set_p (XEXP (note, 0), PATTERN (tem)))\n \t\t    {\n \t\t      rtx set = single_set (tem);"}, {"sha": "ff69cda17510ece97178859b51a6253c6e7b96c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c919306327433c4c07e55cb4b106800d3ad0b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c919306327433c4c07e55cb4b106800d3ad0b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64c919306327433c4c07e55cb4b106800d3ad0b7", "patch": "@@ -1,3 +1,7 @@\n+2007-01-21  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.c-torture/compile/20070121.c: New test.\n+\n 2007-01-21  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/30525"}, {"sha": "88af8bf628659f415a66e551dd97851e2f0d54b8", "filename": "gcc/testsuite/gcc.c-torture/compile/20070121.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c919306327433c4c07e55cb4b106800d3ad0b7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20070121.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c919306327433c4c07e55cb4b106800d3ad0b7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20070121.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20070121.c?ref=64c919306327433c4c07e55cb4b106800d3ad0b7", "patch": "@@ -0,0 +1,18 @@\n+/* PR rtl-optimization/29329 */\n+/* Origin: Debian GCC Maintainers <debian-gcc@lists.debian.org> */\n+/* Testcase by: Andrew Pinski <pinskia@gmail.com> */\n+\n+struct node234_Tag\n+{\n+  int t1;\n+  int kids[4];\n+  void *elems[3];\n+};\n+\n+void *add234_internal(struct node234_Tag *n, int ei)\n+{\n+  int j;\n+  for (j = ei; j < 2 && n->elems[j+1];)\n+    j++;\n+  n->kids[j+1] = 0;\n+}"}]}