{"sha": "89f5e978044c3086e99418ea6855bd1faacba2a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlmNWU5NzgwNDRjMzA4NmU5OTQxOGVhNjg1NWJkMWZhYWNiYTJhMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-01-04T08:58:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-01-04T08:58:02Z"}, "message": "re PR ada/47131 (internal error for ACATS C34011B on SJLJ targets)\n\n\tPR ada/47131\n\t* gcc-interface/trans.c (Identifier_to_gnu): In SJLJ mode, do not make\n\tvariables that are referenced in exception handlers volatile.\n\nFrom-SVN: r168454", "tree": {"sha": "b7b6750db205f4619c31198d6d97ed314e4d78bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7b6750db205f4619c31198d6d97ed314e4d78bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89f5e978044c3086e99418ea6855bd1faacba2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f5e978044c3086e99418ea6855bd1faacba2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f5e978044c3086e99418ea6855bd1faacba2a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f5e978044c3086e99418ea6855bd1faacba2a0/comments", "author": null, "committer": null, "parents": [{"sha": "2b18eb327ce8bbe24e948918c8bf04e48e3cadd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b18eb327ce8bbe24e948918c8bf04e48e3cadd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b18eb327ce8bbe24e948918c8bf04e48e3cadd8"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "8920d8e8e5233de07b02b12e23ea17629d3a8824", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f5e978044c3086e99418ea6855bd1faacba2a0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f5e978044c3086e99418ea6855bd1faacba2a0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=89f5e978044c3086e99418ea6855bd1faacba2a0", "patch": "@@ -1,3 +1,10 @@\n+2011-01-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/47131\n+\t* gcc-interface/trans.c (Identifier_to_gnu): In SJLJ mode, do not make\n+\tvariables that are referenced in exception handlers volatile.\n+\n+\n \f\n Copyright (C) 2011 Free Software Foundation, Inc.\n "}, {"sha": "673c4f833cf3d27ea7166a50540b941696289505", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f5e978044c3086e99418ea6855bd1faacba2a0/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f5e978044c3086e99418ea6855bd1faacba2a0/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=89f5e978044c3086e99418ea6855bd1faacba2a0", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2010, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2011, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -980,27 +980,6 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n   else\n     gnu_result = gnat_to_gnu_entity (gnat_temp, NULL_TREE, 0);\n \n-  /* If we are in an exception handler, force this variable into memory to\n-     ensure optimization does not remove stores that appear redundant but are\n-     actually needed in case an exception occurs.\n-\n-     ??? Note that we need not do this if the variable is declared within the\n-     handler, only if it is referenced in the handler and declared in an\n-     enclosing block, but we have no way of testing that right now.\n-\n-     ??? We used to essentially set the TREE_ADDRESSABLE flag on the variable\n-     here, but it can now be removed by the Tree aliasing machinery if the\n-     address of the variable is never taken.  All we can do is to make the\n-     variable volatile, which might incur the generation of temporaries just\n-     to access the memory in some circumstances.  This can be avoided for\n-     variables of non-constant size because they are automatically allocated\n-     to memory.  There might be no way of allocating a proper temporary for\n-     them in any case.  We only do this for SJLJ though.  */\n-  if (VEC_last (tree, gnu_except_ptr_stack)\n-      && TREE_CODE (gnu_result) == VAR_DECL\n-      && TREE_CODE (DECL_SIZE_UNIT (gnu_result)) == INTEGER_CST)\n-    TREE_THIS_VOLATILE (gnu_result) = TREE_SIDE_EFFECTS (gnu_result) = 1;\n-\n   /* Some objects (such as parameters passed by reference, globals of\n      variable size, and renamed objects) actually represent the address\n      of the object.  In that case, we must do the dereference.  Likewise,"}]}