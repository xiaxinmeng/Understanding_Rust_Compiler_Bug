{"sha": "359815ad136ee6ad142fb54470ce79609e43ff5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU5ODE1YWQxMzZlZTZhZDE0MmZiNTQ0NzBjZTc5NjA5ZTQzZmY1ZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-08-10T05:19:25Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-08-10T05:19:25Z"}, "message": "This patch fixes PR96102. See the explanatory comment in the testcase.\n\n2020-08-10  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/96102\n\t* resolve.c (check_host_association): Replace the gcc_assert\n\twith an error for internal procedures.\n\ngcc/testsuite/\n\tPR fortran/96102\n\t* gfortran.dg/pr96102.f90: New test.", "tree": {"sha": "2902c1a0fa00f028f60b4c2b34bfcd79cd52f2c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2902c1a0fa00f028f60b4c2b34bfcd79cd52f2c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/359815ad136ee6ad142fb54470ce79609e43ff5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359815ad136ee6ad142fb54470ce79609e43ff5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/359815ad136ee6ad142fb54470ce79609e43ff5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359815ad136ee6ad142fb54470ce79609e43ff5d/comments", "author": null, "committer": null, "parents": [{"sha": "99e4891ed552aca4ca147671701edd0b31015f66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e4891ed552aca4ca147671701edd0b31015f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e4891ed552aca4ca147671701edd0b31015f66"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "6caddcf4ef02c5e826f7ede4984921d848173dd1", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359815ad136ee6ad142fb54470ce79609e43ff5d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359815ad136ee6ad142fb54470ce79609e43ff5d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=359815ad136ee6ad142fb54470ce79609e43ff5d", "patch": "@@ -5993,6 +5993,16 @@ check_host_association (gfc_expr *e)\n \t\tif (ref->type == REF_ARRAY && ref->next == NULL)\n \t\t  break;\n \n+\t      if ((ref == NULL || ref->type != REF_ARRAY)\n+\t\t  && sym->attr.proc == PROC_INTERNAL)\n+\t\t{\n+\t\t  gfc_error (\"%qs at %L is host associated at %L into \"\n+\t\t\t     \"a contained procedure with an internal \"\n+\t\t\t     \"procedure of the same name\", sym->name,\n+\t\t\t      &old_sym->declared_at, &e->where);\n+\t\t  return false;\n+\t\t}\n+\n \t      gcc_assert (ref->type == REF_ARRAY);\n \n \t      /* Grab the start expressions from the array ref and"}, {"sha": "0cf52226d852f57a7005067070f9433cf4cb0b6c", "filename": "gcc/testsuite/gfortran.dg/pr96102.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359815ad136ee6ad142fb54470ce79609e43ff5d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96102.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359815ad136ee6ad142fb54470ce79609e43ff5d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96102.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96102.f90?ref=359815ad136ee6ad142fb54470ce79609e43ff5d", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR96102 in which the two lines with errors previously\n+! caused a segfault.\n+!\n+! Contributed by Gerhardt Steinmetz  <gscfq@t-online.de>\n+!\n+!\n+module m\n+   type mytype\n+     integer :: i\n+   end type\n+   type(mytype) :: d = mytype (42) ! { dg-error \"is host associated\" }\n+   integer :: n = 2                ! { dg-error \"is host associated\" }\n+contains\n+   subroutine s\n+      if ( n /= 0 ) stop 1    ! { dg-error \"internal procedure of the same name\" }\n+      if ( d%i /= 0 ) stop 2  ! { dg-error \"internal procedure of the same name\" }\n+   contains\n+      integer function n()\n+         n = 0\n+      end\n+      type(mytype) function d()\n+         d = mytype (0)\n+      end\n+   end\n+end"}]}