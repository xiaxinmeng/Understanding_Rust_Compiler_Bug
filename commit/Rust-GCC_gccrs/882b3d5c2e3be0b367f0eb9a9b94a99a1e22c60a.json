{"sha": "882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgyYjNkNWMyZTNiZTBiMzY3ZjBlYjlhOWI5NGE5OWExZTIyYzYwYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-05-20T22:35:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-05-20T22:35:49Z"}, "message": "[multiple changes]\n\n2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/41792\n\t* include/tr1_impl/array: Use std::__addressof.\n\t* include/std/functional (reference_wrapper): Likewise.\n\t* include/ext/throw_allocator.h: Likewise.\n\t* include/ext/pool_allocator.h: Likewise.\n\t* include/ext/bitmap_allocator.h: Likewise.\n\t* include/ext/new_allocator.h: Likewise.\n\t* include/ext/malloc_allocator.h: Likewise.\n\t* include/ext/array_allocator.h: Likewise.\n\t* include/ext/mt_allocator.h: Likewise.\n\t* include/ext/extptr_allocator.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/hashtable_policy.h: Likewise.\n\t* include/bits/forward_list.h: Likewise.\n\t* include/bits/stl_uninitialized.h: Likewise.\n\t* include/bits/list.tcc: Likewise.\n\t* include/bits/stl_construct.h: Likewise.\n\t* include/bits/stl_tree.h: Likewise.\n\t* testsuite/20_util/reference_wrapper/41792.cc: New.\n\t* testsuite/23_containers/unordered_map/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/multimap/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/set/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/multiset/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/map/requirements/\n\texplicit_instantiation/4.cc: Likewise.\n\t* testsuite/23_containers/array/requirements/\n\texplicit_instantiation/3.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/\n\tdr438/assign_neg.cc: Adjust dg-error line numbers.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\n2010-05-20  Peter Dimov  <pdimov@pdimov.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/move.h (__addressof, addressof): Add.\n\t* testsuite/util/testsuite_api.h (struct OverloadedAddress): Add.\n\t* testsuite/20_util/addressof/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/addressof/1.cc: Likewise.\n\nFrom-SVN: r159643", "tree": {"sha": "7b0162680322f924a64af3fdc20b66867b7de427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b0162680322f924a64af3fdc20b66867b7de427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/comments", "author": null, "committer": null, "parents": [{"sha": "9f946bc11ce814f013c56503861a679c554363f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f946bc11ce814f013c56503861a679c554363f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f946bc11ce814f013c56503861a679c554363f2"}], "stats": {"total": 802, "additions": 729, "deletions": 73}, "files": [{"sha": "fb99088a2b44665300fa7bd7496b689d284fcfde", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,3 +1,76 @@\n+2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/41792\n+\t* include/tr1_impl/array: Use std::__addressof.\n+\t* include/std/functional (reference_wrapper): Likewise.\n+\t* include/ext/throw_allocator.h: Likewise.\n+\t* include/ext/pool_allocator.h: Likewise.\n+\t* include/ext/bitmap_allocator.h: Likewise.\n+\t* include/ext/new_allocator.h: Likewise.\n+\t* include/ext/malloc_allocator.h: Likewise.\n+\t* include/ext/array_allocator.h: Likewise.\n+\t* include/ext/mt_allocator.h: Likewise.\n+\t* include/ext/extptr_allocator.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/hashtable_policy.h: Likewise.\n+\t* include/bits/forward_list.h: Likewise.\n+\t* include/bits/stl_uninitialized.h: Likewise.\n+\t* include/bits/list.tcc: Likewise.\n+\t* include/bits/stl_construct.h: Likewise.\n+\t* include/bits/stl_tree.h: Likewise.\n+\t* testsuite/20_util/reference_wrapper/41792.cc: New.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/multimap/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/set/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/multiset/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/map/requirements/\n+\texplicit_instantiation/4.cc: Likewise.\n+\t* testsuite/23_containers/array/requirements/\n+\texplicit_instantiation/3.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/\n+\tdr438/assign_neg.cc: Adjust dg-error line numbers.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n+2010-05-20  Peter Dimov  <pdimov@pdimov.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/move.h (__addressof, addressof): Add.\n+\t* testsuite/util/testsuite_api.h (struct OverloadedAddress): Add.\n+\t* testsuite/20_util/addressof/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/addressof/1.cc: Likewise.\n+\n 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_pair.h (pair<>::pair(const pair&)): Defaulted"}, {"sha": "c0c135cd1b36bc9b0f0a22882e5ed6f208dbba06", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -139,7 +139,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       pointer\n       operator->() const\n-      { return &static_cast<_Node*>(this->_M_node)->_M_value; }\n+      { return std::__addressof(static_cast<_Node*>\n+\t\t\t\t(this->_M_node)->_M_value); }\n \n       _Self&\n       operator++()\n@@ -210,7 +211,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       pointer\n       operator->() const\n-      { return &static_cast<_Node*>(this->_M_node)->_M_value; }\n+      { return std::__addressof(static_cast<_Node*>\n+\t\t\t\t(this->_M_node)->_M_value); }\n \n       _Self&\n       operator++()"}, {"sha": "694d0ffdeb42796302d37d5a17721dc9d3a58763", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -145,7 +145,7 @@ namespace __detail\n   \n       pointer\n       operator->() const\n-      { return &this->_M_cur->_M_v; }\n+      { return std::__addressof(this->_M_cur->_M_v); }\n \n       _Node_iterator&\n       operator++()\n@@ -190,7 +190,7 @@ namespace __detail\n   \n       pointer\n       operator->() const\n-      { return &this->_M_cur->_M_v; }\n+      { return std::__addressof(this->_M_cur->_M_v); }\n \n       _Node_const_iterator&\n       operator++()\n@@ -288,7 +288,7 @@ namespace __detail\n   \n       pointer\n       operator->() const\n-      { return &this->_M_cur_node->_M_v; }\n+      { return std::__addressof(this->_M_cur_node->_M_v); }\n \n       _Hashtable_iterator&\n       operator++()\n@@ -338,7 +338,7 @@ namespace __detail\n   \n       pointer\n       operator->() const\n-      { return &this->_M_cur_node->_M_v; }\n+      { return std::__addressof(this->_M_cur_node->_M_v); }\n \n       _Hashtable_const_iterator&\n       operator++()"}, {"sha": "f1c4a10dd664dd8120c82ede2d88e20ffba703c8", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \t  _M_get_Node_allocator().destroy(__tmp);\n #else\n-\t  _M_get_Tp_allocator().destroy(&__tmp->_M_data);\n+\t  _M_get_Tp_allocator().destroy(std::__addressof(__tmp->_M_data));\n #endif\n \t  _M_put_node(__tmp);\n \t}\n@@ -198,7 +198,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 526. Is it undefined if a function in the standard changes\n \t      // in parameters?\n-\t      if (&*__first != &__value)\n+\t      if (std::__addressof(*__first) != std::__addressof(__value))\n \t\t_M_erase(__first);\n \t      else\n \t\t__extra = __first;"}, {"sha": "a137f982bedb4eb7a046734cd5aa19654749867a", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // Move, forward and identity for C++0x + swap -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,6 +34,19 @@\n #include <cstddef>\n #include <bits/concept_check.h>\n \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  // Used, in C++03 mode too, by allocators, etc.\n+  template<typename _Tp>\n+    inline _Tp*\n+    __addressof(_Tp& __r)\n+    {\n+      return reinterpret_cast<_Tp*>\n+\t(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));\n+    }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n #include <type_traits> // Brings in std::declval too.\n \n@@ -83,6 +96,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// declval, defined in <type_traits>.\n \n+  /**\n+   *  @brief Returns the actual address of the object or function\n+   *         referenced by r, even in the presence of an overloaded\n+   *         operator&.\n+   *  @param  __r  Reference to an object or function.\n+   *  @return   The actual address.\n+  */\n+  template<typename _Tp>\n+    inline _Tp*\n+    addressof(_Tp& __r)\n+    { return std::__addressof(__r); }\n+\n _GLIBCXX_END_NAMESPACE\n \n #define _GLIBCXX_MOVE(_Tp) std::move(_Tp)"}, {"sha": "06a2902ca69fab904418e02bee397a6a6a9dd9e6", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,7 @@\n // nonstandard construct and destroy functions -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -96,7 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         __destroy(_ForwardIterator __first, _ForwardIterator __last)\n \t{\n \t  for (; __first != __last; ++__first)\n-\t    std::_Destroy(&*__first);\n+\t    std::_Destroy(std::__addressof(*__first));\n \t}\n     };\n \n@@ -137,7 +138,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t     _Allocator& __alloc)\n     {\n       for (; __first != __last; ++__first)\n-\t__alloc.destroy(&*__first);\n+\t__alloc.destroy(std::__addressof(*__first));\n     }\n \n   template<typename _ForwardIterator, typename _Tp>"}, {"sha": "56357ed07da9f94703875dd2261974c417ed5834", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -128,14 +128,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _List_iterator(_List_node_base* __x)\n       : _M_node(__x) { }\n \n-      // Must downcast from List_node_base to _List_node to get to _M_data.\n+      // Must downcast from _List_node_base to _List_node to get to _M_data.\n       reference\n       operator*() const\n       { return static_cast<_Node*>(_M_node)->_M_data; }\n \n       pointer\n       operator->() const\n-      { return &static_cast<_Node*>(_M_node)->_M_data; }\n+      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }\n \n       _Self&\n       operator++()\n@@ -215,7 +215,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n       pointer\n       operator->() const\n-      { return &static_cast<_Node*>(_M_node)->_M_data; }\n+      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }\n \n       _Self&\n       operator++()\n@@ -461,7 +461,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t_Node* __p = this->_M_get_node();\n \t__try\n \t  {\n-\t    _M_get_Tp_allocator().construct(&__p->_M_data, __x);\n+\t    _M_get_Tp_allocator().construct\n+\t      (std::__addressof(__p->_M_data), __x);\n \t  }\n \t__catch(...)\n \t  {\n@@ -1453,7 +1454,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n         _M_get_Node_allocator().destroy(__n);\n #else\n-\t_M_get_Tp_allocator().destroy(&__n->_M_data);\n+\t_M_get_Tp_allocator().destroy(std::__addressof(__n->_M_data));\n #endif\n         _M_put_node(__n);\n       }"}, {"sha": "58c63cf437621ab1077185fc176725b87c18ee62", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,7 @@\n // RB tree implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -176,7 +177,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       pointer\n       operator->() const\n-      { return &static_cast<_Link_type>(_M_node)->_M_value_field; }\n+      { return std::__addressof(static_cast<_Link_type>\n+\t\t\t\t(_M_node)->_M_value_field); }\n \n       _Self&\n       operator++()\n@@ -251,7 +253,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       pointer\n       operator->() const\n-      { return &static_cast<_Link_type>(_M_node)->_M_value_field; }\n+      { return std::__addressof(static_cast<_Link_type>\n+\t\t\t\t(_M_node)->_M_value_field); }\n \n       _Self&\n       operator++()\n@@ -368,7 +371,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n \t_Link_type __tmp = _M_get_node();\n \t__try\n-\t  { get_allocator().construct(&__tmp->_M_value_field, __x); }\n+\t  { get_allocator().construct\n+\t      (std::__addressof(__tmp->_M_value_field), __x); }\n \t__catch(...)\n \t  {\n \t    _M_put_node(__tmp);\n@@ -380,7 +384,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       void\n       _M_destroy_node(_Link_type __p)\n       {\n-\tget_allocator().destroy(&__p->_M_value_field);\n+\tget_allocator().destroy(std::__addressof(__p->_M_value_field));\n \t_M_put_node(__p);\n       }\n #else"}, {"sha": "b78f92025c353f09c0c82a7a9e1ca66977cdc730", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,7 @@\n // Raw memory manipulators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -71,7 +72,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __try\n \t    {\n \t      for (; __first != __last; ++__first, ++__cur)\n-\t\tstd::_Construct(&*__cur, *__first);\n+\t\tstd::_Construct(std::__addressof(*__cur), *__first);\n \t      return __cur;\n \t    }\n \t  __catch(...)\n@@ -129,7 +130,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __try\n \t    {\n \t      for (; __cur != __last; ++__cur)\n-\t\tstd::_Construct(&*__cur, __x);\n+\t\tstd::_Construct(std::__addressof(*__cur), __x);\n \t    }\n \t  __catch(...)\n \t    {\n@@ -185,11 +186,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _ForwardIterator __cur = __first;\n \t  __try\n \t    {\n-\t      std::_Construct(&*__first, _GLIBCXX_MOVE(__value));\n+\t      std::_Construct(std::__addressof(*__first),\n+\t\t\t      _GLIBCXX_MOVE(__value));\n \t      _ForwardIterator __prev = __cur;\n \t      ++__cur;\n \t      for(; __cur != __last; ++__cur, ++__prev)\n-\t\tstd::_Construct(&*__cur, _GLIBCXX_MOVE(*__prev));\n+\t\tstd::_Construct(std::__addressof(*__cur),\n+\t\t\t\t_GLIBCXX_MOVE(*__prev));\n \t      __value = _GLIBCXX_MOVE(*__prev);\n \t    }\n \t  __catch(...)\n@@ -245,7 +248,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __try\n \t    {\n \t      for (; __n > 0; --__n, ++__cur)\n-\t\tstd::_Construct(&*__cur, __x);\n+\t\tstd::_Construct(std::__addressof(*__cur), __x);\n \t    }\n \t  __catch(...)\n \t    {\n@@ -301,7 +304,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __try\n \t{\n \t  for (; __first != __last; ++__first, ++__cur)\n-\t    __alloc.construct(&*__cur, *__first);\n+\t    __alloc.construct(std::__addressof(*__cur), *__first);\n \t  return __cur;\n \t}\n       __catch(...)\n@@ -337,7 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __try\n \t{\n \t  for (; __cur != __last; ++__cur)\n-\t    __alloc.construct(&*__cur, __x);\n+\t    __alloc.construct(std::__addressof(*__cur), __x);\n \t}\n       __catch(...)\n \t{\n@@ -362,7 +365,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __try\n \t{\n \t  for (; __n > 0; --__n, ++__cur)\n-\t    __alloc.construct(&*__cur, __x);\n+\t    __alloc.construct(std::__addressof(*__cur), __x);\n \t}\n       __catch(...)\n \t{\n@@ -498,7 +501,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __try\n \t{\n \t  for (; __n > 0; --__n, ++__first, ++__cur)\n-\t    ::new(static_cast<void*>(&*__cur)) typename\n+\t    ::new(static_cast<void*>(std::__addressof(*__cur))) typename\n \t\titerator_traits<_ForwardIterator>::value_type(*__first);\n \t  return __cur;\n \t}"}, {"sha": "36f15fe936cb95fa80af761ea9884ec6fc9031cf", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // array allocator -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -55,10 +55,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef _Tp        \tvalue_type;\n \n       pointer\n-      address(reference __x) const { return &__x; }\n+      address(reference __x) const { return std::__addressof(__x); }\n \n       const_pointer\n-      address(const_reference __x) const { return &__x; }\n+      address(const_reference __x) const { return std::__addressof(__x); }\n \n       void\n       deallocate(pointer, size_type)"}, {"sha": "05285f548cc5b09d621e8fbd20d5f85968f7317d", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // Bitmap Allocator. -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1039,11 +1039,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       pointer \n       address(reference __r) const\n-      { return &__r; }\n+      { return std::__addressof(__r); }\n \n       const_pointer \n       address(const_reference __r) const\n-      { return &__r; }\n+      { return std::__addressof(__r); }\n \n       size_type \n       max_size() const throw()"}, {"sha": "d9e8cda440dd4572445e0444e0982f73b6ab8768", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // <extptr_allocator.h> -*- C++ -*-\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -82,10 +82,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { }\n \n       pointer address(reference __x) const\n-      { return &__x; }\n+      { return std::__addressof(__x); }\n \n       const_pointer address(const_reference __x) const\n-      { return &__x; }\n+      { return std::__addressof(__x); }\n \n       pointer allocate(size_type __n, void* __hint = 0)\n       { return _M_real_alloc.allocate(__n,__hint); }"}, {"sha": "ed3c3b2b0ac981075fe4132d8301b1028ee19167", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // Allocator that wraps \"C\" malloc -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -74,10 +74,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       ~malloc_allocator() throw() { }\n \n       pointer\n-      address(reference __x) const { return &__x; }\n+      address(reference __x) const { return std::__addressof(__x); }\n \n       const_pointer\n-      address(const_reference __x) const { return &__x; }\n+      address(const_reference __x) const { return std::__addressof(__x); }\n \n       // NB: __n is permitted to be 0.  The C++ standard says nothing\n       // about what the return value is when __n == 0."}, {"sha": "8fdb2f6393b5f09cfa756a34205196f6b1ee322c", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -576,11 +576,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       pointer\n       address(reference __x) const\n-      { return &__x; }\n+      { return std::__addressof(__x); }\n \n       const_pointer\n       address(const_reference __x) const\n-      { return &__x; }\n+      { return std::__addressof(__x); }\n \n       size_type\n       max_size() const throw() "}, {"sha": "beaddddf9eed6a3e78faf97271fef8f5f801fc40", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // Allocator that wraps operator new -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -73,10 +73,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       ~new_allocator() throw() { }\n \n       pointer\n-      address(reference __x) const { return &__x; }\n+      address(reference __x) const { return std::__addressof(__x); }\n \n       const_pointer\n-      address(const_reference __x) const { return &__x; }\n+      address(const_reference __x) const { return std::__addressof(__x); }\n \n       // NB: __n is permitted to be 0.  The C++ standard says nothing\n       // about what the return value is when __n == 0."}, {"sha": "66cda84b42d3491ddfbcf7e0ae6459ece85c712e", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // Allocators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -147,10 +147,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       ~__pool_alloc() throw() { }\n \n       pointer\n-      address(reference __x) const { return &__x; }\n+      address(reference __x) const { return std::__addressof(__x); }\n \n       const_pointer\n-      address(const_reference __x) const { return &__x; }\n+      address(const_reference __x) const { return std::__addressof(__x); }\n \n       size_type\n       max_size() const throw() "}, {"sha": "70b197a705d1d7934e45fff665266f9b6fbc90a5", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -619,6 +619,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       max_size() const throw()\n       { return _M_allocator.max_size(); }\n \n+      pointer\n+      address(reference __x) const { return std::__addressof(__x); }\n+\n+      const_pointer\n+      address(const_reference __x) const { return std::__addressof(__x); }\n+\n       pointer\n       allocate(size_type __n, std::allocator<void>::const_pointer hint = 0)\n       {"}, {"sha": "7f6d8b6c4f663d660ae4af6024a644bf414380c1", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -390,7 +390,8 @@ namespace std\n     public:\n       typedef _Tp type;\n \n-      reference_wrapper(_Tp& __indata): _M_data(&__indata)\n+      reference_wrapper(_Tp& __indata)\n+      : _M_data(std::__addressof(__indata))\n       { }\n \n       reference_wrapper(_Tp&&) = delete;"}, {"sha": "db0364e535723bda0f4ff3d63680ec5f9802fbc7", "filename": "libstdc++-v3/include/tr1_impl/array", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -83,19 +83,19 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       // Iterators.\n       iterator\n       begin()\n-      { return iterator(&_M_instance[0]); }\n+      { return iterator(std::__addressof(_M_instance[0])); }\n \n       const_iterator\n       begin() const \n-      { return const_iterator(&_M_instance[0]); }\n+      { return const_iterator(std::__addressof(_M_instance[0])); }\n \n       iterator\n       end()\n-      { return iterator(&_M_instance[_Nm]); }\n+      { return iterator(std::__addressof(_M_instance[_Nm])); }\n \n       const_iterator\n       end() const\n-      { return const_iterator(&_M_instance[_Nm]); }\n+      { return const_iterator(std::__addressof(_M_instance[_Nm])); }\n \n       reverse_iterator \n       rbegin()\n@@ -116,11 +116,11 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n #ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n       const_iterator\n       cbegin() const \n-      { return const_iterator(&_M_instance[0]); }\n+      { return const_iterator(std::__addressof(_M_instance[0])); }\n \n       const_iterator\n       cend() const\n-      { return const_iterator(&_M_instance[_Nm]); }\n+      { return const_iterator(std::__addressof(_M_instance[_Nm])); }\n \n       const_reverse_iterator \n       crbegin() const\n@@ -182,13 +182,13 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       back() const\n       { return _Nm ? *(end() - 1) : *end(); }\n \n-      _Tp* \n+      _Tp*\n       data()\n-      { return &_M_instance[0]; }\n+      { return std::__addressof(_M_instance[0]); }\n \n-      const _Tp* \n+      const _Tp*\n       data() const\n-      { return &_M_instance[0]; }\n+      { return std::__addressof(_M_instance[0]); }\n     };\n \n   // Array comparisons."}, {"sha": "43009f3c833e49469b230b7b3dea006e4ec2fe4f", "filename": "libstdc++-v3/testsuite/20_util/addressof/1.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faddressof%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faddressof%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faddressof%2F1.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+void f1(int) { }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_test;\n+  \n+  OverloadedAddress* ao1 = new OverloadedAddress();\n+  OverloadedAddress& o1 = *ao1;\n+\n+  VERIFY( std::addressof(o1) == ao1 );\n+\n+  const OverloadedAddress* ao2 = new OverloadedAddress();\n+  const OverloadedAddress& o2 = *ao2;\n+\n+  VERIFY( std::addressof(o2) == ao2 );\n+\n+  VERIFY( std::addressof(f1) == &f1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "559cd20e2fed83386c63cd0bb1991880ff0d94e7", "filename": "libstdc++-v3/testsuite/20_util/addressof/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faddressof%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faddressof%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faddressof%2Frequirements%2Fexplicit_instantiation.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing utility with NO OTHER INCLUDES.\n+\n+#include <memory>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template short* addressof(short&);\n+}"}, {"sha": "b167d71224b4ce063e57897aa08e1c3d7a91047c", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/41792.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2F41792.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2F41792.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2F41792.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+// libstdc++/41792\n+void test01()\n+{\n+  using namespace __gnu_test;\n+\n+  OverloadedAddress* ao1 = new OverloadedAddress();\n+  std::reference_wrapper<OverloadedAddress> rw1(*ao1);\n+}"}, {"sha": "9bd5bc9c065591cb12c815576ab8c0087667bfac", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/explicit_instantiation/3.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+// libstdc++/41792\n+template class std::array<__gnu_test::OverloadedAddress, 3>;"}, {"sha": "4685ae142999a414d43a45fdeed575ac40468a3f", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,30 @@\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/41792\n+template class std::deque<__gnu_test::OverloadedAddress>;"}, {"sha": "1625e3bc76bef850529f310a5527a73581938429", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1194 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "5acfcd1f47f6908cacbc7721d6dc364d94d4db48", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1194 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "dcf69089b004a4b60ca342955cf4af7069d4b454", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1194 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "22574fd081a16d5c413e4623aeb6d4a49869d027", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1194 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "11f15248f1ae77a8f843c0d29c2d5b6c345f9266", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/41792\n+template class std::forward_list<__gnu_test::OverloadedAddress>;"}, {"sha": "eb35a24c89d7eab21549b08f5ef50a982bf4ef8c", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1410 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1411 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "937404b26a8c0deb63b89a10198f4288e1d598f8", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1379 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1380 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "74fc1b7a1630299ec1a5ed9a340452cac9b75275", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1379 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1380 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "3aebda5ddb2af7464da6904378ccacc3f7a086ab", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1379 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1380 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "7ad82a365c070c1d0d908003bb8136eb58229ca0", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/41792\n+template class std::list<__gnu_test::OverloadedAddress>;"}, {"sha": "2a3700adde82acc28d0c6b6c11f85c185833fcc0", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/41792\n+template class std::map<__gnu_test::OverloadedAddress,\n+\t\t\t__gnu_test::OverloadedAddress>;"}, {"sha": "82bd4cda87b5079da8eddc841912a4e2f74562a9", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/41792\n+template class std::multimap<__gnu_test::OverloadedAddress,\n+\t\t\t     __gnu_test::OverloadedAddress>;"}, {"sha": "d55064cd1d31eb0d14c048b18f2e46cdf1d105ce", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/41792\n+template class std::multiset<__gnu_test::OverloadedAddress>;"}, {"sha": "2bbe976672267fae77fe1eacfd97ed7de4468932", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/41792\n+template class std::set<__gnu_test::OverloadedAddress>;"}, {"sha": "37b57b3717adced808f8d6db71b7f1884163684a", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+typedef __gnu_test::OverloadedAddress      inst_type;\n+typedef __gnu_test::OverloadedAddress_hash hash_type;\n+\n+// libstdc++/41792\n+template class std::unordered_map<inst_type, inst_type, hash_type>;"}, {"sha": "d92fdc5b3bc830b2e9238939a9cf2966afec9a79", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+typedef __gnu_test::OverloadedAddress      inst_type;\n+typedef __gnu_test::OverloadedAddress_hash hash_type;\n+\n+// libstdc++/41792\n+template class std::unordered_multimap<inst_type, inst_type, hash_type>;"}, {"sha": "618402643fa340e1dadff9651c8728f3532f9bcd", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+typedef __gnu_test::OverloadedAddress      inst_type;\n+typedef __gnu_test::OverloadedAddress_hash hash_type;\n+\n+// libstdc++/41792\n+template class std::unordered_multiset<inst_type, hash_type>;"}, {"sha": "3f619b71cd6c50be43bc30d8da9d5102084ebf7c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+typedef __gnu_test::OverloadedAddress      inst_type;\n+typedef __gnu_test::OverloadedAddress_hash hash_type;\n+\n+// libstdc++/41792\n+template class std::unordered_set<inst_type, hash_type>;"}, {"sha": "9305e3c87c50b071e2516acd2eedc2f994e326a9", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/explicit_instantiation/4.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F4.cc?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -0,0 +1,29 @@\n+// 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/41792\n+template class std::vector<__gnu_test::OverloadedAddress>;"}, {"sha": "fcb762eff66427a1308796f20bbb44b4a7eeb9a7", "filename": "libstdc++-v3/testsuite/util/testsuite_api.h", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h?ref=882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Exception testing utils for the C++ library testsuite. \n //\n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -150,6 +150,30 @@ namespace __gnu_test\n       operator()() const\n       { return result_type(2); }\n     };\n+\n+  // For std::addressof, etc.\n+  struct OverloadedAddressAux { };\n+  \n+  struct OverloadedAddress\n+  {\n+    OverloadedAddressAux\n+    operator&() const { return OverloadedAddressAux(); }\n+  };\n+\n+  inline bool\n+  operator<(const OverloadedAddress&, const OverloadedAddress&)\n+  { return false; }\n+\n+  inline bool\n+  operator==(const OverloadedAddress&, const OverloadedAddress&)\n+  { return false; }\n+\n+  struct OverloadedAddress_hash\n+  {\n+    size_t\n+    operator()(const OverloadedAddress&) const\n+    { return 1; }\n+  };\n }\n \n #endif"}]}