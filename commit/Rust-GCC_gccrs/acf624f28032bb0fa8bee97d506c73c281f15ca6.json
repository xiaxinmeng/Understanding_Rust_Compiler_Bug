{"sha": "acf624f28032bb0fa8bee97d506c73c281f15ca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmNjI0ZjI4MDMyYmIwZmE4YmVlOTdkNTA2YzczYzI4MWYxNWNhNg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2015-03-02T11:05:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-02T11:05:03Z"}, "message": "sem_ch6.adb (Check_Private_Overriding): Refine the legality checks here.\n\n2015-03-02  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch6.adb (Check_Private_Overriding): Refine the legality\n\tchecks here. It used to check that the function is merely\n\toverriding SOMEthing. Now it checks that the function is\n\toverriding a corresponding public operation. This is a correction\n\tto the implementation of the rule in RM-3.9.3(10).\n\nFrom-SVN: r221110", "tree": {"sha": "d4332623c7c50ecb2190778355b2df124cbb8410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4332623c7c50ecb2190778355b2df124cbb8410"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acf624f28032bb0fa8bee97d506c73c281f15ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf624f28032bb0fa8bee97d506c73c281f15ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf624f28032bb0fa8bee97d506c73c281f15ca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf624f28032bb0fa8bee97d506c73c281f15ca6/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a271a7f3a2983e1529ea5c7f98d6ea5d6b113cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a271a7f3a2983e1529ea5c7f98d6ea5d6b113cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a271a7f3a2983e1529ea5c7f98d6ea5d6b113cf"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "01787e449bb1d3c516ba6dee0e730c3fef05c351", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf624f28032bb0fa8bee97d506c73c281f15ca6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf624f28032bb0fa8bee97d506c73c281f15ca6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=acf624f28032bb0fa8bee97d506c73c281f15ca6", "patch": "@@ -1,3 +1,11 @@\n+2015-03-02  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Private_Overriding): Refine the legality\n+\tchecks here. It used to check that the function is merely\n+\toverriding SOMEthing. Now it checks that the function is\n+\toverriding a corresponding public operation. This is a correction\n+\tto the implementation of the rule in RM-3.9.3(10).\n+\n 2015-03-02  Robert Dewar  <dewar@adacore.com>\n \n \t* debug.adb: Document new debug flag -gnatd.1."}, {"sha": "39cd353ea5ea0413f9c67b04df7cb70b0e7a7d88", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf624f28032bb0fa8bee97d506c73c281f15ca6/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf624f28032bb0fa8bee97d506c73c281f15ca6/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=acf624f28032bb0fa8bee97d506c73c281f15ca6", "patch": "@@ -8905,6 +8905,50 @@ package body Sem_Ch6 is\n          ------------------------------\n \n          procedure Check_Private_Overriding (T : Entity_Id) is\n+\n+            function Overrides_Visible_Function return Boolean;\n+            --  True if S overrides a function in the visible part. The\n+            --  overridden function could be explicitly or implicitly declared.\n+\n+            function Overrides_Visible_Function return Boolean is\n+            begin\n+               if not Is_Overriding or else not Has_Homonym (S) then\n+                  return False;\n+               end if;\n+\n+               if not Present (Incomplete_Or_Partial_View (T)) then\n+                  return True;\n+               end if;\n+\n+               --  Search through all the homonyms H of S in the current\n+               --  package spec, and return True if we find one that matches.\n+               --  Note that Parent (H) will be the declaration of the\n+               --  Incomplete_Or_Partial_View of T for a match.\n+\n+               declare\n+                  H : Entity_Id := S;\n+               begin\n+                  loop\n+                     H := Homonym (H);\n+                     exit when not Present (H) or else Scope (H) /= Scope (S);\n+\n+                     if Nkind_In\n+                       (Parent (H),\n+                        N_Private_Extension_Declaration,\n+                        N_Private_Type_Declaration)\n+                       and then Defining_Identifier (Parent (H)) =\n+                                  Incomplete_Or_Partial_View (T)\n+                     then\n+                        return True;\n+                     end if;\n+                  end loop;\n+               end;\n+\n+               return False;\n+            end Overrides_Visible_Function;\n+\n+         --  Start of processing for Check_Private_Overriding\n+\n          begin\n             if Is_Package_Or_Generic_Package (Current_Scope)\n               and then In_Private_Part (Current_Scope)\n@@ -8919,8 +8963,20 @@ package body Sem_Ch6 is\n                   Error_Msg_N (\"abstract subprograms must be visible \"\n                                & \"(RM 3.9.3(10))!\", S);\n \n-               elsif Ekind (S) = E_Function and then not Is_Overriding then\n-                  if Is_Tagged_Type (T) and then T = Base_Type (Etype (S)) then\n+               elsif Ekind (S) = E_Function\n+                 and then not Overrides_Visible_Function\n+               then\n+                  --  Here, S is \"function ... return T;\" declared in the\n+                  --  private part, not overriding some visible operation.\n+                  --  That's illegal in the tagged case (but not if the\n+                  --  private type is untagged).\n+\n+                  if ((Present (Incomplete_Or_Partial_View (T))\n+                      and then Is_Tagged_Type (Incomplete_Or_Partial_View (T)))\n+                    or else (not Present (Incomplete_Or_Partial_View (T))\n+                      and then Is_Tagged_Type (T)))\n+                    and then T = Base_Type (Etype (S))\n+                  then\n                      Error_Msg_N (\"private function with tagged result must\"\n                                   & \" override visible-part function\", S);\n                      Error_Msg_N (\"\\move subprogram to the visible part\""}]}