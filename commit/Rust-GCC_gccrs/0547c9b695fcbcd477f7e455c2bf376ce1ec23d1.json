{"sha": "0547c9b695fcbcd477f7e455c2bf376ce1ec23d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU0N2M5YjY5NWZjYmNkNDc3ZjdlNDU1YzJiZjM3NmNlMWVjMjNkMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-18T12:31:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-18T12:31:45Z"}, "message": "re PR tree-optimization/58417 (Incorrect optimization in SCEV const-prop)\n\n2013-09-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58417\n\t* tree-chrec.c (chrec_fold_plus_1): Assert that we do not\n\thave chrecs with symbols defined in the loop as operands.\n\t(chrec_fold_multiply): Likewise.\n\t* tree-scalar-evolution.c (interpret_rhs_expr): Instantiate\n\tparameters before folding binary operations.\n\t(struct instantiate_cache_entry_hasher): Remove.\n\t(struct instantiate_cache_type): Use a pointer-map.\n\t(instantiate_cache_type::instantiate_cache_type): New function.\n\t(instantiate_cache_type::get): Likewise.\n\t(instantiate_cache_type::set): Likewise.\n\t(instantiate_cache_type::~instantiate_cache_type): Adjust.\n\t(get_instantiated_value_entry): Likewise.\n\t(global_cache): New global.\n\t(instantiate_scev_r, instantiate_scev_poly, instantiate_scev_binary,\n\tinstantiate_array_ref, instantiate_scev_convert, instantiate_scev_3,\n\tinstantiate_scev_2, instantiate_scev_1): Do not pass along cache.\n\t(instantiate_scev_name): Adjust.\n\t(instantiate_scev): Construct global instead of local cache.\n\t(resolve_mixers): Likewise.\n\n\t* gcc.dg/torture/pr58417.c: New testcase.\n\nFrom-SVN: r202700", "tree": {"sha": "59f32ef2e3ced559a50a2fd3d65803a14184d085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59f32ef2e3ced559a50a2fd3d65803a14184d085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "837bf5116d3d468479f45456b1492dd8ccf49299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837bf5116d3d468479f45456b1492dd8ccf49299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/837bf5116d3d468479f45456b1492dd8ccf49299"}], "stats": {"total": 280, "additions": 175, "deletions": 105}, "files": [{"sha": "800ef75c19e06f52dd64c672dddb43299bd543cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0547c9b695fcbcd477f7e455c2bf376ce1ec23d1", "patch": "@@ -1,3 +1,26 @@\n+2013-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58417\n+\t* tree-chrec.c (chrec_fold_plus_1): Assert that we do not\n+\thave chrecs with symbols defined in the loop as operands.\n+\t(chrec_fold_multiply): Likewise.\n+\t* tree-scalar-evolution.c (interpret_rhs_expr): Instantiate\n+\tparameters before folding binary operations.\n+\t(struct instantiate_cache_entry_hasher): Remove.\n+\t(struct instantiate_cache_type): Use a pointer-map.\n+\t(instantiate_cache_type::instantiate_cache_type): New function.\n+\t(instantiate_cache_type::get): Likewise.\n+\t(instantiate_cache_type::set): Likewise.\n+\t(instantiate_cache_type::~instantiate_cache_type): Adjust.\n+\t(get_instantiated_value_entry): Likewise.\n+\t(global_cache): New global.\n+\t(instantiate_scev_r, instantiate_scev_poly, instantiate_scev_binary,\n+\tinstantiate_array_ref, instantiate_scev_convert, instantiate_scev_3,\n+\tinstantiate_scev_2, instantiate_scev_1): Do not pass along cache.\n+\t(instantiate_scev_name): Adjust.\n+\t(instantiate_scev): Construct global instead of local cache.\n+\t(resolve_mixers): Likewise.\n+\n 2013-09-18  Daniel Morris  <danielm@ecoscentric.com>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "7a243c3c7b5c9f9b42c99af97809496c1152eb93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0547c9b695fcbcd477f7e455c2bf376ce1ec23d1", "patch": "@@ -1,3 +1,8 @@\n+2013-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58417\n+\t* gcc.dg/torture/pr58417.c: New testcase.\n+\n 2013-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t*  gnat.dg/array_bounds_test2.adb: New test."}, {"sha": "5cb0ddb027577b61d21cb7e881bd95f351bef47d", "filename": "gcc/testsuite/gcc.dg/torture/pr58417.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58417.c?ref=0547c9b695fcbcd477f7e455c2bf376ce1ec23d1", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+\n+long long arr[6] = {0, 1, 2, 3, 4, 5};\n+extern  void abort (void);\n+void __attribute__((noinline,noclone))\n+foo (long long sum)\n+{\n+  asm (\"\");\n+}\n+int main()\n+{\n+  int i, n = 5;\n+  long long sum = 0, prevsum = 0;\n+\n+  for(i = 1; i <= n; i++)\n+    {\n+      foo (sum);\n+      sum = (i - 1) * arr[i] - prevsum;\n+      prevsum += arr[i];\n+    }\n+\n+  if (sum != 10)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "16df51bbbef7cd3fd7a30004673aa7cbdd62fdf2", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=0547c9b695fcbcd477f7e455c2bf376ce1ec23d1", "patch": "@@ -268,9 +268,14 @@ chrec_fold_plus_1 (enum tree_code code, tree type,\n   switch (TREE_CODE (op0))\n     {\n     case POLYNOMIAL_CHREC:\n+      gcc_checking_assert\n+\t(!chrec_contains_symbols_defined_in_loop (op0, CHREC_VARIABLE (op0)));\n       switch (TREE_CODE (op1))\n \t{\n \tcase POLYNOMIAL_CHREC:\n+\t  gcc_checking_assert\n+\t    (!chrec_contains_symbols_defined_in_loop (op1,\n+\t\t\t\t\t\t      CHREC_VARIABLE (op1)));\n \t  return chrec_fold_plus_poly_poly (code, type, op0, op1);\n \n \tCASE_CONVERT:\n@@ -298,6 +303,9 @@ chrec_fold_plus_1 (enum tree_code code, tree type,\n       switch (TREE_CODE (op1))\n \t{\n \tcase POLYNOMIAL_CHREC:\n+\t  gcc_checking_assert\n+\t    (!chrec_contains_symbols_defined_in_loop (op1,\n+\t\t\t\t\t\t      CHREC_VARIABLE (op1)));\n \t  if (code == PLUS_EXPR || code == POINTER_PLUS_EXPR)\n \t    return build_polynomial_chrec\n \t      (CHREC_VARIABLE (op1),\n@@ -396,9 +404,14 @@ chrec_fold_multiply (tree type,\n   switch (TREE_CODE (op0))\n     {\n     case POLYNOMIAL_CHREC:\n+      gcc_checking_assert\n+\t(!chrec_contains_symbols_defined_in_loop (op0, CHREC_VARIABLE (op0)));\n       switch (TREE_CODE (op1))\n \t{\n \tcase POLYNOMIAL_CHREC:\n+\t  gcc_checking_assert\n+\t    (!chrec_contains_symbols_defined_in_loop (op1,\n+\t\t\t\t\t\t      CHREC_VARIABLE (op1)));\n \t  return chrec_fold_multiply_poly_poly (type, op0, op1);\n \n \tCASE_CONVERT:\n@@ -431,6 +444,9 @@ chrec_fold_multiply (tree type,\n       switch (TREE_CODE (op1))\n \t{\n \tcase POLYNOMIAL_CHREC:\n+\t  gcc_checking_assert\n+\t    (!chrec_contains_symbols_defined_in_loop (op1,\n+\t\t\t\t\t\t      CHREC_VARIABLE (op1)));\n \t  return build_polynomial_chrec\n \t    (CHREC_VARIABLE (op1),\n \t     chrec_fold_multiply (type, CHREC_LEFT (op1), op0),"}, {"sha": "f15f91c31a474c871f5f828531736eee71ba807b", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 106, "deletions": 105, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0547c9b695fcbcd477f7e455c2bf376ce1ec23d1/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=0547c9b695fcbcd477f7e455c2bf376ce1ec23d1", "patch": "@@ -1648,6 +1648,8 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n \t      chrec2 = analyze_scalar_evolution (loop, rhs2);\n \t      chrec1 = chrec_convert (type, chrec1, at_stmt);\n \t      chrec2 = chrec_convert (TREE_TYPE (rhs2), chrec2, at_stmt);\n+\t      chrec1 = instantiate_parameters (loop, chrec1);\n+\t      chrec2 = instantiate_parameters (loop, chrec2);\n \t      res = chrec_fold_plus (type, chrec1, chrec2);\n \t    }\n \t  else\n@@ -1661,6 +1663,7 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n \t    {\n \t      chrec2 = analyze_scalar_evolution (loop, offset);\n \t      chrec2 = chrec_convert (TREE_TYPE (offset), chrec2, at_stmt);\n+\t      chrec2 = instantiate_parameters (loop, chrec2);\n \t      res = chrec_fold_plus (type, res, chrec2);\n \t    }\n \n@@ -1671,6 +1674,7 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n \t      unitpos = size_int (bitpos / BITS_PER_UNIT);\n \t      chrec3 = analyze_scalar_evolution (loop, unitpos);\n \t      chrec3 = chrec_convert (TREE_TYPE (unitpos), chrec3, at_stmt);\n+\t      chrec3 = instantiate_parameters (loop, chrec3);\n \t      res = chrec_fold_plus (type, res, chrec3);\n \t    }\n         }\n@@ -1683,6 +1687,8 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n       chrec2 = analyze_scalar_evolution (loop, rhs2);\n       chrec1 = chrec_convert (type, chrec1, at_stmt);\n       chrec2 = chrec_convert (TREE_TYPE (rhs2), chrec2, at_stmt);\n+      chrec1 = instantiate_parameters (loop, chrec1);\n+      chrec2 = instantiate_parameters (loop, chrec2);\n       res = chrec_fold_plus (type, chrec1, chrec2);\n       break;\n \n@@ -1691,6 +1697,8 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n       chrec2 = analyze_scalar_evolution (loop, rhs2);\n       chrec1 = chrec_convert (type, chrec1, at_stmt);\n       chrec2 = chrec_convert (type, chrec2, at_stmt);\n+      chrec1 = instantiate_parameters (loop, chrec1);\n+      chrec2 = instantiate_parameters (loop, chrec2);\n       res = chrec_fold_plus (type, chrec1, chrec2);\n       break;\n \n@@ -1699,13 +1707,16 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n       chrec2 = analyze_scalar_evolution (loop, rhs2);\n       chrec1 = chrec_convert (type, chrec1, at_stmt);\n       chrec2 = chrec_convert (type, chrec2, at_stmt);\n+      chrec1 = instantiate_parameters (loop, chrec1);\n+      chrec2 = instantiate_parameters (loop, chrec2);\n       res = chrec_fold_minus (type, chrec1, chrec2);\n       break;\n \n     case NEGATE_EXPR:\n       chrec1 = analyze_scalar_evolution (loop, rhs1);\n       chrec1 = chrec_convert (type, chrec1, at_stmt);\n       /* TYPE may be integer, real or complex, so use fold_convert.  */\n+      chrec1 = instantiate_parameters (loop, chrec1);\n       res = chrec_fold_multiply (type, chrec1,\n \t\t\t\t fold_convert (type, integer_minus_one_node));\n       break;\n@@ -1714,6 +1725,7 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n       /* Handle ~X as -1 - X.  */\n       chrec1 = analyze_scalar_evolution (loop, rhs1);\n       chrec1 = chrec_convert (type, chrec1, at_stmt);\n+      chrec1 = instantiate_parameters (loop, chrec1);\n       res = chrec_fold_minus (type,\n \t\t\t      fold_convert (type, integer_minus_one_node),\n \t\t\t      chrec1);\n@@ -1724,6 +1736,8 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n       chrec2 = analyze_scalar_evolution (loop, rhs2);\n       chrec1 = chrec_convert (type, chrec1, at_stmt);\n       chrec2 = chrec_convert (type, chrec2, at_stmt);\n+      chrec1 = instantiate_parameters (loop, chrec1);\n+      chrec2 = instantiate_parameters (loop, chrec2);\n       res = chrec_fold_multiply (type, chrec1, chrec2);\n       break;\n \n@@ -2057,78 +2071,56 @@ struct instantiate_cache_entry\n   tree chrec;\n };\n \n-struct instantiate_cache_entry_hasher : typed_noop_remove <uintptr_t>\n-{\n-  typedef uintptr_t value_type;\n-  typedef instantiate_cache_entry compare_type;\n-  static inline hashval_t hash (const value_type *);\n-  static inline bool equal (const value_type *, const compare_type *);\n-};\n-\n struct instantiate_cache_type\n {\n-  hash_table <instantiate_cache_entry_hasher> htab;\n+  pointer_map<unsigned> *map;\n   vec<instantiate_cache_entry> entries;\n \n+  instantiate_cache_type () : map (NULL), entries(vNULL) {}\n   ~instantiate_cache_type ();\n+  tree get (unsigned slot) { return entries[slot].chrec; }\n+  void set (unsigned slot, tree chrec) { entries[slot].chrec = chrec; }\n };\n \n instantiate_cache_type::~instantiate_cache_type ()\n {\n-  if (htab.is_created ())\n+  if (map != NULL)\n     {\n-      htab.dispose ();\n+      delete map;\n       entries.release ();\n     }\n }\n \n-static instantiate_cache_type *ctbl;\n-\n-inline hashval_t\n-instantiate_cache_entry_hasher::hash (const value_type *idx)\n-{\n-  instantiate_cache_entry *elt\n-    = &ctbl->entries[reinterpret_cast <uintptr_t> (idx) - 2];\n-  return SSA_NAME_VERSION (elt->name);\n-}\n-\n-inline bool\n-instantiate_cache_entry_hasher::equal (const value_type *idx1,\n-\t\t\t\t       const compare_type *elt2)\n-{\n-  compare_type *elt1 = &ctbl->entries[reinterpret_cast <uintptr_t> (idx1) - 2];\n-  return elt1->name == elt2->name;\n-}\n-\n-/* Returns from CACHE a pointer to the cached chrec for NAME.  */\n+/* Returns from CACHE the slot number of the cached chrec for NAME.  */\n \n-static tree *\n+static unsigned\n get_instantiated_value_entry (instantiate_cache_type &cache, tree name)\n {\n-  struct instantiate_cache_entry e;\n-  uintptr_t **slot;\n-\n-  if (!cache.htab.is_created ())\n+  if (!cache.map)\n     {\n-      cache.htab.create (10);\n+      cache.map = new pointer_map<unsigned>;\n       cache.entries.create (10);\n     }\n \n-  ctbl = &cache;\n-\n-  e.name = name;\n-  slot = cache.htab.find_slot_with_hash (&e, SSA_NAME_VERSION (name), INSERT);\n-  if (!*slot)\n+  bool existed_p;\n+  unsigned *slot = cache.map->insert (name, &existed_p);\n+  if (!existed_p)\n     {\n+      struct instantiate_cache_entry e;\n+      e.name = name;\n       e.chrec = chrec_not_analyzed_yet;\n+      *slot = cache.entries.length ();\n       cache.entries.safe_push (e);\n-      *slot = reinterpret_cast <uintptr_t *>\n-\t  ((uintptr_t) cache.entries.length () + 1);\n     }\n \n-  return &cache.entries[reinterpret_cast <uintptr_t> (*slot) - 2].chrec;\n+  return *slot;\n }\n \n+/* Cache to avoid infinite recursion when instantiating an SSA name.\n+   Live during the outermost instantiate_scev or resolve_mixers call.  */\n+static instantiate_cache_type *global_cache;\n+\n+\n /* Return the closed_loop_phi node for VAR.  If there is none, return\n    NULL_TREE.  */\n \n@@ -2160,7 +2152,7 @@ loop_closed_phi_def (tree var)\n }\n \n static tree instantiate_scev_r (basic_block, struct loop *, struct loop *,\n-\t\t\t\ttree, bool, instantiate_cache_type &, int);\n+\t\t\t\ttree, bool, int);\n \n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n    and EVOLUTION_LOOP, that were left under a symbolic form.\n@@ -2180,7 +2172,7 @@ static tree\n instantiate_scev_name (basic_block instantiate_below,\n \t\t       struct loop *evolution_loop, struct loop *inner_loop,\n \t\t       tree chrec,\n-\t\t       bool fold_conversions, instantiate_cache_type &cache,\n+\t\t       bool fold_conversions,\n \t\t       int size_expr)\n {\n   tree res;\n@@ -2203,13 +2195,12 @@ instantiate_scev_name (basic_block instantiate_below,\n \n      | a_2 -> {0, +, 1, +, a_2}_1  */\n \n-  tree *si;\n-  si = get_instantiated_value_entry (cache, chrec);\n-  if (*si != chrec_not_analyzed_yet)\n-    return *si;\n+  unsigned si = get_instantiated_value_entry (*global_cache, chrec);\n+  if (global_cache->get (si) != chrec_not_analyzed_yet)\n+    return global_cache->get (si);\n \n   /* On recursion return chrec_dont_know.  */\n-  *si = chrec_dont_know;\n+  global_cache->set (si, chrec_dont_know);\n \n   def_loop = find_common_loop (evolution_loop, def_bb->loop_father);\n \n@@ -2242,7 +2233,7 @@ instantiate_scev_name (basic_block instantiate_below,\n \t  res = compute_overall_effect_of_inner_loop (loop, res);\n \t  res = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t    inner_loop, res,\n-\t\t\t\t    fold_conversions, cache, size_expr);\n+\t\t\t\t    fold_conversions, size_expr);\n \t}\n       else if (!dominated_by_p (CDI_DOMINATORS, instantiate_below,\n \t\t\t\tgimple_bb (SSA_NAME_DEF_STMT (res))))\n@@ -2259,11 +2250,11 @@ instantiate_scev_name (basic_block instantiate_below,\n       else\n \tres = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t  inner_loop, res,\n-\t\t\t\t  fold_conversions, cache, size_expr);\n+\t\t\t\t  fold_conversions, size_expr);\n     }\n \n   /* Store the correct value to the cache.  */\n-  *si = res;\n+  global_cache->set (si, res);\n   return res;\n }\n \n@@ -2284,21 +2275,19 @@ instantiate_scev_name (basic_block instantiate_below,\n static tree\n instantiate_scev_poly (basic_block instantiate_below,\n \t\t       struct loop *evolution_loop, struct loop *,\n-\t\t       tree chrec,\n-\t\t       bool fold_conversions, instantiate_cache_type &cache,\n-\t\t       int size_expr)\n+\t\t       tree chrec, bool fold_conversions, int size_expr)\n {\n   tree op1;\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t get_chrec_loop (chrec),\n-\t\t\t\t CHREC_LEFT (chrec), fold_conversions, cache,\n+\t\t\t\t CHREC_LEFT (chrec), fold_conversions,\n \t\t\t\t size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n   op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t    get_chrec_loop (chrec),\n-\t\t\t    CHREC_RIGHT (chrec), fold_conversions, cache,\n+\t\t\t    CHREC_RIGHT (chrec), fold_conversions,\n \t\t\t    size_expr);\n   if (op1 == chrec_dont_know)\n     return chrec_dont_know;\n@@ -2332,20 +2321,16 @@ instantiate_scev_binary (basic_block instantiate_below,\n \t\t\t struct loop *evolution_loop, struct loop *inner_loop,\n \t\t\t tree chrec, enum tree_code code,\n \t\t\t tree type, tree c0, tree c1,\n-\t\t\t bool fold_conversions,\n-\t\t\t instantiate_cache_type &cache,\n-\t\t\t int size_expr)\n+\t\t\t bool fold_conversions, int size_expr)\n {\n   tree op1;\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop, inner_loop,\n-\t\t\t\t c0, fold_conversions, cache,\n-\t\t\t\t size_expr);\n+\t\t\t\t c0, fold_conversions, size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n   op1 = instantiate_scev_r (instantiate_below, evolution_loop, inner_loop,\n-\t\t\t    c1, fold_conversions, cache,\n-\t\t\t    size_expr);\n+\t\t\t    c1, fold_conversions, size_expr);\n   if (op1 == chrec_dont_know)\n     return chrec_dont_know;\n \n@@ -2392,15 +2377,13 @@ instantiate_scev_binary (basic_block instantiate_below,\n static tree\n instantiate_array_ref (basic_block instantiate_below,\n \t\t       struct loop *evolution_loop, struct loop *inner_loop,\n-\t\t       tree chrec,\n-\t\t       bool fold_conversions, instantiate_cache_type &cache,\n-\t\t       int size_expr)\n+\t\t       tree chrec, bool fold_conversions, int size_expr)\n {\n   tree res;\n   tree index = TREE_OPERAND (chrec, 1);\n   tree op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t inner_loop, index,\n-\t\t\t\t fold_conversions, cache, size_expr);\n+\t\t\t\t fold_conversions, size_expr);\n \n   if (op1 == chrec_dont_know)\n     return chrec_dont_know;\n@@ -2431,14 +2414,12 @@ instantiate_array_ref (basic_block instantiate_below,\n static tree\n instantiate_scev_convert (basic_block instantiate_below,\n \t\t\t  struct loop *evolution_loop, struct loop *inner_loop,\n-\t\t\t  tree chrec,\n-\t\t\t  tree type, tree op,\n-\t\t\t  bool fold_conversions,\n-\t\t\t  instantiate_cache_type &cache, int size_expr)\n+\t\t\t  tree chrec, tree type, tree op,\n+\t\t\t  bool fold_conversions, int size_expr)\n {\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t inner_loop, op,\n-\t\t\t\t fold_conversions, cache, size_expr);\n+\t\t\t\t fold_conversions, size_expr);\n \n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n@@ -2483,12 +2464,11 @@ instantiate_scev_not (basic_block instantiate_below,\n \t\t      struct loop *evolution_loop, struct loop *inner_loop,\n \t\t      tree chrec,\n \t\t      enum tree_code code, tree type, tree op,\n-\t\t      bool fold_conversions, instantiate_cache_type &cache,\n-\t\t      int size_expr)\n+\t\t      bool fold_conversions, int size_expr)\n {\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t inner_loop, op,\n-\t\t\t\t fold_conversions, cache, size_expr);\n+\t\t\t\t fold_conversions, size_expr);\n \n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n@@ -2533,25 +2513,24 @@ static tree\n instantiate_scev_3 (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, struct loop *inner_loop,\n \t\t    tree chrec,\n-\t\t    bool fold_conversions, instantiate_cache_type &cache,\n-\t\t    int size_expr)\n+\t\t    bool fold_conversions, int size_expr)\n {\n   tree op1, op2;\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t inner_loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t fold_conversions, cache, size_expr);\n+\t\t\t\t fold_conversions, size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n   op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t    inner_loop, TREE_OPERAND (chrec, 1),\n-\t\t\t    fold_conversions, cache, size_expr);\n+\t\t\t    fold_conversions, size_expr);\n   if (op1 == chrec_dont_know)\n     return chrec_dont_know;\n \n   op2 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t    inner_loop, TREE_OPERAND (chrec, 2),\n-\t\t\t    fold_conversions, cache, size_expr);\n+\t\t\t    fold_conversions, size_expr);\n   if (op2 == chrec_dont_know)\n     return chrec_dont_know;\n \n@@ -2582,19 +2561,18 @@ static tree\n instantiate_scev_2 (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, struct loop *inner_loop,\n \t\t    tree chrec,\n-\t\t    bool fold_conversions, instantiate_cache_type &cache,\n-\t\t    int size_expr)\n+\t\t    bool fold_conversions, int size_expr)\n {\n   tree op1;\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t inner_loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t fold_conversions, cache, size_expr);\n+\t\t\t\t fold_conversions, size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n   op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t    inner_loop, TREE_OPERAND (chrec, 1),\n-\t\t\t    fold_conversions, cache, size_expr);\n+\t\t\t    fold_conversions, size_expr);\n   if (op1 == chrec_dont_know)\n     return chrec_dont_know;\n \n@@ -2623,12 +2601,11 @@ static tree\n instantiate_scev_1 (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, struct loop *inner_loop,\n \t\t    tree chrec,\n-\t\t    bool fold_conversions, instantiate_cache_type &cache,\n-\t\t    int size_expr)\n+\t\t    bool fold_conversions, int size_expr)\n {\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t inner_loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t fold_conversions, cache, size_expr);\n+\t\t\t\t fold_conversions, size_expr);\n \n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n@@ -2657,8 +2634,7 @@ static tree\n instantiate_scev_r (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, struct loop *inner_loop,\n \t\t    tree chrec,\n-\t\t    bool fold_conversions, instantiate_cache_type &cache,\n-\t\t    int size_expr)\n+\t\t    bool fold_conversions, int size_expr)\n {\n   /* Give up if the expression is larger than the MAX that we allow.  */\n   if (size_expr++ > PARAM_VALUE (PARAM_SCEV_MAX_EXPR_SIZE))\n@@ -2674,12 +2650,12 @@ instantiate_scev_r (basic_block instantiate_below,\n     case SSA_NAME:\n       return instantiate_scev_name (instantiate_below, evolution_loop,\n \t\t\t\t    inner_loop, chrec,\n-\t\t\t\t    fold_conversions, cache, size_expr);\n+\t\t\t\t    fold_conversions, size_expr);\n \n     case POLYNOMIAL_CHREC:\n       return instantiate_scev_poly (instantiate_below, evolution_loop,\n \t\t\t\t    inner_loop, chrec,\n-\t\t\t\t    fold_conversions, cache, size_expr);\n+\t\t\t\t    fold_conversions, size_expr);\n \n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n@@ -2690,21 +2666,21 @@ instantiate_scev_r (basic_block instantiate_below,\n \t\t\t\t      TREE_CODE (chrec), chrec_type (chrec),\n \t\t\t\t      TREE_OPERAND (chrec, 0),\n \t\t\t\t      TREE_OPERAND (chrec, 1),\n-\t\t\t\t      fold_conversions, cache, size_expr);\n+\t\t\t\t      fold_conversions, size_expr);\n \n     CASE_CONVERT:\n       return instantiate_scev_convert (instantiate_below, evolution_loop,\n \t\t\t\t       inner_loop, chrec,\n \t\t\t\t       TREE_TYPE (chrec), TREE_OPERAND (chrec, 0),\n-\t\t\t\t       fold_conversions, cache, size_expr);\n+\t\t\t\t       fold_conversions, size_expr);\n \n     case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n       return instantiate_scev_not (instantiate_below, evolution_loop,\n \t\t\t\t   inner_loop, chrec,\n \t\t\t\t   TREE_CODE (chrec), TREE_TYPE (chrec),\n \t\t\t\t   TREE_OPERAND (chrec, 0),\n-\t\t\t\t   fold_conversions, cache, size_expr);\n+\t\t\t\t   fold_conversions, size_expr);\n \n     case ADDR_EXPR:\n     case SCEV_NOT_KNOWN:\n@@ -2716,7 +2692,7 @@ instantiate_scev_r (basic_block instantiate_below,\n     case ARRAY_REF:\n       return instantiate_array_ref (instantiate_below, evolution_loop,\n \t\t\t\t    inner_loop, chrec,\n-\t\t\t\t    fold_conversions, cache, size_expr);\n+\t\t\t\t    fold_conversions, size_expr);\n \n     default:\n       break;\n@@ -2730,17 +2706,17 @@ instantiate_scev_r (basic_block instantiate_below,\n     case 3:\n       return instantiate_scev_3 (instantiate_below, evolution_loop,\n \t\t\t\t inner_loop, chrec,\n-\t\t\t\t fold_conversions, cache, size_expr);\n+\t\t\t\t fold_conversions, size_expr);\n \n     case 2:\n       return instantiate_scev_2 (instantiate_below, evolution_loop,\n \t\t\t\t inner_loop, chrec,\n-\t\t\t\t fold_conversions, cache, size_expr);\n+\t\t\t\t fold_conversions, size_expr);\n \n     case 1:\n       return instantiate_scev_1 (instantiate_below, evolution_loop,\n \t\t\t\t inner_loop, chrec,\n-\t\t\t\t fold_conversions, cache, size_expr);\n+\t\t\t\t fold_conversions, size_expr);\n \n     case 0:\n       return chrec;\n@@ -2764,7 +2740,6 @@ instantiate_scev (basic_block instantiate_below, struct loop *evolution_loop,\n \t\t  tree chrec)\n {\n   tree res;\n-  instantiate_cache_type cache;\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n@@ -2776,8 +2751,21 @@ instantiate_scev (basic_block instantiate_below, struct loop *evolution_loop,\n       fprintf (dump_file, \")\\n\");\n     }\n \n+  bool destr = false;\n+  if (!global_cache)\n+    {\n+      global_cache = new instantiate_cache_type;\n+      destr = true;\n+    }\n+\n   res = instantiate_scev_r (instantiate_below, evolution_loop,\n-\t\t\t    NULL, chrec, false, cache, 0);\n+\t\t\t    NULL, chrec, false, 0);\n+\n+  if (destr)\n+    {\n+      delete global_cache;\n+      global_cache = NULL;\n+    }\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n@@ -2797,9 +2785,22 @@ instantiate_scev (basic_block instantiate_below, struct loop *evolution_loop,\n tree\n resolve_mixers (struct loop *loop, tree chrec)\n {\n-  instantiate_cache_type cache;\n+  bool destr = false;\n+  if (!global_cache)\n+    {\n+      global_cache = new instantiate_cache_type;\n+      destr = true;\n+    }\n+\n   tree ret = instantiate_scev_r (block_before_loop (loop), loop, NULL,\n-\t\t\t\t chrec, true, cache, 0);\n+\t\t\t\t chrec, true, 0);\n+\n+  if (destr)\n+    {\n+      delete global_cache;\n+      global_cache = NULL;\n+    }\n+\n   return ret;\n }\n "}]}