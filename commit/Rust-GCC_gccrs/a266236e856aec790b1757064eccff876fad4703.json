{"sha": "a266236e856aec790b1757064eccff876fad4703", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2NjIzNmU4NTZhZWM3OTBiMTc1NzA2NGVjY2ZmODc2ZmFkNDcwMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-08-10T13:14:56Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-08-10T13:14:56Z"}, "message": "Add new *_atomic counter update function\n\n\tPR gcov-profile/58306\n\t* Makefile.in: New functions (modules) are added.\n\t* libgcov-profiler.c (__gcov_interval_profiler_atomic): New\n\tfunction.\n\t(__gcov_pow2_profiler_atomic): New function.\n\t(__gcov_one_value_profiler_body): New argument is instroduced.\n\t(__gcov_one_value_profiler): Call with the new argument.\n\t(__gcov_one_value_profiler_atomic): Likewise.\n\t(__gcov_indirect_call_profiler_v2): Likewise.\n\t(__gcov_time_profiler_atomic): New function.\n\t(__gcov_average_profiler_atomic): Likewise.\n\t(__gcov_ior_profiler_atomic): Likewise.\n\t* libgcov.h: Declare the aforementioned functions.\n\tPR gcov-profile/58306\n\t* gcc.dg/tree-prof/val-profiler-threads-1.c: New test.\n\tPR gcov-profile/58306\n\t* tree-profile.c (gimple_init_edge_profiler): Create conditionally\n\tatomic variants of profile update functions.\n\nFrom-SVN: r239324", "tree": {"sha": "4e0657ae5a14e0c48b2bae73db433a086900d985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e0657ae5a14e0c48b2bae73db433a086900d985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a266236e856aec790b1757064eccff876fad4703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a266236e856aec790b1757064eccff876fad4703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a266236e856aec790b1757064eccff876fad4703", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a266236e856aec790b1757064eccff876fad4703/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22063dbc90d0eb8a7cc7939e0941899f90b403db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22063dbc90d0eb8a7cc7939e0941899f90b403db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22063dbc90d0eb8a7cc7939e0941899f90b403db"}], "stats": {"total": 234, "additions": 209, "deletions": 25}, "files": [{"sha": "7dbe48608f0493026b7dd8df01514e21cb246a65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a266236e856aec790b1757064eccff876fad4703/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a266236e856aec790b1757064eccff876fad4703/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a266236e856aec790b1757064eccff876fad4703", "patch": "@@ -1,3 +1,9 @@\n+2016-08-10  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/58306\n+\t* tree-profile.c (gimple_init_edge_profiler): Create conditionally\n+\tatomic variants of profile update functions.\n+\n 2016-08-10  Martin Liska  <mliska@suse.cz>\n \n \tCherry picked (and modified) from google-4_7 branch"}, {"sha": "c9f58fec41184c5d26c83644f97e02f58ed7ad59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a266236e856aec790b1757064eccff876fad4703/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a266236e856aec790b1757064eccff876fad4703/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a266236e856aec790b1757064eccff876fad4703", "patch": "@@ -1,3 +1,8 @@\n+2016-08-10  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/58306\n+\t* gcc.dg/tree-prof/val-profiler-threads-1.c: New test.\n+\n 2016-08-10  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/gcov/gcov-threads-1.C: New test."}, {"sha": "e9b04a0e67d7c8b91e9516380c15c2da880e1aa9", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-profiler-threads-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a266236e856aec790b1757064eccff876fad4703/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-profiler-threads-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a266236e856aec790b1757064eccff876fad4703/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-profiler-threads-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-profiler-threads-1.c?ref=a266236e856aec790b1757064eccff876fad4703", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options \"-O0 -pthread -fprofile-update=atomic\" } */\n+#include <pthread.h>\n+\n+#define NUM_THREADS\t8\n+#define SIZE 1024\n+#define ITERATIONS (1000 * 1000)\n+\n+char buffer[SIZE];\n+char buffer2[SIZE];\n+\n+void *copy_memory(char *dst, char *src, unsigned size)\n+{\n+   for (unsigned i = 0; i < ITERATIONS; i++)\n+   {\n+     dst[size % 10] = src[size % 20];\n+   }\n+}\n+\n+void *foo(void *d)\n+{\n+  copy_memory (buffer, buffer2, SIZE);\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+   pthread_t threads[NUM_THREADS];\n+   int rc;\n+   long t;\n+   for(t=0;t<NUM_THREADS;t++){\n+     rc = pthread_create(&threads[t], NULL, foo, 0);\n+     if (rc){\n+\t return 1;\n+       }\n+     }\n+\n+   int retval;\n+   for(t=0;t<NUM_THREADS;t++)\n+     pthread_join (threads[t], (void**)&retval);\n+\n+   return buffer[10];\n+}"}, {"sha": "fdf0201f2e405ccc39c13b97da8a610511b94679", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a266236e856aec790b1757064eccff876fad4703/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a266236e856aec790b1757064eccff876fad4703/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=a266236e856aec790b1757064eccff876fad4703", "patch": "@@ -128,9 +128,13 @@ gimple_init_edge_profiler (void)\n   tree average_profiler_fn_type;\n   tree time_profiler_fn_type;\n   const char *profiler_fn_name;\n+  const char *fn_name;\n \n   if (!gcov_type_node)\n     {\n+      const char *fn_suffix\n+\t= flag_profile_update == PROFILE_UPDATE_ATOMIC ? \"_atomic\" : \"\";\n+\n       gcov_type_node = get_gcov_type ();\n       gcov_type_ptr = build_pointer_type (gcov_type_node);\n \n@@ -140,9 +144,10 @@ gimple_init_edge_profiler (void)\n \t\t\t\t\t  gcov_type_ptr, gcov_type_node,\n \t\t\t\t\t  integer_type_node,\n \t\t\t\t\t  unsigned_type_node, NULL_TREE);\n-      tree_interval_profiler_fn\n-\t      = build_fn_decl (\"__gcov_interval_profiler\",\n-\t\t\t\t     interval_profiler_fn_type);\n+      fn_name = concat (\"__gcov_interval_profiler\", fn_suffix, NULL);\n+      tree_interval_profiler_fn = build_fn_decl (fn_name,\n+\t\t\t\t\t\t interval_profiler_fn_type);\n+      free (CONST_CAST (char *, fn_name));\n       TREE_NOTHROW (tree_interval_profiler_fn) = 1;\n       DECL_ATTRIBUTES (tree_interval_profiler_fn)\n \t= tree_cons (get_identifier (\"leaf\"), NULL,\n@@ -153,8 +158,9 @@ gimple_init_edge_profiler (void)\n \t      = build_function_type_list (void_type_node,\n \t\t\t\t\t  gcov_type_ptr, gcov_type_node,\n \t\t\t\t\t  NULL_TREE);\n-      tree_pow2_profiler_fn = build_fn_decl (\"__gcov_pow2_profiler\",\n-\t\t\t\t\t\t   pow2_profiler_fn_type);\n+      fn_name = concat (\"__gcov_pow2_profiler\", fn_suffix, NULL);\n+      tree_pow2_profiler_fn = build_fn_decl (fn_name, pow2_profiler_fn_type);\n+      free (CONST_CAST (char *, fn_name));\n       TREE_NOTHROW (tree_pow2_profiler_fn) = 1;\n       DECL_ATTRIBUTES (tree_pow2_profiler_fn)\n \t= tree_cons (get_identifier (\"leaf\"), NULL,\n@@ -165,9 +171,10 @@ gimple_init_edge_profiler (void)\n \t      = build_function_type_list (void_type_node,\n \t\t\t\t\t  gcov_type_ptr, gcov_type_node,\n \t\t\t\t\t  NULL_TREE);\n-      tree_one_value_profiler_fn\n-\t      = build_fn_decl (\"__gcov_one_value_profiler\",\n-\t\t\t\t     one_value_profiler_fn_type);\n+      fn_name = concat (\"__gcov_one_value_profiler\", fn_suffix, NULL);\n+      tree_one_value_profiler_fn = build_fn_decl (fn_name,\n+\t\t\t\t\t\t  one_value_profiler_fn_type);\n+      free (CONST_CAST (char *, fn_name));\n       TREE_NOTHROW (tree_one_value_profiler_fn) = 1;\n       DECL_ATTRIBUTES (tree_one_value_profiler_fn)\n \t= tree_cons (get_identifier (\"leaf\"), NULL,\n@@ -197,9 +204,9 @@ gimple_init_edge_profiler (void)\n       time_profiler_fn_type\n \t       = build_function_type_list (void_type_node,\n \t\t\t\t\t  gcov_type_ptr, NULL_TREE);\n-      tree_time_profiler_fn\n-\t      = build_fn_decl (\"__gcov_time_profiler\",\n-\t\t\t\t     time_profiler_fn_type);\n+      fn_name = concat (\"__gcov_time_profiler\", fn_suffix, NULL);\n+      tree_time_profiler_fn = build_fn_decl (fn_name, time_profiler_fn_type);\n+      free (CONST_CAST (char *, fn_name));\n       TREE_NOTHROW (tree_time_profiler_fn) = 1;\n       DECL_ATTRIBUTES (tree_time_profiler_fn)\n \t= tree_cons (get_identifier (\"leaf\"), NULL,\n@@ -209,16 +216,17 @@ gimple_init_edge_profiler (void)\n       average_profiler_fn_type\n \t      = build_function_type_list (void_type_node,\n \t\t\t\t\t  gcov_type_ptr, gcov_type_node, NULL_TREE);\n-      tree_average_profiler_fn\n-\t      = build_fn_decl (\"__gcov_average_profiler\",\n-\t\t\t\t     average_profiler_fn_type);\n+      fn_name = concat (\"__gcov_average_profiler\", fn_suffix, NULL);\n+      tree_average_profiler_fn = build_fn_decl (fn_name,\n+\t\t\t\t\t\taverage_profiler_fn_type);\n+      free (CONST_CAST (char *, fn_name));\n       TREE_NOTHROW (tree_average_profiler_fn) = 1;\n       DECL_ATTRIBUTES (tree_average_profiler_fn)\n \t= tree_cons (get_identifier (\"leaf\"), NULL,\n \t\t     DECL_ATTRIBUTES (tree_average_profiler_fn));\n-      tree_ior_profiler_fn\n-\t      = build_fn_decl (\"__gcov_ior_profiler\",\n-\t\t\t\t     average_profiler_fn_type);\n+      fn_name = concat (\"__gcov_ior_profiler\", fn_suffix, NULL);\n+      tree_ior_profiler_fn = build_fn_decl (fn_name, average_profiler_fn_type);\n+      free (CONST_CAST (char *, fn_name));\n       TREE_NOTHROW (tree_ior_profiler_fn) = 1;\n       DECL_ATTRIBUTES (tree_ior_profiler_fn)\n \t= tree_cons (get_identifier (\"leaf\"), NULL,"}, {"sha": "49186faa70ff9997656dd128a0619a1498cfbead", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a266236e856aec790b1757064eccff876fad4703/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a266236e856aec790b1757064eccff876fad4703/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=a266236e856aec790b1757064eccff876fad4703", "patch": "@@ -1,3 +1,19 @@\n+2016-08-10  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/58306\n+\t* Makefile.in: New functions (modules) are added.\n+\t* libgcov-profiler.c (__gcov_interval_profiler_atomic): New\n+\tfunction.\n+\t(__gcov_pow2_profiler_atomic): New function.\n+\t(__gcov_one_value_profiler_body): New argument is instroduced.\n+\t(__gcov_one_value_profiler): Call with the new argument.\n+\t(__gcov_one_value_profiler_atomic): Likewise.\n+\t(__gcov_indirect_call_profiler_v2): Likewise.\n+\t(__gcov_time_profiler_atomic): New function.\n+\t(__gcov_average_profiler_atomic): Likewise.\n+\t(__gcov_ior_profiler_atomic): Likewise.\n+\t* libgcov.h: Declare the aforementioned functions.\n+\n 2016-08-09  Martin Liska  <mliska@suse.cz>\n \n \t* libgcov-util.c: Fix typo and GNU coding style."}, {"sha": "ba37c657baf3658e9d779886567e374b2f8ab275", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a266236e856aec790b1757064eccff876fad4703/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a266236e856aec790b1757064eccff876fad4703/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=a266236e856aec790b1757064eccff876fad4703", "patch": "@@ -858,10 +858,18 @@ include $(iterator)\n \n LIBGCOV_MERGE = _gcov_merge_add _gcov_merge_single _gcov_merge_delta\t\\\n \t_gcov_merge_ior _gcov_merge_time_profile _gcov_merge_icall_topn\n-LIBGCOV_PROFILER = _gcov_interval_profiler _gcov_pow2_profiler\t\t\\\n+LIBGCOV_PROFILER = _gcov_interval_profiler\t\t\t\t\\\n+\t_gcov_interval_profiler_atomic\t\t\t\t\t\\\n+\t_gcov_pow2_profiler\t\t\t\t\t\t\\\n+\t_gcov_pow2_profiler_atomic\t\t\t\t\t\\\n \t_gcov_one_value_profiler\t\t\t\t\t\\\n- \t_gcov_average_profiler _gcov_ior_profiler\t\t\t\\\n-\t_gcov_indirect_call_profiler_v2 _gcov_time_profiler\t\t\\\n+\t_gcov_one_value_profiler_atomic\t\t\t\t\t\\\n+\t_gcov_average_profiler\t\t\t\t\t\t\\\n+\t_gcov_average_profiler_atomic\t\t\t\t\t\\\n+\t_gcov_ior_profiler\t\t\t\t\t\t\\\n+\t_gcov_ior_profiler_atomic\t\t\t\t\t\\\n+\t_gcov_indirect_call_profiler_v2\t\t\t\t\t\\\n+\t_gcov_time_profiler\t\t\t\t\t\t\\\n \t_gcov_indirect_call_topn_profiler\n LIBGCOV_INTERFACE = _gcov_dump _gcov_flush _gcov_fork\t\t\t\\\n \t_gcov_execl _gcov_execlp\t\t\t\t\t\\"}, {"sha": "70a821dc6257eb98e4aa89df0a9bbd5c4d4241c4", "filename": "libgcc/libgcov-profiler.c", "status": "modified", "additions": 98, "deletions": 5, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a266236e856aec790b1757064eccff876fad4703/libgcc%2Flibgcov-profiler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a266236e856aec790b1757064eccff876fad4703/libgcc%2Flibgcov-profiler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-profiler.c?ref=a266236e856aec790b1757064eccff876fad4703", "patch": "@@ -46,6 +46,26 @@ __gcov_interval_profiler (gcov_type *counters, gcov_type value,\n }\n #endif\n \n+#ifdef L_gcov_interval_profiler_atomic\n+/* If VALUE is in interval <START, START + STEPS - 1>, then increases the\n+   corresponding counter in COUNTERS.  If the VALUE is above or below\n+   the interval, COUNTERS[STEPS] or COUNTERS[STEPS + 1] is increased\n+   instead.  Function is thread-safe.  */\n+\n+void\n+__gcov_interval_profiler_atomic (gcov_type *counters, gcov_type value,\n+\t\t\t\t int start, unsigned steps)\n+{\n+  gcov_type delta = value - start;\n+  if (delta < 0)\n+    __atomic_fetch_add (&counters[steps + 1], 1, MEMMODEL_RELAXED);\n+  else if (delta >= steps)\n+    __atomic_fetch_add (&counters[steps], 1, MEMMODEL_RELAXED);\n+  else\n+    __atomic_fetch_add (&counters[delta], 1, MEMMODEL_RELAXED);\n+}\n+#endif\n+\n #ifdef L_gcov_pow2_profiler\n /* If VALUE is a power of two, COUNTERS[1] is incremented.  Otherwise\n    COUNTERS[0] is incremented.  */\n@@ -60,6 +80,21 @@ __gcov_pow2_profiler (gcov_type *counters, gcov_type value)\n }\n #endif\n \n+#ifdef L_gcov_pow2_profiler_atomic\n+/* If VALUE is a power of two, COUNTERS[1] is incremented.  Otherwise\n+   COUNTERS[0] is incremented.  Function is thread-safe.  */\n+\n+void\n+__gcov_pow2_profiler_atomic (gcov_type *counters, gcov_type value)\n+{\n+  if (value == 0 || (value & (value - 1)))\n+    __atomic_fetch_add (&counters[0], 1, MEMMODEL_RELAXED);\n+  else\n+    __atomic_fetch_add (&counters[1], 1, MEMMODEL_RELAXED);\n+}\n+#endif\n+\n+\n /* Tries to determine the most common value among its inputs.  Checks if the\n    value stored in COUNTERS[0] matches VALUE.  If this is the case, COUNTERS[1]\n    is incremented.  If this is not the case and COUNTERS[1] is not zero,\n@@ -68,10 +103,12 @@ __gcov_pow2_profiler (gcov_type *counters, gcov_type value)\n    function is called more than 50% of the time with one value, this value\n    will be in COUNTERS[0] in the end.\n \n-   In any case, COUNTERS[2] is incremented.  */\n+   In any case, COUNTERS[2] is incremented.  If USE_ATOMIC is set to 1,\n+   COUNTERS[2] is updated with an atomic instruction.  */\n \n static inline void\n-__gcov_one_value_profiler_body (gcov_type *counters, gcov_type value)\n+__gcov_one_value_profiler_body (gcov_type *counters, gcov_type value,\n+\t\t\t\tint use_atomic)\n {\n   if (value == counters[0])\n     counters[1]++;\n@@ -82,14 +119,36 @@ __gcov_one_value_profiler_body (gcov_type *counters, gcov_type value)\n     }\n   else\n     counters[1]--;\n-  counters[2]++;\n+\n+  if (use_atomic)\n+    __atomic_fetch_add (&counters[2], 1, MEMMODEL_RELAXED);\n+  else\n+    counters[2]++;\n }\n \n #ifdef L_gcov_one_value_profiler\n void\n __gcov_one_value_profiler (gcov_type *counters, gcov_type value)\n {\n-  __gcov_one_value_profiler_body (counters, value);\n+  __gcov_one_value_profiler_body (counters, value, 0);\n+}\n+#endif\n+\n+#ifdef L_gcov_one_value_profiler_atomic\n+\n+/* Update one value profilers (COUNTERS) for a given VALUE.\n+\n+   CAVEAT: Following function is not thread-safe, only total number\n+   of executions (COUNTERS[2]) is update with an atomic instruction.\n+   Problem is that one cannot atomically update two counters\n+   (COUNTERS[0] and COUNTERS[1]), for more information please read\n+   following email thread:\n+   https://gcc.gnu.org/ml/gcc-patches/2016-08/msg00024.html.  */\n+\n+void\n+__gcov_one_value_profiler_atomic (gcov_type *counters, gcov_type value)\n+{\n+  __gcov_one_value_profiler_body (counters, value, 1);\n }\n #endif\n \n@@ -265,7 +324,7 @@ __gcov_indirect_call_profiler_v2 (gcov_type value, void* cur_func)\n   if (cur_func == __gcov_indirect_call_callee\n       || (__LIBGCC_VTABLE_USES_DESCRIPTORS__ && __gcov_indirect_call_callee\n           && *(void **) cur_func == *(void **) __gcov_indirect_call_callee))\n-    __gcov_one_value_profiler_body (__gcov_indirect_call_counters, value);\n+    __gcov_one_value_profiler_body (__gcov_indirect_call_counters, value, 0);\n }\n #endif\n \n@@ -282,8 +341,19 @@ __gcov_time_profiler (gcov_type* counters)\n   if (!counters[0])\n     counters[0] = ++function_counter;\n }\n+\n+/* Sets corresponding COUNTERS if there is no value.\n+   Function is thread-safe.  */\n+\n+void\n+__gcov_time_profiler_atomic (gcov_type* counters)\n+{\n+  if (!counters[0])\n+    counters[0] = __atomic_add_fetch (&function_counter, 1, MEMMODEL_RELAXED);\n+}\n #endif\n \n+\n #ifdef L_gcov_average_profiler\n /* Increase corresponding COUNTER by VALUE.  FIXME: Perhaps we want\n    to saturate up.  */\n@@ -296,6 +366,18 @@ __gcov_average_profiler (gcov_type *counters, gcov_type value)\n }\n #endif\n \n+#ifdef L_gcov_average_profiler_atomic\n+/* Increase corresponding COUNTER by VALUE.  FIXME: Perhaps we want\n+   to saturate up.  Function is thread-safe.  */\n+\n+void\n+__gcov_average_profiler_atomic (gcov_type *counters, gcov_type value)\n+{\n+  __atomic_fetch_add (&counters[0], value, MEMMODEL_RELAXED);\n+  __atomic_fetch_add (&counters[1], 1, MEMMODEL_RELAXED);\n+}\n+#endif\n+\n #ifdef L_gcov_ior_profiler\n /* Bitwise-OR VALUE into COUNTER.  */\n \n@@ -306,4 +388,15 @@ __gcov_ior_profiler (gcov_type *counters, gcov_type value)\n }\n #endif\n \n+#ifdef L_gcov_ior_profiler_atomic\n+/* Bitwise-OR VALUE into COUNTER.  Function is thread-safe.  */\n+\n+void\n+__gcov_ior_profiler_atomic (gcov_type *counters, gcov_type value)\n+{\n+  __atomic_fetch_or (&counters[0], value, MEMMODEL_RELAXED);\n+}\n+#endif\n+\n+\n #endif /* inhibit_libc */"}, {"sha": "25147de2be739b9ced5596699fa7b2a9da84b4b7", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a266236e856aec790b1757064eccff876fad4703/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a266236e856aec790b1757064eccff876fad4703/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=a266236e856aec790b1757064eccff876fad4703", "patch": "@@ -268,12 +268,19 @@ extern void __gcov_merge_icall_topn (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n \n /* The profiler functions.  */\n extern void __gcov_interval_profiler (gcov_type *, gcov_type, int, unsigned);\n+extern void __gcov_interval_profiler_atomic (gcov_type *, gcov_type, int,\n+\t\t\t\t\t     unsigned);\n extern void __gcov_pow2_profiler (gcov_type *, gcov_type);\n+extern void __gcov_pow2_profiler_atomic (gcov_type *, gcov_type);\n extern void __gcov_one_value_profiler (gcov_type *, gcov_type);\n+extern void __gcov_one_value_profiler_atomic (gcov_type *, gcov_type);\n extern void __gcov_indirect_call_profiler_v2 (gcov_type, void *);\n extern void __gcov_time_profiler (gcov_type *);\n+extern void __gcov_time_profiler_atomic (gcov_type *);\n extern void __gcov_average_profiler (gcov_type *, gcov_type);\n+extern void __gcov_average_profiler_atomic (gcov_type *, gcov_type);\n extern void __gcov_ior_profiler (gcov_type *, gcov_type);\n+extern void __gcov_ior_profiler_atomic (gcov_type *, gcov_type);\n extern void __gcov_indirect_call_topn_profiler (gcov_type, void *);\n extern void gcov_sort_n_vals (gcov_type *, int);\n "}]}