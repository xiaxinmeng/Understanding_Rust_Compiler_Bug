{"sha": "8f1711ef3486b0727ccf6b5aabddda5c7d986457", "node_id": "C_kwDOANBUbNoAKDhmMTcxMWVmMzQ4NmIwNzI3Y2NmNmI1YWFiZGRkYTVjN2Q5ODY0NTc", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-03-15T21:30:33Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-03-15T21:30:33Z"}, "message": "PR 109125 13 regression SIGBUS in m2pim_ldtoa_ldtoa\n\nThis patch fixes more bool int parameter mismatches\nfound in dtoa and ldtoa.\n\ngcc/m2/ChangeLog:\n\n\tPR modula2/109125\n\t* gm2-libs-ch/dtoa.cc (dtoa_strtod): Replace int with bool.\n\t* gm2-libs-ch/ldtoa.cc (ldtoa_strtold): Replace int with bool.\n\nlibgm2/ChangeLog:\n\n\tPR modula2/109125\n\t* libm2pim/dtoa.cc (TRUE): Remove.\n\t(FALSE): Remove.  Replace int with bool.\n\t* libm2pim/ldtoa.cc (TRUE): Remove.\n\t(FALSE): Remove.  Replace int with bool.\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "d7b8a96fc8e4388526d6b305c82dcf3088e1da50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7b8a96fc8e4388526d6b305c82dcf3088e1da50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f1711ef3486b0727ccf6b5aabddda5c7d986457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1711ef3486b0727ccf6b5aabddda5c7d986457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1711ef3486b0727ccf6b5aabddda5c7d986457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1711ef3486b0727ccf6b5aabddda5c7d986457/comments", "author": null, "committer": null, "parents": [{"sha": "57052c6ed59c1a2ee4a67982f960e08593956955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57052c6ed59c1a2ee4a67982f960e08593956955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57052c6ed59c1a2ee4a67982f960e08593956955"}], "stats": {"total": 34, "additions": 10, "deletions": 24}, "files": [{"sha": "19663238bfb80b97006ab6d9aa0f5fc301ef66f9", "filename": "gcc/m2/gm2-libs-ch/dtoa.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1711ef3486b0727ccf6b5aabddda5c7d986457/gcc%2Fm2%2Fgm2-libs-ch%2Fdtoa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1711ef3486b0727ccf6b5aabddda5c7d986457/gcc%2Fm2%2Fgm2-libs-ch%2Fdtoa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-libs-ch%2Fdtoa.cc?ref=8f1711ef3486b0727ccf6b5aabddda5c7d986457", "patch": "@@ -48,7 +48,7 @@ typedef enum Mode { maxsignicant, decimaldigits } Mode;\n    (ndigits may be negative).  */\n \n double\n-dtoa_strtod (const char *s, int *error)\n+dtoa_strtod (const char *s, bool *error)\n {\n   char *endp;\n   double d;\n@@ -58,7 +58,7 @@ dtoa_strtod (const char *s, int *error)\n   if (endp != NULL && (*endp == '\\0'))\n     *error = (errno != 0);\n   else\n-    *error = TRUE;\n+    *error = true;\n   return d;\n }\n "}, {"sha": "9d01fa1cc0152be628e78acc9034cac1a99c926b", "filename": "gcc/m2/gm2-libs-ch/ldtoa.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1711ef3486b0727ccf6b5aabddda5c7d986457/gcc%2Fm2%2Fgm2-libs-ch%2Fldtoa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1711ef3486b0727ccf6b5aabddda5c7d986457/gcc%2Fm2%2Fgm2-libs-ch%2Fldtoa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-libs-ch%2Fldtoa.cc?ref=8f1711ef3486b0727ccf6b5aabddda5c7d986457", "patch": "@@ -52,7 +52,7 @@ extern int dtoa_calcsign (char *p, int str_size);\n    (ndigits may be negative).  */\n \n long double\n-ldtoa_strtold (const char *s, int *error)\n+ldtoa_strtold (const char *s, bool *error)\n {\n   char *endp;\n   long double d;\n@@ -67,7 +67,7 @@ ldtoa_strtold (const char *s, int *error)\n   if (endp != NULL && (*endp == '\\0'))\n     *error = (errno != 0);\n   else\n-    *error = TRUE;\n+    *error = true;\n   return d;\n }\n "}, {"sha": "509027d778d973c1975d75c4d1a91990f71d2cca", "filename": "libgm2/libm2pim/dtoa.cc", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1711ef3486b0727ccf6b5aabddda5c7d986457/libgm2%2Flibm2pim%2Fdtoa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1711ef3486b0727ccf6b5aabddda5c7d986457/libgm2%2Flibm2pim%2Fdtoa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgm2%2Flibm2pim%2Fdtoa.cc?ref=8f1711ef3486b0727ccf6b5aabddda5c7d986457", "patch": "@@ -75,13 +75,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define NULL (void *)0\n #endif\n \n-#if !defined(TRUE)\n-#define TRUE (1 == 1)\n-#endif\n-#if !defined(FALSE)\n-#define FALSE (1 == 0)\n-#endif\n-\n #if defined(HAVE_STDLIB_H)\n #if !defined(_ISOC99_SOURCE)\n #define _ISOC99_SOURCE\n@@ -110,7 +103,7 @@ typedef enum Mode { maxsignicant, decimaldigits } Mode;\n    contain ndigits past the decimal point (ndigits may be negative).  */\n \n extern \"C\" double\n-EXPORT(strtod) (const char *s, int *error)\n+EXPORT(strtod) (const char *s, bool *error)\n {\n   char *endp;\n   double d;\n@@ -123,10 +116,10 @@ EXPORT(strtod) (const char *s, int *error)\n #if defined(HAVE_ERRNO_H)\n     *error = (errno != 0);\n #else\n-    *error = FALSE;\n+    *error = false;\n #endif\n   else\n-    *error = TRUE;\n+    *error = true;\n   return d;\n }\n "}, {"sha": "50a65e47aa3701ea0cebad9ed83b2b19be2934ed", "filename": "libgm2/libm2pim/ldtoa.cc", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1711ef3486b0727ccf6b5aabddda5c7d986457/libgm2%2Flibm2pim%2Fldtoa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1711ef3486b0727ccf6b5aabddda5c7d986457/libgm2%2Flibm2pim%2Fldtoa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgm2%2Flibm2pim%2Fldtoa.cc?ref=8f1711ef3486b0727ccf6b5aabddda5c7d986457", "patch": "@@ -91,13 +91,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define NULL (void *)0\n #endif\n \n-#if !defined(TRUE)\n-#define TRUE (1 == 1)\n-#endif\n-#if !defined(FALSE)\n-#define FALSE (1 == 0)\n-#endif\n-\n #define MAX_FP_DIGITS 500\n \n typedef enum Mode { maxsignicant, decimaldigits } Mode;\n@@ -113,7 +106,7 @@ extern \"C\" int IMPORT(dtoa,calcsign) (char *p, int str_size);\n    contain ndigits past the decimal point (ndigits may be negative).  */\n \n extern \"C\" long double\n-EXPORT(strtold) (const char *s, int *error)\n+EXPORT(strtold) (const char *s, bool *error)\n {\n   char *endp;\n   long double d;\n@@ -131,10 +124,10 @@ EXPORT(strtold) (const char *s, int *error)\n #if defined(HAVE_ERRNO_H)\n     *error = (errno != 0);\n #else\n-    *error = FALSE;\n+    *error = false;\n #endif\n   else\n-    *error = TRUE;\n+    *error = true;\n   return d;\n }\n "}]}