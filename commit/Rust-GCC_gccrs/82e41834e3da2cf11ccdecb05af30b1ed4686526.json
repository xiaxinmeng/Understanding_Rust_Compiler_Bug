{"sha": "82e41834e3da2cf11ccdecb05af30b1ed4686526", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlNDE4MzRlM2RhMmNmMTFjY2RlY2IwNWFmMzBiMWVkNDY4NjUyNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-11-15T05:21:09Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-11-15T05:21:09Z"}, "message": "aix31.h: Fix comment formatting.\n\n\t* config/rs6000/aix31.h: Fix comment formatting.\n\t* config/rs6000/beos.h: Likewise.\n\t* config/rs6000/darwin.h: Likewise.\n\t* config/rs6000/eabi.asm: Likewise.\n\t* config/rs6000/linux.h: Likewise.\n\t* config/rs6000/linux64.h: Likewise.\n\t* config/rs6000/lynx.h: Likewise.\n\t* config/rs6000/netbsd.h: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/rs6000/rs6000.h: Likewise.\n\t* config/rs6000/rs6000.md: Likewise.\n\t* config/rs6000/sol2.h: Likewise.\n\t* config/rs6000/tramp.asm: Likewise.\n\t* config/rs6000/xcoff.h: Likewise.\n\t* config/rs6000/xm-beos.h: Likewise.\n\nFrom-SVN: r47040", "tree": {"sha": "c24f355002d7930878d6f5494de2e04bd2a9da29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c24f355002d7930878d6f5494de2e04bd2a9da29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82e41834e3da2cf11ccdecb05af30b1ed4686526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e41834e3da2cf11ccdecb05af30b1ed4686526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e41834e3da2cf11ccdecb05af30b1ed4686526", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e41834e3da2cf11ccdecb05af30b1ed4686526/comments", "author": null, "committer": null, "parents": [{"sha": "7a0f9993298e7669bb44adad4074cae02ba0fae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0f9993298e7669bb44adad4074cae02ba0fae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0f9993298e7669bb44adad4074cae02ba0fae9"}], "stats": {"total": 112, "additions": 65, "deletions": 47}, "files": [{"sha": "8aed0a44900e6994bada1d2b0b287062077a7af1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -1,3 +1,21 @@\n+2001-11-15  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/rs6000/aix31.h: Fix comment formatting.\n+\t* config/rs6000/beos.h: Likewise.\n+\t* config/rs6000/darwin.h: Likewise.\n+\t* config/rs6000/eabi.asm: Likewise.\n+\t* config/rs6000/linux.h: Likewise.\n+\t* config/rs6000/linux64.h: Likewise.\n+\t* config/rs6000/lynx.h: Likewise.\n+\t* config/rs6000/netbsd.h: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/rs6000/rs6000.h: Likewise.\n+\t* config/rs6000/rs6000.md: Likewise.\n+\t* config/rs6000/sol2.h: Likewise.\n+\t* config/rs6000/tramp.asm: Likewise.\n+\t* config/rs6000/xcoff.h: Likewise.\n+\t* config/rs6000/xm-beos.h: Likewise.\n+\n 2001-11-14  Alan Matsuoka  <alanm@redhat.com>\n \n \t* rtl.def (INCLUDE) : Define.  "}, {"sha": "688e588dc561f435e94820928fc62c7e886f6146", "filename": "gcc/config/rs6000/aix31.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Faix31.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Faix31.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix31.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -51,7 +51,7 @@ Boston, MA 02111-1307, USA.  */\n }\n \n /* Similar, but for libcall.  We only have to worry about the function name,\n-   not that of the descriptor. */\n+   not that of the descriptor.  */\n \n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\\\n { fputs (\"\\t.extern .\", FILE);\t\t\t\\"}, {"sha": "60bb75c675b578b1479d16c6c6d87b74a932332d", "filename": "gcc/config/rs6000/beos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fbeos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fbeos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fbeos.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -51,7 +51,7 @@ Boston, MA 02111-1307, USA.  */\n    relatively low default stack size of 256K with no way to expand it.\n    So anything we compile for the BeOS target should not use the\n    builtin alloca.  This also has the unwanted side effect of\n-   disabling all builtin functions though. */\n+   disabling all builtin functions though.  */\n \n #undef CC1_SPEC\n #define CC1_SPEC \"%{!fbuiltin: -fno-builtin}\"\n@@ -84,7 +84,7 @@ Boston, MA 02111-1307, USA.  */\n    On BeOS the ld executable is actually a linker front end that first runs\n    the GNU linker with the -r option to generate a relocatable XCOFF output\n    file, and then runs Metrowork's linker (mwld) to generate a fully linked\n-   executable. */\n+   executable.  */\n \n #undef LIB_SPEC\n #define LIB_SPEC \"\"\n@@ -96,11 +96,11 @@ Boston, MA 02111-1307, USA.  */\n #define STARTFILE_SPEC \"\"\n \n /* Text to write out after a CALL that may be replaced by glue code by\n-   the loader. */\n+   the loader.  */\n \n #undef RS6000_CALL_GLUE\n #define RS6000_CALL_GLUE \"cror 15,15,15\"\n \n-/* Struct alignments are done on 4 byte boundaries for all types. */\n+/* Struct alignments are done on 4 byte boundaries for all types.  */\n #undef BIGGEST_FIELD_ALIGNMENT\n #define BIGGEST_FIELD_ALIGNMENT 32"}, {"sha": "dfc628005e2d5c774b1704949fef5cbf83780f0a", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -214,5 +214,5 @@ Boston, MA 02111-1307, USA.  */\n    ? MAX (MAX ((COMPUTED), (SPECIFIED)), 64)\t\t\\\n    : MAX ((COMPUTED), (SPECIFIED)))\n /* XXX: Darwin supports neither .quad, or .llong, but it also doesn't\n-   support 64 bit powerpc either, so this just keeps things happy. */\n+   support 64 bit powerpc either, so this just keeps things happy.  */\n #define DOUBLE_INT_ASM_OP \"\\t.quad\\t\""}, {"sha": "b7452582a57a9515ac30067e914d24a20bf05fcd", "filename": "gcc/config/rs6000/eabi.asm", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Feabi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Feabi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.asm?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -160,7 +160,7 @@ FUNC_START(__eabi)\n \tstwx\t1,10,12\t\t\t\t/* store a non-zero value in the done flag */\n \tbeq+\t0,.Lsdata\t\t\t/* skip if we don't need to relocate */\n \n-/* We need to relocate the .got2 pointers. */\n+/* We need to relocate the .got2 pointers.  */\n \n \tlwz\t3,.Lgot2s(11)\t\t\t/* GOT2 pointers start */\n \tlwz\t4,.Lgot2e(11)\t\t\t/* GOT2 pointers end */\n@@ -298,9 +298,9 @@ FUNC_START(__eabi_uconvert)\n \n FUNC_END(__eabi_uconvert)\n \n-/* Routines for saving floating point registers, called by the compiler. */\n+/* Routines for saving floating point registers, called by the compiler.  */\n /* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the floating point save area. */\n+/* function, just beyond the end of the floating point save area.  */\n \n FUNC_START(_savefpr_14)\tstfd\t14,-144(11)\t/* save fp registers */\n FUNC_START(_savefpr_15)\tstfd\t15,-136(11)\n@@ -340,9 +340,9 @@ FUNC_END(_savefpr_16)\n FUNC_END(_savefpr_15)\n FUNC_END(_savefpr_14)\n \n-/* Routines for saving integer registers, called by the compiler. */\n+/* Routines for saving integer registers, called by the compiler.  */\n /* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the integer save area. */\n+/* function, just beyond the end of the integer save area.  */\n \n FUNC_START(_savegpr_14)\tstw\t14,-72(11)\t/* save gp registers */\n FUNC_START(_savegpr_15)\tstw\t15,-68(11)\n@@ -382,9 +382,9 @@ FUNC_END(_savegpr_16)\n FUNC_END(_savegpr_15)\n FUNC_END(_savegpr_14)\n \n-/* Routines for restoring floating point registers, called by the compiler. */\n+/* Routines for restoring floating point registers, called by the compiler.  */\n /* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the floating point save area. */\n+/* function, just beyond the end of the floating point save area.  */\n \n FUNC_START(_restfpr_14)\tlfd\t14,-144(11)\t/* restore fp registers */\n FUNC_START(_restfpr_15)\tlfd\t15,-136(11)\n@@ -424,9 +424,9 @@ FUNC_END(_restfpr_16)\n FUNC_END(_restfpr_15)\n FUNC_END(_restfpr_14)\n \n-/* Routines for restoring integer registers, called by the compiler. */\n+/* Routines for restoring integer registers, called by the compiler.  */\n /* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the integer restore area. */\n+/* function, just beyond the end of the integer restore area.  */\n \n FUNC_START(_restgpr_14)\tlwz\t14,-72(11)\t/* restore gp registers */\n FUNC_START(_restgpr_15)\tlwz\t15,-68(11)\n@@ -466,9 +466,9 @@ FUNC_END(_restgpr_16)\n FUNC_END(_restgpr_15)\n FUNC_END(_restgpr_14)\n \n-/* Routines for restoring floating point registers, called by the compiler. */\n+/* Routines for restoring floating point registers, called by the compiler.  */\n /* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the floating point save area. */\n+/* function, just beyond the end of the floating point save area.  */\n /* In addition to restoring the fp registers, it will return to the caller's */\n /* caller */\n \n@@ -513,9 +513,9 @@ FUNC_END(_restfpr_16_x)\n FUNC_END(_restfpr_15_x)\n FUNC_END(_restfpr_14_x)\n \n-/* Routines for restoring integer registers, called by the compiler. */\n+/* Routines for restoring integer registers, called by the compiler.  */\n /* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the integer restore area. */\n+/* function, just beyond the end of the integer restore area.  */\n \n FUNC_START(_restgpr_14_x)\tlwz\t14,-72(11)\t/* restore gp registers */\n FUNC_START(_restgpr_15_x)\tlwz\t15,-68(11)\n@@ -563,7 +563,7 @@ FUNC_END(_restgpr_14_x)\n \t.section \".text\"\n \t.align 2\n \n-/* Routines for saving floating point registers, called by the compiler. */\n+/* Routines for saving floating point registers, called by the compiler.  */\n \n .fsav:\n FUNC_START(_savef14)\tstfd\t14,-144(1)\t/* save fp registers */\n@@ -611,7 +611,7 @@ FUNC_END(_savef16)\n FUNC_END(_savef15)\n FUNC_END(_savef14)\n \n-/* Routines for restoring floating point registers, called by the compiler. */\n+/* Routines for restoring floating point registers, called by the compiler.  */\n \n .fres:\n FUNC_START(_restf14)\tlfd\t14,-144(1)\t/* restore fp registers */"}, {"sha": "428cfeea173b52f2bdacc6e07fa2693f7270afd1", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -21,7 +21,7 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n #undef MD_EXEC_PREFIX"}, {"sha": "ab04ba5d028ccb3fe3aac1d1da0f8561b636eab8", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -76,7 +76,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define PROFILE_HOOK(LABEL)   output_profile_hook (LABEL)\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n #undef MD_EXEC_PREFIX"}, {"sha": "9c843666532c90c6184a12118441a74f6d94e45a", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -67,7 +67,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ENDFILE_SPEC\n \n-/* This can become more refined as we have more powerpc options. */\n+/* This can become more refined as we have more powerpc options.  */\n #undef ASM_SPEC\n #define ASM_SPEC \"-u %(asm_cpu)\"\n \n@@ -94,6 +94,6 @@ do {\t\t\t\t\t\t\t\t\\\n #undef REAL_LD_FILE_NAME\n #undef REAL_STRIP_FILE_NAME\n \n-/* LynxOS doesn't have mcount. */\n+/* LynxOS doesn't have mcount.  */\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(file, profile_label_no)"}, {"sha": "df82b78b3b1288d527ac240b45c87922da88e0d5", "filename": "gcc/config/rs6000/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fnetbsd.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -38,7 +38,7 @@ Boston, MA 02111-1307, USA.  */\n %{!shared: %{!static:-dc -dp}} \\\n \"\n \n-/* Override the defaults. */\n+/* Override the defaults.  */\n #undef LIB_DEFAULT_SPEC\n #define LIB_DEFAULT_SPEC \"%(lib_netbsd)\"\n "}, {"sha": "05fcc378b5c72eda2f584ffdc154bd0b4d75ccea", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -3563,7 +3563,7 @@ expand_block_move (operands)\n \t    }\n \t  else if (bytes >= 8 && TARGET_POWERPC64\n \t\t   /* 64-bit loads and stores require word-aligned\n-                      displacements. */\n+                      displacements.  */\n \t\t   && (align >= 8 || (! STRICT_ALIGNMENT && align >= 4)))\n \t    {\n \t      move_bytes = 8;"}, {"sha": "9fa5aff523421a003c461e8c12c663be36f83c19", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -492,8 +492,8 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n #define PROMOTE_FUNCTION_RETURN\n \n /* Define this if most significant bit is lowest numbered\n-   in instructions that operate on numbered bit-fields. */\n-/* That is true on RS/6000. */\n+   in instructions that operate on numbered bit-fields.  */\n+/* That is true on RS/6000.  */\n #define BITS_BIG_ENDIAN 1\n \n /* Define this if most significant byte of a word is the lowest numbered.  */\n@@ -504,7 +504,7 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    numbered.\n \n    For RS/6000 we can decide arbitrarily since there are no machine\n-   instructions for them.  Might as well be consistent with bits and bytes. */\n+   instructions for them.  Might as well be consistent with bits and bytes.  */\n #define WORDS_BIG_ENDIAN 1\n \n /* number of bits in an addressable storage unit */\n@@ -827,7 +827,7 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    For POWER and PowerPC, the GPRs can hold any mode, but the float\n    registers only can hold floating modes and DImode, and CR register only\n    can hold CC modes.  We cannot put TImode anywhere except general\n-   register and it must be able to fit within the register set. */\n+   register and it must be able to fit within the register set.  */\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE)\t\t\t\t\t\\\n   (FP_REGNO_P (REGNO) ?\t\t\t\t\t\t\t\\\n@@ -955,10 +955,10 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n /* Place to put static chain when calling a function that requires it.  */\n #define STATIC_CHAIN_REGNUM 11\n \n-/* Link register number. */\n+/* Link register number.  */\n #define LINK_REGISTER_REGNUM 65\n \n-/* Count register number. */\n+/* Count register number.  */\n #define COUNT_REGISTER_REGNUM 66\n \n /* Place that structure value return address is placed.\n@@ -1021,7 +1021,7 @@ enum reg_class\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -1366,7 +1366,7 @@ typedef struct rs6000_stack {\n \n /* This is the difference between the logical top of stack and the actual sp.\n \n-   For the RS/6000, sp points past the fixed area. */\n+   For the RS/6000, sp points past the fixed area.  */\n #define STACK_POINTER_OFFSET RS6000_SAVE_AREA\n \n /* Define this if the maximum size of all the outgoing args is to be\n@@ -1595,7 +1595,7 @@ typedef struct rs6000_args\n    reference.  If nonzero for an argument, a copy of that argument is\n    made in memory and a pointer to the argument is passed instead of\n    the argument itself.  The pointer is passed in whatever way is\n-   appropriate for passing a pointer to that type. */\n+   appropriate for passing a pointer to that type.  */\n \n #define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED) \\\n   function_arg_pass_by_reference(&CUM, MODE, TYPE, NAMED)\n@@ -1689,7 +1689,7 @@ typedef struct rs6000_args\n \f\n /* Definitions for __builtin_return_address and __builtin_frame_address.\n    __builtin_return_address (0) should give link register (65), enable\n-   this. */\n+   this.  */\n /* This should be uncommented, so that the link register is used, but\n    currently this would result in unmatched insns and spilling fixed\n    registers so we'll leave it for another day.  When these problems are\n@@ -2069,7 +2069,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n /* Define this macro if the register defined by\n    `PIC_OFFSET_TABLE_REGNUM' is clobbered by calls.  Do not define\n-   this macro if `PPIC_OFFSET_TABLE_REGNUM' is not defined. */\n+   this macro if `PPIC_OFFSET_TABLE_REGNUM' is not defined.  */\n \n /* #define PIC_OFFSET_TABLE_REG_CALL_CLOBBERED */\n \n@@ -2120,7 +2120,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n@@ -2429,7 +2429,7 @@ do {\t\t\t\t\t\t\t\\\n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n \n-extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0). */\n+extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n \n #define REGISTER_NAMES\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "2fc8929f864a2142ca6f407f598b7300d3caba14", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -8157,7 +8157,7 @@\n \t fall through to generating four loads.  */\n       if (! reg_overlap_mentioned_p (operands[0], operands[1]))\n \treturn \\\"{lsi|lswi} %0,%P1,16\\\";\n-      /* ... fall through ... */\n+      /* ... fall through ...  */\n     case 4:\n       /* If the address register is the same as the register for the lowest-\n \t addressed word, load it last.  Similarly for the next two words."}, {"sha": "75e7343eb6042c35364b91931f248c1f2702dea1", "filename": "gcc/config/rs6000/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsol2.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -152,7 +152,7 @@ while (0)\n \n \f\n /* Sun-ppc assembler does not permit '.' in some symbol names.\n-   Use 'name_.labelno' instead. */\n+   Use 'name_.labelno' instead.  */\n #undef ASM_FORMAT_PRIVATE_NAME\n #define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO)\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\"}, {"sha": "737a8fbfaffc3c7e18ee0ed2a1a04bde1778ccc8", "filename": "gcc/config/rs6000/tramp.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Ftramp.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Ftramp.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ftramp.asm?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -33,7 +33,7 @@\n  *    the executable file might be covered by the GNU General Public License.\n  */ \n \n-/* Set up trampolines. */\n+/* Set up trampolines.  */\n \n \t.file\t\"tramp.asm\"\n \t.section \".text\""}, {"sha": "22a6c18e12a35d42b9ed5e2e20ef27fc965fbb85", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -209,7 +209,7 @@ toc_section ()\t\t\t\t\t\t\\\n /* If we are referencing a function that is static or is known to be\n    in this file, make the SYMBOL_REF special.  We can use this to indicate\n    that we can branch to this function without emitting a no-op after the\n-   call.  Do not set this flag if the function is weakly defined. */\n+   call.  Do not set this flag if the function is weakly defined.  */\n \n #define ENCODE_SECTION_INFO(DECL)\t\t\t\\\n   if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n@@ -403,7 +403,7 @@ toc_section ()\t\t\t\t\t\t\\\n \n /* This is how to output a label for a jump table.  Arguments are the same as\n    for ASM_OUTPUT_INTERNAL_LABEL, except the insn for the jump table is\n-   passed. */\n+   passed.  */\n \n #define ASM_OUTPUT_CASE_LABEL(FILE,PREFIX,NUM,TABLEINSN)\t\\\n { ASM_OUTPUT_ALIGN (FILE, 2); ASM_OUTPUT_INTERNAL_LABEL (FILE, PREFIX, NUM); }"}, {"sha": "c59d9f16742df31696f4130d5b36fbde82e1a2ef", "filename": "gcc/config/rs6000/xm-beos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fxm-beos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e41834e3da2cf11ccdecb05af30b1ed4686526/gcc%2Fconfig%2Frs6000%2Fxm-beos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-beos.h?ref=82e41834e3da2cf11ccdecb05af30b1ed4686526", "patch": "@@ -23,8 +23,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* use ANSI/SYSV style byte manipulation routines instead of BSD ones */\n \n-/* STANDARD_INCLUDE_DIR is the equivalent of \"/usr/include\" on UNIX. */\n+/* STANDARD_INCLUDE_DIR is the equivalent of \"/usr/include\" on UNIX.  */\n #define STANDARD_INCLUDE_DIR\t\"/boot/develop/headers/posix\"\n \n-/* SYSTEM_INCLUDE_DIR is the location for system specific, non-POSIX headers. */\n+/* SYSTEM_INCLUDE_DIR is the location for system specific, non-POSIX headers.  */\n #define SYSTEM_INCLUDE_DIR\t\"/boot/develop/headers/be\""}]}