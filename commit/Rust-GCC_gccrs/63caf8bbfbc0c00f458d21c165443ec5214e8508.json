{"sha": "63caf8bbfbc0c00f458d21c165443ec5214e8508", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNjYWY4YmJmYmMwYzAwZjQ1OGQyMWMxNjU0NDNlYzUyMTRlODUwOA==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2010-11-01T21:24:57Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2010-11-01T21:24:57Z"}, "message": "pdp11.md: Use iterators.\n\n* config/pdp11/pdp11.md: Use iterators.\n(addqi3, subqi3, iorsi3, xorsi3): Delete.\n\nFrom-SVN: r166148", "tree": {"sha": "4e0e6e2cdf6038a1a7b3e57e5ae79d6033360e53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e0e6e2cdf6038a1a7b3e57e5ae79d6033360e53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63caf8bbfbc0c00f458d21c165443ec5214e8508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63caf8bbfbc0c00f458d21c165443ec5214e8508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63caf8bbfbc0c00f458d21c165443ec5214e8508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63caf8bbfbc0c00f458d21c165443ec5214e8508/comments", "author": null, "committer": null, "parents": [{"sha": "8f78939bbf5706bec999fe2b2425eeea8f48f239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f78939bbf5706bec999fe2b2425eeea8f48f239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f78939bbf5706bec999fe2b2425eeea8f48f239"}], "stats": {"total": 218, "additions": 31, "deletions": 187}, "files": [{"sha": "5c846c4f6f5843b3751f077e4b5de348fea47bc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63caf8bbfbc0c00f458d21c165443ec5214e8508/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63caf8bbfbc0c00f458d21c165443ec5214e8508/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63caf8bbfbc0c00f458d21c165443ec5214e8508", "patch": "@@ -1,3 +1,8 @@\n+2010-11-01  Paul Koning  <ni1d@arrl.net>\n+\n+\t* config/pdp11/pdp11.md: Use iterators.\n+\t* config/pdp11/pdp11.md (addqi3, subqi3, iorsi3, xorsi3): Delete. \n+\t\n 2010-11-01  Steve Ellcey  <sje@cup.hp.com>\n \n \t* defaults.h (TARGET_VTABLE_USES_DESCRIPTORS): Move under ifdef"}, {"sha": "27893a6a8f2f3c2de1669a325241621963814ea1", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 26, "deletions": 187, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63caf8bbfbc0c00f458d21c165443ec5214e8508/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63caf8bbfbc0c00f458d21c165443ec5214e8508/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=63caf8bbfbc0c00f458d21c165443ec5214e8508", "patch": "@@ -122,35 +122,20 @@\n }\"\n   [(set_attr \"length\" \"4,4,6,6,12\")]) \n \n-(define_insn \"*cmphi\"\n+(define_insn \"*cmp<mode>\"\n   [(set (cc0)\n-\t(compare (match_operand:HI 0 \"general_operand\" \"rR,rR,rR,Q,Qi,Qi\")\n-\t\t (match_operand:HI 1 \"general_operand\" \"N,rR,Qi,N,rR,Qi\")))]\n+\t(compare (match_operand:PDPint 0 \"general_operand\" \"rR,rR,rR,Q,Qi,Qi\")\n+\t\t (match_operand:PDPint 1 \"general_operand\" \"N,rR,Qi,N,rR,Qi\")))]\n   \"\"\n   \"@\n-   tst %0\n-   cmp %0,%1\n-   cmp %0,%1\n-   tst %0\n-   cmp %0,%1\n-   cmp %0,%1\"\n+   tst<PDPint:isfx> %0\n+   cmp<PDPint:isfx> %0,%1\n+   cmp<PDPint:isfx> %0,%1\n+   tst<PDPint:isfx> %0\n+   cmp<PDPint:isfx> %0,%1\n+   cmp<PDPint:isfx> %0,%1\"\n   [(set_attr \"length\" \"2,2,4,4,4,6\")])\n \n-(define_insn \"*cmpqi\"\n-  [(set (cc0)\n-\t(compare (match_operand:QI 0 \"general_operand\" \"rR,rR,rR,Q,Qi,Qi\")\n-\t\t (match_operand:QI 1 \"general_operand\" \"N,rR,Qi,N,rR,Qi\")))]\n-  \"\"\n-  \"@\n-   tstb %0\n-   cmpb %0,%1\n-   cmpb %0,%1\n-   tstb %0\n-   cmpb %0,%1\n-   cmpb %0,%1\"\n-  [(set_attr \"length\" \"2,2,4,4,4,6\")])\n-\t\t\t   \n-\n ;; sob instruction - we need an assembler which can make this instruction\n ;; valid under _all_ circumstances!\n \n@@ -211,22 +196,10 @@\n   \"TARGET_FPU\"\n   \"\")\n \n-(define_expand \"cbranchhi4\"\n-  [(set (cc0)\n-        (compare (match_operand:HI 1 \"general_operand\")\n-\t\t (match_operand:HI 2 \"general_operand\")))\n-   (set (pc)\n-\t(if_then_else (match_operator 0 \"ordered_comparison_operator\"\n-\t\t       [(cc0) (const_int 0)])\n-\t\t      (label_ref (match_operand 3 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"\")\n-\n-(define_expand \"cbranchqi4\"\n+(define_expand \"cbranch<mode>4\"\n   [(set (cc0)\n-        (compare (match_operand:QI 1 \"general_operand\")\n-\t\t (match_operand:QI 2 \"general_operand\")))\n+        (compare (match_operand:PDPint 1 \"general_operand\")\n+\t\t (match_operand:PDPint 2 \"general_operand\")))\n    (set (pc)\n \t(if_then_else (match_operator 0 \"ordered_comparison_operator\"\n \t\t       [(cc0) (const_int 0)])\n@@ -298,29 +271,16 @@\n ;; we could split it up and make several sub-cases...\n   [(set_attr \"length\" \"4,6,8,16,16\")])\n \n-(define_insn \"movhi\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rR,rR,Q,Q\")\n-\t(match_operand:HI 1 \"general_operand\" \"rRN,Qi,rRN,Qi\"))]\n-  \"\"\n-  \"*\n-{\n-  if (operands[1] == const0_rtx)\n-    return \\\"clr %0\\\";\n-\n-  return \\\"mov %1, %0\\\";\n-}\"\n-  [(set_attr \"length\" \"2,4,4,6\")])\n-\n-(define_insn \"movqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rR,rR,Q,Q\")\n-\t(match_operand:QI 1 \"general_operand\" \"rRN,Qi,rRN,Qi\"))]\n+(define_insn \"mov<mode>\"\n+  [(set (match_operand:PDPint 0 \"nonimmediate_operand\" \"=rR,rR,Q,Q\")\n+\t(match_operand:PDPint 1 \"general_operand\" \"rRN,Qi,rRN,Qi\"))]\n   \"\"\n   \"*\n {\n   if (operands[1] == const0_rtx)\n-    return \\\"clrb %0\\\";\n+    return \\\"clr<PDPint:isfx> %0\\\";\n \n-  return \\\"movb %1, %0\\\";\n+  return \\\"mov<PDPint:isfx> %1, %0\\\";\n }\"\n   [(set_attr \"length\" \"2,4,4,6\")])\n \n@@ -718,25 +678,6 @@\n }\"\n   [(set_attr \"length\" \"2,4,4,6\")])\n \n-(define_insn \"addqi3\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rR,rR,Q,Q\")\n-\t(plus:QI (match_operand:QI 1 \"general_operand\" \"%0,0,0,0\")\n-\t\t (match_operand:QI 2 \"general_operand\" \"rRLM,Qi,rRLM,Qi\")))]\n-  \"\"\n-  \"*\n-{\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      if (INTVAL(operands[2]) == 1)\n-\treturn \\\"incb %0\\\";\n-      else if (INTVAL(operands[2]) == -1)\n-\treturn \\\"decb %0\\\";\n-    }\n-\n-  return \\\"add %2, %0\\\";\n-}\"\n-  [(set_attr \"length\" \"2,4,4,6\")])\n-\n \f\n ;;- subtract instructions\n ;; we don't have to care for constant second \n@@ -798,19 +739,6 @@\n }\"\n   [(set_attr \"length\" \"2,4,4,6\")])\n \n-(define_insn \"subqi3\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rR,rR,Q,Q\")\n-\t(minus:QI (match_operand:QI 1 \"general_operand\" \"0,0,0,0\")\n-\t\t  (match_operand:QI 2 \"general_operand\" \"rR,Qi,rR,Qi\")))]\n-  \"\"\n-  \"*\n-{\n-  gcc_assert (GET_CODE (operands[2]) != CONST_INT);\n-\n-  return \\\"sub %2, %0\\\";\n-}\"\n-  [(set_attr \"length\" \"2,4,4,6\")])\n-\n ;;;;- and instructions\n ;; Bit-and on the pdp (like on the VAX) is done with a clear-bits insn.\n \n@@ -850,95 +778,15 @@\n   [(set_attr \"length\" \"2,4,4,6\")])\n \n ;;- Bit set (inclusive or) instructions\n-(define_insn \"iorsi3\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,o,o,r,r,r,o,o,o\")\n-        (ior:SI (match_operand:SI 1 \"general_operand\" \"%0,0,0,0,0,0,0,0,0,0\")\n-                  (match_operand:SI 2 \"general_operand\" \"r,o,r,o,I,J,K,I,J,K\")))]\n-  \"\"\n-  \"*\n-{ /* Here we trust that operands don't overlap \n-\n-     or is lateoperands the low word?? - looks like it! */\n-\n-  rtx lateoperands[3];\n-  \n-  lateoperands[0] = operands[0];\n-\n-  if (REG_P (operands[0]))\n-    operands[0] = gen_rtx_REG (HImode, REGNO (operands[0]) + 1);\n-  else\n-    operands[0] = adjust_address (operands[0], HImode, 2);\n-  \n-  if (! CONSTANT_P(operands[2]))\n-    {\n-      lateoperands[2] = operands[2];\n-\n-      if (REG_P (operands[2]))\n-\toperands[2] = gen_rtx_REG (HImode, REGNO (operands[2]) + 1);\n-      else\n-\toperands[2] = adjust_address (operands[2], HImode, 2);\n-\n-      output_asm_insn (\\\"bis %2, %0\\\", operands);\n-      output_asm_insn (\\\"bis %2, %0\\\", lateoperands);\n-      return \\\"\\\";\n-    }\n-\n-  lateoperands[2] = GEN_INT ((INTVAL (operands[2]) >> 16) & 0xffff);\n-  operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffff);\n-  \n-  /* these have different lengths, so we should have \n-     different constraints! */\n-  if (INTVAL(operands[2]))\n-    output_asm_insn (\\\"bis %2, %0\\\", operands);\n-\n-  if (INTVAL(lateoperands[2]))\n-    output_asm_insn (\\\"bis %2, %0\\\", lateoperands);\n-\n-  return \\\"\\\";\n-}\"\n-  [(set_attr \"length\" \"4,8,8,12,4,4,8,6,6,12\")])\n-\n-(define_insn \"iorhi3\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rR,rR,Q,Q\")\n-\t(ior:HI (match_operand:HI 1 \"general_operand\" \"%0,0,0,0\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"rR,Qi,rR,Qi\")))]\n+(define_insn \"ior<mode>3\"\n+  [(set (match_operand:PDPint 0 \"nonimmediate_operand\" \"=rR,rR,Q,Q\")\n+\t(ior:PDPint (match_operand:PDPint 1 \"general_operand\" \"%0,0,0,0\")\n+\t\t(match_operand:PDPint 2 \"general_operand\" \"rR,Qi,rR,Qi\")))]\n   \"\"\n-  \"bis %2, %0\"\n+  \"bis<PDPint:isfx> %2, %0\"\n   [(set_attr \"length\" \"2,4,4,6\")])\n \n-(define_insn \"iorqi3\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rR,rR,Q,Q\")\n-\t(ior:QI (match_operand:QI 1 \"general_operand\" \"%0,0,0,0\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"rR,Qi,rR,Qi\")))]\n-  \"\"\n-  \"bisb %2, %0\")\n-\n ;;- xor instructions\n-(define_insn \"xorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (xor:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n-                (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_40_PLUS\"\n-  \"*\n-{ /* Here we trust that operands don't overlap */\n-\n-  rtx lateoperands[3];\n-\n-  lateoperands[0] = operands[0];\n-  operands[0] = gen_rtx_REG (HImode, REGNO (operands[0]) + 1);\n-\n-  if (REG_P(operands[2]))\n-    {\n-      lateoperands[2] = operands[2];\n-      operands[2] = gen_rtx_REG (HImode, REGNO (operands[2]) + 1);\n-\n-      output_asm_insn (\\\"xor %2, %0\\\", operands);\n-      output_asm_insn (\\\"xor %2, %0\\\", lateoperands);\n-    }\n-  return \\\"\\\";\n-}\"\n-  [(set_attr \"length\" \"4\")])\n-\n (define_insn \"xorhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rR,Q\")\n \t(xor:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n@@ -949,20 +797,11 @@\n \n ;;- one complement instructions\n \n-(define_insn \"one_cmplhi2\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rR,Q\")\n-        (not:HI (match_operand:HI 1 \"general_operand\" \"0,0\")))]\n-  \"\"\n-  \"com %0\"\n-  [(set_attr \"length\" \"2,4\")])\n-\n-(define_insn \"one_cmplqi2\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rR,rR\")\n-        (not:QI (match_operand:QI 1 \"general_operand\" \"0,g\")))]\n+(define_insn \"one_cmpl<mode>2\"\n+  [(set (match_operand:PDPint 0 \"nonimmediate_operand\" \"=rR,Q\")\n+        (not:PDPint (match_operand:PDPint 1 \"general_operand\" \"0,0\")))]\n   \"\"\n-  \"@\n-  comb %0\n-  movb %1, %0\\; comb %0\"\n+  \"com<PDPint:isfx> %0\"\n   [(set_attr \"length\" \"2,4\")])\n \n ;;- arithmetic shift instructions"}]}