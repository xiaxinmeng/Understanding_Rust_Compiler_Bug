{"sha": "2e507b9a9988d4cba9d03d7abb94c0f870952bba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU1MDdiOWE5OTg4ZDRjYmE5ZDAzZDdhYmI5NGMwZjg3MDk1MmJiYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-08-12T22:37:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-08-12T22:37:20Z"}, "message": "i386.c (ix86_function_versions): Use error + inform.\n\n2013-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* config/i386/i386.c (ix86_function_versions): Use error + inform.\n\n/cp\n2013-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (warn_extern_redeclared_static, duplicate_decls,\n\tcheck_elaborated_type_specifier): Use error + inform.\n\t* friend.c (make_friend_class): Likewise.\n\t* semantics.c (finish_id_expression): Likewise.\n\n/testsuite\n2013-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/constexpr-function2.C: Adjust for error -> inform\n\tchanges.\n\t* g++.dg/cpp0x/constexpr-neg1.C: Likewise.\n\t* g++.dg/cpp0x/defaulted2.C: Likewise.\n\t* g++.dg/cpp0x/defaulted31.C: Likewise.\n\t* g++.dg/cpp0x/error6.C: Likewise.\n\t* g++.dg/cpp0x/gen-attrs-32.C: Likewise.\n\t* g++.dg/cpp0x/override2.C: Likewise.\n\t* g++.dg/cpp0x/parse1.C: Likewise.\n\t* g++.dg/cpp0x/scoped_enum.C: Likewise.\n\t* g++.dg/cpp0x/temp_default4.C: Likewise.\n\t* g++.dg/ext/attrib32.C: Likewise.\n\t* g++.dg/ext/gnu-inline-global-reject.C: Likewise.\n\t* g++.dg/ext/mv13.C: Likewise.\n\t* g++.dg/ext/mv7.C: Likewise.\n\t* g++.dg/ext/mv9.C: Likewise.\n\t* g++.dg/ext/pr57362.C: Likewise.\n\t* g++.dg/ext/typeof10.C: Likewise.\n\t* g++.dg/lookup/anon6.C: Likewise.\n\t* g++.dg/lookup/crash6.C: Likewise.\n\t* g++.dg/lookup/name-clash5.C: Likewise.\n\t* g++.dg/lookup/name-clash6.C: Likewise.\n\t* g++.dg/other/anon4.C: Likewise.\n\t* g++.dg/other/error15.C: Likewise.\n\t* g++.dg/other/error8.C: Likewise.\n\t* g++.dg/other/redecl2.C: Likewise.\n\t* g++.dg/parse/crash16.C: Likewise.\n\t* g++.dg/parse/crash21.C: Likewise.\n\t* g++.dg/parse/crash38.C: Likewise.\n\t* g++.dg/parse/redef2.C: Likewise.\n\t* g++.dg/parse/struct-as-enum1.C: Likewise.\n\t* g++.dg/template/crash39.C: Likewise.\n\t* g++.dg/template/redecl3.C: Likewise.\n\t* g++.dg/tls/diag-3.C: Likewise.\n\t* g++.dg/warn/Wredundant-decls-spec.C: Likewise.\n\t* g++.old-deja/g++.benjamin/typedef01.C: Likewise.\n\t* g++.old-deja/g++.benjamin/warn02.C: Likewise.\n\t* g++.old-deja/g++.brendan/crash16.C: Likewise.\n\t* g++.old-deja/g++.brendan/crash18.C: Likewise.\n\t* g++.old-deja/g++.brendan/err-msg4.C: Likewise.\n\t* g++.old-deja/g++.brendan/redecl1.C: Likewise.\n\t* g++.old-deja/g++.brendan/static3.C: Likewise.\n\t* g++.old-deja/g++.bugs/900127_02.C: Likewise.\n\t* g++.old-deja/g++.jason/binding.C: Likewise.\n\t* g++.old-deja/g++.jason/crash4.C: Likewise.\n\t* g++.old-deja/g++.jason/crash7.C: Likewise.\n\t* g++.old-deja/g++.jason/lineno.C: Likewise.\n\t* g++.old-deja/g++.jason/scoping7.C: Likewise.\n\t* g++.old-deja/g++.mike/misc3.C: Likewise.\n\t* g++.old-deja/g++.mike/net44.C: Likewise.\n\t* g++.old-deja/g++.mike/ns3.C: Likewise.\n\t* g++.old-deja/g++.ns/alias4.C: Likewise.\n\t* g++.old-deja/g++.ns/ns11.C: Likewise.\n\t* g++.old-deja/g++.other/crash23.C: Likewise.\n\t* g++.old-deja/g++.other/decl8.C: Likewise.\n\t* g++.old-deja/g++.other/linkage3.C: Likewise.\n\t* g++.old-deja/g++.other/typeck1.C: Likewise.\n\t* g++.old-deja/g++.other/typedef5.C: Likewise.\n\t* g++.old-deja/g++.pt/explicit34.C: Likewise.\n\t* g++.old-deja/g++.pt/friend36.C: Likewise.\n\t* obj-c++.dg/method-8.mm: Likewise.\n\t* obj-c++.dg/tls/diag-3.mm: Likewise.\n\nFrom-SVN: r201671", "tree": {"sha": "a50a3bcb13160b753b6b834e91070769cfe841fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a50a3bcb13160b753b6b834e91070769cfe841fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e507b9a9988d4cba9d03d7abb94c0f870952bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e507b9a9988d4cba9d03d7abb94c0f870952bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e507b9a9988d4cba9d03d7abb94c0f870952bba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e507b9a9988d4cba9d03d7abb94c0f870952bba/comments", "author": null, "committer": null, "parents": [{"sha": "82ca21b50b9e5bf8496bd4f441c156b348cc163a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ca21b50b9e5bf8496bd4f441c156b348cc163a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ca21b50b9e5bf8496bd4f441c156b348cc163a"}], "stats": {"total": 326, "additions": 200, "deletions": 126}, "files": [{"sha": "e0a1dba3b7f4f669c557633d986b0751f9b047d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,3 +1,7 @@\n+2013-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* config/i386/i386.c (ix86_function_versions): Use error + inform.\n+\n 2013-08-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (floatunssi<mode>2 expand): Use MODEF mode"}, {"sha": "842f99363b46d2bb23bc72b248224f8a66c5ea5b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -29870,8 +29870,8 @@ ix86_function_versions (tree fn1, tree fn2)\n \t  error_at (DECL_SOURCE_LOCATION (fn2),\n \t\t    \"missing %<target%> attribute for multi-versioned %D\",\n \t\t    fn2);\n-\t  error_at (DECL_SOURCE_LOCATION (fn1),\n-\t\t    \"previous declaration of %D\", fn1);\n+\t  inform (DECL_SOURCE_LOCATION (fn1),\n+\t\t  \"previous declaration of %D\", fn1);\n \t  /* Prevent diagnosing of the same error multiple times.  */\n \t  DECL_ATTRIBUTES (fn2)\n \t    = tree_cons (get_identifier (\"target\"),"}, {"sha": "a7462af90836e76a41cd4411a837dcb0985cedfd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,3 +1,10 @@\n+2013-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (warn_extern_redeclared_static, duplicate_decls,\n+\tcheck_elaborated_type_specifier): Use error + inform.\n+\t* friend.c (make_friend_class): Likewise.\n+\t* semantics.c (finish_id_expression): Likewise.\n+\n 2013-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRevert:"}, {"sha": "16f751c8ff12905c563a0b86fb64b7ba2e0a3ce4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1146,8 +1146,9 @@ warn_extern_redeclared_static (tree newdecl, tree olddecl)\n       && DECL_ARTIFICIAL (olddecl))\n     return;\n \n-  permerror (input_location, \"%qD was declared %<extern%> and later %<static%>\", newdecl);\n-  permerror (input_location, \"previous declaration of %q+D\", olddecl);\n+  if (permerror (input_location,\n+\t\t \"%qD was declared %<extern%> and later %<static%>\", newdecl))\n+    inform (input_location, \"previous declaration of %q+D\", olddecl);\n }\n \n /* NEW_DECL is a redeclaration of OLD_DECL; both are functions or\n@@ -1287,19 +1288,19 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t       && DECL_UNINLINABLE (olddecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n \t{\n-\t  warning (OPT_Wattributes, \"function %q+D redeclared as inline\",\n-\t\t   newdecl);\n-\t  warning (OPT_Wattributes, \"previous declaration of %q+D \"\n-\t\t   \"with attribute noinline\", olddecl);\n+\t  if (warning (OPT_Wattributes, \"function %q+D redeclared as inline\",\n+\t\t       newdecl))\n+\t    inform (input_location, \"previous declaration of %q+D \"\n+\t\t    \"with attribute noinline\", olddecl);\n \t}\n       else if (DECL_DECLARED_INLINE_P (olddecl)\n \t       && DECL_UNINLINABLE (newdecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n \t{\n-\t  warning (OPT_Wattributes, \"function %q+D redeclared with \"\n-\t\t   \"attribute noinline\", newdecl);\n-\t  warning (OPT_Wattributes, \"previous declaration of %q+D was inline\",\n-\t\t   olddecl);\n+\t  if (warning (OPT_Wattributes, \"function %q+D redeclared with \"\n+\t\t       \"attribute noinline\", newdecl))\n+\t    inform (input_location, \"previous declaration of %q+D was inline\",\n+\t\t    olddecl);\n \t}\n     }\n \n@@ -1485,7 +1486,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       error (\"%q#D redeclared as different kind of symbol\", newdecl);\n       if (TREE_CODE (olddecl) == TREE_LIST)\n \tolddecl = TREE_VALUE (olddecl);\n-      error (\"previous declaration of %q+#D\", olddecl);\n+      inform (input_location, \"previous declaration of %q+#D\", olddecl);\n \n       return error_mark_node;\n     }\n@@ -1550,7 +1551,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       else\n \t{\n \t  error (\"conflicting declaration %q#D\", newdecl);\n-\t  error (\"%q+D has a previous declaration as %q#D\", olddecl, olddecl);\n+\t  inform (input_location,\n+\t\t  \"%q+D has a previous declaration as %q#D\", olddecl, olddecl);\n \t  return error_mark_node;\n \t}\n     }\n@@ -1613,9 +1615,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t{\n \t  error_at (DECL_SOURCE_LOCATION (newdecl), errmsg, newdecl);\n \t  if (DECL_NAME (olddecl) != NULL_TREE)\n-\t    error ((DECL_INITIAL (olddecl) && namespace_bindings_p ())\n-\t\t   ? G_(\"%q+#D previously defined here\")\n-\t\t   : G_(\"%q+#D previously declared here\"), olddecl);\n+\t    inform (input_location,\n+\t\t    (DECL_INITIAL (olddecl) && namespace_bindings_p ())\n+\t\t    ? G_(\"%q+#D previously defined here\")\n+\t\t    : G_(\"%q+#D previously declared here\"), olddecl);\n \t  return error_mark_node;\n \t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL\n@@ -1759,8 +1762,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  && (! DECL_TEMPLATE_SPECIALIZATION (newdecl)\n \t      || DECL_TEMPLATE_SPECIALIZATION (olddecl)))\n \t{\n-\t  warning (OPT_Wredundant_decls, \"redundant redeclaration of %qD in same scope\", newdecl);\n-\t  warning (OPT_Wredundant_decls, \"previous declaration of %q+D\", olddecl);\n+\t  if (warning (OPT_Wredundant_decls,\n+\t\t       \"redundant redeclaration of %qD in same scope\",\n+\t\t       newdecl))\n+\t    inform (input_location, \"previous declaration of %q+D\", olddecl);\n \t}\n \n       if (!(DECL_TEMPLATE_INSTANTIATION (olddecl)\n@@ -11836,14 +11841,14 @@ check_elaborated_type_specifier (enum tag_types tag_code,\n \t   && tag_code != typename_type)\n     {\n       error (\"%qT referred to as %qs\", type, tag_name (tag_code));\n-      error (\"%q+T has a previous declaration here\", type);\n+      inform (input_location, \"%q+T has a previous declaration here\", type);\n       return error_mark_node;\n     }\n   else if (TREE_CODE (type) != ENUMERAL_TYPE\n \t   && tag_code == enum_type)\n     {\n       error (\"%qT referred to as enum\", type);\n-      error (\"%q+T has a previous declaration here\", type);\n+      inform (input_location, \"%q+T has a previous declaration here\", type);\n       return error_mark_node;\n     }\n   else if (!allow_template_p"}, {"sha": "779dac905d627670f4a81cacbebdf3c305724e68", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -327,15 +327,15 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \t\t{\n \t\t  error (\"%qT is not a member class template of %qT\",\n \t\t\t name, ctype);\n-\t\t  error (\"%q+D declared here\", decl);\n+\t\t  inform (input_location, \"%q+D declared here\", decl);\n \t\t  return;\n \t\t}\n \t      if (!template_member_p && (TREE_CODE (decl) != TYPE_DECL\n \t\t\t\t\t || !CLASS_TYPE_P (TREE_TYPE (decl))))\n \t\t{\n \t\t  error (\"%qT is not a nested class of %qT\",\n \t\t\t name, ctype);\n-\t\t  error (\"%q+D declared here\", decl);\n+\t\t  inform (input_location, \"%q+D declared here\", decl);\n \t\t  return;\n \t\t}\n "}, {"sha": "fa47db7cac7bfa66a01bd123a3114e28f4e5c4cf", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -3131,7 +3131,7 @@ finish_id_expression (tree id_expression,\n \t      error (VAR_P (decl)\n \t\t     ? G_(\"use of local variable with automatic storage from containing function\")\n \t\t     : G_(\"use of parameter from containing function\"));\n-\t      error (\"  %q+#D declared here\", decl);\n+\t      inform (input_location, \"%q+#D declared here\", decl);\n \t      return error_mark_node;\n \t    }\n \t}"}, {"sha": "80ed59d8c55bdc0a336e1d8ec3d212ef24b55df3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,3 +1,68 @@\n+2013-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/constexpr-function2.C: Adjust for error -> inform\n+\tchanges.\n+\t* g++.dg/cpp0x/constexpr-neg1.C: Likewise.\n+\t* g++.dg/cpp0x/defaulted2.C: Likewise.\n+\t* g++.dg/cpp0x/defaulted31.C: Likewise.\n+\t* g++.dg/cpp0x/error6.C: Likewise.\n+\t* g++.dg/cpp0x/gen-attrs-32.C: Likewise.\n+\t* g++.dg/cpp0x/override2.C: Likewise.\n+\t* g++.dg/cpp0x/parse1.C: Likewise.\n+\t* g++.dg/cpp0x/scoped_enum.C: Likewise.\n+\t* g++.dg/cpp0x/temp_default4.C: Likewise.\n+\t* g++.dg/ext/attrib32.C: Likewise.\n+\t* g++.dg/ext/gnu-inline-global-reject.C: Likewise.\n+\t* g++.dg/ext/mv13.C: Likewise.\n+\t* g++.dg/ext/mv7.C: Likewise.\n+\t* g++.dg/ext/mv9.C: Likewise.\n+\t* g++.dg/ext/pr57362.C: Likewise.\n+\t* g++.dg/ext/typeof10.C: Likewise.\n+\t* g++.dg/lookup/anon6.C: Likewise.\n+\t* g++.dg/lookup/crash6.C: Likewise.\n+\t* g++.dg/lookup/name-clash5.C: Likewise.\n+\t* g++.dg/lookup/name-clash6.C: Likewise.\n+\t* g++.dg/other/anon4.C: Likewise.\n+\t* g++.dg/other/error15.C: Likewise.\n+\t* g++.dg/other/error8.C: Likewise.\n+\t* g++.dg/other/redecl2.C: Likewise.\n+\t* g++.dg/parse/crash16.C: Likewise.\n+\t* g++.dg/parse/crash21.C: Likewise.\n+\t* g++.dg/parse/crash38.C: Likewise.\n+\t* g++.dg/parse/redef2.C: Likewise.\n+\t* g++.dg/parse/struct-as-enum1.C: Likewise.\n+\t* g++.dg/template/crash39.C: Likewise.\n+\t* g++.dg/template/redecl3.C: Likewise.\n+\t* g++.dg/tls/diag-3.C: Likewise.\n+\t* g++.dg/warn/Wredundant-decls-spec.C: Likewise.\n+\t* g++.old-deja/g++.benjamin/typedef01.C: Likewise.\n+\t* g++.old-deja/g++.benjamin/warn02.C: Likewise.\n+\t* g++.old-deja/g++.brendan/crash16.C: Likewise.\n+\t* g++.old-deja/g++.brendan/crash18.C: Likewise.\n+\t* g++.old-deja/g++.brendan/err-msg4.C: Likewise.\n+\t* g++.old-deja/g++.brendan/redecl1.C: Likewise.\n+\t* g++.old-deja/g++.brendan/static3.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900127_02.C: Likewise.\n+\t* g++.old-deja/g++.jason/binding.C: Likewise.\n+\t* g++.old-deja/g++.jason/crash4.C: Likewise.\n+\t* g++.old-deja/g++.jason/crash7.C: Likewise.\n+\t* g++.old-deja/g++.jason/lineno.C: Likewise.\n+\t* g++.old-deja/g++.jason/scoping7.C: Likewise.\n+\t* g++.old-deja/g++.mike/misc3.C: Likewise.\n+\t* g++.old-deja/g++.mike/net44.C: Likewise.\n+\t* g++.old-deja/g++.mike/ns3.C: Likewise.\n+\t* g++.old-deja/g++.ns/alias4.C: Likewise.\n+\t* g++.old-deja/g++.ns/ns11.C: Likewise.\n+\t* g++.old-deja/g++.other/crash23.C: Likewise.\n+\t* g++.old-deja/g++.other/decl8.C: Likewise.\n+\t* g++.old-deja/g++.other/linkage3.C: Likewise.\n+\t* g++.old-deja/g++.other/typeck1.C: Likewise.\n+\t* g++.old-deja/g++.other/typedef5.C: Likewise.\n+\t* g++.old-deja/g++.pt/explicit34.C: Likewise.\n+\t* g++.old-deja/g++.pt/friend36.C: Likewise.\n+\t* obj-c++.dg/method-8.mm: Likewise.\n+\t* obj-c++.dg/tls/diag-3.mm: Likewise.\n+\n 2013-08-12  Perez Read  <netfirewall@gmail.com>\n \n          PR target/58132"}, {"sha": "6403ea16e87eb45b7d3eba19936a171d612783a4", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-function2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-function2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-function2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-function2.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -38,7 +38,7 @@ constexpr int g(int x, int n) // error: body not just \u2018\u2018return expr\u2019\u2019\n } // { dg-error \"not a return-statement\" }\n \n constexpr int\n-bar(int x, int y) { return x + y + x * y; } // { dg-error \"previously\" }\n+bar(int x, int y) { return x + y + x * y; } // { dg-message \"previously\" }\n \n int bar(int x, int y)\t     // { dg-error \"redefinition\" }\n { return x * 2 + 3 * y; }"}, {"sha": "c27615f05ad6cce8b6ba408e12bd1b2c13d7ca8f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-neg1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -50,7 +50,7 @@ private:\n   bool flag;\n };\n // OK\n-constexpr int bar(int x, int y) // { dg-error \"previously defined here\" }\n+constexpr int bar(int x, int y) // { dg-message \"previously defined here\" }\n { return x + y + x*y; }\n // ...\n // error: redefinition of bar"}, {"sha": "57f74e8e7147314b8cadf1d2b351ba81e1f207da", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -6,13 +6,13 @@ void f() = delete;\t\t// { dg-error \"deleted\" }\n \n struct A\n {\n-  A() { }\t\t\t// { dg-error \"previous\" }\n+  A() { }\t\t\t// { dg-message \"previous\" }\n   void f() = default;\t\t// { dg-error \"default\" }\n };\n \n A::A() = default;\t\t// { dg-error \"redefinition\" }\n \n-void g() {}\t\t\t// { dg-error \"previous\" }\n+void g() {}\t\t\t// { dg-message \"previous\" }\n void g() = delete;\t\t// { dg-error \"redefinition\" }\n \n struct B // { dg-message \"user-provided default constructor\" }"}, {"sha": "c76a0f2bd69ac20b8e24a67382061442da8ad839", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted31.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted31.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -3,7 +3,7 @@\n \n struct A\n {\n-  A() { }\t\t\t// { dg-error \"defined\" }\n+  A() { }\t\t\t// { dg-message \"defined\" }\n   ~A() = default;\t\t// { dg-error \"defaulted\" }\n };\n "}, {"sha": "3b457952d38a7a052abf82c4b07d2ed626b87d03", "filename": "gcc/testsuite/g++.dg/cpp0x/error6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror6.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -2,7 +2,7 @@\n // { dg-options -std=c++0x }\n \n template<typename C>\n-auto g(C& c) -> decltype (c.f()) { return c.f(); } // { dg-error \"decltype .c\\\\.f\" }\n+auto g(C& c) -> decltype (c.f()) { return c.f(); } // { dg-message \"decltype .c\\\\.f\" }\n \n template<typename C>\n auto g(C& c) -> decltype (c.f()) { return c.f(); } // { dg-error \"decltype .c\\\\.f\" }"}, {"sha": "6a1b235d7f3342944adf26b2f1fb01d44cc4e3b8", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-32.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-32.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -13,7 +13,7 @@ void bar()\n \n typedef union U1 { int i; } U2 [[gnu::transparent_union]]; // { dg-warning \"ignored\" }\n \n-static void foo2(U1) {}\t\t// { dg-error \"previously defined\" }\n+static void foo2(U1) {}\t\t// { dg-message \"previously defined\" }\n static void foo2(U2) {}\t\t// { dg-error \"redefinition\" }\n \n void bar2(U1 u1, U2 u2)"}, {"sha": "1a7a36e1ae0cf6c23b2ac2a73d3e0571eca82f38", "filename": "gcc/testsuite/g++.dg/cpp0x/override2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -44,7 +44,7 @@ int main()\n   B2 final2 = final;\n   struct B2 {}; // { dg-error \"redefinition\" }\n   struct B2 final; // { dg-error \"redeclaration\" }\n-  struct B2 override; // { dg-error \"previously declared here\" }\n+  struct B2 override; // { dg-message \"previously declared here\" }\n   struct B2 final {}; // { dg-error \"redefinition\" }\n   struct B2 override {}; // { dg-error \"cannot specify 'override' for a class\" }\n   B2 override{}; // { dg-error \"redeclaration\" }"}, {"sha": "4fa7461cb22a339e01c7d86f48f12fa117affcc1", "filename": "gcc/testsuite/g++.dg/cpp0x/parse1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fparse1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fparse1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fparse1.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,5 +1,5 @@\n // PR c++/43509\n // { dg-options \"-std=c++0x\" }\n \n-typedef int B;\t\t\t// { dg-error \"\" }\n+typedef int B;\t\t\t// { dg-message \"\" }\n B::B() {}\t\t\t// { dg-error \"\" }"}, {"sha": "20391eb407b7f6809052bc0ded5c6029a6a2f4bd", "filename": "gcc/testsuite/g++.dg/cpp0x/scoped_enum.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -6,7 +6,7 @@ enum class Color1 {\n };\n \n enum struct Color2 {\n-  Red, // { dg-error \"previously declared here\" }\n+  Red, // { dg-message \"previously declared here\" }\n   Orange,\n   Yellow,\n   Green,"}, {"sha": "aa2ad58e01ebba93694875f521348d4e4f4aa8b2", "filename": "gcc/testsuite/g++.dg/cpp0x/temp_default4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default4.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -2,7 +2,7 @@\n \n class X {\n   template<typename T = int> friend void f(X) { }\n-  template<typename T> friend void g(X); // { dg-error \"previously declared here\" }\n+  template<typename T> friend void g(X); // { dg-message \"previously declared here\" }\n   template<typename T = int> friend void h(X); // { dg-error \"function template friend\" }\n };\n "}, {"sha": "31a92b8f45c57594466acf67767bcec780e2c304", "filename": "gcc/testsuite/g++.dg/ext/attrib32.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib32.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -12,7 +12,7 @@ void bar()\n \n typedef union U1 { int i; } U2 __attribute__((transparent_union)); // { dg-warning \"ignored\" }\n \n-static void foo2(U1) {}\t\t// { dg-error \"previously defined\" }\n+static void foo2(U1) {}\t\t// { dg-message \"previously defined\" }\n static void foo2(U2) {}\t\t// { dg-error \"redefinition\" }\n \n void bar2(U1 u1, U2 u2)"}, {"sha": "7e84fa773ebc9bfb9842c45d159c9628ebc8e00e", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-global-reject.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -10,47 +10,47 @@\n \n #undef fn\n #define fn pfx(func_decl_inline_before)\n-decl(inline, fn) // { dg-error \"previous\" \"\" }\n+decl(inline, fn) // { dg-message \"previous\" \"\" }\n gnuindef(fn, 0) // { dg-error \"redeclared\" \"\" }\n \n #undef fn\n #define fn pfx(func_decl_inline_after)\n-gnuindef(fn, 0) // { dg-error \"previous\" \"\" }\n+gnuindef(fn, 0) // { dg-message \"previous\" \"\" }\n decl(inline, fn) // { dg-error \"redeclared\" \"\" }\n \n #undef fn\n #define fn pfx(func_def_gnuin_redef)\n-gnuindef(fn, 0) // { dg-error \"previous\" \"\" }\n+gnuindef(fn, 0) // { dg-message \"previous\" \"\" }\n gnuindef(fn, 1) // { dg-error \"redefinition\" \"\" }\n \n #undef fn\n #define fn pfx(func_def_inline_redef)\n-def(inline, fn, 0) // { dg-error \"previous\" \"\" }\n+def(inline, fn, 0) // { dg-message \"previous\" \"\" }\n def(inline, fn, 1) // { dg-error \"redefinition\" \"\" }\n \n #undef fn\n #define fn pfx(func_def_inline_after)\n-gnuindef(fn, 0) // { dg-error \"previous\" \"\" }\n+gnuindef(fn, 0) // { dg-message \"previous\" \"\" }\n def(inline, fn, 1) // { dg-error \"redeclare\" \"\" }\n \n #undef fn\n #define fn pfx(func_def_inline_before)\n-def(inline, fn, 0) // { dg-error \"previous\" \"\" }\n+def(inline, fn, 0) // { dg-message \"previous\" \"\" }\n gnuindef(fn, 1) // { dg-error \"redefinition\" \"\" }\n \n #undef fn\n #define fn pfx(func_def_before)\n-def(, fn, 0) // { dg-error \"previous\" \"\" }\n+def(, fn, 0) // { dg-message \"previous\" \"\" }\n gnuindef(fn, 1) // { dg-error \"redefinition\" \"\" }\n \n #undef fn\n #define fn pfx(func_decl_static_inline_before)\n-decl(static inline, fn) // { dg-error \"previous\" \"\" }\n+decl(static inline, fn) // { dg-message \"previous\" \"\" }\n gnuindef(fn, 0) // { dg-error \"redeclared\" \"\" }\n \n #undef fn\n #define fn pfx(func_def_static_inline_after)\n decl(static, fn)\n-gnuindef(fn, 0) // { dg-error \"previous\" \"\" }\n+gnuindef(fn, 0) // { dg-message \"previous\" \"\" }\n decl(static, fn)\n def(static inline, fn, 1) // { dg-error \"redeclare\" \"\" }"}, {"sha": "5674d19c9742802d9828e24b6e09075301cec9ed", "filename": "gcc/testsuite/g++.dg/ext/mv13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv13.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -5,7 +5,7 @@\n \n extern \"C\"\n __attribute__ ((target (\"default\")))\n-int foo ()  // { dg-error \"previously defined here\" }\n+int foo ()  // { dg-message \"previously defined here\" }\n {\n   return 0;\n }"}, {"sha": "64c04fac60f41f2f33d0be28bb72238d91d2de71", "filename": "gcc/testsuite/g++.dg/ext/mv7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv7.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -2,7 +2,7 @@\n // { dg-options \"\" }\n \n __attribute__((target (\"default\")))\n-void foo (void)\t// { dg-error \"previously defined here\" }\n+void foo (void)\t// { dg-message \"previously defined here\" }\n {\n }\n "}, {"sha": "c59651e102a0b42392efa92b314ab991ca6329c4", "filename": "gcc/testsuite/g++.dg/ext/mv9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv9.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -3,7 +3,7 @@\n \n void foo ();\n void foo () __attribute__((target (\"sse4\")));\n-void foo () __attribute__((target (\"default\"))); // { dg-error \"previous declaration\" }\n+void foo () __attribute__((target (\"default\"))); // { dg-message \"previous declaration\" }\n void foo ()\t// { dg-error \"attribute for multi-versioned\" }\n {\n }"}, {"sha": "71c53d3761817e7be1b09a98a9ba8827226ca162", "filename": "gcc/testsuite/g++.dg/ext/pr57362.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57362.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57362.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57362.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -193,7 +193,6 @@ int foo(void) { return 1; }\n     }\n \n /* { dg-prune-output \"attribute.* is unknown\" } */\n-/* { dg-prune-output \"redefinition of int foo\" } */\n-/* { dg-prune-output \"previous declaration of int foo\" } */\n-/* { dg-prune-output \"int foo.* previously defined here\" } */\n+/* { dg-prune-output \"missing 'target' attribute*\" } */\n+/* { dg-prune-output \"redefinition of 'int foo\" } */\n /* { dg-prune-output \"No dispatcher found for\" } */"}, {"sha": "614538527a73068d07083c2a28288a683c374f66", "filename": "gcc/testsuite/g++.dg/ext/typeof10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypeof10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypeof10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypeof10.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -5,7 +5,7 @@ template<int> struct A\n {\n   void foo()\n   {\n-    typedef int T;                // { dg-error \"previous\" }\n+    typedef int T;                // { dg-message \"previous\" }\n     typedef __typeof__(*this) T;  // { dg-error \"conflicting\" }\n   }\n };"}, {"sha": "7c5a96848cc8107506827f0a8b71d1a3e95ec2fc", "filename": "gcc/testsuite/g++.dg/lookup/anon6.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon6.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,11 +1,11 @@\n-extern int v1; // { dg-error \"declared\" }\n+extern int v1; // { dg-message \"declared\" }\n static union { int v1; }; // { dg-error \"redeclaration\" } \n \n-static union { int v2; }; // { dg-error \"declared\" }\n+static union { int v2; }; // { dg-message \"declared\" }\n extern int v2; // { dg-error \"redeclaration\" } \n \n-int v3; // { dg-error \"declared\" }\n+int v3; // { dg-message \"declared\" }\n static union { int v3; }; // { dg-error \"redeclaration\" } \n \n-static union { int v4; }; // { dg-error \"declared\" }\n+static union { int v4; }; // { dg-message \"declared\" }\n static union { int v4; }; // { dg-error \"redeclaration\" } "}, {"sha": "b8481be4d34e32a6fdfabe4c3ed7884fc0fe66e2", "filename": "gcc/testsuite/g++.dg/lookup/crash6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fcrash6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fcrash6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fcrash6.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -4,5 +4,5 @@\n \n // PR c++/18652: ICE redeclaring variable as template.\n \n-int A;\t\t\t// { dg-error \"previous declaration\" }\n+int A;\t\t\t// { dg-message \"previous declaration\" }\n template<int> struct A; // { dg-error \"different kind of symbol\" }"}, {"sha": "74595c26871bc0e274b4021f32c8874deee20cf6", "filename": "gcc/testsuite/g++.dg/lookup/name-clash5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash5.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -7,7 +7,7 @@\n // declarative region (7.3.2, clause 14). ]\"\n \n namespace N\n-{ // { dg-error \"previous declaration\" }\n+{ // { dg-message \"previous declaration\" }\n }\n \n class N; // { dg-error \"redeclared\" }"}, {"sha": "6918142f22220a35c80419296f901ba2c6a74010", "filename": "gcc/testsuite/g++.dg/lookup/name-clash6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash6.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -6,7 +6,7 @@\n // \"[Note: a namespace name or a class template name must be unique in its\n // declarative region (7.3.2, clause 14). ]\"\n \n-class N; // { dg-error \"previous declaration\" }\n+class N; // { dg-message \"previous declaration\" }\n \n namespace N\n { // { dg-error \"redeclared\" }"}, {"sha": "37df228da9ba460c13dbeb86e60de781edf79576", "filename": "gcc/testsuite/g++.dg/other/anon4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon4.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -3,6 +3,6 @@\n \n void foo()\n {\n-    int i;             // { dg-error \"previously\" }\n+    int i;             // { dg-message \"previously\" }\n     union { int i; };  // { dg-error \"redeclaration\" }\n }"}, {"sha": "d218c13bbb2e554d15bb03ac90016fa23ac9056c", "filename": "gcc/testsuite/g++.dg/other/error15.C", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror15.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -3,54 +3,54 @@\n extern void g0 (int a, int b);\n extern void g1 (int a, float b);\n \n-extern void f0 (int a,\t\t// { dg-error \"previous\" }\n+extern void f0 (int a,\t\t// { dg-message \"previous\" }\n                 int a);\t\t// { dg-error \"redefinition\" }\n-extern void f1 (int a,\t\t// { dg-error \"previous\" }\n+extern void f1 (int a,\t\t// { dg-message \"previous\" }\n                 float a);\t// { dg-error \"conflicting\" }\n-extern void f3 (int a, int b, int c, // { dg-error \"previous\" }\n+extern void f3 (int a, int b, int c, // { dg-message \"previous\" }\n                 int a);\t\t// { dg-error \"redefinition\" }\n-extern void f4 (int a, int b, int c, // { dg-error \"previous\" }\n+extern void f4 (int a, int b, int c, // { dg-message \"previous\" }\n                 int a,\t\t     // { dg-error \"redefinition\" }\n                 int a);\t\t     // { dg-error \"redefinition\" }\n-extern void f5 (int a, int b, int c, int d, int e, int f, int g, int h, // { dg-error \"previous\" }\n+extern void f5 (int a, int b, int c, int d, int e, int f, int g, int h, // { dg-message \"previous\" }\n                 int a,\t\t\t\t\t\t\t// { dg-error \"redefinition\" }\n                 int i, int j, int k, int l, int m, int n, int o, int p,\n                 int q, int r, int s, int t, int u, int v, int w, int x, int y,\n                 int z);\n \n-extern void f6 (int a, int, int, int, int, int, int, int, int, int, int, // { dg-error \"previous\" }\n+extern void f6 (int a, int, int, int, int, int, int, int, int, int, int, // { dg-message \"previous\" }\n                 int a,\t\t// { dg-error \"redefinition\" }\n                 int, int, int, int, int, int, int, int, int, int, int,\n                 float, float, float, float, float, float, float, float,\n                 int);\n \n-extern void f7 (void (*a)(int),\t  // { dg-error \"previous\" }\n+extern void f7 (void (*a)(int),\t  // { dg-message \"previous\" }\n                 void (*a)(int));  // { dg-error \"redefinition\" }\n-extern void f8 (float (*a)(int),  // { dg-error \"previous\" }\n+extern void f8 (float (*a)(int),  // { dg-message \"previous\" }\n                 int (*a)(float));  // { dg-error \"conflicting\" }\n \n-extern void f9 (int a,\t\t// { dg-error \"previous\" }\n+extern void f9 (int a,\t\t// { dg-message \"previous\" }\n                 int a,\t\t// { dg-error \"redefinition\" }\n                 int a);\t\t// { dg-error \"redefinition\" }\n \n-extern void f10 (int a,\t\t// { dg-error \"previous\" }\n-                 int b,\t\t// { dg-error \"previous\" }\n-                 int c,\t\t// { dg-error \"previous\" }\n+extern void f10 (int a,\t\t// { dg-message \"previous\" }\n+                 int b,\t\t// { dg-message \"previous\" }\n+                 int c,\t\t// { dg-message \"previous\" }\n                  int c,\t\t// { dg-error \"redefinition\" }\n                  int b,\t\t// { dg-error \"redefinition\" }\n                  int a);\t// { dg-error \"redefinition\" }\n \n class C1 {\n  public:\n   void C1_g0 (int a, int b);\n-  void C1_f0 (int a,\t\t// { dg-error \"previous\" }\n+  void C1_f0 (int a,\t\t// { dg-message \"previous\" }\n               int a);\t\t// { dg-error \"redefinition\" }\n };\n \n template <class T>\n class C2 {\n  public:\n   void C2_g0 (T a, T b);\n-  void C2_f0 (T a,\t\t// { dg-error \"previous\" }\n+  void C2_f0 (T a,\t\t// { dg-message \"previous\" }\n               T a);\t\t// { dg-error \"redefinition\" }\n };"}, {"sha": "116a6846c70a6e9d98f045d3656683ee2ffee810", "filename": "gcc/testsuite/g++.dg/other/error8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror8.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -5,7 +5,7 @@\n \n void foo(void)\n {\n-  union { int alpha; int beta; }; // { dg-error \"previous declaration\" }\n+  union { int alpha; int beta; }; // { dg-message \"previous declaration\" }\n   double alpha;  // { dg-error \"conflicting declaration\" }\n }\n "}, {"sha": "6c8913c1f09a8afa231173952fc11d6f4c49554a", "filename": "gcc/testsuite/g++.dg/other/redecl2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fredecl2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fredecl2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fredecl2.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -7,5 +7,5 @@ struct S {\n   virtual int foo() = 0;\n };\n  \n-int S::foo() { return 0; } // { dg-error \"defined here\" }\n+int S::foo() { return 0; } // { dg-message \"defined here\" }\n int S::foo() { return 0; } // { dg-error \"redefinition\" }"}, {"sha": "c7da3eb702574ec4808a97458f839ac7c40cde40", "filename": "gcc/testsuite/g++.dg/parse/crash16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash16.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,7 +1,7 @@\n // PR c++/16971\n \n namespace N {\n-  int i; // { dg-error \"\" }\n+  int i; // { dg-message \"\" }\n   // By checking for an explicit keyword on the next line we avoid\n   // matching an ICE message.\n   int i; // { dg-error \"redefinition\" }"}, {"sha": "623bbec81c93f6d3cf449b064b249765054dbe7d", "filename": "gcc/testsuite/g++.dg/parse/crash21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash21.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,6 +1,6 @@\n namespace N\n {\n-  struct A; // { dg-error \"previous declaration\" \"\" }\n+  struct A; // { dg-message \"previous declaration\" \"\" }\n }\n \n template<int I>"}, {"sha": "7a0c2655681645d09a58f00af5abff5b4ceace0d", "filename": "gcc/testsuite/g++.dg/parse/crash38.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash38.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,11 +1,11 @@\n /* PR c++/33207  */\n \n /* This would not ICE.  */\n-namespace M { } /* { dg-error \"previous declaration\" } */\n+namespace M { } /* { dg-message \"previous declaration\" } */\n struct M; /* { dg-error \"redeclared as different kind of symbol\" } */\n M *p; /* { dg-error \"does not name a type\" } */\n \n /* This would ICE when processing 'p'.  */\n-namespace N { } /* { dg-error \"previous declaration\" } */\n+namespace N { } /* { dg-message \"previous declaration\" } */\n struct N; /* { dg-error \"redeclared as different kind of symbol\" } */\n struct N* p; /* { dg-error \"redeclared as different kind of symbol|invalid type\" } */"}, {"sha": "3ab3667d82df9b4b6c8d107d87d35a412947c247", "filename": "gcc/testsuite/g++.dg/parse/redef2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fredef2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fredef2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fredef2.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-char * d [10];  // { dg-error \"8: 'd' has a previous declaration as\" }\n+char * d [10];  // { dg-message \"8: 'd' has a previous declaration as\" }\n char e [15][10];\n int (*f)();\n "}, {"sha": "a6cb6b592d6393a9d86d09df913077169fa04812", "filename": "gcc/testsuite/g++.dg/parse/struct-as-enum1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fstruct-as-enum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fstruct-as-enum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fstruct-as-enum1.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -4,7 +4,7 @@\n \n namespace N\n {\n-    struct A {};\t// { dg-error \"previous declaration\" }\n+    struct A {};\t// { dg-message \"previous declaration\" }\n }\n \n typedef enum N::A B;\t// { dg-error \"enum|invalid type\" }"}, {"sha": "840255cbea99b3ece352906af9168ec52503f1ca", "filename": "gcc/testsuite/g++.dg/template/crash39.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash39.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,6 +1,6 @@\n // PR c++/22405\n \n-template <typename T> void foo(T &arg) { // { dg-error \"declared\" }\n+template <typename T> void foo(T &arg) { // { dg-message \"declared\" }\n   arg+=1;\n }\n "}, {"sha": "faa29bf453d37ebc8e0469952542ac12724f22e3", "filename": "gcc/testsuite/g++.dg/template/redecl3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fredecl3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fredecl3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fredecl3.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -3,5 +3,5 @@\n \n // { dg-do compile }\n \n-int foo;                    // { dg-error \"previous declaration\" }\n+int foo;                    // { dg-message \"previous declaration\" }\n template<int> void foo() {} // { dg-error \"redeclared\" }"}, {"sha": "06046170b0b77c403c09ec446b7b300409bfb4f6", "filename": "gcc/testsuite/g++.dg/tls/diag-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-3.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,10 +1,10 @@\n // Report invalid extern and __thread combinations.\n // { dg-require-effective-target tls }\n \n-extern int j;\t\t// { dg-error \"previously declared here\" }\n+extern int j;\t\t// { dg-message \"previously declared here\" }\n __thread int j;\t\t// { dg-error \"follows non-thread-local\" }\n \n-extern __thread int i;\t// { dg-error \"previously declared here\" }\n+extern __thread int i;\t// { dg-message \"previously declared here\" }\n int i;\t\t\t// { dg-error \"follows thread-local\" }\n \n extern __thread int k;\t// This is fine."}, {"sha": "3a9b019b67569864fade9c73b3e88dcf17837d48", "filename": "gcc/testsuite/g++.dg/warn/Wredundant-decls-spec.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-decls-spec.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-decls-spec.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-decls-spec.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -8,5 +8,5 @@ template <typename T> struct S\n \n template<> void S<int>::foo();\n \n-template<> void S<double>::foo();  // { dg-warning \"previous declaration\" }\n+template<> void S<double>::foo();  // { dg-message \"previous declaration\" }\n template<> void S<double>::foo();  // { dg-warning \"redundant redeclaration\" }"}, {"sha": "af65162cf138bb7c26c9c1f50dd700dbb0bee44e", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/typedef01.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftypedef01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftypedef01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftypedef01.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -16,7 +16,7 @@ typedef int I;\n typedef I I;\n \n //p3--cannot redefine to a different type in a given scope\n-class complex2 { /* ... */ };// { dg-error \"\" } .*\n+class complex2 { /* ... */ };// { dg-message \"\" } .*\n typedef int complex2;// { dg-error \"\" } .*\n typedef int complex3;// { dg-message \"\" } .*\n class complex3 { /* ... */ };// { dg-error \"\" } .*"}, {"sha": "a3d23747b48771be95af23648bac8801e1ae3075", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/warn02.C", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fwarn02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fwarn02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fwarn02.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -44,11 +44,5 @@ public:\n   int b;\n };\n \n+extern int foo3(const char *);  // { dg-message \"\" } \n extern int foo3(const char *);  // { dg-warning \"\" } \n-extern int foo3(const char *);  // { dg-warning \"\" } \n-\n-\n-\n-\n-\n-"}, {"sha": "5e6acc8c61c719c5368ce2e0759544d6dff1bbf5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -5,7 +5,7 @@\n class Graph { // { dg-error \"1:new types|1: note: \\\\(perhaps\" }\n public:\n       unsigned         char N;\n-      Graph(void) {} // { dg-error \"7:'Graph\" }\n+      Graph(void) {} // { dg-message \"7:'Graph\" }\n }\n \n Graph::Graph(void) // { dg-error \"18:return type|1: error: redefinition\" }"}, {"sha": "3119f02ede2e6d819a658e16871467fde8ad81b5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -7,7 +7,7 @@ public:\n     Pix(const Pix&);\n \n     // Friend functions so that v == x works as does x == v works\n-    friend int operator==(void *v, const Pix& x) // { dg-error \"previously\" }\n+    friend int operator==(void *v, const Pix& x) // { dg-message \"previously\" }\n     { return v == index; }  // { dg-error \"from this location\" }\n     // ??? should be operator!=\n     friend int operator==(void *v, const Pix& x) // { dg-error \"redefinition\" }"}, {"sha": "d1d84448f3885c747fdbd5a92dc45cd2457776ef", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg4.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -2,8 +2,8 @@\n // GROUPS passed error-messages\n class X {\n public:\n-    static int x;// { dg-error \"\" }  previous.*\n-    static int y;// { dg-error \"\" }  previous.*\n+    static int x;// { dg-message \"\" }  previous.*\n+    static int y;// { dg-message \"\" }  previous.*\n };\n \n unsigned X::x;// { dg-error \"\" }  conflict.*"}, {"sha": "1edd548b668900c536f72f5418c05a8812160b48", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/redecl1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl1.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble }\n // GROUPS passed redeclaration\n-inline int min(int x, int y) {return x < y ? x : y;}\t/* 235 */// { dg-error \"\" } .*\n+inline int min(int x, int y) {return x < y ? x : y;}\t/* 235 */// { dg-message \"\" } .*\n int min(int a, int b);\n inline int min(int a, int b) {return (a < b)?a:b;}// { dg-error \"\" } .*"}, {"sha": "7c43231027969cddfdcaba84cbf62a105db55ddb", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/static3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic3.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -3,7 +3,7 @@\n class foo{\n public:\n   static void  bar( int i ){ value = i; }\n-  static int  value;// { dg-error \"\" } .*\n+  static int  value;// { dg-message \"\" } .*\n };\n \n const int  foo::value = 0; // should be an error.// { dg-error \"\" } .*"}, {"sha": "c74baa9406af915c02691d2481bdbb90b56cd771", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900127_02.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900127_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900127_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900127_02.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -16,10 +16,10 @@\n \n // keywords: name spaces, overloading\n \n-int global0;\t\t\t// { dg-error \"\" } \n+int global0;\t\t\t// { dg-message \"\" } \n int global0 ();\t\t\t// { dg-error \"\" } \n \n-int global1 ();\t\t\t// { dg-error \"\" } xref for below\n+int global1 ();\t\t\t// { dg-message \"\" } xref for below\n int global1;\t\t\t// { dg-error \"\" } caught\n \n struct struct_0 {\n@@ -34,13 +34,13 @@ struct struct_1 {\n \n void function_0 ()\n {\n-\tint function_0_local;\t// { dg-error \"\" } \n+\tint function_0_local;\t// { dg-message \"\" } \n \textern int function_0_local ();\t// { dg-error \"\" } \n }\n \n void function_1 ()\n {\n-\tint function_1_local ();        // { dg-error \"\" } \n+\tint function_1_local ();        // { dg-message \"\" } \n \textern int function_1_local;\t// { dg-error \"\" } \n }\n "}, {"sha": "3321cece23a47e12743823eb3a4e8de76c065595", "filename": "gcc/testsuite/g++.old-deja/g++.jason/binding.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fbinding.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fbinding.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fbinding.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -6,7 +6,7 @@ struct T { ~T(); };\n int main()\n {\n   foo:\n-   T t;\t\t\t\t// { dg-error \"\" } redeclared\n+   T t;\t\t\t\t// { dg-message \"\" } redeclared\n   bar:\n    T t;\t\t\t\t// { dg-error \"\" } redeclaration\n }"}, {"sha": "30c563b9d830f1793d09e7d377fe17c657a79e17", "filename": "gcc/testsuite/g++.old-deja/g++.jason/crash4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash4.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -16,7 +16,7 @@ public:\n };\n \n template <class T>\n-const ccObjectInfo& cc_Array<T>::repInvariant(int) const  // { dg-error \"previously declared\" }\n+const ccObjectInfo& cc_Array<T>::repInvariant(int) const  // { dg-message \"previously declared\" }\n {  return *this /* *this is required here */; }\n \n template <class T>"}, {"sha": "f17c402976f6d5aa9675cedc833b8ba1f9144594", "filename": "gcc/testsuite/g++.old-deja/g++.jason/crash7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash7.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,6 +1,6 @@\n // { dg-do assemble  }\n // Bug: g++ can't deal.\n \n-typedef unsigned size_t;\t// { dg-error \"\" } previous declaration\n+typedef unsigned size_t;\t// { dg-message \"\" } previous declaration\n typedef unsigned long size_t;\t// { dg-error \"\" } redefining size_t\n void f (size_t);\t\t// causes compiler segfault - "}, {"sha": "4ef9208ea34773371e0e872aa4b40bd56d4d0ed5", "filename": "gcc/testsuite/g++.old-deja/g++.jason/lineno.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Flineno.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Flineno.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Flineno.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,6 +1,6 @@\n // { dg-do assemble  }\n // Bug; g++ binds a function definition to the line number of a later decl.\n \n-void foo () { }\t\t\t// { dg-error \"\" } redeclared\n+void foo () { }\t\t\t// { dg-message \"\" } redeclared\n void foo ();\t\t\t// { dg-bogus \"\" } invalid binding\n void foo () { }\t\t\t// { dg-error \"\" } redeclared"}, {"sha": "245c8fa073eac3f8b917982e8ce0dc4e87bc0191", "filename": "gcc/testsuite/g++.old-deja/g++.jason/scoping7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping7.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -2,5 +2,5 @@\n // Bug: g++ doesn't flag name collisions between types and non-types as\n // errors.  It shouldn't for class names, but it should for typedefs.\n \n-int bar;\t\t\t// { dg-error \"\" } \n+int bar;\t\t\t// { dg-message \"\" } \n typedef int bar;\t\t// { dg-error \"\" } "}, {"sha": "f633873f854c44344254aacde3662215e85c4457", "filename": "gcc/testsuite/g++.old-deja/g++.mike/misc3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fmisc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fmisc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fmisc3.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,4 +1,4 @@\n // { dg-do assemble  }\n // GROUPS uncaught\n-int a;// { dg-error \"\" } .*\n+int a;// { dg-message \"\" } .*\n int a;// { dg-error \"\" } .*"}, {"sha": "226df2d9e7afaea053d25f63af670344433fbb0d", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net44.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet44.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,7 +1,7 @@\n // { dg-do assemble  }\n // Make sure we don't dump core\n \n-enum request { q, w, e};\t\t// { dg-error \"\" } \n+enum request { q, w, e};\t\t// { dg-message \"\" } \n \n class request {\t\t\t\t// { dg-error \"\" } \n public:"}, {"sha": "b39a1d784523d6be9adcdc0f2fcada8e8209385c", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns3.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-int i;\t\t// { dg-error \"\" } \n+int i;\t\t// { dg-message \"\" } \n \n namespace i {\t// { dg-error \"\" } \n }"}, {"sha": "2d9dd4a4c5731266c2aea084cbb8467bd2843bd4", "filename": "gcc/testsuite/g++.old-deja/g++.ns/alias4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Falias4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Falias4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Falias4.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -7,7 +7,7 @@ namespace D {     // { dg-error \"\" } reopening namespace with alias\n   void f();\n }\n \n-void C::f(){}     // { dg-error \"\" } previous definition\n+void C::f(){}     // { dg-message \"\" } previous definition\n \n void D::f(){}     // { dg-error \"\" } redefinition\n "}, {"sha": "3067bdfb7c353485d0bc5fff7c32a6dfefdfabd3", "filename": "gcc/testsuite/g++.old-deja/g++.ns/ns11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fns11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fns11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fns11.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -5,7 +5,7 @@\n namespace A{\n   void f(int);\n   void f(int,int);\n-  int i;              // { dg-error \"\" } .*\n+  int i;              // { dg-message \"\" } .*\n }\n \n void A::f(){}         // { dg-error \"\" } should have been declared before"}, {"sha": "72f94cb1a018ad45385912466d13c1f7d2a485cf", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash23.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -2,6 +2,6 @@\n // Origin: Gerald Pfeifer <pfeifer@dbai.tuwien.ac.at>\n \n class T;\n-inline void operator<(T&, T&) { } // { dg-error \"\" }  previous definition\n+inline void operator<(T&, T&) { } // { dg-message \"\" }  previous definition\n inline void operator<(T&, T&) { } // { dg-error \"\" } duplicate definition\n "}, {"sha": "ebcc064404f7226481d29806b3e11ac3c374679c", "filename": "gcc/testsuite/g++.old-deja/g++.other/decl8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl8.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -3,7 +3,7 @@\n \n void foo(void)\n {\n-  extern int i;    // { dg-error \"\" } previous declaration\n+  extern int i;    // { dg-message \"\" } previous declaration\n   extern double i; // { dg-error \"\" } conflicting type\n   extern int j;\n   extern int j;"}, {"sha": "5e01c1d1f9067a5ffe089959693b2a10b988c0bd", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage3.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n // Origin: Mark Mitchell <mark@codesourcery.com>\n \n-extern \"C\" void f (); // { dg-error \"\" } previous declaration\n+extern \"C\" void f (); // { dg-message \"\" } previous declaration\n static void f () {} // { dg-error \"\" } extern redeclared static"}, {"sha": "1dce27397ae9e60007bf83f8526a0776954e120d", "filename": "gcc/testsuite/g++.old-deja/g++.other/typeck1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypeck1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypeck1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypeck1.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -4,7 +4,7 @@ extern int a[][];   // { dg-error \"\" } invalid multidimensional array\n extern int b[7][];  // { dg-error \"\" } invalid multidimensional array\n extern int c[][7];  // OK\n \n-extern int (*i)[];  // { dg-error \"\" } previous declaration\n+extern int (*i)[];  // { dg-message \"\" } previous declaration\n extern int (*i)[7]; // { dg-error \"\" } conflicting types for `i'\n \n extern int m[];"}, {"sha": "09845509028e26f55908aaaa5b88d61a72257f91", "filename": "gcc/testsuite/g++.old-deja/g++.other/typedef5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef5.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -10,7 +10,7 @@ typedef int t;\n typedef t* u;\n typedef u v;\n typedef v* (*w)(t const); // this is ok\n-typedef v* (*w)(t); // { dg-error \"\" } covers message `previously declared here'\n+typedef v* (*w)(t); // { dg-message \"\" } covers message `previously declared here'\n typedef v* (*const w)(t); // { dg-error \"\" } invalid redeclaration\n typedef v const* (*w)(t); // { dg-error \"\" } invalid redeclaration\n typedef v* const (*w)(t); // { dg-error \"\" } invalid redeclaration"}, {"sha": "54029eb85448056ac85f0c0490301722cac2eab0", "filename": "gcc/testsuite/g++.old-deja/g++.pt/explicit34.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit34.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -5,7 +5,7 @@ template <class T>\n void foo(T t);\n \n template <>\n-void foo(int) {}; // { dg-error \"6:previously declared here\" }\n+void foo(int) {}; // { dg-message \"6:previously declared here\" }\n \n template <>\n void foo<int>(int) {} // { dg-error \"6:redefinition\" }"}, {"sha": "f6f261ba07f085b9a7fd4b9bb001cf950044c3b0", "filename": "gcc/testsuite/g++.old-deja/g++.pt/friend36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend36.C?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,7 +1,7 @@\n // { dg-do assemble  }\n \n template <class T>\n-void f(T) {} // { dg-error \"previously\" }\n+void f(T) {} // { dg-message \"previously\" }\n \n template <class U>\n struct S {"}, {"sha": "cde1bc27469bbf9fdb5c40ec56039322886167f5", "filename": "gcc/testsuite/obj-c++.dg/method-8.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-8.mm?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -16,7 +16,7 @@ - (int) meth1;\n @end\n \n @implementation class3\n-- (int) meth1 { return 0; } /* { dg-error \"previously defined here\" } */\n+- (int) meth1 { return 0; } /* { dg-message \"previously defined here\" } */\n - (int) meth1 { return 0; } /* { dg-error \"redefinition of\" } */\n @end\n \n@@ -25,6 +25,6 @@ + (void) meth1;\n @end\n \n @implementation class4\n-+ (void) meth1 {} /* { dg-error \"previously defined here\" } */\n++ (void) meth1 {} /* { dg-message \"previously defined here\" } */\n + (void) meth1 {} /* { dg-error \"redefinition of\" } */\n @end"}, {"sha": "22c2395ab97a7f67ef967f6129967856a1870958", "filename": "gcc/testsuite/obj-c++.dg/tls/diag-3.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e507b9a9988d4cba9d03d7abb94c0f870952bba/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-3.mm?ref=2e507b9a9988d4cba9d03d7abb94c0f870952bba", "patch": "@@ -1,10 +1,10 @@\n /* Report invalid extern and __thread combinations. */\n /* { dg-require-effective-target tls } */\n \n-extern int j;\t\t/* { dg-error \"previously declared here\" } */\n+extern int j;\t\t/* { dg-message \"previously declared here\" } */\n __thread int j;\t\t/* { dg-error \"follows non-thread-local\" } */\n \n-extern __thread int i;\t/* { dg-error \"previously declared here\" } */\n+extern __thread int i;\t/* { dg-message \"previously declared here\" } */\n int i;\t\t\t/* { dg-error \"follows thread-local\" } */\n \n extern __thread int k;\t/* This is fine. */"}]}