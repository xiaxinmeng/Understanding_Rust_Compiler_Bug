{"sha": "445c435a52d25ed61ed9698e56d09309c5d949c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1YzQzNWE1MmQyNWVkNjFlZDk2OThlNTZkMDkzMDljNWQ5NDljNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-24T19:47:47Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-24T19:47:47Z"}, "message": "texi2pod.pl: Handle \"\\,\".\n\ncontrib:\n\t* texi2pod.pl: Handle \"\\,\".\n\ngcc:\n\t* gcc.1, cpp.1: Regenerate.\n\nFrom-SVN: r39244", "tree": {"sha": "79ac8d91dacc854cf5720df755fe7a26be2ae951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ac8d91dacc854cf5720df755fe7a26be2ae951"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/445c435a52d25ed61ed9698e56d09309c5d949c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445c435a52d25ed61ed9698e56d09309c5d949c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/445c435a52d25ed61ed9698e56d09309c5d949c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445c435a52d25ed61ed9698e56d09309c5d949c6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c347e89206c3ab7c8273182339c061a2d849ed23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c347e89206c3ab7c8273182339c061a2d849ed23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c347e89206c3ab7c8273182339c061a2d849ed23"}], "stats": {"total": 135, "additions": 125, "deletions": 10}, "files": [{"sha": "9ed5e31b0e3e7c5172fa0c70e9dd877845bc85dd", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445c435a52d25ed61ed9698e56d09309c5d949c6/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445c435a52d25ed61ed9698e56d09309c5d949c6/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=445c435a52d25ed61ed9698e56d09309c5d949c6", "patch": "@@ -1,3 +1,7 @@\n+2001-01-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* texi2pod.pl: Handle \"\\,\".\n+\n 2001-01-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* texi2pod.pl: Fix regular expression for @r to avoid exponential"}, {"sha": "a58bca08012ca2552f8f34423a60bed827a31a17", "filename": "contrib/texi2pod.pl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445c435a52d25ed61ed9698e56d09309c5d949c6/contrib%2Ftexi2pod.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445c435a52d25ed61ed9698e56d09309c5d949c6/contrib%2Ftexi2pod.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftexi2pod.pl?ref=445c435a52d25ed61ed9698e56d09309c5d949c6", "patch": "@@ -144,6 +144,7 @@\n     s/\\@TeX\\{\\}/TeX/g;\n     s/\\@pounds\\{\\}/\\#/g;\n     s/\\@minus(?:\\{\\})?/-/g;\n+    s/\\\\,/,/g;\n \n     # Now the ones that have to be replaced by special escapes\n     # (which will be turned back into text by unmunge())"}, {"sha": "a09869a8aee3ef5c7d7c6956245ae67e13f16541", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445c435a52d25ed61ed9698e56d09309c5d949c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445c435a52d25ed61ed9698e56d09309c5d949c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=445c435a52d25ed61ed9698e56d09309c5d949c6", "patch": "@@ -1,3 +1,7 @@\n+2001-01-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.1, cpp.1: Regenerate.\n+\n 2001-01-24  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* calls.c (emit_library_call_value_1): Memory slot for"}, {"sha": "0f950fa887f0c4b9763c995258adfe746bebcd8d", "filename": "gcc/cpp.1", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445c435a52d25ed61ed9698e56d09309c5d949c6/gcc%2Fcpp.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445c435a52d25ed61ed9698e56d09309c5d949c6/gcc%2Fcpp.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.1?ref=445c435a52d25ed61ed9698e56d09309c5d949c6", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.1\n-.\\\" Fri Jan 12 18:47:56 2001\n+.\\\" Wed Jan 24 19:43:25 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -138,7 +138,7 @@\n .\\\" ======================================================================\n .\\\"\n .IX Title \"CPP 1\"\n-.TH CPP 1 \"gcc-2.97\" \"2001-01-12\" \"GNU\"\n+.TH CPP 1 \"gcc-2.97\" \"2001-01-24\" \"GNU\"\n .UC\n .SH \"NAME\"\n cpp \\- The C Preprocessor\n@@ -509,13 +509,15 @@ Instead of outputting the result of preprocessing, output a rule\n suitable for \\f(CW\\*(C`make\\*(C'\\fR describing the dependencies of the main source\n file.  The preprocessor outputs one \\f(CW\\*(C`make\\*(C'\\fR rule containing the\n object file name for that source file, a colon, and the names of all the\n-included files.  If there are many included files then the rule is split\n-into several lines using \\fB\\e\\fR\\-newline.\n+included files, including those coming from \\fB\\-include\\fR or\n+\\&\\fB\\-imacros\\fR command line options.  If there are many included files\n+then the rule is split into several lines using \\fB\\e\\fR\\-newline.\n .Ip \"\\fB\\-MM\\fR\" 4\n .IX Item \"-MM\"\n Like \\fB\\-M\\fR, but mention only the files included with \\fB#include\n-\"\\fR\\fIfile\\fR\\fB\"\\fR.  System header files included with \\fB#include\n-<\\fR\\fIfile\\fR\\fB>\\fR are omitted.\n+\"\\fR\\fIfile\\fR\\fB\"\\fR or with \\fB\\-include\\fR or \\fB\\-imacros\\fR command line\n+options.  System header files included with \\fB#include <\\fR\\fIfile\\fR\\fB>\\fR\n+are omitted.\n .Ip \"\\fB\\-MF\\fR \\fIfile\\fR\" 4\n .IX Item \"-MF file\"\n When used with \\fB\\-M\\fR or \\fB\\-MM\\fR, specifies a file to write the"}, {"sha": "c78214a41125eb367e7b9300ea786a46fd22773a", "filename": "gcc/gcc.1", "status": "modified", "additions": 108, "deletions": 4, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445c435a52d25ed61ed9698e56d09309c5d949c6/gcc%2Fgcc.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445c435a52d25ed61ed9698e56d09309c5d949c6/gcc%2Fgcc.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.1?ref=445c435a52d25ed61ed9698e56d09309c5d949c6", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.1\n-.\\\" Fri Jan 12 20:37:33 2001\n+.\\\" Wed Jan 24 19:43:11 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -138,7 +138,7 @@\n .\\\" ======================================================================\n .\\\"\n .IX Title \"GCC 1\"\n-.TH GCC 1 \"gcc-2.97\" \"2001-01-12\" \"GNU\"\n+.TH GCC 1 \"gcc-2.97\" \"2001-01-24\" \"GNU\"\n .UC\n .SH \"NAME\"\n gcc \\- \\s-1GNU\\s0 project C and \\*(C+ compiler\n@@ -280,7 +280,8 @@ in the following sections.\n \\&\\-finline-functions  \\-finline-limit=\\fR\\fIn\\fR  \\fB\\-fkeep-inline-functions \n \\&\\-fkeep-static-consts  \\-fmove-all-movables \n \\&\\-fno-default-inline  \\-fno-defer-pop \n-\\&\\-fno-function-cse  \\-fno-inline  \\-fno-math-errno  \\-fno-peephole \n+\\&\\-fno-function-cse   \\-fno-guess-branch-probability\n+\\&\\-fno-inline  \\-fno-math-errno  \\-fno-peephole \n \\&\\-fomit-frame-pointer  \\-foptimize-register-move \n \\&\\-foptimize-sibling-calls  \\-freduce-all-givs \n \\&\\-fregmove  \\-frename-registers \n@@ -578,11 +579,19 @@ in the following sections.\n .Sp\n \\&\\fIMCore Options\\fR\n .Sp\n-\\&\\fB\\-mhardlit, \\-mno-hardlit \\-mdiv \\-mno-div \\-mrelax-immediates  \n+\\&\\fB\\-mhardlit \\-mno-hardlit \\-mdiv \\-mno-div \\-mrelax-immediates  \n \\&\\-mno-relax-immediates \\-mwide-bitfields \\-mno-wide-bitfields \n \\&\\-m4byte-functions \\-mno-4byte-functions \\-mcallgraph-data \n \\&\\-mno-callgraph-data \\-mslow-bytes \\-mno-slow-bytes \\-mno-lsim \n \\&\\-mlittle-endian \\-mbig-endian \\-m210 \\-m340 \\-mstack-increment\\fR\n+.Sp\n+\\&\\fI\\s-1IA-64\\s0 Options\\fR\n+.Sp\n+\\&\\fB\\-mbig-endian \\-mlittle-endian \\-mgnu-as \\-mgnu-ld \\-mno-pic \n+\\&\\-mvolatile-asm-stop \\-mb-step \\-mregister-names \\-mno-sdata \n+\\&\\-mconstant-gp \\-mauto-pic \\-minline-divide-min-latency \n+\\&\\-minline-divide-max-throughput \\-mno-dwarf2\\-asm \n+\\&\\-mfixed-range=\\fR\\fIregister range\\fR\n .Ip \"\\fICode Generation Options\\fR\" 4\n .IX Item \"Code Generation Options\"\n \\&\\fB\\-fcall-saved-\\fR\\fIreg\\fR  \\fB\\-fcall-used-\\fR\\fIreg\\fR \n@@ -2991,6 +3000,15 @@ Disable any machine-specific peephole optimizations.\n After running a program compiled with \\fB\\-fprofile-arcs\\fR, you can compile it a second time using\n \\&\\fB\\-fbranch-probabilities\\fR, to improve optimizations based on\n guessing the path a branch might take.\n+.Ip \"\\fB\\-fno-guess-branch-probability\\fR\" 4\n+.IX Item \"-fno-guess-branch-probability\"\n+Sometimes gcc will opt to guess branch probabilities when none are\n+available from either profile directed feedback (\\fB\\-fprofile-arcs\\fR)\n+or \\fB_\\|_builtin_expect\\fR.  In a hard real-time system, people don't\n+want different runs of the compiler to produce code that has different\n+behavior; minimizing non-determinism is of paramount import.  This\n+switch allows users to reduce non-determinism, possibly at the expense\n+of inferior optimization.\n .Ip \"\\fB\\-fstrict-aliasing\\fR\" 4\n .IX Item \"-fstrict-aliasing\"\n Allows the compiler to assume the strictest aliasing rules applicable to\n@@ -7166,6 +7184,92 @@ Generate code for a little endian target.\n .PD\n Generate code for the 210 processor.\n .PP\n+.I \"\\s-1IA-64\\s0 Options\"\n+.IX Subsection \"IA-64 Options\"\n+.PP\n+These are the \\fB\\-m\\fR options defined for the Intel \\s-1IA-64\\s0 architecture.\n+.Ip \"\\fB\\-mbig-endian\\fR\" 4\n+.IX Item \"-mbig-endian\"\n+Generate code for a big endian target.  This is the default for \\s-1HPUX\\s0.\n+.Ip \"\\fB\\-mlittle-endian\\fR\" 4\n+.IX Item \"-mlittle-endian\"\n+Generate code for a little endian target.  This is the default for \\s-1AIX5\\s0\n+and Linux.\n+.Ip \"\\fB\\-mgnu-as\\fR\" 4\n+.IX Item \"-mgnu-as\"\n+.PD 0\n+.Ip \"\\fB\\-mno-gnu-as\\fR\" 4\n+.IX Item \"-mno-gnu-as\"\n+.PD\n+Generate (or don't) code for the \\s-1GNU\\s0 assembler.  This is the default.\n+.Ip \"\\fB\\-mgnu-ld\\fR\" 4\n+.IX Item \"-mgnu-ld\"\n+.PD 0\n+.Ip \"\\fB\\-mno-gnu-ld\\fR\" 4\n+.IX Item \"-mno-gnu-ld\"\n+.PD\n+Generate (or don't) code for the \\s-1GNU\\s0 linker.  This is the default.\n+.Ip \"\\fB\\-mno-pic\\fR\" 4\n+.IX Item \"-mno-pic\"\n+Generate code that does not use a global pointer register.  The result\n+is not position independent code, and violates the \\s-1IA-64\\s0 \\s-1ABI\\s0.\n+.Ip \"\\fB\\-mvolatile-asm-stop\\fR\" 4\n+.IX Item \"-mvolatile-asm-stop\"\n+.PD 0\n+.Ip \"\\fB\\-mno-volatile-asm-stop\\fR\" 4\n+.IX Item \"-mno-volatile-asm-stop\"\n+.PD\n+Generate (or don't) a stop bit immediately before and after volatile asm\n+statements.\n+.Ip \"\\fB\\-mb-step\\fR\" 4\n+.IX Item \"-mb-step\"\n+Generate code that works around Itanium B step errata.\n+.Ip \"\\fB\\-mregister-names\\fR\" 4\n+.IX Item \"-mregister-names\"\n+.PD 0\n+.Ip \"\\fB\\-mno-register-names\\fR\" 4\n+.IX Item \"-mno-register-names\"\n+.PD\n+Generate (or don't) \\fBin\\fR, \\fBloc\\fR, and \\fBout\\fR register names for\n+the stacked registers.  This may make assembler output more readable.\n+.Ip \"\\fB\\-mno-sdata\\fR\" 4\n+.IX Item \"-mno-sdata\"\n+.PD 0\n+.Ip \"\\fB\\-msdata\\fR\" 4\n+.IX Item \"-msdata\"\n+.PD\n+Disable (or enable) optimizations that use the small data section.  This may\n+be useful for working around optimizer bugs.\n+.Ip \"\\fB\\-mconstant-gp\\fR\" 4\n+.IX Item \"-mconstant-gp\"\n+Generate code that uses a single constant global pointer value.  This is\n+useful when compiling kernel code.\n+.Ip \"\\fB\\-mauto-pic\\fR\" 4\n+.IX Item \"-mauto-pic\"\n+Generate code that is self-relocatable.  This implies \\fB\\-mconstant-gp\\fR.\n+This is useful when compiling firmware code.\n+.Ip \"\\fB\\-minline-divide-min-latency\\fR\" 4\n+.IX Item \"-minline-divide-min-latency\"\n+Generate code for inline divides using the minimum latency algorithm.\n+.Ip \"\\fB\\-minline-divide-max-throughput\\fR\" 4\n+.IX Item \"-minline-divide-max-throughput\"\n+Generate code for inline divides using the maximum throughput algorithm.\n+.Ip \"\\fB\\-mno-dwarf2\\-asm\\fR\" 4\n+.IX Item \"-mno-dwarf2-asm\"\n+.PD 0\n+.Ip \"\\fB\\-mdwarf2\\-asm\\fR\" 4\n+.IX Item \"-mdwarf2-asm\"\n+.PD\n+Don't (or do) generate assembler code for the \\s-1DWARF2\\s0 line number debugging\n+info.  This may be useful when not using the \\s-1GNU\\s0 assembler.\n+.Ip \"\\fB\\-mfixed-range=\\fR\\fIregister range\\fR\" 4\n+.IX Item \"-mfixed-range=register range\"\n+Generate code treating the given register range as fixed registers.\n+A fixed register is one that the register allocator can not use.  This is\n+useful when compiling kernel code.  A register range is specified as\n+two registers separated by a dash.  Multiple register ranges can be\n+specified separated by a comma.\n+.PP\n .I \"D30V Options\"\n .IX Subsection \"D30V Options\"\n .PP"}]}