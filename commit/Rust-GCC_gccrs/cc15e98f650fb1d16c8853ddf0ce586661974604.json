{"sha": "cc15e98f650fb1d16c8853ddf0ce586661974604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxNWU5OGY2NTBmYjFkMTZjODg1M2RkZjBjZTU4NjY2MTk3NDYwNA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2004-09-28T17:37:35Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2004-09-28T17:37:35Z"}, "message": "sh.h (INIT_CUMULATIVE_ARGS): Replace with an invocation of the function sh_init_cumulative_args.\n\nsh.h (INIT_CUMULATIVE_ARGS): Replace with an invocation of the function\n  sh_init_cumulative_args.\n  (INIT_CUMULATIVE_LIBCALL_ARGS): Likewise.\n  (INIT_CUMULATIVE_INCOMING_ARGS): Delete.\nsh-protos.h: Prototype sh_init_cumulative_args.\nsh.c (sh_init_cumulative_args): New function based on the contents of the old\n  INIT_CUMULATIVE_ARGS macro but with a heuristic added to determine the setting\n  of force_mem when a library function is being called.\n\nFrom-SVN: r88238", "tree": {"sha": "85844d23906415811f8d18d30ec0cbc595499e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85844d23906415811f8d18d30ec0cbc595499e3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc15e98f650fb1d16c8853ddf0ce586661974604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc15e98f650fb1d16c8853ddf0ce586661974604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc15e98f650fb1d16c8853ddf0ce586661974604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc15e98f650fb1d16c8853ddf0ce586661974604/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee1f0fb06c92ae4fe9a48a9387169824b1769563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1f0fb06c92ae4fe9a48a9387169824b1769563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1f0fb06c92ae4fe9a48a9387169824b1769563"}], "stats": {"total": 127, "additions": 87, "deletions": 40}, "files": [{"sha": "229afe0d0bc9e3c2d995b8aeaf7069c7dff97659", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc15e98f650fb1d16c8853ddf0ce586661974604/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc15e98f650fb1d16c8853ddf0ce586661974604/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc15e98f650fb1d16c8853ddf0ce586661974604", "patch": "@@ -1,3 +1,15 @@\n+2004-09-28  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/sh/sh.h (INIT_CUMULATIVE_ARGS): Replace with an\n+\tinvocation of the function sh_init_cumulative_args.\n+\t(INIT_CUMULATIVE_LIBCALL_ARGS): Likewise.\n+\t(INIT_CUMULATIVE_INCOMING_ARGS): Delete.\n+\t* config/sh/sh-protos.h: Prototype sh_init_cumulative_args.\n+\t* config/sh/sh.c (sh_init_cumulative_args): New function based\n+\ton the contents of the old INIT_CUMULATIVE_ARGS macro but with a\n+\theuristic added to determine the setting of force_mem when a\n+\tlibrary function is being called.\n+\n 2004-09-28  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-ssa-loop-im.c (single_reachable_address) <PHI_NODE>:"}, {"sha": "039f8cb8913eeab2c23bb1730fb2002230035af5", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc15e98f650fb1d16c8853ddf0ce586661974604/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc15e98f650fb1d16c8853ddf0ce586661974604/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=cc15e98f650fb1d16c8853ddf0ce586661974604", "patch": "@@ -143,6 +143,7 @@ extern rtx sh_get_pr_initial_val (void);\n extern rtx sh_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern void sh_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern int sh_pass_in_reg_p (CUMULATIVE_ARGS *, enum machine_mode, tree);\n+extern void sh_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, signed int, enum machine_mode);\n extern const char *sh_pch_valid_p (const void *data_p, size_t sz);\n extern bool sh_promote_prototypes (tree);\n "}, {"sha": "1d973439e608df1aa806942c415c4e7550035879", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc15e98f650fb1d16c8853ddf0ce586661974604/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc15e98f650fb1d16c8853ddf0ce586661974604/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=cc15e98f650fb1d16c8853ddf0ce586661974604", "patch": "@@ -10035,4 +10035,76 @@ sh_fsca_int2sf (void)\n \n   return sh_fsca_int2sf_rtx;\n }\n+\n+/* Initialise the CUMULATIVE_ARGS structure.  */\n+\n+void\n+sh_init_cumulative_args (CUMULATIVE_ARGS *  pcum,\n+\t\t\t tree               fntype,\n+\t\t\t rtx\t\t    libname ATTRIBUTE_UNUSED,\n+\t\t\t tree               fndecl,\n+\t\t\t signed int         n_named_args,\n+\t\t\t enum machine_mode  mode)\n+{\n+  pcum->arg_count [(int) SH_ARG_FLOAT] = 0;\n+  pcum->free_single_fp_reg = 0;\n+  pcum->stack_regs = 0;\n+  pcum->byref_regs = 0;\n+  pcum->byref = 0;\n+  pcum->outgoing = (n_named_args == -1) ? 0 : 1;\n+\n+  /* XXX - Should we check TARGET_HITACHI here ???  */\n+  pcum->renesas_abi = sh_attr_renesas_p (fntype) ? 1 : 0;\n+\n+  if (fntype)\n+    {\n+      pcum->force_mem = ((TARGET_HITACHI || pcum->renesas_abi)\n+\t\t\t && aggregate_value_p (TREE_TYPE (fntype), fndecl));\n+      pcum->prototype_p = TYPE_ARG_TYPES (fntype) ? TRUE : FALSE;\n+      pcum->arg_count [(int) SH_ARG_INT]\n+\t= TARGET_SH5 && aggregate_value_p (TREE_TYPE (fntype), fndecl);\n+\n+      pcum->call_cookie\n+\t= CALL_COOKIE_RET_TRAMP (TARGET_SHCOMPACT\n+\t\t\t\t && pcum->arg_count [(int) SH_ARG_INT] == 0\n+\t\t\t\t && (TYPE_MODE (TREE_TYPE (fntype)) == BLKmode\n+\t\t\t\t     ? int_size_in_bytes (TREE_TYPE (fntype))\n+\t\t\t\t     : GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (fntype)))) > 4\n+\t\t\t\t && (BASE_RETURN_VALUE_REG (TYPE_MODE (TREE_TYPE (fntype)))\n+\t\t\t\t     == FIRST_RET_REG));\n+    }\n+  else\n+    {\n+      pcum->arg_count [(int) SH_ARG_INT] = 0;\n+      pcum->prototype_p = FALSE;\n+      if (mode != VOIDmode)\n+\t{\n+\t  pcum->call_cookie = \n+\t    CALL_COOKIE_RET_TRAMP (TARGET_SHCOMPACT\n+\t\t\t\t   && GET_MODE_SIZE (mode) > 4\n+\t\t\t\t   && BASE_RETURN_VALUE_REG (mode) == FIRST_RET_REG);\n+\n+\t  /* If the default ABI is the Renesas ABI then all library\n+\t     calls must assume that the library will be using the\n+\t     Renesas ABI.  So if the function would return its result\n+\t     in memory then we must force the address of this memory\n+\t     block onto the stack.  Ideally we would like to call\n+\t     targetm.calls.return_in_memory() here but we do not have\n+\t     the TYPE or the FNDECL available so we synthesise the\n+\t     contents of that function as best we can.  */\n+\t  pcum->force_mem =\n+\t    (TARGET_DEFAULT & HITACHI_BIT)\n+\t    && (mode == BLKmode\n+\t\t|| (GET_MODE_SIZE (mode) > 4\n+\t\t    && !(mode == DFmode\n+\t\t\t && TARGET_FPU_DOUBLE)));\n+\t}\n+      else\n+\t{\n+\t  pcum->call_cookie = 0;\n+\t  pcum->force_mem = FALSE;\n+\t}\n+    }\n+}\n+\n #include \"gt-sh.h\""}, {"sha": "f6b9b06e3ec92a2cbdf4ef2a085482bd743f430c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc15e98f650fb1d16c8853ddf0ce586661974604/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc15e98f650fb1d16c8853ddf0ce586661974604/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=cc15e98f650fb1d16c8853ddf0ce586661974604", "patch": "@@ -2091,48 +2091,10 @@ struct sh_args {\n    For TARGET_HITACHI, the structure value pointer is passed in memory.  */\n \n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n-  do {\t\t\t\t\t\t\t\t\\\n-    (CUM).arg_count[(int) SH_ARG_INT] = 0;\t\t\t\\\n-    (CUM).arg_count[(int) SH_ARG_FLOAT] = 0;\t\t\t\\\n-    (CUM).renesas_abi = sh_attr_renesas_p (FNTYPE) ? 1 : 0;\t\\\n-    (CUM).force_mem\t\t\t\t\t\t\\\n-      = ((TARGET_HITACHI || (CUM).renesas_abi) && (FNTYPE)\t\\\n-\t && aggregate_value_p (TREE_TYPE (FNTYPE), (FNDECL)));\t\\\n-    (CUM).prototype_p = (FNTYPE) && TYPE_ARG_TYPES (FNTYPE);\t\\\n-    (CUM).arg_count[(int) SH_ARG_INT]\t\t\t\t\\\n-      = (TARGET_SH5 && (FNTYPE)\t\t\t\t\t\\\n-\t && aggregate_value_p (TREE_TYPE (FNTYPE), (FNDECL)));\t\\\n-    (CUM).free_single_fp_reg = 0;\t\t\t\t\\\n-    (CUM).outgoing = 1;\t\t\t\t\t\t\\\n-    (CUM).stack_regs = 0;\t\t\t\t\t\\\n-    (CUM).byref_regs = 0;\t\t\t\t\t\\\n-    (CUM).byref = 0;\t\t\t\t\t\t\\\n-    (CUM).call_cookie\t\t\t\t\t\t\\\n-      = (CALL_COOKIE_RET_TRAMP\t\t\t\t\t\\\n-\t (TARGET_SHCOMPACT && (FNTYPE)\t\t\t\t\\\n-\t  && (CUM).arg_count[(int) SH_ARG_INT] == 0\t\t\\\n-\t  && (TYPE_MODE (TREE_TYPE (FNTYPE)) == BLKmode\t\t\\\n-\t      ? int_size_in_bytes (TREE_TYPE (FNTYPE))\t\t\\\n-\t      : GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (FNTYPE)))) > 4 \\\n-\t  && (BASE_RETURN_VALUE_REG (TYPE_MODE (TREE_TYPE\t\\\n- \t\t\t\t\t\t(FNTYPE)))\t\\\n-\t      == FIRST_RET_REG)));\t\t\t\t\\\n-  } while (0)\n+  sh_init_cumulative_args (& (CUM), (FNTYPE), (LIBNAME), (FNDECL), (N_NAMED_ARGS), VOIDmode)\n \n #define INIT_CUMULATIVE_LIBCALL_ARGS(CUM, MODE, LIBNAME) \\\n-  do {\t\t\t\t\t\t\t\t\\\n-    INIT_CUMULATIVE_ARGS ((CUM), NULL_TREE, (LIBNAME), 0, 0);\t\\\n-    (CUM).call_cookie\t\t\t\t\t\t\\\n-      = (CALL_COOKIE_RET_TRAMP\t\t\t\t\t\\\n-\t (TARGET_SHCOMPACT && GET_MODE_SIZE (MODE) > 4\t\t\\\n-\t  && BASE_RETURN_VALUE_REG (MODE) == FIRST_RET_REG));\t\\\n-  } while (0)\n-\n-#define INIT_CUMULATIVE_INCOMING_ARGS(CUM, FNTYPE, LIBNAME) \\\n-  do {\t\t\t\t\t\t\t\t\\\n-    INIT_CUMULATIVE_ARGS ((CUM), (FNTYPE), (LIBNAME), 0, 0);\t\\\n-    (CUM).outgoing = 0;\t\t\t\t\t\t\\\n-  } while (0)\n+  sh_init_cumulative_args (& (CUM), NULL_TREE, (LIBNAME), NULL_TREE, 0, (MODE))\n \n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n \tsh_function_arg_advance (&(CUM), (MODE), (TYPE), (NAMED))"}]}