{"sha": "8c8993c75309901e03418eba1d6239b9a39a43b7", "node_id": "C_kwDOANBUbNoAKDhjODk5M2M3NTMwOTkwMWUwMzQxOGViYTFkNjIzOWI5YTM5YTQzYjc", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-25T20:50:51Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-26T13:05:30Z"}, "message": "analyzer: fix ICE on memset of untracked region [PR105057]\n\nIn r12-7809-g5f6197d7c197f9d2b7fb2e1a19dac39a023755e8 I added an\noptimization to avoid tracking the state of certain memory regions\nin the store.\n\nUnfortunately, I didn't cover every way in which\nstore::get_or_create_cluster can be called for a base region, leading\nto assertion failure ICEs in -fanalyzer on certain function calls\nwith certain params.\n\nI've worked through all uses of store::get_or_create_cluster and found\nfour places where the assertion could fire.\n\nThis patch fixes them, and adds regression tests where possible.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/105057\n\t* store.cc (binding_cluster::make_unknown_relative_to): Reject\n\tattempts to create a cluster for untracked base regions.\n\t(store::set_value): Likewise.\n\t(store::fill_region): Likewise.\n\t(store::mark_region_as_unknown): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/105057\n\t* gcc.dg/analyzer/fread-2.c: New test, as a regression test for\n\tICE in store::set_value on untracked base region.\n\t* gcc.dg/analyzer/memset-2.c: Likewise, for ICE in\n\tstore::fill_region.\n\t* gcc.dg/analyzer/strcpy-2.c: Likewise, for ICE in\n\tstore::mark_region_as_unknown.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "2365a0f835c6b1a8ad5ae48c0de9c4f044bb8db7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2365a0f835c6b1a8ad5ae48c0de9c4f044bb8db7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c8993c75309901e03418eba1d6239b9a39a43b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8993c75309901e03418eba1d6239b9a39a43b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c8993c75309901e03418eba1d6239b9a39a43b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8993c75309901e03418eba1d6239b9a39a43b7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0fdd92e9dae17b543b089dac753211298b04c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0fdd92e9dae17b543b089dac753211298b04c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0fdd92e9dae17b543b089dac753211298b04c78"}], "stats": {"total": 102, "additions": 98, "deletions": 4}, "files": [{"sha": "9aa7d690b0431b3db1c0e9405d42ab53d53be8a4", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8993c75309901e03418eba1d6239b9a39a43b7/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8993c75309901e03418eba1d6239b9a39a43b7/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=8c8993c75309901e03418eba1d6239b9a39a43b7", "patch": "@@ -1823,7 +1823,8 @@ binding_cluster::make_unknown_relative_to (const binding_cluster *other,\n \t{\n \t  const region *base_reg\n \t    = region_sval->get_pointee ()->get_base_region ();\n-\t  if (!base_reg->symbolic_for_unknown_ptr_p ())\n+\t  if (base_reg->tracked_p ()\n+\t      && !base_reg->symbolic_for_unknown_ptr_p ())\n \t    {\n \t      binding_cluster *c = out_store->get_or_create_cluster (base_reg);\n \t      c->mark_as_escaped ();\n@@ -2384,11 +2385,17 @@ store::set_value (store_manager *mgr, const region *lhs_reg,\n \t  mark_as_escaped (ptr_base_reg);\n \t}\n     }\n-  else\n+  else if (lhs_base_reg->tracked_p ())\n     {\n       lhs_cluster = get_or_create_cluster (lhs_base_reg);\n       lhs_cluster->bind (mgr, lhs_reg, rhs_sval);\n     }\n+  else\n+    {\n+      /* Reject attempting to bind values into an untracked region;\n+\t merely invalidate values below.  */\n+      lhs_cluster = NULL;\n+    }\n \n   /* Bindings to a cluster can affect other clusters if a symbolic\n      base region is involved.\n@@ -2564,7 +2571,8 @@ void\n store::fill_region (store_manager *mgr, const region *reg, const svalue *sval)\n {\n   const region *base_reg = reg->get_base_region ();\n-  if (base_reg->symbolic_for_unknown_ptr_p ())\n+  if (base_reg->symbolic_for_unknown_ptr_p ()\n+      || !base_reg->tracked_p ())\n     return;\n   binding_cluster *cluster = get_or_create_cluster (base_reg);\n   cluster->fill_region (mgr, reg, sval);\n@@ -2587,7 +2595,8 @@ store::mark_region_as_unknown (store_manager *mgr, const region *reg,\n \t\t\t       uncertainty_t *uncertainty)\n {\n   const region *base_reg = reg->get_base_region ();\n-  if (base_reg->symbolic_for_unknown_ptr_p ())\n+  if (base_reg->symbolic_for_unknown_ptr_p ()\n+      || !base_reg->tracked_p ())\n     return;\n   binding_cluster *cluster = get_or_create_cluster (base_reg);\n   cluster->mark_region_as_unknown (mgr, reg, uncertainty);"}, {"sha": "02a5e31cec63dc1134ccd33040b3a990f79d4101", "filename": "gcc/testsuite/gcc.dg/analyzer/fread-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8993c75309901e03418eba1d6239b9a39a43b7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffread-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8993c75309901e03418eba1d6239b9a39a43b7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffread-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffread-2.c?ref=8c8993c75309901e03418eba1d6239b9a39a43b7", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-additional-options \"-fdump-analyzer-untracked\" } */\n+\n+#include \"analyzer-decls.h\"\n+\n+struct S\n+{\n+  int i;\n+};\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern size_t fread (void *, size_t, size_t, void *);\n+\n+/* fread of a static struct that never gets used.  */\n+\n+void\n+test_1 (void *fp)\n+{\n+  static struct S s; /* { dg-warning \"track 's': no\" } */\n+  fread (&s, sizeof (s), 1, fp);\n+}\n+\n+/* fread of a static struct that later gets used.  */\n+\n+int\n+test_2 (void *fp)\n+{\n+  static struct S s; /* { dg-warning \"track 's': yes\" } */\n+  fread (&s, sizeof (s), 1, fp);\n+  return s.i;\n+}"}, {"sha": "de7c973b1fddbe5ce4c88f68fcc982e982df38b2", "filename": "gcc/testsuite/gcc.dg/analyzer/memset-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8993c75309901e03418eba1d6239b9a39a43b7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemset-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8993c75309901e03418eba1d6239b9a39a43b7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemset-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemset-2.c?ref=8c8993c75309901e03418eba1d6239b9a39a43b7", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-additional-options \"-fdump-analyzer-untracked\" } */\n+\n+#include \"analyzer-decls.h\"\n+\n+struct S\n+{\n+  int i;\n+};\n+\n+/* memset of a static struct that never gets used.  */\n+\n+void\n+test_1 (void)\n+{\n+  static struct S s; /* { dg-warning \"track 's': no\" } */\n+  __builtin_memset (&s, 0, sizeof (s));\n+}\n+\n+/* memset of a static struct that later gets used.  */\n+\n+void\n+test_2 (void)\n+{\n+  static struct S s; /* { dg-warning \"track 's': yes\" } */\n+  __builtin_memset (&s, 0, sizeof (s));\n+  __analyzer_eval (s.i == 0); /* { dg-warning \"TRUE\" } */\n+}"}, {"sha": "e4e6c975d142a911cef9ddfeef498021a1de8c0a", "filename": "gcc/testsuite/gcc.dg/analyzer/strcpy-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8993c75309901e03418eba1d6239b9a39a43b7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8993c75309901e03418eba1d6239b9a39a43b7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrcpy-2.c?ref=8c8993c75309901e03418eba1d6239b9a39a43b7", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-additional-options \"-fdump-analyzer-untracked\" } */\n+\n+#include \"analyzer-decls.h\"\n+\n+struct S\n+{\n+  char buf[10];\n+};\n+\n+/* strcpy to a static struct that never gets used.  */\n+\n+void\n+test_1 (const char *src)\n+{\n+  static struct S s; /* { dg-warning \"track 's': no\" } */\n+  __builtin_strcpy (s.buf, src);\n+}\n+\n+/* strcpy to a static struct that later gets used.  */\n+\n+const char *\n+test_2 (const char *src)\n+{\n+  static struct S s; /* { dg-warning \"track 's': yes\" } */\n+  __builtin_strcpy (s.buf, src);\n+  return s.buf;\n+}"}]}