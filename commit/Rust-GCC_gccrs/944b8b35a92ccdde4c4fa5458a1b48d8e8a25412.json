{"sha": "944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ0YjhiMzVhOTJjY2RkZTRjNGZhNTQ1OGExYjQ4ZDhlOGEyNTQxMg==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-10-12T20:21:31Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-10-12T20:21:31Z"}, "message": "gfortran.h: Add bitmasks for different FPE traps.\n\n\t* gfortran.h: Add bitmasks for different FPE traps. Add fpe\n\tmember to options_t.\n\t* invoke.texi: Document the new -ffpe-trap option.\n\t* lang.opt: Add -ffpe-trap option.\n\t* options.c (gfc_init_options): Initialize the FPE option.\n\t(gfc_handle_fpe_trap_option): New function to parse the argument\n\tof the -ffpe-trap option.\n\t(gfc_handle_option): Add case for -ffpe-trap.\n\t* trans-decl.c: Declare a tree for the set_fpe library function.\n\t(gfc_build_builtin_function_decls): Build this tree.\n\t(gfc_generate_function_code): Generate a call to set_fpe at\n\tthe beginning of the main program.\n\t* trans.h: New tree for the set_fpe library function.\n\n\t* Makefile.am: Add fpu.c to the build process, and\n\ttarget-dependent code as fpu-target.h.\n\t* Makefile.in: Regenerate.\n\t* configure.ac: Add call to configure.host to set\n\tFPU_HOST_HEADER.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* aclocal.m4: Regenerate.\n\t* configure.host: New script to determine which host-dependent\n\tcode should go in.\n\t* libgfortran.h: Add fpe option, remove previous fpu_ options.\n\tAdd bitmasks for different FPE traps. Add prototype for set_fpu.\n\t* runtime/environ.c: Remove environment variables to control\n\tfpu behaviour.\n\t* runtime/fpu.c (set_fpe): New function for the front-end.\n\t* runtime/main.c (init): Set FPU state.\n\t* config: New directory to store host-dependent code.\n\t* config/fpu-387.h: New file with code handling the i387 FPU.\n\t* config/fpu-glibc.h: New file with code for glibc systems.\n\t* config/fpu-generic.h: Fallback for the most generic host. Issue\n\twarnings.\n\nFrom-SVN: r105328", "tree": {"sha": "af4f5409e807606750191918d192516dcd170012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4f5409e807606750191918d192516dcd170012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23a977ce50e244b7cda0d54d36e5b8e6d505795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23a977ce50e244b7cda0d54d36e5b8e6d505795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f23a977ce50e244b7cda0d54d36e5b8e6d505795"}], "stats": {"total": 612, "additions": 575, "deletions": 37}, "files": [{"sha": "91acbf2e5a9549e1dcd7a640329c290123799d8d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -1,3 +1,19 @@\n+2005-10-12  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* gfortran.h: Add bitmasks for different FPE traps. Add fpe\n+\tmember to options_t.\n+\t* invoke.texi: Document the new -ffpe-trap option.\n+\t* lang.opt: Add -ffpe-trap option.\n+\t* options.c (gfc_init_options): Initialize the FPE option.\n+\t(gfc_handle_fpe_trap_option): New function to parse the argument\n+\tof the -ffpe-trap option.\n+\t(gfc_handle_option): Add case for -ffpe-trap.\n+\t* trans-decl.c: Declare a tree for the set_fpe library function.\n+\t(gfc_build_builtin_function_decls): Build this tree.\n+\t(gfc_generate_function_code): Generate a call to set_fpe at\n+\tthe beginning of the main program.\n+\t* trans.h: New tree for the set_fpe library function.\n+\n 2005-10-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/20847\n@@ -34,7 +50,7 @@\n \n 2005-10-07  Erik Edelmann  <erik.edelmann@iki.fi>\n \n-        PR 18568\n+\tPR 18568\n \t* resolve.c (find_array_spec): Search through the list of\n \tcomponents in the symbol of the type instead of the symbol of the\n \tvariable."}, {"sha": "63b4b931c3c5ad360aeb8a55f4ced2bd925f43d1", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -103,6 +103,15 @@ mstring;\n #define GFC_STD_F95_OBS\t\t(1<<1)    /* Obsoleted in F95.  */\n #define GFC_STD_F77\t\t(1<<0)    /* Up to and including F77.  */\n \n+/* Bitmasks for the various FPE that can be enabled.  */\n+#define GFC_FPE_INVALID    (1<<0)\n+#define GFC_FPE_DENORMAL   (1<<1)\n+#define GFC_FPE_ZERO       (1<<2)\n+#define GFC_FPE_OVERFLOW   (1<<3)\n+#define GFC_FPE_UNDERFLOW  (1<<4)\n+#define GFC_FPE_PRECISION  (1<<5)\n+\n+\n /*************************** Enums *****************************/\n \n /* The author remains confused to this day about the convention of\n@@ -1453,6 +1462,8 @@ typedef struct\n \n   int q_kind;\n \n+  int fpe;\n+\n   int warn_std;\n   int allow_std;\n   int warn_nonstd_intrinsics;"}, {"sha": "88e8eefe9696458697bdb418d0df5c8ecb8513bb", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -133,7 +133,7 @@ by type.  Explanations are in the following sections.\n @item Debugging Options\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n @gccoptlist{\n--fdump-parse-tree}\n+-fdump-parse-tree -ffpe-trap=@var{list}}\n \n @item Directory Options\n @xref{Directory Options,,Options for Directory Search}.\n@@ -464,6 +464,22 @@ Output the internal parse tree before starting code generation.  Only\n really useful for debugging gfortran itself.\n @end table\n \n+@table @gcctabopt\n+@cindex -ffpe-trap=@var{list} option\n+@cindex option, -ffpe-trap=@var{list}\n+@item -ffpe-trap=@var{list}\n+Specify a list of IEEE exceptions when a Floating Point Exception\n+(FPE) should be raised.  On most systems, this will result in a SIGFPE\n+signal being sent and the program being interrupted, producing a core\n+file useful for debugging.  @var{list} is a (possibly empty) comma-separated\n+list of the following IEEE exceptions: @samp{invalid} (invalid floating\n+point operation, such as @code{sqrt(-1.0)}), @samp{zero} (division by\n+zero), @samp{overflow} (overflow in a floating point operation),\n+@samp{underflow} (underflow in a floating point operation),\n+@samp{precision} (loss of precision during operation) and @samp{denormal}\n+(operation produced a denormal denormal value).\n+@end table\n+\n @xref{Debugging Options,,Options for Debugging Your Program or GCC,\n gcc,Using the GNU Compiler Collection (GCC)}, for more information on\n debugging options."}, {"sha": "053cc3dbf70c7aa64808af1414673f9917505b86", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -165,6 +165,10 @@ qkind=\n Fortran RejectNegative Joined UInteger\n -qkind=<n>\tSet the kind for a real with the 'q' exponent to 'n'\n \n+ffpe-trap=\n+Fortran RejectNegative JoinedOrMissing\n+-ffpe-trap=[..]\tStop on following floating point exceptions\n+\n std=f95\n Fortran\n Conform to the ISO Fortran 95 standard"}, {"sha": "95720bf510576b16f7e8a647a94c07e24d069234", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -76,6 +76,8 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n \n   gfc_option.q_kind = gfc_default_double_kind;\n \n+  gfc_option.fpe = 0;\n+\n   flag_argument_noalias = 2;\n   flag_errno_math = 0;\n \n@@ -278,6 +280,41 @@ gfc_handle_module_path_options (const char *arg)\n   strcat (gfc_option.module_dir, \"/\");\n }\n \n+static void\n+gfc_handle_fpe_trap_option (const char *arg)\n+{\n+  int result, pos = 0, n;\n+  static const char * const exception[] = { \"invalid\", \"denormal\", \"zero\",\n+                                            \"overflow\", \"underflow\",\n+\t\t\t\t\t    \"precision\", NULL };\n+  static const int opt_exception[] = { GFC_FPE_INVALID, GFC_FPE_DENORMAL,\n+\t\t\t\t       GFC_FPE_ZERO, GFC_FPE_OVERFLOW,\n+\t\t\t\t       GFC_FPE_UNDERFLOW, GFC_FPE_PRECISION,\n+\t\t\t\t       0 };\n+ \n+  while (*arg)\n+    {\n+      while (*arg == ',')\n+\targ++;\n+      while (arg[pos] && arg[pos] != ',')\n+\tpos++;\n+      result = 0;\n+      for (n = 0; exception[n] != NULL; n++)\n+\t{\n+\t  if (exception[n] && strncmp (exception[n], arg, pos) == 0)\n+\t    {\n+\t      gfc_option.fpe |= opt_exception[n];\n+\t      arg += pos;\n+\t      pos = 0;\n+\t      result = 1;\n+\t      break;\n+\t    }\n+\t}\n+      if (! result)\n+\tgfc_fatal_error (\"Argument to -ffpe-trap is not valid: %s\", arg);\n+    }\n+}\n+\n /* Handle command-line options.  Returns 0 if unrecognized, 1 if\n    recognized and handled.  */\n int\n@@ -440,6 +477,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_handle_module_path_options (arg);\n       break;\n     \n+    case OPT_ffpe_trap_:\n+      gfc_handle_fpe_trap_option (arg);\n+      break;\n+\n     case OPT_std_f95:\n       gfc_option.allow_std = GFC_STD_F95_OBS | GFC_STD_F95 | GFC_STD_F77;\n       gfc_option.warn_std = GFC_STD_F95_OBS;"}, {"sha": "70e8e82856a93b7c18f6d7e3328108cf57a8dc10", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -85,6 +85,7 @@ tree gfor_fndecl_stop_numeric;\n tree gfor_fndecl_stop_string;\n tree gfor_fndecl_select_string;\n tree gfor_fndecl_runtime_error;\n+tree gfor_fndecl_set_fpe;\n tree gfor_fndecl_set_std;\n tree gfor_fndecl_in_pack;\n tree gfor_fndecl_in_unpack;\n@@ -1934,6 +1935,7 @@ gfc_build_intrinsic_function_decls (void)\n void\n gfc_build_builtin_function_decls (void)\n {\n+  tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n   tree gfc_int4_type_node = gfc_get_int_type (4);\n   tree gfc_int8_type_node = gfc_get_int_type (8);\n   tree gfc_logical4_type_node = gfc_get_logical_type (4);\n@@ -2018,6 +2020,10 @@ gfc_build_builtin_function_decls (void)\n   /* The runtime_error function does not return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_runtime_error) = 1;\n \n+  gfor_fndecl_set_fpe =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"set_fpe\")),\n+\t\t\t\t    void_type_node, 1, gfc_c_int_type_node);\n+\n   gfor_fndecl_set_std =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_std\")),\n \t\t\t\t    void_type_node,\n@@ -2455,6 +2461,21 @@ gfc_generate_function_code (gfc_namespace * ns)\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n+  /* If this is the main program and a -ffpe-trap option was provided,\n+     add a call to set_fpe so that the library will raise a FPE when\n+     needed.  */\n+  if (sym->attr.is_main_program && gfc_option.fpe != 0)\n+    {\n+      tree arglist, gfc_c_int_type_node;\n+\n+      gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n+      arglist = gfc_chainon_list (NULL_TREE,\n+\t\t\t\t  build_int_cst (gfc_c_int_type_node,\n+\t\t\t\t\t\t gfc_option.fpe));\n+      tmp = gfc_build_function_call (gfor_fndecl_set_fpe, arglist);\n+      gfc_add_expr_to_block (&body, tmp);\n+    }\n+\n   if (TREE_TYPE (DECL_RESULT (fndecl)) != void_type_node\n       && sym->attr.subroutine)\n     {"}, {"sha": "16d0a37ed3fa77f068dc1eff619c9ca1a8ee0a4a", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -455,6 +455,7 @@ extern GTY(()) tree gfor_fndecl_stop_numeric;\n extern GTY(()) tree gfor_fndecl_stop_string;\n extern GTY(()) tree gfor_fndecl_select_string;\n extern GTY(()) tree gfor_fndecl_runtime_error;\n+extern GTY(()) tree gfor_fndecl_set_fpe;\n extern GTY(()) tree gfor_fndecl_set_std;\n extern GTY(()) tree gfor_fndecl_in_pack;\n extern GTY(()) tree gfor_fndecl_in_unpack;"}, {"sha": "9433fda08b94b36de7af4dfd49e96f66b5018620", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -1,3 +1,25 @@\n+2005-10-12  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* Makefile.am: Add fpu.c to the build process, and\n+\ttarget-dependent code as fpu-target.h.\n+\t* Makefile.in: Regenerate.\n+\t* configure.ac: Add call to configure.host to set\n+\tFPU_HOST_HEADER.\n+\t* configure: Regenerate.\n+\t* configure.host: New script to determine which host-dependent\n+\tcode should go in.\n+\t* libgfortran.h: Add fpe option, remove previous fpu_ options.\n+\tAdd bitmasks for different FPE traps. Add prototype for set_fpu.\n+\t* runtime/environ.c: Remove environment variables to control\n+\tfpu behaviour.\n+\t* runtime/fpu.c (set_fpe): New function for the front-end.\n+\t* runtime/main.c (init): Set FPU state.\n+\t* config: New directory to store host-dependent code.\n+\t* config/fpu-387.h: New file with code handling the i387 FPU.\n+\t* config/fpu-glibc.h: New file with code for glibc systems.\n+\t* config/fpu-generic.h: Fallback for the most generic host. Issue\n+\twarnings.\n+\n 2005-10-12  Janne Blomqvist <jblomqvi@cc.hut.fi>\n \n \t* io/unix.c: Remove parts of patch of 2005/10/07 that cause"}, {"sha": "f5a1869baa364f8d2f896970ae0e35cb15d52252", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -18,8 +18,6 @@ libgfortranbegin_la_LDFLAGS = -static\n ## use -iquote\n AM_CPPFLAGS = -iquote$(srcdir)/io\n \n-libgfortranincludedir = $(includedir)/gforio\n-\n gfor_io_src= \\\n io/close.c \\\n io/file_pos.c \\\n@@ -97,6 +95,7 @@ gfor_src= \\\n runtime/compile_options.c \\\n runtime/environ.c \\\n runtime/error.c \\\n+runtime/fpu.c \\\n runtime/main.c \\\n runtime/memory.c \\\n runtime/pause.c \\\n@@ -433,7 +432,7 @@ gfor_built_src= $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n     $(i_pow_c) \\\n     selected_int_kind.inc selected_real_kind.inc kinds.h \\\n-    kinds.inc c99_protos.inc\n+    kinds.inc c99_protos.inc fpu-target.h\n \n # Machine generated specifics\n gfor_built_specific_src= \\\n@@ -592,6 +591,9 @@ selected_int_kind.inc: $(srcdir)/mk-sik-inc.sh\n selected_real_kind.inc: $(srcdir)/mk-srk-inc.sh\n \t$(SHELL) $(srcdir)/mk-srk-inc.sh '$(FCCOMPILE)' > $@\n \n+fpu-target.h: $(srcdir)/$(FPU_HOST_HEADER)\n+\tcp $(srcdir)/$(FPU_HOST_HEADER) $@\n+\n ## A 'normal' build shouldn't need to regenerate these\n ## so we only include them in maintainer mode\n "}, {"sha": "5ed436f41aefea038255f4bf83d6eb5a11934aad", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -66,7 +66,7 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\"\n toolexeclibLTLIBRARIES_INSTALL = $(INSTALL)\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n libgfortran_la_LIBADD =\n-am__objects_1 = compile_options.lo environ.lo error.lo main.lo \\\n+am__objects_1 = compile_options.lo environ.lo error.lo fpu.lo main.lo \\\n \tmemory.lo pause.lo stop.lo string.lo select.lo\n am__objects_2 = all_l4.lo all_l8.lo all_l16.lo\n am__objects_3 = any_l4.lo any_l8.lo any_l16.lo\n@@ -276,6 +276,7 @@ EGREP = @EGREP@\n EXEEXT = @EXEEXT@\n FC = @FC@\n FCFLAGS = @FCFLAGS@\n+FPU_HOST_HEADER = @FPU_HOST_HEADER@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n@@ -357,7 +358,6 @@ libgfortran_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n libgfortranbegin_la_SOURCES = fmain.c\n libgfortranbegin_la_LDFLAGS = -static\n AM_CPPFLAGS = -iquote$(srcdir)/io\n-libgfortranincludedir = $(includedir)/gforio\n gfor_io_src = \\\n io/close.c \\\n io/file_pos.c \\\n@@ -435,6 +435,7 @@ gfor_src = \\\n runtime/compile_options.c \\\n runtime/environ.c \\\n runtime/error.c \\\n+runtime/fpu.c \\\n runtime/main.c \\\n runtime/memory.c \\\n runtime/pause.c \\\n@@ -771,7 +772,7 @@ gfor_built_src = $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n     $(i_pow_c) \\\n     selected_int_kind.inc selected_real_kind.inc kinds.h \\\n-    kinds.inc c99_protos.inc\n+    kinds.inc c99_protos.inc fpu-target.h\n \n \n # Machine generated specifics\n@@ -1394,6 +1395,9 @@ environ.lo: runtime/environ.c\n error.lo: runtime/error.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o error.lo `test -f 'runtime/error.c' || echo '$(srcdir)/'`runtime/error.c\n \n+fpu.lo: runtime/fpu.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o fpu.lo `test -f 'runtime/fpu.c' || echo '$(srcdir)/'`runtime/fpu.c\n+\n main.lo: runtime/main.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o main.lo `test -f 'runtime/main.c' || echo '$(srcdir)/'`runtime/main.c\n \n@@ -2699,6 +2703,9 @@ selected_int_kind.inc: $(srcdir)/mk-sik-inc.sh\n selected_real_kind.inc: $(srcdir)/mk-srk-inc.sh\n \t$(SHELL) $(srcdir)/mk-srk-inc.sh '$(FCCOMPILE)' > $@\n \n+fpu-target.h: $(srcdir)/$(FPU_HOST_HEADER)\n+\tcp $(srcdir)/$(FPU_HOST_HEADER) $@\n+\n @MAINTAINER_MODE_TRUE@$(i_all_c): m4/all.m4 $(I_M4_DEPS1)\n @MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 all.m4 > $(srcdir)/$@\n "}, {"sha": "669bc15316659734d5eadfcfefa54377c13d8e49", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -285,6 +285,12 @@\n /* libm includes fabsl */\n #undef HAVE_FABSL\n \n+/* libm includes feenableexcept */\n+#undef HAVE_FEENABLEEXCEPT\n+\n+/* Define to 1 if you have the <fenv.h> header file. */\n+#undef HAVE_FENV_H\n+\n /* libm includes finite */\n #undef HAVE_FINITE\n "}, {"sha": "06c02eaf853862770c6cdea3d80d74a8845615e7", "filename": "libgfortran/config/fpu-387.h", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfig%2Ffpu-387.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfig%2Ffpu-387.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-387.h?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -0,0 +1,103 @@\n+/* FPU-related code for x86 and x86_64 processors.\n+   Copyright 2005 Free Software Foundation, Inc.\n+   Contributed by Francois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+\n+static int\n+has_sse (void)\n+{\n+#ifdef __x86_64__\n+  return 1;\n+#else\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  /* See if we can use cpuid.  */\n+  asm volatile (\"pushfl; pushfl; popl %0; movl %0,%1; xorl %2,%0;\"\n+\t\t\"pushl %0; popfl; pushfl; popl %0; popfl\"\n+\t\t: \"=&r\" (eax), \"=&r\" (ebx)\n+\t\t: \"i\" (0x00200000));\n+\n+  if (((eax ^ ebx) & 0x00200000) == 0)\n+    return 0;\n+\n+  /* Check the highest input value for eax.  */\n+  asm volatile (\"xchgl %%ebx, %1; cpuid; xchgl %%ebx, %1\"\n+\t\t: \"=a\" (eax), \"=r\" (ebx), \"=c\" (ecx), \"=d\" (edx)\n+\t\t: \"0\" (0));\n+\n+  if (eax == 0)\n+    return 0;\n+\n+  asm volatile (\"xchgl %%ebx, %1; cpuid; xchgl %%ebx, %1\"\n+\t\t: \"=a\" (eax), \"=r\" (ebx), \"=c\" (ecx), \"=d\" (edx)\n+\t\t: \"0\" (1));\n+\n+  if (edx & (1 << 25))\n+    return 1;\n+\n+  return 0;\n+#endif\n+}\n+\n+void set_fpu (void)\n+{\n+  short cw;\n+  int cw_sse;\n+\n+  /* i387 -- see linux <fpu_control.h> header file for details.  */\n+#define _FPU_MASK_IM  0x01\n+#define _FPU_MASK_DM  0x02\n+#define _FPU_MASK_ZM  0x04\n+#define _FPU_MASK_OM  0x08\n+#define _FPU_MASK_UM  0x10\n+#define _FPU_MASK_PM  0x20\n+  asm volatile (\"fnstcw %0\" : \"=m\" (cw));\n+  cw |= _FPU_MASK_IM | _FPU_MASK_DM | _FPU_MASK_ZM | _FPU_MASK_OM | _FPU_MASK_UM | _FPU_MASK_PM;\n+  if (options.fpe & GFC_FPE_INVALID) cw &= ~_FPU_MASK_IM;\n+  if (options.fpe & GFC_FPE_DENORMAL) cw &= ~_FPU_MASK_DM;\n+  if (options.fpe & GFC_FPE_ZERO) cw &= ~_FPU_MASK_ZM;\n+  if (options.fpe & GFC_FPE_OVERFLOW) cw &= ~_FPU_MASK_OM;\n+  if (options.fpe & GFC_FPE_UNDERFLOW) cw &= ~_FPU_MASK_UM;\n+  if (options.fpe & GFC_FPE_PRECISION) cw &= ~_FPU_MASK_PM;\n+  asm volatile (\"fldcw %0\" : : \"m\" (cw));\n+\n+  if (has_sse())\n+    {\n+      /* SSE */\n+      asm volatile (\"stmxcsr %0\" : : \"m\" (cw_sse));\n+      cw_sse &= 0xFFFF0000;\n+      if (options.fpe & GFC_FPE_INVALID) cw_sse |= 1 << 7;\n+      if (options.fpe & GFC_FPE_DENORMAL) cw_sse |= 1 << 8;\n+      if (options.fpe & GFC_FPE_ZERO) cw_sse |= 1 << 9;\n+      if (options.fpe & GFC_FPE_OVERFLOW) cw_sse |= 1 << 10;\n+      if (options.fpe & GFC_FPE_UNDERFLOW) cw_sse |= 1 << 11;\n+      if (options.fpe & GFC_FPE_PRECISION) cw_sse |= 1 << 12;\n+      asm volatile (\"ldmxcsr %0\" : : \"m\" (cw_sse));\n+    }\n+}"}, {"sha": "9e043d74895f4c46d15a1c8aa348832f5ce7d63d", "filename": "libgfortran/config/fpu-generic.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfig%2Ffpu-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfig%2Ffpu-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-generic.h?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -0,0 +1,57 @@\n+/* Fallback FPU-related code (for systems not otherwise supported).\n+   Copyright 2005 Free Software Foundation, Inc.\n+   Contributed by Francois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+\n+/* Fallback FPU-related code for systems not otherwise supported. This\n+   is mainly telling the user that we will not be able to do what he\n+   requested.  */\n+\n+void\n+set_fpu (void)\n+{\n+  if (options.fpe & GFC_FPE_INVALID)\n+    st_printf (\"Fortran runtime warning: IEEE 'invalid operation' \"\n+\t       \"exception not supported.\\n\");\n+  if (options.fpe & GFC_FPE_DENORMAL)\n+    st_printf (\"Fortran runtime warning: IEEE 'denormal number' \"\n+\t       \"exception not supported.\\n\");\n+  if (options.fpe & GFC_FPE_ZERO)\n+    st_printf (\"Fortran runtime warning: IEEE 'division by zero' \"\n+\t       \"exception not supported.\\n\");\n+  if (options.fpe & GFC_FPE_OVERFLOW)\n+    st_printf (\"Fortran runtime warning: IEEE 'overflow' \"\n+\t       \"exception not supported.\\n\");\n+  if (options.fpe & GFC_FPE_UNDERFLOW)\n+    st_printf (\"Fortran runtime warning: IEEE 'underflow' \"\n+\t       \"exception not supported.\\n\");\n+  if (options.fpe & GFC_FPE_PRECISION)\n+    st_printf (\"Fortran runtime warning: IEEE 'loss of precision' \"\n+\t       \"exception not supported.\\n\");\n+}"}, {"sha": "0a6c9df1cc1ce34003ee21145e1edb88eddf809d", "filename": "libgfortran/config/fpu-glibc.h", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfig%2Ffpu-glibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfig%2Ffpu-glibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-glibc.h?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -0,0 +1,93 @@\n+/* FPU-related code for systems with GNU libc.\n+   Copyright 2005 Free Software Foundation, Inc.\n+   Contributed by Francois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+\n+/* FPU-related code for systems with the GNU libc, providing the\n+   feenableexcept function in fenv.h to set individual exceptions\n+   (there's nothing to do that in C99).  */\n+\n+#define __USE_GNU\n+#ifdef HAVE_FENV_H\n+#include <fenv.h>\n+#endif\n+\n+void set_fpu (void)\n+{\n+  fedisableexcept (FE_ALL_EXCEPT);\n+\n+  if (options.fpe & GFC_FPE_INVALID)\n+#ifdef FE_INVALID\n+    feenableexcept (FE_INVALID);\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'invalid operation' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+/* glibc does never have a FE_DENORMAL.  */\n+  if (options.fpe & GFC_FPE_DENORMAL)\n+#ifdef FE_DENORMAL\n+    feenableexcept (FE_DENORMAL);\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'denormal number' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_ZERO)\n+#ifdef FE_DIVBYZERO\n+    feenableexcept (FE_DIVBYZERO);\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'division by zero' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_OVERFLOW)\n+#ifdef FE_OVERFLOW\n+    feenableexcept (FE_OVERFLOW);\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'overflow' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_UNDERFLOW)\n+#ifdef FE_UNDERFLOW\n+    feenableexcept (FE_UNDERFLOW);\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'underflow' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_PRECISION)\n+#ifdef FE_INEXACT\n+    feenableexcept (FE_INEXACT);\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'loss of precision' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+}"}, {"sha": "69ca7b75bc442ce6837f33e6561ccb80e5d8e652", "filename": "libgfortran/configure", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -308,7 +308,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT multi_basedir toolexecdir toolexeclibdir CC ac_ct_CC EXEEXT OBJEXT AM_FCFLAGS AM_CFLAGS AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB LN_S LIBTOOL enable_shared enable_static FC FCFLAGS LDFLAGS ac_ct_FC extra_ldflags_libgfortran CPP CPPFLAGS EGREP LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT multi_basedir toolexecdir toolexeclibdir CC ac_ct_CC EXEEXT OBJEXT AM_FCFLAGS AM_CFLAGS AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB LN_S LIBTOOL enable_shared enable_static FC FCFLAGS LDFLAGS ac_ct_FC extra_ldflags_libgfortran CPP CPPFLAGS EGREP FPU_HOST_HEADER LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -6507,7 +6507,8 @@ done\n \n \n \n-for ac_header in sys/mman.h sys/types.h sys/stat.h ieeefp.h\n+\n+for ac_header in sys/mman.h sys/types.h sys/stat.h ieeefp.h fenv.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n@@ -19431,6 +19432,94 @@ _ACEOF\n fi\n \n \n+# Check for GNU libc feenableexcept\n+echo \"$as_me:$LINENO: checking for feenableexcept in -lm\" >&5\n+echo $ECHO_N \"checking for feenableexcept in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_feenableexcept+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char feenableexcept ();\n+int\n+main ()\n+{\n+feenableexcept ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_feenableexcept=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_feenableexcept=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_feenableexcept\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_feenableexcept\" >&6\n+if test $ac_cv_lib_m_feenableexcept = yes; then\n+  have_feenableexcept=yes\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_FEENABLEEXCEPT 1\n+_ACEOF\n+\n+fi\n+\n+\n+# Runs configure.host to set up necessary host-dependent shell variables.\n+# We then display a message about it, and propagate them through the\n+# build chain.\n+. ${srcdir}/configure.host\n+{ echo \"$as_me:$LINENO: FPU dependent file will be ${fpu_host}.h\" >&5\n+echo \"$as_me: FPU dependent file will be ${fpu_host}.h\" >&6;}\n+FPU_HOST_HEADER=config/${fpu_host}.h\n+\n+\n # The standard autoconf HAVE_STRUCT_TIMEZONE doesn't actually check\n # for struct timezone, as you might think.  We also need to check how\n # to call gettimeofday if we have it.\n@@ -21031,6 +21120,7 @@ s,@extra_ldflags_libgfortran@,$extra_ldflags_libgfortran,;t t\n s,@CPP@,$CPP,;t t\n s,@CPPFLAGS@,$CPPFLAGS,;t t\n s,@EGREP@,$EGREP,;t t\n+s,@FPU_HOST_HEADER@,$FPU_HOST_HEADER,;t t\n s,@LIBOBJS@,$LIBOBJS,;t t\n s,@LTLIBOBJS@,$LTLIBOBJS,;t t\n CEOF"}, {"sha": "396deb5fe6a07c5e8e02aa42fdb35b7452251adb", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -158,7 +158,7 @@ AC_TYPE_OFF_T\n AC_STDC_HEADERS\n AC_HAVE_HEADERS(stdlib.h stdio.h string.h stddef.h math.h unistd.h signal.h)\n AC_CHECK_HEADERS(time.h sys/params.h sys/time.h sys/times.h sys/resource.h)\n-AC_CHECK_HEADERS(sys/mman.h sys/types.h sys/stat.h ieeefp.h)\n+AC_CHECK_HEADERS(sys/mman.h sys/types.h sys/stat.h ieeefp.h fenv.h)\n AC_CHECK_HEADER([complex.h],[AC_DEFINE([HAVE_COMPLEX_H], [1], [complex.h exists])])\n \n AC_CHECK_MEMBERS([struct stat.st_blksize])\n@@ -340,6 +340,17 @@ LIBGFOR_CHECK_FOR_BROKEN_FPCLASSIFY\n # Fallback in case isfinite is not available.\n AC_CHECK_LIB([m],[finite],[AC_DEFINE([HAVE_FINITE],[1],[libm includes finite])])\n \n+# Check for GNU libc feenableexcept\n+AC_CHECK_LIB([m],[feenableexcept],[have_feenableexcept=yes AC_DEFINE([HAVE_FEENABLEEXCEPT],[1],[libm includes feenableexcept])])\n+\n+# Runs configure.host to set up necessary host-dependent shell variables.\n+# We then display a message about it, and propagate them through the\n+# build chain.\n+. ${srcdir}/configure.host\n+AC_MSG_NOTICE([FPU dependent file will be ${fpu_host}.h])\n+FPU_HOST_HEADER=config/${fpu_host}.h\n+AC_SUBST(FPU_HOST_HEADER)\n+\n # The standard autoconf HAVE_STRUCT_TIMEZONE doesn't actually check\n # for struct timezone, as you might think.  We also need to check how\n # to call gettimeofday if we have it."}, {"sha": "c7cc16e17d2d6d2642c684cb882a773bc1d2bcea", "filename": "libgfortran/configure.host", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.host?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -0,0 +1,32 @@\n+# configure.host\n+#\n+# This shell script handles all host based configuration for libgfortran.\n+# It sets various shell variables based on the the host triplet.\n+# You can modify this shell script without rerunning autoconf/aclocal/etc.\n+# This file is \"sourced\", not executed.\n+#\n+#\n+# It uses the following shell variables as set by config.guess:\n+#   host                The configuration host (full CPU-vendor-OS triplet)\n+#   host_cpu            The configuration host CPU\n+#   host_os             The configuration host OS\n+#\n+#\n+# It sets the following shell variables:\n+#\n+#   fpu_host            FPU-specific code file, defaults to fpu-generic.\n+\n+\n+# DEFAULTS\n+fpu_host=fpu-generic\n+\n+# HOST-SPECIFIC OVERRIDES\n+case \"${host_cpu}\" in\n+  i?86 | x86_64)\n+    fpu_host='fpu-387' ;;\n+esac\n+\n+# CONFIGURATION-SPECIFIC OVERRIDES\n+if test \"x${have_feenableexcept}\" = \"xyes\"; then\n+  fpu_host='fpu-glibc'\n+fi"}, {"sha": "bc23789f7d61b0e17743d55b3667dff32c9c6f31", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -337,8 +337,7 @@ typedef struct\n   int mem_check;\n   int use_stderr, all_unbuffered, default_recl;\n \n-  int fpu_round, fpu_precision, fpu_invalid, fpu_denormal, fpu_zerodiv,\n-    fpu_overflow, fpu_underflow, fpu_precision_loss;\n+  int fpu_round, fpu_precision, fpe;\n \n   int sighup, sigint;\n }\n@@ -410,6 +409,14 @@ error_codes;\n #define GFC_STD_F95_OBS         (1<<1)    /* Obsoleted in F95.  */\n #define GFC_STD_F77             (1<<0)    /* Up to and including F77.  */\n \n+/* Bitmasks for the various FPE that can be enabled.\n+   Keep them in sync with their counterparts in gcc/fortran/gfortran.h.  */\n+#define GFC_FPE_INVALID    (1<<0)\n+#define GFC_FPE_DENORMAL   (1<<1)\n+#define GFC_FPE_ZERO       (1<<2)\n+#define GFC_FPE_OVERFLOW   (1<<3)\n+#define GFC_FPE_UNDERFLOW  (1<<4)\n+#define GFC_FPE_PRECISION  (1<<5)\n \n /* The filename and line number don't go inside the globals structure.\n    They are set by the rest of the program and must be linked to.  */\n@@ -485,6 +492,11 @@ internal_proto(translate_error);\n extern void generate_error (int, const char *);\n internal_proto(generate_error);\n \n+/* fpu.c */\n+\n+extern void set_fpu (void);\n+internal_proto(set_fpu);\n+\n /* memory.c */\n \n extern void *get_mem (size_t) __attribute__ ((malloc));"}, {"sha": "09743a0eb95a925c1ec1461229cb361b229585fa", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -533,30 +533,6 @@ static variable variable_table[] = {\n    show_precision,\n    \"Precision of intermediate results.  Values are 24, 53 and 64.\", 0},\n \n-  {\"GFORTRAN_FPU_INVALID\", 1, &options.fpu_invalid, init_boolean,\n-   show_boolean,\n-   \"Raise a floating point exception on invalid FP operation.\", 0},\n-\n-  {\"GFORTRAN_FPU_DENORMAL\", 1, &options.fpu_denormal, init_boolean,\n-   show_boolean,\n-   \"Raise a floating point exception when denormal numbers are encountered.\",\n-   0},\n-\n-  {\"GFORTRAN_FPU_ZERO\", 0, &options.fpu_zerodiv, init_boolean, show_boolean,\n-   \"Raise a floating point exception when dividing by zero.\", 0},\n-\n-  {\"GFORTRAN_FPU_OVERFLOW\", 0, &options.fpu_overflow, init_boolean,\n-   show_boolean,\n-   \"Raise a floating point exception on overflow.\", 0},\n-\n-  {\"GFORTRAN_FPU_UNDERFLOW\", 0, &options.fpu_underflow, init_boolean,\n-   show_boolean,\n-   \"Raise a floating point exception on underflow.\", 0},\n-\n-  {\"GFORTRAN_FPU_PRECISION\", 0, &options.fpu_precision_loss, init_boolean,\n-   show_boolean,\n-   \"Raise a floating point exception on precision loss.\", 0},\n-\n   {NULL, 0, NULL, NULL, NULL, NULL, 0}\n };\n "}, {"sha": "f81a3b05a421e83f6439409365692779a624c9f1", "filename": "libgfortran/runtime/fpu.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fruntime%2Ffpu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fruntime%2Ffpu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ffpu.c?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -0,0 +1,16 @@\n+#include \"libgfortran.h\"\n+\n+/* We include the platform-dependent code.  */\n+#include \"fpu-target.h\"\n+\n+/* Function called by the front-end to tell us\n+   when a FPE should be raised.  */\n+extern void set_fpe (int);\n+export_proto(set_fpe);\n+\n+void\n+set_fpe (int exceptions)\n+{\n+  options.fpe = exceptions;\n+  set_fpu ();\n+}"}, {"sha": "1186a304930f633fa853f6892e7999998e60428e", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944b8b35a92ccdde4c4fa5458a1b48d8e8a25412/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=944b8b35a92ccdde4c4fa5458a1b48d8e8a25412", "patch": "@@ -96,6 +96,7 @@ init (void)\n   init_variables ();\n \n   init_units ();\n+  set_fpu ();\n   init_compile_options ();\n \n #ifdef DEBUG"}]}