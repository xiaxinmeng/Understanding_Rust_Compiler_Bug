{"sha": "fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7", "node_id": "C_kwDOANBUbNoAKGZiOGI3MmViYjViMGJmNDBmN2RmZWY5MTU0YzQyMzIwY2U0NmYyYTc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-28T07:38:50Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-28T09:11:20Z"}, "message": "Return VARYING in range_on_path_entry if nothing found.\n\nThe problem here is that the solver's code solving unknown SSAs on entry\nto a path was returning UNDEFINED if there were no incoming edges to the\nstart of the path that were not the function entry block.  This caused a\ncascade of pain down stream.\n\nTested on x86-64 Linux.\n\n\tPR tree-optimization/102511\n\ngcc/ChangeLog:\n\n\t* gimple-range-path.cc (path_range_query::range_on_path_entry):\n\tReturn VARYING when nothing found.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr102511.c: New test.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-14.c: Adjust.", "tree": {"sha": "081a7f87af777eb72e4a6dbca7006979193e69b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/081a7f87af777eb72e4a6dbca7006979193e69b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc614a838ecc33578e0903fec599fee6844680a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc614a838ecc33578e0903fec599fee6844680a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc614a838ecc33578e0903fec599fee6844680a7"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "9da67d2a35be3eb73834e60cfc48b3f40cd081b9", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7", "patch": "@@ -136,14 +136,23 @@ path_range_query::range_on_path_entry (irange &r, tree name)\n {\n   int_range_max tmp;\n   basic_block entry = entry_bb ();\n+  bool changed = false;\n+\n   r.set_undefined ();\n   for (unsigned i = 0; i < EDGE_COUNT (entry->preds); ++i)\n     {\n       edge e = EDGE_PRED (entry, i);\n       if (e->src != ENTRY_BLOCK_PTR_FOR_FN (cfun)\n \t  && m_ranger.range_on_edge (tmp, e, name))\n-\tr.union_ (tmp);\n+\t{\n+\t  r.union_ (tmp);\n+\t  changed = true;\n+\t}\n     }\n+\n+  // Make sure we don't return UNDEFINED by mistake.\n+  if (!changed)\n+    r.set_varying (TREE_TYPE (name));\n }\n \n // Return the range of NAME at the end of the path being analyzed."}, {"sha": "8a9af3473057a284a303b7b03046abf0793c8a1c", "filename": "gcc/testsuite/gcc.dg/pr102511.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102511.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102511.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102511.c?ref=fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do run }\n+// { dg-options \"-O3\" }\n+\n+char arr_15 [8];\n+__attribute__((noipa))\n+void test(signed char a, unsigned short b, unsigned long long c,\n+          unsigned short f) {\n+  for (int d = b - 8; d < b; d += 2)\n+    for (short e = 0; e < (unsigned short)((f ? 122 : 0) ^ (a ? c : 0)) - 64055;\n+         e += 3)\n+      arr_15[d] = 42;\n+}\n+int main() {\n+    test(37, 8, 12325048486467861044ULL, 45936);\n+    for (int i = 0; i < 8; ++i)\n+      {\n+        if (arr_15[i] != ((i&1) ? 0 : 42))\n+          __builtin_abort();\n+      }\n+  return 0;\n+}"}, {"sha": "a25fe8bd89e80ab9a763749e03bfd6638fb9ff60", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c?ref=fb8b72ebb5b0bf40f7dfef9154c42320ce46f2a7", "patch": "@@ -37,5 +37,5 @@ expand_shift_1 (int code, int unsignedp, int rotate,\n    we will enter the TRUE arm of the conditional and we can thread\n    the test to compute the first first argument of the expand_binop\n    call if we look backwards through the boolean logicals.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 1 \"dom2\"} } */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"dom2\"} } */\n "}]}