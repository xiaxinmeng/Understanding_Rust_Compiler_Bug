{"sha": "b136b7a78774107943fe94051c42b5a968a3ad3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEzNmI3YTc4Nzc0MTA3OTQzZmU5NDA1MWM0MmI1YTk2OGEzYWQzZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-21T07:45:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-21T07:45:02Z"}, "message": "openmp: Fix up omp_check_private [PR101535]\n\nThe target data construct shouldn't affect omp_check_private, unless\nthe decl there is privatized (use_device_* clauses).  The routine\nhad some code for that, but it just did continue; in a loop that looped\nonly if the region type is one of selected 4 kinds, so effectively resulted\nin return false; instead of looping again.  And not diagnosing lastprivate\n(or reduction etc.) on a variable that is private to containing parallel\nresults in ICEs later on, as there is no original list item to which store\nthe last result.\nThe target construct is unclear as it has an implicit parallel region\nand it is not obvious if the data privatization clauses on the construct\nshall be treated as data privatization on the implicit parallel or just\non the target.  For now treat those as privatization on the implicit\nparallel, but treat map clauses as shared on the implicit parallel.\n\n2021-07-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/101535\n\t* gimplify.c (omp_check_private): Properly skip ORT_TARGET_DATA\n\tcontexts in which decl isn't privatized and for ORT_TARGET return\n\tfalse if decl is mapped.\n\n\t* c-c++-common/gomp/pr101535-1.c: New test.\n\t* c-c++-common/gomp/pr101535-2.c: New test.", "tree": {"sha": "5a2005a076ba43bd889ccee9f6a536ce08b5eda7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a2005a076ba43bd889ccee9f6a536ce08b5eda7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b136b7a78774107943fe94051c42b5a968a3ad3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b136b7a78774107943fe94051c42b5a968a3ad3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b136b7a78774107943fe94051c42b5a968a3ad3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b136b7a78774107943fe94051c42b5a968a3ad3f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea199f96cf116ba4c81426207acde371556610c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea199f96cf116ba4c81426207acde371556610c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea199f96cf116ba4c81426207acde371556610c"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "5d43f76f002bd378195f6321ed229389b341b9fc", "filename": "gcc/gimplify.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b136b7a78774107943fe94051c42b5a968a3ad3f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b136b7a78774107943fe94051c42b5a968a3ad3f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=b136b7a78774107943fe94051c42b5a968a3ad3f", "patch": "@@ -7798,7 +7798,13 @@ omp_check_private (struct gimplify_omp_ctx *ctx, tree decl, bool copyprivate)\n \n       if ((ctx->region_type & (ORT_TARGET | ORT_TARGET_DATA)) != 0\n \t  && (n == NULL || (n->value & GOVD_DATA_SHARE_CLASS) == 0))\n-\tcontinue;\n+\t{\n+\t  if ((ctx->region_type & ORT_TARGET_DATA) != 0\n+\t      || n == NULL\n+\t      || (n->value & GOVD_MAP) == 0)\n+\t    continue;\n+\t  return false;\n+\t}\n \n       if (n != NULL)\n \t{\n@@ -7807,11 +7813,16 @@ omp_check_private (struct gimplify_omp_ctx *ctx, tree decl, bool copyprivate)\n \t    return false;\n \t  return (n->value & GOVD_SHARED) == 0;\n \t}\n+\n+      if (ctx->region_type == ORT_WORKSHARE\n+\t  || ctx->region_type == ORT_TASKGROUP\n+\t  || ctx->region_type == ORT_SIMD\n+\t  || ctx->region_type == ORT_ACC)\n+\tcontinue;\n+\n+      break;\n     }\n-  while (ctx->region_type == ORT_WORKSHARE\n-\t || ctx->region_type == ORT_TASKGROUP\n-\t || ctx->region_type == ORT_SIMD\n-\t || ctx->region_type == ORT_ACC);\n+  while (1);\n   return false;\n }\n "}, {"sha": "8285ce011df475841524f496e9bd21dc963f3625", "filename": "gcc/testsuite/c-c++-common/gomp/pr101535-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b136b7a78774107943fe94051c42b5a968a3ad3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr101535-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b136b7a78774107943fe94051c42b5a968a3ad3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr101535-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr101535-1.c?ref=b136b7a78774107943fe94051c42b5a968a3ad3f", "patch": "@@ -0,0 +1,31 @@\n+/* PR middle-end/101535 */\n+\n+void\n+foo (void)\n+{\n+  int a = 1, i;\n+  #pragma omp target data map(to:a)\n+  #pragma omp for lastprivate(i)\t/* { dg-error \"lastprivate variable 'i' is private in outer context\" } */\n+  for (i = 1; i < 2; i++)\n+    ;\n+}\n+\n+void\n+bar (void)\n+{\n+  int a = 1, i;\n+  #pragma omp target private(i)\n+  #pragma omp for lastprivate(i)\t/* { dg-error \"lastprivate variable 'i' is private in outer context\" } */\n+  for (i = 1; i < 2; i++)\n+    ;\n+}\n+\n+void\n+baz (void)\n+{\n+  int a = 1, i;\n+  #pragma omp target firstprivate(i)\n+  #pragma omp for lastprivate(i)\t/* { dg-error \"lastprivate variable 'i' is private in outer context\" } */\n+  for (i = 1; i < 2; i++)\n+    ;\n+}"}, {"sha": "23c84af48799d75052f0ccd776df5c44068b76dc", "filename": "gcc/testsuite/c-c++-common/gomp/pr101535-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b136b7a78774107943fe94051c42b5a968a3ad3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr101535-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b136b7a78774107943fe94051c42b5a968a3ad3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr101535-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr101535-2.c?ref=b136b7a78774107943fe94051c42b5a968a3ad3f", "patch": "@@ -0,0 +1,11 @@\n+/* PR middle-end/101535 */\n+\n+void\n+foo (void)\n+{\n+  int a = 1, i;\n+  #pragma omp target map(tofrom:i)\n+  #pragma omp for lastprivate(i)\n+  for (i = 1; i < 2; i++)\n+    ;\n+}"}]}