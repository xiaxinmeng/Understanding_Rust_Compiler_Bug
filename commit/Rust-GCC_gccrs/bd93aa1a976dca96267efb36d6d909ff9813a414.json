{"sha": "bd93aa1a976dca96267efb36d6d909ff9813a414", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5M2FhMWE5NzZkY2E5NjI2N2VmYjM2ZDZkOTA5ZmY5ODEzYTQxNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-06-16T18:13:44Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-06-16T18:13:44Z"}, "message": "PR jit/66539: Add parentheses as needed to gcc_jit_object_get_debug_string\n\ngcc/jit/ChangeLog:\n\tPR jit/66539\n\t* jit-recording.c: Within namespace gcc::jit::recording::\n\t(rvalue::get_debug_string_parens): New function.\n\t(binary_op::make_debug_string): Update to mimic C precedence\n\trules.\n\t(binary_op_precedence): New array.\n\t(binary_op::get_precedence): New function.\n\t(comparison::make_debug_string): Update to mimic C precedence\n\trules.\n\t(comparison_precedence): New array.\n\t(comparison::get_precedence): New function.\n\t(cast::make_debug_string): Update to mimic C precedence rules.\n\t(call::make_debug_string): Likewise.\n\t(call_through_ptr::make_debug_string): Likewise.\n\t(array_access::make_debug_string): Likewise.\n\t(access_field_of_lvalue::make_debug_string): Likewise.\n\t(access_field_rvalue::make_debug_string): Likewise.\n\t(dereference_field_rvalue::make_debug_string): Likewise.\n\t(dereference_rvalue::make_debug_string): Likewise.\n\t(get_address_of_lvalue::make_debug_string): Likewise.\n\t* jit-recording.h: Within namespace gcc::jit::recording::\n\t(precedence): New enum.\n\t(rvalue::rvalue): Initialize field \"m_parenthesized_string\".\n\t(rvalue::get_debug_string_parens): New method.\n\t(rvalue::get_precedence): New pure virtual function.\n\t(rvalue::m_parenthesized_string): New field.\n\t(param::get_precedence): New function.\n\t(global::get_precedence): New function.\n\t(memento_of_new_rvalue_from_const::get_precedence): New function.\n\t(memento_of_new_string_literal::get_precedence): New function.\n\t(unary_op::get_precedence): New function.\n\t(binary_op::get_precedence): New function.\n\t(comparison::get_precedence): New function.\n\t(cast::get_precedence): New function.\n\t(call::get_precedence): New function.\n\t(call_through_ptr::get_precedence): New function.\n\t(array_access::get_precedence): New function.\n\t(access_field_of_lvalue::get_precedence): New function.\n\t(access_field_rvalue::get_precedence): New function.\n\t(dereference_field_rvalue::get_precedence): New function.\n\t(dereference_rvalue::get_precedence): New function.\n\t(get_address_of_lvalue::get_precedence): New function.\n\t(local::get_precedence): New function.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/66539\n\t* jit.dg/all-non-failing-tests.h: Add test-debug-strings.c.\n\t* jit.dg/test-debug-strings.c: New test case.\n\t* jit.dg/test-quadratic.c (make_calc_discriminant): Verify that\n\tthe discriminant has a sane debug string.\n\nFrom-SVN: r224531", "tree": {"sha": "00d13dc4a930d4f40d356e647478fa1189c80329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00d13dc4a930d4f40d356e647478fa1189c80329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd93aa1a976dca96267efb36d6d909ff9813a414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd93aa1a976dca96267efb36d6d909ff9813a414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd93aa1a976dca96267efb36d6d909ff9813a414", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd93aa1a976dca96267efb36d6d909ff9813a414/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0dc3cba1bd0a9310fc53325cfa26be9537ea5369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc3cba1bd0a9310fc53325cfa26be9537ea5369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc3cba1bd0a9310fc53325cfa26be9537ea5369"}], "stats": {"total": 478, "additions": 447, "deletions": 31}, "files": [{"sha": "0ba2fd6cc87b57d0d8e1dd3766b64b02cf1e1781", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=bd93aa1a976dca96267efb36d6d909ff9813a414", "patch": "@@ -1,3 +1,49 @@\n+2015-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66539\n+\t* jit-recording.c: Within namespace gcc::jit::recording::\n+\t(rvalue::get_debug_string_parens): New function.\n+\t(binary_op::make_debug_string): Update to mimic C precedence\n+\trules.\n+\t(binary_op_precedence): New array.\n+\t(binary_op::get_precedence): New function.\n+\t(comparison::make_debug_string): Update to mimic C precedence\n+\trules.\n+\t(comparison_precedence): New array.\n+\t(comparison::get_precedence): New function.\n+\t(cast::make_debug_string): Update to mimic C precedence rules.\n+\t(call::make_debug_string): Likewise.\n+\t(call_through_ptr::make_debug_string): Likewise.\n+\t(array_access::make_debug_string): Likewise.\n+\t(access_field_of_lvalue::make_debug_string): Likewise.\n+\t(access_field_rvalue::make_debug_string): Likewise.\n+\t(dereference_field_rvalue::make_debug_string): Likewise.\n+\t(dereference_rvalue::make_debug_string): Likewise.\n+\t(get_address_of_lvalue::make_debug_string): Likewise.\n+\t* jit-recording.h: Within namespace gcc::jit::recording::\n+\t(precedence): New enum.\n+\t(rvalue::rvalue): Initialize field \"m_parenthesized_string\".\n+\t(rvalue::get_debug_string_parens): New method.\n+\t(rvalue::get_precedence): New pure virtual function.\n+\t(rvalue::m_parenthesized_string): New field.\n+\t(param::get_precedence): New function.\n+\t(global::get_precedence): New function.\n+\t(memento_of_new_rvalue_from_const::get_precedence): New function.\n+\t(memento_of_new_string_literal::get_precedence): New function.\n+\t(unary_op::get_precedence): New function.\n+\t(binary_op::get_precedence): New function.\n+\t(comparison::get_precedence): New function.\n+\t(cast::get_precedence): New function.\n+\t(call::get_precedence): New function.\n+\t(call_through_ptr::get_precedence): New function.\n+\t(array_access::get_precedence): New function.\n+\t(access_field_of_lvalue::get_precedence): New function.\n+\t(access_field_rvalue::get_precedence): New function.\n+\t(dereference_field_rvalue::get_precedence): New function.\n+\t(dereference_rvalue::get_precedence): New function.\n+\t(get_address_of_lvalue::get_precedence): New function.\n+\t(local::get_precedence): New function.\n+\n 2015-06-09  Matthias Klose  <doko@ubuntu.com>\n \n \t* Make-lang.in (jit.install-common): Install headers using INSTALL_DATA."}, {"sha": "f379b58ec81fff1c79f03275befe70add9eae62e", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 131, "deletions": 19, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=bd93aa1a976dca96267efb36d6d909ff9813a414", "patch": "@@ -3021,6 +3021,63 @@ recording::rvalue::access_as_rvalue (reproducer &r)\n   return r.get_identifier (this);\n }\n \n+/* Return a debug string for the given rvalue, wrapping it in parentheses\n+   if needed to mimic C's precedence rules, i.e. if OUTER_PREC is of\n+   stronger precedence that this rvalue's precedence.\n+\n+   For example, given:\n+\n+           MULT\n+          /    \\\n+       PLUS     MINUS\n+      /    \\   /     \\\n+     A      B C       D\n+\n+   we want to emit:\n+\n+     (A + B) * (C - D)\n+\n+   since MULT has strong precedence than PLUS and MINUS, whereas for:\n+\n+           PLUS\n+          /    \\\n+       MULT     DIVIDE\n+      /    \\   /      \\\n+     A      B C        D\n+\n+   we can simply emit:\n+\n+     A * B + C / D\n+\n+   since PLUS has weaker precedence than MULT and DIVIDE.  */\n+\n+const char *\n+recording::rvalue::get_debug_string_parens (enum precedence outer_prec)\n+{\n+  enum precedence this_prec = get_precedence ();\n+\n+  /* If this_prec has stronger precedence than outer_prec, we don't\n+     need to wrap this in parens within the outer debug string.\n+     Stronger precedences occur earlier than weaker within the enum,\n+     so this is a less than test.  Equal precedences don't need\n+     parentheses.  */\n+  if (this_prec <= outer_prec)\n+    return get_debug_string();\n+\n+  /* Otherwise, we need parentheses.  */\n+\n+  /* Lazily-build and cache m_parenthesized_string.  */\n+  if (!m_parenthesized_string)\n+    {\n+      const char *debug_string = get_debug_string ();\n+      m_parenthesized_string = string::from_printf (get_context (),\n+\t\t\t\t\t\t    \"(%s)\",\n+\t\t\t\t\t\t    debug_string);\n+    }\n+  gcc_assert (m_parenthesized_string);\n+  return m_parenthesized_string->c_str ();\n+}\n+\n \n /* The implementation of class gcc::jit::recording::lvalue.  */\n \n@@ -4251,11 +4308,12 @@ static const char * const binary_op_strings[] = {\n recording::string *\n recording::binary_op::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   return string::from_printf (m_ctxt,\n \t\t\t      \"%s %s %s\",\n-\t\t\t      m_a->get_debug_string (),\n+\t\t\t      m_a->get_debug_string_parens (prec),\n \t\t\t      binary_op_strings[m_op],\n-\t\t\t      m_b->get_debug_string ());\n+\t\t\t      m_b->get_debug_string_parens (prec));\n }\n \n static const char * const binary_op_reproducer_strings[] = {\n@@ -4295,6 +4353,31 @@ recording::binary_op::write_reproducer (reproducer &r)\n \t   r.get_identifier_as_rvalue (m_b));\n }\n \n+namespace recording {\n+static const enum precedence binary_op_precedence[] = {\n+  PRECEDENCE_ADDITIVE, /* GCC_JIT_BINARY_OP_PLUS */\n+  PRECEDENCE_ADDITIVE, /* GCC_JIT_BINARY_OP_MINUS */\n+\n+  PRECEDENCE_MULTIPLICATIVE, /* GCC_JIT_BINARY_OP_MULT */\n+  PRECEDENCE_MULTIPLICATIVE, /* GCC_JIT_BINARY_OP_DIVIDE */\n+  PRECEDENCE_MULTIPLICATIVE, /* GCC_JIT_BINARY_OP_MODULO */\n+\n+  PRECEDENCE_BITWISE_AND, /* GCC_JIT_BINARY_OP_BITWISE_AND */\n+  PRECEDENCE_BITWISE_XOR, /* GCC_JIT_BINARY_OP_BITWISE_XOR */\n+  PRECEDENCE_BITWISE_IOR, /* GCC_JIT_BINARY_OP_BITWISE_OR */\n+  PRECEDENCE_LOGICAL_AND, /* GCC_JIT_BINARY_OP_LOGICAL_AND */\n+  PRECEDENCE_LOGICAL_OR, /* GCC_JIT_BINARY_OP_LOGICAL_OR */\n+  PRECEDENCE_SHIFT, /* GCC_JIT_BINARY_OP_LSHIFT */\n+  PRECEDENCE_SHIFT, /* GCC_JIT_BINARY_OP_RSHIFT */\n+};\n+} /* namespace recording */\n+\n+enum recording::precedence\n+recording::binary_op::get_precedence () const\n+{\n+  return binary_op_precedence[m_op];\n+}\n+\n /* The implementation of class gcc::jit::recording::comparison.  */\n \n /* Implementation of recording::memento::make_debug_string for\n@@ -4313,11 +4396,12 @@ static const char * const comparison_strings[] =\n recording::string *\n recording::comparison::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   return string::from_printf (m_ctxt,\n \t\t\t      \"%s %s %s\",\n-\t\t\t      m_a->get_debug_string (),\n+\t\t\t      m_a->get_debug_string_parens (prec),\n \t\t\t      comparison_strings[m_op],\n-\t\t\t      m_b->get_debug_string ());\n+\t\t\t      m_b->get_debug_string_parens (prec));\n }\n \n /* A table of enum gcc_jit_comparison values expressed in string\n@@ -4375,6 +4459,25 @@ recording::comparison::visit_children (rvalue_visitor *v)\n   v->visit (m_b);\n }\n \n+namespace recording {\n+static const enum precedence comparison_precedence[] =\n+{\n+  PRECEDENCE_EQUALITY, /* GCC_JIT_COMPARISON_EQ */\n+  PRECEDENCE_EQUALITY, /* GCC_JIT_COMPARISON_NE */\n+\n+  PRECEDENCE_RELATIONAL,  /* GCC_JIT_COMPARISON_LT */\n+  PRECEDENCE_RELATIONAL, /* GCC_JIT_COMPARISON_LE */\n+  PRECEDENCE_RELATIONAL,  /* GCC_JIT_COMPARISON_GT */\n+  PRECEDENCE_RELATIONAL, /* GCC_JIT_COMPARISON_GE */\n+};\n+} /* namespace recording */\n+\n+enum recording::precedence\n+recording::comparison::get_precedence () const\n+{\n+  return comparison_precedence[m_op];\n+}\n+\n /* Implementation of pure virtual hook recording::memento::replay_into\n    for recording::cast.  */\n \n@@ -4400,10 +4503,11 @@ recording::cast::visit_children (rvalue_visitor *v)\n recording::string *\n recording::cast::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   return string::from_printf (m_ctxt,\n \t\t\t      \"(%s)%s\",\n \t\t\t      get_type ()->get_debug_string (),\n-\t\t\t      m_rvalue->get_debug_string ());\n+\t\t\t      m_rvalue->get_debug_string_parens (prec));\n }\n \n /* Implementation of recording::memento::write_reproducer for casts.  */\n@@ -4473,12 +4577,13 @@ recording::call::visit_children (rvalue_visitor *v)\n recording::string *\n recording::call::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   /* First, build a buffer for the arguments.  */\n   /* Calculate length of said buffer.  */\n   size_t sz = 1; /* nil terminator */\n   for (unsigned i = 0; i< m_args.length (); i++)\n     {\n-      sz += strlen (m_args[i]->get_debug_string ());\n+      sz += strlen (m_args[i]->get_debug_string_parens (prec));\n       sz += 2; /* \", \" separator */\n     }\n \n@@ -4488,8 +4593,8 @@ recording::call::make_debug_string ()\n \n   for (unsigned i = 0; i< m_args.length (); i++)\n     {\n-      strcpy (argbuf + len, m_args[i]->get_debug_string ());\n-      len += strlen (m_args[i]->get_debug_string ());\n+      strcpy (argbuf + len, m_args[i]->get_debug_string_parens (prec));\n+      len += strlen (m_args[i]->get_debug_string_parens (prec));\n       if (i + 1 < m_args.length ())\n \t{\n \t  strcpy (argbuf + len, \", \");\n@@ -4586,12 +4691,13 @@ recording::call_through_ptr::visit_children (rvalue_visitor *v)\n recording::string *\n recording::call_through_ptr::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   /* First, build a buffer for the arguments.  */\n   /* Calculate length of said buffer.  */\n   size_t sz = 1; /* nil terminator */\n   for (unsigned i = 0; i< m_args.length (); i++)\n     {\n-      sz += strlen (m_args[i]->get_debug_string ());\n+      sz += strlen (m_args[i]->get_debug_string_parens (prec));\n       sz += 2; /* \", \" separator */\n     }\n \n@@ -4601,8 +4707,8 @@ recording::call_through_ptr::make_debug_string ()\n \n   for (unsigned i = 0; i< m_args.length (); i++)\n     {\n-      strcpy (argbuf + len, m_args[i]->get_debug_string ());\n-      len += strlen (m_args[i]->get_debug_string ());\n+      strcpy (argbuf + len, m_args[i]->get_debug_string_parens (prec));\n+      len += strlen (m_args[i]->get_debug_string_parens (prec));\n       if (i + 1 < m_args.length ())\n \t{\n \t  strcpy (argbuf + len, \", \");\n@@ -4614,7 +4720,7 @@ recording::call_through_ptr::make_debug_string ()\n   /* ...and use it to get the string for the call as a whole.  */\n   string *result = string::from_printf (m_ctxt,\n \t\t\t\t\t\"%s (%s)\",\n-\t\t\t\t\tm_fn_ptr->get_debug_string (),\n+\t\t\t\t\tm_fn_ptr->get_debug_string_parens (prec),\n \t\t\t\t\targbuf);\n \n   delete[] argbuf;\n@@ -4680,10 +4786,11 @@ recording::array_access::visit_children (rvalue_visitor *v)\n recording::string *\n recording::array_access::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   return string::from_printf (m_ctxt,\n \t\t\t      \"%s[%s]\",\n-\t\t\t      m_ptr->get_debug_string (),\n-\t\t\t      m_index->get_debug_string ());\n+\t\t\t      m_ptr->get_debug_string_parens (prec),\n+\t\t\t      m_index->get_debug_string_parens (prec));\n }\n \n /* Implementation of recording::memento::write_reproducer for\n@@ -4735,9 +4842,10 @@ recording::access_field_of_lvalue::visit_children (rvalue_visitor *v)\n recording::string *\n recording::access_field_of_lvalue::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   return string::from_printf (m_ctxt,\n \t\t\t      \"%s.%s\",\n-\t\t\t      m_lvalue->get_debug_string (),\n+\t\t\t      m_lvalue->get_debug_string_parens (prec),\n \t\t\t      m_field->get_debug_string ());\n }\n \n@@ -4787,9 +4895,10 @@ recording::access_field_rvalue::visit_children (rvalue_visitor *v)\n recording::string *\n recording::access_field_rvalue::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   return string::from_printf (m_ctxt,\n \t\t\t      \"%s.%s\",\n-\t\t\t      m_rvalue->get_debug_string (),\n+\t\t\t      m_rvalue->get_debug_string_parens (prec),\n \t\t\t      m_field->get_debug_string ());\n }\n \n@@ -4840,9 +4949,10 @@ recording::dereference_field_rvalue::visit_children (rvalue_visitor *v)\n recording::string *\n recording::dereference_field_rvalue::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   return string::from_printf (m_ctxt,\n \t\t\t      \"%s->%s\",\n-\t\t\t      m_rvalue->get_debug_string (),\n+\t\t\t      m_rvalue->get_debug_string_parens (prec),\n \t\t\t      m_field->get_debug_string ());\n }\n \n@@ -4891,9 +5001,10 @@ recording::dereference_rvalue::visit_children (rvalue_visitor *v)\n recording::string *\n recording::dereference_rvalue::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   return string::from_printf (m_ctxt,\n \t\t\t      \"*%s\",\n-\t\t\t      m_rvalue->get_debug_string ());\n+\t\t\t      m_rvalue->get_debug_string_parens (prec));\n }\n \n /* Implementation of recording::memento::write_reproducer for\n@@ -4939,9 +5050,10 @@ recording::get_address_of_lvalue::visit_children (rvalue_visitor *v)\n recording::string *\n recording::get_address_of_lvalue::make_debug_string ()\n {\n+  enum precedence prec = get_precedence ();\n   return string::from_printf (m_ctxt,\n \t\t\t      \"&%s\",\n-\t\t\t      m_lvalue->get_debug_string ());\n+\t\t\t      m_lvalue->get_debug_string_parens (prec));\n }\n \n /* Implementation of recording::memento::write_reproducer for"}, {"sha": "d3170fecb7c4c459be68251d287d5b05d71212fa", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=bd93aa1a976dca96267efb36d6d909ff9813a414", "patch": "@@ -858,6 +858,27 @@ class rvalue_visitor\n   virtual void visit (rvalue *rvalue) = 0;\n };\n \n+/* When generating debug strings for rvalues we mimic C, so we need to\n+   mimic C's precedence levels when handling compound expressions.\n+   These are in order from strongest precedence to weakest.  */\n+enum precedence\n+{\n+  PRECEDENCE_PRIMARY,\n+  PRECEDENCE_POSTFIX,\n+  PRECEDENCE_UNARY,\n+  PRECEDENCE_CAST,\n+  PRECEDENCE_MULTIPLICATIVE,\n+  PRECEDENCE_ADDITIVE,\n+  PRECEDENCE_SHIFT,\n+  PRECEDENCE_RELATIONAL,\n+  PRECEDENCE_EQUALITY,\n+  PRECEDENCE_BITWISE_AND,\n+  PRECEDENCE_BITWISE_XOR,\n+  PRECEDENCE_BITWISE_IOR,\n+  PRECEDENCE_LOGICAL_AND,\n+  PRECEDENCE_LOGICAL_OR\n+};\n+\n class rvalue : public memento\n {\n public:\n@@ -867,7 +888,8 @@ class rvalue : public memento\n   : memento (ctxt),\n     m_loc (loc),\n     m_type (type_),\n-    m_scope (NULL)\n+    m_scope (NULL),\n+    m_parenthesized_string (NULL)\n   {\n     gcc_assert (type_);\n   }\n@@ -909,12 +931,20 @@ class rvalue : public memento\n \n   virtual const char *access_as_rvalue (reproducer &r);\n \n+  /* Get the debug string, wrapped in parentheses.  */\n+  const char *\n+  get_debug_string_parens (enum precedence outer_prec);\n+\n+private:\n+  virtual enum precedence get_precedence () const = 0;\n+\n protected:\n   location *m_loc;\n   type *m_type;\n \n  private:\n   function *m_scope; /* NULL for globals, non-NULL for locals/params */\n+  string *m_parenthesized_string;\n };\n \n class lvalue : public rvalue\n@@ -977,6 +1007,7 @@ class param : public lvalue\n private:\n   string * make_debug_string () { return m_name; }\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_PRIMARY; }\n \n private:\n   string *m_name;\n@@ -1161,6 +1192,7 @@ class global : public lvalue\n private:\n   string * make_debug_string () { return m_name; }\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_PRIMARY; }\n \n private:\n   enum gcc_jit_global_kind m_kind;\n@@ -1185,6 +1217,7 @@ class memento_of_new_rvalue_from_const : public rvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_PRIMARY; }\n \n private:\n   HOST_TYPE m_value;\n@@ -1206,6 +1239,7 @@ class memento_of_new_string_literal : public rvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_PRIMARY; }\n \n private:\n   string *m_value;\n@@ -1231,6 +1265,7 @@ class unary_op : public rvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const {return PRECEDENCE_UNARY;}\n \n private:\n   enum gcc_jit_unary_op m_op;\n@@ -1257,6 +1292,7 @@ class binary_op : public rvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const;\n \n private:\n   enum gcc_jit_binary_op m_op;\n@@ -1284,6 +1320,7 @@ class comparison : public rvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const;\n \n private:\n   enum gcc_jit_comparison m_op;\n@@ -1309,6 +1346,7 @@ class cast : public rvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_CAST; }\n \n private:\n   rvalue *m_rvalue;\n@@ -1330,6 +1368,7 @@ class call : public rvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n \n private:\n   function *m_func;\n@@ -1352,6 +1391,7 @@ class call_through_ptr : public rvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n \n private:\n   rvalue *m_fn_ptr;\n@@ -1377,6 +1417,7 @@ class array_access : public lvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n \n private:\n   rvalue *m_ptr;\n@@ -1402,6 +1443,7 @@ class access_field_of_lvalue : public lvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n \n private:\n   lvalue *m_lvalue;\n@@ -1427,6 +1469,7 @@ class access_field_rvalue : public rvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n \n private:\n   rvalue *m_rvalue;\n@@ -1452,6 +1495,7 @@ class dereference_field_rvalue : public lvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n \n private:\n   rvalue *m_rvalue;\n@@ -1474,6 +1518,7 @@ class dereference_rvalue : public lvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_UNARY; }\n \n private:\n   rvalue *m_rvalue;\n@@ -1496,6 +1541,7 @@ class get_address_of_lvalue : public rvalue\n private:\n   string * make_debug_string ();\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_UNARY; }\n \n private:\n   lvalue *m_lvalue;\n@@ -1521,6 +1567,7 @@ class local : public lvalue\n private:\n   string * make_debug_string () { return m_name; }\n   void write_reproducer (reproducer &r);\n+  enum precedence get_precedence () const { return PRECEDENCE_PRIMARY; }\n \n private:\n   function *m_func;"}, {"sha": "66101a9d6ddf29a8655ce009d1395bfca33e708f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd93aa1a976dca96267efb36d6d909ff9813a414", "patch": "@@ -1,3 +1,11 @@\n+2015-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66539\n+\t* jit.dg/all-non-failing-tests.h: Add test-debug-strings.c.\n+\t* jit.dg/test-debug-strings.c: New test case.\n+\t* jit.dg/test-quadratic.c (make_calc_discriminant): Verify that\n+\tthe discriminant has a sane debug string.\n+\n 2015-06-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/56766"}, {"sha": "f0000cc0c3e180877d44df7a19895e793e1986c9", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=bd93aa1a976dca96267efb36d6d909ff9813a414", "patch": "@@ -64,6 +64,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-debug-strings.c */\n+#define create_code create_code_debug_strings\n+#define verify_code verify_code_debug_strings\n+#include \"test-debug-strings.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-dot-product.c */\n #define create_code create_code_dot_product\n #define verify_code verify_code_dot_product"}, {"sha": "e515a176257351f493c327f6b3c67becadba6926", "filename": "gcc/testsuite/jit.dg/test-debug-strings.c", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Ftestsuite%2Fjit.dg%2Ftest-debug-strings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Ftestsuite%2Fjit.dg%2Ftest-debug-strings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-debug-strings.c?ref=bd93aa1a976dca96267efb36d6d909ff9813a414", "patch": "@@ -0,0 +1,190 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+/* Build various compound expressions, and verify that they have sane debug\n+   strings.  */\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Make a singly-linked list type:\n+      struct node\n+      {\n+       struct node *next;\n+       int value;\n+      };\n+  */\n+  gcc_jit_type *t_int =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_struct *t_node =\n+    gcc_jit_context_new_opaque_struct (ctxt, NULL, \"node\");\n+  gcc_jit_type *t_node_ptr =\n+    gcc_jit_type_get_pointer (gcc_jit_struct_as_type (t_node));\n+  gcc_jit_field *f_next =\n+    gcc_jit_context_new_field (ctxt, NULL, t_node_ptr, \"next\");\n+  gcc_jit_field *f_value =\n+    gcc_jit_context_new_field (ctxt, NULL, t_int, \"value\");\n+  gcc_jit_field *fields[] = {f_next, f_value};\n+  gcc_jit_struct_set_fields (t_node, NULL, 2, fields);\n+\n+  /* Create a dummy function so that we have locals/params to build\n+     expressions with.  */\n+  gcc_jit_type *t_void =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_function *fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  t_void,\n+\t\t\t\t  \"test_debug_strings\",\n+\t\t\t\t  0, NULL, 0);\n+  gcc_jit_rvalue *ptr =\n+    gcc_jit_lvalue_as_rvalue (\n+      gcc_jit_function_new_local (fn,\n+\t\t\t\t  NULL,\n+\t\t\t\t  t_node_ptr,\n+\t\t\t\t  \"ptr\"));\n+  gcc_jit_rvalue *a =\n+    gcc_jit_lvalue_as_rvalue (\n+      gcc_jit_function_new_local (fn, NULL, t_int, \"a\"));\n+  gcc_jit_rvalue *b =\n+    gcc_jit_lvalue_as_rvalue (\n+      gcc_jit_function_new_local (fn, NULL, t_int, \"b\"));\n+  gcc_jit_rvalue *c =\n+    gcc_jit_lvalue_as_rvalue (\n+      gcc_jit_function_new_local (fn, NULL, t_int, \"c\"));\n+  gcc_jit_rvalue *d =\n+    gcc_jit_lvalue_as_rvalue (\n+      gcc_jit_function_new_local (fn, NULL, t_int, \"d\"));\n+\n+#define CHECK_RVALUE_DEBUG_STRING(RVALUE, EXPECTED) \\\n+  CHECK_STRING_VALUE ( \\\n+    gcc_jit_object_get_debug_string (gcc_jit_rvalue_as_object (RVALUE)), \\\n+    (EXPECTED))\n+\n+#define CHECK_LVALUE_DEBUG_STRING(LVALUE, EXPECTED) \\\n+  CHECK_STRING_VALUE ( \\\n+    gcc_jit_object_get_debug_string (gcc_jit_lvalue_as_object (LVALUE)), \\\n+    (EXPECTED))\n+\n+  /* Verify various simple compound expressions.  */\n+  {\n+    CHECK_RVALUE_DEBUG_STRING (ptr, \"ptr\");\n+\n+    gcc_jit_lvalue *deref =\n+      gcc_jit_rvalue_dereference_field (ptr,\n+\t\t\t\t\tNULL,\n+\t\t\t\t\tf_value);\n+    CHECK_LVALUE_DEBUG_STRING (deref, \"ptr->value\");\n+\n+    gcc_jit_rvalue *deref_as_rvalue = gcc_jit_lvalue_as_rvalue (deref);\n+\n+#define BINOP(OP, A, B) \\\n+    gcc_jit_context_new_binary_op (ctxt, NULL, \\\n+\t\t\t\t   GCC_JIT_BINARY_OP_##OP, t_int, (A), (B))\n+#define COMPARISON(OP, A, B) \\\n+    gcc_jit_context_new_comparison (ctxt, NULL, \\\n+\t\t\t\t    GCC_JIT_COMPARISON_##OP,(A), (B))\n+\n+    CHECK_RVALUE_DEBUG_STRING (\n+      BINOP (PLUS, deref_as_rvalue, deref_as_rvalue),\n+      \"ptr->value + ptr->value\");\n+    CHECK_RVALUE_DEBUG_STRING (\n+      BINOP (MULT, deref_as_rvalue, deref_as_rvalue),\n+      \"ptr->value * ptr->value\");\n+\n+   /* Multiplication has higher precedence in C than addition, so this\n+       dump shouldn't contain parentheses.  */\n+    CHECK_RVALUE_DEBUG_STRING (\n+      BINOP (PLUS,\n+\t     BINOP (MULT, a, b),\n+\t     BINOP (MULT, c, d)),\n+      \"a * b + c * d\");\n+\n+    /* ...but this one should.  */\n+    CHECK_RVALUE_DEBUG_STRING (\n+      BINOP (MULT,\n+\t     BINOP (PLUS, a, b),\n+\t     BINOP (PLUS, c, d)),\n+      \"(a + b) * (c + d)\");\n+\n+    /* Equal precedences don't need parentheses.  */\n+    CHECK_RVALUE_DEBUG_STRING (\n+      BINOP (MULT,\n+\t     BINOP (MULT, a, b),\n+\t     BINOP (MULT, c, d)),\n+      \"a * b * c * d\");\n+\n+    /* Comparisons and logical ops.  */\n+    CHECK_RVALUE_DEBUG_STRING (\n+      COMPARISON (LT, a, b),\n+      \"a < b\");\n+\n+    CHECK_RVALUE_DEBUG_STRING (\n+      BINOP (LOGICAL_AND,\n+\t     COMPARISON (LT, a, b),\n+\t     COMPARISON (GT, c, d)),\n+      \"a < b && c > d\");\n+\n+    CHECK_RVALUE_DEBUG_STRING (\n+      BINOP (LOGICAL_AND,\n+\t     BINOP (LOGICAL_OR,\n+\t\t    COMPARISON (LT, a, b),\n+\t\t    COMPARISON (LT, a, c)),\n+\t     BINOP (LOGICAL_OR,\n+\t\t    COMPARISON (GT, d, b),\n+\t\t    COMPARISON (GT, d, c))),\n+      \"(a < b || a < c) && (d > b || d > c)\");\n+\n+    CHECK_RVALUE_DEBUG_STRING (\n+      BINOP (LOGICAL_OR,\n+\t     BINOP (LOGICAL_AND,\n+\t\t    COMPARISON (LT, a, b),\n+\t\t    COMPARISON (LT, a, c)),\n+\t     BINOP (LOGICAL_AND,\n+\t\t    COMPARISON (GT, d, b),\n+\t\t    COMPARISON (GT, d, c))),\n+      \"a < b && a < c || d > b && d > c\");\n+\n+#undef BINOP\n+#undef COMPARISON\n+  }\n+\n+  /* PR jit/66539 \"Missing parentheses in jit dumps\".\n+     Construct the equivalent of\n+       ((cast)ptr->next)->next\n+     and verify that the appropriate parentheses appear in the debug\n+     string.   */\n+  {\n+    /* \"ptr->next\". */\n+    gcc_jit_lvalue *inner_deref =\n+      gcc_jit_rvalue_dereference_field (ptr,\n+\t\t\t\t\tNULL,\n+\t\t\t\t\tf_next);\n+    /* \"((node *)ptr->next)\"; the cast is redundant, purely\n+       to exercise dumping.  */\n+    gcc_jit_rvalue *test_cast =\n+      gcc_jit_context_new_cast (ctxt, NULL,\n+\t\t\t\tgcc_jit_lvalue_as_rvalue (inner_deref),\n+\t\t\t\tt_node_ptr);\n+    /* \"((node *)ptr->next)->next\".  */\n+    gcc_jit_lvalue *outer_deref =\n+      gcc_jit_rvalue_dereference_field (test_cast, /* gcc_jit_rvalue *ptr */\n+\t\t\t\t\tNULL, /* gcc_jit_location *loc */\n+\t\t\t\t\tf_next); /* gcc_jit_field *field */\n+    CHECK_LVALUE_DEBUG_STRING (outer_deref,\n+\t\t\t       \"((struct node *)ptr->next)->next\");\n+  }\n+\n+#undef CHECK_LVALUE_DEBUG_STRING\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_NON_NULL (result);\n+  /* We don't actually build any functions above;\n+     nothing more to verify.  */\n+}"}, {"sha": "d83a4fb0571e71f19be7272d83e249ec40ec7a28", "filename": "gcc/testsuite/jit.dg/test-quadratic.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Ftestsuite%2Fjit.dg%2Ftest-quadratic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd93aa1a976dca96267efb36d6d909ff9813a414/gcc%2Ftestsuite%2Fjit.dg%2Ftest-quadratic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-quadratic.c?ref=bd93aa1a976dca96267efb36d6d909ff9813a414", "patch": "@@ -176,16 +176,8 @@ make_calc_discriminant (struct quadratic_test *testcase)\n \t  gcc_jit_param_as_rvalue (param_q),\n \t  NULL, testcase->c));\n \n-  gcc_jit_block_add_assignment (\n-    blk, NULL,\n-\n-    /* q->discriminant =...  */\n-    gcc_jit_rvalue_dereference_field (\n-      gcc_jit_param_as_rvalue (param_q),\n-      NULL,\n-      testcase->discriminant),\n-\n-    /* (q->b * q->b) - (4 * q->a * q->c) */\n+  /* (q->b * q->b) - (4 * q->a * q->c) */\n+  gcc_jit_rvalue *rhs =\n     gcc_jit_context_new_binary_op (\n       testcase->ctxt, NULL,\n       GCC_JIT_BINARY_OP_MINUS,\n@@ -213,7 +205,21 @@ make_calc_discriminant (struct quadratic_test *testcase)\n \t  testcase->ctxt, NULL,\n \t  GCC_JIT_BINARY_OP_MULT,\n \t  testcase->numeric_type,\n-\t  q_a, q_c)))); /* end of gcc_jit_function_add_assignment call.  */\n+\t  q_a, q_c)));\n+\n+  CHECK_STRING_VALUE (\n+     gcc_jit_object_get_debug_string (gcc_jit_rvalue_as_object (rhs)),\n+     \"q->b * q->b - (double)4 * q->a * q->c\");\n+\n+  gcc_jit_block_add_assignment (\n+    blk, NULL,\n+\n+    /* q->discriminant =...  */\n+    gcc_jit_rvalue_dereference_field (\n+      gcc_jit_param_as_rvalue (param_q),\n+      NULL,\n+      testcase->discriminant),\n+    rhs);\n \n   gcc_jit_block_end_with_void_return (blk, NULL);\n }"}]}