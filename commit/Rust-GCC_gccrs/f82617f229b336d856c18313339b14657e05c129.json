{"sha": "f82617f229b336d856c18313339b14657e05c129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgyNjE3ZjIyOWIzMzZkODU2YzE4MzEzMzM5YjE0NjU3ZTA1YzEyOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-07T08:28:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-07T08:28:39Z"}, "message": "i386: Better patch to improve avx* vector concatenation [PR93594]\n\nAfter thinking some more on this, we can do better; rather than having to\nadd a new prereload splitter pattern to catch all other cases where it might\nbe beneficial to fold first part of an UNSPEC_CAST back to the unspec\noperand, this patch reverts the *.md changes I've made yesterday and instead\ntweaks the patterns, so that simplify-rtx.c can optimize those on its own.\nInstead of the whole SET_SRC being an UNSPEC through which simplify-rtx.c\nobviously can't optimize anything, this represents those patterns through a\nVEC_CONCAT (or two nested ones for the 128-bit -> 512-bit casts) with the\noperand as the low part of it and UNSPEC representing just the high part of\nit (the undefined, to be ignored, bits).  While richi suggested using\nalready in GIMPLE for those using a SSA_NAME default definition (i.e.\nclearly uninitialized use), I'd say that uninit pass would warn about those,\nbut more importantly, in RTL it would probably force zero initialization of\nthat or use or an uninitialized pseudo, all of which is hard to match in an\npattern, so I think an UNSPEC is better for that.\n\n2020-02-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93594\n\t* config/i386/predicates.md (avx_identity_operand): Remove.\n\t* config/i386/sse.md (*avx_vec_concat<mode>_1): Remove.\n\t(avx_<castmode><avxsizesuffix>_<castmode>,\n\tavx512f_<castmode><avxsizesuffix>_256<castmode>): Change patterns to\n\ta VEC_CONCAT of the operand and UNSPEC_CAST.\n\t(avx512f_<castmode><avxsizesuffix>_<castmode>): Change pattern to\n\ta VEC_CONCAT of VEC_CONCAT of the operand and UNSPEC_CAST with\n\tUNSPEC_CAST.", "tree": {"sha": "bb3a69cea4bf2fcec4192a5e5eb36f4040bf452d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb3a69cea4bf2fcec4192a5e5eb36f4040bf452d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f82617f229b336d856c18313339b14657e05c129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82617f229b336d856c18313339b14657e05c129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82617f229b336d856c18313339b14657e05c129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82617f229b336d856c18313339b14657e05c129/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7bec5d5edeaab404931bf599821c6c2a3023b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7bec5d5edeaab404931bf599821c6c2a3023b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7bec5d5edeaab404931bf599821c6c2a3023b47"}], "stats": {"total": 61, "additions": 21, "deletions": 40}, "files": [{"sha": "e56eaba7327fcd6a682bf607b198eb9540056818", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82617f229b336d856c18313339b14657e05c129/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82617f229b336d856c18313339b14657e05c129/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f82617f229b336d856c18313339b14657e05c129", "patch": "@@ -1,5 +1,15 @@\n 2020-02-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93594\n+\t* config/i386/predicates.md (avx_identity_operand): Remove.\n+\t* config/i386/sse.md (*avx_vec_concat<mode>_1): Remove.\n+\t(avx_<castmode><avxsizesuffix>_<castmode>,\n+\tavx512f_<castmode><avxsizesuffix>_256<castmode>): Change patterns to\n+\ta VEC_CONCAT of the operand and UNSPEC_CAST.\n+\t(avx512f_<castmode><avxsizesuffix>_<castmode>): Change pattern to\n+\ta VEC_CONCAT of VEC_CONCAT of the operand and UNSPEC_CAST with\n+\tUNSPEC_CAST.\n+\n \tPR target/93611\n \t* config/i386/i386.c (ix86_lea_outperforms): Make sure to clear\n \trecog_data.insn if distance_non_agu_define changed it."}, {"sha": "1119366d54eaaf5d374ffe40029837fc8eb5c943", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82617f229b336d856c18313339b14657e05c129/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82617f229b336d856c18313339b14657e05c129/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=f82617f229b336d856c18313339b14657e05c129", "patch": "@@ -1584,19 +1584,6 @@\n   return true;\n })\n \n-;; Return true if OP is a parallel for identity permute.\n-(define_predicate \"avx_identity_operand\"\n-  (and (match_code \"parallel\")\n-       (match_code \"const_int\" \"a\"))\n-{\n-  int i, nelt = XVECLEN (op, 0);\n-\n-  for (i = 0; i < nelt; ++i)\n-    if (INTVAL (XVECEXP (op, 0, i)) != i)\n-      return false;\n-  return true;\n-})\n-\n ;; Return true if OP is a proper third operand to vpblendw256.\n (define_predicate \"avx2_pblendw_operand\"\n   (match_code \"const_int\")"}, {"sha": "8879a65a7fdf641e3bbd4ec3c6b7c3322008459c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82617f229b336d856c18313339b14657e05c129/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82617f229b336d856c18313339b14657e05c129/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f82617f229b336d856c18313339b14657e05c129", "patch": "@@ -21157,9 +21157,9 @@\n \n (define_insn_and_split \"avx_<castmode><avxsizesuffix>_<castmode>\"\n   [(set (match_operand:AVX256MODE2P 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(unspec:AVX256MODE2P\n-\t  [(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"xm,x\")]\n-\t  UNSPEC_CAST))]\n+\t(vec_concat:AVX256MODE2P\n+\t  (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"xm,x\")\n+\t  (unspec:<ssehalfvecmode> [(const_int 0)] UNSPEC_CAST)))]\n   \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -21358,24 +21358,6 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn_and_split \"*avx_vec_concat<mode>_1\"\n-  [(set (match_operand:V_256_512 0 \"register_operand\")\n-\t(vec_concat:V_256_512\n-\t  (vec_select:<ssehalfvecmode>\n-\t    (unspec:V_256_512\n-\t      [(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\")]\n-\t      UNSPEC_CAST)\n-\t    (match_parallel 3 \"avx_identity_operand\"\n-\t      [(match_operand 4 \"const_int_operand\")]))\n-\t  (match_operand:<ssehalfvecmode> 2 \"nonimm_or_0_operand\")))]\n-  \"TARGET_AVX\n-   && (operands[2] == CONST0_RTX (<ssehalfvecmode>mode)\n-       || !MEM_P (operands[1]))\n-   && ix86_pre_reload_split ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (match_dup 0) (vec_concat:V_256_512 (match_dup 1) (match_dup 2)))])\n-\n (define_insn \"vcvtph2ps<mask_name>\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V4SF\n@@ -22198,9 +22180,11 @@\n \n (define_insn_and_split \"avx512f_<castmode><avxsizesuffix>_<castmode>\"\n   [(set (match_operand:AVX512MODE2P 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(unspec:AVX512MODE2P\n-\t  [(match_operand:<ssequartermode> 1 \"nonimmediate_operand\" \"xm,x\")]\n-\t  UNSPEC_CAST))]\n+\t(vec_concat:AVX512MODE2P\n+\t  (vec_concat:<ssehalfvecmode>\n+\t    (match_operand:<ssequartermode> 1 \"nonimmediate_operand\" \"xm,x\")\n+\t    (unspec:<ssequartermode> [(const_int 0)] UNSPEC_CAST))\n+\t  (unspec:<ssehalfvecmode> [(const_int 0)] UNSPEC_CAST)))]\n   \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22215,9 +22199,9 @@\n \n (define_insn_and_split \"avx512f_<castmode><avxsizesuffix>_256<castmode>\"\n   [(set (match_operand:AVX512MODE2P 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(unspec:AVX512MODE2P\n-\t  [(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"xm,x\")]\n-\t  UNSPEC_CAST))]\n+\t(vec_concat:AVX512MODE2P\n+\t  (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"xm,x\")\n+\t  (unspec:<ssehalfvecmode> [(const_int 0)] UNSPEC_CAST)))]\n   \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\""}]}