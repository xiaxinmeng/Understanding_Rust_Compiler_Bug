{"sha": "e58c9d921da423712db8369e8bb69d4ae992e94d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU4YzlkOTIxZGE0MjM3MTJkYjgzNjllOGJiNjlkNGFlOTkyZTk0ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-06-06T17:51:19Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-06-06T17:51:19Z"}, "message": "re PR c++/85977 (Incorrect handling of array reference size deduction)\n\n\tPR c++/85977\n\t* pt.c (unify): If ELTTYPE has no deducible template parms, skip\n\tdeduction from the list elements.\n\t(type_unification_real): Check convertibility of list elements.\n\n\t* g++.dg/cpp0x/initlist102.C: New test.\n\t* g++.dg/cpp0x/initlist103.C: New test.\n\t* g++.dg/cpp0x/initlist104.C: New test.\n\nFrom-SVN: r261241", "tree": {"sha": "35d098db01a750035183720b183fbfd6b7b9d242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35d098db01a750035183720b183fbfd6b7b9d242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e58c9d921da423712db8369e8bb69d4ae992e94d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58c9d921da423712db8369e8bb69d4ae992e94d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58c9d921da423712db8369e8bb69d4ae992e94d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58c9d921da423712db8369e8bb69d4ae992e94d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b66ec0c0324bb43f1fe462e7dc21fc14073d69e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66ec0c0324bb43f1fe462e7dc21fc14073d69e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66ec0c0324bb43f1fe462e7dc21fc14073d69e6"}], "stats": {"total": 129, "additions": 113, "deletions": 16}, "files": [{"sha": "68df05445171dcc8dd44969fbc4a08c418c41b05", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e58c9d921da423712db8369e8bb69d4ae992e94d", "patch": "@@ -1,3 +1,10 @@\n+2018-06-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85977\n+\t* pt.c (unify): If ELTTYPE has no deducible template parms, skip\n+\tdeduction from the list elements.\n+\t(type_unification_real): Check convertibility of list elements.\n+\n 2018-06-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86060 - ICE on range for with -std=c++98."}, {"sha": "d8880eb138d9ea1e673707e38c1155af654ea77e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e58c9d921da423712db8369e8bb69d4ae992e94d", "patch": "@@ -20370,6 +20370,22 @@ type_unification_real (tree tparms,\n \t    if (check_non_deducible_conversion (parm, arg, strict, flags,\n \t\t\t\t\t\texplain_p))\n \t      return 1;\n+\n+\t    if (BRACE_ENCLOSED_INITIALIZER_P (arg)\n+\t\t&& (TREE_CODE (parm) == ARRAY_TYPE || is_std_init_list (parm)))\n+\t      {\n+\t\ttree elt, elttype;\n+\t\tunsigned int i;\n+\n+\t\tif (TREE_CODE (parm) == ARRAY_TYPE)\n+\t\t  elttype = TREE_TYPE (parm);\n+\t\telse\n+\t\t  elttype = TREE_VEC_ELT (CLASSTYPE_TI_ARGS (parm), 0);\n+\t\tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (arg), i, elt)\n+\t\t  if (check_non_deducible_conversion (elttype, elt, strict,\n+\t\t\t\t\t\t      flags, explain_p))\n+\t\t    return 1;\n+\t      }\n \t  }\n \n       /* Now substitute into the default template arguments.  */\n@@ -21404,24 +21420,30 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t    return unify_success (explain_p);\n \t}\n \n-      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (arg), i, elt)\n-\t{\n-\t  int elt_strict = strict;\n+      if (strict != DEDUCE_EXACT\n+\t  && TYPE_P (elttype)\n+\t  && !uses_deducible_template_parms (elttype))\n+\t/* If ELTTYPE has no deducible template parms, skip deduction from\n+\t   the list elements.  */;\n+      else\n+\tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (arg), i, elt)\n+\t  {\n+\t    int elt_strict = strict;\n \n-\t  if (elt == error_mark_node)\n-\t    return unify_invalid (explain_p);\n+\t    if (elt == error_mark_node)\n+\t      return unify_invalid (explain_p);\n \n-\t  if (!BRACE_ENCLOSED_INITIALIZER_P (elt))\n-\t    {\n-\t      tree type = TREE_TYPE (elt);\n-\t      if (type == error_mark_node)\n-\t\treturn unify_invalid (explain_p);\n-\t      /* It should only be possible to get here for a call.  */\n-\t      gcc_assert (elt_strict & UNIFY_ALLOW_OUTER_LEVEL);\n-\t      elt_strict |= maybe_adjust_types_for_deduction\n-\t\t(DEDUCE_CALL, &elttype, &type, elt);\n-\t      elt = type;\n-\t    }\n+\t    if (!BRACE_ENCLOSED_INITIALIZER_P (elt))\n+\t      {\n+\t\ttree type = TREE_TYPE (elt);\n+\t\tif (type == error_mark_node)\n+\t\t  return unify_invalid (explain_p);\n+\t\t/* It should only be possible to get here for a call.  */\n+\t\tgcc_assert (elt_strict & UNIFY_ALLOW_OUTER_LEVEL);\n+\t\telt_strict |= maybe_adjust_types_for_deduction\n+\t\t  (DEDUCE_CALL, &elttype, &type, elt);\n+\t\telt = type;\n+\t      }\n \n \t  RECUR_AND_CHECK_FAILURE (tparms, targs, elttype, elt, elt_strict,\n \t\t\t\t   explain_p);"}, {"sha": "14f575e6e7935061e7dbcc73f2a06e2e2f46e0b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e58c9d921da423712db8369e8bb69d4ae992e94d", "patch": "@@ -1,3 +1,10 @@\n+2018-06-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85977\n+\t* g++.dg/cpp0x/initlist102.C: New test.\n+\t* g++.dg/cpp0x/initlist103.C: New test.\n+\t* g++.dg/cpp0x/initlist104.C: New test.\n+\n 2018-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/torture/pr86066.c: New test."}, {"sha": "e114866292fcd68f9aa66b15b3b08f9f73c1329f", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist102.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist102.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist102.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist102.C?ref=e58c9d921da423712db8369e8bb69d4ae992e94d", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/85977, Incorrect handling of array reference size deduction\n+// { dg-do compile { target c++11 } }\n+\n+template <int N>\n+void fn1 (const char (&)[N]) { static_assert (N == 3, \"fn1\");}\n+\n+template <int N>\n+void fn2 (const short (&)[N]) { static_assert (N == 3, \"fn2\");}\n+\n+template <int N>\n+void fn3 (const int (&)[N]) { static_assert (N == 3, \"fn2\");}\n+\n+template <int N>\n+void fn4 (const long (&)[N]) { static_assert (N == 3, \"fn4\");}\n+\n+template <int N>\n+void fn5 (const unsigned char (&)[N]) { static_assert (N == 3, \"fn5\");}\n+\n+template <int N>\n+void fn6 (const unsigned short (&)[N]) { static_assert (N == 3, \"fn6\");}\n+\n+template <int N>\n+void fn7 (const unsigned int (&)[N]) { static_assert (N == 3, \"fn7\");}\n+\n+template <int N>\n+void fn8 (const unsigned int (&)[N]) { static_assert (N == 3, \"fn8\");}\n+\n+void\n+bar ()\n+{\n+  fn1 ({1, 2, 3});\n+  fn2 ({1, 2, 3});\n+  fn3 ({1, 2, 3});\n+  fn4 ({1, 2, 3});\n+  fn5 ({1, 2, 3});\n+  fn6 ({1, 2, 3});\n+  fn7 ({1, 2, 3});\n+  fn8 ({1, 2, 3});\n+}"}, {"sha": "0c1923c6ab070e67eb4123b80adc7894402fcb0c", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist103.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist103.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist103.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist103.C?ref=e58c9d921da423712db8369e8bb69d4ae992e94d", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/85977, Incorrect handling of array reference size deduction\n+// { dg-do compile { target c++11 } }\n+\n+template <int N>\n+void fn (const char (&)[N]) { }\n+\n+void\n+bar ()\n+{\n+  fn ({1.2}); // { dg-error \"narrowing\" }\n+}"}, {"sha": "99487a70607044eb822c874fb6294a922375edc6", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist104.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist104.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58c9d921da423712db8369e8bb69d4ae992e94d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist104.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist104.C?ref=e58c9d921da423712db8369e8bb69d4ae992e94d", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/85977, Incorrect handling of array reference size deduction\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T, int N>\n+void fn (const T (&)[N]) { static_assert (N == 3, \"fn\"); }\n+\n+void\n+bar ()\n+{\n+  fn ({1, 2, 3});\n+}"}]}