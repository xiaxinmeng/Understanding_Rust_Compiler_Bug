{"sha": "3fcfe88d1957982a29bc9285b69fc6e1ac96ac31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjZmU4OGQxOTU3OTgyYTI5YmM5Mjg1YjY5ZmM2ZTFhYzk2YWMzMQ==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2002-02-18T20:23:56Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2002-02-18T20:23:56Z"}, "message": "Makefile.am (thread_builddir): Remove (map all existing uses to target_builddir).\n\n\tlibstdc++/5697\n\t* include/Makefile.am (thread_builddir): Remove (map all\n\texisting uses to target_builddir).\n\t(thread_headers): Rename to...\n\t(thread_target_headers): ...this.\n\t(stamp-thread): Remove.\n\t(stamp-target): Correctly state the position as built.\n\tUpdate all dependencies to match the new reality.  Remove all\n\tdependency calculations on directories.\n\t* include/Makefile.in: Rebuilt.\n\nFrom-SVN: r49846", "tree": {"sha": "fc1c3f565a61b2f897a8053bfd32fae3e20235af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc1c3f565a61b2f897a8053bfd32fae3e20235af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31/comments", "author": null, "committer": null, "parents": [{"sha": "1768c26f048e41d04284ecb2de94e7dd023eadcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1768c26f048e41d04284ecb2de94e7dd023eadcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1768c26f048e41d04284ecb2de94e7dd023eadcc"}], "stats": {"total": 349, "additions": 59, "deletions": 290}, "files": [{"sha": "18d68ff4bf69d280148b24bdfab2db13a1b9fc4b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3fcfe88d1957982a29bc9285b69fc6e1ac96ac31", "patch": "@@ -1,3 +1,16 @@\n+2002-02-18  Loren Rittle <ljrittle@acm.org>\n+\n+\tlibstdc++/5697\n+\t* include/Makefile.am (thread_builddir): Remove (map all\n+\texisting uses to target_builddir).\n+\t(thread_headers): Rename to...\n+\t(thread_target_headers): ...this.\n+\t(stamp-thread): Remove.\n+\t(stamp-target): Correctly state the position as built.\n+\tUpdate all dependencies to match the new reality.  Remove all\n+\tdependency calculations on directories.\n+\t* include/Makefile.in: Rebuilt.\n+\n 2002-02-16   Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/locale_facets.tcc: Add pragma GCC system_header.\t"}, {"sha": "584ecbfafd043151543350beb5cfe329776e858c", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=3fcfe88d1957982a29bc9285b69fc6e1ac96ac31", "patch": "@@ -284,20 +284,19 @@ extra_target_headers = \\\n \t${target_builddir}/messages_members.h \\\n \t${target_builddir}/codecvt_specializations.h\n \n-thread_builddir = ./${target_alias}/bits\n-thread_headers = \\\n-\t${thread_builddir}/gthr.h \\\n-\t${thread_builddir}/gthr-single.h \\\n-\t${thread_builddir}/gthr-default.h\n+thread_target_headers = \\\n+\t${target_builddir}/gthr.h \\\n+\t${target_builddir}/gthr-single.h \\\n+\t${target_builddir}/gthr-default.h\n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n-\tstamp-target stamp-thread \n+\t${target_builddir}/stamp-target\n \n \n # Here are the rules for building the headers\n-all-local: ${target_builddir}/c++config.h ${allstamps}\n+all-local: ${target_builddir}/c++config.h ${thread_target_headers} ${allstamps}\n \n # This rule is slightly different, in that we must change the name of the\n # local file from std_foo.h to foo.\n@@ -343,19 +342,14 @@ stamp-ext: ${ext_headers}\n \t(cd ${ext_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-ext\n \n-# This target is special.  The timestamp on a directory gets modified\n-# whenever a file it contains gets modified, and that'll throw off all the\n-# build dependencies that need this target.  On the other hand, someone\n-# could delete the directory and not the stamp file, faking out make.\n-${target_builddir}: stamp-${target_alias}\n stamp-${target_alias}:\n \t@if [ ! -d ${target_builddir} ]; then \\\n \t  mkdir -p ${target_builddir} ;\\\n \t  echo `date` > stamp-${target_alias} ;\\\n \tfi\n \n # Target includes static.\n-stamp-target: ${target_headers} ${target_builddir}\n+${target_builddir}/stamp-target: ${target_headers} stamp-${target_alias}\n \t@cd ${target_builddir} ;\\\n \tif [ ! -f stamp-target ]; then \\\n \t  @LN_S@ ${target_headers} . || true ;\\\n@@ -368,9 +362,9 @@ stamp-target: ${target_headers} ${target_builddir}\n \tfi\n \n # Target includes dynamic.\n-${target_builddir}/c++config.h: ../config.h \\\n+${target_builddir}/c++config.h: ${glibcpp_builddir}/config.h \\\n \t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n-\t\t\t\t${target_builddir}\n+\t\t\t\tstamp-${target_alias}\n \t@cat ${glibcpp_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCPP_HAVE_/g' \\\n \t    -e 's/PACKAGE/_GLIBCPP_PACKAGE/g' \\\n@@ -383,21 +377,19 @@ ${target_builddir}/c++config.h: ../config.h \\\n glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n-stamp-thread: ${thread_headers} ${thread_builddir}\n-\t@echo `date` > stamp-thread\n-\n-\n-${thread_builddir}/gthr.h:\n+${target_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${target_alias}\n \tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr.h > $@\n \n-${thread_builddir}/gthr-single.h:\n+${target_builddir}/gthr-single.h: ${toplevel_srcdir}/gcc/gthr-single.h \\\n+\t\t\t\t  stamp-${target_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-single.h > $@\n \n-${thread_builddir}/gthr-default.h:\n+${target_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n+\t\t\t\t   stamp-${target_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n@@ -434,11 +426,9 @@ install-data-local:\n \t  $(INSTALL_DATA) ${std_builddir}/$${file} \\\n \t    ${gxx_include_dir}/${std_builddir}; done\n \t$(INSTALL) -d ${gxx_include_dir}/${target_builddir}\n-\tfor file in ${target_headers} ${extra_target_headers}; do \\\n+\tfor file in ${target_headers} ${extra_target_headers} \\\n+\t ${thread_target_headers}; do \\\n \t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${target_builddir}; done\n-\t$(INSTALL) -d ${gxx_include_dir}/${thread_builddir}\n-\tfor file in ${thread_headers}; do \\\n-\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${thread_builddir}; done\n \n # By adding these files here, automake will remove them for 'make clean'\n #CLEANFILES = ${allstamps}"}, {"sha": "4ba89f3dac436c6ccabfb44059f5704702cff8db", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 30, "deletions": 264, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=3fcfe88d1957982a29bc9285b69fc6e1ac96ac31", "patch": "@@ -67,7 +67,6 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n BASIC_FILE_H = @BASIC_FILE_H@\n-BUILD_INCLUDED_LIBINTL = @BUILD_INCLUDED_LIBINTL@\n CATALOGS = @CATALOGS@\n CATOBJEXT = @CATOBJEXT@\n CC = @CC@\n@@ -89,17 +88,17 @@ EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GENCAT = @GENCAT@\n-GLIBC21 = @GLIBC21@\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n GMOFILES = @GMOFILES@\n GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n INSTOBJEXT = @INSTOBJEXT@\n-INTLBISON = @INTLBISON@\n+INTLDEPS = @INTLDEPS@\n INTLLIBS = @INTLLIBS@\n INTLOBJS = @INTLOBJS@\n-INTL_LIBTOOL_SUFFIX_PREFIX = @INTL_LIBTOOL_SUFFIX_PREFIX@\n-LIBICONV = @LIBICONV@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n@@ -141,6 +140,7 @@ glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n ifGNUmake = @ifGNUmake@\n+l = @l@\n libio_la = @libio_la@\n libtool_VERSION = @libtool_VERSION@\n release_VERSION = @release_VERSION@\n@@ -158,278 +158,52 @@ glibcpp_builddir = @glibcpp_builddir@\n \n bits_srcdir = ${glibcpp_srcdir}/include/bits\n bits_builddir = ./bits\n-bits_headers = \\\n-\t${bits_srcdir}/basic_ios.h \\\n-\t${bits_srcdir}/basic_ios.tcc \\\n-\t${bits_srcdir}/basic_string.h \\\n-\t${bits_srcdir}/basic_string.tcc \\\n-\t${bits_srcdir}/boost_concept_check.h \\\n-\t${bits_srcdir}/char_traits.h \\\n-\t${bits_srcdir}/codecvt.h \\\n-\t${bits_srcdir}/concept_check.h \\\n-\t${bits_srcdir}/cpp_type_traits.h \\\n-\t${bits_srcdir}/fpos.h \\\n-\t${bits_srcdir}/fstream.tcc \\\n-\t${bits_srcdir}/functexcept.h \\\n-\t${bits_srcdir}/generic_shadow.h \\\n-\t${bits_srcdir}/gslice.h \\\n-\t${bits_srcdir}/gslice_array.h \\\n-\t${bits_srcdir}/indirect_array.h \\\n-\t${bits_srcdir}/ios_base.h \\\n-\t${bits_srcdir}/istream.tcc \\\n-\t${bits_srcdir}/locale_facets.h \\\n-\t${bits_srcdir}/locale_facets.tcc \\\n-\t${bits_srcdir}/localefwd.h \\\n-\t${bits_srcdir}/mask_array.h \\\n-\t${bits_srcdir}/ostream.tcc \\\n-\t${bits_srcdir}/pthread_allocimpl.h \\\n-\t${bits_srcdir}/stream_iterator.h \\\n-\t${bits_srcdir}/streambuf_iterator.h \\\n-\t${bits_srcdir}/slice.h \\\n-\t${bits_srcdir}/slice_array.h \\\n-\t${bits_srcdir}/sstream.tcc \\\n-\t${bits_srcdir}/stl_algo.h \\\n-\t${bits_srcdir}/stl_algobase.h \\\n-\t${bits_srcdir}/stl_alloc.h \\\n-\t${bits_srcdir}/stl_bvector.h \\\n-\t${bits_srcdir}/stl_construct.h \\\n-\t${bits_srcdir}/stl_deque.h \\\n-\t${bits_srcdir}/stl_function.h \\\n-\t${bits_srcdir}/stl_heap.h \\\n-\t${bits_srcdir}/stl_iterator.h \\\n-\t${bits_srcdir}/stl_iterator_base_funcs.h \\\n-\t${bits_srcdir}/stl_iterator_base_types.h \\\n-\t${bits_srcdir}/stl_list.h \\\n-\t${bits_srcdir}/stl_map.h \\\n-\t${bits_srcdir}/stl_multimap.h \\\n-\t${bits_srcdir}/stl_multiset.h \\\n-\t${bits_srcdir}/stl_numeric.h \\\n-\t${bits_srcdir}/stl_pair.h \\\n-\t${bits_srcdir}/stl_pthread_alloc.h \\\n-\t${bits_srcdir}/stl_queue.h \\\n-\t${bits_srcdir}/stl_raw_storage_iter.h \\\n-\t${bits_srcdir}/stl_relops.h \\\n-\t${bits_srcdir}/stl_set.h \\\n-\t${bits_srcdir}/stl_stack.h \\\n-\t${bits_srcdir}/stl_tempbuf.h \\\n-\t${bits_srcdir}/stl_threads.h \\\n-\t${bits_srcdir}/stl_tree.h \\\n-\t${bits_srcdir}/stl_uninitialized.h \\\n-\t${bits_srcdir}/stl_vector.h \\\n-\t${bits_srcdir}/streambuf.tcc \\\n-\t${bits_srcdir}/stringfwd.h \\\n-\t${bits_srcdir}/type_traits.h \\\n-\t${bits_srcdir}/valarray_array.h \\\n-\t${bits_srcdir}/valarray_array.tcc \\\n-\t${bits_srcdir}/valarray_meta.h\n+bits_headers =  \t${bits_srcdir}/basic_ios.h \t${bits_srcdir}/basic_ios.tcc \t${bits_srcdir}/basic_string.h \t${bits_srcdir}/basic_string.tcc \t${bits_srcdir}/boost_concept_check.h \t${bits_srcdir}/char_traits.h \t${bits_srcdir}/codecvt.h \t${bits_srcdir}/concept_check.h \t${bits_srcdir}/cpp_type_traits.h \t${bits_srcdir}/fpos.h \t${bits_srcdir}/fstream.tcc \t${bits_srcdir}/functexcept.h \t${bits_srcdir}/generic_shadow.h \t${bits_srcdir}/gslice.h \t${bits_srcdir}/gslice_array.h \t${bits_srcdir}/indirect_array.h \t${bits_srcdir}/ios_base.h \t${bits_srcdir}/istream.tcc \t${bits_srcdir}/locale_facets.h \t${bits_srcdir}/locale_facets.tcc \t${bits_srcdir}/localefwd.h \t${bits_srcdir}/mask_array.h \t${bits_srcdir}/ostream.tcc \t${bits_srcdir}/pthread_allocimpl.h \t${bits_srcdir}/stream_iterator.h \t${bits_srcdir}/streambuf_iterator.h \t${bits_srcdir}/slice.h \t${bits_srcdir}/slice_array.h \t${bits_srcdir}/sstream.tcc \t${bits_srcdir}/stl_algo.h \t${bits_srcdir}/stl_algobase.h \t${bits_srcdir}/stl_alloc.h \t${bits_srcdir}/stl_bvector.h \t${bits_srcdir}/stl_construct.h \t${bits_srcdir}/stl_deque.h \t${bits_srcdir}/stl_function.h \t${bits_srcdir}/stl_heap.h \t${bits_srcdir}/stl_iterator.h \t${bits_srcdir}/stl_iterator_base_funcs.h \t${bits_srcdir}/stl_iterator_base_types.h \t${bits_srcdir}/stl_list.h \t${bits_srcdir}/stl_map.h \t${bits_srcdir}/stl_multimap.h \t${bits_srcdir}/stl_multiset.h \t${bits_srcdir}/stl_numeric.h \t${bits_srcdir}/stl_pair.h \t${bits_srcdir}/stl_pthread_alloc.h \t${bits_srcdir}/stl_queue.h \t${bits_srcdir}/stl_raw_storage_iter.h \t${bits_srcdir}/stl_relops.h \t${bits_srcdir}/stl_set.h \t${bits_srcdir}/stl_stack.h \t${bits_srcdir}/stl_tempbuf.h \t${bits_srcdir}/stl_threads.h \t${bits_srcdir}/stl_tree.h \t${bits_srcdir}/stl_uninitialized.h \t${bits_srcdir}/stl_vector.h \t${bits_srcdir}/streambuf.tcc \t${bits_srcdir}/stringfwd.h \t${bits_srcdir}/type_traits.h \t${bits_srcdir}/valarray_array.h \t${bits_srcdir}/valarray_array.tcc \t${bits_srcdir}/valarray_meta.h\n \n \n backward_srcdir = ${glibcpp_srcdir}/include/backward\n backward_builddir = ./backward\n-backward_headers = \\\n-\t${backward_srcdir}/complex.h \\\n-\t${backward_srcdir}/iomanip.h \\\n-\t${backward_srcdir}/istream.h \\\n-\t${backward_srcdir}/ostream.h \\\n-\t${backward_srcdir}/stream.h \\\n-\t${backward_srcdir}/streambuf.h \\\n-\t${backward_srcdir}/algo.h \\\n-\t${backward_srcdir}/algobase.h \\\n-\t${backward_srcdir}/alloc.h \\\n-\t${backward_srcdir}/bvector.h \\\n-\t${backward_srcdir}/defalloc.h \\\n-\t${backward_srcdir}/deque.h \\\n-\t${backward_srcdir}/function.h \\\n-\t${backward_srcdir}/hash_map.h \\\n-\t${backward_srcdir}/hash_set.h \\\n-\t${backward_srcdir}/hashtable.h \\\n-\t${backward_srcdir}/heap.h \\\n-\t${backward_srcdir}/iostream.h \\\n-\t${backward_srcdir}/iterator.h \\\n-\t${backward_srcdir}/list.h \\\n-\t${backward_srcdir}/map.h \\\n-\t${backward_srcdir}/multimap.h \\\n-\t${backward_srcdir}/new.h \\\n-\t${backward_srcdir}/multiset.h \\\n-\t${backward_srcdir}/pair.h \\\n-\t${backward_srcdir}/queue.h \\\n-\t${backward_srcdir}/rope.h \\\n-\t${backward_srcdir}/set.h \\\n-\t${backward_srcdir}/slist.h \\\n-\t${backward_srcdir}/stack.h \\\n-\t${backward_srcdir}/tempbuf.h \\\n-\t${backward_srcdir}/tree.h \\\n-\t${backward_srcdir}/vector.h \\\n-\t${backward_srcdir}/fstream.h \\\n-\t${backward_srcdir}/strstream.h \\\n-\t${backward_srcdir}/strstream \\\n-\t${backward_srcdir}/backward_warning.h\n+backward_headers =  \t${backward_srcdir}/complex.h \t${backward_srcdir}/iomanip.h \t${backward_srcdir}/istream.h \t${backward_srcdir}/ostream.h \t${backward_srcdir}/stream.h \t${backward_srcdir}/streambuf.h \t${backward_srcdir}/algo.h \t${backward_srcdir}/algobase.h \t${backward_srcdir}/alloc.h \t${backward_srcdir}/bvector.h \t${backward_srcdir}/defalloc.h \t${backward_srcdir}/deque.h \t${backward_srcdir}/function.h \t${backward_srcdir}/hash_map.h \t${backward_srcdir}/hash_set.h \t${backward_srcdir}/hashtable.h \t${backward_srcdir}/heap.h \t${backward_srcdir}/iostream.h \t${backward_srcdir}/iterator.h \t${backward_srcdir}/list.h \t${backward_srcdir}/map.h \t${backward_srcdir}/multimap.h \t${backward_srcdir}/new.h \t${backward_srcdir}/multiset.h \t${backward_srcdir}/pair.h \t${backward_srcdir}/queue.h \t${backward_srcdir}/rope.h \t${backward_srcdir}/set.h \t${backward_srcdir}/slist.h \t${backward_srcdir}/stack.h \t${backward_srcdir}/tempbuf.h \t${backward_srcdir}/tree.h \t${backward_srcdir}/vector.h \t${backward_srcdir}/fstream.h \t${backward_srcdir}/strstream.h \t${backward_srcdir}/strstream \t${backward_srcdir}/backward_warning.h\n \n \n ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n-ext_headers = \\\n-\t${ext_srcdir}/algorithm \\\n-\t${ext_srcdir}/functional \\\n-\t${ext_srcdir}/hash_map \\\n-\t${ext_srcdir}/hash_set \\\n-\t${ext_srcdir}/iterator \\\n-\t${ext_srcdir}/memory \\\n-\t${ext_srcdir}/numeric \\\n-\t${ext_srcdir}/rb_tree \\\n-\t${ext_srcdir}/rope \\\n-\t${ext_srcdir}/ropeimpl.h \\\n-\t${ext_srcdir}/slist \\\n-\t${ext_srcdir}/stl_hash_fun.h \\\n-\t${ext_srcdir}/stl_hashtable.h \\\n-\t${ext_srcdir}/stl_rope.h\n+ext_headers =  \t${ext_srcdir}/algorithm \t${ext_srcdir}/functional \t${ext_srcdir}/hash_map \t${ext_srcdir}/hash_set \t${ext_srcdir}/iterator \t${ext_srcdir}/memory \t${ext_srcdir}/numeric \t${ext_srcdir}/rb_tree \t${ext_srcdir}/rope \t${ext_srcdir}/ropeimpl.h \t${ext_srcdir}/slist \t${ext_srcdir}/stl_hash_fun.h \t${ext_srcdir}/stl_hashtable.h \t${ext_srcdir}/stl_rope.h\n \n \n # This is the common subset of files that all three \"C\" header models use.\n c_base_srcdir = @C_INCLUDE_DIR@\n c_base_builddir = .\n-c_base_headers = \\\n-\t${c_base_srcdir}/std_cassert.h \\\n-\t${c_base_srcdir}/std_cctype.h \\\n-\t${c_base_srcdir}/std_cerrno.h \\\n-\t${c_base_srcdir}/std_cfloat.h \\\n-\t${c_base_srcdir}/std_ciso646.h \\\n-\t${c_base_srcdir}/std_climits.h \\\n-\t${c_base_srcdir}/std_clocale.h \\\n-\t${c_base_srcdir}/std_cmath.h \\\n-\t${c_base_srcdir}/std_csetjmp.h \\\n-\t${c_base_srcdir}/std_csignal.h \\\n-\t${c_base_srcdir}/std_cstdarg.h \\\n-\t${c_base_srcdir}/std_cstddef.h \\\n-\t${c_base_srcdir}/std_cstdio.h \\\n-\t${c_base_srcdir}/std_cstdlib.h \\\n-\t${c_base_srcdir}/std_cstring.h \\\n-\t${c_base_srcdir}/std_ctime.h \\\n-\t${c_base_srcdir}/std_cwchar.h \\\n-\t${c_base_srcdir}/std_cwctype.h \n+c_base_headers =  \t${c_base_srcdir}/std_cassert.h \t${c_base_srcdir}/std_cctype.h \t${c_base_srcdir}/std_cerrno.h \t${c_base_srcdir}/std_cfloat.h \t${c_base_srcdir}/std_ciso646.h \t${c_base_srcdir}/std_climits.h \t${c_base_srcdir}/std_clocale.h \t${c_base_srcdir}/std_cmath.h \t${c_base_srcdir}/std_csetjmp.h \t${c_base_srcdir}/std_csignal.h \t${c_base_srcdir}/std_cstdarg.h \t${c_base_srcdir}/std_cstddef.h \t${c_base_srcdir}/std_cstdio.h \t${c_base_srcdir}/std_cstdlib.h \t${c_base_srcdir}/std_cstring.h \t${c_base_srcdir}/std_ctime.h \t${c_base_srcdir}/std_cwchar.h \t${c_base_srcdir}/std_cwctype.h \n \n # Some of the \"C\" headers need extra files.\n-c_base_headers_extra = \\\n-\t${c_base_srcdir}/cmath.tcc \n-\n-c_base_headers_rename = \\\n-\tcassert \\\n-\tcctype \\\n-\tcerrno \\\n-\tcfloat \\\n-\tciso646 \\\n-\tclimits \\\n-\tclocale \\\n-\tcmath \\\n-\tcsetjmp \\\n-\tcsignal \\\n-\tcstdarg \\\n-\tcstddef \\\n-\tcstdio \\\n-\tcstdlib \\\n-\tcstring \\\n-\tctime \\\n-\tcwchar \\\n-\tcwctype \n+c_base_headers_extra =  \t${c_base_srcdir}/cmath.tcc \n+\n+c_base_headers_rename =  \tcassert \tcctype \tcerrno \tcfloat \tciso646 \tclimits \tclocale \tcmath \tcsetjmp \tcsignal \tcstdarg \tcstddef \tcstdio \tcstdlib \tcstring \tctime \tcwchar \tcwctype \n \n \n std_srcdir = ${glibcpp_srcdir}/include/std\n std_builddir = .\n-std_headers = \\\n-\t${std_srcdir}/std_algorithm.h \\\n-\t${std_srcdir}/std_bitset.h \\\n-\t${std_srcdir}/std_complex.h \\\n-\t${std_srcdir}/std_deque.h \\\n-\t${std_srcdir}/std_fstream.h \\\n-\t${std_srcdir}/std_functional.h \\\n-\t${std_srcdir}/std_iomanip.h \\\n-\t${std_srcdir}/std_ios.h \\\n-\t${std_srcdir}/std_iosfwd.h \\\n-\t${std_srcdir}/std_iostream.h \\\n-\t${std_srcdir}/std_istream.h \\\n-\t${std_srcdir}/std_iterator.h \\\n-\t${std_srcdir}/std_limits.h \\\n-\t${std_srcdir}/std_list.h \\\n-\t${std_srcdir}/std_locale.h \\\n-\t${std_srcdir}/std_map.h \\\n-\t${std_srcdir}/std_memory.h \\\n-\t${std_srcdir}/std_numeric.h \\\n-\t${std_srcdir}/std_ostream.h \\\n-\t${std_srcdir}/std_queue.h \\\n-\t${std_srcdir}/std_set.h \\\n-\t${std_srcdir}/std_sstream.h \\\n-\t${std_srcdir}/std_stack.h \\\n-\t${std_srcdir}/std_stdexcept.h \\\n-\t${std_srcdir}/std_streambuf.h \\\n-\t${std_srcdir}/std_string.h \\\n-\t${std_srcdir}/std_utility.h \\\n-\t${std_srcdir}/std_valarray.h \\\n-\t${std_srcdir}/std_vector.h\n+std_headers =  \t${std_srcdir}/std_algorithm.h \t${std_srcdir}/std_bitset.h \t${std_srcdir}/std_complex.h \t${std_srcdir}/std_deque.h \t${std_srcdir}/std_fstream.h \t${std_srcdir}/std_functional.h \t${std_srcdir}/std_iomanip.h \t${std_srcdir}/std_ios.h \t${std_srcdir}/std_iosfwd.h \t${std_srcdir}/std_iostream.h \t${std_srcdir}/std_istream.h \t${std_srcdir}/std_iterator.h \t${std_srcdir}/std_limits.h \t${std_srcdir}/std_list.h \t${std_srcdir}/std_locale.h \t${std_srcdir}/std_map.h \t${std_srcdir}/std_memory.h \t${std_srcdir}/std_numeric.h \t${std_srcdir}/std_ostream.h \t${std_srcdir}/std_queue.h \t${std_srcdir}/std_set.h \t${std_srcdir}/std_sstream.h \t${std_srcdir}/std_stack.h \t${std_srcdir}/std_stdexcept.h \t${std_srcdir}/std_streambuf.h \t${std_srcdir}/std_string.h \t${std_srcdir}/std_utility.h \t${std_srcdir}/std_valarray.h \t${std_srcdir}/std_vector.h\n \n # Renamed at build time. \n-std_headers_rename = \\\n-\talgorithm \\\n-\tbitset \\\n-\tcomplex \\\n-\tdeque \\\n-\tfstream \\\n-\tfunctional \\\n-\tiomanip \\\n-\tios \\\n-\tiosfwd \\\n-\tiostream \\\n-\tistream \\\n-\titerator \\\n-\tlimits \\\n-\tlist \\\n-\tlocale \\\n-\tmap \\\n-\tmemory \\\n-\tnumeric \\\n-\tostream \\\n-\tqueue \\\n-\tset \\\n-\tsstream \\\n-\tstack \\\n-\tstdexcept \\\n-\tstreambuf \\\n-\tstring \\\n-\tutility \\\n-\tvalarray \\\n-\tvector\n+std_headers_rename =  \talgorithm \tbitset \tcomplex \tdeque \tfstream \tfunctional \tiomanip \tios \tiosfwd \tiostream \tistream \titerator \tlimits \tlist \tlocale \tmap \tmemory \tnumeric \tostream \tqueue \tset \tsstream \tstack \tstdexcept \tstreambuf \tstring \tutility \tvalarray \tvector\n \n \n target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n target_builddir = ./${target_alias}/bits\n-target_headers = \\\n-\t${target_srcdir}/ctype_base.h \\\n-\t${target_srcdir}/ctype_inline.h \\\n-\t${target_srcdir}/ctype_noninline.h \\\n-\t${target_srcdir}/os_defines.h \\\n-\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n-\t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n+target_headers =  \t${target_srcdir}/ctype_base.h \t${target_srcdir}/ctype_inline.h \t${target_srcdir}/ctype_noninline.h \t${target_srcdir}/os_defines.h \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n \n # These extra_target_headers files are all built with ad hoc naming rules.\n-extra_target_headers = \\\n-\t${target_builddir}/basic_file.h \\\n-\t${target_builddir}/c++config.h \\\n-\t${target_builddir}/c++io.h \\\n-\t${target_builddir}/c++locale.h \\\n-\t${target_builddir}/messages_members.h \\\n-\t${target_builddir}/codecvt_specializations.h\n+extra_target_headers =  \t${target_builddir}/basic_file.h \t${target_builddir}/c++config.h \t${target_builddir}/c++io.h \t${target_builddir}/c++locale.h \t${target_builddir}/messages_members.h \t${target_builddir}/codecvt_specializations.h\n \n \n-thread_builddir = ./${target_alias}/bits\n-thread_headers = \\\n-\t${thread_builddir}/gthr.h \\\n-\t${thread_builddir}/gthr-single.h \\\n-\t${thread_builddir}/gthr-default.h\n+thread_target_headers =  \t${target_builddir}/gthr.h \t${target_builddir}/gthr-single.h \t${target_builddir}/gthr-default.h\n \n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n-\tstamp-target stamp-thread \n+allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \t${target_builddir}/stamp-target\n \n \n # Target includes for threads\n@@ -452,7 +226,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:\n@@ -548,7 +322,7 @@ mostlyclean distclean maintainer-clean\n \n \n # Here are the rules for building the headers\n-all-local: ${target_builddir}/c++config.h ${allstamps}\n+all-local: ${target_builddir}/c++config.h ${thread_target_headers} ${allstamps}\n \n # This rule is slightly different, in that we must change the name of the\n # local file from std_foo.h to foo.\n@@ -594,19 +368,14 @@ stamp-ext: ${ext_headers}\n \t(cd ${ext_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-ext\n \n-# This target is special.  The timestamp on a directory gets modified\n-# whenever a file it contains gets modified, and that'll throw off all the\n-# build dependencies that need this target.  On the other hand, someone\n-# could delete the directory and not the stamp file, faking out make.\n-${target_builddir}: stamp-${target_alias}\n stamp-${target_alias}:\n \t@if [ ! -d ${target_builddir} ]; then \\\n \t  mkdir -p ${target_builddir} ;\\\n \t  echo `date` > stamp-${target_alias} ;\\\n \tfi\n \n # Target includes static.\n-stamp-target: ${target_headers} ${target_builddir}\n+${target_builddir}/stamp-target: ${target_headers} stamp-${target_alias}\n \t@cd ${target_builddir} ;\\\n \tif [ ! -f stamp-target ]; then \\\n \t  @LN_S@ ${target_headers} . || true ;\\\n@@ -619,9 +388,9 @@ stamp-target: ${target_headers} ${target_builddir}\n \tfi\n \n # Target includes dynamic.\n-${target_builddir}/c++config.h: ../config.h \\\n+${target_builddir}/c++config.h: ${glibcpp_builddir}/config.h \\\n \t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n-\t\t\t\t${target_builddir}\n+\t\t\t\tstamp-${target_alias}\n \t@cat ${glibcpp_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCPP_HAVE_/g' \\\n \t    -e 's/PACKAGE/_GLIBCPP_PACKAGE/g' \\\n@@ -630,20 +399,19 @@ ${target_builddir}/c++config.h: ../config.h \\\n \t    < ${glibcpp_builddir}/config.h >> $@ ;\\\n \techo \"#endif // _CPP_CPPCONFIG_\" >>$@\n \n-stamp-thread: ${thread_headers} ${thread_builddir}\n-\t@echo `date` > stamp-thread\n-\n-${thread_builddir}/gthr.h:\n+${target_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${target_alias}\n \tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr.h > $@\n \n-${thread_builddir}/gthr-single.h:\n+${target_builddir}/gthr-single.h: ${toplevel_srcdir}/gcc/gthr-single.h \\\n+\t\t\t\t  stamp-${target_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-single.h > $@\n \n-${thread_builddir}/gthr-default.h:\n+${target_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n+\t\t\t\t   stamp-${target_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n@@ -670,11 +438,9 @@ install-data-local:\n \t  $(INSTALL_DATA) ${std_builddir}/$${file} \\\n \t    ${gxx_include_dir}/${std_builddir}; done\n \t$(INSTALL) -d ${gxx_include_dir}/${target_builddir}\n-\tfor file in ${target_headers} ${extra_target_headers}; do \\\n+\tfor file in ${target_headers} ${extra_target_headers} \\\n+\t ${thread_target_headers}; do \\\n \t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${target_builddir}; done\n-\t$(INSTALL) -d ${gxx_include_dir}/${thread_builddir}\n-\tfor file in ${thread_headers}; do \\\n-\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${thread_builddir}; done\n \n # By adding these files here, automake will remove them for 'make clean'\n #CLEANFILES = ${allstamps}"}]}