{"sha": "6cb7eb4173c70f3c09b13a3280b2bc22bd84de79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiN2ViNDE3M2M3MGYzYzA5YjEzYTMyODBiMmJjMjJiZDg0ZGU3OQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T19:22:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T19:22:04Z"}, "message": "config/sh: Use rtx_insn and rtx_code_label\n\ngcc/\n\t* config/sh/sh-protos.h (output_ieee_ccmpeq): Strengthen param 1\n\tfrom rtx to rtx_insn *.\n\t(output_branchy_insn): Likewise for param 3.\n\t(output_far_jump): Likewise for param 1.\n\t(final_prescan_insn): Likewise.\n\t(sh_insn_length_adjustment): Likewise for sole param.\n\n\t* config/sh/sh.c (expand_cbranchsi4): Likewise for local \"jump\".\n\t(expand_cbranchdi4): Strengthen local \"skip_label\" from rtx to\n\trtx_code_label *.\n\t(sh_emit_compare_and_set): Likewise for local \"lab\".\n\t(output_far_jump): Strengthen param \"insn\" and local \"prev\" from\n\trtx to rtx_insn *.\n\t(output_branchy_insn): Likewise for param \"insn\" and local\n\t\"next_insn\".\n\t(output_ieee_ccmpeq): Likewise for param \"insn\".\n\t(struct label_ref_list_d): Strengthen field \"label\" from rtx to\n\trtx_code_label *.\n\t(pool_node): Likewise.\n\t(pool_window_label): Likewise for this global.\n\t(add_constant): Likewise for return type and locals \"lab\", \"new_rtx\".\n\t(dump_table): Strengthen params \"start\", \"barrier\" and local\n\t\"scan\" from rtx to rtx_insn *.\n\t(broken_move): Likewise for param \"insn\".\n\t(untangle_mova): Likewise for params \"first_mova\" and \"new_mova\".\n\tStrengthen param \"first_mova\" from rtx * to rtx_insn **.\n\t(mova_p): Likewise for param \"insn\".\n\t(fixup_mova): Likewise for param \"mova\".\n\t(find_barrier): Likewise for return type, params \"mova\" and\n\t\"from\", and locals \"barrier_before_mova\", \"found_barrier\",\n\t\"good_barrier\", \"orig\", \"last_symoff\", \"next\".  Strengthen local\n\t\"label\" from rtx to rtx_code_label *.\n\t(sh_loop_align): Strengthen locals \"first\", \"insn\", \"mova\" from\n\trtx to rtx_insn *.\n\t(sh_reorg): Likewise for locals \"link\", \"scan\", \"barrier\".\n\t(split_branches): Likewise for param \"first\" and local \"insn\".\n\t(final_prescan_insn): Likewise for param \"insn\".\n\t(sequence_insn_p): Likewise for locals \"prev\", \"next\".\n\t(sh_insn_length_adjustment): Likewise for param \"insn\".\n\t(sh_can_redirect_branch): Likewise for local \"insn\".\n\t(find_r0_life_regions): Likewise for locals \"end\", \"insn\".\n\t(sh_output_mi_thunk): Likewise for local \"insns\".\n\nFrom-SVN: r214459", "tree": {"sha": "808c4ed701f065df0d091fa82c26aea80387471c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/808c4ed701f065df0d091fa82c26aea80387471c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bf8c00c6a12714a473cb8da367ebf1502e7d853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf8c00c6a12714a473cb8da367ebf1502e7d853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf8c00c6a12714a473cb8da367ebf1502e7d853"}], "stats": {"total": 154, "additions": 101, "deletions": 53}, "files": [{"sha": "b74ed8bd28067323d28e5be43301387b97d95437", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cb7eb4173c70f3c09b13a3280b2bc22bd84de79", "patch": "@@ -1,3 +1,48 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/sh/sh-protos.h (output_ieee_ccmpeq): Strengthen param 1\n+\tfrom rtx to rtx_insn *.\n+\t(output_branchy_insn): Likewise for param 3.\n+\t(output_far_jump): Likewise for param 1.\n+\t(final_prescan_insn): Likewise.\n+\t(sh_insn_length_adjustment): Likewise for sole param.\n+\n+\t* config/sh/sh.c (expand_cbranchsi4): Likewise for local \"jump\".\n+\t(expand_cbranchdi4): Strengthen local \"skip_label\" from rtx to\n+\trtx_code_label *.\n+\t(sh_emit_compare_and_set): Likewise for local \"lab\".\n+\t(output_far_jump): Strengthen param \"insn\" and local \"prev\" from\n+\trtx to rtx_insn *.\n+\t(output_branchy_insn): Likewise for param \"insn\" and local\n+\t\"next_insn\".\n+\t(output_ieee_ccmpeq): Likewise for param \"insn\".\n+\t(struct label_ref_list_d): Strengthen field \"label\" from rtx to\n+\trtx_code_label *.\n+\t(pool_node): Likewise.\n+\t(pool_window_label): Likewise for this global.\n+\t(add_constant): Likewise for return type and locals \"lab\", \"new_rtx\".\n+\t(dump_table): Strengthen params \"start\", \"barrier\" and local\n+\t\"scan\" from rtx to rtx_insn *.\n+\t(broken_move): Likewise for param \"insn\".\n+\t(untangle_mova): Likewise for params \"first_mova\" and \"new_mova\".\n+\tStrengthen param \"first_mova\" from rtx * to rtx_insn **.\n+\t(mova_p): Likewise for param \"insn\".\n+\t(fixup_mova): Likewise for param \"mova\".\n+\t(find_barrier): Likewise for return type, params \"mova\" and\n+\t\"from\", and locals \"barrier_before_mova\", \"found_barrier\",\n+\t\"good_barrier\", \"orig\", \"last_symoff\", \"next\".  Strengthen local\n+\t\"label\" from rtx to rtx_code_label *.\n+\t(sh_loop_align): Strengthen locals \"first\", \"insn\", \"mova\" from\n+\trtx to rtx_insn *.\n+\t(sh_reorg): Likewise for locals \"link\", \"scan\", \"barrier\".\n+\t(split_branches): Likewise for param \"first\" and local \"insn\".\n+\t(final_prescan_insn): Likewise for param \"insn\".\n+\t(sequence_insn_p): Likewise for locals \"prev\", \"next\".\n+\t(sh_insn_length_adjustment): Likewise for param \"insn\".\n+\t(sh_can_redirect_branch): Likewise for local \"insn\".\n+\t(find_r0_life_regions): Likewise for locals \"end\", \"insn\".\n+\t(sh_output_mi_thunk): Likewise for local \"insns\".\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/score/score.c (score_output_mi_thunk): Strengthen local"}, {"sha": "27717c5efbde4df7333103cd57a340357dcd5c54", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=6cb7eb4173c70f3c09b13a3280b2bc22bd84de79", "patch": "@@ -95,11 +95,12 @@ extern rtx sh_fsca_int2sf (void);\n /* Declare functions defined in sh.c and used in templates.  */\n \n extern const char *output_branch (int, rtx, rtx *);\n-extern const char *output_ieee_ccmpeq (rtx, rtx *);\n-extern const char *output_branchy_insn (enum rtx_code, const char *, rtx, rtx *);\n+extern const char *output_ieee_ccmpeq (rtx_insn *, rtx *);\n+extern const char *output_branchy_insn (enum rtx_code, const char *,\n+\t\t\t\t\trtx_insn *, rtx *);\n extern const char *output_movedouble (rtx, rtx[], enum machine_mode);\n extern const char *output_movepcrel (rtx, rtx[], enum machine_mode);\n-extern const char *output_far_jump (rtx, rtx);\n+extern const char *output_far_jump (rtx_insn *, rtx);\n \n extern rtx sfunc_uses_reg (rtx);\n extern int barrier_align (rtx);\n@@ -145,15 +146,15 @@ extern rtx gen_datalabel_ref (rtx);\n extern int regs_used (rtx, int);\n extern void fixup_addr_diff_vecs (rtx);\n extern int get_dest_uid (rtx, int);\n-extern void final_prescan_insn (rtx, rtx *, int);\n+extern void final_prescan_insn (rtx_insn *, rtx *, int);\n extern enum tls_model tls_symbolic_operand (rtx, enum machine_mode);\n extern bool system_reg_operand (rtx, enum machine_mode);\n extern bool reg_unused_after (rtx, rtx);\n extern void expand_sf_unop (rtx (*)(rtx, rtx, rtx), rtx *);\n extern void expand_sf_binop (rtx (*)(rtx, rtx, rtx, rtx), rtx *);\n extern void expand_df_unop (rtx (*)(rtx, rtx, rtx), rtx *);\n extern void expand_df_binop (rtx (*)(rtx, rtx, rtx, rtx), rtx *);\n-extern int sh_insn_length_adjustment (rtx);\n+extern int sh_insn_length_adjustment (rtx_insn *);\n extern bool sh_can_redirect_branch (rtx, rtx);\n extern void sh_expand_unop_v2sf (enum rtx_code, rtx, rtx);\n extern void sh_expand_binop_v2sf (enum rtx_code, rtx, rtx, rtx);"}, {"sha": "fecd4030bc81e34fda917dc68785c2d06f8c3b88", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 50, "deletions": 48, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6cb7eb4173c70f3c09b13a3280b2bc22bd84de79", "patch": "@@ -182,14 +182,14 @@ int assembler_dialect;\n \n static bool shmedia_space_reserved_for_target_registers;\n \n-static void split_branches (rtx);\n+static void split_branches (rtx_insn *);\n static int branch_dest (rtx);\n static void print_slot (rtx);\n-static rtx add_constant (rtx, enum machine_mode, rtx);\n-static void dump_table (rtx, rtx);\n-static bool broken_move (rtx);\n-static bool mova_p (rtx);\n-static rtx find_barrier (int, rtx, rtx);\n+static rtx_code_label *add_constant (rtx, enum machine_mode, rtx);\n+static void dump_table (rtx_insn *, rtx_insn *);\n+static bool broken_move (rtx_insn *);\n+static bool mova_p (rtx_insn *);\n+static rtx_insn *find_barrier (int, rtx_insn *, rtx_insn *);\n static bool noncall_uses_reg (rtx, rtx, rtx *);\n static rtx gen_block_redirect (rtx, int, int);\n static void sh_reorg (void);\n@@ -2031,7 +2031,7 @@ expand_cbranchsi4 (rtx *operands, enum rtx_code comparison, int probability)\n   emit_insn (gen_rtx_SET (VOIDmode, get_t_reg_rtx (),\n \t\t\t  gen_rtx_fmt_ee (comparison, SImode,\n \t\t\t\t\t  operands[1], operands[2])));\n-  rtx jump = emit_jump_insn (branch_expander (operands[3]));\n+  rtx_insn *jump = emit_jump_insn (branch_expander (operands[3]));\n   if (probability >= 0)\n     add_int_reg_note (jump, REG_BR_PROB, probability);\n }\n@@ -2057,7 +2057,7 @@ bool\n expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n {\n   enum rtx_code msw_taken, msw_skip, lsw_taken;\n-  rtx skip_label = NULL_RTX;\n+  rtx_code_label *skip_label = NULL;\n   rtx op1h, op1l, op2h, op2l;\n   int num_branches;\n   int prob, rev_prob;\n@@ -2495,7 +2495,7 @@ sh_emit_compare_and_set (rtx *operands, enum machine_mode mode)\n   enum rtx_code code = GET_CODE (operands[1]);\n   rtx op0 = operands[2];\n   rtx op1 = operands[3];\n-  rtx lab = NULL_RTX;\n+  rtx_code_label *lab = NULL;\n   bool invert = false;\n   rtx tem;\n \n@@ -2649,14 +2649,14 @@ print_slot (rtx insn)\n }\n \n const char *\n-output_far_jump (rtx insn, rtx op)\n+output_far_jump (rtx_insn *insn, rtx op)\n {\n   struct { rtx lab, reg, op; } this_jmp;\n   rtx braf_base_lab = NULL_RTX;\n   const char *jump;\n   int far;\n   int offset = branch_dest (insn) - INSN_ADDRESSES (INSN_UID (insn));\n-  rtx prev;\n+  rtx_insn *prev;\n \n   this_jmp.lab = gen_label_rtx ();\n \n@@ -2846,9 +2846,9 @@ output_branch (int logic, rtx insn, rtx *operands)\n    follow jmp and bt, if the address is in range.  */\n const char *\n output_branchy_insn (enum rtx_code code, const char *templ,\n-\t\t     rtx insn, rtx *operands)\n+\t\t     rtx_insn *insn, rtx *operands)\n {\n-  rtx next_insn = NEXT_INSN (insn);\n+  rtx_insn *next_insn = NEXT_INSN (insn);\n \n   if (next_insn && JUMP_P (next_insn) && condjump_p (next_insn))\n     {\n@@ -2886,7 +2886,7 @@ output_branchy_insn (enum rtx_code code, const char *templ,\n }\n \n const char *\n-output_ieee_ccmpeq (rtx insn, rtx *operands)\n+output_ieee_ccmpeq (rtx_insn *insn, rtx *operands)\n {\n   return output_branchy_insn (NE,      \"bt\t%l9\" \"\\n\"\n \t\t\t\t  \"\tfcmp/eq\t%1,%0\",\n@@ -4512,7 +4512,7 @@ static alloc_pool label_ref_list_pool;\n \n typedef struct label_ref_list_d\n {\n-  rtx label;\n+  rtx_code_label *label;\n   struct label_ref_list_d *next;\n } *label_ref_list_t;\n \n@@ -4572,7 +4572,7 @@ typedef struct label_ref_list_d\n typedef struct\n {\n   rtx value;\t\t\t/* Value in table.  */\n-  rtx label;\t\t\t/* Label of value.  */\n+  rtx_code_label *label;\t/* Label of value.  */\n   label_ref_list_t wend;\t/* End of window.  */\n   enum machine_mode mode;\t/* Mode of value.  */\n \n@@ -4588,7 +4588,7 @@ typedef struct\n #define MAX_POOL_SIZE 372\n static pool_node pool_vector[MAX_POOL_SIZE];\n static int pool_size;\n-static rtx pool_window_label;\n+static rtx_code_label *pool_window_label;\n static int pool_window_last;\n \n static int max_labelno_before_reorg;\n@@ -4604,11 +4604,11 @@ static int max_labelno_before_reorg;\n    necessary.  */\n \n /* Add a constant to the pool and return its label.  */\n-static rtx\n+static rtx_code_label *\n add_constant (rtx x, enum machine_mode mode, rtx last_value)\n {\n   int i;\n-  rtx lab, new_rtx;\n+  rtx_code_label *lab, *new_rtx;\n   label_ref_list_t ref, newref;\n \n   /* First see if we've already got it.  */\n@@ -4683,9 +4683,9 @@ add_constant (rtx x, enum machine_mode mode, rtx last_value)\n    these insns at a 4-byte  aligned position.  BARRIER is the barrier\n    after which we are to place the table.  */\n static void\n-dump_table (rtx start, rtx barrier)\n+dump_table (rtx_insn *start, rtx_insn *barrier)\n {\n-  rtx scan = barrier;\n+  rtx_insn *scan = barrier;\n   int i;\n   bool need_align = true;\n   rtx lab;\n@@ -4860,7 +4860,7 @@ dump_table (rtx start, rtx barrier)\n   scan = emit_insn_after (gen_consttable_end (), scan);\n   scan = emit_barrier_after (scan);\n   pool_size = 0;\n-  pool_window_label = NULL_RTX;\n+  pool_window_label = NULL;\n   pool_window_last = 0;\n }\n \n@@ -4872,7 +4872,7 @@ dump_table (rtx start, rtx barrier)\n    CONST_DOUBLE input value is CONST_OK_FOR_I08.  For a SFmode move, we don't\n    need to fix it if the input value is CONST_OK_FOR_I08.  */\n static bool\n-broken_move (rtx insn)\n+broken_move (rtx_insn *insn)\n {\n   if (NONJUMP_INSN_P (insn))\n     {\n@@ -4919,7 +4919,7 @@ broken_move (rtx insn)\n \n /* Return true if the specified insn is a mova insn.  */\n static bool\n-mova_p (rtx insn)\n+mova_p (rtx_insn *insn)\n {\n   return (NONJUMP_INSN_P (insn)\n \t  && GET_CODE (PATTERN (insn)) == SET\n@@ -4931,7 +4931,7 @@ mova_p (rtx insn)\n \n /* Fix up a mova from a switch that went out of range.  */\n static void\n-fixup_mova (rtx mova)\n+fixup_mova (rtx_insn *mova)\n {\n   PUT_MODE (XEXP (MOVA_LABELREF (mova), 0), QImode);\n   if (! flag_pic)\n@@ -4975,7 +4975,7 @@ fixup_mova (rtx mova)\n    return 0 if *first_mova was replaced, 1 if new_mova was replaced,\n    2 if new_mova has been assigned to *first_mova, -1 otherwise..  */\n static int\n-untangle_mova (int *num_mova, rtx *first_mova, rtx new_mova)\n+untangle_mova (int *num_mova, rtx_insn **first_mova, rtx_insn *new_mova)\n {\n   int n_addr = 0; /* Initialization to shut up spurious warning.  */\n   int f_target, n_target = 0; /* Likewise.  */\n@@ -5024,8 +5024,8 @@ untangle_mova (int *num_mova, rtx *first_mova, rtx new_mova)\n /* Find the last barrier from insn FROM which is close enough to hold the\n    constant pool.  If we can't find one, then create one near the end of\n    the range.  */\n-static rtx\n-find_barrier (int num_mova, rtx mova, rtx from)\n+static rtx_insn *\n+find_barrier (int num_mova, rtx_insn *mova, rtx_insn *from)\n {\n   int count_si = 0;\n   int count_hi = 0;\n@@ -5035,14 +5035,14 @@ find_barrier (int num_mova, rtx mova, rtx from)\n   int hi_align = 2;\n   int si_align = 2;\n   int leading_mova = num_mova;\n-  rtx barrier_before_mova = NULL_RTX;\n-  rtx found_barrier = NULL_RTX;\n-  rtx good_barrier = NULL_RTX;\n+  rtx_insn *barrier_before_mova = NULL;\n+  rtx_insn *found_barrier = NULL;\n+  rtx_insn *good_barrier = NULL;\n   int si_limit;\n   int hi_limit;\n-  rtx orig = from;\n+  rtx_insn *orig = from;\n   rtx last_got = NULL_RTX;\n-  rtx last_symoff = NULL_RTX;\n+  rtx_insn *last_symoff = NULL;\n \n   /* For HImode: range is 510, add 4 because pc counts from address of\n      second instruction after this one, subtract 2 for the jump instruction\n@@ -5102,7 +5102,7 @@ find_barrier (int num_mova, rtx mova, rtx from)\n \n       if (BARRIER_P (from))\n \t{\n-\t  rtx next;\n+\t  rtx_insn *next;\n \n \t  found_barrier = from;\n \n@@ -5297,7 +5297,7 @@ find_barrier (int num_mova, rtx mova, rtx from)\n     {\n       /* We didn't find a barrier in time to dump our stuff,\n \t so we'll make one.  */\n-      rtx label = gen_label_rtx ();\n+      rtx_code_label *label = gen_label_rtx ();\n \n       /* Don't emit a constant table in the middle of insns for\n \t casesi_worker_2.  This is a bit overkill but is enough\n@@ -5345,7 +5345,7 @@ find_barrier (int num_mova, rtx mova, rtx from)\n \t CALL_ARG_LOCATION note.  */\n       if (CALL_P (from))\n \t{\n-\t  rtx next = NEXT_INSN (from);\n+\t  rtx_insn *next = NEXT_INSN (from);\n \t  if (next && NOTE_P (next)\n \t      && NOTE_KIND (next) == NOTE_INSN_CALL_ARG_LOCATION)\n \t    from = next;\n@@ -5986,7 +5986,7 @@ sh_loop_align (rtx label)\n static void\n sh_reorg (void)\n {\n-  rtx first, insn, mova = NULL_RTX;\n+  rtx_insn *first, *insn, *mova = NULL;\n   int num_mova;\n   rtx r0_rtx = gen_rtx_REG (Pmode, 0);\n   rtx r0_inc_rtx = gen_rtx_POST_INC (Pmode, r0_rtx);\n@@ -6032,7 +6032,8 @@ sh_reorg (void)\n \n       for (insn = first; insn; insn = NEXT_INSN (insn))\n \t{\n-\t  rtx pattern, reg, link, set, scan, dies, label;\n+\t  rtx pattern, reg, set, dies, label;\n+\t  rtx_insn *link, *scan;\n \t  int rescan = 0, foundinsn = 0;\n \n \t  if (CALL_P (insn))\n@@ -6272,10 +6273,10 @@ sh_reorg (void)\n \t  || (NONJUMP_INSN_P (insn)\n \t      && recog_memoized (insn) == CODE_FOR_casesi_worker_2))\n \t{\n-\t  rtx scan;\n+\t  rtx_insn *scan;\n \t  /* Scan ahead looking for a barrier to stick the constant table\n \t     behind.  */\n-\t  rtx barrier = find_barrier (num_mova, mova, insn);\n+\t  rtx_insn *barrier = find_barrier (num_mova, mova, insn);\n \t  rtx last_float_move = NULL_RTX, last_float = 0, *last_float_addr = NULL;\n \t  int need_aligned_label = 0;\n \n@@ -6473,9 +6474,9 @@ get_dest_uid (rtx label, int max_uid)\n    newly created instructions into account.  It also allows us to\n    find branches with common targets more easily.  */\n static void\n-split_branches (rtx first)\n+split_branches (rtx_insn *first)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   struct far_branch **uid_branch, *far_branch_list = 0;\n   int max_uid = get_max_uid ();\n   int ok;\n@@ -6694,7 +6695,7 @@ split_branches (rtx first)\n    variable length.  This is because the second pass of shorten_branches\n    does not bother to update them.  */\n void\n-final_prescan_insn (rtx insn, rtx *opvec ATTRIBUTE_UNUSED,\n+final_prescan_insn (rtx_insn *insn, rtx *opvec ATTRIBUTE_UNUSED,\n \t\t    int noperands ATTRIBUTE_UNUSED)\n {\n   if (TARGET_DUMPISIZE)\n@@ -10148,7 +10149,7 @@ fpscr_set_from_mem (int mode, HARD_REG_SET regs_live)\n static bool\n sequence_insn_p (rtx insn)\n {\n-  rtx prev, next;\n+  rtx_insn *prev, *next;\n \n   prev = PREV_INSN (insn);\n   if (prev == NULL)\n@@ -10162,7 +10163,7 @@ sequence_insn_p (rtx insn)\n }\n \n int\n-sh_insn_length_adjustment (rtx insn)\n+sh_insn_length_adjustment (rtx_insn *insn)\n {\n   /* Instructions with unfilled delay slots take up an extra two bytes for\n      the nop in the delay slot.  */\n@@ -10736,7 +10737,7 @@ sh_can_redirect_branch (rtx branch1, rtx branch2)\n   if (flag_expensive_optimizations && simplejump_p (branch2))\n     {\n       rtx dest = XEXP (SET_SRC (single_set (branch2)), 0);\n-      rtx insn;\n+      rtx_insn *insn;\n       int distance;\n \n       for (distance = 0, insn = NEXT_INSN (branch1);\n@@ -11168,7 +11169,7 @@ ready_reorder (rtx *ready, int nready)\n static int\n find_r0_life_regions (basic_block b)\n {\n-  rtx end, insn;\n+  rtx_insn *end, *insn;\n   rtx pset;\n   rtx r0_reg;\n   int live;\n@@ -12367,7 +12368,8 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n {\n   CUMULATIVE_ARGS cum;\n   int structure_value_byref = 0;\n-  rtx this_rtx, this_value, sibcall, insns, funexp;\n+  rtx this_rtx, this_value, sibcall, funexp;\n+  rtx_insn *insns;\n   tree funtype = TREE_TYPE (function);\n   int simple_add = CONST_OK_FOR_ADD (delta);\n   int did_load = 0;"}]}