{"sha": "b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZmYjI1N2JkNmZlNmE0ZDAzOTM3YThjM2NlZTZmZjRkZmExMDAyYQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-01-31T10:01:48Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-01-31T10:01:48Z"}, "message": "[ARC] Add 'aux' variable attribute.\n\nThe 'aux' variable attribute is used to directly access the auxiliary\nregister space from C.\n\ngcc/\n2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * config/arc/arc.c (arc_handle_aux_attribute): New function.\n        (arc_attribute_table): Add 'aux' attribute.\n        (arc_in_small_data_p): Consider aux like variables.\n        (arc_is_aux_reg_p): New function.\n        (arc_asm_output_aligned_decl_local): Ignore 'aux' like variables.\n        (arc_get_aux_arg): New function.\n        (prepare_move_operands): Handle aux-register access.\n        (arc_handle_aux_attribute): New function.\n        * doc/extend.texi (ARC Variable attributes): Add subsection.\n\ntestsuite/\n2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * gcc.target/arc/taux-1.c: New test.\n        * gcc.target/arc/taux-2.c: Likewise.\n\nFrom-SVN: r257223", "tree": {"sha": "bca835ffb2dedd0cea39cc7f9e3cad176120387b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bca835ffb2dedd0cea39cc7f9e3cad176120387b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd"}], "stats": {"total": 242, "additions": 241, "deletions": 1}, "files": [{"sha": "db2c33536cee5e42d5e2b16bf0d31da9ed1f3eaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "patch": "@@ -1,3 +1,15 @@\n+2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_handle_aux_attribute): New function.\n+\t(arc_attribute_table): Add 'aux' attribute.\n+\t(arc_in_small_data_p): Consider aux like variables.\n+\t(arc_is_aux_reg_p): New function.\n+\t(arc_asm_output_aligned_decl_local): Ignore 'aux' like variables.\n+\t(arc_get_aux_arg): New function.\n+\t(prepare_move_operands): Handle aux-register access.\n+\t(arc_handle_aux_attribute): New function.\n+\t* doc/extend.texi (ARC Variable attributes): Add subsection.\n+\n 2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-protos.h (arc_is_uncached_mem_p): Function proto."}, {"sha": "843defd4cda3344251bda4b6f2cb2a0cc1c81550", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 158, "deletions": 1, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "patch": "@@ -228,6 +228,7 @@ static tree arc_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n static tree arc_handle_jli_attribute (tree *, tree, tree, int, bool *);\n static tree arc_handle_secure_attribute (tree *, tree, tree, int, bool *);\n static tree arc_handle_uncached_attribute (tree *, tree, tree, int, bool *);\n+static tree arc_handle_aux_attribute (tree *, tree, tree, int, bool *);\n \n /* Initialized arc_attribute_table to NULL since arc doesnot have any\n    machine specific supported attributes.  */\n@@ -264,6 +265,7 @@ const struct attribute_spec arc_attribute_table[] =\n    /* Bypass caches using .di flag.  */\n   { \"uncached\", 0, 0, false, true, false, false, arc_handle_uncached_attribute,\n     NULL },\n+  { \"aux\", 0, 1, true, false, false, false, arc_handle_aux_attribute, NULL },\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n static int arc_comp_type_attributes (const_tree, const_tree);\n@@ -8135,6 +8137,11 @@ arc_in_small_data_p (const_tree decl)\n   if (lookup_attribute (\"uncached\", attr))\n     return false;\n \n+  /* and for aux regs.  */\n+  attr = DECL_ATTRIBUTES (decl);\n+  if (lookup_attribute (\"aux\", attr))\n+    return false;\n+\n   if (DECL_SECTION_NAME (decl) != 0)\n     {\n       const char *name = DECL_SECTION_NAME (decl);\n@@ -8302,6 +8309,35 @@ compact_sda_memory_operand (rtx op, machine_mode mode, bool short_p)\n   return false;\n }\n \n+/* Return TRUE if PAT is accessing an aux-reg.  */\n+\n+static bool\n+arc_is_aux_reg_p (rtx pat)\n+{\n+  tree attrs = NULL_TREE;\n+  tree addr;\n+\n+  if (!MEM_P (pat))\n+    return false;\n+\n+  /* Get the memory attributes.  */\n+  addr = MEM_EXPR (pat);\n+  if (!addr)\n+    return false;\n+\n+  /* Get the attributes.  */\n+  if (TREE_CODE (addr) == VAR_DECL)\n+    attrs = DECL_ATTRIBUTES (addr);\n+  else if (TREE_CODE (addr) == MEM_REF)\n+    attrs = TYPE_ATTRIBUTES (TREE_TYPE (TREE_OPERAND (addr, 0)));\n+  else\n+    return false;\n+\n+  if (lookup_attribute (\"aux\", attrs))\n+    return true;\n+  return false;\n+}\n+\n /* Implement ASM_OUTPUT_ALIGNED_DECL_LOCAL.  */\n \n void\n@@ -8310,7 +8346,14 @@ arc_asm_output_aligned_decl_local (FILE * stream, tree decl, const char * name,\n \t\t\t\t   unsigned HOST_WIDE_INT align,\n \t\t\t\t   unsigned HOST_WIDE_INT globalize_p)\n {\n-  int in_small_data =   arc_in_small_data_p (decl);\n+  int in_small_data = arc_in_small_data_p (decl);\n+  rtx mem = decl == NULL_TREE ? NULL_RTX : DECL_RTL (decl);\n+\n+  /* Don't output aux-reg symbols.  */\n+  if (mem != NULL_RTX && MEM_P (mem)\n+      && SYMBOL_REF_P (XEXP (mem, 0))\n+      && arc_is_aux_reg_p (mem))\n+    return;\n \n   if (in_small_data)\n     switch_to_section (get_named_section (NULL, \".sbss\", 0));\n@@ -8650,12 +8693,80 @@ arc_expand_movmem (rtx *operands)\n   return true;\n }\n \n+static bool\n+arc_get_aux_arg (rtx pat, int *auxr)\n+{\n+  tree attr, addr = MEM_EXPR (pat);\n+  if (TREE_CODE (addr) != VAR_DECL)\n+    return false;\n+\n+  attr = DECL_ATTRIBUTES (addr);\n+  if (lookup_attribute (\"aux\", attr))\n+    {\n+      tree arg = TREE_VALUE (attr);\n+      if (arg)\n+\t{\n+\t  *auxr = TREE_INT_CST_LOW (TREE_VALUE (arg));\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n /* Prepare operands for move in MODE.  Return true iff the move has\n    been emitted.  */\n \n bool\n prepare_move_operands (rtx *operands, machine_mode mode)\n {\n+  /* First handle aux attribute.  */\n+  if (mode == SImode\n+      && (MEM_P (operands[0]) || MEM_P (operands[1])))\n+    {\n+      rtx tmp;\n+      int auxr = 0;\n+      if (MEM_P (operands[0]) && arc_is_aux_reg_p (operands[0]))\n+\t{\n+\t  /* Save operation.  */\n+\t  if (arc_get_aux_arg (operands[0], &auxr))\n+\t    {\n+\t      tmp = gen_reg_rtx (SImode);\n+\t      emit_move_insn (tmp, GEN_INT (auxr));\n+\t    }\n+\t  else\n+\t    {\n+\t      tmp = XEXP (operands[0], 0);\n+\t    }\n+\n+\t  operands[1] = force_reg (SImode, operands[1]);\n+\t  emit_insn (gen_rtx_UNSPEC_VOLATILE\n+\t\t     (VOIDmode, gen_rtvec (2, operands[1], tmp),\n+\t\t      VUNSPEC_ARC_SR));\n+\t  return true;\n+\t}\n+      if (MEM_P (operands[1]) && arc_is_aux_reg_p (operands[1]))\n+\t{\n+\t  if (arc_get_aux_arg (operands[1], &auxr))\n+\t    {\n+\t      tmp = gen_reg_rtx (SImode);\n+\t      emit_move_insn (tmp, GEN_INT (auxr));\n+\t    }\n+\t  else\n+\t    {\n+\t      tmp = XEXP (operands[1], 0);\n+\t      gcc_assert (GET_CODE (tmp) == SYMBOL_REF);\n+\t    }\n+\t  /* Load operation.  */\n+\t  gcc_assert (REG_P (operands[0]));\n+\t  emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t\t  gen_rtx_UNSPEC_VOLATILE\n+\t\t\t\t  (SImode, gen_rtvec (1, tmp),\n+\t\t\t\t   VUNSPEC_ARC_LR)));\n+\t  return true;\n+\t}\n+    }\n+\n   /* We used to do this only for MODE_INT Modes, but addresses to floating\n      point variables may well be in the small data section.  */\n   if (!TARGET_NO_SDATA_SET && small_data_pattern (operands[0], Pmode))\n@@ -11191,6 +11302,52 @@ arc_is_uncached_mem_p (rtx pat)\n   return false;\n }\n \n+/* Handle aux attribute.  The auxiliary registers are addressed using\n+   special instructions lr and sr.  The attribute 'aux' indicates if a\n+   variable refers to the aux-regs and what is the register number\n+   desired.  */\n+\n+static tree\n+arc_handle_aux_attribute (tree *node,\n+\t\t\t  tree name, tree args, int,\n+\t\t\t  bool *no_add_attrs)\n+{\n+  /* Isn't it better to use address spaces for the aux-regs?  */\n+  if (DECL_P (*node))\n+    {\n+      if (TREE_CODE (*node) != VAR_DECL)\n+\t{\n+\t  error (\"%qE attribute only applies to variables\",  name);\n+\t  *no_add_attrs = true;\n+\t}\n+      else if (args)\n+\t{\n+\t  if (TREE_CODE (TREE_VALUE (args)) == NON_LVALUE_EXPR)\n+\t    TREE_VALUE (args) = TREE_OPERAND (TREE_VALUE (args), 0);\n+\t  tree arg = TREE_VALUE (args);\n+\t  if (TREE_CODE (arg) != INTEGER_CST)\n+\t    {\n+\t      warning (0, \"%qE attribute allows only an integer \"\n+\t\t       \"constant argument\", name);\n+\t      *no_add_attrs = true;\n+\t    }\n+\t  /* FIXME! add range check.  TREE_INT_CST_LOW (arg) */\n+\t}\n+\n+      if (TREE_CODE (*node) == VAR_DECL)\n+\t{\n+\t  tree fntype = TREE_TYPE (*node);\n+\t  if (fntype && TREE_CODE (fntype) == POINTER_TYPE)\n+\t    {\n+\t      tree attrs = tree_cons (get_identifier (\"aux\"), NULL_TREE,\n+\t\t\t\t      TYPE_ATTRIBUTES (fntype));\n+\t      TYPE_ATTRIBUTES (fntype) = attrs;\n+\t    }\n+\t}\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Implement TARGET_USE_ANCHORS_FOR_SYMBOL_P.  We don't want to use\n    anchors for small data: the GP register acts as an anchor in that\n    case.  We also don't want to use them for PC-relative accesses,"}, {"sha": "cb9df971a5fa5bf87ee84a22345b3bba98a20222", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "patch": "@@ -5894,6 +5894,7 @@ attributes.\n \n @menu\n * Common Variable Attributes::\n+* ARC Variable Attributes::\n * AVR Variable Attributes::\n * Blackfin Variable Attributes::\n * H8/300 Variable Attributes::\n@@ -6267,6 +6268,18 @@ The @code{weak} attribute is described in\n \n @end table\n \n+@node ARC Variable Attributes\n+@subsection ARC Variable Attributes\n+\n+@table @code\n+@item aux\n+@cindex @code{aux} variable attribute, ARC\n+The @code{aux} attribute is used to directly access the ARC's\n+auxiliary register space from C.  The auxilirary register number is\n+given via attribute argument.\n+\n+@end table\n+\n @node AVR Variable Attributes\n @subsection AVR Variable Attributes\n "}, {"sha": "d6bca32809648a7528795167c5ff7b232e90ca2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "patch": "@@ -1,3 +1,8 @@\n+2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/taux-1.c: New test.\n+\t* gcc.target/arc/taux-2.c: Likewise.\n+\n 2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/uncached.c: New test."}, {"sha": "a2b77782192c5fc4bf9a4cc6daf6b5876e99377c", "filename": "gcc/testsuite/gcc.target/arc/taux-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftaux-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftaux-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftaux-1.c?ref=b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 */\n+\n+\n+#define __aux() __attribute__((aux))\n+\n+__aux() int *a_ptr;\n+extern __aux() int a_var;\n+\n+/* Generates:\n+   mov r0, @a_var\n+   sr  10,[r0]\n+*/\n+void foo (void)\n+{\n+  a_var = 10;\n+}\n+\n+/* Generates:\n+   mov r0, @a_ptr\n+   sr  a_var,[r0]\n+*/\n+void foo1 (void)\n+{\n+  a_ptr = &a_var;\n+}\n+\n+/* Generates:\n+   lr  %r1,[a_ptr]\n+   sr  10,[%r1]\n+*/\n+void foo2 (void)\n+{\n+  *a_ptr = 10;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sr\" 3 } } */\n+/* { dg-final { scan-assembler-times \"lr\" 1 } } */"}, {"sha": "5644bcd65c196b22de3c2da7a10790966d0289f8", "filename": "gcc/testsuite/gcc.target/arc/taux-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftaux-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftaux-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftaux-2.c?ref=b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 */\n+\n+#define __aux(r) __attribute__((aux(r)))\n+static volatile __aux(0x1000) int var;\n+\n+int foo (void)\n+{\n+  var++;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sr\" 1 } } */\n+/* { dg-final { scan-assembler-times \"lr\" 1 } } */\n+/* { dg-final { scan-assembler \"4096\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\.type\\tvar, @object\" } } */"}]}