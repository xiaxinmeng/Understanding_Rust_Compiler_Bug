{"sha": "288695f7a49e187d9c4e0dad6024aed227512477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg4Njk1ZjdhNDllMTg3ZDljNGUwZGFkNjAyNGFlZDIyNzUxMjQ3Nw==", "commit": {"author": {"name": "Daniel Kruegler", "email": "daniel.kruegler@gmail.com", "date": "2017-03-23T19:40:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-03-23T19:40:07Z"}, "message": "Implement P0607R0 \"Inline Variables for Standard Library\" for C++17\n\n2017-03-23  Daniel Kruegler  <daniel.kruegler@gmail.com>\n\n\t* include/bits/c++config (_GLIBCXX17_INLINE): Define.\n\t* include/bits/regex_constants.h (All std::regex_constants constants):\n\tAdd _GLIBCXX17_INLINE as per P0607R0.\n\t* include/bits/std_mutex.h (defer_lock, try_to_lock, adopt_lock):\n\tLikewise.\n\t* include/bits/stl_pair.h (piecewise_construct): Likewise.\n\t* include/bits/uses_allocator.h (allocator_arg, uses_allocator_v)\n\t(__is_uses_allocator_constructible_v)\n\t(__is_nothrow_uses_allocator_constructible_v): Likewise.\n\t* include/std/chrono (treat_as_floating_point_v): Likewise.\n\t* include/std/functional (is_bind_expression_v, is_placeholder_v):\n\tLikewise.\n\t* include/std/optional (nullopt): Likewise.\n\t* include/std/ratio (ratio_equal_v, ratio_not_equal_v, ratio_less_v)\n\tratio_less_equal_v, ratio_greater_v, ratio_greater_equal_v): Likewise.\n\t* include/std/system_error (is_error_code_enum_v)\n\t(is_error_condition_enum_v): Likewise.\n\t* include/std/tuple (tuple_size_v, ignore): Likewise.\n\t(ignore): Declare ignore constexpr as per LWG 2773, declare assignment\n\tconstexpr as per LWG 2933.\n\t* include/std/type_traits (All variable templates): Add\n\t_GLIBCXX17_INLINE as per P0607R0.\n\t* include/std/variant (variant_size_v, variant_npos, __index_of_v)\n\t(__tuple_count_v, __exactly_once): Likewise.\n\t* testsuite/18_support/headers/new/synopsis.cc\n\t(hardware_destructive_interference_size)\n\t(hardware_constructive_interference_size): Likewise for commented-out\n\tvariables.\n\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: Add new\n\ttest function for constexpr std::ignore (LWG 2773).\n\t* testsuite/20_util/tuple/creation_functions/constexpr_cpp14.cc: New\n\ttest for LWG 2933.\n\nFrom-SVN: r246423", "tree": {"sha": "f37058d2d2c0cfaa382bef52e2f14bddd6012d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f37058d2d2c0cfaa382bef52e2f14bddd6012d22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/288695f7a49e187d9c4e0dad6024aed227512477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288695f7a49e187d9c4e0dad6024aed227512477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/288695f7a49e187d9c4e0dad6024aed227512477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288695f7a49e187d9c4e0dad6024aed227512477/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "842562b4e1bdd7a7f98e6dcf352b86f96a4e0426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842562b4e1bdd7a7f98e6dcf352b86f96a4e0426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842562b4e1bdd7a7f98e6dcf352b86f96a4e0426"}], "stats": {"total": 381, "additions": 250, "deletions": 131}, "files": [{"sha": "b3e3fe2ba561b921de2f707fd9a537a2f48356bb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -1,3 +1,38 @@\n+2017-03-23  Daniel Kruegler  <daniel.kruegler@gmail.com>\n+\n+\t* include/bits/c++config (_GLIBCXX17_INLINE): Define.\n+\t* include/bits/regex_constants.h (All std::regex_constants constants):\n+\tAdd _GLIBCXX17_INLINE as per P0607R0.\n+\t* include/bits/std_mutex.h (defer_lock, try_to_lock, adopt_lock):\n+\tLikewise.\n+\t* include/bits/stl_pair.h (piecewise_construct): Likewise.\n+\t* include/bits/uses_allocator.h (allocator_arg, uses_allocator_v)\n+\t(__is_uses_allocator_constructible_v)\n+\t(__is_nothrow_uses_allocator_constructible_v): Likewise.\n+\t* include/std/chrono (treat_as_floating_point_v): Likewise.\n+\t* include/std/functional (is_bind_expression_v, is_placeholder_v):\n+\tLikewise.\n+\t* include/std/optional (nullopt): Likewise.\n+\t* include/std/ratio (ratio_equal_v, ratio_not_equal_v, ratio_less_v)\n+\tratio_less_equal_v, ratio_greater_v, ratio_greater_equal_v): Likewise.\n+\t* include/std/system_error (is_error_code_enum_v)\n+\t(is_error_condition_enum_v): Likewise.\n+\t* include/std/tuple (tuple_size_v, ignore): Likewise.\n+\t(ignore): Declare ignore constexpr as per LWG 2773, declare assignment\n+\tconstexpr as per LWG 2933.\n+\t* include/std/type_traits (All variable templates): Add\n+\t_GLIBCXX17_INLINE as per P0607R0.\n+\t* include/std/variant (variant_size_v, variant_npos, __index_of_v)\n+\t(__tuple_count_v, __exactly_once): Likewise.\n+\t* testsuite/18_support/headers/new/synopsis.cc\n+\t(hardware_destructive_interference_size)\n+\t(hardware_constructive_interference_size): Likewise for commented-out\n+\tvariables.\n+\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: Add new\n+\ttest function for constexpr std::ignore (LWG 2773).\n+\t* testsuite/20_util/tuple/creation_functions/constexpr_cpp14.cc: New\n+\ttest for LWG 2933.\n+\n 2017-03-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/shared_ptr.h (shared_ptr, weak_ptr): Add deduction"}, {"sha": "8ca6b0345b12a00261acf393e8ccad11a05a12da", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -122,6 +122,14 @@\n # endif\n #endif\n \n+#ifndef _GLIBCXX17_INLINE\n+# if __cplusplus > 201402L\n+#  define _GLIBCXX17_INLINE inline\n+# else\n+#  define _GLIBCXX17_INLINE\n+# endif\n+#endif\n+\n // Macro for noexcept, to support in mixed 03/0x mode.\n #ifndef _GLIBCXX_NOEXCEPT\n # if __cplusplus >= 201103L"}, {"sha": "dad2d637aa87355f68a1bd127a901898d389f8aa", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -84,15 +84,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Specifies that the matching of regular expressions against a character\n    * sequence shall be performed without regard to case.\n    */\n-  constexpr syntax_option_type icase =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type icase =\n     static_cast<syntax_option_type>(1 << _S_icase);\n \n   /**\n    * Specifies that when a regular expression is matched against a character\n    * container sequence, no sub-expression matches are to be stored in the\n    * supplied match_results structure.\n    */\n-  constexpr syntax_option_type nosubs =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type nosubs =\n     static_cast<syntax_option_type>(1 << _S_nosubs);\n \n   /**\n@@ -101,14 +101,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * speed with which regular expression objects are constructed. Otherwise\n    * it has no detectable effect on the program output.\n    */\n-  constexpr syntax_option_type optimize =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type optimize =\n     static_cast<syntax_option_type>(1 << _S_optimize);\n \n   /**\n    * Specifies that character ranges of the form [a-b] should be locale\n    * sensitive.\n    */\n-  constexpr syntax_option_type collate =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type collate =\n     static_cast<syntax_option_type>(1 << _S_collate);\n \n   /**\n@@ -119,7 +119,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * in the PERL scripting language but extended with elements found in the\n    * POSIX regular expression grammar.\n    */\n-  constexpr syntax_option_type ECMAScript =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type ECMAScript =\n     static_cast<syntax_option_type>(1 << _S_ECMAScript);\n \n   /**\n@@ -129,7 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Headers, Section 9, Regular Expressions [IEEE, Information Technology --\n    * Portable Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n    */\n-  constexpr syntax_option_type basic =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type basic =\n     static_cast<syntax_option_type>(1 << _S_basic);\n \n   /**\n@@ -138,7 +138,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Portable Operating System Interface (POSIX), Base Definitions and\n    * Headers, Section 9, Regular Expressions.\n    */\n-  constexpr syntax_option_type extended =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type extended =\n     static_cast<syntax_option_type>(1 << _S_extended);\n \n   /**\n@@ -149,7 +149,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * \\\\\\\\, \\\\a, \\\\b, \\\\f, \\\\n, \\\\r, \\\\t , \\\\v, \\\\&apos,, &apos,,\n    * and \\\\ddd (where ddd is one, two, or three octal digits).\n    */\n-  constexpr syntax_option_type awk =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type awk =\n     static_cast<syntax_option_type>(1 << _S_awk);\n \n   /**\n@@ -158,7 +158,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * identical to syntax_option_type basic, except that newlines are treated\n    * as whitespace.\n    */\n-  constexpr syntax_option_type grep =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type grep =\n     static_cast<syntax_option_type>(1 << _S_grep);\n \n   /**\n@@ -167,7 +167,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * IEEE Std 1003.1-2001.  This option is identical to syntax_option_type\n    * extended, except that newlines are treated as whitespace.\n    */\n-  constexpr syntax_option_type egrep =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type egrep =\n     static_cast<syntax_option_type>(1 << _S_egrep);\n \n   /**\n@@ -176,7 +176,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * If specified in a regex with back-references, the exception\n    * regex_constants::error_complexity will be thrown.\n    */\n-  constexpr syntax_option_type __polynomial =\n+  _GLIBCXX17_INLINE constexpr syntax_option_type __polynomial =\n     static_cast<syntax_option_type>(1 << _S_polynomial);\n \n   constexpr inline syntax_option_type\n@@ -257,63 +257,64 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    * The default matching rules.\n    */\n-  constexpr match_flag_type match_default = static_cast<match_flag_type>(0);\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_default =\n+    static_cast<match_flag_type>(0);\n \n   /**\n    * The first character in the sequence [first, last) is treated as though it\n    * is not at the beginning of a line, so the character (^) in the regular\n    * expression shall not match [first, first).\n    */\n-  constexpr match_flag_type match_not_bol =\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_not_bol =\n     static_cast<match_flag_type>(1 << _S_not_bol);\n \n   /**\n    * The last character in the sequence [first, last) is treated as though it\n    * is not at the end of a line, so the character ($) in the regular\n    * expression shall not match [last, last).\n    */\n-  constexpr match_flag_type match_not_eol =\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_not_eol =\n     static_cast<match_flag_type>(1 << _S_not_eol);\n \n   /**\n    * The expression \\\\b is not matched against the sub-sequence\n    * [first,first).\n    */\n-  constexpr match_flag_type match_not_bow =\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_not_bow =\n     static_cast<match_flag_type>(1 << _S_not_bow);\n \n   /**\n    * The expression \\\\b should not be matched against the sub-sequence\n    * [last,last).\n    */\n-  constexpr match_flag_type match_not_eow =\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_not_eow =\n     static_cast<match_flag_type>(1 << _S_not_eow);\n \n   /**\n    * If more than one match is possible then any match is an acceptable\n    * result.\n    */\n-  constexpr match_flag_type match_any =\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_any =\n     static_cast<match_flag_type>(1 << _S_any);\n \n   /**\n    * The expression does not match an empty sequence.\n    */\n-  constexpr match_flag_type match_not_null =\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_not_null =\n     static_cast<match_flag_type>(1 << _S_not_null);\n \n   /**\n    * The expression only matches a sub-sequence that begins at first .\n    */\n-  constexpr match_flag_type match_continuous =\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_continuous =\n     static_cast<match_flag_type>(1 << _S_continuous);\n \n   /**\n    * --first is a valid iterator position.  When this flag is set then the\n    * flags match_not_bol and match_not_bow are ignored by the regular\n    * expression algorithms 28.11 and iterators 28.12.\n    */\n-  constexpr match_flag_type match_prev_avail =\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_prev_avail =\n     static_cast<match_flag_type>(1 << _S_prev_avail);\n \n   /**\n@@ -342,30 +343,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *         undefined, use the empty string instead. If\n    *         nn > match_results::size(), the result is implementation-defined.\n    */\n-  constexpr match_flag_type format_default = static_cast<match_flag_type>(0);\n+  _GLIBCXX17_INLINE constexpr match_flag_type format_default =\n+    static_cast<match_flag_type>(0);\n \n   /**\n    * When a regular expression match is to be replaced by a new string, the\n    * new string is constructed using the rules used by the POSIX sed utility\n    * in IEEE Std 1003.1- 2001 [IEEE, Information Technology -- Portable\n    * Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n    */\n-  constexpr match_flag_type format_sed =\n+  _GLIBCXX17_INLINE constexpr match_flag_type format_sed =\n     static_cast<match_flag_type>(1 << _S_sed);\n \n   /**\n    * During a search and replace operation, sections of the character\n    * container sequence being searched that do not match the regular\n    * expression shall not be copied to the output string.\n    */\n-  constexpr match_flag_type format_no_copy =\n+  _GLIBCXX17_INLINE constexpr match_flag_type format_no_copy =\n     static_cast<match_flag_type>(1 << _S_no_copy);\n \n   /**\n    * When specified during a search and replace operation, only the first\n    * occurrence of the regular expression shall be replaced.\n    */\n-  constexpr match_flag_type format_first_only =\n+  _GLIBCXX17_INLINE constexpr match_flag_type format_first_only =\n     static_cast<match_flag_type>(1 << _S_first_only);\n \n   constexpr inline match_flag_type"}, {"sha": "17d55f5576405b9b2f0f86a05df00abdd691809d", "filename": "libstdc++-v3/include/bits/std_mutex.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -139,13 +139,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct adopt_lock_t { explicit adopt_lock_t() = default; };\n \n   /// Tag used to prevent a scoped lock from acquiring ownership of a mutex.\n-  constexpr defer_lock_t\tdefer_lock { };\n+  _GLIBCXX17_INLINE constexpr defer_lock_t\tdefer_lock { };\n \n   /// Tag used to prevent a scoped lock from blocking if a mutex is locked.\n-  constexpr try_to_lock_t\ttry_to_lock { };\n+  _GLIBCXX17_INLINE constexpr try_to_lock_t\ttry_to_lock { };\n \n   /// Tag used to make a scoped lock take ownership of a locked mutex.\n-  constexpr adopt_lock_t\tadopt_lock { };\n+  _GLIBCXX17_INLINE constexpr adopt_lock_t\tadopt_lock { };\n \n   /** @brief A simple scoped lock type.\n    *"}, {"sha": "7c7cee262a679bd5023f5dfc49c74af30bb58662", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -76,7 +76,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };\n \n   /// piecewise_construct\n-  constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();\n+  _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =\n+    piecewise_construct_t();\n \n   // Forward declarations.\n   template<typename...>"}, {"sha": "89d4e4356590f2bb9462a57e06c582ae2068f2c2", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -45,7 +45,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// [allocator.tag]\n   struct allocator_arg_t { explicit allocator_arg_t() = default; };\n \n-  constexpr allocator_arg_t allocator_arg = allocator_arg_t();\n+  _GLIBCXX17_INLINE constexpr allocator_arg_t allocator_arg =\n+    allocator_arg_t();\n \n   template<typename _Tp, typename _Alloc, typename = __void_t<>>\n     struct __uses_allocator_helper\n@@ -110,7 +111,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #if __cplusplus > 201402L\n   template <typename _Tp, typename _Alloc>\n-    constexpr bool uses_allocator_v = uses_allocator<_Tp, _Alloc>::value;\n+    inline constexpr bool uses_allocator_v =\n+      uses_allocator<_Tp, _Alloc>::value;\n #endif // C++17\n \n   template<template<typename...> class _Predicate,\n@@ -128,7 +130,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201402L\n   template<typename _Tp, typename _Alloc, typename... _Args>\n-    constexpr bool __is_uses_allocator_constructible_v =\n+    _GLIBCXX17_INLINE constexpr bool __is_uses_allocator_constructible_v =\n       __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;\n #endif // C++14\n \n@@ -141,7 +143,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201402L\n   template<typename _Tp, typename _Alloc, typename... _Args>\n-    constexpr bool __is_nothrow_uses_allocator_constructible_v =\n+    _GLIBCXX17_INLINE constexpr bool\n+    __is_nothrow_uses_allocator_constructible_v =\n       __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;\n #endif // C++14\n "}, {"sha": "c3a6ba8f873e7c310997582152844fa848d65e40", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -211,7 +211,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #if __cplusplus > 201402L\n     template <typename _Rep>\n-      constexpr bool treat_as_floating_point_v =\n+      inline constexpr bool treat_as_floating_point_v =\n         treat_as_floating_point<_Rep>::value;\n #endif // C++17\n "}, {"sha": "06612537c43a715546de43d0e7a2defd2c095f6c", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -242,9 +242,9 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     { };\n \n #if __cplusplus > 201402L\n-  template <typename _Tp> constexpr bool is_bind_expression_v\n+  template <typename _Tp> inline constexpr bool is_bind_expression_v\n     = is_bind_expression<_Tp>::value;\n-  template <typename _Tp> constexpr int is_placeholder_v\n+  template <typename _Tp> inline constexpr int is_placeholder_v\n     = is_placeholder<_Tp>::value;\n #endif // C++17\n "}, {"sha": "24802bf9e2394c1ae99303b00d24c101334f06d9", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -69,7 +69,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n   /// Tag to disengage optional objects.\n-  constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };\n+  inline constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };\n \n   /**\n    *  @brief Exception class thrown when a disengaged optional object is"}, {"sha": "421f6a874b9231e2f9cb686c936eaf7097244f71", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -403,17 +403,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201402L\n   template <typename _R1, typename _R2>\n-    constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;\n+    inline constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;\n   template <typename _R1, typename _R2>\n-    constexpr bool ratio_not_equal_v = ratio_not_equal<_R1, _R2>::value;\n+    inline constexpr bool ratio_not_equal_v = ratio_not_equal<_R1, _R2>::value;\n   template <typename _R1, typename _R2>\n-    constexpr bool ratio_less_v = ratio_less<_R1, _R2>::value;\n+    inline constexpr bool ratio_less_v = ratio_less<_R1, _R2>::value;\n   template <typename _R1, typename _R2>\n-    constexpr bool ratio_less_equal_v = ratio_less_equal<_R1, _R2>::value;\n+    inline constexpr bool ratio_less_equal_v =\n+      ratio_less_equal<_R1, _R2>::value;\n   template <typename _R1, typename _R2>\n-    constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;\n+    inline constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;\n   template <typename _R1, typename _R2>\n-    constexpr bool ratio_greater_equal_v\n+    inline constexpr bool ratio_greater_equal_v\n     = ratio_greater_equal<_R1, _R2>::value;\n #endif // C++17\n "}, {"sha": "6775a6ea757e2b13a9670dd09114b49bdb751176", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -62,9 +62,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201402L\n   template <typename _Tp>\n-    constexpr bool is_error_code_enum_v = is_error_code_enum<_Tp>::value;\n+    inline constexpr bool is_error_code_enum_v =\n+      is_error_code_enum<_Tp>::value;\n   template <typename _Tp>\n-    constexpr bool is_error_condition_enum_v =\n+    inline constexpr bool is_error_condition_enum_v =\n       is_error_condition_enum<_Tp>::value;\n #endif // C++17\n   inline namespace _V2 {"}, {"sha": "1f5365ad02681ca7babc6b68dcea2cbfa63bcb47", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -1268,7 +1268,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201402L\n   template <typename _Tp>\n-    constexpr size_t tuple_size_v = tuple_size<_Tp>::value;\n+    inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;\n #endif\n \n   /**\n@@ -1610,16 +1610,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   // A class (and instance) which can be used in 'tie' when an element\n-  // of a tuple is not required\n+  // of a tuple is not required.\n+  // _GLIBCXX14_CONSTEXPR\n+  // 2933. PR for LWG 2773 could be clearer\n   struct _Swallow_assign\n   {\n     template<class _Tp>\n-      const _Swallow_assign&\n+      _GLIBCXX14_CONSTEXPR const _Swallow_assign&\n       operator=(const _Tp&) const\n       { return *this; }\n   };\n \n-  const _Swallow_assign ignore{};\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2773. Making std::ignore constexpr\n+  _GLIBCXX17_INLINE constexpr _Swallow_assign ignore{};\n \n   /// Partial specialization for tuples\n   template<typename... _Types, typename _Alloc>"}, {"sha": "6707caaefc556ed1056ef89ae9e31b410ba35b79", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 81, "deletions": 72, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -174,15 +174,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   template<typename... _Bn>\n-    constexpr bool conjunction_v\n+    inline constexpr bool conjunction_v\n     = conjunction<_Bn...>::value;\n \n   template<typename... _Bn>\n-    constexpr bool disjunction_v\n+    inline constexpr bool disjunction_v\n     = disjunction<_Bn...>::value;\n \n   template<typename _Pp>\n-    constexpr bool negation_v\n+    inline constexpr bool negation_v\n     = negation<_Pp>::value;\n \n #endif\n@@ -2656,11 +2656,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201402L\n   /// is_swappable_v\n   template<typename _Tp>\n-    constexpr bool is_swappable_v = is_swappable<_Tp>::value;\n+    _GLIBCXX17_INLINE constexpr bool is_swappable_v =\n+      is_swappable<_Tp>::value;\n \n   /// is_nothrow_swappable_v\n   template<typename _Tp>\n-    constexpr bool is_nothrow_swappable_v = is_nothrow_swappable<_Tp>::value;\n+    _GLIBCXX17_INLINE constexpr bool is_nothrow_swappable_v =\n+      is_nothrow_swappable<_Tp>::value;\n #endif // __cplusplus >= 201402L\n \n   namespace __swappable_with_details {\n@@ -2738,11 +2740,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201402L\n   /// is_swappable_with_v\n   template<typename _Tp, typename _Up>\n-    constexpr bool is_swappable_with_v = is_swappable_with<_Tp, _Up>::value;\n+    _GLIBCXX17_INLINE constexpr bool is_swappable_with_v =\n+      is_swappable_with<_Tp, _Up>::value;\n \n   /// is_nothrow_swappable_with_v\n   template<typename _Tp, typename _Up>\n-    constexpr bool is_nothrow_swappable_with_v =\n+    _GLIBCXX17_INLINE constexpr bool is_nothrow_swappable_with_v =\n       is_nothrow_swappable_with<_Tp, _Up>::value;\n #endif // __cplusplus >= 201402L\n \n@@ -2884,155 +2887,161 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus > 201402L\n # define __cpp_lib_type_trait_variable_templates 201510L\n template <typename _Tp>\n-  constexpr bool is_void_v = is_void<_Tp>::value;\n+  inline constexpr bool is_void_v = is_void<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_null_pointer_v = is_null_pointer<_Tp>::value;\n+  inline constexpr bool is_null_pointer_v = is_null_pointer<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_integral_v = is_integral<_Tp>::value;\n+  inline constexpr bool is_integral_v = is_integral<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_floating_point_v = is_floating_point<_Tp>::value;\n+  inline constexpr bool is_floating_point_v = is_floating_point<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_array_v = is_array<_Tp>::value;\n+  inline constexpr bool is_array_v = is_array<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_pointer_v = is_pointer<_Tp>::value;\n+  inline constexpr bool is_pointer_v = is_pointer<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Tp>::value;\n+  inline constexpr bool is_lvalue_reference_v =\n+    is_lvalue_reference<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Tp>::value;\n+  inline constexpr bool is_rvalue_reference_v =\n+    is_rvalue_reference<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_member_object_pointer_v =\n+  inline constexpr bool is_member_object_pointer_v =\n     is_member_object_pointer<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_member_function_pointer_v =\n+  inline constexpr bool is_member_function_pointer_v =\n     is_member_function_pointer<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_enum_v = is_enum<_Tp>::value;\n+  inline constexpr bool is_enum_v = is_enum<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_union_v = is_union<_Tp>::value;\n+  inline constexpr bool is_union_v = is_union<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_class_v = is_class<_Tp>::value;\n+  inline constexpr bool is_class_v = is_class<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_function_v = is_function<_Tp>::value;\n+  inline constexpr bool is_function_v = is_function<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_reference_v = is_reference<_Tp>::value;\n+  inline constexpr bool is_reference_v = is_reference<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_arithmetic_v = is_arithmetic<_Tp>::value;\n+  inline constexpr bool is_arithmetic_v = is_arithmetic<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_fundamental_v = is_fundamental<_Tp>::value;\n+  inline constexpr bool is_fundamental_v = is_fundamental<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_object_v = is_object<_Tp>::value;\n+  inline constexpr bool is_object_v = is_object<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_scalar_v = is_scalar<_Tp>::value;\n+  inline constexpr bool is_scalar_v = is_scalar<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_compound_v = is_compound<_Tp>::value;\n+  inline constexpr bool is_compound_v = is_compound<_Tp>::value;\n template <typename _Tp>\n- constexpr bool is_member_pointer_v = is_member_pointer<_Tp>::value;\n+  inline constexpr bool is_member_pointer_v = is_member_pointer<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_const_v = is_const<_Tp>::value;\n+  inline constexpr bool is_const_v = is_const<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_volatile_v = is_volatile<_Tp>::value;\n+  inline constexpr bool is_volatile_v = is_volatile<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_trivial_v = is_trivial<_Tp>::value;\n+  inline constexpr bool is_trivial_v = is_trivial<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_trivially_copyable_v = is_trivially_copyable<_Tp>::value;\n+  inline constexpr bool is_trivially_copyable_v =\n+    is_trivially_copyable<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_standard_layout_v = is_standard_layout<_Tp>::value;\n+  inline constexpr bool is_standard_layout_v = is_standard_layout<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_pod_v = is_pod<_Tp>::value;\n+  inline constexpr bool is_pod_v = is_pod<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_literal_type_v = is_literal_type<_Tp>::value;\n+  inline constexpr bool is_literal_type_v = is_literal_type<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_empty_v = is_empty<_Tp>::value;\n+  inline constexpr bool is_empty_v = is_empty<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_polymorphic_v = is_polymorphic<_Tp>::value;\n+  inline constexpr bool is_polymorphic_v = is_polymorphic<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_abstract_v = is_abstract<_Tp>::value;\n+  inline constexpr bool is_abstract_v = is_abstract<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_final_v = is_final<_Tp>::value;\n+  inline constexpr bool is_final_v = is_final<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_signed_v = is_signed<_Tp>::value;\n+  inline constexpr bool is_signed_v = is_signed<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_unsigned_v = is_unsigned<_Tp>::value;\n+  inline constexpr bool is_unsigned_v = is_unsigned<_Tp>::value;\n template <typename _Tp, typename... _Args>\n-  constexpr bool is_constructible_v = is_constructible<_Tp, _Args...>::value;\n+  inline constexpr bool is_constructible_v =\n+    is_constructible<_Tp, _Args...>::value;\n template <typename _Tp>\n-  constexpr bool is_default_constructible_v =\n+  inline constexpr bool is_default_constructible_v =\n     is_default_constructible<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_copy_constructible_v = is_copy_constructible<_Tp>::value;\n+  inline constexpr bool is_copy_constructible_v =\n+    is_copy_constructible<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_move_constructible_v = is_move_constructible<_Tp>::value;\n+  inline constexpr bool is_move_constructible_v =\n+    is_move_constructible<_Tp>::value;\n template <typename _Tp, typename _Up>\n-  constexpr bool is_assignable_v = is_assignable<_Tp, _Up>::value;\n+  inline constexpr bool is_assignable_v = is_assignable<_Tp, _Up>::value;\n template <typename _Tp>\n-  constexpr bool is_copy_assignable_v = is_copy_assignable<_Tp>::value;\n+  inline constexpr bool is_copy_assignable_v = is_copy_assignable<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_move_assignable_v = is_move_assignable<_Tp>::value;\n+  inline constexpr bool is_move_assignable_v = is_move_assignable<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_destructible_v = is_destructible<_Tp>::value;\n+  inline constexpr bool is_destructible_v = is_destructible<_Tp>::value;\n template <typename _Tp, typename... _Args>\n-  constexpr bool is_trivially_constructible_v =\n+  inline constexpr bool is_trivially_constructible_v =\n     is_trivially_constructible<_Tp, _Args...>::value;\n template <typename _Tp>\n-  constexpr bool is_trivially_default_constructible_v =\n+  inline constexpr bool is_trivially_default_constructible_v =\n     is_trivially_default_constructible<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_trivially_copy_constructible_v =\n+  inline constexpr bool is_trivially_copy_constructible_v =\n     is_trivially_copy_constructible<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_trivially_move_constructible_v =\n+  inline constexpr bool is_trivially_move_constructible_v =\n     is_trivially_move_constructible<_Tp>::value;\n template <typename _Tp, typename _Up>\n-  constexpr bool is_trivially_assignable_v =\n+  inline constexpr bool is_trivially_assignable_v =\n     is_trivially_assignable<_Tp, _Up>::value;\n template <typename _Tp>\n-  constexpr bool is_trivially_copy_assignable_v =\n+  inline constexpr bool is_trivially_copy_assignable_v =\n     is_trivially_copy_assignable<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_trivially_move_assignable_v =\n+  inline constexpr bool is_trivially_move_assignable_v =\n     is_trivially_move_assignable<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_trivially_destructible_v =\n+  inline constexpr bool is_trivially_destructible_v =\n     is_trivially_destructible<_Tp>::value;\n template <typename _Tp, typename... _Args>\n-  constexpr bool is_nothrow_constructible_v =\n+  inline constexpr bool is_nothrow_constructible_v =\n     is_nothrow_constructible<_Tp, _Args...>::value;\n template <typename _Tp>\n-  constexpr bool is_nothrow_default_constructible_v =\n+  inline constexpr bool is_nothrow_default_constructible_v =\n     is_nothrow_default_constructible<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_nothrow_copy_constructible_v =\n+  inline constexpr bool is_nothrow_copy_constructible_v =\n     is_nothrow_copy_constructible<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_nothrow_move_constructible_v =\n+  inline constexpr bool is_nothrow_move_constructible_v =\n     is_nothrow_move_constructible<_Tp>::value;\n template <typename _Tp, typename _Up>\n-  constexpr bool is_nothrow_assignable_v =\n+  inline constexpr bool is_nothrow_assignable_v =\n     is_nothrow_assignable<_Tp, _Up>::value;\n template <typename _Tp>\n-  constexpr bool is_nothrow_copy_assignable_v =\n+  inline constexpr bool is_nothrow_copy_assignable_v =\n     is_nothrow_copy_assignable<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_nothrow_move_assignable_v =\n+  inline constexpr bool is_nothrow_move_assignable_v =\n     is_nothrow_move_assignable<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool is_nothrow_destructible_v =\n+  inline constexpr bool is_nothrow_destructible_v =\n     is_nothrow_destructible<_Tp>::value;\n template <typename _Tp>\n-  constexpr bool has_virtual_destructor_v =\n+  inline constexpr bool has_virtual_destructor_v =\n     has_virtual_destructor<_Tp>::value;\n template <typename _Tp>\n-  constexpr size_t alignment_of_v = alignment_of<_Tp>::value;\n+  inline constexpr size_t alignment_of_v = alignment_of<_Tp>::value;\n template <typename _Tp>\n-  constexpr size_t rank_v = rank<_Tp>::value;\n+  inline constexpr size_t rank_v = rank<_Tp>::value;\n template <typename _Tp, unsigned _Idx = 0>\n-  constexpr size_t extent_v = extent<_Tp, _Idx>::value;\n+  inline constexpr size_t extent_v = extent<_Tp, _Idx>::value;\n template <typename _Tp, typename _Up>\n-  constexpr bool is_same_v = is_same<_Tp, _Up>::value;\n+  inline constexpr bool is_same_v = is_same<_Tp, _Up>::value;\n template <typename _Base, typename _Derived>\n-  constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;\n+  inline constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;\n template <typename _From, typename _To>\n-  constexpr bool is_convertible_v = is_convertible<_From, _To>::value;\n+  inline constexpr bool is_convertible_v = is_convertible<_From, _To>::value;\n \n #ifdef __has_builtin\n # if !__has_builtin(__has_unique_object_representations)"}, {"sha": "272b2a6f6d29c5d74c30c1c1cdcab2cae26d3518", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -91,7 +91,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : std::integral_constant<size_t, sizeof...(_Types)> {};\n \n   template<typename _Variant>\n-    constexpr size_t variant_size_v = variant_size<_Variant>::value;\n+    inline constexpr size_t variant_size_v = variant_size<_Variant>::value;\n \n   template<size_t _Np, typename _Variant>\n     struct variant_alternative;\n@@ -120,7 +120,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct variant_alternative<_Np, const volatile _Variant>\n     { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };\n \n-  constexpr size_t variant_npos = -1;\n+  inline constexpr size_t variant_npos = -1;\n \n   template<size_t _Np, typename... _Types>\n     constexpr variant_alternative_t<_Np, variant<_Types...>>&\n@@ -151,7 +151,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __index_of : std::integral_constant<size_t, 0> {};\n \n   template<typename _Tp, typename... _Types>\n-    constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;\n+    inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;\n \n   template<typename _Tp, typename _First, typename... _Rest>\n     struct __index_of<_Tp, _First, _Rest...> :\n@@ -510,7 +510,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __tuple_count;\n \n   template<typename _Tp, typename _Tuple>\n-    constexpr size_t __tuple_count_v = __tuple_count<_Tp, _Tuple>::value;\n+    inline constexpr size_t __tuple_count_v =\n+      __tuple_count<_Tp, _Tuple>::value;\n \n   template<typename _Tp, typename... _Types>\n     struct __tuple_count<_Tp, tuple<_Types...>>\n@@ -524,7 +525,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // TODO: Reuse this in <tuple> ?\n   template<typename _Tp, typename... _Types>\n-    constexpr bool __exactly_once = __tuple_count_v<_Tp, tuple<_Types...>> == 1;\n+    inline constexpr bool __exactly_once =\n+      __tuple_count_v<_Tp, tuple<_Types...>> == 1;\n \n   // Takes _Types and create an overloaded _S_fun for each type.\n   // If a type appears more than once in _Types, create only one overload."}, {"sha": "66ea3cc178279bfbbc66675a06568cd3e52760bb", "filename": "libstdc++-v3/testsuite/18_support/headers/new/synopsis.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -30,8 +30,10 @@ namespace std {\n \n #if __cplusplus > 201402L\n   enum class align_val_t : size_t;\n-  // static constexpr size_t hardware_destructive_interference_size;\n-  // static constexpr size_t hardware_constructive_interference_size;\n+  // _GLIBCXX17_INLINE constexpr size_t\n+  //    hardware_destructive_interference_size;\n+  // _GLIBCXX17_INLINE constexpr size_t\n+  //    hardware_constructive_interference_size;\n #endif\n }\n "}, {"sha": "e200a7a3ace25fa195c948a14e8d81ca8aa81e9d", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/ops_overflow_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -41,7 +41,7 @@ test02()\n // { dg-error \"required from here\" \"\" { target *-*-* } 28 }\n // { dg-error \"expected initializer\" \"\" { target *-*-* } 35 }\n // { dg-error \"expected initializer\" \"\" { target *-*-* } 37 }\n-// { dg-error \"overflow in addition\" \"\" { target *-*-* } 451 }\n+// { dg-error \"overflow in addition\" \"\" { target *-*-* } 452 }\n // { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 97 }\n // { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 99 }\n // { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 101 }"}, {"sha": "9181d611b8a69b16773fa47216c588feb40faa0a", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -46,5 +46,5 @@ test01()\n   scoped_alloc sa;\n   auto p = sa.allocate(1);\n   sa.construct(p);  // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }\n+  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 90 }\n }"}, {"sha": "ae3ca935a2267c2e25e5dfe4f650aa006b00906c", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/constexpr.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -118,6 +118,25 @@ test_tuple_cat()\n   constexpr auto cat1 __attribute__((unused)) = std::tuple_cat(t1, t2);\n }\n \n+namespace {\n+\n+template<class T>\n+constexpr int zero_from_anything(T)\n+{\n+  return 0;\n+}\n+\n+}\n+\n+// ignore, see LWG 2773\n+void\n+test_ignore()\n+{\n+  constexpr auto ign1 __attribute__((unused)) = std::ignore;\n+  constexpr auto ign2 __attribute__((unused)) = std::make_tuple(std::ignore);\n+  constexpr int ign3 __attribute__((unused)) = zero_from_anything(std::ignore);\n+}\n+\n int\n main()\n {\n@@ -126,6 +145,7 @@ main()\n   test_tie();\n   test_get();\n   test_tuple_cat();\n+  test_ignore();\n \n   return 0;\n }"}, {"sha": "18124ce67fc73c74a43a323fa92a7f72c8728a5c", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/constexpr_cpp14.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr_cpp14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr_cpp14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr_cpp14.cc?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile { target c++14 } }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+// ignore, see LWG 2773 + LWG 2933.\n+constexpr bool\n+test_ignore()\n+{\n+  auto res = std::tie(std::ignore);\n+  std::get<0>(res) = 42;\n+  return true;\n+}\n+\n+static_assert(test_ignore(), \"test_ignore failure\");"}, {"sha": "aa118ca233578e78fadca6f386ee3bce91485c7b", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -44,5 +44,5 @@ test01()\n {\n   alloc_type a;\n   std::tuple<X> t(std::allocator_arg, a); // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }\n+  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 90 }\n }"}, {"sha": "f7476365e3c33239d963381bda95a0583c997d1c", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288695f7a49e187d9c4e0dad6024aed227512477/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=288695f7a49e187d9c4e0dad6024aed227512477", "patch": "@@ -43,4 +43,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 90 }"}]}