{"sha": "bd80bd9b93b62fa5388caac9e7adf33c05de52be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ4MGJkOWI5M2I2MmZhNTM4OGNhYWM5ZTdhZGYzM2MwNWRlNTJiZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-11-02T19:00:19Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-11-02T19:00:19Z"}, "message": "re PR libstdc++/17922 (Spurious warnings about std::ios_base::seekdir)\n\n\n2004-11-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/17922\n\t* include/bits/ios_base.h : Add enum values.\n\t* testsuite/testsuite_hooks.h (bitmask_operators): Add function.\n\t* testsuite/27_io/ios_base/types/fmtflags/bitmask_operators.cc: New.\n\t* testsuite/27_io/ios_base/types/fmtflags/case_label.cc: New.\n\t* testsuite/27_io/ios_base/types/iostate/bitmask_operators.cc: New.\n\t* testsuite/27_io/ios_base/types/iostate/case_label.cc: New.\n\t* testsuite/27_io/ios_base/types/openmode/bitmask_operators.cc: New.\n\t* testsuite/27_io/ios_base/types/openmode/case_label.cc: New.\n\t* testsuite/27_io/ios_base/types/seekdir/case_label.cc: New.\n\n\t* config/io/c_io_stdio.h (__ios_flags): Mark deprecated.\n\t* src/ios.cc: Same.\n\n\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n\nFrom-SVN: r89996", "tree": {"sha": "291d7501d58b2bd1a78e7849359d0947d6a799b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/291d7501d58b2bd1a78e7849359d0947d6a799b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd80bd9b93b62fa5388caac9e7adf33c05de52be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd80bd9b93b62fa5388caac9e7adf33c05de52be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd80bd9b93b62fa5388caac9e7adf33c05de52be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd80bd9b93b62fa5388caac9e7adf33c05de52be/comments", "author": null, "committer": null, "parents": [{"sha": "75473b0257a7c6c60c46bfd329b070529a12c03c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75473b0257a7c6c60c46bfd329b070529a12c03c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75473b0257a7c6c60c46bfd329b070529a12c03c"}], "stats": {"total": 488, "additions": 470, "deletions": 18}, "files": [{"sha": "0b0545302f5b273dc6b686845ce594a984df2378", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -1,3 +1,22 @@\n+2004-11-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/17922\n+\t* include/bits/ios_base.h : Add enum values.\n+\t* testsuite/testsuite_hooks.h (bitmask_operators): Add function.\n+\t* testsuite/27_io/ios_base/types/fmtflags/bitmask_operators.cc: New.\n+\t* testsuite/27_io/ios_base/types/fmtflags/case_label.cc: New.\n+\t* testsuite/27_io/ios_base/types/iostate/bitmask_operators.cc: New.\n+\t* testsuite/27_io/ios_base/types/iostate/case_label.cc: New.\n+\t* testsuite/27_io/ios_base/types/openmode/bitmask_operators.cc: New.\n+\t* testsuite/27_io/ios_base/types/openmode/case_label.cc: New.\n+\t* testsuite/27_io/ios_base/types/seekdir/case_label.cc: New.\n+\n+\t* config/io/c_io_stdio.h (__ios_flags): Mark deprecated.\n+\t* src/ios.cc: Same.\n+\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n+\n 2004-11-01  Momchil Velikov  <velco@fadata.bg>\n \n \tPR libstdc++/18185"}, {"sha": "5659c139730533df1762b7af17865634c1b48fb9", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -1,6 +1,6 @@\n // underlying io library  -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,6 +43,7 @@ namespace std\n   // for basic_file.h\n   typedef FILE __c_file;\n \n+  // XXX GLIBCXX_ABI Deprecated\n   // for ios_base.h\n   struct __ios_flags\n   {"}, {"sha": "2855b5ba2f14d3b029abdbc0c620e62a77c14b4b", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 56, "deletions": 13, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -52,7 +52,28 @@ namespace std\n   // as permitted (but not required) in the standard, in order to provide\n   // better type safety in iostream calls.  A side effect is that\n   // expressions involving them are no longer compile-time constants.\n-  enum _Ios_Fmtflags { _S_ios_fmtflags_end = 1L << 16 };\n+  enum _Ios_Fmtflags \n+    { \n+      _S_boolalpha \t= 1L << 0,\n+      _S_dec \t\t= 1L << 1,\n+      _S_fixed \t\t= 1L << 2,\n+      _S_hex \t\t= 1L << 3,\n+      _S_internal \t= 1L << 4,\n+      _S_left \t\t= 1L << 5,\n+      _S_oct \t\t= 1L << 6,\n+      _S_right \t\t= 1L << 7,\n+      _S_scientific \t= 1L << 8,\n+      _S_showbase \t= 1L << 9,\n+      _S_showpoint \t= 1L << 10,\n+      _S_showpos \t= 1L << 11,\n+      _S_skipws \t= 1L << 12,\n+      _S_unitbuf \t= 1L << 13,\n+      _S_uppercase \t= 1L << 14,\n+      _S_adjustfield \t= _S_left | _S_right | _S_internal,\n+      _S_basefield \t= _S_dec | _S_oct | _S_hex,\n+      _S_floatfield \t= _S_scientific | _S_fixed,\n+      _S_ios_fmtflags_end = 1L << 16 \n+    };\n \n   inline _Ios_Fmtflags\n   operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)\n@@ -66,15 +87,15 @@ namespace std\n   operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)\n   { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }\n \n-  inline _Ios_Fmtflags\n+  inline _Ios_Fmtflags&\n   operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)\n   { return __a = __a | __b; }\n \n-  inline _Ios_Fmtflags\n+  inline _Ios_Fmtflags&\n   operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)\n   { return __a = __a & __b; }\n \n-  inline _Ios_Fmtflags\n+  inline _Ios_Fmtflags&\n   operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)\n   { return __a = __a ^ __b; }\n \n@@ -83,7 +104,16 @@ namespace std\n   { return _Ios_Fmtflags(~static_cast<int>(__a)); }\n \n \n-  enum _Ios_Openmode { _S_ios_openmode_end = 1L << 16 };\n+  enum _Ios_Openmode \n+    { \n+      _S_app \t\t= 1L << 0,\n+      _S_ate \t\t= 1L << 1,\n+      _S_bin \t\t= 1L << 2,\n+      _S_in \t\t= 1L << 3,\n+      _S_out \t\t= 1L << 4,\n+      _S_trunc \t\t= 1L << 5,\n+      _S_ios_openmode_end = 1L << 16 \n+    };\n \n   inline _Ios_Openmode\n   operator&(_Ios_Openmode __a, _Ios_Openmode __b)\n@@ -97,15 +127,15 @@ namespace std\n   operator^(_Ios_Openmode __a, _Ios_Openmode __b)\n   { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }\n \n-  inline _Ios_Openmode\n+  inline _Ios_Openmode&\n   operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)\n   { return __a = __a | __b; }\n \n-  inline _Ios_Openmode\n+  inline _Ios_Openmode&\n   operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)\n   { return __a = __a & __b; }\n \n-  inline _Ios_Openmode\n+  inline _Ios_Openmode&\n   operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)\n   { return __a = __a ^ __b; }\n \n@@ -114,7 +144,14 @@ namespace std\n   { return _Ios_Openmode(~static_cast<int>(__a)); }\n \n \n-  enum _Ios_Iostate { _S_ios_iostate_end = 1L << 16 };\n+  enum _Ios_Iostate\n+    { \n+      _S_goodbit \t\t= 0,\n+      _S_badbit \t\t= 1L << 0,\n+      _S_eofbit \t\t= 1L << 1,\n+      _S_failbit\t\t= 1L << 2,\n+      _S_ios_iostate_end = 1L << 16 \n+    };\n \n   inline _Ios_Iostate\n   operator&(_Ios_Iostate __a, _Ios_Iostate __b)\n@@ -128,23 +165,29 @@ namespace std\n   operator^(_Ios_Iostate __a, _Ios_Iostate __b)\n   { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }\n \n-  inline _Ios_Iostate\n+  inline _Ios_Iostate&\n   operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)\n   { return __a = __a | __b; }\n \n-  inline _Ios_Iostate\n+  inline _Ios_Iostate&\n   operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)\n   { return __a = __a & __b; }\n \n-  inline _Ios_Iostate\n+  inline _Ios_Iostate&\n   operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)\n   { return __a = __a ^ __b; }\n \n   inline _Ios_Iostate\n   operator~(_Ios_Iostate __a)\n   { return _Ios_Iostate(~static_cast<int>(__a)); }\n \n-  enum _Ios_Seekdir { _S_ios_seekdir_end = 1L << 16 };\n+  enum _Ios_Seekdir \n+    { \n+      _S_beg = 0,\n+      _S_cur = SEEK_CUR,\n+      _S_end = SEEK_END,\n+      _S_ios_seekdir_end = 1L << 16 \n+    };\n \n   // 27.4.2  Class ios_base\n   /**"}, {"sha": "70b22f67e6440f8ab0686c2da9f830a42690c756", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -37,8 +37,9 @@\n #include <bits/atomicity.h>\n \n namespace std \n-{\n-  // Definitions for static const data members of __ios_flags.\n+{  \n+  // XXX GLIBCXX_ABI Deprecated\n+   // Definitions for static const data members of __ios_flags.\n   const __ios_flags::__int_type __ios_flags::_S_boolalpha;\n   const __ios_flags::__int_type __ios_flags::_S_dec;\n   const __ios_flags::__int_type __ios_flags::_S_fixed;"}, {"sha": "50c8eb8b05fecb595fdc0920f52f332e83095414", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -41,5 +41,5 @@ void test01()\n   io1 = io2;\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 739 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 782 } \n // { dg-error \"operator=\" \"\" { target *-*-* } 0 } "}, {"sha": "925087d5b27367db1f04e960a624f39d1f65d450", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -41,5 +41,5 @@ void test02()\n   test_base io2 = io1; \n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 736 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 779 } \n // { dg-error \"copy constructor\" \"\" { target *-*-* } 0 } "}, {"sha": "4f16d15cddb6791101a616a619eb2c07e54fbc54", "filename": "libstdc++-v3/testsuite/27_io/ios_base/types/fmtflags/bitmask_operators.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Ffmtflags%2Fbitmask_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Ffmtflags%2Fbitmask_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Ffmtflags%2Fbitmask_operators.cc?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// -*- C++ -*-\n+ \n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+ \n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU General Public License as\n+// published by the Free Software Foundation; either version 2, or (at\n+// your option) any later version.\n+ \n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+// MA 02111-1307, USA.\n+ \n+// As a special exception, you may use this file as part of a free\n+// software library without restriction.  Specifically, if other files\n+// instantiate templates or use macros or inline functions from this\n+// file, or you compile this file and link it with other files to\n+// produce an executable, this file does not by itself cause the\n+// resulting executable to be covered by the GNU General Public\n+// License.  This exception does not however invalidate any other\n+// reasons why the executable file might be covered by the GNU General\n+// Public License.\n+ \n+// Benjamin Kosnik  <bkoz@redhat.com>\n+\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  __gnu_test::bitmask_operators<std::ios_base::fmtflags>();\n+};"}, {"sha": "3c4e6af233c6be01c12eb8dd95dcde16b93d0545", "filename": "libstdc++-v3/testsuite/27_io/ios_base/types/fmtflags/case_label.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Ffmtflags%2Fcase_label.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Ffmtflags%2Fcase_label.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Ffmtflags%2Fcase_label.cc?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -0,0 +1,84 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall\" { target *-*-* } }\n+// -*- C++ -*-\n+ \n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+ \n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU General Public License as\n+// published by the Free Software Foundation; either version 2, or (at\n+// your option) any later version.\n+ \n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+// MA 02111-1307, USA.\n+ \n+// As a special exception, you may use this file as part of a free\n+// software library without restriction.  Specifically, if other files\n+// instantiate templates or use macros or inline functions from this\n+// file, or you compile this file and link it with other files to\n+// produce an executable, this file does not by itself cause the\n+// resulting executable to be covered by the GNU General Public\n+// License.  This exception does not however invalidate any other\n+// reasons why the executable file might be covered by the GNU General\n+// Public License.\n+ \n+// Benjamin Kosnik  <bkoz@redhat.com>\n+\n+#include <ios>\n+\n+// PR libstdc++/17922\n+// -Wall\n+typedef std::ios_base::fmtflags bitmask_type;\n+\n+void\n+case_labels(bitmask_type b)\n+{\n+  switch (b) \n+    {\n+    case std::ios_base::boolalpha:\n+      break;\n+    case std::ios_base::dec:\n+      break;\n+    case std::ios_base::fixed:\n+      break;\n+    case std::ios_base::hex:\n+      break;\n+    case std::ios_base::internal:\n+      break;\n+    case std::ios_base::left:\n+      break;\n+    case std::ios_base::oct:\n+      break;\n+    case std::ios_base::right:\n+      break;\n+    case std::ios_base::scientific:\n+      break;\n+    case std::ios_base::showbase:\n+      break;\n+    case std::ios_base::showpoint:\n+      break;\n+    case std::ios_base::showpos:\n+      break;\n+    case std::ios_base::skipws:\n+      break;\n+    case std::ios_base::unitbuf:\n+      break;\n+    case std::ios_base::uppercase:\n+      break;\n+    case std::ios_base::adjustfield:\n+      break;\n+    case std::ios_base::basefield:\n+      break;\n+    case std::ios_base::floatfield:\n+      break;\n+    case std::_S_ios_fmtflags_end:\n+      break;\n+    }\n+}"}, {"sha": "c8a00a0a272a06dd95909626c64aa9a3808ec570", "filename": "libstdc++-v3/testsuite/27_io/ios_base/types/iostate/bitmask_operators.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fiostate%2Fbitmask_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fiostate%2Fbitmask_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fiostate%2Fbitmask_operators.cc?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// -*- C++ -*-\n+ \n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+ \n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU General Public License as\n+// published by the Free Software Foundation; either version 2, or (at\n+// your option) any later version.\n+ \n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+// MA 02111-1307, USA.\n+ \n+// As a special exception, you may use this file as part of a free\n+// software library without restriction.  Specifically, if other files\n+// instantiate templates or use macros or inline functions from this\n+// file, or you compile this file and link it with other files to\n+// produce an executable, this file does not by itself cause the\n+// resulting executable to be covered by the GNU General Public\n+// License.  This exception does not however invalidate any other\n+// reasons why the executable file might be covered by the GNU General\n+// Public License.\n+ \n+// Benjamin Kosnik  <bkoz@redhat.com>\n+\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  __gnu_test::bitmask_operators<std::ios_base::iostate>();\n+};"}, {"sha": "51277c9d073aa7874e41f195ab03364017c84402", "filename": "libstdc++-v3/testsuite/27_io/ios_base/types/iostate/case_label.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fiostate%2Fcase_label.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fiostate%2Fcase_label.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fiostate%2Fcase_label.cc?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall\" { target *-*-* } }\n+// -*- C++ -*-\n+ \n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+ \n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU General Public License as\n+// published by the Free Software Foundation; either version 2, or (at\n+// your option) any later version.\n+ \n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+// MA 02111-1307, USA.\n+ \n+// As a special exception, you may use this file as part of a free\n+// software library without restriction.  Specifically, if other files\n+// instantiate templates or use macros or inline functions from this\n+// file, or you compile this file and link it with other files to\n+// produce an executable, this file does not by itself cause the\n+// resulting executable to be covered by the GNU General Public\n+// License.  This exception does not however invalidate any other\n+// reasons why the executable file might be covered by the GNU General\n+// Public License.\n+ \n+// Benjamin Kosnik  <bkoz@redhat.com>\n+\n+#include <ios>\n+\n+// PR libstdc++/17922\n+// -Wall\n+typedef std::ios_base::iostate bitmask_type;\n+\n+void\n+case_labels(bitmask_type b)\n+{\n+  switch (b) \n+    {\n+    case std::ios_base::goodbit:\n+      break;\n+    case std::ios_base::badbit:\n+      break;\n+    case std::ios_base::eofbit:\n+      break;\n+    case std::ios_base::failbit:\n+      break;\n+    case std::_S_ios_iostate_end:\n+      break;\n+    }\n+}"}, {"sha": "457b6dd01e1d75bd5270402d95b416543a0f6fbb", "filename": "libstdc++-v3/testsuite/27_io/ios_base/types/openmode/bitmask_operators.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fopenmode%2Fbitmask_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fopenmode%2Fbitmask_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fopenmode%2Fbitmask_operators.cc?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// -*- C++ -*-\n+ \n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+ \n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU General Public License as\n+// published by the Free Software Foundation; either version 2, or (at\n+// your option) any later version.\n+ \n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+// MA 02111-1307, USA.\n+ \n+// As a special exception, you may use this file as part of a free\n+// software library without restriction.  Specifically, if other files\n+// instantiate templates or use macros or inline functions from this\n+// file, or you compile this file and link it with other files to\n+// produce an executable, this file does not by itself cause the\n+// resulting executable to be covered by the GNU General Public\n+// License.  This exception does not however invalidate any other\n+// reasons why the executable file might be covered by the GNU General\n+// Public License.\n+ \n+// Benjamin Kosnik  <bkoz@redhat.com>\n+\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  __gnu_test::bitmask_operators<std::ios_base::openmode>();\n+};"}, {"sha": "428755024514b10b54be8b068e496d731288ad41", "filename": "libstdc++-v3/testsuite/27_io/ios_base/types/openmode/case_label.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fopenmode%2Fcase_label.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fopenmode%2Fcase_label.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fopenmode%2Fcase_label.cc?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall\" { target *-*-* } }\n+// -*- C++ -*-\n+ \n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+ \n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU General Public License as\n+// published by the Free Software Foundation; either version 2, or (at\n+// your option) any later version.\n+ \n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+// MA 02111-1307, USA.\n+ \n+// As a special exception, you may use this file as part of a free\n+// software library without restriction.  Specifically, if other files\n+// instantiate templates or use macros or inline functions from this\n+// file, or you compile this file and link it with other files to\n+// produce an executable, this file does not by itself cause the\n+// resulting executable to be covered by the GNU General Public\n+// License.  This exception does not however invalidate any other\n+// reasons why the executable file might be covered by the GNU General\n+// Public License.\n+ \n+// Benjamin Kosnik  <bkoz@redhat.com>\n+\n+#include <ios>\n+\n+// PR libstdc++/17922\n+// -Wall\n+typedef std::ios_base::openmode bitmask_type;\n+\n+void\n+case_labels(bitmask_type b)\n+{\n+  switch (b) \n+    {\n+    case std::ios_base::app:\n+      break;\n+    case std::ios_base::ate:\n+      break;\n+    case std::ios_base::binary:\n+      break;\n+    case std::ios_base::in:\n+      break;\n+    case std::ios_base::out:\n+      break;\n+    case std::ios_base::trunc:\n+      break;\n+    case std::_S_ios_openmode_end:\n+      break;\n+    }\n+}"}, {"sha": "076975815e324028adb45682426a424841a6c10a", "filename": "libstdc++-v3/testsuite/27_io/ios_base/types/seekdir/case_label.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fseekdir%2Fcase_label.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fseekdir%2Fcase_label.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ftypes%2Fseekdir%2Fcase_label.cc?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall\" { target *-*-* } }\n+// -*- C++ -*-\n+ \n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+ \n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU General Public License as\n+// published by the Free Software Foundation; either version 2, or (at\n+// your option) any later version.\n+ \n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+// MA 02111-1307, USA.\n+ \n+// As a special exception, you may use this file as part of a free\n+// software library without restriction.  Specifically, if other files\n+// instantiate templates or use macros or inline functions from this\n+// file, or you compile this file and link it with other files to\n+// produce an executable, this file does not by itself cause the\n+// resulting executable to be covered by the GNU General Public\n+// License.  This exception does not however invalidate any other\n+// reasons why the executable file might be covered by the GNU General\n+// Public License.\n+ \n+// Benjamin Kosnik  <bkoz@redhat.com>\n+\n+#include <ios>\n+\n+// PR libstdc++/17922\n+// -Wall\n+typedef std::ios_base::seekdir test_type;\n+\n+void\n+case_labels(test_type b)\n+{\n+  switch (b) \n+    {\n+    case std::ios_base::beg:\n+      break;\n+    case std::ios_base::cur:\n+      break;\n+    case std::ios_base::end:\n+      break;\n+    case std::_S_ios_fmtflags_end:\n+      break;\n+    }\n+}"}, {"sha": "4b526e9b19f0bcc6e1526ace4fe11ae8d48b0eea", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd80bd9b93b62fa5388caac9e7adf33c05de52be/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=bd80bd9b93b62fa5388caac9e7adf33c05de52be", "patch": "@@ -103,6 +103,23 @@ namespace __gnu_test\n   void\n   verify_demangle(const char* mangled, const char* wanted);\n \n+  // 17.3.2.1.2 - Bitmask types [lib.bitmask.types]\n+  // bitmask_operators\n+  template<typename bitmask_type>\n+    void\n+    bitmask_operators()\n+    {\n+      bitmask_type a;\n+      bitmask_type b;\n+      a | b;\n+      a & b;\n+      a ^ b;\n+      ~b;\n+      a |= b; // set\n+      a &= ~b; // clear\n+      a ^= b;\n+    }\n+\n   // Simple callback structure for variable numbers of tests (all with\n   // same signature).  Assume all unit tests are of the signature\n   // void test01(); "}]}