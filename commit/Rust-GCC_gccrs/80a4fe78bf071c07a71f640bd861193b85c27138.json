{"sha": "80a4fe78bf071c07a71f640bd861193b85c27138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBhNGZlNzhiZjA3MWMwN2E3MWY2NDBiZDg2MTE5M2I4NWMyNzEzOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-03T14:49:13Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-03T14:49:13Z"}, "message": "Fix GNU coding style in memory statistics.\n\n\t* alloc-pool.h (struct pool_usage): Correct GNU coding style.\n\t* bitmap.h (struct bitmap_usage): Likewise.\n\t* ggc-common.c (struct ggc_usage): Likewise.\n\t* mem-stats.h (struct mem_location): Likewise.\n\t(struct mem_usage): Likewise.\n\t* vec.c (struct vec_usage): Likewise.\n\nFrom-SVN: r224082", "tree": {"sha": "6099942cfb1d37ffb58443756cd0f685b1cfd9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6099942cfb1d37ffb58443756cd0f685b1cfd9f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80a4fe78bf071c07a71f640bd861193b85c27138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a4fe78bf071c07a71f640bd861193b85c27138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a4fe78bf071c07a71f640bd861193b85c27138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a4fe78bf071c07a71f640bd861193b85c27138/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "368054069fadd814a2d36d1614a393982019ed9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368054069fadd814a2d36d1614a393982019ed9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368054069fadd814a2d36d1614a393982019ed9b"}], "stats": {"total": 180, "additions": 122, "deletions": 58}, "files": [{"sha": "5f695bd3fdcafba711786f78efdf2d1d89dd99ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80a4fe78bf071c07a71f640bd861193b85c27138", "patch": "@@ -1,3 +1,12 @@\n+2015-06-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* alloc-pool.h (struct pool_usage): Correct GNU coding style.\n+\t* bitmap.h (struct bitmap_usage): Likewise.\n+\t* ggc-common.c (struct ggc_usage): Likewise.\n+\t* mem-stats.h (struct mem_location): Likewise.\n+\t(struct mem_usage): Likewise.\n+\t* vec.c (struct vec_usage): Likewise.\n+\n 2015-06-03  Benigno B. Junior  <bbj@gentoo.org>\n \n \t* config/netbsd-elf.h (NETBSD_LINK_SPEC_ELF): Turn -symbolic into"}, {"sha": "ed0cb6d3242924b3a0bb89e1b05b77b4d31748ce", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=80a4fe78bf071c07a71f640bd861193b85c27138", "patch": "@@ -40,7 +40,8 @@ struct pool_usage: public mem_usage\n       m_pool_name (pool_name) {}\n \n   /* Sum the usage with SECOND usage.  */\n-  pool_usage operator+ (const pool_usage &second)\n+  pool_usage\n+  operator+ (const pool_usage &second)\n   {\n     return pool_usage (m_allocated + second.m_allocated,\n \t\t\t     m_times + second.m_times,\n@@ -50,7 +51,8 @@ struct pool_usage: public mem_usage\n   }\n \n   /* Dump usage coupled to LOC location, where TOTAL is sum of all rows.  */\n-  inline void dump (mem_location *loc, mem_usage &total) const\n+  inline void\n+  dump (mem_location *loc, mem_usage &total) const\n   {\n     char *location_string = loc->to_string ();\n \n@@ -65,15 +67,17 @@ struct pool_usage: public mem_usage\n   }\n \n   /* Dump header with NAME.  */\n-  static inline void dump_header (const char *name)\n+  static inline void\n+  dump_header (const char *name)\n   {\n     fprintf (stderr, \"%-32s%-48s %6s%11s%16s%17s%12s\\n\", \"Pool name\", name,\n \t     \"Pools\", \"Leak\", \"Peak\", \"Times\", \"Elt size\");\n     print_dash_line ();\n   }\n \n   /* Dump footer.  */\n-  inline void dump_footer ()\n+  inline void\n+  dump_footer ()\n   {\n     print_dash_line ();\n     fprintf (stderr, \"%s%82li%10li\\n\", \"Total\", (long)m_instances,\n@@ -133,21 +137,24 @@ class pool_allocator\n \tint64_t align_i;\n       } u;\n \n-    static inline allocation_object<U> *get_instance (void *data_ptr)\n+    static inline allocation_object<U> *\n+    get_instance (void *data_ptr)\n     {\n       return (allocation_object<U> *)(((char *)(data_ptr))\n \t\t\t\t      - offsetof (allocation_object<U>,\n \t\t\t\t\t\t  u.data));\n     }\n \n-    static inline U *get_data (void *instance_ptr)\n+    static inline U *\n+    get_data (void *instance_ptr)\n     {\n       return (U*)(((allocation_object<U> *) instance_ptr)->u.data);\n     }\n   };\n \n   /* Align X to 8.  */\n-  size_t align_eight (size_t x)\n+  size_t\n+  align_eight (size_t x)\n   {\n     return (((x+7) >> 3) << 3);\n   }"}, {"sha": "1d37bca43a0c2da60dca211bd6b40ad5cab34f40", "filename": "gcc/bitmap.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=80a4fe78bf071c07a71f640bd861193b85c27138", "patch": "@@ -144,7 +144,8 @@ struct bitmap_usage: public mem_usage\n     m_nsearches (nsearches), m_search_iter (search_iter) {}\n \n   /* Sum the usage with SECOND usage.  */\n-  bitmap_usage operator+ (const bitmap_usage &second)\n+  bitmap_usage\n+  operator+ (const bitmap_usage &second)\n   {\n     return bitmap_usage (m_allocated + second.m_allocated,\n \t\t\t     m_times + second.m_times,\n@@ -154,7 +155,8 @@ struct bitmap_usage: public mem_usage\n   }\n \n   /* Dump usage coupled to LOC location, where TOTAL is sum of all rows.  */\n-  inline void dump (mem_location *loc, mem_usage &total) const\n+  inline void\n+  dump (mem_location *loc, mem_usage &total) const\n   {\n     char *location_string = loc->to_string ();\n \n@@ -170,7 +172,8 @@ struct bitmap_usage: public mem_usage\n   }\n \n   /* Dump header with NAME.  */\n-  static inline void dump_header (const char *name)\n+  static inline void\n+  dump_header (const char *name)\n   {\n     fprintf (stderr, \"%-48s %11s%16s%17s%12s%12s%10s\\n\", name, \"Leak\", \"Peak\",\n \t     \"Times\", \"N searches\", \"Search iter\", \"Type\");"}, {"sha": "cd81770bedf9b84f54c6539ab5dae62b2417501f", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=80a4fe78bf071c07a71f640bd861193b85c27138", "patch": "@@ -843,7 +843,8 @@ struct ggc_usage: public mem_usage\n     m_freed (freed), m_collected (collected), m_overhead (overhead) {}\n \n   /* Comparison operator.  */\n-  inline bool operator< (const ggc_usage &second) const\n+  inline bool\n+  operator< (const ggc_usage &second) const\n   {\n     return (get_balance () == second.get_balance () ?\n \t    (m_peak == second.m_peak ? m_times < second.m_times\n@@ -852,21 +853,24 @@ struct ggc_usage: public mem_usage\n   }\n \n   /* Register overhead of ALLOCATED and OVERHEAD bytes.  */\n-  inline void register_overhead (size_t allocated, size_t overhead)\n+  inline void\n+  register_overhead (size_t allocated, size_t overhead)\n   {\n     m_allocated += allocated;\n     m_overhead += overhead;\n     m_times++;\n   }\n \n   /* Release overhead of SIZE bytes.  */\n-  inline void release_overhead (size_t size)\n+  inline void\n+  release_overhead (size_t size)\n   {\n     m_freed += size;\n   }\n \n   /* Sum the usage with SECOND usage.  */\n-  ggc_usage operator+ (const ggc_usage &second)\n+  ggc_usage\n+  operator+ (const ggc_usage &second)\n   {\n     return ggc_usage (m_allocated + second.m_allocated,\n \t\t      m_times + second.m_times,\n@@ -877,7 +881,8 @@ struct ggc_usage: public mem_usage\n   }\n \n   /* Dump usage with PREFIX, where TOTAL is sum of all rows.  */\n-  inline void dump (const char *prefix, ggc_usage &total) const\n+  inline void\n+  dump (const char *prefix, ggc_usage &total) const\n   {\n     long balance = get_balance ();\n     fprintf (stderr,\n@@ -892,7 +897,8 @@ struct ggc_usage: public mem_usage\n   }\n \n   /* Dump usage coupled to LOC location, where TOTAL is sum of all rows.  */\n-  inline void dump (mem_location *loc, ggc_usage &total) const\n+  inline void\n+  dump (mem_location *loc, ggc_usage &total) const\n   {\n     char *location_string = loc->to_string ();\n \n@@ -902,23 +908,26 @@ struct ggc_usage: public mem_usage\n   }\n \n   /* Dump footer.  */\n-  inline void dump_footer ()\n+  inline void\n+  dump_footer ()\n   {\n     print_dash_line ();\n     dump (\"Total\", *this);\n     print_dash_line ();\n   }\n \n   /* Get balance which is GGC allocation leak.  */\n-  inline long get_balance () const\n+  inline long\n+  get_balance () const\n   {\n     return m_allocated + m_overhead - m_collected - m_freed;\n   }\n \n   typedef std::pair<mem_location *, ggc_usage *> mem_pair_t;\n \n   /* Compare wrapper used by qsort method.  */\n-  static int compare (const void *first, const void *second)\n+  static int\n+  compare (const void *first, const void *second)\n   {\n     const mem_pair_t f = *(const mem_pair_t *)first;\n     const mem_pair_t s = *(const mem_pair_t *)second;\n@@ -927,8 +936,10 @@ struct ggc_usage: public mem_usage\n   }\n \n   /* Compare rows in final GGC summary dump.  */\n-  static int compare_final (const void *first, const void *second)\n-  {  typedef std::pair<mem_location *, ggc_usage *> mem_pair_t;\n+  static int\n+  compare_final (const void *first, const void *second)\n+  {\n+    typedef std::pair<mem_location *, ggc_usage *> mem_pair_t;\n \n     const ggc_usage *f = ((const mem_pair_t *)first)->second;\n     const ggc_usage *s = ((const mem_pair_t *)second)->second;\n@@ -940,7 +951,8 @@ struct ggc_usage: public mem_usage\n   }\n \n   /* Dump header with NAME.  */\n-  static inline void dump_header (const char *name)\n+  static inline void\n+  dump_header (const char *name)\n   {\n     fprintf (stderr, \"%-48s %11s%17s%17s%16s%17s\\n\", name, \"Garbage\", \"Freed\",\n \t     \"Leak\", \"Overhead\", \"Times\");"}, {"sha": "7524ff7168ab4828269b57cc40f6dfe80422268a", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=80a4fe78bf071c07a71f640bd861193b85c27138", "patch": "@@ -18,25 +18,29 @@ class hash_map;\n struct mem_location\n {\n   /* Default constructor.  */\n-  inline mem_location () {}\n+  inline\n+  mem_location () {}\n \n   /* Constructor.  */\n-  inline mem_location (mem_alloc_origin origin, bool ggc,\n+  inline\n+  mem_location (mem_alloc_origin origin, bool ggc,\n \t\tconst char *filename = NULL, int line = 0,\n \t\tconst char *function = NULL):\n     m_filename (filename), m_function (function), m_line (line), m_origin\n     (origin), m_ggc (ggc) {}\n \n   /* Copy constructor.  */\n-  inline mem_location (mem_location &other): m_filename (other.m_filename),\n+  inline\n+  mem_location (mem_location &other): m_filename (other.m_filename),\n     m_function (other.m_function), m_line (other.m_line),\n     m_origin (other.m_origin), m_ggc (other.m_ggc) {}\n \n   /* Compute hash value based on file name, function name and line in\n      source code. As there is just a single pointer registered for every\n      constant that points to e.g. the same file name, we can use hash\n      of the pointer.  */\n-  hashval_t hash ()\n+  hashval_t\n+  hash ()\n   {\n     inchash::hash hash;\n \n@@ -48,14 +52,16 @@ struct mem_location\n   }\n \n   /* Return true if the memory location is equal to OTHER.  */\n-  int equal (mem_location &other)\n+  int\n+  equal (mem_location &other)\n   {\n     return m_filename == other.m_filename && m_function == other.m_function\n       && m_line == other.m_line;\n   }\n \n   /* Return trimmed filename for the location.  */\n-  inline const char *get_trimmed_filename ()\n+  inline const char *\n+  get_trimmed_filename ()\n   {\n     const char *s1 = m_filename;\n     const char *s2;\n@@ -66,7 +72,8 @@ struct mem_location\n     return s1;\n   }\n \n-  inline char *to_string ()\n+  inline char *\n+  to_string ()\n   {\n     unsigned l = strlen (get_trimmed_filename ()) + strlen (m_function)\n       + LOCATION_LINE_EXTRA_SPACE;\n@@ -81,7 +88,8 @@ struct mem_location\n   }\n \n   /* Return display name associated to ORIGIN type.  */\n-  static const char *get_origin_name (mem_alloc_origin origin)\n+  static const char *\n+  get_origin_name (mem_alloc_origin origin)\n   {\n     return mem_alloc_origin_names[(unsigned) origin];\n   }\n@@ -110,7 +118,8 @@ struct mem_usage\n     m_instances (instances) {}\n \n   /* Register overhead of SIZE bytes.  */\n-  inline void register_overhead (size_t size)\n+  inline void\n+  register_overhead (size_t size)\n   {\n     m_allocated += size;\n     m_times++;\n@@ -120,15 +129,17 @@ struct mem_usage\n   }\n \n   /* Release overhead of SIZE bytes.  */\n-  inline void release_overhead (size_t size)\n+  inline void\n+  release_overhead (size_t size)\n   {\n     gcc_assert (size <= m_allocated);\n \n     m_allocated -= size;\n   }\n \n   /* Sum the usage with SECOND usage.  */\n-  mem_usage operator+ (const mem_usage &second)\n+  mem_usage\n+  operator+ (const mem_usage &second)\n   {\n     return mem_usage (m_allocated + second.m_allocated,\n \t\t      m_times + second.m_times,\n@@ -137,15 +148,17 @@ struct mem_usage\n   }\n \n   /* Comparison operator.  */\n-  inline bool operator< (const mem_usage &second) const\n+  inline bool\n+  operator< (const mem_usage &second) const\n   {\n     return (m_allocated == second.m_allocated ?\n \t    (m_peak == second.m_peak ? m_times < second.m_times\n \t     : m_peak < second.m_peak) : m_allocated < second.m_allocated);\n   }\n \n   /* Compare wrapper used by qsort method.  */\n-  static int compare (const void *first, const void *second)\n+  static int\n+  compare (const void *first, const void *second)\n   {\n     typedef std::pair<mem_location *, mem_usage *> mem_pair_t;\n \n@@ -156,7 +169,8 @@ struct mem_usage\n   }\n \n   /* Dump usage coupled to LOC location, where TOTAL is sum of all rows.  */\n-  inline void dump (mem_location *loc, mem_usage &total) const\n+  inline void\n+  dump (mem_location *loc, mem_usage &total) const\n   {\n     char *location_string = loc->to_string ();\n \n@@ -170,7 +184,8 @@ struct mem_usage\n   }\n \n   /* Dump footer.  */\n-  inline void dump_footer () const\n+  inline void\n+  dump_footer () const\n   {\n     print_dash_line ();\n     fprintf (stderr, \"%s%54li%27li\\n\", \"Total\", (long)m_allocated,\n@@ -179,19 +194,22 @@ struct mem_usage\n   }\n \n   /* Return fraction of NOMINATOR and DENOMINATOR in percent.  */\n-  static inline float get_percent (size_t nominator, size_t denominator)\n+  static inline float\n+  get_percent (size_t nominator, size_t denominator)\n   {\n     return denominator == 0 ? 0.0f : nominator * 100.0 / denominator;\n   }\n \n   /* Print line made of dashes.  */\n-  static inline void print_dash_line (size_t count = 140)\n+  static inline void\n+  print_dash_line (size_t count = 140)\n   {\n     fprintf (stderr, \"%s\\n\", std::string (count, '-').c_str ());\n   }\n \n   /* Dump header with NAME.  */\n-  static inline void dump_header (const char *name)\n+  static inline void\n+  dump_header (const char *name)\n   {\n     fprintf (stderr, \"%-48s %11s%16s%10s%17s\\n\", name, \"Leak\", \"Peak\",\n \t     \"Times\", \"Type\");\n@@ -262,50 +280,59 @@ class mem_alloc_description\n   ~mem_alloc_description ();\n \n   /* Returns true if instance PTR is registered by the memory description.  */\n-  bool contains_descriptor_for_instance (const void *ptr);\n+  bool\n+  contains_descriptor_for_instance (const void *ptr);\n \n   /* Return descriptor for instance PTR.  */\n-  T *get_descriptor_for_instance (const void *ptr);\n+  T *\n+  get_descriptor_for_instance (const void *ptr);\n \n   /* Register memory allocation descriptor for container PTR which is\n      described by a memory LOCATION.  */\n-  T *register_descriptor (const void *ptr, mem_location *location);\n+  T *\n+  register_descriptor (const void *ptr, mem_location *location);\n \n   /* Register memory allocation descriptor for container PTR.  ORIGIN identifies\n      type of container and GGC identifes if the allocation is handled in GGC\n      memory.  Each location is identified by file NAME, LINE in source code and\n      FUNCTION name.  */\n-  T *register_descriptor (const void *ptr, mem_alloc_origin origin,\n+  T *\n+  register_descriptor (const void *ptr, mem_alloc_origin origin,\n \t\t\t  bool ggc, const char *name, int line,\n \t\t\t  const char *function);\n \n   /* Register instance overhead identified by PTR pointer. Allocation takes\n      SIZE bytes.  */\n-  T *register_instance_overhead (size_t size, const void *ptr);\n+  T *\n+  register_instance_overhead (size_t size, const void *ptr);\n \n   /* For containers (and GGC) where we want to track every instance object,\n      we register allocation of SIZE bytes, identified by PTR pointer, belonging\n      to USAGE descriptor.  */\n-  void register_object_overhead (T *usage, size_t size, const void *ptr);\n+  void\n+  register_object_overhead (T *usage, size_t size, const void *ptr);\n \n   /* Release PTR pointer of SIZE bytes. If REMOVE_FROM_MAP is set to true,\n      remove the instance from reverse map.  */\n-  void release_instance_overhead (void *ptr, size_t size,\n+  void\n+  release_instance_overhead (void *ptr, size_t size,\n \t\t\t\t  bool remove_from_map = false);\n \n   /* Release intance object identified by PTR pointer.  */\n-  void release_object_overhead (void *ptr);\n+  void\n+  release_object_overhead (void *ptr);\n \n   /* Get sum value for ORIGIN type of allocation for the descriptor.  */\n-  T get_sum (mem_alloc_origin origin);\n+  T\n+  get_sum (mem_alloc_origin origin);\n \n   /* Get all tracked instances registered by the description. Items\n      are filtered by ORIGIN type, LENGTH is return value where we register\n      the number of elements in the list. If we want to process custom order,\n      CMP comparator can be provided.  */\n-  mem_list_t *get_list (mem_alloc_origin origin, unsigned *length,\n-\t\t\tint (*cmp) (const void *first, const void *second)\n-\t\t\t  = NULL);\n+  mem_list_t *\n+  get_list (mem_alloc_origin origin, unsigned *length,\n+\t    int (*cmp) (const void *first, const void *second) = NULL);\n \n   /* Dump all tracked instances of type ORIGIN. If we want to process custom\n      order, CMP comparator can be provided.  */"}, {"sha": "f1a4d657d3bcf3d1bd857a2d5a1bc8d49fef06f5", "filename": "gcc/vec.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a4fe78bf071c07a71f640bd861193b85c27138/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=80a4fe78bf071c07a71f640bd861193b85c27138", "patch": "@@ -60,15 +60,17 @@ struct vec_usage: public mem_usage\n     m_items (items), m_items_peak (items_peak) {}\n \n   /* Comparison operator.  */\n-  inline bool operator< (const vec_usage &second) const\n+  inline bool\n+  operator< (const vec_usage &second) const\n   {\n     return (m_allocated == second.m_allocated ?\n \t    (m_peak == second.m_peak ? m_times < second.m_times\n \t     : m_peak < second.m_peak) : m_allocated < second.m_allocated);\n   }\n \n   /* Sum the usage with SECOND usage.  */\n-  vec_usage operator+ (const vec_usage &second)\n+  vec_usage\n+  operator+ (const vec_usage &second)\n   {\n     return vec_usage (m_allocated + second.m_allocated,\n \t\t      m_times + second.m_times,\n@@ -78,7 +80,8 @@ struct vec_usage: public mem_usage\n   }\n \n   /* Dump usage coupled to LOC location, where TOTAL is sum of all rows.  */\n-  inline void dump (mem_location *loc, mem_usage &total) const\n+  inline void\n+  dump (mem_location *loc, mem_usage &total) const\n   {\n     char s[4096];\n     sprintf (s, \"%s:%i (%s)\", loc->get_trimmed_filename (),\n@@ -93,7 +96,8 @@ struct vec_usage: public mem_usage\n   }\n \n   /* Dump footer.  */\n-  inline void dump_footer ()\n+  inline void\n+  dump_footer ()\n   {\n     print_dash_line ();\n     fprintf (stderr, \"%s%55li%25li%17li\\n\", \"Total\", (long)m_allocated,\n@@ -102,15 +106,17 @@ struct vec_usage: public mem_usage\n   }\n \n   /* Dump header with NAME.  */\n-  static inline void dump_header (const char *name)\n+  static inline void\n+  dump_header (const char *name)\n   {\n     fprintf (stderr, \"%-48s %11s%15s%10s%17s%11s\\n\", name, \"Leak\", \"Peak\",\n \t     \"Times\", \"Leak items\", \"Peak items\");\n     print_dash_line ();\n   }\n \n   /* Compare wrapper used by qsort method.  */\n-  static int compare (const void *first, const void *second)\n+  static int\n+  compare (const void *first, const void *second)\n   {\n     typedef std::pair<mem_location *, vec_usage *> mem_pair_t;\n "}]}