{"sha": "24cc0de967b57f7d1d911921e4cd5332b039380a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRjYzBkZTk2N2I1N2Y3ZDFkOTExOTIxZTRjZDUzMzJiMDM5MzgwYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-11-29T17:43:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-11-29T17:43:55Z"}, "message": "libstdc++: Adjust some function templates for coding conventions\n\n\t* include/bits/fs_path.h (path::operator/=): Change template-head to\n\tuse typename instead of class.\n\t* include/experimental/bits/fs_path.h (path::operator/=): Likewise.\n\t* include/std/ostream (operator<<): Likewise.\n\nFrom-SVN: r278859", "tree": {"sha": "30efe5340285465aa2244b8bb47f414b38579854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30efe5340285465aa2244b8bb47f414b38579854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24cc0de967b57f7d1d911921e4cd5332b039380a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24cc0de967b57f7d1d911921e4cd5332b039380a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24cc0de967b57f7d1d911921e4cd5332b039380a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24cc0de967b57f7d1d911921e4cd5332b039380a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd502796cfd03b91dcc1bfeae2d9137d38ff3951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd502796cfd03b91dcc1bfeae2d9137d38ff3951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd502796cfd03b91dcc1bfeae2d9137d38ff3951"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "ded6e5c139bdba4b0d7083cc184e1dd00ace7c0b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24cc0de967b57f7d1d911921e4cd5332b039380a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24cc0de967b57f7d1d911921e4cd5332b039380a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=24cc0de967b57f7d1d911921e4cd5332b039380a", "patch": "@@ -1,3 +1,10 @@\n+2019-11-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (path::operator/=): Change template-head to\n+\tuse typename instead of class.\n+\t* include/experimental/bits/fs_path.h (path::operator/=): Likewise.\n+\t* include/std/ostream (operator<<): Likewise.\n+\n 2019-11-29  Tom Honermann  <tom@honermann.net>\n \n \tNew tests"}, {"sha": "b129372447b53cdb632ba3ef2d57defdd81d2c68", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24cc0de967b57f7d1d911921e4cd5332b039380a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24cc0de967b57f7d1d911921e4cd5332b039380a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=24cc0de967b57f7d1d911921e4cd5332b039380a", "patch": "@@ -272,7 +272,7 @@ namespace __detail\n \n     path& operator/=(const path& __p);\n \n-    template <class _Source>\n+    template<typename _Source>\n       __detail::_Path<_Source>&\n       operator/=(_Source const& __source)\n       {"}, {"sha": "91202e5b008baf1ef8e5ac1a4944776bace26359", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24cc0de967b57f7d1d911921e4cd5332b039380a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24cc0de967b57f7d1d911921e4cd5332b039380a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=24cc0de967b57f7d1d911921e4cd5332b039380a", "patch": "@@ -278,7 +278,7 @@ namespace __detail\n \n     path& operator/=(const path& __p) { return _M_append(__p._M_pathname); }\n \n-    template <class _Source>\n+    template<typename _Source>\n       __detail::_Path<_Source>&\n       operator/=(_Source const& __source)\n       { return append(__source); }"}, {"sha": "895e4d7ab4e025b6337a3aea22425a8df703fd8a", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24cc0de967b57f7d1d911921e4cd5332b039380a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24cc0de967b57f7d1d911921e4cd5332b039380a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=24cc0de967b57f7d1d911921e4cd5332b039380a", "patch": "@@ -512,18 +512,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return (__out << __out.widen(__c)); }\n \n   // Specialization\n-  template <class _Traits>\n+  template<typename _Traits>\n     inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, char __c)\n     { return __ostream_insert(__out, &__c, 1); }\n \n   // Signed and unsigned\n-  template<class _Traits>\n+  template<typename _Traits>\n     inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)\n     { return (__out << static_cast<char>(__c)); }\n \n-  template<class _Traits>\n+  template<typename _Traits>\n     inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)\n     { return (__out << static_cast<char>(__c)); }\n@@ -533,37 +533,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // numeric values.\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>&, wchar_t) = delete;\n #endif // _GLIBCXX_USE_WCHAR_T\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>&, char8_t) = delete;\n #endif\n \n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>&, char16_t) = delete;\n \n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>&, char32_t) = delete;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n #ifdef _GLIBCXX_USE_CHAR8_T\n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<wchar_t, _Traits>&\n     operator<<(basic_ostream<wchar_t, _Traits>&, char8_t) = delete;\n #endif // _GLIBCXX_USE_CHAR8_T\n \n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<wchar_t, _Traits>&\n     operator<<(basic_ostream<wchar_t, _Traits>&, char16_t) = delete;\n \n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<wchar_t, _Traits>&\n     operator<<(basic_ostream<wchar_t, _Traits>&, char32_t) = delete;\n #endif // _GLIBCXX_USE_WCHAR_T\n@@ -601,7 +601,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);\n \n   // Partial specializations\n-  template<class _Traits>\n+  template<typename _Traits>\n     inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)\n     {\n@@ -614,12 +614,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   // Signed and unsigned\n-  template<class _Traits>\n+  template<typename _Traits>\n     inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)\n     { return (__out << reinterpret_cast<const char*>(__s)); }\n \n-  template<class _Traits>\n+  template<typename _Traits>\n     inline basic_ostream<char, _Traits> &\n     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)\n     { return (__out << reinterpret_cast<const char*>(__s)); }\n@@ -629,37 +629,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    // pointer values.\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>&, const wchar_t*) = delete;\n #endif // _GLIBCXX_USE_WCHAR_T\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>&, const char8_t*) = delete;\n #endif // _GLIBCXX_USE_CHAR8_T\n \n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>&, const char16_t*) = delete;\n \n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>&, const char32_t*) = delete;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n #ifdef _GLIBCXX_USE_CHAR8_T\n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<wchar_t, _Traits>&\n     operator<<(basic_ostream<wchar_t, _Traits>&, const char8_t*) = delete;\n #endif\n \n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<wchar_t, _Traits>&\n     operator<<(basic_ostream<wchar_t, _Traits>&, const char16_t*) = delete;\n \n-  template<class _Traits>\n+  template<typename _Traits>\n     basic_ostream<wchar_t, _Traits>&\n     operator<<(basic_ostream<wchar_t, _Traits>&, const char32_t*) = delete;\n #endif // _GLIBCXX_USE_WCHAR_T"}]}