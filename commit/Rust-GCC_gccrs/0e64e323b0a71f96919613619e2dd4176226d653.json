{"sha": "0e64e323b0a71f96919613619e2dd4176226d653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU2NGUzMjNiMGE3MWY5NjkxOTYxMzYxOWUyZGQ0MTc2MjI2ZDY1Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-09-22T10:51:42Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-22T10:51:42Z"}, "message": "vec.h (VEC_space): Return true if there _is_ space.\n\n\t* vec.h (VEC_space): Return true if there _is_ space.\n\t(VEC_reserve): Adjust.\n\n\t* java/parse.y (patch_anonymous_class): VEC_space returns true if\n\tthere is space.\n\nFrom-SVN: r87852", "tree": {"sha": "fb77e0a9ae4a84641c039f1b852449e4f355916e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb77e0a9ae4a84641c039f1b852449e4f355916e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e64e323b0a71f96919613619e2dd4176226d653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e64e323b0a71f96919613619e2dd4176226d653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e64e323b0a71f96919613619e2dd4176226d653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e64e323b0a71f96919613619e2dd4176226d653/comments", "author": null, "committer": null, "parents": [{"sha": "e1aeeae90eceed7dff8fb37292df258456f6fdd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1aeeae90eceed7dff8fb37292df258456f6fdd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1aeeae90eceed7dff8fb37292df258456f6fdd7"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "01e949c7de132dba3720f5edef3ac0da77db8b4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e64e323b0a71f96919613619e2dd4176226d653/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e64e323b0a71f96919613619e2dd4176226d653/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e64e323b0a71f96919613619e2dd4176226d653", "patch": "@@ -1,3 +1,8 @@\n+2004-09-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* vec.h (VEC_space): Return true if there _is_ space.\n+\t(VEC_reserve): Adjust.\n+\n 2004-09-22  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_function_value): For o32, o64, n32 and n64,"}, {"sha": "94bbe670ffa601bb670a937f31c18aeb57714064", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e64e323b0a71f96919613619e2dd4176226d653/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e64e323b0a71f96919613619e2dd4176226d653/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0e64e323b0a71f96919613619e2dd4176226d653", "patch": "@@ -1,3 +1,8 @@\n+2004-09-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* parse.y (patch_anonymous_class): VEC_space returns true if there\n+\tis space.\n+\n 2004-09-21  Matt Austern  <austern@apple.com>\n \n \tFix bootstrap."}, {"sha": "b221a4c9f591894c1566f522c2caec632cadeec7", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e64e323b0a71f96919613619e2dd4176226d653/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e64e323b0a71f96919613619e2dd4176226d653/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=0e64e323b0a71f96919613619e2dd4176226d653", "patch": "@@ -3904,7 +3904,7 @@ patch_anonymous_class (tree type_decl, tree class_decl, tree wfl)\n       if (parser_check_super_interface (type_decl, class_decl, wfl))\n \treturn;\n \n-      if (VEC_space (tree, BINFO_BASE_BINFOS (binfo), 1))\n+      if (!VEC_space (tree, BINFO_BASE_BINFOS (binfo), 1))\n \t{\n \t   /* Extend the binfo - by reallocating and copying it. */\n \t  tree new_binfo;"}, {"sha": "3ab775d1f3b0bb57efaf36e06656b3205f360352", "filename": "gcc/vec.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e64e323b0a71f96919613619e2dd4176226d653/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e64e323b0a71f96919613619e2dd4176226d653/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=0e64e323b0a71f96919613619e2dd4176226d653", "patch": "@@ -452,13 +452,13 @@ static inline int VEC_OP (TDEF,space)\t       \t\t\t\t  \\\n      (VEC (TDEF) *vec_, int alloc_)\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   return vec_ ? ((vec_)->alloc - (vec_)->num\t\t\t\t  \\\n-\t\t < (unsigned)(alloc_ < 0 ? 1 : alloc_)) : alloc_ != 0;\t  \\\n+\t\t >= (unsigned)(alloc_ < 0 ? 1 : alloc_)) : !alloc_;\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline int VEC_OP (TDEF,reserve)\t       \t\t\t\t  \\\n      (VEC (TDEF) **vec_, int alloc_ MEM_STAT_DECL)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n-  int extend = VEC_OP (TDEF,space) (*vec_, alloc_);\t\t\t  \\\n+  int extend = !VEC_OP (TDEF,space) (*vec_, alloc_);\t\t\t  \\\n \t\t  \t\t\t\t\t\t\t  \\\n   if (extend)\t  \t\t\t\t\t\t\t  \\\n     *vec_ = (VEC (TDEF) *) vec_##a##_p_reserve (*vec_, alloc_ PASS_MEM_STAT);   \\\n@@ -683,13 +683,13 @@ static inline int VEC_OP (TDEF,space)\t       \t\t\t\t  \\\n      (VEC (TDEF) *vec_, int alloc_)\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   return vec_ ? ((vec_)->alloc - (vec_)->num\t\t\t\t  \\\n-\t\t < (unsigned)(alloc_ < 0 ? 1 : alloc_)) : alloc_ != 0;\t  \\\n+\t\t >= (unsigned)(alloc_ < 0 ? 1 : alloc_)) : !alloc_;\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline int VEC_OP (TDEF,reserve)\t   \t    \t\t\t  \\\n      (VEC (TDEF) **vec_, int alloc_ MEM_STAT_DECL)\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n-  int extend = VEC_OP (TDEF,space) (*vec_, alloc_);\t\t\t  \\\n+  int extend = !VEC_OP (TDEF,space) (*vec_, alloc_);\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n   if (extend)\t\t\t\t\t\t\t\t  \\\n     *vec_ = (VEC (TDEF) *) vec_##a##_o_reserve (*vec_, alloc_,\t\t  \\"}]}