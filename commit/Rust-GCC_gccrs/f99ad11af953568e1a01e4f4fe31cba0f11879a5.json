{"sha": "f99ad11af953568e1a01e4f4fe31cba0f11879a5", "node_id": "C_kwDOANBUbNoAKGY5OWFkMTFhZjk1MzU2OGUxYTAxZTRmNGZlMzFjYmEwZjExODc5YTU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-17T09:29:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-17T09:29:06Z"}, "message": "openmp: Ensure proper diagnostics for -> in map/to/from clauses [PR104532]\n\nThe following patch uses the functions normal CPP_DEREF parsing uses,\ni.e. convert_lvalue_to_rvalue and build_indirect_ref, instead of\nblindly calling build_simple_mem_ref, so that if the variable does not\nhave correct type, we properly diagnose it instead of ICEing on it.\n\n2022-02-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/104532\n\t* c-parser.cc (c_parser_omp_variable_list): For CPP_DEREF, use\n\tconvert_lvalue_to_rvalue and build_indirect_ref instead of\n\tbuild_simple_mem_ref.\n\n\t* gcc.dg/gomp/pr104532.c: New test.", "tree": {"sha": "965f0a884111ea38f707392d8aebc25e98a8a53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/965f0a884111ea38f707392d8aebc25e98a8a53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99ad11af953568e1a01e4f4fe31cba0f11879a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99ad11af953568e1a01e4f4fe31cba0f11879a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99ad11af953568e1a01e4f4fe31cba0f11879a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99ad11af953568e1a01e4f4fe31cba0f11879a5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "550cabd00238a8e74783ba6ad05a7580d074aabd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550cabd00238a8e74783ba6ad05a7580d074aabd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/550cabd00238a8e74783ba6ad05a7580d074aabd"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "84deac04c4430771757fb000b040517761dd1218", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ad11af953568e1a01e4f4fe31cba0f11879a5/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ad11af953568e1a01e4f4fe31cba0f11879a5/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=f99ad11af953568e1a01e4f4fe31cba0f11879a5", "patch": "@@ -13145,7 +13145,16 @@ c_parser_omp_variable_list (c_parser *parser,\n \t\t{\n \t\t  location_t op_loc = c_parser_peek_token (parser)->location;\n \t\t  if (c_parser_next_token_is (parser, CPP_DEREF))\n-\t\t    t = build_simple_mem_ref (t);\n+\t\t    {\n+\t\t      c_expr t_expr;\n+\t\t      t_expr.value = t;\n+\t\t      t_expr.original_code = ERROR_MARK;\n+\t\t      t_expr.original_type = NULL;\n+\t\t      set_c_expr_source_range (&t_expr, op_loc, op_loc);\n+\t\t      t_expr = convert_lvalue_to_rvalue (op_loc, t_expr,\n+\t\t\t\t\t\t\t true, false);\n+\t\t      t = build_indirect_ref (op_loc, t_expr.value, RO_ARROW);\n+\t\t    }\n \t\t  c_parser_consume_token (parser);\n \t\t  if (!c_parser_next_token_is (parser, CPP_NAME))\n \t\t    {"}, {"sha": "1bf8e03c39f9b05bc423e28b0a991064d7e1f499", "filename": "gcc/testsuite/gcc.dg/gomp/pr104532.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ad11af953568e1a01e4f4fe31cba0f11879a5/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr104532.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ad11af953568e1a01e4f4fe31cba0f11879a5/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr104532.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr104532.c?ref=f99ad11af953568e1a01e4f4fe31cba0f11879a5", "patch": "@@ -0,0 +1,15 @@\n+/* PR c/104532 */\n+/* { dg-do compile } */\n+\n+void\n+foo (int x)\n+{\n+  #pragma omp target enter data map (to: x->vectors)\t/* { dg-error \"invalid type argument of '->'\" } */\n+}\t\t\t\t\t\t\t/* { dg-error \"must contain at least one\" \"\" { target *-*-* } .-1 } */\n+\n+void\n+bar (int x)\n+{\n+  #pragma omp target enter data map (to: x->vectors[])\t/* { dg-error \"invalid type argument of '->'\" } */\n+}\t\t\t\t\t\t\t/* { dg-error \"must contain at least one\" \"\" { target *-*-* } .-1 } */\n+                                                        /* { dg-error \"expected expression before\" \"\" { target *-*-* } .-2 } */"}]}