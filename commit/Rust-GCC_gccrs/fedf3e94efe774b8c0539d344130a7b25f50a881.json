{"sha": "fedf3e94efe774b8c0539d344130a7b25f50a881", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkZjNlOTRlZmU3NzRiOGMwNTM5ZDM0NDEzMGE3YjI1ZjUwYTg4MQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-10-22T07:45:31Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-03T08:35:33Z"}, "message": "[OpenACC] Split up testcases for inconsistent nested 'reduction' clauses checking\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/nested-reductions.c: Split file into...\n\t* c-c++-common/goacc/nested-reductions-1-kernels.c: ... this...\n\t* c-c++-common/goacc/nested-reductions-1-parallel.c: ..., this...\n\t* c-c++-common/goacc/nested-reductions-1-routine.c: ..., and this.\n\t* c-c++-common/goacc/nested-reductions-warn.c: Split file into...\n\t* c-c++-common/goacc/nested-reductions-2-kernels.c: ... this...\n\t* c-c++-common/goacc/nested-reductions-2-parallel.c: ..., this...\n\t* c-c++-common/goacc/nested-reductions-2-routine.c: ..., and this.\n\t* gfortran.dg/goacc/nested-reductions.f90: Split file into...\n\t* gfortran.dg/goacc/nested-reductions-1-kernels.f90: ... this...\n\t* gfortran.dg/goacc/nested-reductions-1-parallel.f90: ..., this...\n\t* gfortran.dg/goacc/nested-reductions-1-routine.f90: ..., and\n\tthis.\n\t* gfortran.dg/goacc/nested-reductions-warn.f90: Split file into...\n\t* gfortran.dg/goacc/nested-reductions-2-kernels.f90: ... this...\n\t* gfortran.dg/goacc/nested-reductions-2-parallel.f90: ..., this...\n\t* gfortran.dg/goacc/nested-reductions-2-routine.f90: ..., and\n\tthis.", "tree": {"sha": "822e21e5d859d5488a0cecfa0eaf22e8f5d89b40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/822e21e5d859d5488a0cecfa0eaf22e8f5d89b40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fedf3e94efe774b8c0539d344130a7b25f50a881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedf3e94efe774b8c0539d344130a7b25f50a881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fedf3e94efe774b8c0539d344130a7b25f50a881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedf3e94efe774b8c0539d344130a7b25f50a881/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08fca4df1db9b1ec09c846a8b415bd652cc48050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08fca4df1db9b1ec09c846a8b415bd652cc48050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08fca4df1db9b1ec09c846a8b415bd652cc48050"}], "stats": {"total": 1150, "additions": 589, "deletions": 561}, "files": [{"sha": "68cb8f82ee57be4082faced1dd00b5bece585bac", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-1-kernels.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-kernels.c?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -0,0 +1,41 @@\n+/* Test cases of nested 'reduction' clauses expected to compile cleanly.  */\n+\n+/* See also 'gfortran.dg/goacc/nested-reductions-1-kernels.f90'. */\n+\n+void acc_kernels (void)\n+{\n+  int i, j, k, sum, diff;\n+\n+  /* FIXME:  These tests are not meaningful yet because reductions in\n+     kernels regions are not supported yet.  */\n+  #pragma acc kernels\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+  }\n+}"}, {"sha": "ce1d0a1352722d189d3cab1ef7b08df008d9672a", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-1-parallel.c", "status": "renamed", "additions": 3, "deletions": 105, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-parallel.c?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -1,4 +1,6 @@\n-/* Test cases of nested reduction loops that should compile cleanly.  */\n+/* Test cases of nested 'reduction' clauses expected to compile cleanly.  */\n+\n+/* See also 'gfortran.dg/goacc/nested-reductions-1-parallel.f90'. */\n \n void acc_parallel (void)\n {\n@@ -314,107 +316,3 @@ void acc_parallel_loop_reduction (void)\n       }\n   }\n }\n-\n-/* The same tests as above, but inside a routine construct.  */\n-#pragma acc routine gang\n-void acc_routine (void)\n-{\n-  int i, j, k, sum, diff;\n-\n-  {\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      for (j = 0; j < 10; j++)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop collapse(2) reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      for (j = 0; j < 10; j++)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(+:sum)\n-      for (j = 0; j < 10; j++)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop collapse(2) reduction(+:sum)\n-      for (j = 0; j < 10; j++)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop reduction(+:sum)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(+:sum)\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop reduction(+:sum)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum) reduction(-:diff)\n-    for (i = 0; i < 10; i++)\n-      {\n-        #pragma acc loop reduction(+:sum)\n-        for (j = 0; j < 10; j++)\n-          #pragma acc loop reduction(+:sum)\n-          for (k = 0; k < 10; k++)\n-            sum = 1;\n-\n-        #pragma acc loop reduction(-:diff)\n-        for (j = 0; j < 10; j++)\n-          #pragma acc loop reduction(-:diff)\n-          for (k = 0; k < 10; k++)\n-            diff = 1;\n-      }\n-  }\n-}\n-\n-void acc_kernels (void)\n-{\n-  int i, j, k, sum, diff;\n-\n-  /* FIXME:  These tests are not meaningful yet because reductions in\n-     kernels regions are not supported yet.  */\n-  #pragma acc kernels\n-  {\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      for (j = 0; j < 10; j++)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(+:sum)\n-      for (j = 0; j < 10; j++)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop reduction(+:sum)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(+:sum)\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop reduction(+:sum)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-  }\n-}", "previous_filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions.c"}, {"sha": "83d39950295da18430b21a3d88f60188b0466678", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-1-routine.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-routine.c?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -0,0 +1,68 @@\n+/* Test cases of nested 'reduction' clauses expected to compile cleanly.  */\n+\n+/* See also 'gfortran.dg/goacc/nested-reductions-1-routine.f90'. */\n+\n+#pragma acc routine gang\n+void acc_routine (void)\n+{\n+  int i, j, k, sum, diff;\n+\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop collapse(2) reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}"}, {"sha": "80d7c53daca7a0c8a5b970bdfaed8f1d8ba4972d", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-2-kernels.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-kernels.c?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -0,0 +1,50 @@\n+/* Test erroneous cases of nested 'reduction' clauses.  */\n+\n+/* See also 'gfortran.dg/goacc/nested-reductions-2-kernels.f90'. */\n+\n+void acc_kernels (void)\n+{\n+  int i, j, k, sum, diff;\n+\n+  /* FIXME:  No diagnostics are produced for these loops because reductions\n+     in kernels regions are not supported yet.  */\n+  #pragma acc kernels\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:diff)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+  }\n+}"}, {"sha": "1f6b4e78293b556cd67404bae2508c2d9d973954", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-2-parallel.c", "status": "renamed", "additions": 3, "deletions": 139, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-parallel.c?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -1,4 +1,6 @@\n-/* Test erroneous cases of nested reduction loops.  */\n+/* Test erroneous cases of nested 'reduction' clauses.  */\n+\n+/* See also 'gfortran.dg/goacc/nested-reductions-2-parallel.f90'. */\n \n void acc_parallel (void)\n {\n@@ -385,141 +387,3 @@ void acc_parallel_loop_reduction (void)\n       }\n   }\n }\n-\n-/* The same tests as above, but inside a routine construct.  */\n-#pragma acc routine gang\n-void acc_routine (void)\n-{\n-  int i, j, k, l, sum, diff;\n-\n-  {\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop reduction(+:sum)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-      for (j = 0; j < 10; j++)\n-        for (k = 0; k < 10; k++)\n-          #pragma acc loop reduction(+:sum)\n-          for (l = 0; l < 10; l++)\n-            sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n-\tfor (k = 0; k < 10; k++)\n-          #pragma acc loop reduction(+:sum)\n-          for (l = 0; l < 10; l++)\n-            sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop reduction(-:sum)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n-        for (k = 0; k < 10; k++)\n-\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n-\t  for (l = 0; l < 10; l++)\n-\t    sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n-      for (j = 0; j < 10; j++)\n-      #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" })\n-      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n-        for (k = 0; k < 10; k++)\n-\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n-\t  for (l = 0; l < 10; l++)\n-\t    sum = 1;\n-\n-    #pragma acc loop reduction(+:sum) reduction(-:diff)\n-    for (i = 0; i < 10; i++)\n-      {\n-        #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-        for (j = 0; j < 10; j++)\n-          #pragma acc loop reduction(+:sum)\n-          for (k = 0; k < 10; k++)\n-            sum = 1;\n-\n-        #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n-        for (j = 0; j < 10; j++)\n-          #pragma acc loop reduction(-:diff)\n-          for (k = 0; k < 10; k++)\n-            diff = 1;\n-      }\n-  }\n-}\n-\n-void acc_kernels (void)\n-{\n-  int i, j, k, sum, diff;\n-\n-  /* FIXME:  No diagnostics are produced for these loops because reductions\n-     in kernels regions are not supported yet.  */\n-  #pragma acc kernels\n-  {\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      for (j = 0; j < 10; j++)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop\n-      for (j = 0; j < 10; j++)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(-:diff)\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop reduction(+:sum)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-\n-    #pragma acc loop reduction(+:sum)\n-    for (i = 0; i < 10; i++)\n-      #pragma acc loop reduction(-:sum)\n-      for (j = 0; j < 10; j++)\n-        #pragma acc loop reduction(+:sum)\n-        for (k = 0; k < 10; k++)\n-          sum = 1;\n-  }\n-}", "previous_filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-warn.c"}, {"sha": "5988d509bec18edc265000260b99b9fa87e905ea", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-2-routine.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-routine.c?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -0,0 +1,93 @@\n+/* Test erroneous cases of nested 'reduction' clauses.  */\n+\n+/* See also 'gfortran.dg/goacc/nested-reductions-2-routine.f90'. */\n+\n+#pragma acc routine gang\n+void acc_routine (void)\n+{\n+  int i, j, k, l, sum, diff;\n+\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+\tfor (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(-:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+      #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" })\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}"}, {"sha": "0999f8767c6ee0103db797f8f504cf24bb5fde0c", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-1-kernels.f90", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-kernels.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-kernels.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-kernels.f90?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -0,0 +1,55 @@\n+! Test cases of nested 'reduction' clauses expected to compile cleanly.\n+\n+! See also 'c-c++-common/goacc/nested-reductions-1-kernels.c'.\n+\n+subroutine acc_kernels ()\n+  implicit none (type, external)\n+  integer :: i, j, k, sum, diff\n+\n+  ! FIXME:  These tests are not meaningful yet because reductions in\n+  ! kernels regions are not supported yet.\n+  !$acc kernels\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+  !$acc end kernels\n+end subroutine acc_kernels"}, {"sha": "2915d6755dec4e67fcce0c57bfc548fe02a70a5f", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-1-parallel.f90", "status": "renamed", "additions": 3, "deletions": 139, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-parallel.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-parallel.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-parallel.f90?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -1,4 +1,6 @@\n-! Test cases of nested reduction loops that should compile cleanly.\n+! Test cases of nested 'reduction' clauses expected to compile cleanly.\n+\n+! See also 'c-c++-common/goacc/nested-reductions-1-parallel.c'.\n \n subroutine acc_parallel ()\n   implicit none (type, external)\n@@ -400,141 +402,3 @@ subroutine acc_parallel_loop_reduction ()\n     end do\n   end do\n end subroutine acc_parallel_loop_reduction\n-\n-! The same tests as above, but inside a routine construct.\n-subroutine acc_routine ()\n-  implicit none (type, external)\n-  !$acc routine gang\n-\n-  integer :: i, j, k, sum, diff\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      do j = 1, 10\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop collapse(2) reduction(+:sum)\n-    do i = 1, 10\n-      do j = 1, 10\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop reduction(+:sum)\n-      do j = 1, 10\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop collapse(2) reduction(+:sum)\n-      do j = 1, 10\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop reduction(+:sum)\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum) reduction(-:diff)\n-    do i = 1, 10\n-      !$acc loop reduction(+:sum)\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-\n-      !$acc loop reduction(-:diff)\n-      do j = 1, 10\n-        !$acc loop reduction(-:diff)\n-        do k = 1, 10\n-          diff = 1\n-        end do\n-      end do\n-    end do\n-end subroutine acc_routine\n-\n-subroutine acc_kernels ()\n-  implicit none (type, external)\n-  integer :: i, j, k, sum, diff\n-\n-  ! FIXME:  These tests are not meaningful yet because reductions in\n-  ! kernels regions are not supported yet.\n-  !$acc kernels\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      do j = 1, 10\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop reduction(+:sum)\n-      do j = 1, 10\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop reduction(+:sum)\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-  !$acc end kernels\n-end subroutine acc_kernels", "previous_filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions.f90"}, {"sha": "17a586152c72f951cbed77cb1652a79a4f7a3cb4", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-1-routine.f90", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-routine.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-routine.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-routine.f90?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -0,0 +1,88 @@\n+! Test cases of nested 'reduction' clauses expected to compile cleanly.\n+\n+! See also 'c-c++-common/goacc/nested-reductions-1-routine.c'.\n+\n+subroutine acc_routine ()\n+  implicit none (type, external)\n+  !$acc routine gang\n+\n+  integer :: i, j, k, sum, diff\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop collapse(2) reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2) reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+end subroutine acc_routine"}, {"sha": "edfd8625faf3c2336075a45e2d3ca15ff302e8bd", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-2-kernels.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-kernels.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-kernels.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-kernels.f90?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -0,0 +1,63 @@\n+! Test erroneous cases of nested 'reduction' clauses.\n+\n+! See also 'c-c++-common/goacc/nested-reductions-2-kernels.c'.\n+\n+subroutine acc_kernels ()\n+  integer :: i, j, k, sum, diff\n+\n+  ! FIXME:  No diagnostics are produced for these loops because reductions\n+  ! in kernels regions are not supported yet.\n+  !$acc kernels\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)\n+      do j = 1, 10\n+        !$acc loop\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+  !$acc end kernels\n+end subroutine acc_kernels"}, {"sha": "8fa2cabd35fa18f5aa81734296a00a51f4fcf34d", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-2-parallel.f90", "status": "renamed", "additions": 3, "deletions": 178, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-parallel.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-parallel.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-parallel.f90?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -1,4 +1,6 @@\n-! Test erroneous cases of nested reduction loops.\n+! Test erroneous cases of nested 'reduction' clauses.\n+\n+! See also 'c-c++-common/goacc/nested-reductions-2-parallel.c'.\n \n subroutine acc_parallel ()\n   implicit none (type, external)\n@@ -495,180 +497,3 @@ subroutine acc_parallel_loop_reduction ()\n     end do\n   end do\n end subroutine acc_parallel_loop_reduction\n-\n-! The same tests as above, but inside a routine construct.\n-subroutine acc_routine ()\n-  implicit none (type, external)\n-  !$acc routine gang\n-  integer :: i, j, k, l, sum, diff\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-      do j = 1, 10\n-        do k = 1, 10\n-          !$acc loop reduction(+:sum)\n-          do l = 1, 10\n-            sum = 1\n-          end do\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-      do j = 1, 10\n-        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n-        do k = 1, 10\n-          !$acc loop reduction(+:sum)\n-          do l = 1, 10\n-            sum = 1\n-          end do\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n-      do j = 1, 10\n-        !$acc loop reduction(-:sum)\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n-      do j = 1, 10\n-        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n-        do k = 1, 10\n-          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n-          do l = 1, 10\n-            sum = 1\n-          end do\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n-        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n-        do k = 1, 10\n-          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n-          do l = 1, 10\n-            sum = 1\n-          end do\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum) reduction(-:diff)\n-    do i = 1, 10\n-      !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-\n-      !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n-      do j = 1, 10\n-        !$acc loop reduction(-:diff)\n-        do k = 1, 10\n-            diff = 1\n-        end do\n-      end do\n-    end do\n-end subroutine acc_routine\n-\n-subroutine acc_kernels ()\n-  integer :: i, j, k, sum, diff\n-\n-  ! FIXME:  No diagnostics are produced for these loops because reductions\n-  ! in kernels regions are not supported yet.\n-  !$acc kernels\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      do j = 1, 10\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop\n-      do j = 1, 10\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop reduction(-:diff)\n-      do j = 1, 10\n-        !$acc loop\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-\n-    !$acc loop reduction(+:sum)\n-    do i = 1, 10\n-      !$acc loop reduction(-:sum)\n-      do j = 1, 10\n-        !$acc loop reduction(+:sum)\n-        do k = 1, 10\n-          sum = 1\n-        end do\n-      end do\n-    end do\n-  !$acc end kernels\n-end subroutine acc_kernels", "previous_filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-warn.f90"}, {"sha": "cc7802ecd10bf5a6dff0a10907c1baa9022effdd", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-2-routine.f90", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-routine.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf3e94efe774b8c0539d344130a7b25f50a881/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-routine.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-routine.f90?ref=fedf3e94efe774b8c0539d344130a7b25f50a881", "patch": "@@ -0,0 +1,119 @@\n+! Test erroneous cases of nested 'reduction' clauses.\n+\n+! See also 'c-c++-common/goacc/nested-reductions-2-routine.c'.\n+\n+subroutine acc_routine ()\n+  implicit none (type, external)\n+  !$acc routine gang\n+  integer :: i, j, k, l, sum, diff\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+            diff = 1\n+        end do\n+      end do\n+    end do\n+end subroutine acc_routine"}]}