{"sha": "1e3ca17d525c2da3302faa277e8fa90500851ca2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUzY2ExN2Q1MjVjMmRhMzMwMmZhYTI3N2U4ZmE5MDUwMDg1MWNhMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-01T13:10:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-01T13:10:12Z"}, "message": "forward_list.h (forward_list<>::resize(size_type), [...]): Only declare.\n\n2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/forward_list.h (forward_list<>::resize(size_type),\n\tforward_list(size_type)): Only declare.\n\t* include/bits/forward_list.tcc (forward_list<>::resize(size_type),\n\tforward_list(size_type)): Define, don't assume CopyConstructible.\n\t* testsuite/23_containers/forward_list/cons/10.cc: New.\n\t* testsuite/23_containers/forward_list/modifiers/6.cc: Likewis.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Adjust dg-error line numbers.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\n\t* include/bits/forward_list.h: Use _M_get_Node_allocator throughout.\n\nFrom-SVN: r156426", "tree": {"sha": "128530f0def7d66d7ffa67a25ad568fb55f31215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128530f0def7d66d7ffa67a25ad568fb55f31215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e3ca17d525c2da3302faa277e8fa90500851ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3ca17d525c2da3302faa277e8fa90500851ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e3ca17d525c2da3302faa277e8fa90500851ca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3ca17d525c2da3302faa277e8fa90500851ca2/comments", "author": null, "committer": null, "parents": [{"sha": "eb752658bf72a47ef5bf0c91dc418b4b1c7d61f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb752658bf72a47ef5bf0c91dc418b4b1c7d61f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb752658bf72a47ef5bf0c91dc418b4b1c7d61f3"}], "stats": {"total": 193, "additions": 173, "deletions": 20}, "files": [{"sha": "a3e0a4249639335b9bb02196cd797894150323ce", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1e3ca17d525c2da3302faa277e8fa90500851ca2", "patch": "@@ -1,3 +1,22 @@\n+2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/forward_list.h (forward_list<>::resize(size_type),\n+\tforward_list(size_type)): Only declare.\n+\t* include/bits/forward_list.tcc (forward_list<>::resize(size_type),\n+\tforward_list(size_type)): Define, don't assume CopyConstructible.\n+\t* testsuite/23_containers/forward_list/cons/10.cc: New.\n+\t* testsuite/23_containers/forward_list/modifiers/6.cc: Likewis.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Adjust dg-error line numbers.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n+\t* include/bits/forward_list.h: Use _M_get_Node_allocator throughout.\n+\n 2010-01-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/23_containers/array/requirements/exception/"}, {"sha": "d7005e828c5959950aa4df5585b593c6c373b32b", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=1e3ca17d525c2da3302faa277e8fa90500851ca2", "patch": "@@ -442,17 +442,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { }\n \n       /**\n-       *  @brief  Creates a %forward_list with copies of the default element\n-       *          type.\n+       *  @brief  Creates a %forward_list with default constructed elements.\n        *  @param  n  The number of elements to initially create.\n        *\n-       *  This constructor fills the %forward_list with @a n copies of\n-       *  the default value.\n+       *  This constructor creates the %forward_list with @a n default\n+       *  constructed elements.\n        */\n       explicit\n-      forward_list(size_type __n)\n-      : _Base()\n-      { _M_fill_initialize(__n, value_type()); }\n+      forward_list(size_type __n);\n \n       /**\n        *  @brief  Creates a %forward_list with copies of an exemplar element.\n@@ -497,7 +494,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  object used by @a list.\n        */\n       forward_list(const forward_list& __list)\n-      : _Base(__list.get_allocator())\n+      : _Base(__list._M_get_Node_allocator())\n       { _M_initialize_dispatch(__list.begin(), __list.end(), __false_type()); }\n \n       /**\n@@ -870,7 +867,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       iterator\n       insert_after(const_iterator __pos, size_type __n, const _Tp& __val)\n       {\n-        forward_list __tmp(__n, __val, this->get_allocator());\n+        forward_list __tmp(__n, __val, this->_M_get_Node_allocator());\n         splice_after(__pos, std::move(__tmp));\n \treturn iterator(__const_pointer_cast<typename _Node_base::_Pointer>\n \t\t\t(__pos._M_node));\n@@ -895,7 +892,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         insert_after(const_iterator __pos,\n                      _InputIterator __first, _InputIterator __last)\n         {\n-          forward_list __tmp(__first, __last, this->get_allocator());\n+          forward_list __tmp(__first, __last, this->_M_get_Node_allocator());\n           splice_after(__pos, std::move(__tmp));\n \t  return iterator(__const_pointer_cast<typename _Node_base::_Pointer>\n \t\t\t  (__pos._M_node));\n@@ -918,7 +915,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       iterator\n       insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n       {\n-        forward_list __tmp(__il, this->get_allocator());\n+        forward_list __tmp(__il, this->_M_get_Node_allocator());\n         splice_after(__pos, std::move(__tmp));\n \treturn iterator(__const_pointer_cast<typename _Node_base::_Pointer>\n \t\t\t(__pos._M_node));\n@@ -993,12 +990,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  This function will %resize the %forward_list to the specified\n        *  number of elements.  If the number is smaller than the\n        *  %forward_list's current size the %forward_list is truncated,\n-       *  otherwise the %forward_list is extended and new elements are\n-       *  populated with given data.\n+       *  otherwise the %forward_list is extended and the new elements\n+       *  are default constructed.\n        */\n       void\n-      resize(size_type __sz)\n-      { resize(__sz, _Tp()); }\n+      resize(size_type __sz);\n \n       /**\n        *  @brief Resizes the %forward_list to the specified number of"}, {"sha": "685e533c385550a2e261bf0e262e90606687a82d", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=1e3ca17d525c2da3302faa277e8fa90500851ca2", "patch": "@@ -1,6 +1,6 @@\n // <forward_list.tcc> -*- C++ -*-\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -174,6 +174,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         }\n     }\n \n+  template<typename _Tp, typename _Alloc>\n+    forward_list<_Tp, _Alloc>::\n+    forward_list(size_type __n)\n+    : _Base()\n+    {\n+      typename _Node_base::_Pointer __to = &this->_M_impl._M_head;\n+      for (; __n > 0; --__n)\n+        {\n+          __to->_M_next = this->_M_create_node();\n+          __to = __to->_M_next;\n+        }\n+    }\n+\n   template<typename _Tp, typename _Alloc>\n     forward_list<_Tp, _Alloc>&\n     forward_list<_Tp, _Alloc>::\n@@ -201,6 +214,28 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return *this;\n     }\n \n+  template<typename _Tp, typename _Alloc>\n+    void\n+    forward_list<_Tp, _Alloc>::\n+    resize(size_type __sz)\n+    {\n+      iterator __k = before_begin();\n+\n+      size_type __len = 0;\n+      while (__k._M_next() != end() && __len < __sz)\n+        {\n+          ++__k;\n+          ++__len;\n+        }\n+      if (__len == __sz)\n+        erase_after(__k, end());\n+      else\n+\t{\n+\t  forward_list __tmp(__sz - __len);\n+\t  splice_after(__k, std::move(__tmp));\n+\t}\n+    }\n+\n   template<typename _Tp, typename _Alloc>\n     void\n     forward_list<_Tp, _Alloc>::"}, {"sha": "4e599dab6bcd9e70c42033fec66d56b08b4b0a2b", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/10.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F10.cc?ref=1e3ca17d525c2da3302faa277e8fa90500851ca2", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+\n+struct NoCopyConstructor\n+{\n+  NoCopyConstructor() : num(-1) { }\n+  NoCopyConstructor(const NoCopyConstructor&) = delete;\n+\n+  operator int() { return num; }\n+\n+private:\n+  int num;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::forward_list<NoCopyConstructor> fl(5);\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 5 );\n+  for(auto it = fl.begin(); it != fl.end(); ++it)\n+    VERIFY( *it == -1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "985f592e6028c6bb660c77d6a249b34605bb503f", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/modifiers/6.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F6.cc?ref=1e3ca17d525c2da3302faa277e8fa90500851ca2", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+\n+struct NoCopyConstructor\n+{\n+  NoCopyConstructor() : num(-1) { }\n+  NoCopyConstructor(const NoCopyConstructor&) = delete;\n+\n+  operator int() { return num; }\n+\n+private:\n+  int num;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::forward_list<NoCopyConstructor> fl;\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 0 );\n+\n+  fl.resize(10);\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 10 );\n+  for(auto it = fl.begin(); it != fl.end(); ++it)\n+    VERIFY( *it == -1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5351a5b07884987739aa82dcc26a2463ed7df93c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=1e3ca17d525c2da3302faa277e8fa90500851ca2", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "b624ab2356f0b03fd3b66c2a2d599a3d25a3ef7b", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=1e3ca17d525c2da3302faa277e8fa90500851ca2", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "0a593c83a91b992c019a6399613816ffd7f1f64c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=1e3ca17d525c2da3302faa277e8fa90500851ca2", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "4739ce77f753da7a7088e8bc5b7953853f10fee7", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3ca17d525c2da3302faa277e8fa90500851ca2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=1e3ca17d525c2da3302faa277e8fa90500851ca2", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}]}