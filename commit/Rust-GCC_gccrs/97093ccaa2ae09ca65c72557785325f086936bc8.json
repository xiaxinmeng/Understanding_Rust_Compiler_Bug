{"sha": "97093ccaa2ae09ca65c72557785325f086936bc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwOTNjY2FhMmFlMDljYTY1YzcyNTU3Nzg1MzI1ZjA4NjkzNmJjOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-31T05:52:40Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-31T05:52:40Z"}, "message": "(digest_init): Finish getting rid of tail.\n\nAlso get rid of old_tail_contents.  Don't set free_tree_list.\n(free_tree_list): Var deleted.\n\nFrom-SVN: r5047", "tree": {"sha": "36a3d2c706107539f9488b7e970370bd4462f24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36a3d2c706107539f9488b7e970370bd4462f24d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97093ccaa2ae09ca65c72557785325f086936bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97093ccaa2ae09ca65c72557785325f086936bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97093ccaa2ae09ca65c72557785325f086936bc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97093ccaa2ae09ca65c72557785325f086936bc8/comments", "author": null, "committer": null, "parents": [{"sha": "33558beb6ade3caee5803e93001d625d82877730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33558beb6ade3caee5803e93001d625d82877730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33558beb6ade3caee5803e93001d625d82877730"}], "stats": {"total": 32, "additions": 0, "deletions": 32}, "files": [{"sha": "2e0d0f61386e323589582484cb86f4390191c722", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97093ccaa2ae09ca65c72557785325f086936bc8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97093ccaa2ae09ca65c72557785325f086936bc8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=97093ccaa2ae09ca65c72557785325f086936bc8", "patch": "@@ -4803,20 +4803,6 @@ pedwarn_init (format, local, ofwhat)\n   pedwarn (format, buffer);\n }\n \f\n-/* Keep a pointer to the last free TREE_LIST node as we digest an initializer,\n-   so that we can reuse it.  This is set in digest_init, and used in\n-   process_init_constructor.\n-\n-   We will never keep more than one free TREE_LIST node here.  This is for\n-   two main reasons.  First, we take elements off the old list and add them\n-   to the new list one at a time, thus there should never be more than\n-   one free TREE_LIST at a time, and thus even if there is, we will never\n-   need more than one.  Secondly, to avoid dangling pointers to freed obstacks,\n-   we want to always ensure that we have either a pointer to a valid TREE_LIST\n-   within the current initializer, or else a pointer to null.  */\n-\n-static tree free_tree_list = NULL_TREE;\n-\n /* Digest the parser output INIT as an initializer for type TYPE.\n    Return a C expression of type TYPE to represent the initial value.\n \n@@ -4842,26 +4828,8 @@ digest_init (type, init, require_constant, constructor_constant)\n {\n   enum tree_code code = TREE_CODE (type);\n   tree element = 0;\n-  tree old_tail_contents;\n   tree inside_init = init;\n \n-  /* By default, assume we use one element from a list.\n-     We correct this later in the cases where it is not true.\n-\n-     Thus, we update TAIL now to point to the next element, and save the\n-     old value in OLD_TAIL_CONTENTS.  If we didn't actually use the first\n-     element, then we will reset TAIL before proceeding.  FREE_TREE_LIST\n-     is handled similarly.  */\n-\n-  if (tail)\n-    {\n-      old_tail_contents = *tail;\n-      *tail = TREE_CHAIN (*tail);\n-      free_tree_list = old_tail_contents;\n-    }\n-  else\n-    free_tree_list = 0;\n-\n   if (init == error_mark_node)\n     return init;\n "}]}