{"sha": "26f4b055d97804666d6d144b2af9b9dee0854354", "node_id": "C_kwDOANBUbNoAKDI2ZjRiMDU1ZDk3ODA0NjY2ZDZkMTQ0YjJhZjliOWRlZTA4NTQzNTQ", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2023-02-09T09:40:39Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2023-02-14T10:26:12Z"}, "message": "testsuite: adjust patterns in RISC-V tests to skip unwind table directives\n\ngcc/testsuite/\n\tPR target/108723\n\t* gcc.target/riscv/shorten-memrefs-1.c: Adjust patterns to skip\n\tover cfi directives.\n\t* gcc.target/riscv/shorten-memrefs-2.c: Likewise.\n\t* gcc.target/riscv/shorten-memrefs-3.c: Likewise.\n\t* gcc.target/riscv/shorten-memrefs-4.c: Likewise.\n\t* gcc.target/riscv/shorten-memrefs-5.c: Likewise.\n\t* gcc.target/riscv/shorten-memrefs-6.c: Likewise.\n\t* gcc.target/riscv/shorten-memrefs-8.c: Likewise.", "tree": {"sha": "f92f8365b7a1ffbc63ec1762aa28b91f2c83d47b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f92f8365b7a1ffbc63ec1762aa28b91f2c83d47b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f4b055d97804666d6d144b2af9b9dee0854354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f4b055d97804666d6d144b2af9b9dee0854354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f4b055d97804666d6d144b2af9b9dee0854354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f4b055d97804666d6d144b2af9b9dee0854354/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8175869ca94c600e64e27b7676787b2a398f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8175869ca94c600e64e27b7676787b2a398f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8175869ca94c600e64e27b7676787b2a398f6e"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "cce7c80f6c15ea6533f8689c26d8782e429fc8a8", "filename": "gcc/testsuite/gcc.target/riscv/shorten-memrefs-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-1.c?ref=26f4b055d97804666d6d144b2af9b9dee0854354", "patch": "@@ -23,5 +23,5 @@ store2z (long long *array)\n   array[203] = 0;\n }\n \n-/* { dg-final { scan-assembler-not \"store1z:\\n\\taddi\" } } */\n-/* { dg-final { scan-assembler-not \"store2z:\\n\\taddi\" } } */\n+/* { dg-final { scan-assembler-not \"store1z:\\n(\\t?\\\\.\\[^\\n\\]*\\n)\\taddi\" } } */\n+/* { dg-final { scan-assembler-not \"store2z:\\n(\\t?\\\\.\\[^\\n\\]*\\n)\\taddi\" } } */"}, {"sha": "a9ddb797d06ab93b4934318ab54bfa86567b32ca", "filename": "gcc/testsuite/gcc.target/riscv/shorten-memrefs-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-2.c?ref=26f4b055d97804666d6d144b2af9b9dee0854354", "patch": "@@ -44,9 +44,9 @@ load2r (long long *array)\n   return a;\n }\n \n-/* { dg-final { scan-assembler \"store1a:\\n\\taddi\" } } */\n+/* { dg-final { scan-assembler \"store1a:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\" } } */\n /* The sd insns in store2a are not rewritten because shorten_memrefs currently\n    only optimizes lw and sw.\n-/* { dg-final { scan-assembler \"store2a:\\n\\taddi\" { xfail riscv*-*-*  } } } */\n-/* { dg-final { scan-assembler \"load1r:\\n\\taddi\" } } */\n-/* { dg-final { scan-assembler \"load2r:\\n\\taddi\" } } */\n+/* { dg-final { scan-assembler \"store2a:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\" { xfail riscv*-*-*  } } } */\n+/* { dg-final { scan-assembler \"load1r:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\" } } */\n+/* { dg-final { scan-assembler \"load2r:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\" } } */"}, {"sha": "3d561124b8189f1b0b67f51130e2c98eb2d3cbb3", "filename": "gcc/testsuite/gcc.target/riscv/shorten-memrefs-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-3.c?ref=26f4b055d97804666d6d144b2af9b9dee0854354", "patch": "@@ -36,5 +36,5 @@ load2a (long long a0, long long a1, long long a2, long long a3, long long a4,\n   return sub2 (a0, a1, a2, a3, a4, 0, a);\n }\n \n-/* { dg-final { scan-assembler-not \"load1a:\\n\\taddi\" { xfail riscv*-*-* } } } */\n+/* { dg-final { scan-assembler-not \"load1a:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\" { xfail riscv*-*-* } } } */\n /* { dg-final { scan-assembler-not \"load2a:\\n.*addi\\[ \\t\\]*\\[at\\]\\[0-9\\],\\[at\\]\\[0-9\\],\\[0-9\\]*\" { xfail riscv*-*-*  } } } */"}, {"sha": "26decf085fbc594eb54c3cb3852ad1548efffb0f", "filename": "gcc/testsuite/gcc.target/riscv/shorten-memrefs-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-4.c?ref=26f4b055d97804666d6d144b2af9b9dee0854354", "patch": "@@ -23,5 +23,5 @@ store2z (long long *array)\n   array[203] = 0;\n }\n \n-/* { dg-final { scan-assembler-not \"store1z:\\n\\taddi\" } } */\n-/* { dg-final { scan-assembler-not \"store2z:\\n\\taddi\" } } */\n+/* { dg-final { scan-assembler-not \"store1z:\\n(\\t?\\\\.\\[^\\n\\]*\\n)\\taddi\" } } */\n+/* { dg-final { scan-assembler-not \"store2z:\\n(\\t?\\\\.\\[^\\n\\]*\\n)\\taddi\" } } */"}, {"sha": "11e858ed6da0fc9c5ef045a7ff8ff783729525d7", "filename": "gcc/testsuite/gcc.target/riscv/shorten-memrefs-5.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-5.c?ref=26f4b055d97804666d6d144b2af9b9dee0854354", "patch": "@@ -44,11 +44,11 @@ load2r (long long *array)\n   return a;\n }\n \n-/* { dg-final { scan-assembler \"store1a:\\n\\taddi\" } } */\n+/* { dg-final { scan-assembler \"store1a:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\" } } */\n /* The sd insns in store2a are not rewritten because shorten_memrefs currently\n    only optimizes lw and sw.\n-/* { dg-final { scan-assembler \"store2a:\\n\\taddi\" { xfail riscv*-*-* } } } */\n-/* { dg-final { scan-assembler \"load1r:\\n\\taddi\" } } */\n+/* { dg-final { scan-assembler \"store2a:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\" { xfail riscv*-*-* } } } */\n+/* { dg-final { scan-assembler \"load1r:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\" } } */\n /* The ld insns in load2r are not rewritten because shorten_memrefs currently\n    only optimizes lw and sw.\n-/* { dg-final { scan-assembler \"load2r:\\n\\taddi\" { xfail riscv*-*-* } } } */\n+/* { dg-final { scan-assembler \"load2r:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\" { xfail riscv*-*-* } } } */"}, {"sha": "b6539b76aafdc081a9e13f41996ccdbdba3e7daf", "filename": "gcc/testsuite/gcc.target/riscv/shorten-memrefs-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-6.c?ref=26f4b055d97804666d6d144b2af9b9dee0854354", "patch": "@@ -36,5 +36,5 @@ load2a (long long a0, long long a1, long long a2, long long a3, long long a4,\n   return sub2 (a0, a1, a2, a3, a4, 0, a);\n }\n \n-/* { dg-final { scan-assembler-not \"load1a:\\n\\taddi\" { xfail riscv*-*-* } } } */\n+/* { dg-final { scan-assembler-not \"load1a:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\" { xfail riscv*-*-* } } } */\n /* { dg-final { scan-assembler-not \"load2a:\\n.*addi\\[ \\t\\]*\\[at\\]\\[0-9\\],\\[at\\]\\[0-9\\],\\[0-9\\]*\" } } */"}, {"sha": "3ff6956b33e43dacca0f11d0832393192dc316b1", "filename": "gcc/testsuite/gcc.target/riscv/shorten-memrefs-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f4b055d97804666d6d144b2af9b9dee0854354/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshorten-memrefs-8.c?ref=26f4b055d97804666d6d144b2af9b9dee0854354", "patch": "@@ -23,6 +23,6 @@ load (char *p)\n   return a;\n }\n \n-/* { dg-final { scan-assembler \"store:\\n\\taddi\\ta\\[0-7\\],a\\[0-7\\],1\" } } */\n-/* { dg-final { scan-assembler \"load:\\n\\taddi\\ta\\[0-7\\],a\\[0-7\\],1\" } } */\n+/* { dg-final { scan-assembler \"store:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\\ta\\[0-7\\],a\\[0-7\\],1\" } } */\n+/* { dg-final { scan-assembler \"load:\\n(\\t?\\\\.\\[^\\n\\]*\\n)*\\taddi\\ta\\[0-7\\],a\\[0-7\\],1\" } } */\n "}]}