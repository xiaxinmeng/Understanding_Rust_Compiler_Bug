{"sha": "27d80140ec45347e4042fb9e1c1e86a08ce45d52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkODAxNDBlYzQ1MzQ3ZTQwNDJmYjllMWMxZTg2YTA4Y2U0NWQ1Mg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-11-04T08:12:09Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-11-04T08:12:09Z"}, "message": "unroll.c (calculate_giv_inc): Use find_last_value rather than just hoping the last instruction is the right SET.\n\n\t* unroll.c (calculate_giv_inc): Use find_last_value rather\n\tthan just hoping the last instruction is the right SET.\n\t[Fixes 990604-1.c on stormy16.]\n\nFrom-SVN: r46769", "tree": {"sha": "ffac8087938d67c9112369b7ccc976df3f3c1caf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffac8087938d67c9112369b7ccc976df3f3c1caf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d80140ec45347e4042fb9e1c1e86a08ce45d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d80140ec45347e4042fb9e1c1e86a08ce45d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d80140ec45347e4042fb9e1c1e86a08ce45d52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d80140ec45347e4042fb9e1c1e86a08ce45d52/comments", "author": null, "committer": null, "parents": [{"sha": "3eaaf577ce49b0572ef51a143d7540a0fed3e117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eaaf577ce49b0572ef51a143d7540a0fed3e117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eaaf577ce49b0572ef51a143d7540a0fed3e117"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "4d1baccfd6e1cfd6ce31a30d7cf6477dd46f709d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d80140ec45347e4042fb9e1c1e86a08ce45d52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d80140ec45347e4042fb9e1c1e86a08ce45d52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27d80140ec45347e4042fb9e1c1e86a08ce45d52", "patch": "@@ -1,5 +1,9 @@\n 2001-11-03  Geoffrey Keating  <geoffk@redhat.com>\n \n+\t* unroll.c (calculate_giv_inc): Use find_last_value rather\n+\tthan just hoping the last instruction is the right SET.\n+\t[Fixes 990604-1.c on stormy16.]\n+\n \t* config/stormy16/stormy16.h (LIB_SPEC): Don't supply any libgloss\n \tlibrary at all if -T is used.\n "}, {"sha": "c1d62383540f41da40bffaace2a81d61c8171b89", "filename": "gcc/unroll.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d80140ec45347e4042fb9e1c1e86a08ce45d52/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d80140ec45347e4042fb9e1c1e86a08ce45d52/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=27d80140ec45347e4042fb9e1c1e86a08ce45d52", "patch": "@@ -1556,7 +1556,7 @@ calculate_giv_inc (pattern, src_insn, regno)\n       /* SR sometimes computes the new giv value in a temp, then copies it\n \t to the new_reg.  */\n       src_insn = PREV_INSN (src_insn);\n-      pattern = PATTERN (src_insn);\n+      pattern = single_set (src_insn);\n       if (GET_CODE (SET_SRC (pattern)) != PLUS)\n \tabort ();\n \n@@ -1571,8 +1571,7 @@ calculate_giv_inc (pattern, src_insn, regno)\n     {\n       /* SR sometimes puts the constant in a register, especially if it is\n \t too big to be an add immed operand.  */\n-      src_insn = PREV_INSN (src_insn);\n-      increment = SET_SRC (PATTERN (src_insn));\n+      increment = find_last_value (increment, &src_insn, NULL_RTX, 0);\n \n       /* SR may have used LO_SUM to compute the constant if it is too large\n \t for a load immed operand.  In this case, the constant is in operand\n@@ -1598,8 +1597,8 @@ calculate_giv_inc (pattern, src_insn, regno)\n \t  rtx second_part = XEXP (increment, 1);\n \t  enum rtx_code code = GET_CODE (increment);\n \n-\t  src_insn = PREV_INSN (src_insn);\n-\t  increment = SET_SRC (PATTERN (src_insn));\n+\t  increment = find_last_value (XEXP (increment, 0), \n+\t\t\t\t       &src_insn, NULL_RTX, 0);\n \t  /* Don't need the last insn anymore.  */\n \t  delete_related_insns (get_last_insn ());\n \n@@ -1642,7 +1641,7 @@ calculate_giv_inc (pattern, src_insn, regno)\n \t  tries++;\n \n \t  src_insn = PREV_INSN (src_insn);\n-\t  pattern = PATTERN (src_insn);\n+\t  pattern = single_set (src_insn);\n \n \t  delete_related_insns (get_last_insn ());\n "}]}