{"sha": "f24745230fe28ddd92d28ff681bd95d10578e3b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0NzQ1MjMwZmUyOGRkZDkyZDI4ZmY2ODFiZDk1ZDEwNTc4ZTNiMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T10:55:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T10:55:17Z"}, "message": "[multiple changes]\n\n2017-04-27  Steve Baird  <baird@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Asynchronous_Select): Initialize the Cancel\n\tflag when it is declared in order to avoid confusing CodePeer about\n\tthe possibility of an uninitialized variable read.\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_dim.adb (Analyze_Dimension_Object_Declaration): There is\n\tno dimensionality error if the subtype of the expression is\n\tidentical to the nominal subtype in the declaration, even though\n\tthe expression itself may have been constant-folded and lack a\n\tdimension vector.\n\t* sem_dim.ads: Add comments on setting of dimension vectors and\n\tits interaction with node rewritings and side-effect removal.\n\n2017-04-27  Bob Duff  <duff@adacore.com>\n\n\t* debug.adb: Minor comment correction.\n\t* sem_dim.ads: Minor reformatting and typo fixes.\n\n2017-04-27  Bob Duff  <duff@adacore.com>\n\n\t* g-table.adb, g-table.adsa, scos.h: From the C side, access First and\n\tLast of the tables via function calls, rather than relying on layout\n\tof data structures.\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb: No wrapper in GNATprove mode.\n\n2017-04-27  Yannick Moy  <moy@adacore.com>\n\n\t* sem_res.adb (Resolve_Comparison_Op): Always\n\tevaluate comparisons between values of universal types.\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_elab.adb (Check_Internal_Call_Continue): Do not generate\n\tan elaboration counter nor a check when in GNATprove mode.\n\t* sem_util.adb (Build_Elaboration_Entity): Do not create an\n\telaboration counter when in GNATprove mode.\n\nFrom-SVN: r247317", "tree": {"sha": "b1127dd8d674d84780a7a616a3d3db7b2d875a35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1127dd8d674d84780a7a616a3d3db7b2d875a35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f24745230fe28ddd92d28ff681bd95d10578e3b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24745230fe28ddd92d28ff681bd95d10578e3b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24745230fe28ddd92d28ff681bd95d10578e3b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24745230fe28ddd92d28ff681bd95d10578e3b0/comments", "author": null, "committer": null, "parents": [{"sha": "78f2b7ce3aea49818ea97974cb41029f820d0a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f2b7ce3aea49818ea97974cb41029f820d0a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78f2b7ce3aea49818ea97974cb41029f820d0a99"}], "stats": {"total": 148, "additions": 124, "deletions": 24}, "files": [{"sha": "3e64117e84b82ce52ee0f819ab4151a1c9e458d7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -1,3 +1,46 @@\n+2017-04-27  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Asynchronous_Select): Initialize the Cancel\n+\tflag when it is declared in order to avoid confusing CodePeer about\n+\tthe possibility of an uninitialized variable read.\n+\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_dim.adb (Analyze_Dimension_Object_Declaration): There is\n+\tno dimensionality error if the subtype of the expression is\n+\tidentical to the nominal subtype in the declaration, even though\n+\tthe expression itself may have been constant-folded and lack a\n+\tdimension vector.\n+\t* sem_dim.ads: Add comments on setting of dimension vectors and\n+\tits interaction with node rewritings and side-effect removal.\n+\n+2017-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* debug.adb: Minor comment correction.\n+\t* sem_dim.ads: Minor reformatting and typo fixes.\n+\n+2017-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* g-table.adb, g-table.adsa, scos.h: From the C side, access First and\n+\tLast of the tables via function calls, rather than relying on layout\n+\tof data structures.\n+\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb: No wrapper in GNATprove mode.\n+\n+2017-04-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Comparison_Op): Always\n+\tevaluate comparisons between values of universal types.\n+\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_elab.adb (Check_Internal_Call_Continue): Do not generate\n+\tan elaboration counter nor a check when in GNATprove mode.\n+\t* sem_util.adb (Build_Elaboration_Entity): Do not create an\n+\telaboration counter when in GNATprove mode.\n+\n 2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n \n \t* freeze.adb: copy-paste typo."}, {"sha": "8822265c928d735f9517c1df4e87c0dc37221a69", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -848,8 +848,8 @@ package body Debug is\n    --      prefer specs with no bodies to specs with bodies, and between two\n    --      specs with bodies, prefers the one whose body is closer to being\n    --      able to be elaborated. This is a clear improvement, but we provide\n-   --      this debug flag in case of regressions. Note: -gnatdo is even older\n-   --      than -gnatdp.\n+   --      this debug flag in case of regressions. Note: -do is even older\n+   --      than -dp.\n \n    --  dp  Use old elaboration order preference. The new preference rules\n    --      elaborate all units within a strongly connected component together,"}, {"sha": "6a6766d86922c20a6a6cec042b08cb7e50ed60ef", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -7515,7 +7515,16 @@ package body Exp_Ch9 is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Cancel_Param,\n              Object_Definition   =>\n-               New_Occurrence_Of (Standard_Boolean, Loc)));\n+               New_Occurrence_Of (Standard_Boolean, Loc),\n+             Expression          =>\n+               New_Occurrence_Of (Standard_False, Loc),\n+               --  True would work equally well here. This initialization\n+               --  should be dead, but only because of things (e.g.,\n+               --  abortion deferral) that CodePeer doesn't know about.\n+               --  We want to avoid CodePeer complaints about a possible read\n+               --  of an uninitialized variable when this variable is read,\n+               --  so we initialize it here.\n+             Has_Init_Expression => True));\n \n          --  Remove and save the call to Call_Simple\n "}, {"sha": "c9e099e4511649f6de3e2849c10e8725252e8660", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -1114,10 +1114,13 @@ package body Exp_Util is\n             if Present (New_E) then\n                Rewrite (N, New_Occurrence_Of (New_E, Sloc (N)));\n \n-               --  If the entity is an overridden primitive, we must build a\n-               --  wrapper for the current inherited operation.\n+               --  If the entity is an overridden primitive and we are not\n+               --  in proof mode, we must build a wrapper for the current\n+               --  inherited operation.\n \n-               if Is_Subprogram (New_E) then\n+               if Is_Subprogram (New_E)\n+                 and then not GNATprove_Mode\n+               then\n                   Needs_Wrapper := True;\n                end if;\n             end if;"}, {"sha": "c5c5891336acafe35eebcf612e7e6fc08b795c70", "filename": "gcc/ada/g-table.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fg-table.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fg-table.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.adb?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2014, AdaCore                     --\n+--                     Copyright (C) 1998-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -116,6 +116,15 @@ package body GNAT.Table is\n       Last_Val := Last_Val - 1;\n    end Decrement_Last;\n \n+   -----------\n+   -- First --\n+   -----------\n+\n+   function First return Table_Index_Type is\n+   begin\n+      return Table_Low_Bound;\n+   end First;\n+\n    --------------\n    -- For_Each --\n    --------------"}, {"sha": "d27b32242245bd3fdeb96df14556ba68d656e638", "filename": "gcc/ada/g-table.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fg-table.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fg-table.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.ads?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2015, AdaCore                     --\n+--                     Copyright (C) 1998-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -154,8 +154,9 @@ package GNAT.Table is\n    --  Free all allocated memory for the table. A call to Init is required\n    --  before any use of this table after calling Free.\n \n-   First : constant Table_Index_Type := Table_Low_Bound;\n-   --  Export First as synonym for Low_Bound (parallel with use of Last)\n+   function First return Table_Index_Type;\n+   pragma Inline (First);\n+   --  Export First as synonym for Table_Low_Bound (parallel with use of Last)\n \n    procedure Set_Last (New_Val : Table_Index_Type);\n    pragma Inline (Set_Last);"}, {"sha": "6c1f545af9577a21200035b9d85933ddba5b83d3", "filename": "gcc/ada/scos.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fscos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fscos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.h?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *            Copyright (C) 2014, Free Software Foundation, Inc.            *\n+ *           Copyright (C) 2014-2017, Free Software Foundation, Inc.        *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -48,11 +48,11 @@ typedef struct SCO_Unit_Table_Entry *SCO_Unit_Table_Type;\n extern SCO_Unit_Table_Type scos__sco_unit_table__table;\n #define SCO_Unit_Table scos__sco_unit_table__table\n \n-extern Int scos__sco_unit_table__min;\n-#define SCO_Unit_Table_Min scos__sco_unit_table__min\n+extern Int scos__sco_unit_table__first(void);\n+#define SCO_Unit_Table_First scos__sco_unit_table__first\n \n-extern Int scos__sco_unit_table__last_val;\n-#define SCO_Unit_Table_Last_Val scos__sco_unit_table__last_val\n+extern Int scos__sco_unit_table__last(void);\n+#define SCO_Unit_Table_Last scos__sco_unit_table__last\n \n \n /* SCOs table:  */\n@@ -77,11 +77,11 @@ typedef struct SCO_Table_Entry *SCO_Table_Type;\n extern SCO_Table_Type scos__sco_table__table;\n #define SCO_Table scos__sco_table__table\n \n-extern Int scos__sco_table__min;\n-#define SCO_Table_Min scos__sco_table__min\n+extern Int scos__sco_table__first(void);\n+#define SCO_Table_First scos__sco_table__first\n \n-extern Int scos__sco_table__last_val;\n-#define SCO_Table_Last_Val scos__sco_table__last_val\n+extern Int scos__sco_table__last(void);\n+#define SCO_Table_Last scos__sco_table__last\n \n #ifdef __cplusplus\n }"}, {"sha": "cac2af5301155bb7884f774c0a6e66562f383eb4", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -2171,6 +2171,12 @@ package body Sem_Dim is\n \n                Set_Dimensions (Id, Dim_Of_Expr);\n \n+            --  Expression may have been constant-folded. If nominal type\n+            --  has dimensions, verify that expression has same type.\n+\n+            elsif Exists (Dim_Of_Etyp) and then Etype (Expr) = Etyp then\n+               null;\n+\n             --  For all other cases, issue an error message\n \n             else"}, {"sha": "bad3bf22b85cd27ae56f15195afe7c1947d44361", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -83,6 +83,16 @@\n --  Phase 2 is called only when the node allows a dimension (see body of\n --  Sem_Dim to get the list of nodes that permit dimensions).\n \n+--  In principle every node that is a component of a floating-point expression\n+--  may have a dimension vector. However, the dimensionality checking is for\n+--  the most part a bottom-up tree traversal, and the dimensions of operands\n+--  become irrelevant once the dimensions of an operation have been computed.\n+--  To minimize space use, the dimensions of operands are removed after the\n+--  computation of the dimensions of the parent operation. This may complicate\n+--  the analysis of nodes that have been constant-folded or otherwise rewritten\n+--  when removing side effects. In such cases, the (sub)type of the expression\n+--  is used to determine the applicable dimensions.\n+\n with Types; use Types;\n \n package Sem_Dim is"}, {"sha": "6bf6dfdb728e3af586c11f985e0ded90ec274dbd", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -2573,9 +2573,15 @@ package body Sem_Elab is\n       --  Call is not at outer level\n \n       else\n+         --  Do not generate elaboration checks in GNATprove mode because the\n+         --  elaboration counter and the check are both forms of expansion.\n+\n+         if GNATprove_Mode then\n+            null;\n+\n          --  Deal with dynamic elaboration check\n \n-         if not Elaboration_Checks_Suppressed (E) then\n+         elsif not Elaboration_Checks_Suppressed (E) then\n             Set_Elaboration_Entity_Required (E);\n \n             --  Case of no elaboration entity allocated yet"}, {"sha": "132fe67dadad2341be7cc545d86ca8cdd39cc622", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -6927,8 +6927,15 @@ package body Sem_Res is\n       --  this Eval call may change N to True/False. Skip this evaluation\n       --  inside assertions, in order to keep assertions as written by users\n       --  for tools that rely on these, e.g. GNATprove for loop invariants.\n-\n-      if In_Assertion_Expr = 0 then\n+      --  Except evaluation is still performed even inside assertions for\n+      --  comparisons between values of universal type, which are useless\n+      --  for static analysis tools, and not supported even by GNATprove.\n+\n+      if In_Assertion_Expr = 0\n+        or else (Is_Universal_Numeric_Type (Etype (L))\n+                   and then\n+                 Is_Universal_Numeric_Type (Etype (R)))\n+      then\n          Eval_Relational_Op (N);\n       end if;\n    end Resolve_Comparison_Op;"}, {"sha": "200417a5de0ec921e8b03967f1b4800dc88629dd", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24745230fe28ddd92d28ff681bd95d10578e3b0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f24745230fe28ddd92d28ff681bd95d10578e3b0", "patch": "@@ -1584,7 +1584,13 @@ package body Sem_Util is\n       elsif ASIS_Mode then\n          return;\n \n-      --  See if we need elaboration entity.\n+      --  Do not generate an elaboration entity in GNATprove move because the\n+      --  elaboration counter is a form of expansion.\n+\n+      elsif GNATprove_Mode then\n+         return;\n+\n+      --  See if we need elaboration entity\n \n       --  We always need an elaboration entity when preserving control flow, as\n       --  we want to remain explicit about the unit's elaboration order."}]}