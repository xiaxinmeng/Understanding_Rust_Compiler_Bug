{"sha": "ffdeea47b90c0c898219ac96df667012fe9fb739", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZkZWVhNDdiOTBjMGM4OTgyMTlhYzk2ZGY2NjcwMTJmZTlmYjczOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-01-29T12:09:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-01-29T12:09:37Z"}, "message": "re PR other/1502 (Nonexistent -W options not diagnosed)\n\n\tPR other/1502:\n\t* cppinit.c (cpp_handle_option): Add ignore argument, if it is zero,\n\tdon't ignore unrecognized -W* options.\n\t(cpp_handle_options): Pass 1 as last argument to cpp_handle_option.\n\t* cpplib.h (cpp_handle_option): Adjust prototype.\n\t* c-decl.c (c_decode_options): Pass 0 as last argument to\n\tcpp_handle_option.\n\n\tPR c/2896:\n\t* gcc.c (cpp_unique_options): Split from cpp_options.\n\t(cpp_options): Source cpp_unique_options.\n\t(default_compilers): Use cpp_unique_options instead of cpp_options\n\twhen used together with cc1_options.\n\t(static_specs): Add cpp_unique_options.\n\t* objc/lang-specs.h: Use cpp_unique_options instead of cpp_options\n\twhen used together with cc1_options.\n\n\t* decl2.c (cxx_decode_option): Pass 0 as last argument to\n\tcpp_handle_option.\n\t* lang-specs.h: Use cpp_unique_options instead of cpp_options\n\twhen used together with cc1_options.\n\nFrom-SVN: r49315", "tree": {"sha": "1cb6969668582a88e15febb0d2435a1ddd4ca215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cb6969668582a88e15febb0d2435a1ddd4ca215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffdeea47b90c0c898219ac96df667012fe9fb739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffdeea47b90c0c898219ac96df667012fe9fb739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffdeea47b90c0c898219ac96df667012fe9fb739", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffdeea47b90c0c898219ac96df667012fe9fb739/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8b98c66af69365e645718d3bf72ccabaa6ef2ab"}], "stats": {"total": 69, "additions": 52, "deletions": 17}, "files": [{"sha": "d201d87e3e5d785abcee32f932356178bf81536c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffdeea47b90c0c898219ac96df667012fe9fb739", "patch": "@@ -1,3 +1,22 @@\n+2002-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/1502:\n+\t* cppinit.c (cpp_handle_option): Add ignore argument, if it is zero,\n+\tdon't ignore unrecognized -W* options.\n+\t(cpp_handle_options): Pass 1 as last argument to cpp_handle_option.\n+\t* cpplib.h (cpp_handle_option): Adjust prototype.\n+\t* c-decl.c (c_decode_options): Pass 0 as last argument to\n+\tcpp_handle_option.\n+\n+\tPR c/2896:\n+\t* gcc.c (cpp_unique_options): Split from cpp_options.\n+\t(cpp_options): Source cpp_unique_options.\n+\t(default_compilers): Use cpp_unique_options instead of cpp_options\n+\twhen used together with cc1_options.\n+\t(static_specs): Add cpp_unique_options.\n+\t* objc/lang-specs.h: Use cpp_unique_options instead of cpp_options\n+\twhen used together with cc1_options.\n+\n 2002-01-29  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300-protos.h: Update the prototype of"}, {"sha": "54ec18c8f192f866b0c1ce4a0a7b23e27055e475", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ffdeea47b90c0c898219ac96df667012fe9fb739", "patch": "@@ -463,7 +463,7 @@ c_decode_option (argc, argv)\n   int strings_processed;\n   char *p = argv[0];\n \n-  strings_processed = cpp_handle_option (parse_in, argc, argv);\n+  strings_processed = cpp_handle_option (parse_in, argc, argv, 0);\n \n   if (!strcmp (p, \"-ftraditional\") || !strcmp (p, \"-traditional\"))\n     {"}, {"sha": "92f5a4a96d6f289ed95a7353d71d14b8b15bfdca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ffdeea47b90c0c898219ac96df667012fe9fb739", "patch": "@@ -1,3 +1,10 @@\n+2002-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* decl2.c (cxx_decode_option): Pass 0 as last argument to\n+\tcpp_handle_option.\n+\t* lang-specs.h: Use cpp_unique_options instead of cpp_options\n+\twhen used together with cc1_options.\n+\n 2002-01-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5132"}, {"sha": "70fcf45278671735036f15e616678ae896b6290a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ffdeea47b90c0c898219ac96df667012fe9fb739", "patch": "@@ -493,7 +493,7 @@ cxx_decode_option (argc, argv)\n   int strings_processed;\n   const char *p = argv[0];\n \n-  strings_processed = cpp_handle_option (parse_in, argc, argv);\n+  strings_processed = cpp_handle_option (parse_in, argc, argv, 0);\n \n   if (!strcmp (p, \"-ftraditional\") || !strcmp (p, \"-traditional\"))\n     /* ignore */;"}, {"sha": "e48bf7436f10bbaeebea2658f6bc56cf58b1fc61", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=ffdeea47b90c0c898219ac96df667012fe9fb739", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for specs for C++.\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -49,7 +49,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t    %{ansi:-D__STRICT_ANSI__ -trigraphs -$}\\\n \t\t    %(cpp_options) %b.ii \\n}\\\n       cc1plus %{save-temps:-fpreprocessed %b.ii}\\\n-              %{!save-temps:%(cpp_options)\\\n+              %{!save-temps:%(cpp_unique_options)\\\n \t\t\t    %{!no-gcc:-D__GNUG__=%v1} \\\n        \t\t\t    %{!Wno-deprecated:-D__DEPRECATED}\\\n \t\t\t    %{!fno-exceptions:-D__EXCEPTIONS}\\"}, {"sha": "ab3dad78d90b11f3e27886ef7b9ce632a4ecf262", "filename": "gcc/cppinit.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=ffdeea47b90c0c898219ac96df667012fe9fb739", "patch": "@@ -1317,12 +1317,14 @@ parse_option (input)\n \n /* Handle one command-line option in (argc, argv).\n    Can be called multiple times, to handle multiple sets of options.\n+   If ignore is non-zero, this will ignore unrecognized -W* options.\n    Returns number of strings consumed.  */\n int\n-cpp_handle_option (pfile, argc, argv)\n+cpp_handle_option (pfile, argc, argv, ignore)\n      cpp_reader *pfile;\n      int argc;\n      char **argv;\n+     int ignore;\n {\n   int i = 0;\n   struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n@@ -1733,6 +1735,8 @@ cpp_handle_option (pfile, argc, argv)\n \t    CPP_OPTION (pfile, warnings_are_errors) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-system-headers\"))\n \t    CPP_OPTION (pfile, warn_system_headers) = 0;\n+\t  else if (! ignore)\n+\t    return i;\n \t  break;\n  \t}\n     }\n@@ -1754,7 +1758,7 @@ cpp_handle_options (pfile, argc, argv)\n \n   for (i = 0; i < argc; i += strings_processed)\n     {\n-      strings_processed = cpp_handle_option (pfile, argc - i, argv + i);\n+      strings_processed = cpp_handle_option (pfile, argc - i, argv + i, 1);\n       if (strings_processed == 0)\n \tbreak;\n     }"}, {"sha": "eeeecc0e3ae8052f97beaa2a4dd81e0994df1528", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=ffdeea47b90c0c898219ac96df667012fe9fb739", "patch": "@@ -473,7 +473,7 @@ extern void cpp_set_callbacks PARAMS ((cpp_reader *, cpp_callbacks *));\n    structure reliable.  Options processing is not completed until you\n    call cpp_finish_options.  */\n extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n-extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n+extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **, int));\n extern void cpp_post_options PARAMS ((cpp_reader *));\n \n /* This function reads the file, but does not start preprocessing.  It"}, {"sha": "8968af6d0cf3a6b2e3e8ca3979116a98334c70cc", "filename": "gcc/gcc.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ffdeea47b90c0c898219ac96df667012fe9fb739", "patch": "@@ -673,10 +673,9 @@ static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;\n static const char *trad_capable_cpp =\n \"%{traditional|ftraditional|traditional-cpp:trad}cpp0\";\n \n-static const char *cpp_options =\n+static const char *cpp_unique_options =\n \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n- %{std*} %{nostdinc*}\\\n- %{C} %{v} %{I*} %{P} %{$} %I\\\n+ %{nostdinc*} %{C} %{v} %{I*} %{P} %{$} %I\\\n  %{MD:-M -MF %W{!o: %b.d}%W{o*:%.d%*}}\\\n  %{MMD:-MM -MF %W{!o: %b.d}%W{o*:%.d%*}}\\\n  %{M} %{MM} %W{MF*} %{MG} %{MP} %{MQ*} %{MT*} %{M|MD|MM|MMD:%{o*:-MQ %*}}\\\n@@ -686,12 +685,17 @@ static const char *cpp_options =\n  %{fno-inline|O0|!O*:-D__NO_INLINE__} %{ffast-math:-D__FAST_MATH__}\\\n  %{fshort-wchar:-U__WCHAR_TYPE__ -D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n  %{ffreestanding:-D__STDC_HOSTED__=0} %{fno-hosted:-D__STDC_HOSTED__=0}\\\n- %{!ffreestanding:%{!fno-hosted:-D__STDC_HOSTED__=1}}\\\n+ %{!ffreestanding:%{!fno-hosted:-D__STDC_HOSTED__=1}} %{remap}\\\n+ %{g3:-dD} %{H} %C %{D*&U*&A*} %{i*} %Z %i\\\n+ %{E:%{!M*:%W{o*}}}\";\n+\n+/* This contains cpp options which are common with cc1_options and are passed\n+   only when preprocessing only to avoid duplication.  */\n+static const char *cpp_options =\n+\"%(cpp_unique_options) %{std*} %{d*} %{W*} %{w} %{pedantic*}\\\n  %{fshow-column} %{fno-show-column}\\\n  %{fleading-underscore} %{fno-leading-underscore}\\\n- %{fno-operator-names} %{ftabstop=*} %{remap}\\\n- %{g3:-dD} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*&U*&A*} %{i*} %Z %i\\\n- %{E:%{!M*:%W{o*}}}\";\n+ %{fno-operator-names} %{ftabstop=*}\";\n \n /* NB: This is shared amongst all front-ends.  */\n static const char *cc1_options =\n@@ -840,7 +844,7 @@ static const struct compiler default_compilers[] =\n \t\ttradcpp0 -lang-c %{ansi:-std=c89} %(cpp_options) %{!pipe:%g.i} |\\n\\\n \t\t    cc1 -fpreprocessed %{!pipe:%g.i} %(cc1_options)}\\\n \t    %{!traditional:%{!ftraditional:%{!traditional-cpp:\\\n-\t\tcc1 -lang-c %{ansi:-std=c89} %(cpp_options) %(cc1_options)}}}}\\\n+\t\tcc1 -lang-c %{ansi:-std=c89} %(cpp_unique_options) %(cc1_options)}}}}\\\n         %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n   {\"-\",\n    \"%{!E:%e-E required when input is from standard input}\\\n@@ -1367,6 +1371,7 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"invoke_as\",\t\t&invoke_as),\n   INIT_STATIC_SPEC (\"cpp\",\t\t\t&cpp_spec),\n   INIT_STATIC_SPEC (\"cpp_options\",\t\t&cpp_options),\n+  INIT_STATIC_SPEC (\"cpp_unique_options\",\t&cpp_unique_options),\n   INIT_STATIC_SPEC (\"trad_capable_cpp\",\t\t&trad_capable_cpp),\n   INIT_STATIC_SPEC (\"cc1\",\t\t\t&cc1_spec),\n   INIT_STATIC_SPEC (\"cc1_options\",\t\t&cc1_options),"}, {"sha": "2abf6337a59b9bfc22afbdc1b574d9d76d306d5c", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdeea47b90c0c898219ac96df667012fe9fb739/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=ffdeea47b90c0c898219ac96df667012fe9fb739", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for specs for Objective-C.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -35,7 +35,7 @@ Boston, MA 02111-1307, USA.  */\n \t    tradcpp0 -lang-objc %{ansi:-std=c89} %(cpp_options) %{!pipe:%g.mi} |\\n\\\n \t    cc1obj -fpreprocessed %{!pipe:%g.mi} %(cc1_options) %{gen-decls}}\\\n \t  %{!traditional:%{!ftraditional:%{!traditional-cpp:\\\n-\t    cc1obj %{ansi:-std=c89} %(cpp_options) %(cc1_options) %{gen-decls}}}}}\\\n+\t    cc1obj %{ansi:-std=c89} %(cpp_unique_options) %(cc1_options) %{gen-decls}}}}}\\\n         %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n   {\".mi\", \"@objc-cpp-output\", 0},\n   {\"@objc-cpp-output\","}]}