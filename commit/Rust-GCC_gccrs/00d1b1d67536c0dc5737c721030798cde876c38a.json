{"sha": "00d1b1d67536c0dc5737c721030798cde876c38a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkMWIxZDY3NTM2YzBkYzU3MzdjNzIxMDMwNzk4Y2RlODc2YzM4YQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-08-17T04:00:21Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-08-17T04:00:21Z"}, "message": "c-typeck.c (build_function_call): Call fold_buildN_initializer or fold_buildN instead of buildN then...\n\n2005-08-16  James A. Morrison  <phython@gcc.gnu.org>\n\n        * c-typeck.c (build_function_call): Call fold_buildN_initializer or\n        fold_buildN instead of buildN then fold_initializer or fold.\n        (build_unary_op): Likewise.\n        (build_binary_op): Likewise.\n        * fold-const.c (fold_initializer): Remove.\n        (fold_build1_initializer): New function.\n        (fold_build2_initializer): New function.\n        (fold_build3_initializer): New function.\n        * tree.h (fold_initializer): Remove.\n        (fold_build1_initializer): New function.\n        (fold_build2_initializer): New function.\n        (fold_build3_initializer): New function.\n\nFrom-SVN: r103201", "tree": {"sha": "2bb5d9e1189e47b349ef13e5d10f2a801b6115b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bb5d9e1189e47b349ef13e5d10f2a801b6115b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d1b1d67536c0dc5737c721030798cde876c38a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d1b1d67536c0dc5737c721030798cde876c38a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d1b1d67536c0dc5737c721030798cde876c38a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d1b1d67536c0dc5737c721030798cde876c38a/comments", "author": null, "committer": null, "parents": [{"sha": "f457cf402e8d2ba9a9ac27c74e4af5f9b6259b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f457cf402e8d2ba9a9ac27c74e4af5f9b6259b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f457cf402e8d2ba9a9ac27c74e4af5f9b6259b1e"}], "stats": {"total": 104, "additions": 76, "deletions": 28}, "files": [{"sha": "d78ba88fabd36577ca9663a7a303c677e61680a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1b1d67536c0dc5737c721030798cde876c38a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1b1d67536c0dc5737c721030798cde876c38a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00d1b1d67536c0dc5737c721030798cde876c38a", "patch": "@@ -1,3 +1,18 @@\n+2005-08-16  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* c-typeck.c (build_function_call): Call fold_buildN_initializer or\n+\tfold_buildN instead of buildN then fold_initializer or fold.\n+\t(build_unary_op): Likewise.\n+\t(build_binary_op): Likewise.\n+\t* fold-const.c (fold_initializer): Remove.\n+\t(fold_build1_initializer): New function.\n+\t(fold_build2_initializer): New function.\n+\t(fold_build3_initializer): New function.\n+\t* tree.h (fold_initializer): Remove.\n+\t(fold_build1_initializer): New function.\n+\t(fold_build2_initializer): New function.\n+\t(fold_build3_initializer): New function.\n+\n 2005-08-16  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* fold-const.c (optimize_bit_field_compare): Remove extra fold call."}, {"sha": "9ddab77fc5033f10d6d36f2a6b57c0b0fe80c27c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1b1d67536c0dc5737c721030798cde876c38a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1b1d67536c0dc5737c721030798cde876c38a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=00d1b1d67536c0dc5737c721030798cde876c38a", "patch": "@@ -2105,21 +2105,19 @@ build_function_call (tree function, tree params)\n   check_function_arguments (TYPE_ATTRIBUTES (fntype), coerced_params,\n \t\t\t    TYPE_ARG_TYPES (fntype));\n \n-  result = build3 (CALL_EXPR, TREE_TYPE (fntype),\n-\t\t   function, coerced_params, NULL_TREE);\n-  TREE_SIDE_EFFECTS (result) = 1;\n-\n   if (require_constant_value)\n     {\n-      result = fold_initializer (result);\n+      result = fold_build3_initializer (CALL_EXPR, TREE_TYPE (fntype),\n+\t\t      \t\t\tfunction, coerced_params, NULL_TREE);\n \n       if (TREE_CONSTANT (result)\n \t  && (name == NULL_TREE\n \t      || strncmp (IDENTIFIER_POINTER (name), \"__builtin_\", 10) != 0))\n \tpedwarn_init (\"initializer element is not constant\");\n     }\n   else\n-    result = fold (result);\n+    result = fold_build3 (CALL_EXPR, TREE_TYPE (fntype),\n+\t\t      \t  function, coerced_params, NULL_TREE);\n \n   if (VOID_TYPE_P (TREE_TYPE (result)))\n     return result;\n@@ -2828,8 +2826,8 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \n   if (argtype == 0)\n     argtype = TREE_TYPE (arg);\n-  val = build1 (code, argtype, arg);\n-  return require_constant_value ? fold_initializer (val) : fold (val);\n+  return require_constant_value ? fold_build1_initializer (code, argtype, arg)\n+\t  \t\t\t: fold_build1 (code, argtype, arg);\n }\n \n /* Return nonzero if REF is an lvalue valid for this language.\n@@ -8187,11 +8185,12 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     build_type = result_type;\n \n   {\n-    tree result = build2 (resultcode, build_type, op0, op1);\n-\n     /* Treat expressions in initializers specially as they can't trap.  */\n-    result = require_constant_value ? fold_initializer (result)\n-\t\t\t\t    : fold (result);\n+    tree result = require_constant_value ? fold_build2_initializer (resultcode,\n+\t\t\t\t\t\t\t\t    build_type,\n+\t\t\t\t\t\t\t\t    op0, op1)\n+\t\t\t\t\t : fold_build2 (resultcode, build_type,\n+\t\t\t\t\t\t\top0, op1);\n \n     if (final_type != 0)\n       result = convert (final_type, result);"}, {"sha": "52a9a425a8b46ec58f23844566e7cbe1f74e740a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1b1d67536c0dc5737c721030798cde876c38a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1b1d67536c0dc5737c721030798cde876c38a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=00d1b1d67536c0dc5737c721030798cde876c38a", "patch": "@@ -10571,33 +10571,65 @@ fold_build3_stat (enum tree_code code, tree type, tree op0, tree op1, tree op2\n }\n \n /* Perform constant folding and related simplification of initializer\n-   expression EXPR.  This behaves identically to \"fold\" but ignores\n+   expression EXPR.  These behave identically to \"fold_buildN\" but ignore\n    potential run-time traps and exceptions that fold must preserve.  */\n \n+#define START_FOLD_INIT \\\n+  int saved_signaling_nans = flag_signaling_nans;\\\n+  int saved_trapping_math = flag_trapping_math;\\\n+  int saved_rounding_math = flag_rounding_math;\\\n+  int saved_trapv = flag_trapv;\\\n+  flag_signaling_nans = 0;\\\n+  flag_trapping_math = 0;\\\n+  flag_rounding_math = 0;\\\n+  flag_trapv = 0\n+\n+#define END_FOLD_INIT \\\n+  flag_signaling_nans = saved_signaling_nans;\\\n+  flag_trapping_math = saved_trapping_math;\\\n+  flag_rounding_math = saved_rounding_math;\\\n+  flag_trapv = saved_trapv\n+\n+tree\n+fold_build1_initializer (enum tree_code code, tree type, tree op)\n+{\n+  tree result;\n+  START_FOLD_INIT;\n+\n+  result = fold_build1 (code, type, op);\n+\n+  END_FOLD_INIT;\n+  return result;\n+}\n+\n tree\n-fold_initializer (tree expr)\n+fold_build2_initializer (enum tree_code code, tree type, tree op0, tree op1)\n {\n-  int saved_signaling_nans = flag_signaling_nans;\n-  int saved_trapping_math = flag_trapping_math;\n-  int saved_rounding_math = flag_rounding_math;\n-  int saved_trapv = flag_trapv;\n   tree result;\n+  START_FOLD_INIT;\n+\n+  result = fold_build2 (code, type, op0, op1);\n \n-  flag_signaling_nans = 0;\n-  flag_trapping_math = 0;\n-  flag_rounding_math = 0;\n-  flag_trapv = 0;\n+  END_FOLD_INIT;\n+  return result;\n+}\n \n-  result = fold (expr);\n+tree\n+fold_build3_initializer (enum tree_code code, tree type, tree op0, tree op1,\n+\t\t\t tree op2)\n+{\n+  tree result;\n+  START_FOLD_INIT;\n \n-  flag_signaling_nans = saved_signaling_nans;\n-  flag_trapping_math = saved_trapping_math;\n-  flag_rounding_math = saved_rounding_math;\n-  flag_trapv = saved_trapv;\n+  result = fold_build3 (code, type, op0, op1, op2);\n \n+  END_FOLD_INIT;\n   return result;\n }\n \n+#undef START_FOLD_INIT\n+#undef END_FOLD_INIT\n+\n /* Determine if first argument is a multiple of second argument.  Return 0 if\n    it is not, or we cannot easily determined it to be.\n "}, {"sha": "91b38278a4b494325dc9c8bee64de74a027fffba", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1b1d67536c0dc5737c721030798cde876c38a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1b1d67536c0dc5737c721030798cde876c38a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=00d1b1d67536c0dc5737c721030798cde876c38a", "patch": "@@ -3795,7 +3795,9 @@ extern tree fold_build2_stat (enum tree_code, tree, tree, tree MEM_STAT_DECL);\n #define fold_build2(c,t1,t2,t3) fold_build2_stat (c, t1, t2, t3 MEM_STAT_INFO)\n extern tree fold_build3_stat (enum tree_code, tree, tree, tree, tree MEM_STAT_DECL);\n #define fold_build3(c,t1,t2,t3,t4) fold_build3_stat (c, t1, t2, t3, t4 MEM_STAT_INFO)\n-extern tree fold_initializer (tree);\n+extern tree fold_build1_initializer (enum tree_code, tree, tree);\n+extern tree fold_build2_initializer (enum tree_code, tree, tree, tree);\n+extern tree fold_build3_initializer (enum tree_code, tree, tree, tree, tree);\n extern tree fold_convert (tree, tree);\n extern tree fold_single_bit_test (enum tree_code, tree, tree, tree);\n extern tree fold_ignored_result (tree);"}]}