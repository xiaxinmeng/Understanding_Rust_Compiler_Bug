{"sha": "008cf58a2bda2a4377154c29dce10e66b638bfe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA4Y2Y1OGEyYmRhMmE0Mzc3MTU0YzI5ZGNlMTBlNjZiNjM4YmZlMQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-01T17:10:50Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-01T17:10:50Z"}, "message": "Delete some dead code.\n\n(FUNCTION_{PROLOGUE,EPILOGUE}): Call output_func_{prologue,epilogue}.\n(INITIAL_ELIMINATION_OFFSET): Inspect all registers, but only add those that\nare not in call_used_regs.\n(GO_IF_LEGITIMATE_INDEX): Change type of variable 'range' to HOST_WIDE_INT;\nchange type of variable 'code' to enum rtx_code.\n\n(arm_output_asm_insn): Delete declaration.\n(EXTRA_CONSTAINT): New constraint 'R' to match a constant pool label.\nMake constraint 'S' never match when not optimizing.\n(CONSTANT_ADDRESS_P): Only accept symbols marked with SYMBOL_REF_FLAG when\noptimizing.\n(ENCODE_SECTION_INFO): Don't mark any symbols when not optimizing.\n(ASM_OUTPUT_REG_{PUSH,POP}: Don't call arm_increase_location.\n(ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n\nFrom-SVN: r7417", "tree": {"sha": "a44e0ee16ada71d0223bc49e3eed6378b2ecc5bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a44e0ee16ada71d0223bc49e3eed6378b2ecc5bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/008cf58a2bda2a4377154c29dce10e66b638bfe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008cf58a2bda2a4377154c29dce10e66b638bfe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/008cf58a2bda2a4377154c29dce10e66b638bfe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008cf58a2bda2a4377154c29dce10e66b638bfe1/comments", "author": null, "committer": null, "parents": [{"sha": "f3bb6135f6a5cd960e40c8e2febfa22c6b90347f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bb6135f6a5cd960e40c8e2febfa22c6b90347f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3bb6135f6a5cd960e40c8e2febfa22c6b90347f"}], "stats": {"total": 82, "additions": 28, "deletions": 54}, "files": [{"sha": "f8a5d4ff84141c6db2aacdb72a7439443579adef", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 28, "deletions": 54, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008cf58a2bda2a4377154c29dce10e66b638bfe1/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008cf58a2bda2a4377154c29dce10e66b638bfe1/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=008cf58a2bda2a4377154c29dce10e66b638bfe1", "patch": "@@ -26,7 +26,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n extern void output_prologue ();\n extern void output_epilogue ();\n-extern char *arm_output_asm_insn ();\n extern char *arm_output_llc ();\n extern char *arithmetic_instr ();\n extern char *output_add_immediate ();\n@@ -510,7 +509,10 @@ enum reg_class\n \n #define EXTRA_CONSTRAINT(OP, C)                                         \\\n   ((C) == 'Q' ? GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == REG  \\\n-   : (C) == 'S' ? CONSTANT_ADDRESS_P (OP) : 0)\n+   : (C) == 'R' ? (GET_CODE (OP) == MEM\t\t\t\t\t\\\n+\t\t   && GET_CODE (XEXP (OP, 0)) == SYMBOL_REF\t\t\\\n+\t\t   && CONSTANT_POOL_ADDRESS_P (XEXP (OP, 0)))\t\t\\\n+   : (C) == 'S' ? (optimize > 0 && CONSTANT_ADDRESS_P (OP)) : 0)\n \n /* Constant letter 'G' for the FPU immediate constants. \n    'H' means the same constant negated.  */\n@@ -683,7 +685,7 @@ enum reg_class\n \n /* Generate assembly output for the start of a function.  */\n #define FUNCTION_PROLOGUE(STREAM, SIZE)  \\\n-  output_prologue ((STREAM), (SIZE))\n+  output_func_prologue ((STREAM), (SIZE))\n \n /* Call the function profiler with a given profile label.  The Acorn compiler\n    puts this BEFORE the prolog but gcc pust it afterwards.  The ``mov ip,lr''\n@@ -708,7 +710,7 @@ enum reg_class\n \n /* Generate the assembly code for function exit. */\n #define FUNCTION_EPILOGUE(STREAM, SIZE)  \\\n-  output_epilogue ((STREAM), (SIZE))\n+  output_func_epilogue ((STREAM), (SIZE))\n \n /* Determine if the epilogue should be output as RTL.\n    You should override this if you define FUNCTION_EXTRA_EPILOGUE.  */\n@@ -755,48 +757,27 @@ enum reg_class\n     {\t\t\t\t\t\t\t\t\t\\\n       int regno;\t\t\t\t\t\t\t\\\n       int offset = 12;\t\t\t\t\t\t\t\\\n+      int saved_hard_reg = 0;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      for (regno = 4; regno <= 10; regno++)\t\t\t\t\\\n-\tif (regs_ever_live[regno])\t\t\t\t\t\\\n-\t  offset += 4;\t\t\t\t\t\t\t\\\n-      for (regno = 20; regno <=23; regno++)\t\t\t\t\\\n-\tif (regs_ever_live[regno])\t\t\t\t\t\\\n+      for (regno = 0; regno <= 10; regno++)\t\t\t\t\\\n+\tif (regs_ever_live[regno] && ! call_used_regs[regno])\t\t\\\n+\t  saved_hard_reg = 1, offset += 4;\t\t\t\t\\\n+      for (regno = 16; regno <=23; regno++)\t\t\t\t\\\n+\tif (regs_ever_live[regno] && ! call_used_regs[regno])\t\t\\\n \t  offset += 12;\t\t\t\t\t\t\t\\\n       if ((FROM) == FRAME_POINTER_REGNUM)\t\t\t\t\\\n \t(OFFSET) = -offset;\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t   if (! regs_ever_live[HARD_FRAME_POINTER_REGNUM])\t\t\\\n \t     offset -= 16;\t\t\t\t\t\t\\\n-\t   if (regs_ever_live[14])\t\t\t\t\t\\\n+\t   if (regs_ever_live[14] || saved_hard_reg)\t\t\t\\\n \t     offset += 4;\t\t\t\t\t\t\\\n \t   (OFFSET) = (get_frame_size () + 3 & ~3) + offset;\t\t\\\n          }\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#if 0\n-/* Store in the variable DEPTH the initial difference between the frame\n-   pointer reg contents and the stack pointer reg contents, as of the start of\n-   the function body.  This depends on the layout of the fixed parts of the\n-   stack frame and on how registers are saved.  */\n-#define INITIAL_FRAME_POINTER_OFFSET(DEPTH) \t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  int regno;\t\t\t\t\t\t\t\\\n-  int offset = 12;\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  for (regno = 0; regno < FRAME_POINTER_REGNUM; regno++)\t\\\n-    if (regs_ever_live[regno])\t\t\t\t\t\\\n-      offset += 4;\t\t\t\t\t\t\\\n-  for (regno = 20; regno < 24; regno++)\t\t\t\t\\\n-    if (regs_ever_live[regno])\t\t\t\t\t\\\n-      offset += 12;\t\t\t\t\t\t\\\n-  (DEPTH) = offset + (get_frame_size () + 3 & ~3);\t\t\\\n-}\n-\n-#define INITIAL_FRAME_POINTER_OFFSET(DEPTH)  \\\n-  (DEPTH) = (get_frame_size () + 3) & ~3;\n-#endif\n /* Output assembler code for a block containing the constant parts\n    of a trampoline, leaving space for the variable parts.\n \n@@ -883,9 +864,10 @@ enum reg_class\n   ||  GET_CODE(X) == CONST )\n #endif\n \n-#define CONSTANT_ADDRESS_P(X)  \t\t\t\t\t\\\n-  (GET_CODE (X) == SYMBOL_REF \t\t\t\t\t\\\n-   && (CONSTANT_POOL_ADDRESS_P (X) || SYMBOL_REF_FLAG (X)))\n+#define CONSTANT_ADDRESS_P(X)  \t\t\t\\\n+  (GET_CODE (X) == SYMBOL_REF \t\t\t\\\n+   && (CONSTANT_POOL_ADDRESS_P (X)\t\t\\\n+       || (optimize > 0 && SYMBOL_REF_FLAG (X))))\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.\n@@ -902,11 +884,13 @@ enum reg_class\n \n /* Symbols in the text segment can be accessed without indirecting via the\n    constant pool; it may take an extra binary operation, but this is still\n-   faster than indirecting via memory.  */\n+   faster than indirecting via memory.  Don't do this when not optimizing,\n+   since we won't be calculating al of the offsets necessary to do this\n+   simplification.  */\n \n #define ENCODE_SECTION_INFO(decl)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  if (TREE_CONSTANT (decl)\t\t\t\t\t\t\\\n+  if (optimize > 0 && TREE_CONSTANT (decl)\t\t\t\t\\\n       && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\t\t\\\n@@ -972,8 +956,8 @@ enum reg_class\n #define GO_IF_LEGITIMATE_INDEX(MODE, BASE_REGNO, INDEX, LABEL)  \t\\\n do\t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  int range;\t\t\t\t\t\t\t\t\\\n-  int code = GET_CODE (INDEX);\t\t\t\t\t\t\\\n+  HOST_WIDE_INT range;\t\t\t\t\t\t\t\\\n+  enum rtx_code code = GET_CODE (INDEX);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (GET_MODE_CLASS (MODE) == MODE_FLOAT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -1345,6 +1329,8 @@ do\t\t\t\t\t\t\t\t\t\\\n       ? CC_NOOVmode\t\t\t\t\t\t\t\\\n       : GET_MODE (X) == QImode ? CC_NOOVmode : CCmode))\n \n+#define REVERSIBLE_CC_MODE(MODE) ((MODE) != CCFPEmode)\n+\n #define STORE_FLAG_VALUE 1\n \n /* Define the information needed to generate branch insns.  This is\n@@ -1492,12 +1478,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Output a push or a pop instruction (only used when profiling).  */\n #define ASM_OUTPUT_REG_PUSH(STREAM,REGNO)   \\\n-  (arm_increase_location (4)                                   \\\n-   , fprintf(STREAM,\"\\tstmfd\\tsp!,{%s}\\n\", reg_names[REGNO]))\n+  fprintf(STREAM,\"\\tstmfd\\tsp!,{%s}\\n\", reg_names[REGNO])\n \n #define ASM_OUTPUT_REG_POP(STREAM,REGNO)   \\\n-  (arm_increase_location (4)                                   \\\n-   , fprintf(STREAM,\"\\tldmfd\\tsp!,{%s}\\n\", reg_names[REGNO]))\n+  fprintf(STREAM,\"\\tldmfd\\tsp!,{%s}\\n\", reg_names[REGNO])\n \n /* Output a relative address. Not needed since jump tables are absolute\n    but we must define it anyway.  */\n@@ -1506,8 +1490,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Output an element of a dispatch table.  */\n #define ASM_OUTPUT_ADDR_VEC_ELT(STREAM,VALUE)  \\\n-  (arm_increase_location (4)                     \\\n-   , fprintf (STREAM, \"\\t.word\\tL%d\\n\", VALUE))\n+   fprintf (STREAM, \"\\t.word\\tL%d\\n\", VALUE)\n \n /* Output various types of constants.  For real numbers we output hex, with\n    a comment containing the \"human\" value, this allows us to pass NaN's which\n@@ -1613,13 +1596,6 @@ do { char dstr[30];\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_LOCAL(STREAM,NAME,SIZE,ROUNDED)  \\\n   output_lcomm_directive (STREAM, NAME, SIZE, ROUNDED)\n \n-/* Output a source filename for the debugger. RISCiX dbx insists that the\n-   ``desc'' field is set to compiler version number >= 315 (sic).  */\n-#if 0\n-#define ASM_OUTPUT_SOURCE_FILENAME(STREAM,NAME)\t \\\n-  fprintf (STREAM, \"\\t.stabs\\t\\\"%s\\\", %d, 0, 315, Ltext\\n\", (NAME), N_SOL)\n-#endif\n-\n /* Output a source line for the debugger.  */\n /* #define ASM_OUTPUT_SOURCE_LINE(STREAM,LINE) */\n \n@@ -1812,5 +1788,3 @@ do { char dstr[30];\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else output_addr_const(STREAM, X);\t\t\t\t\t\\\n }\n-\n-/* EOF arm.h */"}]}