{"sha": "329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5NzQ1ZjdjMWFhMWViMGY1YWQ4OWEzMjdiODZjMmQzMjkzZWJiZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-05-22T21:05:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-22T21:05:09Z"}, "message": "class.c (build_vtable_entry): Use int_fits_type_p.\n\n\t* class.c (build_vtable_entry): Use int_fits_type_p.\n\t(build_vtable): Pass a signed offset to build_vtable_entry.\n\t(prepare_fresh_vtable, modify_one_vtable, fixup_vtable_deltas1,\n\tset_rtti_entry): Likewise.\n\nFrom-SVN: r19964", "tree": {"sha": "a97a48d256700e83b50986a714f0677fce3d6d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a97a48d256700e83b50986a714f0677fce3d6d11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe/comments", "author": null, "committer": null, "parents": [{"sha": "697073d938614f9285bf9e9ffc5c53d657d9677e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697073d938614f9285bf9e9ffc5c53d657d9677e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697073d938614f9285bf9e9ffc5c53d657d9677e"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "da95654795162a57fdecc0401e28a7f873dcac62", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe", "patch": "@@ -1,3 +1,10 @@\n+1998-05-22  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (build_vtable_entry): Use int_fits_type_p.\n+\t(build_vtable): Pass a signed offset to build_vtable_entry.\n+\t(prepare_fresh_vtable, modify_one_vtable, fixup_vtable_deltas1,\n+\tset_rtti_entry): Likewise.\n+\n 1998-05-22  Per Bothner  <bothner@cygnus.com>\n \n \t* cp-tree.h:  Add comments documenting which LANG_FLAGS are used."}, {"sha": "ad4ff0065dab0cff1a2e087a03d1726b21d6a028", "filename": "gcc/cp/class.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=329745f7c1aa1eb0f5ad89a327b86c2d3293ebbe", "patch": "@@ -450,15 +450,11 @@ build_vtable_entry (delta, pfn)\n \t\t\t\t\t build_expr_list (NULL_TREE, pfn)));\n       tree entry = build (CONSTRUCTOR, vtable_entry_type, NULL_TREE, elems);\n \n-      /* DELTA is constructed by `size_int', which means it may be an\n-\t unsigned quantity on some platforms.  Therefore, we cannot use\n-\t `int_fits_type_p', because when DELTA is really negative,\n-\t `force_fit_type' will make it look like a very large number.  */\n-\n-      if ((TREE_INT_CST_LOW (TYPE_MAX_VALUE (delta_type_node))\n-\t   < TREE_INT_CST_LOW (delta))\n-\t  || (TREE_INT_CST_LOW (delta)\n-\t      < TREE_INT_CST_LOW (TYPE_MIN_VALUE (delta_type_node))))\n+      /* DELTA used to be constructed by `size_int' and/or size_binop,\n+\t which caused overflow problems when it was negative.  That should\n+\t be fixed now.  */\n+\n+      if (! int_fits_type_p (delta, delta_type_node))\n \t{\n \t  if (flag_huge_objects)\n \t    sorry (\"object size exceeds built-in limit for virtual function table implementation\");\n@@ -663,11 +659,11 @@ set_rtti_entry (virtuals, offset, type)\n       tree voff = build1 (NOP_EXPR, vfunc_ptr_type_node, offset);\n       TREE_CONSTANT (voff) = 1;\n \n-      TREE_VALUE (virtuals) = build_vtable_entry (size_zero_node, voff);\n+      TREE_VALUE (virtuals) = build_vtable_entry (integer_zero_node, voff);\n \n       /* The second slot is for the tdesc pointer when thunks are used.  */\n       TREE_VALUE (TREE_CHAIN (virtuals))\n-\t= build_vtable_entry (size_zero_node, vfn);\n+\t= build_vtable_entry (integer_zero_node, vfn);\n     }\n }\n \n@@ -692,7 +688,7 @@ build_vtable (binfo, type)\n \n       /* Now do rtti stuff.  */\n       offset = get_derived_offset (TYPE_BINFO (type), NULL_TREE);\n-      offset = size_binop (MINUS_EXPR, size_zero_node, offset);\n+      offset = ssize_binop (MINUS_EXPR, integer_zero_node, offset);\n       set_rtti_entry (virtuals, offset, type);\n     }\n   else\n@@ -884,7 +880,7 @@ prepare_fresh_vtable (binfo, for_type)\n     offset = BINFO_OFFSET (binfo);\n \n   set_rtti_entry (BINFO_VIRTUALS (binfo),\n-\t\t  size_binop (MINUS_EXPR, signed_size_zero_node, offset),\n+\t\t  ssize_binop (MINUS_EXPR, integer_zero_node, offset),\n \t\t  for_type);\n \n #ifdef GATHER_STATISTICS\n@@ -2327,7 +2323,7 @@ modify_one_vtable (binfo, t, fndecl, pfn)\n \t  base_offset = size_binop (PLUS_EXPR,\n \t\t\t\t    get_derived_offset (binfo, DECL_CONTEXT (current_fndecl)),\n \t\t\t\t    BINFO_OFFSET (binfo));\n-\t  this_offset = size_binop (MINUS_EXPR, offset, base_offset);\n+\t  this_offset = ssize_binop (MINUS_EXPR, offset, base_offset);\n \n \t  /* Make sure we can modify the derived association with immunity.  */\n \t  if (TREE_USED (binfo))\n@@ -2424,9 +2420,10 @@ fixup_vtable_deltas1 (binfo, t)\n \t     Also, we want just the delta between the most base class\n \t     that we derived this vfield from and us.  */\n \t  base_offset = size_binop (PLUS_EXPR,\n-\t\t\t\t    get_derived_offset (binfo, DECL_CONTEXT (fndecl)),\n+\t\t\t\t    get_derived_offset (binfo,\n+\t\t\t\t\t\t\tDECL_CONTEXT (fndecl)),\n \t\t\t\t    BINFO_OFFSET (binfo));\n-\t  this_offset = size_binop (MINUS_EXPR, offset, base_offset);\n+\t  this_offset = ssize_binop (MINUS_EXPR, offset, base_offset);\n \n \t  if (! tree_int_cst_equal (this_offset, delta))\n \t    {\n@@ -3986,7 +3983,7 @@ finish_struct_1 (t, warn_anon)\n \t  /* The first slot is for the rtti offset.  */\n \t  pending_virtuals = tree_cons (NULL_TREE, NULL_TREE, pending_virtuals);\n \n-\t  set_rtti_entry (pending_virtuals, size_zero_node, t);\n+\t  set_rtti_entry (pending_virtuals, integer_zero_node, t);\n \t  build_vtable (NULL_TREE, t);\n \t}\n       else"}]}