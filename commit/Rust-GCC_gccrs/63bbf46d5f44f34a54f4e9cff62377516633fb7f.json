{"sha": "63bbf46d5f44f34a54f4e9cff62377516633fb7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiYmY0NmQ1ZjQ0ZjM0YTU0ZjRlOWNmZjYyMzc3NTE2NjMzZmI3Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-12-08T13:26:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-12-08T13:26:35Z"}, "message": "re PR c/48088 (-Werror=frame-larger-than=100 does not work as expected)\n\n\tPR c/48088\n\tPR c/68657\n\t* common.opt (Wframe-larger-than=): Add Warning.\n\t* opts.h (control_warning_option): Add ARG argument.\n\t* opts-common.c (cmdline_handle_error): New function.\n\t(read_cmdline_option): Use it.\n\t(control_warning_option): Likewise.  Add ARG argument.\n\tIf non-NULL, decode it if needed and pass through\n\tto handle_generated_option.  Handle CLVC_ENUM like\n\tCLVC_BOOLEAN.\n\t* opts.c (common_handle_option): Adjust control_warning_option\n\tcaller.\n\t(enable_warning_as_error): Likewise.\nc-family/\n\t* c.opt (Wfloat-conversion, Wsign-conversion): Add Warning.\n\t* c-pragma.c (handle_pragma_diagnostic): Adjust\n\tcontrol_warning_option caller.\nada/\n\t* gcc-interface/trans.c (Pragma_to_gnu): Adjust\n\tcontrol_warning_option caller.\ntestsuite/\n\t* c-c++-common/pr68657-1.c: New test.\n\t* c-c++-common/pr68657-2.c: New test.\n\t* c-c++-common/pr68657-3.c: New test.\n\t* gcc.dg/cpp/warn-normalized-3.c: Use\n\t-Werror=normalized=nfc instead of -Werror=normalized=\n\tin dg-options.\n\nFrom-SVN: r231406", "tree": {"sha": "0e888f7e79d4144fe4ea4fc640d979765f209cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e888f7e79d4144fe4ea4fc640d979765f209cc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63bbf46d5f44f34a54f4e9cff62377516633fb7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63bbf46d5f44f34a54f4e9cff62377516633fb7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63bbf46d5f44f34a54f4e9cff62377516633fb7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63bbf46d5f44f34a54f4e9cff62377516633fb7f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "091db7b0af49a12ecb6fea88c0e4443444ee82bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091db7b0af49a12ecb6fea88c0e4443444ee82bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091db7b0af49a12ecb6fea88c0e4443444ee82bd"}], "stats": {"total": 279, "additions": 224, "deletions": 55}, "files": [{"sha": "093d9a252f4868d29223eaf87ec36875b2e3fff9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -1,3 +1,19 @@\n+2015-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/48088\n+\tPR c/68657\n+\t* common.opt (Wframe-larger-than=): Add Warning.\n+\t* opts.h (control_warning_option): Add ARG argument.\n+\t* opts-common.c (cmdline_handle_error): New function.\n+\t(read_cmdline_option): Use it.\n+\t(control_warning_option): Likewise.  Add ARG argument.\n+\tIf non-NULL, decode it if needed and pass through\n+\tto handle_generated_option.  Handle CLVC_ENUM like\n+\tCLVC_BOOLEAN.\n+\t* opts.c (common_handle_option): Adjust control_warning_option\n+\tcaller.\n+\t(enable_warning_as_error): Likewise.\n+\n 2015-12-08  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/aarch64/aarch64-options-extensions.def: Remove"}, {"sha": "81afef88d8676dfd199b0ea5ec72ca8371372024", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -1,3 +1,10 @@\n+2015-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/48088\n+\tPR c/68657\n+\t* gcc-interface/trans.c (Pragma_to_gnu): Adjust\n+\tcontrol_warning_option caller.\n+\n 2015-12-06  Piotr Trojanek  <piotr.trojanek@gmail.com>\n \n \tPR ada/60164"}, {"sha": "d565854a94ddbd7271ff3572bf98c3b0746a2ca8", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -1441,6 +1441,7 @@ Pragma_to_gnu (Node_Id gnat_node)\n \n \t/* This is the same implementation as in the C family of compilers.  */\n \tconst unsigned int lang_mask = CL_Ada | CL_COMMON;\n+\tconst char *arg = NULL;\n \tif (Present (gnat_expr))\n \t  {\n \t    tree gnu_expr = gnat_to_gnu (gnat_expr);\n@@ -1464,12 +1465,14 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t\tpost_error (\"?-W switch not valid for Ada\", gnat_node);\n \t\tbreak;\n \t      }\n+\t    if (cl_options[option_index].flags & CL_JOINED)\n+\t      arg = option_string + 1 + cl_options[option_index].opt_len;\n \t  }\n \telse\n \t  option_index = 0;\n \n \tset_default_handlers (&handlers);\n-\tcontrol_warning_option (option_index, (int) kind, imply, location,\n+\tcontrol_warning_option (option_index, (int) kind, arg, imply, location,\n \t\t\t\tlang_mask, &handlers, &global_options,\n \t\t\t\t&global_options_set, global_dc);\n       }"}, {"sha": "18ec7a1c74777667a7fe9ebca0fa732e2155a1f4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -1,3 +1,11 @@\n+2015-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/48088\n+\tPR c/68657\n+\t* c.opt (Wfloat-conversion, Wsign-conversion): Add Warning.\n+\t* c-pragma.c (handle_pragma_diagnostic): Adjust\n+\tcontrol_warning_option caller.\n+\n 2015-12-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.c (c_cpp_error): Update for change to"}, {"sha": "56ed677bb22abba28d4fa342e414ab70bb8989d6", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -814,7 +814,11 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n \n   struct cl_option_handlers handlers;\n   set_default_handlers (&handlers);\n-  control_warning_option (option_index, (int) kind, kind != DK_IGNORED,\n+  const char *arg = NULL;\n+  if (cl_options[option_index].flags & CL_JOINED)\n+    arg = option_string + 1 + cl_options[option_index].opt_len;\n+  control_warning_option (option_index, (int) kind,\n+\t\t\t  arg, kind != DK_IGNORED,\n \t\t\t  loc, lang_mask, &handlers,\n \t\t\t  &global_options, &global_options_set,\n \t\t\t  global_dc);"}, {"sha": "6531d3af84d81b787e2290c06459889953a0e9e0", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -435,7 +435,7 @@ C ObjC RejectNegative Warning Alias(Werror=, implicit-function-declaration)\n This switch is deprecated; use -Werror=implicit-function-declaration instead.\n \n Wfloat-conversion\n-C ObjC C++ ObjC++ Var(warn_float_conversion) LangEnabledBy(C ObjC C++ ObjC++,Wconversion)\n+C ObjC C++ ObjC++ Var(warn_float_conversion) Warning LangEnabledBy(C ObjC C++ ObjC++,Wconversion)\n Warn for implicit type conversions that cause loss of floating point precision.\n \n Wfloat-equal\n@@ -837,7 +837,7 @@ C ObjC C++ ObjC++ EnabledBy(Wextra)\n ;\n \n Wsign-conversion\n-C ObjC C++ ObjC++ Var(warn_sign_conversion) LangEnabledBy(C ObjC,Wconversion)\n+C ObjC C++ ObjC++ Var(warn_sign_conversion) Warning LangEnabledBy(C ObjC,Wconversion)\n Warn for implicit type conversions between signed and unsigned integers.\n \n Wsign-promo"}, {"sha": "b1591d5d49b0658daa5131eb7c55753149064554", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -581,7 +581,7 @@ Common Var(flag_fatal_errors)\n Exit on the first error occurred.\n \n Wframe-larger-than=\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined UInteger Warning\n -Wframe-larger-than=<number>\tWarn if a function's stack frame requires more than <number> bytes.\n \n Wfree-nonheap-object"}, {"sha": "507358a1d17d5f95772c8d7286145d03f680441e", "filename": "gcc/opts-common.c", "status": "modified", "additions": 116, "deletions": 46, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -1021,70 +1021,50 @@ generate_option_input_file (const char *file,\n   decoded->errors = 0;\n }\n \n-/* Handle the switch DECODED (location LOC) for the language indicated\n-   by LANG_MASK, using the handlers in *HANDLERS and setting fields in\n-   OPTS and OPTS_SET and using diagnostic context DC (if not NULL) for\n-   diagnostic options.  */\n+/* Perform diagnostics for read_cmdline_option and control_warning_option\n+   functions.  Returns true if an error has been diagnosed.\n+   LOC and LANG_MASK arguments like in read_cmdline_option.\n+   OPTION is the option to report diagnostics for, OPT the name\n+   of the option as text, ARG the argument of the option (for joined\n+   options), ERRORS is bitmask of CL_ERR_* values.  */\n \n-void\n-read_cmdline_option (struct gcc_options *opts,\n-\t\t     struct gcc_options *opts_set,\n-\t\t     struct cl_decoded_option *decoded,\n-\t\t     location_t loc,\n-\t\t     unsigned int lang_mask,\n-\t\t     const struct cl_option_handlers *handlers,\n-\t\t     diagnostic_context *dc)\n+static bool\n+cmdline_handle_error (location_t loc, const struct cl_option *option,\n+\t\t      const char *opt, const char *arg, int errors,\n+\t\t      unsigned int lang_mask)\n {\n-  const struct cl_option *option;\n-  const char *opt = decoded->orig_option_with_args_text;\n-\n-  if (decoded->warn_message)\n-    warning_at (loc, 0, decoded->warn_message, opt);\n-\n-  if (decoded->opt_index == OPT_SPECIAL_unknown)\n-    {\n-      if (handlers->unknown_option_callback (decoded))\n-\terror_at (loc, \"unrecognized command line option %qs\", decoded->arg);\n-      return;\n-    }\n-\n-  if (decoded->opt_index == OPT_SPECIAL_ignore)\n-    return;\n-\n-  option = &cl_options[decoded->opt_index];\n-\n-  if (decoded->errors & CL_ERR_DISABLED)\n+  if (errors & CL_ERR_DISABLED)\n     {\n       error_at (loc, \"command line option %qs\"\n-\t\t\" is not supported by this configuration\", opt);\n-      return;\n+\t\t     \" is not supported by this configuration\", opt);\n+      return true;\n     }\n \n-  if (decoded->errors & CL_ERR_MISSING_ARG)\n+  if (errors & CL_ERR_MISSING_ARG)\n     {\n       if (option->missing_argument_error)\n \terror_at (loc, option->missing_argument_error, opt);\n       else\n \terror_at (loc, \"missing argument to %qs\", opt);\n-      return;\n+      return true;\n     }\n \n-  if (decoded->errors & CL_ERR_UINT_ARG)\n+  if (errors & CL_ERR_UINT_ARG)\n     {\n       error_at (loc, \"argument to %qs should be a non-negative integer\",\n \t\toption->opt_text);\n-      return;\n+      return true;\n     }\n \n-  if (decoded->errors & CL_ERR_ENUM_ARG)\n+  if (errors & CL_ERR_ENUM_ARG)\n     {\n       const struct cl_enum *e = &cl_enums[option->var_enum];\n       unsigned int i;\n       size_t len;\n       char *s, *p;\n \n       if (e->unknown_error)\n-\terror_at (loc, e->unknown_error, decoded->arg);\n+\terror_at (loc, e->unknown_error, arg);\n       else\n \terror_at (loc, \"unrecognized argument in option %qs\", opt);\n \n@@ -1105,9 +1085,49 @@ read_cmdline_option (struct gcc_options *opts,\n \t}\n       p[-1] = 0;\n       inform (loc, \"valid arguments to %qs are: %s\", option->opt_text, s);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Handle the switch DECODED (location LOC) for the language indicated\n+   by LANG_MASK, using the handlers in *HANDLERS and setting fields in\n+   OPTS and OPTS_SET and using diagnostic context DC (if not NULL) for\n+   diagnostic options.  */\n+\n+void\n+read_cmdline_option (struct gcc_options *opts,\n+\t\t     struct gcc_options *opts_set,\n+\t\t     struct cl_decoded_option *decoded,\n+\t\t     location_t loc,\n+\t\t     unsigned int lang_mask,\n+\t\t     const struct cl_option_handlers *handlers,\n+\t\t     diagnostic_context *dc)\n+{\n+  const struct cl_option *option;\n+  const char *opt = decoded->orig_option_with_args_text;\n+\n+  if (decoded->warn_message)\n+    warning_at (loc, 0, decoded->warn_message, opt);\n+\n+  if (decoded->opt_index == OPT_SPECIAL_unknown)\n+    {\n+      if (handlers->unknown_option_callback (decoded))\n+\terror_at (loc, \"unrecognized command line option %qs\", decoded->arg);\n       return;\n     }\n \n+  if (decoded->opt_index == OPT_SPECIAL_ignore)\n+    return;\n+\n+  option = &cl_options[decoded->opt_index];\n+\n+  if (decoded->errors\n+      && cmdline_handle_error (loc, option, opt, decoded->arg,\n+\t\t\t       decoded->errors, lang_mask))\n+    return;\n+\n   if (decoded->errors & CL_ERR_WRONG_LANG)\n     {\n       handlers->wrong_lang_callback (decoded, lang_mask);\n@@ -1327,13 +1347,14 @@ get_option_state (struct gcc_options *opts, int option,\n /* Set a warning option OPT_INDEX (language mask LANG_MASK, option\n    handlers HANDLERS) to have diagnostic kind KIND for option\n    structures OPTS and OPTS_SET and diagnostic context DC (possibly\n-   NULL), at location LOC (UNKNOWN_LOCATION for -Werror=).  If IMPLY,\n+   NULL), at location LOC (UNKNOWN_LOCATION for -Werror=).  ARG is the\n+   argument of the option for joined options, or NULL otherwise.  If IMPLY,\n    the warning option in question is implied at this point.  This is\n    used by -Werror= and #pragma GCC diagnostic.  */\n \n void\n-control_warning_option (unsigned int opt_index, int kind, bool imply,\n-\t\t\tlocation_t loc, unsigned int lang_mask,\n+control_warning_option (unsigned int opt_index, int kind, const char *arg,\n+\t\t\tbool imply, location_t loc, unsigned int lang_mask,\n \t\t\tconst struct cl_option_handlers *handlers,\n \t\t\tstruct gcc_options *opts,\n \t\t\tstruct gcc_options *opts_set,\n@@ -1347,10 +1368,59 @@ control_warning_option (unsigned int opt_index, int kind, bool imply,\n     diagnostic_classify_diagnostic (dc, opt_index, (diagnostic_t) kind, loc);\n   if (imply)\n     {\n+      const struct cl_option *option = &cl_options[opt_index];\n+\n       /* -Werror=foo implies -Wfoo.  */\n-      if (cl_options[opt_index].var_type == CLVC_BOOLEAN)\n-\thandle_generated_option (opts, opts_set,\n-\t\t\t\t opt_index, NULL, 1, lang_mask,\n-\t\t\t\t kind, loc, handlers, dc);\n+      if (option->var_type == CLVC_BOOLEAN || option->var_type == CLVC_ENUM)\n+\t{\n+\t  int value = 1;\n+\n+\t  if (arg && *arg == '\\0' && !option->cl_missing_ok)\n+\t    arg = NULL;\n+\n+\t  if ((option->flags & CL_JOINED) && arg == NULL)\n+\t    {\n+\t      cmdline_handle_error (loc, option, option->opt_text, arg,\n+\t\t\t\t    CL_ERR_MISSING_ARG, lang_mask);\n+\t      return;\n+\t    }\n+\n+\t  /* If the switch takes an integer, convert it.  */\n+\t  if (arg && option->cl_uinteger)\n+\t    {\n+\t      value = integral_argument (arg);\n+\t      if (value == -1)\n+\t\t{\n+\t\t  cmdline_handle_error (loc, option, option->opt_text, arg,\n+\t\t\t\t\tCL_ERR_UINT_ARG, lang_mask);\n+\t\t  return;\n+\t\t}\n+\t    }\n+\n+\t  /* If the switch takes an enumerated argument, convert it.  */\n+\t  if (arg && option->var_type == CLVC_ENUM)\n+\t    {\n+\t      const struct cl_enum *e = &cl_enums[option->var_enum];\n+\n+\t      if (enum_arg_to_value (e->values, arg, &value, lang_mask))\n+\t\t{\n+\t\t  const char *carg = NULL;\n+\n+\t\t  if (enum_value_to_arg (e->values, &carg, value, lang_mask))\n+\t\t    arg = carg;\n+\t\t  gcc_assert (carg != NULL);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  cmdline_handle_error (loc, option, option->opt_text, arg,\n+\t\t\t\t\tCL_ERR_ENUM_ARG, lang_mask);\n+\t\t  return;\n+\t\t}\n+\t    }\n+\n+\t  handle_generated_option (opts, opts_set,\n+\t\t\t\t   opt_index, arg, value, lang_mask,\n+\t\t\t\t   kind, loc, handlers, dc);\n+\t}\n     }\n }"}, {"sha": "3d25f98c9e2a9d0541133a60b0c08f5f00d3fb90", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -2114,7 +2114,7 @@ common_handle_option (struct gcc_options *opts,\n \n     case OPT_pedantic_errors:\n       dc->pedantic_errors = 1;\n-      control_warning_option (OPT_Wpedantic, DK_ERROR, value,\n+      control_warning_option (OPT_Wpedantic, DK_ERROR, NULL, value,\n \t\t\t      loc, lang_mask,\n \t\t\t      handlers, opts, opts_set,\n                               dc);\n@@ -2437,8 +2437,11 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n   else\n     {\n       const diagnostic_t kind = value ? DK_ERROR : DK_WARNING;\n+      const char *arg = NULL;\n \n-      control_warning_option (option_index, (int) kind, value,\n+      if (cl_options[option_index].flags & CL_JOINED)\n+\targ = new_option + cl_options[option_index].opt_len;\n+      control_warning_option (option_index, (int) kind, arg, value,\n \t\t\t      loc, lang_mask,\n \t\t\t      handlers, opts, opts_set, dc);\n     }"}, {"sha": "60222ef53de48feb0d685175d603b612cc186478", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -363,7 +363,7 @@ extern void read_cmdline_option (struct gcc_options *opts,\n \t\t\t\t const struct cl_option_handlers *handlers,\n \t\t\t\t diagnostic_context *dc);\n extern void control_warning_option (unsigned int opt_index, int kind,\n-\t\t\t\t    bool imply, location_t loc,\n+\t\t\t\t    const char *arg, bool imply, location_t loc,\n \t\t\t\t    unsigned int lang_mask,\n \t\t\t\t    const struct cl_option_handlers *handlers,\n \t\t\t\t    struct gcc_options *opts,"}, {"sha": "c970caf6fc320b2e807caaddcb81a8f4cfd04531", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -1,3 +1,14 @@\n+2015-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/48088\n+\tPR c/68657\n+\t* c-c++-common/pr68657-1.c: New test.\n+\t* c-c++-common/pr68657-2.c: New test.\n+\t* c-c++-common/pr68657-3.c: New test.\n+\t* gcc.dg/cpp/warn-normalized-3.c: Use\n+\t-Werror=normalized=nfc instead of -Werror=normalized=\n+\tin dg-options.\n+\n 2015-12-08  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* lib/target-supports.exp"}, {"sha": "3db6f49d00dca3ce7c645f76e39880f6f411d2a9", "filename": "gcc/testsuite/c-c++-common/pr68657-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-1.c?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -0,0 +1,26 @@\n+/* PR c/68657 */\n+/* { dg-options \"-Werror=sign-conversion -Werror=float-conversion -Werror=frame-larger-than=65536\" } */\n+\n+void\n+f1 (void)\n+{\n+  unsigned int a = -5;\t/* { dg-error \"negative integer implicitly converted to unsigned type\" } */\n+  (void) a;\n+}\n+\n+int\n+f2 (void)\n+{\n+  return 3.1f;\t/* { dg-error \"conversion to 'int' alters 'float' constant value\" } */\n+}\n+\n+int f3 (char *);\n+\n+int\n+f4 (void)\n+{\n+  char buf[131072];\n+  return f3 (buf);\n+}\t\t/* { dg-error \"the frame size of 1\\[0-9]* bytes is larger than 65536 bytes\" } */\n+\n+/* { dg-prune-output \"treated as errors\" } */"}, {"sha": "9eb68ce38e7fc5030cca23d71e09cad459f5d637", "filename": "gcc/testsuite/c-c++-common/pr68657-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-2.c?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -0,0 +1,8 @@\n+/* PR c/68657 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Werror=larger-than=65536\" } */\n+\n+int a[131072];\t/* { dg-error \"size of 'a' is \\[1-9]\\[0-9]* bytes\" } */\n+int b[1024];\t/* { dg-bogus \"size of 'b' is \\[1-9]\\[0-9]* bytes\" } */\n+\n+/* { dg-prune-output \"treated as errors\" } */"}, {"sha": "84622fc2e60b81d90089f1ab5ebb4f1f7036fabd", "filename": "gcc/testsuite/c-c++-common/pr68657-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-3.c?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/68657 */\n+/* { dg-do compile } */\n+\n+#pragma GCC diagnostic error \"-Wlarger-than=65536\"\n+int a[131072];\t/* { dg-error \"size of 'a' is \\[1-9]\\[0-9]* bytes\" } */\n+int b[1024];\t/* { dg-bogus \"size of 'b' is \\[1-9]\\[0-9]* bytes\" } */\n+#pragma GCC diagnostic ignored \"-Wlarger-than=65536\"\n+int c[131072];\t/* { dg-bogus \"size of 'c' is \\[1-9]\\[0-9]* bytes\" } */\n+int d[1024];\t/* { dg-bogus \"size of 'd' is \\[1-9]\\[0-9]* bytes\" } */\n+#pragma GCC diagnostic warning \"-Wlarger-than=65536\"\n+int e[131072];\t/* { dg-warning \"size of 'e' is \\[1-9]\\[0-9]* bytes\" } */\n+int f[1024];\t/* { dg-bogus \"size of 'f' is \\[1-9]\\[0-9]* bytes\" } */\n+/* { dg-prune-output \"treated as errors\" } */"}, {"sha": "225fc4de01d815a1c2147fb4baa6f0f8cdcd499c", "filename": "gcc/testsuite/gcc.dg/cpp/warn-normalized-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bbf46d5f44f34a54f4e9cff62377516633fb7f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c?ref=63bbf46d5f44f34a54f4e9cff62377516633fb7f", "patch": "@@ -1,4 +1,4 @@\n // { dg-do preprocess }\n-// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=normalized=\" }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=normalized=nfc\" }\n /* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n \\u0F43  // { dg-error \"`.U00000f43' is not in NFC .-Werror=normalized=.\" }"}]}