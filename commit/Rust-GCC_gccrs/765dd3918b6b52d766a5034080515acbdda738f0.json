{"sha": "765dd3918b6b52d766a5034080515acbdda738f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1ZGQzOTE4YjZiNTJkNzY2YTUwMzQwODA1MTVhY2JkZGE3MzhmMA==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2015-10-27T20:21:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-10-27T20:21:31Z"}, "message": "c-parser.c (c_parser_oacc_shape_clause): New.\n\n\tgcc/c/\n\t* c-parser.c (c_parser_oacc_shape_clause): New.\n\t(c_parser_oacc_simple_clause): New.\n\t(c_parser_oacc_all_clauses): Add auto, gang, seq, vector, worker.\n\t(OACC_LOOP_CLAUSE_MASK): Add gang, worker, vector, auto, seq.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/loop-shape.c: New test.\n\nCo-Authored-By: Bernd Schmidt <bernds@redhat.com>\nCo-Authored-By: James Norris <jnorris@codesourcery.com>\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>\n\nFrom-SVN: r229461", "tree": {"sha": "c425a9799c18e15ab8cc82ca6850ec854f66888d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c425a9799c18e15ab8cc82ca6850ec854f66888d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/765dd3918b6b52d766a5034080515acbdda738f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765dd3918b6b52d766a5034080515acbdda738f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765dd3918b6b52d766a5034080515acbdda738f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765dd3918b6b52d766a5034080515acbdda738f0/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d0774412e77ac167e73bdd1ef86ea7ccad9ee8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0774412e77ac167e73bdd1ef86ea7ccad9ee8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d0774412e77ac167e73bdd1ef86ea7ccad9ee8d"}], "stats": {"total": 529, "additions": 529, "deletions": 0}, "files": [{"sha": "78597bec2683636be35575053f39e28b5e88c2f7", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765dd3918b6b52d766a5034080515acbdda738f0/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765dd3918b6b52d766a5034080515acbdda738f0/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=765dd3918b6b52d766a5034080515acbdda738f0", "patch": "@@ -1,3 +1,15 @@\n+2015-10-27  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\t* c-parser.c (c_parser_oacc_shape_clause): New.\n+\t(c_parser_oacc_simple_clause): New.\n+\t(c_parser_oacc_all_clauses): Add auto, gang, seq, vector, worker.\n+\t(OACC_LOOP_CLAUSE_MASK): Add gang, worker, vector, auto, seq.\n+\n 2015-10-27  Thomas Schwinge  <thomas@codesourcery.com>\n \t    James Norris  <jnorris@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "057007694496fee50f742bd2a6191f0e65146ee0", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765dd3918b6b52d766a5034080515acbdda738f0/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765dd3918b6b52d766a5034080515acbdda738f0/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=765dd3918b6b52d766a5034080515acbdda738f0", "patch": "@@ -11186,6 +11186,167 @@ c_parser_omp_clause_num_workers (c_parser *parser, tree list)\n   return list;\n }\n \n+/* OpenACC:\n+\n+    gang [( gang-arg-list )]\n+    worker [( [num:] int-expr )]\n+    vector [( [length:] int-expr )]\n+\n+  where gang-arg is one of:\n+\n+    [num:] int-expr\n+    static: size-expr\n+\n+  and size-expr may be:\n+\n+    *\n+    int-expr\n+*/\n+\n+static tree\n+c_parser_oacc_shape_clause (c_parser *parser, omp_clause_code kind,\n+\t\t\t    const char *str, tree list)\n+{\n+  const char *id = \"num\";\n+  tree ops[2] = { NULL_TREE, NULL_TREE }, c;\n+  location_t loc = c_parser_peek_token (parser)->location;\n+\n+  if (kind == OMP_CLAUSE_VECTOR)\n+    id = \"length\";\n+\n+  if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))\n+    {\n+      c_parser_consume_token (parser);\n+\n+      do\n+\t{\n+\t  c_token *next = c_parser_peek_token (parser);\n+\t  int idx = 0;\n+\n+\t  /* Gang static argument.  */\n+\t  if (kind == OMP_CLAUSE_GANG\n+\t      && c_parser_next_token_is_keyword (parser, RID_STATIC))\n+\t    {\n+\t      c_parser_consume_token (parser);\n+\n+\t      if (!c_parser_require (parser, CPP_COLON, \"expected %<:%>\"))\n+\t\tgoto cleanup_error;\n+\n+\t      idx = 1;\n+\t      if (ops[idx] != NULL_TREE)\n+\t\t{\n+\t\t  c_parser_error (parser, \"too many %<static%> arguments\");\n+\t\t  goto cleanup_error;\n+\t\t}\n+\n+\t      /* Check for the '*' argument.  */\n+\t      if (c_parser_next_token_is (parser, CPP_MULT))\n+\t\t{\n+\t\t  c_parser_consume_token (parser);\n+\t\t  ops[idx] = integer_minus_one_node;\n+\n+\t\t  if (c_parser_next_token_is (parser, CPP_COMMA))\n+\t\t    {\n+\t\t      c_parser_consume_token (parser);\n+\t\t      continue;\n+\t\t    }\n+\t\t  else\n+\t\t    break;\n+\t\t}\n+\t    }\n+\t  /* Worker num: argument and vector length: arguments.  */\n+\t  else if (c_parser_next_token_is (parser, CPP_NAME)\n+\t\t   && strcmp (id, IDENTIFIER_POINTER (next->value)) == 0\n+\t\t   && c_parser_peek_2nd_token (parser)->type == CPP_COLON)\n+\t    {\n+\t      c_parser_consume_token (parser);  /* id  */\n+\t      c_parser_consume_token (parser);  /* ':'  */\n+\t    }\n+\n+\t  /* Now collect the actual argument.  */\n+\t  if (ops[idx] != NULL_TREE)\n+\t    {\n+\t      c_parser_error (parser, \"unexpected argument\");\n+\t      goto cleanup_error;\n+\t    }\n+\n+\t  location_t expr_loc = c_parser_peek_token (parser)->location;\n+\t  tree expr = c_parser_expr_no_commas (parser, NULL).value;\n+\t  if (expr == error_mark_node)\n+\t    goto cleanup_error;\n+\n+\t  mark_exp_read (expr);\n+\t  expr = c_fully_fold (expr, false, NULL);\n+\n+\t  /* Attempt to statically determine when the number isn't a\n+\t     positive integer.  */\n+\n+\t  if (!INTEGRAL_TYPE_P (TREE_TYPE (expr)))\n+\t    {\n+\t      c_parser_error (parser, \"expected integer expression\");\n+\t      return list;\n+\t    }\n+\n+\t  tree c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, expr,\n+\t\t\t\t    build_int_cst (TREE_TYPE (expr), 0));\n+\t  if (c == boolean_true_node)\n+\t    {\n+\t      warning_at (loc, 0,\n+\t\t\t  \"%<%s%> value must be positive\", str);\n+\t      expr = integer_one_node;\n+\t    }\n+\n+\t  ops[idx] = expr;\n+\n+\t  if (kind == OMP_CLAUSE_GANG\n+\t      && c_parser_next_token_is (parser, CPP_COMMA))\n+\t    {\n+\t      c_parser_consume_token (parser);\n+\t      continue;\n+\t    }\n+\t  break;\n+\t}\n+      while (1);\n+\n+      if (!c_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\"))\n+\tgoto cleanup_error;\n+    }\n+\n+  check_no_duplicate_clause (list, kind, str);\n+\n+  c = build_omp_clause (loc, kind);\n+\n+  if (ops[1])\n+    OMP_CLAUSE_OPERAND (c, 1) = ops[1];\n+\n+  OMP_CLAUSE_OPERAND (c, 0) = ops[0];\n+  OMP_CLAUSE_CHAIN (c) = list;\n+\n+  return c;\n+\n+ cleanup_error:\n+  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, 0);\n+  return list;\n+}\n+\n+/* OpenACC:\n+   auto\n+   independent\n+   nohost\n+   seq */\n+\n+static tree\n+c_parser_oacc_simple_clause (c_parser *parser, enum omp_clause_code code,\n+\t\t\t     tree list)\n+{\n+  check_no_duplicate_clause (list, code, omp_clause_code_name[code]);\n+\n+  tree c = build_omp_clause (c_parser_peek_token (parser)->location, code);\n+  OMP_CLAUSE_CHAIN (c) = list;\n+\n+  return c;\n+}\n+\n /* OpenACC:\n    async [( int-expr )] */\n \n@@ -12392,6 +12553,11 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_oacc_clause_async (parser, clauses);\n \t  c_name = \"async\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_AUTO:\n+\t  clauses = c_parser_oacc_simple_clause (parser, OMP_CLAUSE_AUTO,\n+\t\t\t\t\t\tclauses);\n+\t  c_name = \"auto\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_COLLAPSE:\n \t  clauses = c_parser_omp_clause_collapse (parser, clauses);\n \t  c_name = \"collapse\";\n@@ -12428,6 +12594,11 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_omp_clause_firstprivate (parser, clauses);\n \t  c_name = \"firstprivate\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_GANG:\n+\t  c_name = \"gang\";\n+\t  clauses = c_parser_oacc_shape_clause (parser, OMP_CLAUSE_GANG,\n+\t\t\t\t\t\tc_name, clauses);\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_HOST:\n \t  clauses = c_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"host\";\n@@ -12476,6 +12647,16 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"self\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_SEQ:\n+\t  clauses = c_parser_oacc_simple_clause (parser, OMP_CLAUSE_SEQ,\n+\t\t\t\t\t\tclauses);\n+\t  c_name = \"seq\";\n+\t  break;\n+\tcase PRAGMA_OACC_CLAUSE_VECTOR:\n+\t  c_name = \"vector\";\n+\t  clauses = c_parser_oacc_shape_clause (parser, OMP_CLAUSE_VECTOR,\n+\t\t\t\t\t\tc_name,\tclauses);\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_VECTOR_LENGTH:\n \t  clauses = c_parser_omp_clause_vector_length (parser, clauses);\n \t  c_name = \"vector_length\";\n@@ -12484,6 +12665,11 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_oacc_clause_wait (parser, clauses);\n \t  c_name = \"wait\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_WORKER:\n+\t  c_name = \"worker\";\n+\t  clauses = c_parser_oacc_shape_clause (parser, OMP_CLAUSE_WORKER,\n+\t\t\t\t\t\tc_name, clauses);\n+\t  break;\n \tdefault:\n \t  c_parser_error (parser, \"expected %<#pragma acc%> clause\");\n \t  goto saw_error;\n@@ -12960,6 +13146,11 @@ c_parser_oacc_enter_exit_data (c_parser *parser, bool enter)\n \n #define OACC_LOOP_CLAUSE_MASK\t\t\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COLLAPSE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_GANG)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WORKER)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_AUTO)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_SEQ)\t\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION) )\n \n static tree"}, {"sha": "0eec83b596ace6ac2049a1587c697a8d035979a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765dd3918b6b52d766a5034080515acbdda738f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765dd3918b6b52d766a5034080515acbdda738f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=765dd3918b6b52d766a5034080515acbdda738f0", "patch": "@@ -1,3 +1,7 @@\n+2015-10-27  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* c-c++-common/goacc/loop-shape.c: New test.\n+\n 2015-10-27  Nathan Sidwell <nathan@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n "}, {"sha": "b6d3156074d45319dae3e8eb6b8d5ff911176e13", "filename": "gcc/testsuite/c-c++-common/goacc/loop-shape.c", "status": "added", "additions": 322, "deletions": 0, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765dd3918b6b52d766a5034080515acbdda738f0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-shape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765dd3918b6b52d766a5034080515acbdda738f0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-shape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-shape.c?ref=765dd3918b6b52d766a5034080515acbdda738f0", "patch": "@@ -0,0 +1,322 @@\n+/* Exercise *_parser_oacc_shape_clause by checking various combinations\n+   of gang, worker and vector clause arguments.  */\n+\n+/* { dg-compile } */\n+\n+int main ()\n+{\n+  int i;\n+  int v = 32, w = 19;\n+  int length = 1, num = 5;\n+\n+  /* Valid uses.  */\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang worker vector\n+  for (i = 0; i < 10; i++)\n+    ;\n+  \n+  #pragma acc kernels\n+  #pragma acc loop gang(26)\n+  for (i = 0; i < 10; i++)\n+    ;\n+  \n+  #pragma acc kernels\n+  #pragma acc loop gang(v)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(length: 16)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(length: v)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(16)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(v)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(num: 16)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(num: v)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(16)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(v)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(static: 16, num: 5)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(static: v, num: w)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(length)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(num)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(num, static: 6)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(static: 5, num)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(1, static:*)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(static:*, 1)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(1, static:*)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(num: 5, static: 4)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(num: v, static: w)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(num, static:num)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(length:length)\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(num:length)\n+  for (i = 0; i < 10; i++)\n+    ;  \n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(num:num)\n+  for (i = 0; i < 10; i++)\n+    ;  \n+\n+  /* Invalid uses.  */\n+  \n+  #pragma acc kernels\n+  #pragma acc loop gang(16, 24) /* { dg-error \"unexpected argument\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(v, w) /* { dg-error \"unexpected argument\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(num: 1, num:2, num:3, 4) /* { dg-error \"unexpected argument\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(num: 1 num:2, num:3, 4) /* { dg-error \"expected '.' before\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(1, num:2, num:3, 4) /* { dg-error \"unexpected argument\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(num, num:5) /* { dg-error \"unexpected argument\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(length:num) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(5, length:length) /* { dg-error \"expected '.' before\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(num:length) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(length:5) /* { dg-error \"expected '.' before\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(1, num:2) /* { dg-error \"expected '.' before\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(static: * abc) /* { dg-error \"expected '.' before\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(static:*num:1) /* { dg-error \"expected '.' before\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(num: 5 static: *) /* { dg-error \"expected '.' before\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(,static: *) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(,length:5) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(,num:10) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(,10) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(,10) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(,10) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(-12) /* { dg-warning \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(-1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(num:-1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(num:1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(static:-1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop gang(static:1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(-1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(num:-1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop worker(num:1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(-1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(length:-1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  #pragma acc kernels\n+  #pragma acc loop vector(length:1.0) /* { dg-error \"\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+\n+  return 0;\n+}"}]}