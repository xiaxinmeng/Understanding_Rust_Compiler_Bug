{"sha": "b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJiMjRkMzBiYmY3NDk2OTg2ZmVlM2E3ZjIwMWI2OWJhOTczZDNiMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-25T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-25T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "0dde92d0386cc6eba02eede991ed79898decd1f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dde92d0386cc6eba02eede991ed79898decd1f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/comments", "author": null, "committer": null, "parents": [{"sha": "74c176ca2f1fe702f6e46d86f634685480094335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c176ca2f1fe702f6e46d86f634685480094335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c176ca2f1fe702f6e46d86f634685480094335"}], "stats": {"total": 331, "additions": 330, "deletions": 1}, "files": [{"sha": "7a71b4367d4cd0cbcc5ced162673ee12c418b55f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "patch": "@@ -1,3 +1,48 @@\n+2020-08-24  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/install.texi (Configuration): Switch valgrind.com to https.\n+\n+2020-08-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/94538\n+\tPR target/94538\n+\t* config/arm/thumb1.md: Disable set-constant splitter when\n+\tTARGET_HAVE_MOVT.\n+\t(thumb1_movsi_insn): Fix -mpure-code\n+\talternative.\n+\n+2020-08-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-vect-data-refs.c (dr_group_sort_cmp): Work on\n+\tdata_ref_pair.\n+\t(vect_analyze_data_ref_accesses): Work on groups.\n+\t(vect_find_stmt_data_reference): Add group_id argument and fill\n+\tup dataref_groups vector.\n+\t* tree-vect-loop.c (vect_get_datarefs_in_loop): Pass new\n+\targuments.\n+\t(vect_analyze_loop_2): Likewise.\n+\t* tree-vect-slp.c (vect_slp_analyze_bb_1): Pass argument.\n+\t(vect_slp_bb_region): Likewise.\n+\t(vect_slp_region): Likewise.\n+\t(vect_slp_bb):Work on the entire BB.\n+\t* tree-vectorizer.h (vect_analyze_data_ref_accesses): Add new\n+\targument.\n+\t(vect_find_stmt_data_reference): Likewise.\n+\n+2020-08-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/96597\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_call): Add missing\n+\tinitialization of ::punned.\n+\t(vn_reference_insert): Use consistently false instead of 0.\n+\t(vn_reference_insert_pieces): Likewise.\n+\n+2020-08-24  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/93372\n+\t* reorg.c (fill_slots_from_thread): Allow trial insns that clobber\n+\tTARGET_FLAGS_REGNUM as delay-slot fillers.\n+\n 2020-08-23  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/96744"}, {"sha": "758e09d65f8527ab60c0de7f124c98763c1f2b23", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "patch": "@@ -1 +1 @@\n-20200824\n+20200825"}, {"sha": "aec42dfff431884e4b595c6126cff5bee9b81791", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "patch": "@@ -1,3 +1,7 @@\n+2020-08-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* ptree.c (debug_overload): New.\n+\n 2020-08-19  Jason Merrill  <jason@redhat.com>\n \n \tDR 2369"}, {"sha": "b9562e6788394fc5a57ebcc65b430e7dbdb57a06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "patch": "@@ -1,3 +1,25 @@\n+2020-08-24  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/96486\n+\t* gfortran.dg/pr96486.f90: New test.\n+\n+2020-08-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/94538\n+\t* gcc.target/arm/pure-code/pr94538-1.c: New test.\n+\t* gcc.target/arm/pure-code/pr94538-2.c: New test.\n+\n+2020-08-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/vect/bb-slp-38.c: Adjust pattern as now we only process\n+\ta single vectorization and now 2 partial.\n+\t* gcc.dg/vect/bb-slp-45.c: New test.\n+\n+2020-08-24  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/93372\n+\t* gcc.target/cris/pr93372-47.c: New test.\n+\n 2020-08-23  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/96744"}, {"sha": "107934081001c6e35d28413d63ae5f6cfb8a0a32", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "patch": "@@ -1,3 +1,11 @@\n+2020-08-24  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* macho.c (MACH_O_MH_MAGIC_FAT_64): Define.\n+\t(MACH_O_MH_CIGAM_FAT_64): Define.\n+\t(struct macho_fat_arch_64): Define.\n+\t(macho_add_fat): Add and use is_64 parameter.\n+\t(macho_add): Recognize 64-bit fat files.\n+\n 2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/96202"}, {"sha": "84068b960bb99ebf2b7987d467b49828cd4c1aa9", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "patch": "@@ -1,3 +1,9 @@\n+2020-08-24  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/96486\n+\t* intrinsics/env.c: If value_len is > 0 blank the string.\n+\tCopy the result only if its length is > 0.\n+\n 2020-08-20  Mark Eggleston  <markeggleston@gcc.gnu.org>\n \n \tPR fortran/96436"}, {"sha": "d5aa71b70f97f65b49db94a6faa5738f206cfcac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b24d30bbf7496986fee3a7f201b69ba973d3b0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "patch": "@@ -1,3 +1,247 @@\n+2020-08-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ranges (join_view): Add deduction guide (LWG 3474).\n+\t* testsuite/std/ranges/adaptors/join_lwg3474.cc: New test.\n+\n+2020-08-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/iterator_concepts.h (indirectly_readable): Add\n+\tpartial specializations to resolve ambiguities (LWG 3446).\n+\t* testsuite/24_iterators/associated_types/readable.traits.cc:\n+\tCheck types with both value_type and element_type.\n+\n+2020-08-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ranges (ranges::iota_view::size()): Perform all\n+\tcalculations in the right unsigned types.\n+\t* testsuite/std/ranges/iota/size.cc: New test.\n+\n+2020-08-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96766\n+\t* include/std/variant (_Variant_storage): Replace implicit\n+\tconversions from size_t to __index_type with explicit casts.\n+\n+2020-08-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/30_threads/packaged_task/cons/alloc.cc: Run for\n+\tC++11 and skip for C++17 or later.\n+\n+2020-08-24  Corentin Gay  <gay@adacore.com>\n+\n+\t* testsuite/20_util/shared_ptr/atomic/3.cc: Do not require POSIX\n+\tthreads and add -pthread only on targets supporting them.\n+\t* testsuite/20_util/shared_ptr/thread/default_weaktoshared.cc:\n+\tLikewise.\n+\t* testsuite/20_util/shared_ptr/thread/mutex_weaktoshared.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/async/42819.cc: Likewise.\n+\t* testsuite/30_threads/async/49668.cc: Likewise.\n+\t* testsuite/30_threads/async/54297.cc: Likewise.\n+\t* testsuite/30_threads/async/any.cc: Likewise.\n+\t* testsuite/30_threads/async/async.cc: Likewise.\n+\t* testsuite/30_threads/async/except.cc: Likewise.\n+\t* testsuite/30_threads/async/launch.cc: Likewise.\n+\t* testsuite/30_threads/async/lwg2021.cc: Likewise.\n+\t* testsuite/30_threads/async/sync.cc: Likewise. : Likewise.\n+\t* testsuite/30_threads/call_once/39909.cc: Likewise.\n+\t* testsuite/30_threads/call_once/49668.cc: Likewise.\n+\t* testsuite/30_threads/call_once/60497.cc: Likewise.\n+\t* testsuite/30_threads/call_once/call_once1.cc: Likewise.\n+\t* testsuite/30_threads/call_once/dr2442.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/54185.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/members/1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/members/2.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/members/3.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/members/53841.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/members/68519.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/native_handle/typesizes.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/condition_variable_any/50862.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/53830.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/cond.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/members/1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/members/2.cc: Likewise.\n+\t* testsuite/30_threads/future/cons/move.cc: Likewise.\n+\t* testsuite/30_threads/future/members/45133.cc: Likewise.\n+\t* testsuite/30_threads/future/members/get.cc: Likewise.\n+\t* testsuite/30_threads/future/members/get2.cc: Likewise.\n+\t* testsuite/30_threads/future/members/share.cc: Likewise.\n+\t* testsuite/30_threads/future/members/valid.cc: Likewise.\n+\t* testsuite/30_threads/future/members/wait.cc: Likewise.\n+\t* testsuite/30_threads/future/members/wait_for.cc: Likewise.\n+\t* testsuite/30_threads/future/members/wait_until.cc: Likewise.\n+\t* testsuite/30_threads/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/lock/2.cc: Likewise.\n+\t* testsuite/30_threads/lock/3.cc: Likewise.\n+\t* testsuite/30_threads/lock/4.cc: Likewise.\n+\t* testsuite/30_threads/mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/dest/destructor_locked.cc: Likewise.\n+\t* testsuite/30_threads/mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/native_handle/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/native_handle/typesizes.cc: Likewise.\n+\t* testsuite/30_threads/mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/unlock/2.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/49668.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/60564.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/2.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/3.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/56492.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/alloc.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/move.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/move_assign.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/at_thread_exit.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/packaged_task/members/get_future.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/get_future2.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/invoke.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/invoke2.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/invoke3.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/invoke4.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/invoke5.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/reset.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/reset2.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/swap.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/valid.cc: Likewise.\n+\t* testsuite/30_threads/promise/60966.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/alloc.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/move.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/move_assign.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/at_thread_exit.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/at_thread_exit2.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/get_future.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/get_future2.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_exception.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_exception2.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_value.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_value2.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_value3.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/swap.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/native_handle/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/unlock/2.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/lock/2.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/native_handle/1.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/native_handle/typesizes.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/unlock/2.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/cons/move.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/45133.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/get.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/get2.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/valid.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/wait.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/wait_for.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/wait_until.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/cons/2.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/cons/3.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/cons/4.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/cons/5.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/cons/6.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/locking/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/locking/2.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/locking/3.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/locking/4.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/modifiers/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/shared_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_timed_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_timed_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_timed_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/shared_timed_mutex/try_lock/3.cc: Likewise.\n+\t* testsuite/30_threads/shared_timed_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/this_thread/1.cc: Likewise.\n+\t* testsuite/30_threads/this_thread/sleep_for-mt.cc: Likewise.\n+\t* testsuite/30_threads/this_thread/sleep_until-mt.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/2.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/3.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/4.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/49668.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/5.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/6.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/7.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/8.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/9.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/moveable.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/terminate.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/1.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/2.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/3.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/4.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/5.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/hardware_concurrency.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/thread/native_handle/typesizes.cc: Likewise.\n+\t* testsuite/30_threads/thread/swap/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/dest/destructor_locked.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/timed_mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/native_handle/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/native_handle/typesizes.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_for/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_for/2.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_for/3.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/2.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/57641.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/unlock/2.cc: Likewise.\n+\t* testsuite/30_threads/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/try_lock/3.cc: Likewise.\n+\t* testsuite/30_threads/try_lock/4.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/2.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/3.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/4.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/5.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/6.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/1.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/2.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/3.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/4.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/modifiers/1.cc: Likewise.\n+\n 2020-08-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/96736"}]}