{"sha": "23d1aac4b58459f98f188344314fee09da6cecde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNkMWFhYzRiNTg0NTlmOThmMTg4MzQ0MzE0ZmVlMDlkYTZjZWNkZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-12-28T18:17:54Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-12-28T18:17:54Z"}, "message": "except.c: Fix comment formatting.\n\n\t* except.c: Fix comment formatting.\n\t* flags.h: Likewise.\n\t* flow.c: Likewise.\n\t* predict.c: Likewise.\n\t* simplify-rtx.c: Likewise.\n\t* system.h: Likewise.\n\t* vmsdbg.h: Likewise.\n\t* vmsdbgout.c: Likewise.\n\nFrom-SVN: r48349", "tree": {"sha": "05a889a6042079b20e46951152a0ee63b983eef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05a889a6042079b20e46951152a0ee63b983eef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23d1aac4b58459f98f188344314fee09da6cecde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d1aac4b58459f98f188344314fee09da6cecde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d1aac4b58459f98f188344314fee09da6cecde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d1aac4b58459f98f188344314fee09da6cecde/comments", "author": null, "committer": null, "parents": [{"sha": "20c907b05dbd501bb1b1b2b6c753665e256b9cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c907b05dbd501bb1b1b2b6c753665e256b9cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20c907b05dbd501bb1b1b2b6c753665e256b9cb2"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "70fb073130e4602c2275c5de8c6227b247791198", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23d1aac4b58459f98f188344314fee09da6cecde", "patch": "@@ -1,3 +1,14 @@\n+2001-12-28  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* except.c: Fix comment formatting.\n+\t* flags.h: Likewise.\n+\t* flow.c: Likewise.\n+\t* predict.c: Likewise.\n+\t* simplify-rtx.c: Likewise.\n+\t* system.h: Likewise.\n+\t* vmsdbg.h: Likewise.\n+\t* vmsdbgout.c: Likewise.\n+\n 2001-12-28  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md: Fix formatting."}, {"sha": "f575078e1fa7f4878d06d4777393f3c51c19520f", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=23d1aac4b58459f98f188344314fee09da6cecde", "patch": "@@ -776,7 +776,7 @@ expand_start_all_catch ()\n /* Begin a catch clause.  TYPE is the type caught, a list of such types, or\n    null if this is a catch-all clause. Providing a type list enables to\n    associate the catch region with potentially several exception types, which\n-   is useful e.g. for Ada. */\n+   is useful e.g. for Ada.  */\n \n void\n expand_start_catch (type_or_list)"}, {"sha": "49fdaa0aa35a0bcca0ea738fb93739b794b3f26b", "filename": "gcc/flags.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=23d1aac4b58459f98f188344314fee09da6cecde", "patch": "@@ -33,9 +33,9 @@ enum debug_info_type\n   DWARF_DEBUG,\t    /* Write Dwarf debug info (using dwarfout.c).  */\n   DWARF2_DEBUG,\t    /* Write Dwarf v2 debug info (using dwarf2out.c).  */\n   XCOFF_DEBUG,\t    /* Write IBM/Xcoff debug info (using dbxout.c).  */\n-  VMS_DEBUG,        /* Write VMS debug info (using vmsdbgout.c). */\n+  VMS_DEBUG,        /* Write VMS debug info (using vmsdbgout.c).  */\n   VMS_AND_DWARF2_DEBUG /* Write VMS debug info (using vmsdbgout.c).\n-                          and DWARF v2 debug info (using dwarf2out.c). */\n+                          and DWARF v2 debug info (using dwarf2out.c).  */\n };\n \n /* Specify which kind of debugging info to generate.  */"}, {"sha": "1f6b748eb60814722e1bb18d75d2b27310b490d7", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=23d1aac4b58459f98f188344314fee09da6cecde", "patch": "@@ -1377,7 +1377,7 @@ initialize_uninitialized_subregs ()\n \t     Its preferable to have an instance of the register's rtl since\n \t     there may be various flags set which we need to duplicate.  \n \t     If we can't find it, its probably an automatic whose initial\n-\t     value doesn't matter, or hopefully something we don't care about. */\n+\t     value doesn't matter, or hopefully something we don't care about.  */\n \t  for (i = get_insns (); i && INSN_UID (i) != uid; i = NEXT_INSN (i))\n \t    ;\n \t  if (i != NULL_RTX)"}, {"sha": "71da61a7c17cb9b46bb6837bf7ac6689548477a1", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=23d1aac4b58459f98f188344314fee09da6cecde", "patch": "@@ -386,7 +386,7 @@ estimate_probability (loops_info)\n \t  /* ??? Postdominator claims each noreturn block to be postdominated\n \t     by each, so we need to run only once.  This needs to be changed\n \t     once postdominace algorithm is updated to say something more\n-\t     sane. */\n+\t     sane.  */\n \t  found_noreturn = 1;\n \t  for (y = 0; y < n_basic_blocks; y++)\n \t    if (!TEST_BIT (post_dominators[y], i))"}, {"sha": "49c205c5aaa89e887849a6776cecf537336aaa77", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=23d1aac4b58459f98f188344314fee09da6cecde", "patch": "@@ -109,7 +109,7 @@ static void simplify_binary_is2orm1\tPARAMS ((PTR));\n \n \f\n /* Negate a CONST_INT rtx, truncating (because a conversion from a\n-   maximally negative number can overflow). */\n+   maximally negative number can overflow).  */\n static rtx\n neg_const_int (mode, i)\n      enum machine_mode mode;"}, {"sha": "a52738431d08dd592891724a61878cf0ba983feb", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=23d1aac4b58459f98f188344314fee09da6cecde", "patch": "@@ -159,7 +159,7 @@ extern int errno;\n \n #ifdef HAVE_SYS_PARAM_H\n # include <sys/param.h>\n-/* We use this identifier later and it appears in some vendor param.h's. */\n+/* We use this identifier later and it appears in some vendor param.h's.  */\n # undef PREFETCH\n #endif\n "}, {"sha": "8b7fcae57a5142f9af70a26921e230ef99492df6", "filename": "gcc/vmsdbg.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fvmsdbg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fvmsdbg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbg.h?ref=23d1aac4b58459f98f188344314fee09da6cecde", "patch": "@@ -52,11 +52,11 @@ typedef struct _DST_HEADER\n } DST_HEADER;\n #define DST_K_DST_HEADER_SIZE sizeof 4\n \n-/* Language type codes. */\n+/* Language type codes.  */\n typedef enum _DST_LANGUAGE {DST_K_FORTRAN = 1, DST_K_C = 7, DST_K_ADA = 9,\n \t\t\t    DST_K_UNKNOWN = 10, DST_K_CXX = 15} DST_LANGUAGE;\n \n-/* Module header (a module is the result of a single compilation). */\n+/* Module header (a module is the result of a single compilation).  */\n \n typedef struct _DST_MODULE_BEGIN\n {\n@@ -93,7 +93,7 @@ typedef struct _DST_MODULE_END\n } DST_MODULE_END;\n #define DST_K_MODEND_SIZE sizeof 4\n \n-/* Routine header. */\n+/* Routine header.  */\n \n typedef struct _DST_ROUTINE_BEGIN\n {\n@@ -122,7 +122,7 @@ typedef struct _DST_ROUTINE_END\n } DST_ROUTINE_END;\n #define DST_K_RTNEND_SIZE 9\n \n-/* Block header. */\n+/* Block header.  */\n \n typedef struct _DST_BLOCK_BEGIN\n {\n@@ -133,7 +133,7 @@ typedef struct _DST_BLOCK_BEGIN\n } DST_BLOCK_BEGIN;\n #define DST_K_BLKBEG_SIZE 10\n \n-/* Block trailer. */\n+/* Block trailer.  */\n \n typedef struct _DST_BLOCK_END\n {"}, {"sha": "b86719df4c1059d4976552866cadb121bf446d47", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1aac4b58459f98f188344314fee09da6cecde/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=23d1aac4b58459f98f188344314fee09da6cecde", "patch": "@@ -86,7 +86,7 @@ dst_file_info_entry;\n #define PTR_SIZE 4 /* Must be 32 bits for VMS debug info */\n #endif\n \n-/* Pointer to an structure of filenames referenced by this compilation unit. */\n+/* Pointer to an structure of filenames referenced by this compilation unit.  */\n static dst_file_info_ref file_info_table;\n \n /* Total number of entries in the table (i.e. array) pointed to by\n@@ -524,7 +524,7 @@ addr_const_to_string (str, x)\n \n /* Output the debug header HEADER.  Also output COMMENT if flag_verbose_asm is\n    set.  Return the header size.  Just return the size if DOSIZEONLY is\n-   non-zero. */\n+   non-zero.  */\n \n static int\n write_debug_header (header, comment, dosizeonly)\n@@ -556,7 +556,7 @@ write_debug_header (header, comment, dosizeonly)\n \n /* Output the address of SYMBOL.  Also output COMMENT if flag_verbose_asm is\n    set.  Return the address size.  Just return the size if DOSIZEONLY is\n-   non-zero. */\n+   non-zero.  */\n \n static int\n write_debug_addr (symbol, comment, dosizeonly)\n@@ -577,7 +577,7 @@ write_debug_addr (symbol, comment, dosizeonly)\n \n /* Output the single byte DATA1.  Also output COMMENT if flag_verbose_asm is\n    set.  Return the data size.  Just return the size if DOSIZEONLY is\n-   non-zero. */\n+   non-zero.  */\n \n static int\n write_debug_data1 (data1, comment, dosizeonly)\n@@ -598,7 +598,7 @@ write_debug_data1 (data1, comment, dosizeonly)\n \n /* Output the single word DATA2.  Also output COMMENT if flag_verbose_asm is\n    set.  Return the data size.  Just return the size if DOSIZEONLY is\n-   non-zero. */\n+   non-zero.  */\n \n static int\n write_debug_data2 (data2, comment, dosizeonly)\n@@ -618,7 +618,7 @@ write_debug_data2 (data2, comment, dosizeonly)\n }\n \n /* Output double word DATA4.  Also output COMMENT if flag_verbose_asm is set.\n-   Return the data size.  Just return the size if DOSIZEONLY is non-zero. */\n+   Return the data size.  Just return the size if DOSIZEONLY is non-zero.  */\n \n static int\n write_debug_data4 (data4, comment, dosizeonly)\n@@ -659,7 +659,7 @@ write_debug_data8 (data8, comment, dosizeonly)\n \n /* Output the difference between LABEL1 and LABEL2.  Also output COMMENT if\n    flag_verbose_asm is set.  Return the data size.  Just return the size if\n-   DOSIZEONLY is non-zero. */\n+   DOSIZEONLY is non-zero.  */\n \n static int\n write_debug_delta4 (label1, label2, comment, dosizeonly)\n@@ -681,7 +681,7 @@ write_debug_delta4 (label1, label2, comment, dosizeonly)\n \n /* Output a character string STRING.  Also write COMMENT if flag_verbose_asm is\n    set.  Return the string length.  Just return the length if DOSIZEONLY is\n-   non-zero. */\n+   non-zero.  */\n \n static int\n write_debug_string (string, comment, dosizeonly)\n@@ -701,7 +701,7 @@ write_debug_string (string, comment, dosizeonly)\n }\n \n /* Output a module begin header and return the header size.  Just return the\n-   size if DOSIZEONLY is non-zero. */\n+   size if DOSIZEONLY is non-zero.  */\n \n static int\n write_modbeg (dosizeonly)\n@@ -715,7 +715,7 @@ write_modbeg (dosizeonly)\n   int prodnamelen;\n   int totsize = 0;\n \n-  /* Assumes primary filename has Unix syntax file spec. */\n+  /* Assumes primary filename has Unix syntax file spec.  */\n   module_name = xstrdup (basename ((char *) primary_filename));\n \n   m = strrchr (module_name, '.');\n@@ -765,7 +765,7 @@ write_modbeg (dosizeonly)\n }\n \n /* Output a module end trailer and return the trailer size.   Just return\n-   the size if DOSIZEONLY is non-zero. */\n+   the size if DOSIZEONLY is non-zero.  */\n \n static int\n write_modend (dosizeonly)\n@@ -785,7 +785,7 @@ write_modend (dosizeonly)\n }\n \n /* Output a routine begin header routine RTNNUM and return the header size.\n-   Just return the size if DOSIZEONLY is non-zero. */\n+   Just return the size if DOSIZEONLY is non-zero.  */\n \n static int\n write_rtnbeg (rtnnum, dosizeonly)\n@@ -883,7 +883,7 @@ write_rtnbeg (rtnnum, dosizeonly)\n }\n \n /* Output a routine end trailer for routine RTNNUM and return the header size.\n-   Just return the size if DOSIZEONLY is non-zero. */\n+   Just return the size if DOSIZEONLY is non-zero.  */\n \n static int\n write_rtnend (rtnnum, dosizeonly)\n@@ -1058,7 +1058,7 @@ write_pclines (dosizeonly)\n \n /* Output a source correlation for file FILEID using information saved in\n    FILE_INFO_ENTRY and return the size.  Just return the size if DOSIZEONLY is\n-   non-zero. */\n+   non-zero.  */\n \n static int\n write_srccorr (fileid, file_info_entry, dosizeonly)\n@@ -1249,7 +1249,7 @@ write_srccorr (fileid, file_info_entry, dosizeonly)\n }\n \n /* Output all the source correlation entries and return the size.  Just return\n-   the size if DOSIZEONLY is non-zero. */\n+   the size if DOSIZEONLY is non-zero.  */\n \n static int\n write_srccorrs (dosizeonly)\n@@ -1393,7 +1393,7 @@ vmsdbgout_begin_function (decl)\n static char fullname_buff [4096];\n \n /* Return the full file specification for FILENAME.  The specification must be\n-   in VMS syntax in order to be processed by VMS Debug. */\n+   in VMS syntax in order to be processed by VMS Debug.  */\n \n static char *\n full_name (filename)\n@@ -1706,7 +1706,7 @@ vmsdbgout_finish (input_filename)\n \n   /* Output debugging information.\n      Warning! Do not change the name of the .vmsdebug section without\n-     changing it in the assembler also. */\n+     changing it in the assembler also.  */\n   named_section (NULL_TREE, \".vmsdebug\", 0);\n   ASM_OUTPUT_ALIGN (asm_out_file, 0);\n "}]}