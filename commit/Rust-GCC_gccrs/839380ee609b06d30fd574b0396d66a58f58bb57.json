{"sha": "839380ee609b06d30fd574b0396d66a58f58bb57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5MzgwZWU2MDliMDZkMzBmZDU3NGIwMzk2ZDY2YTU4ZjU4YmI1Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-11-17T22:49:05Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-11-17T22:49:05Z"}, "message": "mips.md (*mul_acc_si): Remove middle alternative and its associated define_split.\n\ngcc/\n\t* config/mips/mips.md (*mul_acc_si): Remove middle alternative\n\tand its associated define_split.  Expose the all-d alternative\n\tto the register allocator, but mark it with \"?\".  Mark the first\n\talternative with \"*?*?\".\n\t(*mul_sub_si): Likewise.\n\t(*mul_acc_si_r3900): New pattern.\n\ngcc/testsuite/\n\t* gcc.target/mips/madd-5.c: New test.\n\t* gcc.target/mips/madd-6.c: Likewise.\n\t* gcc.target/mips/madd-7.c: Likewise.\n\t* gcc.target/mips/madd-8.c: Likewise.\n\t* gcc.target/mips/msub-5.c: Likewise.\n\t* gcc.target/mips/msub-6.c: Likewise.\n\t* gcc.target/mips/msub-7.c: Likewise.\n\t* gcc.target/mips/msub-8.c: Likewise.\n\nFrom-SVN: r141954", "tree": {"sha": "36cb3165b921ef395682a3eab8b8469d2af9cc09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36cb3165b921ef395682a3eab8b8469d2af9cc09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/839380ee609b06d30fd574b0396d66a58f58bb57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839380ee609b06d30fd574b0396d66a58f58bb57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839380ee609b06d30fd574b0396d66a58f58bb57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839380ee609b06d30fd574b0396d66a58f58bb57/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2cf1a19e75ed35e286ac466c2ab69ffee3b26f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf1a19e75ed35e286ac466c2ab69ffee3b26f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cf1a19e75ed35e286ac466c2ab69ffee3b26f63"}], "stats": {"total": 219, "additions": 153, "deletions": 66}, "files": [{"sha": "37bedc06aea71cb2e943c254eb45ce216511c23e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -1,3 +1,12 @@\n+2008-11-17  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.md (*mul_acc_si): Remove middle alternative\n+\tand its associated define_split.  Expose the all-d alternative\n+\tto the register allocator, but mark it with \"?\".  Mark the first\n+\talternative with \"*?*?\".\n+\t(*mul_sub_si): Likewise.\n+\t(*mul_acc_si_r3900): New pattern.\n+\n 2008-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/38140"}, {"sha": "92e637c5a58c021580808336d789744be6ad007e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 47, "deletions": 66, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -1474,34 +1474,50 @@\n \n ;; Multiply-accumulate patterns\n \n-;; For processors that can copy the output to a general register:\n-;;\n-;; The all-d alternative is needed because the combiner will find this\n-;; pattern and then register alloc/reload will move registers around to\n-;; make them fit, and we don't want to trigger unnecessary loads to LO.\n-;;\n-;; The last alternative should be made slightly less desirable, but adding\n-;; \"?\" to the constraint is too strong, and causes values to be loaded into\n-;; LO even when that's more costly.  For now, using \"*d\" mostly does the\n-;; trick.\n+;; This pattern is first matched by combine, which tries to use the\n+;; pattern wherever it can.  We don't know until later whether it\n+;; is actually profitable to use MADD over a \"MUL; ADDIU\" sequence,\n+;; so we need to keep both options open.\n+;;\n+;; The second alternative has a \"?\" marker because it is generally\n+;; one instruction more costly than the first alternative.  This \"?\"\n+;; marker is enough to convey the relative costs to the register\n+;; allocator.\n+;;\n+;; However, reload counts reloads of operands 4 and 5 in the same way as\n+;; reloads of the other operands, even though operands 4 and 5 need no\n+;; copy instructions.  Reload therefore thinks that the second alternative\n+;; is two reloads more costly than the first.  We add \"*?*?\" to the first\n+;; alternative as a counterweight.\n (define_insn \"*mul_acc_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=l,*d,*d\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=l*?*?,d?\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n+\t\t\t  (match_operand:SI 2 \"register_operand\" \"d,d\"))\n+\t\t (match_operand:SI 3 \"register_operand\" \"0,d\")))\n+   (clobber (match_scratch:SI 4 \"=X,l\"))\n+   (clobber (match_scratch:SI 5 \"=X,&d\"))]\n+  \"GENERATE_MADD_MSUB && !TARGET_MIPS16\"\n+  \"@\n+    madd\\t%1,%2\n+    #\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"4,8\")])\n+\n+;; The same idea applies here.  The middle alternative needs one less\n+;; clobber than the final alternative, so we add \"*?\" as a counterweight.\n+(define_insn \"*mul_acc_si_r3900\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=l*?*?,d*?,d?\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d,d,d\")\n \t\t\t  (match_operand:SI 2 \"register_operand\" \"d,d,d\"))\n-\t\t (match_operand:SI 3 \"register_operand\" \"0,l,*d\")))\n+\t\t (match_operand:SI 3 \"register_operand\" \"0,l,d\")))\n    (clobber (match_scratch:SI 4 \"=X,3,l\"))\n    (clobber (match_scratch:SI 5 \"=X,X,&d\"))]\n-  \"(TARGET_MIPS3900\n-   || GENERATE_MADD_MSUB)\n-   && !TARGET_MIPS16\"\n-{\n-  static const char *const madd[] = { \"madd\\t%1,%2\", \"madd\\t%0,%1,%2\" };\n-  if (which_alternative == 2)\n-    return \"#\";\n-  if (GENERATE_MADD_MSUB && which_alternative != 0)\n-    return \"#\";\n-  return madd[which_alternative];\n-}\n+  \"TARGET_MIPS3900 && !TARGET_MIPS16\"\n+  \"@\n+    madd\\t%1,%2\n+    madd\\t%0,%1,%2\n+    #\"\n   [(set_attr \"type\"\t\"imadd\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"4,4,8\")])\n@@ -1522,23 +1538,6 @@\n    (set (match_dup 0) (plus:SI (match_dup 5) (match_dup 3)))]\n   \"\")\n \n-;; Split *mul_acc_si if the destination accumulator value is in a GPR\n-;; and the source accumulator value is in LO.\n-(define_split\n-  [(set (match_operand:SI 0 \"d_operand\")\n-        (plus:SI (mult:SI (match_operand:SI 1 \"d_operand\")\n-                          (match_operand:SI 2 \"d_operand\"))\n-                 (match_operand:SI 3 \"lo_operand\")))\n-   (clobber (match_dup 3))\n-   (clobber (scratch:SI))]\n-  \"reload_completed\"\n-  [(parallel [(set (match_dup 3)\n-                   (plus:SI (mult:SI (match_dup 1) (match_dup 2))\n-                            (match_dup 3)))\n-              (clobber (scratch:SI))\n-              (clobber (scratch:SI))])\n-   (set (match_dup 0) (match_dup 3))])\n-\n (define_insn \"*macc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l,d\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n@@ -1718,21 +1717,21 @@\n \t\t\t\toperands[2], operands[0]);\n })\n \n+;; See the comment above *mul_add_si for details.\n (define_insn \"*mul_sub_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=l,*d,*d\")\n-        (minus:SI (match_operand:SI 1 \"register_operand\" \"0,l,*d\")\n-                  (mult:SI (match_operand:SI 2 \"register_operand\" \"d,d,d\")\n-                           (match_operand:SI 3 \"register_operand\" \"d,d,d\"))))\n-   (clobber (match_scratch:SI 4 \"=X,1,l\"))\n-   (clobber (match_scratch:SI 5 \"=X,X,&d\"))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=l*?*?,d?\")\n+        (minus:SI (match_operand:SI 1 \"register_operand\" \"0,d\")\n+                  (mult:SI (match_operand:SI 2 \"register_operand\" \"d,d\")\n+                           (match_operand:SI 3 \"register_operand\" \"d,d\"))))\n+   (clobber (match_scratch:SI 4 \"=X,l\"))\n+   (clobber (match_scratch:SI 5 \"=X,&d\"))]\n   \"GENERATE_MADD_MSUB\"\n   \"@\n    msub\\t%2,%3\n-   #\n    #\"\n   [(set_attr \"type\"     \"imadd\")\n    (set_attr \"mode\"     \"SI\")\n-   (set_attr \"length\"   \"4,8,8\")])\n+   (set_attr \"length\"   \"4,8\")])\n \n ;; Split *mul_sub_si if both the source and destination accumulator\n ;; values are GPRs.\n@@ -1750,24 +1749,6 @@\n    (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 5)))]\n   \"\")\n \n-;; Split *mul_acc_si if the destination accumulator value is in a GPR\n-;; and the source accumulator value is in LO.\n-(define_split\n-  [(set (match_operand:SI 0 \"d_operand\")\n-        (minus:SI (match_operand:SI 1 \"lo_operand\")\n-                  (mult:SI (match_operand:SI 2 \"d_operand\")\n-                           (match_operand:SI 3 \"d_operand\"))))\n-   (clobber (match_dup 1))\n-   (clobber (scratch:SI))]\n-  \"reload_completed\"\n-  [(parallel [(set (match_dup 1)\n-                   (minus:SI (match_dup 1)\n-                             (mult:SI (match_dup 2) (match_dup 3))))\n-              (clobber (scratch:SI))\n-              (clobber (scratch:SI))])\n-   (set (match_dup 0) (match_dup 1))]\n-  \"\")\n-\n (define_insn \"*muls\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l,d\")\n         (neg:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d,d\")"}, {"sha": "1d97976cf7b15637ef03b9925172baae3c826481", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -1,3 +1,14 @@\n+2008-11-17  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.target/mips/madd-5.c: New test.\n+\t* gcc.target/mips/madd-6.c: Likewise.\n+\t* gcc.target/mips/madd-7.c: Likewise.\n+\t* gcc.target/mips/madd-8.c: Likewise.\n+\t* gcc.target/mips/msub-5.c: Likewise.\n+\t* gcc.target/mips/msub-6.c: Likewise.\n+\t* gcc.target/mips/msub-7.c: Likewise.\n+\t* gcc.target/mips/msub-8.c: Likewise.\n+\n 2008-11-17  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.target/mips/no-smartmips-ror-1.c: Use -march=mips32 instead"}, {"sha": "780194dc7e633be23a8643d6e0227bf7b19a649c", "filename": "gcc/testsuite/gcc.target/mips/madd-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-5.c?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-mips-options \"-O2 -march=5kc\" } */\n+/* { dg-final { scan-assembler-times \"\\tmadd\\t\" 4 } } */\n+/* { dg-final { scan-assembler-not \"\\tmtlo\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\tmflo\\t\" 3 } } */\n+\n+NOMIPS16 void f1 (int *a) { a[0] = a[0] * a[1] + a[2] * a[3]; }\n+NOMIPS16 void f2 (int *a) { a[0] = a[0] * a[1] + a[2] * a[3] + a[4]; }\n+NOMIPS16 void f3 (int *a) { a[0] = a[0] * a[1] + a[2] * a[3] + a[4] * a[5]; }"}, {"sha": "bbb6783d4a0c70c287a55c983e532f23e88b286c", "filename": "gcc/testsuite/gcc.target/mips/madd-6.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-6.c?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-mips-options \"-O2 -march=5kc\" } */\n+/* { dg-final { scan-assembler-not \"\\tmadd\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmul\\t\" } } */\n+/* { dg-final { scan-assembler \"\\taddu\\t\" } } */\n+\n+NOMIPS16 void f1 (int *a) { a[0] = a[0] * a[1] + a[2]; }"}, {"sha": "25fd07db128e7366ded5497d619411fca92c4c7e", "filename": "gcc/testsuite/gcc.target/mips/madd-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-7.c?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-mips-options \"-O2 -march=5kc\" } */\n+/* { dg-final { scan-assembler-not \"\\tmul\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmadd\\t\" } } */\n+\n+NOMIPS16 int\n+f1 (int *a, int *b, int n)\n+{\n+  int x, i;\n+\n+  x = 0;\n+  for (i = 0; i < n; i++)\n+    x += a[i] * b[i];\n+  return x;\n+}"}, {"sha": "0fc680e5979371bc878e820cc173b43824b5ec2d", "filename": "gcc/testsuite/gcc.target/mips/madd-8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-8.c?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-mips-options \"-O2 -march=5kc\" } */\n+/* { dg-final { scan-assembler \"\\tmul\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmadd\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmtlo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+\n+NOMIPS16 int\n+f2 (int x, int y, int z)\n+{\n+  asm volatile (\"\" ::: \"$1\", \"$2\", \"$3\", \"$4\", \"$5\", \"$6\", \"$7\", \"$8\", \"$9\",\n+\t\t\"$10\", \"$11\", \"$12\", \"$13\", \"$14\", \"$15\", \"$16\", \"$17\",\n+\t\t\"$18\", \"$19\", \"$20\", \"$21\", \"$22\", \"$23\", \"$24\", \"$25\",\n+\t\t\"$31\");\n+  return x * y + z;\n+}"}, {"sha": "675da64a5e1ecd5bc0fe8de7404b8d489964d98b", "filename": "gcc/testsuite/gcc.target/mips/msub-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-5.c?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-mips-options \"-O2 -march=5kc\" } */\n+/* { dg-final { scan-assembler-times \"\\tmsub\\t\" 4 } } */\n+/* { dg-final { scan-assembler-not \"\\tmtlo\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\tmflo\\t\" 3 } } */\n+\n+NOMIPS16 void f1 (int *a) { a[0] = a[0] * a[1] - a[2] * a[3]; }\n+NOMIPS16 void f2 (int *a) { a[0] = a[0] * a[1] - a[2] * a[3] - a[4]; }\n+NOMIPS16 void f3 (int *a) { a[0] = a[0] * a[1] - a[2] * a[3] - a[4] * a[5]; }"}, {"sha": "afe01cb516230908191036a523987fec005dd308", "filename": "gcc/testsuite/gcc.target/mips/msub-6.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-6.c?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-mips-options \"-O2 -march=5kc\" } */\n+/* { dg-final { scan-assembler-not \"\\tmsub\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmul\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tsubu\\t\" } } */\n+\n+NOMIPS16 void f1 (int *a) { a[0] = a[0] - a[1] * a[2]; }"}, {"sha": "9fff31d5132bb8053fd71f2d16c0a4a3092f85cc", "filename": "gcc/testsuite/gcc.target/mips/msub-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-7.c?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-mips-options \"-O2 -march=5kc\" } */\n+/* { dg-final { scan-assembler-not \"\\tmul\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmsub\\t\" } } */\n+\n+NOMIPS16 int\n+f1 (int *a, int *b, int n)\n+{\n+  int x, i;\n+\n+  x = 100;\n+  for (i = 0; i < n; i++)\n+    x -= a[i] * b[i];\n+  return x;\n+}"}, {"sha": "7517540cdc46ac704a46d7277056903f16233851", "filename": "gcc/testsuite/gcc.target/mips/msub-8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839380ee609b06d30fd574b0396d66a58f58bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-8.c?ref=839380ee609b06d30fd574b0396d66a58f58bb57", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-mips-options \"-O2 -march=5kc\" } */\n+/* { dg-final { scan-assembler \"\\tmul\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmsub\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmtlo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+\n+NOMIPS16 int\n+f2 (int x, int y, int z)\n+{\n+  asm volatile (\"\" ::: \"$1\", \"$2\", \"$3\", \"$4\", \"$5\", \"$6\", \"$7\", \"$8\", \"$9\",\n+\t\t\"$10\", \"$11\", \"$12\", \"$13\", \"$14\", \"$15\", \"$16\", \"$17\",\n+\t\t\"$18\", \"$19\", \"$20\", \"$21\", \"$22\", \"$23\", \"$24\", \"$25\",\n+\t\t\"$31\");\n+  return x - y * z;\n+}"}]}