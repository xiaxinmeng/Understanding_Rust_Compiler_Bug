{"sha": "34dda8045231413589fd1ac4ecd6a9cc97b51278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRkZGE4MDQ1MjMxNDEzNTg5ZmQxYWM0ZWNkNmE5Y2M5N2I1MTI3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-12-03T20:46:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-12-03T20:46:32Z"}, "message": "typeck.c (cp_build_addr_expr_1): Use the cp_expr_loc_or_input_loc location in a few additional diagnostics; tidy.\n\n/cp\n2019-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (cp_build_addr_expr_1): Use the cp_expr_loc_or_input_loc\n\tlocation in a few additional diagnostics; tidy.\n\t(check_return_expr): Likewise.\n\n\t* typeck.c (cp_build_addr_expr_1): Use tree_strip_any_location_wrapper\n\tfor the address of main pedwarn.\n\n/testsuite\n2019-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/inconsistent-deduction-1.C: New.\n\t* g++.dg/diagnostic/returning-a-value-1.C: Likewise.\n\t* g++.dg/cpp0x/decltype3.C: Check location(s) too.\n\t* g++.dg/cpp0x/decltype4.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-deduce-ext-neg.C: Likewise.\n\t* g++.dg/cpp2a/consteval13.C: Likewise.\n\t* g++.dg/expr/pmf-1.C: Likewise.\n\t* g++.dg/other/ptrmem2.C: Likewise.\n\t* g++.dg/template/ptrmem17.C: Likewise.\n\t* g++.old-deja/g++.bugs/900213_03.C: Likewise.\n\t* g++.old-deja/g++.other/pmf7.C: Likewise.\n\t* g++.old-deja/g++.other/ptrmem7.C: Likewise.\n\n\t* g++.dg/diagnostic/main2.C: New.\n\nFrom-SVN: r278947", "tree": {"sha": "4658eb950ddd1ad2c05ffba18f8bd2fcbf828524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4658eb950ddd1ad2c05ffba18f8bd2fcbf828524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34dda8045231413589fd1ac4ecd6a9cc97b51278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34dda8045231413589fd1ac4ecd6a9cc97b51278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34dda8045231413589fd1ac4ecd6a9cc97b51278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34dda8045231413589fd1ac4ecd6a9cc97b51278/comments", "author": null, "committer": null, "parents": [{"sha": "ac0573de6cc4099d40263008ace3593d0d0647aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0573de6cc4099d40263008ace3593d0d0647aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac0573de6cc4099d40263008ace3593d0d0647aa"}], "stats": {"total": 125, "additions": 92, "deletions": 33}, "files": [{"sha": "3c86cecfa6e8b6dae5e90b9c5cb284d51a5a674a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -1,3 +1,12 @@\n+2019-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (cp_build_addr_expr_1): Use the cp_expr_loc_or_input_loc\n+\tlocation in a few additional diagnostics; tidy.\n+\t(check_return_expr): Likewise.\n+\n+\t* typeck.c (cp_build_addr_expr_1): Use tree_strip_any_location_wrapper\n+\tfor the address of main pedwarn.\n+\n 2019-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91369"}, {"sha": "3b947c32bbcda9c64eb80e3875ca344b876f2057", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -6070,6 +6070,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n     return error_mark_node;\n \n   argtype = lvalue_type (arg);\n+  location_t loc = cp_expr_loc_or_input_loc (arg);\n \n   gcc_assert (!(identifier_p (arg) && IDENTIFIER_ANY_OP_P (arg)));\n \n@@ -6103,12 +6104,14 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \t  else if (current_class_type\n \t\t   && TREE_OPERAND (arg, 0) == current_class_ref)\n \t    /* An expression like &memfn.  */\n-\t    permerror (input_location, \"ISO C++ forbids taking the address of an unqualified\"\n+\t    permerror (loc,\n+\t\t       \"ISO C++ forbids taking the address of an unqualified\"\n \t\t       \" or parenthesized non-static member function to form\"\n \t\t       \" a pointer to member function.  Say %<&%T::%D%>\",\n \t\t       base, name);\n \t  else\n-\t    permerror (input_location, \"ISO C++ forbids taking the address of a bound member\"\n+\t    permerror (loc,\n+\t\t       \"ISO C++ forbids taking the address of a bound member\"\n \t\t       \" function to form a pointer to member function.\"\n \t\t       \"  Say %<&%T::%D%>\",\n \t\t       base, name);\n@@ -6135,16 +6138,15 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       if (kind == clk_none)\n \t{\n \t  if (complain & tf_error)\n-\t    lvalue_error (cp_expr_loc_or_input_loc (arg), lv_addressof);\n+\t    lvalue_error (loc, lv_addressof);\n \t  return error_mark_node;\n \t}\n       if (strict_lvalue && (kind & (clk_rvalueref|clk_class)))\n \t{\n \t  if (!(complain & tf_error))\n \t    return error_mark_node;\n \t  /* Make this a permerror because we used to accept it.  */\n-\t  permerror (cp_expr_loc_or_input_loc (arg),\n-\t\t     \"taking address of rvalue\");\n+\t  permerror (loc, \"taking address of rvalue\");\n \t}\n     }\n \n@@ -6154,13 +6156,13 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       arg = build1 (CONVERT_EXPR, type, arg);\n       return arg;\n     }\n-  else if (pedantic && DECL_MAIN_P (arg))\n+  else if (pedantic && DECL_MAIN_P (tree_strip_any_location_wrapper (arg)))\n     {\n       /* ARM $3.4 */\n       /* Apparently a lot of autoconf scripts for C++ packages do this,\n \t so only complain if -Wpedantic.  */\n       if (complain & (flag_pedantic_errors ? tf_error : tf_warning))\n-\tpedwarn (input_location, OPT_Wpedantic,\n+\tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C++ forbids taking address of function %<::main%>\");\n       else if (flag_pedantic_errors)\n \treturn error_mark_node;\n@@ -6218,7 +6220,8 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \tif (TYPE_REF_P (TREE_TYPE (t)))\n \t  {\n \t    if (complain & tf_error)\n-\t      error (\"cannot create pointer to reference member %qD\", t);\n+\t      error_at (loc,\n+\t\t\t\"cannot create pointer to reference member %qD\", t);\n \t    return error_mark_node;\n \t  }\n \n@@ -6238,8 +6241,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n   if (bitfield_p (arg))\n     {\n       if (complain & tf_error)\n-\terror_at (cp_expr_loc_or_input_loc (arg),\n-\t\t  \"attempt to take address of bit-field\");\n+\terror_at (loc, \"attempt to take address of bit-field\");\n       return error_mark_node;\n     }\n \n@@ -6254,8 +6256,8 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \t      || !DECL_IMMEDIATE_FUNCTION_P (current_function_decl)))\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"taking address of an immediate function %qD\",\n-\t\t   stripped_arg);\n+\t    error_at (loc, \"taking address of an immediate function %qD\",\n+\t\t      stripped_arg);\n \t  return error_mark_node;\n \t}\n       if (TREE_CODE (stripped_arg) == FUNCTION_DECL\n@@ -9676,6 +9678,7 @@ check_return_expr (tree retval, bool *no_warning)\n      the declared type is incomplete.  */\n   tree functype;\n   int fn_returns_value_p;\n+  location_t loc = cp_expr_loc_or_input_loc (retval);\n \n   *no_warning = false;\n \n@@ -9689,7 +9692,7 @@ check_return_expr (tree retval, bool *no_warning)\n   if (DECL_DESTRUCTOR_P (current_function_decl))\n     {\n       if (retval)\n-\terror (\"returning a value from a destructor\");\n+\terror_at (loc, \"returning a value from a destructor\");\n       return NULL_TREE;\n     }\n   else if (DECL_CONSTRUCTOR_P (current_function_decl))\n@@ -9700,7 +9703,7 @@ check_return_expr (tree retval, bool *no_warning)\n \terror (\"cannot return from a handler of a function-try-block of a constructor\");\n       else if (retval)\n \t/* You can't return a value from a constructor.  */\n-\terror (\"returning a value from a constructor\");\n+\terror_at (loc, \"returning a value from a constructor\");\n       return NULL_TREE;\n     }\n \n@@ -9762,11 +9765,11 @@ check_return_expr (tree retval, bool *no_warning)\n       else if (!same_type_p (type, functype))\n \t{\n \t  if (LAMBDA_FUNCTION_P (current_function_decl))\n-\t    error (\"inconsistent types %qT and %qT deduced for \"\n-\t\t   \"lambda return type\", functype, type);\n+\t    error_at (loc, \"inconsistent types %qT and %qT deduced for \"\n+\t\t      \"lambda return type\", functype, type);\n \t  else\n-\t    error (\"inconsistent deduction for auto return type: \"\n-\t\t   \"%qT and then %qT\", functype, type);\n+\t    error_at (loc, \"inconsistent deduction for auto return type: \"\n+\t\t      \"%qT and then %qT\", functype, type);\n \t}\n       functype = type;\n     }\n@@ -9800,8 +9803,7 @@ check_return_expr (tree retval, bool *no_warning)\n \t   its side-effects.  */\n \tfinish_expr_stmt (retval);\n       else if (retval != error_mark_node)\n-\tpermerror (input_location,\n-\t\t   \"return-statement with a value, in function \"\n+\tpermerror (loc, \"return-statement with a value, in function \"\n \t\t   \"returning %qT\", valtype);\n       current_function_returns_null = 1;\n \n@@ -9857,7 +9859,8 @@ check_return_expr (tree retval, bool *no_warning)\n \t}\n \n       if (warn)\n-\twarning (OPT_Weffc__, \"%<operator=%> should return a reference to %<*this%>\");\n+\twarning_at (loc, OPT_Weffc__,\n+\t\t    \"%<operator=%> should return a reference to %<*this%>\");\n     }\n \n   if (dependent_type_p (functype)"}, {"sha": "330b75b4ff0d80911110cf79ca8540de5c8a9411", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -1,3 +1,20 @@\n+2019-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/inconsistent-deduction-1.C: New.\n+\t* g++.dg/diagnostic/returning-a-value-1.C: Likewise.\n+\t* g++.dg/cpp0x/decltype3.C: Check location(s) too.\n+\t* g++.dg/cpp0x/decltype4.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-deduce-ext-neg.C: Likewise.\n+\t* g++.dg/cpp2a/consteval13.C: Likewise.\n+\t* g++.dg/expr/pmf-1.C: Likewise.\n+\t* g++.dg/other/ptrmem2.C: Likewise.\n+\t* g++.dg/template/ptrmem17.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900213_03.C: Likewise.\n+\t* g++.old-deja/g++.other/pmf7.C: Likewise.\n+\t* g++.old-deja/g++.other/ptrmem7.C: Likewise.\n+\n+\t* g++.dg/diagnostic/main2.C: New.\n+\n 2019-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91369"}, {"sha": "427923eb07a19007095a0df8bf8a9d9694288a12", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -54,7 +54,7 @@ public:\n }; \n \n CHECK_DECLTYPE(decltype(aa.*&A::a), int&);\n-decltype(aa.*&A::b) zz; // { dg-error \"cannot create pointer to reference member\" \"cannot\" }\n+decltype(aa.*&A::b) zz; // { dg-error \"18:cannot create pointer to reference member\" \"cannot\" }\n \n CHECK_DECLTYPE(decltype(caa.*&A::a), const int&);\n "}, {"sha": "b46cbed691df18eec388bb0e54f1d5c344de783f", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype4.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -23,7 +23,7 @@ struct A {\n }; \n \n CHECK_DECLTYPE(decltype(&A::x), int A::*);\n-decltype(&A::y) Ay; // { dg-error \"cannot create pointer to reference member|invalid type\" }\n+decltype(&A::y) Ay; // { dg-error \"14:cannot create pointer to reference member|invalid type\" }\n CHECK_DECLTYPE(decltype(&A::foo), int (A::*) (char));\n CHECK_DECLTYPE(decltype(&A::bar), int& (A::*) () const);\n "}, {"sha": "5f868822db9c9225f05741de63521da2516c9d73", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-deduce-ext-neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-deduce-ext-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-deduce-ext-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-deduce-ext-neg.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -11,7 +11,7 @@ template <class T> int f (T t) {\n     if (b)\n       return t.fn1();\n     else\n-      return t.fn2();\t\t// { dg-error \"inconsistent types\" }\n+      return t.fn2();\t\t// { dg-error \"19:inconsistent types\" }\n   }(t);\n }\n "}, {"sha": "a2e1750b3caff02ba70d69c50d029a3121613f94", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval13.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval13.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -10,8 +10,8 @@ void\n foo ()\n {\n    auto qux = [] (fnptr a = quux ()) consteval { return a (); };\n-   constexpr auto c = qux (baz);\t// { dg-error \"taking address of an immediate function\" }\n-   constexpr auto d = qux (bar);\t// { dg-error \"taking address of an immediate function\" }\n+   constexpr auto c = qux (baz);\t// { dg-error \"28:taking address of an immediate function\" }\n+   constexpr auto d = qux (bar);\t// { dg-error \"28:taking address of an immediate function\" }\n    static_assert (c == 1);\n    static_assert (d == 42);\n }"}, {"sha": "2b4e77a17ff860b9ab7cc88089c0375dc81f0157", "filename": "gcc/testsuite/g++.dg/diagnostic/inconsistent-deduction-1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Finconsistent-deduction-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Finconsistent-deduction-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Finconsistent-deduction-1.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++14 } }\n+\n+void foo();\n+\n+auto bar(bool b)\n+{\n+  if (b)\n+    return 0;\n+  return foo(); // { dg-error \"13:inconsistent deduction for auto return type: .int. and then .void.\" }\n+}"}, {"sha": "02495cf1970185395332bc8eaf7ee9a98bf3a7e1", "filename": "gcc/testsuite/g++.dg/diagnostic/main2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmain2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmain2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmain2.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -0,0 +1,12 @@\n+int main ();\n+\n+typedef int (*fptr) ();\n+\n+void foo (fptr);\n+\n+fptr bar ()\n+{\n+  foo (main);  // { dg-error \"8:ISO C\\\\+\\\\+ forbids taking address of function\" }\n+\n+  return main;  // { dg-error \"10:ISO C\\\\+\\\\+ forbids taking address of function\" }\n+}"}, {"sha": "ee53900a7fdd93db811ed98d168effecd1db47d1", "filename": "gcc/testsuite/g++.dg/diagnostic/returning-a-value-1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Freturning-a-value-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Freturning-a-value-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Freturning-a-value-1.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -0,0 +1,8 @@\n+int foo();\n+\n+struct A\n+{\n+  A() { return foo(); }  // { dg-error \"19:returning a value\" }\n+  ~A() { return foo(); }  // { dg-error \"20:returning a value\" }\n+  void bar() { return foo(); }  // { dg-error \"26:return-statement with a value\" }\n+};"}, {"sha": "bf300e11dc4016141e55bd81acc7579f90def981", "filename": "gcc/testsuite/g++.dg/expr/pmf-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpmf-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpmf-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpmf-1.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -13,7 +13,7 @@ struct A\n   void h()\n   {\n     void (A::*p)() = &A::f;\n-    void (A::*q)() = &(A::f);       // { dg-error \"parenthesized\" }\n+    void (A::*q)() = &(A::f);       // { dg-error \"27:ISO C\\\\+\\\\+ forbids taking the address of an unqualified or parenthesized\" }\n     foo(&g<int>);                   // { dg-error \"cannot convert\" }\n   }\n };"}, {"sha": "6cae5474fbb252f6dd8cbf73a353ba5703aa902d", "filename": "gcc/testsuite/g++.dg/other/ptrmem2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem2.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -19,7 +19,7 @@ template<class T> int f2(T x);\n \n int D::Foo ()\n {\n-  f1( &D::m);   // { dg-error \"cannot create pointer to ref\" }\n+  f1( &D::m);   // { dg-error \"11:cannot create pointer to ref\" }\n   f1( &(D::m));\t// ok\n   f2( &D::s);   // ok\n   f2( &(D::s)); // ok\n@@ -28,7 +28,7 @@ int D::Foo ()\n \n int Foo ()\n {\n-  f1( &D::m);    // { dg-error \"cannot create pointer to ref\" }\n+  f1( &D::m);    // { dg-error \"11:cannot create pointer to ref\" }\n   f1( &(D::m));  // { dg-error \"non-static\" }\n   f2( &D::s);    // ok\n   f2( &(D::s));  // ok"}, {"sha": "2b73a484735560b76bdf2809e6610def3256f455", "filename": "gcc/testsuite/g++.dg/template/ptrmem17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem17.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -4,7 +4,7 @@ template<int> struct A\n {\n   int& i;\n   A();\n-  ~A() { &A::i; } // { dg-error \"reference\" }\n+  ~A() { &A::i; } // { dg-error \"14:cannot create pointer to reference\" }\n };\n \n A<0> a;"}, {"sha": "20e43e9729a437d97231e163e0a0bf128a0da11b", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900213_03.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_03.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -21,7 +21,7 @@ struct0 *ptr;\n \n void global_function_0 ()\n {\n-  fmp = &ptr->function_member;\t// { dg-error \"\" } \n+  fmp = &ptr->function_member;\t// { dg-error \"15:ISO C\\\\+\\\\+ forbids taking the address of a bound member function\" } \n   //dmp = &ptr->data_member;\t//  caught by g++, missed by cfront\n }\n "}, {"sha": "0006171fe9e6ad9c120835bee3173730d72310bb", "filename": "gcc/testsuite/g++.old-deja/g++.other/pmf7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf7.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -12,5 +12,5 @@ int main ()\n {\n   A a;\n   &a.f;\t\t\t\t// { dg-error \"\" } overloaded\n-  &a.g;\t\t\t\t// { dg-error \"\" } can't write a pmf like this\n+  &a.g;\t\t\t\t// { dg-error \"6:ISO C\\\\+\\\\+ forbids taking the address of a bound member function\" } can't write a pmf like this\n }"}, {"sha": "3468f33649736bf4293d5ca8e05e2d36414d1e2a", "filename": "gcc/testsuite/g++.old-deja/g++.other/ptrmem7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dda8045231413589fd1ac4ecd6a9cc97b51278/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem7.C?ref=34dda8045231413589fd1ac4ecd6a9cc97b51278", "patch": "@@ -36,7 +36,7 @@ void A::foo ()\n   int (A::*ptr14) (int) = single;         // { dg-error \"cannot convert\" }\n \n   int (A::*ptr20) (int) = &(A::ns);       // { dg-error \"pointer to member\" }\n-  int (A::*ptr21) (int) = &(A::single);   // { dg-error \"pointer to member\" }\n+  int (A::*ptr21) (int) = &(A::single);   // { dg-error \"32:ISO C\\\\+\\\\+ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member\" }\n \n   int (*ptr31) (short) = &A::sole;\n   int (*ptr32) (short) = A::sole;"}]}