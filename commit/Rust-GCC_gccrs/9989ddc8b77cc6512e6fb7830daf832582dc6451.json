{"sha": "9989ddc8b77cc6512e6fb7830daf832582dc6451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk4OWRkYzhiNzdjYzY1MTJlNmZiNzgzMGRhZjgzMjU4MmRjNjQ1MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-10-26T10:41:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-10-26T10:41:29Z"}, "message": "mips.c (r10k_needs_protection_p_1): Take an rtx rather than an rtx pointer.\n\ngcc/\n\t* config/mips/mips.c (r10k_needs_protection_p_1): Take an rtx\n\trather than an rtx pointer.  Change type of insn from \"void *\"\n\tto its real type.  Return bool rather than int.  Iterate over\n\tall subrtxes here.\n\t(r10k_needs_protection_p_store): Update accordingly.\n\t(r10k_needs_protection_p): Likewise.\n\nFrom-SVN: r216711", "tree": {"sha": "e2169259b6a6d03d65a06947a21d9c25d840aacd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2169259b6a6d03d65a06947a21d9c25d840aacd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9989ddc8b77cc6512e6fb7830daf832582dc6451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9989ddc8b77cc6512e6fb7830daf832582dc6451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9989ddc8b77cc6512e6fb7830daf832582dc6451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9989ddc8b77cc6512e6fb7830daf832582dc6451/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b3dd001d52421b68aaf581018ff2bdf5b5ac5e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3dd001d52421b68aaf581018ff2bdf5b5ac5e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b3dd001d52421b68aaf581018ff2bdf5b5ac5e0"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "9bb932d9077f521011c5e80e625172236848a6a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9989ddc8b77cc6512e6fb7830daf832582dc6451/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9989ddc8b77cc6512e6fb7830daf832582dc6451/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9989ddc8b77cc6512e6fb7830daf832582dc6451", "patch": "@@ -1,3 +1,12 @@\n+2014-10-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/mips/mips.c (r10k_needs_protection_p_1): Take an rtx\n+\trather than an rtx pointer.  Change type of insn from \"void *\"\n+\tto its real type.  Return bool rather than int.  Iterate over\n+\tall subrtxes here.\n+\t(r10k_needs_protection_p_store): Update accordingly.\n+\t(r10k_needs_protection_p): Likewise.\n+\n 2014-10-26  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/mips/mips.c (mips16_rewrite_pool_refs_info): Delete."}, {"sha": "5490e975f6daa9b923a06a80c2425cb29c61d9c1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9989ddc8b77cc6512e6fb7830daf832582dc6451/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9989ddc8b77cc6512e6fb7830daf832582dc6451/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9989ddc8b77cc6512e6fb7830daf832582dc6451", "patch": "@@ -15063,28 +15063,28 @@ r10k_safe_mem_expr_p (tree expr, unsigned HOST_WIDE_INT offset)\n   return offset < tree_to_uhwi (DECL_SIZE_UNIT (inner));\n }\n \n-/* A for_each_rtx callback for which DATA points to the instruction\n-   containing *X.  Stop the search if we find a MEM that is not safe\n-   from R10K speculation.  */\n+/* Return true if X contains a MEM that is not safe from R10K speculation.\n+   INSN is the instruction that contains X.  */\n \n-static int\n-r10k_needs_protection_p_1 (rtx *loc, void *data)\n+static bool\n+r10k_needs_protection_p_1 (rtx x, rtx_insn *insn)\n {\n-  rtx mem;\n-\n-  mem = *loc;\n-  if (!MEM_P (mem))\n-    return 0;\n-\n-  if (MEM_EXPR (mem)\n-      && MEM_OFFSET_KNOWN_P (mem)\n-      && r10k_safe_mem_expr_p (MEM_EXPR (mem), MEM_OFFSET (mem)))\n-    return -1;\n-\n-  if (r10k_safe_address_p (XEXP (mem, 0), (rtx_insn *) data))\n-    return -1;\n-\n-  return 1;\n+  subrtx_var_iterator::array_type array;\n+  FOR_EACH_SUBRTX_VAR (iter, array, x, NONCONST)\n+    {\n+      rtx mem = *iter;\n+      if (MEM_P (mem))\n+\t{\n+\t  if ((MEM_EXPR (mem)\n+\t       && MEM_OFFSET_KNOWN_P (mem)\n+\t       && r10k_safe_mem_expr_p (MEM_EXPR (mem), MEM_OFFSET (mem)))\n+\t      || r10k_safe_address_p (XEXP (mem, 0), insn))\n+\t    iter.skip_subrtxes ();\n+\t  else\n+\t    return true;\n+\t}\n+    }\n+  return false;\n }\n \n /* A note_stores callback for which DATA points to an instruction pointer.\n@@ -15098,7 +15098,7 @@ r10k_needs_protection_p_store (rtx x, const_rtx pat ATTRIBUTE_UNUSED,\n   rtx_insn **insn_ptr;\n \n   insn_ptr = (rtx_insn **) data;\n-  if (*insn_ptr && for_each_rtx (&x, r10k_needs_protection_p_1, *insn_ptr))\n+  if (*insn_ptr && r10k_needs_protection_p_1 (x, *insn_ptr))\n     *insn_ptr = NULL;\n }\n \n@@ -15136,7 +15136,7 @@ r10k_needs_protection_p (rtx_insn *insn)\n       return insn == NULL_RTX;\n     }\n \n-  return for_each_rtx (&PATTERN (insn), r10k_needs_protection_p_1, insn);\n+  return r10k_needs_protection_p_1 (PATTERN (insn), insn);\n }\n \n /* Return true if BB is only reached by blocks in PROTECTED_BBS and if every"}]}