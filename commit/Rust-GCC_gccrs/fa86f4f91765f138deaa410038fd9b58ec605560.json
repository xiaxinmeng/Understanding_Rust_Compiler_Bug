{"sha": "fa86f4f91765f138deaa410038fd9b58ec605560", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE4NmY0ZjkxNzY1ZjEzOGRlYWE0MTAwMzhmZDliNThlYzYwNTU2MA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-06-17T07:48:21Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-06-17T07:48:21Z"}, "message": "gfortran.h (gfc_option_t): Add fpe_summary.\n\n2013-06-17  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.h (gfc_option_t): Add fpe_summary.\n        * gfortran.texi (_gfortran_set_options): Update.\n        * invoke.texi (-ffpe-summary): Add doc.\n        * lang.opt (ffpe-summary): Add flag.\n        * options.c (gfc_init_options, gfc_handle_option): Handle it.\n        (gfc_handle_fpe_option): Renamed from gfc_handle_fpe_trap_option,\n        also handle fpe_summary.\n        * trans-decl.c (create_main_function): Update\n        _gfortran_set_options call.\n\n2013-06-17  Tobias Burnus  <burnus@net-b.de>\n\n        * libgfortran.h (compile_options_t) Add fpe_summary.\n        (get_fpu_except_flags): New prototype.\n        * runtime/compile_options.c (set_options, init_compile_options):\n        Handle fpe_summary.\n        * runtime/stop.c (report_exception): New function.\n        (stop_numeric, stop_numeric_f08, stop_string, error_stop_string,\n        error_stop_numeric): Call it.\n        * config/fpu-387.h (get_fpu_except_flags): New function.\n        * config/fpu-aix.h (get_fpu_except_flags): New function.\n        * config/fpu-generic.h (get_fpu_except_flags): New function.\n        * config/fpu-glibc.h (get_fpu_except_flags): New function.\n        * config/fpu-glibc.h (get_fpu_except_flags): New function.\n        * configure.ac: Check for fpxcp.h.\n        * configure: Regenerate.\n        * config.h.in: Regenerate.\n\nFrom-SVN: r200147", "tree": {"sha": "f0f53ca508f0a7d7947323827651db99fab185cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0f53ca508f0a7d7947323827651db99fab185cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa86f4f91765f138deaa410038fd9b58ec605560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa86f4f91765f138deaa410038fd9b58ec605560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa86f4f91765f138deaa410038fd9b58ec605560", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa86f4f91765f138deaa410038fd9b58ec605560/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e55aae9e3c253d58656022bb35850a9ed3afc98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e55aae9e3c253d58656022bb35850a9ed3afc98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e55aae9e3c253d58656022bb35850a9ed3afc98"}], "stats": {"total": 376, "additions": 346, "deletions": 30}, "files": [{"sha": "686a8e99120a5e9328b0e18539217a616b12663e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -1,3 +1,15 @@\n+2013-06-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_option_t): Add fpe_summary.\n+\t* gfortran.texi (_gfortran_set_options): Update.\n+\t* invoke.texi (-ffpe-summary): Add doc.\n+\t* lang.opt (ffpe-summary): Add flag.\n+\t* options.c (gfc_init_options, gfc_handle_option): Handle it.\n+\t(gfc_handle_fpe_option): Renamed from gfc_handle_fpe_trap_option,\n+\talso handle fpe_summary.\n+\t* trans-decl.c (create_main_function): Update\n+\t_gfortran_set_options call.\n+\n 2013-06-15  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/49074"}, {"sha": "c11ffdda8b9f4642be73e72c2b65dc921da03666", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -2303,6 +2303,7 @@ typedef struct\n   int flag_frontend_optimize;\n \n   int fpe;\n+  int fpe_summary;\n   int rtcheck;\n   gfc_fcoarray coarray;\n "}, {"sha": "ad8caccc4a3dac28698e967a6146ac272db0860c", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -2846,7 +2846,7 @@ standard error.  Default: @code{GFC_STD_F95_DEL | GFC_STD_LEGACY}.\n Default: off.\n @item @var{option}[3] @tab Unused.\n @item @var{option}[4] @tab If non zero, enable backtracing on run-time\n-errors.  Default: off.\n+errors.  Default: off. (Default in the compiler: on.)\n Note: Installs a signal handler and requires command-line\n initialization using @code{_gfortran_set_args}.\n @item @var{option}[5] @tab If non zero, supports signed zeros.\n@@ -2855,13 +2855,21 @@ Default: enabled.\n are (bitwise or-ed): GFC_RTCHECK_BOUNDS (1), GFC_RTCHECK_ARRAY_TEMPS (2),\n GFC_RTCHECK_RECURSION (4), GFC_RTCHECK_DO (16), GFC_RTCHECK_POINTER (32).\n Default: disabled.\n+@item @var{option}[7] @tab Unused.\n+@item @var{option}[8] @tab Show a warning when invoking @code{STOP} and\n+@code{ERROR STOP} if a floating-point exception occurred. Possible values\n+are (bitwise or-ed) @code{GFC_FPE_INVALID} (1), @code{GFC_FPE_DENORMAL} (2),\n+@code{GFC_FPE_ZERO} (4), @code{GFC_FPE_OVERFLOW} (8),\n+@code{GFC_FPE_UNDERFLOW} (16), @code{GFC_FPE_INEXACT} (32). Default: None (0).\n+(Default in the compiler: @code{GFC_FPE_INVALID | GFC_FPE_DENORMAL |\n+GFC_FPE_ZERO | GFC_FPE_OVERFLOW | GFC_FPE_UNDERFLOW}.)\n @end multitable\n \n @item @emph{Example}:\n @smallexample\n-  /* Use gfortran 4.8 default options.  */\n-  static int options[] = @{68, 511, 0, 0, 1, 1, 0@};\n-  _gfortran_set_options (7, &options);\n+  /* Use gfortran 4.9 default options.  */\n+  static int options[] = @{68, 511, 0, 0, 1, 1, 0, 0, 31@};\n+  _gfortran_set_options (9, &options);\n @end smallexample\n @end table\n "}, {"sha": "3af57a300f87d02fe7cd589e07f9ea15d3c48828", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -151,7 +151,7 @@ and warnings}.\n @item Debugging Options\n @xref{Debugging Options,,Options for debugging your program or GNU Fortran}.\n @gccoptlist{-fbacktrace -fdump-fortran-optimized -fdump-fortran-original @gol\n--fdump-parse-tree -ffpe-trap=@var{list}\n+-fdump-parse-tree -ffpe-trap=@var{list} -ffpe-summary=@var{list}\n }\n \n @item Directory Options\n@@ -1021,6 +1021,17 @@ be uninteresting in practice.\n \n By default no exception traps are enabled.\n \n+@item -ffpe-summary=@var{list}\n+@opindex @code{ffpe-summary=}@var{list}\n+Specify a list of floating-point exceptions, whose flag status is printed\n+to @code{ERROR_UNIT} when invoking @code{STOP} and @code{ERROR STOP}.\n+@var{list} can be either @samp{none}, @samp{all} or a comma-separated list\n+of the following exceptions: @samp{invalid}, @samp{zero}, @samp{overflow},\n+@samp{underflow}, @samp{inexact} and @samp{denormal}. (See\n+@option{-ffpe-trap} for a description of the exceptions.)\n+\n+By default, a summary for all exceptions but @samp{inexact} is shown.\n+\n @item -fno-backtrace\n @opindex @code{fno-backtrace}\n @cindex backtrace"}, {"sha": "61f77b4fc5f586084c4d02b1c97c797ef5bd9d7e", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -441,6 +441,10 @@ ffpe-trap=\n Fortran RejectNegative JoinedOrMissing\n -ffpe-trap=[...]\tStop on following floating point exceptions\n \n+ffpe-summary=\n+Fortran RejectNegative JoinedOrMissing\n+-ffpe-summary=[...]\tPrint summary of floating point exceptions\n+\n ffree-form\n Fortran RejectNegative\n Assume that the source file is free form"}, {"sha": "908b47e68bb6bc2d90afa659df444d8c450dd8c2", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -161,6 +161,10 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.flag_frontend_optimize = -1;\n   \n   gfc_option.fpe = 0;\n+  /* All except GFC_FPE_INEXACT.  */\n+  gfc_option.fpe_summary = GFC_FPE_INVALID | GFC_FPE_DENORMAL\n+\t\t\t   | GFC_FPE_ZERO | GFC_FPE_OVERFLOW\n+\t\t\t   | GFC_FPE_UNDERFLOW;\n   gfc_option.rtcheck = 0;\n   gfc_option.coarray = GFC_FCOARRAY_NONE;\n \n@@ -492,8 +496,10 @@ gfc_handle_module_path_options (const char *arg)\n }\n \n \n+/* Handle options -ffpe-trap= and -ffpe-summary=.  */\n+\n static void\n-gfc_handle_fpe_trap_option (const char *arg)\n+gfc_handle_fpe_option (const char *arg, bool trap)\n {\n   int result, pos = 0, n;\n   /* precision is a backwards compatibility alias for inexact.  */\n@@ -505,7 +511,11 @@ gfc_handle_fpe_trap_option (const char *arg)\n \t\t\t\t       GFC_FPE_UNDERFLOW, GFC_FPE_INEXACT,\n \t\t\t\t       GFC_FPE_INEXACT,\n \t\t\t\t       0 };\n- \n+\n+  /* As the default for -ffpe-summary= is nonzero, set it to 0. */\n+  if (!trap)\n+    gfc_option.fpe_summary = 0;\n+\n   while (*arg)\n     {\n       while (*arg == ',')\n@@ -515,19 +525,42 @@ gfc_handle_fpe_trap_option (const char *arg)\n \tpos++;\n \n       result = 0;\n-      for (n = 0; exception[n] != NULL; n++)\n+      if (!trap && strncmp (\"none\", arg, pos) == 0)\n \t{\n+\t  gfc_option.fpe_summary = 0;\n+\t  arg += pos;\n+\t  pos = 0;\n+\t  continue;\n+\t}\n+      else if (!trap && strncmp (\"all\", arg, pos) == 0)\n+\t{\n+\t  gfc_option.fpe_summary = GFC_FPE_INVALID | GFC_FPE_DENORMAL\n+\t\t\t\t   | GFC_FPE_ZERO | GFC_FPE_OVERFLOW\n+\t\t\t\t   | GFC_FPE_UNDERFLOW | GFC_FPE_INEXACT;\n+\t  arg += pos;\n+\t  pos = 0;\n+\t  continue;\n+\t}\n+      else\n+\tfor (n = 0; exception[n] != NULL; n++)\n+\t  {\n \t  if (exception[n] && strncmp (exception[n], arg, pos) == 0)\n \t    {\n-\t      gfc_option.fpe |= opt_exception[n];\n+\t      if (trap)\n+\t\tgfc_option.fpe |= opt_exception[n];\n+\t      else\n+\t\tgfc_option.fpe_summary |= opt_exception[n];\n \t      arg += pos;\n \t      pos = 0;\n \t      result = 1;\n \t      break;\n \t    }\n-\t}\n-      if (!result)\n+\t  }\n+      if (!result && !trap)\n \tgfc_fatal_error (\"Argument to -ffpe-trap is not valid: %s\", arg);\n+      else if (!result)\n+\tgfc_fatal_error (\"Argument to -ffpe-summary is not valid: %s\", arg);\n+\n     }\n }\n \n@@ -981,7 +1014,11 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_ffpe_trap_:\n-      gfc_handle_fpe_trap_option (arg);\n+      gfc_handle_fpe_option (arg, true);\n+      break;\n+\n+    case OPT_ffpe_summary_:\n+      gfc_handle_fpe_option (arg, false);\n       break;\n \n     case OPT_std_f95:"}, {"sha": "4e3bf48f1279c35fb9ea15fb048b538383e8ece8", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -5203,14 +5203,15 @@ create_main_function (tree fndecl)\n     /* TODO: This is the -frange-check option, which no longer affects\n        library behavior; when bumping the library ABI this slot can be\n        reused for something else. As it is the last element in the\n-       array, we can instead leave it out altogether.\n+       array, we can instead leave it out altogether. */\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                            build_int_cst (integer_type_node, 0));\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n                             build_int_cst (integer_type_node,\n-                                           gfc_option.flag_range_check));\n-    */\n+                                           gfc_option.fpe_summary));\n \n     array_type = build_array_type (integer_type_node,\n-\t\t\t\t   build_index_type (size_int (6)));\n+\t\t\t\t   build_index_type (size_int (8)));\n     array = build_constructor (array_type, v);\n     TREE_CONSTANT (array) = 1;\n     TREE_STATIC (array) = 1;\n@@ -5225,7 +5226,7 @@ create_main_function (tree fndecl)\n \n     tmp = build_call_expr_loc (input_location,\n \t\t\t   gfor_fndecl_set_options, 2,\n-\t\t\t   build_int_cst (integer_type_node, 7), var);\n+\t\t\t   build_int_cst (integer_type_node, 9), var);\n     gfc_add_expr_to_block (&body, tmp);\n   }\n "}, {"sha": "de5cfdd1ed99de8c7aa2be1697740b5b4a9ab6aa", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -1,3 +1,21 @@\n+2013-06-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* libgfortran.h (compile_options_t) Add fpe_summary.\n+\t(get_fpu_except_flags): New prototype.\n+\t* runtime/compile_options.c (set_options, init_compile_options):\n+\tHandle fpe_summary.\n+\t* runtime/stop.c (report_exception): New function.\n+\t(stop_numeric, stop_numeric_f08, stop_string, error_stop_string,\n+\terror_stop_numeric): Call it.\n+\t* config/fpu-387.h (get_fpu_except_flags): New function.\n+\t* config/fpu-aix.h (get_fpu_except_flags): New function.\n+\t* config/fpu-generic.h (get_fpu_except_flags): New function.\n+\t* config/fpu-glibc.h (get_fpu_except_flags): New function.\n+\t* config/fpu-glibc.h (get_fpu_except_flags): New function.\n+\t* configure.ac: Check for fpxcp.h.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n 2013-06-01  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57496"}, {"sha": "0d5d56ccb1c57656e9a62d4e2d5f63d3c189dd9f", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -399,6 +399,9 @@\n /* Define to 1 if you have the <fptrap.h> header file. */\n #undef HAVE_FPTRAP_H\n \n+/* Define to 1 if you have the <fpxcp.h> header file. */\n+#undef HAVE_FPXCP_H\n+\n /* fp_enable is present */\n #undef HAVE_FP_ENABLE\n "}, {"sha": "608354d975ac6507ebb6eedd9c24059d0414bc11", "filename": "libgfortran/config/fpu-387.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig%2Ffpu-387.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig%2Ffpu-387.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-387.h?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -134,3 +134,40 @@ void set_fpu (void)\n       asm volatile (\"%vldmxcsr %0\" : : \"m\" (cw_sse));\n     }\n }\n+\n+\n+int\n+get_fpu_except_flags (void)\n+{\n+  int result;\n+  unsigned short cw;\n+\n+  __asm__ __volatile__ (\"fnstsw\\t%0\" : \"=a\" (cw));\n+\n+  if (has_sse())\n+    {\n+      unsigned int cw_sse;\n+      __asm__ __volatile__ (\"%vstmxcsr\\t%0\" : \"=m\" (cw_sse));\n+      cw |= cw_sse;\n+    }\n+\n+  if (cw & _FPU_MASK_IM)\n+    result |= GFC_FPE_INVALID;\n+\n+  if (cw & _FPU_MASK_ZM)\n+    result |= GFC_FPE_ZERO;\n+\n+  if (cw & _FPU_MASK_OM)\n+    result |= GFC_FPE_OVERFLOW;\n+\n+  if (cw & _FPU_MASK_UM)\n+    result |= GFC_FPE_UNDERFLOW;\n+\n+  if (cw & _FPU_MASK_DM)\n+    result |= GFC_FPE_DENORMAL;\n+\n+  if (cw & _FPU_MASK_PM)\n+    result |= GFC_FPE_INEXACT;\n+\n+  return result;\n+}"}, {"sha": "1ba9d4cfb224109316f4f4c40ae3399670b7409c", "filename": "libgfortran/config/fpu-aix.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig%2Ffpu-aix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig%2Ffpu-aix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-aix.h?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -29,6 +29,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <fptrap.h>\n #endif\n \n+#ifdef HAVE_FPXCP_H\n+#include <fpxcp.h>\n+#endif\n+\n void\n set_fpu (void)\n {\n@@ -81,3 +85,34 @@ set_fpu (void)\n   fp_trap(FP_TRAP_SYNC);\n   fp_enable(mode);\n }\n+\n+\n+int\n+get_fpu_except_flags (void)\n+{\n+  int result, set_excepts;\n+\n+  result = 0;\n+\n+#ifdef HAVE_FPXCP_H\n+  if (!fp_any_xcp ())\n+    return 0;\n+\n+  if (fp_invalid_op ())\n+    result |= GFC_FPE_INVALID;\n+\n+  if (fp_divbyzero ())\n+    result |= GFC_FPE_ZERO;\n+\n+  if (fp_overflow ())\n+    result |= GFC_FPE_OVERFLOW;\n+\n+  if (fp_underflow ())\n+    result |= GFC_FPE_UNDERFLOW;\n+\n+  if (fp_inexact ())\n+    result |= GFC_FPE_INEXACT;\n+#endif\n+\n+  return result;\n+}"}, {"sha": "4223f2e27d4815f62c3376e29be247f4120b3dc5", "filename": "libgfortran/config/fpu-generic.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig%2Ffpu-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig%2Ffpu-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-generic.h?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -50,3 +50,9 @@ set_fpu (void)\n     estr_write (\"Fortran runtime warning: IEEE 'inexact' \"\n \t        \"exception not supported.\\n\");\n }\n+\n+int\n+get_fpu_except_flags (void)\n+{\n+  return 0;\n+}"}, {"sha": "e0d1019b91910bff73d524d302c1f142ca135852", "filename": "libgfortran/config/fpu-glibc.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig%2Ffpu-glibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig%2Ffpu-glibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-glibc.h?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -85,3 +85,45 @@ void set_fpu (void)\n \t        \"exception not supported.\\n\");\n #endif\n }\n+\n+\n+int\n+get_fpu_except_flags (void)\n+{\n+  int result, set_excepts;\n+\n+  result = 0;\n+  set_excepts = fetestexcept (FE_ALL_EXCEPT);\n+\n+#ifdef FE_INVALID\n+  if (set_excepts & FE_INVALID)\n+    result |= GFC_FPE_INVALID;\n+#endif\n+\n+#ifdef FE_DIVBYZERO\n+  if (set_excepts & FE_DIVBYZERO)\n+    result |= GFC_FPE_ZERO;\n+#endif\n+\n+#ifdef FE_OVERFLOW\n+  if (set_excepts & FE_OVERFLOW)\n+    result |= GFC_FPE_OVERFLOW;\n+#endif\n+\n+#ifdef FE_UNDERFLOW\n+  if (set_excepts & FE_UNDERFLOW)\n+    result |= GFC_FPE_UNDERFLOW;\n+#endif\n+\n+#ifdef FE_DENORMAL\n+  if (set_excepts & FE_DENORMAL)\n+    result |= GFC_FPE_DENORMAL;\n+#endif\n+\n+#ifdef FE_INEXACT\n+  if (set_excepts & FE_INEXACT)\n+    result |= GFC_FPE_INEXACT;\n+#endif\n+\n+  return result;\n+}"}, {"sha": "8fc52d5eade4a332136f68953ba31cd90dd10bf5", "filename": "libgfortran/config/fpu-sysv.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig%2Ffpu-sysv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfig%2Ffpu-sysv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-sysv.h?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -80,3 +80,45 @@ set_fpu (void)\n \n   fpsetmask(cw);\n }\n+\n+int\n+get_fpu_except_flags (void)\n+{\n+  int result;\n+  fp_except_t set_excepts;\n+\n+  result = 0;\n+  set_excepts = fpgetsticky ();\n+\n+#ifdef FP_X_INV\n+  if (set_excepts & FP_X_INV)\n+    result |= GFC_FPE_INVALID;\n+#endif\n+\n+#ifdef FP_X_DZ\n+  if (set_excepts & FP_X_DZ)\n+    result |= GFC_FPE_ZERO;\n+#endif\n+\n+#ifdef FP_X_OFL\n+  if (set_excepts & FP_X_OFL)\n+    result |= GFC_FPE_OVERFLOW;\n+#endif\n+\n+#ifdef FP_X_UFL\n+  if (set_excepts & FP_X_UFL)\n+    result |= GFC_FPE_UNDERFLOW;\n+#endif\n+\n+#ifdef FP_X_DNML\n+  if (set_excepts & FP_X_DNML)\n+    result |= GFC_FPE_DENORMAL;\n+#endif\n+\n+#ifdef FP_X_IMP\n+  if (set_excepts & FP_X_IMP)\n+    result |= GFC_FPE_INEXACT;\n+#endif\n+\n+  return result;\n+}"}, {"sha": "c049cdcfebe92b0b7372c4b5acb4d53c18578dd3", "filename": "libgfortran/configure", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -654,7 +654,6 @@ CPP\n am__fastdepCC_FALSE\n am__fastdepCC_TRUE\n CCDEPMODE\n-am__nodep\n AMDEPBACKSLASH\n AMDEP_FALSE\n AMDEP_TRUE\n@@ -2543,6 +2542,7 @@ as_fn_append ac_header_list \" floatingpoint.h\"\n as_fn_append ac_header_list \" ieeefp.h\"\n as_fn_append ac_header_list \" fenv.h\"\n as_fn_append ac_header_list \" fptrap.h\"\n+as_fn_append ac_header_list \" fpxcp.h\"\n as_fn_append ac_header_list \" pwd.h\"\n as_fn_append ac_header_list \" complex.h\"\n as_fn_append ac_func_list \" getrusage\"\n@@ -3386,11 +3386,11 @@ MAKEINFO=${MAKEINFO-\"${am_missing_run}makeinfo\"}\n \n # We need awk for the \"check\" target.  The system \"awk\" is bad on\n # some platforms.\n-# Always define AMTAR for backward compatibility.  Yes, it's still used\n-# in the wild :-(  We should find a proper way to deprecate it ...\n-AMTAR='$${TAR-tar}'\n+# Always define AMTAR for backward compatibility.\n \n-am__tar='$${TAR-tar} chof - \"$$tardir\"' am__untar='$${TAR-tar} xf -'\n+AMTAR=${AMTAR-\"${am_missing_run}tar\"}\n+\n+am__tar='${AMTAR} chof - \"$$tardir\"'; am__untar='${AMTAR} xf -'\n \n \n \n@@ -3523,7 +3523,6 @@ fi\n if test \"x$enable_dependency_tracking\" != xno; then\n   am_depcomp=\"$ac_aux_dir/depcomp\"\n   AMDEPBACKSLASH='\\'\n-  am__nodep='_no'\n fi\n  if test \"x$enable_dependency_tracking\" != xno; then\n   AMDEP_TRUE=\n@@ -4341,7 +4340,6 @@ else\n   # instance it was reported that on HP-UX the gcc test will end up\n   # making a dummy file named `D' -- because `-MD' means `put the output\n   # in D'.\n-  rm -rf conftest.dir\n   mkdir conftest.dir\n   # Copy depcomp to subdir because otherwise we won't find it if we're\n   # using a relative directory.\n@@ -4401,7 +4399,7 @@ else\n \tbreak\n       fi\n       ;;\n-    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n+    msvisualcpp | msvcmsys)\n       # This compiler won't grok `-c -o', but also, the minuso test has\n       # not run yet.  These depmodes are late enough in the game, and\n       # so weak that their functioning should not be impacted.\n@@ -5517,7 +5515,6 @@ else\n   # instance it was reported that on HP-UX the gcc test will end up\n   # making a dummy file named `D' -- because `-MD' means `put the output\n   # in D'.\n-  rm -rf conftest.dir\n   mkdir conftest.dir\n   # Copy depcomp to subdir because otherwise we won't find it if we're\n   # using a relative directory.\n@@ -5577,7 +5574,7 @@ else\n \tbreak\n       fi\n       ;;\n-    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n+    msvisualcpp | msvcmsys)\n       # This compiler won't grok `-c -o', but also, the minuso test has\n       # not run yet.  These depmodes are late enough in the game, and\n       # so weak that their functioning should not be impacted.\n@@ -12334,7 +12331,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12337 \"configure\"\n+#line 12334 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12440,7 +12437,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12443 \"configure\"\n+#line 12440 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15998,6 +15995,8 @@ done\n \n \n \n+\n+\n \n \n "}, {"sha": "ba14f1f30b7b84fe45151f856edd11b356765281", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -254,7 +254,7 @@ AC_CHECK_TYPES([ptrdiff_t])\n # check header files (we assume C89 is available, so don't check for that)\n AC_CHECK_HEADERS_ONCE(unistd.h sys/time.h sys/times.h sys/resource.h \\\n sys/types.h sys/stat.h sys/wait.h floatingpoint.h ieeefp.h fenv.h fptrap.h \\\n-pwd.h complex.h) \n+fpxcp.h pwd.h complex.h) \n \n GCC_HEADER_STDINT(gstdint.h)\n "}, {"sha": "f22da21c4c6ce15cc546f25da2686bf195527225", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -534,6 +534,7 @@ typedef struct\n   size_t record_marker;\n   int max_subrecord_length;\n   int bounds_check;\n+  int fpe_summary;\n }\n compile_options_t;\n \n@@ -742,6 +743,8 @@ internal_proto(gf_strerror);\n \n extern void set_fpu (void);\n internal_proto(set_fpu);\n+extern int get_fpu_except_flags (void);\n+internal_proto(get_fpu_except_flags);\n \n /* memory.c */\n "}, {"sha": "1416d6634f43e5e3e7b59f4eef87d3abc7bbaaf0", "filename": "libgfortran/runtime/compile_options.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fruntime%2Fcompile_options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fruntime%2Fcompile_options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fcompile_options.c?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -173,6 +173,8 @@ set_options (int num, int options[])\n      the library behavior; range checking is now always done when\n      parsing integers. It's place in the options array is retained due\n      to ABI compatibility. Remove when bumping the library ABI.  */\n+  if (num >= 9)\n+    compile_options.fpe_summary = options[8];\n \n   /* If backtrace is required, we set signal handlers on the POSIX\n      2001 signals with core action.  */\n@@ -225,6 +227,7 @@ init_compile_options (void)\n   compile_options.pedantic = 0;\n   compile_options.backtrace = 0;\n   compile_options.sign_zero = 1;\n+  compile_options.fpe_summary = 0;\n }\n \n /* Function called by the front-end to tell us the"}, {"sha": "1091245241afee7e327b38bb6d193fe1dc24f663", "filename": "libgfortran/runtime/stop.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fruntime%2Fstop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa86f4f91765f138deaa410038fd9b58ec605560/libgfortran%2Fruntime%2Fstop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstop.c?ref=fa86f4f91765f138deaa410038fd9b58ec605560", "patch": "@@ -32,6 +32,55 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n \n+/* Fortran 2008 demands: If any exception (14) is signaling on that image, the\n+   processor shall issue a warning indicating which exceptions are signaling;\n+   this warning shall be on the unit identified by the named constant\n+   ERROR_UNIT (13.8.2.8).  In line with other compilers, we do not report\n+   inexact - and we optionally ignore underflow, cf. thread starting at\n+   http://mailman.j3-fortran.org/pipermail/j3/2013-June/006452.html.  */\n+\n+static void\n+report_exception (void)\n+{\n+  int set_excepts;\n+\n+  if (!compile_options.fpe_summary)\n+    return;\n+\n+  set_excepts = get_fpu_except_flags ();\n+  if ((set_excepts & compile_options.fpe_summary) == 0)\n+    return;\n+\n+  estr_write (\"Note: The following floating-point exceptions are signalling:\");\n+\n+  if ((compile_options.fpe_summary & GFC_FPE_INVALID)\n+      && (set_excepts & GFC_FPE_INVALID))\n+    estr_write (\" IEEE_INVALID_FLAG\");\n+\n+  if ((compile_options.fpe_summary & GFC_FPE_ZERO)\n+      && (set_excepts & GFC_FPE_ZERO))\n+    estr_write (\" IEEE_DIVIDE_BY_ZERO\");\n+\n+  if ((compile_options.fpe_summary & GFC_FPE_OVERFLOW)\n+      && (set_excepts & GFC_FPE_OVERFLOW))\n+    estr_write (\" IEEE_OVERFLOW_FLAG\");\n+\n+  if ((compile_options.fpe_summary & GFC_FPE_UNDERFLOW)\n+      && (set_excepts & GFC_FPE_UNDERFLOW))\n+    estr_write (\" IEEE_UNDERFLOW_FLAG\");\n+\n+  if ((compile_options.fpe_summary & GFC_FPE_DENORMAL)\n+      && (set_excepts & GFC_FPE_DENORMAL))\n+    estr_write (\" IEEE_DENORMAL\");\n+\n+  if ((compile_options.fpe_summary & GFC_FPE_INEXACT)\n+      && (set_excepts & GFC_FPE_INEXACT))\n+    estr_write (\" IEEE_INEXACT_FLAG\");\n+\n+  estr_write (\"\\n\");\n+}\n+\n+\n /* A numeric STOP statement.  */\n \n extern void stop_numeric (GFC_INTEGER_4)\n@@ -41,6 +90,7 @@ export_proto(stop_numeric);\n void\n stop_numeric (GFC_INTEGER_4 code)\n {\n+  report_exception ();\n   if (code == -1)\n     code = 0;\n   else\n@@ -59,6 +109,7 @@ export_proto(stop_numeric_f08);\n void\n stop_numeric_f08 (GFC_INTEGER_4 code)\n {\n+  report_exception ();\n   st_printf (\"STOP %d\\n\", (int)code);\n   exit (code);\n }\n@@ -69,6 +120,7 @@ stop_numeric_f08 (GFC_INTEGER_4 code)\n void\n stop_string (const char *string, GFC_INTEGER_4 len)\n {\n+  report_exception ();\n   if (string)\n     {\n       estr_write (\"STOP \");\n@@ -91,6 +143,7 @@ export_proto(error_stop_string);\n void\n error_stop_string (const char *string, GFC_INTEGER_4 len)\n {\n+  report_exception ();\n   estr_write (\"ERROR STOP \");\n   (void) write (STDERR_FILENO, string, len);\n   estr_write (\"\\n\");\n@@ -108,6 +161,7 @@ export_proto(error_stop_numeric);\n void\n error_stop_numeric (GFC_INTEGER_4 code)\n {\n+  report_exception ();\n   st_printf (\"ERROR STOP %d\\n\", (int) code);\n   exit (code);\n }"}]}