{"sha": "b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA1Y2YzODJlMGViNzQxYjdiOGVlMWY3YjAyZmE2ZTVhN2EzZDQ5MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-04-18T16:16:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-04-18T16:16:14Z"}, "message": "Define std::thread::id comparison operators at namespace-scope\n\nFrom-SVN: r235155", "tree": {"sha": "6b86034e774f4421e6020e5ed1693f5a988eafd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b86034e774f4421e6020e5ed1693f5a988eafd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ed6e5244652aa10eb56ab0cfa6768654f16f854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed6e5244652aa10eb56ab0cfa6768654f16f854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed6e5244652aa10eb56ab0cfa6768654f16f854"}], "stats": {"total": 63, "additions": 49, "deletions": 14}, "files": [{"sha": "14c1c2c92c888a8f059c1d02a0ca7ccb51ef6d4f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491", "patch": "@@ -1,5 +1,10 @@\n 2016-04-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/70294\n+\t* include/std/thread (operator<, operator==): Move definitions to\n+\tnamespace-scope.\n+\t* testsuite/30_threads/thread/id/70294.cc: New test.\n+\n \t* testsuite/18_support/bad_exception/23591_thread-1.c: Add\n \t-Wno-pedantic to dg-options.\n \t* testsuite/20_util/align/2.cc: Use type as operand of alignof."}, {"sha": "15aa9a9b577ea6ad56240e109900cbf312fe2721", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491", "patch": "@@ -88,22 +88,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend class hash<thread::id>;\n \n       friend bool\n-      operator==(thread::id __x, thread::id __y) noexcept\n-      {\n-\t// pthread_equal is undefined if either thread ID is not valid, so we\n-\t// can't safely use __gthread_equal on default-constructed values (nor\n-\t// the non-zero value returned by this_thread::get_id() for\n-\t// single-threaded programs using GNU libc). Assume EqualityComparable.\n-\treturn __x._M_thread == __y._M_thread;\n-      }\n+      operator==(thread::id __x, thread::id __y) noexcept;\n \n       friend bool\n-      operator<(thread::id __x, thread::id __y) noexcept\n-      {\n-\t// Pthreads doesn't define any way to do this, so we just have to\n-\t// assume native_handle_type is LessThanComparable.\n-\treturn __x._M_thread < __y._M_thread;\n-      }\n+      operator<(thread::id __x, thread::id __y) noexcept;\n \n       template<class _CharT, class _Traits>\n \tfriend basic_ostream<_CharT, _Traits>&\n@@ -230,10 +218,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   swap(thread& __x, thread& __y) noexcept\n   { __x.swap(__y); }\n \n+  inline bool\n+  operator==(thread::id __x, thread::id __y) noexcept\n+  {\n+    // pthread_equal is undefined if either thread ID is not valid, so we\n+    // can't safely use __gthread_equal on default-constructed values (nor\n+    // the non-zero value returned by this_thread::get_id() for\n+    // single-threaded programs using GNU libc). Assume EqualityComparable.\n+    return __x._M_thread == __y._M_thread;\n+  }\n+\n   inline bool\n   operator!=(thread::id __x, thread::id __y) noexcept\n   { return !(__x == __y); }\n \n+  inline bool\n+  operator<(thread::id __x, thread::id __y) noexcept\n+  {\n+    // Pthreads doesn't define any way to do this, so we just have to\n+    // assume native_handle_type is LessThanComparable.\n+    return __x._M_thread < __y._M_thread;\n+  }\n+\n   inline bool\n   operator<=(thread::id __x, thread::id __y) noexcept\n   { return !(__y < __x); }"}, {"sha": "9717637eef5b85b71aaffca9f614bd9bf71a815b", "filename": "libstdc++-v3/testsuite/30_threads/thread/id/70294.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2F70294.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2F70294.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2F70294.cc?ref=b05cf382e0eb741b7b8ee1f7b02fa6e5a7a3d491", "patch": "@@ -0,0 +1,24 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <thread>\n+\n+bool (*lt)(std::thread::id, std::thread::id) = &std::operator<;\n+bool (*eq)(std::thread::id, std::thread::id) = &std::operator==;"}]}