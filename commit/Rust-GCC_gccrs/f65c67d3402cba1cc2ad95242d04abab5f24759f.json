{"sha": "f65c67d3402cba1cc2ad95242d04abab5f24759f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY1YzY3ZDM0MDJjYmExY2MyYWQ5NTI0MmQwNGFiYWI1ZjI0NzU5Zg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2014-07-17T06:16:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:16:25Z"}, "message": "exp_ch7.adb (Establish_Transient_Scope.Find_Node_To_Be_Wrapped): Start examining the tree at the node passed to Establish_Transient_Scope (not...\n\n2014-07-17  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch7.adb (Establish_Transient_Scope.Find_Node_To_Be_Wrapped):\n\tStart examining the tree at the node passed to\n\tEstablish_Transient_Scope (not its parent).\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):\n\tThe access type for the variable storing the reference to\n\tthe call must be declared and frozen prior to establishing a\n\ttransient scope.\n\t* exp_ch9.adb: Minor reformatting.\n\nFrom-SVN: r212718", "tree": {"sha": "9cf3ad6c1548c1cbf499777b4f7707fb5518c4f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cf3ad6c1548c1cbf499777b4f7707fb5518c4f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f65c67d3402cba1cc2ad95242d04abab5f24759f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65c67d3402cba1cc2ad95242d04abab5f24759f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65c67d3402cba1cc2ad95242d04abab5f24759f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65c67d3402cba1cc2ad95242d04abab5f24759f/comments", "author": null, "committer": null, "parents": [{"sha": "a1d3851bcd7404635a0e04846fac7f1561a6e286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d3851bcd7404635a0e04846fac7f1561a6e286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d3851bcd7404635a0e04846fac7f1561a6e286"}], "stats": {"total": 119, "additions": 73, "deletions": 46}, "files": [{"sha": "cbcba1d97db16314553492609e1e05a089efd59b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65c67d3402cba1cc2ad95242d04abab5f24759f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65c67d3402cba1cc2ad95242d04abab5f24759f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f65c67d3402cba1cc2ad95242d04abab5f24759f", "patch": "@@ -1,3 +1,14 @@\n+2014-07-17  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch7.adb (Establish_Transient_Scope.Find_Node_To_Be_Wrapped):\n+\tStart examining the tree at the node passed to\n+\tEstablish_Transient_Scope (not its parent).\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):\n+\tThe access type for the variable storing the reference to\n+\tthe call must be declared and frozen prior to establishing a\n+\ttransient scope.\n+\t* exp_ch9.adb: Minor reformatting.\n+\n 2014-07-17  Pascal Obry  <obry@adacore.com>\n \n \t* s-os_lib.ads: Minor comment update."}, {"sha": "de0a4e29afaf62f6a3c402d97eb0cb3ab9f2f044", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 55, "deletions": 40, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65c67d3402cba1cc2ad95242d04abab5f24759f/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65c67d3402cba1cc2ad95242d04abab5f24759f/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f65c67d3402cba1cc2ad95242d04abab5f24759f", "patch": "@@ -10181,10 +10181,9 @@ package body Exp_Ch6 is\n       Func_Call       : Node_Id := Function_Call;\n       Function_Id     : Entity_Id;\n       Pool_Actual     : Node_Id;\n+      Ptr_Typ         : Entity_Id;\n       Ptr_Typ_Decl    : Node_Id;\n       Pass_Caller_Acc : Boolean := False;\n-      New_Expr        : Node_Id;\n-      Ref_Type        : Entity_Id;\n       Res_Decl        : Node_Id;\n       Result_Subt     : Entity_Id;\n \n@@ -10224,6 +10223,53 @@ package body Exp_Ch6 is\n \n       Result_Subt := Etype (Function_Id);\n \n+      --  Create an access type designating the function's result subtype. We\n+      --  use the type of the original call because it may be a call to an\n+      --  inherited operation, which the expansion has replaced with the parent\n+      --  operation that yields the parent type. Note that this access type\n+      --  must be declared before we establish a transient scope, so that it\n+      --  receives the proper accessibility level.\n+\n+      Ptr_Typ := Make_Temporary (Loc, 'A');\n+      Ptr_Typ_Decl :=\n+        Make_Full_Type_Declaration (Loc,\n+          Defining_Identifier => Ptr_Typ,\n+          Type_Definition     =>\n+            Make_Access_To_Object_Definition (Loc,\n+              All_Present        => True,\n+              Subtype_Indication =>\n+                New_Occurrence_Of (Etype (Function_Call), Loc)));\n+\n+      --  The access type and its accompanying object must be inserted after\n+      --  the object declaration in the constrained case, so that the function\n+      --  call can be passed access to the object. In the unconstrained case,\n+      --  or if the object declaration is for a return object, the access type\n+      --  and object must be inserted before the object, since the object\n+      --  declaration is rewritten to be a renaming of a dereference of the\n+      --  access object. Note: we need to freeze Ptr_Typ explicitly, because\n+      --  the result object is in a different (transient) scope, so won't\n+      --  cause freezing.\n+\n+      if Is_Constrained (Underlying_Type (Result_Subt))\n+        and then not Is_Return_Object (Defining_Identifier (Object_Decl))\n+      then\n+         Insert_After_And_Analyze (Object_Decl, Ptr_Typ_Decl);\n+      else\n+         Insert_Action (Object_Decl, Ptr_Typ_Decl);\n+      end if;\n+\n+      --  Force immediate freezing of Ptr_Typ because Res_Decl will be\n+      --  elaborated in an inner (transient) scope and thus won't cause\n+      --  freezing by itself.\n+\n+      declare\n+         Ptr_Typ_Freeze_Ref : constant Node_Id :=\n+                                New_Occurrence_Of (Ptr_Typ, Loc);\n+      begin\n+         Set_Parent (Ptr_Typ_Freeze_Ref, Ptr_Typ_Decl);\n+         Freeze_Expression (Ptr_Typ_Freeze_Ref);\n+      end;\n+\n       --  If the the object is a return object of an enclosing build-in-place\n       --  function, then the implicit build-in-place parameters of the\n       --  enclosing function are simply passed along to the called function.\n@@ -10356,53 +10402,22 @@ package body Exp_Ch6 is\n       Add_Access_Actual_To_Build_In_Place_Call\n         (Func_Call, Function_Id, Caller_Object, Is_Access => Pass_Caller_Acc);\n \n-      --  Create an access type designating the function's result subtype. We\n-      --  use the type of the original expression because it may be a call to\n-      --  an inherited operation, which the expansion has replaced with the\n-      --  parent operation that yields the parent type.\n-\n-      Ref_Type := Make_Temporary (Loc, 'A');\n-\n-      Ptr_Typ_Decl :=\n-        Make_Full_Type_Declaration (Loc,\n-          Defining_Identifier => Ref_Type,\n-          Type_Definition     =>\n-            Make_Access_To_Object_Definition (Loc,\n-              All_Present        => True,\n-              Subtype_Indication =>\n-                New_Occurrence_Of (Etype (Function_Call), Loc)));\n-\n-      --  The access type and its accompanying object must be inserted after\n-      --  the object declaration in the constrained case, so that the function\n-      --  call can be passed access to the object. In the unconstrained case,\n-      --  or if the object declaration is for a return object, the access type\n-      --  and object must be inserted before the object, since the object\n-      --  declaration is rewritten to be a renaming of a dereference of the\n-      --  access object.\n-\n-      if Is_Constrained (Underlying_Type (Result_Subt))\n-        and then not Is_Return_Object (Defining_Identifier (Object_Decl))\n-      then\n-         Insert_After_And_Analyze (Object_Decl, Ptr_Typ_Decl);\n-      else\n-         Insert_Action (Object_Decl, Ptr_Typ_Decl);\n-      end if;\n-\n       --  Finally, create an access object initialized to a reference to the\n       --  function call. We know this access value cannot be null, so mark the\n       --  entity accordingly to suppress the access check.\n \n-      New_Expr := Make_Reference (Loc, Relocate_Node (Func_Call));\n-\n-      Def_Id := Make_Temporary (Loc, 'R', New_Expr);\n-      Set_Etype (Def_Id, Ref_Type);\n+      Def_Id := Make_Temporary (Loc, 'R', Func_Call);\n+      Set_Etype (Def_Id, Ptr_Typ);\n       Set_Is_Known_Non_Null (Def_Id);\n \n       Res_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Def_Id,\n-          Object_Definition   => New_Occurrence_Of (Ref_Type, Loc),\n-          Expression          => New_Expr);\n+          Constant_Present    => True,\n+          Object_Definition   => New_Occurrence_Of (Ptr_Typ, Loc),\n+          Expression          =>\n+            Make_Reference (Loc, Relocate_Node (Func_Call)));\n+\n       Insert_After_And_Analyze (Ptr_Typ_Decl, Res_Decl);\n \n       --  If the result subtype of the called function is constrained and"}, {"sha": "02c2219e4429c52922641294744783e8e151f3f8", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65c67d3402cba1cc2ad95242d04abab5f24759f/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65c67d3402cba1cc2ad95242d04abab5f24759f/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=f65c67d3402cba1cc2ad95242d04abab5f24759f", "patch": "@@ -4208,11 +4208,8 @@ package body Exp_Ch7 is\n \n    begin\n       The_Parent := N;\n+      P          := Empty;\n       loop\n-         P := The_Parent;\n-         pragma Assert (P /= Empty);\n-         The_Parent := Parent (P);\n-\n          case Nkind (The_Parent) is\n \n             --  Simple statement can be wrapped\n@@ -4263,7 +4260,7 @@ package body Exp_Ch7 is\n \n             --  The expression itself is to be wrapped if its parent is a\n             --  compound statement or any other statement where the expression\n-            --  is known to be scalar\n+            --  is known to be scalar.\n \n             when N_Accept_Alternative               |\n                  N_Attribute_Definition_Clause      |\n@@ -4279,6 +4276,7 @@ package body Exp_Ch7 is\n                  N_If_Statement                     |\n                  N_Iteration_Scheme                 |\n                  N_Terminate_Alternative            =>\n+               pragma Assert (Present (P));\n                return P;\n \n             when N_Attribute_Reference =>\n@@ -4344,6 +4342,9 @@ package body Exp_Ch7 is\n             when others =>\n                null;\n          end case;\n+\n+         P          := The_Parent;\n+         The_Parent := Parent (P);\n       end loop;\n    end Find_Node_To_Be_Wrapped;\n "}, {"sha": "c5bd57a4432f73847e2662fade878cbfeea73602", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65c67d3402cba1cc2ad95242d04abab5f24759f/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65c67d3402cba1cc2ad95242d04abab5f24759f/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=f65c67d3402cba1cc2ad95242d04abab5f24759f", "patch": "@@ -4377,7 +4377,7 @@ package body Exp_Ch9 is\n          pragma Assert (Ekind (Sub) = E_Function);\n          Rewrite (N,\n            Make_Function_Call (Loc,\n-             Name => New_Sub,\n+             Name                   => New_Sub,\n              Parameter_Associations => Params));\n       end if;\n "}]}