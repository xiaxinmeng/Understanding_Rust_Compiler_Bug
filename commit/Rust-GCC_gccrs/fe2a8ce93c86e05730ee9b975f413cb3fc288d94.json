{"sha": "fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "node_id": "C_kwDOANBUbNoAKGZlMmE4Y2U5M2M4NmUwNTczMGVlOWI5NzVmNDEzY2IzZmMyODhkOTQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-08T00:18:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-08T00:18:33Z"}, "message": "Daily bump.", "tree": {"sha": "558a827805b97df685d5b3be9967cfd69e9e211a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/558a827805b97df685d5b3be9967cfd69e9e211a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/comments", "author": null, "committer": null, "parents": [{"sha": "d7f282c4243e24f567b11a5cb6048a27a3df733d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f282c4243e24f567b11a5cb6048a27a3df733d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f282c4243e24f567b11a5cb6048a27a3df733d"}], "stats": {"total": 331, "additions": 330, "deletions": 1}, "files": [{"sha": "c947372ce59a29cd9ad42b17e4ab1ce1f2e23f14", "filename": "ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "patch": "@@ -1,3 +1,13 @@\n+2022-09-07  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* MAINTAINERS: Update my email address.\n+\n+2022-09-07  Tom de Vries  <tdevries@suse.de>\n+\n+\t* configure.ac: Set extra_host_libiberty_configure_flags and\n+\textra_host_zlib_configure_flags in separate case statements.\n+\t* configure: Regenerate.\n+\n 2022-09-06  Xianmiao Qu  <cooper.qu@linux.alibaba.com>\n \n \t* MAINTAINERS: Update c-sky port maintainers' emails."}, {"sha": "17032b5721239c01462f38c929b2c465cb618328", "filename": "gcc/ChangeLog", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "patch": "@@ -1,3 +1,132 @@\n+2022-09-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure.ac: Restore detection of  HAVE_XCOFF_DWARF_EXTRAS.\n+\t* config/rs6000/rs6000.cc (HAVE_XCOFF_DWARF_EXTRAS): Reset it.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n+2022-09-07  Surya Kumari Jangala  <jskumari@linux.ibm.com>\n+\n+\tPR rtl-optimization/105586\n+\t* sched-rgn.cc (save_state_for_fallthru_edge): New function.\n+\t(schedule_region): Use it for all blocks.\n+\n+2022-09-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/stdalign.h [defined __STDC_VERSION__ &&\n+\t__STDC_VERSION__ > 201710L]: Disable all content.\n+\t* ginclude/stdbool.h [defined __STDC_VERSION__ && __STDC_VERSION__\n+\t> 201710L] (bool, true, false): Do not define.\n+\n+2022-09-07  Martin Liska  <mliska@suse.cz>\n+\n+\tPR bootstrap/106855\n+\t* collect2.cc (scan_prog_file): Restore if XCOFF_DEBUGGING_INFO.\n+\t* config/rs6000/rs6000.cc (rs6000_option_override_internal):\n+\t  Restore usage of XCOFF_DEBUGGING_INFO.\n+\t* config/rs6000/xcoff.h (XCOFF_DEBUGGING_INFO): Restore.\n+\t* dwarf2asm.cc (XCOFF_DEBUGGING_INFO): Restore support for\n+\t  XCOFF_DEBUGGING_INFO.\n+\t(dw2_asm_output_nstring): Likewise.\n+\t(USE_LINKONCE_INDIRECT): Likewise.\n+\t* dwarf2out.cc (XCOFF_DEBUGGING_INFO): Likewise.\n+\t(HAVE_XCOFF_DWARF_EXTRAS): Likewise.\n+\t(output_fde): Likewise.\n+\t(output_call_frame_info): Likewise.\n+\t(have_macinfo): Likewise.\n+\t(add_AT_loc_list): Likewise.\n+\t(add_AT_view_list): Likewise.\n+\t(output_compilation_unit_header): Likewise.\n+\t(output_pubnames): Likewise.\n+\t(output_aranges): Likewise.\n+\t(output_line_info): Likewise.\n+\t(output_macinfo): Likewise.\n+\t(dwarf2out_finish): Likewise.\n+\t(dwarf2out_early_finish): Likewise.\n+\n+2022-09-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106866\n+\t* tree-ssa-dce.cc (eliminate_unnecessary_stmts): When\n+\twe changed cfun->calls_setjmp make sure to purge all\n+\tabnormal call edges.\n+\n+2022-09-07  Xianmiao Qu  <cooper.qu@linux.alibaba.com>\n+\n+\t* config/csky/csky.cc (csky_emit_compare_float): Fix the expanding of\n+\tfloat LE comparing with zero for fpuv3.\n+\t* config/csky/csky.h (TARGET_SUPPORT_FPV2): New, true if any fpuv2\n+\tfeatures are enabled.\n+\n+2022-09-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106860\n+\t* tree-ssa-loop-split.cc (split_loop): Find the exit to\n+\tlatch edge from the loop exit edge instead of from the\n+\tlatch.  Verify we're going to find it.\n+\n+2022-09-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (dfs_mark_dominating_region):\n+\tAdjust to take the region exit source as argument.\n+\t(uninit_analysis::init_from_phi_def): Adjust.\n+\t(uninit_analysis::init_use_preds): Mark the dominating region\n+\tbefore computing control dependences.\n+\n+2022-09-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*mov<SHORT:mode>_aarch64): Extend\n+\tw<-w, r<-w and w<-r alternatives to !simd, using 32-bit moves\n+\tin that case.  Extend w<-r to w<-Z.\n+\t(*mov<HFBF:mode>_aarch64): Likewise, but with Y instead of Z.\n+\t(*movti_aarch64): Use an FMOV from XZR for w<-Z if MOVI is not\n+\tavailable.\n+\t(define_split): Do not apply the floating-point immediate-to-register\n+\tsplit to zeros, even if MOVI is not available.\n+\n+2022-09-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.cc (aarch64_conditional_register_usage):\n+\tDisallow use of FPRs in register asms for !TARGET_FLOAT.\n+\n+2022-09-07  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\tPR target/106828\n+\t* config/loongarch/loongarch.cc (loongarch_asan_shadow_offset): New.\n+\t(TARGET_ASAN_SHADOW_OFFSET): New.\n+\n+2022-09-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* doc/invoke.texi (-Wno-unicode): Document.\n+\n+2022-09-07  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (const_scalar_int splitter): Remove.\n+\n+2022-09-07  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.md: (constant splitters): Use \"(pc)\" as the\n+\treplacements.\n+\n+2022-09-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/103144\n+\t* tree-vect-loop.cc (vect_is_nonlinear_iv_evolution): New function.\n+\t(vect_analyze_scalar_cycles_1): Detect nonlinear iv by upper function.\n+\t(vect_create_nonlinear_iv_init): New function.\n+\t(vect_peel_nonlinear_iv_init): Ditto.\n+\t(vect_create_nonlinear_iv_step): Ditto\n+\t(vect_create_nonlinear_iv_vec_step): Ditto\n+\t(vect_update_nonlinear_iv): Ditto\n+\t(vectorizable_nonlinear_induction): Ditto.\n+\t(vectorizable_induction): Call\n+\tvectorizable_nonlinear_induction when induction_type is not\n+\tvect_step_op_add.\n+\t* tree-vect-loop-manip.cc (vect_update_ivs_after_vectorizer):\n+\tUpdate nonlinear iv for epilogue loop.\n+\t* tree-vectorizer.h (enum vect_induction_op_type): New enum.\n+\t(STMT_VINFO_LOOP_PHI_EVOLUTION_TYPE): New Macro.\n+\n 2022-09-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/106754"}, {"sha": "2e552cf7ab7341738c2fdb976b8a147982ecf56e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "patch": "@@ -1 +1 @@\n-20220907\n+20220908"}, {"sha": "1d75a63f59d51fd39364675f4b9f0749d84968dc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "patch": "@@ -1,3 +1,15 @@\n+2022-09-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.cc (c_common_reswords): Use D_C2X instead of D_CXXONLY\n+\tfor alignas, alignof, bool, false, static_assert, thread_local and\n+\ttrue.\n+\n+2022-09-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c.opt (Winvalid-utf8): Use ObjC instead of objC.  Remove\n+\t\" in comments\" from description.\n+\t(Wunicode): New option.\n+\n 2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/106836"}, {"sha": "41dc86bf3c821dcc6556f521f789091f80ffde25", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "patch": "@@ -1,3 +1,10 @@\n+2022-09-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.cc (c_parser_static_assert_declaration_no_semi)\n+\t(c_parser_alignas_specifier, c_parser_alignof_expression): Allow\n+\tfor C2x spellings of keywords.\n+\t(c_parser_postfix_expression): Handle RID_TRUE and RID_FALSE.\n+\n 2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.cc (c_parser_omp_clause_doacross_sink): Don't verify val"}, {"sha": "02aecfc5cf6356e6b74a4bf7c44c1101351b8e43", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "patch": "@@ -1,3 +1,23 @@\n+2022-09-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106793\n+\t* decl.cc (grokdeclarator): Improve placeholder diagnostics.\n+\t* parser.cc (cp_parser_type_id_1): Add fixit.\n+\n+2022-09-07  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\tPR c++/106188\n+\tPR c++/106713\n+\t* coroutines.cc (coro_rewrite_function_body): Ensure we have a\n+\tBIND_EXPR wrapping the function body.\n+\n+2022-09-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106829\n+\t* semantics.cc (finish_omp_target_clauses): If current_function_decl\n+\tisn't a nonstatic member function, don't set data.current_object to\n+\tnon-NULL.\n+\n 2022-09-06  Jason Merrill  <jason@redhat.com>\n \n \t* decl.cc (grok_op_properties): Return sooner for C++23 op[]."}, {"sha": "7b47665412ab4a56b6a33f4d77125d2d1c420fb5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "patch": "@@ -1,3 +1,108 @@\n+2022-09-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106793\n+\t* g++.dg/cpp23/auto-array2.C: Adjust.\n+\t* g++.dg/cpp1z/class-deduction113.C: New test.\n+\n+2022-09-07  Surya Kumari Jangala  <jskumari@linux.ibm.com>\n+\n+\tPR rtl-optimization/105586\n+\t* gcc.target/powerpc/pr105586.c: New test.\n+\n+2022-09-07  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\tPR c++/106188\n+\tPR c++/106713\n+\t* g++.dg/coroutines/pr106188.C: New test.\n+\n+2022-09-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-keywords-1.c, gcc.dg/c2x-align-1.c,\n+\tgcc.dg/c2x-align-6.c, gcc.dg/c2x-bool-2.c,\n+\tgcc.dg/c2x-static-assert-3.c, gcc.dg/c2x-static-assert-4.c,\n+\tgcc.dg/c2x-thread-local-1.c: New tests.\n+\t* gcc.dg/c2x-bool-1.c: Update expectations.\n+\n+2022-09-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106866\n+\t* gcc.dg/uninit-pr106866.c: New testcase.\n+\n+2022-09-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/106867\n+\t* gcc.dg/tree-ssa/pr106867.c: New test.\n+\n+2022-09-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106860\n+\t* g++.dg/opt/pr106860.C: New testcase.\n+\n+2022-09-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/movqi_1.c: New test.\n+\t* gcc.target/aarch64/movhi_1.c: Likewise.\n+\t* gcc.target/aarch64/movsi_1.c: Likewise.\n+\t* gcc.target/aarch64/movdi_2.c: Likewise.\n+\t* gcc.target/aarch64/movti_2.c: Likewise.\n+\t* gcc.target/aarch64/movhf_1.c: Likewise.\n+\t* gcc.target/aarch64/movsf_1.c: Likewise.\n+\t* gcc.target/aarch64/movdf_1.c: Likewise.\n+\t* gcc.target/aarch64/movtf_2.c: Likewise.\n+\t* gcc.target/aarch64/movv8qi_1.c: Likewise.\n+\t* gcc.target/aarch64/movv16qi_1.c: Likewise.\n+\n+2022-09-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/nofp_2.c: New test.\n+\n+2022-09-07  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\tPR target/106828\n+\t* g++.target/loongarch/pr106828.C: New test.\n+\n+2022-09-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106829\n+\t* g++.dg/gomp/pr106829.C: New test.\n+\n+2022-09-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/cpp/delimited-escape-seq-4.c: New test.\n+\t* c-c++-common/cpp/delimited-escape-seq-5.c: New test.\n+\t* c-c++-common/cpp/delimited-escape-seq-6.c: New test.\n+\t* c-c++-common/cpp/delimited-escape-seq-7.c: New test.\n+\t* c-c++-common/cpp/named-universal-char-escape-5.c: New test.\n+\t* c-c++-common/cpp/named-universal-char-escape-6.c: New test.\n+\t* c-c++-common/cpp/named-universal-char-escape-7.c: New test.\n+\t* g++.dg/cpp23/named-universal-char-escape1.C: New test.\n+\t* g++.dg/cpp23/named-universal-char-escape2.C: New test.\n+\n+2022-09-07  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR testsuite/106345\n+\t* lib/target-supports.exp (check_effective_target_powerpc_sqrt): Add\n+\ta function definition to avoid pedwarn about empty translation unit.\n+\t(check_effective_target_has_arch_pwr5): Likewise.\n+\t(check_effective_target_has_arch_pwr6): Likewise.\n+\t(check_effective_target_has_arch_pwr7): Likewise.\n+\t(check_effective_target_has_arch_pwr8): Likewise.\n+\t(check_effective_target_has_arch_pwr9): Likewise.\n+\t(check_effective_target_has_arch_pwr10): Likewise.\n+\t(check_effective_target_has_arch_ppc64): Likewise.\n+\t(check_effective_target_ppc_float128): Likewise.\n+\t(check_effective_target_ppc_float128_insns): Likewise.\n+\t(check_effective_target_powerpc_vsx): Likewise.\n+\n+2022-09-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr103144-mul-1.c: New test.\n+\t* gcc.target/i386/pr103144-mul-2.c: New test.\n+\t* gcc.target/i386/pr103144-neg-1.c: New test.\n+\t* gcc.target/i386/pr103144-neg-2.c: New test.\n+\t* gcc.target/i386/pr103144-shift-1.c: New test.\n+\t* gcc.target/i386/pr103144-shift-2.c: New test.\n+\n 2022-09-06  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp23/subscript8.C: New test."}, {"sha": "625b4e54cd8755ff269f0075c4e3713b4c1c5c5f", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "patch": "@@ -1,3 +1,26 @@\n+2022-09-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add true_false.\n+\t* expr.cc (eval_token): Check true_false not cplusplus to\n+\tdetermine whether to handle true and false keywords.\n+\t* init.cc (struct lang_flags): Add true_false.\n+\t(lang_defaults): Update.\n+\t(cpp_set_lang): Set true_false.\n+\n+2022-09-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add cpp_warn_unicode member.\n+\t(enum cpp_warning_reason): Add CPP_W_UNICODE.\n+\t* init.cc (cpp_create_reader): Initialize cpp_warn_unicode.\n+\t* charset.cc (_cpp_valid_ucn): In possible identifier contexts, don't\n+\thandle \\u{ or \\N{ specially in -std=c* modes except -std=c++2{3,b}.\n+\tIn possible identifier contexts, don't emit an error and punt\n+\tif \\N isn't followed by {, or if \\N{} surrounds some lower case\n+\tletters or _.  In possible identifier contexts when not C++23, don't\n+\temit an error but warning about unknown character names and treat as\n+\tseparate tokens.  When treating as separate tokens \\u{ or \\N{, emit\n+\twarnings.\n+\n 2022-09-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t* init.cc (lang_defaults): Disable trigraphs for C2x."}, {"sha": "958f6de7299c3d964b04841078f88c806c16bd20", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2a8ce93c86e05730ee9b975f413cb3fc288d94/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fe2a8ce93c86e05730ee9b975f413cb3fc288d94", "patch": "@@ -1,3 +1,26 @@\n+2022-09-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/barrier: Add missing runtime exception.\n+\n+2022-09-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/type_traits (is_reference): Make the primary\n+\ttemplate derive from false_type.  Define two partial\n+\tspecializations that derive from true_type.\n+\n+2022-09-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/type_traits (__is_void_helper): Remove.\n+\t(is_void): Make the primary template derive from false_type,\n+\tand define four explicit specializations that derive from\n+\ttrue_type.\n+\t(__is_null_pointer_helper, is_null_pointer): Likewise.\n+\n+2022-09-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* libsupc++/dyncast.cc (__dynamic_cast): Avoid virtual function\n+\tcall in simple success case.\n+\n 2022-09-06  Philipp Fent  <fent@in.tum.de>\n \n \t* testsuite/libstdc++-prettyprinters/48362.cc: Fix expected"}]}