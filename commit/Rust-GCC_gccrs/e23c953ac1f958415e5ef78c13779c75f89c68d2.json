{"sha": "e23c953ac1f958415e5ef78c13779c75f89c68d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzYzk1M2FjMWY5NTg0MTVlNWVmNzhjMTM3NzljNzVmODljNjhkMg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-02T12:32:40Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-02T12:32:40Z"}, "message": "2003-05-02  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/JarURLConnection.java\n\t(JarURLConnection): Class documentation merged with classpath.\n\t(getJarFileURL): Moved and documentation merged with classpath.\n\t(getEntryName): Likewise.\n\t(JarURLConnection): Documentation merged with classpath.\n\t(getJarEntry): Likewise.\n\t(getJarFile): Likewise.\n\t* java/net/PlainDatagramSocketImpl.java:\n\tClass documentation moved.\n\t* java/net/URLConnection.java\n\t(fileNameMap): Moved and documentation merged with classpath.\n\t(factory): Likewise.\n\t(defaultAllowUserInteraction): Likewis.\n\t(defaultUseCaches): Likewise.\n\t(allowUserInteraction): Likewise.\n\t(connected): Likewise.\n\t(url): Likewise.\n\t(connect): Documentation merged with classpath.\n\t(getURL): Likewise.\n\t(getContentLength): Likewise.\n\t(getContentType): Likewise.\n\t(getContentEncoding): Likewise.\n\t(getExpiration): Likewise.\n\t(getDate): Likewise.\n\t(getLastModified): Likewise.\n\t(getHeaderField): Likewise.\n\t(getContent): Likewise.\n\t(getPermission): Likewise.\n\t(getInputStream): Likewise.\n\t(getOutputStream): Likewise.\n\t(toString): Likewise.\n\t(getDoInput): Likewise.\n\t(getDoOutput): Likewise.\n\t(setAllowUserInteraction): Likewise.\n\t(getAllowUserInteraction): Likewise.\n\t(setDefaultAllowUserInteraction): Likewise.\n\t(getDefaultAllowUserInteraction): Likewise.\n\t(setUseCaches): Likewise.\n\t(getUseCaches): Likewise.\n\t(setIfModifiedSince): Likewise.\n\t(getIfModifiedSince): Likewise.\n\t(setDefaultRequestProperty): Likewise.\n\t(getDefaultRequestProperty): Likewise.\n\t(setContentHandlerFactory): Likewise.\n\t(setFileNameMap): Likewise.\n\nFrom-SVN: r66379", "tree": {"sha": "3788972935114bfc5c9c8a5e31380e4d90a49e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3788972935114bfc5c9c8a5e31380e4d90a49e6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e23c953ac1f958415e5ef78c13779c75f89c68d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23c953ac1f958415e5ef78c13779c75f89c68d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23c953ac1f958415e5ef78c13779c75f89c68d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23c953ac1f958415e5ef78c13779c75f89c68d2/comments", "author": null, "committer": null, "parents": [{"sha": "6060edcbe24aaa467d5be6fe35bd52a6eecc72b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6060edcbe24aaa467d5be6fe35bd52a6eecc72b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6060edcbe24aaa467d5be6fe35bd52a6eecc72b3"}], "stats": {"total": 345, "additions": 276, "deletions": 69}, "files": [{"sha": "a5c84984d7aa6007a889085a46324dfded8bc4d4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23c953ac1f958415e5ef78c13779c75f89c68d2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23c953ac1f958415e5ef78c13779c75f89c68d2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e23c953ac1f958415e5ef78c13779c75f89c68d2", "patch": "@@ -1,3 +1,51 @@\n+2003-05-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/JarURLConnection.java\n+\t(JarURLConnection): Class documentation merged with classpath.\n+\t(getJarFileURL): Moved and documentation merged with classpath.\n+\t(getEntryName): Likewise.\n+\t(JarURLConnection): Documentation merged with classpath.\n+\t(getJarEntry): Likewise.\n+\t(getJarFile): Likewise.\n+\t* java/net/PlainDatagramSocketImpl.java:\n+\tClass documentation moved.\n+\t* java/net/URLConnection.java\n+\t(fileNameMap): Moved and documentation merged with classpath.\n+\t(factory): Likewise.\n+\t(defaultAllowUserInteraction): Likewis.\n+\t(defaultUseCaches): Likewise.\n+\t(allowUserInteraction): Likewise.\n+\t(connected): Likewise.\n+\t(url): Likewise.\n+\t(connect): Documentation merged with classpath.\n+\t(getURL): Likewise.\n+\t(getContentLength): Likewise.\n+\t(getContentType): Likewise.\n+\t(getContentEncoding): Likewise.\n+\t(getExpiration): Likewise.\n+\t(getDate): Likewise.\n+\t(getLastModified): Likewise.\n+\t(getHeaderField): Likewise.\n+\t(getContent): Likewise.\n+\t(getPermission): Likewise.\n+\t(getInputStream): Likewise.\n+\t(getOutputStream): Likewise.\n+\t(toString): Likewise.\n+\t(getDoInput): Likewise.\n+\t(getDoOutput): Likewise.\n+\t(setAllowUserInteraction): Likewise.\n+\t(getAllowUserInteraction): Likewise.\n+\t(setDefaultAllowUserInteraction): Likewise.\n+\t(getDefaultAllowUserInteraction): Likewise.\n+\t(setUseCaches): Likewise.\n+\t(getUseCaches): Likewise.\n+\t(setIfModifiedSince): Likewise.\n+\t(getIfModifiedSince): Likewise.\n+\t(setDefaultRequestProperty): Likewise.\n+\t(getDefaultRequestProperty): Likewise.\n+\t(setContentHandlerFactory): Likewise.\n+\t(setFileNameMap): Likewise.\n+\n 2003-05-02  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/InetAddress.java:"}, {"sha": "a1f1d0db65990cbc62ae04bf72764cbd12c4a187", "filename": "libjava/java/net/JarURLConnection.java", "status": "modified", "additions": 52, "deletions": 14, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23c953ac1f958415e5ef78c13779c75f89c68d2/libjava%2Fjava%2Fnet%2FJarURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23c953ac1f958415e5ef78c13779c75f89c68d2/libjava%2Fjava%2Fnet%2FJarURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FJarURLConnection.java?ref=e23c953ac1f958415e5ef78c13779c75f89c68d2", "patch": "@@ -54,9 +54,29 @@\n import java.security.cert.Certificate;\n \n /**\n+ * This abstract class represents a common superclass for implementations\n+ * of jar URL's.  A jar URL is a special type of URL that allows JAR\n+ * files on remote systems to be accessed.  It has the form:\n+ * <p>\n+ * jar:<standard URL pointing to jar file>!/file/within/jarfile\n+ * <p> for example:\n+ * <p>\n+ * jar:http://www.urbanophile.com/java/foo.jar!/com/urbanophile/bar.class\n+ * <p>\n+ * That example URL points to the file /com/urbanophile/bar.class in the\n+ * remote JAR file http://www.urbanophile.com/java/foo.jar.  The HTTP\n+ * protocol is used only as an example.  Any supported remote protocol\n+ * can be used.\n+ * <p>\n+ * This class currently works by retrieving the entire jar file into a\n+ * local cache file, then performing standard jar operations on it.\n+ * (At least this is true for the default protocol implementation).\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n  * @author Kresten Krab Thorup <krab@gnu.org>\n- * @since 1.2\n  * @date Aug 10, 1999.\n+ *\n+ * @since 1.2\n  */\n public abstract class JarURLConnection extends URLConnection\n {\n@@ -74,18 +94,10 @@ public abstract class JarURLConnection extends URLConnection\n   // Cached JarURLConnection's \n   static Hashtable conn_cache = new Hashtable();\n \n-  public URL getJarFileURL ()\n-  {\n-    return jarFileURL;\n-  }\n-\n-  public String getEntryName ()\n-  {\n-    return element;\n-  }\n-\n   /**\n-   * Creates a new JarURLConnection\n+   * Creates a JarURLConnection from an URL object\n+   *\n+   * @param URL url The URL object for this connection.\n    *\n    * @exception MalformedURLException If url is invalid\n    *\n@@ -108,6 +120,29 @@ protected JarURLConnection(URL url)\n     element = (bang+2==spec.length() ? null : spec.substring (bang+2));\n   }\n \n+  /**\n+   * This method returns the \"real\" URL where the JarFile is located.\n+   * //****Is this right?*****\n+   *\n+   * @return The remote URL\n+   */\n+  public URL getJarFileURL ()\n+  {\n+    return jarFileURL;\n+  }\n+\n+  /**\n+   * Returns the \"entry name\" portion of the jar URL.  This is the portion\n+   * after the \"!/\" in the jar URL that represents the pathname inside the\n+   * actual jar file.\n+   *\n+   * @return The entry name.\n+   */\n+  public String getEntryName ()\n+  {\n+    return element;\n+  }\n+\n   public synchronized void connect() throws IOException\n   {\n     // Call is ignored if already connected.\n@@ -201,6 +236,8 @@ public InputStream getInputStream() throws IOException\n   /**\n    * Return the JAR entry object for this connection, if any\n    *\n+   * @return The jar entry\n+   *\n    * @exception IOException If an error occurs\n    */\n   public JarEntry getJarEntry () throws IOException\n@@ -250,10 +287,11 @@ public JarEntry getJarEntry () throws IOException\n   /**\n    * Return the JAR file for this connection\n    *\n+   * @return The JarFile object\n+   *\n    * @exception IOException If an error occurs\n    */\n-  public abstract JarFile getJarFile() throws IOException;\n-\n+  public abstract JarFile getJarFile () throws IOException;\n \n   // Steal and borrow from protocol/file/Connection.java\n "}, {"sha": "69e178889956d3eb98528d3fb2a2d807009ea79b", "filename": "libjava/java/net/PlainDatagramSocketImpl.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23c953ac1f958415e5ef78c13779c75f89c68d2/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23c953ac1f958415e5ef78c13779c75f89c68d2/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java?ref=e23c953ac1f958415e5ef78c13779c75f89c68d2", "patch": "@@ -37,19 +37,19 @@\n \n \n package java.net;\n-import java.io.IOException;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date May 3, 1999.\n- */\n+import java.io.IOException;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date May 3, 1999.\n+ */\n class PlainDatagramSocketImpl extends DatagramSocketImpl\n {\n   // These fields are mirrored for use in native code to avoid cpp conflicts"}, {"sha": "f7e8690edc1ce0ae9cae90be602139a6caa23167", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 171, "deletions": 50, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23c953ac1f958415e5ef78c13779c75f89c68d2/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23c953ac1f958415e5ef78c13779c75f89c68d2/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=e23c953ac1f958415e5ef78c13779c75f89c68d2", "patch": "@@ -92,21 +92,42 @@\n  */\n public abstract class URLConnection\n {\n+  /**\n+   * This is an object that maps filenames to MIME types.  The interface\n+   * to do this is implemented by this class, so just create an empty\n+   * instance and store it here.\n+   */\n+  private static FileNameMap fileNameMap;\n+ \n+  /**\n+   * This is the ContentHandlerFactory set by the caller, if any\n+   */\n+  private static ContentHandlerFactory factory;\n+  \n+  /**\n+   * This is the default value that will be used to determine whether or\n+   * not user interaction should be allowed.\n+   */\n   private static boolean defaultAllowUserInteraction = false;\n+  \n+  /**\n+   * This is the default flag indicating whether or not to use caches to\n+   * store the data returned from a server\n+   */\n   private static boolean defaultUseCaches = true;\n-  private static FileNameMap fileNameMap;  // Set by the URLConnection subclass.\n-  private static ContentHandlerFactory factory;\n-  private static ContentHandler contentHandler;\n-  private static Hashtable handlers = new Hashtable();\n-  private static Locale locale; \n-  private static SimpleDateFormat dateFormat1, dateFormat2, dateFormat3;\n-  private static boolean dateformats_initialized = false;\n \n   /**\n-   * This is the URL associated with this connection\n+   * This variable determines whether or not interaction is allowed with\n+   * the user.  For example, to prompt for a username and password.\n    */\n-  protected URL url;\n+  protected boolean allowUserInteraction;\n \n+  /**\n+   * Indicates whether or not a connection has been established to the\n+   * destination specified in the URL\n+   */\n+  protected boolean connected = false;\n+  \n   /**\n    * Indicates whether or not input can be read from this URL\n    */\n@@ -117,8 +138,6 @@\n    */\n   protected boolean doOutput = false;\n   \n-  protected boolean allowUserInteraction;\n-\n   /**\n    * If this flag is set, the protocol is allowed to cache data whenever\n    * it can (caching is not guaranteed). If it is not set, the protocol\n@@ -141,11 +160,16 @@\n   protected long ifModifiedSince = 0L;\n \n   /**\n-   * Indicates whether or not a connection has been established to the\n-   * destination specified in the URL\n+   * This is the URL associated with this connection\n    */\n-  protected boolean connected = false;\n-  \n+  protected URL url;\n+\n+  private static ContentHandler contentHandler;\n+  private static Hashtable handlers = new Hashtable();\n+  private static Locale locale; \n+  private static SimpleDateFormat dateFormat1, dateFormat2, dateFormat3;\n+  private static boolean dateformats_initialized = false;\n+\n   /**\n    * Creates a URL connection to a given URL. A real connection is not made.\n    * Use #connect to do this.\n@@ -162,63 +186,89 @@ protected URLConnection(URL url)\n   }\n \n   /**\n-   * Creates a real connection to the object references by the URL given\n-   * to the constructor\n-   *\n-   * @exception IOException If an error occurs\n+   * Establishes the actual connection to the URL associated with this\n+   * connection object\n    */\n   public abstract void connect() throws IOException;\n \n   /**\n-   * Returns ths URL to the object.\n+   * Returns the URL object associated with this connection\n+   *\n+   * @return The URL for this connection.\n    */\n   public URL getURL()\n   {\n     return url;\n   }\n \n   /**\n-   * Returns the value of the content-length header field\n+   * Returns the value of the content-length header field or -1 if the value\n+   * is not known or not present.\n+   *\n+   * @return The content-length field\n    */\n   public int getContentLength()\n   {\n     return getHeaderFieldInt(\"content-length\", -1);\n   }\n \n   /**\n-   * Returns the value of the content-type header field\n+   * Returns the the content-type of the data pointed to by the URL.  This\n+   * method first tries looking for a content-type header.  If that is not\n+   * present, it attempts to use the file name to determine the content's\n+   * MIME type.  If that is unsuccessful, the method returns null.  The caller\n+   * may then still attempt to determine the MIME type by a call to\n+   * guessContentTypeFromStream()\n+   *\n+   * @return The content MIME type\n    */\n   public String getContentType()\n   {\n     return getHeaderField(\"content-type\");\n   }\n \n   /**\n-   * Returns the value of the content-encoding header field\n+   * Returns the value of the content-encoding field or null if it is not\n+   * known or not present.\n+   * \n+   * @return The content-encoding field\n    */\n   public String getContentEncoding()\n   {\n     return getHeaderField(\"content-encoding\");\n   }\n \n   /**\n-   * Returns the value of the expires header field\n+   * Returns the value of the expires header or 0 if not known or present.\n+   * If populated, the return value is number of seconds since midnight\n+   * on 1/1/1970 GMT.\n+   *\n+   * @return The expiration time.\n    */\n   public long getExpiration()\n   {\n     return getHeaderFieldDate(\"expiration\", 0L);\n   }\n \n   /**\n-   * Returns the value of the date header field\n+   * Returns the date of the document pointed to by the URL as reported in\n+   * the date field of the header or 0 if the value is not present or not\n+   * known. If populated, the return value is number of seconds since\n+   * midnight on 1/1/1970 GMT.\n+   *\n+   * @return The document date\n    */\n   public long getDate()\n   {\n     return getHeaderFieldDate(\"date\", 0L);\n   }\n \n   /**\n-   * Returns the value of the last-modified header field\n+   * Returns the value of the last-modified header field or 0 if not known known\n+   * or not present.  If populated, the return value is the number of seconds\n+   * since midnight on 1/1/1970.\n+   *\n+   * @return The last modified time\n    */\n   public long getLastModified()\n   {\n@@ -237,7 +287,8 @@ public String getHeaderField(int num)\n   }\n \n   /**\n-   * Returns the value of the header filed specified by name\n+   * Returns a String representing the value of the header field having\n+   * the named key.  Returns null if the header field does not exist.\n    *\n    * @param name The name of the header field\n    */\n@@ -311,7 +362,10 @@ else if ((date = dateFormat3.parse(str, new ParsePosition(0))) != null)\n   }\n \n   /**\n-   * Returns the key of the n-th header field\n+   * Returns a String representing the header key at the specified index.\n+   * This allows the caller to walk the list of header fields.  The analogous\n+   * getHeaderField(int) method allows access to the corresponding value for\n+   * this tag.\n    *\n    * @param num The number of the header field\n    */\n@@ -322,7 +376,19 @@ public String getHeaderFieldKey(int num)\n   }\n \n   /**\n-   * Retrieves the content of this URLConnection\n+   * This method returns the content of the document pointed to by the URL\n+   * as an Object.  The type of object depends on the MIME type of the\n+   * object and particular content hander loaded.  Most text type content\n+   * handlers will return a subclass of InputStream.  Images usually return\n+   * a class that implements ImageProducer.  There is not guarantee what\n+   * type of object will be returned, however.\n+   * <p>\n+   * This class first determines the MIME type of the content, then creates\n+   * a ContentHandler object to process the input.  If the ContentHandlerFactory\n+   * is set, then that object is called to load a content handler, otherwise\n+   * a class called gnu.java.net.content.<content_type> is tried.\n+   * The default class will also be used if the content handler factory returns\n+   * a null content handler.\n    *\n    * @exception IOException If an error occurs\n    * @exception UnknownServiceException If the protocol does not support the\n@@ -356,9 +422,15 @@ public Object getContent(Class[] classes) throws IOException\n   }\n \n   /**\n-   * Returns a permission object representing the permission necessary to make\n-   * the connection represented by this object. This method returns null if no\n-   * permission is required to make the connection.\n+   * This method returns a <code>Permission</code> object representing the\n+   * permissions required to access this URL.  This method returns\n+   * <code>java.security.AllPermission</code> by default.  Subclasses should\n+   * override it to return a more specific permission.  For example, an\n+   * HTTP URL should return an instance of <code>SocketPermission</code>\n+   * for the appropriate host and port.\n+   * <p>\n+   * Note that because of items such as HTTP redirects, the permission\n+   * object returned might be different before and after connecting.\n    *\n    * @exception IOException If the computation of the permission requires\n    * network or file I/O and an exception occurs while computing it\n@@ -370,7 +442,10 @@ public Permission getPermission() throws IOException\n   }\n \n   /**\n-   * Returns the input stream of the URL connection\n+   * Returns an InputStream for this connection.  As this default\n+   * implementation returns null, subclasses should override this method\n+   *\n+   * @return An InputStream for this connection\n    *\n    * @exception IOException If an error occurs\n    * @exception UnknownServiceException If the protocol does not support input\n@@ -383,7 +458,10 @@ public InputStream getInputStream() throws IOException\n   }\n \n   /**\n-   * Returns the output stream of the URL connection\n+   * Returns an OutputStream for this connection.  As this default\n+   * implementation returns null, subclasses should override this method\n+   *\n+   * @return An OutputStream for this connection\n    *\n    * @exception IOException If an error occurs\n    * @exception UnknownServiceException If the protocol does not support output\n@@ -396,7 +474,10 @@ public OutputStream getOutputStream() throws IOException\n   }\n \n   /**\n-   * Returns a string representation of the URL connection object\n+   * The methods prints the value of this object as a String by calling the\n+   * toString() method of its associated URL.  Overrides Object.toString()\n+   * \n+   * @return A String representation of this object\n    */\n   public String toString()\n   {\n@@ -419,7 +500,11 @@ public void setDoInput(boolean doinput)\n   }\n \n   /**\n-   * Returns the current value of the doInput field\n+   * Returns the value of a flag indicating whether or not input is going\n+   * to be done for this connection.  This default to true unless the\n+   * doOutput flag is set to false, in which case this defaults to false.\n+   *\n+   * @return true if input is to be done, false otherwise\n    */\n   public boolean getDoInput()\n   {\n@@ -442,15 +527,20 @@ public void setDoOutput(boolean dooutput)\n   }\n \n   /**\n-   * Returns the current value of the doOutput field\n+   * Returns a boolean flag indicating whether or not output will be done\n+   * on this connection.  This defaults to false.\n+   *\n+   * @return true if output is to be done, false otherwise\n    */\n   public boolean getDoOutput()\n   {\n     return doOutput;\n   }\n \n   /**\n-   * Sets a new value to the allowUserInteraction field\n+   * Sets a boolean flag indicating whether or not user interaction is\n+   * allowed for this connection.  (For example, in order to prompt for\n+   * username and password info.\n    *\n    * @param allowed The new value\n    *\n@@ -465,15 +555,20 @@ public void setAllowUserInteraction(boolean allowed)\n   }\n \n   /**\n-   * Returns the current value of the allowUserInteraction field\n+   * Returns a boolean flag indicating whether or not user interaction is\n+   * allowed for this connection.  (For example, in order to prompt for\n+   * username and password info.\n+   *\n+   * @return true if user interaction is allowed, false otherwise\n    */\n   public boolean getAllowUserInteraction()\n   {\n     return allowUserInteraction;\n   }\n \n   /**\n-   * Sets the default value if the allowUserInteraction field\n+   * Sets the default flag for whether or not interaction with a user\n+   * is allowed.  This will be used for all connections unless overridden\n    *\n    * @param allowed The new default value\n    */\n@@ -483,15 +578,19 @@ public static void setDefaultAllowUserInteraction(boolean allowed)\n   }\n \n   /**\n-   * Returns the default value of the allowUserInteraction field\n+   * Returns the default flag for whether or not interaction with a user\n+   * is allowed.  This will be used for all connections unless overridden\n+   *\n+   * @return true if user interaction is allowed, false otherwise\n    */\n   public static boolean getDefaultAllowUserInteraction()\n   {\n     return defaultAllowUserInteraction;\n   }\n \n   /**\n-   * Sets a new value to the useCaches field\n+   * Sets a boolean flag indicating whether or not caching will be used\n+   * (if possible) to store data downloaded via the connection.\n    *\n    * @param usecaches The new value\n    *\n@@ -506,15 +605,22 @@ public void setUseCaches(boolean usecaches)\n   }\n \n   /**\n-   * The current value of the useCaches field\n+   * Returns a boolean flag indicating whether or not caching will be used\n+   * (if possible) to store data downloaded via the connection.\n+   *\n+   * @return true if caching should be used if possible, false otherwise\n    */\n   public boolean getUseCaches()\n   {\n     return useCaches;\n   }\n \n   /**\n-   * Sets the value of the ifModifiedSince field\n+   * Sets the ifModified since instance variable.  If this value is non\n+   * zero and the underlying protocol supports it, the actual document will\n+   * not be fetched unless it has been modified since this time.  The value\n+   * passed should  be 0 if this feature is to be disabled or the time expressed\n+   * as the number of seconds since midnight 1/1/1970 GMT otherwise.\n    *\n    * @param ifmodifiedsince The new value in milliseconds\n    * since January 1, 1970 GMT\n@@ -530,7 +636,13 @@ public void setIfModifiedSince(long ifmodifiedsince)\n   }\n \n   /**\n-   * Returns the current value of the ifModifiedSince field\n+   * Returns the ifModified since instance variable.  If this value is non\n+   * zero and the underlying protocol supports it, the actual document will\n+   * not be fetched unless it has been modified since this time.  The value\n+   * returned will be 0 if this feature is disabled or the time expressed\n+   * as the number of seconds since midnight 1/1/1970 GMT otherwise\n+   *\n+   * @return The ifModifiedSince value\n    */\n   public long getIfModifiedSince()\n   {\n@@ -546,7 +658,8 @@ public boolean getDefaultUseCaches()\n   }\n \n   /**\n-   * Sets the default value of the useCaches field\n+   * Sets the default value used to determine whether or not caching\n+   * of documents will be done when possible.\n    *\n    * @param defaultusecaches The new default value\n    */\n@@ -639,7 +752,9 @@ public Map getRequestProperties()\n   }\n \n   /**\n-   * Defines a default request property\n+   * Sets the default value of a request property.  This will be used\n+   * for all connections unless the value of the property is manually\n+   * overridden.\n    *\n    * @param key The key of the property\n    * @param value The value of the property\n@@ -655,7 +770,9 @@ public static void setDefaultRequestProperty(String key, String value)\n   }\n \n   /**\n-   * Returns the value of a default request property\n+   * Returns the default value of a request property.  This will be used\n+   * for all connections unless the value of the property is manually\n+   * overridden.\n    *\n    * @param key The key of the default property\n    *\n@@ -672,7 +789,10 @@ public static String getDefaultRequestProperty(String key)\n   }\n \n   /**\n-   * Sets a ContentHandlerFactory\n+   * Set's the ContentHandlerFactory for an application.  This can be called\n+   * once and only once.  If it is called again, then an Error is thrown.\n+   * Unlike for other set factory methods, this one does not do a security\n+   * check prior to setting the factory.\n    *\n    * @param fac The ContentHandlerFactory\n    *\n@@ -739,7 +859,8 @@ public static String guessContentTypeFromStream(InputStream is)\n   }\n \n   /**\n-   * Returns a filename map (a mimetable)\n+   * This method returns the <code>FileNameMap</code> object being used\n+   * to decode MIME types by file extension.\n    *\n    * @since 1.2\n    */"}]}