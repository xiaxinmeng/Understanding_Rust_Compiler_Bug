{"sha": "26373979deab7481b0503d86e80390ab65c65381", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzNzM5NzlkZWFiNzQ4MWIwNTAzZDg2ZTgwMzkwYWI2NWM2NTM4MQ==", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2021-01-27T08:53:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-18T08:36:47Z"}, "message": "[Ada] Implement basic support for -fdiagnostics-format=json\n\ngcc/ada/\n\n\t* back_end.adb (Scan_Back_End_Switches): Set Opt.JSON_Output to\n\tTrue if -fdiagnostics-format=json option is found.\n\t* back_end.ads (Scan_Compiler_Arguments): Mention\n\tOpt.JSON_Output.\n\t* errout.adb (Output_JSON_Message): New procedure.\n\t(Output_Messages): If Opt.JSON_Output is True, print messages\n\twith new Output_JSON_Message procedure.\n\t* opt.ads: Declare JSON_Output variable.\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n\tMention new -fdiagnostics-format option.\n\t* gnat_ugn.texi: Regenerate.", "tree": {"sha": "c43df107692a6f68fbde676154abce2af049d04e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c43df107692a6f68fbde676154abce2af049d04e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26373979deab7481b0503d86e80390ab65c65381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26373979deab7481b0503d86e80390ab65c65381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26373979deab7481b0503d86e80390ab65c65381", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26373979deab7481b0503d86e80390ab65c65381/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0becb0faaecc79df3de24bd5467b90cfd08a829a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0becb0faaecc79df3de24bd5467b90cfd08a829a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0becb0faaecc79df3de24bd5467b90cfd08a829a"}], "stats": {"total": 208, "additions": 206, "deletions": 2}, "files": [{"sha": "42d837d1df91f38880b578db5ae1b646eb1537c6", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=26373979deab7481b0503d86e80390ab65c65381", "patch": "@@ -281,6 +281,14 @@ package body Back_End is\n             elsif Switch_Chars (First .. Last) = \"fpreserve-control-flow\" then\n                Opt.Suppress_Control_Flow_Optimizations := True;\n \n+            --  Back end switch -fdiagnostics-format=json tells the frontend to\n+            --  output its error and warning messages in the same format GCC\n+            --  uses when passed -fdiagnostics-format=json.\n+\n+            elsif Switch_Chars (First .. Last) = \"fdiagnostics-format=json\"\n+            then\n+               Opt.JSON_Output := True;\n+\n             --  Back end switch -fdump-scos, which exists primarily for C, is\n             --  also accepted for Ada as a synonym of -gnateS.\n "}, {"sha": "32a0ea34b238486bf7c8482fee95b6bd28da0ca3", "filename": "gcc/ada/back_end.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Fback_end.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Fback_end.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.ads?ref=26373979deab7481b0503d86e80390ab65c65381", "patch": "@@ -70,6 +70,7 @@ package Back_End is\n    --    Opt.Suppress_Control_Float_Optimizations\n    --    Opt.Generate_SCO\n    --    Opt.Generate_SCO_Instance_Table\n+   --    Opt.JSON_Output\n    --    Opt.Stack_Checking_Enabled\n    --    Opt.No_Stdinc\n    --    Opt.No_Stdlib"}, {"sha": "0b5e71fb0b282a3a218afd7f34e2deb685583937", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=26373979deab7481b0503d86e80390ab65c65381", "patch": "@@ -1233,6 +1233,13 @@ Alphabetical List of All Switches\n   marker is specified, the callgraph is decorated with information about\n   dynamically allocated objects.\n \n+.. index:: -fdiagnostics-format   (gcc)\n+\n+:switch:`-fdiagnostics-format=json`\n+  Makes GNAT emit warning and error messages as JSON. Inhibits printing of\n+  text warning and errors messages except if :switch:`-gnatv` or\n+  :switch:`-gnatl` are present.\n+\n \n .. index:: -fdump-scos  (gcc)\n "}, {"sha": "16f7aa3a85c6e2c3d43e03ec64cd0ff2730ed774", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 173, "deletions": 2, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=26373979deab7481b0503d86e80390ab65c65381", "patch": "@@ -130,6 +130,11 @@ package body Errout is\n    --  or if it refers to an Etype that has an error posted on it, or if\n    --  it references an Entity that has an error posted on it.\n \n+   procedure Output_JSON_Message (Error_Id : Error_Msg_Id);\n+   --  Output error message Error_Id and any subsequent continuation message\n+   --  using a JSON format similar to the one GCC uses when passed\n+   --  -fdiagnostics-format=json.\n+\n    procedure Output_Source_Line\n      (L     : Physical_Line_Number;\n       Sfile : Source_File_Index;\n@@ -2055,6 +2060,133 @@ package body Errout is\n       end if;\n    end OK_Node;\n \n+   -------------------------\n+   -- Output_JSON_Message --\n+   -------------------------\n+\n+   procedure Output_JSON_Message (Error_Id : Error_Msg_Id) is\n+\n+      procedure Write_JSON_Escaped_String (Str : String_Ptr);\n+      --  Write each character of Str, taking care of preceding each quote and\n+      --  backslash with a backslash. Note that this escaping differs from what\n+      --  GCC does.\n+      --\n+      --  Indeed, the JSON specification mandates encoding wide characters\n+      --  either as their direct UTF-8 representation or as their escaped\n+      --  UTF-16 surrogate pairs representation. GCC seems to prefer escaping -\n+      --  we choose to use the UTF-8 representation instead.\n+\n+      procedure Write_JSON_Location (Sptr : Source_Ptr);\n+      --  Write Sptr as a JSON location, an object containing a file attribute,\n+      --  a line number and a column number.\n+\n+      procedure Write_JSON_Span (Span : Source_Span);\n+      --  Write Span as a JSON span, an object containing a \"caret\" attribute\n+      --  whose value is the JSON location of Span.Ptr. If Span.First and\n+      --  Span.Last are different from Span.Ptr, they will be printed as JSON\n+      --  locations under the names \"start\" and \"finish\".\n+\n+      -------------------------------\n+      -- Write_JSON_Escaped_String --\n+      -------------------------------\n+\n+      procedure Write_JSON_Escaped_String (Str : String_Ptr) is\n+      begin\n+         for C of Str.all loop\n+            if C = '\"' or else C = '\\' then\n+               Write_Char ('\\');\n+            end if;\n+\n+            Write_Char (C);\n+         end loop;\n+      end Write_JSON_Escaped_String;\n+\n+      -------------------------\n+      -- Write_JSON_Location --\n+      -------------------------\n+\n+      procedure Write_JSON_Location (Sptr : Source_Ptr) is\n+      begin\n+         Write_Str (\"{\"\"file\"\":\"\"\");\n+         Write_Name (Full_Ref_Name (Get_Source_File_Index (Sptr)));\n+         Write_Str (\"\"\",\"\"line\"\":\");\n+         Write_Int (Pos (Get_Physical_Line_Number (Sptr)));\n+         Write_Str (\", \"\"column\"\":\");\n+         Write_Int (Nat (Get_Column_Number (Sptr)));\n+         Write_Str (\"}\");\n+      end Write_JSON_Location;\n+\n+      ---------------------\n+      -- Write_JSON_Span --\n+      ---------------------\n+\n+      procedure Write_JSON_Span (Span : Source_Span) is\n+      begin\n+         Write_Str (\"{\"\"caret\"\":\");\n+         Write_JSON_Location (Span.Ptr);\n+\n+         if Span.Ptr /= Span.First then\n+            Write_Str (\",\"\"start\"\":\");\n+            Write_JSON_Location (Span.First);\n+         end if;\n+\n+         if Span.Ptr /= Span.Last then\n+            Write_Str (\",\"\"finish\"\":\");\n+            Write_JSON_Location (Span.Last);\n+         end if;\n+\n+         Write_Str (\"}\");\n+      end Write_JSON_Span;\n+\n+      --  Local Variables\n+\n+      E : Error_Msg_Id := Error_Id;\n+\n+   --  Start of processing for Output_JSON_Message\n+\n+   begin\n+\n+      --  Print message kind\n+\n+      Write_Str (\"{\"\"kind\"\":\");\n+\n+      if Errors.Table (E).Warn and then not Errors.Table (E).Warn_Err then\n+         Write_Str (\"\"\"warning\"\"\");\n+      elsif Errors.Table (E).Info or else Errors.Table (E).Check then\n+         Write_Str (\"\"\"note\"\"\");\n+      else\n+         Write_Str (\"\"\"error\"\"\");\n+      end if;\n+\n+      --  Print message location\n+\n+      Write_Str (\",\"\"locations\"\":[\");\n+      Write_JSON_Span (Errors.Table (E).Sptr);\n+\n+      if Errors.Table (E).Optr /= Errors.Table (E).Sptr.Ptr then\n+         Write_Str (\",{\"\"caret\"\":\");\n+         Write_JSON_Location (Errors.Table (E).Optr);\n+         Write_Str (\"}\");\n+      end if;\n+\n+      --  Print message content\n+\n+      Write_Str (\"],\"\"message\"\":\"\"\");\n+      Write_JSON_Escaped_String (Errors.Table (E).Text);\n+\n+      --  Print message continuations if present\n+\n+      E := E + 1;\n+\n+      while E <= Last_Error_Msg and then Errors.Table (E).Msg_Cont loop\n+         Write_Str (\", \");\n+         Write_JSON_Escaped_String (Errors.Table (E).Text);\n+         E := E + 1;\n+      end loop;\n+\n+      Write_Str (\"\"\"}\");\n+   end Output_JSON_Message;\n+\n    ---------------------\n    -- Output_Messages --\n    ---------------------\n@@ -2615,9 +2747,46 @@ package body Errout is\n          Current_Error_Source_File := No_Source_File;\n       end if;\n \n+      if Opt.JSON_Output then\n+         Set_Standard_Error;\n+\n+         E := First_Error_Msg;\n+\n+         --  Find first printable message\n+\n+         while E /= No_Error_Msg and then Errors.Table (E).Deleted loop\n+            E := Errors.Table (E).Next;\n+         end loop;\n+\n+         Write_Char ('[');\n+\n+         if E /= No_Error_Msg then\n+\n+            Output_JSON_Message (E);\n+\n+            E := Errors.Table (E).Next;\n+\n+            --  Skip deleted messages.\n+            --  Also skip continuation messages, as they have already been\n+            --  printed along the message they're attached to.\n+\n+            while E /= No_Error_Msg\n+              and then not Errors.Table (E).Deleted\n+              and then not Errors.Table (E).Msg_Cont\n+            loop\n+               Write_Char (',');\n+               Output_JSON_Message (E);\n+               E := Errors.Table (E).Next;\n+            end loop;\n+         end if;\n+\n+         Write_Char (']');\n+\n+         Set_Standard_Output;\n+\n       --  Brief Error mode\n \n-      if Brief_Output or (not Full_List and not Verbose_Mode) then\n+      elsif Brief_Output or (not Full_List and not Verbose_Mode) then\n          Set_Standard_Error;\n \n          E := First_Error_Msg;\n@@ -2899,7 +3068,9 @@ package body Errout is\n          Write_Error_Summary;\n       end if;\n \n-      Write_Max_Errors;\n+      if not Opt.JSON_Output then\n+         Write_Max_Errors;\n+      end if;\n \n       --  Even though Warning_Info_Messages are a subclass of warnings, they\n       --  must not be treated as errors when -gnatwe is in effect."}, {"sha": "369427ccf7b9414ed05bbf7bbbadf5aaff7c4599", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=26373979deab7481b0503d86e80390ab65c65381", "patch": "@@ -8581,6 +8581,18 @@ marker is specified, the callgraph is decorated with information about\n dynamically allocated objects.\n @end table\n \n+@geindex -fdiagnostics-format (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-fdiagnostics-format=json}\n+\n+Makes GNAT emit warning and error messages as JSON. Inhibits printing of\n+text warning and errors messages except if @code{-gnatv} or\n+@code{-gnatl} are present.\n+@end table\n+\n @geindex -fdump-scos (gcc)\n \n "}, {"sha": "827bbeff9c9a79f4f4f62362857be7b46f271c96", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26373979deab7481b0503d86e80390ab65c65381/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=26373979deab7481b0503d86e80390ab65c65381", "patch": "@@ -915,6 +915,11 @@ package Opt is\n    --  directory if these files already exist or in the source directory\n    --  if not.\n \n+   JSON_Output : Boolean := False;\n+   --  GNAT\n+   --  Output error and warning messages in JSON format. Set to true when the\n+   --  backend option \"-fdiagnostics-format=json\" is found on the command line.\n+\n    Keep_Going : Boolean := False;\n    --  GNATMAKE, GPRBUILD\n    --  When True signals to ignore compilation errors and keep processing"}]}