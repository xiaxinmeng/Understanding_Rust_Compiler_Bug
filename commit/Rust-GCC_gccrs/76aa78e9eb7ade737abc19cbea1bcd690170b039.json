{"sha": "76aa78e9eb7ade737abc19cbea1bcd690170b039", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhYTc4ZTllYjdhZGU3MzdhYmMxOWNiZWExYmNkNjkwMTcwYjAzOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-06-08T11:07:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-06-08T11:07:24Z"}, "message": "allocator.h (__shrink_to_fit): Simplify.\n\n2011-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/allocator.h (__shrink_to_fit): Simplify.\n\t* include/bits/stl_vector.h (vector<>::shrink_to_fit): Adjust.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_bvector.h: Likewise.\n\nFrom-SVN: r174802", "tree": {"sha": "13e6b3a72d25efb2390fe71ac59d916d84cffcca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13e6b3a72d25efb2390fe71ac59d916d84cffcca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76aa78e9eb7ade737abc19cbea1bcd690170b039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76aa78e9eb7ade737abc19cbea1bcd690170b039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76aa78e9eb7ade737abc19cbea1bcd690170b039", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76aa78e9eb7ade737abc19cbea1bcd690170b039/comments", "author": null, "committer": null, "parents": [{"sha": "6c8e9fc9e83e3a5d28705bc5460917f62a3f5a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8e9fc9e83e3a5d28705bc5460917f62a3f5a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c8e9fc9e83e3a5d28705bc5460917f62a3f5a28"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "e456f59646930eeb949f741976cd1e37e921d603", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aa78e9eb7ade737abc19cbea1bcd690170b039/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aa78e9eb7ade737abc19cbea1bcd690170b039/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=76aa78e9eb7ade737abc19cbea1bcd690170b039", "patch": "@@ -1,3 +1,10 @@\n+2011-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/allocator.h (__shrink_to_fit): Simplify.\n+\t* include/bits/stl_vector.h (vector<>::shrink_to_fit): Adjust.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\n 2011-06-07  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/lib/prune.exp: s/required/instantiated/.\n@@ -7,7 +14,8 @@\n \t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n \t* testsuite/20_util/forward/1_neg.cc: Likewise.\n \t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Likewise.\n-\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n \t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Likewise.\n \t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Likewise.\n \t* testsuite/20_util/shared_ptr/assign/shared_ptr_neg.cc: Likewise.\n@@ -17,7 +25,8 @@\n \t* testsuite/ext/type_traits/add_unsigned_integer_neg.cc: Likewise.\n \t* testsuite/ext/type_traits/remove_unsigned_floating_neg.cc: Likewise.\n \t* testsuite/ext/type_traits/remove_unsigned_integer_neg.cc: Likewise.\n-\t* testsuite/tr1/2_general_utilities/shared_ptr/assign/shared_ptr_neg.cc: Likewise.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/assign/\n+\tshared_ptr_neg.cc: Likewise.\n \n 2011-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "4fc14105cd3c1112cd5cc020a6bb7863b3e1abe6", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aa78e9eb7ade737abc19cbea1bcd690170b039/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aa78e9eb7ade737abc19cbea1bcd690170b039/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=76aa78e9eb7ade737abc19cbea1bcd690170b039", "patch": "@@ -184,28 +184,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  // A very basic implementation for now.  In general we have to wait for\n-  // the availability of the infrastructure described in N2983:  we should\n-  // try when either T has a move constructor which cannot throw or T is\n-  // CopyConstructible.\n-  // NB: This code doesn't properly belong here, we should find a more\n-  // suited place common to std::vector and std::deque.\n-  template<typename _Tp,\n-\t   bool = __has_trivial_copy(typename _Tp::value_type)>\n-    struct __shrink_to_fit\n-    { static void _S_do_it(_Tp&) { } };\n-\n   template<typename _Tp>\n-    struct __shrink_to_fit<_Tp, true>\n+    bool\n+    __shrink_to_fit(_Tp& __v)\n     {\n-      static void\n-      _S_do_it(_Tp& __v)\n-      {\n-\t__try\n-\t  { _Tp(__v).swap(__v); }\n-\t__catch(...) { }\n-      }\n-    };\n+      __try\n+\t{\n+\t  _Tp(__v).swap(__v);\n+\t  return true;\n+\t}\n+      __catch(...)\n+\t{ return false; }\n+    }\n \n   template<typename _Alloc, typename _Tp>\n     class __alloctr_rebind_helper"}, {"sha": "30e7b2d9675d43db8c884e53c04bf788a1cccfce", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aa78e9eb7ade737abc19cbea1bcd690170b039/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aa78e9eb7ade737abc19cbea1bcd690170b039/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=76aa78e9eb7ade737abc19cbea1bcd690170b039", "patch": "@@ -844,7 +844,7 @@ template<typename _Alloc>\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n     void\n     shrink_to_fit()\n-    { std::__shrink_to_fit<vector>::_S_do_it(*this); }\n+    { std::__shrink_to_fit(*this); }\n #endif\n \n     void"}, {"sha": "fab63f130c8d887d611ced6531b449a575ee2468", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aa78e9eb7ade737abc19cbea1bcd690170b039/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aa78e9eb7ade737abc19cbea1bcd690170b039/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=76aa78e9eb7ade737abc19cbea1bcd690170b039", "patch": "@@ -1196,7 +1196,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**  A non-binding request to reduce memory use.  */\n       void\n       shrink_to_fit()\n-      { std::__shrink_to_fit<deque>::_S_do_it(*this); }\n+      { std::__shrink_to_fit(*this); }\n #endif\n \n       /**"}, {"sha": "4f617861e8f3374b0174a4c5d28e3feef34531ba", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aa78e9eb7ade737abc19cbea1bcd690170b039/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aa78e9eb7ade737abc19cbea1bcd690170b039/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=76aa78e9eb7ade737abc19cbea1bcd690170b039", "patch": "@@ -646,7 +646,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**  A non-binding request to reduce capacity() to size().  */\n       void\n       shrink_to_fit()\n-      { std::__shrink_to_fit<vector>::_S_do_it(*this); }\n+      { std::__shrink_to_fit(*this); }\n #endif\n \n       /**"}]}