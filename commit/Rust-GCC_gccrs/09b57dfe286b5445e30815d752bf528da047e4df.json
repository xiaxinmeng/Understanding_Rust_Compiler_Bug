{"sha": "09b57dfe286b5445e30815d752bf528da047e4df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDliNTdkZmUyODZiNTQ0NWUzMDgxNWQ3NTJiZjUyOGRhMDQ3ZTRkZg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2017-09-06T10:49:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T10:49:05Z"}, "message": "sysdep.c (__gnat_has_cap_sys_nice): New function to determine whether the current process has the CAP_SYS_NICE...\n\n2017-09-06  Bob Duff  <duff@adacore.com>\n\n\t* sysdep.c (__gnat_has_cap_sys_nice): New function to determine\n\twhether the current process has the CAP_SYS_NICE capability.\n\t* s-taprop-linux.adb (Get_Ceiling_Support): Update this to allow\n\tceiling priorities if the current process has the CAP_SYS_NICE\n\tcapability.\n\nFrom-SVN: r251777", "tree": {"sha": "6d4aca5f0a54998aa02db1d4b6db9fac20fe075a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d4aca5f0a54998aa02db1d4b6db9fac20fe075a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09b57dfe286b5445e30815d752bf528da047e4df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b57dfe286b5445e30815d752bf528da047e4df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09b57dfe286b5445e30815d752bf528da047e4df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b57dfe286b5445e30815d752bf528da047e4df/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d8272552fe9cf00fdebeb04145e7332a9589b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8272552fe9cf00fdebeb04145e7332a9589b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8272552fe9cf00fdebeb04145e7332a9589b9a"}], "stats": {"total": 113, "additions": 100, "deletions": 13}, "files": [{"sha": "f914d23890113d249b8e2fa8711024ec6dd157ba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b57dfe286b5445e30815d752bf528da047e4df/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b57dfe286b5445e30815d752bf528da047e4df/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=09b57dfe286b5445e30815d752bf528da047e4df", "patch": "@@ -1,3 +1,11 @@\n+2017-09-06  Bob Duff  <duff@adacore.com>\n+\n+\t* sysdep.c (__gnat_has_cap_sys_nice): New function to determine\n+\twhether the current process has the CAP_SYS_NICE capability.\n+\t* s-taprop-linux.adb (Get_Ceiling_Support): Update this to allow\n+\tceiling priorities if the current process has the CAP_SYS_NICE\n+\tcapability.\n+\n 2017-09-06  Bob Duff  <duff@adacore.com>\n \n \t* a-comlin.ads, a-comlin.adb (Argument): Move the constraint"}, {"sha": "cc49205cf0a5b769957f4e1e2a1af85102765ca8", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b57dfe286b5445e30815d752bf528da047e4df/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b57dfe286b5445e30815d752bf528da047e4df/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=09b57dfe286b5445e30815d752bf528da047e4df", "patch": "@@ -165,31 +165,40 @@ package body System.Task_Primitives.Operations is\n    pragma Import\n      (C, GNAT_pthread_condattr_setup, \"__gnat_pthread_condattr_setup\");\n \n+   function GNAT_has_cap_sys_nice return C.int;\n+   pragma Import\n+     (C, GNAT_has_cap_sys_nice, \"__gnat_has_cap_sys_nice\");\n+   --  We do not have pragma Linker_Options (\"-lcap\"); here, because this\n+   --  library is not present on many Linux systems. 'libcap' is the Linux\n+   --  \"capabilities\" library, called by __gnat_has_cap_sys_nice.\n+\n    function Prio_To_Linux_Prio (Prio : Any_Priority) return C.int is\n      (C.int (Prio) + 1);\n    --  Convert Ada priority to Linux priority. Priorities are 1 .. 99 on\n    --  GNU/Linux, so we map 0 .. 98 to 1 .. 99.\n \n    function Get_Ceiling_Support return Boolean;\n    --  Get the value of the Ceiling_Support constant (see below).\n-   --  ???For now, we're returning True only if running as superuser,\n-   --  and ignore capabilities.\n+   --  Note well: If this function or related code is modified, it should be\n+   --  tested by hand, because automated testing doesn't exercise it.\n \n    function Get_Ceiling_Support return Boolean is\n       Ceiling_Support : Boolean := False;\n    begin\n-      if Locking_Policy = 'C' then\n-         declare\n-            function geteuid return Integer;\n-            pragma Import (C, geteuid, \"geteuid\");\n-            Superuser : constant Boolean := geteuid = 0;\n-         begin\n-            if Superuser then\n-               Ceiling_Support := True;\n-            end if;\n-         end;\n+      if Locking_Policy /= 'C' then\n+         return False;\n       end if;\n \n+      declare\n+         function geteuid return Integer;\n+         pragma Import (C, geteuid, \"geteuid\");\n+         Superuser : constant Boolean := geteuid = 0;\n+         Has_Cap : constant C.int := GNAT_has_cap_sys_nice;\n+         pragma Assert (Has_Cap in 0 | 1);\n+      begin\n+         Ceiling_Support := Superuser or else Has_Cap = 1;\n+      end;\n+\n       return Ceiling_Support;\n    end Get_Ceiling_Support;\n "}, {"sha": "64278fd8f38a3f8c3f0679379d614488112cd8a6", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b57dfe286b5445e30815d752bf528da047e4df/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b57dfe286b5445e30815d752bf528da047e4df/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=09b57dfe286b5445e30815d752bf528da047e4df", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *         Copyright (C) 1992-2016, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 1992-2017, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -919,6 +919,76 @@ __gnat_is_file_not_found_error (int errno_val) {\n    }\n }\n \n+#if defined (__linux__)\n+\n+/* HAVE_CAPABILITY is defined if sys/capability.h exists on the system where\n+   this is being compiled.\n+*/\n+\n+#if defined (HAVE_CAPABILITY)\n+#include <sys/capability.h>\n+\n+/* Note well: If this code is modified, it should be tested by hand,\n+   because automated testing doesn't exercise it.\n+*/\n+\n+/* __gnat_has_cap_sys_nice returns 1 if the current process has the\n+   CAP_SYS_NICE capability. This capability is necessary to use the\n+   Ceiling_Locking policy. Returns 0 otherwise. Note that this is\n+   defined only for Linux.\n+*/\n+\n+/* Define these as weak symbols, so if support for capabilities is not present,\n+   programs can still link. On Ubuntu, support for capabilities can be\n+   installed via \"sudo apt-get --assume-yes install libcap-dev\".\n+   In addition, the user must link with \"-lcap\", or else these\n+   symbols will be 0, and __gnat_has_cap_sys_nice will return 0.\n+*/\n+\n+static cap_t cap_get_proc_weak() __attribute__ ((weakref (\"cap_get_proc\")));\n+static int cap_get_flag_weak() __attribute__ ((weakref (\"cap_get_flag\")));\n+static int cap_free_weak() __attribute__ ((weakref (\"cap_free\")));\n+\n+int\n+__gnat_has_cap_sys_nice () {\n+  /* If the address of cap_get_proc_weak is 0, this means support for\n+     capabilities is not present, so we return 0. */\n+  if (&cap_get_proc_weak == 0)\n+    return 0;\n+\n+  cap_t caps = cap_get_proc_weak();\n+  cap_flag_value_t value;\n+\n+  if (caps == NULL)\n+    return 0;\n+\n+  if (cap_get_flag_weak(caps, CAP_SYS_NICE, CAP_EFFECTIVE, &value) == -1)\n+    return 0;\n+\n+  if (cap_free_weak(caps) == -1)\n+    return 0;\n+\n+  if (value == CAP_SET)\n+    return 1;\n+\n+  return 0;\n+}\n+\n+#else\n+\n+/* HAVE_CAPABILITY is not defined, so sys/capability.h does not exist, so\n+   simply indicate that the current process does not have the CAP_SYS_NICE\n+   capability.\n+*/\n+\n+int\n+__gnat_has_cap_sys_nice () {\n+  return 0;\n+}\n+\n+#endif\n+#endif\n+\n #ifdef __ANDROID__\n \n /* Provide extern symbols for sig* as needed by the tasking run-time, instead"}]}