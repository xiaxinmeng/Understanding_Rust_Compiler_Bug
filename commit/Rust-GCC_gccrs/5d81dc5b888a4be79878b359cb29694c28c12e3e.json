{"sha": "5d81dc5b888a4be79878b359cb29694c28c12e3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ4MWRjNWI4ODhhNGJlNzk4NzhiMzU5Y2IyOTY5NGMyOGMxMmUzZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-30T20:29:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-30T20:29:35Z"}, "message": "(extendtab, fixtab, fixtrunctab, floattab): Not static.\n\n(init_extends, init_fixtab, init_floattab): Deleted.\n(init_optabs): Move active stuff from above functions in.\nDelete filling of optabs.\nCall init_all_optabs.\n\nFrom-SVN: r3925", "tree": {"sha": "5e28920e991deaa78f1c46a68ef155bcc2f3bad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e28920e991deaa78f1c46a68ef155bcc2f3bad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d81dc5b888a4be79878b359cb29694c28c12e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d81dc5b888a4be79878b359cb29694c28c12e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d81dc5b888a4be79878b359cb29694c28c12e3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d81dc5b888a4be79878b359cb29694c28c12e3e/comments", "author": null, "committer": null, "parents": [{"sha": "27b3f754223a3258c75f44dad7a046fd362cb90b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b3f754223a3258c75f44dad7a046fd362cb90b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b3f754223a3258c75f44dad7a046fd362cb90b"}], "stats": {"total": 2167, "additions": 103, "deletions": 2064}, "files": [{"sha": "7c058566420e0401ee8cfceb33a68a95ded471cf", "filename": "gcc/optabs.c", "status": "modified", "additions": 103, "deletions": 2064, "changes": 2167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d81dc5b888a4be79878b359cb29694c28c12e3e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d81dc5b888a4be79878b359cb29694c28c12e3e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=5d81dc5b888a4be79878b359cb29694c28c12e3e", "patch": "@@ -82,6 +82,14 @@ optab tst_optab;\n \n optab strlen_optab;\n \n+/* Tables of patterns for extending one integer mode to another.  */\n+enum insn_code extendtab[MAX_MACHINE_MODE][MAX_MACHINE_MODE][2];\n+\n+/* Tables of patterns for converting between fixed and floating point. */\n+enum insn_code fixtab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n+enum insn_code fixtrunctab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n+enum insn_code floattab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n+\n /* SYMBOL_REF rtx's for the library functions that are called\n    implicitly and not via optabs.  */\n \n@@ -196,7 +204,6 @@ enum insn_code setcc_gen_code[NUM_RTX_CODE];\n \n static int add_equal_note\tPROTO((rtx, rtx, enum rtx_code, rtx, rtx));\n static void emit_float_lib_cmp\tPROTO((rtx, rtx, enum rtx_code));\n-static void init_extends\tPROTO((void));\n static enum insn_code can_fix_p\tPROTO((enum machine_mode, enum machine_mode,\n \t\t\t\t       int, int *));\n static enum insn_code can_float_p PROTO((enum machine_mode, enum machine_mode,\n@@ -2683,9 +2690,6 @@ gen_move_insn (x, y)\n   return seq;\n }\n \f\n-/* Tables of patterns for extending one integer mode to another.  */\n-static enum insn_code extendtab[MAX_MACHINE_MODE][MAX_MACHINE_MODE][2];\n-\n /* Return the insn code used to extend FROM_MODE to TO_MODE.\n    UNSIGNEDP specifies zero-extension instead of sign-extension.  If\n    no such operation exists, CODE_FOR_nothing will be returned.  */\n@@ -2709,111 +2713,14 @@ gen_extend_insn (x, y, mto, mfrom, unsignedp)\n {\n   return (GEN_FCN (extendtab[(int) mto][(int) mfrom][unsignedp]) (x, y));\n }\n-\n-static void\n-init_extends ()\n-{\n-  enum insn_code *p;\n-\n-  for (p = extendtab[0][0];\n-       p < extendtab[0][0] + sizeof extendtab / sizeof extendtab[0][0][0];\n-       p++)\n-    *p = CODE_FOR_nothing;\n-\n-#ifdef HAVE_extendditi2\n-  if (HAVE_extendditi2)\n-    extendtab[(int) TImode][(int) DImode][0] = CODE_FOR_extendditi2;\n-#endif\n-#ifdef HAVE_extendsiti2\n-  if (HAVE_extendsiti2)\n-    extendtab[(int) TImode][(int) SImode][0] = CODE_FOR_extendsiti2;\n-#endif\n-#ifdef HAVE_extendhiti2\n-  if (HAVE_extendhiti2)\n-    extendtab[(int) TImode][(int) HImode][0] = CODE_FOR_extendhiti2;\n-#endif\n-#ifdef HAVE_extendqiti2\n-  if (HAVE_extendqiti2)\n-    extendtab[(int) TImode][(int) QImode][0] = CODE_FOR_extendqiti2;\n-#endif\n-#ifdef HAVE_extendsidi2\n-  if (HAVE_extendsidi2)\n-    extendtab[(int) DImode][(int) SImode][0] = CODE_FOR_extendsidi2;\n-#endif\n-#ifdef HAVE_extendhidi2\n-  if (HAVE_extendhidi2)\n-    extendtab[(int) DImode][(int) HImode][0] = CODE_FOR_extendhidi2;\n-#endif\n-#ifdef HAVE_extendqidi2\n-  if (HAVE_extendqidi2)\n-    extendtab[(int) DImode][(int) QImode][0] = CODE_FOR_extendqidi2;\n-#endif\n-#ifdef HAVE_extendhisi2\n-  if (HAVE_extendhisi2)\n-    extendtab[(int) SImode][(int) HImode][0] = CODE_FOR_extendhisi2;\n-#endif\n-#ifdef HAVE_extendqisi2\n-  if (HAVE_extendqisi2)\n-    extendtab[(int) SImode][(int) QImode][0] = CODE_FOR_extendqisi2;\n-#endif\n-#ifdef HAVE_extendqihi2\n-  if (HAVE_extendqihi2)\n-    extendtab[(int) HImode][(int) QImode][0] = CODE_FOR_extendqihi2;\n-#endif\n-\n-#ifdef HAVE_zero_extendditi2\n-  if (HAVE_zero_extendsiti2)\n-    extendtab[(int) TImode][(int) DImode][1] = CODE_FOR_zero_extendditi2;\n-#endif\n-#ifdef HAVE_zero_extendsiti2\n-  if (HAVE_zero_extendsiti2)\n-    extendtab[(int) TImode][(int) SImode][1] = CODE_FOR_zero_extendsiti2;\n-#endif\n-#ifdef HAVE_zero_extendhiti2\n-  if (HAVE_zero_extendhiti2)\n-    extendtab[(int) TImode][(int) HImode][1] = CODE_FOR_zero_extendhiti2;\n-#endif\n-#ifdef HAVE_zero_extendqiti2\n-  if (HAVE_zero_extendqiti2)\n-    extendtab[(int) TImode][(int) QImode][1] = CODE_FOR_zero_extendqiti2;\n-#endif\n-#ifdef HAVE_zero_extendsidi2\n-  if (HAVE_zero_extendsidi2)\n-    extendtab[(int) DImode][(int) SImode][1] = CODE_FOR_zero_extendsidi2;\n-#endif\n-#ifdef HAVE_zero_extendhidi2\n-  if (HAVE_zero_extendhidi2)\n-    extendtab[(int) DImode][(int) HImode][1] = CODE_FOR_zero_extendhidi2;\n-#endif\n-#ifdef HAVE_zero_extendqidi2\n-  if (HAVE_zero_extendqidi2)\n-    extendtab[(int) DImode][(int) QImode][1] = CODE_FOR_zero_extendqidi2;\n-#endif\n-#ifdef HAVE_zero_extendhisi2\n-  if (HAVE_zero_extendhisi2)\n-    extendtab[(int) SImode][(int) HImode][1] = CODE_FOR_zero_extendhisi2;\n-#endif\n-#ifdef HAVE_zero_extendqisi2\n-  if (HAVE_zero_extendqisi2)\n-    extendtab[(int) SImode][(int) QImode][1] = CODE_FOR_zero_extendqisi2;\n-#endif\n-#ifdef HAVE_zero_extendqihi2\n-  if (HAVE_zero_extendqihi2)\n-    extendtab[(int) HImode][(int) QImode][1] = CODE_FOR_zero_extendqihi2;\n-#endif\n-}\n \f\n /* can_fix_p and can_float_p say whether the target machine\n    can directly convert a given fixed point type to\n    a given floating point type, or vice versa.\n    The returned value is the CODE_FOR_... value to use,\n-   or CODE_FOR_nothing if these modes cannot be directly converted.  */\n-\n-static enum insn_code fixtab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n-static enum insn_code fixtrunctab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n-static enum insn_code floattab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n+   or CODE_FOR_nothing if these modes cannot be directly converted.\n \n-/* *TRUNCP_PTR is set to 1 if it is necessary to output\n+   *TRUNCP_PTR is set to 1 if it is necessary to output\n    an explicit FTRUNC insn before the fix insn; otherwise 0.  */\n \n static enum insn_code\n@@ -2841,663 +2748,6 @@ can_float_p (fltmode, fixmode, unsignedp)\n {\n   return floattab[(int) fltmode][(int) fixmode][unsignedp];\n }\n-\n-void\n-init_fixtab ()\n-{\n-  enum insn_code *p;\n-  for (p = fixtab[0][0];\n-       p < fixtab[0][0] + sizeof fixtab / sizeof (fixtab[0][0][0]); \n-       p++)\n-    *p = CODE_FOR_nothing;\n-  for (p = fixtrunctab[0][0];\n-       p < fixtrunctab[0][0] + sizeof fixtrunctab / sizeof (fixtrunctab[0][0][0]); \n-       p++)\n-    *p = CODE_FOR_nothing;\n-\n-#ifdef HAVE_fixqfqi2\n-  if (HAVE_fixqfqi2)\n-    fixtab[(int) QFmode][(int) QImode][0] = CODE_FOR_fixqfqi2;\n-#endif\n-#ifdef HAVE_fixhfqi2\n-  if (HAVE_fixhfqi2)\n-    fixtab[(int) HFmode][(int) QImode][0] = CODE_FOR_fixhfqi2;\n-#endif\n-#ifdef HAVE_fixhfhi2\n-  if (HAVE_fixhfhi2)\n-    fixtab[(int) HFmode][(int) HImode][0] = CODE_FOR_fixhfhi2;\n-#endif\n-#ifdef HAVE_fixsfqi2\n-  if (HAVE_fixsfqi2)\n-    fixtab[(int) SFmode][(int) QImode][0] = CODE_FOR_fixsfqi2;\n-#endif\n-#ifdef HAVE_fixsfhi2\n-  if (HAVE_fixsfhi2)\n-    fixtab[(int) SFmode][(int) HImode][0] = CODE_FOR_fixsfhi2;\n-#endif\n-#ifdef HAVE_fixsfsi2\n-  if (HAVE_fixsfsi2)\n-    fixtab[(int) SFmode][(int) SImode][0] = CODE_FOR_fixsfsi2;\n-#endif\n-#ifdef HAVE_fixsfdi2\n-  if (HAVE_fixsfdi2)\n-    fixtab[(int) SFmode][(int) DImode][0] = CODE_FOR_fixsfdi2;\n-#endif\n-\n-#ifdef HAVE_fixdfqi2\n-  if (HAVE_fixdfqi2)\n-    fixtab[(int) DFmode][(int) QImode][0] = CODE_FOR_fixdfqi2;\n-#endif\n-#ifdef HAVE_fixdfhi2\n-  if (HAVE_fixdfhi2)\n-    fixtab[(int) DFmode][(int) HImode][0] = CODE_FOR_fixdfhi2;\n-#endif\n-#ifdef HAVE_fixdfsi2\n-  if (HAVE_fixdfsi2)\n-    fixtab[(int) DFmode][(int) SImode][0] = CODE_FOR_fixdfsi2;\n-#endif\n-#ifdef HAVE_fixdfdi2\n-  if (HAVE_fixdfdi2)\n-    fixtab[(int) DFmode][(int) DImode][0] = CODE_FOR_fixdfdi2;\n-#endif\n-#ifdef HAVE_fixdfti2\n-  if (HAVE_fixdfti2)\n-    fixtab[(int) DFmode][(int) TImode][0] = CODE_FOR_fixdfti2;\n-#endif\n-\n-#ifdef HAVE_fixxfqi2\n-  if (HAVE_fixxfqi2)\n-    fixtab[(int) XFmode][(int) QImode][0] = CODE_FOR_fixxfqi2;\n-#endif\n-#ifdef HAVE_fixxfhi2\n-  if (HAVE_fixxfhi2)\n-    fixtab[(int) XFmode][(int) HImode][0] = CODE_FOR_fixxfhi2;\n-#endif\n-#ifdef HAVE_fixxfsi2\n-  if (HAVE_fixxfsi2)\n-    fixtab[(int) XFmode][(int) SImode][0] = CODE_FOR_fixxfsi2;\n-#endif\n-#ifdef HAVE_fixxfdi2\n-  if (HAVE_fixxfdi2)\n-    fixtab[(int) XFmode][(int) DImode][0] = CODE_FOR_fixxfdi2;\n-#endif\n-#ifdef HAVE_fixxfti2\n-  if (HAVE_fixxfti2)\n-    fixtab[(int) XFmode][(int) TImode][0] = CODE_FOR_fixxfti2;\n-#endif\n-\n-#ifdef HAVE_fixtfqi2\n-  if (HAVE_fixtfqi2)\n-    fixtab[(int) TFmode][(int) QImode][0] = CODE_FOR_fixtfqi2;\n-#endif\n-#ifdef HAVE_fixtfhi2\n-  if (HAVE_fixtfhi2)\n-    fixtab[(int) TFmode][(int) HImode][0] = CODE_FOR_fixtfhi2;\n-#endif\n-#ifdef HAVE_fixtfsi2\n-  if (HAVE_fixtfsi2)\n-    fixtab[(int) TFmode][(int) SImode][0] = CODE_FOR_fixtfsi2;\n-#endif\n-#ifdef HAVE_fixtfdi2\n-  if (HAVE_fixtfdi2)\n-    fixtab[(int) TFmode][(int) DImode][0] = CODE_FOR_fixtfdi2;\n-#endif\n-#ifdef HAVE_fixtfti2\n-  if (HAVE_fixtfti2)\n-    fixtab[(int) TFmode][(int) TImode][0] = CODE_FOR_fixtfti2;\n-#endif\n-\n-#ifdef HAVE_fixunsqfqi2\n-  if (HAVE_fixunsqfqi2)\n-    fixtab[(int) QFmode][(int) QImode][1] = CODE_FOR_fixunsqfqi2;\n-#endif\n-#ifdef HAVE_fixunshfqi2\n-  if (HAVE_fixunshfqi2)\n-    fixtab[(int) HFmode][(int) QImode][1] = CODE_FOR_fixunshfqi2;\n-#endif\n-#ifdef HAVE_fixunshfhi2\n-  if (HAVE_fixunshfhi2)\n-    fixtab[(int) HFmode][(int) HImode][1] = CODE_FOR_fixunshfhi2;\n-#endif\n-\n-#ifdef HAVE_fixunssfqi2\n-  if (HAVE_fixunssfqi2)\n-    fixtab[(int) SFmode][(int) QImode][1] = CODE_FOR_fixunssfqi2;\n-#endif\n-#ifdef HAVE_fixunssfhi2\n-  if (HAVE_fixunssfhi2)\n-    fixtab[(int) SFmode][(int) HImode][1] = CODE_FOR_fixunssfhi2;\n-#endif\n-#ifdef HAVE_fixunssfsi2\n-  if (HAVE_fixunssfsi2)\n-    fixtab[(int) SFmode][(int) SImode][1] = CODE_FOR_fixunssfsi2;\n-#endif\n-#ifdef HAVE_fixunssfdi2\n-  if (HAVE_fixunssfdi2)\n-    fixtab[(int) SFmode][(int) DImode][1] = CODE_FOR_fixunssfdi2;\n-#endif\n-\n-#ifdef HAVE_fixunsdfqi2\n-  if (HAVE_fixunsdfqi2)\n-    fixtab[(int) DFmode][(int) QImode][1] = CODE_FOR_fixunsdfqi2;\n-#endif\n-#ifdef HAVE_fixunsdfhi2\n-  if (HAVE_fixunsdfhi2)\n-    fixtab[(int) DFmode][(int) HImode][1] = CODE_FOR_fixunsdfhi2;\n-#endif\n-#ifdef HAVE_fixunsdfsi2\n-  if (HAVE_fixunsdfsi2)\n-    fixtab[(int) DFmode][(int) SImode][1] = CODE_FOR_fixunsdfsi2;\n-#endif\n-#ifdef HAVE_fixunsdfdi2\n-  if (HAVE_fixunsdfdi2)\n-    fixtab[(int) DFmode][(int) DImode][1] = CODE_FOR_fixunsdfdi2;\n-#endif\n-#ifdef HAVE_fixunsdfti2\n-  if (HAVE_fixunsdfti2)\n-    fixtab[(int) DFmode][(int) TImode][1] = CODE_FOR_fixunsdfti2;\n-#endif\n-\n-#ifdef HAVE_fixunsxfqi2\n-  if (HAVE_fixunsxfqi2)\n-    fixtab[(int) XFmode][(int) QImode][1] = CODE_FOR_fixunsxfqi2;\n-#endif\n-#ifdef HAVE_fixunsxfhi2\n-  if (HAVE_fixunsxfhi2)\n-    fixtab[(int) XFmode][(int) HImode][1] = CODE_FOR_fixunsxfhi2;\n-#endif\n-#ifdef HAVE_fixunsxfsi2\n-  if (HAVE_fixunsxfsi2)\n-    fixtab[(int) XFmode][(int) SImode][1] = CODE_FOR_fixunsxfsi2;\n-#endif\n-#ifdef HAVE_fixunsxfdi2\n-  if (HAVE_fixunsxfdi2)\n-    fixtab[(int) XFmode][(int) DImode][1] = CODE_FOR_fixunsxfdi2;\n-#endif\n-#ifdef HAVE_fixunsxfti2\n-  if (HAVE_fixunsxfti2)\n-    fixtab[(int) XFmode][(int) TImode][1] = CODE_FOR_fixunsxfti2;\n-#endif\n-\n-#ifdef HAVE_fixunstfqi2\n-  if (HAVE_fixunstfqi2)\n-    fixtab[(int) TFmode][(int) QImode][1] = CODE_FOR_fixunstfqi2;\n-#endif\n-#ifdef HAVE_fixunstfhi2\n-  if (HAVE_fixunstfhi2)\n-    fixtab[(int) TFmode][(int) HImode][1] = CODE_FOR_fixunstfhi2;\n-#endif\n-#ifdef HAVE_fixunstfsi2\n-  if (HAVE_fixunstfsi2)\n-    fixtab[(int) TFmode][(int) SImode][1] = CODE_FOR_fixunstfsi2;\n-#endif\n-#ifdef HAVE_fixunstfdi2\n-  if (HAVE_fixunstfdi2)\n-    fixtab[(int) TFmode][(int) DImode][1] = CODE_FOR_fixunstfdi2;\n-#endif\n-#ifdef HAVE_fixunstfti2\n-  if (HAVE_fixunstfti2)\n-    fixtab[(int) TFmode][(int) TImode][1] = CODE_FOR_fixunstfti2;\n-#endif\n-\n-#ifdef HAVE_fix_truncqfqi2\n-  if (HAVE_fix_truncqfqi2)\n-    fixtrunctab[(int) QFmode][(int) QImode][0] = CODE_FOR_fix_truncqfqi2;\n-#endif\n-#ifdef HAVE_fix_trunchfqi2\n-  if (HAVE_fix_trunchfqi2)\n-    fixtrunctab[(int) HFmode][(int) QImode][0] = CODE_FOR_fix_trunchfqi2;\n-#endif\n-#ifdef HAVE_fix_trunchfhi2\n-  if (HAVE_fix_trunchfhi2)\n-    fixtrunctab[(int) HFmode][(int) HImode][0] = CODE_FOR_fix_trunchfhi2;\n-#endif\n-#ifdef HAVE_fix_truncsfqi2\n-  if (HAVE_fix_truncsfqi2)\n-    fixtrunctab[(int) SFmode][(int) QImode][0] = CODE_FOR_fix_truncsfqi2;\n-#endif\n-#ifdef HAVE_fix_truncsfhi2\n-  if (HAVE_fix_truncsfhi2)\n-    fixtrunctab[(int) SFmode][(int) HImode][0] = CODE_FOR_fix_truncsfhi2;\n-#endif\n-#ifdef HAVE_fix_truncsfsi2\n-  if (HAVE_fix_truncsfsi2)\n-    fixtrunctab[(int) SFmode][(int) SImode][0] = CODE_FOR_fix_truncsfsi2;\n-#endif\n-#ifdef HAVE_fix_truncsfdi2\n-  if (HAVE_fix_truncsfdi2)\n-    fixtrunctab[(int) SFmode][(int) DImode][0] = CODE_FOR_fix_truncsfdi2;\n-#endif\n-\n-#ifdef HAVE_fix_truncdfqi2\n-  if (HAVE_fix_truncdfqi2)\n-    fixtrunctab[(int) DFmode][(int) QImode][0] = CODE_FOR_fix_truncdfqi2;\n-#endif\n-#ifdef HAVE_fix_truncdfhi2\n-  if (HAVE_fix_truncdfhi2)\n-    fixtrunctab[(int) DFmode][(int) HImode][0] = CODE_FOR_fix_truncdfhi2;\n-#endif\n-#ifdef HAVE_fix_truncdfsi2\n-  if (HAVE_fix_truncdfsi2)\n-    fixtrunctab[(int) DFmode][(int) SImode][0] = CODE_FOR_fix_truncdfsi2;\n-#endif\n-#ifdef HAVE_fix_truncdfdi2\n-  if (HAVE_fix_truncdfdi2)\n-    fixtrunctab[(int) DFmode][(int) DImode][0] = CODE_FOR_fix_truncdfdi2;\n-#endif\n-#ifdef HAVE_fix_truncdfti2\n-  if (HAVE_fix_truncdfti2)\n-    fixtrunctab[(int) DFmode][(int) TImode][0] = CODE_FOR_fix_truncdfti2;\n-#endif\n-\n-#ifdef HAVE_fix_truncxfqi2\n-  if (HAVE_fix_truncxfqi2)\n-    fixtrunctab[(int) XFmode][(int) QImode][0] = CODE_FOR_fix_truncxfqi2;\n-#endif\n-#ifdef HAVE_fix_truncxfhi2\n-  if (HAVE_fix_truncxfhi2)\n-    fixtrunctab[(int) XFmode][(int) HImode][0] = CODE_FOR_fix_truncxfhi2;\n-#endif\n-#ifdef HAVE_fix_truncxfsi2\n-  if (HAVE_fix_truncxfsi2)\n-    fixtrunctab[(int) XFmode][(int) SImode][0] = CODE_FOR_fix_truncxfsi2;\n-#endif\n-#ifdef HAVE_fix_truncxfdi2\n-  if (HAVE_fix_truncxfdi2)\n-    fixtrunctab[(int) XFmode][(int) DImode][0] = CODE_FOR_fix_truncxfdi2;\n-#endif\n-#ifdef HAVE_fix_truncxfti2\n-  if (HAVE_fix_truncxfti2)\n-    fixtrunctab[(int) XFmode][(int) TImode][0] = CODE_FOR_fix_truncxfti2;\n-#endif\n-\n-#ifdef HAVE_fix_trunctfqi2\n-  if (HAVE_fix_trunctfqi2)\n-    fixtrunctab[(int) TFmode][(int) QImode][0] = CODE_FOR_fix_trunctfqi2;\n-#endif\n-#ifdef HAVE_fix_trunctfhi2\n-  if (HAVE_fix_trunctfhi2)\n-    fixtrunctab[(int) TFmode][(int) HImode][0] = CODE_FOR_fix_trunctfhi2;\n-#endif\n-#ifdef HAVE_fix_trunctfsi2\n-  if (HAVE_fix_trunctfsi2)\n-    fixtrunctab[(int) TFmode][(int) SImode][0] = CODE_FOR_fix_trunctfsi2;\n-#endif\n-#ifdef HAVE_fix_trunctfdi2\n-  if (HAVE_fix_trunctfdi2)\n-    fixtrunctab[(int) TFmode][(int) DImode][0] = CODE_FOR_fix_trunctfdi2;\n-#endif\n-#ifdef HAVE_fix_trunctfti2\n-  if (HAVE_fix_trunctfti2)\n-    fixtrunctab[(int) TFmode][(int) TImode][0] = CODE_FOR_fix_trunctfti2;\n-#endif\n-\n-#ifdef HAVE_fixuns_truncqfqi2\n-  if (HAVE_fixuns_truncqfqi2)\n-    fixtrunctab[(int) QFmode][(int) QImode][1] = CODE_FOR_fixuns_truncqfqi2;\n-#endif\n-#ifdef HAVE_fixuns_trunchfqi2\n-  if (HAVE_fixuns_trunchfqi2)\n-    fixtrunctab[(int) HFmode][(int) QImode][1] = CODE_FOR_fixuns_trunchfqi2;\n-#endif\n-#ifdef HAVE_fixuns_trunchfhi2\n-  if (HAVE_fixuns_trunchfhi2)\n-    fixtrunctab[(int) HFmode][(int) HImode][1] = CODE_FOR_fixuns_trunchfhi2;\n-#endif\n-#ifdef HAVE_fixuns_truncsfqi2\n-  if (HAVE_fixuns_truncsfqi2)\n-    fixtrunctab[(int) SFmode][(int) QImode][1] = CODE_FOR_fixuns_truncsfqi2;\n-#endif\n-#ifdef HAVE_fixuns_truncsfhi2\n-  if (HAVE_fixuns_truncsfhi2)\n-    fixtrunctab[(int) SFmode][(int) HImode][1] = CODE_FOR_fixuns_truncsfhi2;\n-#endif\n-#ifdef HAVE_fixuns_truncsfsi2\n-  if (HAVE_fixuns_truncsfsi2)\n-    fixtrunctab[(int) SFmode][(int) SImode][1] = CODE_FOR_fixuns_truncsfsi2;\n-#endif\n-#ifdef HAVE_fixuns_truncsfdi2\n-  if (HAVE_fixuns_truncsfdi2)\n-    fixtrunctab[(int) SFmode][(int) DImode][1] = CODE_FOR_fixuns_truncsfdi2;\n-#endif\n-\n-#ifdef HAVE_fixuns_truncdfqi2\n-  if (HAVE_fixuns_truncdfqi2)\n-    fixtrunctab[(int) DFmode][(int) QImode][1] = CODE_FOR_fixuns_truncdfqi2;\n-#endif\n-#ifdef HAVE_fixuns_truncdfhi2\n-  if (HAVE_fixuns_truncdfhi2)\n-    fixtrunctab[(int) DFmode][(int) HImode][1] = CODE_FOR_fixuns_truncdfhi2;\n-#endif\n-#ifdef HAVE_fixuns_truncdfsi2\n-  if (HAVE_fixuns_truncdfsi2)\n-    fixtrunctab[(int) DFmode][(int) SImode][1] = CODE_FOR_fixuns_truncdfsi2;\n-#endif\n-#ifdef HAVE_fixuns_truncdfdi2\n-  if (HAVE_fixuns_truncdfdi2)\n-    fixtrunctab[(int) DFmode][(int) DImode][1] = CODE_FOR_fixuns_truncdfdi2;\n-#endif\n-#ifdef HAVE_fixuns_truncdfti2\n-  if (HAVE_fixuns_truncdfti2)\n-    fixtrunctab[(int) DFmode][(int) TImode][1] = CODE_FOR_fixuns_truncdfti2;\n-#endif\n-\n-#ifdef HAVE_fixuns_truncxfqi2\n-  if (HAVE_fixuns_truncxfqi2)\n-    fixtrunctab[(int) XFmode][(int) QImode][1] = CODE_FOR_fixuns_truncxfqi2;\n-#endif\n-#ifdef HAVE_fixuns_truncxfhi2\n-  if (HAVE_fixuns_truncxfhi2)\n-    fixtrunctab[(int) XFmode][(int) HImode][1] = CODE_FOR_fixuns_truncxfhi2;\n-#endif\n-#ifdef HAVE_fixuns_truncxfsi2\n-  if (HAVE_fixuns_truncxfsi2)\n-    fixtrunctab[(int) XFmode][(int) SImode][1] = CODE_FOR_fixuns_truncxfsi2;\n-#endif\n-#ifdef HAVE_fixuns_truncxfdi2\n-  if (HAVE_fixuns_truncxfdi2)\n-    fixtrunctab[(int) XFmode][(int) DImode][1] = CODE_FOR_fixuns_truncxfdi2;\n-#endif\n-#ifdef HAVE_fixuns_truncxfti2\n-  if (HAVE_fixuns_truncxfti2)\n-    fixtrunctab[(int) XFmode][(int) TImode][1] = CODE_FOR_fixuns_truncxfti2;\n-#endif\n-\n-#ifdef HAVE_fixuns_trunctfqi2\n-  if (HAVE_fixuns_trunctfqi2)\n-    fixtrunctab[(int) TFmode][(int) QImode][1] = CODE_FOR_fixuns_trunctfqi2;\n-#endif\n-#ifdef HAVE_fixuns_trunctfhi2\n-  if (HAVE_fixuns_trunctfhi2)\n-    fixtrunctab[(int) TFmode][(int) HImode][1] = CODE_FOR_fixuns_trunctfhi2;\n-#endif\n-#ifdef HAVE_fixuns_trunctfsi2\n-  if (HAVE_fixuns_trunctfsi2)\n-    fixtrunctab[(int) TFmode][(int) SImode][1] = CODE_FOR_fixuns_trunctfsi2;\n-#endif\n-#ifdef HAVE_fixuns_trunctfdi2\n-  if (HAVE_fixuns_trunctfdi2)\n-    fixtrunctab[(int) TFmode][(int) DImode][1] = CODE_FOR_fixuns_trunctfdi2;\n-#endif\n-#ifdef HAVE_fixuns_trunctfti2\n-  if (HAVE_fixuns_trunctfti2)\n-    fixtrunctab[(int) TFmode][(int) TImode][1] = CODE_FOR_fixuns_trunctfti2;\n-#endif\n-\n-#ifdef FIXUNS_TRUNC_LIKE_FIX_TRUNC\n-  /* This flag says the same insns that convert to a signed fixnum\n-     also convert validly to an unsigned one.  */\n-  {\n-    int i;\n-    int j;\n-    for (i = 0; i < NUM_MACHINE_MODES; i++)\n-      for (j = 0; j < NUM_MACHINE_MODES; j++)\n-\tfixtrunctab[i][j][1] = fixtrunctab[i][j][0];\n-  }\n-#endif\n-}\n-\n-void\n-init_floattab ()\n-{\n-  enum insn_code *p;\n-  for (p = floattab[0][0];\n-       p < floattab[0][0] + sizeof floattab / sizeof (floattab[0][0][0]); \n-       p++)\n-    *p = CODE_FOR_nothing;\n-\n-#ifdef HAVE_floatqiqf2\n-  if (HAVE_floatqiqf2)\n-    floattab[(int) QFmode][(int) QImode][0] = CODE_FOR_floatqiqf2;\n-#endif\n-#ifdef HAVE_floathiqf2\n-  if (HAVE_floathiqf2)\n-    floattab[(int) QFmode][(int) HImode][0] = CODE_FOR_floathiqf2;\n-#endif\n-#ifdef HAVE_floatsiqf2\n-  if (HAVE_floatsiqf2)\n-    floattab[(int) QFmode][(int) SImode][0] = CODE_FOR_floatsiqf2;\n-#endif\n-#ifdef HAVE_floatdiqf2\n-  if (HAVE_floatdiqf2)\n-    floattab[(int) QFmode][(int) DImode][0] = CODE_FOR_floatdiqf2;\n-#endif\n-#ifdef HAVE_floattiqf2\n-  if (HAVE_floattiqf2)\n-    floattab[(int) QFmode][(int) TImode][0] = CODE_FOR_floattiqf2;\n-#endif\n-\n-#ifdef HAVE_floatqihf2\n-  if (HAVE_floatqihf2)\n-    floattab[(int) HFmode][(int) QImode][0] = CODE_FOR_floatqihf2;\n-#endif\n-#ifdef HAVE_floathihf2\n-  if (HAVE_floathihf2)\n-    floattab[(int) HFmode][(int) HImode][0] = CODE_FOR_floathihf2;\n-#endif\n-#ifdef HAVE_floatsihf2\n-  if (HAVE_floatsihf2)\n-    floattab[(int) HFmode][(int) SImode][0] = CODE_FOR_floatsihf2;\n-#endif\n-#ifdef HAVE_floatdihf2\n-  if (HAVE_floatdihf2)\n-    floattab[(int) HFmode][(int) DImode][0] = CODE_FOR_floatdihf2;\n-#endif\n-#ifdef HAVE_floattihf2\n-  if (HAVE_floattihf2)\n-    floattab[(int) HFmode][(int) TImode][0] = CODE_FOR_floattihf2;\n-#endif\n-\n-#ifdef HAVE_floatqisf2\n-  if (HAVE_floatqisf2)\n-    floattab[(int) SFmode][(int) QImode][0] = CODE_FOR_floatqisf2;\n-#endif\n-#ifdef HAVE_floathisf2\n-  if (HAVE_floathisf2)\n-    floattab[(int) SFmode][(int) HImode][0] = CODE_FOR_floathisf2;\n-#endif\n-#ifdef HAVE_floatsisf2\n-  if (HAVE_floatsisf2)\n-    floattab[(int) SFmode][(int) SImode][0] = CODE_FOR_floatsisf2;\n-#endif\n-#ifdef HAVE_floatdisf2\n-  if (HAVE_floatdisf2)\n-    floattab[(int) SFmode][(int) DImode][0] = CODE_FOR_floatdisf2;\n-#endif\n-#ifdef HAVE_floattisf2\n-  if (HAVE_floattisf2)\n-    floattab[(int) SFmode][(int) TImode][0] = CODE_FOR_floattisf2;\n-#endif\n-\n-#ifdef HAVE_floatqidf2\n-  if (HAVE_floatqidf2)\n-    floattab[(int) DFmode][(int) QImode][0] = CODE_FOR_floatqidf2;\n-#endif\n-#ifdef HAVE_floathidf2\n-  if (HAVE_floathidf2)\n-    floattab[(int) DFmode][(int) HImode][0] = CODE_FOR_floathidf2;\n-#endif\n-#ifdef HAVE_floatsidf2\n-  if (HAVE_floatsidf2)\n-    floattab[(int) DFmode][(int) SImode][0] = CODE_FOR_floatsidf2;\n-#endif\n-#ifdef HAVE_floatdidf2\n-  if (HAVE_floatdidf2)\n-    floattab[(int) DFmode][(int) DImode][0] = CODE_FOR_floatdidf2;\n-#endif\n-#ifdef HAVE_floattidf2\n-  if (HAVE_floattidf2)\n-    floattab[(int) DFmode][(int) TImode][0] = CODE_FOR_floattidf2;\n-#endif\n-\n-#ifdef HAVE_floatqixf2\n-  if (HAVE_floatqixf2)\n-    floattab[(int) XFmode][(int) QImode][0] = CODE_FOR_floatqixf2;\n-#endif\n-#ifdef HAVE_floathixf2\n-  if (HAVE_floathixf2)\n-    floattab[(int) XFmode][(int) HImode][0] = CODE_FOR_floathixf2;\n-#endif\n-#ifdef HAVE_floatsixf2\n-  if (HAVE_floatsixf2)\n-    floattab[(int) XFmode][(int) SImode][0] = CODE_FOR_floatsixf2;\n-#endif\n-#ifdef HAVE_floatdixf2\n-  if (HAVE_floatdixf2)\n-    floattab[(int) XFmode][(int) DImode][0] = CODE_FOR_floatdixf2;\n-#endif\n-#ifdef HAVE_floattixf2\n-  if (HAVE_floattixf2)\n-    floattab[(int) XFmode][(int) TImode][0] = CODE_FOR_floattixf2;\n-#endif\n-\n-#ifdef HAVE_floatqitf2\n-  if (HAVE_floatqitf2)\n-    floattab[(int) TFmode][(int) QImode][0] = CODE_FOR_floatqitf2;\n-#endif\n-#ifdef HAVE_floathitf2\n-  if (HAVE_floathitf2)\n-    floattab[(int) TFmode][(int) HImode][0] = CODE_FOR_floathitf2;\n-#endif\n-#ifdef HAVE_floatsitf2\n-  if (HAVE_floatsitf2)\n-    floattab[(int) TFmode][(int) SImode][0] = CODE_FOR_floatsitf2;\n-#endif\n-#ifdef HAVE_floatditf2\n-  if (HAVE_floatditf2)\n-    floattab[(int) TFmode][(int) DImode][0] = CODE_FOR_floatditf2;\n-#endif\n-#ifdef HAVE_floattitf2\n-  if (HAVE_floattitf2)\n-    floattab[(int) TFmode][(int) TImode][0] = CODE_FOR_floattitf2;\n-#endif\n-\n-#ifdef HAVE_floatunsqiqf2\n-  if (HAVE_floatunsqiqf2)\n-    floattab[(int) QFmode][(int) QImode][1] = CODE_FOR_floatunsqiqf2;\n-#endif\n-#ifdef HAVE_floatunshiqf2\n-  if (HAVE_floatunshiqf2)\n-    floattab[(int) QFmode][(int) HImode][1] = CODE_FOR_floatunshiqf2;\n-#endif\n-#ifdef HAVE_floatunssiqf2\n-  if (HAVE_floatunsqsiqf2)\n-    floattab[(int) QFmode][(int) SImode][1] = CODE_FOR_floatunssiqf2;\n-#endif\n-#ifdef HAVE_floatunsdiqf2\n-  if (HAVE_floatunsdiqf2)\n-    floattab[(int) QFmode][(int) DImode][1] = CODE_FOR_floatunsdiqf2;\n-#endif\n-#ifdef HAVE_floatunstiqf2\n-  if (HAVE_floatunstiqf2)\n-    floattab[(int) QFmode][(int) TImode][1] = CODE_FOR_floatunstiqf2;\n-#endif\n-\n-#ifdef HAVE_floatunsqihf2\n-  if (HAVE_floatunsqihf2)\n-    floattab[(int) HFmode][(int) QImode][1] = CODE_FOR_floatunsqihf2;\n-#endif\n-#ifdef HAVE_floatunshihf2\n-  if (HAVE_floatunshihf2)\n-    floattab[(int) HFmode][(int) HImode][1] = CODE_FOR_floatunshihf2;\n-#endif\n-#ifdef HAVE_floatunssihf2\n-  if (HAVE_floatunssihf2)\n-    floattab[(int) HFmode][(int) SImode][1] = CODE_FOR_floatunssihf2;\n-#endif\n-#ifdef HAVE_floatunsdihf2\n-  if (HAVE_floatunsdihf2)\n-    floattab[(int) HFmode][(int) DImode][1] = CODE_FOR_floatunsdihf2;\n-#endif\n-#ifdef HAVE_floatunstihf2\n-  if (HAVE_floatunstihf2)\n-    floattab[(int) HFmode][(int) TImode][1] = CODE_FOR_floatunstihf2;\n-#endif\n-\n-#ifdef HAVE_floatqunsqisf2\n-  if (HAVE_floatunsqisf2)\n-    floattab[(int) SFmode][(int) QImode][1] = CODE_FOR_floatunsqisf2;\n-#endif\n-#ifdef HAVE_floatunshisf2\n-  if (HAVE_floatunshisf2)\n-    floattab[(int) SFmode][(int) HImode][1] = CODE_FOR_floatunshisf2;\n-#endif\n-#ifdef HAVE_floatunssisf2\n-  if (HAVE_floatunssisf2)\n-    floattab[(int) SFmode][(int) SImode][1] = CODE_FOR_floatunssisf2;\n-#endif\n-#ifdef HAVE_floatunsdisf2\n-  if (HAVE_floatunsdisf2)\n-    floattab[(int) SFmode][(int) DImode][1] = CODE_FOR_floatunsdisf2;\n-#endif\n-#ifdef HAVE_floatunstisf2\n-  if (HAVE_floatunstisf2)\n-    floattab[(int) SFmode][(int) TImode][1] = CODE_FOR_floatunstisf2;\n-#endif\n-\n-#ifdef HAVE_floatunsqidf2\n-  if (HAVE_floatunsqidf2)\n-    floattab[(int) DFmode][(int) QImode][1] = CODE_FOR_floatunsqidf2;\n-#endif\n-#ifdef HAVE_floatunshidf2\n-  if (HAVE_floatunshidf2)\n-    floattab[(int) DFmode][(int) HImode][1] = CODE_FOR_floatunshidf2;\n-#endif\n-#ifdef HAVE_floatunssidf2\n-  if (HAVE_floatunssidf2)\n-    floattab[(int) DFmode][(int) SImode][1] = CODE_FOR_floatunssidf2;\n-#endif\n-#ifdef HAVE_floatunsdidf2\n-  if (HAVE_floatunsdidf2)\n-    floattab[(int) DFmode][(int) DImode][1] = CODE_FOR_floatunsdidf2;\n-#endif\n-#ifdef HAVE_floatunstidf2\n-  if (HAVE_floatunstidf2)\n-    floattab[(int) DFmode][(int) TImode][1] = CODE_FOR_floatunstidf2;\n-#endif\n-\n-#ifdef HAVE_floatunsqixf2\n-  if (HAVE_floatunsqixf2)\n-    floattab[(int) XFmode][(int) QImode][1] = CODE_FOR_floatunsqixf2;\n-#endif\n-#ifdef HAVE_floatunshixf2\n-  if (HAVE_floatunshixf2)\n-    floattab[(int) XFmode][(int) HImode][1] = CODE_FOR_floatunshixf2;\n-#endif\n-#ifdef HAVE_floatunssixf2\n-  if (HAVE_floatunssixf2)\n-    floattab[(int) XFmode][(int) SImode][1] = CODE_FOR_floatunssixf2;\n-#endif\n-#ifdef HAVE_floatunsdixf2\n-  if (HAVE_floatunsdixf2)\n-    floattab[(int) XFmode][(int) DImode][1] = CODE_FOR_floatunsdixf2;\n-#endif\n-#ifdef HAVE_floatunstixf2\n-  if (HAVE_floatunstixf2)\n-    floattab[(int) XFmode][(int) TImode][1] = CODE_FOR_floatunstixf2;\n-#endif\n-\n-#ifdef HAVE_floatunsqitf2\n-  if (HAVE_floatunsqitf2)\n-    floattab[(int) TFmode][(int) QImode][1] = CODE_FOR_floatunsqitf2;\n-#endif\n-#ifdef HAVE_floatunshitf2\n-  if (HAVE_floatunshitf2)\n-    floattab[(int) TFmode][(int) HImode][1] = CODE_FOR_floatunshitf2;\n-#endif\n-#ifdef HAVE_floatunssitf2\n-  if (HAVE_floatunssitf2)\n-    floattab[(int) TFmode][(int) SImode][1] = CODE_FOR_floatunssitf2;\n-#endif\n-#ifdef HAVE_floatunsditf2\n-  if (HAVE_floatunsditf2)\n-    floattab[(int) TFmode][(int) DImode][1] = CODE_FOR_floatunsditf2;\n-#endif\n-#ifdef HAVE_floatunstitf2\n-  if (HAVE_floatunstitf2)\n-    floattab[(int) TFmode][(int) TImode][1] = CODE_FOR_floatunstitf2;\n-#endif\n-}\n \f\n /* Generate code to convert FROM to floating point\n    and store in TO.  FROM must be fixed point and not VOIDmode.\n@@ -4032,24 +3282,46 @@ init_complex_libfuncs (optable, opname, suffix)\n void\n init_optabs ()\n {\n-  int i;\n+  int i, j;\n+  enum insn_code *p;\n \n-  init_fixtab ();\n-  init_floattab ();\n-  init_extends ();\n+  /* Start by initializing all tables to contain CODE_FOR_nothing.  */\n \n-  add_optab = init_optab (PLUS);\n-  sub_optab = init_optab (MINUS);\n-  smul_optab = init_optab (MULT);\n-  smul_widen_optab = init_optab (UNKNOWN);\n-  umul_widen_optab = init_optab (UNKNOWN);\n-  sdiv_optab = init_optab (DIV);\n-  sdivmod_optab = init_optab (UNKNOWN);\n-  udiv_optab = init_optab (UDIV);\n-  udivmod_optab = init_optab (UNKNOWN);\n-  smod_optab = init_optab (MOD);\n-  umod_optab = init_optab (UMOD);\n-  flodiv_optab = init_optab (DIV);\n+  for (p = fixtab[0][0];\n+       p < fixtab[0][0] + sizeof fixtab / sizeof (fixtab[0][0][0]); \n+       p++)\n+    *p = CODE_FOR_nothing;\n+\n+  for (p = fixtrunctab[0][0];\n+       p < fixtrunctab[0][0] + sizeof fixtrunctab / sizeof (fixtrunctab[0][0][0]); \n+       p++)\n+    *p = CODE_FOR_nothing;\n+\n+  for (p = floattab[0][0];\n+       p < floattab[0][0] + sizeof floattab / sizeof (floattab[0][0][0]); \n+       p++)\n+    *p = CODE_FOR_nothing;\n+\n+  for (p = extendtab[0][0];\n+       p < extendtab[0][0] + sizeof extendtab / sizeof extendtab[0][0][0];\n+       p++)\n+    *p = CODE_FOR_nothing;\n+\n+  for (i = 0; i < NUM_RTX_CODE; i++)\n+    setcc_gen_code[i] = CODE_FOR_nothing;\n+\n+  add_optab = init_optab (PLUS);\n+  sub_optab = init_optab (MINUS);\n+  smul_optab = init_optab (MULT);\n+  smul_widen_optab = init_optab (UNKNOWN);\n+  umul_widen_optab = init_optab (UNKNOWN);\n+  sdiv_optab = init_optab (DIV);\n+  sdivmod_optab = init_optab (UNKNOWN);\n+  udiv_optab = init_optab (UDIV);\n+  udivmod_optab = init_optab (UNKNOWN);\n+  smod_optab = init_optab (MOD);\n+  umod_optab = init_optab (UMOD);\n+  flodiv_optab = init_optab (DIV);\n   ftrunc_optab = init_optab (UNKNOWN);\n   and_optab = init_optab (AND);\n   ior_optab = init_optab (IOR);\n@@ -4078,158 +3350,69 @@ init_optabs ()\n   cos_optab = init_optab (UNKNOWN);\n   strlen_optab = init_optab (UNKNOWN);\n \n-#ifdef HAVE_addqi3\n-  if (HAVE_addqi3)\n-    add_optab->handlers[(int) QImode].insn_code = CODE_FOR_addqi3;\n-#endif\n-#ifdef HAVE_addhi3\n-  if (HAVE_addhi3)\n-    add_optab->handlers[(int) HImode].insn_code = CODE_FOR_addhi3;\n-#endif\n-#ifdef HAVE_addpsi3\n-  if (HAVE_addpsi3)\n-    add_optab->handlers[(int) PSImode].insn_code = CODE_FOR_addpsi3;\n-#endif\n-#ifdef HAVE_addsi3\n-  if (HAVE_addsi3)\n-    add_optab->handlers[(int) SImode].insn_code = CODE_FOR_addsi3;\n-#endif\n-#ifdef HAVE_adddi3\n-  if (HAVE_adddi3)\n-    add_optab->handlers[(int) DImode].insn_code = CODE_FOR_adddi3;\n-#endif\n-#ifdef HAVE_addti3\n-  if (HAVE_addti3)\n-    add_optab->handlers[(int) TImode].insn_code = CODE_FOR_addti3;\n-#endif\n-#ifdef HAVE_addqf3\n-  if (HAVE_addqf3)\n-    add_optab->handlers[(int) QFmode].insn_code = CODE_FOR_addqf3;\n-#endif\n-#ifdef HAVE_addhf3\n-  if (HAVE_addhf3)\n-    add_optab->handlers[(int) HFmode].insn_code = CODE_FOR_addhf3;\n-#endif\n-#ifdef HAVE_addsf3\n-  if (HAVE_addsf3)\n-    add_optab->handlers[(int) SFmode].insn_code = CODE_FOR_addsf3;\n-#endif\n-#ifdef HAVE_adddf3\n-  if (HAVE_adddf3)\n-    add_optab->handlers[(int) DFmode].insn_code = CODE_FOR_adddf3;\n+  for (i = 0; i < NUM_MACHINE_MODES; i++)\n+    {\n+      movstr_optab[i] = CODE_FOR_nothing;\n+\n+#ifdef HAVE_SECONDARY_RELOADS\n+      reload_in_optab[i] = reload_out_optab[i] = CODE_FOR_nothing;\n #endif\n-#ifdef HAVE_addxf3\n-  if (HAVE_addxf3)\n-    add_optab->handlers[(int) XFmode].insn_code = CODE_FOR_addxf3;\n+    }\n+\n+  /* Fill in the optabs with the insns we support.  */\n+  init_all_optabs ();\n+\n+#ifdef FIXUNS_TRUNC_LIKE_FIX_TRUNC\n+  /* This flag says the same insns that convert to a signed fixnum\n+     also convert validly to an unsigned one.  */\n+  for (i = 0; i < NUM_MACHINE_MODES; i++)\n+    for (j = 0; j < NUM_MACHINE_MODES; j++)\n+      fixtrunctab[i][j][1] = fixtrunctab[i][j][0];\n #endif\n-#ifdef HAVE_addtf3\n-  if (HAVE_addtf3)\n-    add_optab->handlers[(int) TFmode].insn_code = CODE_FOR_addtf3;\n+\n+#ifdef EXTRA_CC_MODES\n+  init_mov_optab ();\n #endif\n+\n+  /* Initialize the optabs with the names of the library functions.  */\n   init_integral_libfuncs (add_optab, \"add\", '3');\n   init_floating_libfuncs (add_optab, \"add\", '3');\n-\n-#ifdef HAVE_subqi3\n-  if (HAVE_subqi3)\n-    sub_optab->handlers[(int) QImode].insn_code = CODE_FOR_subqi3;\n-#endif\n-#ifdef HAVE_subhi3\n-  if (HAVE_subhi3)\n-    sub_optab->handlers[(int) HImode].insn_code = CODE_FOR_subhi3;\n-#endif\n-#ifdef HAVE_subpsi3\n-  if (HAVE_subpsi3)\n-    sub_optab->handlers[(int) PSImode].insn_code = CODE_FOR_subpsi3;\n-#endif\n-#ifdef HAVE_subsi3\n-  if (HAVE_subsi3)\n-    sub_optab->handlers[(int) SImode].insn_code = CODE_FOR_subsi3;\n-#endif\n-#ifdef HAVE_subdi3\n-  if (HAVE_subdi3)\n-    sub_optab->handlers[(int) DImode].insn_code = CODE_FOR_subdi3;\n-#endif\n-#ifdef HAVE_subti3\n-  if (HAVE_subti3)\n-    sub_optab->handlers[(int) TImode].insn_code = CODE_FOR_subti3;\n-#endif\n-#ifdef HAVE_subqf3\n-  if (HAVE_subqf3)\n-    sub_optab->handlers[(int) QFmode].insn_code = CODE_FOR_subqf3;\n-#endif\n-#ifdef HAVE_subhf3\n-  if (HAVE_subhf3)\n-    sub_optab->handlers[(int) HFmode].insn_code = CODE_FOR_subhf3;\n-#endif\n-#ifdef HAVE_subsf3\n-  if (HAVE_subsf3)\n-    sub_optab->handlers[(int) SFmode].insn_code = CODE_FOR_subsf3;\n-#endif\n-#ifdef HAVE_subdf3\n-  if (HAVE_subdf3)\n-    sub_optab->handlers[(int) DFmode].insn_code = CODE_FOR_subdf3;\n-#endif\n-#ifdef HAVE_subxf3\n-  if (HAVE_subxf3)\n-    sub_optab->handlers[(int) XFmode].insn_code = CODE_FOR_subxf3;\n-#endif\n-#ifdef HAVE_subtf3\n-  if (HAVE_subtf3)\n-    sub_optab->handlers[(int) TFmode].insn_code = CODE_FOR_subtf3;\n-#endif\n   init_integral_libfuncs (sub_optab, \"sub\", '3');\n   init_floating_libfuncs (sub_optab, \"sub\", '3');\n-\n-#ifdef HAVE_mulqi3\n-  if (HAVE_mulqi3)\n-    smul_optab->handlers[(int) QImode].insn_code = CODE_FOR_mulqi3;\n-#endif\n-#ifdef HAVE_mulhi3\n-  if (HAVE_mulhi3)\n-    smul_optab->handlers[(int) HImode].insn_code = CODE_FOR_mulhi3;\n-#endif\n-#ifdef HAVE_mulpsi3\n-  if (HAVE_mulpsi3)\n-    smul_optab->handlers[(int) PSImode].insn_code = CODE_FOR_mulpsi3;\n-#endif\n-#ifdef HAVE_mulsi3\n-  if (HAVE_mulsi3)\n-    smul_optab->handlers[(int) SImode].insn_code = CODE_FOR_mulsi3;\n-#endif\n-#ifdef HAVE_muldi3\n-  if (HAVE_muldi3)\n-    smul_optab->handlers[(int) DImode].insn_code = CODE_FOR_muldi3;\n-#endif\n-#ifdef HAVE_multi3\n-  if (HAVE_multi3)\n-    smul_optab->handlers[(int) TImode].insn_code = CODE_FOR_multi3;\n-#endif\n-#ifdef HAVE_mulqf3\n-  if (HAVE_mulqf3)\n-    smul_optab->handlers[(int) QFmode].insn_code = CODE_FOR_mulqf3;\n-#endif\n-#ifdef HAVE_mulhf3\n-  if (HAVE_mulhf3)\n-    smul_optab->handlers[(int) HFmode].insn_code = CODE_FOR_mulhf3;\n-#endif\n-#ifdef HAVE_mulsf3\n-  if (HAVE_mulsf3)\n-    smul_optab->handlers[(int) SFmode].insn_code = CODE_FOR_mulsf3;\n-#endif\n-#ifdef HAVE_muldf3\n-  if (HAVE_muldf3)\n-    smul_optab->handlers[(int) DFmode].insn_code = CODE_FOR_muldf3;\n-#endif\n-#ifdef HAVE_mulxf3\n-  if (HAVE_mulxf3)\n-    smul_optab->handlers[(int) XFmode].insn_code = CODE_FOR_mulxf3;\n-#endif\n-#ifdef HAVE_multf3\n-  if (HAVE_multf3)\n-    smul_optab->handlers[(int) TFmode].insn_code = CODE_FOR_multf3;\n-#endif\n   init_integral_libfuncs (smul_optab, \"mul\", '3');\n   init_floating_libfuncs (smul_optab, \"mul\", '3');\n+  init_integral_libfuncs (sdiv_optab, \"div\", '3');\n+  init_integral_libfuncs (udiv_optab, \"udiv\", '3');\n+  init_integral_libfuncs (sdivmod_optab, \"divmod\", '4');\n+  init_integral_libfuncs (udivmod_optab, \"udivmod\", '4');\n+  init_integral_libfuncs (smod_optab, \"mod\", '3');\n+  init_integral_libfuncs (umod_optab, \"umod\", '3');\n+  init_floating_libfuncs (flodiv_optab, \"div\", '3');\n+  init_floating_libfuncs (ftrunc_optab, \"ftrunc\", '2');\n+  init_integral_libfuncs (and_optab, \"and\", '3');\n+  init_integral_libfuncs (ior_optab, \"ior\", '3');\n+  init_integral_libfuncs (xor_optab, \"xor\", '3');\n+  init_integral_libfuncs (ashl_optab, \"ashl\", '3');\n+  init_integral_libfuncs (ashr_optab, \"ashr\", '3');\n+  init_integral_libfuncs (lshl_optab, \"lshl\", '3');\n+  init_integral_libfuncs (lshr_optab, \"lshr\", '3');\n+  init_integral_libfuncs (rotl_optab, \"rotl\", '3');\n+  init_integral_libfuncs (rotr_optab, \"rotr\", '3');\n+  init_integral_libfuncs (smin_optab, \"min\", '3');\n+  init_floating_libfuncs (smin_optab, \"min\", '3');\n+  init_integral_libfuncs (smax_optab, \"max\", '3');\n+  init_floating_libfuncs (smax_optab, \"max\", '3');\n+  init_integral_libfuncs (umin_optab, \"umin\", '3');\n+  init_integral_libfuncs (umax_optab, \"umax\", '3');\n+  init_integral_libfuncs (neg_optab, \"neg\", '2');\n+  init_floating_libfuncs (neg_optab, \"neg\", '2');\n+  init_integral_libfuncs (one_cmpl_optab, \"one_cmpl\", '2');\n+  init_integral_libfuncs (ffs_optab, \"ffs\", '2');\n+\n+  /* Comparison libcalls for integers MUST come in pairs, signed/unsigned.  */\n+  init_integral_libfuncs (cmp_optab, \"cmp\", '2');\n+  init_integral_libfuncs (ucmp_optab, \"ucmp\", '2');\n+  init_floating_libfuncs (cmp_optab, \"cmp\", '2');\n \n #ifdef MULSI3_LIBCALL\n   smul_optab->handlers[(int) SImode].libfunc\n@@ -4244,66 +3427,6 @@ init_optabs ()\n     = gen_rtx (SYMBOL_REF, Pmode, MULTI3_LIBCALL);\n #endif\n \n-#ifdef HAVE_mulqihi3\n-  if (HAVE_mulqihi3)\n-    smul_widen_optab->handlers[(int) HImode].insn_code = CODE_FOR_mulqihi3;\n-#endif\n-#ifdef HAVE_mulhisi3\n-  if (HAVE_mulhisi3)\n-    smul_widen_optab->handlers[(int) SImode].insn_code = CODE_FOR_mulhisi3;\n-#endif\n-#ifdef HAVE_mulsidi3\n-  if (HAVE_mulsidi3)\n-    smul_widen_optab->handlers[(int) DImode].insn_code = CODE_FOR_mulsidi3;\n-#endif\n-#ifdef HAVE_mulditi3\n-  if (HAVE_mulditi3)\n-    smul_widen_optab->handlers[(int) TImode].insn_code = CODE_FOR_mulditi3;\n-#endif\n-\n-#ifdef HAVE_umulqihi3\n-  if (HAVE_umulqihi3)\n-    umul_widen_optab->handlers[(int) HImode].insn_code = CODE_FOR_umulqihi3;\n-#endif\n-#ifdef HAVE_umulhisi3\n-  if (HAVE_umulhisi3)\n-    umul_widen_optab->handlers[(int) SImode].insn_code = CODE_FOR_umulhisi3;\n-#endif\n-#ifdef HAVE_umulsidi3\n-  if (HAVE_umulsidi3)\n-    umul_widen_optab->handlers[(int) DImode].insn_code = CODE_FOR_umulsidi3;\n-#endif\n-#ifdef HAVE_umulditi3\n-  if (HAVE_umulditi3)\n-    umul_widen_optab->handlers[(int) TImode].insn_code = CODE_FOR_umulditi3;\n-#endif\n-\n-#ifdef HAVE_divqi3\n-  if (HAVE_divqi3)\n-    sdiv_optab->handlers[(int) QImode].insn_code = CODE_FOR_divqi3;\n-#endif\n-#ifdef HAVE_divhi3\n-  if (HAVE_divhi3)\n-    sdiv_optab->handlers[(int) HImode].insn_code = CODE_FOR_divhi3;\n-#endif\n-#ifdef HAVE_divpsi3\n-  if (HAVE_divpsi3)\n-    sdiv_optab->handlers[(int) PSImode].insn_code = CODE_FOR_divpsi3;\n-#endif\n-#ifdef HAVE_divsi3\n-  if (HAVE_divsi3)\n-    sdiv_optab->handlers[(int) SImode].insn_code = CODE_FOR_divsi3;\n-#endif\n-#ifdef HAVE_divdi3\n-  if (HAVE_divdi3)\n-    sdiv_optab->handlers[(int) DImode].insn_code = CODE_FOR_divdi3;\n-#endif\n-#ifdef HAVE_divti3\n-  if (HAVE_divti3)\n-    sdiv_optab->handlers[(int) TImode].insn_code = CODE_FOR_divti3;\n-#endif\n-  init_integral_libfuncs (sdiv_optab, \"div\", '3');\n-\n #ifdef DIVSI3_LIBCALL\n   sdiv_optab->handlers[(int) SImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, DIVSI3_LIBCALL);\n@@ -4317,32 +3440,6 @@ init_optabs ()\n     = gen_rtx (SYMBOL_REF, Pmode, DIVTI3_LIBCALL);\n #endif\n \n-#ifdef HAVE_udivqi3\n-  if (HAVE_udivqi3)\n-    udiv_optab->handlers[(int) QImode].insn_code = CODE_FOR_udivqi3;\n-#endif\n-#ifdef HAVE_udivhi3\n-  if (HAVE_udivhi3)\n-    udiv_optab->handlers[(int) HImode].insn_code = CODE_FOR_udivhi3;\n-#endif\n-#ifdef HAVE_udivpsi3\n-  if (HAVE_udivpsi3)\n-    udiv_optab->handlers[(int) PSImode].insn_code = CODE_FOR_udivpsi3;\n-#endif\n-#ifdef HAVE_udivsi3\n-  if (HAVE_udivsi3)\n-    udiv_optab->handlers[(int) SImode].insn_code = CODE_FOR_udivsi3;\n-#endif\n-#ifdef HAVE_udivdi3\n-  if (HAVE_udivdi3)\n-    udiv_optab->handlers[(int) DImode].insn_code = CODE_FOR_udivdi3;\n-#endif\n-#ifdef HAVE_udivti3\n-  if (HAVE_udivti3)\n-    udiv_optab->handlers[(int) TImode].insn_code = CODE_FOR_udivti3;\n-#endif\n-  init_integral_libfuncs (udiv_optab, \"udiv\", '3');\n-\n #ifdef UDIVSI3_LIBCALL\n   udiv_optab->handlers[(int) SImode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, UDIVSI3_LIBCALL);\n@@ -4356,75 +3453,6 @@ init_optabs ()\n     = gen_rtx (SYMBOL_REF, Pmode, UDIVTI3_LIBCALL);\n #endif\n \n-#ifdef HAVE_divmodqi4\n-  if (HAVE_divmodqi4)\n-    sdivmod_optab->handlers[(int) QImode].insn_code = CODE_FOR_divmodqi4;\n-#endif\n-#ifdef HAVE_divmodhi4\n-  if (HAVE_divmodhi4)\n-    sdivmod_optab->handlers[(int) HImode].insn_code = CODE_FOR_divmodhi4;\n-#endif\n-#ifdef HAVE_divmodsi4\n-  if (HAVE_divmodsi4)\n-    sdivmod_optab->handlers[(int) SImode].insn_code = CODE_FOR_divmodsi4;\n-#endif\n-#ifdef HAVE_divmoddi4\n-  if (HAVE_divmoddi4)\n-    sdivmod_optab->handlers[(int) DImode].insn_code = CODE_FOR_divmoddi4;\n-#endif\n-#ifdef HAVE_divmodti4\n-  if (HAVE_divmodti4)\n-    sdivmod_optab->handlers[(int) TImode].insn_code = CODE_FOR_divmodti4;\n-#endif\n-  init_integral_libfuncs (sdivmod_optab, \"divmod\", '4');\n-\n-#ifdef HAVE_udivmodqi4\n-  if (HAVE_udivmodqi4)\n-    udivmod_optab->handlers[(int) QImode].insn_code = CODE_FOR_udivmodqi4;\n-#endif\n-#ifdef HAVE_udivmodhi4\n-  if (HAVE_udivmodhi4)\n-    udivmod_optab->handlers[(int) HImode].insn_code = CODE_FOR_udivmodhi4;\n-#endif\n-#ifdef HAVE_udivmodsi4\n-  if (HAVE_udivmodsi4)\n-    udivmod_optab->handlers[(int) SImode].insn_code = CODE_FOR_udivmodsi4;\n-#endif\n-#ifdef HAVE_udivmoddi4\n-  if (HAVE_udivmoddi4)\n-    udivmod_optab->handlers[(int) DImode].insn_code = CODE_FOR_udivmoddi4;\n-#endif\n-#ifdef HAVE_udivmodti4\n-  if (HAVE_udivmodti4)\n-    udivmod_optab->handlers[(int) TImode].insn_code = CODE_FOR_udivmodti4;\n-#endif\n-  init_integral_libfuncs (udivmod_optab, \"udivmod\", '4');\n-\n-#ifdef HAVE_modqi3\n-  if (HAVE_modqi3)\n-    smod_optab->handlers[(int) QImode].insn_code = CODE_FOR_modqi3;\n-#endif\n-#ifdef HAVE_modhi3\n-  if (HAVE_modhi3)\n-    smod_optab->handlers[(int) HImode].insn_code = CODE_FOR_modhi3;\n-#endif\n-#ifdef HAVE_modpsi3\n-  if (HAVE_modpsi3)\n-    smod_optab->handlers[(int) PSImode].insn_code = CODE_FOR_modpsi3;\n-#endif\n-#ifdef HAVE_modsi3\n-  if (HAVE_modsi3)\n-    smod_optab->handlers[(int) SImode].insn_code = CODE_FOR_modsi3;\n-#endif\n-#ifdef HAVE_moddi3\n-  if (HAVE_moddi3)\n-    smod_optab->handlers[(int) DImode].insn_code = CODE_FOR_moddi3;\n-#endif\n-#ifdef HAVE_modti3\n-  if (HAVE_modti3)\n-    smod_optab->handlers[(int) TImode].insn_code = CODE_FOR_modti3;\n-#endif\n-  init_integral_libfuncs (smod_optab, \"mod\", '3');\n \n #ifdef MODSI3_LIBCALL\n   smod_optab->handlers[(int) SImode].libfunc\n@@ -4439,31 +3467,6 @@ init_optabs ()\n     = gen_rtx (SYMBOL_REF, Pmode, MODTI3_LIBCALL);\n #endif\n \n-#ifdef HAVE_umodqi3\n-  if (HAVE_umodqi3)\n-    umod_optab->handlers[(int) QImode].insn_code = CODE_FOR_umodqi3;\n-#endif\n-#ifdef HAVE_umodhi3\n-  if (HAVE_umodhi3)\n-    umod_optab->handlers[(int) HImode].insn_code = CODE_FOR_umodhi3;\n-#endif\n-#ifdef HAVE_umodpsi3\n-  if (HAVE_umodpsi3)\n-    umod_optab->handlers[(int) PSImode].insn_code = CODE_FOR_umodpsi3;\n-#endif\n-#ifdef HAVE_umodsi3\n-  if (HAVE_umodsi3)\n-    umod_optab->handlers[(int) SImode].insn_code = CODE_FOR_umodsi3;\n-#endif\n-#ifdef HAVE_umoddi3\n-  if (HAVE_umoddi3)\n-    umod_optab->handlers[(int) DImode].insn_code = CODE_FOR_umoddi3;\n-#endif\n-#ifdef HAVE_umodti3\n-  if (HAVE_umodti3)\n-    umod_optab->handlers[(int) TImode].insn_code = CODE_FOR_umodti3;\n-#endif\n-  init_integral_libfuncs (umod_optab, \"umod\", '3');\n \n #ifdef UMODSI3_LIBCALL\n   umod_optab->handlers[(int) SImode].libfunc\n@@ -4478,978 +3481,14 @@ init_optabs ()\n     = gen_rtx (SYMBOL_REF, Pmode, UMODTI3_LIBCALL);\n #endif\n \n-#ifdef HAVE_divqf3\n-  if (HAVE_divqf3)\n-    flodiv_optab->handlers[(int) QFmode].insn_code = CODE_FOR_divqf3;\n-#endif\n-#ifdef HAVE_divhf3\n-  if (HAVE_divhf3)\n-    flodiv_optab->handlers[(int) HFmode].insn_code = CODE_FOR_divhf3;\n-#endif\n-#ifdef HAVE_divsf3\n-  if (HAVE_divsf3)\n-    flodiv_optab->handlers[(int) SFmode].insn_code = CODE_FOR_divsf3;\n-#endif\n-#ifdef HAVE_divdf3\n-  if (HAVE_divdf3)\n-    flodiv_optab->handlers[(int) DFmode].insn_code = CODE_FOR_divdf3;\n-#endif\n-#ifdef HAVE_divxf3\n-  if (HAVE_divxf3)\n-    flodiv_optab->handlers[(int) XFmode].insn_code = CODE_FOR_divxf3;\n-#endif\n-#ifdef HAVE_divtf3\n-  if (HAVE_divtf3)\n-    flodiv_optab->handlers[(int) TFmode].insn_code = CODE_FOR_divtf3;\n-#endif\n-  init_floating_libfuncs (flodiv_optab, \"div\", '3');\n-\n-#ifdef HAVE_ftruncqf2\n-  if (HAVE_ftruncqf2)\n-    ftrunc_optab->handlers[(int) QFmode].insn_code = CODE_FOR_ftruncqf2;\n-#endif\n-#ifdef HAVE_ftrunchf2\n-  if (HAVE_ftrunchf2)\n-    ftrunc_optab->handlers[(int) HFmode].insn_code = CODE_FOR_ftrunchf3;\n-#endif\n-#ifdef HAVE_ftruncsf2\n-  if (HAVE_ftruncsf2)\n-    ftrunc_optab->handlers[(int) SFmode].insn_code = CODE_FOR_ftruncsf2;\n-#endif\n-#ifdef HAVE_ftruncdf2\n-  if (HAVE_ftruncdf2)\n-    ftrunc_optab->handlers[(int) DFmode].insn_code = CODE_FOR_ftruncdf2;\n-#endif\n-#ifdef HAVE_ftruncxf2\n-  if (HAVE_ftruncxf2)\n-    ftrunc_optab->handlers[(int) XFmode].insn_code = CODE_FOR_ftruncxf2;\n-#endif\n-#ifdef HAVE_ftrunctf2\n-  if (HAVE_ftrunctf2)\n-    ftrunc_optab->handlers[(int) TFmode].insn_code = CODE_FOR_ftrunctf2;\n-#endif\n-  init_floating_libfuncs (ftrunc_optab, \"ftrunc\", '2');\n-\n-#ifdef HAVE_andqi3\n-  if (HAVE_andqi3)\n-    and_optab->handlers[(int) QImode].insn_code = CODE_FOR_andqi3;\n-#endif\n-#ifdef HAVE_andhi3\n-  if (HAVE_andhi3)\n-    and_optab->handlers[(int) HImode].insn_code = CODE_FOR_andhi3;\n-#endif\n-#ifdef HAVE_andpsi3\n-  if (HAVE_andpsi3)\n-    and_optab->handlers[(int) PSImode].insn_code = CODE_FOR_andpsi3;\n-#endif\n-#ifdef HAVE_andsi3\n-  if (HAVE_andsi3)\n-    and_optab->handlers[(int) SImode].insn_code = CODE_FOR_andsi3;\n-#endif\n-#ifdef HAVE_anddi3\n-  if (HAVE_anddi3)\n-    and_optab->handlers[(int) DImode].insn_code = CODE_FOR_anddi3;\n-#endif\n-#ifdef HAVE_andti3\n-  if (HAVE_andti3)\n-    and_optab->handlers[(int) TImode].insn_code = CODE_FOR_andti3;\n-#endif\n-  init_integral_libfuncs (and_optab, \"and\", '3');\n-\n-#ifdef HAVE_iorqi3\n-  if (HAVE_iorqi3)\n-    ior_optab->handlers[(int) QImode].insn_code = CODE_FOR_iorqi3;\n-#endif\n-#ifdef HAVE_iorhi3\n-  if (HAVE_iorhi3)\n-    ior_optab->handlers[(int) HImode].insn_code = CODE_FOR_iorhi3;\n-#endif\n-#ifdef HAVE_iorpsi3\n-  if (HAVE_iorpsi3)\n-    ior_optab->handlers[(int) PSImode].insn_code = CODE_FOR_iorpsi3;\n-#endif\n-#ifdef HAVE_iorsi3\n-  if (HAVE_iorsi3)\n-    ior_optab->handlers[(int) SImode].insn_code = CODE_FOR_iorsi3;\n-#endif\n-#ifdef HAVE_iordi3\n-  if (HAVE_iordi3)\n-    ior_optab->handlers[(int) DImode].insn_code = CODE_FOR_iordi3;\n-#endif\n-#ifdef HAVE_iorti3\n-  if (HAVE_iorti3)\n-    ior_optab->handlers[(int) TImode].insn_code = CODE_FOR_iorti3;\n-#endif\n-  init_integral_libfuncs (ior_optab, \"ior\", '3');\n-\n-#ifdef HAVE_xorqi3\n-  if (HAVE_xorqi3)\n-    xor_optab->handlers[(int) QImode].insn_code = CODE_FOR_xorqi3;\n-#endif\n-#ifdef HAVE_xorhi3\n-  if (HAVE_xorhi3)\n-    xor_optab->handlers[(int) HImode].insn_code = CODE_FOR_xorhi3;\n-#endif\n-#ifdef HAVE_xorpsi3\n-  if (HAVE_xorpsi3)\n-    xor_optab->handlers[(int) PSImode].insn_code = CODE_FOR_xorpsi3;\n-#endif\n-#ifdef HAVE_xorsi3\n-  if (HAVE_xorsi3)\n-    xor_optab->handlers[(int) SImode].insn_code = CODE_FOR_xorsi3;\n-#endif\n-#ifdef HAVE_xordi3\n-  if (HAVE_xordi3)\n-    xor_optab->handlers[(int) DImode].insn_code = CODE_FOR_xordi3;\n-#endif\n-#ifdef HAVE_xorti3\n-  if (HAVE_xorti3)\n-    xor_optab->handlers[(int) TImode].insn_code = CODE_FOR_xorti3;\n-#endif\n-  init_integral_libfuncs (xor_optab, \"xor\", '3');\n-\n-#ifdef HAVE_ashlqi3\n-  if (HAVE_ashlqi3)\n-    ashl_optab->handlers[(int) QImode].insn_code = CODE_FOR_ashlqi3;\n-#endif\n-#ifdef HAVE_ashlhi3\n-  if (HAVE_ashlhi3)\n-    ashl_optab->handlers[(int) HImode].insn_code = CODE_FOR_ashlhi3;\n-#endif\n-#ifdef HAVE_ashlpsi3\n-  if (HAVE_ashlpsi3)\n-    ashl_optab->handlers[(int) PSImode].insn_code = CODE_FOR_ashlpsi3;\n-#endif\n-#ifdef HAVE_ashlsi3\n-  if (HAVE_ashlsi3)\n-    ashl_optab->handlers[(int) SImode].insn_code = CODE_FOR_ashlsi3;\n-#endif\n-#ifdef HAVE_ashldi3\n-  if (HAVE_ashldi3)\n-    ashl_optab->handlers[(int) DImode].insn_code = CODE_FOR_ashldi3;\n-#endif\n-#ifdef HAVE_ashlti3\n-  if (HAVE_ashlti3)\n-    ashl_optab->handlers[(int) TImode].insn_code = CODE_FOR_ashlti3;\n-#endif\n-  init_integral_libfuncs (ashl_optab, \"ashl\", '3');\n-\n-#ifdef HAVE_ashrqi3\n-  if (HAVE_ashrqi3)\n-    ashr_optab->handlers[(int) QImode].insn_code = CODE_FOR_ashrqi3;\n-#endif\n-#ifdef HAVE_ashrhi3\n-  if (HAVE_ashrhi3)\n-    ashr_optab->handlers[(int) HImode].insn_code = CODE_FOR_ashrhi3;\n-#endif\n-#ifdef HAVE_ashrpsi3\n-  if (HAVE_ashrpsi3)\n-    ashr_optab->handlers[(int) PSImode].insn_code = CODE_FOR_ashrpsi3;\n-#endif\n-#ifdef HAVE_ashrsi3\n-  if (HAVE_ashrsi3)\n-    ashr_optab->handlers[(int) SImode].insn_code = CODE_FOR_ashrsi3;\n-#endif\n-#ifdef HAVE_ashrdi3\n-  if (HAVE_ashrdi3)\n-    ashr_optab->handlers[(int) DImode].insn_code = CODE_FOR_ashrdi3;\n-#endif\n-#ifdef HAVE_ashrti3\n-  if (HAVE_ashrti3)\n-    ashr_optab->handlers[(int) TImode].insn_code = CODE_FOR_ashrti3;\n-#endif\n-  init_integral_libfuncs (ashr_optab, \"ashr\", '3');\n-\n-#ifdef HAVE_lshlqi3\n-  if (HAVE_lshlqi3)\n-    lshl_optab->handlers[(int) QImode].insn_code = CODE_FOR_lshlqi3;\n-#endif\n-#ifdef HAVE_lshlhi3\n-  if (HAVE_lshlhi3)\n-    lshl_optab->handlers[(int) HImode].insn_code = CODE_FOR_lshlhi3;\n-#endif\n-#ifdef HAVE_lshlpsi3\n-  if (HAVE_lshlpsi3)\n-    lshl_optab->handlers[(int) PSImode].insn_code = CODE_FOR_lshlpsi3;\n-#endif\n-#ifdef HAVE_lshlsi3\n-  if (HAVE_lshlsi3)\n-    lshl_optab->handlers[(int) SImode].insn_code = CODE_FOR_lshlsi3;\n-#endif\n-#ifdef HAVE_lshldi3\n-  if (HAVE_lshldi3)\n-    lshl_optab->handlers[(int) DImode].insn_code = CODE_FOR_lshldi3;\n-#endif\n-#ifdef HAVE_lshlti3\n-  if (HAVE_lshlti3)\n-    lshl_optab->handlers[(int) TImode].insn_code = CODE_FOR_lshlti3;\n-#endif\n-  init_integral_libfuncs (lshl_optab, \"lshl\", '3');\n-\n-#ifdef HAVE_lshrqi3\n-  if (HAVE_lshrqi3)\n-    lshr_optab->handlers[(int) QImode].insn_code = CODE_FOR_lshrqi3;\n-#endif\n-#ifdef HAVE_lshrhi3\n-  if (HAVE_lshrhi3)\n-    lshr_optab->handlers[(int) HImode].insn_code = CODE_FOR_lshrhi3;\n-#endif\n-#ifdef HAVE_lshrpsi3\n-  if (HAVE_lshrpsi3)\n-    lshr_optab->handlers[(int) PSImode].insn_code = CODE_FOR_lshrpsi3;\n-#endif\n-#ifdef HAVE_lshrsi3\n-  if (HAVE_lshrsi3)\n-    lshr_optab->handlers[(int) SImode].insn_code = CODE_FOR_lshrsi3;\n-#endif\n-#ifdef HAVE_lshrdi3\n-  if (HAVE_lshrdi3)\n-    lshr_optab->handlers[(int) DImode].insn_code = CODE_FOR_lshrdi3;\n-#endif\n-#ifdef HAVE_lshrti3\n-  if (HAVE_lshrti3)\n-    lshr_optab->handlers[(int) TImode].insn_code = CODE_FOR_lshrti3;\n-#endif\n-  init_integral_libfuncs (lshr_optab, \"lshr\", '3');\n-\n-#ifdef HAVE_rotlqi3\n-  if (HAVE_rotlqi3)\n-    rotl_optab->handlers[(int) QImode].insn_code = CODE_FOR_rotlqi3;\n-#endif\n-#ifdef HAVE_rotlhi3\n-  if (HAVE_rotlhi3)\n-    rotl_optab->handlers[(int) HImode].insn_code = CODE_FOR_rotlhi3;\n-#endif\n-#ifdef HAVE_rotlpsi3\n-  if (HAVE_rotlpsi3)\n-    rotl_optab->handlers[(int) PSImode].insn_code = CODE_FOR_rotlpsi3;\n-#endif\n-#ifdef HAVE_rotlsi3\n-  if (HAVE_rotlsi3)\n-    rotl_optab->handlers[(int) SImode].insn_code = CODE_FOR_rotlsi3;\n-#endif\n-#ifdef HAVE_rotldi3\n-  if (HAVE_rotldi3)\n-    rotl_optab->handlers[(int) DImode].insn_code = CODE_FOR_rotldi3;\n-#endif\n-#ifdef HAVE_rotlti3\n-  if (HAVE_rotlti3)\n-    rotl_optab->handlers[(int) TImode].insn_code = CODE_FOR_rotlti3;\n-#endif\n-  init_integral_libfuncs (rotl_optab, \"rotl\", '3');\n-\n-#ifdef HAVE_rotrqi3\n-  if (HAVE_rotrqi3)\n-    rotr_optab->handlers[(int) QImode].insn_code = CODE_FOR_rotrqi3;\n-#endif\n-#ifdef HAVE_rotrhi3\n-  if (HAVE_rotrhi3)\n-    rotr_optab->handlers[(int) HImode].insn_code = CODE_FOR_rotrhi3;\n-#endif\n-#ifdef HAVE_rotrpsi3\n-  if (HAVE_rotrpsi3)\n-    rotr_optab->handlers[(int) PSImode].insn_code = CODE_FOR_rotrpsi3;\n-#endif\n-#ifdef HAVE_rotrsi3\n-  if (HAVE_rotrsi3)\n-    rotr_optab->handlers[(int) SImode].insn_code = CODE_FOR_rotrsi3;\n-#endif\n-#ifdef HAVE_rotrdi3\n-  if (HAVE_rotrdi3)\n-    rotr_optab->handlers[(int) DImode].insn_code = CODE_FOR_rotrdi3;\n-#endif\n-#ifdef HAVE_rotrti3\n-  if (HAVE_rotrti3)\n-    rotr_optab->handlers[(int) TImode].insn_code = CODE_FOR_rotrti3;\n-#endif\n-  init_integral_libfuncs (rotr_optab, \"rotr\", '3');\n-\n-#ifdef HAVE_sminqi3\n-  if (HAVE_sminqi3)\n-    smin_optab->handlers[(int) QImode].insn_code = CODE_FOR_sminqi3;\n-#endif\n-#ifdef HAVE_sminhi3\n-  if (HAVE_sminhi3)\n-    smin_optab->handlers[(int) HImode].insn_code = CODE_FOR_sminhi3;\n-#endif\n-#ifdef HAVE_sminsi3\n-  if (HAVE_sminsi3)\n-    smin_optab->handlers[(int) SImode].insn_code = CODE_FOR_sminsi3;\n-#endif\n-#ifdef HAVE_smindi3\n-  if (HAVE_smindi3)\n-    smin_optab->handlers[(int) DImode].insn_code = CODE_FOR_smindi3;\n-#endif\n-#ifdef HAVE_sminti3\n-  if (HAVE_sminti3)\n-    smin_optab->handlers[(int) TImode].insn_code = CODE_FOR_sminti3;\n-#endif\n-#ifdef HAVE_minqf3\n-  if (HAVE_minqf3)\n-    smin_optab->handlers[(int) QFmode].insn_code = CODE_FOR_minqf3;\n-#endif\n-#ifdef HAVE_minhf3\n-  if (HAVE_minhf3)\n-    smin_optab->handlers[(int) HFmode].insn_code = CODE_FOR_minhf3;\n-#endif\n-#ifdef HAVE_minsf3\n-  if (HAVE_minsf3)\n-    smin_optab->handlers[(int) SFmode].insn_code = CODE_FOR_minsf3;\n-#endif\n-#ifdef HAVE_mindf3\n-  if (HAVE_mindf3)\n-    smin_optab->handlers[(int) DFmode].insn_code = CODE_FOR_mindf3;\n-#endif\n-#ifdef HAVE_minxf3\n-  if (HAVE_minxf3)\n-    smin_optab->handlers[(int) XFmode].insn_code = CODE_FOR_minxf3;\n-#endif\n-#ifdef HAVE_mintf3\n-  if (HAVE_mintf3)\n-    smin_optab->handlers[(int) TFmode].insn_code = CODE_FOR_mintf3;\n-#endif\n-  init_integral_libfuncs (smin_optab, \"min\", '3');\n-  init_floating_libfuncs (smin_optab, \"min\", '3');\n-\n-#ifdef HAVE_smaxqi3\n-  if (HAVE_smaxqi3)\n-    smax_optab->handlers[(int) QImode].insn_code = CODE_FOR_smaxqi3;\n-#endif\n-#ifdef HAVE_smaxhi3\n-  if (HAVE_smaxhi3)\n-    smax_optab->handlers[(int) HImode].insn_code = CODE_FOR_smaxhi3;\n-#endif\n-#ifdef HAVE_smaxsi3\n-  if (HAVE_smaxsi3)\n-    smax_optab->handlers[(int) SImode].insn_code = CODE_FOR_smaxsi3;\n-#endif\n-#ifdef HAVE_smaxdi3\n-  if (HAVE_smaxdi3)\n-    smax_optab->handlers[(int) DImode].insn_code = CODE_FOR_smaxdi3;\n-#endif\n-#ifdef HAVE_smaxti3\n-  if (HAVE_smaxti3)\n-    smax_optab->handlers[(int) TImode].insn_code = CODE_FOR_smaxti3;\n-#endif\n-#ifdef HAVE_maxqf3\n-  if (HAVE_maxqf3)\n-    smax_optab->handlers[(int) QFmode].insn_code = CODE_FOR_maxqf3;\n-#endif\n-#ifdef HAVE_maxhf3\n-  if (HAVE_maxhf3)\n-    smax_optab->handlers[(int) HFmode].insn_code = CODE_FOR_maxhf3;\n-#endif\n-#ifdef HAVE_maxsf3\n-  if (HAVE_maxsf3)\n-    smax_optab->handlers[(int) SFmode].insn_code = CODE_FOR_maxsf3;\n-#endif\n-#ifdef HAVE_maxdf3\n-  if (HAVE_maxdf3)\n-    smax_optab->handlers[(int) DFmode].insn_code = CODE_FOR_maxdf3;\n-#endif\n-#ifdef HAVE_maxxf3\n-  if (HAVE_maxxf3)\n-    smax_optab->handlers[(int) XFmode].insn_code = CODE_FOR_maxxf3;\n-#endif\n-#ifdef HAVE_maxtf3\n-  if (HAVE_maxtf3)\n-    smax_optab->handlers[(int) TFmode].insn_code = CODE_FOR_maxtf3;\n-#endif\n-  init_integral_libfuncs (smax_optab, \"max\", '3');\n-  init_floating_libfuncs (smax_optab, \"max\", '3');\n-\n-#ifdef HAVE_uminqi3\n-  if (HAVE_uminqi3)\n-    umin_optab->handlers[(int) QImode].insn_code = CODE_FOR_uminqi3;\n-#endif\n-#ifdef HAVE_uminhi3\n-  if (HAVE_uminhi3)\n-    umin_optab->handlers[(int) HImode].insn_code = CODE_FOR_uminhi3;\n-#endif\n-#ifdef HAVE_uminsi3\n-  if (HAVE_uminsi3)\n-    umin_optab->handlers[(int) SImode].insn_code = CODE_FOR_uminsi3;\n-#endif\n-#ifdef HAVE_umindi3\n-  if (HAVE_umindi3)\n-    umin_optab->handlers[(int) DImode].insn_code = CODE_FOR_umindi3;\n-#endif\n-#ifdef HAVE_uminti3\n-  if (HAVE_uminti3)\n-    umin_optab->handlers[(int) TImode].insn_code = CODE_FOR_uminti3;\n-#endif\n-  init_integral_libfuncs (umin_optab, \"umin\", '3');\n-\n-#ifdef HAVE_umaxqi3\n-  if (HAVE_umaxqi3)\n-    umax_optab->handlers[(int) QImode].insn_code = CODE_FOR_umaxqi3;\n-#endif\n-#ifdef HAVE_umaxhi3\n-  if (HAVE_umaxhi3)\n-    umax_optab->handlers[(int) HImode].insn_code = CODE_FOR_umaxhi3;\n-#endif\n-#ifdef HAVE_umaxsi3\n-  if (HAVE_umaxsi3)\n-    umax_optab->handlers[(int) SImode].insn_code = CODE_FOR_umaxsi3;\n-#endif\n-#ifdef HAVE_umaxdi3\n-  if (HAVE_umaxdi3)\n-    umax_optab->handlers[(int) DImode].insn_code = CODE_FOR_umaxdi3;\n-#endif\n-#ifdef HAVE_umaxti3\n-  if (HAVE_umaxti3)\n-    umax_optab->handlers[(int) TImode].insn_code = CODE_FOR_umaxti3;\n-#endif\n-  init_integral_libfuncs (umax_optab, \"umax\", '3');\n-\n-#ifdef HAVE_negqi2\n-  if (HAVE_negqi2)\n-    neg_optab->handlers[(int) QImode].insn_code = CODE_FOR_negqi2;\n-#endif\n-#ifdef HAVE_neghi2\n-  if (HAVE_neghi2)\n-    neg_optab->handlers[(int) HImode].insn_code = CODE_FOR_neghi2;\n-#endif\n-#ifdef HAVE_negpsi2\n-  if (HAVE_negpsi2)\n-    neg_optab->handlers[(int) PSImode].insn_code = CODE_FOR_negpsi2;\n-#endif\n-#ifdef HAVE_negsi2\n-  if (HAVE_negsi2)\n-    neg_optab->handlers[(int) SImode].insn_code = CODE_FOR_negsi2;\n-#endif\n-#ifdef HAVE_negdi2\n-  if (HAVE_negdi2)\n-    neg_optab->handlers[(int) DImode].insn_code = CODE_FOR_negdi2;\n-#endif\n-#ifdef HAVE_negti2\n-  if (HAVE_negti2)\n-    neg_optab->handlers[(int) TImode].insn_code = CODE_FOR_negti2;\n-#endif\n-#ifdef HAVE_negqf2\n-  if (HAVE_negqf2)\n-    neg_optab->handlers[(int) QFmode].insn_code = CODE_FOR_negqf2;\n-#endif\n-#ifdef HAVE_neghf2\n-  if (HAVE_neghf2)\n-    neg_optab->handlers[(int) HFmode].insn_code = CODE_FOR_neghf2;\n-#endif\n-#ifdef HAVE_negsf2\n-  if (HAVE_negsf2)\n-    neg_optab->handlers[(int) SFmode].insn_code = CODE_FOR_negsf2;\n-#endif\n-#ifdef HAVE_negdf2\n-  if (HAVE_negdf2)\n-    neg_optab->handlers[(int) DFmode].insn_code = CODE_FOR_negdf2;\n-#endif\n-#ifdef HAVE_negxf2\n-  if (HAVE_negxf2)\n-    neg_optab->handlers[(int) XFmode].insn_code = CODE_FOR_negxf2;\n-#endif\n-#ifdef HAVE_negtf2\n-  if (HAVE_negtf2)\n-    neg_optab->handlers[(int) TFmode].insn_code = CODE_FOR_negtf2;\n-#endif\n-  init_integral_libfuncs (neg_optab, \"neg\", '2');\n-  init_floating_libfuncs (neg_optab, \"neg\", '2');\n-\n-#ifdef HAVE_absqi2\n-  if (HAVE_absqi2)\n-    abs_optab->handlers[(int) QImode].insn_code = CODE_FOR_absqi2;\n-#endif\n-#ifdef HAVE_abshi2\n-  if (HAVE_abshi2)\n-    abs_optab->handlers[(int) HImode].insn_code = CODE_FOR_abshi2;\n-#endif\n-#ifdef HAVE_abspsi2\n-  if (HAVE_abspsi2)\n-    abs_optab->handlers[(int) PSImode].insn_code = CODE_FOR_abspsi2;\n-#endif\n-#ifdef HAVE_abssi2\n-  if (HAVE_abssi2)\n-    abs_optab->handlers[(int) SImode].insn_code = CODE_FOR_abssi2;\n-#endif\n-#ifdef HAVE_absdi2\n-  if (HAVE_absdi2)\n-    abs_optab->handlers[(int) DImode].insn_code = CODE_FOR_absdi2;\n-#endif\n-#ifdef HAVE_absti2\n-  if (HAVE_absti2)\n-    abs_optab->handlers[(int) TImode].insn_code = CODE_FOR_absti2;\n-#endif\n-#ifdef HAVE_absqf2\n-  if (HAVE_absqf2)\n-    abs_optab->handlers[(int) QFmode].insn_code = CODE_FOR_absqf2;\n-#endif\n-#ifdef HAVE_abshf2\n-  if (HAVE_abshf2)\n-    abs_optab->handlers[(int) HFmode].insn_code = CODE_FOR_abshf2;\n-#endif\n-#ifdef HAVE_abssf2\n-  if (HAVE_abssf2)\n-    abs_optab->handlers[(int) SFmode].insn_code = CODE_FOR_abssf2;\n-#endif\n-#ifdef HAVE_absdf2\n-  if (HAVE_absdf2)\n-    abs_optab->handlers[(int) DFmode].insn_code = CODE_FOR_absdf2;\n-#endif\n-#ifdef HAVE_absxf2\n-  if (HAVE_absxf2)\n-    abs_optab->handlers[(int) XFmode].insn_code = CODE_FOR_absxf2;\n-#endif\n-#ifdef HAVE_abstf2\n-  if (HAVE_abstf2)\n-    abs_optab->handlers[(int) TFmode].insn_code = CODE_FOR_abstf2;\n-#endif\n-\n   /* Use cabs for DC complex abs, since systems generally have cabs.\n      Don't define any libcall for SCmode, so that cabs will be used.  */\n   abs_optab->handlers[(int) DCmode].libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, \"cabs\");\n \n-#ifdef HAVE_sqrtqi2\n-  if (HAVE_sqrtqi2)\n-    sqrt_optab->handlers[(int) QImode].insn_code = CODE_FOR_sqrtqi2;\n-#endif\n-#ifdef HAVE_sqrthi2\n-  if (HAVE_sqrthi2)\n-    sqrt_optab->handlers[(int) HImode].insn_code = CODE_FOR_sqrthi2;\n-#endif\n-#ifdef HAVE_sqrtpsi2\n-  if (HAVE_sqrtpsi2)\n-    sqrt_optab->handlers[(int) PSImode].insn_code = CODE_FOR_sqrtpsi2;\n-#endif\n-#ifdef HAVE_sqrtsi2\n-  if (HAVE_sqrtsi2)\n-    sqrt_optab->handlers[(int) SImode].insn_code = CODE_FOR_sqrtsi2;\n-#endif\n-#ifdef HAVE_sqrtdi2\n-  if (HAVE_sqrtdi2)\n-    sqrt_optab->handlers[(int) DImode].insn_code = CODE_FOR_sqrtdi2;\n-#endif\n-#ifdef HAVE_sqrtti2\n-  if (HAVE_sqrtti2)\n-    sqrt_optab->handlers[(int) TImode].insn_code = CODE_FOR_sqrtti2;\n-#endif\n-#ifdef HAVE_sqrtqf2\n-  if (HAVE_sqrtqf2)\n-    sqrt_optab->handlers[(int) QFmode].insn_code = CODE_FOR_sqrtqf2;\n-#endif\n-#ifdef HAVE_sqrthf2\n-  if (HAVE_sqrthf2)\n-    sqrt_optab->handlers[(int) HFmode].insn_code = CODE_FOR_sqrthf2;\n-#endif\n-#ifdef HAVE_sqrtsf2\n-  if (HAVE_sqrtsf2)\n-    sqrt_optab->handlers[(int) SFmode].insn_code = CODE_FOR_sqrtsf2;\n-#endif\n-#ifdef HAVE_sqrtdf2\n-  if (HAVE_sqrtdf2)\n-    sqrt_optab->handlers[(int) DFmode].insn_code = CODE_FOR_sqrtdf2;\n-#endif\n-#ifdef HAVE_sqrttf2\n-  if (HAVE_sqrttf2)\n-    sqrt_optab->handlers[(int) TFmode].insn_code = CODE_FOR_sqrttf2;\n-#endif\n-  /* No library calls here!  If there is no sqrt instruction expand_builtin\n-     should force the library call.  */\n-\n-#ifdef HAVE_sinqf2\n-  if (HAVE_sinqf2)\n-    sin_optab->handlers[(int) QFmode].insn_code = CODE_FOR_sinqf2;\n-#endif\n-#ifdef HAVE_sinhf2\n-  if (HAVE_sinhf2)\n-    sin_optab->handlers[(int) HFmode].insn_code = CODE_FOR_sinhf2;\n-#endif\n-#ifdef HAVE_sinsf2\n-  if (HAVE_sinsf2)\n-    sin_optab->handlers[(int) SFmode].insn_code = CODE_FOR_sinsf2;\n-#endif\n-#ifdef HAVE_sindf2\n-  if (HAVE_sindf2)\n-    sin_optab->handlers[(int) DFmode].insn_code = CODE_FOR_sindf2;\n-#endif\n-#ifdef HAVE_sintf2\n-  if (HAVE_sintf2)\n-    sin_optab->handlers[(int) TFmode].insn_code = CODE_FOR_sintf2;\n-#endif\n-  /* No library calls here!  If there is no sin instruction expand_builtin\n-     should force the library call.  */\n-\n-#ifdef HAVE_cosqf2\n-  if (HAVE_cosqf2)\n-    cos_optab->handlers[(int) QFmode].insn_code = CODE_FOR_cosqf2;\n-#endif\n-#ifdef HAVE_coshf2\n-  if (HAVE_coshf2)\n-    cos_optab->handlers[(int) HFmode].insn_code = CODE_FOR_coshf2;\n-#endif\n-#ifdef HAVE_cossf2\n-  if (HAVE_cossf2)\n-    cos_optab->handlers[(int) SFmode].insn_code = CODE_FOR_cossf2;\n-#endif\n-#ifdef HAVE_cosdf2\n-  if (HAVE_cosdf2)\n-    cos_optab->handlers[(int) DFmode].insn_code = CODE_FOR_cosdf2;\n-#endif\n-#ifdef HAVE_costf2\n-  if (HAVE_costf2)\n-    cos_optab->handlers[(int) TFmode].insn_code = CODE_FOR_costf2;\n-#endif\n-  /* No library calls here!  If there is no cos instruction expand_builtin\n-     should force the library call.  */\n-\n-#ifdef HAVE_strlenqi\n-  if (HAVE_strlenqi)\n-    strlen_optab->handlers[(int) QImode].insn_code = CODE_FOR_strlenqi;\n-#endif\n-#ifdef HAVE_strlenhi\n-  if (HAVE_strlenhi)\n-    strlen_optab->handlers[(int) HImode].insn_code = CODE_FOR_strlenhi;\n-#endif\n-#ifdef HAVE_strlenpsi\n-  if (HAVE_strlenpsi)\n-    strlen_optab->handlers[(int) PSImode].insn_code = CODE_FOR_strlenpsi;\n-#endif\n-#ifdef HAVE_strlensi\n-  if (HAVE_strlensi)\n-    strlen_optab->handlers[(int) SImode].insn_code = CODE_FOR_strlensi;\n-#endif\n-#ifdef HAVE_strlendi\n-  if (HAVE_strlendi)\n-    strlen_optab->handlers[(int) DImode].insn_code = CODE_FOR_strlendi;\n-#endif\n-#ifdef HAVE_strlenti\n-  if (HAVE_strlenti)\n-    strlen_optab->handlers[(int) TImode].insn_code = CODE_FOR_strlenti;\n-#endif\n-  /* No library calls here!  If there is no strlen instruction expand_builtin\n-     should force the library call.  */\n-\n-#ifdef HAVE_one_cmplqi2\n-  if (HAVE_one_cmplqi2)\n-    one_cmpl_optab->handlers[(int) QImode].insn_code = CODE_FOR_one_cmplqi2;\n-#endif\n-#ifdef HAVE_one_cmplhi2\n-  if (HAVE_one_cmplhi2)\n-    one_cmpl_optab->handlers[(int) HImode].insn_code = CODE_FOR_one_cmplhi2;\n-#endif\n-#ifdef HAVE_one_cmplpsi2\n-  if (HAVE_one_cmplpsi2)\n-    one_cmpl_optab->handlers[(int) PSImode].insn_code = CODE_FOR_one_cmplpsi2;\n-#endif\n-#ifdef HAVE_one_cmplsi2\n-  if (HAVE_one_cmplsi2)\n-    one_cmpl_optab->handlers[(int) SImode].insn_code = CODE_FOR_one_cmplsi2;\n-#endif\n-#ifdef HAVE_one_cmpldi2\n-  if (HAVE_one_cmpldi2)\n-    one_cmpl_optab->handlers[(int) DImode].insn_code = CODE_FOR_one_cmpldi2;\n-#endif\n-#ifdef HAVE_one_cmplti2\n-  if (HAVE_one_cmplti2)\n-    one_cmpl_optab->handlers[(int) TImode].insn_code = CODE_FOR_one_cmplti2;\n-#endif\n-  init_integral_libfuncs (one_cmpl_optab, \"one_cmpl\", '2');\n-\n-#ifdef HAVE_ffsqi2\n-  if (HAVE_ffsqi2)\n-    ffs_optab->handlers[(int) QImode].insn_code = CODE_FOR_ffsqi2;\n-#endif\n-#ifdef HAVE_ffshi2\n-  if (HAVE_ffshi2)\n-    ffs_optab->handlers[(int) HImode].insn_code = CODE_FOR_ffshi2;\n-#endif\n-#ifdef HAVE_ffspsi2\n-  if (HAVE_ffspsi2)\n-    ffs_optab->handlers[(int) PSImode].insn_code = CODE_FOR_ffspsi2;\n-#endif\n-#ifdef HAVE_ffssi2\n-  if (HAVE_ffssi2)\n-    ffs_optab->handlers[(int) SImode].insn_code = CODE_FOR_ffssi2;\n-#endif\n-#ifdef HAVE_ffsdi2\n-  if (HAVE_ffsdi2)\n-    ffs_optab->handlers[(int) DImode].insn_code = CODE_FOR_ffsdi2;\n-#endif\n-#ifdef HAVE_ffsti2\n-  if (HAVE_ffsti2)\n-    ffs_optab->handlers[(int) TImode].insn_code = CODE_FOR_ffsti2;\n-#endif\n-  init_integral_libfuncs (ffs_optab, \"ffs\", '2');\n-  ffs_optab->handlers[(int) SImode].libfunc\n+  ffs_optab->handlers[(int) mode_for_size (BITS_PER_WORD, MODE_INT, 0)] .libfunc\n     = gen_rtx (SYMBOL_REF, Pmode, \"ffs\");\n \n-#ifdef HAVE_movqi\n-  if (HAVE_movqi)\n-    mov_optab->handlers[(int) QImode].insn_code = CODE_FOR_movqi;\n-#endif\n-#ifdef HAVE_movhi\n-  if (HAVE_movhi)\n-    mov_optab->handlers[(int) HImode].insn_code = CODE_FOR_movhi;\n-#endif\n-#ifdef HAVE_movpsi\n-  if (HAVE_movpsi)\n-    mov_optab->handlers[(int) PSImode].insn_code = CODE_FOR_movpsi;\n-#endif\n-#ifdef HAVE_movsi\n-  if (HAVE_movsi)\n-    mov_optab->handlers[(int) SImode].insn_code = CODE_FOR_movsi;\n-#endif\n-#ifdef HAVE_movdi\n-  if (HAVE_movdi)\n-    mov_optab->handlers[(int) DImode].insn_code = CODE_FOR_movdi;\n-#endif\n-#ifdef HAVE_movti\n-  if (HAVE_movti)\n-    mov_optab->handlers[(int) TImode].insn_code = CODE_FOR_movti;\n-#endif\n-#ifdef HAVE_movqf\n-  if (HAVE_movqf)\n-    mov_optab->handlers[(int) QFmode].insn_code = CODE_FOR_movqf;\n-#endif\n-#ifdef HAVE_movhf\n-  if (HAVE_movhf)\n-    mov_optab->handlers[(int) HFmode].insn_code = CODE_FOR_movhf;\n-#endif\n-#ifdef HAVE_movsf\n-  if (HAVE_movsf)\n-    mov_optab->handlers[(int) SFmode].insn_code = CODE_FOR_movsf;\n-#endif\n-#ifdef HAVE_movdf\n-  if (HAVE_movdf)\n-    mov_optab->handlers[(int) DFmode].insn_code = CODE_FOR_movdf;\n-#endif\n-#ifdef HAVE_movxf\n-  if (HAVE_movxf)\n-    mov_optab->handlers[(int) XFmode].insn_code = CODE_FOR_movxf;\n-#endif\n-#ifdef HAVE_movtf\n-  if (HAVE_movtf)\n-    mov_optab->handlers[(int) TFmode].insn_code = CODE_FOR_movtf;\n-#endif\n-#ifdef HAVE_movcc\n-  if (HAVE_movcc)\n-    mov_optab->handlers[(int) CCmode].insn_code = CODE_FOR_movcc;\n-#endif\n-\n-#ifdef EXTRA_CC_MODES\n-  init_mov_optab ();\n-#endif\n-\n-#ifdef HAVE_movstrictqi\n-  if (HAVE_movstrictqi)\n-    movstrict_optab->handlers[(int) QImode].insn_code = CODE_FOR_movstrictqi;\n-#endif\n-#ifdef HAVE_movstricthi\n-  if (HAVE_movstricthi)\n-    movstrict_optab->handlers[(int) HImode].insn_code = CODE_FOR_movstricthi;\n-#endif\n-#ifdef HAVE_movstrictpsi\n-  if (HAVE_movstrictpsi)\n-    movstrict_optab->handlers[(int) PSImode].insn_code = CODE_FOR_movstrictpsi;\n-#endif\n-#ifdef HAVE_movstrictsi\n-  if (HAVE_movstrictsi)\n-    movstrict_optab->handlers[(int) SImode].insn_code = CODE_FOR_movstrictsi;\n-#endif\n-#ifdef HAVE_movstrictdi\n-  if (HAVE_movstrictdi)\n-    movstrict_optab->handlers[(int) DImode].insn_code = CODE_FOR_movstrictdi;\n-#endif\n-#ifdef HAVE_movstrictti\n-  if (HAVE_movstrictti)\n-    movstrict_optab->handlers[(int) TImode].insn_code = CODE_FOR_movstrictti;\n-#endif\n-\n-#ifdef HAVE_cmpqi\n-  if (HAVE_cmpqi)\n-    cmp_optab->handlers[(int) QImode].insn_code = CODE_FOR_cmpqi;\n-#endif\n-#ifdef HAVE_cmphi\n-  if (HAVE_cmphi)\n-    cmp_optab->handlers[(int) HImode].insn_code = CODE_FOR_cmphi;\n-#endif\n-#ifdef HAVE_cmppsi\n-  if (HAVE_cmppsi)\n-    cmp_optab->handlers[(int) PSImode].insn_code = CODE_FOR_cmppsi;\n-#endif\n-#ifdef HAVE_cmpsi\n-  if (HAVE_cmpsi)\n-    cmp_optab->handlers[(int) SImode].insn_code = CODE_FOR_cmpsi;\n-#endif\n-#ifdef HAVE_cmpdi\n-  if (HAVE_cmpdi)\n-    cmp_optab->handlers[(int) DImode].insn_code = CODE_FOR_cmpdi;\n-#endif\n-#ifdef HAVE_cmpti\n-  if (HAVE_cmpti)\n-    cmp_optab->handlers[(int) TImode].insn_code = CODE_FOR_cmpti;\n-#endif\n-#ifdef HAVE_cmpqf\n-  if (HAVE_cmpqf)\n-    cmp_optab->handlers[(int) QFmode].insn_code = CODE_FOR_cmpqf;\n-#endif\n-#ifdef HAVE_cmphf\n-  if (HAVE_cmphf)\n-    cmp_optab->handlers[(int) HFmode].insn_code = CODE_FOR_cmphf;\n-#endif\n-#ifdef HAVE_cmpsf\n-  if (HAVE_cmpsf)\n-    cmp_optab->handlers[(int) SFmode].insn_code = CODE_FOR_cmpsf;\n-#endif\n-#ifdef HAVE_cmpdf\n-  if (HAVE_cmpdf)\n-    cmp_optab->handlers[(int) DFmode].insn_code = CODE_FOR_cmpdf;\n-#endif\n-#ifdef HAVE_cmpxf\n-  if (HAVE_cmpxf)\n-    cmp_optab->handlers[(int) XFmode].insn_code = CODE_FOR_cmpxf;\n-#endif\n-#ifdef HAVE_cmptf\n-  if (HAVE_cmptf)\n-    cmp_optab->handlers[(int) TFmode].insn_code = CODE_FOR_cmptf;\n-#endif\n-  /* Comparison libcalls for integers MUST come in pairs, signed/unsigned.  */\n-  init_integral_libfuncs (cmp_optab, \"cmp\", '2');\n-  init_integral_libfuncs (ucmp_optab, \"ucmp\", '2');\n-  init_floating_libfuncs (cmp_optab, \"cmp\", '2');\n-\n-#ifdef HAVE_tstqi\n-  if (HAVE_tstqi)\n-    tst_optab->handlers[(int) QImode].insn_code = CODE_FOR_tstqi;\n-#endif\n-#ifdef HAVE_tsthi\n-  if (HAVE_tsthi)\n-    tst_optab->handlers[(int) HImode].insn_code = CODE_FOR_tsthi;\n-#endif\n-#ifdef HAVE_tstpsi\n-  if (HAVE_tstpsi)\n-    tst_optab->handlers[(int) PSImode].insn_code = CODE_FOR_tstpsi;\n-#endif\n-#ifdef HAVE_tstsi\n-  if (HAVE_tstsi)\n-    tst_optab->handlers[(int) SImode].insn_code = CODE_FOR_tstsi;\n-#endif\n-#ifdef HAVE_tstdi\n-  if (HAVE_tstdi)\n-    tst_optab->handlers[(int) DImode].insn_code = CODE_FOR_tstdi;\n-#endif\n-#ifdef HAVE_tstti\n-  if (HAVE_tstti)\n-    tst_optab->handlers[(int) TImode].insn_code = CODE_FOR_tstti;\n-#endif\n-#ifdef HAVE_tstqf\n-  if (HAVE_tstqf)\n-    tst_optab->handlers[(int) QFmode].insn_code = CODE_FOR_tstqf;\n-#endif\n-#ifdef HAVE_tsthf\n-  if (HAVE_tsthf)\n-    tst_optab->handlers[(int) HFmode].insn_code = CODE_FOR_tsthf;\n-#endif\n-#ifdef HAVE_tstsf\n-  if (HAVE_tstsf)\n-    tst_optab->handlers[(int) SFmode].insn_code = CODE_FOR_tstsf;\n-#endif\n-#ifdef HAVE_tstdf\n-  if (HAVE_tstdf)\n-    tst_optab->handlers[(int) DFmode].insn_code = CODE_FOR_tstdf;\n-#endif\n-#ifdef HAVE_tstxf\n-  if (HAVE_tstxf)\n-    tst_optab->handlers[(int) XFmode].insn_code = CODE_FOR_tstxf;\n-#endif\n-#ifdef HAVE_tsttf\n-  if (HAVE_tsttf)\n-    tst_optab->handlers[(int) TFmode].insn_code = CODE_FOR_tsttf;\n-#endif\n-\n-#ifdef HAVE_beq\n-  if (HAVE_beq)\n-    bcc_gen_fctn[(int) EQ] = gen_beq;\n-#endif\n-#ifdef HAVE_bne\n-  if (HAVE_bne)\n-    bcc_gen_fctn[(int) NE] = gen_bne;\n-#endif\n-#ifdef HAVE_bgt\n-  if (HAVE_bgt)\n-    bcc_gen_fctn[(int) GT] = gen_bgt;\n-#endif\n-#ifdef HAVE_bge\n-  if (HAVE_bge)\n-    bcc_gen_fctn[(int) GE] = gen_bge;\n-#endif\n-#ifdef HAVE_bgtu\n-  if (HAVE_bgtu)\n-    bcc_gen_fctn[(int) GTU] = gen_bgtu;\n-#endif\n-#ifdef HAVE_bgeu\n-  if (HAVE_bgeu)\n-    bcc_gen_fctn[(int) GEU] = gen_bgeu;\n-#endif\n-#ifdef HAVE_blt\n-  if (HAVE_blt)\n-    bcc_gen_fctn[(int) LT] = gen_blt;\n-#endif\n-#ifdef HAVE_ble\n-  if (HAVE_ble)\n-    bcc_gen_fctn[(int) LE] = gen_ble;\n-#endif\n-#ifdef HAVE_bltu\n-  if (HAVE_bltu)\n-    bcc_gen_fctn[(int) LTU] = gen_bltu;\n-#endif\n-#ifdef HAVE_bleu\n-  if (HAVE_bleu)\n-    bcc_gen_fctn[(int) LEU] = gen_bleu;\n-#endif\n-\n-  for (i = 0; i < NUM_RTX_CODE; i++)\n-    setcc_gen_code[i] = CODE_FOR_nothing;\n-\n-#ifdef HAVE_seq\n-  if (HAVE_seq)\n-    setcc_gen_code[(int) EQ] = CODE_FOR_seq;\n-#endif\n-#ifdef HAVE_sne\n-  if (HAVE_sne)\n-    setcc_gen_code[(int) NE] = CODE_FOR_sne;\n-#endif\n-#ifdef HAVE_sgt\n-  if (HAVE_sgt)\n-    setcc_gen_code[(int) GT] = CODE_FOR_sgt;\n-#endif\n-#ifdef HAVE_sge\n-  if (HAVE_sge)\n-    setcc_gen_code[(int) GE] = CODE_FOR_sge;\n-#endif\n-#ifdef HAVE_sgtu\n-  if (HAVE_sgtu)\n-    setcc_gen_code[(int) GTU] = CODE_FOR_sgtu;\n-#endif\n-#ifdef HAVE_sgeu\n-  if (HAVE_sgeu)\n-    setcc_gen_code[(int) GEU] = CODE_FOR_sgeu;\n-#endif\n-#ifdef HAVE_slt\n-  if (HAVE_slt)\n-    setcc_gen_code[(int) LT] = CODE_FOR_slt;\n-#endif\n-#ifdef HAVE_sle\n-  if (HAVE_sle)\n-    setcc_gen_code[(int) LE] = CODE_FOR_sle;\n-#endif\n-#ifdef HAVE_sltu\n-  if (HAVE_sltu)\n-    setcc_gen_code[(int) LTU] = CODE_FOR_sltu;\n-#endif\n-#ifdef HAVE_sleu\n-  if (HAVE_sleu)\n-    setcc_gen_code[(int) LEU] = CODE_FOR_sleu;\n-#endif\n-\n   extendsfdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__extendsfdf2\");\n   extendsfxf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__extendsfxf2\");\n   extendsftf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__extendsftf2\");"}]}