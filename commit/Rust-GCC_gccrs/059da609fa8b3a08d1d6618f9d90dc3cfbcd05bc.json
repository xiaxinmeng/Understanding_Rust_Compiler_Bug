{"sha": "059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU5ZGE2MDlmYThiM2EwOGQxZDY2MThmOWQ5MGRjM2NmYmNkMDViYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-11T16:22:57Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-11T16:28:19Z"}, "message": "c++: cp_tree_equal tweaks\n\nWhen comparing streamed trees we can encounter NON_LVALUE_EXPR and\nVIEW_CONVERT_EXPRs with null types.  Also, when checking a potential\nduplicate we don't want to reject PARM_DECLs with different contexts,\nif those two contexts are the two decls of interest.\n\n\tgcc/cp/\n\t* cp-tree.h (map_context_from, map_context_to): Declare.\n\t* module.cc (map_context_from, map_context_to): Define.\n\t* tree.c (cp_tree_equal): Check map_context_{from,to} for parm\n\tcontext difference.  Allow NON_LVALUE_EXPR and VIEW_CONVERT_EXPR\n\twith null types.", "tree": {"sha": "8ef1891954a5d66472c298c94ec1d481511dc6ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ef1891954a5d66472c298c94ec1d481511dc6ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75de6a2895f503905589934e30c68b9a5ec41f2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75de6a2895f503905589934e30c68b9a5ec41f2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75de6a2895f503905589934e30c68b9a5ec41f2f"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "f2a01d25d0c4773d3507c53c298c06a5005b9b32", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc", "patch": "@@ -5454,6 +5454,10 @@ extern int function_depth;\n    in structrual_comptypes.  */\n extern int comparing_specializations;\n \n+/* When comparing specializations permit context _FROM to match _TO.  */\n+extern tree map_context_from;\n+extern tree map_context_to;\n+\n /* In parser.c.  */\n \n /* Nonzero if we are parsing an unevaluated operand: an operand to"}, {"sha": "2417d67ee410e10dfb82952b4d77548dce1f4d16", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc", "patch": "@@ -65,6 +65,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"langhooks.h\"\n \n+/* During duplicate detection we need to tell some comparators that\n+   these are equivalent.  */\n+tree map_context_from;\n+tree map_context_to;\n+\n /* Id for dumping module information.  */\n int module_dump_id;\n "}, {"sha": "0584a7b725e49e25097bf2b60706667011789884", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=059da609fa8b3a08d1d6618f9d90dc3cfbcd05bc", "patch": "@@ -3837,7 +3837,12 @@ cp_tree_equal (tree t1, tree t2)\n \t template.  */\n \n       if (comparing_specializations\n-\t  && DECL_CONTEXT (t1) != DECL_CONTEXT (t2))\n+\t  && DECL_CONTEXT (t1) != DECL_CONTEXT (t2)\n+\t  /* Module duplicate checking can have t1 = new, t2 =\n+\t     existing, and they should be considered matching at this\n+\t     point.  */\n+\t  && (DECL_CONTEXT (t1) != map_context_from\n+\t      && DECL_CONTEXT (t2) != map_context_to))\n \t/* When comparing hash table entries, only an exact match is\n \t   good enough; we don't want to replace 'this' with the\n \t   version from another function.  But be more flexible\n@@ -3974,17 +3979,26 @@ cp_tree_equal (tree t1, tree t2)\n       return same_type_p (TRAIT_EXPR_TYPE1 (t1), TRAIT_EXPR_TYPE1 (t2))\n \t&& cp_tree_equal (TRAIT_EXPR_TYPE2 (t1), TRAIT_EXPR_TYPE2 (t2));\n \n+    case NON_LVALUE_EXPR:\n+    case VIEW_CONVERT_EXPR:\n+      /* Used for location wrappers with possibly NULL types.  */\n+      if (!TREE_TYPE (t1) || !TREE_TYPE (t2))\n+\t{\n+\t  if (TREE_TYPE (t1) || TREE_TYPE (t2))\n+\t    return false;\n+\t  break;\n+\t}\n+      /* FALLTHROUGH  */\n+\n     case CAST_EXPR:\n     case STATIC_CAST_EXPR:\n     case REINTERPRET_CAST_EXPR:\n     case CONST_CAST_EXPR:\n     case DYNAMIC_CAST_EXPR:\n     case IMPLICIT_CONV_EXPR:\n     case NEW_EXPR:\n-    CASE_CONVERT:\n-    case NON_LVALUE_EXPR:\n-    case VIEW_CONVERT_EXPR:\n     case BIT_CAST_EXPR:\n+    CASE_CONVERT:\n       if (!same_type_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n \treturn false;\n       /* Now compare operands as usual.  */"}]}