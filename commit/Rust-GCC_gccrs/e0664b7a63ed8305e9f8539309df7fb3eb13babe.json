{"sha": "e0664b7a63ed8305e9f8539309df7fb3eb13babe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2NjRiN2E2M2VkODMwNWU5Zjg1MzkzMDlkZjdmYjNlYjEzYmFiZQ==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2019-09-03T08:27:58Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-09-03T08:27:58Z"}, "message": "[AArch64] Add support for missing CPUs\n\nThis patch adds '-mcpu' options for following CPUs:\nCortex-A77, Cortex-A76AE, Cortex-A65, Cortex-A65AE, and Cortex-A34.\n\nRelated specifications are as following:\nhttps://developer.arm.com/ip-products/processors/cortex-a\n\nBootstraped/regtested for aarch64-none-linux-gnu.\n\n2019-09-03  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): New entries\n\tfor Cortex-A77, Cortex-A76AE, Cortex-A65, Cortex-A65AE, and\n\tCortex-A34.\n\t* config/aarch64/aarch64-tune.md: Regenerated.\n\t* doc/invoke.texi: Document the new processors.\n\nFrom-SVN: r275333", "tree": {"sha": "bd174700ec04aefc8d03659a8811ab0f0b8b1161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd174700ec04aefc8d03659a8811ab0f0b8b1161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0664b7a63ed8305e9f8539309df7fb3eb13babe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0664b7a63ed8305e9f8539309df7fb3eb13babe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0664b7a63ed8305e9f8539309df7fb3eb13babe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0664b7a63ed8305e9f8539309df7fb3eb13babe/comments", "author": null, "committer": null, "parents": [{"sha": "bca3073692c0858f4b8151faaf8ccd963541e787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca3073692c0858f4b8151faaf8ccd963541e787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca3073692c0858f4b8151faaf8ccd963541e787"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "3c90c326730f45031768614d799151707d660105", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0664b7a63ed8305e9f8539309df7fb3eb13babe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0664b7a63ed8305e9f8539309df7fb3eb13babe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0664b7a63ed8305e9f8539309df7fb3eb13babe", "patch": "@@ -1,3 +1,11 @@\n+2019-09-03  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): New entries\n+\tfor Cortex-A77, Cortex-A76AE, Cortex-A65, Cortex-A65AE, and\n+\tCortex-A34.\n+\t* config/aarch64/aarch64-tune.md: Regenerated.\n+\t* doc/invoke.texi: Document the new processors.\n+\n 2019-09-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64-option-extensions.def (sb): Add feature"}, {"sha": "053c6390e747cb9c818fe29a9b22990143b260ad", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0664b7a63ed8305e9f8539309df7fb3eb13babe/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0664b7a63ed8305e9f8539309df7fb3eb13babe/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=e0664b7a63ed8305e9f8539309df7fb3eb13babe", "patch": "@@ -46,6 +46,7 @@\n /* ARMv8-A Architecture Processors.  */\n \n /* ARM ('A') cores. */\n+AARCH64_CORE(\"cortex-a34\",  cortexa34, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa35, 0x41, 0xd02, -1)\n AARCH64_CORE(\"cortex-a35\",  cortexa35, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa35, 0x41, 0xd04, -1)\n AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa53, 0x41, 0xd03, -1)\n AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, 0x41, 0xd07, -1)\n@@ -100,6 +101,10 @@ AARCH64_CORE(\"thunderx2t99\",  thunderx2t99,  thunderx2t99, 8_1A,  AARCH64_FL_FOR\n AARCH64_CORE(\"cortex-a55\",  cortexa55, cortexa53, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, cortexa53, 0x41, 0xd05, -1)\n AARCH64_CORE(\"cortex-a75\",  cortexa75, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, cortexa73, 0x41, 0xd0a, -1)\n AARCH64_CORE(\"cortex-a76\",  cortexa76, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, neoversen1, 0x41, 0xd0b, -1)\n+AARCH64_CORE(\"cortex-a76ae\",  cortexa76ae, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa72, 0x41, 0xd0e, -1)\n+AARCH64_CORE(\"cortex-a77\",  cortexa77, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa72, 0x41, 0xd0d, -1)\n+AARCH64_CORE(\"cortex-a65\",  cortexa65, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa73, 0x41, 0xd06, -1)\n+AARCH64_CORE(\"cortex-a65ae\",  cortexa65ae, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa73, 0x41, 0xd43, -1)\n AARCH64_CORE(\"ares\",  ares, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd0c, -1)\n AARCH64_CORE(\"neoverse-n1\",  neoversen1, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd0c, -1)\n AARCH64_CORE(\"neoverse-e1\",  neoversee1, cortexa53, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa53, 0x41, 0xd4a, -1)"}, {"sha": "a6a14b7fc77729ce485b4decf8b3cc250ab8bb89", "filename": "gcc/config/aarch64/aarch64-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0664b7a63ed8305e9f8539309df7fb3eb13babe/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0664b7a63ed8305e9f8539309df7fb3eb13babe/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md?ref=e0664b7a63ed8305e9f8539309df7fb3eb13babe", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from aarch64-cores.def\n (define_attr \"tune\"\n-\t\"cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,ares,neoversen1,neoversee1,tsv110,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55\"\n+\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa65,cortexa65ae,ares,neoversen1,neoversee1,tsv110,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55\"\n \t(const (symbol_ref \"((enum attr_tune) aarch64_tune)\")))"}, {"sha": "cfa3f867d15fa30cbeca3e926adfa33cd842a63c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0664b7a63ed8305e9f8539309df7fb3eb13babe/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0664b7a63ed8305e9f8539309df7fb3eb13babe/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e0664b7a63ed8305e9f8539309df7fb3eb13babe", "patch": "@@ -15953,7 +15953,9 @@ Specify the name of the target processor for which GCC should tune the\n performance of the code.  Permissible values for this option are:\n @samp{generic}, @samp{cortex-a35}, @samp{cortex-a53}, @samp{cortex-a55},\n @samp{cortex-a57}, @samp{cortex-a72}, @samp{cortex-a73}, @samp{cortex-a75},\n-@samp{cortex-a76}, @samp{ares}, @samp{exynos-m1}, @samp{emag}, @samp{falkor},\n+@samp{cortex-a76}, @samp{cortex-a76ae}, @samp{cortex-a77},\n+@samp{cortex-a65}, @samp{cortex-a65ae}, @samp{cortex-a34},\n+@samp{ares}, @samp{exynos-m1}, @samp{emag}, @samp{falkor},\n @samp{neoverse-e1},@samp{neoverse-n1},@samp{qdf24xx}, @samp{saphira},\n @samp{phecda}, @samp{xgene1}, @samp{vulcan}, @samp{octeontx},\n @samp{octeontx81},  @samp{octeontx83}, @samp{thunderx}, @samp{thunderxt88},"}]}