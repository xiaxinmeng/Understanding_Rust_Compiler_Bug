{"sha": "feca59ff1144d0657b03da31bfcc79948a9b3c2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVjYTU5ZmYxMTQ0ZDA2NTdiMDNkYTMxYmZjYzc5OTQ4YTliM2MyYw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2015-09-20T16:43:28Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-09-20T16:43:28Z"}, "message": "[AArch64][4/5] Remove redundant code\n\n2015-09-20  Wilco Dijkstra  <wdijkstr@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_internal_mov_immediate): Remove\n\tredundant immediate generation code.\n\nFrom-SVN: r227949", "tree": {"sha": "b37097c720244ac97240842b8acb1cbe9bb1c0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b37097c720244ac97240842b8acb1cbe9bb1c0eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feca59ff1144d0657b03da31bfcc79948a9b3c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feca59ff1144d0657b03da31bfcc79948a9b3c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feca59ff1144d0657b03da31bfcc79948a9b3c2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feca59ff1144d0657b03da31bfcc79948a9b3c2c/comments", "author": null, "committer": null, "parents": [{"sha": "8fcbb4e328b3d7146160b33a8b4a396252127b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcbb4e328b3d7146160b33a8b4a396252127b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fcbb4e328b3d7146160b33a8b4a396252127b4e"}], "stats": {"total": 65, "additions": 5, "deletions": 60}, "files": [{"sha": "befa118b48bfb1e9a32e36c9a131e10e30b2823b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feca59ff1144d0657b03da31bfcc79948a9b3c2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feca59ff1144d0657b03da31bfcc79948a9b3c2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=feca59ff1144d0657b03da31bfcc79948a9b3c2c", "patch": "@@ -1,3 +1,8 @@\n+2015-09-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_internal_mov_immediate): Remove\n+\tredundant immediate generation code.\n+\n 2015-09-20  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_bitmasks): Remove."}, {"sha": "af8ec3ccae06db4314a2ba70fe05466ac71cdfb9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feca59ff1144d0657b03da31bfcc79948a9b3c2c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feca59ff1144d0657b03da31bfcc79948a9b3c2c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=feca59ff1144d0657b03da31bfcc79948a9b3c2c", "patch": "@@ -1437,8 +1437,6 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n   int i;\n   bool first;\n   unsigned HOST_WIDE_INT val, val2;\n-  bool subtargets;\n-  rtx subtarget;\n   int one_match, zero_match, first_not_ffff_match;\n   int num_insns = 0;\n \n@@ -1468,7 +1466,6 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n   /* Remaining cases are all for DImode.  */\n \n   val = INTVAL (imm);\n-  subtargets = optimize && can_create_pseudo_p ();\n \n   one_match = 0;\n   zero_match = 0;\n@@ -1506,63 +1503,6 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n   if (zero_match == 2)\n     goto simple_sequence;\n \n-  mask = 0x0ffff0000UL;\n-  for (i = 16; i < 64; i += 16, mask <<= 16)\n-    {\n-      HOST_WIDE_INT comp = mask & ~(mask - 1);\n-\n-      if (aarch64_uimm12_shift (val - (val & mask)))\n-\t{\n-\t  if (generate)\n-\t    {\n-\t      subtarget = subtargets ? gen_reg_rtx (DImode) : dest;\n-\t      emit_insn (gen_rtx_SET (subtarget, GEN_INT (val & mask)));\n-\t      emit_insn (gen_adddi3 (dest, subtarget,\n-\t\t\t\t     GEN_INT (val - (val & mask))));\n-\t    }\n-\t  num_insns += 2;\n-\t  return num_insns;\n-\t}\n-      else if (aarch64_uimm12_shift (-(val - ((val + comp) & mask))))\n-\t{\n-\t  if (generate)\n-\t    {\n-\t      subtarget = subtargets ? gen_reg_rtx (DImode) : dest;\n-\t      emit_insn (gen_rtx_SET (subtarget,\n-\t\t\t\t      GEN_INT ((val + comp) & mask)));\n-\t      emit_insn (gen_adddi3 (dest, subtarget,\n-\t\t\t\t     GEN_INT (val - ((val + comp) & mask))));\n-\t    }\n-\t  num_insns += 2;\n-\t  return num_insns;\n-\t}\n-      else if (aarch64_uimm12_shift (val - ((val - comp) | ~mask)))\n-\t{\n-\t  if (generate)\n-\t    {\n-\t      subtarget = subtargets ? gen_reg_rtx (DImode) : dest;\n-\t      emit_insn (gen_rtx_SET (subtarget,\n-\t\t\t\t      GEN_INT ((val - comp) | ~mask)));\n-\t      emit_insn (gen_adddi3 (dest, subtarget,\n-\t\t\t\t     GEN_INT (val - ((val - comp) | ~mask))));\n-\t    }\n-\t  num_insns += 2;\n-\t  return num_insns;\n-\t}\n-      else if (aarch64_uimm12_shift (-(val - (val | ~mask))))\n-\t{\n-\t  if (generate)\n-\t    {\n-\t      subtarget = subtargets ? gen_reg_rtx (DImode) : dest;\n-\t      emit_insn (gen_rtx_SET (subtarget, GEN_INT (val | ~mask)));\n-\t      emit_insn (gen_adddi3 (dest, subtarget,\n-\t\t\t\t     GEN_INT (val - (val | ~mask))));\n-\t    }\n-\t  num_insns += 2;\n-\t  return num_insns;\n-\t}\n-    }\n-\n   if (zero_match != 2 && one_match != 2)\n     {\n       /* Try emitting a bitmask immediate with a movk replacing 16 bits."}]}