{"sha": "30719c65a90de4791db42c7c1b7cc3e17604f828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3MTljNjVhOTBkZTQ3OTFkYjQyYzdjMWI3Y2MzZTE3NjA0ZjgyOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-05-20T16:02:35Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-05-20T16:02:35Z"}, "message": "* cgraph.c (hash_node, eq_node, cgraph_node, cgraph_remove_node)\n\t(cgraph_varpool_hash_node, eq_cgraph_varpool_node)\n\t(cgraph_varpool_node): Hash on the pointer to the decl, not\n\tthe DECL_UID.  Fixes 64-bit bootstrap failure.\n\nFrom-SVN: r82059", "tree": {"sha": "fe1a63458dd4e811e3f07a189475001d029dcc1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe1a63458dd4e811e3f07a189475001d029dcc1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30719c65a90de4791db42c7c1b7cc3e17604f828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30719c65a90de4791db42c7c1b7cc3e17604f828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30719c65a90de4791db42c7c1b7cc3e17604f828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30719c65a90de4791db42c7c1b7cc3e17604f828/comments", "author": null, "committer": null, "parents": [{"sha": "692603556b895a3a337b5a82e0012f69e8707896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692603556b895a3a337b5a82e0012f69e8707896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692603556b895a3a337b5a82e0012f69e8707896"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "7583f313c25cd8a6d1c12565d65438dcf71e23b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30719c65a90de4791db42c7c1b7cc3e17604f828/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30719c65a90de4791db42c7c1b7cc3e17604f828/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30719c65a90de4791db42c7c1b7cc3e17604f828", "patch": "@@ -1,3 +1,10 @@\n+2004-05-20  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* cgraph.c (hash_node, eq_node, cgraph_node, cgraph_remove_node)\n+\t(cgraph_varpool_hash_node, eq_cgraph_varpool_node)\n+\t(cgraph_varpool_node): Hash on the pointer to the decl, not\n+\tthe DECL_UID.  Fixes 64-bit bootstrap failure.\n+\n 2004-05-20  Richard Earnshaw <rearnsha@arm.com>\n \n \t* arm.md (ite_ne_zeroextractsi, ite_ne_zeroextractsi_shifted): Ensure"}, {"sha": "a1f137af60e61fc68bd5b2ac1801ec579e8be8bf", "filename": "gcc/cgraph.c", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30719c65a90de4791db42c7c1b7cc3e17604f828/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30719c65a90de4791db42c7c1b7cc3e17604f828/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=30719c65a90de4791db42c7c1b7cc3e17604f828", "patch": "@@ -139,15 +139,15 @@ static int eq_node (const void *, const void *);\n static hashval_t\n hash_node (const void *p)\n {\n-  return ((hashval_t) DECL_UID (((struct cgraph_node *) p)->decl));\n+  return htab_hash_pointer (((struct cgraph_node *) p)->decl);\n }\n \n /* Returns nonzero if P1 and P2 are equal.  */\n \n static int\n eq_node (const void *p1, const void *p2)\n {\n-  return (DECL_UID (((struct cgraph_node *) p1)->decl) == (unsigned int)p2);\n+  return (void *)((struct cgraph_node *) p1)->decl == p2;\n }\n \n /* Allocate new callgraph node and insert it into basic data structures.  */\n@@ -181,10 +181,8 @@ cgraph_node (tree decl)\n     cgraph_hash = htab_create_ggc (10, hash_node, eq_node, NULL);\n \n   slot = (struct cgraph_node **)\n-    htab_find_slot_with_hash (cgraph_hash,\n-\t\t\t      (void *)DECL_UID (decl),\n-\t\t\t      (hashval_t)DECL_UID (decl),\n-\t\t\t      INSERT);\n+    htab_find_slot_with_hash (cgraph_hash, decl,\n+\t\t\t      htab_hash_pointer (decl), INSERT);\n   if (*slot)\n     return *slot;\n \n@@ -326,10 +324,8 @@ cgraph_remove_node (struct cgraph_node *node)\n   if (node->next)\n     node->next->previous = node->previous;\n   slot = \n-    htab_find_slot_with_hash (cgraph_hash,\n-\t\t\t      (void *)DECL_UID (node->decl),\n-\t\t\t      (hashval_t)DECL_UID (node->decl),\n-\t\t\t      NO_INSERT);\n+    htab_find_slot_with_hash (cgraph_hash, node->decl,\n+\t\t\t      htab_hash_pointer (node->decl), NO_INSERT);\n   if (*slot == node)\n     {\n       if (node->next_clone)\n@@ -532,17 +528,15 @@ dump_cgraph (FILE *f)\n static hashval_t\n cgraph_varpool_hash_node (const void *p)\n {\n-  return ((hashval_t) DECL_UID (((struct cgraph_varpool_node *) p)->decl));\n+  return htab_hash_pointer (((struct cgraph_varpool_node *) p)->decl);\n }\n \n /* Returns nonzero if P1 and P2 are equal.  */\n \n static int\n eq_cgraph_varpool_node (const void *p1, const void *p2)\n {\n-  return (DECL_UID (((struct cgraph_varpool_node *) p1)->decl)\n-\t  == (unsigned int) p2);\n-\n+  return (void *)((struct cgraph_varpool_node *) p1)->decl == p2;\n }\n \n /* Return cgraph_varpool node assigned to DECL.  Create new one when needed.  */\n@@ -559,10 +553,8 @@ cgraph_varpool_node (tree decl)\n     cgraph_varpool_hash = htab_create_ggc (10, cgraph_varpool_hash_node,\n \t\t\t\t           eq_cgraph_varpool_node, NULL);\n   slot = (struct cgraph_varpool_node **)\n-    htab_find_slot_with_hash (cgraph_varpool_hash,\n-\t\t\t      (void *)DECL_UID (decl),\n-\t\t\t      (hashval_t)DECL_UID (decl),\n-\t\t\t      INSERT);\n+    htab_find_slot_with_hash (cgraph_varpool_hash, decl,\n+\t\t\t      htab_hash_pointer (decl), INSERT);\n   if (*slot)\n     return *slot;\n   node = ggc_alloc_cleared (sizeof (*node));"}]}