{"sha": "2743360a6e3c65400577b3b79f7fc3f8a30b021e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc0MzM2MGE2ZTNjNjU0MDA1NzdiM2I3OWY3ZmMzZjhhMzBiMDIxZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:23:40Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:23:40Z"}, "message": "(movxf, tstxf, extendsfxf2, extenddfxf2): New patterns.\n\n(truncxfdf2, truncxfsf2, floatsixf2, floathixf2, floatqixf2): Likewise.\n(ftruncxf2, fixxfqi2, fixxfhi2, fixxfsi2): Likewise.\n(addxf3, subxf3, mulxf3, divxf3, negxf2, absxf2, sqrtxf2): Likewise.\n\nFrom-SVN: r3973", "tree": {"sha": "22e44033366f22c9d1df967bd4a6f9d11109c749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22e44033366f22c9d1df967bd4a6f9d11109c749"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2743360a6e3c65400577b3b79f7fc3f8a30b021e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2743360a6e3c65400577b3b79f7fc3f8a30b021e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2743360a6e3c65400577b3b79f7fc3f8a30b021e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2743360a6e3c65400577b3b79f7fc3f8a30b021e/comments", "author": null, "committer": null, "parents": [{"sha": "f6ba6a91603140e5c8aec983ac0e3f48395013c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ba6a91603140e5c8aec983ac0e3f48395013c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ba6a91603140e5c8aec983ac0e3f48395013c9"}], "stats": {"total": 360, "additions": 358, "deletions": 2}, "files": [{"sha": "ef98e562560927343bdd08c41cc9629922067ef2", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 358, "deletions": 2, "changes": 360, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2743360a6e3c65400577b3b79f7fc3f8a30b021e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2743360a6e3c65400577b3b79f7fc3f8a30b021e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=2743360a6e3c65400577b3b79f7fc3f8a30b021e", "patch": "@@ -1,6 +1,6 @@\n ;;- Machine description for GNU compiler\n ;;- Motorola 68000 Version\n-;;   Copyright (C) 1987, 1988 Free Software Foundation, Inc.\n+;;   Copyright (C) 1987, 1988, 1993 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -1088,6 +1088,58 @@\n }\n \")\n \n+(define_expand \"movxf\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:XF 1 \"general_operand\" \"\"))]\n+  \"TARGET_68881\"\n+  \"\n+{\n+  if (CONSTANT_P (operands[1]))\n+    {\n+      operands[1] = force_const_mem (XFmode, operands[1]);\n+      if (! memory_address_p (XFmode, XEXP (operands[1], 0))\n+\t  && ! reload_in_progress)\n+\toperands[1] = change_address (operands[1], XFmode,\n+\t\t\t\t      XEXP (operands[1], 0));\n+    }\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,!r,!f\")\n+\t(match_operand:XF 1 \"nonimmediate_operand\" \"m,f,f,f,r\"))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[0]))\n+    {\n+      if (FP_REG_P (operands[1]))\n+\treturn \\\"fmove%.x %1,%0\\\";\n+      if (REG_P (operands[1]))\n+\t{\n+\t  rtx xoperands[2];\n+\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 2);\n+\t  output_asm_insn (\\\"move%.l %1,%-\\\", xoperands);\n+\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+\t  output_asm_insn (\\\"move%.l %1,%-\\\", xoperands);\n+\t  output_asm_insn (\\\"move%.l %1,%-\\\", operands);\n+\t  return \\\"fmove%.x %+,%0\\\";\n+\t}\n+      if (GET_CODE (operands[1]) == CONST_DOUBLE)\n+        return \\\"fmove%.x %1,%0\\\";\n+      return \\\"fmove%.x %f1,%0\\\";\n+    }\n+  if (REG_P (operands[0]))\n+    {\n+      output_asm_insn (\\\"fmove%.x %f1,%-\\;move%.l %+,%0\\\", operands);\n+      operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+      output_asm_insn (\\\"move%.l %+,%0\\\", operands);\n+      operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+      return \\\"move%.l %+,%0\\\";\n+    }\n+  return \\\"fmove%.x %f1,%0\\\";\n+}\n+\")\n+\n ;; movdi can apply to fp regs in some cases\n (define_insn \"movdi\"\n   ;; Let's see if it really still needs to handle fp regs, and, if so, why.\n@@ -1568,7 +1620,7 @@\n ;; New routines to convert floating-point values to integers\n ;; to be used on the '040.  These should be faster than trapping\n ;; into the kernel to emulate fintrz.  They should also be faster\n-;; than calling the subroutines fixsfsi() or fixdfsi().\n+;; than calling the subroutines fixsfsi or fixdfsi.\n \n (define_insn \"fix_truncdfsi2\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=dm\")\n@@ -5200,3 +5252,307 @@\n    fpsm%.s %3,%w2,%w1,%0\n    fpsm%.s %x3,%2,%x1,%0\n    fpsm%.s %x3,%2,%x1,%0\")\n+\n+(define_insn \"tstxf\"\n+  [(set (cc0)\n+\t(match_operand:XF 0 \"nonimmediate_operand\" \"fm\"))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  cc_status.flags = CC_IN_68881;\n+  return \\\"ftst%.x %0\\\";\n+}\")\n+\n+\n+(define_expand \"cmpxf\"\n+  [(set (cc0)\n+\t(compare (match_operand:XF 0 \"general_operand\" \"f,mG\")\n+\t\t (match_operand:XF 1 \"general_operand\" \"fmG,f\")))]\n+  \"TARGET_68881\"\n+  \"\n+{\n+  if (CONSTANT_P (operands[0]))\n+      operands[0] = force_const_mem (XFmode, operands[0]);\n+  if (CONSTANT_P (operands[1]))\n+      operands[1] = force_const_mem (XFmode, operands[1]);\n+}\")\n+\n+(define_insn \"\"\n+  [(set (cc0)\n+\t(compare (match_operand:XF 0 \"nonimmediate_operand\" \"f,mG\")\n+\t\t (match_operand:XF 1 \"nonimmediate_operand\" \"fmG,f\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  cc_status.flags = CC_IN_68881;\n+#ifdef HPUX_ASM\n+  if (REG_P (operands[0]))\n+    {\n+      if (REG_P (operands[1]))\n+\treturn \\\"fcmp%.x %0,%1\\\";\n+      else\n+        return \\\"fcmp%.x %0,%f1\\\";\n+    }\n+  cc_status.flags |= CC_REVERSED;\n+  return \\\"fcmp%.x %1,%f0\\\";\n+#else\n+  if (REG_P (operands[0]))\n+    {\n+      if (REG_P (operands[1]))\n+\treturn \\\"fcmp%.x %1,%0\\\";\n+      else\n+        return \\\"fcmp%.x %f1,%0\\\";\n+    }\n+  cc_status.flags |= CC_REVERSED;\n+  return \\\"fcmp%.x %f0,%1\\\";\n+#endif\n+}\")\n+\n+(define_insn \"extendsfxf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=fm,f\")\n+\t(float_extend:XF (match_operand:SF 1 \"general_operand\" \"f,m\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[0]) && FP_REG_P (operands[1]))\n+    {\n+      if (REGNO (operands[0]) == REGNO (operands[1]))\n+\t{\n+\t  /* Extending float to double in an fp-reg is a no-op.\n+\t     NOTICE_UPDATE_CC has already assumed that the\n+\t     cc will be set.  So cancel what it did.  */\n+\t  cc_status = cc_prev_status;\n+\t  return \\\"\\\";\n+\t}\n+      return \\\"f%$move%.x %1,%0\\\";\n+    }\n+  if (FP_REG_P (operands[0]))\n+    return \\\"f%$move%.s %f1,%0\\\";\n+  return \\\"fmove%.x %f1,%0\\\";\n+}\")\n+\n+\n+(define_insn \"extenddfxf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=fm,f\")\n+\t(float_extend:XF\n+          (match_operand:DF 1 \"general_operand\" \"f,m\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[0]) && FP_REG_P (operands[1]))\n+    {\n+      if (REGNO (operands[0]) == REGNO (operands[1]))\n+\t{\n+\t  /* Extending float to double in an fp-reg is a no-op.\n+\t     NOTICE_UPDATE_CC has already assumed that the\n+\t     cc will be set.  So cancel what it did.  */\n+\t  cc_status = cc_prev_status;\n+\t  return \\\"\\\";\n+\t}\n+      return \\\"fmove%.x %1,%0\\\";\n+    }\n+  if (FP_REG_P (operands[0]))\n+    return \\\"f%&move%.d %f1,%0\\\";\n+  return \\\"fmove%.x %f1,%0\\\";\n+}\")\n+\n+(define_insn \"truncxfdf2\"\n+  [(set (match_operand:DF 0 \"general_operand\" \"=m,!r\")\n+\t(float_truncate:DF\n+          (match_operand:XF 1 \"general_operand\" \"f,f\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (REG_P (operands[0]))\n+    {\n+      output_asm_insn (\\\"fmove%.d %f1,%-\\;move%.l %+,%0\\\", operands);\n+      operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+      return \\\"move%.l %+,%0\\\";\n+    }\n+  return \\\"fmove%.d %f1,%0\\\";\n+}\")\n+ \n+(define_insn \"truncxfsf2\"\n+  [(set (match_operand:SF 0 \"general_operand\" \"=dm\")\n+\t(float_truncate:SF\n+\t  (match_operand:XF 1 \"general_operand\" \"f\")))]\n+  \"TARGET_68881\"\n+  \"fmove%.s %f1,%0\")\n+\n+(define_insn \"floatsixf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(float:XF (match_operand:SI 1 \"general_operand\" \"dmi\")))]\n+  \"TARGET_68881\"\n+  \"fmove%.l %1,%0\")\n+\n+(define_insn \"floathixf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(float:XF (match_operand:HI 1 \"general_operand\" \"dmn\")))]\n+  \"TARGET_68881\"\n+  \"fmove%.w %1,%0\")\n+\n+(define_insn \"floatqixf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(float:XF (match_operand:QI 1 \"general_operand\" \"dmn\")))]\n+  \"TARGET_68881\"\n+  \"fmove%.b %1,%0\")\n+\n+(define_insn \"ftruncxf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(fix:XF (match_operand:XF 1 \"general_operand\" \"fFm\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[1]))\n+    return \\\"fintrz%.x %f1,%0\\\";\n+  return \\\"fintrz%.x %f1,%0\\\";\n+}\")\n+\n+(define_insn \"fixxfqi2\"\n+  [(set (match_operand:QI 0 \"general_operand\" \"=dm\")\n+\t(fix:QI (match_operand:XF 1 \"general_operand\" \"f\")))]\n+  \"TARGET_68881\"\n+  \"fmove%.b %1,%0\")\n+\n+(define_insn \"fixxfhi2\"\n+  [(set (match_operand:HI 0 \"general_operand\" \"=dm\")\n+\t(fix:HI (match_operand:XF 1 \"general_operand\" \"f\")))]\n+  \"TARGET_68881\"\n+  \"fmove%.w %1,%0\")\n+\n+(define_insn \"fixxfsi2\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=dm\")\n+\t(fix:SI (match_operand:XF 1 \"general_operand\" \"f\")))]\n+  \"TARGET_68881\"\n+  \"fmove%.l %1,%0\")\n+\n+(define_expand \"addxf3\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"\")\n+\t(plus:XF (match_operand:XF 1 \"general_operand\" \"\")\n+\t\t (match_operand:XF 2 \"general_operand\" \"\")))]\n+  \"TARGET_68881\"\n+  \"\n+{\n+  if (CONSTANT_P (operands[1]))\n+    operands[1] = force_const_mem (XFmode, operands[1]);\n+  if (CONSTANT_P (operands[2]))\n+    operands[2] = force_const_mem (XFmode, operands[2]);\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(plus:XF (match_operand:XF 1 \"nonimmediate_operand\" \"%0\")\n+\t\t (match_operand:XF 2 \"nonimmediate_operand\" \"fmG\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (REG_P (operands[2]))\n+    return \\\"fadd%.x %2,%0\\\";\n+  return \\\"fadd%.x %f2,%0\\\";\n+}\")\n+\n+(define_expand \"subxf3\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"\")\n+\t(minus:XF (match_operand:XF 1 \"general_operand\" \"\")\n+\t\t (match_operand:XF 2 \"general_operand\" \"\")))]\n+  \"TARGET_68881\"\n+  \"\n+{\n+  if (CONSTANT_P (operands[1]))\n+    operands[1] = force_const_mem (XFmode, operands[1]);\n+  if (CONSTANT_P (operands[2]))\n+    operands[2] = force_const_mem (XFmode, operands[2]);\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(minus:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0\")\n+\t\t (match_operand:XF 2 \"nonimmediate_operand\" \"fmG\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (REG_P (operands[2]))\n+    return \\\"fsub%.x %2,%0\\\";\n+  return \\\"fsub%.x %f2,%0\\\";\n+}\")\n+\n+(define_expand \"mulxf3\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"\")\n+\t(mult:XF (match_operand:XF 1 \"general_operand\" \"\")\n+\t\t(match_operand:XF 2 \"general_operand\" \"\")))]\n+  \"TARGET_68881\"\n+  \"\n+{\n+  if (CONSTANT_P (operands[1]))\n+    operands[1] = force_const_mem (XFmode, operands[1]);\n+  if (CONSTANT_P (operands[2]))\n+    operands[2] = force_const_mem (XFmode, operands[2]);\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(mult:XF (match_operand:XF 1 \"nonimmediate_operand\" \"%0\")\n+\t\t(match_operand:XF 2 \"nonimmediate_operand\" \"fmG\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (REG_P (operands[2]))\n+    return \\\"fmul%.x %2,%0\\\";\n+  return \\\"fmul%.x %f2,%0\\\";\n+}\")\n+\n+(define_expand \"divxf3\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"\")\n+\t(div:XF (match_operand:XF 1 \"general_operand\" \"\")\n+\t\t(match_operand:XF 2 \"general_operand\" \"\")))]\n+  \"TARGET_68881\"\n+  \"\n+{\n+  if (CONSTANT_P (operands[1]))\n+    operands[1] = force_const_mem (XFmode, operands[1]);\n+  if (CONSTANT_P (operands[2]))\n+    operands[2] = force_const_mem (XFmode, operands[2]);\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(div:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0\")\n+\t\t(match_operand:XF 2 \"nonimmediate_operand\" \"fmG\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (REG_P (operands[2]))\n+    return \\\"fdiv%.x %2,%0\\\";\n+  return \\\"fdiv%.x %f2,%0\\\";\n+}\")\n+\n+(define_insn \"negxf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"fmF\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (REG_P (operands[1]) && ! DATA_REG_P (operands[1]))\n+    return \\\"fneg%.x %1,%0\\\";\n+  return \\\"fneg%.x %f1,%0\\\";\n+}\")\n+\n+(define_insn \"absxf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(abs:XF (match_operand:XF 1 \"nonimmediate_operand\" \"fmF\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (REG_P (operands[1]) && ! DATA_REG_P (operands[1]))\n+    return \\\"fabs%.x %1,%0\\\";\n+  return \\\"fabs%.x %f1,%0\\\";\n+}\")\n+\n+(define_insn \"sqrtxf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(sqrt:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+    return \\\"fsqrt%.x %1,%0\\\";\n+}\")"}]}