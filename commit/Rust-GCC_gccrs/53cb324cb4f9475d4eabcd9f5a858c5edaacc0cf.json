{"sha": "53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjYjMyNGNiNGY5NDc1ZDRlYWJjZDlmNWE4NThjNWVkYWFjYzBjZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-09T22:32:08Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-09T22:32:08Z"}, "message": "analyzer: make various region_model member functions const\n\ngcc/analyzer/ChangeLog:\n\t* region-model.cc (region_model::get_lvalue_1): Make const.\n\t(region_model::get_lvalue): Likewise.\n\t(region_model::get_rvalue_1): Likewise.\n\t(region_model::get_rvalue): Likewise.\n\t(region_model::deref_rvalue): Likewise.\n\t(region_model::get_rvalue_for_bits): Likewise.\n\t* region-model.h (region_model::get_lvalue): Likewise.\n\t(region_model::get_rvalue): Likewise.\n\t(region_model::deref_rvalue): Likewise.\n\t(region_model::get_rvalue_for_bits): Likewise.\n\t(region_model::get_lvalue_1): Likewise.\n\t(region_model::get_rvalue_1): Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "b2614136e16692e028ded7f25beacca831d0dcd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2614136e16692e028ded7f25beacca831d0dcd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb3a3bb8ce4ce2420919d03a3e9f9a2a4297c4d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3a3bb8ce4ce2420919d03a3e9f9a2a4297c4d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb3a3bb8ce4ce2420919d03a3e9f9a2a4297c4d3"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "551ee796b11c0b4d241bb92651391e572a6ac72d", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf", "patch": "@@ -1213,7 +1213,7 @@ region_model::handle_phi (const gphi *phi,\n    emitting any diagnostics to CTXT.  */\n \n const region *\n-region_model::get_lvalue_1 (path_var pv, region_model_context *ctxt)\n+region_model::get_lvalue_1 (path_var pv, region_model_context *ctxt) const\n {\n   tree expr = pv.m_tree;\n \n@@ -1312,7 +1312,7 @@ assert_compat_types (tree src_type, tree dst_type)\n    emitting any diagnostics to CTXT.  */\n \n const region *\n-region_model::get_lvalue (path_var pv, region_model_context *ctxt)\n+region_model::get_lvalue (path_var pv, region_model_context *ctxt) const\n {\n   if (pv.m_tree == NULL_TREE)\n     return NULL;\n@@ -1326,7 +1326,7 @@ region_model::get_lvalue (path_var pv, region_model_context *ctxt)\n    recent stack frame if it's a local).  */\n \n const region *\n-region_model::get_lvalue (tree expr, region_model_context *ctxt)\n+region_model::get_lvalue (tree expr, region_model_context *ctxt) const\n {\n   return get_lvalue (path_var (expr, get_stack_depth () - 1), ctxt);\n }\n@@ -1337,7 +1337,7 @@ region_model::get_lvalue (tree expr, region_model_context *ctxt)\n    emitting any diagnostics to CTXT.  */\n \n const svalue *\n-region_model::get_rvalue_1 (path_var pv, region_model_context *ctxt)\n+region_model::get_rvalue_1 (path_var pv, region_model_context *ctxt) const\n {\n   gcc_assert (pv.m_tree);\n \n@@ -1441,7 +1441,7 @@ region_model::get_rvalue_1 (path_var pv, region_model_context *ctxt)\n    emitting any diagnostics to CTXT.  */\n \n const svalue *\n-region_model::get_rvalue (path_var pv, region_model_context *ctxt)\n+region_model::get_rvalue (path_var pv, region_model_context *ctxt) const\n {\n   if (pv.m_tree == NULL_TREE)\n     return NULL;\n@@ -1457,7 +1457,7 @@ region_model::get_rvalue (path_var pv, region_model_context *ctxt)\n    recent stack frame if it's a local).  */\n \n const svalue *\n-region_model::get_rvalue (tree expr, region_model_context *ctxt)\n+region_model::get_rvalue (tree expr, region_model_context *ctxt) const\n {\n   return get_rvalue (path_var (expr, get_stack_depth () - 1), ctxt);\n }\n@@ -1624,7 +1624,7 @@ region_model::region_exists_p (const region *reg) const\n \n const region *\n region_model::deref_rvalue (const svalue *ptr_sval, tree ptr_tree,\n-\t\t\t    region_model_context *ctxt)\n+\t\t\t    region_model_context *ctxt) const\n {\n   gcc_assert (ptr_sval);\n   gcc_assert (POINTER_TYPE_P (ptr_sval->get_type ()));\n@@ -1705,7 +1705,7 @@ region_model::deref_rvalue (const svalue *ptr_sval, tree ptr_tree,\n const svalue *\n region_model::get_rvalue_for_bits (tree type,\n \t\t\t\t   const region *reg,\n-\t\t\t\t   const bit_range &bits)\n+\t\t\t\t   const bit_range &bits) const\n {\n   const svalue *sval = get_store_value (reg);\n   if (const compound_svalue *compound_sval = sval->dyn_cast_compound_svalue ())"}, {"sha": "e251a5b245c31d93d42918db7d1a884c5ef0da89", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf", "patch": "@@ -501,17 +501,17 @@ class region_model\n   int get_stack_depth () const;\n   const frame_region *get_frame_at_index (int index) const;\n \n-  const region *get_lvalue (path_var pv, region_model_context *ctxt);\n-  const region *get_lvalue (tree expr, region_model_context *ctxt);\n-  const svalue *get_rvalue (path_var pv, region_model_context *ctxt);\n-  const svalue *get_rvalue (tree expr, region_model_context *ctxt);\n+  const region *get_lvalue (path_var pv, region_model_context *ctxt) const;\n+  const region *get_lvalue (tree expr, region_model_context *ctxt) const;\n+  const svalue *get_rvalue (path_var pv, region_model_context *ctxt) const;\n+  const svalue *get_rvalue (tree expr, region_model_context *ctxt) const;\n \n   const region *deref_rvalue (const svalue *ptr_sval, tree ptr_tree,\n-\t\t\t       region_model_context *ctxt);\n+\t\t\t       region_model_context *ctxt) const;\n \n   const svalue *get_rvalue_for_bits (tree type,\n \t\t\t\t     const region *reg,\n-\t\t\t\t     const bit_range &bits);\n+\t\t\t\t     const bit_range &bits) const;\n \n   void set_value (const region *lhs_reg, const svalue *rhs_sval,\n \t\t  region_model_context *ctxt);\n@@ -585,8 +585,8 @@ class region_model\n   void loop_replay_fixup (const region_model *dst_state);\n \n  private:\n-  const region *get_lvalue_1 (path_var pv, region_model_context *ctxt);\n-  const svalue *get_rvalue_1 (path_var pv, region_model_context *ctxt);\n+  const region *get_lvalue_1 (path_var pv, region_model_context *ctxt) const;\n+  const svalue *get_rvalue_1 (path_var pv, region_model_context *ctxt) const;\n \n   path_var\n   get_representative_path_var_1 (const svalue *sval,"}]}