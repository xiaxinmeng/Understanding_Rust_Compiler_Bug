{"sha": "3c45ffa5146a7132ea4867981f0d2a737d656e54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M0NWZmYTUxNDZhNzEzMmVhNDg2Nzk4MWYwZDJhNzM3ZDY1NmU1NA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-03-24T00:59:57Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-03-24T00:59:57Z"}, "message": "natDouble.cc (parseDouble): Cannot use errno to check for errors...\n\n\n\t* java/lang/natDouble.cc (parseDouble):  Cannot use errno to\n\tcheck for errors, since we don't want to throw exception on\n\toverflow/underflow.  Instead, trim whitespace, and then check that\n\t_strtod_r uses up all the rest of the string.\n\nFrom-SVN: r40800", "tree": {"sha": "fafc2f660ada28148b694ca4afb1638030488771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fafc2f660ada28148b694ca4afb1638030488771"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c45ffa5146a7132ea4867981f0d2a737d656e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c45ffa5146a7132ea4867981f0d2a737d656e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c45ffa5146a7132ea4867981f0d2a737d656e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c45ffa5146a7132ea4867981f0d2a737d656e54/comments", "author": null, "committer": null, "parents": [{"sha": "7a3155bef708a70dfa72958ef23fc2356b20c8a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3155bef708a70dfa72958ef23fc2356b20c8a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3155bef708a70dfa72958ef23fc2356b20c8a2"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "af2d70ad6f3e890f5cc703b92c8f52a724590a3f", "filename": "libjava/java/lang/natDouble.cc", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c45ffa5146a7132ea4867981f0d2a737d656e54/libjava%2Fjava%2Flang%2FnatDouble.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c45ffa5146a7132ea4867981f0d2a737d656e54/libjava%2Fjava%2Flang%2FnatDouble.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatDouble.cc?ref=3c45ffa5146a7132ea4867981f0d2a737d656e54", "patch": "@@ -15,6 +15,7 @@ details.  */\n #include <gcj/cni.h>\n #include <java/lang/String.h>\n #include <java/lang/Double.h>\n+#include <java/lang/Character.h>\n #include <java/lang/NumberFormatException.h>\n #include <jvm.h>\n \n@@ -160,19 +161,28 @@ jdouble\n java::lang::Double::parseDouble(jstring str)\n {\n   int length = str->length();\n-  // Note that UTF can expand 3x.\n-\n-  char *data = (char *) __builtin_alloca (3 * length + 1);\n-\n-  data[_Jv_GetStringUTFRegion (str, 0, length, data)] = 0; \n-\n-  struct _Jv_reent reent;  \n-  memset (&reent, 0, sizeof reent);\n-\n-  double val = _strtod_r (&reent, data, NULL);\n-\n-  if (reent._errno)\n-    _Jv_Throw (new NumberFormatException);\n-\n-  return val;\n+  while (length > 0\n+\t && Character::isWhitespace(str->charAt(length - 1)))\n+    length--;\n+  jsize start = 0;\n+  while (length > 0\n+\t && Character::isWhitespace(str->charAt(start)))\n+    start++, length--;\n+\n+  if (length > 0)\n+    {\n+      // Note that UTF can expand 3x.\n+      char *data = (char *) __builtin_alloca (3 * length + 1);\n+      jsize blength = _Jv_GetStringUTFRegion (str, start, length, data);\n+      data[blength] = 0; \n+\n+      struct _Jv_reent reent;  \n+      memset (&reent, 0, sizeof reent);\n+\n+      char *endptr;\n+      double val = _strtod_r (&reent, data, &endptr);\n+      if (endptr == data + blength)\n+\treturn val;\n+    }\n+  _Jv_Throw (new NumberFormatException);\n }"}]}