{"sha": "c111bb67de19511fe104010455b89a00898b5ad2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExMWJiNjdkZTE5NTExZmUxMDQwMTA0NTViODlhMDA4OThiNWFkMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-05-27T12:05:04Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-05-27T12:05:04Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r20089", "tree": {"sha": "38c778d43ca63028f8d6d2e33d7f245ca46645a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38c778d43ca63028f8d6d2e33d7f245ca46645a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c111bb67de19511fe104010455b89a00898b5ad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c111bb67de19511fe104010455b89a00898b5ad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c111bb67de19511fe104010455b89a00898b5ad2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c111bb67de19511fe104010455b89a00898b5ad2/comments", "author": null, "committer": null, "parents": [{"sha": "1aed535530fda367c1ec38d7db7450951ab2a003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aed535530fda367c1ec38d7db7450951ab2a003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aed535530fda367c1ec38d7db7450951ab2a003"}], "stats": {"total": 194, "additions": 194, "deletions": 0}, "files": [{"sha": "3dedd0c5bade0ba38e093e3efe2d4611eb315704", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/p15561.C", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c111bb67de19511fe104010455b89a00898b5ad2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp15561.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c111bb67de19511fe104010455b89a00898b5ad2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp15561.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp15561.C?ref=c111bb67de19511fe104010455b89a00898b5ad2", "patch": "@@ -0,0 +1,194 @@\n+//980418 bkoz reduced from kumar's g++/15561\n+// Build don't link:\n+// prms-id: 15561\n+\n+extern int errno;\n+extern int\twrite  (int, const void *, long unsigned int )  ;\n+\n+/* to debug\n+#ifdef BUG\n+*/\n+//this crashes\n+typedef long unsigned int size_t;\t\t\n+//typedef unsigned long size_t;\n+//this is ok\n+//typedef unsigned int size_t;\n+\n+class exception {\n+public:\n+  exception () { }\n+  virtual ~exception () { }\n+  virtual const char* what () const;\n+};\n+\n+class bad_alloc : public exception {\n+public:\n+  virtual const char* what() const throw() { return \"bad_alloc\"; }\n+};\n+\n+struct nothrow_t {};\n+extern const nothrow_t nothrow;\n+\n+typedef void (*new_handler)();\n+new_handler set_new_handler (new_handler);\n+\n+void *operator new (size_t) throw (std::bad_alloc);\n+void *operator new[] (size_t) throw (std::bad_alloc);\n+void operator delete (void *) throw();\n+void operator delete[] (void *) throw();\n+void *operator new (size_t, const nothrow_t&) throw();\n+void *operator new[] (size_t, const nothrow_t&) throw();\n+void operator delete (void *, const nothrow_t&) throw();\n+void operator delete[] (void *, const nothrow_t&) throw();\n+inline void *operator new(size_t, void *place) throw() { return place; }\n+inline void *operator new[](size_t, void *place) throw() { return place; }\n+\n+/* to debug\n+#else\n+#include <new>\n+#endif\n+*/\n+\n+//from kumar's ace file\n+typedef\tunsigned long\tu_long;\n+typedef int ACE_thread_t;\n+typedef int ACE_hthread_t;\n+typedef int ACE_thread_key_t;\n+typedef int ssize_t;\n+typedef int ACE_HANDLE;\n+typedef ACE_HANDLE ACE_SOCKET;\n+\n+struct ACE_OVERLAPPED\n+{\n+  u_long Internal;\n+  u_long InternalHigh;\n+  u_long Offset;\n+  u_long OffsetHigh;\n+  ACE_HANDLE hEvent;\n+};\n+\n+struct strbuf {\n+\tint\tmaxlen;\t\t\t \n+\tint\tlen;\t\t\t \n+\tchar\t*buf;\t\t\t \n+};\n+\n+struct flock {\n+\tshort\tl_type;\t\t \n+\tshort\tl_whence;\t \n+\tlong\tl_start;\t \n+\tlong\tl_len;\t\t \n+\tshort\tl_pid;\t\t \n+\tshort\tl_xxx;\t\t \n+};\n+\n+class   ACE_OS\n+{\n+public:\n+  struct ace_flock_t\n+  {\n+    void dump (void) const;\n+    struct flock lock_;\n+    ACE_HANDLE handle_;\n+  };\n+  static ssize_t write (ACE_HANDLE handle,\n+\t\t\tconst void *buf,\n+\t\t\tsize_t nbyte);\n+  static ssize_t write (ACE_HANDLE handle,\n+\t\t\tconst void *buf,\n+\t\t\tsize_t nbyte,\n+\t\t\tACE_OVERLAPPED *);\n+\n+  static void *memcpy (void *t,\n+\t\t       const void *s,\n+\t\t       size_t len);\n+\n+  static int putmsg (ACE_HANDLE handle,\n+\t\t     const struct strbuf *ctl,\n+\t\t     const struct strbuf *data,\n+\t\t     int flags); \n+\n+  static ACE_thread_t NULL_thread;\n+  static ACE_hthread_t NULL_hthread;\n+  static ACE_thread_key_t NULL_key;\n+  static void mutex_lock_cleanup (void *mutex);\n+private:\n+  ACE_OS (void);\n+};\n+\n+\n+ \n+inline  ssize_t \n+ACE_OS::write (ACE_HANDLE handle, const void *buf, size_t nbyte)\n+{\n+ do {   \n+\tssize_t  ace_result_ =   -1 ; \n+\tace_result_ = ace_result_; \n+\treturn  ::write (handle, buf, nbyte) ; } while (0) ;\n+}\n+\n+inline  ssize_t \n+ACE_OS::write (ACE_HANDLE handle, const void *buf, size_t nbyte,\n+\t       ACE_OVERLAPPED *overlapped)\n+{\n+  overlapped = overlapped;\n+  return ACE_OS::write (handle, buf, nbyte);\n+}\n+  \n+\n+inline  int \n+ACE_OS::putmsg (ACE_HANDLE handle, const struct strbuf *ctl, \n+\t\tconst struct strbuf *data, int flags) \n+{\n+  {\n+    if (& flags ) \n+      ;\n+  } ;\n+  if (ctl == 0 && data == 0)\n+    {\n+      errno = 22 ;\n+      return 0;\n+    }\n+   \n+  else if (ctl != 0)\n+    return ACE_OS::write (handle, ctl->buf, ctl->len);\n+  else if (data != 0)\n+    return ACE_OS::write (handle, data->buf, data->len);\n+  else\n+    {\n+      char *buf;\n+      do \n+\t{  \n+\t  buf  = new   char [ctl->len + data->len] ; \n+\t  if ( buf  == 0) \n+\t    { \n+\t      errno = 12 ; \n+\t      return   -1 ;\n+\t    } \n+      \t} \n+      while (0) ;\n+      ACE_OS::memcpy (buf, ctl->buf, ctl->len);\n+      ACE_OS::memcpy (buf + ctl->len, data->buf, data->len);\n+      int result = ACE_OS::write (handle, buf, ctl->len + data->len);\n+      delete [] buf;\n+      return result;\n+    }\n+}\n+\n+int main() \n+{\n+  return (1);\n+}\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}]}