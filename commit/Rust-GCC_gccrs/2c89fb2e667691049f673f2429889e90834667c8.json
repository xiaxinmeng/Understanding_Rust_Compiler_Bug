{"sha": "2c89fb2e667691049f673f2429889e90834667c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4OWZiMmU2Njc2OTEwNDlmNjczZjI0Mjk4ODllOTA4MzQ2NjdjOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-16T21:46:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-16T21:46:23Z"}, "message": "(__objc_write_class): Write class version.\n\n(__objc_write_selector, objc_{write,read}_selector): Handle null selector.\n\nFrom-SVN: r9720", "tree": {"sha": "3f3a61ad425d0006ec31fee6810dd722ddd380b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f3a61ad425d0006ec31fee6810dd722ddd380b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c89fb2e667691049f673f2429889e90834667c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c89fb2e667691049f673f2429889e90834667c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c89fb2e667691049f673f2429889e90834667c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c89fb2e667691049f673f2429889e90834667c8/comments", "author": null, "committer": null, "parents": [{"sha": "a9aedbc26d61fbe2fef53254408dbbb37c3992fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9aedbc26d61fbe2fef53254408dbbb37c3992fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9aedbc26d61fbe2fef53254408dbbb37c3992fa"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "25f60af298ae41020b40c9b2aa1c7ab528322094", "filename": "gcc/objc/archive.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c89fb2e667691049f673f2429889e90834667c8/gcc%2Fobjc%2Farchive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c89fb2e667691049f673f2429889e90834667c8/gcc%2Fobjc%2Farchive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Farchive.c?ref=2c89fb2e667691049f673f2429889e90834667c8", "patch": "@@ -437,7 +437,7 @@ __objc_write_class (struct objc_typed_stream* stream, struct objc_class* class)\n   __objc_write_extension (stream, _BX_CLASS);\n   objc_write_string_atomic(stream, (char*)class->name,\n \t\t\t   strlen((char*)class->name));\n-  return objc_write_unsigned_long (stream, CLS_GETNUMBER(class));\n+  return objc_write_unsigned_long (stream, class->version);\n }\n \n \n@@ -462,16 +462,26 @@ objc_write_class (struct objc_typed_stream* stream,\n __inline__ int \n __objc_write_selector (struct objc_typed_stream* stream, SEL selector)\n {\n-  const char* sel_name = sel_get_name (selector);\n+  const char* sel_name;\n   __objc_write_extension (stream, _BX_SEL);\n+  /* to handle NULL selectors */\n+  if ((SEL)0 == selector)\n+    return objc_write_string (stream, \"\", 0);\n+  sel_name = sel_get_name (selector);\n   return objc_write_string (stream, sel_name, strlen ((char*)sel_name));\n }\n \n int \n objc_write_selector (struct objc_typed_stream* stream, SEL selector)\n {\n-  const char* sel_name = sel_get_name (selector);\n+  const char* sel_name;\n   unsigned long key;\n+\n+  /* to handle NULL selectors */\n+  if ((SEL)0 == selector)\n+    return __objc_write_selector (stream, selector);\n+\n+  sel_name = sel_get_name (selector);\n   if ((key = PTR2LONG(hash_value_for_key (stream->stream_table, sel_name))))\n     return objc_write_use_common (stream, key);\n   else\n@@ -917,7 +927,14 @@ objc_read_selector (struct objc_typed_stream* stream, SEL* selector)\n \n \t  /* get selector */\n \t  len = objc_read_string (stream, &selector_name);\n-\t  (*selector) = sel_get_any_uid(selector_name);\n+\t  /* To handle NULL selectors */\n+\t  if (0 == strlen(selector_name))\n+\t    {\n+\t      (*selector) = (SEL)0;\n+\t      return 0;\n+\t    }\n+\t  else \n+\t    (*selector) = sel_get_any_uid(selector_name);\n \t  free (selector_name);\n \n \t  /* register */"}]}