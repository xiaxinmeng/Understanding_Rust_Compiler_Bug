{"sha": "eb4994545fbd2a670e422f6e98c16e4ed60ac53e", "node_id": "C_kwDOANBUbNoAKGViNDk5NDU0NWZiZDJhNjcwZTQyMmY2ZTk4YzE2ZTRlZDYwYWM1M2U", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-01-13T10:01:32Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-01-13T10:01:32Z"}, "message": "aarch64: Fix DWARF frame register sizes for predicates\n\nJakub pointed out that __builtin_init_dwarf_reg_size_table\nset the size of predicate registers to their current runtime\nsize when compiled with +sve, but to 8 bytes otherwise.\nAs explained in the comment, both behaviours are wrong.\nPredicates change size with VL and should never need to be\nrestored during unwinding.\n\nIn contrast, the call-saved FP&SIMD frame registers are 8 bytes\n(even though the hardware registers are at least 16 bytes) and\nthe call-clobbered registers have zero size.  A zero size seems\ncorrect for predicates too.\n\ngcc/\n\t* config/aarch64/aarch64.cc (aarch64_dwarf_frame_reg_mode): New\n\tfunction.\n\t(TARGET_DWARF_FRAME_REG_MODE): Define.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/dwarf_reg_size_1.c: New test.\n\t* gcc.target/aarch64/dwarf_reg_size_2.c: Likewise.", "tree": {"sha": "817f3df6de411ac2834a11087abe44862e34e10a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/817f3df6de411ac2834a11087abe44862e34e10a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb4994545fbd2a670e422f6e98c16e4ed60ac53e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb4994545fbd2a670e422f6e98c16e4ed60ac53e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb4994545fbd2a670e422f6e98c16e4ed60ac53e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb4994545fbd2a670e422f6e98c16e4ed60ac53e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3893c9c0a16832f55d8d0827f50c48a56c52f6e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3893c9c0a16832f55d8d0827f50c48a56c52f6e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3893c9c0a16832f55d8d0827f50c48a56c52f6e7"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "2821368756b27f4104ee9294a072cf83b8dfaed5", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb4994545fbd2a670e422f6e98c16e4ed60ac53e/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb4994545fbd2a670e422f6e98c16e4ed60ac53e/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=eb4994545fbd2a670e422f6e98c16e4ed60ac53e", "patch": "@@ -3443,6 +3443,20 @@ aarch64_debugger_regno (unsigned regno)\n    return DWARF_FRAME_REGISTERS;\n }\n \n+/* Implement TARGET_DWARF_FRAME_REG_MODE.  */\n+static machine_mode\n+aarch64_dwarf_frame_reg_mode (int regno)\n+{\n+  /* Predicate registers are call-clobbered in the EH ABI (which is\n+     ARM_PCS_AAPCS64), so they should not be described by CFI.\n+     Their size changes as VL changes, so any values computed by\n+     __builtin_init_dwarf_reg_size_table might not be valid for\n+     all frames.  */\n+  if (PR_REGNUM_P (regno))\n+    return VOIDmode;\n+  return default_dwarf_frame_reg_mode (regno);\n+}\n+\n /* If X is a CONST_DOUBLE, return its bit representation as a constant\n    integer, otherwise return X unmodified.  */\n static rtx\n@@ -27900,6 +27914,9 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_SCHED_REASSOCIATION_WIDTH\n #define TARGET_SCHED_REASSOCIATION_WIDTH aarch64_reassociation_width\n \n+#undef TARGET_DWARF_FRAME_REG_MODE\n+#define TARGET_DWARF_FRAME_REG_MODE aarch64_dwarf_frame_reg_mode\n+\n #undef TARGET_PROMOTED_TYPE\n #define TARGET_PROMOTED_TYPE aarch64_promoted_type\n "}, {"sha": "cb7666ddaa811315aa9be44549caf7a03a18be5b", "filename": "gcc/testsuite/gcc.target/aarch64/dwarf_reg_size_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb4994545fbd2a670e422f6e98c16e4ed60ac53e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf_reg_size_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb4994545fbd2a670e422f6e98c16e4ed60ac53e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf_reg_size_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf_reg_size_1.c?ref=eb4994545fbd2a670e422f6e98c16e4ed60ac53e", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fbuilding-libgcc\" } */\n+\n+static unsigned char dwarf_reg_size_table[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n+\n+int\n+main (void)\n+{\n+  __builtin_init_dwarf_reg_size_table (dwarf_reg_size_table);\n+  /* X0-X31 and SP.  */\n+  for (int i = 0; i < 32; ++i)\n+    if (dwarf_reg_size_table[i] != 8)\n+      __builtin_abort ();\n+  /* Q0-Q31/Z0-Z31, of which only the low 64 bits of register 8-15\n+     are saved.  */\n+  for (int i = 64; i < 96; ++i)\n+    if (dwarf_reg_size_table[i] != (i >= 72 && i < 80 ? 8 : 0))\n+      __builtin_abort ();\n+  /* P0-P15, which are never saved.  */\n+  for (int i = 48; i < 63; ++i)\n+    if (dwarf_reg_size_table[i] != 0)\n+      __builtin_abort ();\n+  /* VG */\n+  if (dwarf_reg_size_table[46] != 8)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "8b7e6d4a7177e07323e7dea74bc9fb4696bff9c7", "filename": "gcc/testsuite/gcc.target/aarch64/dwarf_reg_size_2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb4994545fbd2a670e422f6e98c16e4ed60ac53e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf_reg_size_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb4994545fbd2a670e422f6e98c16e4ed60ac53e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf_reg_size_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf_reg_size_2.c?ref=eb4994545fbd2a670e422f6e98c16e4ed60ac53e", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-fbuilding-libgcc\" } */\n+\n+#pragma GCC target \"+sve\"\n+\n+#include \"dwarf_reg_size_1.c\""}]}