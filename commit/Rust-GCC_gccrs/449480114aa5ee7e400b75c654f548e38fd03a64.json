{"sha": "449480114aa5ee7e400b75c654f548e38fd03a64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ5NDgwMTE0YWE1ZWU3ZTQwMGI3NWM2NTRmNTQ4ZTM4ZmQwM2E2NA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-06T00:16:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-06T00:16:37Z"}, "message": "Daily bump.", "tree": {"sha": "eda03332c19a7cfb2cb4689f1abbdbeb58390b90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eda03332c19a7cfb2cb4689f1abbdbeb58390b90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/449480114aa5ee7e400b75c654f548e38fd03a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/449480114aa5ee7e400b75c654f548e38fd03a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/449480114aa5ee7e400b75c654f548e38fd03a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/449480114aa5ee7e400b75c654f548e38fd03a64/comments", "author": null, "committer": null, "parents": [{"sha": "e8d1ca7d2c344a411779892616c423e157f4aea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d1ca7d2c344a411779892616c423e157f4aea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d1ca7d2c344a411779892616c423e157f4aea8"}], "stats": {"total": 813, "additions": 812, "deletions": 1}, "files": [{"sha": "d1cc60a78e08a54202731ee0d519ab360968321f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449480114aa5ee7e400b75c654f548e38fd03a64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449480114aa5ee7e400b75c654f548e38fd03a64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=449480114aa5ee7e400b75c654f548e38fd03a64", "patch": "@@ -1,3 +1,99 @@\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/100402\n+\t* config/i386/i386.c (ix86_compute_frame_layout): For a SEH target,\n+\talways return the establisher frame for __builtin_frame_address (0).\n+\n+2021-05-05  Ivan Sorokin  <vanyacpp@gmail.com>\n+\n+\tPR target/91400\n+\t* config/i386/i386-builtins.c (ix86_cpu_model_type_node): New.\n+\t(ix86_cpu_model_var): Likewise.\n+\t(ix86_cpu_features2_type_node): Likewise.\n+\t(ix86_cpu_features2_var): Likewise.\n+\t(fold_builtin_cpu): Cache __cpu_model and __cpu_features2 with\n+\ttheir types.\n+\n+2021-05-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* passes.def (pass_warn_printf): Run after SSA.\n+\n+2021-05-05  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* config/arm/neon.md (neon_vtst_combine<mode>): New pattern.\n+\t* config/arm/predicates.md (minus_one_operand): New predicate.\n+\n+2021-05-05  Jeff Law  <jlaw@tachyum.com>\n+\n+\t* config/avr/avr.md: Remove references to CC_STATUS_INIT.\n+\n+2021-05-05  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\tPR rtl-optimization/100263\n+\t* postreload.c (move2add_valid_value_p): Ensure register can\n+\tchange mode.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/100411\n+\t* cfgcleanup.c (try_crossjump_to_edge): Also skip end of prologue\n+\tand beginning of function markers.\n+\n+2021-05-05  Jeff Law  <jlaw@tachyum.com>\n+\n+\t* config/cr16/cr16.h (NOTICE_UPDATE_CC): Remove.\n+\t* config/cr16/cr16.c (notice_update_cc): Remove.\n+\t* config/cr16/cr16-protos.h (notice_update_cc): Remove.\n+\n+2021-05-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/98218\n+\t* config/i386/i386-expand.c (ix86_expand_int_sse_cmp):\n+\tHandle V8QI, V4HI and V2SI modes.\n+\t* config/i386/i386.c (ix86_build_const_vector): Handle V2SImode.\n+\t(ix86_build_signbit_mask): Ditto.\n+\t* config/i386/mmx.md (MMXMODE14): New mode iterator.\n+\t(<smaxmin:code><MMXMODE14:mode>3): New expander.\n+\t(*mmx_<smaxmin:code><MMXMODE14:mode>3): New insn pattern.\n+\t(<umaxmin:code><MMXMODE24:mode>3): New expander.\n+\t(*mmx_<umaxmin:code><MMXMODE24:mode>3): New insn pattern.\n+\t(vec_cmp<MMXMODEI:mode><MMXMODEI:mode>): New expander.\n+\t(vec_cmpu<MMXMODEI:mode><MMXMODEI:mode>): Ditto.\n+\t(vcond<MMXMODEI:mode><MMXMODEI:mode>): Ditto.\n+\t(vcondu<MMXMODEI:mode><MMXMODEI:mode>): Ditto.\n+\t(vcond_mask_<MMXMODEI:mode><MMXMODEI:mode>): Ditto.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.c (loc_list_from_tree_1) <DECL>: During early DWARF, do\n+\tnot expand the VALUE_EXPR of variables put in the non-local frame.\n+\t* gimplify.c (gimplify_type_sizes) <RECORD_TYPE>: If the type is not\n+\tto be ignored for debug info, ensure its variable offsets are not.\n+\n+2021-05-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79333\n+\t* tree-ssa-sccvn.c (eliminate_dom_walker::eliminate_stmt):\n+\tFold stmt following SSA edges.\n+\n+2021-05-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/100394\n+\t* calls.c (expand_call): Preserve possibly throwing calls.\n+\t* cfgexpand.c (expand_call_stmt): When a call can throw signal\n+\tRTL expansion there are side-effects.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Simplify,\n+\tmark all possibly throwing stmts necessary unless we can elide\n+\tdead EH.\n+\t* tree-ssa-dse.c (pass_dse::execute): Preserve exceptions unless\n+\t-fdelete-dead-exceptions.\n+\t* tree.h (DECL_PURE_P): Add note about exceptions.\n+\n+2021-05-05  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* config/i386/vxworks.h (DBX_REGISTER_NUMBER): Make it\n+\tunconditional.\n+\n 2021-05-04  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000-call.c (rs6000_output_mi_thunk): Use"}, {"sha": "8e159d5342000a49c70947206c3b058b93837c8e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449480114aa5ee7e400b75c654f548e38fd03a64/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449480114aa5ee7e400b75c654f548e38fd03a64/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=449480114aa5ee7e400b75c654f548e38fd03a64", "patch": "@@ -1 +1 @@\n-20210505\n+20210506"}, {"sha": "534ab11e8bc97dc63856a76120a3df67615b5955", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 401, "deletions": 0, "changes": 401, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449480114aa5ee7e400b75c654f548e38fd03a64/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449480114aa5ee7e400b75c654f548e38fd03a64/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=449480114aa5ee7e400b75c654f548e38fd03a64", "patch": "@@ -1,3 +1,404 @@\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Fix expansion of\n+\tattributes Input and Output for unchecked unions.\n+\t* sem_case.ads: Fix typo \"disriminant\" and refill comment.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb, exp_ch9.adb, sem_ch3.adb: Reuse\n+\tHas_Defaulted_Discriminants.\n+\t* sem_ch4.adb (Analyze_Allocator): Reuse\n+\tHas_Defaulted_Discriminants (after reordering conjuncts); remove\n+\tredundant IF statement, whose condition is implied by\n+\tHas_Defaulted_Discriminants.\n+\t* sem_util.adb (Has_Defaulted_Discriminants): Has_Discriminants\n+\timplies that the First_Discriminant is present.\n+\t(Is_Fully_Initialized_Type): Reuse Has_Defaulted_Discriminants.\n+\n+2021-05-05  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Add condition to check for\n+\texpanded actuals and remove dead code.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Has_Unconstrained_UU_Component): Rewrite to\n+\tfollow the Ada RM grammar.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (User_Defined_Primitive_Equality_Op): Refine type\n+\tof a local variable.\n+\t* exp_dbug.adb (Scope_Contains): Refine all types from Node_Id\n+\tto Entity_Id; rename parameters to match those of the\n+\tScope_Within routine (which is similar but not the same); also,\n+\tsimplify an OR ELSE into a membership test.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Component_Is_Unconstrained_UU): Detect both\n+\tqualified and unqualified names of unchecked union components.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Variant_Is_Unconstrained_UU): Remove redundant\n+\tcheck for empty list.\n+\t* exp_disp.adb (Find_Entry_Index): Simplify by removing\n+\tredundant check and counting from zero; fix type of a local\n+\tvariable.\n+\t* sem_ch12.adb (Save_Global_Descendant): Remove an unnecessary\n+\tspecial-case for empty lists.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Apply_Accessibility_Check): Skip a statically\n+\ttrue condition in expanded raise statement.\n+\n+2021-05-05  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-os_lib.adb (Missed_Drive_Letter): Simplify the code.\n+\n+2021-05-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Do not emit the warning that\n+\ta previous value of the target object is useless if the\n+\tright-hand side of the assignment includes target names.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_imgv.adb: Add with/use clauses for Targparm.\n+\t(Build_Enumeration_Image_Tables): Set type of Threshold to Nat and\n+\tinitialize it to Nat'Last if the type is local and the target does\n+\tnot support descriptors.  Adjust Threshold_For_Size similarly.\n+\t(Expand_Value_Attribute): Minor tweaks.\n+\n+2021-05-05  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_ch7.adb (Expand_N_Package_Body): Add CUDA init call.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Remove CUDA init\n+\tcall.\n+\n+2021-05-05  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* par-ch5.adb (P_Condition): Check if expression is declare\n+\texpression.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* make.adb (Make): Use GNAT.Ctrl_C.Install_Handler instead of a\n+\tcustom imported procedure.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_imgv.adb (Is_User_Defined_Enumeration_Type): Delete.\n+\t(Expand_Image_Attribute): Move inline expansion into normal flow of\n+\tcontrol, move down declarations and remove superfluous processing.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/g-alleve.adb (Bit_Operation): Now a not-null type.\n+\t* libgnat/g-sechas.adb (Fill_Buffer_Access): Likewise.\n+\t* libgnat/s-dwalin.adb (Callback): Likewise.\n+\n+2021-05-05  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_util.adb (Is_Possibly_Unaligned_Object): Remove commented\n+\tcode.\n+\n+2021-05-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Find_Type_Of_Object):  When In_Spec_Expression is\n+\tset and the object declaration generates a subtype indication,\n+\tbuild the corresponding subtype declaration and place it in tree\n+\twithout the use of Insert_Actions, which is disabled in this\n+\tcontext.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* debug.adb (d_x): Document extended usage.\n+\t* exp_imgv.adb (Expand_Standard_Boolean_Image): New procedure.\n+\t(Expand_Image_Attribute): Call it to expand in line the attribute\n+\tfor standard boolean by default.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* debug.adb (d_x): Document new usage.\n+\t* exp_imgv.adb (Expand_User_Defined_Enumeration_Image): Add Typ\n+\tparameter and use it throughout the processing.\n+\t(Expand_Image_Attribute): Retrieve the underlying type of the\n+\tprefix and use the inline expansion for user-defined enumeration\n+\ttypes with a literal string by default.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-dorepr.adb (Split): Declare a per-size temporary.\n+\tAdd pragma Annotate.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb, sem_ch13.adb, sem_eval.adb, sem_res.adb: Remove\n+\tredundant calls to UI_From_Int.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_imgv.ads (Build_Enumeration_Image_Tables): Adjust comment.\n+\t* exp_imgv.adb (Build_Enumeration_Image_Tables): Add the\n+\tdeclaration nodes of the 4 tables to the declaration list of the\n+\tfunction body.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add s-imagen, s-imen16,\n+\ts-imen32, s-imenu8, s-pehage, s-valuen, s-vaen16, s-vaen32 and\n+\ts-vaenu8.  Remove s-imenne, s-imgenu and s-valenu.\n+\t* debug.adb (d_h): Document new usage.\n+\t* einfo.ads (Lit_Hash): New attribute for enumeration types.\n+\t(Set_Lit_Hash): Declare.\n+\t* einfo.adb (Lit_Hash): New function.\n+\t(Set_Lit_Hash): New procedure.\n+\t(Write_Field21_Name): Print Lit_Hash for Enumeration_Kind.\n+\t* exp_imgv.ads (Build_Enumeration_Image_Tables): Fix description\n+\tand document the hash function and its tables.\n+\t* exp_imgv.adb: Add with/use clauses for Debug.  Add with clause\n+\tfor System.Perfect_Hash_Generators.\n+\t(Append_Table_To): New helper routine.\n+\t(Build_Enumeration_Image_Tables): Call it to build the tables.\n+\tIn the main unit, register the literals with the hash generator.\n+\tIf they are sufficiently many and -gnatd_h is not passed, generate\n+\ta perfect hash function and its tables; otherwise, generate a dummy\n+\thash function.  For the other units, generate only the declaration.\n+\tIn all cases, set Lit_Hash to the entity of the function, if any.\n+\t(Expand_Value_Attribute): Pass the 'Unrestricted_Access of Lit_Hash,\n+\tif any, as third argument to the Value_Enumeration_NN function.\n+\t* gnat1drv.adb (Adjust_Global_Switches): force simpler implementation\n+\tof 'Value in CodePeer_Mode.\n+\t* lib.ads (Synchronize_Serial_Number): Add SN parameter.\n+\t* lib.adb (Synchronize_Serial_Number): Assert that it is larger than\n+\tthe serial number of the current unit and set the latter to it only\n+\tin this case.\n+\t* rtsfind.ads (RTU_Id): Add System_Img_Enum_8, System_Img_Enum_16,\n+\tSystem_Img_Enum_32, System_Val_Enum_8, System_Val_Enum_16 and\n+\tSystem_Val_Enum_32.  Remove System_Img_Enum, System_Img_Enum_New\n+\tand System_Val_Enum.\n+\t* sem_attr.adb (Analyze_Access_Attribute): Do not flag a compiler\n+\tgenerated Unrestricted_Access attribute as illegal in a declare\n+\texpression.\n+\t(RE_Unit_Table): Adjust to above changes.\n+\t* libgnat/g-heasor.ads: Add pragma Compiler_Unit_Warning.\n+\t* libgnat/g-table.ads: Likewise.\n+\t* libgnat/g-pehage.ads: Add with clause and local renaming for\n+\tSystem.Perfect_Hash_Generators.\n+\t(Optimization): Turn into derived type.\n+\t(Verbose): Turn into renaming.\n+\t(Too_Many_Tries): Likewise.\n+\t(Table_Name): Move to System.Perfect_Hash_Generators.\n+\t(Define): Likewise.\n+\t(Value): Likewise.\n+\t* libgnat/g-pehage.adb: Remove with clause for Ada.Directories,\n+\tGNAT.Heap_Sort_G and GNAT.Table.  Move bulk of implementation\n+\tto System.Perfect_Hash_Generators, only keep the output part.\n+\t* libgnat/s-imagen.ads: New generic unit.\n+\t* libgnat/s-imagen.adb: New body.\n+\t* libgnat/s-imen16.ads: New unit.\n+\t* libgnat/s-imen32.ads: Likewise.\n+\t* libgnat/s-imenu8.ads: Likewise.\n+\t* libgnat/s-imenne.ads: Adjust description.\n+\t* libgnat/s-imgenu.ads: Delete.\n+\t* libgnat/s-imgenu.adb: Likewise.\n+\t* libgnat/s-pehage.ads: New unit from GNAT.Perfect_Hash_Generators.\n+\t* libgnat/s-pehage.adb: New body from GNAT.Perfect_Hash_Generators.\n+\t* libgnat/s-valuen.ads: New generic unit.\n+\t* libgnat/s-valuen.adb: New body.\n+\t* libgnat/s-vaen16.ads: New unit.\n+\t* libgnat/s-vaen32.ads: Likewise.\n+\t* libgnat/s-vaenu8.ads: Likewise.\n+\t* libgnat/s-valenu.ads: Delete.\n+\t* libgnat/s-valenu.adb: Likewise.\n+\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS): Add s-pehage.o.\n+\t(GNATBIND_OBJS): Remove s-imgenu.o.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads (Apply_Compile_Time_Constraint_Error): Remove\n+\tparameter Rep from the function spec and \"and if the flag Rep is\n+\tset\" from the comment.\n+\t* sem_util.adb (Apply_Compile_Time_Constraint_Error): Remove\n+\tparameter Rep.\n+\n+2021-05-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Indexed_Aggregate): For indexed\n+\taggregates with component associations verify that if there is\n+\tmore than one component association then all the choices are\n+\tstatic, that the set of choices define a continuous sequence of\n+\tvalues, and that if loop specfications appear, they do not\n+\tinclude iterator filters or key expressions.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add s-dourea, s-imager,\n+\ts-imgflt, s-imglfl and s-imgllf.\n+\t(LIBGNAT_TARGET_PAIRS) [PowerPC/VxWorks]: Use s-dorepr__fma.adb.\n+\t(LIBGNAT_TARGET_PAIRS) [PowerPC/VxWorksAE]: Likewise.\n+\t(LIBGNAT_TARGET_PAIRS) [Aarch64/VxWorks]: Likewise.\n+\t(LIBGNAT_TARGET_PAIRS) [Aarch64/QNX]: Likewise.\n+\t(LIBGNAT_TARGET_PAIRS) [Aarch64/FreeBSD]: Likewise.\n+\t(LIBGNAT_TARGET_PAIRS) [PowerPC/Linux]: Likewise.\n+\t(LIBGNAT_TARGET_PAIRS) [Aarch64/Linux]: Likewise.\n+\t(LIBGNAT_TARGET_PAIRS) [IA-64/Linux]: Likewise.\n+\t(LIBGNAT_TARGET_PAIRS) [IA-64/HP-UX]: Likewise.\n+\t(LIBGNAT_TARGET_PAIRS) [RISC-V/Linux]: Likewise.\n+\t(LIBGNAT_TARGET_PAIRS) [PowerPC/Darwin]: Likewise.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) [Attribute_Fore]: Use\n+\tFixed suffix and Long_Float type.\n+\t* exp_imgv.adb (Expand_Image_Attribute): For floating-point types,\n+\tuse the routine of the corresponding root type.  For ordinary fixed\n+\tpoint types, use Fixed suffix and Long_Float type.\n+\t(Expand_Value_Attribute): Revert latest change for Long_Long_Float.\n+\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS): Remove libgnat units\n+\tg-hesora.o and s-imgenu.o, add g-heasor.o, g-table.o and s-pehage.o.\n+\t(GNATBIND_OBJS): Remove libgnat unit s-imgenu.o.\n+\t* rtsfind.ads (RTU_Id): Add System_Img_Flt, System_Img_LFlt and\n+\tSystem_Img_LLF.  Remove System_Img_Real.\n+\t(RE_Id): Rename RE_Fore_Real to RE_Fore_Fixed.  Add RE_Image_Float,\n+\tRE_Image_Long_Float and RE_Image_Long_Long_Float.  Rename\n+\tRE_Image_Ordinary_Fixed_Point to RE_Image_Fixed.\n+\t(RE_Unit_Table): Adjust to above changes.\n+\t* libgnat/a-nbnbre.adb (Fixed_Conversions): Use Long_Float instead\n+\tof Long_Long_Float.\n+\t* libgnat/a-textio.ads (Field): Remove obsolete comment.\n+\t* libgnat/a-ticoau.ads (Aux): Adjust ancestor package.\n+\t* libgnat/a-ticoau.adb: Remove with/use clause for System.Img_Real.\n+\t(Puts): Call Aux.Set_Image instead of Set_Image_Real.\n+\t* libgnat/a-ticoio.adb: Add with/use clauses for System.Img_Flt,\n+\tSystem.Img_LFlt and System.Img_LLF.\n+\t(Scalar_Float): Add third actual parameter.\n+\t(Scalar_Long_Float): Likewise.\n+\t(Scalar_Long_Long_Float): Likewise.\n+\t* libgnat/a-tifiio.adb: Add with/use clauses for System.Img_LFlt\n+\tand System.Val_LFlt.  Remove the one for System.Val_LLF.  Replace\n+\tLong_Long_Float with Long_Float throughout.\n+\t* libgnat/a-tifiio__128.adb: Likewise.\n+\t* libgnat/a-tiflau.ads: Add Set_Image formal parameter.\n+\t* libgnat/a-tiflau.adb: Add with/use clause for System.Img_Util,\n+\tremove the one for System.Img_Real.\n+\t(Put): Call Set_Image instead of Set_Image_Real.\n+\t(Puts): Likewise.\n+\t* libgnat/a-tiflio.adb: Add with/use clause for System.Img_Flt,\n+\tSystem.Img_LFlt and System.Img_LLF.\n+\t(Aux_Float): Add third actual parameter.\n+\t(Aux_Long_Float): Likewise.\n+\t(Aux_Long_Long_Float): Likewise.\n+\t* libgnat/a-witeio.ads (Field): Remove obsolete comment.\n+\t* libgnat/a-wtcoau.ads (Aux): Adjust ancestor package.\n+\t* libgnat/a-wtcoau.adb: Remove with/use clause for System.Img_Real.\n+\t(Puts): Call Aux.Set_Image instead of Set_Image_Real.\n+\t* libgnat/a-wtcoio.adb: Add with/use clauses for System.Img_Flt,\n+\tSystem.Img_LFlt and System.Img_LLF.\n+\t(Scalar_Float): Add third actual parameter.\n+\t(Scalar_Long_Float): Likewise.\n+\t(Scalar_Long_Long_Float): Likewise.\n+\t* libgnat/a-wtfiio.adb: Add with/use clauses for System.Img_LFlt\n+\tand System.Val_LFlt.  Remove the one for System.Val_LLF.  Replace\n+\tLong_Long_Float with Long_Float throughout.\n+\t* libgnat/a-wtfiio__128.adb: Likewise.\n+\t* libgnat/a-wtflau.ads: Add Set_Image formal parameter.\n+\t* libgnat/a-wtflau.adb: Add with/use clause for System.Img_Util,\n+\tremove the one for System.Img_Real.\n+\t(Put): Call Set_Image instead of Set_Image_Real.\n+\t(Puts): Likewise.\n+\t* libgnat/a-wtflio.adb: Add with/use clause for System.Img_Flt,\n+\tSystem.Img_LFlt and System.Img_LLF.\n+\t(Aux_Float): Add third actual parameter.\n+\t(Aux_Long_Float): Likewise.\n+\t(Aux_Long_Long_Float): Likewise.\n+\t* libgnat/a-ztexio.ads (Field): Remove obsolete comment.\n+\t* libgnat/a-ztcoau.ads (Aux): Adjust ancestor package.\n+\t* libgnat/a-ztcoau.adb: Remove with/use clause for System.Img_Real.\n+\t(Puts): Call Aux.Set_Image instead of Set_Image_Real.\n+\t* libgnat/a-ztcoio.adb: Add with/use clauses for System.Img_Flt,\n+\tSystem.Img_LFlt and System.Img_LLF.\n+\t(Scalar_Float): Add third actual parameter.\n+\t(Scalar_Long_Float): Likewise.\n+\t(Scalar_Long_Long_Float): Likewise.\n+\t* libgnat/a-ztfiio.adb: Add with/use clauses for System.Img_LFlt\n+\tand System.Val_LFlt.  Remove the one for System.Val_LLF.  Replace\n+\tLong_Long_Float with Long_Float throughout.\n+\t* libgnat/a-ztfiio__128.adb: Likewise.\n+\t* libgnat/a-ztflau.ads: Add Set_Image formal parameter.\n+\t* libgnat/a-ztflau.adb: Add with/use clause for System.Img_Util,\n+\tremove the one for System.Img_Real.\n+\t(Put): Call Set_Image instead of Set_Image_Real.\n+\t(Puts): Likewise.\n+\t* libgnat/a-ztflio.adb: Add with/use clause for System.Img_Flt,\n+\tSystem.Img_LFlt and System.Img_LLF.\n+\t(Aux_Float): Add third actual parameter.\n+\t(Aux_Long_Float): Likewise.\n+\t(Aux_Long_Long_Float): Likewise.\n+\t* libgnat/s-dorepr.adb: New file.\n+\t* libgnat/s-dorepr__fma.adb: Likewise.\n+\t* libgnat/s-dourea.ads: Likewise.\n+\t* libgnat/s-dourea.adb: Likewise.\n+\t* libgnat/s-forrea.ads (Fore_Real): Rename into...\n+\t(Fore_Fixed): ...this and take Long_Float parameters.\n+\t* libgnat/s-forrea.adb (Fore_Real): Likewise.\n+\t(Fore_Fixed): Likewise.\n+\t* libgnat/s-imgrea.ads: Move to...\n+\t(Set_Image_Real): Turn into mere renaming.\n+\t* libgnat/s-imager.ads: ...here.\n+\t(Image_Ordinary_Fixed_Point): Turn into...\n+\t(Image_Fixed_Point): ...this.\n+\t* libgnat/s-imgrea.adb: Add pragma No_Body.  Move to...\n+\t* libgnat/s-imager.adb: ...here.\n+\t(Image_Ordinary_Fixed_Point): Turn into...\n+\t(Image_Fixed_Point): ...this.\n+\t(Is_Negative): Replace Long_Long_Float with Num.\n+\t(Set_Image_Real): Likewise.  Use Double_T instead of single Num\n+\tthroughout the algorithm.\n+\t* libgnat/s-imgflt.ads: New file.\n+\t* libgnat/s-imglfl.ads: Likewise.\n+\t* libgnat/s-imgllf.ads: Likewise.\n+\t* libgnat/s-imagef.ads: Adjust comment.\n+\t* libgnat/s-imguti.ads (Max_Real_Image_Length): New named number.\n+\t* libgnat/s-powflt.ads (Maxpow): Adjust.\n+\t(Powten): Turn into an exact table of double Float.\n+\t* libgnat/s-powlfl.ads (Maxpow): Adjust.\n+\t(Powten): Turn into an exact table of double Long_Float.\n+\t* libgnat/s-powllf.ads (Maxpow): Adjust.\n+\t(Powten): Turn into an exact table of double Long_Long_Float.\n+\t* libgnat/s-valrea.ads: Change order of formal parameters.\n+\t* libgnat/s-valrea.adb: Add with clause for System.Double_Real.\n+\t(Double_Real): New instantiation.\n+\t(Fast2Sum): Delete.\n+\t(Large_Powten): New function.\n+\t(Integer_to_Real): Use Quick_Two_Sum instead of Fast2Sum.  Convert\n+\tthe value to Double_T.  Do the scaling in Double_T for base 10.\n+\t* libgnat/s-valflt.ads: Remove with/use clasue for Interfaces,\n+\tadd it for System.Unsigned_Types.  Use Unsigned.\n+\t* libgnat/s-vallfl.ads: Remove with/use clasue for Interfaces,\n+\tadd it for System.Unsigned_Types.  Use Long_Unsigned.\n+\t* libgnat/s-valllf.ads: Remove with/use clasue for Interfaces,\n+\tadd it for System.Unsigned_Types.  Use Long_Long_Unsigned.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Arithmetic_Op): Call\n+\tSet_Raises_Constraint_Error on real division by zero just like\n+\tit is called for integer division by zero earlier in this\n+\troutine.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* freeze.adb (Build_Renamed_Body): Simplify IF and WHILE\n+\tstatements with the same condition.\n+\n+2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* pprint.adb (Expr_Name): Introduce local constants to make the\n+\tcode more readable and avoid repeated calls to Next to reach the\n+\tELSE part of an if-expression.\n+\n 2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* pprint.adb: Remove qualification of arbitrary calls to"}, {"sha": "17367c4e6a74bc39ef0db2e9b6af944cd162dc2d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449480114aa5ee7e400b75c654f548e38fd03a64/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449480114aa5ee7e400b75c654f548e38fd03a64/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=449480114aa5ee7e400b75c654f548e38fd03a64", "patch": "@@ -1,3 +1,11 @@\n+2021-05-05  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100274\n+\t* interface.c (gfc_compare_actual_formal): Continue checks after\n+\temitting warning for argument length mismatch.\n+\t* trans-expr.c (gfc_conv_procedure_call): Check for NULL pointer\n+\tdereference.\n+\n 2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR testsuite/100397"}, {"sha": "70c5d505c67bac16e027e12a1b3ccc182ec356ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449480114aa5ee7e400b75c654f548e38fd03a64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449480114aa5ee7e400b75c654f548e38fd03a64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=449480114aa5ee7e400b75c654f548e38fd03a64", "patch": "@@ -1,3 +1,67 @@\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20210505-1.c: New test.\n+\n+2021-05-05  Ivan Sorokin  <vanyacpp@gmail.com>\n+\n+\tPR target/91400\n+\t* gcc.target/i386/pr91400-1.c: New test.\n+\t* gcc.target/i386/pr91400-2.c: Likewise.\n+\n+2021-05-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-26.c: New test.\n+\n+2021-05-05  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100274\n+\t* gfortran.dg/argument_checking_25.f90: New test.\n+\n+2021-05-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/98218\n+\t* gcc.target/i386/pr98218-1.c: New test.\n+\t* gcc.target/i386/pr98218-1a.c: Ditto.\n+\t* gcc.target/i386/pr98218-2.c: Ditto.\n+\t* gcc.target/i386/pr98218-2a.c: Ditto.\n+\t* gcc.target/i386/pr98218-3.c: Ditto.\n+\t* gcc.target/i386/pr98218-3a.c: Ditto.\n+\t* gcc.dg/vect/vect-bool-cmp.c (dg-final):\n+\tScan vect tree dump for \"LOOP VECTORIZED\", not VECTORIZED.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/debug17.adb: Minor tweak.\n+\n+2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/debug8.adb: Minor tweak.\n+\t* gnat.dg/debug11.adb: Likewise.\n+\t* gnat.dg/debug16.adb: Likewise.\n+\t* gnat.dg/debug17.adb: New test.\n+\t* gnat.dg/specs/debug1.ads: Minor tweak.\n+\n+2021-05-05  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.dg/vect/slp-21.c: Add s390.\n+\n+2021-05-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR testsuite/100422\n+\t* g++.dg/gomp/clause-3.C: Use 'reduction(&:..)' instead of '...(&&:..)'.\n+\n+2021-05-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79333\n+\t* gcc.dg/tree-ssa/ssa-fre-94.c: New testcase.\n+\t* gcc.dg/graphite/fuse-1.c: Adjust.\n+\t* gcc.dg/pr43864-4.c: Likewise.\n+\n+2021-05-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/100394\n+\t* g++.dg/torture/pr100382.C: New testcase.\n+\n 2021-05-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/100307"}, {"sha": "672e968f22895c8253b84af5cac82c61f72121b6", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449480114aa5ee7e400b75c654f548e38fd03a64/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449480114aa5ee7e400b75c654f548e38fd03a64/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=449480114aa5ee7e400b75c654f548e38fd03a64", "patch": "@@ -1,3 +1,201 @@\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* compiler.cc (make_regexp): Take const std::string.\n+\t(cc1_plugin::compiler_triplet_regexp::find): Update.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\tPR c/94669\n+\t* compiler.hh (compiler_driver_filename): Take const char *.\n+\t(compiler_triplet_regexp): Likewise.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* rpc.hh (argument_wrapper) <get>: Replace cast operator.\n+\t(argument_wrapper<T *>) <get>: Likewise.\n+\t(unmarshall): Add std::tuple overloads.\n+\t(callback): Remove.\n+\t(class invoker): New.\n+\t* libcp1plugin.cc (plugin_init): Update.\n+\t* libcp1.cc (libcp1::add_callbacks): Update.\n+\t* libcc1plugin.cc (plugin_init): Update.\n+\t* libcc1.cc (libcc1::add_callbacks): Update.\n+\t* connection.cc (cc1_plugin::connection::do_wait): Update.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdbctx.hh (do_compile): Use std::vector.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcp1.cc (libcp1): Change parameters.  Update.\n+\t(libcp1_set_verbose, libcp1_set_arguments)\n+\t(libcp1_set_triplet_regexp, libcp1_set_driver_filename)\n+\t(libcp1_set_source_file, libcp1_set_print_callback, fork_exec)\n+\t(libcp1_compile, libcp1_destroy, vtable): Remove.\n+\t(libcp1::add_callbacks): New method, extracted from\n+\tlibcp1_compile.\n+\t(gcc_c_fe_context): Update.\n+\t* libcc1.cc (libcc1): Change parameters.  Update.\n+\t(libcc1_set_verbose, libcc1_set_arguments)\n+\t(libcc1_set_triplet_regexp, libcc1_set_driver_filename)\n+\t(libcc1_set_source_file, libcc1_set_print_callback, fork_exec)\n+\t(libcc1_compile, libcc1_destroy, vtable): Remove.\n+\t(libcc1::add_callbacks): New method, extracted from\n+\tlibcc1_compile.\n+\t(gcc_c_fe_context): Update.\n+\t* gdbctx.hh (base_gdb_plugin): Change parameters.\n+\t(~base_gdb_plugin): New.\n+\t<add_callbacks>: New virtual method.\n+\t<plugin_name, fe_version, compiler_name, vtable>: New members.\n+\t(get_self, do_set_verbose, do_set_arguments)\n+\t(do_set_triplet_regexp, do_set_driver_filename)\n+\t(do_set_arguments_v0, do_set_source_file, do_set_print_callback)\n+\t(fork_exec, do_compile, do_compile_v0, do_destroy): New methods.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcp1.cc (vtable): Use GCC_FE_VERSION_1.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcp1.cc (struct libcp1): Derive from base_gdb_plugin.  Remove\n+\tshared code.\n+\t(class libcp1_connection): Remove.\n+\t(rpc): Remove.\n+\t(libcp1_set_verbose, libcp1_compile): Update.\n+\t(cp_call_binding_oracle, cp_call_symbol_address)\n+\t(cp_call_enter_scope, cp_call_leave_scope): Update.\n+\t* libcc1.cc (struct libcc1): Derive from base_gdb_plugin.  Remove\n+\tshared code.\n+\t(class libcc1_connection): Remove.\n+\t(c_call_binding_oracle, c_call_symbol_address): Update.\n+\t(rpc): Remove.\n+\t(libcc1_set_verbose, libcc1_compile): Update.\n+\t* gdbctx.hh: New file.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcc1plugin.cc: Move code to context.cc.\n+\t* libcp1plugin.cc: Move code to context.cc.\n+\t* context.hh: New file.\n+\t* context.cc: New file.\n+\t* Makefile.in: Rebuild.\n+\t* Makefile.am (AM_CPPFLAGS): Add more gcc flags.\n+\t(CPPFLAGS_FOR_C, CPPFLAGS_FOR_CXX): Update.\n+\t(libcc1plugin_la_SOURCES): Add context.hh, context.cc.\n+\t(libcp1plugin_la_SOURCES): Likewise.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcp1plugin.cc: Use static assert.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcp1plugin.cc (plugin_context::mark): Use foreach.\n+\t* libcc1plugin.cc (plugin_context::mark): Use foreach.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcp1.cc (compiler, compiler_triplet_regexp)\n+\t(compiler_driver_filename): Remove.\n+\t(libcp1::libcp1): Update.\n+\t(make_regexp, libcp1::compiler::find)\n+\t(libcp1::compiler_triplet_regexp::find)\n+\t(libcp1::compiler_driver_filename::find): Remove.\n+\t(libcp1_set_verbose, libcp1_set_arguments)\n+\t(libcp1_set_triplet_regexp, libcp1_set_driver_filename): Update.\n+\t* libcc1.cc (compiler, compiler_triplet_regexp)\n+\t(compiler_driver_filename): Remove.\n+\t(libcc1::libcc1): Update.\n+\t(make_regexp, libcc1::compiler::find)\n+\t(libcc1::compiler_triplet_regexp::find)\n+\t(libcc1::compiler_driver_filename::find): Remove.\n+\t(libcc1_set_verbose, libcc1_set_arguments)\n+\t(libcc1_set_triplet_regexp, libcc1_set_driver_filename): Update.\n+\t* compiler.cc: New file.\n+\t* compiler.hh: New file.\n+\t* Makefile.in: Rebuild.\n+\t* Makefile.am (libcc1_la_SOURCES): Add compiler.hh, compiler.cc.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcp1.cc (struct libcp1) <connection, compilerp>: Use\n+\tunique_ptr.\n+\t(~libcp1): Remove.\n+\t(libcp1_compile, libcp1_set_triplet_regexp)\n+\t(libcp1_set_driver_filename): Update.\n+\t* libcc1.cc (struct libcc1) <connection, compilerp>: Use\n+\tunique_ptr.\n+\t(~libcc1): Remove.\n+\t(libcc1_set_triplet_regexp, libcc1_set_driver_filename)\n+\t(libcc1_compile): Update.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* rpc.hh (deleter): Move template and some specializations to\n+\tdeleter.hh.\n+\t(argument_wrapper<const T *>): Use cc1_plugin::unique_ptr.\n+\t* marshall.cc (cc1_plugin::unmarshall): Use\n+\tcc1_plugin::unique_ptr.\n+\t* marshall-cp.hh (deleter): New specializations.\n+\t(unmarshall): Use cc1_plugin::unique_ptr.\n+\t* deleter.hh: New file.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* rpc.hh (struct deleter): New template class and\n+\tspecializations.\n+\t(argument_wrapper): Remove specializations.  Add specialization\n+\tfor any pointer type.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcp1plugin.cc (plugin_build_function_type): Use std::vector.\n+\t* libcc1plugin.cc (plugin_build_function_type): Use std::vector.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcp1.cc (rpc): Use variadic template.  Remove overloads.\n+\t* libcc1.cc (rpc): Use variadic template.  Remove overloads.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* rpc.hh (call): Use variadic template.  Remove overloads.\n+\t* marshall.hh (marshall): Add base overload.  Use variadic\n+\ttemplate.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* rpc.hh (argument_wrapper): Use delete for copy constructor.\n+\t* connection.hh (class connection): Use delete for copy\n+\tconstructor.\n+\t* callbacks.hh (class callbacks): Use delete for copy constructor.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* connection.hh (~connection): Use default.\n+\t(print): Inline.\n+\t* connection.cc (cc1_plugin::connection::~connection)\n+\t(cc1_plugin::connection::print): Remove definitions.\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* libcp1.cc (class compiler_triplet_regexp)\n+\t(class compiler_driver_filename, class libcp1_connection): Use\n+\t\"override\".\n+\t* libcc1.cc (class compiler_triplet_regexp)\n+\t(class compiler_driver_filename, class libcc1_connection): Use\n+\t\"override\".\n+\n+2021-05-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* marshall.hh (cc1_plugin::unmarshall): Use type traits.\n+\t* marshall-cp.hh (cc1_plugin::unmarshall): Remove overloads.\n+\t* marshall-c.hh: Remove.\n+\t* libcc1plugin.cc: Update includes.\n+\t* libcc1.cc: Update includes.\n+\n 2021-05-03  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/99703"}, {"sha": "27d79ae0ac715c8f4dac0ceccb51b5a9d9b2531f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449480114aa5ee7e400b75c654f548e38fd03a64/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449480114aa5ee7e400b75c654f548e38fd03a64/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=449480114aa5ee7e400b75c654f548e38fd03a64", "patch": "@@ -1,3 +1,8 @@\n+2021-05-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* intrinsics/chmod.c (chmod_internal): Only declare mode_mask var\n+\tif HAVE_UMASK.\n+\n 2021-05-02  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR libgomp/100352"}, {"sha": "f6dbad089ed12eb0aba1c1b296c93233a99c500b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449480114aa5ee7e400b75c654f548e38fd03a64/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449480114aa5ee7e400b75c654f548e38fd03a64/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=449480114aa5ee7e400b75c654f548e38fd03a64", "patch": "@@ -1,3 +1,42 @@\n+2021-05-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_util.h (enable_borrowed_range<subrange>):\n+\tRemove constraints on this partial specialization.\n+\t* include/std/ranges (enable_borrowed_range<iota_view>):\n+\tLikewise.\n+\n+2021-05-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (transform_view::_Iterator::iter_swap):\n+\tRemove as per LWG 3520.\n+\t(join_view::_Iterator::iter_swap): Add indirectly_swappable\n+\tconstraint as per LWG 3517.\n+\n+2021-05-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/function_objects/invoke/3.cc: Check feature\n+\ttest macro.\n+\t* testsuite/20_util/function_objects/invoke/version.cc: New test.\n+\n+2021-05-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/charconv (__from_chars_alnum): Pass unsigned\n+\tchar to std::isdigit.\n+\n+2021-05-05  Corentin Gay  <gay@adacore.com>\n+\n+\t* acinclude.m4: Add VxWorks-specific case for the\n+\tconfiguration of ctypes.\n+\t* configure: Regenerate.\n+\t* config/locale/vxworks/ctype_members.cc: Add VxWorks-specific\n+\tversion.\n+\t* config/os/vxworks/ctype_base.h: Adjust for VxWorks7+.\n+\t* config/os/vxworks/ctype_configure_char.cc: Likewise.\n+\t* config/os/vxworks/ctype_inline.h: Likewise.\n+\t* testsuite/28_regex/traits/char/isctype.cc: Defines\n+\tNEWLINE_IN_CLASS_BLANK if the target is VxWorks.\n+\t* testsuite/28_regex/traits/wchar_t/isctype.cc: Likewise.\n+\n 2021-05-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/future (promise::set_value): Check for existence"}]}