{"sha": "ba67231631b83b0b4dc499a42e07104233ee4b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2NzIzMTYzMWI4M2IwYjRkYzQ5OWE0MmUwNzEwNDIzM2VlNGIwMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-02-05T23:13:00Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-02-05T23:13:00Z"}, "message": "Simplify post epilogue_completed splitters.\n\nNow that we have post epilogue_completed split point for all\noptimization levels, we can simplify post epilogue_completed splitters\nconsiderably. If corresponding define_peephole2 pattern fails to\nallocate a temporary register (or if peephole2 pass isn't run at all),\nwe can now always split invalid RTX after epilogue_completed is set.\n\nBootstrapped and regression tested on x86_64-linux-gnu {,-m32}.\n\n\t* config/i386/i386.md (*pushdi2_rex64 peephole2): Remove.\n\t(*pushdi2_rex64 peephole2): Unconditionally split after\n\tepilogue_completed.\n\t(*ashl<mode>3_doubleword): Ditto.\n\t(*<shift_insn><mode>3_doubleword): Ditto.", "tree": {"sha": "fa0754c763bd412298030615f24f8c2c75d57168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa0754c763bd412298030615f24f8c2c75d57168"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba67231631b83b0b4dc499a42e07104233ee4b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba67231631b83b0b4dc499a42e07104233ee4b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba67231631b83b0b4dc499a42e07104233ee4b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba67231631b83b0b4dc499a42e07104233ee4b03/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f214002ba1600ff64a6269c40282dd4ae36be873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f214002ba1600ff64a6269c40282dd4ae36be873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f214002ba1600ff64a6269c40282dd4ae36be873"}], "stats": {"total": 37, "additions": 14, "deletions": 23}, "files": [{"sha": "8fb1da0313c9dd33e79f81abef9a666bc445c136", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba67231631b83b0b4dc499a42e07104233ee4b03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba67231631b83b0b4dc499a42e07104233ee4b03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba67231631b83b0b4dc499a42e07104233ee4b03", "patch": "@@ -1,3 +1,11 @@\n+2020-02-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*pushdi2_rex64 peephole2): Remove.\n+\t(*pushdi2_rex64 peephole2): Unconditionally split after\n+\tepilogue_completed.\n+\t(*ashl<mode>3_doubleword): Ditto.\n+\t(*<shift_insn><mode>3_doubleword): Ditto.\n+\n 2020-02-05  Michael Meissner  <meissner@linux.ibm.com>\n \n \tPR target/93568"}, {"sha": "496a8666643bc2876e88192c0bba0ee32238ab9e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba67231631b83b0b4dc499a42e07104233ee4b03/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba67231631b83b0b4dc499a42e07104233ee4b03/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ba67231631b83b0b4dc499a42e07104233ee4b03", "patch": "@@ -1688,38 +1688,21 @@\n ;; First try to get scratch register and go through it.  In case this\n ;; fails, push sign extended lower part first and then overwrite\n ;; upper part by 32bit move.\n+\n (define_peephole2\n   [(match_scratch:DI 2 \"r\")\n    (set (match_operand:DI 0 \"push_operand\")\n         (match_operand:DI 1 \"immediate_operand\"))]\n-  \"TARGET_64BIT && !symbolic_operand (operands[1], DImode)\n+  \"TARGET_64BIT\n+   && !symbolic_operand (operands[1], DImode)\n    && !x86_64_immediate_operand (operands[1], DImode)\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))])\n \n-;; We need to define this as both peepholer and splitter for case\n-;; peephole2 pass is not run.\n-;; \"&& 1\" is needed to keep it from matching the previous pattern.\n-(define_peephole2\n-  [(set (match_operand:DI 0 \"push_operand\")\n-        (match_operand:DI 1 \"immediate_operand\"))]\n-  \"TARGET_64BIT && !symbolic_operand (operands[1], DImode)\n-   && !x86_64_immediate_operand (operands[1], DImode) && 1\"\n-  [(set (match_dup 0) (match_dup 1))\n-   (set (match_dup 2) (match_dup 3))]\n-{\n-  split_double_mode (DImode, &operands[1], 1, &operands[2], &operands[3]);\n-\n-  operands[1] = gen_lowpart (DImode, operands[2]);\n-  operands[2] = gen_rtx_MEM (SImode, gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t\t   GEN_INT (4)));\n-})\n-\n (define_split\n   [(set (match_operand:DI 0 \"push_operand\")\n         (match_operand:DI 1 \"immediate_operand\"))]\n-  \"TARGET_64BIT && ((optimize > 0 && flag_peephole2)\n-\t\t    ? epilogue_completed : reload_completed)\n+  \"TARGET_64BIT && epilogue_completed\n    && !symbolic_operand (operands[1], DImode)\n    && !x86_64_immediate_operand (operands[1], DImode)\"\n   [(set (match_dup 0) (match_dup 1))\n@@ -10586,7 +10569,7 @@\n \t(ashift:DWI (match_operand:DWI 1 \"nonmemory_operand\")\n \t\t    (match_operand:QI 2 \"nonmemory_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(optimize && flag_peephole2) ? epilogue_completed : reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n   \"ix86_split_ashl (operands, NULL_RTX, <MODE>mode); DONE;\")\n \n@@ -11338,7 +11321,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"#\"\n-  \"(optimize && flag_peephole2) ? epilogue_completed : reload_completed\"\n+  \"epilogue_completed\"\n   [(const_int 0)]\n   \"ix86_split_<shift_insn> (operands, NULL_RTX, <MODE>mode); DONE;\"\n   [(set_attr \"type\" \"multi\")])"}]}