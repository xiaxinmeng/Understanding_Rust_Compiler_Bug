{"sha": "8fad45f5b6577a0b999ee32ab07108b16522ab1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZhZDQ1ZjViNjU3N2EwYjk5OWVlMzJhYjA3MTA4YjE2NTIyYWIxYg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2016-05-16T10:22:25Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-05-16T10:22:25Z"}, "message": "Remove TARGET_INVALID_PARAMETER_TYPE and TARGET_INVALID_RETURN_TYPE hooks.\n\nc/\n2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* c-decl.c (grokdeclarator): Remove errmsg and use of\n\ttargetm.invalid_return_type.\n\t(grokparms): Remove errmsg and use of\n\ttargetm.invalid_parameter_type.\n\ncp/\n2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* decl.c (grokdeclarator): Remove errmsg and use of\n\ttargetm.invalid_return_type.\n\t(grokparms): Remove errmsg and use of\n\ttargetm.invalid_parameter_type.\n\ngcc/\n2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in (TARGET_INVALID_PARAMETER_TYPE): Remove.\n\t(TARGET_INVALID_RETURN_TYPE): Remove.\n\t* system.h: Poison TARGET_INVALID_PARAMETER_TYPE and\n\tTARGET_INVALID_RETURN_TYPE.\n\t* target.def (invalid_parameter_type): Remove.\n\t(invalid_return_type): Remove.\n\nFrom-SVN: r236276", "tree": {"sha": "dae4d881b454aa2b60b420ca1c47550c452cbdf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dae4d881b454aa2b60b420ca1c47550c452cbdf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fad45f5b6577a0b999ee32ab07108b16522ab1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fad45f5b6577a0b999ee32ab07108b16522ab1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fad45f5b6577a0b999ee32ab07108b16522ab1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fad45f5b6577a0b999ee32ab07108b16522ab1b/comments", "author": null, "committer": null, "parents": [{"sha": "34da9c9840ae773d1b0196a9e27ffa2b40ed14f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34da9c9840ae773d1b0196a9e27ffa2b40ed14f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34da9c9840ae773d1b0196a9e27ffa2b40ed14f9"}], "stats": {"total": 101, "additions": 27, "deletions": 74}, "files": [{"sha": "88e39abaf17c619234c842a5dc8c23d1c92dca3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fad45f5b6577a0b999ee32ab07108b16522ab1b", "patch": "@@ -1,3 +1,13 @@\n+2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in (TARGET_INVALID_PARAMETER_TYPE): Remove.\n+\t(TARGET_INVALID_RETURN_TYPE): Remove.\n+\t* system.h: Poison TARGET_INVALID_PARAMETER_TYPE and\n+\tTARGET_INVALID_RETURN_TYPE.\n+\t* target.def (invalid_parameter_type): Remove.\n+\t(invalid_return_type): Remove.\n+\n 2016-05-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-analysis.c (compute_inline_parameters): Be more reailistic"}, {"sha": "67b300a7e779384336c076b52a6f2c94209ebb91", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8fad45f5b6577a0b999ee32ab07108b16522ab1b", "patch": "@@ -1,3 +1,10 @@\n+2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* c-decl.c (grokdeclarator): Remove errmsg and use of\n+\ttargetm.invalid_return_type.\n+\t(grokparms): Remove errmsg and use of\n+\ttargetm.invalid_parameter_type.\n+\n 2016-05-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.c (grokdeclarator): For C11, discard qualifiers on"}, {"sha": "9441fbb3b40cfee42e3050d833382eeec0402c31", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=8fad45f5b6577a0b999ee32ab07108b16522ab1b", "patch": "@@ -5356,7 +5356,6 @@ grokdeclarator (const struct c_declarator *declarator,\n   struct c_arg_info *arg_info = 0;\n   addr_space_t as1, as2, address_space;\n   location_t loc = UNKNOWN_LOCATION;\n-  const char *errmsg;\n   tree expr_dummy;\n   bool expr_const_operands_dummy;\n   enum c_declarator_kind first_non_attr_kind;\n@@ -6090,12 +6089,6 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t      \t    \"an array\");\n \t\ttype = integer_type_node;\n \t      }\n-\t    errmsg = targetm.invalid_return_type (type);\n-\t    if (errmsg)\n-\t      {\n-\t\terror (errmsg);\n-\t\ttype = integer_type_node;\n-\t      }\n \n \t    /* Construct the function type and go to the next\n \t       inner layer of declarator.  */\n@@ -6847,7 +6840,6 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n     {\n       tree parm, type, typelt;\n       unsigned int parmno;\n-      const char *errmsg;\n \n       /* If there is a parameter of incomplete type in a definition,\n \t this is an error.  In a declaration this is valid, and a\n@@ -6896,15 +6888,6 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n \t\t}\n \t    }\n \n-\t  errmsg = targetm.invalid_parameter_type (type);\n-\t  if (errmsg)\n-\t    {\n-\t      error (errmsg);\n-\t      TREE_VALUE (typelt) = error_mark_node;\n-\t      TREE_TYPE (parm) = error_mark_node;\n-\t      arg_types = NULL_TREE;\n-\t    }\n-\n \t  if (DECL_NAME (parm) && TREE_USED (parm))\n \t    warn_if_shadowing (parm);\n \t}"}, {"sha": "1884bc9c52d4a131873710f4de26ce28ca294caf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8fad45f5b6577a0b999ee32ab07108b16522ab1b", "patch": "@@ -1,3 +1,10 @@\n+2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* decl.c (grokdeclarator): Remove errmsg and use of\n+\ttargetm.invalid_return_type.\n+\t(grokparms): Remove errmsg and use of\n+\ttargetm.invalid_parameter_type.\n+\n 2016-05-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/10200"}, {"sha": "d493a776a0c26f40d3b00084e0d5f2b408bc4193", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8fad45f5b6577a0b999ee32ab07108b16522ab1b", "patch": "@@ -9247,7 +9247,6 @@ grokdeclarator (const cp_declarator *declarator,\n   bool late_return_type_p = false;\n   bool array_parameter_p = false;\n   source_location saved_loc = input_location;\n-  const char *errmsg;\n   tree reqs = NULL_TREE;\n \n   signed_p = decl_spec_seq_has_spec_p (declspecs, ds_signed);\n@@ -10047,12 +10046,6 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t   decl, but to its return type.  */\n \t\ttype_quals = TYPE_UNQUALIFIED;\n \t      }\n-\t    errmsg = targetm.invalid_return_type (type);\n-\t    if (errmsg)\n-\t      {\n-\t\terror (errmsg);\n-\t\ttype = integer_type_node;\n-\t      }\n \n \t    /* Error about some types functions can't return.  */\n \n@@ -11686,7 +11679,6 @@ grokparms (tree parmlist, tree *parms)\n       tree type = NULL_TREE;\n       tree init = TREE_PURPOSE (parm);\n       tree decl = TREE_VALUE (parm);\n-      const char *errmsg;\n \n       if (parm == void_list_node)\n \tbreak;\n@@ -11729,14 +11721,6 @@ grokparms (tree parmlist, tree *parms)\n \t  init = NULL_TREE;\n \t}\n \n-      if (type != error_mark_node\n-\t  && (errmsg = targetm.invalid_parameter_type (type)))\n-\t{\n-\t  error (errmsg);\n-\t  type = error_mark_node;\n-\t  TREE_TYPE (decl) = error_mark_node;\n-\t}\n-\n       if (type != error_mark_node)\n \t{\n \t  if (deprecated_state != DEPRECATED_SUPPRESS)"}, {"sha": "8c7f2a124febe75792f6a2b4eb44a44b1c29c47d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8fad45f5b6577a0b999ee32ab07108b16522ab1b", "patch": "@@ -11504,20 +11504,6 @@ and @var{type2}, or @code{NULL} if validity should be determined by\n the front end.\n @end deftypefn\n \n-@deftypefn {Target Hook} {const char *} TARGET_INVALID_PARAMETER_TYPE (const_tree @var{type})\n-If defined, this macro returns the diagnostic message when it is\n-invalid for functions to include parameters of type @var{type},\n-or @code{NULL} if validity should be determined by\n-the front end.  This is currently used only by the C and C++ front ends.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} {const char *} TARGET_INVALID_RETURN_TYPE (const_tree @var{type})\n-If defined, this macro returns the diagnostic message when it is\n-invalid for functions to have return type @var{type},\n-or @code{NULL} if validity should be determined by\n-the front end.  This is currently used only by the C and C++ front ends.\n-@end deftypefn\n-\n @deftypefn {Target Hook} tree TARGET_PROMOTED_TYPE (const_tree @var{type})\n If defined, this target hook returns the type to which values of\n @var{type} should be promoted when they appear in expressions,"}, {"sha": "f963a586612a38eb4596c50d5e84b9e9de0287a3", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=8fad45f5b6577a0b999ee32ab07108b16522ab1b", "patch": "@@ -8173,10 +8173,6 @@ and scanf formatter settings.\n \n @hook TARGET_INVALID_BINARY_OP\n \n-@hook TARGET_INVALID_PARAMETER_TYPE\n-\n-@hook TARGET_INVALID_RETURN_TYPE\n-\n @hook TARGET_PROMOTED_TYPE\n \n @hook TARGET_CONVERT_TO_TYPE"}, {"sha": "78a7da63d8eb894f997fbab0f116f73266da7353", "filename": "gcc/system.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=8fad45f5b6577a0b999ee32ab07108b16522ab1b", "patch": "@@ -987,7 +987,9 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tTARGET_HANDLE_PRAGMA_EXTERN_PREFIX \\\n \tTARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN \\\n \tTARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD \\\n-\tTARGET_MD_ASM_CLOBBERS TARGET_RELAXED_ORDERING EXTENDED_SDB_BASIC_TYPES\n+\tTARGET_MD_ASM_CLOBBERS TARGET_RELAXED_ORDERING \\\n+\tEXTENDED_SDB_BASIC_TYPES TARGET_INVALID_PARAMETER_TYPE \\\n+\tTARGET_INVALID_RETURN_TYPE\n \n /* Arrays that were deleted in favor of a functional interface.  */\n  #pragma GCC poison built_in_decls implicit_built_in_decls"}, {"sha": "6392e73b1977addbf123754443a8bc318a55129a", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fad45f5b6577a0b999ee32ab07108b16522ab1b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=8fad45f5b6577a0b999ee32ab07108b16522ab1b", "patch": "@@ -4820,28 +4820,6 @@ the front end.\",\n  const char *, (int op, const_tree type1, const_tree type2),\n  hook_constcharptr_int_const_tree_const_tree_null)\n \n-/* Return the diagnostic message string if TYPE is not valid as a\n-   function parameter type, NULL otherwise.  */\n-DEFHOOK\n-(invalid_parameter_type,\n- \"If defined, this macro returns the diagnostic message when it is\\n\\\n-invalid for functions to include parameters of type @var{type},\\n\\\n-or @code{NULL} if validity should be determined by\\n\\\n-the front end.  This is currently used only by the C and C++ front ends.\",\n- const char *, (const_tree type),\n- hook_constcharptr_const_tree_null)\n-\n-/* Return the diagnostic message string if TYPE is not valid as a\n-   function return type, NULL otherwise.  */\n-DEFHOOK\n-(invalid_return_type,\n- \"If defined, this macro returns the diagnostic message when it is\\n\\\n-invalid for functions to have return type @var{type},\\n\\\n-or @code{NULL} if validity should be determined by\\n\\\n-the front end.  This is currently used only by the C and C++ front ends.\",\n- const char *, (const_tree type),\n- hook_constcharptr_const_tree_null)\n-\n /* If values of TYPE are promoted to some other type when used in\n    expressions (analogous to the integer promotions), return that type,\n    or NULL_TREE otherwise.  */"}]}