{"sha": "ad527d801855d7992e25b1548628566eefcf69e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1MjdkODAxODU1ZDc5OTJlMjViMTU0ODYyODU2NmVlZmNmNjllOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-08-31T22:09:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-08-31T22:09:47Z"}, "message": "Add source location to TRAIT_EXPR.\n\nSince TRAIT_EXPR is exceptional, maybe_wrap_with_location won't wrap it, so\nwe need to put its location in the TRAIT_EXPR node itself.\n\n\t* cp-tree.h (TRAIT_EXPR_LOCATION): New.\n\t(struct tree_trait_expr): Add locus field.\n\t* parser.c (cp_parser_trait_expr): Pass trait_loc down.\n\t* pt.c (tsubst_copy_and_build) [TRAIT_EXPR]: Likewise.\n\t* semantics.c (finish_trait_expr): Add location parm.\n\t* tree.c (cp_expr_location): Handle TRAIT_EXPR.\n\nFrom-SVN: r275260", "tree": {"sha": "86c87662ff59d345f1508373a2a5b3ceaddf3f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86c87662ff59d345f1508373a2a5b3ceaddf3f1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad527d801855d7992e25b1548628566eefcf69e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad527d801855d7992e25b1548628566eefcf69e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad527d801855d7992e25b1548628566eefcf69e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad527d801855d7992e25b1548628566eefcf69e9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd486c8cdfd943289c8c729f2dc6e0ef911bdb28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd486c8cdfd943289c8c729f2dc6e0ef911bdb28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd486c8cdfd943289c8c729f2dc6e0ef911bdb28"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "9725dda2082af88962f0a7da9971649a7a0836ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ad527d801855d7992e25b1548628566eefcf69e9", "patch": "@@ -1,3 +1,13 @@\n+2019-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\tAdd source location to TRAIT_EXPR.\n+\t* cp-tree.h (TRAIT_EXPR_LOCATION): New.\n+\t(struct tree_trait_expr): Add locus field.\n+\t* parser.c (cp_parser_trait_expr): Pass trait_loc down.\n+\t* pt.c (tsubst_copy_and_build) [TRAIT_EXPR]: Likewise.\n+\t* semantics.c (finish_trait_expr): Add location parm.\n+\t* tree.c (cp_expr_location): Handle TRAIT_EXPR.\n+\n 2019-08-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (check_var_type): Add location_t parameter and use it."}, {"sha": "12eb39a0a4c76a542a688fcf6031e285c5222713", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ad527d801855d7992e25b1548628566eefcf69e9", "patch": "@@ -1295,10 +1295,14 @@ enum cp_trait_kind\n #define TRAIT_EXPR_KIND(NODE) \\\n   (((struct tree_trait_expr *)TRAIT_EXPR_CHECK (NODE))->kind)\n \n+#define TRAIT_EXPR_LOCATION(NODE) \\\n+  (((struct tree_trait_expr *)TRAIT_EXPR_CHECK (NODE))->locus)\n+\n struct GTY (()) tree_trait_expr {\n   struct tree_common common;\n   tree type1;\n   tree type2;\n+  location_t locus;\n   enum cp_trait_kind kind;\n };\n \n@@ -7174,7 +7178,7 @@ extern tree baselink_for_fns                    (tree);\n extern void finish_static_assert                (tree, tree, location_t,\n                                                  bool);\n extern tree finish_decltype_type                (tree, bool, tsubst_flags_t);\n-extern tree finish_trait_expr\t\t\t(enum cp_trait_kind, tree, tree);\n+extern tree finish_trait_expr\t\t\t(location_t, enum cp_trait_kind, tree, tree);\n extern tree build_lambda_expr                   (void);\n extern tree build_lambda_object\t\t\t(tree);\n extern tree begin_lambda_type                   (tree);"}, {"sha": "baa60b8834ecc119bcea9e84f8062f09c47d19d3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ad527d801855d7992e25b1548628566eefcf69e9", "patch": "@@ -10396,7 +10396,7 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n     case CPTK_DIRECT_BASES:\n       return cp_expr (finish_bases (type1, true), trait_loc);\n     default:\n-      return cp_expr (finish_trait_expr (kind, type1, type2), trait_loc);\n+      return finish_trait_expr (trait_loc, kind, type1, type2);\n     }\n }\n "}, {"sha": "187f9d857bc09254cb547e9848f326035bbb7020", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ad527d801855d7992e25b1548628566eefcf69e9", "patch": "@@ -19536,7 +19536,8 @@ tsubst_copy_and_build (tree t,\n \telse if (type2)\n \t  type2 = tsubst (type2, args, complain, in_decl);\n \n-\tRETURN (finish_trait_expr (TRAIT_EXPR_KIND (t), type1, type2));\n+\tRETURN (finish_trait_expr (TRAIT_EXPR_LOCATION (t),\n+\t\t\t\t   TRAIT_EXPR_KIND (t), type1, type2));\n       }\n \n     case STMT_EXPR:"}, {"sha": "56f70a0a58929b52cff9940cf346d4baac977aee", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ad527d801855d7992e25b1548628566eefcf69e9", "patch": "@@ -9921,7 +9921,7 @@ check_trait_type (tree type)\n /* Process a trait expression.  */\n \n tree\n-finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n+finish_trait_expr (location_t loc, cp_trait_kind kind, tree type1, tree type2)\n {\n   if (type1 == error_mark_node\n       || type2 == error_mark_node)\n@@ -9934,6 +9934,7 @@ finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n       TRAIT_EXPR_TYPE1 (trait_expr) = type1;\n       TRAIT_EXPR_TYPE2 (trait_expr) = type2;\n       TRAIT_EXPR_KIND (trait_expr) = kind;\n+      TRAIT_EXPR_LOCATION (trait_expr) = loc;\n       return trait_expr;\n     }\n \n@@ -9991,8 +9992,9 @@ finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n       gcc_unreachable ();\n     }\n \n-  return (trait_expr_value (kind, type1, type2)\n-\t  ? boolean_true_node : boolean_false_node);\n+tree val = (trait_expr_value (kind, type1, type2)\n+\t    ? boolean_true_node : boolean_false_node);\n+ return maybe_wrap_with_location (val, loc);\n }\n \n /* Do-nothing variants of functions to handle pragma FLOAT_CONST_DECIMAL64,"}, {"sha": "7f71891000d8281079152739f4a07fc0f9cf6ae4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ad527d801855d7992e25b1548628566eefcf69e9", "patch": "@@ -5500,6 +5500,8 @@ cp_expr_location (const_tree t_)\n       return LAMBDA_EXPR_LOCATION (t);\n     case STATIC_ASSERT:\n       return STATIC_ASSERT_SOURCE_LOCATION (t);\n+    case TRAIT_EXPR:\n+      return TRAIT_EXPR_LOCATION (t);\n     default:\n       return EXPR_LOCATION (t);\n     }"}, {"sha": "a3c16a4007fd8c933f224f1e26eabdf4abbefc97", "filename": "gcc/testsuite/g++.dg/ext/is_class_error3.C", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad527d801855d7992e25b1548628566eefcf69e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error3.C?ref=ad527d801855d7992e25b1548628566eefcf69e9", "patch": "@@ -0,0 +1,2 @@\n+struct A {};\n+void *p = __is_class (A);\t// { dg-error \"11:cannot convert\" }"}]}