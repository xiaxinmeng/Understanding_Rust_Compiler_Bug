{"sha": "53504016e143103699fd8722de9bf0aacab61b02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1MDQwMTZlMTQzMTAzNjk5ZmQ4NzIyZGU5YmYwYWFjYWI2MWIwMg==", "commit": {"author": {"name": "Stu Grossman", "email": "grossman@babylon-5.cygnus.com", "date": "1999-05-17T00:44:09Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-17T00:44:09Z"}, "message": "cplus-dem.c (demangle_fund_type (near 'I' case)): Don't advance the *mangled pointer beyond the end of the string.\n\n        * cplus-dem.c (demangle_fund_type (near 'I' case)): Don't advance\n        the *mangled pointer beyond the end of the string.  Clean up code to\n        match prevailing coding style.\n\nFrom-SVN: r26959", "tree": {"sha": "cfb9111185284ec86eea5dc7777f4ae27bca7706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfb9111185284ec86eea5dc7777f4ae27bca7706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53504016e143103699fd8722de9bf0aacab61b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53504016e143103699fd8722de9bf0aacab61b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53504016e143103699fd8722de9bf0aacab61b02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53504016e143103699fd8722de9bf0aacab61b02/comments", "author": null, "committer": null, "parents": [{"sha": "51e2a951cc3abdf9a9118f8897d4ca8d76776579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e2a951cc3abdf9a9118f8897d4ca8d76776579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e2a951cc3abdf9a9118f8897d4ca8d76776579"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "caf12de495bfe00a86952ef647b1d159afd7a687", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53504016e143103699fd8722de9bf0aacab61b02/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53504016e143103699fd8722de9bf0aacab61b02/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=53504016e143103699fd8722de9bf0aacab61b02", "patch": "@@ -1,3 +1,9 @@\n+Mon May 17 01:42:34 1999  Stu Grossman  <grossman@babylon-5.cygnus.com>\n+\n+\t* cplus-dem.c (demangle_fund_type (near 'I' case)): Don't advance\n+\tthe *mangled pointer beyond the end of the string.  Clean up code to\n+\tmatch prevailing coding style.\n+\n 1999-05-13  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* tmpnam.c (L_tmpnam): Fix typo."}, {"sha": "6d51710685c6001eadbf0cd224bf471faeb97fba", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53504016e143103699fd8722de9bf0aacab61b02/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53504016e143103699fd8722de9bf0aacab61b02/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=53504016e143103699fd8722de9bf0aacab61b02", "patch": "@@ -51,6 +51,8 @@ char * realloc ();\n \n #include \"libiberty.h\"\n \n+#define min(X,Y) (((X) < (Y)) ? (X) : (Y))\n+\n static const char *mystrstr PARAMS ((const char *, const char *));\n \n static const char *\n@@ -3373,28 +3375,28 @@ demangle_fund_type (work, mangled, result)\n \t  break;\n \t}\n     case 'I':\n-      ++(*mangled);\n+      (*mangled)++;\n       if (**mangled == '_')\n \t{\n \t  int i;\n-\t  ++(*mangled);\n+\t  (*mangled)++;\n \t  for (i = 0;\n-\t       (i < sizeof (buf) - 1 && **mangled && **mangled != '_');\n-\t       ++(*mangled), ++i)\n+\t       i < sizeof (buf) - 1 && **mangled && **mangled != '_';\n+\t       (*mangled)++, i++)\n \t    buf[i] = **mangled;\n \t  if (**mangled != '_')\n \t    {\n \t      success = 0;\n \t      break;\n \t    }\n \t  buf[i] = '\\0';\n-\t  ++(*mangled);\n+\t  (*mangled)++;\n \t}\n       else\n \t{\n \t  strncpy (buf, *mangled, 2);\n \t  buf[2] = '\\0';\n-\t  *mangled += 2;\n+\t  *mangled += min (strlen (*mangled), 2);\n \t}\n       sscanf (buf, \"%x\", &dec);\n       sprintf (buf, \"int%i_t\", dec);"}]}