{"sha": "e80f0cb0b4c0313379c872ef4a8777313c809799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwZjBjYjBiNGMwMzEzMzc5Yzg3MmVmNGE4Nzc3MzEzYzgwOTc5OQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-17T06:37:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:37:45Z"}, "message": "sem_ch3.adb, [...]: Remove the word kludge from ada sources.\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, a-ztexio.ads, exp_imgv.adb, casing.adb, casing.ads,\n\teinfo.ads, checks.adb, sem_ch12.adb, a-textio.ads, freeze.adb,\n\trepinfo.adb, exp_ch6.adb, sem_ch4.adb, a-witeio.ads, sem_ch8.adb,\n\tsem_warn.adb, exp_aggr.adb, exp_dist.adb, par-tchk.adb, s-fatgen.adb,\n\ttreepr.adb, lib-xref.adb: Remove the word kludge from ada sources.\n\nFrom-SVN: r212726", "tree": {"sha": "108280e98ba067a9d39a1fc8f26ead3efb7a2711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/108280e98ba067a9d39a1fc8f26ead3efb7a2711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e80f0cb0b4c0313379c872ef4a8777313c809799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80f0cb0b4c0313379c872ef4a8777313c809799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e80f0cb0b4c0313379c872ef4a8777313c809799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80f0cb0b4c0313379c872ef4a8777313c809799/comments", "author": null, "committer": null, "parents": [{"sha": "2bd67690e9dcdfcddb32cffb13043a1ca95ff756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd67690e9dcdfcddb32cffb13043a1ca95ff756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd67690e9dcdfcddb32cffb13043a1ca95ff756"}], "stats": {"total": 212, "additions": 110, "deletions": 102}, "files": [{"sha": "a96b0ce51a7cb6e80a1c8d63d4e94c7ddd27f91c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -1,3 +1,11 @@\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, a-ztexio.ads, exp_imgv.adb, casing.adb, casing.ads,\n+\teinfo.ads, checks.adb, sem_ch12.adb, a-textio.ads, freeze.adb,\n+\trepinfo.adb, exp_ch6.adb, sem_ch4.adb, a-witeio.ads, sem_ch8.adb,\n+\tsem_warn.adb, exp_aggr.adb, exp_dist.adb, par-tchk.adb, s-fatgen.adb,\n+\ttreepr.adb, lib-xref.adb: Remove the word kludge from ada sources.\n+\n 2014-07-17  Robert Dewar  <dewar@adacore.com>\n \n \t* debug.adb: Remove -gnatdQ."}, {"sha": "d04b2e9e72f0d761ce54a547788dd29bab9d37f1", "filename": "gcc/ada/a-textio.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fa-textio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fa-textio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-textio.ads?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -389,7 +389,7 @@ private\n       --  there is no convenient way of backing up more than one character,\n       --  what we do is to leave ourselves positioned past the LM, but set\n       --  this flag, so that we know that from an Ada point of view we are\n-      --  in front of the LM, not after it. A bit of a kludge, but it works.\n+      --  in front of the LM, not after it. A little odd, but it works.\n \n       Before_LM_PM : Boolean := False;\n       --  This flag similarly handles the case of being physically positioned"}, {"sha": "70375f2215f749e85bf65589785fa34375e3ecea", "filename": "gcc/ada/a-witeio.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fa-witeio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fa-witeio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-witeio.ads?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -389,7 +389,7 @@ private\n       --  there is no convenient way of backing up more than one character,\n       --  what we do is to leave ourselves positioned past the LM, but set\n       --  this flag, so that we know that from an Ada point of view we are\n-      --  in front of the LM, not after it. A bit of a kludge, but it works.\n+      --  in front of the LM, not after it. A bit odd, but it works.\n \n       Before_LM_PM : Boolean := False;\n       --  This flag similarly handles the case of being physically positioned"}, {"sha": "ef90c920ed1c817fadd41453383c2c5597680f2c", "filename": "gcc/ada/a-ztexio.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fa-ztexio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fa-ztexio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztexio.ads?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -389,7 +389,7 @@ private\n       --  there is no convenient way of backing up more than one character,\n       --  what we do is to leave ourselves positioned past the LM, but set\n       --  this flag, so that we know that from an Ada point of view we are\n-      --  in front of the LM, not after it. A bit of a kludge, but it works.\n+      --  in front of the LM, not after it. A bit odd, but it works.\n \n       Before_LM_PM : Boolean := False;\n       --  This flag similarly handles the case of being physically positioned"}, {"sha": "5ed97be1263e5b54385fb02471a8358a7ec93800", "filename": "gcc/ada/casing.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fcasing.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fcasing.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcasing.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -59,7 +59,7 @@ package body Casing is\n       --  True at start of string, and after an underline character\n \n    begin\n-      --  A special kludge, consider SPARK_Mode to be mixed case\n+      --  A special exception, consider SPARK_Mode to be mixed case\n \n       if Ident = \"SPARK_Mode\" then\n          return Mixed_Case;"}, {"sha": "dec27eed44e54533043ea49c04703add04652560", "filename": "gcc/ada/casing.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fcasing.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fcasing.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcasing.ads?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -84,6 +84,8 @@ package Casing is\n    --  equivalent to Set_Casing (All_Upper_Case).\n \n    function Determine_Casing (Ident : Text_Buffer) return Casing_Type;\n-   --  Determines the casing of the identifier/keyword string Ident\n+   --  Determines the casing of the identifier/keyword string Ident. A special\n+   --  test is made for SPARK_Mode which is considered to be mixed case, since\n+   --  this gives a better general behavior.\n \n end Casing;"}, {"sha": "587092ba776dfcd3b03b2e8bd2942329c500e0cb", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6515,10 +6515,10 @@ package body Checks is\n \n          PV := Duplicate_Subexpr_No_Checks (Exp, Name_Req => False);\n \n-         --  A rather specialized kludge. If PV is an analyzed expression\n-         --  which is an indexed component of a packed array that has not\n-         --  been properly expanded, turn off its Analyzed flag to make sure\n-         --  it gets properly reexpanded.\n+         --  A rather specialized test. If PV is an analyzed expression which\n+         --  is an indexed component of a packed array that has not been\n+         --  properly expanded, turn off its Analyzed flag to make sure it\n+         --  gets properly reexpanded.\n \n          --  The reason this arises is that Duplicate_Subexpr_No_Checks did\n          --  an analyze with the old parent pointer. This may point e.g. to"}, {"sha": "40243732869db12b3c4fde19e20807263afcf7e2", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6936,9 +6936,9 @@ package Einfo is\n    --  It would be cleaner to use No_Uint in all these cases, but historically\n    --  we chose to use Uint_0 at first, and the change over will take time ???\n    --  This is particularly true for the RM_Size field, where a value of zero\n-   --  is legitimate. We deal with this by a nasty kludge that knows that the\n-   --  value is always known static for discrete types (and no other types can\n-   --  have an RM_Size value of zero).\n+   --  is legitimate. We deal with this by a considering that the value is\n+   --  always known static for discrete types (and no other types can have\n+   --  an RM_Size value of zero).\n \n    --  In two cases, Known_Static_Esize and Known_Static_RM_Size, there is one\n    --  more consideration, which is that we always return False for generic\n@@ -7439,7 +7439,7 @@ package Einfo is\n    --  It would be cleaner to use No_Uint in all these cases, but historically\n    --  we chose to use Uint_0 at first, and the change over will take time ???\n    --  This is particularly true for the RM_Size field, where a value of zero\n-   --  is legitimate and causes some kludges around the code.\n+   --  is legitimate and causes some special tests around the code.\n \n    --  Contrary to the corresponding Set procedures above, these routines\n    --  do NOT check the entity kind of their argument, instead they set the"}, {"sha": "1bc6fb6e7245e67bcd7a0d4cbf150fdf1b922b92", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -1952,13 +1952,13 @@ package body Exp_Aggr is\n                         Assoc := Expression (Assoc);\n                      end if;\n \n-                     --  If the located association directly denotes a\n-                     --  discriminant, then use the value of a saved\n-                     --  association of the aggregate. This is a kludge to\n-                     --  handle certain cases involving multiple discriminants\n-                     --  mapped to a single discriminant of a descendant. It's\n-                     --  not clear how to locate the appropriate discriminant\n-                     --  value for such cases. ???\n+                     --  If the located association directly denotes\n+                     --  a discriminant, then use the value of a saved\n+                     --  association of the aggregate. This is an approach\n+                     --  used to handle certain cases involving multiple\n+                     --  discriminants mapped to a single discriminant of\n+                     --  a descendant. It's not clear how to locate the\n+                     --  appropriate discriminant value for such cases. ???\n \n                      if Is_Entity_Name (Assoc)\n                        and then Ekind (Entity (Assoc)) = E_Discriminant"}, {"sha": "374e26f7cbbc124ab330d1efe7b76a2250f38d5e", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -2614,16 +2614,16 @@ package body Exp_Ch6 is\n \n       --  Detect the following code in System.Finalization_Masters only on\n       --  .NET/JVM targets:\n-      --\n+\n       --    procedure Finalize (Master : in out Finalization_Master) is\n       --    begin\n       --       . . .\n       --       begin\n       --          Finalize (Curr_Ptr.all);\n-      --\n+\n       --  Since .NET/JVM compilers lack address arithmetic and Deep_Finalize\n-      --  cannot be named in library or user code, the compiler has to install\n-      --  a kludge and transform the call to Finalize into Deep_Finalize.\n+      --  cannot be named in library or user code, the compiler has to deal\n+      --  with this by transforming the call to Finalize into Deep_Finalize.\n \n       if VM_Target /= No_VM\n         and then Chars (Subp) = Name_Finalize"}, {"sha": "9e8b32d98ca0caedcaa6042e8546176cbd42cf97", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2036,7 +2036,7 @@ package body Exp_Dist is\n          Append_To (Decls, RPC_Receiver_Decl);\n \n       else\n-         --  Kludge, requires comment???\n+         --  Comments required here???\n \n          RPC_Receiver_Decl := Last (Decls);\n       end if;"}, {"sha": "f249afe0f8c8f83c38fb8f3850eb8f56384d8591", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -742,9 +742,9 @@ package body Exp_Imgv is\n       --  generating spurious errors caused by the use of Integer_Address'Value\n       --  in our implementation of Ada.Tags.Internal_Tag\n \n-      --  Seems like a bit of a kludge, there should be a better way ???\n+      --  Seems like a bit of a odd approach, there should be a better way ???\n \n-      --  There is a better way, you should also test RTE_Available ???\n+      --  There is a better way, test RTE_Available ???\n \n       if No_Run_Time_Mode\n         and then Rtyp = RTE (RE_Integer_Address)"}, {"sha": "5a18f3e7925d666f7247f56b9e1f2c4bb736905f", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -2939,12 +2939,12 @@ package body Freeze is\n                   S              : Entity_Id;\n \n                begin\n-                  --  We have a pretty bad kludge here. Suppose Rec is subtype\n-                  --  being defined in a subprogram that's created as part of\n-                  --  the freezing of Rec'Base. In that case, we know that\n-                  --  Comp'Base must have already been frozen by the time we\n-                  --  get to elaborate this because Gigi doesn't elaborate any\n-                  --  bodies until it has elaborated all of the declarative\n+                  --  We have a difficult case to handle here. Suppose Rec is\n+                  --  subtype being defined in a subprogram that's created as\n+                  --  part of the freezing of Rec'Base. In that case, we know\n+                  --  that Comp'Base must have already been frozen by the time\n+                  --  we get to elaborate this because Gigi doesn't elaborate\n+                  --  any bodies until it has elaborated all of the declarative\n                   --  part. But Is_Frozen will not be set at this point because\n                   --  we are processing code in lexical order.\n \n@@ -7165,7 +7165,7 @@ package body Freeze is\n       --  Since we don't want T to have a Freeze_Node, we don't want its\n       --  Full_View or Corresponding_Record_Type to have one either.\n \n-      --  ??? Fundamentally, this whole handling is a kludge. What we really\n+      --  ??? Fundamentally, this whole handling is unpleasant. What we really\n       --  want is to be sure that for an Itype that's part of record R and is a\n       --  subtype of type T, that it's frozen after the later of the freeze\n       --  points of R and T. We have no way of doing that directly, so what we"}, {"sha": "95c87ef7194185b01e131a9c5780bca34be3c99c", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -477,8 +477,8 @@ package body Lib.Xref is\n             elsif (K = N_Selected_Component or else K = N_Indexed_Component)\n               and then Prefix (P) = N\n             then\n-               --  Check for access type. First a kludge, In some cases this is\n-               --  called too early (see comments in Sem_Ch8.Find_Direct_Name),\n+               --  Check for access type. First a special test, In some cases\n+               --  this is called too early (see comments in Find_Direct_Name),\n                --  at a point where the tree is not fully typed yet. In that\n                --  case we may lack an Etype for N, and we can't check the\n                --  Etype. For now, we always return False in such a case,"}, {"sha": "f9f2ec50ecc1755aa986131a351b2c96fd8d9c30", "filename": "gcc/ada/par-tchk.adb", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fpar-tchk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fpar-tchk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-tchk.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -452,12 +452,11 @@ package body Tchk is\n          Scan;\n          return;\n \n-      --  An interesting little kludge. If the previous token is a semicolon,\n+      --  An interesting little case. If the previous token is a semicolon,\n       --  then there is no way that we can legitimately need another semicolon.\n-      --  This could only arise in an error situation where an error has\n-      --  already been signalled. By simply ignoring the request for a\n-      --  semicolon in this case, we avoid some spurious missing semicolon\n-      --  messages.\n+      --  This could only arise in an situation where an error has already been\n+      --  signalled. By simply ignoring the request for a semicolon in this\n+      --  case, we avoid some spurious missing semicolon messages.\n \n       elsif Prev_Token = Tok_Semicolon then\n          return;\n@@ -703,7 +702,7 @@ package body Tchk is\n          T_Semicolon;\n          return;\n \n-      --  An interesting little kludge here. If the previous token is a\n+      --  An interesting little test here. If the previous token is a\n       --  semicolon, then there is no way that we can legitimately need\n       --  another semicolon. This could only arise in an error situation\n       --  where an error has already been signalled. By simply ignoring"}, {"sha": "5d1c1db61721396b826d7fd89cf49880debce0da", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -946,11 +946,11 @@ package body Repinfo is\n             UI_Write (Fbit);\n             Write_Str (\" .. \");\n \n-            --  Allowing Uint_0 here is a kludge, really this should be a\n-            --  fine Esize value but currently it means unknown, except that\n-            --  we know after gigi has back annotated that a size of zero is\n-            --  real, since otherwise gigi back annotates using No_Uint as\n-            --  the value to indicate unknown).\n+            --  Allowing Uint_0 here is an annoying special case. Really this\n+            --  should be a fine Esize value but currently it means unknown,\n+            --  except that we know after gigi has back annotated that a size\n+            --  of zero is real, since otherwise gigi back annotates using\n+            --  No_Uint as the value to indicate unknown).\n \n             if (Esize (Comp) = Uint_0 or else Known_Static_Esize (Comp))\n               and then Known_Static_Normalized_First_Bit (Comp)\n@@ -963,10 +963,11 @@ package body Repinfo is\n \n                UI_Write (Lbit);\n \n-            --  The test for Esize (Comp) not being Uint_0 here is a kludge.\n-            --  Officially a value of zero for Esize means unknown, but here\n-            --  we use the fact that we know that gigi annotates Esize with\n-            --  No_Uint, not Uint_0. Really everyone should use No_Uint???\n+            --  The test for Esize (Comp) not Uint_0 here is an annoying\n+            --  special case. Officially a value of zero for Esize means\n+            --  unknown, but here we use the fact that we know that gigi\n+            --  annotates Esize with No_Uint, not Uint_0. Really everyone\n+            --  should use No_Uint???\n \n             elsif List_Representation_Info < 3\n               or else (Esize (Comp) /= Uint_0 and then Unknown_Esize (Comp))"}, {"sha": "2644e675bd6f832ec1fa2a83fe2914490cd6d071", "filename": "gcc/ada/s-fatgen.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -832,9 +832,8 @@ package body System.Fat_Gen is\n                               Boolean'Pos (Most_Significant_Word /= 2) +\n                                 Boolean'Pos (Most_Significant_Word = 2);\n       --  Factor that the extracted exponent needs to be divided by to be in\n-      --  range 0 .. IEEE_Emax - IEEE_Emin + 2. Special kludge: Exponent_Factor\n-      --  is 1 for x86/IA64 double extended as GCC adds unused bits to the\n-      --  type.\n+      --  range 0 .. IEEE_Emax - IEEE_Emin + 2. Special case: Exponent_Factor\n+      --  is 1 for x86/IA64 double extended (GCC adds unused bits to the type).\n \n       Exponent_Mask : constant Float_Word :=\n                         Float_Word (IEEE_Emax - IEEE_Emin + 2) *"}, {"sha": "24dfa4e51d7e40c057da3de992e45628942a4f60", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -3423,8 +3423,8 @@ package body Sem_Ch12 is\n    begin\n       Check_SPARK_Restriction (\"generic is not allowed\", N);\n \n-      --  Very first thing: apply the special kludge for Text_IO processing\n-      --  in case we are instantiating one of the children of [Wide_]Text_IO.\n+      --  Very first thing: check for Text_IO sp[ecial unit in case we are\n+      --  instantiating one of the children of [[Wide_]Wide_]Text_IO.\n \n       Check_Text_IO_Special_Unit (Name (N));\n \n@@ -4670,10 +4670,10 @@ package body Sem_Ch12 is\n    begin\n       Check_SPARK_Restriction (\"generic is not allowed\", N);\n \n-      --  Very first thing: apply the special kludge for Text_IO processing\n-      --  in case we are instantiating one of the children of [Wide_]Text_IO.\n-      --  Of course such an instantiation is bogus (these are packages, not\n-      --  subprograms), but we get a better error message if we do this.\n+      --  Very first thing: check for special Text_IO unit in case we are\n+      --  instantiating one of the children of [[Wide_]Wide_]Text_IO. Of course\n+      --  such an instantiation is bogus (these are packages, not subprograms),\n+      --  but we get a better error message if we do this.\n \n       Check_Text_IO_Special_Unit (Gen_Id);\n "}, {"sha": "48982bd4b5b7ea82c9506d4b699946cc349d4a20", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -1185,10 +1185,11 @@ package body Sem_Ch3 is\n       if Present (Formals) then\n          Push_Scope (Desig_Type);\n \n-         --  A bit of a kludge here. These kludges will be removed when Itypes\n-         --  have proper parent pointers to their declarations???\n+         --  Some special tests here. These special tests can be removed\n+         --  if and when Itypes always have proper parent pointers to their\n+         --  declarations???\n \n-         --  Kludge 1) Link defining_identifier of formals. Required by\n+         --  Special test 1) Link defining_identifier of formals. Required by\n          --  First_Formal to provide its functionality.\n \n          declare\n@@ -1224,8 +1225,8 @@ package body Sem_Ch3 is\n \n          Process_Formals (Formals, Parent (T_Def));\n \n-         --  Kludge 2) End_Scope requires that the parent pointer be set to\n-         --  something reasonable, but Itypes don't have parent pointers. So\n+         --  Special test 2) End_Scope requires that the parent pointer be set\n+         --  to something reasonable, but Itypes don't have parent pointers. So\n          --  we set it and then unset it ???\n \n          Set_Parent (Desig_Type, T_Name);\n@@ -4369,8 +4370,8 @@ package body Sem_Ch3 is\n       --  If ancestor has predicates then so does the subtype, and in addition\n       --  we must delay the freeze to properly arrange predicate inheritance.\n \n-      --  The Ancestor_Type test is a big kludge, there seem to be cases in\n-      --  which T = ID, so the above tests and assignments do nothing???\n+      --  The Ancestor_Type test is really unpleasant, there seem to be cases\n+      --  in which T = ID, so the above tests and assignments do nothing???\n \n       if Has_Predicates (T)\n         or else (Present (Ancestor_Subtype (T))\n@@ -11220,7 +11221,7 @@ package body Sem_Ch3 is\n               or else Is_Incomplete_Or_Private_Type (Desig_Type))\n         and then not Is_Constrained (Desig_Type)\n       then\n-         --  ??? The following code is a temporary kludge to ignore a\n+         --  ??? The following code is a temporary bypass to ignore a\n          --  discriminant constraint on access type if it is constraining\n          --  the current record. Avoid creating the implicit subtype of the\n          --  record we are currently compiling since right now, we cannot\n@@ -18754,7 +18755,7 @@ package body Sem_Ch3 is\n       if Known_To_Have_Preelab_Init (Priv_T) then\n \n          --  Case where there is a pragma Preelaborable_Initialization. We\n-         --  always allow this in predefined units, which is a bit of a kludge,\n+         --  always allow this in predefined units, which is cheating a bit,\n          --  but it means we don't have to struggle to meet the requirements in\n          --  the RM for having Preelaborable Initialization. Otherwise we\n          --  require that the type meets the RM rules. But we can't check that"}, {"sha": "8c68dab48946cc303217fac2e55f7813e95bcb63", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6707,10 +6707,10 @@ package body Sem_Ch4 is\n    --------------------------------\n \n    procedure Remove_Abstract_Operations (N : Node_Id) is\n-      Abstract_Op    : Entity_Id := Empty;\n-      Address_Kludge : Boolean := False;\n-      I              : Interp_Index;\n-      It             : Interp;\n+      Abstract_Op        : Entity_Id := Empty;\n+      Address_Descendent : Boolean := False;\n+      I                  : Interp_Index;\n+      It                 : Interp;\n \n       --  AI-310: If overloaded, remove abstract non-dispatching operations. We\n       --  activate this if either extensions are enabled, or if the abstract\n@@ -6746,7 +6746,7 @@ package body Sem_Ch4 is\n                end if;\n \n                if Is_Descendent_Of_Address (Etype (Formal)) then\n-                  Address_Kludge := True;\n+                  Address_Descendent := True;\n                   Remove_Interp (I);\n                end if;\n \n@@ -6774,7 +6774,7 @@ package body Sem_Ch4 is\n                Abstract_Op := It.Nam;\n \n                if Is_Descendent_Of_Address (It.Typ) then\n-                  Address_Kludge := True;\n+                  Address_Descendent := True;\n                   Remove_Interp (I);\n                   exit;\n \n@@ -6943,9 +6943,7 @@ package body Sem_Ch4 is\n             --  predefined operators when addresses are involved since this\n             --  case is handled separately.\n \n-            elsif Ada_Version >= Ada_2005\n-              and then not Address_Kludge\n-            then\n+            elsif Ada_Version >= Ada_2005 and then not Address_Descendent then\n                while Present (It.Nam) loop\n                   if Is_Numeric_Type (It.Typ)\n                     and then Scope (It.Typ) = Standard_Standard"}, {"sha": "7598d5c9eeaca5714f11d94923caf23f72fb6619", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -625,8 +625,8 @@ package body Sem_Ch8 is\n \n    procedure Analyze_Generic_Package_Renaming   (N : Node_Id) is\n    begin\n-      --  Apply the Text_IO Kludge here, since we may be renaming one of the\n-      --  subpackages of Text_IO, then join common routine.\n+      --  Test for the Text_IO special unit case here, since we may be renaming\n+      --  one of the subpackages of Text_IO, then join common routine.\n \n       Check_Text_IO_Special_Unit (Name (N));\n \n@@ -1317,7 +1317,7 @@ package body Sem_Ch8 is\n          return;\n       end if;\n \n-      --  Apply Text_IO kludge here since we may be renaming a child of Text_IO\n+      --  Check for Text_IO special unit (we may be renaming a Text_IO child)\n \n       Check_Text_IO_Special_Unit (Name (N));\n \n@@ -2615,9 +2615,9 @@ package body Sem_Ch8 is\n       --  Ada_83 because there is no requirement of full conformance between\n       --  renamed entity and new entity, even though the same circuit is used.\n \n-      --  This is a bit of a kludge, which introduces a really irregular use of\n-      --  Ada_Version[_Explicit]. Would be nice to find cleaner way to do this\n-      --  ???\n+      --  This is a bit of an odd case, which introduces a really irregular use\n+      --  of Ada_Version[_Explicit]. Would be nice to find cleaner way to do\n+      --  this. ???\n \n       Ada_Version := Ada_Version_Type'Max (Ada_Version, Ada_95);\n       Ada_Version_Pragma := Empty;"}, {"sha": "8b47332be7e4ddb529d003225cd27e7b22cc677f", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -252,8 +252,8 @@ package body Sem_Warn is\n       --  Given an entity name, see if the name appears to have something to\n       --  do with I/O or network stuff, and if so, return True. Used to kill\n       --  some false positives on a heuristic basis that such functions will\n-      --  likely have some strange side effect dependencies. A rather funny\n-      --  kludge, but warning messages are in the heuristics business.\n+      --  likely have some strange side effect dependencies. A rather strange\n+      --  test, but warning messages are in the heuristics business.\n \n       function Test_Ref (N : Node_Id) return Traverse_Result;\n       --  Test for reference to variable in question. Returns Abandon if"}, {"sha": "5bc09a7130f11835cabde50e6f0524036c87a9b3", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80f0cb0b4c0313379c872ef4a8777313c809799/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=e80f0cb0b4c0313379c872ef4a8777313c809799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2090,11 +2090,11 @@ package body Treepr is\n          Visit_Descendent (Field22 (N));\n          Visit_Descendent (Field23 (N));\n \n-         --  Now an interesting kludge. Normally parents are always printed\n-         --  since we traverse the tree in a downwards direction. There is\n-         --  however an exception to this rule, which is the case where a\n-         --  parent is constructed by the compiler and is not referenced\n-         --  elsewhere in the tree. The following catches this case\n+         --  Now an interesting special case. Normally parents are always\n+         --  printed since we traverse the tree in a downwards direction.\n+         --  However, there is an exception to this rule, which is the\n+         --  case where a parent is constructed by the compiler and is not\n+         --  referenced elsewhere in the tree. The following catches this case.\n \n          if not Comes_From_Source (N) then\n             Visit_Descendent (Union_Id (Parent (N)));"}]}