{"sha": "e24313f349328c3fc973375cab9c3818388308ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0MzEzZjM0OTMyOGMzZmM5NzMzNzVjYWI5YzM4MTgzODgzMDhiYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-07-21T09:08:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-21T09:08:41Z"}, "message": "re PR c++/36870 (__has_nothrow_constructor violates the ODR)\n\n/cp\n2008-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/36870\n\t* semantics.c (classtype_has_nothrow_assign_or_copy_p): Use\n\tTYPE_NOTHROW_P, not TREE_NOTHROW.\n\t(trait_expr_value): Likewise.\n\n/testsuite\n2008-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/36870\n\t* g++.dg/ext/has_nothrow_assign_odr.C: New.\n\t* g++.dg/ext/has_nothrow_copy_odr.C: Likewise.\n\t* g++.dg/ext/has_nothrow_constructor_odr.C: Likewise.\n\t* g++.dg/ext/has_nothrow_assign.C: Adjust.\n\t* g++.dg/ext/has_nothrow_copy.C: Likewise.\n\t* g++.dg/ext/has_nothrow_constructor.C: Likewise.\n\nFrom-SVN: r138024", "tree": {"sha": "86d6438f19499a000e4686812d3cfedd05692dd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d6438f19499a000e4686812d3cfedd05692dd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e24313f349328c3fc973375cab9c3818388308ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24313f349328c3fc973375cab9c3818388308ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24313f349328c3fc973375cab9c3818388308ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24313f349328c3fc973375cab9c3818388308ba/comments", "author": null, "committer": null, "parents": [{"sha": "c499b30003602aeb92a5619a5f2f2602ee09cbb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c499b30003602aeb92a5619a5f2f2602ee09cbb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c499b30003602aeb92a5619a5f2f2602ee09cbb8"}], "stats": {"total": 98, "additions": 75, "deletions": 23}, "files": [{"sha": "913f3284ba901e0a8ffa2a61cf4afd9960db158b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e24313f349328c3fc973375cab9c3818388308ba", "patch": "@@ -1,3 +1,10 @@\n+2008-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/36870\n+\t* semantics.c (classtype_has_nothrow_assign_or_copy_p): Use\n+\tTYPE_NOTHROW_P, not TREE_NOTHROW.\n+\t(trait_expr_value): Likewise.\n+\n 2008-07-18  Dodji Seketeli  <dseketel@redhat.com>\n \n \tPR c++/36407"}, {"sha": "3b91ddb0f9015cd7ec9f0794470603b1acc73362", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e24313f349328c3fc973375cab9c3818388308ba", "patch": "@@ -4677,7 +4677,7 @@ classtype_has_nothrow_assign_or_copy_p (tree type, bool assign_p)\n     return false;\n \n   for (; fns; fns = OVL_NEXT (fns))\n-    if (!TREE_NOTHROW (OVL_CURRENT (fns)))\n+    if (!TYPE_NOTHROW_P (TREE_TYPE (OVL_CURRENT (fns))))\n       return false;\n \n   return true;\n@@ -4712,7 +4712,8 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n       type1 = strip_array_types (type1);\n       return (trait_expr_value (CPTK_HAS_TRIVIAL_CONSTRUCTOR, type1, type2) \n \t      || (CLASS_TYPE_P (type1)\n-\t\t  && (t = locate_ctor (type1, NULL)) && TREE_NOTHROW (t)));\n+\t\t  && (t = locate_ctor (type1, NULL))\n+\t\t  && TYPE_NOTHROW_P (TREE_TYPE (t))));\n \n     case CPTK_HAS_TRIVIAL_CONSTRUCTOR:\n       type1 = strip_array_types (type1);"}, {"sha": "13f146817809e0ae65eb7b010a5bf7d72ace0025", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e24313f349328c3fc973375cab9c3818388308ba", "patch": "@@ -1,3 +1,13 @@\n+2008-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/36870\n+\t* g++.dg/ext/has_nothrow_assign_odr.C: New.\n+\t* g++.dg/ext/has_nothrow_copy_odr.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_constructor_odr.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_assign.C: Adjust.\n+\t* g++.dg/ext/has_nothrow_copy.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_constructor.C: Likewise.\n+\n 2008-07-17  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \tPR target/36822"}, {"sha": "73a904eac25761c9e8ff856d7b3cd3f7d70e8146", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_assign.C", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign.C?ref=e24313f349328c3fc973375cab9c3818388308ba", "patch": "@@ -136,19 +136,13 @@ int main()\n   assert (PTEST (C));\n   assert (NTEST (C[]));\n   assert (PTEST (D));\n-#ifndef __PIC__\n-  assert (PTEST (E));\n-#endif\n+  assert (NTEST (E));\n   assert (NTEST (E1));\n   assert (PTEST (F));\n   assert (PTEST (G));\n-#ifndef __PIC__\n-  assert (PTEST (H));\n-#endif\n+  assert (NTEST (H));\n   assert (NTEST (H1));\n-#ifndef __PIC__\n-  assert (PTEST (I));\n-#endif\n+  assert (NTEST (I));\n   assert (NTEST (I1));\n   assert (PTEST (J));\n   assert (NTEST (const K));"}, {"sha": "c38d76d44a6f4acc2bf5c550427ff0b92ab309d3", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_assign_odr.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign_odr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign_odr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign_odr.C?ref=e24313f349328c3fc973375cab9c3818388308ba", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/36870\n+// { dg-do \"run\" }\n+#include <cassert>\n+\n+struct S { const S& operator= (const S&); };\n+\n+bool f ();\n+\n+int main ()\n+{\n+  assert (__has_nothrow_assign (S) == f ());\n+}\n+\n+const S& S::operator= (const S&) { }\n+\n+bool f () { return __has_nothrow_assign (S); }"}, {"sha": "60e9be8d0be4e10cf1dafd78b972c95a5d82462a", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_constructor.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor.C?ref=e24313f349328c3fc973375cab9c3818388308ba", "patch": "@@ -97,9 +97,7 @@ int main()\n   assert (PTEST (C));\n   assert (PTEST (C[]));\n   assert (PTEST (D));\n-#ifndef __PIC__\n-  assert (PTEST (E));\n-#endif\n+  assert (NTEST (E));\n   assert (NTEST (E1));\n   assert (NTEST (F));\n   assert (NTEST (G));"}, {"sha": "775e74a2631a200c0fa01ea3c3e780dd507c766c", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_constructor_odr.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor_odr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor_odr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor_odr.C?ref=e24313f349328c3fc973375cab9c3818388308ba", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/36870\n+// { dg-do \"run\" }\n+#include <cassert>\n+\n+struct S { S (); };\n+\n+bool f ();\n+\n+int main ()\n+{\n+  assert (__has_nothrow_constructor (S) == f ());\n+}\n+\n+S::S () { }\n+\n+bool f () { return __has_nothrow_constructor (S); }"}, {"sha": "e8507cf582c4b152de647938736e9d6599d5c2bf", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_copy.C", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy.C?ref=e24313f349328c3fc973375cab9c3818388308ba", "patch": "@@ -126,19 +126,13 @@ int main()\n   assert (PTEST (C));\n   assert (NTEST (C[]));\n   assert (PTEST (D));\n-#ifndef __PIC__\n-  assert (PTEST (E));\n-#endif\n+  assert (NTEST (E));\n   assert (NTEST (E1));\n   assert (PTEST (F));\n   assert (PTEST (G));\n-#ifndef __PIC__\n-  assert (PTEST (H));\n-#endif\n+  assert (NTEST (H));\n   assert (NTEST (H1));\n-#ifndef __PIC__\n-  assert (PTEST (I));\n-#endif\n+  assert (NTEST (I));\n   assert (NTEST (I1));  \n   assert (PTEST (J));\n "}, {"sha": "499a11e25befb15e92cfbc910c089e6299a51839", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_copy_odr.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy_odr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24313f349328c3fc973375cab9c3818388308ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy_odr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_copy_odr.C?ref=e24313f349328c3fc973375cab9c3818388308ba", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/36870\n+// { dg-do \"run\" }\n+#include <cassert>\n+\n+struct S { S (const S&); };\n+\n+bool f ();\n+\n+int main ()\n+{\n+  assert (__has_nothrow_copy (S) == f ());\n+}\n+\n+S::S (const S&) { }\n+\n+bool f () { return __has_nothrow_copy (S); }"}]}