{"sha": "139df05a29eb71075e42f502978dea4d00a99708", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5ZGYwNWEyOWViNzEwNzVlNDJmNTAyOTc4ZGVhNGQwMGE5OTcwOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:52:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:52:28Z"}, "message": "[AArch64] Pass a pattern to aarch64_output_sve_cnt_immediate\n\nThis patch makes us always pass an explicit vector pattern to\naarch64_output_sve_cnt_immediate, rather than assuming it's ALL.\nThe ACLE patches need to be able to pass in other values.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_output_sve_cnt_immediate): Take\n\tthe vector pattern as an aarch64_svpattern argument.  Update the\n\toverloaded caller accordingly.\n\t(aarch64_output_sve_scalar_inc_dec): Update call accordingly.\n\t(aarch64_output_sve_vector_inc_dec): Likewise.\n\nFrom-SVN: r274520", "tree": {"sha": "12ce3c297cdf3f4b4cb65df669ed1e4c70689c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12ce3c297cdf3f4b4cb65df669ed1e4c70689c5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/139df05a29eb71075e42f502978dea4d00a99708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139df05a29eb71075e42f502978dea4d00a99708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/139df05a29eb71075e42f502978dea4d00a99708", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139df05a29eb71075e42f502978dea4d00a99708/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "873c265518ad3b2230d281015167a6001ec1a8eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139df05a29eb71075e42f502978dea4d00a99708/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139df05a29eb71075e42f502978dea4d00a99708/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=139df05a29eb71075e42f502978dea4d00a99708", "patch": "@@ -1,3 +1,11 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_output_sve_cnt_immediate): Take\n+\tthe vector pattern as an aarch64_svpattern argument.  Update the\n+\toverloaded caller accordingly.\n+\t(aarch64_output_sve_scalar_inc_dec): Update call accordingly.\n+\t(aarch64_output_sve_vector_inc_dec): Likewise.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_add_offset): In the fallback"}, {"sha": "ca220b5f140a26fb39396681154a9e3108e8fd29", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139df05a29eb71075e42f502978dea4d00a99708/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139df05a29eb71075e42f502978dea4d00a99708/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=139df05a29eb71075e42f502978dea4d00a99708", "patch": "@@ -2902,16 +2902,17 @@ aarch64_sve_cnt_immediate_p (rtx x)\n    operand (a vector pattern followed by a multiplier in the range [1, 16]).\n    PREFIX is the mnemonic without the size suffix and OPERANDS is the\n    first part of the operands template (the part that comes before the\n-   vector size itself).  FACTOR is the number of quadwords.\n-   NELTS_PER_VQ, if nonzero, is the number of elements in each quadword.\n-   If it is zero, we can use any element size.  */\n+   vector size itself).  PATTERN is the pattern to use.  FACTOR is the\n+   number of quadwords.  NELTS_PER_VQ, if nonzero, is the number of elements\n+   in each quadword.  If it is zero, we can use any element size.  */\n \n static char *\n aarch64_output_sve_cnt_immediate (const char *prefix, const char *operands,\n+\t\t\t\t  aarch64_svpattern pattern,\n \t\t\t\t  unsigned int factor,\n \t\t\t\t  unsigned int nelts_per_vq)\n {\n-  static char buffer[sizeof (\"sqincd\\t%x0, %w0, all, mul #16\")];\n+  static char buffer[sizeof (\"sqincd\\t%x0, %w0, vl256, mul #16\")];\n \n   if (nelts_per_vq == 0)\n     /* There is some overlap in the ranges of the four CNT instructions.\n@@ -2924,12 +2925,16 @@ aarch64_output_sve_cnt_immediate (const char *prefix, const char *operands,\n \n   factor >>= shift;\n   unsigned int written;\n-  if (factor == 1)\n+  if (pattern == AARCH64_SV_ALL && factor == 1)\n     written = snprintf (buffer, sizeof (buffer), \"%s%c\\t%s\",\n \t\t\tprefix, suffix, operands);\n+  else if (factor == 1)\n+    written = snprintf (buffer, sizeof (buffer), \"%s%c\\t%s, %s\",\n+\t\t\tprefix, suffix, operands, svpattern_token (pattern));\n   else\n-    written = snprintf (buffer, sizeof (buffer), \"%s%c\\t%s, all, mul #%d\",\n-\t\t\tprefix, suffix, operands, factor);\n+    written = snprintf (buffer, sizeof (buffer), \"%s%c\\t%s, %s, mul #%d\",\n+\t\t\tprefix, suffix, operands, svpattern_token (pattern),\n+\t\t\tfactor);\n   gcc_assert (written < sizeof (buffer));\n   return buffer;\n }\n@@ -2939,15 +2944,16 @@ aarch64_output_sve_cnt_immediate (const char *prefix, const char *operands,\n    PREFIX is the mnemonic without the size suffix and OPERANDS is the\n    first part of the operands template (the part that comes before the\n    vector size itself).  X is the value of the vector size operand,\n-   as a polynomial integer rtx.  */\n+   as a polynomial integer rtx; we need to convert this into an \"all\"\n+   pattern with a multiplier.  */\n \n char *\n aarch64_output_sve_cnt_immediate (const char *prefix, const char *operands,\n \t\t\t\t  rtx x)\n {\n   poly_int64 value = rtx_to_poly_int64 (x);\n   gcc_assert (aarch64_sve_cnt_immediate_p (value));\n-  return aarch64_output_sve_cnt_immediate (prefix, operands,\n+  return aarch64_output_sve_cnt_immediate (prefix, operands, AARCH64_SV_ALL,\n \t\t\t\t\t   value.coeffs[1], 0);\n }\n \n@@ -2971,10 +2977,10 @@ aarch64_output_sve_scalar_inc_dec (rtx offset)\n   poly_int64 offset_value = rtx_to_poly_int64 (offset);\n   gcc_assert (offset_value.coeffs[0] == offset_value.coeffs[1]);\n   if (offset_value.coeffs[1] > 0)\n-    return aarch64_output_sve_cnt_immediate (\"inc\", \"%x0\",\n+    return aarch64_output_sve_cnt_immediate (\"inc\", \"%x0\", AARCH64_SV_ALL,\n \t\t\t\t\t     offset_value.coeffs[1], 0);\n   else\n-    return aarch64_output_sve_cnt_immediate (\"dec\", \"%x0\",\n+    return aarch64_output_sve_cnt_immediate (\"dec\", \"%x0\", AARCH64_SV_ALL,\n \t\t\t\t\t     -offset_value.coeffs[1], 0);\n }\n \n@@ -3079,11 +3085,11 @@ aarch64_output_sve_vector_inc_dec (const char *operands, rtx x)\n   if (!aarch64_sve_vector_inc_dec_immediate_p (x, &factor, &nelts_per_vq))\n     gcc_unreachable ();\n   if (factor < 0)\n-    return aarch64_output_sve_cnt_immediate (\"dec\", operands, -factor,\n-\t\t\t\t\t     nelts_per_vq);\n+    return aarch64_output_sve_cnt_immediate (\"dec\", operands, AARCH64_SV_ALL,\n+\t\t\t\t\t     -factor, nelts_per_vq);\n   else\n-    return aarch64_output_sve_cnt_immediate (\"inc\", operands, factor,\n-\t\t\t\t\t     nelts_per_vq);\n+    return aarch64_output_sve_cnt_immediate (\"inc\", operands, AARCH64_SV_ALL,\n+\t\t\t\t\t     factor, nelts_per_vq);\n }\n \n static int"}]}