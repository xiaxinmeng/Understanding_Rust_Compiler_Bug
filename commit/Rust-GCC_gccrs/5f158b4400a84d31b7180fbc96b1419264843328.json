{"sha": "5f158b4400a84d31b7180fbc96b1419264843328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxNThiNDQwMGE4NGQzMWI3MTgwZmJjOTZiMTQxOTI2NDg0MzMyOA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-08T18:17:53Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-08T18:17:53Z"}, "message": "builtins.c (define_builtin_type, [...]): Delete.\n\n\n\t* builtins.c (define_builtin_type, builtin_types): Delete.\n\t(define_builtin): Rewritten to take just the built-in code,\n\tthe function's name, type and fallback library function name.\n\tAll built-ins used by Java are implicit and BUILT_IN_NORMAL.\n\t(initialize_builtins): Overhaul to define the GCC builtins\n\tused by gcj manually, providing the Java run-time's\n\timplementations as the fallback library function.\n\n\t* libjava.lang/MathBuiltin.java: New test case.\n\t* libjava.lang/MathBuiltin.out: New file.\n\nFrom-SVN: r67632", "tree": {"sha": "dee5dc24a26ca2e2b97de7e17aacd6263f8d6a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dee5dc24a26ca2e2b97de7e17aacd6263f8d6a1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f158b4400a84d31b7180fbc96b1419264843328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f158b4400a84d31b7180fbc96b1419264843328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f158b4400a84d31b7180fbc96b1419264843328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f158b4400a84d31b7180fbc96b1419264843328/comments", "author": null, "committer": null, "parents": [{"sha": "f32c53c2153535de4c9016cd174330be4c9a6027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32c53c2153535de4c9016cd174330be4c9a6027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f32c53c2153535de4c9016cd174330be4c9a6027"}], "stats": {"total": 228, "additions": 127, "deletions": 101}, "files": [{"sha": "f4b5a7f44d6f12d496ff79723aa9aa9edc278199", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f158b4400a84d31b7180fbc96b1419264843328/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f158b4400a84d31b7180fbc96b1419264843328/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5f158b4400a84d31b7180fbc96b1419264843328", "patch": "@@ -1,3 +1,13 @@\n+2003-06-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (define_builtin_type, builtin_types): Delete.\n+\t(define_builtin): Rewritten to take just the built-in code,\n+\tthe function's name, type and fallback library function name.\n+\tAll built-ins used by Java are implicit and BUILT_IN_NORMAL.\n+\t(initialize_builtins): Overhaul to define the GCC builtins\n+\tused by gcj manually, providing the Java run-time's\n+\timplementations as the fallback library function.\n+\n 2003-06-08  Anthony Green  <green@redhat.com>\n \n \t* parse.y (patch_cast): Fix conversions from floating-point to"}, {"sha": "45e0b9e58c85a8d117a22d7832b506aaa8ee2fbc", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 42, "deletions": 101, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f158b4400a84d31b7180fbc96b1419264843328/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f158b4400a84d31b7180fbc96b1419264843328/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=5f158b4400a84d31b7180fbc96b1419264843328", "patch": "@@ -69,8 +69,7 @@ static tree abs_builtin (tree, tree);\n \n static tree java_build_function_call_expr (tree, tree);\n static void define_builtin (enum built_in_function, const char *,\n-\t\t\t    enum built_in_class, tree, int, int);\n-static tree define_builtin_type (int, int, int, int, int);\n+\t\t\t    tree, const char *);\n \n \f\n \n@@ -114,10 +113,6 @@ static GTY(()) struct builtin_record java_builtins[] =\n   { { NULL }, { NULL }, NULL, END_BUILTINS }\n };\n \n-/* This is only used transiently, so we don't mark it as roots for the\n-   GC.  */\n-static tree builtin_types[(int) BT_LAST];\n-\n \f\n /* Internal functions which implement various builtin conversions.  */\n \n@@ -163,70 +158,22 @@ java_build_function_call_expr (tree fn, tree arglist)\n static void\n define_builtin (enum built_in_function val,\n \t\tconst char *name,\n-\t\tenum built_in_class class,\n \t\ttree type,\n-\t\tint fallback_p,\n-\t\tint implicit)\n+\t\tconst char *libname)\n {\n   tree decl;\n \n-  if (! name || ! type)\n-    return;\n-\n-  if (strncmp (name, \"__builtin_\", strlen (\"__builtin_\")) != 0)\n-    abort ();\n   decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;\n   TREE_PUBLIC (decl) = 1;\n-  if (fallback_p)\n-    SET_DECL_ASSEMBLER_NAME (decl,\n-\t\t\t     get_identifier (name + strlen (\"__builtin_\")));\n+  SET_DECL_ASSEMBLER_NAME (decl, get_identifier (libname));\n   make_decl_rtl (decl, NULL);\n   pushdecl (decl);\n-  DECL_BUILT_IN_CLASS (decl) = class;\n+  DECL_BUILT_IN_CLASS (decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (decl) = val;\n-  built_in_decls[val] = decl;\n-  if (implicit)\n-    implicit_built_in_decls[val] = decl;\n-}\n \n-/* Compute the type for a builtin.  */\n-static tree\n-define_builtin_type (int ret, int arg1, int arg2, int arg3, int arg4)\n-{\n-  tree args;\n-\n-  if (builtin_types[ret] == NULL_TREE)\n-    return NULL_TREE;\n-\n-  args = void_list_node;\n-\n-  if (arg4 != -1)\n-    {\n-      if (builtin_types[arg4] == NULL_TREE)\n-\treturn NULL_TREE;\n-      args = tree_cons (NULL_TREE, builtin_types[arg4], args);\n-    }\n-  if (arg3 != -1)\n-    {\n-      if (builtin_types[arg3] == NULL_TREE)\n-\treturn NULL_TREE;\n-      args = tree_cons (NULL_TREE, builtin_types[arg3], args);\n-    }\n-  if (arg2 != -1)\n-    {\n-      if (builtin_types[arg2] == NULL_TREE)\n-\treturn NULL_TREE;\n-      args = tree_cons (NULL_TREE, builtin_types[arg2], args);\n-    }\n-  if (arg1 != -1)\n-    {\n-      if (builtin_types[arg1] == NULL_TREE)\n-\treturn NULL_TREE;\n-      args = tree_cons (NULL_TREE, builtin_types[arg1], args);\n-    }\n-  \n-  return build_function_type (builtin_types[ret], args);\n+  implicit_built_in_decls[val] = decl;\n+  built_in_decls[val] = decl;\n }\n \n \f\n@@ -235,6 +182,9 @@ define_builtin_type (int ret, int arg1, int arg2, int arg3, int arg4)\n void\n initialize_builtins (void)\n {\n+  tree double_ftype_double, double_ftype_double_double;\n+  tree float_ftype_float, float_ftype_float_float;\n+  tree t;\n   int i;\n \n   for (i = 0; java_builtins[i].builtin_code != END_BUILTINS; ++i)\n@@ -248,48 +198,39 @@ initialize_builtins (void)\n \n   void_list_node = end_params_node;\n \n-  /* Work around C-specific junk in builtin-types.def.  */\n-#define intmax_type_node NULL_TREE\n-#define c_size_type_node NULL_TREE\n-#define const_string_type_node NULL_TREE\n-#define va_list_ref_type_node NULL_TREE\n-#define va_list_arg_type_node NULL_TREE\n-#define flag_isoc99 0\n-\n-#define DEF_PRIMITIVE_TYPE(ENUM, VALUE)\t\t\t\t\t      \\\n-  builtin_types[(int) ENUM] = VALUE;\n-#define DEF_FUNCTION_TYPE_0(ENUM, RETURN)\t\t\\\n-  builtin_types[(int) ENUM]\t\t\t\t\\\n-    = define_builtin_type (RETURN, -1, -1, -1, -1);\n-#define DEF_FUNCTION_TYPE_1(ENUM, RETURN, ARG1)\t\t\t\t\\\n-  builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n-    = define_builtin_type (RETURN, ARG1, -1, -1, -1);\n-#define DEF_FUNCTION_TYPE_2(ENUM, RETURN, ARG1, ARG2)\t\\\n-  builtin_types[(int) ENUM]\t\t\t\t\\\n-    = define_builtin_type (RETURN, ARG1, ARG2, -1, -1);\n-#define DEF_FUNCTION_TYPE_3(ENUM, RETURN, ARG1, ARG2, ARG3)\t\t \\\n-  builtin_types[(int) ENUM]\t\t\t\t\t\t \\\n-    = define_builtin_type (RETURN, ARG1, ARG2, ARG3, -1);\n-#define DEF_FUNCTION_TYPE_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4)\t\\\n-  builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n-    = define_builtin_type (RETURN, ARG1, ARG2, ARG3, ARG4);\n-#define DEF_FUNCTION_TYPE_VAR_0(ENUM, RETURN)\t\t\t\\\n-  builtin_types[(int) ENUM] = NULL_TREE;\n-#define DEF_FUNCTION_TYPE_VAR_1(ENUM, RETURN, ARG1)\t\t\\\n-   builtin_types[(int) ENUM] = NULL_TREE;\n-#define DEF_FUNCTION_TYPE_VAR_2(ENUM, RETURN, ARG1, ARG2)\t\\\n-   builtin_types[(int) ENUM] = NULL_TREE;\n-#define DEF_FUNCTION_TYPE_VAR_3(ENUM, RETURN, ARG1, ARG2, ARG3)\t\\\n-   builtin_types[(int) ENUM] = NULL_TREE;\n-#define DEF_POINTER_TYPE(ENUM, TYPE)\t\t\t\\\n-  builtin_types[(int) ENUM] = NULL_TREE;\n-\n-#include \"builtin-types.def\"\n-\n-#define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P, \\\n-                    FALLBACK_P, NONANSI_P, ATTRS, IMPLICIT) \\\n-  define_builtin (ENUM, NAME, CLASS, builtin_types[TYPE], FALLBACK_P, IMPLICIT);\n-#include \"builtins.def\"\n+  t = tree_cons (NULL_TREE, float_type_node, end_params_node);\n+  float_ftype_float = build_function_type (float_type_node, t);\n+  t = tree_cons (NULL_TREE, float_type_node, t);\n+  float_ftype_float_float = build_function_type (float_type_node, t);\n+\n+  t = tree_cons (NULL_TREE, double_type_node, end_params_node);\n+  double_ftype_double = build_function_type (double_type_node, t);\n+  t = tree_cons (NULL_TREE, double_type_node, t);\n+  double_ftype_double_double = build_function_type (double_type_node, t);\n+\n+  define_builtin (BUILT_IN_FMOD, \"__builtin_fmod\",\n+\t\t  double_ftype_double_double, \"fmod\");\n+  define_builtin (BUILT_IN_FMODF, \"__builtin_fmodf\",\n+\t\t  float_ftype_float_float, \"fmodf\");\n+\n+  define_builtin (BUILT_IN_ATAN, \"__builtin_atan\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math4atanEd\");\n+  define_builtin (BUILT_IN_ATAN2, \"__builtin_atan2\",\n+\t\t  double_ftype_double_double, \"_ZN4java4lang4Math5atan2Edd\");\n+  define_builtin (BUILT_IN_COS, \"__builtin_cos\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math3cosEd\");\n+  define_builtin (BUILT_IN_EXP, \"__builtin_exp\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math3expEd\");\n+  define_builtin (BUILT_IN_LOG, \"__builtin_log\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math3logEd\");\n+  define_builtin (BUILT_IN_POW, \"__builtin_pow\",\n+\t\t  double_ftype_double_double, \"_ZN4java4lang4Math3powEdd\");\n+  define_builtin (BUILT_IN_SIN, \"__builtin_sin\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math3sinEd\");\n+  define_builtin (BUILT_IN_SQRT, \"__builtin_sqrt\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math4sqrtEd\");\n+  define_builtin (BUILT_IN_TAN, \"__builtin_tan\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math3tanEd\");\n }\n \n /* If the call matches a builtin, return the"}, {"sha": "ac9493bd357ddbdb7b1a76a850655a381b3dadbb", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f158b4400a84d31b7180fbc96b1419264843328/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f158b4400a84d31b7180fbc96b1419264843328/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=5f158b4400a84d31b7180fbc96b1419264843328", "patch": "@@ -1,3 +1,8 @@\n+2003-06-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* libjava.lang/MathBuiltin.java: New test case.\n+\t* libjava.lang/MathBuiltin.out: New file.\n+\n 2003-06-05  Mark Wielaard  <mark@klomp.org>\n \n \t* libjava.mauve/mauve.exp (test_mauve): Add -wno-deprecated to GCJ."}, {"sha": "9a4c367a38edd5742c0c5702657d0fb6292353d4", "filename": "libjava/testsuite/libjava.lang/MathBuiltin.java", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f158b4400a84d31b7180fbc96b1419264843328/libjava%2Ftestsuite%2Flibjava.lang%2FMathBuiltin.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f158b4400a84d31b7180fbc96b1419264843328/libjava%2Ftestsuite%2Flibjava.lang%2FMathBuiltin.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FMathBuiltin.java?ref=5f158b4400a84d31b7180fbc96b1419264843328", "patch": "@@ -0,0 +1,70 @@\n+class MathBuiltin\n+{\n+  static double abs(double x)\n+  {\n+    return Math.abs(x);\n+  }\n+\n+  static double atan(double x)\n+  {\n+    return Math.atan(x);\n+  }\n+\n+  static double atan2(double x, double y)\n+  {\n+    return Math.atan2(x,y);\n+  }\n+\n+  static double cos(double x)\n+  {\n+    return Math.cos(x);\n+  }\n+\n+  static double exp(double x)\n+  {\n+    return Math.exp(x);\n+  }\n+\n+  static double log(double x)\n+  {\n+    return Math.log(x);\n+  }\n+\n+  static double max(double x, double y)\n+  {\n+    return Math.max(x,y);\n+  }\n+\n+  static double min(double x, double y)\n+  {\n+    return Math.min(x,y);\n+  }\n+\n+  static double pow(double x, double y)\n+  {\n+    return Math.pow(x,y);\n+  }\n+\n+  static double sin(double x)\n+  {\n+    return Math.sin(x);\n+  }\n+\n+  static double sqrt(double x)\n+  {\n+    return Math.sqrt(x);\n+  }\n+\n+  static double tan(double x)\n+  {\n+    return Math.tan(x);\n+  }\n+\n+  public static void main(String argv[])\n+  {\n+    double sum = abs (1.0) + atan (1.0) + atan2 (1.0, 1.0) + cos (1.0)\n+                 + exp (1.0) + log(1.0) + max(1.0, 1.0) + min (1.0, 1.0)\n+\t\t + pow (1.0, 1.0) + sin (1.0) + sqrt(1.0) + tan(1.0);\n+  }\n+}\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libjava/testsuite/libjava.lang/MathBuiltin.out", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f158b4400a84d31b7180fbc96b1419264843328/libjava%2Ftestsuite%2Flibjava.lang%2FMathBuiltin.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f158b4400a84d31b7180fbc96b1419264843328/libjava%2Ftestsuite%2Flibjava.lang%2FMathBuiltin.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FMathBuiltin.out?ref=5f158b4400a84d31b7180fbc96b1419264843328"}]}