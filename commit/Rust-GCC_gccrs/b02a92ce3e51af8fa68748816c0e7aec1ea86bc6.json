{"sha": "b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyYTkyY2UzZTUxYWY4ZmE2ODc0ODgxNmMwZTdhZWMxZWE4NmJjNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-10-13T12:39:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-10-13T12:39:06Z"}, "message": "re PR lto/41668 (ICE in  get_alias_set, at alias.c:698)\n\n2009-10-13  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/41668\n\t* gcc.dg/lto/20091006-2_0.c: New testcase.\n\t* gcc.dg/lto/20091006-2_1.c: Likewise.\n\t* gcc.dg/lto/20091006-2_2.c: Likewise.\n\t* gcc.dg/lto/20091013-1_0.c: Likewise.\n\t* gcc.dg/lto/20091013-1_1.c: Likewise.\n\t* gcc.dg/lto/20091013-1_2.c: Likewise.\n\nFrom-SVN: r152704", "tree": {"sha": "2c784b0c21a2d790c3079d72012d6dafe011fc55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c784b0c21a2d790c3079d72012d6dafe011fc55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11c29d4bacb95087e3e837cf2c8488d7e432810b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c29d4bacb95087e3e837cf2c8488d7e432810b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c29d4bacb95087e3e837cf2c8488d7e432810b"}], "stats": {"total": 368, "additions": 368, "deletions": 0}, "files": [{"sha": "95cddc4665145fc057f138ee275367452df721e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "patch": "@@ -1,3 +1,13 @@\n+2009-10-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/41668\n+\t* gcc.dg/lto/20091006-2_0.c: New testcase.\n+\t* gcc.dg/lto/20091006-2_1.c: Likewise.\n+\t* gcc.dg/lto/20091006-2_2.c: Likewise.\n+\t* gcc.dg/lto/20091013-1_0.c: Likewise.\n+\t* gcc.dg/lto/20091013-1_1.c: Likewise.\n+\t* gcc.dg/lto/20091013-1_2.c: Likewise.\n+\n 2009-10-13  Martin Jambor  <mjambor@suse.cz>\n \n \t* gcc.c-torture/compile/pr41661.c: New test."}, {"sha": "f8189920cfdab41fb25d71938dca66387be296e6", "filename": "gcc/testsuite/gcc.dg/lto/20091006-2_0.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091006-2_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091006-2_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091006-2_0.c?ref=b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-lto-do link } */\n+\n+extern int a[10];\n+int main() { return 0; }"}, {"sha": "581839344c1b7bdde0f37bdab6024ced5d853e5b", "filename": "gcc/testsuite/gcc.dg/lto/20091006-2_1.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091006-2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091006-2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091006-2_1.c?ref=b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "patch": "@@ -0,0 +1 @@\n+int a[16];"}, {"sha": "a610b2b1292096762122912e637e4538c3ef0718", "filename": "gcc/testsuite/gcc.dg/lto/20091006-2_2.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091006-2_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091006-2_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091006-2_2.c?ref=b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "patch": "@@ -0,0 +1 @@\n+extern int a[14];"}, {"sha": "e1a7dc86b6b00aed5cd4bde41c5d190338416984", "filename": "gcc/testsuite/gcc.dg/lto/20091013-1_0.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_0.c?ref=b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-lto-do link } */\n+/* { dg-lto-options {{-fPIC -shared -flto} {-fPIC -shared -O2 -flto}} } */\n+\n+void * HeapAlloc(void*,unsigned int,unsigned long);\n+\n+typedef struct tagGdiFont GdiFont;\n+\n+typedef struct tagDC {\n+    int xunused;\n+    GdiFont *gdiFont;\n+    unsigned int font_code_page;\n+} DC;\n+\n+DC *alloc_dc_ptr( void *funcs, unsigned short magic )\n+{\n+  DC *dc;\n+  if (!(dc = HeapAlloc( 0, 0, sizeof(*dc) ))) return ((void *)0);\n+  dc->gdiFont = 0;\n+  return dc;\n+}\n+"}, {"sha": "68294fa62cbd4d9b071e5eae57016cdcf4748def", "filename": "gcc/testsuite/gcc.dg/lto/20091013-1_1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_1.c?ref=b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "patch": "@@ -0,0 +1,111 @@\n+typedef struct HDC__ { int unused; } *HDC;\n+typedef struct HFONT__ { int unused; } *HFONT;\n+\n+typedef struct\n+{\n+  unsigned int ciACP;\n+} CHARSETINFO, *PCHARSETINFO, *LPCHARSETINFO;\n+\n+typedef struct tagTEXTMETRICW\n+{\n+    int tmCharSet;\n+} TEXTMETRICW, *LPTEXTMETRICW, *PTEXTMETRICW;\n+\n+struct gdi_obj_funcs\n+{\n+    void* (*pSelectObject)( void* handle, void* hdc );\n+};\n+\n+typedef struct tagGdiFont GdiFont;\n+\n+typedef struct tagDC\n+{\n+    int xunused;\n+    GdiFont *gdiFont;\n+    unsigned int font_code_page;\n+} DC;\n+\n+extern GdiFont* WineEngCreateFontInstance(DC*, HFONT);\n+extern unsigned int WineEngGetTextCharsetInfo(GdiFont *font, void* fs, unsigned int flags);\n+extern int WineEngGetTextMetrics(GdiFont*, LPTEXTMETRICW);\n+extern void* alloc_gdi_handle( void *obj, unsigned short type, const struct gdi_obj_funcs *funcs );\n+\n+enum __wine_debug_class\n+{\n+    __WINE_DBCL_FIXME,\n+    __WINE_DBCL_ERR,\n+    __WINE_DBCL_WARN,\n+    __WINE_DBCL_TRACE,\n+\n+    __WINE_DBCL_INIT = 7\n+};\n+\n+struct __wine_debug_channel\n+{\n+    unsigned char flags;\n+    char name[15];\n+};\n+\n+extern int wine_dbg_log( enum __wine_debug_class cls, struct __wine_debug_channel *ch, const char *func,\n+                         const char *format, ... ) __attribute__((format (printf,4,5)));\n+\n+static struct __wine_debug_channel __wine_dbch_font = { ~0, \"font\" };\n+static struct __wine_debug_channel * const __wine_dbch___default = &__wine_dbch_font;\n+\n+static void* FONT_SelectObject( void* handle, void* hdc );\n+\n+static const struct gdi_obj_funcs font_funcs =\n+{\n+    FONT_SelectObject,\n+};\n+\n+HFONT CreateFontIndirectW( const void *plf )\n+{\n+    return alloc_gdi_handle( 0, 6, &font_funcs );\n+}\n+\n+static void update_font_code_page( DC *dc )\n+{\n+    CHARSETINFO csi;\n+    int charset = (unsigned char)1;\n+\n+    if (dc->gdiFont)\n+        charset = WineEngGetTextCharsetInfo( dc->gdiFont, ((void *)0), 0 );\n+\n+    if (TranslateCharsetInfo( ((void *)(unsigned long)((unsigned long)charset)), &csi, 1) )\n+        dc->font_code_page = csi.ciACP;\n+    else {\n+        switch(charset) {\n+        case (unsigned char)1:\n+            dc->font_code_page = GetACP();\n+            break;\n+\n+        case (unsigned char)246:\n+            dc->font_code_page = 0;\n+            break;\n+\n+        default:\n+            do { if((((__wine_dbch___default))->flags & (1 << __WINE_DBCL_FIXME))) { struct __wine_debug_channel * const __dbch = (__wine_dbch___default); const enum __wine_debug_class __dbcl = __WINE_DBCL_FIXME; wine_dbg_log( __dbcl, __dbch, __FUNCTION__, \"Can't find codepage for charset %d\\n\", charset); } } while(0);\n+            dc->font_code_page = 0;\n+            break;\n+        }\n+    }\n+\n+    do { if((((__wine_dbch___default))->flags & (1 << __WINE_DBCL_TRACE))) { struct __wine_debug_channel * const __dbch = (__wine_dbch___default); const enum __wine_debug_class __dbcl = __WINE_DBCL_TRACE; wine_dbg_log( __dbcl, __dbch, __FUNCTION__, \"charset %d => cp %d\\n\", charset, dc->font_code_page); } } while(0);\n+}\n+\n+static void* FONT_SelectObject( void* handle, void* hdc )\n+{\n+    DC *dc;\n+\n+    dc->gdiFont = WineEngCreateFontInstance( dc, handle );\n+    update_font_code_page( dc );\n+    return 0;\n+}\n+\n+int GetTextMetricsW( HDC hdc, TEXTMETRICW *metrics )\n+{\n+    DC * dc;\n+    return WineEngGetTextMetrics(dc->gdiFont, metrics);\n+}\n+"}, {"sha": "55f8ca1b46de235e27b19d75e3ad2503b2730c41", "filename": "gcc/testsuite/gcc.dg/lto/20091013-1_2.c", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_2.c?ref=b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "patch": "@@ -0,0 +1,220 @@\n+typedef struct HDC__ { int unused; } *HDC;\n+typedef struct HFONT__ { int unused; } *HFONT;\n+\n+void* HeapAlloc(void*,unsigned int,unsigned long);\n+\n+typedef struct tagLOGFONTW\n+{\n+    int lfPitchAndFamily;\n+    unsigned short lfFaceName[32];\n+} LOGFONTW, *PLOGFONTW, *LPLOGFONTW;\n+\n+typedef struct tagGdiFont GdiFont;\n+typedef struct tagDC DC;\n+\n+extern unsigned int WineEngGetFontData(GdiFont*, unsigned int, unsigned int, void*, unsigned int);\n+\n+struct list\n+{\n+    struct list *next;\n+    struct list *prev;\n+};\n+\n+typedef struct FT_FaceRec_\n+{\n+  signed long face_flags;\n+} FT_FaceRec, *FT_Face;\n+\n+typedef struct { } GM;\n+\n+typedef struct { } FMAT2;\n+\n+typedef struct {\n+    unsigned int hash;\n+    LOGFONTW lf;\n+    int can_use_bitmap;\n+} FONT_DESC;\n+\n+\n+\n+typedef struct tagHFONTLIST {\n+    struct list entry;\n+    HFONT hfont;\n+} HFONTLIST;\n+\n+typedef struct {\n+    struct list entry;\n+    void *face;\n+    GdiFont *font;\n+} CHILD_FONT;\n+\n+\n+struct tagGdiFont {\n+    struct list entry;\n+    GM **gm;\n+    struct list hfontlist;\n+    struct list child_fonts;\n+\n+    FT_Face ft_face;\n+    FONT_DESC font_desc;\n+    long ppem;\n+};\n+\n+\n+\n+static struct list gdi_font_list = { &(gdi_font_list), &(gdi_font_list) };\n+\n+\n+\n+\n+static int get_glyph_index_linked(GdiFont *font, unsigned int c, GdiFont **linked_font, unsigned int *glyph);\n+static long load_VDMX(GdiFont*, long);\n+\n+extern int f1(void*,int);\n+\n+static FT_Face OpenFontFace(GdiFont *font, void *face, long width, long height)\n+{\n+   FT_Face ft_face;\n+\n+   font->ppem = load_VDMX(font, height);\n+   if(font->ppem == 0)\n+       font->ppem = f1(ft_face, height);\n+   return ft_face;\n+}\n+\n+\n+static GdiFont *alloc_font(void)\n+{\n+    GdiFont *ret = HeapAlloc(0, 0x00000008, sizeof(*ret));\n+    ret->gm = HeapAlloc(0, 0x00000008, sizeof(GM*));\n+    return ret;\n+}\n+\n+\n+static long load_VDMX(GdiFont *font,long height)\n+{\n+    unsigned short hdr[3];\n+\n+    WineEngGetFontData(font, 0x42424242, 0, hdr, 6);\n+    return 0;\n+}\n+\n+static int fontcmp(const GdiFont *font, FONT_DESC *fd)\n+{\n+    if(font->font_desc.hash != fd->hash) return 1;\n+    if(memcmp(&font->font_desc.lf, &fd->lf, __builtin_offsetof (LOGFONTW, lfFaceName))) return 1;\n+    if(!font->font_desc.can_use_bitmap != !fd->can_use_bitmap) return 1;\n+    return strcmpiW(font->font_desc.lf.lfFaceName, fd->lf.lfFaceName);\n+}\n+\n+static GdiFont *find_in_cache(HFONT hfont, const LOGFONTW *plf, const FMAT2 *pmat, int can_use_bitmap)\n+{\n+    GdiFont *ret;\n+    FONT_DESC fd;\n+    HFONTLIST *hflist;\n+    struct list *font_elem_ptr, *hfontlist_elem_ptr;\n+\n+    fd.lf = *plf;\n+    fd.can_use_bitmap = can_use_bitmap;\n+\n+\n+    for ((font_elem_ptr) = (&gdi_font_list)->next; (font_elem_ptr) != (&gdi_font_list); (font_elem_ptr) = (font_elem_ptr)->next) {\n+        ret = ((struct tagGdiFont *)((char *)(font_elem_ptr) - (unsigned long)(&((struct tagGdiFont *)0)->entry)));\n+        if(!fontcmp(ret, &fd)) {\n+            if(!can_use_bitmap && !( ret->ft_face->face_flags & ( 1L << 0 ) )) continue;\n+            for ((hfontlist_elem_ptr) = (&ret->hfontlist)->next; (hfontlist_elem_ptr) != (&ret->hfontlist); (hfontlist_elem_ptr) = (hfontlist_elem_ptr)->next) {\n+                hflist = ((struct tagHFONTLIST *)((char *)(hfontlist_elem_ptr) - (unsigned long)(&((struct tagHFONTLIST *)0)->entry)));\n+                if(hflist->hfont == hfont)\n+                    return ret;\n+            }\n+            hflist = HeapAlloc(0, 0, sizeof(*hflist));\n+            hflist->hfont = hfont;\n+            return ret;\n+        }\n+    }\n+\n+    while(font_elem_ptr) {\n+        ret = ((struct tagGdiFont *)((char *)(font_elem_ptr) - (unsigned long)(&((struct tagGdiFont *)0)->entry)));\n+        if(!fontcmp(ret, &fd)) {\n+            if(!can_use_bitmap && !( ret->ft_face->face_flags & ( 1L << 0 ) )) continue;\n+            hflist = HeapAlloc(0, 0, sizeof(*hflist));\n+            hflist->hfont = hfont;\n+            return ret;\n+        }\n+    }\n+    return ((void *)0);\n+}\n+\n+\n+\n+\n+GdiFont *WineEngCreateFontInstance(DC *dc, HFONT hfont)\n+{\n+    GdiFont *ret;\n+    int can_use_bitmap;\n+    LOGFONTW lf;\n+    FMAT2 dcmat;\n+\n+    if((ret = find_in_cache(hfont, &lf, &dcmat, can_use_bitmap)) != ((void *)0))\n+        return ret;\n+    return alloc_font();\n+}\n+\n+extern unsigned int f(void*,unsigned int g);\n+\n+static unsigned int get_glyph_index(void*font, unsigned int glyph)\n+{\n+    return f(font, glyph);\n+}\n+\n+unsigned int WineEngGetGlyphOutline(GdiFont *incoming_font, unsigned int glyph, unsigned int format,\n+        void* lpgm, unsigned int buflen, void* buf,\n+        const void* lpmat)\n+{\n+    unsigned int glyph_index;\n+\n+    get_glyph_index_linked(incoming_font, glyph, &incoming_font, &glyph_index);\n+    return 0;\n+}\n+\n+static int load_child_font(GdiFont *font, CHILD_FONT *child)\n+{\n+    child->font = alloc_font();\n+    child->font->ft_face = OpenFontFace(child->font, child->face, 0, -font->ppem);\n+    if(!child->font->ft_face)\n+        return 0;\n+    return 1;\n+}\n+\n+static int get_glyph_index_linked(GdiFont *font, unsigned int c, GdiFont **linked_font, unsigned int *glyph)\n+{\n+    unsigned int g;\n+    CHILD_FONT *child_font;\n+\n+    for ((child_font) = ((CHILD_FONT *)((char *)((&font->child_fonts)->next) - (unsigned long)(&((CHILD_FONT *)0)->entry))); &(child_font)->entry != (&font->child_fonts); (child_font) = ((CHILD_FONT *)((char *)((child_font)->entry.next) - (unsigned long)(&((CHILD_FONT *)0)->entry))))\n+    {\n+        if(!load_child_font(font, child_font))\n+            continue;\n+\n+        g = get_glyph_index(child_font->font, c);\n+        if(g) {\n+            *glyph = g;\n+            *linked_font = child_font->font;\n+            return 1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+unsigned int WineEngGetFontData(GdiFont *font, unsigned int table, unsigned int offset, void* buf,\n+    unsigned int cbData)\n+{\n+    unsigned long len;\n+    load_sfnt_table(font->ft_face, table, offset, buf, &len);\n+    return len;\n+}\n+\n+int WineEngGetLinkedHFont(DC *dc, unsigned short c, HFONT *new_hfont, unsigned int *glyph) {\n+    return get_glyph_index_linked(0, 0, 0, 0);\n+}\n+"}]}