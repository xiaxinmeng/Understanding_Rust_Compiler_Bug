{"sha": "984e25aca82757afc2b90bc6082c7890805e5fc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0ZTI1YWNhODI3NTdhZmMyYjkwYmM2MDgyYzc4OTA4MDVlNWZjOA==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-04-05T17:08:00Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-04-05T17:08:00Z"}, "message": "[multiple changes]\n\n2003-04-05  Andrew Pinski  <apinski@apple.com>\n\n        * config/rs6000/rs6000.c (addrs_ok_for_quad_peep): Allow addr2\n        reg with reg1 == reg2 and offset1 = -8.\n\n2003-04-05  David Edelsohn  <edelsohn@gnu.org>\n\n        * config/rs6000/rs6000.c (rs6000_rtx_costs): Halve Power4\n        multiply costs.  Correct Power4 divide costs.\n        * config/rs6000/power4.md: Restore multiply and FP latency.\n\nFrom-SVN: r65274", "tree": {"sha": "84220a3fc77b7c9b18fad59ea4bb2bbc6c8d4c4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84220a3fc77b7c9b18fad59ea4bb2bbc6c8d4c4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/984e25aca82757afc2b90bc6082c7890805e5fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984e25aca82757afc2b90bc6082c7890805e5fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984e25aca82757afc2b90bc6082c7890805e5fc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984e25aca82757afc2b90bc6082c7890805e5fc8/comments", "author": null, "committer": null, "parents": [{"sha": "ff95551244ee90bc9649cb3137dee18b7d909ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff95551244ee90bc9649cb3137dee18b7d909ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff95551244ee90bc9649cb3137dee18b7d909ce0"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "e54aa7d894975a63c122f00da921e25dd48bd12b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984e25aca82757afc2b90bc6082c7890805e5fc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984e25aca82757afc2b90bc6082c7890805e5fc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=984e25aca82757afc2b90bc6082c7890805e5fc8", "patch": "@@ -1,3 +1,14 @@\n+2003-04-05  Andrew Pinski  <apinski@apple.com>\n+\n+\t* config/rs6000/rs6000.c (addrs_ok_for_quad_peep): Allow addr2\n+\treg with reg1 == reg2 and offset1 = -8.\n+\n+2003-04-05  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_rtx_costs): Halve Power4\n+\tmultiply costs.  Correct Power4 divide costs.\n+\t* config/rs6000/power4.md: Restore multiply and FP latency.\n+\n 2003-04-05  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* alias.c (find_base_term): Export."}, {"sha": "8ac0c15d44fb8f18d89f20b667f210f917fc6034", "filename": "gcc/config/rs6000/power4.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984e25aca82757afc2b90bc6082c7890805e5fc8/gcc%2Fconfig%2Frs6000%2Fpower4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984e25aca82757afc2b90bc6082c7890805e5fc8/gcc%2Fconfig%2Frs6000%2Fpower4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower4.md?ref=984e25aca82757afc2b90bc6082c7890805e5fc8", "patch": "@@ -104,7 +104,7 @@\n   \"(du1_power4+du2_power4+du3_power4+du4_power4),\\\n    iu1_power4,lsu2_power4+iu1_power4,nothing,nothing,iu2_power4\")\n \n-(define_insn_reservation \"power4-load-update-indexed\" 4 ; 3\n+(define_insn_reservation \"power4-load-update-indexed\" 3\n   (and (eq_attr \"type\" \"load_ux\")\n        (eq_attr \"cpu\" \"power4\"))\n    \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n@@ -197,7 +197,7 @@\n \n (define_bypass 4 \"power4-compare\" \"power4-branch,power4-crlogical,power4-delayedcr,power4-mfcr\")\n \n-(define_insn_reservation \"power4-lmul-cmp\" 8 ; 7\n+(define_insn_reservation \"power4-lmul-cmp\" 7\n   (and (eq_attr \"type\" \"lmul_compare\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"(du1_power4+du2_power4,iu1_power4*6,iu2_power4)\\\n@@ -207,7 +207,7 @@\n \n (define_bypass 10 \"power4-lmul-cmp\" \"power4-branch,power4-crlogical,power4-delayedcr,power4-mfcr\")\n \n-(define_insn_reservation \"power4-imul-cmp\" 6 ; 5\n+(define_insn_reservation \"power4-imul-cmp\" 5\n   (and (eq_attr \"type\" \"imul_compare\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"(du1_power4+du2_power4,iu1_power4*4,iu2_power4)\\\n@@ -217,7 +217,7 @@\n \n (define_bypass 8 \"power4-imul-cmp\" \"power4-branch,power4-crlogical,power4-delayedcr,power4-mfcr\")\n \n-(define_insn_reservation \"power4-lmul\" 8 ; 7\n+(define_insn_reservation \"power4-lmul\" 7\n   (and (eq_attr \"type\" \"lmul\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"(du1_power4,iu1_power4*6)\\\n@@ -227,7 +227,7 @@\n ;  |(du3_power4,nothing,iu2_power4*6)\\\n ;  |(du4_power4,nothing,iu2_power4*6)\")\n \n-(define_insn_reservation \"power4-imul\" 6 ; 5\n+(define_insn_reservation \"power4-imul\" 5\n   (and (eq_attr \"type\" \"imul\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"(du1_power4,iu1_power4*4)\\\n@@ -237,7 +237,7 @@\n ;  |(du3_power4,nothing,iu2_power4*4)\\\n ;  |(du4_power4,nothing,iu1_power4*4)\")\n \n-(define_insn_reservation \"power4-imul3\" 5 ; 4\n+(define_insn_reservation \"power4-imul3\" 4\n   (and (eq_attr \"type\" \"imul2,imul3\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"(du1_power4,iu1_power4*3)\\\n@@ -305,7 +305,7 @@\n   \"du1_power4,iu1_power4\")\n \n ; Basic FP latency is 6 cycles\n-(define_insn_reservation \"power4-fp\" 7 ; 6\n+(define_insn_reservation \"power4-fp\" 6\n   (and (eq_attr \"type\" \"fp,dmul\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"fpq_power4\")"}, {"sha": "d62bbd336fa7e2e36c393c9ce53212bd2208fcfe", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984e25aca82757afc2b90bc6082c7890805e5fc8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984e25aca82757afc2b90bc6082c7890805e5fc8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=984e25aca82757afc2b90bc6082c7890805e5fc8", "patch": "@@ -7331,7 +7331,11 @@ addrs_ok_for_quad_peep (addr1, addr2)\n       offset1 = 0;\n     }\n \n-  /* Make sure the second address is a (mem (plus (reg) (const_int))).  */\n+/* Make sure the second address is a (mem (plus (reg) (const_int)))\n+    or if it is (mem (reg)) then make sure that offset1 is -8 and the same \n+    register as addr1.  */\n+  if (offset1 == -8 && GET_CODE (addr2) == REG && reg1 == REGNO (addr2))\n+   return 1;\n   if (GET_CODE (addr2) != PLUS)\n     return 0;\n \n@@ -13744,8 +13748,8 @@ rs6000_rtx_costs (x, code, outer_code, total)\n \tcase PROCESSOR_POWER4:\n \t  *total = (GET_CODE (XEXP (x, 1)) != CONST_INT\n \t\t    ? GET_MODE (XEXP (x, 1)) != DImode\n-\t\t    ? COSTS_N_INSNS (5) : COSTS_N_INSNS (7)\n-\t\t    : COSTS_N_INSNS (4));\n+\t\t    ? COSTS_N_INSNS (3) : COSTS_N_INSNS (4)\n+\t\t    : COSTS_N_INSNS (2));\n \t  return true;\n \n \tdefault:\n@@ -13807,7 +13811,6 @@ rs6000_rtx_costs (x, code, outer_code, total)\n \n \tcase PROCESSOR_PPC620:\n \tcase PROCESSOR_PPC630:\n-\tcase PROCESSOR_POWER4:\n \t  *total = (GET_MODE (XEXP (x, 1)) != DImode\n \t\t    ? COSTS_N_INSNS (21)\n \t\t    : COSTS_N_INSNS (37));\n@@ -13823,6 +13826,12 @@ rs6000_rtx_costs (x, code, outer_code, total)\n \t  *total = COSTS_N_INSNS (23);\n \t  return true;\n \n+\tcase PROCESSOR_POWER4:\n+\t  *total = (GET_MODE (XEXP (x, 1)) != DImode\n+\t\t    ? COSTS_N_INSNS (18)\n+\t\t    : COSTS_N_INSNS (34));\n+\t  return true;\n+\n \tdefault:\n \t  abort ();\n \t}"}]}