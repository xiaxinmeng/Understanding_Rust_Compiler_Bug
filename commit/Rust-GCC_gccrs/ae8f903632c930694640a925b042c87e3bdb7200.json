{"sha": "ae8f903632c930694640a925b042c87e3bdb7200", "node_id": "C_kwDOANBUbNoAKGFlOGY5MDM2MzJjOTMwNjk0NjQwYTkyNWIwNDJjODdlM2JkYjcyMDA", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-12T16:10:23Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-12T16:10:23Z"}, "message": "libstdc++: Fix chunk_by_view when value_type& and reference differ [PR108291]\n\n\tPR libstdc++/108291\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (chunk_by_view::_M_find_next): Generalize\n\tparameter types of the lambda wrapper passed to adjacent_find.\n\t(chunk_by_view::_M_find_prev): Likewise.\n\t* testsuite/std/ranges/adaptors/chunk_by/1.cc (test04, test05):\n\tNew tests.", "tree": {"sha": "d2e1c55222425f40749d2193dc03694d494c1228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2e1c55222425f40749d2193dc03694d494c1228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae8f903632c930694640a925b042c87e3bdb7200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8f903632c930694640a925b042c87e3bdb7200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8f903632c930694640a925b042c87e3bdb7200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8f903632c930694640a925b042c87e3bdb7200/comments", "author": null, "committer": null, "parents": [{"sha": "31eb8f18bbe64613fd8d77c4520c00beeb13598f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31eb8f18bbe64613fd8d77c4520c00beeb13598f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31eb8f18bbe64613fd8d77c4520c00beeb13598f"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "ba71976df8db0ae38013949bd846a8906086141f", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8f903632c930694640a925b042c87e3bdb7200/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8f903632c930694640a925b042c87e3bdb7200/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=ae8f903632c930694640a925b042c87e3bdb7200", "patch": "@@ -6742,8 +6742,8 @@ namespace views::__adaptor\n     _M_find_next(iterator_t<_Vp> __current)\n     {\n       __glibcxx_assert(_M_pred.has_value());\n-      auto __pred = [this]<typename _Tp>(_Tp&& __x, _Tp&& __y) {\n-\treturn !bool((*_M_pred)(std::forward<_Tp>(__x), std::forward<_Tp>(__y)));\n+      auto __pred = [this]<typename _Tp, typename _Up>(_Tp&& __x, _Up&& __y) {\n+\treturn !bool((*_M_pred)(std::forward<_Tp>(__x), std::forward<_Up>(__y)));\n       };\n       auto __it = ranges::adjacent_find(__current, ranges::end(_M_base), __pred);\n       return ranges::next(__it, 1, ranges::end(_M_base));\n@@ -6753,8 +6753,8 @@ namespace views::__adaptor\n     _M_find_prev(iterator_t<_Vp> __current) requires bidirectional_range<_Vp>\n     {\n       __glibcxx_assert(_M_pred.has_value());\n-      auto __pred = [this]<typename _Tp>(_Tp&& __x, _Tp&& __y) {\n-\treturn !bool((*_M_pred)(std::forward<_Tp>(__y), std::forward<_Tp>(__x)));\n+      auto __pred = [this]<typename _Tp, typename _Up>(_Tp&& __x, _Up&& __y) {\n+\treturn !bool((*_M_pred)(std::forward<_Up>(__y), std::forward<_Tp>(__x)));\n       };\n       auto __rbegin = std::make_reverse_iterator(__current);\n       auto __rend = std::make_reverse_iterator(ranges::begin(_M_base));"}, {"sha": "a8fceb105e025529549a4b2e0f3954e62bd58472", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/chunk_by/1.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8f903632c930694640a925b042c87e3bdb7200/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fchunk_by%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8f903632c930694640a925b042c87e3bdb7200/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fchunk_by%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fchunk_by%2F1.cc?ref=ae8f903632c930694640a925b042c87e3bdb7200", "patch": "@@ -61,10 +61,45 @@ test03()\n   ranges::chunk_by_view<ranges::empty_view<int>, ranges::equal_to> r;\n }\n \n+constexpr bool\n+test04()\n+{\n+  // PR libstdc++/108291\n+  using namespace std::literals;\n+  std::string_view s = \"hello\";\n+  auto r = s | views::chunk_by(std::less{});\n+  VERIFY( ranges::equal(r,\n+\t\t\t(std::string_view[]){\"h\"sv, \"el\"sv, \"lo\"sv},\n+\t\t\tranges::equal) );\n+  VERIFY( ranges::equal(r | views::reverse,\n+\t\t\t(std::string_view[]){\"lo\"sv, \"el\"sv, \"h\"sv},\n+\t\t\tranges::equal) );\n+\n+  return true;\n+}\n+\n+void\n+test05()\n+{\n+  // PR libstdc++/109474\n+  std::vector<bool> v = {true, false, true, true, false, false};\n+  auto r = v | views::chunk_by(std::equal_to{});\n+  VERIFY( ranges::equal(r,\n+\t\t\t(std::initializer_list<bool>[])\n+\t\t\t  {{true}, {false}, {true, true}, {false, false}},\n+\t\t\tranges::equal) );\n+  VERIFY( ranges::equal(r | views::reverse,\n+\t\t\t(std::initializer_list<bool>[])\n+\t\t\t  {{false, false}, {true, true}, {false}, {true}},\n+\t\t\tranges::equal) );\n+}\n+\n int\n main()\n {\n   static_assert(test01());\n   test02();\n   test03();\n+  static_assert(test04());\n+  test05();\n }"}]}