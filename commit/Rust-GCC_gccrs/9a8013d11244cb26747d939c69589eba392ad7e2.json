{"sha": "9a8013d11244cb26747d939c69589eba392ad7e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE4MDEzZDExMjQ0Y2IyNjc0N2Q5MzljNjk1ODllYmEzOTJhZDdlMg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-08-12T17:19:09Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-08-12T17:19:09Z"}, "message": "re PR fortran/66679 ([OOP] ICE with class(*) and transfer)\n\n2018-08-12  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/66679\n\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Class array\n\telements are returned as references to the data element. Get\n\tthe class expression by stripping back the references. Use this\n\tfor the element size.\n\n2018-08-12  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/66679\n\t* gfortran.dg/transfer_class_3.f90: New test.\n\nFrom-SVN: r263499", "tree": {"sha": "4247e547f1412895bb682e501c5d1daa41903f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4247e547f1412895bb682e501c5d1daa41903f61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a8013d11244cb26747d939c69589eba392ad7e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8013d11244cb26747d939c69589eba392ad7e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a8013d11244cb26747d939c69589eba392ad7e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8013d11244cb26747d939c69589eba392ad7e2/comments", "author": null, "committer": null, "parents": [{"sha": "5b774d92b054cce62313be4278932fadf7dd6454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b774d92b054cce62313be4278932fadf7dd6454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b774d92b054cce62313be4278932fadf7dd6454"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "6c39d9cc5d53ecd33bfda6b25b84caf3b8cf7725", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8013d11244cb26747d939c69589eba392ad7e2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8013d11244cb26747d939c69589eba392ad7e2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9a8013d11244cb26747d939c69589eba392ad7e2", "patch": "@@ -1,3 +1,11 @@\n+2018-08-12  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/66679\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Class array\n+\telements are returned as references to the data element. Get\n+\tthe class expression by stripping back the references. Use this\n+\tfor the element size.\n+\n 2018-08-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/86906"}, {"sha": "db2bbab14123966ca99bcdc34d1f7afa286d7b84", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8013d11244cb26747d939c69589eba392ad7e2/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8013d11244cb26747d939c69589eba392ad7e2/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=9a8013d11244cb26747d939c69589eba392ad7e2", "patch": "@@ -3664,8 +3664,8 @@ conv_intrinsic_random_init (gfc_code *code)\n   gfc_add_block_to_block (&block, &se.post);\n \n   /* Create the hidden argument.  For non-coarray codes and -fcoarray=single,\n-     simply set this to 0.  For -fcoarray=lib, generate a call to \n-     THIS_IMAGE() without arguments.  */ \n+     simply set this to 0.  For -fcoarray=lib, generate a call to\n+     THIS_IMAGE() without arguments.  */\n   arg3 = build_int_cst (gfc_get_int_type (4), 0);\n   if (flag_coarray == GFC_FCOARRAY_LIB)\n     {\n@@ -3677,7 +3677,7 @@ conv_intrinsic_random_init (gfc_code *code)\n   tmp = build_call_expr_loc (input_location, gfor_fndecl_random_init, 3,\n \t\t\t     arg1, arg2, arg3);\n   gfc_add_expr_to_block (&block, tmp);\n- \n+\n   return gfc_finish_block (&block);\n }\n \n@@ -7369,13 +7369,14 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n   tree upper;\n   tree lower;\n   tree stmt;\n+  tree class_ref = NULL_TREE;\n   gfc_actual_arglist *arg;\n   gfc_se argse;\n   gfc_array_info *info;\n   stmtblock_t block;\n   int n;\n   bool scalar_mold;\n-  gfc_expr *source_expr, *mold_expr;\n+  gfc_expr *source_expr, *mold_expr, *class_expr;\n \n   info = NULL;\n   if (se->loop)\n@@ -7406,7 +7407,24 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n     {\n       gfc_conv_expr_reference (&argse, arg->expr);\n       if (arg->expr->ts.type == BT_CLASS)\n-\tsource = gfc_class_data_get (argse.expr);\n+\t{\n+\t  tmp = build_fold_indirect_ref_loc (input_location, argse.expr);\n+\t  if (GFC_CLASS_TYPE_P (TREE_TYPE (tmp)))\n+\t    source = gfc_class_data_get (tmp);\n+\t  else\n+\t    {\n+\t      /* Array elements are evaluated as a reference to the data.\n+\t\t To obtain the vptr for the element size, the argument\n+\t\t expression must be stripped to the class reference and\n+\t\t re-evaluated. The pre and post blocks are not needed.  */\n+\t      gcc_assert (arg->expr->expr_type == EXPR_VARIABLE);\n+\t      source = argse.expr;\n+\t      class_expr = gfc_find_and_cut_at_last_class_ref (arg->expr);\n+\t      gfc_init_se (&argse, NULL);\n+\t      gfc_conv_expr (&argse, class_expr);\n+\t      class_ref = argse.expr;\n+\t    }\n+\t}\n       else\n \tsource = argse.expr;\n \n@@ -7418,7 +7436,10 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n \t\t\t\t\t argse.string_length);\n \t  break;\n \tcase BT_CLASS:\n-\t  tmp = gfc_class_vtab_size_get (argse.expr);\n+\t  if (class_ref != NULL_TREE)\n+\t    tmp = gfc_class_vtab_size_get (class_ref);\n+\t  else\n+\t    tmp = gfc_class_vtab_size_get (argse.expr);\n \t  break;\n \tdefault:\n \t  source_type = TREE_TYPE (build_fold_indirect_ref_loc (input_location,"}, {"sha": "95d558f2522043e0c6fefabe124826480ff5fd9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8013d11244cb26747d939c69589eba392ad7e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8013d11244cb26747d939c69589eba392ad7e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a8013d11244cb26747d939c69589eba392ad7e2", "patch": "@@ -1,3 +1,8 @@\n+2018-08-12  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/66679\n+\t* gfortran.dg/transfer_class_3.f90: New test.\n+\n 2018-08-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/86906"}, {"sha": "90082d7ebf0cf71eb7f241f4f57416c12a20e709", "filename": "gcc/testsuite/gfortran.dg/transfer_class_3.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8013d11244cb26747d939c69589eba392ad7e2/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_class_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8013d11244cb26747d939c69589eba392ad7e2/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_class_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_class_3.f90?ref=9a8013d11244cb26747d939c69589eba392ad7e2", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR66679.\n+!\n+! Contributed by Miha Polajnar  <polajnar.miha@gmail.com>\n+!\n+program main\n+  implicit none\n+  class(*), allocatable :: vec(:)\n+  integer :: var, ans(2)\n+  allocate(vec(2),source=[1_4, 2_4])\n+\n+! This worked correctly.\n+  if (any (transfer(vec,[var],2) .ne. [1_4, 2_4])) stop 1\n+\n+! This caused an ICE.\n+  if (any ([transfer(vec(1),[var]), transfer(vec(2),[var])] .ne. [1_4, 2_4])) stop 2\n+end program main"}]}