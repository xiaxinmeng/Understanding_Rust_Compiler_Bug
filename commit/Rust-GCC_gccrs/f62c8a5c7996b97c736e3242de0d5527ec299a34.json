{"sha": "f62c8a5c7996b97c736e3242de0d5527ec299a34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYyYzhhNWM3OTk2Yjk3YzczNmUzMjQyZGUwZDU1MjdlYzI5OWEzNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-06-26T05:18:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-06-26T05:18:53Z"}, "message": "defaults.h (FRAME_GROWS_DOWNWARD): Define to 0 if not defined.\n\n\t* defaults.h (FRAME_GROWS_DOWNWARD): Define to 0 if not defined.\n\t* function.c (get_func_frame_size): Use if (FRAME_GROWS_DOWNWARD)\n\tinstead of preprocessor conditionals.\n\t(assign_stack_local_1, assign_stack_temp_for_type): Likewise.\n\t* cfgexpand.c (FRAME_GROWS_DOWNWARD): Don't redefine to 1 or 0\n\tdepending on if it was or was not defined previously.\n\t* doc/rtl.texi (VIRTUAL_STACK_VARS_REGNUM): Mention that only non-zero\n\tdefinition of FRAME_GROWS_DOWNWARD means frame grows downward.\n\t* doc/tm.texi (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/m68hc11/m68hc11.h (FRAME_GROWS_DOWNWARD): Define to 0.  Update\n\tcomment.\n\t* config/pa/pa.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/rs6000/rs6000.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/stormy16/stormy16.h (FRAME_GROWS_DOWNWARD): Define to 0.\n\t* config/c4x/c4x.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/sh/sh.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/ia64/ia64.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/iq2000/iq2000.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/pdp11/pdp11.h (FRAME_GROWS_DOWNWARD): Define to 1.  Update\n\tcomment.\n\t* config/i860/i860.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/h8300/h8300.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/arc/arc.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/vax/vax.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/sparc/sparc.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/i386/i386.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/fr30/fr30.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/frv/frv.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/mn10300/mn10300.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/bfin/bfin.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/ns32k/ns32k.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/v850/v850.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/alpha/alpha.h (FRAME_GROWS_DOWNWARD): Update comment.\n\t* config/s390/s390.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/arm/arm.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/alpha/unicosmk.h (FRAME_GROWS_DOWNWARD): Define to 1.\n\t* config/cris/cris.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/m68k/m68k.h (FRAME_GROWS_DOWNWARD): Likewise.\n\t* config/mmix/mmix.h (FRAME_GROWS_DOWNWARD): Likewise.\n\nFrom-SVN: r101329", "tree": {"sha": "390776c633d81d423d7316acdfdfa13dcefb5a65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/390776c633d81d423d7316acdfdfa13dcefb5a65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f62c8a5c7996b97c736e3242de0d5527ec299a34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62c8a5c7996b97c736e3242de0d5527ec299a34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f62c8a5c7996b97c736e3242de0d5527ec299a34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62c8a5c7996b97c736e3242de0d5527ec299a34/comments", "author": null, "committer": null, "parents": [{"sha": "567fb6602c70e0c7341a0b1a39b017419669027b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567fb6602c70e0c7341a0b1a39b017419669027b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567fb6602c70e0c7341a0b1a39b017419669027b"}], "stats": {"total": 237, "additions": 137, "deletions": 100}, "files": [{"sha": "db5ef095b03928ce5412812ece6cc9983a0fc02d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -1,3 +1,45 @@\n+2005-06-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* defaults.h (FRAME_GROWS_DOWNWARD): Define to 0 if not defined.\n+\t* function.c (get_func_frame_size): Use if (FRAME_GROWS_DOWNWARD)\n+\tinstead of preprocessor conditionals.\n+\t(assign_stack_local_1, assign_stack_temp_for_type): Likewise.\n+\t* cfgexpand.c (FRAME_GROWS_DOWNWARD): Don't redefine to 1 or 0\n+\tdepending on if it was or was not defined previously.\n+\t* doc/rtl.texi (VIRTUAL_STACK_VARS_REGNUM): Mention that only non-zero\n+\tdefinition of FRAME_GROWS_DOWNWARD means frame grows downward.\n+\t* doc/tm.texi (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/m68hc11/m68hc11.h (FRAME_GROWS_DOWNWARD): Define to 0.  Update\n+\tcomment.\n+\t* config/pa/pa.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/rs6000/rs6000.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/stormy16/stormy16.h (FRAME_GROWS_DOWNWARD): Define to 0.\n+\t* config/c4x/c4x.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/sh/sh.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/ia64/ia64.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/iq2000/iq2000.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/pdp11/pdp11.h (FRAME_GROWS_DOWNWARD): Define to 1.  Update\n+\tcomment.\n+\t* config/i860/i860.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/h8300/h8300.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/arc/arc.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/vax/vax.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/sparc/sparc.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/i386/i386.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/fr30/fr30.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/frv/frv.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/mn10300/mn10300.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/bfin/bfin.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/ns32k/ns32k.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/v850/v850.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/alpha/alpha.h (FRAME_GROWS_DOWNWARD): Update comment.\n+\t* config/s390/s390.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/arm/arm.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/alpha/unicosmk.h (FRAME_GROWS_DOWNWARD): Define to 1.\n+\t* config/cris/cris.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/m68k/m68k.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\t* config/mmix/mmix.h (FRAME_GROWS_DOWNWARD): Likewise.\n+\n 2005-06-26  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR tree-optimization/22026\n@@ -147,8 +189,8 @@\n \n 2005-06-21  Jeff Law  <law@redhat.com>\n \n-        * tree-vrp.c (extract_range_from_unary_expr): Handle type\n-        conversions better.\n+\t* tree-vrp.c (extract_range_from_unary_expr): Handle type\n+\tconversions better.\n \n 2005-06-21  Dorit Nuzman  <dorit@il.ibm.com>\n "}, {"sha": "1747309010cf58b79a9de5566be08c9b913d047c", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -88,13 +88,6 @@ add_reg_br_prob_note (FILE *dump_file, rtx last, int probability)\n #define STACK_ALIGNMENT_NEEDED 1\n #endif\n \n-#ifdef FRAME_GROWS_DOWNWARD\n-# undef FRAME_GROWS_DOWNWARD\n-# define FRAME_GROWS_DOWNWARD 1\n-#else\n-# define FRAME_GROWS_DOWNWARD 0\n-#endif\n-\n \n /* This structure holds data relevant to one variable that will be\n    placed in a stack slot.  */"}, {"sha": "19668e920bc911431cdc6eef41dff7ad86dd2cbf", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -735,11 +735,11 @@ extern int alpha_memory_latency;\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n-/* #define FRAME_GROWS_DOWNWARD */\n+/* #define FRAME_GROWS_DOWNWARD 0 */\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "da7d375f3b4591178eed494ab1f874be91926b4a", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -96,7 +96,7 @@ Boston, MA 02110-1301, USA.  */\n \f\n /* The stack frame grows downward.  */\n \n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Define the offset between two registers, one to be eliminated, and the\n    other its replacement, at the start of a routine. This is somewhat"}, {"sha": "f4e4648f5071bb1ccd58bf69f363712a5990bae9", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -456,11 +456,11 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    pointer to a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "65b4bad144be3534447d290d14d541e6d38ded3d", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -1334,7 +1334,7 @@ enum reg_class\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD  1\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "c366fbc513a83f64471b605994459ec7eaafdcb3", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -79,11 +79,11 @@ extern const char *bfin_library_id_string;\n \n #define STACK_PUSH_CODE PRE_DEC\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* We define a dummy ARGP register; the parameters start at offset 0 from\n    it. */"}, {"sha": "895a34b1997dbf9659f4d19c0c29d275ebaabc18", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -863,12 +863,12 @@ enum reg_class\n /* #define STACK_GROWS_DOWNWARD.  */\n /* Like the dsp16xx, i370, i960, and we32k ports.  */\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n \n-/* #define FRAME_GROWS_DOWNWARD.  */\n+#define FRAME_GROWS_DOWNWARD 0\n \n \n /* Registers That Address the Stack Frame.  */"}, {"sha": "25c0cd43f6fe0f258c3d122bac72de54721694c6", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -681,7 +681,7 @@ enum reg_class\n /* Node: Frame Layout */\n \n #define STACK_GROWS_DOWNWARD\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* It seems to be indicated in the code (at least 2.1) that this is\n    better a constant, and best 0.  */"}, {"sha": "37ed63a339bbfc396a185a4b808bdb047ce1d0f2", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -463,8 +463,8 @@ enum reg_class\n    to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* Define this macro if the addresses of local variable slots are at negative\n-   offsets from the frame pointer.  */\n+/* Define this to macro non-zero if the addresses of local variable slots\n+   are at negative offsets from the frame pointer.  */\n #define FRAME_GROWS_DOWNWARD 1\n \n /* Offset from the frame pointer to the first local variable slot to be"}, {"sha": "b33805c0a1a16bdfcde777c3181c85f0a199b9a9", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -1445,9 +1445,9 @@ typedef struct frv_stack {\n    to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* Define this macro if the addresses of local variable slots are at negative\n-   offsets from the frame pointer.  */\n-#define FRAME_GROWS_DOWNWARD\n+/* Define this macro to non-zero if the addresses of local variable slots\n+   are at negative offsets from the frame pointer.  */\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset from the frame pointer to the first local variable slot to be\n    allocated."}, {"sha": "3b38e31563389e34eb4e47a72216e27b8609d7d1", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -485,12 +485,12 @@ enum reg_class {\n \n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n \n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "11e0a3c14cd215e1b36477ea0758041dcfd702f1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -1356,11 +1356,11 @@ enum reg_class\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "07da9b9311a170315bfec23a1a0ee2120459cee7", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -356,11 +356,11 @@ enum reg_class { NO_REGS, GENERAL_REGS, FP_REGS, ALL_REGS, LIM_REG_CLASSES };\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "e97bf077bfc3cd2c9971623e74aab2a1c09c9373", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -949,9 +949,9 @@ enum reg_class\n    to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* Define this macro if the addresses of local variable slots are at negative\n-   offsets from the frame pointer.  */\n-/* #define FRAME_GROWS_DOWNWARD */\n+/* Define this macro to non-zero if the addresses of local variable slots\n+   are at negative offsets from the frame pointer.  */\n+#define FRAME_GROWS_DOWNWARD 0\n \n /* Offset from the frame pointer to the first local variable slot to\n    be allocated.  */"}, {"sha": "f60b6277f8a3716f078142add9e76a7a67f37a8c", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -301,7 +301,7 @@ enum reg_class\n \n #define STACK_GROWS_DOWNWARD\n \n-/* #define FRAME_GROWS_DOWNWARD */\n+#define FRAME_GROWS_DOWNWARD 0\n \n #define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n   (current_function_outgoing_args_size)"}, {"sha": "b033d6e50c3bbbeb4aaac49f6f0cf1351b37b71a", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -800,14 +800,14 @@ extern enum reg_class m68hc11_tmp_regs_class;\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.\n \n-   Don't define for 68HC11, the frame pointer is the bottom\n+   Define to 0 for 68HC11, the frame pointer is the bottom\n    of local variables.  */\n-/* #define FRAME_GROWS_DOWNWARD */\n+#define FRAME_GROWS_DOWNWARD\t\t0\n \n /* Define this if successive arguments to a function occupy decreasing \n    addresses in the stack.  */"}, {"sha": "e986f11ea938232678c414ac6449ead0a01cffed", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -448,7 +448,7 @@ extern enum reg_class regno_reg_class[];\n /* Stack layout; function entry, exit and calling.  */\n \n #define STACK_GROWS_DOWNWARD\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n #define STARTING_FRAME_OFFSET 0\n \n /* On the 680x0, sp@- in a byte insn really pushes a word."}, {"sha": "9ae7bc7f36d605a0db82527d33a7819ca34ffbe0", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -534,7 +534,7 @@ enum reg_class\n /* Node: Frame Layout */\n \n #define STACK_GROWS_DOWNWARD\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n #define STARTING_FRAME_OFFSET \\\n   mmix_starting_frame_offset ()"}, {"sha": "e86c7b5668543cd480dc5cfbdb472abc9b880e1f", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -480,12 +480,12 @@ enum reg_class {\n \n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n \n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "1e503cf5f86821165c7d8a4f29608ef883ed40ea", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -452,11 +452,11 @@ enum reg_class\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "b20a1b7bcaaec033230740b9e3b1a6088ee1967b", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -494,11 +494,11 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n /* Believe it or not.  */\n #define ARGS_GROW_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n-/* #define FRAME_GROWS_DOWNWARD */\n+#define FRAME_GROWS_DOWNWARD 0\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "bb83fdfd4b0b85334b1f9b04d8c82479cd9b7d3e", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -415,12 +415,12 @@ loading is easier into LOAD_FPU_REGS than FPU_REGS! */\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.\n */\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "fdc1dc13ad62e5ed007c6acbf60ee276032f84db", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -1218,14 +1218,14 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n /* Offsets recorded in opcodes are a multiple of this alignment factor.  */\n #define DWARF_CIE_DATA_ALIGNMENT (-((int) (TARGET_32BIT ? 4 : 8)))\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.\n \n    On the RS/6000, we grow upwards, from the area after the outgoing\n    arguments.  */\n-/* #define FRAME_GROWS_DOWNWARD */\n+#define FRAME_GROWS_DOWNWARD 0\n \n /* Size of the outgoing register save area */\n #define RS6000_REG_SAVE ((DEFAULT_ABI == ABI_AIX\t\t\t\\"}, {"sha": "77387e6a5809c0294fb6adc5ba1649bfd52af001", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -506,7 +506,7 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n    are accessed by positive offsets, and function arguments are stored at\n    increasing addresses.  */\n #define STACK_GROWS_DOWNWARD\n-/* #undef FRAME_GROWS_DOWNWARD */\n+/* #define FRAME_GROWS_DOWNWARD 0 */\n /* #undef ARGS_GROW_DOWNWARD */\n \n /* The basic stack layout looks like this: the stack pointer points"}, {"sha": "fafa09e2631ce20e8ff8ca146a4f79ac58e20fc1", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -1694,11 +1694,11 @@ extern enum reg_class reg_class_from_letter[];\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/*  Define this macro if the addresses of local variable slots are at\n-    negative offsets from the frame pointer.\n+/*  Define this macro to non-zero if the addresses of local variable slots\n+    are at negative offsets from the frame pointer.\n \n     The SH only has positive indexes, so grow the frame up.  */\n-/* #define FRAME_GROWS_DOWNWARD */\n+#define FRAME_GROWS_DOWNWARD 0\n \n /* Offset from the frame pointer to the first local variable slot to\n    be allocated.  */"}, {"sha": "95fd760de57966a369f039a8aa66a30e352cecb4", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -1360,11 +1360,11 @@ extern char leaf_reg_remap[];\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "d224271401b18a574360421d7f7ba4c2efe1fb57", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -337,7 +337,7 @@ enum reg_class\n    because we don't have any pre-increment ones.  */\n #define STACK_PUSH_CODE POST_INC\n \n-/* #define FRAME_GROWS_DOWNWARD */\n+#define FRAME_GROWS_DOWNWARD 0\n \n #define ARGS_GROW_DOWNWARD 1\n "}, {"sha": "4b0af763ace242d72decda63ddeb162e477fef0a", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -434,12 +434,12 @@ enum reg_class\n \n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n \n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "ca806fe2a0febf2732ecf3368c59bf89a6a836e5", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -314,11 +314,11 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if the nominal address of the stack frame\n+/* Define this to non-zero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n-#define FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}, {"sha": "8474978774469bc33b9e4a9e6f32e99ea7295f44", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -842,4 +842,8 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n #define MAX_OFILE_ALIGNMENT BIGGEST_ALIGNMENT\n #endif\n \n+#ifndef FRAME_GROWS_DOWNWARD\n+#define FRAME_GROWS_DOWNWARD 0\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "72853a6a556e55f462fc2e275f37239e74c62ea2", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -1505,9 +1505,9 @@ value of @code{FIRST_PARM_OFFSET}.\n @findex VIRTUAL_STACK_VARS_REGNUM\n @cindex @code{FRAME_GROWS_DOWNWARD} and virtual registers\n @item VIRTUAL_STACK_VARS_REGNUM\n-If @code{FRAME_GROWS_DOWNWARD} is defined, this points to immediately\n-above the first variable on the stack.  Otherwise, it points to the\n-first variable on the stack.\n+If @code{FRAME_GROWS_DOWNWARD} is defined to a non-zero value, this points\n+to immediately above the first variable on the stack.  Otherwise, it points\n+to the first variable on the stack.\n \n @cindex @code{STARTING_FRAME_OFFSET} and virtual registers\n @cindex @code{FRAME_POINTER_REGNUM} and virtual registers"}, {"sha": "fbf5cd1bf85a800a1dcb243e63ad68630bb486c7", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -2752,8 +2752,8 @@ which is often wrong.\n @end defmac\n \n @defmac FRAME_GROWS_DOWNWARD\n-Define this macro if the addresses of local variable slots are at negative\n-offsets from the frame pointer.\n+Define this macro to non-zero value if the addresses of local variable slots\n+are at negative offsets from the frame pointer.\n @end defmac\n \n @defmac ARGS_GROW_DOWNWARD"}, {"sha": "c5c8dd80dfd4556c91e4fc11d668bc9046dd22ff", "filename": "gcc/function.c", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62c8a5c7996b97c736e3242de0d5527ec299a34/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=f62c8a5c7996b97c736e3242de0d5527ec299a34", "patch": "@@ -347,11 +347,10 @@ free_after_compilation (struct function *f)\n static HOST_WIDE_INT\n get_func_frame_size (struct function *f)\n {\n-#ifdef FRAME_GROWS_DOWNWARD\n-  return -f->x_frame_offset;\n-#else\n-  return f->x_frame_offset;\n-#endif\n+  if (FRAME_GROWS_DOWNWARD)\n+    return -f->x_frame_offset;\n+  else\n+    return f->x_frame_offset;\n }\n \n /* Return size needed for stack frame based on slots so far allocated.\n@@ -412,9 +411,8 @@ assign_stack_local_1 (enum machine_mode mode, HOST_WIDE_INT size, int align,\n   else\n     alignment = align / BITS_PER_UNIT;\n \n-#ifdef FRAME_GROWS_DOWNWARD\n-  function->x_frame_offset -= size;\n-#endif\n+  if (FRAME_GROWS_DOWNWARD)\n+    function->x_frame_offset -= size;\n \n   /* Ignore alignment we can't do with expected alignment of the boundary.  */\n   if (alignment * BITS_PER_UNIT > PREFERRED_STACK_BOUNDARY)\n@@ -440,17 +438,16 @@ assign_stack_local_1 (enum machine_mode mode, HOST_WIDE_INT size, int align,\n \t  division with a negative dividend isn't as well defined as we might\n \t  like.  So we instead assume that ALIGNMENT is a power of two and\n \t  use logical operations which are unambiguous.  */\n-#ifdef FRAME_GROWS_DOWNWARD\n-      function->x_frame_offset\n-\t= (FLOOR_ROUND (function->x_frame_offset - frame_phase,\n-\t\t\t(unsigned HOST_WIDE_INT) alignment)\n-\t   + frame_phase);\n-#else\n-      function->x_frame_offset\n-\t= (CEIL_ROUND (function->x_frame_offset - frame_phase,\n-\t\t       (unsigned HOST_WIDE_INT) alignment)\n-\t   + frame_phase);\n-#endif\n+      if (FRAME_GROWS_DOWNWARD)\n+\tfunction->x_frame_offset\n+\t  = (FLOOR_ROUND (function->x_frame_offset - frame_phase,\n+\t\t\t  (unsigned HOST_WIDE_INT) alignment)\n+\t     + frame_phase);\n+      else\n+\tfunction->x_frame_offset\n+\t  = (CEIL_ROUND (function->x_frame_offset - frame_phase,\n+\t\t\t (unsigned HOST_WIDE_INT) alignment)\n+\t     + frame_phase);\n     }\n \n   /* On a big-endian machine, if we are allocating more space than we will use,\n@@ -471,9 +468,8 @@ assign_stack_local_1 (enum machine_mode mode, HOST_WIDE_INT size, int align,\n \t\t\t  (function->x_frame_offset + bigend_correction,\n \t\t\t   Pmode));\n \n-#ifndef FRAME_GROWS_DOWNWARD\n-  function->x_frame_offset += size;\n-#endif\n+  if (!FRAME_GROWS_DOWNWARD)\n+    function->x_frame_offset += size;\n \n   x = gen_rtx_MEM (mode, addr);\n \n@@ -698,20 +694,22 @@ assign_stack_temp_for_type (enum machine_mode mode, HOST_WIDE_INT size,\n \t can be either above or below this stack slot depending on which\n \t way the frame grows.  We include the extra space if and only if it\n \t is above this slot.  */\n-#ifdef FRAME_GROWS_DOWNWARD\n-      p->size = frame_offset_old - frame_offset;\n-#else\n-      p->size = size;\n-#endif\n+      if (FRAME_GROWS_DOWNWARD)\n+\tp->size = frame_offset_old - frame_offset;\n+      else\n+\tp->size = size;\n \n       /* Now define the fields used by combine_temp_slots.  */\n-#ifdef FRAME_GROWS_DOWNWARD\n-      p->base_offset = frame_offset;\n-      p->full_size = frame_offset_old - frame_offset;\n-#else\n-      p->base_offset = frame_offset_old;\n-      p->full_size = frame_offset - frame_offset_old;\n-#endif\n+      if (FRAME_GROWS_DOWNWARD)\n+\t{\n+\t  p->base_offset = frame_offset;\n+\t  p->full_size = frame_offset_old - frame_offset;\n+\t}\n+      else\n+\t{\n+\t  p->base_offset = frame_offset_old;\n+\t  p->full_size = frame_offset - frame_offset_old;\n+\t}\n       p->address = 0;\n \n       selected = p;"}]}