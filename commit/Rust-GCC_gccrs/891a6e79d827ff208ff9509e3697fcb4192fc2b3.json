{"sha": "891a6e79d827ff208ff9509e3697fcb4192fc2b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxYTZlNzlkODI3ZmYyMDhmZjk1MDllMzY5N2ZjYjQxOTJmYzJiMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-12-17T13:37:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-12-17T13:37:04Z"}, "message": "[multiple changes]\n\n2003-12-17  Ed Falis  <falis@gnat.com>\n\n\t* a-elchha.adb (Tailored_Exception_Information): made Info constant to\n\teliminate warning.\n\n\t* a-exextr.adb: Add context clause for\n\tAda.Exceptions.Last_Chance_Handler.\n\n2003-12-17  Sergey Rybin  <rybin@act-europe.fr>\n\n\t* cstand.adb (Create_Standard): Change the way how the declaration of\n\tthe Duration type is created (making it the same way as it is for all\n\tthe other standard types).\n\n2003-12-17  Robert Dewar  <dewar@gnat.com>\n\n\t* s-crtl.ads: Fix header format\n\tChange Pure to Preelaborate\n\n2003-12-17  Ed Schonberg  <schonberg@gnat.com>\n\n\t* checks.adb (Selected_Length_Checks): Generate an Itype reference for\n\tthe expression type only if it is declared in the current unit.\n\n\t* sem_ch3.adb (Constrain_Index): Handle properly a range whose bounds\n\tare universal and already analyzed, as can occur in constrained\n\tsubcomponents that depend on discriminants, when one constraint is a\n\tsubtype mark.\n\n\t* sem_res.adb (Resolve_Type_Conversion): Any arithmetic expression of\n\ttype Any_Fixed is legal as the argument of a conversion, if only one\n\tfixed-point type is in context.\n\n2003-12-17  GNAT Script  <nobody@gnat.com>\n\n\t* Make-lang.in: Makefile automatically updated\n\nFrom-SVN: r74741", "tree": {"sha": "c88d390281088277a1a339c168d6606e0093cae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c88d390281088277a1a339c168d6606e0093cae2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/891a6e79d827ff208ff9509e3697fcb4192fc2b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891a6e79d827ff208ff9509e3697fcb4192fc2b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891a6e79d827ff208ff9509e3697fcb4192fc2b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891a6e79d827ff208ff9509e3697fcb4192fc2b3/comments", "author": null, "committer": null, "parents": [{"sha": "9684a8405af524cd875abea638b7372fa845434c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9684a8405af524cd875abea638b7372fa845434c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9684a8405af524cd875abea638b7372fa845434c"}], "stats": {"total": 123, "additions": 82, "deletions": 41}, "files": [{"sha": "365f4ca1d7fe3d3fdfb47c2784555af25f7b6863", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=891a6e79d827ff208ff9509e3697fcb4192fc2b3", "patch": "@@ -1,3 +1,40 @@\n+2003-12-17  Ed Falis  <falis@gnat.com>\n+\n+\t* a-elchha.adb (Tailored_Exception_Information): made Info constant to\n+\teliminate warning.\n+\n+\t* a-exextr.adb: Add context clause for\n+\tAda.Exceptions.Last_Chance_Handler.\n+\n+2003-12-17  Sergey Rybin  <rybin@act-europe.fr>\n+\n+\t* cstand.adb (Create_Standard): Change the way how the declaration of\n+\tthe Duration type is created (making it the same way as it is for all\n+\tthe other standard types).\n+\n+2003-12-17  Robert Dewar  <dewar@gnat.com>\n+\n+\t* s-crtl.ads: Fix header format\n+\tChange Pure to Preelaborate\n+\n+2003-12-17  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* checks.adb (Selected_Length_Checks): Generate an Itype reference for\n+\tthe expression type only if it is declared in the current unit.\n+\n+\t* sem_ch3.adb (Constrain_Index): Handle properly a range whose bounds\n+\tare universal and already analyzed, as can occur in constrained\n+\tsubcomponents that depend on discriminants, when one constraint is a\n+\tsubtype mark.\n+\n+\t* sem_res.adb (Resolve_Type_Conversion): Any arithmetic expression of\n+\ttype Any_Fixed is legal as the argument of a conversion, if only one\n+\tfixed-point type is in context.\n+\n+2003-12-17  GNAT Script  <nobody@gnat.com>\n+\n+\t* Make-lang.in: Makefile automatically updated\n+\n 2003-12-15  Robert Dewar  <dewar@gnat.com>\n \n \t* exp_ch6.adb (Expand_Thread_Body): Fix error in picking up default"}, {"sha": "cf50fb1d8f7ea72591bae85de4174e6634fcfce4", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=891a6e79d827ff208ff9509e3697fcb4192fc2b3", "patch": "@@ -1221,11 +1221,12 @@ ada/a-elchha.o : ada/ada.ads ada/a-except.ads ada/a-elchha.ads \\\n \n ada/a-except.o : ada/ada.ads ada/a-except.ads ada/a-except.adb \\\n    ada/a-excach.adb ada/a-exexda.adb ada/a-exexpr.adb ada/a-exextr.adb \\\n-   ada/a-excpol.adb ada/a-exstat.adb ada/a-unccon.ads ada/a-uncdea.ads \\\n-   ada/interfac.ads ada/system.ads ada/s-exctab.ads ada/s-except.ads \\\n-   ada/s-mastop.ads ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads \\\n-   ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-traceb.ads \\\n-   ada/s-traent.ads ada/s-traent.adb ada/s-unstyp.ads ada/unchconv.ads \n+   ada/a-elchha.ads ada/a-excpol.adb ada/a-exstat.adb ada/a-unccon.ads \\\n+   ada/a-uncdea.ads ada/interfac.ads ada/system.ads ada/s-exctab.ads \\\n+   ada/s-except.ads ada/s-mastop.ads ada/s-secsta.ads ada/s-soflin.ads \\\n+   ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n+   ada/s-traceb.ads ada/s-traent.ads ada/s-traent.adb ada/s-unstyp.ads \\\n+   ada/unchconv.ads \n \n ada/a-ioexce.o : ada/ada.ads ada/a-except.ads ada/a-ioexce.ads \\\n    ada/system.ads ada/s-exctab.ads ada/s-exctab.adb ada/s-htable.ads \\"}, {"sha": "6e2da234a4bf3c786a254680fee15c558b634209", "filename": "gcc/ada/a-elchha.adb", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fa-elchha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fa-elchha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-elchha.adb?ref=891a6e79d827ff208ff9509e3697fcb4192fc2b3", "patch": "@@ -38,16 +38,15 @@\n --  Default version for most targets\n \n procedure Ada.Exceptions.Last_Chance_Handler\n-  (Except : Exception_Occurrence) is\n-\n+  (Except : Exception_Occurrence)\n+is\n    procedure Unhandled_Terminate;\n    pragma No_Return (Unhandled_Terminate);\n    pragma Import (C, Unhandled_Terminate, \"__gnat_unhandled_terminate\");\n    --  Perform system dependent shutdown code\n \n    function Tailored_Exception_Information\n-     (X    : Exception_Occurrence)\n-     return String;\n+     (X : Exception_Occurrence) return String;\n    --  Exception information to be output in the case of automatic tracing\n    --  requested through GNAT.Exception_Traces.\n    --\n@@ -96,16 +95,14 @@ procedure Ada.Exceptions.Last_Chance_Handler\n    procedure Tailored_Exception_Information\n      (X    : Exception_Occurrence;\n       Buff : in out String;\n-      Last : in out Integer) is\n-\n-      Info : String := Tailored_Exception_Information (X);\n+      Last : in out Integer)\n+   is\n+      Info : constant String := Tailored_Exception_Information (X);\n    begin\n       Last := Info'Last;\n       Buff (1 .. Last) := Info;\n    end Tailored_Exception_Information;\n \n-\n-\n begin\n    --  First allocate & store the exception info in a buffer when\n    --  we know it will be needed. This needs to be done before\n@@ -152,9 +149,9 @@ begin\n \n       To_Stderr (Nline);\n \n-   else\n-      --  Traceback exists\n+   --  Traceback exists\n \n+   else\n       --  Note we can have this whole information output twice if\n       --  this occurrence gets reraised up to here.\n \n@@ -165,5 +162,4 @@ begin\n    end if;\n \n    Unhandled_Terminate;\n-\n end Ada.Exceptions.Last_Chance_Handler;"}, {"sha": "938f04b06e6843e914d4665fd3b401b778c19628", "filename": "gcc/ada/a-exextr.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fa-exextr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fa-exextr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exextr.adb?ref=891a6e79d827ff208ff9509e3697fcb4192fc2b3", "patch": "@@ -33,6 +33,11 @@\n \n with Unchecked_Conversion;\n \n+pragma Warnings (Off);\n+with Ada.Exceptions.Last_Chance_Handler;\n+pragma Warnings (On);\n+--  Bring last chance handler into closure\n+\n separate (Ada.Exceptions)\n package body Exception_Traces is\n "}, {"sha": "2adb5f73ba202f983a678ebabb08ffc5abcb5451", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=891a6e79d827ff208ff9509e3697fcb4192fc2b3", "patch": "@@ -4778,13 +4778,16 @@ package body Checks is\n \n                   --  At the library level, we need to ensure that the\n                   --  type of the object is elaborated before the check\n-                  --  itself is emitted.\n+                  --  itself is emitted. This is only done if the object\n+                  --  is in the current compilation unit, otherwise the\n+                  --  type is frozen and elaborated in its unit.\n \n                   if Is_Itype (Exptyp)\n                     and then\n                       Ekind (Cunit_Entity (Current_Sem_Unit)) = E_Package\n                     and then\n                       not In_Package_Body (Cunit_Entity (Current_Sem_Unit))\n+                    and then In_Open_Scopes (Scope (Exptyp))\n                   then\n                      Ref_Node := Make_Itype_Reference (Sloc (Ck_Node));\n                      Set_Itype (Ref_Node, Exptyp);"}, {"sha": "c79d6027f4ba224a75c62a8b5ea3244e7f37452e", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=891a6e79d827ff208ff9509e3697fcb4192fc2b3", "patch": "@@ -104,8 +104,7 @@ package body CStand is\n \n    function Make_Formal\n      (Typ         : Entity_Id;\n-      Formal_Name : String)\n-      return        Entity_Id;\n+      Formal_Name : String) return Entity_Id;\n    --  Construct entity for subprogram formal with given name and type\n \n    function Make_Integer (V : Uint) return Node_Id;\n@@ -118,8 +117,7 @@ package body CStand is\n    --  Build entity for standard operator with given name and type.\n \n    function New_Standard_Entity\n-     (New_Node_Kind : Node_Kind := N_Defining_Identifier)\n-      return          Entity_Id;\n+     (New_Node_Kind : Node_Kind := N_Defining_Identifier) return Entity_Id;\n    --  Builds a new entity for Standard\n \n    procedure Print_Standard;\n@@ -1009,9 +1007,9 @@ package body CStand is\n       --  delta and size values depend on the mode set in system.ads.\n \n       Build_Duration : declare\n-         Dlo         : Uint;\n-         Dhi         : Uint;\n-         Delta_Val   : Ureal;\n+         Dlo       : Uint;\n+         Dhi       : Uint;\n+         Delta_Val : Ureal;\n \n       begin\n          --  In 32 bit mode, the size is 32 bits, and the delta and\n@@ -1031,18 +1029,16 @@ package body CStand is\n             Delta_Val := UR_From_Components (Uint_1, Uint_9, 10);\n          end if;\n \n-         Decl :=\n-           Make_Full_Type_Declaration (Stloc,\n-             Defining_Identifier => Standard_Duration,\n-             Type_Definition =>\n-               Make_Ordinary_Fixed_Point_Definition (Stloc,\n+         Tdef_Node := Make_Ordinary_Fixed_Point_Definition (Stloc,\n                  Delta_Expression => Make_Real_Literal (Stloc, Delta_Val),\n                  Real_Range_Specification =>\n                    Make_Real_Range_Specification (Stloc,\n                      Low_Bound  => Make_Real_Literal (Stloc,\n                        Realval => Dlo * Delta_Val),\n                      High_Bound => Make_Real_Literal (Stloc,\n-                       Realval => Dhi * Delta_Val))));\n+                       Realval => Dhi * Delta_Val)));\n+\n+         Set_Type_Definition (Parent (Standard_Duration), Tdef_Node);\n \n          Set_Ekind (Standard_Duration, E_Ordinary_Fixed_Point_Type);\n          Set_Etype (Standard_Duration, Standard_Duration);\n@@ -1058,7 +1054,7 @@ package body CStand is\n          Set_Small_Value    (Standard_Duration, Delta_Val);\n          Set_Scalar_Range   (Standard_Duration,\n                               Real_Range_Specification\n-                                (Type_Definition (Decl)));\n+                               (Type_Definition (Parent (Standard_Duration))));\n \n          --  Normally it does not matter that nodes in package Standard are\n          --  not marked as analyzed. The Scalar_Range of the fixed-point\n@@ -1325,8 +1321,7 @@ package body CStand is\n \n    function Make_Formal\n      (Typ         : Entity_Id;\n-      Formal_Name : String)\n-      return        Entity_Id\n+      Formal_Name : String) return Entity_Id\n    is\n       Formal : Entity_Id;\n \n@@ -1348,7 +1343,6 @@ package body CStand is\n \n    function Make_Integer (V : Uint) return Node_Id is\n       N : constant Node_Id := Make_Integer_Literal (Stloc, V);\n-\n    begin\n       Set_Is_Static_Expression (N);\n       return N;\n@@ -1398,8 +1392,7 @@ package body CStand is\n    -------------------------\n \n    function New_Standard_Entity\n-     (New_Node_Kind : Node_Kind := N_Defining_Identifier)\n-      return          Entity_Id\n+     (New_Node_Kind : Node_Kind := N_Defining_Identifier) return Entity_Id\n    is\n       E : constant Entity_Id := New_Entity (New_Node_Kind, Stloc);\n "}, {"sha": "9fef16b4f24357122f4836b33030f1ad8b051b06", "filename": "gcc/ada/s-crtl.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fs-crtl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fs-crtl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crtl.ads?ref=891a6e79d827ff208ff9509e3697fcb4192fc2b3", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                        GNAT RUN-TIME COMPONENTS                          --\n --                                                                          --\n---                         S Y S T E M . C R T L                            --\n+--                          S Y S T E M . C R T L                           --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n@@ -36,7 +36,7 @@\n \n with System.Parameters;\n package System.CRTL is\n-   pragma Pure (CRTL);\n+pragma Preelaborate (CRTL);\n \n    subtype chars is System.Address;\n    --  Pointer to null-terminated array of characters"}, {"sha": "93593cfaee04609ba92e48392fcdb9a9ebae9219", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=891a6e79d827ff208ff9509e3697fcb4192fc2b3", "patch": "@@ -7715,8 +7715,8 @@ package body Sem_Ch3 is\n          if not Error_Posted (S)\n            and then\n              (Nkind (S) /= N_Range\n-               or else Base_Type (T) /= Base_Type (Etype (Low_Bound (S)))\n-               or else Base_Type (T) /= Base_Type (Etype (High_Bound (S))))\n+               or else not Covers (T, (Etype (Low_Bound (S))))\n+               or else not Covers (T, (Etype (High_Bound (S)))))\n          then\n             if Base_Type (T) /= Any_Type\n               and then Etype (Low_Bound (S)) /= Any_Type"}, {"sha": "51971d135d35011589c7d81498b76f25fddd9f27", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a6e79d827ff208ff9509e3697fcb4192fc2b3/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=891a6e79d827ff208ff9509e3697fcb4192fc2b3", "patch": "@@ -6207,6 +6207,12 @@ package body Sem_Res is\n                Error_Msg_N (\"\\as Duration, and will lose precision?\", Rop);\n             end if;\n \n+         elsif Is_Numeric_Type (Typ)\n+           and then Nkind (Operand) in N_Op\n+           and then Unique_Fixed_Point_Type (N) /= Any_Type\n+         then\n+            Set_Etype (Operand, Standard_Duration);\n+\n          else\n             Error_Msg_N (\"invalid context for mixed mode operation\", N);\n             Set_Etype (Operand, Any_Type);"}]}