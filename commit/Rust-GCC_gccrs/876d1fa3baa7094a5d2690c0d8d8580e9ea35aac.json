{"sha": "876d1fa3baa7094a5d2690c0d8d8580e9ea35aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc2ZDFmYTNiYWE3MDk0YTVkMjY5MGMwZDhkODU4MGU5ZWEzNWFhYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1999-01-20T12:52:32Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-01-20T12:52:32Z"}, "message": "arm.md: Use MEM_COPY_ATTRIBUTES where appropriate throughout.\n\n\t* arm.md: Use MEM_COPY_ATTRIBUTES where appropriate throughout.\n\tPass MEM_SCALAR_P to arm_gen_store_multiple where appropriate.\n\nFrom-SVN: r24787", "tree": {"sha": "ecd91bdd9ae57c6b92707276ca6d0c662ff43111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecd91bdd9ae57c6b92707276ca6d0c662ff43111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/876d1fa3baa7094a5d2690c0d8d8580e9ea35aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876d1fa3baa7094a5d2690c0d8d8580e9ea35aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/876d1fa3baa7094a5d2690c0d8d8580e9ea35aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876d1fa3baa7094a5d2690c0d8d8580e9ea35aac/comments", "author": null, "committer": null, "parents": [{"sha": "d2551ee46710613062a5c03030c7f96dbc758af0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2551ee46710613062a5c03030c7f96dbc758af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2551ee46710613062a5c03030c7f96dbc758af0"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "1c51e75e761ed15d716fe7e14de0d8f2b9aab192", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876d1fa3baa7094a5d2690c0d8d8580e9ea35aac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876d1fa3baa7094a5d2690c0d8d8580e9ea35aac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=876d1fa3baa7094a5d2690c0d8d8580e9ea35aac", "patch": "@@ -1,3 +1,8 @@\n+Wed Jan 20 12:51:42 1999  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* arm.md: Use MEM_COPY_ATTRIBUTES where appropriate throughout.\n+\tPass MEM_SCALAR_P to arm_gen_store_multiple where appropriate.\n+\n Tue Jan 19 21:20:52 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* recog.c (pop_operand): New function."}, {"sha": "1b6fa73120be979f79fba8afc45d13e58fe6fd84", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876d1fa3baa7094a5d2690c0d8d8580e9ea35aac/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876d1fa3baa7094a5d2690c0d8d8580e9ea35aac/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=876d1fa3baa7094a5d2690c0d8d8580e9ea35aac", "patch": "@@ -2286,12 +2286,10 @@\n   rtx addr = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n \n   mem1 = gen_rtx (MEM, QImode, addr);\n-  MEM_VOLATILE_P (mem1) = MEM_VOLATILE_P (operands[1]);\n-  MEM_IN_STRUCT_P (mem1) = MEM_IN_STRUCT_P (operands[1]);\n+  MEM_COPY_ATTRIBUTES (mem1, operands[1]);\n   RTX_UNCHANGING_P (mem1) = RTX_UNCHANGING_P (operands[1]);\n   mem2 = gen_rtx (MEM, QImode, plus_constant (addr, 1));\n-  MEM_VOLATILE_P (mem2) = MEM_VOLATILE_P (operands[1]);\n-  MEM_IN_STRUCT_P (mem2) = MEM_IN_STRUCT_P (operands[1]);\n+  MEM_COPY_ATTRIBUTES (mem2, operands[1]);\n   RTX_UNCHANGING_P (mem2) = RTX_UNCHANGING_P (operands[1]);\n   operands[0] = gen_lowpart (SImode, operands[0]);\n   operands[1] = mem1;\n@@ -2400,8 +2398,7 @@\n \n     operands[3] = gen_rtx (REG, SImode, REGNO (operands[0]));\n     operands[2] = gen_rtx (MEM, QImode, operands[3]);\n-    MEM_VOLATILE_P (operands[2]) = MEM_VOLATILE_P (operands[1]);\n-    MEM_IN_STRUCT_P (operands[2]) = MEM_IN_STRUCT_P (operands[1]);\n+    MEM_COPY_ATTRIBUTES (operands[2], operands[1]);\n     RTX_UNCHANGING_P (operands[2]) = RTX_UNCHANGING_P (operands[1]);\n     operands[1] = XEXP (operands[1], 0);\n     if (GET_CODE (operands[1]) == PLUS\n@@ -2471,8 +2468,7 @@\n     HOST_WIDE_INT offset;\n \n     operands[2] = gen_rtx (MEM, QImode, operands[0]);\n-    MEM_VOLATILE_P (operands[2]) = MEM_VOLATILE_P (operands[1]);\n-    MEM_IN_STRUCT_P (operands[2]) = MEM_IN_STRUCT_P (operands[1]);\n+    MEM_COPY_ATTRIBUTES (operands[2], operands[1]);\n     RTX_UNCHANGING_P (operands[2]) = RTX_UNCHANGING_P (operands[1]);\n     operands[1] = XEXP (operands[1], 0);\n     if (GET_CODE (operands[1]) == PLUS\n@@ -2892,8 +2888,7 @@\n \n \t\t      new = gen_rtx (MEM, SImode,\n \t\t\t\t     plus_constant (base, new_offset));\n-\t\t      MEM_VOLATILE_P (new) = MEM_VOLATILE_P (operands[1]);\n-\t\t      MEM_IN_STRUCT_P (new) = MEM_IN_STRUCT_P (operands[1]);\n+\t              MEM_COPY_ATTRIBUTES (new, operands[1]);\n \t\t      RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n \t\t      emit_insn (gen_movsi (reg, new));\n \t\t      if (((INTVAL (offset) & 2) != 0)\n@@ -2929,16 +2924,14 @@\n \t\t\t  HOST_WIDE_INT new_offset = INTVAL (offset) ^ 2;\n \t\t\t  new = gen_rtx (MEM, SImode,\n \t\t\t\t\t plus_constant (base, new_offset));\n-\t\t\t  MEM_VOLATILE_P (new) = MEM_VOLATILE_P (operands[1]);\n-\t\t\t  MEM_IN_STRUCT_P (new) = MEM_IN_STRUCT_P (operands[1]);\n+                          MEM_COPY_ATTRIBUTES (new, operands[1]);\n \t\t\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n \t\t\t  emit_insn (gen_movsi (reg, new));\n \t\t\t}\n \t\t      else\n \t\t\t{\n \t\t\t  new = gen_rtx (MEM, SImode, XEXP (operands[1], 0));\n-\t\t\t  MEM_VOLATILE_P (new) = MEM_VOLATILE_P (operands[1]);\n-\t\t\t  MEM_IN_STRUCT_P (new) = MEM_IN_STRUCT_P (operands[1]);\n+\t                  MEM_COPY_ATTRIBUTES (new, operands[1]);\n \t\t\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n \t\t\t  emit_insn (gen_rotated_loadsi (reg, new));\n \t\t\t}\n@@ -3000,12 +2993,10 @@\n   rtx addr = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n \n   mem1 = gen_rtx (MEM, QImode, addr);\n-  MEM_VOLATILE_P (mem1) = MEM_VOLATILE_P (operands[1]);\n-  MEM_IN_STRUCT_P (mem1) = MEM_IN_STRUCT_P (operands[1]);\n+  MEM_COPY_ATTRIBUTES (mem1, operands[1]);\n   RTX_UNCHANGING_P (mem1) = RTX_UNCHANGING_P (operands[1]);\n   mem2 = gen_rtx (MEM, QImode, plus_constant (addr, 1));\n-  MEM_VOLATILE_P (mem2) = MEM_VOLATILE_P (operands[1]);\n-  MEM_IN_STRUCT_P (mem2) = MEM_IN_STRUCT_P (operands[1]);\n+  MEM_COPY_ATTRIBUTES (mem2, operands[1]);\n   RTX_UNCHANGING_P (mem2) = RTX_UNCHANGING_P (operands[1]);\n   operands[0] = gen_lowpart (SImode, operands[0]);\n   operands[1] = mem1;\n@@ -3347,7 +3338,8 @@\n     = arm_gen_load_multiple (REGNO (operands[0]), INTVAL (operands[2]),\n \t\t\t     force_reg (SImode, XEXP (operands[1], 0)),\n \t\t\t     TRUE, FALSE, RTX_UNCHANGING_P(operands[1]),\n-\t\t\t     MEM_IN_STRUCT_P(operands[1]));\n+\t\t\t     MEM_IN_STRUCT_P(operands[1]),\n+\t                     MEM_SCALAR_P (operands[1]));\n \")\n \n ;; Load multiple with write-back\n@@ -3417,7 +3409,8 @@\n     = arm_gen_store_multiple (REGNO (operands[1]), INTVAL (operands[2]),\n \t\t\t      force_reg (SImode, XEXP (operands[0], 0)),\n \t\t\t      TRUE, FALSE, RTX_UNCHANGING_P (operands[0]),\n-\t\t\t      MEM_IN_STRUCT_P(operands[0]));\n+\t\t\t      MEM_IN_STRUCT_P(operands[0]), \n+\t                      MEM_SCALAR_P (operands[0]));\n \")\n \n ;; Store multiple with write-back"}]}