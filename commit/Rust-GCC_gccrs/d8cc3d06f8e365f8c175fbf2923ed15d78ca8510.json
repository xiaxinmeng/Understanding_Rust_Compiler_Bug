{"sha": "d8cc3d06f8e365f8c175fbf2923ed15d78ca8510", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhjYzNkMDZmOGUzNjVmOGMxNzVmYmYyOTIzZWQxNWQ3OGNhODUxMA==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-11-25T10:03:46Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-11-25T10:03:46Z"}, "message": "Improve comment for struct symbolic_number in bswap pass\n\n2016-11-25  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * tree-ssa-math-opts.c (struct symbolic_number): Improve comment.\n\nFrom-SVN: r242870", "tree": {"sha": "835f5f5213a2d99a1b6f137d223f61dba6fb05fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/835f5f5213a2d99a1b6f137d223f61dba6fb05fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8cc3d06f8e365f8c175fbf2923ed15d78ca8510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8cc3d06f8e365f8c175fbf2923ed15d78ca8510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8cc3d06f8e365f8c175fbf2923ed15d78ca8510", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8cc3d06f8e365f8c175fbf2923ed15d78ca8510/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83624b6040aaf0039e65b3160fcbc1111def7260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83624b6040aaf0039e65b3160fcbc1111def7260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83624b6040aaf0039e65b3160fcbc1111def7260"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "d739a6696e94b2325994570485d46ed4e28d2b4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8cc3d06f8e365f8c175fbf2923ed15d78ca8510/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8cc3d06f8e365f8c175fbf2923ed15d78ca8510/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8cc3d06f8e365f8c175fbf2923ed15d78ca8510", "patch": "@@ -1,3 +1,7 @@\n+2016-11-25  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* tree-ssa-math-opts.c (struct symbolic_number): Improve comment.\n+\n 2016-11-25  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR tree-optimization/77673"}, {"sha": "4a47254d223e24caf1cd611f434a578729ba205d", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8cc3d06f8e365f8c175fbf2923ed15d78ca8510/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8cc3d06f8e365f8c175fbf2923ed15d78ca8510/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=d8cc3d06f8e365f8c175fbf2923ed15d78ca8510", "patch": "@@ -1931,25 +1931,32 @@ make_pass_cse_sincos (gcc::context *ctxt)\n   return new pass_cse_sincos (ctxt);\n }\n \n-/* A symbolic number is used to detect byte permutation and selection\n-   patterns.  Therefore the field N contains an artificial number\n-   consisting of octet sized markers:\n+/* A symbolic number structure is used to detect byte permutation and selection\n+   patterns of a source.  To achieve that, its field N contains an artificial\n+   number consisting of BITS_PER_MARKER sized markers tracking where does each\n+   byte come from in the source:\n \n-   0    - target byte has the value 0\n-   FF   - target byte has an unknown value (eg. due to sign extension)\n-   1..size - marker value is the target byte index minus one.\n+   0\t   - target byte has the value 0\n+   FF\t   - target byte has an unknown value (eg. due to sign extension)\n+   1..size - marker value is the byte index in the source (0 for lsb).\n \n    To detect permutations on memory sources (arrays and structures), a symbolic\n-   number is also associated a base address (the array or structure the load is\n-   made from), an offset from the base address and a range which gives the\n-   difference between the highest and lowest accessed memory location to make\n-   such a symbolic number. The range is thus different from size which reflects\n-   the size of the type of current expression. Note that for non memory source,\n-   range holds the same value as size.\n-\n-   For instance, for an array char a[], (short) a[0] | (short) a[3] would have\n-   a size of 2 but a range of 4 while (short) a[0] | ((short) a[0] << 1) would\n-   still have a size of 2 but this time a range of 1.  */\n+   number is also associated:\n+   - a base address BASE_ADDR and an OFFSET giving the address of the source;\n+   - a range which gives the difference between the highest and lowest accessed\n+     memory location to make such a symbolic number;\n+   - the address SRC of the source element of lowest address as a convenience\n+     to easily get BASE_ADDR + offset + lowest bytepos.\n+\n+   Note 1: the range is different from size as size reflects the size of the\n+   type of the current expression.  For instance, for an array char a[],\n+   (short) a[0] | (short) a[3] would have a size of 2 but a range of 4 while\n+   (short) a[0] | ((short) a[0] << 1) would still have a size of 2 but this\n+   time a range of 1.\n+\n+   Note 2: for non-memory sources, range holds the same value as size.\n+\n+   Note 3: SRC points to the SSA_NAME in case of non-memory source.  */\n \n struct symbolic_number {\n   uint64_t n;"}]}