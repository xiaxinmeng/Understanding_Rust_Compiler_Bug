{"sha": "0e03ef471e13c19498c64ac0ee4976f2ab5c03fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwM2VmNDcxZTEzYzE5NDk4YzY0YWMwZWU0OTc2ZjJhYjVjMDNmZQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-20T16:35:21Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-20T16:35:21Z"}, "message": "re PR c++/35158 (g++ does not compile valid C++ for loops with -fopenmp)\n\n2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c++/35158\ncp/   \n\t* parser.c (cp_parser_omp_for_loop): Handle parenthesized\n\tinitializers.\ntestsuite/\n\t* g++.dg/gomp/pr35158.C: New.\n\nFrom-SVN: r139335", "tree": {"sha": "58afc86766701f768d8e881b90e0dd5836a56f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58afc86766701f768d8e881b90e0dd5836a56f89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe/comments", "author": null, "committer": null, "parents": [{"sha": "9299a27c3adcdc53faae32b56015f8c009c94835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9299a27c3adcdc53faae32b56015f8c009c94835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9299a27c3adcdc53faae32b56015f8c009c94835"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "a8a212fa505f55c63a0bd53fbd3e69de6983c5ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e03ef471e13c19498c64ac0ee4976f2ab5c03fe", "patch": "@@ -1,3 +1,9 @@\n+2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/35158\n+\t* parser.c (cp_parser_omp_for_loop): Handle parenthesized\n+\tinitializers.\n+\n 2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* parser.c: Update all calls to inform."}, {"sha": "ccbecd760c191426aada4726770341b4b5755e79", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0e03ef471e13c19498c64ac0ee4976f2ab5c03fe", "patch": "@@ -20859,6 +20859,14 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n       this_pre_body = push_stmt_list ();\n       if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n \t{\n+\t  /* See 2.5.1 (in OpenMP 3.0, similar wording is in 2.5 standard too):\n+\n+\t     init-expr:\n+\t               var = lb\n+\t\t       integer-type var = lb\n+\t\t       random-access-iterator-type var = lb\n+\t\t       pointer-type var = lb\n+\t  */\n \t  cp_decl_specifier_seq type_specifiers;\n \n \t  /* First, try to parse as an initialized declaration.  See\n@@ -20867,8 +20875,10 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t  cp_parser_parse_tentatively (parser);\n \t  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n \t\t\t\t\t&type_specifiers);\n-\t  if (!cp_parser_error_occurred (parser))\n+\t  if (cp_parser_parse_definitely (parser))\n \t    {\n+\t      /* If parsing a type specifier seq succeeded, then this\n+\t\t MUST be a initialized declaration.  */\n \t      tree asm_specification, attributes;\n \t      cp_declarator *declarator;\n \n@@ -20880,9 +20890,10 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t      attributes = cp_parser_attributes_opt (parser);\n \t      asm_specification = cp_parser_asm_specification_opt (parser);\n \n-\t      if (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ))\n-\t\tcp_parser_require (parser, CPP_EQ, \"%<=%>\");\n-\t      if (cp_parser_parse_definitely (parser))\n+\t      if (declarator == cp_error_declarator) \n+\t\tcp_parser_skip_to_end_of_statement (parser);\n+\n+\t      else \n \t\t{\n \t\t  tree pushed_scope;\n \n@@ -20891,8 +20902,21 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t\t\t\t     /*prefix_attributes=*/NULL_TREE,\n \t\t\t\t     &pushed_scope);\n \n-\t\t  if (CLASS_TYPE_P (TREE_TYPE (decl))\n-\t\t      || type_dependent_expression_p (decl))\n+\t\t  if (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ))\n+\t\t    {\n+\t\t      if (cp_lexer_next_token_is (parser->lexer, \n+\t\t\t\t\t\t  CPP_OPEN_PAREN))\n+\t\t\terror (\"parenthesized initialization is not allowed in \"\n+\t\t\t       \"OpenMP %<for%> loop\");\n+\t\t      else\n+\t\t\t/* Trigger an error.  */\n+\t\t\tcp_parser_require (parser, CPP_EQ, \"%<=%>\");\n+\n+\t\t      init = error_mark_node;\n+\t\t      cp_parser_skip_to_end_of_statement (parser);\n+\t\t    }\n+\t\t  else if (CLASS_TYPE_P (TREE_TYPE (decl))\n+\t\t\t   || type_dependent_expression_p (decl))\n \t\t    {\n \t\t      bool is_direct_init, is_non_constant_init;\n \n@@ -20915,7 +20939,8 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      cp_parser_require (parser, CPP_EQ, \"%<=%>\");\n+\t\t      /* Consume '='.  */\n+\t\t      cp_lexer_consume_token (parser->lexer);\n \t\t      init = cp_parser_assignment_expression (parser, false);\n \n \t\t      if (TREE_CODE (TREE_TYPE (decl)) == REFERENCE_TYPE)\n@@ -20931,14 +20956,11 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t\t    pop_scope (pushed_scope);\n \t\t}\n \t    }\n-\t  else\n-\t    cp_parser_abort_tentative_parse (parser);\n-\n-\t  /* If parsing as an initialized declaration failed, try again as\n-\t     a simple expression.  */\n-\t  if (decl == NULL)\n+\t  else \n \t    {\n \t      cp_id_kind idk;\n+\t      /* If parsing a type specifier sequence failed, then\n+\t\t this MUST be a simple expression.  */\n \t      cp_parser_parse_tentatively (parser);\n \t      decl = cp_parser_primary_expression (parser, false, false,\n \t\t\t\t\t\t   false, &idk);"}, {"sha": "448279ef886e400b94f2be714b5b5c9426aa5c75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e03ef471e13c19498c64ac0ee4976f2ab5c03fe", "patch": "@@ -1,3 +1,8 @@\n+2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/35158\n+\t* g++.dg/gomp/pr35158.C: New.\n+\n 2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 35701"}, {"sha": "933eba1ab2c00359b7a4e1355202f39ce1fac6df", "filename": "gcc/testsuite/g++.dg/gomp/pr35158.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr35158.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e03ef471e13c19498c64ac0ee4976f2ab5c03fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr35158.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr35158.C?ref=0e03ef471e13c19498c64ac0ee4976f2ab5c03fe", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/35158\n+// { dg-do compile }\n+// { dg-options \"-fopenmp\" }\n+\n+int main(int argc, char *argv[])\n+{\n+#pragma omp parallel for\n+  for (int i(0) ; // { dg-error \"error: parenthesized initialization is not allowed in OpenMP 'for' loop\" }\n+       i < 10 ; \n+       i++) \n+    ;\n+  \n+  return 0;\n+}"}]}