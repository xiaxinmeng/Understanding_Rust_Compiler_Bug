{"sha": "a7771f7854f45f306657fd0d72833ee6a78c4afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc3NzFmNzg1NGY0NWYzMDY2NTdmZDBkNzI4MzNlZTZhNzhjNGFmYw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-01-21T01:11:01Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-01-21T01:11:01Z"}, "message": "(multcosts): Do not compute cost of constant power-of-two multiplies as if they were shifts.\n\n(multcosts): Do not compute cost of constant power-of-two\nmultiplies as if they were shifts.  Reduce multiply cost from 5 to 3.\nDelete variable insn_cost.\n\nFrom-SVN: r8777", "tree": {"sha": "164b67b8edf829cb8c82c74b4064e357cad2bfcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/164b67b8edf829cb8c82c74b4064e357cad2bfcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7771f7854f45f306657fd0d72833ee6a78c4afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7771f7854f45f306657fd0d72833ee6a78c4afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7771f7854f45f306657fd0d72833ee6a78c4afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7771f7854f45f306657fd0d72833ee6a78c4afc/comments", "author": null, "committer": null, "parents": [{"sha": "50d1b7a1166c5208498a8884229c8c3a08e3eb05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d1b7a1166c5208498a8884229c8c3a08e3eb05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50d1b7a1166c5208498a8884229c8c3a08e3eb05"}], "stats": {"total": 28, "additions": 5, "deletions": 23}, "files": [{"sha": "ce64a4e50a2400884391ae8ac9a743d1f712d4b1", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7771f7854f45f306657fd0d72833ee6a78c4afc/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7771f7854f45f306657fd0d72833ee6a78c4afc/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a7771f7854f45f306657fd0d72833ee6a78c4afc", "patch": "@@ -1537,38 +1537,20 @@ int\n multcosts (RTX)\n      rtx RTX;\n {\n-  /* If mult by a power of 2 then work out how we'd shift to make it */\n-  int insn_cost = 0;\n-\n-  if (GET_CODE (XEXP (RTX, 1)) == CONST_INT)\n-    {\n-      int i = exact_log2 (INTVAL (XEXP (RTX, 1)));\n-      if (i >= 0)\n-\tinsn_cost = howshift (i);\n-      else\n-\tinsn_cost = 100000;\n-    }\n   if (TARGET_SH2)\n     {\n       /* We have a mul insn, so we can never take more than the mul and the\n-\t read of the mac reg, but count more because of the latency and extra reg\n-\t usage */\n+\t read of the mac reg, but count more because of the latency and extra\n+\t reg usage */\n       if (TARGET_SMALLCODE)\n \treturn 2;\n-      if (insn_cost > 5)\n-\treturn 5;\n-      return insn_cost;\n+      return 3;\n     }\n \n-  /* If we we're aiming at small code, then just count the number of\n+  /* If we're aiming at small code, then just count the number of\n      insns in a multiply call sequence */\n-\n   if (TARGET_SMALLCODE)\n-    {\n-      if (insn_cost > 6)\n-\treturn 6;\n-      return insn_cost;\n-    }\n+    return 6;\n \n   /* Otherwise count all the insns in the routine we'd be calling too */\n   return 20;"}]}