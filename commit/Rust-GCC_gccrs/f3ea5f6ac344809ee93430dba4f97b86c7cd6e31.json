{"sha": "f3ea5f6ac344809ee93430dba4f97b86c7cd6e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNlYTVmNmFjMzQ0ODA5ZWU5MzQzMGRiYTRmOTdiODZjN2NkNmUzMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-28T20:01:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-28T20:01:29Z"}, "message": "flow.c (calculate_global_regs_live): Rename call_used to invalidated_by_call.\n\n        * flow.c (calculate_global_regs_live): Rename call_used to\n        invalidated_by_call.  Initialize from regs_invalidated_by_call\n        instead of call_used_regs.\n\nFrom-SVN: r53962", "tree": {"sha": "f81a67b2f508a443075b9281c82d3599b482e86f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f81a67b2f508a443075b9281c82d3599b482e86f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ea5f6ac344809ee93430dba4f97b86c7cd6e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ea5f6ac344809ee93430dba4f97b86c7cd6e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ea5f6ac344809ee93430dba4f97b86c7cd6e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ea5f6ac344809ee93430dba4f97b86c7cd6e31/comments", "author": null, "committer": null, "parents": [{"sha": "04653686e741179a07c4b61824684b919352a0e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04653686e741179a07c4b61824684b919352a0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04653686e741179a07c4b61824684b919352a0e1"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "6e0c9a4da9e76d190f0f5342dd681dd25d0dd809", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ea5f6ac344809ee93430dba4f97b86c7cd6e31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ea5f6ac344809ee93430dba4f97b86c7cd6e31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3ea5f6ac344809ee93430dba4f97b86c7cd6e31", "patch": "@@ -2,6 +2,10 @@\n \n \t* cfg.c (dump_flow_info): Print bb->index, not i, for block number.\n \n+\t* flow.c (calculate_global_regs_live): Rename call_used to\n+\tinvalidated_by_call.  Initialize from regs_invalidated_by_call\n+\tinstead of call_used_regs.\n+\n 2002-05-28  Zack Weinberg  <zack@codesourcery.com>\n \n \t* tree.h: Forward-declare struct realvaluetype."}, {"sha": "4f13e813759a6b912572e371665d74f9ed182755", "filename": "gcc/flow.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ea5f6ac344809ee93430dba4f97b86c7cd6e31/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ea5f6ac344809ee93430dba4f97b86c7cd6e31/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=f3ea5f6ac344809ee93430dba4f97b86c7cd6e31", "patch": "@@ -1065,8 +1065,8 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n      int flags;\n {\n   basic_block *queue, *qhead, *qtail, *qend, bb;\n-  regset tmp, new_live_at_end, call_used;\n-  regset_head tmp_head, call_used_head;\n+  regset tmp, new_live_at_end, invalidated_by_call;\n+  regset_head tmp_head, invalidated_by_call_head;\n   regset_head new_live_at_end_head;\n   int i;\n \n@@ -1080,12 +1080,12 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n \n   tmp = INITIALIZE_REG_SET (tmp_head);\n   new_live_at_end = INITIALIZE_REG_SET (new_live_at_end_head);\n-  call_used = INITIALIZE_REG_SET (call_used_head);\n+  invalidated_by_call = INITIALIZE_REG_SET (invalidated_by_call_head);\n \n   /* Inconveniently, this is only readily available in hard reg set form.  */\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; ++i)\n-    if (call_used_regs[i])\n-      SET_REGNO_REG_SET (call_used, i);\n+    if (TEST_HARD_REG_BIT (regs_invalidated_by_call, i))\n+      SET_REGNO_REG_SET (invalidated_by_call, i);\n \n   /* Create a worklist.  Allocate an extra slot for ENTRY_BLOCK, and one\n      because the `head == tail' style test for an empty queue doesn't\n@@ -1167,7 +1167,7 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n \t    if (e->flags & EDGE_EH)\n \t      {\n \t\tbitmap_operation (tmp, sb->global_live_at_start,\n-\t\t\t\t  call_used, BITMAP_AND_COMPL);\n+\t\t\t\t  invalidated_by_call, BITMAP_AND_COMPL);\n \t\tIOR_REG_SET (new_live_at_end, tmp);\n \t      }\n \t    else\n@@ -1335,7 +1335,7 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n \n   FREE_REG_SET (tmp);\n   FREE_REG_SET (new_live_at_end);\n-  FREE_REG_SET (call_used);\n+  FREE_REG_SET (invalidated_by_call);\n \n   if (blocks_out)\n     {"}]}