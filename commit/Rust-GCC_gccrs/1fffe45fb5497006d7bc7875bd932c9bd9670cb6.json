{"sha": "1fffe45fb5497006d7bc7875bd932c9bd9670cb6", "node_id": "C_kwDOANBUbNoAKDFmZmZlNDVmYjU0OTcwMDZkN2JjNzg3NWJkOTMyYzliZDk2NzBjYjY", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-02-01T12:10:19Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-09T11:50:09Z"}, "message": "Remove non-ANSI C path in ansidecl.h.\n\ninclude/ChangeLog:\n\n\t* ansidecl.h (PTR): Remove Not ANCI C part.", "tree": {"sha": "e898aeeda42798e9a25414996948f0f52c374e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e898aeeda42798e9a25414996948f0f52c374e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fffe45fb5497006d7bc7875bd932c9bd9670cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fffe45fb5497006d7bc7875bd932c9bd9670cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fffe45fb5497006d7bc7875bd932c9bd9670cb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fffe45fb5497006d7bc7875bd932c9bd9670cb6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faabc751d0bb7e7fe86abfe8991b0307d585874a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faabc751d0bb7e7fe86abfe8991b0307d585874a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faabc751d0bb7e7fe86abfe8991b0307d585874a"}], "stats": {"total": 17, "additions": 0, "deletions": 17}, "files": [{"sha": "efee5b6904b3593e36159cd4c09f6cb6e45b577e", "filename": "include/ansidecl.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fffe45fb5497006d7bc7875bd932c9bd9670cb6/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fffe45fb5497006d7bc7875bd932c9bd9670cb6/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=1fffe45fb5497006d7bc7875bd932c9bd9670cb6", "patch": "@@ -62,7 +62,6 @@ So instead we use the macro below and test it against specific values.  */\n #define GCC_VERSION (__GNUC__ * 1000 + __GNUC_MINOR__)\n #endif /* GCC_VERSION */\n \n-#if defined (__STDC__) || defined(__cplusplus) || defined (_AIX) || (defined (__mips) && defined (_SYSTYPE_SVR4)) || defined(_WIN32)\n /* All known AIX compilers implement these things (but don't always\n    define __STDC__).  The RISC/OS MIPS compiler defines these things\n    in SVR4 mode, but does not define __STDC__.  */\n@@ -89,22 +88,6 @@ So instead we use the macro below and test it against specific values.  */\n # endif\n #endif\n \n-#else\t/* Not ANSI C.  */\n-\n-#define PTR\t\tchar *\n-\n-/* some systems define these in header files for non-ansi mode */\n-#undef const\n-#undef volatile\n-#undef signed\n-#undef inline\n-#define const\n-#define volatile\n-#define signed\n-#define inline\n-\n-#endif\t/* ANSI C.  */\n-\n /* Define macros for some gcc attributes.  This permits us to use the\n    macros freely, and know that they will come into play for the\n    version of gcc in which they are supported.  */"}]}