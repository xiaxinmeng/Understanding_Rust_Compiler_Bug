{"sha": "d5c965374cd688b0a8ad0334c85c971c1e9c3f44", "node_id": "C_kwDOANBUbNoAKGQ1Yzk2NTM3NGNkNjg4YjBhOGFkMDMzNGM4NWM5NzFjMWU5YzNmNDQ", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-12-15T10:26:10Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-12-15T10:26:10Z"}, "message": "middle-end: REE should always check all vector usages, even if it finds a defining def. [PR103350]\n\nThis and the report in PR103632 are caused by a bug in REE where it generates\nincorrect code.\n\nIt's trying to eliminate the following zero extension\n\n(insn 54 90 102 2 (set (reg:V4SI 33 v1)\n        (zero_extend:V4SI (reg/v:V4HI 40 v8)))\n     (nil))\n\nby folding it in the definition of `v8`:\n\n(insn 2 5 104 2 (set (reg/v:V4HI 40 v8)\n        (reg:V4HI 32 v0 [156]))\n     (nil))\n\nwhich is fine, except that `v8` is also used by the extracts, e.g.:\n\n(insn 11 10 12 2 (set (reg:SI 1 x1)\n        (zero_extend:SI (vec_select:HI (reg/v:V4HI 40 v8)\n                (parallel [\n                        (const_int 3)\n                    ]))))\n     (nil))\n\nREE replaces insn 2 by folding insn 54 and placing it at the definition site of\ninsn 2, so before insn 11.\n\nTrying to eliminate extension:\n(insn 54 90 102 2 (set (reg:V4SI 33 v1)\n        (zero_extend:V4SI (reg/v:V4HI 40 v8)))\n     (nil))\nTentatively merged extension with definition (copy needed):\n(insn 2 5 104 2 (set (reg:V4SI 33 v1)\n        (zero_extend:V4SI (reg:V4HI 32 v0)))\n     (nil))\n\nto produce\n\n(insn 2 5 110 2 (set (reg:V4SI 33 v1)\n        (zero_extend:V4SI (reg:V4HI 32 v0)))\n     (nil))\n(insn 110 2 104 2 (set (reg:V4SI 40 v8)\n        (reg:V4SI 33 v1))\n     (nil))\n\nThe new insn 2 using v0 directly is correct, but the insn 110 it creates is\nwrong, `v8` should still be V4HI.\n\nor it also needs to eliminate the zero extension from the extracts, so instead\nof\n\n(insn 11 10 12 2 (set (reg:SI 1 x1)\n        (zero_extend:SI (vec_select:HI (reg/v:V4HI 40 v8)\n                (parallel [\n                        (const_int 3)\n                    ]))))\n     (nil))\n\nit should be\n\n(insn 11 10 12 2 (set (reg:SI 1 x1)\n        (vec_select:SI (reg/v:V4SI 40 v8)\n                (parallel [\n                        (const_int 3)\n                    ])))\n     (nil))\n\nwithout doing so the indices have been remapped in the extension and so we\nextract the wrong elements\n\nAt any other optimization level but -Os ree seems to abort so this doesn't\ntrigger:\n\nTrying to eliminate extension:\n(insn 54 90 101 2 (set (reg:V4SI 32 v0)\n        (zero_extend:V4SI (reg/v:V4HI 40 v8)))\n     (nil))\nElimination opportunities = 2 realized = 0\n\npurely due to the ordering of instructions. REE doesn't check uses of `v8`\nbecause it assumes that with a zero extended value, you still have access to the\nlower bits by using the the bottom part of the register.\n\nThis is true for scalar but not for vector.  This would have been fine as well\nif REE had eliminated the zero_extend on insn 11 and the rest but it doesn't do\nso since REE can only handle cases where the SRC value are REG_P.\n\nIt does try to do this in add_removable_extension:\n\n 1160      /* For vector mode extensions, ensure that all uses of the\n 1161         XEXP (src, 0) register are in insn or debug insns, as unlike\n 1162         integral extensions lowpart subreg of the sign/zero extended\n 1163         register are not equal to the original register, so we have\n 1164         to change all uses or none and the current code isn't able\n 1165         to change them all at once in one transaction.  */\n\nHowever this code doesn't trigger for the example because REE doesn't check the\nuses if the defining instruction doesn't feed into another extension..\n\nWhich is bogus. For vectors it should always check all usages.\n\nr12-2288-g8695bf78dad1a42636775843ca832a2f4dba4da3 simply exposed this as it now\nlowers VEC_SELECT 0 into the RTL canonical form subreg 0 which causes REE to run\nmore often.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/103350\n\t* ree.c (add_removable_extension): Don't stop at first definition but\n\tinspect all.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/103350\n\t* gcc.target/aarch64/pr103350-1.c: New test.\n\t* gcc.target/aarch64/pr103350-2.c: New test.", "tree": {"sha": "9c2d8fb5fa1914485b5989dc3e2814022c4b9e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c2d8fb5fa1914485b5989dc3e2814022c4b9e09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5c965374cd688b0a8ad0334c85c971c1e9c3f44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c965374cd688b0a8ad0334c85c971c1e9c3f44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c965374cd688b0a8ad0334c85c971c1e9c3f44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c965374cd688b0a8ad0334c85c971c1e9c3f44/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf5d9108ae2dcb6cb883442d7bd299fd8fc15e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf5d9108ae2dcb6cb883442d7bd299fd8fc15e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf5d9108ae2dcb6cb883442d7bd299fd8fc15e9"}], "stats": {"total": 136, "additions": 117, "deletions": 19}, "files": [{"sha": "13debe8a4af1e8abe666d88b6694163172894030", "filename": "gcc/ree.c", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c965374cd688b0a8ad0334c85c971c1e9c3f44/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c965374cd688b0a8ad0334c85c971c1e9c3f44/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=d5c965374cd688b0a8ad0334c85c971c1e9c3f44", "patch": "@@ -1165,31 +1165,28 @@ add_removable_extension (const_rtx expr, rtx_insn *insn,\n \t   to change them all at once in one transaction.  */\n \telse if (VECTOR_MODE_P (GET_MODE (XEXP (src, 0))))\n \t  {\n-\t    if (idx == 0)\n-\t      {\n-\t\tstruct df_link *ref_chain, *ref_link;\n+\t    struct df_link *ref_chain, *ref_link;\n \n-\t\tref_chain = DF_REF_CHAIN (def->ref);\n-\t\tfor (ref_link = ref_chain; ref_link; ref_link = ref_link->next)\n+\t    ref_chain = DF_REF_CHAIN (def->ref);\n+\t    for (ref_link = ref_chain; ref_link; ref_link = ref_link->next)\n+\t      {\n+\t\tif (ref_link->ref == NULL\n+\t\t    || DF_REF_INSN_INFO (ref_link->ref) == NULL)\n \t\t  {\n-\t\t    if (ref_link->ref == NULL\n-\t\t\t|| DF_REF_INSN_INFO (ref_link->ref) == NULL)\n-\t\t      {\n-\t\t\tidx = -1U;\n-\t\t\tbreak;\n-\t\t      }\n-\t\t    rtx_insn *use_insn = DF_REF_INSN (ref_link->ref);\n-\t\t    if (use_insn != insn && !DEBUG_INSN_P (use_insn))\n-\t\t      {\n-\t\t\tidx = -1U;\n-\t\t\tbreak;\n-\t\t      }\n+\t\t    idx = -1U;\n+\t\t    break;\n+\t\t  }\n+\t\trtx_insn *use_insn = DF_REF_INSN (ref_link->ref);\n+\t\tif (use_insn != insn && !DEBUG_INSN_P (use_insn))\n+\t\t  {\n+\t\t    idx = -1U;\n+\t\t    break;\n \t\t  }\n-\t\tif (idx == -1U)\n-\t\t  def_map[INSN_UID (DF_REF_INSN (def->ref))] = idx;\n \t      }\n+\n \t    if (idx == -1U)\n \t      {\n+\t\tdef_map[INSN_UID (DF_REF_INSN (def->ref))] = idx;\n \t\tif (dump_file)\n \t\t  {\n \t\t    fprintf (dump_file, \"Cannot eliminate extension:\\n\");"}, {"sha": "61c796dc6e8e3733a9446c89189135b83ecb4f3e", "filename": "gcc/testsuite/gcc.target/aarch64/pr103350-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c965374cd688b0a8ad0334c85c971c1e9c3f44/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103350-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c965374cd688b0a8ad0334c85c971c1e9c3f44/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103350-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103350-1.c?ref=d5c965374cd688b0a8ad0334c85c971c1e9c3f44", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-Os -fno-tree-ter -save-temps -fdump-rtl-ree-all -free -std=c99 -w\" } */\n+\n+typedef unsigned char u8;\n+typedef unsigned char __attribute__((__vector_size__ (8))) v64u8;\n+typedef unsigned char __attribute__((__vector_size__ (16))) v128u8;\n+typedef unsigned char __attribute__((__vector_size__ (32))) v256u8;\n+typedef unsigned short __attribute__((__vector_size__ (8))) v64u16;\n+typedef unsigned int __attribute__((__vector_size__ (16))) v128u32;\n+typedef unsigned long long u64;\n+typedef unsigned __int128 u128;\n+\n+v64u16 foo0_v32u16_0 = { 4, 5, 6, 7 };\n+u64 foo0_u64_0 = 0x30;\n+\n+__attribute__((__noipa__))\n+v64u8 foo0 (v64u16 v64u16_0, u128 u128_0)\n+{\n+  /* 03 00 05 00 03 00 02 00 ... */\n+  v256u8 v256u16_1 = (v256u8)__builtin_shufflevector (v64u16_0, foo0_v32u16_0,\n+\t\t\t     3, 5, 3, 2, 3, 5, 1, 0,\n+\t\t\t     3, 5, 3, 2, 2, 0, 2, 0);\n+  /* 00 00 00 00 01 00 00 00 ... */\n+  v128u8 v128u8_1 = (v128u8) __builtin_convertvector (v64u16_0, v128u32);\n+  /* 10 */\n+  u8 u8_1 = foo0_u64_0 % u128_0;\n+  /* 03 00 05 00 04 00 02 00 ... */\n+  v128u8 v128u8_r = ((union {v256u8 a; v128u8 b[2];}) v256u16_1).b[0] + v128u8_1;\n+  /* 00 00 01 00 02 00 03 00 */\n+  v64u8 v64u8_0 = (v64u8)v64u16_0;\n+  /* 03 00 06 00 06 00 05 00 */\n+  v64u8 v64u8_r = ((union {v128u8 a; v64u8 b[2];}) v128u8_r).b[0] + v64u8_0;\n+  /* 13 10 16 10 16 10 15 10 */\n+  return v64u8_r + u8_1;\n+}\n+\n+int\n+main (void)\n+{\n+  v64u8 x = foo0 ((v64u16){ 0, 1, 2, 3 }, 0x20);\n+  v64u8 exp = { 0x13, 0x10, 0x16, 0x10, 0x16, 0x10, 0x15, 0x10 };\n+  for (unsigned i = 0; i < sizeof(x); i++)\n+    if (x[i] != exp[i])\n+      __builtin_abort();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-rtl-dump {because some vector uses aren't extension} ree } } */"}, {"sha": "2696212710b9da1c065cd26d26dd9f09719cf9e9", "filename": "gcc/testsuite/gcc.target/aarch64/pr103350-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c965374cd688b0a8ad0334c85c971c1e9c3f44/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103350-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c965374cd688b0a8ad0334c85c971c1e9c3f44/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103350-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103350-2.c?ref=d5c965374cd688b0a8ad0334c85c971c1e9c3f44", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O2 -save-temps -fdump-rtl-ree-all -free -std=c99 -w\" } */\n+\n+typedef unsigned char __attribute__((__vector_size__ (8))) v64u8;\n+typedef unsigned char __attribute__((__vector_size__ (16))) v128u8;\n+typedef unsigned short __attribute__((__vector_size__ (8))) v64u16;\n+typedef unsigned short __attribute__((__vector_size__ (64))) v512u16;\n+typedef unsigned int __attribute__((__vector_size__ (16))) v128u32;\n+typedef unsigned long long u64;\n+typedef unsigned long long __attribute__((__vector_size__ (8))) v64u64;\n+typedef unsigned long long __attribute__((__vector_size__ (16))) v128u64;\n+typedef unsigned __int128 u128;\n+typedef unsigned __int128 __attribute__((__vector_size__ (64))) v512u128;\n+v512u16 foo0_v512u16_0;\n+u64 foo0_u64_0;\n+u64 foo0_u16_0;\n+\n+void\n+foo0 (v64u16 v64u16_0, v64u64 v64u64_0, u128 u128_0, v64u8 * ret)\n+{\n+  /* { 0, 4, 0, 0 } */\n+  v128u32 v128u32_2 = __builtin_convertvector (v64u16_0, v128u32);\n+  /* 0 */\n+  foo0_u16_0 ^= foo0_u64_0 % u128_0;\n+  /* { 0, ... } */\n+  foo0_v512u16_0 *=\n+    __builtin_shufflevector (v64u16_0, v64u16_0, 7, 7, 2, 1, 0, 0, 3, 6, 2, 3,\n+\t\t\t     1, 0, 7, 5, 6, 7, 4, 3, 2, 3, 0, 6, 1, 2, 3, 3,\n+\t\t\t     6, 7, 6, 2, 4, 3);\n+  /* { 0, 0, 0, 0, 4, 0, ... } */\n+  v128u8 v128u8_r = (v128u8) ((v512u128) foo0_v512u16_0)[0] +\n+    (v128u8) v128u32_2;\n+  /* { 0, 0, 4, 0, 4, 0, 0, 0 } */\n+  v64u8 v64u8_r = (v64u8) ((v128u64) v128u8_r)[0] +\n+    (v64u8) v64u16_0 + (v64u8) v64u64_0;\n+  *ret = v64u8_r;\n+}\n+\n+int\n+main (void)\n+{\n+  v64u8 x, exp = (v64u8){ 0, 0, 4, 0, 4, 0, 0, 0 };\n+  foo0 ((v64u16){0, 4}, (v64u64){}, 5, &x);\n+  /*\n+  for (unsigned i = 0; i < sizeof (x); i++)\n+    __builtin_printf (\"%02x\", x[i]);\n+  */\n+  for (unsigned i = 0; i < sizeof (x); i++)\n+    if (x[i] != exp[i]) __builtin_abort();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-rtl-dump {because some vector uses aren't extension} ree } } */"}]}