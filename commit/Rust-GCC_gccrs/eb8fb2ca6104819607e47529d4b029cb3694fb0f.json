{"sha": "eb8fb2ca6104819607e47529d4b029cb3694fb0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI4ZmIyY2E2MTA0ODE5NjA3ZTQ3NTI5ZDRiMDI5Y2IzNjk0ZmIwZg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-09-02T11:21:09Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-09-02T11:21:09Z"}, "message": "rs6000.md (any_extend): New code iterator.\n\n2014-09-02  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/rs6000.md (any_extend): New code iterator.\n\t(u, su): New code attributes.\n\t(dmode, DMODE): New mode attributes.\n\t(<su>mul<mode>3_highpart): New.\n\t(*<su>mul<mode>3_highpart): New.\n\t(<su>mulsi3_highpart_le): New.\n\t(<su>muldi3_highpart_le): New.\n\t(<su>mulsi3_highpart_64): New.\n\t(<u>mul<mode><dmode>3): New.\n\t(mulsidi3, umulsidi3, smulsi3_highpart, umulsi3_highpart, and two\n\tsplitters): Delete.\n\t(mulditi3, umulditi3, smuldi3_highpart, umuldi3_highpart, and two\n\tsplitters): Delete.\n\nFrom-SVN: r214814", "tree": {"sha": "5c9a610a642983728f744f8c26bad780eea7c800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c9a610a642983728f744f8c26bad780eea7c800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb8fb2ca6104819607e47529d4b029cb3694fb0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8fb2ca6104819607e47529d4b029cb3694fb0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb8fb2ca6104819607e47529d4b029cb3694fb0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8fb2ca6104819607e47529d4b029cb3694fb0f/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "040a2b4319625bb1ff94f2f42302beb552a94a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040a2b4319625bb1ff94f2f42302beb552a94a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040a2b4319625bb1ff94f2f42302beb552a94a00"}], "stats": {"total": 263, "additions": 119, "deletions": 144}, "files": [{"sha": "79fb3f84aa5f53b779b9c6cef56be471188ae9a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8fb2ca6104819607e47529d4b029cb3694fb0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8fb2ca6104819607e47529d4b029cb3694fb0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb8fb2ca6104819607e47529d4b029cb3694fb0f", "patch": "@@ -1,3 +1,19 @@\n+2014-09-02  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (any_extend): New code iterator.\n+\t(u, su): New code attributes.\n+\t(dmode, DMODE): New mode attributes.\n+\t(<su>mul<mode>3_highpart): New.\n+\t(*<su>mul<mode>3_highpart): New.\n+\t(<su>mulsi3_highpart_le): New.\n+\t(<su>muldi3_highpart_le): New.\n+\t(<su>mulsi3_highpart_64): New.\n+\t(<u>mul<mode><dmode>3): New.\n+\t(mulsidi3, umulsidi3, smulsi3_highpart, umulsi3_highpart, and two\n+\tsplitters): Delete.\n+\t(mulditi3, umulditi3, smuldi3_highpart, umuldi3_highpart, and two\n+\tsplitters): Delete.\n+\n 2014-09-02  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (mulsi3, *mulsi3_internal1,"}, {"sha": "f9e1ebaa2d76d68de5650b09c92266ffcae92db2", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 103, "deletions": 144, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8fb2ca6104819607e47529d4b029cb3694fb0f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8fb2ca6104819607e47529d4b029cb3694fb0f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=eb8fb2ca6104819607e47529d4b029cb3694fb0f", "patch": "@@ -431,6 +431,11 @@\n \t\t\t       (simple_return \"1\")])\n (define_code_attr return_str [(return \"\") (simple_return \"simple_\")])\n \n+; Signed/unsigned variants of ops.\n+(define_code_iterator any_extend [sign_extend zero_extend])\n+(define_code_attr u [(sign_extend \"\") (zero_extend \"u\")])\n+(define_code_attr su [(sign_extend \"s\") (zero_extend \"u\")])\n+\n ; Various instructions that come in SI and DI forms.\n ; A generic w/d attribute, for things like cmpw/cmpd.\n (define_mode_attr wd [(QI    \"b\")\n@@ -454,6 +459,10 @@\n ;; Bitmask for shift instructions\n (define_mode_attr hH [(SI \"h\") (DI \"H\")])\n \n+;; A mode twice the size of the given mode\n+(define_mode_attr dmode [(SI \"di\") (DI \"ti\")])\n+(define_mode_attr DMODE [(SI \"DI\") (DI \"TI\")])\n+\n ;; Suffix for reload patterns\n (define_mode_attr ptrsize [(SI \"32bit\")\n \t\t\t   (DI \"64bit\")])\n@@ -2767,6 +2776,100 @@\n    (set_attr \"length\" \"4,8\")])\n \n \n+(define_expand \"<su>mul<mode>3_highpart\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t(subreg:GPR\n+\t  (mult:<DMODE> (any_extend:<DMODE>\n+\t\t\t  (match_operand:GPR 1 \"gpc_reg_operand\"))\n+\t\t\t(any_extend:<DMODE>\n+\t\t\t  (match_operand:GPR 2 \"gpc_reg_operand\")))\n+\t 0))]\n+  \"\"\n+{\n+  if (<MODE>mode == SImode && TARGET_POWERPC64)\n+    {\n+      emit_insn (gen_<su>mulsi3_highpart_64 (operands[0], operands[1],\n+\t\t\t\t\t     operands[2]));\n+      DONE;\n+    }\n+\n+  if (!WORDS_BIG_ENDIAN)\n+    {\n+      emit_insn (gen_<su>mul<mode>3_highpart_le (operands[0], operands[1],\n+\t\t\t\t\t\t operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*<su>mul<mode>3_highpart\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(subreg:GPR\n+\t  (mult:<DMODE> (any_extend:<DMODE>\n+\t\t\t  (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))\n+\t\t\t(any_extend:<DMODE>\n+\t\t\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))\n+\t 0))]\n+  \"WORDS_BIG_ENDIAN && !(<MODE>mode == SImode && TARGET_POWERPC64)\"\n+  \"mulh<wd><u> %0,%1,%2\"\n+  [(set_attr \"type\" \"mul\")\n+   (set_attr \"size\" \"<bits>\")])\n+\n+(define_insn \"<su>mulsi3_highpart_le\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(subreg:SI\n+\t  (mult:DI (any_extend:DI\n+\t\t     (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t   (any_extend:DI\n+\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+\t 4))]\n+  \"!WORDS_BIG_ENDIAN && !TARGET_POWERPC64\"\n+  \"mulhw<u> %0,%1,%2\"\n+  [(set_attr \"type\" \"mul\")])\n+\n+(define_insn \"<su>muldi3_highpart_le\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(subreg:DI\n+\t  (mult:TI (any_extend:TI\n+\t\t     (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t   (any_extend:TI\n+\t\t     (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n+\t 8))]\n+  \"!WORDS_BIG_ENDIAN && TARGET_POWERPC64\"\n+  \"mulhd<u> %0,%1,%2\"\n+  [(set_attr \"type\" \"mul\")\n+   (set_attr \"size\" \"64\")])\n+\n+(define_insn \"<su>mulsi3_highpart_64\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(truncate:SI\n+\t  (lshiftrt:DI\n+\t    (mult:DI (any_extend:DI\n+\t\t       (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t     (any_extend:DI\n+\t\t       (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+\t    (const_int 32))))]\n+  \"TARGET_POWERPC64\"\n+  \"mulhw<u> %0,%1,%2\"\n+  [(set_attr \"type\" \"mul\")])\n+\n+(define_expand \"<u>mul<mode><dmode>3\"\n+  [(set (match_operand:<DMODE> 0 \"gpc_reg_operand\")\n+\t(mult:<DMODE> (any_extend:<DMODE>\n+\t\t\t(match_operand:GPR 1 \"gpc_reg_operand\"))\n+\t\t      (any_extend:<DMODE>\n+\t\t\t(match_operand:GPR 2 \"gpc_reg_operand\"))))]\n+  \"!(<MODE>mode == SImode && TARGET_POWERPC64)\"\n+{\n+  rtx l = gen_reg_rtx (<MODE>mode);\n+  rtx h = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_mul<mode>3 (l, operands[1], operands[2]));\n+  emit_insn (gen_<su>mul<mode>3_highpart (h, operands[1], operands[2]));\n+  emit_move_insn (gen_lowpart (<MODE>mode, operands[0]), l);\n+  emit_move_insn (gen_highpart (<MODE>mode, operands[0]), h);\n+  DONE;\n+})\n+\n+\n (define_insn \"udiv<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n         (udiv:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n@@ -6622,96 +6725,6 @@\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"mulsidi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"! TARGET_POWERPC64\"\n-{\n-  return (WORDS_BIG_ENDIAN)\n-    ? \\\"mulhw %0,%1,%2\\;mullw %L0,%1,%2\\\"\n-    : \\\"mulhw %L0,%1,%2\\;mullw %0,%1,%2\\\";\n-}\n-  [(set_attr \"type\" \"mul\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 3)\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n-\t\t\t       (sign_extend:DI (match_dup 2)))\n-\t\t      (const_int 32))))\n-   (set (match_dup 4)\n-\t(mult:SI (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"\n-{\n-  int endian = (WORDS_BIG_ENDIAN == 0);\n-  operands[3] = operand_subword (operands[0], endian, 0, DImode);\n-  operands[4] = operand_subword (operands[0], 1 - endian, 0, DImode);\n-}\")\n-\n-(define_insn \"umulsidi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"! TARGET_POWERPC64\"\n-  \"*\n-{\n-  return (WORDS_BIG_ENDIAN)\n-    ? \\\"mulhwu %0,%1,%2\\;mullw %L0,%1,%2\\\"\n-    : \\\"mulhwu %L0,%1,%2\\;mullw %0,%1,%2\\\";\n-}\"\n-  [(set_attr \"type\" \"mul\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 3)\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n-\t\t\t       (zero_extend:DI (match_dup 2)))\n-\t\t      (const_int 32))))\n-   (set (match_dup 4)\n-\t(mult:SI (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"\n-{\n-  int endian = (WORDS_BIG_ENDIAN == 0);\n-  operands[3] = operand_subword (operands[0], endian, 0, DImode);\n-  operands[4] = operand_subword (operands[0], 1 - endian, 0, DImode);\n-}\")\n-\n-(define_insn \"smulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI\n-\t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t       (sign_extend:DI\n-\t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n-\t\t      (const_int 32))))]\n-  \"\"\n-  \"mulhw %0,%1,%2\"\n-  [(set_attr \"type\" \"mul\")])\n-\n-(define_insn \"umulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI\n-\t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t       (zero_extend:DI\n-\t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n-\t\t      (const_int 32))))]\n-  \"\"\n-  \"mulhwu %0,%1,%2\"\n-  [(set_attr \"type\" \"mul\")])\n \n ;; Shift by a variable amount is too complex to be worth open-coding.  We\n ;; just handle shifts by constants.\n@@ -6758,60 +6771,6 @@\n \f\n ;; PowerPC64 DImode operations.\n \n-(define_insn \"smuldi3_highpart\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(truncate:DI\n-\t (lshiftrt:TI (mult:TI (sign_extend:TI\n-\t\t\t\t(match_operand:DI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t       (sign_extend:TI\n-\t\t\t\t(match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n-\t\t      (const_int 64))))]\n-  \"TARGET_POWERPC64\"\n-  \"mulhd %0,%1,%2\"\n-  [(set_attr \"type\" \"mul\")\n-   (set_attr \"size\" \"64\")])\n-\n-(define_insn \"umuldi3_highpart\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(truncate:DI\n-\t (lshiftrt:TI (mult:TI (zero_extend:TI\n-\t\t\t\t(match_operand:DI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t       (zero_extend:TI\n-\t\t\t\t(match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n-\t\t      (const_int 64))))]\n-  \"TARGET_POWERPC64\"\n-  \"mulhdu %0,%1,%2\"\n-  [(set_attr \"type\" \"mul\")\n-   (set_attr \"size\" \"64\")])\n-\n-(define_expand \"mulditi3\"\n-  [(set (match_operand:TI 0 \"gpc_reg_operand\")\n-\t(mult:TI (sign_extend:TI (match_operand:DI 1 \"gpc_reg_operand\"))\n-\t\t (sign_extend:TI (match_operand:DI 2 \"gpc_reg_operand\"))))]\n-  \"TARGET_POWERPC64\"\n-{\n-  rtx l = gen_reg_rtx (DImode), h = gen_reg_rtx (DImode);\n-  emit_insn (gen_muldi3 (l, operands[1], operands[2]));\n-  emit_insn (gen_smuldi3_highpart (h, operands[1], operands[2]));\n-  emit_move_insn (gen_lowpart (DImode, operands[0]), l);\n-  emit_move_insn (gen_highpart (DImode, operands[0]), h);\n-  DONE;\n-})\n-\n-(define_expand \"umulditi3\"\n-  [(set (match_operand:TI 0 \"gpc_reg_operand\")\n-\t(mult:TI (zero_extend:TI (match_operand:DI 1 \"gpc_reg_operand\"))\n-\t\t (zero_extend:TI (match_operand:DI 2 \"gpc_reg_operand\"))))]\n-  \"TARGET_POWERPC64\"\n-{\n-  rtx l = gen_reg_rtx (DImode), h = gen_reg_rtx (DImode);\n-  emit_insn (gen_muldi3 (l, operands[1], operands[2]));\n-  emit_insn (gen_umuldi3_highpart (h, operands[1], operands[2]));\n-  emit_move_insn (gen_lowpart (DImode, operands[0]), l);\n-  emit_move_insn (gen_highpart (DImode, operands[0]), h);\n-  DONE;\n-})\n-\n (define_insn \"*rotldi3_internal4\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:DI (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")"}]}