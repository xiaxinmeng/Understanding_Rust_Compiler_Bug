{"sha": "bfab40f8e5c12b8fd32dfd55a7437528def52f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZhYjQwZjhlNWMxMmI4ZmQzMmRmZDU1YTc0Mzc1MjhkZWY1MmYzZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-05-30T07:35:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-05-30T07:35:17Z"}, "message": "* fold-const.c (fold_unary) <CASE_CONVERT>: Add ??? comment.\n\nFrom-SVN: r136200", "tree": {"sha": "1d2ca1392e19a2d70a4160fda30ef8490a0da0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d2ca1392e19a2d70a4160fda30ef8490a0da0ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfab40f8e5c12b8fd32dfd55a7437528def52f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfab40f8e5c12b8fd32dfd55a7437528def52f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfab40f8e5c12b8fd32dfd55a7437528def52f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfab40f8e5c12b8fd32dfd55a7437528def52f3e/comments", "author": null, "committer": null, "parents": [{"sha": "c100de59ebf2f118ce0757c475b078b6f62d4017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c100de59ebf2f118ce0757c475b078b6f62d4017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c100de59ebf2f118ce0757c475b078b6f62d4017"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "82d24789424a46437cc15fcbc009890541d93a1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab40f8e5c12b8fd32dfd55a7437528def52f3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab40f8e5c12b8fd32dfd55a7437528def52f3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfab40f8e5c12b8fd32dfd55a7437528def52f3e", "patch": "@@ -1,3 +1,7 @@\n+2008-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fold-const.c (fold_unary) <CASE_CONVERT>: Add ??? comment.\n+\n 2008-05-30  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* incpath.c: Use HOST_LACKS_INODE_NUMBERS conditional"}, {"sha": "4a9d55ff238cc55a2c40fa12b21000ab02773037", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab40f8e5c12b8fd32dfd55a7437528def52f3e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab40f8e5c12b8fd32dfd55a7437528def52f3e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=bfab40f8e5c12b8fd32dfd55a7437528def52f3e", "patch": "@@ -7866,7 +7866,10 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \n       /* Convert (T)(x & c) into (T)x & (T)c, if c is an integer\n \t constants (if x has signed type, the sign bit cannot be set\n-\t in c).  This folds extension into the BIT_AND_EXPR.  */\n+\t in c).  This folds extension into the BIT_AND_EXPR.\n+\t ??? We don't do it for BOOLEAN_TYPE or ENUMERAL_TYPE because they\n+\t very likely don't have maximal range for their precision and this\n+\t transformation effectively doesn't preserve non-maximal ranges.  */\n       if (TREE_CODE (type) == INTEGER_TYPE\n \t  && TREE_CODE (op0) == BIT_AND_EXPR\n \t  && TREE_CODE (TREE_OPERAND (op0, 1)) == INTEGER_CST)"}]}