{"sha": "2673bae9d22a343c2df4cb635b818956b95ff1cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3M2JhZTlkMjJhMzQzYzJkZjRjYjYzNWI4MTg5NTZiOTVmZjFjZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-05-16T13:37:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-05-16T13:37:52Z"}, "message": "Implement std::experimental::source_location (N4519)\n\n\t* configure: Regenerate.\n\t* doc/xml/manual/status_cxx2017.xml: Update status table.\n\t* doc/html/*: Regenerate.\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/experimental/source_location: New header implementing N4519.\n\t* testsuite/experimental/source_location/1.cc: New test.\n\nFrom-SVN: r248110", "tree": {"sha": "03a60b4ca33d9a963f044403796a0817a8882b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03a60b4ca33d9a963f044403796a0817a8882b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2673bae9d22a343c2df4cb635b818956b95ff1cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2673bae9d22a343c2df4cb635b818956b95ff1cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2673bae9d22a343c2df4cb635b818956b95ff1cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2673bae9d22a343c2df4cb635b818956b95ff1cf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "423624979a496c1e2755f538b1cf54736a0f449e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423624979a496c1e2755f538b1cf54736a0f449e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/423624979a496c1e2755f538b1cf54736a0f449e"}], "stats": {"total": 220, "additions": 216, "deletions": 4}, "files": [{"sha": "5cc498b6cb7a4b0fbeb3762ba2587fa0c9586753", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2673bae9d22a343c2df4cb635b818956b95ff1cf", "patch": "@@ -1,5 +1,13 @@\n 2017-05-16  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* configure: Regenerate.\n+\t* doc/xml/manual/status_cxx2017.xml: Update status table.\n+\t* doc/html/*: Regenerate.\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/experimental/source_location: New header implementing N4519.\n+\t* testsuite/experimental/source_location/1.cc: New test.\n+\n \tPR libstdc++/80285\n \t* include/bits/shared_ptr_base.h [!__cpp_rtti] (type_info): Declare\n \toutside versioned namespace."}, {"sha": "c3b6201462aeb6f530de607f753eef67ee55a12b", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=2673bae9d22a343c2df4cb635b818956b95ff1cf", "patch": "@@ -824,11 +824,11 @@\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4502.pdf\" target=\"_top\">\n \t  N4502\n \t</a>\n-      </td><td align=\"left\"> Support for the C++ Detection Idiom, V2 </td><td align=\"left\">Y</td><td align=\"left\">Library Fundamentals 2 TS</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">\n+      </td><td align=\"left\"> Support for the C++ Detection Idiom, V2 </td><td align=\"left\">Y</td><td align=\"left\">Library Fundamentals 2 TS</td></tr><tr><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4519.pdf\" target=\"_top\">\n \t  N4519\n \t</a>\n-      </td><td align=\"left\"> Source-Code Information Capture </td><td align=\"left\">N</td><td align=\"left\">Library Fundamentals 2 TS</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">\n+      </td><td align=\"left\"> Source-Code Information Capture </td><td align=\"left\">Y</td><td align=\"left\">Library Fundamentals 2 TS</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4521.html\" target=\"_top\">\n \t  N4521\n \t</a>"}, {"sha": "a20823800433366e2846c8dac373a5d033886792", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=2673bae9d22a343c2df4cb635b818956b95ff1cf", "patch": "@@ -878,14 +878,13 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4519.pdf\">\n \t  N4519\n \t</link>\n       </entry>\n       <entry> Source-Code Information Capture </entry>\n-      <entry>N</entry>\n+      <entry>Y</entry>\n       <entry>Library Fundamentals 2 TS</entry>\n     </row>\n "}, {"sha": "a65173658271bb67d85bc4ae79caca04164dd820", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=2673bae9d22a343c2df4cb635b818956b95ff1cf", "patch": "@@ -679,6 +679,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/ratio \\\n \t${experimental_srcdir}/regex \\\n \t${experimental_srcdir}/set \\\n+\t${experimental_srcdir}/source_location \\\n \t${experimental_srcdir}/string \\\n \t${experimental_srcdir}/string_view \\\n \t${experimental_srcdir}/system_error \\"}, {"sha": "783c647087fb5b2c049d336e94ecf15f622afe94", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=2673bae9d22a343c2df4cb635b818956b95ff1cf", "patch": "@@ -971,6 +971,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/ratio \\\n \t${experimental_srcdir}/regex \\\n \t${experimental_srcdir}/set \\\n+\t${experimental_srcdir}/source_location \\\n \t${experimental_srcdir}/string \\\n \t${experimental_srcdir}/string_view \\\n \t${experimental_srcdir}/system_error \\"}, {"sha": "b06d8b651ae29b305da308de9f86063c14e1e67d", "filename": "libstdc++-v3/include/experimental/source_location", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsource_location", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsource_location", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsource_location?ref=2673bae9d22a343c2df4cb635b818956b95ff1cf", "patch": "@@ -0,0 +1,86 @@\n+// <experimental/source_location> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/source_location\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_SRCLOC\n+#define _GLIBCXX_EXPERIMENTAL_SRCLOC 1\n+\n+#include <cstdint>\n+\n+namespace std {\n+namespace experimental {\n+inline namespace fundamentals_v2 {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+#define __cpp_lib_experimental_source_location 201505\n+\n+  struct source_location\n+  {\n+#ifndef _GLIBCXX_USE_C99_STDINT_TR1\n+  private:\n+    using uint_least32_t = unsigned;\n+  public:\n+#endif\n+\n+    // 14.1.2, source_location creation\n+    static constexpr source_location\n+    current(const char* __file = __builtin_FILE(),\n+\t    const char* __func = __builtin_FUNCTION(),\n+\t    int __line = __builtin_LINE(),\n+\t    int __col = 0) noexcept\n+    {\n+      source_location __loc;\n+      __loc._M_file = __file;\n+      __loc._M_func = __func;\n+      __loc._M_line = __line;\n+      __loc._M_col = __col;\n+      return __loc;\n+    }\n+\n+    constexpr source_location() noexcept\n+    : _M_file(\"unknown\"), _M_func(_M_file), _M_line(0), _M_col(0)\n+    { }\n+\n+    // 14.1.3, source_location field access\n+    constexpr uint_least32_t line() const noexcept { return _M_line; }\n+    constexpr uint_least32_t column() const noexcept { return _M_col; }\n+    constexpr const char* file_name() const noexcept { return _M_file; }\n+    constexpr const char* function_name() const noexcept { return _M_func; }\n+\n+  private:\n+    const char* _M_file;\n+    const char* _M_func;\n+    uint_least32_t _M_line;\n+    uint_least32_t _M_col;\n+  };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif"}, {"sha": "2634ab465a1889106b87888196ad80dad80f4c3f", "filename": "libstdc++-v3/testsuite/experimental/source_location/1.cc", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsource_location%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2673bae9d22a343c2df4cb635b818956b95ff1cf/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsource_location%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsource_location%2F1.cc?ref=2673bae9d22a343c2df4cb635b818956b95ff1cf", "patch": "@@ -0,0 +1,117 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++14 } }\n+\n+#include <experimental/source_location>\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::source_location;\n+using std::experimental::string_view;\n+\n+void\n+test01()\n+{\n+  constexpr source_location loc = source_location::current();\n+  static_assert( loc.line() == 30 );\n+  // static_assert( loc.column() == 35 );\n+  VERIFY( loc.file_name() == __FILE__ );\n+  VERIFY( loc.function_name() == string_view(__FUNCTION__) );\n+}\n+\n+struct S {\n+  string_view func;\n+  source_location loc = source_location::current();\n+\n+  S(source_location loc = source_location::current())\n+  : func(__FUNCTION__), loc(loc) // values of loc will be from call-site\n+  {}\n+\n+  S(int)\n+  : func(__FUNCTION__) // values of loc should be hereabouts\n+  {}\n+};\n+\n+void test02()\n+{\n+  S s0;\n+  VERIFY( s0.loc.line() == 52 );\n+  // static_assert( s0.loc.column() == 7 );\n+  VERIFY( s0.loc.file_name() == __FILE__ );\n+  VERIFY( s0.loc.function_name() == string_view(__FUNCTION__) );\n+\n+  S s1(1);\n+  VERIFY( s1.loc.line() != 58 );\n+  VERIFY( s1.loc.file_name() == __FILE__ );\n+  // VERIFY( s1.loc.function_name() == s1.func );\n+}\n+\n+source_location f(source_location a = source_location::current()) {\n+  return a;\n+}\n+\n+source_location g(string_view& func) {\n+  source_location a = source_location::current();\n+  func = __FUNCTION__;\n+  return a;\n+}\n+\n+void test03()\n+{\n+  auto loc = f(); // f's first argument corresponds to this line of code\n+  VERIFY( loc.line() == 76 );\n+  // static_assert( loc.column() == 16 );\n+  VERIFY( loc.file_name() == __FILE__ );\n+  VERIFY( loc.function_name() == string_view(__FUNCTION__) );\n+\n+  source_location c = source_location::current();\n+  loc = f(c); // f's first argument gets the same values as c, above\n+  VERIFY( loc.line() == 82 );\n+  // static_assert( loc.column() == 23 );\n+  VERIFY( loc.file_name() == __FILE__ );\n+  VERIFY( loc.function_name() == string_view(__FUNCTION__) );\n+\n+  string_view func;\n+  loc = g(func);\n+  VERIFY( loc.line() == 69 );\n+  // static_assert( loc.column() == 23 );\n+  VERIFY( loc.file_name() == __FILE__ );\n+  VERIFY( loc.function_name() == func );\n+}\n+\n+void\n+test04()\n+{\n+  using std::is_same;\n+  using std::uint_least32_t;\n+  auto loc = source_location::current();\n+  static_assert(is_same<decltype(loc), source_location>::value, \"\");\n+  static_assert(is_same<decltype(loc.line()), uint_least32_t>::value, \"\");\n+  static_assert(is_same<decltype(loc.column()), uint_least32_t>::value, \"\");\n+  static_assert(is_same<decltype(loc.file_name()), const char*>::value, \"\");\n+  static_assert(is_same<decltype(loc.function_name()), const char*>::value, \"\");\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}]}