{"sha": "7f08c075994ac37172ff31f6633d6310d5327090", "node_id": "C_kwDOANBUbNoAKDdmMDhjMDc1OTk0YWMzNzE3MmZmMzFmNjYzM2Q2MzEwZDUzMjcwOTA", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-12-03T18:43:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-06T17:11:33Z"}, "message": "[Ada] Rename Any_Access into Universal_Access\n\ngcc/ada/\n\n\t* stand.ads (Any_Access): Delete.\n\t(Universal_Access): New entity.\n\t* einfo.ads: Remove obsolete reference to Any_Access.\n\t* gen_il-gen-gen_entities.adb: Likewise.\n\t* cstand.adb (Create_Standard): Do not create Any_Access and create\n\tUniversal_Access as a full type instead.\n\t* errout.adb (Set_Msg_Insertion_Type_Reference): Do not deal with\n\tAny_Access and deal with Universal_Access instead.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Replace Any_Access with\n\tUniversal_Access.\n\t* sem_ch4.adb (Analyze_Null): Likewise.\n\t(Find_Non_Universal_Interpretations): Likewise.\n\t(Find_Equality_Types.Try_One_Interp): Likewise and avoid shadowing\n\tby renaming a local variable of the same name.\n\t* sem_res.adb (Make_Call_Into_Operato): Likewise.\n\t(Resolve_Equality_Op): Likewise.\n\t* sem_type.adb (Covers): Likewise.\n\t(Specific_Type): Likewise.", "tree": {"sha": "2a08f0030dc483469070f7dabc34dfac5b25774e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a08f0030dc483469070f7dabc34dfac5b25774e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f08c075994ac37172ff31f6633d6310d5327090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f08c075994ac37172ff31f6633d6310d5327090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f08c075994ac37172ff31f6633d6310d5327090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f08c075994ac37172ff31f6633d6310d5327090/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f64a1bfaddab7d272224b80560f3a64dae28d6ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64a1bfaddab7d272224b80560f3a64dae28d6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64a1bfaddab7d272224b80560f3a64dae28d6ea"}], "stats": {"total": 109, "additions": 50, "deletions": 59}, "files": [{"sha": "8b04e5ecf1da506484236e93152f6f144bbbe7b8", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=7f08c075994ac37172ff31f6633d6310d5327090", "patch": "@@ -1191,15 +1191,6 @@ package body CStand is\n       pragma Assert (not Known_Esize (Any_Id));\n       pragma Assert (not Known_Alignment (Any_Id));\n \n-      Any_Access := New_Standard_Entity (\"an access type\");\n-      Mutate_Ekind          (Any_Access, E_Access_Type);\n-      Set_Scope             (Any_Access, Standard_Standard);\n-      Set_Etype             (Any_Access, Any_Access);\n-      Init_Size             (Any_Access, System_Address_Size);\n-      Set_Elem_Alignment    (Any_Access);\n-      Set_Directly_Designated_Type\n-                            (Any_Access, Any_Type);\n-\n       Any_Character := New_Standard_Entity (\"a character type\");\n       Mutate_Ekind          (Any_Character, E_Enumeration_Type);\n       Set_Scope             (Any_Character, Standard_Standard);\n@@ -1416,6 +1407,16 @@ package body CStand is\n       Set_Size_Known_At_Compile_Time\n                            (Universal_Fixed);\n \n+      Universal_Access := New_Standard_Entity (\"universal_access\");\n+      Decl := New_Node (N_Full_Type_Declaration, Stloc);\n+      Set_Defining_Identifier (Decl, Universal_Access);\n+      Mutate_Ekind                 (Universal_Access, E_Access_Type);\n+      Set_Etype                    (Universal_Access, Universal_Access);\n+      Set_Scope                    (Universal_Access, Standard_Standard);\n+      Init_Size                    (Universal_Access, System_Address_Size);\n+      Set_Elem_Alignment           (Universal_Access);\n+      Set_Directly_Designated_Type (Universal_Access, Any_Type);\n+\n       --  Create type declaration for Duration, using a 64-bit size. The\n       --  delta and size values depend on the mode set in system.ads.\n "}, {"sha": "546ef569f556f220ba5eaa35ca7afbfc46e10b38", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=7f08c075994ac37172ff31f6633d6310d5327090", "patch": "@@ -4864,10 +4864,6 @@ package Einfo is\n --  associated with an access attribute. After resolution a specific access\n --  type will be established as determined by the context.\n \n---  Finally, the type Any_Access is used to label -null- during type\n---  resolution. Any_Access is also replaced by the context type after\n---  resolution.\n-\n    --------------------------------------------------------\n    -- Description of Defined Attributes for Entity_Kinds --\n    --------------------------------------------------------"}, {"sha": "73bcfc5567daca5fa50e68b95cf306227ed61be3", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=7f08c075994ac37172ff31f6633d6310d5327090", "patch": "@@ -3622,8 +3622,7 @@ package body Errout is\n          Set_Msg_Str (\"exception name\");\n          return;\n \n-      elsif     Error_Msg_Node_1 = Any_Access\n-        or else Error_Msg_Node_1 = Any_Array\n+      elsif Error_Msg_Node_1 = Any_Array\n         or else Error_Msg_Node_1 = Any_Boolean\n         or else Error_Msg_Node_1 = Any_Character\n         or else Error_Msg_Node_1 = Any_Composite\n@@ -3640,17 +3639,21 @@ package body Errout is\n          Set_Msg_Name_Buffer;\n          return;\n \n-      elsif Error_Msg_Node_1 = Universal_Real then\n-         Set_Msg_Str (\"type universal real\");\n-         return;\n-\n       elsif Error_Msg_Node_1 = Universal_Integer then\n          Set_Msg_Str (\"type universal integer\");\n          return;\n \n+      elsif Error_Msg_Node_1 = Universal_Real then\n+         Set_Msg_Str (\"type universal real\");\n+         return;\n+\n       elsif Error_Msg_Node_1 = Universal_Fixed then\n          Set_Msg_Str (\"type universal fixed\");\n          return;\n+\n+      elsif Error_Msg_Node_1 = Universal_Access then\n+         Set_Msg_Str (\"type universal access\");\n+         return;\n       end if;\n \n       --  Special case of anonymous array"}, {"sha": "cf34fb655ca6a2e00776ccc2204d4b1f36d34176", "filename": "gcc/ada/gen_il-gen-gen_entities.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_entities.adb?ref=7f08c075994ac37172ff31f6633d6310d5327090", "patch": "@@ -652,10 +652,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n \n    Cc (E_Access_Type, Access_Kind);\n        --  An access type created by an access type declaration with no all\n-       --  keyword present. Note that the predefined type Any_Access, which\n-       --  has E_Access_Type Ekind, is used to label NULL in the upwards pass\n-       --  of type analysis, to be replaced by the true access type in the\n-       --  downwards resolution pass.\n+       --  keyword present.\n \n    Cc (E_Access_Subtype, Access_Kind);\n        --  An access subtype created by a subtype declaration for any access"}, {"sha": "d05fbcd26a6b1359ce8cef21a35b8f8e614b1cde", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7f08c075994ac37172ff31f6633d6310d5327090", "patch": "@@ -4409,9 +4409,9 @@ package body Sem_Ch3 is\n \n          --  If E is null and has been replaced by an N_Raise_Constraint_Error\n          --  node (which was marked already-analyzed), we need to set the type\n-         --  to something other than Any_Access in order to keep gigi happy.\n+         --  to something else than Universal_Access to keep gigi happy.\n \n-         if Etype (E) = Any_Access then\n+         if Etype (E) = Universal_Access then\n             Set_Etype (E, T);\n          end if;\n "}, {"sha": "951decbcfbd486876bdc56d85cda540c2490facd", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=7f08c075994ac37172ff31f6633d6310d5327090", "patch": "@@ -239,8 +239,7 @@ package body Sem_Ch4 is\n    --  operand types. If one of the operands has a universal interpretation,\n    --  the legality check uses some compatible non-universal interpretation of\n    --  the other operand. N can be an operator node, or a function call whose\n-   --  name is an operator designator. Any_Access, which is the initial type of\n-   --  the literal NULL, is a universal type for the purpose of this routine.\n+   --  name is an operator designator.\n \n    function Find_Primitive_Operation (N : Node_Id) return Boolean;\n    --  Find candidate interpretations for the name Obj.Proc when it appears in\n@@ -3273,7 +3272,7 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Null (N : Node_Id) is\n    begin\n-      Set_Etype (N, Any_Access);\n+      Set_Etype (N, Universal_Access);\n    end Analyze_Null;\n \n    ----------------------\n@@ -6678,14 +6677,9 @@ package body Sem_Ch4 is\n          return;\n       end if;\n \n-      if T1 = Universal_Integer or else T1 = Universal_Real\n-\n-        --  If the left operand of an equality operator is null, the visibility\n-        --  of the operator must be determined from the interpretation of the\n-        --  right operand. This processing must be done for Any_Access, which\n-        --  is the internal representation of the type of the literal null.\n-\n-        or else T1 = Any_Access\n+      if T1 = Universal_Integer\n+        or else T1 = Universal_Real\n+        or else T1 = Universal_Access\n       then\n          if not Is_Overloaded (R) then\n             Add_One_Interp (N, Op_Id, Standard_Boolean, Base_Type (Etype (R)));\n@@ -6770,7 +6764,7 @@ package body Sem_Ch4 is\n       --  operator.\n       --  This is because the expected type for Obj'Access in a call to\n       --  the Standard.\"=\" operator whose formals are of type\n-      --  Universal_Access is Universal_Integer, and Universal_Access\n+      --  Universal_Access is Universal_Access, and Universal_Access\n       --  doesn't have a designated type. For more detail see RM 6.4.1(3)\n       --  and 3.10.2.\n       --  This procedure assumes that the context is a universal_access.\n@@ -6992,7 +6986,7 @@ package body Sem_Ch4 is\n       --------------------\n \n       procedure Try_One_Interp (T1 : Entity_Id) is\n-         Universal_Access : Boolean;\n+         Anonymous_Access : Boolean;\n          Bas              : Entity_Id;\n \n       begin\n@@ -7013,7 +7007,7 @@ package body Sem_Ch4 is\n          --  In Ada 2005, the equality operator for anonymous access types\n          --  is declared in Standard, and preference rules apply to it.\n \n-         Universal_Access := Is_Anonymous_Access_Type (T1)\n+         Anonymous_Access := Is_Anonymous_Access_Type (T1)\n            or else References_Anonymous_Access_Type (R, T1);\n \n          if Present (Scop) then\n@@ -7028,15 +7022,15 @@ package body Sem_Ch4 is\n               or else In_Instance\n               or else T1 = Universal_Integer\n               or else T1 = Universal_Real\n-              or else T1 = Any_Access\n+              or else T1 = Universal_Access\n               or else T1 = Any_String\n               or else T1 = Any_Composite\n               or else (Ekind (T1) = E_Access_Subprogram_Type\n                         and then not Comes_From_Source (T1))\n             then\n                null;\n \n-            elsif Scop /= Standard_Standard or else not Universal_Access then\n+            elsif Scop /= Standard_Standard or else not Anonymous_Access then\n \n                --  The scope does not contain an operator for the type\n \n@@ -7057,7 +7051,7 @@ package body Sem_Ch4 is\n          then\n             null;\n \n-         elsif not Universal_Access then\n+         elsif not Anonymous_Access then\n             --  Save candidate type for subsequent error message, if any\n \n             if not Is_Limited_Type (T1) then\n@@ -7070,7 +7064,7 @@ package body Sem_Ch4 is\n          --  Ada 2005 (AI-230): Keep restriction imposed by Ada 83 and 95:\n          --  Do not allow anonymous access types in equality operators.\n \n-         if Ada_Version < Ada_2005 and then Universal_Access then\n+         if Ada_Version < Ada_2005 and then Anonymous_Access then\n             return;\n          end if;\n \n@@ -7091,7 +7085,7 @@ package body Sem_Ch4 is\n          --  Finally, also check for RM 4.5.2 (9.6/2).\n \n          if T1 /= Standard_Void_Type\n-           and then (Universal_Access\n+           and then (Anonymous_Access\n                       or else\n                      Has_Compatible_Type (R, T1, For_Comparison => True))\n \n@@ -7109,7 +7103,7 @@ package body Sem_Ch4 is\n                or else not Is_Tagged_Type (T1)\n                or else Chars (Op_Id) = Name_Op_Eq)\n \n-           and then (not Universal_Access\n+           and then (not Anonymous_Access\n                       or else Check_Access_Object_Types (R, T1))\n          then\n             if Found\n@@ -7124,14 +7118,14 @@ package body Sem_Ch4 is\n \n                else\n                   T_F := It.Typ;\n-                  Is_Universal_Access := Universal_Access;\n+                  Is_Universal_Access := Anonymous_Access;\n                end if;\n \n             else\n                Found := True;\n                T_F   := T1;\n                I_F   := Index;\n-               Is_Universal_Access := Universal_Access;\n+               Is_Universal_Access := Anonymous_Access;\n             end if;\n \n             if not Analyzed (L) then"}, {"sha": "bd91cec08bdff7295719ea0a182880663a20d976", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7f08c075994ac37172ff31f6633d6310d5327090", "patch": "@@ -1774,12 +1774,12 @@ package body Sem_Res is\n                   elsif Opnd_Type = Universal_Real then\n                      Orig_Type := Type_In_P (Is_Real_Type'Access);\n \n+                  elsif Opnd_Type = Universal_Access then\n+                     Orig_Type := Type_In_P (Is_Definite_Access_Type'Access);\n+\n                   elsif Opnd_Type = Any_String then\n                      Orig_Type := Type_In_P (Is_String_Type'Access);\n \n-                  elsif Opnd_Type = Any_Access then\n-                     Orig_Type := Type_In_P (Is_Definite_Access_Type'Access);\n-\n                   elsif Opnd_Type = Any_Composite then\n                      Orig_Type := Type_In_P (Is_Composite_Type'Access);\n \n@@ -8748,7 +8748,7 @@ package body Sem_Res is\n             Set_Etype (N, Any_Type);\n             return;\n \n-         elsif T = Any_Access\n+         elsif T = Universal_Access\n            or else Ekind (T) in E_Allocator_Type | E_Access_Attribute_Type\n          then\n             T := Find_Unique_Access_Type;"}, {"sha": "5d519161738c720d52e2227b6c0d75247ad2af2e", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=7f08c075994ac37172ff31f6633d6310d5327090", "patch": "@@ -915,10 +915,10 @@ package body Sem_Type is\n       elsif     (T2 = Universal_Integer and then Is_Integer_Type (T1))\n         or else (T2 = Universal_Real    and then Is_Real_Type (T1))\n         or else (T2 = Universal_Fixed   and then Is_Fixed_Point_Type (T1))\n+        or else (T2 = Universal_Access  and then Is_Access_Type (T1))\n         or else (T2 = Any_Fixed         and then Is_Fixed_Point_Type (T1))\n         or else (T2 = Any_Character     and then Is_Character_Type (T1))\n         or else (T2 = Any_String        and then Is_String_Type (T1))\n-        or else (T2 = Any_Access        and then Is_Access_Type (T1))\n       then\n          return True;\n \n@@ -1215,7 +1215,7 @@ package body Sem_Type is\n                        and then Is_Access_Type (T2)\n                        and then Designated_Type (T1) = Designated_Type (T2))\n                    or else\n-                     (T1 = Any_Access\n+                     (T1 = Universal_Access\n                        and then Is_Access_Type (Underlying_Type (T2)))\n                    or else\n                      (T2 = Any_Composite\n@@ -3388,20 +3388,20 @@ package body Sem_Type is\n       elsif T1 = Any_Character and then Is_Character_Type (T2) then\n          return B2;\n \n-      elsif T1 = Any_Access\n+      elsif T1 = Universal_Access\n         and then (Is_Access_Type (T2) or else Is_Remote_Access (T2))\n       then\n          return T2;\n \n-      elsif T2 = Any_Access\n+      elsif T2 = Universal_Access\n         and then (Is_Access_Type (T1) or else Is_Remote_Access (T1))\n       then\n          return T1;\n \n       --  In an instance, the specific type may have a private view. Use full\n       --  view to check legality.\n \n-      elsif T2 = Any_Access\n+      elsif T2 = Universal_Access\n         and then Is_Private_Type (T1)\n         and then Present (Full_View (T1))\n         and then Is_Access_Type (Full_View (T1))"}, {"sha": "54df6a250737ef8336534e5966a21f26668d499f", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f08c075994ac37172ff31f6633d6310d5327090/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=7f08c075994ac37172ff31f6633d6310d5327090", "patch": "@@ -375,9 +375,6 @@ package Stand is\n    --  them the type is still Any_Type, the node has no possible interpretation\n    --  and an error can be emitted (and Any_Type will be propagated upwards).\n \n-   Any_Access : Entity_Id;\n-   --  Used to resolve the overloaded literal NULL\n-\n    Any_Array : Entity_Id;\n    --  Used to represent some unknown array type\n \n@@ -451,6 +448,9 @@ package Stand is\n    --  universal integer and universal real, it is never used for runtime\n    --  calculations).\n \n+   Universal_Access : Entity_Id;\n+   --  Entity for universal access type. It is only used for the literal null\n+\n    Standard_Integer_8   : Entity_Id;\n    Standard_Integer_16  : Entity_Id;\n    Standard_Integer_32  : Entity_Id;"}]}