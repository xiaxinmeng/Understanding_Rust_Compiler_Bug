{"sha": "cffc4a68d759fdca588cdf9ece998862b76141e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmYzRhNjhkNzU5ZmRjYTU4OGNkZjllY2U5OTg4NjJiNzYxNDFlNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-28T21:06:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-28T21:06:35Z"}, "message": "PR c++/72764 - ICE with invalid template typename.\n\n\t* decl.c (build_typename_type): No longer static.\n\t* tree.c (strip_typedefs): Use it instead of make_typename_type.\n\nFrom-SVN: r249760", "tree": {"sha": "a851d0286dacb22b2c1e15d838ea1bccb487325b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a851d0286dacb22b2c1e15d838ea1bccb487325b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cffc4a68d759fdca588cdf9ece998862b76141e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cffc4a68d759fdca588cdf9ece998862b76141e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cffc4a68d759fdca588cdf9ece998862b76141e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cffc4a68d759fdca588cdf9ece998862b76141e6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "395a191d0b79c5a42105a8559e4385fb25ee0afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395a191d0b79c5a42105a8559e4385fb25ee0afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/395a191d0b79c5a42105a8559e4385fb25ee0afd"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "4b05c7efbacad4efe081700d8209b97f23a9efb5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cffc4a68d759fdca588cdf9ece998862b76141e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cffc4a68d759fdca588cdf9ece998862b76141e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cffc4a68d759fdca588cdf9ece998862b76141e6", "patch": "@@ -1,5 +1,9 @@\n 2017-06-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/72764 - ICE with invalid template typename.\n+\t* decl.c (build_typename_type): No longer static.\n+\t* tree.c (strip_typedefs): Use it instead of make_typename_type.\n+\n \tPR c++/69300 - ICE with self-referential noexcept\n \t* pt.c (maybe_instantiate_noexcept): Check for recursion.\n "}, {"sha": "946a916799240ec837d5964e96dbf934126ef341", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cffc4a68d759fdca588cdf9ece998862b76141e6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cffc4a68d759fdca588cdf9ece998862b76141e6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cffc4a68d759fdca588cdf9ece998862b76141e6", "patch": "@@ -6087,6 +6087,7 @@ extern tree define_label\t\t\t(location_t, tree);\n extern void check_goto\t\t\t\t(tree);\n extern bool check_omp_return\t\t\t(void);\n extern tree make_typename_type\t\t\t(tree, tree, enum tag_types, tsubst_flags_t);\n+extern tree build_typename_type\t\t\t(tree, tree, tree, tag_types);\n extern tree make_unbound_class_template\t\t(tree, tree, tree, tsubst_flags_t);\n extern tree build_library_fn_ptr\t\t(const char *, tree, int);\n extern tree build_cp_library_fn_ptr\t\t(const char *, tree, int);"}, {"sha": "3d96a3ea0fd80de92e2510f081feb90bef9dc103", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cffc4a68d759fdca588cdf9ece998862b76141e6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cffc4a68d759fdca588cdf9ece998862b76141e6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cffc4a68d759fdca588cdf9ece998862b76141e6", "patch": "@@ -3594,7 +3594,7 @@ struct typename_hasher : ggc_ptr_hash<tree_node>\n \n static GTY (()) hash_table<typename_hasher> *typename_htab;\n \n-static tree\n+tree\n build_typename_type (tree context, tree name, tree fullname,\n \t\t     enum tag_types tag_type)\n {"}, {"sha": "4535af64dc6551bcab42dbf1ec07f03cf4735503", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cffc4a68d759fdca588cdf9ece998862b76141e6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cffc4a68d759fdca588cdf9ece998862b76141e6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=cffc4a68d759fdca588cdf9ece998862b76141e6", "patch": "@@ -1503,13 +1503,13 @@ strip_typedefs (tree t, bool *remove_attributes)\n       break;\n     case TYPENAME_TYPE:\n       {\n+\tbool changed = false;\n \ttree fullname = TYPENAME_TYPE_FULLNAME (t);\n \tif (TREE_CODE (fullname) == TEMPLATE_ID_EXPR\n \t    && TREE_OPERAND (fullname, 1))\n \t  {\n \t    tree args = TREE_OPERAND (fullname, 1);\n \t    tree new_args = copy_node (args);\n-\t    bool changed = false;\n \t    for (int i = 0; i < TREE_VEC_LENGTH (args); ++i)\n \t      {\n \t\ttree arg = TREE_VEC_ELT (args, i);\n@@ -1533,12 +1533,15 @@ strip_typedefs (tree t, bool *remove_attributes)\n \t    else\n \t      ggc_free (new_args);\n \t  }\n-\tresult = make_typename_type (strip_typedefs (TYPE_CONTEXT (t),\n-\t\t\t\t\t\t     remove_attributes),\n-\t\t\t\t     fullname, typename_type, tf_none);\n-\t/* Handle 'typedef typename A::N N;'  */\n-\tif (typedef_variant_p (result))\n-\t  result = TYPE_MAIN_VARIANT (DECL_ORIGINAL_TYPE (TYPE_NAME (result)));\n+\ttree ctx = strip_typedefs (TYPE_CONTEXT (t), remove_attributes);\n+\tif (!changed && ctx == TYPE_CONTEXT (t) && !typedef_variant_p (t))\n+\t  return t;\n+\ttree name = fullname;\n+\tif (TREE_CODE (fullname) == TEMPLATE_ID_EXPR)\n+\t  name = TREE_OPERAND (fullname, 0);\n+\t/* Use build_typename_type rather than make_typename_type because we\n+\t   don't want to resolve it here, just strip typedefs.  */\n+\tresult = build_typename_type (ctx, name, fullname, typename_type);\n       }\n       break;\n     case DECLTYPE_TYPE:"}, {"sha": "6bf9b7b16669fb0e8556f81a7d43d7c0784cb192", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-60.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cffc4a68d759fdca588cdf9ece998862b76141e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cffc4a68d759fdca588cdf9ece998862b76141e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-60.C?ref=cffc4a68d759fdca588cdf9ece998862b76141e6", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/72764\n+// { dg-do compile { target c++11 } }\n+\n+template < typename > struct A;\n+template < typename > struct B {};\n+\n+template < typename T >\n+using C = typename A < T >::template D < T >;\n+\n+template < typename T > struct A\n+{ \n+  // should be: template < typename > struct D : B < C < T > > {};\n+  struct D : B < C < T > > {};\t// { dg-error \"not a class template\" }\n+};\n+\n+A < int >::D a;\t\t\t// { dg-message \"required\" }"}]}