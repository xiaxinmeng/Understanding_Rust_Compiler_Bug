{"sha": "dbdd120f4c23ebd700f48c695104161bb444a1fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJkZDEyMGY0YzIzZWJkNzAwZjQ4YzY5NTEwNDE2MWJiNDQ0YTFmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-03-17T17:35:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-03-17T17:35:16Z"}, "message": "config.gcc (ia64*-*-hpux*): Add extra_options.\n\n        * config.gcc (ia64*-*-hpux*): Add extra_options.\n        * config/ia64/hpux.h (SUBTARGET_SWITCHES): Remove.\n        (TARGET_DEFAULT): Remove MASK_INLINE_FLOAT_DIV_THR.\n        * config/ia64/ia64.c (ia64_fixed_range_string): Remove.\n        (ia64_tls_size_string, ia64_tune_string): Remove.\n        (ia64_tune): Init to PROCESSOR_ITANIUM2.\n        (TARGET_DEFAULT_TARGET_FLAGS): New.\n        (TARGET_HANDLE_OPTION): New.\n        (ia64_override_options): Move options parsing ...\n        (ia64_handle_option): ... here.  New.\n        * config/ia64/ia64.h (target_flags, MASK_BIG_ENDIAN, MASK_GNU_AS,\n        MASK_GNU_LD, MASK_NO_PIC, MASK_VOL_ASM_STOP, MASK_ILP32,\n        MASK_REG_NAMES, MASK_NO_SDATA, MASK_CONST_GP, MASK_AUTO_PIC,\n        MASK_INLINE_FLOAT_DIV_LAT, MASK_INLINE_FLOAT_DIV_THR,\n        MASK_INLINE_INT_DIV_LAT, MASK_INLINE_INT_DIV_THR,\n        MASK_INLINE_SQRT_LAT, MASK_INLINE_SQRT_THR, MASK_DWARF2_ASM,\n        MASK_EARLY_STOP_BITS, TARGET_BIG_ENDIAN, TARGET_GNU_AS, TARGET_GNU_LD,\n        TARGET_NO_PIC, TARGET_VOL_ASM_STOP, TARGET_ILP32, TARGET_REG_NAMES,\n        TARGET_NO_SDATA, TARGET_CONST_GP, TARGET_AUTO_PIC,\n        TARGET_INLINE_FLOAT_DIV_LAT, TARGET_INLINE_FLOAT_DIV_THR,\n        TARGET_INLINE_INT_DIV_LAT, TARGET_INLINE_INT_DIV_THR,\n        TARGET_INLINE_FLOAT_DIV, TARGET_INLINE_INT_DIV, TARGET_INLINE_SQRT_LAT,\n        TARGET_INLINE_SQRT_THR, TARGET_INLINE_SQRT, TARGET_DWARF2_ASM,\n        TARGET_EARLY_STOP_BITS): Remove.\n        (TARGET_ILP32): Default false.\n        (TARGET_SWITCHES, SUBTARGET_SWITCHES, TARGET_OPTIONS): Remove.\n        (enum ia64_inline_type): New.\n        (TARGET_DEFAULT): Remove MASK_INLINE_FLOAT_DIV_THR.\n        * config/ia64/ia64.md: Update for new definitions of\n        TARGET_INLINE_INT_DIV, TARGET_INLINE_FLOAT_DIV, TARGET_INLINE_SQRT.\n        * config/ia64/ia64.opt: New file.\n        * config/ia64/ilp32.opt: New file.\n\nFrom-SVN: r96621", "tree": {"sha": "c79888e467e3398c4b9d56700852c00a8be8145c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c79888e467e3398c4b9d56700852c00a8be8145c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbdd120f4c23ebd700f48c695104161bb444a1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbdd120f4c23ebd700f48c695104161bb444a1fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbdd120f4c23ebd700f48c695104161bb444a1fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbdd120f4c23ebd700f48c695104161bb444a1fd/comments", "author": null, "committer": null, "parents": [{"sha": "0ee4e76d11da76beff77335f1d47eb29a0b0d819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee4e76d11da76beff77335f1d47eb29a0b0d819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee4e76d11da76beff77335f1d47eb29a0b0d819"}], "stats": {"total": 555, "additions": 243, "deletions": 312}, "files": [{"sha": "2f004094df7a139fa46db897118ea3f04bbddee7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbdd120f4c23ebd700f48c695104161bb444a1fd", "patch": "@@ -1,3 +1,38 @@\n+2005-03-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config.gcc (ia64*-*-hpux*): Add extra_options.\n+\t* config/ia64/hpux.h (SUBTARGET_SWITCHES): Remove.\n+\t(TARGET_DEFAULT): Remove MASK_INLINE_FLOAT_DIV_THR.\n+\t* config/ia64/ia64.c (ia64_fixed_range_string): Remove.\n+\t(ia64_tls_size_string, ia64_tune_string): Remove.\n+\t(ia64_tune): Init to PROCESSOR_ITANIUM2.\n+\t(TARGET_DEFAULT_TARGET_FLAGS): New.\n+\t(TARGET_HANDLE_OPTION): New.\n+\t(ia64_override_options): Move options parsing ...\n+\t(ia64_handle_option): ... here.  New.\n+\t* config/ia64/ia64.h (target_flags, MASK_BIG_ENDIAN, MASK_GNU_AS,\n+\tMASK_GNU_LD, MASK_NO_PIC, MASK_VOL_ASM_STOP, MASK_ILP32, \n+\tMASK_REG_NAMES, MASK_NO_SDATA, MASK_CONST_GP, MASK_AUTO_PIC,\n+\tMASK_INLINE_FLOAT_DIV_LAT, MASK_INLINE_FLOAT_DIV_THR,\n+\tMASK_INLINE_INT_DIV_LAT, MASK_INLINE_INT_DIV_THR,\n+\tMASK_INLINE_SQRT_LAT, MASK_INLINE_SQRT_THR, MASK_DWARF2_ASM, \n+\tMASK_EARLY_STOP_BITS, TARGET_BIG_ENDIAN, TARGET_GNU_AS, TARGET_GNU_LD, \n+\tTARGET_NO_PIC, TARGET_VOL_ASM_STOP, TARGET_ILP32, TARGET_REG_NAMES,\n+\tTARGET_NO_SDATA, TARGET_CONST_GP, TARGET_AUTO_PIC,\n+\tTARGET_INLINE_FLOAT_DIV_LAT, TARGET_INLINE_FLOAT_DIV_THR,\n+\tTARGET_INLINE_INT_DIV_LAT, TARGET_INLINE_INT_DIV_THR,\n+\tTARGET_INLINE_FLOAT_DIV, TARGET_INLINE_INT_DIV, TARGET_INLINE_SQRT_LAT,\n+\tTARGET_INLINE_SQRT_THR, TARGET_INLINE_SQRT, TARGET_DWARF2_ASM,\n+\tTARGET_EARLY_STOP_BITS): Remove.\n+\t(TARGET_ILP32): Default false.\n+\t(TARGET_SWITCHES, SUBTARGET_SWITCHES, TARGET_OPTIONS): Remove.\n+\t(enum ia64_inline_type): New.\n+\t(TARGET_DEFAULT): Remove MASK_INLINE_FLOAT_DIV_THR.\n+\t* config/ia64/ia64.md: Update for new definitions of\n+\tTARGET_INLINE_INT_DIV, TARGET_INLINE_FLOAT_DIV, TARGET_INLINE_SQRT.\n+\t* config/ia64/ia64.opt: New file.\n+\t* config/ia64/ilp32.opt: New file.\n+\n 2005-03-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/18380"}, {"sha": "575ced2706f855ce8cc07ef6f3b417870c21c8a3", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=dbdd120f4c23ebd700f48c695104161bb444a1fd", "patch": "@@ -1227,6 +1227,7 @@ ia64*-*-hpux*)\n \tuse_collect2=no\n \tc_target_objs=\"ia64-c.o\"\n \tcxx_target_objs=\"ia64-c.o\"\n+\textra_options=\"${extra_options} ia64/ilp32.opt\"\n \t# If we decide to run fixproto we should define FIXPROTO_DEFINES\n \t# in ia64/t-hpux, and also fix the definition of putenv in\n \t# sys-protos.h (const char not char)."}, {"sha": "66e3a613e3220ab863e02d391ac5256fce53dd81", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=dbdd120f4c23ebd700f48c695104161bb444a1fd", "patch": "@@ -91,11 +91,6 @@ do {\t\t\t\t\t\t\t\\\n \t  %{mlp64:-L/usr/lib/hpux64/libp} -lgprof} \\\n      %{!symbolic:-lc}}\"\n \n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-  { \"ilp32\",    MASK_ILP32,     \"Generate ILP32 code\" }, \\\n-  { \"lp64\",    -MASK_ILP32,     \"Generate LP64 code\" },\n-\n #define MULTILIB_DEFAULTS { \"milp32\" }\n \n /* A C expression whose value is zero if pointers that need to be extended\n@@ -109,7 +104,7 @@ do {\t\t\t\t\t\t\t\\\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n-  (MASK_DWARF2_ASM | MASK_BIG_ENDIAN | MASK_ILP32 | MASK_INLINE_FLOAT_DIV_THR)\n+  (MASK_DWARF2_ASM | MASK_BIG_ENDIAN | MASK_ILP32)\n \n /* This needs to be set to force structure arguments with a single\n    integer field to be treated as structures and not as the type of"}, {"sha": "0f9645a506d809f4c7670caa55ec5d554a750d93", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 68, "deletions": 109, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=dbdd120f4c23ebd700f48c695104161bb444a1fd", "patch": "@@ -98,21 +98,12 @@ static const char * const ia64_local_reg_names[80] =\n static const char * const ia64_output_reg_names[8] =\n { \"out0\", \"out1\", \"out2\", \"out3\", \"out4\", \"out5\", \"out6\", \"out7\" };\n \n-/* String used with the -mfixed-range= option.  */\n-const char *ia64_fixed_range_string;\n-\n /* Determines whether we use adds, addl, or movl to generate our\n    TLS immediate offsets.  */\n int ia64_tls_size = 22;\n \n-/* String used with the -mtls-size= option.  */\n-const char *ia64_tls_size_string;\n-\n /* Which cpu are we scheduling for.  */\n-enum processor_type ia64_tune;\n-\n-/* String used with the -tune= option.  */\n-const char *ia64_tune_string;\n+enum processor_type ia64_tune = PROCESSOR_ITANIUM2;\n \n /* Determines whether we run our final scheduling pass or not.  We always\n    avoid the normal second scheduling pass.  */\n@@ -197,6 +188,7 @@ static bool ia64_function_ok_for_sibcall (tree, tree);\n static bool ia64_return_in_memory (tree, tree);\n static bool ia64_rtx_costs (rtx, int, int, int *);\n static void fix_range (const char *);\n+static bool ia64_handle_option (size_t, const char *, int);\n static struct machine_function * ia64_init_machine_status (void);\n static void emit_insn_group_barriers (FILE *);\n static void emit_all_insn_group_barriers (FILE *);\n@@ -433,6 +425,11 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_RELAXED_ORDERING\n #define TARGET_RELAXED_ORDERING true\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | TARGET_CPU_DEFAULT)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION ia64_handle_option\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n typedef enum\n@@ -4599,120 +4596,76 @@ fix_range (const char *const_str)\n     }\n }\n \n-static struct machine_function *\n-ia64_init_machine_status (void)\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+ia64_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n {\n-  return ggc_alloc_cleared (sizeof (struct machine_function));\n+  switch (code)\n+    {\n+    case OPT_mfixed_range_:\n+      fix_range (arg);\n+      return true;\n+\n+    case OPT_mtls_size_:\n+      {\n+\tchar *end;\n+\tunsigned long tmp = strtoul (arg, &end, 10);\n+\tif (*end || (tmp != 14 && tmp != 22 && tmp != 64))\n+\t  error (\"bad value %<%s%> for -mtls-size= switch\", arg);\n+\telse\n+\t  ia64_tls_size = tmp;\n+\treturn true;\n+      }\n+\n+    case OPT_mtune_:\n+      {\n+\tstatic struct pta\n+\t  {\n+\t    const char *name;\t\t/* processor name or nickname.  */\n+\t    enum processor_type processor;\n+\t  }\n+\tconst processor_alias_table[] =\n+\t  {\n+\t    {\"itanium\", PROCESSOR_ITANIUM},\n+\t    {\"itanium1\", PROCESSOR_ITANIUM},\n+\t    {\"merced\", PROCESSOR_ITANIUM},\n+\t    {\"itanium2\", PROCESSOR_ITANIUM2},\n+\t    {\"mckinley\", PROCESSOR_ITANIUM2},\n+\t  };\n+\tint const pta_size = ARRAY_SIZE (processor_alias_table);\n+\tint i;\n+\n+\tfor (i = 0; i < pta_size; i++)\n+\t  if (!strcmp (arg, processor_alias_table[i].name))\n+\t    {\n+\t      ia64_tune = processor_alias_table[i].processor;\n+\t      break;\n+\t    }\n+\tif (i == pta_size)\n+\t  error (\"bad value %<%s%> for -mtune= switch\", arg);\n+\treturn true;\n+      }\n+\n+    default:\n+      return true;\n+    }\n }\n \n /* Handle TARGET_OPTIONS switches.  */\n \n void\n ia64_override_options (void)\n {\n-  static struct pta\n-    {\n-      const char *const name;\t\t/* processor name or nickname.  */\n-      const enum processor_type processor;\n-    }\n-  const processor_alias_table[] =\n-    {\n-      {\"itanium\", PROCESSOR_ITANIUM},\n-      {\"itanium1\", PROCESSOR_ITANIUM},\n-      {\"merced\", PROCESSOR_ITANIUM},\n-      {\"itanium2\", PROCESSOR_ITANIUM2},\n-      {\"mckinley\", PROCESSOR_ITANIUM2},\n-    };\n-\n-  int const pta_size = ARRAY_SIZE (processor_alias_table);\n-  int i;\n-\n   if (TARGET_AUTO_PIC)\n     target_flags |= MASK_CONST_GP;\n \n-  if (TARGET_INLINE_FLOAT_DIV_LAT && TARGET_INLINE_FLOAT_DIV_THR)\n-    {\n-      if ((target_flags_explicit & MASK_INLINE_FLOAT_DIV_LAT)\n-\t   && (target_flags_explicit & MASK_INLINE_FLOAT_DIV_THR))\n-\t{\n-\t  warning (\"cannot optimize floating point division for both latency and throughput\");\n-\t  target_flags &= ~MASK_INLINE_FLOAT_DIV_THR;\n-\t}\n-      else \n-\t{\n-\t  if (target_flags_explicit & MASK_INLINE_FLOAT_DIV_THR)\n-\t    target_flags &= ~MASK_INLINE_FLOAT_DIV_LAT;\n-\t  else\n-\t    target_flags &= ~MASK_INLINE_FLOAT_DIV_THR;\n-\t}\n-    }\n-\n-  if (TARGET_INLINE_INT_DIV_LAT && TARGET_INLINE_INT_DIV_THR)\n-    {\n-      if ((target_flags_explicit & MASK_INLINE_INT_DIV_LAT)\n-\t   && (target_flags_explicit & MASK_INLINE_INT_DIV_THR))\n-\t{\n-\t  warning (\"cannot optimize integer division for both latency and throughput\");\n-\t  target_flags &= ~MASK_INLINE_INT_DIV_THR;\n-\t}\n-      else \n-\t{\n-\t  if (target_flags_explicit & MASK_INLINE_INT_DIV_THR)\n-\t    target_flags &= ~MASK_INLINE_INT_DIV_LAT;\n-\t  else\n-\t    target_flags &= ~MASK_INLINE_INT_DIV_THR;\n-\t}\n-    }\n-\n-  if (TARGET_INLINE_SQRT_LAT && TARGET_INLINE_SQRT_THR)\n-    {\n-      if ((target_flags_explicit & MASK_INLINE_SQRT_LAT)\n-\t   && (target_flags_explicit & MASK_INLINE_SQRT_THR))\n-\t{\n-\t  warning (\"cannot optimize square root for both latency and throughput\");\n-\t  target_flags &= ~MASK_INLINE_SQRT_THR;\n-\t}\n-      else \n-\t{\n-\t  if (target_flags_explicit & MASK_INLINE_SQRT_THR)\n-\t    target_flags &= ~MASK_INLINE_SQRT_LAT;\n-\t  else\n-\t    target_flags &= ~MASK_INLINE_SQRT_THR;\n-\t}\n-    }\n-\n-  if (TARGET_INLINE_SQRT_LAT)\n+  if (TARGET_INLINE_SQRT == INL_MIN_LAT)\n     {\n       warning (\"not yet implemented: latency-optimized inline square root\");\n-      target_flags &= ~MASK_INLINE_SQRT_LAT;\n-    }\n-\n-  if (ia64_fixed_range_string)\n-    fix_range (ia64_fixed_range_string);\n-\n-  if (ia64_tls_size_string)\n-    {\n-      char *end;\n-      unsigned long tmp = strtoul (ia64_tls_size_string, &end, 10);\n-      if (*end || (tmp != 14 && tmp != 22 && tmp != 64))\n-\terror (\"bad value (%s) for -mtls-size= switch\", ia64_tls_size_string);\n-      else\n-\tia64_tls_size = tmp;\n+      TARGET_INLINE_SQRT = INL_MAX_THR;\n     }\n \n-  if (!ia64_tune_string)\n-    ia64_tune_string = \"itanium2\";\n-\n-  for (i = 0; i < pta_size; i++)\n-    if (! strcmp (ia64_tune_string, processor_alias_table[i].name))\n-      {\n-\tia64_tune = processor_alias_table[i].processor;\n-\tbreak;\n-      }\n-\n-  if (i == pta_size)\n-    error (\"bad value (%s) for -tune= switch\", ia64_tune_string);\n-\n   ia64_flag_schedule_insns2 = flag_schedule_insns_after_reload;\n   flag_schedule_insns_after_reload = 0;\n \n@@ -4725,6 +4678,12 @@ ia64_override_options (void)\n \n   init_machine_status = ia64_init_machine_status;\n }\n+\n+static struct machine_function *\n+ia64_init_machine_status (void)\n+{\n+  return ggc_alloc_cleared (sizeof (struct machine_function));\n+}\n \f\n static enum attr_itanium_class ia64_safe_itanium_class (rtx);\n static enum attr_type ia64_safe_type (rtx);"}, {"sha": "65b3b5be9f4b06e3ea942e98b3c3d19624c14339", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 14, "deletions": 178, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=dbdd120f4c23ebd700f48c695104161bb444a1fd", "patch": "@@ -27,8 +27,6 @@ Boston, MA 02111-1307, USA.  */\n /* ??? Functions containing a non-local goto target save many registers.  Why?\n    See for instance execute/920428-2.c.  */\n \n-/* ??? Add support for short data/bss sections.  */\n-\n \f\n /* Run-time target specifications */\n \n@@ -56,92 +54,6 @@ do {\t\t\t\t\t\t\\\n \n #define ASM_EXTRA_SPEC \"\"\n \n-\n-/* This declaration should be present.  */\n-extern int target_flags;\n-\n-/* This series of macros is to allow compiler command arguments to enable or\n-   disable the use of optional features of the target machine.  */\n-\n-#define MASK_BIG_ENDIAN\t0x00000001\t/* Generate big endian code.  */\n-\n-#define MASK_GNU_AS\t0x00000002\t/* Generate code for GNU as.  */\n-\n-#define MASK_GNU_LD\t0x00000004\t/* Generate code for GNU ld.  */\n-\n-#define MASK_NO_PIC\t0x00000008\t/* Generate code without GP reg.  */\n-\n-#define MASK_VOL_ASM_STOP 0x00000010\t/* Emit stop bits for vol ext asm.  */\n-\n-#define MASK_ILP32      0x00000020      /* Generate ILP32 code.  */\n-\n-#define MASK_REG_NAMES\t0x00000080\t/* Use in/loc/out register names.  */\n-\n-#define MASK_NO_SDATA   0x00000100\t/* Disable sdata/scommon/sbss.  */\n-\n-#define MASK_CONST_GP\t0x00000200\t/* treat gp as program-wide constant */\n-\n-#define MASK_AUTO_PIC\t0x00000400\t/* generate automatically PIC */\n-\n-#define MASK_INLINE_FLOAT_DIV_LAT 0x00000800 /* inline div, min latency.  */\n-\n-#define MASK_INLINE_FLOAT_DIV_THR 0x00001000 /* inline div, max throughput.  */\n-\n-#define MASK_INLINE_INT_DIV_LAT   0x00002000 /* inline div, min latency.  */\n-\n-#define MASK_INLINE_INT_DIV_THR   0x00004000 /* inline div, max throughput.  */\n-\n-#define MASK_INLINE_SQRT_LAT      0x00008000 /* inline sqrt, min latency.  */\n-\n-#define MASK_INLINE_SQRT_THR      0x00010000 /* inline sqrt, max throughput.  */\n-\n-#define MASK_DWARF2_ASM 0x00020000\t/* test dwarf2 line info via gas.  */\n-\n-#define MASK_EARLY_STOP_BITS 0x00040000 /* tune stop bits for the model.  */\n-\n-#define TARGET_BIG_ENDIAN\t(target_flags & MASK_BIG_ENDIAN)\n-\n-#define TARGET_GNU_AS\t\t(target_flags & MASK_GNU_AS)\n-\n-#define TARGET_GNU_LD\t\t(target_flags & MASK_GNU_LD)\n-\n-#define TARGET_NO_PIC\t\t(target_flags & MASK_NO_PIC)\n-\n-#define TARGET_VOL_ASM_STOP\t(target_flags & MASK_VOL_ASM_STOP)\n-\n-#define TARGET_ILP32            (target_flags & MASK_ILP32)\n-\n-#define TARGET_REG_NAMES\t(target_flags & MASK_REG_NAMES)\n-\n-#define TARGET_NO_SDATA\t\t(target_flags & MASK_NO_SDATA)\n-\n-#define TARGET_CONST_GP\t\t(target_flags & MASK_CONST_GP)\n-\n-#define TARGET_AUTO_PIC\t\t(target_flags & MASK_AUTO_PIC)\n-\n-#define TARGET_INLINE_FLOAT_DIV_LAT (target_flags & MASK_INLINE_FLOAT_DIV_LAT)\n-\n-#define TARGET_INLINE_FLOAT_DIV_THR (target_flags & MASK_INLINE_FLOAT_DIV_THR)\n-\n-#define TARGET_INLINE_INT_DIV_LAT   (target_flags & MASK_INLINE_INT_DIV_LAT)\n-\n-#define TARGET_INLINE_INT_DIV_THR   (target_flags & MASK_INLINE_INT_DIV_THR)\n-\n-#define TARGET_INLINE_FLOAT_DIV \\\n-  (target_flags & (MASK_INLINE_FLOAT_DIV_LAT | MASK_INLINE_FLOAT_DIV_THR))\n-\n-#define TARGET_INLINE_INT_DIV \\\n-  (target_flags & (MASK_INLINE_INT_DIV_LAT | MASK_INLINE_INT_DIV_THR))\n-\n-#define TARGET_INLINE_SQRT_LAT (target_flags & MASK_INLINE_SQRT_LAT)\n-\n-#define TARGET_INLINE_SQRT_THR (target_flags & MASK_INLINE_SQRT_THR)\n-\n-#define TARGET_INLINE_SQRT \\\n-  (target_flags & (MASK_INLINE_SQRT_LAT | MASK_INLINE_SQRT_THR))\n-\n-#define TARGET_DWARF2_ASM\t(target_flags & MASK_DWARF2_ASM)\n-\n /* Variables which are this size or smaller are put in the sdata/sbss\n    sections.  */\n extern unsigned int ia64_section_threshold;\n@@ -159,104 +71,40 @@ extern int ia64_tls_size;\n #define TARGET_TLS14\t\t(ia64_tls_size == 14)\n #define TARGET_TLS22\t\t(ia64_tls_size == 22)\n #define TARGET_TLS64\t\t(ia64_tls_size == 64)\n-#define TARGET_EARLY_STOP_BITS\t(target_flags & MASK_EARLY_STOP_BITS)\n \n #define TARGET_HPUX\t\t0\n #define TARGET_HPUX_LD\t\t0\n \n+#ifndef TARGET_ILP32\n+#define TARGET_ILP32 0\n+#endif\n+\n #ifndef HAVE_AS_LTOFFX_LDXMOV_RELOCS\n #define HAVE_AS_LTOFFX_LDXMOV_RELOCS 0\n #endif\n \n-/* This macro defines names of command options to set and clear bits in\n-   `target_flags'.  Its definition is an initializer with a subgrouping for\n-   each command option.  */\n+/* Values for TARGET_INLINE_FLOAT_DIV, TARGET_INLINE_INT_DIV, and\n+   TARGET_INLINE_SQRT.  */\n \n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  { \"big-endian\",\tMASK_BIG_ENDIAN,\t\t\t\t\\\n-      N_(\"Generate big endian code\") },\t\t\t\t\t\\\n-  { \"little-endian\",\t-MASK_BIG_ENDIAN,\t\t\t\t\\\n-      N_(\"Generate little endian code\") },\t\t\t\t\\\n-  { \"gnu-as\",\t\tMASK_GNU_AS,\t\t\t\t\t\\\n-      N_(\"Generate code for GNU as\") },\t\t\t\t\t\\\n-  { \"no-gnu-as\",\t-MASK_GNU_AS,\t\t\t\t\t\\\n-      N_(\"Generate code for Intel as\") },\t\t\t\t\\\n-  { \"gnu-ld\",\t\tMASK_GNU_LD,\t\t\t\t\t\\\n-      N_(\"Generate code for GNU ld\") },\t\t\t\t\t\\\n-  { \"no-gnu-ld\",\t-MASK_GNU_LD,\t\t\t\t\t\\\n-      N_(\"Generate code for Intel ld\") },\t\t\t\t\\\n-  { \"no-pic\",\t\tMASK_NO_PIC,\t\t\t\t\t\\\n-      N_(\"Generate code without GP reg\") },\t\t\t\t\\\n-  { \"volatile-asm-stop\", MASK_VOL_ASM_STOP,\t\t\t\t\\\n-      N_(\"Emit stop bits before and after volatile extended asms\") },\t\\\n-  { \"no-volatile-asm-stop\", -MASK_VOL_ASM_STOP,\t\t\t\t\\\n-      N_(\"Don't emit stop bits before and after volatile extended asms\") }, \\\n-  { \"register-names\",\tMASK_REG_NAMES,\t\t\t\t\t\\\n-      N_(\"Use in/loc/out register names\")},\t\t\t\t\\\n-  { \"no-sdata\",\t\tMASK_NO_SDATA,\t\t\t\t\t\\\n-      N_(\"Disable use of sdata/scommon/sbss\")},\t\t\t\t\\\n-  { \"sdata\",\t\t-MASK_NO_SDATA,\t\t\t\t\t\\\n-      N_(\"Enable use of sdata/scommon/sbss\")},\t\t\t\t\\\n-  { \"constant-gp\",\tMASK_CONST_GP,\t\t\t\t\t\\\n-      N_(\"gp is constant (but save/restore gp on indirect calls)\") },\t\\\n-  { \"auto-pic\",\t\tMASK_AUTO_PIC,\t\t\t\t\t\\\n-      N_(\"Generate self-relocatable code\") },\t\t\t\t\\\n-  { \"inline-float-divide-min-latency\", MASK_INLINE_FLOAT_DIV_LAT,\t\\\n-      N_(\"Generate inline floating point division, optimize for latency\") },\\\n-  { \"inline-float-divide-max-throughput\", MASK_INLINE_FLOAT_DIV_THR,\t\\\n-      N_(\"Generate inline floating point division, optimize for throughput\") },\\\n-  { \"no-inline-float-divide\", \t\t\t\t\t\t\\\n-      -(MASK_INLINE_FLOAT_DIV_LAT|MASK_INLINE_FLOAT_DIV_THR),\t\t\\\n-      N_(\"Do not inline floating point division\") },\t\t\t\\\n-  { \"inline-int-divide-min-latency\", MASK_INLINE_INT_DIV_LAT,\t\t\\\n-      N_(\"Generate inline integer division, optimize for latency\") },\t\\\n-  { \"inline-int-divide-max-throughput\", MASK_INLINE_INT_DIV_THR,\t\\\n-      N_(\"Generate inline integer division, optimize for throughput\") },\\\n-  { \"no-inline-int-divide\", -(MASK_INLINE_INT_DIV_LAT|MASK_INLINE_INT_DIV_THR),\t\\\n-      N_(\"Do not inline integer division\") },\t\t\t\t\\\n-  { \"inline-sqrt-min-latency\", MASK_INLINE_SQRT_LAT,\t\t\t\\\n-      N_(\"Generate inline square root, optimize for latency\") },\t\\\n-  { \"inline-sqrt-max-throughput\", MASK_INLINE_SQRT_THR,\t\t\t\\\n-      N_(\"Generate inline square root, optimize for throughput\") },     \\\n-  { \"no-inline-sqrt\", -(MASK_INLINE_SQRT_LAT|MASK_INLINE_SQRT_THR),\t\\\n-      N_(\"Do not inline square root\") },\t\t\t\t\\\n-  { \"dwarf2-asm\", \tMASK_DWARF2_ASM,\t\t\t\t\\\n-      N_(\"Enable Dwarf 2 line debug info via GNU as\")},\t\t\t\\\n-  { \"no-dwarf2-asm\", \t-MASK_DWARF2_ASM,\t\t\t\t\\\n-      N_(\"Disable Dwarf 2 line debug info via GNU as\")},\t\t\\\n-  { \"early-stop-bits\", MASK_EARLY_STOP_BITS,\t\t\t\t\\\n-      N_(\"Enable earlier placing stop bits for better scheduling\")},\t\\\n-  { \"no-early-stop-bits\", -MASK_EARLY_STOP_BITS,\t\t\t\\\n-      N_(\"Disable earlier placing stop bits\")},\t\t\t\t\\\n-  SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n-  { \"\",\t\t\tTARGET_DEFAULT | TARGET_CPU_DEFAULT,\t\t\\\n-      NULL }\t\t\t\t\t\t\t\t\\\n-}\n+enum ia64_inline_type\n+{\n+  INL_NO = 0,\n+  INL_MIN_LAT = 1,\n+  INL_MAX_THR = 2\n+};\n \n /* Default target_flags if no switches are specified  */\n \n #ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_INLINE_FLOAT_DIV_THR)\n+#define TARGET_DEFAULT (MASK_DWARF2_ASM)\n #endif\n \n #ifndef TARGET_CPU_DEFAULT\n #define TARGET_CPU_DEFAULT 0\n #endif\n \n-#ifndef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\n-#endif\n-\n-/* This macro is similar to `TARGET_SWITCHES' but defines names of command\n-   options that have values.  Its definition is an initializer with a\n-   subgrouping for each command option.  */\n-\n-extern const char *ia64_fixed_range_string;\n-extern const char *ia64_tls_size_string;\n-\n /* Which processor to schedule for. The cpu attribute defines a list\n-   that mirrors this list, so changes to i64.md must be made at the\n+   that mirrors this list, so changes to ia64.md must be made at the\n    same time.  */\n \n enum processor_type\n@@ -268,18 +116,6 @@ enum processor_type\n \n extern enum processor_type ia64_tune;\n \n-extern const char *ia64_tune_string;\n-\n-#define TARGET_OPTIONS \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  { \"fixed-range=\", \t&ia64_fixed_range_string,\t\t\t\\\n-      N_(\"Specify range of registers to make fixed\"), 0},\t\t\\\n-  { \"tls-size=\",\t&ia64_tls_size_string,\t\t\t\t\\\n-      N_(\"Specify bit size of immediate TLS offsets\"), 0},\t\t\\\n-  { \"tune=\",\t\t&ia64_tune_string,\t\t\t\t\\\n-      N_(\"Schedule code for given CPU\"), 0},\t\t\t\t\\\n-}\n-\n /* Sometimes certain combinations of command options do not make sense on a\n    particular target machine.  You can define a macro `OVERRIDE_OPTIONS' to\n    take account of this.  This macro, if defined, is executed once just after"}, {"sha": "fc99ce5a91c21f075461223f732e284cccdaf4c5", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=dbdd120f4c23ebd700f48c695104161bb444a1fd", "patch": "@@ -2360,7 +2360,7 @@\n   op2_xf = gen_reg_rtx (XFmode);\n   expand_float (op2_xf, operands[2], 0);\n \n-  if (TARGET_INLINE_INT_DIV_LAT)\n+  if (TARGET_INLINE_INT_DIV == INL_MIN_LAT)\n     emit_insn (gen_divdi3_internal_lat (op0_xf, op1_xf, op2_xf));\n   else\n     emit_insn (gen_divdi3_internal_thr (op0_xf, op1_xf, op2_xf));\n@@ -2406,7 +2406,7 @@\n   op2_xf = gen_reg_rtx (XFmode);\n   expand_float (op2_xf, operands[2], 1);\n \n-  if (TARGET_INLINE_INT_DIV_LAT)\n+  if (TARGET_INLINE_INT_DIV == INL_MIN_LAT)\n     emit_insn (gen_divdi3_internal_lat (op0_xf, op1_xf, op2_xf));\n   else\n     emit_insn (gen_divdi3_internal_thr (op0_xf, op1_xf, op2_xf));\n@@ -2440,7 +2440,7 @@\n    (clobber (match_scratch:XF 4 \"=&f\"))\n    (clobber (match_scratch:XF 5 \"=&f\"))\n    (clobber (match_scratch:BI 6 \"=c\"))]\n-  \"TARGET_INLINE_INT_DIV_LAT\"\n+  \"TARGET_INLINE_INT_DIV == INL_MIN_LAT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:XF (const_int 1) (match_dup 2)))\n@@ -2499,7 +2499,7 @@\n    (clobber (match_scratch:XF 3 \"=&f\"))\n    (clobber (match_scratch:XF 4 \"=f\"))\n    (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"TARGET_INLINE_INT_DIV_THR\"\n+  \"TARGET_INLINE_INT_DIV == INL_MAX_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:XF (const_int 1) (match_dup 2)))\n@@ -2678,7 +2678,7 @@\n   \"TARGET_INLINE_FLOAT_DIV\"\n {\n   rtx insn;\n-  if (TARGET_INLINE_FLOAT_DIV_LAT)\n+  if (TARGET_INLINE_FLOAT_DIV == INL_MIN_LAT)\n     insn = gen_divsf3_internal_lat (operands[0], operands[1], operands[2]);\n   else\n     insn = gen_divsf3_internal_thr (operands[0], operands[1], operands[2]);\n@@ -2693,7 +2693,7 @@\n    (clobber (match_scratch:XF 3 \"=&f\"))\n    (clobber (match_scratch:XF 4 \"=f\"))\n    (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"TARGET_INLINE_FLOAT_DIV_LAT\"\n+  \"TARGET_INLINE_FLOAT_DIV == INL_MIN_LAT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 6) (div:XF (const_int 1) (match_dup 8)))\n@@ -2750,7 +2750,7 @@\n    (clobber (match_scratch:XF 3 \"=&f\"))\n    (clobber (match_scratch:XF 4 \"=f\"))\n    (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"TARGET_INLINE_FLOAT_DIV_THR\"\n+  \"TARGET_INLINE_FLOAT_DIV == INL_MAX_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 6) (div:XF (const_int 1) (match_dup 8)))\n@@ -2825,7 +2825,7 @@\n   \"TARGET_INLINE_SQRT\"\n {\n   rtx insn;\n-  if (TARGET_INLINE_SQRT_LAT)\n+  if (TARGET_INLINE_SQRT == INL_MIN_LAT)\n #if 0\n     insn = gen_sqrtsf2_internal_lat (operands[0], operands[1]);\n #else\n@@ -2855,7 +2855,7 @@\n    (clobber (match_scratch:XF 5 \"=&f\"))\n    ;; Register p6 in optimization guide.\n    (clobber (match_scratch:BI 6 \"=c\"))]\n-  \"TARGET_INLINE_SQRT_THR\"\n+  \"TARGET_INLINE_SQRT == INL_MAX_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [ ;; exponent of +1/2 in r2\n@@ -3160,7 +3160,7 @@\n   \"TARGET_INLINE_FLOAT_DIV\"\n {\n   rtx insn;\n-  if (TARGET_INLINE_FLOAT_DIV_LAT)\n+  if (TARGET_INLINE_FLOAT_DIV == INL_MIN_LAT)\n     insn = gen_divdf3_internal_lat (operands[0], operands[1], operands[2]);\n   else\n     insn = gen_divdf3_internal_thr (operands[0], operands[1], operands[2]);\n@@ -3176,7 +3176,7 @@\n    (clobber (match_scratch:XF 4 \"=&f\"))\n    (clobber (match_scratch:XF 5 \"=&f\"))\n    (clobber (match_scratch:BI 6 \"=c\"))]\n-  \"TARGET_INLINE_FLOAT_DIV_LAT\"\n+  \"TARGET_INLINE_FLOAT_DIV == INL_MIN_LAT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 7) (div:XF (const_int 1) (match_dup 9)))\n@@ -3256,7 +3256,7 @@\n    (clobber (match_scratch:XF 3 \"=&f\"))\n    (clobber (match_scratch:DF 4 \"=f\"))\n    (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"TARGET_INLINE_FLOAT_DIV_THR\"\n+  \"TARGET_INLINE_FLOAT_DIV == INL_MAX_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 6) (div:XF (const_int 1) (match_dup 8)))\n@@ -3323,7 +3323,7 @@\n   \"TARGET_INLINE_SQRT\"\n {\n   rtx insn;\n-  if (TARGET_INLINE_SQRT_LAT)\n+  if (TARGET_INLINE_SQRT == INL_MIN_LAT)\n #if 0\n     insn = gen_sqrtdf2_internal_lat (operands[0], operands[1]);\n #else\n@@ -3353,7 +3353,7 @@\n    (clobber (match_scratch:XF 5 \"=&f\"))\n    ;; Register p6 in optimization guide.\n    (clobber (match_scratch:BI 6 \"=c\"))]\n-  \"TARGET_INLINE_SQRT_THR\"\n+  \"TARGET_INLINE_SQRT == INL_MAX_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [ ;; exponent of +1/2 in r2\n@@ -3824,7 +3824,7 @@\n   \"TARGET_INLINE_FLOAT_DIV\"\n {\n   rtx insn;\n-  if (TARGET_INLINE_FLOAT_DIV_LAT)\n+  if (TARGET_INLINE_FLOAT_DIV == INL_MIN_LAT)\n     insn = gen_divxf3_internal_lat (operands[0], operands[1], operands[2]);\n   else\n     insn = gen_divxf3_internal_thr (operands[0], operands[1], operands[2]);\n@@ -3841,7 +3841,7 @@\n    (clobber (match_scratch:XF 5 \"=&f\"))\n    (clobber (match_scratch:XF 6 \"=&f\"))\n    (clobber (match_scratch:BI 7 \"=c\"))]\n-  \"TARGET_INLINE_FLOAT_DIV_LAT\"\n+  \"TARGET_INLINE_FLOAT_DIV == INL_MIN_LAT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:XF (const_int 1) (match_dup 2)))\n@@ -3919,7 +3919,7 @@\n    (clobber (match_scratch:XF 3 \"=&f\"))\n    (clobber (match_scratch:XF 4 \"=&f\"))\n    (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"TARGET_INLINE_FLOAT_DIV_THR\"\n+  \"TARGET_INLINE_FLOAT_DIV == INL_MAX_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:XF (const_int 1) (match_dup 2)))\n@@ -3998,7 +3998,7 @@\n   \"TARGET_INLINE_SQRT\"\n {\n   rtx insn;\n-  if (TARGET_INLINE_SQRT_LAT)\n+  if (TARGET_INLINE_SQRT == INL_MIN_LAT)\n #if 0\n     insn = gen_sqrtxf2_internal_lat (operands[0], operands[1]);\n #else\n@@ -4030,7 +4030,7 @@\n    (clobber (match_scratch:XF 6 \"=&f\"))\n    ;; Register p6 in optimization guide.\n    (clobber (match_scratch:BI 7 \"=c\"))]\n-  \"TARGET_INLINE_SQRT_THR\"\n+  \"TARGET_INLINE_SQRT == INL_MAX_THR\"\n   \"#\"\n   \"&& reload_completed\"\n   [ ;; exponent of +1/2 in r2"}, {"sha": "f3790ad1012f9dadf6cb1cad1fb069e34a41fa0d", "filename": "gcc/config/ia64/ia64.opt", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Fia64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Fia64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.opt?ref=dbdd120f4c23ebd700f48c695104161bb444a1fd", "patch": "@@ -0,0 +1,98 @@\n+mbig-endian\n+Target Report RejectNegative Mask(BIG_ENDIAN)\n+Generate big endian code\n+\n+mlittle-endian\n+Target Report RejectNegative InverseMask(BIG_ENDIAN)\n+Generate little endian code\n+\n+mgnu-as\n+Target Report Mask(GNU_AS)\n+Generate code for GNU as\n+\n+mgnu-ld\n+Target Report Mask(GNU_LD)\n+Generate code for GNU ld\n+\n+mvolatile-asm-stop\n+Target Report Mask(VOL_ASM_STOP)\n+Emit stop bits before and after volatile extended asms\n+\n+mregister-names\n+Target Mask(REG_NAMES)\n+Use in/loc/out register names\n+\n+mno-sdata\n+Target Report RejectNegative Mask(NO_SDATA)\n+\n+msdata\n+Target Report RejectNegative InverseMask(NO_SDATA)\n+Enable use of sdata/scommon/sbss\n+\n+mno-pic\n+Target Report RejectNegative Mask(NO_PIC)\n+Generate code without GP reg\n+\n+mconstant-gp\n+Target Report RejectNegative Mask(CONST_GP)\n+gp is constant (but save/restore gp on indirect calls)\n+\n+mauto-pic\n+Target Report RejectNegative Mask(AUTO_PIC)\n+Generate self-relocatable code\n+\n+minline-float-divide-min-latency\n+Target Report RejectNegative Var(TARGET_INLINE_FLOAT_DIV, 1)\n+Generate inline floating point division, optimize for latency\n+\n+minline-float-divide-max-throughput\n+Target Report RejectNegative Var(TARGET_INLINE_FLOAT_DIV, 2) Init(2)\n+Generate inline floating point division, optimize for throughput\n+\n+mno-inline-float-divide\n+Target Report RejectNegative Var(TARGET_INLINE_FLOAT_DIV, 0)\n+\n+minline-int-divide-min-latency\n+Target Report RejectNegative Var(TARGET_INLINE_INT_DIV, 1)\n+Generate inline integer division, optimize for latency\n+\n+minline-int-divide-max-throughput\n+Target Report RejectNegative Var(TARGET_INLINE_INT_DIV, 2)\n+Generate inline integer division, optimize for throughput\n+\n+mno-inline-int-divide\n+Target Report RejectNegative Var(TARGET_INLINE_INT_DIV, 0)\n+Do not inline integer division\n+\n+minline-sqrt-min-latency\n+Target Report RejectNegative Var(TARGET_INLINE_SQRT, 1)\n+Generate inline square root, optimize for latency\n+\n+minline-sqrt-max-throughput\n+Target Report RejectNegative Var(TARGET_INLINE_SQRT, 2)\n+Generate inline square root, optimize for throughput\n+\n+mno-inline-sqrt\n+Target Report RejectNegative Var(TARGET_INLINE_SQRT, 0)\n+Do not inline square root\n+\n+mdwarf2-asm\n+Target Report Mask(DWARF2_ASM)\n+Enable Dwarf 2 line debug info via GNU as\n+\n+mearly-stop-bits\n+Target Report Mask(EARLY_STOP_BITS)\n+Enable earlier placing stop bits for better scheduling\n+\n+mfixed-range=\n+Target RejectNegative Joined\n+Specify range of registers to make fixed\n+\n+mtls-size=\n+Target RejectNegative Joined\n+Specify bit size of immediate TLS offsets\n+\n+mtune=\n+Target RejectNegative Joined\n+Schedule code for given CPU\n+"}, {"sha": "bcb64737eb9b39b3d0404120bbc894cf5c9db49d", "filename": "gcc/config/ia64/ilp32.opt", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Filp32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdd120f4c23ebd700f48c695104161bb444a1fd/gcc%2Fconfig%2Fia64%2Filp32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Filp32.opt?ref=dbdd120f4c23ebd700f48c695104161bb444a1fd", "patch": "@@ -0,0 +1,7 @@\n+milp32\n+Target Report RejectNegative Mask(ILP32)\n+Generate ILP32 code\n+\n+mlp64\n+Target Report RejectNegative InverseMask(ILP32)\n+Generate LP64 code"}]}