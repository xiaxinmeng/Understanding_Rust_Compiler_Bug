{"sha": "2e33e1c46fae2695b076585af87d7844e19c3486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUzM2UxYzQ2ZmFlMjY5NWIwNzY1ODVhZjg3ZDc4NDRlMTljMzQ4Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-10-11T08:05:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-11T08:05:31Z"}, "message": "tree.h (build_complex_type): Add second parameter with default.\n\n\t* tree.h (build_complex_type): Add second parameter with default.\n\t* tree.c (build_complex_type): Add NAMED second parameter and adjust\n\trecursive call.  Create a TYPE_DECL only if NAMED is true.\n\t(build_common_tree_nodes): Pass true in calls to build_complex_type.\n\nFrom-SVN: r240967", "tree": {"sha": "fde1325af80b57e8bb6e698189eba8855d43cfe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fde1325af80b57e8bb6e698189eba8855d43cfe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e33e1c46fae2695b076585af87d7844e19c3486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e33e1c46fae2695b076585af87d7844e19c3486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e33e1c46fae2695b076585af87d7844e19c3486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e33e1c46fae2695b076585af87d7844e19c3486/comments", "author": null, "committer": null, "parents": [{"sha": "76beabf41a6e89bc773ede6c7709d41b3be14821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76beabf41a6e89bc773ede6c7709d41b3be14821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76beabf41a6e89bc773ede6c7709d41b3be14821"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "23f3b4dca80ceb02a35f19e30bded92a1c8511fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e33e1c46fae2695b076585af87d7844e19c3486/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e33e1c46fae2695b076585af87d7844e19c3486/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e33e1c46fae2695b076585af87d7844e19c3486", "patch": "@@ -1,3 +1,10 @@\n+2016-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (build_complex_type): Add second parameter with default.\n+\t* tree.c (build_complex_type): Add NAMED second parameter and adjust\n+\trecursive call.  Create a TYPE_DECL only if NAMED is true.\n+\t(build_common_tree_nodes): Pass true in calls to build_complex_type.\n+\n 2016-10-11  Georg-Johann Lay  <avr@gjlay.de>\n \n \tNew avr-passes.def to register AVR specific passes."}, {"sha": "a3a8f0a307ce24fc9d46e4f026a64c6812629c4a", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e33e1c46fae2695b076585af87d7844e19c3486/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e33e1c46fae2695b076585af87d7844e19c3486/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2e33e1c46fae2695b076585af87d7844e19c3486", "patch": "@@ -8752,10 +8752,15 @@ build_offset_type (tree basetype, tree type)\n   return t;\n }\n \n-/* Create a complex type whose components are COMPONENT_TYPE.  */\n+/* Create a complex type whose components are COMPONENT_TYPE.\n+\n+   If NAMED is true, the type is given a TYPE_NAME.  We do not always\n+   do so because this creates a DECL node and thus make the DECL_UIDs\n+   dependent on the type canonicalization hashtable, which is GC-ed,\n+   so the DECL_UIDs would not be stable wrt garbage collection.  */\n \n tree\n-build_complex_type (tree component_type)\n+build_complex_type (tree component_type, bool named)\n {\n   tree t;\n   inchash::hash hstate;\n@@ -8782,11 +8787,11 @@ build_complex_type (tree component_type)\n \tSET_TYPE_STRUCTURAL_EQUALITY (t);\n       else if (TYPE_CANONICAL (component_type) != component_type)\n \tTYPE_CANONICAL (t)\n-\t  = build_complex_type (TYPE_CANONICAL (component_type));\n+\t  = build_complex_type (TYPE_CANONICAL (component_type), named);\n     }\n \n   /* We need to create a name, since complex is a fundamental type.  */\n-  if (! TYPE_NAME (t))\n+  if (!TYPE_NAME (t) && named)\n     {\n       const char *name;\n       if (component_type == char_type_node)\n@@ -10372,10 +10377,11 @@ build_common_tree_nodes (bool signed_char)\n   SET_TYPE_MODE (dfloat128_type_node, TDmode);\n   dfloat128_ptr_type_node = build_pointer_type (dfloat128_type_node);\n \n-  complex_integer_type_node = build_complex_type (integer_type_node);\n-  complex_float_type_node = build_complex_type (float_type_node);\n-  complex_double_type_node = build_complex_type (double_type_node);\n-  complex_long_double_type_node = build_complex_type (long_double_type_node);\n+  complex_integer_type_node = build_complex_type (integer_type_node, true);\n+  complex_float_type_node = build_complex_type (float_type_node, true);\n+  complex_double_type_node = build_complex_type (double_type_node, true);\n+  complex_long_double_type_node = build_complex_type (long_double_type_node,\n+\t\t\t\t\t\t      true);\n \n   for (i = 0; i < NUM_FLOATN_NX_TYPES; i++)\n     {"}, {"sha": "30c643968dece32e972f80727559e7c2f819d713", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e33e1c46fae2695b076585af87d7844e19c3486/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e33e1c46fae2695b076585af87d7844e19c3486/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2e33e1c46fae2695b076585af87d7844e19c3486", "patch": "@@ -4042,7 +4042,7 @@ extern tree build_varargs_function_type_array (tree, int, tree *);\n extern tree build_method_type_directly (tree, tree, tree);\n extern tree build_method_type (tree, tree);\n extern tree build_offset_type (tree, tree);\n-extern tree build_complex_type (tree);\n+extern tree build_complex_type (tree, bool named = false);\n extern tree array_type_nelts (const_tree);\n \n extern tree value_member (tree, tree);"}]}