{"sha": "50b0a3d672fba49a69056e4a70fcc318d8d4c7df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiMGEzZDY3MmZiYTQ5YTY5MDU2ZTRhNzBmY2MzMThkOGQ0YzdkZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-09T10:40:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-09T10:40:49Z"}, "message": "Remove some more code duplication in std::optional\n\nHoist the duplicated code from the _Optional_payload partial\nspecializations into the _Optional_payload_base base class.\n\n\t* include/std/optional (_Optional_payload_base::_M_copy_assign): New\n\tmember function to perform non-trivial assignment.\n\t(_Optional_payload_base::_M_move_assign): Likewise.\n\t(_Optional_payload<T, true, false, true>::operator=)\n\t(_Optional_payload<T, true, true, false>::operator=)\n\t(_Optional_payload<T, true, false, false>::operator=): Call\n\t_M_copy_assign and/or _M_move_assign to do non-trivial assignments.\n\nFrom-SVN: r267761", "tree": {"sha": "30f05061b35e63e38f9190b39e3f40c022ee9ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30f05061b35e63e38f9190b39e3f40c022ee9ee3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50b0a3d672fba49a69056e4a70fcc318d8d4c7df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b0a3d672fba49a69056e4a70fcc318d8d4c7df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b0a3d672fba49a69056e4a70fcc318d8d4c7df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b0a3d672fba49a69056e4a70fcc318d8d4c7df/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed895a74a12da82d2adafda7e6196de8221ddd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed895a74a12da82d2adafda7e6196de8221ddd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed895a74a12da82d2adafda7e6196de8221ddd2"}], "stats": {"total": 82, "additions": 45, "deletions": 37}, "files": [{"sha": "d0f060d79555f1ddd4f744a56414637a1987685f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b0a3d672fba49a69056e4a70fcc318d8d4c7df/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b0a3d672fba49a69056e4a70fcc318d8d4c7df/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=50b0a3d672fba49a69056e4a70fcc318d8d4c7df", "patch": "@@ -1,5 +1,13 @@\n 2019-01-09  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/optional (_Optional_payload_base::_M_copy_assign): New\n+\tmember function to perform non-trivial assignment.\n+\t(_Optional_payload_base::_M_move_assign): Likewise.\n+\t(_Optional_payload<T, true, false, true>::operator=)\n+\t(_Optional_payload<T, true, true, false>::operator=)\n+\t(_Optional_payload<T, true, false, false>::operator=): Call\n+\t_M_copy_assign and/or _M_move_assign to do non-trivial assignments.\n+\n \tPR libstdc++/88204\n \t* testsuite/26_numerics/complex/operators/more_constexpr.cc: Do not\n \ttest std::complex<long double> if long double format is IBM128."}, {"sha": "c5e66bdd140c430f836f8a32e127d491edc03f75", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b0a3d672fba49a69056e4a70fcc318d8d4c7df/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b0a3d672fba49a69056e4a70fcc318d8d4c7df/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=50b0a3d672fba49a69056e4a70fcc318d8d4c7df", "patch": "@@ -157,6 +157,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Optional_payload_base&\n       operator=(_Optional_payload_base&&) = default;\n \n+      // used to perform non-trivial copy assignment.\n+      constexpr void\n+      _M_copy_assign(const _Optional_payload_base& __other)\n+      {\n+        if (this->_M_engaged && __other._M_engaged)\n+          this->_M_get() = __other._M_get();\n+        else\n+\t  {\n+\t    if (__other._M_engaged)\n+\t      this->_M_construct(__other._M_get());\n+\t    else\n+\t      this->_M_reset();\n+\t  }\n+      }\n+\n+      // used to perform non-trivial move assignment.\n+      constexpr void\n+      _M_move_assign(_Optional_payload_base&& __other)\n+      noexcept(__and_v<is_nothrow_move_constructible<_Tp>,\n+\t\t       is_nothrow_move_assignable<_Tp>>)\n+      {\n+\tif (this->_M_engaged && __other._M_engaged)\n+\t  this->_M_get() = std::move(__other._M_get());\n+\telse\n+\t  {\n+\t    if (__other._M_engaged)\n+\t      this->_M_construct(std::move(__other._M_get()));\n+\t    else\n+\t      this->_M_reset();\n+\t  }\n+      }\n+\n       struct _Empty_byte { };\n \n       template<typename _Up, bool = is_trivially_destructible_v<_Up>>\n@@ -286,15 +318,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Optional_payload&\n       operator=(const _Optional_payload& __other)\n       {\n-        if (this->_M_engaged && __other._M_engaged)\n-          this->_M_get() = __other._M_get();\n-        else\n-\t  {\n-\t    if (__other._M_engaged)\n-\t      this->_M_construct(__other._M_get());\n-\t    else\n-\t      this->_M_reset();\n-\t  }\n+\tthis->_M_copy_assign(__other);\n \treturn *this;\n       }\n     };\n@@ -319,15 +343,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,\n \t\t       is_nothrow_move_assignable<_Tp>>)\n       {\n-\tif (this->_M_engaged && __other._M_engaged)\n-\t  this->_M_get() = std::move(__other._M_get());\n-\telse\n-\t  {\n-\t    if (__other._M_engaged)\n-\t      this->_M_construct(std::move(__other._M_get()));\n-\t    else\n-\t      this->_M_reset();\n-\t  }\n+\tthis->_M_move_assign(std::move(__other));\n \treturn *this;\n       }\n     };\n@@ -344,20 +360,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Optional_payload(const _Optional_payload&) = default;\n       _Optional_payload(_Optional_payload&&) = default;\n \n-      // Non-trivial copy\n+      // Non-trivial copy assignment.\n       constexpr\n       _Optional_payload&\n       operator=(const _Optional_payload& __other)\n       {\n-        if (this->_M_engaged && __other._M_engaged)\n-          this->_M_get() = __other._M_get();\n-        else\n-\t  {\n-\t    if (__other._M_engaged)\n-\t      this->_M_construct(__other._M_get());\n-\t    else\n-\t      this->_M_reset();\n-\t  }\n+\tthis->_M_copy_assign(__other);\n \treturn *this;\n       }\n \n@@ -368,15 +376,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,\n \t\t       is_nothrow_move_assignable<_Tp>>)\n       {\n-\tif (this->_M_engaged && __other._M_engaged)\n-\t  this->_M_get() = std::move(__other._M_get());\n-\telse\n-\t  {\n-\t    if (__other._M_engaged)\n-\t      this->_M_construct(std::move(__other._M_get()));\n-\t    else\n-\t      this->_M_reset();\n-\t  }\n+\tthis->_M_move_assign(std::move(__other));\n \treturn *this;\n       }\n     };"}]}