{"sha": "d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "node_id": "C_kwDOANBUbNoAKGQ5YzY3NmNiZmMzZTVmMjU2NmI0ZDU1ZmE1MmIwMDkxOWVlMzM4Y2E", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-05-12T13:14:49Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-06-02T14:32:58Z"}, "message": "derive: Add proper derive(Clone) for unions\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-builder.cc (AstBuilder::struct_expr_struct): New function.\n\t(AstBuilder::let): Likewise.\n\t(AstBuilder::struct_expr): Likewise.\n\t(AstBuilder::struct_expr_field): Likewise.\n\t(AstBuilder::field_access): Likewise.\n\t(AstBuilder::wildcard): Likewise.\n\t* ast/rust-ast-builder.h: Likewise.\n\t* expand/rust-derive-clone.cc (DeriveClone::visit_union): Implement\n\tproperly.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/derive_macro4.rs: New test.\n\t* rust/compile/derive_macro6.rs: New test.", "tree": {"sha": "d443ad50c64dcb7cd5923e6432b83e47c32a3636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d443ad50c64dcb7cd5923e6432b83e47c32a3636"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2946327ff94f1653dd57f7362b6402e9b8353643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2946327ff94f1653dd57f7362b6402e9b8353643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2946327ff94f1653dd57f7362b6402e9b8353643"}], "stats": {"total": 91, "additions": 79, "deletions": 12}, "files": [{"sha": "b630cfa53920276bba25e1b01ea0c1da845b41bd", "filename": "gcc/rust/ast/rust-ast-builder.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/gcc%2Frust%2Fast%2Frust-ast-builder.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/gcc%2Frust%2Fast%2Frust-ast-builder.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-builder.cc?ref=d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "patch": "@@ -81,13 +81,6 @@ AstBuilder::path_in_expression (std::vector<std::string> &&segments)\n   return PathInExpression (std::move (path_segments), {}, loc);\n }\n \n-std::unique_ptr<Expr>\n-AstBuilder::struct_expr_struct (std::string struct_name)\n-{\n-  return std::unique_ptr<Expr> (\n-    new StructExprStruct (path_in_expression ({struct_name}), {}, {}, loc));\n-}\n-\n std::unique_ptr<Expr>\n AstBuilder::block (std::vector<std::unique_ptr<Stmt>> &&stmts,\n \t\t   std::unique_ptr<Expr> &&tail_expr)\n@@ -100,9 +93,9 @@ std::unique_ptr<Stmt>\n AstBuilder::let (std::unique_ptr<Pattern> pattern, std::unique_ptr<Type> type,\n \t\t std::unique_ptr<Expr> init)\n {\n-  return std::unique_ptr<Stmt> (\n-    new LetStmt (/* needs a pattern here, not just a name */ nullptr,\n-\t\t std::move (init), std::move (type), {}, loc));\n+  return std::unique_ptr<Stmt> (new LetStmt (std::move (pattern),\n+\t\t\t\t\t     std::move (init), std::move (type),\n+\t\t\t\t\t     {}, loc));\n }\n \n std::unique_ptr<Expr>\n@@ -118,6 +111,13 @@ AstBuilder::deref (std::unique_ptr<Expr> &&of)\n   return std::unique_ptr<Expr> (new DereferenceExpr (std::move (of), {}, loc));\n }\n \n+std::unique_ptr<Expr>\n+AstBuilder::struct_expr_struct (std::string struct_name)\n+{\n+  return std::unique_ptr<Expr> (\n+    new StructExprStruct (path_in_expression ({struct_name}), {}, {}, loc));\n+}\n+\n std::unique_ptr<Expr>\n AstBuilder::struct_expr (std::string struct_name,\n \t\t\t std::vector<std::unique_ptr<StructExprField>> &&fields)\n@@ -142,5 +142,11 @@ AstBuilder::field_access (std::unique_ptr<Expr> &&instance, std::string field)\n     new FieldAccessExpr (std::move (instance), field, {}, loc));\n }\n \n+std::unique_ptr<Pattern>\n+AstBuilder::wildcard ()\n+{\n+  return std::unique_ptr<Pattern> (new WildcardPattern (loc));\n+}\n+\n } // namespace AST\n } // namespace Rust"}, {"sha": "524b3905bbda79719fd442e879ea2002c647535c", "filename": "gcc/rust/ast/rust-ast-builder.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/gcc%2Frust%2Fast%2Frust-ast-builder.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/gcc%2Frust%2Fast%2Frust-ast-builder.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-builder.h?ref=d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "patch": "@@ -100,6 +100,9 @@ class AstBuilder\n   std::unique_ptr<Expr> field_access (std::unique_ptr<Expr> &&instance,\n \t\t\t\t      std::string field);\n \n+  /* Create a wildcard pattern (`_`) */\n+  std::unique_ptr<Pattern> wildcard ();\n+\n private:\n   /**\n    * Location of the generated AST nodes"}, {"sha": "8529bac50193628662b45caa8c7ab9e5c12cda2e", "filename": "gcc/rust/expand/rust-derive-clone.cc", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/gcc%2Frust%2Fexpand%2Frust-derive-clone.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/gcc%2Frust%2Fexpand%2Frust-derive-clone.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-derive-clone.cc?ref=d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "patch": "@@ -155,8 +155,29 @@ DeriveClone::visit_enum (Enum &item)\n void\n DeriveClone::visit_union (Union &item)\n {\n-  rust_sorry_at (item.get_locus (), \"cannot derive %qs for these items yet\",\n-\t\t \"Clone\");\n+  // FIXME: Should be $crate::core::clone::AssertParamIsCopy (or similar)\n+\n+  // <Self>\n+  auto arg = GenericArg::create_type (builder.single_type_path (\"Self\"));\n+\n+  // AssertParamIsCopy::<Self>\n+  auto type = std::unique_ptr<TypePathSegment> (\n+    new TypePathSegmentGeneric (PathIdentSegment (\"AssertParamIsCopy\", loc),\n+\t\t\t\tfalse, GenericArgs ({}, {arg}, {}, loc), loc));\n+  auto type_paths = std::vector<std::unique_ptr<TypePathSegment>> ();\n+  type_paths.emplace_back (std::move (type));\n+\n+  auto full_path\n+    = std::unique_ptr<Type> (new TypePath ({std::move (type_paths)}, loc));\n+\n+  auto stmts = std::vector<std::unique_ptr<Stmt>> ();\n+  stmts.emplace_back (\n+    builder.let (builder.wildcard (), std::move (full_path), nullptr));\n+  auto tail_expr = builder.deref (builder.identifier (\"self\"));\n+\n+  auto block = builder.block (std::move (stmts), std::move (tail_expr));\n+\n+  expanded = clone_impl (clone_fn (std::move (block)), item.get_identifier ());\n }\n \n } // namespace AST"}, {"sha": "564555f896f2f5ebd1f8435fe7748f3757ee24e1", "filename": "gcc/testsuite/rust/compile/derive_macro4.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/gcc%2Ftestsuite%2Frust%2Fcompile%2Fderive_macro4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/gcc%2Ftestsuite%2Frust%2Fcompile%2Fderive_macro4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fderive_macro4.rs?ref=d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "patch": "@@ -0,0 +1,16 @@\n+pub trait Copy {}\n+pub trait Clone {\n+    fn clone(&self) -> Self;\n+}\n+\n+struct PhantomData<T>;\n+\n+pub struct AssertParamIsCopy<T: Copy> {\n+    _field: PhantomData<T>,\n+}\n+\n+#[derive(Clone)] // { dg-error \"bounds not satisfied for U .Copy. is not satisfied\" }\n+union U {\n+    i: i32,\n+    f: f64,\n+}"}, {"sha": "0254754f7aecc31f1a81dee11b10648d7a645f74", "filename": "gcc/testsuite/rust/compile/derive_macro6.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/gcc%2Ftestsuite%2Frust%2Fcompile%2Fderive_macro6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca/gcc%2Ftestsuite%2Frust%2Fcompile%2Fderive_macro6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fderive_macro6.rs?ref=d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "patch": "@@ -0,0 +1,21 @@\n+pub trait Copy {}\n+pub trait Clone {\n+    fn clone(&self) -> Self;\n+}\n+\n+#[lang = \"phantom_data\"]\n+pub struct PhantomData<T>;\n+\n+pub struct AssertParamIsCopy<T: Copy> {\n+    pub _field: PhantomData<T>,\n+}\n+\n+impl Copy for i32 {}\n+impl Copy for i64 {}\n+impl Copy for U {}\n+\n+#[derive(Clone)]\n+union U {\n+    i: i32,\n+    f: f64,\n+}"}]}