{"sha": "9312aecc037c2f04b44be4c6e2239a7708e14c19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxMmFlY2MwMzdjMmYwNGI0NGJlNGM2ZTIyMzlhNzcwOGUxNGMxOQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2001-07-11T18:36:38Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2001-07-11T18:36:38Z"}, "message": "stmt.c (emit_case_nodes): Widen high and low instead of new_bound and low to get correct sign extension...\n\n\t* stmt.c (emit_case_nodes): Widen high and low instead of new_bound\n\tand low to get correct sign extension in low+high test.\n\nFrom-SVN: r43945", "tree": {"sha": "70de8e19523b1a95028ffc5ddd40a9d49f9cc426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70de8e19523b1a95028ffc5ddd40a9d49f9cc426"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9312aecc037c2f04b44be4c6e2239a7708e14c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9312aecc037c2f04b44be4c6e2239a7708e14c19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9312aecc037c2f04b44be4c6e2239a7708e14c19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9312aecc037c2f04b44be4c6e2239a7708e14c19/comments", "author": null, "committer": null, "parents": [{"sha": "4b9664e2764caf8afa4af0538392b3e4e0f12a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b9664e2764caf8afa4af0538392b3e4e0f12a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b9664e2764caf8afa4af0538392b3e4e0f12a3e"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "227d48cf1083bb4e3768736b094a759856fdc17b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9312aecc037c2f04b44be4c6e2239a7708e14c19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9312aecc037c2f04b44be4c6e2239a7708e14c19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9312aecc037c2f04b44be4c6e2239a7708e14c19", "patch": "@@ -1,3 +1,8 @@\n+2001-07-11  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* stmt.c (emit_case_nodes): Widen high and low instead of new_bound\n+\tand low to get correct sign extension in low+high test.\n+\n 2001-07-11  Janis Johnson <janis@us.ibm.com>\n \n \t* gcov.c (arcdata): Use gcov_type to fix branch percentage"}, {"sha": "1097e79b9d3b03ca30040c7c68bc18eddf4f54a0", "filename": "gcc/stmt.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9312aecc037c2f04b44be4c6e2239a7708e14c19/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9312aecc037c2f04b44be4c6e2239a7708e14c19/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=9312aecc037c2f04b44be4c6e2239a7708e14c19", "patch": "@@ -6370,26 +6370,23 @@ emit_case_nodes (index, node, default_label, index_type)\n \t    }\n \t  else if (!low_bound && !high_bound)\n \t    {\n-\t      /* Instead of doing two branches, emit\n-\t\t (index-low) <= (high-low).  */\n-\t      tree new_bound = fold (build (MINUS_EXPR, index_type, node->high,\n-\t\t\t\t\t    node->low));\n-\t      rtx new_index;\n-\t      \n+\t      /* Widen LOW and HIGH to the same width as INDEX.  */\n+\t      tree type = type_for_mode (mode, unsignedp);\n+\t      tree low = build1 (CONVERT_EXPR, type, node->low);\n+\t      tree high = build1 (CONVERT_EXPR, type, node->high);\n+\t      rtx new_index, new_bound;\n+\n+\t      /* Instead of doing two branches, emit one unsigned branch for\n+\t\t (index-low) > (high-low).  */\n \t      new_index = expand_binop (mode, sub_optab, index,\n-\t\t\t\t        convert_modes (mode, imode,\n-\t\t\t\t\t  expand_expr (node->low, NULL_RTX,\n-\t\t\t\t\t\t       mode, 0),\n-\t\t\t\t\t  unsignedp),\n+\t\t\t\t\texpand_expr (low, NULL_RTX, mode, 0),\n \t\t\t\t        NULL_RTX, unsignedp, OPTAB_WIDEN);\n+\t      new_bound = expand_expr (fold (build (MINUS_EXPR, type,\n+\t\t\t\t\t\t    high, low)),\n+\t\t\t\t       NULL_RTX, mode, 0);\n \t\t\t\t\n-\t      emit_cmp_and_jump_insns (new_index,\n-\t\t\t\t       convert_modes (mode, imode,\n-\t\t\t\t\t expand_expr (new_bound, NULL_RTX,\n-\t\t\t\t\t\t      mode, 0),\n-\t\t\t\t\t unsignedp),\n-\t\t\t\t       GT, NULL_RTX, mode, 1, 0,\n-\t\t\t\t       default_label);\n+\t      emit_cmp_and_jump_insns (new_index, new_bound, GT, NULL_RTX,\n+\t\t\t\t       mode, 1, 0, default_label);\n \t    }\n \n \t  emit_jump (label_rtx (node->code_label));"}]}