{"sha": "f8eb41cc0d403d8ff9859aa17c96ee62115c240d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhlYjQxY2MwZDQwM2Q4ZmY5ODU5YWExN2M5NmVlNjIxMTVjMjQwZA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-02-20T03:29:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-02-20T03:29:00Z"}, "message": "pa.c (move_operand): Accept code to load the address of a symbol out of the DLT as a valid move operand.\n\n        * pa.c (move_operand): Accept code to load the address of a\n        symbol out of the DLT as a valid move operand.\n        (print_operand, case 'A'): New to handle generating a DLT\n        reference for a LO_SUM expression.\n        * pa.h (EXTRA_CONSTRAINT): Handle 'A' for DLT LO_SUM references.\n        * pa.md (movsi, movdi patterns): Allow DLT LO_SUM references.\n\nFrom-SVN: r39914", "tree": {"sha": "676fa8f9ba93c0aaf395ea1555033e04cff21a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/676fa8f9ba93c0aaf395ea1555033e04cff21a42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8eb41cc0d403d8ff9859aa17c96ee62115c240d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8eb41cc0d403d8ff9859aa17c96ee62115c240d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8eb41cc0d403d8ff9859aa17c96ee62115c240d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8eb41cc0d403d8ff9859aa17c96ee62115c240d/comments", "author": null, "committer": null, "parents": [{"sha": "4d88a68a065d772226606291904b7f5a0a9208af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d88a68a065d772226606291904b7f5a0a9208af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d88a68a065d772226606291904b7f5a0a9208af"}], "stats": {"total": 100, "additions": 48, "deletions": 52}, "files": [{"sha": "e6ebfe761f1bc7c3b35bdc327a7d419356ed61fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8eb41cc0d403d8ff9859aa17c96ee62115c240d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8eb41cc0d403d8ff9859aa17c96ee62115c240d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8eb41cc0d403d8ff9859aa17c96ee62115c240d", "patch": "@@ -1,3 +1,12 @@\n+Mon Feb 19 20:30:16 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.c (move_operand): Accept code to load the address of a\n+\tsymbol out of the DLT as a valid move operand.\n+\t(print_operand, case 'A'): New to handle generating a DLT\n+\treference for a LO_SUM expression.\n+\t* pa.h (EXTRA_CONSTRAINT): Handle 'A' for DLT LO_SUM references.\n+\t* pa.md (movsi, movdi patterns): Allow DLT LO_SUM references.\n+\n 2001-02-19  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* README, cpp.texi, gcc.texi, version.c: Update version number to"}, {"sha": "95a10cca18f1e2c19fb6b819501c5d01b8bc7828", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8eb41cc0d403d8ff9859aa17c96ee62115c240d/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8eb41cc0d403d8ff9859aa17c96ee62115c240d/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f8eb41cc0d403d8ff9859aa17c96ee62115c240d", "patch": "@@ -377,13 +377,14 @@ move_operand (op, mode)\n \n   op = XEXP (op, 0);\n \n-  /* The LO_SUM part of a DLT reference is not considered a move_operand;\n-     we must reject it here since it must be accepted by memory_address_p.  */\n+  /* We consider a LO_SUM DLT reference a move_operand now since it has\n+     been merged into the normal movsi/movdi patterns.  */\n   if (GET_CODE (op) == LO_SUM\n       && GET_CODE (XEXP (op, 0)) == REG\n       && REG_OK_FOR_BASE_P (XEXP (op, 0))\n-      && GET_CODE (XEXP (op, 1)) == UNSPEC)\n-    return 0;\n+      && GET_CODE (XEXP (op, 1)) == UNSPEC\n+      && GET_MODE (op) == Pmode)\n+    return 1;\n \n   /* Since move_operand is only used for source operands, we can always\n      allow scaled indexing!  */\n@@ -3883,6 +3884,17 @@ print_operand (file, x, code)\n \t}\n       else\n \tbreak;\n+    case 'A':\n+      {\n+\trtx xoperands[2];\n+\n+\txoperands[0] = XEXP (XEXP (x, 0), 0);\n+\txoperands[1] = XVECEXP (XEXP (XEXP (x, 0), 1), 0, 0);\n+\toutput_global_address (file, xoperands[1], 0);\n+        fprintf (file, \"(%s)\", reg_names [REGNO (xoperands[0])]);\n+\treturn;\n+      }\n+\n     case 'C':\t\t\t/* Plain (C)ondition */\n     case 'X':\n       switch (GET_CODE (x))"}, {"sha": "fbe0975be12cf2e1e81387666fc4a54bef51b8dd", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8eb41cc0d403d8ff9859aa17c96ee62115c240d/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8eb41cc0d403d8ff9859aa17c96ee62115c240d/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=f8eb41cc0d403d8ff9859aa17c96ee62115c240d", "patch": "@@ -1187,8 +1187,15 @@ extern int may_call_alloca;\n \t\t|| GET_CODE (XEXP (XEXP (OP, 0), 1)) == MULT)))\\\n    : ((C) == 'U' ?\t\t\t\t\t\\\n       (GET_CODE (OP) == CONST_INT && INTVAL (OP) == 63)\t\\\n+   : ((C) == 'A' ?\t\t\t\t\t\\\n+      (GET_CODE (OP) == MEM\t\t\t\t\\\n+       && GET_CODE (XEXP (OP, 0)) == LO_SUM\t\t\\\n+       && GET_CODE (XEXP (XEXP (OP, 0), 0)) == REG\t\\\n+       && REG_OK_FOR_BASE_P (XEXP (XEXP (OP, 0), 0))\t\\\n+       && GET_CODE (XEXP (XEXP (OP, 0), 1)) == UNSPEC\t\t\\\n+       && GET_MODE (XEXP (OP, 0)) == Pmode)\t\t\t\\\n    : ((C) == 'S' ?\t\t\t\t\t\\\n-      (GET_CODE (OP) == CONST_INT && INTVAL (OP) == 31) : 0)))))\n+      (GET_CODE (OP) == CONST_INT && INTVAL (OP) == 31) : 0))))))\n \t\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx"}, {"sha": "22b443d7105cf72c6013ccd1064837fd8de5dbf8", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 15, "deletions": 47, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8eb41cc0d403d8ff9859aa17c96ee62115c240d/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8eb41cc0d403d8ff9859aa17c96ee62115c240d/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=f8eb41cc0d403d8ff9859aa17c96ee62115c240d", "patch": "@@ -2098,13 +2098,14 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t\t\"=r,r,r,r,r,Q,*q,!f,f,*TR\")\n+\t\t\t\t\"=r,r,r,r,r,r,Q,*q,!f,f,*TR\")\n \t(match_operand:SI 1 \"move_operand\"\n-\t\t\t\t\"r,J,N,K,RQ,rM,rM,!fM,*RT,f\"))]\n+\t\t\t\t\"A,r,J,N,K,RQ,rM,rM,!fM,*RT,f\"))]\n   \"(register_operand (operands[0], SImode)\n     || reg_or_0_operand (operands[1], SImode))\n    && ! TARGET_SOFT_FLOAT\"\n   \"@\n+   ldw RT'%A1,%0\n    copy %1,%0\n    ldi %1,%0\n    ldil L'%1,%0\n@@ -2115,29 +2116,30 @@\n    fcpy,sgl %f1,%0\n    fldw%F1 %1,%0\n    fstw%F0 %1,%0\"\n-  [(set_attr \"type\" \"move,move,move,shift,load,store,move,fpalu,fpload,fpstore\")\n+  [(set_attr \"type\" \"load,move,move,move,shift,load,store,move,fpalu,fpload,fpstore\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t\t\"=r,r,r,r,r,Q,*q\")\n+\t\t\t\t\"=r,r,r,r,r,r,Q,*q\")\n \t(match_operand:SI 1 \"move_operand\"\n-\t\t\t\t\"r,J,N,K,RQ,rM,rM\"))]\n+\t\t\t\t\"A,r,J,N,K,RQ,rM,rM\"))]\n   \"(register_operand (operands[0], SImode)\n     || reg_or_0_operand (operands[1], SImode))\n    && TARGET_SOFT_FLOAT\"\n   \"@\n+   ldw RT'%A1,%0\n    copy %1,%0\n    ldi %1,%0\n    ldil L'%1,%0\n    {zdepi|depwi,z} %Z1,%0\n    ldw%M1 %1,%0\n    stw%M0 %r1,%0\n    mtsar %r1\"\n-  [(set_attr \"type\" \"move,move,move,move,load,store,move\")\n+  [(set_attr \"type\" \"load,move,move,move,move,load,store,move\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2346,41 +2348,6 @@\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n-; We need this to make sure CSE doesn't simplify a memory load with a\n-; symbolic address, whose content it think it knows.  For PIC, what CSE\n-; think is the real value will be the address of that value.\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(mem:SI\n-\t  (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t     (unspec:SI\n-\t\t\t[(match_operand:SI 2 \"symbolic_operand\" \"\")] 0))))]\n-  \"\"\n-  \"*\n-{\n-  if (flag_pic != 2)\n-    abort ();\n-  return \\\"ldw RT'%G2(%1),%0\\\";\n-}\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(mem:DI\n-\t  (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t     (unspec:DI\n-\t\t\t[(match_operand:DI 2 \"symbolic_operand\" \"\")] 0))))]\n-  \"TARGET_64BIT\"\n-  \"*\n-{\n-  if (flag_pic != 2)\n-    abort ();\n-  return \\\"ldd RT'%G2(%1),%0\\\";\n-}\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"4\")])\n-\n ;; Always use addil rather than ldil;add sequences.  This allows the\n ;; HP linker to eliminate the dp relocation if the symbolic operand\n ;; lives in the TEXT space.\n@@ -3156,13 +3123,14 @@\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t\t\"=r,r,r,r,r,Q,*q,!f,f,*TR\")\n+\t\t\t\t\"=r,r,r,r,r,r,Q,*q,!f,f,*TR\")\n \t(match_operand:DI 1 \"move_operand\"\n-\t\t\t\t\"r,J,N,K,RQ,rM,rM,!fM,*RT,f\"))]\n+\t\t\t\t\"A,r,J,N,K,RQ,rM,rM,!fM,*RT,f\"))]\n   \"(register_operand (operands[0], DImode)\n     || reg_or_0_operand (operands[1], DImode))\n    && ! TARGET_SOFT_FLOAT && TARGET_64BIT\"\n   \"@\n+   ldd RT'%A1,%0\n    copy %1,%0\n    ldi %1,%0\n    ldil L'%1,%0\n@@ -3173,9 +3141,9 @@\n    fcpy,dbl %f1,%0\n    fldd%F1 %1,%0\n    fstd%F0 %1,%0\"\n-  [(set_attr \"type\" \"move,move,move,shift,load,store,move,fpalu,fpload,fpstore\")\n+  [(set_attr \"type\" \"load,move,move,move,shift,load,store,move,fpalu,fpload,fpstore\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\""}]}