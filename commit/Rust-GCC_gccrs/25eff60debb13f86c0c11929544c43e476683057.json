{"sha": "25eff60debb13f86c0c11929544c43e476683057", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVlZmY2MGRlYmIxM2Y4NmMwYzExOTI5NTQ0YzQzZTQ3NjY4MzA1Nw==", "commit": {"author": {"name": "Cary Coutant", "email": "ccoutant@google.com", "date": "2014-07-01T21:35:41Z"}, "committer": {"name": "Cary Coutant", "email": "ccoutant@gcc.gnu.org", "date": "2014-07-01T21:35:41Z"}, "message": "This patch fixes a couple of ICEs when using -gsplit-dwarf.\n\nWhen compiling a small-enough compilation unit that has no address table\nentries, but complex enough that -freorder-blocks-and-partition produces\nlocation lists, dwarf2out_finish does not call index_location_lists, but\noptimize_location_lists will later assume that the addr_index_table has\nbeen indexed.\nGoogle ref: b/15417905\n\nWhen resolve_addr_in_expr replaces a CONST_STRING rtx, it directly\nupdates the pointer to the old expression with the new one. In the\ncase of a DW_OP_GNU_addr_index or DW_OP_GNU_const_index, that pointer\nmay be in an address table entry, which is keyed by the rtx. Instead\nof directly replacing the pointer, we need to remove the old address\ntable entry (i.e., decrement its reference count), and add a new one.\nGoogle ref: b/15957101\n\ngcc/\n\t* dwarf2out.c (remove_addr_table_entry): Remove unnecessary hash table\n        lookup.\n\t(resolve_addr_in_expr): When replacing the rtx in a location list\n        entry, get a new address table entry.\n\t(dwarf2out_finish): Call index_location_lists even if there are no\n        addr_index_table entries yet.\n\nFrom-SVN: r212211", "tree": {"sha": "3da341b9b9019236c6bf551ddc093ff2e50a588d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3da341b9b9019236c6bf551ddc093ff2e50a588d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25eff60debb13f86c0c11929544c43e476683057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25eff60debb13f86c0c11929544c43e476683057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25eff60debb13f86c0c11929544c43e476683057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25eff60debb13f86c0c11929544c43e476683057/comments", "author": null, "committer": null, "parents": [{"sha": "454a17a31e4d68df961e769fc2b9233204bb3adc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/454a17a31e4d68df961e769fc2b9233204bb3adc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/454a17a31e4d68df961e769fc2b9233204bb3adc"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "d6f8553738a729eb518cf78281c2ccf5342938d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25eff60debb13f86c0c11929544c43e476683057/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25eff60debb13f86c0c11929544c43e476683057/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25eff60debb13f86c0c11929544c43e476683057", "patch": "@@ -1,3 +1,12 @@\n+2014-07-01  Cary Coutant  <ccoutant@google.com>\n+\n+\t* dwarf2out.c (remove_addr_table_entry): Remove unnecessary hash table\n+        lookup.\n+\t(resolve_addr_in_expr): When replacing the rtx in a location list\n+        entry, get a new address table entry.\n+\t(dwarf2out_finish): Call index_location_lists even if there are no\n+        addr_index_table entries yet.\n+\n 2014-07-01  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* config/i386/winnt.c (i386_pe_section_type_flags): Revert previous"}, {"sha": "b65b37ee77ca613db7995576a1f38c7ccdd80c86", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25eff60debb13f86c0c11929544c43e476683057/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25eff60debb13f86c0c11929544c43e476683057/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=25eff60debb13f86c0c11929544c43e476683057", "patch": "@@ -4283,13 +4283,10 @@ add_addr_table_entry (void *addr, enum ate_kind kind)\n static void\n remove_addr_table_entry (addr_table_entry *entry)\n {\n-  addr_table_entry *node;\n-\n   gcc_assert (dwarf_split_debug_info && addr_index_table);\n-  node = (addr_table_entry *) htab_find (addr_index_table, entry);\n   /* After an index is assigned, the table is frozen.  */\n-  gcc_assert (node->refcount > 0 && node->index == NO_INDEX_ASSIGNED);\n-  node->refcount--;\n+  gcc_assert (entry->refcount > 0 && entry->index == NO_INDEX_ASSIGNED);\n+  entry->refcount--;\n }\n \n /* Given a location list, remove all addresses it refers to from the\n@@ -23288,11 +23285,16 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n \tbreak;\n       case DW_OP_GNU_addr_index:\n       case DW_OP_GNU_const_index:\n-\tif ((loc->dw_loc_opc == DW_OP_GNU_addr_index\n-\t     || (loc->dw_loc_opc == DW_OP_GNU_const_index && loc->dtprel))\n-\t    && resolve_one_addr (&loc->dw_loc_oprnd1.val_entry->addr.rtl,\n-\t\t\t\t NULL))\n-\t  return false;\n+\tif (loc->dw_loc_opc == DW_OP_GNU_addr_index\n+            || (loc->dw_loc_opc == DW_OP_GNU_const_index && loc->dtprel))\n+          {\n+            rtx rtl = loc->dw_loc_oprnd1.val_entry->addr.rtl;\n+            if (resolve_one_addr (&rtl, NULL))\n+              return false;\n+            remove_addr_table_entry (loc->dw_loc_oprnd1.val_entry);\n+            loc->dw_loc_oprnd1.val_entry =\n+                add_addr_table_entry (rtl, ate_kind_rtx);\n+          }\n \tbreak;\n       case DW_OP_const4u:\n       case DW_OP_const8u:\n@@ -24391,18 +24393,23 @@ dwarf2out_finish (const char *filename)\n \t\t   dwarf_strict ? DW_AT_macro_info : DW_AT_GNU_macros,\n \t\t   macinfo_section_label);\n \n-  if (dwarf_split_debug_info && addr_index_table != NULL)\n+  if (dwarf_split_debug_info)\n     {\n       /* optimize_location_lists calculates the size of the lists,\n          so index them first, and assign indices to the entries.\n          Although optimize_location_lists will remove entries from\n          the table, it only does so for duplicates, and therefore\n          only reduces ref_counts to 1.  */\n-      unsigned int index = 0;\n       index_location_lists (comp_unit_die ());\n-      htab_traverse_noresize (addr_index_table,\n-                              index_addr_table_entry, &index);\n+\n+      if (addr_index_table != NULL)\n+        {\n+          unsigned int index = 0;\n+          htab_traverse_noresize (addr_index_table,\n+                                  index_addr_table_entry, &index);\n+        }\n     }\n+\n   if (have_location_lists)\n     optimize_location_lists (comp_unit_die ());\n "}]}