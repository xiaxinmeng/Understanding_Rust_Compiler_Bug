{"sha": "e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdkNmQ4ZjlmN2I2ODdjOGU3NDM4NTIzZDdkNmY3YTUzOWVjNzI4Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-07-10T17:28:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-07-11T19:38:10Z"}, "message": "compiler: handle aliases to pointer types with interfaces\n\nTest case is https://golang.org/cl/241997.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/241998", "tree": {"sha": "ef563f5aa429ee33e24e7f4abaf82f6f46387397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef563f5aa429ee33e24e7f4abaf82f6f46387397"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b4bbc17077ac12fc9742ade4919a6de0277ac8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4bbc17077ac12fc9742ade4919a6de0277ac8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4bbc17077ac12fc9742ade4919a6de0277ac8c"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "c65fd8eecfc29ff3ec40ff99efdbdbc75e700f91", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287", "patch": "@@ -1,4 +1,4 @@\n-2ad0970e9da95024110cd3244e9e21313af70a5f\n+ce70fa16a73e3f162de01deab6b5d17783e6b76b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "7f65b4a5db2e07b411b144d2310fb473a278e16e", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=e7d6d8f9f7b687c8e7438523d7d6f7a539ec7287", "patch": "@@ -9208,6 +9208,7 @@ Interface_type::implements_interface(const Type* t, std::string* reason) const\n   if (this->all_methods_ == NULL)\n     return true;\n \n+  t = t->unalias();\n   bool is_pointer = false;\n   const Named_type* nt = t->named_type();\n   const Struct_type* st = t->struct_type();\n@@ -9220,6 +9221,7 @@ Interface_type::implements_interface(const Type* t, std::string* reason) const\n \t{\n \t  // If T is a pointer to a named type, then we need to look at\n \t  // the type to which it points.\n+\t  pt = pt->unalias();\n \t  is_pointer = true;\n \t  nt = pt->named_type();\n \t  st = pt->struct_type();\n@@ -10408,19 +10410,24 @@ Named_type::interface_method_table(Interface_type* interface, bool is_pointer)\n     return Expression::make_error(this->location_);\n   if (this->is_alias_)\n     {\n-      if (this->type_->named_type() != NULL)\n+      Type* t = this->type_;\n+      if (!is_pointer && t->points_to() != NULL)\n+\t{\n+\t  t = t->points_to();\n+\t  is_pointer = true;\n+\t}\n+      if (t->named_type() != NULL)\n \t{\n \t  if (this->seen_alias_)\n \t    return Expression::make_error(this->location_);\n \t  this->seen_alias_ = true;\n-\t  Named_type* nt = this->type_->named_type();\n+\t  Named_type* nt = t->named_type();\n \t  Expression* ret = nt->interface_method_table(interface, is_pointer);\n \t  this->seen_alias_ = false;\n \t  return ret;\n \t}\n-      if (this->type_->struct_type() != NULL)\n-\treturn this->type_->struct_type()->interface_method_table(interface,\n-\t\t\t\t\t\t\t\t  is_pointer);\n+      if (t->struct_type() != NULL)\n+\treturn t->struct_type()->interface_method_table(interface, is_pointer);\n       go_unreachable();\n     }\n   return Type::interface_method_table(this, interface, is_pointer,"}]}