{"sha": "9cd1665b997d3cdf4d6984b6268d3d9da19dcba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNkMTY2NWI5OTdkM2NkZjRkNjk4NGI2MjY4ZDNkOWRhMTlkY2JhOA==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2018-06-28T18:50:12Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2018-06-28T18:50:12Z"}, "message": "Fix insn length for pdp11 shift patterns.\n\n\t* config/pdp11/pdp11-protos.h (pdp11_shift_length): New function.\n\t* config/pdp11/pdp11.c (pdp11_shift_length): New function.\n\t* config/pdp11/pdp11.h (ADJUST_INSN_LENGTH): Remove.\n\t* config/pdp11/pdp11.md: Correct \"length\" attribute calculation\n\tfor shift insn patterns.\n\nFrom-SVN: r262227", "tree": {"sha": "b72a5172e0ecaaf1d6250379e74bd185fcb3a7b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b72a5172e0ecaaf1d6250379e74bd185fcb3a7b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/comments", "author": null, "committer": null, "parents": [{"sha": "a0e8e6308fa856a7783f4c60938f0c57521cb473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e8e6308fa856a7783f4c60938f0c57521cb473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e8e6308fa856a7783f4c60938f0c57521cb473"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "1edab9e2be65ddd45af6caf7e83a22b171103d7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cd1665b997d3cdf4d6984b6268d3d9da19dcba8", "patch": "@@ -1,3 +1,11 @@\n+2018-06-28  Paul Koning  <ni1d@arrl.net>\n+\n+\t* config/pdp11/pdp11-protos.h (pdp11_shift_length): New function.\n+\t* config/pdp11/pdp11.c (pdp11_shift_length): New function.\n+\t* config/pdp11/pdp11.h (ADJUST_INSN_LENGTH): Remove.\n+\t* config/pdp11/pdp11.md: Correct \"length\" attribute calculation\n+\tfor shift insn patterns.\n+\n 2018-06-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cgraph.c (cgraph_node::get_body): Replace assignments to"}, {"sha": "754a29df40b728468bd7780308e3b2dee97b06c9", "filename": "gcc/config/pdp11/pdp11-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h?ref=9cd1665b997d3cdf4d6984b6268d3d9da19dcba8", "patch": "@@ -41,6 +41,7 @@ extern machine_mode pdp11_cc_mode (enum rtx_code, rtx, rtx);\n extern bool pdp11_expand_shift (rtx *, rtx (*) (rtx, rtx, rtx),\n \t\t\t\trtx (*) (rtx, rtx, rtx));\n extern const char * pdp11_assemble_shift (rtx *, machine_mode, int);\n+extern int pdp11_shift_length (rtx *, machine_mode, int, bool);\n extern bool pdp11_small_shift (int);\n \n #endif /* RTX_CODE */"}, {"sha": "142a5655114ee886637a9b7606ddd57057d84c59", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=9cd1665b997d3cdf4d6984b6268d3d9da19dcba8", "patch": "@@ -2020,6 +2020,35 @@ pdp11_assemble_shift (rtx *operands, machine_mode m, int code)\n   return \"\";\n }\n \n+/* Figure out the length of the instructions that will be produced for\n+   the given operands by pdp11_assemble_shift above.  */\n+int\n+pdp11_shift_length (rtx *operands, machine_mode m, int code, bool simple_operand_p)\n+{\n+  int shift_size;\n+\n+  /* Shift by 1 is 2 bytes if simple operand, 4 bytes if 2-word addressing mode.  */\n+  shift_size = simple_operand_p ? 2 : 4;\n+\n+  /* In SImode, two shifts are needed per data item.  */\n+  if (m == E_SImode)\n+    shift_size *= 2;\n+\n+  /* If shifting by a small constant, the loop is unrolled by the\n+     shift count.  Otherwise, account for the size of the decrement\n+     and branch.  */\n+  if (CONSTANT_P (operands[2]) && pdp11_small_shift (INTVAL (operands[2])))\n+    shift_size *= INTVAL (operands[2]);\n+  else\n+    shift_size += 4;\n+\n+  /* Logical right shift takes one more instruction (CLC).  */\n+  if (code == LSHIFTRT)\n+    shift_size += 2;\n+\n+  return shift_size;\n+}\n+\n /* Worker function for TARGET_TRAMPOLINE_INIT.\n \n    trampoline - how should i do it in separate i+d ? "}, {"sha": "67386cab724c97295313e65a29f8b0c211358616", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=9cd1665b997d3cdf4d6984b6268d3d9da19dcba8", "patch": "@@ -123,22 +123,6 @@ extern const struct real_format pdp11_d_format;\n /* Define this if move instructions will actually fail to work\n    when given unaligned data.  */\n #define STRICT_ALIGNMENT 1\n-\n-/* Adjust the length of shifts by small constant amounts.  The base\n-   value (in \"length\" on input) is the length of a shift by one, not\n-   including the CLC in logical shifts.  */\n-#define ADJUST_INSN_LENGTH(insn, length) \\\n-  if ((GET_CODE (insn) == ASHIFT ||\t \\\n-       GET_CODE (insn) == ASHIFTRT || \\\n-       GET_CODE (insn) == LSHIFTRT) && \\\n-      GET_CODE (XEXP (insn, 2)) == CONST_INT && \\\n-      pdp11_small_shift (XINT (insn, 2))) \\\n-    {\t\t\t\t\t  \\\n-      if (GET_CODE (insn) == LSHIFTRT)\t  \\\n-\tlength = (length * XINT (insn, 2)) + 2;\t\\\n-      else \\\n-\tlength *= XINT (insn, 2); \\\n-    }\n \f\n /* Standard register usage.  */\n "}, {"sha": "6592a2cb806a0f8bc96a16d29ca9ee049e8c8562", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd1665b997d3cdf4d6984b6268d3d9da19dcba8/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=9cd1665b997d3cdf4d6984b6268d3d9da19dcba8", "patch": "@@ -1297,18 +1297,15 @@\n ;; used to reduce the amount of very similar code.\n ;;\n ;; First the insns used for small constant shifts.\n-;\n-;; The \"length\" attribute values are modified by the ADJUST_INSN_LENGTH\n-;; macro for the small constant shift case (first two alternatives).\n-;; For those, the value coded in the length attribute is the cost of just\n-;; the shift for a single shift.\n (define_insn \"<code><mode>_sc\"\n   [(set (match_operand:QHSint 0 \"nonimmediate_operand\" \"=rD,Q\")\n \t(SHF:QHSint (match_operand:QHSint 1 \"general_operand\" \"0,0\")\n \t            (match_operand:HI 2 \"expand_shift_operand\" \"O,O\")))]\n   \"\"\n   \"* return pdp11_assemble_shift (operands, <QHSint:mname>, <CODE>);\"\n-  [(set_attr \"length\" \"2,4\")])\n+  [(set (attr \"length\")\n+\t(symbol_ref \"pdp11_shift_length (operands, <QHSint:mname>, \n+                                         <CODE>, which_alternative == 0)\"))])\n \n ;; Next, shifts that are done as a loop on base (11/10 class) machines.\n ;; This applies to shift counts too large to unroll, or variable shift\n@@ -1320,7 +1317,9 @@\n    (clobber (match_dup 2))]\n   \"\"\n   \"* return pdp11_assemble_shift (operands, <QHSint:mname>, <CODE>);\"\n-  [(set_attr \"length\" \"2,4\")])\n+  [(set (attr \"length\")\n+\t(symbol_ref \"pdp11_shift_length (operands, <QHSint:mname>, \n+                                         <CODE>, which_alternative == 0)\"))])\n \n ;; Next the insns that use the extended instructions ash and ashc.\n ;; Note that these are just left shifts, and HI/SI only.  (Right shifts"}]}