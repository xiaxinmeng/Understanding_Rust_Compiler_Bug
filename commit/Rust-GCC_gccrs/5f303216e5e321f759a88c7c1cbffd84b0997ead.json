{"sha": "5f303216e5e321f759a88c7c1cbffd84b0997ead", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzMDMyMTZlNWUzMjFmNzU5YTg4YzdjMWNiZmZkODRiMDk5N2VhZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-23T21:41:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-23T21:41:08Z"}, "message": "Fix testsuite bugs\n\nOne of the static assertions in 20_util/function_objects/invoke/1.cc was\nwrong, but didn't fail because by default it was compiled with\n-std=gnu++14 which didn't use that static assertion. Split out the C++17\nparts to a new file that always runs with -std=gnu++17, so those checks\nare always done.\n\nThe 23_containers/unordered_set/allocator/ext_ptr.cc test is supposed to\nbe a run-time test but was unintentionally compile-only.\n\n\t* testsuite/20_util/function_objects/invoke/1.cc: Move C++17-specific\n\ttests to ...\n\t* testsuite/20_util/function_objects/invoke/3.cc: New test.\n\t* testsuite/23_containers/unordered_set/allocator/ext_ptr.cc: Change\n\t\"compile\" test to \"run\".\n\nFrom-SVN: r271584", "tree": {"sha": "7c0f6ee0d52382f510cea9ee0717d81598baedd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c0f6ee0d52382f510cea9ee0717d81598baedd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f303216e5e321f759a88c7c1cbffd84b0997ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f303216e5e321f759a88c7c1cbffd84b0997ead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f303216e5e321f759a88c7c1cbffd84b0997ead", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f303216e5e321f759a88c7c1cbffd84b0997ead/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971"}], "stats": {"total": 95, "additions": 69, "deletions": 26}, "files": [{"sha": "90043c55f1a256791c1f14499a30221917854d2f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f303216e5e321f759a88c7c1cbffd84b0997ead/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f303216e5e321f759a88c7c1cbffd84b0997ead/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5f303216e5e321f759a88c7c1cbffd84b0997ead", "patch": "@@ -1,5 +1,11 @@\n 2019-05-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/20_util/function_objects/invoke/1.cc: Move C++17-specific\n+\ttests to ...\n+\t* testsuite/20_util/function_objects/invoke/3.cc: New test.\n+\t* testsuite/23_containers/unordered_set/allocator/ext_ptr.cc: Change\n+\t\"compile\" test to \"run\".\n+\n \t* doc/xml/manual/intro.xml: Document LWG DR 2996 change.\n \t* doc/html/*: Regenerate.\n \t* include/bits/shared_ptr.h (shared_ptr(shared_ptr&&, T*)): Add"}, {"sha": "fe8d681e87bd301b42bc98361ae5b15acb312b8a", "filename": "libstdc++-v3/testsuite/20_util/function_objects/invoke/1.cc", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f303216e5e321f759a88c7c1cbffd84b0997ead/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f303216e5e321f759a88c7c1cbffd84b0997ead/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F1.cc?ref=5f303216e5e321f759a88c7c1cbffd84b0997ead", "patch": "@@ -26,15 +26,6 @@ struct abstract {\n \n static_assert( noexcept(std::__invoke(std::declval<abstract>())),\n     \"It should be possible to use abstract types with INVOKE\" );\n-#if __cpp_lib_invoke\n-// std::invoke is only defined since C++17.\n-static_assert( noexcept(std::invoke(std::declval<abstract>())),\n-    \"It should be possible to use abstract types with INVOKE\" );\n-\n-// The std::__invoke_r extension only has a noexcept-specifier for >= C++17.\n-static_assert( noexcept(std::__invoke_r<void>(std::declval<abstract>())),\n-    \"It should be possible to use abstract types with INVOKE<R>\" );\n-#endif\n \n struct F {\n   void operator()() &;\n@@ -48,19 +39,3 @@ static_assert( !noexcept(std::__invoke(std::declval<F&>())), \"\" );\n static_assert( noexcept(std::__invoke(std::declval<F>())), \"\" );\n static_assert( !noexcept(std::__invoke(std::declval<F>(), 1)), \"\" );\n static_assert( noexcept(std::__invoke(std::declval<F>(), 1, 2)), \"\" );\n-\n-#if __cpp_lib_invoke\n-static_assert( !noexcept(std::invoke(std::declval<F&>())), \"\" );\n-static_assert( noexcept(std::invoke(std::declval<F>())), \"\" );\n-static_assert( !noexcept(std::invoke(std::declval<F>(), 1)), \"\" );\n-static_assert( noexcept(std::invoke(std::declval<F>(), 1, 2)), \"\" );\n-\n-static_assert( !noexcept(std::__invoke_r<void>(std::declval<F&>())), \"\" );\n-static_assert( noexcept(std::__invoke_r<void>(std::declval<F>())), \"\" );\n-static_assert( !noexcept(std::__invoke_r<int>(std::declval<F>(), 1)), \"\" );\n-static_assert( !noexcept(std::__invoke_r<void>(std::declval<F>(), 1)), \"\" );\n-static_assert( !noexcept(std::__invoke_r<long>(std::declval<F>(), 1)), \"\" );\n-static_assert( noexcept(std::__invoke_r<void>(std::declval<F>(), 1, 2)), \"\" );\n-static_assert( noexcept(std::__invoke_r<void*>(std::declval<F>(), 1, 2)), \"\" );\n-static_assert( noexcept(std::__invoke_r<D>(std::declval<F>(), 1, 2)), \"\" );\n-#endif"}, {"sha": "75cc1e126c395be015c46d035398ff151c7e3308", "filename": "libstdc++-v3/testsuite/20_util/function_objects/invoke/3.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f303216e5e321f759a88c7c1cbffd84b0997ead/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f303216e5e321f759a88c7c1cbffd84b0997ead/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F3.cc?ref=5f303216e5e321f759a88c7c1cbffd84b0997ead", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2016-2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <functional>\n+\n+struct abstract {\n+  virtual ~abstract() = 0;\n+  void operator()() noexcept;\n+};\n+\n+static_assert( noexcept(std::__invoke(std::declval<abstract>())),\n+    \"It should be possible to use abstract types with INVOKE\" );\n+static_assert( noexcept(std::invoke(std::declval<abstract>())),\n+    \"It should be possible to use abstract types with INVOKE\" );\n+\n+// The std::__invoke_r extension only has a noexcept-specifier for >= C++17.\n+static_assert( noexcept(std::__invoke_r<void>(std::declval<abstract>())),\n+    \"It should be possible to use abstract types with INVOKE<R>\" );\n+\n+struct F {\n+  void operator()() &;\n+  void operator()() && noexcept;\n+  int operator()(int);\n+  double* operator()(int, int) noexcept;\n+};\n+struct D { D(void*); };\n+\n+static_assert( !noexcept(std::__invoke(std::declval<F&>())), \"\" );\n+static_assert( noexcept(std::__invoke(std::declval<F>())), \"\" );\n+static_assert( !noexcept(std::__invoke(std::declval<F>(), 1)), \"\" );\n+static_assert( noexcept(std::__invoke(std::declval<F>(), 1, 2)), \"\" );\n+\n+static_assert( !noexcept(std::invoke(std::declval<F&>())), \"\" );\n+static_assert( noexcept(std::invoke(std::declval<F>())), \"\" );\n+static_assert( !noexcept(std::invoke(std::declval<F>(), 1)), \"\" );\n+static_assert( noexcept(std::invoke(std::declval<F>(), 1, 2)), \"\" );\n+\n+static_assert( !noexcept(std::__invoke_r<void>(std::declval<F&>())), \"\" );\n+static_assert( noexcept(std::__invoke_r<void>(std::declval<F>())), \"\" );\n+static_assert( !noexcept(std::__invoke_r<int>(std::declval<F>(), 1)), \"\" );\n+static_assert( !noexcept(std::__invoke_r<void>(std::declval<F>(), 1)), \"\" );\n+static_assert( !noexcept(std::__invoke_r<long>(std::declval<F>(), 1)), \"\" );\n+static_assert( noexcept(std::__invoke_r<void>(std::declval<F>(), 1, 2)), \"\" );\n+static_assert( noexcept(std::__invoke_r<void*>(std::declval<F>(), 1, 2)), \"\" );\n+static_assert( !noexcept(std::__invoke_r<D>(std::declval<F>(), 1, 2)), \"\" );"}, {"sha": "5daa456e44007d388436b79e9828aab3dc3b8ea2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/allocator/ext_ptr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f303216e5e321f759a88c7c1cbffd84b0997ead/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fext_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f303216e5e321f759a88c7c1cbffd84b0997ead/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fext_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fext_ptr.cc?ref=5f303216e5e321f759a88c7c1cbffd84b0997ead", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do compile { target c++11 } }\n+// { dg-do run { target c++11 } }\n \n #include <unordered_set>\n #include <memory>"}]}