{"sha": "02231c13506fcbd63be93bba1215211bcbd1024c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIyMzFjMTM1MDZmY2JkNjNiZTkzYmJhMTIxNTIxMWJjYmQxMDI0Yw==", "commit": {"author": {"name": "Terry Guo", "email": "terry.guo@arm.com", "date": "2013-11-25T06:41:20Z"}, "committer": {"name": "Xuepeng Guo", "email": "xguo@gcc.gnu.org", "date": "2013-11-25T06:41:20Z"}, "message": "invoke.texi (-mslow-flash-data): Document new option.\n\ngcc/ChangeLog\n2013-11-25  Terry Guo  <terry.guo@arm.com>\n\n\t* doc/invoke.texi (-mslow-flash-data): Document new option.\n\t* config/arm/arm.opt (mslow-flash-data): New option.\n\t* config/arm/arm-protos.h (arm_max_const_double_inline_cost): Declare\n\tit.\n\t* config/arm/arm.h (TARGET_USE_MOVT): Always true when literal pools\n\tare disabled.\n\t(arm_disable_literal_pool): Declare it.\n\t* config/arm/arm.c (arm_disable_literal_pool): New variable.\n\t(arm_option_override): Handle new option.\n\t(thumb2_legitimate_address_p): Don't allow symbol references when\n\tliteral pools are disabled.\n\t(arm_max_const_double_inline_cost): New function.\n\t* config/arm/arm.md (types.md): Include it before ...\n\t(use_literal_pool): New attribute.\n\t(enabled): Use new attribute.\n\t(split pattern): Replace symbol+offset with MOVW/MOVT.\n\ngcc/testsuite/ChangeLog\n2013-11-25  Terry Guo  <terry.guo@arm.com>\n\n\t* gcc.target/arm/thumb2-slow-flash-data.c: New.\n\nFrom-SVN: r205342", "tree": {"sha": "b045e1d8d7d9e61ea7b8d4e8262360a69c3e0632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b045e1d8d7d9e61ea7b8d4e8262360a69c3e0632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02231c13506fcbd63be93bba1215211bcbd1024c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02231c13506fcbd63be93bba1215211bcbd1024c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02231c13506fcbd63be93bba1215211bcbd1024c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02231c13506fcbd63be93bba1215211bcbd1024c/comments", "author": null, "committer": null, "parents": [{"sha": "36ef4e9d585a929f0423adc30c2076d6bb445c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ef4e9d585a929f0423adc30c2076d6bb445c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ef4e9d585a929f0423adc30c2076d6bb445c4a"}], "stats": {"total": 223, "additions": 218, "deletions": 5}, "files": [{"sha": "cbb27ce5560dcc725ba7844bef1f17c90c38e835", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02231c13506fcbd63be93bba1215211bcbd1024c", "patch": "@@ -1,3 +1,22 @@\n+2013-11-25  Terry Guo  <terry.guo@arm.com>\n+\n+\t* doc/invoke.texi (-mslow-flash-data): Document new option.\n+\t* config/arm/arm.opt (mslow-flash-data): New option.\n+\t* config/arm/arm-protos.h (arm_max_const_double_inline_cost): Declare\n+\tit.\n+\t* config/arm/arm.h (TARGET_USE_MOVT): Always true when literal pools\n+\tare disabled.\n+\t(arm_disable_literal_pool): Declare it.\n+\t* config/arm/arm.c (arm_disable_literal_pool): New variable.\n+\t(arm_option_override): Handle new option.\n+\t(thumb2_legitimate_address_p): Don't allow symbol references when\n+\tliteral pools are disabled.\n+\t(arm_max_const_double_inline_cost): New function.\n+\t* config/arm/arm.md (types.md): Include it before ...\n+\t(use_literal_pool): New attribute.\n+\t(enabled): Use new attribute.\n+\t(split pattern): Replace symbol+offset with MOVW/MOVT.\n+\n 2013-11-24  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR bootstrap/59279"}, {"sha": "c5b16daae4face6e8a1c70738f8b5e3e5802ea4f", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=02231c13506fcbd63be93bba1215211bcbd1024c", "patch": "@@ -121,6 +121,7 @@ extern rtx arm_gen_compare_reg (RTX_CODE, rtx, rtx, rtx);\n extern rtx arm_gen_return_addr_mask (void);\n extern void arm_reload_in_hi (rtx *);\n extern void arm_reload_out_hi (rtx *);\n+extern int arm_max_const_double_inline_cost (void);\n extern int arm_const_double_inline_cost (rtx);\n extern bool arm_const_double_by_parts (rtx);\n extern bool arm_const_double_by_immediates (rtx);"}, {"sha": "dc3dbdb1164e1b70ae106f75e96c6bea7e74dcac", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=02231c13506fcbd63be93bba1215211bcbd1024c", "patch": "@@ -869,6 +869,9 @@ int arm_arch_thumb_hwdiv;\n    than core registers.  */\n int prefer_neon_for_64bits = 0;\n \n+/* Nonzero if we shouldn't use literal pools.  */\n+bool arm_disable_literal_pool = false;\n+\n /* In case of a PRE_INC, POST_INC, PRE_DEC, POST_DEC memory reference,\n    we must report the mode of the memory reference from\n    TARGET_PRINT_OPERAND to TARGET_PRINT_OPERAND_ADDRESS.  */\n@@ -2573,6 +2576,16 @@ arm_option_override (void)\n   if (TARGET_APCS_FRAME)\n     flag_shrink_wrap = false;\n \n+  /* We only support -mslow-flash-data on armv7-m targets.  */\n+  if (target_slow_flash_data\n+      && ((!(arm_arch7 && !arm_arch_notm) && !arm_arch7em)\n+\t  || (TARGET_THUMB1 || flag_pic || TARGET_NEON)))\n+    error (\"-mslow-flash-data only supports non-pic code on armv7-m targets\");\n+\n+  /* Currently, for slow flash data, we just disable literal pools.  */\n+  if (target_slow_flash_data)\n+    arm_disable_literal_pool = true;\n+\n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();\n }\n@@ -6417,6 +6430,25 @@ thumb2_legitimate_address_p (enum machine_mode mode, rtx x, int strict_p)\n \t\t  && thumb2_legitimate_index_p (mode, xop0, strict_p)));\n     }\n \n+  /* Normally we can assign constant values to target registers without\n+     the help of constant pool.  But there are cases we have to use constant\n+     pool like:\n+     1) assign a label to register.\n+     2) sign-extend a 8bit value to 32bit and then assign to register.\n+\n+     Constant pool access in format:\n+     (set (reg r0) (mem (symbol_ref (\".LC0\"))))\n+     will cause the use of literal pool (later in function arm_reorg).\n+     So here we mark such format as an invalid format, then the compiler\n+     will adjust it into:\n+     (set (reg r0) (symbol_ref (\".LC0\")))\n+     (set (reg r0) (mem (reg r0))).\n+     No extra register is required, and (mem (reg r0)) won't cause the use\n+     of literal pools.  */\n+  else if (arm_disable_literal_pool && code == SYMBOL_REF\n+\t   && CONSTANT_POOL_ADDRESS_P (x))\n+    return 0;\n+\n   else if (GET_MODE_CLASS (mode) != MODE_FLOAT\n \t   && code == SYMBOL_REF\n \t   && CONSTANT_POOL_ADDRESS_P (x)\n@@ -16222,6 +16254,19 @@ push_minipool_fix (rtx insn, HOST_WIDE_INT address, rtx *loc,\n   minipool_fix_tail = fix;\n }\n \n+/* Return maximum allowed cost of synthesizing a 64-bit constant VAL inline.\n+   Returns the number of insns needed, or 99 if we always want to synthesize\n+   the value.  */\n+int\n+arm_max_const_double_inline_cost ()\n+{\n+  /* Let the value get synthesized to avoid the use of literal pools.  */\n+  if (arm_disable_literal_pool)\n+    return 99;\n+\n+  return ((optimize_size || arm_ld_sched) ? 3 : 4);\n+}\n+\n /* Return the cost of synthesizing a 64-bit constant VAL inline.\n    Returns the number of insns needed, or 99 if we don't know how to\n    do it.  */"}, {"sha": "a816ec17a438497c0eee7e03539cec766e5604d9", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=02231c13506fcbd63be93bba1215211bcbd1024c", "patch": "@@ -329,7 +329,9 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n \n /* Should MOVW/MOVT be used in preference to a constant pool.  */\n #define TARGET_USE_MOVT \\\n-  (arm_arch_thumb2 && !optimize_size && !current_tune->prefer_constant_pool)\n+  (arm_arch_thumb2 \\\n+   && (arm_disable_literal_pool \\\n+       || (!optimize_size && !current_tune->prefer_constant_pool)))\n \n /* We could use unified syntax for arm mode, but for now we just use it\n    for Thumb-2.  */\n@@ -554,6 +556,11 @@ extern int arm_arch_thumb_hwdiv;\n    than core registers.  */\n extern int prefer_neon_for_64bits;\n \n+/* Nonzero if we shouldn't use literal pools.  */\n+#ifndef USED_FOR_TARGET\n+extern bool arm_disable_literal_pool;\n+#endif\n+\n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT  (MASK_APCS_FRAME)\n #endif"}, {"sha": "16095fabdf4b45069e5f7a084aa5b5d4e06ad47a", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 55, "deletions": 4, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=02231c13506fcbd63be93bba1215211bcbd1024c", "patch": "@@ -82,6 +82,9 @@\n ;; Processor type.  This is created automatically from arm-cores.def.\n (include \"arm-tune.md\")\n \n+;; Instruction classification types\n+(include \"types.md\")\n+\n ; IS_THUMB is set to 'yes' when we are generating Thumb code, and 'no' when\n ; generating ARM code.  This is used to control the length of some insn\n ; patterns that share the same RTL in both ARM and Thumb code.\n@@ -191,6 +194,12 @@\n \t (const_string \"yes\")]\n \t(const_string \"no\")))\n \n+(define_attr \"use_literal_pool\" \"no,yes\"\n+   (cond [(and (eq_attr \"type\" \"f_loads,f_loadd\")\n+\t       (match_test \"CONSTANT_P (operands[1])\"))\n+\t  (const_string \"yes\")]\n+\t (const_string \"no\")))\n+\n ; Allows an insn to disable certain alternatives for reasons other than\n ; arch support.\n (define_attr \"insn_enabled\" \"no,yes\"\n@@ -210,6 +219,10 @@\n \t       (match_test \"arm_restrict_it\"))\n \t  (const_string \"no\")\n \n+\t  (and (eq_attr \"use_literal_pool\" \"yes\")\n+\t       (match_test \"arm_disable_literal_pool\"))\n+\t  (const_string \"no\")\n+\n \t  (eq_attr \"arch_enabled\" \"no\")\n \t  (const_string \"no\")\n \n@@ -245,9 +258,6 @@\n   (set_attr \"length\" \"4\")\n   (set_attr \"pool_range\" \"250\")])\n \n-;; Instruction classification types\n-(include \"types.md\")\n-\n ; Load scheduling, set from the arm_ld_sched variable\n ; initialized by arm_option_override()\n (define_attr \"ldsched\" \"no,yes\" (const (symbol_ref \"arm_ld_sched\")))\n@@ -6049,7 +6059,7 @@\n   \"TARGET_32BIT\n    && reload_completed\n    && (arm_const_double_inline_cost (operands[1])\n-       <= ((optimize_size || arm_ld_sched) ? 3 : 4))\"\n+       <= arm_max_const_double_inline_cost ())\"\n   [(const_int 0)]\n   \"\n   arm_split_constant (SET, SImode, curr_insn,\n@@ -6312,6 +6322,47 @@\n   \"\n )\n \n+;; A normal way to do (symbol + offset) requires three instructions at least\n+;; (depends on how big the offset is) as below:\n+;; movw r0, #:lower16:g\n+;; movw r0, #:upper16:g\n+;; adds r0, #4\n+;;\n+;; A better way would be:\n+;; movw r0, #:lower16:g+4\n+;; movw r0, #:upper16:g+4\n+;;\n+;; The limitation of this way is that the length of offset should be a 16-bit\n+;; signed value, because current assembler only supports REL type relocation for\n+;; such case.  If the more powerful RELA type is supported in future, we should\n+;; update this pattern to go with better way.\n+(define_split\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"\")\n+\t(const:SI (plus:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"\"))))]\n+  \"TARGET_THUMB2\n+   && arm_disable_literal_pool\n+   && reload_completed\n+   && GET_CODE (operands[1]) == SYMBOL_REF\"\n+  [(clobber (const_int 0))]\n+  \"\n+    int offset = INTVAL (operands[2]);\n+\n+    if (offset < -0x8000 || offset > 0x7fff)\n+      {\n+\tarm_emit_movpair (operands[0], operands[1]);\n+\temit_insn (gen_rtx_SET (SImode, operands[0],\n+\t\t\t\tgen_rtx_PLUS (SImode, operands[0], operands[2])));\n+      }\n+    else\n+      {\n+\trtx op = gen_rtx_CONST (SImode,\n+\t\t\t\tgen_rtx_PLUS (SImode, operands[1], operands[2]));\n+\tarm_emit_movpair (operands[0], op);\n+      }\n+  \"\n+)\n+\n ;; Split symbol_refs at the later stage (after cprop), instead of generating\n ;; movt/movw pair directly at expand.  Otherwise corresponding high_sum\n ;; and lo_sum would be merged back into memory load at cprop.  However,"}, {"sha": "24e5b062c0b37213f436164cff48336ee91b0dd7", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=02231c13506fcbd63be93bba1215211bcbd1024c", "patch": "@@ -271,3 +271,7 @@ Enable unaligned word and halfword accesses to packed data.\n mneon-for-64bits\n Target Report RejectNegative Var(use_neon_for_64bits) Init(0)\n Use Neon to perform 64-bits operations rather than core registers.\n+\n+mslow-flash-data\n+Target Report Var(target_slow_flash_data) Init(0)\n+Assume loading data from flash is slower than fetching instructions."}, {"sha": "501d080ee9fa1e5392716b12d10d65209a1adba5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=02231c13506fcbd63be93bba1215211bcbd1024c", "patch": "@@ -533,6 +533,7 @@ Objective-C and Objective-C++ Dialects}.\n -mfix-cortex-m3-ldrd @gol\n -munaligned-access @gol\n -mneon-for-64bits @gol\n+-mslow-flash-data @gol\n -mrestrict-it}\n \n @emph{AVR Options}\n@@ -12345,6 +12346,13 @@ Enables using Neon to handle scalar 64-bits operations. This is\n disabled by default since the cost of moving data from core registers\n to Neon is high.\n \n+@item -mslow-flash-data\n+@opindex mslow-flash-data\n+Assume loading data from flash is slower than fetching instruction.\n+Therefore literal load is minimized for better performance.\n+This option is only supported when compiling for ARMv7 M-profile and\n+off by default.\n+\n @item -mrestrict-it\n @opindex mrestrict-it\n Restricts generation of IT blocks to conform to the rules of ARMv8."}, {"sha": "a2e144f3bd311c9c8e75cfce6e6c344657c380c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02231c13506fcbd63be93bba1215211bcbd1024c", "patch": "@@ -1,3 +1,7 @@\n+2013-11-25  Terry Guo  <terry.guo@arm.com>\n+\n+\t* gcc.target/arm/thumb2-slow-flash-data.c: New.\n+\n 2013-11-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/float-exact-1.c: Use dg-add-options ieee."}, {"sha": "9852ea5d0bdeae79010ddf02e68a3769f4915036", "filename": "gcc/testsuite/gcc.target/arm/thumb2-slow-flash-data.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02231c13506fcbd63be93bba1215211bcbd1024c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data.c?ref=02231c13506fcbd63be93bba1215211bcbd1024c", "patch": "@@ -0,0 +1,74 @@\n+/* The option -mslow-flash-data is just for performance tuning, it\n+   doesn't totally disable the use of literal pools.  But for below\n+   simple cases, the use of literal pool should be replaced by\n+   movw/movt or read-only constant pool.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_cortex_m } */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-options \"-O2 -mthumb -mslow-flash-data\" } */\n+\n+float sf;\n+double df;\n+long long l;\n+static char *p = \"Hello World\";\n+\n+float\n+testsf (float *p)\n+{\n+  if (*p > 1.1234f)\n+    return 2.1234f;\n+  else\n+    return 3.1234f;\n+}\n+\n+double\n+testdf (double *p)\n+{\n+  if (*p > 4.1234)\n+    return 2.1234;\n+  else\n+    return 3.1234;\n+}\n+\n+long long\n+testll (long long *p)\n+{\n+  if (*p > 0x123456789ABCDEFll)\n+    return 0x111111111ll;\n+  else\n+    return 0x222222222ll;\n+}\n+\n+char *\n+testchar ()\n+{\n+  return p + 4;\n+}\n+\n+int\n+foo (int a, int b)\n+{\n+  int i;\n+  volatile *labelref = &&label1;\n+\n+  if (a > b)\n+    {\n+      while (i < b)\n+\t{\n+\t  a += *labelref;\n+\t  i += 1;\n+\t}\n+      goto *labelref;\n+    }\n+  else\n+    b = b + 3;\n+\n+  a = a * b;\n+\n+label1:\n+  return a + b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movt\" 13 } } */\n+/* { dg-final { scan-assembler-times \"movt.*LC0\\\\+4\" 1 } } */"}]}