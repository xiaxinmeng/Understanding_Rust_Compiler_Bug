{"sha": "450526551dcb97b7c0513699d4333efb79b8b490", "node_id": "C_kwDOANBUbNoAKDQ1MDUyNjU1MWRjYjk3YjdjMDUxMzY5OWQ0MzMzZWZiNzliOGI0OTA", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-09T18:34:48Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-09T18:34:48Z"}, "message": "GCN: Implement __atomic_compare_exchange_{1,2} in libgcc [PR102215]\n\nlibgcc/ChangeLog:\n\n\tPR target/102215\n\t* config/gcn/atomic.c (__sync_val_compare_and_swap_##SIZE): Move\n\ta line up to non-arg-dependent value first.\n\t(__ATOMIC_COMPARE_EXCHANGE): Define + call to generate\n\t__atomic_compare_exchange_{1,2}.", "tree": {"sha": "ad05b62098337397fc7e83b368938ee585961e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad05b62098337397fc7e83b368938ee585961e46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/450526551dcb97b7c0513699d4333efb79b8b490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450526551dcb97b7c0513699d4333efb79b8b490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450526551dcb97b7c0513699d4333efb79b8b490", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450526551dcb97b7c0513699d4333efb79b8b490/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bded0d549fdfdc1328b2c0189dc5f8593b4cbe42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bded0d549fdfdc1328b2c0189dc5f8593b4cbe42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bded0d549fdfdc1328b2c0189dc5f8593b4cbe42"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "cf29fa82aba6f672e2f954f2d5e4685244b44e8d", "filename": "libgcc/config/gcn/atomic.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450526551dcb97b7c0513699d4333efb79b8b490/libgcc%2Fconfig%2Fgcn%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450526551dcb97b7c0513699d4333efb79b8b490/libgcc%2Fconfig%2Fgcn%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgcn%2Fatomic.c?ref=450526551dcb97b7c0513699d4333efb79b8b490", "patch": "@@ -28,9 +28,9 @@\n TYPE\t\t\t\t\t\t\t\t\t     \\\n __sync_val_compare_and_swap_##SIZE (TYPE *ptr, TYPE oldval, TYPE newval)     \\\n {\t\t\t\t\t\t\t\t\t     \\\n+  unsigned int valmask = (1 << (SIZE * 8)) - 1;\t\t\t\t     \\\n   unsigned int *wordptr = (unsigned int *)((__UINTPTR_TYPE__ ) ptr & ~3UL);  \\\n   int shift = ((__UINTPTR_TYPE__ ) ptr & 3UL) * 8;\t\t\t     \\\n-  unsigned int valmask = (1 << (SIZE * 8)) - 1;\t\t\t\t     \\\n   unsigned int wordmask = ~(valmask << shift);\t\t\t\t     \\\n   unsigned int oldword = *wordptr;\t\t\t\t\t     \\\n   for (;;)\t\t\t\t\t\t\t\t     \\\n@@ -57,3 +57,30 @@ __sync_bool_compare_and_swap_##SIZE (TYPE *ptr, TYPE oldval, TYPE newval)    \\\n __SYNC_SUBWORD_COMPARE_AND_SWAP (unsigned char, 1)\n __SYNC_SUBWORD_COMPARE_AND_SWAP (unsigned short, 2)\n \n+\n+#define __ATOMIC_COMPARE_EXCHANGE(TYPE,SIZE)\t\t\t\t      \\\n+bool\t\t\t\t\t\t\t\t\t      \\\n+__atomic_compare_exchange_##SIZE (TYPE *ptr, TYPE *expected,\t\t      \\\n+\t\t\t\t  TYPE desired, bool weak,\t\t      \\\n+\t\t\t\t  int success_memorder, int failure_memorder) \\\n+{\t\t\t\t\t\t\t\t\t      \\\n+  unsigned int valmask = (1 << (SIZE * 8)) - 1;\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  unsigned int *wordptr = (unsigned int *)((__UINTPTR_TYPE__ ) ptr & ~3UL);   \\\n+  int ptrshift = ((__UINTPTR_TYPE__ ) ptr & 3UL) * 8;\t\t\t      \\\n+  unsigned int wordmask = ~(valmask << ptrshift);\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  unsigned int ptrword = *wordptr;\t\t\t\t\t      \\\n+  unsigned int exptword = ptrword & wordmask;\t\t\t\t      \\\n+  unsigned int newword = ptrword & wordmask;\t\t\t\t      \\\n+  exptword |= ((unsigned int) *expected) << ptrshift;\t\t\t      \\\n+  newword |= ((unsigned int) desired) << ptrshift;\t\t\t      \\\n+  if (__atomic_compare_exchange_4 (wordptr, &exptword, newword, weak,\t      \\\n+\t\t\t\t   success_memorder, failure_memorder))\t      \\\n+    return true;\t\t\t\t\t\t\t      \\\n+  *expected = (TYPE) ((exptword >> ptrshift) & valmask);\t\t      \\\n+  return false;\t\t\t\t\t\t\t\t      \\\n+}\n+\n+__ATOMIC_COMPARE_EXCHANGE (unsigned char, 1)\n+__ATOMIC_COMPARE_EXCHANGE (unsigned short, 2)"}]}