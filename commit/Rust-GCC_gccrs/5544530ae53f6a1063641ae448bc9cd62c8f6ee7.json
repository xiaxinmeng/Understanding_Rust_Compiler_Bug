{"sha": "5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0NDUzMGFlNTNmNmExMDYzNjQxYWU0NDhiYzljZDYyYzhmNmVlNw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-10-05T12:17:16Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-10-05T12:17:16Z"}, "message": "re PR c/21419 (Accepts writting to const via asm)\n\n2005-10-05  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR tree-optimization/21419\n\tPR tree-optimization/24146\n\tPR tree-optimization/24151\n\n\t* c-typeck.c (readonly_error): Handle USE being lv_asm.\n\t(build_asm_expr): Call it if outputs are read-only.\n\t* gimplify.c (gimplify_asm_expr): Remove former fix to PR 21419.\n\ncp:\n2005-10-05  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR tree-optimization/21419\n\tPR tree-optimization/24146\n\tPR tree-optimization/24151\n\n\t* semantics.c (finish_asm_stmt): Call readonly_error if outputs are\n\tread-only.  Set ASM_VOLATILE_P for asms without outputs.\n\ntestsuite:\n2005-10-05  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR tree-optimization/21419\n\tPR tree-optimization/24146\n\tPR tree-optimization/24151\n\n\t* g++.dg/ext/asm7.C: New.\n\t* g++.dg/ext/asm8.C: New.\n\t* gcc.dg/asm-1.c: Compile on all targets.\n\t* gcc.dg/asm-pr24146.c: New.\n\t* gcc.dg/pr21419.c: Adjust error messages.\n\nFrom-SVN: r104988", "tree": {"sha": "56889bd0e587b4c391a24d46c92ac8f2af4f0978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56889bd0e587b4c391a24d46c92ac8f2af4f0978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c82cdb5dfc2b9e85dbe577e32d73dc8fd6062afe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c82cdb5dfc2b9e85dbe577e32d73dc8fd6062afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c82cdb5dfc2b9e85dbe577e32d73dc8fd6062afe"}], "stats": {"total": 145, "additions": 119, "deletions": 26}, "files": [{"sha": "4a87d1f8b54efa85db6e3dc8640a4bfc36ababd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -1,3 +1,13 @@\n+2005-10-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR tree-optimization/21419\n+\tPR tree-optimization/24146\n+\tPR tree-optimization/24151\n+\n+\t* c-typeck.c (readonly_error): Handle USE being lv_asm.\n+\t(build_asm_expr): Call it if outputs are read-only.\n+\t* gimplify.c (gimplify_asm_expr): Remove former fix to PR 21419.\n+\n 2005-10-05  Billy Biggs  <billy.biggs@gmail.com>\n \t    Paolo Bonzini  <bonzini@gnu.org>\n "}, {"sha": "8a90476181fb50822d7ea382101fdcb997cc2bac", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -2982,32 +2982,36 @@ lvalue_p (tree ref)\n static void\n readonly_error (tree arg, enum lvalue_use use)\n {\n-  gcc_assert (use == lv_assign || use == lv_increment || use == lv_decrement);\n+  gcc_assert (use == lv_assign || use == lv_increment || use == lv_decrement\n+\t      || use == lv_asm);\n   /* Using this macro rather than (for example) arrays of messages\n      ensures that all the format strings are checked at compile\n      time.  */\n-#define READONLY_MSG(A, I, D) (use == lv_assign\t\t\t\t\\\n-\t\t\t       ? (A)\t\t\t\t\t\\\n-\t\t\t       : (use == lv_increment ? (I) : (D)))\n+#define READONLY_MSG(A, I, D, AS) (use == lv_assign ? (A)\t\t\\\n+\t\t\t           : (use == lv_increment ? (I)\t\t\\\n+\t\t\t\t   : (use == lv_decrement ? (D) : (AS))))\n   if (TREE_CODE (arg) == COMPONENT_REF)\n     {\n       if (TYPE_READONLY (TREE_TYPE (TREE_OPERAND (arg, 0))))\n \treadonly_error (TREE_OPERAND (arg, 0), use);\n       else\n \terror (READONLY_MSG (G_(\"assignment of read-only member %qD\"),\n \t\t\t     G_(\"increment of read-only member %qD\"),\n-\t\t\t     G_(\"decrement of read-only member %qD\")),\n+\t\t\t     G_(\"decrement of read-only member %qD\"),\n+\t\t\t     G_(\"read-only member %qD used as %<asm%> output\")),\n \t       TREE_OPERAND (arg, 1));\n     }\n   else if (TREE_CODE (arg) == VAR_DECL)\n     error (READONLY_MSG (G_(\"assignment of read-only variable %qD\"),\n \t\t\t G_(\"increment of read-only variable %qD\"),\n-\t\t\t G_(\"decrement of read-only variable %qD\")),\n+\t\t\t G_(\"decrement of read-only variable %qD\"),\n+\t\t\t G_(\"read-only variable %qD used as %<asm%> output\")),\n \t   arg);\n   else\n     error (READONLY_MSG (G_(\"assignment of read-only location\"),\n \t\t\t G_(\"increment of read-only location\"),\n-\t\t\t G_(\"decrement of read-only location\")));\n+\t\t\t G_(\"decrement of read-only location\"),\n+\t\t\t G_(\"read-only location used as %<asm%> output\")));\n }\n \n \n@@ -6691,6 +6695,14 @@ build_asm_expr (tree string, tree outputs, tree inputs, tree clobbers,\n       if (!lvalue_or_else (output, lv_asm))\n \toutput = error_mark_node;\n \n+      if (output != error_mark_node\n+\t  && (TREE_READONLY (output)\n+\t      || TYPE_READONLY (TREE_TYPE (output))\n+\t      || ((TREE_CODE (TREE_TYPE (output)) == RECORD_TYPE\n+\t\t   || TREE_CODE (TREE_TYPE (output)) == UNION_TYPE)\n+\t\t  && C_TYPE_FIELDS_READONLY (TREE_TYPE (output)))))\n+\treadonly_error (output, lv_asm);\n+\n       constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (tail)));\n       oconstraints[i] = constraint;\n \n@@ -6737,12 +6749,10 @@ build_asm_expr (tree string, tree outputs, tree inputs, tree clobbers,\n \n   args = build_stmt (ASM_EXPR, string, outputs, inputs, clobbers);\n \n-  /* Simple asm statements are treated as volatile.  */\n-  if (simple)\n-    {\n-      ASM_VOLATILE_P (args) = 1;\n-      ASM_INPUT_P (args) = 1;\n-    }\n+  /* asm statements without outputs, including simple ones, are treated\n+     as volatile.  */\n+  ASM_INPUT_P (args) = simple;\n+  ASM_VOLATILE_P (args) = (noutputs == 0);\n \n   return args;\n }"}, {"sha": "3a1737d49e1e52c7ba6a1f43020e340040084ae8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -1,3 +1,12 @@\n+2005-10-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR tree-optimization/21419\n+\tPR tree-optimization/24146\n+\tPR tree-optimization/24151\n+\n+\t* semantics.c (finish_asm_stmt): Call readonly_error if outputs are\n+\tread-only.  Set ASM_VOLATILE_P for asms without outputs.\n+\n 2005-10-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/23513"}, {"sha": "80885c564a75183e19315a7957cba3145a12300f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -1165,18 +1165,17 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n {\n   tree r;\n   tree t;\n+  int ninputs = list_length (input_operands);\n+  int noutputs = list_length (output_operands);\n \n   if (!processing_template_decl)\n     {\n-      int ninputs, noutputs;\n       const char *constraint;\n       const char **oconstraints;\n       bool allows_mem, allows_reg, is_inout;\n       tree operand;\n       int i;\n \n-      ninputs = list_length (input_operands);\n-      noutputs = list_length (output_operands);\n       oconstraints = (const char **) alloca (noutputs * sizeof (char *));\n \n       string = resolve_asm_operand_names (string, output_operands,\n@@ -1197,6 +1196,19 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t  if (!lvalue_or_else (operand, lv_asm))\n \t    operand = error_mark_node;\n \n+          if (operand != error_mark_node\n+\t      && (TREE_READONLY (operand)\n+\t\t  || CP_TYPE_CONST_P (TREE_TYPE (operand))\n+\t          /* Functions are not modifiable, even though they are\n+\t             lvalues.  */\n+\t          || TREE_CODE (TREE_TYPE (operand)) == FUNCTION_TYPE\n+\t          || TREE_CODE (TREE_TYPE (operand)) == METHOD_TYPE\n+\t          /* If it's an aggregate and any field is const, then it is\n+\t             effectively const.  */\n+\t          || (CLASS_TYPE_P (TREE_TYPE (operand))\n+\t              && C_TYPE_FIELDS_READONLY (TREE_TYPE (operand)))))\n+\t    readonly_error (operand, \"assignment (via 'asm' output)\", 0);\n+\n \t  constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n \t  oconstraints[i] = constraint;\n \n@@ -1254,7 +1266,7 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n   r = build_stmt (ASM_EXPR, string,\n \t\t  output_operands, input_operands,\n \t\t  clobbers);\n-  ASM_VOLATILE_P (r) = volatile_p;\n+  ASM_VOLATILE_P (r) = volatile_p || noutputs == 0;\n   r = maybe_cleanup_point_expr_void (r);\n   return add_stmt (r);\n }"}, {"sha": "52012ebc9ccd8ff5aa82e4a6b29eea6d23ca11cb", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -3604,12 +3604,6 @@ gimplify_asm_expr (tree *expr_p, tree *pre_p, tree *post_p)\n       parse_output_constraint (&constraint, i, 0, 0,\n \t\t\t       &allows_mem, &allows_reg, &is_inout);\n \n-      if (TYPE_READONLY (TREE_TYPE (TREE_VALUE (link))))\n-\t{\n-\t  error (\"invalid lvalue in asm output %d\", i);\n-\t  ret = GS_ERROR;\n-\t}\n-\n       if (!allows_reg && allows_mem)\n \tlang_hooks.mark_addressable (TREE_VALUE (link));\n "}, {"sha": "eb8812fa8408ac1883dc94f307e7f916009fd634", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -1,3 +1,15 @@\n+2005-10-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR tree-optimization/21419\n+\tPR tree-optimization/24146\n+\tPR tree-optimization/24151\n+\n+\t* g++.dg/ext/asm7.C: New.\n+\t* g++.dg/ext/asm8.C: New.\n+\t* gcc.dg/asm-1.c: Compile on all targets.\n+\t* gcc.dg/asm-pr24146.c: New.\n+\t* gcc.dg/pr21419.c: Adjust error messages.\n+\n 2005-10-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR fortran/24176"}, {"sha": "a5cad0073719e6f626ba00912877866061e003b5", "filename": "gcc/testsuite/g++.dg/ext/asm7.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm7.C?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+const int i = 0;\n+\n+void f(void)\n+{\n+  __asm__ __volatile__ (\"\" : \"=m\" (i)); /* { dg-error \"read-only variable\" } */\n+}\n+\n+void g(const int set)\n+{\n+  __asm__ __volatile__ (\"\" : \"=r\" (set)); /* { dg-error \"read-only parameter\" } */\n+}\n+\n+"}, {"sha": "0b1be7da7de099201cb4afe878715666c06001ac", "filename": "gcc/testsuite/g++.dg/ext/asm8.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm8.C?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+/* Test that asm with no outputs are treated as volatile.  */\n+\n+void f(int x)\n+{\n+  __asm__ (\"extended asm not discarded\" : : \"r\" (x));\n+}\n+\n+void g (void)\n+{\n+  __asm__ (\"simple asm not discarded\");\n+}\n+/* { dg-final { scan-assembler \"extended asm not discarded\" } } */\n+/* { dg-final { scan-assembler \"simple asm not discarded\" } } */\n+"}, {"sha": "3bf5c29c4cdca5d69029678e374c9b65cc22d686", "filename": "gcc/testsuite/gcc.dg/asm-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-1.c?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do compile } */\n \n struct x {\n   int selector;"}, {"sha": "0b1be7da7de099201cb4afe878715666c06001ac", "filename": "gcc/testsuite/gcc.dg/asm-pr24146.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-pr24146.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-pr24146.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-pr24146.c?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+/* Test that asm with no outputs are treated as volatile.  */\n+\n+void f(int x)\n+{\n+  __asm__ (\"extended asm not discarded\" : : \"r\" (x));\n+}\n+\n+void g (void)\n+{\n+  __asm__ (\"simple asm not discarded\");\n+}\n+/* { dg-final { scan-assembler \"extended asm not discarded\" } } */\n+/* { dg-final { scan-assembler \"simple asm not discarded\" } } */\n+"}, {"sha": "dc8f602e6b22a5aff8b242f6a093f150be0e5838", "filename": "gcc/testsuite/gcc.dg/pr21419.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21419.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5544530ae53f6a1063641ae448bc9cd62c8f6ee7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21419.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21419.c?ref=5544530ae53f6a1063641ae448bc9cd62c8f6ee7", "patch": "@@ -3,13 +3,13 @@ const int i = 0;\n \n void f(void)\n {\n-  __asm__ __volatile__ (\"\" : \"=m\" (i)); /* { dg-error \"invalid lvalue in asm output\" } */\n+  __asm__ __volatile__ (\"\" : \"=m\" (i)); /* { dg-error \"read-only variable\" } */\n \n }\n \n void g(const int set)\n {\n-  __asm__ __volatile__ (\"\" : \"=r\" (set)); /* { dg-error \"invalid lvalue in asm output\" } */\n+  __asm__ __volatile__ (\"\" : \"=r\" (set)); /* { dg-error \"read-only location\" } */\n }\n \n "}]}