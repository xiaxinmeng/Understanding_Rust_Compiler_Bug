{"sha": "8014404589079fd5a775d0e3eeafa5fc65d1162b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAxNDQwNDU4OTA3OWZkNWE3NzVkMGUzZWVhZmE1ZmM2NWQxMTYyYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-11-13T10:01:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-11-13T10:01:05Z"}, "message": "Define alias templates using polymorphic memory resources\n\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/experimental/memory_resource: Add feature-test macro.\n\t* include/experimental/regex: New.\n\t* include/experimental/deque: Add alias template using PMR.\n\t* include/experimental/forward_list: Likewise.\n\t* include/experimental/list: Likewise.\n\t* include/experimental/map: Likewise.\n\t* include/experimental/set: Likewise.\n\t* include/experimental/string: Likewise.\n\t* include/experimental/unordered_map: Likewise.\n\t* include/experimental/unordered_set: Likewise.\n\t* include/experimental/vector: Likewise.\n\nFrom-SVN: r230295", "tree": {"sha": "4cac8c98f5106f28bc667469783d37a3a5426db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cac8c98f5106f28bc667469783d37a3a5426db3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8014404589079fd5a775d0e3eeafa5fc65d1162b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8014404589079fd5a775d0e3eeafa5fc65d1162b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8014404589079fd5a775d0e3eeafa5fc65d1162b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8014404589079fd5a775d0e3eeafa5fc65d1162b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfeffbd1ae0d682c660d13cdc526ae83235cdd14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfeffbd1ae0d682c660d13cdc526ae83235cdd14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfeffbd1ae0d682c660d13cdc526ae83235cdd14"}], "stats": {"total": 230, "additions": 230, "deletions": 0}, "files": [{"sha": "bae1b962cc3cc3df2d8e0e8199b042493d6b17d1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -1,3 +1,19 @@\n+2015-11-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/experimental/memory_resource: Add feature-test macro.\n+\t* include/experimental/regex: New.\n+\t* include/experimental/deque: Add alias template using PMR.\n+\t* include/experimental/forward_list: Likewise.\n+\t* include/experimental/list: Likewise.\n+\t* include/experimental/map: Likewise.\n+\t* include/experimental/set: Likewise.\n+\t* include/experimental/string: Likewise.\n+\t* include/experimental/unordered_map: Likewise.\n+\t* include/experimental/unordered_set: Likewise.\n+\t* include/experimental/vector: Likewise.\n+\n 2015-11-13  Fan You  <youfan.noey@gmail.com>\n \n \t* include/Makefile.am: Add new headers."}, {"sha": "67d8379020743e642fde9daf7df17204617f0285", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -661,6 +661,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/optional \\\n \t${experimental_srcdir}/propagate_const \\\n \t${experimental_srcdir}/ratio \\\n+\t${experimental_srcdir}/regex \\\n \t${experimental_srcdir}/set \\\n \t${experimental_srcdir}/string \\\n \t${experimental_srcdir}/string_view \\"}, {"sha": "519c6be663cd62248de895b64b81f95ced37a1e1", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -950,6 +950,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/optional \\\n \t${experimental_srcdir}/propagate_const \\\n \t${experimental_srcdir}/ratio \\\n+\t${experimental_srcdir}/regex \\\n \t${experimental_srcdir}/set \\\n \t${experimental_srcdir}/string \\\n \t${experimental_srcdir}/string_view \\"}, {"sha": "72149939a25477f91e520a64bf9c1e003dc12ad9", "filename": "libstdc++-v3/include/experimental/deque", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -37,6 +37,7 @@\n \n #include <deque>\n #include <algorithm>\n+#include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -63,6 +64,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace pmr {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Tp>\n+    using deque = std::deque<_Tp, polymorphic_allocator<_Tp>>;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace pmr\n+\n } // namespace fundamentals_v2\n } // namespace experimental\n } // namespace std"}, {"sha": "bceaccc96b18ee7e66632c01ccc95cd0b56af9e3", "filename": "libstdc++-v3/include/experimental/forward_list", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fforward_list?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -36,6 +36,7 @@\n #else\n \n #include <forward_list>\n+#include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -59,6 +60,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace pmr {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Tp>\n+    using forward_list = std::forward_list<_Tp, polymorphic_allocator<_Tp>>;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace pmr\n+\n } // namespace fundamentals_v2\n } // namespace experimental\n } // namespace std"}, {"sha": "4209d0e9eb4d7ff479a6664348bcd19fe07f76bc", "filename": "libstdc++-v3/include/experimental/list", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Flist?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -36,6 +36,7 @@\n #else\n \n #include <list>\n+#include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -59,6 +60,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace pmr {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Tp>\n+    using list = std::list<_Tp, polymorphic_allocator<_Tp>>;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace pmr\n+\n } // namespace fundamentals_v2\n } // namespace experimental\n } // namespace std"}, {"sha": "757065acf5a2d0aa02ce72cdc8dc1e4bcbaf3366", "filename": "libstdc++-v3/include/experimental/map", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -37,6 +37,7 @@\n \n #include <map>\n #include <experimental/bits/erase_if.h>\n+#include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -59,6 +60,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { __detail::__erase_nodes_if(__cont, __pred); }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace pmr {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Key, typename _Tp, typename _Compare = less<_Key>>\n+    using map\n+      = std::map<_Key, _Tp, _Compare,\n+\t\t polymorphic_allocator<pair<const _Key, _Tp>>>;\n+\n+  template<typename _Key, typename _Tp, typename _Compare = less<_Key>>\n+    using multimap\n+      = std::multimap<_Key, _Tp, _Compare,\n+\t\t      polymorphic_allocator<pair<const _Key, _Tp>>>;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace pmr\n+\n } // namespace fundamentals_v2\n } // namespace experimental\n } // namespace std"}, {"sha": "983b21108e2b39ce1c51fcf931deae1e24c185af", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -41,6 +41,8 @@ inline namespace fundamentals_v2 {\n namespace pmr {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#define __cpp_lib_experimental_memory_resources 201402L\n+\n   class memory_resource;\n \n   template <typename _Tp>"}, {"sha": "44ebf68ffc8344e28bfb65bdb5fe3f8b8ce0eaef", "filename": "libstdc++-v3/include/experimental/regex", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fregex?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -0,0 +1,72 @@\n+// <experimental/regex> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/regex\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_REGEX\n+#define _GLIBCXX_EXPERIMENTAL_REGEX 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <regex>\n+#include <experimental/string>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+namespace pmr\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+\n+  template<typename _BidirectionalIterator>\n+    using match_results\n+      = std::match_results<_BidirectionalIterator, polymorphic_allocator<\n+\t\t\t     sub_match<_BidirectionalIterator>>>;\n+\n+  typedef match_results<const char*> cmatch;\n+  typedef match_results<const wchar_t*> wcmatch;\n+  typedef match_results<string::const_iterator> smatch;\n+  typedef match_results<wstring::const_iterator> wsmatch;\n+\n+_GLIBCXX_END_NAMESPACE_CXX11\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace pmr\n+\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_REGEX"}, {"sha": "be2f213f9d6c722aec20c08129674dd0c83de1e5", "filename": "libstdc++-v3/include/experimental/set", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -37,6 +37,7 @@\n \n #include <set>\n #include <experimental/bits/erase_if.h>\n+#include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -59,6 +60,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { __detail::__erase_nodes_if(__cont, __pred); }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace pmr {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Key, typename _Compare = less<_Key>>\n+    using set = std::set<_Key, _Compare, polymorphic_allocator<_Key>>;\n+\n+  template<typename _Key, typename _Compare = less<_Key>>\n+    using multiset = std::multiset<_Key, _Compare,\n+\t\t\t\t   polymorphic_allocator<_Key>>;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace pmr\n+\n } // namespace fundamentals_v2\n } // namespace experimental\n } // namespace std"}, {"sha": "3549c0933b392c6712a0c53d7dc662856eea0626", "filename": "libstdc++-v3/include/experimental/string", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -37,6 +37,7 @@\n \n #include <string>\n #include <algorithm>\n+#include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -64,6 +65,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace pmr {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+\n+  // basic_string using polymorphic allocator in namespace pmr\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>>\n+   using basic_string =\n+     std::basic_string<_CharT, _Traits, polymorphic_allocator<_CharT>>;\n+\n+  // basic_string typedef names using polymorphic allocator in namespace\n+  // std::experimental::pmr\n+  typedef basic_string<char> string;\n+  typedef basic_string<char16_t> u16string;\n+  typedef basic_string<char32_t> u32string;\n+  typedef basic_string<wchar_t> wstring;\n+\n+_GLIBCXX_END_NAMESPACE_CXX11\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace pmr\n+\n } // namespace fundamentals_v2\n } // namespace experimental\n } // namespace std"}, {"sha": "9fb14e7d2ced802a48d6d12b617bdc61387b535a", "filename": "libstdc++-v3/include/experimental/unordered_map", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -37,6 +37,7 @@\n \n #include <unordered_map>\n #include <experimental/bits/erase_if.h>\n+#include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -61,6 +62,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { __detail::__erase_nodes_if(__cont, __pred); }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace pmr {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n+\t   typename _Pred = equal_to<_Key>>\n+    using unordered_map\n+      = std::unordered_map<_Key, _Tp, _Hash, _Pred,\n+\t\t polymorphic_allocator<pair<const _Key, _Tp>>>;\n+\n+  template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n+\t   typename _Pred = equal_to<_Key>>\n+    using unordered_multimap\n+      = std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\n+\t\t      polymorphic_allocator<pair<const _Key, _Tp>>>;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace pmr\n+\n } // namespace fundamentals_v2\n } // namespace experimental\n } // namespace std"}, {"sha": "038d23498aa629e9043848dd1b15dd0964d598e2", "filename": "libstdc++-v3/include/experimental/unordered_set", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -37,6 +37,7 @@\n \n #include <unordered_set>\n #include <experimental/bits/erase_if.h>\n+#include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -61,6 +62,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { __detail::__erase_nodes_if(__cont, __pred); }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace pmr {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Key, typename _Hash = hash<_Key>,\n+\t   typename _Pred = equal_to<_Key>>\n+    using unordered_set\n+      = std::unordered_set<_Key, _Hash, _Pred, polymorphic_allocator<_Key>>;\n+\n+  template<typename _Key, typename _Hash = hash<_Key>,\n+\t   typename _Pred = equal_to<_Key>>\n+    using unordered_multiset\n+      = std::unordered_multiset<_Key, _Hash, _Pred,\n+\t\t\t\tpolymorphic_allocator<_Key>>;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace pmr\n+\n } // namespace fundamentals_v2\n } // namespace experimental\n } // namespace std"}, {"sha": "cddb7473939912555bfc2deb820f4e92d38d5c68", "filename": "libstdc++-v3/include/experimental/vector", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8014404589079fd5a775d0e3eeafa5fc65d1162b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector?ref=8014404589079fd5a775d0e3eeafa5fc65d1162b", "patch": "@@ -37,6 +37,7 @@\n \n #include <vector>\n #include <algorithm>\n+#include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -65,6 +66,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace pmr {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Tp>\n+    using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace pmr\n+\n } // namespace fundamentals_v2\n } // namespace experimental\n } // namespace std"}]}