{"sha": "94a580761093abc1ff2d2930916ef01bae9b3bf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRhNTgwNzYxMDkzYWJjMWZmMmQyOTMwOTE2ZWYwMWJhZTliM2JmMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-13T03:44:28Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-13T03:44:28Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r967", "tree": {"sha": "9d358b749bb2d88fe73eabd23b9943bda0b075c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d358b749bb2d88fe73eabd23b9943bda0b075c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94a580761093abc1ff2d2930916ef01bae9b3bf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a580761093abc1ff2d2930916ef01bae9b3bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94a580761093abc1ff2d2930916ef01bae9b3bf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a580761093abc1ff2d2930916ef01bae9b3bf1/comments", "author": null, "committer": null, "parents": [{"sha": "4bb6d2f819e9df55a1c445b5db60c7851e5957ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bb6d2f819e9df55a1c445b5db60c7851e5957ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bb6d2f819e9df55a1c445b5db60c7851e5957ef"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "fb10833666b2a0fb687fd97df4655e4660b52899", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a580761093abc1ff2d2930916ef01bae9b3bf1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a580761093abc1ff2d2930916ef01bae9b3bf1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=94a580761093abc1ff2d2930916ef01bae9b3bf1", "patch": "@@ -5506,13 +5506,12 @@ expand_increment (exp, post)\n \n   /* Compute the operands as RTX.\n      Note whether OP0 is the actual lvalue or a copy of it:\n-     I believe it is a copy iff it is a register and insns were\n-     generated in computing it or if it is a SUBREG (generated when\n-     the low-order field in a register was referenced).  */\n+     I believe it is a copy iff it is a register or subreg\n+     and insns were generated in computing it.  */\n   temp = get_last_insn ();\n   op0 = expand_expr (incremented, 0, VOIDmode, 0);\n-  op0_is_copy = (GET_CODE (op0) == SUBREG\n-\t\t || (GET_CODE (op0) == REG && temp != get_last_insn ()));\n+  op0_is_copy = ((GET_CODE (op0) == SUBREG || GET_CODE (op0) == REG)\n+\t\t && temp != get_last_insn ());\n   op1 = expand_expr (TREE_OPERAND (exp, 1), 0, VOIDmode, 0);\n \n   /* Decide whether incrementing or decrementing.  */"}]}