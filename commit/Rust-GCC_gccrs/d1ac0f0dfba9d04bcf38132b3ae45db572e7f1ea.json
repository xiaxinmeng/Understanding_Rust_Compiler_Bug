{"sha": "d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhYzBmMGRmYmE5ZDA0YmNmMzgxMzJiM2FlNDVkYjU3MmU3ZjFlYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-30T20:14:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-30T20:14:43Z"}, "message": "libstdc++: Fix test_and_acquire / set_and_release for EABI guard variables\n\nThe default definitions of _GLIBCXX_GUARD_TEST_AND_ACQUIRE and\n_GLIBCXX_GUARD_SET_AND_RELEASE in libsupc++/guard.cc only work for the\ngeneric (IA64) ABI, because they test/set the first byte of the guard\nvariable. For EABI we need to use the least significant bit, which means\nusing the first byte is wrong for big endian targets.\n\nThis has been wrong since r224411, but previously it only caused poor\nperformance. The _GLIBCXX_GUARD_TEST_AND_ACQUIRE at the very start of\n__cxa_guard_acquire would always return false even if the initialization\nwas actually complete. Before my r11-3484 change the atomic compare\nexchange would have loaded the correct value, and then returned 0 as\nexpected when the initialization is complete. After my change, in the\nsingle-threaded case there is no redundant check for init being\ncomplete, because I foolishly assumed that the check at the start of the\nfunction actually worked.\n\nThe default definition of _GLIBCXX_GUARD_SET_AND_RELEASE is also wrong\nfor big endian EABI, but appears to work because it sets the wrong bit\nbut then the buggy TEST_AND_ACQUIRE tests that wrong bit as well. Also,\nthe buggy SET_AND_RELEASE macro is only used for targets with threads\nenabled but no futex syscalls.\n\nThis should fix the regressions introduced by my patch, by defining\ncustom versions of the TEST_AND_ACQUIRE and SET_AND_RELEASE macros that\nare correct for EABI.\n\nlibstdc++-v3/ChangeLog:\n\n\t* config/cpu/arm/cxxabi_tweaks.h (_GLIBCXX_GUARD_TEST_AND_ACQUIRE):\n\t(_GLIBCXX_GUARD_SET_AND_RELEASE): Define for EABI.", "tree": {"sha": "e5b59a47dd1ec16e2f9c89e881c82f3b54455aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b59a47dd1ec16e2f9c89e881c82f3b54455aac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbc7ad524a540e34ce25d120d0968f36c571bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbc7ad524a540e34ce25d120d0968f36c571bbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dbc7ad524a540e34ce25d120d0968f36c571bbb"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "4fb34869f8ac0359eb4460547c79783dd9e240f0", "filename": "libstdc++-v3/config/cpu/arm/cxxabi_tweaks.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h?ref=d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea", "patch": "@@ -39,14 +39,19 @@ namespace __cxxabiv1\n \n #ifdef __ARM_EABI__\n   // The ARM EABI uses the least significant bit of a 32-bit\n-  // guard variable.  */\n+  // guard variable.\n #define _GLIBCXX_GUARD_TEST(x) ((*(x) & 1) != 0)\n #define _GLIBCXX_GUARD_SET(x) *(x) = 1\n #define _GLIBCXX_GUARD_BIT 1\n #define _GLIBCXX_GUARD_PENDING_BIT __guard_test_bit (1, 1)\n #define _GLIBCXX_GUARD_WAITING_BIT __guard_test_bit (2, 1)\n   typedef int __guard;\n \n+#define _GLIBCXX_GUARD_TEST_AND_ACQUIRE(x) \\\n+  _GLIBCXX_GUARD_TEST(__atomic_load_n(x, __ATOMIC_ACQUIRE))\n+#define _GLIBCXX_GUARD_SET_AND_RELEASE(x) \\\n+  __atomic_store_n(x, 1, __ATOMIC_RELEASE)\n+\n   // We also want the element size in array cookies.\n #define _GLIBCXX_ELTSIZE_IN_COOKIE 1\n "}]}