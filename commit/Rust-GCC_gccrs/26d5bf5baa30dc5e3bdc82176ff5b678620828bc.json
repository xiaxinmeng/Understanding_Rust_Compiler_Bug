{"sha": "26d5bf5baa30dc5e3bdc82176ff5b678620828bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkNWJmNWJhYTMwZGM1ZTNiZGM4MjE3NmZmNWI2Nzg2MjA4MjhiYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-01-13T08:04:11Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-01-13T08:04:11Z"}, "message": "alpha.c (alpha_legitimate_address_p): Explicit relocations of local symbols wider than UNITS_PER_WORD are not valid.\n\n\t* config/alpha/alpha.c (alpha_legitimate_address_p): Explicit\n\trelocations of local symbols  wider than UNITS_PER_WORD are not valid.\n\t(alpha_legitimize_address): Do not split local symbols wider than\n\tUNITS_PER_WORD into HIGH/LO_SUM parts.\n\ntestsuite/ChangeLog:\n\n\tRevert:\n\t2009-01-05  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* gcc.dg/compat/struct-layout-1_generate.c (dg-options): Add -mieee\n\tfor alpha*-*-* targets.\n\t* g++.dg/compat/struct-layout-1_generate.c (dg-options): Ditto.\n\nFrom-SVN: r143332", "tree": {"sha": "35be218f6e29b0c5b4863e9547af771c00fee5d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35be218f6e29b0c5b4863e9547af771c00fee5d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d5bf5baa30dc5e3bdc82176ff5b678620828bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d5bf5baa30dc5e3bdc82176ff5b678620828bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d5bf5baa30dc5e3bdc82176ff5b678620828bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/comments", "author": null, "committer": null, "parents": [{"sha": "6ce45dc0468576a2c41799a3b257595e674c930d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce45dc0468576a2c41799a3b257595e674c930d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce45dc0468576a2c41799a3b257595e674c930d"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "84354df369ba50449ac886dfbbe7473fdd7f0b7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26d5bf5baa30dc5e3bdc82176ff5b678620828bc", "patch": "@@ -1,3 +1,10 @@\n+2009-01-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_legitimate_address_p): Explicit\n+\trelocations of local symbols  wider than UNITS_PER_WORD are not valid.\n+\t(alpha_legitimize_address): Do not split local symbols wider than\n+\tUNITS_PER_WORD into HIGH/LO_SUM parts.\n+\n 2009-01-13  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR bootstrap/38580\n@@ -32,9 +39,9 @@\n 2009-01-12  Tomas Bily  <tbily@suse.cz>\n \n \tPR middlend/38385\n-        * tree-loop-distribution.c (prop_phis): New function.\n-        (generate_builtin): Call prop_phis.\n-        * testsuite/gcc.dg/tree-ssa/pr38385.c: New file.\n+\t* tree-loop-distribution.c (prop_phis): New function.\n+\t(generate_builtin): Call prop_phis.\n+\t* testsuite/gcc.dg/tree-ssa/pr38385.c: New file.\n \n 2009-01-12  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -85,8 +92,7 @@\n 2008-01-09  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/38495\n-\t* ira-emit.c (print_move_list, ira_debug_move_list): New\n-\tfunctions.\n+\t* ira-emit.c (print_move_list, ira_debug_move_list): New functions.\n \t(add_range_and_copies_from_move_list): Print all added ranges.\n \tAdd ranges to memory optimized destination.\n \n@@ -111,8 +117,7 @@\n \tepilogue_size_needed to the epilogue expanders.\n \n \tPR c/35742\n-\t* c-pretty-print.c (pp_c_expression): Handle GOTO_EXPR like\n-\tBIND_EXPR.\n+\t* c-pretty-print.c (pp_c_expression): Handle GOTO_EXPR like BIND_EXPR.\n \n 2009-01-09  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n "}, {"sha": "7bafb0ae84beefdc7e5197e564adbbcad19b377e", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=26d5bf5baa30dc5e3bdc82176ff5b678620828bc", "patch": "@@ -864,9 +864,11 @@ alpha_legitimate_address_p (enum machine_mode mode, rtx x, int strict)\n \t}\n     }\n \n-  /* If we're managing explicit relocations, LO_SUM is valid, as\n-     are small data symbols.  */\n-  else if (TARGET_EXPLICIT_RELOCS)\n+  /* If we're managing explicit relocations, LO_SUM is valid, as are small\n+     data symbols.  Avoid explicit relocations of modes larger than word\n+     mode since i.e. $LC0+8($1) can fold around +/- 32k offset.  */\n+  else if (TARGET_EXPLICIT_RELOCS\n+\t   && GET_MODE_SIZE (mode) <= UNITS_PER_WORD)\n     {\n       if (small_symbolic_operand (x, Pmode))\n \treturn true;\n@@ -916,8 +918,7 @@ get_tls_get_addr (void)\n    to be legitimate.  If we find one, return the new, valid address.  */\n \n rtx\n-alpha_legitimize_address (rtx x, rtx scratch,\n-\t\t\t  enum machine_mode mode ATTRIBUTE_UNUSED)\n+alpha_legitimize_address (rtx x, rtx scratch, enum machine_mode mode)\n {\n   HOST_WIDE_INT addend;\n \n@@ -965,8 +966,12 @@ alpha_legitimize_address (rtx x, rtx scratch,\n       goto split_addend;\n     }\n \n-  /* If this is a local symbol, split the address into HIGH/LO_SUM parts.  */\n-  if (TARGET_EXPLICIT_RELOCS && symbolic_operand (x, Pmode))\n+  /* If this is a local symbol, split the address into HIGH/LO_SUM parts.\n+     Avoid modes larger than word mode since i.e. $LC0+8($1) can fold\n+     around +/- 32k offset.  */\n+  if (TARGET_EXPLICIT_RELOCS\n+      && GET_MODE_SIZE (mode) <= UNITS_PER_WORD\n+      && symbolic_operand (x, Pmode))\n     {\n       rtx r0, r16, eqv, tga, tp, insn, dest, seq;\n "}, {"sha": "a59c294453c0aa60c276beedc6845ca809450fba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26d5bf5baa30dc5e3bdc82176ff5b678620828bc", "patch": "@@ -1,3 +1,12 @@\n+2009-01-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tRevert:\n+\t2009-01-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/compat/struct-layout-1_generate.c (dg-options): Add -mieee\n+\tfor alpha*-*-* targets.\n+\t* g++.dg/compat/struct-layout-1_generate.c (dg-options): Ditto.\n+\n 2009-01-12  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/38772"}, {"sha": "575ad61a01a51cf636c72162595966c0b301bc1d", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=26d5bf5baa30dc5e3bdc82176ff5b678620828bc", "patch": "@@ -48,8 +48,7 @@ const char *dg_options[] = {\n \"/* { dg-options \\\"%s-I%s -fno-common\\\" { target hppa*-*-hpux* powerpc*-*-darwin* *-*-mingw32* *-*-cygwin* } } */\\n\",\n \"/* { dg-options \\\"%s-I%s -mno-mmx -fno-common\\\" { target i?86-*-darwin* x86_64-*-darwin* } } */\\n\",\n \"/* { dg-options \\\"%s-I%s -mno-base-addresses\\\" { target mmix-*-* } } */\\n\",\n-\"/* { dg-options \\\"%s-I%s -mlongcalls -mtext-section-literals\\\" { target xtensa*-*-* } } */\\n\",\n-\"/* { dg-options \\\"%s-I%s -mieee\\\" { target alpha*-*-* } } */\\n\"\n+\"/* { dg-options \\\"%s-I%s -mlongcalls -mtext-section-literals\\\" { target xtensa*-*-* } } */\\n\"\n #define NDG_OPTIONS (sizeof (dg_options) / sizeof (dg_options[0]))\n };\n "}, {"sha": "a162dee42a46cb3e74a3fff15b9a1bd1c5f37a49", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d5bf5baa30dc5e3bdc82176ff5b678620828bc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=26d5bf5baa30dc5e3bdc82176ff5b678620828bc", "patch": "@@ -48,8 +48,7 @@ const char *dg_options[] = {\n \"/* { dg-options \\\"%s-I%s -fno-common\\\" { target hppa*-*-hpux* powerpc*-*-darwin* *-*-mingw32* *-*-cygwin* } } */\\n\",\n \"/* { dg-options \\\"%s-I%s -mno-mmx -fno-common\\\" { target i?86-*-darwin* x86_64-*-darwin* } } */\\n\",\n \"/* { dg-options \\\"%s-I%s -mno-base-addresses\\\" { target mmix-*-* } } */\\n\",\n-\"/* { dg-options \\\"%s-I%s -mlongcalls -mtext-section-literals\\\" { target xtensa*-*-* } } */\\n\",\n-\"/* { dg-options \\\"%s-I%s -mieee\\\" { target alpha*-*-* } } */\\n\"\n+\"/* { dg-options \\\"%s-I%s -mlongcalls -mtext-section-literals\\\" { target xtensa*-*-* } } */\\n\"\n #define NDG_OPTIONS (sizeof (dg_options) / sizeof (dg_options[0]))\n };\n "}]}