{"sha": "a27cf81c7a193551238e3491e556fd73a7d63a34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3Y2Y4MWM3YTE5MzU1MTIzOGUzNDkxZTU1NmZkNzNhN2Q2M2EzNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-30T10:43:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-30T10:43:54Z"}, "message": "re PR libstdc++/13369 (__verify_grouping (and __add_grouping?) not correct)\n\n2003-12-30  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/13369\n\t* include/bits/locale_facets.tcc (__verify_grouping):\n\tFix to deal properly with __grouping_tmp.size() >\n\t__grouping.size().\n\t* testsuite/22_locale/num_get/get/char/13.cc: New.\n\t* testsuite/22_locale/num_get/get/wchar_t/13.cc: Ditto.\n\nFrom-SVN: r75227", "tree": {"sha": "16972ab6a97ef1f78e4d772df67159b9c598b2ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16972ab6a97ef1f78e4d772df67159b9c598b2ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a27cf81c7a193551238e3491e556fd73a7d63a34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27cf81c7a193551238e3491e556fd73a7d63a34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27cf81c7a193551238e3491e556fd73a7d63a34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27cf81c7a193551238e3491e556fd73a7d63a34/comments", "author": null, "committer": null, "parents": [{"sha": "d47cc544b60738db5e983c4b1ac6b40236b9633c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47cc544b60738db5e983c4b1ac6b40236b9633c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d47cc544b60738db5e983c4b1ac6b40236b9633c"}], "stats": {"total": 188, "additions": 177, "deletions": 11}, "files": [{"sha": "5add00b67ea3c18c47ce8f99752c590fc8364d3c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27cf81c7a193551238e3491e556fd73a7d63a34/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27cf81c7a193551238e3491e556fd73a7d63a34/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a27cf81c7a193551238e3491e556fd73a7d63a34", "patch": "@@ -1,3 +1,12 @@\n+2003-12-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/13369\n+\t* include/bits/locale_facets.tcc (__verify_grouping):\n+\tFix to deal properly with __grouping_tmp.size() >\n+\t__grouping.size().\n+\t* testsuite/22_locale/num_get/get/char/13.cc: New.\n+\t* testsuite/22_locale/num_get/get/wchar_t/13.cc: Ditto.\n+\t\n 2003-12-29  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* include/bits/locale_facets.h (ctype.narrow,widen): Add cast."}, {"sha": "40b612c1dde584b0a98ac49f0ef9c422219e8337", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27cf81c7a193551238e3491e556fd73a7d63a34/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27cf81c7a193551238e3491e556fd73a7d63a34/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=a27cf81c7a193551238e3491e556fd73a7d63a34", "patch": "@@ -2263,23 +2263,22 @@ namespace std\n     bool\n     __verify_grouping(const basic_string<_CharT>& __grouping, \n \t\t      const basic_string<_CharT>& __grouping_tmp)\n-    {         \n-      size_t __i = 0;\n-      size_t __j = 0;\n-      const size_t __len = __grouping.size();\n-      const size_t __n = __grouping_tmp.size();\n+    { \n+      const size_t __n = __grouping_tmp.size() - 1;\n+      const size_t __min = std::min(__n, __grouping.size() - 1);\n+      size_t __i = __n;\n       bool __test = true;\n-      \n+\n       // Parsed number groupings have to match the\n       // numpunct::grouping string exactly, starting at the\n       // right-most point of the parsed sequence of elements ...\n-      while (__test && __i < __n - 1)\n-\tfor (__j = 0; __test && __j < __len && __i < __n - 1; ++__j, ++__i)\n-\t  __test = __grouping[__j] == __grouping_tmp[__n - __i - 1];\n+      for (size_t __j = 0; __j < __min && __test; --__i, ++__j)\n+\t__test = __grouping_tmp[__i] == __grouping[__j];\n+      for (; __i && __test; --__i)\n+\t__test = __grouping_tmp[__i] == __grouping[__min];\n       // ... but the last parsed grouping can be <= numpunct\n       // grouping.\n-      __j == __len ? __j = 0 : __j;\n-      __test &= __grouping[__j] >= __grouping_tmp[__n - __i - 1];\n+      __test &= __grouping_tmp[0] <= __grouping[__min];\n       return __test;\n     }\n "}, {"sha": "63cb008e8500ef93abe84aa2e53238af369503c5", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/13.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27cf81c7a193551238e3491e556fd73a7d63a34/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27cf81c7a193551238e3491e556fd73a7d63a34/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F13.cc?ref=a27cf81c7a193551238e3491e556fd73a7d63a34", "patch": "@@ -0,0 +1,79 @@\n+// 2003-12-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct Punct1: std::numpunct<char>\n+{ std::string do_grouping() const { return \"\\003\\002\\001\"; } };\n+\n+struct Punct2: std::numpunct<char>\n+{ std::string do_grouping() const { return \"\\001\\003\"; } };\n+\n+// libstdc++/13369\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  istringstream iss1, iss2;\n+  iss1.imbue(locale(iss1.getloc(), static_cast<numpunct<char>*>(new Punct1)));\n+  iss2.imbue(locale(iss2.getloc(), static_cast<numpunct<char>*>(new Punct2)));\n+  const num_get<char>& ng1 = use_facet<num_get<char> >(iss1.getloc()); \n+  const num_get<char>& ng2 = use_facet<num_get<char> >(iss2.getloc()); \n+\n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  long l = 0l;\n+  long l1 = 12345678l;\n+  double d = 0.0;\n+  double d1 = 1234567.0;\n+  double d2 = 123456.0;\n+\n+  iss1.str(\"1,2,3,45,678\");\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l1 );\n+\n+  iss2.str(\"123,456,7.0\");\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+\n+  iss2.str(\"12,345,6.0\");\n+  iss2.clear();\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "217695957b8cee64d9afdd1f414eb2c58ec44aee", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/13.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27cf81c7a193551238e3491e556fd73a7d63a34/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27cf81c7a193551238e3491e556fd73a7d63a34/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F13.cc?ref=a27cf81c7a193551238e3491e556fd73a7d63a34", "patch": "@@ -0,0 +1,79 @@\n+// 2003-12-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct Punct1: std::numpunct<wchar_t>\n+{ std::string do_grouping() const { return \"\\003\\002\\001\"; } };\n+\n+struct Punct2: std::numpunct<wchar_t>\n+{ std::string do_grouping() const { return \"\\001\\003\"; } };\n+\n+// libstdc++/13369\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  wistringstream iss1, iss2;\n+  iss1.imbue(locale(iss1.getloc(), static_cast<numpunct<wchar_t>*>(new Punct1)));\n+  iss2.imbue(locale(iss2.getloc(), static_cast<numpunct<wchar_t>*>(new Punct2)));\n+  const num_get<wchar_t>& ng1 = use_facet<num_get<wchar_t> >(iss1.getloc()); \n+  const num_get<wchar_t>& ng2 = use_facet<num_get<wchar_t> >(iss2.getloc()); \n+\n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  long l = 0l;\n+  long l1 = 12345678l;\n+  double d = 0.0;\n+  double d1 = 1234567.0;\n+  double d2 = 123456.0;\n+\n+  iss1.str(L\"1,2,3,45,678\");\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l1 );\n+\n+  iss2.str(L\"123,456,7.0\");\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+\n+  iss2.str(L\"12,345,6.0\");\n+  iss2.clear();\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}