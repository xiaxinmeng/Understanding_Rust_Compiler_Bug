{"sha": "83b853c9fc743ac4f69c9fed4fdd7d65038868e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNiODUzYzlmYzc0M2FjNGY2OWM5ZmVkNGZkZDdkNjUwMzg4NjhlNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-04-17T11:33:02Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-04-17T11:33:02Z"}, "message": "x\n\nFrom-SVN: r13909", "tree": {"sha": "a8b7e993647c312d64436053af9b8b2889178a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8b7e993647c312d64436053af9b8b2889178a7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83b853c9fc743ac4f69c9fed4fdd7d65038868e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b853c9fc743ac4f69c9fed4fdd7d65038868e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83b853c9fc743ac4f69c9fed4fdd7d65038868e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b853c9fc743ac4f69c9fed4fdd7d65038868e5/comments", "author": null, "committer": null, "parents": [{"sha": "fc99085612a47ec88e5dff9c70056bba092e29e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc99085612a47ec88e5dff9c70056bba092e29e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc99085612a47ec88e5dff9c70056bba092e29e5"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "672fe6bce67defe3423d943c2057a9723c722cb4", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b853c9fc743ac4f69c9fed4fdd7d65038868e5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b853c9fc743ac4f69c9fed4fdd7d65038868e5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=83b853c9fc743ac4f69c9fed4fdd7d65038868e5", "patch": "@@ -5208,10 +5208,13 @@ expand_expr (exp, target, tmode, modifier)\n       }\n \n     case RTL_EXPR:\n-      if (RTL_EXPR_SEQUENCE (exp) == const0_rtx)\n-\tabort ();\n-      emit_insns (RTL_EXPR_SEQUENCE (exp));\n-      RTL_EXPR_SEQUENCE (exp) = const0_rtx;\n+      if (RTL_EXPR_SEQUENCE (exp))\n+\t{\n+\t  if (RTL_EXPR_SEQUENCE (exp) == const0_rtx)\n+\t    abort ();\n+\t  emit_insns (RTL_EXPR_SEQUENCE (exp));\n+\t  RTL_EXPR_SEQUENCE (exp) = const0_rtx;\n+\t}\n       preserve_rtl_expr_result (RTL_EXPR_RTL (exp));\n       free_temps_for_rtl_expr (exp);\n       return RTL_EXPR_RTL (exp);"}, {"sha": "f6a92e10eb944f1b5eb75c580eac1ca50570e216", "filename": "gcc/tree.c", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b853c9fc743ac4f69c9fed4fdd7d65038868e5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b853c9fc743ac4f69c9fed4fdd7d65038868e5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=83b853c9fc743ac4f69c9fed4fdd7d65038868e5", "patch": "@@ -2138,19 +2138,42 @@ int_size_in_bytes (type)\n }\n \f\n /* Return, as a tree node, the number of elements for TYPE (which is an\n-   ARRAY_TYPE) minus one. This counts only elements of the top array.  */\n+   ARRAY_TYPE) minus one. This counts only elements of the top array.\n+\n+   Don't let any SAVE_EXPRs escape; if we are called as part of a cleanup\n+   action, they would get unsaved.  */\n \n tree\n array_type_nelts (type)\n      tree type;\n {\n   tree index_type = TYPE_DOMAIN (type);\n+  tree min = TYPE_MIN_VALUE (index_type);\n+  tree max = TYPE_MAX_VALUE (index_type);\n+\n+  if (! TREE_CONSTANT (min))\n+    {\n+      STRIP_NOPS (min);\n+      if (TREE_CODE (min) == SAVE_EXPR)\n+\tmin = build (RTL_EXPR, TREE_TYPE (TYPE_MIN_VALUE (index_type)), 0,\n+\t\t     SAVE_EXPR_RTL (min));\n+      else\n+\tmin = TYPE_MIN_VALUE (index_type);\n+    }\n+\n+  if (! TREE_CONSTANT (max))\n+    {\n+      STRIP_NOPS (max);\n+      if (TREE_CODE (max) == SAVE_EXPR)\n+\tmax = build (RTL_EXPR, TREE_TYPE (TYPE_MAX_VALUE (index_type)), 0,\n+\t\t     SAVE_EXPR_RTL (max));\n+      else\n+\tmax = TYPE_MAX_VALUE (index_type);\n+    }\n \n-  return (integer_zerop (TYPE_MIN_VALUE (index_type))\n-\t  ? TYPE_MAX_VALUE (index_type)\n-\t  : fold (build (MINUS_EXPR, TREE_TYPE (TYPE_MAX_VALUE (index_type)),\n-\t\t\t TYPE_MAX_VALUE (index_type),\n-\t\t\t TYPE_MIN_VALUE (index_type))));\n+  return (integer_zerop (min)\n+\t  ? max\n+\t  : fold (build (MINUS_EXPR, TREE_TYPE (max), max, min)));\n }\n \f\n /* Return nonzero if arg is static -- a reference to an object in"}]}