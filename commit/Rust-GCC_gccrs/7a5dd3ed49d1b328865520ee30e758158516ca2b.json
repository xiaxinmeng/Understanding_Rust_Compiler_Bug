{"sha": "7a5dd3ed49d1b328865520ee30e758158516ca2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E1ZGQzZWQ0OWQxYjMyODg2NTUyMGVlMzBlNzU4MTU4NTE2Y2EyYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-05T01:33:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-07T16:10:07Z"}, "message": "c++: reject class lvalues in 'rvalue'\n\nWrapping a class lvalue in NON_LVALUE_EXPR is not sufficient to make it a\nusable prvalue; callers must use force_rvalue instead.\n\ngcc/cp/ChangeLog:\n\n\t* tree.c (rvalue): Assert expr is not a class lvalue.", "tree": {"sha": "70e590826b8ec89bb93ba3f9d2b5166a4354be1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70e590826b8ec89bb93ba3f9d2b5166a4354be1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a5dd3ed49d1b328865520ee30e758158516ca2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5dd3ed49d1b328865520ee30e758158516ca2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a5dd3ed49d1b328865520ee30e758158516ca2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5dd3ed49d1b328865520ee30e758158516ca2b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc178519771db508c03611cff4a1466cf67fce1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc178519771db508c03611cff4a1466cf67fce1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc178519771db508c03611cff4a1466cf67fce1d"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "7f148b4b158553880ace9d0992136da8209c5338", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5dd3ed49d1b328865520ee30e758158516ca2b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5dd3ed49d1b328865520ee30e758158516ca2b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7a5dd3ed49d1b328865520ee30e758158516ca2b", "patch": "@@ -940,7 +940,12 @@ rvalue (tree expr)\n   /* We need to do this for rvalue refs as well to get the right answer\n      from decltype; see c++/36628.  */\n   if (!processing_template_decl && glvalue_p (expr))\n-    expr = build1 (NON_LVALUE_EXPR, type, expr);\n+    {\n+      /* But don't use this function for class lvalues; use move (to treat an\n+\t lvalue as an xvalue) or force_rvalue (to make a prvalue copy).  */\n+      gcc_checking_assert (!CLASS_TYPE_P (type));\n+      expr = build1 (NON_LVALUE_EXPR, type, expr);\n+    }\n   else if (type != TREE_TYPE (expr))\n     expr = build_nop (type, expr);\n "}]}