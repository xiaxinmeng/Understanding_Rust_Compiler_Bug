{"sha": "06e40b261a3949c40ae98fe08fb68ea1d6903e63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlNDBiMjYxYTM5NDljNDBhZTk4ZmUwOGZiNjhlYTFkNjkwM2U2Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-17T04:23:56Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-17T04:23:56Z"}, "message": "(emit_cmp_insn): Always do protect_from_queue on x, y, size.\n\n(expand_float, expand_fix): Likewise.\n\nFrom-SVN: r1605", "tree": {"sha": "4ced3c72189b04fefa17b8d9ca7269c45167639d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ced3c72189b04fefa17b8d9ca7269c45167639d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06e40b261a3949c40ae98fe08fb68ea1d6903e63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e40b261a3949c40ae98fe08fb68ea1d6903e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e40b261a3949c40ae98fe08fb68ea1d6903e63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e40b261a3949c40ae98fe08fb68ea1d6903e63/comments", "author": null, "committer": null, "parents": [{"sha": "937522b52630d9f3a35e827d711a01daa53f7873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/937522b52630d9f3a35e827d711a01daa53f7873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/937522b52630d9f3a35e827d711a01daa53f7873"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "bdc69caf5da8e3c46ba71a16f65eafe823516caa", "filename": "gcc/optabs.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e40b261a3949c40ae98fe08fb68ea1d6903e63/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e40b261a3949c40ae98fe08fb68ea1d6903e63/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=06e40b261a3949c40ae98fe08fb68ea1d6903e63", "patch": "@@ -1673,6 +1673,7 @@ emit_cmp_insn (x, y, comparison, size, mode, unsignedp, align)\n \t  enum machine_mode result_mode\n \t    = insn_operand_mode[(int) CODE_FOR_cmpstrsi][0];\n \t  rtx result = gen_reg_rtx (result_mode);\n+\t  size = protect_from_queue (size, 0);\n \t  emit_insn (gen_cmpstrsi (result, x, y,\n \t\t\t\t   convert_to_mode (SImode, size, 1),\n \t\t\t\t   GEN_INT (align)));\n@@ -1753,6 +1754,8 @@ emit_cmp_insn (x, y, comparison, size, mode, unsignedp, align)\n \t  if (cmp_optab->handlers[(int) wider_mode].insn_code\n \t      != CODE_FOR_nothing)\n \t    {\n+\t      x = protect_from_queue (x, 0);\n+\t      y = protect_from_queue (y, 0);\n \t      x = convert_to_mode (wider_mode, x, unsignedp);\n \t      y = convert_to_mode (wider_mode, y, unsignedp);\n \t      emit_cmp_insn (x, y, comparison, NULL_RTX,\n@@ -1939,6 +1942,8 @@ emit_float_lib_cmp (x, y, comparison)\n \t       != CODE_FOR_nothing)\n \t      || (cmp_optab->handlers[(int) wider_mode].libfunc != 0))\n \t    {\n+\t      x = protect_from_queue (x, 0);\n+\t      y = protect_from_queue (y, 0);\n \t      x = convert_to_mode (wider_mode, x, 0);\n \t      y = convert_to_mode (wider_mode, y, 0);\n \t      emit_float_lib_cmp (x, y, comparison);\n@@ -2820,11 +2825,10 @@ expand_float (to, from, unsignedp)\n \tif (icode != CODE_FOR_nothing)\n \t  {\n \t    to = protect_from_queue (to, 1);\n+\t    from = protect_from_queue (from, 0);\n \n \t    if (imode != GET_MODE (from))\n \t      from = convert_to_mode (imode, from, unsignedp);\n-\t    else\n-\t      from = protect_from_queue (from, 0);\n \n \t    if (fmode != GET_MODE (to))\n \t      target = gen_reg_rtx (fmode);\n@@ -2893,11 +2897,10 @@ expand_float (to, from, unsignedp)\n       rtx insns;\n \n       to = protect_from_queue (to, 1);\n+      from = protect_from_queue (from, 0);\n \n       if (GET_MODE_SIZE (GET_MODE (from)) < GET_MODE_SIZE (SImode))\n \tfrom = convert_to_mode (SImode, from, unsignedp);\n-      else\n-\tfrom = protect_from_queue (from, 0);\n \n       if (flag_force_mem)\n \tfrom = force_not_mem (from);\n@@ -3012,11 +3015,10 @@ expand_fix (to, from, unsignedp)\n \tif (icode != CODE_FOR_nothing)\n \t  {\n \t    to = protect_from_queue (to, 1);\n+\t    from = protect_from_queue (from, 0);\n \n \t    if (fmode != GET_MODE (from))\n \t      from = convert_to_mode (fmode, from, 0);\n-\t    else\n-\t      from = protect_from_queue (from, 0);\n \n \t    if (must_trunc)\n \t      from = ftruncify (from);"}]}