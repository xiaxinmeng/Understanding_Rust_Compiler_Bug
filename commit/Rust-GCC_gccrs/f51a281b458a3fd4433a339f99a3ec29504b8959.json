{"sha": "f51a281b458a3fd4433a339f99a3ec29504b8959", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUxYTI4MWI0NThhM2ZkNDQzM2EzMzlmOTlhM2VjMjk1MDRiODk1OQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2006-02-01T01:03:52Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-02-01T01:03:52Z"}, "message": "re PR middle-end/26001 (expand uses the wrong part of the string for array accesses)\n\n2006-01-31  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/26001\n        * gfortran.dg/data_char_2.f90: New.\n2006-01-31  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/26001\n        * expr.c (expand_expr_real_1) <case ARRAY_REF>:\n        Use the corrected index for the character\n        out of the string constant.\n\nFrom-SVN: r110465", "tree": {"sha": "e83f3620b518a00126b9852a9bbf074173c665d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e83f3620b518a00126b9852a9bbf074173c665d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f51a281b458a3fd4433a339f99a3ec29504b8959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51a281b458a3fd4433a339f99a3ec29504b8959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51a281b458a3fd4433a339f99a3ec29504b8959", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51a281b458a3fd4433a339f99a3ec29504b8959/comments", "author": null, "committer": null, "parents": [{"sha": "60ec1aa4bc17d19e0a89c9b369caa1cc5b30b0ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ec1aa4bc17d19e0a89c9b369caa1cc5b30b0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60ec1aa4bc17d19e0a89c9b369caa1cc5b30b0ea"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "fcb8f005793b1824d672d3c3f533672946ff4458", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51a281b458a3fd4433a339f99a3ec29504b8959/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51a281b458a3fd4433a339f99a3ec29504b8959/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f51a281b458a3fd4433a339f99a3ec29504b8959", "patch": "@@ -1,3 +1,10 @@\n+2006-01-31  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/26001\n+\t* expr.c (expand_expr_real_1) <case ARRAY_REF>:\n+\tUse the corrected index for the character\n+\tout of the string constant.\n+\n 2006-01-31  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* mode-switching.c (optimize_mode_switching): Fix size"}, {"sha": "362ab8b57564ebf61a1f44b53c1e3b4d1e8e264d", "filename": "gcc/expr.c", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51a281b458a3fd4433a339f99a3ec29504b8959/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51a281b458a3fd4433a339f99a3ec29504b8959/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f51a281b458a3fd4433a339f99a3ec29504b8959", "patch": "@@ -7126,17 +7126,36 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t  break;\n \t\t\t}\n \t\t  }\n-\t\telse if (TREE_CODE (init) == STRING_CST\n-\t\t\t && 0 > compare_tree_int (index,\n-\t\t\t\t\t\t  TREE_STRING_LENGTH (init)))\n+\t\telse if(TREE_CODE (init) == STRING_CST)\n \t\t  {\n-\t\t    tree type = TREE_TYPE (TREE_TYPE (init));\n-\t\t    enum machine_mode mode = TYPE_MODE (type);\n-\n-\t\t    if (GET_MODE_CLASS (mode) == MODE_INT\n-\t\t\t&& GET_MODE_SIZE (mode) == 1)\n-\t\t      return gen_int_mode (TREE_STRING_POINTER (init)\n-\t\t\t\t\t   [TREE_INT_CST_LOW (index)], mode);\n+\t\t    tree index1 = index;\n+\t\t    tree low_bound = array_ref_low_bound (exp);\n+\t\t    index1 = fold_convert (sizetype, TREE_OPERAND (exp, 1));\n+\t\t    \n+\t\t    /* Optimize the special-case of a zero lower bound.\n+\t\t    \n+\t\t       We convert the low_bound to sizetype to avoid some problems\n+\t\t       with constant folding.  (E.g. suppose the lower bound is 1,\n+\t\t       and its mode is QI.  Without the conversion,l (ARRAY\n+\t\t       +(INDEX-(unsigned char)1)) becomes ((ARRAY+(-(unsigned char)1))\n+\t\t       +INDEX), which becomes (ARRAY+255+INDEX).  Opps!)  */\n+\t\t    \n+\t\t    if (! integer_zerop (low_bound))\n+\t\t      index1 = size_diffop (index1, fold_convert (sizetype,\n+\t\t\t\t\t\t\t\t  low_bound));\n+\t\t  \n+\t\t    if (0 > compare_tree_int (index1,\n+\t\t\t\t\t      TREE_STRING_LENGTH (init)))\n+\t\t      {\n+\t\t\ttree type = TREE_TYPE (TREE_TYPE (init));\n+\t\t\tenum machine_mode mode = TYPE_MODE (type);\n+\n+\t\t\tif (GET_MODE_CLASS (mode) == MODE_INT\n+\t\t\t    && GET_MODE_SIZE (mode) == 1)\n+\t\t\t  return gen_int_mode (TREE_STRING_POINTER (init)\n+\t\t\t\t\t       [TREE_INT_CST_LOW (index1)],\n+\t\t\t\t\t       mode);\n+\t\t      }\n \t\t  }\n \t      }\n \t  }"}, {"sha": "50a2a7f610367e510a74e652a46ba38e659cb384", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51a281b458a3fd4433a339f99a3ec29504b8959/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51a281b458a3fd4433a339f99a3ec29504b8959/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f51a281b458a3fd4433a339f99a3ec29504b8959", "patch": "@@ -1,3 +1,8 @@\n+2006-01-31  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/26001\n+\t* gfortran.dg/data_char_2.f90: New.\n+\n 2006-01-31  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR fortran/26039"}, {"sha": "3e021b165f796581cf78d70a77b834640e4df128", "filename": "gcc/testsuite/gfortran.dg/data_char_2.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51a281b458a3fd4433a339f99a3ec29504b8959/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_char_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51a281b458a3fd4433a339f99a3ec29504b8959/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_char_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_char_2.f90?ref=f51a281b458a3fd4433a339f99a3ec29504b8959", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+!  Test that getting a character from a\n+! string data works.\n+\n+CHARACTER*10       INTSTR\n+CHARACTER          C1\n+DATA               INTSTR / '0123456789' /\n+\n+C1 = INTSTR(1:1)\n+if(C1 .ne. '0')  call abort()\n+\n+end"}]}