{"sha": "c94a75af08ce77997d7566d5fcca097ca177a97f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk0YTc1YWYwOGNlNzc5OTdkNzU2NmQ1ZmNjYTA5N2NhMTc3YTk3Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-02-12T11:34:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2005-02-12T11:34:24Z"}, "message": "optabs.h (enum optab_index): Add new OTI_ldexp.\n\n\t* optabs.h (enum optab_index): Add new OTI_ldexp.\n\t(ldexp_optab): Define corresponding macro.\n\t* optabs.c (init_optabs): Initialize ldexp_optab.\n\t* genopinit.c (optabs): Implement ldexp_optab using ldexp?f3\n\tpatterns.\n\t* builtins.c (expand_builtin_mathfn_2): Handle BUILT_IN_LDEXP{,F,L}\n\tusing ldexp_optab.\n\t(expand_builtin): Expand BUILT_IN_LDEXP{,F,L} using\n\texpand_builtin_mathfn_2 if flag_unsafe_math_optimizations is set.\n\n\t* config/i386/i386.md (ldexpsf3, ldexpdf3, ldexpxf3): New expanders\n\tto implement ldexpf, ldexp and ldexpl built-ins as inline x87\n\tintrinsics.\n\ntestsuite:\n\n\t* gcc.dg/builtins-34.c: Also check ldexp*.\n\nFrom-SVN: r94931", "tree": {"sha": "cb186a5041a6d892c57dd7ea7381d5eb638b0449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb186a5041a6d892c57dd7ea7381d5eb638b0449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c94a75af08ce77997d7566d5fcca097ca177a97f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94a75af08ce77997d7566d5fcca097ca177a97f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c94a75af08ce77997d7566d5fcca097ca177a97f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94a75af08ce77997d7566d5fcca097ca177a97f/comments", "author": null, "committer": null, "parents": [{"sha": "a5ae3ad628e32bca2f2b0de8b570623757879cd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ae3ad628e32bca2f2b0de8b570623757879cd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5ae3ad628e32bca2f2b0de8b570623757879cd7"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "bfaa6915ecca23d08c6534db3c195fb1bb36c490", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c94a75af08ce77997d7566d5fcca097ca177a97f", "patch": "@@ -1,3 +1,19 @@\n+2005-02-12  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_ldexp.\n+\t(ldexp_optab): Define corresponding macro.\n+\t* optabs.c (init_optabs): Initialize ldexp_optab.\n+\t* genopinit.c (optabs): Implement ldexp_optab using ldexp?f3\n+\tpatterns.\n+\t* builtins.c (expand_builtin_mathfn_2): Handle BUILT_IN_LDEXP{,F,L}\n+\tusing ldexp_optab.\n+\t(expand_builtin): Expand BUILT_IN_LDEXP{,F,L} using\n+\texpand_builtin_mathfn_2 if flag_unsafe_math_optimizations is set.\n+\n+\t* config/i386/i386.md (ldexpsf3, ldexpdf3, ldexpxf3): New expanders\n+\tto implement ldexpf, ldexp and ldexpl built-ins as inline x87\n+\tintrinsics.\n+\n 2005-02-13  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vectorizer.h (struct _stmt_vec_info): Rename a field: base"}, {"sha": "afeb9bc5ce6b5874046e3f204a475e5258704a85", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c94a75af08ce77997d7566d5fcca097ca177a97f", "patch": "@@ -1862,14 +1862,20 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n {\n   optab builtin_optab;\n   rtx op0, op1, insns;\n+  int op1_type = REAL_TYPE;\n   tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   tree arg0, arg1, temp, narg;\n   enum machine_mode mode;\n   bool errno_set = true;\n   bool stable = true;\n \n-  if (!validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n+  if ((DECL_FUNCTION_CODE (fndecl) == BUILT_IN_LDEXP)\n+      || (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_LDEXPF)\n+      || (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_LDEXPL))\n+    op1_type = INTEGER_TYPE;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, op1_type, VOID_TYPE))\n     return 0;\n \n   arg0 = TREE_VALUE (arglist);\n@@ -1885,6 +1891,10 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_ATAN2F:\n     case BUILT_IN_ATAN2L:\n       builtin_optab = atan2_optab; break;\n+    case BUILT_IN_LDEXP:\n+    case BUILT_IN_LDEXPF:\n+    case BUILT_IN_LDEXPL:\n+      builtin_optab = ldexp_optab; break;\n     case BUILT_IN_FMOD:\n     case BUILT_IN_FMODF:\n     case BUILT_IN_FMODL:\n@@ -5259,6 +5269,9 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_ATAN2:\n     case BUILT_IN_ATAN2F:\n     case BUILT_IN_ATAN2L:\n+    case BUILT_IN_LDEXP:\n+    case BUILT_IN_LDEXPF:\n+    case BUILT_IN_LDEXPL:\n     case BUILT_IN_FMOD:\n     case BUILT_IN_FMODF:\n     case BUILT_IN_FMODL:"}, {"sha": "d9a4ce599ed6ca8a83d685e7a39f7a2a3e223f70", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c94a75af08ce77997d7566d5fcca097ca177a97f", "patch": "@@ -16176,6 +16176,71 @@\n   emit_move_insn (operands[2], temp);\n   emit_move_insn (operands[9], CONST1_RTX (XFmode));  /* fld1 */\n })\n+\n+(define_expand \"ldexpdf3\"\n+  [(set (match_dup 3)\n+\t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (set (match_dup 4)\n+\t(float:XF (match_operand:SI 2 \"register_operand\" \"\")))\n+   (parallel [(set (match_dup 5)\n+\t\t   (unspec:XF [(match_dup 3) (match_dup 4)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 6)\n+\t\t   (unspec:XF [(match_dup 3) (match_dup 4)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float_truncate:DF (match_dup 5)))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=3; i<7; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+})\n+\n+(define_expand \"ldexpsf3\"\n+  [(set (match_dup 3)\n+\t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (set (match_dup 4)\n+\t(float:XF (match_operand:SI 2 \"register_operand\" \"\")))\n+   (parallel [(set (match_dup 5)\n+\t\t   (unspec:XF [(match_dup 3) (match_dup 4)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 6)\n+\t\t   (unspec:XF [(match_dup 3) (match_dup 4)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float_truncate:SF (match_dup 5)))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=3; i<7; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+})\n+\n+(define_expand \"ldexpxf3\"\n+  [(set (match_dup 3)\n+\t(float:XF (match_operand:SI 2 \"register_operand\" \"\")))\n+   (parallel [(set (match_operand:XF 0 \" register_operand\" \"\")\n+\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 3)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 4)\n+\t\t   (unspec:XF [(match_dup 1) (match_dup 3)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=3; i<5; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+})\n \f\n \n (define_insn \"frndintxf2\""}, {"sha": "e52ca068984f4148fbd997cd1955f7c05fc6848c", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=c94a75af08ce77997d7566d5fcca097ca177a97f", "patch": "@@ -133,6 +133,7 @@ static const char * const optabs[] =\n   \"exp10_optab->handlers[$A].insn_code = CODE_FOR_$(exp10$a2$)\",\n   \"exp2_optab->handlers[$A].insn_code = CODE_FOR_$(exp2$a2$)\",\n   \"expm1_optab->handlers[$A].insn_code = CODE_FOR_$(expm1$a2$)\",\n+  \"ldexp_optab->handlers[$A].insn_code = CODE_FOR_$(ldexp$a3$)\",\n   \"logb_optab->handlers[$A].insn_code = CODE_FOR_$(logb$a2$)\",\n   \"ilogb_optab->handlers[$A].insn_code = CODE_FOR_$(ilogb$a2$)\",\n   \"log_optab->handlers[$A].insn_code = CODE_FOR_$(log$a2$)\","}, {"sha": "95256207da7f8a16962cf58fb4bf0366b67dbd59", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c94a75af08ce77997d7566d5fcca097ca177a97f", "patch": "@@ -5027,6 +5027,7 @@ init_optabs (void)\n   exp10_optab = init_optab (UNKNOWN);\n   exp2_optab = init_optab (UNKNOWN);\n   expm1_optab = init_optab (UNKNOWN);\n+  ldexp_optab = init_optab (UNKNOWN);\n   logb_optab = init_optab (UNKNOWN);\n   ilogb_optab = init_optab (UNKNOWN);\n   log_optab = init_optab (UNKNOWN);"}, {"sha": "e0a7985bc15472d6ad40816d23889db5c3f6516e", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=c94a75af08ce77997d7566d5fcca097ca177a97f", "patch": "@@ -171,6 +171,8 @@ enum optab_index\n   OTI_exp2,\n   /* Exponential - 1*/\n   OTI_expm1,\n+  /* Load exponent of a floating point number */\n+  OTI_ldexp,\n   /* Radix-independent exponent */\n   OTI_logb,\n   OTI_ilogb,\n@@ -302,6 +304,7 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define exp10_optab (optab_table[OTI_exp10])\n #define exp2_optab (optab_table[OTI_exp2])\n #define expm1_optab (optab_table[OTI_expm1])\n+#define ldexp_optab (optab_table[OTI_ldexp])\n #define logb_optab (optab_table[OTI_logb])\n #define ilogb_optab (optab_table[OTI_ilogb])\n #define log_optab (optab_table[OTI_log])"}, {"sha": "408e12825651fb501f38b3ef42031f15d3ca0893", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c94a75af08ce77997d7566d5fcca097ca177a97f", "patch": "@@ -1,3 +1,7 @@\n+2005-02-12  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* gcc.dg/builtins-34.c: Also check ldexp*.\n+\n 2005-02-12  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* gcc.dg/tree-ssa/20040703-1.c: Quote decimal dot."}, {"sha": "f2625d5ef5992002d733bf596bba47fad84c3acd", "filename": "gcc/testsuite/gcc.dg/builtins-34.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94a75af08ce77997d7566d5fcca097ca177a97f/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c?ref=c94a75af08ce77997d7566d5fcca097ca177a97f", "patch": "@@ -12,14 +12,17 @@ extern double exp10(double);\n extern double exp2(double);\n extern double pow10(double);\n extern double expm1(double);\n+extern double ldexp(double, int);\n extern float exp10f(float);\n extern float exp2f(float);\n extern float pow10f(float);\n extern float expm1f(float);\n+extern float ldexpf(float, int);\n extern long double exp10l(long double);\n extern long double exp2l(long double);\n extern long double pow10l(long double);\n extern long double expm1l(long double);\n+extern long double ldexpl(long double, int);\n \n \n double test1(double x)\n@@ -42,6 +45,11 @@ double test4(double x)\n   return expm1(x);\n }\n \n+double test5(double x, int exp)\n+{\n+  return ldexp(x, exp);\n+}\n+\n float test1f(float x)\n {\n   return exp10f(x);\n@@ -62,6 +70,11 @@ float test4f(float x)\n   return expm1f(x);\n }\n \n+float test5f(float x, int exp)\n+{\n+  return ldexpf(x, exp);\n+}\n+\n long double test1l(long double x)\n {\n   return exp10l(x);\n@@ -82,3 +95,7 @@ long double test4l(long double x)\n   return expm1l(x);\n }\n \n+long double test5l(long double x, int exp)\n+{\n+  return ldexpl(x, exp);\n+}"}]}