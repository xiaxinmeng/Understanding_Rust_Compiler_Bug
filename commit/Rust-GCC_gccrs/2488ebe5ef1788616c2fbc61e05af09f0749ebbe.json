{"sha": "2488ebe5ef1788616c2fbc61e05af09f0749ebbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ4OGViZTVlZjE3ODg2MTZjMmZiYzYxZTA1YWYwOWYwNzQ5ZWJiZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-09-29T18:44:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-09-29T18:44:32Z"}, "message": "re PR target/77756 (__get_cpuid() returns wrong values for level 7 (extended features))\n\n\tPR target/77756\n\t* config/i386/cpuid.h (__get_cpuid_count): New.\n\t(__get_cpuid): Rename __level to __leaf.\n\ntestsuite/ChangeLog:\n\n\tPR target/77756\n\t* gcc.target/i386/pr77756.c: New test.\n\nFrom-SVN: r240629", "tree": {"sha": "a2e01bfac39fbf7a7b780b5ac05e4d7f81c2b335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2e01bfac39fbf7a7b780b5ac05e4d7f81c2b335"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2488ebe5ef1788616c2fbc61e05af09f0749ebbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2488ebe5ef1788616c2fbc61e05af09f0749ebbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2488ebe5ef1788616c2fbc61e05af09f0749ebbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2488ebe5ef1788616c2fbc61e05af09f0749ebbe/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f90b32b95bac7d534a96a032af466f1b5087371b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90b32b95bac7d534a96a032af466f1b5087371b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90b32b95bac7d534a96a032af466f1b5087371b"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "d9f7844c9710cdb2df7dd17b223c1c8c048b43a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2488ebe5ef1788616c2fbc61e05af09f0749ebbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2488ebe5ef1788616c2fbc61e05af09f0749ebbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2488ebe5ef1788616c2fbc61e05af09f0749ebbe", "patch": "@@ -1,3 +1,9 @@\n+2016-09-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/77756\n+\t* config/i386/cpuid.h (__get_cpuid_count): New.\n+\t(__get_cpuid): Rename __level to __leaf.\n+\n 2016-09-29  Marek Polacek  <polacek@redhat.com>\n \n \t* genattrtab.c (write_attr_case): Also emit FALLTHRU marker.\n@@ -100,11 +106,6 @@\n \tget_destination_size, pass_sprintf_length::handle_gimple_call):\n \tLikewise.\n \n-2016-09-28  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\tPR target/77756\n-\t* config/i386/cpuid.h (__get_cpuid): Handle CPUID level >= 7.\n-\n 2016-09-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimple-ssa-sprintf.c: Fix comment formatting."}, {"sha": "4ea3f74fecdb3ef000eda0896914dca7d72904ab", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2488ebe5ef1788616c2fbc61e05af09f0749ebbe/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2488ebe5ef1788616c2fbc61e05af09f0749ebbe/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=2488ebe5ef1788616c2fbc61e05af09f0749ebbe", "patch": "@@ -229,31 +229,37 @@ __get_cpuid_max (unsigned int __ext, unsigned int *__sig)\n   return __eax;\n }\n \n-/* Return cpuid data for requested cpuid level, as found in returned\n+/* Return cpuid data for requested cpuid leaf, as found in returned\n    eax, ebx, ecx and edx registers.  The function checks if cpuid is\n    supported and returns 1 for valid cpuid information or 0 for\n-   unsupported cpuid level.  All pointers are required to be non-null.  */\n+   unsupported cpuid leaf.  All pointers are required to be non-null.  */\n \n static __inline int\n-__get_cpuid (unsigned int __level,\n+__get_cpuid (unsigned int __leaf,\n \t     unsigned int *__eax, unsigned int *__ebx,\n \t     unsigned int *__ecx, unsigned int *__edx)\n {\n-  unsigned int __ext = __level & 0x80000000;\n+  unsigned int __ext = __leaf & 0x80000000;\n \n-  if (__get_cpuid_max (__ext, 0) < __level)\n+  if (__get_cpuid_max (__ext, 0) < __leaf)\n     return 0;\n \n-  if (__ext)\n-    __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);\n-  else\n-    {\n-      if (__level >= 13)\n-\t__cpuid_count (__level, 1, *__eax, *__ebx, *__ecx, *__edx);\n-      else if (__level >= 7)\n-\t__cpuid_count (__level, 0, *__eax, *__ebx, *__ecx, *__edx);\n-      else\n-\t__cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);\n-    }\n+  __cpuid (__leaf, *__eax, *__ebx, *__ecx, *__edx);\n+  return 1;\n+}\n+\n+/* Same as above, but sub-leaf can be specified.  */\n+\n+static __inline int\n+__get_cpuid_count (unsigned int __leaf, unsigned int __subleaf,\n+\t\t   unsigned int *__eax, unsigned int *__ebx,\n+\t\t   unsigned int *__ecx, unsigned int *__edx)\n+{\n+  unsigned int __ext = __leaf & 0x80000000;\n+\n+  if (__get_cpuid_max (__ext, 0) < __leaf)\n+    return 0;\n+\n+  __cpuid_count (__leaf, __subleaf, *__eax, *__ebx, *__ecx, *__edx);\n   return 1;\n }"}, {"sha": "af6884772484a997956a3678e8130b6b8eef6f3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2488ebe5ef1788616c2fbc61e05af09f0749ebbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2488ebe5ef1788616c2fbc61e05af09f0749ebbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2488ebe5ef1788616c2fbc61e05af09f0749ebbe", "patch": "@@ -1,3 +1,8 @@\n+2016-09-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/77756\n+\t* gcc.target/i386/pr77756.c: New test.\n+\n 2016-09-29  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/cpp0x/fallthrough2.C: Use the c++14_down target.\n@@ -32,11 +37,6 @@\n \t* gcc.dg/profile-update-warning.c: Restrict to ia32.\n \t(dg-options): Remove -m32.\n \n-2016-09-28  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\tPR target/77756\n-\t* gcc.target/i386/pr77756.c: New test.\n-\n 2016-09-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/77721"}, {"sha": "1eee7cd5a00f59341f199ad1fff4269f6070e928", "filename": "gcc/testsuite/gcc.target/i386/pr77756.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2488ebe5ef1788616c2fbc61e05af09f0749ebbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77756.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2488ebe5ef1788616c2fbc61e05af09f0749ebbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77756.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77756.c?ref=2488ebe5ef1788616c2fbc61e05af09f0749ebbe", "patch": "@@ -11,7 +11,7 @@ main ()\n     {\n       unsigned int eax, ebx, ecx, edx;\n \n-      if (!__get_cpuid (7, &eax, &ebx, &ecx, &edx))\n+      if (!__get_cpuid_count (7, 0, &eax, &ebx, &ecx, &edx))\n \t__builtin_abort ();\n \n       if (!(ebx & bit_AVX2))"}]}