{"sha": "69859058c7b1bc5ae64131a661aa2973a23cc719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk4NTkwNThjN2IxYmM1YWU2NDEzMWE2NjFhYTI5NzNhMjNjYzcxOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-12-22T21:53:53Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-12-22T21:53:53Z"}, "message": "trans-intrinsic.c (gfc_conv_intrinsic_caf_get, [...]): Fix vector handling.\n\n2014-12-22  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-intrinsic.c (gfc_conv_intrinsic_caf_get, conv_caf_send):\n        Fix vector handling.\n\nFrom-SVN: r219034", "tree": {"sha": "bfc44a3c9a9be8baf44c2faaca6801ae0a7d408e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfc44a3c9a9be8baf44c2faaca6801ae0a7d408e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69859058c7b1bc5ae64131a661aa2973a23cc719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69859058c7b1bc5ae64131a661aa2973a23cc719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69859058c7b1bc5ae64131a661aa2973a23cc719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69859058c7b1bc5ae64131a661aa2973a23cc719/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59aa28e80f8614657fcc75ba60a7014107487f83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59aa28e80f8614657fcc75ba60a7014107487f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59aa28e80f8614657fcc75ba60a7014107487f83"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "58b2554334b27dbcd367f64b0b17873dc89d4ec2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69859058c7b1bc5ae64131a661aa2973a23cc719/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69859058c7b1bc5ae64131a661aa2973a23cc719/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=69859058c7b1bc5ae64131a661aa2973a23cc719", "patch": "@@ -1,3 +1,8 @@\n+2014-12-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get, conv_caf_send):\n+\tFix vector handling.\n+\n 2014-12-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/63363"}, {"sha": "31cb6c74168284ff896a82dbb9ced9dc0c17395e", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69859058c7b1bc5ae64131a661aa2973a23cc719/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69859058c7b1bc5ae64131a661aa2973a23cc719/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=69859058c7b1bc5ae64131a661aa2973a23cc719", "patch": "@@ -1122,6 +1122,8 @@ gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind,\n   res_var = lhs;\n   dst_var = lhs;\n \n+  vec = null_pointer_node;\n+\n   gfc_init_se (&argse, NULL);\n   if (array_expr->rank == 0)\n     {\n@@ -1164,10 +1166,12 @@ gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind,\n       /* Using gfc_conv_expr_descriptor, we only get the descriptor, but that\n          has the wrong type if component references are done.  */\n       gfc_add_modify (&argse.pre, gfc_conv_descriptor_dtype (argse.expr),\n-                      gfc_get_dtype_rank_type (array_expr->rank, type));\n+                      gfc_get_dtype_rank_type (has_vector ? ar2.dimen\n+\t\t\t\t\t\t\t  : array_expr->rank,\n+\t\t\t\t\t       type));\n       if (has_vector)\n \t{\n-\t  vec = conv_caf_vector_subscript (&argse.pre, argse.expr, ar);\n+\t  vec = conv_caf_vector_subscript (&argse.pre, argse.expr, &ar2);\n \t  *ar = ar2;\n \t}\n \n@@ -1195,8 +1199,6 @@ gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind,\n   if (lhs_kind == NULL_TREE)\n     lhs_kind = kind;\n \n-  vec = null_pointer_node;\n-\n   gfc_add_block_to_block (&se->pre, &argse.pre);\n   gfc_add_block_to_block (&se->post, &argse.post);\n \n@@ -1278,10 +1280,12 @@ conv_caf_send (gfc_code *code) {\n       lhs_type = gfc_typenode_for_spec (&lhs_expr->ts);\n       tmp = build_fold_indirect_ref_loc (input_location, lhs_se.expr);\n       gfc_add_modify (&lhs_se.pre, gfc_conv_descriptor_dtype (tmp),\n-                      gfc_get_dtype_rank_type (lhs_expr->rank, lhs_type));\n+                      gfc_get_dtype_rank_type (has_vector ? ar2.dimen\n+\t\t\t\t\t\t\t  : lhs_expr->rank,\n+\t\t      lhs_type));\n       if (has_vector)\n \t{\n-\t  vec = conv_caf_vector_subscript (&block, lhs_se.expr, ar);\n+\t  vec = conv_caf_vector_subscript (&block, lhs_se.expr, &ar2);\n \t  *ar = ar2;\n \t}\n     }\n@@ -1350,10 +1354,12 @@ conv_caf_send (gfc_code *code) {\n       tmp = build_fold_indirect_ref_loc (input_location, rhs_se.expr);\n       tmp2 = gfc_typenode_for_spec (&rhs_expr->ts);\n       gfc_add_modify (&rhs_se.pre, gfc_conv_descriptor_dtype (tmp),\n-                      gfc_get_dtype_rank_type (rhs_expr->rank, tmp2));\n+                      gfc_get_dtype_rank_type (has_vector ? ar2.dimen\n+\t\t\t\t\t\t\t  : rhs_expr->rank,\n+\t\t      tmp2));\n       if (has_vector)\n \t{\n-\t  rhs_vec = conv_caf_vector_subscript (&block, rhs_se.expr, ar);\n+\t  rhs_vec = conv_caf_vector_subscript (&block, rhs_se.expr, &ar2);\n \t  *ar = ar2;\n \t}\n     }"}]}