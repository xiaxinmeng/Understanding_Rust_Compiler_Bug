{"sha": "7b5cb7d63412fe8599cf9dada904e574d39809f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I1Y2I3ZDYzNDEyZmU4NTk5Y2Y5ZGFkYTkwNGU1NzRkMzk4MDlmOQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-03-16T21:04:58Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-03-16T21:04:58Z"}, "message": "re PR debug/47510 (DW_TAG_typedef can have children when designating a naming typedef)\n\nPR debug/47510\n\ngcc/\n\n\tPR debug/47510\n\t* dwarf2out.c (strip_naming_typedef): Factorize out of ...\n\t(lookup_type_die_strip_naming_typedef): ... here.\n\t(get_context_die): Use it.\n\t(gen_typedef_die): Add a DW_AT_{,MIPS_}linkage_name attribute to\n\tthe anonymous struct named by the naming typedef.\n\ngcc/testsuite/\n\n        PR debug/47510\n\t* g++.dg/debug/dwarf2/typedef6.C: New test.\n\nFrom-SVN: r171073", "tree": {"sha": "dff3437743f8faab4d8acbc419ea5f338f98473b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dff3437743f8faab4d8acbc419ea5f338f98473b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b5cb7d63412fe8599cf9dada904e574d39809f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5cb7d63412fe8599cf9dada904e574d39809f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b5cb7d63412fe8599cf9dada904e574d39809f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5cb7d63412fe8599cf9dada904e574d39809f9/comments", "author": null, "committer": null, "parents": [{"sha": "532c679ea9bdf337fa0c09cbc9b0737b4a4b1aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532c679ea9bdf337fa0c09cbc9b0737b4a4b1aa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/532c679ea9bdf337fa0c09cbc9b0737b4a4b1aa9"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "8ab1bd0a3f6b67423b0586e149de0b22202a8367", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cb7d63412fe8599cf9dada904e574d39809f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cb7d63412fe8599cf9dada904e574d39809f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b5cb7d63412fe8599cf9dada904e574d39809f9", "patch": "@@ -1,3 +1,12 @@\n+2011-03-16  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/47510\n+\t* dwarf2out.c (strip_naming_typedef): Factorize out of ...\n+\t(lookup_type_die_strip_naming_typedef): ... here.\n+\t(get_context_die): Use it.\n+\t(gen_typedef_die): Add a DW_AT_{,MIPS_}linkage_name attribute to\n+\tthe anonymous struct named by the naming typedef.\n+\n 2011-03-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/48154"}, {"sha": "b28025fcdf7d0556d2284187ce091377e25a4b5c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cb7d63412fe8599cf9dada904e574d39809f9/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cb7d63412fe8599cf9dada904e574d39809f9/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7b5cb7d63412fe8599cf9dada904e574d39809f9", "patch": "@@ -6341,6 +6341,7 @@ static void remove_child_TAG (dw_die_ref, enum dwarf_tag);\n static void add_child_die (dw_die_ref, dw_die_ref);\n static dw_die_ref new_die (enum dwarf_tag, dw_die_ref, tree);\n static dw_die_ref lookup_type_die (tree);\n+static dw_die_ref strip_naming_typedef (tree, dw_die_ref);\n static dw_die_ref lookup_type_die_strip_naming_typedef (tree);\n static void equate_type_number_to_die (tree, dw_die_ref);\n static hashval_t decl_die_table_hash (const void *);\n@@ -8129,6 +8130,22 @@ lookup_type_die (tree type)\n   return TYPE_SYMTAB_DIE (type);\n }\n \n+/* Given a TYPE_DIE representing the type TYPE, if TYPE is an\n+   anonymous type named by the typedef TYPE_DIE, return the DIE of the\n+   anonymous type instead the one of the naming typedef.  */\n+\n+static inline dw_die_ref\n+strip_naming_typedef (tree type, dw_die_ref type_die)\n+{\n+  if (type\n+      && TREE_CODE (type) == RECORD_TYPE\n+      && type_die\n+      && type_die->die_tag == DW_TAG_typedef\n+      && is_naming_typedef_decl (TYPE_NAME (type)))\n+    type_die = get_AT_ref (type_die, DW_AT_type);\n+  return type_die;\n+}\n+\n /* Like lookup_type_die, but if type is an anonymous type named by a\n    typedef[1], return the DIE of the anonymous type instead the one of\n    the naming typedef.  This is because in gen_typedef_die, we did\n@@ -8143,11 +8160,7 @@ static inline dw_die_ref\n lookup_type_die_strip_naming_typedef (tree type)\n {\n   dw_die_ref die = lookup_type_die (type);\n-  if (TREE_CODE (type) == RECORD_TYPE\n-      && die->die_tag == DW_TAG_typedef\n-      && is_naming_typedef_decl (TYPE_NAME (type)))\n-    die = get_AT_ref (die, DW_AT_type);\n-  return die;\n+  return strip_naming_typedef (type, die);\n }\n \n /* Equate a DIE to a given type specifier.  */\n@@ -20443,6 +20456,14 @@ gen_typedef_die (tree decl, dw_die_ref context_die)\n \t         anonymous struct DIE.  */\n \t      if (!TREE_ASM_WRITTEN (type))\n \t        gen_tagged_type_die (type, context_die, DINFO_USAGE_DIR_USE);\n+\n+\t      /* This is a GNU Extension.  We are adding a\n+\t\t DW_AT_linkage_name attribute to the DIE of the\n+\t\t anonymous struct TYPE.  The value of that attribute\n+\t\t is the name of the typedef decl naming the anonymous\n+\t\t struct.  This greatly eases the work of consumers of\n+\t\t this debug info.  */\n+\t      add_linkage_attr (lookup_type_die (type), decl);\n \t    }\n \t}\n \n@@ -20923,7 +20944,10 @@ get_context_die (tree context)\n     {\n       /* Find die that represents this context.  */\n       if (TYPE_P (context))\n-\treturn force_type_die (TYPE_MAIN_VARIANT (context));\n+\t{\n+\t  context = TYPE_MAIN_VARIANT (context);\n+\t  return strip_naming_typedef (context, force_type_die (context));\n+\t}\n       else\n \treturn force_decl_die (context);\n     }"}, {"sha": "fd64f48e49b41c4fd3fa6f001e9a5f8fb3be7472", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cb7d63412fe8599cf9dada904e574d39809f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cb7d63412fe8599cf9dada904e574d39809f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b5cb7d63412fe8599cf9dada904e574d39809f9", "patch": "@@ -1,3 +1,8 @@\n+2011-03-16  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/47510\n+\t* ++.dg/debug/dwarf2/typedef6.C: New test.\n+\n 2011-03-16  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/elision2.C: New."}, {"sha": "8896446a7ed5d0ef4e2ad8824823706c5ca14fba", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/typedef6.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cb7d63412fe8599cf9dada904e574d39809f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftypedef6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cb7d63412fe8599cf9dada904e574d39809f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftypedef6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftypedef6.C?ref=7b5cb7d63412fe8599cf9dada904e574d39809f9", "patch": "@@ -0,0 +1,30 @@\n+// Origin PR debug/\n+// { dg-options \"-g -dA\" }\n+\n+class C {\n+public:\n+  C() {}\n+  ~C() {}\n+};\n+typedef struct {\n+  C m;\n+} t;\n+typedef t s;\n+s v;\n+\n+/*\n+  We want to check that we have a DIE describing the typedef t like this:\n+\n+\t.uleb128 0xc\t# (DIE (0xb8) DW_TAG_typedef)\n+\t.ascii \"t\\0\"\t# DW_AT_name\n+\t.byte\t0x1\t# DW_AT_decl_file (../../prtests/test.cc)\n+\t.byte\t0xb\t# DW_AT_decl_line\n+\t.long\t0x78\t# DW_AT_type\n+\n+  e.g, it should not haven any child DIE -- the bug here was that this\n+  DIE had children DIEs. So we check that the last line is immediately\n+  followed by a line containing the pattern \"(DIE (\", instead of a\n+  line containing a DW_AT_sibling attribute.\n+ */\n+\n+// { dg-final { scan-assembler-times \"\\[^\\n\\r\\]*\\\\(DIE \\[^\\n\\r\\]* DW_TAG_typedef\\\\)\\[\\n\\r\\]{1,2}\\[^\\n\\r\\].*\\\"t\\\\\\\\0\\\"\\[^\\n\\r\\]*DW_AT_name\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*DW_AT_type\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*\\\\(DIE\" 1 } }"}]}