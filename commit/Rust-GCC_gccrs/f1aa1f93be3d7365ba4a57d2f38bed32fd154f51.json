{"sha": "f1aa1f93be3d7365ba4a57d2f38bed32fd154f51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhYTFmOTNiZTNkNzM2NWJhNGE1N2QyZjM4YmVkMzJmZDE1NGY1MQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-01-31T19:01:27Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-01-31T19:01:27Z"}, "message": "altivec-13.c: Remove VSX-requiring built-ins.\n\n[testsuite]\n\n\t2018-01-31  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/altivec-13.c: Remove VSX-requiring built-ins.\n\t* gcc.target/powerpc/vsx-13.c: New.\n\nFrom-SVN: r257253", "tree": {"sha": "7cc86fed58b6d39b663baf2a176f6dc9a54686a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cc86fed58b6d39b663baf2a176f6dc9a54686a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1aa1f93be3d7365ba4a57d2f38bed32fd154f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1aa1f93be3d7365ba4a57d2f38bed32fd154f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1aa1f93be3d7365ba4a57d2f38bed32fd154f51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1aa1f93be3d7365ba4a57d2f38bed32fd154f51/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3008f0ffe9c36c60b5f08710daecb1832197c69f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3008f0ffe9c36c60b5f08710daecb1832197c69f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3008f0ffe9c36c60b5f08710daecb1832197c69f"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "7994af53c5c2283861d7ceafea10aa7b1534ab77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1aa1f93be3d7365ba4a57d2f38bed32fd154f51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1aa1f93be3d7365ba4a57d2f38bed32fd154f51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1aa1f93be3d7365ba4a57d2f38bed32fd154f51", "patch": "@@ -1,3 +1,8 @@\n+2018-01-31  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/altivec-13.c: Remove VSX-requiring built-ins.\n+\t* gcc.target/powerpc/vsx-13.c: New.\n+\n 2018-01-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84092"}, {"sha": "31ff5092014de3a179c2410a522c59fc78032dd1", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-13.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1aa1f93be3d7365ba4a57d2f38bed32fd154f51/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1aa1f93be3d7365ba4a57d2f38bed32fd154f51/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-13.c?ref=f1aa1f93be3d7365ba4a57d2f38bed32fd154f51", "patch": "@@ -8,9 +8,12 @@\n    while not in the Motorola AltiVec PIM, have nevertheless crept\n    into the AltiVec vernacular over the years.  */\n \n+/* Tests requiring VSX support (vector long long and vector double) have\n+   been moved over to vsx-13.c.  */\n+\n #include <altivec.h>\n \n-void foo (void) \n+void foo (void)\n {\n   vector bool int boolVec1 = (vector bool int) vec_splat_u32(3);\n   vector bool short boolVec2 = (vector bool short) vec_splat_u16(3);\n@@ -21,12 +24,8 @@ void foo (void)\n   vector signed int vsi1, vsi2, vsiz;\n   vector unsigned int vui1, vui2, vuiz;\n   vector unsigned short int vusi1, vusi2, vusiz;\n-  vector bool long long vubll1, vubll2, vubllz;\n-  vector signed int long long vsill1, vsill2, vsillz;\n-  vector unsigned int long long vuill1, vuill2, vuillz;\n   vector pixel vp1, vp2, vpz;\n   vector float vf1, vf2, vfz;\n-  vector double vd1, vd2, vdz;\n   \n   boolVec1 = vec_sld( boolVec1, boolVec1, 4 );\n   boolVec2 = vec_sld( boolVec2, boolVec2, 2 );\n@@ -36,22 +35,16 @@ void foo (void)\n   vucz = vec_sld( vuc1, vuc2, 1 );\n   vsiz = vec_sld( vsi1, vsi2, 1 );\n   vuiz = vec_sld( vui1, vui2, 1 );\n-  vubllz = vec_sld( vubll1, vubll2, 1 );\n-  vsillz = vec_sld( vsill1, vsill2, 1 );\n-  vuillz = vec_sld( vuill1, vuill2, 1 );\n   vssiz = vec_sld( vssi1, vssi2, 1 );\n   vusiz = vec_sld( vusi1, vusi2, 1 );\n   \n   vfz = vec_sld( vf1, vf2, 1 );\n-  vdz = vec_sld( vd1, vd2, 1 );\n \n   vpz = vec_sld( vp1, vp2, 1 );\n \n   vucz = vec_srl(vuc1, vuc2);\n   vsiz = vec_srl(vsi1, vuc2);\n   vuiz = vec_srl(vui1, vuc2);\n-  vsillz = vec_srl(vsill1, vuc2);\n-  vuillz = vec_srl(vuill1, vuc2);\n   vpz = vec_srl(vp1, vuc2);\n   vssiz = vec_srl(vssi1, vuc2);\n   vusiz = vec_srl(vusi1, vuc2);\n@@ -64,10 +57,6 @@ void foo (void)\n   vsiz = vec_sro(vsi1, vuc2);\n   vuiz = vec_sro(vui1, vsc2);\n   vuiz = vec_sro(vui1, vuc2);\n-  vsillz = vec_sro(vsill1, vsc2);\n-  vsillz = vec_sro(vsill1, vuc2);\n-  vuillz = vec_sro(vuill1, vsc2);\n-  vuillz = vec_sro(vuill1, vuc2);\n   vpz = vec_sro(vp1, vsc2);\n   vpz = vec_sro(vp1, vuc2);\n   vssiz = vec_sro(vssi1, vsc2);\n@@ -83,6 +72,6 @@ void foo (void)\n    vec_srl          vsr\n    vec_sro          vsro  */\n \n-/* { dg-final { scan-assembler-times \"vsldoi\" 15 } } */\n-/* { dg-final { scan-assembler-times \"vsr \" 8 } } */\n-/* { dg-final { scan-assembler-times \"vsro\" 20 } } */\n+/* { dg-final { scan-assembler-times \"vsldoi\" 11 } } */\n+/* { dg-final { scan-assembler-times \"vsr \" 6 } } */\n+/* { dg-final { scan-assembler-times \"vsro\" 16 } } */"}, {"sha": "5b4eb68068fa4d6423b81e2d8f6644a0b68c1bd9", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-13.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1aa1f93be3d7365ba4a57d2f38bed32fd154f51/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1aa1f93be3d7365ba4a57d2f38bed32fd154f51/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-13.c?ref=f1aa1f93be3d7365ba4a57d2f38bed32fd154f51", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx\" } */\n+\n+/* Variations of tests that require VSX support.  This is a variation of\n+   the altivec-13.c testcase.  */\n+\n+#include <altivec.h>\n+\n+void foo (void)\n+{\n+\n+  vector signed char vsc1, vsc2, vscz;\n+  vector unsigned char vuc1, vuc2, vucz;\n+  vector bool long long vubll1, vubll2, vubllz;\n+  vector signed int long long vsill1, vsill2, vsillz;\n+  vector unsigned int long long vuill1, vuill2, vuillz;\n+  vector double vd1, vd2, vdz;\n+\n+  vubllz = vec_sld( vubll1, vubll2, 1 );\n+  vsillz = vec_sld( vsill1, vsill2, 1 );\n+  vuillz = vec_sld( vuill1, vuill2, 1 );\n+\n+  vsillz = vec_srl(vsill1, vuc2);\n+  vuillz = vec_srl(vuill1, vuc2);\n+\n+  vsillz = vec_sro(vsill1, vsc2);\n+  vsillz = vec_sro(vsill1, vuc2);\n+  vuillz = vec_sro(vuill1, vsc2);\n+  vuillz = vec_sro(vuill1, vuc2);\n+\n+  vdz = vec_sld( vd1, vd2, 1 );\n+}\n+\n+/* Expected results:\n+   vec_sld          vsldoi\n+   vec_srl          vsr\n+   vec_sro          vsro  */\n+\n+/* { dg-final { scan-assembler-times \"vsldoi\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vsr \" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsro\" 4 } } */"}]}