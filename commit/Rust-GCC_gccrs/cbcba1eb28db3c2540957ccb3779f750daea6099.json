{"sha": "cbcba1eb28db3c2540957ccb3779f750daea6099", "node_id": "C_kwDOANBUbNoAKGNiY2JhMWViMjhkYjNjMjU0MDk1N2NjYjM3NzlmNzUwZGFlYTYwOTk", "commit": {"author": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2021-10-15T11:52:49Z"}, "committer": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2021-10-15T11:52:49Z"}, "message": "tree-optimization/102752: Fix determining precission of reduction_var\n\nWhile determining the precission of reduction_var an SSA_NAME instead of\nits TREE_TYPE is used.  Streamlined with other TREE_TYPE (reduction_var)\nuses.\n\ngcc/ChangeLog:\n\n\t* tree-loop-distribution.c (reduction_var_overflows_first):\n\tPass the type of reduction_var as first argument as it is also\n\tdone for the load type.\n\t(loop_distribution::transform_reduction_loop): Add missing\n\tTREE_TYPE while determining precission of reduction_var.", "tree": {"sha": "f2132faf818dc7599ea89da52e9864285a0c19e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2132faf818dc7599ea89da52e9864285a0c19e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbcba1eb28db3c2540957ccb3779f750daea6099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbcba1eb28db3c2540957ccb3779f750daea6099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbcba1eb28db3c2540957ccb3779f750daea6099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbcba1eb28db3c2540957ccb3779f750daea6099/comments", "author": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "914e9172792737606595216e2b77c104abba7c5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914e9172792737606595216e2b77c104abba7c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/914e9172792737606595216e2b77c104abba7c5c"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "583c01a42d86adf8a32bb2db1bdc072d11c0b330", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbcba1eb28db3c2540957ccb3779f750daea6099/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbcba1eb28db3c2540957ccb3779f750daea6099/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=cbcba1eb28db3c2540957ccb3779f750daea6099", "patch": "@@ -3425,12 +3425,12 @@ generate_strlen_builtin_using_rawmemchr (loop_p loop, tree reduction_var,\n \n /* Return true if we can count at least as many characters by taking pointer\n    difference as we can count via reduction_var without an overflow.  Thus\n-   compute 2^n < (2^(m-1) / s) where n = TYPE_PRECISION (reduction_var),\n+   compute 2^n < (2^(m-1) / s) where n = TYPE_PRECISION (reduction_var_type),\n    m = TYPE_PRECISION (ptrdiff_type_node), and s = size of each character.  */\n static bool\n-reduction_var_overflows_first (tree reduction_var, tree load_type)\n+reduction_var_overflows_first (tree reduction_var_type, tree load_type)\n {\n-  widest_int n2 = wi::lshift (1, TYPE_PRECISION (reduction_var));;\n+  widest_int n2 = wi::lshift (1, TYPE_PRECISION (reduction_var_type));;\n   widest_int m2 = wi::lshift (1, TYPE_PRECISION (ptrdiff_type_node) - 1);\n   widest_int s = wi::to_widest (TYPE_SIZE_UNIT (load_type));\n   return wi::ltu_p (n2, wi::udiv_trunc (m2, s));\n@@ -3654,6 +3654,7 @@ loop_distribution::transform_reduction_loop (loop_p loop)\n       && integer_onep (reduction_iv.step))\n     {\n       location_t loc = gimple_location (DR_STMT (load_dr));\n+      tree reduction_var_type = TREE_TYPE (reduction_var);\n       /* While determining the length of a string an overflow might occur.\n \t If an overflow only occurs in the loop implementation and not in the\n \t strlen implementation, then either the overflow is undefined or the\n@@ -3680,17 +3681,17 @@ loop_distribution::transform_reduction_loop (loop_p loop)\n \t  && TYPE_PRECISION (load_type) == TYPE_PRECISION (char_type_node)\n \t  && ((TYPE_PRECISION (sizetype) >= TYPE_PRECISION (ptr_type_node) - 1\n \t       && TYPE_PRECISION (ptr_type_node) >= 32)\n-\t      || (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (reduction_var))\n-\t\t  && TYPE_PRECISION (reduction_var) <= TYPE_PRECISION (sizetype)))\n+\t      || (TYPE_OVERFLOW_UNDEFINED (reduction_var_type)\n+\t\t  && TYPE_PRECISION (reduction_var_type) <= TYPE_PRECISION (sizetype)))\n \t  && builtin_decl_implicit (BUILT_IN_STRLEN))\n \tgenerate_strlen_builtin (loop, reduction_var, load_iv.base,\n \t\t\t\t reduction_iv.base, loc);\n       else if (direct_optab_handler (rawmemchr_optab, TYPE_MODE (load_type))\n \t       != CODE_FOR_nothing\n \t       && ((TYPE_PRECISION (ptrdiff_type_node) == TYPE_PRECISION (ptr_type_node)\n \t\t    && TYPE_PRECISION (ptrdiff_type_node) >= 32)\n-\t\t   || (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (reduction_var))\n-\t\t       && reduction_var_overflows_first (reduction_var, load_type))))\n+\t\t   || (TYPE_OVERFLOW_UNDEFINED (reduction_var_type)\n+\t\t       && reduction_var_overflows_first (reduction_var_type, load_type))))\n \tgenerate_strlen_builtin_using_rawmemchr (loop, reduction_var,\n \t\t\t\t\t\t load_iv.base,\n \t\t\t\t\t\t load_type,"}]}