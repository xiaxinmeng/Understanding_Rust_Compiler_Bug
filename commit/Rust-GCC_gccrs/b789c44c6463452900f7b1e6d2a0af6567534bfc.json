{"sha": "b789c44c6463452900f7b1e6d2a0af6567534bfc", "node_id": "C_kwDOANBUbNoAKGI3ODljNDRjNjQ2MzQ1MjkwMGY3YjFlNmQyYTBhZjY1Njc1MzRiZmM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-06T09:18:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-08T06:34:06Z"}, "message": "tree-optimization/105175 - avoid -Wvector-operation-performance\n\nThis avoids -Wvector-operation-performance diagnostics for vectorizer\nproduced code.  It's unfortunate the warning_at code in\ntree-vect-generic.cc needs adjustments but the diagnostic suppression\ncode doesn't magically suppress those otherwise.\n\n2022-04-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105175\n\t* tree-vect-stmts.cc (vectorizable_operation): Suppress\n\t-Wvector-operation-performance if using emulated vectors.\n\t* tree-vect-generic.cc (expand_vector_piecewise): Do not diagnose\n\t-Wvector-operation-performance when suppressed.\n\t(expand_vector_parallel): Likewise.\n\t(expand_vector_comparison): Likewise.\n\t(expand_vector_condition): Likewise.\n\t(lower_vec_perm): Likewise.\n\t(expand_vector_conversion): Likewise.\n\n\t* gcc.dg/pr105175.c: New testcase.", "tree": {"sha": "6dccf4cb568a33ccaf72da90a03eafaa0cc552a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dccf4cb568a33ccaf72da90a03eafaa0cc552a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b789c44c6463452900f7b1e6d2a0af6567534bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b789c44c6463452900f7b1e6d2a0af6567534bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b789c44c6463452900f7b1e6d2a0af6567534bfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b789c44c6463452900f7b1e6d2a0af6567534bfc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df00d10320c5283e68ecd39e2825c4be88661744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df00d10320c5283e68ecd39e2825c4be88661744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df00d10320c5283e68ecd39e2825c4be88661744"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "d8d7edb942a2ce207ca8a5705e07ae03f1f7b10c", "filename": "gcc/testsuite/gcc.dg/pr105175.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b789c44c6463452900f7b1e6d2a0af6567534bfc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105175.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b789c44c6463452900f7b1e6d2a0af6567534bfc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105175.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105175.c?ref=b789c44c6463452900f7b1e6d2a0af6567534bfc", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wvector-operation-performance\" } */\n+/* { dg-additional-options \"-mno-sse\" { target x86_64-*-* i?86-*-* } } */\n+\n+enum { QEMU_MIGRATION_COOKIE_PERSISTENT = 1 };\n+struct {\n+  unsigned flags;\n+  unsigned flagsMandatory;\n+} qemuMigrationCookieGetPersistent_mig;\n+void qemuMigrationCookieGetPersistent()\n+{\n+  qemuMigrationCookieGetPersistent_mig.flags &=  /* { dg-bogus \"will be expanded\" } */\n+      QEMU_MIGRATION_COOKIE_PERSISTENT;\n+  qemuMigrationCookieGetPersistent_mig.flagsMandatory &=\n+      QEMU_MIGRATION_COOKIE_PERSISTENT;\n+}"}, {"sha": "8b7227e8b580dc1d1e88487b28c8e66fdb1ac400", "filename": "gcc/tree-vect-generic.cc", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b789c44c6463452900f7b1e6d2a0af6567534bfc/gcc%2Ftree-vect-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b789c44c6463452900f7b1e6d2a0af6567534bfc/gcc%2Ftree-vect-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.cc?ref=b789c44c6463452900f7b1e6d2a0af6567534bfc", "patch": "@@ -317,8 +317,11 @@ expand_vector_piecewise (gimple_stmt_iterator *gsi, elem_op_func f,\n   int i;\n   location_t loc = gimple_location (gsi_stmt (*gsi));\n \n-  if (nunits == 1)\n-    /* Do not diagnose decomposing single element vectors.  */\n+  if (nunits == 1\n+      || warning_suppressed_p (gsi_stmt (*gsi),\n+\t\t\t       OPT_Wvector_operation_performance))\n+    /* Do not diagnose decomposing single element vectors or when\n+       decomposing vectorizer produced operations.  */\n     ;\n   else if (ret_type || !parallel_p)\n     warning_at (loc, OPT_Wvector_operation_performance,\n@@ -379,14 +382,16 @@ expand_vector_parallel (gimple_stmt_iterator *gsi, elem_op_func f, tree type,\n   else\n     {\n       /* Use a single scalar operation with a mode no wider than word_mode.  */\n+      if (!warning_suppressed_p (gsi_stmt (*gsi),\n+\t\t\t\t OPT_Wvector_operation_performance))\n+\twarning_at (loc, OPT_Wvector_operation_performance,\n+\t\t    \"vector operation will be expanded with a \"\n+\t\t    \"single scalar operation\");\n       scalar_int_mode mode\n \t= int_mode_for_size (tree_to_uhwi (TYPE_SIZE (type)), 0).require ();\n       compute_type = lang_hooks.types.type_for_mode (mode, 1);\n       result = f (gsi, compute_type, a, b, bitsize_zero_node,\n \t\t  TYPE_SIZE (compute_type), code, type);\n-      warning_at (loc, OPT_Wvector_operation_performance,\n-\t          \"vector operation will be expanded with a \"\n-\t\t  \"single scalar operation\");\n     }\n \n   return result;\n@@ -487,8 +492,10 @@ expand_vector_comparison (gimple_stmt_iterator *gsi, tree type, tree op0,\n \n \t  if (TYPE_PRECISION (ret_inner_type) != 1)\n \t    ret_inner_type = build_nonstandard_integer_type (1, 1);\n-\t  warning_at (loc, OPT_Wvector_operation_performance,\n-\t\t      \"vector operation will be expanded piecewise\");\n+\t  if (!warning_suppressed_p (gsi_stmt (*gsi),\n+\t\t\t\t     OPT_Wvector_operation_performance))\n+\t    warning_at (loc, OPT_Wvector_operation_performance,\n+\t\t\t\"vector operation will be expanded piecewise\");\n \t  for (i = 0; i < nunits;\n \t       i++, index = int_const_binop (PLUS_EXPR, index, part_width))\n \t    {\n@@ -1098,8 +1105,9 @@ expand_vector_condition (gimple_stmt_iterator *gsi, bitmap dce_ssa_names)\n \n   /* TODO: try and find a smaller vector type.  */\n \n-  warning_at (loc, OPT_Wvector_operation_performance,\n-\t      \"vector condition will be expanded piecewise\");\n+  if (!warning_suppressed_p (stmt, OPT_Wvector_operation_performance))\n+    warning_at (loc, OPT_Wvector_operation_performance,\n+\t\t\"vector condition will be expanded piecewise\");\n \n   if (!a_is_comparison\n       && VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (a))\n@@ -1591,9 +1599,10 @@ lower_vec_perm (gimple_stmt_iterator *gsi)\n     }\n   else if (can_vec_perm_var_p (TYPE_MODE (vect_type)))\n     return;\n-  \n-  warning_at (loc, OPT_Wvector_operation_performance,\n-              \"vector shuffling operation will be expanded piecewise\");\n+\n+  if (!warning_suppressed_p (stmt, OPT_Wvector_operation_performance))\n+    warning_at (loc, OPT_Wvector_operation_performance,\n+\t\t\"vector shuffling operation will be expanded piecewise\");\n \n   vec_alloc (v, elements);\n   bool constant_p = true;\n@@ -2029,8 +2038,12 @@ expand_vector_conversion (gimple_stmt_iterator *gsi)\n \t      location_t loc = gimple_location (gsi_stmt (*gsi));\n \n \t      if (compute_type != arg_type)\n-\t\twarning_at (loc, OPT_Wvector_operation_performance,\n-\t\t\t    \"vector operation will be expanded piecewise\");\n+\t\t{\n+\t\t  if (!warning_suppressed_p (gsi_stmt (*gsi),\n+\t\t\t\t\t     OPT_Wvector_operation_performance))\n+\t\t    warning_at (loc, OPT_Wvector_operation_performance,\n+\t\t\t\t\"vector operation will be expanded piecewise\");\n+\t\t}\n \t      else\n \t\t{\n \t\t  nunits = 1;"}, {"sha": "87368e3787b5dc92471193ec37bfe1d6df3517b2", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b789c44c6463452900f7b1e6d2a0af6567534bfc/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b789c44c6463452900f7b1e6d2a0af6567534bfc/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=b789c44c6463452900f7b1e6d2a0af6567534bfc", "patch": "@@ -6440,6 +6440,8 @@ vectorizable_operation (vec_info *vinfo,\n \t  new_temp = make_ssa_name (vec_dest, new_stmt);\n \t  gimple_assign_set_lhs (new_stmt, new_temp);\n \t  vect_finish_stmt_generation (vinfo, stmt_info, new_stmt, gsi);\n+\t  if (using_emulated_vectors_p)\n+\t    suppress_warning (new_stmt, OPT_Wvector_operation_performance);\n \n \t  /* Enter the combined value into the vector cond hash so we don't\n \t     AND it with a loop mask again.  */"}]}