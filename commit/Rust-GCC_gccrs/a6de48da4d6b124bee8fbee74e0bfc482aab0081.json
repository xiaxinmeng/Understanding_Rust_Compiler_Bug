{"sha": "a6de48da4d6b124bee8fbee74e0bfc482aab0081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZkZTQ4ZGE0ZDZiMTI0YmVlOGZiZWU3NGUwYmZjNDgyYWFiMDA4MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-03T17:40:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-03T17:40:34Z"}, "message": "sync.md (*atomic_fetch_add_cmp<mode>): Use incdec_operand predicate to return INC or DEC insn mnemonic.\n\n\t* config/i386/sync.md (*atomic_fetch_add_cmp<mode>): Use\n\tincdec_operand predicate to return INC or DEC insn mnemonic.\n\tAdd %K operand modifier.\n\t(atomic_add<mode>): Use incdec_operand predicate to\n\treturn INC or DEC insn mnemonic.\n\t(atomic_dec<mode>): Ditto.\n\nFrom-SVN: r190132", "tree": {"sha": "7373b1cea78e22b29c5d0a3e7d76a28f828eb8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7373b1cea78e22b29c5d0a3e7d76a28f828eb8a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6de48da4d6b124bee8fbee74e0bfc482aab0081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6de48da4d6b124bee8fbee74e0bfc482aab0081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6de48da4d6b124bee8fbee74e0bfc482aab0081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6de48da4d6b124bee8fbee74e0bfc482aab0081/comments", "author": null, "committer": null, "parents": [{"sha": "d97577ed2c4c5ddca1466fa179207228f9625286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97577ed2c4c5ddca1466fa179207228f9625286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97577ed2c4c5ddca1466fa179207228f9625286"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "6eb8a2bbcc6a4f4431a8f071922ffe5046f2eeff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6de48da4d6b124bee8fbee74e0bfc482aab0081/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6de48da4d6b124bee8fbee74e0bfc482aab0081/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6de48da4d6b124bee8fbee74e0bfc482aab0081", "patch": "@@ -1,3 +1,12 @@\n+2012-08-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sync.md (*atomic_fetch_add_cmp<mode>): Use\n+\tincdec_operand predicate to return INC or DEC insn mnemonic.\n+\tAdd %K operand modifier.\n+\t(atomic_add<mode>): Use incdec_operand predicate to\n+\treturn INC or DEC insn mnemonic.\n+\t(atomic_dec<mode>): Ditto.\n+\n 2012-08-03  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/54146\n@@ -42,8 +51,8 @@\n \t(slsr_process_add): Likewise.\n \t* tree-inline.c (remap_ssa_name): Do not set the type of the\n \tnew SSA_NAME.\n-\t* tree-ssa-structalias.c (get_constraint_for_ssa_var): Clarify\n-\tassert.  Check for default def first.\n+\t* tree-ssa-structalias.c (get_constraint_for_ssa_var): Clarify assert.\n+\tCheck for default def first.\n \n 2012-08-04  Steven Bosscher  <steven@gcc.gnu.org>\n \n@@ -79,17 +88,16 @@\n \t* reg-stack.c (subst_stack_regs_pat): Ditto.\n \t* reload.c (find_reloads, find_equiv_reg): Ditto.\n \t* rtlanal.c (replace_rtx): Remove test.\n-\t* rtlanal.c (constant_pool_constant_p, split_double): Encapsulate test for\n-\tCONST_DOUBLE in macro.\n+\t* rtlanal.c (constant_pool_constant_p, split_double): Encapsulate\n+\ttest for CONST_DOUBLE in macro.\n \t* simplify-rtx.c (mode_signbit_p, avoid_constant_pool_reference)\n \t(simplify_unary_operation_1, simplify_const_unary_operation)\n \t(simplify_binary_operation_1, simplify_const_binary_operation)\n \t(simplify_relational_operation_1)\n \t(simplify_const_relational_operations)\n \t(implify_subreg): Ditto.\n \t* varasm.c (output_constant_pool_2): Ditto.\n-\t* rtl.h (CONST_DOUBLE_AS_INT_P, CONST_DOUBLE_AS_FLOAT_P): New\n-\tmacros.\n+\t* rtl.h (CONST_DOUBLE_AS_INT_P, CONST_DOUBLE_AS_FLOAT_P): New macros.\n \t* rtl.def (CONST_DOUBLE):  Updated comments.\n \n 2012-08-02  Richard Sandiford  <rdsandiford@googlemail.com>\n@@ -319,7 +327,8 @@\n \t(tree_function_versioning): Likewise.\n \t* tree-pass.h (PROP_referenced_vars): Remove.\n \t(pass_referenced_vars): Likewise.\n-\t* tree-profile.c (gimple_gen_edge_profiler): Do not add referenced vars.\n+\t* tree-profile.c (gimple_gen_edge_profiler): Do not add\n+\treferenced vars.\n \t(gimple_gen_interval_profiler): Likewise.\n \t(gimple_gen_pow2_profiler): Likewise.\n \t(gimple_gen_one_value_profiler): Likewise.\n@@ -445,7 +454,6 @@\n 2012-08-01  Catherine Moore  <clm@codesourcery.com>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n \n-\tgcc/\n \t* config/mips/mips-cpus.def (34kn): New.\n \t* config/mips/mips.h (MIPS_ARCH_FLOAT_SPEC): Add 34kn.\n \t(BASE_DRIVER_SELF_SPECS): Do not imply -mdsp for the 34kn."}, {"sha": "95c130e0597b69eb46763d4425a00e6aa689608c", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6de48da4d6b124bee8fbee74e0bfc482aab0081/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6de48da4d6b124bee8fbee74e0bfc482aab0081/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=a6de48da4d6b124bee8fbee74e0bfc482aab0081", "patch": "@@ -495,29 +495,33 @@\n \n (define_insn \"*atomic_fetch_add_cmp<mode>\"\n   [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ (unspec_volatile:SWI\n-\t\t       [(match_operand:SWI 0 \"memory_operand\" \"+m\")\n-\t\t        (match_operand:SI 3 \"const_int_operand\")]\n-\t\t       UNSPECV_XCHG)\n-\t\t     (match_operand:SWI 2 \"const_int_operand\" \"i\")))\n+\t(compare:CCZ\n+\t  (unspec_volatile:SWI\n+\t    [(match_operand:SWI 0 \"memory_operand\" \"+m\")\n+\t     (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n+\t    UNSPECV_XCHG)\n+\t  (match_operand:SWI 2 \"const_int_operand\" \"i\")))\n    (set (match_dup 0)\n \t(plus:SWI (match_dup 0)\n \t\t  (match_operand:SWI 1 \"const_int_operand\" \"i\")))]\n   \"(unsigned HOST_WIDE_INT) INTVAL (operands[1])\n    == -(unsigned HOST_WIDE_INT) INTVAL (operands[2])\"\n {\n-  if (TARGET_USE_INCDEC)\n+  if (incdec_operand (operands[1], <MODE>mode))\n     {\n       if (operands[1] == const1_rtx)\n-\treturn \"lock{%;} inc{<imodesuffix>}\\t%0\";\n-      if (operands[1] == constm1_rtx)\n-\treturn \"lock{%;} dec{<imodesuffix>}\\t%0\";\n+\treturn \"lock{%;} %K3inc{<imodesuffix>}\\t%0\";\n+      else\n+\t{\n+\t  gcc_assert (operands[1] == constm1_rtx);\n+\t  return \"lock{%;} %K3dec{<imodesuffix>}\\t%0\";\n+\t}\n     }\n \n   if (x86_maybe_negate_const_int (&operands[1], <MODE>mode))\n-    return \"lock{%;} sub{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+    return \"lock{%;} %K3sub{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n \n-  return \"lock{%;} add{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+  return \"lock{%;} %K3add{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n ;; Recall that xchg implicitly sets LOCK#, so adding it again wastes space.\n@@ -543,12 +547,15 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n {\n-  if (TARGET_USE_INCDEC)\n+  if (incdec_operand (operands[1], <MODE>mode))\n     {\n       if (operands[1] == const1_rtx)\n \treturn \"lock{%;} %K2inc{<imodesuffix>}\\t%0\";\n-      if (operands[1] == constm1_rtx)\n-\treturn \"lock{%;} %K2dec{<imodesuffix>}\\t%0\";\n+      else\n+\t{\n+\t  gcc_assert (operands[1] == constm1_rtx);\n+\t  return \"lock{%;} %K2dec{<imodesuffix>}\\t%0\";\n+\t}\n     }\n \n   if (x86_maybe_negate_const_int (&operands[1], <MODE>mode))\n@@ -567,12 +574,15 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n {\n-  if (TARGET_USE_INCDEC)\n+  if (incdec_operand (operands[1], <MODE>mode))\n     {\n       if (operands[1] == const1_rtx)\n \treturn \"lock{%;} %K2dec{<imodesuffix>}\\t%0\";\n-      if (operands[1] == constm1_rtx)\n-\treturn \"lock{%;} %K2inc{<imodesuffix>}\\t%0\";\n+      else\n+\t{\n+\t  gcc_assert (operands[1] == constm1_rtx);\n+\t  return \"lock{%;} %K2inc{<imodesuffix>}\\t%0\";\n+\t}\n     }\n \n   if (x86_maybe_negate_const_int (&operands[1], <MODE>mode))"}]}