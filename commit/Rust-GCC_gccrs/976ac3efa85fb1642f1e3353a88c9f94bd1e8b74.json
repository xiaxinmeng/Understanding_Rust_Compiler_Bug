{"sha": "976ac3efa85fb1642f1e3353a88c9f94bd1e8b74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2YWMzZWZhODVmYjE2NDJmMWUzMzUzYTg4YzlmOTRiZDFlOGI3NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-21T23:29:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-21T23:29:02Z"}, "message": "(expand_lib): Look for both libfoo.a and foo.lib.\n\nModified to support linking with Windows NT graphics libraries.\n\nFrom-SVN: r9002", "tree": {"sha": "13404d78e2bb5c851fcde55181a09b8018c52ea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13404d78e2bb5c851fcde55181a09b8018c52ea2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/976ac3efa85fb1642f1e3353a88c9f94bd1e8b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976ac3efa85fb1642f1e3353a88c9f94bd1e8b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976ac3efa85fb1642f1e3353a88c9f94bd1e8b74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976ac3efa85fb1642f1e3353a88c9f94bd1e8b74/comments", "author": null, "committer": null, "parents": [{"sha": "f795fb5b744ff0f23ab03edf9e63821097f17fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f795fb5b744ff0f23ab03edf9e63821097f17fb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f795fb5b744ff0f23ab03edf9e63821097f17fb9"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "f54f3c7aca2a8ec3982a105443fdb77e4d5669cf", "filename": "gcc/config/winnt/ld.c", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976ac3efa85fb1642f1e3353a88c9f94bd1e8b74/gcc%2Fconfig%2Fwinnt%2Fld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976ac3efa85fb1642f1e3353a88c9f94bd1e8b74/gcc%2Fconfig%2Fwinnt%2Fld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fld.c?ref=976ac3efa85fb1642f1e3353a88c9f94bd1e8b74", "patch": "@@ -1,5 +1,5 @@\n /* Call Windows NT 3.x linker.\n-   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n    Contributed by Douglas B. Rupp (drupp@cs.washington.edu).\n \n This file is part of GNU CC.\n@@ -29,6 +29,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* These can be set by command line arguments */\n char *linker_path = 0;\n int verbose = 0;\n+int subsystem = 0;\n+int entry = 0;\n \n int link_arg_max = -1;\n char **link_args = (char **) 0;\n@@ -38,6 +40,9 @@ char *search_dirs = \".\";\n \n static int is_regular_file (char *name);\n \n+/* Add the argument contained in STR to the list of arguments to pass to the\n+   linker */\n+\n static void\n addarg (str)\n      char *str;\n@@ -62,6 +67,9 @@ addarg (str)\n   link_args [link_arg_index] = str;\n }\n \n+/* Locate the file named in FILE_NAME in the set of paths contained in\n+   PATH_VAL */\n+\n static char *\n locate_file (file_name, path_val)\n      char *file_name;\n@@ -110,6 +118,9 @@ locate_file (file_name, path_val)\n   return 0;\n }\n \n+/* Given a library name in NAME, i.e. foo.  Look first for libfoo.a and then\n+   foo.lib in the set of directories we are allowed to search in */\n+\n static char *\n expand_lib (name)\n      char *name;\n@@ -123,13 +134,23 @@ expand_lib (name)\n   lib_path = locate_file (lib, search_dirs);\n   if (!lib_path)\n     {\n-      fprintf (stderr, \"Couldn't locate library: %s\\n\", lib);\n-      exit (1);\n+      strcpy (lib, name);\n+      strcat (lib, \".lib\");\n+      lib_path = locate_file (lib, search_dirs);\n+      if (!lib_path)\n+        {\n+          fprintf (stderr, \n+                   \"Couldn't locate library: lib%s.a or %s.lib\\n\", name, name);\n+          exit (1);\n+        }\n     }\n \n   return lib_path;\n }\n \n+/* Check to see if the file named in NAME is a regular file, i.e. not a\n+   directory */\n+\n static int\n is_regular_file (name)\n      char *name;\n@@ -141,6 +162,9 @@ is_regular_file (name)\n   return !ret && S_ISREG (statbuf.st_mode);\n }\n \n+/* Process the number of args in P_ARGC and contained in ARGV.  Look for\n+   special flags, etc. that must be handled for the Microsoft linker */\n+\n static void\n process_args (p_argc, argv)\n      int *p_argc;\n@@ -153,9 +177,16 @@ process_args (p_argc, argv)\n       /* -v turns on verbose option here and is passed on to gcc */\n       if (! strcmp (argv [i], \"-v\"))\n \tverbose = 1;\n+      else if (! strncmp (argv [i], \"-subsystem\", 10))\n+\tsubsystem = 1;\n+      else if (! strncmp (argv [i], \"-entry\", 6))\n+\tentry = 1;\n     }\n }\n \n+/* The main program.  Spawn the Microsoft linker after fixing up the\n+   Unix-like flags and args to be what the Microsoft linker wants */\n+\n main (argc, argv)\n      int argc;\n      char *argv[];\n@@ -184,6 +215,8 @@ main (argc, argv)\n     }\n \n   addarg (linker_path);\n+  if (! subsystem) addarg (\"-subsystem:console\");\n+  if (! entry) addarg (\"-entry:mainCRTStartup\");\n \n   for (i = 1; i < argc; i++)\n     {\n@@ -203,7 +236,6 @@ main (argc, argv)\n \t  if (ptr == NULL || strlen (ptr) != 4)\n \t    strcat (buff, \".exe\");\n \t  addarg (buff);\n-\t  addarg (\"-debug:full -debugtype:coff\");\n \t}\n       else if (arg_len > 2 && !strncmp (argv [i], \"-L\", 2))\n \t{"}]}