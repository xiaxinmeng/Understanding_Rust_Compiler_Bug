{"sha": "661a0813da5f8b3d3085ec3481e6928e6cadca03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxYTA4MTNkYTVmOGIzZDMwODVlYzM0ODFlNjkyOGU2Y2FkY2EwMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-05-09T08:24:37Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-05-09T08:24:37Z"}, "message": "re PR c/50459 (alignof doesn't work on plain old constant, works with expressions containing it)\n\n\tPR c/50459\nc-family/\n\t* c-common.c (check_user_alignment): Return -1 if alignment is error\n\tnode.\n\t(handle_aligned_attribute): Don't call default_conversion on\n\tFUNCTION_DECLs.\n\t(handle_vector_size_attribute): Likewise.\n\t(handle_tm_wrap_attribute): Handle case when wrap_decl is error node.\n\t(handle_sentinel_attribute): Call default_conversion and allow even\n\tintegral types as an argument.\nc/\n\t* c-parser.c (c_parser_attributes): Parse the arguments as an\n\texpression-list if the attribute takes identifier.\ntestsuite/\n\t* c-c++-common/attributes-1.c: Move test line to a new test.\n\t* c-c++-common/attributes-2.c: New test.\n\t* c-c++-common/pr50459.c: New test.\n\t* c-c++-common/pr59280.c: Add \"undeclared\" to dg-error.\n\t* gcc.dg/nonnull-2.c: Likewise.\n\t* gcc.dg/pr55570.c: Modify dg-error.\n\t* gcc.dg/tm/wrap-2.c: Likewise.\n\nFrom-SVN: r210262", "tree": {"sha": "35edbf8e14134b0cba3c9df371c7f28c16b8e69b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35edbf8e14134b0cba3c9df371c7f28c16b8e69b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/661a0813da5f8b3d3085ec3481e6928e6cadca03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661a0813da5f8b3d3085ec3481e6928e6cadca03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661a0813da5f8b3d3085ec3481e6928e6cadca03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661a0813da5f8b3d3085ec3481e6928e6cadca03/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4"}], "stats": {"total": 89, "additions": 74, "deletions": 15}, "files": [{"sha": "3a978fa40b9d77d4419d4273a669578ade09a996", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -1,3 +1,15 @@\n+2014-05-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/50459\n+\t* c-common.c (check_user_alignment): Return -1 if alignment is error\n+\tnode.\n+\t(handle_aligned_attribute): Don't call default_conversion on\n+\tFUNCTION_DECLs.\n+\t(handle_vector_size_attribute): Likewise.\n+\t(handle_tm_wrap_attribute): Handle case when wrap_decl is error node.\n+\t(handle_sentinel_attribute): Call default_conversion and allow even\n+\tintegral types as an argument.\n+\n 2014-05-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61053"}, {"sha": "a120b5cb008721e257fd69d523bee4e7bb1e762a", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -7443,6 +7443,8 @@ check_user_alignment (const_tree align, bool allow_zero)\n {\n   int i;\n \n+  if (error_operand_p (align))\n+    return -1;\n   if (TREE_CODE (align) != INTEGER_CST\n       || !INTEGRAL_TYPE_P (TREE_TYPE (align)))\n     {\n@@ -7564,7 +7566,8 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n   if (args)\n     {\n       align_expr = TREE_VALUE (args);\n-      if (align_expr && TREE_CODE (align_expr) != IDENTIFIER_NODE)\n+      if (align_expr && TREE_CODE (align_expr) != IDENTIFIER_NODE\n+\t  && TREE_CODE (align_expr) != FUNCTION_DECL)\n \talign_expr = default_conversion (align_expr);\n     }\n   else\n@@ -8429,9 +8432,11 @@ handle_tm_wrap_attribute (tree *node, tree name, tree args,\n   else\n     {\n       tree wrap_decl = TREE_VALUE (args);\n-      if (TREE_CODE (wrap_decl) != IDENTIFIER_NODE\n-\t  && TREE_CODE (wrap_decl) != VAR_DECL\n-\t  && TREE_CODE (wrap_decl) != FUNCTION_DECL)\n+      if (error_operand_p (wrap_decl))\n+        ;\n+      else if (TREE_CODE (wrap_decl) != IDENTIFIER_NODE\n+\t       && TREE_CODE (wrap_decl) != VAR_DECL\n+\t       && TREE_CODE (wrap_decl) != FUNCTION_DECL)\n \terror (\"%qE argument not an identifier\", name);\n       else\n \t{\n@@ -8558,7 +8563,8 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n   *no_add_attrs = true;\n \n   size = TREE_VALUE (args);\n-  if (size && TREE_CODE (size) != IDENTIFIER_NODE)\n+  if (size && TREE_CODE (size) != IDENTIFIER_NODE\n+      && TREE_CODE (size) != FUNCTION_DECL)\n     size = default_conversion (size);\n \n   if (!tree_fits_uhwi_p (size))\n@@ -8970,8 +8976,12 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n   if (args)\n     {\n       tree position = TREE_VALUE (args);\n+      if (position && TREE_CODE (position) != IDENTIFIER_NODE\n+\t  && TREE_CODE (position) != FUNCTION_DECL)\n+\tposition = default_conversion (position);\n \n-      if (TREE_CODE (position) != INTEGER_CST)\n+      if (TREE_CODE (position) != INTEGER_CST\n+          || !INTEGRAL_TYPE_P (TREE_TYPE (position)))\n \t{\n \t  warning (OPT_Wattributes,\n \t\t   \"requested position is not an integer constant\");"}, {"sha": "4b7346114fab71fd5c18c603db80dd1a8a0bdf17", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -1,3 +1,9 @@\n+2014-05-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/50459\n+\t* c-parser.c (c_parser_attributes): Parse the arguments as an\n+\texpression-list if the attribute takes identifier.\n+\n 2014-05-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61053"}, {"sha": "6e16d8b7f2fb256e5d16bfc5e4c192df278d0110", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -3955,11 +3955,16 @@ c_parser_attributes (c_parser *parser)\n \t     In objective-c the identifier may be a classname.  */\n \t  if (c_parser_next_token_is (parser, CPP_NAME)\n \t      && (c_parser_peek_token (parser)->id_kind == C_ID_ID\n-\t\t  || (c_dialect_objc () \n-\t\t      && c_parser_peek_token (parser)->id_kind == C_ID_CLASSNAME))\n+\t\t  || (c_dialect_objc ()\n+\t\t      && c_parser_peek_token (parser)->id_kind\n+\t\t\t == C_ID_CLASSNAME))\n \t      && ((c_parser_peek_2nd_token (parser)->type == CPP_COMMA)\n \t\t  || (c_parser_peek_2nd_token (parser)->type\n-\t\t      == CPP_CLOSE_PAREN)))\n+\t\t      == CPP_CLOSE_PAREN))\n+\t      && (attribute_takes_identifier_p (attr_name)\n+\t\t  || (c_dialect_objc ()\n+\t\t      && c_parser_peek_token (parser)->id_kind\n+\t\t\t == C_ID_CLASSNAME)))\n \t    {\n \t      tree arg1 = c_parser_peek_token (parser)->value;\n \t      c_parser_consume_token (parser);"}, {"sha": "52639c054b63efe4625fa771d9fc199828cfe33d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -1,3 +1,14 @@\n+2014-05-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/50459\n+\t* c-c++-common/attributes-1.c: Move test line to a new test.\n+\t* c-c++-common/attributes-2.c: New test.\n+\t* c-c++-common/pr50459.c: New test.\n+\t* c-c++-common/pr59280.c: Add \"undeclared\" to dg-error.\n+\t* gcc.dg/nonnull-2.c: Likewise.\n+\t* gcc.dg/pr55570.c: Modify dg-error.\n+\t* gcc.dg/tm/wrap-2.c: Likewise.\n+\n 2014-05-08  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/61009"}, {"sha": "1657da10d5e40023250544aed9f5e1c03121292e", "filename": "gcc/testsuite/c-c++-common/attributes-1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-1.c?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -9,8 +9,6 @@ typedef char vec __attribute__((vector_size(bar))); /* { dg-warning \"ignored\" }\n void f1(char*) __attribute__((nonnull(bar))); /* { dg-error \"invalid operand\" } */\n void f2(char*) __attribute__((nonnull(1,bar))); /* { dg-error \"invalid operand\" } */\n \n-void g() __attribute__((aligned(bar))); /* { dg-error \"invalid value|not an integer\" } */\n-\n void foo(void);\n void* my_calloc(unsigned, unsigned) __attribute__((alloc_size(1,foo))); /* { dg-warning \"outside range\" } */\n void* my_realloc(void*, unsigned) __attribute__((alloc_size(foo))); /* { dg-warning \"outside range\" } */"}, {"sha": "47b2c7b3ca85350c1bf395aae4d099ccc6fb8456", "filename": "gcc/testsuite/c-c++-common/attributes-2.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-2.c?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-do compile } */\n+\n+void g() __attribute__((aligned(bar))); /* { dg-error \"undeclared here|not declared\" } */"}, {"sha": "f837b63bfc403ca29c5a22af6fbdeb9be1518440", "filename": "gcc/testsuite/c-c++-common/pr50459.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr50459.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr50459.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr50459.c?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/50459 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Wextra\" } */\n+\n+enum { A = 128, B = 1 };\n+void *fn1 (void) __attribute__((assume_aligned (A)));\n+void *fn2 (void) __attribute__((assume_aligned (A, 4)));\n+void fn3 (void) __attribute__((constructor (A)));\n+void fn4 (void) __attribute__((destructor (A)));\n+void *fn5 (int) __attribute__((alloc_size (B)));\n+void *fn6 (int) __attribute__((alloc_align (B)));\n+void fn7 (const char *, ...) __attribute__ ((sentinel (B)));\n+int __attribute__((vector_size (A))) a;\n+int __attribute__((aligned (A))) foo;"}, {"sha": "581a1cf7b594147ad112df739547ed42c0cdcd90", "filename": "gcc/testsuite/c-c++-common/pr59280.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr59280.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr59280.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr59280.c?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -1,4 +1,4 @@\n /* PR c/59280 */\n /* { dg-do compile } */\n \n-void bar (char *) __attribute__((constructor(foo))); /* { dg-error \"constructor priorities must be integers|was not declared|constructor priorities are not supported\" } */\n+void bar (char *) __attribute__((constructor(foo))); /* { dg-error \"constructor priorities must be integers|was not declared|undeclared|constructor priorities are not supported\" } */"}, {"sha": "d570a467e6a0ae6b2a533038bc0d2a61737c1356", "filename": "gcc/testsuite/gcc.dg/nonnull-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fgcc.dg%2Fnonnull-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fgcc.dg%2Fnonnull-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnonnull-2.c?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -6,7 +6,7 @@ extern void func1 () __attribute__((nonnull)); /* { dg-error \"without arguments\"\n \n extern void func2 (char *) __attribute__((nonnull(2))); /* { dg-error \"out-of-range operand\" } */\n \n-extern void func3 (char *) __attribute__((nonnull(foo))); /* { dg-error \"invalid operand number\" } */\n+extern void func3 (char *) __attribute__((nonnull(foo))); /* { dg-error \"invalid operand number|undeclared\" } */\n \n extern void func4 (int) __attribute__((nonnull(1))); /* { dg-error \"references non-pointer\" } */\n "}, {"sha": "5f5555ee47b29ae28a3a115b6be790fbe33aca5e", "filename": "gcc/testsuite/gcc.dg/pr55570.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55570.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55570.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55570.c?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -1,4 +1,4 @@\n /* PR c/55570 */\n /* { dg-do compile } */\n \n-char array[16] __attribute__((aligned (SOME_NOT_DEFINED_MACRO))); /* { dg-error \"requested alignment is not an integer constant\" } */\n+char array[16] __attribute__((aligned (SOME_NOT_DEFINED_MACRO))); /* { dg-error \"undeclared here\" } */"}, {"sha": "372d666be7f4665846a0e79cee63f2b7e2979770", "filename": "gcc/testsuite/gcc.dg/tm/wrap-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fwrap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661a0813da5f8b3d3085ec3481e6928e6cadca03/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fwrap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fwrap-2.c?ref=661a0813da5f8b3d3085ec3481e6928e6cadca03", "patch": "@@ -10,7 +10,7 @@ int f7(void);\n void g1(void) W(f1);\n void g2(void) W(f2);\t/* { dg-error \"is not compatible\" } */\n void g3(void) W(i3);\t/* { dg-error \"is not a function\" } */\n-void g4(void) W(f4);\t/* { dg-error \"is not a function\" } */\n+void g4(void) W(f4);\t/* { dg-error \"undeclared\" } */\n void g5(void) W(1);\t/* { dg-error \"not an identifier\" } */\n void g6(void) W(\"f1\");\t/* { dg-error \"not an identifier\" } */\n void g7(void) W(f7);\t/* { dg-error \"is not compatible\" } */"}]}