{"sha": "49ec63666e086853401021e686f0aa4d285ce9dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDllYzYzNjY2ZTA4Njg1MzQwMTAyMWU2ODZmMGFhNGQyODVjZTlkYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-13T18:25:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-13T18:28:07Z"}, "message": "widening_mul: Fix a > ~b to .ADD_OVERFLOW optimization [PR98256]\n\nUnfortunately, my latest tree-ssa-math-opts.c patch broke the following\ntestcase.  The problem is that the code is adding .ADD_OVERFLOW or\n.SUB_OVERFLOW before or after the stmt on which the function has been\ncalled, which is normally a addition or subtraction that has all the\noperands.\nBut in the a > ~b optimization that stmt is the ~b stmt and the other\ncomparison operand might be defined only after that ~b stmt, so we can't\ninsert the .ADD_OVERFLOW next to ~b that we want to delete, but need to\ninsert it before the a > temp comparison that uses it; and in that case\nwhen removing the BIT_NOT_EXPR stmt we need to ensure the caller doesn't do\ngsi_next because gsi_remove already points the iterator to the next stmt.\n\n2020-12-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/98256\n\t* tree-ssa-math-opts.c (match_uaddsub_overflow): For BIT_NOT_EXPR,\n\tonly handle a single use, and insert .ADD_OVERFLOW before the\n\tcomparison rather than after the BIT_NOT_EXPR.  Return true iff\n\tit is BIT_NOT_EXPR and it has been removed.\n\t(math_opts_dom_walker::after_dom_children) <case BIT_NOT_EXPR>:\n\tIf match_uaddsub_overflow returned true, continue instead of break.\n\n\t* gcc.c-torture/compile/pr98256.c: New test.", "tree": {"sha": "e5669d886633bfa6ee97f838ccbac65b88a7c0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5669d886633bfa6ee97f838ccbac65b88a7c0f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49ec63666e086853401021e686f0aa4d285ce9dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ec63666e086853401021e686f0aa4d285ce9dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ec63666e086853401021e686f0aa4d285ce9dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ec63666e086853401021e686f0aa4d285ce9dc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cc4e183f12e962678c70f2c3d476c748a82c29e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc4e183f12e962678c70f2c3d476c748a82c29e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc4e183f12e962678c70f2c3d476c748a82c29e"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "44839c7b42a66bb22f9360fe6b22016d3acbf4a8", "filename": "gcc/testsuite/gcc.c-torture/compile/pr98256.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ec63666e086853401021e686f0aa4d285ce9dc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ec63666e086853401021e686f0aa4d285ce9dc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98256.c?ref=49ec63666e086853401021e686f0aa4d285ce9dc", "patch": "@@ -0,0 +1,9 @@\n+/* PR tree-optimization/98256 */\n+\n+unsigned a, b;\n+\n+int\n+foo (void)\n+{\n+  return !!(~a / b);\n+}"}, {"sha": "c74b763d99a913fb3ae236137f7d78dd2929c38d", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ec63666e086853401021e686f0aa4d285ce9dc/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ec63666e086853401021e686f0aa4d285ce9dc/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=49ec63666e086853401021e686f0aa4d285ce9dc", "patch": "@@ -3598,6 +3598,7 @@ match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n   gimple *use_stmt;\n   gimple *add_stmt = NULL;\n   bool add_first = false;\n+  gimple *cond_stmt = NULL;\n \n   gcc_checking_assert (code == PLUS_EXPR\n \t\t       || code == MINUS_EXPR\n@@ -3628,8 +3629,9 @@ match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n \t\treturn false;\n \t      if (rhs2 == NULL)\n \t\trhs2 = other;\n-\t      else if (rhs2 != other)\n+\t      else\n \t\treturn false;\n+\t      cond_stmt = use_stmt;\n \t    }\n \t  ovf_use_seen = true;\n \t}\n@@ -3818,6 +3820,9 @@ match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n \t}\n     }\n \n+  if (code == BIT_NOT_EXPR)\n+    *gsi = gsi_for_stmt (cond_stmt);\n+\n   tree ctype = build_complex_type (type);\n   gcall *g = gimple_build_call_internal (code != MINUS_EXPR\n \t\t\t\t\t ? IFN_ADD_OVERFLOW : IFN_SUB_OVERFLOW,\n@@ -3843,7 +3848,10 @@ match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n   tree ovf = make_ssa_name (type);\n   g2 = gimple_build_assign (ovf, IMAGPART_EXPR,\n \t\t\t    build1 (IMAGPART_EXPR, type, ctmp));\n-  gsi_insert_after (gsi, g2, GSI_NEW_STMT);\n+  if (code != BIT_NOT_EXPR)\n+    gsi_insert_after (gsi, g2, GSI_NEW_STMT);\n+  else\n+    gsi_insert_before (gsi, g2, GSI_SAME_STMT);\n \n   FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n     {\n@@ -3908,11 +3916,12 @@ match_uaddsub_overflow (gimple_stmt_iterator *gsi, gimple *stmt,\n     }\n   else if (code == BIT_NOT_EXPR)\n     {\n-      gimple_stmt_iterator gsi2 = gsi_for_stmt (stmt);\n-      gsi_remove (&gsi2, true);\n+      *gsi = gsi_for_stmt (stmt);\n+      gsi_remove (gsi, true);\n       release_ssa_name (lhs);\n+      return true;\n     }\n-  return true;\n+  return false;\n }\n \n /* Return true if target has support for divmod.  */\n@@ -4238,7 +4247,8 @@ math_opts_dom_walker::after_dom_children (basic_block bb)\n \t      break;\n \n \t    case BIT_NOT_EXPR:\n-\t      match_uaddsub_overflow (&gsi, stmt, code);\n+\t      if (match_uaddsub_overflow (&gsi, stmt, code))\n+\t\tcontinue;\n \t      break;\n \n \t    case TRUNC_MOD_EXPR:"}]}