{"sha": "10a97ae6f1f6e29beb258157ebaf04c54172bddb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhOTdhZTZmMWY2ZTI5YmViMjU4MTU3ZWJhZjA0YzU0MTcyYmRkYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-03-08T06:59:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-08T06:59:33Z"}, "message": "re PR target/22152 (Poor loop optimization when using mmx builtins)\n\n2008-03-08  Uros Bizjak  <ubizjak@gmail.com>\n\n        PR target/22152\n        * config/i386/i386-modes.def (V1DI): New vector mode.\n        * config/i386/i386.h (VALID_MMX_REG_MODE): Add V1DImode.\n        * config/i386/mmx.md (MMXMODEI8): New mode iterator.\n        (MMXMODE248): Ditto.\n        (MMXMODE): Add V1DI mode.\n        (mmxvecsize): Change DI mode to V1DI mode.\n        (\"mov<mode>): Use MMXMODEI8 mode iterator.\n        (\"*mov<mode>_internal_rex64\"): Ditto.\n        (\"*mov<mode>_internal\"): Ditto.\n        (\"mmx_add<mode>3\"): Ditto.  Handle V1DImode for TARGET_SSE2.\n        (\"mmx_sub<mode>3\"): Ditto.\n        (\"mmx_adddi3\"): Remove insn pattern.\n        (\"mmx_subdi3\"): Ditto.\n        (\"mmx_ashr<mode>3\"): Use SImode and \"yN\" constraint for operand 2.\n        (\"mmx_lshr<mode>3\"): Ditto. Use MMXMODE248 mode iterator.\n        (\"mmx_ashl<mode>3\"): Ditto.\n        (\"mmx_lshrdi3\"): Remove insn pattern.\n        (\"mmx_ashldi3\"): Ditto.\n        * config/i386/i386.c (classify_argument): Handle V1DImode.\n        (function_arg_advance_32): Ditto.\n        (function_arg_32): Ditto.\n        (struct builtin_description) [IX86_BUILTIN_PADDQ]: Use\n        mmx_addv1di3 insn pattern.\n        [IX86_BUILTIN_PSUBQ]: Use mmx_subv1di3 insn pattern.\n        [IX86_BUILTIN_PSLL?, IX86_BUILTIN_PSRL?, IX86_BUILTIN_PSRA?,\n        IX86_BUILTIN_PSLL?I, IX86_BUILTIN_PSRL?I, IX86_BUILTIN_PSRA?I,\n        IX86_BUILTIN_PSLL?I128, IX86_BUILTIN_PSRL?I128, IX86_BUILTIN_PSRA?I128]:\n        Remove definitions of built-in functions.\n        (V1DI_type_node): New node.\n        (v1di_ftype_v1di_int): Ditto.\n        (v1di_ftype_v1di_v1di): Ditto.\n        (v2si_ftype_v2si_si): Ditto.\n        (v4hi_ftype_v4hi_di): Remove node.\n        (v2si_ftype_v2si_di): Ditto.\n        (ix86_init_mmx_sse_builtins): Handle V1DImode.\n        (__builtin_ia32_psll?, __builtin_ia32_psrl?, __builtin_ia32_psra?):\n        Redefine builtins using def_builtin_const with *_ftype_*_int node.\n        (__builtin_ia32_psll?i, __builtin_ia32_psrl?i, __builtin_ia32_psra?i):\n        Add new builtins using def_builtin_const.\n        (ix86_expand_builtin) [IX86_BUILTIN_PSLL?, IX86_BUILTIN_PSRL?,\n        IX86_BUILTIN_PSRA?, IX86_BUILTIN_PSLL?I, IX86_BUILTIN_PSRL?I,\n        IX86_BUILTIN_PSRA?I]: Handle builtin definitions.\n        * config/i386/mmintrin.h (__v1di): New typedef.\n        (_mm_add_si64): Cast arguments to __v1di type.\n        (_mm_sub_si64): Ditto.\n        (_mm_sll_pi16): Cast __count to __v4hi type.\n        (_mm_sll_pi32): Cast __count to __v2si type.\n        (_mm_sll_si64): Cast arguments to __v1di type.\n        (_mm_srl_pi16): Cast __count to __v4hi type.\n        (_mm_srl_pi32): Cast __count to __v2si type.\n        (_mm_srl_si64): Cast arguments to __v1di type.\n        (_mm_sra_pi16): Cast __count to __v4hi type.\n        (_mm_sra_pi32): Cast __count to __v2si type.\n        (_mm_slli_pi16): Use __builtin_ia32_psllwi.\n        (_mm_slli_pi32): Use __builtin_ia32_pslldi.\n        (_mm_slli_si64): Use __builtin_ia32_psllqi. Cast __m to __v1di type.\n        (_mm_srli_pi16): Use __builtin_ia32_psrlwi.\n        (_mm_srli_pi32): Use __builtin_ia32_psrldi.\n        (_mm_srli_si64): Use __builtin_ia32_psrlqi. Cast __m to __v1di type.\n        (_mm_srai_pi16): Use __builtin_ia32_psrawi.\n        (_mm_srai_pi32): Use __builtin_ia32_psradi.\n        * config/i386/i386.md (UNSPEC_NOP): Remove unspec definition.\n        * doc/extend.texi (X86 Built-in Functions) [__builtin_ia32_psll?,\n        __builtin_ia32_psrl?, __builtin_ia32_psra?, __builtin_ia32_psll?i,\n        __builtin_ia32_psrl?i, __builtin_ia32_psra?i]: Add new builtins.\n\nFrom-SVN: r133023", "tree": {"sha": "a15bd279119cf2258679eb96276730ee9c11b235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a15bd279119cf2258679eb96276730ee9c11b235"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a97ae6f1f6e29beb258157ebaf04c54172bddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a97ae6f1f6e29beb258157ebaf04c54172bddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a97ae6f1f6e29beb258157ebaf04c54172bddb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a97ae6f1f6e29beb258157ebaf04c54172bddb/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fab80a4a3934f4fc23c991e3620162ebb4f019b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fab80a4a3934f4fc23c991e3620162ebb4f019b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fab80a4a3934f4fc23c991e3620162ebb4f019b"}], "stats": {"total": 359, "additions": 212, "deletions": 147}, "files": [{"sha": "1ffe9d59b98f179e3800b214fe1217ed430c1d76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10a97ae6f1f6e29beb258157ebaf04c54172bddb", "patch": "@@ -1,3 +1,72 @@\n+2008-03-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/22152\n+\t* config/i386/i386-modes.def (V1DI): New vector mode.\n+\t* config/i386/i386.h (VALID_MMX_REG_MODE): Add V1DImode.\n+\t* config/i386/mmx.md (MMXMODEI8): New mode iterator.\n+\t(MMXMODE248): Ditto.\n+\t(MMXMODE): Add V1DI mode.\n+\t(mmxvecsize): Change DI mode to V1DI mode.\n+\t(\"mov<mode>): Use MMXMODEI8 mode iterator.\n+\t(\"*mov<mode>_internal_rex64\"): Ditto.\n+\t(\"*mov<mode>_internal\"): Ditto.\n+\t(\"mmx_add<mode>3\"): Ditto.  Handle V1DImode for TARGET_SSE2.\n+\t(\"mmx_sub<mode>3\"): Ditto.\n+\t(\"mmx_adddi3\"): Remove insn pattern.\n+\t(\"mmx_subdi3\"): Ditto.\n+\t(\"mmx_ashr<mode>3\"): Use SImode and \"yN\" constraint for operand 2.\n+\t(\"mmx_lshr<mode>3\"): Ditto. Use MMXMODE248 mode iterator.\n+\t(\"mmx_ashl<mode>3\"): Ditto.\n+\t(\"mmx_lshrdi3\"): Remove insn pattern.\n+\t(\"mmx_ashldi3\"): Ditto.\n+\t* config/i386/i386.c (classify_argument): Handle V1DImode.\n+\t(function_arg_advance_32): Ditto.\n+\t(function_arg_32): Ditto.\n+\t(struct builtin_description) [IX86_BUILTIN_PADDQ]: Use\n+\tmmx_addv1di3 insn pattern.\n+\t[IX86_BUILTIN_PSUBQ]: Use mmx_subv1di3 insn pattern.\n+\t[IX86_BUILTIN_PSLL?, IX86_BUILTIN_PSRL?, IX86_BUILTIN_PSRA?,\n+\tIX86_BUILTIN_PSLL?I, IX86_BUILTIN_PSRL?I, IX86_BUILTIN_PSRA?I,\n+\tIX86_BUILTIN_PSLL?I128, IX86_BUILTIN_PSRL?I128, IX86_BUILTIN_PSRA?I128]:\n+\tRemove definitions of built-in functions.\n+\t(V1DI_type_node): New node.\n+\t(v1di_ftype_v1di_int): Ditto.\n+\t(v1di_ftype_v1di_v1di): Ditto.\n+\t(v2si_ftype_v2si_si): Ditto.\n+\t(v4hi_ftype_v4hi_di): Remove node.\n+\t(v2si_ftype_v2si_di): Ditto.\n+\t(ix86_init_mmx_sse_builtins): Handle V1DImode.\n+\t(__builtin_ia32_psll?, __builtin_ia32_psrl?, __builtin_ia32_psra?):\n+\tRedefine builtins using def_builtin_const with *_ftype_*_int node.\n+\t(__builtin_ia32_psll?i, __builtin_ia32_psrl?i, __builtin_ia32_psra?i):\n+\tAdd new builtins using def_builtin_const.\n+\t(ix86_expand_builtin) [IX86_BUILTIN_PSLL?, IX86_BUILTIN_PSRL?,\n+\tIX86_BUILTIN_PSRA?, IX86_BUILTIN_PSLL?I, IX86_BUILTIN_PSRL?I,\n+\tIX86_BUILTIN_PSRA?I]: Handle builtin definitions.\n+\t* config/i386/mmintrin.h (__v1di): New typedef.\n+\t(_mm_add_si64): Cast arguments to __v1di type.\n+\t(_mm_sub_si64): Ditto.\n+\t(_mm_sll_pi16): Cast __count to __v4hi type.\n+\t(_mm_sll_pi32): Cast __count to __v2si type.\n+\t(_mm_sll_si64): Cast arguments to __v1di type.\n+\t(_mm_srl_pi16): Cast __count to __v4hi type.\n+\t(_mm_srl_pi32): Cast __count to __v2si type.\n+\t(_mm_srl_si64): Cast arguments to __v1di type.\n+\t(_mm_sra_pi16): Cast __count to __v4hi type.\n+\t(_mm_sra_pi32): Cast __count to __v2si type.\n+\t(_mm_slli_pi16): Use __builtin_ia32_psllwi.\n+\t(_mm_slli_pi32): Use __builtin_ia32_pslldi.\n+\t(_mm_slli_si64): Use __builtin_ia32_psllqi. Cast __m to __v1di type.\n+\t(_mm_srli_pi16): Use __builtin_ia32_psrlwi.\n+\t(_mm_srli_pi32): Use __builtin_ia32_psrldi.\n+\t(_mm_srli_si64): Use __builtin_ia32_psrlqi. Cast __m to __v1di type.\n+\t(_mm_srai_pi16): Use __builtin_ia32_psrawi.\n+\t(_mm_srai_pi32): Use __builtin_ia32_psradi.\n+\t* config/i386/i386.md (UNSPEC_NOP): Remove unspec definition.\n+\t* doc/extend.texi (X86 Built-in Functions) [__builtin_ia32_psll?,\n+\t__builtin_ia32_psrl?, __builtin_ia32_psra?, __builtin_ia32_psll?i,\n+\t__builtin_ia32_psrl?i, __builtin_ia32_psra?i]: Add new builtins.\n+\n 2008-03-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/include/texinfo.tex: Update to version 2008-03-07.10."}, {"sha": "a23e8203ff383be6585808681a30de063d1871e4", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=10a97ae6f1f6e29beb258157ebaf04c54172bddb", "patch": "@@ -79,6 +79,7 @@ VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI */\n VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI */\n VECTOR_MODES (FLOAT, 8);      /*            V4HF V2SF */\n VECTOR_MODES (FLOAT, 16);     /*       V8HF V4SF V2DF */\n+VECTOR_MODE (INT, DI, 1);     /*                 V1DI */\n VECTOR_MODE (INT, QI, 2);     /*                 V2QI */\n VECTOR_MODE (INT, DI, 4);     /*                 V4DI */\n VECTOR_MODE (INT, SI, 8);     /*                 V8SI */"}, {"sha": "f1618e617bada15cd6eb67b49c2aa20b54a4bbf3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 72, "deletions": 55, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=10a97ae6f1f6e29beb258157ebaf04c54172bddb", "patch": "@@ -3838,7 +3838,7 @@ classify_argument (enum machine_mode mode, const_tree type,\n     }\n \n   /* for V1xx modes, just use the base mode */\n-  if (VECTOR_MODE_P (mode)\n+  if (VECTOR_MODE_P (mode) && mode != V1DImode\n       && GET_MODE_SIZE (GET_MODE_INNER (mode)) == bytes)\n     mode = GET_MODE_INNER (mode);\n \n@@ -3910,6 +3910,7 @@ classify_argument (enum machine_mode mode, const_tree type,\n       classes[0] = X86_64_SSE_CLASS;\n       classes[1] = X86_64_SSEUP_CLASS;\n       return 2;\n+    case V1DImode:\n     case V2SFmode:\n     case V2SImode:\n     case V4HImode:\n@@ -4211,6 +4212,7 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     case V4HImode:\n     case V2SImode:\n     case V2SFmode:\n+    case V1DImode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n \t{\n \t  cum->mmx_words += words;\n@@ -4374,6 +4376,7 @@ function_arg_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     case V4HImode:\n     case V2SImode:\n     case V2SFmode:\n+    case V1DImode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n \t{\n \t  if (!TARGET_MMX && !warnedmmx && cum->warn_mmx)\n@@ -17955,11 +17958,11 @@ static const struct builtin_description bdesc_2arg[] =\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv4hi3, \"__builtin_ia32_paddw\", IX86_BUILTIN_PADDW, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv2si3, \"__builtin_ia32_paddd\", IX86_BUILTIN_PADDD, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_adddi3, \"__builtin_ia32_paddq\", IX86_BUILTIN_PADDQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_addv1di3, \"__builtin_ia32_paddq\", IX86_BUILTIN_PADDQ, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_subv8qi3, \"__builtin_ia32_psubb\", IX86_BUILTIN_PSUBB, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_subv4hi3, \"__builtin_ia32_psubw\", IX86_BUILTIN_PSUBW, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_subv2si3, \"__builtin_ia32_psubd\", IX86_BUILTIN_PSUBD, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_subdi3, \"__builtin_ia32_psubq\", IX86_BUILTIN_PSUBQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_subv1di3, \"__builtin_ia32_psubq\", IX86_BUILTIN_PSUBQ, UNKNOWN, 0 },\n \n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ssaddv8qi3, \"__builtin_ia32_paddsb\", IX86_BUILTIN_PADDSB, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ssaddv4hi3, \"__builtin_ia32_paddsw\", IX86_BUILTIN_PADDSW, UNKNOWN, 0 },\n@@ -18010,25 +18013,6 @@ static const struct builtin_description bdesc_2arg[] =\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtsi2ss, 0, IX86_BUILTIN_CVTSI2SS, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvtsi2ssq, 0, IX86_BUILTIN_CVTSI642SS, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv4hi3, 0, IX86_BUILTIN_PSLLW, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv4hi3, 0, IX86_BUILTIN_PSLLWI, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv2si3, 0, IX86_BUILTIN_PSLLD, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv2si3, 0, IX86_BUILTIN_PSLLDI, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashldi3, 0, IX86_BUILTIN_PSLLQ, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashldi3, 0, IX86_BUILTIN_PSLLQI, UNKNOWN, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv4hi3, 0, IX86_BUILTIN_PSRLW, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv4hi3, 0, IX86_BUILTIN_PSRLWI, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv2si3, 0, IX86_BUILTIN_PSRLD, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv2si3, 0, IX86_BUILTIN_PSRLDI, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrdi3, 0, IX86_BUILTIN_PSRLQ, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrdi3, 0, IX86_BUILTIN_PSRLQI, UNKNOWN, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv4hi3, 0, IX86_BUILTIN_PSRAW, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv4hi3, 0, IX86_BUILTIN_PSRAWI, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv2si3, 0, IX86_BUILTIN_PSRAD, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv2si3, 0, IX86_BUILTIN_PSRADI, UNKNOWN, 0 },\n-\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_psadbw, 0, IX86_BUILTIN_PSADBW, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_pmaddwd, 0, IX86_BUILTIN_PMADDWD, UNKNOWN, 0 },\n \n@@ -18140,17 +18124,6 @@ static const struct builtin_description bdesc_2arg[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulsidi3, 0, IX86_BUILTIN_PMULUDQ, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv2siv2di3, 0, IX86_BUILTIN_PMULUDQ128, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv8hi3, 0, IX86_BUILTIN_PSLLWI128, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv4si3, 0, IX86_BUILTIN_PSLLDI128, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv2di3, 0, IX86_BUILTIN_PSLLQI128, UNKNOWN, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv8hi3, 0, IX86_BUILTIN_PSRLWI128, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv4si3, 0, IX86_BUILTIN_PSRLDI128, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv2di3, 0, IX86_BUILTIN_PSRLQI128, UNKNOWN, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv8hi3, 0, IX86_BUILTIN_PSRAWI128, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv4si3, 0, IX86_BUILTIN_PSRADI128, UNKNOWN, 0 },\n-\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmaddwd, 0, IX86_BUILTIN_PMADDWD128, UNKNOWN, 0 },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtsi2sd, 0, IX86_BUILTIN_CVTSI2SD, UNKNOWN, 0 },\n@@ -18212,6 +18185,7 @@ static const struct builtin_description bdesc_2arg[] =\n \n static const struct builtin_description bdesc_1arg[] =\n {\n+  /* SSE */\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movmskps, 0, IX86_BUILTIN_MOVMSKPS, UNKNOWN, 0 },\n \n@@ -18228,6 +18202,7 @@ static const struct builtin_description bdesc_1arg[] =\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvttss2si, 0, IX86_BUILTIN_CVTTSS2SI, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvttss2siq, 0, IX86_BUILTIN_CVTTSS2SI64, UNKNOWN, 0 },\n \n+  /* SSE2 */\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB128, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movmskpd, 0, IX86_BUILTIN_MOVMSKPD, UNKNOWN, 0 },\n \n@@ -18585,6 +18560,8 @@ ix86_init_mmx_sse_builtins (void)\n \n   tree V16QI_type_node = build_vector_type_for_mode (char_type_node, V16QImode);\n   tree V2SI_type_node = build_vector_type_for_mode (intSI_type_node, V2SImode);\n+  tree V1DI_type_node\n+    = build_vector_type_for_mode (long_long_integer_type_node, V1DImode);\n   tree V2SF_type_node = build_vector_type_for_mode (float_type_node, V2SFmode);\n   tree V2DI_type_node\n     = build_vector_type_for_mode (long_long_integer_type_node, V2DImode);\n@@ -18649,14 +18626,13 @@ ix86_init_mmx_sse_builtins (void)\n   tree v4hi_ftype_v4hi_int\n     = build_function_type_list (V4HI_type_node,\n \t\t\t\tV4HI_type_node, integer_type_node, NULL_TREE);\n-  tree v4hi_ftype_v4hi_di\n-    = build_function_type_list (V4HI_type_node,\n-\t\t\t\tV4HI_type_node, long_long_unsigned_type_node,\n-\t\t\t\tNULL_TREE);\n-  tree v2si_ftype_v2si_di\n+  tree v2si_ftype_v2si_int\n     = build_function_type_list (V2SI_type_node,\n-\t\t\t\tV2SI_type_node, long_long_unsigned_type_node,\n-\t\t\t\tNULL_TREE);\n+\t\t\t\tV2SI_type_node, integer_type_node, NULL_TREE);\n+  tree v1di_ftype_v1di_int\n+    = build_function_type_list (V1DI_type_node,\n+\t\t\t\tV1DI_type_node, integer_type_node, NULL_TREE);\n+\n   tree void_ftype_void\n     = build_function_type (void_type_node, void_list_node);\n   tree void_ftype_unsigned\n@@ -18723,10 +18699,9 @@ ix86_init_mmx_sse_builtins (void)\n   tree v2si_ftype_v2si_v2si\n     = build_function_type_list (V2SI_type_node,\n \t\t\t\tV2SI_type_node, V2SI_type_node, NULL_TREE);\n-  tree di_ftype_di_di\n-    = build_function_type_list (long_long_unsigned_type_node,\n-\t\t\t\tlong_long_unsigned_type_node,\n-\t\t\t\tlong_long_unsigned_type_node, NULL_TREE);\n+  tree v1di_ftype_v1di_v1di\n+    = build_function_type_list (V1DI_type_node,\n+\t\t\t\tV1DI_type_node, V1DI_type_node, NULL_TREE);\n \n   tree di_ftype_di_di_int\n     = build_function_type_list (long_long_unsigned_type_node,\n@@ -19182,8 +19157,8 @@ ix86_init_mmx_sse_builtins (void)\n \tcase V2SImode:\n \t  type = v2si_ftype_v2si_v2si;\n \t  break;\n-\tcase DImode:\n-\t  type = di_ftype_di_di;\n+\tcase V1DImode:\n+\t  type = v1di_ftype_v1di_v1di;\n \t  break;\n \n \tdefault:\n@@ -19275,16 +19250,25 @@ ix86_init_mmx_sse_builtins (void)\n \n   /* Add the remaining MMX insns with somewhat more complicated types.  */\n   def_builtin (OPTION_MASK_ISA_MMX, \"__builtin_ia32_emms\", void_ftype_void, IX86_BUILTIN_EMMS);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psllw\", v4hi_ftype_v4hi_di, IX86_BUILTIN_PSLLW);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_pslld\", v2si_ftype_v2si_di, IX86_BUILTIN_PSLLD);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psllq\", di_ftype_di_di, IX86_BUILTIN_PSLLQ);\n-\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrlw\", v4hi_ftype_v4hi_di, IX86_BUILTIN_PSRLW);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrld\", v2si_ftype_v2si_di, IX86_BUILTIN_PSRLD);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrlq\", di_ftype_di_di, IX86_BUILTIN_PSRLQ);\n \n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psraw\", v4hi_ftype_v4hi_di, IX86_BUILTIN_PSRAW);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrad\", v2si_ftype_v2si_di, IX86_BUILTIN_PSRAD);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psllwi\", v4hi_ftype_v4hi_int, IX86_BUILTIN_PSLLWI);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_pslldi\", v2si_ftype_v2si_int, IX86_BUILTIN_PSLLDI);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psllqi\", v1di_ftype_v1di_int, IX86_BUILTIN_PSLLQI);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psllw\", v4hi_ftype_v4hi_v4hi, IX86_BUILTIN_PSLLW);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_pslld\", v2si_ftype_v2si_v2si, IX86_BUILTIN_PSLLD);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psllq\", v1di_ftype_v1di_v1di, IX86_BUILTIN_PSLLQ);\n+\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrlwi\", v4hi_ftype_v4hi_int, IX86_BUILTIN_PSRLWI);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrldi\", v2si_ftype_v2si_int, IX86_BUILTIN_PSRLDI);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrlqi\", v1di_ftype_v1di_int, IX86_BUILTIN_PSRLQI);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrlw\", v4hi_ftype_v4hi_v4hi, IX86_BUILTIN_PSRLW);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrld\", v2si_ftype_v2si_v2si, IX86_BUILTIN_PSRLD);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrlq\", v1di_ftype_v1di_v1di, IX86_BUILTIN_PSRLQ);\n+\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrawi\", v4hi_ftype_v4hi_int, IX86_BUILTIN_PSRAWI);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psradi\", v2si_ftype_v2si_int, IX86_BUILTIN_PSRADI);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psraw\", v4hi_ftype_v4hi_v4hi, IX86_BUILTIN_PSRAW);\n+  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrad\", v2si_ftype_v2si_v2si, IX86_BUILTIN_PSRAD);\n \n   def_builtin_const (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, \"__builtin_ia32_pshufw\", v4hi_ftype_v4hi_int, IX86_BUILTIN_PSHUFW);\n   def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_pmaddwd\", v2si_ftype_v4hi_v4hi, IX86_BUILTIN_PMADDWD);\n@@ -20829,6 +20813,39 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_insn (pat);\n       return target;\n \n+    case IX86_BUILTIN_PSLLW:\n+    case IX86_BUILTIN_PSLLWI:\n+      icode = CODE_FOR_mmx_ashlv4hi3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSLLD:\n+    case IX86_BUILTIN_PSLLDI:\n+      icode = CODE_FOR_mmx_ashlv2si3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSLLQ:\n+    case IX86_BUILTIN_PSLLQI:\n+      icode = CODE_FOR_mmx_ashlv1di3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSRAW:\n+    case IX86_BUILTIN_PSRAWI:\n+      icode = CODE_FOR_mmx_ashrv4hi3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSRAD:\n+    case IX86_BUILTIN_PSRADI:\n+      icode = CODE_FOR_mmx_ashrv2si3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSRLW:\n+    case IX86_BUILTIN_PSRLWI:\n+      icode = CODE_FOR_mmx_lshrv4hi3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSRLD:\n+    case IX86_BUILTIN_PSRLDI:\n+      icode = CODE_FOR_mmx_lshrv2si3;\n+      goto do_pshift;\n+    case IX86_BUILTIN_PSRLQ:\n+    case IX86_BUILTIN_PSRLQI:\n+      icode = CODE_FOR_mmx_lshrv1di3;\n+      goto do_pshift;\n+\n     case IX86_BUILTIN_PSLLW128:\n     case IX86_BUILTIN_PSLLWI128:\n       icode = CODE_FOR_ashlv8hi3;"}, {"sha": "98cb72ac9215979de6abc5067f74c67681fe067c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=10a97ae6f1f6e29beb258157ebaf04c54172bddb", "patch": "@@ -1120,8 +1120,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   ((MODE) == V2SFmode || (MODE) == SFmode)\n \n #define VALID_MMX_REG_MODE(MODE)\t\t\t\t\t\\\n-    ((MODE) == DImode || (MODE) == V8QImode || (MODE) == V4HImode\t\\\n-     || (MODE) == V2SImode || (MODE) == SImode)\n+  ((MODE == V1DImode) || (MODE) == DImode\t\t\t\t\\\n+   || (MODE) == V2SImode || (MODE) == SImode\t\t\t\t\\\n+   || (MODE) == V4HImode || (MODE) == V8QImode)\n \n /* ??? No autovectorization into MMX or 3DNOW until we can reliably\n    place emms and femms instructions.  */"}, {"sha": "eb942d60d9cc97a82de9eaecf7be2aa44955fe03", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=10a97ae6f1f6e29beb258157ebaf04c54172bddb", "patch": "@@ -95,7 +95,6 @@\n    (UNSPEC_RCP\t\t\t45)\n    (UNSPEC_RSQRT\t\t46)\n    (UNSPEC_SFENCE\t\t47)\n-   (UNSPEC_NOP\t\t\t48)\t; prevents combiner cleverness\n    (UNSPEC_PFRCP\t\t49)\n    (UNSPEC_PFRCPIT1\t\t40)\n    (UNSPEC_PFRCPIT2\t\t41)"}, {"sha": "94800ad688e3c33c43890608d80435cb6c813d7e", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=10a97ae6f1f6e29beb258157ebaf04c54172bddb", "patch": "@@ -42,6 +42,7 @@ typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));\n typedef int __v2si __attribute__ ((__vector_size__ (8)));\n typedef short __v4hi __attribute__ ((__vector_size__ (8)));\n typedef char __v8qi __attribute__ ((__vector_size__ (8)));\n+typedef long long __v1di __attribute__ ((__vector_size__ (8)));\n \n /* Empty the multimedia state.  */\n static __inline void __attribute__((__always_inline__, __artificial__))\n@@ -309,7 +310,7 @@ _m_paddd (__m64 __m1, __m64 __m2)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_add_si64 (__m64 __m1, __m64 __m2)\n {\n-  return (__m64) __builtin_ia32_paddq ((long long)__m1, (long long)__m2);\n+  return (__m64) __builtin_ia32_paddq ((__v1di)__m1, (__v1di)__m2);\n }\n #endif\n \n@@ -413,7 +414,7 @@ _m_psubd (__m64 __m1, __m64 __m2)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_sub_si64 (__m64 __m1, __m64 __m2)\n {\n-  return (__m64) __builtin_ia32_psubq ((long long)__m1, (long long)__m2);\n+  return (__m64) __builtin_ia32_psubq ((__v1di)__m1, (__v1di)__m2);\n }\n #endif\n \n@@ -520,7 +521,7 @@ _m_pmullw (__m64 __m1, __m64 __m2)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_sll_pi16 (__m64 __m, __m64 __count)\n {\n-  return (__m64) __builtin_ia32_psllw ((__v4hi)__m, (long long)__count);\n+  return (__m64) __builtin_ia32_psllw ((__v4hi)__m, (__v4hi)__count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -532,7 +533,7 @@ _m_psllw (__m64 __m, __m64 __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_slli_pi16 (__m64 __m, int __count)\n {\n-  return (__m64) __builtin_ia32_psllw ((__v4hi)__m, __count);\n+  return (__m64) __builtin_ia32_psllwi ((__v4hi)__m, __count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -545,7 +546,7 @@ _m_psllwi (__m64 __m, int __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_sll_pi32 (__m64 __m, __m64 __count)\n {\n-  return (__m64) __builtin_ia32_pslld ((__v2si)__m, (long long)__count);\n+  return (__m64) __builtin_ia32_pslld ((__v2si)__m, (__v2si)__count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -557,7 +558,7 @@ _m_pslld (__m64 __m, __m64 __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_slli_pi32 (__m64 __m, int __count)\n {\n-  return (__m64) __builtin_ia32_pslld ((__v2si)__m, __count);\n+  return (__m64) __builtin_ia32_pslldi ((__v2si)__m, __count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -570,7 +571,7 @@ _m_pslldi (__m64 __m, int __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_sll_si64 (__m64 __m, __m64 __count)\n {\n-  return (__m64) __builtin_ia32_psllq ((long long)__m, (long long)__count);\n+  return (__m64) __builtin_ia32_psllq ((__v1di)__m, (__v1di)__count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -582,7 +583,7 @@ _m_psllq (__m64 __m, __m64 __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_slli_si64 (__m64 __m, int __count)\n {\n-  return (__m64) __builtin_ia32_psllq ((long long)__m, (long long)__count);\n+  return (__m64) __builtin_ia32_psllqi ((__v1di)__m, __count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -595,7 +596,7 @@ _m_psllqi (__m64 __m, int __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_sra_pi16 (__m64 __m, __m64 __count)\n {\n-  return (__m64) __builtin_ia32_psraw ((__v4hi)__m, (long long)__count);\n+  return (__m64) __builtin_ia32_psraw ((__v4hi)__m, (__v4hi)__count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -607,7 +608,7 @@ _m_psraw (__m64 __m, __m64 __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_srai_pi16 (__m64 __m, int __count)\n {\n-  return (__m64) __builtin_ia32_psraw ((__v4hi)__m, __count);\n+  return (__m64) __builtin_ia32_psrawi ((__v4hi)__m, __count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -620,7 +621,7 @@ _m_psrawi (__m64 __m, int __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_sra_pi32 (__m64 __m, __m64 __count)\n {\n-  return (__m64) __builtin_ia32_psrad ((__v2si)__m, (long long)__count);\n+  return (__m64) __builtin_ia32_psrad ((__v2si)__m, (__v2si)__count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -632,7 +633,7 @@ _m_psrad (__m64 __m, __m64 __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_srai_pi32 (__m64 __m, int __count)\n {\n-  return (__m64) __builtin_ia32_psrad ((__v2si)__m, __count);\n+  return (__m64) __builtin_ia32_psradi ((__v2si)__m, __count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -645,7 +646,7 @@ _m_psradi (__m64 __m, int __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_srl_pi16 (__m64 __m, __m64 __count)\n {\n-  return (__m64) __builtin_ia32_psrlw ((__v4hi)__m, (long long)__count);\n+  return (__m64) __builtin_ia32_psrlw ((__v4hi)__m, (__v4hi)__count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -657,7 +658,7 @@ _m_psrlw (__m64 __m, __m64 __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_srli_pi16 (__m64 __m, int __count)\n {\n-  return (__m64) __builtin_ia32_psrlw ((__v4hi)__m, __count);\n+  return (__m64) __builtin_ia32_psrlwi ((__v4hi)__m, __count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -670,7 +671,7 @@ _m_psrlwi (__m64 __m, int __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_srl_pi32 (__m64 __m, __m64 __count)\n {\n-  return (__m64) __builtin_ia32_psrld ((__v2si)__m, (long long)__count);\n+  return (__m64) __builtin_ia32_psrld ((__v2si)__m, (__v2si)__count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -682,7 +683,7 @@ _m_psrld (__m64 __m, __m64 __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_srli_pi32 (__m64 __m, int __count)\n {\n-  return (__m64) __builtin_ia32_psrld ((__v2si)__m, __count);\n+  return (__m64) __builtin_ia32_psrldi ((__v2si)__m, __count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -695,7 +696,7 @@ _m_psrldi (__m64 __m, int __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_srl_si64 (__m64 __m, __m64 __count)\n {\n-  return (__m64) __builtin_ia32_psrlq ((long long)__m, (long long)__count);\n+  return (__m64) __builtin_ia32_psrlq ((__v1di)__m, (__v1di)__count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n@@ -707,7 +708,7 @@ _m_psrlq (__m64 __m, __m64 __count)\n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_srli_si64 (__m64 __m, int __count)\n {\n-  return (__m64) __builtin_ia32_psrlq ((long long)__m, (long long)__count);\n+  return (__m64) __builtin_ia32_psrlqi ((__v1di)__m, __count);\n }\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))"}, {"sha": "1d2a41dd114725d93ebe9ce4cad34b5aa5756f63", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 30, "deletions": 71, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=10a97ae6f1f6e29beb258157ebaf04c54172bddb", "patch": "@@ -32,16 +32,18 @@\n \n ;; 8 byte integral modes handled by MMX (and by extension, SSE)\n (define_mode_iterator MMXMODEI [V8QI V4HI V2SI])\n+(define_mode_iterator MMXMODEI8 [V8QI V4HI V2SI V1DI])\n \n ;; All 8-byte vector modes handled by MMX\n-(define_mode_iterator MMXMODE [V8QI V4HI V2SI V2SF])\n+(define_mode_iterator MMXMODE [V8QI V4HI V2SI V1DI V2SF])\n \n ;; Mix-n-match\n (define_mode_iterator MMXMODE12 [V8QI V4HI])\n (define_mode_iterator MMXMODE24 [V4HI V2SI])\n+(define_mode_iterator MMXMODE248 [V4HI V2SI V1DI])\n \n ;; Mapping from integer vector mode to mnemonic suffix\n-(define_mode_attr mmxvecsize [(V8QI \"b\") (V4HI \"w\") (V2SI \"d\") (DI \"q\")])\n+(define_mode_attr mmxvecsize [(V8QI \"b\") (V4HI \"w\") (V2SI \"d\") (V1DI \"q\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n@@ -53,18 +55,18 @@\n ;; This is essential for maintaining stable calling conventions.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"\"))]\n+  [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:MMXMODEI8 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_move (<MODE>mode, operands);\n   DONE;\n })\n \n (define_insn \"*mov<mode>_internal_rex64\"\n-  [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n+  [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n \t\t\t\t\"=rm,r,!y,!y ,m ,!y,Y2,x,x ,m,r,x\")\n-\t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n+\t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n \t\t\t\t\"Cr ,m,C ,!ym,!y,Y2,!y,C,xm,x,x,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -86,9 +88,9 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*mov<mode>_internal\"\n-  [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n+  [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n \t\t\t\"=!y,!y ,m ,!y ,*Y2,*Y2,*Y2 ,m  ,*x,*x,*x,m ,?r ,?m\")\n-\t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n+\t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n \t\t\t\"C  ,!ym,!y,*Y2,!y ,C  ,*Y2m,*Y2,C ,*x,m ,*x,irm,r\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -557,26 +559,16 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_insn \"mmx_add<mode>3\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n-        (plus:MMXMODEI\n-\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  [(set (match_operand:MMXMODEI8 0 \"register_operand\" \"=y\")\n+        (plus:MMXMODEI8\n+\t  (match_operand:MMXMODEI8 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:MMXMODEI8 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"(TARGET_MMX || (TARGET_SSE2 && <MODE>mode == V1DImode))\n+   && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n   \"padd<mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"mmx_adddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t [(plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n-\t UNSPEC_NOP))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (PLUS, DImode, operands)\"\n-  \"paddq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n (define_insn \"mmx_ssadd<mode>3\"\n   [(set (match_operand:MMXMODE12 0 \"register_operand\" \"=y\")\n         (ss_plus:MMXMODE12\n@@ -598,26 +590,15 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"mmx_sub<mode>3\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n-        (minus:MMXMODEI\n-\t  (match_operand:MMXMODEI 1 \"register_operand\" \"0\")\n-\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n+  [(set (match_operand:MMXMODEI8 0 \"register_operand\" \"=y\")\n+        (minus:MMXMODEI8\n+\t  (match_operand:MMXMODEI8 1 \"register_operand\" \"0\")\n+\t  (match_operand:MMXMODEI8 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"(TARGET_MMX || (TARGET_SSE2 && <MODE>mode == V1DImode))\"\n   \"psub<mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"mmx_subdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t [(minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n-\t UNSPEC_NOP))]\n-  \"TARGET_SSE2\"\n-  \"psubq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n (define_insn \"mmx_sssub<mode>3\"\n   [(set (match_operand:MMXMODE12 0 \"register_operand\" \"=y\")\n         (ss_minus:MMXMODE12\n@@ -778,54 +759,32 @@\n   [(set (match_operand:MMXMODE24 0 \"register_operand\" \"=y\")\n         (ashiftrt:MMXMODE24\n \t  (match_operand:MMXMODE24 1 \"register_operand\" \"0\")\n-\t  (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"yN\")))]\n   \"TARGET_MMX\"\n   \"psra<mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"mmx_lshr<mode>3\"\n-  [(set (match_operand:MMXMODE24 0 \"register_operand\" \"=y\")\n-        (lshiftrt:MMXMODE24\n-\t  (match_operand:MMXMODE24 1 \"register_operand\" \"0\")\n-\t  (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n+  [(set (match_operand:MMXMODE248 0 \"register_operand\" \"=y\")\n+        (lshiftrt:MMXMODE248\n+\t  (match_operand:MMXMODE248 1 \"register_operand\" \"0\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"yN\")))]\n   \"TARGET_MMX\"\n   \"psrl<mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"mmx_lshrdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t  [(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:DI 2 \"nonmemory_operand\" \"yi\"))]\n-\t  UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"psrlq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n (define_insn \"mmx_ashl<mode>3\"\n-  [(set (match_operand:MMXMODE24 0 \"register_operand\" \"=y\")\n-        (ashift:MMXMODE24\n-\t  (match_operand:MMXMODE24 1 \"register_operand\" \"0\")\n-\t  (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n+  [(set (match_operand:MMXMODE248 0 \"register_operand\" \"=y\")\n+        (ashift:MMXMODE248\n+\t  (match_operand:MMXMODE248 1 \"register_operand\" \"0\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"yN\")))]\n   \"TARGET_MMX\"\n   \"psll<mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"mmx_ashldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t [(ashift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:DI 2 \"nonmemory_operand\" \"yi\"))]\n-\t UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"psllq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral comparisons"}, {"sha": "9dbdc8ea9472aa8ca00ad304b03268aea34106e4", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a97ae6f1f6e29beb258157ebaf04c54172bddb/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=10a97ae6f1f6e29beb258157ebaf04c54172bddb", "patch": "@@ -7476,6 +7476,24 @@ v2si __builtin_ia32_punpckldq (v2si, v2si)\n v8qi __builtin_ia32_packsswb (v4hi, v4hi)\n v4hi __builtin_ia32_packssdw (v2si, v2si)\n v8qi __builtin_ia32_packuswb (v4hi, v4hi)\n+\n+v8hi __builtin_ia32_psllw (v4hi, v4hi)\n+v4si __builtin_ia32_pslld (v2si, v2si)\n+v2di __builtin_ia32_psllq (v1di, v1di)\n+v8hi __builtin_ia32_psrlw (v8hi, v2si)\n+v4si __builtin_ia32_psrld (v4si, v2si)\n+v2di __builtin_ia32_psrlq (v1di, v1di)\n+v8hi __builtin_ia32_psraw (v4hi, v4hi)\n+v4si __builtin_ia32_psrad (v2si, v2si)\n+v8hi __builtin_ia32_psllwi (v4hi, int)\n+v4si __builtin_ia32_pslldi (v2si, int)\n+v2di __builtin_ia32_psllqi (v1di, int)\n+v8hi __builtin_ia32_psrlwi (v4hi, int)\n+v4si __builtin_ia32_psrldi (v2si, int)\n+v2di __builtin_ia32_psrlqi (v1di, int)\n+v8hi __builtin_ia32_psrawi (v4hi, int)\n+v4si __builtin_ia32_psradi (v2si, int)\n+\n @end smallexample\n \n The following built-in functions are made available either with"}]}