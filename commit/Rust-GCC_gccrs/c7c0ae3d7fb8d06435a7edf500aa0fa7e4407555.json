{"sha": "c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdjMGFlM2Q3ZmI4ZDA2NDM1YTdlZGY1MDBhYTBmYTdlNDQwNzU1NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-02-14T10:12:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-02-14T10:12:20Z"}, "message": "* regclass.c (init_reg_sets_1): Revert last two changes.\n\nFrom-SVN: r39669", "tree": {"sha": "4f79f8159691ef0eaa1c82d861d4f8ad7039433e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f79f8159691ef0eaa1c82d861d4f8ad7039433e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555/comments", "author": null, "committer": null, "parents": [{"sha": "d0ab76243b1d7c0c8fed61ccc9b6835216a90e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ab76243b1d7c0c8fed61ccc9b6835216a90e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ab76243b1d7c0c8fed61ccc9b6835216a90e5f"}], "stats": {"total": 101, "additions": 36, "deletions": 65}, "files": [{"sha": "09c8a733cb5ff18ee4b084a3b696baae4d8cf6d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555", "patch": "@@ -1,3 +1,7 @@\n+2001-02-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* regclass.c (init_reg_sets_1): Revert last two changes.\n+\n 2001-02-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* stor-layout.c (is_pending_size, put_pending_size): New functions."}, {"sha": "610de28f1b4dd4033470360c25da04b68bcdd179", "filename": "gcc/regclass.c", "status": "modified", "additions": 32, "deletions": 65, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=c7c0ae3d7fb8d06435a7edf500aa0fa7e4407555", "patch": "@@ -288,8 +288,6 @@ init_reg_sets_1 ()\n {\n   register unsigned int i, j;\n   register unsigned int /* enum machine_mode */ m;\n-  char contains_reg_of_mode [N_REG_CLASSES] [MAX_MACHINE_MODE];\n-  char allocatable_regs_of_mode [MAX_MACHINE_MODE];\n \n   /* This macro allows the fixed or call-used registers\n      and the register classes to depend on target flags.  */\n@@ -425,75 +423,44 @@ init_reg_sets_1 ()\n       if (CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (i)))\n \tSET_HARD_REG_BIT (losing_caller_save_reg_set, i);\n     }\n-  memset (contains_reg_of_mode, 0, sizeof (contains_reg_of_mode));\n-  memset (allocatable_regs_of_mode, 0, sizeof (allocatable_regs_of_mode));\n-  for (m = 0; m < MAX_MACHINE_MODE; m++)\n-    for (i = 0; i < N_REG_CLASSES; i++)\n-      for (j = 0; j < FIRST_PSEUDO_REGISTER; j++)\n-\tif (!fixed_regs [j] && TEST_HARD_REG_BIT (reg_class_contents[i], j)\n-\t    && HARD_REGNO_MODE_OK (j, m))\n-\t   {\n-\t     contains_reg_of_mode [i][m] = 1;\n-\t     allocatable_regs_of_mode [m] = 1;\n-\t     break;\n-\t   }\n \n   /* Initialize the move cost table.  Find every subset of each class\n      and take the maximum cost of moving any subset to any other.  */\n \n   for (m = 0; m < MAX_MACHINE_MODE; m++)\n-    if (allocatable_regs_of_mode [m])\n-      {\n-\tfor (i = 0; i < N_REG_CLASSES; i++)\n-\t  if (contains_reg_of_mode [i][m])\n-\t    for (j = 0; j < N_REG_CLASSES; j++)\n-\t      {\n-\t\tint cost;\n-\t\tenum reg_class *p1, *p2;\n-\n-\t\tif (!contains_reg_of_mode [j][m])\n-\t\t  {\n-\t\t    move_cost[m][i][j] = 65536;\n-\t\t    may_move_in_cost[m][i][j] = 65536;\n-\t\t    may_move_out_cost[m][i][j] = 65536;\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    cost = i == j ? 2 : REGISTER_MOVE_COST (m, i, j);\n-\n-\t\t    for (p2 = &reg_class_subclasses[j][0];\n-\t\t         *p2 != LIM_REG_CLASSES;\n-\t\t\t p2++)\n-\t\t      if (*p2 != i && contains_reg_of_mode [*p1][m])\n-\t\t\tcost = MAX (cost, move_cost [m][i][*p2]);\n-\n-\t\t    for (p1 = &reg_class_subclasses[i][0];\n-\t\t       \t *p1 != LIM_REG_CLASSES;\n-\t\t\t p1++)\n-\t\t      if (*p1 != j && contains_reg_of_mode [*p1][m])\n-\t\t\tcost = MAX (cost, move_cost [m][*p1][j]);\n-\n-\t\t    move_cost[m][i][j] = cost;\n-\n-\t\t    if (reg_class_subset_p (i, j))\n-\t\t      may_move_in_cost[m][i][j] = 0;\n-\t\t    else\n-\t\t      may_move_in_cost[m][i][j] = cost;\n-\n-\t\t    if (reg_class_subset_p (j, i))\n-\t\t      may_move_out_cost[m][i][j] = 0;\n-\t\t    else\n-\t\t      may_move_out_cost[m][i][j] = cost;\n-\t\t  }\n-\t      }\n+    for (i = 0; i < N_REG_CLASSES; i++)\n+      for (j = 0; j < N_REG_CLASSES; j++)\n+\t{\n+\t  int cost = i == j ? 2 : REGISTER_MOVE_COST (m, i, j);\n+\t  enum reg_class *p1, *p2;\n+\n+\t  for (p2 = &reg_class_subclasses[j][0]; *p2 != LIM_REG_CLASSES; p2++)\n+\t    if (*p2 != i)\n+\t      cost = MAX (cost, REGISTER_MOVE_COST (m, i, *p2));\n+\n+\t  for (p1 = &reg_class_subclasses[i][0]; *p1 != LIM_REG_CLASSES; p1++)\n+\t    {\n+\t      if (*p1 != j)\n+\t\tcost = MAX (cost, REGISTER_MOVE_COST (m, *p1, j));\n+\n+\t      for (p2 = &reg_class_subclasses[j][0];\n+\t\t   *p2 != LIM_REG_CLASSES; p2++)\n+\t\tif (*p1 != *p2)\n+\t\t  cost = MAX (cost, REGISTER_MOVE_COST (m, *p1, *p2));\n+\t    }\n+\n+\t  move_cost[m][i][j] = cost;\n+\n+\t  if (reg_class_subset_p (i, j))\n+\t    may_move_in_cost[m][i][j] = 0;\n \t  else\n-\t    for (j = 0; j < N_REG_CLASSES; j++)\n-\t      {\n-\t\tmove_cost[m][i][j] = 65536;\n-\t\tmay_move_in_cost[m][i][j] = 65536;\n-\t\tmay_move_out_cost[m][i][j] = 65536;\n-\t      }\n-      }\n+\t    may_move_in_cost[m][i][j] = cost;\n+\n+\t  if (reg_class_subset_p (j, i))\n+\t    may_move_out_cost[m][i][j] = 0;\n+\t  else\n+\t    may_move_out_cost[m][i][j] = cost;\n+\t}\n \n #ifdef CLASS_CANNOT_CHANGE_MODE\n   {"}]}