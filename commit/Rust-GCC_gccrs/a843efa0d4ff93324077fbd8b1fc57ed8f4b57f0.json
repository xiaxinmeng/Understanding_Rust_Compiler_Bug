{"sha": "a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg0M2VmYTBkNGZmOTMzMjQwNzdmYmQ4YjFmYzU3ZWQ4ZjRiNTdmMA==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gnu.org", "date": "1998-05-19T10:52:03Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-05-19T10:52:03Z"}, "message": "Update to Netlib version of 1998-04-20\n\nFrom-SVN: r19877", "tree": {"sha": "c4e8e02849cc5a16fa5bc00db65b9b2aa8561eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4e8e02849cc5a16fa5bc00db65b9b2aa8561eaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/comments", "author": null, "committer": null, "parents": [{"sha": "deec641e31ba6af1cf67f72546486d5b8c37ee69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deec641e31ba6af1cf67f72546486d5b8c37ee69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deec641e31ba6af1cf67f72546486d5b8c37ee69"}], "stats": {"total": 1002, "additions": 527, "deletions": 475}, "files": [{"sha": "1a1dd5a60f75b8e6feafd8bbb81c529bfbac5f79", "filename": "libf2c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FChangeLog?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -1,3 +1,17 @@\n+Fri May  1 11:57:45 1998  Craig Burley  <burley@gnu.org>\n+\n+\tUpdate to Netlib version of 1998-04-20:\n+\t* libF77/dtime_.c, libF77/etime_.c, libF77/h_dnnt.c,\n+\tlibF77/h_nint.c, libF77/i_dnnt.c, libF77/i_nint.c,\n+\tlibF77/main.c, libF77/s_paus.c, libF77/signal1.h0,\n+\tlibI77/backspace.c, libI77/close.c, libI77/dfe.c,\n+\tlibI77/endfile.c, libI77/err.c, libI77/fio.h,\n+\tlibI77/iio.c, libI77/ilnw.c, libI77/lread.c,\n+\tlibI77/lwrite.c, libI77/open.c, libI77/rawio.h,\n+\tlibI77/sfe.c, libI77/util.c, libI77/wrtfmt.c,\n+\tlibI77/wsfe.c, libI77/wsle.c, libI77/wsne.c:\n+\tSee changes.netlib for info.\n+\n Sun Apr 26 09:13:41 1998  Craig Burley  <burley@gnu.org>\n \n \t* libU77/hostnm_.c (G77_hostnm_0): Fix off-by-one error"}, {"sha": "ac825279db43f9ffa3ade9680385a979a8424247", "filename": "libf2c/changes.netlib", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2Fchanges.netlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2Fchanges.netlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2Fchanges.netlib?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -2848,3 +2848,57 @@ invisible on other machines.\n \n Sun Sep 21 22:05:19 EDT 1997\n   libf77: [de]time_.c (Unix systems only): change return type to double.\n+\n+Thu Dec  4 22:10:09 EST 1997\n+  Fix bug with handling large blocks of comments (over 4k); parts of the\n+second and subsequent blocks were likely to be lost (not copied into\n+comments in the resulting C).  Allow comment lines to be longer before\n+breaking them.\n+\n+Mon Jan 19 17:19:27 EST 1998\n+  makefile: change the rule for making gram.c to one for making gram1.c;\n+henceforth, asking netlib to \"send all from f2c/src\" will bring you a\n+working gram.c.  Nowadays there are simply too many broken versions of\n+yacc floating around.\n+  libi77: backspace.c: for b->ufmt==0, change sizeof(int) to\n+sizeof(uiolen).  On machines where this would make a difference, it is\n+best for portability to compile libI77 with -DUIOLEN_int, which will\n+render the change invisible.\n+\n+Tue Feb 24 08:35:33 EST 1998\n+  makefile: remove gram.c from the \"make clean\" rule.\n+\n+Wed Feb 25 08:29:39 EST 1998\n+  makefile: change CFLAGS assignment to -O; add \"veryclean\" rule.\n+\n+Wed Mar  4 13:13:21 EST 1998\n+  libi77: open.c: fix glitch in comparing file names under\n+-DNON_UNIX_STDIO.\n+\n+Mon Mar  9 23:56:56 EST 1998\n+  putpcc.c: omit an unnecessary temporary variable in computing\n+(expr)**3.\n+  libf77, libi77: minor tweaks to make some C++ compilers happy;\n+Version.c not changed.\n+\n+Wed Mar 18 18:08:47 EST 1998\n+  libf77: minor tweaks to [ed]time_.c; Version.c not changed.\n+  libi77: endfile.c, open.c: acquire temporary files from tmpfile(),\n+unless compiled with -DNON_ANSI_STDIO, which uses mktemp().\n+New buffering scheme independent of NON_UNIX_STDIO for handling T\n+format items.  Now -DNON_UNIX_STDIO is no longer be necessary for\n+Linux, and libf2c no longer causes stderr to be buffered -- the former\n+setbuf or setvbuf call for stderr was to make T format items work.\n+open.c: use the Posix access() function to check existence or\n+nonexistence of files, except under -DNON_POSIX_STDIO, where trial\n+fopen calls are used.  In open.c, fix botch in changes of 19980304.\n+  libf2c.zip: the PC makefiles are now set for NT/W95, with comments\n+about changes for DOS.\n+\n+Fri Apr  3 17:22:12 EST 1998\n+  Adjust fix of 19960913 to again permit substring notation on\n+character variables in data statements.\n+\n+Sun Apr  5 19:26:50 EDT 1998\n+  libi77: wsfe.c: make $ format item work: this was lost in the changes\n+of 17 March 1998."}, {"sha": "2460a81b3685b5b926455e3a0959e392e8700a4b", "filename": "libf2c/libF77/Version.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2FVersion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2FVersion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2FVersion.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -3,7 +3,7 @@ static char junk[] = \"\\n@(#)LIBF77 VERSION 19970919\\n\";\n /*\n */\n \n-char __G77_LIBF77_VERSION__[] = \"0.5.22\";\n+char __G77_LIBF77_VERSION__[] = \"0.5.23-19980501\";\n \n /*\n 2.00\t11 June 1980.  File version.c added to library."}, {"sha": "95db94f4874b395b11970ecb666727b6b6017287", "filename": "libf2c/libF77/dtime_.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fdtime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fdtime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fdtime_.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -1,5 +1,7 @@\n #include \"time.h\"\n #ifndef USE_CLOCK\n+#define _INCLUDE_POSIX_SOURCE\t/* for HP-UX */\n+#define _INCLUDE_XOPEN_SOURCE\t/* for HP-UX */\n #include \"sys/types.h\"\n #include \"sys/times.h\"\n #endif"}, {"sha": "7ed3fce6b271cd6123ed137d0b898ffc8b093d2a", "filename": "libf2c/libF77/etime_.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fetime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fetime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fetime_.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -1,5 +1,7 @@\n #include \"time.h\"\n #ifndef USE_CLOCK\n+#define _INCLUDE_POSIX_SOURCE\t/* for HP-UX */\n+#define _INCLUDE_XOPEN_SOURCE\t/* for HP-UX */\n #include \"sys/types.h\"\n #include \"sys/times.h\"\n #endif"}, {"sha": "005ac6fc41245a322793062e5ff59aca320bae6d", "filename": "libf2c/libF77/h_dnnt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fh_dnnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fh_dnnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fh_dnnt.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -9,6 +9,5 @@ shortint h_dnnt(x) doublereal *x;\n shortint h_dnnt(doublereal *x)\n #endif\n {\n-return( (*x)>=0 ?\n-\tfloor(*x + .5) : -floor(.5 - *x) );\n+return (shortint)(*x >= 0. ? floor(*x + .5) : -floor(.5 - *x));\n }"}, {"sha": "6b8dc29b1542c3f0adbd846e5c2ca27060799a42", "filename": "libf2c/libF77/h_nint.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fh_nint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fh_nint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fh_nint.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -9,6 +9,5 @@ shortint h_nint(x) real *x;\n shortint h_nint(real *x)\n #endif\n {\n-return( (*x)>=0 ?\n-\tfloor(*x + .5) : -floor(.5 - *x) );\n+return (shortint)(*x >= 0 ? floor(*x + .5) : -floor(.5 - *x));\n }"}, {"sha": "4ede56ac35596db45333866e663f51c344b34f49", "filename": "libf2c/libF77/i_dnnt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fi_dnnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fi_dnnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fi_dnnt.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -9,6 +9,5 @@ integer i_dnnt(x) doublereal *x;\n integer i_dnnt(doublereal *x)\n #endif\n {\n-return( (*x)>=0 ?\n-\tfloor(*x + .5) : -floor(.5 - *x) );\n+return (integer)(*x >= 0. ? floor(*x + .5) : -floor(.5 - *x));\n }"}, {"sha": "411ce32821e3e1241226cb0e6df1915fadba5b80", "filename": "libf2c/libF77/i_nint.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fi_nint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fi_nint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fi_nint.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -9,6 +9,5 @@ integer i_nint(x) real *x;\n integer i_nint(real *x)\n #endif\n {\n-return( (*x)>=0 ?\n-\tfloor(*x + .5) : -floor(.5 - *x) );\n+return (integer)(*x >= 0 ? floor(*x + .5) : -floor(.5 - *x));\n }"}, {"sha": "343d7bdff1c7727c585ddad580651fa5f3d6b257", "filename": "libf2c/libF77/main.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fmain.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -50,38 +50,44 @@ extern int MAIN__(void);\n #define Int int\n #endif\n \n-static VOID sigfdie(Int n)\n+static VOID sigfdie(Sigarg)\n {\n+Use_Sigarg;\n sig_die(\"Floating Exception\", 1);\n }\n \n \n-static VOID sigidie(Int n)\n+static VOID sigidie(Sigarg)\n {\n+Use_Sigarg;\n sig_die(\"IOT Trap\", 1);\n }\n \n #ifdef SIGQUIT\n-static VOID sigqdie(Int n)\n+static VOID sigqdie(Sigarg)\n {\n+Use_Sigarg;\n sig_die(\"Quit signal\", 1);\n }\n #endif\n \n \n-static VOID sigindie(Int n)\n+static VOID sigindie(Sigarg)\n {\n+Use_Sigarg;\n sig_die(\"Interrupt\", 0);\n }\n \n-static VOID sigtdie(Int n)\n+static VOID sigtdie(Sigarg)\n {\n+Use_Sigarg;\n sig_die(\"Killed\", 0);\n }\n \n #ifdef SIGTRAP\n-static VOID sigtrdie(Int n)\n+static VOID sigtrdie(Sigarg)\n {\n+Use_Sigarg;\n sig_die(\"Trace trap\", 1);\n }\n #endif"}, {"sha": "a7733a533620109671f7e0b7a72c838406c61f49", "filename": "libf2c/libF77/s_paus.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fs_paus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fs_paus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fs_paus.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -2,6 +2,7 @@\n #include \"f2c.h\"\n #define PAUSESIG 15\n \n+#include \"signal1.h\"\n #ifdef KR_headers\n #define Void /* void */\n #define Int /* int */\n@@ -12,7 +13,6 @@\n #undef min\n #undef max\n #include <stdlib.h>\n-#include \"signal1.h\"\n #ifdef __cplusplus\n extern \"C\" {\n #endif\n@@ -22,8 +22,8 @@ extern int getpid(void), isatty(int), pause(void);\n extern VOID f_exit(Void);\n \n  static VOID\n-waitpause(Int n)\n-{\tn = n; /* shut up compiler warning */\n+waitpause(Sigarg)\n+{\tUse_Sigarg;\n \treturn;\n \t}\n "}, {"sha": "662cae450dc4cedec2d43e991ad828cfa71981e9", "filename": "libf2c/libF77/signal1.h0", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fsignal1.h0", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibF77%2Fsignal1.h0", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fsignal1.h0?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -12,8 +12,12 @@\n #ifdef KR_headers\n #define Sigarg_t\n #else\n+#ifdef __cplusplus\n+#define Sigarg_t ...\n+#else\n #define Sigarg_t int\n #endif\n+#endif\n #endif /*Sigarg_t*/\n \n #ifdef USE_SIG_PF\t/* compile with -DUSE_SIG_PF under IRIX */\n@@ -23,3 +27,11 @@ typedef Sigret_t (*sig_pf)(Sigarg_t);\n #endif\n \n #define signal1(a,b) signal(a,(sig_pf)b)\n+\n+#ifdef __cplusplus\n+#define Sigarg ...\n+#define Use_Sigarg\n+#else\n+#define Sigarg Int n\n+#define Use_Sigarg n = n\t/* shut up compiler warning */\n+#endif"}, {"sha": "0cdeb88ae99b1f8f56c7bf0aa2affa7549dced26", "filename": "libf2c/libI77/Version.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2FVersion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2FVersion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2FVersion.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -1,9 +1,9 @@\n-static char junk[] = \"\\n@(#) LIBI77 VERSION pjw,dmg-mods 19970916\\n\";\n+static char junk[] = \"\\n@(#) LIBI77 VERSION pjw,dmg-mods 19980405\\n\";\n \n /*\n */\n \n-char __G77_LIBI77_VERSION__[] = \"0.5.22\";\n+char __G77_LIBI77_VERSION__[] = \"0.5.23-19980502\";\n \n /*\n 2.01\t$ format added\n@@ -267,6 +267,24 @@ wrtfmt.c:\n /* 16 Sept. 1997:fmt.[ch] rdfmt.c wrtfmt.c: tweak struct syl for machines\n \t\t with 64-bit pointers and 32-bit ints that did not 64-bit\n \t\t align struct syl (e.g., Linux on the DEC Alpha). */\n+/* 19 Jan. 1998: backspace.c: for b->ufmt==0, change sizeof(int) to\n+\t\t sizeof(uiolen).  On machines where this would make a\n+\t\t difference, it is best for portability to compile libI77 with\n+\t\t -DUIOLEN_int (which will render the change invisible). */\n+/* 4 March 1998: open.c: fix glitch in comparing file names under\n+\t\t-DNON_UNIX_STDIO */\n+/* 17 March 1998: endfile.c, open.c: acquire temporary files from tmpfile(),\n+\t\t unless compiled with -DNON_ANSI_STDIO, which uses mktemp().\n+\t\t New buffering scheme independent of NON_UNIX_STDIO for\n+\t\t handling T format items.  Now -DNON_UNIX_STDIO is no\n+\t\t longer be necessary for Linux, and libf2c no longer\n+\t\t causes stderr to be buffered -- the former setbuf or\n+\t\t setvbuf call for stderr was to make T format items work.\n+\t\t open.c: use the Posix access() function to check existence\n+\t\t or nonexistence of files, except under -DNON_POSIX_STDIO,\n+\t\t where trial fopen calls are used. */\n+/* 5 April 1998: wsfe.c: make $ format item work: this was lost in the\n+\t\t changes of 17 March 1998. */\n \n \n "}, {"sha": "8456a7f8c6f1b39e30df332ff3ede1990b723c5c", "filename": "libf2c/libI77/backspace.c", "status": "modified", "additions": 30, "deletions": 60, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fbackspace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fbackspace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fbackspace.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -7,21 +7,17 @@ integer f_back(a) alist *a;\n integer f_back(alist *a)\n #endif\n {\tunit *b;\n-\tint i, ndec;\n+\tlong v, w, x, y, z;\n \tuiolen n;\n-#if defined (MSDOS) && !defined (GO32)\n-\tint j, k;\n-\tlong w, z;\n-#endif\n-\tlong x, y;\n-\tchar buf[32];\n+\tFILE *f;\n+\n \tif (f__init & 2)\n \t\tf__fatal (131, \"I/O recursion\");\n \tif(a->aunit >= MXUNIT || a->aunit < 0)\n \t\terr(a->aerr,101,\"backspace\");\n-\tb= &f__units[a->aunit];\n+\tf__curunit = b = &f__units[a->aunit];\t/* curunit for error messages */\n \tif(b->useek==0) err(a->aerr,106,\"backspace\");\n-\tif(b->ufd==NULL) {\n+\tif((f = b->ufd) == NULL) {\n \t\tfk_open(1, 1, a->aunit);\n \t\treturn(0);\n \t\t}\n@@ -36,67 +32,41 @@ integer f_back(alist *a)\n \t\t}\n \tif(b->url>0)\n \t{\n-\t\tx=ftell(b->ufd);\n+\t\tx=ftell(f);\n \t\ty = x % b->url;\n \t\tif(y == 0) x--;\n \t\tx /= b->url;\n \t\tx *= b->url;\n-\t\t(void) fseek(b->ufd,x,SEEK_SET);\n+\t\t(void) fseek(f,x,SEEK_SET);\n \t\treturn(0);\n \t}\n \n \tif(b->ufmt==0)\n-\t{\t(void) fseek(b->ufd,-(long)sizeof(uiolen),SEEK_CUR);\n-\t\t(void) fread((char *)&n,sizeof(uiolen),1,b->ufd);\n-\t\t(void) fseek(b->ufd,-(long)n-2*sizeof(uiolen),SEEK_CUR);\n+\t{\tfseek(f,-(long)sizeof(uiolen),SEEK_CUR);\n+\t\tfread((char *)&n,sizeof(uiolen),1,f);\n+\t\tfseek(f,-(long)n-2*sizeof(uiolen),SEEK_CUR);\n \t\treturn(0);\n \t}\n-#if defined (MSDOS) && !defined (GO32)\n-\tw = -1;\n-#endif\n-\tfor(ndec = 1;; ndec = 0)\n-\t{\n-\t\ty = x = ftell(b->ufd);\n-\t\tif(x < sizeof(buf))\n-\t\t\tx = 0;\n-\t\telse\n-\t\t\tx -= sizeof(buf);\n-\t\t(void) fseek(b->ufd,x,SEEK_SET);\n-\t\tn=fread(buf,1,(size_t)(y-x), b->ufd);\n-\t\tfor(i = n - ndec; --i >= 0; )\n-\t\t{\n-\t\t\tif(buf[i]!='\\n') continue;\n-#if defined (MSDOS) && !defined (GO32)\n-\t\t\tfor(j = k = 0; j <= i; j++)\n-\t\t\t\tif (buf[j] == '\\n')\n-\t\t\t\t\tk++;\n-\t\t\tfseek(b->ufd,x,SEEK_SET);\n-\t\t\tfor(;;)\n-\t\t\t\tif (getc(b->ufd) == '\\n') {\n-\t\t\t\t\tif ((z = ftell(b->ufd)) >= y && ndec) {\n-\t\t\t\t\t\tif (w == -1)\n-\t\t\t\t\t\t\tgoto break2;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\tif (--k <= 0)\n-\t\t\t\t\t\treturn 0;\n-\t\t\t\t\tw = z;\n-\t\t\t\t\t}\n-\t\t\tfseek(b->ufd, w, SEEK_SET);\n-#else\n-\t\t\tfseek(b->ufd,(long)(i+1-n),SEEK_CUR);\n-#endif\n-\t\t\treturn(0);\n+\tw = x = ftell(f);\n+\tz = 0;\n+ loop:\n+\twhile(x) {\n+\t\tx -= x < 64 ? x : 64;\n+\t\tfseek(f,x,SEEK_SET);\n+\t\tfor(y = x; y < w; y++) {\n+\t\t\tif (getc(f) != '\\n')\n+\t\t\t\tcontinue;\n+\t\t\tv = ftell(f);\n+\t\t\tif (v == w) {\n+\t\t\t\tif (z)\n+\t\t\t\t\tgoto break2;\n+\t\t\t\tgoto loop;\n+\t\t\t\t}\n+\t\t\tz = v;\n+\t\t\t}\n+\t\terr(a->aerr,(EOF),\"backspace\");\n \t\t}\n-#if defined (MSDOS) && !defined (GO32)\n  break2:\n-#endif\n-\t\tif(x==0)\n-\t\t\t{\n-\t\t\t(void) fseek(b->ufd, 0L, SEEK_SET);\n-\t\t\treturn(0);\n-\t\t\t}\n-\t\telse if(n<=0) err(a->aerr,(EOF),\"backspace\");\n-\t\t(void) fseek(b->ufd, x, SEEK_SET);\n-\t}\n+\tfseek(f, z, SEEK_SET);\n+\treturn 0;\n }"}, {"sha": "bbc5bacb821d921f87c5048d546cb6830e71df0d", "filename": "libf2c/libI77/close.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fclose.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fclose.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fclose.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -33,11 +33,10 @@ integer f_clos(cllist *a)\n \tb= &f__units[a->cunit];\n \tif(b->ufd==NULL)\n \t\tgoto done;\n+\tif (b->uscrtch == 1)\n+\t\tgoto Delete;\n \tif (!a->csta)\n-\t\tif (b->uscrtch == 1)\n-\t\t\tgoto Delete;\n-\t\telse\n-\t\t\tgoto Keep;\n+\t\tgoto Keep;\n \tswitch(*a->csta) {\n \t\tdefault:\n \t \tKeep:\n@@ -53,8 +52,8 @@ integer f_clos(cllist *a)\n \t\tcase 'd':\n \t\tcase 'D':\n \t\tDelete:\n+\t\t\tfclose(b->ufd);\n \t\t\tif(b->ufnm) {\n-\t\t\t\tfclose(b->ufd);\n \t\t\t\tunlink(b->ufnm); /*SYSDEP*/\n \t\t\t\tfree(b->ufnm);\n \t\t\t\t}"}, {"sha": "3a9365923810a446e17c8a3d5a57bc4464c2dd5e", "filename": "libf2c/libI77/dfe.c", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fdfe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fdfe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fdfe.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -31,41 +31,30 @@ y_getc(Void)\n \t}\n \terr(f__elist->cierr,errno,\"readingd\");\n }\n-#ifdef KR_headers\n-y_putc(c)\n-#else\n-y_putc(int c)\n-#endif\n-{\n-\tf__recpos++;\n-\tif(f__recpos <= f__curunit->url || f__curunit->url==1)\n-\t\tputc(c,f__cf);\n-\telse\n-\t\terr(f__elist->cierr,110,\"dout\");\n-\treturn(0);\n-}\n+\n+ static int\n y_rev(Void)\n-{\t/*what about work done?*/\n-\tif(f__curunit->url==1 || f__recpos==f__curunit->url)\n-\t\treturn(0);\n-\twhile(f__recpos<f__curunit->url)\n-\t\t(*f__putn)(' ');\n-\tf__recpos=0;\n+{\n+\tif (f__recpos < f__hiwater)\n+\t\tf__recpos = f__hiwater;\n+\tif (f__curunit->url > 1)\n+\t\twhile(f__recpos < f__curunit->url)\n+\t\t\t(*f__putn)(' ');\n+\tif (f__recpos)\n+\t\tf__putbuf(0);\n+\tf__recpos = 0;\n \treturn(0);\n }\n+\n+ static int\n y_err(Void)\n {\n \terr(f__elist->cierr, 110, \"dfe\");\n }\n \n+ static int\n y_newrec(Void)\n {\n-\tif(f__curunit->url == 1 || f__recpos == f__curunit->url) {\n-\t\tf__hiwater = f__recpos = f__cursor = 0;\n-\t\treturn(1);\n-\t}\n-\tif(f__hiwater > f__recpos)\n-\t\tf__recpos = f__hiwater;\n \ty_rev();\n \tf__hiwater = f__cursor = 0;\n \treturn(1);\n@@ -132,7 +121,7 @@ integer s_wdfe(cilist *a)\n \tif(n=c_dfe(a)) return(n);\n \tif(f__curunit->uwrt != 1 && f__nowwriting(f__curunit))\n \t\terr(a->cierr,errno,\"startwrt\");\n-\tf__putn = y_putc;\n+\tf__putn = x_putc;\n \tf__doed = w_ed;\n \tf__doned= w_ned;\n \tf__dorevert = y_err;\n@@ -146,11 +135,6 @@ integer s_wdfe(cilist *a)\n integer e_rdfe(Void)\n {\n \tf__init = 1;\n-\t(void) en_fio();\n+\ten_fio();\n \treturn(0);\n }\n-integer e_wdfe(Void)\n-{\n-\tf__init = 1;\n-\treturn en_fio();\n-}"}, {"sha": "0b785a95165d972b9a86c99b17737805d5586c48", "filename": "libf2c/libI77/endfile.c", "status": "modified", "additions": 20, "deletions": 94, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fendfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fendfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fendfile.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -1,10 +1,9 @@\n #include \"f2c.h\"\n #include \"fio.h\"\n-#include <sys/types.h>\n-#include \"rawio.h\"\n \n #ifdef KR_headers\n extern char *strcpy();\n+extern FILE *tmpfile();\n #else\n #undef abs\n #undef min\n@@ -13,19 +12,7 @@ extern char *strcpy();\n #include <string.h>\n #endif\n \n-#ifdef NON_UNIX_STDIO\n-#ifndef unlink\n-#define unlink remove\n-#endif\n-#else\n-#if defined (MSDOS) && !defined (GO32)\n-#include \"io.h\"\n-#endif\n-#endif\n-\n-#ifdef NON_UNIX_STDIO\n extern char *f__r_mode[], *f__w_mode[];\n-#endif\n \n #ifdef KR_headers\n integer f_end(a) alist *a;\n@@ -34,36 +21,31 @@ integer f_end(alist *a)\n #endif\n {\n \tunit *b;\n+\tFILE *tf;\n+\n \tif (f__init & 2)\n \t\tf__fatal (131, \"I/O recursion\");\n \tif(a->aunit>=MXUNIT || a->aunit<0) err(a->aerr,101,\"endfile\");\n \tb = &f__units[a->aunit];\n \tif(b->ufd==NULL) {\n \t\tchar nbuf[10];\n-\t\t(void) sprintf(nbuf,\"fort.%ld\",a->aunit);\n-#ifdef NON_UNIX_STDIO\n-\t\t{ FILE *tf;\n-\t\t\tif (tf = fopen(nbuf, f__w_mode[0]))\n-\t\t\t\tfclose(tf);\n-\t\t\t}\n-#else\n-\t\tclose(creat(nbuf, 0666));\n-#endif\n+\t\tsprintf(nbuf,\"fort.%ld\",a->aunit);\n+\t\tif (tf = fopen(nbuf, f__w_mode[0]))\n+\t\t\tfclose(tf);\n \t\treturn(0);\n \t\t}\n \tb->uend=1;\n \treturn(b->useek ? t_runc(a) : 0);\n }\n \n  static int\n-#ifdef NON_UNIX_STDIO\n #ifdef KR_headers\n-copy(from, len, to) char *from, *to; register long len;\n+copy(from, len, to) FILE *from, *to; register long len;\n #else\n copy(FILE *from, register long len, FILE *to)\n #endif\n {\n-\tint k, len1;\n+\tint len1;\n \tchar buf[BUFSIZ];\n \n \twhile(fread(buf, len1 = len > BUFSIZ ? BUFSIZ : (int)len, 1, from)) {\n@@ -74,36 +56,6 @@ copy(FILE *from, register long len, FILE *to)\n \t\t}\n \treturn 0;\n \t}\n-#else\n-#ifdef KR_headers\n-copy(from, len, to) char *from, *to; register long len;\n-#else\n-copy(char *from, register long len, char *to)\n-#endif\n-{\n-\tregister size_t n;\n-\tint k, rc = 0, tmp;\n-\tchar buf[BUFSIZ];\n-\n-\tif ((k = open(from, O_RDONLY)) < 0)\n-\t\treturn 1;\n-\tif ((tmp = creat(to,0666)) < 0)\n-\t\treturn 1;\n-\twhile((n = read(k, buf, (size_t) (len > BUFSIZ ? BUFSIZ : (int)len))) > 0) {\n-\t\tif (write(tmp, buf, n) != n)\n-\t\t\t{ rc = 1; break; }\n-\t\tif ((len -= n) <= 0)\n-\t\t\tbreak;\n-\t\t}\n-\tclose(k);\n-\tclose(tmp);\n-\treturn n < 0 ? 1 : rc;\n-\t}\n-#endif\n-\n-#ifndef L_tmpnam\n-#define L_tmpnam 16\n-#endif\n \n  int\n #ifdef KR_headers\n@@ -112,14 +64,9 @@ t_runc(a) alist *a;\n t_runc(alist *a)\n #endif\n {\n-\tchar nm[L_tmpnam+12];\t/* extra space in case L_tmpnam is tiny */\n \tlong loc, len;\n \tunit *b;\n-#ifdef NON_UNIX_STDIO\n \tFILE *bf, *tf;\n-#else\n-\tFILE *bf;\n-#endif\n \tint rc = 0;\n \n \tb = &f__units[a->aunit];\n@@ -130,65 +77,44 @@ t_runc(alist *a)\n \tlen=ftell(bf);\n \tif (loc >= len || b->useek == 0 || b->ufnm == NULL)\n \t\treturn(0);\n-#ifdef NON_UNIX_STDIO\n \tfclose(b->ufd);\n-#else\n-\trewind(b->ufd);\t/* empty buffer */\n-#endif\n \tif (!loc) {\n-#ifdef NON_UNIX_STDIO\n \t\tif (!(bf = fopen(b->ufnm, f__w_mode[b->ufmt])))\n-#else\n-\t\tif (close(creat(b->ufnm,0666)))\n-#endif\n \t\t\trc = 1;\n \t\tif (b->uwrt)\n \t\t\tb->uwrt = 1;\n \t\tgoto done;\n \t\t}\n-#ifdef _POSIX_SOURCE\n-\ttmpnam(nm);\n-#else\n-\tstrcpy(nm,\"tmp.FXXXXXX\");\n-\tmktemp(nm);\n-#endif\n-#ifdef NON_UNIX_STDIO\n-\tif (!(bf = fopen(b->ufnm, f__r_mode[0]))) {\n+\tif (!(bf = fopen(b->ufnm, f__r_mode[0]))\n+\t || !(tf = tmpfile())) {\n  bad:\n \t\trc = 1;\n \t\tgoto done;\n \t\t}\n-\tif (!(tf = fopen(nm, f__w_mode[0])))\n-\t\tgoto bad;\n \tif (copy(bf, loc, tf)) {\n  bad1:\n \t\trc = 1;\n \t\tgoto done1;\n \t\t}\n \tif (!(bf = freopen(b->ufnm, f__w_mode[0], bf)))\n \t\tgoto bad1;\n-\tif (!(tf = freopen(nm, f__r_mode[0], tf)))\n-\t\tgoto bad1;\n+\trewind(tf);\n \tif (copy(tf, loc, bf))\n \t\tgoto bad1;\n-\tif (f__w_mode[0] != f__w_mode[b->ufmt]) {\n-\t \tif (!(bf = freopen(b->ufnm, f__w_mode[b->ufmt|2], bf)))\n-\t\t\tgoto bad1;\n-\t\tfseek(bf, loc, SEEK_SET);\n+\tb->urw = 2;\n+#ifdef NON_UNIX_STDIO\n+\tif (b->ufmt) {\n+\t\tfclose(bf);\n+\t\tif (!(bf = fopen(b->ufnm, f__w_mode[3])))\n+\t\t\tgoto bad;\n+\t\tfseek(bf,0L,SEEK_END);\n+\t\tb->urw = 3;\n \t\t}\n+#endif\n done1:\n \tfclose(tf);\n-\tunlink(nm);\n done:\n \tf__cf = b->ufd = bf;\n-#else\n-\tif (copy(b->ufnm, loc, nm)\n-\t || copy(nm, loc, b->ufnm))\n-\t\trc = 1;\n-\tunlink(nm);\n-\tfseek(b->ufd, loc, SEEK_SET);\n-done:\n-#endif\n \tif (rc)\n \t\terr(a->aerr,111,\"endfile\");\n \treturn 0;"}, {"sha": "56d82ac4b19ee29ea9efcb62640c3b046a2354a3", "filename": "libf2c/libI77/err.c", "status": "modified", "additions": 33, "deletions": 45, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Ferr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Ferr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ferr.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -1,9 +1,10 @@\n #ifndef NON_UNIX_STDIO\n+#define _INCLUDE_POSIX_SOURCE\t/* for HP-UX */\n+#define _INCLUDE_XOPEN_SOURCE\t/* for HP-UX */\n #include <sys/types.h>\n #include <sys/stat.h>\n #endif\n #include \"f2c.h\"\n-#if defined (NON_UNIX_STDIO) || defined (MISSING_FILE_ELEMS)\n #ifdef KR_headers\n extern char *malloc();\n #else\n@@ -12,10 +13,8 @@ extern char *malloc();\n #undef max\n #include <stdlib.h>\n #endif\n-#endif\n #include \"fio.h\"\n #include \"fmt.h\"\t/* for struct syl */\n-#include \"rawio.h\"\t/* for fcntl.h, fdopen */\n \n /*global definitions*/\n unit f__units[MXUNIT];\t/*unit table*/\n@@ -32,9 +31,11 @@ flag f__external;\t/*1 if external io, 0 if internal */\n #ifdef KR_headers\n int (*f__doed)(),(*f__doned)();\n int (*f__doend)(),(*f__donewrec)(),(*f__dorevert)();\n-int (*f__getn)(),(*f__putn)();\t/*for formatted io*/\n+int (*f__getn)();\t/* for formatted input */\n+void (*f__putn)();\t/* for formatted output */\n #else\n-int (*f__getn)(void),(*f__putn)(int);\t/*for formatted io*/\n+int (*f__getn)(void);\t/* for formatted input */\n+void (*f__putn)(int);\t/* for formatted output */\n int (*f__doed)(struct syl*, char*, ftnlen),(*f__doned)(struct syl*);\n int (*f__dorevert)(void),(*f__donewrec)(void),(*f__doend)(void);\n #endif\n@@ -188,15 +189,6 @@ f_init(Void)\n \tp= &f__units[0];\n \tp->ufd=stderr;\n \tp->useek=f__canseek(stderr);\n-#ifdef _IOLBF\n-\tsetvbuf(stderr, (char*)malloc(BUFSIZ+8), _IOLBF, BUFSIZ+8);\n-#else\n-#if defined (NON_UNIX_STDIO) || defined (MISSING_FILE_ELEMS)\n-\tsetbuf(stderr, (char *)malloc(BUFSIZ+8));\n-#else\n-\tstderr->_flag &= ~_IONBF;\n-#endif\n-#endif\n \tp->ufmt=1;\n \tp->uwrt=1;\n \tp = &f__units[5];\n@@ -217,21 +209,29 @@ f__nowreading(unit *x)\n #endif\n {\n \tlong loc;\n-\tint ufmt;\n-\textern char *f__r_mode[];\n+\tint ufmt, urw;\n+\textern char *f__r_mode[], *f__w_mode[];\n \n+\tif (x->urw & 1)\n+\t\tgoto done;\n \tif (!x->ufnm)\n \t\tgoto cantread;\n-\tufmt = x->ufmt;\n-\tloc=ftell(x->ufd);\n-\tif(freopen(x->ufnm,f__r_mode[ufmt],x->ufd) == NULL) {\n+\tufmt = x->url ? 0 : x->ufmt;\n+\tloc = ftell(x->ufd);\n+\turw = 3;\n+\tif (!freopen(x->ufnm, f__w_mode[ufmt|2], x->ufd)) {\n+\t\turw = 1;\n+\t\tif(!freopen(x->ufnm, f__r_mode[ufmt], x->ufd)) {\n  cantread:\n-\t\terrno = 126;\n-\t\treturn(1);\n+\t\t\terrno = 126;\n+\t\t\treturn 1;\n+\t\t\t}\n \t\t}\n-\tx->uwrt=0;\n-\t(void) fseek(x->ufd,loc,SEEK_SET);\n-\treturn(0);\n+\tfseek(x->ufd,loc,SEEK_SET);\n+\tx->urw = urw;\n+ done:\n+\tx->uwrt = 0;\n+\treturn 0;\n }\n #ifdef KR_headers\n f__nowwriting(x) unit *x;\n@@ -242,46 +242,34 @@ f__nowwriting(unit *x)\n \tlong loc;\n \tint ufmt;\n \textern char *f__w_mode[];\n-#ifndef NON_UNIX_STDIO\n-\tint k;\n-#endif\n \n+\tif (x->urw & 2)\n+\t\tgoto done;\n \tif (!x->ufnm)\n \t\tgoto cantwrite;\n-\tufmt = x->ufmt;\n-#ifdef NON_UNIX_STDIO\n-\tufmt |= 2;\n-#endif\n+\tufmt = x->url ? 0 : x->ufmt;\n \tif (x->uwrt == 3) { /* just did write, rewind */\n-#ifdef NON_UNIX_STDIO\n \t\tif (!(f__cf = x->ufd =\n \t\t\t\tfreopen(x->ufnm,f__w_mode[ufmt],x->ufd)))\n-#else\n-\t\tif (close(creat(x->ufnm,0666)))\n-#endif\n \t\t\tgoto cantwrite;\n+\t\tx->urw = 2;\n \t\t}\n \telse {\n \t\tloc=ftell(x->ufd);\n-#ifdef NON_UNIX_STDIO\n \t\tif (!(f__cf = x->ufd =\n-\t\t\tfreopen(x->ufnm, f__w_mode[ufmt], x->ufd)))\n-#else\n-\t\tif (fclose(x->ufd) < 0\n-\t\t|| (k = x->uwrt == 2 ? creat(x->ufnm,0666)\n-\t\t\t\t     : open(x->ufnm,O_WRONLY)) < 0\n-\t\t|| (f__cf = x->ufd = fdopen(k,f__w_mode[ufmt])) == NULL)\n-#endif\n+\t\t\tfreopen(x->ufnm, f__w_mode[ufmt |= 2], x->ufd)))\n \t\t\t{\n \t\t\tx->ufd = NULL;\n  cantwrite:\n \t\t\terrno = 127;\n \t\t\treturn(1);\n \t\t\t}\n-\t\t(void) fseek(x->ufd,loc,SEEK_SET);\n+\t\tx->urw = 3;\n+\t\tfseek(x->ufd,loc,SEEK_SET);\n \t\t}\n+ done:\n \tx->uwrt = 1;\n-\treturn(0);\n+\treturn 0;\n }\n \n  int"}, {"sha": "846351d5413fecb9597e9d44c1baf7a3cdc020dd", "filename": "libf2c/libI77/fio.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Ffio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Ffio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ffio.h?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -37,7 +37,7 @@ typedef struct\n \tint url;\t/*0=sequential*/\n \tflag useek;\t/*true=can backspace, use dir, ...*/\n \tflag ufmt;\n-\tflag uprnt;\n+\tflag urw;\t/* (1 for can read) | (2 for can write) */\n \tflag ublnk;\n \tflag uend;\n \tflag uwrt;\t/*last io was write*/\n@@ -50,17 +50,21 @@ extern flag f__reading,f__external,f__sequential,f__formatted;\n #undef Void\n #ifdef KR_headers\n #define Void /*void*/\n-extern int (*f__getn)(),(*f__putn)();\t/*for formatted io*/\n+extern int (*f__getn)();\t/* for formatted input */\n+extern void (*f__putn)();\t/* for formatted output */\n+extern void x_putc();\n extern long f__inode();\n extern VOID sig_die();\n extern int (*f__donewrec)(), t_putc(), x_wSL();\n-extern int c_sfe(), err__fl(), xrd_SL();\n+extern int c_sfe(), err__fl(), xrd_SL(), f__putbuf();\n #else\n #define Void void\n #ifdef __cplusplus\n extern \"C\" {\n #endif\n-extern int (*f__getn)(void),(*f__putn)(int);\t/*for formatted io*/\n+extern int (*f__getn)(void);\t/* for formatted input */\n+extern void (*f__putn)(int);\t/* for formatted output */\n+extern void x_putc(int);\n extern long f__inode(char*,int*);\n extern void sig_die(char*,int);\n extern void f__fatal(int,char*);\n@@ -75,6 +79,7 @@ extern int c_sfe(cilist*), z_rnew(void);\n extern int isatty(int);\n extern int err__fl(int,int,char*);\n extern int xrd_SL(void);\n+extern int f__putbuf(int);\n #ifdef __cplusplus\n \t}\n #endif"}, {"sha": "d56a352dd8cf34b0be8d63c2717ece6b741e109d", "filename": "libf2c/libI77/iio.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fiio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fiio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fiio.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -14,17 +14,16 @@ z_getc(Void)\n \t\t}\n \treturn '\\n';\n }\n+\n+ void\n #ifdef KR_headers\n z_putc(c)\n #else\n z_putc(int c)\n #endif\n {\n-\tif(f__icptr >= f__icend) err(f__svic->icierr,110,\"inwrite\");\n-\tif(f__recpos++ < f__svic->icirlen)\n+\tif (f__icptr < f__icend && f__recpos++ < f__svic->icirlen)\n \t\t*f__icptr++ = c;\n-\telse\terr(f__svic->icierr,110,\"recend\");\n-\treturn 0;\n }\n z_rnew(Void)\n {\n@@ -139,10 +138,17 @@ integer e_wsfi(Void)\n \tf__init &= ~2;\n \tn = en_fio();\n \tf__fmtbuf = NULL;\n-\tif(f__icnum >= f__svic->icirnum\n-\t|| !f__recpos && f__icnum)\n-\t\treturn(n);\n+\tif(f__svic->icirnum != 1\n+\t && (f__icnum >  f__svic->icirnum\n+\t || (f__icnum == f__svic->icirnum && (f__recpos | f__hiwater))))\n+\t\terr(f__svic->icierr,110,\"inwrite\");\n+\tif (f__recpos < f__hiwater)\n+\t\tf__recpos = f__hiwater;\n+\tif (f__recpos >= f__svic->icirlen)\n+\t\terr(f__svic->icierr,110,\"recend\");\n+\tif (!f__recpos && f__icnum)\n+\t\treturn n;\n \twhile(f__recpos++ < f__svic->icirlen)\n \t\t*f__icptr++ = ' ';\n-\treturn(n);\n+\treturn n;\n }"}, {"sha": "abc64099d313f4523a8d7e75e3a561e7f0bd6a74", "filename": "libf2c/libI77/ilnw.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Filnw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Filnw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Filnw.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -6,9 +6,9 @@ extern char *f__icend;\n extern icilist *f__svic;\n extern int f__icnum;\n #ifdef KR_headers\n-extern int z_putc();\n+extern void z_putc();\n #else\n-extern int z_putc(int);\n+extern void z_putc(int);\n #endif\n \n  static int\n@@ -19,7 +19,7 @@ z_wSL(Void)\n \treturn z_rnew();\n \t}\n \n- VOID\n+ static void\n #ifdef KR_headers\n c_liw(a) icilist *a;\n #else"}, {"sha": "c5b922fbfb6744a96ba30e1f8d55c73f023c2f81", "filename": "libf2c/libI77/lread.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Flread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Flread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Flread.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -622,7 +622,7 @@ l_read(ftnint *number, char *ptr, ftnlen len, ftnint type)\n \t\t\tbreak;\n \t\tcase TYLOGICAL:\n \t\tcase TYLONG:\n-\t\t\tPtr->flint=f__lx;\n+\t\t\tPtr->flint = (ftnint)f__lx;\n \t\t\tbreak;\n #ifdef Allow_TYQUAD\n \t\tcase TYQUAD:"}, {"sha": "bf209f47ed201c4bcfbd9be0366c79f876ef4087", "filename": "libf2c/libI77/lwrite.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Flwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Flwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Flwrite.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -13,16 +13,6 @@ donewrec(Void)\n \t\t(*f__donewrec)();\n \t}\n \n-#ifdef KR_headers\n-t_putc(c)\n-#else\n-t_putc(int c)\n-#endif\n-{\n-\tf__recpos++;\n-\tputc(c,f__cf);\n-\treturn(0);\n-}\n  static VOID\n #ifdef KR_headers\n lwrt_I(n) longint n;\n@@ -184,10 +174,12 @@ l_put(register char *s)\n #endif\n {\n #ifdef KR_headers\n-\tregister int c, (*pn)() = f__putn;\n+\tregister void (*pn)() = f__putn;\n #else\n-\tregister int c, (*pn)(int) = f__putn;\n+\tregister void (*pn)(int) = f__putn;\n #endif\n+\tregister int c;\n+\n \twhile(c = *s++)\n \t\t(*pn)(c);\n \t}"}, {"sha": "29b7662b106adf9b350cb8bd0521b51ec153d7f5", "filename": "libf2c/libI77/open.c", "status": "modified", "additions": 140, "deletions": 84, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fopen.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -1,14 +1,19 @@\n-#ifndef NON_UNIX_STDIO\n-#include <sys/types.h>\n-#include <sys/stat.h>\n-#endif\n #include \"f2c.h\"\n #include \"fio.h\"\n #include <string.h>\n-#include \"rawio.h\"\n+#ifndef NON_POSIX_STDIO\n+#ifdef MSDOS\n+#include \"io.h\"\n+#else\n+#include \"unistd.h\"\t/* for access */\n+#endif\n+#endif\n \n #ifdef KR_headers\n-extern char *malloc(), *mktemp();\n+extern char *malloc();\n+#ifdef NON_ANSI_STDIO\n+extern char *mktemp();\n+#endif\n extern integer f_clos();\n #else\n #undef abs\n@@ -27,44 +32,97 @@ char *f__r_mode[2] = {\"rb\", \"r\"};\n char *f__w_mode[4] = {\"wb\", \"w\", \"r+b\", \"r+\"};\n #endif\n \n+ static char f__buf0[400], *f__buf = f__buf0;\n+ int f__buflen = (int)sizeof(f__buf0);\n+\n+ static void\n #ifdef KR_headers\n-f__isdev(s) char *s;\n+f__bufadj(n, c) int n, c;\n #else\n-f__isdev(char *s)\n+f__bufadj(int n, int c)\n #endif\n {\n-#ifdef NON_UNIX_STDIO\n-\tint i, j;\n+\tunsigned int len;\n+\tchar *nbuf, *s, *t, *te;\n \n-\ti = open(s,O_RDONLY);\n-\tif (i == -1)\n-\t\treturn 0;\n-\tj = isatty(i);\n-\tclose(i);\n-\treturn j;\n+\tif (f__buf == f__buf0)\n+\t\tf__buflen = 1024;\n+\twhile(f__buflen <= n)\n+\t\tf__buflen <<= 1;\n+\tlen = (unsigned int)f__buflen;\n+\tif (len != f__buflen || !(nbuf = (char*)malloc(len)))\n+\t\tf__fatal(113, \"malloc failure\");\n+\ts = nbuf;\n+\tt = f__buf;\n+\tte = t + c;\n+\twhile(t < te)\n+\t\t*s++ = *t++;\n+\tif (f__buf != f__buf0)\n+\t\tfree(f__buf);\n+\tf__buf = nbuf;\n+\t}\n+\n+ int\n+#ifdef KR_headers\n+f__putbuf(c) int c;\n #else\n-\tstruct stat x;\n+f__putbuf(int c)\n+#endif\n+{\n+\tchar *s, *se;\n+\tint n;\n \n-\tif(stat(s, &x) == -1) return(0);\n-#ifdef S_IFMT\n-\tswitch(x.st_mode&S_IFMT) {\n-\t\tcase S_IFREG:\n-\t\tcase S_IFDIR:\n-\t\t\treturn(0);\n+\tif (f__hiwater > f__recpos)\n+\t\tf__recpos = f__hiwater;\n+\tn = f__recpos + 1;\n+\tif (n >= f__buflen)\n+\t\tf__bufadj(n, f__recpos);\n+\ts = f__buf;\n+\tse = s + f__recpos;\n+\tif (c)\n+\t\t*se++ = c;\n+\t*se = 0;\n+\tfor(;;) {\n+\t\tfputs(s, f__cf);\n+\t\ts += strlen(s);\n+\t\tif (s >= se)\n+\t\t\tbreak;\t/* normally happens the first time */\n+\t\tputc(*s++, f__cf);\n \t\t}\n+\treturn 0;\n+\t}\n+\n+ void\n+#ifdef KR_headers\n+x_putc(c)\n #else\n-#ifdef S_ISREG\n-\t/* POSIX version */\n-\tif(S_ISREG(x.st_mode) || S_ISDIR(x.st_mode))\n-\t\treturn(0);\n-\telse\n-#else\n-\tHelp! How does stat work on this system?\n-#endif\n+x_putc(int c)\n #endif\n-\t\treturn(1);\n+{\n+\tif (f__recpos >= f__buflen)\n+\t\tf__bufadj(f__recpos, f__buflen);\n+\tf__buf[f__recpos++] = c;\n+\t}\n+\n+#define opnerr(f,m,s) \\\n+  do {if(f) {f__init &= ~2; errno= m;} else opn_err(m,s,a); return(m);} while(0)\n+\n+ static void\n+#ifdef KR_headers\n+opn_err(m, s, a) int m; char *s; olist *a;\n+#else\n+opn_err(int m, char *s, olist *a)\n #endif\n-}\n+{\n+\tif (a->ofnm) {\n+\t\t/* supply file name to error message */\n+\t\tif (a->ofnmlen >= f__buflen)\n+\t\t\tf__bufadj((int)a->ofnmlen, 0);\n+\t\tg_char(a->ofnm, a->ofnmlen, f__curunit->ufnm = f__buf);\n+\t\t}\n+\tf__fatal(m, s);\n+\t}\n+\n #ifdef KR_headers\n integer f_open(a) olist *a;\n #else\n@@ -75,11 +133,9 @@ integer f_open(olist *a)\n \tchar buf[256], *s;\n \tcllist x;\n \tint ufmt;\n-#ifdef NON_UNIX_STDIO\n \tFILE *tf;\n-#else\n+#ifndef NON_UNIX_STDIO\n \tint n;\n-\tstruct stat stb;\n #endif\n \tif(f__init != 1) f_init();\n \tif(a->ounit>=MXUNIT || a->ounit<0)\n@@ -95,7 +151,7 @@ integer f_open(olist *a)\n #ifdef NON_UNIX_STDIO\n \t\tif (b->ufnm\n \t\t && strlen(b->ufnm) == a->ofnmlen\n-\t\t && !strncmp(b->ufnm, b->ufnm, (unsigned)a->ofnmlen))\n+\t\t && !strncmp(b->ufnm, a->ofnm, (unsigned)a->ofnmlen))\n \t\t\tgoto same;\n #else\n \t\tg_char(a->ofnm,a->ofnmlen,buf);\n@@ -124,25 +180,32 @@ integer f_open(olist *a)\n \tif (a->ofnm) {\n \t\tg_char(a->ofnm,a->ofnmlen,buf);\n \t\tif (!buf[0])\n-\t\t\terr(a->oerr,107,\"open\");\n+\t\t\topnerr(a->oerr,107,\"open\");\n \t\t}\n \telse\n \t\tsprintf(buf, \"fort.%ld\", a->ounit);\n \tb->uscrtch = 0;\n+\tb->uend=0;\n+\tb->uwrt = 0;\n+\tb->ufd = 0;\n+\tb->urw = 3;\n \tswitch(a->osta ? *a->osta : 'u')\n \t{\n \tcase 'o':\n \tcase 'O':\n-#ifdef NON_UNIX_STDIO\n-\t\tif(access(buf,0))\n+#ifdef NON_POSIX_STDIO\n+\t\tif (!(tf = fopen(buf,\"r\")))\n+\t\t\topnerr(a->oerr,errno,\"open\");\n+\t\tfclose(tf);\n #else\n-\t\tif(stat(buf,&stb))\n+\t\tif (access(buf,0))\n+\t\t\topnerr(a->oerr,errno,\"open\");\n #endif\n-\t\t\terr(a->oerr,errno,\"open\");\n \t\tbreak;\n \t case 's':\n \t case 'S':\n \t\tb->uscrtch=1;\n+#ifdef NON_ANSI_STDIO\n #ifdef HAVE_TEMPNAM\t\t/* Allow use of TMPDIR preferentially. */\n \t\ts = tempnam (0, buf);\n \t\tif (strlen (s) >= sizeof (buf))\n@@ -158,71 +221,64 @@ integer f_open(olist *a)\n #endif\n #endif /* ! defined (HAVE_TEMPNAM) */\n \t\tgoto replace;\n+#else\n+\t\tif (!(b->ufd = tmpfile()))\n+\t\t\topnerr(a->oerr,errno,\"open\");\n+\t\tb->ufnm = 0;\n+#ifndef NON_UNIX_STDIO\n+\t\tb->uinode = b->udev = -1;\n+#endif\n+\t\tb->useek = 1;\n+\t\treturn 0;\n+#endif\n+\n \tcase 'n':\n \tcase 'N':\n-#ifdef NON_UNIX_STDIO\n-\t\tif(!access(buf,0))\n+#ifdef NON_POSIX_STDIO\n+\t\tif ((tf = fopen(buf,\"r\")) || (tf = fopen(buf,\"a\"))) {\n+\t\t\tfclose(tf);\n+\t\t\topnerr(a->oerr,128,\"open\");\n+\t\t\t}\n #else\n-\t\tif(!stat(buf,&stb))\n+\t\tif (!access(buf,0))\n+\t\t\topnerr(a->oerr,128,\"open\");\n #endif\n-\t\t\terr(a->oerr,128,\"open\");\n \t\t/* no break */\n \tcase 'r':\t/* Fortran 90 replace option */\n \tcase 'R':\n+#ifdef NON_ANSI_STDIO\n  replace:\n-#ifdef NON_UNIX_STDIO\n+#endif\n \t\tif (tf = fopen(buf,f__w_mode[0]))\n \t\t\tfclose(tf);\n-#else\n-\t\t(void) close(creat(buf, 0666));\n-#endif\n \t}\n \n \tb->ufnm=(char *) malloc((unsigned int)(strlen(buf)+1));\n-\tif(b->ufnm==NULL) err(a->oerr,113,\"no space\");\n+\tif(b->ufnm==NULL) opnerr(a->oerr,113,\"no space\");\n \t(void) strcpy(b->ufnm,buf);\n-\tb->uend=0;\n-\tb->uwrt = 0;\n-#ifdef NON_UNIX_STDIO\n-\tif ((s = a->oacc) && (*s == 'd' || *s == 'D'))\n+\tif ((s = a->oacc) && b->url)\n \t\tufmt = 0;\n-#endif\n-\tif(f__isdev(buf))\n-\t{\tb->ufd = fopen(buf,f__r_mode[ufmt]);\n-\t\tif(b->ufd==NULL) err(a->oerr,errno,buf);\n-\t}\n-\telse {\n-\t\tif(!(b->ufd = fopen(buf, f__r_mode[ufmt]))) {\n-#ifdef NON_UNIX_STDIO\n-\t\t\tif (b->ufd = fopen(buf, f__w_mode[ufmt|2]))\n-\t\t\t\tb->uwrt = 2;\n-\t\t\telse if (b->ufd = fopen(buf, f__w_mode[ufmt]))\n-\t\t\t\tb->uwrt = 1;\n-\t\t\telse\n-#else\n-\t\t\tif ((n = open(buf,O_WRONLY)) >= 0)\n-\t\t\t\tb->uwrt = 2;\n-\t\t\telse {\n-\t\t\t\tn = creat(buf, 0666);\n-\t\t\t\tb->uwrt = 1;\n-\t\t\t\t}\n-\t\t\tif (n < 0\n-\t\t\t|| (b->ufd = fdopen(n, f__w_mode[ufmt])) == NULL)\n-#endif\n-\t\t\t\terr(a->oerr, errno, \"open\");\n+\tif(!(tf = fopen(buf, f__w_mode[ufmt|2]))) {\n+\t\tif (tf = fopen(buf, f__r_mode[ufmt]))\n+\t\t\tb->urw = 1;\n+\t\telse if (tf = fopen(buf, f__w_mode[ufmt])) {\n+\t\t\tb->uwrt = 1;\n+\t\t\tb->urw = 2;\n \t\t\t}\n-\t}\n-\tb->useek=f__canseek(b->ufd);\n+\t\telse\n+\t\t\terr(a->oerr, errno, \"open\");\n+\t\t}\n+\tb->useek = f__canseek(b->ufd = tf);\n #ifndef NON_UNIX_STDIO\n-\tif((b->uinode=f__inode(buf,&b->udev))==-1)\n-\t\terr(a->oerr,108,\"open\");\n+\tif((b->uinode = f__inode(buf,&b->udev)) == -1)\n+\t\topnerr(a->oerr,108,\"open\");\n #endif\n \tif(b->useek)\n \t\tif (a->orl)\n \t\t\trewind(b->ufd);\n \t\telse if ((s = a->oacc) && (*s == 'a' || *s == 'A')\n \t\t\t&& fseek(b->ufd, 0L, SEEK_END))\n-\t\t\t\terr(a->oerr,129,\"open\");\n+\t\t\t\topnerr(a->oerr,129,\"open\");\n \treturn(0);\n }\n #ifdef KR_headers"}, {"sha": "f3a59fdab4dc11e2fc4723e7f8103f6647127b38", "filename": "libf2c/libI77/rawio.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Frawio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Frawio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Frawio.h?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -1,6 +1,4 @@\n-#ifdef KR_headers\n-extern FILE *fdopen();\n-#else\n+#ifndef KR_headers\n #if defined (MSDOS) && !defined (GO32)\n #include \"io.h\"\n #ifndef WATCOM"}, {"sha": "c7d891804b394a8119d255237656c2da51abf50d", "filename": "libf2c/libI77/sfe.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fsfe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fsfe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fsfe.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -8,10 +8,6 @@ integer e_rsfe(Void)\n {\tint n;\n \tf__init = 1;\n \tn=en_fio();\n-\tif (f__cf == stdout)\n-\t\tfflush(stdout);\n-\telse if (f__cf == stderr)\n-\t\tfflush(stderr);\n \tf__fmtbuf=NULL;\n \treturn(n);\n }\n@@ -30,15 +26,14 @@ c_sfe(cilist *a) /* check */\n }\n integer e_wsfe(Void)\n {\n-#ifdef ALWAYS_FLUSH\n \tint n;\n \tf__init = 1;\n \tn = en_fio();\n \tf__fmtbuf=NULL;\n-\tif (!n && fflush(f__cf))\n-\t\terr(f__elist->cierr, errno, \"write end\");\n \treturn n;\n-#else\n-\treturn(e_rsfe());\n-#endif\n+}\n+\n+integer e_wdfe(Void)\n+{\n+\treturn en_fio();\n }"}, {"sha": "ccaad2d3b6f2e0b6f757d7a6631096ef3fd72ec2", "filename": "libf2c/libI77/util.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Futil.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Futil.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Futil.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -1,4 +1,6 @@\n #ifndef NON_UNIX_STDIO\n+#define _INCLUDE_POSIX_SOURCE\t/* for HP-UX */\n+#define _INCLUDE_XOPEN_SOURCE\t/* for HP-UX */\n #include <sys/types.h>\n #include <sys/stat.h>\n #endif"}, {"sha": "477c40f5d3ba20f6aeafb9fdbea44ab625504bbd", "filename": "libf2c/libI77/wrtfmt.c", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fwrtfmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fwrtfmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fwrtfmt.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -40,43 +40,23 @@ mv_cur(Void)\t/* shouldn't use fseek because it insists on calling fflush */\n \t\t}\n \t\treturn(0);\n \t}\n-\tif(cursor > 0) {\n+\tif (cursor > 0) {\n \t\tif(f__hiwater <= f__recpos)\n \t\t\tfor(;cursor>0;cursor--) (*f__putn)(' ');\n \t\telse if(f__hiwater <= f__recpos + cursor) {\n-#if ! defined (NON_UNIX_STDIO) && ! defined (MISSING_FILE_ELEMS)\n-\t\t\tif(f__cf->_ptr + f__hiwater - f__recpos < buf_end(f__cf))\n-\t\t\t\tf__cf->_ptr += f__hiwater - f__recpos;\n-\t\t\telse\n-#endif\n-\t\t\t\t(void) fseek(f__cf, (long) (f__hiwater - f__recpos), SEEK_CUR);\n \t\t\tcursor -= f__hiwater - f__recpos;\n \t\t\tf__recpos = f__hiwater;\n \t\t\tfor(; cursor > 0; cursor--)\n \t\t\t\t(*f__putn)(' ');\n \t\t}\n \t\telse {\n-#if ! defined (NON_UNIX_STDIO) && ! defined (MISSING_FILE_ELEMS)\n-\t\t\tif(f__cf->_ptr + cursor < buf_end(f__cf))\n-\t\t\t\tf__cf->_ptr += cursor;\n-\t\t\telse\n-#endif\n-\t\t\t\t(void) fseek(f__cf, (long)cursor, SEEK_CUR);\n \t\t\tf__recpos += cursor;\n \t\t}\n \t}\n-\tif(cursor<0)\n+\telse if (cursor < 0)\n \t{\n-\t\tif(cursor+f__recpos<0) err(f__elist->cierr,110,\"left off\");\n-#if ! defined (NON_UNIX_STDIO) && ! defined (MISSING_FILE_ELEMS)\n-\t\tif(f__cf->_ptr + cursor >= f__cf->_base)\n-\t\t\tf__cf->_ptr += cursor;\n-\t\telse\n-#endif\n-\t\tif(f__curunit && f__curunit->useek)\n-\t\t\t(void) fseek(f__cf,(long)cursor,SEEK_CUR);\n-\t\telse\n-\t\t\terr(f__elist->cierr,106,\"fmt\");\n+\t\tif(cursor + f__recpos < 0)\n+\t\t\terr(f__elist->cierr,110,\"left off\");\n \t\tif(f__hiwater < f__recpos)\n \t\t\tf__hiwater = f__recpos;\n \t\tf__recpos += cursor;"}, {"sha": "6cb4e50415847c64a2da98dbeac35a5078b4ae2b", "filename": "libf2c/libI77/wsfe.c", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fwsfe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fwsfe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fwsfe.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -4,49 +4,38 @@\n #include \"fmt.h\"\n extern int f__hiwater;\n \n-#ifdef KR_headers\n-x_putc(c)\n-#else\n-x_putc(int c)\n-#endif\n-{\n-\t/* this uses \\n as an indicator of record-end */\n-\tif(c == '\\n' && f__recpos < f__hiwater) {\t/* fseek calls fflush, a loss */\n-#if ! defined (NON_UNIX_STDIO) && ! defined (MISSING_FILE_ELEMS)\n-\t\tif(f__cf->_ptr + f__hiwater - f__recpos < buf_end(f__cf))\n-\t\t\tf__cf->_ptr += f__hiwater - f__recpos;\n-\t\telse\n-#endif\n-\t\t\t(void) fseek(f__cf, (long)(f__hiwater - f__recpos), SEEK_CUR);\n-\t}\n-#ifdef OMIT_BLANK_CC\n-\tif (!f__recpos++ && c == ' ')\n-\t\treturn c;\n-#else\n-\tf__recpos++;\n-#endif\n-\treturn putc(c,f__cf);\n-}\n x_wSL(Void)\n {\n-\t(*f__putn)('\\n');\n-\tf__recpos=0;\n-\tf__cursor = 0;\n-\tf__hiwater = 0;\n-\treturn(1);\n+\tint n = f__putbuf('\\n');\n+\tf__hiwater = f__recpos = f__cursor = 0;\n+\treturn(n == 0);\n }\n+\n+ static int\n xw_end(Void)\n {\n-\tif(f__nonl == 0)\n-\t\t(*f__putn)('\\n');\n+\tint n;\n+\n+\tif(f__nonl) {\n+\t\tf__putbuf(n = 0);\n+\t\tfflush(f__cf);\n+\t\t}\n+\telse\n+\t\tn = f__putbuf('\\n');\n \tf__hiwater = f__recpos = f__cursor = 0;\n-\treturn(0);\n+\treturn n;\n }\n+\n+ static int\n xw_rev(Void)\n {\n-\tif(f__workdone) (*f__putn)('\\n');\n+\tint n = 0;\n+\tif(f__workdone) {\n+\t\tn = f__putbuf('\\n');\n+\t\tf__workdone = 0;\n+\t\t}\n \tf__hiwater = f__recpos = f__cursor = 0;\n-\treturn(f__workdone=0);\n+\treturn n;\n }\n \n #ifdef KR_headers"}, {"sha": "f8555d79c45538d823052b20125d5395fceac992", "filename": "libf2c/libI77/wsle.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fwsle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fwsle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fwsle.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -2,6 +2,7 @@\n #include \"fio.h\"\n #include \"fmt.h\"\n #include \"lio.h\"\n+#include \"string.h\"\n \n #ifdef KR_headers\n integer s_wsle(a) cilist *a;\n@@ -14,7 +15,7 @@ integer s_wsle(cilist *a)\n \tf__reading=0;\n \tf__external=1;\n \tf__formatted=1;\n-\tf__putn = t_putc;\n+\tf__putn = x_putc;\n \tf__lioproc = l_write;\n \tL_len = LINE;\n \tf__donewrec = x_wSL;\n@@ -25,17 +26,13 @@ integer s_wsle(cilist *a)\n \n integer e_wsle(Void)\n {\n+\tint n;\n \tf__init = 1;\n-\tt_putc('\\n');\n+\tn = f__putbuf('\\n');\n \tf__recpos=0;\n #ifdef ALWAYS_FLUSH\n-\tif (fflush(f__cf))\n+\tif (!n && fflush(f__cf))\n \t\terr(f__elist->cierr, errno, \"write end\");\n-#else\n-\tif (f__cf == stdout)\n-\t\tfflush(stdout);\n-\telse if (f__cf == stderr)\n-\t\tfflush(stderr);\n #endif\n-\treturn(0);\n+\treturn(n);\n \t}"}, {"sha": "ae3f8178949cfbf9da2e8453ffa34d7d446f59d5", "filename": "libf2c/libI77/wsne.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fwsne.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibI77%2Fwsne.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fwsne.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -16,7 +16,7 @@ s_wsne(cilist *a)\n \tf__reading=0;\n \tf__external=1;\n \tf__formatted=1;\n-\tf__putn = t_putc;\n+\tf__putn = x_putc;\n \tL_len = LINE;\n \tf__donewrec = x_wSL;\n \tif(f__curunit->uwrt != 1 && f__nowwriting(f__curunit))"}, {"sha": "12b876cf29a3b03a80e223b4430a1819916bce52", "filename": "libf2c/libU77/Version.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibU77%2FVersion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2FlibU77%2FVersion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2FVersion.c?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -1,6 +1,6 @@\n static char junk[] = \"\\n@(#) LIBU77 VERSION 19970919\\n\";\n \n-char __G77_LIBU77_VERSION__[] = \"0.5.22\";\n+char __G77_LIBU77_VERSION__[] = \"0.5.23-19980501\";\n \n #include <stdio.h>\n "}, {"sha": "c3785b4755d7c62bded605283ca5b1d9a19ea96a", "filename": "libf2c/readme.netlib", "status": "modified", "additions": 87, "deletions": 26, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2Freadme.netlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0/libf2c%2Freadme.netlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2Freadme.netlib?ref=a843efa0d4ff93324077fbd8b1fc57ed8f4b57f0", "patch": "@@ -77,18 +77,17 @@ f2c/src\tSource for the converter itself, including a file of checksums\n \t\tmailsize 200k\n \t\tsend exec.c expr.c format.c format_data.c from f2c/src\n \n-\tIf you have trouble generating gram.c, you can ask netlib to\n-\t\tsend gram.c from f2c/src\n-\tThen `xsum gram.c` should report\n-\t\tgram.c\t5529f4f\t58745\n-\tAlternatively, if you have bison, you might get a working\n-\tgram.c by saying\n-\t\tmake gram.c YACC=bison YFLAGS=-y\n-\t(but please do not complain if this gives a bad gram.c).\n-\n-NOTE:\tFor now, you may exercise f2c by sending netlib a message whose\n-\tfirst line is \"execute f2c\" and whose remaining lines are\n-\tthe Fortran 77 source that you wish to have converted.\n+\tThe makefile used to generate gram.c; now we distribute a\n+\tworking gram.c, and you must say\n+\t\tmake gram1.c\n+\t\tmv gram1.c gram.c\n+\tif you want to generate your own gram.c -- there are just too\n+\tmany broken variants of yacc floating around nowadays for\n+\tgeneration of gram.c to be the default.\n+\n+NOTE:\tYou may exercise f2c by sending netlib@netlib.bell-labs.com\n+\ta message whose first line is \"execute f2c\" and whose remaining\n+\tlines are the Fortran 77 source that you wish to have converted.\n \tReturn mail brings you the resulting C, with f2c's error\n \tmessages between #ifdef uNdEfInEd and #endif at the end.\n \t(To understand line numbers in the error messages, regard\n@@ -168,15 +167,22 @@ FTP:\tAll the material described above is now available by anonymous\n \t\tcd /netlib/f2c/src\n \t\tbinary\n \t\tprompt\n-\t\tmget *.Z\n+\t\tmget *.gz\n \n-\tto get all the .Z files in src.  You must uncompress the .Z\n+\tto get all the .gz files in src.  You must uncompress the .gz\n \tfiles once you have a copy of them, e.g., by\n \n-\t\tuncompress *.Z\n+\t\tgzip -dN *.gz\n+\n+\tYou can also get the entire f2c tree as a tar file:\n+\n+\t\tftp://netlib.bell-labs.com/netlib/f2c.tar\n+\n+\t(which is a synthetic file -- created on the fly and not visible\n+\tto ftp's \"ls\" or \"dir\" commands).\n \n \tSubdirectory msdos contains two PC versions of f2c,\n-\tf2c.exe.Z and f2cx.exe.Z; the latter uses extended memory.\n+\tf2c.exe.gz and f2cx.exe.gz; the latter uses extended memory.\n \tThe README in that directory provides more details.\n \n \tChanges appear first in the f2c files available by E-mail\n@@ -534,41 +540,96 @@ invisible on other machines.\n Sun Sep 21 22:05:19 EDT 1997\n   libf77: [de]time_.c (Unix systems only): change return type to double.\n \n+Thu Dec  4 22:10:09 EST 1997\n+  Fix bug with handling large blocks of comments (over 4k); parts of the\n+second and subsequent blocks were likely to be lost (not copied into\n+comments in the resulting C).  Allow comment lines to be longer before\n+breaking them.\n+\n+Mon Jan 19 17:19:27 EST 1998\n+  makefile: change the rule for making gram.c to one for making gram1.c;\n+henceforth, asking netlib to \"send all from f2c/src\" will bring you a\n+working gram.c.  Nowadays there are simply too many broken versions of\n+yacc floating around.\n+  libi77: backspace.c: for b->ufmt==0, change sizeof(int) to\n+sizeof(uiolen).  On machines where this would make a difference, it is\n+best for portability to compile libI77 with -DUIOLEN_int, which will\n+render the change invisible.\n+\n+Tue Feb 24 08:35:33 EST 1998\n+  makefile: remove gram.c from the \"make clean\" rule.\n+\n+Wed Feb 25 08:29:39 EST 1998\n+  makefile: change CFLAGS assignment to -O; add \"veryclean\" rule.\n+\n+Wed Mar  4 13:13:21 EST 1998\n+  libi77: open.c: fix glitch in comparing file names under\n+-DNON_UNIX_STDIO.\n+\n+Mon Mar  9 23:56:56 EST 1998\n+  putpcc.c: omit an unnecessary temporary variable in computing\n+(expr)**3.\n+  libf77, libi77: minor tweaks to make some C++ compilers happy;\n+Version.c not changed.\n+\n+Wed Mar 18 18:08:47 EST 1998\n+  libf77: minor tweaks to [ed]time_.c; Version.c not changed.\n+  libi77: endfile.c, open.c: acquire temporary files from tmpfile(),\n+unless compiled with -DNON_ANSI_STDIO, which uses mktemp().\n+New buffering scheme independent of NON_UNIX_STDIO for handling T\n+format items.  Now -DNON_UNIX_STDIO is no longer be necessary for\n+Linux, and libf2c no longer causes stderr to be buffered -- the former\n+setbuf or setvbuf call for stderr was to make T format items work.\n+open.c: use the Posix access() function to check existence or\n+nonexistence of files, except under -DNON_POSIX_STDIO, where trial\n+fopen calls are used.  In open.c, fix botch in changes of 19980304.\n+  libf2c.zip: the PC makefiles are now set for NT/W95, with comments\n+about changes for DOS.\n+\n+Fri Apr  3 17:22:12 EST 1998\n+  Adjust fix of 19960913 to again permit substring notation on\n+character variables in data statements.\n+\n+Sun Apr  5 19:26:50 EDT 1998\n+  libi77: wsfe.c: make $ format item work: this was lost in the changes\n+of 17 March 1998.\n+\n Current timestamps of files in \"all from f2c/src\", sorted by time,\n appear below (mm/dd/year hh:mm:ss).  To bring your source up to date,\n obtain source files with a timestamp later than the time shown in your\n version.c.  Note that the time shown in the current version.c is the\n timestamp of the source module that immediately follows version.c below:\n \n- 8/05/1997  14:51:56  xsum0.out\n- 8/05/1997  14:42:48  version.c\n+ 4/03/1998  17:20:55  xsum0.out\n+ 4/03/1998  17:15:05  gram.c\n+ 4/03/1998  17:15:05  version.c\n+ 4/03/1998  17:14:59  gram.dcl\n+ 3/09/1998   0:30:23  putpcc.c\n+ 2/25/1998   8:18:04  makefile\n+12/04/1997  17:44:11  format.c\n+12/04/1997  17:44:11  niceprintf.c\n+12/04/1997  17:14:05  lex.c\n  8/05/1997  10:31:26  malloc.c\n  7/24/1997  17:10:55  README\n- 7/24/1997  17:00:57  makefile\n  7/24/1997  16:06:19  Notice\n  7/21/1997  12:58:44  proc.c\n- 2/19/1997  13:34:09  lex.c\n  2/11/1997  23:39:14  vax.c\n 12/22/1996  11:51:22  output.c\n 12/04/1996  13:07:53  gram.exec\n-10/17/1996  13:10:40  putpcc.c\n-10/01/1996  14:36:18  gram.dcl\n-10/01/1996  14:36:18  init.c\n 10/01/1996  14:36:18  defs.h\n+10/01/1996  14:36:18  init.c\n 10/01/1996  14:36:17  data.c\n  9/17/1996  17:29:44  expr.c\n  9/12/1996  12:12:46  equiv.c\n  8/27/1996   8:30:32  intr.c\n  8/26/1996   9:41:13  sysdep.c\n- 7/09/1996  10:41:13  format.c\n  7/09/1996  10:40:45  names.c\n  7/04/1996   9:58:31  formatdata.c\n  7/04/1996   9:55:45  sysdep.h\n  7/04/1996   9:55:43  put.c\n  7/04/1996   9:55:41  pread.c\n- 7/04/1996   9:55:40  parse_args.c\n  7/04/1996   9:55:40  p1output.c\n- 7/04/1996   9:55:38  niceprintf.c\n+ 7/04/1996   9:55:40  parse_args.c\n  7/04/1996   9:55:37  misc.c\n  7/04/1996   9:55:36  memset.c\n  7/04/1996   9:55:36  mem.c"}]}