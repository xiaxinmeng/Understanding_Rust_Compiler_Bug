{"sha": "c5adc4275c2a4e0f6529b9985da0bdb043af151e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVhZGM0Mjc1YzJhNGUwZjY1MjliOTk4NWRhMGJkYjA0M2FmMTUxZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-05-27T22:23:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-05-27T22:23:41Z"}, "message": "call.c (implicit_conversion): Handle conversion from initializer-list to scalar.\n\n\t* call.c (implicit_conversion): Handle conversion from\n\tinitializer-list to scalar.\n\t(convert_like_real): Likewise.  Avoid crashing on list\n\tinitialization with bad conversions.\n\t(can_convert): Use LOOKUP_EXPLICIT.\n\t(can_convert_arg_bad): Add flags parm.\n\t* cp-tree.h: Adjust.\n\t* typeck.c (convert_for_assignment): Pass flags.\n\nFrom-SVN: r147933", "tree": {"sha": "8d1bcc296b2e19890eba09e741714891d00a0f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d1bcc296b2e19890eba09e741714891d00a0f28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5adc4275c2a4e0f6529b9985da0bdb043af151e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5adc4275c2a4e0f6529b9985da0bdb043af151e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5adc4275c2a4e0f6529b9985da0bdb043af151e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5adc4275c2a4e0f6529b9985da0bdb043af151e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eaf4cf4fdcd9bcf19bcb96b2a49e42f91f4d082a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf4cf4fdcd9bcf19bcb96b2a49e42f91f4d082a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaf4cf4fdcd9bcf19bcb96b2a49e42f91f4d082a"}], "stats": {"total": 109, "additions": 99, "deletions": 10}, "files": [{"sha": "9efd93eb4bd4138cb4d52dbfdce8cdc43cb3b273", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c5adc4275c2a4e0f6529b9985da0bdb043af151e", "patch": "@@ -1,3 +1,14 @@\n+2009-05-27  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (implicit_conversion): Handle conversion from\n+\tinitializer-list to scalar.\n+\t(convert_like_real): Likewise.  Avoid crashing on list\n+\tinitialization with bad conversions.\n+\t(can_convert): Use LOOKUP_EXPLICIT.\n+\t(can_convert_arg_bad): Add flags parm.\n+\t* cp-tree.h: Adjust.\n+\t* typeck.c (convert_for_assignment): Pass flags.\n+\n 2009-05-27  Ian Lance Taylor  <iant@google.com>\n \n \t* Make-lang.in (g++$(exeext)): Change $(COMPILER) to $(LINKER)."}, {"sha": "138abe017fee0b34d375c4b3c3b9bd0f324ab1a1", "filename": "gcc/cp/call.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c5adc4275c2a4e0f6529b9985da0bdb043af151e", "patch": "@@ -1400,9 +1400,31 @@ implicit_conversion (tree to, tree from, tree expr, bool c_cast_p,\n   if (conv)\n     return conv;\n \n-  if (is_std_init_list (to) && expr\n-      && BRACE_ENCLOSED_INITIALIZER_P (expr))\n-    return build_list_conv (to, expr, flags);\n+  if (expr && BRACE_ENCLOSED_INITIALIZER_P (expr))\n+    {\n+      if (is_std_init_list (to))\n+\treturn build_list_conv (to, expr, flags);\n+\n+      /* Allow conversion from an initializer-list with one element to a\n+\t scalar type if this is copy-initialization.  Direct-initialization\n+\t would be something like int i({1}), which is invalid.  */\n+      if (SCALAR_TYPE_P (to) && CONSTRUCTOR_NELTS (expr) <= 1\n+\t  && (flags & LOOKUP_ONLYCONVERTING))\n+\t{\n+\t  tree elt;\n+\t  if (CONSTRUCTOR_NELTS (expr) == 1)\n+\t    elt = CONSTRUCTOR_ELT (expr, 0)->value;\n+\t  else\n+\t    elt = integer_zero_node;\n+\t  conv = implicit_conversion (to, TREE_TYPE (elt), elt,\n+\t\t\t\t      c_cast_p, flags);\n+\t  if (conv)\n+\t    {\n+\t      conv->check_narrowing = true;\n+\t      return conv;\n+\t    }\n+\t}\n+    }\n \n   if (expr != NULL_TREE\n       && (MAYBE_CLASS_TYPE_P (from)\n@@ -4669,6 +4691,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \n   if (convs->bad_p\n       && convs->kind != ck_user\n+      && convs->kind != ck_list\n       && convs->kind != ck_ambig\n       && convs->kind != ck_ref_bind\n       && convs->kind != ck_rvalue\n@@ -4748,6 +4771,17 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \treturn expr;\n       }\n     case ck_identity:\n+      if (BRACE_ENCLOSED_INITIALIZER_P (expr))\n+\t{\n+\t  int nelts = CONSTRUCTOR_NELTS (expr);\n+\t  if (nelts == 0)\n+\t    expr = integer_zero_node;\n+\t  else if (nelts == 1)\n+\t    expr = CONSTRUCTOR_ELT (expr, 0)->value;\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+\n       if (type_unknown_p (expr))\n \texpr = instantiate_type (totype, expr, complain);\n       /* Convert a constant to its underlying value, unless we are\n@@ -7185,7 +7219,7 @@ tourney (struct z_candidate *candidates)\n bool\n can_convert (tree to, tree from)\n {\n-  return can_convert_arg (to, from, NULL_TREE, LOOKUP_NORMAL);\n+  return can_convert_arg (to, from, NULL_TREE, LOOKUP_IMPLICIT);\n }\n \n /* Returns nonzero if ARG (of type FROM) can be converted to TO.  */\n@@ -7213,7 +7247,7 @@ can_convert_arg (tree to, tree from, tree arg, int flags)\n /* Like can_convert_arg, but allows dubious conversions as well.  */\n \n bool\n-can_convert_arg_bad (tree to, tree from, tree arg)\n+can_convert_arg_bad (tree to, tree from, tree arg, int flags)\n {\n   conversion *t;\n   void *p;\n@@ -7222,7 +7256,7 @@ can_convert_arg_bad (tree to, tree from, tree arg)\n   p = conversion_obstack_alloc (0);\n   /* Try to perform the conversion.  */\n   t  = implicit_conversion (to, from, arg, /*c_cast_p=*/false,\n-\t\t\t    LOOKUP_NORMAL);\n+\t\t\t    flags);\n   /* Free all the conversions we allocated.  */\n   obstack_free (&conversion_obstack, p);\n "}, {"sha": "e47369501c63e0faf405777cd052c077c9f524d2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c5adc4275c2a4e0f6529b9985da0bdb043af151e", "patch": "@@ -4191,7 +4191,7 @@ extern tree build_op_call\t\t\t(tree, VEC(tree,gc) **,\n extern tree build_op_delete_call\t\t(enum tree_code, tree, tree, bool, tree, tree);\n extern bool can_convert\t\t\t\t(tree, tree);\n extern bool can_convert_arg\t\t\t(tree, tree, tree, int);\n-extern bool can_convert_arg_bad\t\t\t(tree, tree, tree);\n+extern bool can_convert_arg_bad\t\t\t(tree, tree, tree, int);\n extern bool enforce_access\t\t\t(tree, tree, tree);\n extern tree convert_default_arg\t\t\t(tree, tree, tree, int);\n extern tree convert_arg_to_ellipsis\t\t(tree);"}, {"sha": "29ae831488f3a9b039bbc9e4d24c171a7b236a6e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c5adc4275c2a4e0f6529b9985da0bdb043af151e", "patch": "@@ -6702,7 +6702,7 @@ convert_for_assignment (tree type, tree rhs,\n      We allow bad conversions here because by the time we get to this point\n      we are committed to doing the conversion.  If we end up doing a bad\n      conversion, convert_like will complain.  */\n-  if (!can_convert_arg_bad (type, rhstype, rhs))\n+  if (!can_convert_arg_bad (type, rhstype, rhs, flags))\n     {\n       /* When -Wno-pmf-conversions is use, we just silently allow\n \t conversions from pointers-to-members to plain pointers.  If"}, {"sha": "f47ac1fad896e301b3e9627f373986022b7a6117", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5adc4275c2a4e0f6529b9985da0bdb043af151e", "patch": "@@ -1,3 +1,9 @@\n+2009-05-27  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/initlist15.C: New.\n+\t* g++.dg/cpp0x/initlist16.C: New.\n+\t* g++.dg/cpp0x/initlist17.C: New.\n+\n 2009-05-27  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/39178"}, {"sha": "d59e5af640b3f38869d8bda35760b5c83cc053bd", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist15.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist15.C?ref=c5adc4275c2a4e0f6529b9985da0bdb043af151e", "patch": "@@ -0,0 +1,17 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+#include <vector>\n+#include <typeinfo>\n+\n+using namespace std;\n+\n+template< typename ... ArgTypes >\n+void test( ArgTypes ... args ) {\n+   vector<type_info*> x = { &typeid(ArgTypes)... }; // { dg-error \"\" }\n+}\n+\n+int main()\n+{\n+    test( 1, 3.14f, 2.78 );\n+    return 0;\n+}"}, {"sha": "86a003960517375a6ad8f92d95c5abae3b1e2350", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist16.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist16.C?ref=c5adc4275c2a4e0f6529b9985da0bdb043af151e", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do run }\n+\n+extern \"C\" void abort();\n+\n+void f(int i) { if (i != 42) abort(); }\n+\n+int main()\n+{\n+  f({42});\n+  return {0};\n+}"}, {"sha": "86371e819699c7ec042aed396b22b88a9e5396fa", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist17.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5adc4275c2a4e0f6529b9985da0bdb043af151e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist17.C?ref=c5adc4275c2a4e0f6529b9985da0bdb043af151e", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+void f(int i);\n+\n+int main()\n+{\n+  f({42.0});\t\t\t// { dg-error \"narrowing\" }\n+  return {1.0};\t\t\t// { dg-error \"narrowing\" }\n+}"}, {"sha": "539dd891cd50f6bbaf30a0b1f2c7770f5d58e20d", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/bool_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5adc4275c2a4e0f6529b9985da0bdb043af151e/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5adc4275c2a4e0f6529b9985da0bdb043af151e/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool_neg.cc?ref=c5adc4275c2a4e0f6529b9985da0bdb043af151e", "patch": "@@ -30,4 +30,4 @@ int main()\n   return i;\n }\n \n-// { dg-error \"could not convert\" \"\" { target *-*-* } 28 }\n+// { dg-error \"cannot convert\" \"\" { target *-*-* } 28 }"}, {"sha": "6b8d129d2ff7929b221e9608d41d6da5e5db4e20", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/bool_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5adc4275c2a4e0f6529b9985da0bdb043af151e/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5adc4275c2a4e0f6529b9985da0bdb043af151e/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool_neg.cc?ref=c5adc4275c2a4e0f6529b9985da0bdb043af151e", "patch": "@@ -29,4 +29,4 @@ int test01()\n   return i;\n }\n \n-// { dg-error \"could not convert\" \"\" { target *-*-* } 27 }\n+// { dg-error \"cannot convert\" \"\" { target *-*-* } 27 }"}]}