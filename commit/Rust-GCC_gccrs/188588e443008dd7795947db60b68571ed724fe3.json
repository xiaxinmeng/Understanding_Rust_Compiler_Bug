{"sha": "188588e443008dd7795947db60b68571ed724fe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg4NTg4ZTQ0MzAwOGRkNzc5NTk0N2RiNjBiNjg1NzFlZDcyNGZlMw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2018-11-28T16:44:25Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2018-11-28T16:44:25Z"}, "message": "Implement uniform container erasure for C++20.\n\n2018-11-28  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement uniform container erasure for C++20.\n\t* include/Makefile.am: Move erase_if.h.\n\t* include/Makefile.in: Move erase_if.h.\n\t* include/experimental/bits/erase_if.h: Move ...\n\t* include/bits/erase_if.h: ... here.\n\t* include/experimental/map: Move erase_if.h.\n\t* include/experimental/set: Move erase_if.h.\n\t* include/experimental/unordered_map: Move erase_if.h.\n\t* include/experimental/unordered_set: Move erase_if.h.\n\t* include/std/deque (erase_if, erase): New functions.\n\t* include/std/forward_list: Ditto.\n\t* include/std/list: Ditto.\n\t* include/std/map: Ditto.\n\t* include/std/set: Ditto.\n\t* include/std/string: Ditto.\n\t* include/std/unordered_map: Ditto.\n\t* include/std/unordered_set: Ditto.\n\t* include/std/vector: Ditto.\n\t* testsuite/21_strings/basic_string/erasure.cc: New test.\n\t* testsuite/23_containers/deque/erasure.cc: New test.\n\t* testsuite/23_containers/forward_list/erasure.cc: New test.\n\t* testsuite/23_containers/list/erasure.cc: New test.\n\t* testsuite/23_containers/map/erasure.cc: New test.\n\t* testsuite/23_containers/set/erasure.cc: New test.\n\t* testsuite/23_containers/unordered_map/erasure.cc: New test.\n\t* testsuite/23_containers/unordered_set/erasure.cc: New test.\n\t* testsuite/23_containers/vector/erasure.cc: New test.\n\nFrom-SVN: r266567", "tree": {"sha": "96fe0d3f6fb7bc21979a5fdd0f037799009014d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96fe0d3f6fb7bc21979a5fdd0f037799009014d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/188588e443008dd7795947db60b68571ed724fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188588e443008dd7795947db60b68571ed724fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188588e443008dd7795947db60b68571ed724fe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188588e443008dd7795947db60b68571ed724fe3/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd6ccc290a624a54f779054205cbfabb4e33a0aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6ccc290a624a54f779054205cbfabb4e33a0aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd6ccc290a624a54f779054205cbfabb4e33a0aa"}], "stats": {"total": 746, "additions": 720, "deletions": 26}, "files": [{"sha": "dc989bc744f5e4286d308585e52ec454dd729e8a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -1,3 +1,33 @@\n+2018-11-28  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement uniform container erasure for C++20.\n+\t* include/Makefile.am: Move erase_if.h.\n+\t* include/Makefile.in: Move erase_if.h.\n+\t* include/experimental/bits/erase_if.h: Move ...\n+\t* include/bits/erase_if.h: ... here.\n+\t* include/experimental/map: Move erase_if.h.\n+\t* include/experimental/set: Move erase_if.h.\n+\t* include/experimental/unordered_map: Move erase_if.h.\n+\t* include/experimental/unordered_set: Move erase_if.h.\n+\t* include/std/deque (erase_if, erase): New functions.\n+\t* include/std/forward_list: Ditto.\n+\t* include/std/list: Ditto.\n+\t* include/std/map: Ditto.\n+\t* include/std/set: Ditto.\n+\t* include/std/string: Ditto.\n+\t* include/std/unordered_map: Ditto.\n+\t* include/std/unordered_set: Ditto.\n+\t* include/std/vector: Ditto.\n+\t* testsuite/21_strings/basic_string/erasure.cc: New test.\n+\t* testsuite/23_containers/deque/erasure.cc: New test.\n+\t* testsuite/23_containers/forward_list/erasure.cc: New test.\n+\t* testsuite/23_containers/list/erasure.cc: New test.\n+\t* testsuite/23_containers/map/erasure.cc: New test.\n+\t* testsuite/23_containers/set/erasure.cc: New test.\n+\t* testsuite/23_containers/unordered_map/erasure.cc: New test.\n+\t* testsuite/23_containers/unordered_set/erasure.cc: New test.\n+\t* testsuite/23_containers/vector/erasure.cc: New test.\n+\n 2018-11-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/intro.xml: Document LWG 3096 change."}, {"sha": "09aa1892a143779624a5004b3361f3a6e2c98286", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -106,6 +106,7 @@ bits_headers = \\\n \t${bits_srcdir}/cpp_type_traits.h \\\n \t${bits_srcdir}/deque.tcc \\\n \t${bits_srcdir}/enable_special_members.h \\\n+\t${bits_srcdir}/erase_if.h \\\n \t${bits_srcdir}/forward_list.h \\\n \t${bits_srcdir}/forward_list.tcc \\\n \t${bits_srcdir}/fs_dir.h \\\n@@ -710,7 +711,6 @@ experimental_headers = \\\n experimental_bits_srcdir = ${glibcxx_srcdir}/include/experimental/bits\n experimental_bits_builddir = ./experimental/bits\n experimental_bits_headers = \\\n-\t${experimental_bits_srcdir}/erase_if.h \\\n \t${experimental_bits_srcdir}/lfts_config.h \\\n \t${experimental_bits_srcdir}/net.h \\\n \t${experimental_bits_srcdir}/shared_ptr.h \\"}, {"sha": "4d2642c8b781111b496ab57ac9f5cff8b95ff108", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -449,6 +449,7 @@ bits_headers = \\\n \t${bits_srcdir}/cpp_type_traits.h \\\n \t${bits_srcdir}/deque.tcc \\\n \t${bits_srcdir}/enable_special_members.h \\\n+\t${bits_srcdir}/erase_if.h \\\n \t${bits_srcdir}/forward_list.h \\\n \t${bits_srcdir}/forward_list.tcc \\\n \t${bits_srcdir}/fs_dir.h \\\n@@ -1052,7 +1053,6 @@ experimental_headers = \\\n experimental_bits_srcdir = ${glibcxx_srcdir}/include/experimental/bits\n experimental_bits_builddir = ./experimental/bits\n experimental_bits_headers = \\\n-\t${experimental_bits_srcdir}/erase_if.h \\\n \t${experimental_bits_srcdir}/lfts_config.h \\\n \t${experimental_bits_srcdir}/net.h \\\n \t${experimental_bits_srcdir}/shared_ptr.h \\"}, {"sha": "de4601f01739ecffe02a41aa93786addd5246972", "filename": "libstdc++-v3/include/bits/erase_if.h", "status": "renamed", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -1,4 +1,4 @@\n-// <experimental/bits/erase_if.h> -*- C++ -*-\n+// <bits/erase_if.h> -*- C++ -*-\n \n // Copyright (C) 2015-2018 Free Software Foundation, Inc.\n //\n@@ -22,27 +22,22 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file experimental/bits/erase_if.h\n+/** @file bits/erase_if.h\n  *  This is an internal header file, included by other library headers.\n  *  Do not attempt to use it directly.\n  */\n \n-#ifndef _GLIBCXX_EXPERIMENTAL_ERASE_IF_H\n-#define _GLIBCXX_EXPERIMENTAL_ERASE_IF_H 1\n+#ifndef _GLIBCXX_ERASE_IF_H\n+#define _GLIBCXX_ERASE_IF_H 1\n \n #pragma GCC system_header\n \n #if __cplusplus >= 201402L\n-#include <experimental/bits/lfts_config.h>\n \n namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-namespace experimental\n-{\n-inline namespace fundamentals_v2\n-{\n   namespace __detail\n   {\n     template<typename _Container, typename _Predicate>\n@@ -59,12 +54,10 @@ inline namespace fundamentals_v2\n \t}\n       }\n   } // namespace __detail\n-} // inline namespace fundamentals_v2\n-} // namespace experimental\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14\n \n-#endif // _GLIBCXX_EXPERIMENTAL_ERASE_IF_H\n+#endif // _GLIBCXX_ERASE_IF_H", "previous_filename": "libstdc++-v3/include/experimental/bits/erase_if.h"}, {"sha": "1e236e535c2b10e41cbd84c423b1e386c936777d", "filename": "libstdc++-v3/include/experimental/map", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -34,7 +34,7 @@\n #if __cplusplus >= 201402L\n \n #include <map>\n-#include <experimental/bits/erase_if.h>\n+#include <bits/erase_if.h>\n #include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -49,13 +49,13 @@ inline namespace fundamentals_v2\n \t   typename _Predicate>\n     inline void\n     erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   namespace pmr {\n     template<typename _Key, typename _Tp, typename _Compare = less<_Key>>"}, {"sha": "4a3fae6d1951bdc0b200ec4fe8b33e9b7f76e4bb", "filename": "libstdc++-v3/include/experimental/set", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -34,7 +34,7 @@\n #if __cplusplus >= 201402L\n \n #include <set>\n-#include <experimental/bits/erase_if.h>\n+#include <bits/erase_if.h>\n #include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -49,13 +49,13 @@ inline namespace fundamentals_v2\n \t   typename _Predicate>\n     inline void\n     erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   namespace pmr {\n     template<typename _Key, typename _Compare = less<_Key>>"}, {"sha": "e1d23592425e72be7582b582f67e2a635147ddb1", "filename": "libstdc++-v3/include/experimental/unordered_map", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -34,7 +34,7 @@\n #if __cplusplus >= 201402L\n \n #include <unordered_map>\n-#include <experimental/bits/erase_if.h>\n+#include <bits/erase_if.h>\n #include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -50,14 +50,14 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n \t   typename _Alloc, typename _Predicate>\n     inline void\n     erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   namespace pmr {\n     template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,"}, {"sha": "1b3836911573028795f197ac40cb28da8a53562e", "filename": "libstdc++-v3/include/experimental/unordered_set", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -34,7 +34,7 @@\n #if __cplusplus >= 201402L\n \n #include <unordered_set>\n-#include <experimental/bits/erase_if.h>\n+#include <bits/erase_if.h>\n #include <experimental/memory_resource>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -50,14 +50,14 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   namespace pmr {\n     template<typename _Key, typename _Hash = hash<_Key>,"}, {"sha": "c577e806513e0e638e9621f8ce919bc510b11132", "filename": "libstdc++-v3/include/std/deque", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -87,4 +87,27 @@ _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17\n \n+#if __cplusplus > 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename _Tp, typename _Alloc, typename _Predicate>\n+    void\n+    erase_if(deque<_Tp, _Alloc>& __cont, _Predicate __pred)\n+    {\n+      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n+\t\t   __cont.end());\n+    }\n+\n+  template<typename _Tp, typename _Alloc, typename _Up>\n+    void\n+    erase(deque<_Tp, _Alloc>& __cont, const _Up& __value)\n+    {\n+      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n+\t\t   __cont.end());\n+    }\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+\n #endif /* _GLIBCXX_DEQUE */"}, {"sha": "a2cc90387ada7f21de098c20a6c00cb8fffc6b16", "filename": "libstdc++-v3/include/std/forward_list", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -60,6 +60,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17\n+\n+#if __cplusplus > 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename _Tp, typename _Alloc, typename _Predicate>\n+    inline void \n+    erase_if(forward_list<_Tp, _Alloc>& __cont, _Predicate __pred)\n+    { __cont.remove_if(__pred); }\n+\n+  template<typename _Tp, typename _Alloc, typename _Up>\n+    inline void\n+    erase(forward_list<_Tp, _Alloc>& __cont, const _Up& __value)\n+    {\n+      using __elem_type = typename forward_list<_Tp, _Alloc>::value_type;\n+      erase_if(__cont, [&](__elem_type& __elem) { return __elem == __value; });\n+    }\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+\n #endif // C++11\n \n #endif // _GLIBCXX_FORWARD_LIST"}, {"sha": "58ad461b666c81216e29b4773af701edcadd00a8", "filename": "libstdc++-v3/include/std/list", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -84,4 +84,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17\n+\n+#if __cplusplus > 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename _Tp, typename _Alloc, typename _Predicate>\n+    inline void\n+    erase_if(list<_Tp, _Alloc>& __cont, _Predicate __pred)\n+    { __cont.remove_if(__pred); }\n+\n+  template<typename _Tp, typename _Alloc, typename _Up>\n+    inline void\n+    erase(list<_Tp, _Alloc>& __cont, const _Up& __value)\n+    {\n+      using __elem_type = typename list<_Tp, _Alloc>::value_type;\n+      erase_if(__cont, [&](__elem_type& __elem) { return __elem == __value; });\n+    }\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+\n #endif /* _GLIBCXX_LIST */"}, {"sha": "26b2f0ed08a54237d758a416c25d4c266f9b67b1", "filename": "libstdc++-v3/include/std/map", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -61,6 +61,7 @@\n #include <bits/stl_map.h>\n #include <bits/stl_multimap.h>\n #include <bits/range_access.h>\n+#include <bits/erase_if.h>\n \n #ifdef _GLIBCXX_DEBUG\n # include <debug/map>\n@@ -90,4 +91,23 @@ _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17\n \n+#if __cplusplus > 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n+\t   typename _Predicate>\n+    inline void\n+    erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n+\t   typename _Predicate>\n+    inline void\n+    erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+\n #endif /* _GLIBCXX_MAP */"}, {"sha": "432af90978ded4ddea64ede3786da73fde1f2ec3", "filename": "libstdc++-v3/include/std/set", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -61,6 +61,7 @@\n #include <bits/stl_set.h>\n #include <bits/stl_multiset.h>\n #include <bits/range_access.h>\n+#include <bits/erase_if.h>\n \n #ifdef _GLIBCXX_DEBUG\n # include <debug/set>\n@@ -86,4 +87,23 @@ _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17\n \n+#if __cplusplus > 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename _Key, typename _Compare, typename _Alloc,\n+\t   typename _Predicate>\n+    inline void\n+    erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+  template<typename _Key, typename _Compare, typename _Alloc,\n+\t   typename _Predicate>\n+    inline void\n+    erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+\n #endif /* _GLIBCXX_SET */"}, {"sha": "e1497bd21415fb3c39f90a3e053d05c4b060e243", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -51,6 +51,7 @@\n #include <bits/range_access.h>\n #include <bits/basic_string.h>\n #include <bits/basic_string.tcc>\n+#include <algorithm> // For remove and remove_if\n \n #if __cplusplus >= 201703L && _GLIBCXX_USE_CXX11_ABI\n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -72,4 +73,28 @@ _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17\n \n+#if __cplusplus > 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   typename _Predicate>\n+    inline void\n+    erase_if(basic_string<_CharT, _Traits, _Alloc>& __cont, _Predicate __pred)\n+    {\n+      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n+\t\t   __cont.end());\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc, typename _Up>\n+    inline void\n+    erase(basic_string<_CharT, _Traits, _Alloc>& __cont, const _Up& __value)\n+    {\n+      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n+\t\t   __cont.end());\n+    }\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+\n #endif /* _GLIBCXX_STRING */"}, {"sha": "8cb82144fd2f56824db6a21b628527c91c0f9c57", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -46,6 +46,7 @@\n #include <bits/hashtable.h>\n #include <bits/unordered_map.h>\n #include <bits/range_access.h>\n+#include <bits/erase_if.h>\n \n #ifdef _GLIBCXX_DEBUG\n # include <debug/unordered_map>\n@@ -76,6 +77,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17\n+\n+#if __cplusplus > 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n+\t   typename _Alloc, typename _Predicate>\n+    inline void\n+    erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n+\t     _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+  template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n+\t   typename _Alloc, typename _Predicate>\n+    inline void\n+    erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n+\t     _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+\n #endif // C++11\n \n #endif // _GLIBCXX_UNORDERED_MAP"}, {"sha": "310827528a6c028f3d753c2a4dbe1f61391a2c76", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -46,6 +46,7 @@\n #include <bits/hashtable.h>\n #include <bits/unordered_set.h>\n #include <bits/range_access.h>\n+#include <bits/erase_if.h>\n \n #ifdef _GLIBCXX_DEBUG\n # include <debug/unordered_set>\n@@ -76,6 +77,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17\n+\n+#if __cplusplus > 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+\n #endif // C++11\n \n #endif // _GLIBCXX_UNORDERED_SET"}, {"sha": "5a1edaf9d74d17bf7570fe3fd75d1419b1348a33", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -90,4 +90,27 @@ _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17\n \n+#if __cplusplus > 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename _Tp, typename _Alloc, typename _Predicate>\n+    inline void\n+    erase_if(vector<_Tp, _Alloc>& __cont, _Predicate __pred)\n+    {\n+      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n+\t\t   __cont.end());\n+    }\n+\n+  template<typename _Tp, typename _Alloc, typename _Up>\n+    inline void\n+    erase(vector<_Tp, _Alloc>& __cont, const _Up& __value)\n+    {\n+      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n+\t\t   __cont.end());\n+    }\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+\n #endif /* _GLIBCXX_VECTOR */"}, {"sha": "e9cca6f41584bc4400e6d30a3e881fef9b002333", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/erasure.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ferasure.cc?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  auto is_vowel = [](const char c)\n+  {\n+    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n+  };\n+\n+  std::string str(\"cute fluffy kittens\");\n+  std::erase_if(str, is_vowel);\n+  VERIFY( str == \"ct flffy kttns\" );\n+}\n+\n+void\n+test02()\n+{\n+  std::string str = \"cute fluffy kittens\";\n+  std::erase(str, 'f');\n+  VERIFY( str == \"cute luy kittens\" );\n+  std::erase(str, 'z');\n+  VERIFY( str == \"cute luy kittens\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "1fe6273c98442bdfc5f8c045f6e9d2cbbde92d4b", "filename": "libstdc++-v3/testsuite/23_containers/deque/erasure.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ferasure.cc?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::deque<int> d{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::erase_if(d, is_odd);\n+  std::deque<int> t{ 10, 12, 14, 18 };\n+  VERIFY( d == t );\n+}\n+\n+void\n+test02()\n+{\n+  std::deque<int> d{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::erase(d, 14);\n+  std::deque<int> t{ 10, 11, 12, 15, 17, 18, 19 };\n+  VERIFY( d == t );\n+  std::erase(d, 20);\n+  VERIFY( d == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "ac8a37d19d6caf6c41353b4379c654a5480ff71c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/erasure.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Ferasure.cc?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::forward_list<int> fl{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::erase_if(fl, is_odd);\n+  std::forward_list<int> t{ 10, 12, 14, 18 };\n+  VERIFY( fl == t );\n+}\n+\n+void\n+test02()\n+{\n+  std::forward_list<int> fl{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::erase(fl, 14);\n+  std::forward_list<int> t{ 10, 11, 12, 15, 17, 18, 19 };\n+  VERIFY( fl == t );\n+  std::erase(fl, 20);\n+  VERIFY( fl == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "c8d6f2212cc067ac1a8b0645f0a7266a4374ba19", "filename": "libstdc++-v3/testsuite/23_containers/list/erasure.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ferasure.cc?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::list<int> l{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::erase_if(l, is_odd);\n+  std::list<int> t{ 10, 12, 14, 18 };\n+  VERIFY( l == t );\n+}\n+\n+void\n+test02()\n+{\n+  std::list<int> l{ 0, 11, 0, 0, 22, 33, 0, 0, 44, 0 };\n+  std::erase(l, 0);\n+  std::list<int> t{ 11, 22, 33, 44 };\n+  VERIFY( l == t );\n+  std::erase(l, 55);\n+  VERIFY( l == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "d638715e75a8599d9218ae4ee0d5110bd861aa60", "filename": "libstdc++-v3/testsuite/23_containers/map/erasure.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Ferasure.cc?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+auto is_odd_pair = [](const std::pair<const int, std::string>& p)\n+{\n+  return p.first % 2 != 0;\n+};\n+\n+void\n+test01()\n+{\n+  std::map<int, std::string> m{ { 10, \"A\" }, { 11, \"B\" },\n+\t\t\t\t{ 12, \"C\" }, { 14, \"D\" },\n+\t\t\t\t{ 15, \"E\" }, { 17, \"F\" },\n+\t\t\t\t{ 18, \"G\" }, { 19, \"H\" } };\n+  std::erase_if(m, is_odd_pair);\n+  std::map<int, std::string> t{ { 10, \"A\" }, { 12, \"C\" },\n+\t\t\t\t{ 14, \"D\" }, { 18, \"G\" } };\n+  VERIFY( m == t );\n+}\n+\n+void\n+test02()\n+{\n+  std::multimap<int, std::string> mm{ { 20, \"S\" }, { 21, \"T\" },\n+\t\t\t\t      { 22, \"U\" }, { 22, \"V\" },\n+\t\t\t\t      { 23, \"W\" }, { 23, \"X\" },\n+\t\t\t\t      { 24, \"Y\" }, { 25, \"Z\" } };\n+  std::erase_if(mm, is_odd_pair);\n+  std::multimap<int, std::string> t{ { 20, \"S\" }, { 22, \"U\" },\n+\t\t\t\t     { 22, \"V\" }, { 24, \"Y\" } };\n+  VERIFY( mm == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "54b821b145dc7b5aff8c1401d4d8b6d7d499f462", "filename": "libstdc++-v3/testsuite/23_containers/set/erasure.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Ferasure.cc?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+void\n+test01()\n+{\n+  std::set<int> s{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::erase_if(s, is_odd);\n+  std::set<int> t{ 10, 12, 14, 18 };\n+  VERIFY( s == t );\n+}\n+\n+void\n+test02()\n+{\n+  std::multiset<int> ms{ 20, 21, 22, 22, 23, 23, 24, 25 };\n+  std::erase_if(ms, is_odd);\n+  std::multiset<int> t{ 20, 22, 22, 24 };\n+  VERIFY( ms == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "0e17b4e2be21ba879b981c26932400524f3ed1e9", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/erasure.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferasure.cc?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+auto is_odd_pair = [](const std::pair<const int, std::string>& p)\n+{\n+  return p.first % 2 != 0;\n+};\n+\n+void\n+test01()\n+{\n+  std::unordered_map<int, std::string> um{ { 10, \"A\" }, { 11, \"B\" },\n+\t\t\t\t\t   { 12, \"C\" }, { 14, \"D\" },\n+\t\t\t\t\t   { 15, \"E\" }, { 17, \"F\" },\n+\t\t\t\t\t   { 18, \"G\" }, { 19, \"H\" } };\n+  std::erase_if(um, is_odd_pair);\n+  std::unordered_map<int, std::string> t{ { 10, \"A\" }, { 12, \"C\" },\n+\t\t\t\t\t  { 14, \"D\" }, { 18, \"G\" } };\n+  VERIFY( um == t );\n+}\n+\n+void\n+test02()\n+{\n+  std::unordered_multimap<int, std::string> umm{ { 20, \"S\" }, { 21, \"T\" },\n+\t\t\t\t\t\t { 22, \"U\" }, { 22, \"V\" },\n+\t\t\t\t\t\t { 23, \"W\" }, { 23, \"X\" },\n+\t\t\t\t\t\t { 24, \"Y\" }, { 25, \"Z\" } };\n+  std::erase_if(umm, is_odd_pair);\n+  std::unordered_multimap<int, std::string> t{ { 20, \"S\" }, { 22, \"U\" },\n+\t\t\t\t\t       { 22, \"V\" }, { 24, \"Y\" } };\n+  VERIFY( umm == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "5d32c3235c3509ca13abda48556a532241cc4835", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/erasure.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferasure.cc?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::unordered_set<int> us{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::erase_if(us, is_odd);\n+  std::unordered_set<int> t{ 10, 12, 14, 18 };\n+  VERIFY( us == t );\n+}\n+\n+void\n+test02()\n+{\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::unordered_multiset<int> ums{ 20, 21, 22, 22, 23, 23, 24, 25 };\n+  std::erase_if(ums, is_odd);\n+  std::unordered_multiset<int> t{ 20, 22, 22, 24 };\n+  VERIFY( ums == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "b050b5422e8411c263cf4647a99ae66f656fbe2c", "filename": "libstdc++-v3/testsuite/23_containers/vector/erasure.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188588e443008dd7795947db60b68571ed724fe3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ferasure.cc?ref=188588e443008dd7795947db60b68571ed724fe3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::vector<int> v{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::erase_if(v, is_odd);\n+  std::vector<int> t{ 10, 12, 14, 18 };\n+  VERIFY( v == t );\n+}\n+\n+void\n+test02()\n+{\n+  std::vector<int> v{ 0, 11, 0, 0, 22, 33, 0, 0, 44, 0 };\n+  std::erase(v, 0);\n+  std::vector<int> t{ 11, 22, 33, 44 };\n+  VERIFY( v == t );\n+  std::erase(v, 55);\n+  VERIFY( v == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}]}