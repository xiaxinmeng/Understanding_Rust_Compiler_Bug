{"sha": "c725bd79e7613da00fb1b5bc440706a219db7653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcyNWJkNzllNzYxM2RhMDBmYjFiNWJjNDQwNzA2YTIxOWRiNzY1Mw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-12-03T19:15:19Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-12-03T19:15:19Z"}, "message": "c-decl.c (grokdeclarator): Use ISO word.\n\n\t* c-decl.c (grokdeclarator): Use ISO word.\n\t* cppinit.c: Remove leading capital from diagnostic messages, as\n\tper GNU coding standards.\n\t* diagnostic.c: Similarly.\n\t* emit-rtl.c: Similarly.\n\t* final.c: Similarly.\n\t* gcc.c: Similarly.\n\t* tradcpp.c: Similarly.\n\t* config/arm/arm.c: Similarly.\n\t* config/arm/arm.h: Similarly.\n\t* config/avr/avr.c: Similarly.\n\t* config/avr/avr.h: Similarly.\n\t* config/c4x/c4x.c: Similarly.\n\t* config/cris/cris.c: Similarly.\n\t* config/cris/cris.h: Similarly.\n\t* config/d30v/d30v.c: Similarly.\n\t* config/dsp16xx/dsp16xx.c: Similarly.\n\t* config/dsp16xx/dsp16xx.h: Similarly.\n\t* config/h8300/h8300.c: Similarly.\n\t* config/i386/i386.c: Similarly.\n\t* config/i386/xm-djgpp.h: Similarly.\n\t* config/i960/i960.h: Similarly.\n\t* config/m32r/m32r.c: Similarly.\n\t* config/m68hc11/m68hc11.c: Similarly.\n\t* config/m88k/m88k.c: Similarly.\n\t* config/m88k/m88k.h: Similarly.\n\t* config/mcore/mcore.c: Similarly.\n\t* config/mcore/mcore.h: Similarly.\n\t* config/mips/mips.c: Similarly.\n\t* config/mmix/mmix.c: Similarly.\n\t* config/pa/pa.c: Similarly.\n\t* config/rs6000/rs6000.c: Similarly.\n\t* config/rs6000/sysv4.h: Similarly.\n\t* config/s390/s390.c: Similarly.\n\t* config/sparc/sparc.c: Similarly.\n\t* config/v850/v850-c.c: Similarly.\n\t* config/v850/v850.c: Similarly.\nch:\n\t* actions.c: Remove leading capital from diagnostic messages, as\n\tper GNU coding standards.\n\t* decl.c: Similarly.\n\t* expr.c: Similarly.\n\t* inout.c: Similarly.\n\t* lang.c: Similarly.\n\t* loop.c: Similarly.\n\t* nloop.c: Similarly.\n\t* parse.c: Similarly.\n\t* satisfy.c: Similarly.\n\t* tasking.c: Similarly.\n\t* tree.c: Similarly.\n\t* typeck.c: Similarly.\ncp:\n\t* typeck2.c: Remove leading capital from diagnostic messages, as\n\tper GNU coding standards.\nf:\n\t* com.c: Remove leading capital from diagnostic messages, as\n\tper GNU coding standards.\n\t* g77spec.c: Similarly.\n\t* lex.c: Similarly.\njava:\n\t* expr.c: Remove leading capital from diagnostic messages, as\n\tper GNU coding standards.\n\t* jcf-io.c: Similarly.\n\t* jcf-parse.c: Similarly.\n\t* jv-scan.c: Similarly.\n\t* jvspec.c: Similarly.\n\t* mangle.c: Similarly.\n\nFrom-SVN: r47558", "tree": {"sha": "576734ca59686c61b721cf09db402391f39d9a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/576734ca59686c61b721cf09db402391f39d9a74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c725bd79e7613da00fb1b5bc440706a219db7653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c725bd79e7613da00fb1b5bc440706a219db7653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c725bd79e7613da00fb1b5bc440706a219db7653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c725bd79e7613da00fb1b5bc440706a219db7653/comments", "author": null, "committer": null, "parents": [{"sha": "bd8fd826dd40c4cd293ce57e5ceea39fef21b493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8fd826dd40c4cd293ce57e5ceea39fef21b493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8fd826dd40c4cd293ce57e5ceea39fef21b493"}], "stats": {"total": 927, "additions": 502, "deletions": 425}, "files": [{"sha": "16ad5fe713c4fd09c9f1e286b5ba18aaa9b4a424", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1,3 +1,42 @@\n+2001-12-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-decl.c (grokdeclarator): Use ISO word.\n+\t* cppinit.c: Remove leading capital from diagnostic messages, as\n+\tper GNU coding standards.\n+\t* emit-rtl.c: Similarly.\n+\t* final.c: Similarly.\n+\t* gcc.c: Similarly.\n+\t* tradcpp.c: Similarly.\n+\t* config/arm/arm.c: Similarly.\n+\t* config/arm/arm.h: Similarly.\n+\t* config/avr/avr.c: Similarly.\n+\t* config/avr/avr.h: Similarly.\n+\t* config/c4x/c4x.c: Similarly.\n+\t* config/cris/cris.c: Similarly.\n+\t* config/cris/cris.h: Similarly.\n+\t* config/d30v/d30v.c: Similarly.\n+\t* config/dsp16xx/dsp16xx.c: Similarly.\n+\t* config/dsp16xx/dsp16xx.h: Similarly.\n+\t* config/h8300/h8300.c: Similarly.\n+\t* config/i386/i386.c: Similarly.\n+\t* config/i386/xm-djgpp.h: Similarly.\n+\t* config/i960/i960.h: Similarly.\n+\t* config/m32r/m32r.c: Similarly.\n+\t* config/m68hc11/m68hc11.c: Similarly.\n+\t* config/m88k/m88k.c: Similarly.\n+\t* config/m88k/m88k.h: Similarly.\n+\t* config/mcore/mcore.c: Similarly.\n+\t* config/mcore/mcore.h: Similarly.\n+\t* config/mips/mips.c: Similarly.\n+\t* config/mmix/mmix.c: Similarly.\n+\t* config/pa/pa.c: Similarly.\n+\t* config/rs6000/rs6000.c: Similarly.\n+\t* config/rs6000/sysv4.h: Similarly.\n+\t* config/s390/s390.c: Similarly.\n+\t* config/sparc/sparc.c: Similarly.\n+\t* config/v850/v850-c.c: Similarly.\n+\t* config/v850/v850.c: Similarly.\n+\n 2001-12-03  Zack Weinberg  <zack@codesourcery.com>\n \n \t* rs6000.h (RETURN_IN_MEMORY): Cast result of"}, {"sha": "654e18438b8b1b68051a51653c635a2998f4a813", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -4522,7 +4522,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t     Functions aren't allowed as array elements.  */\n \t  if (pedantic && TREE_CODE (type) == FUNCTION_TYPE\n \t      && (constp || volatilep))\n-\t    pedwarn (\"ANSI C forbids const or volatile function types\");\n+\t    pedwarn (\"ISO C forbids const or volatile function types\");\n #endif\n \n \t  /* Build the array type itself, then merge any constancy or"}, {"sha": "94f3a556c34b67cc6373f6216fb40e5d5f8bd2a8", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1757,7 +1757,7 @@ verify_flow_info ()\n \t  basic_block bb = NOTE_BASIC_BLOCK (x);\n \t  num_bb_notes++;\n \t  if (bb->index != last_bb_num_seen + 1)\n-\t    internal_error (\"basic blocks not numbered consecutively.\");\n+\t    internal_error (\"basic blocks not numbered consecutively\");\n \n \t  last_bb_num_seen = bb->index;\n \t}\n@@ -1803,7 +1803,7 @@ verify_flow_info ()\n        num_bb_notes, n_basic_blocks);\n \n   if (err)\n-    internal_error (\"verify_flow_info failed.\");\n+    internal_error (\"verify_flow_info failed\");\n \n   /* Clean up.  */\n   free (bb_info);"}, {"sha": "c3641f45d019653f5cbfcc8ea86d7aa02b8b6476", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1,3 +1,19 @@\n+2001-12-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* actions.c: Remove leading capital from diagnostic messages, as\n+\tper GNU coding standards.\n+\t* decl.c: Similarly.\n+\t* expr.c: Similarly.\n+\t* inout.c: Similarly.\n+\t* lang.c: Similarly.\n+\t* loop.c: Similarly.\n+\t* nloop.c: Similarly.\n+\t* parse.c: Similarly.\n+\t* satisfy.c: Similarly.\n+\t* tasking.c: Similarly.\n+\t* tree.c: Similarly.\n+\t* typeck.c: Similarly.\n+\n 2001-11-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* Make-lang.in (CHILL.generated-manpages): New dummy target."}, {"sha": "b8b06eb0ca44bcbd2a83cbf2e357fea08855a4d2", "filename": "gcc/ch/actions.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Factions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Factions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Factions.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1279,12 +1279,12 @@ chill_handle_multi_case_label (selector, label)\n \t  tree high = TREE_OPERAND (label, 1);\n \t  if (TREE_CODE (low) != INTEGER_CST)\n \t    {\n-\t      error (\"Lower bound of range must be a discrete literal expression\");\n+\t      error (\"lower bound of range must be a discrete literal expression\");\n \t      expr = error_mark_node;\n \t    }\n \t  if (TREE_CODE (high) != INTEGER_CST)\n \t    {\n-\t      error (\"Upper bound of range must be a discrete literal expression\");\n+\t      error (\"upper bound of range must be a discrete literal expression\");\n \t      expr = error_mark_node;\n \t    }\n \t  if (expr != error_mark_node)\n@@ -1308,7 +1308,7 @@ chill_handle_multi_case_label (selector, label)\n     }\n   else\n     {\n-      error (\"The CASE label is not valid\");\n+      error (\"CASE label is not valid\");\n       expr = error_mark_node;\n     }\n \n@@ -1354,7 +1354,7 @@ build_multi_case_selector_expression (selector_list, label_spec)\n     }\n \n   if (labels != NULL_TREE || selector != NULL_TREE)\n-    error (\"The number of CASE selectors does not match the number of CASE label lists\");\n+    error (\"number of CASE selectors does not match the number of CASE label lists\");\n \n   return larg;\n }\n@@ -1603,7 +1603,7 @@ chill_expand_assignment (lhs, modifycode, rhs)\n \t  tree type = TREE_TYPE (decl);\n \t  if (CH_IS_BUFFER_MODE (type) || CH_IS_EVENT_MODE (type))\n \t    {\n-\t      error (\"You may not assign a value to a BUFFER or EVENT location\");\n+\t      error (\"you may not assign a value to a BUFFER or EVENT location\");\n \t      return;\n \t    }\n \t}\n@@ -1811,7 +1811,7 @@ expand_varying_length_assignment (lhs, rhs)\n       \n   if (! CH_LOCATION_P (lhs))\n     {\n-      error (\"Can only set LENGTH of array location\");\n+      error (\"can only set LENGTH of array location\");\n       return;\n     }\n "}, {"sha": "9b8592fdcee4f1ee50ae8777bdf99f1a2fc1ce33", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -2278,7 +2278,7 @@ find_granted_decls ()\n \t    }\n \t  if (!found)\n \t    {\n-\t      error_with_decl (alias, \"Nothing named `%s' to grant.\");\n+\t      error_with_decl (alias, \"nothing named `%s' to grant\");\n \t      DECL_ABSTRACT_ORIGIN (alias) = error_mark_node;\n \t    }\n \t}\n@@ -4615,7 +4615,7 @@ build_enumerator (name, value)\n       if (!unnamed_value_warned)\n \t{\n \t  unnamed_value_warned = 1;\n-\t  warning (\"undefined value in SET mode is obsolete and deprecated.\");\n+\t  warning (\"undefined value in SET mode is obsolete and deprecated\");\n \t}\n       sprintf (buf, \"__star_%d\", next_dummy_enum_value++);\n       name = get_identifier (buf);"}, {"sha": "9a1ab093ef1b7e40f452d72e2aa11d9c6eebf68a", "filename": "gcc/ch/expr.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexpr.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -684,9 +684,9 @@ check_arglist_length (args, min_length, max_length, name)\n {\n   int length = list_length (args);\n   if (length < min_length)\n-    error (\"Too few arguments in call to `%s'\", IDENTIFIER_POINTER (name));\n+    error (\"too few arguments in call to `%s'\", IDENTIFIER_POINTER (name));\n   else if (max_length != -1 && length > max_length)\n-    error (\"Too many arguments in call to `%s'\", IDENTIFIER_POINTER (name));\n+    error (\"too many arguments in call to `%s'\", IDENTIFIER_POINTER (name));\n   else\n     return length;\n   return -1;\n@@ -755,7 +755,7 @@ build_chill_indirect_ref (ptr, mode, do_empty_check)\n   /* check for ptr is really a POINTER */\n   if (TREE_CODE (type) != POINTER_TYPE)\n     {\n-      error (\"cannot dereference, not a pointer.\");\n+      error (\"cannot dereference, not a pointer\");\n       return error_mark_node;\n     }\n   \n@@ -765,10 +765,10 @@ build_chill_indirect_ref (ptr, mode, do_empty_check)\n       if (decl == NULL_TREE || TREE_CODE (decl) != TYPE_DECL)\n \t{\n \t  if (pass == 2)\n-\t    error (\"missing '.' operator or undefined mode name `%s'.\",\n+\t    error (\"missing '.' operator or undefined mode name `%s'\",\n \t\t   IDENTIFIER_POINTER (mode));\n #if 0\n-\t  error (\"You have forgotten the '.' operator which must\");\n+\t  error (\"you have forgotten the '.' operator which must\");\n \t  error (\" precede a STRUCT field reference, or `%s' is an undefined mode\", \n \t\t IDENTIFIER_POINTER (mode));\n #endif\n@@ -783,7 +783,7 @@ build_chill_indirect_ref (ptr, mode, do_empty_check)\n     }\n   else if (type == ptr_type_node)\n     {\n-      error (\"Can't dereference PTR value using unary `->'.\");\n+      error (\"can't dereference PTR value using unary `->'\");\n       return error_mark_node;\n     }\n \n@@ -906,7 +906,7 @@ resolve_component_ref (node)\n \t}\n     }\n \n-  error (\"No field named `%s'\", IDENTIFIER_POINTER (field_name));\n+  error (\"no field named `%s'\", IDENTIFIER_POINTER (field_name));\n   return error_mark_node;\n }\n \n@@ -1247,7 +1247,7 @@ build_chill_abstime (exprlist)\n \thad_errors = 1;\n       else if (TREE_CODE (TREE_TYPE (exp)) != INTEGER_TYPE)\n \t{\n-\t  error (\"argument %d to ABSTIME must be of integer type.\", i);\n+\t  error (\"argument %d to ABSTIME must be of integer type\", i);\n \t  had_errors = 1;\n \t}\n       tmp = TREE_CHAIN (tmp);\n@@ -1285,20 +1285,20 @@ build_allocate_memory_call (ptr, size)\n   /* check for ptr is referable */\n   if (! CH_REFERABLE (ptr))\n     {\n-      error (\"parameter 1 must be referable.\");\n+      error (\"parameter 1 must be referable\");\n       err++;\n     }\n    /* check for pointer */\n   else if (TREE_CODE (TREE_TYPE (ptr)) != POINTER_TYPE)\n     {\n-      error (\"mode mismatch in parameter 1.\");\n+      error (\"mode mismatch in parameter 1\");\n       err++;\n     }\n \n   /* check for size > 0 if it is a constant */\n   if (TREE_CODE (size) == INTEGER_CST && TREE_INT_CST_LOW (size) <= 0)\n     {\n-      error (\"parameter 2 must be a positive integer.\");\n+      error (\"parameter 2 must be a positive integer\");\n       err++;\n     }\n   if (err)\n@@ -1326,20 +1326,20 @@ build_allocate_global_memory_call (ptr, size)\n   /* check for ptr is referable */\n   if (! CH_REFERABLE (ptr))\n     {\n-      error (\"parameter 1 must be referable.\");\n+      error (\"parameter 1 must be referable\");\n       err++;\n     }\n   /* check for pointer */\n   else if (TREE_CODE (TREE_TYPE (ptr)) != POINTER_TYPE)\n     {\n-      error (\"mode mismatch in parameter 1.\");\n+      error (\"mode mismatch in parameter 1\");\n       err++;\n     }\n \n   /* check for size > 0 if it is a constant */\n   if (TREE_CODE (size) == INTEGER_CST && TREE_INT_CST_LOW (size) <= 0)\n     {\n-      error (\"parameter 2 must be a positive integer.\");\n+      error (\"parameter 2 must be a positive integer\");\n       err++;\n     }\n   if (err)\n@@ -1369,7 +1369,7 @@ build_return_memory (ptr)\n   /* check for pointer */\n   if (TREE_CODE (TREE_TYPE (ptr)) != POINTER_TYPE)\n     {\n-      error (\"mode mismatch in parameter 1.\");\n+      error (\"mode mismatch in parameter 1\");\n       return error_mark_node;\n     }\n \n@@ -1484,7 +1484,7 @@ build_chill_descr (expr)\n       /* check for expression is referable */\n       if (! CH_REFERABLE (expr))\n \t{\n-\t  error (\"expression for DESCR-builtin must be referable.\");\n+\t  error (\"expression for DESCR-builtin must be referable\");\n \t  return error_mark_node;\n \t}\n       \n@@ -1532,7 +1532,7 @@ build_chill_duration (expr, multiplier, fnname, maxvalue)\n \n   if (TREE_CODE (TREE_TYPE (expr)) != INTEGER_TYPE)\n     {\n-      error (\"argument to `%s' must be of integer type.\", IDENTIFIER_POINTER (fnname));\n+      error (\"argument to `%s' must be of integer type\", IDENTIFIER_POINTER (fnname));\n       return error_mark_node;\n     }\n \n@@ -1599,7 +1599,7 @@ build_allocate_getstack (mode, value, chill_name, fnname, filename, linenumber)\n   /* check if we have a mode */\n   if (TREE_CODE_CLASS (TREE_CODE (type)) != 't')\n     {\n-      error (\"First argument to `%s' must be a mode\", chill_name);\n+      error (\"first argument to `%s' must be a mode\", chill_name);\n       return error_mark_node;\n     }\n \n@@ -1738,7 +1738,7 @@ build_chill_inttime (t, loclist)\n   /* check first argument to be NEWMODE TIME */\n   if (TREE_TYPE (t) != abs_timing_type_node)\n     {\n-      error (\"argument 1 to INTTIME must be of mode TIME.\");\n+      error (\"argument 1 to INTTIME must be of mode TIME\");\n       had_errors = 1;\n     }\n \n@@ -1779,7 +1779,7 @@ build_chill_inttime (t, loclist)\n \t    }\n \t  /* FIXME: what's about ranges can't hold the result ?? */\n \t  if (write_error)\n-\t    error (\"%s.\", errmsg);\n+\t    error (\"%s\", errmsg);\n \t}\n       /* next location */\n       tmp = TREE_CHAIN (tmp);\n@@ -2107,7 +2107,7 @@ build_chill_num (expr)\n \t\t\t    need_unsigned);\n       if (temp == NULL_TREE)\n \t{\n-\t  error (\"No integer mode which matches expression's mode\");\n+\t  error (\"no integer mode which matches expression's mode\");\n \t  return integer_zero_node;\n \t}\n       temp = convert (temp, expr);\n@@ -2158,18 +2158,18 @@ build_chill_pred_or_succ (expr, op)\n   if (TREE_CODE (TREE_TYPE (expr)) == ENUMERAL_TYPE\n       && CH_ENUM_IS_NUMBERED (TREE_TYPE (expr)))\n     {\n-      error (\"Cannot take SUCC or PRED of a numbered SET\");\n+      error (\"cannot take SUCC or PRED of a numbered SET\");\n       return error_mark_node;\n     }\n   \n   if (TREE_CODE (TREE_TYPE (expr)) == POINTER_TYPE)\n     {\n       if (TREE_TYPE (TREE_TYPE (expr)) == void_type_node)\n \t{\n-\t  error (\"SUCC or PRED must not be done on a PTR.\");\n+\t  error (\"SUCC or PRED must not be done on a PTR\");\n \t  return error_mark_node;\n \t}\n-      pedwarn (\"SUCC or PRED for a reference type is not standard.\");\n+      pedwarn (\"SUCC or PRED for a reference type is not standard\");\n       return fold (build (op, TREE_TYPE (expr),\n \t\t\t  expr,\n \t\t\t  size_in_bytes (TREE_TYPE (TREE_TYPE (expr)))));\n@@ -2200,7 +2200,7 @@ build_chill_pred_or_succ (expr, op)\n   if (TREE_CODE (cond) == INTEGER_CST\n       && tree_int_cst_equal (cond, integer_one_node))\n     {\n-      error (\"Taking the %s of a value already at its %s value\",\n+      error (\"taking the %s of a value already at its %s value\",\n \t     op == PLUS_EXPR ? \"SUCC\" : \"PRED\",\n \t     op == PLUS_EXPR ? \"maximum\" : \"minimum\");\n       return error_mark_node;\n@@ -3456,7 +3456,7 @@ build_compare_string_expr (code, op0, op1)\n     case NE_EXPR:\n       return invert_truthvalue (build_compare_string_expr (EQ_EXPR, op0, op1));\n     default:\n-      error (\"Invalid operation on array of chars\");\n+      error (\"invalid operation on array of chars\");\n       return error_mark_node;\n     }\n \n@@ -3791,7 +3791,7 @@ finish_chill_binary_op (node)\n       op1 = convert (build_pointer_type (TREE_TYPE (op1)), op1);\n     if ((op0f || op1f)\n \t&& code != EQ_EXPR && code != NE_EXPR)\n-      error (\"Cannot use %s operator on PROC mode variable\",\n+      error (\"cannot use %s operator on PROC mode variable\",\n \t     tree_code_name[(int)code]);\n   }\n "}, {"sha": "f143aec47086d5ac2c9b2d7e87c7ce56b60c7b26", "filename": "gcc/ch/grant.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fgrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fgrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgrant.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -2822,7 +2822,7 @@ really_grant_this (decl, granted_decls)\n     }\n \n   /* this nerver should happen */\n-  error_with_decl (decl, \"function \\\"really_grant_this\\\" called for `%s'.\");\n+  error_with_decl (decl, \"function \\\"really_grant_this\\\" called for `%s'\");\n   return 1;\n }\n \f"}, {"sha": "d83f1bd8501bed91fe9a0bee925bdf6abbf4faf2", "filename": "gcc/ch/inout.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Finout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Finout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Finout.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -2028,7 +2028,7 @@ build_chill_modify (assoc, list)\n       attr = TREE_VALUE (TREE_CHAIN (list));\n       break;\n     default:\n-      error (\"Too many arguments in call to MODIFY\");\n+      error (\"too many arguments in call to MODIFY\");\n       had_errors = 1;\n       break;\n     }\n@@ -2542,7 +2542,7 @@ build_chill_readrecord (access, optionals)\n       /* we must have an index */\n       if (!len)\n \t{\n-\t  error (\"Too few arguments in call to `readrecord'\");\n+\t  error (\"too few arguments in call to `readrecord'\");\n \t  return error_mark_node;\n \t}\n       index = TREE_VALUE (optionals);\n@@ -2613,7 +2613,7 @@ build_chill_writerecord (access, optionals)\n   len = list_length (optionals);\n   if (indexmode != void_type_node && len != 2)\n     {\n-      error (\"Too few arguments in call to `writerecord'\");\n+      error (\"too few arguments in call to `writerecord'\");\n       return error_mark_node;\n     }\n   if (indexmode != void_type_node)\n@@ -3138,7 +3138,7 @@ process_io_list (exprlist, iolist_addr, iolist_length, iolist_rtx, do_read,\n \t\t\tenumname = \"__IO_LongRangeLoc\";\n \t\t      break;\n \t\t    default:\n-\t\t      error (\"Cannot process %d bits integer for READTEXT argument %d.\",\n+\t\t      error (\"cannot process %d bits integer for READTEXT argument %d\",\n \t\t\t     type_size, idxcnt + 1 + argoffset);\n \t\t      continue;\n \t\t    }\n@@ -3184,7 +3184,7 @@ process_io_list (exprlist, iolist_addr, iolist_length, iolist_rtx, do_read,\n \t\t\tenumname = \"__IO_LongLoc\";\n \t\t      break;\n \t\t    default:\n-\t\t      error (\"Cannot process %d bits integer for READTEXT argument %d.\",\n+\t\t      error (\"cannot process %d bits integer for READTEXT argument %d\",\n \t\t\t     type_size, idxcnt + 1 + argoffset);\n \t\t      continue;\n \t\t    }\n@@ -3259,7 +3259,7 @@ process_io_list (exprlist, iolist_addr, iolist_length, iolist_rtx, do_read,\n \t\t\t  goto try_long;\n \t\t\t}\n \t\t    }\n-\t\t  error (\"Cannot process %d bits integer WRITETEXT argument %d.\",\n+\t\t  error (\"cannot process %d bits integer WRITETEXT argument %d\",\n \t\t\t type_size, idxcnt + 1 + argoffset);\n \t\t  continue;\n \t\t}\n@@ -3722,7 +3722,7 @@ process_io_list (exprlist, iolist_addr, iolist_length, iolist_rtx, do_read,\n       else\n \t{\n \t  /* datatype is not yet implemented, issue a warning */\n-\t  error (\"cannot process mode of argument %d for %sTEXT.\", idxcnt + 1 + argoffset,\n+\t  error (\"cannot process mode of argument %d for %sTEXT\", idxcnt + 1 + argoffset,\n \t\t do_read ? \"READ\" : \"WRITE\");\n \t  enumname = \"__IO_UNUSED\";\n \t}\n@@ -4358,7 +4358,7 @@ build_chill_writetext (text_arg, exprlist)\n \t    }\n \t  if (exprlist == NULL_TREE)\n \t    {\n-\t      error (\"Too few arguments in call to `writetext'\");\n+\t      error (\"too few arguments in call to `writetext'\");\n \t      return error_mark_node;\n \t    }\n \t  format_str = TREE_VALUE (exprlist);\n@@ -4506,7 +4506,7 @@ build_chill_readtext (text_arg, exprlist)\n \t    }\n \t  if (exprlist == NULL_TREE)\n \t    {\n-\t      error (\"Too few arguments in call to `readtext'\");\n+\t      error (\"too few arguments in call to `readtext'\");\n \t      return error_mark_node;\n \t    }\n \t  format_str = TREE_VALUE (exprlist);"}, {"sha": "5c943fe60809861c62ffd08dfc15daf9efb91fca", "filename": "gcc/ch/lang.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -188,8 +188,8 @@ lang_decode_option (argc, argv)\n       explicit_ignore_case = 1;\n       if (special_UC)\n \t{\n-\t  error (\"Ignoring case upon input and\");\n-\t  error (\"making special words uppercase wouldn't work.\");\n+\t  error (\"ignoring case upon input and\");\n+\t  error (\"making special words uppercase wouldn't work\");\n \t}\n       else\n \tignore_case = 1;\n@@ -200,8 +200,8 @@ lang_decode_option (argc, argv)\n     {\n       if (explicit_ignore_case)\n \t{\n-\t  error (\"Making special words uppercase and\");\n-\t  error (\" ignoring case upon input wouldn't work.\");\n+\t  error (\"making special words uppercase and\");\n+\t  error (\" ignoring case upon input wouldn't work\");\n \t}\n       else\n \tspecial_UC = 1, ignore_case = 0;"}, {"sha": "393349b18fcbaad90b4093b1c09c018b8ceb3be2", "filename": "gcc/ch/loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Floop.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -523,7 +523,7 @@ build_loop_iterator (user_var, start_exp, step_exp, end_exp,\n \tip->itype = DO_LOC_VARYING;\n       else\n \t{\n-\t  error (\"Loop's IN expression is not a composite object\");\n+\t  error (\"loop's IN expression is not a composite object\");\n \t  return;\n \t}\n     }\n@@ -844,7 +844,7 @@ declare_temps ()\n \t      \n \t      if (TREE_CODE (TREE_TYPE (array_type)) == BOOLEAN_TYPE)\n \t\t{\n-\t\t  error (\"Can't iterate through array of BOOL\");\n+\t\t  error (\"can't iterate through array of BOOL\");\n \t\t  firstp->error_flag = 1;\n \t\t  return firstp->error_flag;\n \t\t}"}, {"sha": "2a7a4600fad775c8d37b66aab34d61143de995bf", "filename": "gcc/ch/nloop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fnloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fnloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fnloop.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -478,7 +478,7 @@ build_loop_iterator (user_var, start_exp, step_exp, end_exp,\n \tip->itype = DO_LOC_VARYING;\n       else\n \t{\n-\t  error (\"Loop's IN expression is not a composite object\");\n+\t  error (\"loop's IN expression is not a composite object\");\n \t  return;\n \t}\n     }\n@@ -814,7 +814,7 @@ declare_temps ()\n \t      \n \t      if (TREE_CODE (TREE_TYPE (array_type)) == BOOLEAN_TYPE)\n \t\t{\n-\t\t  error (\"Can't iterate through array of BOOL\");\n+\t\t  error (\"can't iterate through array of BOOL\");\n \t\t  ip->error_flag = 1;\n \t\t  return ip->error_flag;\n \t\t}"}, {"sha": "0c482dd116849fb969cb001b386f75cc098de1fc", "filename": "gcc/ch/parse.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fparse.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -223,7 +223,7 @@ end_function ()\n \t  if (result_never_set\n \t      && TREE_CODE (TREE_TYPE (TREE_TYPE (current_function_decl)))\n \t      != VOID_TYPE)\n-\t    warning (\"No RETURN or RESULT in procedure\");\n+\t    warning (\"no RETURN or RESULT in procedure\");\n \t  chill_expand_return (NULL_TREE, 1);\n \t}\n     }\n@@ -2385,7 +2385,7 @@ parse_do_action (label)\n     {\n       push_handler ();\n       parse_opt_actions ();\n-      expect (OD, \"Missing 'OD' after 'DO'\");\n+      expect (OD, \"missing 'OD' after 'DO'\");\n       parse_opt_handler ();\n       parse_opt_end_label_semi_colon (label);\n       return;\n@@ -2424,7 +2424,7 @@ parse_do_action (label)\n   parse_opt_actions ();\n   if (! ignoring)\n     build_loop_end (); \n-  expect (OD, \"Missing 'OD' after 'DO'\");\n+  expect (OD, \"missing 'OD' after 'DO'\");\n   /* Note that the handler is inside the reach of the DO. */\n   parse_opt_handler ();\n   end_loop_scope (label);\n@@ -2942,7 +2942,7 @@ parse_action ()\n \n  no_handler_action:\n   if (parse_opt_handler () != NULL_TREE && pass == 1)\n-    error (\"no handler is permitted on this action.\");\n+    error (\"no handler is permitted on this action\");\n   parse_semi_colon ();\n   return 1;\n \n@@ -4326,7 +4326,7 @@ set_yydebug (value)\n #if YYDEBUG != 0\n   yydebug = value;\n #else\n-  warning (\"YYDEBUG not defined.\");\n+  warning (\"YYDEBUG not defined\");\n #endif\n }\n #endif"}, {"sha": "00d90f894c33db54ca0202e1e29e4bae95b2f9f5", "filename": "gcc/ch/satisfy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fsatisfy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Fsatisfy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fsatisfy.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -87,7 +87,7 @@ safe_satisfy_decl (decl, prev_chain)\n \t    {\n \t      if (!pointer_type_breaks_cycle)\n \t\t{\n-\t\t  error_with_decl (decl, \"Cycle: `%s' depends on ...\");\n+\t\t  error_with_decl (decl, \"cycle: `%s' depends on ...\");\n \t\t  cycle_error_print (prev_chain, decl);\n \t\t  error_with_decl (decl, \"  `%s'\");\n \t\t  return error_mark_node;"}, {"sha": "d1b7905cbad5a194cae5f5826d72bbad3cf8cd0b", "filename": "gcc/ch/tasking.c", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Ftasking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Ftasking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftasking.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -167,7 +167,7 @@ generate_tasking_code_variable (name, tasking_code_ptr, quasi_flag)\n       /* check for value should be assigned is out of range */\n       if (TREE_INT_CST_LOW (*tasking_code_ptr) >\n \t  TREE_INT_CST_LOW (TYPE_MAX_VALUE (chill_taskingcode_type_node)))\n-\t  error (\"Tasking code %ld out of range for `%s'.\",\n+\t  error (\"tasking code %ld out of range for `%s'\",\n \t\t (long) TREE_INT_CST_LOW (*tasking_code_ptr),\n \t\t IDENTIFIER_POINTER (name));\n     }\n@@ -215,7 +215,7 @@ decl_tasking_code_variable (name, tasking_code_ptr, quasi_flag)\n       /* check for value should be assigned is out of range */\n       if (TREE_INT_CST_LOW (*tasking_code_ptr) >\n \t  TREE_INT_CST_LOW (TYPE_MAX_VALUE (chill_taskingcode_type_node)))\n-\t  error (\"Tasking code %ld out of range for `%s'.\",\n+\t  error (\"tasking code %ld out of range for `%s'\",\n \t\t (long) TREE_INT_CST_LOW (*tasking_code_ptr),\n \t\t IDENTIFIER_POINTER (name));\n     }\n@@ -281,7 +281,7 @@ make_process_struct (name, processparlist)\n \t    {\n \t      for (field = parnamelist; field != NULL_TREE;\n \t\t   field = TREE_CHAIN (field))\n-\t        error (\"invalid attribute for argument `%s' (only IN or LOC allowed).\",\n+\t        error (\"invalid attribute for argument `%s' (only IN or LOC allowed)\",\n \t\t       IDENTIFIER_POINTER (TREE_VALUE (field)));\n \t    }\n \t}\n@@ -551,7 +551,7 @@ build_start_process (process_name, copynum,\n       else if (TREE_CODE (process_decl) != FUNCTION_DECL\n \t  || ! CH_DECL_PROCESS (process_decl))\n \t{\n-\t  error (\"You may only START a process, not a proc\");\n+\t  error (\"you may only START a process, not a proc\");\n \t  process_decl = NULL_TREE;\n \t}\n       else if (DECL_EXTERNAL (process_decl))\n@@ -587,7 +587,7 @@ build_start_process (process_name, copynum,\n       if (optset == NULL_TREE) ;\n       else if (!CH_REFERABLE (optset))\n \t{\n-\t  error (\"SET expression not a location.\");\n+\t  error (\"SET expression not a location\");\n \t  optset = NULL_TREE;\n \t}\n       else if (!CH_IS_INSTANCE_MODE (TREE_TYPE (optset)))\n@@ -1004,7 +1004,7 @@ build_gen_code (decl)\n     result = (tree)(DECL_TASKING_CODE_DECL (decl));\n   else\n     {\n-      error (\"GEN_CODE argument must be a process or signal name.\");\n+      error (\"GEN_CODE argument must be a process or signal name\");\n       return error_mark_node;\n     }\n   CH_DERIVED_FLAG (result) = 1;\n@@ -1136,7 +1136,7 @@ build_queue_length (buf_ev)\n                       tree_cons (NULL_TREE, arg2, NULL_TREE)));\n     }\n \n-  error (\"QUEUE_LENGTH argument must be a BUFFER/EVENT location.\");\n+  error (\"QUEUE_LENGTH argument must be a BUFFER/EVENT location\");\n   return error_mark_node;\n }\n \f\n@@ -1395,7 +1395,7 @@ expand_send_signal (sigmsgbuffer, optroutinginfo, optsendto,\n \t  /* issue a warning in case of -Wall */\n \t  if (extra_warnings)\n \t    {\n-\t      warning (\"Signal sent without priority\");\n+\t      warning (\"signal sent without priority\");\n \t      warning (\" and no default priority was set.\");\n \t      warning (\" PRIORITY defaulted to 0\");\n \t    }\n@@ -1433,7 +1433,7 @@ expand_send_signal (sigmsgbuffer, optroutinginfo, optsendto,\n                           tree_cons (NULL_TREE, copy_number, NULL_TREE)));\n \t  /* as our system doesn't allow that and Z.200 specifies it,\n \t     we issue a warning */\n-\t  warning (\"SEND to ANY copy of process `%s'.\", IDENTIFIER_POINTER (process_name));\n+\t  warning (\"SEND to ANY copy of process `%s'\", IDENTIFIER_POINTER (process_name));\n         }\n     }\n   else if (! CH_IS_INSTANCE_MODE (TREE_TYPE (optsendto)))\n@@ -1721,7 +1721,7 @@ build_receive_case_if_generated()\n {\n   if (!current_rc_state)\n     {\n-      error (\"internal error: RECEIVE CASE stack invalid.\");\n+      error (\"internal error: RECEIVE CASE stack invalid\");\n       abort ();\n     }\n   return current_rc_state->if_generated;\n@@ -1953,13 +1953,13 @@ build_receive_buffer_case_label (buffer, loclist)\n \n   if (! CH_REFERABLE (buffer))\n     {\n-      error (\"BUFFER in RECEIVE CASE alternative must be a location.\");\n+      error (\"BUFFER in RECEIVE CASE alternative must be a location\");\n       return error_mark_node;\n     }\n \n   if (TREE_CHAIN (loclist) != NULL_TREE)\n     {\n-      error (\"buffer receive alternative requires only 1 defining occurrence.\");\n+      error (\"buffer receive alternative requires only 1 defining occurrence\");\n       return error_mark_node;\n     }\n \n@@ -2040,13 +2040,13 @@ build_receive_buffer_case_label (buffer, loclist)\n     had_errors = 1;\n   else if (! CH_COMPATIBLE (var, buftype))\n     {\n-      error (\"incompatible modes in receive buffer alternative.\");\n+      error (\"incompatible modes in receive buffer alternative\");\n       had_errors = 1;\n     }\n \n   if (! CH_LOCATION_P (var))\n     {\n-      error (\"defining occurrence in receive buffer alternative must be a location.\");\n+      error (\"defining occurrence in receive buffer alternative must be a location\");\n       had_errors = 1;\n     }\n \n@@ -2083,13 +2083,13 @@ build_receive_case_label (signame, loclist)\n     {\n       if (loclist == NULL_TREE)\n \t{\n-\t  error (\"buffer receive alternative without `IN location'.\");\n+\t  error (\"buffer receive alternative without `IN location'\");\n \t  return error_mark_node;\n \t}\n       return build_receive_buffer_case_label (signame, loclist);\n     }\n \n-  error (\"RECEIVE CASE alternative must specify a SIGNAL name or BUFFER location.\");\n+  error (\"RECEIVE CASE alternative must specify a SIGNAL name or BUFFER location\");\n   return error_mark_node;\n }\n \f\n@@ -2366,7 +2366,7 @@ void expand_continue_event (evloc)\n \n   if (! CH_REFERABLE (evloc) || ! CH_IS_EVENT_MODE (TREE_TYPE (evloc)))\n     {\n-      error (\"CONTINUE requires an event location.\");\n+      error (\"CONTINUE requires an event location\");\n       return;\n     }\n \n@@ -2500,7 +2500,7 @@ build_delay_case_start (optset, optpriority)\n     optpriority = integer_zero_node;\n   else if (TREE_CODE (TREE_TYPE (optpriority)) != INTEGER_TYPE)\n     {\n-      error (\"PRIORITY must be of integer type.\");\n+      error (\"PRIORITY must be of integer type\");\n       optpriority = integer_zero_node;\n     }\n \n@@ -2578,7 +2578,7 @@ build_delay_case_label (eventlist, if_or_elseif)\n \ttemp1 = null_pointer_node;\n       else if (! CH_IS_EVENT_MODE (TREE_TYPE (event)) || ! CH_REFERABLE (event))\n \t{\n-\t  error (\"delay alternative must be an EVENT location.\");\n+\t  error (\"delay alternative must be an EVENT location\");\n \t  temp1 = null_pointer_node;\n \t}\n       else\n@@ -2753,7 +2753,7 @@ build_delay_action (event, optpriority)\n     had_errors = 1;\n   else if (! CH_IS_EVENT_MODE (TREE_TYPE (event)) || ! CH_REFERABLE (event))\n     {\n-      error (\"DELAY action requires an event location.\");\n+      error (\"DELAY action requires an event location\");\n       had_errors = 1;\n     }\n \n@@ -2764,7 +2764,7 @@ build_delay_action (event, optpriority)\n \treturn;\n       if (TREE_CODE (TREE_TYPE (optpriority)) != INTEGER_TYPE)\n \t{\n-\t  error (\"PRIORITY in DELAY action must be of integer type.\");\n+\t  error (\"PRIORITY in DELAY action must be of integer type\");\n \t  return;\n \t}\n     }\n@@ -2774,7 +2774,7 @@ build_delay_action (event, optpriority)\n       if (extra_warnings)\n \t{\n \t  warning (\"DELAY action without priority.\");\n-\t  warning (\" PRIORITY defaulted to 0.\");\n+\t  warning (\" PRIORITY defaulted to 0\");\n \t}\n       optpriority = integer_zero_node;\n     }\n@@ -2864,7 +2864,7 @@ expand_send_buffer (buffer, value, optpriority, optwith, optto)\n     {\n       if (! CH_IS_BUFFER_MODE (TREE_TYPE (buffer)) || ! CH_REFERABLE (buffer))\n \t{\n-\t  error (\"send buffer action requires a BUFFER location.\");\n+\t  error (\"send buffer action requires a BUFFER location\");\n \t  had_errors = 1;\n \t}\n       else\n@@ -2881,7 +2881,7 @@ expand_send_buffer (buffer, value, optpriority, optwith, optto)\n     {\n       if (TREE_CHAIN (value) != NULL_TREE)\n \t{\n-\t  error (\"there must be only 1 value for send buffer action.\");\n+\t  error (\"there must be only 1 value for send buffer action\");\n \t  had_errors = 1;\n \t}\n       else\n@@ -2902,13 +2902,13 @@ expand_send_buffer (buffer, value, optpriority, optwith, optto)\n \t\t  value = convert (TREE_TYPE (buffer_mode_decl), value);\n \t\t  if (value == NULL_TREE || TREE_CODE (value) == ERROR_MARK)\n \t\t    {\n-\t\t      error (\"convert failed for send buffer action.\");\n+\t\t      error (\"convert failed for send buffer action\");\n \t\t      had_errors = 1;\n \t\t    }\n \t\t}\n \t      else\n \t\t{\n-\t\t  error (\"incompatible modes in send buffer action.\");\n+\t\t  error (\"incompatible modes in send buffer action\");\n \t\t  had_errors = 1;\n \t\t}\n \t    }\n@@ -2923,9 +2923,9 @@ expand_send_buffer (buffer, value, optpriority, optwith, optto)\n \t  /* issue a warning in case of -Wall */\n \t  if (extra_warnings)\n \t    {\n-\t      warning (\"Buffer sent without priority\");\n+\t      warning (\"buffer sent without priority\");\n \t      warning (\" and no default priority was set.\");\n-\t      warning (\" PRIORITY defaulted to 0.\");\n+\t      warning (\" PRIORITY defaulted to 0\");\n \t    }\n \t  optpriority = integer_zero_node;\n \t}\n@@ -2936,18 +2936,18 @@ expand_send_buffer (buffer, value, optpriority, optwith, optto)\n     had_errors = 1;\n   else if (TREE_CODE (TREE_TYPE (optpriority)) != INTEGER_TYPE)\n     {\n-      error (\"PRIORITY must be of integer type.\");\n+      error (\"PRIORITY must be of integer type\");\n       had_errors = 1;\n     }\n \n   if (optwith != NULL_TREE)\n     {\n-      error (\"WITH not allowed for send buffer action.\");\n+      error (\"WITH not allowed for send buffer action\");\n       had_errors = 1;\n     }\n   if (optto != NULL_TREE)\n     {\n-      error (\"TO not allowed for send buffer action.\");\n+      error (\"TO not allowed for send buffer action\");\n       had_errors = 1;\n     }\n   if (had_errors)"}, {"sha": "432ded24ce2eb35eabca910cc306958081dc54b4", "filename": "gcc/ch/timing.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Ftiming.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Ftiming.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftiming.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -221,7 +221,7 @@ build_at_action (t)\n   \n   if (TREE_TYPE (abstime) != abs_timing_type_node)\n     {\n-      error (\"absolute time value must be of mode TIME.\");\n+      error (\"absolute time value must be of mode TIME\");\n       abstime = convert (abs_timing_type_node, build_int_2 (0, 0));\n     }\n   filename = force_addr_of (get_chill_filename ());\n@@ -278,7 +278,7 @@ build_cycle_start (t)\n       \n       if (TREE_TYPE (duration_value) != duration_timing_type_node)\n \t{\n-\t  error (\"duration primitive value must be of mode DURATION.\");\n+\t  error (\"duration primitive value must be of mode DURATION\");\n \t  duration_value = convert (duration_timing_type_node, build_int_2 (0,0));\n \t}\n       TREE_PURPOSE (TREE_PURPOSE (toid)) = duration_value;\n@@ -361,7 +361,7 @@ build_after_start (duration, delay_flag)\n       \n       if (TREE_TYPE (duration) != duration_timing_type_node)\n         {\n-\t  error (\"duration primitive value must be of mode DURATION.\");\n+\t  error (\"duration primitive value must be of mode DURATION\");\n \t  duration = convert (duration_timing_type_node, build_int_2 (0,0));\n         }\n       TREE_PURPOSE (value) = decl_temp1 (get_identifier (\"AFTER_duration\"),"}, {"sha": "e9fa6504af34cd2f00ebd85b6329c2ef3a2b477b", "filename": "gcc/ch/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftree.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -109,7 +109,7 @@ layout_powerset_type (type)\n \n   if (! discrete_type_p (domain))\n     {\n-      error (\"Can only build a powerset from a discrete mode\");\n+      error (\"can only build a powerset from a discrete mode\");\n       return error_mark_node;\n     }\n "}, {"sha": "ab806bbbe3a4c95ff4f5141b6941ea94c0033d8c", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -2811,29 +2811,29 @@ apply_chill_array_layout (array_type)\n   if (TREE_VALUE (temp) != NULL_TREE)\n     {\n       if (! host_integerp (TREE_VALUE (temp), 0))\n-\terror (\"Stepsize in STEP must be an integer constant\");\n+\terror (\"stepsize in STEP must be an integer constant\");\n       else\n \t{\n \t  if (tree_int_cst_sgn (TREE_VALUE (temp)) <= 0)\n-\t    error (\"Stepsize in STEP must be > 0\");\n+\t    error (\"stepsize in STEP must be > 0\");\n \t  else\n \t    stepsize_specified = 1;\n \n \t  stepsize = tree_low_cst (TREE_VALUE (temp), 1);\n \t  if (stepsize != natural_length)\n-\t    sorry (\"Stepsize in STEP must be the natural width of the array element mode\");\n+\t    sorry (\"stepsize in STEP must be the natural width of the array element mode\");\n \t}\n     }\n \n   temp = TREE_PURPOSE (temp);\n   if (! host_integerp (TREE_PURPOSE (temp), 0))\n-    error (\"Starting word in POS must be an integer constant\");\n+    error (\"starting word in POS must be an integer constant\");\n   else\n     {\n       if (tree_int_cst_sgn (TREE_PURPOSE (temp)) < 0)\n-\terror (\"Starting word in POS must be >= 0\");\n+\terror (\"starting word in POS must be >= 0\");\n       if (! integer_zerop (TREE_PURPOSE (temp)))\n-\tsorry (\"Starting word in POS within STEP must be 0\");\n+\tsorry (\"starting word in POS within STEP must be 0\");\n \n       word = tree_low_cst (TREE_PURPOSE (temp), 0);\n     }\n@@ -2845,25 +2845,25 @@ apply_chill_array_layout (array_type)\n       int wordsize = TYPE_PRECISION (chill_integer_type_node);\n       if (! host_integerp (TREE_PURPOSE (temp), 0))\n \t{\n-\t  error (\"Starting bit in POS must be an integer constant\");\n+\t  error (\"starting bit in POS must be an integer constant\");\n \t  start_bit_error = 1;\n \t}\n       else\n \t{\n \t  if (! integer_zerop (TREE_PURPOSE (temp)))\n-\t    sorry (\"Starting bit in POS within STEP must be 0\");\n+\t    sorry (\"starting bit in POS within STEP must be 0\");\n \n \t  if (tree_int_cst_sgn (TREE_PURPOSE (temp)) < 0)\n \t    {\n-\t      error (\"Starting bit in POS must be >= 0\");\n+\t      error (\"starting bit in POS must be >= 0\");\n \t      start_bit = 0;\n \t      start_bit_error = 1;\n \t    }\n \t  \n \t  start_bit = tree_low_cst (TREE_PURPOSE (temp), 0);\n \t  if (start_bit >= wordsize)\n \t    {\n-\t      error (\"Starting bit in POS must be < the width of a word\");\n+\t      error (\"starting bit in POS must be < the width of a word\");\n \t      start_bit = 0;\n \t      start_bit_error = 1;\n \t    }\n@@ -2877,21 +2877,21 @@ apply_chill_array_layout (array_type)\n \t    {\n \t      if (! host_integerp (TREE_VALUE (temp), 0))\n \t\t{\n-\t\t  error (\"Length in POS must be an integer constant\");\n+\t\t  error (\"length in POS must be an integer constant\");\n \t\t  length_error = 1;\n \t\t}\n \t      else\n \t\t{\n \t\t  length = tree_low_cst (TREE_VALUE (temp), 0);\n \t\t  if (length <= 0)\n-\t\t    error (\"Length in POS must be > 0\");\n+\t\t    error (\"length in POS must be > 0\");\n \t\t}\n \t    }\n \t  else\n \t    {\n \t      if (! host_integerp (TREE_VALUE (temp), 0))\n \t\t{\n-\t\t  error (\"End bit in POS must be an integer constant\");\n+\t\t  error (\"end bit in POS must be an integer constant\");\n \t\t  length_error = 1;\n \t\t}\n \t      else\n@@ -2900,13 +2900,13 @@ apply_chill_array_layout (array_type)\n \n \t\t  if (end_bit < start_bit)\n \t\t    {\n-\t\t      error (\"End bit in POS must be >= the start bit\");\n+\t\t      error (\"end bit in POS must be >= the start bit\");\n \t\t      end_bit = wordsize - 1;\n \t\t      length_error = 1;\n \t\t    }\n \t\t  else if (end_bit >= wordsize)\n \t\t    {\n-\t\t      error (\"End bit in POS must be < the width of a word\");\n+\t\t      error (\"end bit in POS must be < the width of a word\");\n \t\t      end_bit = wordsize - 1;\n \t\t      length_error = 1;\n \t\t    }\n@@ -2918,12 +2918,12 @@ apply_chill_array_layout (array_type)\n \t    }\n \n \t  if (! length_error && length != natural_length)\n-\t    sorry (\"The length specified on POS within STEP must be the natural length of the array element type\");\n+\t    sorry (\"the length specified on POS within STEP must be the natural length of the array element type\");\n \t}\n     }\n \n   if (! length_error && stepsize_specified && stepsize < length)\n-    error (\"Step size in STEP must be >= the length in POS\");\n+    error (\"step size in STEP must be >= the length in POS\");\n \n   if (length == 1)\n     TYPE_PACKED (array_type) = 1;\n@@ -3128,14 +3128,14 @@ apply_chill_field_layout (decl, next_struct_offset)\n \n   if (! host_integerp (TREE_PURPOSE (temp), 0))\n     {\n-      error (\"Starting word in POS must be an integer constant\");\n+      error (\"starting word in POS must be an integer constant\");\n       pos_error = 1;\n     }\n   else\n     {\n       if (tree_int_cst_sgn (TREE_PURPOSE (temp)) < 0)\n \t{\n-\t  error (\"Starting word in POS must be >= 0\");\n+\t  error (\"starting word in POS must be >= 0\");\n \t  word = 0;\n \t  pos_error = 1;\n \t}\n@@ -3152,23 +3152,23 @@ apply_chill_field_layout (decl, next_struct_offset)\n     {\n       if (! host_integerp (TREE_PURPOSE (temp), 0))\n \t{\n-\t  error (\"Starting bit in POS must be an integer constant\");\n+\t  error (\"starting bit in POS must be an integer constant\");\n \t  start_bit = *next_struct_offset - offset;\n \t  pos_error = 1;\n \t}\n       else\n \t{\n \t  if (tree_int_cst_sgn (TREE_PURPOSE (temp)) < 0)\n \t    {\n-\t      error (\"Starting bit in POS must be >= 0\");\n+\t      error (\"starting bit in POS must be >= 0\");\n \t      start_bit = *next_struct_offset - offset;\n \t      pos_error = 1;\n \t    }\n \n \t  start_bit = tree_low_cst (TREE_PURPOSE (temp), 0);\n \t  if (start_bit >= wordsize)\n \t    {\n-\t      error (\"Starting bit in POS must be < the width of a word\");\n+\t      error (\"starting bit in POS must be < the width of a word\");\n \t      start_bit = *next_struct_offset - offset;\n \t      pos_error = 1;\n \t    }\n@@ -3182,14 +3182,14 @@ apply_chill_field_layout (decl, next_struct_offset)\n \t    {\n \t      if (! host_integerp (TREE_VALUE (temp), 0))\n \t\t{\n-\t\t  error (\"Length in POS must be an integer constant\");\n+\t\t  error (\"length in POS must be an integer constant\");\n \t\t  pos_error = 1;\n \t\t}\n \t      else\n \t\t{\n \t\t  if (tree_int_cst_sgn (TREE_VALUE (temp)) < 0)\n \t\t    {\n-\t\t      error (\"Length in POS must be > 0\");\n+\t\t      error (\"length in POS must be > 0\");\n \t\t      length = natural_length;\n \t\t      pos_error = 1;\n \t\t    }\n@@ -3202,7 +3202,7 @@ apply_chill_field_layout (decl, next_struct_offset)\n \t    {\n \t      if (! host_integerp (TREE_VALUE (temp), 0))\n \t\t{\n-\t\t  error (\"End bit in POS must be an integer constant\");\n+\t\t  error (\"end bit in POS must be an integer constant\");\n \t\t  pos_error = 1;\n \t\t}\n \t      else\n@@ -3211,12 +3211,12 @@ apply_chill_field_layout (decl, next_struct_offset)\n \n \t\t  if (end_bit < start_bit)\n \t\t    {\n-\t\t      error (\"End bit in POS must be >= the start bit\");\n+\t\t      error (\"end bit in POS must be >= the start bit\");\n \t\t      pos_error = 1;\n \t\t    }\n \t\t  else if (end_bit >= wordsize)\n \t\t    {\n-\t\t      error (\"End bit in POS must be < the width of a word\");\n+\t\t      error (\"end bit in POS must be < the width of a word\");\n \t\t      pos_error = 1;\n \t\t    }\n \t\t  else\n@@ -3226,7 +3226,7 @@ apply_chill_field_layout (decl, next_struct_offset)\n \n \t  if (length != natural_length && ! pos_error)\n \t    {\n-\t      sorry (\"The length specified on POS must be the natural length of the field type\");\n+\t      sorry (\"the length specified on POS must be the natural length of the field type\");\n \t      length = natural_length;\n \t    }\n \t}\n@@ -3298,7 +3298,7 @@ layout_chill_struct_type (t)\n     }\n \n   if (pos_error)\n-    error (\"If one field has a POS layout, then all fields must have a POS layout\");\n+    error (\"if one field has a POS layout, then all fields must have a POS layout\");\n \n   /* Now DECL_INITIAL is null on all fields.  */\n "}, {"sha": "bd6e6997a79a925498f3aed1fa9d779c6d5e9a62", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -584,27 +584,27 @@ arm_override_options ()\n   \n   if (TARGET_THUMB && !(insn_flags & FL_THUMB))\n     {\n-      warning (\"target CPU does not support THUMB instructions.\");\n+      warning (\"target CPU does not support THUMB instructions\");\n       target_flags &= ~ARM_FLAG_THUMB;\n     }\n \n   if (TARGET_APCS_FRAME && TARGET_THUMB)\n     {\n-      /* warning (\"ignoring -mapcs-frame because -mthumb was used.\"); */\n+      /* warning (\"ignoring -mapcs-frame because -mthumb was used\"); */\n       target_flags &= ~ARM_FLAG_APCS_FRAME;\n     }\n \n   /* TARGET_BACKTRACE calls leaf_function_p, which causes a crash if done\n      from here where no function is being compiled currently.  */\n   if ((target_flags & (THUMB_FLAG_LEAF_BACKTRACE | THUMB_FLAG_BACKTRACE))\n       && TARGET_ARM)\n-    warning (\"enabling backtrace support is only meaningful when compiling for the Thumb.\");\n+    warning (\"enabling backtrace support is only meaningful when compiling for the Thumb\");\n \n   if (TARGET_ARM && TARGET_CALLEE_INTERWORKING)\n-    warning (\"enabling callee interworking support is only meaningful when compiling for the Thumb.\");\n+    warning (\"enabling callee interworking support is only meaningful when compiling for the Thumb\");\n \n   if (TARGET_ARM && TARGET_CALLER_INTERWORKING)\n-    warning (\"enabling caller interworking support is only meaningful when compiling for the Thumb.\");\n+    warning (\"enabling caller interworking support is only meaningful when compiling for the Thumb\");\n \n   /* If interworking is enabled then APCS-32 must be selected as well.  */\n   if (TARGET_INTERWORK)\n@@ -643,7 +643,7 @@ arm_override_options ()\n     arm_pic_register = 10;\n   \n   if (TARGET_APCS_FLOAT)\n-    warning (\"Passing floating point arguments in fp regs not yet supported\");\n+    warning (\"passing floating point arguments in fp regs not yet supported\");\n   \n   /* Initialise boolean versions of the flags, for use in the arm.md file.  */\n   arm_fast_multiply = (insn_flags & FL_FAST_MULT) != 0;\n@@ -672,7 +672,7 @@ arm_override_options ()\n       else if (streq (target_fp_name, \"3\"))\n \tarm_fpu_arch = FP_SOFT3;\n       else\n-\terror (\"Invalid floating point emulation option: -mfpe-%s\",\n+\terror (\"invalid floating point emulation option: -mfpe-%s\",\n \t       target_fp_name);\n     }\n   else\n@@ -696,7 +696,7 @@ arm_override_options ()\n       if (size == 8 || size == 32)\n \tarm_structure_size_boundary = size;\n       else\n-\twarning (\"Structure size boundary can only be set to 8 or 32\");\n+\twarning (\"structure size boundary can only be set to 8 or 32\");\n     }\n \n   if (arm_pic_register_string != NULL)\n@@ -713,7 +713,7 @@ arm_override_options ()\n \t  || pic_register == HARD_FRAME_POINTER_REGNUM\n \t  || pic_register == STACK_POINTER_REGNUM\n \t  || pic_register >= PC_REGNUM)\n-\terror (\"Unable to use '%s' for PIC register\", arm_pic_register_string);\n+\terror (\"unable to use '%s' for PIC register\", arm_pic_register_string);\n       else\n \tarm_pic_register = pic_register;\n     }\n@@ -9120,7 +9120,7 @@ arm_debugger_arg_offset (value, addr)\n   if (value == 0)\n     {\n       debug_rtx (addr);\n-      warning (\"Unable to compute real location of stacked parameter\");\n+      warning (\"unable to compute real location of stacked parameter\");\n       value = 8; /* XXX magic hack */\n     }\n \n@@ -10003,7 +10003,7 @@ thumb_expand_prologue ()\n \n   if (IS_INTERRUPT (func_type))\n     {\n-      error (\"Interrupt Service Routines cannot be coded in Thumb mode.\");\n+      error (\"interrupt Service Routines cannot be coded in Thumb mode\");\n       return;\n     }\n "}, {"sha": "36a755d6a2ae1e5ba31c7bb86b03e62ea414d8af", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -253,7 +253,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n \n #define CPP_INTERWORK_SPEC \"\t\t\t\t\t\t\\\n %{mthumb-interwork:\t\t\t\t\t\t\t\\\n-  %{mno-thumb-interwork: %eIncompatible interworking options}\t\t\\\n+  %{mno-thumb-interwork: %eincompatible interworking options}\t\t\\\n   -D__THUMB_INTERWORK__}\t\t\t\t\t\t\\\n %{!mthumb-interwork:%{!mno-thumb-interwork:%(cpp_interwork_default)}}\t\\\n \""}, {"sha": "2a3ff910c6330e1fcaceae85ee86e5f74e56400c", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -194,7 +194,7 @@ avr_override_options ()\n \n   if (!t->name)\n     {\n-      fprintf (stderr, \"Unknown MCU `%s' specified\\nKnown MCU names:\\n\",\n+      fprintf (stderr, \"unknown MCU `%s' specified\\nKnown MCU names:\\n\",\n \t       avr_mcu_name);\n       for (t = avr_mcu_types; t->name; t++)\n \tfprintf (stderr,\"   %s\\n\", t->name);\n@@ -1039,15 +1039,15 @@ print_operand (file, x, code)\n       else if (code == 'o')\n \t{\n \t  if (GET_CODE (addr) != PLUS)\n-\t    fatal_insn (\"Bad address, not (reg+disp):\", addr);\n+\t    fatal_insn (\"bad address, not (reg+disp):\", addr);\n \n \t  print_operand (file, XEXP (addr, 1), 0);\n \t}\n       else if (GET_CODE (addr) == PLUS)\n \t{\n \t  print_operand_address (file, XEXP (addr,0));\n \t  if (REGNO (XEXP (addr, 0)) == REG_X)\n-\t    fatal_insn (\"Internal compiler bug.\\nBad address:\"\n+\t    fatal_insn (\"internal compiler error.  Bad address:\"\n \t\t\t,addr);\n \t  fputc ('+', file);\n \t  print_operand (file, XEXP (addr,1), code);\n@@ -1060,7 +1060,7 @@ print_operand (file, x, code)\n       long val;\n       REAL_VALUE_TYPE rv;\n       if (GET_MODE (x) != SFmode)\n-\tfatal_insn (\"Internal compiler bug. Unknown mode:\", x);\n+\tfatal_insn (\"internal compiler error.  Unknown mode:\", x);\n       REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n       REAL_VALUE_TO_TARGET_SINGLE (rv, val);\n       asm_fprintf (file, \"0x%lx\", val);\n@@ -1768,7 +1768,7 @@ output_movhi (insn, operands, l)\n       operands[1] = src;\n       return \"\";\n     }\n-  fatal_insn (\"Invalid insn:\", insn);\n+  fatal_insn (\"invalid insn:\", insn);\n   return \"\";\n }\n \n@@ -1805,7 +1805,7 @@ out_movqi_r_mr (insn, op, l)\n \t{\n \t  int disp = INTVAL (XEXP (x,1));\n \t  if (REGNO (XEXP (x,0)) != REG_Y)\n-\t    fatal_insn (\"Incorrect insn:\",insn);\n+\t    fatal_insn (\"incorrect insn:\",insn);\n \n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (src)))\n \t    return *l = 3, (AS2 (adiw,r28,%o1-63) CR_TAB\n@@ -1891,7 +1891,7 @@ out_movhi_r_mr (insn, op, l)\n       if (disp > MAX_LD_OFFSET (GET_MODE (src)))\n \t{\n \t  if (REGNO (XEXP (base, 0)) != REG_Y)\n-\t    fatal_insn (\"Incorrect insn:\",insn);\n+\t    fatal_insn (\"incorrect insn:\",insn);\n \t  \n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (src)))\n \t    return *l = 4, (AS2 (adiw,r28,%o1-62) CR_TAB\n@@ -1940,7 +1940,7 @@ out_movhi_r_mr (insn, op, l)\n   else if (GET_CODE (base) == PRE_DEC) /* (--R) */\n     {\n       if (reg_overlap_mentioned_p (dest, XEXP (base, 0)))\n-\tfatal_insn (\"Incorrect insn:\", insn);\n+\tfatal_insn (\"incorrect insn:\", insn);\n \n       *l = 2;\n       return (AS2 (ld,%B0,%1) CR_TAB\n@@ -1949,7 +1949,7 @@ out_movhi_r_mr (insn, op, l)\n   else if (GET_CODE (base) == POST_INC) /* (R++) */\n     {\n       if (reg_overlap_mentioned_p (dest, XEXP (base, 0)))\n-\tfatal_insn (\"Incorrect insn:\", insn);\n+\tfatal_insn (\"incorrect insn:\", insn);\n \n       *l = 2;\n       return (AS2 (ld,%A0,%1)  CR_TAB\n@@ -1968,7 +1968,7 @@ out_movhi_r_mr (insn, op, l)\n \t      AS2 (lds,%B0,%B1));\n     }\n   \n-  fatal_insn (\"Unknown move insn:\",insn);\n+  fatal_insn (\"unknown move insn:\",insn);\n   return \"\";\n }\n \n@@ -2047,7 +2047,7 @@ out_movsi_r_mr (insn, op, l)\n       if (disp > MAX_LD_OFFSET (GET_MODE (src)))\n \t{\n \t  if (REGNO (XEXP (base, 0)) != REG_Y)\n-\t    fatal_insn (\"Incorrect insn:\",insn);\n+\t    fatal_insn (\"incorrect insn:\",insn);\n \n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (src)))\n \t    return *l = 6, (AS2 (adiw,r28,%o1-60) CR_TAB\n@@ -2132,7 +2132,7 @@ out_movsi_r_mr (insn, op, l)\n \t\t    AS2 (lds,%C0,%C1) CR_TAB\n \t\t    AS2 (lds,%D0,%D1));\n     \n-  fatal_insn (\"Unknown move insn:\",insn);\n+  fatal_insn (\"unknown move insn:\",insn);\n   return \"\";\n }\n \n@@ -2219,7 +2219,7 @@ out_movsi_mr_r (insn, op, l)\n       if (disp > MAX_LD_OFFSET (GET_MODE (dest)))\n \t{\n \t  if (reg_base != REG_Y)\n-\t    fatal_insn (\"Incorrect insn:\",insn);\n+\t    fatal_insn (\"incorrect insn:\",insn);\n \n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (dest)))\n \t    return *l = 6, (AS2 (adiw,r28,%o0-60) CR_TAB\n@@ -2290,7 +2290,7 @@ out_movsi_mr_r (insn, op, l)\n \t\t  AS2 (st,%0,%B1) CR_TAB\n \t\t  AS2 (st,%0,%C1) CR_TAB\n \t\t  AS2 (st,%0,%D1));\n-  fatal_insn (\"Unknown move insn:\",insn);\n+  fatal_insn (\"unknown move insn:\",insn);\n   return \"\";\n }\n \n@@ -2480,7 +2480,7 @@ output_movsisf(insn, operands, l)\n       operands[1] = src;\n       return \"\";\n     }\n-  fatal_insn (\"Invalid insn:\", insn);\n+  fatal_insn (\"invalid insn:\", insn);\n   return \"\";\n }\n \n@@ -2517,7 +2517,7 @@ out_movqi_mr_r (insn, op, l)\n \t{\n \t  int disp = INTVAL (XEXP (x,1));\n \t  if (REGNO (XEXP (x,0)) != REG_Y)\n-\t    fatal_insn (\"Incorrect insn:\",insn);\n+\t    fatal_insn (\"incorrect insn:\",insn);\n \n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (dest)))\n \t    return *l = 3, (AS2 (adiw,r28,%o0-63) CR_TAB\n@@ -2628,7 +2628,7 @@ out_movhi_mr_r (insn, op, l)\n       if (disp > MAX_LD_OFFSET (GET_MODE (dest)))\n \t{\n \t  if (reg_base != REG_Y)\n-\t    fatal_insn (\"Incorrect insn:\",insn);\n+\t    fatal_insn (\"incorrect insn:\",insn);\n \n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (dest)))\n \t    return *l = 4, (AS2 (adiw,r28,%o0-62) CR_TAB\n@@ -2672,7 +2672,7 @@ out_movhi_mr_r (insn, op, l)\n   else if (GET_CODE (base) == POST_INC) /* (R++) */\n     return *l=2, (AS2 (st,%0,%A1)  CR_TAB\n \t\t  AS2 (st,%0,%B1));\n-  fatal_insn (\"Unknown move insn:\",insn);\n+  fatal_insn (\"unknown move insn:\",insn);\n   return \"\";\n }\n \n@@ -2908,7 +2908,7 @@ out_shift_with_cnt (template, insn, operands, len, t_len)\n \t}\n     }\n   else\n-    fatal_insn (\"Bad shift insn:\", insn);\n+    fatal_insn (\"bad shift insn:\", insn);\n \n   if (second_label)\n     {\n@@ -3024,7 +3024,7 @@ ashlqi3_out (insn, operands, len)\n \t}\n     }\n   else if (CONSTANT_P (operands[2]))\n-    fatal_insn (\"Internal compiler bug.\\nIncorrect shift:\", insn);\n+    fatal_insn (\"internal compiler error.  Incorrect shift:\", insn);\n \n   out_shift_with_cnt (AS1 (lsl,%0),\n \t\t      insn, operands, len, 1);\n@@ -3454,7 +3454,7 @@ ashrqi3_out (insn, operands, len)\n \t}\n     }\n   else if (CONSTANT_P (operands[2]))\n-    fatal_insn (\"Internal compiler bug.\\nIncorrect shift:\", insn);\n+    fatal_insn (\"internal compiler error.  Incorrect shift:\", insn);\n \n   out_shift_with_cnt (AS1 (asr,%0),\n \t\t      insn, operands, len, 1);\n@@ -3834,7 +3834,7 @@ lshrqi3_out (insn, operands, len)\n \t}\n     }\n   else if (CONSTANT_P (operands[2]))\n-    fatal_insn (\"Internal compiler bug.\\nIncorrect shift:\", insn);\n+    fatal_insn (\"internal compiler error.  Incorrect shift:\", insn);\n   \n   out_shift_with_cnt (AS1 (lsr,%0),\n \t\t      insn, operands, len, 1);\n@@ -4699,8 +4699,8 @@ avr_handle_progmem_attribute (node, name, args, flags, no_add_attrs)\n \t{\n \t  if (DECL_INITIAL (*node) == NULL_TREE && !DECL_EXTERNAL (*node))\n \t    {\n-\t      warning (\"Only initialized variables can be placed into \"\n-\t\t       \"program memory area.\");\n+\t      warning (\"only initialized variables can be placed into \"\n+\t\t       \"program memory area\");\n \t      *no_add_attrs = true;\n \t    }\n \t}"}, {"sha": "736f285c0a9dc99e5b0119bb40ef36aed146a656", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -2707,7 +2707,7 @@ extern int avr_case_values_threshold;\n    the most combinations to be found.  */\n \n #define TRAMPOLINE_TEMPLATE(FILE) \\\n-  internal_error (\"Trampolines not supported\\n\")\n+  internal_error (\"trampolines not supported\")\n \n /* Length in units of the trampoline for entering a nested function.  */\n "}, {"sha": "a20fb951909839f2737e18bdf0ada5d39d445e3b", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -289,7 +289,7 @@ c4x_override_options ()\n     case 40: target_flags |= C40_FLAG; break;\n     case 44: target_flags |= C44_FLAG; break;\n     default:\n-      warning (\"Unknown CPU version %d, using 40.\\n\", c4x_cpu_version);\n+      warning (\"unknown CPU version %d, using 40.\\n\", c4x_cpu_version);\n       c4x_cpu_version = 40;\n       target_flags |= C40_FLAG;\n     }\n@@ -880,7 +880,7 @@ c4x_expand_prologue ()\n \t     requires more than 32767 words of local temporary\n \t     storage!  */\n \t  if (size > 32767)\n-\t    error (\"ISR %s requires %d words of local vars, max is 32767.\",\n+\t    error (\"ISR %s requires %d words of local vars, max is 32767\",\n \t\t   current_function_name, size);\n \n \t  insn = emit_insn (gen_addqi3 (gen_rtx_REG (QImode, SP_REGNO),\n@@ -1633,7 +1633,7 @@ c4x_check_legit_addr (mode, addr, strict)\n       return 0;\n \n     case CONST_DOUBLE:\n-      fatal_insn (\"Using CONST_DOUBLE for address\", addr);\n+      fatal_insn (\"using CONST_DOUBLE for address\", addr);\n \n     default:\n       return 0;\n@@ -3441,7 +3441,7 @@ lsrc_operand (op, mode)\n     mode = GET_MODE (op);\n \n   if (mode != QImode && mode != Pmode)\n-    fatal_insn (\"Mode not QImode\", op);\n+    fatal_insn (\"mode not QImode\", op);\n \n   if (GET_CODE (op) == CONST_INT)\n     return c4x_L_constant (op) || c4x_J_constant (op);\n@@ -3461,7 +3461,7 @@ tsrc_operand (op, mode)\n     mode = GET_MODE (op);\n \n   if (mode != QImode && mode != Pmode)\n-    fatal_insn (\"Mode not QImode\", op);\n+    fatal_insn (\"mode not QImode\", op);\n \n   if (GET_CODE (op) == CONST_INT)\n     return c4x_L_constant (op) || c4x_N_constant (op) || c4x_J_constant (op);\n@@ -3518,7 +3518,7 @@ c4x_S_address_parse (op, base, incdec, index, disp)\n   *disp = 0;\n        \n   if (GET_CODE (op) != MEM)\n-    fatal_insn (\"Invalid indirect memory address\", op);\n+    fatal_insn (\"invalid indirect memory address\", op);\n   \n   op = XEXP (op, 0);\n   switch (GET_CODE (op))\n@@ -3607,7 +3607,7 @@ c4x_S_address_parse (op, base, incdec, index, disp)\n       /* Fallthrough.  */\n \n     default:\n-      fatal_insn (\"Invalid indirect (S) memory address\", op);\n+      fatal_insn (\"invalid indirect (S) memory address\", op);\n     }\n }\n "}, {"sha": "5e297921fcae2dd13a93e90ccedc48e3927409c6", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -856,7 +856,7 @@ cris_target_asm_function_prologue (file, size)\n \t     cfoa_size, current_function_args_size);\n \n   if (cris_max_stackframe && framesize > cris_max_stackframe)\n-    warning (\"Stackframe too big: %d bytes\", framesize);\n+    warning (\"stackframe too big: %d bytes\", framesize);\n }\n \n /* Return nonzero if there are regs mentioned in the insn that are not all\n@@ -1171,7 +1171,7 @@ cris_target_asm_function_epilogue (file, size)\n \n \t  /* Do a sanity check to avoid generating invalid code.  */\n \t  if (current_function_epilogue_delay_list)\n-\t    internal_error (\"Allocated but unused delay list in epilogue\");\n+\t    internal_error (\"allocated but unused delay list in epilogue\");\n \t}\n       return;\n     }\n@@ -1181,7 +1181,7 @@ cris_target_asm_function_epilogue (file, size)\n      thoroughly), assert the assumption that all usage of\n      __builtin_eh_return are handled above.  */\n   if (current_function_calls_eh_return)\n-    internal_error (\"Unexpected function type needing stack adjustment for\\\n+    internal_error (\"unexpected function type needing stack adjustment for\\\n  __builtin_eh_return\");\n \n   /* If we pushed some register parameters, then adjust the stack for\n@@ -1475,7 +1475,7 @@ cris_print_operand (file, x, code)\n     {\n     case REG:\n       if (REGNO (operand) > 15)\n-\tinternal_error (\"Internal: Bad register: %d\", REGNO (operand));\n+\tinternal_error (\"internal error: bad register: %d\", REGNO (operand));\n       fprintf (file, \"$%s\", reg_names[REGNO (operand)]);\n       return;\n \n@@ -1944,7 +1944,7 @@ cris_notice_update_cc (exp, insn)\n \t\t     register.  */\n \t\t  if (cris_reg_overlap_mentioned_p (cc_status.value1,\n \t\t\t\t\t\t    cc_status.value2))\n-\t\t    internal_error (\"Internal: sideeffect-insn affecting main effect\");\n+\t\t    internal_error (\"internal error: sideeffect-insn affecting main effect\");\n \t\t  return;\n \t\t}\n \t      else if ((REG_P (XEXP (XVECEXP (exp, 0, 0), 1))\n@@ -2231,7 +2231,7 @@ cris_side_effect_mode_ok (code, ops, lreg, rreg, rval, multop, other_op)\n     }\n \n   /* If we get here, the caller got its initial tests wrong.  */\n-  internal_error (\"Internal: cris_side_effect_mode_ok with bad operands\");\n+  internal_error (\"internal error: cris_side_effect_mode_ok with bad operands\");\n }\n \n /* The function reg_overlap_mentioned_p in CVS (still as of 2001-05-16)\n@@ -2313,7 +2313,7 @@ cris_symbol (x)\n       return 0;\n \n     default:\n-      fatal_insn (\"Unrecognized supposed constant\", x);\n+      fatal_insn (\"unrecognized supposed constant\", x);\n     }\n \n   return 1;\n@@ -2371,7 +2371,7 @@ cris_gotless_symbol (x)\n       return 0;\n \n     default:\n-      fatal_insn (\"Unrecognized supposed constant\", x);\n+      fatal_insn (\"unrecognized supposed constant\", x);\n     }\n \n   return 1;\n@@ -2412,7 +2412,7 @@ cris_got_symbol (x)\n       return 0;\n \n     default:\n-      fatal_insn (\"Unrecognized supposed constant in cris_global_pic_symbol\",\n+      fatal_insn (\"unrecognized supposed constant in cris_global_pic_symbol\",\n \t\t  x);\n     }\n \n@@ -2459,7 +2459,7 @@ cris_override_options ()\n \tcris_cpu_version = 10;\n \n       if (cris_cpu_version < 0 || cris_cpu_version > 10)\n-\terror (\"Unknown CRIS version specification in -march= or -mcpu= : %s\",\n+\terror (\"unknown CRIS version specification in -march= or -mcpu= : %s\",\n \t       cris_cpu_str);\n \n       /* Set the target flags.  */\n@@ -2495,7 +2495,7 @@ cris_override_options ()\n \tcris_tune = 10;\n \n       if (cris_tune < 0 || cris_tune > 10)\n-\terror (\"Unknown CRIS cpu version specification in -mtune= : %s\",\n+\terror (\"unknown CRIS cpu version specification in -mtune= : %s\",\n \t       cris_tune_str);\n \n       if (cris_tune >= CRIS_CPU_SVINTO)\n@@ -2529,7 +2529,7 @@ cris_override_options ()\n   if ((write_symbols == DWARF_DEBUG\n        || write_symbols == DWARF2_DEBUG) && ! TARGET_ELF)\n     {\n-      warning (\"Specified -g option is invalid with -maout and -melinux\");\n+      warning (\"that particular -g option is invalid with -maout and -melinux\");\n       write_symbols = DBX_DEBUG;\n     }\n \n@@ -2720,7 +2720,7 @@ cris_split_movdx (operands)\n \t\t GO_IF_LEGITIMATE_ADDRESS, but we're here for your\n \t\t safety.  */\n \t      if (side_effects_p (addr))\n-\t\tfatal_insn (\"Unexpected side-effects in address\", addr);\n+\t\tfatal_insn (\"unexpected side-effects in address\", addr);\n \n \t      emit_insn (gen_rtx_SET\n \t\t\t (VOIDmode,\n@@ -2765,7 +2765,7 @@ cris_split_movdx (operands)\n \t     postincrements.  They should be stopped in\n \t     GO_IF_LEGITIMATE_ADDRESS, but we're here for your safety.  */\n \t  if (side_effects_p (addr))\n-\t    fatal_insn (\"Unexpected side-effects in address\", addr);\n+\t    fatal_insn (\"unexpected side-effects in address\", addr);\n \n \t  emit_insn (gen_rtx_SET\n \t\t     (VOIDmode,\n@@ -2879,7 +2879,7 @@ cris_output_addr_const (file, x)\n       if (GET_CODE (XEXP (x, 0)) != CODE_LABEL\n \t  && (GET_CODE (XEXP (x, 0)) != NOTE\n \t      || NOTE_LINE_NUMBER (XEXP (x, 0)) != NOTE_INSN_DELETED_LABEL))\n-\tfatal_insn (\"Unexpected address expression\", x);\n+\tfatal_insn (\"unexpected address expression\", x);\n \n       if (flag_pic)\n \t{\n@@ -2893,11 +2893,11 @@ cris_output_addr_const (file, x)\n \t    }\n \t  else\n \t    /* Labels are never marked as global symbols.  */\n-\t    fatal_insn (\"Unexpected PIC symbol\", x);\n+\t    fatal_insn (\"unexpected PIC symbol\", x);\n \n \t  /* Sanity check.  */\n \t  if (! current_function_uses_pic_offset_table)\n-\t    internal_error (\"Emitting PIC operand, but PIC register isn't set up\");\n+\t    internal_error (\"emitting PIC operand, but PIC register isn't set up\");\n \t  break;\n \t}\n \n@@ -2906,7 +2906,7 @@ cris_output_addr_const (file, x)\n \n     case NOTE:\n       if (NOTE_LINE_NUMBER (x) != NOTE_INSN_DELETED_LABEL)\n-\tfatal_insn (\"Unexpected NOTE as addr_const:\", x);\n+\tfatal_insn (\"unexpected NOTE as addr_const:\", x);\n     case CODE_LABEL:\n     case CONST_INT:\n     case CONST_DOUBLE:"}, {"sha": "3cfb10657cb1ec93b9eb035edba99f5051f4baf0", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1022,15 +1022,15 @@ struct cum_args {int regs;};\n /* Node: Profiling */\n \n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n- error (\"No FUNCTION_PROFILER for CRIS\")\n+ error (\"no FUNCTION_PROFILER for CRIS\")\n \n /* No profiling for the time being.  */\n #define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)\t\\\n- error (\"No FUNCTION_BLOCK_PROFILER for CRIS\")\n+ error (\"no FUNCTION_BLOCK_PROFILER for CRIS\")\n \n /* No profiling for the time being.  */\n #define BLOCK_PROFILER(FILE, BLOCKNO)\t\\\n- error (\"No BLOCK_PROFILER for CRIS\")\n+ error (\"no BLOCK_PROFILER for CRIS\")\n \n /* FIXME: Some of the undefined macros might be mandatory.  If so, fix\n    documentation.  */"}, {"sha": "9eea5f5ef6e646f7ee1c8be31b471bf752e0c409", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -201,7 +201,7 @@ override_options ()\n \t    if (ok_p\n \t\t&& (hard_regno_mode_ok[(int)mode1][regno]\n \t\t    != hard_regno_mode_ok[(int)mode2][regno]))\n-\t      error (\"Bad modes_tieable_p for register %s, mode1 %s, mode2 %s\",\n+\t      error (\"bad modes_tieable_p for register %s, mode1 %s, mode2 %s\",\n \t\t     reg_names[regno], GET_MODE_NAME (mode1),\n \t\t     GET_MODE_NAME (mode2));\n \t}\n@@ -2668,7 +2668,7 @@ d30v_print_operand_address (stream, x)\n       return;\n     }\n \n-  fatal_insn (\"Bad insn to d30v_print_operand_address:\", x);\n+  fatal_insn (\"bad insn to d30v_print_operand_address:\", x);\n }\n \n \f\n@@ -2685,7 +2685,7 @@ d30v_print_operand_memory_reference (stream, x)\n   switch (GET_CODE (x))\n     {\n     default:\n-      fatal_insn (\"Bad insn to d30v_print_operand_memory_reference:\", x);\n+      fatal_insn (\"bad insn to d30v_print_operand_memory_reference:\", x);\n       break;\n \n     case SUBREG:\n@@ -2746,7 +2746,7 @@ d30v_print_operand_memory_reference (stream, x)\n       if (GET_CODE (x0) == REG && GPR_P (REGNO (x0)))\n \tfprintf (stream, \"%s%s\", reg_names[REGNO (x0) + offset0], suffix);\n       else\n-\tfatal_insn (\"Bad insn to d30v_print_operand_memory_reference:\", x);\n+\tfatal_insn (\"bad insn to d30v_print_operand_memory_reference:\", x);\n     }\n \n   fputs (\",\", stream);\n@@ -2767,7 +2767,7 @@ d30v_print_operand_memory_reference (stream, x)\n \t\t\t\t\t GET_MODE (x1));\n \t  x1 = SUBREG_REG (x1);\n \t  if (GET_CODE (x1) != REG)\n-\t    fatal_insn (\"Bad insn to d30v_print_operand_memory_reference:\", x);\n+\t    fatal_insn (\"bad insn to d30v_print_operand_memory_reference:\", x);\n \n \t  /* fall through */\n \tcase REG:\n@@ -2785,7 +2785,7 @@ d30v_print_operand_memory_reference (stream, x)\n \t  break;\n \n \tdefault:\n-\t  fatal_insn (\"Bad insn to d30v_print_operand_memory_reference:\", x);\n+\t  fatal_insn (\"bad insn to d30v_print_operand_memory_reference:\", x);\n \t}\n     }\n \n@@ -2853,7 +2853,7 @@ d30v_print_operand (stream, x, letter)\n \n     case 'f':\t/* Print a SF floating constant as an int */\n       if (GET_CODE (x) != CONST_DOUBLE)\n-\tfatal_insn (\"Bad insn to d30v_print_operand, 'f' modifier:\", x);\n+\tfatal_insn (\"bad insn to d30v_print_operand, 'f' modifier:\", x);\n \n       REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n       REAL_VALUE_TO_TARGET_SINGLE (rv, num);\n@@ -2862,14 +2862,14 @@ d30v_print_operand (stream, x, letter)\n \n     case 'A':\t/* Print accumulator number without an `a' in front of it.  */\n       if (GET_CODE (x) != REG || !ACCUM_P (REGNO (x)))\n-\tfatal_insn (\"Bad insn to d30v_print_operand, 'A' modifier:\", x);\n+\tfatal_insn (\"bad insn to d30v_print_operand, 'A' modifier:\", x);\n \n       putc ('0' + REGNO (x) - ACCUM_FIRST, stream);\n       break;\n \n     case 'M':\t/* Print a memory reference for ld/st */\n       if (GET_CODE (x) != MEM)\n-\tfatal_insn (\"Bad insn to d30v_print_operand, 'M' modifier:\", x);\n+\tfatal_insn (\"bad insn to d30v_print_operand, 'M' modifier:\", x);\n \n       d30v_print_operand_memory_reference (stream, XEXP (x, 0));\n       break;\n@@ -2923,7 +2923,7 @@ d30v_print_operand (stream, x, letter)\n \tfputs ((letter == 'T') ? \"tnz\" : \"tzr\", stream);\n \n       else\n-\tfatal_insn (\"Bad insn to print_operand, 'F' or 'T' modifier:\", x);\n+\tfatal_insn (\"bad insn to print_operand, 'F' or 'T' modifier:\", x);\n       break;\n \n     case 'B':\t/* emit offset single bit to change */\n@@ -2934,14 +2934,14 @@ d30v_print_operand (stream, x, letter)\n \tfprintf (stream, \"%d\", 31 - log);\n \n       else\n-\tfatal_insn (\"Bad insn to print_operand, 'B' modifier:\", x);\n+\tfatal_insn (\"bad insn to print_operand, 'B' modifier:\", x);\n       break;\n \n     case 'E':\t/* Print u if this is zero extend, nothing if sign extend. */\n       if (GET_CODE (x) == ZERO_EXTEND)\n \tputc ('u', stream);\n       else if (GET_CODE (x) != SIGN_EXTEND)\n-\tfatal_insn (\"Bad insn to print_operand, 'E' modifier:\", x);\n+\tfatal_insn (\"bad insn to print_operand, 'E' modifier:\", x);\n       break;\n \n     case 'R':\t/* Return appropriate cmp instruction for relational test.  */\n@@ -2959,7 +2959,7 @@ d30v_print_operand (stream, x, letter)\n \tcase GEU: fputs (\"cmpuge\", stream); break;\n \n \tdefault:\n-\t  fatal_insn (\"Bad insn to print_operand, 'R' modifier:\", x);\n+\t  fatal_insn (\"bad insn to print_operand, 'R' modifier:\", x);\n \t}\n       break;\n \n@@ -2968,15 +2968,15 @@ d30v_print_operand (stream, x, letter)\n \tfprintf (stream, \"%d\", (int) (32 - INTVAL (x)));\n \n       else\n-\tfatal_insn (\"Bad insn to print_operand, 's' modifier:\", x);\n+\tfatal_insn (\"bad insn to print_operand, 's' modifier:\", x);\n       break;\n \n     case 'S':\t/* Subtract 32.  */\n       if (GET_CODE (x) == CONST_INT)\n \tfprintf (stream, \"%d\", (int)(INTVAL (x) - 32));\n \n       else\n-\tfatal_insn (\"Bad insn to print_operand, 's' modifier:\", x);\n+\tfatal_insn (\"bad insn to print_operand, 's' modifier:\", x);\n       break;\n \n \n@@ -3005,15 +3005,15 @@ d30v_print_operand (stream, x, letter)\n \td30v_print_operand_address (stream, x);\n \n       else\n-\tfatal_insn (\"Bad insn in d30v_print_operand, 0 case\", x);\n+\tfatal_insn (\"bad insn in d30v_print_operand, 0 case\", x);\n \n       return;\n \n     default:\n       {\n \tchar buf[80];\n \n-\tsprintf (buf, \"Invalid asm template character '%%%c'\", letter);\n+\tsprintf (buf, \"invalid asm template character '%%%c'\", letter);\n \tfatal_insn (buf, x);\n       }\n     }\n@@ -3404,7 +3404,7 @@ d30v_move_2words (operands, insn)\n \t   && GPR_P (REGNO (operands[1])))\n     return \"st2w %1,%M0\";\n \n-  fatal_insn (\"Bad call to d30v_move_2words\", insn);\n+  fatal_insn (\"bad call to d30v_move_2words\", insn);\n }\n \n \f"}, {"sha": "3133a51ef057b8953c30299e0b44209689d8277d", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -455,10 +455,10 @@ extern int target_flags;\n       N_(\"Debug memory address support in compiler\") },\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   { \"asm-optimize\",\t 0,\t\t\t\t\t\t\\\n-      N_(\"Make adjacent short instructions parallel if possible.\") },\t\\\n+      N_(\"Make adjacent short instructions parallel if possible\") },\t\\\n \t\t\t\t\t\t\t\t\t\\\n   { \"no-asm-optimize\",\t 0,\t\t\t\t\t\t\\\n-      N_(\"Do not make adjacent short instructions parallel.\") },\t\\\n+      N_(\"Do not make adjacent short instructions parallel\") },\t\\\n \t\t\t\t\t\t\t\t\t\\\n   { \"extmem\",\t\t 0,\t\t\t\t\t\t\\\n       N_(\"Link programs/data to be in external memory by default\") },\t\\"}, {"sha": "2d9da2be64bdc4d419731f8ff6515482e0bb1e59", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1436,7 +1436,7 @@ dsp16xx_output_function_prologue (file, size)\n \t  if (SMALL_INTVAL(current_frame_info.var_size) && ((current_frame_info.var_size & 0x8000) == 0))\n \t    fprintf (file, \"\\t%s=%ld\\n\\t*%s++%s\\n\", reg_names[REG_J], current_frame_info.var_size, sp, reg_names[REG_J]);\n \t  else\n-\t    fatal_error (\"Stack size > 32k\");\n+\t    fatal_error (\"stack size > 32k\");\n \t}\n     }\n   \n@@ -1459,7 +1459,7 @@ dsp16xx_output_function_prologue (file, size)\n       if (current_frame_info.args_size == 1)\n \tfprintf (file, \"\\t*%s++\\n\", sp);\n       else\n-\terror (\"Stack size > 32k\");\n+\terror (\"stack size > 32k\");\n     }\n    \n   if (frame_pointer_needed)\n@@ -1668,7 +1668,7 @@ double_reg_to_memory (operands)\n       else if (GET_CODE (XEXP(addr,1)) == CONST_INT)\n \toffset = INTVAL(XEXP(addr,1)) + 1;\n       else\n-\tfatal_error (\"Invalid addressing mode\");\n+\tfatal_error (\"invalid addressing mode\");\n \n       fprintf (asm_out_file, \"\\t*(%d)=%s\\n\", offset + 31, reg_names[REGNO(operands[1]) + 1]);\n     }\n@@ -1847,7 +1847,7 @@ print_operand(file, op, letter)\n \telse if (letter == 'm')\n \t  fprintf (file, \"%s\", himode_reg_name[REGNO (op)]);\n         else\n-\t  output_operand_lossage (\"Bad register extension code\");\n+\t  output_operand_lossage (\"bad register extension code\");\n     }\n     else if (code == MEM)\n       output_address (XEXP(op,0));\n@@ -1946,10 +1946,10 @@ print_operand_address(file, addr)\n \t  if (offset >= -31 && offset <= 0)\n \t    offset = 31 + offset;\n \t  else\n-\t    fatal_error (\"Invalid offset in ybase addressing\");\n+\t    fatal_error (\"invalid offset in ybase addressing\");\n \t}\n       else\n-\tfatal_error (\"Invalid register in ybase addressing\");\n+\tfatal_error (\"invalid register in ybase addressing\");\n       \n       fprintf (file, \"*(%d)\", offset);\n       break;\n@@ -2128,7 +2128,7 @@ emit_1600_core_shift (shift_op, operands, shift_amount)\n       shift_asm_ptr_first = lshift_right_asm_first;\n     }\n   else\n-    fatal_error (\"Invalid shift operator in emit_1600_core_shift\");\n+    fatal_error (\"invalid shift operator in emit_1600_core_shift\");\n \n   while (shift_amount != 0)\n     {\n@@ -2495,7 +2495,7 @@ gen_tst_reg (x)\n   else if (mode == HImode)\n     emit_insn (gen_rtx_SET (VOIDmode, cc0_rtx, x));\n   else\n-    fatal_error (\"Invalid mode for gen_tst_reg\");\n+    fatal_error (\"invalid mode for gen_tst_reg\");\n \n   return cc0_rtx;\n }\n@@ -2567,7 +2567,7 @@ gen_compare_reg (code, x, y)\n \t\t\t\t\t\t force_reg (HImode,y))));\n     }\n   else\n-    fatal_error (\"Invalid mode for integer comparison in gen_compare_reg\");\n+    fatal_error (\"invalid mode for integer comparison in gen_compare_reg\");\n \n   return cc0_rtx;\n }"}, {"sha": "215b45237c3754df71dca687a61be05f3e2bb9ba", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -100,7 +100,7 @@ extern struct rtx_def *dsp16xx_lshrhi3_libcall;\n %{mmap3:m3_crt0.o%s}                          \\\n %{mmap4:m4_crt0.o%s}                          \\\n %{!mmap*: %{!ifile*: m4_crt0.o%s} %{ifile*:     \\\n-%eA -ifile option requires a -map option}}\"\n+%ea -ifile option requires a -map option}}\"\n \n /* Specify the end file to link with */\n \n@@ -109,7 +109,7 @@ extern struct rtx_def *dsp16xx_lshrhi3_libcall;\n %{mmap3:m3_crtn.o%s}                          \\\n %{mmap4:m4_crtn.o%s}                          \\\n %{!mmap*: %{!ifile*: m4_crtn.o%s} %{ifile*:     \\\n-%eA -ifile option requires a -map option}}\"\n+%ea -ifile option requires a -map option}}\"\n \n \n /* Tell gcc where to look for the startfile */\n@@ -1233,17 +1233,17 @@ extern struct dsp16xx_frame_info current_frame_info;\n    for profiling a function entry.  */\n \n #define FUNCTION_PROFILER(FILE, LABELNO)        \\\n-  internal_error (\"Profiling not implemented yet.\")\n+  internal_error (\"profiling not implemented yet\")\n \n /* Output assembler code to FILE to initialize this source file's\n    basic block profiling info, if that has not already been done.  */\n #define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  \\\n-  internal_error (\"Profiling not implemented yet.\")\n+  internal_error (\"profiling not implemented yet\")\n \n /* Output assembler code to FILE to increment the entry-count for\n    the BLOCKNO'th basic block in this source file.  */\n #define BLOCK_PROFILER(FILE, BLOCKNO)\t        \\\n-  internal_error (\"Profiling not implemented yet.\")\n+  internal_error (\"profiling not implemented yet\")\n \n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n@@ -1254,7 +1254,7 @@ extern struct dsp16xx_frame_info current_frame_info;\n #define EXIT_IGNORE_STACK  (0)\n \n #define TRAMPOLINE_TEMPLATE(FILE) \\\n-  internal_error (\"Trampolines not yet implemented\");\n+  internal_error (\"trampolines not yet implemented\");\n \n /* Length in units of the trampoline for entering a nested function.\n    This is a dummy value  */\n@@ -1266,7 +1266,7 @@ extern struct dsp16xx_frame_info current_frame_info;\n    CXT is an RTX for the static chain value for the function.  */\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n-  internal_error (\"Trampolines not yet implemented\");\n+  internal_error (\"trampolines not yet implemented\");\n \n /* A C expression which is nonzero if a function must have and use a\n    frame pointer. If its value is nonzero the functions will have a\n@@ -1855,12 +1855,12 @@ const_section ()                                                   \\\n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code since it is used only for profiling  */\n #define ASM_OUTPUT_REG_PUSH(FILE,REGNO)    \\\n-  internal_error (\"Profiling not implemented yet.\");\n+  internal_error (\"profiling not implemented yet\");\n \n /* This is how to output an insn to pop a register from the stack.\n    It need not be very fast code since it is used only for profiling  */\n #define ASM_OUTPUT_REG_POP(FILE,REGNO)     \\\n-  internal_error (\"Profiling not implemented yet.\"); \n+  internal_error (\"profiling not implemented yet\"); \n \f\n /* OUTPUT OF DISPATCH TABLES */\n "}, {"sha": "0a66235d822ae2b75cacd386938488258687fd42", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -135,7 +135,7 @@ h8300_init_once ()\n \n   if (!TARGET_H8300S && TARGET_MAC)\n     {\n-      error (\"-ms2600 is used without -ms.\");\n+      error (\"-ms2600 is used without -ms\");\n       target_flags |= 1;\n     }\n }\n@@ -3197,7 +3197,7 @@ h8300_handle_eightbit_data_attribute (node, name, args, flags, no_add_attrs)\n     {\n       if (DECL_INITIAL (decl) == NULL_TREE)\n \t{\n-\t  warning (\"Only initialized variables can be placed into the 8-bit area.\");\n+\t  warning (\"only initialized variables can be placed into the 8-bit area\");\n \t  *no_add_attrs = true;\n \t}\n       else\n@@ -3228,7 +3228,7 @@ h8300_handle_tiny_data_attribute (node, name, args, flags, no_add_attrs)\n     {\n       if (DECL_INITIAL (decl) == NULL_TREE)\n \t{\n-\t  warning (\"Only initialized variables can be placed into the 8-bit area.\");\n+\t  warning (\"only initialized variables can be placed into the 8-bit area\");\n \t  *no_add_attrs = true;\n \t}\n       else"}, {"sha": "cc4aa5c765bd2c439cd350f8c647a50f4e6b18d0", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -200,8 +200,8 @@ Boston, MA 02111-1307, USA.  */\n \n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n-  { \"no-bnu210\", -MASK_BNU210, \"Ignored (obsolete).\" }, \\\n-  { \"bnu210\", MASK_BNU210, \"Ignored (obsolete).\" },\n+  { \"no-bnu210\", -MASK_BNU210, \"Ignored (obsolete)\" }, \\\n+  { \"bnu210\", MASK_BNU210, \"Ignored (obsolete)\" },\n \n /* Warn that -mbnu210 is now obsolete.  */\n #undef  SUBTARGET_OVERRIDE_OPTIONS\n@@ -210,7 +210,7 @@ do \\\n   { \\\n     if (target_flags & MASK_BNU210) \\\n       {\t\\\n-        warning (\"-mbnu210 is ignored (option is obsolete).\"); \\\n+        warning (\"-mbnu210 is ignored (option is obsolete)\"); \\\n       }\t\\\n   } \\\n while (0)"}, {"sha": "410b310d7e5211f301d9256e9af769d4e9cd0198", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -845,7 +845,7 @@ override_options ()\n       if (!strcmp (ix86_cmodel_string, \"small\"))\n \tix86_cmodel = flag_pic ? CM_SMALL_PIC : CM_SMALL;\n       else if (flag_pic)\n-\tsorry (\"Code model %s not supported in PIC mode\", ix86_cmodel_string);\n+\tsorry (\"code model %s not supported in PIC mode\", ix86_cmodel_string);\n       else if (!strcmp (ix86_cmodel_string, \"32\"))\n \tix86_cmodel = CM_32;\n       else if (!strcmp (ix86_cmodel_string, \"kernel\") && !flag_pic)\n@@ -864,12 +864,12 @@ override_options ()\n \tix86_cmodel = flag_pic ? CM_SMALL_PIC : CM_SMALL;\n     }\n   if ((TARGET_64BIT == 0) != (ix86_cmodel == CM_32))\n-    error (\"Code model `%s' not supported in the %s bit mode.\",\n+    error (\"code model `%s' not supported in the %s bit mode\",\n \t   ix86_cmodel_string, TARGET_64BIT ? \"64\" : \"32\");\n   if (ix86_cmodel == CM_LARGE)\n-    sorry (\"Code model `large' not supported yet.\");\n+    sorry (\"code model `large' not supported yet\");\n   if ((TARGET_64BIT != 0) != ((target_flags & MASK_64BIT) != 0))\n-    sorry (\"%i-bit mode not compiled in.\",\n+    sorry (\"%i-bit mode not compiled in\",\n \t   (target_flags & MASK_64BIT) ? 64 : 32);\n \n   if (ix86_arch_string != 0)\n@@ -1023,9 +1023,9 @@ override_options ()\n   if (TARGET_64BIT)\n     {\n       if (TARGET_ALIGN_DOUBLE)\n-\terror (\"-malign-double makes no sense in the 64bit mode.\");\n+\terror (\"-malign-double makes no sense in the 64bit mode\");\n       if (TARGET_RTD)\n-\terror (\"-mrtd calling convention not supported in the 64bit mode.\");\n+\terror (\"-mrtd calling convention not supported in the 64bit mode\");\n       /* Enable by default the SSE and MMX builtins.  */\n       target_flags |= MASK_SSE2 | MASK_SSE | MASK_MMX | MASK_128BIT_LONG_DOUBLE;\n      }\n@@ -5394,7 +5394,7 @@ print_reg (x, code, file)\n       switch (code)\n \t{\n \t  case 0:\n-\t    error (\"Extended registers have no high halves\\n\");\n+\t    error (\"extended registers have no high halves\");\n \t    break;\n \t  case 1:\n \t    fprintf (file, \"r%ib\", REGNO (x) - FIRST_REX_INT_REG + 8);\n@@ -5409,7 +5409,7 @@ print_reg (x, code, file)\n \t    fprintf (file, \"r%i\", REGNO (x) - FIRST_REX_INT_REG + 8);\n \t    break;\n \t  default:\n-\t    error (\"Unsupported operand size for extended register.\\n\");\n+\t    error (\"unsupported operand size for extended register\");\n \t    break;\n \t}\n       return;\n@@ -9851,7 +9851,7 @@ ix86_attr_length_immediate_default (insn, shortform)\n \t\t  len+=4;\n \t\t  break;\n \t\tdefault:\n-\t\t  fatal_insn (\"Unknown insn mode\", insn);\n+\t\t  fatal_insn (\"unknown insn mode\", insn);\n \t      }\n \t  }\n       }"}, {"sha": "d4abbbf0a63cf1b94dee884f94e224a48872a572", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -42,7 +42,7 @@ Boston, MA 02111-1307, USA.  */\n #define HALF_PIC_NUMBER_REFS 0\n #define HALF_PIC_ENCODE(DECL)\n #define HALF_PIC_DECLARE(NAME)\n-#define HALF_PIC_INIT()\terror (\"half-pic init called on systems that don't support it.\")\n+#define HALF_PIC_INIT()\terror (\"half-pic init called on systems that don't support it\")\n #define HALF_PIC_ADDRESS_P(X) 0\n #define HALF_PIC_PTR(X) X\n #define HALF_PIC_FINISH(STREAM)\n@@ -359,9 +359,9 @@ extern const int x86_epilogue_using_move, x86_decompose_lea;\n   { \"no-mix-sse-i387\",\t\t-MASK_MIX_SSE_I387,\t\t\t      \\\n     N_(\"Do not use both SSE and i387 instruction sets for floating point arithmetics\") },\\\n   { \"128bit-long-double\",\t MASK_128BIT_LONG_DOUBLE,\t\t      \\\n-    N_(\"sizeof(long double) is 16.\") },\t\t\t\t\t      \\\n+    N_(\"sizeof(long double) is 16\") },\t\t\t\t\t      \\\n   { \"96bit-long-double\",\t-MASK_128BIT_LONG_DOUBLE,\t\t      \\\n-    N_(\"sizeof(long double) is 12.\") },\t\t\t\t\t      \\\n+    N_(\"sizeof(long double) is 12\") },\t\t\t\t\t      \\\n   { \"64\",\t\t\tMASK_64BIT,\t\t\t\t      \\\n     N_(\"Generate 64bit x86-64 code\") },\t\t\t\t\t      \\\n   { \"32\",\t\t\t-MASK_64BIT,\t\t\t\t      \\"}, {"sha": "9d955df2f48ea5c7f2c5d81e7596edb26a855d08", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -259,7 +259,7 @@ i386_pe_mark_dllimport (decl)\n     abort ();\n   if (i386_pe_dllexport_name_p (oldname))\n     {\n-      error (\"`%s' declared as both exported to and imported from a DLL.\",\n+      error (\"`%s' declared as both exported to and imported from a DLL\",\n              IDENTIFIER_POINTER (DECL_NAME (decl)));\n       return;\n     }"}, {"sha": "71cb1160faab574f6f312a505380680f3f50f0e7", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -68,12 +68,12 @@ Boston, MA 02111-1307, USA.  */\n            to try and figure out what's wrong.  */ \\\n         char *djgpp = getenv (\"DJGPP\"); \\\n         if (djgpp == NULL) \\\n-          fatal (\"Environment variable DJGPP not defined.\"); \\\n+          fatal (\"environment variable DJGPP not defined\"); \\\n         else if (access (djgpp, R_OK) == 0) \\\n-          fatal (\"Environment variable DJGPP points to missing file '%s'.\", \\\n+          fatal (\"environment variable DJGPP points to missing file '%s'\", \\\n                  djgpp); \\\n         else \\\n-          fatal (\"Environment variable DJGPP points to corrupt file '%s'.\", \\\n+          fatal (\"environment variable DJGPP points to corrupt file '%s'\", \\\n                   djgpp); \\\n       } \\\n     standard_exec_prefix = update_path (standard_exec_prefix, NULL); \\"}, {"sha": "11842959987b6150212ae7a4130bdd29e58cce7b", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -376,7 +376,7 @@ extern int target_flags;\n     }\t\t\t\t\t\t\t\t\\\n   /* ??? See the LONG_DOUBLE_TYPE_SIZE definition below.  */\t\\\n   if (TARGET_LONG_DOUBLE_64)\t\t\t\t\t\\\n-    warning (\"The -mlong-double-64 option does not work yet.\");\\\n+    warning (\"the -mlong-double-64 option does not work yet\");\\\n   i960_initialize ();\t\t\t\t\t\t\\\n }\n "}, {"sha": "3f0b0c820a0f8daf93e769881d0c86dd42f147e4", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -173,7 +173,7 @@ extern const char *ia64_fixed_range_string;\n #define TARGET_OPTIONS \\\n {\t\t\t\t\t\t\t\t\t\\\n   { \"fixed-range=\", \t&ia64_fixed_range_string,\t\t\t\\\n-      N_(\"Specify range of registers to make fixed.\")},\t\t\t\\\n+      N_(\"Specify range of registers to make fixed\")},\t\t\t\\\n }\n \n /* Sometimes certain combinations of command options do not make sense on a"}, {"sha": "7c848213df48ebffaf4d2950a5ee832b664668c0", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -2297,7 +2297,7 @@ m32r_print_operand (file, x, code)\n \n \tif (GET_CODE (x) != CONST_DOUBLE\n \t    || GET_MODE_CLASS (GET_MODE (x)) != MODE_FLOAT)\n-\t  fatal_insn (\"Bad insn for 'A'\", x);\n+\t  fatal_insn (\"bad insn for 'A'\", x);\n \tREAL_VALUE_FROM_CONST_DOUBLE (d, x);\n \tREAL_VALUE_TO_DECIMAL (d, \"%.20e\", str);\n \tfprintf (file, \"%s\", str);\n@@ -2417,21 +2417,21 @@ m32r_print_operand (file, x, code)\n       if (GET_CODE (addr) == PRE_INC)\n \t{\n \t  if (GET_CODE (XEXP (addr, 0)) != REG)\n-\t    fatal_insn (\"Pre-increment address is not a register\", x);\n+\t    fatal_insn (\"pre-increment address is not a register\", x);\n \n \t  fprintf (file, \"@+%s\", reg_names[REGNO (XEXP (addr, 0))]);\n \t}\n       else if (GET_CODE (addr) == PRE_DEC)\n \t{\n \t  if (GET_CODE (XEXP (addr, 0)) != REG)\n-\t    fatal_insn (\"Pre-decrement address is not a register\", x);\n+\t    fatal_insn (\"pre-decrement address is not a register\", x);\n \n \t  fprintf (file, \"@-%s\", reg_names[REGNO (XEXP (addr, 0))]);\n \t}\n       else if (GET_CODE (addr) == POST_INC)\n \t{\n \t  if (GET_CODE (XEXP (addr, 0)) != REG)\n-\t    fatal_insn (\"Post-increment address is not a register\", x);\n+\t    fatal_insn (\"post-increment address is not a register\", x);\n \n \t  fprintf (file, \"@%s+\", reg_names[REGNO (XEXP (addr, 0))]);\n \t}\n@@ -2509,7 +2509,7 @@ m32r_print_operand_address (file, addr)\n \t      fputs (reg_names[REGNO (base)], file);\n \t    }\n \t  else\n-\t    fatal_insn (\"Bad address\", addr);\n+\t    fatal_insn (\"bad address\", addr);\n \t}\n       else if (GET_CODE (base) == LO_SUM)\n \t{\n@@ -2525,12 +2525,12 @@ m32r_print_operand_address (file, addr)\n \t  fputs (reg_names[REGNO (XEXP (base, 0))], file);\n \t}\n       else\n-\tfatal_insn (\"Bad address\", addr);\n+\tfatal_insn (\"bad address\", addr);\n       break;\n \n     case LO_SUM :\n       if (GET_CODE (XEXP (addr, 0)) != REG)\n-\tfatal_insn (\"Lo_sum not of register\", addr);\n+\tfatal_insn (\"lo_sum not of register\", addr);\n       if (small_data_operand (XEXP (addr, 1), VOIDmode))\n \tfputs (\"sda(\", file);\n       else"}, {"sha": "dd3c3080f1b4e575c588c3e2c8ea236a1b824131", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -3025,7 +3025,7 @@ m68hc11_gen_movhi (insn, operands)\n \t      else\n \t\t{\n \t\t  /* !!!! SCz wrong here.  */\n-                  fatal_insn (\"Move insn not handled\", insn);\n+                  fatal_insn (\"move insn not handled\", insn);\n \t\t}\n \t    }\n \t  else\n@@ -3245,7 +3245,7 @@ m68hc11_gen_movhi (insn, operands)\n \t  break;\n \n \tdefault:\n-\t  fatal_insn (\"Invalid register in the move instruction\", insn);\n+\t  fatal_insn (\"invalid register in the move instruction\", insn);\n \t  break;\n \t}\n       return;\n@@ -3279,7 +3279,7 @@ m68hc11_gen_movhi (insn, operands)\n   /* Operand 1 must be a hard register.  */\n   if (!H_REG_P (operands[1]))\n     {\n-      fatal_insn (\"Invalid operand in the instruction\", insn);\n+      fatal_insn (\"invalid operand in the instruction\", insn);\n     }\n \n   reg = REGNO (operands[1]);\n@@ -3329,7 +3329,7 @@ m68hc11_gen_movhi (insn, operands)\n       break;\n \n     default:\n-      fatal_insn (\"Invalid register in the move instruction\", insn);\n+      fatal_insn (\"invalid register in the move instruction\", insn);\n       break;\n     }\n }\n@@ -3399,7 +3399,7 @@ m68hc11_gen_movqi (insn, operands)\n \t      else\n \t\t{\n \t\t  /* !!!! SCz wrong here.  */\n-                  fatal_insn (\"Move insn not handled\", insn);\n+                  fatal_insn (\"move insn not handled\", insn);\n \t\t}\n \t    }\n \t  else\n@@ -3576,7 +3576,7 @@ m68hc11_gen_movqi (insn, operands)\n \t  break;\n \n \tdefault:\n-\t  fatal_insn (\"Invalid register in the instruction\", insn);\n+\t  fatal_insn (\"invalid register in the instruction\", insn);\n \t  break;\n \t}\n     }\n@@ -3602,14 +3602,14 @@ m68hc11_gen_movqi (insn, operands)\n \t  break;\n \n \tdefault:\n-\t  fatal_insn (\"Invalid register in the move instruction\", insn);\n+\t  fatal_insn (\"invalid register in the move instruction\", insn);\n \t  break;\n \t}\n       return;\n     }\n   else\n     {\n-      fatal_insn (\"Operand 1 must be a hard register\", insn);\n+      fatal_insn (\"operand 1 must be a hard register\", insn);\n     }\n }\n \n@@ -3626,7 +3626,7 @@ m68hc11_gen_rotate (code, insn, operands)\n   \n   if (GET_CODE (operands[2]) != CONST_INT\n       || (!D_REG_P (operands[0]) && !DA_REG_P (operands[0])))\n-    fatal_insn (\"Invalid rotate insn\", insn);\n+    fatal_insn (\"invalid rotate insn\", insn);\n \n   val = INTVAL (operands[2]);\n   if (code == ROTATERT)\n@@ -4046,7 +4046,7 @@ m68hc11_check_z_replacement (insn, info)\n \n       if (this_insn_uses_z && this_insn_uses_ix && this_insn_uses_iy)\n \t{\n-\t  fatal_insn (\"Registers IX, IY and Z used in the same INSN\", insn);\n+\t  fatal_insn (\"registers IX, IY and Z used in the same INSN\", insn);\n \t}\n \n       if (this_insn_uses_d)\n@@ -4366,7 +4366,7 @@ m68hc11_check_z_replacement (insn, info)\n \t{\n           if (this_insn_uses_z)\n             {\n-              fatal_insn (\"Cannot do z-register replacement\", insn);\n+              fatal_insn (\"cannot do z-register replacement\", insn);\n             }\n \t  return 0;\n \t}\n@@ -4671,7 +4671,7 @@ m68hc11_z_replacement (insn)\n \t    {\n \t      INSN_CODE (insn) = -1;\n \t      if (!validate_replace_rtx (z_reg, replace_reg, insn))\n-\t\tfatal_insn (\"Cannot do z-register replacement\", insn);\n+\t\tfatal_insn (\"cannot do z-register replacement\", insn);\n \t    }\n \n \t  /* Likewise for (REG:QI Z).  */\n@@ -4720,7 +4720,7 @@ m68hc11_z_replacement (insn)\n \n       if (!validate_replace_rtx (z_reg, replace_reg, info.last))\n \t{\n-\t  fatal_insn (\"Invalid Z register replacement for insn\", insn);\n+\t  fatal_insn (\"invalid Z register replacement for insn\", insn);\n \t}\n       insn = NEXT_INSN (info.last);\n     }\n@@ -4797,7 +4797,7 @@ m68hc11_reassign_regs (first)\n \t}\n       else\n \t{\n-\t  printf (\"Insn not handled by Z replacement:\\n\");\n+\t  printf (\"insn not handled by Z replacement:\\n\");\n \t  fflush (stdout);\n \t  debug_rtx (insn);\n \t}"}, {"sha": "6dc4340f038911aa1ce36f64e37df4f7509aa67d", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -886,7 +886,7 @@ output_call (operands, addr)\n \t\t\t   - 2);\n #if (MONITOR_GCC & 0x2) /* How often do long branches happen?  */\n \t  if ((unsigned) (delta + 0x8000) >= 0x10000)\n-\t    warning (\"Internal gcc monitor: short-branch(%x)\", delta);\n+\t    warning (\"internal gcc monitor: short-branch(%x)\", delta);\n #endif\n \n \t  /* Delete the jump.  */\n@@ -2289,7 +2289,7 @@ m88k_debugger_offset (reg, offset)\n #if (MONITOR_GCC & 0x10) /* Watch for suspicious symbolic locations.  */\n       if (! (GET_CODE (reg) == REG\n \t     && REGNO (reg) >= FIRST_PSEUDO_REGISTER))\n-\twarning (\"Internal gcc error: Can't express symbolic location\");\n+\twarning (\"internal gcc error: Can't express symbolic location\");\n #endif\n       return 0;\n     }"}, {"sha": "698f4b8c938db3dac091e3c57d4a9eca9a54b15c", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -296,7 +296,7 @@ extern int flag_pic;\t\t\t\t/* -fpic */\n \t    p++;\t\t\t\t\t\t\t     \\\n \t  else\t\t\t\t\t\t\t\t     \\\n \t    {\t\t\t\t\t\t\t\t     \\\n-\t      error (\"Invalid option `-mshort-data-%s'\", m88k_short_data);   \\\n+\t      error (\"invalid option `-mshort-data-%s'\", m88k_short_data);   \\\n \t      break;\t\t\t\t\t\t\t     \\\n \t    }\t\t\t\t\t\t\t\t     \\\n \tm88k_gp_threshold = atoi (m88k_short_data);\t\t\t     \\"}, {"sha": "e4901085f78f0a1e9ad5b35a774102921c77bef1", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -3073,7 +3073,7 @@ mcore_override_options ()\n \t  || (mcore_stack_increment == 0\n \t      && (mcore_stack_increment_string[0] != '0'\n \t\t  || mcore_stack_increment_string[1] != 0)))\n-\terror (\"Invalid option `-mstack-increment=%s'\",\n+\terror (\"invalid option `-mstack-increment=%s'\",\n \t       mcore_stack_increment_string);\t\n     }\n   "}, {"sha": "c788f10dffbf2d401da23290cf5753d7c40f1d31", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -125,7 +125,7 @@ extern int target_flags;\n { {\"hardlit\", \t            HARDLIT_BIT,\t\t\t\t\\\n      N_(\"Inline constants if it can be done in 2 insns or less\") },\t\\\n   {\"no-hardlit\",          - HARDLIT_BIT,\t\t\t\t\\\n-     N_(\"inline constants if it only takes 1 instruction\") },\t\t\\\n+     N_(\"Inline constants if it only takes 1 instruction\") },\t\t\\\n   {\"4align\",              - ALIGN8_BIT,\t\t\t\t\t\\\n      N_(\"Set maximum alignment to 4\") },\t\t\t\t\\\n   {\"8align\",\t            ALIGN8_BIT,\t\t\t\t\t\\"}, {"sha": "a427d721e15016ca39b1656276e9dd971fff5347", "filename": "gcc/config/mips/isa3264.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmips%2Fisa3264.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmips%2Fisa3264.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fisa3264.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -120,12 +120,12 @@ Boston, MA 02111-1307, USA.  */\n   %{!mips1:%{!mips2:%{!mips32:%{!mlong32:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}}}} \\\n %{mabi=o64:\\\n  %{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int \\\n-  %{mlong32:%e-mlong32 and -mlong64 can not both be specified.}} \\\n+  %{mlong32:%e-mlong32 and -mlong64 can not both be specified}} \\\n  %{!mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int }} \\\n %{mabi=32:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n %{mabi=meabi|!mabi=*:\\\n  %{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int \\\n-  %{mlong32:%e-mlong32 and -mlong64 can not both be specified.}} \\\n+  %{mlong32:%e-mlong32 and -mlong64 can not both be specified}} \\\n  %{!mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int }} \\\n \"\n \n@@ -137,12 +137,12 @@ Boston, MA 02111-1307, USA.  */\n   %{!mips3:%{!mips4:%{!mips5:%{!mips64:%{!mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}}}}}} \\\n %{mabi=o64:\\\n  %{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int \\\n-  %{mlong32:%e-mlong32 and -mlong64 can not both be specified.}} \\\n+  %{mlong32:%e-mlong32 and -mlong64 can not both be specified}} \\\n  %{!mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int }} \\\n %{mabi=32:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n %{mabi=meabi|!mabi=*:\\\n  %{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int \\\n-  %{mlong32:%e-mlong32 and -mlong64 can not both be specified.}} \\\n+  %{mlong32:%e-mlong32 and -mlong64 can not both be specified}} \\\n  %{!mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int }} \\\n \"\n #endif /* ISA */"}, {"sha": "ac29ac9dc5987e3724c1df402b42778388835791", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -2240,7 +2240,7 @@ mips_move_1word (operands, insn, unsignedp)\n \n   if (ret == 0)\n     {\n-      abort_with_insn (insn, \"Bad move\");\n+      abort_with_insn (insn, \"bad move\");\n       return 0;\n     }\n \n@@ -2328,7 +2328,7 @@ mips_move_2words (operands, insn)\n \t\t  if (TARGET_FLOAT64)\n \t\t    {\n \t\t      if (!TARGET_64BIT)\n-\t\t\tabort_with_insn (insn, \"Bad move\");\n+\t\t\tabort_with_insn (insn, \"bad move\");\n \n #ifdef TARGET_FP_CALL_32\n \t\t      if (FP_CALL_GP_REG_P (regno1))\n@@ -2348,7 +2348,7 @@ mips_move_2words (operands, insn)\n \t      if (TARGET_FLOAT64)\n \t\t{\n \t\t  if (!TARGET_64BIT)\n-\t\t    abort_with_insn (insn, \"Bad move\");\n+\t\t    abort_with_insn (insn, \"bad move\");\n \n #ifdef TARGET_FP_CALL_32\n \t\t  if (FP_CALL_GP_REG_P (regno0))\n@@ -2693,7 +2693,7 @@ mips_move_2words (operands, insn)\n \n   if (ret == 0)\n     {\n-      abort_with_insn (insn, \"Bad move\");\n+      abort_with_insn (insn, \"bad move\");\n       return 0;\n     }\n \n@@ -3621,7 +3621,7 @@ output_block_move (insn, operands, num_regs, move_type)\n \n   else if (num_regs < 1)\n     abort_with_insn (insn,\n-\t\t     \"Cannot do block move, not enough scratch registers\");\n+\t\t     \"cannot do block move, not enough scratch registers\");\n \n   while (bytes > 0)\n     {\n@@ -4889,7 +4889,7 @@ override_options ()\n \n #else\n   if (mips_abi_string)\n-    error (\"This target does not support the -mabi switch.\");\n+    error (\"this target does not support the -mabi switch\");\n #endif\n \n #ifdef MIPS_CPU_STRING_DEFAULT\n@@ -5119,7 +5119,7 @@ override_options ()\n   if (mips_entry_string != NULL)\n     {\n       if (*mips_entry_string != '\\0')\n-\terror (\"Invalid option `entry%s'\", mips_entry_string);\n+\terror (\"invalid option `entry%s'\", mips_entry_string);\n \n       if (! TARGET_MIPS16)\n \twarning (\"-mentry is only meaningful with -mips-16\");\n@@ -5324,7 +5324,7 @@ mips_debugger_offset (addr, offset)\n   /* sdbout_parms does not want this to crash for unrecognized cases.  */\n #if 0\n   else if (reg != arg_pointer_rtx)\n-    abort_with_insn (addr, \"mips_debugger_offset called with non stack/frame/arg pointer.\");\n+    abort_with_insn (addr, \"mips_debugger_offset called with non stack/frame/arg pointer\");\n #endif\n \n   return offset;\n@@ -5516,7 +5516,7 @@ print_operand (file, op, letter)\n \tbreak;\n \n \tdefault:\n-\t  error (\"PRINT_OPERAND: Unknown punctuation '%c'\", letter);\n+\t  error (\"PRINT_OPERAND: unknown punctuation '%c'\", letter);\n \t  break;\n \t}\n \n@@ -5708,7 +5708,7 @@ print_operand_address (file, addr)\n       {\n       case REG:\n \tif (! TARGET_MIPS16 && REGNO (addr) == ARG_POINTER_REGNUM)\n-\t  abort_with_insn (addr, \"Arg pointer not eliminated.\");\n+\t  abort_with_insn (addr, \"arg pointer not eliminated\");\n \n \tfprintf (file, \"0(%s)\", reg_names [REGNO (addr)]);\n \tbreak;\n@@ -5719,11 +5719,11 @@ print_operand_address (file, addr)\n \t  register rtx arg1 = XEXP (addr, 1);\n \n \t  if (! mips_split_addresses)\n-\t    abort_with_insn (addr, \"PRINT_OPERAND_ADDRESS, Spurious LO_SUM.\");\n+\t    abort_with_insn (addr, \"PRINT_OPERAND_ADDRESS, Spurious LO_SUM\");\n \n \t  if (GET_CODE (arg0) != REG)\n \t    abort_with_insn (addr,\n-\t\t\t     \"PRINT_OPERAND_ADDRESS, LO_SUM with #1 not REG.\");\n+\t\t\t     \"PRINT_OPERAND_ADDRESS, LO_SUM with #1 not REG\");\n \n \t  fprintf (file, \"%%lo(\");\n \t  print_operand_address (file, arg1);\n@@ -5760,7 +5760,7 @@ print_operand_address (file, addr)\n \t    abort_with_insn (addr, \"PRINT_OPERAND_ADDRESS, invalid insn #2\");\n \n \t  if (REGNO (reg) == ARG_POINTER_REGNUM)\n-\t    abort_with_insn (addr, \"Arg pointer not eliminated.\");\n+\t    abort_with_insn (addr, \"arg pointer not eliminated\");\n \n \t  if (TARGET_MIPS16\n \t      && GET_CODE (offset) == CONST\n@@ -6697,7 +6697,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \n       if (gp_offset < 0 || end_offset < 0)\n \tinternal_error\n-\t  (\"gp_offset (%ld) or end_offset (%ld) is less than zero.\",\n+\t  (\"gp_offset (%ld) or end_offset (%ld) is less than zero\",\n \t   (long) gp_offset, (long) end_offset);\n \n       /* If we see a large frame in mips16 mode, we save the registers\n@@ -6859,7 +6859,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \n       if (fp_offset < 0 || end_offset < 0)\n \tinternal_error\n-\t  (\"fp_offset (%ld) or end_offset (%ld) is less than zero.\",\n+\t  (\"fp_offset (%ld) or end_offset (%ld) is less than zero\",\n \t   (long) fp_offset, (long) end_offset);\n \n       else if (fp_offset < 32768)\n@@ -7265,7 +7265,7 @@ mips_expand_prologue ()\n \t  pattern = RTVEC_ELT (adjust, i);\n \t  if (GET_CODE (pattern) != SET\n \t      || GET_CODE (SET_SRC (pattern)) != ASHIFT)\n-\t    abort_with_insn (pattern, \"Insn is not a shift\");\n+\t    abort_with_insn (pattern, \"insn is not a shift\");\n \t  PUT_CODE (SET_SRC (pattern), ASHIFTRT);\n \n \t  insn = emit_insn (pattern);"}, {"sha": "106026b4b7140b6502c6aa6b5ecc0331b9ef54d1", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -183,7 +183,7 @@ extern void\t\tsbss_section PARAMS ((void));\n #define HALF_PIC_NUMBER_REFS 0\n #define HALF_PIC_ENCODE(DECL)\n #define HALF_PIC_DECLARE(NAME)\n-#define HALF_PIC_INIT()\terror (\"half-pic init called on systems that don't support it.\")\n+#define HALF_PIC_INIT()\terror (\"half-pic init called on systems that don't support it\")\n #define HALF_PIC_ADDRESS_P(X) 0\n #define HALF_PIC_PTR(X) X\n #define HALF_PIC_FINISH(STREAM)\n@@ -851,7 +851,7 @@ while (0)\n \n #define MIPS_AS_ASM_SPEC \"\\\n %{!.s:-nocpp} %{.s: %{cpp} %{nocpp}} \\\n-%{pipe: %e-pipe is not supported.} \\\n+%{pipe: %e-pipe is not supported} \\\n %{K} %(subtarget_mips_as_asm_spec)\"\n \n /* SUBTARGET_MIPS_AS_ASM_SPEC is passed when using the MIPS assembler"}, {"sha": "8fee4e73d3afce1f84d0d157a3e2cf07ff77f9d2", "filename": "gcc/config/mips/r3900.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmips%2Fr3900.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmips%2Fr3900.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fr3900.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -25,9 +25,9 @@ Boston, MA 02111-1307, USA.  */\n #define SUBTARGET_CPP_SPEC \"\\\n %{!mabi=32: %{!mabi=n32: %{!mabi=64: -D__mips_eabi}}} \\\n %{!msingle-float:-D__mips_soft_float} \\\n-%{mhard-float:%e-mhard-float not supported.} \\\n+%{mhard-float:%e-mhard-float not supported} \\\n %{msingle-float:%{msoft-float: \\\n-  %e-msingle-float and -msoft-float can not both be specified.}}\"\n+  %e-msingle-float and -msoft-float can not both be specified}}\"\n \n /* The following is needed because -mips3 and -mips4 set gp64 which in\n    combination with abi=eabi, causes long64 to be set.  */\n@@ -39,9 +39,9 @@ Boston, MA 02111-1307, USA.  */\n \n /* by default (if not mips-something-else) produce code for the r3900 */\n #define SUBTARGET_CC1_SPEC \"\\\n-%{mhard-float:%e-mhard-float not supported.} \\\n+%{mhard-float:%e-mhard-float not supported} \\\n %{msingle-float:%{msoft-float: \\\n-  %e-msingle-float and -msoft-float can not both be specified.}}\"\n+  %e-msingle-float and -msoft-float can not both be specified}}\"\n \n #define MIPS_CPU_STRING_DEFAULT \"R3900\"\n #define MIPS_ISA_DEFAULT 1"}, {"sha": "73abc7998d59f7caf75db66427eb408c34f340e3", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -554,7 +554,7 @@ mmix_function_outgoing_value (valtype, func)\n      swapped registers.)  */\n \n   if (nregs > MMIX_MAX_REGS_FOR_VALUE)\n-    internal_error (\"Too large function value type, needs %d registers,\\\n+    internal_error (\"too large function value type, needs %d registers,\\\n  have only %d registers for this\", nregs, MMIX_MAX_REGS_FOR_VALUE);\n \n   /* FIXME: Maybe we should handle structure values like this too\n@@ -669,7 +669,7 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \n   /* Make sure we don't get an unaligned stack.  */\n   if ((stack_space_to_allocate % 8) != 0)\n-    internal_error (\"Stack frame not a multiple of 8 bytes: %d\",\n+    internal_error (\"stack frame not a multiple of 8 bytes: %d\",\n \t\t    stack_space_to_allocate);\n \n   if (current_function_pretend_args_size)\n@@ -1026,7 +1026,7 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n \n   /* Make sure we don't get an unaligned stack. */\n   if ((stack_space_to_deallocate % 8) != 0)\n-    internal_error (\"Stack frame not a multiple of octabyte: %d\",\n+    internal_error (\"stack frame not a multiple of octabyte: %d\",\n \t\t    stack_space_to_deallocate);\n \n   /* We will add back small offsets to the stack pointer as we go.\n@@ -1260,7 +1260,7 @@ mmix_setup_incoming_varargs (args_so_farp, mode, vartype, pretend_sizep,\n       args_so_farp->now_varargs = 1;\n     }\n   else\n-    internal_error (\"Neither varargs or stdarg in mmix_setup_incoming_varargs\");\n+    internal_error (\"neither varargs or stdarg in mmix_setup_incoming_varargs\");\n \n \n   /* We assume that one argument takes up one register here.  That should\n@@ -1589,7 +1589,7 @@ mmix_canonicalize_comparison (codep, op0p, op1p)\n       && INTVAL (*op1p) == 256)\n     {\n       /* FIXME: Remove when I know this trigs.  */\n-      fatal_insn (\"Oops, not debugged; fixing up value:\", *op1p);\n+      fatal_insn (\"oops, not debugged; fixing up value:\", *op1p);\n       *codep = *codep == LT ? LE : *codep == LTU ? LEU : *codep\n \t== GE ? GT : GTU;\n       *op1p = GEN_INT (255);\n@@ -2257,7 +2257,7 @@ mmix_print_operand (stream, x, code)\n     case 'r':\n       /* Store the register to output a constant to.  */\n       if (! REG_P (x))\n-\tfatal_insn (\"MMIX Internal: Expected a register, not this.\", x);\n+\tfatal_insn (\"MMIX Internal: Expected a register, not this\", x);\n       mmix_output_destination_register = REGNO (x);\n       return;\n \n@@ -2267,7 +2267,7 @@ mmix_print_operand (stream, x, code)\n \t  && (GET_CODE (x) != CONST_DOUBLE\n \t      || (GET_MODE (x) != VOIDmode && GET_MODE (x) != DFmode\n \t\t  && GET_MODE (x) != SFmode)))\n-\tfatal_insn (\"MMIX Internal: Expected a constant, not this.\", x);\n+\tfatal_insn (\"MMIX Internal: Expected a constant, not this\", x);\n       mmix_output_register_setting (stream,\n \t\t\t\t    mmix_output_destination_register,\n \t\t\t\t    mmix_intval (x), 0);"}, {"sha": "6f7679351db382d223e4aad8e671633337ae40e8", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -185,7 +185,7 @@ extern int target_flags;\n   {\"no-zero-extend\",\t-TARGET_MASK_ZERO_EXTEND,  \"\"},\t\t\t\\\n   {\"knuthdiv\",\t\tTARGET_MASK_KNUTH_DIVISION,\t\t\t\\\n    N_(\"Generate divide results with reminder having the same sign as the\\\n- divisor (not the dividend).\")},\t\t\t\t\t\\\n+ divisor (not the dividend)\")},\t\t\t\t\t\t\\\n   {\"no-knuthdiv\",\t-TARGET_MASK_KNUTH_DIVISION, \"\"},\t\t\\\n   {\"toplevel-symbols\",\tTARGET_MASK_TOPLEVEL_SYMBOLS,\t\t\t\\\n    N_(\"Prepend global symbols with \\\":\\\" (for use with PREFIX)\")},\t\\"}, {"sha": "94309ef8f3198e741fefa3558db48e6c475a3028", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -160,10 +160,10 @@ Boston, MA 02111-1307, USA.  */\n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC  \\\n     \"%{!posix*:%{pg:-lgcrt0.o}%{!pg: \\\n-     %{p:%e-p profiling is no longer supported.  Use -pg instead.} \\\n+     %{p:%e-p profiling is no longer supported.  Use -pg instead} \\\n      %{!p:-lcrt0.o}}}\\\n      %{posix*:%{pg:-lgposixcrt0.o}%{!pg: \\\n-     %{p:%e-p profiling is no longer supported.  Use -pg instead.} \\\n+     %{p:%e-p profiling is no longer supported.  Use -pg instead} \\\n      %{!p:-lposixcrt0.o}}} \\\n      -lcrtbegin.o\"\n "}, {"sha": "a4726fb4dc22a4b5d59ec4ce05b1023c47938956", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -159,7 +159,7 @@ override_options ()\n     }\n   else\n     {\n-      warning (\"Unknown -mschedule= option (%s).\\nValid options are 700, 7100, 7100LC, 7200, and 8000\\n\", pa_cpu_string);\n+      warning (\"unknown -mschedule= option (%s).\\nValid options are 700, 7100, 7100LC, 7200, and 8000\\n\", pa_cpu_string);\n     }\n \n   /* Set the instruction set architecture.  */\n@@ -184,7 +184,7 @@ override_options ()\n     }\n   else if (pa_arch_string)\n     {\n-      warning (\"Unknown -march= option (%s).\\nValid options are 1.0, 1.1, and 2.0\\n\", pa_arch_string);\n+      warning (\"unknown -march= option (%s).\\nValid options are 1.0, 1.1, and 2.0\\n\", pa_arch_string);\n     }\n \n   if (flag_pic && TARGET_PORTABLE_RUNTIME)\n@@ -200,7 +200,7 @@ override_options ()\n   if (! TARGET_GAS && write_symbols != NO_DEBUG)\n     {\n       warning (\"-g is only supported when using GAS on this processor,\");\n-      warning (\"-g option disabled.\");\n+      warning (\"-g option disabled\");\n       write_symbols = NO_DEBUG;\n     }\n "}, {"sha": "89c965442b8178164821bc2f5b3623a97663af13", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -46,16 +46,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (\"-maix64 and POWER architecture are incompatible.\");\t\\\n+      warning (\"-maix64 and POWER architecture are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n-      warning (\"-maix64 requires PowerPC64 architecture remain enabled.\"); \\\n+      warning (\"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported.\"); \\\n+      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0);\n "}, {"sha": "0d49ff039f508646c2a2ecc07b3dfb867eb92c73", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -46,16 +46,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (\"-maix64 and POWER architecture are incompatible.\");\t\\\n+      warning (\"-maix64 and POWER architecture are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n-      warning (\"-maix64 requires PowerPC64 architecture remain enabled.\"); \\\n+      warning (\"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported.\"); \\\n+      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0);\n "}, {"sha": "ccb46d71d364a6a0641cffc2c2d8a58641240e95", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -479,7 +479,7 @@ rs6000_override_options (default_cpu)\n       else if (! strcmp (rs6000_debug_name, \"arg\"))\n \trs6000_debug_arg = 1;\n       else\n-\terror (\"Unknown -mdebug-%s switch\", rs6000_debug_name);\n+\terror (\"unknown -mdebug-%s switch\", rs6000_debug_name);\n     }\n \n   /* Set size of long double */\n@@ -543,7 +543,7 @@ rs6000_parse_abi_options ()\n   else if (! strcmp (rs6000_abi_string, \"altivec\"))\n     rs6000_altivec_abi = 1;\n   else\n-    error (\"Unknown ABI specified: '%s'\", rs6000_abi_string);\n+    error (\"unknown ABI specified: '%s'\", rs6000_abi_string);\n }\n \n void"}, {"sha": "b30ee979a1738114599d755e8cda7cd3a9f02cb3", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -297,9 +297,9 @@ extern int target_flags;\n   {\"no-powerpc64\",\t- MASK_POWERPC64,\t\t\t\t\\\n \t\t\tN_(\"Don't use PowerPC-64 instruction set\")},\t\\\n   {\"altivec\",\t\tMASK_ALTIVEC ,\t\t\t\t\t\\\n-\t\t\tN_(\"Use AltiVec instructions.\")},\t\t\\\n+\t\t\tN_(\"Use AltiVec instructions\")},\t\t\\\n   {\"no-altivec\",\t- MASK_ALTIVEC ,\t\t\t\t\t\\\n-\t\t\tN_(\"Don't use AltiVec instructions.\")},\t\\\n+\t\t\tN_(\"Don't use AltiVec instructions\")},\t\\\n   {\"new-mnemonics\",\tMASK_NEW_MNEMONICS,\t\t\t\t\\\n \t\t\tN_(\"Use new mnemonics for PowerPC architecture\")},\\\n   {\"old-mnemonics\",\t-MASK_NEW_MNEMONICS,\t\t\t\t\\"}, {"sha": "db9458985a3537fdaf89e17ac7ab37fb3f742360", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -85,8 +85,8 @@ extern const char *rs6000_sdata_name;\n /* Override rs6000.h definition.  */\n #undef\tSUBTARGET_OPTIONS\n #define\tSUBTARGET_OPTIONS\t\t\t\t\t\t\\\n-  { \"call-\",  &rs6000_abi_name, N_(\"Select ABI calling convention.\") },\t\\\n-  { \"sdata=\", &rs6000_sdata_name, N_(\"Select method for sdata handling.\") }\n+  { \"call-\",  &rs6000_abi_name, N_(\"Select ABI calling convention\") },\t\\\n+  { \"sdata=\", &rs6000_sdata_name, N_(\"Select method for sdata handling\") }\n \n /* Max # of bytes for variables to automatically be put into the .sdata\n    or .sdata2 sections.  */\n@@ -101,54 +101,54 @@ extern int g_switch_set;\t\t/* Whether -G xx was passed.  */\n #undef\tSUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n   { \"bit-align\",\t-MASK_NO_BITFIELD_TYPE,\t\t\t\t\\\n-    N_(\"Align to the base type of the bitfield.\") },\t\t\t\\\n+    N_(\"Align to the base type of the bitfield\") },\t\t\t\\\n   { \"no-bit-align\",\t MASK_NO_BITFIELD_TYPE,\t\t\t\t\\\n-    N_(\"Don't align to the base type of the bitfield.\") },\t\t\\\n+    N_(\"Don't align to the base type of the bitfield\") },\t\t\\\n   { \"strict-align\",\t MASK_STRICT_ALIGN,\t\t\t\t\\\n     N_(\"Don't assume that unaligned accesses are handled by the system\") }, \\\n   { \"no-strict-align\",\t-MASK_STRICT_ALIGN,\t\t\t\t\\\n     N_(\"Assume that unaligned accesses are handled by the system\") },\t\\\n   { \"relocatable\",\t MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC, \\\n-    N_(\"Produce code relocatable at runtime.\") },\t\t\t\\\n+    N_(\"Produce code relocatable at runtime\") },\t\t\t\\\n   { \"no-relocatable\",\t-MASK_RELOCATABLE,\t\t\t\t\\\n-    N_(\"Don't produce code relocatable at runtime.\") },\t\t\t\\\n+    N_(\"Don't produce code relocatable at runtime\") },\t\t\t\\\n   { \"relocatable-lib\",\t MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC, \\\n-    N_(\"Produce code relocatable at runtime.\") },\t\t\t\\\n+    N_(\"Produce code relocatable at runtime\") },\t\t\t\\\n   { \"no-relocatable-lib\", -MASK_RELOCATABLE,\t\t\t\t\\\n-    N_(\"Don't produce code relocatable at runtime.\") },\t\t\t\\\n+    N_(\"Don't produce code relocatable at runtime\") },\t\t\t\\\n   { \"little-endian\",\t MASK_LITTLE_ENDIAN,\t\t\t\t\\\n-    N_(\"Produce little endian code.\") },\t\t\t\t\\\n+    N_(\"Produce little endian code\") },\t\t\t\t\t\\\n   { \"little\",\t\t MASK_LITTLE_ENDIAN,\t\t\t\t\\\n-    N_(\"Produce little endian code.\") },\t\t\t\t\\\n+    N_(\"Produce little endian code\") },\t\t\t\t\t\\\n   { \"big-endian\",\t-MASK_LITTLE_ENDIAN,\t\t\t\t\\\n-    N_(\"Produce big endian code.\") },\t\t\t\t\t\\\n+    N_(\"Produce big endian code\") },\t\t\t\t\t\\\n   { \"big\",\t\t-MASK_LITTLE_ENDIAN,\t\t\t\t\\\n-    N_(\"Produce big endian code.\") },\t\t\t\t\t\\\n+    N_(\"Produce big endian code\") },\t\t\t\t\t\\\n   { \"no-toc\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n   { \"toc\",\t\t MASK_MINIMAL_TOC, N_(\"no description yet\") },\t\\\n   { \"full-toc\",\t\t MASK_MINIMAL_TOC, N_(\"no description yet\") },\t\\\n   { \"prototype\",\t MASK_PROTOTYPE, N_(\"no description yet\") },\t\\\n   { \"no-prototype\",\t-MASK_PROTOTYPE, N_(\"no description yet\") },\t\\\n   { \"no-traceback\",\t 0, N_(\"no description yet\") },\t\t\t\\\n-  { \"eabi\",\t\t MASK_EABI, N_(\"Use EABI.\") },\t\t\t\\\n-  { \"no-eabi\",\t\t-MASK_EABI, N_(\"Don't use EABI.\") },\t\t\\\n+  { \"eabi\",\t\t MASK_EABI, N_(\"Use EABI\") },\t\t\t\\\n+  { \"no-eabi\",\t\t-MASK_EABI, N_(\"Don't use EABI\") },\t\t\\\n   { \"bit-word\",\t\t-MASK_NO_BITFIELD_WORD, \"\" },\t\t\t\\\n   { \"no-bit-word\",\t MASK_NO_BITFIELD_WORD,\t\t\t\t\\\n     N_(\"Do not allow bitfields to cross word boundaries\") },\t\t\\\n   { \"regnames\",\t\t  MASK_REGNAMES,\t\t\t\t\\\n-    N_(\"Use alternate register names.\") },\t\t\t\t\\\n+    N_(\"Use alternate register names\") },\t\t\t\t\\\n   { \"no-regnames\",\t -MASK_REGNAMES,\t\t\t\t\\\n-    N_(\"Don't use alternate register names.\") },\t\t\t\\\n+    N_(\"Don't use alternate register names\") },\t\t\t\t\\\n   { \"sdata\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n   { \"no-sdata\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n   { \"sim\",\t\t 0,\t\t\t\t\t\t\\\n-    N_(\"Link with libsim.a, libc.a and sim-crt0.o.\") },\t\t\t\\\n+    N_(\"Link with libsim.a, libc.a and sim-crt0.o\") },\t\t\t\\\n   { \"ads\",\t\t 0,\t\t\t\t\t\t\\\n-    N_(\"Link with libads.a, libc.a and crt0.o.\") },\t\t\t\\\n+    N_(\"Link with libads.a, libc.a and crt0.o\") },\t\t\t\\\n   { \"yellowknife\",\t 0,\t\t\t\t\t\t\\\n-    N_(\"Link with libyk.a, libc.a and crt0.o.\") },\t\t\t\\\n+    N_(\"Link with libyk.a, libc.a and crt0.o\") },\t\t\t\\\n   { \"mvme\",\t\t 0,\t\t\t\t\t\t\\\n-    N_(\"Link with libmvme.a, libc.a and crt0.o.\") },\t\t\t\\\n+    N_(\"Link with libmvme.a, libc.a and crt0.o\") },\t\t\t\\\n   { \"emb\",\t\t 0,\t\t\t\t\t\t\\\n     N_(\"Set the PPC_EMB bit in the ELF flags header\") },\t\t\\\n   { \"vxworks\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n@@ -209,7 +209,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_current_abi = ABI_V4;\t\t\t\t\t\\\n-      error (\"Bad value for -mcall-%s\", rs6000_abi_name);\t\t\\\n+      error (\"bad value for -mcall-%s\", rs6000_abi_name);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (rs6000_sdata_name)\t\t\t\t\t\t\\\n@@ -225,7 +225,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       else if (!strcmp (rs6000_sdata_name, \"eabi\"))\t\t\t\\\n \trs6000_sdata = SDATA_EABI;\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n-\terror (\"Bad value for -msdata=%s\", rs6000_sdata_name);\t\t\\\n+\terror (\"bad value for -msdata=%s\", rs6000_sdata_name);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else if (DEFAULT_ABI == ABI_V4)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -242,43 +242,43 @@ do {\t\t\t\t\t\t\t\t\t\\\n       (rs6000_sdata == SDATA_EABI || rs6000_sdata == SDATA_SYSV))\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_sdata = SDATA_DATA;\t\t\t\t\t\\\n-      error (\"-mrelocatable and -msdata=%s are incompatible.\",\t\t\\\n+      error (\"-mrelocatable and -msdata=%s are incompatible\",\t\t\\\n \t     rs6000_sdata_name);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   else if (flag_pic &&\t\t\t\t\t\t\t\\\n \t   (rs6000_sdata == SDATA_EABI || rs6000_sdata == SDATA_SYSV))\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_sdata = SDATA_DATA;\t\t\t\t\t\\\n-      error (\"-f%s and -msdata=%s are incompatible.\",\t\t\t\\\n+      error (\"-f%s and -msdata=%s are incompatible\",\t\t\t\\\n \t     (flag_pic > 1) ? \"PIC\" : \"pic\",\t\t\t\t\\\n \t     rs6000_sdata_name);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (rs6000_sdata != SDATA_NONE && DEFAULT_ABI != ABI_V4)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_sdata = SDATA_NONE;\t\t\t\t\t\\\n-      error (\"-msdata=%s and -mcall-%s are incompatible.\",\t\t\\\n+      error (\"-msdata=%s and -mcall-%s are incompatible\",\t\t\\\n \t     rs6000_sdata_name, rs6000_abi_name);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (TARGET_RELOCATABLE && !TARGET_MINIMAL_TOC)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_MINIMAL_TOC;\t\t\t\t\t\\\n-      error (\"-mrelocatable and -mno-minimal-toc are incompatible.\");\t\\\n+      error (\"-mrelocatable and -mno-minimal-toc are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (TARGET_RELOCATABLE && rs6000_current_abi == ABI_AIX)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~MASK_RELOCATABLE;\t\t\t\t\\\n-      error (\"-mrelocatable and -mcall-%s are incompatible.\",\t\t\\\n+      error (\"-mrelocatable and -mcall-%s are incompatible\",\t\t\\\n \t     rs6000_abi_name);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (flag_pic > 1 && rs6000_current_abi == ABI_AIX)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       flag_pic = 0;\t\t\t\t\t\t\t\\\n-      error (\"-fPIC and -mcall-%s are incompatible.\",\t\t\t\\\n+      error (\"-fPIC and -mcall-%s are incompatible\",\t\t\t\\\n \t     rs6000_abi_name);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "42c1a5d90fced2ca6bbe5931d8639a89cb6cc6ad", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1532,7 +1532,7 @@ print_operand_address (file, addr)\n   struct s390_address ad;\n \n   if (!s390_decompose_address (addr, &ad, TRUE))\n-    output_operand_lossage (\"Cannot decompose address.\\n\");\n+    output_operand_lossage (\"cannot decompose address.\\n\");\n  \n   if (ad.disp)\n     s390_output_symbolic_const (file, ad.disp);\n@@ -2491,7 +2491,7 @@ s390_function_prologue (file, lsize)\n   /* Check for too large size of local variables */\n \n   if (lsize > 0x7fff0000)\n-    fatal_error (\"Total size of local variables exceeds architecture limit.\");\n+    fatal_error (\"total size of local variables exceeds architecture limit\");\n \n   /* Profile code (-p, -a, -ax needs some literals).  */\n "}, {"sha": "541bb8b11f965e0fc4fe2b79a98372f29ba9197c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -5781,13 +5781,13 @@ print_operand (file, x, code)\n       if (GET_CODE (x) == CONST_INT)\n \tbreak;\n       else if (GET_CODE (x) != REG)\n-\toutput_operand_lossage (\"Invalid %%Y operand\");\n+\toutput_operand_lossage (\"invalid %%Y operand\");\n       else if (REGNO (x) < 8)\n \tfputs (reg_names[REGNO (x)], file);\n       else if (REGNO (x) >= 24 && REGNO (x) < 32)\n \tfputs (reg_names[REGNO (x)-16], file);\n       else\n-\toutput_operand_lossage (\"Invalid %%Y operand\");\n+\toutput_operand_lossage (\"invalid %%Y operand\");\n       return;\n     case 'L':\n       /* Print out the low order register name of a register pair.  */\n@@ -5857,7 +5857,7 @@ print_operand (file, x, code)\n \tcase IOR: fputs (\"or\", file); break;\n \tcase AND: fputs (\"and\", file); break;\n \tcase XOR: fputs (\"xor\", file); break;\n-\tdefault: output_operand_lossage (\"Invalid %%A operand\");\n+\tdefault: output_operand_lossage (\"invalid %%A operand\");\n \t}\n       return;\n \n@@ -5867,7 +5867,7 @@ print_operand (file, x, code)\n \tcase IOR: fputs (\"orn\", file); break;\n \tcase AND: fputs (\"andn\", file); break;\n \tcase XOR: fputs (\"xnor\", file); break;\n-\tdefault: output_operand_lossage (\"Invalid %%B operand\");\n+\tdefault: output_operand_lossage (\"invalid %%B operand\");\n \t}\n       return;\n \n@@ -5906,8 +5906,8 @@ print_operand (file, x, code)\n \t  case UNGE: fputs (\"uge\", file); break;\n \t  case UNEQ: fputs (\"ue\", file); break;\n \t  default: output_operand_lossage (code == 'c'\n-\t\t\t\t\t   ? \"Invalid %%c operand\"\n-\t\t\t\t\t   : \"Invalid %%C operand\");\n+\t\t\t\t\t   ? \"invalid %%c operand\"\n+\t\t\t\t\t   : \"invalid %%C operand\");\n \t  }\n \treturn;\n       }\n@@ -5928,8 +5928,8 @@ print_operand (file, x, code)\n \t  case LE: fputs (\"lez\", file); break;\n \t  case GT: fputs (\"gz\", file); break;\n \t  default: output_operand_lossage (code == 'd'\n-\t\t\t\t\t   ? \"Invalid %%d operand\"\n-\t\t\t\t\t   : \"Invalid %%D operand\");\n+\t\t\t\t\t   ? \"invalid %%d operand\"\n+\t\t\t\t\t   : \"invalid %%D operand\");\n \t  }\n \treturn;\n       }\n@@ -5947,7 +5947,7 @@ print_operand (file, x, code)\n     case 'f':\n       /* Operand must be a MEM; write its address.  */\n       if (GET_CODE (x) != MEM)\n-\toutput_operand_lossage (\"Invalid %%f operand\");\n+\toutput_operand_lossage (\"invalid %%f operand\");\n       output_address (XEXP (x, 0));\n       return;\n "}, {"sha": "98e8a29c9ece26b1c67f03b196c1112c067a8f0f", "filename": "gcc/config/v850/v850-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fv850%2Fv850-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fv850%2Fv850-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-c.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -92,15 +92,15 @@ mark_current_function_as_interrupt ()\n   \n   if (current_function_decl ==  NULL_TREE)\n     {\n-      warning (\"Cannot set interrupt attribute: no current function\");\n+      warning (\"cannot set interrupt attribute: no current function\");\n       return;\n     }\n \n   name = get_identifier (\"interrupt\");\n \n   if (name == NULL_TREE || TREE_CODE (name) != IDENTIFIER_NODE)\n     {\n-      warning (\"Cannot set interrupt attribute: no such identifier\");\n+      warning (\"cannot set interrupt attribute: no such identifier\");\n       return;\n     }\n   "}, {"sha": "bb117e5214e7110a2b6ca0b3822887c77025333b", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -116,14 +116,14 @@ override_options ()\n       if (small_memory[i].value)\n \t{\n \t  if (!ISDIGIT (*small_memory[i].value))\n-\t    error (\"%s=%s is not numeric.\",\n+\t    error (\"%s=%s is not numeric\",\n \t\t   small_memory[i].name,\n \t\t   small_memory[i].value);\n \t  else\n \t    {\n \t      small_memory[i].max = atoi (small_memory[i].value);\n \t      if (small_memory[i].max > small_memory[i].physical_max)\n-\t\terror (\"%s=%s is too large.\",\n+\t\terror (\"%s=%s is too large\",\n \t\t   small_memory[i].name,\n \t\t   small_memory[i].value);\n \t    }\n@@ -2289,7 +2289,7 @@ construct_restore_jr (op)\n   \n   if (count <= 2)\n     {\n-      error (\"Bogus JR construction: %d\\n\", count);\n+      error (\"bogus JR construction: %d\\n\", count);\n       return NULL;\n     }\n \n@@ -2310,7 +2310,7 @@ construct_restore_jr (op)\n   /* Make sure that the amount we are popping either 0 or 16 bytes.  */\n   if (stack_bytes != 0 && stack_bytes != 16)\n     {\n-      error (\"Bad amount of stack space removal: %d\", stack_bytes);\n+      error (\"bad amount of stack space removal: %d\", stack_bytes);\n       return NULL;\n     }\n \n@@ -2488,7 +2488,7 @@ construct_save_jarl (op)\n   \n   if (count <= 2)\n     {\n-      error (\"Bogus JARL construction: %d\\n\", count);\n+      error (\"bogus JARL construction: %d\\n\", count);\n       return NULL;\n     }\n \n@@ -2512,7 +2512,7 @@ construct_save_jarl (op)\n   /* Make sure that the amount we are popping either 0 or 16 bytes.  */\n   if (stack_bytes != 0 && stack_bytes != -16)\n     {\n-      error (\"Bad amount of stack space removal: %d\", stack_bytes);\n+      error (\"bad amount of stack space removal: %d\", stack_bytes);\n       return NULL;\n     }\n "}, {"sha": "59e967c4963b953b6935fb91627231be48b786b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1,3 +1,8 @@\n+2001-12-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* typeck2.c: Remove leading capital from diagnostic messages, as\n+\tper GNU coding standards.\n+\n 2001-12-03  Mumit Khan  <khan@nanotech.wisc.edu>\n \n \tPR c++/3394"}, {"sha": "95373e89bbc0c8cf97c693abb9f9b76be5b0eab3", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -419,7 +419,7 @@ do_friend (ctype, declarator, decl, parmdecls, attrlist,\n \t      cp_warning (\"friend declaration `%#D' declares a non-template function\", decl);\n \t      if (! explained)\n \t\t{\n-\t\t  warning (\"(if this is not what you intended, make sure the function template has already been declared and add <> after the function name here) -Wno-non-template-friend disables this warning.\");\n+\t\t  warning (\"(if this is not what you intended, make sure the function template has already been declared and add <> after the function name here) -Wno-non-template-friend disables this warning\");\n \t\t  explained = 1;\n \t\t}\n \t    }"}, {"sha": "fff98e2854d4e939e04e43bb98266ba48bf4b571", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -103,7 +103,7 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-ftemplate-depth-\", \n     N_(\"Specify maximum template instantiation depth\") },\n   { \"-fuse-cxa-atexit\", \n-    N_(\"Use __cxa_atexit to register destructors.\") },\n+    N_(\"Use __cxa_atexit to register destructors\") },\n   { \"-fno-use-cxa-atexit\", \"\" },\n   { \"-fvtable-gc\", \n     N_(\"Discard unused virtual functions\") },"}, {"sha": "71677ddd7d446aaa01ff1a5ed536e50ad3340093", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -267,7 +267,7 @@ friendly_abort (where, file, line, func)\n     /* Say nothing.  */;\n   else if (where > 0)\n     {\n-      error (\"Internal error #%d\", where);\n+      error (\"internal error #%d\", where);\n \n       /* Uncount this error, so internal_error will do the right thing.  */\n       --errorcount;\n@@ -433,7 +433,7 @@ store_init_value (decl, init)\n       if (pedantic && TREE_CODE (value) == CONSTRUCTOR)\n \t{\n \t  if (! TREE_CONSTANT (value) || ! TREE_STATIC (value))\n-\t    pedwarn (\"ANSI C++ forbids non-constant aggregate initializer expressions\");\n+\t    pedwarn (\"ISO C++ forbids non-constant aggregate initializer expressions\");\n \t}\n     }\n #endif"}, {"sha": "7c9e79de4b1e0d82ba554ccb79fa69506e744c5c", "filename": "gcc/cppinit.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1145,14 +1145,14 @@ new_pending_directive (pend, text, handler)\n /* Irix6 \"cc -n32\" and OSF4 cc have problems with char foo[] = (\"string\");\n    I.e. a const string initializer with parens around it.  That is\n    what N_(\"string\") resolves to, so we make no_* be macros instead.  */\n-#define no_arg N_(\"Argument missing after %s\")\n-#define no_ass N_(\"Assertion missing after %s\")\n-#define no_dir N_(\"Directory name missing after %s\")\n-#define no_fil N_(\"File name missing after %s\")\n-#define no_mac N_(\"Macro name missing after %s\")\n-#define no_pth N_(\"Path name missing after %s\")\n-#define no_num N_(\"Number missing after %s\")\n-#define no_tgt N_(\"Target missing after %s\")\n+#define no_arg N_(\"argument missing after %s\")\n+#define no_ass N_(\"assertion missing after %s\")\n+#define no_dir N_(\"directory name missing after %s\")\n+#define no_fil N_(\"file name missing after %s\")\n+#define no_mac N_(\"macro name missing after %s\")\n+#define no_pth N_(\"path name missing after %s\")\n+#define no_num N_(\"number missing after %s\")\n+#define no_tgt N_(\"target missing after %s\")\n \n /* This is the list of all command line options, with the leading\n    \"-\" removed.  It must be sorted in ASCII collating order.  */\n@@ -1337,7 +1337,7 @@ cpp_handle_option (pfile, argc, argv)\n       else if (CPP_OPTION (pfile, out_fname) == NULL)\n \tCPP_OPTION (pfile, out_fname) = argv[i];\n       else\n-\tcpp_fatal (pfile, \"Too many filenames. Type %s --help for usage info\",\n+\tcpp_fatal (pfile, \"too many filenames. Type %s --help for usage info\",\n \t\t   progname);\n     }\n   else"}, {"sha": "9528b29f7ed4ef3a4a158fe850321ffc664828c1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1088,7 +1088,7 @@ gen_realpart (mode, x)\n       && REG_P (x)\n       && REGNO (x) < FIRST_PSEUDO_REGISTER)\n     internal_error\n-      (\"Can't access real part of complex value in hard register\");\n+      (\"can't access real part of complex value in hard register\");\n   else if (WORDS_BIG_ENDIAN)\n     return gen_highpart (mode, x);\n   else"}, {"sha": "e9728d336fcf1ea3c6d897beef889dda9c02e128", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1,3 +1,10 @@\n+Mon Dec  3 18:56:04 2001  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* com.c: Remove leading capital from diagnostic messages, as\n+\tper GNU coding standards.\n+\t* g77spec.c: Similarly.\n+\t* lex.c: Similarly.\n+\n 2001-12-01  Zack Weinberg  <zack@codesourcery.com>\n \n \t* f/fini.c: Use xmalloc."}, {"sha": "64aa8ffb389cfdd41de4ca6634bb2d783014687a", "filename": "gcc/f/com.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -11819,9 +11819,9 @@ ffecom_init_0 ()\n \t       (int) FLOAT_TYPE_SIZE);\n       warning (\"and pointers are %d bits wide, but g77 doesn't yet work\",\n \t  (int) TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (null_pointer_node))));\n-      warning (\"properly unless they all are 32 bits wide.\");\n+      warning (\"properly unless they all are 32 bits wide\");\n       warning (\"Please keep this in mind before you report bugs.  g77 should\");\n-      warning (\"support non-32-bit machines better as of version 0.6.\");\n+      warning (\"support non-32-bit machines better as of version 0.6\");\n     }\n #endif\n \n@@ -15568,7 +15568,7 @@ ffecom_decode_include_option_ (char *spec)\n       dirtmp->fname = spec;\n       dirtmp->got_name_map = 0;\n       if (spec[0] == 0)\n-\terror (\"Directory name must immediately follow -I\");\n+\terror (\"directory name must immediately follow -I\");\n       else\n \tappend_include_chain (dirtmp, dirtmp);\n     }"}, {"sha": "8c746ed12f576eb5d70a3baea5821ea0a3b51053", "filename": "gcc/f/g77spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ff%2Fg77spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ff%2Fg77spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77spec.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -407,7 +407,7 @@ or type the command `info -f g77 Copying'.\\n\\\n     }\n \n   if ((n_outfiles != 0) && (n_infiles == 0))\n-    fatal (\"No input files; unwilling to write output files\");\n+    fatal (\"no input files; unwilling to write output files\");\n \n   /* If there are no input files, no need for the library.  */\n   if (n_infiles == 0)"}, {"sha": "d0aa829dc775b5a87442a97cf463aba5ba997baa", "filename": "gcc/f/lex.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -348,7 +348,7 @@ ffelex_backslash_ (int c, ffewhereColumnNumber col)\n \n \t      m[0] = c;\n \t      m[1] = '\\0';\n-\t      ffebad_start_msg_lex (\"Non-ANSI-C-standard escape sequence `\\\\%A' at %0\",\n+\t      ffebad_start_msg_lex (\"Non-ISO-C-standard escape sequence `\\\\%A' at %0\",\n \t\t\t\t    FFEBAD_severityPEDANTIC);\n \t      ffelex_bad_here_ (0, line, column);\n \t      ffebad_string (m);\n@@ -704,7 +704,7 @@ ffelex_cfebackslash_ (int *use_d, int *d, FILE *finput)\n       /* `\\%' is used to prevent SCCS from getting confused.  */\n     case '%':\n       if (pedantic)\n-\tpedwarn (\"non-ANSI escape sequence `\\\\%c'\", c);\n+\tpedwarn (\"non-ISO escape sequence `\\\\%c'\", c);\n       return c;\n     }\n   if (c >= 040 && c < 0177)\n@@ -787,7 +787,7 @@ ffelex_cfelex_ (ffelexToken *xtoken, FILE *finput, int c)\n \n \t    case EOF:\n \t    case '\\n':\n-\t      error (\"Badly formed directive -- no closing quote\");\n+\t      error (\"badly formed directive -- no closing quote\");\n \t      done = TRUE;\n \t      break;\n \n@@ -1007,7 +1007,7 @@ ffelex_get_directive_line_ (char **text, FILE *finput)\n \t  || c == EOF)\n \t{\n \t  if (looking_for != 0)\n-\t    error (\"Bad directive -- missing close-quote\");\n+\t    error (\"bad directive -- missing close-quote\");\n \n \t  *p++ = '\\0';\n \t  *text = directive_buffer;\n@@ -1328,7 +1328,7 @@ ffelex_hash_ (FILE *finput)\n \t    {\n \t      lineno = 1;\n \t      input_filename = old_input_filename;\n-\t      error (\"Use `#line ...' instead of `# ...' in first line\");\n+\t      error (\"use `#line ...' instead of `# ...' in first line\");\n \t    }\n \n \t  if (num == 1)\n@@ -1372,7 +1372,7 @@ ffelex_hash_ (FILE *finput)\n \t{\n \t  lineno = 1;\n \t  input_filename = old_input_filename;\n-\t  error (\"Use `#line ...' instead of `# ...' in first line\");\n+\t  error (\"use `#line ...' instead of `# ...' in first line\");\n \t}\n       if (c == '\\n' || c == EOF)\n \t{"}, {"sha": "fc93d83ba798f29fc4e43b14737c89434380fda9", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1369,7 +1369,7 @@ shorten_branches (first)\n #ifdef ADJUST_INSN_LENGTH\n       ADJUST_INSN_LENGTH (insn, insn_lengths[uid]);\n       if (insn_lengths[uid] < 0)\n-\tfatal_insn (\"Negative insn length\", insn);\n+\tfatal_insn (\"negative insn length\", insn);\n #endif\n     }\n \n@@ -2925,7 +2925,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \n \t    /* If we didn't split the insn, go away.  */\n \t    if (new == insn && PATTERN (new) == body)\n-\t      fatal_insn (\"Could not split insn\", insn);\n+\t      fatal_insn (\"could not split insn\", insn);\n \n #ifdef HAVE_ATTR_length\n \t    /* This instruction should have been split in shorten_branches,"}, {"sha": "03959471baebaf2a3ee1a4291b856808dd8dad21", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -837,7 +837,7 @@ static struct compiler default_compilers[] =\n     %(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options)\", 0},\n   {\".h\", \"@c-header\", 0},\n   {\"@c-header\",\n-   \"%{!E:%eCompilation of header file requested} \\\n+   \"%{!E:%ecompilation of header file requested} \\\n     %(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options)\", 0},\n   {\".i\", \"@cpp-output\", 0},\n   {\"@cpp-output\",\n@@ -1834,7 +1834,7 @@ read_specs (filename, main_p)\n \t      if (new_filename)\n \t\tread_specs (new_filename, FALSE);\n \t      else if (verbose_flag)\n-\t\tnotice (\"Could not find specs file %s\\n\", p1);\n+\t\tnotice (\"could not find specs file %s\\n\", p1);\n \t      continue;\n \t    }\n \t  else if (!strncmp (p1, \"%rename\", sizeof \"%rename\" - 1)\n@@ -3989,7 +3989,7 @@ process_command (argc, argv)\n     }\n \n   if (n_infiles == last_language_n_infiles && spec_lang != 0)\n-    error (\"Warning: `-x %s' after last input file has no effect\", spec_lang);\n+    error (\"warning: `-x %s' after last input file has no effect\", spec_lang);\n \n   switches[n_switches].part1 = 0;\n   infiles[n_infiles].name = 0;\n@@ -4255,7 +4255,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \tswitch (c = *p++)\n \t  {\n \t  case 0:\n-\t    fatal (\"Invalid specification!  Bug in cc\");\n+\t    fatal (\"invalid specification!  Bug in cc\");\n \n \t  case 'b':\n \t    obstack_grow (&obstack, input_basename, basename_length);\n@@ -6222,7 +6222,7 @@ pfatal_pexecute (errmsg_fmt, errmsg_arg)\n void\n fancy_abort ()\n {\n-  fatal (\"internal gcc abort.\");\n+  fatal (\"internal gcc abort\");\n }\n \f\n /* Output an error message and exit */"}, {"sha": "e61445b7934688066c74564aa4bec025a7bd023c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1,3 +1,13 @@\n+2001-12-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* expr.c: Remove leading capital from diagnostic messages, as\n+\tper GNU coding standards.\n+\t* jcf-io.c: Similarly.\n+\t* jcf-parse.c: Similarly.\n+\t* jv-scan.c: Similarly.\n+\t* jvspec.c: Similarly.\n+\t* mangle.c: Similarly.\n+\n 2001-12-02  Tang Ching-Hui  <nicholas@cs.nthu.edu.tw>\n \t    Alexandre Petit-Bianco  <apbianco@redhat.com>\n "}, {"sha": "ef347d6082c2674549e1a93554479cab15bfeabf", "filename": "gcc/java/expr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -1954,7 +1954,7 @@ expand_invoke (opcode, method_ref_index, nargs)\n \t\t\t\t method_name, method_signature);\n   if (method == NULL_TREE)\n     {\n-      error (\"Class '%s' has no method named '%s' matching signature '%s'\",\n+      error (\"class '%s' has no method named '%s' matching signature '%s'\",\n \t     self_name,\n \t     IDENTIFIER_POINTER (method_name),\n \t     IDENTIFIER_POINTER (method_signature));\n@@ -2254,13 +2254,13 @@ expand_java_field_op (is_static, is_putting, field_ref_index)\n     }\n   else if (field_decl == NULL_TREE)\n     {\n-      error (\"Missing field '%s' in '%s'\",\n+      error (\"missing field '%s' in '%s'\",\n \t     IDENTIFIER_POINTER (field_name), self_name);\n       is_error = 1;\n     }\n   else if (build_java_signature (TREE_TYPE (field_decl)) != field_signature)\n     {\n-      error (\"Mismatching signature for field '%s' in '%s'\",\n+      error (\"mismatching signature for field '%s' in '%s'\",\n \t     IDENTIFIER_POINTER (field_name), self_name);\n       is_error = 1;\n     }\n@@ -2533,7 +2533,7 @@ java_lang_expand_expr (exp, target, tmode, modifier)\n \t\t\t  target, tmode, modifier);\n \n     default:\n-      internal_error (\"Can't expand %s\", tree_code_name [TREE_CODE (exp)]);\n+      internal_error (\"can't expand %s\", tree_code_name [TREE_CODE (exp)]);\n     }\n }\n \n@@ -2754,7 +2754,7 @@ expand_byte_code (jcf, method)\n \t  if (dead_code_index != -1)\n \t    {\n               /* We've just reached the end of a region of dead code.  */\n-              warning (\"Unreachable bytecode from %d to before %d\",\n+              warning (\"unreachable bytecode from %d to before %d\",\n                        dead_code_index, PC);\n               dead_code_index = -1;\n             }\n@@ -2791,7 +2791,7 @@ expand_byte_code (jcf, method)\n   if (dead_code_index != -1)\n     {\n       /* We've just reached the end of a region of dead code.  */\n-      warning (\"Unreachable bytecode from %d to the end of the method\", \n+      warning (\"unreachable bytecode from %d to the end of the method\", \n               dead_code_index);\n     }\n }"}, {"sha": "21197700fbf3df3c8862d60a29f867cf9f9e222a", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -407,7 +407,7 @@ DEFUN(find_class, (classname, classname_length, jcf, source_ok),\n   if (! java && ! class && java_buf.st_mtime > class_buf.st_mtime)\n     {\n       if (flag_newer)\n-\twarning (\"Source file for class `%s' is newer than its matching class file. Source file `%s' used instead\", classname, java_buffer);\n+\twarning (\"source file for class `%s' is newer than its matching class file.  Source file `%s' used instead\", classname, java_buffer);\n       class = -1;\n     }\n "}, {"sha": "15dcd071e5fb9ea8f84fa0a6d15587ef33c75fc4", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -682,7 +682,7 @@ load_class (class_or_name, verbose)\n     }\n \n   if (!class_loaded && verbose)\n-    error (\"Cannot find file for class %s\", IDENTIFIER_POINTER (saved));\n+    error (\"cannot find file for class %s\", IDENTIFIER_POINTER (saved));\n }\n \n /* Parse the .class file JCF. */\n@@ -750,7 +750,7 @@ jcf_parse (jcf)\n \t -fforce-classes-archive-check was specified. */\n       if (!jcf->right_zip\n \t  && (!flag_emit_class_files || flag_force_classes_archive_check))\n-\tfatal_error (\"The `java.lang.Object' that was found in `%s' didn't have the special zero-length `gnu.gcj.gcj-compiled' attribute. This generally means that your classpath is incorrectly set. Use `info gcj \\\"Input Options\\\"' to see the info page describing how to set the classpath.\", jcf->filename);\n+\tfatal_error (\"the `java.lang.Object' that was found in `%s' didn't have the special zero-length `gnu.gcj.gcj-compiled' attribute.  This generally means that your classpath is incorrectly set.  Use `info gcj \\\"Input Options\\\"' to see the info page describing how to set the classpath\", jcf->filename);\n     }\n   else\n     all_class_list = tree_cons (NULL_TREE,\n@@ -1060,7 +1060,7 @@ yyparse ()\n \t    {\n \t      const char *saved_input_filename = input_filename;\n \t      input_filename = value;\n-\t      warning (\"source file seen twice on command line and will be compiled only once.\");\n+\t      warning (\"source file seen twice on command line and will be compiled only once\");\n \t      input_filename = saved_input_filename;\n \t    }\n \t  else"}, {"sha": "bf7fd41812ef1ed198d5794e39111c49768e1829", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -180,10 +180,10 @@ DEFUN (main, (argc, argv),\n   /* Check on bad usage */\n   if (flag_find_main + flag_dump_class + flag_complexity > 1)\n     fatal_error\n-      (\"Only one of `--print-main', `--list-class', and `--complexity' allowed\");\n+      (\"only one of `--print-main', `--list-class', and `--complexity' allowed\");\n \n   if (output_file && !(out = fopen (output_file, \"w\")))\n-    fatal_error (\"Can't open output file `%s'\", output_file);\n+    fatal_error (\"can't open output file `%s'\", output_file);\n \n   ft = ftell (out);\n \n@@ -219,7 +219,7 @@ DEFUN (main, (argc, argv),\n \t    reset_report ();\n \t  }\n \telse\n-\t  fatal_error (\"File not found `%s'\", argv [i]);\n+\t  fatal_error (\"file not found `%s'\", argv [i]);\n       }\n \n   /* Flush and close */"}, {"sha": "1b53bf5a7a0f37dfe420adb2c798e2461e922f60", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -393,7 +393,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n       num_args += 3;\n       if (class_files_count + zip_files_count > 0)\n \t{\n-\t  error (\"Warning: already-compiled .class files ignored with -C\"); \n+\t  error (\"warning: already-compiled .class files ignored with -C\"); \n \t  num_args -= class_files_count + zip_files_count;\n \t  class_files_count = 0;\n \t  zip_files_count = 0;"}, {"sha": "1eed23373410608af06559a765ab78ebf031a5cb", "filename": "gcc/java/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -297,7 +297,7 @@ java_new_lexer (finput, encoding)\n     }\n \n   if (enc_error)\n-    fatal_error (\"unknown encoding: `%s'\\nThis might mean that your locale's encoding is not supported\\nby your system's iconv(3) implementation.  If you aren't trying\\nto use a particular encoding for your input file, try the\\n`--encoding=UTF-8' option.\", encoding);\n+    fatal_error (\"unknown encoding: `%s'\\nThis might mean that your locale's encoding is not supported\\nby your system's iconv(3) implementation.  If you aren't trying\\nto use a particular encoding for your input file, try the\\n`--encoding=UTF-8' option\", encoding);\n \n   return lex;\n }"}, {"sha": "93d8fe7647ea0c3d2ec5e0789473990e305f248f", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -82,7 +82,7 @@ java_mangle_decl (obstack, decl)\n       mangle_method_decl (decl);\n       break;\n     default:\n-      internal_error (\"Can't mangle %s\", tree_code_name [TREE_CODE (decl)]);\n+      internal_error (\"can't mangle %s\", tree_code_name [TREE_CODE (decl)]);\n     }\n   return finish_mangling ();\n }"}, {"sha": "09d5cd69d8a62c1967cc786fa63c8e692d505030", "filename": "gcc/java/parse.y", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -6871,7 +6871,7 @@ read_import_dir (wfl)\n       static int first = 1;\n       if (first)\n \t{\n-\t  error (\"Can't find default package `%s'. Check the CLASSPATH environment variable and the access to the archives.\", package_name);\n+\t  error (\"Can't find default package `%s'. Check the CLASSPATH environment variable and the access to the archives\", package_name);\n \t  java_error_count++;\n \t  first = 0;\n \t}\n@@ -13543,7 +13543,7 @@ patch_binop (node, wfl_op1, wfl_op2)\n \t      (TREE_CODE (op2) == INTEGER_CST &&\n \t       ! TREE_INT_CST_LOW (op2)  && ! TREE_INT_CST_HIGH (op2))))\n \t{\n-\t  parse_warning_context (wfl_operator, \"Evaluating this expression will result in an arithmetic exception being thrown.\");\n+\t  parse_warning_context (wfl_operator, \"Evaluating this expression will result in an arithmetic exception being thrown\");\n \t  TREE_CONSTANT (node) = 0;\n \t}\n \t  "}, {"sha": "1b57f161337668dad7c7f2976889e57258708070", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c725bd79e7613da00fb1b5bc440706a219db7653/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=c725bd79e7613da00fb1b5bc440706a219db7653", "patch": "@@ -2527,7 +2527,7 @@ process_include (stackp, fbeg, flen, system_header_p, op)\n     } else if (print_deps\n \t       && print_deps <= (system_header_p\n \t\t\t\t || (system_include_depth > 0)))\n-      warning (\"No include path in which to find %.*s\", flen, fbeg);\n+      warning (\"no include path in which to find %.*s\", flen, fbeg);\n     else\n       error_from_errno (fname);\n "}]}