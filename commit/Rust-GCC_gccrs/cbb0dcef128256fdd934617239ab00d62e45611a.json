{"sha": "cbb0dcef128256fdd934617239ab00d62e45611a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JiMGRjZWYxMjgyNTZmZGQ5MzQ2MTcyMzlhYjAwZDYyZTQ1NjExYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-10-13T08:58:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-13T08:58:41Z"}, "message": "basic_string.tcc (_S_create): Use consistently the exponential policy, simplify.\n\n2004-10-13  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.tcc (_S_create): Use consistently\n\tthe exponential policy, simplify.\n\t* testsuite/performance/21_strings/string_append_2.cc: New.\n\n\t* include/ext/array_allocator.h (allocate): Fix bad_alloc check.\n\t* testsuite/ext/array_allocator/2.cc: Fix wrt 64-bit archs (in\n\tthat case sizeof(_Rep) == 24).\n\nFrom-SVN: r88972", "tree": {"sha": "0c82b01d7007405dc4ce129bb2cea24575ff00a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c82b01d7007405dc4ce129bb2cea24575ff00a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbb0dcef128256fdd934617239ab00d62e45611a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb0dcef128256fdd934617239ab00d62e45611a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbb0dcef128256fdd934617239ab00d62e45611a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb0dcef128256fdd934617239ab00d62e45611a/comments", "author": null, "committer": null, "parents": [{"sha": "f76ccf602e952b33cbfb9684e307af4e09b9a82c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76ccf602e952b33cbfb9684e307af4e09b9a82c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76ccf602e952b33cbfb9684e307af4e09b9a82c"}], "stats": {"total": 95, "additions": 73, "deletions": 22}, "files": [{"sha": "fb324114889952f4f52ba3952746b90c316a0258", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb0dcef128256fdd934617239ab00d62e45611a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb0dcef128256fdd934617239ab00d62e45611a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cbb0dcef128256fdd934617239ab00d62e45611a", "patch": "@@ -1,3 +1,13 @@\n+2004-10-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.tcc (_S_create): Use consistently\n+\tthe exponential policy, simplify.\n+\t* testsuite/performance/21_strings/string_append_2.cc: New.\n+\n+\t* include/ext/array_allocator.h (allocate): Fix bad_alloc check.\n+\t* testsuite/ext/array_allocator/2.cc: Fix wrt 64-bit archs (in\n+\tthat case sizeof(_Rep) == 24).\n+\n 2004-10-12  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/17948"}, {"sha": "66eb982b538a609678dfa862894120e14d6ef471", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb0dcef128256fdd934617239ab00d62e45611a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb0dcef128256fdd934617239ab00d62e45611a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=cbb0dcef128256fdd934617239ab00d62e45611a", "patch": "@@ -503,24 +503,16 @@ namespace std\n       // low-balling it (especially when this algorithm is used with\n       // malloc implementations that allocate memory blocks rounded up\n       // to a size which is a power of 2).\n-      const size_type __pagesize = 4096; // must be 2^i * __subpagesize\n-      const size_type __subpagesize = 128; // should be >> __malloc_header_size\n-      const size_type __malloc_header_size = 4 * sizeof (void*);\n+      const size_type __pagesize = 4096;\n+      const size_type __malloc_header_size = 4 * sizeof(void*);\n \n       // The below implements an exponential growth policy, necessary to\n       // meet amortized linear time requirements of the library: see\n       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.\n       // It's active for allocations requiring an amount of memory above\n       // system pagesize. This is consistent with the requirements of the\n       // standard: http://gcc.gnu.org/ml/libstdc++/2001-07/msg00130.html\n-\n-      // The biggest string which fits in a memory page\n-      const size_type __page_capacity = ((__pagesize - __malloc_header_size\n-\t\t\t\t\t  - sizeof(_Rep) - sizeof(_CharT))\n-\t\t\t\t\t / sizeof(_CharT));\n-\n-      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity\n-\t  && __capacity > __page_capacity)\n+      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)\n \t__capacity = 2 * __old_capacity;\n \n       // NB: Need an array of char_type[__capacity], plus a terminating\n@@ -538,12 +530,6 @@ namespace std\n \t    __capacity = _S_max_size;\n \t  __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n \t}\n-      else if (__size > __subpagesize)\n-\t{\n-\t  const size_type __extra = __subpagesize - __adj_size % __subpagesize;\n-\t  __capacity += __extra / sizeof(_CharT);\n-\t  __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n-\t}\n \n       // NB: Might throw, but no worries about a leak, mate: _Rep()\n       // does not throw."}, {"sha": "66aa903e1540725f7c279305dcee289ebcb893d1", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb0dcef128256fdd934617239ab00d62e45611a/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb0dcef128256fdd934617239ab00d62e45611a/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=cbb0dcef128256fdd934617239ab00d62e45611a", "patch": "@@ -116,11 +116,11 @@ namespace __gnu_cxx\n       pointer\n       allocate(size_type __n, const void* = 0)\n       {\n-\tstatic size_type used;\n-\tif (__builtin_expect(used > array_type::_S_index, false))\n+\tstatic size_type __used;\n+\tif (__builtin_expect(__used + __n > array_type::_S_index, false))\n \t  throw std::bad_alloc();\n-\tpointer __ret = _M_array->begin() + used;\n-\tused += __n;\n+\tpointer __ret = _M_array->begin() + __used;\n+\t__used += __n;\n \treturn __ret;\n       }\n     };"}, {"sha": "9ee2d07d5544a805fa95f337759bf363e6b64424", "filename": "libstdc++-v3/testsuite/ext/array_allocator/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb0dcef128256fdd934617239ab00d62e45611a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb0dcef128256fdd934617239ab00d62e45611a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc?ref=cbb0dcef128256fdd934617239ab00d62e45611a", "patch": "@@ -32,7 +32,7 @@\n \n typedef char char_type;\n typedef std::char_traits<char_type> traits_type;\n-typedef std::tr1::array<char_type, 17> array_type;\n+typedef std::tr1::array<char_type, 32> array_type;\n \n array_type extern_array;\n "}, {"sha": "35cb583d4056a7898f8ae9c2e6ff6477de362d39", "filename": "libstdc++-v3/testsuite/performance/21_strings/string_append_2.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb0dcef128256fdd934617239ab00d62e45611a/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F21_strings%2Fstring_append_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb0dcef128256fdd934617239ab00d62e45611a/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F21_strings%2Fstring_append_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F21_strings%2Fstring_append_2.cc?ref=cbb0dcef128256fdd934617239ab00d62e45611a", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <string>\n+#include <testsuite_performance.h>\n+\n+// Short strings didn't grow quickly...\n+void test01()\n+{\n+  using namespace __gnu_test;\n+  time_counter time;\n+  resource_counter resource;\n+\n+  start_counters(time, resource);\n+  for (unsigned i = 0; i < 200000; ++i)\n+    {\n+      std::string a;\n+      for (unsigned j = 0; j < 400; ++j)\n+\ta.append(1, 'x');\n+    }\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"\", time, resource);\n+  clear_counters(time, resource);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}