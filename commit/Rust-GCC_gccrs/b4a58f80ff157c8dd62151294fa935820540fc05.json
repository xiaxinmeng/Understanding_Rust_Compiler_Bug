{"sha": "b4a58f80ff157c8dd62151294fa935820540fc05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRhNThmODBmZjE1N2M4ZGQ2MjE1MTI5NGZhOTM1ODIwNTQwZmMwNQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-04-08T13:34:27Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-04-08T13:34:27Z"}, "message": "arm.c (arm_const_double_by_parts): New function.\n\n\t* arm.c (arm_const_double_by_parts): New function.\n\t* arm-protos.h (arm_const_double_by_parts): Add prototype.\n\t* arm.md (define_split for 64-bit constants): Add another one.\n\nFrom-SVN: r97828", "tree": {"sha": "e066b3727e892d15e4d8ba5a00b57704b24ed8f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e066b3727e892d15e4d8ba5a00b57704b24ed8f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4a58f80ff157c8dd62151294fa935820540fc05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a58f80ff157c8dd62151294fa935820540fc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4a58f80ff157c8dd62151294fa935820540fc05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a58f80ff157c8dd62151294fa935820540fc05/comments", "author": null, "committer": null, "parents": [{"sha": "3623aa7017f2a9e867c4703e755933c10ebd4f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3623aa7017f2a9e867c4703e755933c10ebd4f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3623aa7017f2a9e867c4703e755933c10ebd4f94"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "ed81d90df681ffa90abdc98c7b48c55c01da3fba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a58f80ff157c8dd62151294fa935820540fc05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a58f80ff157c8dd62151294fa935820540fc05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4a58f80ff157c8dd62151294fa935820540fc05", "patch": "@@ -1,3 +1,9 @@\n+2005-04-08  Richard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\t* arm.c (arm_const_double_by_parts): New function.\n+\t* arm-protos.h (arm_const_double_by_parts): Add prototype.\n+\t* arm.md (define_split for 64-bit constants): Add another one.\n+\n 2005-04-08  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-ssa-operands.c (correct_use_link): Remove linear scan."}, {"sha": "087b475a96b880a670b243b8cae1885c8f92a458", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a58f80ff157c8dd62151294fa935820540fc05/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a58f80ff157c8dd62151294fa935820540fc05/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=b4a58f80ff157c8dd62151294fa935820540fc05", "patch": "@@ -91,6 +91,7 @@ extern rtx arm_gen_return_addr_mask (void);\n extern void arm_reload_in_hi (rtx *);\n extern void arm_reload_out_hi (rtx *);\n extern int arm_const_double_inline_cost (rtx);\n+extern bool arm_const_double_by_parts (rtx);\n extern const char *fp_immediate_constant (rtx);\n extern const char *output_call (rtx *);\n extern const char *output_call_mem (rtx *);"}, {"sha": "a1abe96a6e5af603c7644062b1725f414cde3999", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a58f80ff157c8dd62151294fa935820540fc05/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a58f80ff157c8dd62151294fa935820540fc05/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b4a58f80ff157c8dd62151294fa935820540fc05", "patch": "@@ -7418,6 +7418,41 @@ arm_const_double_inline_cost (rtx val)\n \t\t\t      NULL_RTX, NULL_RTX, 0, 0));\n }\n \n+/* Return true if it is worthwile to split a 64-bit constant into two\n+   32-bit operations.  This is the case if optimizing for size, or\n+   if we have load delay slots, or if one 32-bit part can be done with\n+   a single data operation.  */\n+bool\n+arm_const_double_by_parts (rtx val)\n+{\n+  enum machine_mode mode = GET_MODE (val);\n+  rtx part;\n+\n+  if (optimize_size || arm_ld_sched)\n+    return true;\n+\n+  if (mode == VOIDmode)\n+    mode = DImode;\n+  \n+  part = gen_highpart_mode (SImode, mode, val);\n+  \n+  gcc_assert (GET_CODE (part) == CONST_INT);\n+  \n+  if (const_ok_for_arm (INTVAL (part))\n+      || const_ok_for_arm (~INTVAL (part)))\n+    return true;\n+  \n+  part = gen_lowpart (SImode, val);\n+  \n+  gcc_assert (GET_CODE (part) == CONST_INT);\n+  \n+  if (const_ok_for_arm (INTVAL (part))\n+      || const_ok_for_arm (~INTVAL (part)))\n+    return true;\n+  \n+  return false;\n+}\n+\n /* Scan INSN and note any of its operands that need fixing.\n    If DO_PUSHES is false we do not actually push any of the fixups\n    needed.  The function returns TRUE if any fixups were needed/pushed."}, {"sha": "e94ceb81461c2f0a17cfb8dab4fb3788d0331fd3", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a58f80ff157c8dd62151294fa935820540fc05/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a58f80ff157c8dd62151294fa935820540fc05/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=b4a58f80ff157c8dd62151294fa935820540fc05", "patch": "@@ -4192,6 +4192,30 @@\n   \"\n )\n \n+; If optimizing for size, or if we have load delay slots, then \n+; we want to split the constant into two separate operations. \n+; In both cases this may split a trivial part into a single data op\n+; leaving a single complex constant to load.  We can also get longer\n+; offsets in a LDR which means we get better chances of sharing the pool\n+; entries.  Finally, we can normally do a better job of scheduling\n+; LDR instructions than we can with LDM.\n+; This pattern will only match if the one above did not.\n+(define_split\n+  [(set (match_operand:ANY64 0 \"arm_general_register_operand\" \"\")\n+\t(match_operand:ANY64 1 \"const_double_operand\" \"\"))]\n+  \"TARGET_ARM && reload_completed\n+   && arm_const_double_by_parts (operands[1])\"\n+  [(set (match_dup 0) (match_dup 1))\n+   (set (match_dup 2) (match_dup 3))]\n+  \"\n+  operands[2] = gen_highpart (SImode, operands[0]);\n+  operands[3] = gen_highpart_mode (SImode, GET_MODE (operands[0]),\n+\t\t\t\t   operands[1]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  \"\n+)\n+\n (define_split\n   [(set (match_operand:ANY64 0 \"arm_general_register_operand\" \"\")\n \t(match_operand:ANY64 1 \"arm_general_register_operand\" \"\"))]"}]}