{"sha": "285464d088412710a1dd83b7303775be88f7788e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg1NDY0ZDA4ODQxMjcxMGExZGQ4M2I3MzAzNzc1YmU4OGY3Nzg4ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-06-11T19:58:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-06-11T19:58:12Z"}, "message": "i386.c (x86_promote_QImode): Set for Athlon\n\n\n\t* i386.c (x86_promote_QImode): Set for Athlon\n\t(x86_fast_prefix): New global variable.\n\t(x86_arch_always_fancy_math_387): Fix formating.\n\t* i386.h (x86_fast_prefix): Declare\n\t(TARGET_FAST_PREFIX): define.\n\t* i386.md (and to strict_low_part, HI to SI\n\tpromoting splitter): Use new macro.\n\n\t* i386.h (RTX_COSTS): float_extend is not for free for SSE.\n\nFrom-SVN: r54521", "tree": {"sha": "fa83cf95f8899e74fe8c7adaf54ca514c168d7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa83cf95f8899e74fe8c7adaf54ca514c168d7c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/285464d088412710a1dd83b7303775be88f7788e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285464d088412710a1dd83b7303775be88f7788e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285464d088412710a1dd83b7303775be88f7788e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285464d088412710a1dd83b7303775be88f7788e/comments", "author": null, "committer": null, "parents": [{"sha": "f62bef4832bff6b72efe12c4013503e7fd0488cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62bef4832bff6b72efe12c4013503e7fd0488cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f62bef4832bff6b72efe12c4013503e7fd0488cc"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "8c89cdc473c25bbae06bf70425a44b947efe8bf1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285464d088412710a1dd83b7303775be88f7788e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285464d088412710a1dd83b7303775be88f7788e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=285464d088412710a1dd83b7303775be88f7788e", "patch": "@@ -1,3 +1,15 @@\n+Tue Jun 11 21:53:37 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (x86_promote_QImode): Set for Athlon\n+\t(x86_fast_prefix): New global variable.\n+\t(x86_arch_always_fancy_math_387): Fix formating.\n+\t* i386.h (x86_fast_prefix): Declare\n+\t(TARGET_FAST_PREFIX): define.\n+\t* i386.md (and to strict_low_part, HI to SI\n+\tpromoting splitter): Use new macro.\n+\n+\t* i386.h (RTX_COSTS): float_extend is not for free for SSE.\n+\n 2002-06-11  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Makefile.in (distclean): Delete junk left in testsuite"}, {"sha": "93e1a65a6fe712bca27a7250bf4721fb6c49e435", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285464d088412710a1dd83b7303775be88f7788e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285464d088412710a1dd83b7303775be88f7788e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=285464d088412710a1dd83b7303775be88f7788e", "patch": "@@ -376,7 +376,8 @@ const int x86_use_cltd = ~(m_PENT | m_K6);\n const int x86_read_modify_write = ~m_PENT;\n const int x86_read_modify = ~(m_PENT | m_PPRO);\n const int x86_split_long_moves = m_PPRO;\n-const int x86_promote_QImode = m_K6 | m_PENT | m_386 | m_486;\n+const int x86_promote_QImode = m_K6 | m_PENT | m_386 | m_486 | m_ATHLON;\n+const int x86_fast_prefix = ~(m_PENT | m_486 | m_386);\n const int x86_single_stringop = m_386 | m_PENT4;\n const int x86_qimode_math = ~(0);\n const int x86_promote_qi_regs = 0;\n@@ -393,7 +394,7 @@ const int x86_accumulate_outgoing_args = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_prologue_using_move = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_epilogue_using_move = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_decompose_lea = m_PENT4;\n-const int x86_arch_always_fancy_math_387 = m_PENT|m_PPRO|m_ATHLON|m_PENT4;\n+const int x86_arch_always_fancy_math_387 = m_PENT | m_PPRO | m_ATHLON | m_PENT4;\n \n /* In case the avreage insn count for single function invocation is\n    lower than this constant, emit fast (but longer) prologue and"}, {"sha": "11b663c164531a5cf983071ceb35589cae1c6fef", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285464d088412710a1dd83b7303775be88f7788e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285464d088412710a1dd83b7303775be88f7788e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=285464d088412710a1dd83b7303775be88f7788e", "patch": "@@ -201,7 +201,7 @@ extern const int x86_double_with_add, x86_partial_reg_stall, x86_movx;\n extern const int x86_use_loop, x86_use_fiop, x86_use_mov0;\n extern const int x86_use_cltd, x86_read_modify_write;\n extern const int x86_read_modify, x86_split_long_moves;\n-extern const int x86_promote_QImode, x86_single_stringop;\n+extern const int x86_promote_QImode, x86_single_stringop, x86_fast_prefix;\n extern const int x86_himode_math, x86_qimode_math, x86_promote_qi_regs;\n extern const int x86_promote_hi_regs, x86_integer_DFmode_moves;\n extern const int x86_add_esp_4, x86_add_esp_8, x86_sub_esp_4, x86_sub_esp_8;\n@@ -233,6 +233,7 @@ extern int x86_prefetch_sse;\n #define TARGET_READ_MODIFY_WRITE (x86_read_modify_write & CPUMASK)\n #define TARGET_READ_MODIFY (x86_read_modify & CPUMASK)\n #define TARGET_PROMOTE_QImode (x86_promote_QImode & CPUMASK)\n+#define TARGET_FAST_PREFIX (x86_fast_prefix & CPUMASK)\n #define TARGET_SINGLE_STRINGOP (x86_single_stringop & CPUMASK)\n #define TARGET_QIMODE_MATH (x86_qimode_math & CPUMASK)\n #define TARGET_HIMODE_MATH (x86_himode_math & CPUMASK)\n@@ -2698,7 +2699,10 @@ do {\t\t\t\t\t\t\t\\\n     TOPLEVEL_COSTS_N_INSNS (ix86_cost->add);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   case FLOAT_EXTEND:\t\t\t\t\t\t\t\\\n-    TOPLEVEL_COSTS_N_INSNS (0);\t\t\t\t\t\t\\\n+    if (!TARGET_SSE_MATH\t\t\t\t\t\t\\\n+\t|| !VALID_SSE_REG_MODE (GET_MODE (X)))\t\t\t\t\\\n+      TOPLEVEL_COSTS_N_INSNS (0);\t\t\t\t\t\\\n+    break;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   egress_rtx_costs:\t\t\t\t\t\t\t\\\n     break;"}, {"sha": "fd2cb47f601007a410626b6f13cf3cafb0eba42f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285464d088412710a1dd83b7303775be88f7788e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285464d088412710a1dd83b7303775be88f7788e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=285464d088412710a1dd83b7303775be88f7788e", "patch": "@@ -7881,7 +7881,7 @@\n \t(and (match_dup 0)\n \t     (const_int -65536)))\n    (clobber (reg:CC 17))]\n-  \"optimize_size\"\n+  \"optimize_size || (TARGET_FAST_PREFIX && !TARGET_PARTIAL_REG_STALL)\"\n   [(set (strict_low_part (match_dup 1)) (const_int 0))]\n   \"operands[1] = gen_lowpart (HImode, operands[0]);\")\n \n@@ -16334,7 +16334,8 @@\n    (clobber (reg:CC 17))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n    && ((GET_MODE (operands[0]) == HImode \n-\t&& (!optimize_size || GET_CODE (operands[2]) != CONST_INT\n+\t&& ((!optimize_size && !TARGET_FAST_PREFIX)\n+\t    || GET_CODE (operands[2]) != CONST_INT\n \t    || CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K')))\n        || (GET_MODE (operands[0]) == QImode \n \t   && (TARGET_PROMOTE_QImode || optimize_size)))\""}, {"sha": "d390db3f528e7a0927333dd76c5870bfc8a5304f", "filename": "gcc/gcse.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285464d088412710a1dd83b7303775be88f7788e/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285464d088412710a1dd83b7303775be88f7788e/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=285464d088412710a1dd83b7303775be88f7788e", "patch": "@@ -5153,6 +5153,11 @@ gcse_emit_move_after (src, dest, insn)\n \n   new = emit_insn_after (gen_rtx_SET (VOIDmode, dest, src), insn);\n \n+  /* want_to_gcse_p verifies that this move will be valid.  Still this call\n+     is mandatory as it may create clobbers required by the pattern.  */\n+  if (insn_invalid_p (insn))\n+    abort ();\n+\n   /* Note the equivalence for local CSE pass.  */\n   if ((note = find_reg_equal_equiv_note (insn)))\n     eqv = XEXP (note, 0);"}]}