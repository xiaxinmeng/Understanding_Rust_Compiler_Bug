{"sha": "ed9fa8d2a37d72d00e76f63968fad2f2819a3219", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5ZmE4ZDJhMzdkNzJkMDBlNzZmNjM5NjhmYWQyZjI4MTlhMzIxOQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2015-08-22T06:49:32Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2015-08-22T06:49:32Z"}, "message": "Remove index from AARCH64_FUSION_PAIR\n\n    Instead of doing an explict index in aarch64-fusion-pairs.def, we\n    should have an enum which does the index instead.  This allows\n    you to add/remove them without worrying about the order being\n    correct and having holes or worry about merge conficts.\n\n    OK? Bootstrapped and tested on aarch64-linux-gnu with no regressions.\n\n    ChangeLog:\n    * aarch64-fusion-pairs.def: Remove all index to AARCH64_FUSION_PAIR.\n    * config/aarch64/aarch64-protos.h (aarch64_fusion_pairs_index): New enum.\n    (aarch64_fusion_pairs): Base the shifted value on the index instead\n    Rewrite AARCH64_FUSE_ALL to be based on the end index.\n    of the argument to AARCH64_FUSION_PAIR.\n    * config/aarch64/aarch64.c: Remove the last argument to AARCH64_FUSION_PAIR.\n\nFrom-SVN: r227094", "tree": {"sha": "fb86169043472e7715185405e9863a5257a048b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb86169043472e7715185405e9863a5257a048b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed9fa8d2a37d72d00e76f63968fad2f2819a3219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9fa8d2a37d72d00e76f63968fad2f2819a3219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9fa8d2a37d72d00e76f63968fad2f2819a3219", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2321dd914f1f8a77cb01981ef25d1d9681aff482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2321dd914f1f8a77cb01981ef25d1d9681aff482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2321dd914f1f8a77cb01981ef25d1d9681aff482"}], "stats": {"total": 205, "additions": 161, "deletions": 44}, "files": [{"sha": "f89ae379455072a2c6e010a29ebc8939b2bb5b18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed9fa8d2a37d72d00e76f63968fad2f2819a3219", "patch": "@@ -1,3 +1,14 @@\n+2015-08-22  Andrew Pinski  <apinski@cavium.com>\n+\n+\t * aarch64-fusion-pairs.def: Remove all index to AARCH64_FUSION_PAIR.\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_fusion_pairs_index): New enum.\n+\t(aarch64_fusion_pairs): Base the shifted value on the index instead\n+\tRewrite AARCH64_FUSE_ALL to be based on the end index.\n+\tof the argument to AARCH64_FUSION_PAIR.\n+\t* config/aarch64/aarch64.c: Remove the last argument to\n+\tAARCH64_FUSION_PAIR.\n+\n 2015-08-22  Mikhail Maltsev <maltsevm@gmail.com>\n \n \t* dominance.c (new_zero_array): Define."}, {"sha": "53bbef46eb2c5a5c4c1f6e1f534bcce508e80963", "filename": "gcc/config/aarch64/aarch64-fusion-pairs.def", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def?ref=ed9fa8d2a37d72d00e76f63968fad2f2819a3219", "patch": "@@ -20,19 +20,17 @@\n /* Pairs of instructions which can be fused. before including this file,\n    define a macro:\n \n-     AARCH64_FUSION_PAIR (name, internal_name, index_bit)\n+     AARCH64_FUSION_PAIR (name, internal_name)\n \n    Where:\n \n      NAME is a string giving a friendly name for the instructions to fuse.\n      INTERNAL_NAME gives the internal name suitable for appending to\n-     AARCH64_FUSE_ to give an enum name.\n-     INDEX_BIT is the bit to set in the bitmask of supported fusion\n-     operations.  */\n-\n-AARCH64_FUSION_PAIR (\"mov+movk\", MOV_MOVK, 0)\n-AARCH64_FUSION_PAIR (\"adrp+add\", ADRP_ADD, 1)\n-AARCH64_FUSION_PAIR (\"movk+movk\", MOVK_MOVK, 2)\n-AARCH64_FUSION_PAIR (\"adrp+ldr\", ADRP_LDR, 3)\n-AARCH64_FUSION_PAIR (\"cmp+branch\", CMP_BRANCH, 4)\n+     AARCH64_FUSE_ to give an enum name. */\n+\n+AARCH64_FUSION_PAIR (\"mov+movk\", MOV_MOVK)\n+AARCH64_FUSION_PAIR (\"adrp+add\", ADRP_ADD)\n+AARCH64_FUSION_PAIR (\"movk+movk\", MOVK_MOVK)\n+AARCH64_FUSION_PAIR (\"adrp+ldr\", ADRP_LDR)\n+AARCH64_FUSION_PAIR (\"cmp+branch\", CMP_BRANCH)\n "}, {"sha": "be3cbe17a730ac4528db05fe4ef94207a936b4ef", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=ed9fa8d2a37d72d00e76f63968fad2f2819a3219", "patch": "@@ -201,23 +201,24 @@ struct tune_params\n   unsigned int extra_tuning_flags;\n };\n \n-#define AARCH64_FUSION_PAIR(x, name, index) \\\n-  AARCH64_FUSE_##name = (1 << index),\n+#define AARCH64_FUSION_PAIR(x, name) \\\n+  AARCH64_FUSE_##name##_index, \n /* Supported fusion operations.  */\n-enum aarch64_fusion_pairs\n+enum aarch64_fusion_pairs_index\n {\n-  AARCH64_FUSE_NOTHING = 0,\n #include \"aarch64-fusion-pairs.def\"\n-\n-/* Hacky macro to build AARCH64_FUSE_ALL.  The sequence below expands\n-   to:\n-   AARCH64_FUSE_ALL = 0 | AARCH64_FUSE_index1 | AARCH64_FUSE_index2 ...  */\n+  AARCH64_FUSE_index_END\n+};\n #undef AARCH64_FUSION_PAIR\n-#define AARCH64_FUSION_PAIR(x, name, y) \\\n-  | AARCH64_FUSE_##name\n \n-  AARCH64_FUSE_ALL = 0\n+#define AARCH64_FUSION_PAIR(x, name) \\\n+  AARCH64_FUSE_##name = (1u << AARCH64_FUSE_##name##_index),\n+/* Supported fusion operations.  */\n+enum aarch64_fusion_pairs\n+{\n+  AARCH64_FUSE_NOTHING = 0,\n #include \"aarch64-fusion-pairs.def\"\n+  AARCH64_FUSE_ALL = (1u << AARCH64_FUSE_index_END) - 1\n };\n #undef AARCH64_FUSION_PAIR\n "}, {"sha": "c666dceb41c9f6bc8318d76e0ac36cefa1dee146", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ed9fa8d2a37d72d00e76f63968fad2f2819a3219", "patch": "@@ -171,7 +171,7 @@ struct aarch64_flag_desc\n   unsigned int flag;\n };\n \n-#define AARCH64_FUSION_PAIR(name, internal_name, y) \\\n+#define AARCH64_FUSION_PAIR(name, internal_name) \\\n   { name, AARCH64_FUSE_##internal_name },\n static const struct aarch64_flag_desc aarch64_fusible_pairs[] =\n {"}, {"sha": "cf9636862f21a547a7b9e6c1147c72a79a8d9009", "filename": "gcc/config/aarch64/thunderx.md", "status": "modified", "additions": 129, "deletions": 22, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/gcc%2Fconfig%2Faarch64%2Fthunderx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9fa8d2a37d72d00e76f63968fad2f2819a3219/gcc%2Fconfig%2Faarch64%2Fthunderx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fthunderx.md?ref=ed9fa8d2a37d72d00e76f63968fad2f2819a3219", "patch": "@@ -39,7 +39,7 @@\n \n (define_insn_reservation \"thunderx_shift\" 1\n   (and (eq_attr \"tune\" \"thunderx\")\n-       (eq_attr \"type\" \"bfm,extend,shift_imm,shift_reg\"))\n+       (eq_attr \"type\" \"bfm,extend,shift_imm,shift_reg,rbit,rev\"))\n   \"thunderx_pipe0 | thunderx_pipe1\")\n \n \n@@ -66,12 +66,18 @@\n        (eq_attr \"type\" \"mul,muls,mla,mlas,clz,smull,umull,smlal,umlal\"))\n   \"thunderx_pipe1 + thunderx_mult\")\n \n-;; Multiply high instructions take an extra cycle and cause the muliply unit to\n-;; be busy for an extra cycle.\n+;; crcb,crch,crcw is 4 cycles and can only happen on pipe 1\n \n-;(define_insn_reservation \"thunderx_mul_high\" 5\n+(define_insn_reservation \"thunderx_crc32\" 4\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"crc\"))\n+  \"thunderx_pipe1 + thunderx_mult\")\n+\n+;; crcx is 5 cycles and only happen on pipe 1\n+;(define_insn_reservation \"thunderx_crc64\" 5\n ;  (and (eq_attr \"tune\" \"thunderx\")\n-;       (eq_attr \"type\" \"smull,umull\"))\n+;       (eq_attr \"type\" \"crc\")\n+;       (eq_attr \"mode\" \"DI\"))\n ;  \"thunderx_pipe1 + thunderx_mult\")\n \n (define_insn_reservation \"thunderx_div32\" 22\n@@ -97,6 +103,11 @@\n        (eq_attr \"type\" \"store2\"))\n   \"thunderx_pipe0 + thunderx_pipe1\")\n \n+;; Prefetch are single issued\n+;(define_insn_reservation \"thunderx_prefetch\" 1\n+;  (and (eq_attr \"tune\" \"thunderx\")\n+;       (eq_attr \"type\" \"prefetch\"))\n+;  \"thunderx_pipe0 + thunderx_pipe1\")\n \n ;; loads (and load pairs) from L1 take 3 cycles in pipe 0\n (define_insn_reservation \"thunderx_load\" 3\n@@ -121,17 +132,33 @@\n        (eq_attr \"type\" \"fconsts,fconstd\"))\n   \"thunderx_pipe1\")\n \n-;; Moves between fp are 2 cycles including min/max/select/abs/neg\n+;; Moves between fp are 2 cycles including min/max\n (define_insn_reservation \"thunderx_fmov\" 2\n   (and (eq_attr \"tune\" \"thunderx\")\n-       (eq_attr \"type\" \"fmov,f_minmaxs,f_minmaxd,fcsel,ffarithd,ffariths\"))\n+       (eq_attr \"type\" \"fmov,f_minmaxs,f_minmaxd\"))\n+  \"thunderx_pipe1\")\n+\n+;; ABS, and NEG are 1 cycle\n+(define_insn_reservation \"thunderx_fabs\" 1\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"ffariths,ffarithd\"))\n+  \"thunderx_pipe1\")\n+\n+(define_insn_reservation \"thunderx_fcsel\" 3\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"fcsel\"))\n   \"thunderx_pipe1\")\n \n (define_insn_reservation \"thunderx_fmovgpr\" 2\n   (and (eq_attr \"tune\" \"thunderx\")\n        (eq_attr \"type\" \"f_mrc, f_mcr\"))\n   \"thunderx_pipe1\")\n \n+(define_insn_reservation \"thunderx_fcmp\" 3\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"fcmps,fcmpd\"))\n+  \"thunderx_pipe1\")\n+\n (define_insn_reservation \"thunderx_fmul\" 6\n   (and (eq_attr \"tune\" \"thunderx\")\n        (eq_attr \"type\" \"fmacs,fmacd,fmuls,fmuld\"))\n@@ -152,21 +179,21 @@\n        (eq_attr \"type\" \"fsqrts\"))\n   \"thunderx_pipe1 + thunderx_divide, thunderx_divide*13\")\n \n-(define_insn_reservation \"thunderx_fsqrtd\" 28\n+(define_insn_reservation \"thunderx_fsqrtd\" 31\n   (and (eq_attr \"tune\" \"thunderx\")\n        (eq_attr \"type\" \"fsqrtd\"))\n-  \"thunderx_pipe1 + thunderx_divide, thunderx_divide*31\")\n+  \"thunderx_pipe1 + thunderx_divide, thunderx_divide*27\")\n \n ;; The rounding conversion inside fp is 4 cycles\n (define_insn_reservation \"thunderx_frint\" 4\n   (and (eq_attr \"tune\" \"thunderx\")\n-       (eq_attr \"type\" \"f_rints,f_rintd\"))\n+       (eq_attr \"type\" \"f_cvt,f_rints,f_rintd\"))\n   \"thunderx_pipe1\")\n \n ;; Float to integer with a move from int to/from float is 6 cycles\n (define_insn_reservation \"thunderx_f_cvt\" 6\n   (and (eq_attr \"tune\" \"thunderx\")\n-       (eq_attr \"type\" \"f_cvt,f_cvtf2i,f_cvti2f\"))\n+       (eq_attr \"type\" \"f_cvtf2i,f_cvti2f\"))\n   \"thunderx_pipe1\")\n \n ;; FP/SIMD load/stores happen in pipe 0\n@@ -184,9 +211,12 @@\n   \"thunderx_pipe0+thunderx_pipe1\")\n \n ;; FP/SIMD Stores takes one cycle in pipe 0\n+;; ST1 with one registers either multiple structures or single structure is\n+;;    also one cycle.\n (define_insn_reservation \"thunderx_simd_fp_store\" 1\n   (and (eq_attr \"tune\" \"thunderx\")\n-       (eq_attr \"type\" \"f_stored,f_stores,neon_store1_1reg,neon_store1_1reg_q\"))\n+       (eq_attr \"type\" \"f_stored,f_stores,neon_store1_1reg,neon_store1_1reg_q, \\\n+\t\t\tneon_store1_one_lane, neon_store1_one_lane_q\"))\n   \"thunderx_pipe0\")\n \n ;; 64bit neon store pairs are single issue for one cycle\n@@ -201,24 +231,38 @@\n        (eq_attr \"type\" \"neon_store1_2reg_q\"))\n   \"(thunderx_pipe0 + thunderx_pipe1)*2\")\n \n+;; LD1R/LD1 (with a single struct) takes 6 cycles and issued in pipe0\n+(define_insn_reservation \"thunderx_neon_ld1\" 6\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_load1_all_lanes\"))\n+  \"thunderx_pipe0\")\n \n ;; SIMD/NEON (q forms take an extra cycle)\n+;; SIMD For ThunderX is 64bit wide,\n \n-;; Thunder simd move instruction types - 2/3 cycles\n+;; ThunderX simd move instruction types - 2/3 cycles\n+;; ThunderX dup, ins is the same\n+;; ThunderX SIMD fabs/fneg instruction types\n (define_insn_reservation \"thunderx_neon_move\" 2\n   (and (eq_attr \"tune\" \"thunderx\")\n        (eq_attr \"type\" \"neon_logic, neon_bsl, neon_fp_compare_s, \\\n-\t\t\tneon_fp_compare_d, neon_move\"))\n+\t\t\tneon_fp_compare_d, neon_move, neon_dup, \\\n+\t\t\tneon_ins, neon_from_gp, neon_to_gp, \\\n+\t\t\tneon_abs, neon_neg, \\\n+\t\t\tneon_fp_neg_s, neon_fp_abs_s\"))\n   \"thunderx_pipe1 + thunderx_simd\")\n \n (define_insn_reservation \"thunderx_neon_move_q\" 3\n   (and (eq_attr \"tune\" \"thunderx\")\n        (eq_attr \"type\" \"neon_logic_q, neon_bsl_q, neon_fp_compare_s_q, \\\n-\t\t\tneon_fp_compare_d_q, neon_move_q\"))\n+\t\t\tneon_fp_compare_d_q, neon_move_q, neon_dup_q, \\\n+\t\t\tneon_ins_q, neon_from_gp_q, neon_to_gp_q, \\\n+\t\t\tneon_abs_q, neon_neg_q, \\\n+\t\t\tneon_fp_neg_s_q, neon_fp_neg_d_q, \\\n+\t\t\tneon_fp_abs_s_q, neon_fp_abs_d_q\"))\n   \"thunderx_pipe1 + thunderx_simd, thunderx_simd\")\n \n-\n-;; Thunder simd simple/add instruction types - 4/5 cycles\n+;; ThunderX simd simple/add instruction types - 4/5 cycles\n \n (define_insn_reservation \"thunderx_neon_add\" 4\n   (and (eq_attr \"tune\" \"thunderx\")\n@@ -227,7 +271,9 @@\n \t\t\tneon_add_halve, neon_sub_halve, neon_qadd, neon_compare, \\\n \t\t\tneon_compare_zero, neon_minmax, neon_abd, neon_add, neon_sub, \\\n \t\t\tneon_fp_minmax_s, neon_fp_minmax_d, neon_reduc_add, neon_cls, \\\n-\t\t\tneon_qabs, neon_qneg, neon_fp_addsub_s, neon_fp_addsub_d\"))\n+\t\t\tneon_qabs, neon_qneg, neon_fp_addsub_s, neon_fp_addsub_d, \\\n+\t\t\tneon_arith_acc, neon_rev, neon_fp_abd_s, neon_fp_abd_d, \\\n+\t\t\tneon_fp_reduc_minmax_s\"))\n   \"thunderx_pipe1 + thunderx_simd\")\n \n ;; BIG NOTE: neon_add_long/neon_sub_long don't have a q form which is incorrect\n@@ -240,13 +286,74 @@\n \t\t\tneon_compare_zero_q, neon_minmax_q, neon_abd_q, neon_add_q, neon_sub_q, \\\n \t\t\tneon_fp_minmax_s_q, neon_fp_minmax_d_q, neon_reduc_add_q, neon_cls_q, \\\n \t\t\tneon_qabs_q, neon_qneg_q, neon_fp_addsub_s_q, neon_fp_addsub_d_q, \\\n-\t\t\tneon_add_long, neon_sub_long\"))\n+\t\t\tneon_add_long, neon_sub_long, neon_fp_abd_s_q, neon_fp_abd_d_q, \\\n+\t\t\tneon_arith_acc_q, neon_rev_q, \\\n+\t\t\tneon_fp_reduc_minmax_s_q, neon_fp_reduc_minmax_d_q\"))\n   \"thunderx_pipe1 + thunderx_simd, thunderx_simd\")\n \n+;; Multiplies (float and integer) and shifts and permutes (except for TBL) and float conversions\n+;; are 6/7 cycles\n+(define_insn_reservation \"thunderx_neon_mult\" 6\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_fp_mul_s, neon_fp_mul_d, neon_fp_mla_s, neon_fp_mla_d, \\\n+\t\t\tneon_mla_b, neon_mla_h, neon_mla_s, \\\n+\t\t\tneon_mla_h_scalar, neon_mla_s_scalar, \\\n+\t\t\tneon_ext, neon_shift_imm, neon_permute, \\\n+\t\t\tneon_int_to_fp_s, neon_int_to_fp_d, neon_shift_reg, \\\n+\t\t\tneon_sat_shift_reg, neon_shift_acc, \\\n+\t\t\tneon_mul_b, neon_mul_h, neon_mul_s, \\\n+\t\t\tneon_mul_h_scalar, neon_mul_s_scalar, \\\n+\t\t\tneon_fp_mul_s_scalar, \\\n+\t\t\tneon_fp_mla_s_scalar\"))\n+  \"thunderx_pipe1 + thunderx_simd\")\n+\n+(define_insn_reservation \"thunderx_neon_mult_q\" 7\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_fp_mul_s_q, neon_fp_mul_d_q, neon_fp_mla_s_q, neon_fp_mla_d_q, \\\n+\t\t\tneon_mla_b_q, neon_mla_h_q, neon_mla_s_q, \\\n+\t\t\tneon_mla_h_scalar_q, neon_mla_s_scalar_q, \\\n+\t\t\tneon_ext_q, neon_shift_imm_q, neon_permute_q, \\\n+\t\t\tneon_int_to_fp_s_q, neon_int_to_fp_d_q, neon_shift_reg_q, \\\n+\t\t\tneon_sat_shift_reg_q, neon_shift_acc_q, \\\n+\t\t\tneon_shift_imm_long, \\\n+\t\t\tneon_mul_b_q, neon_mul_h_q, neon_mul_s_q, \\\n+\t\t\tneon_mul_h_scalar_q, neon_mul_s_scalar_q, \\\n+\t\t\tneon_fp_mul_s_scalar_q, neon_fp_mul_d_scalar_q, \\\n+\t\t\tneon_mul_b_long, neon_mul_h_long, neon_mul_s_long, \\\n+\t\t\tneon_shift_imm_narrow_q, neon_fp_cvt_widen_s, neon_fp_cvt_narrow_d_q, \\\n+\t\t\tneon_fp_mla_s_scalar_q, neon_fp_mla_d_scalar_q\"))\n+  \"thunderx_pipe1 + thunderx_simd, thunderx_simd\")\n+\n+\n+;; AES[ED] is 5 cycles\n+(define_insn_reservation \"thunderx_crypto_aese\" 5\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"crypto_aese\"))\n+  \"thunderx_pipe1 + thunderx_simd, thunderx_simd\")\n \n-;; Thunder 128bit SIMD reads the upper halve in cycle 2 and writes in the last cycle\n-(define_bypass 2 \"thunderx_neon_move_q\" \"thunderx_neon_move_q, thunderx_neon_add_q\")\n-(define_bypass 4 \"thunderx_neon_add_q\" \"thunderx_neon_move_q, thunderx_neon_add_q\")\n+;; AES{,I}MC is 3 cycles\n+(define_insn_reservation \"thunderx_crypto_aesmc\" 3\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"crypto_aesmc\"))\n+  \"thunderx_pipe1 + thunderx_simd, thunderx_simd\")\n+\n+\n+;; Thunder 128bit SIMD reads the upper halve in cycle 2 and writes upper halve in the last cycle\n+(define_bypass 2 \"thunderx_neon_move_q\" \"thunderx_neon_move_q, thunderx_neon_add_q, thunderx_neon_mult_q\")\n+(define_bypass 4 \"thunderx_neon_add_q\" \"thunderx_neon_move_q, thunderx_neon_add_q, thunderx_neon_mult_q\")\n+(define_bypass 6 \"thunderx_neon_mult_q\" \"thunderx_neon_move_q, thunderx_neon_add_q, thunderx_neon_mult_q\")\n+\n+;; 64bit TBL is emulated and takes 160 cycles\n+(define_insn_reservation \"thunderx_tbl\" 160\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_tbl1\"))\n+  \"(thunderx_pipe1+thunderx_pipe0)*160\")\n+\n+;; 128bit TBL is emulated and takes 320 cycles\n+(define_insn_reservation \"thunderx_tblq\" 320\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_tbl1_q\"))\n+  \"(thunderx_pipe1+thunderx_pipe0)*320\")\n \n ;; Assume both pipes are needed for unknown and multiple-instruction\n ;; patterns."}]}