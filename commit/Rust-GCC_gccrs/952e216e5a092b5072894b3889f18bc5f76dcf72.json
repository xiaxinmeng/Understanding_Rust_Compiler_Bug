{"sha": "952e216e5a092b5072894b3889f18bc5f76dcf72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUyZTIxNmU1YTA5MmI1MDcyODk0YjM4ODlmMThiYzVmNzZkY2Y3Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-02-14T08:23:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-14T08:23:18Z"}, "message": "re PR tree-optimization/62209 (ICE with LTO on valid code on x86_64-linux-gnu)\n\n\tPR tree-optimization/62209\n\t* tree-ssa-reassoc.c (update_range_test): If stmt is a PHI and\n\top == range->exp, insert seq and gimplified code after labels\n\tinstead of after the phi.\n\nFrom-SVN: r220706", "tree": {"sha": "6fd332fa48a75bfd4ee308da8c22deaa0c1fea37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd332fa48a75bfd4ee308da8c22deaa0c1fea37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/952e216e5a092b5072894b3889f18bc5f76dcf72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952e216e5a092b5072894b3889f18bc5f76dcf72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952e216e5a092b5072894b3889f18bc5f76dcf72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952e216e5a092b5072894b3889f18bc5f76dcf72/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b671235f7970e38b26c8940f752b5d57441f225b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b671235f7970e38b26c8940f752b5d57441f225b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b671235f7970e38b26c8940f752b5d57441f225b"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "75c186502707391df0218704ff4a833fc614b31b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952e216e5a092b5072894b3889f18bc5f76dcf72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952e216e5a092b5072894b3889f18bc5f76dcf72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=952e216e5a092b5072894b3889f18bc5f76dcf72", "patch": "@@ -1,3 +1,10 @@\n+2015-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/62209\n+\t* tree-ssa-reassoc.c (update_range_test): If stmt is a PHI and\n+\top == range->exp, insert seq and gimplified code after labels\n+\tinstead of after the phi.\n+\n 2015-02-13  Jeff Law  <law@redhat.com>\n \n \tPR bootstrap/65060"}, {"sha": "ce37053bdb35e7f7bc751ddcab1235da884e6fab", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952e216e5a092b5072894b3889f18bc5f76dcf72/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952e216e5a092b5072894b3889f18bc5f76dcf72/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=952e216e5a092b5072894b3889f18bc5f76dcf72", "patch": "@@ -2177,27 +2177,51 @@ update_range_test (struct range_entry *range, struct range_entry *otherrange,\n \n   tem = fold_convert_loc (loc, optype, tem);\n   gsi = gsi_for_stmt (stmt);\n+  unsigned int uid = gimple_uid (stmt);\n   /* In rare cases range->exp can be equal to lhs of stmt.\n      In that case we have to insert after the stmt rather then before\n-     it.  */\n-  if (op == range->exp)\n+     it.  If stmt is a PHI, insert it at the start of the basic block.  */\n+  if (op != range->exp)\n+    {\n+      gsi_insert_seq_before (&gsi, seq, GSI_SAME_STMT);\n+      tem = force_gimple_operand_gsi (&gsi, tem, true, NULL_TREE, true,\n+\t\t\t\t      GSI_SAME_STMT);\n+      gsi_prev (&gsi);\n+    }\n+  else if (gimple_code (stmt) != GIMPLE_PHI)\n     {\n       gsi_insert_seq_after (&gsi, seq, GSI_CONTINUE_LINKING);\n       tem = force_gimple_operand_gsi (&gsi, tem, true, NULL_TREE, false,\n \t\t\t\t      GSI_CONTINUE_LINKING);\n     }\n   else\n     {\n+      gsi = gsi_after_labels (gimple_bb (stmt));\n+      if (!gsi_end_p (gsi))\n+\tuid = gimple_uid (gsi_stmt (gsi));\n+      else\n+\t{\n+\t  gsi = gsi_start_bb (gimple_bb (stmt));\n+\t  uid = 1;\n+\t  while (!gsi_end_p (gsi))\n+\t    {\n+\t      uid = gimple_uid (gsi_stmt (gsi));\n+\t      gsi_next (&gsi);\n+\t    }\n+\t}\n       gsi_insert_seq_before (&gsi, seq, GSI_SAME_STMT);\n       tem = force_gimple_operand_gsi (&gsi, tem, true, NULL_TREE, true,\n \t\t\t\t      GSI_SAME_STMT);\n-      gsi_prev (&gsi);\n+      if (gsi_end_p (gsi))\n+\tgsi = gsi_last_bb (gimple_bb (stmt));\n+      else\n+\tgsi_prev (&gsi);\n     }\n   for (; !gsi_end_p (gsi); gsi_prev (&gsi))\n     if (gimple_uid (gsi_stmt (gsi)))\n       break;\n     else\n-      gimple_set_uid (gsi_stmt (gsi), gimple_uid (stmt));\n+      gimple_set_uid (gsi_stmt (gsi), uid);\n \n   oe->op = tem;\n   range->exp = exp;"}]}