{"sha": "4a4cd49c06a5bc003ce6282c4c613575185ac118", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE0Y2Q0OWMwNmE1YmMwMDNjZTYyODJjNGM2MTM1NzUxODVhYzExOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-12-21T12:59:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-12-21T12:59:06Z"}, "message": "re PR target/30230 (Incorrect ia64 EH info when an EH region ends in the middle of a bundle)\n\n\tPR target/30230\n\t* config/ia64/ia64.c (ia64_add_bundle_selector_before): New function.\n\t(bundling): Use it.\n\n\t* g++.dg/eh/ia64-2.C: New test.\n\nFrom-SVN: r120103", "tree": {"sha": "1d489ceef638d5a2452b97cc182f9c3fcf0a78e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d489ceef638d5a2452b97cc182f9c3fcf0a78e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a4cd49c06a5bc003ce6282c4c613575185ac118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4cd49c06a5bc003ce6282c4c613575185ac118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4cd49c06a5bc003ce6282c4c613575185ac118", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4cd49c06a5bc003ce6282c4c613575185ac118/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "970af8677126773a729c5fde809ab307b6494082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970af8677126773a729c5fde809ab307b6494082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/970af8677126773a729c5fde809ab307b6494082"}], "stats": {"total": 127, "additions": 119, "deletions": 8}, "files": [{"sha": "f3e2559d2a6cfd8f39eee0d57f65615ad862d32a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4cd49c06a5bc003ce6282c4c613575185ac118/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4cd49c06a5bc003ce6282c4c613575185ac118/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a4cd49c06a5bc003ce6282c4c613575185ac118", "patch": "@@ -1,3 +1,9 @@\n+2006-12-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/30230\n+\t* config/ia64/ia64.c (ia64_add_bundle_selector_before): New function.\n+\t(bundling): Use it.\n+\n 2006-12-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR target/28966"}, {"sha": "5ee5a00779be9c7aaa10703efdc3a7cb3dd5234b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4cd49c06a5bc003ce6282c4c613575185ac118/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4cd49c06a5bc003ce6282c4c613575185ac118/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=4a4cd49c06a5bc003ce6282c4c613575185ac118", "patch": "@@ -7646,6 +7646,53 @@ get_next_important_insn (rtx insn, rtx tail)\n   return NULL_RTX;\n }\n \n+/* Add a bundle selector TEMPLATE0 before INSN.  */\n+\n+static void\n+ia64_add_bundle_selector_before (int template0, rtx insn)\n+{\n+  rtx b = gen_bundle_selector (GEN_INT (template0));\n+\n+  ia64_emit_insn_before (b, insn);\n+#if NR_BUNDLES == 10\n+  if ((template0 == 4 || template0 == 5)\n+      && (flag_unwind_tables || (flag_exceptions && !USING_SJLJ_EXCEPTIONS)))\n+    {\n+      int i;\n+      rtx note = NULL_RTX;\n+\n+      /* In .mbb and .bbb bundles, check if CALL_INSN isn't in the\n+\t first or second slot.  If it is and has REG_EH_NOTE set, copy it\n+\t to following nops, as br.call sets rp to the address of following\n+\t bundle and therefore an EH region end must be on a bundle\n+\t boundary.  */\n+      insn = PREV_INSN (insn);\n+      for (i = 0; i < 3; i++)\n+\t{\n+\t  do\n+\t    insn = next_active_insn (insn);\n+\t  while (GET_CODE (insn) == INSN\n+\t\t && get_attr_empty (insn) == EMPTY_YES);\n+\t  if (GET_CODE (insn) == CALL_INSN)\n+\t    note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n+\t  else if (note)\n+\t    {\n+\t      int code;\n+\n+\t      gcc_assert ((code = recog_memoized (insn)) == CODE_FOR_nop\n+\t\t\t  || code == CODE_FOR_nop_b);\n+\t      if (find_reg_note (insn, REG_EH_REGION, NULL_RTX))\n+\t\tnote = NULL_RTX;\n+\t      else\n+\t\tREG_NOTES (insn)\n+\t\t  = gen_rtx_EXPR_LIST (REG_EH_REGION, XEXP (note, 0),\n+\t\t\t\t       REG_NOTES (insn));\n+\t    }\n+\t}\n+    }\n+#endif\n+}\n+\n /* The following function does insn bundling.  Bundling means\n    inserting templates and nop insns to fit insn groups into permitted\n    templates.  Instruction scheduling uses NDFA (non-deterministic\n@@ -7927,8 +7974,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t\t/* We are at the start of a bundle: emit the template\n \t\t   (it should be defined).  */\n \t\tgcc_assert (template0 >= 0);\n-\t\tb = gen_bundle_selector (GEN_INT (template0));\n-\t\tia64_emit_insn_before (b, nop);\n+\t\tia64_add_bundle_selector_before (template0, nop);\n \t\t/* If we have two bundle window, we make one bundle\n \t\t   rotation.  Otherwise template0 will be undefined\n \t\t   (negative value).  */\n@@ -7954,8 +8000,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t  /* The current insn is at the bundle start: emit the\n \t     template.  */\n \t  gcc_assert (template0 >= 0);\n-\t  b = gen_bundle_selector (GEN_INT (template0));\n-\t  ia64_emit_insn_before (b, insn);\n+\t  ia64_add_bundle_selector_before (template0, insn);\n \t  b = PREV_INSN (insn);\n \t  insn = b;\n \t  /* See comment above in analogous place for emitting nops\n@@ -7977,8 +8022,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t      /* See comment above in analogous place for emitting nops\n \t\t after the insn.  */\n \t      gcc_assert (template0 >= 0);\n-\t      b = gen_bundle_selector (GEN_INT (template0));\n-\t      ia64_emit_insn_before (b, insn);\n+\t      ia64_add_bundle_selector_before (template0, insn);\n \t      b = PREV_INSN (insn);\n \t      insn = b;\n \t      template0 = template1;\n@@ -8072,8 +8116,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t      }\n \t    /* Put the MM-insn in the same slot of a bundle with the\n \t       same template as the original one.  */\n-\t    ia64_emit_insn_before (gen_bundle_selector (GEN_INT (template0)),\n-\t\t\t\t   insn);\n+\t    ia64_add_bundle_selector_before (template0, insn);\n \t    /* To put the insn in the same slot, add necessary number\n \t       of nops.  */\n \t    for (j = n; j > 0; j --)"}, {"sha": "84b2cd8f043900754f67e10ba24ca9bd56e20f78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4cd49c06a5bc003ce6282c4c613575185ac118/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4cd49c06a5bc003ce6282c4c613575185ac118/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a4cd49c06a5bc003ce6282c4c613575185ac118", "patch": "@@ -1,3 +1,8 @@\n+2006-12-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/30230\n+\t* g++.dg/eh/ia64-2.C: New test.\n+\n 2006-12-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR target/28966"}, {"sha": "0390bc88305fbb746237b5a5fb7772c6a18a5fd9", "filename": "gcc/testsuite/g++.dg/eh/ia64-2.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4cd49c06a5bc003ce6282c4c613575185ac118/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fia64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4cd49c06a5bc003ce6282c4c613575185ac118/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fia64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fia64-2.C?ref=4a4cd49c06a5bc003ce6282c4c613575185ac118", "patch": "@@ -0,0 +1,57 @@\n+// PR target/30230\n+// This testcase failed on IA-64, where end of an EH region ended\n+// in the middle of a bundle (with br.call insn in first or second\n+// slot of .bbb/.mbb bundles and EH region end right after it).\n+// But br.call returns to the start of the next bundlem so during\n+// unwinding the call was considered to be outside of the EH region\n+// while it should have been inside.\n+// { dg-options \"-O2\" }\n+// { dg-do run }\n+\n+struct A {};\n+struct B { virtual ~B(); };\n+B::~B () {}\n+struct C { void foo (short &, B &); };\n+struct D { void *d1; C *d2; virtual void virt (void) {} };\n+struct E { D *e1; B *e2; };\n+struct F { void bar (void *, B &); };\n+F *p __attribute__((weak));\n+volatile int r;\n+\n+void C::foo (short &x, B &)\n+{\n+  if (r)\n+    throw A ();\n+  x = 1;\n+}\n+\n+void F::bar (void *, B &)\n+{\n+  throw A ();\n+}\n+\n+void baz (E &x)\n+{\n+  short g = 0;\n+  B b = *x.e2;\n+  x.e1->d2->foo (g, b);\n+  if (g)\n+    p->bar(x.e1->d1, b);\n+}\n+\n+int main ()\n+{\n+  F g;\n+  D s;\n+  E h;\n+  p = &g;\n+  h.e1 = &s;\n+  try\n+    {\n+      baz (h);\n+    }\n+  catch (A &)\n+    {\n+    }\n+  return 0;\n+}"}]}