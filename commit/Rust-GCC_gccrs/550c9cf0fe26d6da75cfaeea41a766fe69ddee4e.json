{"sha": "550c9cf0fe26d6da75cfaeea41a766fe69ddee4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUwYzljZjBmZTI2ZDZkYTc1Y2ZhZWVhNDFhNzY2ZmU2OWRkZWU0ZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "michael.meissner@amd.com", "date": "2008-05-14T18:02:56Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2008-05-14T18:02:56Z"}, "message": "Fix pr36224\n\nFrom-SVN: r135302", "tree": {"sha": "e586103b9b131850957e0684036b2ce01a0cb802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e586103b9b131850957e0684036b2ce01a0cb802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e/comments", "author": null, "committer": null, "parents": [{"sha": "61ab1651b91da9c63f78ea93b89117867188979d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ab1651b91da9c63f78ea93b89117867188979d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ab1651b91da9c63f78ea93b89117867188979d"}], "stats": {"total": 300, "additions": 262, "deletions": 38}, "files": [{"sha": "6b7e6d60a6600f41f4a8a0db269e73354b80c2fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=550c9cf0fe26d6da75cfaeea41a766fe69ddee4e", "patch": "@@ -1,3 +1,11 @@\n+2008-05-14  Michael Meissner  <michael.meissner@amd.com>\n+\n+\tPR target/36224\n+\t* config/i386/sse.md (vec_widen_smult_hi_v4si): Delete, using\n+\tunsigned multiply gives the wrong value when doing widening\n+\tmultiplies.\n+\t(vec_widen_smult_lo_v4si): Ditto.\n+\n 2008-05-14  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* optabs.c (prepare_cmp_insn): Changed LCT_PURE_MAKE_BLOCK to"}, {"sha": "88822c5fb31bd117f76572ee93c23f58c6349770", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=550c9cf0fe26d6da75cfaeea41a766fe69ddee4e", "patch": "@@ -3357,44 +3357,6 @@\n   DONE;\n })\n \n-(define_expand \"vec_widen_smult_hi_v4si\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V4SI 1 \"register_operand\" \"\")\n-   (match_operand:V4SI 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  rtx op1, op2, t1, t2;\n-\n-  op1 = operands[1];\n-  op2 = operands[2];\n-  t1 = gen_reg_rtx (V4SImode);\n-  t2 = gen_reg_rtx (V4SImode);\n-\n-  emit_insn (gen_vec_interleave_highv4si (t1, op1, op1));\n-  emit_insn (gen_vec_interleave_highv4si (t2, op2, op2));\n-  emit_insn (gen_sse2_umulv2siv2di3 (operands[0], t1, t2));\n-  DONE;\n-})\n-\n-(define_expand \"vec_widen_smult_lo_v4si\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V4SI 1 \"register_operand\" \"\")\n-   (match_operand:V4SI 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  rtx op1, op2, t1, t2;\n-\n-  op1 = operands[1];\n-  op2 = operands[2];\n-  t1 = gen_reg_rtx (V4SImode);\n-  t2 = gen_reg_rtx (V4SImode);\n-\n-  emit_insn (gen_vec_interleave_lowv4si (t1, op1, op1));\n-  emit_insn (gen_vec_interleave_lowv4si (t2, op2, op2));\n-  emit_insn (gen_sse2_umulv2siv2di3 (operands[0], t1, t2));\n-  DONE;\n-})\n-\n (define_expand \"vec_widen_umult_hi_v4si\"\n   [(match_operand:V2DI 0 \"register_operand\" \"\")\n    (match_operand:V4SI 1 \"register_operand\" \"\")"}, {"sha": "38c6ddd622e83b3e69c3f9e642358741834c3a3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=550c9cf0fe26d6da75cfaeea41a766fe69ddee4e", "patch": "@@ -1,3 +1,8 @@\n+2008-05-14  Michael Meissner  <michael.meissner@amd.com>\n+\n+\tPR target/36224\n+\t* gcc.dg/pr36224.c: New file.\n+\n 2008-05-14  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/blkextract_from_reg.adb: New test."}, {"sha": "6e23559d6f3d2ca6e182081649cb115910a6669b", "filename": "gcc/testsuite/gcc.dg/pr36224.c", "status": "added", "additions": 249, "deletions": 0, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36224.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/550c9cf0fe26d6da75cfaeea41a766fe69ddee4e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36224.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36224.c?ref=550c9cf0fe26d6da75cfaeea41a766fe69ddee4e", "patch": "@@ -0,0 +1,249 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#ifndef ALIGN16\n+#define ALIGN16 __attribute__((__aligned__(32)))\n+#endif\n+\n+#define I16_B0\t1\n+#define I16_B1\t23\n+#define I16_B2\t345\n+#define I16_B3\t6789\n+#define I16_B4\t1011\n+#define I16_B5\t-12\n+#define I16_B6\t1314\n+#define I16_B7\t-1516\n+#define I16_B8\t-1516\n+#define I16_B9\t1314\n+#define I16_B10\t-12\n+#define I16_B11\t1011\n+#define I16_B12\t6789\n+#define I16_B13\t345\n+#define I16_B14\t23\n+#define I16_B15\t1\n+\n+#define I16_C0\t2\n+#define I16_C1\t31567\n+#define I16_C2\t1112\n+#define I16_C3\t13\n+#define I16_C4\t14\n+#define I16_C5\t15\n+#define I16_C6\t-16\n+#define I16_C7\t17\n+#define I16_C8\t2\n+#define I16_C9\t31567\n+#define I16_C10\t1112\n+#define I16_C11\t13\n+#define I16_C12\t14\n+#define I16_C13\t15\n+#define I16_C14\t-16\n+#define I16_C15\t17\n+\n+union ui2 {\n+  int\t\tsi[16];\n+  unsigned int\tui[16];\n+};\n+\n+union us {\n+  short\t\t ss[16];\n+  unsigned short us[16];\n+};\n+\n+static union ui2 i32_sa ALIGN16;\n+static union ui2 i32_ua ALIGN16;\n+\n+static union us i16_b ALIGN16 = {\n+  (short)I16_B0,\n+  (short)I16_B1,\n+  (short)I16_B2,\n+  (short)I16_B3,\n+  (short)I16_B4,\n+  (short)I16_B5,\n+  (short)I16_B6,\n+  (short)I16_B7,\n+  (short)I16_B8,\n+  (short)I16_B9,\n+  (short)I16_B10,\n+  (short)I16_B11,\n+  (short)I16_B12,\n+  (short)I16_B13,\n+  (short)I16_B14,\n+  (short)I16_B15,\n+};\n+\n+static union us i16_c ALIGN16 = {\n+  (short)I16_C0,\n+  (short)I16_C1,\n+  (short)I16_C2,\n+  (short)I16_C3,\n+  (short)I16_C4,\n+  (short)I16_C5,\n+  (short)I16_C6,\n+  (short)I16_C7,\n+  (short)I16_C8,\n+  (short)I16_C9,\n+  (short)I16_C10,\n+  (short)I16_C11,\n+  (short)I16_C12,\n+  (short)I16_C13,\n+  (short)I16_C14,\n+  (short)I16_C15,\n+};\n+\n+static long i32_sr[16] ALIGN16 = {\n+  ((int)I16_B0)  * ((int)I16_C0),\n+  ((int)I16_B1)  * ((int)I16_C1),\n+  ((int)I16_B2)  * ((int)I16_C2),\n+  ((int)I16_B3)  * ((int)I16_C3),\n+  ((int)I16_B4)  * ((int)I16_C4),\n+  ((int)I16_B5)  * ((int)I16_C5),\n+  ((int)I16_B6)  * ((int)I16_C6),\n+  ((int)I16_B7)  * ((int)I16_C7),\n+  ((int)I16_B8)  * ((int)I16_C8),\n+  ((int)I16_B9)  * ((int)I16_C9),\n+  ((int)I16_B10) * ((int)I16_C10),\n+  ((int)I16_B11) * ((int)I16_C11),\n+  ((int)I16_B12) * ((int)I16_C12),\n+  ((int)I16_B13) * ((int)I16_C13),\n+  ((int)I16_B14) * ((int)I16_C14),\n+  ((int)I16_B15) * ((int)I16_C15),\n+};\n+\n+static unsigned long i32_ur[16] ALIGN16 = {\n+  ((unsigned int)(unsigned short)I16_B0)  * ((unsigned int)(unsigned short)I16_C0),\n+  ((unsigned int)(unsigned short)I16_B1)  * ((unsigned int)(unsigned short)I16_C1),\n+  ((unsigned int)(unsigned short)I16_B2)  * ((unsigned int)(unsigned short)I16_C2),\n+  ((unsigned int)(unsigned short)I16_B3)  * ((unsigned int)(unsigned short)I16_C3),\n+  ((unsigned int)(unsigned short)I16_B4)  * ((unsigned int)(unsigned short)I16_C4),\n+  ((unsigned int)(unsigned short)I16_B5)  * ((unsigned int)(unsigned short)I16_C5),\n+  ((unsigned int)(unsigned short)I16_B6)  * ((unsigned int)(unsigned short)I16_C6),\n+  ((unsigned int)(unsigned short)I16_B7)  * ((unsigned int)(unsigned short)I16_C7),\n+  ((unsigned int)(unsigned short)I16_B8)  * ((unsigned int)(unsigned short)I16_C8),\n+  ((unsigned int)(unsigned short)I16_B9)  * ((unsigned int)(unsigned short)I16_C9),\n+  ((unsigned int)(unsigned short)I16_B10) * ((unsigned int)(unsigned short)I16_C10),\n+  ((unsigned int)(unsigned short)I16_B11) * ((unsigned int)(unsigned short)I16_C11),\n+  ((unsigned int)(unsigned short)I16_B12) * ((unsigned int)(unsigned short)I16_C12),\n+  ((unsigned int)(unsigned short)I16_B13) * ((unsigned int)(unsigned short)I16_C13),\n+  ((unsigned int)(unsigned short)I16_B14) * ((unsigned int)(unsigned short)I16_C14),\n+  ((unsigned int)(unsigned short)I16_B15) * ((unsigned int)(unsigned short)I16_C15),\n+};\n+\n+#ifndef ALIGN32\n+#define ALIGN32 __attribute__((__aligned__(32)))\n+#endif\n+\n+#define I32_B0\t1\n+#define I32_B1\t23\n+#define I32_B2\t345\n+#define I32_B3\t6789\n+#define I32_B4\t101112\n+#define I32_B5\t-13\n+#define I32_B6\t141516\n+#define I32_B7\t-1718\n+\n+#define I32_C0\t2\n+#define I32_C1\t45678910\n+#define I32_C2\t1112\n+#define I32_C3\t13\n+#define I32_C4\t14\n+#define I32_C5\t15\n+#define I32_C6\t-16\n+#define I32_C7\t17\n+\n+union ul {\n+  long\t\tsl[8];\n+  unsigned long\tul[8];\n+};\n+\n+union ui {\n+  int\t\tsi[8];\n+  unsigned int\tui[8];\n+};\n+\n+static union ul i64_sa ALIGN32;\n+static union ul i64_ua ALIGN32;\n+\n+static union ui i32_b ALIGN32 = {\n+  (int)I32_B0,\n+  (int)I32_B1,\n+  (int)I32_B2,\n+  (int)I32_B3,\n+  (int)I32_B4,\n+  (int)I32_B5,\n+  (int)I32_B6,\n+  (int)I32_B7,\n+};\n+\n+static union ui i32_c ALIGN32 = {\n+  (int)I32_C0,\n+  (int)I32_C1,\n+  (int)I32_C2,\n+  (int)I32_C3,\n+  (int)I32_C4,\n+  (int)I32_C5,\n+  (int)I32_C6,\n+  (int)I32_C7,\n+};\n+\n+static long i64_sr[8] ALIGN32 = {\n+  ((long)I32_B0) * ((long)I32_C0),\n+  ((long)I32_B1) * ((long)I32_C1),\n+  ((long)I32_B2) * ((long)I32_C2),\n+  ((long)I32_B3) * ((long)I32_C3),\n+  ((long)I32_B4) * ((long)I32_C4),\n+  ((long)I32_B5) * ((long)I32_C5),\n+  ((long)I32_B6) * ((long)I32_C6),\n+  ((long)I32_B7) * ((long)I32_C7),\n+};\n+\n+static unsigned long i64_ur[8] ALIGN32 = {\n+  ((unsigned long)(unsigned)I32_B0) * ((unsigned long)(unsigned)I32_C0),\n+  ((unsigned long)(unsigned)I32_B1) * ((unsigned long)(unsigned)I32_C1),\n+  ((unsigned long)(unsigned)I32_B2) * ((unsigned long)(unsigned)I32_C2),\n+  ((unsigned long)(unsigned)I32_B3) * ((unsigned long)(unsigned)I32_C3),\n+  ((unsigned long)(unsigned)I32_B4) * ((unsigned long)(unsigned)I32_C4),\n+  ((unsigned long)(unsigned)I32_B5) * ((unsigned long)(unsigned)I32_C5),\n+  ((unsigned long)(unsigned)I32_B6) * ((unsigned long)(unsigned)I32_C6),\n+  ((unsigned long)(unsigned)I32_B7) * ((unsigned long)(unsigned)I32_C7),\n+};\n+\n+\n+int main ()\n+{\n+  int i;\n+\n+  /* Signed 16x16 -> 32-bit tests */\n+  for (i = 0; i < 16; i++)\n+    i32_sa.si[i] = ((long)i16_b.ss[i]) * ((long)i16_c.ss[i]);\n+\n+  for (i = 0; i < 16; i++)\n+    if (i32_sa.si[i] != i32_sr[i])\n+      __builtin_abort ();\n+\n+  /* Unsigned 16x16 -> 32-bit tests */\n+  for (i = 0; i < 16; i++)\n+    i32_ua.ui[i] = ((long)i16_b.us[i]) * ((long)i16_c.us[i]);\n+\n+  for (i = 0; i < 16; i++)\n+    if (i32_ua.ui[i] != i32_ur[i])\n+      __builtin_abort ();\n+\n+  /* Signed 32x32 -> 64-bit tests */\n+  for (i = 0; i < 8; i++)\n+    i64_sa.sl[i] = ((long)i32_b.si[i]) * ((long)i32_c.si[i]);\n+\n+  for (i = 0; i < 8; i++)\n+    if (i64_sa.sl[i] != i64_sr[i])\n+      __builtin_abort ();\n+\n+  /* Unsigned 32x32 -> 64-bit tests */\n+  for (i = 0; i < 8; i++)\n+    i64_ua.ul[i] = ((long)i32_b.ui[i]) * ((long)i32_c.ui[i]);\n+\n+  for (i = 0; i < 8; i++)\n+    if (i64_ua.ul[i] != i64_ur[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}]}