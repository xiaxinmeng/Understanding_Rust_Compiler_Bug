{"sha": "b752e2c926065820a0086c7a482edf199d79dfc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1MmUyYzkyNjA2NTgyMGEwMDg2YzdhNDgyZWRmMTk5ZDc5ZGZjMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-02T21:23:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-02T21:23:35Z"}, "message": "Remove redundant __constexpr_addressof function\n\nThe std::__addressof function is always constexpr, even in C++14, so we\ncan just use that.\n\n\t* include/experimental/bits/lfts_config.h: Improve doc markup.\n\t* include/experimental/optional: Improve docs.\n\t(_Has_addressof_mem, _Has_addressof_free, _Has_addressof)\n\t(__constexpr_addressof): Remove.\n\t(optional::operator->()): Use std::__addressof().\n\t* include/std/optional (optional::operator->()): Adjust whitespace.\n\t* testsuite/experimental/optional/constexpr/observers/2.cc: Check\n\tthat operator-> is still constexpr with overloaded operator&. Change\n\tto compile-only test.\n\t* testsuite/experimental/optional/constexpr/observers/3.cc: Change to\n\tcompile-only test.\n\nFrom-SVN: r270826", "tree": {"sha": "5c0d92802499dae6a89fc290cda5a62dca14b241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c0d92802499dae6a89fc290cda5a62dca14b241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b752e2c926065820a0086c7a482edf199d79dfc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b752e2c926065820a0086c7a482edf199d79dfc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b752e2c926065820a0086c7a482edf199d79dfc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b752e2c926065820a0086c7a482edf199d79dfc2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efa9d8eef07e0abc9d073e004c95d2812d35f88a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa9d8eef07e0abc9d073e004c95d2812d35f88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa9d8eef07e0abc9d073e004c95d2812d35f88a"}], "stats": {"total": 99, "additions": 28, "deletions": 71}, "files": [{"sha": "cd1508ee789ecefe31737d3aea62cd4dc4bd8b40", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b752e2c926065820a0086c7a482edf199d79dfc2", "patch": "@@ -1,5 +1,17 @@\n 2019-05-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/bits/lfts_config.h: Improve doc markup.\n+\t* include/experimental/optional: Improve docs.\n+\t(_Has_addressof_mem, _Has_addressof_free, _Has_addressof)\n+\t(__constexpr_addressof): Remove.\n+\t(optional::operator->()): Use std::__addressof().\n+\t* include/std/optional (optional::operator->()): Adjust whitespace.\n+\t* testsuite/experimental/optional/constexpr/observers/2.cc: Check\n+\tthat operator-> is still constexpr with overloaded operator&. Change\n+\tto compile-only test.\n+\t* testsuite/experimental/optional/constexpr/observers/3.cc: Change to\n+\tcompile-only test.\n+\n \t* include/bits/shared_ptr.h: Improve docs.\n \t* include/bits/shared_ptr_atomic.h: Likewise.\n \t* include/bits/unique_ptr.h: Likewise. Adjust whitespace."}, {"sha": "851b8b4d43a15862935925f0951a945795bcc1cf", "filename": "libstdc++-v3/include/experimental/bits/lfts_config.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h?ref=b752e2c926065820a0086c7a482edf199d79dfc2", "patch": "@@ -36,9 +36,8 @@\n    * Components defined by the _C++ Extensions for Library Fundamentals_\n    * Technical Specification, versions 1 and 2.\n    *\n-   * ISO/IEC TS 19568:2015 C++ Extensions for Library Fundamentals\n-   *\n-   * ISO/IEC TS 19568:2017 C++ Extensions for Library Fundamentals, Version 2\n+   * - ISO/IEC TS 19568:2015 C++ Extensions for Library Fundamentals\n+   * - ISO/IEC TS 19568:2017 C++ Extensions for Library Fundamentals, Version 2\n    */\n \n #if _GLIBCXX_INLINE_VERSION"}, {"sha": "ee06b63efd1dac7e75ec9c47109fc8baecec1fb8", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 10, "deletions": 63, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=b752e2c926065820a0086c7a482edf199d79dfc2", "patch": "@@ -112,6 +112,8 @@ inline namespace fundamentals_v1\n     virtual ~bad_optional_access() noexcept = default;\n   };\n \n+  /// @cond undocumented\n+\n   void\n   __throw_bad_optional_access(const char*)\n   __attribute__((__noreturn__));\n@@ -121,59 +123,6 @@ inline namespace fundamentals_v1\n   __throw_bad_optional_access(const char* __s)\n   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access(__s)); }\n \n-#ifndef __cpp_lib_addressof_constexpr\n-  template<typename _Tp, typename = void>\n-    struct _Has_addressof_mem : std::false_type { };\n-\n-  template<typename _Tp>\n-    struct _Has_addressof_mem<_Tp,\n-         __void_t<decltype( std::declval<const _Tp&>().operator&() )>\n-      >\n-    : std::true_type { };\n-\n-  template<typename _Tp, typename = void>\n-    struct _Has_addressof_free : std::false_type { };\n-\n-  template<typename _Tp>\n-    struct _Has_addressof_free<_Tp,\n-         __void_t<decltype( operator&(std::declval<const _Tp&>()) )>\n-      >\n-    : std::true_type { };\n-\n-  /**\n-    * @brief Trait that detects the presence of an overloaded unary operator&.\n-    *\n-    * Practically speaking this detects the presence of such an operator when\n-    * called on a const-qualified lvalue (e.g.\n-    * declval<const _Tp&>().operator&()).\n-    */\n-  template<typename _Tp>\n-    struct _Has_addressof\n-    : std::__or_<_Has_addressof_mem<_Tp>, _Has_addressof_free<_Tp>>::type\n-    { };\n-\n-  /**\n-    * @brief An overload that attempts to take the address of an lvalue as a\n-    * constant expression. Falls back to __addressof in the presence of an\n-    * overloaded addressof operator (unary operator&), in which case the call\n-    * will not be a constant expression.\n-    */\n-  template<typename _Tp>\n-    constexpr\n-    enable_if_t<!_Has_addressof<_Tp>::value, _Tp*>\n-    __constexpr_addressof(_Tp& __t)\n-    { return &__t; }\n-\n-  /**\n-    * @brief Fallback overload that defers to __addressof.\n-    */\n-  template<typename _Tp>\n-    inline\n-    enable_if_t<_Has_addressof<_Tp>::value, _Tp*>\n-    __constexpr_addressof(_Tp& __t)\n-    { return std::__addressof(__t); }\n-#endif // __cpp_lib_addressof_constexpr\n-\n   /**\n     * @brief Class template that holds the necessary state for @ref optional\n     * and that has the responsibility for construction and the special members.\n@@ -452,9 +401,6 @@ inline namespace fundamentals_v1\n       bool _M_engaged = false;\n     };\n \n-  template<typename _Tp>\n-  class optional;\n-\n   template<typename _Tp, typename _Up>\n     using __converts_from_optional =\n       __or_<is_constructible<_Tp, const optional<_Up>&>,\n@@ -473,6 +419,8 @@ inline namespace fundamentals_v1\n \t    is_assignable<_Tp&, const optional<_Up>&&>,\n \t    is_assignable<_Tp&, optional<_Up>&&>>;\n \n+  /// @endcond\n+\n   /**\n     * @brief Class template for optional values.\n     */\n@@ -698,13 +646,7 @@ inline namespace fundamentals_v1\n       // [X.Y.4.5] Observers.\n       constexpr const _Tp*\n       operator->() const\n-      {\n-#ifndef __cpp_lib_addressof_constexpr\n-\treturn __constexpr_addressof(this->_M_get());\n-#else\n-\treturn std::__addressof(this->_M_get());\n-#endif\n-      }\n+      { return std::__addressof(this->_M_get()); }\n \n       _Tp*\n       operator->()\n@@ -796,6 +738,8 @@ inline namespace fundamentals_v1\n \t}\n     };\n \n+  /// @relates experimental::optional @{\n+\n   // [X.Y.8] Comparisons between optional values.\n   template<typename _Tp>\n     constexpr bool\n@@ -966,11 +910,14 @@ inline namespace fundamentals_v1\n     make_optional(_Tp&& __t)\n     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }\n \n+  // @} relates experimental::optional\n   // @} group optional\n } // namespace fundamentals_v1\n } // namespace experimental\n \n   // [X.Y.12]\n+  /// std::hash partial specialization for experimental::optional\n+  /// @relates experimental::optional\n   template<typename _Tp>\n     struct hash<experimental::optional<_Tp>>\n     {"}, {"sha": "ae825d3e32755cb558a6836cc392b3cba061556e", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=b752e2c926065820a0086c7a482edf199d79dfc2", "patch": "@@ -888,8 +888,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator->() const\n       { return std::__addressof(this->_M_get()); }\n \n-      constexpr\n-      _Tp*\n+      constexpr _Tp*\n       operator->()\n       { return std::__addressof(this->_M_get()); }\n "}, {"sha": "01fa9e8278c43b4ce2b5e6f6cb4a961b3c722f76", "filename": "libstdc++-v3/testsuite/experimental/optional/constexpr/observers/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fobservers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fobservers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fobservers%2F2.cc?ref=b752e2c926065820a0086c7a482edf199d79dfc2", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++14 } }\n+// { dg-do compile { target c++14 } }\n \n // Copyright (C) 2013-2019 Free Software Foundation, Inc.\n //\n@@ -23,7 +23,7 @@ struct value_type\n {\n   int i;\n \n-  void* operator&() { return nullptr; } // N.B. non-const\n+  void* operator&() const { return nullptr; }\n };\n \n int main()"}, {"sha": "242eb8c83c67631a6dd3fec43934c61dbc9a4169", "filename": "libstdc++-v3/testsuite/experimental/optional/constexpr/observers/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fobservers%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b752e2c926065820a0086c7a482edf199d79dfc2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fobservers%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fobservers%2F3.cc?ref=b752e2c926065820a0086c7a482edf199d79dfc2", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++14 } }\n+// { dg-do compile { target c++14 } }\n \n // Copyright (C) 2013-2019 Free Software Foundation, Inc.\n //"}]}