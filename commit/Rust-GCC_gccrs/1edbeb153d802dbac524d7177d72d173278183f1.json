{"sha": "1edbeb153d802dbac524d7177d72d173278183f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVkYmViMTUzZDgwMmRiYWM1MjRkNzE3N2Q3MmQxNzMyNzgxODNmMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-30T15:22:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-08-30T15:22:34Z"}, "message": "ada-tree.h (DECL_FORCED_BY_REF_P): New macro.\n\n\t* gcc-interface/ada-tree.h (DECL_FORCED_BY_REF_P): New macro.\n\t* gcc-interface/decl.c (gnat_to_gnu_param): Set it on parameters\n\twhose mechanism was forced to by-reference.\n\t* gcc-interface/trans.c (Call_to_gnu): Do not issue a warning about a\n\tmisaligned actual parameter if it is based on a CONSTRUCTOR.  Remove\n \tobsolete warning for users of Starlet.  Issue a warning if a temporary\n\tis make around the call for a parameter with DECL_FORCED_BY_REF_P set.\n\t(addressable_p): Return true for REAL_CST and ADDR_EXPR.\n\nFrom-SVN: r275198", "tree": {"sha": "f439066a9993cbf20f862f5575561432512c86c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f439066a9993cbf20f862f5575561432512c86c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1edbeb153d802dbac524d7177d72d173278183f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1edbeb153d802dbac524d7177d72d173278183f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1edbeb153d802dbac524d7177d72d173278183f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1edbeb153d802dbac524d7177d72d173278183f1/comments", "author": null, "committer": null, "parents": [{"sha": "5e017b1e25655f256a130419b427811bb1016b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e017b1e25655f256a130419b427811bb1016b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e017b1e25655f256a130419b427811bb1016b43"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "bb43565467d8793a0241fef78a21fbd6baba2217", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edbeb153d802dbac524d7177d72d173278183f1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edbeb153d802dbac524d7177d72d173278183f1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1edbeb153d802dbac524d7177d72d173278183f1", "patch": "@@ -1,3 +1,14 @@\n+2019-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (DECL_FORCED_BY_REF_P): New macro.\n+\t* gcc-interface/decl.c (gnat_to_gnu_param): Set it on parameters\n+\twhose mechanism was forced to by-reference.\n+\t* gcc-interface/trans.c (Call_to_gnu): Do not issue a warning about a\n+\tmisaligned actual parameter if it is based on a CONSTRUCTOR.  Remove\n+ \tobsolete warning for users of Starlet.  Issue a warning if a temporary\n+\tis make around the call for a parameter with DECL_FORCED_BY_REF_P set.\n+\t(addressable_p): Return true for REAL_CST and ADDR_EXPR.\n+\n 2019-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu): Do not set the location on an"}, {"sha": "acea5d157ef1c86fa564a62802f5a9f0e25fa474", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edbeb153d802dbac524d7177d72d173278183f1/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edbeb153d802dbac524d7177d72d173278183f1/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=1edbeb153d802dbac524d7177d72d173278183f1", "patch": "@@ -482,6 +482,9 @@ do {\t\t\t\t\t\t   \\\n    value of a function call or 'reference to a function call.  */\n #define DECL_RETURN_VALUE_P(NODE) DECL_LANG_FLAG_5 (VAR_DECL_CHECK (NODE))\n \n+/* Nonzero in a PARM_DECL if its mechanism was forced to by-reference.  */\n+#define DECL_FORCED_BY_REF_P(NODE) DECL_LANG_FLAG_5 (PARM_DECL_CHECK (NODE))\n+\n /* In a FIELD_DECL corresponding to a discriminant, contains the\n    discriminant number.  */\n #define DECL_DISCRIMINANT_NUMBER(NODE) DECL_INITIAL (FIELD_DECL_CHECK (NODE))"}, {"sha": "85a5e76724f1a5aec9dff0cd54be7dfdae0b55e6", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edbeb153d802dbac524d7177d72d173278183f1/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edbeb153d802dbac524d7177d72d173278183f1/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=1edbeb153d802dbac524d7177d72d173278183f1", "patch": "@@ -5208,6 +5208,7 @@ gnat_to_gnu_param (Entity_Id gnat_param, tree gnu_param_type, bool first,\n   bool ro_param = in_param && !Address_Taken (gnat_param);\n   bool by_return = false, by_component_ptr = false;\n   bool by_ref = false;\n+  bool forced_by_ref = false;\n   bool restricted_aliasing_p = false;\n   location_t saved_location = input_location;\n   tree gnu_param;\n@@ -5235,7 +5236,11 @@ gnat_to_gnu_param (Entity_Id gnat_param, tree gnu_param_type, bool first,\n   /* Or else, see if a Mechanism was supplied that forced this parameter\n      to be passed one way or another.  */\n   else if (mech == Default || mech == By_Copy || mech == By_Reference)\n-    ;\n+    forced_by_ref\n+      = (mech == By_Reference\n+\t && !foreign\n+\t && !TYPE_IS_BY_REFERENCE_P (gnu_param_type)\n+\t && !Is_Aliased (gnat_param));\n \n   /* Positive mechanism means by copy for sufficiently small parameters.  */\n   else if (mech > 0)\n@@ -5368,6 +5373,7 @@ gnat_to_gnu_param (Entity_Id gnat_param, tree gnu_param_type, bool first,\n   gnu_param = create_param_decl (gnu_param_name, gnu_param_type);\n   TREE_READONLY (gnu_param) = ro_param || by_ref || by_component_ptr;\n   DECL_BY_REF_P (gnu_param) = by_ref;\n+  DECL_FORCED_BY_REF_P (gnu_param) = forced_by_ref;\n   DECL_BY_COMPONENT_PTR_P (gnu_param) = by_component_ptr;\n   DECL_POINTS_TO_READONLY_P (gnu_param)\n     = (ro_param && (by_ref || by_component_ptr));"}, {"sha": "4d2fa93ffcebdefbb74fa84b78ffa5b83cd227eb", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edbeb153d802dbac524d7177d72d173278183f1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edbeb153d802dbac524d7177d72d173278183f1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=1edbeb153d802dbac524d7177d72d173278183f1", "patch": "@@ -5257,30 +5257,20 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \n \t  /* Do not issue warnings for CONSTRUCTORs since this is not a copy\n \t     but sort of an instantiation for them.  */\n-\t  if (TREE_CODE (gnu_name) == CONSTRUCTOR)\n+\t  if (TREE_CODE (remove_conversions (gnu_name, true)) == CONSTRUCTOR)\n \t    ;\n \n-\t  /* If the type is passed by reference, a copy is not allowed.  */\n-\t  else if (TYPE_IS_BY_REFERENCE_P (gnu_formal_type))\n+\t  /* If the formal is passed by reference, a copy is not allowed.  */\n+\t  else if (TYPE_IS_BY_REFERENCE_P (gnu_formal_type)\n+\t\t   || Is_Aliased (gnat_formal))\n \t    post_error (\"misaligned actual cannot be passed by reference\",\n \t\t        gnat_actual);\n \n-\t  /* For users of Starlet we issue a warning because the interface\n-\t     apparently assumes that by-ref parameters outlive the procedure\n-\t     invocation.  The code still will not work as intended, but we\n-\t     cannot do much better since low-level parts of the back-end\n-\t     would allocate temporaries at will because of the misalignment\n-\t     if we did not do so here.  */\n-\t  else if (Is_Valued_Procedure (Entity (Name (gnat_node))))\n-\t    {\n-\t      post_error\n-\t\t(\"?possible violation of implicit assumption\", gnat_actual);\n-\t      post_error_ne\n-\t\t(\"?made by pragma Import_Valued_Procedure on &\", gnat_actual,\n-\t\t Entity (Name (gnat_node)));\n-\t      post_error_ne (\"?because of misalignment of &\", gnat_actual,\n-\t\t\t     gnat_formal);\n-\t    }\n+\t  /* If the mechanism was forced to by-ref, a copy is not allowed but\n+\t     we issue only a warning because this case is not strict Ada.  */\n+\t  else if (DECL_FORCED_BY_REF_P (gnu_formal))\n+\t    post_error (\"misaligned actual cannot be passed by reference??\",\n+\t\t\tgnat_actual);\n \n \t  /* If the actual type of the object is already the nominal type,\n \t     we have nothing to do, except if the size is self-referential\n@@ -10394,6 +10384,7 @@ addressable_p (tree gnu_expr, tree gnu_type)\n \n     case STRING_CST:\n     case INTEGER_CST:\n+    case REAL_CST:\n       /* Taking the address yields a pointer to the constant pool.  */\n       return true;\n \n@@ -10403,6 +10394,7 @@ addressable_p (tree gnu_expr, tree gnu_type)\n       return TREE_STATIC (gnu_expr) ? true : false;\n \n     case NULL_EXPR:\n+    case ADDR_EXPR:\n     case SAVE_EXPR:\n     case CALL_EXPR:\n     case PLUS_EXPR:"}]}