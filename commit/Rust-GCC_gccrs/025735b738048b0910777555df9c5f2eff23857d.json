{"sha": "025735b738048b0910777555df9c5f2eff23857d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI1NzM1YjczODA0OGIwOTEwNzc3NTU1ZGY5YzVmMmVmZjIzODU3ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-23T21:24:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-23T21:24:56Z"}, "message": "i386.md (*add<mode>_2): Add r/r/0 alternative.\n\n\t* config/i386/i386.md (*add<mode>_2): Add r/r/0 alternative.\n\t(*addsi_2_zext): Ditto.\n\t(*add<mode>_3): Ditto.\n\t(*addsi_3_zext): Ditto.\n\t(*add<mode>_5): Ditto.\n\nFrom-SVN: r186725", "tree": {"sha": "c6c61e4b609c52d51999eed079bb3045c1835568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6c61e4b609c52d51999eed079bb3045c1835568"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/025735b738048b0910777555df9c5f2eff23857d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/025735b738048b0910777555df9c5f2eff23857d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/025735b738048b0910777555df9c5f2eff23857d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/025735b738048b0910777555df9c5f2eff23857d/comments", "author": null, "committer": null, "parents": [{"sha": "073d123ccf7036f9b103cc73f1a9b1bc3dd90d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/073d123ccf7036f9b103cc73f1a9b1bc3dd90d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/073d123ccf7036f9b103cc73f1a9b1bc3dd90d3b"}], "stats": {"total": 104, "additions": 75, "deletions": 29}, "files": [{"sha": "6334c59b7d73f0a9ad2cad337080f3b5d73ee0b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025735b738048b0910777555df9c5f2eff23857d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025735b738048b0910777555df9c5f2eff23857d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=025735b738048b0910777555df9c5f2eff23857d", "patch": "@@ -1,3 +1,11 @@\n+2012-04-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*add<mode>_2): Add r/r/0 alternative.\n+\t(*addsi_2_zext): Ditto.\n+\t(*add<mode>_3): Ditto.\n+\t(*addsi_3_zext): Ditto.\n+\t(*add<mode>_5): Ditto.\n+\n 2012-04-23  Andrew Pinski  <apinski@cavium.com>\n \n \t* tree-ssa-forwprop.c (simplify_bitwise_binary): Simplify (A & B) OP0\n@@ -35,14 +43,14 @@\n \t(varpool_node): Remove reachable flag.\n \t(cgraph_mark_if_needed): Remove.\n \t(cgraph_mark_reachable_node): Remove.\n-\t* tree-emutls.c (ipa_lower_emutls): Do not check\n-\treachable.\n+\t* tree-emutls.c (ipa_lower_emutls): Do not check reachable.\n \t* cgraphunit.c (cgraph_finalize_function): Do not mark node as\n \treachable.\n \t(cgraph_add_new_function): Likewise.\n \t(cgraph_mark_if_needed): Remove.\n \t(cgraph_analyze_function): Do not set target as reachable.\n-\t(process_function_and_variable_attributes): Do not care about dllexport.\n+\t(process_function_and_variable_attributes): Do not care about\n+\tdllexport.\n \t(cgraph_analyze_functions): Do not set reachable flags.\n \t(cgraph_mark_functions_to_output): Do not check reachability.\n \t(cgraph_copy_node_for_versioning): Do not set reachable flag.\n@@ -52,7 +60,8 @@\n \t(enqueue_cgraph_node): Use reachable pointer set.\n \t(process_references): Likewise.\n \t(cgraph_remove_unreachable_nodes): Likewise.\n-\t(whole_program_function_and_variable_visibility): Do not recompute reachable.\n+\t(whole_program_function_and_variable_visibility): Do not recompute\n+\treachable.\n \t* trans-mem.c (ipa_tm_execute): Do not check reachable flag.\n \n 2012-04-23  Georg-Johann Lay  <avr@gjlay.de>\n@@ -94,7 +103,8 @@\n \t(varpool_analyze_node): New.\n \t(varpool_mark_needed_node): Remove.\n \t(varpool_first_variable, varpool_next_variable): New inlines.\n-\t(varpool_first_static_initializer, varpool_next_static_initializer): Update.\n+\t(varpool_first_static_initializer, varpool_next_static_initializer):\n+\tUpdate.\n \t(FOR_EACH_STATIC_VARIABLE): Remove unused walker.\n \t(varpool_first_defined_variable): New inline.\n \t(varpool_next_defined_variable): New inline\n@@ -114,10 +124,11 @@\n \twhen varpool is in construction.\n \t(cgraph_analyze_functions): Rewrite.\n \t(cgraph_expand_all_functions): Update.\n-\t(cgraph_output_in_order): Do not analyze pending decls; do not set needed flags.\n+\t(cgraph_output_in_order): Do not analyze pending decls; do not set\n+\tneeded flags.\n \t(cgraph_optimize): Do not analyze pending decls.\n-\t* lto-cgraph.c (input_varpool_node): Clear analyzed flag for objects in other\n-\tpartition; do not mark node as needed.\n+\t* lto-cgraph.c (input_varpool_node): Clear analyzed flag for objects\n+\tin other partition; do not mark node as needed.\n \t* dwarf2out.c (reference_to_unused): Use analyzed flag.\n \t(premark_types_used_by_global_vars_helper): Likewise.\n \t* ipa.c (process_references): Do not call varpool_mark_needed_node."}, {"sha": "5d7cc408493197e6359709b56330461ec00f6421", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 50, "deletions": 15, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025735b738048b0910777555df9c5f2eff23857d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025735b738048b0910777555df9c5f2eff23857d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=025735b738048b0910777555df9c5f2eff23857d", "patch": "@@ -5811,10 +5811,10 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:SWI\n-\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t    (match_operand:SWI 2 \"<general_operand>\" \"<g>,<r><i>\"))\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0,<r>\")\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"<g>,<r><i>,0\"))\n \t  (const_int 0)))\n-   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>,<r>m\")\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>,<r>m,<r>\")\n \t(plus:SWI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n@@ -5831,6 +5831,13 @@\n \t}\n \n     default:\n+      if (which_alternative == 2)\n+\t{\n+\t  rtx tmp;\n+\t  tmp = operands[1], operands[1] = operands[2], operands[2] = tmp;\n+\t}\n+        \n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n         return \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n \n@@ -5852,10 +5859,10 @@\n (define_insn \"*addsi_2_zext\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))\n+\t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,r\")\n+\t\t   (match_operand:SI 2 \"x86_64_general_operand\" \"rme,0\"))\n \t  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+   (set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI (plus:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (PLUS, SImode, operands)\"\n@@ -5872,6 +5879,13 @@\n \t}\n \n     default:\n+      if (which_alternative == 1)\n+\t{\n+\t  rtx tmp;\n+\t  tmp = operands[1], operands[1] = operands[2], operands[2] = tmp;\n+\t}\n+\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], SImode))\n         return \"sub{l}\\t{%2, %k0|%k0, %2}\";\n \n@@ -5892,9 +5906,9 @@\n (define_insn \"*add<mode>_3\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (neg:SWI (match_operand:SWI 2 \"<general_operand>\" \"<g>\"))\n-\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"%0\")))\n-   (clobber (match_scratch:SWI 0 \"=<r>\"))]\n+\t  (neg:SWI (match_operand:SWI 2 \"<general_operand>\" \"<g>,0\"))\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,<r>\")))\n+   (clobber (match_scratch:SWI 0 \"=<r>,<r>\"))]\n   \"ix86_match_ccmode (insn, CCZmode)\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n@@ -5910,6 +5924,13 @@\n \t}\n \n     default:\n+      if (which_alternative == 1)\n+\t{\n+\t  rtx tmp;\n+\t  tmp = operands[1], operands[1] = operands[2], operands[2] = tmp;\n+\t}\n+\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n         return \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n \n@@ -5931,9 +5952,9 @@\n (define_insn \"*addsi_3_zext\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (neg:SI (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t  (neg:SI (match_operand:SI 2 \"x86_64_general_operand\" \"rme,0\"))\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"%0,r\")))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI (plus:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCZmode)\n    && ix86_binary_operator_ok (PLUS, SImode, operands)\"\n@@ -5950,6 +5971,13 @@\n \t}\n \n     default:\n+      if (which_alternative == 1)\n+\t{\n+\t  rtx tmp;\n+\t  tmp = operands[1], operands[1] = operands[2], operands[2] = tmp;\n+\t}\n+\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], SImode))\n         return \"sub{l}\\t{%2, %k0|%k0, %2}\";\n \n@@ -6060,10 +6088,10 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:SWI\n-\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0\")\n-\t    (match_operand:SWI 2 \"<general_operand>\" \"<g>\"))\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,<r>\")\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"<g>,0\"))\n \t  (const_int 0)))\n-   (clobber (match_scratch:SWI 0 \"=<r>\"))]\n+   (clobber (match_scratch:SWI 0 \"=<r>,<r>\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n@@ -6079,6 +6107,13 @@\n \t}\n \n     default:\n+      if (which_alternative == 1)\n+\t{\n+\t  rtx tmp;\n+\t  tmp = operands[1], operands[1] = operands[2], operands[2] = tmp;\n+\t}\n+\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n         return \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n "}, {"sha": "abda7a8d15cde2703a46c84c3d01423c0cbe8963", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025735b738048b0910777555df9c5f2eff23857d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025735b738048b0910777555df9c5f2eff23857d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=025735b738048b0910777555df9c5f2eff23857d", "patch": "@@ -21,7 +21,7 @@\n 2012-04-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimizations/52891\n-\t* gcc.c-torture/compile/pr52891-1.c: New test.\t\n+\t* gcc.c-torture/compile/pr52891-1.c: New test.\n \t* gcc.c-torture/compile/pr52891-2.c: New test.\n \n 2012-04-22  Tobias Burnus  <burnus@net-b.de>\n@@ -77,15 +77,15 @@\n 2012-04-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/52976\n-\tgfortran.dg/reassoc_11.f: New test.\n+\t* gfortran.dg/reassoc_11.f: New test.\n \n 2012-04-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/52976\n-\tgfortran.dg/reassoc_7.f: New test.\n-\tgfortran.dg/reassoc_8.f: Likewise.\n-\tgfortran.dg/reassoc_9.f: Likewise.\n-\tgfortran.dg/reassoc_10.f: Likewise.\n+\t* gfortran.dg/reassoc_7.f: New test.\n+\t* gfortran.dg/reassoc_8.f: Likewise.\n+\t* gfortran.dg/reassoc_9.f: Likewise.\n+\t* gfortran.dg/reassoc_10.f: Likewise.\n \n 2012-04-18  Paolo Carlini  <paolo.carlini@oracle.com>\n "}]}