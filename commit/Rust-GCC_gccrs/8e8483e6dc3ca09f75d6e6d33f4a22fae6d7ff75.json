{"sha": "8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU4NDgzZTZkYzNjYTA5Zjc1ZDZlNmQzM2Y0YTIyZmFlNmQ3ZmY3NQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-04-13T17:57:21Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-04-13T17:57:21Z"}, "message": "re PR middle-end/52939 (ice in gimple_get_virt_method_for_binfo with -O3)\n\n2012-04-13  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/52939\n\t* gimple-fold.c (gimple_get_virt_method_for_binfo): Bail out if\n\tfold_ctor_reference returns a zero constant.\n\n\t* testsuite/g++.dg/ipa/pr52939.C: New test.\n\nFrom-SVN: r186428", "tree": {"sha": "4b82dc76ec1b5f05f431a6f3c536bf936d7b5ae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b82dc76ec1b5f05f431a6f3c536bf936d7b5ae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70a6950958a6a5b902744b40786f4b34af9b6bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a6950958a6a5b902744b40786f4b34af9b6bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a6950958a6a5b902744b40786f4b34af9b6bc7"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "e04d1be979ceabbe1a3ed408efc955dff47c7f37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75", "patch": "@@ -1,3 +1,9 @@\n+2012-04-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/52939\n+\t* gimple-fold.c (gimple_get_virt_method_for_binfo): Bail out if\n+\tfold_ctor_reference returns a zero constant.\n+\n 2012-04-13  Enkovich Ilya  <ilya.enkovich@intel.com>\n \n \t* config.gcc: Add i386/gnu-user-common.h before all"}, {"sha": "049da5782afe6f9c56422459ce20a691af9ee9f7", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75", "patch": "@@ -3087,7 +3087,7 @@ gimple_get_virt_method_for_binfo (HOST_WIDE_INT token, tree known_binfo)\n   offset += token * size;\n   fn = fold_ctor_reference (TREE_TYPE (TREE_TYPE (v)), DECL_INITIAL (v),\n \t\t\t    offset, size);\n-  if (!fn)\n+  if (!fn || integer_zerop (fn))\n     return NULL_TREE;\n   gcc_assert (TREE_CODE (fn) == ADDR_EXPR\n \t      || TREE_CODE (fn) == FDESC_EXPR);"}, {"sha": "556d2f6db86878bafa88fd34b9cc3479f504a3f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75", "patch": "@@ -1,3 +1,8 @@\n+2012-04-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/52939\n+\t* g++.dg/ipa/pr52939.C: New test.\n+\n 2012-04-13  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/pr52734.c: New test."}, {"sha": "e120827bd1d46a5ed4cc3fe188a055299265ec55", "filename": "gcc/testsuite/g++.dg/ipa/pr52939.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr52939.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr52939.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr52939.C?ref=8e8483e6dc3ca09f75d6e6d33f4a22fae6d7ff75", "patch": "@@ -0,0 +1,58 @@\n+/* Verify that we do not ICE on invalid devirtualizations (which might\n+   be OK at run-time because never executed).  */\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-early-inlining -fno-inline\"  } */\n+\n+extern \"C\" void abort (void);\n+\n+class A\n+{\n+public:\n+  int data;\n+  virtual int foo (int i);\n+};\n+\n+class B : public A\n+{\n+public:\n+  virtual int foo (int i);\n+  virtual int bar (int i);\n+};\n+\n+int A::foo (int i)\n+{\n+  return i + 1;\n+}\n+\n+int B::foo (int i)\n+{\n+  return i + 2;\n+}\n+\n+int B::bar (int i)\n+{\n+  return i + 3;\n+}\n+\n+static int middleman (class A *obj, int i)\n+{\n+  class B *b = (class B *) obj;\n+\n+  if (i != 1)\n+    return b->bar (i);\n+  else\n+    return i;\n+}\n+\n+int __attribute__ ((noinline,noclone)) get_input(void)\n+{\n+  return 1;\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+  class A o;\n+  if (middleman (&o, get_input ()) != 1)\n+    abort ();\n+  return 0;\n+}"}]}