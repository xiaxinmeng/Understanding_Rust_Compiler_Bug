{"sha": "f13305518558f20ef2d460a74eb29dad5fce1350", "node_id": "C_kwDOANBUbNoAKGYxMzMwNTUxODU1OGYyMGVmMmQ0NjBhNzRlYjI5ZGFkNWZjZTEzNTA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-02T09:30:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-02T09:30:16Z"}, "message": "c++: Incremental fix for g++.dg/gomp/for-21.C [PR84469]\n\nThe PR84469 patch I've just posted regresses the for-21.C testcase,\nwhen in OpenMP loop there are at least 2 associated loops and\nin a template outer structured binding with non type dependent expression\nis used in the expressions of some inner loop, we don't diagnose those\nany longer, as the (weirdly worded) diagnostics was only done during\nfinish_id_expression -> mark_used which for the inner loop expressions\nhappens before the structured bindings are finalized.  When in templates,\nmark_used doesn't diagnose uses of non-deduced variables, and if the\nrange for expression is type dependent, it is similarly diagnosed during\ninstantiation.  But newly with the PR84469 fix if the range for expression\nis not type dependent, there is no place that would diagnose it, as during\ninstantiation the structured bindings are already deduced.\n\nThis patch ensures that the bug of using structured bindings from one\nassociated loop in other associated loops is diagnosed by the\nc_omp_check_loop_iv code by ensuring that cp_finish_decomp is called\nalready during cp_convert_omp_range_for if the artificial iterator\nhas been successfully auto-deduced.\n\n2022-12-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/84469\ngcc/c-family/\n\t* c-omp.cc (c_omp_is_loop_iterator): For range for with structured\n\tbinding return TREE_VEC_LENGTH (d->declv) even if decl is equal\n\tto any of the structured binding decls.\ngcc/cp/\n\t* parser.cc (cp_convert_omp_range_for): After do_auto_deduction if\n\t!processing_template_decl call cp_finish_decomp with\n\tprocessing_template_decl temporarily incremented.\ngcc/testsuite/\n\t* g++.dg/gomp/for-21.C (f3, f6, f9): Adjust expected diagnostics.\n\t* g++.dg/gomp/for-22.C: New test.", "tree": {"sha": "ec07b437ca12940cf9fe14582ea3930ae786bd31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec07b437ca12940cf9fe14582ea3930ae786bd31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f13305518558f20ef2d460a74eb29dad5fce1350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13305518558f20ef2d460a74eb29dad5fce1350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f13305518558f20ef2d460a74eb29dad5fce1350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13305518558f20ef2d460a74eb29dad5fce1350/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee4f25999f6832a1c5060b9277222c03d852709a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4f25999f6832a1c5060b9277222c03d852709a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4f25999f6832a1c5060b9277222c03d852709a"}], "stats": {"total": 96, "additions": 81, "deletions": 15}, "files": [{"sha": "2ab991126963f0967e7bd359fd71c65c162c4584", "filename": "gcc/c-family/c-omp.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13305518558f20ef2d460a74eb29dad5fce1350/gcc%2Fc-family%2Fc-omp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13305518558f20ef2d460a74eb29dad5fce1350/gcc%2Fc-family%2Fc-omp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.cc?ref=f13305518558f20ef2d460a74eb29dad5fce1350", "patch": "@@ -1311,10 +1311,11 @@ c_omp_is_loop_iterator (tree decl, struct c_omp_check_loop_iv_data *d)\n     else if (TREE_CODE (TREE_VEC_ELT (d->declv, i)) == TREE_LIST\n \t     && TREE_CHAIN (TREE_VEC_ELT (d->declv, i))\n \t     && (TREE_CODE (TREE_CHAIN (TREE_VEC_ELT (d->declv, i)))\n-\t\t == TREE_VEC)\n-\t     && decl == TREE_VEC_ELT (TREE_CHAIN (TREE_VEC_ELT (d->declv,\n-\t\t\t\t\t\t  i)), 2))\n-      return TREE_VEC_LENGTH (d->declv);\n+\t\t == TREE_VEC))\n+      for (int j = 2;\n+\t   j < TREE_VEC_LENGTH (TREE_CHAIN (TREE_VEC_ELT (d->declv, i))); j++)\n+\tif (decl == TREE_VEC_ELT (TREE_CHAIN (TREE_VEC_ELT (d->declv, i)), j))\n+\t  return TREE_VEC_LENGTH (d->declv);\n   return -1;\n }\n "}, {"sha": "e8a50904243826de4eacd98a4c4e847e9c321340", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13305518558f20ef2d460a74eb29dad5fce1350/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13305518558f20ef2d460a74eb29dad5fce1350/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=f13305518558f20ef2d460a74eb29dad5fce1350", "patch": "@@ -43126,8 +43126,16 @@ cp_convert_omp_range_for (tree &this_pre_body, vec<tree, va_gc> *for_block,\n       tree t = build_x_indirect_ref (input_location, begin, RO_UNARY_STAR,\n \t\t\t\t     NULL_TREE, tf_none);\n       if (!error_operand_p (t))\n-\tTREE_TYPE (orig_decl) = do_auto_deduction (TREE_TYPE (orig_decl),\n-\t\t\t\t\t\t   t, auto_node);\n+\t{\n+\t  TREE_TYPE (orig_decl) = do_auto_deduction (TREE_TYPE (orig_decl),\n+\t\t\t\t\t\t     t, auto_node);\n+\t  if (decomp_first_name)\n+\t    {\n+\t      ++processing_template_decl;\n+\t      cp_finish_decomp (orig_decl, decomp_first_name, decomp_cnt);\n+\t      --processing_template_decl;\n+\t    }\n+\t}\n     }\n \n   tree v = make_tree_vec (decomp_cnt + 3);"}, {"sha": "f5a7bf7df4d8dddca013f9fbe792fd60d748dccc", "filename": "gcc/testsuite/g++.dg/gomp/for-21.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13305518558f20ef2d460a74eb29dad5fce1350/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13305518558f20ef2d460a74eb29dad5fce1350/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-21.C?ref=f13305518558f20ef2d460a74eb29dad5fce1350", "patch": "@@ -24,9 +24,9 @@ void\n f3 (S (&a)[10])\n {\n   #pragma omp for collapse (2)\n-  for (auto [i, j, k] : a)\t\t\t// { dg-error \"use of 'i' before deduction of 'auto'\" \"\" { target *-*-* } .+1 }\n-    for (int l = i; l < j; l += k)\t\t// { dg-error \"use of 'j' before deduction of 'auto'\" }\n-      ;\t\t\t\t\t\t// { dg-error \"use of 'k' before deduction of 'auto'\" \"\" { target *-*-* } .-1 }\n+  for (auto [i, j, k] : a)\t\t\t// { dg-error \"initializer expression refers to iteration variable 'i'\" }\n+    for (int l = i; l < j; l += k)\t\t// { dg-error \"condition expression refers to iteration variable 'j'\" }\n+      ;\t\t\t\t\t\t// { dg-error \"increment expression refers to iteration variable 'k'\" \"\" { target *-*-* } .-2 }\n }\n \n template <int N>\n@@ -54,9 +54,9 @@ void\n f6 (S (&a)[10])\n {\n   #pragma omp for collapse (2)\n-  for (auto [i, j, k] : a)\t\t\t// { dg-error \"use of 'i' before deduction of 'auto'\" \"\" { target *-*-* } .-1 }\n-    for (int l = i; l < j; l += k)\t\t// { dg-error \"use of 'j' before deduction of 'auto'\" }\n-      ;\t\t\t\t\t\t// { dg-error \"use of 'k' before deduction of 'auto'\" \"\" { target *-*-* } .-3 }\n+  for (auto [i, j, k] : a)\t\t\t// { dg-error \"initializer expression refers to iteration variable 'i'\" \"\" { target *-*-* } .-1 }\n+    for (int l = i; l < j; l += k)\t\t// { dg-error \"condition expression refers to iteration variable 'j'\" }\n+      ;\t\t\t\t\t\t// { dg-error \"increment expression refers to iteration variable 'k'\" \"\" { target *-*-* } .-3 }\n }\n \n template <typename T>\n@@ -84,9 +84,9 @@ void\n f9 (U (&a)[10])\n {\n   #pragma omp for collapse (2)\n-  for (auto [i, j, k] : a)\t\t\t// { dg-error \"use of 'i' before deduction of 'auto'\" \"\" { target *-*-* } .-1 }\n-    for (T l = i; l < j; l += k)\t\t// { dg-error \"use of 'j' before deduction of 'auto'\" }\n-      ;\t\t\t\t\t\t// { dg-error \"use of 'k' before deduction of 'auto'\" \"\" { target *-*-* } .-3 }\n+  for (auto [i, j, k] : a)\t\t\t// { dg-error \"initializer expression refers to iteration variable 'i'\" \"\" { target *-*-* } .-1 }\n+    for (T l = i; l < j; l += k)\t\t// { dg-error \"condition expression refers to iteration variable 'j'\" }\n+      ;\t\t\t\t\t\t// { dg-error \"increment expression refers to iteration variable 'k'\" \"\" { target *-*-* } .-3 }\n }\n \n void"}, {"sha": "40802a0b95cf37057a2ae27e563838b75432fd0c", "filename": "gcc/testsuite/g++.dg/gomp/for-22.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13305518558f20ef2d460a74eb29dad5fce1350/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13305518558f20ef2d460a74eb29dad5fce1350/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-22.C?ref=f13305518558f20ef2d460a74eb29dad5fce1350", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do compile { target c++17 } }\n+\n+namespace std {\n+  template<typename T> struct tuple_size;\n+  template<int, typename> struct tuple_element;\n+}\n+\n+struct A {\n+  int i;\n+  template <int I> int& get() { return i; }\n+};\n+\n+template<> struct std::tuple_size<A> { static const int value = 3; };\n+template<int I> struct std::tuple_element<I,A> { using type = int; };\n+\n+struct B {\n+  A *begin();\n+  A *end();\n+};\n+\n+void\n+f1 (B a)\n+{\n+  #pragma omp for collapse (2)\n+  for (auto [i, j, k] : a)\t\t\t// { dg-error \"initializer expression refers to iteration variable 'i'\" \"\" { target *-*-* } .+1 }\n+    for (int l = i; l < j; l += k)\t\t// { dg-error \"condition expression refers to iteration variable 'j'\" }\n+      ;\t\t\t\t\t\t// { dg-error \"increment expression refers to iteration variable 'k'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+template <int N>\n+void\n+f2 (B a)\n+{\n+  #pragma omp for collapse (2)\n+  for (auto [i, j, k] : a)\t\t\t// { dg-error \"initializer expression refers to iteration variable 'i'\" \"\" { target *-*-* } .-1 }\n+    for (int l = i; l < j; l += k)\t\t// { dg-error \"condition expression refers to iteration variable 'j'\" }\n+      ;\t\t\t\t\t\t// { dg-error \"increment expression refers to iteration variable 'k'\" \"\" { target *-*-* } .-3 }\n+}\n+\n+template <typename T>\n+void\n+f3 (T a)\n+{\n+  #pragma omp for collapse (2)\n+  for (auto [i, j, k] : a)\t\t\t// { dg-error \"initializer expression refers to iteration variable 'i'\" \"\" { target *-*-* } .-1 }\n+    for (int l = i; l < j; l += k)\t\t// { dg-error \"condition expression refers to iteration variable 'j'\" }\n+      ;\t\t\t\t\t\t// { dg-error \"increment expression refers to iteration variable 'k'\" \"\" { target *-*-* } .-3 }\n+}\n+\n+void\n+test ()\n+{\n+  B b;\n+  f1 (b);\n+  f2 <0> (b);\n+  f3 <B> (b);\n+}"}]}