{"sha": "1bf7c3241444b26d2b89b7731de198a9139b7d4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmN2MzMjQxNDQ0YjI2ZDJiODliNzczMWRlMTk4YTkxMzliN2Q0ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-12-15T00:21:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-12-15T00:21:21Z"}, "message": "cgraphunit.c (analyze_functions): Do not analyze extern inline funtions when not optimizing; skip comdat locals.\n\n\t* cgraphunit.c (analyze_functions): Do not analyze extern inline\n\tfuntions when not optimizing; skip comdat locals.\n\nFrom-SVN: r218726", "tree": {"sha": "fd02cef32bb2c82d28f57b394937805c9928f711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd02cef32bb2c82d28f57b394937805c9928f711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bf7c3241444b26d2b89b7731de198a9139b7d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf7c3241444b26d2b89b7731de198a9139b7d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bf7c3241444b26d2b89b7731de198a9139b7d4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf7c3241444b26d2b89b7731de198a9139b7d4e/comments", "author": null, "committer": null, "parents": [{"sha": "001a28839c9361d4d2d71ad63b03e219d0eee884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001a28839c9361d4d2d71ad63b03e219d0eee884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001a28839c9361d4d2d71ad63b03e219d0eee884"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "3e9e2c5393f9c024c9e94652558624a802f5ca8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf7c3241444b26d2b89b7731de198a9139b7d4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf7c3241444b26d2b89b7731de198a9139b7d4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bf7c3241444b26d2b89b7731de198a9139b7d4e", "patch": "@@ -1,3 +1,8 @@\n+2014-12-14  Jan HUbicka  <hubicka@ucw.cz>\n+\n+\t* cgraphunit.c (analyze_functions): Do not analyze extern inline\n+\tfuntions when not optimizing; skip comdat locals.\n+\n 2014-12-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/64037"}, {"sha": "9f24c4d054f76e94b45f577558619d54272916f8", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf7c3241444b26d2b89b7731de198a9139b7d4e/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf7c3241444b26d2b89b7731de198a9139b7d4e/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1bf7c3241444b26d2b89b7731de198a9139b7d4e", "patch": "@@ -225,6 +225,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-chkp.h\"\n #include \"lto-section-names.h\"\n #include \"omp-low.h\"\n+#include \"print-tree.h\"\n \n /* Queue of cgraph nodes scheduled to be added into cgraph.  This is a\n    secondary queue used during optimization to accommodate passes that\n@@ -263,7 +264,7 @@ symtab_node::needed_p (void)\n   if (forced_by_abi && TREE_PUBLIC (decl))\n     return true;\n \n- /* Keep constructors, destructors and virtual functions.  */\n+  /* Keep constructors, destructors and virtual functions.  */\n    if (TREE_CODE (decl) == FUNCTION_DECL\n        && (DECL_STATIC_CONSTRUCTOR (decl) || DECL_STATIC_DESTRUCTOR (decl)))\n     return true;\n@@ -1000,7 +1001,20 @@ analyze_functions (void)\n \t\tcnode->analyze ();\n \n \t      for (edge = cnode->callees; edge; edge = edge->next_callee)\n-\t\tif (edge->callee->definition)\n+\t\tif (edge->callee->definition\n+\t\t    && (!DECL_EXTERNAL (edge->callee->decl)\n+\t\t\t/* When not optimizing, do not try to analyze extern\n+\t\t\t   inline functions.  Doing so is pointless.  */\n+\t\t\t|| opt_for_fn (edge->callee->decl, optimize)\n+\t\t\t/* Weakrefs needs to be preserved.  */\n+\t\t\t|| edge->callee->alias\n+\t\t\t/* always_inline functions are inlined aven at -O0.  */\n+\t\t        || lookup_attribute\n+\t\t\t\t (\"always_inline\",\n+\t\t\t          DECL_ATTRIBUTES (edge->callee->decl))\n+\t\t\t/* Multiversioned functions needs the dispatcher to\n+\t\t\t   be produced locally even for extern functions.  */\n+\t\t\t|| edge->callee->function_version ()))\n \t\t   enqueue_node (edge->callee);\n \t      if (opt_for_fn (cnode->decl, optimize)\n \t\t  && opt_for_fn (cnode->decl, flag_devirtualize))\n@@ -1040,10 +1054,17 @@ analyze_functions (void)\n \t      for (next = node->same_comdat_group;\n \t\t   next != node;\n \t\t   next = next->same_comdat_group)\n-\t\tenqueue_node (next);\n+\t\tif (!next->comdat_local_p ())\n+\t\t  enqueue_node (next);\n \t    }\n \t  for (i = 0; node->iterate_reference (i, ref); i++)\n-\t    if (ref->referred->definition)\n+\t    if (ref->referred->definition\n+\t\t&& (!DECL_EXTERNAL (ref->referred->decl)\n+\t\t    || ((TREE_CODE (ref->referred->decl) != FUNCTION_DECL\n+\t\t\t && optimize)\n+\t\t\t|| (TREE_CODE (ref->referred->decl) == FUNCTION_DECL\n+\t\t\t    && opt_for_fn (ref->referred->decl, optimize))\n+\t\t    || ref->referred->alias)))\n \t      enqueue_node (ref->referred);\n \t  symtab->process_new_functions ();\n \t}"}]}