{"sha": "d976bf74f0b426dc4f17228e181421e695f49c05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3NmJmNzRmMGI0MjZkYzRmMTcyMjhlMTgxNDIxZTY5NWY0OWMwNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T10:08:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T10:08:51Z"}, "message": "[multiple changes]\n\n2012-10-01  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Declarations): Remove the specialized\n\tcode which prevents freezing when the declarative list contains\n\ta _postconditions body. This is no longer needed because the\n\tbody is now inserted at the end of the declarations.\n\t* sem_ch6.adb (Insert_After_Last_Declaration): New routine.\n\t(Insert_Before_First_Source_Declaration): Removed.\n\t(Process_PPCs): Insert the _postconditions body at the end of\n\tthe declarative list to prevent premature freezing of types that\n\tappear in the declarations.\n\n2012-10-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aggr.adb, sem_dim.adb: Minor reformatting.\n\nFrom-SVN: r191911", "tree": {"sha": "48fb5d81c49c29d974252efaecc502e2cca8093b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48fb5d81c49c29d974252efaecc502e2cca8093b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d976bf74f0b426dc4f17228e181421e695f49c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d976bf74f0b426dc4f17228e181421e695f49c05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d976bf74f0b426dc4f17228e181421e695f49c05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d976bf74f0b426dc4f17228e181421e695f49c05/comments", "author": null, "committer": null, "parents": [{"sha": "0929eaeb0128f2bcb9707ffd78bf0bca1a6b7aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0929eaeb0128f2bcb9707ffd78bf0bca1a6b7aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0929eaeb0128f2bcb9707ffd78bf0bca1a6b7aea"}], "stats": {"total": 228, "additions": 121, "deletions": 107}, "files": [{"sha": "5de322c3b9f12c9cd528e85a1d861c185aa723d6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d976bf74f0b426dc4f17228e181421e695f49c05/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d976bf74f0b426dc4f17228e181421e695f49c05/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d976bf74f0b426dc4f17228e181421e695f49c05", "patch": "@@ -1,3 +1,19 @@\n+2012-10-01  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations): Remove the specialized\n+\tcode which prevents freezing when the declarative list contains\n+\ta _postconditions body. This is no longer needed because the\n+\tbody is now inserted at the end of the declarations.\n+\t* sem_ch6.adb (Insert_After_Last_Declaration): New routine.\n+\t(Insert_Before_First_Source_Declaration): Removed.\n+\t(Process_PPCs): Insert the _postconditions body at the end of\n+\tthe declarative list to prevent premature freezing of types that\n+\tappear in the declarations.\n+\n+2012-10-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aggr.adb, sem_dim.adb: Minor reformatting.\n+\n 2012-10-01  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_prag.adb (Process_Convention, Process_Import_Or_Interface):"}, {"sha": "c8167f1ed264b782872c5a53d1e10769d4935fd1", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d976bf74f0b426dc4f17228e181421e695f49c05/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d976bf74f0b426dc4f17228e181421e695f49c05/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=d976bf74f0b426dc4f17228e181421e695f49c05", "patch": "@@ -2550,7 +2550,7 @@ package body Sem_Aggr is\n              Duplicate_Subexpr (High_Bound (Aggregate_Bounds (N))));\n       end if;\n \n-      --  Check the dimensions of each component in the array aggregate.\n+      --  Check the dimensions of each component in the array aggregate\n \n       Analyze_Dimension_Array_Aggregate (N, Component_Typ);\n \n@@ -3392,6 +3392,7 @@ package body Sem_Aggr is\n             --  propagate here the dimensions form Expr to New_Expr.\n \n             Move_Dimensions (Expr, New_Expr);\n+\n          else\n             New_Expr := Expr;\n          end if;\n@@ -4504,7 +4505,7 @@ package body Sem_Aggr is\n          Rewrite (N, New_Aggregate);\n       end Step_8;\n \n-      --  Check the dimensions of the components in the record aggregate.\n+      --  Check the dimensions of the components in the record aggregate\n \n       Analyze_Dimension_Extension_Or_Record_Aggregate (N);\n    end Resolve_Record_Aggregate;"}, {"sha": "483e7055f03555300555c2eee41158ebce3a0067", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d976bf74f0b426dc4f17228e181421e695f49c05/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d976bf74f0b426dc4f17228e181421e695f49c05/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d976bf74f0b426dc4f17228e181421e695f49c05", "patch": "@@ -2152,9 +2152,7 @@ package body Sem_Ch3 is\n          --  explicitly checked that all required types are properly frozen,\n          --  and we do not cause general freezing here. This special circuit\n          --  is used when the encountered body is marked as having already\n-         --  been analyzed (although we must take into account the special\n-         --  case of the internally generated subprogram _postconditions,\n-         --  may not have been analyzed yet)\n+         --  been analyzed.\n \n          --  In all other cases (bodies that come from source, and expander\n          --  generated bodies that have not been analyzed yet), freeze all\n@@ -2170,11 +2168,6 @@ package body Sem_Ch3 is\n                                           N_Task_Body)\n                        or else\n                      Nkind (Next_Node) in N_Body_Stub)\n-           and then not\n-             (Ada_Version = Ada_2012\n-                and then Nkind (Next_Node) = N_Subprogram_Body\n-                and then Chars (Defining_Entity (Next_Node))\n-                           = Name_uPostconditions)\n          then\n             Adjust_D;\n             Freeze_All (Freeze_From, D);"}, {"sha": "4144fe049223383a42ba8c0bde260a71c9766a15", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d976bf74f0b426dc4f17228e181421e695f49c05/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d976bf74f0b426dc4f17228e181421e695f49c05/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d976bf74f0b426dc4f17228e181421e695f49c05", "patch": "@@ -11091,8 +11091,8 @@ package body Sem_Ch6 is\n       --  references to parameters of the inherited subprogram to point to the\n       --  corresponding parameters of the current subprogram.\n \n-      procedure Insert_Before_First_Source_Declaration (Nod : Node_Id);\n-      --  Insert node Nod before the first source declaration of the context\n+      procedure Insert_After_Last_Declaration (Nod : Node_Id);\n+      --  Insert node Nod after the last declaration of the context\n \n       function Invariants_Or_Predicates_Present return Boolean;\n       --  Determines if any invariants or predicates are present for any OUT\n@@ -11285,35 +11285,20 @@ package body Sem_Ch6 is\n          return CP;\n       end Grab_PPC;\n \n-      --------------------------------------------\n-      -- Insert_Before_First_Source_Declaration --\n-      --------------------------------------------\n+      -----------------------------------\n+      -- Insert_After_Last_Declaration --\n+      -----------------------------------\n \n-      procedure Insert_Before_First_Source_Declaration (Nod : Node_Id) is\n+      procedure Insert_After_Last_Declaration (Nod : Node_Id) is\n          Decls : constant List_Id := Declarations (N);\n-         Decl  : Node_Id;\n \n       begin\n          if No (Decls) then\n             Set_Declarations (N, New_List (Nod));\n          else\n-            Decl := First (Decls);\n-\n-            while Present (Decl) loop\n-               if Comes_From_Source (Decl) then\n-                  exit;\n-               end if;\n-\n-               Next (Decl);\n-            end loop;\n-\n-            if No (Decl) then\n-               Append_To (Decls, Nod);\n-            else\n-               Insert_Before (Decl, Nod);\n-            end if;\n+            Append_To (Decls, Nod);\n          end if;\n-      end Insert_Before_First_Source_Declaration;\n+      end Insert_After_Last_Declaration;\n \n       --------------------------------------\n       -- Invariants_Or_Predicates_Present --\n@@ -11797,12 +11782,26 @@ package body Sem_Ch6 is\n             --  The entity for the _Postconditions procedure\n \n          begin\n-            --  Insert the corresponding body of a post condition pragma before\n-            --  the first source declaration of the context. This ensures that\n-            --  any [sub]types generated in relation to the formals of the\n-            --  subprogram are still visible in the _postcondition body.\n-\n-            Insert_Before_First_Source_Declaration (\n+            --  Insert the corresponding body of a post condition pragma after\n+            --  the last declaration of the context. This ensures that the body\n+            --  will not cause any premature freezing as it may mention types:\n+\n+            --    procedure Proc (Obj : Array_Typ) is\n+            --       procedure _postconditions is\n+            --       begin\n+            --          ... Obj ...\n+            --       end _postconditions;\n+\n+            --       subtype T is Array_Typ (Obj'First (1) .. Obj'Last (1));\n+            --    begin\n+\n+            --  In the example above, Obj is of type T but the incorrect\n+            --  placement of _postconditions will cause a crash in gigi due to\n+            --  an out of order reference. The body of _postconditions must be\n+            --  placed after the declaration of Temp to preserve correct\n+            --  visibility.\n+\n+            Insert_After_Last_Declaration (\n               Make_Subprogram_Body (Loc,\n                 Specification =>\n                   Make_Procedure_Specification (Loc,"}, {"sha": "d7526076a3466da0528c3145541e7521e491e3d5", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 73, "deletions": 68, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d976bf74f0b426dc4f17228e181421e695f49c05/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d976bf74f0b426dc4f17228e181421e695f49c05/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=d976bf74f0b426dc4f17228e181421e695f49c05", "patch": "@@ -1132,9 +1132,7 @@ package body Sem_Dim is\n       --  Aspect is an Ada 2012 feature. Note that there is no need to check\n       --  dimensions for nodes that don't come from source.\n \n-      if Ada_Version < Ada_2012\n-        or else not Comes_From_Source (N)\n-      then\n+      if Ada_Version < Ada_2012 or else not Comes_From_Source (N) then\n          return;\n       end if;\n \n@@ -1226,6 +1224,7 @@ package body Sem_Dim is\n       end if;\n \n       while Present (Comp) loop\n+\n          --  Get the expression from the component\n \n          if Nkind (Comp) = N_Component_Association then\n@@ -1255,10 +1254,12 @@ package body Sem_Dim is\n                Error_Detected := True;\n             end if;\n \n-            Error_Msg_N (\"\\expected dimension \" &\n-                         Dimensions_Msg_Of (Comp_Typ) & \", found \" &\n-                         Dimensions_Msg_Of (Expr),\n-                         Expr);\n+            Error_Msg_N\n+              (\"\\expected dimension \"\n+                & Dimensions_Msg_Of (Comp_Typ)\n+                & \", found \"\n+                & Dimensions_Msg_Of (Expr),\n+               Expr);\n          end if;\n \n          --  Look at the named components right after the positional components\n@@ -1301,7 +1302,7 @@ package body Sem_Dim is\n       is\n       begin\n          Error_Msg_N (\"dimensions mismatch in assignment\", N);\n-         Error_Msg_N (\"\\left-hand side \" & Dimensions_Msg_Of (Lhs, True), N);\n+         Error_Msg_N (\"\\left-hand side \"  & Dimensions_Msg_Of (Lhs, True), N);\n          Error_Msg_N (\"\\right-hand side \" & Dimensions_Msg_Of (Rhs, True), N);\n       end Error_Dim_Msg_For_Assignment_Statement;\n \n@@ -1337,7 +1338,7 @@ package body Sem_Dim is\n                        \"dimensions\",\n                        N,\n                        Entity (N));\n-         Error_Msg_N (\"\\left operand \" & Dimensions_Msg_Of (L, True), N);\n+         Error_Msg_N (\"\\left operand \"  & Dimensions_Msg_Of (L, True), N);\n          Error_Msg_N (\"\\right operand \" & Dimensions_Msg_Of (R, True), N);\n       end Error_Dim_Msg_For_Binary_Op;\n \n@@ -1551,6 +1552,8 @@ package body Sem_Dim is\n                          Ada_Numerics_Generic_Elementary_Functions);\n             end Is_Elementary_Function_Entity;\n \n+         --  Start of processing for Elementary_Function_Calls\n+\n          begin\n             --  Get the original subprogram entity following the renaming chain\n \n@@ -1561,6 +1564,7 @@ package body Sem_Dim is\n             --  Check the call is an Elementary function call\n \n             if Is_Elementary_Function_Entity (Ent) then\n+\n                --  Sqrt function call case\n \n                if Chars (Ent) = Name_Sqrt then\n@@ -1585,11 +1589,10 @@ package body Sem_Dim is\n \n                else\n                   Actual := First_Actual (N);\n-\n                   while Present (Actual) loop\n                      if Exists (Dimensions_Of (Actual)) then\n-                        --  Check if an error has already been encountered so\n-                        --  far.\n+\n+                        --  Check if error has already been encountered so far\n \n                         if not Error_Detected then\n                            Error_Msg_NE (\"dimensions mismatch in call of&\",\n@@ -1682,9 +1685,10 @@ package body Sem_Dim is\n          Expr : Node_Id) is\n       begin\n          Error_Msg_N (\"dimensions mismatch in component declaration\", N);\n-         Error_Msg_N (\"\\expected dimension \" &\n-                      Dimensions_Msg_Of (Etyp) & \", found \" &\n-                      Dimensions_Msg_Of (Expr),\n+         Error_Msg_N (\"\\expected dimension \"\n+                       & Dimensions_Msg_Of (Etyp)\n+                       & \", found \"\n+                       & Dimensions_Msg_Of (Expr),\n                       Expr);\n       end Error_Dim_Msg_For_Component_Declaration;\n \n@@ -1703,9 +1707,8 @@ package body Sem_Dim is\n             --  dimensionless to indicate the literal is treated as if its\n             --  dimension matches the type dimension.\n \n-            if Nkind_In (Original_Node (Expr),\n-                             N_Real_Literal,\n-                             N_Integer_Literal)\n+            if Nkind_In (Original_Node (Expr), N_Real_Literal,\n+                                               N_Integer_Literal)\n             then\n                Dim_Warning_For_Numeric_Literal (Expr, Etyp);\n \n@@ -1729,7 +1732,7 @@ package body Sem_Dim is\n    procedure Analyze_Dimension_Extended_Return_Statement (N : Node_Id) is\n       Return_Ent       : constant Entity_Id := Return_Statement_Entity (N);\n       Return_Etyp      : constant Entity_Id :=\n-                           Etype (Return_Applies_To (Return_Ent));\n+        Etype (Return_Applies_To (Return_Ent));\n       Return_Obj_Decls : constant List_Id := Return_Object_Declarations (N);\n       Return_Obj_Decl  : Node_Id;\n       Return_Obj_Id    : Entity_Id;\n@@ -1754,9 +1757,10 @@ package body Sem_Dim is\n       is\n       begin\n          Error_Msg_N (\"dimensions mismatch in extended return statement\", N);\n-         Error_Msg_N (\"\\expected dimension \" &\n-                      Dimensions_Msg_Of (Return_Etyp) & \", found \" &\n-                      Dimensions_Msg_Of (Return_Obj_Typ),\n+         Error_Msg_N (\"\\expected dimension \"\n+                       & Dimensions_Msg_Of (Return_Etyp)\n+                       & \", found \"\n+                       & Dimensions_Msg_Of (Return_Obj_Typ),\n                       N);\n       end Error_Dim_Msg_For_Extended_Return_Statement;\n \n@@ -1765,10 +1769,9 @@ package body Sem_Dim is\n    begin\n       if Present (Return_Obj_Decls) then\n          Return_Obj_Decl := First (Return_Obj_Decls);\n-\n          while Present (Return_Obj_Decl) loop\n             if Nkind (Return_Obj_Decl) = N_Object_Declaration then\n-               Return_Obj_Id  := Defining_Identifier (Return_Obj_Decl);\n+               Return_Obj_Id := Defining_Identifier (Return_Obj_Decl);\n \n                if Is_Return_Object (Return_Obj_Id) then\n                   Return_Obj_Typ := Etype (Return_Obj_Id);\n@@ -1795,7 +1798,7 @@ package body Sem_Dim is\n    -----------------------------------------------------\n \n    procedure Analyze_Dimension_Extension_Or_Record_Aggregate (N : Node_Id) is\n-      Comp     : Node_Id := First (Component_Associations (N));\n+      Comp     : Node_Id;\n       Comp_Id  : Entity_Id;\n       Comp_Typ : Entity_Id;\n       Expr     : Node_Id;\n@@ -1808,12 +1811,11 @@ package body Sem_Dim is\n       --  Aspect is an Ada 2012 feature. Note that there is no need to check\n       --  dimensions for aggregates that don't come from source.\n \n-      if Ada_Version < Ada_2012\n-        or else not Comes_From_Source (N)\n-      then\n+      if Ada_Version < Ada_2012 or else not Comes_From_Source (N) then\n          return;\n       end if;\n \n+      Comp := First (Component_Associations (N));\n       while Present (Comp) loop\n          Comp_Id  := Entity (First (Choices (Comp)));\n          Comp_Typ := Etype (Comp_Id);\n@@ -1828,29 +1830,33 @@ package body Sem_Dim is\n             --  dimensions of the component mismatch.\n \n             if Dimensions_Of (Expr) /= Dimensions_Of (Comp_Typ) then\n+\n                --  Check if an error has already been encountered so far\n \n                if not Error_Detected then\n+\n                   --  Extension aggregate case\n \n                   if Nkind (N) = N_Extension_Aggregate then\n-                     Error_Msg_N (\"dimensions mismatch in extension aggregate\",\n-                                  N);\n+                     Error_Msg_N\n+                       (\"dimensions mismatch in extension aggregate\", N);\n \n                   --  Record aggregate case\n \n                   else\n-                     Error_Msg_N (\"dimensions mismatch in record aggregate\",\n-                                  N);\n+                     Error_Msg_N\n+                       (\"dimensions mismatch in record aggregate\", N);\n                   end if;\n \n                   Error_Detected := True;\n                end if;\n \n-               Error_Msg_N (\"\\expected dimension \" &\n-                            Dimensions_Msg_Of (Comp_Typ) & \", found \" &\n-                            Dimensions_Msg_Of (Expr),\n-                            Comp);\n+               Error_Msg_N\n+                 (\"\\expected dimension \"\n+                   & Dimensions_Msg_Of (Comp_Typ)\n+                   & \", found \"\n+                   & Dimensions_Msg_Of (Expr),\n+                  Comp);\n             end if;\n          end if;\n \n@@ -1871,14 +1877,11 @@ package body Sem_Dim is\n       --  Aspect is an Ada 2012 feature. Note that there is no need to check\n       --  dimensions for sub specs that don't come from source.\n \n-      if Ada_Version < Ada_2012\n-        or else not Comes_From_Source (N)\n-      then\n+      if Ada_Version < Ada_2012 or else not Comes_From_Source (N) then\n          return;\n       end if;\n \n       Formal := First (Formals);\n-\n       while Present (Formal) loop\n          Typ         := Parameter_Type (Formal);\n          Dims_Of_Typ := Dimensions_Of  (Typ);\n@@ -1893,9 +1896,8 @@ package body Sem_Dim is\n \n                if Present (Expr)\n                  and then Dims_Of_Typ /= Dimensions_Of (Expr)\n-                 and then Nkind_In (Original_Node (Expr),\n-                                       N_Real_Literal,\n-                                       N_Integer_Literal)\n+                 and then Nkind_In (Original_Node (Expr), N_Real_Literal,\n+                                                          N_Integer_Literal)\n                then\n                   Dim_Warning_For_Numeric_Literal (Expr, Etype (Typ));\n                end if;\n@@ -1990,10 +1992,12 @@ package body Sem_Dim is\n          Expr : Node_Id) is\n       begin\n          Error_Msg_N (\"dimensions mismatch in object declaration\", N);\n-         Error_Msg_N (\"\\expected dimension \" &\n-                      Dimensions_Msg_Of (Etyp) & \", found \" &\n-                      Dimensions_Msg_Of (Expr),\n-                      Expr);\n+         Error_Msg_N\n+           (\"\\expected dimension \"\n+             & Dimensions_Msg_Of (Etyp)\n+             & \", found \"\n+             & Dimensions_Msg_Of (Expr),\n+            Expr);\n       end Error_Dim_Msg_For_Object_Declaration;\n \n    --  Start of processing for Analyze_Dimension_Object_Declaration\n@@ -2007,22 +2011,21 @@ package body Sem_Dim is\n          --  Check dimensions match\n \n          if Dim_Of_Expr /= Dim_Of_Etyp then\n+\n             --  Numeric literal case. Issue a warning if the object type is not\n             --  dimensionless to indicate the literal is treated as if its\n             --  dimension matches the type dimension.\n \n-            if Nkind_In (Original_Node (Expr),\n-                             N_Real_Literal,\n-                             N_Integer_Literal)\n+            if Nkind_In (Original_Node (Expr), N_Real_Literal,\n+                                               N_Integer_Literal)\n             then\n                Dim_Warning_For_Numeric_Literal (Expr, Etyp);\n \n-            --  Case where the object is a constant whose type is a dimensioned\n-            --  type.\n+            --  Case of object is a constant whose type is a dimensioned type\n \n             elsif Constant_Present (N) and then not Exists (Dim_Of_Etyp) then\n-               --  Propagate the dimension from the expression to the object\n-               --  entity\n+\n+               --  Propagate dimension from expression to object entity\n \n                Set_Dimensions (Id, Dim_Of_Expr);\n \n@@ -2064,10 +2067,12 @@ package body Sem_Dim is\n          Renamed_Name : Node_Id) is\n       begin\n          Error_Msg_N (\"dimensions mismatch in object renaming declaration\", N);\n-         Error_Msg_N (\"\\expected dimension \" &\n-                      Dimensions_Msg_Of (Sub_Mark) & \", found \" &\n-                      Dimensions_Msg_Of (Renamed_Name),\n-                      Renamed_Name);\n+         Error_Msg_N\n+           (\"\\expected dimension \"\n+             & Dimensions_Msg_Of (Sub_Mark)\n+             & \", found \"\n+             & Dimensions_Msg_Of (Renamed_Name),\n+            Renamed_Name);\n       end Error_Dim_Msg_For_Object_Renaming_Declaration;\n \n    --  Start of processing for Analyze_Dimension_Object_Renaming_Declaration\n@@ -2110,10 +2115,12 @@ package body Sem_Dim is\n       is\n       begin\n          Error_Msg_N (\"dimensions mismatch in return statement\", N);\n-         Error_Msg_N (\"\\expected dimension \" &\n-                      Dimensions_Msg_Of (Return_Etyp) & \", found \" &\n-                      Dimensions_Msg_Of (Expr),\n-                      Expr);\n+         Error_Msg_N\n+           (\"\\expected dimension \"\n+             & Dimensions_Msg_Of (Return_Etyp)\n+             & \", found \"\n+             & Dimensions_Msg_Of (Expr),\n+            Expr);\n       end Error_Dim_Msg_For_Simple_Return_Statement;\n \n    --  Start of processing for Analyze_Dimension_Simple_Return_Statement\n@@ -2148,8 +2155,9 @@ package body Sem_Dim is\n             --  it cannot inherit a dimension from its subtype.\n \n             if Exists (Dims_Of_Id) then\n-               Error_Msg_N (\"subtype& already\" & Dimensions_Msg_Of (Id, True),\n-                            N);\n+               Error_Msg_N\n+                 (\"subtype& already\" & Dimensions_Msg_Of (Id, True), N);\n+\n             else\n                Set_Dimensions (Id, Dims_Of_Etyp);\n                Set_Symbol (Id, Symbol_Of (Etyp));\n@@ -2842,7 +2850,6 @@ package body Sem_Dim is\n \n             if Exists (Symbol_Of (Etyp)) then\n                Symbols := Symbol_Of (Etyp);\n-\n             else\n                Symbols := From_Dim_To_Str_Of_Unit_Symbols\n                             (Dims_Of_Actual, System_Of (Base_Type (Etyp)));\n@@ -3334,7 +3341,6 @@ package body Sem_Dim is\n \n    begin\n       Start_String;\n-\n       while Belong_To_Numeric_Literal (C) loop\n          Store_String_Char (C);\n          Src_Ptr := Src_Ptr + 1;\n@@ -3350,11 +3356,9 @@ package body Sem_Dim is\n \n    function Symbol_Of (E : Entity_Id) return String_Id is\n       Subtype_Symbol : constant String_Id := Symbol_Table.Get (E);\n-\n    begin\n       if Subtype_Symbol /= No_String then\n          return Subtype_Symbol;\n-\n       else\n          return From_Dim_To_Str_Of_Unit_Symbols\n                   (Dimensions_Of (E), System_Of (Base_Type (E)));\n@@ -3388,4 +3392,5 @@ package body Sem_Dim is\n \n       return Null_System;\n    end System_Of;\n+\n end Sem_Dim;"}]}