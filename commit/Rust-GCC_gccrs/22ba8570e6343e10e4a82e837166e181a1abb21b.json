{"sha": "22ba8570e6343e10e4a82e837166e181a1abb21b", "node_id": "C_kwDOANBUbNoAKDIyYmE4NTcwZTYzNDNlMTBlNGE4MmU4MzcxNjZlMTgxYTFhYmIyMWI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-13T00:18:02Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-13T00:18:02Z"}, "message": "Daily bump.", "tree": {"sha": "819b2f6b21f033cdaa37b746f64e46959a181ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/819b2f6b21f033cdaa37b746f64e46959a181ef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22ba8570e6343e10e4a82e837166e181a1abb21b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ba8570e6343e10e4a82e837166e181a1abb21b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ba8570e6343e10e4a82e837166e181a1abb21b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ba8570e6343e10e4a82e837166e181a1abb21b/comments", "author": null, "committer": null, "parents": [{"sha": "74e72964b45f197cfd23f24fecf4cd5b130bcbd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e72964b45f197cfd23f24fecf4cd5b130bcbd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e72964b45f197cfd23f24fecf4cd5b130bcbd9"}], "stats": {"total": 3695, "additions": 3694, "deletions": 1}, "files": [{"sha": "9f431c19e3f961bf1606ff424ce71047069cd67c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 380, "deletions": 0, "changes": 380, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba8570e6343e10e4a82e837166e181a1abb21b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba8570e6343e10e4a82e837166e181a1abb21b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22ba8570e6343e10e4a82e837166e181a1abb21b", "patch": "@@ -1,3 +1,383 @@\n+2023-02-12  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/sourcebuild.texi: Remove (broken) direct reference to\n+\t\"The GNU configure and build system\".\n+\n+2023-02-12  Jin Ma  <jinma@linux.alibaba.com>\n+\n+\t* config/riscv/riscv.cc (riscv_adjust_libcall_cfi_prologue): Change\n+\tgen_add3_insn to gen_rtx_SET.\n+\t(riscv_adjust_libcall_cfi_epilogue): Likewise.\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class sat_op): New class.\n+\t(class vnclip): Ditto.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vaadd): Ditto.\n+\t(vasub): Ditto.\n+\t(vaaddu): Ditto.\n+\t(vasubu): Ditto.\n+\t(vsmul): Ditto.\n+\t(vssra): Ditto.\n+\t(vssrl): Ditto.\n+\t(vnclipu): Ditto.\n+\t(vnclip): Ditto.\n+\t* config/riscv/vector-iterators.md (su): Add instruction.\n+\t(aadd): Ditto.\n+\t(vaalu): Ditto.\n+\t* config/riscv/vector.md (@pred_<sat_op><mode>): New pattern.\n+\t(@pred_<sat_op><mode>_scalar): Ditto.\n+\t(*pred_<sat_op><mode>_scalar): Ditto.\n+\t(*pred_<sat_op><mode>_extended_scalar): Ditto.\n+\t(@pred_narrow_clip<v_su><mode>): Ditto.\n+\t(@pred_narrow_clip<v_su><mode>_scalar): Ditto.\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/constraints.md (Wbr): Remove unused constraint.\n+\t* config/riscv/predicates.md: Fix move operand predicate.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class vnshift): New class.\n+\t(class vncvt_x): Ditto.\n+\t(class vmerge): Ditto.\n+\t(class vmv_v): Ditto.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vsra): Ditto.\n+\t(vsrl): Ditto.\n+\t(vnsrl): Ditto.\n+\t(vnsra): Ditto.\n+\t(vncvt_x): Ditto.\n+\t(vmerge): Ditto.\n+\t(vmv_v): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct narrow_alu_def): Ditto.\n+\t(struct move_def): Ditto.\n+\t(SHAPE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_WEXTI_OPS): New variable.\n+\t(DEF_RVV_WEXTU_OPS): Ditto\n+\t* config/riscv/riscv-vector-builtins.def (x_x_w): Fix type for suffix.\n+\t(v_v): Ditto.\n+\t(v_x): Ditto.\n+\t(x_w): Ditto.\n+\t(x): Ditto.\n+\t* config/riscv/riscv.cc (riscv_print_operand): Refine ASM printting rule.\n+\t* config/riscv/vector-iterators.md (nmsac):New iterator.\n+\t(nmsub): New iterator.\n+\t* config/riscv/vector.md (@pred_merge<mode>): New pattern.\n+\t(@pred_merge<mode>_scalar): New pattern.\n+\t(*pred_merge<mode>_scalar): New pattern.\n+\t(*pred_merge<mode>_extended_scalar): New pattern.\n+\t(@pred_narrow_<optab><mode>): New pattern.\n+\t(@pred_narrow_<optab><mode>_scalar): New pattern.\n+\t(@pred_trunc<mode>): New pattern.\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class vmadc): New class.\n+\t(class vmsbc): Ditto.\n+\t(BASE): Define new class.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vmadc): New define.\n+\t(vmsbc): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct return_mask_def):\n+\tNew class.\n+\t(SHAPE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc\n+\t(function_expander::use_exact_insn): Adjust for new support\n+\t* config/riscv/riscv-vector-builtins.h\n+\t(function_base::has_merge_operand_p): New function.\n+\t* config/riscv/vector-iterators.md: New iterator.\n+\t* config/riscv/vector.md (@pred_madc<mode>): New pattern.\n+\t(@pred_msbc<mode>): Ditto.\n+\t(@pred_madc<mode>_scalar): Ditto.\n+\t(@pred_msbc<mode>_scalar): Ditto.\n+\t(*pred_madc<mode>_scalar): Ditto.\n+\t(*pred_madc<mode>_extended_scalar): Ditto.\n+\t(*pred_msbc<mode>_scalar): Ditto.\n+\t(*pred_msbc<mode>_extended_scalar): Ditto.\n+\t(@pred_madc<mode>_overflow): Ditto.\n+\t(@pred_msbc<mode>_overflow): Ditto.\n+\t(@pred_madc<mode>_overflow_scalar): Ditto.\n+\t(@pred_msbc<mode>_overflow_scalar): Ditto.\n+\t(*pred_madc<mode>_overflow_scalar): Ditto.\n+\t(*pred_madc<mode>_overflow_extended_scalar): Ditto.\n+\t(*pred_msbc<mode>_overflow_scalar): Ditto.\n+\t(*pred_msbc<mode>_overflow_extended_scalar): Ditto.\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-protos.h (simm5_p): Add vadc/vsbc support.\n+\t* config/riscv/riscv-v.cc (simm32_p): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class vadc): New class.\n+\t(class vsbc): Ditto.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vadc): Ditto.\n+\t(vsbc): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc\n+\t(struct no_mask_policy_def): Ditto.\n+\t(SHAPE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc\n+\t(rvv_arg_type_info::get_base_vector_type): Add vadc/vsbc support.\n+\t(rvv_arg_type_info::get_tree_type): Ditto.\n+\t(function_expander::use_exact_insn): Ditto.\n+\t* config/riscv/riscv-vector-builtins.h (enum rvv_base_type): Ditto.\n+\t(function_base::use_mask_predication_p): New function.\n+\t* config/riscv/vector-iterators.md: New iterator.\n+\t* config/riscv/vector.md (@pred_adc<mode>): New pattern.\n+\t(@pred_sbc<mode>): Ditto.\n+\t(@pred_adc<mode>_scalar): Ditto.\n+\t(@pred_sbc<mode>_scalar): Ditto.\n+\t(*pred_adc<mode>_scalar): Ditto.\n+\t(*pred_adc<mode>_extended_scalar): Ditto.\n+\t(*pred_sbc<mode>_scalar): Ditto.\n+\t(*pred_sbc<mode>_extended_scalar): Ditto.\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/vector.md: use \"zero\" reg.\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class widen_binop): New\n+\tclass.\n+\t(class vwmulsu): Ditto.\n+\t(class vwcvt): Ditto.\n+\t(BASE): Add integer widening support.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto\n+\t* config/riscv/riscv-vector-builtins-functions.def (vwadd): New class.\n+\t(vwsub): New class.\n+\t(vwmul): New class.\n+\t(vwmulu): New class.\n+\t(vwmulsu): New class.\n+\t(vwaddu): New class.\n+\t(vwsubu): New class.\n+\t(vwcvt_x): New class.\n+\t(vwcvtu_x): New class.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct alu_def): New\n+\tclass.\n+\t(struct widen_alu_def): New class.\n+\t(SHAPE): New class.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: New class.\n+\t* config/riscv/riscv-vector-builtins.cc\n+\t(rvv_arg_type_info::get_base_vector_type): Add integer widening support.\n+\t(rvv_arg_type_info::get_tree_type): Ditto.\n+\t* config/riscv/riscv-vector-builtins.def (x_x_v): Change into \"x_v\"\n+\t(x_v): Ditto.\n+\t* config/riscv/riscv-vector-builtins.h (enum rvv_base_type): Add integer\n+\twidening support.\n+\t* config/riscv/riscv-vsetvl.cc (change_insn): Fix reg_equal use bug.\n+\t* config/riscv/riscv.h (X0_REGNUM): New constant.\n+\t* config/riscv/vector-iterators.md: New iterators.\n+\t* config/riscv/vector.md\n+\t(@pred_dual_widen_<any_widen_binop:optab><any_extend:su><mode>): New\n+\tpattern.\n+\t(@pred_dual_widen_<any_widen_binop:optab><any_extend:su><mode>_scalar):\n+\tDitto.\n+\t(@pred_single_widen_<plus_minus:optab><any_extend:su><mode>): Ditto.\n+\t(@pred_single_widen_<plus_minus:optab><any_extend:su><mode>_scalar):\n+\tDitto.\n+\t(@pred_widen_mulsu<mode>): Ditto.\n+\t(@pred_widen_mulsu<mode>_scalar): Ditto.\n+\t(@pred_<optab><mode>): Ditto.\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    kito-cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.cc: Add flag for 'V' extension.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class vmulh): New class.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vmulh): Add vmulh\n+\tAPI support.\n+\t(vmulhu): Ditto.\n+\t(vmulhsu): Ditto.\n+\t* config/riscv/riscv-vector-builtins-types.def (DEF_RVV_FULL_V_I_OPS):\n+\tNew macro.\n+\t(DEF_RVV_FULL_V_U_OPS): Ditto.\n+\t(vint8mf8_t): Ditto.\n+\t(vint8mf4_t): Ditto.\n+\t(vint8mf2_t): Ditto.\n+\t(vint8m1_t): Ditto.\n+\t(vint8m2_t): Ditto.\n+\t(vint8m4_t): Ditto.\n+\t(vint8m8_t): Ditto.\n+\t(vint16mf4_t): Ditto.\n+\t(vint16mf2_t): Ditto.\n+\t(vint16m1_t): Ditto.\n+\t(vint16m2_t): Ditto.\n+\t(vint16m4_t): Ditto.\n+\t(vint16m8_t): Ditto.\n+\t(vint32mf2_t): Ditto.\n+\t(vint32m1_t): Ditto.\n+\t(vint32m2_t): Ditto.\n+\t(vint32m4_t): Ditto.\n+\t(vint32m8_t): Ditto.\n+\t(vint64m1_t): Ditto.\n+\t(vint64m2_t): Ditto.\n+\t(vint64m4_t): Ditto.\n+\t(vint64m8_t): Ditto.\n+\t(vuint8mf8_t): Ditto.\n+\t(vuint8mf4_t): Ditto.\n+\t(vuint8mf2_t): Ditto.\n+\t(vuint8m1_t): Ditto.\n+\t(vuint8m2_t): Ditto.\n+\t(vuint8m4_t): Ditto.\n+\t(vuint8m8_t): Ditto.\n+\t(vuint16mf4_t): Ditto.\n+\t(vuint16mf2_t): Ditto.\n+\t(vuint16m1_t): Ditto.\n+\t(vuint16m2_t): Ditto.\n+\t(vuint16m4_t): Ditto.\n+\t(vuint16m8_t): Ditto.\n+\t(vuint32mf2_t): Ditto.\n+\t(vuint32m1_t): Ditto.\n+\t(vuint32m2_t): Ditto.\n+\t(vuint32m4_t): Ditto.\n+\t(vuint32m8_t): Ditto.\n+\t(vuint64m1_t): Ditto.\n+\t(vuint64m2_t): Ditto.\n+\t(vuint64m4_t): Ditto.\n+\t(vuint64m8_t): Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_FULL_V_I_OPS): Ditto.\n+\t(DEF_RVV_FULL_V_U_OPS): Ditto.\n+\t(check_required_extensions): Add vmulh support.\n+\t(rvv_arg_type_info::get_tree_type): Ditto.\n+\t* config/riscv/riscv-vector-builtins.h (RVV_REQUIRE_FULL_V): Ditto.\n+\t(enum rvv_base_type): Ditto.\n+\t* config/riscv/riscv.opt: Add 'V' extension flag.\n+\t* config/riscv/vector-iterators.md (su): New iterator.\n+\t* config/riscv/vector.md (@pred_mulh<v_su><mode>): New pattern.\n+\t(@pred_mulh<v_su><mode>_scalar): Ditto.\n+\t(*pred_mulh<v_su><mode>_scalar): Ditto.\n+\t(*pred_mulh<v_su><mode>_extended_scalar): Ditto.\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/iterators.md: Add sign_extend/zero_extend.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class ext): New class.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Add vsext/vzext support.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vsext): New macro\n+\tdefine.\n+\t(vzext): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct alu_def): Adjust\n+\tfor vsext/vzext support.\n+\t* config/riscv/riscv-vector-builtins-types.def (DEF_RVV_WEXTI_OPS): New\n+\tmacro define.\n+\t(DEF_RVV_QEXTI_OPS): Ditto.\n+\t(DEF_RVV_OEXTI_OPS): Ditto.\n+\t(DEF_RVV_WEXTU_OPS): Ditto.\n+\t(DEF_RVV_QEXTU_OPS): Ditto.\n+\t(DEF_RVV_OEXTU_OPS): Ditto.\n+\t(vint16mf4_t): Ditto.\n+\t(vint16mf2_t): Ditto.\n+\t(vint16m1_t): Ditto.\n+\t(vint16m2_t): Ditto.\n+\t(vint16m4_t): Ditto.\n+\t(vint16m8_t): Ditto.\n+\t(vint32mf2_t): Ditto.\n+\t(vint32m1_t): Ditto.\n+\t(vint32m2_t): Ditto.\n+\t(vint32m4_t): Ditto.\n+\t(vint32m8_t): Ditto.\n+\t(vint64m1_t): Ditto.\n+\t(vint64m2_t): Ditto.\n+\t(vint64m4_t): Ditto.\n+\t(vint64m8_t): Ditto.\n+\t(vuint16mf4_t): Ditto.\n+\t(vuint16mf2_t): Ditto.\n+\t(vuint16m1_t): Ditto.\n+\t(vuint16m2_t): Ditto.\n+\t(vuint16m4_t): Ditto.\n+\t(vuint16m8_t): Ditto.\n+\t(vuint32mf2_t): Ditto.\n+\t(vuint32m1_t): Ditto.\n+\t(vuint32m2_t): Ditto.\n+\t(vuint32m4_t): Ditto.\n+\t(vuint32m8_t): Ditto.\n+\t(vuint64m1_t): Ditto.\n+\t(vuint64m2_t): Ditto.\n+\t(vuint64m4_t): Ditto.\n+\t(vuint64m8_t): Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_WEXTI_OPS): Ditto.\n+\t(DEF_RVV_QEXTI_OPS): Ditto.\n+\t(DEF_RVV_OEXTI_OPS): Ditto.\n+\t(DEF_RVV_WEXTU_OPS): Ditto.\n+\t(DEF_RVV_QEXTU_OPS): Ditto.\n+\t(DEF_RVV_OEXTU_OPS): Ditto.\n+\t(rvv_arg_type_info::get_base_vector_type): Add sign_exted/zero_extend\n+\tsupport.\n+\t(rvv_arg_type_info::get_tree_type): Ditto.\n+\t* config/riscv/riscv-vector-builtins.h (enum rvv_base_type): Ditto.\n+\t* config/riscv/vector-iterators.md (z): New attribute.\n+\t* config/riscv/vector.md (@pred_<optab><mode>_vf2): New pattern.\n+\t(@pred_<optab><mode>_vf4): Ditto.\n+\t(@pred_<optab><mode>_vf8): Ditto.\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/iterators.md: Add saturating Addition && Subtraction.\n+\t* config/riscv/riscv-v.cc (has_vi_variant_p): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vsadd): New def.\n+\t(vssub): Ditto.\n+\t(vsaddu): Ditto.\n+\t(vssubu): Ditto.\n+\t* config/riscv/vector-iterators.md (sll.vi): Adjust for Saturating\n+\tsupport.\n+\t(sll.vv): Ditto.\n+\t(%3,%v4): Ditto.\n+\t(%3,%4): Ditto.\n+\t* config/riscv/vector.md (@pred_<optab><mode>): New pattern.\n+\t(@pred_<optab><mode>_scalar): New pattern.\n+\t(*pred_<optab><mode>_scalar): New pattern.\n+\t(*pred_<optab><mode>_extended_scalar): New pattern.\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/iterators.md: Add neg and not.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class unop): New class.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vadd): Rename binop\n+\tinto alu.\n+\t(vsub): Ditto.\n+\t(vand): Ditto.\n+\t(vor): Ditto.\n+\t(vxor): Ditto.\n+\t(vsll): Ditto.\n+\t(vsra): Ditto.\n+\t(vsrl): Ditto.\n+\t(vmin): Ditto.\n+\t(vmax): Ditto.\n+\t(vminu): Ditto.\n+\t(vmaxu): Ditto.\n+\t(vmul): Ditto.\n+\t(vdiv): Ditto.\n+\t(vrem): Ditto.\n+\t(vdivu): Ditto.\n+\t(vremu): Ditto.\n+\t(vrsub): Ditto.\n+\t(vneg): Ditto.\n+\t(vnot): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct binop_def): Ditto.\n+\t(struct alu_def): Ditto.\n+\t(SHAPE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc: Support unary C/C/++.\n+\t* config/riscv/vector-iterators.md: New iterator.\n+\t* config/riscv/vector.md (@pred_<optab><mode>): New pattern\n+\n+2023-02-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (pass_vsetvl::compute_probabilities): Skip exit block.\n+\n 2023-02-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ipa/108605"}, {"sha": "d3e275017e185a0e982dc10ec63cb54c61a318de", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba8570e6343e10e4a82e837166e181a1abb21b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba8570e6343e10e4a82e837166e181a1abb21b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=22ba8570e6343e10e4a82e837166e181a1abb21b", "patch": "@@ -1 +1 @@\n-20230212\n+20230213"}, {"sha": "8455d280b8b8780112de9f79fe7ae2bddc5623c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3302, "deletions": 0, "changes": 3302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba8570e6343e10e4a82e837166e181a1abb21b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba8570e6343e10e4a82e837166e181a1abb21b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22ba8570e6343e10e4a82e837166e181a1abb21b"}, {"sha": "3574005959bd3b4f111bcd427e5d7ac94ef27c3c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba8570e6343e10e4a82e837166e181a1abb21b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba8570e6343e10e4a82e837166e181a1abb21b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=22ba8570e6343e10e4a82e837166e181a1abb21b", "patch": "@@ -1,3 +1,14 @@\n+2023-02-12  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/xml/manual/containers.xml: Tweak a link to N1780\n+\t(C++ standard).\n+\t* doc/html/manual/associative.html: Regenerate.\n+\n+2023-02-12  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/xml/manual/ctype.xml: Change www.unix.org to unix.org.\n+\t* doc/html/manual/facets.html: Regenerate.\n+\n 2023-02-11  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/policy_data_structures_biblio.xml: Update"}]}