{"sha": "a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84", "node_id": "C_kwDOANBUbNoAKGE2YjdmZmYwNmM1YjI3YzRmZmFjZjRjODRlYTExODkyNTRiOWFkODQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-01T13:50:43Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-03T08:58:22Z"}, "message": "gcov-dump: add --stable option\n\nThe option prints TOP N counters in a stable format\nusage for comparison (diff).\n\ngcc/ChangeLog:\n\n\t* doc/gcov-dump.texi: Document the new option.\n\t* gcov-dump.cc (main): Parse the new option.\n\t(print_usage): Show the option.\n\t(tag_counters): Sort key:value pairs of TOP N counter.", "tree": {"sha": "23ed79a55254e16cbabed1c70cf4dce1c861f831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23ed79a55254e16cbabed1c70cf4dce1c861f831"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7585e5ecb47761516b8f397002819f2c95b8c32e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7585e5ecb47761516b8f397002819f2c95b8c32e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7585e5ecb47761516b8f397002819f2c95b8c32e"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "0491ab17bc1f6e8df648a94e99a1a98aadd02c79", "filename": "gcc/doc/gcov-dump.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84/gcc%2Fdoc%2Fgcov-dump.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84/gcc%2Fdoc%2Fgcov-dump.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov-dump.texi?ref=a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84", "patch": "@@ -62,6 +62,7 @@ gcov-dump [@option{-v}|@option{--version}]\n      [@option{-l}|@option{--long}]\n      [@option{-p}|@option{--positions}]\n      [@option{-r}|@option{--raw}]\n+     [@option{-s}|@option{--stable}]\n      @var{gcovfiles}\n @c man end\n @end ignore\n@@ -85,6 +86,10 @@ Dump positions of records.\n @itemx --raw\n Print content records in raw format.\n \n+@item -s\n+@itemx --stable\n+Print content in stable format usable for comparison.\n+\n @item -v\n @itemx --version\n Display the @command{gcov-dump} version number (on the standard output),"}, {"sha": "85b1be8859e2b285785fd6197d0eaaab8c4f38d0", "filename": "gcc/gcov-dump.cc", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84/gcc%2Fgcov-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84/gcc%2Fgcov-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.cc?ref=a6b7fff06c5b27c4ffacf4c84ea1189254b9ad84", "patch": "@@ -28,6 +28,10 @@ along with Gcov; see the file COPYING3.  If not see\n #include \"gcov-io.h\"\n #include \"gcov-io.cc\"\n \n+#include <vector>\n+\n+using namespace std;\n+\n static void dump_gcov_file (const char *);\n static void print_prefix (const char *, unsigned, gcov_position_t);\n static void print_usage (void);\n@@ -50,14 +54,17 @@ typedef struct tag_format\n static int flag_dump_contents = 0;\n static int flag_dump_positions = 0;\n static int flag_dump_raw = 0;\n+static int flag_dump_stable = 0;\n \n static const struct option options[] =\n {\n   { \"help\",                 no_argument,       NULL, 'h' },\n   { \"version\",              no_argument,       NULL, 'v' },\n   { \"long\",                 no_argument,       NULL, 'l' },\n   { \"positions\",\t    no_argument,       NULL, 'o' },\n-  { 0, 0, 0, 0 }\n+  { \"raw\",\t\t    no_argument,       NULL, 'r' },\n+  { \"stable\",\t\t    no_argument,       NULL, 's' },\n+  {}\n };\n \n #define VALUE_PADDING_PREFIX \"              \"\n@@ -96,7 +103,7 @@ main (int argc ATTRIBUTE_UNUSED, char **argv)\n \n   diagnostic_initialize (global_dc, 0);\n \n-  while ((opt = getopt_long (argc, argv, \"hlprvw\", options, NULL)) != -1)\n+  while ((opt = getopt_long (argc, argv, \"hlprsvw\", options, NULL)) != -1)\n     {\n       switch (opt)\n \t{\n@@ -115,6 +122,9 @@ main (int argc ATTRIBUTE_UNUSED, char **argv)\n \tcase 'r':\n \t  flag_dump_raw = 1;\n \t  break;\n+\tcase 's':\n+\t  flag_dump_stable = 1;\n+\t  break;\n \tdefault:\n \t  fprintf (stderr, \"unknown flag `%c'\\n\", opt);\n \t}\n@@ -134,6 +144,8 @@ print_usage (void)\n   printf (\"  -l, --long           Dump record contents too\\n\");\n   printf (\"  -p, --positions      Dump record positions\\n\");\n   printf (\"  -r, --raw            Print content records in raw format\\n\");\n+  printf (\"  -s, --stable         Print content in stable \"\n+\t  \"format usable for comparison\\n\");\n   printf (\"  -v, --version        Print version number\\n\");\n   printf (\"\\nFor bug reporting instructions, please see:\\n%s.\\n\",\n \t   bug_report_url);\n@@ -439,16 +451,52 @@ tag_counters (const char *filename ATTRIBUTE_UNUSED,\n   int n_counts = GCOV_TAG_COUNTER_NUM (length);\n   bool has_zeros = n_counts < 0;\n   n_counts = abs (n_counts);\n+  unsigned counter_idx = GCOV_COUNTER_FOR_TAG (tag);\n \n   printf (\" %s %u counts%s\",\n-\t  counter_names[GCOV_COUNTER_FOR_TAG (tag)], n_counts,\n+\t  counter_names[counter_idx], n_counts,\n \t  has_zeros ? \" (all zero)\" : \"\");\n   if (flag_dump_contents)\n     {\n+      vector<gcov_type> counters;\n       for (int ix = 0; ix != n_counts; ix++)\n+\tcounters.push_back (has_zeros ? 0 : gcov_read_counter ());\n+\n+      /* Make stable sort for TOP N counters.  */\n+      if (flag_dump_stable)\n+\tif (counter_idx == GCOV_COUNTER_V_INDIR\n+\t    || counter_idx == GCOV_COUNTER_V_TOPN)\n+\t  {\n+\t    unsigned start = 0;\n+\t    while (start < counters.size ())\n+\t      {\n+\t\tunsigned n = counters[start + 1];\n+\n+\t\t/* Use bubble sort.  */\n+\t\tfor (unsigned i = 1; i <= n; ++i)\n+\t\t  for (unsigned j = i; j <= n; ++j)\n+\t\t    {\n+\t\t      gcov_type key1 = counters[start + 2 * i];\n+\t\t      gcov_type value1 = counters[start + 2 * i + 1];\n+\t\t      gcov_type key2 = counters[start + 2 * j];\n+\t\t      gcov_type value2 = counters[start + 2 * j + 1];\n+\n+\t\t      if (value1 < value2 || (value1 == value2 && key1 < key2))\n+\t\t\t{\n+\t\t\t  std::swap (counters[start + 2 * i],\n+\t\t\t\t     counters[start + 2 * j]);\n+\t\t\t  std::swap (counters[start + 2 * i + 1],\n+\t\t\t\t     counters[start + 2 * j + 1]);\n+\t\t\t}\n+\t\t    }\n+\t\tstart += 2 * (n + 1);\n+\t      }\n+\t    if (start != counters.size ())\n+\t      abort ();\n+\t  }\n+\n+      for (unsigned ix = 0; ix < counters.size (); ++ix)\n \t{\n-\t  gcov_type count;\n-\n \t  if (flag_dump_raw)\n \t    {\n \t      if (ix == 0)\n@@ -461,8 +509,7 @@ tag_counters (const char *filename ATTRIBUTE_UNUSED,\n \t      printf (VALUE_PADDING_PREFIX VALUE_PREFIX, ix);\n \t    }\n \n-\t  count = has_zeros ? 0 : gcov_read_counter ();\n-\t  printf (\"%\" PRId64 \" \", count);\n+\t  printf (\"%\" PRId64 \" \", counters[ix]);\n \t}\n     }\n }"}]}