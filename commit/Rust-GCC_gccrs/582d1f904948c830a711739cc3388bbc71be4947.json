{"sha": "582d1f904948c830a711739cc3388bbc71be4947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyZDFmOTA0OTQ4YzgzMGE3MTE3MzljYzMzODhiYmM3MWJlNDk0Nw==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2018-07-06T16:39:50Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2018-07-06T16:39:50Z"}, "message": "Update internal documentation to describe that DONE and FAIL\n\talso apply to define_split and define_peephole2.\n\n\t* doc/md.texi (define_split): Document DONE and FAIL.\n\t(define_peephole2): Ditto.\n\nFrom-SVN: r262479", "tree": {"sha": "3797b8fdb7a002bae3e68d3bb25915549efd9e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3797b8fdb7a002bae3e68d3bb25915549efd9e02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/582d1f904948c830a711739cc3388bbc71be4947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582d1f904948c830a711739cc3388bbc71be4947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582d1f904948c830a711739cc3388bbc71be4947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582d1f904948c830a711739cc3388bbc71be4947/comments", "author": null, "committer": null, "parents": [{"sha": "5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "5c096fa4dc3766649ba7058d4b9017676435ef58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d1f904948c830a711739cc3388bbc71be4947/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d1f904948c830a711739cc3388bbc71be4947/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=582d1f904948c830a711739cc3388bbc71be4947", "patch": "@@ -1,3 +1,8 @@\n+2018-07-06  Paul Koning  <ni1d@arrl.net>\n+\n+\t* doc/md.texi (define_split): Document DONE and FAIL.\n+\t(define_peephole2): Ditto.\n+\n 2018-07-05  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/86010"}, {"sha": "6d15d9931326a472b91aa08958c57834499e9184", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d1f904948c830a711739cc3388bbc71be4947/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d1f904948c830a711739cc3388bbc71be4947/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=582d1f904948c830a711739cc3388bbc71be4947", "patch": "@@ -8060,6 +8060,30 @@ those in @code{define_expand}, however, these statements must not\n generate any new pseudo-registers.  Once reload has completed, they also\n must not allocate any space in the stack frame.\n \n+There are two special macros defined for use in the preparation statements:\n+@code{DONE} and @code{FAIL}.  Use them with a following semicolon,\n+as a statement.\n+\n+@table @code\n+\n+@findex DONE\n+@item DONE\n+Use the @code{DONE} macro to end RTL generation for the splitter.  The\n+only RTL insns generated as replacement for the matched input insn will\n+be those already emitted by explicit calls to @code{emit_insn} within\n+the preparation statements; the replacement pattern is not used.\n+\n+@findex FAIL\n+@item FAIL\n+Make the @code{define_split} fail on this occasion.  When a @code{define_split}\n+fails, it means that the splitter was not truly available for the inputs\n+it was given, and the input insn will not be split.\n+@end table\n+\n+If the preparation falls through (invokes neither @code{DONE} nor\n+@code{FAIL}), then the @code{define_split} uses the replacement\n+template.\n+\n Patterns are matched against @var{insn-pattern} in two different\n circumstances.  If an insn needs to be split for delay slot scheduling\n or insn scheduling, the insn is already known to be valid, which means\n@@ -8615,6 +8639,33 @@ so here's a silly made-up example:\n   \"\")\n @end smallexample\n \n+There are two special macros defined for use in the preparation statements:\n+@code{DONE} and @code{FAIL}.  Use them with a following semicolon,\n+as a statement.\n+\n+@table @code\n+\n+@findex DONE\n+@item DONE\n+Use the @code{DONE} macro to end RTL generation for the peephole.  The\n+only RTL insns generated as replacement for the matched input insn will\n+be those already emitted by explicit calls to @code{emit_insn} within\n+the preparation statements; the replacement pattern is not used.\n+\n+@findex FAIL\n+@item FAIL\n+Make the @code{define_peephole2} fail on this occasion.  When a @code{define_peephole2}\n+fails, it means that the replacement was not truly available for the\n+particular inputs it was given.  In that case, GCC may still apply a\n+later @code{define_peephole2} that also matches the given insn pattern.\n+(Note that this is different from @code{define_split}, where @code{FAIL}\n+prevents the input insn from being split at all.)\n+@end table\n+\n+If the preparation falls through (invokes neither @code{DONE} nor\n+@code{FAIL}), then the @code{define_peephole2} uses the replacement\n+template.\n+\n @noindent\n If we had not added the @code{(match_dup 4)} in the middle of the input\n sequence, it might have been the case that the register we chose at the"}]}