{"sha": "b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRmYmFjYTdjYjVjNmZmNWZiNWUyNGU1NTRkNTEwMjU3Y2I0ODhlYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-05-22T06:46:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-22T06:46:20Z"}, "message": "combine.c (simplify_comparison): Update op1 after constant extension.\n\n        * combine.c (simplify_comparison): Update op1 after constant\n        extension.\n        * recog.c (const_int_operand): Accept only constants valid\n        for the given mode.\n        * genrecog.c: Update comments wrt const_int_operand.\n\nFrom-SVN: r42427", "tree": {"sha": "c78f15a05fa13284aee7f9acc312bbd22411818a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c78f15a05fa13284aee7f9acc312bbd22411818a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb/comments", "author": null, "committer": null, "parents": [{"sha": "47816305fecfece2a4ae647638622371e4933076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47816305fecfece2a4ae647638622371e4933076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47816305fecfece2a4ae647638622371e4933076"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "cd7336eafb17d3f1f0dd52e411bf9cfb5cee8bc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb", "patch": "@@ -1,5 +1,11 @@\n 2001-05-21  Richard Henderson  <rth@redhat.com>\n \n+\t* combine.c (simplify_comparison): Update op1 after constant\n+\textension.\n+\t* recog.c (const_int_operand): Accept only constants valid\n+\tfor the given mode.\n+\t* genrecog.c: Update comments wrt const_int_operand.\n+\n \t* emit-rtl.c (init_emit_once): Zero unused memory in a\n \tCONST_DOUBLE.\n "}, {"sha": "e3ad70a960410366f2573715a508d406b06d0c80", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb", "patch": "@@ -10025,6 +10025,7 @@ simplify_comparison (code, pop0, pop1)\n       /* Get the constant we are comparing against and turn off all bits\n \t not on in our mode.  */\n       const_op = trunc_int_for_mode (INTVAL (op1), mode);\n+      op1 = GEN_INT (const_op);\n \n       /* If we are comparing against a constant power of two and the value\n \t being compared can only have that single bit nonzero (e.g., it was"}, {"sha": "00f425bc82268411f5b27ed244fe2a21a55f7139", "filename": "gcc/genrecog.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb", "patch": "@@ -842,18 +842,16 @@ add_to_sequence (pattern, last, position, insn_type, top)\n \t    test->u.pred.name = pred_name;\n \t    test->u.pred.mode = mode;\n \n-\t    /* See if we know about this predicate and save its number.  If\n-\t       we do, and it only accepts one code, note that fact.  The\n-\t       predicate `const_int_operand' only tests for a CONST_INT, so\n-\t       if we do so we can avoid calling it at all.\n-\n-\t       Finally, if we know that the predicate does not allow\n-\t       CONST_INT, we know that the only way the predicate can match\n-\t       is if the modes match (here we use the kludge of relying on\n-\t       the fact that \"address_operand\" accepts CONST_INT; otherwise,\n-\t       it would have to be a special case), so we can test the mode\n-\t       (but we need not).  This fact should considerably simplify the\n-\t       generated code.  */\n+\t    /* See if we know about this predicate and save its number.\n+\t       If we do, and it only accepts one code, note that fact.\n+\n+\t       If we know that the predicate does not allow CONST_INT,\n+\t       we know that the only way the predicate can match is if\n+\t       the modes match (here we use the kludge of relying on the\n+\t       fact that \"address_operand\" accepts CONST_INT; otherwise,\n+\t       it would have to be a special case), so we can test the\n+\t       mode (but we need not).  This fact should considerably\n+\t       simplify the generated code.  */\n \n \t    for (i = 0; i < NUM_KNOWN_PREDS; i++)\n \t      if (! strcmp (preds[i].name, pred_name))"}, {"sha": "888a2f546ff07f59ce4db34f686f718daf602441", "filename": "gcc/recog.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=b4fbaca7cb5c6ff5fb5e24e554d510257cb488eb", "patch": "@@ -1145,9 +1145,16 @@ immediate_operand (op, mode)\n int\n const_int_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     enum machine_mode mode;\n {\n-  return GET_CODE (op) == CONST_INT;\n+  if (GET_CODE (op) != CONST_INT)\n+    return 0;\n+\n+  if (mode != VOIDmode\n+      && trunc_int_for_mode (INTVAL (op), mode) != INTVAL (op))\n+    return 0;\n+\n+  return 1;\n }\n \n /* Returns 1 if OP is an operand that is a constant integer or constant"}]}