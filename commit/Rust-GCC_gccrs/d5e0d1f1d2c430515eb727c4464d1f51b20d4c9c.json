{"sha": "d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVlMGQxZjFkMmM0MzA1MTVlYjcyN2M0NDY0ZDFmNTFiMjBkNGM5Yw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-29T10:57:44Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-29T13:49:19Z"}, "message": "aarch64: Reimplement vabal* intrinsics using builtins\n\nThis patch reimplements the vabal intrinsics with builtins.\nThe RTL pattern is cleaned up to emit the right .8b suffixes for the\ninputs (though .16b is also accepted)\nand iterate over the right modes. The pattern's only other use is\nthrough the sadv16qi expander, which is adjusted.\n\nI've verified that the codegen for sadv16qi is not worse off.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (sabal): Define\n\tbuiltin.\n\t(uabal): Likewise.\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur>abal<mode>_4):\n\tRename to...\n\t(aarch64_<sur>abal<mode>): ... This\n\t(<sur>sadv16qi): Adust use of the above.\n\t* config/aarch64/arm_neon.h (vabal_s8): Reimplement using\n\tbuiltin.\n\t(vabal_s16): Likewise.\n\t(vabal_s32): Likewise.\n\t(vabal_u8): Likewise.\n\t(vabal_u16): Likewise.\n\t(vabal_u32): Likewise.", "tree": {"sha": "5249a7c69ee0a545712d610909baa96ec783e873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5249a7c69ee0a545712d610909baa96ec783e873"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb995de62aa6484dba4f9807ee3c8d2959a40c46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb995de62aa6484dba4f9807ee3c8d2959a40c46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb995de62aa6484dba4f9807ee3c8d2959a40c46"}], "stats": {"total": 66, "additions": 21, "deletions": 45}, "files": [{"sha": "48936077bda032e434b20d661b817b122f9938eb", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c", "patch": "@@ -164,6 +164,10 @@\n   BUILTIN_VDQV_S (BINOP, sadalp, 0, NONE)\n   BUILTIN_VDQV_S (BINOPU, uadalp, 0, NONE)\n \n+  /* Implemented by aarch64_<sur>abal<mode>.  */\n+  BUILTIN_VD_BHSI (TERNOP, sabal, 0, NONE)\n+  BUILTIN_VD_BHSI (TERNOPU, uabal, 0, NONE)\n+\n   /* Implemented by aarch64_<sur><addsub>hn<mode>.  */\n   BUILTIN_VQN (BINOP, addhn, 0, NONE)\n   BUILTIN_VQN (BINOP, subhn, 0, NONE)"}, {"sha": "9390eb2da24ab4ec44c5c570ca8fdb7ef0fdaa0c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c", "patch": "@@ -828,14 +828,14 @@\n   [(set_attr \"type\" \"neon_abd<q>\")]\n )\n \n-(define_insn \"aarch64_<sur>abal<mode>_4\"\n-  [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n-\t(unspec:<VDBLW> [(match_operand:VDQV_S 1 \"register_operand\" \"w\")\n-\t\t\t  (match_operand:VDQV_S 2 \"register_operand\" \"w\")\n-\t\t\t (match_operand:<VDBLW> 3 \"register_operand\" \"0\")]\n+(define_insn \"aarch64_<sur>abal<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VWIDE> [(match_operand:VD_BHSI 2 \"register_operand\" \"w\")\n+\t\t\t  (match_operand:VD_BHSI 3 \"register_operand\" \"w\")\n+\t\t\t (match_operand:<VWIDE> 1 \"register_operand\" \"0\")]\n \tABAL))]\n   \"TARGET_SIMD\"\n-  \"<sur>abal\\t%0.<Vwtype>, %1.<Vhalftype>, %2.<Vhalftype>\"\n+  \"<sur>abal\\t%0.<Vwtype>, %2.<Vtype>, %3.<Vtype>\"\n   [(set_attr \"type\" \"neon_arith_acc<q>\")]\n )\n \n@@ -855,7 +855,7 @@\n ;; operand 3 before copying that into the result operand 0.\n ;; Perform that with a sequence of:\n ;; UABDL2\ttmp.8h, op1.16b, op2.16b\n-;; UABAL\ttmp.8h, op1.16b, op2.16b\n+;; UABAL\ttmp.8h, op1.8b, op2.8b\n ;; UADALP\top3.4s, tmp.8h\n ;; MOV\t\top0, op3 // should be eliminated in later passes.\n ;;\n@@ -888,8 +888,10 @@\n     rtx reduc = gen_reg_rtx (V8HImode);\n     emit_insn (gen_aarch64_<sur>abdl2v16qi_3 (reduc, operands[1],\n \t\t\t\t\t       operands[2]));\n-    emit_insn (gen_aarch64_<sur>abalv16qi_4 (reduc, operands[1],\n-\t\t\t\t\t      operands[2], reduc));\n+    emit_insn (gen_aarch64_<sur>abalv8qi (reduc, reduc,\n+\t\t\t\t\t  gen_lowpart (V8QImode, operands[1]),\n+\t\t\t\t\t  gen_lowpart (V8QImode,\n+\t\t\t\t\t\t       operands[2])));\n     emit_insn (gen_aarch64_<sur>adalpv8hi (operands[3], operands[3], reduc));\n     emit_move_insn (operands[0], operands[3]);\n     DONE;"}, {"sha": "8d5e0f409259cd17817dffaebee28ca9f62b1be9", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c", "patch": "@@ -6735,72 +6735,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_s8 (int16x8_t __a, int8x8_t __b, int8x8_t __c)\n {\n-  int16x8_t __result;\n-  __asm__ (\"sabal %0.8h,%2.8b,%3.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabalv8qi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_s16 (int32x4_t __a, int16x4_t __b, int16x4_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"sabal %0.4s,%2.4h,%3.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabalv4hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c)\n {\n-  int64x2_t __result;\n-  __asm__ (\"sabal %0.2d,%2.2s,%3.2s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabalv2si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_u8 (uint16x8_t __a, uint8x8_t __b, uint8x8_t __c)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"uabal %0.8h,%2.8b,%3.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabalv8qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_u16 (uint32x4_t __a, uint16x4_t __b, uint16x4_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"uabal %0.4s,%2.4h,%3.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabalv4hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_u32 (uint64x2_t __a, uint32x2_t __b, uint32x2_t __c)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"uabal %0.2d,%2.2s,%3.2s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabalv2si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int8x16_t"}]}