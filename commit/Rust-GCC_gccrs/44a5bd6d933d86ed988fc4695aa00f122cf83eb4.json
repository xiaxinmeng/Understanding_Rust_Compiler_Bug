{"sha": "44a5bd6d933d86ed988fc4695aa00f122cf83eb4", "node_id": "C_kwDOANBUbNoAKDQ0YTViZDZkOTMzZDg2ZWQ5ODhmYzQ2OTVhYTAwZjEyMmNmODNlYjQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-06-03T16:06:59Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-06-03T16:06:59Z"}, "message": "c++: cv-quals of dummy obj for non-dep memfn call [PR105637]\n\nIn non-dependent23.C below we expect the Base::foo calls to\nresolve to the second, third and fourth overloads respectively in light\nof the cv-qualifiers of 'this' in each case.  But ever since\nr12-6075-g2decd2cabe5a4f, the calls incorrectly resolve to the first\noverload at instantiation time.\n\nThis happens because the calls to Base::foo are all deemed\nnon-dependent (ever since r7-755-g23cb72663051cd made us ignore 'this'\ndependence when considering the dependence of a non-static memfn call),\nhence we end up checking the call ahead of time, using as the object\nargument a dummy object of type Base.  Since this object argument is\ncv-unqualified, the calls in turn resolve to the unqualified overload\nof baseDevice.  Before r12-6075 this incorrect result would just get\nsilently discarded and we'd end up redoing OR at instantiation time\nusing 'this' as the object argument.  But after r12-6075 we now reuse\nthis incorrect result at instantiation time.\n\nThis patch fixes this by making maybe_dummy_object respect the cv-quals\nof (the non-lambda) 'this' when returning a dummy object.  Thus, ahead\nof time OR using a dummy object will give us the right answer that's\nconsistent with the instantiation time answer.\n\nAn earlier version of this patch didn't handle 'this'-capturing lambdas\ncorrectly, which broke lambda-this22.C below.\n\n\tPR c++/105637\n\ngcc/cp/ChangeLog:\n\n\t* tree.cc (maybe_dummy_object): When returning a dummy\n\tobject, respect the cv-quals of 'this' if available.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/lambda/lambda-this22.C: New test.\n\t* g++.dg/template/non-dependent23.C: New test.", "tree": {"sha": "1f6aec81644279b919bf874b9a89b69775b3fe06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f6aec81644279b919bf874b9a89b69775b3fe06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44a5bd6d933d86ed988fc4695aa00f122cf83eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a5bd6d933d86ed988fc4695aa00f122cf83eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a5bd6d933d86ed988fc4695aa00f122cf83eb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a5bd6d933d86ed988fc4695aa00f122cf83eb4/comments", "author": null, "committer": null, "parents": [{"sha": "6a098f4e16351617ebbb9ad66fb802e8c4a57c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a098f4e16351617ebbb9ad66fb802e8c4a57c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a098f4e16351617ebbb9ad66fb802e8c4a57c77"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "c678e3b9c4c220a5542fc94ddc00807ffe19279b", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a5bd6d933d86ed988fc4695aa00f122cf83eb4/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a5bd6d933d86ed988fc4695aa00f122cf83eb4/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=44a5bd6d933d86ed988fc4695aa00f122cf83eb4", "patch": "@@ -4319,15 +4319,31 @@ maybe_dummy_object (tree type, tree* binfop)\n   if (binfop)\n     *binfop = binfo;\n \n-  if (current_class_ref\n-      /* current_class_ref might not correspond to current_class_type if\n-\t we're in tsubst_default_argument or a lambda-declarator; in either\n-\t case, we want to use current_class_ref if it matches CONTEXT.  */\n-      && (same_type_ignoring_top_level_qualifiers_p\n-\t  (TREE_TYPE (current_class_ref), context)))\n+  /* current_class_ref might not correspond to current_class_type if\n+     we're in tsubst_default_argument or a lambda-declarator; in either\n+     case, we want to use current_class_ref if it matches CONTEXT.  */\n+  tree ctype = current_class_ref ? TREE_TYPE (current_class_ref) : NULL_TREE;\n+  if (ctype\n+      && same_type_ignoring_top_level_qualifiers_p (ctype, context))\n     decl = current_class_ref;\n   else\n-    decl = build_dummy_object (context);\n+    {\n+      /* Return a dummy object whose cv-quals are consistent with (the\n+\t non-lambda) 'this' if available.  */\n+      if (ctype)\n+\t{\n+\t  int quals = TYPE_UNQUALIFIED;\n+\t  if (tree lambda = CLASSTYPE_LAMBDA_EXPR (ctype))\n+\t    {\n+\t      if (tree cap = lambda_expr_this_capture (lambda, false))\n+\t\tquals = cp_type_quals (TREE_TYPE (TREE_TYPE (cap)));\n+\t    }\n+\t  else\n+\t    quals = cp_type_quals (ctype);\n+\t  context = cp_build_qualified_type (context, quals);\n+\t}\n+      decl = build_dummy_object (context);\n+    }\n \n   return decl;\n }"}, {"sha": "8c6afe06cac2fb5776ecf88cabad257d04806b7c", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-this22.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a5bd6d933d86ed988fc4695aa00f122cf83eb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a5bd6d933d86ed988fc4695aa00f122cf83eb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this22.C?ref=44a5bd6d933d86ed988fc4695aa00f122cf83eb4", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/105637\n+// { dg-do compile { target c++11 } }\n+\n+struct Base {\n+  void foo();                // #1\n+  void foo() const = delete; // #2\n+};\n+\n+template<class T>\n+struct TopClass : T {\n+  void failsToCompile() {\n+    [this] { Base::foo(); }(); // should select #2, not #1\n+  }\n+\n+  void failsToCompile() const {\n+    [this] { Base::foo(); }(); // { dg-error \"deleted\" }\n+  }\n+};\n+\n+template struct TopClass<Base>;"}, {"sha": "885a641a6551a69fc32dde8ea843f1232daa76e0", "filename": "gcc/testsuite/g++.dg/template/non-dependent23.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a5bd6d933d86ed988fc4695aa00f122cf83eb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a5bd6d933d86ed988fc4695aa00f122cf83eb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent23.C?ref=44a5bd6d933d86ed988fc4695aa00f122cf83eb4", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/105637\n+\n+struct Base {\n+  void foo();                // #1\n+  void foo() const;          // #2\n+  void foo() volatile;       // #3\n+  void foo() const volatile; // #4\n+};\n+\n+template<class T>\n+struct TopClass : T {\n+  void failsToCompile() const {\n+    Base::foo(); // should select #2, not #1\n+  }\n+\n+  void failsToCompile() volatile {\n+    Base::foo();  // should select #3, not #1\n+  }\n+\n+  void failsToCompile() const volatile {\n+    Base::foo();  // should select #4, not #1\n+  }\n+};\n+\n+template struct TopClass<Base>;"}]}