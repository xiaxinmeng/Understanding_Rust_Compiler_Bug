{"sha": "b36bc89e32a52ac41b6b68d834c7692b890741e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM2YmM4OWUzMmE1MmFjNDFiNmI2OGQ4MzRjNzY5MmI4OTA3NDFlNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-06-25T20:46:45Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-06-25T20:46:45Z"}, "message": "PR tree-optimization/86204 -  wrong strlen result after prior strnlen\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/86204\n\t* tree-ssa-strlen.c (handle_builtin_strlen): Avoid storing\n\ta strnlen result if it's less than the length of the string.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/86204\n\t* gcc.dg/strlenopt-46.c: New test.\n\nFrom-SVN: r262114", "tree": {"sha": "5b89ff8ce0de4a470d9653841c70fa1d0d32d042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b89ff8ce0de4a470d9653841c70fa1d0d32d042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b36bc89e32a52ac41b6b68d834c7692b890741e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36bc89e32a52ac41b6b68d834c7692b890741e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b36bc89e32a52ac41b6b68d834c7692b890741e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36bc89e32a52ac41b6b68d834c7692b890741e6/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03cd7d3fa2d756cb4fb7d62d4aba277893932ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cd7d3fa2d756cb4fb7d62d4aba277893932ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03cd7d3fa2d756cb4fb7d62d4aba277893932ace"}], "stats": {"total": 176, "additions": 171, "deletions": 5}, "files": [{"sha": "dedbffd651fddb3188e9de2a49d8e9923fdd9a9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36bc89e32a52ac41b6b68d834c7692b890741e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36bc89e32a52ac41b6b68d834c7692b890741e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b36bc89e32a52ac41b6b68d834c7692b890741e6", "patch": "@@ -1,3 +1,9 @@\n+2018-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86204\n+\t* tree-ssa-strlen.c (handle_builtin_strlen): Avoid storing\n+\ta strnlen result if it's less than the length of the string.\n+\n 2018-06-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/85700"}, {"sha": "4a90a33986d40497aaeef14b2b22ad3e6a106fa0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36bc89e32a52ac41b6b68d834c7692b890741e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36bc89e32a52ac41b6b68d834c7692b890741e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b36bc89e32a52ac41b6b68d834c7692b890741e6", "patch": "@@ -1,3 +1,8 @@\n+2018-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86204\n+\t* gcc.dg/strlenopt-46.c: New test.\n+\n 2018-06-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/85700"}, {"sha": "dc6eef7ca53d5a57dfbc1852d938a7eb3e2eba14", "filename": "gcc/testsuite/gcc.dg/strlenopt-46.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36bc89e32a52ac41b6b68d834c7692b890741e6/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36bc89e32a52ac41b6b68d834c7692b890741e6/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-46.c?ref=b36bc89e32a52ac41b6b68d834c7692b890741e6", "patch": "@@ -0,0 +1,131 @@\n+/* PR tree-optimization/86204 - wrong strlen result after prior strnlen\n+   { dg-do run }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#include \"strlenopt.h\"\n+\n+#define NOIPA   __attribute__ ((noipa))\n+\n+char a[] = \"12345\";\n+\n+NOIPA void f0 (void)\n+{\n+  unsigned n0 = strnlen (a, 0);\n+  unsigned n1 = strlen (a);\n+\n+  if (n0 != 0 || n1 != 5)\n+    abort ();\n+}\n+\n+NOIPA void f1 (void)\n+{\n+  unsigned n0 = strnlen (a, 1);\n+  unsigned n1 = strlen (a);\n+\n+  if (n0 != 1 || n1 != 5)\n+    abort ();\n+}\n+\n+NOIPA void f2 (void)\n+{\n+  unsigned n0 = strnlen (a, 2);\n+  unsigned n1 = strlen (a);\n+\n+  if (n0 != 2 || n1 != 5)\n+    abort ();\n+}\n+\n+NOIPA void f3 (void)\n+{\n+  unsigned n0 = strnlen (a, 3);\n+  unsigned n1 = strlen (a);\n+\n+  if (n0 != 3 || n1 != 5)\n+    abort ();\n+}\n+\n+NOIPA void f4 (void)\n+{\n+  unsigned n0 = strnlen (a, 4);\n+  unsigned n1 = strlen (a);\n+\n+  if (n0 != 4 || n1 != 5)\n+    abort ();\n+}\n+\n+NOIPA void f5 (void)\n+{\n+  unsigned n0 = strnlen (a, 5);\n+  unsigned n1 = strlen (a);\n+\n+  if (n0 != 5 || n1 != 5)\n+    abort ();\n+}\n+\n+NOIPA void f6 (void)\n+{\n+  unsigned n0 = strnlen (a, 6);\n+  unsigned n1 = strlen (a);\n+\n+  if (n0 != 5 || n1 != 5)\n+    abort ();\n+}\n+\n+NOIPA void fx (unsigned n)\n+{\n+  unsigned n0 = strnlen (a, n);\n+  unsigned n1 = strlen (a);\n+\n+  unsigned min = n < 5 ? n : 5;\n+  if (n0 != min || n1 != 5)\n+    abort ();\n+}\n+\n+NOIPA void g2 (void)\n+{\n+  strcpy (a, \"123\");\n+  unsigned n0 = strnlen (a, 2);\n+  unsigned n1 = strlen (a);\n+\n+  if (n0 != 2 || n1 != 3)\n+    abort ();\n+}\n+\n+NOIPA void g7 (void)\n+{\n+  strcpy (a, \"123\");\n+  unsigned n0 = strnlen (a, 7);\n+  unsigned n1 = strlen (a);\n+\n+  if (n0 != 3 || n1 != 3)\n+    abort ();\n+}\n+\n+NOIPA void gx (unsigned n)\n+{\n+  strcpy (a, \"123\");\n+  unsigned n0 = strnlen (a, n);\n+  unsigned n1 = strlen (a);\n+\n+  unsigned min = n < 3 ? n : 3;\n+  if (n0 != min || n1 != 3)\n+    abort ();\n+}\n+\n+int main (void)\n+{\n+  f0 ();\n+  f1 ();\n+  f2 ();\n+  f3 ();\n+  f4 ();\n+  f5 ();\n+  f6 ();\n+  fx (2);\n+  fx (7);\n+\n+  g2 ();\n+  g7 ();\n+  gx (2);\n+  gx (7);\n+}"}, {"sha": "5807c79f205ca8da79ef33941300febb64727c3c", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36bc89e32a52ac41b6b68d834c7692b890741e6/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36bc89e32a52ac41b6b68d834c7692b890741e6/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=b36bc89e32a52ac41b6b68d834c7692b890741e6", "patch": "@@ -1270,8 +1270,20 @@ handle_builtin_strlen (gimple_stmt_iterator *gsi)\n \t  rhs = unshare_expr (rhs);\n \t  if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))\n \t    rhs = fold_convert_loc (loc, TREE_TYPE (lhs), rhs);\n+\n+\t  /* Set for strnlen() calls with a non-constant bound.  */\n+\t  bool noncst_bound = false;\n \t  if (bound)\n-\t    rhs = fold_build2_loc (loc, MIN_EXPR, TREE_TYPE (rhs), rhs, bound);\n+\t    {\n+\t      tree new_rhs\n+\t\t= fold_build2_loc (loc, MIN_EXPR, TREE_TYPE (rhs), rhs, bound);\n+\n+\t      noncst_bound = (TREE_CODE (new_rhs) != INTEGER_CST\n+\t\t\t      || tree_int_cst_lt (new_rhs, rhs));\n+\n+\t      rhs = new_rhs;\n+\t    }\n+\n \t  if (!update_call_from_tree (gsi, rhs))\n \t    gimplify_and_update_call_from_tree (gsi, rhs);\n \t  stmt = gsi_stmt (*gsi);\n@@ -1281,6 +1293,12 @@ handle_builtin_strlen (gimple_stmt_iterator *gsi)\n \t      fprintf (dump_file, \"into: \");\n \t      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n \t    }\n+\n+\t  /* Avoid storing the length for calls to strnlen() with\n+\t     a non-constant bound.  */\n+\t  if (noncst_bound)\n+\t    return;\n+\n \t  if (si != NULL\n \t      && TREE_CODE (si->nonzero_chars) != SSA_NAME\n \t      && TREE_CODE (si->nonzero_chars) != INTEGER_CST\n@@ -1299,6 +1317,7 @@ handle_builtin_strlen (gimple_stmt_iterator *gsi)\n     }\n   if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n     return;\n+\n   if (idx == 0)\n     idx = new_stridx (src);\n   else\n@@ -1333,9 +1352,14 @@ handle_builtin_strlen (gimple_stmt_iterator *gsi)\n     }\n   if (idx)\n     {\n-      strinfo *si = new_strinfo (src, idx, lhs, true);\n-      set_strinfo (idx, si);\n-      find_equal_ptrs (src, idx);\n+      if (!bound)\n+\t{\n+\t  /* Only store the new length information for calls to strlen(),\n+\t     not for those to strnlen().  */\n+\t  strinfo *si = new_strinfo (src, idx, lhs, true);\n+\t  set_strinfo (idx, si);\n+\t  find_equal_ptrs (src, idx);\n+\t}\n \n       /* For SRC that is an array of N elements, set LHS's range\n \t to [0, min (N, BOUND)].  A constant return value means\n@@ -1362,7 +1386,7 @@ handle_builtin_strlen (gimple_stmt_iterator *gsi)\n \t      }\n \t  }\n \n-      if (strlen_to_stridx)\n+      if (strlen_to_stridx && !bound)\n \tstrlen_to_stridx->put (lhs, stridx_strlenloc (idx, loc));\n     }\n }"}]}