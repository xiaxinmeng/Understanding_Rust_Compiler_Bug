{"sha": "616409167414b81e98e6a6da5587dfaba5d01ba2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE2NDA5MTY3NDE0YjgxZTk4ZTZhNmRhNTU4N2RmYWJhNWQwMWJhMg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2014-02-15T10:49:55Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2014-02-15T10:49:55Z"}, "message": "re PR target/58675 (ICE in rs6000_secondary_reload_inner:15460, type = store)\n\n\tPR target/58675\n\tPR target/57935\n\t* config/rs6000/rs6000.c (rs6000_secondary_reload_inner): Use\n\tfind_replacement on parts of insn rtl that might be reloaded.\n\nFrom-SVN: r207798", "tree": {"sha": "aae9634a2cc62cf557ef1eb389738a8da5b8f265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aae9634a2cc62cf557ef1eb389738a8da5b8f265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/616409167414b81e98e6a6da5587dfaba5d01ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616409167414b81e98e6a6da5587dfaba5d01ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616409167414b81e98e6a6da5587dfaba5d01ba2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616409167414b81e98e6a6da5587dfaba5d01ba2/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2b33cc36b5a722130092adeb0b7225adcf35133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b33cc36b5a722130092adeb0b7225adcf35133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2b33cc36b5a722130092adeb0b7225adcf35133"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "bdb4191b81e0d4921197d7644bf8b8bd6a97ff25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616409167414b81e98e6a6da5587dfaba5d01ba2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616409167414b81e98e6a6da5587dfaba5d01ba2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=616409167414b81e98e6a6da5587dfaba5d01ba2", "patch": "@@ -1,3 +1,10 @@\n+2014-02-15  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/58675\n+\tPR target/57935\n+\t* config/rs6000/rs6000.c (rs6000_secondary_reload_inner): Use\n+\tfind_replacement on parts of insn rtl that might be reloaded.\n+\n 2014-02-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60183"}, {"sha": "6872e6c53912fc799a7baacc805dca966b215750", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616409167414b81e98e6a6da5587dfaba5d01ba2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616409167414b81e98e6a6da5587dfaba5d01ba2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=616409167414b81e98e6a6da5587dfaba5d01ba2", "patch": "@@ -16170,7 +16170,7 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n     rs6000_secondary_reload_fail (__LINE__, reg, mem, scratch, store_p);\n \n   rclass = REGNO_REG_CLASS (regno);\n-  addr = XEXP (mem, 0);\n+  addr = find_replacement (&XEXP (mem, 0));\n \n   switch (rclass)\n     {\n@@ -16181,26 +16181,27 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n       if (GET_CODE (addr) == AND)\n \t{\n \t  and_op2 = XEXP (addr, 1);\n-\t  addr = XEXP (addr, 0);\n+\t  addr = find_replacement (&XEXP (addr, 0));\n \t}\n \n       if (GET_CODE (addr) == PRE_MODIFY)\n \t{\n-\t  scratch_or_premodify = XEXP (addr, 0);\n+\t  scratch_or_premodify = find_replacement (&XEXP (addr, 0));\n \t  if (!REG_P (scratch_or_premodify))\n \t    rs6000_secondary_reload_fail (__LINE__, reg, mem, scratch, store_p);\n \n-\t  if (GET_CODE (XEXP (addr, 1)) != PLUS)\n+\t  addr = find_replacement (&XEXP (addr, 1));\n+\t  if (GET_CODE (addr) != PLUS)\n \t    rs6000_secondary_reload_fail (__LINE__, reg, mem, scratch, store_p);\n-\n-\t  addr = XEXP (addr, 1);\n \t}\n \n       if (GET_CODE (addr) == PLUS\n \t  && (and_op2 != NULL_RTX\n \t      || !rs6000_legitimate_offset_address_p (PTImode, addr,\n \t\t\t\t\t\t      false, true)))\n \t{\n+\t  /* find_replacement already recurses into both operands of\n+\t     PLUS so we don't need to call it here.  */\n \t  addr_op1 = XEXP (addr, 0);\n \t  addr_op2 = XEXP (addr, 1);\n \t  if (!legitimate_indirect_address_p (addr_op1, false))\n@@ -16276,7 +16277,7 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n \t      || !VECTOR_MEM_ALTIVEC_P (mode)))\n \t{\n \t  and_op2 = XEXP (addr, 1);\n-\t  addr = XEXP (addr, 0);\n+\t  addr = find_replacement (&XEXP (addr, 0));\n \t}\n \n       /* If we aren't using a VSX load, save the PRE_MODIFY register and use it\n@@ -16288,14 +16289,13 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n \t      || and_op2 != NULL_RTX\n \t      || !legitimate_indexed_address_p (XEXP (addr, 1), false)))\n \t{\n-\t  scratch_or_premodify = XEXP (addr, 0);\n+\t  scratch_or_premodify = find_replacement (&XEXP (addr, 0));\n \t  if (!legitimate_indirect_address_p (scratch_or_premodify, false))\n \t    rs6000_secondary_reload_fail (__LINE__, reg, mem, scratch, store_p);\n \n-\t  if (GET_CODE (XEXP (addr, 1)) != PLUS)\n+\t  addr = find_replacement (&XEXP (addr, 1));\n+\t  if (GET_CODE (addr) != PLUS)\n \t    rs6000_secondary_reload_fail (__LINE__, reg, mem, scratch, store_p);\n-\n-\t  addr = XEXP (addr, 1);\n \t}\n \n       if (legitimate_indirect_address_p (addr, false)\t/* reg */"}]}