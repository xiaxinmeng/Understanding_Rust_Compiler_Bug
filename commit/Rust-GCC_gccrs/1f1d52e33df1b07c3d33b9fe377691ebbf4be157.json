{"sha": "1f1d52e33df1b07c3d33b9fe377691ebbf4be157", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxZDUyZTMzZGYxYjA3YzNkMzNiOWZlMzc3NjkxZWJiZjRiZTE1Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-16T10:05:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-16T10:05:16Z"}, "message": "i386.md (*movqi_internal): Remove static from buf variable.\n\n\t* config/i386/i386.md (*movqi_internal): Remove static from\n\tbuf variable.  Use output_asm_insn (buf, operands); return \"\";\n\tinstead of return buf;.\n\t* config/i386/sse.md (<sse>_andnot<mode>3<mask_name>,\n\t*<code><mode>3<mask_name>, *andnot<mode>3, *andnottf3, *<code><mode>3,\n\t*<code>tf3, <mask_codefor><code><mode>3<mask_name>): Likewise.\n\nFrom-SVN: r268956", "tree": {"sha": "45257b72023933ca8a7675bbfee3a591c9d125f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45257b72023933ca8a7675bbfee3a591c9d125f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f1d52e33df1b07c3d33b9fe377691ebbf4be157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1d52e33df1b07c3d33b9fe377691ebbf4be157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1d52e33df1b07c3d33b9fe377691ebbf4be157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1d52e33df1b07c3d33b9fe377691ebbf4be157/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc50c4998fe8a3dd0f6ff3a0e22e5f0a3ebfd51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc50c4998fe8a3dd0f6ff3a0e22e5f0a3ebfd51c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc50c4998fe8a3dd0f6ff3a0e22e5f0a3ebfd51c"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "a63f2abba13f8fabb2ae6c9a3ece98602517f142", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d52e33df1b07c3d33b9fe377691ebbf4be157/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d52e33df1b07c3d33b9fe377691ebbf4be157/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f1d52e33df1b07c3d33b9fe377691ebbf4be157", "patch": "@@ -1,3 +1,12 @@\n+2019-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.md (*movqi_internal): Remove static from\n+\tbuf variable.  Use output_asm_insn (buf, operands); return \"\";\n+\tinstead of return buf;.\n+\t* config/i386/sse.md (<sse>_andnot<mode>3<mask_name>,\n+\t*<code><mode>3<mask_name>, *andnot<mode>3, *andnottf3, *<code><mode>3,\n+\t*<code>tf3, <mask_codefor><code><mode>3<mask_name>): Likewise.\n+\n 2019-02-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/linux.h (ASAN_CC1_SPEC): Define."}, {"sha": "b1ae88c400fc20faa5d109a557dcf4fbab40adbf", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d52e33df1b07c3d33b9fe377691ebbf4be157/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d52e33df1b07c3d33b9fe377691ebbf4be157/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1f1d52e33df1b07c3d33b9fe377691ebbf4be157", "patch": "@@ -2531,7 +2531,7 @@\n \t\t\t\"Q ,R,r,n,m,q,rn, m,qn,r,k,k,k,m,C,BC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n-  static char buf[128];\n+  char buf[128];\n   const char *ops;\n   const char *suffix;\n \n@@ -2564,7 +2564,8 @@\n       suffix = (get_attr_mode (insn) == MODE_HI) ? \"w\" : \"b\";\n \n       snprintf (buf, sizeof (buf), ops, suffix);\n-      return buf;\n+      output_asm_insn (buf, operands);\n+      return \"\";\n \n     case TYPE_MSKLOG:\n       if (operands[1] == const0_rtx)"}, {"sha": "8281fe2d3986ae9899dd2df5470f2c80a9050743", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d52e33df1b07c3d33b9fe377691ebbf4be157/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d52e33df1b07c3d33b9fe377691ebbf4be157/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1f1d52e33df1b07c3d33b9fe377691ebbf4be157", "patch": "@@ -3198,7 +3198,7 @@\n \t  (match_operand:VF_128_256 2 \"vector_operand\" \"xBm,xm,vm,vm\")))]\n   \"TARGET_SSE && <mask_avx512vl_condition>\"\n {\n-  static char buf[128];\n+  char buf[128];\n   const char *ops;\n   const char *suffix;\n \n@@ -3233,7 +3233,8 @@\n     }\n \n   snprintf (buf, sizeof (buf), ops, suffix);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"isa\" \"noavx,avx,avx512dq,avx512f\")\n    (set_attr \"type\" \"sselog\")\n@@ -3264,7 +3265,7 @@\n \t  (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512F\"\n {\n-  static char buf[128];\n+  char buf[128];\n   const char *ops;\n   const char *suffix;\n \n@@ -3281,7 +3282,8 @@\n   snprintf (buf, sizeof (buf),\n \t    \"v%sandn%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\",\n \t    ops, suffix);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n@@ -3314,7 +3316,7 @@\n   \"TARGET_SSE && <mask_avx512vl_condition>\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n-  static char buf[128];\n+  char buf[128];\n   const char *ops;\n   const char *suffix;\n \n@@ -3349,7 +3351,8 @@\n     }\n \n   snprintf (buf, sizeof (buf), ops, suffix);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"isa\" \"noavx,avx,avx512dq,avx512f\")\n    (set_attr \"type\" \"sselog\")\n@@ -3378,7 +3381,7 @@\n \t  (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n-  static char buf[128];\n+  char buf[128];\n   const char *ops;\n   const char *suffix;\n \n@@ -3395,7 +3398,8 @@\n   snprintf (buf, sizeof (buf),\n \t   \"v%s<logic>%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\",\n \t   ops, suffix);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n@@ -3449,7 +3453,7 @@\n \t    (match_operand:MODEF 2 \"register_operand\" \"x,x,v,v\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n {\n-  static char buf[128];\n+  char buf[128];\n   const char *ops;\n   const char *suffix\n     = (get_attr_mode (insn) == MODE_V4SF) ? \"ps\" : \"<ssevecmodesuffix>\";\n@@ -3485,7 +3489,8 @@\n     }\n \n   snprintf (buf, sizeof (buf), ops, suffix);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"isa\" \"noavx,avx,avx512vl,avx512f\")\n    (set_attr \"type\" \"sselog\")\n@@ -3516,7 +3521,7 @@\n \t  (match_operand:TF 2 \"vector_operand\" \"xBm,xm,vm,v\")))]\n   \"TARGET_SSE\"\n {\n-  static char buf[128];\n+  char buf[128];\n   const char *ops;\n   const char *tmp\n     = (which_alternative >= 2 ? \"pandnq\"\n@@ -3539,7 +3544,8 @@\n     }\n \n   snprintf (buf, sizeof (buf), ops, tmp);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"isa\" \"noavx,avx,avx512vl,avx512f\")\n    (set_attr \"type\" \"sselog\")\n@@ -3572,7 +3578,7 @@\n \t  (match_operand:MODEF 2 \"register_operand\" \"x,x,v,v\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n {\n-  static char buf[128];\n+  char buf[128];\n   const char *ops;\n   const char *suffix\n     = (get_attr_mode (insn) == MODE_V4SF) ? \"ps\" : \"<ssevecmodesuffix>\";\n@@ -3607,7 +3613,8 @@\n     }\n \n   snprintf (buf, sizeof (buf), ops, suffix);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"isa\" \"noavx,avx,avx512vl,avx512f\")\n    (set_attr \"type\" \"sselog\")\n@@ -3646,7 +3653,7 @@\n \t  (match_operand:TF 2 \"vector_operand\" \"xBm,xm,vm,v\")))]\n   \"TARGET_SSE && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n-  static char buf[128];\n+  char buf[128];\n   const char *ops;\n   const char *tmp\n     = (which_alternative >= 2 ? \"p<logic>q\"\n@@ -3669,7 +3676,8 @@\n     }\n \n   snprintf (buf, sizeof (buf), ops, tmp);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"isa\" \"noavx,avx,avx512vl,avx512f\")\n    (set_attr \"type\" \"sselog\")\n@@ -12066,7 +12074,7 @@\n \t  (match_operand:VI 2 \"vector_operand\" \"xBm,xm,vm\")))]\n   \"TARGET_SSE\"\n {\n-  static char buf[64];\n+  char buf[64];\n   const char *ops;\n   const char *tmp;\n   const char *ssesuffix;\n@@ -12136,7 +12144,8 @@\n     }\n \n   snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"isa\" \"noavx,avx,avx\")\n    (set_attr \"type\" \"sselog\")\n@@ -12211,7 +12220,7 @@\n   \"TARGET_SSE && <mask_mode512bit_condition>\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n-  static char buf[64];\n+  char buf[64];\n   const char *ops;\n   const char *tmp;\n   const char *ssesuffix;\n@@ -12276,7 +12285,8 @@\n     }\n \n   snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"isa\" \"noavx,avx,avx\")\n    (set_attr \"type\" \"sselog\")\n@@ -12311,7 +12321,7 @@\n \t  (match_operand:VI12_AVX_AVX512F 2 \"vector_operand\" \"xBm,xm,vm\")))]\n   \"TARGET_SSE && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n-  static char buf[64];\n+  char buf[64];\n   const char *ops;\n   const char *tmp;\n   const char *ssesuffix;\n@@ -12371,7 +12381,8 @@\n     }\n \n   snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n-  return buf;\n+  output_asm_insn (buf, operands);\n+  return \"\";\n }\n   [(set_attr \"isa\" \"noavx,avx,avx\")\n    (set_attr \"type\" \"sselog\")"}]}