{"sha": "69ca5f3a988266da8905aef9cf22aa02807e0471", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjljYTVmM2E5ODgyNjZkYTg5MDVhZWY5Y2YyMmFhMDI4MDdlMDQ3MQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-08-07T01:31:38Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-09-09T16:55:22Z"}, "message": "bb-reorder: Remove a misfiring micro-optimization (PR96475)\n\nWhen the compgotos pass copies the tail of blocks ending in an indirect\njump, there is a micro-optimization to not copy the last one, since the\noriginal block will then just be deleted.  This does not work properly\nif cleanup_cfg does not merge all pairs of blocks we expect it to.  It\nalso does not work if that last block can be merged into multiple\npredecessors.\n\n2020-09-09  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\tPR rtl-optimization/96475\n\t* bb-reorder.c (maybe_duplicate_computed_goto): Remove single_pred_p\n\tmicro-optimization.", "tree": {"sha": "661a3de4c286667c65fa793edf8a63e48399540b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/661a3de4c286667c65fa793edf8a63e48399540b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69ca5f3a988266da8905aef9cf22aa02807e0471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ca5f3a988266da8905aef9cf22aa02807e0471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ca5f3a988266da8905aef9cf22aa02807e0471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ca5f3a988266da8905aef9cf22aa02807e0471/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad2a37157d3476dffb3baf93ca5001c9f6c44bda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2a37157d3476dffb3baf93ca5001c9f6c44bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad2a37157d3476dffb3baf93ca5001c9f6c44bda"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "76e56b55a622c321162c91b61aba270b3e76b90d", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ca5f3a988266da8905aef9cf22aa02807e0471/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ca5f3a988266da8905aef9cf22aa02807e0471/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=69ca5f3a988266da8905aef9cf22aa02807e0471", "patch": "@@ -2680,9 +2680,6 @@ make_pass_reorder_blocks (gcc::context *ctxt)\n static bool\n maybe_duplicate_computed_goto (basic_block bb, int max_size)\n {\n-  if (single_pred_p (bb))\n-    return false;\n-\n   /* Make sure that the block is small enough.  */\n   rtx_insn *insn;\n   FOR_BB_INSNS (bb, insn)\n@@ -2700,10 +2697,9 @@ maybe_duplicate_computed_goto (basic_block bb, int max_size)\n     {\n       basic_block pred = e->src;\n \n-      /* Do not duplicate BB into PRED if that is the last predecessor, or if\n-\t we cannot merge a copy of BB with PRED.  */\n-      if (single_pred_p (bb)\n-\t  || !single_succ_p (pred)\n+      /* Do not duplicate BB into PRED if we cannot merge a copy of BB\n+\t with PRED.  */\n+      if (!single_succ_p (pred)\n \t  || e->flags & EDGE_COMPLEX\n \t  || pred->index < NUM_FIXED_BLOCKS\n \t  || (JUMP_P (BB_END (pred)) && !simplejump_p (BB_END (pred)))"}]}