{"sha": "ddc923b52d28df9ed6e5d50138593a31da3e519a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjOTIzYjUyZDI4ZGY5ZWQ2ZTVkNTAxMzg1OTNhMzFkYTNlNTE5YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-12-03T12:11:36Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-12-03T12:11:36Z"}, "message": "re PR middle-end/56344 (ICE for program with very large structs returned by value)\n\n\tPR middle-end/56344\n\t* calls.c (expand_call): Disallow passing huge arguments\n\tby value.\n\nFrom-SVN: r205628", "tree": {"sha": "b8d4def2131b95da10e3344eaeb8be439020791c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8d4def2131b95da10e3344eaeb8be439020791c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddc923b52d28df9ed6e5d50138593a31da3e519a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc923b52d28df9ed6e5d50138593a31da3e519a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc923b52d28df9ed6e5d50138593a31da3e519a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc923b52d28df9ed6e5d50138593a31da3e519a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da0fc4547a3377430cbc522c4676cd1f707f32d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0fc4547a3377430cbc522c4676cd1f707f32d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0fc4547a3377430cbc522c4676cd1f707f32d2"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "944e28cbbc4fb5d34c522a075543184474bb8a92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc923b52d28df9ed6e5d50138593a31da3e519a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc923b52d28df9ed6e5d50138593a31da3e519a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddc923b52d28df9ed6e5d50138593a31da3e519a", "patch": "@@ -1,3 +1,9 @@\n+2013-12-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/56344\n+\t* calls.c (expand_call): Disallow passing huge arguments\n+\tby value.\n+\n 2013-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/59362"}, {"sha": "3963bc2975475941ea90079e59bfdded0bf71fec", "filename": "gcc/calls.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc923b52d28df9ed6e5d50138593a31da3e519a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc923b52d28df9ed6e5d50138593a31da3e519a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ddc923b52d28df9ed6e5d50138593a31da3e519a", "patch": "@@ -3045,6 +3045,15 @@ expand_call (tree exp, rtx target, int ignore)\n \t    {\n \t      rtx before_arg = get_last_insn ();\n \n+\t      /* We don't allow passing huge (> 2^30 B) arguments\n+\t         by value.  It would cause an overflow later on.  */\n+\t      if (adjusted_args_size.constant\n+\t\t  >= (1 << (HOST_BITS_PER_INT - 2)))\n+\t        {\n+\t          sorry (\"passing too large argument on stack\");\n+\t\t  continue;\n+\t\t}\n+\n \t      if (store_one_arg (&args[i], argblock, flags,\n \t\t\t\t adjusted_args_size.var != 0,\n \t\t\t\t reg_parm_stack_space)"}]}