{"sha": "fdf064f28d11202cc70d8ae65fccf140fef9c46b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmMDY0ZjI4ZDExMjAyY2M3MGQ4YWU2NWZjY2YxNDBmZWY5YzQ2Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-01-31T20:09:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-01-31T20:09:22Z"}, "message": "* doc/invoke.texi (SPARC options): Restructure and update.\n\nFrom-SVN: r77048", "tree": {"sha": "b5cc8a6f1d8f0f96ea92d7c2dcdeb83d684ef27d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5cc8a6f1d8f0f96ea92d7c2dcdeb83d684ef27d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdf064f28d11202cc70d8ae65fccf140fef9c46b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf064f28d11202cc70d8ae65fccf140fef9c46b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf064f28d11202cc70d8ae65fccf140fef9c46b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf064f28d11202cc70d8ae65fccf140fef9c46b/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7"}], "stats": {"total": 100, "additions": 53, "deletions": 47}, "files": [{"sha": "82581e742ddf04b48316afbc15b8e7fe6de67296", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf064f28d11202cc70d8ae65fccf140fef9c46b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf064f28d11202cc70d8ae65fccf140fef9c46b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdf064f28d11202cc70d8ae65fccf140fef9c46b", "patch": "@@ -1,3 +1,7 @@\n+2004-01-31  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* doc/invoke.texi (SPARC options): Restructure and update.\n+\n 2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* system.h (PROMOTE_FUNCTION_ARGS, STRUCT_VALUE_INCOMING, and"}, {"sha": "0f6477d515e4ff26d3e159d89437c27fdcbc3b76", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 49, "deletions": 47, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf064f28d11202cc70d8ae65fccf140fef9c46b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf064f28d11202cc70d8ae65fccf140fef9c46b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fdf064f28d11202cc70d8ae65fccf140fef9c46b", "patch": "@@ -357,15 +357,17 @@ in the following sections.\n @gccoptlist{-mcpu=@var{cpu-type} @gol\n -mtune=@var{cpu-type} @gol\n -mcmodel=@var{code-model} @gol\n--m32  -m64 @gol\n--mapp-regs  -mbroken-saverestore  -mcypress @gol\n--mfaster-structs  -mflat @gol\n--mfpu  -mhard-float  -mhard-quad-float @gol\n--mimpure-text  -mlittle-endian  -mlive-g0  -mno-app-regs @gol\n--mno-faster-structs  -mno-flat  -mno-fpu @gol\n--mno-impure-text  -mno-stack-bias  -mno-unaligned-doubles @gol\n--msoft-float  -msoft-quad-float  -msparclite  -mstack-bias @gol\n--msupersparc  -munaligned-doubles  -mv8}\n+-m32  -m64  -mapp-regs  -mno-app-regs @gol\n+-mfaster-structs  -mno-faster-structs @gol\n+-mflat  -mno-flat  -mfpu  -mno-fpu @gol\n+-mhard-float  -msoft-float @gol\n+-mhard-quad-float  -msoft-quad-float @gol\n+-mimpure-text  -mno-impure-text  -mlittle-endian @gol\n+-mstack-bias  -mno-stack-bias @gol\n+-munaligned-doubles  -mno-unaligned-doubles @gol\n+-mv8plus  -mno-v8plus  -mvis  -mno-vis @gol\n+-mcypress  -mf930  -mf934 @gol\n+-msparclite  -msupersparc  -mv8}\n \n @emph{ARM Options}\n @gccoptlist{-mapcs-frame  -mno-apcs-frame @gol\n@@ -6152,7 +6154,7 @@ Output code for g-format floating point numbers instead of d-format.\n @subsection SPARC Options\n @cindex SPARC options\n \n-These @samp{-m} switches are supported on the SPARC:\n+These @samp{-m} options are supported on the SPARC:\n \n @table @gcctabopt\n @item -mno-app-regs\n@@ -6203,7 +6205,7 @@ Generate output containing library calls for quad-word (long double)\n floating point instructions.  The functions called are those specified\n in the SPARC ABI@.  This is the default.\n \n-As of this writing, there are no sparc implementations that have hardware\n+As of this writing, there are no SPARC implementations that have hardware\n support for the quad-word floating point instructions.  They all invoke\n a trap handler for one of these instructions, and then the trap handler\n emulates the effect of the instruction.  Because of the trap handler overhead,\n@@ -6273,32 +6275,44 @@ This option is only available on SunOS and Solaris.\n These two options select variations on the SPARC architecture.\n \n By default (unless specifically configured for the Fujitsu SPARClite),\n-GCC generates code for the v7 variant of the SPARC architecture.\n+GCC generates code for the V7 variant of the SPARC architecture.\n \n-@option{-mv8} will give you SPARC v8 code.  The only difference from v7\n+@option{-mv8} will give you SPARC-V8 code.  The only difference from V7\n code is that the compiler emits the integer multiply and integer\n-divide instructions which exist in SPARC v8 but not in SPARC v7.\n+divide instructions which exist in SPARC-V8 but not in SPARC-V7.\n \n @option{-msparclite} will give you SPARClite code.  This adds the integer\n multiply, integer divide step and scan (@code{ffs}) instructions which\n-exist in SPARClite but not in SPARC v7.\n+exist in SPARClite but not in SPARC-V7.\n \n These options are deprecated and will be deleted in a future GCC release.\n They have been replaced with @option{-mcpu=xxx}.\n \n @item -mcypress\n @itemx -msupersparc\n+@itemx -mf930\n+@itemx -mf934\n @opindex mcypress\n @opindex msupersparc\n-These two options select the processor for which the code is optimized.\n+@opindex -mf930\n+@opindex -mf934\n+These four options select the processor for which the code is optimized.\n \n With @option{-mcypress} (the default), the compiler optimizes code for the\n Cypress CY7C602 chip, as used in the SPARCStation/SPARCServer 3xx series.\n This is also appropriate for the older SPARCStation 1, 2, IPX etc.\n \n With @option{-msupersparc} the compiler optimizes code for the SuperSPARC cpu, as\n used in the SPARCStation 10, 1000 and 2000 series.  This flag also enables use\n-of the full SPARC v8 instruction set.\n+of the SPARC-V8 instruction set.\n+\n+With @option{-mf930} the compiler optimizes code for the Fujitsu MB86930 chip,\n+which is the original SPARClite, with no FPU.  This flag also enables use\n+of the SPARClite instruction set and disables the FPU support.\n+\n+With @option{-mf934} the compiler optimizes code for the Fujitsu MB86934 chip,\n+which is the more recent SPARClite with FPU.  This flag also enables use\n+of the SPARClite instruction set and enables the FPU support.\n \n These options are deprecated and will be deleted in a future GCC release.\n They have been replaced with @option{-mcpu=xxx}.\n@@ -6308,7 +6322,7 @@ They have been replaced with @option{-mcpu=xxx}.\n Set the instruction set, register set, and instruction scheduling parameters\n for machine type @var{cpu_type}.  Supported values for @var{cpu_type} are\n @samp{v7}, @samp{cypress}, @samp{v8}, @samp{supersparc}, @samp{sparclite},\n-@samp{hypersparc}, @samp{sparclite86x}, @samp{f930}, @samp{f934},\n+@samp{f930}, @samp{f934}, @samp{hypersparc}, @samp{sparclite86x},\n @samp{sparclet}, @samp{tsc701}, @samp{v9}, @samp{ultrasparc}, and\n @samp{ultrasparc3}.\n \n@@ -6340,36 +6354,24 @@ that select a particular cpu implementation.  Those are @samp{cypress},\n @samp{sparclite86x}, @samp{tsc701}, @samp{ultrasparc}, and\n @samp{ultrasparc3}.\n \n+@item -mv8plus\n+@itemx -mno-v8plus\n+@opindex -mv8plus\n+@opindex -mno-v8plus\n+@option{-mv8plus} will give you SPARC-V8+ code.  The difference from V8 is\n+that the global and out registers are considered 64-bit wide.  This is the\n+default on Solaris in 32-bit mode for all SPARC-V9 processors.\n+\n+@item -mvis\n+@itemx -mno-vis\n+@opindex -mvis\n+@opindex -mno-vis\n+@option{-mvis} will give you code that takes advantage of the UltraSPARC\n+Visual Instruction Set extensions.  The default is @option{-mno-vis}.\n @end table\n \n-These @samp{-m} switches are supported in addition to the above\n-on the SPARCLET processor.\n-\n-@table @gcctabopt\n-@item -mlittle-endian\n-@opindex mlittle-endian\n-Generate code for a processor running in little-endian mode.\n-\n-@item -mlive-g0\n-@opindex mlive-g0\n-Treat register @code{%g0} as a normal register.\n-GCC will continue to clobber it as necessary but will not assume\n-it always reads as 0.\n-\n-@item -mbroken-saverestore\n-@opindex mbroken-saverestore\n-Generate code that does not use non-trivial forms of the @code{save} and\n-@code{restore} instructions.  Early versions of the SPARCLET processor do\n-not correctly handle @code{save} and @code{restore} instructions used with\n-arguments.  They correctly handle them used without arguments.  A @code{save}\n-instruction used without arguments increments the current window pointer\n-but does not allocate a new stack frame.  It is assumed that the window\n-overflow trap handler will properly handle this case as will interrupt\n-handlers.\n-@end table\n-\n-These @samp{-m} switches are supported in addition to the above\n-on SPARC V9 processors in 64-bit environments.\n+These @samp{-m} options are supported in addition to the above\n+on SPARC-V9 processors in 64-bit environments:\n \n @table @gcctabopt\n @item -mlittle-endian\n@@ -6420,7 +6422,7 @@ Programs are statically linked, PIC is not supported.\n @opindex mno-stack-bias\n With @option{-mstack-bias}, GCC assumes that the stack pointer, and\n frame pointer if present, are offset by @minus{}2047 which must be added back\n-when making stack frame references.\n+when making stack frame references.  This is the default in 64-bit mode.\n Otherwise, assume no such offset is present.\n @end table\n "}]}