{"sha": "a6a063b81ce323e49eb23bd87d7147c5cb09814e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZhMDYzYjgxY2UzMjNlNDllYjIzYmQ4N2Q3MTQ3YzVjYjA5ODE0ZQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-04-10T03:50:39Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-04-10T03:50:39Z"}, "message": "re PR rtl-optimization/6233 (simple loop miscompilation)\n\n\tPR optimization/6233\n\t* rtlanal.c (pure_call_p): New function.\n\t* rtl.h (pure_call_p): Declare.\n\t* loop.c (prescan_loop): Use it to set has_nonconst_call.\n\t* gcse.c (store_killed_in_insn): Use pure_call_p here too.\n\nFrom-SVN: r52110", "tree": {"sha": "8f57737d03a2fc651bab26e059ff589511d75dfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f57737d03a2fc651bab26e059ff589511d75dfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6a063b81ce323e49eb23bd87d7147c5cb09814e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a063b81ce323e49eb23bd87d7147c5cb09814e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6a063b81ce323e49eb23bd87d7147c5cb09814e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a063b81ce323e49eb23bd87d7147c5cb09814e/comments", "author": null, "committer": null, "parents": [{"sha": "7b2e1077614049c9899772aa14edab91e80e7ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b2e1077614049c9899772aa14edab91e80e7ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b2e1077614049c9899772aa14edab91e80e7ec5"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "1def463bd49d1f4a88dd61642a6b4a66d04bcfe1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a063b81ce323e49eb23bd87d7147c5cb09814e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a063b81ce323e49eb23bd87d7147c5cb09814e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6a063b81ce323e49eb23bd87d7147c5cb09814e", "patch": "@@ -1,3 +1,11 @@\n+2002-04-10  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR optimization/6233\n+\t* rtlanal.c (pure_call_p): New function.\n+\t* rtl.h (pure_call_p): Declare.\n+\t* loop.c (prescan_loop): Use it to set has_nonconst_call.\n+\t* gcse.c (store_killed_in_insn): Use pure_call_p here too.\n+\n 2002-04-09  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.h (ASM_OUTPUT_ALIGNED_DECL_COMMON): Add additional"}, {"sha": "ba83712e249a9b6adcfe7379c4bdce2e546002fb", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a063b81ce323e49eb23bd87d7147c5cb09814e/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a063b81ce323e49eb23bd87d7147c5cb09814e/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=a6a063b81ce323e49eb23bd87d7147c5cb09814e", "patch": "@@ -6528,21 +6528,7 @@ store_killed_in_insn (x, insn)\n     {\n       /* A normal or pure call might read from pattern,\n \t but a const call will not.  */\n-      if (CONST_OR_PURE_CALL_P (insn))\n-\t{\n-\t  rtx link;\n-\n-\t  for (link = CALL_INSN_FUNCTION_USAGE (insn);\n-\t       link;\n-\t       link = XEXP (link, 1))\n-\t    if (GET_CODE (XEXP (link, 0)) == USE\n-\t\t&& GET_CODE (XEXP (XEXP (link, 0), 0)) == MEM\n-\t\t&& GET_CODE (XEXP (XEXP (XEXP (link, 0), 0), 0)) == SCRATCH)\n-\t      return 1;\n-\t  return 0;\n-\t}\n-      else\n-\treturn 1;\n+      return ! CONST_OR_PURE_CALL_P (insn) || pure_call_p (insn);\n     }\n   \n   if (GET_CODE (PATTERN (insn)) == SET)"}, {"sha": "468dc20951dbecbac0c84eb459350e5b29b0f0e0", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a063b81ce323e49eb23bd87d7147c5cb09814e/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a063b81ce323e49eb23bd87d7147c5cb09814e/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=a6a063b81ce323e49eb23bd87d7147c5cb09814e", "patch": "@@ -2494,6 +2494,8 @@ prescan_loop (loop)\n \t      loop_info->unknown_address_altered = 1;\n \t      loop_info->has_nonconst_call = 1;\n \t    }\n+\t  else if (pure_call_p (insn))\n+\t    loop_info->has_nonconst_call = 1;\n \t  loop_info->has_call = 1;\n \t  if (can_throw_internal (insn))\n \t    loop_info->has_multiple_exit_targets = 1;"}, {"sha": "7f62b91ef6922cf05d3d9cf91b74c7f3ed7a2500", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a063b81ce323e49eb23bd87d7147c5cb09814e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a063b81ce323e49eb23bd87d7147c5cb09814e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a6a063b81ce323e49eb23bd87d7147c5cb09814e", "patch": "@@ -1502,6 +1502,7 @@ extern rtx find_reg_equal_equiv_note\tPARAMS ((rtx));\n extern int find_reg_fusage\t\tPARAMS ((rtx, enum rtx_code, rtx));\n extern int find_regno_fusage\t\tPARAMS ((rtx, enum rtx_code,\n \t\t\t\t\t\t unsigned int));\n+extern int pure_call_p\t\t\tPARAMS ((rtx));\n extern void remove_note\t\t\tPARAMS ((rtx, rtx));\n extern int side_effects_p\t\tPARAMS ((rtx));\n extern int volatile_refs_p\t\tPARAMS ((rtx));"}, {"sha": "07cb6d8d6a7318bdc1ff0ec2b6203262f942d12d", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a063b81ce323e49eb23bd87d7147c5cb09814e/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a063b81ce323e49eb23bd87d7147c5cb09814e/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=a6a063b81ce323e49eb23bd87d7147c5cb09814e", "patch": "@@ -2011,6 +2011,31 @@ find_regno_fusage (insn, code, regno)\n \n   return 0;\n }\n+\n+/* Return true if INSN is a call to a pure function.  */\n+\n+int\n+pure_call_p (insn)\n+     rtx insn;\n+{\n+  rtx link;\n+\n+  if (GET_CODE (insn) != CALL_INSN || ! CONST_OR_PURE_CALL_P (insn))\n+    return 0;\n+\n+  /* Look for the note that differentiates const and pure functions.  */\n+  for (link = CALL_INSN_FUNCTION_USAGE (insn); link; link = XEXP (link, 1))\n+    {\n+      rtx u, m;\n+\n+      if (GET_CODE (u = XEXP (link, 0)) == USE\n+\t  && GET_CODE (m = XEXP (u, 0)) == MEM && GET_MODE (m) == BLKmode\n+\t  && GET_CODE (XEXP (m, 0)) == SCRATCH)\n+\treturn 1;\n+    }\n+\n+  return 0;\n+}\n \f\n /* Remove register note NOTE from the REG_NOTES of INSN.  */\n "}]}