{"sha": "33ac58d5299c7eba6be3c112817fe917bed48043", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNhYzU4ZDUyOTljN2ViYTZiZTNjMTEyODE3ZmU5MTdiZWQ0ODA0Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-06-16T13:47:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-06-16T13:47:35Z"}, "message": "Remove trailing whitespace from libstdc++ headers\n\n\t* include/std/array: Remove trailing whitespace.\n\t* include/std/atomic: Likewise.\n\t* include/std/bitset: Likewise.\n\t* include/std/chrono: Likewise.\n\t* include/std/complex: Likewise.\n\t* include/std/condition_variable: Likewise.\n\t* include/std/fstream: Likewise.\n\t* include/std/functional: Likewise.\n\t* include/std/future: Likewise.\n\t* include/std/iomanip: Likewise.\n\t* include/std/iosfwd: Likewise.\n\t* include/std/istream: Likewise.\n\t* include/std/limits: Likewise.\n\t* include/std/ratio: Likewise.\n\t* include/std/scoped_allocator: Likewise.\n\t* include/std/sstream: Likewise.\n\t* include/std/stdexcept: Likewise.\n\t* include/std/string: Likewise.\n\t* include/std/system_error: Likewise.\n\t* include/std/thread: Likewise.\n\t* include/std/tuple: Likewise.\n\t* include/std/type_traits: Likewise.\n\t* include/std/utility: Likewise.\n\t* include/std/valarray: Likewise.\n\t* include/std/vector: Likewise.\n\nFrom-SVN: r237528", "tree": {"sha": "2e1904833bafbe7ef8decd985f84ec94de07c8cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e1904833bafbe7ef8decd985f84ec94de07c8cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33ac58d5299c7eba6be3c112817fe917bed48043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ac58d5299c7eba6be3c112817fe917bed48043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ac58d5299c7eba6be3c112817fe917bed48043", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ac58d5299c7eba6be3c112817fe917bed48043/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc8d15bc6d7d55c7731093e0a8f280fc5477381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc8d15bc6d7d55c7731093e0a8f280fc5477381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc8d15bc6d7d55c7731093e0a8f280fc5477381"}], "stats": {"total": 1168, "additions": 597, "deletions": 571}, "files": [{"sha": "9d20afe3be7bb57dbe756b1dfba6ea85b1057cbc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -1,5 +1,31 @@\n 2016-06-16  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/array: Remove trailing whitespace.\n+\t* include/std/atomic: Likewise.\n+\t* include/std/bitset: Likewise.\n+\t* include/std/chrono: Likewise.\n+\t* include/std/complex: Likewise.\n+\t* include/std/condition_variable: Likewise.\n+\t* include/std/fstream: Likewise.\n+\t* include/std/functional: Likewise.\n+\t* include/std/future: Likewise.\n+\t* include/std/iomanip: Likewise.\n+\t* include/std/iosfwd: Likewise.\n+\t* include/std/istream: Likewise.\n+\t* include/std/limits: Likewise.\n+\t* include/std/ratio: Likewise.\n+\t* include/std/scoped_allocator: Likewise.\n+\t* include/std/sstream: Likewise.\n+\t* include/std/stdexcept: Likewise.\n+\t* include/std/string: Likewise.\n+\t* include/std/system_error: Likewise.\n+\t* include/std/thread: Likewise.\n+\t* include/std/tuple: Likewise.\n+\t* include/std/type_traits: Likewise.\n+\t* include/std/utility: Likewise.\n+\t* include/std/valarray: Likewise.\n+\t* include/std/vector: Likewise.\n+\n \t* include/bits/stl_vector.h (vector::_S_insert_aux_assign): Define\n \tnew overloaded functions.\n \t* include/bits/vector.tcc (vector::_M_insert_aux): Use new functions"}, {"sha": "ee46f68caf100c5e968727df540af3607d569c22", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -134,19 +134,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       end() const noexcept\n       { return const_iterator(data() + _Nm); }\n \n-      reverse_iterator \n+      reverse_iterator\n       rbegin() noexcept\n       { return reverse_iterator(end()); }\n \n-      const_reverse_iterator \n+      const_reverse_iterator\n       rbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n-      reverse_iterator \n+      reverse_iterator\n       rend() noexcept\n       { return reverse_iterator(begin()); }\n \n-      const_reverse_iterator \n+      const_reverse_iterator\n       rend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n@@ -158,22 +158,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       cend() const noexcept\n       { return const_iterator(data() + _Nm); }\n \n-      const_reverse_iterator \n+      const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n-      const_reverse_iterator \n+      const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n       // Capacity.\n-      constexpr size_type \n+      constexpr size_type\n       size() const noexcept { return _Nm; }\n \n-      constexpr size_type \n+      constexpr size_type\n       max_size() const noexcept { return _Nm; }\n \n-      constexpr bool \n+      constexpr bool\n       empty() const noexcept { return size() == 0; }\n \n       // Element access.\n@@ -207,22 +207,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n-      reference \n+      reference\n       front() noexcept\n       { return *begin(); }\n \n-      constexpr const_reference \n+      constexpr const_reference\n       front() const noexcept\n       { return _AT_Type::_S_ref(_M_elems, 0); }\n \n-      reference \n+      reference\n       back() noexcept\n       { return _Nm ? *(end() - 1) : *end(); }\n \n-      constexpr const_reference \n+      constexpr const_reference\n       back() const noexcept\n-      { \n-\treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1) \n+      {\n+\treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)\n  \t           : _AT_Type::_S_ref(_M_elems, 0);\n       }\n \n@@ -237,7 +237,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   // Array comparisons.\n   template<typename _Tp, std::size_t _Nm>\n-    inline bool \n+    inline bool\n     operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n \n@@ -249,9 +249,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, std::size_t _Nm>\n     inline bool\n     operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n-    { \n+    {\n       return std::lexicographical_compare(__a.begin(), __a.end(),\n-\t\t\t\t\t  __b.begin(), __b.end()); \n+\t\t\t\t\t  __b.begin(), __b.end());\n     }\n \n   template<typename _Tp, std::size_t _Nm>\n@@ -312,7 +312,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Tuple interface to class template array.\n \n   /// tuple_size\n-  template<typename _Tp> \n+  template<typename _Tp>\n     class tuple_size;\n \n   /// Partial specialization for std::array"}, {"sha": "8cbc91f93474e1356508fbd540e9fa92021333c5", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -198,11 +198,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return load(); }\n \n       _Tp\n-      operator=(_Tp __i) noexcept \n+      operator=(_Tp __i) noexcept\n       { store(__i); return __i; }\n \n       _Tp\n-      operator=(_Tp __i) volatile noexcept \n+      operator=(_Tp __i) volatile noexcept\n       { store(__i); return __i; }\n \n       bool\n@@ -231,41 +231,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Tp\n       load(memory_order __m = memory_order_seq_cst) const noexcept\n-      { \n+      {\n         _Tp tmp;\n \t__atomic_load(std::__addressof(_M_i), std::__addressof(tmp), __m);\n \treturn tmp;\n       }\n \n       _Tp\n       load(memory_order __m = memory_order_seq_cst) const volatile noexcept\n-      { \n+      {\n         _Tp tmp;\n \t__atomic_load(std::__addressof(_M_i), std::__addressof(tmp), __m);\n \treturn tmp;\n       }\n \n       _Tp\n       exchange(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept\n-      { \n+      {\n         _Tp tmp;\n \t__atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),\n \t\t\t  std::__addressof(tmp), __m);\n \treturn tmp;\n       }\n \n       _Tp\n-      exchange(_Tp __i, \n+      exchange(_Tp __i,\n \t       memory_order __m = memory_order_seq_cst) volatile noexcept\n-      { \n+      {\n         _Tp tmp;\n \t__atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),\n \t\t\t  std::__addressof(tmp), __m);\n \treturn tmp;\n       }\n \n       bool\n-      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s, \n+      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,\n \t\t\t    memory_order __f) noexcept\n       {\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n@@ -275,7 +275,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       bool\n-      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s, \n+      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,\n \t\t\t    memory_order __f) volatile noexcept\n       {\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n@@ -297,7 +297,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                                      __cmpexch_failure_order(__m)); }\n \n       bool\n-      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, \n+      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,\n \t\t\t      memory_order __f) noexcept\n       {\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n@@ -307,7 +307,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       bool\n-      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, \n+      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,\n \t\t\t      memory_order __f) volatile noexcept\n       {\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),"}, {"sha": "0156d1f4d61f3033993e50724c77324c326a0a77", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -245,7 +245,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      _M_w[__n] = _M_w[__n - __wshift];\n \t  else\n \t    {\n-\t      const size_t __sub_offset = (_GLIBCXX_BITSET_BITS_PER_WORD \n+\t      const size_t __sub_offset = (_GLIBCXX_BITSET_BITS_PER_WORD\n \t\t\t\t\t   - __offset);\n \t      for (size_t __n = _Nw - 1; __n > __wshift; --__n)\n \t\t_M_w[__n] = ((_M_w[__n - __wshift] << __offset)\n@@ -279,7 +279,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t     | (_M_w[__n + __wshift + 1] << __sub_offset));\n \t      _M_w[__limit] = _M_w[_Nw-1] >> __offset;\n \t    }\n-\t  \n+\n \t  std::fill(_M_w + __limit + 1, _M_w + _Nw, static_cast<_WordT>(0));\n \t}\n     }\n@@ -556,7 +556,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _WordT&\n       _M_getword(size_t) _GLIBCXX_NOEXCEPT\n       {\n-\t__throw_out_of_range(__N(\"_Base_bitset::_M_getword\")); \n+\t__throw_out_of_range(__N(\"_Base_bitset::_M_getword\"));\n \treturn *new _WordT;\n       }\n \n@@ -659,7 +659,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef unsigned long _WordT;\n \n       static void\n-      _S_do_sanitize(_WordT) _GLIBCXX_NOEXCEPT { } \n+      _S_do_sanitize(_WordT) _GLIBCXX_NOEXCEPT { }\n     };\n \n #if __cplusplus >= 201103L\n@@ -773,7 +773,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       void\n       _M_do_sanitize() _GLIBCXX_NOEXCEPT\n-      { \n+      {\n \ttypedef _Sanitize<_Nb % _GLIBCXX_BITSET_BITS_PER_WORD> __sanitize_type;\n \t__sanitize_type::_S_do_sanitize(this->_M_hiword());\n       }\n@@ -801,10 +801,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n \t_WordT*\t_M_wp;\n \tsize_t \t_M_bpos;\n-\t\n+\n \t// left undefined\n \treference();\n-\t\n+\n       public:\n \treference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT\n \t{\n@@ -981,7 +981,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n       //@}\n-      \n+\n       //@{\n       /**\n        *  Operations on bitsets.\n@@ -1015,7 +1015,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n       //@}\n-      \n+\n       //@{\n       /**\n        *  These versions of single-bit set, reset, flip, and test are\n@@ -1058,7 +1058,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))\n \t\t!= static_cast<_WordT>(0)); }\n       //@}\n-      \n+\n       // Set, reset, and flip.\n       /**\n        *  @brief Sets every bit to true.\n@@ -1107,7 +1107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->_M_check(__position, __N(\"bitset::reset\"));\n \treturn _Unchecked_reset(__position);\n       }\n-      \n+\n       /**\n        *  @brief Toggles every bit to its opposite value.\n        */\n@@ -1130,7 +1130,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->_M_check(__position, __N(\"bitset::flip\"));\n \treturn _Unchecked_flip(__position);\n       }\n-      \n+\n       /// See the no-argument flip().\n       bitset<_Nb>\n       operator~() const _GLIBCXX_NOEXCEPT\n@@ -1159,7 +1159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       operator[](size_t __position) const\n       { return _Unchecked_test(__position); }\n       //@}\n-      \n+\n       /**\n        *  @brief Returns a numerical interpretation of the %bitset.\n        *  @return  The integral equivalent of the bits.\n@@ -1302,7 +1302,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       operator!=(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return !this->_M_is_equal(__rhs); }\n       //@}\n-      \n+\n       /**\n        *  @brief Tests the value of a bit.\n        *  @param  __position  The index of a bit.\n@@ -1352,7 +1352,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       operator>>(size_t __position) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(*this) >>= __position; }\n       //@}\n-      \n+\n       /**\n        *  @brief  Finds the index of the first \"on\" bit.\n        *  @return  The index of the first bit set, or size() if not found.\n@@ -1482,7 +1482,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      for (size_t __i = _Nb; __i > 0; --__i)\n \t\t{\n \t\t  static typename _Traits::int_type __eof = _Traits::eof();\n-\t\t  \n+\n \t\t  typename _Traits::int_type __c1 = __is.rdbuf()->sbumpc();\n \t\t  if (_Traits::eq_int_type(__c1, __eof))\n \t\t    {\n@@ -1508,7 +1508,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    }\n \t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n-\t      __is._M_setstate(__ios_base::badbit);\t\t\n+\t      __is._M_setstate(__ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n \t  __catch(...)"}, {"sha": "9104881eb93ee01648a3cd2378100c23fae7e16f", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -72,7 +72,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.11.4.3 specialization of common_type (for duration, sfinae-friendly)\n-  \n+\n   template<typename _CT, typename _Period1, typename _Period2>\n     struct __duration_common_type_wrapper\n     {\n@@ -98,7 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   // 20.11.4.3 specialization of common_type (for time_point, sfinae-friendly)\n-  \n+\n   template<typename _CT, typename _Clock>\n     struct __timepoint_common_type_wrapper\n     {\n@@ -625,11 +625,11 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \ttypename common_type<duration<_Rep1, _Period1>, _Dur2>::type>\n       operator+(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst time_point<_Clock, _Dur2>& __rhs)\n-      { \n+      {\n \ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n \ttypedef typename common_type<__dur1,_Dur2>::type\t__ct;\n \ttypedef time_point<_Clock, __ct> \t\t\t__time_point;\n-\treturn __time_point(__rhs.time_since_epoch() + __lhs); \n+\treturn __time_point(__rhs.time_since_epoch() + __lhs);\n       }\n \n     template<typename _Clock, typename _Dur1,\n@@ -638,11 +638,11 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \ttypename common_type<_Dur1, duration<_Rep2, _Period2>>::type>\n       operator-(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n-      { \n+      {\n \ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n \ttypedef typename common_type<_Dur1,__dur2>::type\t__ct;\n \ttypedef time_point<_Clock, __ct> \t\t\t__time_point;\n-\treturn __time_point(__lhs.time_since_epoch() -__rhs); \n+\treturn __time_point(__lhs.time_since_epoch() -__rhs);\n       }\n \n     template<typename _Clock, typename _Dur1, typename _Dur2>\n@@ -688,9 +688,9 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       { return !(__lhs < __rhs); }\n \n \n-    // Clocks. \n+    // Clocks.\n \n-    // Why nanosecond resolution as the default?  \n+    // Why nanosecond resolution as the default?\n     // Why have std::system_clock always count in the higest\n     // resolution (ie nanoseconds), even if on some OSes the low 3\n     // or 9 decimal digits will be always zero? This allows later"}, {"sha": "bb09b7d0aa7de297a12b68bab884f8a10998d8b3", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -93,7 +93,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Return @a x to the @a y'th power.\n   template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, const _Tp&);\n   /// Return @a x to the @a y'th power.\n-  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, \n+  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&,\n                                           const complex<_Tp>&);\n   /// Return @a x to the @a y'th power.\n   template<typename _Tp> complex<_Tp> pow(const _Tp&, const complex<_Tp>&);\n@@ -107,8 +107,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp> complex<_Tp> tan(const complex<_Tp>&);\n   /// Return complex hyperbolic tangent of @a z.\n   template<typename _Tp> complex<_Tp> tanh(const complex<_Tp>&);\n-    \n-    \n+\n+\n   // 26.2.2  Primary template class complex\n   /**\n    *  Template to represent complex numbers.\n@@ -123,7 +123,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       /// Value typedef.\n       typedef _Tp value_type;\n-      \n+\n       ///  Default constructor.  First parameter is x, second parameter is y.\n       ///  Unspecified parameters default to 0.\n       _GLIBCXX_CONSTEXPR complex(const _Tp& __r = _Tp(), const _Tp& __i = _Tp())\n@@ -143,41 +143,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n       _GLIBCXX_ABI_TAG_CXX11\n-      constexpr _Tp \n+      constexpr _Tp\n       real() const { return _M_real; }\n \n       _GLIBCXX_ABI_TAG_CXX11\n-      constexpr _Tp \n+      constexpr _Tp\n       imag() const { return _M_imag; }\n #else\n       ///  Return real part of complex number.\n-      _Tp& \n+      _Tp&\n       real() { return _M_real; }\n \n       ///  Return real part of complex number.\n-      const _Tp& \n+      const _Tp&\n       real() const { return _M_real; }\n \n       ///  Return imaginary part of complex number.\n-      _Tp& \n+      _Tp&\n       imag() { return _M_imag; }\n \n       ///  Return imaginary part of complex number.\n-      const _Tp& \n+      const _Tp&\n       imag() const { return _M_imag; }\n #endif\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n-      void \n+      void\n       real(_Tp __val) { _M_real = __val; }\n \n-      void \n+      void\n       imag(_Tp __val) { _M_imag = __val; }\n \n       /// Assign a scalar to this complex number.\n       complex<_Tp>& operator=(const _Tp&);\n-      \n+\n       /// Add a scalar to this complex number.\n       // 26.2.5/1\n       complex<_Tp>&\n@@ -237,7 +237,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      _M_real = __t;\n      _M_imag = _Tp();\n      return *this;\n-    } \n+    }\n \n   // 26.2.5/5\n   template<typename _Tp>\n@@ -317,7 +317,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_real = __r / __n;\n       return *this;\n     }\n-    \n+\n   // Operators:\n   //@{\n   ///  Return new complex value @a x plus @a y.\n@@ -359,7 +359,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __r -= __y;\n       return __r;\n     }\n-    \n+\n   template<typename _Tp>\n     inline complex<_Tp>\n     operator-(const complex<_Tp>& __x, const _Tp& __y)\n@@ -419,7 +419,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __r /= __y;\n       return __r;\n     }\n-    \n+\n   template<typename _Tp>\n     inline complex<_Tp>\n     operator/(const complex<_Tp>& __x, const _Tp& __y)\n@@ -495,23 +495,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Tp __re_x, __im_x;\n       _CharT __ch;\n       __is >> __ch;\n-      if (__ch == '(') \n+      if (__ch == '(')\n \t{\n \t  __is >> __re_x >> __ch;\n-\t  if (__ch == ',') \n+\t  if (__ch == ',')\n \t    {\n \t      __is >> __im_x >> __ch;\n-\t      if (__ch == ')') \n+\t      if (__ch == ')')\n \t\t__x = complex<_Tp>(__re_x, __im_x);\n \t      else\n \t\t__is.setstate(ios_base::failbit);\n \t    }\n-\t  else if (__ch == ')') \n+\t  else if (__ch == ')')\n \t    __x = __re_x;\n \t  else\n \t    __is.setstate(ios_base::failbit);\n \t}\n-      else \n+      else\n \t{\n \t  __is.putback(__ch);\n \t  __is >> __re_x;\n@@ -549,17 +549,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _Tp&\n     real(complex<_Tp>& __z)\n     { return __z.real(); }\n-    \n+\n   template<typename _Tp>\n     inline const _Tp&\n     real(const complex<_Tp>& __z)\n     { return __z.real(); }\n-    \n+\n   template<typename _Tp>\n     inline _Tp&\n     imag(complex<_Tp>& __z)\n     { return __z.imag(); }\n-    \n+\n   template<typename _Tp>\n     inline const _Tp&\n     imag(const complex<_Tp>& __z)\n@@ -576,7 +576,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const _Tp __s = std::max(abs(__x), abs(__y));\n       if (__s == _Tp())  // well ...\n         return __s;\n-      __x /= __s; \n+      __x /= __s;\n       __y /= __s;\n       return __s * sqrt(__x * __x + __y * __y);\n     }\n@@ -599,7 +599,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     inline _Tp\n     abs(const complex<_Tp>& __z) { return __complex_abs(__z); }\n-#endif  \n+#endif\n \n \n   // 26.2.7/4: arg(__z): Returns the phase angle of __z.\n@@ -655,12 +655,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           return __res * __res;\n         }\n     };\n-  \n+\n   template<typename _Tp>\n     inline _Tp\n     norm(const complex<_Tp>& __z)\n     {\n-      return _Norm_helper<__is_floating<_Tp>::__value \n+      return _Norm_helper<__is_floating<_Tp>::__value\n \t&& !_GLIBCXX_FAST_MATH>::_S_do_it(__z);\n     }\n \n@@ -676,7 +676,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline complex<_Tp>\n     conj(const complex<_Tp>& __z)\n     { return complex<_Tp>(__z.real(), -__z.imag()); }\n-  \n+\n   // Transcendentals\n \n   // 26.2.8/1 cos(__z):  Returns the cosine of __z.\n@@ -804,7 +804,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       const _Tp __x = __z.real();\n       const _Tp __y = __z.imag();\n-      return complex<_Tp>(sin(__x) * cosh(__y), cos(__x) * sinh(__y)); \n+      return complex<_Tp>(sin(__x) * cosh(__y), cos(__x) * sinh(__y));\n     }\n \n #if _GLIBCXX_USE_C99_COMPLEX\n@@ -839,14 +839,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n-  __complex_sinh(__complex__ float __z) { return __builtin_csinhf(__z); }      \n+  __complex_sinh(__complex__ float __z) { return __builtin_csinhf(__z); }\n \n   inline __complex__ double\n-  __complex_sinh(__complex__ double __z) { return __builtin_csinh(__z); }      \n+  __complex_sinh(__complex__ double __z) { return __builtin_csinh(__z); }\n \n   inline __complex__ long double\n   __complex_sinh(const __complex__ long double& __z)\n-  { return __builtin_csinhl(__z); }      \n+  { return __builtin_csinhl(__z); }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n@@ -902,7 +902,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   // 26.2.8/14 tan(__z):  Return the complex tangent of __z.\n-  \n+\n   template<typename _Tp>\n     inline complex<_Tp>\n     __complex_tan(const complex<_Tp>& __z)\n@@ -930,7 +930,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \n   // 26.2.8/15 tanh(__z):  Returns the hyperbolic tangent of __z.\n-  \n+\n   template<typename _Tp>\n     inline complex<_Tp>\n     __complex_tanh(const complex<_Tp>& __z)\n@@ -1066,38 +1066,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       explicit _GLIBCXX_CONSTEXPR complex(const complex<double>&);\n-      explicit _GLIBCXX_CONSTEXPR complex(const complex<long double>&);\t\n+      explicit _GLIBCXX_CONSTEXPR complex(const complex<long double>&);\n \n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n       __attribute ((__abi_tag__ (\"cxx11\")))\n-      constexpr float \n+      constexpr float\n       real() const { return __real__ _M_value; }\n \n       __attribute ((__abi_tag__ (\"cxx11\")))\n-      constexpr float \n+      constexpr float\n       imag() const { return __imag__ _M_value; }\n #else\n-      float& \n+      float&\n       real() { return __real__ _M_value; }\n \n-      const float& \n-      real() const { return __real__ _M_value; }      \n+      const float&\n+      real() const { return __real__ _M_value; }\n \n-      float& \n+      float&\n       imag() { return __imag__ _M_value; }\n \n-      const float& \n+      const float&\n       imag() const { return __imag__ _M_value; }\n #endif\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n-      void \n+      void\n       real(float __val) { __real__ _M_value = __val; }\n \n-      void \n+      void\n       imag(float __val) { __imag__ _M_value = __val; }\n \n       complex&\n@@ -1217,38 +1217,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_CONSTEXPR complex(const complex<float>& __z)\n       : _M_value(__z.__rep()) { }\n \n-      explicit _GLIBCXX_CONSTEXPR complex(const complex<long double>&);\t\n+      explicit _GLIBCXX_CONSTEXPR complex(const complex<long double>&);\n \n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n       __attribute ((__abi_tag__ (\"cxx11\")))\n-      constexpr double \n+      constexpr double\n       real() const { return __real__ _M_value; }\n \n       __attribute ((__abi_tag__ (\"cxx11\")))\n-      constexpr double \n+      constexpr double\n       imag() const { return __imag__ _M_value; }\n #else\n-      double& \n+      double&\n       real() { return __real__ _M_value; }\n \n-      const double& \n+      const double&\n       real() const { return __real__ _M_value; }\n \n-      double& \n+      double&\n       imag() { return __imag__ _M_value; }\n \n-      const double& \n+      const double&\n       imag() const { return __imag__ _M_value; }\n #endif\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n-      void \n+      void\n       real(double __val) { __real__ _M_value = __val; }\n \n-      void \n+      void\n       imag(double __val) { __imag__ _M_value = __val; }\n \n       complex&\n@@ -1264,7 +1264,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_value += __d;\n \treturn *this;\n       }\n-\t\n+\n       complex&\n       operator-=(double __d)\n       {\n@@ -1354,7 +1354,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _GLIBCXX_CONSTEXPR complex(_ComplexT __z) : _M_value(__z) { }\n \n-      _GLIBCXX_CONSTEXPR complex(long double __r = 0.0L, \n+      _GLIBCXX_CONSTEXPR complex(long double __r = 0.0L,\n \t\t\t\t long double __i = 0.0L)\n #if __cplusplus >= 201103L\n       : _M_value{ __r, __i } { }\n@@ -1375,32 +1375,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n       __attribute ((__abi_tag__ (\"cxx11\")))\n-      constexpr long double \n+      constexpr long double\n       real() const { return __real__ _M_value; }\n \n       __attribute ((__abi_tag__ (\"cxx11\")))\n-      constexpr long double \n+      constexpr long double\n       imag() const { return __imag__ _M_value; }\n #else\n-      long double& \n+      long double&\n       real() { return __real__ _M_value; }\n \n-      const long double& \n+      const long double&\n       real() const { return __real__ _M_value; }\n \n-      long double& \n+      long double&\n       imag() { return __imag__ _M_value; }\n \n-      const long double& \n+      const long double&\n       imag() const { return __imag__ _M_value; }\n #endif\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n-      void \n+      void\n       real(long double __val) { __real__ _M_value = __val; }\n \n-      void \n+      void\n       imag(long double __val) { __imag__ _M_value = __val; }\n \n       complex&\n@@ -1554,7 +1554,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;\n     };\n-  \n+\n   template<typename _Tp, typename _Up>\n     struct __promote_2<std::complex<_Tp>, std::complex<_Up> >\n     {\n@@ -1653,7 +1653,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     asin(const std::complex<_Tp>& __z)\n     { return __complex_asin(__z); }\n #endif\n-  \n+\n   template<typename _Tp>\n     std::complex<_Tp>\n     __complex_atan(const std::complex<_Tp>& __z)"}, {"sha": "2e975e890ff8b27384301e5724cbe9bf38f0618c", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -60,7 +60,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// cv_status\n   enum class cv_status { no_timeout, timeout };\n-  \n+\n   /// condition_variable\n   class condition_variable\n   {\n@@ -250,7 +250,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tunique_lock<mutex> __my_lock2(std::move(__my_lock));\n \t_M_cond.wait(__my_lock2);\n       }\n-      \n+\n \n     template<typename _Lock, typename _Predicate>\n       void"}, {"sha": "b0d03edc092aade2c4ff8f5c6eff763b57cbeeae", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -386,7 +386,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Common code for seekoff, seekpos, and overflow\n       pos_type\n       _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);\n-      \n+\n       int\n       _M_get_ext_pos(__state_type &__state);\n "}, {"sha": "0fdf0436694c476c81687482e4fda48d0b71fb7f", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -1906,7 +1906,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n        *  type @c T1, @c T2, ..., @c TN and returns a value convertible\n        *  to @c Res.\n        *\n-       *  The newly-created %function object will target a copy of \n+       *  The newly-created %function object will target a copy of\n        *  @a __f. If @a __f is @c reference_wrapper<F>, then this function\n        *  object will contain a reference to the function object @c\n        *  __f.get(). If @a __f is a NULL function pointer or NULL"}, {"sha": "aa866c5906a7f0c58c33508f792eec5067dfb32b", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -225,7 +225,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypedef _Res result_type;\n \n \t_Result() noexcept : _M_initialized() { }\n-\t\n+\n \t~_Result()\n \t{\n \t  if (_M_initialized)\n@@ -263,7 +263,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         explicit\n \t_Result_alloc(const _Alloc& __a) : _Result<_Res>(), _Alloc(__a)\n \t{ }\n-\t\n+\n       private:\n \tvoid _M_destroy()\n \t{"}, {"sha": "cb0df866695495ee80597a7e02a77f8ca0ed6ea3", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -62,24 +62,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Sent to a stream object, this manipulator resets the specified flags,\n    *  via @e stream.setf(0,__mask).\n   */\n-  inline _Resetiosflags \n+  inline _Resetiosflags\n   resetiosflags(ios_base::fmtflags __mask)\n   { return { __mask }; }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT, _Traits>& \n+    inline basic_istream<_CharT, _Traits>&\n     operator>>(basic_istream<_CharT, _Traits>& __is, _Resetiosflags __f)\n-    { \n-      __is.setf(ios_base::fmtflags(0), __f._M_mask); \n-      return __is; \n+    {\n+      __is.setf(ios_base::fmtflags(0), __f._M_mask);\n+      return __is;\n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT, _Traits>& \n+    inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)\n-    { \n-      __os.setf(ios_base::fmtflags(0), __f._M_mask); \n-      return __os; \n+    {\n+      __os.setf(ios_base::fmtflags(0), __f._M_mask);\n+      return __os;\n     }\n \n \n@@ -92,24 +92,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Sent to a stream object, this manipulator sets the format flags\n    *  to @a __mask.\n   */\n-  inline _Setiosflags \n+  inline _Setiosflags\n   setiosflags(ios_base::fmtflags __mask)\n   { return { __mask }; }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT, _Traits>& \n+    inline basic_istream<_CharT, _Traits>&\n     operator>>(basic_istream<_CharT, _Traits>& __is, _Setiosflags __f)\n-    { \n-      __is.setf(__f._M_mask); \n-      return __is; \n+    {\n+      __is.setf(__f._M_mask);\n+      return __is;\n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT, _Traits>& \n+    inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)\n-    { \n-      __os.setf(__f._M_mask); \n-      return __os; \n+    {\n+      __os.setf(__f._M_mask);\n+      return __os;\n     }\n \n \n@@ -123,32 +123,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @c ios_base::basefield flags to @c oct, @c dec, or @c hex when @a base\n    *  is 8, 10, or 16, accordingly, and to 0 if @a __base is any other value.\n   */\n-  inline _Setbase \n+  inline _Setbase\n   setbase(int __base)\n   { return { __base }; }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT, _Traits>& \n+    inline basic_istream<_CharT, _Traits>&\n     operator>>(basic_istream<_CharT, _Traits>& __is, _Setbase __f)\n     {\n-      __is.setf(__f._M_base ==  8 ? ios_base::oct : \n-\t\t__f._M_base == 10 ? ios_base::dec : \n-\t\t__f._M_base == 16 ? ios_base::hex : \n+      __is.setf(__f._M_base ==  8 ? ios_base::oct :\n+\t\t__f._M_base == 10 ? ios_base::dec :\n+\t\t__f._M_base == 16 ? ios_base::hex :\n \t\tios_base::fmtflags(0), ios_base::basefield);\n-      return __is; \n+      return __is;\n     }\n-  \n+\n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT, _Traits>& \n+    inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)\n     {\n-      __os.setf(__f._M_base ==  8 ? ios_base::oct : \n-\t\t__f._M_base == 10 ? ios_base::dec : \n-\t\t__f._M_base == 16 ? ios_base::hex : \n+      __os.setf(__f._M_base ==  8 ? ios_base::oct :\n+\t\t__f._M_base == 10 ? ios_base::dec :\n+\t\t__f._M_base == 16 ? ios_base::hex :\n \t\tios_base::fmtflags(0), ios_base::basefield);\n-      return __os; \n+      return __os;\n     }\n-  \n+\n \n   template<typename _CharT>\n     struct _Setfill { _CharT _M_c; };\n@@ -166,19 +166,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return { __c }; }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT, _Traits>& \n+    inline basic_istream<_CharT, _Traits>&\n     operator>>(basic_istream<_CharT, _Traits>& __is, _Setfill<_CharT> __f)\n-    { \n-      __is.fill(__f._M_c); \n-      return __is; \n+    {\n+      __is.fill(__f._M_c);\n+      return __is;\n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT, _Traits>& \n+    inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)\n-    { \n-      __os.fill(__f._M_c); \n-      return __os; \n+    {\n+      __os.fill(__f._M_c);\n+      return __os;\n     }\n \n \n@@ -191,24 +191,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Sent to a stream object, this manipulator calls @c precision(__n) for\n    *  that object.\n   */\n-  inline _Setprecision \n+  inline _Setprecision\n   setprecision(int __n)\n   { return { __n }; }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT, _Traits>& \n+    inline basic_istream<_CharT, _Traits>&\n     operator>>(basic_istream<_CharT, _Traits>& __is, _Setprecision __f)\n-    { \n-      __is.precision(__f._M_n); \n-      return __is; \n+    {\n+      __is.precision(__f._M_n);\n+      return __is;\n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT, _Traits>& \n+    inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)\n-    { \n-      __os.precision(__f._M_n); \n-      return __os; \n+    {\n+      __os.precision(__f._M_n);\n+      return __os;\n     }\n \n \n@@ -221,35 +221,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Sent to a stream object, this manipulator calls @c width(__n) for\n    *  that object.\n   */\n-  inline _Setw \n+  inline _Setw\n   setw(int __n)\n   { return { __n }; }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT, _Traits>& \n+    inline basic_istream<_CharT, _Traits>&\n     operator>>(basic_istream<_CharT, _Traits>& __is, _Setw __f)\n     {\n       __is.width(__f._M_n);\n-      return __is; \n+      return __is;\n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT, _Traits>& \n+    inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)\n     {\n       __os.width(__f._M_n);\n-      return __os; \n+      return __os;\n     }\n \n #if __cplusplus >= 201103L\n-  \n+\n   template<typename _MoneyT>\n     struct _Get_money { _MoneyT& _M_mon; bool _M_intl; };\n \n   /**\n    *  @brief  Extended manipulator for extracting money.\n    *  @param  __mon  Either long double or a specialization of @c basic_string.\n-   *  @param  __intl A bool indicating whether international format \n+   *  @param  __intl A bool indicating whether international format\n    *                 is to be used.\n    *\n    *  Sent to a stream object, this manipulator extracts @a __mon.\n@@ -286,7 +286,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (__err)\n \t    __is.setstate(__err);\n \t}\n-      return __is; \n+      return __is;\n     }\n \n \n@@ -296,7 +296,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    *  @brief  Extended manipulator for inserting money.\n    *  @param  __mon  Either long double or a specialization of @c basic_string.\n-   *  @param  __intl A bool indicating whether international format \n+   *  @param  __intl A bool indicating whether international format\n    *                 is to be used.\n    *\n    *  Sent to a stream object, this manipulator inserts @a __mon.\n@@ -307,7 +307,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return { __mon, __intl }; }\n \n   template<typename _CharT, typename _Traits, typename _MoneyT>\n-    basic_ostream<_CharT, _Traits>& \n+    basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_money<_MoneyT> __f)\n     {\n       typename basic_ostream<_CharT, _Traits>::sentry __cerb(__os);\n@@ -334,7 +334,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (__err)\n \t    __os.setstate(__err);\n \t}\n-      return __os; \n+      return __os;\n     }\n \n   template<typename _CharT>\n@@ -490,7 +490,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // __cplusplus >= 201103L\n \n   // Inhibit implicit instantiations for required instantiations,\n-  // which are defined via explicit instantiations elsewhere.  \n+  // which are defined via explicit instantiations elsewhere.\n   // NB:  This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template ostream& operator<<(ostream&, _Setfill<char>);"}, {"sha": "d81782e63f3a3ad5d1ec44553db1a2a65c529cde", "filename": "libstdc++-v3/include/std/iosfwd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -129,7 +129,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \n \n   /// Base class for @c char streams.\n-  typedef basic_ios<char> \t\tios; \n+  typedef basic_ios<char> \t\tios;\n \n   /// Base class for @c char buffers.\n   typedef basic_streambuf<char> \tstreambuf;"}, {"sha": "d4cf7bcbfd5b407c02007a46816792520dc932ab", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -922,7 +922,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits, typename _Tp>\n     inline basic_istream<_CharT, _Traits>&\n     operator>>(basic_istream<_CharT, _Traits>&& __is, _Tp& __x)\n-    { \n+    {\n       __is >> __x;\n       return __is;\n     }"}, {"sha": "a1224d61aa612dcb885045a5cb798981dd0f851a", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 208, "deletions": 208, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -296,7 +296,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /** See std::float_round_style for more information.  This is only\n \tmeaningful for floating types; integer types will all be\n \tround_toward_zero.  */\n-    static _GLIBCXX_USE_CONSTEXPR float_round_style round_style = \n+    static _GLIBCXX_USE_CONSTEXPR float_round_style round_style =\n \t\t\t\t\t\t    round_toward_zero;\n   };\n \n@@ -384,10 +384,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR bool \n+      static _GLIBCXX_CONSTEXPR bool\n       min() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n-      static _GLIBCXX_CONSTEXPR bool \n+      static _GLIBCXX_CONSTEXPR bool\n       max() _GLIBCXX_USE_NOEXCEPT { return true; }\n \n #if __cplusplus >= 201103L\n@@ -404,10 +404,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR bool \n+      static _GLIBCXX_CONSTEXPR bool\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n-      static _GLIBCXX_CONSTEXPR bool \n+      static _GLIBCXX_CONSTEXPR bool\n       round_error() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -418,20 +418,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR bool \n+      static _GLIBCXX_CONSTEXPR bool\n       infinity() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n-      static _GLIBCXX_CONSTEXPR bool \n+      static _GLIBCXX_CONSTEXPR bool\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n-      static _GLIBCXX_CONSTEXPR bool \n+      static _GLIBCXX_CONSTEXPR bool\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n-      static _GLIBCXX_CONSTEXPR bool \n+      static _GLIBCXX_CONSTEXPR bool\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n@@ -443,7 +443,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // promotion semantics.\n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -453,14 +453,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR char \n+      static _GLIBCXX_CONSTEXPR char\n       min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min(char); }\n \n-      static _GLIBCXX_CONSTEXPR char \n+      static _GLIBCXX_CONSTEXPR char\n       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max(char); }\n \n #if __cplusplus >= 201103L\n-      static constexpr char \n+      static constexpr char\n       lowest() noexcept { return min(); }\n #endif\n \n@@ -474,10 +474,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR char \n+      static _GLIBCXX_CONSTEXPR char\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR char \n+      static _GLIBCXX_CONSTEXPR char\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -488,20 +488,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR \n+      static _GLIBCXX_CONSTEXPR\n       char infinity() _GLIBCXX_USE_NOEXCEPT { return char(); }\n \n-      static _GLIBCXX_CONSTEXPR char \n+      static _GLIBCXX_CONSTEXPR char\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return char(); }\n \n-      static _GLIBCXX_CONSTEXPR char \n+      static _GLIBCXX_CONSTEXPR char\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return char(); }\n \n-      static _GLIBCXX_CONSTEXPR char \n+      static _GLIBCXX_CONSTEXPR char\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<char>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n@@ -510,7 +510,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -520,19 +520,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR signed char \n+      static _GLIBCXX_CONSTEXPR signed char\n       min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }\n \n-      static _GLIBCXX_CONSTEXPR signed char \n+      static _GLIBCXX_CONSTEXPR signed char\n       max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }\n \n #if __cplusplus >= 201103L\n-      static constexpr signed char \n+      static constexpr signed char\n       lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (signed char);\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \n+      static _GLIBCXX_USE_CONSTEXPR int digits10\n        = __glibcxx_digits10 (signed char);\n #if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n@@ -542,10 +542,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR signed char \n+      static _GLIBCXX_CONSTEXPR signed char\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR signed char \n+      static _GLIBCXX_CONSTEXPR signed char\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -556,21 +556,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR signed char \n+      static _GLIBCXX_CONSTEXPR signed char\n       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<signed char>(0); }\n \n-      static _GLIBCXX_CONSTEXPR signed char \n+      static _GLIBCXX_CONSTEXPR signed char\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<signed char>(0); }\n \n-      static _GLIBCXX_CONSTEXPR signed char \n+      static _GLIBCXX_CONSTEXPR signed char\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<signed char>(0); }\n \n-      static _GLIBCXX_CONSTEXPR signed char \n+      static _GLIBCXX_CONSTEXPR signed char\n       denorm_min() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<signed char>(0); }\n \n@@ -580,7 +580,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -590,20 +590,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR unsigned char \n+      static _GLIBCXX_CONSTEXPR unsigned char\n       min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR unsigned char \n+      static _GLIBCXX_CONSTEXPR unsigned char\n       max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }\n \n #if __cplusplus >= 201103L\n-      static constexpr unsigned char \n+      static constexpr unsigned char\n       lowest() noexcept { return min(); }\n #endif\n \n-      static _GLIBCXX_USE_CONSTEXPR int digits \n+      static _GLIBCXX_USE_CONSTEXPR int digits\n        = __glibcxx_digits (unsigned char);\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \n+      static _GLIBCXX_USE_CONSTEXPR int digits10\n        = __glibcxx_digits10 (unsigned char);\n #if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n@@ -613,10 +613,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR unsigned char \n+      static _GLIBCXX_CONSTEXPR unsigned char\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR unsigned char \n+      static _GLIBCXX_CONSTEXPR unsigned char\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -627,23 +627,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR unsigned char \n+      static _GLIBCXX_CONSTEXPR unsigned char\n       infinity() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned char>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned char \n+      static _GLIBCXX_CONSTEXPR unsigned char\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned char>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned char \n+      static _GLIBCXX_CONSTEXPR unsigned char\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned char>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned char \n+      static _GLIBCXX_CONSTEXPR unsigned char\n       denorm_min() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned char>(0); }\n \n@@ -653,7 +653,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -663,10 +663,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR wchar_t \n+      static _GLIBCXX_CONSTEXPR wchar_t\n       min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min (wchar_t); }\n \n-      static _GLIBCXX_CONSTEXPR wchar_t \n+      static _GLIBCXX_CONSTEXPR wchar_t\n       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (wchar_t); }\n \n #if __cplusplus >= 201103L\n@@ -675,7 +675,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (wchar_t);\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \n+      static _GLIBCXX_USE_CONSTEXPR int digits10\n        = __glibcxx_digits10 (wchar_t);\n #if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n@@ -685,10 +685,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR wchar_t \n+      static _GLIBCXX_CONSTEXPR wchar_t\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR wchar_t \n+      static _GLIBCXX_CONSTEXPR wchar_t\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -699,20 +699,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR wchar_t \n+      static _GLIBCXX_CONSTEXPR wchar_t\n       infinity() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }\n \n-      static _GLIBCXX_CONSTEXPR wchar_t \n+      static _GLIBCXX_CONSTEXPR wchar_t\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }\n \n-      static _GLIBCXX_CONSTEXPR wchar_t \n+      static _GLIBCXX_CONSTEXPR wchar_t\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }\n \n-      static _GLIBCXX_CONSTEXPR wchar_t \n+      static _GLIBCXX_CONSTEXPR wchar_t\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n@@ -721,7 +721,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -732,13 +732,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static constexpr bool is_specialized = true;\n \n-      static constexpr char16_t \n+      static constexpr char16_t\n       min() noexcept { return __glibcxx_min (char16_t); }\n \n-      static constexpr char16_t \n+      static constexpr char16_t\n       max() noexcept { return __glibcxx_max (char16_t); }\n \n-      static constexpr char16_t \n+      static constexpr char16_t\n       lowest() noexcept { return min(); }\n \n       static constexpr int digits = __glibcxx_digits (char16_t);\n@@ -749,10 +749,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr bool is_exact = true;\n       static constexpr int radix = 2;\n \n-      static constexpr char16_t \n+      static constexpr char16_t\n       epsilon() noexcept { return 0; }\n \n-      static constexpr char16_t \n+      static constexpr char16_t\n       round_error() noexcept { return 0; }\n \n       static constexpr int min_exponent = 0;\n@@ -766,16 +766,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr float_denorm_style has_denorm = denorm_absent;\n       static constexpr bool has_denorm_loss = false;\n \n-      static constexpr char16_t \n+      static constexpr char16_t\n       infinity() noexcept { return char16_t(); }\n \n-      static constexpr char16_t \n+      static constexpr char16_t\n       quiet_NaN() noexcept { return char16_t(); }\n \n-      static constexpr char16_t \n+      static constexpr char16_t\n       signaling_NaN() noexcept { return char16_t(); }\n \n-      static constexpr char16_t \n+      static constexpr char16_t\n       denorm_min() noexcept { return char16_t(); }\n \n       static constexpr bool is_iec559 = false;\n@@ -793,13 +793,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static constexpr bool is_specialized = true;\n \n-      static constexpr char32_t \n+      static constexpr char32_t\n       min() noexcept { return __glibcxx_min (char32_t); }\n \n-      static constexpr char32_t \n+      static constexpr char32_t\n       max() noexcept { return __glibcxx_max (char32_t); }\n \n-      static constexpr char32_t \n+      static constexpr char32_t\n       lowest() noexcept { return min(); }\n \n       static constexpr int digits = __glibcxx_digits (char32_t);\n@@ -810,10 +810,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr bool is_exact = true;\n       static constexpr int radix = 2;\n \n-      static constexpr char32_t \n+      static constexpr char32_t\n       epsilon() noexcept { return 0; }\n \n-      static constexpr char32_t \n+      static constexpr char32_t\n       round_error() noexcept { return 0; }\n \n       static constexpr int min_exponent = 0;\n@@ -827,16 +827,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr float_denorm_style has_denorm = denorm_absent;\n       static constexpr bool has_denorm_loss = false;\n \n-      static constexpr char32_t \n+      static constexpr char32_t\n       infinity() noexcept { return char32_t(); }\n \n-      static constexpr char32_t \n+      static constexpr char32_t\n       quiet_NaN() noexcept { return char32_t(); }\n \n-      static constexpr char32_t \n+      static constexpr char32_t\n       signaling_NaN() noexcept { return char32_t(); }\n \n-      static constexpr char32_t \n+      static constexpr char32_t\n       denorm_min() noexcept { return char32_t(); }\n \n       static constexpr bool is_iec559 = false;\n@@ -855,14 +855,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR short \n+      static _GLIBCXX_CONSTEXPR short\n       min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }\n \n-      static _GLIBCXX_CONSTEXPR short \n+      static _GLIBCXX_CONSTEXPR short\n       max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }\n \n #if __cplusplus >= 201103L\n-      static constexpr short \n+      static constexpr short\n       lowest() noexcept { return min(); }\n #endif\n \n@@ -876,10 +876,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR short \n+      static _GLIBCXX_CONSTEXPR short\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR short \n+      static _GLIBCXX_CONSTEXPR short\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -890,20 +890,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR short \n+      static _GLIBCXX_CONSTEXPR short\n       infinity() _GLIBCXX_USE_NOEXCEPT { return short(); }\n \n-      static _GLIBCXX_CONSTEXPR short \n+      static _GLIBCXX_CONSTEXPR short\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return short(); }\n \n-      static _GLIBCXX_CONSTEXPR short \n+      static _GLIBCXX_CONSTEXPR short\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return short(); }\n \n-      static _GLIBCXX_CONSTEXPR short \n+      static _GLIBCXX_CONSTEXPR short\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return short(); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n@@ -912,7 +912,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -922,20 +922,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR unsigned short \n+      static _GLIBCXX_CONSTEXPR unsigned short\n       min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR unsigned short \n+      static _GLIBCXX_CONSTEXPR unsigned short\n       max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__ * 2U + 1; }\n \n #if __cplusplus >= 201103L\n-      static constexpr unsigned short \n+      static constexpr unsigned short\n       lowest() noexcept { return min(); }\n #endif\n \n-      static _GLIBCXX_USE_CONSTEXPR int digits \n+      static _GLIBCXX_USE_CONSTEXPR int digits\n        = __glibcxx_digits (unsigned short);\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \n+      static _GLIBCXX_USE_CONSTEXPR int digits10\n        = __glibcxx_digits10 (unsigned short);\n #if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n@@ -945,10 +945,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR unsigned short \n+      static _GLIBCXX_CONSTEXPR unsigned short\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR unsigned short \n+      static _GLIBCXX_CONSTEXPR unsigned short\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -959,23 +959,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR unsigned short \n+      static _GLIBCXX_CONSTEXPR unsigned short\n       infinity() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned short>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned short \n+      static _GLIBCXX_CONSTEXPR unsigned short\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned short>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned short \n+      static _GLIBCXX_CONSTEXPR unsigned short\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned short>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned short \n+      static _GLIBCXX_CONSTEXPR unsigned short\n       denorm_min() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned short>(0); }\n \n@@ -985,7 +985,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -995,14 +995,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR int \n+      static _GLIBCXX_CONSTEXPR int\n       min() _GLIBCXX_USE_NOEXCEPT { return -__INT_MAX__ - 1; }\n \n-      static _GLIBCXX_CONSTEXPR int \n+      static _GLIBCXX_CONSTEXPR int\n       max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__; }\n \n #if __cplusplus >= 201103L\n-      static constexpr int \n+      static constexpr int\n       lowest() noexcept { return min(); }\n #endif\n \n@@ -1016,10 +1016,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR int \n+      static _GLIBCXX_CONSTEXPR int\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR int \n+      static _GLIBCXX_CONSTEXPR int\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -1030,20 +1030,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR int \n+      static _GLIBCXX_CONSTEXPR int\n       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }\n \n-      static _GLIBCXX_CONSTEXPR int \n+      static _GLIBCXX_CONSTEXPR int\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }\n \n-      static _GLIBCXX_CONSTEXPR int \n+      static _GLIBCXX_CONSTEXPR int\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }\n \n-      static _GLIBCXX_CONSTEXPR int \n+      static _GLIBCXX_CONSTEXPR int\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n@@ -1052,7 +1052,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -1062,20 +1062,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR unsigned int \n+      static _GLIBCXX_CONSTEXPR unsigned int\n       min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR unsigned int \n+      static _GLIBCXX_CONSTEXPR unsigned int\n       max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__ * 2U + 1; }\n \n #if __cplusplus >= 201103L\n-      static constexpr unsigned int \n+      static constexpr unsigned int\n       lowest() noexcept { return min(); }\n #endif\n \n-      static _GLIBCXX_USE_CONSTEXPR int digits \n+      static _GLIBCXX_USE_CONSTEXPR int digits\n        = __glibcxx_digits (unsigned int);\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \n+      static _GLIBCXX_USE_CONSTEXPR int digits10\n        = __glibcxx_digits10 (unsigned int);\n #if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n@@ -1085,10 +1085,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR unsigned int \n+      static _GLIBCXX_CONSTEXPR unsigned int\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR unsigned int \n+      static _GLIBCXX_CONSTEXPR unsigned int\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -1099,22 +1099,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR unsigned int \n+      static _GLIBCXX_CONSTEXPR unsigned int\n       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned int>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned int \n+      static _GLIBCXX_CONSTEXPR unsigned int\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned int>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned int \n+      static _GLIBCXX_CONSTEXPR unsigned int\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned int>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned int \n+      static _GLIBCXX_CONSTEXPR unsigned int\n       denorm_min() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned int>(0); }\n \n@@ -1124,7 +1124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -1137,11 +1137,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR long\n       min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }\n \n-      static _GLIBCXX_CONSTEXPR long \n+      static _GLIBCXX_CONSTEXPR long\n       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }\n \n #if __cplusplus >= 201103L\n-      static constexpr long \n+      static constexpr long\n       lowest() noexcept { return min(); }\n #endif\n \n@@ -1155,10 +1155,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR long \n+      static _GLIBCXX_CONSTEXPR long\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR long \n+      static _GLIBCXX_CONSTEXPR long\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -1169,20 +1169,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR long \n+      static _GLIBCXX_CONSTEXPR long\n       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR long \n+      static _GLIBCXX_CONSTEXPR long\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR long \n+      static _GLIBCXX_CONSTEXPR long\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR long \n+      static _GLIBCXX_CONSTEXPR long\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n@@ -1191,7 +1191,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -1201,20 +1201,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR unsigned long \n+      static _GLIBCXX_CONSTEXPR unsigned long\n       min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR unsigned long \n+      static _GLIBCXX_CONSTEXPR unsigned long\n       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__ * 2UL + 1; }\n \n #if __cplusplus >= 201103L\n-      static constexpr unsigned long \n+      static constexpr unsigned long\n       lowest() noexcept { return min(); }\n #endif\n \n-      static _GLIBCXX_USE_CONSTEXPR int digits \n+      static _GLIBCXX_USE_CONSTEXPR int digits\n        = __glibcxx_digits (unsigned long);\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \n+      static _GLIBCXX_USE_CONSTEXPR int digits10\n        = __glibcxx_digits10 (unsigned long);\n #if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n@@ -1224,10 +1224,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR unsigned long \n+      static _GLIBCXX_CONSTEXPR unsigned long\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR unsigned long \n+      static _GLIBCXX_CONSTEXPR unsigned long\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -1238,23 +1238,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR unsigned long \n+      static _GLIBCXX_CONSTEXPR unsigned long\n       infinity() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned long \n+      static _GLIBCXX_CONSTEXPR unsigned long\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned long \n+      static _GLIBCXX_CONSTEXPR unsigned long\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned long \n+      static _GLIBCXX_CONSTEXPR unsigned long\n       denorm_min() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned long>(0); }\n \n@@ -1264,7 +1264,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -1274,20 +1274,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR long long \n+      static _GLIBCXX_CONSTEXPR long long\n       min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }\n \n-      static _GLIBCXX_CONSTEXPR long long \n+      static _GLIBCXX_CONSTEXPR long long\n       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }\n \n #if __cplusplus >= 201103L\n-      static constexpr long long \n+      static constexpr long long\n       lowest() noexcept { return min(); }\n #endif\n \n-      static _GLIBCXX_USE_CONSTEXPR int digits \n+      static _GLIBCXX_USE_CONSTEXPR int digits\n        = __glibcxx_digits (long long);\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \n+      static _GLIBCXX_USE_CONSTEXPR int digits10\n        = __glibcxx_digits10 (long long);\n #if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n@@ -1297,10 +1297,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR long long \n+      static _GLIBCXX_CONSTEXPR long long\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR long long \n+      static _GLIBCXX_CONSTEXPR long long\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -1311,21 +1311,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR long long \n+      static _GLIBCXX_CONSTEXPR long long\n       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR long long \n+      static _GLIBCXX_CONSTEXPR long long\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR long long \n+      static _GLIBCXX_CONSTEXPR long long\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<long long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR long long \n+      static _GLIBCXX_CONSTEXPR long long\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n@@ -1334,7 +1334,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -1344,20 +1344,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR unsigned long long \n+      static _GLIBCXX_CONSTEXPR unsigned long long\n       min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR unsigned long long \n+      static _GLIBCXX_CONSTEXPR unsigned long long\n       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__ * 2ULL + 1; }\n \n #if __cplusplus >= 201103L\n-      static constexpr unsigned long long \n+      static constexpr unsigned long long\n       lowest() noexcept { return min(); }\n #endif\n \n-      static _GLIBCXX_USE_CONSTEXPR int digits \n+      static _GLIBCXX_USE_CONSTEXPR int digits\n        = __glibcxx_digits (unsigned long long);\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \n+      static _GLIBCXX_USE_CONSTEXPR int digits10\n        = __glibcxx_digits10 (unsigned long long);\n #if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n@@ -1367,10 +1367,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR unsigned long long \n+      static _GLIBCXX_CONSTEXPR unsigned long long\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR unsigned long long \n+      static _GLIBCXX_CONSTEXPR unsigned long long\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -1381,23 +1381,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR unsigned long long \n+      static _GLIBCXX_CONSTEXPR unsigned long long\n       infinity() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned long long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned long long \n+      static _GLIBCXX_CONSTEXPR unsigned long long\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned long long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned long long \n+      static _GLIBCXX_CONSTEXPR unsigned long long\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned long long>(0); }\n \n-      static _GLIBCXX_CONSTEXPR unsigned long long \n+      static _GLIBCXX_CONSTEXPR unsigned long long\n       denorm_min() _GLIBCXX_USE_NOEXCEPT\n       { return static_cast<unsigned long long>(0); }\n \n@@ -1407,7 +1407,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_toward_zero;\n     };\n \n@@ -1595,14 +1595,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR float \n+      static _GLIBCXX_CONSTEXPR float\n       min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }\n \n-      static _GLIBCXX_CONSTEXPR float \n+      static _GLIBCXX_CONSTEXPR float\n       max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }\n \n #if __cplusplus >= 201103L\n-      static constexpr float \n+      static constexpr float\n       lowest() noexcept { return -__FLT_MAX__; }\n #endif\n \n@@ -1617,10 +1617,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;\n       static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;\n \n-      static _GLIBCXX_CONSTEXPR float \n+      static _GLIBCXX_CONSTEXPR float\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }\n \n-      static _GLIBCXX_CONSTEXPR float \n+      static _GLIBCXX_CONSTEXPR float\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0.5F; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = __FLT_MIN_EXP__;\n@@ -1633,19 +1633,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = has_quiet_NaN;\n       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n \t= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;\n-      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss \n+      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss\n        = __glibcxx_float_has_denorm_loss;\n \n-      static _GLIBCXX_CONSTEXPR float \n+      static _GLIBCXX_CONSTEXPR float\n       infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }\n \n-      static _GLIBCXX_CONSTEXPR float \n+      static _GLIBCXX_CONSTEXPR float\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nanf(\"\"); }\n \n-      static _GLIBCXX_CONSTEXPR float \n+      static _GLIBCXX_CONSTEXPR float\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nansf(\"\"); }\n \n-      static _GLIBCXX_CONSTEXPR float \n+      static _GLIBCXX_CONSTEXPR float\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return __FLT_DENORM_MIN__; }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559\n@@ -1654,9 +1654,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_float_traps;\n-      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before \n+      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before\n        = __glibcxx_float_tinyness_before;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_to_nearest;\n     };\n \n@@ -1670,14 +1670,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR double \n+      static _GLIBCXX_CONSTEXPR double\n       min() _GLIBCXX_USE_NOEXCEPT { return __DBL_MIN__; }\n \n-      static _GLIBCXX_CONSTEXPR double \n+      static _GLIBCXX_CONSTEXPR double\n       max() _GLIBCXX_USE_NOEXCEPT { return __DBL_MAX__; }\n \n #if __cplusplus >= 201103L\n-      static constexpr double \n+      static constexpr double\n       lowest() noexcept { return -__DBL_MAX__; }\n #endif\n \n@@ -1692,10 +1692,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;\n       static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;\n \n-      static _GLIBCXX_CONSTEXPR double \n+      static _GLIBCXX_CONSTEXPR double\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return __DBL_EPSILON__; }\n \n-      static _GLIBCXX_CONSTEXPR double \n+      static _GLIBCXX_CONSTEXPR double\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0.5; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = __DBL_MIN_EXP__;\n@@ -1708,19 +1708,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = has_quiet_NaN;\n       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n \t= bool(__DBL_HAS_DENORM__) ? denorm_present : denorm_absent;\n-      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss \n+      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss\n         = __glibcxx_double_has_denorm_loss;\n \n-      static _GLIBCXX_CONSTEXPR double \n+      static _GLIBCXX_CONSTEXPR double\n       infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_val(); }\n \n-      static _GLIBCXX_CONSTEXPR double \n+      static _GLIBCXX_CONSTEXPR double\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nan(\"\"); }\n \n-      static _GLIBCXX_CONSTEXPR double \n+      static _GLIBCXX_CONSTEXPR double\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nans(\"\"); }\n \n-      static _GLIBCXX_CONSTEXPR double \n+      static _GLIBCXX_CONSTEXPR double\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return __DBL_DENORM_MIN__; }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559\n@@ -1729,9 +1729,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_double_traps;\n-      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before \n+      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before\n        = __glibcxx_double_tinyness_before;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n        = round_to_nearest;\n     };\n \n@@ -1745,14 +1745,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR long double \n+      static _GLIBCXX_CONSTEXPR long double\n       min() _GLIBCXX_USE_NOEXCEPT { return __LDBL_MIN__; }\n \n-      static _GLIBCXX_CONSTEXPR long double \n+      static _GLIBCXX_CONSTEXPR long double\n       max() _GLIBCXX_USE_NOEXCEPT { return __LDBL_MAX__; }\n \n #if __cplusplus >= 201103L\n-      static constexpr long double \n+      static constexpr long double\n       lowest() noexcept { return -__LDBL_MAX__; }\n #endif\n \n@@ -1767,10 +1767,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;\n       static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;\n \n-      static _GLIBCXX_CONSTEXPR long double \n+      static _GLIBCXX_CONSTEXPR long double\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return __LDBL_EPSILON__; }\n \n-      static _GLIBCXX_CONSTEXPR long double \n+      static _GLIBCXX_CONSTEXPR long double\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0.5L; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = __LDBL_MIN_EXP__;\n@@ -1786,16 +1786,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss\n \t= __glibcxx_long_double_has_denorm_loss;\n \n-      static _GLIBCXX_CONSTEXPR long double \n+      static _GLIBCXX_CONSTEXPR long double\n       infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_vall(); }\n \n-      static _GLIBCXX_CONSTEXPR long double \n+      static _GLIBCXX_CONSTEXPR long double\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nanl(\"\"); }\n \n-      static _GLIBCXX_CONSTEXPR long double \n+      static _GLIBCXX_CONSTEXPR long double\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nansl(\"\"); }\n \n-      static _GLIBCXX_CONSTEXPR long double \n+      static _GLIBCXX_CONSTEXPR long double\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return __LDBL_DENORM_MIN__; }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559\n@@ -1804,9 +1804,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;\n \n       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_long_double_traps;\n-      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = \n+      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before =\n \t\t\t\t\t __glibcxx_long_double_tinyness_before;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style = \n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style =\n \t\t\t\t\t\t      round_to_nearest;\n     };\n "}, {"sha": "9d7b61cd840b1aa7e2cda385615be3cacf39a0a9", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -3,14 +3,14 @@\n // Copyright (C) 2008-2016 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the \n-// terms of the GNU General Public License as published by the \n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 3, or (at your option)\n // any later version.\n \n // This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the \n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n // Under Section 7 of GPL version 3, you are granted additional\n@@ -94,11 +94,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static const uintmax_t __b0 = __static_abs<_Qn>::value % __c;\n       static const uintmax_t __b1 = __static_abs<_Qn>::value / __c;\n \n-      static_assert(__a1 == 0 || __b1 == 0, \n+      static_assert(__a1 == 0 || __b1 == 0,\n \t\t    \"overflow in multiplication\");\n-      static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1), \n+      static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1),\n \t\t    \"overflow in multiplication\");\n-      static_assert(__b0 * __a0 <= __INTMAX_MAX__, \n+      static_assert(__b0 * __a0 <= __INTMAX_MAX__,\n \t\t    \"overflow in multiplication\");\n       static_assert((__a0 * __b1 + __b0 * __a1) * __c\n \t\t    <= __INTMAX_MAX__ -  __b0 * __a0,\n@@ -257,7 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *    std::ratio<7,-21>::num == -1;\n    *    std::ratio<7,-21>::den == 3;\n    *  @endcode\n-   *  \n+   *\n   */\n   template<intmax_t _Num, intmax_t _Den = 1>\n     struct ratio\n@@ -340,7 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct ratio_equal\n     : integral_constant<bool, _R1::num == _R2::num && _R1::den == _R2::den>\n     { };\n-  \n+\n   /// ratio_not_equal\n   template<typename _R1, typename _R2>\n     struct ratio_not_equal\n@@ -354,7 +354,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __ratio_less_impl_1\n     : integral_constant<bool, __big_less<_Left::__hi, _Left::__lo,\n            _Right::__hi, _Right::__lo>::value>\n-    { }; \n+    { };\n \n   template<typename _R1, typename _R2,\n \t   bool = (_R1::num == 0 || _R2::num == 0\n@@ -382,13 +382,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct ratio_less\n     : __ratio_less_impl<_R1, _R2>::type\n     { };\n-    \n+\n   /// ratio_less_equal\n   template<typename _R1, typename _R2>\n     struct ratio_less_equal\n     : integral_constant<bool, !ratio_less<_R2, _R1>::value>\n     { };\n-  \n+\n   /// ratio_greater\n   template<typename _R1, typename _R2>\n     struct ratio_greater"}, {"sha": "310c85c65073e5c93cb11f033960b13a686208a0", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -68,7 +68,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _OuterAlloc, typename... _InnerAllocs>\n     class scoped_allocator_adaptor;\n \n-  template<typename...> \n+  template<typename...>\n     struct __inner_type_impl;\n \n   template<typename _Outer>\n@@ -81,25 +81,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __inner_type_impl(__inner_type_impl&&) = default;\n       __inner_type_impl& operator=(const __inner_type_impl&) = default;\n       __inner_type_impl& operator=(__inner_type_impl&&) = default;\n-      \n+\n       template<typename _Alloc>\n       __inner_type_impl(const __inner_type_impl<_Alloc>& __other)\n       { }\n-      \n+\n       template<typename _Alloc>\n       __inner_type_impl(__inner_type_impl<_Alloc>&& __other)\n       { }\n-      \n-      __type& \n+\n+      __type&\n       _M_get(__type* __p) noexcept { return *__p; }\n \n-      const __type& \n+      const __type&\n       _M_get(const __type* __p) const noexcept { return *__p; }\n-      \n-      tuple<> \n+\n+      tuple<>\n       _M_tie() const noexcept { return tuple<>(); }\n-      \n-      bool \n+\n+      bool\n       operator==(const __inner_type_impl&) const noexcept\n       { return true; }\n     };\n@@ -108,17 +108,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __inner_type_impl<_Outer, _InnerHead, _InnerTail...>\n     {\n       typedef scoped_allocator_adaptor<_InnerHead, _InnerTail...> __type;\n-      \n+\n       __inner_type_impl() = default;\n       __inner_type_impl(const __inner_type_impl&) = default;\n       __inner_type_impl(__inner_type_impl&&) = default;\n       __inner_type_impl& operator=(const __inner_type_impl&) = default;\n       __inner_type_impl& operator=(__inner_type_impl&&) = default;\n-      \n+\n       template<typename... _Allocs>\n       __inner_type_impl(const __inner_type_impl<_Allocs...>& __other)\n       : _M_inner(__other._M_inner) { }\n-      \n+\n       template<typename... _Allocs>\n       __inner_type_impl(__inner_type_impl<_Allocs...>&& __other)\n       : _M_inner(std::move(__other._M_inner)) { }\n@@ -128,24 +128,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __inner_type_impl(_Args&&... __args)\n       : _M_inner(std::forward<_Args>(__args)...) { }\n \n-      __type& \n+      __type&\n       _M_get(void*) noexcept { return _M_inner; }\n-      \n-      const __type& \n+\n+      const __type&\n       _M_get(const void*) const noexcept { return _M_inner; }\n-      \n-      tuple<const _InnerHead&, const _InnerTail&...> \n+\n+      tuple<const _InnerHead&, const _InnerTail&...>\n       _M_tie() const noexcept\n       { return _M_inner._M_tie(); }\n-      \n-      bool \n+\n+      bool\n       operator==(const __inner_type_impl& __other) const noexcept\n       { return _M_inner == __other._M_inner; }\n-      \n+\n     private:\n       template<typename...> friend class __inner_type_impl;\n       template<typename, typename...> friend class scoped_allocator_adaptor;\n-      \n+\n       __type _M_inner;\n     };\n \n@@ -176,9 +176,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc>\n \tusing __outermost_alloc_traits\n \t  = allocator_traits<__outermost_type<_Alloc>>;\n-      \n+\n       template<typename _Tp, typename... _Args>\n-        void \n+        void\n         _M_construct(__uses_alloc0, _Tp* __p, _Args&&... __args)\n         {\n \t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;\n@@ -190,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __uses_alloc2<typename __inner_type::__type> __uses_alloc2_;\n \n       template<typename _Tp, typename... _Args>\n-        void \n+        void\n         _M_construct(__uses_alloc1_, _Tp* __p, _Args&&... __args)\n         {\n \t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;\n@@ -200,7 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         }\n \n       template<typename _Tp, typename... _Args>\n-        void \n+        void\n         _M_construct(__uses_alloc2_, _Tp* __p, _Args&&... __args)\n         {\n \t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;"}, {"sha": "bfe2ca1cdacdebb1cf07a495d5014e9646a816a4", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -209,7 +209,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       virtual streamsize\n       showmanyc()\n-      { \n+      {\n \tstreamsize __ret = -1;\n \tif (_M_mode & ios_base::in)\n \t  {\n@@ -248,10 +248,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t    // that an external char_type array of length __n exists\n \t    // and has been pre-allocated. If this is not the case,\n \t    // things will quickly blow up.\n-\t    \n+\n \t    // Step 1: Destroy the current internal array.\n \t    _M_string.clear();\n-\t    \n+\n \t    // Step 2: Use the external array.\n \t    _M_sync(__s, __n, 0);\n \t  }"}, {"sha": "459bc02db8f9ed21b15c5b4f19c516646dd43188", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -110,13 +110,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  program runs (e.g., violations of class invariants).\n    *  @brief One of two subclasses of exception.\n    */\n-  class logic_error : public exception \n+  class logic_error : public exception\n   {\n     __cow_string _M_msg;\n \n   public:\n     /** Takes a character string describing the error.  */\n-    explicit \n+    explicit\n     logic_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n \n #if __cplusplus >= 201103L\n@@ -133,7 +133,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /** Returns a C-style character string describing the general cause of\n      *  the current error (the same string passed to the ctor).  */\n-    virtual const char* \n+    virtual const char*\n     what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n \n # ifdef _GLIBCXX_TM_TS_INTERNAL\n@@ -144,7 +144,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /** Thrown by the library, or by you, to report domain errors (domain in\n    *  the mathematical sense).  */\n-  class domain_error : public logic_error \n+  class domain_error : public logic_error\n   {\n   public:\n     explicit domain_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n@@ -155,7 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n   /** Thrown to report invalid arguments to functions.  */\n-  class invalid_argument : public logic_error \n+  class invalid_argument : public logic_error\n   {\n   public:\n     explicit invalid_argument(const string& __arg) _GLIBCXX_TXN_SAFE;\n@@ -167,7 +167,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /** Thrown when an object is constructed that would exceed its maximum\n    *  permitted size (e.g., a basic_string instance).  */\n-  class length_error : public logic_error \n+  class length_error : public logic_error\n   {\n   public:\n     explicit length_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n@@ -179,7 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /** This represents an argument whose value is not within the expected\n    *  range (e.g., boundary checks in basic_string).  */\n-  class out_of_range : public logic_error \n+  class out_of_range : public logic_error\n   {\n   public:\n     explicit out_of_range(const string& __arg) _GLIBCXX_TXN_SAFE;\n@@ -194,13 +194,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the program executes.\n    *  @brief One of two subclasses of exception.\n    */\n-  class runtime_error : public exception \n+  class runtime_error : public exception\n   {\n     __cow_string _M_msg;\n \n   public:\n     /** Takes a character string describing the error.  */\n-    explicit \n+    explicit\n     runtime_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n \n #if __cplusplus >= 201103L\n@@ -217,7 +217,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /** Returns a C-style character string describing the general cause of\n      *  the current error (the same string passed to the ctor).  */\n-    virtual const char* \n+    virtual const char*\n     what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n \n # ifdef _GLIBCXX_TM_TS_INTERNAL\n@@ -227,7 +227,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n   /** Thrown to indicate range errors in internal computations.  */\n-  class range_error : public runtime_error \n+  class range_error : public runtime_error\n   {\n   public:\n     explicit range_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n@@ -238,7 +238,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n   /** Thrown to indicate arithmetic overflow.  */\n-  class overflow_error : public runtime_error \n+  class overflow_error : public runtime_error\n   {\n   public:\n     explicit overflow_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n@@ -249,7 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n   /** Thrown to indicate arithmetic underflow.  */\n-  class underflow_error : public runtime_error \n+  class underflow_error : public runtime_error\n   {\n   public:\n     explicit underflow_error(const string& __arg) _GLIBCXX_TXN_SAFE;"}, {"sha": "77f899ab63a3c923d689624fc1fbea4b28087828", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -46,10 +46,10 @@\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>\n #include <bits/stl_function.h> // For less\n-#include <ext/numeric_traits.h> \n-#include <bits/stl_algobase.h> \n+#include <ext/numeric_traits.h>\n+#include <bits/stl_algobase.h>\n #include <bits/range_access.h>\n #include <bits/basic_string.h>\n-#include <bits/basic_string.tcc> \n+#include <bits/basic_string.tcc>\n \n #endif /* _GLIBCXX_STRING */"}, {"sha": "79320fac5988e12e708e1455c97d71656265c147", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -56,7 +56,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct is_error_condition_enum : public false_type { };\n \n-  template<> \n+  template<>\n     struct is_error_condition_enum<errc>\n     : public true_type { };\n \n@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     error_category(const error_category&) = delete;\n     error_category& operator=(const error_category&) = delete;\n \n-    virtual const char* \n+    virtual const char*\n     name() const noexcept = 0;\n \n     // We need two different virtual functions here, one returning a\n@@ -91,7 +91,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     virtual string\n     message(int) const = 0;\n #else\n-    virtual string \n+    virtual string\n     message(int) const = 0;\n \n   private:\n@@ -103,21 +103,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     virtual error_condition\n     default_error_condition(int __i) const noexcept;\n \n-    virtual bool \n+    virtual bool\n     equivalent(int __i, const error_condition& __cond) const noexcept;\n \n-    virtual bool \n+    virtual bool\n     equivalent(const error_code& __code, int __i) const noexcept;\n \n-    bool \n+    bool\n     operator<(const error_category& __other) const noexcept\n     { return less<const error_category*>()(this, &__other); }\n \n-    bool \n+    bool\n     operator==(const error_category& __other) const noexcept\n     { return this == &__other; }\n \n-    bool \n+    bool\n     operator!=(const error_category& __other) const noexcept\n     { return this != &__other; }\n   };\n@@ -148,14 +148,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       error_code(_ErrorCodeEnum __e) noexcept\n       { *this = make_error_code(__e); }\n \n-    void \n+    void\n     assign(int __v, const error_category& __cat) noexcept\n     {\n       _M_value = __v;\n-      _M_cat = &__cat; \n+      _M_cat = &__cat;\n     }\n \n-    void \n+    void\n     clear() noexcept\n     { assign(0, system_category()); }\n \n@@ -168,15 +168,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     int\n     value() const noexcept { return _M_value; }\n-      \n-    const error_category&  \n+\n+    const error_category&\n     category() const noexcept { return *_M_cat; }\n \n-    error_condition \n+    error_condition\n     default_error_condition() const noexcept;\n \n     _GLIBCXX_DEFAULT_ABI_TAG\n-    string \n+    string\n     message() const\n     { return category().message(value()); }\n \n@@ -198,7 +198,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   inline bool\n   operator<(const error_code& __lhs, const error_code& __rhs) noexcept\n-  { \n+  {\n     return (__lhs.category() < __rhs.category()\n \t    || (__lhs.category() == __rhs.category()\n \t\t&& __lhs.value() < __rhs.value()));\n@@ -213,7 +213,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// error_condition\n   // Portable error identification\n-  struct error_condition \n+  struct error_condition\n   {\n     error_condition() noexcept\n     : _M_value(0), _M_cat(&generic_category()) { }\n@@ -240,7 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator=(_ErrorConditionEnum __e) noexcept\n       { return *this = make_error_condition(__e); }\n \n-    void \n+    void\n     clear() noexcept\n     { assign(0, generic_category()); }\n \n@@ -252,7 +252,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     category() const noexcept { return *_M_cat; }\n \n     _GLIBCXX_DEFAULT_ABI_TAG\n-    string \n+    string\n     message() const\n     { return category().message(value()); }\n \n@@ -270,7 +270,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   make_error_condition(errc __e) noexcept\n   { return error_condition(static_cast<int>(__e), generic_category()); }\n \n-  inline bool \n+  inline bool\n   operator<(const error_condition& __lhs,\n \t    const error_condition& __rhs) noexcept\n   {\n@@ -325,7 +325,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return !(__lhs == __rhs); }\n \n \n-  /** \n+  /**\n    *  @brief Thrown to indicate error code of underlying system.\n    *\n    *  @ingroup exceptions\n@@ -358,7 +358,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     virtual ~system_error() noexcept;\n \n-    const error_code& \n+    const error_code&\n     code() const noexcept { return _M_code; }\n   };\n "}, {"sha": "7e185d310dd18abab2b9e350c3f6135f96e103da", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -112,7 +112,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { swap(__t); }\n \n     template<typename _Callable, typename... _Args>\n-      explicit \n+      explicit\n       thread(_Callable&& __f, _Args&&... __args)\n       {\n #ifdef GTHR_ACTIVE_PROXY"}, {"sha": "9c425e77562beb1b8048619e5dda2c9e6edaac50", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -173,7 +173,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * get() operation.\n    */\n   template<std::size_t _Idx, typename... _Elements>\n-    struct _Tuple_impl; \n+    struct _Tuple_impl;\n \n   /**\n    * Recursive tuple implementation. Here we store the @c Head element\n@@ -190,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;\n       typedef _Head_base<_Idx, _Head> _Base;\n \n-      static constexpr _Head&  \n+      static constexpr _Head&\n       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\n \n       static constexpr const _Head&\n@@ -205,12 +205,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr _Tuple_impl()\n       : _Inherited(), _Base() { }\n \n-      explicit \n+      explicit\n       constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)\n       : _Inherited(__tail...), _Base(__head) { }\n \n       template<typename _UHead, typename... _UTail, typename = typename\n-               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> \n+               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>\n         explicit\n         constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)\n \t: _Inherited(std::forward<_UTail>(__tail)...),\n@@ -222,7 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Tuple_impl(_Tuple_impl&& __in)\n       noexcept(__and_<is_nothrow_move_constructible<_Head>,\n \t              is_nothrow_move_constructible<_Inherited>>::value)\n-      : _Inherited(std::move(_M_tail(__in))), \n+      : _Inherited(std::move(_M_tail(__in))),\n \t_Base(std::forward<_Head>(_M_head(__in))) { }\n \n       template<typename... _UElements>\n@@ -260,13 +260,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc>\n         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            const _Tuple_impl& __in)\n-\t: _Inherited(__tag, __a, _M_tail(__in)), \n+\t: _Inherited(__tag, __a, _M_tail(__in)),\n           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }\n \n       template<typename _Alloc>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _Tuple_impl&& __in)\n-\t: _Inherited(__tag, __a, std::move(_M_tail(__in))), \n+\t: _Inherited(__tag, __a, std::move(_M_tail(__in))),\n \t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n \t        std::forward<_Head>(_M_head(__in))) { }\n \n@@ -551,7 +551,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n   /// Primary class template, tuple\n-  template<typename... _Elements> \n+  template<typename... _Elements>\n     class tuple : public _Tuple_impl<0, _Elements...>\n     {\n       typedef _Tuple_impl<0, _Elements...> _Inherited;\n@@ -658,7 +658,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr tuple(const tuple&) = default;\n \n-      constexpr tuple(tuple&&) = default; \n+      constexpr tuple(tuple&&) = default;\n \n       // Shortcut for the cases where constructors taking tuples\n       // must avoid creating temporaries.\n@@ -1339,7 +1339,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn bool(std::get<__i>(__t) == std::get<__i>(__u))\n \t  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);\n       }\n-   \n+\n       static constexpr bool\n       __less(const _Tp& __t, const _Up& __u)\n       {\n@@ -1354,7 +1354,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static constexpr bool\n       __eq(const _Tp&, const _Up&) { return true; }\n-   \n+\n       static constexpr bool\n       __less(const _Tp&, const _Up&) { return false; }\n     };\n@@ -1569,7 +1569,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// swap\n   template<typename... _Elements>\n-    inline void \n+    inline void\n     swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)\n     noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }"}, {"sha": "eac2492904f6f8913c721347da38581fcd3ed7a7", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -79,7 +79,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr value_type operator()() const { return value; }\n #endif\n     };\n-  \n+\n   template<typename _Tp, _Tp __v>\n     constexpr _Tp integral_constant<_Tp, __v>::value;\n \n@@ -212,7 +212,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     struct __is_integral_helper<bool>\n     : public true_type { };\n-  \n+\n   template<>\n     struct __is_integral_helper<char>\n     : public true_type { };\n@@ -648,7 +648,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct is_const<_Tp const>\n     : public true_type { };\n-  \n+\n   /// is_volatile\n   template<typename>\n     struct is_volatile\n@@ -766,7 +766,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_array_unknown_bounds\n     : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>\n     { };\n-    \n+\n   // In N3290 is_destructible does not say anything about function\n   // types and abstract types, see LWG 2049. This implementation\n   // describes function types as non-destructible and all complete\n@@ -889,9 +889,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_default_constructible_safe;\n \n   // The following technique is a workaround for a current core language\n-  // restriction, which does not allow for array types to occur in \n+  // restriction, which does not allow for array types to occur in\n   // functional casts of the form T().  Complete arrays can be default-\n-  // constructed, if the element type is default-constructible, but \n+  // constructed, if the element type is default-constructible, but\n   // arrays with unknown bounds are not.\n   template<typename _Tp>\n     struct __is_default_constructible_safe<_Tp, true>\n@@ -919,7 +919,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // This implementation uses different strategies depending on the\n   // target type to reduce the test overhead as much as possible:\n   //\n-  // a) For a reference target type, we use a static_cast expression \n+  // a) For a reference target type, we use a static_cast expression\n   //    modulo its extra cases.\n   //\n   // b) For a non-reference target type we use a ::new expression.\n@@ -990,7 +990,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct remove_reference;\n \n   template<typename _From, typename _To, bool\n-           = __not_<__or_<is_void<_From>, \n+           = __not_<__or_<is_void<_From>,\n                           is_function<_From>>>::value>\n     struct __is_base_to_derived_ref;\n \n@@ -1027,7 +1027,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _From>::type>::type __src_t;\n       typedef typename remove_cv<typename remove_reference<\n         _To>::type>::type __dst_t;\n-      typedef __and_<__not_<is_function<__src_t>>, \n+      typedef __and_<__not_<is_function<__src_t>>,\n         __or_<is_same<__src_t, __dst_t>,\n \t\t    is_base_of<__dst_t, __src_t>>> type;\n       static constexpr bool value = type::value;\n@@ -1038,11 +1038,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public false_type\n     { };\n \n-  // Here we handle direct-initialization to a reference type as \n+  // Here we handle direct-initialization to a reference type as\n   // equivalent to a static_cast modulo overshooting conversions.\n   // These are restricted to the following conversions:\n   //    a) A base class value to a derived class reference\n-  //    b) An lvalue to an rvalue-reference of reference-compatible \n+  //    b) An lvalue to an rvalue-reference of reference-compatible\n   //       types that are not functions\n   template<typename _Tp, typename _Arg>\n     struct __is_direct_constructible_ref_cast\n@@ -1350,7 +1350,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,\n \t\t\t__is_trivially_constructible(_Tp, _Args...)>>\n     { };\n-  \n+\n   /// is_trivially_default_constructible\n   template<typename _Tp>\n     struct is_trivially_default_constructible\n@@ -1390,39 +1390,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_trivially_copy_constructible\n   template<typename _Tp>\n     struct is_trivially_copy_constructible\n-    : public __and_<is_copy_constructible<_Tp>, \n+    : public __and_<is_copy_constructible<_Tp>,\n \t\t    integral_constant<bool,\n \t\t\t__is_trivially_constructible(_Tp, const _Tp&)>>\n     { };\n-  \n+\n   /// is_trivially_move_constructible\n   template<typename _Tp>\n     struct is_trivially_move_constructible\n-    : public __and_<is_move_constructible<_Tp>, \n+    : public __and_<is_move_constructible<_Tp>,\n \t\t    integral_constant<bool,\n \t\t\t__is_trivially_constructible(_Tp, _Tp&&)>>\n     { };\n \n   /// is_trivially_assignable\n   template<typename _Tp, typename _Up>\n     struct is_trivially_assignable\n-    : public __and_<is_assignable<_Tp, _Up>, \n+    : public __and_<is_assignable<_Tp, _Up>,\n \t\t    integral_constant<bool,\n \t\t\t__is_trivially_assignable(_Tp, _Up)>>\n     { };\n \n   /// is_trivially_copy_assignable\n   template<typename _Tp>\n     struct is_trivially_copy_assignable\n-    : public __and_<is_copy_assignable<_Tp>, \n+    : public __and_<is_copy_assignable<_Tp>,\n \t\t    integral_constant<bool,\n \t\t\t__is_trivially_assignable(_Tp&, const _Tp&)>>\n     { };\n \n   /// is_trivially_move_assignable\n   template<typename _Tp>\n     struct is_trivially_move_assignable\n-    : public __and_<is_move_assignable<_Tp>, \n+    : public __and_<is_move_assignable<_Tp>,\n \t\t    integral_constant<bool,\n \t\t\t__is_trivially_assignable(_Tp&, _Tp&&)>>\n     { };\n@@ -1458,19 +1458,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public integral_constant<bool, __has_virtual_destructor(_Tp)>\n     { };\n \n-  \n+\n   // type property queries.\n \n   /// alignment_of\n   template<typename _Tp>\n     struct alignment_of\n     : public integral_constant<std::size_t, __alignof__(_Tp)> { };\n-  \n+\n   /// rank\n   template<typename>\n     struct rank\n     : public integral_constant<std::size_t, 0> { };\n-   \n+\n   template<typename _Tp, std::size_t _Size>\n     struct rank<_Tp[_Size]>\n     : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };\n@@ -1483,7 +1483,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename, unsigned _Uint>\n     struct extent\n     : public integral_constant<std::size_t, 0> { };\n-  \n+\n   template<typename _Tp, unsigned _Uint, std::size_t _Size>\n     struct extent<_Tp[_Size], _Uint>\n     : public integral_constant<std::size_t,\n@@ -1559,7 +1559,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct remove_const<_Tp const>\n     { typedef _Tp     type; };\n-  \n+\n   /// remove_volatile\n   template<typename _Tp>\n     struct remove_volatile\n@@ -1568,25 +1568,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct remove_volatile<_Tp volatile>\n     { typedef _Tp     type; };\n-  \n+\n   /// remove_cv\n   template<typename _Tp>\n     struct remove_cv\n     {\n       typedef typename\n       remove_const<typename remove_volatile<_Tp>::type>::type     type;\n     };\n-  \n+\n   /// add_const\n   template<typename _Tp>\n     struct add_const\n     { typedef _Tp const     type; };\n-   \n+\n   /// add_volatile\n   template<typename _Tp>\n     struct add_volatile\n     { typedef _Tp volatile     type; };\n-  \n+\n   /// add_cv\n   template<typename _Tp>\n     struct add_cv\n@@ -1711,7 +1711,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;\n \n     public:\n-      typedef typename __match::__type __type; \n+      typedef typename __match::__type __type;\n     };\n \n   // Utility for finding the unsigned versions of signed integral types.\n@@ -1771,7 +1771,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   // Select between integral and enum: not possible to be both.\n-  template<typename _Tp, \n+  template<typename _Tp,\n \t   bool _IsInt = is_integral<_Tp>::value,\n \t   bool _IsEnum = is_enum<_Tp>::value>\n     class __make_unsigned_selector;\n@@ -1816,7 +1816,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Primary template.\n   /// make_unsigned\n   template<typename _Tp>\n-    struct make_unsigned \n+    struct make_unsigned\n     { typedef typename __make_unsigned_selector<_Tp>::__type type; };\n \n   // Integral, but don't define.\n@@ -1890,7 +1890,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   // Select between integral and enum: not possible to be both.\n-  template<typename _Tp, \n+  template<typename _Tp,\n \t   bool _IsInt = is_integral<_Tp>::value,\n \t   bool _IsEnum = is_enum<_Tp>::value>\n     class __make_signed_selector;\n@@ -1920,7 +1920,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Primary template.\n   /// make_signed\n   template<typename _Tp>\n-    struct make_signed \n+    struct make_signed\n     { typedef typename __make_signed_selector<_Tp>::__type type; };\n \n   // Integral, but don't define.\n@@ -2002,7 +2002,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { typedef typename remove_reference<_Tp>::type*     type; };\n \n   template<typename _Tp>\n-    struct add_pointer \n+    struct add_pointer\n     : public __add_pointer_helper<_Tp>\n     { };\n \n@@ -2018,11 +2018,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<std::size_t _Len>\n     struct __aligned_storage_msa\n-    { \n+    {\n       union __type\n       {\n \tunsigned char __data[_Len];\n-\tstruct __attribute__((__aligned__)) { } __align; \n+\tstruct __attribute__((__aligned__)) { } __align;\n       };\n     };\n \n@@ -2039,11 +2039,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<std::size_t _Len, std::size_t _Align =\n \t   __alignof__(typename __aligned_storage_msa<_Len>::__type)>\n     struct aligned_storage\n-    { \n+    {\n       union type\n       {\n \tunsigned char __data[_Len];\n-\tstruct __attribute__((__aligned__((_Align)))) { } __align; \n+\tstruct __attribute__((__aligned__((_Align)))) { } __align;\n       };\n     };\n \n@@ -2096,28 +2096,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Decay trait for arrays and functions, used for perfect forwarding\n   // in make_pair, make_tuple, etc.\n-  template<typename _Up, \n+  template<typename _Up,\n \t   bool _IsArray = is_array<_Up>::value,\n-\t   bool _IsFunction = is_function<_Up>::value> \n+\t   bool _IsFunction = is_function<_Up>::value>\n     struct __decay_selector;\n \n   // NB: DR 705.\n-  template<typename _Up> \n+  template<typename _Up>\n     struct __decay_selector<_Up, false, false>\n     { typedef typename remove_cv<_Up>::type __type; };\n \n-  template<typename _Up> \n+  template<typename _Up>\n     struct __decay_selector<_Up, true, false>\n     { typedef typename remove_extent<_Up>::type* __type; };\n \n-  template<typename _Up> \n+  template<typename _Up>\n     struct __decay_selector<_Up, false, true>\n     { typedef typename add_pointer<_Up>::type __type; };\n \n   /// decay\n-  template<typename _Tp> \n-    class decay \n-    { \n+  template<typename _Tp>\n+    class decay\n+    {\n       typedef typename remove_reference<_Tp>::type __remove_type;\n \n     public:\n@@ -2151,7 +2151,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Primary template.\n   /// Define a member typedef @c type only if a boolean constant is true.\n   template<bool, typename _Tp = void>\n-    struct enable_if \n+    struct enable_if\n     { };\n \n   // Partial specialization for true."}, {"sha": "1451a91d42a7a938dad948ed34153c5a4f68629f", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -49,7 +49,7 @@\n  */\n \n /** @file include/utility\n- *  This is a Standard C++ Library header. \n+ *  This is a Standard C++ Library header.\n  */\n \n #ifndef _GLIBCXX_UTILITY\n@@ -150,7 +150,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<class _Tp1, class _Tp2>\n     struct tuple_element<0, std::pair<_Tp1, _Tp2>>\n     { typedef _Tp1 type; };\n- \n+\n   /// Partial specialization for std::pair\n   template<class _Tp1, class _Tp2>\n     struct tuple_element<1, std::pair<_Tp1, _Tp2>>"}, {"sha": "3d8e5d6ee28f8bde65efbbbcc2f9607a27b96322", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -23,7 +23,7 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file include/valarray\n- *  This is a Standard C++ Library header. \n+ *  This is a Standard C++ Library header.\n  */\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n@@ -45,34 +45,34 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<class _Clos, typename _Tp> \n+  template<class _Clos, typename _Tp>\n     class _Expr;\n \n-  template<typename _Tp1, typename _Tp2> \n-    class _ValArray;    \n+  template<typename _Tp1, typename _Tp2>\n+    class _ValArray;\n \n   template<class _Oper, template<class, class> class _Meta, class _Dom>\n     struct _UnClos;\n \n   template<class _Oper,\n         template<class, class> class _Meta1,\n         template<class, class> class _Meta2,\n-        class _Dom1, class _Dom2> \n+        class _Dom1, class _Dom2>\n     class _BinClos;\n \n-  template<template<class, class> class _Meta, class _Dom> \n+  template<template<class, class> class _Meta, class _Dom>\n     class _SClos;\n \n-  template<template<class, class> class _Meta, class _Dom> \n+  template<template<class, class> class _Meta, class _Dom>\n     class _GClos;\n-    \n-  template<template<class, class> class _Meta, class _Dom> \n+\n+  template<template<class, class> class _Meta, class _Dom>\n     class _IClos;\n-    \n-  template<template<class, class> class _Meta, class _Dom> \n+\n+  template<template<class, class> class _Meta, class _Dom>\n     class _ValFunClos;\n-  \n-  template<template<class, class> class _Meta, class _Dom> \n+\n+  template<template<class, class> class _Meta, class _Dom>\n     class _RefFunClos;\n \n   template<class _Tp> class valarray;   // An array of type _Tp\n@@ -88,7 +88,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #include <bits/valarray_array.h>\n #include <bits/valarray_before.h>\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -109,21 +109,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  aliasing that can result from pointer representations.  It represents a\n    *  one-dimensional array from which different multidimensional subsets can\n    *  be accessed and modified.\n-   *  \n+   *\n    *  @tparam  _Tp  Type of object in the array.\n    */\n-  template<class _Tp> \n+  template<class _Tp>\n     class valarray\n     {\n       template<class _Op>\n-\tstruct _UnaryOp \n+\tstruct _UnaryOp\n \t{\n \t  typedef typename __fun<_Op, _Tp>::result_type __rt;\n \t  typedef _Expr<_UnClos<_Op, _ValArray, _Tp>, __rt> _Rt;\n \t};\n     public:\n       typedef _Tp value_type;\n-      \n+\n \t// _lib.valarray.cons_ construct/destroy:\n       ///  Construct an empty array.\n       valarray();\n@@ -254,7 +254,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // _lib.valarray.access_ element access:\n       /**\n-       *  Return a reference to the i'th array element.  \n+       *  Return a reference to the i'th array element.\n        *\n        *  @param  __i  Index of element to return.\n        *  @return  Reference to the i'th element.\n@@ -482,10 +482,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Tp    sum() const;\n \n       ///  Return the minimum element using operator<().\n-      _Tp    min() const;\t\n+      _Tp    min() const;\n \n       ///  Return the maximum element using operator<().\n-      _Tp    max() const;\t\n+      _Tp    max() const;\n \n       /**\n        *  @brief  Return a shifted array.\n@@ -559,22 +559,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       size_t _M_size;\n       _Tp* __restrict__ _M_data;\n-      \n+\n       friend class _Array<_Tp>;\n     };\n-  \n+\n   template<typename _Tp>\n     inline const _Tp&\n     valarray<_Tp>::operator[](size_t __i) const\n-    { \n+    {\n       __glibcxx_requires_subscript(__i);\n       return _M_data[__i];\n     }\n \n   template<typename _Tp>\n     inline _Tp&\n     valarray<_Tp>::operator[](size_t __i)\n-    { \n+    {\n       __glibcxx_requires_subscript(__i);\n       return _M_data[__i];\n     }\n@@ -605,8 +605,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     valarray<_Tp>::valarray() : _M_size(0), _M_data(0) {}\n \n   template<typename _Tp>\n-    inline \n-    valarray<_Tp>::valarray(size_t __n) \n+    inline\n+    valarray<_Tp>::valarray(size_t __n)\n     : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n     { std::__valarray_default_construct(_M_data, _M_data + __n); }\n \n@@ -620,9 +620,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline\n     valarray<_Tp>::valarray(const _Tp* __restrict__ __p, size_t __n)\n     : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n-    { \n+    {\n       __glibcxx_assert(__p != 0 || __n == 0);\n-      std::__valarray_copy_construct(__p, __p + __n, _M_data); \n+      std::__valarray_copy_construct(__p, __p + __n, _M_data);\n     }\n \n   template<typename _Tp>\n@@ -917,7 +917,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<class _Tp>\n-    inline size_t \n+    inline size_t\n     valarray<_Tp>::size() const\n     { return _M_size; }\n \n@@ -1027,7 +1027,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       std::__valarray_fill_construct(_M_data, _M_data + __n, __c);\n     }\n-    \n+\n   template<typename _Tp>\n     inline _Tp\n     valarray<_Tp>::min() const\n@@ -1043,7 +1043,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_assert(_M_size > 0);\n       return *std::max_element(_M_data, _M_data + _M_size);\n     }\n-  \n+\n   template<class _Tp>\n     inline _Expr<_ValFunClos<_ValArray, _Tp>, _Tp>\n     valarray<_Tp>::apply(_Tp func(_Tp)) const\n@@ -1130,7 +1130,7 @@ _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(<<, __shift_left)\n _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT\n-    \n+\n \n #define _DEFINE_BINARY_OPERATOR(_Op, _Name)\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\"}, {"sha": "0e9ce754960cdb8d3bd0fd2b128a439f6079e2c8", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ac58d5299c7eba6be3c112817fe917bed48043/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=33ac58d5299c7eba6be3c112817fe917bed48043", "patch": "@@ -62,7 +62,7 @@\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_vector.h>\n-#include <bits/stl_bvector.h> \n+#include <bits/stl_bvector.h>\n #include <bits/range_access.h>\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE"}]}