{"sha": "67a9630010d8c52f72b0a4227cb71bfdbf27188e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdhOTYzMDAxMGQ4YzUyZjcyYjBhNDIyN2NiNzFiZmRiZjI3MTg4ZQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2015-12-14T09:46:13Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2015-12-14T09:46:13Z"}, "message": "[ARC] Refurbish emitting DWARF2 related information when expanding epilogue.\n\ngcc/\n2015-12-14  Claudiu Zissulescu  <claziss@synopsys.com>\n\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n\n\t* config/arc/arc.c (frame_move): Set frame related flag.\n\t(arc_save_restore): Emit epilogue related DWARF2 information.\n\t(arc_expand_epilogue): Likewise.\n\t* config/arc/arc.opt (mno-epilogue-cfi): Remove.\n\t(mepilogue-cfi): Likewise.\n\t* doc/invoke.texi: Remove -m[no]-epilogue-cfi documentation.\n\nCo-Authored-By: Andrew Burgess <andrew.burgess@embecosm.com>\n\nFrom-SVN: r231608", "tree": {"sha": "11ac347ea16a454b34e8b92434b0441ae85342bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11ac347ea16a454b34e8b92434b0441ae85342bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67a9630010d8c52f72b0a4227cb71bfdbf27188e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a9630010d8c52f72b0a4227cb71bfdbf27188e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a9630010d8c52f72b0a4227cb71bfdbf27188e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a9630010d8c52f72b0a4227cb71bfdbf27188e/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "173b7355f6858dac3b1ff0919b5ae8a87f379dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173b7355f6858dac3b1ff0919b5ae8a87f379dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173b7355f6858dac3b1ff0919b5ae8a87f379dea"}], "stats": {"total": 112, "additions": 78, "deletions": 34}, "files": [{"sha": "6433a1f4cec98869b28d877b5e79dedca42cbffd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a9630010d8c52f72b0a4227cb71bfdbf27188e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a9630010d8c52f72b0a4227cb71bfdbf27188e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67a9630010d8c52f72b0a4227cb71bfdbf27188e", "patch": "@@ -1,3 +1,13 @@\n+2015-12-14  Claudiu Zissulescu  <claziss@synopsys.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* config/arc/arc.c (frame_move): Set frame related flag.\n+\t(arc_save_restore): Emit epilogue related DWARF2 information.\n+\t(arc_expand_epilogue): Likewise.\n+\t* config/arc/arc.opt (mno-epilogue-cfi): Remove.\n+\t(mepilogue-cfi): Likewise.\n+\t* doc/invoke.texi: Remove -m[no]-epilogue-cfi documentation.\n+\n 2015-12-14  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/66616"}, {"sha": "2646c3ac69d093fd43a0dc534da10f4faea4b25f", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 67, "deletions": 17, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a9630010d8c52f72b0a4227cb71bfdbf27188e/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a9630010d8c52f72b0a4227cb71bfdbf27188e/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=67a9630010d8c52f72b0a4227cb71bfdbf27188e", "patch": "@@ -1888,7 +1888,9 @@ frame_insn (rtx x)\n static rtx\n frame_move (rtx dst, rtx src)\n {\n-  return frame_insn (gen_rtx_SET (dst, src));\n+  rtx tmp = gen_rtx_SET (dst, src);\n+  RTX_FRAME_RELATED_P (tmp) = 1;\n+  return frame_insn (tmp);\n }\n \n /* Like frame_move, but add a REG_INC note for REG if ADDR contains an\n@@ -2311,7 +2313,15 @@ arc_save_restore (rtx base_reg,\n \t  if (epilogue_p == 2)\n \t    sibthunk_insn = insn;\n \t  else\n-\t    frame_insn (insn);\n+\t    {\n+\t      insn = frame_insn (insn);\n+\t      if (epilogue_p)\n+\t\tfor (r = start_call; r <= end_call; r++)\n+\t\t  {\n+\t\t    rtx reg = gen_rtx_REG (SImode, r);\n+\t\t    add_reg_note (insn, REG_CFA_RESTORE, reg);\n+\t\t  }\n+\t    }\n \t  offset += off;\n \t}\n \n@@ -2321,6 +2331,7 @@ arc_save_restore (rtx base_reg,\n \t    {\n \t      rtx reg = gen_rtx_REG (SImode, regno);\n \t      rtx addr, mem;\n+\t      int cfa_adjust = *first_offset;\n \n \t      if (*first_offset)\n \t\t{\n@@ -2336,7 +2347,20 @@ arc_save_restore (rtx base_reg,\n \t\t}\n \t      mem = gen_frame_mem (SImode, addr);\n \t      if (epilogue_p)\n-\t\tframe_move_inc (reg, mem, base_reg, addr);\n+\t\t{\n+\t\t  rtx insn =\n+\t\t    frame_move_inc (reg, mem, base_reg, addr);\n+\t\t  add_reg_note (insn, REG_CFA_RESTORE, reg);\n+\t\t  if (cfa_adjust)\n+\t\t    {\n+\t\t      enum reg_note note = REG_CFA_ADJUST_CFA;\n+\t\t      add_reg_note (insn, note,\n+\t\t\t\t    gen_rtx_SET (stack_pointer_rtx,\n+\t\t\t\t\t\t plus_constant (Pmode,\n+\t\t\t\t\t\t\t\tstack_pointer_rtx,\n+\t\t\t\t\t\t\t\tcfa_adjust)));\n+\t\t    }\n+\t\t}\n \t      else\n \t\tframe_move_inc (mem, reg, base_reg, addr);\n \t      offset += UNITS_PER_WORD;\n@@ -2345,6 +2369,10 @@ arc_save_restore (rtx base_reg,\n     }/* if */\n   if (sibthunk_insn)\n     {\n+      int start_call = frame->millicode_start_reg;\n+      int end_call = frame->millicode_end_reg;\n+      int r;\n+\n       rtx r12 = gen_rtx_REG (Pmode, 12);\n \n       frame_insn (gen_rtx_SET (r12, GEN_INT (offset)));\n@@ -2354,6 +2382,15 @@ arc_save_restore (rtx base_reg,\n \t\t       gen_rtx_PLUS (Pmode, stack_pointer_rtx, r12));\n       sibthunk_insn = emit_jump_insn (sibthunk_insn);\n       RTX_FRAME_RELATED_P (sibthunk_insn) = 1;\n+\n+      /* Would be nice if we could do this earlier, when the PARALLEL\n+\t is populated, but these need to be attached after the\n+\t emit.  */\n+      for (r = start_call; r <= end_call; r++)\n+\t{\n+\t  rtx reg = gen_rtx_REG (SImode, r);\n+\t  add_reg_note (sibthunk_insn, REG_CFA_RESTORE, reg);\n+\t}\n     }\n } /* arc_save_restore */\n \n@@ -2474,6 +2511,7 @@ arc_expand_epilogue (int sibcall_p)\n   int can_trust_sp_p = !cfun->calls_alloca;\n   int first_offset = 0;\n   int millicode_p = cfun->machine->frame_info.millicode_end_reg > 0;\n+  rtx insn;\n \n   size_to_deallocate = size;\n \n@@ -2506,11 +2544,15 @@ arc_expand_epilogue (int sibcall_p)\n   /* Restore any saved registers.  */\n   if (frame_pointer_needed)\n     {\n-\t  rtx addr = gen_rtx_POST_INC (Pmode, stack_pointer_rtx);\n+      rtx addr = gen_rtx_POST_INC (Pmode, stack_pointer_rtx);\n \n-\t  frame_move_inc (frame_pointer_rtx, gen_frame_mem (Pmode, addr),\n-\t\t\t  stack_pointer_rtx, 0);\n-\t  size_to_deallocate -= UNITS_PER_WORD;\n+      insn = frame_move_inc (frame_pointer_rtx, gen_frame_mem (Pmode, addr),\n+\t\t\t     stack_pointer_rtx, 0);\n+      add_reg_note (insn, REG_CFA_RESTORE, frame_pointer_rtx);\n+      add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t    plus_constant (SImode, stack_pointer_rtx,\n+\t\t\t\t   4));\n+      size_to_deallocate -= UNITS_PER_WORD;\n     }\n \n   /* Load blink after the calls to thunk calls in case of optimize size.  */\n@@ -2526,7 +2568,7 @@ arc_expand_epilogue (int sibcall_p)\n \t\t\t    cfun->machine->frame_info.gmask,\n \t\t\t    1 + sibthunk_p, &first_offset);\n \t  if (sibthunk_p)\n-\t    goto epilogue_done;\n+\t    return;\n     }\n   /* If we are to restore registers, and first_offset would require\n      a limm to be encoded in a PRE_MODIFY, yet we can add it with a\n@@ -2550,6 +2592,7 @@ arc_expand_epilogue (int sibcall_p)\n       rtx ra = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n       int ra_offs = cfun->machine->frame_info.reg_size + first_offset;\n       rtx addr = plus_constant (Pmode, stack_pointer_rtx, ra_offs);\n+      HOST_WIDE_INT cfa_adjust = 0;\n \n       /* If the load of blink would need a LIMM, but we can add\n \t the offset quickly to sp, do the latter.  */\n@@ -2575,15 +2618,29 @@ arc_expand_epilogue (int sibcall_p)\n \t  && (SMALL_INT (ra_offs) || !SMALL_INT (ra_offs >> 2)))\n \t{\n \t  addr = gen_rtx_PRE_MODIFY (Pmode, stack_pointer_rtx, addr);\n+\t  cfa_adjust = ra_offs;\n \t  first_offset = 0;\n \t  size_to_deallocate -= cfun->machine->frame_info.reg_size;\n \t}\n       else if (!ra_offs && size_to_deallocate == UNITS_PER_WORD)\n \t{\n \t  addr = gen_rtx_POST_INC (Pmode, addr);\n+\t  cfa_adjust = GET_MODE_SIZE (Pmode);\n \t  size_to_deallocate = 0;\n \t}\n-      frame_move_inc (ra, gen_frame_mem (Pmode, addr), stack_pointer_rtx, addr);\n+\n+      insn = frame_move_inc (ra, gen_frame_mem (Pmode, addr),\n+\t\t\t     stack_pointer_rtx, addr);\n+      if (cfa_adjust)\n+\t{\n+\t  enum reg_note note = REG_CFA_ADJUST_CFA;\n+\n+\t  add_reg_note (insn, note,\n+\t\t\tgen_rtx_SET (stack_pointer_rtx,\n+\t\t\t\t     plus_constant (SImode, stack_pointer_rtx,\n+\t\t\t\t\t\t    cfa_adjust)));\n+\t}\n+      add_reg_note (insn, REG_CFA_RESTORE, ra);\n     }\n \n   if (!millicode_p)\n@@ -2607,17 +2664,10 @@ arc_expand_epilogue (int sibcall_p)\n \n   if (size > restored)\n     frame_stack_add (size - restored);\n+\n   /* Emit the return instruction.  */\n   if (sibcall_p == FALSE)\n     emit_jump_insn (gen_simple_return ());\n- epilogue_done:\n-  if (!TARGET_EPILOGUE_CFI)\n-    {\n-      rtx_insn *insn;\n-\n-      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-\tRTX_FRAME_RELATED_P (insn) = 0;\n-    }\n }\n \n /* Return the offset relative to the stack pointer where the return address"}, {"sha": "5b818357921a6b4d92c2048f4c27f6e6183acfbe", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a9630010d8c52f72b0a4227cb71bfdbf27188e/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a9630010d8c52f72b0a4227cb71bfdbf27188e/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=67a9630010d8c52f72b0a4227cb71bfdbf27188e", "patch": "@@ -340,14 +340,6 @@ mrtsc\n Target Report\n Enable 64-bit Time-Stamp Counter extension instruction.\n \n-mno-epilogue-cfi\n-Target Report RejectNegative InverseMask(EPILOGUE_CFI)\n-Disable generation of cfi for epilogues.\n-\n-mepilogue-cfi\n-Target RejectNegative Mask(EPILOGUE_CFI)\n-Enable generation of cfi for epilogues.\n-\n EB\n Target\n Pass -EB option through to linker."}, {"sha": "9b3e2fee28c868230724f54b2b6ebfc8482fec40", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a9630010d8c52f72b0a4227cb71bfdbf27188e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a9630010d8c52f72b0a4227cb71bfdbf27188e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=67a9630010d8c52f72b0a4227cb71bfdbf27188e", "patch": "@@ -542,7 +542,7 @@ Objective-C and Objective-C++ Dialects}.\n -mnorm -mspfp -mspfp-compact -mspfp-fast -msimd -msoft-float -mswap @gol\n -mcrc -mdsp-packa -mdvbf -mlock -mmac-d16 -mmac-24 -mrtsc -mswape @gol\n -mtelephony -mxy -misize -mannotate-align -marclinux -marclinux_prof @gol\n--mepilogue-cfi -mlong-calls -mmedium-calls -msdata @gol\n+-mlong-calls -mmedium-calls -msdata @gol\n -mucb-mcount -mvolatile-cache @gol\n -malign-call -mauto-modify-reg -mbbit-peephole -mno-brcc @gol\n -mcase-vector-pcrel -mcompact-casesi -mno-cond-exec -mearly-cbranchsi @gol\n@@ -13145,14 +13145,6 @@ The following options control the semantics of generated code:\n \n @c semantically relevant code generation options\n @table @gcctabopt\n-@item -mepilogue-cfi\n-@opindex mepilogue-cfi\n-Enable generation of call frame information for epilogues.\n-\n-@item -mno-epilogue-cfi\n-@opindex mno-epilogue-cfi\n-Disable generation of call frame information for epilogues.\n-\n @item -mlong-calls\n @opindex mlong-calls\n Generate call insns as register indirect calls, thus providing access"}]}