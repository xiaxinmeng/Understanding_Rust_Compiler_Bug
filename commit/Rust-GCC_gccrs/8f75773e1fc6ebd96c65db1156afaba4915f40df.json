{"sha": "8f75773e1fc6ebd96c65db1156afaba4915f40df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY3NTc3M2UxZmM2ZWJkOTZjNjVkYjExNTZhZmFiYTQ5MTVmNDBkZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-19T23:30:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-19T23:30:28Z"}, "message": "({low_32_bit,offsettable_mem}_operand): The function low_32_bit_operand is now unused, delete it.\n\n({low_32_bit,offsettable_mem}_operand): The function\nlow_32_bit_operand is now unused, delete it.  New function\noffsettable_mem_operand to determine if a memory address is\noffsettable.\n(float_conv_temp): New global.\n(output_epilog): Zero out float_conv_temp.\n\nFrom-SVN: r10481", "tree": {"sha": "2b697b05380509d993acb4f5097ee91ae608429e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b697b05380509d993acb4f5097ee91ae608429e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f75773e1fc6ebd96c65db1156afaba4915f40df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f75773e1fc6ebd96c65db1156afaba4915f40df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f75773e1fc6ebd96c65db1156afaba4915f40df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f75773e1fc6ebd96c65db1156afaba4915f40df/comments", "author": null, "committer": null, "parents": [{"sha": "dbe3df294330ee9d910328cece3578589daf0972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe3df294330ee9d910328cece3578589daf0972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe3df294330ee9d910328cece3578589daf0972"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "ca0a9b8e4f504c8012e69db3b520ba37caa1fdef", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f75773e1fc6ebd96c65db1156afaba4915f40df/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f75773e1fc6ebd96c65db1156afaba4915f40df/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8f75773e1fc6ebd96c65db1156afaba4915f40df", "patch": "@@ -73,6 +73,10 @@ int rs6000_pic_labelno;\n \n /* Whether a System V.4 varargs area was created.  */\n int rs6000_sysv_varargs_p;\n+\n+/* Temporary memory used to convert integer -> float */\n+struct rtx_def *float_conv_temp;\n+\n \f\n /* Print the options used in the assembly file.  */\n \n@@ -481,22 +485,22 @@ easy_fp_constant (op, mode)\n   return (mode == SFmode\n \t  || (low != 0 && input_operand (low, word_mode)));\n }\n-      \n-/* Return 1 if the operand is a constant whose low-order 32 bits are\n-   zero.  */\n+\n+/* Return 1 if the operand is an offsettable memory operand.  */\n \n int\n-low_32_bit_operand (op, mode)\n+offsettable_mem_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode;\n {\n-  rtx low;\n+  if (GET_CODE (op) != MEM)\n+    return 0;\n \n-  if (GET_CODE (op) != CONST_DOUBLE && GET_CODE (op) != CONST_INT)\n+  if (mode != GET_MODE (op))\n     return 0;\n \n-  low = operand_subword (op, 1, 0, mode);\n-  return low != 0 && GET_CODE (low) == CONST_INT && INTVAL (low) == 0;\n+  return offsettable_address_p (reload_completed | reload_in_progress,\n+\t\t\t\tmode, XEXP (op, 0));\n }\n \n /* Return 1 if the operand is either a floating-point register, a pseudo\n@@ -2750,6 +2754,9 @@ output_epilog (file, size)\n   char *load_reg = (TARGET_64BIT) ? \"\\tld %s,%d(%s)\" : \"\\t{l|lwz} %s,%d(%s)\\n\";\n   rtx insn = get_last_insn ();\n \n+  /* Forget about the float conversion temporary used.  */\n+  float_conv_temp = NULL_RTX;\n+\n   /* If the last insn was a BARRIER, we don't have to write anything except\n      the trace table.  */\n   if (GET_CODE (insn) == NOTE)"}]}