{"sha": "a20426036a360d781dae2361ffd4c7dcfe4bb40a", "node_id": "C_kwDOANBUbNoAKGEyMDQyNjAzNmEzNjBkNzgxZGFlMjM2MWZmZDRjN2RjZmU0YmI0MGE", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-02-27T17:39:09Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-02-28T20:38:35Z"}, "message": "gccrs: bug-fix implicit inference checks\n\nWhen generating implicit inference variables we can miss cases where the\nother side might be another inference variable too but it runs the risk of\ngenerating unending inference cycles needing more info but if they other\nside is a non general inference variables like <integer> or <float> this\nis safe to do so and allows us to infer mroe cases.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-unify.cc (UnifyRules::go): fix inference check", "tree": {"sha": "c3e3bf121e9d7df6def3b6af6fd3a68079d9274c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3e3bf121e9d7df6def3b6af6fd3a68079d9274c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a20426036a360d781dae2361ffd4c7dcfe4bb40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20426036a360d781dae2361ffd4c7dcfe4bb40a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20426036a360d781dae2361ffd4c7dcfe4bb40a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20426036a360d781dae2361ffd4c7dcfe4bb40a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0632bfbf63449ed4d963d3a29aff1deb0b07e65f"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "fb7b5d4bd6f07d53e5519f4a5cce492ac45dbfe9", "filename": "gcc/rust/typecheck/rust-unify.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20426036a360d781dae2361ffd4c7dcfe4bb40a/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20426036a360d781dae2361ffd4c7dcfe4bb40a/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-unify.cc?ref=a20426036a360d781dae2361ffd4c7dcfe4bb40a", "patch": "@@ -153,12 +153,22 @@ UnifyRules::go ()\n     {\n       bool rgot_param = rtype->get_kind () == TyTy::TypeKind::PARAM;\n       bool lhs_is_infer_var = ltype->get_kind () == TyTy::TypeKind::INFER;\n-      bool expected_is_concrete = ltype->is_concrete () && !lhs_is_infer_var;\n+      bool lhs_is_general_infer_var\n+\t= lhs_is_infer_var\n+\t  && static_cast<TyTy::InferType *> (ltype)->get_infer_kind ()\n+\t       == TyTy::InferType::GENERAL;\n+      bool expected_is_concrete\n+\t= ltype->is_concrete () && !lhs_is_general_infer_var;\n       bool rneeds_infer = expected_is_concrete && rgot_param;\n \n       bool lgot_param = ltype->get_kind () == TyTy::TypeKind::PARAM;\n       bool rhs_is_infer_var = rtype->get_kind () == TyTy::TypeKind::INFER;\n-      bool receiver_is_concrete = rtype->is_concrete () && !rhs_is_infer_var;\n+      bool rhs_is_general_infer_var\n+\t= rhs_is_infer_var\n+\t  && static_cast<TyTy::InferType *> (rtype)->get_infer_kind ()\n+\t       == TyTy::InferType::GENERAL;\n+      bool receiver_is_concrete\n+\t= rtype->is_concrete () && !rhs_is_general_infer_var;\n       bool lneeds_infer = receiver_is_concrete && lgot_param;\n \n       if (rneeds_infer)"}]}