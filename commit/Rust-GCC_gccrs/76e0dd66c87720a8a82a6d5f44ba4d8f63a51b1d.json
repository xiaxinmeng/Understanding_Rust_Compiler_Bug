{"sha": "76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlMGRkNjZjODc3MjBhOGE4MmE2ZDVmNDRiYTRkOGY2M2E1MWIxZA==", "commit": {"author": {"name": "Mike Crowe", "email": "mac@mcrowe.com", "date": "2019-09-04T22:43:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-09-04T22:43:20Z"}, "message": "Add user-defined clock to libstdc++ condition_variable tests\n\n2019-09-04  Mike Crowe  <mac@mcrowe.com>\n\n\t* testsuite/30_threads/condition_variable/members/2.cc (test01):\n\tParameterise so that test can be run against an arbitrary clock.\n\t(main): Test using std::chrono::steady_clock and a user-defined\n\tclock in addition to the previous std::chrono::system_clock.\n\t* testsuite/30_threads/condition_variable_any/members/2.cc: Likewise.\n\nFrom-SVN: r275389", "tree": {"sha": "07d85350cadbc5a5a6b194b5e04f48dfbd6897a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07d85350cadbc5a5a6b194b5e04f48dfbd6897a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d/comments", "author": {"login": "mikecrowe", "id": 93615, "node_id": "MDQ6VXNlcjkzNjE1", "avatar_url": "https://avatars.githubusercontent.com/u/93615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikecrowe", "html_url": "https://github.com/mikecrowe", "followers_url": "https://api.github.com/users/mikecrowe/followers", "following_url": "https://api.github.com/users/mikecrowe/following{/other_user}", "gists_url": "https://api.github.com/users/mikecrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikecrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikecrowe/subscriptions", "organizations_url": "https://api.github.com/users/mikecrowe/orgs", "repos_url": "https://api.github.com/users/mikecrowe/repos", "events_url": "https://api.github.com/users/mikecrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/mikecrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb730b8391794c7d451c7fde661b18ccacfbc3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb730b8391794c7d451c7fde661b18ccacfbc3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb730b8391794c7d451c7fde661b18ccacfbc3a"}], "stats": {"total": 77, "additions": 69, "deletions": 8}, "files": [{"sha": "678706dc94f3d143548d3a5ddbde4e79bd543b5e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d", "patch": "@@ -1,3 +1,11 @@\n+2019-09-04  Mike Crowe  <mac@mcrowe.com>\n+\n+\t* testsuite/30_threads/condition_variable/members/2.cc (test01):\n+\tParameterise so that test can be run against an arbitrary clock.\n+\t(main): Test using std::chrono::steady_clock and a user-defined\n+\tclock in addition to the previous std::chrono::system_clock.\n+\t* testsuite/30_threads/condition_variable_any/members/2.cc: Likewise.\n+\n 2019-09-03  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* crossconfig.m4: Remove references to spu."}, {"sha": "cbac3fa1932e4530d5d1443773ded89d0806b46c", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/2.cc", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc?ref=76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d", "patch": "@@ -26,6 +26,7 @@\n #include <system_error>\n #include <testsuite_hooks.h>\n \n+template <typename ClockType>\n void test01()\n {\n   try \n@@ -35,10 +36,10 @@ void test01()\n       std::mutex m;\n       std::unique_lock<std::mutex> l(m);\n \n-      auto then = std::chrono::steady_clock::now();\n+      auto then = ClockType::now();\n       std::cv_status result = c1.wait_until(l, then + ms);\n       VERIFY( result == std::cv_status::timeout );\n-      VERIFY( (std::chrono::steady_clock::now() - then) >= ms );\n+      VERIFY( (ClockType::now() - then) >= ms );\n       VERIFY( l.owns_lock() );\n     }\n   catch (const std::system_error& e)\n@@ -102,9 +103,39 @@ void test01_alternate_clock()\n     }\n }\n \n+/* User defined clock that ticks in two-thousandths of a second\n+   forty-two minutes ahead of steady_clock. */\n+struct user_defined_clock\n+{\n+  typedef std::chrono::steady_clock::rep rep;\n+  typedef std::ratio<1, 2000> period;\n+  typedef std::chrono::duration<rep, period> duration;\n+  typedef std::chrono::time_point<user_defined_clock> time_point;\n+\n+  static constexpr bool is_steady = true;\n+\n+  static time_point now() noexcept\n+  {\n+    using namespace std::chrono;\n+    const auto steady_since_epoch = steady_clock::now().time_since_epoch();\n+    const auto user_since_epoch = duration_cast<duration>(steady_since_epoch);\n+    return time_point(user_since_epoch + minutes(42));\n+  }\n+};\n+\n+/*\n+It's not possible for this test to automatically ensure that the\n+system_clock test cases result in a wait on CLOCK_REALTIME and steady_clock\n+test cases result in a wait on CLOCK_MONOTONIC. It's recommended to run the\n+test under strace(1) and check whether the expected futex calls are made by\n+glibc. See https://gcc.gnu.org/ml/libstdc++/2019-09/msg00022.html for\n+instructions.\n+*/\n+\n int main()\n {\n-  test01();\n+  test01<std::chrono::steady_clock>();\n+  test01<std::chrono::system_clock>();\n+  test01<user_defined_clock>();\n   test01_alternate_clock();\n-  return 0;\n }"}, {"sha": "897fa86f51492e33bffdc4a3974a69cb956247f5", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/members/2.cc", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc?ref=76e0dd66c87720a8a82a6d5f44ba4d8f63a51b1d", "patch": "@@ -51,6 +51,7 @@ struct Mutex\n };\n \n \n+template <typename ClockType>\n void test01()\n {\n   try \n@@ -60,10 +61,10 @@ void test01()\n       Mutex m;\n       m.lock();\n \n-      auto then = std::chrono::steady_clock::now();\n+      auto then = ClockType::now();\n       std::cv_status result = c1.wait_until(m, then + ms);\n       VERIFY( result == std::cv_status::timeout );\n-      VERIFY( (std::chrono::steady_clock::now() - then) >= ms );\n+      VERIFY( (ClockType::now() - then) >= ms );\n       VERIFY( m.locked );\n     }\n   catch (const std::system_error& e)\n@@ -76,8 +77,29 @@ void test01()\n     }\n }\n \n+/* User defined clock that ticks in two-thousandths of a second\n+   forty-two minutes ahead of steady_clock. */\n+struct user_defined_clock\n+{\n+  typedef std::chrono::steady_clock::rep rep;\n+  typedef std::ratio<1, 2000> period;\n+  typedef std::chrono::duration<rep, period> duration;\n+  typedef std::chrono::time_point<user_defined_clock> time_point;\n+\n+  static constexpr bool is_steady = true;\n+\n+  static time_point now() noexcept\n+  {\n+    using namespace std::chrono;\n+    const auto steady_since_epoch = steady_clock::now().time_since_epoch();\n+    const auto user_since_epoch = duration_cast<duration>(steady_since_epoch);\n+    return time_point(user_since_epoch + minutes(42));\n+  }\n+};\n+\n int main()\n {\n-  test01();\n-  return 0;\n+  test01<std::chrono::steady_clock>();\n+  test01<std::chrono::system_clock>();\n+  test01<user_defined_clock>();\n }"}]}