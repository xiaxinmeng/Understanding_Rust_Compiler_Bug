{"sha": "a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAwMzY4NTNkMmI2MjYwYzBhMzIyZGE4ZDQxMWRjZWJkM2FjNGY5ZQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2007-04-02T16:36:52Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-04-02T16:36:52Z"}, "message": "natVMProxy.cc (run_proxy): Use _Jv_LookupProxyMethod to find the Method.\n\n2007-04-02  Andrew Haley  <aph@redhat.com>\n\n        * java/lang/reflect/natVMProxy.cc (run_proxy): Use\n        _Jv_LookupProxyMethod to find the Method.\n        If parameter_types->length == 0, pass a null paramameter list,\n        not a zero-length parameter list.\n        * java/lang/natClass.cc (_Jv_LookupProxyMethod): New function.\n        * java/lang/Class.h (_Jv_LookupProxyMethod): Declare.\n\nFrom-SVN: r123431", "tree": {"sha": "826918a6ab1985e623a1617586fc734818568de0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/826918a6ab1985e623a1617586fc734818568de0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6c45b1e3435efa993309f69654ac5411327d755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c45b1e3435efa993309f69654ac5411327d755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6c45b1e3435efa993309f69654ac5411327d755"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "dce810fa3ab29c8aada211a39af1a9e53aaf610e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "patch": "@@ -1,3 +1,12 @@\n+2007-04-02  Andrew Haley  <aph@redhat.com>\n+\n+\t* java/lang/reflect/natVMProxy.cc (run_proxy): Use\n+\t_Jv_LookupProxyMethod to find the Method.\n+\tIf parameter_types->length == 0, pass a null paramameter list,\n+\tnot a zero-length parameter list.\n+\t* java/lang/natClass.cc (_Jv_LookupProxyMethod): New function.\n+\t* java/lang/Class.h (_Jv_LookupProxyMethod): Declare.\n+\n 2007-04-02  Kyle Galloway  <kgallowa@redhat.com>\n \n \t* interpret-run.cc: Add code to properly set up variable slots"}, {"sha": "3e08f175889b82162353bb81e7f3f8f290c50f38", "filename": "libjava/headers.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fheaders.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fheaders.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fheaders.txt?ref=a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "patch": "@@ -57,11 +57,13 @@ class java/lang/reflect/Method\n prepend jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);\n prepend jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n prepend ::java::lang::reflect::Method *_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n+prepend ::java::lang::reflect::Method *_Jv_LookupProxyMethod (jclass, _Jv_Utf8Const *, _Jv_Utf8Const *);\n friend jmethodID (::_Jv_FromReflectedMethod) (java::lang::reflect::Method *);\n friend jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n friend class java::lang::Class;\n friend class java::io::ObjectInputStream;\n friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n+friend java::lang::reflect::Method* ::_Jv_LookupProxyMethod (jclass, _Jv_Utf8Const *, _Jv_Utf8Const *);\n \n class gnu/gcj/runtime/ExtensionClassLoader\n friend class ::java::lang::ClassLoader;"}, {"sha": "a1795f7e58c6666a3ef2d46afdbd9eebbbe00ed9", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "patch": "@@ -237,6 +237,8 @@ _Jv_Method* _Jv_LookupDeclaredMethod (jclass, _Jv_Utf8Const *,\n java::lang::reflect::Method *_Jv_GetReflectedMethod (jclass klass, \n \t\t\t\t\t\t    _Jv_Utf8Const *name,\n \t\t\t\t\t\t    _Jv_Utf8Const *signature);\n+java::lang::reflect::Method *_Jv_LookupProxyMethod (jclass, _Jv_Utf8Const *,\n+\t\t\t\t\t\t    _Jv_Utf8Const *);\n jfieldID JvGetFirstInstanceField (jclass);\n jint JvNumInstanceFields (jclass);\n jfieldID JvGetFirstStaticField (jclass);\n@@ -545,6 +547,9 @@ class java::lang::Class : public java::lang::Object\n   friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass klass, \n \t\t\t\t\t\t    _Jv_Utf8Const *name,\n \t\t\t\t\t\t    _Jv_Utf8Const *signature);\n+  friend java::lang::reflect::Method *::_Jv_LookupProxyMethod (jclass, _Jv_Utf8Const *,\n+\t\t\t\t\t\t\t       _Jv_Utf8Const *);\n+\n   friend jfieldID (::JvGetFirstInstanceField) (jclass);\n   friend jint (::JvNumInstanceFields) (jclass);\n   friend jfieldID (::JvGetFirstStaticField) (jclass);"}, {"sha": "9034bd3b8263c67ca5901f2712043930daa5820a", "filename": "libjava/java/lang/VMCompiler.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fjava%2Flang%2FVMCompiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fjava%2Flang%2FVMCompiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMCompiler.h?ref=a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "patch": "@@ -41,6 +41,7 @@ class java::lang::VMCompiler : public ::java::lang::Object\n private:\n   VMCompiler();\n   static ::java::lang::Class * loadSharedLibrary(::java::lang::ClassLoader *, ::java::lang::String *, ::java::security::ProtectionDomain *, ::java::lang::String *);\n+  static ::java::lang::String * bytesToString(JArray< jbyte > *);\n public:\n   static ::java::lang::Class * compileClass(::java::lang::ClassLoader *, ::java::lang::String *, JArray< jbyte > *, jint, jint, ::java::security::ProtectionDomain *);\n   static jboolean compileClass(::java::lang::Class *);"}, {"sha": "a6955fcf4ffa723fc3d5a42df82ada06df965b80", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "patch": "@@ -29,6 +29,7 @@ details.  */\n #include <java/lang/reflect/Member.h>\n #include <java/lang/reflect/Method.h>\n #include <java/lang/reflect/Field.h>\n+#include <java/lang/reflect/Proxy.h>\n #include <java/lang/reflect/Constructor.h>\n #include <java/lang/AbstractMethodError.h>\n #include <java/lang/ArrayStoreException.h>\n@@ -1652,6 +1653,39 @@ _Jv_LookupDeclaredMethod (jclass klass, _Jv_Utf8Const *name,\n   return NULL;\n }\n \n+// The rules for finding proxy methods are different: first we search\n+// the interfaces implemented by a proxy, then the methods declared in\n+// class Proxy.\n+\n+java::lang::reflect::Method *\n+_Jv_LookupProxyMethod (jclass proxyClass, _Jv_Utf8Const *name,\n+\t\t       _Jv_Utf8Const *signature)\n+{\n+  using namespace java::lang::reflect;\n+  jclass declaringClass;\n+  _Jv_Method * m;\n+\n+  for (int i = 0; i < proxyClass->interface_count; i++)\n+    {\n+      declaringClass = proxyClass->interfaces[i];\n+      m = _Jv_GetMethodLocal (declaringClass, name, signature);\n+      if (m)\n+\tbreak;\n+    }\n+  if (!m)\n+    m = _Jv_LookupDeclaredMethod (&Proxy::class$,\n+\t\t\t\t  name,\n+\t\t\t\t  signature,\n+\t\t\t\t  &declaringClass);\n+\n+  Method *rmethod = new Method ();\n+  rmethod->offset = (char*) m - (char*) declaringClass->methods;\n+  rmethod->declaringClass = declaringClass;\n+  return rmethod;\n+}\n+\n+\n+\n java::lang::reflect::Method *\n _Jv_GetReflectedMethod (jclass klass, _Jv_Utf8Const *name,\n \t\t       _Jv_Utf8Const *signature)"}, {"sha": "17056c119e9346e3b28376c687d5c72086d9f1b6", "filename": "libjava/java/lang/reflect/Method.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fjava%2Flang%2Freflect%2FMethod.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fjava%2Flang%2Freflect%2FMethod.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FMethod.h?ref=a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "patch": "@@ -13,6 +13,7 @@\n jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);\n jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n ::java::lang::reflect::Method *_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n+::java::lang::reflect::Method *_Jv_LookupProxyMethod (jclass, _Jv_Utf8Const *, _Jv_Utf8Const *);\n \n class java::lang::reflect::Method : public ::java::lang::reflect::AccessibleObject\n {\n@@ -79,6 +80,7 @@ class java::lang::reflect::Method : public ::java::lang::reflect::AccessibleObje\n   friend class java::lang::Class;\n   friend class java::io::ObjectInputStream;\n   friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n+  friend java::lang::reflect::Method* ::_Jv_LookupProxyMethod (jclass, _Jv_Utf8Const *, _Jv_Utf8Const *);\n };\n \n #endif // __java_lang_reflect_Method__"}, {"sha": "f019176079466559c8fc52db24bb7348422fdb46", "filename": "libjava/java/lang/reflect/natVMProxy.cc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0036853d2b6260c0a322da8d411dcebd3ac4f9e/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc?ref=a0036853d2b6260c0a322da8d411dcebd3ac4f9e", "patch": "@@ -301,6 +301,8 @@ run_proxy (ffi_cif *cif,\n \t   void **args,\n \t   void*user_data)\n {\n+  using namespace java::lang::reflect;\n+\n   Proxy *proxy = *(Proxy**)args[0];\n   ncode_closure *self = (ncode_closure *) user_data;\n \n@@ -312,17 +314,22 @@ run_proxy (ffi_cif *cif,\n   Thread *thread = Thread::currentThread();\n   _Jv_InterpFrame frame_desc (self->self, thread, proxy->getClass());\n \n-  Method *meth = _Jv_GetReflectedMethod (proxy->getClass(), \n-\t\t\t\t\t self->self->name,\n-\t\t\t\t\t self->self->signature);\n+  Method *meth = _Jv_LookupProxyMethod (proxy->getClass(), \n+\t\t\t\t\tself->self->name,\n+\t\t\t\t\tself->self->signature);\n   JArray<jclass> *parameter_types = meth->internalGetParameterTypes ();\n   JArray<jclass> *exception_types = meth->internalGetExceptionTypes ();\n \n   InvocationHandler *handler = proxy->h;\n-  void *poo \n-    = _Jv_NewObjectArray (parameter_types->length, &Object::class$, NULL);\n-  JArray<jobject> *argsArray = (JArray<jobject> *) poo;\n-  jobject *jargs = elements(argsArray);\n+  JArray<jobject> *argsArray = NULL;\n+  jobject *jargs = NULL;\n+  if (parameter_types->length)\n+    {\n+      void *poo \n+\t= _Jv_NewObjectArray (parameter_types->length, &Object::class$, NULL);\n+      argsArray = (JArray<jobject> *) poo;\n+      jargs = elements(argsArray);\n+    }\n \n   // FIXME: It must be possible to use fast interface dispatch here,\n   // but I've not quite figured out how to do it."}]}