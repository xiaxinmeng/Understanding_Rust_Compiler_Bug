{"sha": "4fa08ea79cd30a7d8dd9c781a6247806a0dfe581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZhMDhlYTc5Y2QzMGE3ZDhkZDljNzgxYTYyNDc4MDZhMGRmZTU4MQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-10T11:16:26Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-10T11:21:11Z"}, "message": "Add is method flag for FnTypes\n\nThis is a building block to support generic impl blocks with a generic\nmethod. We need to adjust the Self type parameters to the turbo fish for\nthe method call expr.", "tree": {"sha": "73f6069397b7c6e1f303946ff8acd007c0419cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73f6069397b7c6e1f303946ff8acd007c0419cfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fd7b3c089191b720d9bc0cf6634fbc8c54450a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd7b3c089191b720d9bc0cf6634fbc8c54450a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd7b3c089191b720d9bc0cf6634fbc8c54450a4"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "f961bbafb7132c3b570c166271fb283cfea9e41c", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=4fa08ea79cd30a7d8dd9c781a6247806a0dfe581", "patch": "@@ -112,7 +112,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n       }\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t\t    std::move (params), ret_type,\n+\t\t\t\t    false, std::move (params), ret_type,\n \t\t\t\t    std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n@@ -189,7 +189,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n \n-    auto fnType = new TyTy::FnType (method.get_mappings ().get_hirid (),\n+    auto fnType = new TyTy::FnType (method.get_mappings ().get_hirid (), true,\n \t\t\t\t    std::move (params), ret_type,\n \t\t\t\t    std::move (substitutions));\n     context->insert_type (method.get_mappings (), fnType);"}, {"sha": "ef940c166823d48819a8a593540b5c853918078a", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=4fa08ea79cd30a7d8dd9c781a6247806a0dfe581", "patch": "@@ -229,7 +229,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n       }\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t\t    std::move (params), ret_type,\n+\t\t\t\t    false, std::move (params), ret_type,\n \t\t\t\t    std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }"}, {"sha": "8c45573d4605204a2b8a4198cd688dc1621daa34", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=4fa08ea79cd30a7d8dd9c781a6247806a0dfe581", "patch": "@@ -687,9 +687,9 @@ FnType::clone ()\n     cloned_params.push_back (\n       std::pair<HIR::Pattern *, BaseType *> (p.first, p.second->clone ()));\n \n-  return new FnType (get_ref (), get_ty_ref (), std::move (cloned_params),\n-\t\t     get_return_type ()->clone (), clone_substs (),\n-\t\t     get_combined_refs ());\n+  return new FnType (get_ref (), get_ty_ref (), is_method_flag,\n+\t\t     std::move (cloned_params), get_return_type ()->clone (),\n+\t\t     clone_substs (), get_combined_refs ());\n }\n \n FnType *"}, {"sha": "84f2a80bf37025f4e3d789eb84836451321b91e8", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa08ea79cd30a7d8dd9c781a6247806a0dfe581/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=4fa08ea79cd30a7d8dd9c781a6247806a0dfe581", "patch": "@@ -819,23 +819,24 @@ class ADTType : public BaseType, public SubstitutionRef\n class FnType : public BaseType, public SubstitutionRef\n {\n public:\n-  FnType (HirId ref, std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n+  FnType (HirId ref, bool is_method,\n+\t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n-      params (std::move (params)), type (type)\n+      params (std::move (params)), type (type), is_method_flag (is_method)\n   {}\n \n-  FnType (HirId ref, HirId ty_ref,\n+  FnType (HirId ref, HirId ty_ref, bool is_method,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n-      params (params), type (type)\n+      params (params), type (type), is_method_flag (is_method)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -851,6 +852,22 @@ class FnType : public BaseType, public SubstitutionRef\n \n   size_t num_params () const { return params.size (); }\n \n+  bool is_method () const\n+  {\n+    if (num_params () == 0)\n+      return false;\n+\n+    return is_method_flag;\n+  }\n+\n+  // get the Self type for the method\n+  BaseType *get_self_type () const\n+  {\n+    rust_assert (is_method ());\n+    // FIXME this will need updated when we support coercion for & mut self etc\n+    return get_params ().at (0).second;\n+  }\n+\n   std::vector<std::pair<HIR::Pattern *, BaseType *> > &get_params ()\n   {\n     return params;\n@@ -893,6 +910,7 @@ class FnType : public BaseType, public SubstitutionRef\n private:\n   std::vector<std::pair<HIR::Pattern *, BaseType *> > params;\n   BaseType *type;\n+  bool is_method_flag;\n };\n \n class FnPtr : public BaseType"}]}