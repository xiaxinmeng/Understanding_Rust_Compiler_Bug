{"sha": "a3033f34cfe544f69cf769ce74a1a6f59b2dd95a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwMzNmMzRjZmU1NDRmNjljZjc2OWNlNzRhMWE2ZjU5YjJkZDk1YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-06-01T16:10:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-06-01T16:10:09Z"}, "message": "re PR target/11044 ([x86] out of range loop instructions for FP code on K6)\n\n\tPR target/11044\n\t* config/i386/i386.md (length attribute): Set length to 4\n\tfor instructions of type \"fcmp\".\n\nFrom-SVN: r67300", "tree": {"sha": "fad4202f9522d15d00aaf5595bb88251dfffe1a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fad4202f9522d15d00aaf5595bb88251dfffe1a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e25a75e6da62acd97a31b7a190e28dee53d93b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25a75e6da62acd97a31b7a190e28dee53d93b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e25a75e6da62acd97a31b7a190e28dee53d93b49"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "21fe87ecd1e6d8a64dc6ca425859a1f081f574cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3033f34cfe544f69cf769ce74a1a6f59b2dd95a", "patch": "@@ -1,3 +1,9 @@\n+2003-06-01  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/11044\n+\t* config/i386/i386.md (length attribute): Set length to 4\n+\tfor instructions of type \"fcmp\".\n+\n 2003-06-01  Andreas Jaeger  <aj@suse.de>\n \n         * toplev.c: Use ISO C90 prototypes."}, {"sha": "181cf7e56aa190e565523d048d7b05669e95d965", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a3033f34cfe544f69cf769ce74a1a6f59b2dd95a", "patch": "@@ -283,6 +283,8 @@\n (define_attr \"length\" \"\"\n   (cond [(eq_attr \"type\" \"other,multi,fistp\")\n \t   (const_int 16)\n+\t (eq_attr \"type\" \"fcmp\")\n+\t   (const_int 4)\n \t (eq_attr \"unit\" \"i387\")\n \t   (plus (const_int 2)\n \t\t (plus (attr \"prefix_data16\")"}, {"sha": "7b6632c8a4c60fa0075a92d1b7b78655a432a1ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3033f34cfe544f69cf769ce74a1a6f59b2dd95a", "patch": "@@ -1,3 +1,7 @@\n+2003-06-01  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/i386-loop-3.c: New test.\n+\n 2003-05-31  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* g77.dg/ffree-form-2.f: XFAIL removed, because fixed."}, {"sha": "c1b4bcea5be49bd5a29bcca5752ed60b41b02392", "filename": "gcc/testsuite/gcc.dg/i386-loop-3.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-loop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3033f34cfe544f69cf769ce74a1a6f59b2dd95a/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-loop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-loop-3.c?ref=a3033f34cfe544f69cf769ce74a1a6f59b2dd95a", "patch": "@@ -0,0 +1,76 @@\n+/* PR target/11044 */\n+/* Originator: Tim McGrath <misty-@charter.net> */\n+/* Testcase contributed by Eric Botcazou <ebotcazou@libertysurf.fr> */\n+/* { dg-do run { target i?86-*-* } } */\n+/* { dg-options \"-mtune=k6 -O3 -ffast-math -funroll-loops\" } */\n+\n+typedef struct\n+{\n+        unsigned char colormod;\n+} entity_state_t;\n+\n+typedef struct\n+{\n+        int num_entities;\n+        entity_state_t *entities;\n+} packet_entities_t;\n+\n+typedef struct\n+{\n+        double senttime;\n+        float ping_time;\n+        packet_entities_t entities;\n+} client_frame_t;\n+\n+typedef enum\n+{\n+        cs_free,\n+        cs_server,\n+        cs_zombie,\n+        cs_connected,\n+        cs_spawned\n+} sv_client_state_t;\n+\n+typedef struct client_s\n+{\n+        sv_client_state_t state;\n+        int ping;\n+        client_frame_t frames[64];\n+} client_t;\n+\n+int CalcPing (client_t *cl)\n+{\n+        float ping;\n+        int count, i;\n+        register client_frame_t *frame;\n+\n+        if (cl->state == cs_server)\n+                return cl->ping;\n+        ping = 0;\n+        count = 0;\n+        for (frame = cl->frames, i = 0; i < 64; i++, frame++) {\n+                if (frame->ping_time > 0) {\n+                        ping += frame->ping_time;\n+                        count++;\n+                }\n+        }\n+        if (!count)\n+                return 9999;\n+        ping /= count;\n+\n+        return ping * 1000;\n+}\n+\n+int main(void)\n+{\n+   client_t cl;\n+\n+   memset(&cl, 0, sizeof(cl));\n+\n+   cl.frames[0].ping_time = 1.0f;\n+\n+   if (CalcPing(&cl) != 1000)\n+     abort();\n+\n+   return 0;\n+}"}]}