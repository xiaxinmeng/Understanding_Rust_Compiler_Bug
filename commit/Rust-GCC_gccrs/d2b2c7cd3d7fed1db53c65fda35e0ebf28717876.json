{"sha": "d2b2c7cd3d7fed1db53c65fda35e0ebf28717876", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiMmM3Y2QzZDdmZWQxZGI1M2M2NWZkYTM1ZTBlYmYyODcxNzg3Ng==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2002-11-17T22:33:31Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2002-11-17T22:33:31Z"}, "message": "sh.c (gen_shl_and): Don't create a zero_extend if the operand is not an arith_reg_operand.\n\n\t* sh.c (gen_shl_and): Don't create a zero_extend if the operand\n\tis not an arith_reg_operand.\n\nFrom-SVN: r59201", "tree": {"sha": "9ef611e9decc1d1ee0f83f21c95d93ad00913776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ef611e9decc1d1ee0f83f21c95d93ad00913776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2b2c7cd3d7fed1db53c65fda35e0ebf28717876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b2c7cd3d7fed1db53c65fda35e0ebf28717876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b2c7cd3d7fed1db53c65fda35e0ebf28717876", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b2c7cd3d7fed1db53c65fda35e0ebf28717876/comments", "author": null, "committer": null, "parents": [{"sha": "6ddb1bc19f3860740acc0ed31e54ab8cfac07dd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ddb1bc19f3860740acc0ed31e54ab8cfac07dd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ddb1bc19f3860740acc0ed31e54ab8cfac07dd2"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "f27dedbb3a9582defa5814645ef523390fdc400f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b2c7cd3d7fed1db53c65fda35e0ebf28717876/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b2c7cd3d7fed1db53c65fda35e0ebf28717876/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2b2c7cd3d7fed1db53c65fda35e0ebf28717876", "patch": "@@ -1,3 +1,8 @@\n+2002-11-17  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* sh.c (gen_shl_and): Don't create a zero_extend if the operand\n+\tis not an arith_reg_operand.\n+\n 2002-11-17  Graham Stott  <graham.stott@btinternet.com>\n \n \t* real.c (real_to_decimal): Fix buffer overrun when buffer size"}, {"sha": "0ce5e06ce869309975331e0f3843daccb78c7b80", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b2c7cd3d7fed1db53c65fda35e0ebf28717876/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b2c7cd3d7fed1db53c65fda35e0ebf28717876/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d2b2c7cd3d7fed1db53c65fda35e0ebf28717876", "patch": "@@ -1823,11 +1823,16 @@ gen_shl_and (dest, left_rtx, mask_rtx, source)\n \n \tif (first < 0)\n \t  {\n+\t    enum machine_mode mode\n+\t      = ((mask << right) <= 0xff) ? QImode : HImode;\n+\t    rtx lowpart = gen_lowpart (mode, source);\n+\n+\t    if (no_new_pseudos && ! TARGET_SHMEDIA\n+\t\t&& ! arith_reg_operand (lowpart, mode))\n+\t      return -1;\n \t    emit_insn ((mask << right) <= 0xff\n-\t\t       ? gen_zero_extendqisi2(dest,\n-\t\t\t\t\t      gen_lowpart (QImode, source))\n-\t\t       : gen_zero_extendhisi2(dest,\n-\t\t\t\t\t      gen_lowpart (HImode, source)));\n+\t\t       ? gen_zero_extendqisi2(dest, lowpart)\n+\t\t       : gen_zero_extendhisi2(dest, lowpart));\n \t    source = dest;\n \t  }\n \tif (source != dest)\n@@ -1846,9 +1851,18 @@ gen_shl_and (dest, left_rtx, mask_rtx, source)\n \t    mask <<= first;\n \t  }\n \tif (first >= 0)\n-\t  emit_insn (mask <= 0xff\n-\t\t     ? gen_zero_extendqisi2(dest, gen_lowpart (QImode, dest))\n-\t\t     : gen_zero_extendhisi2(dest, gen_lowpart (HImode, dest)));\n+\t  {\n+\t    enum machine_mode mode = (mask <= 0xff) ? QImode : HImode;\n+\t    rtx lowpart = gen_lowpart (mode, dest);\n+\n+\t    if (no_new_pseudos && ! TARGET_SHMEDIA\n+\t\t&& ! arith_reg_operand (lowpart, mode))\n+\t      return -1;\n+\t    emit_insn (mask <= 0xff\n+\t\t       ? gen_zero_extendqisi2(dest, lowpart)\n+\t\t       : gen_zero_extendhisi2(dest, lowpart));\n+\t  }\n+\t\n \tif (total_shift > 0)\n \t  {\n \t    operands[2] = GEN_INT (total_shift);"}]}