{"sha": "9c3c2608ff6279138d3f17545417b366ad1747ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMzYzI2MDhmZjYyNzkxMzhkM2YxNzU0NTQxN2IzNjZhZDE3NDdhYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-07-21T08:47:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-07-21T08:47:48Z"}, "message": "re PR ipa/61885 (ICE: in types_same_for_odr, at ipa-devirt.c:383 with LTO)\n\n\tPR target/61885\n\t* config/i386/avx512fintrin.h: Move constants for mantissa extraction\n\tout of #ifdef __OPTIMIZE__.\n\ntestsuite/ChangeLog:\n\n\tPR target/61885\n\t* gcc.target/i386/pr61885.c: New test.\n\nFrom-SVN: r212886", "tree": {"sha": "e44fd96d34437b4d3d338ea277bd7bb1ae3eb333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e44fd96d34437b4d3d338ea277bd7bb1ae3eb333"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c3c2608ff6279138d3f17545417b366ad1747ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3c2608ff6279138d3f17545417b366ad1747ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c3c2608ff6279138d3f17545417b366ad1747ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3c2608ff6279138d3f17545417b366ad1747ab/comments", "author": null, "committer": null, "parents": [{"sha": "633e5fbb241ea135f8f35b1c13152b2415aac81e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633e5fbb241ea135f8f35b1c13152b2415aac81e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/633e5fbb241ea135f8f35b1c13152b2415aac81e"}], "stats": {"total": 106, "additions": 59, "deletions": 47}, "files": [{"sha": "8c77d00b861dad5a05e4c7507f1478ccce8a8d49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3c2608ff6279138d3f17545417b366ad1747ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3c2608ff6279138d3f17545417b366ad1747ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c3c2608ff6279138d3f17545417b366ad1747ab", "patch": "@@ -1,3 +1,9 @@\n+2014-07-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/61885\n+\t* config/i386/avx512fintrin.h: Move constants for mantissa extraction\n+\tout of #ifdef __OPTIMIZE__.\n+\n 2014-07-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* cse.c (exp_equiv_p) <MEM>: For GCSE, return 0 for expressions with\n@@ -10,21 +16,18 @@\n \n 2014-07-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n-\t* config/rs6000/altivec.md (unspec enum):  Fix typo in\n-\tUNSPEC_VSLDOI.\n+\t* config/rs6000/altivec.md (unspec enum):  Fix typo in UNSPEC_VSLDOI.\n \t(altivec_vsldoi_<mode>): Likewise.\n \n 2014-07-20  Roman Gareev  <gareevroman@gmail.com>\n \n-\t* graphite-isl-ast-to-gimple.c:\n-\tFixes a formatting issue related to the number of characters in the\n-\tline.\n+\t* graphite-isl-ast-to-gimple.c: Fixes a formatting issue related\n+\tto the number of characters in the line.\n \n 2014-07-20  Roman Gareev  <gareevroman@gmail.com>\n \n-\t* graphite-isl-ast-to-gimple.c:\n-\tAdd using of build_nonstandard_integer_type instead of\n-\tint128_integer_type_node\n+\t* graphite-isl-ast-to-gimple.c: Add using of\n+\tbuild_nonstandard_integer_type instead of int128_integer_type_node.\n \n 2014-07-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -120,7 +123,7 @@\n \t* config/arm/fa726te.md (726te_alu_op): Likewise.\n \t* config/arm/fmp626.md (mp626_alu_op): Likewise.\n \t* config/arm/arm.md (core_cycles): Replace alu_reg and alus_reg with\n-\talu_sreg, alu_dsp_reg and alus_sreg.     \n+\talu_sreg, alu_dsp_reg and alus_sreg.\n \t* config/arm/cortex-a15.md (cortex_a15_alu): Likewise.\n \t* config/arm/cortex-a5.md (cortex_a5_alu): Likewise.\n \t* config/arm/cortex-a53.md (cortex_a53_alu): Likewise.\n@@ -132,10 +135,10 @@\n \t* config/arm/marvell-pj4.md (pj4_alu, pj4_alu_conds): Likewise.\n \t* config/aarch64/aarch64.md (*addsi3_aarch64, *addsi3_aarch64_uxtw,\n \tsubsi3, *adddi3_aarch64, *subsi3_uxtw, subdi3, absdi2, neg<mode>2,\n-\t*negsi2_uxtw, tlsle_small_<mode>): Rename type alu_reg to alu_sreg.     \n+\t*negsi2_uxtw, tlsle_small_<mode>): Rename type alu_reg to alu_sreg.\n \t(add<mode>3_compare0, *addsi3_compare0_uxtw, *add<mode>3nr_compare0,\n \tsub<mode>3_compare0, *compare_neg<mode>, *neg<mode>2_compare0,\n-\tsubsi3_compare0_uxtw, *negsi2_compare0_uxtw, *cmp<mode>): Rename type \n+\tsubsi3_compare0_uxtw, *negsi2_compare0_uxtw, *cmp<mode>): Rename type\n \talus_reg to alus_sreg.\n \n 2014-07-17  Andreas Schwab  <schwab@linux-m68k.org>\n@@ -146,9 +149,8 @@\n 2014-07-17  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/61801\n-\t* sched-deps.c (sched_analyze_2): For ASM_OPERANDS and\n-\tASM_INPUT don't set reg_pending_barrier if it appears in a\n-\tdebug-insn.\n+\t* sched-deps.c (sched_analyze_2): For ASM_OPERANDS and ASM_INPUT\n+\tdon't set reg_pending_barrier if it appears in a debug-insn.\n \n 2014-07-16  DJ Delorie  <dj@redhat.com>\n \n@@ -166,12 +168,12 @@\n \t(cris_side_effect_mode_ok): Replace CONSTANT_P with CRIS_CONSTANT_P.\n \t(cris_address_cost): Ditto last CONSTANT_P.\n \t(cris_symbol_type_of): Rename from cris_pic_symbol_type_of.  All\n-        callers changed.  Yield cris_offsettable_symbol for non-PIC\n-        constant symbolic expressions including labels.  Yield cris_unspec\n+\tcallers changed.  Yield cris_offsettable_symbol for non-PIC\n+\tconstant symbolic expressions including labels.  Yield cris_unspec\n \tfor all unspecs.\n \t(cris_expand_pic_call_address): New parameter MARKERP.  Set its\n-        target to pic_offset_table_rtx for calls that will likely go\n-        through PLT, const0_rtx when they can't.  All callers changed.\n+\ttarget to pic_offset_table_rtx for calls that will likely go\n+\tthrough PLT, const0_rtx when they can't.  All callers changed.\n \tAssert flag_pic.  Use CONSTANT_P, not CONSTANT_ADDRESS_P, for\n \tsymbolic expressions to be PICified.  Remove second, redundant,\n \tassert on can_create_pseudo_p returning non-zero.  Use\n@@ -182,26 +184,23 @@\n \tCONSTANT_P instead of CONSTANT_ADDRESS_P.\n \t(\"*movsi_internal\") <case 9>: Make check for valid unspec operands\n \tfor lapc stricter.\n-\t<case CRIS_UNSPEC_PCREL, CRIS_UNSPEC_PLT_PCREL>: Clear condition\n-\tcodes.\n+\t<case CRIS_UNSPEC_PCREL, CRIS_UNSPEC_PLT_PCREL>: Clear condition codes.\n \t(\"call\", \"call_value\"): Use second incoming operand as a marker\n \tfor pic-offset-table-register being used.\n \t(\"*expanded_call_non_v32\", \"*expanded_call_v32\")\n-        (\"*expanded_call_value_non_v32\", \"*expanded_call_value_v32\"): For\n+\t(\"*expanded_call_value_non_v32\", \"*expanded_call_value_v32\"): For\n \tsecond incoming operand to CALL, match cris_call_type_marker.\n-\t(\"*expanded_call_value_side\"): Ditto.  Disable before\n-\treload_completed.\n+\t(\"*expanded_call_value_side\"): Ditto.  Disable before reload_completed.\n \t(\"*expanded_call_side\"): Ditto.  Fix typo in comment.\n \t(moverside, movemside peepholes): Check for CRIS_CONSTANT_P, not\n \tCONSTANT_P.\n \t* config/cris/predicates.md (\"cris_call_type_marker\"): New predicate.\n \t* config/cris/cris.h (CRIS_CONSTANT_P): New macro.\n \t(enum cris_symbol_type): Rename from cris_pic_symbol_type.  All\n-        users changed.  Add members cris_offsettable_symbol and\n-\tcris_unspec.\n+\tusers changed.  Add members cris_offsettable_symbol and cris_unspec.\n \t(cris_symbol_type): Rename from cris_pic_symbol_type.\n \t* config/cris/constraints.md (\"T\"): Use CRIS_CONSTANT_P, not\n-        just CONSTANT_P.\n+\tjust CONSTANT_P.\n \t* config/cris/cris-protos.h (cris_symbol_type_of,\n \tcris_expand_pic_call_address): Adjust prototypes.\n \t(cris_legitimate_constant_p): New prototype.\n@@ -216,18 +215,16 @@\n \tset_comdat_group to NULL_TREE.\n \t(verify_symtab): Fix diagnostic.\n \n-2014-07-16  David Wohlferd <dw@LimeGreenSocks.com>\n+2014-07-16  David Wohlferd  <dw@LimeGreenSocks.com>\n \n \tPR target/61662\n \t* config/i386/ia32intrin.h: Use __LP64__ to determine size of long.\n \n 2014-07-16  Dodji Seketeli  <dodji@redhat.com>\n \n \tSupport location tracking for built-in macro tokens\n-\t* input.h (is_location_from_builtin_token): New function\n-\tdeclaration.\n-\t* input.c (is_location_from_builtin_token): New function\n-\tdefinition.\n+\t* input.h (is_location_from_builtin_token): New function declaration.\n+\t* input.c (is_location_from_builtin_token): New function definition.\n \t* toplev.c (general_init): Tell libcpp what the pre-defined\n \tspelling location for built-in tokens is.\n "}, {"sha": "c4caa5ae6956890164c4b76978ea8ff306bc73f9", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3c2608ff6279138d3f17545417b366ad1747ab/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3c2608ff6279138d3f17545417b366ad1747ab/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=9c3c2608ff6279138d3f17545417b366ad1747ab", "patch": "@@ -8103,6 +8103,22 @@ _mm512_stream_load_si512 (void *__P)\n   return __builtin_ia32_movntdqa512 ((__v8di *)__P);\n }\n \n+/* Constants for mantissa extraction */\n+typedef enum\n+{\n+  _MM_MANT_NORM_1_2,\t\t/* interval [1, 2)      */\n+  _MM_MANT_NORM_p5_2,\t\t/* interval [0.5, 2)    */\n+  _MM_MANT_NORM_p5_1,\t\t/* interval [0.5, 1)    */\n+  _MM_MANT_NORM_p75_1p5\t\t/* interval [0.75, 1.5) */\n+} _MM_MANTISSA_NORM_ENUM;\n+\n+typedef enum\n+{\n+  _MM_MANT_SIGN_src,\t\t/* sign = sign(SRC)     */\n+  _MM_MANT_SIGN_zero,\t\t/* sign = 0             */\n+  _MM_MANT_SIGN_nan\t\t/* DEST = NaN if sign(SRC) = 1 */\n+} _MM_MANTISSA_SIGN_ENUM;\n+\n #ifdef __OPTIMIZE__\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -8182,22 +8198,6 @@ _mm512_maskz_getexp_round_pd (__mmask8 __U, __m512d __A, const int __R)\n \t\t\t\t\t\t    (__mmask8) __U, __R);\n }\n \n-/* Constants for mantissa extraction */\n-typedef enum\n-{\n-  _MM_MANT_NORM_1_2,\t\t/* interval [1, 2)      */\n-  _MM_MANT_NORM_p5_2,\t\t/* interval [0.5, 2)    */\n-  _MM_MANT_NORM_p5_1,\t\t/* interval [0.5, 1)    */\n-  _MM_MANT_NORM_p75_1p5\t\t/* interval [0.75, 1.5) */\n-} _MM_MANTISSA_NORM_ENUM;\n-\n-typedef enum\n-{\n-  _MM_MANT_SIGN_src,\t\t/* sign = sign(SRC)     */\n-  _MM_MANT_SIGN_zero,\t\t/* sign = 0             */\n-  _MM_MANT_SIGN_nan\t\t/* DEST = NaN if sign(SRC) = 1 */\n-} _MM_MANTISSA_SIGN_ENUM;\n-\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_getmant_round_pd (__m512d __A, _MM_MANTISSA_NORM_ENUM __B,"}, {"sha": "fa69d58094271d0280e2369ab0cf86999c0d6449", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3c2608ff6279138d3f17545417b366ad1747ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3c2608ff6279138d3f17545417b366ad1747ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c3c2608ff6279138d3f17545417b366ad1747ab", "patch": "@@ -1,3 +1,8 @@\n+2014-07-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/61885\n+\t* gcc.target/i386/pr61885.c: New test.\n+\n 2014-07-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/pack20.ad[sb]: New test."}, {"sha": "09c62aebbaee0680c3fcb238e03014f1e90a5a36", "filename": "gcc/testsuite/gcc.target/i386/pr61855.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3c2608ff6279138d3f17545417b366ad1747ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61855.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3c2608ff6279138d3f17545417b366ad1747ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61855.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61855.c?ref=9c3c2608ff6279138d3f17545417b366ad1747ab", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f\" } */\n+\n+#include <x86intrin.h>\n+\n+__m512 test (__m512 x)\n+{\n+  return _mm512_getmant_ps(x, _MM_MANT_NORM_1_2, _MM_MANT_SIGN_zero);\n+}\n+"}]}