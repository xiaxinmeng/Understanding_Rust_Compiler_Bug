{"sha": "65b91091db74266fde6648243bcd839d65101314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjViOTEwOTFkYjc0MjY2ZmRlNjY0ODI0M2JjZDgzOWQ2NTEwMTMxNA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2002-08-07T20:57:22Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2002-08-07T20:57:22Z"}, "message": "regex.c (re_error_msgid): Just use a simple array of strings.\n\n* regex.c (re_error_msgid): Just use a simple array of strings.\n(re_compile_pattern): Compensate.\n(re_comp): Likewise.\n(re_comp): Likewise.\n(regerror): Likewise.\n\nFrom-SVN: r56106", "tree": {"sha": "4610a597294db6713591bb76ee6ab14e16e0228a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4610a597294db6713591bb76ee6ab14e16e0228a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65b91091db74266fde6648243bcd839d65101314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b91091db74266fde6648243bcd839d65101314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65b91091db74266fde6648243bcd839d65101314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b91091db74266fde6648243bcd839d65101314/comments", "author": null, "committer": null, "parents": [{"sha": "0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6f2917cfcbfbaccca804e0f038ac8c4457f772"}], "stats": {"total": 114, "additions": 33, "deletions": 81}, "files": [{"sha": "43a187d1bab42e0798b6d678b4abc6a38ee51397", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b91091db74266fde6648243bcd839d65101314/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b91091db74266fde6648243bcd839d65101314/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=65b91091db74266fde6648243bcd839d65101314", "patch": "@@ -1,3 +1,11 @@\n+2002-08-07  DJ Delorie  <dj@redhat.com>\n+\n+\t* regex.c (re_error_msgid): Just use a simple array of strings.\n+\t(re_compile_pattern): Compensate.\n+\t(re_comp): Likewise.\n+\t(re_comp): Likewise.\n+\t(regerror): Likewise.\n+\n 2002-07-29  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* cplus-dem.c (PREPEND_BLANK): Remove."}, {"sha": "a83cda055274b0c5f3641a95ab0c7a598004382f", "filename": "libiberty/regex.c", "status": "modified", "additions": 25, "deletions": 81, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b91091db74266fde6648243bcd839d65101314/libiberty%2Fregex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b91091db74266fde6648243bcd839d65101314/libiberty%2Fregex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fregex.c?ref=65b91091db74266fde6648243bcd839d65101314", "patch": "@@ -2,7 +2,7 @@\n    version 0.12.\n    (Implements POSIX draft P1003.2/D11.2, except for some of the\n    internationalization features.)\n-   Copyright (C) 1993-1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1993-1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n \n    The GNU C Library is free software; you can redistribute it and/or\n@@ -1373,80 +1373,26 @@ weak_alias (__re_set_syntax, re_set_syntax)\n    POSIX doesn't require that we do anything for REG_NOERROR,\n    but why not be nice?  */\n \n-static const char re_error_msgid[] =\n+static const char *re_error_msgid[] =\n   {\n-# define REG_NOERROR_IDX\t0\n-    gettext_noop (\"Success\")\t/* REG_NOERROR */\n-    \"\\0\"\n-# define REG_NOMATCH_IDX (REG_NOERROR_IDX + sizeof \"Success\")\n-    gettext_noop (\"No match\")\t/* REG_NOMATCH */\n-    \"\\0\"\n-# define REG_BADPAT_IDX\t(REG_NOMATCH_IDX + sizeof \"No match\")\n-    gettext_noop (\"Invalid regular expression\") /* REG_BADPAT */\n-    \"\\0\"\n-# define REG_ECOLLATE_IDX (REG_BADPAT_IDX + sizeof \"Invalid regular expression\")\n-    gettext_noop (\"Invalid collation character\") /* REG_ECOLLATE */\n-    \"\\0\"\n-# define REG_ECTYPE_IDX\t(REG_ECOLLATE_IDX + sizeof \"Invalid collation character\")\n-    gettext_noop (\"Invalid character class name\") /* REG_ECTYPE */\n-    \"\\0\"\n-# define REG_EESCAPE_IDX\t(REG_ECTYPE_IDX + sizeof \"Invalid character class name\")\n-    gettext_noop (\"Trailing backslash\") /* REG_EESCAPE */\n-    \"\\0\"\n-# define REG_ESUBREG_IDX\t(REG_EESCAPE_IDX + sizeof \"Trailing backslash\")\n-    gettext_noop (\"Invalid back reference\") /* REG_ESUBREG */\n-    \"\\0\"\n-# define REG_EBRACK_IDX\t(REG_ESUBREG_IDX + sizeof \"Invalid back reference\")\n-    gettext_noop (\"Unmatched [ or [^\")\t/* REG_EBRACK */\n-    \"\\0\"\n-# define REG_EPAREN_IDX\t(REG_EBRACK_IDX + sizeof \"Unmatched [ or [^\")\n-    gettext_noop (\"Unmatched ( or \\\\(\") /* REG_EPAREN */\n-    \"\\0\"\n-# define REG_EBRACE_IDX\t(REG_EPAREN_IDX + sizeof \"Unmatched ( or \\\\(\")\n-    gettext_noop (\"Unmatched \\\\{\") /* REG_EBRACE */\n-    \"\\0\"\n-# define REG_BADBR_IDX\t(REG_EBRACE_IDX + sizeof \"Unmatched \\\\{\")\n-    gettext_noop (\"Invalid content of \\\\{\\\\}\") /* REG_BADBR */\n-    \"\\0\"\n-# define REG_ERANGE_IDX\t(REG_BADBR_IDX + sizeof \"Invalid content of \\\\{\\\\}\")\n-    gettext_noop (\"Invalid range end\")\t/* REG_ERANGE */\n-    \"\\0\"\n-# define REG_ESPACE_IDX\t(REG_ERANGE_IDX + sizeof \"Invalid range end\")\n-    gettext_noop (\"Memory exhausted\") /* REG_ESPACE */\n-    \"\\0\"\n-# define REG_BADRPT_IDX\t(REG_ESPACE_IDX + sizeof \"Memory exhausted\")\n-    gettext_noop (\"Invalid preceding regular expression\") /* REG_BADRPT */\n-    \"\\0\"\n-# define REG_EEND_IDX\t(REG_BADRPT_IDX + sizeof \"Invalid preceding regular expression\")\n-    gettext_noop (\"Premature end of regular expression\") /* REG_EEND */\n-    \"\\0\"\n-# define REG_ESIZE_IDX\t(REG_EEND_IDX + sizeof \"Premature end of regular expression\")\n-    gettext_noop (\"Regular expression too big\") /* REG_ESIZE */\n-    \"\\0\"\n-# define REG_ERPAREN_IDX\t(REG_ESIZE_IDX + sizeof \"Regular expression too big\")\n+    gettext_noop (\"Success\"),\t/* REG_NOERROR */\n+    gettext_noop (\"No match\"),\t/* REG_NOMATCH */\n+    gettext_noop (\"Invalid regular expression\"), /* REG_BADPAT */\n+    gettext_noop (\"Invalid collation character\"), /* REG_ECOLLATE */\n+    gettext_noop (\"Invalid character class name\"), /* REG_ECTYPE */\n+    gettext_noop (\"Trailing backslash\"), /* REG_EESCAPE */\n+    gettext_noop (\"Invalid back reference\"), /* REG_ESUBREG */\n+    gettext_noop (\"Unmatched [ or [^\"),\t/* REG_EBRACK */\n+    gettext_noop (\"Unmatched ( or \\\\(\"), /* REG_EPAREN */\n+    gettext_noop (\"Unmatched \\\\{\"), /* REG_EBRACE */\n+    gettext_noop (\"Invalid content of \\\\{\\\\}\"), /* REG_BADBR */\n+    gettext_noop (\"Invalid range end\"),\t/* REG_ERANGE */\n+    gettext_noop (\"Memory exhausted\"), /* REG_ESPACE */\n+    gettext_noop (\"Invalid preceding regular expression\"), /* REG_BADRPT */\n+    gettext_noop (\"Premature end of regular expression\"), /* REG_EEND */\n+    gettext_noop (\"Regular expression too big\"), /* REG_ESIZE */\n     gettext_noop (\"Unmatched ) or \\\\)\") /* REG_ERPAREN */\n   };\n-\n-static const size_t re_error_msgid_idx[] =\n-  {\n-    REG_NOERROR_IDX,\n-    REG_NOMATCH_IDX,\n-    REG_BADPAT_IDX,\n-    REG_ECOLLATE_IDX,\n-    REG_ECTYPE_IDX,\n-    REG_EESCAPE_IDX,\n-    REG_ESUBREG_IDX,\n-    REG_EBRACK_IDX,\n-    REG_EPAREN_IDX,\n-    REG_EBRACE_IDX,\n-    REG_BADBR_IDX,\n-    REG_ERANGE_IDX,\n-    REG_ESPACE_IDX,\n-    REG_BADRPT_IDX,\n-    REG_EEND_IDX,\n-    REG_ESIZE_IDX,\n-    REG_ERPAREN_IDX\n-  };\n \f\n #endif /* INSIDE_RECURSION */\n \n@@ -7944,7 +7890,7 @@ re_compile_pattern (pattern, length, bufp)\n \n   if (!ret)\n     return NULL;\n-  return gettext (re_error_msgid + re_error_msgid_idx[(int) ret]);\n+  return gettext (re_error_msgid[(int) ret]);\n }\n #ifdef _LIBC\n weak_alias (__re_compile_pattern, re_compile_pattern)\n@@ -7981,14 +7927,12 @@ re_comp (s)\n     {\n       re_comp_buf.buffer = (unsigned char *) malloc (200);\n       if (re_comp_buf.buffer == NULL)\n-        return (char *) gettext (re_error_msgid\n-\t\t\t\t + re_error_msgid_idx[(int) REG_ESPACE]);\n+        return (char *) gettext (re_error_msgid[(int) REG_ESPACE]);\n       re_comp_buf.allocated = 200;\n \n       re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH);\n       if (re_comp_buf.fastmap == NULL)\n-\treturn (char *) gettext (re_error_msgid\n-\t\t\t\t + re_error_msgid_idx[(int) REG_ESPACE]);\n+\treturn (char *) gettext (re_error_msgid[(int) REG_ESPACE]);\n     }\n \n   /* Since `re_exec' always passes NULL for the `regs' argument, we\n@@ -8008,7 +7952,7 @@ re_comp (s)\n     return NULL;\n \n   /* Yes, we're discarding `const' here if !HAVE_LIBINTL.  */\n-  return (char *) gettext (re_error_msgid + re_error_msgid_idx[(int) ret]);\n+  return (char *) gettext (re_error_msgid[(int) ret]);\n }\n \n \n@@ -8239,15 +8183,15 @@ regerror (errcode, preg, errbuf, errbuf_size)\n   size_t msg_size;\n \n   if (errcode < 0\n-      || errcode >= (int) (sizeof (re_error_msgid_idx)\n-\t\t\t   / sizeof (re_error_msgid_idx[0])))\n+      || errcode >= (int) (sizeof (re_error_msgid)\n+\t\t\t   / sizeof (re_error_msgid[0])))\n     /* Only error codes returned by the rest of the code should be passed\n        to this routine.  If we are given anything else, or if other regex\n        code generates an invalid error code, then the program has a bug.\n        Dump core so we can fix it.  */\n     abort ();\n \n-  msg = gettext (re_error_msgid + re_error_msgid_idx[errcode]);\n+  msg = gettext (re_error_msgid[errcode]);\n \n   msg_size = strlen (msg) + 1; /* Includes the null.  */\n "}]}