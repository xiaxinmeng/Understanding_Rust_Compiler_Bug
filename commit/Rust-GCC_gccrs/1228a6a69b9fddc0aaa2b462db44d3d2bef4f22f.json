{"sha": "1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIyOGE2YTY5YjlmZGRjMGFhYTJiNDYyZGI0NGQzZDJiZWY0ZjIyZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-01-27T09:22:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-01-27T09:22:36Z"}, "message": "gigi.h (get_minimal_subprog_decl): Declare.\n\n\t* gcc-interface/gigi.h (get_minimal_subprog_decl): Declare.\n\t* gcc-interface/decl.c (get_minimal_subprog_decl): New function.\n\t* gcc-interface/trans.c (Attribute_to_gnu): Use it for the prefix of an\n\tAccess-like attribute in a dispatch table if the subprogram is public.\n\nFrom-SVN: r183607", "tree": {"sha": "27220aacc35df038cd025daf85b09ead96c9cc36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27220aacc35df038cd025daf85b09ead96c9cc36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/comments", "author": null, "committer": null, "parents": [{"sha": "88a94e2bba73b6eeb77d82f5bb18d990d2f63b10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a94e2bba73b6eeb77d82f5bb18d990d2f63b10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a94e2bba73b6eeb77d82f5bb18d990d2f63b10"}], "stats": {"total": 175, "additions": 170, "deletions": 5}, "files": [{"sha": "82ec65b1ca03d92ea70f405a495394dbb76f398a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -1,3 +1,10 @@\n+2012-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (get_minimal_subprog_decl): Declare.\n+\t* gcc-interface/decl.c (get_minimal_subprog_decl): New function.\n+\t* gcc-interface/trans.c (Attribute_to_gnu): Use it for the prefix of an\n+\tAccess-like attribute in a dispatch table if the subprogram is public.\n+\n 2012-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (create_label_decl): Adjust."}, {"sha": "b0bf58658337f7d1fcbec68c7e761ca0c8dbfab2", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -3769,7 +3769,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    break;\n \t  }\n \n-\t/* If we have not done it yet, build the pointer type the usual way.  */\n+\t/* If we haven't done it yet, build the pointer type the usual way.  */\n \tif (!gnu_type)\n \t  {\n \t    /* Modify the designated type if we are pointing only to constant\n@@ -5229,6 +5229,42 @@ get_unpadded_type (Entity_Id gnat_entity)\n \n   return type;\n }\n+\n+/* Return the DECL associated with the public subprogram GNAT_ENTITY but whose\n+   type has been changed to that of the parameterless procedure, except if an\n+   alias is already present, in which case it is returned instead.  */\n+\n+tree\n+get_minimal_subprog_decl (Entity_Id gnat_entity)\n+{\n+  tree gnu_entity_name, gnu_ext_name;\n+  struct attrib *attr_list = NULL;\n+\n+  /* See the E_Function/E_Procedure case of gnat_to_gnu_entity for the model\n+     of the handling applied here.  */\n+\n+  while (Present (Alias (gnat_entity)))\n+    {\n+      gnat_entity = Alias (gnat_entity);\n+      if (present_gnu_tree (gnat_entity))\n+\treturn get_gnu_tree (gnat_entity);\n+    }\n+\n+  gnu_entity_name = get_entity_name (gnat_entity);\n+  gnu_ext_name = create_concat_name (gnat_entity, NULL);\n+\n+  if (Has_Stdcall_Convention (gnat_entity))\n+    prepend_one_attribute_to (&attr_list, ATTR_MACHINE_ATTRIBUTE,\n+\t\t\t      get_identifier (\"stdcall\"), NULL_TREE,\n+\t\t\t      gnat_entity);\n+\n+  if (No (Interface_Name (gnat_entity)) && gnu_ext_name == gnu_entity_name)\n+    gnu_ext_name = NULL_TREE;\n+\n+  return\n+    create_subprog_decl (gnu_entity_name, gnu_ext_name, void_ftype, NULL_TREE,\n+\t\t\t false, true, true, true, attr_list, gnat_entity);\n+}\n \f\n /* Wrap up compilation of DECL, a TYPE_DECL, possibly deferring it.\n    Every TYPE_DECL generated for a type definition must be passed\n@@ -5333,6 +5369,7 @@ Gigi_Equivalent_Type (Entity_Id gnat_entity)\n     }\n \n   gcc_assert (Present (gnat_equiv) || type_annotate_only);\n+\n   return gnat_equiv;\n }\n "}, {"sha": "00f64651de1a92747fa144bbd8dfa499bd422bcc", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2011, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -118,6 +118,11 @@ extern void mark_out_of_scope (Entity_Id gnat_entity);\n /* Get the unpadded version of a GNAT type.  */\n extern tree get_unpadded_type (Entity_Id gnat_entity);\n \n+/* Return the DECL associated with the public subprogram GNAT_ENTITY but whose\n+   type has been changed to that of the parameterless procedure, except if an\n+   alias is already present, in which case it is returned instead.  */\n+extern tree get_minimal_subprog_decl (Entity_Id gnat_entity);\n+\n /* Create a record type that contains a SIZE bytes long field of TYPE with a\n     starting bit position so that it is aligned to ALIGN bits, and leaving at\n     least ROOM bytes free before the field.  BASE_ALIGN is the alignment the"}, {"sha": "077d4a64769b16cb1a0e2d2de0894d25848cd3f3", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -1232,11 +1232,24 @@ Pragma_to_gnu (Node_Id gnat_node)\n static tree\n Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n {\n-  tree gnu_prefix = gnat_to_gnu (Prefix (gnat_node));\n-  tree gnu_type = TREE_TYPE (gnu_prefix);\n-  tree gnu_expr, gnu_result_type, gnu_result = error_mark_node;\n+  tree gnu_prefix, gnu_type, gnu_expr;\n+  tree gnu_result_type, gnu_result = error_mark_node;\n   bool prefix_unused = false;\n \n+  /* ??? If this is an access attribute for a public subprogram to be used in\n+     a dispatch table, do not translate its type as it's useless there and the\n+     parameter types might be incomplete types coming from a limited with.  */\n+  if (Ekind (Etype (gnat_node)) == E_Access_Subprogram_Type\n+      && Is_Dispatch_Table_Entity (Etype (gnat_node))\n+      && Nkind (Prefix (gnat_node)) == N_Identifier\n+      && Is_Subprogram (Entity (Prefix (gnat_node)))\n+      && Is_Public (Entity (Prefix (gnat_node)))\n+      && !present_gnu_tree (Entity (Prefix (gnat_node))))\n+    gnu_prefix = get_minimal_subprog_decl (Entity (Prefix (gnat_node)));\n+  else\n+    gnu_prefix = gnat_to_gnu (Prefix (gnat_node));\n+  gnu_type = TREE_TYPE (gnu_prefix);\n+\n   /* If the input is a NULL_EXPR, make a new one.  */\n   if (TREE_CODE (gnu_prefix) == NULL_EXPR)\n     {"}, {"sha": "7d4a19955bea48121e43a2b6f24a248a400d74cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -1,3 +1,10 @@\n+2012-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/limited_with3.ad[sb): New test.\n+\t* gnat.dg/limited_with3_pkg1.ad[sb]: New helper.\n+\t* gnat.dg/limited_with3_pkg2.ads: Likewise.\n+\t* gnat.dg/limited_with3_pkg3.ads: Likewise.\n+\n 2012-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/stack_usage1.adb: New test."}, {"sha": "36419246f78c086e1a77fda1d6a70d083f59b40a", "filename": "gcc/testsuite/gnat.dg/limited_with3.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3.adb?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do compile }\n+\n+with Limited_With3_Pkg3;\n+\n+package body Limited_With3 is\n+\n+  procedure Dummy is begin null; end;\n+\n+end Limited_With3;"}, {"sha": "c348d90444cea96fb4cda5a4f41feedd1f12da90", "filename": "gcc/testsuite/gnat.dg/limited_with3.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3.ads?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -0,0 +1,17 @@\n+with Limited_With3_Pkg1;\n+with Limited_With3_Pkg2;\n+limited with Limited_With3_Pkg3;\n+\n+package Limited_With3 is\n+\n+     procedure Dummy;\n+\n+     type T is tagged private;\n+\n+private\n+\n+     package My_Q is new Limited_With3_Pkg1 (Limited_With3_Pkg2.T);\n+\n+     type T is tagged null record;\n+\n+end Limited_With3;"}, {"sha": "6a7d92b41e00e719dbfdb2ca965e3ec54df19b69", "filename": "gcc/testsuite/gnat.dg/limited_with3_pkg1.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg1.adb?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -0,0 +1,20 @@\n+with Ada.Strings.Fixed.Hash;\n+\n+package body Limited_With3_Pkg1 is\n+\n+     function Equal ( Left, Right : Element_Access) return Boolean is\n+     begin\n+        return True;\n+     end;\n+\n+     function Equivalent_Keys (Left, Right : Key_Type) return Boolean is\n+     begin\n+        return True;\n+     end;\n+\n+     function Hash (Key : Key_Type) return Ada.Containers.Hash_Type is\n+     begin\n+         return Ada.Strings.Fixed.Hash (Key.all);\n+     end Hash;\n+\n+end Limited_With3_Pkg1;"}, {"sha": "622b4fe49a8078999ecaea2a35c3d81c30a4f753", "filename": "gcc/testsuite/gnat.dg/limited_with3_pkg1.ads", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg1.ads?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -0,0 +1,28 @@\n+with Ada.Containers.Hashed_Maps;\n+\n+generic\n+\n+     type Object_Type is tagged private;\n+\n+package Limited_With3_Pkg1 is\n+\n+     type Key_Type is access all String;\n+\n+     type Element_Type is new Object_Type with null record;\n+\n+     type Element_Access is access all Element_Type;\n+\n+     function Equal (Left, Right : Element_Access) return Boolean;\n+\n+     function Equivalent_Keys (Left, Right : Key_Type) return Boolean;\n+\n+     function Hash (Key : Key_Type) return Ada.Containers.Hash_Type;\n+\n+     package Table_Package is new Ada.Containers.Hashed_Maps (\n+         Key_Type            => Key_Type,\n+         Element_Type        => Element_Access,\n+         Hash                => Hash,\n+         Equivalent_Keys     => Equivalent_Keys,\n+         \"=\"                 => Equal);\n+\n+end Limited_With3_Pkg1;"}, {"sha": "f81bb7e0d59358054d9e8567d258fb55b7b7df5b", "filename": "gcc/testsuite/gnat.dg/limited_with3_pkg2.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg2.ads?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -0,0 +1,10 @@\n+limited with Limited_With3_Pkg3;\n+\n+package Limited_With3_Pkg2 is\n+\n+    type T is tagged null record;\n+\n+    procedure Proc (X : Limited_With3_Pkg3.TT; Y : T);\n+\n+end Limited_With3_Pkg2;\n+"}, {"sha": "e408182c6818e4ba4d8ec4c9c96b804f661d0d5d", "filename": "gcc/testsuite/gnat.dg/limited_with3_pkg3.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with3_pkg3.ads?ref=1228a6a69b9fddc0aaa2b462db44d3d2bef4f22f", "patch": "@@ -0,0 +1,12 @@\n+with Limited_With3;\n+with Limited_With3_Pkg1;\n+\n+package Limited_With3_Pkg3 is\n+\n+    package My_Q is new Limited_With3_Pkg1 (Limited_With3.T);\n+\n+    type TT is tagged record\n+       State : My_Q.Element_Access;\n+    end record;\n+\n+end Limited_With3_Pkg3;"}]}