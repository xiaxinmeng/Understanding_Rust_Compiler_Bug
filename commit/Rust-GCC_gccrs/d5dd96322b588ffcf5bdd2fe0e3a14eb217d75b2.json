{"sha": "d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkZDk2MzIyYjU4OGZmY2Y1YmRkMmZlMGUzYTE0ZWIyMTdkNzViMg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-22T12:42:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-22T13:56:26Z"}, "message": "Add Trait Resolver simple type-path lookup\n\nPost type checking we need to be able to lookup trait references, but do\nnot need to resolve the trait with error messages. We simple want to look\nit up if it exists.", "tree": {"sha": "6cc65a85f3761e6a07befee739179b2f100f3d6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cc65a85f3761e6a07befee739179b2f100f3d6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d609accab78269afe7fae509a0b7bb36d6e9d14e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d609accab78269afe7fae509a0b7bb36d6e9d14e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d609accab78269afe7fae509a0b7bb36d6e9d14e"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "aeedf7eb13a7d448138ab6d32391599529b29982", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2", "patch": "@@ -227,5 +227,27 @@ AssociatedImplTrait::get_projected_type (\n   return trait_item_tyty;\n }\n \n+// rust-hir-path-probe.h\n+\n+void\n+PathProbeImplTrait::process_trait_impl_items_for_candidates ()\n+{\n+  mappings->iterate_impl_items (\n+    [&] (HirId id, HIR::ImplItem *item, HIR::ImplBlock *impl) mutable -> bool {\n+      // just need to check if this is an impl block for this trait the next\n+      // function checks the receiver\n+      if (!impl->has_trait_ref ())\n+\treturn true;\n+\n+      TraitReference *resolved\n+\t= TraitResolver::Lookup (*(impl->get_trait_ref ().get ()));\n+      if (!trait_reference->is_equal (*resolved))\n+\treturn true;\n+\n+      process_impl_item_candidate (id, item, impl);\n+      return true;\n+    });\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "0fe240650c217820e66321b4626c1171d871ade0", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=d5dd96322b588ffcf5bdd2fe0e3a14eb217d75b2", "patch": "@@ -72,6 +72,12 @@ class TraitResolver : public TypeCheckBase\n     return resolver.go (path);\n   }\n \n+  static TraitReference *Lookup (HIR::TypePath &path)\n+  {\n+    TraitResolver resolver;\n+    return resolver.lookup_path (path);\n+  }\n+\n private:\n   TraitResolver () : TypeCheckBase () {}\n \n@@ -162,6 +168,40 @@ class TraitResolver : public TypeCheckBase\n     return tref;\n   }\n \n+  TraitReference *lookup_path (HIR::TypePath &path)\n+  {\n+    NodeId ref;\n+    if (!resolver->lookup_resolved_type (path.get_mappings ().get_nodeid (),\n+\t\t\t\t\t &ref))\n+      {\n+\trust_error_at (path.get_locus (), \"Failed to resolve path to node-id\");\n+\treturn &TraitReference::error_node ();\n+      }\n+\n+    HirId hir_node = UNKNOWN_HIRID;\n+    if (!mappings->lookup_node_to_hir (mappings->get_current_crate (), ref,\n+\t\t\t\t       &hir_node))\n+      {\n+\trust_error_at (path.get_locus (), \"Failed to resolve path to hir-id\");\n+\treturn &TraitReference::error_node ();\n+      }\n+\n+    HIR::Item *resolved_item\n+      = mappings->lookup_hir_item (mappings->get_current_crate (), hir_node);\n+\n+    rust_assert (resolved_item != nullptr);\n+    resolved_item->accept_vis (*this);\n+    rust_assert (trait_reference != nullptr);\n+\n+    TraitReference *tref = &TraitReference::error_node ();\n+    if (context->lookup_trait_reference (\n+\t  trait_reference->get_mappings ().get_defid (), &tref))\n+      {\n+\treturn tref;\n+      }\n+    return &TraitReference::error_node ();\n+  }\n+\n   HIR::Trait *trait_reference;\n \n public:"}]}