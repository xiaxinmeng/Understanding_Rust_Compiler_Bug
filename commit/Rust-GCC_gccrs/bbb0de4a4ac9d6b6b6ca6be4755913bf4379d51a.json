{"sha": "bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJiMGRlNGE0YWM5ZDZiNmI2Y2E2YmU0NzU1OTEzYmY0Mzc5ZDUxYQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-09T15:07:43Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-09T15:07:43Z"}, "message": "libphobos: Remove --enable-druntime-gc configure option.\n\nThis is yet another old option that would have been somewhat useful back\nbefore the D front-end implementation was able to support compiling\nwithout the Druntime library.\n\nNow however, -fno-druntime makes the gcstub package redundant, so the\noption has been removed, along with the package itself.\n\nlibphobos/ChangeLog:\n\n\t* configure: Regenerate.\n\t* libdruntime/Makefile.am (ALL_DRUNTIME_INSTALL_DSOURCES): Remove\n\tDRUNTIME_DSOURCES_GC and DRUNTIME_DSOURCES_GCSTUB.\n\t(DRUNTIME_DSOURCES): Add gc/*.d sources.\n\t(DRUNTIME_DSOURCES_GC): Remove.\n\t(DRUNTIME_DSOURCES_GCSTUB): Remove.\n\t* libdruntime/Makefile.in: Regenerate.\n\t* libdruntime/gcstub/gc.d: Remove.\n\t* m4/druntime.m4 (DRUNTIME_GC): Remove.", "tree": {"sha": "8a25f48ee086fe246b67917ed52f098bf9c4963b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a25f48ee086fe246b67917ed52f098bf9c4963b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b5bc7d12de344707e89c5111649dcc1ae4cd1cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd"}], "stats": {"total": 646, "additions": 99, "deletions": 547}, "files": [{"sha": "dc19a19851f69e8b1caedaf3e9afffaf5e4cc580", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a", "patch": "@@ -1,3 +1,15 @@\n+2020-04-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* configure: Regenerate.\n+\t* libdruntime/Makefile.am (ALL_DRUNTIME_INSTALL_DSOURCES): Remove\n+\tDRUNTIME_DSOURCES_GC and DRUNTIME_DSOURCES_GCSTUB.\n+\t(DRUNTIME_DSOURCES): Add gc/*.d sources.\n+\t(DRUNTIME_DSOURCES_GC): Remove.\n+\t(DRUNTIME_DSOURCES_GCSTUB): Remove.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* libdruntime/gcstub/gc.d: Remove.\n+\t* m4/druntime.m4 (DRUNTIME_GC): Remove.\n+\n 2020-04-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/94305"}, {"sha": "a6f5aec2bfd08b1480d6a067559e213a6596d066", "filename": "libphobos/configure", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a", "patch": "@@ -701,8 +701,6 @@ DRUNTIME_CPU_ARM_FALSE\n DRUNTIME_CPU_ARM_TRUE\n DRUNTIME_CPU_AARCH64_FALSE\n DRUNTIME_CPU_AARCH64_TRUE\n-DRUNTIME_GC_ENABLE_FALSE\n-DRUNTIME_GC_ENABLE_TRUE\n libphobos_srcdir\n libphobos_builddir\n get_gcc_base_ver\n@@ -835,7 +833,6 @@ with_gnu_ld\n enable_libtool_lock\n with_gcc_major_version_only\n enable_werror\n-enable_druntime_gc\n with_libatomic\n with_libbacktrace\n with_target_system_zlib\n@@ -1485,7 +1482,6 @@ Optional Features:\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n   --enable-werror         turns on -Werror [default=no]\n-  --enable-druntime-gc    enable D runtime garbage collector (default: yes)\n   --enable-version-specific-runtime-libs\n                           Specify that runtime libraries should be installed\n                           in a compiler-specific directory\n@@ -11649,7 +11645,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11652 \"configure\"\n+#line 11648 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11755,7 +11751,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11758 \"configure\"\n+#line 11754 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13981,24 +13977,7 @@ fi\n       WERROR_FLAG=\"-Werror\"\n   fi\n \n-\n-    # Check whether --enable-druntime-gc was given.\n-if test \"${enable_druntime_gc+set}\" = set; then :\n-  enableval=$enable_druntime_gc; enable_druntime_gc=no\n-else\n-  enable_druntime_gc=yes\n-fi\n-\n-\n-   if test \"$enable_druntime_gc\" = \"yes\"; then\n-  DRUNTIME_GC_ENABLE_TRUE=\n-  DRUNTIME_GC_ENABLE_FALSE='#'\n-else\n-  DRUNTIME_GC_ENABLE_TRUE='#'\n-  DRUNTIME_GC_ENABLE_FALSE=\n-fi\n-\n-\n+DRUNTIME_GC\n \n   druntime_target_cpu_parsed=\"\"\n   case \"$target_cpu\" in\n@@ -15510,10 +15489,6 @@ if test -z \"${MAINTAINER_MODE_TRUE}\" && test -z \"${MAINTAINER_MODE_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"MAINTAINER_MODE\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${DRUNTIME_GC_ENABLE_TRUE}\" && test -z \"${DRUNTIME_GC_ENABLE_FALSE}\"; then\n-  as_fn_error $? \"conditional \\\"DRUNTIME_GC_ENABLE\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n if test -z \"${DRUNTIME_CPU_AARCH64_TRUE}\" && test -z \"${DRUNTIME_CPU_AARCH64_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"DRUNTIME_CPU_AARCH64\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "c1c446d14fd657360f112c50a2a09e42afe0064f", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a", "patch": "@@ -28,7 +28,6 @@ AM_DFLAGS= \\\n \n # Install all D and DI files\n ALL_DRUNTIME_INSTALL_DSOURCES = $(DRUNTIME_DSOURCES) \\\n-\t$(DRUNTIME_DSOURCES_GC) $(DRUNTIME_DSOURCES_GCSTUB) \\\n \t$(DRUNTIME_DSOURCES_BIONIC) $(DRUNTIME_DSOURCES_DARWIN) \\\n \t$(DRUNTIME_DSOURCES_DRAGONFLYBSD) $(DRUNTIME_DSOURCES_FREEBSD) \\\n \t$(DRUNTIME_DSOURCES_LINUX) $(DRUNTIME_DSOURCES_NETBSD) \\\n@@ -40,12 +39,6 @@ ALL_DRUNTIME_INSTALL_DSOURCES = $(DRUNTIME_DSOURCES) \\\n # Setup source files depending on configure\n DRUNTIME_SOURCES_CONFIGURED =\n \n-# GC sources\n-if DRUNTIME_GC_ENABLE\n-    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_GC)\n-else\n-    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_GCSTUB)\n-endif\n # OS specific sources\n if DRUNTIME_OS_POSIX\n     DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_POSIX)\n@@ -168,7 +161,9 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/stdc/wctype.d core/sync/barrier.d core/sync/condition.d \\\n \tcore/sync/config.d core/sync/exception.d core/sync/mutex.d \\\n \tcore/sync/rwmutex.d core/sync/semaphore.d core/thread.d core/time.d \\\n-\tcore/vararg.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n+\tcore/vararg.d gc/bits.d gc/config.d gc/gcinterface.d \\\n+\tgc/impl/conservative/gc.d gc/impl/manual/gc.d gc/os.d gc/pooltable.d \\\n+\tgc/proxy.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n \tgcc/emutls.d gcc/gthread.d gcc/sections/android.d \\\n \tgcc/sections/elf_shared.d gcc/sections/osx.d gcc/sections/package.d \\\n \tgcc/sections/win32.d gcc/sections/win64.d gcc/unwind/arm.d \\\n@@ -199,12 +194,6 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n DRUNTIME_DSOURCES_STDCXX = core/stdcpp/exception.d \\\n \tcore/stdcpp/typeinfo.d\n \n-DRUNTIME_DSOURCES_GC = gc/bits.d gc/config.d gc/gcinterface.d \\\n-\tgc/impl/conservative/gc.d gc/impl/manual/gc.d gc/os.d gc/pooltable.d \\\n-\tgc/proxy.d\n-\n-DRUNTIME_DSOURCES_GCSTUB = gcstub/gc.d\n-\n DRUNTIME_DSOURCES_BIONIC = core/sys/bionic/fcntl.d \\\n \tcore/sys/bionic/string.d core/sys/bionic/unistd.d\n "}, {"sha": "9cb3b60520d308097d261083e30ef2f10383f3d8", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 81, "deletions": 101, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a", "patch": "@@ -108,30 +108,27 @@ build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n \n-# GC sources\n-@DRUNTIME_GC_ENABLE_TRUE@am__append_1 = $(DRUNTIME_DSOURCES_GC)\n-@DRUNTIME_GC_ENABLE_FALSE@am__append_2 = $(DRUNTIME_DSOURCES_GCSTUB)\n # OS specific sources\n-@DRUNTIME_OS_POSIX_TRUE@am__append_3 = $(DRUNTIME_DSOURCES_POSIX)\n-@DRUNTIME_OS_DARWIN_TRUE@am__append_4 = $(DRUNTIME_DSOURCES_DARWIN)\n-@DRUNTIME_OS_DRAGONFLYBSD_TRUE@am__append_5 = $(DRUNTIME_DSOURCES_DRAGONFLYBSD)\n-@DRUNTIME_OS_ANDROID_TRUE@am__append_6 = $(DRUNTIME_DSOURCES_BIONIC)\n-@DRUNTIME_OS_FREEBSD_TRUE@am__append_7 = $(DRUNTIME_DSOURCES_FREEBSD)\n-@DRUNTIME_OS_NETBSD_TRUE@am__append_8 = $(DRUNTIME_DSOURCES_NETBSD)\n-@DRUNTIME_OS_OPENBSD_TRUE@am__append_9 = $(DRUNTIME_DSOURCES_OPENBSD)\n-@DRUNTIME_OS_LINUX_TRUE@am__append_10 = $(DRUNTIME_DSOURCES_LINUX)\n-@DRUNTIME_OS_MINGW_TRUE@am__append_11 = $(DRUNTIME_DSOURCES_WINDOWS)\n-@DRUNTIME_OS_SOLARIS_TRUE@am__append_12 = $(DRUNTIME_DSOURCES_SOLARIS)\n+@DRUNTIME_OS_POSIX_TRUE@am__append_1 = $(DRUNTIME_DSOURCES_POSIX)\n+@DRUNTIME_OS_DARWIN_TRUE@am__append_2 = $(DRUNTIME_DSOURCES_DARWIN)\n+@DRUNTIME_OS_DRAGONFLYBSD_TRUE@am__append_3 = $(DRUNTIME_DSOURCES_DRAGONFLYBSD)\n+@DRUNTIME_OS_ANDROID_TRUE@am__append_4 = $(DRUNTIME_DSOURCES_BIONIC)\n+@DRUNTIME_OS_FREEBSD_TRUE@am__append_5 = $(DRUNTIME_DSOURCES_FREEBSD)\n+@DRUNTIME_OS_NETBSD_TRUE@am__append_6 = $(DRUNTIME_DSOURCES_NETBSD)\n+@DRUNTIME_OS_OPENBSD_TRUE@am__append_7 = $(DRUNTIME_DSOURCES_OPENBSD)\n+@DRUNTIME_OS_LINUX_TRUE@am__append_8 = $(DRUNTIME_DSOURCES_LINUX)\n+@DRUNTIME_OS_MINGW_TRUE@am__append_9 = $(DRUNTIME_DSOURCES_WINDOWS)\n+@DRUNTIME_OS_SOLARIS_TRUE@am__append_10 = $(DRUNTIME_DSOURCES_SOLARIS)\n # CPU specific sources\n-@DRUNTIME_CPU_AARCH64_TRUE@am__append_13 = config/aarch64/switchcontext.S\n-@DRUNTIME_CPU_ARM_TRUE@am__append_14 = config/arm/switchcontext.S\n-@DRUNTIME_CPU_MIPS_TRUE@am__append_15 = config/mips/switchcontext.S\n-@DRUNTIME_CPU_POWERPC_TRUE@am__append_16 = config/powerpc/switchcontext.S\n-@DRUNTIME_CPU_POWERPC64_TRUE@am__append_17 = config/powerpc64/callwithstack.S\n-@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_TRUE@am__append_18 = config/mingw/switchcontext.S\n-@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_FALSE@am__append_19 = config/x86/switchcontext.S\n-@DRUNTIME_CPU_SYSTEMZ_TRUE@am__append_20 = config/systemz/get_tls_offset.S\n-@DRUNTIME_CPU_S390_TRUE@am__append_21 = config/s390/get_tls_offset.S\n+@DRUNTIME_CPU_AARCH64_TRUE@am__append_11 = config/aarch64/switchcontext.S\n+@DRUNTIME_CPU_ARM_TRUE@am__append_12 = config/arm/switchcontext.S\n+@DRUNTIME_CPU_MIPS_TRUE@am__append_13 = config/mips/switchcontext.S\n+@DRUNTIME_CPU_POWERPC_TRUE@am__append_14 = config/powerpc/switchcontext.S\n+@DRUNTIME_CPU_POWERPC64_TRUE@am__append_15 = config/powerpc64/callwithstack.S\n+@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_TRUE@am__append_16 = config/mingw/switchcontext.S\n+@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_FALSE@am__append_17 = config/x86/switchcontext.S\n+@DRUNTIME_CPU_SYSTEMZ_TRUE@am__append_18 = config/systemz/get_tls_offset.S\n+@DRUNTIME_CPU_S390_TRUE@am__append_19 = config/s390/get_tls_offset.S\n subdir = libdruntime\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n@@ -205,7 +202,9 @@ am__objects_1 = core/atomic.lo core/attribute.lo core/bitop.lo \\\n \tcore/sync/condition.lo core/sync/config.lo \\\n \tcore/sync/exception.lo core/sync/mutex.lo core/sync/rwmutex.lo \\\n \tcore/sync/semaphore.lo core/thread.lo core/time.lo \\\n-\tcore/vararg.lo gcc/attribute.lo gcc/backtrace.lo \\\n+\tcore/vararg.lo gc/bits.lo gc/config.lo gc/gcinterface.lo \\\n+\tgc/impl/conservative/gc.lo gc/impl/manual/gc.lo gc/os.lo \\\n+\tgc/pooltable.lo gc/proxy.lo gcc/attribute.lo gcc/backtrace.lo \\\n \tgcc/builtins.lo gcc/deh.lo gcc/emutls.lo gcc/gthread.lo \\\n \tgcc/sections/android.lo gcc/sections/elf_shared.lo \\\n \tgcc/sections/osx.lo gcc/sections/package.lo \\\n@@ -241,13 +240,7 @@ am__objects_1 = core/atomic.lo core/attribute.lo core/bitop.lo \\\n \trt/util/container/treap.lo rt/util/random.lo \\\n \trt/util/typeinfo.lo rt/util/utf.lo\n am__objects_2 = core/stdc/libgdruntime_la-errno_.lo\n-am__objects_3 = gc/bits.lo gc/config.lo gc/gcinterface.lo \\\n-\tgc/impl/conservative/gc.lo gc/impl/manual/gc.lo gc/os.lo \\\n-\tgc/pooltable.lo gc/proxy.lo\n-@DRUNTIME_GC_ENABLE_TRUE@am__objects_4 = $(am__objects_3)\n-am__objects_5 = gcstub/gc.lo\n-@DRUNTIME_GC_ENABLE_FALSE@am__objects_6 = $(am__objects_5)\n-am__objects_7 = core/sys/posix/aio.lo core/sys/posix/arpa/inet.lo \\\n+am__objects_3 = core/sys/posix/aio.lo core/sys/posix/arpa/inet.lo \\\n \tcore/sys/posix/config.lo core/sys/posix/dirent.lo \\\n \tcore/sys/posix/dlfcn.lo core/sys/posix/fcntl.lo \\\n \tcore/sys/posix/grp.lo core/sys/posix/iconv.lo \\\n@@ -272,8 +265,8 @@ am__objects_7 = core/sys/posix/aio.lo core/sys/posix/arpa/inet.lo \\\n \tcore/sys/posix/syslog.lo core/sys/posix/termios.lo \\\n \tcore/sys/posix/time.lo core/sys/posix/ucontext.lo \\\n \tcore/sys/posix/unistd.lo core/sys/posix/utime.lo\n-@DRUNTIME_OS_POSIX_TRUE@am__objects_8 = $(am__objects_7)\n-am__objects_9 = core/sys/darwin/crt_externs.lo \\\n+@DRUNTIME_OS_POSIX_TRUE@am__objects_4 = $(am__objects_3)\n+am__objects_5 = core/sys/darwin/crt_externs.lo \\\n \tcore/sys/darwin/dlfcn.lo core/sys/darwin/execinfo.lo \\\n \tcore/sys/darwin/mach/dyld.lo core/sys/darwin/mach/getsect.lo \\\n \tcore/sys/darwin/mach/kern_return.lo \\\n@@ -283,8 +276,8 @@ am__objects_9 = core/sys/darwin/crt_externs.lo \\\n \tcore/sys/darwin/netinet/in_.lo core/sys/darwin/pthread.lo \\\n \tcore/sys/darwin/string.lo core/sys/darwin/sys/cdefs.lo \\\n \tcore/sys/darwin/sys/event.lo core/sys/darwin/sys/mman.lo\n-@DRUNTIME_OS_DARWIN_TRUE@am__objects_10 = $(am__objects_9)\n-am__objects_11 = core/sys/dragonflybsd/dlfcn.lo \\\n+@DRUNTIME_OS_DARWIN_TRUE@am__objects_6 = $(am__objects_5)\n+am__objects_7 = core/sys/dragonflybsd/dlfcn.lo \\\n \tcore/sys/dragonflybsd/execinfo.lo \\\n \tcore/sys/dragonflybsd/netinet/in_.lo \\\n \tcore/sys/dragonflybsd/pthread_np.lo \\\n@@ -301,11 +294,11 @@ am__objects_11 = core/sys/dragonflybsd/dlfcn.lo \\\n \tcore/sys/dragonflybsd/sys/mman.lo \\\n \tcore/sys/dragonflybsd/sys/socket.lo \\\n \tcore/sys/dragonflybsd/time.lo\n-@DRUNTIME_OS_DRAGONFLYBSD_TRUE@am__objects_12 = $(am__objects_11)\n-am__objects_13 = core/sys/bionic/fcntl.lo core/sys/bionic/string.lo \\\n+@DRUNTIME_OS_DRAGONFLYBSD_TRUE@am__objects_8 = $(am__objects_7)\n+am__objects_9 = core/sys/bionic/fcntl.lo core/sys/bionic/string.lo \\\n \tcore/sys/bionic/unistd.lo\n-@DRUNTIME_OS_ANDROID_TRUE@am__objects_14 = $(am__objects_13)\n-am__objects_15 = core/sys/freebsd/dlfcn.lo \\\n+@DRUNTIME_OS_ANDROID_TRUE@am__objects_10 = $(am__objects_9)\n+am__objects_11 = core/sys/freebsd/dlfcn.lo \\\n \tcore/sys/freebsd/execinfo.lo core/sys/freebsd/netinet/in_.lo \\\n \tcore/sys/freebsd/pthread_np.lo core/sys/freebsd/string.lo \\\n \tcore/sys/freebsd/sys/_bitset.lo \\\n@@ -316,23 +309,23 @@ am__objects_15 = core/sys/freebsd/dlfcn.lo \\\n \tcore/sys/freebsd/sys/event.lo core/sys/freebsd/sys/link_elf.lo \\\n \tcore/sys/freebsd/sys/mman.lo core/sys/freebsd/sys/mount.lo \\\n \tcore/sys/freebsd/time.lo core/sys/freebsd/unistd.lo\n-@DRUNTIME_OS_FREEBSD_TRUE@am__objects_16 = $(am__objects_15)\n-am__objects_17 = core/sys/netbsd/dlfcn.lo core/sys/netbsd/execinfo.lo \\\n+@DRUNTIME_OS_FREEBSD_TRUE@am__objects_12 = $(am__objects_11)\n+am__objects_13 = core/sys/netbsd/dlfcn.lo core/sys/netbsd/execinfo.lo \\\n \tcore/sys/netbsd/string.lo core/sys/netbsd/sys/elf.lo \\\n \tcore/sys/netbsd/sys/elf32.lo core/sys/netbsd/sys/elf64.lo \\\n \tcore/sys/netbsd/sys/elf_common.lo core/sys/netbsd/sys/event.lo \\\n \tcore/sys/netbsd/sys/featuretest.lo \\\n \tcore/sys/netbsd/sys/link_elf.lo core/sys/netbsd/sys/mman.lo \\\n \tcore/sys/netbsd/time.lo\n-@DRUNTIME_OS_NETBSD_TRUE@am__objects_18 = $(am__objects_17)\n-am__objects_19 = core/sys/openbsd/dlfcn.lo core/sys/openbsd/string.lo \\\n+@DRUNTIME_OS_NETBSD_TRUE@am__objects_14 = $(am__objects_13)\n+am__objects_15 = core/sys/openbsd/dlfcn.lo core/sys/openbsd/string.lo \\\n \tcore/sys/openbsd/sys/cdefs.lo core/sys/openbsd/sys/elf.lo \\\n \tcore/sys/openbsd/sys/elf32.lo core/sys/openbsd/sys/elf64.lo \\\n \tcore/sys/openbsd/sys/elf_common.lo \\\n \tcore/sys/openbsd/sys/link_elf.lo core/sys/openbsd/sys/mman.lo \\\n \tcore/sys/openbsd/time.lo\n-@DRUNTIME_OS_OPENBSD_TRUE@am__objects_20 = $(am__objects_19)\n-am__objects_21 = core/sys/linux/config.lo core/sys/linux/dlfcn.lo \\\n+@DRUNTIME_OS_OPENBSD_TRUE@am__objects_16 = $(am__objects_15)\n+am__objects_17 = core/sys/linux/config.lo core/sys/linux/dlfcn.lo \\\n \tcore/sys/linux/elf.lo core/sys/linux/epoll.lo \\\n \tcore/sys/linux/errno.lo core/sys/linux/execinfo.lo \\\n \tcore/sys/linux/fcntl.lo core/sys/linux/ifaddrs.lo \\\n@@ -348,8 +341,8 @@ am__objects_21 = core/sys/linux/config.lo core/sys/linux/dlfcn.lo \\\n \tcore/sys/linux/termios.lo core/sys/linux/time.lo \\\n \tcore/sys/linux/timerfd.lo core/sys/linux/tipc.lo \\\n \tcore/sys/linux/unistd.lo\n-@DRUNTIME_OS_LINUX_TRUE@am__objects_22 = $(am__objects_21)\n-am__objects_23 = core/sys/windows/accctrl.lo \\\n+@DRUNTIME_OS_LINUX_TRUE@am__objects_18 = $(am__objects_17)\n+am__objects_19 = core/sys/windows/accctrl.lo \\\n \tcore/sys/windows/aclapi.lo core/sys/windows/aclui.lo \\\n \tcore/sys/windows/basetsd.lo core/sys/windows/basetyps.lo \\\n \tcore/sys/windows/cderr.lo core/sys/windows/cguid.lo \\\n@@ -432,8 +425,8 @@ am__objects_23 = core/sys/windows/accctrl.lo \\\n \tcore/sys/windows/winspool.lo core/sys/windows/winsvc.lo \\\n \tcore/sys/windows/winuser.lo core/sys/windows/winver.lo \\\n \tcore/sys/windows/wtsapi32.lo core/sys/windows/wtypes.lo\n-@DRUNTIME_OS_MINGW_TRUE@am__objects_24 = $(am__objects_23)\n-am__objects_25 = core/sys/solaris/dlfcn.lo core/sys/solaris/elf.lo \\\n+@DRUNTIME_OS_MINGW_TRUE@am__objects_20 = $(am__objects_19)\n+am__objects_21 = core/sys/solaris/dlfcn.lo core/sys/solaris/elf.lo \\\n \tcore/sys/solaris/execinfo.lo core/sys/solaris/libelf.lo \\\n \tcore/sys/solaris/link.lo core/sys/solaris/sys/elf.lo \\\n \tcore/sys/solaris/sys/elf_386.lo \\\n@@ -444,27 +437,27 @@ am__objects_25 = core/sys/solaris/dlfcn.lo core/sys/solaris/elf.lo \\\n \tcore/sys/solaris/sys/priocntl.lo \\\n \tcore/sys/solaris/sys/procset.lo core/sys/solaris/sys/types.lo \\\n \tcore/sys/solaris/time.lo\n-@DRUNTIME_OS_SOLARIS_TRUE@am__objects_26 = $(am__objects_25)\n-@DRUNTIME_CPU_AARCH64_TRUE@am__objects_27 = config/aarch64/libgdruntime_la-switchcontext.lo\n-@DRUNTIME_CPU_ARM_TRUE@am__objects_28 = config/arm/libgdruntime_la-switchcontext.lo\n-@DRUNTIME_CPU_MIPS_TRUE@am__objects_29 = config/mips/libgdruntime_la-switchcontext.lo\n-@DRUNTIME_CPU_POWERPC_TRUE@am__objects_30 = config/powerpc/libgdruntime_la-switchcontext.lo\n-@DRUNTIME_CPU_POWERPC64_TRUE@am__objects_31 = config/powerpc64/libgdruntime_la-callwithstack.lo\n-@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_TRUE@am__objects_32 = config/mingw/libgdruntime_la-switchcontext.lo\n-@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_FALSE@am__objects_33 = config/x86/libgdruntime_la-switchcontext.lo\n-@DRUNTIME_CPU_SYSTEMZ_TRUE@am__objects_34 = config/systemz/libgdruntime_la-get_tls_offset.lo\n-@DRUNTIME_CPU_S390_TRUE@am__objects_35 = config/s390/libgdruntime_la-get_tls_offset.lo\n-am__objects_36 = $(am__objects_4) $(am__objects_6) $(am__objects_8) \\\n+@DRUNTIME_OS_SOLARIS_TRUE@am__objects_22 = $(am__objects_21)\n+@DRUNTIME_CPU_AARCH64_TRUE@am__objects_23 = config/aarch64/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_ARM_TRUE@am__objects_24 = config/arm/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_MIPS_TRUE@am__objects_25 = config/mips/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_POWERPC_TRUE@am__objects_26 = config/powerpc/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_POWERPC64_TRUE@am__objects_27 = config/powerpc64/libgdruntime_la-callwithstack.lo\n+@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_TRUE@am__objects_28 = config/mingw/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_FALSE@am__objects_29 = config/x86/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_SYSTEMZ_TRUE@am__objects_30 = config/systemz/libgdruntime_la-get_tls_offset.lo\n+@DRUNTIME_CPU_S390_TRUE@am__objects_31 = config/s390/libgdruntime_la-get_tls_offset.lo\n+am__objects_32 = $(am__objects_4) $(am__objects_6) $(am__objects_8) \\\n \t$(am__objects_10) $(am__objects_12) $(am__objects_14) \\\n \t$(am__objects_16) $(am__objects_18) $(am__objects_20) \\\n-\t$(am__objects_22) $(am__objects_24) $(am__objects_26) \\\n-\t$(am__objects_27) $(am__objects_28) $(am__objects_29) \\\n-\t$(am__objects_30) $(am__objects_31) $(am__objects_32) \\\n-\t$(am__objects_33) $(am__objects_34) $(am__objects_35)\n-am__objects_37 = gcc/config.lo gcc/libbacktrace.lo\n-am__objects_38 = $(am__objects_1) $(am__objects_2) $(am__objects_36) \\\n-\t$(am__objects_37)\n-am_libgdruntime_la_OBJECTS = $(am__objects_38)\n+\t$(am__objects_22) $(am__objects_23) $(am__objects_24) \\\n+\t$(am__objects_25) $(am__objects_26) $(am__objects_27) \\\n+\t$(am__objects_28) $(am__objects_29) $(am__objects_30) \\\n+\t$(am__objects_31)\n+am__objects_33 = gcc/config.lo gcc/libbacktrace.lo\n+am__objects_34 = $(am__objects_1) $(am__objects_2) $(am__objects_32) \\\n+\t$(am__objects_33)\n+am_libgdruntime_la_OBJECTS = $(am__objects_34)\n libgdruntime_la_OBJECTS = $(am_libgdruntime_la_OBJECTS)\n AM_V_P = $(am__v_P_@AM_V@)\n am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)\n@@ -721,7 +714,6 @@ AM_DFLAGS = \\\n \n # Install all D and DI files\n ALL_DRUNTIME_INSTALL_DSOURCES = $(DRUNTIME_DSOURCES) \\\n-\t$(DRUNTIME_DSOURCES_GC) $(DRUNTIME_DSOURCES_GCSTUB) \\\n \t$(DRUNTIME_DSOURCES_BIONIC) $(DRUNTIME_DSOURCES_DARWIN) \\\n \t$(DRUNTIME_DSOURCES_DRAGONFLYBSD) $(DRUNTIME_DSOURCES_FREEBSD) \\\n \t$(DRUNTIME_DSOURCES_LINUX) $(DRUNTIME_DSOURCES_NETBSD) \\\n@@ -738,8 +730,7 @@ DRUNTIME_SOURCES_CONFIGURED = $(am__append_1) $(am__append_2) \\\n \t$(am__append_9) $(am__append_10) $(am__append_11) \\\n \t$(am__append_12) $(am__append_13) $(am__append_14) \\\n \t$(am__append_15) $(am__append_16) $(am__append_17) \\\n-\t$(am__append_18) $(am__append_19) $(am__append_20) \\\n-\t$(am__append_21)\n+\t$(am__append_18) $(am__append_19)\n \n # Provide __start_minfo, __stop_minfo if linker doesn't.\n @DRUNTIME_OS_MINFO_BRACKETING_FALSE@DRTSTUFF = gcc/drtbegin.o gcc/drtend.o\n@@ -779,7 +770,9 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/stdc/wctype.d core/sync/barrier.d core/sync/condition.d \\\n \tcore/sync/config.d core/sync/exception.d core/sync/mutex.d \\\n \tcore/sync/rwmutex.d core/sync/semaphore.d core/thread.d core/time.d \\\n-\tcore/vararg.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n+\tcore/vararg.d gc/bits.d gc/config.d gc/gcinterface.d \\\n+\tgc/impl/conservative/gc.d gc/impl/manual/gc.d gc/os.d gc/pooltable.d \\\n+\tgc/proxy.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n \tgcc/emutls.d gcc/gthread.d gcc/sections/android.d \\\n \tgcc/sections/elf_shared.d gcc/sections/osx.d gcc/sections/package.d \\\n \tgcc/sections/win32.d gcc/sections/win64.d gcc/unwind/arm.d \\\n@@ -810,11 +803,6 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n DRUNTIME_DSOURCES_STDCXX = core/stdcpp/exception.d \\\n \tcore/stdcpp/typeinfo.d\n \n-DRUNTIME_DSOURCES_GC = gc/bits.d gc/config.d gc/gcinterface.d \\\n-\tgc/impl/conservative/gc.d gc/impl/manual/gc.d gc/os.d gc/pooltable.d \\\n-\tgc/proxy.d\n-\n-DRUNTIME_DSOURCES_GCSTUB = gcstub/gc.d\n DRUNTIME_DSOURCES_BIONIC = core/sys/bionic/fcntl.d \\\n \tcore/sys/bionic/string.d core/sys/bionic/unistd.d\n \n@@ -1132,6 +1120,23 @@ core/sync/semaphore.lo: core/sync/$(am__dirstamp)\n core/thread.lo: core/$(am__dirstamp)\n core/time.lo: core/$(am__dirstamp)\n core/vararg.lo: core/$(am__dirstamp)\n+gc/$(am__dirstamp):\n+\t@$(MKDIR_P) gc\n+\t@: > gc/$(am__dirstamp)\n+gc/bits.lo: gc/$(am__dirstamp)\n+gc/config.lo: gc/$(am__dirstamp)\n+gc/gcinterface.lo: gc/$(am__dirstamp)\n+gc/impl/conservative/$(am__dirstamp):\n+\t@$(MKDIR_P) gc/impl/conservative\n+\t@: > gc/impl/conservative/$(am__dirstamp)\n+gc/impl/conservative/gc.lo: gc/impl/conservative/$(am__dirstamp)\n+gc/impl/manual/$(am__dirstamp):\n+\t@$(MKDIR_P) gc/impl/manual\n+\t@: > gc/impl/manual/$(am__dirstamp)\n+gc/impl/manual/gc.lo: gc/impl/manual/$(am__dirstamp)\n+gc/os.lo: gc/$(am__dirstamp)\n+gc/pooltable.lo: gc/$(am__dirstamp)\n+gc/proxy.lo: gc/$(am__dirstamp)\n gcc/$(am__dirstamp):\n \t@$(MKDIR_P) gcc\n \t@: > gcc/$(am__dirstamp)\n@@ -1239,27 +1244,6 @@ rt/util/random.lo: rt/util/$(am__dirstamp)\n rt/util/typeinfo.lo: rt/util/$(am__dirstamp)\n rt/util/utf.lo: rt/util/$(am__dirstamp)\n core/stdc/libgdruntime_la-errno_.lo: core/stdc/$(am__dirstamp)\n-gc/$(am__dirstamp):\n-\t@$(MKDIR_P) gc\n-\t@: > gc/$(am__dirstamp)\n-gc/bits.lo: gc/$(am__dirstamp)\n-gc/config.lo: gc/$(am__dirstamp)\n-gc/gcinterface.lo: gc/$(am__dirstamp)\n-gc/impl/conservative/$(am__dirstamp):\n-\t@$(MKDIR_P) gc/impl/conservative\n-\t@: > gc/impl/conservative/$(am__dirstamp)\n-gc/impl/conservative/gc.lo: gc/impl/conservative/$(am__dirstamp)\n-gc/impl/manual/$(am__dirstamp):\n-\t@$(MKDIR_P) gc/impl/manual\n-\t@: > gc/impl/manual/$(am__dirstamp)\n-gc/impl/manual/gc.lo: gc/impl/manual/$(am__dirstamp)\n-gc/os.lo: gc/$(am__dirstamp)\n-gc/pooltable.lo: gc/$(am__dirstamp)\n-gc/proxy.lo: gc/$(am__dirstamp)\n-gcstub/$(am__dirstamp):\n-\t@$(MKDIR_P) gcstub\n-\t@: > gcstub/$(am__dirstamp)\n-gcstub/gc.lo: gcstub/$(am__dirstamp)\n core/sys/posix/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/posix\n \t@: > core/sys/posix/$(am__dirstamp)\n@@ -1856,8 +1840,6 @@ mostlyclean-compile:\n \t-rm -f gcc/sections/*.lo\n \t-rm -f gcc/unwind/*.$(OBJEXT)\n \t-rm -f gcc/unwind/*.lo\n-\t-rm -f gcstub/*.$(OBJEXT)\n-\t-rm -f gcstub/*.lo\n \t-rm -f rt/*.$(OBJEXT)\n \t-rm -f rt/*.lo\n \t-rm -f rt/typeinfo/*.$(OBJEXT)\n@@ -1969,7 +1951,6 @@ clean-libtool:\n \t-rm -rf gcc/.libs gcc/_libs\n \t-rm -rf gcc/sections/.libs gcc/sections/_libs\n \t-rm -rf gcc/unwind/.libs gcc/unwind/_libs\n-\t-rm -rf gcstub/.libs gcstub/_libs\n \t-rm -rf rt/.libs rt/_libs\n \t-rm -rf rt/typeinfo/.libs rt/typeinfo/_libs\n \t-rm -rf rt/util/.libs rt/util/_libs\n@@ -2126,7 +2107,6 @@ distclean-generic:\n \t-rm -f gcc/$(am__dirstamp)\n \t-rm -f gcc/sections/$(am__dirstamp)\n \t-rm -f gcc/unwind/$(am__dirstamp)\n-\t-rm -f gcstub/$(am__dirstamp)\n \t-rm -f rt/$(am__dirstamp)\n \t-rm -f rt/typeinfo/$(am__dirstamp)\n \t-rm -f rt/util/$(am__dirstamp)"}, {"sha": "9124a78ef53aa3c64004c75d9a9d1e82ae9e7415", "filename": "libphobos/libdruntime/gcstub/gc.d", "status": "removed", "additions": 0, "deletions": 388, "changes": 388, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd/libphobos%2Flibdruntime%2Fgcstub%2Fgc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd/libphobos%2Flibdruntime%2Fgcstub%2Fgc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcstub%2Fgc.d?ref=8b5bc7d12de344707e89c5111649dcc1ae4cd1cd", "patch": "@@ -1,388 +0,0 @@\n-/**\n- * This module contains a minimal garbage collector implementation according to\n- * published requirements.  This library is mostly intended to serve as an\n- * example, but it is usable in applications which do not rely on a garbage\n- * collector to clean up memory (ie. when dynamic array resizing is not used,\n- * and all memory allocated with 'new' is freed deterministically with\n- * 'delete').\n- *\n- * Please note that block attribute data must be tracked, or at a minimum, the\n- * FINALIZE bit must be tracked for any allocated memory block because calling\n- * rt_finalize on a non-object block can result in an access violation.  In the\n- * allocator below, this tracking is done via a leading uint bitmask.  A real\n- * allocator may do better to store this data separately, similar to the basic\n- * GC.\n- *\n- * Copyright: Copyright Sean Kelly 2005 - 2009.\n- * License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n- * Authors:   Sean Kelly\n- */\n-\n-/*          Copyright Sean Kelly 2005 - 2009.\n- * Distributed under the Boost Software License, Version 1.0.\n- *    (See accompanying file LICENSE or copy at\n- *          http://www.boost.org/LICENSE_1_0.txt)\n- */\n-module gc.gc;\n-\n-private\n-{\n-    import core.stdc.stdlib;\n-    import core.stdc.stdio;\n-\n-    static import core.memory;\n-    private alias BlkAttr = core.memory.GC.BlkAttr;\n-    private alias BlkInfo = core.memory.GC.BlkInfo;\n-\n-    extern (C) void thread_init();\n-    extern (C) void onOutOfMemoryError(void* pretend_sideffect = null) @trusted pure nothrow @nogc; /* dmd @@@BUG11461@@@ */\n-\n-    struct Proxy\n-    {\n-        extern (C) void function() gc_enable;\n-        extern (C) void function() gc_disable;\n-        extern (C) void function() gc_collect;\n-        extern (C) void function() gc_minimize;\n-\n-        extern (C) uint function(void*) gc_getAttr;\n-        extern (C) uint function(void*, uint) gc_setAttr;\n-        extern (C) uint function(void*, uint) gc_clrAttr;\n-\n-        extern (C) void*   function(size_t, uint, const TypeInfo) gc_malloc;\n-        extern (C) BlkInfo function(size_t, uint, const TypeInfo) gc_qalloc;\n-        extern (C) void*   function(size_t, uint, const TypeInfo) gc_calloc;\n-        extern (C) void*   function(void*, size_t, uint ba, const TypeInfo) gc_realloc;\n-        extern (C) size_t  function(void*, size_t, size_t, const TypeInfo) gc_extend;\n-        extern (C) size_t  function(size_t) gc_reserve;\n-        extern (C) void    function(void*) gc_free;\n-\n-        extern (C) void*   function(void*) gc_addrOf;\n-        extern (C) size_t  function(void*) gc_sizeOf;\n-\n-        extern (C) BlkInfo function(void*) gc_query;\n-\n-        extern (C) void function(void*) gc_addRoot;\n-        extern (C) void function(void*, size_t, const TypeInfo ti) gc_addRange;\n-\n-        extern (C) void function(void*) gc_removeRoot;\n-        extern (C) void function(void*) gc_removeRange;\n-        extern (C) void function(in void[]) gc_runFinalizers;\n-\n-        extern (C) bool function() gc_inFinalizer;\n-    }\n-\n-    __gshared Proxy  pthis;\n-    __gshared Proxy* proxy;\n-\n-    void initProxy()\n-    {\n-        pthis.gc_enable = &gc_enable;\n-        pthis.gc_disable = &gc_disable;\n-        pthis.gc_collect = &gc_collect;\n-        pthis.gc_minimize = &gc_minimize;\n-\n-        pthis.gc_getAttr = &gc_getAttr;\n-        pthis.gc_setAttr = &gc_setAttr;\n-        pthis.gc_clrAttr = &gc_clrAttr;\n-\n-        pthis.gc_malloc = &gc_malloc;\n-        pthis.gc_qalloc = &gc_qalloc;\n-        pthis.gc_calloc = &gc_calloc;\n-        pthis.gc_realloc = &gc_realloc;\n-        pthis.gc_extend = &gc_extend;\n-        pthis.gc_reserve = &gc_reserve;\n-        pthis.gc_free = &gc_free;\n-\n-        pthis.gc_addrOf = &gc_addrOf;\n-        pthis.gc_sizeOf = &gc_sizeOf;\n-\n-        pthis.gc_query = &gc_query;\n-\n-        pthis.gc_addRoot = &gc_addRoot;\n-        pthis.gc_addRange = &gc_addRange;\n-\n-        pthis.gc_removeRoot = &gc_removeRoot;\n-        pthis.gc_removeRange = &gc_removeRange;\n-        pthis.gc_runFinalizers = &gc_runFinalizers;\n-\n-        pthis.gc_inFinalizer = &gc_inFinalizer;\n-    }\n-\n-    __gshared void** roots  = null;\n-    __gshared size_t nroots = 0;\n-\n-    struct Range\n-    {\n-        void*  pos;\n-        size_t len;\n-        TypeInfo ti; // should be tail const, but doesn't exist for references\n-    }\n-\n-    __gshared Range* ranges  = null;\n-    __gshared size_t nranges = 0;\n-}\n-\n-extern (C) void gc_init()\n-{\n-    // NOTE: The GC must initialize the thread library before its first\n-    //       collection, and always before returning from gc_init().\n-    thread_init();\n-    initProxy();\n-}\n-\n-extern (C) void gc_term()\n-{\n-    free( roots );\n-    free( ranges );\n-}\n-\n-extern (C) void gc_enable()\n-{\n-    if ( proxy is null )\n-        return;\n-    return proxy.gc_enable();\n-}\n-\n-extern (C) void gc_disable()\n-{\n-    if ( proxy is null )\n-        return;\n-    return proxy.gc_disable();\n-}\n-\n-extern (C) void gc_collect()\n-{\n-    if ( proxy is null )\n-        return;\n-    return proxy.gc_collect();\n-}\n-\n-extern (C) void gc_minimize()\n-{\n-    if ( proxy is null )\n-        return;\n-    return proxy.gc_minimize();\n-}\n-\n-extern (C) uint gc_getAttr( void* p )\n-{\n-    if ( proxy is null )\n-        return 0;\n-    return proxy.gc_getAttr( p );\n-}\n-\n-extern (C) uint gc_setAttr( void* p, uint a )\n-{\n-    if ( proxy is null )\n-        return 0;\n-    return proxy.gc_setAttr( p, a );\n-}\n-\n-extern (C) uint gc_clrAttr( void* p, uint a )\n-{\n-    if ( proxy is null )\n-        return 0;\n-    return proxy.gc_clrAttr( p, a );\n-}\n-\n-extern (C) void* gc_malloc( size_t sz, uint ba = 0, const TypeInfo ti = null )\n-{\n-    if ( proxy is null )\n-    {\n-        void* p = malloc( sz );\n-\n-        if ( sz && p is null )\n-            onOutOfMemoryError();\n-        return p;\n-    }\n-    return proxy.gc_malloc( sz, ba, ti );\n-}\n-\n-extern (C) BlkInfo gc_qalloc( size_t sz, uint ba = 0, const TypeInfo ti = null )\n-{\n-    if ( proxy is null )\n-    {\n-        BlkInfo retval;\n-        retval.base = gc_malloc(sz, ba);\n-        retval.size = sz;\n-        retval.attr = ba;\n-        return retval;\n-    }\n-    return proxy.gc_qalloc( sz, ba, ti );\n-}\n-\n-extern (C) void* gc_calloc( size_t sz, uint ba = 0, const TypeInfo ti = null )\n-{\n-    if ( proxy is null )\n-    {\n-        void* p = calloc( 1, sz );\n-\n-        if ( sz && p is null )\n-            onOutOfMemoryError();\n-        return p;\n-    }\n-    return proxy.gc_calloc( sz, ba, ti );\n-}\n-\n-extern (C) void* gc_realloc( void* p, size_t sz, uint ba = 0, const TypeInfo ti = null )\n-{\n-    if ( proxy is null )\n-    {\n-        p = realloc( p, sz );\n-\n-        if ( sz && p is null )\n-            onOutOfMemoryError();\n-        return p;\n-    }\n-    return proxy.gc_realloc( p, sz, ba, ti );\n-}\n-\n-extern (C) size_t gc_extend( void* p, size_t mx, size_t sz, const TypeInfo ti = null )\n-{\n-    if ( proxy is null )\n-        return 0;\n-    return proxy.gc_extend( p, mx, sz, ti );\n-}\n-\n-extern (C) size_t gc_reserve( size_t sz )\n-{\n-    if ( proxy is null )\n-        return 0;\n-    return proxy.gc_reserve( sz );\n-}\n-\n-extern (C) void gc_free( void* p )\n-{\n-    if ( proxy is null )\n-        return free( p );\n-    return proxy.gc_free( p );\n-}\n-\n-extern (C) void* gc_addrOf( void* p )\n-{\n-    if ( proxy is null )\n-        return null;\n-    return proxy.gc_addrOf( p );\n-}\n-\n-extern (C) size_t gc_sizeOf( void* p )\n-{\n-    if ( proxy is null )\n-        return 0;\n-    return proxy.gc_sizeOf( p );\n-}\n-\n-extern (C) BlkInfo gc_query( void* p )\n-{\n-    if ( proxy is null )\n-        return BlkInfo.init;\n-    return proxy.gc_query( p );\n-}\n-\n-extern (C) void gc_addRoot( void* p )\n-{\n-    if ( proxy is null )\n-    {\n-        void** r = cast(void**) realloc( roots,\n-                                         (nroots+1) * roots[0].sizeof );\n-        if ( r is null )\n-            onOutOfMemoryError();\n-        r[nroots++] = p;\n-        roots = r;\n-        return;\n-    }\n-    return proxy.gc_addRoot( p );\n-}\n-\n-extern (C) void gc_addRange( void* p, size_t sz, const TypeInfo ti = null )\n-{\n-    //printf(\"gcstub::gc_addRange() proxy = %p\\n\", proxy);\n-    if ( proxy is null )\n-    {\n-        Range* r = cast(Range*) realloc( ranges,\n-                                         (nranges+1) * ranges[0].sizeof );\n-        if ( r is null )\n-            onOutOfMemoryError();\n-        r[nranges].pos = p;\n-        r[nranges].len = sz;\n-        r[nranges].ti = cast()ti;\n-        ranges = r;\n-        ++nranges;\n-        return;\n-    }\n-    return proxy.gc_addRange( p, sz, ti );\n-}\n-\n-extern (C) void gc_removeRoot( void *p )\n-{\n-    if ( proxy is null )\n-    {\n-        for ( size_t i = 0; i < nroots; ++i )\n-        {\n-            if ( roots[i] is p )\n-            {\n-                roots[i] = roots[--nroots];\n-                return;\n-            }\n-        }\n-        assert( false );\n-    }\n-    return proxy.gc_removeRoot( p );\n-}\n-\n-extern (C) void gc_removeRange( void *p )\n-{\n-    if ( proxy is null )\n-    {\n-        for ( size_t i = 0; i < nranges; ++i )\n-        {\n-            if ( ranges[i].pos is p )\n-            {\n-                ranges[i] = ranges[--nranges];\n-                return;\n-            }\n-        }\n-        assert( false );\n-    }\n-    return proxy.gc_removeRange( p );\n-}\n-\n-extern (C) void gc_runFinalizers( in void[] segment )\n-{\n-    if ( proxy !is null )\n-        proxy.gc_runFinalizers( segment );\n-}\n-\n-extern (C) bool gc_inFinalizer()\n-{\n-    if ( proxy !is null )\n-        return proxy.gc_inFinalizer();\n-    return false;\n-}\n-\n-extern (C) Proxy* gc_getProxy()\n-{\n-    return &pthis;\n-}\n-\n-export extern (C) void gc_setProxy( Proxy* p )\n-{\n-    if ( proxy !is null )\n-    {\n-        // TODO: Decide if this is an error condition.\n-    }\n-    proxy = p;\n-    foreach ( r; roots[0 .. nroots] )\n-        proxy.gc_addRoot( r );\n-    foreach ( r; ranges[0 .. nranges] )\n-        proxy.gc_addRange( r.pos, r.len, r.ti );\n-}\n-\n-export extern (C) void gc_clrProxy()\n-{\n-    foreach ( r; ranges[0 .. nranges] )\n-        proxy.gc_removeRange( r.pos );\n-    foreach ( r; roots[0 .. nroots] )\n-        proxy.gc_removeRoot( r );\n-    proxy = null;\n-}"}, {"sha": "7221712a888b4c90406e3f4a7d9338134f2e05c2", "filename": "libphobos/m4/druntime.m4", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/libphobos%2Fm4%2Fdruntime.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a/libphobos%2Fm4%2Fdruntime.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fm4%2Fdruntime.m4?ref=bbb0de4a4ac9d6b6b6ca6be4755913bf4379d51a", "patch": "@@ -116,19 +116,3 @@ AC_DEFUN([DRUNTIME_INSTALL_DIRECTORIES],\n   gdc_include_dir='$(libdir)/gcc/${target_alias}/${gcc_version}/include/d'\n   AC_SUBST(gdc_include_dir)\n ])\n-\n-\n-# DRUNTIME_GC\n-# -----------\n-# Add the --enable-druntime-gc option and create the\n-# DRUNTIME_GC_ENABLE conditional\n-AC_DEFUN([DRUNTIME_GC],\n-[\n-  dnl switch between gc and gcstub\n-  AC_ARG_ENABLE(druntime-gc,\n-    AC_HELP_STRING([--enable-druntime-gc],\n-                   [enable D runtime garbage collector (default: yes)]),\n-    [enable_druntime_gc=no],[enable_druntime_gc=yes])\n-\n-  AM_CONDITIONAL([DRUNTIME_GC_ENABLE], [test \"$enable_druntime_gc\" = \"yes\"])\n-])"}]}