{"sha": "42031254bfae5d55420bf8c5d57572c42d1b5d17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIwMzEyNTRiZmFlNWQ1NTQyMGJmOGM1ZDU3NTcyYzQyZDFiNWQxNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-08-18T17:15:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-18T17:15:43Z"}, "message": "random (class binomial_distribution<>): Add.\n\n2006-08-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (class binomial_distribution<>): Add.\n\t* include/tr1/random.tcc (binomial_distribution<>::operator(),\n\toperator<<(std::basic_ostream<>&, const binomial_distribution<>&),\n\toperator>>(std::basic_istream<>&, binomial_distribution<>&,\n\tbinomial_distribution<>::_M_waiting(), binomial_distribution<>::\n\t_M_initialize()): Define.\n\t* testsuite/tr1/5_numerical_facilities/random/binomial_distribution/\n\trequirements/typedefs.cc: New.\n\n\t* include/tr1/random (geometric_distribution<>::\n\tgeometric_distribution(const _RealType&)): Fix DEBUG_ASSERT\n\tlimits.\n\n\t* include/tr1/random (poisson_distribution): Add normal_distribution\n\tmember, adjust consistently; minor tweaks and rearrangements of the\n\tarithmetic.\n\t(operator>>(std::basic_istream<>&, poisson_distribution<>&)): Move\n\tout of line.\n\t* include/tr1/random.tcc: Adjust.\n\n\t* include/tr1/random.tcc (normal_distribution<>::operator()): Minor\n\ttweaks.\n\nFrom-SVN: r116245", "tree": {"sha": "9dc901883bf70756a7b2ba08e5c8c3928f3b54f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dc901883bf70756a7b2ba08e5c8c3928f3b54f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42031254bfae5d55420bf8c5d57572c42d1b5d17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42031254bfae5d55420bf8c5d57572c42d1b5d17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42031254bfae5d55420bf8c5d57572c42d1b5d17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42031254bfae5d55420bf8c5d57572c42d1b5d17/comments", "author": null, "committer": null, "parents": [{"sha": "7867a3f7392e23f92f207c0cdec444b9c1c6f433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7867a3f7392e23f92f207c0cdec444b9c1c6f433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7867a3f7392e23f92f207c0cdec444b9c1c6f433"}], "stats": {"total": 523, "additions": 474, "deletions": 49}, "files": [{"sha": "04e5977497a6cffe2b3797c78a2b438528b8d92b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42031254bfae5d55420bf8c5d57572c42d1b5d17/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42031254bfae5d55420bf8c5d57572c42d1b5d17/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=42031254bfae5d55420bf8c5d57572c42d1b5d17", "patch": "@@ -1,3 +1,28 @@\n+2006-08-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (class binomial_distribution<>): Add.\n+\t* include/tr1/random.tcc (binomial_distribution<>::operator(),\n+\toperator<<(std::basic_ostream<>&, const binomial_distribution<>&),\n+\toperator>>(std::basic_istream<>&, binomial_distribution<>&,\n+\tbinomial_distribution<>::_M_waiting(), binomial_distribution<>::\n+\t_M_initialize()): Define.\n+\t* testsuite/tr1/5_numerical_facilities/random/binomial_distribution/\n+\trequirements/typedefs.cc: New.\n+\n+\t* include/tr1/random (geometric_distribution<>::\n+\tgeometric_distribution(const _RealType&)): Fix DEBUG_ASSERT\n+\tlimits.\n+\n+\t* include/tr1/random (poisson_distribution): Add normal_distribution\n+\tmember, adjust consistently; minor tweaks and rearrangements of the\n+\tarithmetic.\n+\t(operator>>(std::basic_istream<>&, poisson_distribution<>&)): Move\n+\tout of line.\n+\t* include/tr1/random.tcc: Adjust.\n+\n+\t* include/tr1/random.tcc (normal_distribution<>::operator()): Minor\n+\ttweaks.\n+\n 2006-08-18  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/28765"}, {"sha": "b769bbd6c74781fbdab4763cc6b0f2be6c6d3ae2", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 138, "deletions": 12, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42031254bfae5d55420bf8c5d57572c42d1b5d17/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42031254bfae5d55420bf8c5d57572c42d1b5d17/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=42031254bfae5d55420bf8c5d57572c42d1b5d17", "patch": "@@ -1588,9 +1588,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       // constructors and member function\n       explicit\n       geometric_distribution(const _RealType& __p = _RealType(0.5))\n-      : _M_p(__p), _M_log_p(std::log(_M_p))\n+      : _M_p(__p), _M_log_p(std::log(__p))\n       {\n-\t_GLIBCXX_DEBUG_ASSERT((_M_p >= 0.0) && (_M_p <= 1.0));\n+\t_GLIBCXX_DEBUG_ASSERT((_M_p > 0.0) && (_M_p < 1.0));\n       }\n \n       /**\n@@ -1649,6 +1649,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     };\n \n \n+  template<typename _RealType>\n+    class normal_distribution;\n+\n   /**\n    * @brief A discrete Poisson random number distribution.\n    *\n@@ -1665,6 +1668,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const poisson_distribution<_IntType, _RealType>& __x);\n \n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       poisson_distribution<_IntType, _RealType>& __x);\n+\n   template<typename _IntType, typename _RealType>\n     class poisson_distribution\n     {\n@@ -1676,7 +1685,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       // constructors and member function\n       explicit\n       poisson_distribution(const _RealType& __mean = _RealType(1))\n-      : _M_mean(__mean)\n+      : _M_mean(__mean), _M_nd()\n       {\n \t_GLIBCXX_DEBUG_ASSERT(_M_mean > 0.0);\n \t_M_initialize();\n@@ -1690,7 +1699,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       { return _M_mean; }\n \n       void\n-      reset() { }\n+      reset()\n+      { _M_nd.reset(); }\n \n       template<class _UniformRandomNumberGenerator>\n         result_type\n@@ -1721,27 +1731,143 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        *\n        * @returns The input stream with @p __x extracted or in an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   poisson_distribution& __x)\n-        {\n-\t  __is >> __x._M_mean;\n-\t  __x._M_initialize();\n-\t  return __is;\n-\t}\n+\t\t   poisson_distribution<_IntType1, _RealType1>& __x);\n \n     private:\n       void\n       _M_initialize();\n \n+      // NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.\n+      normal_distribution<_RealType> _M_nd;\n+\n       _RealType _M_mean;\n+\n       // _M_lm_thr hosts either log(mean) or the threshold of the simple\n       // method.\n       _RealType _M_lm_thr;\n #if _GLIBCXX_USE_C99_MATH_TR1\n-      _RealType _M_lfm, _M_sm, _M_d, _M_scx4, _M_2cx, _M_c2b, _M_cb;\n+      _RealType _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;\n+#endif\n+    };\n+\n+\n+  /**\n+   * @brief A discrete binomial random number distribution.\n+   *\n+   * The formula for the binomial probability mass function is \n+   * @f$ p(i) = \\binom{n}{i} p^i (1 - p)^{t - i} @f$ where @f$ t @f$\n+   * and @f$ p @f$ are the parameters of the distribution.\n+   */\n+  template<typename _IntType = int, typename _RealType = double>\n+    class binomial_distribution;\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const binomial_distribution<_IntType, _RealType>& __x);\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       binomial_distribution<_IntType, _RealType>& __x);\n+\n+  template<typename _IntType, typename _RealType>\n+    class binomial_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _IntType  result_type;\n+\n+      // constructors and member function\n+      explicit\n+      binomial_distribution(_IntType __t = 1,\n+\t\t\t    const _RealType& __p = _RealType(0.5))\n+      : _M_t(__t), _M_p(__p), _M_nd()\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT((_M_t >= 0) && (_M_p >= 0.0) && (_M_p <= 1.0));\t\n+\t_M_initialize();\n+      }\n+\n+      /**\n+       * Gets the distribution @p t parameter.\n+       */\n+      _IntType\n+      t() const\n+      { return _M_t; }\n+      \n+      /**\n+       * Gets the distribution @p p parameter.\n+       */\n+      _RealType\n+      p() const\n+      { return _M_p; }\n+\n+      void\n+      reset()\n+      { _M_nd.reset(); }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng);\n+\n+      /**\n+       * Inserts a %binomial_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %binomial_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const binomial_distribution<_IntType1, _RealType1>& __x);\n+\n+      /**\n+       * Extracts a %binomial_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %binomial_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   binomial_distribution<_IntType1, _RealType1>& __x);\n+\n+    private:\n+      void\n+      _M_initialize();\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t);\n+\n+      // NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.\n+      normal_distribution<_RealType> _M_nd;\n+\n+      _IntType  _M_t;\n+      _RealType _M_p;\n+\n+      _RealType _M_q;\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      _RealType _M_d1, _M_d2, _M_s1, _M_s2, _M_c,\n+\t        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;\n #endif\n+      bool      _M_easy;\n     };\n \n   /* @} */ // group tr1_random_distributions_discrete"}, {"sha": "7719e8728f583b32e85c00a7ce7d8e550b21af84", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 274, "deletions": 37, "changes": 311, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42031254bfae5d55420bf8c5d57572c42d1b5d17/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42031254bfae5d55420bf8c5d57572c42d1b5d17/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=42031254bfae5d55420bf8c5d57572c42d1b5d17", "patch": "@@ -667,21 +667,18 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t  _M_lm_thr = std::log(_M_mean);\n \t  _M_lfm = std::tr1::lgamma(__m + 1);\n \t  _M_sm = std::sqrt(__m);\n-\t  \n-\t  const _RealType __dx =\n-\t    std::sqrt(2 * __m\n-\t    * std::log(_RealType(40.743665431525205956834243423363677L)\n-\t\t       * __m));\n+\n+\t  const _RealType __pi_4 = 0.7853981633974483096156608458198757L;\n+\t  const _RealType __dx = std::sqrt(2 * __m * std::log(32 * __m\n+\t\t\t\t\t\t\t      / __pi_4));\n \t  _M_d = std::tr1::round(std::max(_RealType(6),\n \t\t\t\t\t  std::min(__m, __dx)));\n-\t  const _RealType __cx = 2 * (2 * __m + _M_d);\n-\t  const _RealType __cx4 = __cx / 4;\n-\t  _M_scx4 = std::sqrt(__cx4);\n-\t  _M_2cx = 2 / __cx;\n-\n-\t  const _RealType __pi_2 = 1.5707963267948966192313216916397514L;\n-\t  _M_c2b = std::sqrt(__pi_2 * __cx4) * std::exp(_M_2cx);\n-\t  _M_cb = __cx * std::exp(-_M_d * _M_2cx * (1 + _M_d / 2)) / _M_d;\n+\t  const _RealType __cx = 2 * __m + _M_d;\n+\t  _M_scx = std::sqrt(__cx / 2);\n+\t  _M_1cx = 1 / __cx;\n+\n+\t  _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);\n+\t  _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2)) / _M_d;\n \t}\n       else\n #endif\n@@ -720,11 +717,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t    const _RealType __e178 = 1.0129030479320018583185514777512983L;\n \t    const _RealType __c5 = __c4 + __e178;\n \t    const _RealType __c = _M_cb + __c5;\n-\t    const _RealType __cx = 2 * (2 * __m + _M_d);\n-\n-\t    normal_distribution<_RealType> __nd;\n+\t    const _RealType __2cx = 2 * (2 * __m + _M_d);\n \n-\t    bool __keepgoing = true;\n+\t    bool __reject = true;\n \t    do\n \t      {\n \t\tconst _RealType __u = __c * __urng();\n@@ -734,7 +729,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\n \t\tif (__u <= __c1)\n \t\t  {\n-\t\t    const _RealType __n = __nd(__urng);\n+\t\t    const _RealType __n = _M_nd(__urng);\n \t\t    const _RealType __y = -std::abs(__n) * _M_sm - 1;\n \t\t    __x = std::floor(__y);\n \t\t    __w = -__n * __n / 2;\n@@ -743,10 +738,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t  }\n \t\telse if (__u <= __c2)\n \t\t  {\n-\t\t    const _RealType __n = __nd(__urng);\n-\t\t    const _RealType __y = 1 + std::abs(__n) * _M_scx4;\n+\t\t    const _RealType __n = _M_nd(__urng);\n+\t\t    const _RealType __y = 1 + std::abs(__n) * _M_scx;\n \t\t    __x = std::ceil(__y);\n-\t\t    __w = __y * (2 - __y) * _M_2cx;\n+\t\t    __w = __y * (2 - __y) * _M_1cx;\n \t\t    if (__x > _M_d)\n \t\t      continue;\n \t\t  }\n@@ -760,22 +755,22 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\telse\n \t\t  {\n \t\t    const _RealType __v = -std::log(__urng());\n-\t\t    const _RealType __y = _M_d + __v * __cx / _M_d;\n+\t\t    const _RealType __y = _M_d + __v * __2cx / _M_d;\n \t\t    __x = std::ceil(__y);\n-\t\t    __w = -_M_d * _M_2cx * (1 + __y / 2);\n+\t\t    __w = -_M_d * _M_1cx * (1 + __y / 2);\n \t\t  }\n \n-\t\t__keepgoing = (__w - __e - __x * _M_lm_thr\n-\t\t\t       > _M_lfm - std::tr1::lgamma(__x + __m + 1));\n+\t\t__reject = (__w - __e - __x * _M_lm_thr\n+\t\t\t    > _M_lfm - std::tr1::lgamma(__x + __m + 1));\n \n-\t      } while (__keepgoing);\n+\t      } while (__reject);\n \n-\t    return _IntType(std::tr1::round(__x + __m));\n+\t    return _IntType(__x + __m + 0.5);\n \t  }\n \telse\n #endif\n \t  {\n-\t    _IntType __x = -1;\n+\t    _IntType     __x = -1;\n \t    _RealType __prod = 1.0;\n \n \t    do\n@@ -798,18 +793,260 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const std::ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n       __os.flags(std::ios_base::scientific | std::ios_base::left);\n-      __os.fill(__os.widen(' '));\n+      __os.fill(__space);\n+      __os.precision(_Max_digits10<_RealType>::__value);\n+\n+      __os << __x.mean() << __space << __x._M_nd;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       poisson_distribution<_IntType, _RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::skipws);\n+\n+      __is >> __x._M_mean >> __x._M_nd;\n+      __x._M_initialize();\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _IntType, typename _RealType>\n+    void\n+    binomial_distribution<_IntType, _RealType>::\n+    _M_initialize()\n+    {\n+      const _RealType __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;\n+\n+      _M_easy = true;\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      if (_M_t * __p12 >= 8)\n+\t{\n+\t  _M_easy = false;\n+\t  const _RealType __np = std::floor(_M_t * __p12);\n+\t  const _RealType __pa = __np / _M_t;\n+\t  const _RealType __1p = 1 - __pa;\n+\t  \n+\t  const _RealType __pi_4 = 0.7853981633974483096156608458198757L;\n+\t  const _RealType __d1x =\n+\t    std::sqrt(__np * __1p * std::log(32 * __np\n+\t\t\t\t\t     / (81 * __pi_4 * __1p)));\n+\t  _M_d1 = std::tr1::round(std::max(_RealType(1), __d1x));\n+\t  const _RealType __d2x =\n+\t    std::sqrt(__np * __1p * std::log(32 * _M_t * __1p\n+\t\t\t\t\t     / (__pi_4 * __pa)));\n+\t  _M_d2 = std::tr1::round(std::max(_RealType(1), __d2x));\n+\t  \n+\t  // sqrt(pi / 2)\n+\t  const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n+\t  _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));\n+\t  _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));\n+\t  _M_c = 2 * _M_d1 / __np;\n+\t  _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;\n+\t  const _RealType __a12 = _M_a1 + _M_s2 * __spi_2;\n+\t  const _RealType __s1s = _M_s1 * _M_s1;\n+\t  _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))\n+\t\t\t     * 2 * __s1s / _M_d1\n+\t\t\t     * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));\n+\t  const _RealType __s2s = _M_s2 * _M_s2;\n+\t  _M_s = (_M_a123 + 2 * __s2s / _M_d2\n+\t\t  * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));\n+\t  _M_lf = (std::tr1::lgamma(__np + 1)\n+\t\t   + std::tr1::lgamma(_M_t - __np + 1));\n+\t  _M_lp1p = std::log(__pa / __1p);\n+\n+\t  _M_q = -std::log(1 - (__p12 - __pa) / __1p);\n+\t}\n+      else\n+#endif\n+\t_M_q = -std::log(1 - __p12);\n+    }\n+\n+  template<typename _IntType, typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename binomial_distribution<_IntType, _RealType>::result_type\n+      binomial_distribution<_IntType, _RealType>::\n+      _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t)\n+      {\n+\t_IntType    __x = 0;\n+\t_RealType __sum = 0;\n+\n+\tdo\n+\t  {\n+\t    const _RealType __e = -std::log(__urng());\n+\t    __sum += __e / (__t - __x);\n+\t    __x += 1;\n+\t  }\n+\twhile (__sum <= _M_q);\n+\n+\treturn __x - 1;\n+      }\n+\n+  /**\n+   * A rejection algorithm when t * p >= 8 and a simple waiting time\n+   * method - the second in the referenced book - otherwise.\n+   * NB: The former is available only if _GLIBCXX_USE_C99_MATH_TR1\n+   * is defined.\n+   *\n+   * Reference:\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. X, Sect. 4 (+ Errata!).\n+   */\n+  template<typename _IntType, typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename binomial_distribution<_IntType, _RealType>::result_type\n+      binomial_distribution<_IntType, _RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\tresult_type __ret;\n+\tconst _RealType __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\tif (!_M_easy)\n+\t  {\n+\t    _RealType __x;\n+\n+\t    const _RealType __np = std::floor(_M_t * __p12);\n+\t    const _RealType __pa = __np / _M_t;\n+\n+\t    // sqrt(pi / 2)\n+\t    const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n+\t    const _RealType __a1 = _M_a1;\n+\t    const _RealType __a12 = __a1 + _M_s2 * __spi_2;\n+\t    const _RealType __a123 = _M_a123;\n+\t    const _RealType __s1s = _M_s1 * _M_s1;\n+\t    const _RealType __s2s = _M_s2 * _M_s2;\n+\n+\t    bool __reject;\n+\t    do\n+\t      {\n+\t\tconst _RealType __u = _M_s * __urng();\n+\n+\t\t_RealType __v;\n+\n+\t\tif (__u <= __a1)\n+\t\t  {\n+\t\t    const _RealType __n = _M_nd(__urng);\n+\t\t    const _RealType __y = _M_s1 * std::abs(__n);\n+\t\t    __reject = __y >= _M_d1;\n+\t\t    if (!__reject)\n+\t\t      {\n+\t\t\tconst _RealType __e = -std::log(__urng());\n+\t\t\t__x = std::floor(__y);\n+\t\t\t__v = -__e - __n * __n / 2 + _M_c;\n+\t\t      }\n+\t\t  }\n+\t\telse if (__u <= __a12)\n+\t\t  {\n+\t\t    const _RealType __n = _M_nd(__urng);\n+\t\t    const _RealType __y = _M_s2 * std::abs(__n);\n+\t\t    __reject = __y >= _M_d2;\n+\t\t    if (!__reject)\n+\t\t      {\n+\t\t\tconst _RealType __e = -std::log(__urng());\n+\t\t\t__x = std::floor(-__y);\n+\t\t\t__v = -__e - __n * __n / 2;\n+\t\t      }\n+\t\t  }\n+\t\telse if (__u <= __a123)\n+\t\t  {\n+\t\t    const _RealType __e1 = -std::log(__urng());\t\t    \n+\t\t    const _RealType __e2 = -std::log(__urng());\n+\n+\t\t    const _RealType __y = _M_d1 + 2 * __s1s * __e1 / _M_d1;\n+\t\t    __x = std::floor(__y);\n+\t\t    __v = (-__e2 + _M_d1 * (1 / (_M_t - __np)\n+\t\t\t\t\t    -__y / (2 * __s1s)));\n+\t\t    __reject = false;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    const _RealType __e1 = -std::log(__urng());\t\t    \n+\t\t    const _RealType __e2 = -std::log(__urng());\n+\n+\t\t    const _RealType __y = _M_d2 + 2 * __s2s * __e1 / _M_d2;\n+\t\t    __x = std::floor(-__y);\n+\t\t    __v = -__e2 - _M_d2 * __y / (2 * __s2s);\n+\t\t    __reject = false;\n+\t\t  }\n+\n+\t\t__reject = __reject || __x < -__np || __x > _M_t - __np;\n+\t\tif (!__reject)\n+\t\t  {\n+\t\t    const _RealType __lfx =\n+\t\t      std::tr1::lgamma(__np + __x + 1)\n+\t\t      + std::tr1::lgamma(_M_t - (__np + __x) + 1);\n+\t\t    __reject = __v > _M_lf - __lfx + __x * _M_lp1p;\n+\t\t  }\n+\t      }\n+\t    while (__reject);\n+\n+\t    __x += __np + 0.5;\n+\n+\t    const _IntType __z = _M_waiting(__urng, _M_t - _IntType(__x)); \n+\t    __ret = _IntType(__x) + __z;\n+\t  }\n+\telse\n+#endif\n+\t  __ret = _M_waiting(__urng, _M_t);\n+\n+\tif (__p12 != _M_p)\n+\t  __ret = _M_t - __ret;\n+\treturn __ret;\n+      }\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const binomial_distribution<_IntType, _RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.fill(__space);\n       __os.precision(_Max_digits10<_RealType>::__value);\n \n-      __os << __x.mean();\n+      __os << __x.t() << __space << __x.p() \n+\t   << __space << __x._M_nd;\n \n       __os.flags(__flags);\n       __os.fill(__fill);\n       __os.precision(__precision);\n       return __os;\n     }\n \n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       binomial_distribution<_IntType, _RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+\n+      __is >> __x._M_t >> __x._M_p >> __x._M_nd;\n+      __x._M_initialize();\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n \n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n@@ -893,20 +1130,20 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t    result_type __x, __y, __r2;\n \t    do\n \t      {\n-\t\t__x = result_type(2.0) * __urng() - result_type(1.0);\n-\t\t__y = result_type(2.0) * __urng() - result_type(1.0);\n+\t\t__x = result_type(2.0) * __urng() - 1.0;\n+\t\t__y = result_type(2.0) * __urng() - 1.0;\n \t\t__r2 = __x * __x + __y * __y;\n \t      }\n-\t    while (__r2 > result_type(1.0) || __r2 == result_type(0));\n+\t    while (__r2 > 1.0 || __r2 == 0.0);\n \n-\t    const result_type __mult = std::sqrt(-result_type(2.0)\n-\t\t\t\t\t\t * std::log(__r2) / __r2);\n+\t    const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);\n \t    _M_saved = __x * __mult;\n \t    _M_saved_available = true;\n \t    __ret = __y * __mult;\n \t  }\n-\n-\treturn __ret * _M_sigma + _M_mean;\n+\t\n+\t__ret = __ret * _M_sigma + _M_mean;\n+\treturn __ret;\n       }\n \n   template<typename _RealType, typename _CharT, typename _Traits>"}, {"sha": "fd2d9e479133fc75242ad49ae3119adee5df8069", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/binomial_distribution/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42031254bfae5d55420bf8c5d57572c42d1b5d17/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbinomial_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42031254bfae5d55420bf8c5d57572c42d1b5d17/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbinomial_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbinomial_distribution%2Frequirements%2Ftypedefs.cc?ref=42031254bfae5d55420bf8c5d57572c42d1b5d17", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+//\n+// 2006-08-18  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.5 Class template binomial_distribution [tr.rand.dist.bin]\n+// 5.1.1 [7] Table 17\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef binomial_distribution<int, double> test_type;\n+\n+  typedef test_type::input_type  input_type;\n+  typedef test_type::result_type result_type;\n+}"}]}