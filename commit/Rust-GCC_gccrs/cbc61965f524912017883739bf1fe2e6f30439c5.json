{"sha": "cbc61965f524912017883739bf1fe2e6f30439c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JjNjE5NjVmNTI0OTEyMDE3ODgzNzM5YmYxZmUyZTZmMzA0MzljNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T10:53:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T10:53:39Z"}, "message": "[multiple changes]\n\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_smem.adb (Check_Shared_Var): Clean up code that handles\n\ttype declarations with discriminants, remove obsolete check.\n\n2015-10-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* par_sco.adb: Minor style fixes.\n\n2015-10-20  Vincent Celier  <celier@adacore.com>\n\n\t* debug.adb: Update documentation of -gnatdu.\n\nFrom-SVN: r229048", "tree": {"sha": "8bca6ce4f3ba7d757fbbce067f82c26f2c0ad29f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bca6ce4f3ba7d757fbbce067f82c26f2c0ad29f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbc61965f524912017883739bf1fe2e6f30439c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc61965f524912017883739bf1fe2e6f30439c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc61965f524912017883739bf1fe2e6f30439c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc61965f524912017883739bf1fe2e6f30439c5/comments", "author": null, "committer": null, "parents": [{"sha": "847d950d3a26b03229a289bfaa5163a5352ed7f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847d950d3a26b03229a289bfaa5163a5352ed7f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847d950d3a26b03229a289bfaa5163a5352ed7f4"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "5e189a1c907bd88bc40636580d34c09a9a32e146", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc61965f524912017883739bf1fe2e6f30439c5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc61965f524912017883739bf1fe2e6f30439c5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cbc61965f524912017883739bf1fe2e6f30439c5", "patch": "@@ -1,3 +1,16 @@\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_smem.adb (Check_Shared_Var): Clean up code that handles\n+\ttype declarations with discriminants, remove obsolete check.\n+\n+2015-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* par_sco.adb: Minor style fixes.\n+\n+2015-10-20  Vincent Celier  <celier@adacore.com>\n+\n+\t* debug.adb: Update documentation of -gnatdu.\n+\n 2015-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* aspects.adb Add aspect Volatile_Function to table"}, {"sha": "29872b630a068f6df109dfa22b19148adcc73f90", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc61965f524912017883739bf1fe2e6f30439c5/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc61965f524912017883739bf1fe2e6f30439c5/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=cbc61965f524912017883739bf1fe2e6f30439c5", "patch": "@@ -316,14 +316,15 @@ package body Debug is\n    --  dt   Print full tree. The generated tree is output (see also df,dy)\n \n    --  du   Uncheck categorization pragmas. This debug switch causes the\n-   --       categorization pragmas (Pure, Preelaborate etc) to be ignored\n-   --       so that normal checks are not made (this is particularly useful\n-   --       for adding temporary debugging code to units that have pragmas\n-   --       that are inconsistent with the debugging code added.\n+   --       elaboration control pragmas (Pure, Preelaborate, etc.) and the\n+   --       categorization pragmas (Shared_Passive, Remote_Types, etc.) to be\n+   --       ignored, so that normal checks are not made (this is particularly\n+   --       useful for adding temporary debugging code to units that have\n+   --       pragmas that are inconsistent with the debugging code added).\n \n    --  dv   Output trace of overload resolution. Outputs messages for\n    --       overload attempts that involve cascaded errors, or where\n-   --       an interepretation is incompatible with the context.\n+   --       an interpretation is incompatible with the context.\n \n    --  dw   Write semantic scope stack messages. Each time a scope is created\n    --       or removed, a message is output (see the Sem_Ch8.Push_Scope and"}, {"sha": "c1e6f03778198b0b80f9e2250247053c460bef28", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc61965f524912017883739bf1fe2e6f30439c5/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc61965f524912017883739bf1fe2e6f30439c5/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=cbc61965f524912017883739bf1fe2e6f30439c5", "patch": "@@ -851,11 +851,12 @@ package body Par_SCO is\n       --  Now we have the definitive set of SCO entries, register them in the\n       --  corresponding hash table.\n \n-      for I in 1 .. Hash_Entries.Last loop\n+      for J in 1 .. Hash_Entries.Last loop\n          SCO_Raw_Hash_Table.Set\n-           (Hash_Entries.Table (I).Sloc,\n-            Hash_Entries.Table (I).SCO_Index);\n+           (Hash_Entries.Table (J).Sloc,\n+            Hash_Entries.Table (J).SCO_Index);\n       end loop;\n+\n       Hash_Entries.Free;\n    end Process_Decisions;\n "}, {"sha": "6a25501479e6d0643b902a73c47d0c7b6d486b93", "filename": "gcc/ada/sem_smem.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc61965f524912017883739bf1fe2e6f30439c5/gcc%2Fada%2Fsem_smem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc61965f524912017883739bf1fe2e6f30439c5/gcc%2Fada%2Fsem_smem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_smem.adb?ref=cbc61965f524912017883739bf1fe2e6f30439c5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -92,6 +92,8 @@ package body Sem_Smem is\n \n       elsif Is_Record_Type (T)\n         and then not Is_Constrained (T)\n+        and then (Nkind (N) /= N_Object_Declaration\n+                   or else No (Expression (N)))\n       then\n          Error_Msg_N\n            (\"unconstrained variant records \" &\n@@ -116,9 +118,12 @@ package body Sem_Smem is\n \n       elsif Is_Record_Type (T) then\n          if Has_Discriminants (T) then\n+\n+            --  Check for access discriminants.\n+\n             C := First_Discriminant (T);\n             while Present (C) loop\n-               if Comes_From_Source (C) then\n+               if Is_Access_Type (Etype (C)) then\n                   return True;\n                else\n                   C := Next_Discriminant (C);"}]}