{"sha": "b33493e3f3257f9b77409659a585bcf86484d123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMzNDkzZTNmMzI1N2Y5Yjc3NDA5NjU5YTU4NWJjZjg2NDg0ZDEyMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-12-15T09:09:41Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-12-15T09:09:41Z"}, "message": "function.c (adjust_trampoline_addr): New function.\n\n* function.c (adjust_trampoline_addr): New function.\n(trampoline_address): Call it instead of round_trampoline_addr().\n* tm.texi (TRAMPOLINE_ADJUST_ADDRESS): Document it.\n\nFrom-SVN: r38279", "tree": {"sha": "ac2831caf34906c434220747ac02464ced602994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac2831caf34906c434220747ac02464ced602994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b33493e3f3257f9b77409659a585bcf86484d123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33493e3f3257f9b77409659a585bcf86484d123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33493e3f3257f9b77409659a585bcf86484d123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33493e3f3257f9b77409659a585bcf86484d123/comments", "author": null, "committer": null, "parents": [{"sha": "1e0cdc10363525fb7688ab6fc8654a5c15248795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0cdc10363525fb7688ab6fc8654a5c15248795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0cdc10363525fb7688ab6fc8654a5c15248795"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "76e45c63c7de57be8629c1cc1a8913959d8aa044", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33493e3f3257f9b77409659a585bcf86484d123/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33493e3f3257f9b77409659a585bcf86484d123/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b33493e3f3257f9b77409659a585bcf86484d123", "patch": "@@ -1,3 +1,9 @@\n+2000-12-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* function.c (adjust_trampoline_addr): New function.\n+\t(trampoline_address): Call it instead of round_trampoline_addr().\n+\t* tm.texi (TRAMPOLINE_ADJUST_ADDRESS): Document it.\n+\n 2000-12-14  Zack Weinberg  <zack@wolery.stanford.edu>\n \n \t* cppfiles.c (hack_vms_include_specification): Delete function"}, {"sha": "d2ce5b54c4b166a79c71a415b3eb5f6fae6b61bb", "filename": "gcc/function.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33493e3f3257f9b77409659a585bcf86484d123/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33493e3f3257f9b77409659a585bcf86484d123/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b33493e3f3257f9b77409659a585bcf86484d123", "patch": "@@ -279,6 +279,7 @@ static void pad_below\t\tPARAMS ((struct args_size *, enum machine_mode,\n \t\t\t\t\t tree));\n #endif\n static rtx round_trampoline_addr PARAMS ((rtx));\n+static rtx adjust_trampoline_addr PARAMS ((rtx));\n static tree *identify_blocks_1\tPARAMS ((rtx, tree *, tree *, tree *));\n static void reorder_blocks_1\tPARAMS ((rtx, tree, varray_type *));\n static tree blocks_nreverse\tPARAMS ((tree));\n@@ -5553,15 +5554,15 @@ trampoline_address (function)\n   for (link = trampoline_list; link; link = TREE_CHAIN (link))\n     if (TREE_PURPOSE (link) == function)\n       return\n-\tround_trampoline_addr (XEXP (RTL_EXPR_RTL (TREE_VALUE (link)), 0));\n+\tadjust_trampoline_addr (XEXP (RTL_EXPR_RTL (TREE_VALUE (link)), 0));\n \n   for (fp = outer_function_chain; fp; fp = fp->next)\n     for (link = fp->x_trampoline_list; link; link = TREE_CHAIN (link))\n       if (TREE_PURPOSE (link) == function)\n \t{\n \t  tramp = fix_lexical_addr (XEXP (RTL_EXPR_RTL (TREE_VALUE (link)), 0),\n \t\t\t\t    function);\n-\t  return round_trampoline_addr (tramp);\n+\t  return adjust_trampoline_addr (tramp);\n \t}\n \n   /* None exists; we must make one.  */\n@@ -5612,7 +5613,7 @@ trampoline_address (function)\n     }\n \n   tramp = fix_lexical_addr (XEXP (tramp, 0), function);\n-  return round_trampoline_addr (tramp);\n+  return adjust_trampoline_addr (tramp);\n }\n \n /* Given a trampoline address,\n@@ -5634,6 +5635,21 @@ round_trampoline_addr (tramp)\n #endif\n   return tramp;\n }\n+\n+/* Given a trampoline address, round it then apply any\n+   platform-specific adjustments so that the result can be used for a\n+   function call . */\n+\n+static rtx\n+adjust_trampoline_addr (tramp)\n+     rtx tramp;\n+{\n+  tramp = round_trampoline_addr (tramp);\n+#ifdef TRAMPOLINE_ADJUST_ADDRESS\n+  TRAMPOLINE_ADJUST_ADDRESS (tramp);\n+#endif\n+  return tramp;\n+}\n \f\n /* Put all this function's BLOCK nodes including those that are chained\n    onto the first block into a vector, and return it."}, {"sha": "e60330dd2a299410ceebfd25418151f4f001a022", "filename": "gcc/tm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33493e3f3257f9b77409659a585bcf86484d123/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33493e3f3257f9b77409659a585bcf86484d123/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=b33493e3f3257f9b77409659a585bcf86484d123", "patch": "@@ -4034,6 +4034,16 @@ an RTX for the address of the nested function; @var{static_chain} is an\n RTX for the static chain value that should be passed to the function\n when it is called.\n \n+@findex TRAMPOLINE_ADJUST_ADDRESS\n+@item TRAMPOLINE_ADJUST_ADDRESS (@var{addr})\n+A C statement that should perform any machine-specific adjustment in\n+the address of the trampoline.  Its argument contains the address that\n+was passed to @code{INITIALIZE_TRAMPOLINE}.  In case the address to be\n+used for a function call should be different from the address in which\n+the template was stored, the different address should be assigned to\n+@var{addr}.  If this macro is not defined, @var{addr} will be used for\n+function calls.\n+\n @findex ALLOCATE_TRAMPOLINE\n @item ALLOCATE_TRAMPOLINE (@var{fp})\n A C expression to allocate run-time space for a trampoline.  The"}]}