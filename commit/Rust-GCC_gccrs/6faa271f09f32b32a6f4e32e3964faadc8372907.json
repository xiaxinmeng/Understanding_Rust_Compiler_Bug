{"sha": "6faa271f09f32b32a6f4e32e3964faadc8372907", "node_id": "C_kwDOANBUbNoAKDZmYWEyNzFmMDlmMzJiMzJhNmY0ZTMyZTM5NjRmYWFkYzgzNzI5MDc", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-07-01T08:47:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-13T10:01:14Z"}, "message": "[Ada] Fix internal error on untagged record type with equality operator\n\nAfter the binding interpretation issued under AI12-0413, a user-defined\nprimitive equality operator of an untagged record type hides the predefined\nequality operator in an instantiation, but this does not apply if the\ninstantiation appears in the same declarative region as the type and\nbefore the declaration of this user-defined operator.\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Equality_Op): Make sure that the user-defined\n\toperator of an untagged record type is declared ahead of an instance\n\tbefore using it to resolve the equality operator in the instance.", "tree": {"sha": "a1a014c040f8b542924dd97f9efa82bed6c6ae46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1a014c040f8b542924dd97f9efa82bed6c6ae46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6faa271f09f32b32a6f4e32e3964faadc8372907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6faa271f09f32b32a6f4e32e3964faadc8372907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6faa271f09f32b32a6f4e32e3964faadc8372907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6faa271f09f32b32a6f4e32e3964faadc8372907/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730814edc8b3c1bc872c54a39064ac59e2b8fdbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730814edc8b3c1bc872c54a39064ac59e2b8fdbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730814edc8b3c1bc872c54a39064ac59e2b8fdbd"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "1412d94198c7b08a01d0ab96c7271b44c16e9e64", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6faa271f09f32b32a6f4e32e3964faadc8372907/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6faa271f09f32b32a6f4e32e3964faadc8372907/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=6faa271f09f32b32a6f4e32e3964faadc8372907", "patch": "@@ -8967,7 +8967,14 @@ package body Sem_Res is\n                then\n                   Eq := Get_User_Defined_Equality (T);\n \n-                  if Present (Eq) then\n+                  --  We need to make sure that the instance is not within the\n+                  --  same declarative region as the type, or else that it lies\n+                  --  after the declaration of the user-defined \"=\" operator.\n+\n+                  if Present (Eq)\n+                    and then (not In_Same_Extended_Unit (Eq, N)\n+                               or else Earlier_In_Extended_Unit (Eq, N))\n+                  then\n                      if Is_Abstract_Subprogram (Eq) then\n                         Nondispatching_Call_To_Abstract_Operation (N, Eq);\n                      else"}]}