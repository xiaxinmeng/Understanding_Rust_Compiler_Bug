{"sha": "af1e551876ffd966d848b5a0789370868114cae6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxZTU1MTg3NmZmZDk2NmQ4NDhiNWEwNzg5MzcwODY4MTE0Y2FlNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-08-08T23:49:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-08-08T23:49:57Z"}, "message": "re PR target/11535 (__builtin_return_address may not work on ia64)\n\n        PR target/11535\n        * config/ia64/ia64.c (ia64_initial_elimination_offset): Remove\n        RETURN_ADDRESS_POINTER_REGNUM.\n        (ia64_expand_prologue): Don't frob it.\n        (ia64_output_function_epilogue): Likewise.\n        (ia64_return_addr_rtx): New.\n        (ia64_split_return_addr_rtx): New.\n        * config/ia64/ia64-protos.h: Update.\n        * config/ia64/ia64.h (FIRST_PSEUDO_REGISTER): Decrement.\n        (RETURN_ADDRESS_POINTER_REGNUM): Remove.\n        (GENERAL_REGNO_P): Don't check it.\n        (AR_*_REGNUM): Renumber.\n        (FIXED_REGISTERS): Remove RETURN_ADDRESS_POINTER_REGNUM.\n        (CALL_USED_REGISTERS, CALL_REALLY_USED_REGISTERS): Likewise.\n        (REG_ALLOC_ORDER, REG_CLASS_CONTENTS): Likewise.\n        (ELIMINABLE_REGS, REGISTER_NAMES): Likewise.\n        (RETURN_ADDR_RTX): Use ia64_return_addr_rtx.\n        * config/ia64/ia64.md (UNSPEC_RET_ADDR): New.\n        (movdi_ret_addr): New.\n\nFrom-SVN: r70263", "tree": {"sha": "bccae053090c89825c99d853e9582ada7e6f8e29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bccae053090c89825c99d853e9582ada7e6f8e29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af1e551876ffd966d848b5a0789370868114cae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1e551876ffd966d848b5a0789370868114cae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af1e551876ffd966d848b5a0789370868114cae6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1e551876ffd966d848b5a0789370868114cae6/comments", "author": null, "committer": null, "parents": [{"sha": "5dddb920592e4e6f9378358d6d4f505da238e947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dddb920592e4e6f9378358d6d4f505da238e947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dddb920592e4e6f9378358d6d4f505da238e947"}], "stats": {"total": 185, "additions": 134, "deletions": 51}, "files": [{"sha": "7663d3afefa891746b39b1c6707efb22ca7bb3dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1e551876ffd966d848b5a0789370868114cae6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1e551876ffd966d848b5a0789370868114cae6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af1e551876ffd966d848b5a0789370868114cae6", "patch": "@@ -1,3 +1,25 @@\n+2003-08-08  Richard Henderson  <rth@redhat.com>\n+\n+        PR target/11535\n+        * config/ia64/ia64.c (ia64_initial_elimination_offset): Remove \n+        RETURN_ADDRESS_POINTER_REGNUM.\n+        (ia64_expand_prologue): Don't frob it.\n+        (ia64_output_function_epilogue): Likewise.\n+        (ia64_return_addr_rtx): New.\n+        (ia64_split_return_addr_rtx): New.\n+        * config/ia64/ia64-protos.h: Update.\n+        * config/ia64/ia64.h (FIRST_PSEUDO_REGISTER): Decrement.\n+        (RETURN_ADDRESS_POINTER_REGNUM): Remove.\n+        (GENERAL_REGNO_P): Don't check it.\n+        (AR_*_REGNUM): Renumber.\n+        (FIXED_REGISTERS): Remove RETURN_ADDRESS_POINTER_REGNUM.\n+        (CALL_USED_REGISTERS, CALL_REALLY_USED_REGISTERS): Likewise.\n+        (REG_ALLOC_ORDER, REG_CLASS_CONTENTS): Likewise.\n+        (ELIMINABLE_REGS, REGISTER_NAMES): Likewise.\n+        (RETURN_ADDR_RTX): Use ia64_return_addr_rtx.\n+        * config/ia64/ia64.md (UNSPEC_RET_ADDR): New.\n+        (movdi_ret_addr): New.\n+\n 2003-08-08  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config.gcc (powerpc-*-darwin*): Don't build a soft-float multilib."}, {"sha": "4f89f48f9bdf9c76bf76fdc5bc5645f16d1d4e05", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1e551876ffd966d848b5a0789370868114cae6/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1e551876ffd966d848b5a0789370868114cae6/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=af1e551876ffd966d848b5a0789370868114cae6", "patch": "@@ -139,6 +139,9 @@ extern void ia64_init_builtins PARAMS((void));\n extern void ia64_override_options PARAMS((void));\n extern int ia64_dbx_register_number PARAMS((int));\n \n+extern rtx ia64_return_addr_rtx PARAMS ((HOST_WIDE_INT, rtx));\n+extern void ia64_split_return_addr_rtx PARAMS ((rtx));\n+\n #ifdef SDATA_SECTION_ASM_OP\n extern void sdata_section PARAMS ((void));\n #endif"}, {"sha": "5a101287ea8bee5517f45f2cbeff6fc21092d69b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 66, "deletions": 18, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1e551876ffd966d848b5a0789370868114cae6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1e551876ffd966d848b5a0789370868114cae6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=af1e551876ffd966d848b5a0789370868114cae6", "patch": "@@ -2197,10 +2197,6 @@ ia64_initial_elimination_offset (from, to)\n \tabort ();\n       break;\n \n-    case RETURN_ADDRESS_POINTER_REGNUM:\n-      offset = 0;\n-      break;\n-\n     default:\n       abort ();\n     }\n@@ -2551,17 +2547,6 @@ ia64_expand_prologue ()\n       reg_names[current_frame_info.reg_fp] = tmp;\n     }\n \n-  /* Fix up the return address placeholder.  */\n-  /* ??? We can fail if __builtin_return_address is used, and we didn't\n-     allocate a register in which to save b0.  I can't think of a way to\n-     eliminate RETURN_ADDRESS_POINTER_REGNUM to a local register and\n-     then be sure that I got the right one.  Further, reload doesn't seem\n-     to care if an eliminable register isn't used, and \"eliminates\" it\n-     anyway.  */\n-  if (regs_ever_live[RETURN_ADDRESS_POINTER_REGNUM]\n-      && current_frame_info.reg_save_b0 != 0)\n-    XINT (return_address_pointer_rtx, 0) = current_frame_info.reg_save_b0;\n-\n   /* We don't need an alloc instruction if we've used no outputs or locals.  */\n   if (current_frame_info.n_local_regs == 0\n       && current_frame_info.n_output_regs == 0\n@@ -3118,6 +3103,72 @@ ia64_direct_return ()\n   return 0;\n }\n \n+/* Return the magic cookie that we use to hold the return address\n+   during early compilation.  */\n+\n+rtx\n+ia64_return_addr_rtx (count, frame)\n+     HOST_WIDE_INT count;\n+     rtx frame ATTRIBUTE_UNUSED;\n+{\n+  if (count != 0)\n+    return NULL;\n+  return gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx), UNSPEC_RET_ADDR);\n+}\n+\n+/* Split this value after reload, now that we know where the return\n+   address is saved.  */\n+\n+void\n+ia64_split_return_addr_rtx (dest)\n+     rtx dest;\n+{\n+  rtx src;\n+\n+  if (TEST_HARD_REG_BIT (current_frame_info.mask, BR_REG (0)))\n+    {\n+      if (current_frame_info.reg_save_b0 != 0)\n+\tsrc = gen_rtx_REG (DImode, current_frame_info.reg_save_b0);\n+      else\n+\t{\n+\t  HOST_WIDE_INT off;\n+\t  unsigned int regno;\n+\n+\t  /* Compute offset from CFA for BR0.  */\n+\t  /* ??? Must be kept in sync with ia64_expand_prologue.  */\n+\t  off = (current_frame_info.spill_cfa_off\n+\t\t + current_frame_info.spill_size);\n+\t  for (regno = GR_REG (1); regno <= GR_REG (31); ++regno)\n+\t    if (TEST_HARD_REG_BIT (current_frame_info.mask, regno))\n+\t      off -= 8;\n+\n+\t  /* Convert CFA offset to a register based offset.  */\n+\t  if (frame_pointer_needed)\n+\t    src = hard_frame_pointer_rtx;\n+\t  else\n+\t    {\n+\t      src = stack_pointer_rtx;\n+\t      off += current_frame_info.total_size;\n+\t    }\n+\n+\t  /* Load address into scratch register.  */\n+\t  if (CONST_OK_FOR_I (off))\n+\t    emit_insn (gen_adddi3 (dest, src, GEN_INT (off)));\n+\t  else\n+\t    {\n+\t      emit_move_insn (dest, GEN_INT (off));\n+\t      emit_insn (gen_adddi3 (dest, src, dest));\n+\t    }\n+\n+\t  src = gen_rtx_MEM (Pmode, dest);\n+\t}\n+    }\n+  else\n+    src = gen_rtx_REG (DImode, BR_REG (0));\n+\n+  emit_move_insn (dest, src);\n+}\n+\n int\n ia64_hard_regno_rename_ok (from, to)\n      int from;\n@@ -3267,9 +3318,6 @@ ia64_output_function_epilogue (file, size)\n {\n   int i;\n \n-  /* Reset from the function's potential modifications.  */\n-  XINT (return_address_pointer_rtx, 0) = RETURN_ADDRESS_POINTER_REGNUM;\n-\n   if (current_frame_info.reg_fp)\n     {\n       const char *tmp = reg_names[HARD_FRAME_POINTER_REGNUM];"}, {"sha": "a8bc569a7f05ea35f0d343a85ab018f39d0b7769", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1e551876ffd966d848b5a0789370868114cae6/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1e551876ffd966d848b5a0789370868114cae6/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=af1e551876ffd966d848b5a0789370868114cae6", "patch": "@@ -455,7 +455,7 @@ while (0)\n    64 predicate registers, 8 branch registers, one frame pointer,\n    and several \"application\" registers.  */\n \n-#define FIRST_PSEUDO_REGISTER 335\n+#define FIRST_PSEUDO_REGISTER 334\n \n /* Ranges for the various kinds of registers.  */\n #define ADDL_REGNO_P(REGNO) ((unsigned HOST_WIDE_INT) (REGNO) <= 3)\n@@ -464,9 +464,7 @@ while (0)\n #define PR_REGNO_P(REGNO) ((REGNO) >= 256 && (REGNO) <= 319)\n #define BR_REGNO_P(REGNO) ((REGNO) >= 320 && (REGNO) <= 327)\n #define GENERAL_REGNO_P(REGNO) \\\n-  (GR_REGNO_P (REGNO)\t\t\t\t\t\t\t\\\n-   || (REGNO) == FRAME_POINTER_REGNUM\t\t\t\t\t\\\n-   || (REGNO) == RETURN_ADDRESS_POINTER_REGNUM)\n+  (GR_REGNO_P (REGNO) || (REGNO) == FRAME_POINTER_REGNUM)\n \n #define GR_REG(REGNO) ((REGNO) + 0)\n #define FR_REG(REGNO) ((REGNO) + 128)\n@@ -476,11 +474,11 @@ while (0)\n #define IN_REG(REGNO) ((REGNO) + 112)\n #define LOC_REG(REGNO) ((REGNO) + 32)\n \n-#define AR_CCV_REGNUM\t330\n-#define AR_UNAT_REGNUM  331\n-#define AR_PFS_REGNUM\t332\n-#define AR_LC_REGNUM\t333\n-#define AR_EC_REGNUM\t334\n+#define AR_CCV_REGNUM\t329\n+#define AR_UNAT_REGNUM  330\n+#define AR_PFS_REGNUM\t331\n+#define AR_LC_REGNUM\t332\n+#define AR_EC_REGNUM\t333\n \n #define IN_REGNO_P(REGNO) ((REGNO) >= IN_REG (0) && (REGNO) <= IN_REG (7))\n #define LOC_REGNO_P(REGNO) ((REGNO) >= LOC_REG (0) && (REGNO) <= LOC_REG (79))\n@@ -543,8 +541,8 @@ while (0)\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   /* Branch registers.  */\t\t\t\t\\\n   0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\t\\\n-  /*FP RA CCV UNAT PFS LC EC */\t\t\t\t\\\n-     1, 1,  1,   1,  1, 0, 1\t\t\t\t\\\n+  /*FP CCV UNAT PFS LC EC */\t\t\t\t\\\n+     1,  1,   1,  1, 0, 1\t\t\t\t\\\n  }\n \n /* Like `FIXED_REGISTERS' but has 1 for each register that is clobbered\n@@ -578,8 +576,8 @@ while (0)\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   /* Branch registers.  */\t\t\t\t\\\n   1, 0, 0, 0, 0, 0, 1, 1,\t\t\t\t\\\n-  /*FP RA CCV UNAT PFS LC EC */\t\t\t\t\\\n-     1, 1,  1,   1,  1, 0, 1\t\t\t\t\\\n+  /*FP CCV UNAT PFS LC EC */\t\t\t\t\\\n+     1,  1,   1,  1, 0, 1\t\t\t\t\\\n }\n \n /* Like `CALL_USED_REGISTERS' but used to overcome a historical\n@@ -616,8 +614,8 @@ while (0)\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   /* Branch registers.  */\t\t\t\t\\\n   1, 0, 0, 0, 0, 0, 1, 1,\t\t\t\t\\\n-  /*FP RA CCV UNAT PFS LC EC */\t\t\t\t\\\n-     0, 0,  1,   0,  1, 0, 0\t\t\t\t\\\n+  /*FP CCV UNAT PFS LC EC */\t\t\t\t\\\n+     0,  1,   0,  1, 0, 0\t\t\t\t\\\n }\n \n \n@@ -763,7 +761,7 @@ while (0)\n   /* Special branch registers.  */\t\t\t\t\t   \\\n   R_BR (0),\t\t\t\t\t\t\t\t   \\\n   /* Other fixed registers.  */\t\t\t\t\t\t   \\\n-  FRAME_POINTER_REGNUM, RETURN_ADDRESS_POINTER_REGNUM,\t\t\t   \\\n+  FRAME_POINTER_REGNUM, \t\t\t\t\t\t   \\\n   AR_CCV_REGNUM, AR_UNAT_REGNUM, AR_PFS_REGNUM, AR_LC_REGNUM,\t\t   \\\n   AR_EC_REGNUM\t\t  \t\t\t\t\t\t   \\\n }\n@@ -892,35 +890,35 @@ enum reg_class\n   /* AR_M_REGS.  */\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n     0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n-    0x00000000, 0x00000000, 0x0C00 },\t\t\t\\\n+    0x00000000, 0x00000000, 0x0600 },\t\t\t\\\n   /* AR_I_REGS.  */\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n     0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n-    0x00000000, 0x00000000, 0x7000 },\t\t\t\\\n+    0x00000000, 0x00000000, 0x3800 },\t\t\t\\\n   /* ADDL_REGS.  */\t\t\t\t\t\\\n   { 0x0000000F, 0x00000000, 0x00000000, 0x00000000,\t\\\n     0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n     0x00000000, 0x00000000, 0x0000 },\t\t\t\\\n   /* GR_REGS.  */\t\t\t\t\t\\\n   { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\t\\\n     0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n-    0x00000000, 0x00000000, 0x0300 },\t\t\t\\\n+    0x00000000, 0x00000000, 0x0100 },\t\t\t\\\n   /* FR_REGS.  */\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n     0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\t\\\n     0x00000000, 0x00000000, 0x0000 },\t\t\t\\\n   /* GR_AND_BR_REGS.  */\t\t\t\t\\\n   { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\t\\\n     0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n-    0x00000000, 0x00000000, 0x03FF },\t\t\t\\\n+    0x00000000, 0x00000000, 0x01FF },\t\t\t\\\n   /* GR_AND_FR_REGS.  */\t\t\t\t\\\n   { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\t\\\n     0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\t\\\n-    0x00000000, 0x00000000, 0x0300 },\t\t\t\\\n+    0x00000000, 0x00000000, 0x0100 },\t\t\t\\\n   /* ALL_REGS.  */\t\t\t\t\t\\\n   { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\t\\\n     0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\t\\\n-    0xFFFFFFFF, 0xFFFFFFFF, 0x7FFF },\t\t\t\\\n+    0xFFFFFFFF, 0xFFFFFFFF, 0x3FFF },\t\t\t\\\n }\n \n /* A C expression whose value is a register class containing hard register\n@@ -1142,7 +1140,7 @@ enum reg_class\n    DYNAMIC_CHAIN_ADDRESS and SETUP_FRAME_ADDRESS (for the reg stack flush).  */\n \n #define RETURN_ADDR_RTX(COUNT, FRAME) \\\n-  ((COUNT) == 0 ? return_address_pointer_rtx : const0_rtx)\n+  ia64_return_addr_rtx (COUNT, FRAME)\n \n /* A C expression whose value is RTL representing the location of the incoming\n    return address at the beginning of any function, before the prologue.  This\n@@ -1203,13 +1201,6 @@ enum reg_class\n       REGNO_POINTER_ALIGN (ARG_POINTER_REGNUM) = 64;\t\\\n   } while (0)\n \n-/* The register number for the return address register.  For IA-64, this\n-   is not actually a pointer as the name suggests, but that's a name that\n-   gen_rtx_REG already takes care to keep unique.  We modify\n-   return_address_pointer_rtx in ia64_expand_prologue to reference the\n-   final output regnum.  */\n-#define RETURN_ADDRESS_POINTER_REGNUM 329\n-\n /* Register numbers used for passing a function's static chain pointer.  */\n /* ??? The ABI sez the static chain should be passed as a normal parameter.  */\n #define STATIC_CHAIN_REGNUM 15\n@@ -1233,7 +1224,6 @@ enum reg_class\n   {ARG_POINTER_REGNUM,\t HARD_FRAME_POINTER_REGNUM},\t\t\t\\\n   {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\t\\\n   {FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\t\t\\\n-  {RETURN_ADDRESS_POINTER_REGNUM, BR_REG (0)},\t\t\t\t\\\n }\n \n /* A C expression that returns nonzero if the compiler is allowed to try to\n@@ -1879,8 +1869,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   \"p60\", \"p61\", \"p62\", \"p63\",\t\t\t\t\t\t\\\n   /* Branch registers.  */\t\t\t\t\t\t\\\n   \"b0\", \"b1\", \"b2\", \"b3\", \"b4\", \"b5\", \"b6\", \"b7\",\t\t\t\\\n-  /* Frame pointer.  Return address.  */\t\t\t\t\\\n-  \"sfp\", \"retaddr\", \"ar.ccv\", \"ar.unat\", \"ar.pfs\", \"ar.lc\", \"ar.ec\",\t\\\n+  /* Frame pointer.  Application registers.  */\t\t\t\t\\\n+  \"sfp\", \"ar.ccv\", \"ar.unat\", \"ar.pfs\", \"ar.lc\", \"ar.ec\",\t\\\n }\n \n /* If defined, a C initializer for an array of structures containing a name and"}, {"sha": "0d0999fa6dbd9b00f6719cc2feeced0229c4a01e", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1e551876ffd966d848b5a0789370868114cae6/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1e551876ffd966d848b5a0789370868114cae6/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=af1e551876ffd966d848b5a0789370868114cae6", "patch": "@@ -73,6 +73,7 @@\n    (UNSPEC_BUNDLE_SELECTOR\t23)\n    (UNSPEC_ADDP4\t\t24)\n    (UNSPEC_PROLOGUE_USE\t\t25)\n+   (UNSPEC_RET_ADDR\t\t26)\n   ])\n \n (define_constants\n@@ -410,6 +411,25 @@\n   operands[3] = pic_offset_table_rtx;\n })\n \n+;; This is used as a placeholder for the return address during early\n+;; compilation.  We won't know where we've placed this until during\n+;; reload, at which point it can wind up in b0, a general register,\n+;; or memory.  The only safe destination under these conditions is a\n+;; general register.\n+\n+(define_insn_and_split \"*movdi_ret_addr\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(const_int 0)] UNSPEC_RET_ADDR))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  ia64_split_return_addr_rtx (operands[0]);\n+  DONE;\n+}\n+  [(set_attr \"itanium_class\" \"ialu\")])\n+\n (define_insn \"*load_symptr_high\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (high:DI (match_operand 1 \"got_symbolic_operand\" \"s\"))"}]}