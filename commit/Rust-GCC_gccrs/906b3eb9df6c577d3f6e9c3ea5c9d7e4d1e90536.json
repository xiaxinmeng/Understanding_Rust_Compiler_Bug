{"sha": "906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA2YjNlYjlkZjZjNTc3ZDNmNmU5YzNlYTVjOWQ3ZTRkMWU5MDUzNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-03-24T10:40:10Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-03-24T10:40:10Z"}, "message": "Improve endianess detection.\n\n\tPR lto/94249\n\t* plugin-api.h: Add more robust endianess detection.", "tree": {"sha": "023579257f515937604d93238ba846999c2b6c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/023579257f515937604d93238ba846999c2b6c26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl5544oACgkQTcGC3A+n\nN4VJiwgAjVr9l6E2CzY1R2tbrAtLg4/EqMPFBLu9rlbiyxYwpH+Qo4GbbgM0WOaJ\nGdjoEa+NIkoYiQHE74VjKsJO6wOlYwCwbJQcXUkJwpwiWofFYHcmqYsVlzKhaGU1\nqf7+R3cs0Q0jEZ/b0QOSh+bz+DSERdR6T4G9nhz/F9CIGDpCB5oAaiQqtZsC8zov\nrZtnkqzD6P93/b5c3IAVUpQRgMwF7/mr0+cZ2536TUhEYg0LoTri3G2AN3ZcvGBK\nrKHuqo73A+exBDMBvt8DPipbKtgE5O5DAeyyXy9SC3OvDaI7t526LXMMN2e1JCtw\n/TRIlTYLhIywgee/flEqt/pa94tVuw==\n=Ej2W\n-----END PGP SIGNATURE-----", "payload": "tree 023579257f515937604d93238ba846999c2b6c26\nparent 596c90d35591589e0efddda65c81609fb422a986\nauthor Martin Liska <mliska@suse.cz> 1585046410 +0100\ncommitter Martin Liska <mliska@suse.cz> 1585046410 +0100\n\nImprove endianess detection.\n\n\tPR lto/94249\n\t* plugin-api.h: Add more robust endianess detection.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "596c90d35591589e0efddda65c81609fb422a986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596c90d35591589e0efddda65c81609fb422a986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596c90d35591589e0efddda65c81609fb422a986"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "a59560caf7e32118f6e061333079d9620c2edb32", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536", "patch": "@@ -1,3 +1,8 @@\n+2020-03-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/94249\n+\t* plugin-api.h: Add more robust endianess detection.\n+\n 2020-03-21  Martin Liska  <mliska@suse.cz>\n \n \t* plugin-api.h (enum ld_plugin_symbol_type): Remove"}, {"sha": "864d2bf91ac6b77a74f6537bb138feab4e674e34", "filename": "include/plugin-api.h", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536/include%2Fplugin-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536/include%2Fplugin-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fplugin-api.h?ref=906b3eb9df6c577d3f6e9c3ea5c9d7e4d1e90536", "patch": "@@ -37,6 +37,60 @@\n #error cannot find uint64_t type\n #endif\n \n+/* Detect endianess based on __BYTE_ORDER__ macro.  */\n+#if defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && \\\n+    defined(__ORDER_LITTLE_ENDIAN__) && defined(__ORDER_PDP_ENDIAN__)\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#define PLUGIN_LITTLE_ENDIAN 1\n+#elif __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+#define PLUGIN_BIG_ENDIAN 1\n+#elif __BYTE_ORDER__ == __ORDER_PDP_ENDIAN__\n+#define PLUGIN_PDP_ENDIAN 1\n+#endif\n+#else\n+/* Older GCC releases (<4.6.0) can make detection from glibc macros.  */\n+#if defined(__GLIBC__) || defined(__GNU_LIBRARY__) || defined(__ANDROID__)\n+#include <endian.h>\n+#ifdef _BYTE_ORDER\n+#if __BYTE_ORDER == __LITTLE_ENDIAN\n+#define PLUGIN_LITTLE_ENDIAN 1\n+#elif __BYTE_ORDER == __BIG_ENDIAN\n+#define PLUGIN_BIG_ENDIAN 1\n+#endif\n+#endif\n+#endif\n+/* Include all necessary header files based on target.  */\n+#if defined(__SVR4) && defined(__sun)\n+#include <sys/byteorder.h>\n+#endif\n+#if defined(__FreeBSD__) || defined(__NetBSD__) || \\\n+    defined(__DragonFly__) || defined(__minix)\n+#include <sys/endian.h>\n+#endif\n+#if defined(__OpenBSD__)\n+#include <machine/endian.h>\n+#endif\n+/* Detect endianess based on _BYTE_ORDER.  */\n+#ifdef _BYTE_ORDER\n+#if _BYTE_ORDER == _LITTLE_ENDIAN\n+#define PLUGIN_LITTLE_ENDIAN 1\n+#elif _BYTE_ORDER == _BIG_ENDIAN\n+#define PLUGIN_BIG_ENDIAN 1\n+#endif\n+#endif\n+/* Detect based on _WIN32.  */\n+#if defined(_WIN32)\n+#define PLUGIN_LITTLE_ENDIAN 1\n+#endif\n+/* Detect based on __BIG_ENDIAN__ and __LITTLE_ENDIAN__ */\n+#ifdef __LITTLE_ENDIAN__\n+#define PLUGIN_LITTLE_ENDIAN 1\n+#endif\n+#ifdef __BIG_ENDIAN__\n+#define PLUGIN_BIG_ENDIAN 1\n+#endif\n+#endif\n+\n #ifdef __cplusplus\n extern \"C\"\n {\n@@ -89,16 +143,23 @@ struct ld_plugin_symbol\n   char *version;\n   /* This is for compatibility with older ABIs.  The older ABI defined\n      only 'def' field.  */\n-#ifdef __BIG_ENDIAN__\n+#if PLUGIN_BIG_ENDIAN == 1\n   char unused;\n   char section_kind;\n   char symbol_type;\n   char def;\n-#else\n+#elif PLUGIN_LITTLE_ENDIAN == 1\n   char def;\n   char symbol_type;\n   char section_kind;\n   char unused;\n+#elif PLUGIN_PDP_ENDIAN == 1\n+  char symbol_type;\n+  char def;\n+  char unused;\n+  char section_kind;\n+#else\n+#error \"Could not detect architecture endianess\"\n #endif\n   int visibility;\n   uint64_t size;"}]}