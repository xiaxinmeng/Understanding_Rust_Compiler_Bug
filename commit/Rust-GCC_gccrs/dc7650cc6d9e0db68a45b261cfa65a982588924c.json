{"sha": "dc7650cc6d9e0db68a45b261cfa65a982588924c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM3NjUwY2M2ZDllMGRiNjhhNDViMjYxY2ZhNjVhOTgyNTg4OTI0Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-01-05T12:30:26Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-01-05T12:30:26Z"}, "message": "re PR c++/78765 (ICE on invalid C++ code on x86_64-linux-gnu (internal compiler error: in cp_build_addr_expr_1, at cp/typeck.c:5708))\n\n\tcp/\n\tPR c++/78765\n\t* pt.c (convert_nontype_argument): Don't try and see if integral\n\tor enum expressions are constants prematurely.\n\n\ttestsuite/\n\tPR c++/78765\n\t* g++.dg/cpp0x/pr78765.C: New.\n\nFrom-SVN: r244101", "tree": {"sha": "6f79e8f482910ed5b6303db5a6f516400c628eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f79e8f482910ed5b6303db5a6f516400c628eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc7650cc6d9e0db68a45b261cfa65a982588924c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7650cc6d9e0db68a45b261cfa65a982588924c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc7650cc6d9e0db68a45b261cfa65a982588924c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7650cc6d9e0db68a45b261cfa65a982588924c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3db705650b723f5777940e9ff9485de90e1b81f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db705650b723f5777940e9ff9485de90e1b81f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db705650b723f5777940e9ff9485de90e1b81f9"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "35f0a2222ac206a4a3dfeb23b90b5fe3c0839405", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7650cc6d9e0db68a45b261cfa65a982588924c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7650cc6d9e0db68a45b261cfa65a982588924c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dc7650cc6d9e0db68a45b261cfa65a982588924c", "patch": "@@ -1,3 +1,9 @@\n+2017-01-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/78765\n+\t* pt.c (convert_nontype_argument): Don't try and see if integral\n+\tor enum expressions are constants prematurely.\n+\n 2017-01-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/64767"}, {"sha": "366c59a2486a1f0481b8db57af522ee9405e3683", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7650cc6d9e0db68a45b261cfa65a982588924c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7650cc6d9e0db68a45b261cfa65a982588924c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=dc7650cc6d9e0db68a45b261cfa65a982588924c", "patch": "@@ -6386,7 +6386,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t   to leave it in that form rather than lower it to a\n \t   CONSTRUCTOR.  */;\n       else if (INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n-\texpr = maybe_constant_value (expr);\n+\t/* Constant value checking is done later with type conversion.  */;\n       else if (cxx_dialect >= cxx1z)\n \t{\n \t  if (TREE_CODE (type) != REFERENCE_TYPE)"}, {"sha": "aa6dc348cc390639ae178fb746bcb613075c071a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7650cc6d9e0db68a45b261cfa65a982588924c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7650cc6d9e0db68a45b261cfa65a982588924c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc7650cc6d9e0db68a45b261cfa65a982588924c", "patch": "@@ -1,3 +1,8 @@\n+2017-01-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/78765\n+\t* g++.dg/cpp0x/pr78765.C: New.\n+\n 2017-01-05  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/memcpy-2.c: New test."}, {"sha": "6b66d26e5497af2133fad23b826df5b314d4d603", "filename": "gcc/testsuite/g++.dg/cpp0x/pr78765.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7650cc6d9e0db68a45b261cfa65a982588924c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78765.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7650cc6d9e0db68a45b261cfa65a982588924c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78765.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78765.C?ref=dc7650cc6d9e0db68a45b261cfa65a982588924c", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/78765\n+// { dg-do compile { target c++11 } }\n+\n+// ICE with failed constexpr object and member fn call\n+\n+struct ValueType {\n+  constexpr operator int() const {return field;}\n+  int field;\n+};\n+\n+static constexpr ValueType var = 0; // { dg-error \"conversion\" }\n+\n+template <int> class ValueTypeInfo;\n+\n+ValueTypeInfo<var> x;"}]}