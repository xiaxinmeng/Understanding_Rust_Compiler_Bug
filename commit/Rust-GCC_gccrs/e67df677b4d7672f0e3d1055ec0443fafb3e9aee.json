{"sha": "e67df677b4d7672f0e3d1055ec0443fafb3e9aee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3ZGY2NzdiNGQ3NjcyZjBlM2QxMDU1ZWMwNDQzZmFmYjNlOWFlZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-03-06T20:58:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-10T13:34:59Z"}, "message": "[Ada] Improve code generated for dynamic discriminated aggregate\n\n2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (In_Place_Assign_OK): Do not necessarily return\n\tfalse for a type with discriminants.\n\t(Convert_To_Assignments): Use Parent_Node and Parent_Kind more\n\tconsistently.  In the in-place assignment case, first apply a\n\tdiscriminant check if need be, and be prepared for a rewritten\n\taggregate as a result.", "tree": {"sha": "9b66c029cbcbe88d7476b1cad31669dd831e01e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b66c029cbcbe88d7476b1cad31669dd831e01e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e67df677b4d7672f0e3d1055ec0443fafb3e9aee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67df677b4d7672f0e3d1055ec0443fafb3e9aee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67df677b4d7672f0e3d1055ec0443fafb3e9aee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67df677b4d7672f0e3d1055ec0443fafb3e9aee/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "c537bac0e01d761d7bcd3f53102dbfba19a3de4b", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67df677b4d7672f0e3d1055ec0443fafb3e9aee/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67df677b4d7672f0e3d1055ec0443fafb3e9aee/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=e67df677b4d7672f0e3d1055ec0443fafb3e9aee", "patch": "@@ -4283,12 +4283,9 @@ package body Exp_Aggr is\n    --  Start of processing for In_Place_Assign_OK\n \n    begin\n-      --  By-copy semantic cannot be guaranteed for controlled objects or\n-      --  objects with discriminants.\n+      --  By-copy semantic cannot be guaranteed for controlled objects\n \n-      if Needs_Finalization (Etype (N))\n-        or else Has_Discriminants (Etype (N))\n-      then\n+      if Needs_Finalization (Etype (N)) then\n          return False;\n \n       elsif Is_Array and then Present (Component_Associations (N)) then\n@@ -4465,26 +4462,40 @@ package body Exp_Aggr is\n       --  assignment.\n \n       if Is_Limited_Type (Typ)\n-        and then Nkind (Parent (N)) = N_Assignment_Statement\n+        and then Parent_Kind = N_Assignment_Statement\n       then\n-         Target_Expr := New_Copy_Tree (Name (Parent (N)));\n-         Insert_Actions (Parent (N),\n+         Target_Expr := New_Copy_Tree (Name (Parent_Node));\n+         Insert_Actions (Parent_Node,\n            Build_Record_Aggr_Code (N, Typ, Target_Expr));\n-         Rewrite (Parent (N), Make_Null_Statement (Loc));\n+         Rewrite (Parent_Node, Make_Null_Statement (Loc));\n \n       --  Do not declare a temporary to initialize an aggregate assigned to an\n       --  identifier when in-place assignment is possible, preserving the\n       --  by-copy semantic of aggregates. This avoids large stack usage and\n       --  generates more efficient code.\n \n-      elsif Nkind (Parent (N)) = N_Assignment_Statement\n-        and then Nkind (Name (Parent (N))) = N_Identifier\n+      elsif Parent_Kind = N_Assignment_Statement\n+        and then Nkind (Name (Parent_Node)) = N_Identifier\n         and then In_Place_Assign_OK (N)\n       then\n-         Target_Expr := New_Copy_Tree (Name (Parent (N)));\n-         Insert_Actions (Parent (N),\n-           Build_Record_Aggr_Code (N, Typ, Target_Expr));\n-         Rewrite (Parent (N), Make_Null_Statement (Loc));\n+         declare\n+            Lhs : constant Node_Id := Name (Parent_Node);\n+         begin\n+            --  Apply discriminant check if required\n+\n+            if Has_Discriminants (Etype (N)) then\n+               Apply_Discriminant_Check (N, Etype (Lhs), Lhs);\n+            end if;\n+\n+            --  The check just above may have replaced the aggregate with a CE\n+\n+            if Nkind_In (N, N_Aggregate, N_Extension_Aggregate) then\n+               Target_Expr := New_Copy_Tree (Lhs);\n+               Insert_Actions (Parent_Node,\n+                 Build_Record_Aggr_Code (N, Typ, Target_Expr));\n+               Rewrite (Parent_Node, Make_Null_Statement (Loc));\n+            end if;\n+         end;\n \n       else\n          Temp := Make_Temporary (Loc, 'A', N);"}]}