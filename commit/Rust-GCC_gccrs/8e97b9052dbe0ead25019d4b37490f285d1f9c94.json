{"sha": "8e97b9052dbe0ead25019d4b37490f285d1f9c94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5N2I5MDUyZGJlMGVhZDI1MDE5ZDRiMzc0OTBmMjg1ZDFmOWM5NA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-07T00:16:35Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-07T00:16:35Z"}, "message": "Daily bump.", "tree": {"sha": "3fd19bb78971162a052c4412f0280f929b6f6b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd19bb78971162a052c4412f0280f929b6f6b43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e97b9052dbe0ead25019d4b37490f285d1f9c94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e97b9052dbe0ead25019d4b37490f285d1f9c94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e97b9052dbe0ead25019d4b37490f285d1f9c94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e97b9052dbe0ead25019d4b37490f285d1f9c94/comments", "author": null, "committer": null, "parents": [{"sha": "85307b4e938d42201d6c232f5d9259f91133a303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85307b4e938d42201d6c232f5d9259f91133a303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85307b4e938d42201d6c232f5d9259f91133a303"}], "stats": {"total": 789, "additions": 788, "deletions": 1}, "files": [{"sha": "7b3cd467a0c5a7fdbdf23452284e2a6c2b893ca0", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e97b9052dbe0ead25019d4b37490f285d1f9c94/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e97b9052dbe0ead25019d4b37490f285d1f9c94/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=8e97b9052dbe0ead25019d4b37490f285d1f9c94", "patch": "@@ -1,3 +1,10 @@\n+2020-10-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR target/97302\n+\t* configure.ac: Only set with_gmp to /usr/local\n+\tif not building in tree.\n+\t* configure: Regenerate.\n+\n 2020-09-18  Omar Tahir  <omar.tahir@arm.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "5f9e8ac99af42b97c9bbb3e02548acb5950e84a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 664, "deletions": 0, "changes": 664, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e97b9052dbe0ead25019d4b37490f285d1f9c94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e97b9052dbe0ead25019d4b37490f285d1f9c94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e97b9052dbe0ead25019d4b37490f285d1f9c94", "patch": "@@ -1,3 +1,667 @@\n+2020-10-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* flag-types.h (enum evrp_mode): New enumerated type EVRP_MODE_*.\n+\t* common.opt (fevrp-mode): New undocumented flag.\n+\t* gimple-ssa-evrp.c: Include gimple-range.h\n+\t(class rvrp_folder): EVRP folding using ranger exclusively.\n+\t(rvrp_folder::rvrp_folder): New.\n+\t(rvrp_folder::~rvrp_folder): New.\n+\t(rvrp_folder::value_of_expr): New.  Use rangers value_of_expr.\n+\t(rvrp_folder::value_on_edge): New.  Use rangers value_on_edge.\n+\t(rvrp_folder::value_of_Stmt): New.  Use rangers value_of_stmt.\n+\t(rvrp_folder::fold_stmt): New.  Call the simplifier.\n+\t(class hybrid_folder): EVRP folding using both engines.\n+\t(hybrid_folder::hybrid_folder): New.\n+\t(hybrid_folder::~hybrid_folder): New.\n+\t(hybrid_folder::fold_stmt): New.  Simplify with one engne, then the\n+\tother.\n+\t(hybrid_folder::value_of_expr): New.  Use both value routines.\n+\t(hybrid_folder::value_on_edge): New.  Use both value routines.\n+\t(hybrid_folder::value_of_stmt): New.  Use both value routines.\n+\t(hybrid_folder::choose_value): New.  Choose between range_analzyer and\n+\trangers values.\n+\t(execute_early_vrp): Choose a folder based on flag_evrp_mode.\n+\t* vr-values.c (simplify_using_ranges::fold_cond): Try range_of_stmt\n+\tfirst to see if it returns a value.\n+\t(simplify_using_ranges::simplify_switch_using_ranges): Return true if\n+\tany changes were made to the switch.\n+\n+2020-10-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add gimple-range*.o.\n+\t* gimple-range.h: New file.\n+\t* gimple-range.cc: New file.\n+\t* gimple-range-cache.h: New file.\n+\t* gimple-range-cache.cc: New file.\n+\t* gimple-range-edge.h: New file.\n+\t* gimple-range-edge.cc: New file.\n+\t* gimple-range-gori.h: New file.\n+\t* gimple-range-gori.cc: New file.\n+\n+2020-10-06  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/arm/arm.c (arm_preferred_simd_mode): Enable MVE SIMD modes.\n+\n+2020-10-06  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR middle-end/90861\n+\t* gimplify.c (gimplify_bind_expr): Handle lookup in\n+\toacc_declare_returns using key with decl-expr.\n+\n+2020-10-06  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/iterators.md (MVE_types): Move mode iterator from mve.md to\n+\titerators.md.\n+\t(MVE_VLD_ST): Likewise.\n+\t(MVE_0): Likewise.\n+\t(MVE_1): Likewise.\n+\t(MVE_3): Likewise.\n+\t(MVE_2): Likewise.\n+\t(MVE_5): Likewise.\n+\t(MVE_6): Likewise.\n+\t(MVE_CNVT): Move mode attribute iterator from mve.md to iterators.md.\n+\t(MVE_LANES): Likewise.\n+\t(MVE_constraint): Likewise.\n+\t(MVE_constraint1): Likewise.\n+\t(MVE_constraint2): Likewise.\n+\t(MVE_constraint3): Likewise.\n+\t(MVE_pred): Likewise.\n+\t(MVE_pred1): Likewise.\n+\t(MVE_pred2): Likewise.\n+\t(MVE_pred3): Likewise.\n+\t(MVE_B_ELEM): Likewise.\n+\t(MVE_H_ELEM): Likewise.\n+\t(V_sz_elem1): Likewise.\n+\t(V_extr_elem): Likewise.\n+\t(earlyclobber_32): Likewise.\n+\t(supf): Move int attribute from mve.md to iterators.md.\n+\t(mode1): Likewise.\n+\t(VCVTQ_TO_F): Move int iterator from mve.md to iterators.md.\n+\t(VMVNQ_N): Likewise.\n+\t(VREV64Q): Likewise.\n+\t(VCVTQ_FROM_F): Likewise.\n+\t(VREV16Q): Likewise.\n+\t(VCVTAQ): Likewise.\n+\t(VMVNQ): Likewise.\n+\t(VDUPQ_N): Likewise.\n+\t(VCLZQ): Likewise.\n+\t(VADDVQ): Likewise.\n+\t(VREV32Q): Likewise.\n+\t(VMOVLBQ): Likewise.\n+\t(VMOVLTQ): Likewise.\n+\t(VCVTPQ): Likewise.\n+\t(VCVTNQ): Likewise.\n+\t(VCVTMQ): Likewise.\n+\t(VADDLVQ): Likewise.\n+\t(VCTPQ): Likewise.\n+\t(VCTPQ_M): Likewise.\n+\t(VCVTQ_N_TO_F): Likewise.\n+\t(VCREATEQ): Likewise.\n+\t(VSHRQ_N): Likewise.\n+\t(VCVTQ_N_FROM_F): Likewise.\n+\t(VADDLVQ_P): Likewise.\n+\t(VCMPNEQ): Likewise.\n+\t(VSHLQ): Likewise.\n+\t(VABDQ): Likewise.\n+\t(VADDQ_N): Likewise.\n+\t(VADDVAQ): Likewise.\n+\t(VADDVQ_P): Likewise.\n+\t(VANDQ): Likewise.\n+\t(VBICQ): Likewise.\n+\t(VBRSRQ_N): Likewise.\n+\t(VCADDQ_ROT270): Likewise.\n+\t(VCADDQ_ROT90): Likewise.\n+\t(VCMPEQQ): Likewise.\n+\t(VCMPEQQ_N): Likewise.\n+\t(VCMPNEQ_N): Likewise.\n+\t(VEORQ): Likewise.\n+\t(VHADDQ): Likewise.\n+\t(VHADDQ_N): Likewise.\n+\t(VHSUBQ): Likewise.\n+\t(VHSUBQ_N): Likewise.\n+\t(VMAXQ): Likewise.\n+\t(VMAXVQ): Likewise.\n+\t(VMINQ): Likewise.\n+\t(VMINVQ): Likewise.\n+\t(VMLADAVQ): Likewise.\n+\t(VMULHQ): Likewise.\n+\t(VMULLBQ_INT): Likewise.\n+\t(VMULLTQ_INT): Likewise.\n+\t(VMULQ): Likewise.\n+\t(VMULQ_N): Likewise.\n+\t(VORNQ): Likewise.\n+\t(VORRQ): Likewise.\n+\t(VQADDQ): Likewise.\n+\t(VQADDQ_N): Likewise.\n+\t(VQRSHLQ): Likewise.\n+\t(VQRSHLQ_N): Likewise.\n+\t(VQSHLQ): Likewise.\n+\t(VQSHLQ_N): Likewise.\n+\t(VQSHLQ_R): Likewise.\n+\t(VQSUBQ): Likewise.\n+\t(VQSUBQ_N): Likewise.\n+\t(VRHADDQ): Likewise.\n+\t(VRMULHQ): Likewise.\n+\t(VRSHLQ): Likewise.\n+\t(VRSHLQ_N): Likewise.\n+\t(VRSHRQ_N): Likewise.\n+\t(VSHLQ_N): Likewise.\n+\t(VSHLQ_R): Likewise.\n+\t(VSUBQ): Likewise.\n+\t(VSUBQ_N): Likewise.\n+\t(VADDLVAQ): Likewise.\n+\t(VBICQ_N): Likewise.\n+\t(VMLALDAVQ): Likewise.\n+\t(VMLALDAVXQ): Likewise.\n+\t(VMOVNBQ): Likewise.\n+\t(VMOVNTQ): Likewise.\n+\t(VORRQ_N): Likewise.\n+\t(VQMOVNBQ): Likewise.\n+\t(VQMOVNTQ): Likewise.\n+\t(VSHLLBQ_N): Likewise.\n+\t(VSHLLTQ_N): Likewise.\n+\t(VRMLALDAVHQ): Likewise.\n+\t(VBICQ_M_N): Likewise.\n+\t(VCVTAQ_M): Likewise.\n+\t(VCVTQ_M_TO_F): Likewise.\n+\t(VQRSHRNBQ_N): Likewise.\n+\t(VABAVQ): Likewise.\n+\t(VSHLCQ): Likewise.\n+\t(VRMLALDAVHAQ): Likewise.\n+\t(VADDVAQ_P): Likewise.\n+\t(VCLZQ_M): Likewise.\n+\t(VCMPEQQ_M_N): Likewise.\n+\t(VCMPEQQ_M): Likewise.\n+\t(VCMPNEQ_M_N): Likewise.\n+\t(VCMPNEQ_M): Likewise.\n+\t(VDUPQ_M_N): Likewise.\n+\t(VMAXVQ_P): Likewise.\n+\t(VMINVQ_P): Likewise.\n+\t(VMLADAVAQ): Likewise.\n+\t(VMLADAVQ_P): Likewise.\n+\t(VMLAQ_N): Likewise.\n+\t(VMLASQ_N): Likewise.\n+\t(VMVNQ_M): Likewise.\n+\t(VPSELQ): Likewise.\n+\t(VQDMLAHQ_N): Likewise.\n+\t(VQRDMLAHQ_N): Likewise.\n+\t(VQRDMLASHQ_N): Likewise.\n+\t(VQRSHLQ_M_N): Likewise.\n+\t(VQSHLQ_M_R): Likewise.\n+\t(VREV64Q_M): Likewise.\n+\t(VRSHLQ_M_N): Likewise.\n+\t(VSHLQ_M_R): Likewise.\n+\t(VSLIQ_N): Likewise.\n+\t(VSRIQ_N): Likewise.\n+\t(VMLALDAVQ_P): Likewise.\n+\t(VQMOVNBQ_M): Likewise.\n+\t(VMOVLTQ_M): Likewise.\n+\t(VMOVNBQ_M): Likewise.\n+\t(VRSHRNTQ_N): Likewise.\n+\t(VORRQ_M_N): Likewise.\n+\t(VREV32Q_M): Likewise.\n+\t(VREV16Q_M): Likewise.\n+\t(VQRSHRNTQ_N): Likewise.\n+\t(VMOVNTQ_M): Likewise.\n+\t(VMOVLBQ_M): Likewise.\n+\t(VMLALDAVAQ): Likewise.\n+\t(VQSHRNBQ_N): Likewise.\n+\t(VSHRNBQ_N): Likewise.\n+\t(VRSHRNBQ_N): Likewise.\n+\t(VMLALDAVXQ_P): Likewise.\n+\t(VQMOVNTQ_M): Likewise.\n+\t(VMVNQ_M_N): Likewise.\n+\t(VQSHRNTQ_N): Likewise.\n+\t(VMLALDAVAXQ): Likewise.\n+\t(VSHRNTQ_N): Likewise.\n+\t(VCVTMQ_M): Likewise.\n+\t(VCVTNQ_M): Likewise.\n+\t(VCVTPQ_M): Likewise.\n+\t(VCVTQ_M_N_FROM_F): Likewise.\n+\t(VCVTQ_M_FROM_F): Likewise.\n+\t(VRMLALDAVHQ_P): Likewise.\n+\t(VADDLVAQ_P): Likewise.\n+\t(VABAVQ_P): Likewise.\n+\t(VSHLQ_M): Likewise.\n+\t(VSRIQ_M_N): Likewise.\n+\t(VSUBQ_M): Likewise.\n+\t(VCVTQ_M_N_TO_F): Likewise.\n+\t(VHSUBQ_M): Likewise.\n+\t(VSLIQ_M_N): Likewise.\n+\t(VRSHLQ_M): Likewise.\n+\t(VMINQ_M): Likewise.\n+\t(VMULLBQ_INT_M): Likewise.\n+\t(VMULHQ_M): Likewise.\n+\t(VMULQ_M): Likewise.\n+\t(VHSUBQ_M_N): Likewise.\n+\t(VHADDQ_M_N): Likewise.\n+\t(VORRQ_M): Likewise.\n+\t(VRMULHQ_M): Likewise.\n+\t(VQADDQ_M): Likewise.\n+\t(VRSHRQ_M_N): Likewise.\n+\t(VQSUBQ_M_N): Likewise.\n+\t(VADDQ_M): Likewise.\n+\t(VORNQ_M): Likewise.\n+\t(VRHADDQ_M): Likewise.\n+\t(VQSHLQ_M): Likewise.\n+\t(VANDQ_M): Likewise.\n+\t(VBICQ_M): Likewise.\n+\t(VSHLQ_M_N): Likewise.\n+\t(VCADDQ_ROT270_M): Likewise.\n+\t(VQRSHLQ_M): Likewise.\n+\t(VQADDQ_M_N): Likewise.\n+\t(VADDQ_M_N): Likewise.\n+\t(VMAXQ_M): Likewise.\n+\t(VQSUBQ_M): Likewise.\n+\t(VMLASQ_M_N): Likewise.\n+\t(VMLADAVAQ_P): Likewise.\n+\t(VBRSRQ_M_N): Likewise.\n+\t(VMULQ_M_N): Likewise.\n+\t(VCADDQ_ROT90_M): Likewise.\n+\t(VMULLTQ_INT_M): Likewise.\n+\t(VEORQ_M): Likewise.\n+\t(VSHRQ_M_N): Likewise.\n+\t(VSUBQ_M_N): Likewise.\n+\t(VHADDQ_M): Likewise.\n+\t(VABDQ_M): Likewise.\n+\t(VMLAQ_M_N): Likewise.\n+\t(VQSHLQ_M_N): Likewise.\n+\t(VMLALDAVAQ_P): Likewise.\n+\t(VMLALDAVAXQ_P): Likewise.\n+\t(VQRSHRNBQ_M_N): Likewise.\n+\t(VQRSHRNTQ_M_N): Likewise.\n+\t(VQSHRNBQ_M_N): Likewise.\n+\t(VQSHRNTQ_M_N): Likewise.\n+\t(VRSHRNBQ_M_N): Likewise.\n+\t(VRSHRNTQ_M_N): Likewise.\n+\t(VSHLLBQ_M_N): Likewise.\n+\t(VSHLLTQ_M_N): Likewise.\n+\t(VSHRNBQ_M_N): Likewise.\n+\t(VSHRNTQ_M_N): Likewise.\n+\t(VSTRWSBQ): Likewise.\n+\t(VSTRBSOQ): Likewise.\n+\t(VSTRBQ): Likewise.\n+\t(VLDRBGOQ): Likewise.\n+\t(VLDRBQ): Likewise.\n+\t(VLDRWGBQ): Likewise.\n+\t(VLD1Q): Likewise.\n+\t(VLDRHGOQ): Likewise.\n+\t(VLDRHGSOQ): Likewise.\n+\t(VLDRHQ): Likewise.\n+\t(VLDRWQ): Likewise.\n+\t(VLDRDGBQ): Likewise.\n+\t(VLDRDGOQ): Likewise.\n+\t(VLDRDGSOQ): Likewise.\n+\t(VLDRWGOQ): Likewise.\n+\t(VLDRWGSOQ): Likewise.\n+\t(VST1Q): Likewise.\n+\t(VSTRHSOQ): Likewise.\n+\t(VSTRHSSOQ): Likewise.\n+\t(VSTRHQ): Likewise.\n+\t(VSTRWQ): Likewise.\n+\t(VSTRDSBQ): Likewise.\n+\t(VSTRDSOQ): Likewise.\n+\t(VSTRDSSOQ): Likewise.\n+\t(VSTRWSOQ): Likewise.\n+\t(VSTRWSSOQ): Likewise.\n+\t(VSTRWSBWBQ): Likewise.\n+\t(VLDRWGBWBQ): Likewise.\n+\t(VSTRDSBWBQ): Likewise.\n+\t(VLDRDGBWBQ): Likewise.\n+\t(VADCIQ): Likewise.\n+\t(VADCIQ_M): Likewise.\n+\t(VSBCQ): Likewise.\n+\t(VSBCQ_M): Likewise.\n+\t(VSBCIQ): Likewise.\n+\t(VSBCIQ_M): Likewise.\n+\t(VADCQ): Likewise.\n+\t(VADCQ_M): Likewise.\n+\t(UQRSHLLQ): Likewise.\n+\t(SQRSHRLQ): Likewise.\n+\t(VSHLCQ_M): Likewise.\n+\t* config/arm/mve.md (MVE_types): Move mode iterator to iterators.md from mve.md.\n+\t(MVE_VLD_ST): Likewise.\n+\t(MVE_0): Likewise.\n+\t(MVE_1): Likewise.\n+\t(MVE_3): Likewise.\n+\t(MVE_2): Likewise.\n+\t(MVE_5): Likewise.\n+\t(MVE_6): Likewise.\n+\t(MVE_CNVT): Move mode attribute iterator to iterators.md from mve.md.\n+\t(MVE_LANES): Likewise.\n+\t(MVE_constraint): Likewise.\n+\t(MVE_constraint1): Likewise.\n+\t(MVE_constraint2): Likewise.\n+\t(MVE_constraint3): Likewise.\n+\t(MVE_pred): Likewise.\n+\t(MVE_pred1): Likewise.\n+\t(MVE_pred2): Likewise.\n+\t(MVE_pred3): Likewise.\n+\t(MVE_B_ELEM): Likewise.\n+\t(MVE_H_ELEM): Likewise.\n+\t(V_sz_elem1): Likewise.\n+\t(V_extr_elem): Likewise.\n+\t(earlyclobber_32): Likewise.\n+\t(supf): Move int attribute to iterators.md from mve.md.\n+\t(mode1): Likewise.\n+\t(VCVTQ_TO_F): Move int iterator to iterators.md from mve.md.\n+\t(VMVNQ_N): Likewise.\n+\t(VREV64Q): Likewise.\n+\t(VCVTQ_FROM_F): Likewise.\n+\t(VREV16Q): Likewise.\n+\t(VCVTAQ): Likewise.\n+\t(VMVNQ): Likewise.\n+\t(VDUPQ_N): Likewise.\n+\t(VCLZQ): Likewise.\n+\t(VADDVQ): Likewise.\n+\t(VREV32Q): Likewise.\n+\t(VMOVLBQ): Likewise.\n+\t(VMOVLTQ): Likewise.\n+\t(VCVTPQ): Likewise.\n+\t(VCVTNQ): Likewise.\n+\t(VCVTMQ): Likewise.\n+\t(VADDLVQ): Likewise.\n+\t(VCTPQ): Likewise.\n+\t(VCTPQ_M): Likewise.\n+\t(VCVTQ_N_TO_F): Likewise.\n+\t(VCREATEQ): Likewise.\n+\t(VSHRQ_N): Likewise.\n+\t(VCVTQ_N_FROM_F): Likewise.\n+\t(VADDLVQ_P): Likewise.\n+\t(VCMPNEQ): Likewise.\n+\t(VSHLQ): Likewise.\n+\t(VABDQ): Likewise.\n+\t(VADDQ_N): Likewise.\n+\t(VADDVAQ): Likewise.\n+\t(VADDVQ_P): Likewise.\n+\t(VANDQ): Likewise.\n+\t(VBICQ): Likewise.\n+\t(VBRSRQ_N): Likewise.\n+\t(VCADDQ_ROT270): Likewise.\n+\t(VCADDQ_ROT90): Likewise.\n+\t(VCMPEQQ): Likewise.\n+\t(VCMPEQQ_N): Likewise.\n+\t(VCMPNEQ_N): Likewise.\n+\t(VEORQ): Likewise.\n+\t(VHADDQ): Likewise.\n+\t(VHADDQ_N): Likewise.\n+\t(VHSUBQ): Likewise.\n+\t(VHSUBQ_N): Likewise.\n+\t(VMAXQ): Likewise.\n+\t(VMAXVQ): Likewise.\n+\t(VMINQ): Likewise.\n+\t(VMINVQ): Likewise.\n+\t(VMLADAVQ): Likewise.\n+\t(VMULHQ): Likewise.\n+\t(VMULLBQ_INT): Likewise.\n+\t(VMULLTQ_INT): Likewise.\n+\t(VMULQ): Likewise.\n+\t(VMULQ_N): Likewise.\n+\t(VORNQ): Likewise.\n+\t(VORRQ): Likewise.\n+\t(VQADDQ): Likewise.\n+\t(VQADDQ_N): Likewise.\n+\t(VQRSHLQ): Likewise.\n+\t(VQRSHLQ_N): Likewise.\n+\t(VQSHLQ): Likewise.\n+\t(VQSHLQ_N): Likewise.\n+\t(VQSHLQ_R): Likewise.\n+\t(VQSUBQ): Likewise.\n+\t(VQSUBQ_N): Likewise.\n+\t(VRHADDQ): Likewise.\n+\t(VRMULHQ): Likewise.\n+\t(VRSHLQ): Likewise.\n+\t(VRSHLQ_N): Likewise.\n+\t(VRSHRQ_N): Likewise.\n+\t(VSHLQ_N): Likewise.\n+\t(VSHLQ_R): Likewise.\n+\t(VSUBQ): Likewise.\n+\t(VSUBQ_N): Likewise.\n+\t(VADDLVAQ): Likewise.\n+\t(VBICQ_N): Likewise.\n+\t(VMLALDAVQ): Likewise.\n+\t(VMLALDAVXQ): Likewise.\n+\t(VMOVNBQ): Likewise.\n+\t(VMOVNTQ): Likewise.\n+\t(VORRQ_N): Likewise.\n+\t(VQMOVNBQ): Likewise.\n+\t(VQMOVNTQ): Likewise.\n+\t(VSHLLBQ_N): Likewise.\n+\t(VSHLLTQ_N): Likewise.\n+\t(VRMLALDAVHQ): Likewise.\n+\t(VBICQ_M_N): Likewise.\n+\t(VCVTAQ_M): Likewise.\n+\t(VCVTQ_M_TO_F): Likewise.\n+\t(VQRSHRNBQ_N): Likewise.\n+\t(VABAVQ): Likewise.\n+\t(VSHLCQ): Likewise.\n+\t(VRMLALDAVHAQ): Likewise.\n+\t(VADDVAQ_P): Likewise.\n+\t(VCLZQ_M): Likewise.\n+\t(VCMPEQQ_M_N): Likewise.\n+\t(VCMPEQQ_M): Likewise.\n+\t(VCMPNEQ_M_N): Likewise.\n+\t(VCMPNEQ_M): Likewise.\n+\t(VDUPQ_M_N): Likewise.\n+\t(VMAXVQ_P): Likewise.\n+\t(VMINVQ_P): Likewise.\n+\t(VMLADAVAQ): Likewise.\n+\t(VMLADAVQ_P): Likewise.\n+\t(VMLAQ_N): Likewise.\n+\t(VMLASQ_N): Likewise.\n+\t(VMVNQ_M): Likewise.\n+\t(VPSELQ): Likewise.\n+\t(VQDMLAHQ_N): Likewise.\n+\t(VQRDMLAHQ_N): Likewise.\n+\t(VQRDMLASHQ_N): Likewise.\n+\t(VQRSHLQ_M_N): Likewise.\n+\t(VQSHLQ_M_R): Likewise.\n+\t(VREV64Q_M): Likewise.\n+\t(VRSHLQ_M_N): Likewise.\n+\t(VSHLQ_M_R): Likewise.\n+\t(VSLIQ_N): Likewise.\n+\t(VSRIQ_N): Likewise.\n+\t(VMLALDAVQ_P): Likewise.\n+\t(VQMOVNBQ_M): Likewise.\n+\t(VMOVLTQ_M): Likewise.\n+\t(VMOVNBQ_M): Likewise.\n+\t(VRSHRNTQ_N): Likewise.\n+\t(VORRQ_M_N): Likewise.\n+\t(VREV32Q_M): Likewise.\n+\t(VREV16Q_M): Likewise.\n+\t(VQRSHRNTQ_N): Likewise.\n+\t(VMOVNTQ_M): Likewise.\n+\t(VMOVLBQ_M): Likewise.\n+\t(VMLALDAVAQ): Likewise.\n+\t(VQSHRNBQ_N): Likewise.\n+\t(VSHRNBQ_N): Likewise.\n+\t(VRSHRNBQ_N): Likewise.\n+\t(VMLALDAVXQ_P): Likewise.\n+\t(VQMOVNTQ_M): Likewise.\n+\t(VMVNQ_M_N): Likewise.\n+\t(VQSHRNTQ_N): Likewise.\n+\t(VMLALDAVAXQ): Likewise.\n+\t(VSHRNTQ_N): Likewise.\n+\t(VCVTMQ_M): Likewise.\n+\t(VCVTNQ_M): Likewise.\n+\t(VCVTPQ_M): Likewise.\n+\t(VCVTQ_M_N_FROM_F): Likewise.\n+\t(VCVTQ_M_FROM_F): Likewise.\n+\t(VRMLALDAVHQ_P): Likewise.\n+\t(VADDLVAQ_P): Likewise.\n+\t(VABAVQ_P): Likewise.\n+\t(VSHLQ_M): Likewise.\n+\t(VSRIQ_M_N): Likewise.\n+\t(VSUBQ_M): Likewise.\n+\t(VCVTQ_M_N_TO_F): Likewise.\n+\t(VHSUBQ_M): Likewise.\n+\t(VSLIQ_M_N): Likewise.\n+\t(VRSHLQ_M): Likewise.\n+\t(VMINQ_M): Likewise.\n+\t(VMULLBQ_INT_M): Likewise.\n+\t(VMULHQ_M): Likewise.\n+\t(VMULQ_M): Likewise.\n+\t(VHSUBQ_M_N): Likewise.\n+\t(VHADDQ_M_N): Likewise.\n+\t(VORRQ_M): Likewise.\n+\t(VRMULHQ_M): Likewise.\n+\t(VQADDQ_M): Likewise.\n+\t(VRSHRQ_M_N): Likewise.\n+\t(VQSUBQ_M_N): Likewise.\n+\t(VADDQ_M): Likewise.\n+\t(VORNQ_M): Likewise.\n+\t(VRHADDQ_M): Likewise.\n+\t(VQSHLQ_M): Likewise.\n+\t(VANDQ_M): Likewise.\n+\t(VBICQ_M): Likewise.\n+\t(VSHLQ_M_N): Likewise.\n+\t(VCADDQ_ROT270_M): Likewise.\n+\t(VQRSHLQ_M): Likewise.\n+\t(VQADDQ_M_N): Likewise.\n+\t(VADDQ_M_N): Likewise.\n+\t(VMAXQ_M): Likewise.\n+\t(VQSUBQ_M): Likewise.\n+\t(VMLASQ_M_N): Likewise.\n+\t(VMLADAVAQ_P): Likewise.\n+\t(VBRSRQ_M_N): Likewise.\n+\t(VMULQ_M_N): Likewise.\n+\t(VCADDQ_ROT90_M): Likewise.\n+\t(VMULLTQ_INT_M): Likewise.\n+\t(VEORQ_M): Likewise.\n+\t(VSHRQ_M_N): Likewise.\n+\t(VSUBQ_M_N): Likewise.\n+\t(VHADDQ_M): Likewise.\n+\t(VABDQ_M): Likewise.\n+\t(VMLAQ_M_N): Likewise.\n+\t(VQSHLQ_M_N): Likewise.\n+\t(VMLALDAVAQ_P): Likewise.\n+\t(VMLALDAVAXQ_P): Likewise.\n+\t(VQRSHRNBQ_M_N): Likewise.\n+\t(VQRSHRNTQ_M_N): Likewise.\n+\t(VQSHRNBQ_M_N): Likewise.\n+\t(VQSHRNTQ_M_N): Likewise.\n+\t(VRSHRNBQ_M_N): Likewise.\n+\t(VRSHRNTQ_M_N): Likewise.\n+\t(VSHLLBQ_M_N): Likewise.\n+\t(VSHLLTQ_M_N): Likewise.\n+\t(VSHRNBQ_M_N): Likewise.\n+\t(VSHRNTQ_M_N): Likewise.\n+\t(VSTRWSBQ): Likewise.\n+\t(VSTRBSOQ): Likewise.\n+\t(VSTRBQ): Likewise.\n+\t(VLDRBGOQ): Likewise.\n+\t(VLDRBQ): Likewise.\n+\t(VLDRWGBQ): Likewise.\n+\t(VLD1Q): Likewise.\n+\t(VLDRHGOQ): Likewise.\n+\t(VLDRHGSOQ): Likewise.\n+\t(VLDRHQ): Likewise.\n+\t(VLDRWQ): Likewise.\n+\t(VLDRDGBQ): Likewise.\n+\t(VLDRDGOQ): Likewise.\n+\t(VLDRDGSOQ): Likewise.\n+\t(VLDRWGOQ): Likewise.\n+\t(VLDRWGSOQ): Likewise.\n+\t(VST1Q): Likewise.\n+\t(VSTRHSOQ): Likewise.\n+\t(VSTRHSSOQ): Likewise.\n+\t(VSTRHQ): Likewise.\n+\t(VSTRWQ): Likewise.\n+\t(VSTRDSBQ): Likewise.\n+\t(VSTRDSOQ): Likewise.\n+\t(VSTRDSSOQ): Likewise.\n+\t(VSTRWSOQ): Likewise.\n+\t(VSTRWSSOQ): Likewise.\n+\t(VSTRWSBWBQ): Likewise.\n+\t(VLDRWGBWBQ): Likewise.\n+\t(VSTRDSBWBQ): Likewise.\n+\t(VLDRDGBWBQ): Likewise.\n+\t(VADCIQ): Likewise.\n+\t(VADCIQ_M): Likewise.\n+\t(VSBCQ): Likewise.\n+\t(VSBCQ_M): Likewise.\n+\t(VSBCIQ): Likewise.\n+\t(VSBCIQ_M): Likewise.\n+\t(VADCQ): Likewise.\n+\t(VADCQ_M): Likewise.\n+\t(UQRSHLLQ): Likewise.\n+\t(SQRSHRLQ): Likewise.\n+\t(VSHLCQ_M): Likewise.\n+\t(define_c_enum \"unspec\"): Move MVE enumerator to unspecs.md from mve.md.\n+\t* config/arm/unspecs.md (define_c_enum \"unspec\"): Move MVE enumerator from\n+\tmve.md to unspecs.md.\n+\n+2020-10-06  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Remove -fdbg-cnt-list from deferred options.\n+\t* dbgcnt.c (dbg_cnt_set_limit_by_index): Make a copy\n+\tto original_limits.\n+\t(dbg_cnt_list_all_counters): Print also current counter value\n+\tand print to stderr.\n+\t* opts-global.c (handle_common_deferred_options): Do not handle\n+\t-fdbg-cnt-list.\n+\t* opts.c (common_handle_option): Likewise.\n+\t* toplev.c (finalize): Handle it after compilation here.\n+\n+2020-10-06  Martin Liska  <mliska@suse.cz>\n+\n+\t* dbgcnt.c (dbg_cnt): Report also upper limit.\n+\n+2020-10-06  Tom de Vries  <tdevries@suse.de>\n+\n+\t* tracer.c (count_insns): Rename to ...\n+\t(analyze_bb): ... this.\n+\t(cache_can_duplicate_bb_p, cached_can_duplicate_bb_p): New function.\n+\t(ignore_bb_p): Use cached_can_duplicate_bb_p.\n+\t(tail_duplicate): Call cache_can_duplicate_bb_p.\n+\n+2020-10-06  Tom de Vries  <tdevries@suse.de>\n+\n+\t* tracer.c (can_duplicate_insn_p, can_duplicate_bb_no_insn_iter_p)\n+\t(can_duplicate_bb_p): New function, factored out of ...\n+\t(ignore_bb_p): ... here.\n+\n+2020-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/97282\n+\t* tree-ssa-math-opts.c (divmod_candidate_p): Don't return false for\n+\tconstant op2 if it is not a power of two and the type has precision\n+\tlarger than HOST_BITS_PER_WIDE_INT or BITS_PER_WORD.\n+\t* internal-fn.c (contains_call_div_mod): New function.\n+\t(expand_DIVMOD): If last argument is a constant, try to expand it as\n+\tTRUNC_DIV_EXPR followed by TRUNC_MOD_EXPR, but if the sequence\n+\tcontains any calls or {,U}{DIV,MOD} rtxes, throw it away and use\n+\tdivmod optab or divmod libfunc.\n+\n+2020-10-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.h (irange_allocator::allocate): Increase\n+\tnewir storage by one.\n+\n+2020-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/97289\n+\t* omp-offload.c (omp_discover_declare_target_tgt_fn_r): Only follow\n+\tnode->alias_target if it is a FUNCTION_DECL.\n+\n+2020-10-06  Joe Ramsay  <joe.ramsay@arm.com>\n+\n+\t* config/arm/arm-cpus.in:\n+\t(ALL_FPU_INTERNAL): Remove vfp_base.\n+\t(VFPv2): Remove vfp_base.\n+\t(MVE): Remove vfp_base.\n+\t(vfp_base): Redefine as implied bit dependent on MVE or FP\n+\t(cortex-m55): Add flags to disable MVE, MVE FP, FP and DSP extensions.\n+\t* config/arm/arm.c (arm_configure_build_target): Add implied bits to ISA.\n+\t* config/arm/parsecpu.awk:\n+\t(gen_isa): Print implied bits and their dependencies to ISA header.\n+\t(gen_data): Add parsing for implied feature bits.\n+\n+2020-10-06  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* doc/invoke.texi: Add z15/arch13 to the list of documented\n+\t-march/-mtune options.\n+\n 2020-10-05  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* config/arm/arm.c (arm_preferred_simd_mode): Enable MVE SIMD modes."}, {"sha": "8478d98f282f206a1657278249810e715a52133e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e97b9052dbe0ead25019d4b37490f285d1f9c94/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e97b9052dbe0ead25019d4b37490f285d1f9c94/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8e97b9052dbe0ead25019d4b37490f285d1f9c94", "patch": "@@ -1 +1 @@\n-20201006\n+20201007"}, {"sha": "dcd5fd383f10300a6733028797bc68082bc574dc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e97b9052dbe0ead25019d4b37490f285d1f9c94/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e97b9052dbe0ead25019d4b37490f285d1f9c94/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e97b9052dbe0ead25019d4b37490f285d1f9c94", "patch": "@@ -1,3 +1,10 @@\n+2020-10-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97297\n+\t* parser.c (cp_parser_direct_declarator): When checking if a\n+\tname is a function template declaration for the P0634R3 case,\n+\tlook in uninstantiated templates too.\n+\n 2020-10-05  Marek Polacek  <polacek@redhat.com>\n \n \t* cp-tree.h (NON_UNION_CLASS_TYPE_P): Fix typo in a comment."}, {"sha": "6466356e2ae05cfdd0ceb79116e76ccd9a88f4e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e97b9052dbe0ead25019d4b37490f285d1f9c94/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e97b9052dbe0ead25019d4b37490f285d1f9c94/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e97b9052dbe0ead25019d4b37490f285d1f9c94", "patch": "@@ -1,3 +1,58 @@\n+2020-10-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97297\n+\t* g++.dg/cpp2a/typename18.C: New test.\n+\n+2020-10-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/90861\n+\t* c-c++-common/goacc/declare-pr90861.c: Remove xfail.\n+\n+2020-10-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr81192.c: Disable EVRP pass.\n+\t* gcc.dg/tree-ssa/pr77445-2.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Adjust.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Ditto.\n+\n+2020-10-06  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_f16.c: Use additional\n+\toption -fno-ipa-icf and change the instruction count from 8 to 16.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u8.c: Likewise.\n+\n+2020-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/97282\n+\t* gcc.target/i386/pr97282.c: New test.\n+\n+2020-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/97289\n+\t* c-c++-common/gomp/pr97289.c: New test.\n+\n+2020-10-06  Joe Ramsay  <Joe.Ramsay@arm.com>\n+\n+\t* gcc.target/arm/cortex-m55-nodsp-flag-hard.c: New test.\n+\t* gcc.target/arm/cortex-m55-nodsp-flag-softfp.c: New test.\n+\t* gcc.target/arm/cortex-m55-nodsp-nofp-flag-softfp.c: New test.\n+\t* gcc.target/arm/cortex-m55-nofp-flag-hard.c: New test.\n+\t* gcc.target/arm/cortex-m55-nofp-flag-softfp.c: New test.\n+\t* gcc.target/arm/cortex-m55-nofp-nomve-flag-softfp.c: New test.\n+\t* gcc.target/arm/cortex-m55-nomve-flag-hard.c: New test.\n+\t* gcc.target/arm/cortex-m55-nomve-flag-softfp.c: New test.\n+\t* gcc.target/arm/cortex-m55-nomve.fp-flag-hard.c: New test.\n+\t* gcc.target/arm/cortex-m55-nomve.fp-flag-softfp.c: New test.\n+\t* gcc.target/arm/multilib.exp: Add tests for -mcpu=cortex-m55.\n+\n 2020-10-05  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vreinterpretq_f16.c: Use additional"}, {"sha": "24e9fa805647b907a4419f6ece2bd8091b2d2b43", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e97b9052dbe0ead25019d4b37490f285d1f9c94/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e97b9052dbe0ead25019d4b37490f285d1f9c94/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8e97b9052dbe0ead25019d4b37490f285d1f9c94", "patch": "@@ -1,3 +1,12 @@\n+2020-10-06  Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.oacc-fortran/declare-5.f90: Add xfail for PR92790.\n+\n+2020-10-06  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR middle-end/90861\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-vla.c: Remove xfail.\n+\n 2020-10-05  Tom de Vries  <tdevries@suse.de>\n \n \tPR fortran/95654"}, {"sha": "aae51b832d4605571349ae6ba27a218f41b5a1e8", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e97b9052dbe0ead25019d4b37490f285d1f9c94/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e97b9052dbe0ead25019d4b37490f285d1f9c94/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=8e97b9052dbe0ead25019d4b37490f285d1f9c94", "patch": "@@ -1,3 +1,9 @@\n+2020-10-06  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/97290\n+\t* simple-object-elf.c (simple_object_elf_copy_lto_debug_sections):\n+\tUse sh_link of a .symtab_shndx section.\n+\n 2020-09-24  Mark Wielaard  <mark@klomp.org>\n \n \t* dwarfnames.c (get_DW_UT_name): Define using DW_UT_FIRST, DW_UT"}, {"sha": "03bc536c11aea2d8e9c73ca0afe8484f86ceb0e2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e97b9052dbe0ead25019d4b37490f285d1f9c94/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e97b9052dbe0ead25019d4b37490f285d1f9c94/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8e97b9052dbe0ead25019d4b37490f285d1f9c94", "patch": "@@ -1,3 +1,42 @@\n+2020-10-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/90295\n+\t* config/abi/pre/gnu.ver (CXXABI_1.3.13): New symbol version.\n+\t(exception_ptr::_M_addref(), exception_ptr::_M_release()):\n+\tExport symbols.\n+\t* libsupc++/eh_ptr.cc (exception_ptr::exception_ptr()):\n+\tRemove out-of-line definition.\n+\t(exception_ptr::exception_ptr(const exception_ptr&)):\n+\tLikewise.\n+\t(exception_ptr::~exception_ptr()): Likewise.\n+\t(exception_ptr::operator=(const exception_ptr&)):\n+\tLikewise.\n+\t(exception_ptr::swap(exception_ptr&)): Likewise.\n+\t(exception_ptr::_M_addref()): Add branch prediction.\n+\t* libsupc++/exception_ptr.h (exception_ptr::operator bool):\n+\tAdd noexcept.\n+\t[!_GLIBCXX_EH_PTR_COMPAT] (operator==, operator!=): Define\n+\tinline as hidden friends. Remove declarations at namespace\n+\tscope.\n+\t(exception_ptr::exception_ptr()): Define inline.\n+\t(exception_ptr::exception_ptr(const exception_ptr&)):\n+\tLikewise.\n+\t(exception_ptr::~exception_ptr()): Likewise.\n+\t(exception_ptr::operator=(const exception_ptr&)):\n+\tLikewise.\n+\t(exception_ptr::swap(exception_ptr&)): Likewise.\n+\t* testsuite/util/testsuite_abi.cc: Add CXXABI_1.3.13.\n+\t* testsuite/18_support/exception_ptr/90295.cc: New test.\n+\n+2020-10-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ranges (join_view): Remove deduction guide.\n+\t(views::join): Add explicit template argument list to prevent\n+\tdeducing the wrong type.\n+\t* testsuite/std/ranges/adaptors/join.cc: Move test for LWG 3474\n+\there, from ...\n+\t* testsuite/std/ranges/adaptors/join_lwg3474.cc: Removed.\n+\n 2020-10-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/regex.h: Use __int_traits<int> instead of"}]}