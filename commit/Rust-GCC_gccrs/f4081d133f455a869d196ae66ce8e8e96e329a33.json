{"sha": "f4081d133f455a869d196ae66ce8e8e96e329a33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQwODFkMTMzZjQ1NWE4NjlkMTk2YWU2NmNlOGU4ZTk2ZTMyOWEzMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-07-29T17:30:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-07-29T17:30:34Z"}, "message": "re PR libstdc++/61947 (Ambiguous calls when constructing std::tuple)\n\n\tPR libstdc++/61947\n\t* include/std/tuple (_Head_base): Use allocator_arg_t parameters to\n\tdisambiguate unary constructors.\n\t(_Tuple_impl): Pass allocator_arg_t arguments.\n\t* testsuite/20_util/tuple/61947.cc: New.\n\t* testsuite/20_util/uses_allocator/cons_neg.cc: Adjust dg-error line.\n\nFrom-SVN: r213221", "tree": {"sha": "3dc5cddfd2fcd2996793d023583ac2471255a6db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dc5cddfd2fcd2996793d023583ac2471255a6db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4081d133f455a869d196ae66ce8e8e96e329a33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4081d133f455a869d196ae66ce8e8e96e329a33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4081d133f455a869d196ae66ce8e8e96e329a33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4081d133f455a869d196ae66ce8e8e96e329a33/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec20dcf3914c7f60f92efd5b708759d2acc2460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec20dcf3914c7f60f92efd5b708759d2acc2460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec20dcf3914c7f60f92efd5b708759d2acc2460"}], "stats": {"total": 66, "additions": 52, "deletions": 14}, "files": [{"sha": "76b663c5c07a689f2db0d9da08397adeb678afd6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4081d133f455a869d196ae66ce8e8e96e329a33/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4081d133f455a869d196ae66ce8e8e96e329a33/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f4081d133f455a869d196ae66ce8e8e96e329a33", "patch": "@@ -6,6 +6,13 @@\n \t_S_new_RopeFunction.\n \t* testsuite/ext/rope/61946.cc: New.\n \n+\tPR libstdc++/61947\n+\t* include/std/tuple (_Head_base): Use allocator_arg_t parameters to\n+\tdisambiguate unary constructors.\n+\t(_Tuple_impl): Pass allocator_arg_t arguments.\n+\t* testsuite/20_util/tuple/61947.cc: New.\n+\t* testsuite/20_util/uses_allocator/cons_neg.cc: Adjust dg-error line.\n+\n 2014-07-29  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR libstdc++/60037 - SIGFPE in std::generate_canonical<unsigned int...>"}, {"sha": "6c1032fb46c1b958108383c82029bc2a72331b46", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4081d133f455a869d196ae66ce8e8e96e329a33/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4081d133f455a869d196ae66ce8e8e96e329a33/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=f4081d133f455a869d196ae66ce8e8e96e329a33", "patch": "@@ -61,21 +61,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr _Head_base(const _Head& __h)\n       : _Head(__h) { }\n \n-      template<typename _UHead, typename = typename\n-\t       enable_if<!is_convertible<_UHead,\n-\t                                 __uses_alloc_base>::value>::type>\n+      constexpr _Head_base(const _Head_base&) = default;\n+      constexpr _Head_base(_Head_base&&) = default;\n+\n+      template<typename _UHead>\n         constexpr _Head_base(_UHead&& __h)\n \t: _Head(std::forward<_UHead>(__h)) { }\n \n-      _Head_base(__uses_alloc0)\n+      _Head_base(allocator_arg_t, __uses_alloc0)\n       : _Head() { }\n \n       template<typename _Alloc>\n-\t_Head_base(__uses_alloc1<_Alloc> __a)\n+\t_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)\n \t: _Head(allocator_arg, *__a._M_a) { }\n \n       template<typename _Alloc>\n-\t_Head_base(__uses_alloc2<_Alloc> __a)\n+\t_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)\n \t: _Head(*__a._M_a) { }\n \n       template<typename _UHead>\n@@ -106,21 +107,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr _Head_base(const _Head& __h)\n       : _M_head_impl(__h) { }\n \n-      template<typename _UHead, typename = typename\n-\t       enable_if<!is_convertible<_UHead,\n-\t                                 __uses_alloc_base>::value>::type>\n+      constexpr _Head_base(const _Head_base&) = default;\n+      constexpr _Head_base(_Head_base&&) = default;\n+\n+      template<typename _UHead>\n         constexpr _Head_base(_UHead&& __h)\n \t: _M_head_impl(std::forward<_UHead>(__h)) { }\n \n-      _Head_base(__uses_alloc0)\n+      _Head_base(allocator_arg_t, __uses_alloc0)\n       : _M_head_impl() { }\n \n       template<typename _Alloc>\n-\t_Head_base(__uses_alloc1<_Alloc> __a)\n+\t_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)\n \t: _M_head_impl(allocator_arg, *__a._M_a) { }\n \n       template<typename _Alloc>\n-\t_Head_base(__uses_alloc2<_Alloc> __a)\n+\t_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)\n \t: _M_head_impl(*__a._M_a) { }\n \n       template<typename _UHead>\n@@ -258,7 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)\n \t: _Inherited(__tag, __a),\n-          _Base(__use_alloc<_Head>(__a)) { }\n+          _Base(__tag, __use_alloc<_Head>(__a)) { }\n \n       template<typename _Alloc>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,"}, {"sha": "7e77de657a1a1c14668da54faa73e77063dee66e", "filename": "libstdc++-v3/testsuite/20_util/tuple/61947.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4081d133f455a869d196ae66ce8e8e96e329a33/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F61947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4081d133f455a869d196ae66ce8e8e96e329a33/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F61947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F61947.cc?ref=f4081d133f455a869d196ae66ce8e8e96e329a33", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+struct ConvertibleToAny {\n+  template <class T> operator T() const { return T(); }\n+};\n+\n+int main() {\n+  std::tuple<ConvertibleToAny&&> t(ConvertibleToAny{});\n+}"}, {"sha": "6396e2678ec8d16fcf838e00cd25b07aa5bc719e", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4081d133f455a869d196ae66ce8e8e96e329a33/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4081d133f455a869d196ae66ce8e8e96e329a33/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=f4081d133f455a869d196ae66ce8e8e96e329a33", "patch": "@@ -44,4 +44,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"no matching function\" \"\" { target *-*-* } 91 }\n+// { dg-error \"no matching function\" \"\" { target *-*-* } 92 }"}]}