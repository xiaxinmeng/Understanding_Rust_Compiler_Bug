{"sha": "b7a23949b0dcc4205fcc2be6b84b91441faa384d", "node_id": "C_kwDOANBUbNoAKGI3YTIzOTQ5YjBkY2M0MjA1ZmNjMmJlNmI4NGI5MTQ0MWZhYTM4NGQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-13T11:37:25Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-13T13:41:47Z"}, "message": "path solver: Compute all PHI ranges simultaneously.\n\nPHIs must be resolved simulatenously, otherwise we may not pick up the\nranges incoming to the block.\n\nFor example.  If we put p3_7 in the cache before all PHIs have been\ncomputed, we will pick up the wrong p3_7 value for p2_17:\n\n    # p3_7 = PHI <1(2), 0(5)>\n    # p2_17 = PHI <1(2), p3_7(5)>\n\nThis patch delays updating the cache until all PHIs have been\nanalyzed.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103222\n\t* gimple-range-path.cc (path_range_query::compute_ranges_in_phis):\n\tNew.\n\t(path_range_query::compute_ranges_in_block): Call\n\tcompute_ranges_in_phis.\n\t* gimple-range-path.h (path_range_query::compute_ranges_in_phis):\n\tNew.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr103222.c: New test.", "tree": {"sha": "af283f4673b4ba1548de8fad4e79f5875e1743f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af283f4673b4ba1548de8fad4e79f5875e1743f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7a23949b0dcc4205fcc2be6b84b91441faa384d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a23949b0dcc4205fcc2be6b84b91441faa384d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a23949b0dcc4205fcc2be6b84b91441faa384d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a23949b0dcc4205fcc2be6b84b91441faa384d/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "380fc3b69f6e7006d72ca270f909468426de3ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380fc3b69f6e7006d72ca270f909468426de3ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380fc3b69f6e7006d72ca270f909468426de3ab7"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "9957ac9b6c76c76f5a22cdb62225c04f221abc6c", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a23949b0dcc4205fcc2be6b84b91441faa384d/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a23949b0dcc4205fcc2be6b84b91441faa384d/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=b7a23949b0dcc4205fcc2be6b84b91441faa384d", "patch": "@@ -343,6 +343,38 @@ path_range_query::range_defined_in_block (irange &r, tree name, basic_block bb)\n   return true;\n }\n \n+// Compute ranges defined in the PHIs in this block.\n+\n+void\n+path_range_query::compute_ranges_in_phis (basic_block bb)\n+{\n+  int_range_max r;\n+  gphi_iterator iter;\n+\n+  // PHIs must be resolved simultaneously on entry to the block\n+  // because any dependencies must be satistifed with values on entry.\n+  // Thus, we calculate all PHIs first, and then update the cache at\n+  // the end.\n+\n+  m_tmp_phi_cache.clear ();\n+  for (iter = gsi_start_phis (bb); !gsi_end_p (iter); gsi_next (&iter))\n+    {\n+      gphi *phi = iter.phi ();\n+      tree name = gimple_phi_result (phi);\n+\n+      if (import_p (name) && range_defined_in_block (r, name, bb))\n+\tm_tmp_phi_cache.set_global_range (name, r);\n+    }\n+  for (iter = gsi_start_phis (bb); !gsi_end_p (iter); gsi_next (&iter))\n+    {\n+      gphi *phi = iter.phi ();\n+      tree name = gimple_phi_result (phi);\n+\n+      if (m_tmp_phi_cache.get_global_range (r, name))\n+\tset_cache (r, name);\n+    }\n+}\n+\n // Compute ranges defined in the current block, or exported to the\n // next block.\n \n@@ -369,15 +401,7 @@ path_range_query::compute_ranges_in_block (basic_block bb)\n     }\n \n   // Solve imports defined in this block, starting with the PHIs...\n-  for (gphi_iterator iter = gsi_start_phis (bb); !gsi_end_p (iter);\n-       gsi_next (&iter))\n-    {\n-      gphi *phi = iter.phi ();\n-      tree name = gimple_phi_result (phi);\n-\n-      if (import_p (name) && range_defined_in_block (r, name, bb))\n-\tset_cache (r, name);\n-    }\n+  compute_ranges_in_phis (bb);\n   // ...and then the rest of the imports.\n   EXECUTE_IF_SET_IN_BITMAP (m_imports, 0, i, bi)\n     {"}, {"sha": "c80734f65a17957f21beda315d9783fd22374a1a", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a23949b0dcc4205fcc2be6b84b91441faa384d/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a23949b0dcc4205fcc2be6b84b91441faa384d/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=b7a23949b0dcc4205fcc2be6b84b91441faa384d", "patch": "@@ -58,6 +58,7 @@ class path_range_query : public range_query\n   // Methods to compute ranges for the given path.\n   bool range_defined_in_block (irange &, tree name, basic_block bb);\n   void compute_ranges_in_block (basic_block bb);\n+  void compute_ranges_in_phis (basic_block bb);\n   void adjust_for_non_null_uses (basic_block bb);\n   void ssa_range_in_phi (irange &r, gphi *phi);\n   void compute_outgoing_relations (basic_block bb, basic_block next);\n@@ -80,6 +81,8 @@ class path_range_query : public range_query\n   // Range cache for SSA names.\n   ssa_global_cache *m_cache;\n \n+  ssa_global_cache m_tmp_phi_cache;\n+\n   // Set for each SSA that has an active entry in the cache.\n   bitmap m_has_cache_entry;\n "}, {"sha": "2a84437b25d66a85b1b5a0f6e36d51b03cb57d12", "filename": "gcc/testsuite/gcc.dg/pr103222.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a23949b0dcc4205fcc2be6b84b91441faa384d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103222.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a23949b0dcc4205fcc2be6b84b91441faa384d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103222.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103222.c?ref=b7a23949b0dcc4205fcc2be6b84b91441faa384d", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+#include <stdint.h>\n+#include <stdio.h>\n+int16_t a;\n+static uint32_t *b ;\n+static uint8_t func_2();\n+static int32_t func_1() {\n+  int16_t a = 1;\n+  func_2(0, a, a);\n+  return 0;\n+}\n+uint8_t func_2(uint32_t p1, uint32_t p2, uint32_t p3) {\n+  int p = 0;\n+  for (15;; a++) {\n+    for (0;;) {\n+      if (p2)\n+        break;\n+      b = &p2;\n+      return p2;\n+    }\n+     p3 = (p2 = p3, p);\n+  }\n+  return 0;\n+}\n+\n+int main() {\n+  func_1();\n+  if (a != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}