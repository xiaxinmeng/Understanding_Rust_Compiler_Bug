{"sha": "76be46db72595b894a6e6da15e892d4a1f8f91cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZiZTQ2ZGI3MjU5NWI4OTRhNmU2ZGExNWU4OTJkNGExZjhmOTFjZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-12-15T18:33:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-12-15T18:33:16Z"}, "message": "re PR tree-optimization/64312 (ICE: Segmentation fault)\n\n2014-12-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/64312\n\t* tree-ssa-sccvn.c (vn_reference_lookup_pieces): Use\n\tvuse_ssa_val as callback to walk_non_aliased_vuses.\n\t(vn_reference_lookup): Likewise.\n\n\t* g++.dg/torture/pr64312.C: New testcase.\n\nFrom-SVN: r218756", "tree": {"sha": "f70601c4ad50f577441d71322c0beea7b6cfbaa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f70601c4ad50f577441d71322c0beea7b6cfbaa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76be46db72595b894a6e6da15e892d4a1f8f91cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76be46db72595b894a6e6da15e892d4a1f8f91cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76be46db72595b894a6e6da15e892d4a1f8f91cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76be46db72595b894a6e6da15e892d4a1f8f91cf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20b06addf9bfe928559f3bccca9e70485eec7c02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b06addf9bfe928559f3bccca9e70485eec7c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b06addf9bfe928559f3bccca9e70485eec7c02"}], "stats": {"total": 139, "additions": 137, "deletions": 2}, "files": [{"sha": "3d10b30f849db30fe177dabbd7dfc53dff1089b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76be46db72595b894a6e6da15e892d4a1f8f91cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76be46db72595b894a6e6da15e892d4a1f8f91cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76be46db72595b894a6e6da15e892d4a1f8f91cf", "patch": "@@ -1,3 +1,10 @@\n+2014-12-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64312\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_pieces): Use\n+\tvuse_ssa_val as callback to walk_non_aliased_vuses.\n+\t(vn_reference_lookup): Likewise.\n+\n 2014-12-15  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc/config/rs6000/rs6000.md (*add>mode>3_imm_dot,"}, {"sha": "af88c0aada983b04287de0340ff55090e4afa222", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76be46db72595b894a6e6da15e892d4a1f8f91cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76be46db72595b894a6e6da15e892d4a1f8f91cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76be46db72595b894a6e6da15e892d4a1f8f91cf", "patch": "@@ -1,3 +1,8 @@\n+2014-12-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64312\n+\t* g++.dg/torture/pr64312.C: New testcase.\n+\n 2014-12-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58882"}, {"sha": "dc3e95dbb9440453de089ab446373965b2c77337", "filename": "gcc/testsuite/g++.dg/torture/pr64312.C", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76be46db72595b894a6e6da15e892d4a1f8f91cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64312.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76be46db72595b894a6e6da15e892d4a1f8f91cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64312.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64312.C?ref=76be46db72595b894a6e6da15e892d4a1f8f91cf", "patch": "@@ -0,0 +1,123 @@\n+// { dg-do compile }\n+\n+template <typename C> struct A\n+{\n+  typedef typename C::iterator type;\n+};\n+template <typename T2> struct B\n+{\n+  typedef T2 type;\n+};\n+template <typename F2> struct L\n+{\n+  typedef typename B<F2>::type::type type;\n+};\n+template <typename C> struct M\n+{\n+  typedef typename L<A<C> >::type type;\n+};\n+class C\n+{\n+public:\n+  typedef int iterator;\n+};\n+template <class IteratorT> class D\n+{\n+public:\n+  typedef IteratorT iterator;\n+  template <class Iterator> D (Iterator p1, Iterator) : m_Begin (p1), m_End (0)\n+  {\n+  }\n+  IteratorT m_Begin;\n+  IteratorT m_End;\n+};\n+template <class IteratorT> class I : public D<IteratorT>\n+{\n+protected:\n+  template <class Iterator>\n+  I (Iterator p1, Iterator p2)\n+      : D<IteratorT> (p1, p2)\n+  {\n+  }\n+};\n+class F\n+{\n+public:\n+  int elems[];\n+  int *\n+  m_fn1 ()\n+  {\n+    return elems;\n+  }\n+};\n+class G\n+{\n+public:\n+  void *\n+  m_fn2 (int)\n+  {\n+    return m_buffer.m_fn1 ();\n+  }\n+  F m_buffer;\n+};\n+struct any_incrementable_iterator_interface\n+{\n+  virtual ~any_incrementable_iterator_interface () {}\n+};\n+class J : public any_incrementable_iterator_interface\n+{\n+public:\n+  J (int) : m_it () {}\n+  int m_it;\n+};\n+void *operator new(__SIZE_TYPE__, void *p2) { return p2; }\n+template <class T> typename M<T>::type begin (T) { return 0; }\n+template <class T> typename M<T>::type end (T) {}\n+template <class> class any_iterator\n+{\n+public:\n+  template <class WrappedIterator> any_iterator (WrappedIterator)\n+  {\n+    void *ptr = m_buffer.m_fn2 (0);\n+    m_impl = new (ptr) J (0);\n+  }\n+  ~any_iterator ()\n+  {\n+    if (m_impl)\n+      m_impl->~any_incrementable_iterator_interface ();\n+  }\n+  G m_buffer;\n+  any_incrementable_iterator_interface *m_impl;\n+};\n+template <class Reference> class K : public I<any_iterator<Reference> >\n+{\n+public:\n+  template <class WrappedRange>\n+  K (WrappedRange p1)\n+      : I<any_iterator<Reference> > (begin (p1), end (p1))\n+  {\n+  }\n+};\n+template <class Reference> struct H\n+{\n+  typedef K<Reference> type;\n+};\n+template <class, class, class, class, class, class TargetReference>\n+void\n+mix_values_impl ()\n+{\n+  C test_data;\n+  H<int>::type source_data (test_data);\n+  typename H<TargetReference>::type t2 = source_data;\n+}\n+template <class>\n+void\n+mix_values_driver ()\n+{\n+  mix_values_impl<int, int, int, int, int, int &> ();\n+}\n+void\n+mix_values ()\n+{\n+  mix_values_driver<int> ();\n+}"}, {"sha": "9902723b6732102c0d1e07edd516ea731a3f8631", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76be46db72595b894a6e6da15e892d4a1f8f91cf/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76be46db72595b894a6e6da15e892d4a1f8f91cf/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=76be46db72595b894a6e6da15e892d4a1f8f91cf", "patch": "@@ -2161,7 +2161,7 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n \t  (vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse,\n \t\t\t\t\t\t  vn_reference_lookup_2,\n \t\t\t\t\t\t  vn_reference_lookup_3,\n-\t\t\t\t\t\t  vn_valueize, &vr1);\n+\t\t\t\t\t\t  vuse_ssa_val, &vr1);\n       gcc_checking_assert (vr1.operands == shared_lookup_references);\n     }\n \n@@ -2214,7 +2214,7 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n \t(vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse,\n \t\t\t\t\t\tvn_reference_lookup_2,\n \t\t\t\t\t\tvn_reference_lookup_3,\n-\t\t\t\t\t\tvn_valueize, &vr1);\n+\t\t\t\t\t\tvuse_ssa_val, &vr1);\n       gcc_checking_assert (vr1.operands == shared_lookup_references);\n       if (wvnresult)\n \t{"}]}