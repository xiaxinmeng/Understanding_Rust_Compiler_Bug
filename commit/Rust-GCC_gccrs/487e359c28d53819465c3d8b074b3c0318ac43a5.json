{"sha": "487e359c28d53819465c3d8b074b3c0318ac43a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg3ZTM1OWMyOGQ1MzgxOTQ2NWMzZDhiMDc0YjNjMDMxOGFjNDNhNQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-09-18T16:43:27Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-09-18T16:43:27Z"}, "message": "avr.md: Tidy up empty \"\".\n\n\t* config/avr/avr.md: Tidy up empty \"\".  Fix C code indentation.\n\t* config/avr/avr-fixed.md: Ditto.\n\nFrom-SVN: r191436", "tree": {"sha": "03828568c060c9a0223c5d8aea8fc92c620ededc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03828568c060c9a0223c5d8aea8fc92c620ededc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/487e359c28d53819465c3d8b074b3c0318ac43a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487e359c28d53819465c3d8b074b3c0318ac43a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/487e359c28d53819465c3d8b074b3c0318ac43a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487e359c28d53819465c3d8b074b3c0318ac43a5/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4c059d5827f859cf240b50365f8057e41c5110b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c059d5827f859cf240b50365f8057e41c5110b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c059d5827f859cf240b50365f8057e41c5110b"}], "stats": {"total": 333, "additions": 147, "deletions": 186}, "files": [{"sha": "370dc2adb362a75d59e0db1e460fd5f9d5ff3e21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487e359c28d53819465c3d8b074b3c0318ac43a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487e359c28d53819465c3d8b074b3c0318ac43a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=487e359c28d53819465c3d8b074b3c0318ac43a5", "patch": "@@ -1,3 +1,8 @@\n+2012-09-18  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.md: Tidy up empty \"\".  Fix C code indentation.\n+\t* config/avr/avr-fixed.md: Ditto.\n+\n 2012-09-18  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* config/rs6000/rs6000.c (print_operand) <'c'>: Remove."}, {"sha": "c2ce01cb7da817a0c804bbd016df7d24da940f0b", "filename": "gcc/config/avr/avr-fixed.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487e359c28d53819465c3d8b074b3c0318ac43a5/gcc%2Fconfig%2Favr%2Favr-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487e359c28d53819465c3d8b074b3c0318ac43a5/gcc%2Fconfig%2Favr%2Favr-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-fixed.md?ref=487e359c28d53819465c3d8b074b3c0318ac43a5", "patch": "@@ -22,12 +22,12 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_mode_iterator ALL1Q [(QQ \"\") (UQQ \"\")])\n-(define_mode_iterator ALL2Q [(HQ \"\") (UHQ \"\")])\n-(define_mode_iterator ALL2A [(HA \"\") (UHA \"\")])\n-(define_mode_iterator ALL2QA [(HQ \"\") (UHQ \"\")\n-                              (HA \"\") (UHA \"\")])\n-(define_mode_iterator ALL4A [(SA \"\") (USA \"\")])\n+(define_mode_iterator ALL1Q  [QQ UQQ])\n+(define_mode_iterator ALL2Q  [HQ UHQ])\n+(define_mode_iterator ALL2A  [HA UHA])\n+(define_mode_iterator ALL2QA [HQ UHQ\n+                              HA UHA])\n+(define_mode_iterator ALL4A  [SA USA])\n \n (define_mode_iterator ALL2S [HQ HA])\n (define_mode_iterator ALL4S [SA SQ])\n@@ -38,22 +38,22 @@\n ;;; Conversions\n \n (define_mode_iterator FIXED_A\n-  [(QQ \"\") (UQQ \"\")\n-   (HQ \"\") (UHQ \"\") (HA \"\") (UHA \"\")\n-   (SQ \"\") (USQ \"\") (SA \"\") (USA \"\")\n-   (DQ \"\") (UDQ \"\") (DA \"\") (UDA \"\")\n-   (TA \"\") (UTA \"\")\n-   (QI \"\") (HI \"\") (SI \"\") (DI \"\")])\n+  [QQ UQQ\n+   HQ UHQ HA UHA\n+   SQ USQ SA USA\n+   DQ UDQ DA UDA\n+   TA UTA\n+   QI HI SI DI])\n \n ;; Same so that be can build cross products\n \n (define_mode_iterator FIXED_B\n-  [(QQ \"\") (UQQ \"\")\n-   (HQ \"\") (UHQ \"\") (HA \"\") (UHA \"\")\n-   (SQ \"\") (USQ \"\") (SA \"\") (USA \"\")\n-   (DQ \"\") (UDQ \"\") (DA \"\") (UDA \"\")\n-   (TA \"\") (UTA \"\")\n-   (QI \"\") (HI \"\") (SI \"\") (DI \"\")])\n+  [QQ UQQ\n+   HQ UHQ HA UHA\n+   SQ USQ SA USA\n+   DQ UDQ DA UDA\n+   TA UTA\n+   QI HI SI DI])\n \n (define_insn \"fract<FIXED_B:mode><FIXED_A:mode>2\"\n   [(set (match_operand:FIXED_A 0 \"register_operand\" \"=r\")"}, {"sha": "d1287703e14a89043707cfc8eb2f64d72d918f37", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 124, "deletions": 168, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487e359c28d53819465c3d8b074b3c0318ac43a5/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487e359c28d53819465c3d8b074b3c0318ac43a5/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=487e359c28d53819465c3d8b074b3c0318ac43a5", "patch": "@@ -220,26 +220,26 @@\n \n \n ;; Define mode iterators\n-(define_mode_iterator QIHI  [(QI \"\") (HI \"\")])\n-(define_mode_iterator QIHI2 [(QI \"\") (HI \"\")])\n-(define_mode_iterator QISI [(QI \"\") (HI \"\") (PSI \"\") (SI \"\")])\n-(define_mode_iterator QIDI [(QI \"\") (HI \"\") (PSI \"\") (SI \"\") (DI \"\")])\n-(define_mode_iterator HISI [(HI \"\") (PSI \"\") (SI \"\")])\n+(define_mode_iterator QIHI  [QI HI])\n+(define_mode_iterator QIHI2 [QI HI])\n+(define_mode_iterator QISI  [QI HI PSI SI])\n+(define_mode_iterator QIDI  [QI HI PSI SI DI])\n+(define_mode_iterator HISI  [HI PSI SI])\n \n-(define_mode_iterator ALL1 [(QI \"\") (QQ \"\") (UQQ \"\")])\n-(define_mode_iterator ALL2 [(HI \"\") (HQ \"\") (UHQ \"\") (HA \"\") (UHA \"\")])\n-(define_mode_iterator ALL4 [(SI \"\") (SQ \"\") (USQ \"\") (SA \"\") (USA \"\")])\n+(define_mode_iterator ALL1 [QI QQ UQQ])\n+(define_mode_iterator ALL2 [HI HQ UHQ HA UHA])\n+(define_mode_iterator ALL4 [SI SQ USQ SA USA])\n \n ;; All supported move-modes\n-(define_mode_iterator MOVMODE [(QI \"\") (HI \"\") (SI \"\") (SF \"\") (PSI \"\")\n-                               (QQ \"\") (UQQ \"\")\n-                               (HQ \"\") (UHQ \"\") (HA \"\") (UHA \"\")\n-                               (SQ \"\") (USQ \"\") (SA \"\") (USA \"\")])\n+(define_mode_iterator MOVMODE [QI QQ UQQ\n+                               HI HQ UHQ HA UHA\n+                               SI SQ USQ SA USA\n+                               SF PSI])\n \n ;; Supported ordered modes that are 2, 3, 4 bytes wide\n-(define_mode_iterator ORDERED234 [(HI \"\") (SI \"\") (PSI \"\")\n-                                  (HQ \"\") (UHQ \"\") (HA \"\") (UHA \"\")\n-                                  (SQ \"\") (USQ \"\") (SA \"\") (USA \"\")])\n+(define_mode_iterator ORDERED234 [HI SI PSI\n+                                  HQ UHQ HA UHA\n+                                  SQ USQ SA USA])\n \n ;; Define code iterators\n ;; Define two incarnations so that we can build the cross product.\n@@ -305,8 +305,8 @@\n                     gen_rtx_PLUS (Pmode, hard_frame_pointer_rtx, \n                                   gen_int_mode (STARTING_FRAME_OFFSET,\n                                                 Pmode)));\n-  /* This might change the hard frame pointer in ways that aren't\n-    apparent to early optimization passes, so force a clobber.  */\n+    /* ; This might change the hard frame pointer in ways that aren't\n+       ; apparent to early optimization passes, so force a clobber.  */\n     emit_clobber (hard_frame_pointer_rtx);\n     DONE;\n   })\n@@ -321,25 +321,25 @@\n    (use (match_operand 2 \"general_operand\"))\n    (use (match_operand 3 \"general_operand\"))]\n   \"\"\n-{\n-  rtx r_label = copy_to_reg (operands[1]);\n-  rtx r_fp = operands[3];\n-  rtx r_sp = operands[2];\n+  {\n+    rtx r_label = copy_to_reg (operands[1]);\n+    rtx r_fp = operands[3];\n+    rtx r_sp = operands[2];\n \n-  emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n+    emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n \n-  emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n+    emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n-  emit_move_insn (hard_frame_pointer_rtx, r_fp);\n-  emit_stack_restore (SAVE_NONLOCAL, r_sp);\n+    emit_move_insn (hard_frame_pointer_rtx, r_fp);\n+    emit_stack_restore (SAVE_NONLOCAL, r_sp);\n \n-  emit_use (hard_frame_pointer_rtx);\n-  emit_use (stack_pointer_rtx);\n+    emit_use (hard_frame_pointer_rtx);\n+    emit_use (stack_pointer_rtx);\n \n-  emit_indirect_jump (r_label);\n+    emit_indirect_jump (r_label);\n  \n-  DONE;\n-})\n+    DONE;\n+  })\n \n ;; \"pushqi1\"\n ;; \"pushqq1\"  \"pushuqq1\"\n@@ -353,44 +353,42 @@\n   [(set_attr \"length\" \"1,1\")])\n \n ;; All modes for a multi-byte push.  We must include complex modes here too,\n-;; lest emit_single_push_insn \"helpfully \" create the auto-inc itself.\n+;; lest emit_single_push_insn \"helpfully\" create the auto-inc itself.\n (define_mode_iterator MPUSH\n-  [(CQI \"\")\n-   (HI \"\") (CHI \"\")\n-   (PSI \"\")\n-   (SI \"\") (CSI \"\")\n-   (DI \"\") (CDI \"\")\n-   (SF \"\") (SC \"\")\n-   (HA \"\") (UHA \"\") (HQ \"\") (UHQ \"\")\n-   (SA \"\") (USA \"\") (SQ \"\") (USQ \"\")\n-   (DA \"\") (UDA \"\") (DQ \"\") (UDQ \"\")\n-   (TA \"\") (UTA \"\")])\n+  [CQI\n+   HI CHI HA UHA HQ UHQ\n+   SI CSI SA USA SQ USQ\n+   DI CDI DA UDA DQ UDQ\n+   TA UTA\n+   SF SC\n+   PSI])\n \n (define_expand \"push<mode>1\"\n   [(match_operand:MPUSH 0 \"\" \"\")]\n   \"\"\n-{\n-  int i;\n-  for (i = GET_MODE_SIZE (<MODE>mode) - 1; i >= 0; --i)\n-    {\n-      rtx part = simplify_gen_subreg (QImode, operands[0], <MODE>mode, i);\n-      if (part != const0_rtx)\n-        part = force_reg (QImode, part);\n-      emit_insn (gen_pushqi1 (part));\n-    }\n-  DONE;\n-})\n+  {\n+    int i;\n+    for (i = GET_MODE_SIZE (<MODE>mode) - 1; i >= 0; --i)\n+      {\n+        rtx part = simplify_gen_subreg (QImode, operands[0], <MODE>mode, i);\n+        if (part != const0_rtx)\n+          part = force_reg (QImode, part);\n+        emit_insn (gen_pushqi1 (part));\n+      }\n+    DONE;\n+  })\n \n ;; Notice a special-case when adding N to SP where N results in a\n ;; zero REG_ARGS_SIZE.  This is equivalent to a move from FP.\n (define_split\n-  [(set (reg:HI REG_SP) (match_operand:HI 0 \"register_operand\" \"\"))]\n+  [(set (reg:HI REG_SP)\n+        (match_operand:HI 0 \"register_operand\" \"\"))]\n   \"reload_completed\n    && frame_pointer_needed\n    && !cfun->calls_alloca\n    && find_reg_note (insn, REG_ARGS_SIZE, const0_rtx)\"\n-  [(set (reg:HI REG_SP) (reg:HI REG_Y))]\n-  \"\")\n+  [(set (reg:HI REG_SP)\n+        (reg:HI REG_Y))])\n \n ;;========================================================================\n ;; Move stuff around\n@@ -775,9 +773,9 @@\n         (match_operand:ALL1 1 \"even_register_operand\" \"\"))\n    (set (match_operand:ALL1 2 \"odd_register_operand\" \"\")\n         (match_operand:ALL1 3 \"odd_register_operand\" \"\"))]\n-  \"(AVR_HAVE_MOVW\n-    && REGNO (operands[0]) == REGNO (operands[2]) - 1\n-    && REGNO (operands[1]) == REGNO (operands[3]) - 1)\"\n+  \"AVR_HAVE_MOVW\n+   && REGNO (operands[0]) == REGNO (operands[2]) - 1\n+   && REGNO (operands[1]) == REGNO (operands[3]) - 1\"\n   [(set (match_dup 4)\n         (match_dup 5))]\n   {\n@@ -790,9 +788,9 @@\n         (match_operand:ALL1 1 \"odd_register_operand\" \"\"))\n    (set (match_operand:ALL1 2 \"even_register_operand\" \"\")\n         (match_operand:ALL1 3 \"even_register_operand\" \"\"))]\n-  \"(AVR_HAVE_MOVW\n-    && REGNO (operands[2]) == REGNO (operands[0]) - 1\n-    && REGNO (operands[3]) == REGNO (operands[1]) - 1)\"\n+  \"AVR_HAVE_MOVW\n+   && REGNO (operands[2]) == REGNO (operands[0]) - 1\n+   && REGNO (operands[3]) == REGNO (operands[1]) - 1\"\n   [(set (match_dup 4)\n         (match_dup 5))]\n   {\n@@ -812,8 +810,7 @@\n    && operands[1] != constm1_rtx\"\n   [(parallel [(set (match_dup 0)\n                    (match_dup 1))\n-              (clobber (match_dup 2))])]\n-  \"\")\n+              (clobber (match_dup 2))])])\n   \n ;; '*' because it is not used in rtl generation.\n (define_insn \"*reload_inpsi\"\n@@ -1481,9 +1478,7 @@\n    (set (reg:QI 22) (match_operand:QI 2 \"register_operand\" \"\"))\n    (parallel [(set (reg:QI 24) (mult:QI (reg:QI 24) (reg:QI 22)))\n               (clobber (reg:QI 22))])\n-   (set (match_operand:QI 0 \"register_operand\" \"\") (reg:QI 24))]\n-  \"\"\n-  \"\")\n+   (set (match_operand:QI 0 \"register_operand\" \"\") (reg:QI 24))])\n \n (define_insn \"*mulqi3_call\"\n   [(set (reg:QI 24) (mult:QI (reg:QI 24) (reg:QI 22)))\n@@ -1684,8 +1679,7 @@\n    (set (match_dup 0)\n         (plus:QI (mult:QI (match_dup 1)\n                           (match_dup 4))\n-                 (match_dup 3)))]\n-  \"\")\n+                 (match_dup 3)))])\n \n (define_insn_and_split \"*msubqi4.const\"\n   [(set (match_operand:QI 0 \"register_operand\"                    \"=r\")\n@@ -1702,8 +1696,7 @@\n    (set (match_dup 0)\n         (minus:QI (match_dup 3)\n                   (mult:QI (match_dup 1)\n-                           (match_dup 4))))]\n-  \"\")\n+                           (match_dup 4))))])\n \n \n ;******************************************************************************\n@@ -2213,9 +2206,7 @@\n    (parallel [(set (reg:HI 24) (mult:HI (reg:HI 24) (reg:HI 22)))\n               (clobber (reg:HI 22))\n               (clobber (reg:QI 21))])\n-   (set (match_operand:HI 0 \"register_operand\" \"\") (reg:HI 24))]\n-  \"\"\n-  \"\")\n+   (set (match_operand:HI 0 \"register_operand\" \"\") (reg:HI 24))])\n \n (define_insn \"*mulhi3_call\"\n   [(set (reg:HI 24) (mult:HI (reg:HI 24) (reg:HI 22)))\n@@ -2389,8 +2380,7 @@\n         (mult:SI (not:SI (zero_extend:SI (not:HI (reg:HI 26))))\n                  (reg:SI 18)))\n    (set (match_dup 0)\n-        (reg:SI 22))]\n-  \"\")\n+        (reg:SI 22))])\n \n ;; \"mulhisi3\"\n ;; \"umulhisi3\"\n@@ -2400,17 +2390,15 @@\n                             (any_extend:SI (match_operand:HI 2 \"register_operand\" \"\"))))\n               (clobber (reg:HI 26))\n               (clobber (reg:DI 18))])]\n-  \"AVR_HAVE_MUL\"\n-  \"\")\n+  \"AVR_HAVE_MUL\")\n \n (define_expand \"usmulhisi3\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n                    (mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"\"))\n                             (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"\"))))\n               (clobber (reg:HI 26))\n               (clobber (reg:DI 18))])]\n-  \"AVR_HAVE_MUL\"\n-  \"\")\n+  \"AVR_HAVE_MUL\")\n \n ;; \"*uumulqihisi3\" \"*uumulhiqisi3\" \"*uumulhihisi3\" \"*uumulqiqisi3\"\n ;; \"*usmulqihisi3\" \"*usmulhiqisi3\" \"*usmulhihisi3\" \"*usmulqiqisi3\"\n@@ -2482,8 +2470,7 @@\n               (clobber (reg:HI 22))])\n    (set (match_operand:HI 0 \"register_operand\" \"\")\n         (reg:HI 24))]\n-  \"AVR_HAVE_MUL\"\n-  \"\")\n+  \"AVR_HAVE_MUL\")\n \n \n (define_insn \"*mulsi3_call\"\n@@ -2577,8 +2564,7 @@\n               (clobber (reg:QI 22))\n               (clobber (reg:QI 23))])\n    (set (match_dup 0) (reg:QI 24))\n-   (set (match_dup 3) (reg:QI 25))]\n-  \"\")\n+   (set (match_dup 3) (reg:QI 25))])\n \n (define_insn \"*divmodqi4_call\"\n   [(set (reg:QI 24) (div:QI (reg:QI 24) (reg:QI 22)))\n@@ -2609,8 +2595,7 @@\n               (set (reg:QI 25) (umod:QI (reg:QI 24) (reg:QI 22)))\n               (clobber (reg:QI 23))])\n    (set (match_dup 0) (reg:QI 24))\n-   (set (match_dup 3) (reg:QI 25))]\n-  \"\")\n+   (set (match_dup 3) (reg:QI 25))])\n \n (define_insn \"*udivmodqi4_call\"\n   [(set (reg:QI 24) (udiv:QI (reg:QI 24) (reg:QI 22)))\n@@ -2641,8 +2626,7 @@\n               (clobber (reg:HI 26))\n               (clobber (reg:QI 21))])\n    (set (match_dup 0) (reg:HI 22))\n-   (set (match_dup 3) (reg:HI 24))]\n-  \"\") \n+   (set (match_dup 3) (reg:HI 24))])\n \n (define_insn \"*divmodhi4_call\"\n   [(set (reg:HI 22) (div:HI (reg:HI 24) (reg:HI 22)))\n@@ -2674,8 +2658,7 @@\n               (clobber (reg:HI 26))\n               (clobber (reg:QI 21))])\n    (set (match_dup 0) (reg:HI 22))\n-   (set (match_dup 3) (reg:HI 24))]\n-  \"\")\n+   (set (match_dup 3) (reg:HI 24))])\n \n (define_insn \"*udivmodhi4_call\"\n   [(set (reg:HI 22) (udiv:HI (reg:HI 24) (reg:HI 22)))\n@@ -2907,8 +2890,7 @@\n               (clobber (reg:HI 26))\n               (clobber (reg:HI 30))])\n    (set (match_dup 0) (reg:SI 18))\n-   (set (match_dup 3) (reg:SI 22))]\n-  \"\")\n+   (set (match_dup 3) (reg:SI 22))])\n \n (define_insn \"*divmodsi4_call\"\n   [(set (reg:SI 18) (div:SI (reg:SI 22) (reg:SI 18)))\n@@ -2940,8 +2922,7 @@\n               (clobber (reg:HI 26))\n               (clobber (reg:HI 30))])\n    (set (match_dup 0) (reg:SI 18))\n-   (set (match_dup 3) (reg:SI 22))]\n-  \"\")\n+   (set (match_dup 3) (reg:SI 22))])\n \n (define_insn \"*udivmodsi4_call\"\n   [(set (reg:SI 18) (udiv:SI (reg:SI 22) (reg:SI 18)))\n@@ -3609,8 +3590,7 @@\n   [(parallel [(set (match_dup 0)\n                    (ashift:ALL4 (match_dup 1)\n                                 (match_dup 2)))\n-              (clobber (match_dup 3))])]\n-  \"\")\n+              (clobber (match_dup 3))])])\n \n ;; \"*ashlsi3_const\"\n ;; \"*ashlsq3_const\"  \"*ashlusq3_const\"\n@@ -4351,7 +4331,7 @@\n   [(set (cc0)\n         (compare (neg:QI (match_operand:QI 0 \"register_operand\" \"r\"))\n                  (const_int 0)))]\n-  \"(!flag_wrapv && !flag_trapv && flag_strict_overflow)\"\n+  \"!flag_wrapv && !flag_trapv && flag_strict_overflow\"\n   \"cp __zero_reg__,%0\"\n   [(set_attr \"cc\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -4369,7 +4349,7 @@\n   [(set (cc0)\n         (compare (neg:HI (match_operand:HI 0 \"register_operand\" \"r\"))\n                  (const_int 0)))]\n-  \"(!flag_wrapv && !flag_trapv && flag_strict_overflow)\"\n+  \"!flag_wrapv && !flag_trapv && flag_strict_overflow\"\n   \"cp __zero_reg__,%A0\n \tcpc __zero_reg__,%B0\"\n [(set_attr \"cc\" \"compare\")\n@@ -4411,7 +4391,7 @@\n   [(set (cc0)\n         (compare (neg:SI (match_operand:SI 0 \"register_operand\" \"r\"))\n                  (const_int 0)))]\n-  \"(!flag_wrapv && !flag_trapv && flag_strict_overflow)\"\n+  \"!flag_wrapv && !flag_trapv && flag_strict_overflow\"\n   \"cp __zero_reg__,%A0\n \tcpc __zero_reg__,%B0\n \tcpc __zero_reg__,%C0\n@@ -4654,8 +4634,7 @@\n                                                 (const_int 7))\n                                (const_int 0))\n                            (label_ref (match_dup 1))\n-                           (pc)))]\n-  \"\")\n+                           (pc)))])\n \n (define_peephole2\n   [(set (cc0) (compare (match_operand:QI 0 \"register_operand\" \"\")\n@@ -4669,8 +4648,7 @@\n                                                 (const_int 7))\n                                (const_int 0))\n                            (label_ref (match_dup 1))\n-                           (pc)))]\n-  \"\")\n+                           (pc)))])\n \n (define_peephole2\n   [(parallel [(set (cc0) (compare (match_operand:HI 0 \"register_operand\" \"\")\n@@ -4683,8 +4661,7 @@\n   [(set (pc) (if_then_else (eq (and:HI (match_dup 0) (const_int -32768))\n                                (const_int 0))\n                            (label_ref (match_dup 1))\n-                           (pc)))]\n-  \"\")\n+                           (pc)))])\n \n (define_peephole2\n   [(parallel [(set (cc0) (compare (match_operand:HI 0 \"register_operand\" \"\")\n@@ -4697,8 +4674,7 @@\n   [(set (pc) (if_then_else (ne (and:HI (match_dup 0) (const_int -32768))\n                                (const_int 0))\n                            (label_ref (match_dup 1))\n-                           (pc)))]\n-  \"\")\n+                           (pc)))])\n \n (define_peephole2\n   [(parallel [(set (cc0) (compare (match_operand:SI 0 \"register_operand\" \"\")\n@@ -4712,7 +4688,7 @@\n                                (const_int 0))\n                            (label_ref (match_dup 1))\n                            (pc)))]\n-  \"operands[2] = GEN_INT (-2147483647 - 1);\")\n+  \"operands[2] = gen_int_mode (-2147483647 - 1, SImode);\")\n \n (define_peephole2\n   [(parallel [(set (cc0) (compare (match_operand:SI 0 \"register_operand\" \"\")\n@@ -4726,7 +4702,7 @@\n                                (const_int 0))\n                            (label_ref (match_dup 1))\n                            (pc)))]\n-  \"operands[2] = GEN_INT (-2147483647 - 1);\")\n+  \"operands[2] = gen_int_mode (-2147483647 - 1, SImode);\")\n \n ;; ************************************************************************\n ;; Implementation of conditional jumps here.\n@@ -4840,45 +4816,37 @@\n \n ;; call\n \n+;; Operand 1 not used on the AVR.\n+;; Operand 2 is 1 for tail-call, 0 otherwise.\n (define_expand \"call\"\n   [(parallel[(call (match_operand:HI 0 \"call_insn_operand\" \"\")\n                    (match_operand:HI 1 \"general_operand\" \"\"))\n-             (use (const_int 0))])]\n-  ;; Operand 1 not used on the AVR.\n-  ;; Operand 2 is 1 for tail-call, 0 otherwise.\n-  \"\"\n-  \"\")\n+             (use (const_int 0))])])\n \n+;; Operand 1 not used on the AVR.\n+;; Operand 2 is 1 for tail-call, 0 otherwise.\n (define_expand \"sibcall\"\n   [(parallel[(call (match_operand:HI 0 \"call_insn_operand\" \"\")\n                    (match_operand:HI 1 \"general_operand\" \"\"))\n-             (use (const_int 1))])]\n-  ;; Operand 1 not used on the AVR.\n-  ;; Operand 2 is 1 for tail-call, 0 otherwise.\n-  \"\"\n-  \"\")\n+             (use (const_int 1))])])\n \n ;; call value\n \n+;; Operand 2 not used on the AVR.\n+;; Operand 3 is 1 for tail-call, 0 otherwise.\n (define_expand \"call_value\"\n   [(parallel[(set (match_operand 0 \"register_operand\" \"\")\n                   (call (match_operand:HI 1 \"call_insn_operand\" \"\")\n                         (match_operand:HI 2 \"general_operand\" \"\")))\n-             (use (const_int 0))])]\n-  ;; Operand 2 not used on the AVR.\n-  ;; Operand 3 is 1 for tail-call, 0 otherwise.\n-  \"\"\n-  \"\")\n+             (use (const_int 0))])])\n \n+;; Operand 2 not used on the AVR.\n+;; Operand 3 is 1 for tail-call, 0 otherwise.\n (define_expand \"sibcall_value\"\n   [(parallel[(set (match_operand 0 \"register_operand\" \"\")\n                   (call (match_operand:HI 1 \"call_insn_operand\" \"\")\n                         (match_operand:HI 2 \"general_operand\" \"\")))\n-             (use (const_int 1))])]\n-  ;; Operand 2 not used on the AVR.\n-  ;; Operand 3 is 1 for tail-call, 0 otherwise.\n-  \"\"\n-  \"\")\n+             (use (const_int 1))])])\n \n (define_insn \"call_insn\"\n   [(parallel[(call (mem:HI (match_operand:HI 0 \"nonmemory_operand\" \"z,s,z,s\"))\n@@ -5069,11 +5037,11 @@\n          (label_ref (match_operand 2 \"\" \"\"))\n          (pc)))]\n   \"\"\n-{\n-  operands[3] = operands[2];\n-  operands[2] = GEN_INT (7);\n-  return avr_out_sbxx_branch (insn, operands);\n-}\n+  {\n+    operands[3] = operands[2];\n+    operands[2] = GEN_INT (7);\n+    return avr_out_sbxx_branch (insn, operands);\n+  }\n   [(set (attr \"length\")\n         (if_then_else (and (ge (minus (pc) (match_dup 2)) (const_int -2046))\n                            (le (minus (pc) (match_dup 2)) (const_int 2046)))\n@@ -5117,11 +5085,11 @@\n          (label_ref (match_operand 2 \"\" \"\"))\n          (pc)))]\n   \"\"\n-{\n-  operands[3] = operands[2];\n-  operands[2] = GEN_INT (7);\n-  return avr_out_sbxx_branch (insn, operands);\n-}\n+  {\n+    operands[3] = operands[2];\n+    operands[2] = GEN_INT (7);\n+    return avr_out_sbxx_branch (insn, operands);\n+  }\n   [(set (attr \"length\")\n         (if_then_else (and (ge (minus (pc) (match_dup 2)) (const_int -2046))\n                            (le (minus (pc) (match_dup 2)) (const_int 2045)))\n@@ -5479,29 +5447,29 @@\n \n (define_insn \"return_from_epilogue\"\n   [(return)]\n-  \"(reload_completed \n-    && cfun->machine \n-    && !(cfun->machine->is_interrupt || cfun->machine->is_signal)\n-    && !cfun->machine->is_naked)\"\n+  \"reload_completed \n+   && cfun->machine \n+   && !(cfun->machine->is_interrupt || cfun->machine->is_signal)\n+   && !cfun->machine->is_naked\"\n   \"ret\"\n   [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"return_from_interrupt_epilogue\"\n   [(return)]\n-  \"(reload_completed \n-    && cfun->machine \n-    && (cfun->machine->is_interrupt || cfun->machine->is_signal)\n-    && !cfun->machine->is_naked)\"\n+  \"reload_completed \n+   && cfun->machine \n+   && (cfun->machine->is_interrupt || cfun->machine->is_signal)\n+   && !cfun->machine->is_naked\"\n   \"reti\"\n   [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"return_from_naked_epilogue\"\n   [(return)]\n-  \"(reload_completed \n-    && cfun->machine \n-    && cfun->machine->is_naked)\"\n+  \"reload_completed \n+   && cfun->machine \n+   && cfun->machine->is_naked\"\n   \"\"\n   [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"0\")])\n@@ -5805,8 +5773,7 @@\n   [(set (reg:QI 24)\n         (popcount:QI (reg:QI 24)))\n    (set (reg:QI 25)\n-        (const_int 0))]\n-  \"\")\n+        (const_int 0))])\n \n ;; Count Leading Zeros\n \n@@ -5817,9 +5784,7 @@\n                    (clz:HI (reg:HI 24)))\n               (clobber (reg:QI 26))])\n    (set (match_operand:HI 0 \"register_operand\" \"\")\n-        (reg:HI 24))]\n-  \"\"\n-  \"\")\n+        (reg:HI 24))])\n \n (define_expand \"clzsi2\"\n   [(set (reg:SI 22)\n@@ -5863,9 +5828,7 @@\n                    (ctz:HI (reg:HI 24)))\n               (clobber (reg:QI 26))])\n    (set (match_operand:HI 0 \"register_operand\" \"\")\n-        (reg:HI 24))]\n-  \"\"\n-  \"\")\n+        (reg:HI 24))])\n \n (define_expand \"ctzsi2\"\n   [(set (reg:SI 22)\n@@ -5911,9 +5874,7 @@\n                    (ffs:HI (reg:HI 24)))\n               (clobber (reg:QI 26))])\n    (set (match_operand:HI 0 \"register_operand\" \"\")\n-        (reg:HI 24))]\n-  \"\"\n-  \"\")\n+        (reg:HI 24))])\n \n (define_expand \"ffssi2\"\n   [(set (reg:SI 22)\n@@ -5970,9 +5931,7 @@\n    (set (reg:SI 22)\n         (bswap:SI (reg:SI 22)))\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n-        (reg:SI 22))]\n-  \"\"\n-  \"\")\n+        (reg:SI 22))])\n \n (define_insn \"*bswapsi2.libgcc\"\n   [(set (reg:SI 22)\n@@ -6275,8 +6234,7 @@\n                          (match_operand:QI 1 \"const1_operand\" \"\")        ; width\n                          (match_operand:QI 2 \"const_0_to_7_operand\" \"\")) ; pos\n         (match_operand:QI 3 \"nonmemory_operand\" \"\"))]\n-  \"optimize\"\n-  \"\")\n+  \"optimize\")\n \n ;; Insert bit $2.0 into $0.$1\n (define_insn \"*insv.reg\"\n@@ -6341,9 +6299,7 @@\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n         (zero_extract:QI (match_operand:QI 1 \"register_operand\"  \"\")\n                          (match_operand:QI 2 \"const1_operand\" \"\")\n-                         (match_operand:QI 3 \"const_0_to_7_operand\" \"\")))]\n-  \"\"\n-  \"\")\n+                         (match_operand:QI 3 \"const_0_to_7_operand\" \"\")))])\n \n (define_insn \"*extzv\"\n   [(set (match_operand:QI 0 \"register_operand\"                   \"=*d,*d,*d,*d,r\")"}]}