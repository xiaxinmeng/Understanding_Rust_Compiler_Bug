{"sha": "7254a78cf4c419a9b9361289d8c535130cf1dfd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1NGE3OGNmNGM0MTlhOWI5MzYxMjg5ZDhjNTM1MTMwY2YxZGZkMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-03T16:40:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-03T16:43:32Z"}, "message": "c++: Testcases [PR 98115]\n\nThese two testcases provide coverage for 98115, which doesn't trigger on all hosts.\n\n\tPR c++/98115\n\tPR c++/98116\n\tgcc/testsuite/\n\t* g++.dg/template/pr98115.C: New.\n\t* g++.dg/template/pr98116.C: New.", "tree": {"sha": "fb509f13d9a7c0fa42ddefcb3f9b88053d2a941a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb509f13d9a7c0fa42ddefcb3f9b88053d2a941a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7254a78cf4c419a9b9361289d8c535130cf1dfd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7254a78cf4c419a9b9361289d8c535130cf1dfd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7254a78cf4c419a9b9361289d8c535130cf1dfd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7254a78cf4c419a9b9361289d8c535130cf1dfd0/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17c9cf3c17651950bd4bfefcbe15440fa2155810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c9cf3c17651950bd4bfefcbe15440fa2155810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c9cf3c17651950bd4bfefcbe15440fa2155810"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "0bfc57ab88e4e2150548741e08f30da742341a80", "filename": "gcc/testsuite/g++.dg/template/pr98115.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7254a78cf4c419a9b9361289d8c535130cf1dfd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98115.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7254a78cf4c419a9b9361289d8c535130cf1dfd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98115.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98115.C?ref=7254a78cf4c419a9b9361289d8c535130cf1dfd0", "patch": "@@ -0,0 +1,4 @@\n+// PR 98115, dependent array types lead to specialization issues\n+\n+template <class> class Stringify;\n+template <long N> class Stringify<const char[N]>;"}, {"sha": "d3398d2238c4b2c1be9f41bf6490ef72a2a3edd7", "filename": "gcc/testsuite/g++.dg/template/pr98116.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7254a78cf4c419a9b9361289d8c535130cf1dfd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98116.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7254a78cf4c419a9b9361289d8c535130cf1dfd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98116.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98116.C?ref=7254a78cf4c419a9b9361289d8c535130cf1dfd0", "patch": "@@ -0,0 +1,29 @@\n+// PR 98116, ICE with stripping typedef array type\n+// { dg-do compile { target c++11 } }\n+namespace std {\n+struct is_convertible;\n+template <typename _Tp> using remove_pointer_t = typename _Tp ::type;\n+template <bool> struct enable_if;\n+template <typename> void declval();\n+template <bool _Cond> using enable_if_t = typename enable_if<_Cond>::type;\n+template <typename, typename> class Trans_NS___cxx11_basic_string {\n+  long _M_string_length;\n+};\n+} // namespace std\n+struct string16_char_traits;\n+template class std::Trans_NS___cxx11_basic_string<unsigned short,\n+                                                  string16_char_traits>;\n+template <typename, typename> using IsLegalDataConversion = std::is_convertible;\n+template <typename Container, typename T>\n+using ContainerHasConvertibleData = IsLegalDataConversion<\n+    std::remove_pointer_t<decltype(std::declval<Container>)>, T>;\n+template <typename Array, typename T, long>\n+using EnableIfSpanCompatibleArray =\n+    std::enable_if_t<ContainerHasConvertibleData<Array, T>::value>;\n+template <int Extent> class span {\n+  template <long N, EnableIfSpanCompatibleArray<\n+                        const std::Trans_NS___cxx11_basic_string<\n+                            unsigned short, string16_char_traits>[N],\n+                        std::Trans_NS___cxx11_basic_string<short, int>, Extent>>\n+  span();\n+};"}]}