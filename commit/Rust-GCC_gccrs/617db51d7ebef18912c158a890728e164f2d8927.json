{"sha": "617db51d7ebef18912c158a890728e164f2d8927", "node_id": "C_kwDOANBUbNoAKDYxN2RiNTFkN2ViZWYxODkxMmMxNThhODkwNzI4ZTE2NGYyZDg5Mjc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-15T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-15T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "5b5ccd6cbfb0c59d2609b140b2349cb602a9276f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b5ccd6cbfb0c59d2609b140b2349cb602a9276f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/617db51d7ebef18912c158a890728e164f2d8927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/617db51d7ebef18912c158a890728e164f2d8927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/617db51d7ebef18912c158a890728e164f2d8927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/617db51d7ebef18912c158a890728e164f2d8927/comments", "author": null, "committer": null, "parents": [{"sha": "952b7dbb418198f86d7829aaf9d7f9fc7714a8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952b7dbb418198f86d7829aaf9d7f9fc7714a8b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952b7dbb418198f86d7829aaf9d7f9fc7714a8b3"}], "stats": {"total": 585, "additions": 584, "deletions": 1}, "files": [{"sha": "e7382a5bae9a20640895ca9debf6cfe6e817772a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,116 @@\n+2022-01-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* ipa-param-manipulation.c (ipa_dump_adjusted_parameters): Dump\n+\treverse flag as \"reverse\" for the sake of consistency.\n+\t* ipa-sra.c: Fix copyright year.\n+\t(ipa_sra_function_summaries::duplicate): Copy the reverse flag.\n+\t(dump_isra_access): Tweak dump line.\n+\t(isra_write_node_summary): Write the reverse flag.\n+\t(isra_read_node_info): Read it.\n+\t(pull_accesses_from_callee): Test its consistency and copy it.\n+\n+2022-01-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/104026\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Initialize\n+\tpartial_load_store_bias.\n+\n+2022-01-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101475\n+\t* pointer-query.cc (handle_component_ref): Use the size of\n+\tthe enclosing object if it's smaller than the member.\n+\n+2022-01-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n+2022-01-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*add<mode>_1_slp\"):\n+\tMark alternative 1 output operand earlyclobbered.\n+\t(*sub<mode>_1_slp): Ditto.\n+\t(*and<mode>_1_slp): Ditto.\n+\t(*<code><mode>_1_slp): Ditto.\n+\t(*neg<mode>_1_slp): Ditto.\n+\t(*one_cmpl<mode>_1_slp): Ditto.\n+\t(*ashl<mode>3_1_slp): Ditto.\n+\t(*<insn><mode>3_1_slp): Ditto.\n+\t(*<insn><mode>3_1_slp): Ditto.\n+\n+2022-01-14  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/104015\n+\t* tree-vect-loop.c (vect_analyze_loop): Check\n+\tparam_vect_partial_vector_usage for supports_partial_vectors.\n+\n+2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/89074\n+\t* fold-const.c (address_compare): Punt on comparison of address of\n+\tone object with address of end of another object if\n+\tfolding_initializer.\n+\n+2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98737\n+\t* tree-ssa-forwprop.c (simplify_builtin_call): Canonicalize\n+\t__atomic_fetch_op (p, x, y) op x into __atomic_op_fetch (p, x, y)\n+\tand __atomic_op_fetch (p, x, y) iop x into\n+\t__atomic_fetch_op (p, x, y).\n+\n+2022-01-14  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.h (DWARF_FRAME_REGNUM): Update definition.\n+\t(DWARF_FRAME_RETURN_COLUMN): Use RETURN_ADDR_REGNUM macro.\n+\t(INCOMING_RETURN_ADDR_RTX): Likewise.\n+\t(DWARF_ALT_FRAME_RETURN_COLUMN): Define.\n+\n+2022-01-14  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_compute_frame_size): Remove condition when\n+\tcomputin checking accumulator regs.\n+\t(arc_expand_prologue): Update comments.\n+\t(arc_expand_epilogue): Likewise.\n+\n+2022-01-14  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_v1ti_to_ti): Use force_reg.\n+\t(ix86_expand_ti_to_v1ti): Use force_reg.\n+\t(ix86_expand_v1ti_shift): Use force_reg.\n+\t(ix86_expand_v1ti_rotate): Use force_reg.\n+\t(ix86_expand_v1ti_ashiftrt): Provide new three operation\n+\timplementations for shifts by 111..126 bits.  Use force_reg.\n+\n+2022-01-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* common/config/arm/arm-common.c (arm_target_mode): Fix\n+\twarning: unterminated quoting directive [-Wformat=].\n+\n+2022-01-14  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\tPR tree-optimization/104009\n+\t* tree-object-size.c (compute_builtin_object_size): Bail out on\n+\tnegative offset.\n+\t(plus_stmt_object_size): Return maximum of wholesize and minimum\n+\tof 0 for negative offset.\n+\n+2022-01-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/104001\n+\tPR target/94790\n+\tPR target/104014\n+\t* config/i386/i386.md (*xor2andn): Refine predicate of\n+\toperands[0] from nonimmediate_operand to\n+\tregister_operand, remove TARGET_AVX512BW from condition.\n+\n+2022-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/extend.texi (Function Attributes): Note that \"tainted_args\" can\n+\tbe used on field decls.\n+\t(Common Function Attributes): Add entry on \"tainted_args\" attribute.\n+\n 2022-01-13  Anthony Sharp  <anthonysharp15@gmail.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "52fea2ecbbc3ed98a874e9cb2aee4b37847f3cb2", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1 +1 @@\n-20220114\n+20220115"}, {"sha": "6fc5e6eb9b1981ebe22486e6feaa60480616f276", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,9 @@\n+2022-01-14  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR ada/104027\n+\t* gnat1drv.adb (Gnat1drv): After Back_End.Gen_Or_Update_Object_File\n+\tgoto End_Of_Program.\n+\n 2022-01-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils2.c (build_binary_op) <EQ_EXPR>: Relax a"}, {"sha": "d6fa09c4f73e6b0dbe1428c5c393181cba1d90e6", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,33 @@\n+2022-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sm-taint.cc (taint_state_machine::combine_states): Handle combination\n+\tof has_ub and has_lb.\n+\n+2022-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104029\n+\t* sm-taint.cc (taint_state_machine::alt_get_inherited_state):\n+\tRemove gcc_unreachable from default case for unary ops.\n+\n+2022-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc: Include \"stringpool.h\", \"attribs.h\", and\n+\t\"tree-dfa.h\".\n+\t(mark_params_as_tainted): New.\n+\t(class tainted_args_function_custom_event): New.\n+\t(class tainted_args_function_info): New.\n+\t(exploded_graph::add_function_entry): Handle functions with\n+\t\"tainted_args\" attribute.\n+\t(class tainted_args_field_custom_event): New.\n+\t(class tainted_args_callback_custom_event): New.\n+\t(class tainted_args_call_info): New.\n+\t(add_tainted_args_callback): New.\n+\t(add_any_callbacks): New.\n+\t(exploded_graph::build_initial_worklist): Likewise.\n+\t(exploded_graph::build_initial_worklist): Find callbacks that are\n+\treachable from global initializers, calling add_any_callbacks on\n+\tthem.\n+\n 2022-01-12  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/103940"}, {"sha": "c25f86fe740e1312080802ad8bf2cc239cbadbde", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,8 @@\n+2022-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-attribs.c (c_common_attribute_table): Add \"tainted_args\".\n+\t(handle_tainted_args_attribute): New.\n+\n 2022-01-13  Anthony Sharp  <anthonysharp15@gmail.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "8463f0d4ca89d582e9f6ab0559070918932da402", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,9 @@\n+2022-01-14  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR c++/103705\n+\t* c-typeck.c (c_finish_omp_clauses): Also continue peeling off of\n+\touter node for ARRAY_REFs.\n+\n 2022-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR objc/103639"}, {"sha": "151979a29a5e972d9eb6c5215bb8402117fddfee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,19 @@\n+2022-01-14  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR c++/103705\n+\t* semantics.c (finish_omp_clauses): Also continue peeling off of\n+\touter node for ARRAY_REFs.\n+\n+2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103991\n+\t* cp-objcp-common.c (cxx_block_may_fallthru) <case IF_STMT>: For\n+\tIF_STMT_CONSTEXPR_P with constant false or true condition only\n+\tcheck if the taken clause may fall through.\n+\t* cp-gimplify.c (genericize_if_stmt): For consteval if, revert\n+\tto r12-5638^ behavior if then_ block can't fall through.  For\n+\tconstexpr if, revert to r12-5638^ behavior.\n+\n 2022-01-13  Anthony Sharp  <anthonysharp15@gmail.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "99ab840cd43f8fb139ab5a708b9aece1e454cb08", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,15 @@\n+2022-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/99256\n+\t* intrinsic.c: Do not check formal argument type when checking\n+\targuments of intrinsics for alternate return specifiers.\n+\n+2022-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103782\n+\t* expr.c (gfc_simplify_expr): Adjust logic for when to scalarize a\n+\tcall of an intrinsic which may have been overloaded.\n+\n 2022-01-13  Hafiz Abid Qadeer  <abidh@codesourcery.com>\n \n \t* dump-parse-tree.c (show_omp_clauses): Handle OMP_LIST_ALLOCATE."}, {"sha": "3c3b3cc43dccc32a546da573bad64919473ca179", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,134 @@\n+2022-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/taint-merger.c: New test.\n+\n+2022-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104029\n+\t* gcc.dg/analyzer/pr104029.c: New test.\n+\t* gcc.dg/analyzer/taint-ops.c: New test.\n+\n+2022-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/99256\n+\t* gfortran.dg/altreturn_11.f90: New test.\n+\n+2022-01-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/lto25.adb: New test.\n+\t* gnat.dg/opt96.adb: Likewise.\n+\t* gnat.dg/opt96_pkg.ads, gnat.dg/opt96_pkg.adb: New helper.\n+\n+2022-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103782\n+\t* gfortran.dg/overload_4.f90: New test.\n+\n+2022-01-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101475\n+\t* gcc.dg/Wstringop-overflow-15.c: Remove xfails.\n+\t* gcc.dg/Wstringop-overflow-68.c: Adjust, remove xfails.\n+\t* gcc.dg/Wstringop-overflow-88.c: New test.\n+\n+2022-01-14  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-28.c: New test.\n+\n+2022-01-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/Walloca-larger-than.c: Fix typo.\n+\n+2022-01-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/cpp0x/pr56868.cpp: Moved to...\n+\t* g++.dg/cpp0x/pr56868.C: ...here.\n+\t* gcc.dg/torture/pr57993-2.cpp: Moved to...\n+\t* g++.dg/torture/pr57993-2.C: ...here.\n+\n+2022-01-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/Walloca-larger-than.C: Moved to...\n+\t* c-c++-common/Walloca-larger-than.c: ...here.\n+\n+2022-01-14  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR c++/103705\n+\t* c-c++-common/gomp/pr103705.c: New test.\n+\n+2022-01-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/vect/pr99149.cc: Remove executable mode.\n+\t* g++.dg/vect/pr99220.cc: Likewise.\n+\t* g++.target/i386/avx512vl-pr100738-1.C: Likewise.\n+\t* g++.target/i386/pr100738-1.C: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-2.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-3.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-3-1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-3-2.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-3-3.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-3-4.c: Likewise.\n+\t* gcc.target/i386/pr101796-1.c: Likewise.\n+\t* gcc.target/i386/pr94790-1.c: Likewise.\n+\t* gcc.target/i386/pr94790-2.c: Likewise.\n+\t* gcc.target/powerpc/mma-double-test.c: Likewise.\n+\t* gcc.target/powerpc/mma-single-test.c: Likewise.\n+\t* gdc.test/fail_compilation/constraints_aggr.d: Likewise.\n+\t* gdc.test/fail_compilation/constraints_defs.d: Likewise.\n+\t* gdc.test/fail_compilation/constraints_func1.d: Likewise.\n+\t* gdc.test/fail_compilation/constraints_func2.d: Likewise.\n+\t* gdc.test/fail_compilation/constraints_func3.d: Likewise.\n+\t* gdc.test/fail_compilation/constraints_func4.d: Likewise.\n+\t* gdc.test/fail_compilation/constraints_tmpl.d: Likewise.\n+\t* gdc.test/fail_compilation/imports/constraints.d: Likewise.\n+\n+2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103991\n+\t* g++.dg/warn/Wreturn-type-13.C: New test.\n+\n+2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/89074\n+\t* g++.dg/cpp1y/constexpr-89074-1.C: New test.\n+\n+2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98737\n+\t* gcc.dg/tree-ssa/pr98737-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr98737-2.c: New test.\n+\n+2022-01-14  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/cancel-1.c: New file.\n+\n+2022-01-14  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\tPR tree-optimization/104009\n+\t* gcc.dg/builtin-object-size-1.c (test10): New test.\n+\t* gcc.dg/builtin-object-size-3.c (test10): Likewise.\n+\t(test9): Expect zero size for negative offsets.\n+\t* gcc.dg/builtin-object-size-4.c (test8): Likewise.\n+\t* gcc.dg/builtin-object-size-5.c (test7): Drop test for\n+\t__builtin_object_size.\n+\n+2022-01-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr104001.c: New test.\n+\n+2022-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/attr-tainted_args-1.c: New test.\n+\t* gcc.dg/analyzer/attr-tainted_args-misuses.c: New test.\n+\t* gcc.dg/analyzer/taint-CVE-2011-2210-1.c: New test.\n+\t* gcc.dg/analyzer/taint-CVE-2020-13143-1.c: New test.\n+\t* gcc.dg/analyzer/taint-CVE-2020-13143-2.c: New test.\n+\t* gcc.dg/analyzer/taint-CVE-2020-13143.h: New test.\n+\t* gcc.dg/analyzer/taint-alloc-3.c: New test.\n+\t* gcc.dg/analyzer/taint-alloc-4.c: New test.\n+\t* gcc.dg/analyzer/test-uaccess.h: New test.\n+\n 2022-01-13  Anthony Sharp  <anthonysharp15@gmail.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "6ecc75c3c4229def63c7995f3d536b170a796fb5", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,8 @@\n+2022-01-14  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/linux-unwind.h (arc_fallback_frame_state): Use\n+\tDWARF_ALT_FRAME_RETURN_COLUMN macro.\n+\n 2022-01-04  Florian Weimer  <fweimer@redhat.com>\n \n \t* unwind-dw2-fde-dip.c (_Unwind_Find_FDE): Call _dl_find_object"}, {"sha": "b4f45130849d42db2fd5c9b8e370b49abd34ab4f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,10 @@\n+2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libfortran/104006\n+\t* Makefile.am (BUILT_SOURCES): Don't include $(version_dep).\n+\t(clean-local): Remove $(version_dep).\n+\t* Makefile.in: Regenerated.\n+\n 2022-01-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libfortran/104006"}, {"sha": "677f3436d14743a1a30fe331025ddaa882530790", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617db51d7ebef18912c158a890728e164f2d8927/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617db51d7ebef18912c158a890728e164f2d8927/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=617db51d7ebef18912c158a890728e164f2d8927", "patch": "@@ -1,3 +1,255 @@\n+2022-01-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* testsuite/22_locale/numpunct/members/char/3.cc:\n+\tRequire pt_PT locale instead of nl_NL.\n+\t(test02): Use pt_PT locale instead of nl_NL.\n+\n+2022-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/91260\n+\tPR libstdc++/91383\n+\tPR libstdc++/95065\n+\t* include/backward/binders.h (bind1st, bind2nd): Add deprecated\n+\tattribute.\n+\t* include/bits/refwrap.h (_Maybe_unary_or_binary_function):\n+\tDisable deprecated warnings for base classes.\n+\t(_Reference_wrapper_base): Likewise.\n+\t* include/bits/shared_ptr_base.h (_Sp_owner_less): Likewise.\n+\t* include/bits/stl_bvector.h (_Bit_iterator_base): Likewise.\n+\t* include/bits/stl_function.h (unary_function, binary_function):\n+\tAdd deprecated attribute.\n+\t(unary_negate, not1, binary_negate, not2, ptr_fun)\n+\t(pointer_to_unary_function, pointer_to_binary_function)\n+\t(mem_fun_t, const_mem_fun_t, mem_fun_ref_t, const_mem_fun_ref_t)\n+\t(mem_fun1_t, const_mem_fun1_t, mem_fun_ref1_t)\n+\t(const_mem_fun1_ref_t, mem_fun, mem_fun_ref): Add deprecated\n+\tattributes.\n+\t* include/bits/stl_iterator.h: Disable deprecated warnings for\n+\tstd::iterator base classes.\n+\t* include/bits/stl_iterator_base_types.h (iterator): Add\n+\tdeprecated attribute.\n+\t* include/bits/stl_map.h (map::value_compare): Disable\n+\tdeprecated warnings for base class.\n+\t* include/bits/stl_multimap.h (multimap::value_compare):\n+\tLikewise.\n+\t* include/bits/stl_raw_storage_iter.h (raw_storage_iterator):\n+\tAdd deprecated attribute.\n+\t* include/bits/stl_tempbuf.h (get_temporary_buffer): Likewise.\n+\t* include/bits/stream_iterator.h: Disable deprecated warnings.\n+\t* include/bits/streambuf_iterator.h: Likewise.\n+\t* include/ext/bitmap_allocator.h: Remove unary_function base\n+\tclasses.\n+\t* include/ext/functional: Disable deprecated warnings.\n+\t* include/ext/rope: Likewise.\n+\t* include/ext/throw_allocator.h: Likewise.\n+\t* include/std/type_traits (result_of): Add deprecated attribute.\n+\t* include/tr1/functional: Disable deprecated warnings.\n+\t* include/tr1/functional_hash.h: Likewise.\n+\t* testsuite/20_util/function_objects/binders/1.cc: Add\n+\t-Wno-disable-deprecations.\n+\t* testsuite/20_util/function_objects/binders/3113.cc: Likewise.\n+\t* testsuite/20_util/function_objects/constexpr.cc: Add\n+\tdg-warning.\n+\t* testsuite/20_util/raw_storage_iterator/base.cc: Likewise.\n+\t* testsuite/20_util/raw_storage_iterator/dr2127.cc: Likewise.\n+\t* testsuite/20_util/raw_storage_iterator/requirements/base_classes.cc:\n+\tLikewise.\n+\t* testsuite/20_util/raw_storage_iterator/requirements/explicit_instantiation/1.cc:\n+\tLikewise.\n+\t* testsuite/20_util/raw_storage_iterator/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/reference_wrapper/24803.cc:\n+\tLikewise.\n+\t* testsuite/20_util/reference_wrapper/typedefs.cc: Enable for\n+\tC++20 and check for absence of nested types.\n+\t* testsuite/20_util/shared_ptr/comparison/less.cc: Remove\n+\tstd::binary_function base class.\n+\t* testsuite/20_util/temporary_buffer.cc: Add dg-warning.\n+\t* testsuite/21_strings/basic_string/cons/char/69092.cc: Remove\n+\tstd::iterator base class.\n+\t* testsuite/24_iterators/back_insert_iterator/requirements/base_classes.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/front_insert_iterator/requirements/base_classes.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/insert_iterator/requirements/base_classes.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/istream_iterator/requirements/base_classes.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/istreambuf_iterator/92285.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/istreambuf_iterator/requirements/base_classes.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/ostream_iterator/requirements/base_classes.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/ostreambuf_iterator/requirements/base_classes.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/reverse_iterator/requirements/base_classes.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/copy/34595.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/minmax/3.cc: Remove std::binary_function\n+\tbase class.\n+\t* testsuite/25_algorithms/all_of/requirements/explicit_instantiation/2.cc:\n+\tDisable deprecated warnings.\n+\t* testsuite/25_algorithms/all_of/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/any_of/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/any_of/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/count_if/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/count_if/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/find_end/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/find_end/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/find_first_of/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/find_first_of/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/find_if/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/find_if/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/find_if_not/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/find_if_not/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/for_each/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/for_each/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/is_partitioned/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/is_partitioned/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/is_permutation/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/is_permutation/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/none_of/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/none_of/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/partition/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/partition/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/partition_copy/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/partition_copy/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/partition_point/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/partition_point/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/random_shuffle/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/random_shuffle/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/remove_copy_if/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/remove_copy_if/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/remove_if/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/remove_if/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/replace_copy_if/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/replace_copy_if/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/replace_if/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/replace_if/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/search/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/search/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/search_n/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/search_n/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/stable_partition/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/stable_partition/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/transform/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/transform/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/9178.cc: Add\n+\tdg-warning.\n+\t* testsuite/ext/pb_ds/example/priority_queue_erase_if.cc:\n+\tLikewise.\n+\t* testsuite/ext/pb_ds/example/priority_queue_split_join.cc:\n+\tLikewise.\n+\t* testsuite/tr1/3_function_objects/reference_wrapper/typedefs.cc:\n+\tDisable deprecated warnings.\n+\t* testsuite/tr1/6_containers/hash/requirements/base_classes.cc:\n+\tLikewise.\n+\t* testsuite/util/regression/trait/erase_if_fn.hpp: Remove\n+\tstd::unary_function base classes.\n+\t* testsuite/util/testsuite_iterators.h (output_iterator_wrapper):\n+\tRemove std::iterator base classes.\n+\n+2022-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/shared_ptr.h (__cpp_lib_shared_ptr_weak_type):\n+\tCorrect type of macro value.\n+\t(shared_ptr): Add additional friend declarations.\n+\t(make_shared, allocate_shared): Constrain existing overloads and\n+\tremove static_assert.\n+\t* include/bits/shared_ptr_base.h (__cpp_lib_smart_ptr_for_overwrite):\n+\tNew macro.\n+\t(_Sp_counted_ptr_inplace<T, Alloc, Lp>): New partial\n+\tspecialization for use with make_shared_for_overwrite.\n+\t(__cpp_lib_shared_ptr_arrays): Update value for C++20.\n+\t(_Sp_counted_array_base): New class template.\n+\t(_Sp_counted_array): New class template.\n+\t(__shared_count(_Tp*&, const _Sp_counted_array_base&, _Init)):\n+\tNew constructor for allocating shared arrays.\n+\t(__shared_ptr(const _Sp_counted_array_base&, _Init)): Likewise.\n+\t* include/std/version (__cpp_lib_shared_ptr_weak_type): Correct\n+\ttype.\n+\t(__cpp_lib_shared_ptr_arrays): Update value for C++20.\n+\t(__cpp_lib_smart_ptr_for_overwrite): New macro.\n+\t* testsuite/20_util/shared_ptr/creation/99006.cc: Adjust\n+\texpected errors.\n+\t* testsuite/20_util/shared_ptr/creation/array.cc: New test.\n+\t* testsuite/20_util/shared_ptr/creation/overwrite.cc: New test.\n+\t* testsuite/20_util/shared_ptr/creation/version.cc: New test.\n+\t* testsuite/20_util/unique_ptr/creation/for_overwrite.cc: Check\n+\tfeature test macro. Test non-trivial default-initialization.\n+\n+2022-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_construct.h (_Construct, _Construct_novalue):\n+\tAlso cast away cv-qualifiers when converting pointer to void.\n+\t* testsuite/20_util/allocator/void.cc: Test construct function\n+\twith cv-qualified types.\n+\n+2022-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103992\n+\t* include/bits/stl_iterator.h (common_iterator): Use\n+\tstd::construct_at instead of placement new.\n+\t* testsuite/24_iterators/common_iterator/1.cc: Check copy\n+\tconstruction is usable in constant expressions.\n+\n+2022-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2011.xml: Document new tokens\n+\taccepted by std::random_device constructor.\n+\t* doc/html/manual/status.html: Regenerate.\n+\n 2022-01-12  Patrick Palka  <ppalka@redhat.com>\n \n \t* testsuite/20_util/to_chars/103955.cc: Add explicit dg-do"}]}