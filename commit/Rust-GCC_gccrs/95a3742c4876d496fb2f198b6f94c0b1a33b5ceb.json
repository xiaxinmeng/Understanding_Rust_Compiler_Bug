{"sha": "95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVhMzc0MmM0ODc2ZDQ5NmZiMmYxOThiNmY5NGMwYjFhMzNiNWNlYg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-06-10T22:37:05Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-06-10T22:37:05Z"}, "message": "Makefile.in (tree-ssanames.o): Depend on TREE_FLOW_H.\n\n\n\t* Makefile.in (tree-ssanames.o): Depend on TREE_FLOW_H.\n\t* tree-flow.h (ssa_names, num_ssa_names, ssa_name): Declare.\n\t(highest_ssa_version): Remove.\n\t* tree-outof-ssa.c (new_temp_expr_table): Replace\n\thighest_ssa_version with num_ssa_names.\n\t(dump_replaceable_exprs): Likewise.\n\t(rewrite_vars_out_of_ssa): Likewise.\n\t* tree-ssa-ccp.c (initialize): Likewise\n\t* tree-ssa-copyrename.c (rename_ssa_copies): Likewise.\n\t* tree-ssa-dce.c (tree_dce_init): Likewise.\n\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Likewise.\n\t* tree-ssa-live.c (create_ssa_var_map): Likewise.\n\t(dump_var_map): Likewise.\n\t* tree-ssa.c (verify_ssa): Likewise.\n\t(kill_redundant_phi_nodes): Likewise.\n\tDo not build a local array of SSA_NAMEs.  Use the ssa_names table.\n\t* tree-ssanames.c: Include tree-flow.h\n\t(ssa_names): New varray.\n\t(init_ssa_names): Initialize ssa_names.\n\tReserve the first slot of the ssa_names table.\n\t(make_ssa_name): Push the newly created SSA_NAME into ssa_names.\n\tAssign version numbers using num_ssa_names.\n\nFrom-SVN: r82950", "tree": {"sha": "f3e7c5ed70989e5440f3ec4150aca5517dd053b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3e7c5ed70989e5440f3ec4150aca5517dd053b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/comments", "author": null, "committer": null, "parents": [{"sha": "a72967cd5d574694af7abb943c237a8960eabbab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72967cd5d574694af7abb943c237a8960eabbab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a72967cd5d574694af7abb943c237a8960eabbab"}], "stats": {"total": 123, "additions": 74, "deletions": 49}, "files": [{"sha": "5c44fc3a50df0aec2208f3974984a8ba273a611e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -1,3 +1,28 @@\n+2004-06-10  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* Makefile.in (tree-ssanames.o): Depend on TREE_FLOW_H.\n+\t* tree-flow.h (ssa_names, num_ssa_names, ssa_name): Declare.\n+\t(highest_ssa_version): Remove.\n+\t* tree-outof-ssa.c (new_temp_expr_table): Replace\n+\thighest_ssa_version with num_ssa_names.\n+\t(dump_replaceable_exprs): Likewise.\n+\t(rewrite_vars_out_of_ssa): Likewise.\n+\t* tree-ssa-ccp.c (initialize): Likewise\n+\t* tree-ssa-copyrename.c (rename_ssa_copies): Likewise.\n+\t* tree-ssa-dce.c (tree_dce_init): Likewise.\n+\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Likewise.\n+\t* tree-ssa-live.c (create_ssa_var_map): Likewise.\n+\t(dump_var_map): Likewise.\n+\t* tree-ssa.c (verify_ssa): Likewise.\n+\t(kill_redundant_phi_nodes): Likewise.\n+\tDo not build a local array of SSA_NAMEs.  Use the ssa_names table.\n+\t* tree-ssanames.c: Include tree-flow.h\n+\t(ssa_names): New varray.\n+\t(init_ssa_names): Initialize ssa_names.\n+\tReserve the first slot of the ssa_names table.\n+\t(make_ssa_name): Push the newly created SSA_NAME into ssa_names.\n+\tAssign version numbers using num_ssa_names.\n+\n 2004-06-10  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* doc/sourcebuild.texi (Front End): Add details of more"}, {"sha": "6b25b343321ba2245293b4c32dbe23ed947c7ed9", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -1615,7 +1615,7 @@ tree-ssa-dom.o : tree-ssa-dom.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    errors.h function.h $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    $(BASIC_BLOCK_H) domwalk.h real.h tree-pass.h flags.h langhooks.h\n tree-ssanames.o : tree-ssanames.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) varray.h $(GGC_H) gt-tree-ssanames.h \n+   $(TM_H) $(TREE_H) varray.h $(GGC_H) gt-tree-ssanames.h  $(TREE_FLOW_H)\n tree-phinodes.o : tree-phinodes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) varray.h $(GGC_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) \\\n    gt-tree-phinodes.h $(RTL_H)"}, {"sha": "d9827e17048e2ee62df4e36e443195ee1b8eaeb7", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -348,6 +348,12 @@ extern GTY(()) varray_type referenced_vars;\n #define num_referenced_vars VARRAY_ACTIVE_SIZE (referenced_vars)\n #define referenced_var(i) VARRAY_TREE (referenced_vars, i)\n \n+/* Array of all SSA_NAMEs used in the function.  */\n+extern GTY(()) varray_type ssa_names;\n+\n+#define num_ssa_names VARRAY_ACTIVE_SIZE (ssa_names)\n+#define ssa_name(i) VARRAY_TREE (ssa_names, i)\n+\n /* Artificial variable used to model the effects of function calls.  */\n extern GTY(()) tree global_var;\n \n@@ -529,8 +535,6 @@ extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *);\n /* In tree-into-ssa.c  */\n extern void rewrite_into_ssa (void);\n \n-extern unsigned int highest_ssa_version;\n-\n /* In tree-ssa-pre.c  */\n extern void tree_perform_ssapre (tree, enum tree_dump_index);\n "}, {"sha": "3d0ec5267c155ca0aa9751c66bac082d0c2a9a04", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -1205,7 +1205,7 @@ new_temp_expr_table (var_map map)\n   t = (temp_expr_table_p) xmalloc (sizeof (struct temp_expr_table_d));\n   t->map = map;\n \n-  t->version_info = xcalloc (highest_ssa_version + 1, sizeof (void *));\n+  t->version_info = xcalloc (num_ssa_names + 1, sizeof (void *));\n   t->partition_dep_list = xcalloc (num_var_partitions (map) + 1, \n \t\t\t\t   sizeof (value_expr_p));\n \n@@ -1700,7 +1700,7 @@ dump_replaceable_exprs (FILE *f, tree *expr)\n   tree stmt, var;\n   int x;\n   fprintf (f, \"\\nReplacing Expressions\\n\");\n-  for (x = 0; x < (int)highest_ssa_version + 1; x++)\n+  for (x = 0; x < (int)num_ssa_names + 1; x++)\n     if (expr[x])\n       {\n         stmt = expr[x];\n@@ -2089,7 +2089,7 @@ rewrite_vars_out_of_ssa (bitmap vars)\n                                                                                 \n       /* Now register partitions for all instances of the variables we\n \t are taking out of SSA form.  */\n-      map = init_var_map (highest_ssa_version + 1);\n+      map = init_var_map (num_ssa_names + 1);\n       register_ssa_partitions_for_vars (vars, map);\n \n       /* Now that we have all the partitions registered, translate the"}, {"sha": "98c04970d85356f4385ac908a2853440695aa34a", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -1120,11 +1120,11 @@ initialize (void)\n   bb_in_list = sbitmap_alloc (last_basic_block);\n   sbitmap_zero (bb_in_list);\n \n-  value_vector = (value *) xmalloc (highest_ssa_version * sizeof (value));\n-  memset (value_vector, 0, highest_ssa_version * sizeof (value));\n+  value_vector = (value *) xmalloc (num_ssa_names * sizeof (value));\n+  memset (value_vector, 0, num_ssa_names * sizeof (value));\n \n   /* 1 if ssa variable is used in a virtual variable context.  */\n-  virtual_var = sbitmap_alloc (highest_ssa_version);\n+  virtual_var = sbitmap_alloc (num_ssa_names);\n   sbitmap_zero (virtual_var);\n \n   /* Initialize default values and simulation flags for PHI nodes, statements "}, {"sha": "f74b2e402e5631b9a8bf257090d089de4404b423", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -296,7 +296,7 @@ rename_ssa_copies (void)\n   else\n     debug = NULL;\n \n-  map = init_var_map (highest_ssa_version + 1);\n+  map = init_var_map (num_ssa_names + 1);\n \n   FOR_EACH_BB (bb)\n     {\n@@ -346,7 +346,7 @@ rename_ssa_copies (void)\n   /* Now one more pass to make all elements of a partition share the same\n      root variable.  */\n   \n-  for (x = 1; x <= highest_ssa_version; x++)\n+  for (x = 1; x <= num_ssa_names; x++)\n     {\n       part_var = partition_to_var (map, x);\n       if (!part_var)"}, {"sha": "5380e0156056a6f27bcbcc98923294b7571410d0", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -791,7 +791,7 @@ tree_dce_init (bool aggressive)\n       sbitmap_zero (last_stmt_necessary);\n     }\n \n-  processed = sbitmap_alloc (highest_ssa_version + 1);\n+  processed = sbitmap_alloc (num_ssa_names + 1);\n   sbitmap_zero (processed);\n \n   VARRAY_TREE_INIT (worklist, 64, \"work list\");"}, {"sha": "20dbb7bd4764b917b5bbb9cda5fbe88a6d3353de", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -553,10 +553,10 @@ tree_ssa_dominator_optimize (void)\n \n   /* Create our hash tables.  */\n   avail_exprs = htab_create (1024, avail_expr_hash, avail_expr_eq, free);\n-  VARRAY_TREE_INIT (const_and_copies, highest_ssa_version, \"const_and_copies\");\n+  VARRAY_TREE_INIT (const_and_copies, num_ssa_names, \"const_and_copies\");\n   nonzero_vars = BITMAP_XMALLOC ();\n   VARRAY_EDGE_INIT (redirection_edges, 20, \"redirection_edges\");\n-  VARRAY_GENERIC_PTR_INIT (vrp_data, highest_ssa_version, \"vrp_data\");\n+  VARRAY_GENERIC_PTR_INIT (vrp_data, num_ssa_names, \"vrp_data\");\n \n   /* Setup callbacks for the generic dominator tree walker.  */\n   walk_data.walk_stmts_backward = false;\n@@ -625,8 +625,8 @@ tree_ssa_dominator_optimize (void)\n \n \t  /* The into SSA translation may have created new SSA_NAMES whic\n \t     affect the size of CONST_AND_COPIES and VRP_DATA.  */\n-\t  VARRAY_GROW (const_and_copies, highest_ssa_version);\n-\t  VARRAY_GROW (vrp_data, highest_ssa_version);\n+\t  VARRAY_GROW (const_and_copies, num_ssa_names);\n+\t  VARRAY_GROW (vrp_data, num_ssa_names);\n \t}\n \n       /* Reinitialize the various tables.  */"}, {"sha": "549211d2979e9c42321009cba6341d9892e6cb8d", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -309,7 +309,7 @@ create_ssa_var_map (int flags)\n   sbitmap used_in_virtual_ops;\n #endif\n \n-  map = init_var_map (highest_ssa_version + 1);\n+  map = init_var_map (num_ssa_names + 1);\n \n #if defined ENABLE_CHECKING\n   used_in_real_ops = sbitmap_alloc (num_referenced_vars);\n@@ -322,8 +322,8 @@ create_ssa_var_map (int flags)\n   if (flags & SSA_VAR_MAP_REF_COUNT)\n     {\n       map->ref_count\n-\t= (int *)xmalloc (((highest_ssa_version + 1) * sizeof (int)));\n-      memset (map->ref_count, 0, (highest_ssa_version + 1) * sizeof (int));\n+\t= (int *)xmalloc (((num_ssa_names + 1) * sizeof (int)));\n+      memset (map->ref_count, 0, (num_ssa_names + 1) * sizeof (int));\n     }\n \n   FOR_EACH_BB (bb)\n@@ -1743,7 +1743,7 @@ dump_var_map (FILE *f, var_map map)\n         continue;\n \n       t = 0;\n-      for (y = 1; y < highest_ssa_version; y++)\n+      for (y = 1; y < num_ssa_names; y++)\n         {\n \t  p = partition_find (map->var_partition, y);\n \t  if (map->partition_to_compact)"}, {"sha": "d553676969f33e7cede2dffdc559744f577caa49", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -292,8 +292,7 @@ verify_ssa (void)\n {\n   bool err = false;\n   basic_block bb;\n-  basic_block *definition_block = xcalloc (highest_ssa_version,\n-\t\t  \t\t\t   sizeof (basic_block));\n+  basic_block *definition_block = xcalloc (num_ssa_names, sizeof (basic_block));\n \n   timevar_push (TV_TREE_SSA_VERIFY);\n \n@@ -850,8 +849,8 @@ raise_value (tree phi, tree val, tree *eq_to)\n static void\n kill_redundant_phi_nodes (void)\n {\n-  tree *eq_to, *ssa_names;\n-  unsigned i, ver, aver;\n+  tree *eq_to;\n+  unsigned i;\n   basic_block bb;\n   tree phi, t, stmt, var;\n \n@@ -871,15 +870,7 @@ kill_redundant_phi_nodes (void)\n \n      The remaining phi nodes have their uses replaced with their value\n      in the lattice and the phi node itself is removed.  */\n-  eq_to = xcalloc (highest_ssa_version, sizeof (tree));\n-\n-  /* The SSA_NAMES array holds each SSA_NAME node we encounter\n-     in a PHI node (indexed by ssa version number).\n-\n-     One could argue that the SSA_NAME manager ought to provide a\n-     generic interface to get at the SSA_NAME node for a given\n-     ssa version number.  */\n-  ssa_names = xcalloc (highest_ssa_version, sizeof (tree));\n+  eq_to = xcalloc (num_ssa_names, sizeof (tree));\n \n   /* We have had cases where computing immediate uses takes a\n      significant amount of compile time.  If we run into such\n@@ -893,8 +884,6 @@ kill_redundant_phi_nodes (void)\n       for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n \t{\n \t  var = PHI_RESULT (phi);\n-\t  ver = SSA_NAME_VERSION (var);\n-\t  ssa_names[ver] = var;\n \n \t  for (i = 0; i < (unsigned) PHI_NUM_ARGS (phi); i++)\n \t    {\n@@ -907,8 +896,6 @@ kill_redundant_phi_nodes (void)\n \t\t}\n \n \t      stmt = SSA_NAME_DEF_STMT (t);\n-\t      aver = SSA_NAME_VERSION (t);\n-\t      ssa_names[aver] = t;\n \n \t      /* If the defining statement for this argument is not a\n \t\t phi node or the argument is associated with an abnormal\n@@ -917,31 +904,30 @@ kill_redundant_phi_nodes (void)\n \t      if (TREE_CODE (stmt) != PHI_NODE\n \t\t  || SSA_NAME_OCCURS_IN_ABNORMAL_PHI (t))\n \t\t{\n-\t\t  eq_to[aver] = t;\n+\t\t  eq_to[SSA_NAME_VERSION (t)] = t;\n \t\t  raise_value (phi, t, eq_to);\n \t\t}\n \t    }\n \t}\n     }\n \n   /* Now propagate the values.  */\n-  for (i = 0; i < highest_ssa_version; i++)\n+  for (i = 0; i < num_ssa_names; i++)\n     if (eq_to[i]\n-\t&& eq_to[i] != ssa_names[i])\n-      replace_immediate_uses (ssa_names[i], eq_to[i]);\n+\t&& eq_to[i] != ssa_name (i))\n+      replace_immediate_uses (ssa_name (i), eq_to[i]);\n \n   /* And remove the dead phis.  */\n-  for (i = 0; i < highest_ssa_version; i++)\n+  for (i = 0; i < num_ssa_names; i++)\n     if (eq_to[i]\n-\t&& eq_to[i] != ssa_names[i])\n+\t&& eq_to[i] != ssa_name (i))\n       {\n-\tstmt = SSA_NAME_DEF_STMT (ssa_names[i]);\n+\tstmt = SSA_NAME_DEF_STMT (ssa_name (i));\n \tremove_phi_node (stmt, 0, bb_for_stmt (stmt));\n       }\n \n   free_df ();\n   free (eq_to);\n-  free (ssa_names);\n }\n \n struct tree_opt_pass pass_redundant_phi ="}, {"sha": "6a0fda6006fabb9872e29294061faa571ed3fd91", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3742c4876d496fb2f198b6f94c0b1a33b5ceb/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=95a3742c4876d496fb2f198b6f94c0b1a33b5ceb", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"varray.h\"\n #include \"ggc.h\"\n+#include \"tree-flow.h\"\n \n /* Rewriting a function into SSA form can create a huge number of SSA_NAMEs,\n    many of which may be thrown away shortly after their creation if jumps\n@@ -57,8 +58,8 @@ Boston, MA 02111-1307, USA.  */\n    a very well defined lifetime.  If someone wants to experiment with that\n    this is the place to try it.  */\n    \n-/* Next SSA version number to be allocated.  */\n-unsigned int highest_ssa_version;\n+/* Array of all SSA_NAMEs used in the function.  */\n+varray_type ssa_names;\n                                                                                 \n /* Free list of SSA_NAMEs.  This list is wiped at the end of each function\n    after we leave SSA form.  */\n@@ -78,7 +79,13 @@ unsigned int ssa_name_nodes_created;\n void\n init_ssanames (void)\n {\n-  highest_ssa_version = UNUSED_NAME_VERSION + 1;\n+  VARRAY_TREE_INIT (ssa_names, 50, \"ssa_names table\");\n+\n+  /* Version 0 is special, so reserve the first slot in the table.  Though\n+     currently unused, we may use version 0 in alias analysis as part of\n+     the heuristics used to group aliases when the alias sets are too\n+     large.  */\n+  VARRAY_PUSH_TREE (ssa_names, NULL_TREE);\n   free_ssanames = NULL;\n }\n \n@@ -142,7 +149,8 @@ make_ssa_name (tree var, tree stmt)\n   else\n     {\n       t = make_node (SSA_NAME);\n-      SSA_NAME_VERSION (t) = highest_ssa_version++;\n+      SSA_NAME_VERSION (t) = num_ssa_names;\n+      VARRAY_PUSH_TREE (ssa_names, t);\n #ifdef GATHER_STATISTICS\n       ssa_name_nodes_created++;\n #endif\n@@ -151,10 +159,12 @@ make_ssa_name (tree var, tree stmt)\n   TREE_TYPE (t) = TREE_TYPE (var);\n   SSA_NAME_VAR (t) = var;\n   SSA_NAME_DEF_STMT (t) = stmt;\n+  SSA_NAME_PTR_INFO (t) = NULL;\n \n   return t;\n }\n \n+\n /* We no longer need the SSA_NAME expression VAR, release it so that\n    it may be reused. \n "}]}